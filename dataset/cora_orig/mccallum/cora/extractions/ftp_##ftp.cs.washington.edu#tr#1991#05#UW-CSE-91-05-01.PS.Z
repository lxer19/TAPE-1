URL: ftp://ftp.cs.washington.edu/tr/1991/05/UW-CSE-91-05-01.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/ruzzo/
Root-URL: 
Title: A Compendium of Problems Complete for P  RCS Revision: 1.46  
Author: (Preliminary) Raymond Greenlaw H. James Hoover Walter L. Ruzzo Raymond Greenlaw, H. James Hoover, and Walter L. Ruzzo 
Note: This is a preliminary version, mainly containing the problem list. The latest version of this document is available in electronic form by anonymous ftp from thorhild.cs.ualberta.ca (129.128.4.53) as either a compressed dvi file (TR91-11.dvi.Z) or as a compressed postscript file (TR91-11.ps.Z), or from cs.washington.edu (128.95.1.4) as a compressed postscript file (tr/1991/05/uw-cse-9105-01.ps.Z). c fl1990, 1991  Author's address:  Research supported by the Natural Sciences and Engineering Research Council of Canada grant OGP 38937. Author's address:  Research supported in part by NSF grants ECS-8306622, CCR-8703196, CCR-9002891, and by NSF/DARPA grant CCR-8907960. A portion of this work was performed while visiting the University of Toronto, whose hospitality is gratefully acknowledged. Author's address:  
Address: Alberta  New Hampshire  New Hampshire, Durham, NH 03824,  Alberta, Edmonton, Alberta, Canada T6G 2H1,  Seattle, WA 98195,  
Affiliation: Department of Computing Science University of  University of  Department of Computer Science and Engineering University of Washington  Department of Computer Science, University of  Department of Computing Science, University of  Department of Computer Science and Engineering, FR-35, University of Washington,  
Pubnum: Technical Report TR 91-14  Technical Report TR  
Email: e-mail address: greenlaw@unh.edu  e-mail address: hoover@cs.ualberta.ca  e-mail address: ruzzo@cs.washington.edu  
Date: December 20, 1991  91-05-01  
Abstract: Technical Report TR 91-11 Department of Computer Science Abstract This paper serves two purposes. Firstly, it is an elementary introduction to the theory of P-completeness | the branch of complexity theory that focuses on identifying the problems in the class P that are "hardest," in the sense that they appear to lack highly parallel solutions. That is, they do not have parallel solutions using time polynomial in the logarithm of the problem size and a polynomial number of processors unless all problem in P have such solutions, or equivalently, unless P = NC . Secondly, this paper is a reference work of P-complete problems. We present a compilation of the known P-complete problems, including several unpublished or new P-completeness results, and many open problems. 
Abstract-found: 1
Intro-found: 1
Reference: [BGS90] <author> J. L. Balcazar, J. Gabarro, and M. Santha. </author> <title> Deciding bisimilarity is P-complete. </title> <type> Technical Report LSI-90-25, </type> <institution> Universitat Politecnica de Catalunya, </institution> <year> 1990. </year>
Reference: [Den84] <author> L. Denenberg. </author> <title> Computational Complexity of Logical Problems. </title> <type> PhD thesis, </type> <institution> Har-vard University, </institution> <year> 1984. </year>
Reference: [DL84] <author> L. Denenberg and H. R. Lewis. </author> <title> The complexity of the satisfiablility problem for Korn formulas. </title> <journal> Theoretical Computer Science, </journal> <volume> 30(3) </volume> <pages> 319-341, </pages> <year> 1984. </year>
Reference: [God87] <author> G. Godbeer. </author> <title> The computational complexity of the stable configuration problem for connectionist models. </title> <type> Master's thesis, </type> <institution> University of Toronto, </institution> <year> 1987. </year>
Reference: [GR88] <author> A. M. Gibbons and W. Rytter. </author> <title> Efficient Parallel Algorithms. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1988. </year>
Reference: [Lin91] <author> Y. Lin. </author> <title> Parallel Computational Methods in Integer Linear Programming. </title> <type> PhD thesis, </type> <institution> The City University of New York, </institution> <year> 1991. </year>
Reference: [Lip87] <author> J. Lipscomb. </author> <title> On the computational complexity of finding a connectionist model's stable state vectors. </title> <type> Master's thesis, </type> <institution> University of Toronto, </institution> <year> 1987. </year>
Reference: [LKPar] <author> Y. Lin-Kriz and V. Pan. </author> <title> On the parallel complexity of integer linear programming, GCD and the iterated mod function. </title> <booktitle> In Proceedings of the Third Annual ACM-SIAM Symposium on Discrete Algorithms, to appear. </booktitle>
Reference: [SH90] <author> R. Sarnath and X. </author> <title> He. A P-complete graph partition problem. </title> <journal> Theoretical Computer Science, </journal> <volume> 76 </volume> <pages> 343-351, </pages> <year> 1990. </year>
Reference: [Ste91a] <author> I.A. Stewart. </author> <title> On a greedy heuristic for finding small dominating sets. </title> <type> Technical report, </type> <institution> University of Newcastle upon Tyne, </institution> <year> 1991. </year> <note> Submitted for publication. </note>
Reference: [Ste91b] <author> I.A. Stewart. </author> <title> On two approximation algorithms for the clique problem. </title> <type> Technical report, </type> <institution> University of Newcastle upon Tyne, </institution> <year> 1991. </year> <title> 98 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) References </title>
Reference: [AA88] <author> A. Aggarwal and R. Anderson. </author> <title> A random NC algorithm for depth first search. </title> <journal> Combinatorica, </journal> <volume> 8(1) </volume> <pages> 1-12, </pages> <year> 1988. </year>
Reference-contexts: Computing the LFDFS tree in planar graphs is P -complete as well [And85]. In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 <ref> [AA88, AAK90] </ref>. Computing a depth-first vertex numbering for planar graphs is in NC [Smi86, HY87]. Computing the lexicographically first depth-first numbering for DAGs is in NC [Grear, dlTK88, dlTK89]. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC [SV85]. <p> See Section 7.6 for more discussion. B.5.1 Directed or Undirected Depth First Search (DFS) Given: A graph G and a vertex s. Problem: Construct the depth first search numbering of G starting from vertex s. Reference: <ref> [AA88, AAK90] </ref> Remarks: RNC algorithms are now known for both the undirected [AA88] and directed [AAK90] cases, subsuming earlier RNC results for planar graphs [Smi86]. For DAGs, DFS is in NC [Gre88a]. <p> See Section 7.6 for more discussion. B.5.1 Directed or Undirected Depth First Search (DFS) Given: A graph G and a vertex s. Problem: Construct the depth first search numbering of G starting from vertex s. Reference: [AA88, AAK90] Remarks: RNC algorithms are now known for both the undirected <ref> [AA88] </ref> and directed [AAK90] cases, subsuming earlier RNC results for planar graphs [Smi86]. For DAGs, DFS is in NC [Gre88a].
Reference: [AAK90] <author> A. Aggarwal, R. Anderson, and M. Kao. </author> <title> Parallel depth-first search in general directed graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(2) </volume> <pages> 397-409, </pages> <year> 1990. </year>
Reference-contexts: Computing the LFDFS tree in planar graphs is P -complete as well [And85]. In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 <ref> [AA88, AAK90] </ref>. Computing a depth-first vertex numbering for planar graphs is in NC [Smi86, HY87]. Computing the lexicographically first depth-first numbering for DAGs is in NC [Grear, dlTK88, dlTK89]. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC [SV85]. <p> See Section 7.6 for more discussion. B.5.1 Directed or Undirected Depth First Search (DFS) Given: A graph G and a vertex s. Problem: Construct the depth first search numbering of G starting from vertex s. Reference: <ref> [AA88, AAK90] </ref> Remarks: RNC algorithms are now known for both the undirected [AA88] and directed [AAK90] cases, subsuming earlier RNC results for planar graphs [Smi86]. For DAGs, DFS is in NC [Gre88a]. <p> B.5.1 Directed or Undirected Depth First Search (DFS) Given: A graph G and a vertex s. Problem: Construct the depth first search numbering of G starting from vertex s. Reference: [AA88, AAK90] Remarks: RNC algorithms are now known for both the undirected [AA88] and directed <ref> [AAK90] </ref> cases, subsuming earlier RNC results for planar graphs [Smi86]. For DAGs, DFS is in NC [Gre88a]. B.5.2 0-1 Maximum Flow (0-1 MaxFlow) Given: Directed graph G with each edge labeled in unary with a capacity c i 0 and two distinguished vertices, source s and sink t.
Reference: [ABI86] <author> N. Alon, L. Babai, and A. Itai. </author> <title> A fast and simple randomized parallel algorithm for the maximal independent set problem. </title> <journal> Journal of Algorithms, </journal> <volume> 7 </volume> <pages> 567-583, </pages> <year> 1986. </year>
Reference-contexts: Computing or approximating the size of the lexicographically first maximal independent set is also P - complete; see Section 6.2. Karp and Wigderson gave the first NC algorithm for finding a maximal independent set [KW85], subsequently improved by Luby [Lub86], by Alon, Babai and Itai <ref> [ABI86] </ref>, and by Goldberg and Spencer [GS89]. These algorithms do not compute the lexicographically first maximal independent set. Part II: P -Complete Problems * 51 A.2.2 Lexicographically First Maximal Clique (LFMC) Given: An undirected graph G with an ordering on the vertices and a designated vertex v.
Reference: [ACG90] <author> M. J. Atallah, P. Callahan, and M. T. Goodrich. </author> <title> P-complete geometric problems. </title> <booktitle> In Proceedings of the 1990 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 317-326, </pages> <address> Crete, Greece, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: When L encounters a vertex v of P , each diagonal from v to another vertex in P , which does not cross a previously drawn diagonal, is added to the triangulation. Reference: <ref> [ACG90] </ref> Hint: It is easy to see the plane sweep triangulation algorithm runs in polynomial time. The reduction is from a variant of planar CVP, Problem A.1.7. <p> Remarks: The problem of finding some arbitrary triangulation is in NC [Goo89]. If the polygon P is not allowed to have holes then the complexity of the problem is open. In <ref> [ACG90] </ref> they conjecture that this restricted version is in NC . <p> Problem: Do segments r and t "touch" in the partitioning of the plane constructed by extending segments in the order of their weights? Segments are extended until they reach another segment or a previous segment extension. Reference: <ref> [ACG90] </ref> Hint: It is easy to see that the process of extending the segments can be performed in polynomial time. The reduction is from the same version of PCVP as used in Problem A.9.1. The gates of the instance of PCVP are numbered in topological order. <p> Segment r is the vertical segment corresponding to the output wire of the circuit. Segment t is a special output "pad." r will touch t when extended if and only if the circuit evaluates to true. Remarks: The complexity of the 2-oriented version of the problem is open <ref> [ACG90] </ref>. In [ACG90] they remark that the problem has been reduced to an instance of MCVP that has a very restricted topology, although not planar. Thus, it is open whether or not this version of the problem is in NC . <p> Segment t is a special output "pad." r will touch t when extended if and only if the circuit evaluates to true. Remarks: The complexity of the 2-oriented version of the problem is open <ref> [ACG90] </ref>. In [ACG90] they remark that the problem has been reduced to an instance of MCVP that has a very restricted topology, although not planar. Thus, it is open whether or not this version of the problem is in NC . <p> The upper envelope consists of those segments visible from the point (0; +1). A segment is visible from a point p if a ray cast from p can hit the segment before hitting any other segment. Reference: <ref> [ACG90, Her90] </ref> Hint: The visibility layering process is polynomial time [Her90]. The reduction presented in [Her90] is from the monotone CVP. We sketch this reduction. The gates in the instance of CVP are assumed to be numbered in topological order. <p> The output of the circuit is true if and only if a s has a label whose value is congruent to Part II: P -Complete Problems * 85 one mod three. Remarks: The reduction given in <ref> [ACG90] </ref> is similar and is also from a variant of MCVP. The main difference is in the way fanout is treated. The version of MCVP used in [ACG90] consists of crossing fanout gates, single output and gates, and single output or gates. <p> Remarks: The reduction given in <ref> [ACG90] </ref> is similar and is also from a variant of MCVP. The main difference is in the way fanout is treated. The version of MCVP used in [ACG90] consists of crossing fanout gates, single output and gates, and single output or gates. An instance consists of alternate routing and logic layers. <p> Gadgets are constructed for the three types of gates and a similar decision problem to the one in [Her90] is posed to determine the output of the circuit. If the length of all segments is required to be the same then the complexity of the problem is not known <ref> [ACG90] </ref>. In [ACG90] they conjecture that this version of the problem is in NC . A.10 Real Analysis A.10.1 Real Analogue to CVP (RealCVP) Given: A feasible real function V defined on (1; +1). <p> If the length of all segments is required to be the same then the complexity of the problem is not known <ref> [ACG90] </ref>. In [ACG90] they conjecture that this version of the problem is in NC . A.10 Real Analysis A.10.1 Real Analogue to CVP (RealCVP) Given: A feasible real function V defined on (1; +1). <p> Problem: Do segments r and t "touch" in the partitioning of the plane constructed by extending segments in the order of their weights? Segments are extended until they reach another segment or a previous segment extension. Reference: <ref> [ACG90] </ref> Remarks: The 3-oriented version, Problem A.9.2, in which three different slopes are allowed, is P -complete [ACG90]. <p> Reference: <ref> [ACG90] </ref> Remarks: The 3-oriented version, Problem A.9.2, in which three different slopes are allowed, is P -complete [ACG90]. <p> The general problem is open for all mirrors of a fixed size as well. See [RTY90] for a detailed discussion. B.3.3 Restricted Plane Sweep Triangulation (SWEEP) Given: An n vertex polygon P without holes. Problem: Find the triangulation computed by the plane sweep triangulation algorithm. Reference: <ref> [ACG90] </ref> Remarks: The problem of finding some arbitrary triangulation is in NC [Goo89]. If the polygon is allowed to have holes then the problem is P -complete [ACG90]. <p> Problem: Find the triangulation computed by the plane sweep triangulation algorithm. Reference: <ref> [ACG90] </ref> Remarks: The problem of finding some arbitrary triangulation is in NC [Goo89]. If the polygon is allowed to have holes then the problem is P -complete [ACG90]. See Problem A.9.1 B.3.4 Successive Convex Hulls (SCH) Given: A set S of n points in dimension d and a designated point p. Problem: Determine if p is in the i th remaining convex hull that is formed by repeatedly finding and removing convex hulls from S. <p> The upper envelope consists of those segments visible from the point (0; +1). Reference: <ref> [ACG90] </ref> Remarks: The problem is P -complete if the restriction on unit lengths is removed [ACG90]. See Problem A.9.3. B.4 CC Problems Several reseachers independently suggested looking at the complexity of the Comparator Circuit Value Problem, or CCVP (Problem B.4.1). <p> The upper envelope consists of those segments visible from the point (0; +1). Reference: <ref> [ACG90] </ref> Remarks: The problem is P -complete if the restriction on unit lengths is removed [ACG90]. See Problem A.9.3. B.4 CC Problems Several reseachers independently suggested looking at the complexity of the Comparator Circuit Value Problem, or CCVP (Problem B.4.1). CC is the class of problems reducible to CCVP (Mayr and Subramanian [MS89]).
Reference: [AHU74] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference: [All89] <author> Eric W. Allender. </author> <title> P-uniform circuit complexity. </title> <journal> Journal of the ACM, </journal> <volume> 36(4) </volume> <pages> 912-928, </pages> <month> October </month> <year> 1989. </year>
Reference: [AM84a] <author> R. J. Anderson and E. Mayr. </author> <title> Parallelism and greedy algorithms. </title> <type> Technical Report STAN-CS-84-1003, </type> <institution> Computer Science Department, Stanford University, </institution> <month> April </month> <year> 1984. </year>
Reference-contexts: There is an NC algorithm for 5 coloring planar graphs [Nao87]. A.2.7 High Degree Subgraph (HDS) Given: A graph G = (V; E) and an integer k. Problem: Does G contain a vertex induced subgraph with minimum degree at least k? Reference: <ref> [AM84a] </ref> Hint: Reduce AM2CVP to HDS. The proof illustrated here is for k = 3, although it can be generalized to any fixed k 3. <p> For fixed 0 c 1, consider finding an approximation d such that K (G) d cK (G). For any c &lt; 1=2 there is an NC algorithm for finding d, and for any c &gt; 1=2 the problem of finding d is P -complete <ref> [AM84a] </ref>. A "complementary" low degree subgraph problem has also been studied and for several natural decision problems it is NP -complete [Gre89]. Decision problems based on ordered vertex removal relating to subgraph computations are also P -complete [Gre89].
Reference: [AM84b] <author> J. Avenhaus and K. Madlener. </author> <title> The Nielsen reduction and P -complete problems in free groups. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 32(1,2):61-76, </address> <year> 1984. </year>
Reference-contexts: Let U = fu 1 ; : : : ; u m g S fl , where m 2 N and let x 2 S fl . Problem: Is x 2 hU i? That is, is x in the subgroup of F generated by U ? Reference: <ref> [AM84b, Ste89] </ref> Hint: Stewart reported an error in the result contained in [AM84b]. The reduction in [AM84b] is a generic one from a normal form Turing machine. However, it reduces a Tur-ing machine computation to a version of GWP where S is a countably infinite set [Ste89]. <p> Problem: Is x 2 hU i? That is, is x in the subgroup of F generated by U ? Reference: [AM84b, Ste89] Hint: Stewart reported an error in the result contained in <ref> [AM84b] </ref>. The reduction in [AM84b] is a generic one from a normal form Turing machine. However, it reduces a Tur-ing machine computation to a version of GWP where S is a countably infinite set [Ste89]. Stewart shows using the Nielsen reduction algorithm that this problem is still in P . <p> Problem: Is x 2 hU i? That is, is x in the subgroup of F generated by U ? Reference: [AM84b, Ste89] Hint: Stewart reported an error in the result contained in <ref> [AM84b] </ref>. The reduction in [AM84b] is a generic one from a normal form Turing machine. However, it reduces a Tur-ing machine computation to a version of GWP where S is a countably infinite set [Ste89]. Stewart shows using the Nielsen reduction algorithm that this problem is still in P . <p> Problem: Is the group generated by U a subgroup of the group generated by V ? Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from the generalized word problem, Problem A.8.6. <p> The problem of determining whether hU i is normal in hU; xi is also P -complete <ref> [AM84b] </ref>. A.8.8 Subgroup Equality (SE) Given: Let S be a finite set and F be the free group generated by S. Let S = fs; s 1 js 2 Sg, where s 1 denotes the inverse of s. Let S fl denote the set of all finite words over S. <p> Let U = fu 1 ; : : : ; u m g; V = fv 1 ; : : : ; v p g S fl , where m; p 2 N . Problem: Is hU i = hV i? Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from the subgroup containment problem, Problem A.8.7. Observe hU i is a subgroup of hV i if and only if hU [ V i = hV i. <p> Problem: Is hU i a subgroup of hV i with finite index in hV i? The index of U in V is the number of distinct right cosets of U in V . Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from the subgroup containment problem, Problem A.8.7. <p> Note, hU i is a subgroup of hV i if and only if hU [ V i has finite index in hV i. Let x 2 S fl . The problem of determining whether hU i has finite index in hU; xi is also P -complete <ref> [AM84b] </ref>. 78 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) A.8.10 Group Independence (GI) Given: Let S be a finite set and F be the free group generated by S. <p> Problem: Is U independent? That is, does each x 2 hU i have a unique freely reducible representation. A word w is freely reducible if it contains no segment of the form ss 1 or s 1 s. Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from an arbitrary polynomial time Turing machine [AM84b]. <p> Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from an arbitrary polynomial time Turing machine [AM84b]. A.8.11 Group Rank (GR) Given: Let S be a finite set and F be the free group generated by S. Let S = fs; s 1 js 2 Sg, where s 1 denotes the inverse of s. Let S fl denote the set of all finite words over S. <p> Let k 2 N . Let U = fu 1 ; : : : ; u m g S fl , where m 2 N . Problem: Does hU i have rank k? The rank is the number of elements in a minimal generating set. Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from the group independence problem, Problem A.8.10. Observe U is independent if and only if hU i has rank the number of elements in U . <p> Let U = fu 1 ; : : : ; u m g; V = fv 1 ; : : : ; v p g S fl , where m; p 2 N . Problem: Is hU i isomorphic to hV i? Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from the group independence problem, Problem A.8.10. <p> Problem: Does the mapping defined by (u i ) = v i for i = 1; : : : ; m, induce an isomor-phism from hU i to hV i? Reference: <ref> [AM84b] </ref> Hint: A variant of the Nielsen reduction algorithm can be used to show the problem is in P . The reduction is from the group independence problem, Problem A.8.10.
Reference: [AM84c] <author> J. Avenhaus and K. Madlener. </author> <title> On the complexity of intersection and conjugacy in free groups. </title> <journal> Theoretical Computer Science, </journal> <volume> 32(3) </volume> <pages> 279-295, </pages> <year> 1984. </year>
Reference-contexts: Let U = fu 1 ; : : : ; u m g; V = fv 1 ; : : : ; v p g S fl , where m = p 2 N . Problem: Is hU ix " yhV i non-empty? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is from an arbitrary polynomial time Turing machine [AM84c]. <p> Problem: Is hU ix " yhV i non-empty? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is from an arbitrary polynomial time Turing machine [AM84c]. Remarks: The intersection of right cosets problem and the intersection of left cosets problem are subproblems of the intersection of cosets problems and they are both P -complete as well. <p> Problem: Is hU ix " yhV i non-empty? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is from an arbitrary polynomial time Turing machine [AM84c]. Remarks: The intersection of right cosets problem and the intersection of left cosets problem are subproblems of the intersection of cosets problems and they are both P -complete as well. <p> Let U = fu 1 ; : : : ; u m g; V = fv 1 ; : : : ; v p g S fl , where m = p 2 N . Problem: Is hU i " hV i 6= hei? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is straightforward from the intersection of right cosets problem, see Problem A.8.14. A.8.16 Group Coset Equality (GCE) Given: Let S be a finite set and F be the free group generated by S. <p> Problem: Is hU i " hV i 6= hei? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is straightforward from the intersection of right cosets problem, see Problem A.8.14. A.8.16 Group Coset Equality (GCE) Given: Let S be a finite set and F be the free group generated by S. <p> Let U = fu 1 ; : : : ; u m g; V = fv 1 ; : : : ; v p g S fl , where m = p 2 N . Problem: Is hU ix = yhV i? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is from Problem A.8.15. <p> Problem: Is hU ix = yhV i? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is from Problem A.8.15. <p> three decision problems are also P -complete: equality of right cosets | Does hU ix = hV iy?, equivalence of cosets | Are there x; y such that hU ix = yhV i?, and equivalence of right cosets | Are there x; y such that hU ix = hV iy? <ref> [AM84c] </ref>. A.8.17 Conjugate Subgroups (CS) Given: Let S be a finite set and F be the free group generated by S. Let S = fs; s 1 js 2 Sg, where s 1 denotes the inverse of s. Let S fl denote the set of all finite words over S. <p> Problem: Is there an x 2 S fl such that x 1 hU ix = hV i? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is 80 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) from the equivalence of right cosets problem, see Problem A.8.16. <p> Problem: Is there an x 2 S fl such that x 1 hU ix = hV i? Reference: <ref> [AM84c] </ref> Hint: A polynomial time algorithm for the problem is given in [AM84c]. The reduction is 80 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) from the equivalence of right cosets problem, see Problem A.8.16. Remarks: The problem of determining whether x 1 hU ix is a subgroup of hV i is also P -complete [AM84c]. <p> is given in <ref> [AM84c] </ref>. The reduction is 80 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) from the equivalence of right cosets problem, see Problem A.8.16. Remarks: The problem of determining whether x 1 hU ix is a subgroup of hV i is also P -complete [AM84c]. A.8.18 Uniform Word Problem for Finitely Presented Algebras (UWPFPA) Given: A finitely presented algebra A = (M; A; ) and a pair of terms x; y. M is a finite set of symbols and A : M ! N defines the arity of each symbol.
Reference: [AM87a] <author> R. Anderson and E. Mayr. </author> <title> Parallelism and greedy algorithms. </title> <booktitle> In Advances in Computing Research, </booktitle> <volume> volume 4, </volume> <pages> pages 17-38. </pages> <publisher> JAI Press, </publisher> <year> 1987. </year> <note> Also Stanford Technical Report STAN-CS-84-1003, </note> <year> 1984. </year>
Reference-contexts: The lexicographically first blocking flow is the flow resulting from the standard sequential depth first search blocking flow algorithm. Reference: <ref> [AM87a] </ref> Hint: The reduction given in Problem A.4.4 can be easily modified to show this problem is P -complete. Remarks: The problem of finding the lexicographically first blocking flow in a 3 layered network is also P -complete.
Reference: [AM87b] <author> R. Anderson and E. Mayr. </author> <title> Parallelism and the maximal path problem. </title> <journal> Information Processing Letters, </journal> <volume> 24(2) </volume> <pages> 121-126, </pages> <year> 1987. </year>
Reference-contexts: The lexicographically first maximal path is the maximal path that would appear first in the "alphabetical" listing of all paths from s, where the alphabetizing is done with respect to the vertex numbers. Reference: <ref> [AM87b] </ref> Hint: The reduction is from a version of CVP consisting of not and or gates. The key idea is the construction of a subgraph called a latch. A latch consists of six nodes connected in a rectangular fashion. The latches are hooked together and labeled in a clever manner. <p> Remarks: LFMP remains P -complete when restricted to planar graphs with maximum degree three. If the maximum degree of any vertex in G is at most , then there is an algorithm that can find a maximal path in O ( log 3 n) time using n 2 processors <ref> [AM87b] </ref>. There is also an NC algorithm for finding a maximal path in planar graphs [AM87b]. The complexity of the general problem of finding a maximal path is open [AM87b], although known to be in RNC [And87]. <p> If the maximum degree of any vertex in G is at most , then there is an algorithm that can find a maximal path in O ( log 3 n) time using n 2 processors <ref> [AM87b] </ref>. There is also an NC algorithm for finding a maximal path in planar graphs [AM87b]. The complexity of the general problem of finding a maximal path is open [AM87b], although known to be in RNC [And87]. A.3.2 Lexicographically First Depth First Search Ordering (LFDFS) Given: A graph G = (V; E) with fixed ordered adjacency lists, and two designated vertices u and v. <p> there is an algorithm that can find a maximal path in O ( log 3 n) time using n 2 processors <ref> [AM87b] </ref>. There is also an NC algorithm for finding a maximal path in planar graphs [AM87b]. The complexity of the general problem of finding a maximal path is open [AM87b], although known to be in RNC [And87]. A.3.2 Lexicographically First Depth First Search Ordering (LFDFS) Given: A graph G = (V; E) with fixed ordered adjacency lists, and two designated vertices u and v. <p> B.2.5 Maximal Path (MP) Given: A graph G with a numbering on the vertices and a designated vertex r. Problem: Find a maximal path originating from r. That is, a path that cannot be extended without encountering a node already on the path. Reference: <ref> [AM87b] </ref> Remarks: The lexicographically first maximal path problem, Problem A.3.1, is P -complete even when restricted to planar graphs with maximum degree three. <p> If the maximum degree of any vertex in G is at most then there is an algorithm that can find a maximal path in O ( log 3 n) time using n 2 processors <ref> [AM87b] </ref>. There is also an NC algorithm for finding a maximal path in planar graphs [AM87b]. B.2.6 Maximal Independent Set Hypergraph (MISH) Given: A finite collection C = fC 1 ; : : : ; C n g of finite sets. <p> If the maximum degree of any vertex in G is at most then there is an algorithm that can find a maximal path in O ( log 3 n) time using n 2 processors <ref> [AM87b] </ref>. There is also an NC algorithm for finding a maximal path in planar graphs [AM87b]. B.2.6 Maximal Independent Set Hypergraph (MISH) Given: A finite collection C = fC 1 ; : : : ; C n g of finite sets.
Reference: [AMW89] <author> R. Anderson, E. Mayr, and M. Warmuth. </author> <title> Parallel approximation algorithms for bin packing. </title> <journal> Information and Computation, </journal> <volume> 82(3) </volume> <pages> 262-277, </pages> <year> 1989. </year>
Reference-contexts: Problem: Is the i th item packed into the b th bin by the first fit decreasing bin packing heuristic? Part II: P -Complete Problems * 65 Reference: <ref> [AMW89] </ref> Hint: Reduce AM2CVP (Problem A.1.4) to FFDBP. Without loss of generality, we can assume the gates fi 1 ; : : : ; fi n are numbered in topological order. <p> This is one of the first such problem where large numbers do not appear to be required for P -completeness (in contrast see MaxFlow, Problem A.4.4). The problem of determining if I is the packing produced by the best fit decreasing algorithm is also P -complete <ref> [AMW89] </ref>. In [AMW89] there is an NC algorithm that produces a packing within 11=9 of optimal. This is the same performance as for first fit decreasing. <p> This is one of the first such problem where large numbers do not appear to be required for P -completeness (in contrast see MaxFlow, Problem A.4.4). The problem of determining if I is the packing produced by the best fit decreasing algorithm is also P -complete <ref> [AMW89] </ref>. In [AMW89] there is an NC algorithm that produces a packing within 11=9 of optimal. This is the same performance as for first fit decreasing.
Reference: [And85] <author> R. J. Anderson. </author> <title> The Complexity of Parallel Algorithms. </title> <type> PhD thesis, </type> <institution> Stanford University, 1985. Stanford Computer Science Department TR STAN-CS-86-1092. </institution>
Reference-contexts: Problem: Is vertex u visited before vertex v in the depth first search of G induced by the order of the adjacency lists? Reference: [Rei85] Hint: Follows easily from Problem A.3.1, since the leftmost path in the lexicographically first depth first search tree is the lexicographically first maximal path <ref> [And85] </ref>. Reif [Rei85] gives a direct reduction from NOR CVP to DFS, taking advantage of the fixed order by which the adjacency lists are examined. We present the directed case from which the undirected case is easily derived. Without loss of generality, assume gates are numbered in topological order. <p> The problem remains open if this constraint is relaxed. For example, the problem remains open for graphs presented with all adjacency lists sorted in order of increasing vertex number. The problem remains P -complete if the input is specified by a fixed vertex numbering <ref> [And85, Gre88b] </ref>. Anderson showed that computing just the first branch of the lexicographically first DFS tree, called the lexicographically first maximal path, is P -complete [And85] (see Problem A.3.1). Computing the LFDFS tree in planar graphs is P -complete as well [And85]. <p> The problem remains P -complete if the input is specified by a fixed vertex numbering [And85, Gre88b]. Anderson showed that computing just the first branch of the lexicographically first DFS tree, called the lexicographically first maximal path, is P -complete <ref> [And85] </ref> (see Problem A.3.1). Computing the LFDFS tree in planar graphs is P -complete as well [And85]. In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 [AA88, AAK90]. <p> Anderson showed that computing just the first branch of the lexicographically first DFS tree, called the lexicographically first maximal path, is P -complete <ref> [And85] </ref> (see Problem A.3.1). Computing the LFDFS tree in planar graphs is P -complete as well [And85]. In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 [AA88, AAK90]. Computing a depth-first vertex numbering for planar graphs is in NC [Smi86, HY87]. <p> Reference: <ref> [And85, And88] </ref> Hint: Anderson's proof was from a version of CVP composed of or and not gates. The reduction we present is from NAND CVP.
Reference: [And87] <author> R. J. Anderson. </author> <title> A parallel algorithm for the maximal path problem. </title> <journal> Combina-torica, </journal> <volume> 7(4) </volume> <pages> 315-326, </pages> <year> 1987. </year> <note> References * 99 </note>
Reference-contexts: There is also an NC algorithm for finding a maximal path in planar graphs [AM87b]. The complexity of the general problem of finding a maximal path is open [AM87b], although known to be in RNC <ref> [And87] </ref>. A.3.2 Lexicographically First Depth First Search Ordering (LFDFS) Given: A graph G = (V; E) with fixed ordered adjacency lists, and two designated vertices u and v.
Reference: [And88] <author> Richard Anderson. </author> <title> Reduction of lexicographic depth-first search to breadth-depth search. </title> <type> Private communication, </type> <year> 1988. </year>
Reference-contexts: After all of s's children have been visited, the search continues with the node on the top of the stack playing the role of s. Reference: [Gre88b, Grear] Hint: The proof sketched below is due to Anderson <ref> [And88] </ref>. Reduce LFDFS to BDS. Insert a new vertex between every pair of connected nodes in the original graph. <p> Reference: <ref> [And85, And88] </ref> Hint: Anderson's proof was from a version of CVP composed of or and not gates. The reduction we present is from NAND CVP.
Reference: [AP87] <author> F. Afrati and C. H. Papadimitriou. </author> <title> The parallel complexity of simple chain queries. </title> <booktitle> In Proceedings of the Sixth Annual ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 210-213, </pages> <year> 1987. </year>
Reference-contexts: Remarks: Remains P -complete even for very restricted programs. In NC for programs with the "polynomial fringe property." See [UVG88] for details. See also <ref> [AP87] </ref> for related results. A.7 Formal Languages A.7.1 Context-Free Grammar Membership (CFGmem) Given: A context-free grammar G = (N; T; P; S) and a string x 2 T fl . Problem: Is x 2 L (G)? Reference: [JL76] Hint: Reduce GEN to CFGmem.
Reference: [Ata87] <author> M. J. Atallah. </author> <title> Posed the successive convex hull problem. </title> <booktitle> Cited in [ACG90], </booktitle> <year> 1987. </year>
Reference-contexts: See Problem A.9.1 B.3.4 Successive Convex Hulls (SCH) Given: A set S of n points in dimension d and a designated point p. Problem: Determine if p is in the i th remaining convex hull that is formed by repeatedly finding and removing convex hulls from S. Reference: <ref> [Cha85, Ata87, Cha89] </ref> Remarks: The problem is open for two dimensions and up. B.3.5 Unit Length Visibility Layers (ULVL) Given: A set of n unit length, horizontal, non-intersecting line segments in the plane, a designated segment s, and an integer d.
Reference: [BBMS88] <author> A. Bertoni, M. C. Bollina, G. Mauri, and N. Sabadini. </author> <title> On characterizing classes of efficiently parallelizable problems. </title> <booktitle> In Proceedings of the International Workshop on Parallel Computing and VLSI, </booktitle> <pages> pages 13-26. </pages> <booktitle> VLSI: Algorithms and Architectures, </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: Problem: Is the first entry of M Y j a 1? Y j is defined recursively as Y 0 = F , Y k = B Y k1 for k 1. Reference: <ref> [BBMS88] </ref> Hint: The reduction is from an alternating Turing machine that uses O (log n) space. Remarks: If 0 j log k n, then the problem is complete for AC k [BBMS88]. <p> Reference: <ref> [BBMS88] </ref> Hint: The reduction is from an alternating Turing machine that uses O (log n) space. Remarks: If 0 j log k n, then the problem is complete for AC k [BBMS88]. That is, the class of problems accepted by alternating Turing machines in O (log n) space and O (log k n) alternations. A.9 Geometry A.9.1 Plane Sweep Triangulation (PST) Given: An n vertex polygon P that may contain holes, and a designated vertex u.
Reference: [BCMV83] <author> B. von Braunmuhl, S. A. Cook, K. Mehlhorn, and R. </author> <title> Verbeek. The recognition of deterministic CFL's in small time and space. </title> <journal> Information and Control, </journal> <volume> 56(1-2):34-51, </volume> <month> January/February </month> <year> 1983. </year>
Reference: [BCP83] <author> A. Borodin, S. Cook, and N. Pippenger. </author> <title> Parallel computation for well-endowed rings and space-bounded probabilistic machines. </title> <journal> Information and Control, </journal> <volume> 58(1-3):113-136, </volume> <year> 1983. </year>
Reference-contexts: Problem: Compute gcd (a; b). Reference: [Gat84] Remarks: For n th degree polynomials p; q 2 Q [x], computing gcd (p; q) is in NC 2 via an NC 1 reduction to determinant <ref> [CS76b, BCP83] </ref>. IntegerGCD is NC 1 reducible to short vectors dimension 2 (Problem B.1.7) [Gat84]. B.1.2 Extended Euclidean Algorithm (ExtendedGCD) Given: Two n-bit positive integers a and b. Problem: Compute integers s and t such that as + bt = gcd (a; b).
Reference: [BDAP88] <author> D. P. Bovet, S. De Agostino, and R. Petreschi. </author> <title> Parallelism and the feedback vertex set problem. </title> <journal> Information Processing Letters, </journal> <volume> 28(2) </volume> <pages> 81-85, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: A.2.14 Minimum Feedback Vertex Set (MFVS) Given: A directed graph G = (V; E) that is cyclically reducible (defined below) and a designated vertex v. Problem: Is v contained in the minimum feedback set of G that is computed by the algorithm given in [WLS85]? Reference: <ref> [BDAP88] </ref> Hint: We review some terminology [WLS85]. A node z of G is deadlocked if there is a directed path in G from z to a node y that lies on a directed cycle.
Reference: [Ber91] <author> Bonnie Berger. </author> <title> The fourth moment method. </title> <booktitle> In Proceedings of the Second Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 373-383. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: He also gives two approximation algorithms that are in NC . Berger has an NC approximation algorithm that, assuming the input graph does not contain two-cycles, generates a subgraph containing more than half the arcs <ref> [Ber91] </ref>. Ramachandran proved that finding a minimum weight feedback arc set in a reducible flow graph with arbitrary weights on the arcs in P -complete [Ram88].
Reference: [BGH82] <author> A. Borodin, J. von zur Gathen, and J. E. Hopcroft. </author> <title> Fast parallel matrix and GCD computations. </title> <booktitle> In 23rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 65-71, </pages> <address> Chicago, IL, </address> <month> November </month> <year> 1982. </year> <note> IEEE. </note>
Reference-contexts: IntegerGCD is NC 1 reducible to short vectors dimension 2 (Problem B.1.7) [Gat84]. B.1.2 Extended Euclidean Algorithm (ExtendedGCD) Given: Two n-bit positive integers a and b. Problem: Compute integers s and t such that as + bt = gcd (a; b). Reference: <ref> [BGH82] </ref> Remarks: The analogous problem for n th degree polynomials is in NC [BGH82]. B.1.3 Relative Primeness (RelPrime) Given: Two n-bit positive integers a and b. Problem: Are a and b relatively prime? Reference: [Tom83] Remarks: Is a special case of IntegerGCD, Problem B.1.1. <p> B.1.2 Extended Euclidean Algorithm (ExtendedGCD) Given: Two n-bit positive integers a and b. Problem: Compute integers s and t such that as + bt = gcd (a; b). Reference: <ref> [BGH82] </ref> Remarks: The analogous problem for n th degree polynomials is in NC [BGH82]. B.1.3 Relative Primeness (RelPrime) Given: Two n-bit positive integers a and b. Problem: Are a and b relatively prime? Reference: [Tom83] Remarks: Is a special case of IntegerGCD, Problem B.1.1.
Reference: [BHC86] <author> P. W. Beame, H. J. Hoover, and S. A. Cook. </author> <title> Log depth circuits for division and related problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(4) </volume> <pages> 994-1003, </pages> <month> November </month> <year> 1986. </year>
Reference: [BIS90] <author> D. A. Barrington, N. Immerman, and H. Straubing. </author> <title> On uniformity within N C 1 . Journal of Computer and System Sciences, </title> <booktitle> 41(3) </booktitle> <pages> 274-306, </pages> <month> December </month> <year> 1990. </year>
Reference: [BK86] <author> J. Boyar and H. Karloff. </author> <title> Coloring planar graphs in parallel. </title> <type> Manuscript, </type> <year> 1986. </year>
Reference-contexts: The + 1 vertex coloring is NC 1 reducible to finding a maximal independent set [Lub84], but the maximal independent set algorithm [KW85] does not produce the lexicographically first maximal independent set. It is possible to color a graph with colors in NC <ref> [KN88, HS87, BK86] </ref>, although the coloring produced is not the lexicographically first. There is an NC algorithm for 5 coloring planar graphs [Nao87]. A.2.7 High Degree Subgraph (HDS) Given: A graph G = (V; E) and an integer k.
Reference: [BL90] <author> Paul Beame and Michael Luby. </author> <title> Parallel search for maximal independence given minimal dependence. </title> <booktitle> In Proceedings of the First Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 212-218. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: Problem: Find a subcollection D = D 1 ; : : : ; D k of pairwise disjoint members of C such that for every set S 2 C D there is a T 2 D, such that S " T 6= . Reference: <ref> [BL90, KR90] </ref> Remarks: If C is a collection of two element sets ("dimension 2") then the problem becomes the maximal independent set problem, which is known to be in NC (see Problem A.2.1).
Reference: [BM76] <author> J. A. Bondy and U. S. R. Murty. </author> <title> Graph Theory with Applications. </title> <publisher> MacMillan, </publisher> <year> 1976. </year> <note> Revised paperback edition, </note> <year> 1977. </year> <title> 100 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: </title> <publisher> 1.46) </publisher>
Reference-contexts: Remarks: The problem of 1 coloring is NP -complete [GJ79]. For graphs that are not an odd cycle or complete, a coloring can be found in polynomial time (Brook's theorem, see <ref> [BM76] </ref>). However, this is not necessarily the lexicographically first. The + 1 vertex coloring is NC 1 reducible to finding a maximal independent set [Lub84], but the maximal independent set algorithm [KW85] does not produce the lexicographically first maximal independent set.
Reference: [Bor77] <author> A. Borodin. </author> <title> On relating time and space to size and depth. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 733-744, </pages> <month> December </month> <year> 1977. </year>
Reference-contexts: Other problems are in P , although we usually omit the proofs that they are. Many of the problems given here were originally shown P -complete with respect to log space reduction. Any log space computation is immediately in NC 2 by Borodin's simulation <ref> [Bor77] </ref>. Thus any problem log space complete for P is also NC 2 m complete for P . In most cases the same reduction can be done in NC 1 , i.e. the problem is N C 1 m complete for P .
Reference: [Bor82] <author> Allan Borodin. </author> <title> Structured vs. general models in computational complexity. </title> <booktitle> L'Enseignement Mathematique, XXVIII(3-4):171-190, July-December 1982. Also in [L'E82, </booktitle> <pages> pages 47-65]. </pages>
Reference: [BS90] <author> B. Berger and P. Shor. </author> <title> Approximation algorithms for the maximum acyclic subgraph problem. </title> <booktitle> In Proceedings of the First Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 236-243. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: The feedback arc set problem [Kar72] is an equivalent formulation of the maximum acyclic subgraph problem. Approximation algorithms for this problem are important because there are very few classes of graphs for which the problem is known to be in P <ref> [BS90] </ref>. Greenlaw proves decision problems based on several other natural approximation algorithms are P -complete [Gre90]. He also gives two approximation algorithms that are in NC .
Reference: [BSL87] <author> L. Babai, S. Seres, and E. M. Luks. </author> <title> Permutation groups in NC. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 409-420, </pages> <address> New York, NY, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Problem: Find a nonzero vector x such that kxk ckyk for all y 2 M n o Reference: [Gat84] Remarks: IntegerGCD, Problem B.1.1, is NC 1 reducible to SV2 [Gat84]. B.1.8 Sylow Subgroups (SylowSub) Given: A group G. Problem: Find the Sylow subgroups of G. Reference: <ref> [BSL87] </ref> Remarks: The problem is known to be in P [Kan85], however, the NC question is open even for solvable groups [BSL87]. <p> B.1.8 Sylow Subgroups (SylowSub) Given: A group G. Problem: Find the Sylow subgroups of G. Reference: <ref> [BSL87] </ref> Remarks: The problem is known to be in P [Kan85], however, the NC question is open even for solvable groups [BSL87]. For a permutation group G, testing membership in G, finding the order of G, finding the center of G, and finding a composition series of G are all known to be in NC [BSL87]. Babai, Seres, and Luks present several other open questions involving group theory [BSL87]. <p> known to be in P [Kan85], however, the NC question is open even for solvable groups <ref> [BSL87] </ref>. For a permutation group G, testing membership in G, finding the order of G, finding the center of G, and finding a composition series of G are all known to be in NC [BSL87]. Babai, Seres, and Luks present several other open questions involving group theory [BSL87]. B.1.9 Two Variable Linear Programming (TVLP) Given: A linear system of inequalities Ax b over the rationals, where each row of A has at most two nonzero elements. Problem: Find a feasible solution if one exists. <p> for solvable groups <ref> [BSL87] </ref>. For a permutation group G, testing membership in G, finding the order of G, finding the center of G, and finding a composition series of G are all known to be in NC [BSL87]. Babai, Seres, and Luks present several other open questions involving group theory [BSL87]. B.1.9 Two Variable Linear Programming (TVLP) Given: A linear system of inequalities Ax b over the rationals, where each row of A has at most two nonzero elements. Problem: Find a feasible solution if one exists.
Reference: [Cha85] <author> B. Chazelle. </author> <title> On the convex layers of a planar set. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-31(4):509-517, </volume> <year> 1985. </year>
Reference-contexts: See Problem A.9.1 B.3.4 Successive Convex Hulls (SCH) Given: A set S of n points in dimension d and a designated point p. Problem: Determine if p is in the i th remaining convex hull that is formed by repeatedly finding and removing convex hulls from S. Reference: <ref> [Cha85, Ata87, Cha89] </ref> Remarks: The problem is open for two dimensions and up. B.3.5 Unit Length Visibility Layers (ULVL) Given: A set of n unit length, horizontal, non-intersecting line segments in the plane, a designated segment s, and an integer d.
Reference: [Cha89] <author> B. Chazelle. </author> <title> Posed the successive convex hull problem. </title> <booktitle> Cited in [ACG90], </booktitle> <year> 1989. </year>
Reference-contexts: See Problem A.9.1 B.3.4 Successive Convex Hulls (SCH) Given: A set S of n points in dimension d and a designated point p. Problem: Determine if p is in the i th remaining convex hull that is formed by repeatedly finding and removing convex hulls from S. Reference: <ref> [Cha85, Ata87, Cha89] </ref> Remarks: The problem is open for two dimensions and up. B.3.5 Unit Length Visibility Layers (ULVL) Given: A set of n unit length, horizontal, non-intersecting line segments in the plane, a designated segment s, and an integer d.
Reference: [CKS81] <author> A. K. Chandra, D. C. Kozen, and L. J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the ACM, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: Reference: <ref> [CKS81, Imm81, Imm83] </ref> Hint: Reduce AM2CVP (Problem A.1.4) to AGAP. Create two existential nodes 0 and 1. <p> For output z, apath (z; 1) holds if and only if the output z is 1. Remarks: The original proof simulated an alternating Turing machine (ATM) directly to show that AGAP was complete for ATM log space [Imm81]. Since ASPACE (log n) = P <ref> [CKS81] </ref>, this showed AGAP was P -complete too. When this problem is generalized to hierarchical graphs it remains in P , provided the graph is "breadth-first ordered;" see [LW87]. The proof sketched above also shows that the problem remains P -complete when the partition (A; B) induces a bipartite graph.
Reference: [CM89] <author> J. Cheriyan and S. N. Maheshwari. </author> <title> The parallel complexity of finding a blocking flow in a 3-layer network. </title> <journal> Information Processing Letters, </journal> <volume> 31(3) </volume> <pages> 157-161, </pages> <year> 1989. </year>
Reference-contexts: A 3 layered network is one in which all source to sink paths have length 3. Cheriyan and Maheshwari also give an RNC algorithm for finding a blocking flow in a 3 layered network <ref> [CM89] </ref>. A.4.7 First Fit Decreasing Bin Packing (FFDBP) Given: A list of n items v 1 ; : : : ; v n , where each v i is rational number between 0 and 1, and two distinguished indices i and b.
Reference: [Coo] <author> S. A. Cook. </author> <title> The comparator circuit value problem. </title> <type> personal communication. </type>
Reference-contexts: The gate is further restricted so that each output has fanout at most one. Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [Coo, MS89] </ref> Remarks: Cook shows that CCVP is NC equivalent to computing the lexicographically first maximal matching in a bipartite graph. Mayr and Subramanian [MS89] show that this problem is NC equivalent to stable marriage (Problem B.4.3). <p> Mayr and Subramanian [MS89] show that this problem is NC equivalent to stable marriage (Problem B.4.3). B.4.2 Lexicographically First Maximal Matching (LFMM) Given: A graph G with an ordering on its edges. Problem: Find the lexicographically first maximal matching. Reference: <ref> [Coo, MS89] </ref> Remarks: LFMM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. This problem resembles the lexicographically first maximal independent set problem, Problem A.2.1, known to be P -complete. A P -completeness proof for LFMM would imply that edge-weighted matching (Problem B.2.1) is also P -complete.
Reference: [Coo71a] <author> S. A. Cook. </author> <title> Characterizations of pushdown machines in terms of time-bounded computers. </title> <journal> Journal of the ACM, </journal> <volume> 18(1) </volume> <pages> 4-18, </pages> <month> January </month> <year> 1971. </year>
Reference-contexts: If G is acyclic then the problem is complete for SAC 1 = LOGCFL [Ruz79]. A.7.8 Two-Way DPDA Acceptance (2DPDA) Given: A two-way deterministic pushdown automaton M and a string x. Problem: Is x accepted by M ? Reference: <ref> [Coo71a, Gal74, Gal77, Lad75] </ref> Hint: See, e.g., [HU79] for a definition of 2DPDAs. Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. <p> A.7.8 Two-Way DPDA Acceptance (2DPDA) Given: A two-way deterministic pushdown automaton M and a string x. Problem: Is x accepted by M ? Reference: [Coo71a, Gal74, Gal77, Lad75] Hint: See, e.g., [HU79] for a definition of 2DPDAs. Cook <ref> [Coo71a] </ref> gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. <p> Remarks: Remains in P when generalized to nondeterministic and/or logarithmic space auxiliary PDAs <ref> [Coo71a] </ref>.
Reference: [Coo71b] <author> S. A. Cook. </author> <title> The complexity of theorem proving procedures. </title> <booktitle> In Proceedings of the Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <address> Shaker Heights, OH, </address> <month> May </month> <year> 1971. </year>
Reference-contexts: Problem: Can the empty clause 2 be deduced from F by unit resolution? Reference: [DLR79, JL76] Hint: Reduce an arbitrary Turing machine to a CNF formula as in <ref> [Coo71b] </ref>. All of the clauses are Horn clauses.
Reference: [Coo74] <author> S. A. Cook. </author> <title> An observation on time-storage trade off. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 9(3) </volume> <pages> 308-316, </pages> <month> December </month> <year> 1974. </year>
Reference-contexts: Problem: Is there an admissible node in S? A node x is admissible if and only if x 2 T , or there exists admissible y; z 2 X such that (x; y; z) 2 R. Reference: <ref> [Coo74, JL76] </ref> Hint: Reduce GEN to PATH by defining (x; y; z) 2 R if and only if x = y * z. Remarks: This is the first problem shown to be log space complete for P . <p> Remarks: This is the first problem shown to be log space complete for P . The original proof by Cook does a direct simulation of a Turing machine <ref> [Coo74] </ref>. Under the appropriate definitions, it is known that approximating this problem is also P -complete [SS89]. A.6.7 Unification (UNIF) Given: Two symbolic terms s and t. Each term is composed of variables and function symbols.
Reference: [Coo79] <author> S. A. Cook. </author> <title> Deterministic CFL's are accepted simultaneously in polynomial time and log squared space. </title> <booktitle> In Proceedings of the Eleventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 338-345, </pages> <address> Atlanta, GA, </address> <month> April-May </month> <year> 1979. </year>
Reference: [Coo81] <author> S. A. Cook. </author> <title> Towards a complexity theory of synchronous parallel computation. </title> <booktitle> L'Enseignement Mathematique, XXVII(1-2):99-124, January-June 1981. Also in [L'E82, </booktitle> <pages> pages 75-100]. </pages>
Reference: [Coo82] <author> S. A. Cook. </author> <title> Reduction of the circuit value problem to feasible linear programming. </title> <type> Private communication, </type> <year> 1982. </year>
Reference-contexts: Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax b? (It is not required to find such an x.) Reference: <ref> [Coo82, Val82a, Kha79] </ref> Hint: LI is in P by [Kha79]. The following reduction of CVP to LI is due to [Coo82]. 1. If input x i is true (false) it is represented by the equation x i = 1 (x i = 0). 2. <p> Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax b? (It is not required to find such an x.) Reference: [Coo82, Val82a, Kha79] Hint: LI is in P by [Kha79]. The following reduction of CVP to LI is due to <ref> [Coo82] </ref>. 1. If input x i is true (false) it is represented by the equation x i = 1 (x i = 0). 2. A not gate with input u and output w, computing w :u is represented by the inequalities w = 1 u and 0 w 1. 3. <p> A.4.2 Linear Equalities (LE) Given: An integer n fi d matrix A and an integer n fi 1 vector b. Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax = b? Reference: <ref> [Coo82, Val82a, Kha79] </ref> Hint: LE is NC 1 reducible to LI since Ax b and Ax b if and only if Ax = b. Thus LE is in P.
Reference: [Coo85] <author> S. A. Cook. </author> <title> A taxonomy of problems with fast parallel algorithms. </title> <journal> Information and Control, </journal> <note> 64(1-3):2-22, January/February/March 1985. References * 101 </note>
Reference-contexts: A.2 Graph Theory A.2.1 Lexicographically First Maximal Independent Set (LFMIS) Given: An undirected graph G with an ordering on the vertices and a designated vertex v. Problem: Is vertex v in the lexicographically first maximal independent set of G? Reference: <ref> [Coo85] </ref> Hint: A proof is given in Section 6.3.1. Remarks: This is an instance of Problem A.2.13. LFMIS is P -complete for bipartite or planar graphs restricted to degree at most 3 [Miy89]. <p> Part II: P -Complete Problems * 51 A.2.2 Lexicographically First Maximal Clique (LFMC) Given: An undirected graph G with an ordering on the vertices and a designated vertex v. Problem: Is vertex v in the lexicographically first maximal clique of G? Reference: <ref> [Coo85] </ref> Hint: Finding a maximal clique is equivalent to finding a maximal independent set in the complement graph of G (Problem A.2.1). <p> B.1.5 Modular Powering (ModPower) Given: Positive n-bit integers a, b, and c. Problem: Compute a b mod c. 90 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Reference: <ref> [Coo85] </ref> Remarks: The complexity of the problem is open even for finding a single bit of the desired output. The problem is in NC for "smooth" c, that is, for c having only small prime factors [Gat87].
Reference: [Cos88] <author> S. S. Cosmadakis. </author> <title> The word and generator problems for lattices. </title> <journal> Information and Computation, </journal> <volume> 77(3) </volume> <pages> 192-217, </pages> <year> 1988. </year>
Reference-contexts: Problem: Does E j= e 1 = e 2 ? Reference: <ref> [Cos88] </ref> Hint: A polynomial time algorithm for the problem is given in [Cos88]. The reduction is from the implication problem for propositional Horn clauses [JL76]. See Problems A.6.1 and A.6.2. <p> Problem: Does E j= e 1 = e 2 ? Reference: <ref> [Cos88] </ref> Hint: A polynomial time algorithm for the problem is given in [Cos88]. The reduction is from the implication problem for propositional Horn clauses [JL76]. See Problems A.6.1 and A.6.2. <p> Remarks: The problem remains P -complete if we use inequalities instead of equations. Furthermore, the problem remains P -complete when E = and the terms are represented by dags instead of trees. However, if E = and the terms are represented as trees the problem is in DLOG <ref> [Cos88] </ref>. This problem is called the identity problem for lattices. A.8.23 Generator Problem for Lattices (GPL) Given: Let L be a lattice. Let E be a set of equations and e; g 1 ; : : : ; g n be terms over U . <p> Problem: Does E j= gen (e; g 1 ; : : : ; g n )? Reference: <ref> [Cos88] </ref> Hint: A polynomial time algorithm for the problem is given in [Cos88]. The reduction is a continuation of the reduction used in Problem A.8.22. <p> Problem: Does E j= gen (e; g 1 ; : : : ; g n )? Reference: <ref> [Cos88] </ref> Hint: A polynomial time algorithm for the problem is given in [Cos88]. The reduction is a continuation of the reduction used in Problem A.8.22. Since E j= * if and only if E j= gen (ff 1 ff 2 ff 3 ; ff 1 ; ff 2 ), it follows that GPL is also P -complete. <p> Remarks: The problem remains P -complete when E = and the terms are represented by dags instead of trees. However, if E = and the terms are represented as trees the problem is in DLOG <ref> [Cos88] </ref>. This problem is called the generator problem for free lattices.
Reference: [CS76a] <author> A. K. Chandra and L. J. Stockmeyer. </author> <title> Alternation. </title> <booktitle> In 17th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 98-108, </pages> <address> Houston, TX, </address> <month> October </month> <year> 1976. </year> <note> IEEE. Preliminary Version. </note>
Reference-contexts: The cat is not allowed to occupy the goal node. The mouse wins if it reaches the goal node without being caught. The cat wins if the mouse and cat occupy the 88 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) same node. Reference: <ref> [CS76a, Sto84] </ref> Hint: The reduction is from a log space alternating Turing machine M . Assume that M starts in an existential configuration I, has a unique accepting configuration A that is existential, and each existential (universal) configuration has exactly two immediate successors, both of which are universal (existential).
Reference: [CS76b] <author> S. A. Cook and R. Sethi. </author> <title> Storage requirements for deterministic polynomial time recognizable languages. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 13(1) </volume> <pages> 25-37, </pages> <year> 1976. </year>
Reference-contexts: Problem: Compute gcd (a; b). Reference: [Gat84] Remarks: For n th degree polynomials p; q 2 Q [x], computing gcd (p; q) is in NC 2 via an NC 1 reduction to determinant <ref> [CS76b, BCP83] </ref>. IntegerGCD is NC 1 reducible to short vectors dimension 2 (Problem B.1.7) [Gat84]. B.1.2 Extended Euclidean Algorithm (ExtendedGCD) Given: Two n-bit positive integers a and b. Problem: Compute integers s and t such that as + bt = gcd (a; b).
Reference: [CT90] <author> Ashok K. Chandra and Martin Tompa. </author> <title> The complexity of short two-person games. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 29 </volume> <pages> 21-33, </pages> <year> 1990. </year>
Reference-contexts: Notice, the token occupies a corner of the current submatrix again. V 's turn is similar except V moves vertically and rows are removed. The first player with no moves left loses. Problem: Does H have a winning strategy on M ? Reference: <ref> [CT90] </ref> Hint: The reduction is performed in two stages. First, MCVP is reduced to an acyclic version of Schaefer's Geography game [Sch78] called ACYCLICGEO. This proves that ACYCLICGEO is P -complete. Second, ACYCLICGEO is reduced to LONGCAKE. <p> This proves that ACYCLICGEO is P -complete. Second, ACYCLICGEO is reduced to LONGCAKE. Remarks: The game SHORTCAKE is the same as LONGCAKE except the larger portion of the current submatrix is thrown away. SHORTCAKE is complete for AC 1 <ref> [CT90] </ref>. Another variant of these games called SEMICAKE is complete for LOGCFL = SAC 1 [CT90]. Part II: Open Problems * 89 B Open Problems This section contains a list of open problems. The goal is to find an NC algorithm or a P - completeness proof for the problem. <p> Second, ACYCLICGEO is reduced to LONGCAKE. Remarks: The game SHORTCAKE is the same as LONGCAKE except the larger portion of the current submatrix is thrown away. SHORTCAKE is complete for AC 1 <ref> [CT90] </ref>. Another variant of these games called SEMICAKE is complete for LOGCFL = SAC 1 [CT90]. Part II: Open Problems * 89 B Open Problems This section contains a list of open problems. The goal is to find an NC algorithm or a P - completeness proof for the problem.
Reference: [DC80] <author> P. W. Dymond and S. A. Cook. </author> <title> Hardware complexity and parallel computation. </title> <booktitle> In 21st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 360-372, </pages> <address> Syracuse, NY, </address> <month> October </month> <year> 1980. </year> <note> IEEE. </note>
Reference-contexts: In fact, the monotone version of PCVP is in LOGCFL NC 2 <ref> [DC80, DC89, Gol80] </ref> when all inputs appear on one face of the planar embedding. The more general problem where inputs may appear anywhere is also known to be in NC [Kos90, DK91].
Reference: [DC89] <author> P. W. Dymond and S. A. Cook. </author> <title> Complexity theory of parallel time and hardware. </title> <journal> Information and Computation, </journal> <volume> 80(3) </volume> <pages> 205-226, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: In fact, the monotone version of PCVP is in LOGCFL NC 2 <ref> [DC80, DC89, Gol80] </ref> when all inputs appear on one face of the planar embedding. The more general problem where inputs may appear anywhere is also known to be in NC [Kos90, DK91].
Reference: [DK91] <author> Arthur L. Delcher and S. Rao Kosaraju. </author> <title> An N C algorithm for evaluating monotone planar circuits. </title> <type> manuscript, </type> <year> 1991. </year>
Reference-contexts: In fact, the monotone version of PCVP is in LOGCFL NC 2 [DC80, DC89, Gol80] when all inputs appear on one face of the planar embedding. The more general problem where inputs may appear anywhere is also known to be in NC <ref> [Kos90, DK91] </ref>. A.1.8 Arithmetic Circuit Value Problem (*) (ArithCVP) Given: An encoding of an arithmetic circuit ff with dyadic operations +; ; fl and inputs x 1 ; : : : ; x n from a ring.
Reference: [DKM84] <author> C. Dwork, P. C. Kanellakis, and J. C. Mitchell. </author> <title> On the sequential nature of unification. </title> <journal> Journal of Logic Programming, </journal> <volume> 1 </volume> <pages> 35-50, </pages> <year> 1984. </year>
Reference-contexts: Problem: Is there a series of substitutions that unify s and t? That is, gives (s) = (t). The two terms are called unifiable if such a exists. Reference: <ref> [DKM84, Yas84, DKS88] </ref> Hint: The reduction given in [DKM84] is from MCVP. The reductions given in [DKS88] are from NAND CVP. Remarks: Unrestricted unification is also P -complete [DKM84]. Unrestricted unification is where we allow substitutions to map variables to infinite terms. <p> Problem: Is there a series of substitutions that unify s and t? That is, gives (s) = (t). The two terms are called unifiable if such a exists. Reference: [DKM84, Yas84, DKS88] Hint: The reduction given in <ref> [DKM84] </ref> is from MCVP. The reductions given in [DKS88] are from NAND CVP. Remarks: Unrestricted unification is also P -complete [DKM84]. Unrestricted unification is where we allow substitutions to map variables to infinite terms. It is convenient to represent terms as labeled directed acyclic graphs. <p> The two terms are called unifiable if such a exists. Reference: [DKM84, Yas84, DKS88] Hint: The reduction given in <ref> [DKM84] </ref> is from MCVP. The reductions given in [DKS88] are from NAND CVP. Remarks: Unrestricted unification is also P -complete [DKM84]. Unrestricted unification is where we allow substitutions to map variables to infinite terms. It is convenient to represent terms as labeled directed acyclic graphs. A term is linear if no variable appears more than once in the term.
Reference: [DKS88] <author> C. Dwork, P. C. Kanellakis, and L. J. Stockmeyer. </author> <title> Parallel algorithms for term matching. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(4) </volume> <pages> 711-731, </pages> <year> 1988. </year>
Reference-contexts: Problem: Is there a series of substitutions that unify s and t? That is, gives (s) = (t). The two terms are called unifiable if such a exists. Reference: <ref> [DKM84, Yas84, DKS88] </ref> Hint: The reduction given in [DKM84] is from MCVP. The reductions given in [DKS88] are from NAND CVP. Remarks: Unrestricted unification is also P -complete [DKM84]. Unrestricted unification is where we allow substitutions to map variables to infinite terms. <p> Problem: Is there a series of substitutions that unify s and t? That is, gives (s) = (t). The two terms are called unifiable if such a exists. Reference: [DKM84, Yas84, DKS88] Hint: The reduction given in [DKM84] is from MCVP. The reductions given in <ref> [DKS88] </ref> are from NAND CVP. Remarks: Unrestricted unification is also P -complete [DKM84]. Unrestricted unification is where we allow substitutions to map variables to infinite terms. It is convenient to represent terms as labeled directed acyclic graphs. <p> represented by trees, and have all function symbols with arity less than or equal to two; (b) both terms are represented by trees, no variable appears in both terms, each variable appears at most twice in some term, and all function symbols have arity less than or equal to two <ref> [DKS88] </ref>. A restricted problem called term matching can be solved on a CREW-PRAM in randomized time O (log 2 n) using M (n) processors, where M (n) denotes the complexity of an n fi n matrix multiplication [DKS88]. <p> term, and all function symbols have arity less than or equal to two <ref> [DKS88] </ref>. A restricted problem called term matching can be solved on a CREW-PRAM in randomized time O (log 2 n) using M (n) processors, where M (n) denotes the complexity of an n fi n matrix multiplication [DKS88]. A term s matches a term t if there exists a substitution with (s) = t. Vitter and Simons give p n time parallel algorithms for unification and some other P -complete problems [VS86].
Reference: [DLR79] <author> D. Dobkin, R. J. Lipton, and S. Reiss. </author> <title> Linear programming is log-space hard for P. </title> <journal> Information Processing Letters, </journal> <volume> 8(2) </volume> <pages> 96-97, </pages> <month> February </month> <year> 1979. </year>
Reference-contexts: A.4.3 Linear Programming (*) (LP) Given: An integer n fi d matrix A, an integer n fi 1 vector b, and an integer 1 fi d vector c. Problem: Find a rational d fi 1 vector x such that Ax b and cx is maximized. Reference: <ref> [DLR79, Kha79, DR80, Val82a] </ref> Hint: LP is not in P , but is in FP by [Kha79]. Reduce LI to LP by picking any cost vector c, say c = ~ 0, and checking whether the resulting linear program is feasible. <p> Reference: [DLR79, Kha79, DR80, Val82a] Hint: LP is not in P , but is in FP by [Kha79]. Reduce LI to LP by picking any cost vector c, say c = ~ 0, and checking whether the resulting linear program is feasible. Remarks: The original reduction in <ref> [DLR79] </ref> is from HORN, Problem A.6.2, to LP. <p> A.6.2 Horn Unit Resolution (HORN) Given: A Horn formula F , that is, a conjunctive normal form (CNF) formula with each clause a disjunction of literals having at most one positive literal per clause. Problem: Can the empty clause 2 be deduced from F by unit resolution? Reference: <ref> [DLR79, JL76] </ref> Hint: Reduce an arbitrary Turing machine to a CNF formula as in [Coo71b]. All of the clauses are Horn clauses.
Reference: [dlTG90] <author> P. de la Torre and R. Greenlaw. </author> <title> Discrete ray-tracing is in NC, 1990. </title> <type> Personal communication. </type>
Reference-contexts: Reference: [GHR91] Remarks: The general ray tracing problem is to determine if a mirror is ever hit by the beam. When the mirrors are points, that is have no length, the general problem is in NC <ref> [dlTG90] </ref>. In two or more dimensions, the general problem is in PSPACE . In three dimensions, with mirrors placed at rational points, the general problem is PSPACE -hard. The general problem is open for all mirrors of a fixed size as well. See [RTY90] for a detailed discussion.
Reference: [dlTK88] <author> P. de la Torre and C. Kruskal. </author> <title> Fast parallel algorithms for all sources lexicographic search and path finding problems. </title> <note> Manuscript (appeared as University of Maryland technical report CS-TR 2283, </note> <year> 1989), 1988. </year>
Reference-contexts: In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 [AA88, AAK90]. Computing a depth-first vertex numbering for planar graphs is in NC [Smi86, HY87]. Computing the lexicographically first depth-first numbering for DAGs is in NC <ref> [Grear, dlTK88, dlTK89] </ref>. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC [SV85]. A.3.3 Breadth-Depth Search (BDS) Given: A graph G = (V; E) with a numbering on the vertices and two designated vertices u and v. <p> This problem is in NC <ref> [Gre88b, dlTK88, dlTK89] </ref>. A.3.5 Alternating Breadth First Search (ABFS) Given: A graph G = (V; E) with E partitioned into two sets M and U , a designated vertex v, and a designated start vertex s.
Reference: [dlTK89] <author> P. de la Torre and C. Kruskal. </author> <title> Fast and efficient parallel algorithms for single source lexicographic depth-first search, breadth-first search and topological-first search. </title> <type> Manuscript, </type> <year> 1989. </year>
Reference-contexts: In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 [AA88, AAK90]. Computing a depth-first vertex numbering for planar graphs is in NC [Smi86, HY87]. Computing the lexicographically first depth-first numbering for DAGs is in NC <ref> [Grear, dlTK88, dlTK89] </ref>. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC [SV85]. A.3.3 Breadth-Depth Search (BDS) Given: A graph G = (V; E) with a numbering on the vertices and two designated vertices u and v. <p> This problem is in NC <ref> [Gre88b, dlTK88, dlTK89] </ref>. A.3.5 Alternating Breadth First Search (ABFS) Given: A graph G = (V; E) with E partitioned into two sets M and U , a designated vertex v, and a designated start vertex s.
Reference: [DR80] <author> D. P. Dobkin. and S. Reiss. </author> <title> The complexity of linear programming. </title> <journal> Theoretical Computer Science, </journal> <volume> 11(1) </volume> <pages> 1-18, </pages> <year> 1980. </year>
Reference-contexts: A.4.3 Linear Programming (*) (LP) Given: An integer n fi d matrix A, an integer n fi 1 vector b, and an integer 1 fi d vector c. Problem: Find a rational d fi 1 vector x such that Ax b and cx is maximized. Reference: <ref> [DLR79, Kha79, DR80, Val82a] </ref> Hint: LP is not in P , but is in FP by [Kha79]. Reduce LI to LP by picking any cost vector c, say c = ~ 0, and checking whether the resulting linear program is feasible. <p> Reduce LI to LP by picking any cost vector c, say c = ~ 0, and checking whether the resulting linear program is feasible. Remarks: The original reduction in [DLR79] is from HORN, Problem A.6.2, to LP. In <ref> [DR80] </ref>, LP and LI are shown to be log space equivalent by reducing LP to LI using rational binary search [Pap78, Rei78] to find the value of the maximum and an x that Part II: P -Complete Problems * 63 yields it.
Reference: [DT85] <author> Patrick W. Dymond and Martin Tompa. </author> <title> Speedups of deterministic machines by synchronous parallel machines. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30(2) </volume> <pages> 149-161, </pages> <month> April </month> <year> 1985. </year> <title> 102 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: </title> <publisher> 1.46) </publisher>
Reference: [Dym80] <author> P. W. Dymond. </author> <title> Simultaneous Resource Bounds and Parallel Computation. </title> <type> PhD thesis, </type> <institution> University of Toronto, </institution> <month> August </month> <year> 1980. </year> <type> Technical Report 145/80. </type>
Reference: [Fea84] <author> T. Feather. </author> <title> The parallel complexity of some flow and matching problems. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1984. </year> <type> TR 174/84. </type>
Reference-contexts: Thus the maximum flow for G is odd if and only if ff outputs true. Remarks: This reduction produces exponential edge capacities in G. In a network with edge capacities expressed in unary, computing the magnitude of the maximum flow is in RNC 2 <ref> [Fea84] </ref> and a method for finding the flow in RNC is also known [KUW86]. If the network is restricted to being acyclic MaxFlow remains P -complete [Ram87]. Flows in planar networks can be computed in NC [JV82]. <p> For DAGs, DFS is in NC [Gre88a]. B.5.2 0-1 Maximum Flow (0-1 MaxFlow) Given: Directed graph G with each edge labeled in unary with a capacity c i 0 and two distinguished vertices, source s and sink t. Problem: Find a maximum flow. Reference: <ref> [Fea84, KUW86] </ref> Remarks: [Fea84] shows the problem of finding the value of the maximum flow to be in RNC . [KUW86] show how to construct a maximum flow, also in RNC . <p> For DAGs, DFS is in NC [Gre88a]. B.5.2 0-1 Maximum Flow (0-1 MaxFlow) Given: Directed graph G with each edge labeled in unary with a capacity c i 0 and two distinguished vertices, source s and sink t. Problem: Find a maximum flow. Reference: [Fea84, KUW86] Remarks: <ref> [Fea84] </ref> shows the problem of finding the value of the maximum flow to be in RNC . [KUW86] show how to construct a maximum flow, also in RNC . Both problems remain in RNC when capacities are polynomially bounded, but are P -complete when capacities are arbitrary (Problem A.4.4). <p> Problem: Find a maximum matching of G. A matching is a subset of the edges of G such that no two edges of the subset are adjacent in G. A matching is a maximum matching if no matching of larger cardinality exists. Reference: <ref> [Fea84, KUW86, MVV87] </ref> Remarks: Feather [Fea84] shows that the problem of finding the size of maximum matching is in RNC . Karp, Upfal, and Wigderson [KUW86] gave the first RNC algorithm for finding the maximum matching. A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87]. <p> Problem: Find a maximum matching of G. A matching is a subset of the edges of G such that no two edges of the subset are adjacent in G. A matching is a maximum matching if no matching of larger cardinality exists. Reference: [Fea84, KUW86, MVV87] Remarks: Feather <ref> [Fea84] </ref> shows that the problem of finding the size of maximum matching is in RNC . Karp, Upfal, and Wigderson [KUW86] gave the first RNC algorithm for finding the maximum matching. A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87].
Reference: [Fed89] <author> T. Feder. </author> <title> A new fixed point approach to stable networks and stable marriages. </title> <booktitle> In Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, </booktitle> <address> Seattle, WA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Mayr and Subramanian note that these algorithms are P -complete, in the sense of Section ??.) It is known that NL CC P [MS89]. Most of the results described in this subsection come from [MS89]. See also <ref> [Sub90, Sub89, Fed89] </ref>. B.4.1 Comparator Circuit Value Problem (CCVP) Given: An encoding ff of a circuit ff composed of comparator gates plus inputs x 1 ; : : : ; x n .
Reference: [FF62] <author> L. R. Ford and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference: [FHL80] <author> M. Furst, J. Hopcroft, and E. Luks. </author> <title> Polynomial time algorithms for permutation groups. </title> <booktitle> In 21st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 36-41, </pages> <address> Syracuse, NY, </address> <month> October </month> <year> 1980. </year> <note> IEEE. </note>
Reference-contexts: B.2.2 Bounded Degree Graph Isomorphism (BDGI) Given: Two graphs G and H. The vertices in G and H have maximum degree at most k, a constant independent of the sizes of G and H. Problem: Are G and H isomorphic? Remarks: Luks showed the problem is in P <ref> [FHL80] </ref>. Without the degree bound, the problem is in NP but not known to be in P , nor is it known to be either P -hard or NP - complete.
Reference: [Fic91] <author> Faith E. Fich. </author> <title> The parallel random access machine. </title> <editor> In John H. Reif, editor, </editor> <title> Synthesis of Parallel Algorithms. </title> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year> <note> To appear. </note>
Reference: [FT88] <author> Faith E. Fich and Martin Tompa. </author> <title> The parallel complexity of exponentiating polynomials over finite fields. </title> <journal> Journal of the ACM, </journal> <volume> 35(3) </volume> <pages> 651-667, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: ModInverse, Problem B.1.4 is reducible to this restriced case. The analogous problems when a and c are n th degree polynomials over a finite field of small characteristic, modular polynomial exponentiation and polynomial exponentiation, are in NC 2 <ref> [FT88] </ref>. They are open for finite fields having large (superpolynomial) charac teristic. Note that ModPower can be reduced to the polynomial version with exponential characteristic, simply by considering degree 0 polynomials.
Reference: [FW78] <author> S. Fortune and J. Wyllie. </author> <title> Parallelism in random access machines. </title> <booktitle> In Proceedings of the Tenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 114-118, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1978. </year>
Reference: [Gal74] <author> Zvi Galil. </author> <title> Two way deterministic pushdown automaton languages and some open problems in the theory of computation. </title> <booktitle> In 15th Annual Symposium on Switching and Automata Theory, </booktitle> <pages> pages 170-177, </pages> <year> 1974. </year> <note> Published as [Gal77]. </note>
Reference-contexts: If G is acyclic then the problem is complete for SAC 1 = LOGCFL [Ruz79]. A.7.8 Two-Way DPDA Acceptance (2DPDA) Given: A two-way deterministic pushdown automaton M and a string x. Problem: Is x accepted by M ? Reference: <ref> [Coo71a, Gal74, Gal77, Lad75] </ref> Hint: See, e.g., [HU79] for a definition of 2DPDAs. Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. <p> Problem: Is x accepted by M ? Reference: [Coo71a, Gal74, Gal77, Lad75] Hint: See, e.g., [HU79] for a definition of 2DPDAs. Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. Galil <ref> [Gal74, Gal77] </ref> shows existence of a P -complete language accepted by a 2DPDA, in effect showing that the logarithmic space worktape isn't crucial to Cook's simulation. (See also [Sud78] for a general reduction of auxiliary PDAs to ordinary PDAs.) Ladner [Lad75] gives a much more direct proof by observing that a
Reference: [Gal77] <author> Zvi Galil. </author> <title> Some open problems in the theory of computation as questions about two-way deterministic pushdown automaton languages. </title> <journal> Mathematical Systems Theory, </journal> <volume> 10 </volume> <pages> 211-228, </pages> <year> 1977. </year>
Reference-contexts: If G is acyclic then the problem is complete for SAC 1 = LOGCFL [Ruz79]. A.7.8 Two-Way DPDA Acceptance (2DPDA) Given: A two-way deterministic pushdown automaton M and a string x. Problem: Is x accepted by M ? Reference: <ref> [Coo71a, Gal74, Gal77, Lad75] </ref> Hint: See, e.g., [HU79] for a definition of 2DPDAs. Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. <p> Problem: Is x accepted by M ? Reference: [Coo71a, Gal74, Gal77, Lad75] Hint: See, e.g., [HU79] for a definition of 2DPDAs. Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. Galil <ref> [Gal74, Gal77] </ref> shows existence of a P -complete language accepted by a 2DPDA, in effect showing that the logarithmic space worktape isn't crucial to Cook's simulation. (See also [Sud78] for a general reduction of auxiliary PDAs to ordinary PDAs.) Ladner [Lad75] gives a much more direct proof by observing that a
Reference: [Gat84] <author> J. von zur Gathen. </author> <title> Parallel algorithms for algebraic problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 13(4) </volume> <pages> 802-824, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: The problems listed are divided into the following categories: algebraic problems, graph theoretic problems, and miscellaneous problems. B.1 Algebraic Problems B.1.1 Integer Greatest Common Divisor (IntegerGCD) Given: Two n-bit positive integers a and b. Problem: Compute gcd (a; b). Reference: <ref> [Gat84] </ref> Remarks: For n th degree polynomials p; q 2 Q [x], computing gcd (p; q) is in NC 2 via an NC 1 reduction to determinant [CS76b, BCP83]. IntegerGCD is NC 1 reducible to short vectors dimension 2 (Problem B.1.7) [Gat84]. <p> Problem: Compute gcd (a; b). Reference: <ref> [Gat84] </ref> Remarks: For n th degree polynomials p; q 2 Q [x], computing gcd (p; q) is in NC 2 via an NC 1 reduction to determinant [CS76b, BCP83]. IntegerGCD is NC 1 reducible to short vectors dimension 2 (Problem B.1.7) [Gat84]. B.1.2 Extended Euclidean Algorithm (ExtendedGCD) Given: Two n-bit positive integers a and b. Problem: Compute integers s and t such that as + bt = gcd (a; b). Reference: [BGH82] Remarks: The analogous problem for n th degree polynomials is in NC [BGH82]. <p> Problem: Find a nonzero vector x in the Z-module (or "lattice") M = P a i Z Z n such that kxk 2 (n1)=2 kyk for all y 2 M n o , where kyk = P i is the L 2 norm. Reference: <ref> [Gat84] </ref> Remarks: Lenstra, Lenstra, and Lovasz [LLL82] show that the problem is in P . Inte gerGCD, Problem B.1.1, is NC 1 reducible to SV [Gat84]. <p> Reference: <ref> [Gat84] </ref> Remarks: Lenstra, Lenstra, and Lovasz [LLL82] show that the problem is in P . Inte gerGCD, Problem B.1.1, is NC 1 reducible to SV [Gat84]. B.1.7 Short Vectors Dimension 2 (SV2) Given: Input vectors a 1 ; a 2 2 Z 2 that are linearly independent over Q, and an arbitrary number c 1. Problem: Find a nonzero vector x such that kxk ckyk for all y 2 M n o Reference: [Gat84] Remarks: IntegerGCD, <p> to SV <ref> [Gat84] </ref>. B.1.7 Short Vectors Dimension 2 (SV2) Given: Input vectors a 1 ; a 2 2 Z 2 that are linearly independent over Q, and an arbitrary number c 1. Problem: Find a nonzero vector x such that kxk ckyk for all y 2 M n o Reference: [Gat84] Remarks: IntegerGCD, Problem B.1.1, is NC 1 reducible to SV2 [Gat84]. B.1.8 Sylow Subgroups (SylowSub) Given: A group G. Problem: Find the Sylow subgroups of G. Reference: [BSL87] Remarks: The problem is known to be in P [Kan85], however, the NC question is open even for solvable groups [BSL87]. <p> Problem: Find a nonzero vector x such that kxk ckyk for all y 2 M n o Reference: <ref> [Gat84] </ref> Remarks: IntegerGCD, Problem B.1.1, is NC 1 reducible to SV2 [Gat84]. B.1.8 Sylow Subgroups (SylowSub) Given: A group G. Problem: Find the Sylow subgroups of G. Reference: [BSL87] Remarks: The problem is known to be in P [Kan85], however, the NC question is open even for solvable groups [BSL87]. <p> B.1.10 Univariate Polynomial Factorization over Q (UPFQ) Given: An n th degree polynomial p 2 Q [x]. Problem: Compute the factorization of p over Q. Reference: <ref> [Gat84] </ref> Remarks: UPFQ is NC 1 reducible to short vectors (Problem B.1.6) [Gat84]. B.2 Graph Theory Problems B.2.1 Edge-Weighted Matching (EWM) Given: A graph G with positive integer weights on its edges. Problem: Find a matching of maximum weight. <p> B.1.10 Univariate Polynomial Factorization over Q (UPFQ) Given: An n th degree polynomial p 2 Q [x]. Problem: Compute the factorization of p over Q. Reference: <ref> [Gat84] </ref> Remarks: UPFQ is NC 1 reducible to short vectors (Problem B.1.6) [Gat84]. B.2 Graph Theory Problems B.2.1 Edge-Weighted Matching (EWM) Given: A graph G with positive integer weights on its edges. Problem: Find a matching of maximum weight. Reference: [KUW86] Remarks: EWM is in RNC (but not known to be in NC ) if all weights are polynomially bounded [KUW86].
Reference: [Gat87] <author> J. von zur Gathen. </author> <title> Computing powers in parallel. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16(5) </volume> <pages> 930-945, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: The problem is in NC for "smooth" c, that is, for c having only small prime factors <ref> [Gat87] </ref>. In the interesting special case when c is a prime (the antithesis of smooth) the problem is open. ModInverse, Problem B.1.4 is reducible to this restriced case.
Reference: [GHR91] <author> R. Greenlaw, H. Hoover, and W. L. Ruzzo. </author> <title> A compendium of problems complete for P , 1991. This work. </title>
Reference-contexts: That Part II: P -Complete Problems * 49 is, each level in the circuit can receive its inputs only from gates on the preceding level. Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [GHR91] </ref> Hint: A proof is given in Section 5.2. The reduction is from AM2CVP. <p> A designated variable P 0 and a designated label f . Problem: Is there a valid assignment of the label f to P 0 in G? Reference: <ref> [Kas86, GHR91] </ref> Hint: The original reduction is from the propositional Horn clause satisfiability problem, Problem A.6.3 [Kas86]. The reduction we sketch is from NAND CVP. A variable is introduced for each circuit input. The variable must have label 1 (0) if the circuit input is true (false). <p> Problem: Is there a path from s to t such that the concatenation of its edge labels is in L? Reference: <ref> [Ruz79, GHR91] </ref> Hint: Reduce the 2-way DPDA acceptance problem, Problem A.7.8 to LGAP. Let M = (Q; 0 ; ; ffi; q 0 ; Z 0 ) be a 2-way DPDA [HU79] and let x 2 0 be an input string. <p> Problem: Determine if M is hit by the beam within n reflections. At the mirrors the angle of incident of the beam equals the angle of reflection. Reference: <ref> [GHR91] </ref> Remarks: The general ray tracing problem is to determine if a mirror is ever hit by the beam. When the mirrors are points, that is have no length, the general problem is in NC [dlTG90]. In two or more dimensions, the general problem is in PSPACE .
Reference: [Gib85] <author> A. Gibbons. </author> <title> Algorithmic Graph Theory. </title> <publisher> Cambridge University Press, </publisher> <address> Cam-bridge, </address> <year> 1985. </year>
Reference-contexts: Problem: Find n marriages such that the set of marriages is stable. The set is unstable if a man and woman exist who are not married to each other but prefer each other to their actual mates. Reference: [MS89] Remarks: See, e.g., <ref> [Gib85] </ref> for background on the Stable Marriage problem. SM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. Several variations on Stable Marriage are also known to be equivalent to CCVP; see [MS89].
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year> <note> References * 103 </note>
Reference-contexts: The resulting graph can be colored with only 3 colors in the order fT; F; Xg (even though 4 might be necessary for a different ordering). Remarks: The problem of 1 coloring is NP -complete <ref> [GJ79] </ref>. For graphs that are not an odd cycle or complete, a coloring can be found in polynomial time (Brook's theorem, see [BM76]). However, this is not necessarily the lexicographically first. <p> The proof technique used to show IM is P -complete can be modified to show the superincreasing knapsack problem is also P -complete [KR89]. The superincreasing knapsack problem is defined analogously to the knapsack problem <ref> [GJ79] </ref> with weights w 1 ; : : : ; w n , except for 2 i n, w i &gt; P i1 A.8.6 Generalized Word Problem (GWP) Given: Let S be a finite set and F be the free group generated by S.
Reference: [Gol77] <author> L. M. Goldschlager. </author> <title> The monotone and planar circuit value problems are log space complete for P. </title> <journal> SIGACT News, </journal> <volume> 9(2) </volume> <pages> 25-29, </pages> <month> Summer </month> <year> 1977. </year>
Reference-contexts: Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [Gol77] </ref> Hint: Reduce CVP to MCVP. A proof is given in Section 5.2. A.1.4 Alternating Monotone Fanout 2 CVP (AM2CVP) Given: An encoding ff of a monotone Boolean circuit ff, plus inputs x 1 ; : : : ; x n . <p> Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [Gol77, McC81] </ref> Hint: Reduce CVP to PCVP. Lay out the circuit and use cross-over circuits to replace crossing lines with a planar subcircuit. A planar xor circuit can be built from two each ^; _; : gates; a planar cross-over circuit can be built from three planar xor circuits.
Reference: [Gol80] <author> L. M. Goldschlager. </author> <title> A space efficient algorithm for the monotone planar circuit value problem. </title> <journal> Information Processing Letters, </journal> <volume> 10(1) </volume> <pages> 25-27, </pages> <year> 1980. </year>
Reference-contexts: In fact, the monotone version of PCVP is in LOGCFL NC 2 <ref> [DC80, DC89, Gol80] </ref> when all inputs appear on one face of the planar embedding. The more general problem where inputs may appear anywhere is also known to be in NC [Kos90, DK91].
Reference: [Gol81] <author> L. M. Goldschlager. </author> <title> *-productions in context-free grammars. </title> <journal> Acta Informatica, </journal> <volume> 16(3) </volume> <pages> 303-308, </pages> <year> 1981. </year>
Reference-contexts: It follows that * 2 L (G) if and only if w is generated by V . Remarks: Goldschlager remarks it is the presence of *-productions in the input grammar that make the membership question difficult <ref> [Gol81] </ref>. Lewis, Stearns, and Hartmanis' log 2 n space algorithm [LSH65] and Ruzzo's AC 1 (hence NC 2 ) algorithm [Ruz80] for general context free language recognition can both be modified to work with an *-free grammar given as part of the input. <p> A.7.2 Context-Free Grammar Empty (CFGempty) Given: A context-free grammar G = (N; T; P; S). Problem: Is L (G) is empty? Reference: <ref> [JL76, Gol81] </ref> Hint: The reduction given in Problem A.7.1 suffices. The following reduction of MCVP to CFGempty (due to Martin Tompa, private communication) is also of interest. <p> Their proof used the reduction for CFGmem and instead checked if L (G) is empty [JL76]. A.7.3 Context-Free Grammar Infinite (CFGinf ) Given: A context-free grammar G = (N; T; P; S). Problem: Is L (G) is infinite? Reference: <ref> [Gol81, JL76] </ref> Hint: Use a grammar similar to G in the proof for CFGempty, Problem A.7.2, except production i ! a is replaced by i ! x, and the productions x ! a and x ! ax are also added. <p> A.7.4 Context-Free Grammar *-Membership (CFG*mem) Given: A context-free grammar G = (N; T; P; S). Problem: Is * 2 L (G)? Reference: <ref> [Gol81, JL76] </ref> Hint: Use a grammar similar to G in the proof for CFGempty, Problem A.7.2, except production i ! a is replaced by i ! *.
Reference: [Gol82] <author> L. M. Goldschlager. </author> <title> A universal interconnection pattern for parallel computers. </title> <journal> Journal of the ACM, </journal> <volume> 29(4) </volume> <pages> 1073-1086, </pages> <month> October </month> <year> 1982. </year>
Reference: [Goo83] <author> G. B. Goodrich. </author> <title> The Complexity of Finite Languages. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1983. </year>
Reference-contexts: A.7.5 Straight-Line Program Membership (SLPmem) Given: A straight-line program over alphabet , jj 1, with operations taken from = [ ff*g; ; [; g, and a string x. Problem: Is x a member of the set constructed by the program? Reference: <ref> [Goo83] </ref> Hint: By noting there is a log space alternating Turing machine that "parses" x relative to the program, the problem is easily seen to be in P . Reduce MCVP to SLPmem by the following: true ! f*g, false ! , ^ ! , and _ ! [. <p> A.7.6 Straight-Line Program Nonempty (SLPnonempty) Given: A straight-line program over alphabet , jj 1, with operations taken from = [ ff*g; ; [; g, and a string x. Problem: Is the set constructed by the program non-empty? Reference: <ref> [Goo83] </ref> Part II: P -Complete Problems * 73 Hint: Reduce SLPmem to SLPnonempty. Change non-empty constants to f*g, and test membership of *. Remarks: With " added, SLPnonempty becomes complete for nondeterministic exponential time [Goo83]. <p> Problem: Is the set constructed by the program non-empty? Reference: <ref> [Goo83] </ref> Part II: P -Complete Problems * 73 Hint: Reduce SLPmem to SLPnonempty. Change non-empty constants to f*g, and test membership of *. Remarks: With " added, SLPnonempty becomes complete for nondeterministic exponential time [Goo83]. A.7.7 Labeled GAP (LGAP) Given: A fixed context free language L over alphabet , a directed graph G = (V; E) with edges labeled by strings in fl , and two vertices s and t.
Reference: [Goo89] <author> M. T. Goodrich. </author> <title> Triangulating a polygon in parallel. </title> <journal> Journal of Algorithms, </journal> <volume> 10(3) </volume> <pages> 327-351, </pages> <year> 1989. </year>
Reference-contexts: The vertex u is a special "target" vertex in the output gate of the circuit. A vertical line is connected to u in the triangulation if and only if the circuit evaluates to true. Remarks: The problem of finding some arbitrary triangulation is in NC <ref> [Goo89] </ref>. If the polygon P is not allowed to have holes then the complexity of the problem is open. In [ACG90] they conjecture that this restricted version is in NC . <p> See [RTY90] for a detailed discussion. B.3.3 Restricted Plane Sweep Triangulation (SWEEP) Given: An n vertex polygon P without holes. Problem: Find the triangulation computed by the plane sweep triangulation algorithm. Reference: [ACG90] Remarks: The problem of finding some arbitrary triangulation is in NC <ref> [Goo89] </ref>. If the polygon is allowed to have holes then the problem is P -complete [ACG90]. See Problem A.9.1 B.3.4 Successive Convex Hulls (SCH) Given: A set S of n points in dimension d and a designated point p.
Reference: [GP86] <author> L. M. Goldschlager and I. Parberry. </author> <title> On the construction of parallel computers from various bases of Boolean functions. </title> <journal> Theoretical Computer Science, </journal> <volume> 43(1) </volume> <pages> 43-58, </pages> <year> 1986. </year>
Reference-contexts: Remarks: For the two input basis of Boolean functions, it is known that CVP is P - complete except when the basis consists solely of or, consists solely of and, or consists of any or all of the following: xor, equivalence, and not <ref> [GP86, Par87] </ref>.
Reference: [Gre88a] <author> R. Greenlaw. </author> <title> Parallel complexity results about greedy breadth and depth first search. </title> <type> Technical Report 88-07-05, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> July </month> <year> 1988. </year> <note> Submitted for publication. </note>
Reference-contexts: Problem: Construct the depth first search numbering of G starting from vertex s. Reference: [AA88, AAK90] Remarks: RNC algorithms are now known for both the undirected [AA88] and directed [AAK90] cases, subsuming earlier RNC results for planar graphs [Smi86]. For DAGs, DFS is in NC <ref> [Gre88a] </ref>. B.5.2 0-1 Maximum Flow (0-1 MaxFlow) Given: Directed graph G with each edge labeled in unary with a capacity c i 0 and two distinguished vertices, source s and sink t. Problem: Find a maximum flow.
Reference: [Gre88b] <author> Raymond Greenlaw. </author> <title> The Complexity of Parallel Computations: Inherently Sequential Algorithms and P-Complete Problems. </title> <type> PhD thesis, </type> <institution> University of Wash-ington, </institution> <month> December </month> <year> 1988. </year> <note> Also, TR 88-12-01. </note>
Reference-contexts: The problem remains open if this constraint is relaxed. For example, the problem remains open for graphs presented with all adjacency lists sorted in order of increasing vertex number. The problem remains P -complete if the input is specified by a fixed vertex numbering <ref> [And85, Gre88b] </ref>. Anderson showed that computing just the first branch of the lexicographically first DFS tree, called the lexicographically first maximal path, is P -complete [And85] (see Problem A.3.1). Computing the LFDFS tree in planar graphs is P -complete as well [And85]. <p> After all of s's children have been visited, the search continues with the node on the top of the stack playing the role of s. Reference: <ref> [Gre88b, Grear] </ref> Hint: The proof sketched below is due to Anderson [And88]. Reduce LFDFS to BDS. Insert a new vertex between every pair of connected nodes in the original graph. <p> The nodes most recently visited on a new level are searched from Part II: P -Complete Problems * 61 first at the next level. Reference: <ref> [Gre88b, Grear] </ref> Hint: The reduction is from SAM2CVP to SBFS. Sort the inputs nodes and assign false inputs lower numbers than true inputs. <p> This problem is in NC <ref> [Gre88b, dlTK88, dlTK89] </ref>. A.3.5 Alternating Breadth First Search (ABFS) Given: A graph G = (V; E) with E partitioned into two sets M and U , a designated vertex v, and a designated start vertex s.
Reference: [Gre89] <author> Raymond Greenlaw. </author> <title> Ordered vertex removal and subgraph problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39(3) </volume> <pages> 323-342, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: For any c &lt; 1=2 there is an NC algorithm for finding d, and for any c &gt; 1=2 the problem of finding d is P -complete [AM84a]. A "complementary" low degree subgraph problem has also been studied and for several natural decision problems it is NP -complete <ref> [Gre89] </ref>. Decision problems based on ordered vertex removal relating to subgraph computations are also P -complete [Gre89]. <p> A "complementary" low degree subgraph problem has also been studied and for several natural decision problems it is NP -complete <ref> [Gre89] </ref>. Decision problems based on ordered vertex removal relating to subgraph computations are also P -complete [Gre89]. <p> Reference: <ref> [Gre89] </ref> Hint: The reduction is from NAND CVP with fanin and fanout restrictions to 2. The circuit is transformed directly into a graph. The vertices in the graph are ordered so that gates evaluating to false in the circuit are deleted first in the instance of OHDVR. <p> there an elimination order on V , v 1 ; : : : ; v n , satisfying the properties that u is eliminated before v and for 1 i n, v i is the lowest numbered vertex of minimum degree in the (i 1)-st remaining subgraph of G? Reference: <ref> [VS88, Gre89] </ref> Hint: This is the complementary problem to Problem A.2.9. The problem defined in [VS88] is more restricted than the one presented here. <p> V , v 1 ; : : : ; v n , satisfying the properties that u = v j for some j &lt; (n k) and for 1 i n, v i is the lowest numbered vertex of maximum degree in the (i 1)-st remaining subgraph of G? Reference: <ref> [Gre89] </ref> Hint: The reduction is from Problem A.2.9. Remarks: The ordered low degree subgraph membership problem is also P - complete [Gre89]. The problem here is to determine whether a designated vertex is in a remaining subgraph when all vertices in that remaining subgraph have small degree. <p> some j &lt; (n k) and for 1 i n, v i is the lowest numbered vertex of maximum degree in the (i 1)-st remaining subgraph of G? Reference: <ref> [Gre89] </ref> Hint: The reduction is from Problem A.2.9. Remarks: The ordered low degree subgraph membership problem is also P - complete [Gre89]. The problem here is to determine whether a designated vertex is in a remaining subgraph when all vertices in that remaining subgraph have small degree. A.2.12 Nearest Neighbor Traveling Salesman Heuristic (NNTSH) Given: A distance matrix D with entries (d ij ) and two distinguished vertices s and l. <p> Not all problems computing a lexicographically first solution are P -complete. For example, the lexicographically first topological order problem is complete for NLOG [Sho89] and the lexicographic low degree subgraph membership problem is NP -complete <ref> [Gre89] </ref>. A.2.14 Minimum Feedback Vertex Set (MFVS) Given: A directed graph G = (V; E) that is cyclically reducible (defined below) and a designated vertex v.
Reference: [Gre90] <author> R. Greenlaw. </author> <title> The parallel complexity of approximation algorithms for the maximum acyclic subgraph problem. </title> <type> Technical Report 90-61, </type> <institution> University of New Hampshire, </institution> <year> 1990. </year> <note> To appear Mathematical Systems Theory </note> . 
Reference-contexts: Greenlaw proved that a related problem, the lexicographically first maximal acyclic subgraph problem, is P -complete <ref> [Gre90] </ref>. Ramachandran proved that finding a minimum weight feedback vertex set in a reducible flow graph with arbitrary weights is P -complete [Ram88]. <p> A.2.15 Edge Maximal Acyclic Subgraph (EMAS) Given: A directed graph G = (V; E) with an ordering on the edges and a designated edge e. Problem: Is e contained in the edge maximal acyclic subgraph? Reference: <ref> [Gre90] </ref> Hint: The edge maximal acyclic subgraph is defined to be the subgraph computed by an algorithm that builds up the subgraph by processing edges in order. It adds an edge to the subgraph if its inclusion does not introduce a cycle. The reduction is from NOR CVP. <p> The edges of the output gate are "grounded." One of the edges leaving g out (bot) is used as the designated edge e. Remarks: The decision problem "Is the edge maximal subgraph of size k?" is also P - complete <ref> [Gre90] </ref>. The feedback arc set problem [Kar72] is an equivalent formulation of the maximum acyclic subgraph problem. Approximation algorithms for this problem are important because there are very few classes of graphs for which the problem is known to be in P [BS90]. <p> Approximation algorithms for this problem are important because there are very few classes of graphs for which the problem is known to be in P [BS90]. Greenlaw proves decision problems based on several other natural approximation algorithms are P -complete <ref> [Gre90] </ref>. He also gives two approximation algorithms that are in NC . Berger has an NC approximation algorithm that, assuming the input graph does not contain two-cycles, generates a subgraph containing more than half the arcs [Ber91].
Reference: [Grear] <author> Raymond Greenlaw. </author> <title> A model classifying algorithms as inherently sequential with applications to graph searching. </title> <journal> Information and Computation, </journal> <note> to appear. </note>
Reference-contexts: In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 [AA88, AAK90]. Computing a depth-first vertex numbering for planar graphs is in NC [Smi86, HY87]. Computing the lexicographically first depth-first numbering for DAGs is in NC <ref> [Grear, dlTK88, dlTK89] </ref>. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC [SV85]. A.3.3 Breadth-Depth Search (BDS) Given: A graph G = (V; E) with a numbering on the vertices and two designated vertices u and v. <p> After all of s's children have been visited, the search continues with the node on the top of the stack playing the role of s. Reference: <ref> [Gre88b, Grear] </ref> Hint: The proof sketched below is due to Anderson [And88]. Reduce LFDFS to BDS. Insert a new vertex between every pair of connected nodes in the original graph. <p> The nodes most recently visited on a new level are searched from Part II: P -Complete Problems * 61 first at the next level. Reference: <ref> [Gre88b, Grear] </ref> Hint: The reduction is from SAM2CVP to SBFS. Sort the inputs nodes and assign false inputs lower numbers than true inputs.
Reference: [GS89] <author> M. Goldberg and T. Spencer. </author> <title> A new parallel algorithm for the maximal independent set problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 419-427, </pages> <year> 1989. </year>
Reference-contexts: Karp and Wigderson gave the first NC algorithm for finding a maximal independent set [KW85], subsequently improved by Luby [Lub86], by Alon, Babai and Itai [ABI86], and by Goldberg and Spencer <ref> [GS89] </ref>. These algorithms do not compute the lexicographically first maximal independent set. Part II: P -Complete Problems * 51 A.2.2 Lexicographically First Maximal Clique (LFMC) Given: An undirected graph G with an ordering on the vertices and a designated vertex v.
Reference: [GSS82] <author> L. M. Goldschlager, R. A. Shaw, and J. </author> <title> Staples. The maximum flow problem is log space complete for P. </title> <journal> Theoretical Computer Science, </journal> <volume> 21 </volume> <pages> 105-111, </pages> <year> 1982. </year>
Reference-contexts: Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: Folklore. Hint: A proof is given in Section 5.2. Remarks: <ref> [GSS82] </ref> gave a completeness proof for monotone, fanout 2 CVP. A.1.5 NAND Circuit Value Problem (NANDCVP) Given: An encoding ff of a Boolean circuit ff constructed only of nand gates, plus inputs x 1 ; : : : ; x n . <p> Problem: Is there a feasible flow of value k, i.e. is the value of the maximum flow into the sink f ? Reference: <ref> [GSS82, LW87] </ref> Hint: The first P -completeness proof for a decision problem derived from maximum flow was for the problem of determining whether the flow is odd or even [GSS82]. <p> there a feasible flow of value k, i.e. is the value of the maximum flow into the sink f ? Reference: [GSS82, LW87] Hint: The first P -completeness proof for a decision problem derived from maximum flow was for the problem of determining whether the flow is odd or even <ref> [GSS82] </ref>. We give this reduction. (The proof given in [LW87] for the more natural threshold problem stated above is similar.) The reduction is from AM2CVP (Problem A.1.4) to MaxFlow.
Reference: [Har79] <author> M. Harrison. </author> <title> Introduction to Formal Language Theory. </title> <publisher> Addison Wesley, </publisher> <year> 1979. </year>
Reference-contexts: The designated vertex t is hq f ; jxji. Finally, L = L (G), where G : fS ! aSaS j a 2 g [ fS ! *g, i.e., the semi-Dyck language D jj on jj letters <ref> [Har79, Section 10.4] </ref>. Remarks: Remains P -complete when L is D 2 . An equivalent statement is that it is P - complete to decide, given a deterministic finite state automaton M , whether D 2 "L (M ) = .
Reference: [H-as87] <author> Johan H-astad. </author> <title> Computational Limitations of Small-Depth Circuits. </title> <booktitle> ACM doctoral dissertation award, 1986. </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year> <title> 104 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: </title> <publisher> 1.46) </publisher>
Reference-contexts: A.1.10 Inverting an NC 0 Permutation (*) (InvNC0Perm) Given: An n-input, n-output NC 0 circuit computing a bijective function f : f0; 1g n ! f0; 1g n and y 2 f0; 1g n . Problem: Is the last bit of f 1 (y) equal to 1? Reference: <ref> [H-as87, Section 2.5] </ref>, [H-as88] Hint: Remarks: Not known to be in P in general, although the family of permutations used to show P -hardness is polynomial time invertible.
Reference: [H-as88] <author> Johan H-astad. </author> <title> One-way permutations in N C 0 . Information Processing Letters, </title> <booktitle> 26 </booktitle> <pages> 153-155, </pages> <year> 1988. </year>
Reference-contexts: Problem: Is the last bit of f 1 (y) equal to 1? Reference: [H-as87, Section 2.5], <ref> [H-as88] </ref> Hint: Remarks: Not known to be in P in general, although the family of permutations used to show P -hardness is polynomial time invertible.
Reference: [Her90] <author> J. Hershberger. </author> <title> Upper envelope onion peeling. </title> <editor> In G. Goos and J. Hartmanis, editors, </editor> <booktitle> 2nd Scandinavian Workshop on Algorithm Theory, volume 447 of Lecture Notes in Computer Science, </booktitle> <pages> pages 368-379. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1990. </year>
Reference-contexts: The upper envelope consists of those segments visible from the point (0; +1). A segment is visible from a point p if a ray cast from p can hit the segment before hitting any other segment. Reference: <ref> [ACG90, Her90] </ref> Hint: The visibility layering process is polynomial time [Her90]. The reduction presented in [Her90] is from the monotone CVP. We sketch this reduction. The gates in the instance of CVP are assumed to be numbered in topological order. <p> The upper envelope consists of those segments visible from the point (0; +1). A segment is visible from a point p if a ray cast from p can hit the segment before hitting any other segment. Reference: [ACG90, Her90] Hint: The visibility layering process is polynomial time <ref> [Her90] </ref>. The reduction presented in [Her90] is from the monotone CVP. We sketch this reduction. The gates in the instance of CVP are assumed to be numbered in topological order. <p> A segment is visible from a point p if a ray cast from p can hit the segment before hitting any other segment. Reference: [ACG90, Her90] Hint: The visibility layering process is polynomial time <ref> [Her90] </ref>. The reduction presented in [Her90] is from the monotone CVP. We sketch this reduction. The gates in the instance of CVP are assumed to be numbered in topological order. <p> The version of MCVP used in [ACG90] consists of crossing fanout gates, single output and gates, and single output or gates. An instance consists of alternate routing and logic layers. Gadgets are constructed for the three types of gates and a similar decision problem to the one in <ref> [Her90] </ref> is posed to determine the output of the circuit. If the length of all segments is required to be the same then the complexity of the problem is not known [ACG90]. In [ACG90] they conjecture that this version of the problem is in NC .
Reference: [HM86] <author> D. Helmbold and E. Mayr. </author> <title> Perfect graphs and parallel algorithms. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages 853-860. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1986. </year>
Reference-contexts: Remarks: The problem is in NC if the job times are small, that is n O (1) . NC algorithms for scheduling problems with either intree or outtree precedence constraints are known <ref> [HM86, HM87] </ref>. 66 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) A.5 Local Optimality A.5.1 MAXFLIP Verification (MAXFLIPV) Given: An encoding of a Boolean circuit ff constructed of and, or, and not gates, plus inputs x = x 1 ; : : : ; x n .
Reference: [HM87] <author> D. Helmbold and E. Mayr. </author> <title> Fast scheduling algorithms on parallel computers. </title> <booktitle> Advances in Computing Research, </booktitle> <year> 1987. </year>
Reference-contexts: The jobs are to be scheduled on two identical processors. Problem: Is the final offset produced by the list scheduling algorithm non-zero? The final offset is the difference in the total execution time of the two processors. Reference: <ref> [HM87] </ref> Hint: Reduce NOR CVP to GLS. Without loss of generality, assume the gates in the instance of NOR CVP are numbered in reverse topological order. The input wires to gate i are numbered 4 2i and 4 2i+1 . <p> Remarks: The problem is in NC if the job times are small, that is n O (1) . NC algorithms for scheduling problems with either intree or outtree precedence constraints are known <ref> [HM86, HM87] </ref>. 66 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) A.5 Local Optimality A.5.1 MAXFLIP Verification (MAXFLIPV) Given: An encoding of a Boolean circuit ff constructed of and, or, and not gates, plus inputs x = x 1 ; : : : ; x n .
Reference: [Hon84] <author> J. W. Hong. </author> <title> Similarity and duality in computation. </title> <journal> Information and Control, </journal> <volume> 62 </volume> <pages> 109-128, </pages> <year> 1984. </year>
Reference: [Hoo90] <author> H. J. </author> <title> Hoover. Feasible real functions and arithmetic circuits. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(1) </volume> <pages> 182-204, </pages> <year> 1990. </year>
Reference-contexts: This fixes the number of input bits, the continuity of f limits its range, and thus fixes the number of output bits, both are polynomial in n.) Problem: Compute V (x) with absolute error &lt; 2 n . Reference: [Hoo91] <ref> [Hoo90] </ref> Hint: The function V computes the continuous analog of the circuit value function by mapping circuit descriptions, along with their possible inputs, onto the real line.
Reference: [Hoo91] <author> H. J. </author> <title> Hoover. Real functions, contraction mappings, </title> <journal> and P-completeness. Information and Computation, </journal> <volume> 93(2) </volume> <pages> 333-349, </pages> <year> 1991. </year>
Reference-contexts: This fixes the number of input bits, the continuity of f limits its range, and thus fixes the number of output bits, both are polynomial in n.) Problem: Compute V (x) with absolute error &lt; 2 n . Reference: <ref> [Hoo91] </ref> [Hoo90] Hint: The function V computes the continuous analog of the circuit value function by mapping circuit descriptions, along with their possible inputs, onto the real line. <p> Problem: Compute the fixed point of C in I with absolute error &lt; 2 n . Reference: <ref> [Hoo91] </ref> Hint: Same basic technique of RealCVP, but the function C evaluates the circuit level by level, thus converging to a fixed point which encodes the final state of the circuit.
Reference: [HS84] <author> E. Horowitz and S. Sahni. </author> <title> Fundamentals of Computer Algorithms. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Md., </address> <year> 1984. </year>
Reference-contexts: A.3.3 Breadth-Depth Search (BDS) Given: A graph G = (V; E) with a numbering on the vertices and two designated vertices u and v. Problem: Is vertex u visited before vertex v in the breadth-depth first search <ref> [HS84] </ref> of G induced by the vertex numbering? A breadth-depth first search starts at a node s and visits all children of s pushing them on a stack as the search proceeds.
Reference: [HS87] <author> P. Hajnal and E. Szemeredi. </author> <title> Brooks coloring in parallel. </title> <type> Manuscript, </type> <year> 1987. </year>
Reference-contexts: The + 1 vertex coloring is NC 1 reducible to finding a maximal independent set [Lub84], but the maximal independent set algorithm [KW85] does not produce the lexicographically first maximal independent set. It is possible to color a graph with colors in NC <ref> [KN88, HS87, BK86] </ref>, although the coloring produced is not the lexicographically first. There is an NC algorithm for 5 coloring planar graphs [Nao87]. A.2.7 High Degree Subgraph (HDS) Given: A graph G = (V; E) and an integer k.
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: Let M = (Q; 0 ; ; ffi; q 0 ; Z 0 ) be a 2-way DPDA <ref> [HU79] </ref> and let x 2 0 be an input string. Without loss of generality, the PDA has a unique final configuration q f and accepts with empty stack with its head at the right end of the input. Let = [ fZ j Z 2 g. <p> If G is acyclic then the problem is complete for SAC 1 = LOGCFL [Ruz79]. A.7.8 Two-Way DPDA Acceptance (2DPDA) Given: A two-way deterministic pushdown automaton M and a string x. Problem: Is x accepted by M ? Reference: [Coo71a, Gal74, Gal77, Lad75] Hint: See, e.g., <ref> [HU79] </ref> for a definition of 2DPDAs. Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton.
Reference: [HY87] <author> X. He and Y. Yesha. </author> <title> A nearly optimal parallel algorithm for constructing depth first spanning trees in a planar graph, 1987. </title> <type> Manuscript. </type>
Reference-contexts: Computing the LFDFS tree in planar graphs is P -complete as well [And85]. In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 [AA88, AAK90]. Computing a depth-first vertex numbering for planar graphs is in NC <ref> [Smi86, HY87] </ref>. Computing the lexicographically first depth-first numbering for DAGs is in NC [Grear, dlTK88, dlTK89]. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC [SV85].
Reference: [Imm81] <author> N. Immerman. </author> <title> Number of quantifiers is better than number of tape cells. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(3) </volume> <pages> 384-406, </pages> <year> 1981. </year>
Reference-contexts: Reference: <ref> [CKS81, Imm81, Imm83] </ref> Hint: Reduce AM2CVP (Problem A.1.4) to AGAP. Create two existential nodes 0 and 1. <p> Inputs to a gate correspond to children in the alternating graph. For output z, apath (z; 1) holds if and only if the output z is 1. Remarks: The original proof simulated an alternating Turing machine (ATM) directly to show that AGAP was complete for ATM log space <ref> [Imm81] </ref>. Since ASPACE (log n) = P [CKS81], this showed AGAP was P -complete too. When this problem is generalized to hierarchical graphs it remains in P , provided the graph is "breadth-first ordered;" see [LW87].
Reference: [Imm83] <author> N. Immerman. </author> <title> Languages which capture complexity classes (preliminary report). </title> <booktitle> In Proceedings of the Fifteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 347-354, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1983. </year>
Reference-contexts: Reference: <ref> [CKS81, Imm81, Imm83] </ref> Hint: Reduce AM2CVP (Problem A.1.4) to AGAP. Create two existential nodes 0 and 1.
Reference: [Ita78] <author> A. Itai. </author> <title> Two-commodity flow. </title> <journal> Journal of the ACM, </journal> <volume> 25(4) </volume> <pages> 596-611, </pages> <year> 1978. </year>
Reference-contexts: Remarks: If LE is restricted so the coefficients of A and b are either 1; 0; or 1 then LE is still P -complete. This follows from the reduction given by Itai <ref> [Ita78] </ref>. The restricted version of LE is denoted [1,1] LE. A.4.3 Linear Programming (*) (LP) Given: An integer n fi d matrix A, an integer n fi 1 vector b, and an integer 1 fi d vector c. <p> Two commodity flow (2CF) is defined like MaxFlow except there are two sources and two sinks, and there are two separate flows functions for the commodities. Since MaxFlow is a special case of 2CF and 2CF is in P by results of Itai <ref> [Ita78] </ref> and Khachian [Kha79], it follows that 2CF is P -complete. Itai defined several other variants of 2CF that are also P -complete. They are defined below. (l; u)-2CF is a case of 2CF in which there are lower and upper bounds on the capacity of each edge. <p> A homologous flow is a flow in which pairs of edges are required to have the same flow. Reference: <ref> [Ita78] </ref> Hint: It follows that HF is in P by the results of Itai [Ita78] and Khachian [Kha79]. We describe the reduction given by Itai [Ita78] and note that it is a log space reduction. The reduction is from [1,1] LE. <p> A homologous flow is a flow in which pairs of edges are required to have the same flow. Reference: <ref> [Ita78] </ref> Hint: It follows that HF is in P by the results of Itai [Ita78] and Khachian [Kha79]. We describe the reduction given by Itai [Ita78] and note that it is a log space reduction. The reduction is from [1,1] LE. <p> A homologous flow is a flow in which pairs of edges are required to have the same flow. Reference: <ref> [Ita78] </ref> Hint: It follows that HF is in P by the results of Itai [Ita78] and Khachian [Kha79]. We describe the reduction given by Itai [Ita78] and note that it is a log space reduction. The reduction is from [1,1] LE. Let P m j=1 a ij x j = b i , for i = 1; : : : ; n be an instance of [1,1] LE.
Reference: [JL76] <author> N. D. Jones and W. T. Laaser. </author> <title> Complete problems for deterministic polynomial time. </title> <journal> Theoretical Computer Science, </journal> <volume> 3(2) </volume> <pages> 105-117, </pages> <year> 1976. </year>
Reference-contexts: For example, the unit resolvent of F = A _ B 1 _ _ B m and the unit G = :A is B 1 _ _ B m . Reference: <ref> [JL76] </ref> Hint: Jones and Laaser provide a poly-time algorithm for unit resolution [JL76]. To show B follows from the assumption A 1 ^ ^A m , negate B, add it to the set of clauses and derive the empty clause. Reduce CVP to UNIT as described below. <p> For example, the unit resolvent of F = A _ B 1 _ _ B m and the unit G = :A is B 1 _ _ B m . Reference: <ref> [JL76] </ref> Hint: Jones and Laaser provide a poly-time algorithm for unit resolution [JL76]. To show B follows from the assumption A 1 ^ ^A m , negate B, add it to the set of clauses and derive the empty clause. Reduce CVP to UNIT as described below. <p> A.6.2 Horn Unit Resolution (HORN) Given: A Horn formula F , that is, a conjunctive normal form (CNF) formula with each clause a disjunction of literals having at most one positive literal per clause. Problem: Can the empty clause 2 be deduced from F by unit resolution? Reference: <ref> [DLR79, JL76] </ref> Hint: Reduce an arbitrary Turing machine to a CNF formula as in [Coo71b]. All of the clauses are Horn clauses. <p> Problem: Is w contained in the smallest subset of W that contains V and is closed under the operation *? Reference: <ref> [JL76] </ref> Hint: The reduction is from unit resolution, Problem A.6.1. Define a * b to be the unit resolution of clauses a and b. <p> Problem: Is there an admissible node in S? A node x is admissible if and only if x 2 T , or there exists admissible y; z 2 X such that (x; y; z) 2 R. Reference: <ref> [Coo74, JL76] </ref> Hint: Reduce GEN to PATH by defining (x; y; z) 2 R if and only if x = y * z. Remarks: This is the first problem shown to be log space complete for P . <p> See also [AP87] for related results. A.7 Formal Languages A.7.1 Context-Free Grammar Membership (CFGmem) Given: A context-free grammar G = (N; T; P; S) and a string x 2 T fl . Problem: Is x 2 L (G)? Reference: <ref> [JL76] </ref> Hint: Reduce GEN to CFGmem. Let (W; *; V; w) be an instance of GEN. Construct the grammar G = (W; fag; P; w), where P = fx ! yz j y * z = xg [ fx ! * j x 2 V g. <p> A.7.2 Context-Free Grammar Empty (CFGempty) Given: A context-free grammar G = (N; T; P; S). Problem: Is L (G) is empty? Reference: <ref> [JL76, Gol81] </ref> Hint: The reduction given in Problem A.7.1 suffices. The following reduction of MCVP to CFGempty (due to Martin Tompa, private communication) is also of interest. <p> Remarks: Note, this reduction and the one for CFGinf, have no *-productions yet remain complete. The original proof of Jones and Laaser reduced GEN to CFGempty. Their proof used the reduction for CFGmem and instead checked if L (G) is empty <ref> [JL76] </ref>. A.7.3 Context-Free Grammar Infinite (CFGinf ) Given: A context-free grammar G = (N; T; P; S). <p> Their proof used the reduction for CFGmem and instead checked if L (G) is empty [JL76]. A.7.3 Context-Free Grammar Infinite (CFGinf ) Given: A context-free grammar G = (N; T; P; S). Problem: Is L (G) is infinite? Reference: <ref> [Gol81, JL76] </ref> Hint: Use a grammar similar to G in the proof for CFGempty, Problem A.7.2, except production i ! a is replaced by i ! x, and the productions x ! a and x ! ax are also added. <p> A.7.4 Context-Free Grammar *-Membership (CFG*mem) Given: A context-free grammar G = (N; T; P; S). Problem: Is * 2 L (G)? Reference: <ref> [Gol81, JL76] </ref> Hint: Use a grammar similar to G in the proof for CFGempty, Problem A.7.2, except production i ! a is replaced by i ! *. <p> Problem: Does E j= e 1 = e 2 ? Reference: [Cos88] Hint: A polynomial time algorithm for the problem is given in [Cos88]. The reduction is from the implication problem for propositional Horn clauses <ref> [JL76] </ref>. See Problems A.6.1 and A.6.2. Let be a set of propositional formulas of the form x i ^x j ) x k , where x 1 ; x 2 ; : : : 82 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) are propositional variables. <p> Problem: Is s a winning position for the first player? Reference: <ref> [JL76] </ref> Hint: Reduce AM2CVP to GAME. or gates in the circuit correspond to winning positions for player one, and gates to winning positions for player two. <p> W 0 is the set of all inputs having value true and s is the output. s is winning if and only if the output of the circuit is true. Remarks: The original reduction by Jones and Laaser was from GEN to GAME <ref> [JL76] </ref>.
Reference: [JPY88] <author> D. S. Johnson, C. H. Papadimitriou, and M. Yannakakis. </author> <title> How easy is local search? Journal of Computer and System Sciences, </title> <booktitle> 37(1) </booktitle> <pages> 79-100, </pages> <year> 1988. </year> <note> References * 105 </note>
Reference-contexts: That is, they can be obtained from x by flipping one bit. Reference: <ref> [JPY88] </ref> Hint: The problem is easily seen to be in P . The reduction is from the MCVP, Problem A.1.3. Let ff denote an instance of MCVP with input x 1 ; : : : ; x n . Construct an instance of MAXFLIP as follows. <p> This is true if and only if the output of ff on its input is 0. Remarks: The complementary problem, called the FLIP verification problem, in which the output is minimized is also P -complete <ref> [JPY88] </ref>. The general problems MAXFLIP and FLIP are PLS -complete [JPY88]. PLS stands for polynomially local search. A.5.2 Local Optimality Kernighan-Lin Verification (LOKLV) Given: A graph G = (V; E) with weights w (e) on the edges and a partition of V into two equal size subsets A and B. <p> This is true if and only if the output of ff on its input is 0. Remarks: The complementary problem, called the FLIP verification problem, in which the output is minimized is also P -complete <ref> [JPY88] </ref>. The general problems MAXFLIP and FLIP are PLS -complete [JPY88]. PLS stands for polynomially local search. A.5.2 Local Optimality Kernighan-Lin Verification (LOKLV) Given: A graph G = (V; E) with weights w (e) on the edges and a partition of V into two equal size subsets A and B. <p> Problem: Is the cost of the partition, c (A; B), a local optimum among the neighbors of the partition? The cost of the partition is defined to be the sum of the costs of all edges going between the sets A and B. We follow the presentation in <ref> [JPY88] </ref> to define the neighbors. A swap of partition (A; B) is a partition (C; D) such that (C; D) is obtained from (A; B) by swapping one element of A with an element of B. <p> A partition (C; D) is a neighbor of (A; B) if it occurs in the unique maximal monotonic sequence of lexicographic greedy swaps starting with (A; B). Reference: <ref> [JPY88] </ref> Hint: The reduction is from MAXFLIPV, Problem A.5.1. Remarks: A problem called the weak local optimum for Kernighan-Lin verification problem in which the neighborhoods are larger is also P -complete [JPY88]. The general versions of these problems, local optimality Kernighan-Lin and weak local optimality Kernighan-Lin are both PLS -complete [JPY88]. <p> Reference: <ref> [JPY88] </ref> Hint: The reduction is from MAXFLIPV, Problem A.5.1. Remarks: A problem called the weak local optimum for Kernighan-Lin verification problem in which the neighborhoods are larger is also P -complete [JPY88]. The general versions of these problems, local optimality Kernighan-Lin and weak local optimality Kernighan-Lin are both PLS -complete [JPY88]. A.5.3 Unweighted, Not-All-Equal Clauses, 3SAT/FLIP (U3NSATFLIP) Given: A Boolean formula F in CNF with 3 literals per clause and a truth assignment s. <p> <ref> [JPY88] </ref> Hint: The reduction is from MAXFLIPV, Problem A.5.1. Remarks: A problem called the weak local optimum for Kernighan-Lin verification problem in which the neighborhoods are larger is also P -complete [JPY88]. The general versions of these problems, local optimality Kernighan-Lin and weak local optimality Kernighan-Lin are both PLS -complete [JPY88]. A.5.3 Unweighted, Not-All-Equal Clauses, 3SAT/FLIP (U3NSATFLIP) Given: A Boolean formula F in CNF with 3 literals per clause and a truth assignment s. Part II: P -Complete Problems * 67 Each clause has a weight of 1. The clauses are not-all-equals clauses with positive literals.
Reference: [JV82] <author> D. B. Johnson and S. M. Venkatesan. </author> <title> Parallel algorithms for minimum cuts and maximum flows in planar networks (preliminary version). </title> <booktitle> In 23rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 244-254, </pages> <address> Chicago, IL, </address> <month> November </month> <year> 1982. </year> <note> IEEE. </note>
Reference-contexts: If the network is restricted to being acyclic MaxFlow remains P -complete [Ram87]. Flows in planar networks can be computed in NC <ref> [JV82] </ref>. Two commodity flow (2CF) is defined like MaxFlow except there are two sources and two sinks, and there are two separate flows functions for the commodities.
Reference: [Kan85] <author> W. M. Kantor. </author> <title> Sylow's theorem in polynomial time. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30(3) </volume> <pages> 359-394, </pages> <year> 1985. </year>
Reference-contexts: B.1.8 Sylow Subgroups (SylowSub) Given: A group G. Problem: Find the Sylow subgroups of G. Reference: [BSL87] Remarks: The problem is known to be in P <ref> [Kan85] </ref>, however, the NC question is open even for solvable groups [BSL87]. For a permutation group G, testing membership in G, finding the order of G, finding the center of G, and finding a composition series of G are all known to be in NC [BSL87].
Reference: [Kar72] <author> R. M. Karp. </author> <title> Reducibility among combinatorial problems. </title> <editor> In R. E. Miller and J. W. Thatcher, editors, </editor> <booktitle> Complexity of Computer Computations, </booktitle> <pages> pages 85-104. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: A set is called a feedback vertex set if it contains at least one vertex from every cycle <ref> [Kar72] </ref>. It is minimum if no other feedback vertex set has fewer elements. Wang, Lloyd, and Soffa gave a polynomial time algorithm for computing feedback sets in cyclically Part II: P -Complete Problems * 57 reducible graphs [WLS85]. Thus, MFVSP is in P . The reduction is from MCVP. <p> It is easy to see that G is cyclically reducible. Set v = g 0 k to complete the reduction. Remarks: The question of whether a graph has a feedback vertex set of size k is NP - complete <ref> [Kar72] </ref>. Bovet, De Agostino, and Petreshci give an algorithm for finding a mini mum feedback set that requires O (k log 2 n) time and O (n 4 ) processors on a CREW-PRAM, where k denotes the size of the minimum feedback set. <p> The edges of the output gate are "grounded." One of the edges leaving g out (bot) is used as the designated edge e. Remarks: The decision problem "Is the edge maximal subgraph of size k?" is also P - complete [Gre90]. The feedback arc set problem <ref> [Kar72] </ref> is an equivalent formulation of the maximum acyclic subgraph problem. Approximation algorithms for this problem are important because there are very few classes of graphs for which the problem is known to be in P [BS90].
Reference: [Kar84] <author> R. M. </author> <type> Karp. </type> <institution> Talk at the University of Toronto, </institution> <year> 1984. </year>
Reference-contexts: LFMIS is P -complete for bipartite or planar graphs restricted to degree at most 3 [Miy89]. Karp observed that the completeness of LFMIS implies that determining the i th node chosen by any deterministic sequential algorithm for either LFMIS or LFMC (Problem A.2.2) is also complete <ref> [Kar84] </ref>. Computing or approximating the size of the lexicographically first maximal independent set is also P - complete; see Section 6.2.
Reference: [Kar86] <author> Howard Karloff. </author> <title> A las vegas RNC algorithm for maximum matching. </title> <journal> Combi-natorica, </journal> <volume> 6(4) </volume> <pages> 387-391, </pages> <year> 1986. </year>
Reference-contexts: Karp, Upfal, and Wigderson [KUW86] gave the first RNC algorithm for finding the maximum matching. A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87]. Karloff shows how any RNC algorithm for matching can be made errorless <ref> [Kar86] </ref>. Maximum edge-weighted matching for unary edge weights and maximum vertex-weighted matching for binary vertex weights are also known to be in RNC [KUW86, MVV87].
Reference: [Kas86] <author> S. Kasif. </author> <title> On the parallel complexity of some constraint satisfaction problems. </title> <booktitle> In Proceedings AAAI-86, </booktitle> <pages> pages 349-353, </pages> <year> 1986. </year>
Reference-contexts: A.6.3 Propositional Horn Clause Satisfiability (PHCS) Given: A set S of Horn clauses in the propositional calculus. Problem: Is S satisfiable? Part II: P -Complete Problems * 69 Reference: <ref> [Pla84, Kas86] </ref> Hint: The reduction is straightforward from the alternating graph accessibility problem, Problem A.2.3. Remarks: The problem remains P -complete when there are at most 3 literals per clause [Pla84]. Plaisted has shown that two problems involving proofs of restricted depth are also P -complete. <p> A designated variable P 0 and a designated label f . Problem: Is there a valid assignment of the label f to P 0 in G? Reference: <ref> [Kas86, GHR91] </ref> Hint: The original reduction is from the propositional Horn clause satisfiability problem, Problem A.6.3 [Kas86]. The reduction we sketch is from NAND CVP. A variable is introduced for each circuit input. The variable must have label 1 (0) if the circuit input is true (false). <p> A designated variable P 0 and a designated label f . Problem: Is there a valid assignment of the label f to P 0 in G? Reference: [Kas86, GHR91] Hint: The original reduction is from the propositional Horn clause satisfiability problem, Problem A.6.3 <ref> [Kas86] </ref>. The reduction we sketch is from NAND CVP. A variable is introduced for each circuit input. The variable must have label 1 (0) if the circuit input is true (false). We view each nand gate as being represented by three variables. <p> Player two attempts to exhibit an element of the pair that is not generated by V . Since GAME is an instance of AND/OR graph solvability it follows that determining whether an AND/OR graph has a solution is also P -complete <ref> [Kas86] </ref>. A.11.3 Cat & Mouse (CM) Given: A directed graph G = (V; E) with three distinguished nodes c, m, and g. Problem: Does the mouse have a winning strategy in the game? The game is played as follows.
Reference: [Kha79] <author> L. G. </author> <title> Khachian. A polynomial time algorithm for linear programming. </title> <journal> Dok-lady Akademii Nauk SSSR, n.s., </journal> <volume> 244(5) </volume> <pages> 1093-1096, </pages> <year> 1979. </year> <title> English translation in Soviet Math. </title> <journal> Dokl. </journal> <volume> 20, </volume> <pages> 191-194. </pages>
Reference-contexts: Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax b? (It is not required to find such an x.) Reference: <ref> [Coo82, Val82a, Kha79] </ref> Hint: LI is in P by [Kha79]. The following reduction of CVP to LI is due to [Coo82]. 1. If input x i is true (false) it is represented by the equation x i = 1 (x i = 0). 2. <p> Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax b? (It is not required to find such an x.) Reference: [Coo82, Val82a, Kha79] Hint: LI is in P by <ref> [Kha79] </ref>. The following reduction of CVP to LI is due to [Coo82]. 1. If input x i is true (false) it is represented by the equation x i = 1 (x i = 0). 2. <p> A.4.2 Linear Equalities (LE) Given: An integer n fi d matrix A and an integer n fi 1 vector b. Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax = b? Reference: <ref> [Coo82, Val82a, Kha79] </ref> Hint: LE is NC 1 reducible to LI since Ax b and Ax b if and only if Ax = b. Thus LE is in P. <p> A.4.3 Linear Programming (*) (LP) Given: An integer n fi d matrix A, an integer n fi 1 vector b, and an integer 1 fi d vector c. Problem: Find a rational d fi 1 vector x such that Ax b and cx is maximized. Reference: <ref> [DLR79, Kha79, DR80, Val82a] </ref> Hint: LP is not in P , but is in FP by [Kha79]. Reduce LI to LP by picking any cost vector c, say c = ~ 0, and checking whether the resulting linear program is feasible. <p> Problem: Find a rational d fi 1 vector x such that Ax b and cx is maximized. Reference: [DLR79, Kha79, DR80, Val82a] Hint: LP is not in P , but is in FP by <ref> [Kha79] </ref>. Reduce LI to LP by picking any cost vector c, say c = ~ 0, and checking whether the resulting linear program is feasible. Remarks: The original reduction in [DLR79] is from HORN, Problem A.6.2, to LP. <p> Two commodity flow (2CF) is defined like MaxFlow except there are two sources and two sinks, and there are two separate flows functions for the commodities. Since MaxFlow is a special case of 2CF and 2CF is in P by results of Itai [Ita78] and Khachian <ref> [Kha79] </ref>, it follows that 2CF is P -complete. Itai defined several other variants of 2CF that are also P -complete. They are defined below. (l; u)-2CF is a case of 2CF in which there are lower and upper bounds on the capacity of each edge. <p> A homologous flow is a flow in which pairs of edges are required to have the same flow. Reference: [Ita78] Hint: It follows that HF is in P by the results of Itai [Ita78] and Khachian <ref> [Kha79] </ref>. We describe the reduction given by Itai [Ita78] and note that it is a log space reduction. The reduction is from [1,1] LE.
Reference: [Khu89] <author> S. Khuller. </author> <title> On computing graph closures. </title> <journal> Information Processing Letters, </journal> <volume> 31(5) </volume> <pages> 249-255, </pages> <year> 1989. </year>
Reference-contexts: The edges in E 0 are called admissible edges. Reference: <ref> [Khu89] </ref> Hint: An O (n 3 ) algorithm solving the problem is given in [Khu89]. The reduction is from MCVP, Problem A.1.3. The idea is to replace gates in the circuit by gadgets. We will describe only the gadgets for inputs and and gates. <p> The edges in E 0 are called admissible edges. Reference: <ref> [Khu89] </ref> Hint: An O (n 3 ) algorithm solving the problem is given in [Khu89]. The reduction is from MCVP, Problem A.1.3. The idea is to replace gates in the circuit by gadgets. We will describe only the gadgets for inputs and and gates. The gadgets for or gates are similar. <p> Problem: Is e in the closure of G? That is, the graph obtained from G by repeatedly joining non-adjacent pairs of vertices u and v whose degree sum is at least jV j. Reference: <ref> [Khu89] </ref> Remarks: With the following modification, the problem becomes P -complete (Problem A.2.16): add a set of designated edges E 0 such that only vertices whose degree sum is at least jV j and whose corresponding edge is in E 0 may be added to the closure [Khu89]. <p> Reference: <ref> [Khu89] </ref> Remarks: With the following modification, the problem becomes P -complete (Problem A.2.16): add a set of designated edges E 0 such that only vertices whose degree sum is at least jV j and whose corresponding edge is in E 0 may be added to the closure [Khu89]. B.2.4 Restricted Lexicographically First Independent Set (RLFMIS) Given: A planar, bipartite graph G with a numbering on the vertices. Problem: Find the lexicographically first maximal independent set. Reference: [Miy89] 92 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Remarks: See Problem A.2.1.
Reference: [KKS91] <author> Dimitris Kavadias, Lefteris M. Kirousis, and Paul Spirakis. </author> <title> the complexity of the reliable connectivity problem. </title> <journal> Information Processing Letters, </journal> <volume> 39 </volume> <pages> 245-252, </pages> <year> 1991. </year>
Reference-contexts: Part II: Open Problems * 97 C Undigested Papers Listed below are a few papers we are aware of, but have not yet added to the main problem lists. They will appear in the final version. <ref> [KKS91, KS88] </ref>
Reference: [KLS89] <author> G. A. P. Kindervater, J. K. Lenstra, and D. B. Shmoys. </author> <title> The parallel complexity of TSP heuristics. </title> <journal> Journal of Algorithms, </journal> <volume> 10(2) </volume> <pages> 249-270, </pages> <year> 1989. </year>
Reference-contexts: Problem: Does the nearest neighbor tour starting at s visit l as the last vertex before completing the tour at s? The nearest neighbor tour is a greedy heuristic that always chooses the nearest unvisited vertex as the next vertex on the tour. Reference: <ref> [KLS89] </ref> Hint: Reduce NNTSH to NAND CVP. Without loss of generality, assume the gates are numbered in topological order. Gate k with inputs i 1 and i 2 , and outputs o 1 and o 2 is replaced by the gadget described below. <p> Remarks: The nearest merger, nearest insertion, cheapest insertion, and farthest insertion heuristics are all P -complete <ref> [KLS89] </ref>. The double minimum spanning tree and nearest addition heuristics are in NC [KLS89]. A.2.13 Lexicographically First Maximal Subgraph for (LFMS ()) Given: A graph G = (V; E) with an ordering on V , a designated vertex v, and a polyno mial time testable, nontrivial, hereditary property . <p> Remarks: The nearest merger, nearest insertion, cheapest insertion, and farthest insertion heuristics are all P -complete <ref> [KLS89] </ref>. The double minimum spanning tree and nearest addition heuristics are in NC [KLS89]. A.2.13 Lexicographically First Maximal Subgraph for (LFMS ()) Given: A graph G = (V; E) with an ordering on V , a designated vertex v, and a polyno mial time testable, nontrivial, hereditary property .
Reference: [KN88] <author> M. Karchmer and J. Naor. </author> <title> A fast parallel algorithm to color a graph with colors. </title> <journal> Journal of Algorithms, </journal> <volume> 9(1) </volume> <pages> 83-91, </pages> <year> 1988. </year>
Reference-contexts: The + 1 vertex coloring is NC 1 reducible to finding a maximal independent set [Lub84], but the maximal independent set algorithm [KW85] does not produce the lexicographically first maximal independent set. It is possible to color a graph with colors in NC <ref> [KN88, HS87, BK86] </ref>, although the coloring produced is not the lexicographically first. There is an NC algorithm for 5 coloring planar graphs [Nao87]. A.2.7 High Degree Subgraph (HDS) Given: A graph G = (V; E) and an integer k.
Reference: [Ko90] <author> K. Ko. </author> <title> Inverting a one-to-one real function is inherently sequential. </title> <editor> In S. Buss and P. Scott, editors, </editor> <booktitle> In Feasible Mathematics, A Mathematical Sciences Institute Workshop, </booktitle> <pages> pages 239-257. </pages> <publisher> Birkhauser, </publisher> <address> Ithaca, New York, </address> <year> 1990. </year>
Reference-contexts: A real function f is in NC if an approximation to f (x) with error &lt; 2 n , for x 2 [2 n ; +2 n ], can be computed in NC . Problem: Compute x 0 with error &lt; 2 n . Reference: <ref> [Ko90] </ref> Hint: Map intermediate configurations of a log space DTM onto the real line. Remarks: This problem was expressed originally in terms of log space computability and reductions | if f is log space computable then f 1 (0) is not log space computable unless DLOG = P .
Reference: [Kos90] <author> S. Rao Kosaraju. </author> <title> On the parallel evaluation of classes of circuits. </title> <editor> In K. V. Nori and C. E. Veni Madhavan, editors, </editor> <booktitle> Foundations of Software Technology and Theoretical Computer Science, volume 472 of Lecture Notes in Computer Science, </booktitle> <pages> pages 232-237. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: In fact, the monotone version of PCVP is in LOGCFL NC 2 [DC80, DC89, Gol80] when all inputs appear on one face of the planar embedding. The more general problem where inputs may appear anywhere is also known to be in NC <ref> [Kos90, DK91] </ref>. A.1.8 Arithmetic Circuit Value Problem (*) (ArithCVP) Given: An encoding of an arithmetic circuit ff with dyadic operations +; ; fl and inputs x 1 ; : : : ; x n from a ring.
Reference: [Koz77] <author> D. Kozen. </author> <title> Complexity of finitely presented algebras. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 164-177, </pages> <address> Boulder, CO, </address> <month> May </month> <year> 1977. </year> <title> 106 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: </title> <publisher> 1.46) </publisher>
Reference-contexts: Let t denote the set of terms. is a set of unordered pairs of terms called axioms. is the smallest congruence relation on t satisfying the axioms of . Problem: Is x y? Reference: <ref> [Koz77] </ref> Hint: A polynomial time algorithm for the problem is given in [Koz77]. The reduction is from the monotone circuit value problem, Problem A.1.3. <p> Let t denote the set of terms. is a set of unordered pairs of terms called axioms. is the smallest congruence relation on t satisfying the axioms of . Problem: Is x y? Reference: <ref> [Koz77] </ref> Hint: A polynomial time algorithm for the problem is given in [Koz77]. The reduction is from the monotone circuit value problem, Problem A.1.3. <p> B is in MCVP if and only if C n 1. A.8.19 Triviality Problem for Finitely Presented Algebras (TPFPA) Given: A finitely presented algebra A = (M; A; ). See Problem A.8.18 for definitions. Problem: Is A trivial ? That is, does it contain only one element. Reference: <ref> [Koz77] </ref> Hint: A polynomial time algorithm for the problem is given in [Koz77]. The reduction is from MCVP. Construct as done in the proof hint for Problem A.8.18. Let 0 = [ fC n 0g. <p> A.8.19 Triviality Problem for Finitely Presented Algebras (TPFPA) Given: A finitely presented algebra A = (M; A; ). See Problem A.8.18 for definitions. Problem: Is A trivial ? That is, does it contain only one element. Reference: <ref> [Koz77] </ref> Hint: A polynomial time algorithm for the problem is given in [Koz77]. The reduction is from MCVP. Construct as done in the proof hint for Problem A.8.18. Let 0 = [ fC n 0g. <p> Let [x] = fy 2 t j x yg. See Problem A.8.18 for definitions. Problem: Is [y] contained in the subalgebra generated by [x 1 ]; : : : ; [x n ]? Reference: <ref> [Koz77] </ref> Part II: P -Complete Problems * 81 Hint: A polynomial time algorithm for the problem is given in [Koz77]. This problem is a general formulation of GEN, Problem A.6.5, and so it follows that it is also P -complete. <p> See Problem A.8.18 for definitions. Problem: Is [y] contained in the subalgebra generated by [x 1 ]; : : : ; [x n ]? Reference: <ref> [Koz77] </ref> Part II: P -Complete Problems * 81 Hint: A polynomial time algorithm for the problem is given in [Koz77]. This problem is a general formulation of GEN, Problem A.6.5, and so it follows that it is also P -complete. A.8.21 Finiteness Problem for Finitely Presented Algebras (FPFPA) Given: A finitely presented algebra A = (M; A; ). See Problem A.8.18 for definitions. Problem: Is A finite? Reference: [Koz77] Hint: <p> in <ref> [Koz77] </ref>. This problem is a general formulation of GEN, Problem A.6.5, and so it follows that it is also P -complete. A.8.21 Finiteness Problem for Finitely Presented Algebras (FPFPA) Given: A finitely presented algebra A = (M; A; ). See Problem A.8.18 for definitions. Problem: Is A finite? Reference: [Koz77] Hint: A polynomial time algorithm for the problem is given in [Koz77]. The reduc tion is from MCVP and is similar to that used in Problem A.8.19. <p> A.8.21 Finiteness Problem for Finitely Presented Algebras (FPFPA) Given: A finitely presented algebra A = (M; A; ). See Problem A.8.18 for definitions. Problem: Is A finite? Reference: <ref> [Koz77] </ref> Hint: A polynomial time algorithm for the problem is given in [Koz77]. The reduc tion is from MCVP and is similar to that used in Problem A.8.19.
Reference: [KR89] <author> H. J. Karloff and W. L. Ruzzo. </author> <title> The iterated mod problem. </title> <journal> Information and Computation, </journal> <volume> 80(3) </volume> <pages> 193-204, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: This question is open. A.8.5 Iterated Mod (IM) Given: Integers a; b 1 ; : : : ; b n . Problem: Is (( ((a mod b 1 ) mod b 2 ) ) mod b n ) = 0? Reference: <ref> [KR89] </ref> Hint: Reduce NAND CVP to IM. Without loss of generality, assume the gates are numbered in reverse topological order from G down to 1, where the output gate is numbered 1. <p> which a (x); b 1 (x); : : : ; b n (x) are univariate polynomials over a field F and the question is to determine if (( ((a (x) mod b 1 (x)) mod b 2 (x)) ) mod b n (x)) = 0: This problem is in NC <ref> [KR89] </ref>. The proof technique used to show IM is P -complete can be modified to show the superincreasing knapsack problem is also P -complete [KR89]. <p> to determine if (( ((a (x) mod b 1 (x)) mod b 2 (x)) ) mod b n (x)) = 0: This problem is in NC <ref> [KR89] </ref>. The proof technique used to show IM is P -complete can be modified to show the superincreasing knapsack problem is also P -complete [KR89].
Reference: [KR90] <author> R. M. Karp and V. Ramachandran. </author> <title> Parallel algorithms for shared-memory machines. </title> <editor> In Jan van Leeuwan, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A: Algorithms and Complexity, chapter 17, </booktitle> <pages> pages 869-941. </pages> <publisher> M.I.T. </publisher> <address> Press/Elsevier, </address> <year> 1990. </year>
Reference-contexts: Problem: Find a subcollection D = D 1 ; : : : ; D k of pairwise disjoint members of C such that for every set S 2 C D there is a T 2 D, such that S " T 6= . Reference: <ref> [BL90, KR90] </ref> Remarks: If C is a collection of two element sets ("dimension 2") then the problem becomes the maximal independent set problem, which is known to be in NC (see Problem A.2.1).
Reference: [KS88] <author> Lefteris M. Kirousis and Paul Spirakis. </author> <title> Probabilistic log-space reductions and problems prababilistically hard for p. </title> <booktitle> In Proceedings, SWAT, volume 318 of Lecture Notes in Computer Science, </booktitle> <pages> pages 163-175. </pages> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: Part II: Open Problems * 97 C Undigested Papers Listed below are a few papers we are aware of, but have not yet added to the main problem lists. They will appear in the final version. <ref> [KKS91, KS88] </ref>
Reference: [KSS89] <author> L. Kirousis, M. Serna, and P. Spirakis. </author> <title> The parallel complexity of the subgraph connectivity problem. </title> <booktitle> In 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 294-299, </pages> <address> Research Triangle Park, NC, </address> <month> October </month> <year> 1989. </year> <note> IEEE. </note>
Reference-contexts: See remarks for Problem A.2.6. A.2.8 High Connectivity Subgraph (HCS) Given: A graph G = (V; E) and an integer k. Problem: Does G contain a vertex induced subgraph of vertex (edge) connectivity at least k? Reference: <ref> [KSS89, Ser90] </ref> Hint: The reduction is from MCVP and is similar to that used to prove Problem A.2.7, the high degree subgraph problem, is P -complete. Remarks: Approximation algorithms for this problem exhibit a threshold type behavior.
Reference: [KUW85] <author> R. M. Karp, E. Upfal, and A. Wigderson. </author> <title> Constructing a perfect matching is in random NC. </title> <booktitle> In Proceedings of the Seventeenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 22-32, </pages> <address> Providence, RI, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Remarks: The matching constructed by the search is not necessarily maximal. The problem of finding a maximum matching is in RNC [MVV87]. The problem of finding a perfect matching is also in RNC <ref> [KUW85, MVV87] </ref>. 62 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) A.4 Combinatorial Optimization and Flow Problems A.4.1 Linear Inequalities (LI) Given: An integer n fi d matrix A and an integer n fi 1 vector b.
Reference: [KUW86] <author> R. M. Karp, E. Upfal, and A. Wigderson. </author> <title> Constructing a maximum matching is in random NC. </title> <journal> Combinatorica, </journal> <volume> 6(1) </volume> <pages> 35-48, </pages> <year> 1986. </year>
Reference-contexts: Remarks: This reduction produces exponential edge capacities in G. In a network with edge capacities expressed in unary, computing the magnitude of the maximum flow is in RNC 2 [Fea84] and a method for finding the flow in RNC is also known <ref> [KUW86] </ref>. If the network is restricted to being acyclic MaxFlow remains P -complete [Ram87]. Flows in planar networks can be computed in NC [JV82]. Two commodity flow (2CF) is defined like MaxFlow except there are two sources and two sinks, and there are two separate flows functions for the commodities. <p> Problem: Compute the factorization of p over Q. Reference: [Gat84] Remarks: UPFQ is NC 1 reducible to short vectors (Problem B.1.6) [Gat84]. B.2 Graph Theory Problems B.2.1 Edge-Weighted Matching (EWM) Given: A graph G with positive integer weights on its edges. Problem: Find a matching of maximum weight. Reference: <ref> [KUW86] </ref> Remarks: EWM is in RNC (but not known to be in NC ) if all weights are polynomially bounded [KUW86]. LFMM, Problem B.4.2 (and hence all of CC ), is NC reducible to EWM, by assigning weight 2 rank (e) to edge e. <p> B.2 Graph Theory Problems B.2.1 Edge-Weighted Matching (EWM) Given: A graph G with positive integer weights on its edges. Problem: Find a matching of maximum weight. Reference: <ref> [KUW86] </ref> Remarks: EWM is in RNC (but not known to be in NC ) if all weights are polynomially bounded [KUW86]. LFMM, Problem B.4.2 (and hence all of CC ), is NC reducible to EWM, by assigning weight 2 rank (e) to edge e. B.2.2 Bounded Degree Graph Isomorphism (BDGI) Given: Two graphs G and H. <p> For DAGs, DFS is in NC [Gre88a]. B.5.2 0-1 Maximum Flow (0-1 MaxFlow) Given: Directed graph G with each edge labeled in unary with a capacity c i 0 and two distinguished vertices, source s and sink t. Problem: Find a maximum flow. Reference: <ref> [Fea84, KUW86] </ref> Remarks: [Fea84] shows the problem of finding the value of the maximum flow to be in RNC . [KUW86] show how to construct a maximum flow, also in RNC . <p> Problem: Find a maximum flow. Reference: [Fea84, KUW86] Remarks: [Fea84] shows the problem of finding the value of the maximum flow to be in RNC . <ref> [KUW86] </ref> show how to construct a maximum flow, also in RNC . Both problems remain in RNC when capacities are polynomially bounded, but are P -complete when capacities are arbitrary (Problem A.4.4). Venkateswaran [Ven90] shows that 0-1 MaxFlow is hard for AC 1 . <p> Problem: Find a maximum matching of G. A matching is a subset of the edges of G such that no two edges of the subset are adjacent in G. A matching is a maximum matching if no matching of larger cardinality exists. Reference: <ref> [Fea84, KUW86, MVV87] </ref> Remarks: Feather [Fea84] shows that the problem of finding the size of maximum matching is in RNC . Karp, Upfal, and Wigderson [KUW86] gave the first RNC algorithm for finding the maximum matching. A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87]. <p> A matching is a maximum matching if no matching of larger cardinality exists. Reference: [Fea84, KUW86, MVV87] Remarks: Feather [Fea84] shows that the problem of finding the size of maximum matching is in RNC . Karp, Upfal, and Wigderson <ref> [KUW86] </ref> gave the first RNC algorithm for finding the maximum matching. A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87]. Karloff shows how any RNC algorithm for matching can be made errorless [Kar86]. <p> A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87]. Karloff shows how any RNC algorithm for matching can be made errorless [Kar86]. Maximum edge-weighted matching for unary edge weights and maximum vertex-weighted matching for binary vertex weights are also known to be in RNC <ref> [KUW86, MVV87] </ref>. B.5.4 Perfect Matching Existence (PME) Given: A graph G. 96 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Problem: Does G have a perfect matching? A perfect matching is a matching where each vertex is incident to one edge in the matching. Reference: [KUW86, MVV87] <p> RNC <ref> [KUW86, MVV87] </ref>. B.5.4 Perfect Matching Existence (PME) Given: A graph G. 96 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Problem: Does G have a perfect matching? A perfect matching is a matching where each vertex is incident to one edge in the matching. Reference: [KUW86, MVV87] Remarks: See remarks for Problem B.5.3. PME seems to be the simplest of the matching problems not known to be in NC .
Reference: [KUW88] <author> R. M. Karp, E. Upfal, and A. Wigderson. </author> <title> The complexity of parallel search. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36 </volume> <pages> 225-253, </pages> <year> 1988. </year>
Reference: [KW85] <author> R. M. Karp and A. Wigderson. </author> <title> A fast parallel algorithm for the maximal independent set problem. </title> <journal> Journal of the ACM, </journal> <volume> 32(4) </volume> <pages> 762-773, </pages> <year> 1985. </year>
Reference-contexts: Computing or approximating the size of the lexicographically first maximal independent set is also P - complete; see Section 6.2. Karp and Wigderson gave the first NC algorithm for finding a maximal independent set <ref> [KW85] </ref>, subsequently improved by Luby [Lub86], by Alon, Babai and Itai [ABI86], and by Goldberg and Spencer [GS89]. These algorithms do not compute the lexicographically first maximal independent set. <p> However, this is not necessarily the lexicographically first. The + 1 vertex coloring is NC 1 reducible to finding a maximal independent set [Lub84], but the maximal independent set algorithm <ref> [KW85] </ref> does not produce the lexicographically first maximal independent set. It is possible to color a graph with colors in NC [KN88, HS87, BK86], although the coloring produced is not the lexicographically first. There is an NC algorithm for 5 coloring planar graphs [Nao87].
Reference: [Lad75] <author> R. E. Ladner. </author> <title> The circuit value problem is log space complete for P. </title> <journal> SIGACT News, </journal> <volume> 7(1) </volume> <pages> 18-20, </pages> <month> January </month> <year> 1975. </year>
Reference-contexts: A.1.1 Circuit Value Problem (CVP) Given: An encoding ff of a Boolean circuit ff plus inputs x 1 ; : : : ; x n . Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [Lad75] </ref> Hint: A proof is given in Section 5 of this paper. <p> If G is acyclic then the problem is complete for SAC 1 = LOGCFL [Ruz79]. A.7.8 Two-Way DPDA Acceptance (2DPDA) Given: A two-way deterministic pushdown automaton M and a string x. Problem: Is x accepted by M ? Reference: <ref> [Coo71a, Gal74, Gal77, Lad75] </ref> Hint: See, e.g., [HU79] for a definition of 2DPDAs. Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. <p> Galil [Gal74, Gal77] shows existence of a P -complete language accepted by a 2DPDA, in effect showing that the logarithmic space worktape isn't crucial to Cook's simulation. (See also [Sud78] for a general reduction of auxiliary PDAs to ordinary PDAs.) Ladner <ref> [Lad75] </ref> gives a much more direct proof by observing that a suitably encoded version of CVP is solvable by a 2DPDA, basically by doing a depth first search of the circuit, using the stack for backtracking. Remarks: Remains in P when generalized to nondeterministic and/or logarithmic space auxiliary PDAs [Coo71a].
Reference: [Law76] <author> E. L. Lawler. </author> <title> Combinatorial Optimization: Networks and Matroids. </title> <publisher> Holt, Rine-hart and Winston, </publisher> <address> New York, </address> <year> 1976. </year>
Reference: [L'E82] <editor> Logic and Algorithmic, </editor> <booktitle> An International Symposium Held in Honor of Ernst Specker, </booktitle> <address> Zurich, </address> <month> February 5-11, </month> <year> 1980. </year> <note> Monographie No. </note> <institution> 30 de L'Enseignement Mathematique, Universite de Geneve, </institution> <year> 1982. </year>
Reference: [Lei92] <author> F. Thomas Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [LF80] <author> R. E. Ladner and M. J. Fischer. </author> <title> Parallel prefix computation. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 831-838, </pages> <month> October </month> <year> 1980. </year>
Reference: [LLL82] <author> A. K. Lenstra, H. W. Lenstra, Jr., and L. Lovasz. </author> <title> Factoring polynomials with rational coefficients. </title> <journal> Mathematische Annalen, </journal> <volume> 261 </volume> <pages> 513-534, </pages> <year> 1982. </year> <note> References * 107 </note>
Reference-contexts: Reference: [Gat84] Remarks: Lenstra, Lenstra, and Lovasz <ref> [LLL82] </ref> show that the problem is in P . Inte gerGCD, Problem B.1.1, is NC 1 reducible to SV [Gat84]. B.1.7 Short Vectors Dimension 2 (SV2) Given: Input vectors a 1 ; a 2 2 Z 2 that are linearly independent over Q, and an arbitrary number c 1.
Reference: [LMR86] <author> G. S. Lueker, N. Megiddo, and V. Ramachandran. </author> <title> Linear programming with two variables per inequality in poly-log time. </title> <booktitle> In Proceedings of the Eighteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 196-205, </pages> <address> Berkeley, CA, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: B.1.9 Two Variable Linear Programming (TVLP) Given: A linear system of inequalities Ax b over the rationals, where each row of A has at most two nonzero elements. Problem: Find a feasible solution if one exists. Reference: <ref> [LMR86] </ref> Part II: Open Problems * 91 Remarks: There is a known poly-log algorithm that uses n log k n processors on a CREW-PRAM [LMR86]. B.1.10 Univariate Polynomial Factorization over Q (UPFQ) Given: An n th degree polynomial p 2 Q [x]. Problem: Compute the factorization of p over Q. <p> Problem: Find a feasible solution if one exists. Reference: <ref> [LMR86] </ref> Part II: Open Problems * 91 Remarks: There is a known poly-log algorithm that uses n log k n processors on a CREW-PRAM [LMR86]. B.1.10 Univariate Polynomial Factorization over Q (UPFQ) Given: An n th degree polynomial p 2 Q [x]. Problem: Compute the factorization of p over Q. Reference: [Gat84] Remarks: UPFQ is NC 1 reducible to short vectors (Problem B.1.6) [Gat84].
Reference: [LP82] <author> H. R. Lewis and C. H. Papadimitriou. </author> <title> Symmetric space-bounded computation. </title> <journal> Theoretical Computer Science, </journal> <volume> 19 </volume> <pages> 161-187, </pages> <year> 1982. </year>
Reference-contexts: When restricted to undirected graphs with only existential nodes, this problem is equivalent to the "undi-rected graph accessibility problem," called "UGAP" or "USTCON," which is known to be complete for the special case of nondeterministic log space known as symmetric log space (SL) <ref> [LP82] </ref>. A.2.4 Hierarchical Graph Accessibility Problem (HGAP) Given: A hierarchical graph G = (V; E) and two designated vertices s and t. A hierarchical graph = (G 1 ; : : : ; G k ) consists of k subcells G i , 1 i k.
Reference: [LR89] <author> Tak Wah Lam and Walter L. Ruzzo. </author> <title> The power of parallel pointer manipulation. </title> <booktitle> In Proceedings of the 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 92-102, </pages> <address> Santa Fe, NM, </address> <month> June </month> <year> 1989. </year>
Reference: [LSH65] <author> P. M. Lewis, R. E. Stearns, and J. Hartmanis. </author> <title> Memory bounds for recognition of context-free and context-sensitive languages. </title> <booktitle> In Proc. 6 th IEEE Symp. on Switching Theory and Logic Design, </booktitle> <pages> pages 191-202. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1965. </year>
Reference-contexts: It follows that * 2 L (G) if and only if w is generated by V . Remarks: Goldschlager remarks it is the presence of *-productions in the input grammar that make the membership question difficult [Gol81]. Lewis, Stearns, and Hartmanis' log 2 n space algorithm <ref> [LSH65] </ref> and Ruzzo's AC 1 (hence NC 2 ) algorithm [Ruz80] for general context free language recognition can both be modified to work with an *-free grammar given as part of the input. A.7.2 Context-Free Grammar Empty (CFGempty) Given: A context-free grammar G = (N; T; P; S).
Reference: [LT82] <author> T. Lengauer and R. E. Tarjan. </author> <title> Asymptotically tight bounds on time-space trade-offs in a pebble game. </title> <journal> Journal of the ACM, </journal> <volume> 29(4) </volume> <pages> 1087-1130, </pages> <month> October </month> <year> 1982. </year>
Reference: [Lub84] <author> M. Luby. </author> <title> Private communication, </title> <year> 1984. </year>
Reference-contexts: If c i is the color of v i , where c i 2 f1; : : : ; + 1g, then each coloring corresponds to a ( + 1)-ary number, and the least coloring is well-defined. Part II: P -Complete Problems * 53 Reference: <ref> [Lub84] </ref> Hint: Computing the lexicographically least coloring is easily done in polynomial time by examining each vertex in order and coloring it with the smallest available color. To show completeness, reduce NANDCVP to LFDVC. The coloring will correspond to evaluating the circuit in topological order. <p> For graphs that are not an odd cycle or complete, a coloring can be found in polynomial time (Brook's theorem, see [BM76]). However, this is not necessarily the lexicographically first. The + 1 vertex coloring is NC 1 reducible to finding a maximal independent set <ref> [Lub84] </ref>, but the maximal independent set algorithm [KW85] does not produce the lexicographically first maximal independent set. It is possible to color a graph with colors in NC [KN88, HS87, BK86], although the coloring produced is not the lexicographically first.
Reference: [Lub86] <author> M. Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(4) </volume> <pages> 1036-1053, </pages> <year> 1986. </year>
Reference-contexts: Computing or approximating the size of the lexicographically first maximal independent set is also P - complete; see Section 6.2. Karp and Wigderson gave the first NC algorithm for finding a maximal independent set [KW85], subsequently improved by Luby <ref> [Lub86] </ref>, by Alon, Babai and Itai [ABI86], and by Goldberg and Spencer [GS89]. These algorithms do not compute the lexicographically first maximal independent set.
Reference: [LW87] <author> T. Lengauer and K. W. Wagner. </author> <title> The correlation between the complexities of the nonhierarchical and hierarchical versions of graph problems. </title> <booktitle> In 4th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 100-113, </pages> <year> 1987. </year>
Reference-contexts: Since ASPACE (log n) = P [CKS81], this showed AGAP was P -complete too. When this problem is generalized to hierarchical graphs it remains in P , provided the graph is "breadth-first ordered;" see <ref> [LW87] </ref>. The proof sketched above also shows that the problem remains P -complete when the partition (A; B) induces a bipartite graph. <p> The graph is expanded by expanding cell G k recursively. To expand subcell G i expand its subcells G 1 ; : : : ; G i1 recursively and replace each nonterminal of v of type j with a copy of the expansion of subcell G j . Reference: <ref> [LW87] </ref> Hint: The reduction is from the alternating graph accessibility problem, Problem A.2.3. Remarks: Hierarchical versions of the following problems are also P -complete: graph accessibility in undirected graphs, determining whether a directed graph contains a cycle, and determining whether a given graph is bipartite [LW87]. <p> Reference: <ref> [LW87] </ref> Hint: The reduction is from the alternating graph accessibility problem, Problem A.2.3. Remarks: Hierarchical versions of the following problems are also P -complete: graph accessibility in undirected graphs, determining whether a directed graph contains a cycle, and determining whether a given graph is bipartite [LW87]. There are several other very restricted versions of hierarchical graph problems that are P -complete [LW87]. <p> Remarks: Hierarchical versions of the following problems are also P -complete: graph accessibility in undirected graphs, determining whether a directed graph contains a cycle, and determining whether a given graph is bipartite <ref> [LW87] </ref>. There are several other very restricted versions of hierarchical graph problems that are P -complete [LW87]. <p> Reference: <ref> [LW87] </ref> Hint: There is a trivial reduction from the alternating graph accessibility problem, Problem A.2.3. Membership of RCAGAP in P follows from membership of AGAP in P , since there are at most 2 k jV j possible sets of colors to try. <p> Membership of RCAGAP in P follows from membership of AGAP in P , since there are at most 2 k jV j possible sets of colors to try. Remarks: The problem remains P -complete if the vertices are restricted to being breadth first ordered <ref> [LW87] </ref>. When generalized to hierarchical graphs, the problem becomes NP - complete [LW87]. <p> Remarks: The problem remains P -complete if the vertices are restricted to being breadth first ordered <ref> [LW87] </ref>. When generalized to hierarchical graphs, the problem becomes NP - complete [LW87]. <p> Problem: Is there a feasible flow of value k, i.e. is the value of the maximum flow into the sink f ? Reference: <ref> [GSS82, LW87] </ref> Hint: The first P -completeness proof for a decision problem derived from maximum flow was for the problem of determining whether the flow is odd or even [GSS82]. <p> We give this reduction. (The proof given in <ref> [LW87] </ref> for the more natural threshold problem stated above is similar.) The reduction is from AM2CVP (Problem A.1.4) to MaxFlow. Gates v i and connections e ij of ff are associated with nodes v 0 i and edges e 0 ij of G.
Reference: [LZ77] <author> Richard J. Lipton and Yechezkel Zalcstein. </author> <title> Word problems solvable in log space. </title> <journal> Journal of the ACM, </journal> <volume> 24(3) </volume> <pages> 522-526, </pages> <year> 1977. </year>
Reference-contexts: When k = 2 the problems are complete for symmetric log space (SL). The word problem for a free group is to decide whether x equals the empty word in F . This problem is solvable in deterministic log space <ref> [LZ77] </ref>. A.8.7 Subgroup Containment (SC) Given: Let S be a finite set and F be the free group generated by S. Let S = fs; s 1 js 2 Sg, where s 1 denotes the inverse of s. Let S fl denote the set of all finite words over S.
Reference: [McC81] <author> W. F. McColl. </author> <title> Planar crossovers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(3), </volume> <year> 1981. </year>
Reference-contexts: Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [Gol77, McC81] </ref> Hint: Reduce CVP to PCVP. Lay out the circuit and use cross-over circuits to replace crossing lines with a planar subcircuit. A planar xor circuit can be built from two each ^; _; : gates; a planar cross-over circuit can be built from three planar xor circuits.
Reference: [Miy89] <author> Satoru Miyano. </author> <title> The lexicographically first maximal subgraph problems: P-completeness and NC algorithms. </title> <journal> Mathematical Systems Theory, </journal> <volume> 22(1) </volume> <pages> 47-73, </pages> <year> 1989. </year>
Reference-contexts: Problem: Is vertex v in the lexicographically first maximal independent set of G? Reference: [Coo85] Hint: A proof is given in Section 6.3.1. Remarks: This is an instance of Problem A.2.13. LFMIS is P -complete for bipartite or planar graphs restricted to degree at most 3 <ref> [Miy89] </ref>. Karp observed that the completeness of LFMIS implies that determining the i th node chosen by any deterministic sequential algorithm for either LFMIS or LFMC (Problem A.2.2) is also complete [Kar84]. <p> A property is hereditary on induced subgraphs if whenever G satisfies so do all vertex induced subgraphs. Problem: Is v in the lexicographically first maximal subgraph H of G that satisfies ? Reference: <ref> [Miy89] </ref> Hint: Given a property that is nontrivial and hereditary, Ramsey's theorem implies that either is satisfied by all cliques or by all independent sets of vertices. <p> B.2.4 Restricted Lexicographically First Independent Set (RLFMIS) Given: A planar, bipartite graph G with a numbering on the vertices. Problem: Find the lexicographically first maximal independent set. Reference: <ref> [Miy89] </ref> 92 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Remarks: See Problem A.2.1. Finding the lexicographically first maximal subgraph of maximum degree one in planar, bipartite graphs of degree at most three is P - complete [Miy89]. <p> Reference: <ref> [Miy89] </ref> 92 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Remarks: See Problem A.2.1. Finding the lexicographically first maximal subgraph of maximum degree one in planar, bipartite graphs of degree at most three is P - complete [Miy89]. B.2.5 Maximal Path (MP) Given: A graph G with a numbering on the vertices and a designated vertex r. Problem: Find a maximal path originating from r. That is, a path that cannot be extended without encountering a node already on the path.
Reference: [MR85] <author> G. L. Miller and J. H. Reif. </author> <title> Parallel tree contraction and its applications. </title> <booktitle> In 26th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 478-489, </pages> <address> Portland, OR, </address> <month> October </month> <year> 1985. </year> <note> IEEE. </note>
Reference: [MRK88] <author> G. L. Miller, V. Ramachandran, and E. Kaltofen. </author> <title> Efficient parallel evaluation of straight-line code and arithmetic circuits. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 687-695, </pages> <year> 1988. </year> <title> 108 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: </title> <publisher> 1.46) </publisher>
Reference-contexts: degree 2 log O (1) , where the degree of a node is 1 for inputs, and d 1 + d 2 (max (d 1 ; d 2 )) when the node is product (respectively, sum) of the values computed by two nodes of degree d 1 and d 2 <ref> [VSBR83, MRK88] </ref>. A.1.9 Min-Plus Circuit Value Problem (MinPlusCVP) Given: An encoding of a (min; +) circuit ff and rational inputs x 1 ; : : : ; x n .
Reference: [MS89] <author> E. W. Mayr and A. Subramanian. </author> <title> The complexity of circuit value and network stability. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Fourth Annual Conference, </booktitle> <pages> pages 114-123, </pages> <address> Eugene, OR, </address> <month> June </month> <year> 1989. </year> <note> IEEE. Full version appears as Stanford Technical Report STAN-CS-89-1278. </note>
Reference-contexts: See Problem A.9.3. B.4 CC Problems Several reseachers independently suggested looking at the complexity of the Comparator Circuit Value Problem, or CCVP (Problem B.4.1). CC is the class of problems reducible to CCVP (Mayr and Subramanian <ref> [MS89] </ref>). Problems in this section are all equivalent to, 94 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) i.e. NC interreducible with, CCVP. <p> On the other hand, no fast parallel algorithms are known for them, with the partial exception of p n log O (1) n algorithms for CCVP and some related problems. (Such algorithms were independently discovered by D. Soroker, unpublished, and by Mayr and Subramanian <ref> [MS89] </ref>. Richard Anderson, also unpublished, has improved the algorithms so as to use only p n processors. Mayr and Subramanian note that these algorithms are P -complete, in the sense of Section ??.) It is known that NL CC P [MS89]. <p> Soroker, unpublished, and by Mayr and Subramanian <ref> [MS89] </ref>. Richard Anderson, also unpublished, has improved the algorithms so as to use only p n processors. Mayr and Subramanian note that these algorithms are P -complete, in the sense of Section ??.) It is known that NL CC P [MS89]. Most of the results described in this subsection come from [MS89]. See also [Sub90, Sub89, Fed89]. B.4.1 Comparator Circuit Value Problem (CCVP) Given: An encoding ff of a circuit ff composed of comparator gates plus inputs x 1 ; : : : ; x n . <p> Mayr and Subramanian note that these algorithms are P -complete, in the sense of Section ??.) It is known that NL CC P <ref> [MS89] </ref>. Most of the results described in this subsection come from [MS89]. See also [Sub90, Sub89, Fed89]. B.4.1 Comparator Circuit Value Problem (CCVP) Given: An encoding ff of a circuit ff composed of comparator gates plus inputs x 1 ; : : : ; x n . <p> The gate is further restricted so that each output has fanout at most one. Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [Coo, MS89] </ref> Remarks: Cook shows that CCVP is NC equivalent to computing the lexicographically first maximal matching in a bipartite graph. Mayr and Subramanian [MS89] show that this problem is NC equivalent to stable marriage (Problem B.4.3). <p> Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: [Coo, MS89] Remarks: Cook shows that CCVP is NC equivalent to computing the lexicographically first maximal matching in a bipartite graph. Mayr and Subramanian <ref> [MS89] </ref> show that this problem is NC equivalent to stable marriage (Problem B.4.3). B.4.2 Lexicographically First Maximal Matching (LFMM) Given: A graph G with an ordering on its edges. Problem: Find the lexicographically first maximal matching. Reference: [Coo, MS89] Remarks: LFMM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. <p> Mayr and Subramanian [MS89] show that this problem is NC equivalent to stable marriage (Problem B.4.3). B.4.2 Lexicographically First Maximal Matching (LFMM) Given: A graph G with an ordering on its edges. Problem: Find the lexicographically first maximal matching. Reference: <ref> [Coo, MS89] </ref> Remarks: LFMM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. This problem resembles the lexicographically first maximal independent set problem, Problem A.2.1, known to be P -complete. A P -completeness proof for LFMM would imply that edge-weighted matching (Problem B.2.1) is also P -complete. <p> Subramanian <ref> [MS89] </ref> show that this problem is NC equivalent to stable marriage (Problem B.4.3). B.4.2 Lexicographically First Maximal Matching (LFMM) Given: A graph G with an ordering on its edges. Problem: Find the lexicographically first maximal matching. Reference: [Coo, MS89] Remarks: LFMM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. This problem resembles the lexicographically first maximal independent set problem, Problem A.2.1, known to be P -complete. A P -completeness proof for LFMM would imply that edge-weighted matching (Problem B.2.1) is also P -complete. <p> Problem: Find n marriages such that the set of marriages is stable. The set is unstable if a man and woman exist who are not married to each other but prefer each other to their actual mates. Reference: <ref> [MS89] </ref> Remarks: See, e.g., [Gib85] for background on the Stable Marriage problem. SM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. Several variations on Stable Marriage are also known to be equivalent to CCVP; see [MS89]. <p> The set is unstable if a man and woman exist who are not married to each other but prefer each other to their actual mates. Reference: <ref> [MS89] </ref> Remarks: See, e.g., [Gib85] for background on the Stable Marriage problem. SM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. Several variations on Stable Marriage are also known to be equivalent to CCVP; see [MS89]. Part II: Open Problems * 95 B.5 RNC Problems The problems in this subsection are all known to be in RNC or FRNC , but not known to be in NC . <p> Reference: <ref> [MS89] </ref> Remarks: See, e.g., [Gib85] for background on the Stable Marriage problem. SM is NC equivalent to Comparator CVP (Problem B.4.1) [MS89]. Several variations on Stable Marriage are also known to be equivalent to CCVP; see [MS89]. Part II: Open Problems * 95 B.5 RNC Problems The problems in this subsection are all known to be in RNC or FRNC , but not known to be in NC .
Reference: [MVV87] <author> K. Mulmuley, U. V. Vazirani, and V. V. Vazirani. </author> <title> Matching is as easy as matrix inversion. </title> <journal> Combinatorica, </journal> <volume> 7(1) </volume> <pages> 105-113, </pages> <year> 1987. </year>
Reference-contexts: Remarks: The matching constructed by the search is not necessarily maximal. The problem of finding a maximum matching is in RNC <ref> [MVV87] </ref>. <p> Remarks: The matching constructed by the search is not necessarily maximal. The problem of finding a maximum matching is in RNC [MVV87]. The problem of finding a perfect matching is also in RNC <ref> [KUW85, MVV87] </ref>. 62 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) A.4 Combinatorial Optimization and Flow Problems A.4.1 Linear Inequalities (LI) Given: An integer n fi d matrix A and an integer n fi 1 vector b. <p> Problem: Find a maximum matching of G. A matching is a subset of the edges of G such that no two edges of the subset are adjacent in G. A matching is a maximum matching if no matching of larger cardinality exists. Reference: <ref> [Fea84, KUW86, MVV87] </ref> Remarks: Feather [Fea84] shows that the problem of finding the size of maximum matching is in RNC . Karp, Upfal, and Wigderson [KUW86] gave the first RNC algorithm for finding the maximum matching. A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87]. <p> Reference: [Fea84, KUW86, MVV87] Remarks: Feather [Fea84] shows that the problem of finding the size of maximum matching is in RNC . Karp, Upfal, and Wigderson [KUW86] gave the first RNC algorithm for finding the maximum matching. A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani <ref> [MVV87] </ref>. Karloff shows how any RNC algorithm for matching can be made errorless [Kar86]. Maximum edge-weighted matching for unary edge weights and maximum vertex-weighted matching for binary vertex weights are also known to be in RNC [KUW86, MVV87]. <p> A more efficient algorithm was given by Mulmuley, Vazirani, and Vazirani [MVV87]. Karloff shows how any RNC algorithm for matching can be made errorless [Kar86]. Maximum edge-weighted matching for unary edge weights and maximum vertex-weighted matching for binary vertex weights are also known to be in RNC <ref> [KUW86, MVV87] </ref>. B.5.4 Perfect Matching Existence (PME) Given: A graph G. 96 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Problem: Does G have a perfect matching? A perfect matching is a matching where each vertex is incident to one edge in the matching. Reference: [KUW86, MVV87] <p> RNC <ref> [KUW86, MVV87] </ref>. B.5.4 Perfect Matching Existence (PME) Given: A graph G. 96 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) Problem: Does G have a perfect matching? A perfect matching is a matching where each vertex is incident to one edge in the matching. Reference: [KUW86, MVV87] Remarks: See remarks for Problem B.5.3. PME seems to be the simplest of the matching problems not known to be in NC .
Reference: [Nao87] <author> J. Naor. </author> <title> A fast parallel coloring of planar graphs with five colors. </title> <journal> Information Processing Letters, </journal> <volume> 25(1) </volume> <pages> 51-53, </pages> <year> 1987. </year>
Reference-contexts: It is possible to color a graph with colors in NC [KN88, HS87, BK86], although the coloring produced is not the lexicographically first. There is an NC algorithm for 5 coloring planar graphs <ref> [Nao87] </ref>. A.2.7 High Degree Subgraph (HDS) Given: A graph G = (V; E) and an integer k. Problem: Does G contain a vertex induced subgraph with minimum degree at least k? Reference: [AM84a] Hint: Reduce AM2CVP to HDS.
Reference: [Ofm63] <author> Yu. P. Ofman. </author> <title> On the algorithmic complexity of discrete functions. </title> <journal> Soviet Physics Doklady, </journal> <volume> 7 </volume> <pages> 589-591, </pages> <year> 1963. </year>
Reference: [Pap78] <author> C. H. Papadimitriou. </author> <title> Efficient search for rationals. </title> <journal> Information Processing Letters, </journal> <volume> 8(1) </volume> <pages> 1-4, </pages> <year> 1978. </year>
Reference-contexts: Remarks: The original reduction in [DLR79] is from HORN, Problem A.6.2, to LP. In [DR80], LP and LI are shown to be log space equivalent by reducing LP to LI using rational binary search <ref> [Pap78, Rei78] </ref> to find the value of the maximum and an x that Part II: P -Complete Problems * 63 yields it. However, it is not clear how to perform this reduction in NC 1 .
Reference: [Par86] <author> Ian Parberry. </author> <title> Parallel speedup of sequential machines: A defense of the parallel computation thesis. </title> <journal> SIGACT News, </journal> <volume> 18(1) </volume> <pages> 54-67, </pages> <month> Summer </month> <year> 1986. </year>
Reference: [Par87] <author> Ian Parberry. </author> <title> Parallel Complexity Theory. </title> <booktitle> Research Notes in Theoretical Computer Science. </booktitle> <address> Pitman/Wiley, </address> <year> 1987. </year>
Reference-contexts: Remarks: For the two input basis of Boolean functions, it is known that CVP is P - complete except when the basis consists solely of or, consists solely of and, or consists of any or all of the following: xor, equivalence, and not <ref> [GP86, Par87] </ref>.
Reference: [PF79] <author> N. Pippenger and M. J. Fischer. </author> <title> Relations among complexity measures. </title> <journal> Journal of the ACM, </journal> <volume> 26(2) </volume> <pages> 361-381, </pages> <month> April </month> <year> 1979. </year>
Reference: [Pip77] <author> N. Pippenger. </author> <title> Fast simulation of combinational logic networks by machines without random-access storage. </title> <booktitle> Allerton Conference on Communication, Control and Computing, </booktitle> <volume> 15 </volume> <pages> 25-33, </pages> <month> September </month> <year> 1977. </year> <note> Also available as Research Report RC6582, </note> <institution> IBM Research Division, Thomas J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> June </month> <year> 1977. </year>
Reference: [Pip79] <author> N. Pippenger. </author> <title> On simultaneous resource bounds. </title> <booktitle> In 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 307-311, </pages> <address> San Juan, Puerto Rico, </address> <month> October </month> <year> 1979. </year> <note> IEEE. </note>
Reference: [Pip80] <author> N. Pippenger. Pebbling. </author> <booktitle> In Proceedings of the Fifth IBM Symposium on Mathematical Foundations of Computer Science. </booktitle> <address> IBM Japan, </address> <month> May </month> <year> 1980. </year>
Reference: [Pip81] <author> N. Pippenger. </author> <title> Pebbling with an auxiliary pushdown. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 23(2) </volume> <pages> 151-165, </pages> <month> October </month> <year> 1981. </year>
Reference: [Pla84] <author> D. A. Plaisted. </author> <title> Complete problems in the first-order predicate calculus. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 29(1) </volume> <pages> 8-35, </pages> <year> 1984. </year>
Reference-contexts: A.6.3 Propositional Horn Clause Satisfiability (PHCS) Given: A set S of Horn clauses in the propositional calculus. Problem: Is S satisfiable? Part II: P -Complete Problems * 69 Reference: <ref> [Pla84, Kas86] </ref> Hint: The reduction is straightforward from the alternating graph accessibility problem, Problem A.2.3. Remarks: The problem remains P -complete when there are at most 3 literals per clause [Pla84]. Plaisted has shown that two problems involving proofs of restricted depth are also P -complete. <p> Problem: Is S satisfiable? Part II: P -Complete Problems * 69 Reference: [Pla84, Kas86] Hint: The reduction is straightforward from the alternating graph accessibility problem, Problem A.2.3. Remarks: The problem remains P -complete when there are at most 3 literals per clause <ref> [Pla84] </ref>. Plaisted has shown that two problems involving proofs of restricted depth are also P -complete. They are the two literal Horn clause unique matching problem and the three literal Horn clause problem [Pla84]. <p> Remarks: The problem remains P -complete when there are at most 3 literals per clause <ref> [Pla84] </ref>. Plaisted has shown that two problems involving proofs of restricted depth are also P -complete. They are the two literal Horn clause unique matching problem and the three literal Horn clause problem [Pla84].
Reference: [Pos41] <author> E. Post. </author> <title> The Two-Valued Iterative Systems of Mathematical Logic. Number 5 in Annals of Math. Studies. </title> <publisher> Princeton University Press, </publisher> <year> 1941. </year>
Reference-contexts: Hint: Reduction of AM2CVP to NANDCVP. A proof is given in Section 5.2. Remarks: Any complete basis of gates suffices, by the obvious simulation of nand gates in the other basis. For example, nor gates form a complete basis. NOR CVP is defined analogously to NANDCVP. See Post <ref> [Pos41] </ref> for a characterization of complete bases. See the remarks for Problem A.1.1 for other bases, not necessarily complete, for which the associated circuit value problem is still complete.
Reference: [PS76] <author> V. R. Pratt and L. J. Stockmeyer. </author> <title> A characterization of the power of vector machines. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 12 </volume> <pages> 198-221, </pages> <year> 1976. </year> <note> References * 109 </note>
Reference: [PSY90] <author> C. H. Papadimitriou, A. A. Schaffer, and M. Yannakakis. </author> <title> On the complexity of local search. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 438-445, </pages> <address> Baltimore, MD, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Problem: Is the assignment s the maximum cost assignment of F over all neighbors of s? The cost of the assignment is the sum of the weights of the clauses it satisfies. The neighbors of s are assignments that differ from s in one bit position. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from NOR CVP. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.5.4 Unweighted MAXCUT/SWAP (UMS) Given: A graph G = (V; E) with weights of size 1 on the edges and a subset S V . <p> The neighbors of s are assignments that differ from s in one bit position. Reference: [PSY90, SY] Hint: The reduction is from NOR CVP. Remarks: The weighted version of the problem is PLS -complete <ref> [PSY90] </ref>. A.5.4 Unweighted MAXCUT/SWAP (UMS) Given: A graph G = (V; E) with weights of size 1 on the edges and a subset S V . <p> Problem: Is S the maximum cost subset of nodes, where the cost is the sum of the weights of the edges leaving nodes in S, over all neighbors of S? A neighbor of S is a set of size jSj whose symmetric difference with S contains one node. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from U3NSATFLIP, Problem A.5.3. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.5.5 Unweighted 2SAT/FLIP (U2SATFLIP) Given: A Boolean formula F in CNF with 2 literals per clause and a truth assignment s. Each clause has a weight of 1. <p> Reference: [PSY90, SY] Hint: The reduction is from U3NSATFLIP, Problem A.5.3. Remarks: The weighted version of the problem is PLS -complete <ref> [PSY90] </ref>. A.5.5 Unweighted 2SAT/FLIP (U2SATFLIP) Given: A Boolean formula F in CNF with 2 literals per clause and a truth assignment s. Each clause has a weight of 1. <p> Problem: Is the assignment s the maximum cost assignment of F over all neighbors of s? The cost of the assignment is the sum of the weights of the clauses it satisfies. The neighbors of s are assignments that differ from s in one bit position. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.5.6 Unweighted SWAP (USWAP) Given: A graph G = (V; E) with 2n nodes and a set S of n nodes. <p> The neighbors of s are assignments that differ from s in one bit position. Reference: [PSY90, SY] Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete <ref> [PSY90] </ref>. A.5.6 Unweighted SWAP (USWAP) Given: A graph G = (V; E) with 2n nodes and a set S of n nodes. <p> Problem: Is S the minimum cost set of n nodes, where the cost is the sum of the weights of the edges leaving S, over all neighbors of S? A neighbor of S is a set of n nodes whose symmetric difference with S consists of two nodes. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete [PSY90]. <p> Reference: [PSY90, SY] Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete <ref> [PSY90] </ref>. <p> Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.6 Logic A.6.1 Unit Resolution (UNIT) Given: A Boolean formula F in conjunctive normal form. <p> Reference: [PSY90, SY] Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete <ref> [PSY90] </ref>. A.6 Logic A.6.1 Unit Resolution (UNIT) Given: A Boolean formula F in conjunctive normal form. Problem: Can the empty clause 2 be deduced from F by unit resolution? A unit is a clause with only one term.
Reference: [PT87] <author> C. H. Papadimitriou and J. N. Tsitsiklis. </author> <title> The complexity of Markov decision processes. </title> <journal> Mathematics of Operations Research, </journal> <volume> 12(3) </volume> <pages> 441-450, </pages> <year> 1987. </year>
Reference-contexts: A policy is stationary if ffi is independent of time, and can then be suplied as an input. Problem: Is the expectation of the cost, P T t=0 c (s t ; ffi (s t ; t); t), equal to 0? Reference: <ref> [PT87] </ref> Hint: There is a polynomial time algorithm for the problem that uses dynamic programming. The reduction is from the monotone circuit value problem, Problem A.1.3. <p> Remarks: The reduction shows that the finite horizon stationary version of the problem is P -hard. This problem is not known to be in P . The deterministic version of the FHMDP, which requires that p has only values 0 or 1, is in NC <ref> [PT87] </ref>. Note, this last result holds for both the stationary and nonstationary versions of the problem. A.8.2 Discounted Markov Decision Process (DMDP) Given: A stationary Markov decision process M = (S; c; p) and a real number fi 2 (0; 1). See Problem A.8.1 for definitions. <p> See Problem A.8.1 for definitions. This problem is infinite horizon, that is, there is no time bound. Problem: Is the expectation of the cost, P 1 t=0 c (s t ; ffi (s t ; t))fi t , equal to 0? Reference: <ref> [PT87] </ref> Hint: The problem can be phrased as a linear programming problem and solved in polynomial time. The same construction as used in Problem A.8.1 can be used to show this Part II: P -Complete Problems * 75 problem is P -complete. <p> The same construction as used in Problem A.8.1 can be used to show this Part II: P -Complete Problems * 75 problem is P -complete. Remarks: The infinite horizon, discounted, deterministic problem is in NC <ref> [PT87] </ref>. The deterministic problem requires that p has values only 0 or 1. A.8.3 Average Cost Markov Decision Process (ACMDP) Given: A stationary Markov decision process M = (S; c; p). See Problem A.8.1 for definitions. This problem is infinite horizon, that is, there is no time bound. <p> A.8.3 Average Cost Markov Decision Process (ACMDP) Given: A stationary Markov decision process M = (S; c; p). See Problem A.8.1 for definitions. This problem is infinite horizon, that is, there is no time bound. Problem: Is the lim T !1 P T Reference: <ref> [PT87] </ref> Hint: The problem can be phrased as a linear programming problem and solved in polynomial time. The reduction is from a synchronous variant of MCVP, Problem A.1.6. The construction is a modification to that given in Problem A.8.1. <p> Instead of having states corresponding to circuit inputs going to a new state q, they have transitions to the initial state. The limit is 0 if and only if the circuit instance evaluates to true. Remarks: The infinite horizon, average cost, deterministic problem is in NC <ref> [PT87] </ref>. The deterministic problem requires that p has values only 0 or 1. A.8.4 Gaussian Elimination with Partial Pivoting (GEPP) Given: An n fi n matrix A with entries over the reals or rationals and an integer l.
Reference: [PTC77a] <author> W. J. Paul, R. E. Tarjan, and J. R. Celoni. </author> <title> Correction to "Space bounds for a game on graphs". </title> <journal> Mathematical Systems Theory, </journal> <volume> 11:85, </volume> <year> 1977. </year>
Reference: [PTC77b] <author> W. J. Paul, R. E. Tarjan, and J. R. Celoni. </author> <title> Space bounds for a game on graphs. </title> <journal> Mathematical Systems Theory, </journal> <volume> 10 </volume> <pages> 239-251, </pages> <year> 1977. </year> <note> See also [PTC77a]. </note>
Reference: [PV76] <author> M. S. Paterson and L. G. Valiant. </author> <title> Circuit size is nonlinear in depth. </title> <journal> Theoretical Computer Science, </journal> <volume> 2 </volume> <pages> 397-400, </pages> <year> 1976. </year>
Reference: [Ram87] <author> V. Ramachandran. </author> <title> The complexity of minimum cut and maximum flow problems in an acyclic network. </title> <journal> Networks, </journal> <volume> 17(4) </volume> <pages> 387-392, </pages> <year> 1987. </year>
Reference-contexts: In a network with edge capacities expressed in unary, computing the magnitude of the maximum flow is in RNC 2 [Fea84] and a method for finding the flow in RNC is also known [KUW86]. If the network is restricted to being acyclic MaxFlow remains P -complete <ref> [Ram87] </ref>. Flows in planar networks can be computed in NC [JV82]. Two commodity flow (2CF) is defined like MaxFlow except there are two sources and two sinks, and there are two separate flows functions for the commodities.
Reference: [Ram88] <author> V. Ramachandran. </author> <title> Fast and processor-efficient parallel algorithms for reducible flow graphs. </title> <type> Technical Report UILU-ENG-88-2257, </type> <institution> ACT-103, University of Illinois at Urbana-Champaign, </institution> <year> 1988. </year>
Reference-contexts: Greenlaw proved that a related problem, the lexicographically first maximal acyclic subgraph problem, is P -complete [Gre90]. Ramachandran proved that finding a minimum weight feedback vertex set in a reducible flow graph with arbitrary weights is P -complete <ref> [Ram88] </ref>. <p> flow graph, finding a minimum weight feedback arc set in a reducible flow graph with unary weights on the arcs, finding a minimum weight feedback vertex set in a reducible flow graph with unary weights on the vertices, and finding a minimum cut in a flow network with unary capacities <ref> [Ram88] </ref>. A.2.15 Edge Maximal Acyclic Subgraph (EMAS) Given: A directed graph G = (V; E) with an ordering on the edges and a designated edge e. <p> Berger has an NC approximation algorithm that, assuming the input graph does not contain two-cycles, generates a subgraph containing more than half the arcs [Ber91]. Ramachandran proved that finding a minimum weight feedback arc set in a reducible flow graph with arbitrary weights on the arcs in P -complete <ref> [Ram88] </ref>. A.2.16 General Graph Closure (GGC) Given: An undirected graph G = (V; E), a subset E 0 V fi V with E 0 " E = , and a designated edge e = (u; v) 2 E 0 .
Reference: [Rei78] <author> S. Reiss. </author> <title> Rational search. </title> <journal> Information Processing Letters, </journal> <volume> 8(2) </volume> <pages> 87-90, </pages> <year> 1978. </year>
Reference-contexts: Remarks: The original reduction in [DLR79] is from HORN, Problem A.6.2, to LP. In [DR80], LP and LI are shown to be log space equivalent by reducing LP to LI using rational binary search <ref> [Pap78, Rei78] </ref> to find the value of the maximum and an x that Part II: P -Complete Problems * 63 yields it. However, it is not clear how to perform this reduction in NC 1 .
Reference: [Rei84] <author> J. H. Reif. </author> <title> On synchronous parallel computations with independent probabilistic choice. </title> <journal> SIAM Journal on Computing, </journal> <volume> 13(1) </volume> <pages> 46-56, </pages> <month> February </month> <year> 1984. </year>
Reference: [Rei85] <author> J. Reif. </author> <title> Depth-first search is inherently sequential. </title> <journal> Information Processing Letters, </journal> <volume> 20(5) </volume> <pages> 229-234, </pages> <year> 1985. </year>
Reference-contexts: Problem: Is vertex u visited before vertex v in the depth first search of G induced by the order of the adjacency lists? Reference: <ref> [Rei85] </ref> Hint: Follows easily from Problem A.3.1, since the leftmost path in the lexicographically first depth first search tree is the lexicographically first maximal path [And85]. Reif [Rei85] gives a direct reduction from NOR CVP to DFS, taking advantage of the fixed order by which the adjacency lists are examined. <p> Is vertex u visited before vertex v in the depth first search of G induced by the order of the adjacency lists? Reference: <ref> [Rei85] </ref> Hint: Follows easily from Problem A.3.1, since the leftmost path in the lexicographically first depth first search tree is the lexicographically first maximal path [And85]. Reif [Rei85] gives a direct reduction from NOR CVP to DFS, taking advantage of the fixed order by which the adjacency lists are examined. We present the directed case from which the undirected case is easily derived. Without loss of generality, assume gates are numbered in topological order.
Reference: [RTY90] <author> John H. Reif, J. D. Tygar, and Akitoshi Yoshida. </author> <title> The computability and complexity of optical beame tracing. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 106-114, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: In two or more dimensions, the general problem is in PSPACE . In three dimensions, with mirrors placed at rational points, the general problem is PSPACE -hard. The general problem is open for all mirrors of a fixed size as well. See <ref> [RTY90] </ref> for a detailed discussion. B.3.3 Restricted Plane Sweep Triangulation (SWEEP) Given: An n vertex polygon P without holes. Problem: Find the triangulation computed by the plane sweep triangulation algorithm. Reference: [ACG90] Remarks: The problem of finding some arbitrary triangulation is in NC [Goo89].
Reference: [Ruz79] <author> W. L. Ruzzo. </author> <title> Complete pushdown languages. </title> <type> Unpublished manuscript, </type> <year> 1979. </year>
Reference-contexts: Problem: Is there a path from s to t such that the concatenation of its edge labels is in L? Reference: <ref> [Ruz79, GHR91] </ref> Hint: Reduce the 2-way DPDA acceptance problem, Problem A.7.8 to LGAP. Let M = (Q; 0 ; ; ffi; q 0 ; Z 0 ) be a 2-way DPDA [HU79] and let x 2 0 be an input string. <p> An equivalent statement is that it is P - complete to decide, given a deterministic finite state automaton M , whether D 2 "L (M ) = . If G is acyclic then the problem is complete for SAC 1 = LOGCFL <ref> [Ruz79] </ref>. A.7.8 Two-Way DPDA Acceptance (2DPDA) Given: A two-way deterministic pushdown automaton M and a string x. Problem: Is x accepted by M ? Reference: [Coo71a, Gal74, Gal77, Lad75] Hint: See, e.g., [HU79] for a definition of 2DPDAs.
Reference: [Ruz80] <author> W. L. Ruzzo. </author> <title> Tree-size bounded alternation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2) </volume> <pages> 218-235, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: Remarks: Goldschlager remarks it is the presence of *-productions in the input grammar that make the membership question difficult [Gol81]. Lewis, Stearns, and Hartmanis' log 2 n space algorithm [LSH65] and Ruzzo's AC 1 (hence NC 2 ) algorithm <ref> [Ruz80] </ref> for general context free language recognition can both be modified to work with an *-free grammar given as part of the input. A.7.2 Context-Free Grammar Empty (CFGempty) Given: A context-free grammar G = (N; T; P; S).
Reference: [Ruz81] <author> W. L. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(3) </volume> <pages> 365-383, </pages> <month> June </month> <year> 1981. </year>
Reference: [Sav70] <author> W. J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: The proof sketched above also shows that the problem remains P -complete when the partition (A; B) induces a bipartite graph. When restricted to only existential nodes, the problem is equivalent to the "directed graph accessibility problem," variously called "GAP" and "STCON," and known to be complete for NL <ref> [Sav70] </ref>. Peterson (personal communication, 198x) shows that the undirected version of AGAP is also P -complete.
Reference: [Sch78] <author> T. J. Schaefer. </author> <title> On the complexity of some two-person perfect-information games. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 16(2) </volume> <pages> 185-225, </pages> <year> 1978. </year>
Reference-contexts: The first player with no moves left loses. Problem: Does H have a winning strategy on M ? Reference: [CT90] Hint: The reduction is performed in two stages. First, MCVP is reduced to an acyclic version of Schaefer's Geography game <ref> [Sch78] </ref> called ACYCLICGEO. This proves that ACYCLICGEO is P -complete. Second, ACYCLICGEO is reduced to LONGCAKE. Remarks: The game SHORTCAKE is the same as LONGCAKE except the larger portion of the current submatrix is thrown away. SHORTCAKE is complete for AC 1 [CT90].
Reference: [Ser90] <author> M. J. Serna. </author> <title> The Parallel Approximability of P-complete Problems. </title> <type> PhD thesis, </type> <institution> Universitat Politecnica de Catalunya, Barcelona, </institution> <year> 1990. </year> <title> 110 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: </title> <publisher> 1.46) </publisher>
Reference-contexts: See remarks for Problem A.2.6. A.2.8 High Connectivity Subgraph (HCS) Given: A graph G = (V; E) and an integer k. Problem: Does G contain a vertex induced subgraph of vertex (edge) connectivity at least k? Reference: <ref> [KSS89, Ser90] </ref> Hint: The reduction is from MCVP and is similar to that used to prove Problem A.2.7, the high degree subgraph problem, is P -complete. Remarks: Approximation algorithms for this problem exhibit a threshold type behavior.
Reference: [Sho89] <author> T. Shoudai. </author> <title> The lexicographically first topological order problem is NLOG-complete. </title> <journal> Information Processing Letters, </journal> <volume> 33(3) </volume> <pages> 121-124, </pages> <year> 1989. </year>
Reference-contexts: Not all problems computing a lexicographically first solution are P -complete. For example, the lexicographically first topological order problem is complete for NLOG <ref> [Sho89] </ref> and the lexicographic low degree subgraph membership problem is NP -complete [Gre89]. A.2.14 Minimum Feedback Vertex Set (MFVS) Given: A directed graph G = (V; E) that is cyclically reducible (defined below) and a designated vertex v.
Reference: [Smi86] <author> J. R. Smith. </author> <title> Parallel algorithms for depth first searches I: Planar graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(3) </volume> <pages> 814-830, </pages> <year> 1986. </year>
Reference-contexts: Computing the LFDFS tree in planar graphs is P -complete as well [And85]. In RNC , it is possible to find some depth-first vertex numbering and the depth-first spanning tree corresponding to it; see Problem B.5.1 [AA88, AAK90]. Computing a depth-first vertex numbering for planar graphs is in NC <ref> [Smi86, HY87] </ref>. Computing the lexicographically first depth-first numbering for DAGs is in NC [Grear, dlTK88, dlTK89]. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC [SV85]. <p> Problem: Construct the depth first search numbering of G starting from vertex s. Reference: [AA88, AAK90] Remarks: RNC algorithms are now known for both the undirected [AA88] and directed [AAK90] cases, subsuming earlier RNC results for planar graphs <ref> [Smi86] </ref>. For DAGs, DFS is in NC [Gre88a]. B.5.2 0-1 Maximum Flow (0-1 MaxFlow) Given: Directed graph G with each edge labeled in unary with a capacity c i 0 and two distinguished vertices, source s and sink t. Problem: Find a maximum flow.
Reference: [Spi87] <author> P. Spirakis. </author> <title> The parallel complexity of deadlock detection. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 52(1,2):155-163, </address> <year> 1987. </year>
Reference-contexts: Problem: Is D a deadlock state? A deadlock state is one in which there is a non-trivial subset of the processes that cannot change state and will never change state in the future. Reference: <ref> [Spi87] </ref> Hint: The reduction is from MCVP. Let ff = (ff 1 ; : : : ; ff n ) denote an instance of MCVP. There will be one process p i associated with each ff i and one additional special process p 0 . <p> The graph D is not in a deadlock state if and only if ff n is true. Remarks: Notice, in the reduction the maximum number of units of any resource is two. The problem is in NC if t i = 1 for all i <ref> [Spi87] </ref>. That is, if there is only one unit of each resource. If the system states are expedient, the resource allocator satisfies them as soon as possible, and at most one request can be connected to any process at a given time then the problem is in NC [Spi87]. <p> all i <ref> [Spi87] </ref>. That is, if there is only one unit of each resource. If the system states are expedient, the resource allocator satisfies them as soon as possible, and at most one request can be connected to any process at a given time then the problem is in NC [Spi87].
Reference: [SS79] <author> W. J. Savitch and M. J. Stimson. </author> <title> Time bounded random access machines with parallel processing. </title> <journal> Journal of the ACM, </journal> <volume> 26(1) </volume> <pages> 103-118, </pages> <year> 1979. </year>
Reference: [SS89] <author> M. Serna and P. Spirakis. </author> <title> The approximability of problems complete for P. </title> <editor> In G. Goos and J. Hartmanis, editors, </editor> <booktitle> International Symposium on Optimal Algorithms, volume 401 of Lecture Notes in Computer Science, </booktitle> <pages> pages 193-204. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin York, </address> <year> 1989. </year>
Reference-contexts: Remarks: Approximation algorithms for this problem exhibit a threshold type behavior. Below a certain value on the absolute performance ratio the problem remains P -complete for fixed k, and above that ratio there are NC algorithms to approximate the problem <ref> [SS89] </ref>. Specifically, let o be the maximum size of a k vertex-connected induced subgraph of G. Then for 0 c 1=4 it is possible to find, in NC , a vertex induced subgraph of size co, but for 1=4 &lt; c 1 this not possible unless NC = P . <p> Remarks: Under the appropriate definitions, it is known that approximating this problem is also P -complete <ref> [SS89] </ref>. A.6.2 Horn Unit Resolution (HORN) Given: A Horn formula F , that is, a conjunctive normal form (CNF) formula with each clause a disjunction of literals having at most one positive literal per clause. <p> Let w be the empty clause. Remarks: If * is associative, GEN is complete for NSPACE (log n). The problem remains in P even with more than one operation. Under the appropriate definitions, it is known that approximating this problem is also P -complete <ref> [SS89] </ref>. A.6.6 Path Systems (PATH) Given: A path system P = (X; R; S; T ) where S X, T X, and R X fi X fi X. <p> Remarks: This is the first problem shown to be log space complete for P . The original proof by Cook does a direct simulation of a Turing machine [Coo74]. Under the appropriate definitions, it is known that approximating this problem is also P -complete <ref> [SS89] </ref>. A.6.7 Unification (UNIF) Given: Two symbolic terms s and t. Each term is composed of variables and function symbols. A substitution for x in a term u is the replacement of all occurrences of a variable x in u by another term v.
Reference: [Ste89] <author> I. A. Stewart. </author> <title> Complete problems for symmetric logspace involving free groups. </title> <type> Technical Report 300, </type> <institution> University of Newcastle upon Tyne, </institution> <year> 1989. </year> <note> To appear, Information Processing Letters. </note>
Reference-contexts: Let U = fu 1 ; : : : ; u m g S fl , where m 2 N and let x 2 S fl . Problem: Is x 2 hU i? That is, is x in the subgroup of F generated by U ? Reference: <ref> [AM84b, Ste89] </ref> Hint: Stewart reported an error in the result contained in [AM84b]. The reduction in [AM84b] is a generic one from a normal form Turing machine. However, it reduces a Tur-ing machine computation to a version of GWP where S is a countably infinite set [Ste89]. <p> The reduction in [AM84b] is a generic one from a normal form Turing machine. However, it reduces a Tur-ing machine computation to a version of GWP where S is a countably infinite set <ref> [Ste89] </ref>. Stewart shows using the Nielsen reduction algorithm that this problem is still in P . Stew-art calls this P -complete problem the generalized word problem for countably-generated free groups (GWPC). He shows that GWPC is log space reducible to GWP thus proving GWP is P -complete as well [Ste89]. <p> set <ref> [Ste89] </ref>. Stewart shows using the Nielsen reduction algorithm that this problem is still in P . Stew-art calls this P -complete problem the generalized word problem for countably-generated free groups (GWPC). He shows that GWPC is log space reducible to GWP thus proving GWP is P -complete as well [Ste89]. Part II: P -Complete Problems * 77 Remarks: For a natural number k, GWPC (k) and GWPC ( k) are the generalized word problems for finitely-generated subgroups of countably-generated free groups where all words involved are of length exactly k and at most k respectively.
Reference: [Ste90] <author> I. A. Stewart. </author> <title> The complexity of restricted versions of the generalized word problem for free groups. </title> <type> Manuscript, </type> <institution> University of Newcastle upon Tyne, </institution> <note> submitted for publication, </note> <year> 1990. </year>
Reference-contexts: Stewart shows GWPC (k) and GWPC (k) are P -complete for k &gt; 2 <ref> [Ste90] </ref>. When k = 2 the problems are complete for symmetric log space (SL). The word problem for a free group is to decide whether x equals the empty word in F . This problem is solvable in deterministic log space [LZ77].
Reference: [Sto84] <author> L. J. Stockmeyer. </author> <booktitle> Unpublished notes on the Cat and Mouse Game, </booktitle> <year> 1984. </year>
Reference-contexts: The cat is not allowed to occupy the goal node. The mouse wins if it reaches the goal node without being caught. The cat wins if the mouse and cat occupy the 88 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) same node. Reference: <ref> [CS76a, Sto84] </ref> Hint: The reduction is from a log space alternating Turing machine M . Assume that M starts in an existential configuration I, has a unique accepting configuration A that is existential, and each existential (universal) configuration has exactly two immediate successors, both of which are universal (existential).
Reference: [Sub89] <author> Ashok Subramanian. </author> <title> A new approach to stable matching problems. </title> <type> Technical Report STAN-CS-89-1275, </type> <institution> Stanford, </institution> <year> 1989. </year>
Reference-contexts: Mayr and Subramanian note that these algorithms are P -complete, in the sense of Section ??.) It is known that NL CC P [MS89]. Most of the results described in this subsection come from [MS89]. See also <ref> [Sub90, Sub89, Fed89] </ref>. B.4.1 Comparator Circuit Value Problem (CCVP) Given: An encoding ff of a circuit ff composed of comparator gates plus inputs x 1 ; : : : ; x n .
Reference: [Sub90] <author> A. Subramanian. </author> <title> The Computational Complexity of the Circuit Value and Network Stability Problems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stan-ford University, </institution> <year> 1990. </year>
Reference-contexts: Mayr and Subramanian note that these algorithms are P -complete, in the sense of Section ??.) It is known that NL CC P [MS89]. Most of the results described in this subsection come from [MS89]. See also <ref> [Sub90, Sub89, Fed89] </ref>. B.4.1 Comparator Circuit Value Problem (CCVP) Given: An encoding ff of a circuit ff composed of comparator gates plus inputs x 1 ; : : : ; x n .
Reference: [Sud78] <author> I. H. Sudborough. </author> <title> On the tape complexity of deterministic context-free languages. </title> <journal> Journal of the ACM, </journal> <volume> 25(3) </volume> <pages> 405-414, </pages> <year> 1978. </year>
Reference-contexts: Cook [Coo71a] gives a direct simulation of a polynomial time Turing machine by a logarithmic space auxiliary pushdown automaton. Galil [Gal74, Gal77] shows existence of a P -complete language accepted by a 2DPDA, in effect showing that the logarithmic space worktape isn't crucial to Cook's simulation. (See also <ref> [Sud78] </ref> for a general reduction of auxiliary PDAs to ordinary PDAs.) Ladner [Lad75] gives a much more direct proof by observing that a suitably encoded version of CVP is solvable by a 2DPDA, basically by doing a depth first search of the circuit, using the stack for backtracking.
Reference: [SV84] <author> L. Stockmeyer and U. Vishkin. </author> <title> Simulation of parallel random access machines by circuits. </title> <journal> SIAM Journal on Computing, </journal> <volume> 13(2) </volume> <pages> 409-422, </pages> <month> May </month> <year> 1984. </year>
Reference: [SV85] <author> C. A. Schevon and J. S. Vitter. </author> <title> A parallel algorithm for recognizing unordered depth-first search. </title> <type> Technical Report CS-85-21, </type> <institution> Brown University, Department of Computer Science, </institution> <year> 1985. </year>
Reference-contexts: Computing a depth-first vertex numbering for planar graphs is in NC [Smi86, HY87]. Computing the lexicographically first depth-first numbering for DAGs is in NC [Grear, dlTK88, dlTK89]. Determining whether a directed spanning tree of a general graph has a valid DFS numbering is in NC <ref> [SV85] </ref>. A.3.3 Breadth-Depth Search (BDS) Given: A graph G = (V; E) with a numbering on the vertices and two designated vertices u and v.
Reference: [SW91] <author> Clifford Stein and Joel Wein. </author> <title> Approximating the minimum-cost maximum flow is P-complete. </title> <type> Manuscript, </type> <month> September </month> <year> 1991. </year>
Reference-contexts: Selective (l; u)-2CF is defined to be a 2CF with lower and upper bounds on the sum of the two flows on each edge. Stein and Wein <ref> [SW91] </ref> show that, althought there is an RNC algorithm to approximate maximum flow, approximating the minimum cost maximum flow is P -complete. 64 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: 1.46) A.4.5 Homologous Flow (HF) Given: A directed graph G with each edge (v; w) labeled with
Reference: [SY] <author> A. A. Schaffer and M. Yannakakis. </author> <title> Simple local search problems that are hard to solve. </title> <journal> SIAM Journal on Computing. </journal> <note> To appear. References * 111 </note>
Reference-contexts: Problem: Is the assignment s the maximum cost assignment of F over all neighbors of s? The cost of the assignment is the sum of the weights of the clauses it satisfies. The neighbors of s are assignments that differ from s in one bit position. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from NOR CVP. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.5.4 Unweighted MAXCUT/SWAP (UMS) Given: A graph G = (V; E) with weights of size 1 on the edges and a subset S V . <p> Problem: Is S the maximum cost subset of nodes, where the cost is the sum of the weights of the edges leaving nodes in S, over all neighbors of S? A neighbor of S is a set of size jSj whose symmetric difference with S contains one node. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from U3NSATFLIP, Problem A.5.3. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.5.5 Unweighted 2SAT/FLIP (U2SATFLIP) Given: A Boolean formula F in CNF with 2 literals per clause and a truth assignment s. Each clause has a weight of 1. <p> Problem: Is the assignment s the maximum cost assignment of F over all neighbors of s? The cost of the assignment is the sum of the weights of the clauses it satisfies. The neighbors of s are assignments that differ from s in one bit position. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.5.6 Unweighted SWAP (USWAP) Given: A graph G = (V; E) with 2n nodes and a set S of n nodes. <p> Problem: Is S the minimum cost set of n nodes, where the cost is the sum of the weights of the edges leaving S, over all neighbors of S? A neighbor of S is a set of n nodes whose symmetric difference with S consists of two nodes. Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete [PSY90]. <p> Reference: <ref> [PSY90, SY] </ref> Hint: The reduction is from UMS, Problem A.5.4. Remarks: The weighted version of the problem is PLS -complete [PSY90]. A.6 Logic A.6.1 Unit Resolution (UNIT) Given: A Boolean formula F in conjunctive normal form.
Reference: [Tom82] <author> M. Tompa. </author> <title> A pebble game that models alternation. </title> <type> Unpublished manuscript, </type> <year> 1982. </year>
Reference: [Tom83] <author> M. P. Tompa. </author> <title> Unpublished notes on NC reductions among problems in RP, </title> <year> 1983. </year>
Reference-contexts: Reference: [BGH82] Remarks: The analogous problem for n th degree polynomials is in NC [BGH82]. B.1.3 Relative Primeness (RelPrime) Given: Two n-bit positive integers a and b. Problem: Are a and b relatively prime? Reference: <ref> [Tom83] </ref> Remarks: Is a special case of IntegerGCD, Problem B.1.1. B.1.4 Modular Inversion (ModInverse) Given: An n-bit prime p and an n-bit positive integer a, such that p does not divide a. Problem: Compute b such that ab mod p = 1. Reference: [Tom83] Remarks: ModInverse is reducible to ExtendedGCD (compute <p> Are a and b relatively prime? Reference: <ref> [Tom83] </ref> Remarks: Is a special case of IntegerGCD, Problem B.1.1. B.1.4 Modular Inversion (ModInverse) Given: An n-bit prime p and an n-bit positive integer a, such that p does not divide a. Problem: Compute b such that ab mod p = 1. Reference: [Tom83] Remarks: ModInverse is reducible to ExtendedGCD (compute s; t such that as + pt = gcd (a; p) = 1), and also to ModPower, even restricted to prime moduli (compute a p2 mod p and apply Fermat's Little Theorem).
Reference: [UVG88] <author> J. D. Ullman and A. Van Gelder. </author> <title> Parallel complexity of logical query programs. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 5-52, </pages> <year> 1988. </year>
Reference-contexts: An EDB fact is an EDB predicate with constants as arguments. An EDB instance is a finite set of EDB facts. C is a theorem of P if the head of C is derivable from its subgoals in P . Problem: Is C a theorem of P ? Reference: <ref> [UVG88] </ref> Hint: Reduce PATH, Problem A.6.6, to LPQ. Let (X; R; S; T ) be an instance of PATH. Without loss of generality, assume S = fsg. Let t (Y ) be an EDB relation specifying that node Y is in T . <p> The relation a models "admissibility" in the path system, so a (s) is a theorem of P if and only if s is admissible in the path system. Remarks: Remains P -complete even for very restricted programs. In NC for programs with the "polynomial fringe property." See <ref> [UVG88] </ref> for details. See also [AP87] for related results. A.7 Formal Languages A.7.1 Context-Free Grammar Membership (CFGmem) Given: A context-free grammar G = (N; T; P; S) and a string x 2 T fl . Problem: Is x 2 L (G)? Reference: [JL76] Hint: Reduce GEN to CFGmem.
Reference: [Val82a] <author> L. G. Valiant. </author> <title> Reducibility by algebraic projections. </title> <booktitle> L'Enseignement Mathematique, XXVIII:253-268, 1982. Also in [L'E82, </booktitle> <pages> pages 365-380]. </pages>
Reference-contexts: Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax b? (It is not required to find such an x.) Reference: <ref> [Coo82, Val82a, Kha79] </ref> Hint: LI is in P by [Kha79]. The following reduction of CVP to LI is due to [Coo82]. 1. If input x i is true (false) it is represented by the equation x i = 1 (x i = 0). 2. <p> A.4.2 Linear Equalities (LE) Given: An integer n fi d matrix A and an integer n fi 1 vector b. Problem: Is there a rational d fi 1 vector x &gt; 0 such that Ax = b? Reference: <ref> [Coo82, Val82a, Kha79] </ref> Hint: LE is NC 1 reducible to LI since Ax b and Ax b if and only if Ax = b. Thus LE is in P. <p> A.4.3 Linear Programming (*) (LP) Given: An integer n fi d matrix A, an integer n fi 1 vector b, and an integer 1 fi d vector c. Problem: Find a rational d fi 1 vector x such that Ax b and cx is maximized. Reference: <ref> [DLR79, Kha79, DR80, Val82a] </ref> Hint: LP is not in P , but is in FP by [Kha79]. Reduce LI to LP by picking any cost vector c, say c = ~ 0, and checking whether the resulting linear program is feasible.
Reference: [Val82b] <author> Leslie G. Valiant. </author> <title> Parallel computation. </title> <type> Technical Report TR-16-82, </type> <institution> Harvard, Center of Research in Computing Technology, </institution> <month> April </month> <year> 1982. </year> <note> To be presented at the 7th IBM Symposium on Mathematical Foundations of Computer Science, Hakone, Kanagawa, Japan, </note> <month> May 24-26, </month> <year> 1982. </year>
Reference: [Vav89] <author> S. Vavasis. </author> <title> Gaussian elimination with pivoting is P-complete. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 2(3) </volume> <pages> 413-423, </pages> <year> 1989. </year>
Reference-contexts: Reference: <ref> [Vav89] </ref> Hint: The standard Gaussian elimination algorithm requires O (n 3 ) operations. Since the size of the numbers involved can be bounded by a polynomial in n (see [Vav89]), the problem is in P . To show completeness reduce NAND CVP to GEPP. <p> Reference: <ref> [Vav89] </ref> Hint: The standard Gaussian elimination algorithm requires O (n 3 ) operations. Since the size of the numbers involved can be bounded by a polynomial in n (see [Vav89]), the problem is in P . To show completeness reduce NAND CVP to GEPP. Without loss of generality, assume the inputs and gates of the circuit are numbered in topological order from 1 to G, where G numbers the output gate.
Reference: [Ven83] <author> H. </author> <title> Venkateswaran. </title> <type> Private communication, </type> <year> 1983. </year>
Reference-contexts: Problem: Does ff on input x 1 ; : : : ; x n output 1? Reference: <ref> [Ven83] </ref> Hint: Reduce NANDCVP to ArithCVP as follows: true ! 1, false ! 0, and :(u ^ v) ! 1 u fl v, where 0 denotes the additive identity and 1 denotes the multiplicative identity of the ring. <p> A.1.9 Min-Plus Circuit Value Problem (MinPlusCVP) Given: An encoding of a (min; +) circuit ff and rational inputs x 1 ; : : : ; x n . Problem: Does ff on input x 1 ; : : : ; x n output a non-zero value? Reference: <ref> [Ven83] </ref> Hint: Reduce MCVP to MinPlusCVP as follows: true ! 1, false ! 0, u^v ! min (u; v), and u _ v ! min (1; u + v).
Reference: [Ven89] <author> H. Venkateswaran. </author> <title> Two natural circuits for which interpreted pebbling helps. </title> <type> Technical Report GIT-ICS-89-23, </type> <institution> Georgia Institute of Technology, </institution> <month> June </month> <year> 1989. </year> <note> Submitted for publication. </note>
Reference: [Ven90] <author> H. Venkateswaran. </author> <title> The unary maximum flow problem is hard for ac 1 . Technical Report GIT-ICS-90-xx, </title> <institution> Georgia Institute of Technology, School of Information and Computer Science, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: Both problems remain in RNC when capacities are polynomially bounded, but are P -complete when capacities are arbitrary (Problem A.4.4). Venkateswaran <ref> [Ven90] </ref> shows that 0-1 MaxFlow is hard for AC 1 . B.5.3 Maximum Matching (MM) Given: A graph G. Problem: Find a maximum matching of G. A matching is a subset of the edges of G such that no two edges of the subset are adjacent in G.
Reference: [VS86] <author> J. S. Vitter and R. A. Simons. </author> <title> New classes for parallel complexity: A study of unification and other complete problems for P. </title> <journal> IEEE Transactions on Computers, </journal> <volume> TC-35:403-418, </volume> <month> May </month> <year> 1986. </year>
Reference-contexts: A term s matches a term t if there exists a substitution with (s) = t. Vitter and Simons give p n time parallel algorithms for unification and some other P -complete problems <ref> [VS86] </ref>. A.6.8 Logical Query Program (LQP) Given: An extended logic program P , and a ground clause C of the form p (x) :| q 1 (y 1 ); : : : ; q k (y k ).
Reference: [VS88] <author> S. Vishwanathan and M. A. Sridhar. </author> <title> Some results on graph coloring in parallel. </title> <booktitle> In Proceedings International Conference on Parallel Processing III, </booktitle> <pages> pages 299-303, </pages> <year> 1988. </year>
Reference-contexts: A "complementary" low degree subgraph problem has also been studied and for several natural decision problems it is NP -complete [Gre89]. Decision problems based on ordered vertex removal relating to subgraph computations are also P -complete [Gre89]. A special case of HDS is the Color Index Problem <ref> [VS88] </ref>: given an undirected graph G = (V; E), is the color index of G less than or equal to four? The color index is the maximum over all subgraphs H , of G, of the minimum degree of H . <p> there an elimination order on V , v 1 ; : : : ; v n , satisfying the properties that u is eliminated before v and for 1 i n, v i is the lowest numbered vertex of minimum degree in the (i 1)-st remaining subgraph of G? Reference: <ref> [VS88, Gre89] </ref> Hint: This is the complementary problem to Problem A.2.9. The problem defined in [VS88] is more restricted than the one presented here. <p> The problem defined in <ref> [VS88] </ref> is more restricted than the one presented here. Their graphs are also required to have the property that u appears before v in some minimum elimination sequence if and only if u appears before v in all minimum degree elimination sequences.
Reference: [VSBR83] <author> Leslie G. Valiant, S. Skyum, S. Berkowitz, and C. Rackoff. </author> <title> Fast parallel computation of polynomials using few processors. </title> <journal> SIAM Journal on Computing, </journal> <volume> 12(4) </volume> <pages> 641-644, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: degree 2 log O (1) , where the degree of a node is 1 for inputs, and d 1 + d 2 (max (d 1 ; d 2 )) when the node is product (respectively, sum) of the values computed by two nodes of degree d 1 and d 2 <ref> [VSBR83, MRK88] </ref>. A.1.9 Min-Plus Circuit Value Problem (MinPlusCVP) Given: An encoding of a (min; +) circuit ff and rational inputs x 1 ; : : : ; x n .
Reference: [VT89] <author> H. Venkateswaran and M. Tompa. </author> <title> A new pebble game that characterizes parallel complexity classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(3) </volume> <pages> 533-549, </pages> <month> June </month> <year> 1989. </year>
Reference: [Wil88] <author> Robert Wilber. </author> <title> White pebbles help. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36(2) </volume> <pages> 108-124, </pages> <month> April </month> <year> 1988. </year>
Reference: [WLS85] <author> C. C. Wang, E. L. Lloyd, and M. L. Soffa. </author> <title> Feedback vertex sets and cyclically reducible graphs. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 296-313, </pages> <year> 1985. </year> <title> 112 * A Compendium of Problems Complete for P (Preliminary: RCS Revision: </title> <publisher> 1.46) </publisher>
Reference-contexts: A.2.14 Minimum Feedback Vertex Set (MFVS) Given: A directed graph G = (V; E) that is cyclically reducible (defined below) and a designated vertex v. Problem: Is v contained in the minimum feedback set of G that is computed by the algorithm given in <ref> [WLS85] </ref>? Reference: [BDAP88] Hint: We review some terminology [WLS85]. A node z of G is deadlocked if there is a directed path in G from z to a node y that lies on a directed cycle. <p> Problem: Is v contained in the minimum feedback set of G that is computed by the algorithm given in <ref> [WLS85] </ref>? Reference: [BDAP88] Hint: We review some terminology [WLS85]. A node z of G is deadlocked if there is a directed path in G from z to a node y that lies on a directed cycle. <p> It is minimum if no other feedback vertex set has fewer elements. Wang, Lloyd, and Soffa gave a polynomial time algorithm for computing feedback sets in cyclically Part II: P -Complete Problems * 57 reducible graphs <ref> [WLS85] </ref>. Thus, MFVSP is in P . The reduction is from MCVP. Let (g 1 ; : : : ; g k ) denote an instance ff of MCVP including inputs, where g k is the output gate.

References-found: 220

