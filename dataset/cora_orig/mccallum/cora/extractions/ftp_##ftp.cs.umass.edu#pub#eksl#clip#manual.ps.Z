URL: ftp://ftp.cs.umass.edu/pub/eksl/clip/manual.ps.Z
Refering-URL: http://eksl-www.cs.umass.edu/research/clip-clasp-details.html
Root-URL: 
Title: Common Lisp Interface Package  
Author: CLIP Scott D. Anderson David L. Westbrook David M. Hart Paul R. Cohen 
Date: January 31, 1994  1994, 1993, 1990  
Note: Clip Version 1.4  c  Mas-sachusetts. This work was supported by a University Research Initiative grant, ONR N00014-86-K-0764, and by ARPA/Rome Laboratory under contracts F30602-91-C-0076 and F30602-93-C-0100.  
Address: Box 34610 Amherst, Massachusetts 01003-4610  
Affiliation: Experimental Knowledge Systems Laboratory Computer Science Department, LGRC University of Massachusetts  Department of Computer Science, University of Massachusetts, Amherst,  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> David M. Hart and Paul R. Cohen. </author> <title> Predicting and explaining success and task duration in the phoenix planner. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <pages> pages 106-115. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The following options are recognized: 1.2. IMPLEMENTATION 3 :system-name string naming system [2] :system-version function or form which handles the arguments of the experiment and returns a string which denotes the version of the system a <ref> [1] </ref> :start-system function or form that handles the experiment variables and arguments of the experiment; this function is called during the experiment loop to begin execution of the system; when it returns the trial is considered to be completed [2] :reset-system same as :start-system; this function will be called during the <p> experiment variables and arguments of the experiment; this function is called during the experiment loop to begin execution of the system; when it returns the trial is considered to be completed [2] :reset-system same as :start-system; this function will be called during the experiment loop before the system is started; <ref> [1] </ref> :stop-system same arg handling as :start-system; this function can be used to execute code when a trial is shutdown; it is most useful when instrumenting multiprocessing systems where other processes need to be terminated [1] :schedule-function function or form that handles the lambda list (function time period name) and optionally <p> :start-system; this function will be called during the experiment loop before the system is started; <ref> [1] </ref> :stop-system same arg handling as :start-system; this function can be used to execute code when a trial is shutdown; it is most useful when instrumenting multiprocessing systems where other processes need to be terminated [1] :schedule-function function or form that handles the lambda list (function time period name) and optionally returns a data-structure which represents the event; used to provide access to the simula tor's event-scheduling mechanism [3] :deactivate-scheduled-function function or form that handles one arg, namely the data structure returned by the schedule-function function; <p> (function time period name) and optionally returns a data-structure which represents the event; used to provide access to the simula tor's event-scheduling mechanism [3] :deactivate-scheduled-function function or form that handles one arg, namely the data structure returned by the schedule-function function; used to provide access to the simulator's event-scheduling mechanism <ref> [1] </ref> :timestamp a function or a list of (&lt;function-name&gt; &lt;clip-name&gt;) where function should return the current time in units specified by :seconds-per-time-unit [3] :seconds-per-time-unit the number of seconds in 1 simulator time quantum (default is 1) [3] Keywords marked [1] are optional; Keywords marked [2] are required, and keywords marked [3] <p> schedule-function function; used to provide access to the simulator's event-scheduling mechanism <ref> [1] </ref> :timestamp a function or a list of (&lt;function-name&gt; &lt;clip-name&gt;) where function should return the current time in units specified by :seconds-per-time-unit [3] :seconds-per-time-unit the number of seconds in 1 simulator time quantum (default is 1) [3] Keywords marked [1] are optional; Keywords marked [2] are required, and keywords marked [3] are required when using time-series clips a Functions must accept the formal arguments specified in define-experiment and the actual arguments specified in a call to run-experiment. Forms can refer to the arguments lexically. <p> We give some background on the Phoenix system and on the experiment design to help the reader better interpret the experiment definition that follows. For more detail on the experiment and its results see Hart & Cohen, 1992 <ref> [1] </ref>. The Phoenix System Phoenix is a multi-agent planning system that fights simulated forest-fires. The simulation uses terrain, elevation, and feature data from Yellowstone National Park and a model of fire spread from the National Wildlife Coordinating Group Fireline Handbook (National Wildlife Coordinating Group 1985).

References-found: 1

