URL: http://www.eecs.umich.edu/~pdmcdan/docs/midware.ps.gz
Refering-URL: http://www.eecs.umich.edu/~pdmcdan/papers.html
Root-URL: http://www.cs.umich.edu
Email: pdmcdan@eecs.umich.edu  honey@citi.umich.edu  aprakash@eecs.umich.edu  
Title: Lightweight Secure Group Communication  
Author: Patrick McDaniel Peter Honeyman Atul Prakash 
Address: Ann Arbor  Ann Arbor  Ann Arbor  
Affiliation: EECS Dept. University of Michigan  Center for Information Technology Integration University of Michigan  EECS Dept. University of Michigan  
Abstract: An advantage of today's high speed networks is the ability to support group communication. Applications that support group communication allow the free exchange of ideas and data in real time, regardless of the physical distance between the participants. Unfortunately, support for additional protocol features such as reliability, secrecy, and total ordering in the multicast context requires more bandwidth and greater complexity than in traditional point-to-point communication. In this paper we describe a middleware software layer and associated API that attempts to minimize these requirements by providing multiple secure channels based on IP multicast within the same logical group. Named LSGC (lightweight secure group communication), the software provides the important features needed by a group application: reliable delivery, best-effort delivery, and security. In providing both reliable and unreliable channels, an application need pay only for the delivery assurances it needs. We conclude with a description of our implementation and supporting performance data.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Deering. </author> <title> Host Extensions for IP Multicasting. </title> <type> Technical Report RFC1112, </type> <institution> Internet Engineering Task Force, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: Furthermore, these requirements increase as more protocol features are needed. In this paper we describe a middleware software layer and associated API that attempts to minimize these requirements by providing multiple communication channels based on IP multicast <ref> [1] </ref> within the same logical group. Named LSGC (lightweight secure group communication), the software will be used by application developers to create high-bandwidth group applications with a minimum of protocol and infrastructure overhead. <p> LSGC provides a single object interface to the group. Using this object, an application has the ability to communicate via either channel, view the current group membership, or retrieve security related information. We use the multicast extensions <ref> [1] </ref> of the Internet Protocol (IP) [9] as our communication primitive. As such, our implementation should be widely supported by most existing networks. Applications with real-time requirements, such as audio and video conferencing, are well suited for LSGC.
Reference: [2] <author> L. Gong. Enclaves: </author> <title> Enabling Secure Collaboration over the Internet. </title> <booktitle> In Proceedings of 6th USENIX UNIX Security Symposium, </booktitle> <pages> pages 149159. </pages> <publisher> USENIX Association, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: Named LSGC (lightweight secure group communication), the software will be used by application developers to create high-bandwidth group applications with a minimum of protocol and infrastructure overhead. While there are many architectures and protocols described in the literature aimed at enabling reliable, fault-tolerant, and/or secure group communication <ref> [2, 3, 4, 5, 6, 7] </ref>, they incur significant costs. Integrating with these systems requires additional application infrastructure, bandwidth, or both. We attempt to avoid these costs with a single, lightweight software layer that provides the important features needed by a group application: reliable delivery and security. <p> In the future, if scalability becomes a concern, we may choose to integrate these methods into LSGC. Virtual networks provide developers an abstraction to build applications designed for (logically) local network traffic, but executed across across larger networks. The Enclaves system <ref> [2] </ref> extends this model to include secure group communication. Group communication in the Enclaves system is controlled at a finer grain, where group membership is controlled not only by authentication, but by policies defined by a group definition.
Reference: [3] <author> R. Van Renesse, K. Birman, and S. Maffeis. Horus: </author> <title> A Flexible Group Communication System. </title> <journal> Communications of the ACM, </journal> <volume> 39(4):7683, </volume> <month> April </month> <year> 1996. </year> <month> 11 </month>
Reference-contexts: Named LSGC (lightweight secure group communication), the software will be used by application developers to create high-bandwidth group applications with a minimum of protocol and infrastructure overhead. While there are many architectures and protocols described in the literature aimed at enabling reliable, fault-tolerant, and/or secure group communication <ref> [2, 3, 4, 5, 6, 7] </ref>, they incur significant costs. Integrating with these systems requires additional application infrastructure, bandwidth, or both. We attempt to avoid these costs with a single, lightweight software layer that provides the important features needed by a group application: reliable delivery and security. <p> We may elect to augment our work in this way in the future. 4 Related Work Much of the existing technology on which reliable group communication is based was originally implemented in the ISIS [5] and later HORUS <ref> [3] </ref> group communication systems. These systems provide a framework in which group applications with reliable delivery requirements can be developed. Using these frameworks, developers can experiment with other features, such as secure communication. One important feature of the HORUS system is the introduction of a comprehensive security architecture. <p> Public key certificates are used to authenticate message traffic, which are retrieved from a certification authority. The costs of using this architecture for group communication is large. The authors show that a group of 4 members can process &lt; 100kb/second <ref> [3] </ref>, which is far below the requirements for a high bandwidth system such as videoconferencing. The RAMPART system [4] provides secure communication in the presence of actively malicious processes. The system uses secure channels between two members of the protocol to provide a maximum of security and authenticity.
Reference: [4] <author> M. Reiter. </author> <title> Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart. </title> <booktitle> In Proceedings of 2nd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 6880. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Named LSGC (lightweight secure group communication), the software will be used by application developers to create high-bandwidth group applications with a minimum of protocol and infrastructure overhead. While there are many architectures and protocols described in the literature aimed at enabling reliable, fault-tolerant, and/or secure group communication <ref> [2, 3, 4, 5, 6, 7] </ref>, they incur significant costs. Integrating with these systems requires additional application infrastructure, bandwidth, or both. We attempt to avoid these costs with a single, lightweight software layer that provides the important features needed by a group application: reliable delivery and security. <p> Group communication systems found in the literature provide varying levels of support for secure communication. The simplest form of secure communication can be found in ISIS [5], where group communication is encrypted via a session key. At the other end of the spectrum, RAMPART <ref> [4] </ref> uses a highly sophisticated, fault-tolerant framework to enable secure group communication in the presence of actively malicious processes. Our goals of secure and high performance multiparty communications leads us to less ambitious security goals. <p> The costs of using this architecture for group communication is large. The authors show that a group of 4 members can process &lt; 100kb/second [3], which is far below the requirements for a high bandwidth system such as videoconferencing. The RAMPART system <ref> [4] </ref> provides secure communication in the presence of actively malicious processes. The system uses secure channels between two members of the protocol to provide a maximum of security and authenticity. Protocols depend greatly on the consensus of processes to reach agreement on the course of action. <p> Possible threat models applicable to group systems are innumerable, and general solutions will prove valuable. Finally, there may be a need for greater fault tolerance. Reiter points out that distributed systems have much to gain from group based communication <ref> [4] </ref>. The solutions presented in this paper have a single point of failure, and thus provide limited availability assurances. The application of the techniques presented in this paper may enhance the performance of these services, but without stronger fault tolerance may not be applicable to all environments.
Reference: [5] <author> K. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12):3753, </volume> <month> December </month> <year> 1993. </year>
Reference-contexts: Named LSGC (lightweight secure group communication), the software will be used by application developers to create high-bandwidth group applications with a minimum of protocol and infrastructure overhead. While there are many architectures and protocols described in the literature aimed at enabling reliable, fault-tolerant, and/or secure group communication <ref> [2, 3, 4, 5, 6, 7] </ref>, they incur significant costs. Integrating with these systems requires additional application infrastructure, bandwidth, or both. We attempt to avoid these costs with a single, lightweight software layer that provides the important features needed by a group application: reliable delivery and security. <p> The messages are totally ordered; all processes receive the messages in the same order. These delivery semantics are used to ensure that all critical data are delivered to the group members correctly. We base our design on a sequencer arbitrated commit scheme <ref> [5, 6, 10] </ref>. The sequencer is responsible for maintaining the order of messages by associating a sequence number with each application level message. This association is broadcast to the group. <p> All members trust the KDC not to disclose their long term key, and to generate pair keys according to the specification. Group communication systems found in the literature provide varying levels of support for secure communication. The simplest form of secure communication can be found in ISIS <ref> [5] </ref>, where group communication is encrypted via a session key. At the other end of the spectrum, RAMPART [4] uses a highly sophisticated, fault-tolerant framework to enable secure group communication in the presence of actively malicious processes. <p> Acknowledgements and retransmissions are localized within the subgroup, reducing total protocol overhead. We may elect to augment our work in this way in the future. 4 Related Work Much of the existing technology on which reliable group communication is based was originally implemented in the ISIS <ref> [5] </ref> and later HORUS [3] group communication systems. These systems provide a framework in which group applications with reliable delivery requirements can be developed. Using these frameworks, developers can experiment with other features, such as secure communication.
Reference: [6] <author> J. Chang and N.F. Maxemchuk. </author> <title> Reliable Broadcast Protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3):252273, </volume> <month> August </month> <year> 1984. </year>
Reference-contexts: Named LSGC (lightweight secure group communication), the software will be used by application developers to create high-bandwidth group applications with a minimum of protocol and infrastructure overhead. While there are many architectures and protocols described in the literature aimed at enabling reliable, fault-tolerant, and/or secure group communication <ref> [2, 3, 4, 5, 6, 7] </ref>, they incur significant costs. Integrating with these systems requires additional application infrastructure, bandwidth, or both. We attempt to avoid these costs with a single, lightweight software layer that provides the important features needed by a group application: reliable delivery and security. <p> The messages are totally ordered; all processes receive the messages in the same order. These delivery semantics are used to ensure that all critical data are delivered to the group members correctly. We base our design on a sequencer arbitrated commit scheme <ref> [5, 6, 10] </ref>. The sequencer is responsible for maintaining the order of messages by associating a sequence number with each application level message. This association is broadcast to the group.
Reference: [7] <author> L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, R. K. Budhia, , and C. A. Lingley-Papadopoulos. Totem: </author> <title> A Fault-Tolerant Multicast Group Communication System. </title> <journal> Communications of the ACM, </journal> <month> April </month> <year> 1996. </year>
Reference-contexts: Named LSGC (lightweight secure group communication), the software will be used by application developers to create high-bandwidth group applications with a minimum of protocol and infrastructure overhead. While there are many architectures and protocols described in the literature aimed at enabling reliable, fault-tolerant, and/or secure group communication <ref> [2, 3, 4, 5, 6, 7] </ref>, they incur significant costs. Integrating with these systems requires additional application infrastructure, bandwidth, or both. We attempt to avoid these costs with a single, lightweight software layer that provides the important features needed by a group application: reliable delivery and security.
Reference: [8] <author> T. Leighton and S. Micali. </author> <title> Secret-key Agreement without Public-Key Cryptography. </title> <booktitle> In Advances in Cryptology: Proceedings of Crypto 93, </booktitle> <year> 1994. </year>
Reference-contexts: This is consistent with our single group abstraction: the application interacts with a single logical group. The central goal in the design of our security mechanisms is performance: all security related operations must be lightweight. We have adapted the Leighton-Micali <ref> [8] </ref> key distribution algorithm to the group environment. This algorithm has several desirable properties with respect to our stated goals. First, it uses fast (symmetric key) cryptographic algorithms throughout. Second, the algorithm generates unique shared secrets between any two members. <p> The security services layer provides facilities for ensuring the secrecy, integrity, and freshness of the group com 3 munication. In providing these facilities, we adapt the Leighton-Micali <ref> [8] </ref> key distribution algorithm to a group environment. Using this algorithm, LSGC periodically distributes a unique cryptographic key that is used to encrypt the group communication. A detailed description of these mechanisms and protocols is given in Section 2.1. <p> Possession of the session key for one view provides no information with which to infer the key for the next view. Because of our lightweight mechanism, the impact of the potentially large number of key distributions is minimal. We chose the Leighton-Micali key distribution algorithm <ref> [8] </ref> to authenticate and transmit the authentication token to the joining member. The main advantage of Leighton-Micali is low cost: it uses symmetric key encryption throughout, with none of the modular exponentiation operations associated with public key cryptosystems. Public key cryptography requires significantly more computation than symmetric algorithms.
Reference: [9] <institution> Information Sciences Institute. Internet Protocol. </institution> <type> Technical Report RFC791, </type> <institution> Internet Engineering Task Force, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: LSGC provides a single object interface to the group. Using this object, an application has the ability to communicate via either channel, view the current group membership, or retrieve security related information. We use the multicast extensions [1] of the Internet Protocol (IP) <ref> [9] </ref> as our communication primitive. As such, our implementation should be widely supported by most existing networks. Applications with real-time requirements, such as audio and video conferencing, are well suited for LSGC.
Reference: [10] <author> M. Kaashoek and A. Tanenbaum. </author> <title> Group communication in the Amoeba Distributed Operating System. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 222230. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: The messages are totally ordered; all processes receive the messages in the same order. These delivery semantics are used to ensure that all critical data are delivered to the group members correctly. We base our design on a sequencer arbitrated commit scheme <ref> [5, 6, 10] </ref>. The sequencer is responsible for maintaining the order of messages by associating a sequence number with each application level message. This association is broadcast to the group.
Reference: [11] <author> P. McDaniel, A. Adamson, P. Honeyman, and A. Prakash. </author> <title> Secure High Performance Group Communication. </title> <type> Technical Report 97-3, </type> <institution> CITI, University of Michigan, </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: The remainder of this section is devoted to a description of the security services. A more detailed description of the mechanisms and protocols used in the process group management and reliable broadcast layers can be found in a related technical report <ref> [11] </ref>. 2.1 Security Services In this section we outline the facilities that ensure secrecy, freshness, and integrity of group communication. We adapted a two-party key distribution algorithm to the group environment to provide all authenticated members with a context specific session key.
Reference: [12] <author> Bruce Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, Chichester, Brisbane, Toronto, Singapore, </address> <note> second edition, </note> <year> 1996. </year>
Reference-contexts: Public key cryptography requires significantly more computation than symmetric algorithms. The de-facto standard for public-key cryptography, RSA, can be up to 100 times slower in software and 1000 times slower in hardware than DES, the predominant symmetric algorithm <ref> [12] </ref>. Before describing the protocols, we define the notation used in this section.
Reference: [13] <author> R. Rivest. </author> <title> The MD5 Message Digest Algorithm. </title> <type> Technical Report RFC1321, </type> <institution> Internet Engineering Task Force, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Key distribution protocols based on Leighton-Micali define a term A;B , called a pair key, used to support secret communication between collaborating members A and B. Derived from the pair key, the session leader and a potential member A maintain a shared secret key SL;A . A MD5 hash <ref> [13] </ref> for the text x is described by H x . It is important to note the format of an identity, nonce, key value, and view identifier. Each identity is a unique 16 byte null terminated ASCII string of alphanumeric characters.
Reference: [14] <institution> Federal Information Processing Standards Publication. Data Encryption Standard. </institution> <type> Technical report, </type> <institution> National Bureau of Standards, </institution> <year> 1977. </year>
Reference-contexts: A session is started by the initial member, called the session leader. The session leader initializes the session by generating a session key and initiating the process group management protocol. The session leader serves as the arbiter of group membership for that session. We use DES <ref> [14] </ref> for all encryption in the system; its inherent strength is evident from its 20-year history, yet its 56-bit key length has long been the subject of debate. Related algorithms such as triple-DES [15] or DESX [16] offer the strength of DES with considerably longer keys.
Reference: [15] <author> American Bankers Association. </author> <title> American National Standard for Financial Institution Key Management. </title> <type> Technical Report ANSI X.917, </type> <institution> ANSI, </institution> <year> 1985. </year>
Reference-contexts: The session leader serves as the arbiter of group membership for that session. We use DES [14] for all encryption in the system; its inherent strength is evident from its 20-year history, yet its 56-bit key length has long been the subject of debate. Related algorithms such as triple-DES <ref> [15] </ref> or DESX [16] offer the strength of DES with considerably longer keys. A prospective member initiates a session join by sending a message to the session leader containing her identity and a nonce value. The session leader then obtains the pair key A;B from the KDC.
Reference: [16] <author> J. Kilian and P. Rogaway. </author> <title> How to Protect DES Against Exhaustive Key Search. </title> <booktitle> In Proceedings of Crypto '96, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: We use DES [14] for all encryption in the system; its inherent strength is evident from its 20-year history, yet its 56-bit key length has long been the subject of debate. Related algorithms such as triple-DES [15] or DESX <ref> [16] </ref> offer the strength of DES with considerably longer keys. A prospective member initiates a session join by sending a message to the session leader containing her identity and a nonce value. The session leader then obtains the pair key A;B from the KDC.
Reference: [17] <author> S. Mittra. Iolus: </author> <title> A Framework for Scalable Secure Multicasting. </title> <booktitle> In Proceedings of ACM SIGCOMM '97. ACM, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: In the session key distribution message the new session key is encrypted under the shared secret key shared with each member. This is similar to the key distribution used during a LEAVE operation in the Iolus system <ref> [17] </ref>. The session leader caches the shared secret keys, so creating this message is fast: encryption of 24 bytes (8 bytes of new session key plus 16 bytes of new group identifier) per member. <p> Schemes that distribute a key to each member individually will transmit the same amount of data over many more messages. The Iolus system <ref> [17] </ref> mitigates the need for a large key distribution message by introducing subgroups. The subgroups form a hierarchy of groups to which the keying material is distributed. The keys cascade from supergroup to subgroup, thus reducing the size of any one distribution message. <p> The costs of the strong guarantees is very high: the authors state the latencies can exceed those of other published protocols by an order of magnitude. A limitation of many secure group communication systems is that they do not scale to larger networks. The Iolus system <ref> [17] </ref>, addresses this limitation. Scalability in Iolus is achieved by limiting the effects of membership changes to locally maintained subgroups. Each subgroup maintains its own session key, replaced after each membership change. While this approach is effective, little description about the delivery semantics is given.
Reference: [18] <author> P. Honeyman, A. Adamson, K. Coffman, J. Janakiraman, R. Jerdonek, and J. Rees. </author> <title> Secure Videoconferencing. </title> <booktitle> In Proceedings of the Seventh USENIX Security Symposium, </booktitle> <pages> pages 123130. </pages> <publisher> USENIX Association, </publisher> <month> January </month> <year> 1998. </year>
Reference-contexts: Modifications may be made to remove this latency by pre-encrypting each message while a previous message is being transmitted. Faster encryption schemes may also be used to decrease this cost. For example, the CITI secure videoconferencing system <ref> [18] </ref> uses two fast ciphers, RC4 and VRA, which have been found to be four and eight times faster than DES, respectively, when used as stream ciphers. In integrating our work with the CITI system, we will add support for these ciphers.
Reference: [19] <author> S. Paul, K. Sabnani, J. Lin, and S. Bhattacharyya. </author> <title> Reliable Multicast Transport Protocol (RMTP). </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 15(3):407421, </volume> <month> April </month> <year> 1997. </year> <month> 12 </month>
Reference-contexts: One possible result not shown in this figure is that the number of NAKs as a percentage the total traffic increases with group size. At some point, the overhead of NAK processing affects total throughput. This problem is known as acknowledgement implosion. Paul et al. <ref> [19] </ref> define a protocol in which a tree of multicast subgroups is connected. In each subgroup, a distinct member, known as the primary receiver performs acknowledgements for the group as a whole to a parent subgroup in the tree.
References-found: 19

