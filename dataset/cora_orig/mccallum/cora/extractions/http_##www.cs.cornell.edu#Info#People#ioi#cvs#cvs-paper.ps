URL: http://www.cs.cornell.edu/Info/People/ioi/cvs/cvs-paper.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/ioi/home.html
Root-URL: 
Email: berliner@prisma.com  
Title: CVS II: Parallelizing Software Dev elopment  
Author: Brian Berliner Prisma, Inc. Mark Dabling Blvd. 
Address: Springs, CO 80918  
Affiliation: Colorado  
Abstract: The program described in this paper fills a need in the UNIX community for a freely available tool to manage software revision and release control in a multi-developer, multi-directory, multi-group environment. This tool also addresses the increasing need for tracking third-party vendor source distributions while trying to maintain local modifications to earlier releases. 
Abstract-found: 1
Intro-found: 1
Reference: [Bell] <author> Bell Telephone Laboratories. </author> <title> Source Code Control System User's Guide. UNIX System III Programmer's Manual, </title> <month> October </month> <year> 1981. </year>
Reference-contexts: While undesirable in theory, it is not uncommon to have two or m ore people making modifications to the same file within the kernel sources in order to facilitate a desired change. Existing revision control systems like RCS [Tichy] or SCCS <ref> [Bell] </ref> serialize file modifications by allowing only one developer to have a writable copy of a particular file at any one point in time.
Reference: [Courington] <author> Courington, W. </author> <title> The Network Software Environment, </title> <type> Sun Technical Report FE197-0, </type> <institution> Sun Microsystems Inc, </institution> <month> February </month> <year> 1989. </year> <title> 6 cvs, of course, does not really discriminate against Mr. </title> <editor> Ed. </editor> <volume> 7 7 Yet. </volume> <month> -12- </month>
Reference: [Essick] <author> Essick, Raymond B. and Robert Bruce Kolstad. </author> <title> Notesfile Reference Manual, </title> <institution> Department of Computer Science Technical Report #1081, University of Illinois at Urbana-Champaign, Urbana, Illinois, </institution> <year> 1982, </year> <note> p. 26. </note>
Reference-contexts: Changes that they make are sent directly to their own notesfile <ref> [Essick] </ref> through the nfpipe program. A sufficiently simple title is substituted for the %s argument before the filter program is executed. This logging configuration file is tailored manually to each specific source repository environment. 2.5.
Reference: [Glew] <author> Glew, Andy. </author> <title> Boxes, Links, and Parallel Trees: Elements of a Configuration Management System. </title> <booktitle> Workshop Proceedings of the Software Management Confer ence, USENIX, </booktitle> <address> New Orleans, </address> <month> April </month> <year> 1989. </year>
Reference-contexts: We will make o ur code freely available so that others can benefit from our work, and can enhance cvs to meet broader needs yet. Many of the other software release and revision control systems, like the one described in <ref> [Glew] </ref>, appear to use a collection of tools that are geared toward specific environments one set of tools for the kernel, one set for generic software, one set for utilities, and one set for kernel and utilities.
Reference: [Grune] <author> Grune, Dick. </author> <title> Distributed the original shell script version of cvs in the comp.sources.unix volume 6 release in 1986. </title>
Reference: [Honda] <author> Honda, Masahiro and Terrence Miller. </author> <title> Software Management Using a CASE Environment. </title> <booktitle> Workshop Proceedings of the Software Management Conference, USENIX, </booktitle> <address> New Orleans, </address> <month> April </month> <year> 1989. </year>
Reference-contexts: It is the user's responsibility to resolve these conicts and to commit his/her changes when ready. Although the cvs conict-resolution algorithm was defined in 1986, it is remarkably similar to the Copy-Modify-Merge scenario included with NSE 5 and described in <ref> [Honda] </ref> and [Cour ington]. The following explanation from [Honda] also applies to cvs: Simply stated, a developer copies an object without locking it, modifies the copy, and then merges the modified copy with the original. <p> It is the user's responsibility to resolve these conicts and to commit his/her changes when ready. Although the cvs conict-resolution algorithm was defined in 1986, it is remarkably similar to the Copy-Modify-Merge scenario included with NSE 5 and described in <ref> [Honda] </ref> and [Cour ington]. The following explanation from [Honda] also applies to cvs: Simply stated, a developer copies an object without locking it, modifies the copy, and then merges the modified copy with the original. This paradigm allows developers to work in isolation from one another since changes are made to copies of objects.
Reference: [Mahler] <author> Mahler, Alex and Andreas Lampen. </author> <title> An Integrated Toolset for Engineering Software Configurations. </title> <booktitle> Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, ACM, </booktitle> <address> Boston, </address> <month> November </month> <year> 1988. </year> <note> Described is the shape toolkit posted to the comp.sources.unix newsgroup in the volume 19 release. </note>
Reference-contexts: Support for producing objects for multiple architectures is not addressed; instead, a parallel checked-out source tree must be used for each architecture, again wasting disk space to simplify complexity and ease of use punting on this issue allowed Makefiles to remain unchanged, unlike the approach taken in <ref> [Mahler] </ref>, thereby maintaining closer compatibility with the third-party vendor sources. cvs is essentially a source-file server, making no assumptions or special handling of the sources that it controls. To cvs: A source is a source, of course, of course, unless of course the source is Mr.
Reference: [Tichy] <author> Tichy, Walter F. </author> <title> Design, Implementation, and Evaluation of a Revision Control System. </title> <booktitle> Proceedings of the 6th International Conference on Software Engineer ing, IEEE, </booktitle> <address> Tokyo, </address> <month> September </month> <year> 1982. </year>
Reference-contexts: While undesirable in theory, it is not uncommon to have two or m ore people making modifications to the same file within the kernel sources in order to facilitate a desired change. Existing revision control systems like RCS <ref> [Tichy] </ref> or SCCS [Bell] serialize file modifications by allowing only one developer to have a writable copy of a particular file at any one point in time.
Reference: [Wall] <author> Wall, Larry. </author> <title> The patch program is an indispensable tool for applying a diff file to an original. </title> <note> Can be found on uunet.uu.net in ~ftp/pub/patch.tar. </note>
Reference-contexts: As well, a date can be used to check out the exact ver sion of the software release as of the specified date. 6. A patch format file <ref> [Wall] </ref> can be produced between two software releases, even if the releases span multiple directories. The sources maintained by cvs are kept within a single directory hierarchy known as the source repository. <p> This, combined with reasons of performance, is why cvs processes revision (symbolic and numeric) and date specifications directly from the ,v files. 2.6. Building patch Source Distributions cvs can produce a patch format <ref> [Wall] </ref> output file which can be used to bring a previously released software distribution current with the newest release. This patch file supports an entire directory hierarchy within a single patch, as well as being able to add whole new files to the previous release.
References-found: 9

