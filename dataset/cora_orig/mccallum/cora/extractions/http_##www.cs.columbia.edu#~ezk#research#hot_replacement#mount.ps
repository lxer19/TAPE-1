URL: http://www.cs.columbia.edu/~ezk/research/hot_replacement/mount.ps
Refering-URL: http://www.cs.columbia.edu/~ezk/research/index.html
Root-URL: http://www.cs.columbia.edu
Title: Discovery and Hot Replacement of Replicated Read-Only File Systems, with Application to Mobile Computing  
Author: Erez Zadok and Dan Duchamp 
Affiliation: Computer Science Department Columbia University  
Abstract: We describe a mechanism for replacing files, including open files, of a read-only file system while the file system remains mounted; the act of replacement is transparent to the user. Such a "hot replacement" mechanism can improve fault-tolerance, performance, or both. Our mechanism monitors, from the client side, the latency of operations directed at each file system. When latency degrades, the client automatically seeks a replacement file system that is equivalent to but hopefully faster than the current file system. The files in the replacement file system then take the place of those in the current file system. This work has particular relevance to mobile computers, which in some cases might move over a wide area. Wide area movement can be expected to lead to highly variable response time, and give rise to three sorts of problems: increased latency, increased failures, and decreased scalability. If a mobile client moves through regions having partial replicas of common file systems, then the mobile client can depend on our mechanism to provide increased fault tolerance and more uniform performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta. </author> <title> Resource Location Protocol. </title> <type> RFC 887, </type> <institution> IETF Network Working Group, </institution> <month> December </month> <year> 1983. </year>
Reference-contexts: Finally, we added fields to three major kernel data structures: vnode and vfs structures and the open file table. 2.2 RLP We use the RLP resource location protocol <ref> [1] </ref> when seeking a replacement file system. RLP is a general-purpose protocol that allows a site to send broadcast or unicast request messages asking either of two questions: 2 Copen () is the common code for open () and create (). 1. Do you (recipient site) provide this service? 2.
Reference: [2] <author> B. Callaghan and T. Lyon. </author> <booktitle> The Automounter. In Proc. 1989 Winter USENIX Conf., </booktitle> <pages> pages 43-51, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: The nfsmgrd at the site that originated the search uses the first response it gets; we suppose that the speed with which a server responds to the RLP request gives a hint about its future performance. (The Sun Automounter <ref> [2] </ref> makes the same assumption about replicated file servers.) If a read-only replacement file system is available, nfsmgrd instructs Amd to mount it and terminates the out-of-kernel RPC, telling the kernel the names of the replacement server and file system.
Reference: [3] <author> D. C. Cox. </author> <title> A Radio System Proposal for Widespread Low-power Tetherless Communication. </title> <journal> IEEE Trans. Communications, </journal> <volume> 39(2) </volume> <pages> 324-335, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: 1 Introduction The strongest trend in the computer industry today is the miniaturization of workstations into portable "notebook" or "palmtop" computers. Wireless network links <ref> [3] </ref> and new internetworking technology [8] offer the possibility that computing sessions could run without interruption even as computers move, using information services drawn from an infrastructure of (mostly) stationary servers.
Reference: [4] <author> P. Honeyman. </author> <title> Taking a LITTLE WORK Along. </title> <type> CITI Report 91-5, </type> <institution> Univ. of Michigan, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: The IFS project has also begun to investigate alterations to AFS in support of mobile computers <ref> [4] </ref>. Specifically, they are investigating cache pre-loading techniques for disconnected operation and transport protocols that are savvy about the delays caused by "cell handoff" | the time during which a mobile computer moves from one network to another.
Reference: [5] <author> J. Howe. </author> <title> Intermediate File Servers in a Distributed File System Environment. </title> <type> CITI Report 92-4, </type> <institution> Univ. of Michigan, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Such file systems have the advantages of a cache consistency protocol and a security model that recognizes the existence of many administrative domains. Large scale file systems include AFS [6] and its spinoffs, Decorum [10] and IFS (Institutional File System) <ref> [5] </ref>. Experiments involving AFS as a "nation-wide" file service have been going on for years [23]. This effort has focused on stitching together distinct administrative domains so as to provide a single unified naming and protection space.
Reference: [6] <author> J. H. Howard et al. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: An obvious alternative to our NFS-based effort is to employ a file system designed for wide-area and/or multi-domain operation. Such file systems have the advantages of a cache consistency protocol and a security model that recognizes the existence of many administrative domains. Large scale file systems include AFS <ref> [6] </ref> and its spinoffs, Decorum [10] and IFS (Institutional File System) [5]. Experiments involving AFS as a "nation-wide" file service have been going on for years [23]. This effort has focused on stitching together distinct administrative domains so as to provide a single unified naming and protection space.
Reference: [7] <author> J. Ioannidis et al. </author> <title> Protocols for Supporting Mobile IP Hosts Draft RFC, IETF Mobile Hosts Working Group, </title> <month> June </month> <year> 1992. </year>
Reference-contexts: Note that for a client to continue use of a file system as it moves, there must be underlying network support that permits the movement of a computer from one network to another without interruption of its sessions. Several such schemes have been developed <ref> [8, 7, 28, 29] </ref>. The remainder of this paper is organized as follows. In order to make a self-contained presentation, Section 2 provides brief explanations of other systems that we use in constructing ours. Section 3 outlines our design and Section 4 evaluates the work.
Reference: [8] <author> J. Ioannidis, D. Duchamp and G. Q. Maguire Jr. </author> <title> IP-based Protocols for Mobile Internetworking. </title> <booktitle> In Proc. SIGCOMM '91, </booktitle> <pages> pages 235-245. </pages> <publisher> ACM, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: 1 Introduction The strongest trend in the computer industry today is the miniaturization of workstations into portable "notebook" or "palmtop" computers. Wireless network links [3] and new internetworking technology <ref> [8] </ref> offer the possibility that computing sessions could run without interruption even as computers move, using information services drawn from an infrastructure of (mostly) stationary servers. <p> Note that for a client to continue use of a file system as it moves, there must be underlying network support that permits the movement of a computer from one network to another without interruption of its sessions. Several such schemes have been developed <ref> [8, 7, 28, 29] </ref>. The remainder of this paper is organized as follows. In order to make a self-contained presentation, Section 2 provides brief explanations of other systems that we use in constructing ours. Section 3 outlines our design and Section 4 evaluates the work.
Reference: [9] <author> C. Juszczak. </author> <title> Improving the Performance and Correctness of an NFS Server. </title> <booktitle> In Proc. 1989 Winter USENIX Conf., </booktitle> <pages> pages 53-63, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: We have changed the kernel's client-side NFS implementation, and outside the operating system we have made use of the Amd automounter and the RLP resource location protocol. Each is explained briefly below. 2.1 NFS Particulars about the NFS protocol and implementation are widely known and published <ref> [20, 12, 9, 19] </ref>.
Reference: [10] <author> M. L. Kazar et al. </author> <title> Decorum File System Architectural Overview. </title> <booktitle> In Proc. 1990 Summer USENIX Conf., </booktitle> <pages> pages 151-163, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Such file systems have the advantages of a cache consistency protocol and a security model that recognizes the existence of many administrative domains. Large scale file systems include AFS [6] and its spinoffs, Decorum <ref> [10] </ref> and IFS (Institutional File System) [5]. Experiments involving AFS as a "nation-wide" file service have been going on for years [23]. This effort has focused on stitching together distinct administrative domains so as to provide a single unified naming and protection space.
Reference: [11] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Accordingly, we know of no work other than our own (already cited) on the topic of adaptive, dynamic mounting. The Coda file system [21] supposes that mobile computing will take place in the form of "disconnected operation," and describes in <ref> [11] </ref> a method in which the user specifies how to "stash" (read/write) files before disconnection and then, upon reconnection, have the file service run an algorithm to detect version skew.
Reference: [12] <author> S. R. Kleiman. Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun Unix. </title> <booktitle> In Proc. 1986 Summer USENIX Conf., </booktitle> <pages> pages 238-247, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: We have changed the kernel's client-side NFS implementation, and outside the operating system we have made use of the Amd automounter and the RLP resource location protocol. Each is explained briefly below. 2.1 NFS Particulars about the NFS protocol and implementation are widely known and published <ref> [20, 12, 9, 19] </ref>.
Reference: [13] <author> D. Nachbar. </author> <title> Spiff A Program for Making Controlled Approximate Comparisons of Files. </title> <booktitle> In Proc. 1986 Summer USENIX Conf., </booktitle> <pages> pages 238-247, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Another example is that data files may be equal except for gratuitous differences in floating-point format (e.g., 1.7 vs. 1.7000 vs. 1.70e01). Source files may be compared ignoring comments and/or white space. Intelligent comparison programs like diff or spiff <ref> [13] </ref> know how to discount certain simple differences.
Reference: [14] <author> J. Ousterhout et al. </author> <title> A Trace-Driven Analysis of the UNIX 4.2 BSD File System. </title> <booktitle> In Proc. Tenth ACM Symp. on Operating System Principles, </booktitle> <pages> pages 15-24, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Two such bounding policies that we have investigated are, first, switching only N vnodes per call, and, second, switching only vnodes that have been accessed in the past M time units. Assuming that file access is bursty (a contention supported by statistics <ref> [14] </ref>), the latter policy reduces the amount of time wasted switching vnodes that will never be used again.
Reference: [15] <author> J. Pendry and N. Williams. </author> <title> Amd The 4.4 BSD Automounter. </title> <institution> Imperial College of Science, Technology, and Medicine, </institution> <address> London, 5.3 alpha edition, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Since we search for an NFS-mountable file system, our RLP request messages contain information such as the NFS transport protocol (UDP [16]), port number (2049) and service-specific information such as the name of the root of the file system. 2.3 Amd Amd <ref> [15] </ref> is a widely-used automounter daemon. Its most common use is to demand-mount file systems and later unmount them after a period of disuse; however, Amd has many other capabilities. Amd operates by mimicking an NFS server.
Reference: [16] <author> J. Postel. </author> <title> User Datagram Protocol. </title> <type> RFC 768, </type> <institution> IETF Network Working Group, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: Since we search for an NFS-mountable file system, our RLP request messages contain information such as the NFS transport protocol (UDP <ref> [16] </ref>), port number (2049) and service-specific information such as the name of the root of the file system. 2.3 Amd Amd [15] is a widely-used automounter daemon.
Reference: [17] <author> D. Presotto et al. </author> <title> Plan 9, A Distributed System. </title> <booktitle> In Proc. Spring 1991 EurOpen Conf., </booktitle> <pages> pages 43-50, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In particular, file systems can be mounted "before" or "after" file systems already mounted at the same point. The before/after concept replaces the notion of a search path. Plan 9 also supports the notion of a "union mount" <ref> [17] </ref>. The Plan 9 bind mechanism is a more elegant alternative to our double mounting plus comparison. However, a binding mechanism | even an unusually flexible one such as that of Plan 9 | addresses only part of the problem of switching between file systems.
Reference: [18] <author> R. Rivest. </author> <title> The MD4 Message-Digest Algorithm. </title> <type> RFC 1186, </type> <institution> IETF Network Working Group, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: This flow of control is depicted in Figure 5. Presently, we are performing file checksum comparison: nfsmgrd calls a checksumd daemon on each of the file servers, requesting the checksum of the file being compared. Checksumd, which we have written for this work, computes MD4 <ref> [18] </ref> file checksums on demand and then stores them for later use; checksums can also be pre-computed and stored. Nfsmgrd collects the two checksums, compares them, and responds to the kernel, telling au lookuppn () which pathname to use, always indicating the file on the replacement file system if possible.
Reference: [19] <author> D. S. H. Rosenthal. </author> <title> Evolving the Vnode Interface. </title> <booktitle> In Proc. 1990 Summer USENIX Conf., </booktitle> <pages> pages 107-117, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: We have changed the kernel's client-side NFS implementation, and outside the operating system we have made use of the Amd automounter and the RLP resource location protocol. Each is explained briefly below. 2.1 NFS Particulars about the NFS protocol and implementation are widely known and published <ref> [20, 12, 9, 19] </ref>.
Reference: [20] <author> R. Sandberg et al. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> In Proc. 1985 Summer USENIX Conf., </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: We have changed the kernel's client-side NFS implementation, and outside the operating system we have made use of the Amd automounter and the RLP resource location protocol. Each is explained briefly below. 2.1 NFS Particulars about the NFS protocol and implementation are widely known and published <ref> [20, 12, 9, 19] </ref>.
Reference: [21] <author> M. Satyanarayanan et al. Coda: </author> <title> A Highly Available File System for a Distributed Workstation Environment. </title> <journal> IEEE Trans. Computers, </journal> <volume> 39(4) </volume> <pages> 447-459, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The notion of constantly-networked, portable computers running modern operating systems is relatively new. Accordingly, we know of no work other than our own (already cited) on the topic of adaptive, dynamic mounting. The Coda file system <ref> [21] </ref> supposes that mobile computing will take place in the form of "disconnected operation," and describes in [11] a method in which the user specifies how to "stash" (read/write) files before disconnection and then, upon reconnection, have the file service run an algorithm to detect version skew.
Reference: [22] <author> S. Shafer and M. R. Thompson. </author> <title> The SUP Software Upgrade Protocol. </title> <note> Unpublished notes available by ftp from mach.cs.cmu.edu:/mach3/doc/unpublished/sup/sup.doc </note>
Reference-contexts: updated 8 while being read exists independently of our work, and our work does not increase the danger. 6 That is, they are exported as read-only to some hosts, although they might be exported as read-write to others. 7 An example of "careful update" is provided by the SUP utility <ref> [22] </ref>. 8 That is, updated by a host to which the file system is exported read-write. We allow for a replacement file system to be itself replaced. This raises the possibility of creating a "chain" of replacement file systems.
Reference: [23] <author> A. Z. Spector and M. L. Kazar. </author> <title> Uniting File Systems. </title> <journal> UNIX Review, </journal> <volume> 7(3) </volume> <pages> 61-71, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Large scale file systems include AFS [6] and its spinoffs, Decorum [10] and IFS (Institutional File System) [5]. Experiments involving AFS as a "nation-wide" file service have been going on for years <ref> [23] </ref>. This effort has focused on stitching together distinct administrative domains so as to provide a single unified naming and protection space. However, some changes are needed to the present authentication model in order to support the possibility of a mobile client relocating in a new domain.
Reference: [24] <author> J. G. Steiner, C. Neuman, and J. I. Schiller. </author> <title> Kerberos: An Authentication Service for Open Network Systems. </title> <booktitle> In Proc. 1988 Winter USENIX Conf., </booktitle> <pages> pages 191-202, </pages> <month> February, </month> <year> 1988. </year>
Reference-contexts: The most recent version of Kerberos contains improved support for cross-domain authentication, so another step in the right direction would be to integrate the latest Kerberos with NFS, perhaps as originally sketched in <ref> [24] </ref>. Another desirable idea is to convert from using a single method of exact file comparison (i.e., checksumd) to per-user, possibly inexact comparison.
Reference: [25] <author> C. Tait and D. Duchamp. </author> <title> Detection and Exploitation of File Working Sets. </title> <booktitle> In Proc. Eleventh Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 2-9. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: As the client moves, the file service must be able to provide service first from one server, then from another. This switching mechanism should require no action on the 1 Examples of such re-thinking can be found in <ref> [25] </ref> and [26]. part of administrators (since presumably too many clients will move too often and too quickly for administrators to track conveniently) and should be invisible to users, so that users need not become system administrators.
Reference: [26] <author> C. Tait and D. Duchamp. </author> <title> Service Interface and Replica Consistency Algorithm for Mobile File System Clients. </title> <booktitle> In Proc. First Intl. Conf. on Parallel and Distributed Information Systems, </booktitle> <pages> pages 190-197. </pages> <publisher> IEEE, </publisher> <month> December </month> <year> 1991. </year>
Reference-contexts: As the client moves, the file service must be able to provide service first from one server, then from another. This switching mechanism should require no action on the 1 Examples of such re-thinking can be found in [25] and <ref> [26] </ref>. part of administrators (since presumably too many clients will move too often and too quickly for administrators to track conveniently) and should be invisible to users, so that users need not become system administrators.
Reference: [27] <author> C. Tait and D. Duchamp. </author> <title> An Efficient Variable Consistency Replicated File Service. </title> <booktitle> In File Systems Workshop, </booktitle> <pages> pages 111-126. </pages> <publisher> USENIX, </publisher> <month> May </month> <year> 1992. </year>
Reference-contexts: Most newer file service designs include cache consistency protocols. However, such protocols are not necessarily a panacea. Too much interaction between client and server can harm performance, especially if these interactions take place over a long distance and/or a low bandwidth connection. See <ref> [27] </ref> for a design that can ensure consistency with relatively little client-server interaction. The primary drawback of using NFS for mobile computing is its limited security model.
Reference: [28] <author> F. Teraoka, Y. Yokote, and M. Tokoro. </author> <title> A network Architecture Providing Host Migration Transparency. </title> <booktitle> In Proc. SIGCOMM '91, </booktitle> <pages> pages 209-220. </pages> <publisher> ACM, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: Note that for a client to continue use of a file system as it moves, there must be underlying network support that permits the movement of a computer from one network to another without interruption of its sessions. Several such schemes have been developed <ref> [8, 7, 28, 29] </ref>. The remainder of this paper is organized as follows. In order to make a self-contained presentation, Section 2 provides brief explanations of other systems that we use in constructing ours. Section 3 outlines our design and Section 4 evaluates the work.

References-found: 28

