URL: http://www.cs.nmsu.edu/~jcook/TclTk/AsserTclInfo/AssertTcl.ps.gz
Refering-URL: http://www.cs.nmsu.edu/~jcook/TclTk/AsserTclInfo/
Root-URL: http://www.cs.nmsu.edu
Email: jcook@cs.nmsu.edu  
Title: Assertions for the Tcl Language  
Author: Jonathan E. Cook 
Date: February 11, 1997 10:31  
Note: DRAFT:  
Abstract: This paper describes assertions for the Tcl/Tk programming language. Assertions take the form of statements in the program text, and cover point assertions about the computation state, assertions about procedure input values and return value, and assertions about the values that variables may take on over their whole lifetime. In addition, universal and existential quantifiers are provided for both lists and arrays, not only for individual elements but for sequences of elements as well. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Auguston, S. Banerjee, M. Mamnani, G. Nabi, J. Reinfelds, U. Sarkans, and I. Strnad. </author> <title> A Debugger and Assertion Checker for the Awk Programming Language. </title> <booktitle> In Proc. International Conference on Software Engineering: Education and Practice, </booktitle> <address> Dunedin, New Zealand, </address> <year> 1996. </year>
Reference-contexts: Most programming languages are not designed to include assertions, with the notable exception being Eiffel [3], but efforts have produced annotation languages for Ada [2], C [4], Awk <ref> [1] </ref>, and others. This paper describes assertions for the Tcl programming language, an interpreted, untyped, imperative language based on lists. Tcl is a popular, interpreted, "scripting" language.
Reference: [2] <author> David Luckham. </author> <title> Programming with Specifications: An introduction to Anna, a language for specifying Ada programs. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Assertions|declarative annotations to a program that describe some property about the program and its state|are a useful tool in producing robust software. Most programming languages are not designed to include assertions, with the notable exception being Eiffel [3], but efforts have produced annotation languages for Ada <ref> [2] </ref>, C [4], Awk [1], and others. This paper describes assertions for the Tcl programming language, an interpreted, untyped, imperative language based on lists. Tcl is a popular, interpreted, "scripting" language. <p> Tcl is an evolving language, and the next version will have namespaces, which will be akin to packages or modules. Earlier work on Ada packages <ref> [2] </ref> and Eiffel objects [3] have shown that modules present interesting issues in developing effective assertions for them. In addition, object oriented extensions to Tcl exist, and these can provide a platform for exploring issues about assertions for classes and objects.
Reference: [3] <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Assertions|declarative annotations to a program that describe some property about the program and its state|are a useful tool in producing robust software. Most programming languages are not designed to include assertions, with the notable exception being Eiffel <ref> [3] </ref>, but efforts have produced annotation languages for Ada [2], C [4], Awk [1], and others. This paper describes assertions for the Tcl programming language, an interpreted, untyped, imperative language based on lists. Tcl is a popular, interpreted, "scripting" language. <p> Tcl is an evolving language, and the next version will have namespaces, which will be akin to packages or modules. Earlier work on Ada packages [2] and Eiffel objects <ref> [3] </ref> have shown that modules present interesting issues in developing effective assertions for them. In addition, object oriented extensions to Tcl exist, and these can provide a platform for exploring issues about assertions for classes and objects.
Reference: [4] <author> David S. Rosenblum. </author> <title> A Practical Approach to Programming with Assertions. </title> <journal> IEEE Transactions on Software Engineering, </journal> <year> 1995. </year> <month> 9 </month>
Reference-contexts: 1 Introduction Assertions|declarative annotations to a program that describe some property about the program and its state|are a useful tool in producing robust software. Most programming languages are not designed to include assertions, with the notable exception being Eiffel [3], but efforts have produced annotation languages for Ada [2], C <ref> [4] </ref>, Awk [1], and others. This paper describes assertions for the Tcl programming language, an interpreted, untyped, imperative language based on lists. Tcl is a popular, interpreted, "scripting" language.
References-found: 4

