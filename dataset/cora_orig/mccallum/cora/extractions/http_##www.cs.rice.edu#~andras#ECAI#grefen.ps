URL: http://www.cs.rice.edu/~andras/ECAI/grefen.ps
Refering-URL: http://www.cs.rice.edu/~andras/ECAI/grefenstette.html
Root-URL: 
Email: Gregory.Grefenstette@Grenoble.RXRC.Xerox.com  
Title: Light Parsing as Finite-State Filtering  
Author: Gregory Grefenstette 
Address: 38240 Meylan, France  
Affiliation: Rank Xerox Research Centre 6 Chemin de Maupertuis  
Abstract: For a number of language processing tasks, such as information retrieval and information extraction tasks, pertinent information can be extracted from text without doing a full parse of the individual sentences. The most common restriction of the parser is to adopt a non-recursive model of the language treated, which allows an implementation of the parser using efficient finite-state tools at the cost of missing some coverage. These light parsers allow the successive introduction of symbols into the input string wherever specified regular expressions of words and/or part-of-speech tags 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Steven Abney, </author> <title> `Parsing by chunks', in Principle-Based Parsing, </title> <editor> eds., Steven Abney Robert Berwick and Carol Tenny, </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> (1991). </year>
Reference-contexts: In such applications as terminology extraction, lexicography, or information retrieval, one of the purposes of parsing is to recognize recurring lexical syntactic patterns and their variants. The parser used need be no more powerful than is necessary to recognize these patterns. Many such parsers [5] [7] [6] <ref> [1] </ref> [2] employ deterministic finite state recognizers over part-of-speech tagged text by first marking contiguous patterns as noun and verb groups, then marking heads within groups, and then extracting patterns between non-contiguous heads.
Reference: [2] <author> Douglas E. Appelt, Jerry R. Hobbs, John Bear, David Israel, and Mabry Tyson, `FASTUS: </author> <title> A finite-state processor for information extraction from real-word text', </title> <booktitle> in Proceedings IJCAI '93, </booktitle> <address> Chambery, France, </address> <month> (August </month> <year> 1993). </year>
Reference-contexts: In such applications as terminology extraction, lexicography, or information retrieval, one of the purposes of parsing is to recognize recurring lexical syntactic patterns and their variants. The parser used need be no more powerful than is necessary to recognize these patterns. Many such parsers [5] [7] [6] [1] <ref> [2] </ref> employ deterministic finite state recognizers over part-of-speech tagged text by first marking contiguous patterns as noun and verb groups, then marking heads within groups, and then extracting patterns between non-contiguous heads.
Reference: [3] <author> J.P. Chanod and P. Tapanainen, </author> <title> `A robust finite-state grammar for french', </title> <type> Technical report, </type> <institution> Rank Xerox Research Centre, Meylan, France, </institution> <year> (1996). </year>
Reference-contexts: Light Parsing as Finite-State Filtering 24 G. Grefenstette filters produce reliable results over a large corpus. Meanwhile, current research <ref> [3] </ref> in finite-state grammars is proving that an extremely high-level of accuracy is possible using finite-state rules.
Reference: [4] <author> Kenneth Church, </author> <title> `A stochastic parts program and noun phrase parser for unrestricted text', </title> <booktitle> Proceedings of the 2nd Conference on Applied Natural Language Processing, </booktitle> <pages> 136-143, </pages> <year> (1988). </year>
Reference-contexts: oxygen/NN to/IN the/AT ewe/NN for/IN 1/CD hour/NN prior/NN to/IN delivery/NN NG&gt; &lt;VG did/DOD not/NOT alter/VB VG&gt; &lt;NG the/AT surfactant/JJ properties/NNS of/IN the/AT fetal/JJ tracheal/JJ fluid/NN NG&gt; 3 We adopt a prescriptive, rule-based, approach to such phrasal isolation, rather than a stochastic approach which recognizes small nominal chunks such as in <ref> [4] </ref>.
Reference: [5] <author> Fathi Debili, </author> <title> Analyse Syntaxico-Semantique Fondee sur une Acquisition Automatique de Relations Lexicales-Semantiques, </title> <type> Ph.D. dissertation, </type> <institution> University of Paris XI, France, </institution> <year> 1982. </year>
Reference-contexts: In such applications as terminology extraction, lexicography, or information retrieval, one of the purposes of parsing is to recognize recurring lexical syntactic patterns and their variants. The parser used need be no more powerful than is necessary to recognize these patterns. Many such parsers <ref> [5] </ref> [7] [6] [1] [2] employ deterministic finite state recognizers over part-of-speech tagged text by first marking contiguous patterns as noun and verb groups, then marking heads within groups, and then extracting patterns between non-contiguous heads. <p> In his dissertation work, Debili (1982) <ref> [5] </ref> used part-of-speech precedence matrices, coupled with vectors describing possible starting and ending parts-of-speech, to describe the contour of nominal and verbal groups. Such matrices can be easily created in our finite-state calculus notation as shown in figure 1. <p> At the same time, a relation marking is inserted after the last word. Schematically this gives the following structure: [ ]:LEFTCONTEXT token [ ]:MIDDLE token relation:[ ] [ ]:RIGHTCONTEXT Similar syntactic filters were described and implemented in 1982 by Debili <ref> [5, p. 99] </ref>. Having introduced nominal and verbal group delimiters and labeled heads within these groups makes it easier to write expressions that filter out syntactic functions between words.
Reference: [6] <author> G. Grefenstette, </author> <title> `Use of syntactic context to produce term association lists for text retrieval', </title> <booktitle> in Proceedings of SIGIR'92, </booktitle> <address> Copenhagen, Denmark, </address> <month> (June 21-24 </month> <year> 1992). </year> <note> ACM. </note>
Reference-contexts: In such applications as terminology extraction, lexicography, or information retrieval, one of the purposes of parsing is to recognize recurring lexical syntactic patterns and their variants. The parser used need be no more powerful than is necessary to recognize these patterns. Many such parsers [5] [7] <ref> [6] </ref> [1] [2] employ deterministic finite state recognizers over part-of-speech tagged text by first marking contiguous patterns as noun and verb groups, then marking heads within groups, and then extracting patterns between non-contiguous heads.
Reference: [7] <author> Gregory Grefenstette, </author> <title> Linguistic treatments applied to Information Retrieval (Traitements Linguistiques Appliquees a la Documentation Automatique), </title> <institution> University of Paris XI, Orsay, France, </institution> <year> 1983. </year>
Reference-contexts: In such applications as terminology extraction, lexicography, or information retrieval, one of the purposes of parsing is to recognize recurring lexical syntactic patterns and their variants. The parser used need be no more powerful than is necessary to recognize these patterns. Many such parsers [5] <ref> [7] </ref> [6] [1] [2] employ deterministic finite state recognizers over part-of-speech tagged text by first marking contiguous patterns as noun and verb groups, then marking heads within groups, and then extracting patterns between non-contiguous heads.
Reference: [8] <author> Lauri Karttunen, </author> <title> `Directed replacement', </title> <booktitle> in Proceedings of the 34rd Annual Meeting of the ACL, </booktitle> <address> Santa Cruz, CA, </address> <year> (1996). </year>
Reference-contexts: Other finite-state transducers can be composed with these marking transducers to be used as filters to extract and label a wide variety of n-ary dependency syntactic dependency relations between words. Recent advances in finite-state calculus and finite-state compilers <ref> [8] </ref> allow for more powerful and more elegant descriptions of the patterns to be recognized, making parser writing and maintenance easier. In this paper, we briefly review finite-state transducers, and their application as text markers and filters. <p> Such matrices can be easily created in our finite-state calculus notation as shown in figure 1. The noun group recognizing machine described by this regular expression is given the alias NP. transducer using the deterministic replacement <ref> [8] </ref> operator @-&gt; and the insertion point symbol three dots (...). This transducer unambiguously inserts noun group (&lt;NG and NG&gt;) markers around the longest instances of these groups in each sentence.
Reference: [9] <author> Mehryar Mohri, </author> <title> `Finite-state transducers in language and speech processing', </title> <journal> Computational Linguistics, </journal> <volume> 20(1), </volume> <year> (1994). </year> <title> Light Parsing as Finite-State Filtering 25 G. </title> <type> Grefenstette </type>
Reference-contexts: An arc written as [ ]:x consumes an input x without producing an output, and an arc written as y:[ ] outputs one y without consuming any input. 1 See <ref> [9] </ref> for a formal treatment of the realization of deterministic transducers such as those used in this article. 2 In our notation the epsilon symbol is written as a [ ], a pair of empty brackets. c fl 1996 G.
References-found: 9

