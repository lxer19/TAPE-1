URL: http://http.cs.berkeley.edu/~jjones/Work/sosdelir.ps
Refering-URL: http://http.cs.berkeley.edu/~jjones/Work/
Root-URL: http://www.cs.berkeley.edu
Title: A Structured Operational Semantics for Delirium  
Author: Jeff Jones Kannan Muthukkaruppan 
Date: October 9, 1994  
Abstract: Coordination languages are a useful tool for expressing parallelism. Such languages provide a framework for communication and synchronization of sub-computations, which are functions written in a sequential language to perform the actual computation. The appropriate constraints on these sub-computations is a difficult question. With strong constraints, proofs of program properties, such as correctness and liveness are easy to derive, but the programs are difficult to write. With weaker constraints, programs are easier to write, but proofs become much more difficult. To help explore this question, we present a structured operational semantics for the coordination language Delirium. The operational semantics is intended to be a formal framework for further examination of the constraints on subcomputations.
Abstract-found: 1
Intro-found: 1
Reference: [Lucco & Sharp 1990a] <author> Steven Lucco and Oliver Sharp, "Delirium: </author> <title> An Embedding Coordination Language", </title> <booktitle> Proceedings of Supercomputing, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Coordination languages, specifically embedding coordination languages, such as Delirium <ref> [Lucco & Sharp 1990a] </ref>, [Lucco & Sharp 1990b] are useful tools for parallel programming.
Reference: [Lucco & Sharp 1990b] <author> Steven Lucco and Oliver Sharp, </author> <title> "Parallel Programming With Coordination Structures", </title> <booktitle> Principles and Practice of Parallel Programming, </booktitle> <year> 1990. </year>
Reference-contexts: 1 Introduction Coordination languages, specifically embedding coordination languages, such as Delirium [Lucco & Sharp 1990a], <ref> [Lucco & Sharp 1990b] </ref> are useful tools for parallel programming. They allow the development of a parallel program from a sequential program with a minimum of changes to the code, because existing functions can be called as sub-computations and communication and synchronization can be handled completely by the coordination language. <p> It is a single assignment language. The Delirium program consists of a set of functions, one of which must be main. All Delirium functions are first-class values. Here, we consider only Basic Delirium, which we feel captures the interesting features. For a description of the full language, see <ref> [Lucco & Sharp 1990b] </ref>. Basic Delirium supports the following constructs: * Literals: integers, strings, floats. * Tuples: packages that can be constructed, decomposed or used as return values. * Let: let bindings are used to associate identifiers (or a tuple of identifiers) with expressions.
Reference: [Chandy & Taylor 1992] <author> K. Mani Chandy and Stephen Taylor, </author> <title> An Introduction to Parallel Programming, </title> <publisher> Jones and Bartlett, </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: This is intended to make formal methods available for analysis of this problem. The key ideas in the operational semantics are the candidate set and the pending set. The candidate set is used as the means of expressing parallelism, similar to that used in <ref> [Chandy & Taylor 1992] </ref>. It is a set of expressions which are available for evaluation. At each step of the execution, one of these expressions is chosen and evaluated. This evaluation may cause more expressions to 1 be added to the candidate set.
Reference: [Sharp 1990] <author> Oliver Sharp, </author> <title> "Pythia: A Parallel Compiler for Delirium," </title> <type> Master's thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1990. </year> <month> 12 </month>
References-found: 4

