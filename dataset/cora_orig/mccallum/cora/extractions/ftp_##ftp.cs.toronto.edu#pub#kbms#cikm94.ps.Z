URL: ftp://ftp.cs.toronto.edu/pub/kbms/cikm94.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/kbms/readme.html
Root-URL: 
Email: kcsg@cs.toronto.edu  
Title: Quantitative Evaluation of a Transaction Facility for a Knowledge Base Management System  
Author: Vinay K. Chaudhri Vassos Hadzilacos John Mylopoulos Kenneth C. Sevcik fvinay, vassos, jm, 
Address: Toronto, M5S 1A4, Canada  
Affiliation: Department of Computer Science, University of Toronto,  
Abstract: Large knowledge bases that are intended for applications such as CAD, corporate repositories or process control will have to be shared by multiple users. For these systems to scale up, to give acceptable performance and to exhibit consistent behavior, it is mandatory to synchronize user transactions using a concurrency control algorithm. In this paper, we examine a novel concurrency control policy called Dynamic Directed Graph (or DDG) policy that effectively exploits the rich semantic structure of a knowledge base. Our analysis is carried out in the context of a real knowledge based system application from which knowledge base structure and workload parameters are computed. These serve as a basis for studying the implementation alternatives that arise as a result of knowledge base characteristics. The implementation alternatives that we consider include selection of portions of the knowledge base structure to be exploited for concurrency control, and also the dependence of concurrency on the traversal strategy used to search through the knowledge base. We analyze the effects of various workload parameters and conclude that the DDG policy improves substantially the response time for short transactions when there is heavy data contention. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. E. Abbadi. </author> <title> Locks with Constrained Sharing. </title> <booktitle> In 9TH ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 85-93, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: lead to improvement in Class 2 response times regardless of whether the knowledge base is stored on disk or in main memory. 6 Related Work and Conclusions There have been several other proposals for locking policies that accommodate more concurrency than 2PL, for example, ordered shared locking and altruistic locking <ref> [1, 22] </ref>. These policies have potential for knowledge bases as well.
Reference: [2] <author> R. Agrawal, M. J. Carey, and M. Livny. </author> <title> Concurrency Control Performance Modeling: Alternatives and Implications. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 609-654, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: The components of our model and their inter-connections are shown in Figure 1. Our model is based on an earlier model which is often used in the performance studies of concurrency control algorithms <ref> [2] </ref>. The parameters of the simulation model are shown in Table 2. Here we only highlight the differences between our model and the one used in the previous studies [2]. <p> Our model is based on an earlier model which is often used in the performance studies of concurrency control algorithms <ref> [2] </ref>. The parameters of the simulation model are shown in Table 2. Here we only highlight the differences between our model and the one used in the previous studies [2]. First, our workload consists of two classes of transactions, and we model Class 1 transactions as a closed system and Class 2 transactions as an open system. <p> Similar comments apply to other performance studies of concurrency control algorithms, such as <ref> [2, 21, 25, 30] </ref> which do not assume a graph structured database and adopt a random access pattern model of database workload. Or for example studies of concurrency control algorithms for B-Trees in which the database is restricted to a tree [12, 24].
Reference: [3] <author> H. W. Beck, S. K. Gala, and S. B. Navathe. </author> <title> Classification as a Query Processing Technique in the CANDIDE Semantic Data Model. </title> <booktitle> In IEEE International Conference on Data Engineering, </booktitle> <pages> pages 572-581, </pages> <year> 1989. </year>
Reference-contexts: Also, possibly, they might 2 support facilities for representing special kinds of knowledge (for example, temporal knowledge, incomplete knowledge, etc.). Examples of such systems include Telos [17], CLASSIC [5], CANDIDE <ref> [3] </ref> and several other deductive and object-oriented systems. Given such a knowledge base, it is natural to view it as a directed graph.
Reference: [4] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Con-currency Control and Recovery in Database Systems. </title> <publisher> Addison-Welssley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: Using INSERT and DELETE operations, transactions can modify the graph. The transactions can acquire two kinds of locks shared and exclusive, which have their usual semantics <ref> [4, 10, 19] </ref>. We first define some properties of directed graphs that are necessary for specifying our algorithm. A root of a directed graph is a node that does not have any predecessors. <p> In fact, to ease recovery, most commercial systems use strict two-phase locking in which the locks are held until a transaction commits <ref> [4] </ref>. Under the DDG policy, locks need not be held until the locked point, thus permitting more concurrency than 2PL.
Reference: [5] <author> A. Borgida, R. J. Brachman, D. L. McGuinness, and L. A. Resnick. </author> <title> CLASSIC: A Structural Data Model for Objects. </title> <booktitle> In Proceedings of 1989 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 58-67, </pages> <address> Portland, Oregon, </address> <year> 1989. </year>
Reference-contexts: Also, possibly, they might 2 support facilities for representing special kinds of knowledge (for example, temporal knowledge, incomplete knowledge, etc.). Examples of such systems include Telos [17], CLASSIC <ref> [5] </ref>, CANDIDE [3] and several other deductive and object-oriented systems. Given such a knowledge base, it is natural to view it as a directed graph.
Reference: [6] <author> V. K. Chaudhri. </author> <title> Transaction Synchronization in Knowledge Bases: Concepts, Realization and Quantitative Evaluation. </title> <type> PhD thesis, </type> <institution> University of Toronto, Toronto, </institution> <month> Forthcoming </month> <year> 1994. </year>
Reference-contexts: What is needed is a concurrency control policy that exploits the organizational and semantic structure of knowledge bases to offer efficient and correct concurrent execution of transactions. This paper examines one such policy, called the Dynamic Directed Graph (DDG) policy <ref> [6, 7] </ref>. In this paper, we study the implementation alternatives that arise as a result of knowledge base characteristics and evaluate the performance of the DDG policy in comparison to two-phase locking (hereafter 2PL) [9]. <p> Thus, the root node dominates all the nodes in the graph including itself. All nodes in a strongly connected component dominate each other. With this model, we give a brief description of our locking policy in the next sub-section. More details can be found elsewhere <ref> [6, 7] </ref>. 2.2 Description of the Locking Policy The Dynamic Directed Graph (DDG) policy has three types of rules: preprocessing rules, structure maintenance rules and locking rules. <p> Theorem 1 The DDG policy always produces serializable schedules <ref> [6] </ref>. Our locking policy is based on the tree policy (TP) [23]. The tree policy, when generalized to DAG policy [29], only deals with acyclic graphs which do not undergo change (that is, there are no insert and delete operations). <p> The implementation was done in the DeNet simulation environment on a DECStation 5000 (model 132) [15]. A detailed design of the implementation and sample source transactions are available elsewhere <ref> [6] </ref>. Our primary performance metrics are the response times of Class 1 and Class 2 transactions. In many cases, for the sake of clarity and ease of comparison, we report the percentage difference between the mean class response times given by the two policies. <p> Setting the HitRate to 1.0 represents the situation in which the knowledge base completely fits in main memory. We measured the concurrency control overheads from our implementation and gave them as parameters to the simulation model. Detailed measurement data can be found elsewhere <ref> [6] </ref>. The graph corresponding to the APACS knowledge base was given as an input to the simulation program. The transactions were hand coded to represent different access patterns, attribute accesses, and insertion/deletion operations. The Class 1 transactions traverse from 3 to 6 levels. <p> We used this load control strategy, because our preliminary experiments showed that it leads to a better response time for Class 2 transactions as compared to a strategy in which the multiprogramming level of both Class 1 and Class 2 transactions is controlled <ref> [6] </ref>. <p> The system parameters that we considered are buffer hit ratio, resource requirement and concurrency control overheads. In this paper, we restrict our presentation to only a subset of these experiments. A comprehensive description of the experiments is available elsewhere <ref> [6] </ref>. 5.1 Influence of Knowledge Base Characteristics on Concurrency Control In this section, we study the interaction of knowledge base features with the performance of the DDG policy.
Reference: [7] <author> V. K. Chaudhri, V. Hadzilacos, and J. Mylopoulos. </author> <title> Concurrency Control for Knowledge Bases. </title> <booktitle> In Proceedings of the Third International Conference on Knowledge Representation and Reasoning, </booktitle> <pages> pages 762-773, </pages> <year> 1992. </year>
Reference-contexts: What is needed is a concurrency control policy that exploits the organizational and semantic structure of knowledge bases to offer efficient and correct concurrent execution of transactions. This paper examines one such policy, called the Dynamic Directed Graph (DDG) policy <ref> [6, 7] </ref>. In this paper, we study the implementation alternatives that arise as a result of knowledge base characteristics and evaluate the performance of the DDG policy in comparison to two-phase locking (hereafter 2PL) [9]. <p> Thus, the root node dominates all the nodes in the graph including itself. All nodes in a strongly connected component dominate each other. With this model, we give a brief description of our locking policy in the next sub-section. More details can be found elsewhere <ref> [6, 7] </ref>. 2.2 Description of the Locking Policy The Dynamic Directed Graph (DDG) policy has three types of rules: preprocessing rules, structure maintenance rules and locking rules.
Reference: [8] <author> F. de Ferreira Rezende and T. </author> <title> Harder. A Lock Method for KBMSs Using Abstraction Relationships' Semantics. </title> <booktitle> In Proceedings of the Third International Conference on Knowledge Management (to appear), </booktitle> <year> 1994. </year>
Reference-contexts: On the other hand, this study had a model of recovery which we have not considered in our work so far. The semantic structure of a knowledge base can be used in an alternative way to support multiple granularities of locking <ref> [8] </ref>. The emphasis in our work so far has been to use the semantic structure to allow release of locks before the locked point of a transaction.
Reference: [9] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The Notions of Consistency and Predicate Locks in Database Systems. </title> <journal> Communications of the ACM, </journal> <volume> 19(9) </volume> <pages> 624-633, </pages> <year> 1976. </year>
Reference-contexts: This paper examines one such policy, called the Dynamic Directed Graph (DDG) policy [6, 7]. In this paper, we study the implementation alternatives that arise as a result of knowledge base characteristics and evaluate the performance of the DDG policy in comparison to two-phase locking (hereafter 2PL) <ref> [9] </ref>. We choose 2PL as a yardstick in evaluating the new policy because it is the best-known and the most-used concurrency control policy.
Reference: [10] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, </address> <year> 1993. </year>
Reference-contexts: Using INSERT and DELETE operations, transactions can modify the graph. The transactions can acquire two kinds of locks shared and exclusive, which have their usual semantics <ref> [4, 10, 19] </ref>. We first define some properties of directed graphs that are necessary for specifying our algorithm. A root of a directed graph is a node that does not have any predecessors. <p> The DAG policy, as considered in our paper, is different from the DAG locking that supports multiple granularities (MGDAG) <ref> [10, 11] </ref>. The MGDAG policy is a two-phase locking policy and supports multiple granularities of locking by using "intention" locks. In contrast, the DAG policy (as well as the DDG policy) is a non-two-phase locking policy, and at present, does not incorporate intention locks.
Reference: [11] <author> J. N. Gray, R. A. Lorie, G. R. Putzolu, and I. L. Traiger. </author> <title> Granularity of Locks and Degrees of Consistency in a Shared Database. </title> <editor> In G. M. Nijssen, editor, </editor> <booktitle> Modeling in Database Management Systems, </booktitle> <pages> pages 365-394. </pages> <publisher> North Holland Publishing Company, </publisher> <year> 1976. </year>
Reference-contexts: The DAG policy, as considered in our paper, is different from the DAG locking that supports multiple granularities (MGDAG) <ref> [10, 11] </ref>. The MGDAG policy is a two-phase locking policy and supports multiple granularities of locking by using "intention" locks. In contrast, the DAG policy (as well as the DDG policy) is a non-two-phase locking policy, and at present, does not incorporate intention locks.
Reference: [12] <author> T. Johnson and D. Shasha. </author> <title> The Performance of Current B-Tree Algorithms. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(1) </volume> <pages> 51-101, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Or for example studies of concurrency control algorithms for B-Trees in which the database is restricted to a tree <ref> [12, 24] </ref>. Instead, in our work, we have considered a general graph as a model of the database and access patterns such as breadth-first and depth-first traversal which match well processing requirements for knowledge based systems.
Reference: [13] <author> A. M. Law and W. D. </author> <title> Kelton. Simulation Modeling and Analysis. </title> <address> McGraw-Hill New York, NY, </address> <year> 1991. </year>
Reference-contexts: We employed a batch means method for the statistical data analysis of our results, and each simulation was run long enough to obtain sufficiently tight confidence intervals. The reported mean values are accurate within 5% at the 90% confidence level <ref> [13] </ref>. The parameter values in Table 2 were assigned values based on the APACS baseline workload. Class 1 ThinkTime was set to 1 sec.
Reference: [14] <author> E. D. Lazowska, J. Zahorjan, G. S. Graham, and K. C. Sevcik. </author> <title> Quantitative System Performance: Computer System Analysis using Queueing Network Models. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1984. </year>
Reference-contexts: Even when the whole knowledge base fits in the main memory, concurrent processing is necessary to guarantee an acceptable response time to users <ref> [14] </ref>. What is needed is a concurrency control policy that exploits the organizational and semantic structure of knowledge bases to offer efficient and correct concurrent execution of transactions. This paper examines one such policy, called the Dynamic Directed Graph (DDG) policy [6, 7].
Reference: [15] <author> M. Livny. </author> <title> DeNeT User's Guide (Version 1.5). </title> <type> Technical report, </type> <institution> University of Wisconsin, </institution> <year> 1990. </year>
Reference-contexts: We choose 2PL as a yardstick in evaluating the new policy because it is the best-known and the most-used concurrency control policy. Our analysis is conducted through the implementations of the DDG and 2PL policies in the DeNet simulation environment <ref> [15] </ref>, calibrated on the basis of knowledge base and workload parameters obtained from an actual knowledge base application. <p> The implementation was done in the DeNet simulation environment on a DECStation 5000 (model 132) <ref> [15] </ref>. A detailed design of the implementation and sample source transactions are available elsewhere [6]. Our primary performance metrics are the response times of Class 1 and Class 2 transactions.
Reference: [16] <author> C. Mohan. ARIES/KVL: </author> <title> A Key-Value Locking Method for Concurrency Control of Multiaction Transaction Operating on B-Tree Indexes. </title> <booktitle> In Proceedings of 16th VLDB Conference, </booktitle> <pages> pages 392-405, </pages> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: Locking policies similar to the DAG policy have been extensively used to increase concurrency on index structures <ref> [16] </ref>. 3 An Example Application We tested the DDG policy on a knowledge base from the Advanced Process Analysis and Control System (APACS) that is being designed in collaboration with Ontario Hydro and CAE Electronics [18].
Reference: [17] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: A Language for Representing Knowledge About Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(4) </volume> <pages> 325-362, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Also, possibly, they might 2 support facilities for representing special kinds of knowledge (for example, temporal knowledge, incomplete knowledge, etc.). Examples of such systems include Telos <ref> [17] </ref>, CLASSIC [5], CANDIDE [3] and several other deductive and object-oriented systems. Given such a knowledge base, it is natural to view it as a directed graph.
Reference: [18] <author> J. Mylopoulos, B. Kramer, H. Wang, M. Benjamin, Q. B. Chou, and S. Mensah. </author> <title> Expert System Applications in Process Control. </title> <booktitle> In Proceedings of the International Symposium on Artificial Intelligence in Materials Processing Applications, </booktitle> <address> Edmonton, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: similar to the DAG policy have been extensively used to increase concurrency on index structures [16]. 3 An Example Application We tested the DDG policy on a knowledge base from the Advanced Process Analysis and Control System (APACS) that is being designed in collaboration with Ontario Hydro and CAE Electronics <ref> [18] </ref>. APACS is a prototype of a process control system intended to aid a plant operator during an emergency. It stores information about the components in the feedwater system, for example, boilers, valves, pre-heaters, alarms, etc.
Reference: [19] <author> C. Papadimitriou. </author> <title> The Theory of Database Concur-rency Control. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1986. </year>
Reference-contexts: Using INSERT and DELETE operations, transactions can modify the graph. The transactions can acquire two kinds of locks shared and exclusive, which have their usual semantics <ref> [4, 10, 19] </ref>. We first define some properties of directed graphs that are necessary for specifying our algorithm. A root of a directed graph is a node that does not have any predecessors.
Reference: [20] <author> D. Plexousakis. </author> <title> Integrity Constraint and Rule Maintenance in Temporal Deductive Knowledge Bases. </title> <booktitle> In Proceedings of the 19th International Conference on Very Large Data Bases, </booktitle> <pages> pages 146-157, </pages> <address> Dublin, IR, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Such a dependence graph can be extended to deal with an object-oriented and temporal knowledge base such as Telos <ref> [20] </ref>. 2.1 Model of a Knowledge Base We assume that the knowledge base is a directed graph G = (V; E), where V is a set of nodes (for example Employee), and E is a set of edges which are ordered pairs of nodes (for example, (Employee, Person)).
Reference: [21] <author> I. K. Ryu and A. Thomasian. </author> <title> Analysis of Database Performance with Dynamic Locking. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 37(3) </volume> <pages> 491-523, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Similar comments apply to other performance studies of concurrency control algorithms, such as <ref> [2, 21, 25, 30] </ref> which do not assume a graph structured database and adopt a random access pattern model of database workload. Or for example studies of concurrency control algorithms for B-Trees in which the database is restricted to a tree [12, 24].
Reference: [22] <author> K. Salem, H. Garcia-Molina, and J. Shands. </author> <title> Altruistic Locking. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(1) </volume> <pages> 117-164, </pages> <year> 1994. </year>
Reference-contexts: lead to improvement in Class 2 response times regardless of whether the knowledge base is stored on disk or in main memory. 6 Related Work and Conclusions There have been several other proposals for locking policies that accommodate more concurrency than 2PL, for example, ordered shared locking and altruistic locking <ref> [1, 22] </ref>. These policies have potential for knowledge bases as well.
Reference: [23] <author> A. Silberschatz and Z. M. Kedem. </author> <title> Consistency in Hierarchical Database Systems. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 27(1) </volume> <pages> 72-80, </pages> <year> 1980. </year>
Reference-contexts: Theorem 1 The DDG policy always produces serializable schedules [6]. Our locking policy is based on the tree policy (TP) <ref> [23] </ref>. The tree policy, when generalized to DAG policy [29], only deals with acyclic graphs which do not undergo change (that is, there are no insert and delete operations).
Reference: [24] <author> V. Srinivasan and M. J. Carey. </author> <title> Performance of B+ Tree Concurrency Control Algorithms. </title> <booktitle> The International Journal on Very Large Data Bases, </booktitle> <volume> 2(4) </volume> <pages> 361-406, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Or for example studies of concurrency control algorithms for B-Trees in which the database is restricted to a tree <ref> [12, 24] </ref>. Instead, in our work, we have considered a general graph as a model of the database and access patterns such as breadth-first and depth-first traversal which match well processing requirements for knowledge based systems.
Reference: [25] <author> Y. C. Tay. </author> <title> Locking Performance in Centralized Databases. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1987. </year>
Reference-contexts: Similar comments apply to other performance studies of concurrency control algorithms, such as <ref> [2, 21, 25, 30] </ref> which do not assume a graph structured database and adopt a random access pattern model of database workload. Or for example studies of concurrency control algorithms for B-Trees in which the database is restricted to a tree [12, 24].
Reference: [26] <author> J. Ullman. </author> <title> Principles of Data Base and Knowledge Base Systems, Volume 2. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Similarly, for a collection of deductive rules, one can generate a dependence graph in which each predicate is a node and there is an edge between two predicates A and B if B appears in the body of predicate A <ref> [26] </ref>.
Reference: [27] <author> H. Wang. </author> <type> Personal Communication, </type> <year> 1993. </year>
Reference-contexts: And finally, the Equipment relationship associates a piece of equipment with each alarm. The APACS workload, shown in Table 1 (b), was obtained by interviewing the scientists who developed this system <ref> [27] </ref>. The knowledge base receives two classes of transactions. Transactions in the first class are generated because of the diagnostic and monitoring processes which consist of (partial) traversal along some semantic relationship. The distribution of traversals along different semantic relationships is shown in Table 1 (b).
Reference: [28] <author> G. Weikum and C. Hasse. </author> <title> Multi-Level Transaction Management for Complex Objects: Implementation, Performance, Parallelism. </title> <booktitle> The International Journal on Very Large Data Bases, </booktitle> <volume> 2(4) </volume> <pages> 407-453, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Performance of a multi-level implementation of the 2PL, with a detailed model of recovery, has been studied for com plex objects <ref> [28] </ref>. In this study, the database was modeled as a random graph. Only one class of transactions was considered, and the transactions accessed an object and some of its sub-objects. Using our terminology, one can see that these transactions are limited to traversal up to two levels.
Reference: [29] <author> M. Yannakakis. </author> <title> A Theory of Safe Locking Policies in Database Systems. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 29(3) </volume> <pages> 718-740, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: Theorem 1 The DDG policy always produces serializable schedules [6]. Our locking policy is based on the tree policy (TP) [23]. The tree policy, when generalized to DAG policy <ref> [29] </ref>, only deals with acyclic graphs which do not undergo change (that is, there are no insert and delete operations).
Reference: [30] <author> P. S. Yu, D. M. Dias, and S. S. Lavenberg. </author> <title> On the Analytical Modeling of Database Concurrency Control. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40 </volume> <pages> 831-72, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Similar comments apply to other performance studies of concurrency control algorithms, such as <ref> [2, 21, 25, 30] </ref> which do not assume a graph structured database and adopt a random access pattern model of database workload. Or for example studies of concurrency control algorithms for B-Trees in which the database is restricted to a tree [12, 24].
References-found: 30

