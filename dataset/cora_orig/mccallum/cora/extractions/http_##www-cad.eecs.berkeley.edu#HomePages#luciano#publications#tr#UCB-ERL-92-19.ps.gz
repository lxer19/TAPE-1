URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications/tr/UCB-ERL-92-19.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications.html
Root-URL: 
Title: A novel framework for solving the state assignment problem for event-based specifications  
Author: Luciano Lavagno, Cho W. Moon, Robert K. Brayton, Alberto Sangiovanni-Vincentelli 
Address: Berkeley, CA 94720, USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California  
Abstract: We propose a novel framework to solve the state assignment problem arising from the signal transition graph (STG) representation of an asynchronous circuit. We first establish a relation between STGs and finite state machines (FSMs). Then we solve the STG state assignment problem by minimizing the number of states in the corresponding FSM and by using a critical race-free state assignment technique. State signal transitions may be added to the original STG. A lower bound on the number of signals necessary to implement the STG is given. Our technique significantly increases the STG applicability as a specification for asynchronous circuits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35:677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: The properties of ordinary boolean functions (where all the variables have S i = f0; 1g) can be directly extended to boolean functions of multi-valued variables ([10]). A multi-valued decision diagram (MDD, see <ref> [1] </ref> and [6]) is a rooted directed acyclic graph where: * every leaf node is labeled with either the value 1 or 0. * every non-leaf node is labeled with a multi-valued boolean variable. * every edge is labeled with one value of the variable corresponding to its source node.
Reference: [2] <author> S. Burns and A. Martin. </author> <title> A synthesis method for self-timed VLSI circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <year> 1987. </year>
Reference-contexts: We are also planning to investigate how to use it within other event-based specifications for asynchronous circuits, such as the one proposed in <ref> [2] </ref>. Acknowledgment We thank Tiziano Villa, Alex Saldanha, Kurt Keutzer and Ken Stevens for many helpful discussions.
Reference: [3] <author> T.-A. Chu. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: The specification is complete in that both the system and the environment behaviors are specified. Sufficient conditions for an STG to be implementable have been given by <ref> [3] </ref>. The most restrictive condition is the Complete State Coding (CSC) property ([12]), which requires that the signals specified by the STG completely define the circuit state. <p> The edge e is labeled with t. In the rest of the paper we will use the term SG state to identify also the corresponding STG marking. 2.1.3 Complete State Coding The procedures given by <ref> [3, 8, 12] </ref> to produce a circuit implementing an STG specification require that each SG state is assigned a binary label, with the values of signals specified by the STG, that is consistent with the firing transitions on the SG edges. <p> In our case every FSM state is stable, because it has a self-loop if no external signals (i.e. STG input and output signals) change. Furthermore every FSM stable state is represented by a stable circuit state, if we use any of the synthesis methodologies presented in <ref> [3] </ref>, [8] or [12]. This is due to the fact that if the synthesized circuit implements the STG specification, then after all the enabled transitions fire, they cannot be enabled again until some external signal changes.
Reference: [4] <author> G.D. Hachtel, J.-K. Rho, F. Somenzi, and R. </author> <title> Jacoby. Exact and Heuristic Algorithms for the Minimization of Incompletely Specified State Machines. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <pages> pages 184-191, </pages> <address> Amsterdam, The Netherlands, </address> <month> February </month> <year> 1991. </year>
Reference: [5] <author> M. Hack. </author> <title> Analysis of production schemata by Petri Nets. </title> <type> Technical Report TR 94, </type> <institution> Project MAC, MIT, </institution> <year> 1972. </year> <month> 23 </month>
Reference: [6] <author> T. Kam. </author> <title> Multi-valued decision diagrams. </title> <type> Master's thesis, </type> <institution> U.C. Berkeley, </institution> <year> 1990. </year>
Reference-contexts: The properties of ordinary boolean functions (where all the variables have S i = f0; 1g) can be directly extended to boolean functions of multi-valued variables ([10]). A multi-valued decision diagram (MDD, see [1] and <ref> [6] </ref>) is a rooted directed acyclic graph where: * every leaf node is labeled with either the value 1 or 0. * every non-leaf node is labeled with a multi-valued boolean variable. * every edge is labeled with one value of the variable corresponding to its source node.
Reference: [7] <author> M. A. Kishinevsky, A. Y. Kondratyev, and A. R. Taubin. </author> <title> Formal method for self-timed design. </title> <booktitle> In Proceedings of the European Design Automation Conference (EDAC), </booktitle> <year> 1991. </year>
Reference: [8] <author> L. Lavagno, K. Keutzer, and A. Sangiovanni-Vincentelli. </author> <title> Algorithms for synthesis of hazard-free asynchronouscircuits. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: Despite this, CAD support for asynchronous design remains weak. The main reason is the difficulty in dealing with the hazards which cause a system to deviate from its specified behavior. In <ref> [8] </ref> and [12] techniques were proposed to produce a hazard-free implementation from a graphical specification called the Signal Transition Graph (STG)[3] under either bounded wire delay or unbounded gate delay models. <p> We propose to apply a critical race-free state assignment algorithm (such as the one proposed by Tracey [14]). Using the new states codes, we insert appropriate signal transitions in the STG. At this point, techniques such as <ref> [8] </ref> [12] can be used to obtain a hazard-free implementation. This paper is organized as follows. Section 2 defines the terms used in this paper and discusses some previous work. Section 3 gives an informal overview of the whole approach. Section 4 describes how STGs are translated into FSMs. <p> The edge e is labeled with t. In the rest of the paper we will use the term SG state to identify also the corresponding STG marking. 2.1.3 Complete State Coding The procedures given by <ref> [3, 8, 12] </ref> to produce a circuit implementing an STG specification require that each SG state is assigned a binary label, with the values of signals specified by the STG, that is consistent with the firing transitions on the SG edges. <p> First the STG is checked to see if it satisfies the CSC property. If it does, then we can apply the synthesis procedures of <ref> [8] </ref> or [12] to yield a hazard-free implementation. If the STG does not satisfy the CSC property, new state signals have to be added to distinguish the SG states that have the same binary label but different output transitions. <p> In our case every FSM state is stable, because it has a self-loop if no external signals (i.e. STG input and output signals) change. Furthermore every FSM stable state is represented by a stable circuit state, if we use any of the synthesis methodologies presented in [3], <ref> [8] </ref> or [12]. This is due to the fact that if the synthesized circuit implements the STG specification, then after all the enabled transitions fire, they cannot be enabled again until some external signal changes.
Reference: [9] <author> B. Lin and F. Somenzi. </author> <title> Minimization of symbolic relations. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: (S 7 = S 8 ) _ Ai to guarantee that s 8 is distinguishable from s 7 . 5.1.2 Finding a minimum cost partitioning set One way to find a minimum cost partitioning set given the clauses described in the previous section is to combine the approach described in <ref> [9] </ref> to solve binate covering using binary decision diagrams with the multi-valued extension of binary decision diagrams (MDD). We build an MDD representing a conjunction of the clauses. Any path from the root to the 1 leaf corresponds to a partial assignment of values to the variables. <p> 0 value of variables associated with signals. 3. one for all edges corresponding to the 1 value of variables associated with output signals. 4. the number of output signals plus one for all edges corresponding to the 1 value of variables associated with input signals. 12 Then, as shown in <ref> [9] </ref>, a shortest path from the root to the 1 leaf corresponds to a minimum cost assignment that satisfies all the constraints.
Reference: [10] <author> S. Malik. </author> <title> Combinational Logic Optimization Techniques in Sequential Logic Synthesis. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> November </month> <year> 1990. </year> <note> (technical report UCB/ERL M90/115). </note>
Reference: [11] <author> A. Martin. </author> <title> Formal program transformations for VLSI synthesis. </title> <editor> In E. W. Dijkstra, editor, </editor> <booktitle> Formal Development of Programs and Proofs, The UT Year of Programming Series. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [12] <author> C. W. Moon, P. R. Stephan, and R. K. Brayton. </author> <title> Synthesis of hazard-free asynchronous circuits from graphical specifications. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: Despite this, CAD support for asynchronous design remains weak. The main reason is the difficulty in dealing with the hazards which cause a system to deviate from its specified behavior. In [8] and <ref> [12] </ref> techniques were proposed to produce a hazard-free implementation from a graphical specification called the Signal Transition Graph (STG)[3] under either bounded wire delay or unbounded gate delay models. <p> We propose to apply a critical race-free state assignment algorithm (such as the one proposed by Tracey [14]). Using the new states codes, we insert appropriate signal transitions in the STG. At this point, techniques such as [8] <ref> [12] </ref> can be used to obtain a hazard-free implementation. This paper is organized as follows. Section 2 defines the terms used in this paper and discusses some previous work. Section 3 gives an informal overview of the whole approach. Section 4 describes how STGs are translated into FSMs. <p> The edge e is labeled with t. In the rest of the paper we will use the term SG state to identify also the corresponding STG marking. 2.1.3 Complete State Coding The procedures given by <ref> [3, 8, 12] </ref> to produce a circuit implementing an STG specification require that each SG state is assigned a binary label, with the values of signals specified by the STG, that is consistent with the firing transitions on the SG edges. <p> First the STG is checked to see if it satisfies the CSC property. If it does, then we can apply the synthesis procedures of [8] or <ref> [12] </ref> to yield a hazard-free implementation. If the STG does not satisfy the CSC property, new state signals have to be added to distinguish the SG states that have the same binary label but different output transitions. <p> In our case every FSM state is stable, because it has a self-loop if no external signals (i.e. STG input and output signals) change. Furthermore every FSM stable state is represented by a stable circuit state, if we use any of the synthesis methodologies presented in [3], [8] or <ref> [12] </ref>. This is due to the fact that if the synthesized circuit implements the STG specification, then after all the enabled transitions fire, they cannot be enabled again until some external signal changes.
Reference: [13] <author> A. Saldanha, T. Villa, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> A framework for satisfying input and output encoding constraints. </title> <booktitle> In Proceedings of the 28 th Design Automation Conference, </booktitle> <pages> pages 170-175, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: To obtain a minimum 7 length encoding, we use the exact constraint solver by Saldanha et. al. <ref> [13] </ref> which generates all the prime dichotomies and then finds a minimum cover of the initial dichotomies by the prime dichotomies. The complexity of satisfying the dichotomy constraints by the above technique is 0 (2 n ), where n is the number of states.
Reference: [14] <author> J. H. Tracey. </author> <title> Internal state assignments for asynchronous sequential machines. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-15(4):551-560, </volume> <month> August </month> <year> 1966. </year>
Reference-contexts: We propose to apply a critical race-free state assignment algorithm (such as the one proposed by Tracey <ref> [14] </ref>). Using the new states codes, we insert appropriate signal transitions in the STG. At this point, techniques such as [8] [12] can be used to obtain a hazard-free implementation. This paper is organized as follows. Section 2 defines the terms used in this paper and discusses some previous work. <p> This step must not introduce any critical races and should allow state signals to change as soon as possible. We employ Tracey's single transition time (STT) state assignment technique <ref> [14] </ref> because it satisfies both of these criteria. Tracey's technique is based on a set of dichotomy constraints extracted from the FSM.
Reference: [15] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley Interscience, </publisher> <year> 1969. </year>
Reference-contexts: The CSC violation also occurs due to states (s2; s6), (s7; s9) and (s10; s12). 2.1.4 Finite State Machines Most of the following definitions are from <ref> [15] </ref>. <p> This FSM representation, in tabular form, is called Flow Table in <ref> [15] </ref>. A stable state of an FSM is a pair i; s such that N (i; s) = fsg, i.e. a self-loop in the graph representation. <p> interpret this sufficient condition within our framework, and how to use it to reduce the number of state signals. 2 Notice that for incompletely specified FSMs the compatibility relation in not transitive, and as such it is not an equivalence relation. 3 The encoded FSM is called Flow Matrix in <ref> [15] </ref>. 5 Also the synthesis methodology developed by Martin et al. ([2]), even though it starts from a different specification formalism, basically guarantees CSC (a sub-case of what they call non-interference) by handshaking, if possible, otherwise by heuristic state variable insertion ([11]). <p> In any case, the procedures that we will give below are guaranteed to find a solution that does not constrain the environment, if such a solution exists within the search space. The following result (Theorem 5.2 of <ref> [15] </ref>) shows that using this framework we obtain a lower bound on the number of state signals: Theorem 3 Given any minimized FSM with s i stable states under input label i, any sequential circuit realizing this FSM, in which stable FSM states are represented by stable circuit states, must have
Reference: [16] <author> P. Vanbekbergen. </author> <title> Optimized synthesis of asynchronous control circuits from graph-theoretic specifications. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 184-187, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The CSC property is satisfied if 1 Notice the distinction between live net and live STG. 3 * no two different states are assigned the same binary label (Unique State Coding property <ref> [16] </ref>) or * when the same binary label is assigned to two different states, the transitions of the output signals enabled in the two states must be identical. <p> Conversely every path from the root to the 1 leaf defines a (possibly partial) assignment of values that makes the associated function evaluate to 1 (and similarly for 0). 2.2 Previous work Early work in the area of Unique State Coding enforcement (for example [19] and <ref> [16] </ref>) concentrated on the introduction of constraints within an MG, using a sufficient condition as a guidance. Namely both [19] and [16] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, then the MG satisfies the Unique State Coding condition. <p> that makes the associated function evaluate to 1 (and similarly for 0). 2.2 Previous work Early work in the area of Unique State Coding enforcement (for example [19] and <ref> [16] </ref>) concentrated on the introduction of constraints within an MG, using a sufficient condition as a guidance. Namely both [19] and [16] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, then the MG satisfies the Unique State Coding condition. <p> The analysis and synthesis methods for MGs, on the other hand, have often polynomial worst-case behavior, while analogous algorithms for free-choice nets have in general exponential worst-case behavior. For example, the CSC analysis in [19] and <ref> [16] </ref> is O (n 3 ) in the worst case for n signals, while the algorithms presented in this paper work on the SG, which is exponential in the number of signals in the worst case. 3 Overview of the proposed approach Our approach consists of several steps. <p> Furthermore we can also reduce the number of state signals below the given bound if we are allowed to declare some state invalid, because then we are modifying the FSM before realization. For example the method described in <ref> [16] </ref> adds constraints to the STG to remove from the FSM states that can cause incompatibilities, so that the resulting FSM has only one compatible and, by Theorem 2, the STG has CSC. However, this is not general and cannot always be done without adding state signals. <p> For this reason, approaches which solve CSC by adding constraints to the STG, such as <ref> [16] </ref>, are unlikely to be extendable to free-choice STGs. The problem of finding a common predecessor to a set of transitions can be solved in some cases by dealing with it during the minimization procedure.
Reference: [17] <author> P. Vanbekbergen, G. Goossens, and H. De Man. </author> <title> A local optimization technique for asynchronous control circuits. </title> <booktitle> In Proceedings of the International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: The most restrictive condition is the Complete State Coding (CSC) property ([12]), which requires that the signals specified by the STG completely define the circuit state. Until now the burden of satisfying the CSC property has been placed mostly on the designer. [19] and <ref> [17] </ref> address this problem but only in the context of marked graphs, which are a subset of STGs. <p> Minimization of this FSM allows us to prove necessary conditions on the number of state signals required to implement it. This proposed framework is general enough to embed also previous methods to solve the CSC problem for some specific sub-classes of STGs, such as <ref> [17] </ref>. 1 We also address how to extract from the minimized FSM sufficient conditions for the STG to have the CSC property. We propose to apply a critical race-free state assignment algorithm (such as the one proposed by Tracey [14]). <p> Furthermore Vanbekbergen did not recognize the need to use critical race-free encoding. Critical races would show up as further violations of CSC in the encoded STG. Thus the main advantage of our framework over <ref> [17] </ref> is the recognition that CSC falls within a much more general problem, previously known as state minimization/critical race-free encoding ([15]), and that constraint graph coloring can be considered only as a heuristic technique to solve the general problem. <p> Example master-read took a relatively long time to complete due to the fact that most states were assigned to all the compatibles by the initial FSM minimization procedure, and then Procedure 2 was slow to converge. Table 2 contains some results of <ref> [17] </ref>, for comparison. Our procedure obtains larger circuits than Vanbekbergen because we use state signals to remove CSC violation but preserve the concurrency of the specification as much as possible, while Vanbekbergen does not add state variables but reduces the concurrency. For example, the STG called vbe4a was solved in [17] <p> <ref> [17] </ref>, for comparison. Our procedure obtains larger circuits than Vanbekbergen because we use state signals to remove CSC violation but preserve the concurrency of the specification as much as possible, while Vanbekbergen does not add state variables but reduces the concurrency. For example, the STG called vbe4a was solved in [17] by removing those states that can cause incompatibilities, without requiring the addition of state signals. Presently we do not attempt to remove any state and always add state signals, which accounts for the large area penalty in this case. Applying the state removal technique of [17] within our framework by <p> vbe4a was solved in <ref> [17] </ref> by removing those states that can cause incompatibilities, without requiring the addition of state signals. Presently we do not attempt to remove any state and always add state signals, which accounts for the large area penalty in this case. Applying the state removal technique of [17] within our framework by hand (without too much attention to optimality) led to a result that did not require any state signal and had 13 literals but more concurrency than [17]. <p> Applying the state removal technique of <ref> [17] </ref> within our framework by hand (without too much attention to optimality) led to a result that did not require any state signal and had 13 literals but more concurrency than [17]. <p> building the BDD for the optimum procedure was not always possible, so the table uniformly shows the result of the heuristic procedure (we should still investigate the BDD variable ordering problem). 22 name initial final sig. trans. sig. trans. lit. vbe4a 6 12 6 12 5 Table 2: Results of <ref> [17] </ref> (for comparison) 9 Conclusions and Future Work We have introduced a novel technique to satisfy the complete state coding property on STGs. The technique, unlike previous results, can handle any live STG, without restrictions to marked graphs or limits on the number of transitions for each signal. <p> This allowed us to prove a lower bound on the number of state signals to be added in order to implement the STG specification without substantially reducing its concurrency. We are investigating ways to view the technique in <ref> [17] </ref> in this framework, because we believe our method to be powerful enough to view the CSC problem in its generality. So we will be able to fully exploit the trade-off between reduction in concurrency and insertion of new signals.
Reference: [18] <author> T. Villa. </author> <title> A heuristic incompletely specified finite state machine minimizer. </title> <type> Personal communication, </type> <year> 1985. </year>
Reference: [19] <author> A. V. Yakovlev and A. Petrov. </author> <title> Petri nets and parallel bus controller design. </title> <booktitle> In International Conference on Application and Theory of Petri Nets, </booktitle> <address> Paris, France. </address> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1990. </year> <month> 24 </month>
Reference-contexts: The most restrictive condition is the Complete State Coding (CSC) property ([12]), which requires that the signals specified by the STG completely define the circuit state. Until now the burden of satisfying the CSC property has been placed mostly on the designer. <ref> [19] </ref> and [17] address this problem but only in the context of marked graphs, which are a subset of STGs. <p> Conversely every path from the root to the 1 leaf defines a (possibly partial) assignment of values that makes the associated function evaluate to 1 (and similarly for 0). 2.2 Previous work Early work in the area of Unique State Coding enforcement (for example <ref> [19] </ref> and [16]) concentrated on the introduction of constraints within an MG, using a sufficient condition as a guidance. Namely both [19] and [16] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, then the MG satisfies the Unique State Coding condition. <p> of values that makes the associated function evaluate to 1 (and similarly for 0). 2.2 Previous work Early work in the area of Unique State Coding enforcement (for example <ref> [19] </ref> and [16]) concentrated on the introduction of constraints within an MG, using a sufficient condition as a guidance. Namely both [19] and [16] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, then the MG satisfies the Unique State Coding condition. <p> The analysis and synthesis methods for MGs, on the other hand, have often polynomial worst-case behavior, while analogous algorithms for free-choice nets have in general exponential worst-case behavior. For example, the CSC analysis in <ref> [19] </ref> and [16] is O (n 3 ) in the worst case for n signals, while the algorithms presented in this paper work on the SG, which is exponential in the number of signals in the worst case. 3 Overview of the proposed approach Our approach consists of several steps.
References-found: 19

