URL: ftp://ftp.cs.washington.edu/pub/ai/ijcai97-sat.ps
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Email: weldg@cs.washington.edu  
Title: Automatic SAT-Compilation of Planning Problems  
Author: Michael D. Ernst, Todd D. Millstein, and Daniel S. Weld fmernst, todd, 
Address: Box 352350 Seattle WA 98195-2350 USA  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Abstract: tic search techniques, and translating the resulting truth assignments back into plans for the original problems. We explore the space of such transformations, providing a simple framework that generates eight major encodings (generated by selecting one of four action representations and one of two frame axioms) and a number of subsidiary ones. We describe a fully-implemented compiler that can generate each of these encodings, and we test the compiler on a suite of STRIPS planning problems in order to determine which encodings have the best properties.
Abstract-found: 1
Intro-found: 1
Reference: [ Blum and Furst, 1995 ] <author> A. Blum and M. Furst. </author> <title> Fast planning through planning graph analysis. </title> <booktitle> In Proc. 14th Int. Joint Conf. on AI, </booktitle> <pages> pages 1636-1642, </pages> <year> 1995. </year>
Reference-contexts: The bitwise action representation requires no action exclusion axioms. At any time step, only one fully-instantiated action's index can be represented by the bit symbols, so a total ordering is guaranteed. 3 Contrast our definition of conflict with that of Graph-plan <ref> [ Blum and Furst, 1995 ] </ref> and [ Kautz and Selman, 1996 ] .
Reference: [ Cook and Mitchell, 1997 ] <author> S. Cook and D. Mitchell. </author> <title> Finding hard instances of the satisfiability problem: A survey. Proceedings of the DIMACS Workshop on Satisfiability Problems, </title> <note> To Appear, </note> <year> 1997. </year>
Reference-contexts: 1 Introduction Despite the early formulation of planning as theorem proving [ Green, 1969 ] , most researchers have long assumed that special-purpose planning algorithms are necessary for practical performance. However, recent improvements in the performance of propositional satisfiability methods <ref> [ Cook and Mitchell, 1997 ] </ref> cast doubt on this conclusion. Initial results for compiling bounded-length planning problems to SAT were unremarkable [ Kautz and Selman, 1992 ] , but recent experiments [ Kautz and Selman, 1996 ] suggest that compilation to SAT might yield the world's fastest STRIPS-style planner.
Reference: [ Crawford and Auton, 1993 ] <author> J. Crawford and L. Auton. </author> <title> Experimental results on the cross-over point in satisfiability problems. </title> <booktitle> In Proc. 11th Nat. Conf. on AI, </booktitle> <pages> pages 21-27, </pages> <year> 1993. </year>
Reference-contexts: The resulting clauses are solved using Walksat [ Selman et al., 1996 ] or Tableau <ref> [ Crawford and Auton, 1993 ] </ref> . 4.1 Optimizations Planning via reduction to propositional satisfiability is impractical without a number of optimizations which determine the truth values of fluents or limit the ground instantiations of actions. Foremost among these are type optimizations.
Reference: [ Green, 1969 ] <author> C. Green. </author> <title> Application of theorem proving to problem solving. </title> <booktitle> In Proc. 1st Int. Joint Conf. on AI, </booktitle> <pages> pages 219-239, </pages> <year> 1969. </year>
Reference-contexts: 1 Introduction Despite the early formulation of planning as theorem proving <ref> [ Green, 1969 ] </ref> , most researchers have long assumed that special-purpose planning algorithms are necessary for practical performance. However, recent improvements in the performance of propositional satisfiability methods [ Cook and Mitchell, 1997 ] cast doubt on this conclusion.
Reference: [ Haas, 1987 ] <author> A. Haas. </author> <title> The case for domain-specific frame axioms. </title> <booktitle> In The Frame Problem in Artificial Intellegence, Proceedings of the 1987 Workshop. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Therefore, if more than one action does occur in a time step, then either one can be selected to form a valid plan. Explanatory frame axioms <ref> [ Haas, 1987 ] </ref> enumerate the set of actions that could have occurred in order to account for a state change. For example, an explanatory frame axiom would say which actions could have caused D's clearness status to change from true to false.
Reference: [ Kautz and Selman, 1992 ] <author> H. Kautz and B. Selman. </author> <title> Planning as satisfiability. </title> <booktitle> In Proc. 10th Eur. Conf. on AI, </booktitle> <pages> pages 359-363, </pages> <address> Vienna, Austria, 1992. </address> <publisher> Wiley. </publisher>
Reference-contexts: However, recent improvements in the performance of propositional satisfiability methods [ Cook and Mitchell, 1997 ] cast doubt on this conclusion. Initial results for compiling bounded-length planning problems to SAT were unremarkable <ref> [ Kautz and Selman, 1992 ] </ref> , but recent experiments [ Kautz and Selman, 1996 ] suggest that compilation to SAT might yield the world's fastest STRIPS-style planner. However, several open questions must be answered before concluding that SAT-based planning dominates specialized algorithms.
Reference: [ Kautz and Selman, 1996 ] <author> H. Kautz and B. Selman. </author> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proc. 13th Nat. Conf. on AI, </booktitle> <pages> pages 1194-1201, </pages> <year> 1996. </year>
Reference-contexts: However, recent improvements in the performance of propositional satisfiability methods [ Cook and Mitchell, 1997 ] cast doubt on this conclusion. Initial results for compiling bounded-length planning problems to SAT were unremarkable [ Kautz and Selman, 1992 ] , but recent experiments <ref> [ Kautz and Selman, 1996 ] </ref> suggest that compilation to SAT might yield the world's fastest STRIPS-style planner. However, several open questions must be answered before concluding that SAT-based planning dominates specialized algorithms. The experiments of [ Kautz and Selman, 1996 ] used hand-crafted SAT encodings, and while [ Kautz et <p> to SAT were unremarkable [ Kautz and Selman, 1992 ] , but recent experiments <ref> [ Kautz and Selman, 1996 ] </ref> suggest that compilation to SAT might yield the world's fastest STRIPS-style planner. However, several open questions must be answered before concluding that SAT-based planning dominates specialized algorithms. The experiments of [ Kautz and Selman, 1996 ] used hand-crafted SAT encodings, and while [ Kautz et al., 1996 ] describe methods for compilation, no one has reported experiments on automatically compiled problems and no one knows which encodings are best. The encodings used by [ Kautz and Selman, 1996 ] included domain <p> The experiments of <ref> [ Kautz and Selman, 1996 ] </ref> used hand-crafted SAT encodings, and while [ Kautz et al., 1996 ] describe methods for compilation, no one has reported experiments on automatically compiled problems and no one knows which encodings are best. The encodings used by [ Kautz and Selman, 1996 ] included domain information that is inexpressible in the STRIPS action language (e.g., the fluent On is irreflexive and noncommutative); to what extent is this information responsible for the speedup they observed? This paper addresses these issues: fl This paper appears in Proceedings of the 15th <p> While it is difficult for a compiler to produce encodings that are as lean as the hand-coded versions of <ref> [ Kautz and Selman, 1996 ] </ref> , we describe type-analysis and factoring techniques that get us close. <p> Since systematic solvers take time exponential in the number of variables, and large numbers of variables also slow stochastic solvers, we would like to reduce this number. In order to do this, <ref> [ Kautz and Selman, 1996 ] </ref> introduced simple operator splitting, which replaces each n-ary action fluent with n unary fluents throughout the encoding. For example, Move (A,B,C,t) is replaced with the conjunction of MoveArg1 (A,t), MoveArg2 (B,t), MoveArg3 (C,t). <p> The bitwise action representation requires no action exclusion axioms. At any time step, only one fully-instantiated action's index can be represented by the bit symbols, so a total ordering is guaranteed. 3 Contrast our definition of conflict with that of Graph-plan [ Blum and Furst, 1995 ] and <ref> [ Kautz and Selman, 1996 ] </ref> . <p> Thus the Medic planner forms a unique testbed for exploring the properties of the different encodings. The architecture of the planner is shown in Figure 5. Action schemata are parsed using the preprocessor from the 5 By contrast, the implementation of <ref> [ Kautz and Selman, 1996 ] </ref> accepts "direct" encodings in a logical constraint language, rather than STRIPS actions. <p> Walksat is not always the fastest solution method. We used the suggested Walksat flag settings from the Satplan planner, but these flags might favor some encodings over others. The timings reported in <ref> [ Kautz and Selman, 1996 ] </ref> are each min ima over many Walksat runs with varying parameter values. <p> Conflict exclusion only excludes pairs of actions that would not be otherwise excluded but should be in order to guarantee the existence of a linearization of the partial order plan returned. It is quite surprising that the regular explanatory encoding has so few variables. <ref> [ Kautz and Selman, 1996 ] </ref> dismiss this encoding as impractical. While its size can blow up prohibitively in the worst case (see Figure 4), in practice the encoding maintains excellent variable and clause sizes. <p> This is important, because this reduction is precisely the reason that we introduced the idea of factoring. Although in the worst case, factoring has no effect, it is clear that factoring is critical in practice. 5.6 Domain Specific Axioms The "direct" encodings of <ref> [ Kautz and Selman, 1996 ] </ref> provide hand-coded, domain-specific information which is impossible to specify in terms of STRIPS actions but is natural when writing general logical axioms.
Reference: [ Kautz et al., 1996 ] <author> H. Kautz, D. McAllester, and B. Selman. </author> <title> Encoding plans in propositional logic. </title> <booktitle> In Proc. 5th Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <year> 1996. </year>
Reference-contexts: However, several open questions must be answered before concluding that SAT-based planning dominates specialized algorithms. The experiments of [ Kautz and Selman, 1996 ] used hand-crafted SAT encodings, and while <ref> [ Kautz et al., 1996 ] </ref> describe methods for compilation, no one has reported experiments on automatically compiled problems and no one knows which encodings are best. <p> including all properties presumed false by the closed world assumption. goal In order to test for a plan of length n, all desired goal properties are asserted to be true at time 2n. 1 The omitted "state-based" encodings can be obtained by re solving away the actions in our encodings <ref> [ Kautz et al., 1996 ] </ref> . a)p,e Actions imply their preconditions and effects. <p> at each odd time step. (A no-op action is inserted as a preprocessing step.) Note that action representation has a huge effect on the size of these axioms (Figure 3). 2 The resulting plan consists of a totally-ordered sequence of actions; indeed it corresponds roughly to a "linear" encoding in <ref> [ Kautz et al., 1996 ] </ref> , except that they include exclusion axioms (see below) to ensure that at most one action is active at a time.
Reference: [ McAllester et al., 1997 ] <author> David McAllester, Bart Selman, and Henry Kautz. </author> <title> Evidence for invariants in local search. </title> <booktitle> In Proc. 14th Nat. Conf. on AI, </booktitle> <address> Providence, Rhode Island, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: size, 7 We do not report encoding or simplification times, which for medium and large problems are dominated by solution time. but automatically determining which solver flags are best for a particular problem is an open problem [ Selman et al., 1997 ] , though progress has been made recently <ref> [ McAllester et al., 1997 ] </ref> . From the asymptotic size bounds of Figure 4 one would expect the bitwise encodings to have the smallest number of variables and the regular encodings to have the largest number of variables.
Reference: [ McCarthy and Hayes, 1969 ] <author> J. McCarthy and P. J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <booktitle> In Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: Classical frame axioms <ref> [ McCarthy and Hayes, 1969 ] </ref> state what fluents are left unchanged by a given action.
Reference: [ Penberthy and Weld, 1992 ] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <month> October </month> <year> 1992. </year> <note> See also http://www.cs.washington.edu/research/projects/ ai/www/ucpop.html. </note>
Reference-contexts: Initial Statefl Actionsfl Axiomfl Schemasfl Decodefl Typefl Optfl Planfl Goalfl Action Repr & Frame Reprfl Shift Time &fl Duplicatefl Simplifyfl Solvefl Repeat as needed, varying plan lengthfl until a solution is foundfl UCPOP planner <ref> [ Penberthy and Weld, 1992 ] </ref> and type optimization (see below) is performed. Next, guided by the choice of action and frame representations (Figure 4), the compiler creates a master axiom schema representing all action pos sibilities for one time step.
Reference: [ Selman et al., 1996 ] <author> B. Selman, H. Kautz, and B. Cohen. </author> <title> Local search strategies for satisfiability testing. </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> 26 </volume> <pages> 521-532, </pages> <year> 1996. </year>
Reference-contexts: The output of this duplication module, combined with the initial state and goal specification, is simplified by pure literal elimination, unit clause propagation, and duplicate literal elimination using a fast (linear time) procedure [ Van Gelder and Tsuji, 1996 ] . The resulting clauses are solved using Walksat <ref> [ Selman et al., 1996 ] </ref> or Tableau [ Crawford and Auton, 1993 ] . 4.1 Optimizations Planning via reduction to propositional satisfiability is impractical without a number of optimizations which determine the truth values of fluents or limit the ground instantiations of actions. Foremost among these are type optimizations.
Reference: [ Selman et al., 1997 ] <author> Bart Selman, Henry Kautz, and David McAllester. </author> <title> Computational challenges in propositional reasoning and search. </title> <booktitle> In Proc. 15th Int. Joint Conf. on AI, </booktitle> <year> 1997. </year>
Reference-contexts: It is believed that solution time correlates with CNF size, 7 We do not report encoding or simplification times, which for medium and large problems are dominated by solution time. but automatically determining which solver flags are best for a particular problem is an open problem <ref> [ Selman et al., 1997 ] </ref> , though progress has been made recently [ McAllester et al., 1997 ] .
Reference: [ Van Gelder and Tsuji, 1996 ] <author> A. Van Gelder and Y. K. Tsuji. </author> <title> Sat-isfiability testing with more reasoning and less guessing. </title> <editor> In D. S. Johnson and M. Trick, editors, </editor> <title> Cliques, Coloring, and Satisfia-bility: Second DIMACS Implementation Challenge., </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1996. </year>
Reference-contexts: The periodic axiom schema is instantiated multiple times, based on the plan length currently being considered. The output of this duplication module, combined with the initial state and goal specification, is simplified by pure literal elimination, unit clause propagation, and duplicate literal elimination using a fast (linear time) procedure <ref> [ Van Gelder and Tsuji, 1996 ] </ref> .
References-found: 14

