URL: http://www.cs.utexas.edu/users/dagh/Papers/hicss.ps
Refering-URL: http://www.cs.utexas.edu/users/dagh/papers.html
Root-URL: 
Email: fparashar, browneg@cs.utexas.edu  
Title: On Partitioning Dynamic Adaptive Grid Hierarchies  
Author: Manish Parashar and James C. Browne 
Date: January, 1996)  
Note: (To be presented at HICSS-29,  
Address: Austin  
Affiliation: Department of Computer Sciences University of Texas at  
Abstract: This paper presents a computationally efficient run-time partitioning and load-balancing scheme for the Distributed Adaptive Grid Hierarchies that underlie adaptive mesh-refinement methods. The partitioning scheme yields an efficient parallel computational structure that maintains locality to reduce communications. Further, it enables dynamic re-partitioning and load-balancing of the adaptive grid hierarchy to be performed cost-effectively. The run-time partitioning support presented has been implemented within the framework of a data-management infrastructure supporting dynamic distributed data-structures for parallel adaptive numerical techniques. This infrastructure is the foundational layer of a computational toolkit for the Binary Black-Hole NSF Grand Challenge project. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Fagin, </author> <title> "Extendible Hashing A Fast Access Mechanism for Dynamic Files", </title> <journal> ACM TODS, </journal> <volume> 4 </volume> <pages> 315-344, </pages> <year> 1979. </year>
Reference-contexts: The problem of partitioning and dynamically re-partitioning the multidimensional grid hierarchy is thus reduced to appropriately decomposing its one-dimensional representation. The partitioning scheme first defines an extendable, ordered index space using extendible hashing techniques <ref> [1] </ref>. Space-filling curves [2, 3] are then used to define a mapping from the multi-dimensional grid hierarchy to the linear index-space. <p> This overhead is small compared to the storage required for the grid data itself. Data associated with the SDDG/DAGH data-structures is stored within a "Scalable Distributed Dynamic Array" (SDDA) which uses extendable hashing techniques <ref> [1] </ref> to provide a dynamically extendable, globally indexed storage. The SDDA is a hierarchical structure and is capable dynamically expanding and contracting. Entries into the SDDA correspond to SDDG/DAGH blocks and the array is indexed using associated keys.
Reference: [2] <author> Giuseppe Peano, </author> <title> "Sur une courbe, qui remplit toute une aire plane", </title> <journal> Mathematische Annalen, </journal> <volume> 36 </volume> <pages> 157-160, 1890. </pages>
Reference-contexts: The problem of partitioning and dynamically re-partitioning the multidimensional grid hierarchy is thus reduced to appropriately decomposing its one-dimensional representation. The partitioning scheme first defines an extendable, ordered index space using extendible hashing techniques [1]. Space-filling curves <ref> [2, 3] </ref> are then used to define a mapping from the multi-dimensional grid hierarchy to the linear index-space. The self-similar nature of these mappings is exploited to maintain locality across levels of the grid hierarchy while their locality preserving characteristics guarantees locality within partitions of individual grids in the hierarchy. <p> The SDDG/DAGH linear representation is generated using space-filling curves introduced below. A detailed discussion of the design of these data-structures is presented in [5]. 4.1 Space-Filling Curves Space-filling curves <ref> [2, 3, 6] </ref> are a class of locality preserving mappings from d-dimensional space to 1-dimensional space, i.e. N d ! N 1 , such that each point in N d is mapped to a unique point or index in N 1 .
Reference: [3] <author> Hanan Samet, </author> <title> The Design and Analysis of Spatial Data Structures, </title> <publisher> Addison - Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: The problem of partitioning and dynamically re-partitioning the multidimensional grid hierarchy is thus reduced to appropriately decomposing its one-dimensional representation. The partitioning scheme first defines an extendable, ordered index space using extendible hashing techniques [1]. Space-filling curves <ref> [2, 3] </ref> are then used to define a mapping from the multi-dimensional grid hierarchy to the linear index-space. The self-similar nature of these mappings is exploited to maintain locality across levels of the grid hierarchy while their locality preserving characteristics guarantees locality within partitions of individual grids in the hierarchy. <p> The SDDG/DAGH linear representation is generated using space-filling curves introduced below. A detailed discussion of the design of these data-structures is presented in [5]. 4.1 Space-Filling Curves Space-filling curves <ref> [2, 3, 6] </ref> are a class of locality preserving mappings from d-dimensional space to 1-dimensional space, i.e. N d ! N 1 , such that each point in N d is mapped to a unique point or index in N 1 .
Reference: [4] <author> Marsha J. Berger and Joseph Oliger, </author> <title> "Adaptive Mesh Refinement for Hyperbolic Partial Differential Equations", </title> <journal> Jounal of Computational Physics, </journal> <pages> pp. 484-512, </pages> <year> 1984. </year>
Reference-contexts: Refinement proceeds recursively so that regions on the finer grid requiring more resolution are similarly tagged and even finer grids are over-layed on these regions. The resulting grid structure is a dynamic adaptive grid hierarchy. The adaptive grid hierarchy corresponding to the AMR formulation by Berger & Oliger <ref> [4] </ref> is shown in Figure 1. Operation on the hierarchy defined by this algorithm are outlined below: Time Integration: Time integration is the update operation performed on each grid at each level of the adaptive grid hierarchy. Integration uses an application specific difference operator.
Reference: [5] <author> Manish Parashar and James C. Browne, </author> <title> "Distributed Dynamic Data-Structures for Parallel Adaptive Mesh-Refinement", </title> <booktitle> Proceedings of the International Conference for High Performance Computing, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: The SDDG/DAGH linear representation is generated using space-filling curves introduced below. A detailed discussion of the design of these data-structures is presented in <ref> [5] </ref>. 4.1 Space-Filling Curves Space-filling curves [2, 3, 6] are a class of locality preserving mappings from d-dimensional space to 1-dimensional space, i.e. N d ! N 1 , such that each point in N d is mapped to a unique point or index in N 1 .
Reference: [6] <author> Hans Sagan, </author> <title> Space-Filling Curves, </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The SDDG/DAGH linear representation is generated using space-filling curves introduced below. A detailed discussion of the design of these data-structures is presented in [5]. 4.1 Space-Filling Curves Space-filling curves <ref> [2, 3, 6] </ref> are a class of locality preserving mappings from d-dimensional space to 1-dimensional space, i.e. N d ! N 1 , such that each point in N d is mapped to a unique point or index in N 1 .
Reference: [7] <author> Manish Parashar and James C. Browne, </author> <title> "An Infrastructure for Parallel Adaptive Mesh-Refinement Techniques", </title> <type> Technical report, </type> <institution> Department of Computer Sciences, University of Texas at Austin, 2.400 Taylor Hall, Austin, </institution> <address> TX 78712, </address> <year> 1995, </year> <note> Available via WWW at http://godel.ph.utexas.edu/Members/parashar/toolkit.html. </note>
Reference-contexts: For example, a distribution that decomposes each grid separately (Independent Grid Distribution) is generated by viewing the DAGH list as a set of SDDG lists. 5 Experimental Evaluations The run-time partitioning support described in this paper has been incorporated into a data-management infrastructure for distributed hierarchical AMR <ref> [7] </ref>. The infrastructure is implemented as a C++ class library on top of the MPI [8] communication system, and provides high-level programming abstraction for expressing AMR computations. These abstraction manage the dynamics of the AMR grid structure and provide a fortran-like interface to the developer.
Reference: [8] <author> Message Passing Interface Forum, </author> <title> "MPI: A Message-Passing Interface Standard", </title> <type> Technical Report CS-94-230, </type> <institution> Computer Science Department, University of Ten-nessee, Knoxville, TN, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: The infrastructure is implemented as a C++ class library on top of the MPI <ref> [8] </ref> communication system, and provides high-level programming abstraction for expressing AMR computations. These abstraction manage the dynamics of the AMR grid structure and provide a fortran-like interface to the developer. This enables all computations on grid-data to be performed by Fortran subroutines.
Reference: [9] <author> J. Masso and C. Bona, </author> <title> "Hyperbolic System for Numerical Relativity", </title> <journal> Physics Review Letters, </journal> <volume> 68(1097), </volume> <year> 1992. </year>
Reference-contexts: H3expresso is a "concentrated" version of the full H version 3.3 code that solves the general relativistic Einstein's Equations in a variety of physical scenarios <ref> [9] </ref>. The original H3expresso code is non-adaptive and is implemented in Fortran 90.
References-found: 9

