URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-94-35.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Archive Service with Persistent Naming for Objects  
Author: John D. Jones, James C. French 
Note: An  
Abstract: Technical Report CS-94-35, Department of Computer Science, University of Virginia Technical Report CS-94-35 Department of Computer Science University of Virginia August 1994 Abstract Wide-area systems for information storage and retrieval are rapidly gaining in popularity. Examples include FTP (File Transfer Protocol), Gopher, and World Wide Web (WWW) archives of many types of information. Each system provides a means of naming a file or data object so that others may retrieve the information. Unfortunately, this name depends on the network address of the server and on the filename within that machine. Some exibility is gained by using aliases for these names, but problems persist. Additionally, the use of aliases does not handle the replication of files at several sites, or the movement of a file from one site to another. The result is that these names frequently become invalid. A name that is good today may not work in a week or a month. If a name for a useful collection is passed on to others, it may not work by the time they try to use it. For these reasons, a better approach to naming is needed. In this paper we present a prototype distributed service for archiving files. Each file is given a permanent name, which can be used to retrieve the file from any site of the archive. If the contacted site does not have the data, it returns the current location, which is accessed automatically by the client. This allows files to be moved and replicated within the archive without invalidating any of the names. In a hypermedia environment such as the WWW, this means that the links will remain valid, avoiding the need to change each document that references this data. We have developed this system to demonstrate that this approach is feasible. We describe both a standalone service that is accessed via a command-line client, and a gateway to the service from the World Wide Web. The gateway allows the archive to be accessed from NCSA Mosaic, or any client that can use the Hypertext Transfer Protocol (HTTP). The service is assumed to be global in scope, so issues of scalability are critical. This inuenced our design, and led us to experiment with caching of names, and automatic replication of frequently accessed files. We have, however, omitted the implementation of a distributed name resolver, using a centralized one instead. A distributed implementation would be required for an actual service, and we describe how this might be built. The task of locating an archive site is also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Berners-Lee, T., </author> <title> Universal Resource Identifiers: A Unifying Syntax for the Expression of Names and Addresses of Objects on the Network as used in the World Wide Web, </title> <type> RFC 1630, </type> <month> June </month> <year> 1994. </year>
Reference-contexts: Technical Report CS-94-35, Department of Computer Science, University of Virginia 4 RELATED WORK Other approaches to persistent, location-independent naming are being pursued. IETF The Internet Engineering Task Force (IETF) has done much recent work to define what is needed for names in the Internet. This covers the syntax <ref> [1] </ref>, [2] to be used, requirements for location independent names [3], and scenarios of how additional characteristics may be used to assist in finding names [4], [5], [6]. IETF research is published in Internet Drafts available via anonymous FTP.
Reference: 2. <author> Berners-Lee, T., </author> <title> Uniform Resource Locators (URL), URI Working Group Internet Draft: </title> <address> draft-ietf-uri-url-03.-ps,txt, &lt;http://info.cern.ch/hypertext/WWW/Addressing/URL/url-spec.txt&gt;, March 21, </address> <year> 1994. </year>
Reference-contexts: This allows a single name (albeit with several fields) to be built, saved, transferred, and used in hypertext documents. Thus indices and directories of Internet resources are written, making documents, software, and other data accessible with the click of a mouse. THE PROBLEM However, the names in the WWW <ref> [2] </ref>, and all major systems currently in use (including WAIS [12] and the others listed above) employ a naming scheme that identifies a specific copy of a resource, on a specific computer. <p> Technical Report CS-94-35, Department of Computer Science, University of Virginia 4 RELATED WORK Other approaches to persistent, location-independent naming are being pursued. IETF The Internet Engineering Task Force (IETF) has done much recent work to define what is needed for names in the Internet. This covers the syntax [1], <ref> [2] </ref> to be used, requirements for location independent names [3], and scenarios of how additional characteristics may be used to assist in finding names [4], [5], [6]. IETF research is published in Internet Drafts available via anonymous FTP.
Reference: 3. <author> Sollins, K., Masinter, L., </author> <title> Requirements for Uniform Resource Names, URI Working Group Internet Draft: </title> <address> draft-sollins-urn-01.txt, </address> <month> June 30, </month> <year> 1994. </year>
Reference-contexts: IETF The Internet Engineering Task Force (IETF) has done much recent work to define what is needed for names in the Internet. This covers the syntax [1], [2] to be used, requirements for location independent names <ref> [3] </ref>, and scenarios of how additional characteristics may be used to assist in finding names [4], [5], [6]. IETF research is published in Internet Drafts available via anonymous FTP. <p> While the URL identifies the current location of a resource, the URN is meant to capture the meaning, so that, if the resource moves, a user with a URN will still be able to retrieve what is wanted. <ref> [3] </ref> Accordingly, this will sometimes require a name-to-location translation, using a lookup service. For this, the IETF is currently proposing to use Whois++. [5] However, assigning the URN to identify the meaning of an object opens the door to many interpretations.
Reference: 4. <author> Mealling, M., </author> <title> Encoding and Use of Uniform Resource Characteristics, URI Working Group Internet Draft: </title> <address> draft-ietf-mealling-urc-spec-00.txt, </address> <month> July 8, </month> <year> 1994. </year>
Reference-contexts: This covers the syntax [1], [2] to be used, requirements for location independent names [3], and scenarios of how additional characteristics may be used to assist in finding names <ref> [4] </ref>, [5], [6]. IETF research is published in Internet Drafts available via anonymous FTP. Additional insight, and discussion of research not yet reported in Internet Drafts is found in the mailing list for the Uniform Resource Identifier (URI) Working Group [7].
Reference: 5. <institution> URN to URC resolution Scenario, URI Working Group Internet Draft: draft-ietf-uri-urn2urc-00.txt, </institution> <month> February 19, </month> <year> 1994. </year>
Reference-contexts: This covers the syntax [1], [2] to be used, requirements for location independent names [3], and scenarios of how additional characteristics may be used to assist in finding names [4], <ref> [5] </ref>, [6]. IETF research is published in Internet Drafts available via anonymous FTP. Additional insight, and discussion of research not yet reported in Internet Drafts is found in the mailing list for the Uniform Resource Identifier (URI) Working Group [7]. <p> For this, the IETF is currently proposing to use Whois++. <ref> [5] </ref> However, assigning the URN to identify the meaning of an object opens the door to many interpretations. To some, this is merely a specific collection of bytes, verifiable by checksum. <p> The definition of these is similarly open-ended, including ANY conceivable type of meta-information or URI. (URI, or Uniform Resource Identifier, is a generic term encompassing URN, URL, LIFN, etc.) [6] <ref> [5] </ref> This allows the characteristic information to go far beyond the basic set maintained by the Archive Service.
Reference: 6. <author> Mealling, M., </author> <title> Specification of Uniform Resource Characteristics, URI Working Group Internet Draft: </title> <address> draft-ietf-uri-urc-00.txt, </address> <month> April 5, </month> <year> 1994. </year>
Reference-contexts: This covers the syntax [1], [2] to be used, requirements for location independent names [3], and scenarios of how additional characteristics may be used to assist in finding names [4], [5], <ref> [6] </ref>. IETF research is published in Internet Drafts available via anonymous FTP. Additional insight, and discussion of research not yet reported in Internet Drafts is found in the mailing list for the Uniform Resource Identifier (URI) Working Group [7]. <p> The definition of these is similarly open-ended, including ANY conceivable type of meta-information or URI. (URI, or Uniform Resource Identifier, is a generic term encompassing URN, URL, LIFN, etc.) <ref> [6] </ref> [5] This allows the characteristic information to go far beyond the basic set maintained by the Archive Service.
Reference: 7. <institution> Archive of the IETF URI Working Group Mailing List, &lt;http://www.acl.lanl.gov/URI/archive/ archives.html&gt;. </institution>
Reference-contexts: IETF research is published in Internet Drafts available via anonymous FTP. Additional insight, and discussion of research not yet reported in Internet Drafts is found in the mailing list for the Uniform Resource Identifier (URI) Working Group <ref> [7] </ref>. URN The Uniform Resource Name (URN) is the primary persistent, location independent name under consideration by the IETF. They envision that the URN will eventually become the standard mechanism to identify a resource.
Reference: 8. <author> Sollins, K., URN and citations, </author> <title> Message on URI Mailing List, </title> <address> &lt;http://www.acl.lanl.gov/ URI/archive/uri-94q2.messages/58.html&gt;, </address> <month> April 14, </month> <year> 1994. </year>
Reference-contexts: Whois++ is an effort by the IETF to combine the best features of these services and produce a standard for Internet directory services. Three types of records are considered in the basic service: people, hosts, and domains. <ref> [8] </ref> Extensions consider its use as an indexing and directory service for all resources in the Internet. [9] The indexing would use registered database names (rather than host names), helping users locate the correct Whois server, and protecting the names from being invalidated when a host is moved.
Reference: 9. <author> Moore, K., Re: URN and Citations, </author> <title> Message on URI Mailing List, </title> <address> &lt;http://www.acl.lanl.gov/ URI/archive/uri-94q2.messages/74.html&gt;, </address> <month> April 16, </month> <year> 1994. </year>
Reference-contexts: It goes to the point of identifying a particular, immutable stream of bytes. To ensure this, there are proposals to encode a checksum signature into the LIFN so that users can determine whether the data was changed. <ref> [9] </ref> The difference between this and names in the Archive Service is that there are no mutable names. Mutable names are needed in the Archive Service to allow support for URN-like functionality built on top of the Archive Service. <p> Three types of records are considered in the basic service: people, hosts, and domains. [8] Extensions consider its use as an indexing and directory service for all resources in the Internet. <ref> [9] </ref> The indexing would use registered database names (rather than host names), helping users locate the correct Whois server, and protecting the names from being invalidated when a host is moved. A more structured format and record types are also introduced, to support machine reading of the information returned.
Reference: 10. <author> Gargano, J. and Weiss, K., </author> <title> Whois and Network Information Lookup Service Whois++, WNILS Working Group Internet Draft: </title> <address> draft-ietf-wnils-whois-lookup-01.txt, </address> <month> June 26, </month> <year> 1994. </year>
Reference: 11. <author> Deutsch, Schoultz, Faltstrom, Weider, </author> <title> Architecture of the WHOIS++ Service, Network Working Group Internet Draft: </title> <address> draft-ietf-wnils-whois-arch-00.txt, </address> <month> April 6, </month> <year> 1994. </year>
Reference-contexts: make it easy to locate and retrieve documents, they implemented a gateway to the WWW and modified a Web browser (actually, they changed the Web common library, libwww, which is linked into many browsers) to connect directly to a SOLO server with a URL containing a new protocol specifier, solo:. <ref> [11] </ref> This integration of a new name type into a Web client is something we envision as necessary for the Archive Service to eliminate the hostname from the URL and make a truly location-independent name.
Reference: 12. <author> Huitema, Pays, Zahm, Woermann, </author> <title> Simple Object Look-up Protocol (SOLO), Network Working Group Internet Draft: </title> <address> draft-huitema-solo-00.txt, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Thus indices and directories of Internet resources are written, making documents, software, and other data accessible with the click of a mouse. THE PROBLEM However, the names in the WWW [2], and all major systems currently in use (including WAIS <ref> [12] </ref> and the others listed above) employ a naming scheme that identifies a specific copy of a resource, on a specific computer. Domain name aliases (in the Internet) and soft file links (in Unix) allow administrators some exibility in changing hosts or renaming files.
Reference: 13. <author> Touvet, J-C, Pays, P-A, </author> <title> Directory Services and WWW integration using SOLO, </title> <note> Inria, &lt;http://champagne.inria.fr/People/JCT/SOLOWWW/1.0.ps&gt;, Version 1.0. </note>
Reference-contexts: To identify remote files, Jade uses a naming scheme (primarily in order to mount them) that includes the host and local file names. To be useful as a users basic file system, Jade employs file caching and other mechanisms to improve performance. <ref> [13] </ref> For location independence, a directory structure is tied to a user, not a specific machine. When a user logs in, the appropriate directory information is retrieved and used to locate the actual files. However, the canonical name of an objects contains a physical host name.
Reference: 14. <author> Kahle, B., </author> <title> Document Identifiers or International Standard Book Numbers for the Electronic Age, </title> <institution> Thinking Machines Corporation, </institution> <note> version 2.2, </note> <month> September </month> <year> 1991. </year> <type> Technical Report CS-94-35, </type> <institution> Department of Computer Science, University of Virginia 35 </institution>
Reference-contexts: It also uses names that indicate the server where a file is stored. As the guiding model was of a team of developers needing shared access to program files, a limited number of servers was envisioned, and a simple name is used for each. <ref> [14] </ref> This does not support a global repository, although it could easily be extended by adding domains to the server names. The system is interesting in that it only supports sharing for immutable files, avoiding the cache consistency problem.
Reference: 15. <author> Rao, H. C., and Peterson, L. L., </author> <title> Accessing Files in an Internet: The Jade File System, </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> vol 19, no. 6, </volume> <pages> pp. 613-24, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: However, a read may also request the latest version of the file, gaining some of the advantages (and problems) of mutable objects. Other Distributed File Systems Conventional distributed file systems are surveyed in <ref> [15] </ref> and [16]. These, like Jade and Cedar, are designed to be the primary filesystem used to store and retrieve files for everyday use. Commercial and experimental file systems in this category include Sun Network File System, Andrew File System, Sprite, and Locus.
Reference: 16. <author> Gifford, Needham, Schroeder, </author> <title> The Cedar File System, </title> <journal> Communications of the ACM, </journal> <volume> vol 31, no. 3, </volume> <pages> pp. 288-298, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: However, a read may also request the latest version of the file, gaining some of the advantages (and problems) of mutable objects. Other Distributed File Systems Conventional distributed file systems are surveyed in [15] and <ref> [16] </ref>. These, like Jade and Cedar, are designed to be the primary filesystem used to store and retrieve files for everyday use. Commercial and experimental file systems in this category include Sun Network File System, Andrew File System, Sprite, and Locus.
Reference: 17. <author> Satyanarayanan, M., </author> <title> A Survey of Distributed File Systems, </title> <journal> Annual Review of Comp. Sci., </journal> <volume> no. 4, </volume> <pages> pp. 73-104, </pages> <year> 1990. </year>
Reference-contexts: Archive Management This section describes the algorithms used to manage the data stored in the Archive. This includes making the decisions to add or delete extra copies of the data, and how the data is copied or removed using the fundamental operations. As noted in Dowdy and Foster <ref> [17] </ref>, an optimal file placement solution is not reasonable to expect, and even good heuristics can be tricky. Therefore, we adopted a simple algorithm, as our primary goal was implementing the method for file management, not the policy.
Reference: 18. <author> Levy, E. and Silberschatz, A., </author> <title> Distributed File Systems: Concepts and Examples, </title> <journal> ACM Computing Surveys, </journal> <volume> vol 22, no. 4, </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: As the first interface for Web clients, we ran the hypertext server (httpd) developed by the National Center for Supercomputer Applications (NCSA). To use the gateway, a Web client opens a URL similar to http://gateway-host:port/ARCHIVE/formget?190.3.0.0 This causes httpd to call a shell script using the Common Gateway Interface (CGI) <ref> [18] </ref>. The script serves as a gateway, parsing the logical name out of the parameters from the hypertext server, and uses this to invoke a retrieve request with the Archive Client. The clients output is returned to the Web browser via the hypertext daemon.
Reference: 19. <author> Dowdy, L. W. and Foster, D. V., </author> <title> Comparative Models of the File Assignment Problem, </title> <journal> Computing Surveys, </journal> <volume> vol. 14, No. 2, </volume> <pages> pp. 287-313, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: Because all change requests to a single object must go through its home resolver, consistency is maintained in the same way as with a centralized resolver. Implementing an efficient distributed name service is also discussed by Triantifillou and Bauer <ref> [19] </ref> and Cheriton and Mann [20]. To improve the communication efficiency, the first approach would be to combine all the modules at a site into a single server process, as has been noted previously. Another step would be to try and avoid the impact of TCPs connection model.
Reference: 20. <author> McCool, R., </author> <title> The Common Gateway Interface, </title> <publisher> NCSA, &lt;http://hoohoo.ncsa.uiuc.edu/cgi/ overview.html&gt;. </publisher>
Reference-contexts: Because all change requests to a single object must go through its home resolver, consistency is maintained in the same way as with a centralized resolver. Implementing an efficient distributed name service is also discussed by Triantifillou and Bauer [19] and Cheriton and Mann <ref> [20] </ref>. To improve the communication efficiency, the first approach would be to combine all the modules at a site into a single server process, as has been noted previously. Another step would be to try and avoid the impact of TCPs connection model.
Reference: 21. <author> Mockapetris, P., </author> <title> Domain Names - Concepts and Facilities, </title> <type> RFC 1034, </type> <month> November </month> <year> 1987. </year>
Reference: 22. <author> Mockapetris, P., </author> <title> Domain Names - Implementation and Specification, </title> <type> RFC 1035, </type> <month> November </month> <year> 1987. </year>
Reference: 23. <author> Triantifillou, P. and Bauer, M., </author> <title> Distributed Name Management in Internet Systems: A Study of Design and Performance Issues, </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 9, </volume> <pages> pp. 357-68, </pages> <year> 1990. </year>
Reference: 24. <author> Cheriton, D. R. and Mann, T. P., </author> <title> Decentralizing a Global Naming Service for Performance and Fault Tolerance, </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> vol. 7, no. 2, </volume> <pages> pp., 147-83, </pages> <month> May </month> <year> 1989. </year> <type> Technical Report CS-94-35, </type> <institution> Department of Computer Science, University of Virginia 36 </institution>
References-found: 24

