URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/mol.95.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: 
Title: The Numerical Solution of Large Systems of Stiff IVPs for ODEs  
Author: Kenneth R. Jackson 
Keyword: Key words: Method of Lines, MOL, time-dependent partial differential equations, PDEs, ordinary differential equations, ODEs, initial value problems, IVPs, large systems, stiff problems.  
Note: Original draft  Accepted for publication by the J. Applied Numerical Mathematics.  AMS(MOS) subject classification: 65L05. This work was supported in part by the Natural  
Address: Toronto, Ontario, Canada, M5S 1A4.  Ontario.  
Affiliation: Computer Science Department, University of Toronto,  Sciences and Engineering Research Council of Canada and the Information Technology Research Centre of  
Email: krj@cs.toronto.edu.  
Date: July 1995. Revised September 1995.  
Abstract: The application of the method of lines to a system of time-dependent partial differential equations gives rise to a system of initial-value problems (IVPs) for ordinary differential equations (ODEs). Such systems are often stiff and very large. The need to solve problems of this kind has affected the development of both formulas and codes for IVPs for ODEs. We survey some of these developments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bellen and M. Zennaro (eds.), </author> <title> Special Issue on Parallel Methods for Ordinary Differential Equations, </title> <journal> Appl. Numer. Math., </journal> <pages> 11(1-3), </pages> <year> 1993. </year>
Reference-contexts: However, we have omitted this material from our survey because good reviews of parallel ODE schemes are available. See, for example, Burrage's book [8], the four survey papers and twelve research articles in <ref> [1] </ref> or my older survey paper [28]. 2 Solving Implicit Equations All commonly used formulas for solving stiff IVPs are implicit in some sense. Therefore, stiff ODE codes must solve a linear or nonlinear system at each step of the integration.
Reference: [2] <author> K. E. Brenan, S. L. Campbell and L. R. Petzold, </author> <title> Numerical Solution of Initial-Value Problems in in Differential-Algebraic Equations, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: Moreover, in the solution of large problems, the computation of the coefficients of the method is not a significant cost for any of these techniques. The fixed-leading-coefficient (FLC) implementation of the BDFs is used in the newer codes DASSL <ref> [2] </ref> and VODE [3]. This VS extension is similar to the FC implementation in that, when the stepsize is changed, both can be viewed as first interpolating past values 4 to compute new evenly spaced past values and then applying the FS BDF formula to those evenly spaced values.
Reference: [3] <author> P. N. Brown, G. D. Byrne and A. C. Hindmarsh, VODE: </author> <title> A Variable Coefficient ODE Solver, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 10, </volume> <year> 1989, </year> <pages> 1038-1051. </pages>
Reference-contexts: Because of this, most good modern ODE solvers incorporate sophisticated heuristics to decide when to update the scalar ff 0 =h, to re-evaluate the Jacobian f y (t n ; y (l) n ) and to refactor W (l) n . See <ref> [3] </ref> and the references therein for a further discussion of this point. <p> Moreover, in the solution of large problems, the computation of the coefficients of the method is not a significant cost for any of these techniques. The fixed-leading-coefficient (FLC) implementation of the BDFs is used in the newer codes DASSL [2] and VODE <ref> [3] </ref>. This VS extension is similar to the FC implementation in that, when the stepsize is changed, both can be viewed as first interpolating past values 4 to compute new evenly spaced past values and then applying the FS BDF formula to those evenly spaced values. <p> However, when the stepsizes are changed frequently the FLC implementation tends to be more stable and robust than the FC implementation. Thus the FLC implementation combines (to some degree) the advantages of the VC and FC implementations. See <ref> [3] </ref> and [30] for further discussion. 4 Similarity Factorizations As noted in x2, the cost of evaluating the Jacobian f y (t n ; y (l) n ) and refactoring the New-ton iteration matrix W (l) n (8) is often the dominant cost in solving a large stiff IVP. <p> Many codes, such as VODE <ref> [3] </ref>, include heuristics to decide when to update only the scalar factor ff 0 =h before re-factoring W (l) n and when to update both ff 0 =h and the Jacobian matrix f y (t n ; y (l) n ). (In the first case, a stored copy of f y <p> Note that LSODPK [5] and VODPK [4], the two best-known stiff ODE solvers incorporating preconditioned Krylov subspace methods, employ many of the strategies and heuristics of LSODE [24] and VODE <ref> [3] </ref>, respectively. A compelling reason for this is that it is natural to make as few changes as necessary when transforming one code in a family to another code in the same family.
Reference: [4] <author> P. N. Brown, G. D. Byrne and A. C. Hindmarsh, VODPK: </author> <title> A Variable-Coefficient Ordinary Differential Equation Solver with the Preconditioned Krylov method GMRES for the Solution of Linear Systems, </title> <note> available from Netlib, </note> <year> 1994. </year>
Reference-contexts: Recently, most attention has been focused on preconditioned Krylov subspace methods. For a discussion of this class of iterative linear equation solvers in the context of stiff ODE codes, see [6, 7, 14, 20, 31] and the references therein. In the introductory comments of VODPK <ref> [4] </ref>, Brown, Byrne and Hindmarsh state: "To achieve an efficient solution, the preconditioned Krylov methods in VODPK generally require a thoughtful choice of preconditioners. <p> Note that LSODPK [5] and VODPK <ref> [4] </ref>, the two best-known stiff ODE solvers incorporating preconditioned Krylov subspace methods, employ many of the strategies and heuristics of LSODE [24] and VODE [3], respectively.
Reference: [5] <author> P. N. Brown and A. C. Hindmarsh, LSODPK: </author> <title> Livermore Solver for Ordinary Differential Equations with Preconditioned Krylov Iteration Methods for the Newton Correction of Linear Systems, </title> <type> private communication, </type> <year> 1987. </year>
Reference-contexts: Note that LSODPK <ref> [5] </ref> and VODPK [4], the two best-known stiff ODE solvers incorporating preconditioned Krylov subspace methods, employ many of the strategies and heuristics of LSODE [24] and VODE [3], respectively.
Reference: [6] <author> P. N. Brown and A. C. Hindmarsh, </author> <title> Matrix-Free Methods for Stiff Systems of ODE's, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 23, </volume> <year> 1986, </year> <pages> 610-638. </pages>
Reference-contexts: Recently, most attention has been focused on preconditioned Krylov subspace methods. For a discussion of this class of iterative linear equation solvers in the context of stiff ODE codes, see <ref> [6, 7, 14, 20, 31] </ref> and the references therein. In the introductory comments of VODPK [4], Brown, Byrne and Hindmarsh state: "To achieve an efficient solution, the preconditioned Krylov methods in VODPK generally require a thoughtful choice of preconditioners. <p> However this leads to an important question: What is an appropriate stopping criterion for the iterative solution of (6)? Although this question has been addressed by several authors (see <ref> [6, 7, 14, 20, 31] </ref> and the references therein), I do not believe it has been satisfactorily resolved. 9 As noted in x4, Krylov subspace methods are particularly effective when the system of ODEs has only a few stiff components. <p> In this context, preconditioning may not be needed and a matrix-free implementation <ref> [6, 7, 14] </ref>, in which the Jacobian f y (t n ; y (l) n ) is never explicitly generated, may be highly effective.
Reference: [7] <author> P. N. Brown and A. C. Hindmarsh, </author> <title> Reduced Storage Matrix Methods in Stiff ODE Systems, </title> <journal> Appl. Math. Comp., </journal> <volume> 31, </volume> <year> 1989, </year> <pages> 40-91. </pages>
Reference-contexts: Recently, most attention has been focused on preconditioned Krylov subspace methods. For a discussion of this class of iterative linear equation solvers in the context of stiff ODE codes, see <ref> [6, 7, 14, 20, 31] </ref> and the references therein. In the introductory comments of VODPK [4], Brown, Byrne and Hindmarsh state: "To achieve an efficient solution, the preconditioned Krylov methods in VODPK generally require a thoughtful choice of preconditioners. <p> However this leads to an important question: What is an appropriate stopping criterion for the iterative solution of (6)? Although this question has been addressed by several authors (see <ref> [6, 7, 14, 20, 31] </ref> and the references therein), I do not believe it has been satisfactorily resolved. 9 As noted in x4, Krylov subspace methods are particularly effective when the system of ODEs has only a few stiff components. <p> In this context, preconditioning may not be needed and a matrix-free implementation <ref> [6, 7, 14] </ref>, in which the Jacobian f y (t n ; y (l) n ) is never explicitly generated, may be highly effective.
Reference: [8] <author> K. Burrage, </author> <title> Parallel and Sequential Methods for Ordinary Differential Equations, </title> <publisher> Oxford Science Publishers, Clarendon Press, Oxford, </publisher> <year> 1995. </year>
Reference-contexts: See [35] for a more comprehensive survey. The talk upon which this paper is based concluded with a discussion of parallel methods for IVPs for ODEs. However, we have omitted this material from our survey because good reviews of parallel ODE schemes are available. See, for example, Burrage's book <ref> [8] </ref>, the four survey papers and twelve research articles in [1] or my older survey paper [28]. 2 Solving Implicit Equations All commonly used formulas for solving stiff IVPs are implicit in some sense.
Reference: [9] <author> K. Burrage, </author> <title> A Special Family of Runge-Kutta Methods for Solving Stiff Differential Equations, </title> <journal> BIT, </journal> <volume> 18, </volume> <year> 1978, </year> <pages> 237-240. 15 </pages>
Reference-contexts: Therefore, one matrix only need be factored, significantly reducing the cost of solving these equations, particularly if the underlying system of IVPs is large. RK formulas for which all i = 2 R are called singly-implicit Runge-Kutta (SIRK) formulas and were first investigated by Burrage <ref> [9] </ref>. Although SIRK formulas are in many ways more general than SDIRK schemes, their restricted form still imposes some constraints on the order and stability properties compared to the more general RK formula (21)-(22).
Reference: [10] <author> K. Burrage, J. C. Butcher and F. H. Chipman, </author> <title> An Implementation of Singly-Implicit Runge-Kutta Methods, </title> <journal> BIT, </journal> <volume> 20, </volume> <year> 1980, </year> <pages> 326-340. </pages>
Reference-contexts: However, it is much easier to construct high-order SIRK formulas with good stability properties than it is for SDIRK schemes. For a further discussion of SIRK formulas, see [12, 21] and the references therein. Burrage, Butcher and Chipman <ref> [10] </ref> developed the variable-stepsize variable-order code STRIDE based on s-stage SIRK formulas of order s for s = 1; 2; : : : ; 15.
Reference: [11] <author> J. C. Butcher, </author> <title> On the Implementation of Implicit Runge-Kutta Methods, </title> <journal> BIT, </journal> <volume> 16, </volume> <year> 1976, </year> <pages> 237-240. </pages>
Reference-contexts: Given an initial guess Y (0) n for Y n , the associated simplified Newton iteration is W (l) n = G (Y (l) Y (l+1) n + (l) for l = 0; 1; : : :. Butcher <ref> [11] </ref> noted that the tensor product form of W (l) n can be exploited to great advantage in solving (27).
Reference: [12] <author> J. C. Butcher, </author> <title> The Numerical Analysis of Ordinary Differential Equations, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: For example, the order of an s-stage DIRK or SDIRK formula is at most s + 1 and A-stable formulas of this order exist for s = 1; 2; 3; 5 only. For a further discussion of DIRK and SDIRK schemes, see <ref> [12, 21] </ref> and the references therein. Ntrsett and Thomsen developed the code SIMPLE [32] based on the third-order SDIRK formula and associated error estimate described in [33]. <p> Important implementation questions, such as how to cope with complex i , are discussed in <ref> [12, 21] </ref> and the references therein. <p> As noted in x7, DIRK and SDIRK formulas suffer the same constraint. However, it is much easier to construct high-order SIRK formulas with good stability properties than it is for SDIRK schemes. For a further discussion of SIRK formulas, see <ref> [12, 21] </ref> and the references therein. Burrage, Butcher and Chipman [10] developed the variable-stepsize variable-order code STRIDE based on s-stage SIRK formulas of order s for s = 1; 2; : : : ; 15.
Reference: [13] <author> G. D. Byrne and A. C. Hindmarsh, </author> <title> A Polyalgorithm for the Numerical Solution of Ordinary Differential Equations, </title> <journal> ACM Trans. Math. Software, </journal> <volume> 1, </volume> <year> 1975, </year> <pages> 71-96. </pages>
Reference-contexts: The VC implementation of the Adams formulas is used in several codes for nonstiff ODEs (see for example DE/STEP/INTERP 1 [36]), but EPISODE <ref> [13] </ref> is the only public-domain production-quality BDF code of which we know that uses this approach.
Reference: [14] <author> T. F. Chan and K. R. Jackson, </author> <title> The Use of Iterative Linear-Equation Solvers in Codes for Large Systems of Stiff IVPs for ODEs, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 7, </volume> <year> 1986, </year> <pages> 378-417. </pages>
Reference-contexts: Moreover, it can be argued (see x2.1 of <ref> [14] </ref>) that, if the Jacobian is symmetric, but not negative-definite, then a variable-stepsize method will naturally choose its stepsizes so that W (l) n will remain SPD. However, it is not so clear why the SPD scheme works so well for more general stiff ODE problems. <p> Recently, most attention has been focused on preconditioned Krylov subspace methods. For a discussion of this class of iterative linear equation solvers in the context of stiff ODE codes, see <ref> [6, 7, 14, 20, 31] </ref> and the references therein. In the introductory comments of VODPK [4], Brown, Byrne and Hindmarsh state: "To achieve an efficient solution, the preconditioned Krylov methods in VODPK generally require a thoughtful choice of preconditioners. <p> Other authors have made similar observations about the potential of iterative linear equation solvers in stiff ODE codes. Such schemes nearly always save space and can often save computational work as well. Chan and Jackson <ref> [14] </ref> provide a rough estimate of the amount of space and computational work required to solve the heat equation in 1, 2 and 3 spatial-dimensions by the MOL and conclude that the linear equations are best solved by * a band solver in 1-D, * either a sparse direct or a <p> However this leads to an important question: What is an appropriate stopping criterion for the iterative solution of (6)? Although this question has been addressed by several authors (see <ref> [6, 7, 14, 20, 31] </ref> and the references therein), I do not believe it has been satisfactorily resolved. 9 As noted in x4, Krylov subspace methods are particularly effective when the system of ODEs has only a few stiff components. <p> In this context, preconditioning may not be needed and a matrix-free implementation <ref> [6, 7, 14] </ref>, in which the Jacobian f y (t n ; y (l) n ) is never explicitly generated, may be highly effective.
Reference: [15] <author> J. Dongarra and E. Grosse, </author> <title> Distribution of Mathematical Software Via Electronic Mail, </title> <journal> Communications of the ACM, </journal> <volume> 30, </volume> <year> 1987, </year> <pages> 403-407. </pages>
Reference-contexts: Consequently, the simplified Newton iteration described in x2 is often not as effective with the VC implementation as it is with the other two VS schemes described below. 1 Many of the codes mentioned in this paper can be obtained from netlib <ref> [15, 16] </ref>. 3 The fixed-coefficient (FC) implementation of the BDFs is used in DIFSUB [19], GEAR [23], LSODE [24] and several variants of these codes.
Reference: [16] <author> J. Dongarra, T. Rowan and R. Wade, </author> <title> Software Distribution Using XNETLIB, </title> <journal> ACM Trans. Math. Software, </journal> <volume> 21, </volume> <year> 1995, </year> <pages> 79-88. </pages>
Reference-contexts: Consequently, the simplified Newton iteration described in x2 is often not as effective with the VC implementation as it is with the other two VS schemes described below. 1 Many of the codes mentioned in this paper can be obtained from netlib <ref> [15, 16] </ref>. 3 The fixed-coefficient (FC) implementation of the BDFs is used in DIFSUB [19], GEAR [23], LSODE [24] and several variants of these codes.
Reference: [17] <author> W. H. Enright, </author> <title> Improving the Efficiency of Matrix Computations in the Numerical Solution of Stiff Ordinary Differential Equations, </title> <journal> ACM Trans. Math. Software, </journal> <volume> 4, </volume> <year> 1978, </year> <pages> 71-96. </pages>
Reference-contexts: This, though, does not seem possible if an LU factorization of W (l) n is used. On the other hand, Enright <ref> [17] </ref> observed that a cheap update of a similarity-based factorization is possible. <p> If r is large, this inequality reduces to m &gt; 3 2 (k + 2), which is easily satisfied for many large systems. Enright's numerical results <ref> [17] </ref> support the conclusion that a similarity-based factorization can be effective in the appropriate context. Unfortunately, similarity-based factorizations appear typically to suffer more fill-in than LU factorizations for sparse matrices and consequently the direct application of similarity-based techniques appears to offer less benefit in this important case.
Reference: [18] <author> W. H. Enright and M. S. Kamel, </author> <title> Automatic Partitioning of Stiff Systems and Exploiting the Resulting Structure, </title> <journal> ACM Trans. Math. Software, </journal> <volume> 5, </volume> <year> 1979, </year> <pages> 374-385. </pages>
Reference-contexts: Unfortunately, similarity-based factorizations appear typically to suffer more fill-in than LU factorizations for sparse matrices and consequently the direct application of similarity-based techniques appears to offer less benefit in this important case. Enright and Kamel <ref> [18] </ref> extended the idea outlined above to partition automatically ODE systems into their stiff and nonstiff components. Assume we use orthogonal transformations to factor W .
Reference: [19] <author> C. W. Gear, </author> <title> Numerical Initial Value Problems in Ordinary Differential Equations, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1971. </year>
Reference-contexts: in x2 is often not as effective with the VC implementation as it is with the other two VS schemes described below. 1 Many of the codes mentioned in this paper can be obtained from netlib [15, 16]. 3 The fixed-coefficient (FC) implementation of the BDFs is used in DIFSUB <ref> [19] </ref>, GEAR [23], LSODE [24] and several variants of these codes.
Reference: [20] <author> C. W. Gear and Y. Saad, </author> <title> Iterative Solution of Linear Equations in ODE Codes, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 4, </volume> <year> 1983, </year> <pages> 583-601. </pages>
Reference-contexts: Recently, most attention has been focused on preconditioned Krylov subspace methods. For a discussion of this class of iterative linear equation solvers in the context of stiff ODE codes, see <ref> [6, 7, 14, 20, 31] </ref> and the references therein. In the introductory comments of VODPK [4], Brown, Byrne and Hindmarsh state: "To achieve an efficient solution, the preconditioned Krylov methods in VODPK generally require a thoughtful choice of preconditioners. <p> However this leads to an important question: What is an appropriate stopping criterion for the iterative solution of (6)? Although this question has been addressed by several authors (see <ref> [6, 7, 14, 20, 31] </ref> and the references therein), I do not believe it has been satisfactorily resolved. 9 As noted in x4, Krylov subspace methods are particularly effective when the system of ODEs has only a few stiff components.
Reference: [21] <author> E. Hairer and G. Wanner, </author> <title> Solving Ordinary Differential Equations II: Stiff and Differential-Algebraic Problems, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: For example, the order of an s-stage DIRK or SDIRK formula is at most s + 1 and A-stable formulas of this order exist for s = 1; 2; 3; 5 only. For a further discussion of DIRK and SDIRK schemes, see <ref> [12, 21] </ref> and the references therein. Ntrsett and Thomsen developed the code SIMPLE [32] based on the third-order SDIRK formula and associated error estimate described in [33]. <p> Numerical tests show that this code is effective for the solution of large stiff systems of IVPs at relaxed to moderate tolerances, typical of the systems that arise from the MOL. For another example of a code of this type, see SDIRK4 <ref> [21] </ref>. 8 Singly Implicit Runge-Kutta Formulas As noted in x7, several researchers in the 1970s proposed schemes to reduce the computational work and storage required to solve (23). We outlined one successful approach in x7 and consider another here. <p> Important implementation questions, such as how to cope with complex i , are discussed in <ref> [12, 21] </ref> and the references therein. <p> As noted in x7, DIRK and SDIRK formulas suffer the same constraint. However, it is much easier to construct high-order SIRK formulas with good stability properties than it is for SDIRK schemes. For a further discussion of SIRK formulas, see <ref> [12, 21] </ref> and the references therein. Burrage, Butcher and Chipman [10] developed the variable-stepsize variable-order code STRIDE based on s-stage SIRK formulas of order s for s = 1; 2; : : : ; 15.
Reference: [22] <author> D. J. Higham, </author> <title> Analysis of the Enright-Kamel Partitioning Method for Stiff Ordinary Differential Equations, </title> <journal> IMA J. Numer. Anal., </journal> <volume> 9, </volume> <year> 1989, </year> <pages> 1-14. </pages>
Reference-contexts: If the dimension of H 1 is much smaller than that of W , this approach can lead to significant savings. However, as for the full scheme, because of fill-in this method losses some of its attractiveness when applied naively to sparse systems. Higham <ref> [22] </ref> observed the close connection between the Enright-Kamel scheme and Krylov subspace methods, and he used this observation to explain why the dimension of H 1 is typically not much larger than the number of stiff components in the IVP.
Reference: [23] <author> A. C. Hindmarsh, GEAR: </author> <title> Ordinary Differential Equation System Solver, UCID-30001, </title> <type> Rev. 2, </type> <institution> Lawrence Livermore Laboratory, Livermore, </institution> <address> CA, </address> <year> 1972. </year>
Reference-contexts: is often not as effective with the VC implementation as it is with the other two VS schemes described below. 1 Many of the codes mentioned in this paper can be obtained from netlib [15, 16]. 3 The fixed-coefficient (FC) implementation of the BDFs is used in DIFSUB [19], GEAR <ref> [23] </ref>, LSODE [24] and several variants of these codes.
Reference: [24] <author> A. C. Hindmarsh, LSODE and LSODI, </author> <title> Two New Initial Value Ordinary Differential Equation Solvers, </title> <journal> ACM Signum Newsletter, </journal> <volume> 15, </volume> <year> 1980, </year> <pages> 10-11. </pages>
Reference-contexts: not as effective with the VC implementation as it is with the other two VS schemes described below. 1 Many of the codes mentioned in this paper can be obtained from netlib [15, 16]. 3 The fixed-coefficient (FC) implementation of the BDFs is used in DIFSUB [19], GEAR [23], LSODE <ref> [24] </ref> and several variants of these codes. <p> Therefore, it is natural to consider replacing the direct linear 7 equation solver in a stiff ODE code such as LSODE <ref> [24] </ref> by a sparse linear equation solver. In this section, we consider direct methods and, in the next, iterative schemes. Of course, in either case, an appropriate sparse matrix data structures must be incorporated into the ODE code, but also other important considerations arise. <p> Note that LSODPK [5] and VODPK [4], the two best-known stiff ODE solvers incorporating preconditioned Krylov subspace methods, employ many of the strategies and heuristics of LSODE <ref> [24] </ref> and VODE [3], respectively. A compelling reason for this is that it is natural to make as few changes as necessary when transforming one code in a family to another code in the same family.
Reference: [25] <author> A. C. Hindmarsh and A. H. Sherman, LSODES: </author> <title> Livermore Solver for Ordinary Differential Equations with General Sparse Jacobian Matrices, </title> <note> available from Netlib, 1987. 16 </note>
Reference-contexts: We refer to this as the SPD scheme. It is guaranteed to be stable if A is SPD, but, for general matrices, it may be unstable and produce poor results or even break down completely. Such an SPD scheme is used to great effect in LSODES <ref> [25] </ref> even though the matrices W (l) n that arise in the Newton iteration (6)-(7) may not be SPD.
Reference: [26] <author> P. J. van der Houwen, </author> <title> Construction of Integration Formulas for Initial Value Problems, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1977. </year>
Reference-contexts: The routine is recommended 14 for IVPs originating from the application of the MOL to diffusion-dominated parabolic PDEs with modest accuracy requirements. Higher-order explicit formulas with extended stability regions can be developed in a similar way. See <ref> [26] </ref> and [27] for examples of higher-order Runge-Kutta schemes and predictor-corrector multistep methods, respectively.
Reference: [27] <author> P. J. van der Houwen and B. P. Sommeijer, </author> <title> Predictor-Corrector Methods with Improved Absolute Stability Regions, </title> <journal> IMA J. Numer. Anal., </journal> <volume> 3, </volume> <year> 1983, </year> <pages> 417-437. </pages>
Reference-contexts: The routine is recommended 14 for IVPs originating from the application of the MOL to diffusion-dominated parabolic PDEs with modest accuracy requirements. Higher-order explicit formulas with extended stability regions can be developed in a similar way. See [26] and <ref> [27] </ref> for examples of higher-order Runge-Kutta schemes and predictor-corrector multistep methods, respectively.
Reference: [28] <author> K. R. Jackson, </author> <title> A Survey of Parallel Numerical Methods for Initial Value Problems for Ordinary Differential Equations, </title> <journal> IEEE Trans. on Magnetics, </journal> <volume> 27, </volume> <year> 1991, </year> <pages> 3792-3797. </pages>
Reference-contexts: However, we have omitted this material from our survey because good reviews of parallel ODE schemes are available. See, for example, Burrage's book [8], the four survey papers and twelve research articles in [1] or my older survey paper <ref> [28] </ref>. 2 Solving Implicit Equations All commonly used formulas for solving stiff IVPs are implicit in some sense. Therefore, stiff ODE codes must solve a linear or nonlinear system at each step of the integration.
Reference: [29] <author> K. R. Jackson and S. P. Ntrsett, </author> <title> The Potential for Parallelism in Runge-Kutta Methods. Part 1: RK Formulas in Standard Form, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 32, </volume> <year> 1995, </year> <pages> 49-82. </pages>
Reference-contexts: Finally, note that, if all ffi i = 0 in (32), these s equations completely decouple and consequently can be solved simultaneously. This is the basis for some parallel Runge-Kutta methods. For further details, see <ref> [29] </ref> and the references therein. 9 Explicit Methods with Extended Stability Regions As noted in x1, the IVPs that arise from the MOL are often stiff, but many are only "mildly" stiff.
Reference: [30] <author> K. R. Jackson and R. Sacks-Davis, </author> <title> An Alternative Implementation of Variable Stepsize Multistep Formulas for Stiff ODEs, </title> <journal> ACM Trans. Math. Software, </journal> <volume> 6, </volume> <year> 1980, </year> <pages> 295-318. </pages>
Reference-contexts: In this section, we consider three possible techniques of implementing variable-stepsize (VS) BDF codes and the influence that the need to solve large, stiff problems has had on the choice of VS implementation technique. The material presented here is discussed in more detail in <ref> [30] </ref>, where additional references are cited and variable-order methods are also considered. 2 To develop a VS extension of (4), recall that the name backward differentiation formula comes from an equivalent formulation of these schemes in which we let p n (t) be the unique polynomial of degree k or less <p> Note that, if h n = h n1 , then this "interpolation" requires no work. This process is a little more complicated after an order change, as described in <ref> [30] </ref>. A disadvantage of the FC implementation is that it is less stable and robust (in some sense) than the other two VS extensions of the BDFs considered here. <p> However, when the stepsizes are changed frequently the FLC implementation tends to be more stable and robust than the FC implementation. Thus the FLC implementation combines (to some degree) the advantages of the VC and FC implementations. See [3] and <ref> [30] </ref> for further discussion. 4 Similarity Factorizations As noted in x2, the cost of evaluating the Jacobian f y (t n ; y (l) n ) and refactoring the New-ton iteration matrix W (l) n (8) is often the dominant cost in solving a large stiff IVP.
Reference: [31] <author> K. R. Jackson and W. L. Seward, </author> <title> Adaptive Linear Equation Solvers in Codes for Large Stiff Systems of ODEs, </title> <journal> SIAM J. Sci. Comput., </journal> <volume> 14, </volume> <year> 1993, </year> <pages> 800-823. </pages>
Reference-contexts: Recently, most attention has been focused on preconditioned Krylov subspace methods. For a discussion of this class of iterative linear equation solvers in the context of stiff ODE codes, see <ref> [6, 7, 14, 20, 31] </ref> and the references therein. In the introductory comments of VODPK [4], Brown, Byrne and Hindmarsh state: "To achieve an efficient solution, the preconditioned Krylov methods in VODPK generally require a thoughtful choice of preconditioners. <p> However this leads to an important question: What is an appropriate stopping criterion for the iterative solution of (6)? Although this question has been addressed by several authors (see <ref> [6, 7, 14, 20, 31] </ref> and the references therein), I do not believe it has been satisfactorily resolved. 9 As noted in x4, Krylov subspace methods are particularly effective when the system of ODEs has only a few stiff components. <p> In this context, preconditioning may not be needed and a matrix-free implementation [6, 7, 14], in which the Jacobian f y (t n ; y (l) n ) is never explicitly generated, may be highly effective. Jackson and Seward <ref> [31] </ref> point out that iterative linear equation solvers can also be used to extend the idea of type insensitive codes in which the routine automatically switches between a stiff and a nonstiff scheme as the problem becomes locally stiff or nonstiff. <p> On the stiffer segments, the number of iterations required by the iterative scheme would typically increase. In addition, the results in <ref> [31] </ref> show that the iterative solver should switch from using no preconditioner, or a very cheap one, to using a more effective (and usually more expensive) preconditioned as the problem becomes more stiff.
Reference: [32] <author> S. P. Ntrsett and P. G. Thomsen, </author> <title> User's Guide for SIMPLE, a Stiff System Solver, </title> <type> private communication. </type>
Reference-contexts: For a further discussion of DIRK and SDIRK schemes, see [12, 21] and the references therein. Ntrsett and Thomsen developed the code SIMPLE <ref> [32] </ref> based on the third-order SDIRK formula and associated error estimate described in [33]. Numerical tests show that this code is effective for the solution of large stiff systems of IVPs at relaxed to moderate tolerances, typical of the systems that arise from the MOL.
Reference: [33] <author> S. P. Ntrsett and P. G. Thomsen, </author> <title> Embedded SDIRK Methods of Basic Order Three, </title> <journal> BIT, </journal> <volume> 24, </volume> <year> 1984, </year> <pages> 634-646. </pages>
Reference-contexts: For a further discussion of DIRK and SDIRK schemes, see [12, 21] and the references therein. Ntrsett and Thomsen developed the code SIMPLE [32] based on the third-order SDIRK formula and associated error estimate described in <ref> [33] </ref>. Numerical tests show that this code is effective for the solution of large stiff systems of IVPs at relaxed to moderate tolerances, typical of the systems that arise from the MOL.
Reference: [34] <author> L. R. Petzold, </author> <title> Automatic Selection of Methods for Solving Stiff and Nonstiff Systems of Ordinary Differential Equations, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 4, </volume> <year> 1983, </year> <pages> 136-148. </pages>
Reference-contexts: Instead of switching between a nonstiff scheme and a stiff one that uses a direct linear equation solver, as suggested in <ref> [34] </ref>, the code could switch between a nonstiff scheme and a stiff one that uses an iterative linear equation solver. On the mildly stiff segments of the integration, the iterative scheme in the stiff solver should require a few iterations only.
Reference: [35] <author> W. L. Seward, G. Fairweather and R. L. Johnston, </author> <title> A Survey of High-Order Methods for the Numerical Integration of Semidiscrete Parabolic Problems, </title> <journal> IMA J. Numer. Anal., </journal> <volume> 4, </volume> <year> 1984, </year> <pages> 375-425. </pages>
Reference-contexts: We review several of these developments in this article. Choosing which topics to include in a brief review of this nature is, of course, a subjective activity. By and large, I have selected topics with which I have had some research involvement. See <ref> [35] </ref> for a more comprehensive survey. The talk upon which this paper is based concluded with a discussion of parallel methods for IVPs for ODEs. However, we have omitted this material from our survey because good reviews of parallel ODE schemes are available.
Reference: [36] <author> L. F. Shampine and M. K. Gordon, </author> <title> Computer Solution of Ordinary Differential Equations: The Initial Value Problem, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1975. </year>
Reference-contexts: The VC implementation of the Adams formulas is used in several codes for nonstiff ODEs (see for example DE/STEP/INTERP 1 <ref> [36] </ref>), but EPISODE [13] is the only public-domain production-quality BDF code of which we know that uses this approach.
Reference: [37] <author> B. P. Sommeijer, RKC: </author> <title> A Runge-Kutta-Chebyshev Subroutine, </title> <note> available from Netlib, </note> <year> 1991. </year>
Reference-contexts: The strategy recommended by Verwer, Hundsdorfer and Sommeijer [38] is to choose the stepsize h n at step n based on accuracy considerations only and then choose s sufficiently large so that the formula is stable. This strategy is implemented in Sommeijer's routine RKC <ref> [37] </ref> which is based on the second-order family of RKC formulas. The routine is recommended 14 for IVPs originating from the application of the MOL to diffusion-dominated parabolic PDEs with modest accuracy requirements. Higher-order explicit formulas with extended stability regions can be developed in a similar way.
Reference: [38] <author> J. G. Verwer, W. H. Hundsdorfer and B. P. Sommeijer, </author> <title> Convergence Properties of the Runge-Kutta-Chebyshev Method, </title> <journal> Numer. Math., </journal> <volume> 57, </volume> <year> 1990, </year> <pages> 157-178. 17 </pages>
Reference-contexts: Therefore, an explicit formula with a large region of absolute stability may be more cost effective than an implicit scheme for their numerical solution. The Runge-Kutta-Chebyshev (RKC) formulas <ref> [38] </ref> constitute one class of explicit schemes with large stability regions. <p> In addition, the storage required is approximately 5 m-vectors, independent of s. Moreover, Verwer, Hundsdorfer and Sommeijer <ref> [38] </ref> show that, for any s 2, you can choose the coefficients in (33) so that the resulting formula is first order, and, for any s 3, you can choose a set of coefficients so that the resulting formula is second order. <p> Moreover, for both families of formulas, if the stepsize is inside the stability region, then the computation of the internal stage values fY n;j : j = 1; : : : ; sg is also stable. The strategy recommended by Verwer, Hundsdorfer and Sommeijer <ref> [38] </ref> is to choose the stepsize h n at step n based on accuracy considerations only and then choose s sufficiently large so that the formula is stable. This strategy is implemented in Sommeijer's routine RKC [37] which is based on the second-order family of RKC formulas.
References-found: 38

