URL: http://www.arl.wustl.edu/arl/projects/nmvc/nmvc.ps
Refering-URL: http://www.cs.wustl.edu/~schmidt/resume.html
Root-URL: 
Email: fguru,schmidt,eileen,jstg@cs.wustl.edu, anshul@arl.wustl.edu  
Phone: Ph: 314-935-7534, Fax: 314-935-7302  
Title: An Architecture for Monitoring, Visualization and Control of Gigabit Networks  
Author: Guru Parulkar, Douglas Schmidt, Eileen Kraemer, Jonathan Turner, Anshul Kantawala 
Date: August 8, 1997  
Address: St. Louis Mo. 63130, USA  
Affiliation: Department of Computer Science Washington University  
Abstract: In this paper, we outline a design of a highly scalable network monitoring, visualization and control system (NMVC) system with advanced algorithmic and human-in-the-loop capability. This capability allows network administrators to calibrate and fine-tune network and application parameters in real-time according to observed traffic patterns. The goal of the NMVC system is to ensure adequate quality of service to network users, while maintaining high network resource utilization. The main components of our system are: a network probe and an endsystem probe which can probe gigabit/s links, software network management agents that provide extensible multi-attribute event filtering for highly scalable data/event collection, efficient online event ordering algorithms that can help synthesize and display a consistent view of network health, status and performance and a View Choreographer that allows management applications and administrators to specify the mapping of network events to higher-level events and to visualization objects and updates.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Wolfson, S. Sengupta, and Y. Yemini. </author> <title> Managing Communication Networks by Monitoring Databases. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17 </volume> <pages> 944-952, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Efficient management of these networks is essential. However, existing algorithmic methods for managing networks have not matured to the point where performance bottleneck and fault detection, isolation, correlation, and correction can be automated scalably <ref> [1] </ref>. Thus, it is crucial to build efficient and user-friendly network monitoring, visualization and control (NMVC) systems. <p> Existing algorithmic methods for managing networks have not matured to the point where fault detection, isolation, correlation, and correction can be automated scalably <ref> [1] </ref>. Paragraph [27] is a portable trace analysis and visualization package for message-passing programs, producing displays of processor utilization, communication, etc.
Reference: [2] <author> Laurence Crutcher and Aurel A. Lazar. </author> <title> Management and Control for Giant Gigabit Networks are we ready for B-ISDN. </title> <type> Technical Report 341-93-21, </type> <institution> Center for Telecommunications Research, Columbia University, </institution> <year> 1993. </year>
Reference-contexts: This means that its takes longer to detect failures. Also, scalability is a major weakness of these tools. That is, they will not work or work well with large networks and with high speed networks <ref> [2, 3] </ref>. For example, most tools redundantly poll devices that are part of more than one network map. This generates excessive management traffic when administering large-scale man and wan networks. <p> The system runs on a wan emulator with a software emulation of a subset of irm on a supercomputer. Empirical results based on actual networks have not been obtained. Also, the thrust seems to be on developing a Virtual Reality gui rather than on real-time measurement, visualization, and control <ref> [2, 3] </ref>. The group at lbnl [18] recognized the problem that the applications on high speed networks typically get only a small fraction of the network bandwidth.
Reference: [3] <author> Laurence A. Crutcher, Aurel A. Lazar, Steven K. Feiner, and Michelle Zhou. </author> <title> Management of Broadband Networks Using a 3D Virtual World. </title> <booktitle> In Proceedings of the 2nd International Symposium on High-Performance Distributed Computing, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: This means that its takes longer to detect failures. Also, scalability is a major weakness of these tools. That is, they will not work or work well with large networks and with high speed networks <ref> [2, 3] </ref>. For example, most tools redundantly poll devices that are part of more than one network map. This generates excessive management traffic when administering large-scale man and wan networks. <p> The system runs on a wan emulator with a software emulation of a subset of irm on a supercomputer. Empirical results based on actual networks have not been obtained. Also, the thrust seems to be on developing a Virtual Reality gui rather than on real-time measurement, visualization, and control <ref> [2, 3] </ref>. The group at lbnl [18] recognized the problem that the applications on high speed networks typically get only a small fraction of the network bandwidth.
Reference: [4] <institution> Hewlett-Packard OpenView. </institution>
Reference-contexts: For example, most tools redundantly poll devices that are part of more than one network map. This generates excessive management traffic when administering large-scale man and wan networks. For some of the tools, notably hp OpenView <ref> [4] </ref> and ibm NetView/6000 [5], the architecture is geared towards managing discrete entities with no knowledge of the overall network environment. We propose a NMVC system that ensures adequate quality of service to network users while maintaining high network resource utilization. <p> Our work extends existing research by producing a flexible object-oriented framework for filter fusion based on a dynamic trie-based filter engine. HP OpenView provides an implementation of the iso osi event report management services <ref> [4] </ref>. HP OpenView filtering supports the registration of Event Forwarding Discriminators (efds) on remote agents in a network. However, OpenView's implementation of osi efds is inadequate for high-performance event filtering.
Reference: [5] <institution> IBM NetView/6000. </institution>
Reference-contexts: For example, most tools redundantly poll devices that are part of more than one network map. This generates excessive management traffic when administering large-scale man and wan networks. For some of the tools, notably hp OpenView [4] and ibm NetView/6000 <ref> [5] </ref>, the architecture is geared towards managing discrete entities with no knowledge of the overall network environment. We propose a NMVC system that ensures adequate quality of service to network users while maintaining high network resource utilization.
Reference: [6] <author> J. T. Stasko and E. Kraemer. </author> <title> A Methodology for Building Application-specific Visualizations of Parallel Programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18 </volume> <pages> 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The display component in our NMVC system will be prototyped using a version of polka <ref> [6] </ref>, which is an animation toolkit designed to support animations of concurrent systems. <p> Therefore, as event streams from individual nodes in the network are merged at a NOC, variation in network congestion, processing delays, and buffering of events by software agents can "misorder" events in the combined event stream. Out-of-order events can confuse viewers as well as produce misleading or incorrect displays <ref> [15, 6] </ref>. For example, Figure 6 displays an end-to-end path trace that illustrates the bandwidth, queue length, and loss rate for each link. <p> Similarly, the Pablo project [29] addresses source code instrumentation, data capture, and data analysis for massively parallel systems, but does not adequately address the needs of high-speed networks. The parade project [30] is composed of the polka animation toolkit <ref> [6] </ref>, designed to support the visualization of parallel and distributed systems, an Animation Choreographer [15], and various libraries of predefined animation views for particular architectures and programming paradigms such as PVM, Conch, parallel C threads, and High-Performance FORTRAN. <p> The visualization tool, represented by the shaded area in Figure 2, consists of a display component, and a mapping component. The display component in our proposed NMVC system will initially be prototyped using a version of polka <ref> [6] </ref>, which is an animation toolkit designed to support concurrent animations. polka supports color, real-time, 2 1 2 dimensional, smooth animations, and focuses on a balance between power and ease-of-use. polka provides its own 16 high-level abstractions to make the creation of animations easier and faster than with many other systems.
Reference: [7] <author> Zubin D. Dittia, J.R. Cox Jr., and Guru M. Parulkar. </author> <title> Design of the APIC: A High Performance ATM Host-Network Interface Chip. </title> <booktitle> In IEEE INFOCOM '95, </booktitle> <pages> pages 179-187, </pages> <address> Boston, USA, April 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The apic-based probe meets all the requirements mentioned above. In our prototype implementation (Figure 3), each apic supports two full duplex 1.2 Gb/s links. Thus, the apic can be easily inserted in a link as a probe for packet/cell snooping to log traffic measurements <ref> [7, 8, 9] </ref>. Moreover, the apic's external memory/bus interface has been designed to deliver very high throughput and very low latency to applications [7]. We have performed extensive VHDL simulations of our design and the results verify that apic can deliver the expected performance. <p> Thus, the apic can be easily inserted in a link as a probe for packet/cell snooping to log traffic measurements [7, 8, 9]. Moreover, the apic's external memory/bus interface has been designed to deliver very high throughput and very low latency to applications <ref> [7] </ref>. We have performed extensive VHDL simulations of our design and the results verify that apic can deliver the expected performance. The simulation tests show that apic has a full-duplex throughput of 816Mb/s (1.18 Gb/s half-duplex) on PCI-64 and 456Mb/s (900 Mb/s half-duplex) on PCI-32 machines.
Reference: [8] <author> Zubin Dittia, J.R. Cox Jr., and Guru Parulkar. </author> <title> Catching Up With the Networks: Host I/O at Gigabit Rates. </title> <type> Technical Report 94-11, </type> <institution> Dept. of Computer Science, Washington University in St. Louis, </institution> <year> 1994. </year> <month> 19 </month>
Reference-contexts: The apic-based probe meets all the requirements mentioned above. In our prototype implementation (Figure 3), each apic supports two full duplex 1.2 Gb/s links. Thus, the apic can be easily inserted in a link as a probe for packet/cell snooping to log traffic measurements <ref> [7, 8, 9] </ref>. Moreover, the apic's external memory/bus interface has been designed to deliver very high throughput and very low latency to applications [7]. We have performed extensive VHDL simulations of our design and the results verify that apic can deliver the expected performance.
Reference: [9] <author> Zubin Dittia, J.R. Cox Jr., and Guru Parulkar. </author> <title> Using an ATM Interconnect as a High Performance I/O Backplane. </title> <booktitle> In Proceedings of the Hot Interconnects Symposium, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: The apic-based probe meets all the requirements mentioned above. In our prototype implementation (Figure 3), each apic supports two full duplex 1.2 Gb/s links. Thus, the apic can be easily inserted in a link as a probe for packet/cell snooping to log traffic measurements <ref> [7, 8, 9] </ref>. Moreover, the apic's external memory/bus interface has been designed to deliver very high throughput and very low latency to applications [7]. We have performed extensive VHDL simulations of our design and the results verify that apic can deliver the expected performance.
Reference: [10] <author> Robert J. Walsh. </author> <title> DART: Fast Application-Level Networking via Data-Copy Avoidance. </title> <journal> IEEE Network, </journal> <volume> (4), </volume> <month> July </month> <year> 1997. </year>
Reference-contexts: This translates to greatly improved throughput and latency characteristics for end applications <ref> [10] </ref>. * The Pool dma with Packet Splitting mechanism enables construction of zero-copy protocol stacks, using page remapping to avoid data copying. * Interrupt Demultiplexing is a technique used by the apic to significantly reduce the frequency of interrupts to the host processor.
Reference: [11] <author> Dan Wilkelstein. ATTILA: </author> <title> Performance Analysis System for ATM Networks. </title> <type> Technical report, </type> <institution> MCNC, NC, </institution> <year> 1994. </year>
Reference-contexts: This technique exploits the connection-oriented nature of atm to differentiate interrupts associated with distinct flows, and to mask out interrupts corresponding to flows that have already been queued for service. Related Work The attila <ref> [11] </ref> project tries to measure and monitor traffic on an atm/sonet link using a network probe. However, a sun SparcStation10 is required for each network probe, and the data collected is at the cell/link level only.
Reference: [12] <author> Joel Apisdorf, K. Claffy, Kevin Thompson, and Rick Wilder. OC3MON: </author> <title> flexible, affordable, high performance statistics collection. </title> <booktitle> In Proceedings of USENIX, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: However, a sun SparcStation10 is required for each network probe, and the data collected is at the cell/link level only. Further, no attempt is made to get higher level statistics such as end-to-end throughput or Quality of Service for different tcp connections. OC3MON <ref> [12] </ref> can be inserted into a OC-3 network as a probe without any disruption to network traffic through the use of a splitter. It also has the added benefit of logging only header 9 cells thus leading to significant memory bandwidth savings. <p> The design is tightly coupled to and oriented towards their chief application the Distributed Parallel Storage Server [18]. Also, there is no support for online event-ordering and, except for the logging of events, only commercially available monitoring systems are used which can be inadequate. OC3MON <ref> [12] </ref> does provide a wide variety of filters for collecting network traffic statistics such as number of active flows, traffic in bytes, packets and so on but the set of filters is fixed 14 and new filters cannot be added at runtime.
Reference: [13] <author> M.L. Bailey, B. Gopal, P. Sarkar, M.A. Pagels, and L.L. Peterson. Pathfinder: </author> <title> A pattern-based packet classifier. </title> <booktitle> In Proceedings of the 1 st Symposium on Operating System Design and Implementation, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: Multiple filter expressions can be composed using dynamic trie-based data structures. To reduce search overhead, the trie coalesces common predicates according to criteria such as frequency of duplication or predicate priority. This trie-based approach is a generalization of the DAG-based techniques presented in <ref> [13] </ref>. Every node in the trie implements a particular type of branching mechanism. The branching mechanism selected at a node employs a lookup function (such as a hashing function, a binary search, or a series of inlined relational expression comparisons). <p> From this survey, we see that in general, conventional mechanisms provide limited support for filter fusion, focusing primarily on packet filters for the tcp/ip communication protocol suite <ref> [20, 21, 22, 13] </ref>. Our work extends existing research by producing a flexible object-oriented framework for filter fusion based on a dynamic trie-based filter engine. HP OpenView provides an implementation of the iso osi event report management services [4]. <p> The mpf composition technique assumes the existence of a common prefix across protocol headers. This assumption enables low latency setup and removal of composite packet filters. However, this particular optimization strategy does not generalize to compose more complex filters. The PathFinder tool described in <ref> [13] </ref> presents a more general technique for coalescing filters with common prefixes. PathFinder is a packet classifier that combines software and hardware 15 techniques to optimize the composition of complex filtering patterns.
Reference: [14] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21 </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: able to execute directly on the native agent hardware, which is an order of magnitude faster than interpreted code. 5.2 Online Event Ordering Many of the displays and analysis tools in our NMVC system require the event stream to maintain causal ordering (i.e., events must obey the Lamport "happened-before" relationship <ref> [14] </ref>). A common way to maintain event ordering in centralized systems is to timestamp the events and sort them before analysis. However, the distributed, real-time nature of large-scale high-speed networks prevents the use of globally consistent event timestamps.
Reference: [15] <author> Eileen Kraemer and John T. Stasko. </author> <title> Toward flexible control of the temporal mapping from concurrent program events to animations. </title> <booktitle> Proceedings Eighth International Parallel Processing Symposium, </booktitle> <pages> pages 902-908, </pages> <year> 1994. </year>
Reference-contexts: Therefore, as event streams from individual nodes in the network are merged at a NOC, variation in network congestion, processing delays, and buffering of events by software agents can "misorder" events in the combined event stream. Out-of-order events can confuse viewers as well as produce misleading or incorrect displays <ref> [15, 6] </ref>. For example, Figure 6 displays an end-to-end path trace that illustrates the bandwidth, queue length, and loss rate for each link. <p> The parade project [30] is composed of the polka animation toolkit [6], designed to support the visualization of parallel and distributed systems, an Animation Choreographer <ref> [15] </ref>, and various libraries of predefined animation views for particular architectures and programming paradigms such as PVM, Conch, parallel C threads, and High-Performance FORTRAN. We will extend this approach to the online visualizations of network status and behavior.
Reference: [16] <author> W. Gu, G. Eisenhauer, K. Schwan E. Kraemer, J. Stasko, J. Vetter, and N. Mallavarupu. </author> <title> Falcon: on-line monitoring and steering of large-scale parallel programs. </title> <booktitle> In Proceedings of the Fifth Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 422-429, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: To alleviate this problem of misleading displays, we are developing advanced ordering filters that ensure that the event stream reaching noc display and analysis tools adheres to causal ordering. We have developed a similar filter for use in the Falcon <ref> [16] </ref> project. However, the filtering code used in Falcon is specific to the particular instrumented threads library in use in that project. We are proposing a more general technique for the generation of ordering filters, based on a specification of ordering relationships and events. <p> Thus, the ordering components that we develop will be easily transferable to other projects and uses. These event ordering or causality filters enforce a set of ordering rules <ref> [16] </ref>. They examine 13 each incoming event record and check the applicable rules (i.e., specified causal relations). If no rules are violated, internal data structures are updated to reflect the occurrence of this event, and the event is passed on. <p> The Falcon system is composed of an application-specific on-line monitoring system, an interactive steering mechanism, and a graphical display system. However, Falcon is designed for the monitoring and steering of threads-based application programs <ref> [16] </ref>. Our proposal is based on an alternative approach: distributed visualization using graphical animation. Graphical animation taps into well-developed human abilities to detect patterns and recognize anomalies in those patterns. Thus, visualization can help administrators detect recurring traffic patterns, determine appropriate quality of service parameters, and fine tune network performance. <p> Thus, the user can easily modify the existing display, or specify new ones. polka has been successfully used in the visualization of the execution of pvm, hpf, and parallel C threads programs, and as the basis for program steering decisions in the Falcon system <ref> [16] </ref>. However, polka will not scale up to be able to handle the frequency and volume of events generated by a gigabit network. Hence, we are creating a more highly optimized display package for the NMVC system that retains polka's capability of animation of concurrent systems.
Reference: [17] <author> Aurel A. Lazar. </author> <title> A Real Time Control, Management and Information Transport Architecture for Broadband Networks. </title> <booktitle> In Proceedings of the International Zurich Seminar on Digital Communications, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: However, the package has quite a few reported performance inefficiencies and thus, it is slower than other commercially available tools and cannot scale to networks operating at Gb/s. The Center for Telecommunication Research at Columbia University has proposed an Integrated Reference Model (irm) <ref> [17] </ref> for the management and control architecture of gigabit networks based on the osi cmise. The core of ctr irm is a centralized network telebase that contains extensive information about network operations.
Reference: [18] <author> Brian Tierney, William Johnston, Jason Lee, and Gary Hoo. </author> <title> Performance Analysis in High-Speed Wide Area IP over ATM Networks: Top-to-Bottom End-to-End Monitoring. </title> <note> Submitted to IEEE Networking, </note> <year> 1996. </year>
Reference-contexts: Empirical results based on actual networks have not been obtained. Also, the thrust seems to be on developing a Virtual Reality gui rather than on real-time measurement, visualization, and control [2, 3]. The group at lbnl <ref> [18] </ref> recognized the problem that the applications on high speed networks typically get only a small fraction of the network bandwidth. To analyze the problem and pinpoint the bottle-necks, they have developed a logging facility and have used it for a distributed application running on their testbed atm network. <p> This does not give much scope for online feedback control. There is no auto-detection of faults or human-in-the-loop, issues which our proposed scheme addresses fully. The design is tightly coupled to and oriented towards their chief application the Distributed Parallel Storage Server <ref> [18] </ref>. Also, there is no support for online event-ordering and, except for the logging of events, only commercially available monitoring systems are used which can be inadequate.
Reference: [19] <author> D. C. Schmidt. </author> <title> High-Performance Event Filtering for Dynamic Multi-point Applications. </title> <booktitle> In 1 st Workshop on High Performance Protocol Architectures (HIPPARCH), </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: Also, OC3MON does not address the issue of event ordering. 5.3.2 Event Filtering An extensive survey of existing event filtering mechanisms spanning domains such as active databases, distributed systems, network monitoring and management, on-line network services, and user-level communication protocols can be found in <ref> [19] </ref>. From this survey, we see that in general, conventional mechanisms provide limited support for filter fusion, focusing primarily on packet filters for the tcp/ip communication protocol suite [20, 21, 22, 13]. <p> However, OpenView's implementation of osi efds is inadequate for high-performance event filtering. It suffers from a highly inefficient process architecture that requires 4 context switches and 3 interprocess communication (ipc) exchanges to receive, filter, and deliver each event end-to-end <ref> [19] </ref>. Bates has implemented dynamic analysis using primitive and high-level events, where some filtering is performed for high-level events in order to reduce the amounts of information presented to users. However, in contrast to our approach, Bates performs filtering after data collection has been completed [23].
Reference: [20] <author> J. C. Mogul, R. F. Rashid, and M. J. Accetta. </author> <title> The Packet Filter: an Efficient Mechanism for User-level Network Code. </title> <booktitle> In Proceedings of the 11 th Symposium on Operating System Principles (SOSP), </booktitle> <month> November </month> <year> 1987. </year>
Reference-contexts: From this survey, we see that in general, conventional mechanisms provide limited support for filter fusion, focusing primarily on packet filters for the tcp/ip communication protocol suite <ref> [20, 21, 22, 13] </ref>. Our work extends existing research by producing a flexible object-oriented framework for filter fusion based on a dynamic trie-based filter engine. HP OpenView provides an implementation of the iso osi event report management services [4].
Reference: [21] <author> V. Jacobson and S. McCanne. </author> <title> The BSD Packet Filter: A New Architecture for User-level Packet Capture. </title> <booktitle> In Proceedings of the Winter USENIX Conference, </booktitle> <pages> pages 259-270, </pages> <month> January </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: From this survey, we see that in general, conventional mechanisms provide limited support for filter fusion, focusing primarily on packet filters for the tcp/ip communication protocol suite <ref> [20, 21, 22, 13] </ref>. Our work extends existing research by producing a flexible object-oriented framework for filter fusion based on a dynamic trie-based filter engine. HP OpenView provides an implementation of the iso osi event report management services [4].
Reference: [22] <author> M. Yuhara, B. Bershad, C. Maeda, and E. Moss. </author> <title> Efficient Packet Demultiplexing for Multiple Endpoints and Large Messages. </title> <booktitle> In Proceedings of the Winter Usenix Conference, </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: From this survey, we see that in general, conventional mechanisms provide limited support for filter fusion, focusing primarily on packet filters for the tcp/ip communication protocol suite <ref> [20, 21, 22, 13] </ref>. Our work extends existing research by producing a flexible object-oriented framework for filter fusion based on a dynamic trie-based filter engine. HP OpenView provides an implementation of the iso osi event report management services [4].
Reference: [23] <author> P.Bates. </author> <title> Debugging Heterogeneous Distributed Systems Using Event-based Models of Behavior. </title> <journal> In SIGPLAN Notices, </journal> <volume> volume 24, </volume> <pages> pages 11-22, </pages> <month> January </month> <year> 1989. </year> <booktitle> In Proceedings of the Workshop on Parallel and Distributed Debugging, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: Bates has implemented dynamic analysis using primitive and high-level events, where some filtering is performed for high-level events in order to reduce the amounts of information presented to users. However, in contrast to our approach, Bates performs filtering after data collection has been completed <ref> [23] </ref>. Isis [24] supports event filtering in its Reliable Distributed Objects (rdo) News service [25]. In Isis rdo News, filtering is performed at the destinations since all consumers in a process group receive all events sent by suppliers.
Reference: [24] <author> Kenneth Birman and Robbert van Renesse. </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <year> 1994. </year>
Reference-contexts: Bates has implemented dynamic analysis using primitive and high-level events, where some filtering is performed for high-level events in order to reduce the amounts of information presented to users. However, in contrast to our approach, Bates performs filtering after data collection has been completed [23]. Isis <ref> [24] </ref> supports event filtering in its Reliable Distributed Objects (rdo) News service [25]. In Isis rdo News, filtering is performed at the destinations since all consumers in a process group receive all events sent by suppliers.
Reference: [25] <institution> Isis Distributed Systems, Inc., </institution> <month> Marlboro, </month> <title> MA. Isis Users's Guide: Reliable Distributed Objects for C++, </title> <month> April </month> <year> 1994. </year>
Reference-contexts: However, in contrast to our approach, Bates performs filtering after data collection has been completed [23]. Isis [24] supports event filtering in its Reliable Distributed Objects (rdo) News service <ref> [25] </ref>. In Isis rdo News, filtering is performed at the destinations since all consumers in a process group receive all events sent by suppliers. Therefore, the rdo News filtering architecture will not scale to accommodate a large numbers of consumers that possess complex filtering requirements.
Reference: [26] <author> C. Maeda and B. Bershad. </author> <title> Protocol Service Decomposition for High-Performance Networking. </title> <booktitle> In Proceedings of the 14 th Symposium on Operating System Principles, </booktitle> <address> Asheville, North Carolina, </address> <month> December </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: When there are hundreds of filters and/or hundreds of consumers, however, this approach does not scale up since the time required to filter packets grows linearly with the number of filters. The Mach Packet Filter (mpf) is designed to support user-level implementations <ref> [26] </ref> of layered protocol stacks (such as tcp/ip). The mpf composition technique assumes the existence of a common prefix across protocol headers. This assumption enables low latency setup and removal of composite packet filters. However, this particular optimization strategy does not generalize to compose more complex filters.
Reference: [27] <author> Michael T. Heath and Jennifer A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, 8(5):29 -39, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: Existing algorithmic methods for managing networks have not matured to the point where fault detection, isolation, correlation, and correction can be automated scalably [1]. Paragraph <ref> [27] </ref> is a portable trace analysis and visualization package for message-passing programs, producing displays of processor utilization, communication, etc. However, it relies on the production of PICL [28] traces, does not support the creation of new views, and is designed for the visualization of application programs rather than networks.
Reference: [28] <author> G.A. Geist, M.T. Heath, B.W. Peyton, and P.H. Worley. </author> <title> A user's guide to PICL: A portable instrumented communication library. </title> <type> Technical Report TM-11616, </type> <institution> Oak Ridge National Laboratory, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: Paragraph [27] is a portable trace analysis and visualization package for message-passing programs, producing displays of processor utilization, communication, etc. However, it relies on the production of PICL <ref> [28] </ref> traces, does not support the creation of new views, and is designed for the visualization of application programs rather than networks. Similarly, the Pablo project [29] addresses source code instrumentation, data capture, and data analysis for massively parallel systems, but does not adequately address the needs of high-speed networks.
Reference: [29] <author> Daniel A. Reed, Ruth A. Aydt, Roger J. Noe, Phillip C. Roth, Keith A. Shields, Bradley Schwarta, and Luis F. Tavera. </author> <title> An overview of the pablo performance analysis environment. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <pages> pages 104-113, </pages> <institution> Mississippi State, MS, USA, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: However, it relies on the production of PICL [28] traces, does not support the creation of new views, and is designed for the visualization of application programs rather than networks. Similarly, the Pablo project <ref> [29] </ref> addresses source code instrumentation, data capture, and data analysis for massively parallel systems, but does not adequately address the needs of high-speed networks.
Reference: [30] <author> John T. Stasko. </author> <title> The parade environment for visualizing parallel program executions: A progress report. </title> <type> Technical Report GIT-GVU-95-03, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> January </month> <year> 1995. </year> <month> 21 </month>
Reference-contexts: Similarly, the Pablo project [29] addresses source code instrumentation, data capture, and data analysis for massively parallel systems, but does not adequately address the needs of high-speed networks. The parade project <ref> [30] </ref> is composed of the polka animation toolkit [6], designed to support the visualization of parallel and distributed systems, an Animation Choreographer [15], and various libraries of predefined animation views for particular architectures and programming paradigms such as PVM, Conch, parallel C threads, and High-Performance FORTRAN.
References-found: 30

