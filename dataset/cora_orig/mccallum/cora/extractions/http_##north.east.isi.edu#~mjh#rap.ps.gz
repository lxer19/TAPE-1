URL: http://north.east.isi.edu/~mjh/rap.ps.gz
Refering-URL: http://north.east.isi.edu/~mjh/papers.html
Root-URL: http://www.isi.edu
Email: freza, mjh, estring@isi.edu  
Title: RAP: An End-to-end Rate-based Congestion Control Mechanism for Realtime Streams in the Internet  
Author: Reza Rejaie Mark Handley, Deborah Estrin 
Date: July 15, 1998  
Address: Marina Del Rey, CA 90292  
Affiliation: University of Southern California Information Sciences Institute  
Abstract: End-to-end congestion control mechanisms have been critical to the robustness and stability of the Internet. The majority of today's Internet traffic is TCP, and we expect this to remain a large proportion of traffic in the future. Thus, having TCP-friendly behavior is crucial for new applications. However, the emergence of non-congestion-controlled realtime applications threatens unfairness to competing TCP traffic and possible congestion collapse. We present an end-to-end TCP-friendly Rate Adaptation Protocol (RAP), which employs an additive-increase, multiplicative-decrease (AIMD) algorithm. It is well suited for unicast playback of realtime streams and other semi-reliable rate-based applications. Its primary goal is to be fair and in particular TCP-friendly while separating network congestion control from application-level reliability. We evaluate RAP through extensive simulation, and conclude that bandwidth is usually evenly shared between TCP and RAP traffic. Unfairness to TCP traffic is directly determined by how TCP diverges from the AIMD algorithm. Basic RAP behaves in a TCP-friendly fashion in a wide range of likely conditions, but we also devised a fine-grain rate-adaptation mechanism to extend this range further. Finally, we show that deploying RED queue management can result in more ideal fairness between TCP and RAP traffic. 
Abstract-found: 1
Intro-found: 1
Reference: [Bol93] <author> J. C. Bolot. </author> <title> Characterizing end-to-end packet delay and loss in the internet. Journal of High Speed Networks, </title> <address> 2(3):289298, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Feedback delay in ack-based schemes (e.g. RAP) is equal to one RTT. RAP adjusts the IP G once every round-trip time. The time between two subsequent adjusting points is called a step. Because of the random nature of the RTT signal <ref> [Bol93] </ref>, using the recent sample RTT as the step length is likely to result in a poor behavior. We need a smoothed version of RTT that represents low frequency variation of RTT and filters out the transient (i.e. high frequency) changes. <p> Note that since RAP is designed for relatively long-lived sessions, its behavior during the startup phase is not crucial. 3.1 Clustered Losses In a shared best-effort networks with a high level of statistical multiplexing, the observed loss pattern has a near random behavior <ref> [Bol93] </ref> that is determined by the aggregate traffic pattern. Thus it is generally hard for an end system to predict or control the loss rate by adjusting the transmission rate. End systems are expected to react to congestion on suitable time scales by dropping their rate exponentially.
Reference: [CJ89] <author> D. Chiu and R. Jain. </author> <title> Analysis of the increase and decrease algorithm for congestion avoidance in computer networks. </title> <journal> Journal of Computer Networks and ISDN, </journal> <volume> 17(1):114, </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: We are also investigating the use of RAP as part of a reliable multicast congestion control scheme. The goals of RAP are to be well-behaved and TCP-friendly. It has been shown that the Additive Increase and Multiplicative Decrease (AIMD) algorithm efficiently converges to a fair state <ref> [CJ89] </ref>. RAP adopts an AIMD algorithm for rate adaptation to achieve inter-protocol fairness and in particular TCP-friendliness. A rate-based congestion control mechanism is considered TCP-friendly if its average transmission rate is not higher (and hopefully not much lower) than that achieved by a TCP connection along the same path [MF97].
Reference: [CPW98] <author> S. Cen, C. Pu, and J. Walpole. </author> <title> Flow and congestion control for internet streaming applications. </title> <booktitle> Proceedings Multimedia Computing and Networking, </booktitle> <month> January </month> <year> 1998. </year>
Reference-contexts: Moreover, it is CPU-extensive for a server to adaptively encode a potentially large number of streams simultaneously for all active clients. Cen et. al <ref> [CPW98] </ref> present the SCP protocol for media streaming in the Internet. The SCP protocol is modified version of TCP that performs TCP Vegas-like rate adjustment in steady state. Their results show that SCP is not TCP-friendly.
Reference: [CTCL95] <author> Z. Chen, S-M Tan, R. H. Campbell, and Y. Li. </author> <title> Real time video and audio in the world wide web. </title> <booktitle> Fourth International World Wide Web Conference, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: There are many commercial media streaming players that are currently deployed over the Internet such as Realplayer [Net], Vxtreme [Incb] and Microsoft Netshow [Inca]. Although they claim to be adaptive, no analysis is available to verify any claims. Work in <ref> [CTCL95] </ref> describes VDP protocol that is deployed in Vosaic. Their proposed adaptation algorithm is clearly not TCP-friendly. Our study differs previous studies of realtime streaming over best-effort networks. We develop a rate adaptation mechanism that will result in inter-protocol fairness and in particular TCP-friendly behavior.
Reference: [FF96] <author> K. Fall and S. Floyd. </author> <title> Simulation-based comparison of tahoe, reno and sack tcp. </title> <journal> Computer Communication Review, </journal> <volume> 26(3):521, </volume> <month> July </month> <year> 1996. </year>
Reference-contexts: One of the main problems for TCP's congestion control is to recover from multiple losses within a window <ref> [FF96] </ref>. Multiple losses occurs mainly due to buffer overflow in drop-tail queues. Ideally, RED should be configured such that each flow experiences at most one single loss per RTT. Under these circumstances, TCP flows can efficiently recover from a single loss without experiencing a transmission timeout or going through slow-start. <p> Currently, we are in the process of implementing a RAP prototype for actual experiments over the Internet. We have simulated RAP using the ns2 simulator [MF95], and compared it to TCP Tahoe, Reno, NewReno <ref> [FF96] </ref> and Sack [MMFR96]. and SW 1 is the bottleneck point. All the other links have higher bandwidth and shorter delay than the bottleneck. <p> The observed unfairness against TCP traffic can be due to one of the following reasons: 1. TCP's inherent performance limitations, 2. An artifact of configuration parameters and 3. Unfairness imposed by coexisting RAP flows. TCP suffers from some performance limitations <ref> [FF96, Mor97] </ref>. In particular, when TCP experiences multiple losses within a window or the window is smaller than 4, it is constrained to either wait for retransmission timeout or go through slow-start. <p> The severity of the problem varies among different flavors of TCP and mainly depends on window size and loss pattern. TCP Sack is able to recover from the multiple loss scenarios easier than other flavors of TCP whereas Reno's performance is substantially degraded <ref> [FF96] </ref>. Generally, TCP's ability to efficiently recover from multiple loss increases with its window size. The more TCP diverges from the AIMD algorithm, the less bandwidth it obtains and the lower performance it exhibits in large scale. <p> We have repeated the same experiment with RAP against Reno, NewReno 11 and Sack TCP. Results are shown in Figure 5 (b), 6 (a), 6 (b) respectively. These results confirm that the large-scale behavior of TCP traffic is in agreement with the behavior reported in <ref> [FF96] </ref> . These experiments also reveal that TCP's inherent performance problems partially contribute to unfairness to the TCP traffic. <p> We changed the delay of the bottleneck link to control the value of RTT, and the buffering was adjusted accordingly. 11 NewReno is a modified version of Reno TCP that avoids some of the Reno's performance problems. For more details, refer to <ref> [FF96] </ref> 12 Notice that some of our results seem to have minor phase effect, e.g. for 100 flows in figure 5 (b). 16 Figures 7 (a) and 7 (b) depict the fairness ratio as a function of the bottleneck link delay and the total number of flows.
Reference: [FJ92] <author> S. Floyd and V. Jacobson. </author> <title> On traffic phase effect in packet-switched gateways. Internetworking: Research and Experiences, </title> <address> 3(3):115156, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: This 8 Here we implicitly assumed that number of duplicate packets a TCP flow receives is negligible and our experiments confirm this assumption. 13 occurs mainly because of Drop Tail gateways in our small deterministic network as was reported in <ref> [FJ92] </ref>. Moreover, in our simulations all flows have the same packet size and observe similar RTT, which increases the probability of phase effects. To eliminate this problem without changing our parameters, we have added a small uniform random delay before transmission of each TCP packet 9 . <p> To eliminate this problem without changing our parameters, we have added a small uniform random delay before transmission of each TCP packet 9 . This delay ranges from zero to the bottleneck service time and emulates the random packet-processing time of intermediate gateways <ref> [FJ92] </ref>. Obviously, adding this random delay slightly decreases the transmission rate of TCP because it always delayed the transmission. We have added similar randomness to RAP, not only to resolve the phase effect problem between RAP flows, but also compensate for the added delay to TCP flows.
Reference: [FJ93] <author> S. Floyd and V. Jacobson. </author> <title> Random early detection gateways for congestion avoidance. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4):397413, </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: To further improve RAP, we have also devised a fine grain rate adaptation mechanism that enables it to exhibit TCP-friendly behavior over an even wider range. We assess the impact of TCP's burstiness on inter-protocol fairness in the context of small simulations. Our results show that deploying RED <ref> [FJ93] </ref> queue management results in an ideal fairness between TCP and RAP traffic. Finally, we investigated self-limiting issues in RAP and did not observe any evidence that implies inherent instability in RAP. The rest of this paper is organized as follows.
Reference: [Flo91] <author> S. Floyd. </author> <title> Connections with multiple congested gateways in packet-switched networks. </title> <journal> Computer Communication Review, </journal> <volume> 21(5):3047, </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: The step length in RAP is analogous to the time it takes for TCP to send a full window worth of packets (i.e. one RTT). RAP suffers from unfairness against TCP flows with longer RTT in the same way that inter-TCP unfairness 8 has frequently been reported <ref> [Flo91] </ref>. RAP connections with shorter RTT are more aggressive and achieve a larger share of the bottleneck bandwidth. However, there are two issues to notice: 1. in general, other measures of fairness can only be achieved by implementing the required machinery in the network [She90]; 2.
Reference: [Inca] <institution> Microsoft Inc. Netshow service, streaming media for business. </institution> <note> http://www.microsoft.com/NTServer/Basics/NetShowServices. </note>
Reference-contexts: This may be due to using the shortest RTT that has been measured for rate adjustment since it may widely vary for different flows. There are many commercial media streaming players that are currently deployed over the Internet such as Realplayer [Net], Vxtreme [Incb] and Microsoft Netshow <ref> [Inca] </ref>. Although they claim to be adaptive, no analysis is available to verify any claims. Work in [CTCL95] describes VDP protocol that is deployed in Vosaic. Their proposed adaptation algorithm is clearly not TCP-friendly. Our study differs previous studies of realtime streaming over best-effort networks.
Reference: [Incb] <author> Vxtreme Inc. </author> <note> Vxtreme streaming video player. http://www.vxtreme.com. </note>
Reference-contexts: This may be due to using the shortest RTT that has been measured for rate adjustment since it may widely vary for different flows. There are many commercial media streaming players that are currently deployed over the Internet such as Realplayer [Net], Vxtreme <ref> [Incb] </ref> and Microsoft Netshow [Inca]. Although they claim to be adaptive, no analysis is available to verify any claims. Work in [CTCL95] describes VDP protocol that is deployed in Vosaic. Their proposed adaptation algorithm is clearly not TCP-friendly. Our study differs previous studies of realtime streaming over best-effort networks.
Reference: [Jac88] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 314329. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: Detailed description of our simulation results are presented in 1 Using the ns-2 simulator developed by the VINT project 3 section 5. Finally, section 6 concludes the paper and addresses some of our future work. 1.1 Rate-based vs Window-based Congestion Control In Van Jacobson's seminal TCP congestion control paper <ref> [Jac88] </ref>, the idea of using a rate-based approach based on the same mechanisms is mooted. <p> Decision Function A high level description of the rate-adaptation scheme could be summarized by its decision function as follow: 5 * If no congestion is detected, periodically increase the transmission rate; * If congestion is detected, immediately decrease the transmission rate. Similar to the congestion avoidance algorithm in TCP <ref> [Jac88] </ref>, the RAP source searches for available bandwidth on the bottleneck link by periodically increasing its transmission rate. RAP considers losses to be congestion signals, and uses two mechanisms to detect loss: timeouts, and gaps in the sequence space (i.e. ACK-based). These two mechanisms work in parallel. <p> We refer to the value of ff as step height. The transmission rate is controlled by adjusting the inter-packet-gap (IP G). To increase the rate additively, IPG must be iteratively updated based on equation (1) <ref> [Jac88] </ref>: S i = P acketSize IP G i IP G i +C ( 1), ff = S i+1 S i = P acketSize C (2) Note that in the equation (1), C has the dimension of time and it determines the value of ff. <p> multiplicatively, by increasing the value of IPG 4 : S i+1 = fiS i , IP G i+1 = IP G i =fi fi = 0:5 4 We use a value of fi = 0:5 which is a conservative choice as it is chosen by TCP (see appendix C in <ref> [Jac88] </ref>). 7 Decision Frequency Decision frequency specifies how often to change the rate. Based on system control theory, optimal adjustment frequency depends on the feedback delay. The feedback delay is the time between changing the rate and detecting the network's reaction to that change.
Reference: [Jac97] <author> V. Jacobson. </author> <title> Email on the end-to-end email list. </title> <month> February </month> <year> 1997. </year>
Reference-contexts: However, if the source allows retransmission beyond the current window, the stability is lost, and so the number of retransmitted packets must also be limited. Rate-based schemes need to find some variant analogous to the window to bound the volume of outstanding data in the network <ref> [Jac97] </ref>. One way to achieve this goal is use of correctly implemented timers. In the absence of any feedback, the expired timer forces a source to drop its rate. RAP achieves self-limiting by using the timeout mechanism for loss detection as a variant of window.
Reference: [Jai89] <author> R. Jain. </author> <title> A delay-based approach for congestion avoidance in interconnected heterogeneous computer networks. </title> <journal> ACM Computer Communication Review, </journal> <volume> 19(5):5671, </volume> <month> October </month> <year> 1989. </year>
Reference-contexts: Each acknowledgment (ACK) packet contains the sequence number of the corresponding delivered data packet. Using the feedback, the RAP source can detect losses and sample the round-trip-time (RTT). To design a rate-adaptation mechanism, three issues must be addressed <ref> [Jai89] </ref>. These are the decision function , the increase/decrease algorithm, and the decision frequency.
Reference: [JE97] <author> S. Jacobs and A. Eleftheriadis. </author> <title> Real-time dynamic rate shaping and control for internet video applications. </title> <booktitle> Workshop on Multimedia Signal Processing, </booktitle> <pages> pages 2325, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: However, the critical work for protocols that wish to co-exist with TCP in the best-effort Internet is somewhat more limited. Jacob et. al <ref> [JE97] </ref> propose an architecture for Internet video applications that uses a TCP variant modified so 4 as not to perform retransmission. However, no details of these modifications are given, so it is difficult to tell how these changes affect performance.
Reference: [MF95] <author> S. McCanne and S. Floyd. </author> <title> Ns (network simulator). </title> <note> 1995. http://www-mash.cs.berkeley.edu/ns. </note>
Reference-contexts: However in a real network, we would have a larger number of short and long-lived TCP flows with some bursty traffic. Currently, we are in the process of implementing a RAP prototype for actual experiments over the Internet. We have simulated RAP using the ns2 simulator <ref> [MF95] </ref>, and compared it to TCP Tahoe, Reno, NewReno [FF96] and Sack [MMFR96]. and SW 1 is the bottleneck point. All the other links have higher bandwidth and shorter delay than the bottleneck.
Reference: [MF97] <author> J. Mahdavi and S. Floyd. </author> <note> TCP-friendly unicast rate-based flow control. Technical note sent to the end2end-interest mailing list, January 1997. http://www.psc.edu/networking/papers/tcp-friendly.html. </note>
Reference-contexts: RAP adopts an AIMD algorithm for rate adaptation to achieve inter-protocol fairness and in particular TCP-friendliness. A rate-based congestion control mechanism is considered TCP-friendly if its average transmission rate is not higher (and hopefully not much lower) than that achieved by a TCP connection along the same path <ref> [MF97] </ref>. RAP performs loss-based rate control and does not rely on any explicit congestion signal from the network. However, if the network supports an explicit congestion signal, RAP could exploit that information to behave more efficiently. We extensively evaluated performance of RAP through simulation 1 . <p> Many of these studies have not addressed inter-protocol fairness; instead they strive to improve the perceptual quality. However, work in [TZ98] proposes an adaptive coding schemes, using the formula presented in <ref> [MF97, MSMO97] </ref> that captures the macroscopic behavior of TCP. This approach shows promise, but it has yet to be shown that this formula or the more detailed variant of it in [PFTK98] can be used in a wide range of situations without introducing possible large-scale oscillatory behavior. <p> Based on system control theory, optimal adjustment frequency depends on the feedback delay. The feedback delay is the time between changing the rate and detecting the network's reaction to that change. It is suggested that rate-based schemes adjust their rates not more than once per RTT <ref> [MF97] </ref>. Changing the rate too often results in oscillation whereas infrequent change of rate leads to an unresponsive behavior. Feedback delay in ack-based schemes (e.g. RAP) is equal to one RTT. RAP adjusts the IP G once every round-trip time. <p> End systems are expected to react to congestion on suitable time scales by dropping their rate exponentially. It takes one RTT for end systems to detect and react to congestion. Thus an end-system only needs to react at most once per RTT as long as it reacts sufficiently <ref> [MF97] </ref>. To achieve this end systems require a mechanism by which they can identify a cluster of losses that are potentially related to the same congestion. A simple approach is to ignore all losses that are detected during the first RTT after a back-off. RAP employs a slightly different approach.
Reference: [MK92] <author> P. Mishra and H. Kanakia. </author> <title> A hop by hop rate-based congestion control scheme. </title> <booktitle> ACM SIGCOMM, </booktitle> <year> 1992. </year>
Reference-contexts: These weights are constant. its transmission while it follows the AIMD algorithm for coarse grain adaptation. 3.3 Self-limiting issues in RAP There is a consensus about the inherent instability of rate-based control schemes. Although it is hard to disprove, it has not been theoretically or experimentally proven <ref> [MK92] </ref>. Self-limiting behavior is the classic problem with rate-based schemes. In window-based schemes the source stops once it has a full window worth of data on the fly. This property makes the window-based schemes intrinsically stable.
Reference: [MMFR96] <author> M . Mathis, S. Mahdavi, S. Floyd, and A. Romanow. </author> <title> TCP selective acknowledgement options. </title> <booktitle> RFC 2018, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: Currently, we are in the process of implementing a RAP prototype for actual experiments over the Internet. We have simulated RAP using the ns2 simulator [MF95], and compared it to TCP Tahoe, Reno, NewReno [FF96] and Sack <ref> [MMFR96] </ref>. and SW 1 is the bottleneck point. All the other links have higher bandwidth and shorter delay than the bottleneck.
Reference: [Mor97] <author> R. Morris. </author> <title> TCP behavior with many flows. </title> <booktitle> IEEE Int'l Conf. on Network Protocols, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: The observed unfairness against TCP traffic can be due to one of the following reasons: 1. TCP's inherent performance limitations, 2. An artifact of configuration parameters and 3. Unfairness imposed by coexisting RAP flows. TCP suffers from some performance limitations <ref> [FF96, Mor97] </ref>. In particular, when TCP experiences multiple losses within a window or the window is smaller than 4, it is constrained to either wait for retransmission timeout or go through slow-start.
Reference: [MSMO97] <author> M. Mathis, J. Semke, J. Mahdavi, and T. Ott. </author> <title> The macroscopic behavior of the TCP congestion avoidance algorithm. </title> <journal> Computer Communication Review, </journal> <volume> 27(3), </volume> <month> July </month> <year> 1997. </year>
Reference-contexts: Many of these studies have not addressed inter-protocol fairness; instead they strive to improve the perceptual quality. However, work in [TZ98] proposes an adaptive coding schemes, using the formula presented in <ref> [MF97, MSMO97] </ref> that captures the macroscopic behavior of TCP. This approach shows promise, but it has yet to be shown that this formula or the more detailed variant of it in [PFTK98] can be used in a wide range of situations without introducing possible large-scale oscillatory behavior.
Reference: [Net] <institution> Progressive Networks. </institution> <note> Http versus realaudio client-server streaming. http://www.realaudio.com/help/content/http-vs-ra.html. </note>
Reference-contexts: Their results show that SCP is not TCP-friendly. This may be due to using the shortest RTT that has been measured for rate adjustment since it may widely vary for different flows. There are many commercial media streaming players that are currently deployed over the Internet such as Realplayer <ref> [Net] </ref>, Vxtreme [Incb] and Microsoft Netshow [Inca]. Although they claim to be adaptive, no analysis is available to verify any claims. Work in [CTCL95] describes VDP protocol that is deployed in Vosaic. Their proposed adaptation algorithm is clearly not TCP-friendly.
Reference: [OK95] <author> A. Ortega and M. Khansari. </author> <title> Rate control for video coding over variable bit rate channels with applications to wireless transmission. </title> <booktitle> Proceedings of the 2nd IEEE International Conference on Image Processing (ICIP), </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: We discuss in 1.1 why we have chosen a rate based approach rather than a window based approach. A common approach for rate adaptation is adaptive encoding through the adjustment of codec quantization parameters based on state of the network <ref> [OK95] </ref>. Many of these studies have not addressed inter-protocol fairness; instead they strive to improve the perceptual quality. However, work in [TZ98] proposes an adaptive coding schemes, using the formula presented in [MF97, MSMO97] that captures the macroscopic behavior of TCP.
Reference: [PFTK98] <author> J. Padhye, V. Firoiu, D. Towsley, and J. Kurose. </author> <title> Modeling TCP throughput: a simple model and its empirical validation. </title> <booktitle> ACM SIGCOMM, </booktitle> <month> September </month> <year> 1998. </year>
Reference-contexts: However, work in [TZ98] proposes an adaptive coding schemes, using the formula presented in [MF97, MSMO97] that captures the macroscopic behavior of TCP. This approach shows promise, but it has yet to be shown that this formula or the more detailed variant of it in <ref> [PFTK98] </ref> can be used in a wide range of situations without introducing possible large-scale oscillatory behavior. Moreover, it is CPU-extensive for a server to adaptively encode a potentially large number of streams simultaneously for all active clients.
Reference: [She90] <author> S. Shenker. </author> <title> A theoretical analysis of feedback flow control. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 156165, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: RAP connections with shorter RTT are more aggressive and achieve a larger share of the bottleneck bandwidth. However, there are two issues to notice: 1. in general, other measures of fairness can only be achieved by implementing the required machinery in the network <ref> [She90] </ref>; 2. As long as the unfairness problem is not resolved along TCP flows, being TCP-friendly implies accepting this unfairness. Due to lack of space, we have not discussed startup behavior of the RAP protocol.
Reference: [TZ98] <author> W. Tan and A. Zakhor. </author> <title> Error resilient packet video for the internet. </title> <booktitle> Submitted to Proceedings of the IEEE International Conference on Image Processing (ICIP), </booktitle> <month> May </month> <year> 1998. </year> <month> 27 </month>
Reference-contexts: A common approach for rate adaptation is adaptive encoding through the adjustment of codec quantization parameters based on state of the network [OK95]. Many of these studies have not addressed inter-protocol fairness; instead they strive to improve the perceptual quality. However, work in <ref> [TZ98] </ref> proposes an adaptive coding schemes, using the formula presented in [MF97, MSMO97] that captures the macroscopic behavior of TCP.
References-found: 25

