URL: http://www.cs.man.ac.uk/~franconi/dl/course/articles/dl-db-survey-TKDE.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~franconi/dl/course/
Root-URL: http://www.cs.man.ac.uk
Title: Description Logics in Data Management  
Author: Alexander Borgida 
Keyword: Description, concept, terminological, language, subsumption, knowledge representation, schema, intension, object centered.  
Date: October 4, 1995  
Abstract: Description logics and reasoners, which are descendants of the kl-one language, have been studied in depth in Artificial Intelligence. After a brief introduction, we survey in this paper their application to the problems of information management, using the framework of an abstract information server equipped with several operations | each involving one or more languages. Specifically, we indicate how one can achieve enhanced access to data and knowledge by using descriptions in languages for schema design and integration, queries, answers, updates, rules, and constraints. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Ait-Kaci, </author> <title> A lattice theoretic approach to computation based on a calculus of partially ordered type structures., </title> <type> PhD Thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1984. </year>
Reference-contexts: the two other currently most widely used DLs, back [46] and loom [47], as well as an infix notation used in many theoretical papers: COURSE and at-most (10, takers) and all (takers, GRADS) (:and COURSE (:at-most 10 takers) (:all takers GRADS)) COURSE u 10 takers u 8takers:GRADS As proposed Ait-Kaci <ref> [1] </ref>, it is useful to view DLs as special languages obtained by term composition.
Reference: [2] <author> H. Ait-Kaci and A. </author> <title> Podelski, "An overview of Life", Next Generation Information System Technology: </title> <booktitle> Proc. 1st Int. East/West Data Base Workshop, </booktitle> <publisher> Springer-Verlag LNCS 504, </publisher> <address> pp.42-58, </address> <year> 1990 </year>
Reference-contexts: They have found applications in a variety of areas such as data management, linguistics [29], programming languages <ref> [2] </ref>, configuration management [70, 54], and knowledge-based software engineering [35]. DLs exploit their special-purpose constructors in order to provide solutions to such difficult problems as view updates and reasoning with incomplete information.
Reference: [3] <author> T.W. Anwar, H. Beck and S. Navathe, </author> <title> "Knowledge mining by imprecise querying: a classification-based approach", </title> <booktitle> Proc. 8th Conference on Data Engineering', </booktitle> <address> Tempe, Arizona, </address> <month> February </month> <year> 1992, </year> <pages> 622-630. </pages>
Reference-contexts: In such cases, it is reasonable to consider generalizing the query slightly until a non-empty answer set is obtained. The lattice of subsuming descriptions provides the obvious space to search for such generalizations, and therefore the system can provide a helping hand in this task, as illustrated in <ref> [3] </ref>. 8 * The description lattice supports the paradigm of query specification by iterative refinement, de scribed in [67] and [57]. * Data exploration involves asking very many queries, possibly by teams of people, over an extended period of time.
Reference: [4] <author> Y. Arens, C.Y. Chee, C.N. Hsu, and C. Knoblock, </author> <title> "Retrieving and integrating data from multiple information systems", </title> <booktitle> Int. J. of Intelligent and Cooperative Information Systems 3(1), </booktitle> <year> 1994. </year>
Reference-contexts: Federated databases [63], and more generally so-called "co-operative information systems", where information from several sources is made accessible to users, form a particularly active area of application for DLs <ref> [4, 30, 64, 13] </ref>. A key reason for this is that in order to make several pre-existing databases cooperate it is necessary to first express and relate their contents and semantics. As argued above, DLs provide a richly expressive medium for this task.
Reference: [5] <author> F. Baader and P. Hanscke, </author> <title> "A scheme for integrating concrete domains into concept languages", </title> <booktitle> Proc. </booktitle> <address> IJCAI'91, Australia, </address> <month> August </month> <year> 1991 </year>
Reference-contexts: This approach requires a modular architecture for DL reasoners which is as easy to extend as, for example, a syntax-directed translation scheme used in a programming language compiler. Such extensible architectures are discussed in <ref> [17, 5] </ref>, and the methodology of providing extensions is illustrated in [15].
Reference: [6] <author> F. Baader and B. Hollunder, "KRIS: </author> <title> Knowledge representation and inference system", </title> <journal> ACM SIGART Bulletin 2(3), </journal> <month> June </month> <year> 1991, </year> <pages> 8 - 14. </pages>
Reference-contexts: Some researchers <ref> [6, 60] </ref> feel that as long as the logic is decidable, it is reasonable to deliver to the users a system that reasons correctly with it.
Reference: [7] <editor> F. Baader, B. Hollunder, B. Nebel, H-J. Prof-itlich, </editor> <title> "An empirical analysis of optimization techniques for terminological representation systems", </title> <booktitle> Proc. KR'92, </booktitle> <address> October 1992, Boston, MA. </address> <month> 13 </month>
Reference-contexts: The operation of classifying a given new description with respect to some set of previously encountered descriptions is in fact standard in all DL-reasoners, with various techniques for doing so surveyed in <ref> [48, 69, 7] </ref>. But we emphasize that such a set of classified descriptions forms just a finite sub-partial-order of the infinite lattice of description terms.
Reference: [8] <author> H. W. Beck, S. K. Gala, and S. B. Navathe, </author> <title> "Classification as a query processing technique in the CANDIDE semantic data model," </title> <booktitle> Proc. Fifth IEEE International Data Engineering Conference, </booktitle> <month> February </month> <year> 1989, </year> <pages> 572-581. </pages>
Reference-contexts: The answer to such a query would be a list of individuals that satisfies the conditions of the query | i.e., the ones recognized by the query description. Papers such as <ref> [67, 57, 8, 52] </ref> and [27] have investigated the use of DLs as query languages.
Reference: [9] <author> H. W. Beck, T. Anwar, and S. B. Navathe, </author> <title> "A conceptual clustering algorithm for database schema design", </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 6(3), </volume> <month> June </month> <year> 1994, </year> <pages> pp. 396-411. </pages>
Reference-contexts: Another technique for developing the "right" schema is proposed in <ref> [9] </ref>, where one starts with individuals and existing classes, and clusters them into potentially new classes.
Reference: [10] <author> S. Bergamaschi and B. Nebel, </author> <title> "Automatic building and validation of complex object database schemata supporting multiple inheritance", </title> <journal> Applied Intelligence, </journal> <volume> 4(2), </volume> <year> 1994, </year> <month> pp.185-204 </month>
Reference-contexts: Similarly, <ref> [32, 10] </ref> and [28] show how the non-procedural aspects of object-oriented database schemas such as O 2 can be captured using DLs.
Reference: [11] <author> S. Bergamaschi and C. Sartori, </author> <title> "On taxonomic reasoning in conceptual design", </title> <booktitle> ACM Trans.on Database Systems 17(3), </booktitle> <pages> pp. 385-442, </pages> <year> 1992. </year>
Reference-contexts: The argument that semantic data models, such as DAPLEX and Entity-Relationship, can be expressed using relatively limited DLs, as above, has been presented in several papers, including <ref> [32, 11, 30] </ref> and [28]. <p> - i.e., one can help verify the schema's consistency [32]. * By using the relative complement operator, it is possible to reduce the redundancy in the schema presentation, so that every class declaration contains only the minimal additional constraints on top of the explicitly named parents from which it inherits <ref> [11] </ref>. * In object oriented models, the descriptions used as constraints on primitive class names correspond to types, and in data models such as O 2 there is a requirement that sub-classes have more refined type [43].
Reference: [12] <author> C. Bettini, </author> <title> "A family of Temporal Terminological Logics", </title> <booktitle> Advances in Artificial Intelligence: 3rd Congress of IA*AI, </booktitle> <publisher> Springer Verlag LNCS No.728, </publisher> <year> 1993. </year>
Reference-contexts: Sec--ond, there is complete freedom in the choice of term constructors in the language syntax, and their intended interpretation. Illustrative of the kind of benefits one gains from this freedom are languages for describing actions/plans, and expressing temporal concepts. For example, <ref> [12] </ref> introduces special concept constructors for describing classes of temporal intervals. Thus after (1980) and duration-greater (2,year) and before (now) refers to all time intervals beginning after 1980, of duration at least 2 years, which end before the reference time interval now.
Reference: [13] <author> J.M. Blanco, A. Illarramendi, A. Goni, </author> <title> "Building a Federated Relational Database System: An Approach using a Knowledge-Based System", </title> <journal> Int'l J. of Intelligent and Cooperative Information Systems, </journal> <volume> vol. 3, no. 4, </volume> <year> 1994, </year> <pages> pp. 415-455 </pages>
Reference-contexts: Federated databases [63], and more generally so-called "co-operative information systems", where information from several sources is made accessible to users, form a particularly active area of application for DLs <ref> [4, 30, 64, 13] </ref>. A key reason for this is that in order to make several pre-existing databases cooperate it is necessary to first express and relate their contents and semantics. As argued above, DLs provide a richly expressive medium for this task.
Reference: [14] <author> A. Borgida, </author> <title> "From type systems to knowledge representation: natural semantics specifications for description logics," </title> <booktitle> Int. J. of Intelligent and Cooperative Information Systems 1(1), </booktitle> <year> 1992. </year>
Reference-contexts: As we have seen, operational definitions are relatively difficult for DLs. Other kinds of semantic specification techniques have been proposed for this purpose, including non-standard denotational semantics such as those in [58, 21], or proof-theoretic axiomatizations, such as in <ref> [14, 15, 59] </ref>. * Providing an "escape-hatch" in the language. It is possible to introduce one or more constructors in the language whose semantics are "opaque" for subsumption reasoning, but can still be used 12 for recognizing individuals.
Reference: [15] <author> A. Borgida, </author> <title> "Towards the systematic development of terminological reasoners: clasp reconstructed", </title> <booktitle> Proc. Conf. on Principles of Knowledge Representation (KR'92), </booktitle> <address> Boston, MA, </address> <month> Oc-tober </month> <year> 1992. </year>
Reference-contexts: As we have seen, operational definitions are relatively difficult for DLs. Other kinds of semantic specification techniques have been proposed for this purpose, including non-standard denotational semantics such as those in [58, 21], or proof-theoretic axiomatizations, such as in <ref> [14, 15, 59] </ref>. * Providing an "escape-hatch" in the language. It is possible to introduce one or more constructors in the language whose semantics are "opaque" for subsumption reasoning, but can still be used 12 for recognizing individuals. <p> This approach requires a modular architecture for DL reasoners which is as easy to extend as, for example, a syntax-directed translation scheme used in a programming language compiler. Such extensible architectures are discussed in [17, 5], and the methodology of providing extensions is illustrated in <ref> [15] </ref>.
Reference: [16] <author> A. Borgida, </author> <title> "On the relationship between Description Logic and First Order Logic Queries", </title> <booktitle> Proc. Conf. Information and Knowledge Management, </booktitle> <address> Gaithersburg, MD., </address> <year> 1994, </year> <month> pp.219-225. </month>
Reference-contexts: Second, one must deal with the fact that DLs have limited expressive power. In fact, <ref> [16] </ref> shows that for all DLs considered so far, even undecidable ones, concepts can essentially be translated to FOL formulas with at most 3 variable symbols.
Reference: [17] <author> A. Borgida and R. Brachman, </author> " <title> Customizable classification inference in the ProtoDL description management system", </title> <booktitle> Proc. Conf. Information and Knowledge Management, </booktitle> <address> Balti-more, MD, </address> <month> November </month> <year> 1992, </year> <month> pp.482-490. </month>
Reference-contexts: This approach requires a modular architecture for DL reasoners which is as easy to extend as, for example, a syntax-directed translation scheme used in a programming language compiler. Such extensible architectures are discussed in <ref> [17, 5] </ref>, and the methodology of providing extensions is illustrated in [15].
Reference: [18] <author> A. Borgida and R. Brachman, </author> <title> "Loading data into description reasoners", </title> <booktitle> Proc. ACM SIG-MOD Conf. on Data Management, 1993, Wash-ington, DC, </booktitle> <pages> pp. 217 - 226. </pages>
Reference-contexts: E-mail: borgida@cs.rutgers.edu. y This research was supported in part by Grant IRI 91-19310 from the U.S. National Science Foundation. A portion of this paper is based on an invited presentation given at IFIP'92 <ref> [18] </ref>, and appears with the permission of IFIP and Elsevier Science B.V., Amsterdam. (and COURSE , (at-most 10 takers) , (all takers GRADS) ) Such a declaration is intended to express necessary conditions that must be met by each instance of the class. <p> Another approach, suitable in cases when there is frequent KB access, or for DLs that are not sufficiently expressive, is to "load" the database into the DL knowledge base. A straightforward approach to this is likely to be have unacceptably poor performance, and <ref> [18] </ref> offers a way to compile much of the reasoning of the DL classifier into a sequence of SQL queries, thus taking advantage of the bulk processing offered by DBMS. Second, one must deal with the fact that DLs have limited expressive power.
Reference: [19] <author> A.Borgida, R. J. Brachman, D. L. McGuin-ness, and L. A. </author> <title> Resnick "CLASSIC: a structural data model for objects," </title> <booktitle> Proc. 1989 ACM SIG-MOD International Conference on Management of Data, </booktitle> <month> June, </month> <year> 1989, </year> <pages> pp. 59-67. </pages>
Reference-contexts: Figure 1 contains an example of a typical compositional description, expressed in the classic language <ref> [19] </ref>. Its intended reading would be "Courses with at most 10 takers, all takers being instances of GRADS". In this description, COURSE and GRADS are identifiers for concepts introduced elsewhere, while takers is the name of a binary relation, intended to relate courses to students taking them. <p> in the case of very large schemas or when users are not fully familiar with the semantics of the domain they are dealing with, it is useful to provide intensional answers to queries: these display what must hold true of any individual (existing or not) that would satisfy the query <ref> [19] </ref>.
Reference: [20] <author> A. Borgida, and P. Devanbu, </author> <title> "Knowledge base management systems using description logics, </title> <booktitle> and their role in software information systems", Information Processing 92 (Vol.3), </booktitle> <address> pp.171-181, </address> <publisher> Elsevier Science Publishers, </publisher> <year> 1992. </year>
Reference: [21] <author> A. Borgida, and P.F. Patel-Schneider, </author> <title> "A semantics and complete algorithm for subsump-tion in the classic description logic", </title> <journal> J. of Artificial Intelligence Research, </journal> <year> 1994, </year> <month> pp.277-308. </month>
Reference-contexts: the additional description 5 CONCEPT CONSTRUCTORS ROLE CONSTRUCTORS COMPLEXITY and,all, same-as | Undecidable [61] ALCN R (and, or, not, some, at-least, at-most) role-and PSPACE [37, 36] and, not, all, some, or compose, role-or, inverse, trans, restrict,top-role EXP-TIME [60] and, all, at-most, at-least, same-as on attributes, fills, one-of with integers Polynomial <ref> [21] </ref> Table 2: Some subsumption complexity results at-most (1, compose (studNumber, inverse (studNumber))) which says that if we look for individuals that have the same student number as this one, we will find at most one (this particular individual). <p> The difficulty faced by this approach is to describe to the user the incompleteness. As we have seen, operational definitions are relatively difficult for DLs. Other kinds of semantic specification techniques have been proposed for this purpose, including non-standard denotational semantics such as those in <ref> [58, 21] </ref>, or proof-theoretic axiomatizations, such as in [14, 15, 59]. * Providing an "escape-hatch" in the language. It is possible to introduce one or more constructors in the language whose semantics are "opaque" for subsumption reasoning, but can still be used 12 for recognizing individuals.
Reference: [22] <author> R. J. Brachman, </author> <title> "A structural paradigm for representing knowledge," </title> <type> Ph.D. Thesis, </type> <institution> Har-vard University, Division of Engineering and Applied Physics, </institution> <year> 1977. </year> <note> Revised version published as BBN Report No. 3605, </note> <institution> Bolt Beranek and Newman, Inc., </institution> <address> Cambridge, MA, </address> <month> May, </month> <year> 1978. </year>
Reference-contexts: For readers conversant with Artificial Intelligence, DLs are descendants of the influential kl-one system <ref> [22, 23] </ref>, and have been extensively studied under the name of "terminological logics". The features and history of these logics have been surveyed recently in papers such as [68, 48].
Reference: [23] <author> R. J. Brachman and J. G. Schmolze, </author> <title> "An overview of the KL-ONE knowledge representation system," </title> <journal> Cognitive Science, </journal> <volume> 9(2), April-June, </volume> <year> 1985, </year> <pages> pp. 171-216. </pages>
Reference-contexts: For readers conversant with Artificial Intelligence, DLs are descendants of the influential kl-one system <ref> [22, 23] </ref>, and have been extensively studied under the name of "terminological logics". The features and history of these logics have been surveyed recently in papers such as [68, 48].
Reference: [24] <author> R. J. Brachman and H. J. Levesque, </author> <title> "The tractability of subsumption in frame-based description languages," </title> <booktitle> Proc. AAAI-84, </booktitle> <address> Austin, TX, </address> <month> August, </month> <year> 1984, </year> <pages> pp. 34-37. </pages>
Reference-contexts: These will prove useful in applications of DLs. 2.2 Reasoning with DLs Although the original goal of DLs was to provide a convenient form for expressing the desired knowledge and inferences of some application, a highly influential paper <ref> [24] </ref>, explored the idea that choosing a subset of concept constructors leads to description logics of more restricted expressiveness, but at the same time more efficient reasoning. <p> Some authors have argued that DL-based systems need to respond in polynomial time if they are to be useful as "servers" to other problem solvers <ref> [24, 56] </ref>. This led to a class of languages, including kandor and krypton, which had relatively few constructors, carefully chosen so that subsumption would be polynomial-time decidable.
Reference: [25] <author> R. J. Brach-man, R. E. Fikes, and H. J. Levesque, </author> <title> "Krypton: a functional approach to knowledge representation," </title> <journal> IEEE Computer, </journal> <volume> Vol. 16, No. 10, </volume> <month> October, </month> <year> 1983, </year> <pages> pp. 67-73. </pages>
Reference-contexts: Throughout the paper we endeavor to summarize the key points as italicized observations. 2 The Syntax and Semantics of DLs Although the original kl-one system supported a graphical notation for representing definitions of concepts, all DLs since the krypton system <ref> [25] </ref> provide a formal linear syntax for writing descriptions.
Reference: [26] <author> R. Brachman, P.Selfridge, L.Terveen, B.Altman, A. Borgida, F. Halper, T.Kirk, A.Lazar, S.McGuiness, L.Resnick, </author> <title> "Knowledge representation support for data archaelogy", </title> <booktitle> Int. J. of Intelligent and Cooperative Information Systems 2(2), </booktitle> <month> June </month> <year> 1993, </year> <month> pp.159-186. </month>
Reference-contexts: The DL-based KBMS can automatically organize this large set of queries through the subsumption relationship, thereby allowing users to find identical or similar queries asked in the past, together with their answers <ref> [26] </ref>. This is important if the queries may require a considerably long time to process, or if users associate comments/observations with queries.
Reference: [27] <author> M.Buchheit, M. Jeusfeld, W. Nutt, and M. Staudt, </author> <title> "Subsumption between queries in object-oriented databases", </title> <booktitle> Information Systems 19(1), </booktitle> <address> pp.33-54, </address> <year> 1994. </year> <month> 14 </month>
Reference-contexts: The answer to such a query would be a list of individuals that satisfies the conditions of the query | i.e., the ones recognized by the query description. Papers such as [67, 57, 8, 52] and <ref> [27] </ref> have investigated the use of DLs as query languages. DLs are particularly useful for querying knowledge bases in situations when the user is not entirely familiar with the contents or structure of the data, or when they are not entirely sure what question they should be asking. <p> Queries as descriptions are obviously useful for view definition, with the same advantages detailed above. Moreover, finding that the current query is subsumed by some materialized view may provide a new opportunity for optimization <ref> [27] </ref>, similar to that envisaged for common sub-expression analysis for relational queries [40]: one need only test the query predicate on the individuals in the view. <p> Second, one must deal with the fact that DLs have limited expressive power. In fact, [16] shows that for all DLs considered so far, even undecidable ones, concepts can essentially be translated to FOL formulas with at most 3 variable symbols. One approach, suggested in <ref> [27] </ref>, is to factor out a "clean" part of the query (for which subsumption reasoning is performed), and put the rest of the query in an opaque, "dirty" box. <p> The approach of varying languages has been advocated in <ref> [45, 44, 27] </ref>, and has been practiced in systems which use DLs as query languages (e.g.,[57]). 4.5 Descriptions as constraints. We have seen already that it is useful to associate with a primitive concept some necessary conditions that would have to hold of its individual instances.
Reference: [28] <author> D. Calvanese, M. Lenzerini, and D. Nardi, </author> <title> "A unified framework for class-based representation formalisms", </title> <booktitle> Proc. Conf. on Principles of Knowledge Representation (KR'94), </booktitle> <address> Bonn, Ger-many, </address> <year> 1994, </year> <month> pp.109-120. </month>
Reference-contexts: The argument that semantic data models, such as DAPLEX and Entity-Relationship, can be expressed using relatively limited DLs, as above, has been presented in several papers, including [32, 11, 30] and <ref> [28] </ref>. <p> Similarly, [32, 10] and <ref> [28] </ref> show how the non-procedural aspects of object-oriented database schemas such as O 2 can be captured using DLs. <p> Representing the database schema in a suitable, decidable DL has been argued to have a number of advantages: * The greater expressive power of some DLs (e.g., the presence of negation, disjunction, co-reference constraints or inverses) makes it possible to capture important additional aspects of the data semantics <ref> [28] </ref>. * By checking whether C =) nothing as a consequence of any particular set of constraints, it is possible to detect whether or not the global set of specifications in some schema force class C to be incoherent - i.e., one can help verify the schema's consistency [32]. * By
Reference: [29] <author> B. Carpenter, </author> <title> The logic of typed feature structures: applications to unification grammars, logic programs, and cosntraint resolution, </title> <publisher> Cam-brige University Press, </publisher> <year> 1992. </year>
Reference-contexts: They have found applications in a variety of areas such as data management, linguistics <ref> [29] </ref>, programming languages [2], configuration management [70, 54], and knowledge-based software engineering [35]. DLs exploit their special-purpose constructors in order to provide solutions to such difficult problems as view updates and reasoning with incomplete information.
Reference: [30] <author> T. Catarci and M. Lenzerini, </author> <title> "Representing and using interschema knowledge in cooperative information systems", </title> <journal> Int. J. of Intelligent and Coorperative Information Systems 2(4), </journal> <pages> pp. 375-398, </pages> <month> Decembe </month> <year> 1993. </year>
Reference-contexts: The argument that semantic data models, such as DAPLEX and Entity-Relationship, can be expressed using relatively limited DLs, as above, has been presented in several papers, including <ref> [32, 11, 30] </ref> and [28]. <p> at-least (1,crs) at-most (1,crs) all (when,DATE) at-least (1,when) at-most (1,when)) STUDENT v and ( all ( inverse (st) , ENROLLMENT) at-least (1, inverse (st)) at-most (6, inverse (st)) ) COURSE v and ( all ( inverse (crs) , ENROLLMENT) at-least (1, inverse (crs)) at-most (300, inverse (crs)) ) while in <ref> [30] </ref>, n-ary relationships (and associated term constructor) are introduced in order to model directly relations. Similarly, [32, 10] and [28] show how the non-procedural aspects of object-oriented database schemas such as O 2 can be captured using DLs. <p> Federated databases [63], and more generally so-called "co-operative information systems", where information from several sources is made accessible to users, form a particularly active area of application for DLs <ref> [4, 30, 64, 13] </ref>. A key reason for this is that in order to make several pre-existing databases cooperate it is necessary to first express and relate their contents and semantics. As argued above, DLs provide a richly expressive medium for this task. <p> A key reason for this is that in order to make several pre-existing databases cooperate it is necessary to first express and relate their contents and semantics. As argued above, DLs provide a richly expressive medium for this task. For example, <ref> [30] </ref> uses an expressive DL to relate the entities and relationships in the schemas of several databases using constraints of the form : v , in the presence of some (but not necessarily complete) global world knowledge.
Reference: [31] <author> W. Cohen, A. Borgida, and H. Hirsh, </author> <title> "Computing least common subsumers in description logics", </title> <booktitle> Proc. of AAAI'92, </booktitle> <address> San Jose, CA., </address> <month> May </month> <year> 1992. </year>
Reference-contexts: For example, Figure 2 presents two descriptions, their greatest common subsumee (meet), least common subsumer (join), and the relative complement between the join in (c) and the first concept in (a), in a language having constructors fand,at-most,at-least,all,one-ofg. The interested reader may consult <ref> [31, 66] </ref> for conditions under which the semi-lattice is guaranteed to be a lattice and to have unique relative complements. <p> Another technique for developing the "right" schema is proposed in [9], where one starts with individuals and existing classes, and clusters them into potentially new classes. The algorithm, related to the "least common subsumer" notions introduced in <ref> [31] </ref>, is based on the structure of the class definitions, presented as descriptions 4 Additional uses of DLs in In formation Systems Although DLs are natural candidates for describing the schema of databases, there are a number of additional ways in which descriptions can be used to help in managing information. <p> It has been argued (e.g., [65]) that in such situations it is appropriate to provide abstract answers. In the case of DL-based KBMS, this can be achieved by finding in the lattice of descriptions the least common subsumer <ref> [31] </ref> of the set of individuals' descriptions, which captures their commonalities.
Reference: [32] <author> L. Delcambre and K. Davis, </author> <title> "Automatic validation of object-oriented database structures", </title> <booktitle> Proc. IEEE Data Engineering Conference, </booktitle> <address> Los Angeles, CA., pp.2-9, </address> <year> 1989. </year>
Reference-contexts: The argument that semantic data models, such as DAPLEX and Entity-Relationship, can be expressed using relatively limited DLs, as above, has been presented in several papers, including <ref> [32, 11, 30] </ref> and [28]. <p> Similarly, <ref> [32, 10] </ref> and [28] show how the non-procedural aspects of object-oriented database schemas such as O 2 can be captured using DLs. <p> data semantics [28]. * By checking whether C =) nothing as a consequence of any particular set of constraints, it is possible to detect whether or not the global set of specifications in some schema force class C to be incoherent - i.e., one can help verify the schema's consistency <ref> [32] </ref>. * By using the relative complement operator, it is possible to reduce the redundancy in the schema presentation, so that every class declaration contains only the minimal additional constraints on top of the explicitly named parents from which it inherits [11]. * In object oriented models, the descriptions used as
Reference: [33] <author> P. Devanbu and D. Litman, </author> <title> "Plan-based terminological reasoning," </title> <booktitle> Proc. Conf. on Principles of Knowledge Representation (KR'91), </booktitle> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: At the same time, the framework of DLs is sufficiently flexible to admit with relative ease the introduction of new description constructors, which can be application specific, as illustrated by such systems as clasp <ref> [33] </ref>. This allows DLs to be tailored to better serve particular applications. This survey has attempted to show the utility of DLs in describing the (conceptual) schema of databases. This paper has argued that, contrary to popular myth in AI, DLs are useful not only for defining "terminology".
Reference: [34] <author> P. Devanbu, R. Brachman, P. Selfridge, and B. Ballard, </author> <title> "LaSSIE: A knowledge-based software information system", </title> <journal> Communications of the ACM,34(5), </journal> <month> May </month> <year> 1991. </year>
Reference-contexts: The work of Devanbu <ref> [34] </ref> on Software Information Systems provides one instance where such a facility is useful: when a new software developer joins a team that has been working on some very large project over a long period of time, she may not be aware of the intended structure of the code, which is
Reference: [35] <author> P. Devanbu and M. Jones, </author> <title> "The use of description logics in KBSE systems", </title> <booktitle> Proc. 17th Int. Conf. on Software Engineering, </booktitle> <address> Sorrento, Italy, </address> <year> 1994. </year>
Reference-contexts: They have found applications in a variety of areas such as data management, linguistics [29], programming languages [2], configuration management [70, 54], and knowledge-based software engineering <ref> [35] </ref>. DLs exploit their special-purpose constructors in order to provide solutions to such difficult problems as view updates and reasoning with incomplete information.
Reference: [36] <author> F. Donini, M. Lenzerini, D. Nardi, and W. Nutt, </author> <title> "Tractable concept languages", </title> <booktitle> Proc. </booktitle> <address> IJCAI'91, Australia, </address> <month> August </month> <year> 1991, </year> <pages> pp. 458-463. </pages>
Reference-contexts: If the declaration of class STUDENT also specified that studNumber is a key, we could encode this as the additional description 5 CONCEPT CONSTRUCTORS ROLE CONSTRUCTORS COMPLEXITY and,all, same-as | Undecidable [61] ALCN R (and, or, not, some, at-least, at-most) role-and PSPACE <ref> [37, 36] </ref> and, not, all, some, or compose, role-or, inverse, trans, restrict,top-role EXP-TIME [60] and, all, at-most, at-least, same-as on attributes, fills, one-of with integers Polynomial [21] Table 2: Some subsumption complexity results at-most (1, compose (studNumber, inverse (studNumber))) which says that if we look for individuals that have the same
Reference: [37] <author> F. Donini, M. Lenzerini, D. Nardi, and W. Nutt, </author> <title> "The complexity of concept languages", </title> <booktitle> Proc. KR'91, </booktitle> <address> Boston, MA., </address> <year> 1991, </year> <pages> pp. 151-162. </pages>
Reference-contexts: If the declaration of class STUDENT also specified that studNumber is a key, we could encode this as the additional description 5 CONCEPT CONSTRUCTORS ROLE CONSTRUCTORS COMPLEXITY and,all, same-as | Undecidable [61] ALCN R (and, or, not, some, at-least, at-most) role-and PSPACE <ref> [37, 36] </ref> and, not, all, some, or compose, role-or, inverse, trans, restrict,top-role EXP-TIME [60] and, all, at-most, at-least, same-as on attributes, fills, one-of with integers Polynomial [21] Table 2: Some subsumption complexity results at-most (1, compose (studNumber, inverse (studNumber))) which says that if we look for individuals that have the same
Reference: [38] <author> F. Donini, M. Lenzerini, D. Nardi, A. Schaerf, and W. Nutt, </author> <title> "Adding epistemic operators to concept languages", </title> <booktitle> Proc. KR'92, </booktitle> <address> Bonn, </address> <year> 1992, </year> <month> pp.342-353. </month>
Reference-contexts: Such rules were first mentioned in connection with the consul system [49], and have been heavily used in the loom system [47], as well as other recent systems such as [71] and classic, while their semantics has been clarified in <ref> [38] </ref> through the use of "epistemic operators" dealing with the "knowledge" of the system.
Reference: [39] <author> J. Doyle, and R. Patil, </author> <title> "Two theses of knowledge representation: language restrictions, taxonomic classification, and the utility of representation services", </title> <booktitle> Artificial Intelligence 48(3), </booktitle> <month> April </month> <year> 1991, </year> <month> pp.261-298. </month>
Reference-contexts: This led to a class of languages, including kandor and krypton, which had relatively few constructors, carefully chosen so that subsumption would be polynomial-time decidable. This approach has been critiqued <ref> [39] </ref> on the grounds that if some application needs to make inferences, and the KBMS is not capable of making them, these inferences will be implemented somewhere else, destroying the concep tual coherence of the knowledge base. * Complete reasoners for intractable languages.
Reference: [40] <author> S. Finkelstein, </author> <title> "Common expression analysis in database applications", </title> <booktitle> Proc. ACM SIGMOD Confernce, </booktitle> <address> Orlando, FL, </address> <year> 1982, </year> <month> pp.235-245. </month>
Reference-contexts: Queries as descriptions are obviously useful for view definition, with the same advantages detailed above. Moreover, finding that the current query is subsumed by some materialized view may provide a new opportunity for optimization [27], similar to that envisaged for common sub-expression analysis for relational queries <ref> [40] </ref>: one need only test the query predicate on the individuals in the view. In fact, by using again the relative complement operation in the lattice of description, one might find a cheaper test to run on the members of the view.
Reference: [41] <author> B. Hollunder, W. Nutt, and M. Schmidt-Schauss, </author> <title> "Subsumption algorithms for concept description languages", </title> <booktitle> Proc. 9th ECAI, </booktitle> <address> Stock-holm, </address> <month> Aug. </month> <year> 1990, </year> <month> pp.348-353. </month>
Reference-contexts: In particular, the implementation of most "complete" reasoners | ones that find all the inferences sanctioned by the standard semantics | is based on such an approach. For example, kris uses a tableaux method with rewrite rules for deciding consistency, which is based on <ref> [62, 41] </ref>.
Reference: [42] <author> R. Hull and R. King, </author> <title> "Semantic database modeling: survey, applications, and research issues", </title> <journal> ACM Computing Surveys 19(3), </journal> <note> Septem-ber 1987, pp.201-260. </note>
Reference-contexts: In particular, semantic data models <ref> [42] </ref>, and more recently object-oriented databases (e.g., [43]), have claimed to capture the meaning of the data more directly by concentrating on entities (grouped into classes) related by relationships (often binary).
Reference: [43] <author> R. Lecluse and P. Richard, </author> <title> "Modeling complex structures in Object-Oriented Databases", </title> <booktitle> Proc. ACM PODS Conference, </booktitle> <address> Philadelphia, PA, </address> <year> 1989, </year> <pages> pp. 360-367. </pages>
Reference-contexts: In particular, semantic data models [42], and more recently object-oriented databases (e.g., <ref> [43] </ref>), have claimed to capture the meaning of the data more directly by concentrating on entities (grouped into classes) related by relationships (often binary). <p> minimal additional constraints on top of the explicitly named parents from which it inherits [11]. * In object oriented models, the descriptions used as constraints on primitive class names correspond to types, and in data models such as O 2 there is a requirement that sub-classes have more refined type <ref> [43] </ref>. The subsumption ordering on descriptions corresponds to type refinement, and hence provably correct subsumption algorithms can be used for type checking [52]. Most significantly, description logics provide the opportunity to introduce and give names not just to primitive classes but also to defined/virtual classes, which are essentially views.
Reference: [44] <author> M. Lenzerini and A. Schaerf, </author> <title> "Concept languages as query languages", </title> <booktitle> Proc. AAAI'91, </booktitle> <pages> pp. 471-476. </pages>
Reference-contexts: The approach of varying languages has been advocated in <ref> [45, 44, 27] </ref>, and has been practiced in systems which use DLs as query languages (e.g.,[57]). 4.5 Descriptions as constraints. We have seen already that it is useful to associate with a primitive concept some necessary conditions that would have to hold of its individual instances.
Reference: [45] <author> H. Levesque, </author> <title> "Foundations of a functional approach to knowledge representation", </title> <booktitle> Artificial Intelligence 23(2), </booktitle> <year> 1984, </year> <pages> pp. 155-212. </pages>
Reference-contexts: To see this, we introduce a somewhat more formal view of Knowledge Base Management Systems (KBMS) | systems which maintain and reason with models of some application domain 4 . Let us start from Levesque's functional view of a KBMS <ref> [45] </ref>: The basic idea is to treat a knowledge base as an abstract object on which one can perform two kinds of operations: tells and asks. tells are used to build or modify the model of the domain being maintained by the KBMS tell: L Tell fi KB ! KB while <p> The approach of varying languages has been advocated in <ref> [45, 44, 27] </ref>, and has been practiced in systems which use DLs as query languages (e.g.,[57]). 4.5 Descriptions as constraints. We have seen already that it is useful to associate with a primitive concept some necessary conditions that would have to hold of its individual instances.
Reference: [46] <author> K. von Luck,B. Nebel, C. Peltason, and A. Schmiedel, </author> <title> "The anatomy of the BACK System", KIT (Kunstliche Intelligenz und Textver-stehen) Report 41, </title> <institution> Technical University of Berlin, </institution> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: To give the reader a sense of the syntactic variations in use, here are versions of the description in Figure 1 in the two other currently most widely used DLs, back <ref> [46] </ref> and loom [47], as well as an infix notation used in many theoretical papers: COURSE and at-most (10, takers) and all (takers, GRADS) (:and COURSE (:at-most 10 takers) (:all takers GRADS)) COURSE u 10 takers u 8takers:GRADS As proposed Ait-Kaci [1], it is useful to view DLs as special languages
Reference: [47] <author> R.M. MacGregor, </author> <title> "A deductive pattern matcher", </title> <booktitle> in Proceedings AAAI-87, </booktitle> <address> St. Paul, Minnesota (1987) 403-408. </address>
Reference-contexts: To give the reader a sense of the syntactic variations in use, here are versions of the description in Figure 1 in the two other currently most widely used DLs, back [46] and loom <ref> [47] </ref>, as well as an infix notation used in many theoretical papers: COURSE and at-most (10, takers) and all (takers, GRADS) (:and COURSE (:at-most 10 takers) (:all takers GRADS)) COURSE u 10 takers u 8takers:GRADS As proposed Ait-Kaci [1], it is useful to view DLs as special languages obtained by term <p> Such rules were first mentioned in connection with the consul system [49], and have been heavily used in the loom system <ref> [47] </ref>, as well as other recent systems such as [71] and classic, while their semantics has been clarified in [38] through the use of "epistemic operators" dealing with the "knowledge" of the system.
Reference: [48] <author> R.M. MacGregor, </author> <title> "The evolving technology of classification-based knowledge representation systems", </title> <booktitle> in Principles of Semantic Networks: Explorations in the Representation of Knowledge, </booktitle> <publisher> John Sowa editor,Morgan-Kaufman 1991. </publisher>
Reference-contexts: It is such reasoning with definitions that is the trademark of description logics. 1 This analogy extends an example found in <ref> [48] </ref> 1.2 Outline For readers familiar with database management 2 , the paper provides a tutorial and survey of how descriptions and their reasoners can enhance the modeling power of the database (i.e., the kinds of knowledge about the world that can be stored), facilitate the user's interaction with it, or <p> For readers conversant with Artificial Intelligence, DLs are descendants of the influential kl-one system [22, 23], and have been extensively studied under the name of "terminological logics". The features and history of these logics have been surveyed recently in papers such as <ref> [68, 48] </ref>. Therefore our aim is to provide for this audience a novel, systematic look at the various uses to which DLs are being put for information management | a view considerably broader than that usually assumed in Artificial Intelligence 3 . <p> The operation of classifying a given new description with respect to some set of previously encountered descriptions is in fact standard in all DL-reasoners, with various techniques for doing so surveyed in <ref> [48, 69, 7] </ref>. But we emphasize that such a set of classified descriptions forms just a finite sub-partial-order of the infinite lattice of description terms.
Reference: [49] <author> W. Mark, </author> <title> "Rule-based inference in large knowledge bases", </title> <booktitle> Proc. </booktitle> <address> AAAI'80, </address> <month> August </month> <year> 1980. </year>
Reference-contexts: Such rules were first mentioned in connection with the consul system <ref> [49] </ref>, and have been heavily used in the loom system [47], as well as other recent systems such as [71] and classic, while their semantics has been clarified in [38] through the use of "epistemic operators" dealing with the "knowledge" of the system.
Reference: [50] <author> E. Mays, C. Apte, J. Griesmer, J. Kastner. </author> <title> "Organizing knowledge in a complex financial domain", </title> <journal> IEEE Expert, </journal> <year> 1987, </year> <month> pp.61-70. </month>
Reference-contexts: We must therefore address the issue of retrieving the answer from such databases. One approach, followed in <ref> [55, 50] </ref>, is to model as part of the KB the relations in the database as well as their relationship to the concepts in the semantic model, and then build a component that takes a DL query, transforms it into a query against the DBMS, and returns the answer.
Reference: [51] <author> B. Nebel, </author> <title> "Terminological reasoning is inherently intractable", </title> <booktitle> Artificial Intelligence 43, </booktitle> <year> 1990, </year> <month> pp.235-249 </month>
Reference-contexts: We remark that certain worst-case complexity results | such as the result that just by allowing definitions can lead to an exponential blow-up during processing <ref> [51] </ref> | are not considered to be a problem, because the examples are patho logical and do not arise in practice. * Incomplete implementations of logics. Systems such as loom explicitly acknowledge to their users that not all inferences sanctioned by the obvious semantics of constructors are implemented.
Reference: [52] <author> B. Nebel and C. Peltason, </author> <title> "Terminological reasoning and information management", </title> <editor> in D. Karagianis editor, </editor> <booktitle> Information Systems and Artificial Intelligence: Integration Aspects, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <month> pp.181-212 </month>
Reference-contexts: The subsumption ordering on descriptions corresponds to type refinement, and hence provably correct subsumption algorithms can be used for type checking <ref> [52] </ref>. Most significantly, description logics provide the opportunity to introduce and give names not just to primitive classes but also to defined/virtual classes, which are essentially views. <p> The answer to such a query would be a list of individuals that satisfies the conditions of the query | i.e., the ones recognized by the query description. Papers such as <ref> [67, 57, 8, 52] </ref> and [27] have investigated the use of DLs as query languages.
Reference: [53] <author> B. Nebel and G. Smolka, </author> <title> "Attributive description formalisms and the rest of the world", </title> <editor> in O. Herzog, C. Rollinger (eds), </editor> <booktitle> Text understanding in LILOG, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: The reader may also find interesting reference <ref> [53] </ref>, which describes interesting connections between DLs and other formalisms. Hence: The choice of term constructors is tailored to the expressive purposes at hand, tempered by the desired computational properties of the resulting reasoner, especially its decidability. A final note on the implementation of DL rea-soners may be of interest.
Reference: [54] <author> B. Owsnicki-Klewe, </author> <title> "Configuration as a consistency maintenance task," </title> <editor> in W. Hoeppner, (ed), </editor> <booktitle> Proc. of GWAI-88, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1988, </year> <pages> pp. 77-87. </pages>
Reference-contexts: This supports, among others, the proper treatment of such traditionally difficult database issues as null values and view updates. This aspect of KBMS based on DLs may explain in part their success in problems dealing with configuration management <ref> [54, 70] </ref>: configurations are incomplete designs, which are slowly being built up, yet we want to find out about problems with them before everything is fully known. 4.3 Using descriptions in answers Traditionally, questions such as "Who teaches New-crs?" or "What is Johnny's age?" are answered by displaying some individual value <p> They have found applications in a variety of areas such as data management, linguistics [29], programming languages [2], configuration management <ref> [70, 54] </ref>, and knowledge-based software engineering [35]. DLs exploit their special-purpose constructors in order to provide solutions to such difficult problems as view updates and reasoning with incomplete information.
Reference: [55] <author> J. Pastor, D. McKay and T. Finin, "View-concepts: </author> <title> knowledge-based access to databases", </title> <booktitle> Proc. </booktitle> <address> CIKM-92, Baltimore, MD, </address> <year> 1992, </year> <pages> pp. 84-91. </pages>
Reference-contexts: We must therefore address the issue of retrieving the answer from such databases. One approach, followed in <ref> [55, 50] </ref>, is to model as part of the KB the relations in the database as well as their relationship to the concepts in the semantic model, and then build a component that takes a DL query, transforms it into a query against the DBMS, and returns the answer.
Reference: [56] <author> P. F. Patel-Schneider, </author> <title> "Small can be beautiful in knowledge representation", </title> <booktitle> Proceedings IEEE Workshop on Principles of Knowledge-Based Systems, </booktitle> <address> Denver, Colorado (1984) 11-16. </address>
Reference-contexts: Some authors have argued that DL-based systems need to respond in polynomial time if they are to be useful as "servers" to other problem solvers <ref> [24, 56] </ref>. This led to a class of languages, including kandor and krypton, which had relatively few constructors, carefully chosen so that subsumption would be polynomial-time decidable.
Reference: [57] <author> P.F. Patel-Schneider, R.J. Brachman, and H.J. Levesque, "ARGON: </author> <title> knowledge representation meets information retrieval," </title> <booktitle> Proc. First Conf. on Artificial Intelligence Applications, </booktitle> <address> Denver, CO, </address> <month> December, </month> <year> 1984, </year> <pages> pp. 280-286. </pages>
Reference-contexts: The answer to such a query would be a list of individuals that satisfies the conditions of the query | i.e., the ones recognized by the query description. Papers such as <ref> [67, 57, 8, 52] </ref> and [27] have investigated the use of DLs as query languages. <p> The lattice of subsuming descriptions provides the obvious space to search for such generalizations, and therefore the system can provide a helping hand in this task, as illustrated in [3]. 8 * The description lattice supports the paradigm of query specification by iterative refinement, de scribed in [67] and <ref> [57] </ref>. * Data exploration involves asking very many queries, possibly by teams of people, over an extended period of time.
Reference: [58] <author> P. F. Patel-Schneider, </author> <title> "A four-valued semantics for terminological logics", </title> <booktitle> Artificial Intelligence 38 (1989) 319-351. </booktitle>
Reference-contexts: The difficulty faced by this approach is to describe to the user the incompleteness. As we have seen, operational definitions are relatively difficult for DLs. Other kinds of semantic specification techniques have been proposed for this purpose, including non-standard denotational semantics such as those in <ref> [58, 21] </ref>, or proof-theoretic axiomatizations, such as in [14, 15, 59]. * Providing an "escape-hatch" in the language. It is possible to introduce one or more constructors in the language whose semantics are "opaque" for subsumption reasoning, but can still be used 12 for recognizing individuals.
Reference: [59] <author> V. Royer, J. Quantz, </author> <title> "Deriving inference rules for terminological logics", </title> <booktitle> in Logics in AI, Proc. of JELIA'92, </booktitle> <editor> D. Pearce, G.Wegner (eds), </editor> <publisher> Springer Verlag, </publisher> <year> 1992, </year> <month> pp.84-105. </month>
Reference-contexts: As we have seen, operational definitions are relatively difficult for DLs. Other kinds of semantic specification techniques have been proposed for this purpose, including non-standard denotational semantics such as those in [58, 21], or proof-theoretic axiomatizations, such as in <ref> [14, 15, 59] </ref>. * Providing an "escape-hatch" in the language. It is possible to introduce one or more constructors in the language whose semantics are "opaque" for subsumption reasoning, but can still be used 12 for recognizing individuals.
Reference: [60] <author> K. Schild, </author> <title> "A correspondence theory for terminological logics | preliminary report", </title> <booktitle> Proc. </booktitle> <address> IJCAI'91, Sydney, Australia. </address>
Reference-contexts: STUDENT also specified that studNumber is a key, we could encode this as the additional description 5 CONCEPT CONSTRUCTORS ROLE CONSTRUCTORS COMPLEXITY and,all, same-as | Undecidable [61] ALCN R (and, or, not, some, at-least, at-most) role-and PSPACE [37, 36] and, not, all, some, or compose, role-or, inverse, trans, restrict,top-role EXP-TIME <ref> [60] </ref> and, all, at-most, at-least, same-as on attributes, fills, one-of with integers Polynomial [21] Table 2: Some subsumption complexity results at-most (1, compose (studNumber, inverse (studNumber))) which says that if we look for individuals that have the same student number as this one, we will find at most one (this particular <p> Some researchers <ref> [6, 60] </ref> feel that as long as the logic is decidable, it is reasonable to deliver to the users a system that reasons correctly with it.
Reference: [61] <author> M. Schmidt-Schauss, </author> <title> "Subsumption in KL-ONE is undecidable", </title> <booktitle> in Proceedings KR'89, </booktitle> <address> Toronto, Canada, </address> <month> May </month> <year> 1989, </year> <pages> 421-431. </pages>
Reference-contexts: If the declaration of class STUDENT also specified that studNumber is a key, we could encode this as the additional description 5 CONCEPT CONSTRUCTORS ROLE CONSTRUCTORS COMPLEXITY and,all, same-as | Undecidable <ref> [61] </ref> ALCN R (and, or, not, some, at-least, at-most) role-and PSPACE [37, 36] and, not, all, some, or compose, role-or, inverse, trans, restrict,top-role EXP-TIME [60] and, all, at-most, at-least, same-as on attributes, fills, one-of with integers Polynomial [21] Table 2: Some subsumption complexity results at-most (1, compose (studNumber, inverse (studNumber))) which
Reference: [62] <author> M. Schmidt-Schauss, and G. Smolka, </author> <title> "Attributive concept descriptions with complements", </title> <journal> Artificial Intelligence Journal, </journal> <volume> 48(1) pp.1-26, </volume> <year> 1991 </year>
Reference-contexts: In particular, the implementation of most "complete" reasoners | ones that find all the inferences sanctioned by the standard semantics | is based on such an approach. For example, kris uses a tableaux method with rewrite rules for deciding consistency, which is based on <ref> [62, 41] </ref>.
Reference: [63] <author> A. Sheth and J. Larson, </author> <title> "Federated Database systems for managing distributed, heterogeneous, and autonomous databases", </title> <journal> ACM Computing Surveys 22(3), </journal> <volume> pp.183-236, </volume> <year> 1990. </year>
Reference-contexts: In particular, given an existing taxonomy of views and primitive classes, a classifier program can be used to find the least subsumer (s) and most general sub-sumees of any new view. Federated databases <ref> [63] </ref>, and more generally so-called "co-operative information systems", where information from several sources is made accessible to users, form a particularly active area of application for DLs [4, 30, 64, 13].
Reference: [64] <author> A. Sheth, S. Gala, and S. Navathe, </author> <title> "On automatic reasoning for schema integration", </title> <journal> Int. J. of Intelligent and Cooperative Information Systems, </journal> <volume> 2(1), </volume> <pages> pp. 23-50, </pages> <year> 1993. </year>
Reference-contexts: Federated databases [63], and more generally so-called "co-operative information systems", where information from several sources is made accessible to users, form a particularly active area of application for DLs <ref> [4, 30, 64, 13] </ref>. A key reason for this is that in order to make several pre-existing databases cooperate it is necessary to first express and relate their contents and semantics. As argued above, DLs provide a richly expressive medium for this task. <p> This information can then be used once again to detect incoherence and redundancy in the resulting system (or maybe just its description). One approach to federated databases is to integrate the schema of the participating databases. <ref> [64] </ref> provides an approach to schema integration which uses the candide DL as the common/canonical data model. Among others, a human is charged with the heuristic task of creating an attribute hierarchy showing the relationships between attributes appearing in the classes of the various schemata.
Reference: [65] <author> C-D Shum and R. Muntz, </author> <title> "Implicit representation of extensional answers", </title> <editor> in L. Ker-scheberg editor, </editor> <booktitle> Proc. Second Int. Conf. on Expert Database Systems, </booktitle> <publisher> Benjamin Cummings, </publisher> <year> 1989, </year> <month> p.497-522. </month>
Reference-contexts: In fact, this facility is useful not just when there is incomplete information, but also whenever we don't want to return lists, because they are too long for example. It has been argued (e.g., <ref> [65] </ref>) that in such situations it is appropriate to provide abstract answers. In the case of DL-based KBMS, this can be achieved by finding in the lattice of descriptions the least common subsumer [31] of the set of individuals' descriptions, which captures their commonalities.
Reference: [66] <author> G. Teege, </author> <title> "Making the difference: a subtraction operation for description logics",Proc. </title> <booktitle> Conf. on Principles of Knowledge Representation (KR'94), </booktitle> <address> Bonn, Germany, </address> <year> 1994, </year> <month> pp.540-550. </month>
Reference-contexts: For example, Figure 2 presents two descriptions, their greatest common subsumee (meet), least common subsumer (join), and the relative complement between the join in (c) and the first concept in (a), in a language having constructors fand,at-most,at-least,all,one-ofg. The interested reader may consult <ref> [31, 66] </ref> for conditions under which the semi-lattice is guaranteed to be a lattice and to have unique relative complements.
Reference: [67] <author> F. Tou, M. Williams, R. Fikes, A. Henderson, T. Malone, "RABBIT: </author> <title> An intelligent database assistant", </title> <booktitle> Proc. </booktitle> <address> AAAI'82. </address>
Reference-contexts: The answer to such a query would be a list of individuals that satisfies the conditions of the query | i.e., the ones recognized by the query description. Papers such as <ref> [67, 57, 8, 52] </ref> and [27] have investigated the use of DLs as query languages. <p> The lattice of subsuming descriptions provides the obvious space to search for such generalizations, and therefore the system can provide a helping hand in this task, as illustrated in [3]. 8 * The description lattice supports the paradigm of query specification by iterative refinement, de scribed in <ref> [67] </ref> and [57]. * Data exploration involves asking very many queries, possibly by teams of people, over an extended period of time.
Reference: [68] <author> W. A. Woods and J. G. Schmolze, </author> <title> "The KL-ONE family," Computers and Mathematics with Applications 23(2-5), </title> <booktitle> Special Issue on Semantic Networks in Artificial Intelligence. </booktitle>
Reference-contexts: For readers conversant with Artificial Intelligence, DLs are descendants of the influential kl-one system [22, 23], and have been extensively studied under the name of "terminological logics". The features and history of these logics have been surveyed recently in papers such as <ref> [68, 48] </ref>. Therefore our aim is to provide for this audience a novel, systematic look at the various uses to which DLs are being put for information management | a view considerably broader than that usually assumed in Artificial Intelligence 3 . <p> This can be accomplished by adding an additional conjunct, built using concept constructor one-of, which takes as arguments an enumeration of values, and role constructor compose, which denotes role composition: all ( compose (taughtBy,rank) , one-of (AP,P)) Table 1 contains a fairly comprehensive list of domain-independent description constructors, from <ref> [68] </ref>, which were arrived at empirically, in efforts to express the meaning of natural language sentences and other Artificial Intelligence tasks. One can in fact view DLs as a logical notation where logical operators were chosen to facilitate the expression of frequently used conceptual structures, and related inferences.
Reference: [69] <author> W. A. Woods, </author> <title> "Understanding subsumption and taxonomy: a framework for progress", </title> <booktitle> in Principles of Semantic Networks: Explorations in the Representation of Knowledge, </booktitle> <publisher> John Sowa editor,Morgan-Kaufman 1991. </publisher>
Reference-contexts: The operation of classifying a given new description with respect to some set of previously encountered descriptions is in fact standard in all DL-reasoners, with various techniques for doing so surveyed in <ref> [48, 69, 7] </ref>. But we emphasize that such a set of classified descriptions forms just a finite sub-partial-order of the infinite lattice of description terms.
Reference: [70] <author> J. Wright, E. Weixelbaum, K. Brown, G. Veson-der, S. Palmer, J. Berman, and H. Moore, </author> <title> "A knowledge-based configurator that supports sales, engineering, and manufacturing at AT&T Network Systems", </title> <booktitle> Proc. Conf. Industrial Applications of AI(IAAI93) pp.183-193, </booktitle> <year> 1992. </year>
Reference-contexts: This supports, among others, the proper treatment of such traditionally difficult database issues as null values and view updates. This aspect of KBMS based on DLs may explain in part their success in problems dealing with configuration management <ref> [54, 70] </ref>: configurations are incomplete designs, which are slowly being built up, yet we want to find out about problems with them before everything is fully known. 4.3 Using descriptions in answers Traditionally, questions such as "Who teaches New-crs?" or "What is Johnny's age?" are answered by displaying some individual value <p> They have found applications in a variety of areas such as data management, linguistics [29], programming languages [2], configuration management <ref> [70, 54] </ref>, and knowledge-based software engineering [35]. DLs exploit their special-purpose constructors in order to provide solutions to such difficult problems as view updates and reasoning with incomplete information.
Reference: [71] <author> J. Yen, R. Neches, and R. MacGregor, "CLASP: </author> <title> integrating term subsumption systems and production systems", </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(1), </volume> <pages> pp. 25-32, </pages> <month> March, </month> <year> 1991. </year> <month> 16 </month>
Reference-contexts: Such rules were first mentioned in connection with the consul system [49], and have been heavily used in the loom system [47], as well as other recent systems such as <ref> [71] </ref> and classic, while their semantics has been clarified in [38] through the use of "epistemic operators" dealing with the "knowledge" of the system. <p> They are less expressive than standard production rules because their antecedent is often only a single concept (rather than a relationship between individuals) but because of their treatment of incomplete information, rules based on DLs provide other advantages, including <ref> [71] </ref>: * classification applied to the antecedent (or even the consequent) of rules can be used to organize them into a hierarchy; this means that the system can help the programmer find closely related rules | a frequent cause of errors in rule-based programming; * classification can also help implement the
References-found: 71

