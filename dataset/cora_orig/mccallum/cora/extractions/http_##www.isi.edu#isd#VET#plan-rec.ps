URL: http://www.isi.edu/isd/VET/plan-rec.ps
Refering-URL: http://www.isi.edu/isd/VET/vet-body.html
Root-URL: http://www.isi.edu
Email: johnson@isi.edu  
Phone: tel: +1 310 822-1511; fax: +1 310 822 0751  
Title: Plan Recognition in a Situational Context Next Generation of Plan Recognition Systems How much effort
Author: W. Lewis Johnson 
Note: In Working Notes of the 1995 IJCAI Workshop on The  How much information is required about the person's plan, and when must the information be available?  in which those actions are carried out?  
Web: WWW: http://www.isi.edu/isd/johnson.html  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292-6695  
Affiliation: USC Information Sciences Institute Computer Science Dept.  
Abstract: This paper argues that for domains where the learners interact with dynamic environments, the proper role of plan recognition is quite limited. The system must monitor the state of the environment as well as the learner's actions, and to some extent environment monitoring can take the place of plan recognition. Plan recognition effort is needed only at points where the tutoring system must interact with the student to provide assistance. It should not assume that each action is part of a premeditated, conscious plan. These considerations have led to the development of an approach to plan recognition called Situated Plan Attribution (SPA) which is being employed by our group in various interactive learning environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S.K. Card, T.P. Moran, and A. Newell. </author> <title> The Psychology of Human-Computer Interaction. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1983. </year>
Reference-contexts: Within each problem space, the problem solver applies operators until the goal state of the problem space is achieved, or until the goal is no longer relevant to the current situation. Other task modeling approaches such as GOMS <ref> [ 1 ] </ref> are easily mapped onto this framework. Task models are converted into plan networks by associating plans with individual problem spaces. * It is well suited for modeling goal-directed and reactive behavior in dynamic environments.
Reference: [2] <author> W.J. Clancey. </author> <title> Qualitative student models. </title> <journal> Ann. Rev. Comput. Sci., </journal> <volume> 1 </volume> <pages> 381-450, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction In most intelligent tutoring systems, plan recognition is performed by a student diagnosis module, that constructs a model of the student's current understanding of the subject matter [ 15 ] , and uses it to interpret the student's actions in solving a given problem <ref> [ 2 ] </ref> . The student model is often a detailed, executable model, which is able to reproduce the behavior exhibited by the student, and predict hidden mental states [ 16 ] .
Reference: [3] <author> A.T. Corbett, J.R. Anderson, and E.G. Patter-son. </author> <title> Student modeling and tutoring flexibility in the Lisp Intelligent Tutoring System. </title> <booktitle> In Intelligent Tutoring Systems: At the Crossroads of Artificial Intelligence and Education, </booktitle> <pages> pages 83-106. </pages> <publisher> Ablex, </publisher> <address> Norwood, N.J., </address> <year> 1990. </year>
Reference-contexts: In real-time tasks such as device monitoring and control the student's attention is directed at the task at hand, and interruptions from the tutor can be distracting. Even in non-real-time tasks such as programming students find constant interruptions from the tutor to be unwelcome <ref> [ 3 ] </ref> . There is little point in modeling student reasoning in detail in situations where interaction between tutor and student is inadvisable|the added knowledge about the student is not evident in the tutor's behavior. Furthermore, one must be careful about attribut ing mental states to a student.
Reference: [4] <author> R.W. Hill. </author> <title> Impasse-Driven Tutoring for Reactive Skill Acquisition. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <year> 1993. </year>
Reference-contexts: A detailed description of the problem domain, and of the tutoring system, is described elsewhere <ref> [ 6; 4 ] </ref> . The following is a summary based in part on these more detailed descriptions. The DSN is a worldwide system for navigating, tracking, and communicating with all of NASA's unmanned interplanetary spacecraft.
Reference: [5] <author> R.W. Hill and W.L. Johnson. </author> <title> Designing an intelligent tutoring system based on a reactive model of skill acquisition. </title> <booktitle> In Proceedings of the World Conference of Artificial Intelligence in Education, </booktitle> <pages> pages 273-281, </pages> <address> Edinburgh, Scotland, </address> <year> 1993. </year>
Reference-contexts: of operators thus is not programmed in, but varies depending upon the envi ronment state. * It incorporates a general learning mechanism called chunking which has proven useful in enabling agents to improve their performance over time, in particular agent faculties such as episodic memory, and in modeling skill acquisition <ref> [ 5 ] </ref> . Chunks are production rules that apply in situations similar to the one in which the chunk was originally learned. * Multiple capabilities can be readily integrated into a single system.
Reference: [6] <author> R.W. Hill and W.L. Johnson. </author> <title> Situated plan attribution. </title> <note> Accepted for publication in Journal of Artificial Intelligence in Education, </note> <year> 1995. </year>
Reference-contexts: A detailed description of the problem domain, and of the tutoring system, is described elsewhere <ref> [ 6; 4 ] </ref> . The following is a summary based in part on these more detailed descriptions. The DSN is a worldwide system for navigating, tracking, and communicating with all of NASA's unmanned interplanetary spacecraft. <p> These capabilities can be combined by interleaving execution in the corresponding problem spaces. Furthermore, chunking can combine knowledge from multiple problem spaces into single rules, meaning that the system's capabilities become progressively more integrated over time <ref> [ 6 ] </ref> . 5 Conclusion This paper describes the requirements for plan recognition in the context of simulation-based tutors, and argues that detailed plan recognition and interpretation is in general not required for such systems.
Reference: [7] <author> W.L. Johnson. </author> <title> Intention-Based Diagnosis of Novice Programming Errors. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference-contexts: A number of plan recognition systems have been developed that are intended to fit within such a framework (e.g., <ref> [ 7 ] </ref> ). Constructing detailed student models is in general quite difficult. The available information about student actions and intentions may be ambiguous and inadequate as a basis for inferring mental states.
Reference: [8] <author> W.L. Johnson. </author> <title> Agents that learn to explain themselves. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 1257-1263, </pages> <address> Seat-tle, WA, </address> <month> August </month> <year> 1994. </year> <booktitle> AAAI, </booktitle> <publisher> AAAI Press. </publisher>
Reference-contexts: The problems that occurred can then be reviewed with the student after the exercise is complete. Episodic memory and after-action review capabilities built into the pedagogical agents will be useful for this purpose <ref> [ 8 ] </ref> . The overall objective of this plan recognition method is to perform the minimal amount of processing necessary to provide appropriate tutorial assistance. Each component described above is necessary for the following reasons. Executing monitoring is required to order to detect when assistance is required.
Reference: [9] <author> W.L. Johnson. </author> <title> Pedagogical agents for virtual learning environments. </title> <booktitle> submitted to the International Conference on Computers and Education, </booktitle> <year> 1995. </year>
Reference-contexts: The computer-generated agents may be participating in the trainees' activities, may be performing unrelated activities, or may act as observers. A key objective of this research is to embody capabilities needed for tutoring in the form of the computer-generated figures, called pedagogical agents <ref> [ 9 ] </ref> . These capabilities include plan recognition capabilities, for which a situated plan attribution approach is being used. Agents monitor the students' actions, as well as the states of the objects in the virtual environment.
Reference: [10] <author> J.E. Laird, A. Newell, </author> <title> and P.S. Rosenbloom. Soar: An architecture for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 33 </volume> <pages> 1-64, </pages> <year> 1987. </year>
Reference-contexts: The plan recognizer can then wait until the student starts to leave a location, and then check to see whether the work at that that location is complete. Analysis of individual actions would then be necessary only when anomalous environment states are detected. 4 Implementation Architecture We use Soar <ref> [ 10 ] </ref> as the implementation base for our plan recognition systems. If has a number of advantageous features. * It supports hierarchical task modeling. Processing takes place in a hierarchy of problem spaces which is constructed dynamically during problem solving.
Reference: [11] <author> S. Ohlsson. </author> <title> Constraint-based student modeling. </title> <journal> Journal of Artificial Intelligence in Education, </journal> <volume> 3(4) </volume> <pages> 429-448, </pages> <year> 1993. </year>
Reference-contexts: The available information about student actions and intentions may be ambiguous and inadequate as a basis for inferring mental states. The student's performance on one exercise may not be consistent with performance on previous exercises, making it difficult to draw generalizations about the student's knowledge <ref> [ 11 ] </ref> . But even if it were possible to construct such student models, it is arguable how useful they are, and whether the assumptions upon which they are based are valid.
Reference: [12] <editor> M.C Polson and J.J. (eds.) Richardson. </editor> <booktitle> Foundations of Intelligent Tutoring Systems. </booktitle> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1988. </year>
Reference-contexts: The student diagnosis module is typically viewed as one of several modules comprising the tutoring system, where other modules include a model of expert performance, a model of pedagogical expertise, an environment model, and a user interface <ref> [ 12 ] </ref> . A number of plan recognition systems have been developed that are intended to fit within such a framework (e.g., [ 7 ] ). Constructing detailed student models is in general quite difficult.
Reference: [13] <author> J.A. </author> <title> Self. Bypassing the intractable problem of student modeling. </title> <booktitle> In Intelligent Tutoring Systems: At the Crossroads of Artificial Intelligence and Education, </booktitle> <pages> pages 107-123. </pages> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1990. </year>
Reference-contexts: Detailed models of student mental states are not needed, and therefore are not constructed. The approach is consistent with the position taken by Self, who argues that student modeling effort should focus on obtaining the information that the tutoring system really requires <ref> [ 13 ] </ref> . 2 Application Projects The author has been involved in two projects to build tutors employing situated plan attribution techniques. The first, REACT, is a simulation-based tutoring system for device monitoring control.
Reference: [14] <author> L.A. Suchman. </author> <title> Plans and situated actions: the problem of human-machine communication. </title> <publisher> Cam-bridge University Press, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Furthermore, one must be careful about attribut ing mental states to a student. Suchman and others have argued against the view of cognition as execution of detailed plans <ref> [ 14 ] </ref> . Just because a student's actions conform with a known plan does not imply that the student is aware of the plan or is mentally executing the plan.
Reference: [15] <author> K. VanLehn. </author> <title> Student modeling. </title> <editor> In M.C. Polson and J.J. Richardson, editors, </editor> <booktitle> Foundations of Intelligent Tutoring Systems, </booktitle> <pages> pages 55-78. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction In most intelligent tutoring systems, plan recognition is performed by a student diagnosis module, that constructs a model of the student's current understanding of the subject matter <ref> [ 15 ] </ref> , and uses it to interpret the student's actions in solving a given problem [ 2 ] . The student model is often a detailed, executable model, which is able to reproduce the behavior exhibited by the student, and predict hidden mental states [ 16 ] .
Reference: [16] <author> B. Ward. ET-Soar: </author> <title> Toward an ITS for theory--based represenations. </title> <type> PhD thesis, </type> <institution> Carnegie Mel-long University School of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: The student model is often a detailed, executable model, which is able to reproduce the behavior exhibited by the student, and predict hidden mental states <ref> [ 16 ] </ref> . The student diagnosis module is typically viewed as one of several modules comprising the tutoring system, where other modules include a model of expert performance, a model of pedagogical expertise, an environment model, and a user interface [ 12 ] .
References-found: 16

