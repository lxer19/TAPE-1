URL: http://www.cs.ucsb.edu/~vigna/pub/thesis.ps.gz
Refering-URL: http://www.cs.ucsb.edu/~vigna/listpub.html
Root-URL: http://www.cs.ucsb.edu
Title: The Design and Implementation of SPADE-1 2.0  
Author: Relatore: Prof. Alfonso Fuggetta Correlatori: Prof. Carlo Ghezzi Dott. Sergio Bandinelli Antonio Carzaniga matr. n ffi Giovanni Vigna matr. n ffi Anno Accademico - 
Degree: Tesi di Laurea di:  
Affiliation: POLITECNICO DI MILANO Facolt a di Ingegneria Dipartimento di Elettronica e Informazione  
Abstract-found: 0
Intro-found: 1
Reference: [ABGM92] <author> P. Armenise, S. Bandinelli, C. Ghezzi, and A. Morzenti. </author> <title> Software Process Representation Languages: Survey and Assessment. </title> <booktitle> In Proceedings of the 4th International Conference on Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 455-462, </pages> <address> Capri (Italy), June 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Despite its fundamental role, little attention is paid to the assessment and improvement of the software process. The process is often left implicit, ambiguous or incomplete <ref> [ABGM92] </ref>. Many efforts in the software process research field aim at providing formalisms to model the process. An explicit process representation provides a general framework in which persons can cooperate and communicate effectively, improving the process and therefore the software product quality. The process representation includes technical and management activities. <p> The concurrency and synchronization issues are straightforward in Chapter 1: Introduction 4 such models. Other studies concerned active database extensions [BEM91], abstract specification formalisms, including state charts [Kel91] and attribute grammars [SIK93]. An introduction and comparison of existing approaches can be found in <ref> [ABGM92] </ref>. 1.3 Contribution of this thesis First experiences and feasibility studies based on database technologies were carried out in 1991-1992 [Fer92]. In 1992-1993 a first prototype of the SPADE environment, called SPADE-1 1.0, was developed at CEFRIEL [BdPS93]. The prototype had several restrictions, regarding architectural and SLANG interpretation issues.
Reference: [AG94a] <author> Robert Allen and David Garlan. </author> <title> Beyond definition/use: Architectural interconnection. </title> <booktitle> In Proceedings of the Workshop on Interface Definition Languages, </booktitle> <address> Portland (OR), </address> <year> 1994. </year>
Reference-contexts: In this presentation a top-down approach is adopted. First, a very high-level description is presented, then, each component is expanded in a detailed structure. The description of the SPADE-1 architecture is given by means of two classes of entities: components and connectors <ref> [GS93, AG94b, AG94a] </ref>. Components are computational modules or repositories of data. A component has a state and an interface, which is a set of connection points. The interface specifies the actions the component is able to perform and the way other entities access its status.
Reference: [AG94b] <author> Robert Allen and David Garlan. </author> <title> Formalizing Architectural Connection. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <address> Sorrento (Italy), </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In this presentation a top-down approach is adopted. First, a very high-level description is presented, then, each component is expanded in a detailed structure. The description of the SPADE-1 architecture is given by means of two classes of entities: components and connectors <ref> [GS93, AG94b, AG94a] </ref>. Components are computational modules or repositories of data. A component has a state and an interface, which is a set of connection points. The interface specifies the actions the component is able to perform and the way other entities access its status.
Reference: [BBFL93] <author> S. Bandinelli, L. Baresi, A. Fuggetta, and L. Lavazza. </author> <title> Requirements and Early Experiences in the Implementation of the SPADE Repository. </title> <booktitle> In 8th International Workshop on Software Processes, </booktitle> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: An activity encapsulates a set of logically related process operations and it is described by a net that may include invocations to other (sub)activities. Process data (documents, code, plans, test cases, etc.), are represented by tokens which are structured in an object-oriented fashion <ref> [BBFL93] </ref>. Places are viewed as distributed persistent object containers. Places are typed, and every place may contain only tokens of its associated type. Transitions represent events. A transition fires when its guard (a boolean expression) is satisfied by tokens in its input places.
Reference: [BBFL94] <author> S. Bandinelli, M. Braga, A. Fuggetta, and L. </author> <title> Lavazza. </title> <booktitle> The Architecture of the SPADE-1 Process-Centered SEE. In 3rd European Workshop on Software Process Technology, </booktitle> <address> Grenoble (France), </address> <month> February </month> <year> 1994. </year>
Reference-contexts: The PSEE also keeps all data of the process in a persistent repository. The concurrent access to these data must be regulated by the process model. 1 Chapter 1: Introduction 2 1.1 SPADE The SPADE project aims at developing an environment for Software Process Analysis, Design, and Enactment <ref> [BFGG92, BBFL94] </ref>. SPADE defines and implements a formal process modeling language and an integrated process-centered environment. The process language of the SPADE environment is called SLANG (S PADE LANG ua-ge) [tea93]. SLANG is based on a high-level Petri net formalism, called ER nets [GMMP91]. <p> Otherwise, the type of the result is Message. In all the cases, the result is stored in the variable extResult, whose type has to be declared according to the expected result type. Chapter 4 SPADE-1 2.0 architecture This chapter presents the architectural design of the SPADE-1 2.0 environment <ref> [BBFL94] </ref>. In this presentation a top-down approach is adopted. First, a very high-level description is presented, then, each component is expanded in a detailed structure. The description of the SPADE-1 architecture is given by means of two classes of entities: components and connectors [GS93, AG94b, AG94a].
Reference: [BdPS93] <author> P. Battiston, G. Galli de' Paratesi, and M. Signori. L'architettura di SPADE-1, un Ambiente di Supporto al Processo di Sviluppo del Software. </author> <type> Technical report, </type> <institution> CEFRIEL, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: An introduction and comparison of existing approaches can be found in [ABGM92]. 1.3 Contribution of this thesis First experiences and feasibility studies based on database technologies were carried out in 1991-1992 [Fer92]. In 1992-1993 a first prototype of the SPADE environment, called SPADE-1 1.0, was developed at CEFRIEL <ref> [BdPS93] </ref>. The prototype had several restrictions, regarding architectural and SLANG interpretation issues. In the same period, the SLANG language was refined [Lip93] and used in modeling examples of industrial processes [Pic93]. Tool integration problems were analyzed in [Par94]. In 1993-1994 the work on SPADE has evolved along three main threads.
Reference: [BEM91] <author> N. Belkhatir, J. Estublier, and W.L. Melo. </author> <title> ADELE 2 An Approach to Software Development Coordination. </title> <editor> In Alfonso Fuggetta, Reidar Conradi, and Vincenzo Ambriola, editors, </editor> <booktitle> Proceedings of the First European Workshop on Software Process Modeling, </booktitle> <address> Milano (Italy), </address> <month> May </month> <year> 1991. </year> <institution> AICA-Italian National Association for Computer Science. </institution> <type> 121 BIBLIOGRAPHY 122 </type>
Reference-contexts: Procedures are described by transition nets, a data-flow notation similar to Petri nets. Although Petri nets extensions are different from each other, they all deliver readable descriptions. The concurrency and synchronization issues are straightforward in Chapter 1: Introduction 4 such models. Other studies concerned active database extensions <ref> [BEM91] </ref>, abstract specification formalisms, including state charts [Kel91] and attribute grammars [SIK93]. An introduction and comparison of existing approaches can be found in [ABGM92]. 1.3 Contribution of this thesis First experiences and feasibility studies based on database technologies were carried out in 1991-1992 [Fer92].
Reference: [BF93] <author> S. Bandinelli and A. Fuggetta. </author> <title> Computational Reflection in Software Process Modeling: The SLANG Approach. </title> <booktitle> In Proceedings of the 15th International Conference on Software engineering, </booktitle> <address> Baltimore, (USA), </address> <month> May </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: SLANG process models are dynamic entities. They can undergo changes. Moreover, SLANG has reflective features (activities are themselves data of the model), that make it possible to describe SLANG process evolution by means of SLANG models <ref> [BF93] </ref>. The interaction with process agents is achieved using special transitions and places in the net. Process artifacts, including process models, are kept and maintained in an object-oriented database. SPADE-1 is an implementation of the SPADE concept.
Reference: [BFG93a] <author> S. Bandinelli, A. Fuggetta, and S. Grigolli. </author> <title> Process Modeling-in-the-large with SLANG. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process, </booktitle> <address> Berlin (Germany), </address> <month> February </month> <year> 1993. </year>
Reference-contexts: SLANG is based on a high-level Petri net formalism, called ER nets [GMMP91]. SLANG offers features for process modeling, enactment, and evolution [BFG93b]. One of the main concerns in designing SLANG is to offer expressive and powerful constructs that can be used for process modeling in-the-large <ref> [BFG93a] </ref>. A SLANG process model can be hierarchically structured as a set of activities. An activity encapsulates a set of logically related process operations and it is described by a net that may include invocations to other (sub)activities.
Reference: [BFG93b] <author> Sergio Bandinelli, Alfonso Fuggetta, and Carlo Ghezzi. </author> <title> Process Model Evolution in the SPADE Environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> 19(12) 1128-1144, December 1993. 
Reference-contexts: The process language of the SPADE environment is called SLANG (S PADE LANG ua-ge) [tea93]. SLANG is based on a high-level Petri net formalism, called ER nets [GMMP91]. SLANG offers features for process modeling, enactment, and evolution <ref> [BFG93b] </ref>. One of the main concerns in designing SLANG is to offer expressive and powerful constructs that can be used for process modeling in-the-large [BFG93a]. A SLANG process model can be hierarchically structured as a set of activities.
Reference: [BFGG92] <author> S. Bandinelli, A. Fuggetta, C. Ghezzi, and S. Grigolli. </author> <title> Process Enactment in SPADE. </title> <booktitle> In Proceedings of the Second European Workshop on Software Process Technology, </booktitle> <address> Trondheim (Norway), </address> <month> September </month> <year> 1992. </year> <note> Springer-Verlag. </note>
Reference-contexts: The PSEE also keeps all data of the process in a persistent repository. The concurrent access to these data must be regulated by the process model. 1 Chapter 1: Introduction 2 1.1 SPADE The SPADE project aims at developing an environment for Software Process Analysis, Design, and Enactment <ref> [BFGG92, BBFL94] </ref>. SPADE defines and implements a formal process modeling language and an integrated process-centered environment. The process language of the SPADE environment is called SLANG (S PADE LANG ua-ge) [tea93]. SLANG is based on a high-level Petri net formalism, called ER nets [GMMP91].
Reference: [BK91] <author> N. Barghouti and G. Kaiser. </author> <title> Scaling up rule-based software development environments. </title> <editor> In Axel van Lamsweerde and Alfonso Fuggetta, editors, </editor> <booktitle> Proceedings of ESEC '91-Third European Software Engineering Conference, volume 550 of Lecture Notes on Computer Science, </booktitle> <address> Milano (Italy), </address> <month> October </month> <year> 1991. </year> <note> Springer-Verlag. </note>
Reference-contexts: The process can be modeled as a procedural program. The use of functional languages can also emphasize the hierarchical relationships among activities. However, in these process definitions, it is difficult to express concurrency and non-determinism. Others adopt the opposite approach. In particular, rule based systems <ref> [PS92, BK91] </ref> do not define the sequence of actions. The process consists of a set of goals and some rules and constraints. Rules represent actions that require some pre-conditions, the execution of a rule asserts new facts (post-conditions).
Reference: [Car94] <author> Antonio Carzaniga. </author> <title> The SLANG Interpreter. </title> <type> Technical report, </type> <institution> CEFRIEL, </institution> <year> 1994. </year>
Reference-contexts: Process model enactment is accomplished through the application of the SLANG Interpreter algorithm to active copies, which are instances of activity definitions <ref> [Car94] </ref>. Multiple SLANG Interpreter instances are concurrently executed within each Process Engine. The Process Engine Manager coordinates the Process Engines and audits the environment [VZ93]. The SPADE Manager is the front-end towards the SPADE-1 system administrator.
Reference: [CPV94] <author> Antonio Carzaniga, Gian Pietro Picco, and Giovanni Vigna. </author> <title> Designing and Implementing Inter-Client Communication in the O 2 Object Oriented Database Management System. </title> <booktitle> In Proceedings of the AICA ISOOMS, </booktitle> <month> September </month> <year> 1994. </year> <note> (to appear). </note>
Reference-contexts: The graphic appearance of a connectors ruled by the SCI protocol is shown in figure 4.6. O 2 Socket : O 2 sockets are intended to be a simple and flexible mechanism to exchange complex data within the O 2 data base <ref> [PV93, CPV94] </ref>. The idea is to communicate via two objects pipeline, with a non-blocking rendez vous communication setup. This connector links a Client to a Server. The asymmetric appearance of the connector highlights the different roles of the connected modules. The communication protocol consists in: 1.
Reference: [Deu91] <author> O. </author> <title> Deux. The O 2 System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10), </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: The PEE includes facilities to execute a SLANG specification. SLANG activities are concurrently interpreted by SLANG Interpreters. Process artifacts (including the process model itself) are stored and managed using the O 2 OODBMS <ref> [Deu91] </ref>. The UIE is responsible for performing the interaction with users through tools in the environment. The UIE is viewed as a set of service-based tools which provide a programmatic interface. Entities in the PEE can request services to tools in the UIE. <p> Sections 5.3 and 5.4 describe the Process Engine Manager and the Process Engines, respectively. Section 5.5 outlines the SLANG Interpreter. Section 5.6 shows the PEE architecture at work. Section 5.7 describes auditing messages. Section 5.8 is about PEE configuration issues. 5.1 O 2 OODBMS O 2 [O292], <ref> [Deu91] </ref> is a distributed Object-Oriented Data Base Management System, based on a client-server architecture. The logical structure of an O 2 data base is bound to a schema, i.e., a collection of names and definitions of classes, types, applications, objects and values.
Reference: [Dig91a] <institution> Digital Equipment Corporation, Maynard, Massachusetts. </institution> <note> DEC FUSE EnCASE Manual, December 1991. Version 1.1. </note>
Reference-contexts: Currently, a bridge for the DEC FUSE software development environment has been developed. The FUSE bridge, called XFUEB (X FUSE User Environment Bridge), allows the PEE to interact directly with tools integrated in FUSE <ref> [Dig91a] </ref>. Integration of new tools in FUSE requires little effort and message dispatching is completly trasparent to the tool developer. Integration in the SPADE-1 environment allows interaction between tools belonging to different instances of FUSE. For example, suppose user Antonio has to supervise an important document before Giovanni reads it.
Reference: [Dig91b] <institution> Digital Equipment Corporation, Maynard, Massachusetts. </institution> <note> DEC FUSE Handbook, December 1991. Version 1.1. </note>
Reference-contexts: Service-based tools export a set of services directly accessible by the process model through a programmatic interface. DEC FUSE (DEC Friendly Unified Software Environment) is an integrated tool environment for software development <ref> [Dig91b] </ref>. DEC FUSE offers a set of integrated service-based tools. SPADE-1 provides a set of simple elementary mechanisms that can be combined to obtain the desired level of integration. Both the control dimension and the data dimension of integration are tackled. <p> Possible candidates to integration in the SPADE-1 2.0 environment are: * Steven Reiss' FIELD environment [Rei90]. * Hewlett-Packard SoftBench [Ger90]. * Sun Microsystems ToolTalk [Sun91]. * DEC FUSE <ref> [Dig91b] </ref>. The above listed SDEs are based on the message passing approach, i.e., tools in the SDE communicate by passing messages informing other tools of their actions, and requesting services from other tools.
Reference: [Fer92] <institution> Fabrizio Ferrandina. Uso di Basi di Dati ad Oggetti come Supporto ad un Ambiente per la Modellizzazione dei Processi di Produzione del Software, 1992. Politecnico di Milano. </institution> <address> BIBLIOGRAPHY 123 </address>
Reference-contexts: Other studies concerned active database extensions [BEM91], abstract specification formalisms, including state charts [Kel91] and attribute grammars [SIK93]. An introduction and comparison of existing approaches can be found in [ABGM92]. 1.3 Contribution of this thesis First experiences and feasibility studies based on database technologies were carried out in 1991-1992 <ref> [Fer92] </ref>. In 1992-1993 a first prototype of the SPADE environment, called SPADE-1 1.0, was developed at CEFRIEL [BdPS93]. The prototype had several restrictions, regarding architectural and SLANG interpretation issues. In the same period, the SLANG language was refined [Lip93] and used in modeling examples of industrial processes [Pic93].
Reference: [Fer93] <author> C. Fernstrom. </author> <title> PROCESS WEAVER: Adding Process Support to UNIX. </title> <booktitle> In Proceedings of the 2nd International Conference on the Software Process, </booktitle> <address> Berlin (Germany), </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Thus, it is difficult to understand the whole process model. Moreover, concurrency is not an explicit part of the model. Several process modeling efforts have yielded languages derived from Petri nets. FUN-SOFT nets [Gru91] are based on PrT nets, a class of high-level Petri nets. PROCESS WEAVER <ref> [Fer93] </ref>, developed by Cap Gemini Innovation in the context of the Eureka Software Factory project, provides a set of tools to add process support to UNIX-based environments. In PROCESS WEAVER a process is described as a hierarchy of activity types.
Reference: [Ger90] <author> C. Gerety. </author> <title> HP SoftBench: a new generation of Software Development Tools. </title> <journal> HP journal, </journal> <month> June </month> <year> 1990. </year>
Reference-contexts: Possible candidates to integration in the SPADE-1 2.0 environment are: * Steven Reiss' FIELD environment [Rei90]. * Hewlett-Packard SoftBench <ref> [Ger90] </ref>. * Sun Microsystems ToolTalk [Sun91]. * DEC FUSE [Dig91b]. The above listed SDEs are based on the message passing approach, i.e., tools in the SDE communicate by passing messages informing other tools of their actions, and requesting services from other tools.
Reference: [GJ82] <author> Carlo Ghezzi and Mehdi Jazayeri. </author> <title> Programming Language Concepts. </title> <publisher> John Wiley & Sons, </publisher> <year> 1982. </year>
Reference-contexts: These components and connectors are well-known and commonly used elements. They are abstraction provided by modern programming languages <ref> [GJ82] </ref>, as well as facilities and mechanisms supplied by existing operating systems, in particular Unix. Chapter 4: SPADE-1 2.0 architecture 36 These elements are described from a dynamic viewpoint. I.e., we represent instances of components and connectors.
Reference: [GJM91] <author> Carlo Ghezzi, Mehdi Jazayeri, and Dino Mandrioli. </author> <title> Fundamentals of Software Engineering. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs (NJ), </address> <year> 1991. </year>
Reference-contexts: An explicit process representation provides a general framework in which persons can cooperate and communicate effectively, improving the process and therefore the software product quality. The process representation includes technical and management activities. Both are needed to produce quality products in a predictable time with limited resources <ref> [GJM91] </ref>. In order to model a software process, an adequate notation is required. If this notation is based on formal grounds, it is possible to analyze and verify the process, using rigorous reasoning.
Reference: [GMMP91] <author> C. Ghezzi, D. Mandrioli, S. Morasca, and M. Pezze. </author> <title> A Unified High-level Petri Net Formalism for Time-critical Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1991. </year>
Reference-contexts: SPADE defines and implements a formal process modeling language and an integrated process-centered environment. The process language of the SPADE environment is called SLANG (S PADE LANG ua-ge) [tea93]. SLANG is based on a high-level Petri net formalism, called ER nets <ref> [GMMP91] </ref>. SLANG offers features for process modeling, enactment, and evolution [BFG93b]. One of the main concerns in designing SLANG is to offer expressive and powerful constructs that can be used for process modeling in-the-large [BFG93a]. A SLANG process model can be hierarchically structured as a set of activities. <p> And these are time consuming tasks. Chapter 3 SLANG language SLANG (Spade LANGuage) is the Process Modeling Language (PML) of the SPADE-1 environment. It has been designed to formally describe software processes. SLANG is based on a high-level Petri net formalism called ER nets <ref> [GMMP91] </ref>. The process modeler is provided with a set of process-oriented constructs, built on top of this formalism. SLANG features can be summarized as follows: * Process models can be structured in a modular way using the activity construct. <p> SLANG process model are translated into Kernel SLANG and then executed. Kernel SLANG, for example, does not support activity invocations. The semantics of Kernel SLANG is given formally in terms of a formal Petri net model, called ER nets <ref> [GMMP91] </ref>. 3.4 Activity definition Each activity corresponds to a logical work unit. The activity definition specifies the starting events, the ending events, and other relevant events of the activity. Petri net Chapter 3: SLANG language 17 transitions represent events, while places behave as data (token) containers.
Reference: [gro93] <author> The CEFRIEL group. </author> <title> Functional Requirements for the SPADE-1 Basic Toolset. </title> <type> Technical Report RT930XX, </type> <institution> CEFRIEL, Via Emanueli, 15 - 20126 Milano (Italy), </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: The tools receiving such signals can decide if the other tool actions require that they take any actions themselves. Following the control integration approach, the SPADE-1 User Interaction Environment includes a collection of service-based tools, each one exporting some services <ref> [gro93] </ref>. In the SPADE-1 environment, service-based tools do not directly exchange messages with each other. They are completely submitted to the process model commands. In this perspective, the process model is a privileged service client and the only tool controller.
Reference: [Gru91] <author> V. Gruhn. </author> <title> Validation and Verification of Software Process Models. </title> <type> PhD thesis, </type> <institution> University of Dortmund, </institution> <year> 1991. </year>
Reference-contexts: In this view, it is difficult to track down the execution threads. Thus, it is difficult to understand the whole process model. Moreover, concurrency is not an explicit part of the model. Several process modeling efforts have yielded languages derived from Petri nets. FUN-SOFT nets <ref> [Gru91] </ref> are based on PrT nets, a class of high-level Petri nets. PROCESS WEAVER [Fer93], developed by Cap Gemini Innovation in the context of the Eureka Software Factory project, provides a set of tools to add process support to UNIX-based environments.
Reference: [GS93] <author> David Garlan and Mary Shaw. </author> <title> An introduction to software architecture. </title> <editor> In V. Ambriola and G. Tortora, editors, </editor> <booktitle> Advances in Software Engineering and Knowledge Engineering, volume I. </booktitle> <publisher> World Scientific Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: In this presentation a top-down approach is adopted. First, a very high-level description is presented, then, each component is expanded in a detailed structure. The description of the SPADE-1 architecture is given by means of two classes of entities: components and connectors <ref> [GS93, AG94b, AG94a] </ref>. Components are computational modules or repositories of data. A component has a state and an interface, which is a set of connection points. The interface specifies the actions the component is able to perform and the way other entities access its status.
Reference: [GZ94] <institution> Giorgio Girelli and Edoardo Ziliani. Un insieme di strumenti avanzati integrati in un ambiente centrato sul processo: il caso di SPADE-1. Tesi di laurea, Politecnico di Milano, Dipartimento di Elettronica ed Informazione, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: Tool integration problems were analyzed in [Par94]. In 1993-1994 the work on SPADE has evolved along three main threads. One thread focused on the development of tools to be integrated in the SPADE-1 environment <ref> [GZ94] </ref>. Another thread continued the experience with industrial processes [Mas93]. Our work concentrated on the analysis of the original SPADE-1 concepts and general requirements, in order to improve and extend the environment.
Reference: [Hel91] <author> Dan Heller. </author> <title> Motif Programming Manual. </title> <publisher> O'Reilly & Associates, Inc, </publisher> <year> 1991. </year>
Reference-contexts: Objects and values not bound to a persistency root are automatically garbage-collected at the end of a transaction. 5.2 SPADE Manager The SPADE Manager is the Unix process which actually enters the SPADE-1 environment. The SPADE Manager presents to the SPADE-1 system administrator a Motif <ref> [Hel91] </ref> graphic interface, from which it is possible to start and stop process enactment (see fig. 5.1). A window presents diagnostic messages about system startup. SPADE Manager behavior can be customized using a configuration file (see 5.8).
Reference: [HSO90] <author> D. Heimbigner, S. Sutton, and L. Osterweil. </author> <title> Managing change in process-centered environments. </title> <booktitle> In Proceedings of 4th ACM/SIGSOFT Symposium on Software Development Environments, </booktitle> <month> December </month> <year> 1990. </year> <journal> In ACM SIGPLAN Notices. </journal>
Reference-contexts: A number of different works concerning both process modeling and model execution have been presented. We can classify these projects according to the formalisms underlying the process description. One approach uses programming languages such as APPL/A <ref> [HSO90] </ref>. This formalism allows a precise description of the "control flow". The process can be modeled as a procedural program. The use of functional languages can also emphasize the hierarchical relationships among activities. However, in these process definitions, it is difficult to express concurrency and non-determinism.
Reference: [ISO91] <author> ISO 9000. </author> <title> Quality Management and Quality Assurance standards. ISO-International Organization for Standardization, first edition, 1991. BIBLIOGRAPHY 124 </title>
Reference-contexts: Introduction A software product is a complete set of computer programs, procedures and associated documentation and data designated for delivery to a user <ref> [ISO91] </ref>. Software products are the result of cooperative processes, involving several persons, in which a series of software engineering activities are carried out with the help of various software tools.
Reference: [Kel91] <author> M. Kellner. </author> <title> Software Process Modeling Support for Management Planning and Control. </title> <booktitle> In Proceedings of the 1st. International Conference on the Software Process, </booktitle> <address> Redondo Beach CA (USA), </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Although Petri nets extensions are different from each other, they all deliver readable descriptions. The concurrency and synchronization issues are straightforward in Chapter 1: Introduction 4 such models. Other studies concerned active database extensions [BEM91], abstract specification formalisms, including state charts <ref> [Kel91] </ref> and attribute grammars [SIK93]. An introduction and comparison of existing approaches can be found in [ABGM92]. 1.3 Contribution of this thesis First experiences and feasibility studies based on database technologies were carried out in 1991-1992 [Fer92].
Reference: [Lip93] <institution> Patrizia Lippi. Definizione del linguaggio SLANG per la specifica dei processi software. Tesi di laurea, Politecnico di Milano, Dipartimento di Elettronica ed Informazione, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: In 1992-1993 a first prototype of the SPADE environment, called SPADE-1 1.0, was developed at CEFRIEL [BdPS93]. The prototype had several restrictions, regarding architectural and SLANG interpretation issues. In the same period, the SLANG language was refined <ref> [Lip93] </ref> and used in modeling examples of industrial processes [Pic93]. Tool integration problems were analyzed in [Par94]. In 1993-1994 the work on SPADE has evolved along three main threads. One thread focused on the development of tools to be integrated in the SPADE-1 environment [GZ94].
Reference: [Mas93] <author> Beppe De Mastro. </author> <title> A SLANG Model for a Software Product Review Process. </title> <type> Technical report, </type> <institution> CEFRIEL, </institution> <year> 1993. </year>
Reference-contexts: Tool integration problems were analyzed in [Par94]. In 1993-1994 the work on SPADE has evolved along three main threads. One thread focused on the development of tools to be integrated in the SPADE-1 environment [GZ94]. Another thread continued the experience with industrial processes <ref> [Mas93] </ref>. Our work concentrated on the analysis of the original SPADE-1 concepts and general requirements, in order to improve and extend the environment. In particular, we focused on re-designing the SPADE-1 architecture, we added integration facilities and reformulated and enriched the SLANG language definition.
Reference: [O292] <author> O2. </author> <title> The O2 User Manual. </title> <institution> O2 Technology, </institution> <year> 1992. </year>
Reference-contexts: Multiple inheritance is supported, but it may generate name clashes when methods with the same name are inherited through different inheritance paths. In general, these problems are solved by renaming the conflicting methods. For a detailed discussion of these issues, the reader may refer to <ref> [O292] </ref>. 3.2.1 Tokens and Objects In SLANG, process model activities are described using high-level Petri nets. Basically, Petri nets have places, representing data containers, transitions, representing events, and arcs, connecting transitions to places and places to transitions. Process data are represented in Petri nets by tokens. <p> It provides all the standard control flow instructions and all the operators and expressions of C. In addition to this, it comes with some operators to access complex objects. (for a detailed specification of the O 2 C language, refer to <ref> [O292] </ref>). In the action, input variables are initially bound to the enabling tuple, each variable refers to the token or the set of token extracted from the corresponding place. This initial value may be changed during action execution. In any case, these variables assignments are lost when the action terminates. <p> Sections 5.3 and 5.4 describe the Process Engine Manager and the Process Engines, respectively. Section 5.5 outlines the SLANG Interpreter. Section 5.6 shows the PEE architecture at work. Section 5.7 describes auditing messages. Section 5.8 is about PEE configuration issues. 5.1 O 2 OODBMS O 2 <ref> [O292] </ref>, [Deu91] is a distributed Object-Oriented Data Base Management System, based on a client-server architecture. The logical structure of an O 2 data base is bound to a schema, i.e., a collection of names and definitions of classes, types, applications, objects and values.
Reference: [Par94] <institution> Alessandro Parimbelli. L'integrazione di strumenti in un ambiente centrato sul processo: l'esperienza di SPADE. Tesi di laurea, Politecnico di Milano, Dipartimento di Elettronica ed Informazione, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: The prototype had several restrictions, regarding architectural and SLANG interpretation issues. In the same period, the SLANG language was refined [Lip93] and used in modeling examples of industrial processes [Pic93]. Tool integration problems were analyzed in <ref> [Par94] </ref>. In 1993-1994 the work on SPADE has evolved along three main threads. One thread focused on the development of tools to be integrated in the SPADE-1 environment [GZ94]. Another thread continued the experience with industrial processes [Mas93].
Reference: [Pic93] <author> G. Picco. </author> <title> Modeling a real software process with slang. Internal Report RI93059, CEFRIEL, Via Emanueli, </title> <address> 15 - 20126 Milano (Italy), </address> <month> June </month> <year> 1993. </year>
Reference-contexts: In 1992-1993 a first prototype of the SPADE environment, called SPADE-1 1.0, was developed at CEFRIEL [BdPS93]. The prototype had several restrictions, regarding architectural and SLANG interpretation issues. In the same period, the SLANG language was refined [Lip93] and used in modeling examples of industrial processes <ref> [Pic93] </ref>. Tool integration problems were analyzed in [Par94]. In 1993-1994 the work on SPADE has evolved along three main threads. One thread focused on the development of tools to be integrated in the SPADE-1 environment [GZ94]. Another thread continued the experience with industrial processes [Mas93].
Reference: [PS92] <author> B. Peuschel and W. Schafer. </author> <title> Concepts and Implementation of a Rule-based Process Engine. </title> <booktitle> In Proceedings of the 14th International Conference on Software Engineering, </booktitle> <pages> pages 262-279, </pages> <address> Melbourne (Australia), </address> <month> May </month> <year> 1992. </year> <month> ACM-IEEE. </month>
Reference-contexts: The process can be modeled as a procedural program. The use of functional languages can also emphasize the hierarchical relationships among activities. However, in these process definitions, it is difficult to express concurrency and non-determinism. Others adopt the opposite approach. In particular, rule based systems <ref> [PS92, BK91] </ref> do not define the sequence of actions. The process consists of a set of goals and some rules and constraints. Rules represent actions that require some pre-conditions, the execution of a rule asserts new facts (post-conditions).
Reference: [PV93] <author> Gianpietro Picco and Giovanni Vigna. </author> <note> The SPADE Way to Inter-Client Communications in &lt; O 2 . Technical report, CEFRIEL, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: The graphic appearance of a connectors ruled by the SCI protocol is shown in figure 4.6. O 2 Socket : O 2 sockets are intended to be a simple and flexible mechanism to exchange complex data within the O 2 data base <ref> [PV93, CPV94] </ref>. The idea is to communicate via two objects pipeline, with a non-blocking rendez vous communication setup. This connector links a Client to a Server. The asymmetric appearance of the connector highlights the different roles of the connected modules. The communication protocol consists in: 1.
Reference: [Rei90] <author> S. Reiss. </author> <title> Connecting Tools using Message Passing in the FIELD Program Development Environment. </title> <journal> IEEE Software, </journal> <pages> pages 57-67, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Management of structured message data is trasparent to the user. 8.5 Integration of SDEs based on message passing It is possible to integrate Software Development Environments (SDE) based on message passing into SPADE-1 2.0. Possible candidates to integration in the SPADE-1 2.0 environment are: * Steven Reiss' FIELD environment <ref> [Rei90] </ref>. * Hewlett-Packard SoftBench [Ger90]. * Sun Microsystems ToolTalk [Sun91]. * DEC FUSE [Dig91b]. The above listed SDEs are based on the message passing approach, i.e., tools in the SDE communicate by passing messages informing other tools of their actions, and requesting services from other tools.
Reference: [SIK93] <author> M. Suzuki, A. Iwai, and T. Katayama. </author> <title> A Formal Model of Re-execution in Software Process. </title> <booktitle> In Proceedings of the 2nd International Conference on the Software Process, </booktitle> <address> Berlin (Germany), </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Although Petri nets extensions are different from each other, they all deliver readable descriptions. The concurrency and synchronization issues are straightforward in Chapter 1: Introduction 4 such models. Other studies concerned active database extensions [BEM91], abstract specification formalisms, including state charts [Kel91] and attribute grammars <ref> [SIK93] </ref>. An introduction and comparison of existing approaches can be found in [ABGM92]. 1.3 Contribution of this thesis First experiences and feasibility studies based on database technologies were carried out in 1991-1992 [Fer92]. In 1992-1993 a first prototype of the SPADE environment, called SPADE-1 1.0, was developed at CEFRIEL [BdPS93].
Reference: [Sun91] <author> Sun MicroSystems, Inc. </author> <title> Solaris Open Windows: The ToolTalk Service, </title> <year> 1991. </year>
Reference-contexts: Possible candidates to integration in the SPADE-1 2.0 environment are: * Steven Reiss' FIELD environment [Rei90]. * Hewlett-Packard SoftBench [Ger90]. * Sun Microsystems ToolTalk <ref> [Sun91] </ref>. * DEC FUSE [Dig91b]. The above listed SDEs are based on the message passing approach, i.e., tools in the SDE communicate by passing messages informing other tools of their actions, and requesting services from other tools.
Reference: [SvdB93] <author> D. Schefstrom and G. van den Broek. </author> <title> TOOL INTEGRATION. </title> <publisher> John Wiley & Sons, </publisher> <year> 1993. </year>
Reference-contexts: Human actors in the software process cooperate among each other using tools. Editors, compilers, e-mail managers, are examples of widely used tools. Software productivity is improved if such tools are able to interact among each other, in order to provide an integrated environment <ref> [SvdB93] </ref>. Controlling and coordinating tool interactions requires an approach to tool integration that is both flexible and adaptable to suit different user needs, as well as simple and efficient, in order to meet the requirements of tool developers.
Reference: [tea93] <author> GoodStep team. </author> <title> The SLANG 1.1 Process Modeling Language Reference Manual. Project deliverable, </title> <address> GOODSTEP, </address> <month> October </month> <year> 1993. </year> <note> BIBLIOGRAPHY 125 </note>
Reference-contexts: SPADE defines and implements a formal process modeling language and an integrated process-centered environment. The process language of the SPADE environment is called SLANG (S PADE LANG ua-ge) <ref> [tea93] </ref>. SLANG is based on a high-level Petri net formalism, called ER nets [GMMP91]. SLANG offers features for process modeling, enactment, and evolution [BFG93b]. One of the main concerns in designing SLANG is to offer expressive and powerful constructs that can be used for process modeling in-the-large [BFG93a].
Reference: [VZ93] <author> Giovanni Vigna and Edoardo Ziliani. </author> <title> The SPADE-1 Process Enactment Environment Architecture. </title> <type> Technical report, </type> <institution> CEFRIEL, </institution> <year> 1993. </year>
Reference-contexts: Process model enactment is accomplished through the application of the SLANG Interpreter algorithm to active copies, which are instances of activity definitions [Car94]. Multiple SLANG Interpreter instances are concurrently executed within each Process Engine. The Process Engine Manager coordinates the Process Engines and audits the environment <ref> [VZ93] </ref>. The SPADE Manager is the front-end towards the SPADE-1 system administrator. The SPADE Monitor displays graphically the audit information it receives from the Process Engine Manager. In the following sections details on these components will be provided.
References-found: 44

