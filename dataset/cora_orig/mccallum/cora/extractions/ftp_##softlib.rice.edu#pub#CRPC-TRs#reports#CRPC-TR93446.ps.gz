URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR93446.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Email: foster@mcs.anl.gov  
Title: Strand and PCN: Two Generations of Compositional Programming Languages  
Author: Ian Foster 
Address: Argonne, IL 60439  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  
Abstract: Two parallel languages and their associated programming systems are reviewed and evaluated. Both Strand and PCN are designed to facilitate parallel program development by providing an expressive high-level notation; by integrating tools for debugging, performance analysis, etc.; and by providing portability across different parallel computers. Both provide explicit parallel constructs and use single-assignment variables as an abstraction for communication and synchronization. They support a compositional approach to program design, in which programs composed from simpler components inherit the properties of these components. Strand, developed in 1988, is a first-generation system specialized for symbolic applications. PCN, developed in 1990, is a second-generation system that supports both symbolic and numeric computing. Both systems are available on a range of parallel computers, have been widely distributed, and are in use in many applications. This article summarizes their principal features, describes representative applications, and evaluates their strengths and weaknesses for parallel programming.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Armstrong, J., and Virding, S., </author> <note> Programming telephony, Chapter 13 in [14]. </note>
Reference-contexts: Telephone Exchange Control. A Swedish telecommunications company has used Strand to develop telephone exchange control software. Strand is used to manage the data-driven execution of multiple threads of control, each representing a physical resource or telephone call <ref> [1] </ref>. Multiuser Databases. Strand Software Technologies has developed a system that allows multiple users to interact with a single Strand service in a workstation network. This facility has been used to develop a multiuser spreadsheet, a multiuser project management system, and concurrency control mechanisms for distributed databases.
Reference: [2] <author> Boyle, J., R. Butler, T. Disz, B. Glickfield, E. Lusk, R. Overbeek, J. Patterson, and R. Stevens, </author> <title> Portable Programs for Parallel Processors, </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1987. </year>
Reference-contexts: On the other hand, the use of a global tuple space for communication makes it difficult to develop modules that encapsulate internal communication operations: Linda is not "compositional." p4 and PVM extend sequential languages with functions for sending and receiving messages <ref> [2, 31] </ref>. Advantages include simplicity and portability, and the efficiency that can be achieved by accessing directly the low-level communication mechanisms of a message-passing computer. These features make them well-suited for scientific and engineering applications, particularly when communication costs dominate performance.
Reference: [3] <author> Butler, R., et al., </author> <title> Aligning genetic sequences, </title> <note> Chapter 11 in [14]. </note>
Reference-contexts: Hence, a programmer can first develop a program and then explore alternative mapping strategies by changing annotations. This technique is illustrated below. 2.2 Programming Examples We use a sequence alignment program developed by Ross Overbeek and his coworkers <ref> [3] </ref> to illustrate the use of Strand. The goal is to line up RNA sequences from separate but closely related organisms, with corresponding sections directly above one another and with indels (dashes) representing areas in which characters must be inserted or deleted to achieve this alignment.
Reference: [4] <author> Cann, D. C., J. T. Feo, and T. M. DeBoni, </author> <title> Sisal 1,2: High Performance Applicative Computing, </title> <booktitle> Proc. Symp. Parallel and Distributed Processing, </booktitle> <publisher> IEEE CS Press, Los Alamitos, </publisher> <address> Calif., </address> <year> 1990, </year> <pages> 612-616. </pages>
Reference-contexts: We compare and contrast some of these approaches with Strand and PCN. One promising approach to achieving compositionality and determinism in parallel programs is to exploit parallelism while preserving sequential semantics. This approach is taken in parallel dataflow, logic, and functional languages, which exploit parallelism implicit in declarative specifications <ref> [4, 24, 25] </ref>; in data-parallel languages, which exploit the parallelism available when the same operation is applied to many elements of a data structure [33, 16]; and in Jade, which allows programmers to identify statements which are independent and hence can be executed concurrently [27].
Reference: [5] <author> Carriero, N., and Gelernter, D., </author> <title> How to Write Parallel Programs, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: For example, the load-balancing algorithm of of generality, Strand and PCN provide explicit parallel constructs. Other explicitly-parallel approachs include Linda and message-passing libraries such as p4 and PVM. Linda extends sequential languages with operations for creating processes and for manipulating a shared associative store called tuple space <ref> [5] </ref>. Like Strand and PCN, Linda utilizes a data-driven execution model in which the actions of "sending" and "receiving" data are decoupled and processes execute when data are available. A significant advantage of Linda is that the programmer need learn only a small set of tuple space operations.
Reference: [6] <author> Chandy, K. M., and Kesselman, C., </author> <title> Compositional parallel programming in CC++, </title> <type> Technical Report, </type> <institution> Caltech, </institution> <year> 1992. </year>
Reference-contexts: How should these be organized to facilitate reuse? 22 * Are compositional programming ideas also valuable in applications that do not re-quire the symbolic constructs of Strand or PCN? What language constructs are needed in these cases? (Initial studies suggest that only small extensions to sequen tial languages are required <ref> [6, 12] </ref>.) Acknowledgments This work was supported in part by the National Science Foundation's Center for Research in Parallel Computation under Contract NSF CCR-8809615 and by the Office of Scientific Computing, U. S. Department of Energy, under Contract W-31-109-Eng-38.
Reference: [7] <author> Chandy, K. M., and Taylor, S., </author> <title> An Introduction to Parallel Programming, </title> <editor> Jones and Bartlett, </editor> <year> 1991. </year>
Reference-contexts: Compositionality and determinism can be achieved in a variety of ways: a number of approaches are reviewed below. The two parallel languages described in this article, Strand and PCN, realize compositionality by requiring that concurrently-executing components interact by reading and writing single-assignment or definitional variables <ref> [14, 7] </ref>. A definitional variable is initially undefined and can be assigned at most a single value. If a component attempts to read an undefined variable, execution of that component is suspended until the variable is defined. <p> Its unfamiliar syntax poses a significant barrier to the casual user. 3 Program Composition Notation Program Composition Notation (PCN) is a high-level parallel language and programming toolkit developed at Argonne National Laboratory and the California Institute of Technology <ref> [7, 13] </ref>. The language design extends the basic Strand ideas of lightweight processes, logical variables, declarative programming, and multilingual programming in three important ways. First, it integrates declarative and imperative programming without compromising compositional properties. Second, it provides a richer and more flexible syntax. <p> The compiler incorporates numerous optimizations that take advantage of Strand's simplicity. In addition, Strand introduces constructs that support multilingual programming, allowing its use as a coordination language. The initial PCN design was developed by Mani Chandy and Steve Taylor in 1990 <ref> [7] </ref>. Important innovations included the integration of declarative programming (as in Strand) and imperative programming (as in C and Fortran), and a syntax that is both more flexible and closer to sequential programming practice than that of Strand.
Reference: [8] <author> Clark, K. and Gregory, S., </author> <title> A relational language for parallel programming, </title> <booktitle> Proc. 1981 ACM Conf. on Functional Programming Languages and Computer Architectures, </booktitle> <pages> 171-178, </pages> <year> 1981. </year>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College <ref> [8, 11, 17, 28] </ref>, the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP [19].
Reference: [9] <author> Clocksin, W., and Mellish, C., </author> <title> Programming in Prolog, </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming <ref> [9, 22] </ref>, functional programming [20, 25], guarded commands [10], and CSP [19]. However, Strand omits many characteristic features of logic programming languages, such as unification and backtracking, in order to focus on issues relevant to parallel programming.
Reference: [10] <author> Dijkstra, </author> <title> E.W., Guarded commands, nondeterminacy and the formal derivation of programs, </title> <journal> CACM, </journal> <volume> 18, </volume> <pages> 453-7, </pages> <year> 1975. </year>
Reference-contexts: Figure 1 illustrates this technique. The stream comm procedure creates two processes, stream producer and stream consumer, that use the shared variable X to exchange N values. The producer incrementally defines X to be a list comprising N occurrences of the number 10: <ref> [10, 10, 10, ..., 10] </ref> The statement Out := [10jOut1], which defines the variable Out to be a list with head 10 and tail Out1, can be thought of as sending a message on Out. <p> The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands <ref> [10] </ref>, and CSP [19]. However, Strand omits many characteristic features of logic programming languages, such as unification and backtracking, in order to focus on issues relevant to parallel programming. This yields a dramatically simplified language that can be implemented efficiently on sequential and parallel computers.
Reference: [11] <author> Foster, I., </author> <booktitle> Systems Programming in Parallel Logic Languages, </booktitle> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College <ref> [8, 11, 17, 28] </ref>, the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP [19].
Reference: [12] <author> Foster, I., and Chandy, K.M., </author> <title> Fortran M: A language for modular parallel programming, </title> <type> Preprint MCS-P327-0992, </type> <institution> Mathematics and Computer Science Division, Argonne National Lab, Argonne, Ill. </institution> <month> 60439, </month> <year> 1992. </year> <month> 23 </month>
Reference-contexts: How should these be organized to facilitate reuse? 22 * Are compositional programming ideas also valuable in applications that do not re-quire the symbolic constructs of Strand or PCN? What language constructs are needed in these cases? (Initial studies suggest that only small extensions to sequen tial languages are required <ref> [6, 12] </ref>.) Acknowledgments This work was supported in part by the National Science Foundation's Center for Research in Parallel Computation under Contract NSF CCR-8809615 and by the Office of Scientific Computing, U. S. Department of Energy, under Contract W-31-109-Eng-38.
Reference: [13] <author> Foster, I., Olson, R., and Tuecke, S., </author> <title> Productive parallel programming: The PCN approach, </title> <journal> Scientific Programming, </journal> <volume> 1(1), </volume> <pages> 51-66, </pages> <year> 1992. </year>
Reference-contexts: Its unfamiliar syntax poses a significant barrier to the casual user. 3 Program Composition Notation Program Composition Notation (PCN) is a high-level parallel language and programming toolkit developed at Argonne National Laboratory and the California Institute of Technology <ref> [7, 13] </ref>. The language design extends the basic Strand ideas of lightweight processes, logical variables, declarative programming, and multilingual programming in three important ways. First, it integrates declarative and imperative programming without compromising compositional properties. Second, it provides a richer and more flexible syntax. <p> A distributed array of definitional variables can be used as an interface, avoiding the contention that would occur if processes interacted via a centralized data structure <ref> [13] </ref>. PCN programmers regularly reuse modules and templates implementing parallel program structures such as pipelines and butterflies; distributed data structures such as arrays and dictionaries; and load balancing algorithms. <p> Chandy and Taylor also developed a PCN to Strand translator that was used for early programming experiments. Subsequent development introduced extensible process mapping constructs and syntactic support for defining reusable templates, and developed implementation techniques for parallel computers <ref> [13, 15] </ref>. 5 Related Work Many parallel languages and libraries have been developed over the years with the goal of making parallel programming easier. Only a few of these systems have seen widespread 21 use. We compare and contrast some of these approaches with Strand and PCN.
Reference: [14] <author> Foster, I., and Taylor, S., Strand: </author> <title> New Concepts in Parallel Programming, </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: Compositionality and determinism can be achieved in a variety of ways: a number of approaches are reviewed below. The two parallel languages described in this article, Strand and PCN, realize compositionality by requiring that concurrently-executing components interact by reading and writing single-assignment or definitional variables <ref> [14, 7] </ref>. A definitional variable is initially undefined and can be assigned at most a single value. If a component attempts to read an undefined variable, execution of that component is suspended until the variable is defined. <p> Strand compilers for a range of parallel and networked computers are distributed under the tradename STRAND88 by Strand Software Technologies Inc. (Electronic mail: will@sstl.uucp and strand@ppg.strand.com). 2.1 Strand Language This summary of Strand language concepts is not intended to be comprehensive; for details, see <ref> [14] </ref>. The syntax of Strand is similar to that of the logic programming language Prolog. A program consists of a set of procedures, each defined by one or more rules.
Reference: [15] <author> Foster, I., and Taylor, S., </author> <title> A compiler approach to scalable concurrent program design, </title> <journal> ACM Trans. Prog. Lang. Syst., </journal> <note> (to appear). </note>
Reference-contexts: The compiler translates PCN programs to a machine-independent, low-level form (PCN object code). An interface to the C preprocessor allows macros, conditional compilation constructs, and the like to be used in PCN programs. A programmable transformation system integrated with the compiler allows programmer-specified transformations to be applied to programs <ref> [15] </ref>. Otherwise, the compilation and runtime techniques are similar to those employed in Strand. The linker combines PCN object code (PCN compiler output), foreign object code that is called from PCN (C or Fortran compiler output), libraries, and the PCN run-time 18 system into a single executable program. <p> Chandy and Taylor also developed a PCN to Strand translator that was used for early programming experiments. Subsequent development introduced extensible process mapping constructs and syntactic support for defining reusable templates, and developed implementation techniques for parallel computers <ref> [13, 15] </ref>. 5 Related Work Many parallel languages and libraries have been developed over the years with the goal of making parallel programming easier. Only a few of these systems have seen widespread 21 use. We compare and contrast some of these approaches with Strand and PCN.
Reference: [16] <author> Fox, G., S. Hiranandani, K. Kennedy, C. Koelbel, U. Kremer, C. Tseng, M.Wu, </author> <title> Fortran D Language Specification, </title> <type> Technical Report TR90-141, </type> <institution> Computer Science, Rice Univ., Houston, TX, </institution> <year> 1990. </year>
Reference-contexts: This approach is taken in parallel dataflow, logic, and functional languages, which exploit parallelism implicit in declarative specifications [4, 24, 25]; in data-parallel languages, which exploit the parallelism available when the same operation is applied to many elements of a data structure <ref> [33, 16] </ref>; and in Jade, which allows programmers to identify statements which are independent and hence can be executed concurrently [27]. Adherence to sequential semantics has important software engineering advantages. However, not all parallel algorithms are easily expressed in sequential terms.
Reference: [17] <author> Gregory, S., </author> <title> Parallel Logic Programming in PARLOG, </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College <ref> [8, 11, 17, 28] </ref>, the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP [19].
Reference: [18] <author> Harrar, H., Keller, H., Lin, D., and Taylor, S., </author> <title> Parallel computation of Taylor-vortex flows, </title> <booktitle> Proc. Conf. on Parallel Computational Fluid Dynamics, </booktitle> <address> Stuttgart, Germany, </address> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1991. </year>
Reference-contexts: Other mesh-based applications include a computational fluid dynamics code developed by Harrar et al. for computing Taylor-vortex flows, based on a torus structure <ref> [18] </ref> (5300 lines Fortran, 900 lines PCN); climate modeling codes based on icosahedral and overlapping stereographic grids (3800 lines C, 640 lines PCN); and a finite-element code for simulating flow in Titan rocket engines (9000 lines Fortran, 180 lines PCN).
Reference: [19] <author> Hoare, C., </author> <title> Communicating Sequential Processes, </title> <journal> CACM, </journal> <volume> 21(8), </volume> <pages> 666-677, </pages> <year> 1978. </year>
Reference-contexts: The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP <ref> [19] </ref>. However, Strand omits many characteristic features of logic programming languages, such as unification and backtracking, in order to focus on issues relevant to parallel programming. This yields a dramatically simplified language that can be implemented efficiently on sequential and parallel computers.
Reference: [20] <author> Kahn, G., and MacQueen, D., </author> <title> Coroutines and networks of parallel processes, </title> <booktitle> Information Processing 77: Proc. IFIP Congress, </booktitle> <editor> B. Gilchrist (Ed.), </editor> <address> 993-998, </address> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference-contexts: The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming <ref> [20, 25] </ref>, guarded commands [10], and CSP [19]. However, Strand omits many characteristic features of logic programming languages, such as unification and backtracking, in order to focus on issues relevant to parallel programming. This yields a dramatically simplified language that can be implemented efficiently on sequential and parallel computers.
Reference: [21] <author> Kesselman, C., </author> <title> Integrating Performance Analysis with Performance Improvement in Parallel Programs, </title> <type> Ph.D. thesis, </type> <institution> UCLA. </institution>
Reference-contexts: The debugger allows the programmer to trace program execution and to examine suspended processes in the event of deadlock. Performance monitoring functions are integrated into the compiler and programming system. These functions, designed by Carl Kesselman <ref> [21] </ref>, allow information such as total procedure execution time, procedure execution frequencies, and communication volumes 9 -machine (ring). % Virtual computer. scheduler (NumWorkers, Tasks) :- % Create processes: manager (Tasks, Requests), % Manager; merger (Reqs,Requests), % Merger; workers (Reqs). % Workers. manager ([TaskjTasks], [ReqjRequests]) :- % Serve request. <p> This information is collected by additional instructions inserted by the compiler; the cost of these instructions is almost always much less than one per cent of total execution time <ref> [21] </ref>. As profiling is based on counters, rather than the logging of events, the amount of data collected is independent of program execution time. Communication is required only upon program termination, to dump profile data collected on each processor.
Reference: [22] <author> Kowalski, R., </author> <title> Logic for Problem Solving, </title> <publisher> North-Holland, </publisher> <year> 1979. </year>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming <ref> [9, 22] </ref>, functional programming [20, 25], guarded commands [10], and CSP [19]. However, Strand omits many characteristic features of logic programming languages, such as unification and backtracking, in order to focus on issues relevant to parallel programming.
Reference: [23] <author> Lusk, E., </author> <title> Performance visualization for parallel programs, </title> <journal> Theoretica Chimica Acta, </journal> <year> 1992. </year>
Reference-contexts: A snapshoting facility allows multiple profiles to be created during a single program execution. The trace analysis package incorporates run-time system support for collecting and saving event traces, and two graphical tools, Upshot and PADL, for interactive exploration of trace data <ref> [23] </ref>. Gauge is illustrated in model. These are histograms showing message counts and communication volume per processor, respectively; each horizontal line (a pixel wide) represents a single processor.
Reference: [24] <editor> Lusk, E. et al., </editor> <title> The Aurora Or-parallel Prolog system, </title> <booktitle> Proc. Fifth Generation Computer Systems Conference, Tokyo, </booktitle> <pages> 819-830, </pages> <year> 1988. </year>
Reference-contexts: We compare and contrast some of these approaches with Strand and PCN. One promising approach to achieving compositionality and determinism in parallel programs is to exploit parallelism while preserving sequential semantics. This approach is taken in parallel dataflow, logic, and functional languages, which exploit parallelism implicit in declarative specifications <ref> [4, 24, 25] </ref>; in data-parallel languages, which exploit the parallelism available when the same operation is applied to many elements of a data structure [33, 16]; and in Jade, which allows programmers to identify statements which are independent and hence can be executed concurrently [27].
Reference: [25] <author> McLennan, B. J., </author> <title> Functional Programming: Practice and Theory, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address> <year> 1990 </year>
Reference-contexts: The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming <ref> [20, 25] </ref>, guarded commands [10], and CSP [19]. However, Strand omits many characteristic features of logic programming languages, such as unification and backtracking, in order to focus on issues relevant to parallel programming. This yields a dramatically simplified language that can be implemented efficiently on sequential and parallel computers. <p> We compare and contrast some of these approaches with Strand and PCN. One promising approach to achieving compositionality and determinism in parallel programs is to exploit parallelism while preserving sequential semantics. This approach is taken in parallel dataflow, logic, and functional languages, which exploit parallelism implicit in declarative specifications <ref> [4, 24, 25] </ref>; in data-parallel languages, which exploit the parallelism available when the same operation is applied to many elements of a data structure [33, 16]; and in Jade, which allows programmers to identify statements which are independent and hence can be executed concurrently [27].
Reference: [26] <author> Mierowsky, C., Taylor, S., Shapiro, E., Levy, J., and Safra, M., </author> <title> Design and implementation of Flat Concurrent Prolog, </title> <type> Tech. Report CS85-09, </type> <institution> Weizmann Institute of Science, Rehovot, Israel, </institution> <year> 1985. </year>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute <ref> [26, 29, 32] </ref>, and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP [19].
Reference: [27] <author> Rinard, M. C., Scales, D. J., and Lam, M. S., </author> <title> Jade: A high-level machine-independent language for parallel programming, </title> <journal> Computer, </journal> <volume> 26(6), </volume> <pages> 28-38, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: exploit parallelism implicit in declarative specifications [4, 24, 25]; in data-parallel languages, which exploit the parallelism available when the same operation is applied to many elements of a data structure [33, 16]; and in Jade, which allows programmers to identify statements which are independent and hence can be executed concurrently <ref> [27] </ref>. Adherence to sequential semantics has important software engineering advantages. However, not all parallel algorithms are easily expressed in sequential terms. For example, the load-balancing algorithm of of generality, Strand and PCN provide explicit parallel constructs. Other explicitly-parallel approachs include Linda and message-passing libraries such as p4 and PVM.
Reference: [28] <author> Ringwood, G., </author> <title> PARLOG86 and the dining logicians, </title> <journal> CACM, </journal> <volume> 31(1), </volume> <pages> 10-25, </pages> <year> 1988. </year>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College <ref> [8, 11, 17, 28] </ref>, the Weizmann Institute [26, 29, 32], and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP [19].
Reference: [29] <author> Shapiro, E. (Ed.), </author> <title> Concurrent Prolog: Collected Papers, </title> <publisher> MIT Press, </publisher> <year> 1987. </year> <month> 24 </month>
Reference-contexts: In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute <ref> [26, 29, 32] </ref>, and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP [19].
Reference: [30] <author> Siegl, K., </author> <title> Grobner bases computation in Strand: A case study for concurrent sym-bolic computation in logic programming languages, </title> <type> Tech. Report 90-54, </type> <institution> RISC-Linz, Johannes Kepler University, Linz, Austria, </institution> <year> 1990. </year>
Reference-contexts: For example: Parallel Computer Algebra. Researchers at the Research Institute for Symbolic Computation in Linz, Austria, have developed kMaplek, a parallel implementation of the computer algebra system Maple <ref> [30] </ref>. In the United States, a telecommunications company has developed an interface between Strand and the Mathematica computer algebra system. Both systems use Strand to coordinate execution of symbolic algebra computations on parallel computers and workstation networks. Discrete Event Simulation.
Reference: [31] <author> Sunderam, V., </author> <title> PVM: A Framework for Parallel Distributed Computing, </title> <journal> Concurrency Practice and Experience, </journal> <volume> 2, </volume> <year> 1990, </year> <pages> 315-339. </pages>
Reference-contexts: On the other hand, the use of a global tuple space for communication makes it difficult to develop modules that encapsulate internal communication operations: Linda is not "compositional." p4 and PVM extend sequential languages with functions for sending and receiving messages <ref> [2, 31] </ref>. Advantages include simplicity and portability, and the efficiency that can be achieved by accessing directly the low-level communication mechanisms of a message-passing computer. These features make them well-suited for scientific and engineering applications, particularly when communication costs dominate performance.
Reference: [32] <author> Taylor, S., </author> <title> Parallel Logic Programming Techniques, </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: A garbage collector is nevertheless required in the general case. On distributed-memory computers, a shared variable is represented by a single occurrence and one or more remote references <ref> [32] </ref>; read and write operations on remote references are translated into communication operations. The garbage collector must also trace these in-terprocessor references; however, individual processors can reclaim storage independently, hence avoiding a need for global synchronization. <p> In 1990, Strand was awarded the British Computer Society's Award for Technical Innovation. The Strand design builds on work in concurrent logic programming at Imperial College [8, 11, 17, 28], the Weizmann Institute <ref> [26, 29, 32] </ref>, and elsewhere. Concurrent logic programming itself has intellectual roots in logic programming [9, 22], functional programming [20, 25], guarded commands [10], and CSP [19].
Reference: [33] <author> Thinking Machines Corporation, </author> <title> CM Fortran Reference Manual, Thinking Machines, </title> <address> Cambridge, Mass., </address> <year> 1989. </year>
Reference-contexts: This approach is taken in parallel dataflow, logic, and functional languages, which exploit parallelism implicit in declarative specifications [4, 24, 25]; in data-parallel languages, which exploit the parallelism available when the same operation is applied to many elements of a data structure <ref> [33, 16] </ref>; and in Jade, which allows programmers to identify statements which are independent and hence can be executed concurrently [27]. Adherence to sequential semantics has important software engineering advantages. However, not all parallel algorithms are easily expressed in sequential terms.
Reference: [34] <author> Xu, M., and Turner, S., </author> <title> A multi-level time warp mechanism, </title> <booktitle> Proc. 1990 Summer Computer Simulation Conf., </booktitle> <pages> 165-170, </pages> <institution> Society for Computer Simulation, </institution> <year> 1990. </year> <month> 25 </month>
Reference-contexts: Both systems use Strand to coordinate execution of symbolic algebra computations on parallel computers and workstation networks. Discrete Event Simulation. Researchers at the University of Exeter have used Strand to develop a parallel discrete event simulation system that implements a variant of the 11 Timewarp simulation algorithm <ref> [34] </ref>. This system is used on both transputer networks and the Kendall Square Research KSR-1. Telephone Exchange Control. A Swedish telecommunications company has used Strand to develop telephone exchange control software.
References-found: 34

