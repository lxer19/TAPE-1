URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1992/tr-92-037.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1992.html
Root-URL: http://www.icsi.berkeley.edu
Title: Measuring the Latency Time of Real-Time Unix-like Operating Systems  
Author: Newton Faller 
Date: June 1992  
Pubnum: TR-92-037  
Abstract: With the advent of continuous-media applications, real-time operating systems, once confined to process control and other specialized applications, are coming to the desktop. The popularity of UNIX made this operating system the first choice for use with such real-time desktop applications. However, since UNIX kernel does not provide real-time responsiveness, some software developers have been trying to adapt it to respond to this new requirements, while others have been proposing its total redesign. Though the evaluation of the performance of a real-time operating system depends on many factors, a predictable small latency time in responding to external events is always essential. In this paper, after a discussion about the probable sources of latency, it is presented a method for collecting information about context-switching and interrupt-acknowledge times in UNIX-like operating systems without requiring external measuring tools. It is also proposed, a form of presentation of these data aimed at facilitating the comparison with previously collected data obtained from the same or from other systems. The paper is illustrated with actual results obtained by the application of the method to TROPIX, a real-time UNIX-like operating system, running on a Motorola 68010-based computer. The impact of kernel preemption and some practical measurement interference considerations due to dynamic memory refresh, DMA operation and disk multiblock access are also discussed. ____________________________________ This research was supported by CNPq - Conselho Nacional de Desenvolvimento Cientifico e Tecnolo gico (Brasil) and also by the National Science Foundation and the Defense Advanced Research Projects Agency (DARPA) under Cooperative Agreement NCR-8919038 with the Corporation for National Research Initiatives, by AT&T Bell Laboratories, Hitachi, Ltd., Hitachi America, Ltd., Pacific Bell, the University of Cali-fornia under a MICRO grant, and the International Computer Science Institute. The views and conclusions contained in this document are those of the authors, and should not be interpreted as representing official policies, either expressed or implied, of the U.S. Government or any of the sponsoring organizations. 
Abstract-found: 1
Intro-found: 1
Reference: [Bach86] <author> Bach, M. </author> <title> The Design of the UNIX Operating System, </title> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1986. </year>
Reference-contexts: Internally, TROPIX kernel structure [FaSa90] is quite different from UNIX's <ref> [Bach86] </ref>. TROPIX has a fully-preemptible kernel and many specialized system calls to manipulate and coordinate the execution of real-time processes. Real-time processes coexist with their time-sharing counterparts but they can run at higher priorities and have many other privileges.
Reference: [EBCto87] <author> EBC-32010: Teoria de Operac, ao, EBC, </author> <year> 1987. </year>
Reference-contexts: Therefore, when using the methodology presented here, though not essential, it is rather important to have available for consulting the target computer system manuals that explain its theory of operation <ref> [EBCto87] </ref>, contain its electrical diagrams [EBCed87], and describe its central processing unit with timing [MOTpr84], peripheral circuits [MOTfr90] and peripheral devices.
Reference: [EBCde87] <author> EBC-32010: Diagramas Eletricos, EBC, </author> <year> 1987. </year>
Reference: [FaSa90] <author> Faller, N., and Salenbauch, P., "TROPIX: </author> <title> Um Sistema Operacional Unix-like para Tempo-Real", </title> <institution> Anais do XXIII Congresso Nacional de Informatica, Sucesu90, Rio de Janeiro, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: This has been done through adaptation of its kernel, for instance [KhSZ92] [Fual91], or even, sometimes, through the design of a new kernel <ref> [FaSa90] </ref>. There are many ways of estimating the performance of a real-time operating systems. In [Fual91], for instance, four metrics are described: the Rhealstone metric, the Process Dispatch Latency Time, the Tri-Dimensional Measure, and the Real/Stone Benchmark. <p> A description of the procedures to be executed and the software instrumentation required for the measurements to be obtained are also described. As an example, the method was applied to TROPIX, a real-time Unix-like operating system <ref> [FaSa90] </ref>, which source code was readily available to us. The hardware used was a 10MHz one-wait-state Motorola 68010-based computer (EBC-32010) manufactured by EBC, a Brazilian computer company. <p> This resolution was used in all measurement sessions. 3 The Operating System Environment The measurement methodology which is described in the following section, was applied to the TROPIX operating system. TROPIX is a fully-preemptible real-time UNIX-like operating system <ref> [FaSa90] </ref> which design was made possible through the experience gained in the design of PLURIX, a multiprocessing UNIX-like operating system [FaSa89][Faal84]. In the user level, TROPIX bears a reasonable similarity to the UNIX operating system. <p> Internally, TROPIX kernel structure <ref> [FaSa90] </ref> is quite different from UNIX's [Bach86]. TROPIX has a fully-preemptible kernel and many specialized system calls to manipulate and coordinate the execution of real-time processes. Real-time processes coexist with their time-sharing counterparts but they can run at higher priorities and have many other privileges.
Reference: [FaSa89] <author> Faller, N., and Salenbauch, P., "PLURIX: </author> <title> A Multiprocessing UNIX-like Operating System", </title> <booktitle> Proceedings of the Second IEEE Workshop on Workstation Operating Systems, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, D.C., </address> <month> September </month> <year> 1989. </year>
Reference: [Faal84] <author> Faller, N. et alii, </author> <note> "O Projeto PEGASUS-32X/PLURIX", </note> <institution> Anais do XVII Congresso Nacional de Informatica, Sucesu84, Rio de Janeiro, </institution> <month> November </month> <year> 1984. </year>
Reference: [Fual91] <author> Fuhrt, B., Grostick, D., Gluck, D., Rabbat, G, Parker, J., and McRoberts, M., </author> <title> "Real-Time Unix Systems Design and Application Guide", </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year> <title> [KaSZ92] "Realtime Scheduling in SunOS 5.0", Khanna, </title> <editor> S., Sebre, M., and Zolnowski, J., </editor> <booktitle> Proceedings of the Winter 1992 USENIX Conference, </booktitle> <address> San Francisco, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: With the UNIX system being the most popular operating system for workstations, it is easy to understand that many software developers have been trying to fit UNIX to run appropriately with real-time applications. This has been done through adaptation of its kernel, for instance [KhSZ92] <ref> [Fual91] </ref>, or even, sometimes, through the design of a new kernel [FaSa90]. There are many ways of estimating the performance of a real-time operating systems. In [Fual91], for instance, four metrics are described: the Rhealstone metric, the Process Dispatch Latency Time, the Tri-Dimensional Measure, and the Real/Stone Benchmark. <p> This has been done through adaptation of its kernel, for instance [KhSZ92] <ref> [Fual91] </ref>, or even, sometimes, through the design of a new kernel [FaSa90]. There are many ways of estimating the performance of a real-time operating systems. In [Fual91], for instance, four metrics are described: the Rhealstone metric, the Process Dispatch Latency Time, the Tri-Dimensional Measure, and the Real/Stone Benchmark. In all of them, latency time has always been one of the main factors.
Reference: [MOTfr90] <institution> M68000 Family Reference Manual, Motorola, </institution> <year> 1990. </year>
Reference-contexts: Therefore, when using the methodology presented here, though not essential, it is rather important to have available for consulting the target computer system manuals that explain its theory of operation [EBCto87], contain its electrical diagrams [EBCed87], and describe its central processing unit with timing [MOTpr84], peripheral circuits <ref> [MOTfr90] </ref> and peripheral devices. The methodology described in this paper, was applied, as an example, to an operating system running on a EBC-32010, a 16-bit bus computer based on a 10 MHz Motorola MC68010 microprocessor.
Reference: [MOTpr84] <author> M68000 16/32-bit Microprocessor: </author> <title> Programmer's Reference Manual, </title> <institution> Motorola, </institution> <year> 1984. </year>
Reference-contexts: Therefore, when using the methodology presented here, though not essential, it is rather important to have available for consulting the target computer system manuals that explain its theory of operation [EBCto87], contain its electrical diagrams [EBCed87], and describe its central processing unit with timing <ref> [MOTpr84] </ref>, peripheral circuits [MOTfr90] and peripheral devices. The methodology described in this paper, was applied, as an example, to an operating system running on a EBC-32010, a 16-bit bus computer based on a 10 MHz Motorola MC68010 microprocessor.

References-found: 9

