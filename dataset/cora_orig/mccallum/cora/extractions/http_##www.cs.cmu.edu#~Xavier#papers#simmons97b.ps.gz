URL: http://www.cs.cmu.edu/~Xavier/papers/simmons97b.ps.gz
Refering-URL: http://www.cs.cmu.edu/~Xavier/papers.html
Root-URL: 
Email: mmvg@cs.cmu.edu  
Title: Xavier: Experience with a Layered Robot Architecture  
Author: Reid G. Simmons, Richard Goodwin, Karen Zita Haigh, Sven Koenig, Joseph O'Sullivan, Manuela M. Veloso freids, rich, khaigh, skoenig, josullvn, 
Address: Pittsburgh PA 15213-3891  
Affiliation: Computer Science Department Carnegie Mellon University  
Abstract: Office delivery robots have to perform many tasks such as picking up and delivering mail or faxes, returning library books, and getting coffee. They have to determine the order in which to visit locations, plan paths to those locations, follow paths reliably, and avoid static and dynamic obstacles in the process. Reliability and efficiency are key issues in the design of such autonomous robot systems. They must deal reliably with noisy sensors and actuators and with incomplete knowledge of the environment. They must also act efficiently, in real time, to deal with dynamic situations. To achieve these objectives, we have developed a robot architecture that is composed of four layers: obstacle avoidance, navigation, path planning, and task planning. The layers are independent, communicating processes that are always active, processing sensory data and status information to update their decisions and actions. A version of our robot architecture has been in nearly daily use in our building since December 1995. As of January 1997, the robot has traveled more than 110 kilometers (65 miles) in service of over 2500 navigation requests that were specified using our World Wide Web interface. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip E. Agre and David Chapman. Pengi: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI-87), </booktitle> <pages> pages 268-272, </pages> <address> Seattle, WA, 1987. </address> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module. In addition, lower layers are free (within some bounds) to ignore the input received by higher layers, essentially treating higher level plans and commands as "advice" <ref> [1] </ref>. For example, the local obstacle avoidance module can ignore the current desired heading to steer the robot around obstacles. The architecture differs from traditional behavior-based approaches in that it makes heavy use of models and internal representations.
Reference: [2] <author> Ron C. Arkin. </author> <title> Motor schema-based mobile robot navigation. </title> <journal> International Journal of Robotics Research, </journal> <volume> 8(4) </volume> <pages> 92-112, </pages> <year> 1989. </year>
Reference-contexts: It uses our Curvature Velocity Method [30] to optimize, in real time, an objective function that combines safety, speed, and progress along the desired heading. This way it provides high-speed, safe motion that takes the dynamics of the robot into account. Previous obstacle avoidance schemes <ref> [2, 5] </ref> neglected dynamics by assuming the robot could turn instantaneously, more recent schemes enable high speed travel by taking current velocities and feasible accelerations into account.
Reference: [3] <author> Ron C. Arkin. </author> <title> Integrating behavioral, perceptual and world knowledge in reactive navigation. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <volume> 6 </volume> <pages> 105-122, </pages> <year> 1990. </year>
Reference-contexts: It allows the system to adapt to a changing environment where failures can occur. 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA <ref> [3] </ref>, Rhino [7], SSS [10], ATLANTIS [14], RAPs [12, 19], Python [25] and SAPHIRA [28]. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers.
Reference: [4] <author> Ella M. Atkins, Edmund H. Durfee, and Kang G. Shin. </author> <title> Detecting and reacting to unplanned-for world states. </title> <booktitle> In Papers from the 1996 AAAI Fall Symposium "Plan Execution: Problems and Issues", </booktitle> <pages> pages 1-7, </pages> <address> Boston, MA, 1996. </address> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA. </address>
Reference-contexts: The range of failures that could occur were very limited, and goals were not very challenging. There was little need for complex high-level reasoning. More recent work on putting planning systems on robots include CIRCA <ref> [4] </ref> Flakey [8], Dervish [23] and NRMA [26]. These systems all demonstrate the need for reliable, modular components where planning and forethought increase reliability and efficiency. The deployment of Xavier is perhaps the most unique aspect of the our system. There are typically two types of interactions with robot agents.
Reference: [5] <author> Johann Borenstein and Yoram Koren. </author> <title> The vector field histogram fast obstacle avoidance for mobile robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(3) </volume> <pages> 278-288, </pages> <year> 1991. </year>
Reference-contexts: It uses our Curvature Velocity Method [30] to optimize, in real time, an objective function that combines safety, speed, and progress along the desired heading. This way it provides high-speed, safe motion that takes the dynamics of the robot into account. Previous obstacle avoidance schemes <ref> [2, 5] </ref> neglected dynamics by assuming the robot could turn instantaneously, more recent schemes enable high speed travel by taking current velocities and feasible accelerations into account.
Reference: [6] <author> Rodney A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-2(1):14-23, </volume> <year> 1986. </year>
Reference-contexts: In particular, the obstacle avoidance layer is essentially behavioral, the navigation layer contains behavioral and task-sequencing aspects, and both the path planning and task scheduling layers combine planning and task sequencing. In character, our architecture has many similarities to behavior-based approaches advocated in the literature <ref> [6, 9, 18] </ref>. Lower layers are always running, even when higher layers are inactive, or not present. For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module.
Reference: [7] <author> Joachim Buhmann, Wolfram Burgard, Armin B. Cremers, Dieter Fox, Thomas Hofmann, Frank E. Schneider, Jiannis Strikos, and Sebastian Thrun. </author> <title> The mobile robot rhino. </title> <journal> AI Magazine, </journal> <volume> 16(2) </volume> <pages> 31-38, </pages> <month> Summer </month> <year> 1995. </year>
Reference-contexts: the system to adapt to a changing environment where failures can occur. 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA [3], Rhino <ref> [7] </ref>, SSS [10], ATLANTIS [14], RAPs [12, 19], Python [25] and SAPHIRA [28]. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers.
Reference: [8] <author> Clare Congdon, Marcus Huber, David Koertenkamp, Kurt Konolige, Karen Myers, Alessandro Saffiotti, and Enrique H. Ruspini. </author> <title> CARMEL versus FLAKEY: A comparison of two winners. </title> <journal> AI Magazine, </journal> <volume> 14(1) </volume> <pages> 49-57, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: The range of failures that could occur were very limited, and goals were not very challenging. There was little need for complex high-level reasoning. More recent work on putting planning systems on robots include CIRCA [4] Flakey <ref> [8] </ref>, Dervish [23] and NRMA [26]. These systems all demonstrate the need for reliable, modular components where planning and forethought increase reliability and efficiency. The deployment of Xavier is perhaps the most unique aspect of the our system. There are typically two types of interactions with robot agents.
Reference: [9] <author> Jonathan H. Connell. </author> <title> A behavior-based arm controller. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 5(6) </volume> <pages> 784-791, </pages> <year> 1989. </year> <month> 16 </month>
Reference-contexts: In particular, the obstacle avoidance layer is essentially behavioral, the navigation layer contains behavioral and task-sequencing aspects, and both the path planning and task scheduling layers combine planning and task sequencing. In character, our architecture has many similarities to behavior-based approaches advocated in the literature <ref> [6, 9, 18] </ref>. Lower layers are always running, even when higher layers are inactive, or not present. For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module.
Reference: [10] <author> Jonathan H. Connell. </author> <title> SSS: A hybrid architecture applied to robot navigation. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA 92), </booktitle> <pages> pages 2719-2724, </pages> <address> Nice, France, 1992. </address> <publisher> IEEE Press, </publisher> <address> New York, NY. </address>
Reference-contexts: to adapt to a changing environment where failures can occur. 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA [3], Rhino [7], SSS <ref> [10] </ref>, ATLANTIS [14], RAPs [12, 19], Python [25] and SAPHIRA [28]. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers. Our robot delivery architecture is consistent with such approaches, but takes an orthogonal cut at the decomposition|by task function rather than by architectural capability.
Reference: [11] <author> John M. Evans. HelpMate: </author> <title> An autonomous mobile robot courier for hospitals. </title> <booktitle> In Proceedings of the International Conference on Intelligent Robots and Systems (IROS 94), </booktitle> <pages> pages 1695-1700, </pages> <address> Munich, Germany, 1994. </address> <publisher> IEEE Press, </publisher> <address> New York, NY. </address>
Reference-contexts: The deployment of Xavier is perhaps the most unique aspect of the our system. There are typically two types of interactions with robot agents. In the most traditional, exemplified by 13 systems such as HelpMate <ref> [11] </ref> and other service robots [27], authorized users interact on a one to one basis with the agent. More recently, as "net robots" such as the USC Robotic Tele-Excavation, Chicago's Labcam are made available, a larger audience can control the agent.
Reference: [12] <author> James R. Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI-87), </booktitle> <pages> pages 202-206, </pages> <address> Seattle, WA, 1987. </address> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: changing environment where failures can occur. 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA [3], Rhino [7], SSS [10], ATLANTIS [14], RAPs <ref> [12, 19] </ref>, Python [25] and SAPHIRA [28]. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers. Our robot delivery architecture is consistent with such approaches, but takes an orthogonal cut at the decomposition|by task function rather than by architectural capability.
Reference: [13] <author> Dieter Fox, Wolfram Burgard, and Sebastian Thrun. </author> <title> The dynamic window approach to collision avoidance. </title> <journal> IEEE Robotics and Automation Magazine, </journal> <volume> 4(1) </volume> <pages> 23-33, </pages> <year> 1997. </year>
Reference-contexts: Previous obstacle avoidance schemes [2, 5] neglected dynamics by assuming the robot could turn instantaneously, more recent schemes enable high speed travel by taking current velocities and feasible accelerations into account. For example, the "dynamic window" approach <ref> [13] </ref> takes robot dynamics into account by operating in velocity space, and chooses robot velocities by trying to optimize an evaluation function. Our curvature-velocity method (CVM) [30], which is very similar to this method, was developed somewhat later, but independently.
Reference: [14] <author> Erann Gat. </author> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <pages> pages 809-815, </pages> <address> Seattle, WA, 1992. </address> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: For example, the obstacle avoidance module can indicate when it thinks it is stuck in a local minimum. By "failing cognizantly" <ref> [14] </ref>, the lower layers can provide information that enables higher layers to determine how to handle the situation. The next two sections describe the layers of our architecture in more detail. <p> to a changing environment where failures can occur. 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA [3], Rhino [7], SSS [10], ATLANTIS <ref> [14] </ref>, RAPs [12, 19], Python [25] and SAPHIRA [28]. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers. Our robot delivery architecture is consistent with such approaches, but takes an orthogonal cut at the decomposition|by task function rather than by architectural capability.
Reference: [15] <author> Richard Goodwin. </author> <title> Meta-Level Control for Decision-Theoretic Planners. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> October </month> <year> 1996. </year> <note> Also avilable as technical report CMU-CS-90-109. </note>
Reference-contexts: Obstacle avoidance is performed by our Curvature-Velocity Method (CVM) [30]. Navigation is done using Partially Observable Markov Decision Process models [32]. Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis <ref> [15] </ref>. Task planning is performed using the planning system prodigy [16]. We illustrate the layers of our navigation architecture using a typical delivery scenario. The user interface module allows users, such as secretaries, to enter delivery requests (including desired delivery times and priorities). <p> Using a modified A* search, it takes into account probabilities that corridors may be blocked, and the recovery cost of missing turns, yet still iden tifies the best path quickly <ref> [15] </ref>. select the path efficiently. The planner uses a generate, evaluate and refine strategy to efficiently find the path with the lease expected travel time, taking into account the difficulty of traversing each region, the possibility of missing turns, and the possibility of encountering closed doors or blockages in corridors.
Reference: [16] <author> Karen Zita Haigh and Manuela M. Veloso. </author> <title> High-level planning and low-level execution: Towards a complete robotic agent. </title> <editor> In W. Lewis Johnson, editor, </editor> <booktitle> Proceedings of First International Conference on Autonomous Agents (Agents '97), </booktitle> <pages> pages 363-370, </pages> <address> Marina del Rey, CA, 1997. </address> <publisher> ACM Press, </publisher> <address> New York, NY. </address>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot [24, 31] with the prodigy planning system <ref> [16, 33] </ref> in a setup where users can post tasks for which the planner generates appropriate plans, sends them to the robot, and monitors their execution. <p> Obstacle avoidance is performed by our Curvature-Velocity Method (CVM) [30]. Navigation is done using Partially Observable Markov Decision Process models [32]. Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [15]. Task planning is performed using the planning system prodigy <ref> [16] </ref>. We illustrate the layers of our navigation architecture using a typical delivery scenario. The user interface module allows users, such as secretaries, to enter delivery requests (including desired delivery times and priorities). <p> In addition, the task planner must also know when actions fail and replan to achieve them since the robot operates in a dynamic world that is not completely known. The task planner effectively handles the multiple asynchronous goals The task planner creates plans for user requests <ref> [16] </ref>. It relies on prodigy, a classical planning system [33].
Reference: [17] <author> Alex Hills and David B. Johnson. </author> <title> A wireless data network infrastructure at Carnegie Mellon University. </title> <journal> IEEE Personal Communications, </journal> <volume> 3(1) </volume> <pages> 56-63, </pages> <year> 1996. </year>
Reference-contexts: Control, perception, and planning are carried out on three on-board 486 computers. The computers are connected to each other via thin-wire Ethernet and to the outside world (for communicating with the User Interface) via a Wavelan wireless Ethernet system <ref> [17] </ref>. Section 2 presents an overview of our architecture and a scenario that illustrates how the various parts of the architecture work. Sections 3 and 4 discuss each layer in detail, including its functionality and its interface to the other layers.
Reference: [18] <editor> Maja J. Mataric. </editor> <title> Integration of representation into goal-driven behavior-based robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 8(3) </volume> <pages> 304-312, </pages> <year> 1992. </year>
Reference-contexts: In particular, the obstacle avoidance layer is essentially behavioral, the navigation layer contains behavioral and task-sequencing aspects, and both the path planning and task scheduling layers combine planning and task sequencing. In character, our architecture has many similarities to behavior-based approaches advocated in the literature <ref> [6, 9, 18] </ref>. Lower layers are always running, even when higher layers are inactive, or not present. For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module.
Reference: [19] <author> Drew McDermott. </author> <title> Planning reactive behavior: A progress report. </title> <editor> In K. Sycara, editor, </editor> <title> Innovative Approaches to Planning, </title> <journal> Scheduling and Control, </journal> <pages> pages 450-458. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: changing environment where failures can occur. 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA [3], Rhino [7], SSS [10], ATLANTIS [14], RAPs <ref> [12, 19] </ref>, Python [25] and SAPHIRA [28]. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers. Our robot delivery architecture is consistent with such approaches, but takes an orthogonal cut at the decomposition|by task function rather than by architectural capability.
Reference: [20] <author> Hans Moravec. </author> <title> Sensor fusion in certainty grids for mobile robots. </title> <journal> AI Magazine, </journal> <volume> 9(2) </volume> <pages> 61-74, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: The virtual movements abstract away low level control aspects, such as circumnavigating obstacles, by reporting the straight-line distance in the desired heading. Similarly, an evidence grid (obstacle maps centered on the robot), which integrates raw sonar data over time <ref> [20] </ref>, is used to derive virtual sensors that report on the environment. For example, we model three sensors (a front, left, and right sensor) that report features such as walls and openings of various sizes (small, medium, and large).
Reference: [21] <author> Nils J. Nilsson. </author> <title> Shakey the robot. </title> <type> Technical Report 323, </type> <institution> AI Center, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1984. </year>
Reference-contexts: By combining prior information (models) with current percepts, the robot is able to maintain representations that best reflect its current belief in the state of the world, given that it receives noisy, and often incorrect, sensor information. Shakey the robot <ref> [21] </ref> was the first system to use a planning system on a robot. However, the underlying architecture was not as reliable as in Xavier, and therefore it operated in a very simple near-static world. The range of failures that could occur were very limited, and goals were not very challenging.
Reference: [22] <author> Illah Nourbakhsh, Sarah Morse, Craig Becker, Marko Balabanovic, Erann Gat, Reid Simmons, Steven Goodridge, Harsh Potlapalli, David Hinkle, Ken Jung, and David Van Vactor. </author> <title> The winning robots from the 1993 robot competition. </title> <journal> AI Magazine, </journal> <volume> 14(4) </volume> <pages> 51-62, </pages> <month> Winter </month> <year> 1993. </year>
Reference-contexts: The robot's travel speed is currently limited only by the cycle time of its sonar sensors, while tasks fail mainly because of problems with the wireless network at CMU|both problems are unrelated to the robot architecture. Xavier, the robot used in these experiments <ref> [22, 24] </ref>, is built on top of a 24 inch diameter RWI B24 base, which is a four-wheeled synchro-drive mechanism that allows for independent control of the translational and rotational velocities (Figure 1).
Reference: [23] <author> Illah Nourbakhsh, Rob Powers, and Stan Birchfield. Dervish: </author> <title> An office navigating robot. </title> <journal> AI Magazine, </journal> <volume> 16(2) </volume> <pages> 53-60, </pages> <year> 1995. </year> <month> 17 </month>
Reference-contexts: There is a trade-off: a coarse discretization leads to smaller memory and runtime requirements, but at reduced precision. For instance, Nourbakhsh <ref> [23] </ref> uses a similar model, but represents each corridor segment as a single Markov node. Figure 8 shows the Markov state representation and the representation of the actuator transitions between states and robot orientations. Discretizing the pose allows us to abstract the raw sensor data. <p> The range of failures that could occur were very limited, and goals were not very challenging. There was little need for complex high-level reasoning. More recent work on putting planning systems on robots include CIRCA [4] Flakey [8], Dervish <ref> [23] </ref> and NRMA [26]. These systems all demonstrate the need for reliable, modular components where planning and forethought increase reliability and efficiency. The deployment of Xavier is perhaps the most unique aspect of the our system. There are typically two types of interactions with robot agents.
Reference: [24] <author> Joseph O'Sullivan, Karen Zita Haigh, and G. D. Armstrong. </author> <note> Xavier Manual (Version 0.3). </note> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1994. </year> <note> Unpublished internal report. Available via http://www.cs.cmu.edu/~Xavier/. </note>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot <ref> [24, 31] </ref> with the prodigy planning system [16, 33] in a setup where users can post tasks for which the planner generates appropriate plans, sends them to the robot, and monitors their execution. <p> The robot's travel speed is currently limited only by the cycle time of its sonar sensors, while tasks fail mainly because of problems with the wireless network at CMU|both problems are unrelated to the robot architecture. Xavier, the robot used in these experiments <ref> [22, 24] </ref>, is built on top of a 24 inch diameter RWI B24 base, which is a four-wheeled synchro-drive mechanism that allows for independent control of the translational and rotational velocities (Figure 1).
Reference: [25] <author> David W. Payton, Julio K. Rosenblatt, and David M. Keirsey. </author> <title> Plan-guided reaction. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 20(6) </volume> <pages> 1370-1382, </pages> <year> 1990. </year>
Reference-contexts: failures can occur. 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA [3], Rhino [7], SSS [10], ATLANTIS [14], RAPs [12, 19], Python <ref> [25] </ref> and SAPHIRA [28]. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers. Our robot delivery architecture is consistent with such approaches, but takes an orthogonal cut at the decomposition|by task function rather than by architectural capability.
Reference: [26] <author> Barney Pell, Douglas E. Bernard, Steve A. Chien, Erann Gat, Nicola Muscettola, P. Pan-durang Nayak, Michael D. Wagner, and Brian C. Williams. </author> <title> An autonomous spacecraft agent prototype. </title> <booktitle> In Proceedings of First International Conference on Autonomous Agents (Agents '97), </booktitle> <pages> pages 253-261, </pages> <address> Marina del Rey, CA, 1997. </address> <publisher> ACM Press, </publisher> <address> New York, NY. </address>
Reference-contexts: The range of failures that could occur were very limited, and goals were not very challenging. There was little need for complex high-level reasoning. More recent work on putting planning systems on robots include CIRCA [4] Flakey [8], Dervish [23] and NRMA <ref> [26] </ref>. These systems all demonstrate the need for reliable, modular components where planning and forethought increase reliability and efficiency. The deployment of Xavier is perhaps the most unique aspect of the our system. There are typically two types of interactions with robot agents.
Reference: [27] <author> Catherine Ra*in and Alain Fournier. </author> <title> Learning with a friendly interactive robot for service tasks in hospital environments. </title> <booktitle> Autonomous Robots, </booktitle> <volume> 3(4) </volume> <pages> 399-414, </pages> <year> 1996. </year>
Reference-contexts: The deployment of Xavier is perhaps the most unique aspect of the our system. There are typically two types of interactions with robot agents. In the most traditional, exemplified by 13 systems such as HelpMate [11] and other service robots <ref> [27] </ref>, authorized users interact on a one to one basis with the agent. More recently, as "net robots" such as the USC Robotic Tele-Excavation, Chicago's Labcam are made available, a larger audience can control the agent.
Reference: [28] <author> Allessandro Saffiotti, Kurt Konolige, and Enrique H. Ruspini. </author> <title> A multivalued-logic approach to integrating planning and control. </title> <journal> Artificial Intelligence, </journal> <volume> 76(1-2):481-526, </volume> <year> 1995. </year>
Reference-contexts: 5 Related Work Consensus is building in the mobile robotics community on the advantages of a layered architecture, consisting of behaviors, task-sequencing, and planning|the range of architectures adopting variants of this approach grows rapidly, including AURA [3], Rhino [7], SSS [10], ATLANTIS [14], RAPs [12, 19], Python [25] and SAPHIRA <ref> [28] </ref>. Generally such hybrid architectures combine low-level reactive control mechanisms with one or more deliberative layers. Our robot delivery architecture is consistent with such approaches, but takes an orthogonal cut at the decomposition|by task function rather than by architectural capability.
Reference: [29] <author> Reid Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1) </volume> <pages> 34-43, </pages> <year> 1994. </year>
Reference-contexts: The layers are implemented as separate code modules (processes). The robot architecture is implemented as a number of asynchronous processes, distributed over the three on-board computers and an off-board computer permanently running the webserver providing the user interface. The processes are integrated using the Task Control Architecture (TCA) <ref> [29] </ref>. TCA provides message passing facilities and facilities to support task decomposition, task sequencing, execution monitoring, and exception handling. Other parts of the architecture include real-time servo control, an interprocess-communication package, and a user interface. <p> Other parts of the architecture include real-time servo control, an interprocess-communication package, and a user interface. The servo control package is provided with the commercially available hardware (robot base and pan-tilt head). Interprocess communication and synchronization is provided by our Task Control Architecture (TCA) <ref> [29] </ref>. TCA is a general-purpose framework for task-level control, by which we mean the coordination of planning, sensing and execution. It provides facilities for interprocess communication (message passing), coordination, and synchronization of the distributed, concurrent modules.
Reference: [30] <author> Reid Simmons. </author> <title> The curvature-velocity method for local obstacle avoidance. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA 96), </booktitle> <pages> pages 3375-3382, </pages> <address> Minneapolis, MN, 1996. </address> <publisher> IEEE Press, </publisher> <address> New York, NY. </address>
Reference-contexts: The user interface uses the World Wide Web. It allows users to specify requests and monitor robot progress. 3 While this division of functionality is certainly not novel, each module offers novel approaches with solid theoretical foundations. Obstacle avoidance is performed by our Curvature-Velocity Method (CVM) <ref> [30] </ref>. Navigation is done using Partially Observable Markov Decision Process models [32]. Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [15]. Task planning is performed using the planning system prodigy [16]. <p> If it gets stuck, the obstacle avoidance module will signal the other modules with a description of the problem encountered. The obstacle avoidance layer avoids static and dynamic obstacles, while it moves in the direction provided by the navigation layer. It uses our Curvature Velocity Method <ref> [30] </ref> to optimize, in real time, an objective function that combines safety, speed, and progress along the desired heading. This way it provides high-speed, safe motion that takes the dynamics of the robot into account. <p> For example, the "dynamic window" approach [13] takes robot dynamics into account by operating in velocity space, and chooses robot velocities by trying to optimize an evaluation function. Our curvature-velocity method (CVM) <ref> [30] </ref>, which is very similar to this method, was developed somewhat later, but independently. CVM poses the obstacle avoidance problem as one of constrained optimization in the velocity space of the robot.
Reference: [31] <author> Reid Simmons, Richard Goodwin, Karen Zita Haigh, Sven Koenig, and Joseph O'Sullivan. </author> <title> A layered architecture for office delivery robots. </title> <editor> In W. Lewis Johnson, editor, </editor> <booktitle> Proceedings of First International Conference on Autonomous Agents (Agents '97), </booktitle> <pages> pages 245-252, </pages> <address> Marina del Rey, CA, 1997. </address> <publisher> ACM Press, </publisher> <address> New York, NY. </address>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot <ref> [24, 31] </ref> with the prodigy planning system [16, 33] in a setup where users can post tasks for which the planner generates appropriate plans, sends them to the robot, and monitors their execution. <p> More discussion on these points can be found elsewhere <ref> [31] </ref>. Acknowledgments The authors would like to thank Greg Armstrong, Lonnie Chrisman, Domingo Galardo, Soshi Iba, Tom Mitchell, Sebastian Thrun, Hank Wan, and numerous others for their help developing the robot and providing feedback on our research.
Reference: [32] <author> Reid Simmons and Sven Koenig. </author> <title> Probabilistic robot navigation in partially observable environments. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence (IJCAI-95), </booktitle> <pages> pages 1080-1087, </pages> <address> Montreal, Quebec, Canada, 1995. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: It allows users to specify requests and monitor robot progress. 3 While this division of functionality is certainly not novel, each module offers novel approaches with solid theoretical foundations. Obstacle avoidance is performed by our Curvature-Velocity Method (CVM) [30]. Navigation is done using Partially Observable Markov Decision Process models <ref> [32] </ref>. Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [15]. Task planning is performed using the planning system prodigy [16]. We illustrate the layers of our navigation architecture using a typical delivery scenario.
Reference: [33] <author> Manuela M. Veloso, Jaime Carbonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1) </volume> <pages> 81-120, </pages> <booktitle> 1995. </booktitle> <volume> 18 19 20 21 22 </volume>
Reference-contexts: 1 Introduction We have been working towards the goal of building autonomous robotic agents that are capable of planning and executing high-level tasks. Our framework consists of the integration of Xavier the robot [24, 31] with the prodigy planning system <ref> [16, 33] </ref> in a setup where users can post tasks for which the planner generates appropriate plans, sends them to the robot, and monitors their execution. <p> The task planner effectively handles the multiple asynchronous goals The task planner creates plans for user requests [16]. It relies on prodigy, a classical planning system <ref> [33] </ref>. <p> The task planning module is based on prodigy4.0 <ref> [33] </ref>. Prodigy is a domain-independent nonlinear problem solver that uses means-ends analysis and backward chaining to reason about multiple goals and multiple alternatives of achieving them. It has been extended to support real-world execution of its symbolic actions.
References-found: 33

