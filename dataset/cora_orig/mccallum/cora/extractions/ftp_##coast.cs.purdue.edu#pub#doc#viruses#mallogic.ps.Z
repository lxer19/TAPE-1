URL: ftp://coast.cs.purdue.edu/pub/doc/viruses/mallogic.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ42.html
Root-URL: http://www.cs.purdue.edu
Title: An Overview of Computer Viruses in a Research Environment  
Author: Matt Bishop 
Address: Hanover, NH 03755  
Affiliation: Department of Mathematics and Computer Science Dartmouth College  
Note: Page 1 of 32  
Abstract: The threat of attack by computer viruses is in reality a very small part of a much more general threat, specifically attacks aimed at subverting computer security. This paper examines computer viruses as malicious logic in a research and development environment, relates them to various models of security and integrity, and examines current research techniques aimed at controlling the threats viruses in particular, and malicious logic in general, pose to computer systems. Finally, a brief examination of the vulnerabilities of research and development systems that malicious logic and computer viruses may exploit is undertaken. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Al-Dossary, </author> <title> Computer Virus Prevention and Containment on Mainframes, </title> <booktitle> Computers and Security 9(2) (Apr. 1990) pp. </booktitle> <pages> 131-137. </pages>
Reference-contexts: So, while some of the following discussion may be fruitfully applied to computer systems in those environments (for example, see <ref> [1] </ref>), many of the underlying assumptions of system management and administration simply do not apply to those environments. First, we shall review what a computer virus is, and analyze the properties that make it a threat to computer security.
Reference: [2] <author> L. Adelman, </author> <title> An Abstract Theory of Computer Viruses,, </title> <booktitle> Advances in Cryptology CRYPTO 88 Proceedings, </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, NY (Aug. </address> <note> 1988) pp. 354-374. </note>
Reference: [3] <author> M. Adkins, G. Dolsen, J. Heaney, and J. </author> <title> Page, The Argus Security Model, </title> <booktitle> Twelfth National Computer Security Conference Proceedings (Oct. 1989) pp. </booktitle> <pages> 123-134. </pages>
Reference-contexts: After that, the program cannot be modified. This scheme recognizes that viruses treat programs as data (when they infect them by changing the files contents) and as instructions (when the program executes and spreads the virus), and rigidly separates the two. The Argus Security Model <ref> [3] </ref> uses the same principle. Page 9 of 32 Duff [45] has suggested a variant for UNIX-based systems.
Reference: [4] <author> J. Anderson, </author> <title> Computer Security Technology Planning Study, </title> <institution> ESD-TR-73-51, Air Force Electronic Systems Division, Hanscom Air Force Base, </institution> <address> MA (1974). </address>
Reference-contexts: UNIX is a registered rrademark of AT&T Bell Laboratories. 2. VAX and VMS are registered trademarks of Digital Equipment Corporation. 3. D. Edwards first referred to this type of program as a Trojan horse in <ref> [4] </ref> Page 3 of 32 Many studies have shown the effectiveness of the Trojan horse attack (see [99][101], for example), and one such study [74] described a Trojan horse that reproduces itself (a replicating Trojan horse).
Reference: [5] <author> A. Avizienis, </author> <title> The N-Version Approach to Fault-Tolerant Software, </title> <journal> IEEE Transactions on Software Engineering SE-11(12) (Dec. 1985) pp. </journal> <pages> 1491-1501. </pages>
Reference-contexts: Later proposals advocate checking each instruction [35]. These schemes raise issues of key management and protection, as well as how much the software managing keys, transmitting the control ow graph to the co-processor, and implementing the recovery mechanism, may be trusted. A proposal based on N-Version Programming <ref> [5] </ref> requires implementing several different versions of an algorithm, running them concurrently and periodically checking intermediate results against each other.
Reference: [6] <author> A. Avizienis, M. Lyu, and W. Schutz, </author> <title> In Search of Effective Diversity: A Six-Language Study of Fault-Tolerant Control Software, </title> <type> Technical Report CSD-870060, </type> <institution> University of California, </institution> <address> Los Angeles, CA (Nov. </address> <year> 1987). </year>
Reference: [7] <author> D. Bader, </author> <title> Bad Versions of FLUSHOT (for IBM PC), </title> <journal> Virus-L Digest 1(8) (Nov. </journal> <volume> 15, </volume> <year> 1988). </year>
Reference-contexts: More widely known is the Trojan horse in a doctored copy of the anti-virus program FLUSHOT [64]; later versions are called FSP+ to avoid confusion with the tampered version <ref> [7] </ref>. 6.4. Backups and Recovery Using backups to replace infected files, or files which contain malicious logic, may remove such programs from the system. As most systems make backup copies of files which have changed 9.
Reference: [8] <author> D. Bauer and M. Koblentz, </author> <title> NDIX A Real-Time Intrusion Detection Expert System, </title> <booktitle> 1989 Summer USENIX Conference Proceedings (June 1988) pp. </booktitle> <pages> 261-274. </pages>
Reference: [9] <author> D. Bell and L. LaPadula, </author> <title> Secure Computer Systems: Unified Exposition and MULTICS Interpretation, </title> <type> Technical Report MTR-2997, </type> <institution> MITRE Corporation, Bedford, </institution> <address> MA (July 1975). </address>
Reference-contexts: Then the controls usually enforce some variant of the Bell-LaPadula model <ref> [9] </ref>: a subject may read an object only if the subjects security classification dominates that of the object (the simple security property) and a subject may modify an object only if the objects security classification dominates that of the subject (the *-property or the confinement property).
Reference: [10] <author> B. Bershad and C. Pinkerton, Watchdogs: </author> <title> Extending the UNIX File System, </title> <booktitle> 1988 Winter USENIX Conference Proceedings (Feb. 1988) pp. </booktitle> <pages> 267-276. </pages>
Reference: [11] <author> K. Biba, </author> <title> Integrity Considerations for Secure Computer Systems, </title> <type> Technical Report ESD-TR-76-372, </type> <institution> Air Force Electronic Systems Division, Hanscom Air Force Base, </institution> <address> MA (1977). </address>
Reference-contexts: Policies using mandatory access controls to limit modification of entities often implement the mathematical dual of the multilevel security model described above. Multilevel integrity models define integrity levels and classes analogous to those of the multilevel security models; then controls may enforce the Biba integrity model <ref> [11] </ref>, which allows a subject to read an entity only if the entitys integrity classification dominates that of the subject (the simple integrity property), and a subject to modify an entity only if the subjects integrity classification dominates that of the entity (the integrity confinement property).
Reference: [12] <author> M. Bishop, </author> <title> How to Write a Setuid Program, </title> <type> ;login: </type> <month> 12(1) (Jan. </month> <pages> 1987) pp. 5-11. </pages>
Reference: [13] <author> M. Bishop, </author> <title> Auditing Files on a Network of UNIX Machines, </title> <booktitle> Proceedings of the UNIX Security Workshop (Aug. 1988) pp. </booktitle> <pages> 51-52. </pages>
Reference-contexts: The best auditing methods use a mechanism that records changes to files or their characteristics. Such schemes require kernel modifications [102] and should be designed into new systems [57][79][96]; if a site has only object code, it cannot add these mechanisms and so must scan the file system <ref> [13] </ref>. Audit logs must also be protected from illicit modification; again, an element of trust in the underlying subsystem is needed.
Reference: [14] <author> M. Bishop, </author> <title> A Model of Security Monitoring, </title> <booktitle> Proceedings of the Fifth Annual Computer Security Applications Conference (Dec. 1989) pp. </booktitle> <pages> 46-52. </pages> <note> Page 19 of 32 </note>
Reference: [15] <author> M. Bishop, </author> <title> An Authentication Mechanism for USENET, </title> <booktitle> 1991 Winter USENIX Conference Proceedings (Jan. 1991) pp. </booktitle> <pages> 281-287. </pages>
Reference: [16] <author> W. Boebert and C. Ferguson, </author> <title> A Partial Solution to the Discretionary Trojan Horse Problem, </title> <booktitle> Proceedings of the Eighth Computer Security Conference (sep. 1985) pp. </booktitle> <pages> 245-253. </pages>
Reference-contexts: A master directory, accessible only to a trusted hardware controller, associates with each procedure a unique owner, and with each user a list of others whom that user trusts. Before executing any procedure, the dynamic linker checks that the user executing the procedure trusts the procedures owner <ref> [16] </ref>. This scheme assumes that users trust in one another is always well-placed. Page 10 of 32 A more general proposal [137] suggests placing programs to be protected at the lowest possible level of an implementation of a multilevel security policy.
Reference: [17] <author> W. Boebert and R. Kain, </author> <title> A Practical Alternative to Hierarchical Integrity Policies, </title> <booktitle> Proceedings of the Eighth Computer Security Conference (Sep. 1985) pp. </booktitle> <pages> 18-27. </pages>
Reference-contexts: An assumption is that the signed file does not contain a virus before it is signed. Page [100] has suggested expanding the model in <ref> [17] </ref> to include the software development process (in effect limiting execution domains for each development tool and user) to ensure software is not contaminated during development.
Reference: [18] <author> W. Boebert, W. Young, R. Kain, and S. Hansohn, </author> <title> Secure Ada Target: Issues, System Design, and Verification, </title> <booktitle> Proceedings of the 1985 Symposium on Security and Privacy (Apr. 1985) pp. </booktitle> <pages> 176-183. </pages>
Reference-contexts: Computer Viruses Acting as Both Data and Instructions Techniques exploiting this property treat all programs as type data until some certifying authority changes the type to executable (instructions). Both new systems designed to meet strong security policies and enhancements to existing systems use this method. Boebert and Kain <ref> [18] </ref> have proposed labelling subjects and objects in the Logical Coprocessor Kernel or LOCK (formerly the Secure Ada Target or SAT) [17][61][112][113], a system designed to meet the highest level of security under the Department of Defense criteria [43].
Reference: [19] <author> D. Bonyun, </author> <title> The Role of a Well Defined Auditing Process in the Enforcement of Privacy Policy and Data Security, </title> <booktitle> Proceedings of the 1981 Symposium on Security and Privacy (Apr. 1981) pp. </booktitle> <pages> 19-25. </pages>
Reference: [20] <author> J. Brunner, </author> <title> The Shockwave Rider, </title> <address> Ballantine York City, NY (1975). </address>
Reference: [21] <author> S. Bunch, </author> <title> The Setuid Feature in UNIX and Security, </title> <booktitle> Tenth National Computer Security Conference Proceedings (Sep. 1987) pp. </booktitle> <pages> 245-253. </pages>
Reference: [22] <author> R. Burger, </author> <title> Computer Viruses A High-Tech Disease, Abacus, Grand Rapids, </title> <address> MI (1988). </address>
Reference: [23] <author> L. Chen, </author> <title> Improving Software Reliability by N-Version Programming, </title> <type> Technical Report Eng-7843, </type> <institution> University of California, </institution> <address> Los Angeles, CA (Aug. </address> <year> 1978). </year>
Reference: [24] <author> D. Clark and D. Wilson, </author> <title> A Comparison of Commercial and Military Computer Security Policies, </title> <booktitle> Proceedings of the 1987 Symposium on Security and Privacy (Apr. 1987) pp. </booktitle> <pages> 184-194. </pages>
Reference-contexts: Lipner has proposed using the multilevel disclosure model to enforce multilevel integrity by assigning classifications and levels to appropriate user communities [87]; however, he notes that malicious logic could write up and thereby infect programs or alter production data and code. Clark and Wilson have proposed an alternate model <ref> [24] </ref> in which data and programs are manipu Page 5 of 32 lated by well-defined transformation procedures, these procedures having been certified by the system security officer as complying with the site integrity policy.
Reference: [25] <author> F. Cohen, </author> <title> Computer Viruses: Theory and Experiments, </title> <booktitle> Seventh DOD/NBS Computer Security Conference Proceedings (Sep. 1984) pp. </booktitle> <pages> 240-263. </pages>
Reference-contexts: After exploring some of the research in secure systems that show promise for coping with viruses, we examine several specific areas of vulnerability in research-oriented systems. We conclude with a quick summary. 2. What is a Computer Virus? Computer viruses do not appear spontaneously <ref> [25] </ref>; an attacker must introduce one to the targeted computer system, usually by persuading, or tricking, someone with legitimate access into placing the virus on the system. <p> If such a program infects another by inserting a copy of itself into the other file or process, it is a computer virus. (See sidebar 2; Leonard Adelman first called programs with the infection property viruses in a computer security seminar in 1983 <ref> [25] </ref>.) A computer virus infects other entities during its infection phase, and then performs some additional (possibly null) actions during its execution phase. <p> Viruses Assuming the Identity of a User Among the many enhancements to discretionary access controls are suggestions to allow the user to reduce the associated protection domain [29][72][121][134]; to base access to files on some characteristic of the command or program [27][81], possibly including subject authorizations as well <ref> [25] </ref>; and to use a knowledge-based subsystem to determine if a program makes reasonable file accesses [73]. Allowing users to specify semantics for file accesses [10][36] may prove useful in some contexts, for example protecting a limited set of files.
Reference: [26] <author> F. Cohen, </author> <title> Computer Viruses: Theory and Experiments, Computers and Security 6(1) (Feb. </title> <booktitle> 1987) pp. </booktitle> <pages> 22-35. </pages>
Reference: [27] <author> F. Cohen, </author> <title> On the Implications of Computer Viruses and Methods of Defense, </title> <booktitle> Computers and Security 7(2) (Apr. 1988) pp. </booktitle> <pages> 167-184. </pages>
Reference-contexts: My thanks to them also. 10. Cohen tantalizingly claims that one has been found, but reports no other details <ref> [27] </ref>.
Reference: [28] <author> F. Cohen, </author> <title> Maintaining a Poor Persons Information Integrity, </title> <booktitle> Computers and Security 7(5) (Oct. 1988) pp. </booktitle> <pages> 489-494. </pages>
Reference-contexts: Computing Base Users assume that the computer system provides a set of trustworthy tools for compiling, linking and loading, and running programs. In most systems, the trust is the users estimate of the quality of the tools available <ref> [28] </ref> and the working environment. If the estimates are incorrect, the system may be subverted. Even systems with security enhancements are vulnerable.
Reference: [29] <author> F. Cohen, </author> <title> Practical Defenses Against Computer Viruses, Computers and Security 8(2) Page 20 of 32 (Apr. </title> <booktitle> 1989) pp. </booktitle> <pages> 149-160. </pages>
Reference: [30] <author> F. Cohen, </author> <title> Computational Aspects of Computer Viruses, </title> <journal> Computers and Security 8(4) (June 1989) pp. </journal> <pages> 325-344. </pages>
Reference-contexts: Further, viruses can be programmed to mutate, and hence be able to evade those agents, which in turn can be programmed to detect the mutations; and in the general case, whether or not one virus mutated to produce another virus is Page 6 of 32 also undecidable <ref> [30] </ref>. 4. A Brief History of Computer Viruses and Related Programs One of the earliest documented replicating Trojan horses was a version of the game program animal which when played created another copy of itself.
Reference: [31] <author> F. Cohen, </author> <title> A Short Course on Computer Viruses, </title> <publisher> ASP Press, </publisher> <address> Pittsburgh, PA (1990). </address>
Reference: [32] <author> S. Crocker and M. Pozzo, </author> <title> A Proposal for a Verification-Based Virus Filter, </title> <booktitle> Proceedings of the 1989 IEEE Symposium on Security and Privacy (May 1989) pp. </booktitle> <pages> 319-324. </pages>
Reference-contexts: If an object file contains conditionals not corresponding to any in the source, the object may be infected [54]. A fourth proposal suggests designing a filter to detect, analyze, and classify all modifications that a program will make as ordinary or suspicious <ref> [32] </ref>.
Reference: [33] <author> D. Curry, </author> <title> Improving the Security of Your UNIX System, </title> <type> Technical Report ITSTD-721-FR-90-91, </type> <institution> SRI International, </institution> <address> Menlo Park, CA 94025 (Apr. </address> <year> 1990). </year>
Reference: [34] <author> J. David, </author> <title> Treating Viral Fever Computers and Security 7(2) (Apr. </title> <booktitle> 1988) pp. </booktitle> <pages> 255-258. </pages>
Reference: [35] <author> G. Davida, Y. Desmedt, and B. Matt, </author> <title> Defending Systems Against Viruses through Cryptographic Authentication, </title> <booktitle> Proceedings of the 1989 Symposium on Security and Privacy (May 1989) pp. </booktitle> <pages> 312-318. </pages>
Reference-contexts: The more general (non-network) software distribution problem has similar requirements <ref> [35] </ref>. Anti-virus agents check files for specific viruses and if present either warn the user or attempt to cure the infection by removing the virus. <p> When the program is run, the processor recomputes checksums, and at each branch, a co-processor compares the computed checksum to the encrypted checksum; if they differ, an error (which may be an infection) has occurred. Later proposals advocate checking each instruction <ref> [35] </ref>. These schemes raise issues of key management and protection, as well as how much the software managing keys, transmitting the control ow graph to the co-processor, and implementing the recovery mechanism, may be trusted.
Reference: [36] <author> G. Davida and B. Matt, </author> <title> UNIX Guardians: Delegating Security to the User, </title> <booktitle> Proceedings of the UNIX Security Workshop (Aug. 1988) pp. </booktitle> <pages> 14-23. </pages>
Reference: [37] <author> H. DeMaio, </author> <title> Viruses Management Issue, </title> <booktitle> Computers and Security 8(5) (Oct. 1989) pp. </booktitle> <pages> 381-388. </pages>
Reference-contexts: Thus, between the mounting and the attempt to restore, another program containing malicious logic could easily infect or erase a mounted backup. 6.5. The Human Factor It has been said that computer viruses are a management issue, because they are introduced by people <ref> [37] </ref>; the same may be said for all malicious logic, and computer security in general. Ideally, security procedures should balance the security and safety of the system and data with the needs of the users and systems personnel to get work done.
Reference: [38] <author> D. Denning, </author> <title> An Intrusion-Detection Model, </title> <journal> IEEE Transactions on Software Engineering SE-13(2) (Feb. 1987) pp. </journal> <pages> 222-232. </pages>
Reference-contexts: Denning has suggested using an intrusion-detection expert system to detect viruses by looking for increases in the size of files, increases in the frequency of writing to executable files, or alterations in the frequency of executing a specific program in ways not matching the profile of users spreading the infection <ref> [38] </ref>. Several such systems have been implemented [8][88][126] and have detected many anomalies without noticeably degrading the monitored computer. These experiments did not attempt to validate claims about detecting viruses.
Reference: [39] <author> P. Denning, </author> <title> The Science of Computing: Computer Viruses, </title> <journal> American Scientist 76(3) (May 1988) pp. </journal> <pages> 236-238. </pages>
Reference-contexts: Others treat the infection phase as overt and distinguish between the virus and the Trojan horse, since a virus may infect and perform no covert action [25][97]. But all agree that a virus may perform covert actions during the execution phase. Like Trojan horses <ref> [39] </ref>, computer viruses are instances of malicious logic or malicious programs.
Reference: [40] <author> P. Denning, </author> <title> Computers Under Attack: Intruders, Worms, and Viruses, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, MA (1990), </address>
Reference: [41] <author> A. Dewdeney, </author> <title> Computer Recreations: A Core War Bestiary of Viruses, Worms, and Other Threats to Computer Memories, </title> <booktitle> Scientific American 252(3) (Mar. 1985) pp. </booktitle> <pages> 14-23. </pages>
Reference-contexts: Because it spread even more rapidly than the first version, this later program supplanted the first entirely. After a preset date, whenever anyone played the second version, it deleted itself after the game ended <ref> [41] </ref>. Ken Thompson created a far more subtle replicating Trojan horse when he rigged a compiler to break login security [107][127].
Reference: [42] <author> A. Dewdeny, </author> <title> Computer Recreations, </title> <booktitle> Scientific American 256(1) (Jan. 1987) pp. </booktitle> <pages> 14-20. </pages>
Reference-contexts: If these objects are improperly or inadequately protected, a process could bypass the virtual memory controls and write to any location in memory by placing data and addresses on the bus, thereby altering the instructions and data in anothers memory space (the core war games <ref> [42] </ref> did this). If any process could write to disks without the kernels intervention, anyone can change executable programs regardless of their protection and a virus can easily spread by taking advantage of the (lack of) protection. 7.
Reference: [43] <institution> Trusted Computer System Evaluation Criteria, DOD 5200.28-STD, Department of Defense (Dec. </institution> <year> 1985). </year>
Reference-contexts: Boebert and Kain [18] have proposed labelling subjects and objects in the Logical Coprocessor Kernel or LOCK (formerly the Secure Ada Target or SAT) [17][61][112][113], a system designed to meet the highest level of security under the Department of Defense criteria <ref> [43] </ref>. Once compiled, programs have the label data, and cannot be executed until a sequence of specific, auditable events changes the label to executable. After that, the program cannot be modified.
Reference: [44] <author> D. Downs, J. Rub, K. Kung, and C. Jordan, </author> <title> Issues in Discretionary Access Control, </title> <booktitle> Proceedings of the 1984 IEEE Symposium on Security and Privacy (Apr. 1984) pp. </booktitle> <pages> 208-218. </pages> <note> Page 21 of 32 </note>
Reference: [45] <author> T. Duff, </author> <title> Experiences with Viruses on UNIX Systems, </title> <booktitle> Computing Systems 2(2) (Spring 1989) pp. </booktitle> <pages> 155-172. </pages>
Reference-contexts: Duff did not violate the security mechanisms in any way when he seeded the original 48 programs <ref> [45] </ref>. By writing another virus in a language used by a command interpreter common to most UNIX systems, he disproved a common fallacy [50] that computer viruses are intrinsically machine dependent, and cannot spread to systems of varying architectures. <p> This scheme recognizes that viruses treat programs as data (when they infect them by changing the files contents) and as instructions (when the program executes and spreads the virus), and rigidly separates the two. The Argus Security Model [3] uses the same principle. Page 9 of 32 Duff <ref> [45] </ref> has suggested a variant for UNIX-based systems. Noting that users with execute permission for a file usually also have read permission, he proposes that files with execute permission be of type executable, and those without it be of type data. <p> Enforcing the principle of least privilege [110] can limit the files that malicious logic can read or write. If someone using a privileged account accidentally executes a program containing a com Page 16 of 32 puter virus, the virus will spread throughout the system rapidly <ref> [45] </ref>. Hence, simply logging in as a privileged user and remaining so empowered increases the possibility of accidentally triggering some form of malicious logic.
Reference: [46] <author> M. Eichin and J. Rochlis, </author> <title> With Microscope and Tweezers: An Analysis of the Internet Virus of November 1988, </title> <booktitle> Proceedings of the 1989 IEEE Symposium on Security and Privacy (Apr. 1989) pp. </booktitle> <pages> 326-343. </pages>
Reference-contexts: We use the conventional terminology of calling this program a computer worm because its dominant method of propagation was from computer system to computer system. Others, notably <ref> [46] </ref>, have labelled it a computer virus using a taxonomy more firmly grounded in biology than the conventional one. 8.
Reference: [47] <author> T. Eisenberg, D. Gries, J. Hartmanis, D. Holcomb, M. Lynn, and T. Santoro, </author> <title> The Computer Worm: A Report to the Provost of Cornell University on an Investigation Conducted by the Commission of Preliminary Enquiry, </title> <institution> Cornell University, </institution> <address> Ithaca, NY (Feb. </address> <year> 1989). </year>
Reference: [48] <author> P. Elmer-DeWitt, </author> <title> Invasion of the Data Snatchers: A Virus Epidemic Strikes Terror in the Computer World, Time (Sep. </title> <booktitle> 26, 1988) pp. </booktitle> <pages> 62-67. </pages>
Reference: [49] <author> V. Ffik, </author> <title> Are We Vulnerable to a Virus Attack: A Report from Sweden, </title> <booktitle> Computers and Security 7(2) (Apr. 1988) pp. </booktitle> <pages> 151-155. </pages>
Reference-contexts: A more persuasive argument, advanced by Ffik <ref> [49] </ref> and supported by Kurzban [80] is that, as only programmers can create computer viruses, and malicious mainframe programmers can accomplish their goals with less trouble than writing a computer virus, computer virus attacks will most likely be confined to personal computers.
Reference: [50] <author> R. Farrow, </author> <title> UNIX System Security, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, MA (1991). </address>
Reference-contexts: Duff did not violate the security mechanisms in any way when he seeded the original 48 programs [45]. By writing another virus in a language used by a command interpreter common to most UNIX systems, he disproved a common fallacy <ref> [50] </ref> that computer viruses are intrinsically machine dependent, and cannot spread to systems of varying architectures.
Reference: [51] <author> P. Fites, P. Johnston, and M. Kratz, </author> <title> The Computer Virus Crisis, </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York City, NY (1988). </address>
Reference-contexts: In another case, although vendors usually take care that their software contains no malicious logic, a company selling software for the Macintosh 9 unwittingly delivered copies of programs infected by a computer virus which printed a message asking for universal peace <ref> [51] </ref>. 6.3. Integrity of Programs The infection phase of a virus actions require writing to files; for reasons discussed earlier, discretionary access controls provide little protection.
Reference: [52] <author> M. Gabriele, </author> <title> Smart Terminals for Trusted Computer Systems, </title> <booktitle> Ninth National Computer Security Conference Proceedings (Sep. 1986) pp. </booktitle> <pages> 16-20. </pages>
Reference-contexts: A related but widely-ignored problem is the use of smart terminals to access privileged accounts. These terminals will respond to control sequences from a host by transmitting portions of the text on their screen back to the host <ref> [52] </ref>, and often perform simple editing functions for the host.
Reference: [53] <author> S. Garfinkel and G. Spafford, </author> <title> Practical UNIX Security, </title> <publisher> OReilly and Associates (1991). </publisher>
Reference: [54] <author> P. Garnett, </author> <title> Selective Disassembly: A First Step Towards Developing a Virus Filter, </title> <booktitle> Fourth Aerospace Computer Security Conference (Dec. 1988) pp. </booktitle> <pages> 2-6. </pages>
Reference-contexts: If an object file contains conditionals not corresponding to any in the source, the object may be infected <ref> [54] </ref>. A fourth proposal suggests designing a filter to detect, analyze, and classify all modifications that a program will make as ordinary or suspicious [32].
Reference: [55] <author> M. Gemignani, </author> <title> Viruses and Criminal Law, </title> <journal> CACM 32(6) (June 1989) pp. </journal> <pages> 669-671. </pages>
Reference: [56] <author> W. Gleissner, </author> <title> A Mathematical Theory for the Spread of Computer Viruses, Computers and Security 8(1) (Feb. </title> <booktitle> 1989) pp. </booktitle> <pages> 35-41. </pages>
Reference-contexts: As the programs containing viruses are shared among users, the viruses spread among those users [25][97] until all programs writable by any infected program are themselves infected <ref> [56] </ref>. 3. Malicious Logic, Computer Viruses, and Computer Security A sites security policy describes how users may access the computer system or information on it, and the policys nature depends largely on how the system is to be used.
Reference: [57] <author> V. Gligor, C. Chandersekaran, R. Chapman, L. Dotterer, M. Hecht, W. Jiang, A. Johri, G. Luckenbaugh, and N. Vasudevan, </author> <title> Design and Implementation of Secure Xenix, </title> <journal> IEEE Transactions on Software Engineering SE-13(2) (Feb. 1987) pp. </journal> <pages> 208-220. </pages>
Reference: [58] <author> F. Grampp and R. Morris, </author> <title> UNIX Operating System Security, </title> <journal> AT&T Bell Laboratories Technical Journal 63(8) (Oct. 1984) pp. </journal> <pages> 1649-1672. </pages>
Reference-contexts: In the above, the system administrator trusted the command interpreter to look for system programs before executing programs in users directories. Other examples include trusting that the login banner being presented is actually from the login program and not from a users program which will record passwords <ref> [58] </ref>, or that page faults cannot be detected while checking passwords one character at a time [82]. 6.2. Sharing Hardware and Software Intimately bound with the notion of trust is the ability to share.
Reference: [59] <author> J. Green and P. Sisson, </author> <title> The Father Christmas Worm, </title> <booktitle> Twelfth National Computer Security Conference Proceedings (Oct. </booktitle> <year> 1989)pp. </year> <pages> 359-368. </pages> <note> Page 22 of 32 </note>
Reference: [60] <author> K. Hafner, </author> <title> Is Your Computer Secure?, </title> <journal> Business Week (Aug. </journal> <volume> 1, </volume> <pages> 1987) pp. 64-72. </pages>
Reference: [61] <author> J. Haigh and W. Young, </author> <title> Extending the Non-Interference Version of MLS for SAT, </title> <booktitle> Proceedings of the 1986 IEEE Symposium on Security and Privacy (Apr. 1986) pp. </booktitle> <pages> 232-239. </pages>
Reference: [62] <author> H. Highland, </author> <title> Random Bits and Bytes: Case History of a Virus Attack, Computers and Security 7(1) (Feb. </title> <booktitle> 1988) pp. </booktitle> <pages> 3-5. </pages>
Reference: [63] <author> H. Highland, </author> <title> Random Bits and Bytes: Case History of a Virus Attack, Computers and Security 7(1) (Feb. </title> <booktitle> 1988) pp. </booktitle> <pages> 6-7. </pages>
Reference: [64] <author> H. Highland, </author> <title> Random Bits and Bytes: Computer Viruses A Post-Mortem, </title> <booktitle> Computers and Security 7(2) (Apr. 1988) pp. </booktitle> <pages> 117-127. </pages>
Reference-contexts: In February 1989, at Dartmouth College, a user ran an infected version of the virus detection program Interferon, infecting files on his disk. More widely known is the Trojan horse in a doctored copy of the anti-virus program FLUSHOT <ref> [64] </ref>; later versions are called FSP+ to avoid confusion with the tampered version [7]. 6.4. Backups and Recovery Using backups to replace infected files, or files which contain malicious logic, may remove such programs from the system. As most systems make backup copies of files which have changed 9. <p> the number of people with access to mainframes is relatively small compared to the number with access to personal computers [130], Highland suggests that as malicious people make up a very small fraction of all computer programmers, most likely fewer malicious people use research and development systems than personal computers <ref> [64] </ref>. A more persuasive argument, advanced by Ffik [49] and supported by Kurzban [80] is that, as only programmers can create computer viruses, and malicious mainframe programmers can accomplish their goals with less trouble than writing a computer virus, computer virus attacks will most likely be confined to personal computers.
Reference: [65] <author> H., Highland, </author> <title> The Brain Virus: Fact and Fantasy, </title> <booktitle> Computers and Security 7(4) (Aug. 1988) pp. </booktitle> <pages> 367-370. </pages>
Reference: [66] <author> H. Highland, </author> <title> Random Bits and Bytes: Another Poor Password Disaster, Computers and Security 9(1) (Feb. </title> <note> 1990) p. 10. </note>
Reference: [67] <author> L. Hoffman, </author> <title> Rogue Programs: Viruses, Worms, and Trojan Horses, </title> <publisher> Van Nostrand Rein-hold, </publisher> <address> New York City, NY (1990). </address>
Reference: [68] <author> Homer, </author> <title> The Odyssey, </title> <publisher> Penguin Books, </publisher> <address> New York City, NY (1946). </address>
Reference: [69] <author> H. Israel, </author> <title> Computer Viruses: Myth or Reality?, </title> <booktitle> Tenth National Computer Security Conference Proceedings (Sep. 1987) pp. </booktitle> <pages> 226-230. </pages>
Reference: [70] <author> M. Joseph, </author> <title> Towards the Elimination of the Effects of Malicious Logic: Fault Tolerance Approaches, </title> <booktitle> Tenth National Computer Security Conference Proceedings (Sep. 1987) pp. </booktitle> <pages> 238-244. </pages>
Reference: [71] <author> M. Joseph and A. Avizienis, </author> <title> A Fault Tolerant Approach to Computer Viruses, </title> <booktitle> Proceedings of the 1988 Symposium on Security and Privacy (Apr. 1988) pp. </booktitle> <pages> 52-58. </pages>
Reference: [72] <author> J. Juni and R. Ponto, </author> <title> Computer-Virus Infection of a Medical Diagnostic Computer, </title> <journal> New England Journal of Medicine 320(12) (Mar. </journal> <volume> 12, </volume> <pages> 1989) pp. 811-812. </pages>
Reference: [73] <author> P. Karger, </author> <title> Limiting the Damage Potential of Discretionary Trojan Horses, </title> <booktitle> Proceedings of the 1987 Symposium on Security and Privacy (Apr. 1987) pp. </booktitle> <pages> 32-37. </pages>
Reference-contexts: controls are suggestions to allow the user to reduce the associated protection domain [29][72][121][134]; to base access to files on some characteristic of the command or program [27][81], possibly including subject authorizations as well [25]; and to use a knowledge-based subsystem to determine if a program makes reasonable file accesses <ref> [73] </ref>. Allowing users to specify semantics for file accesses [10][36] may prove useful in some contexts, for example protecting a limited set of files.
Reference: [74] <author> P. Karger and R. Schell, </author> <title> MULTICS Security Evaluation: Vulnerability Analysis, </title> <type> Technical Report ESD-TR-74-193, </type> <institution> Air Force Electronic Systems Division, Hanscom Air Force Base, </institution> <address> MA (1974). </address> <note> Page 23 of 32 </note>
Reference-contexts: VAX and VMS are registered trademarks of Digital Equipment Corporation. 3. D. Edwards first referred to this type of program as a Trojan horse in [4] Page 3 of 32 Many studies have shown the effectiveness of the Trojan horse attack (see [99][101], for example), and one such study <ref> [74] </ref> described a Trojan horse that reproduces itself (a replicating Trojan horse).
Reference: [75] <author> S. Kent and J. Linn, </author> <title> Privacy Enhancement for Internet Electronic Mail: Part II -- Certificate-Based Key Management, </title> <address> RFC 1114 (Aug. </address> <year> 1989). </year>
Reference: [76] <author> B. Kernighan and T. Plauger, </author> <title> The Elements of Programming Style, </title> <publisher> McGraw-Hill Book Co., </publisher> <address> New York City, NY (1974). </address>
Reference-contexts: Page 12 of 32 5.6. Viruses Altering Statistical Characteristics Proposals to examine the appearance of programs for identical sequences of instructions or byte patterns [69][137] require a high number of comparisons and would need to take into account the reuse of common library routines or of code <ref> [76] </ref>.
Reference: [77] <author> J. Knight and N. Leveson, </author> <title> An Experimental Evaluation of the Assumption of Independence in Multi-version Programming, </title> <journal> IEEE Transactions on Software Engineering SE-12(1) (Jan. 1986) pp. </journal> <pages> 96-109. </pages>
Reference-contexts: This requires a majority of the programs not to be infected, and the underlying operating system to be secure. Also, the issue of the efficacy of N-version programming is highly questionable <ref> [77] </ref>. Despite claims that the method is feasible [6][23], detecting the spread of a virus would require voting upon each file system access; to achieve this level of comparison, the programs would all have to implement the same algorithm, which defeats the purpose of using N-version programming [78].
Reference: [78] <author> J. Knight and N. </author> <title> Leveson, </title> <booktitle> On N-version Programming, Software Engineering Notes 15(1) (Jan. 1990) pp. </booktitle> <pages> 24-35. </pages>
Reference-contexts: Despite claims that the method is feasible [6][23], detecting the spread of a virus would require voting upon each file system access; to achieve this level of comparison, the programs would all have to implement the same algorithm, which defeats the purpose of using N-version programming <ref> [78] </ref>. Page 12 of 32 5.6. Viruses Altering Statistical Characteristics Proposals to examine the appearance of programs for identical sequences of instructions or byte patterns [69][137] require a high number of comparisons and would need to take into account the reuse of common library routines or of code [76].
Reference: [79] <author> S. Kramer, </author> <title> Linus IV An Experiment in Computer Security, </title> <booktitle> Proceedings of the 1984 Symposium on Security and Privacy (Apr. 1984) pp. </booktitle> <pages> 24-31. </pages>
Reference: [80] <author> S. Kurzban, </author> <title> Viruses and Worms -- What Can You Do?, </title> <journal> SIGSAC Review 7(1) pp. </journal> <pages> 16-32. </pages>
Reference-contexts: A more persuasive argument, advanced by Ffik [49] and supported by Kurzban <ref> [80] </ref> is that, as only programmers can create computer viruses, and malicious mainframe programmers can accomplish their goals with less trouble than writing a computer virus, computer virus attacks will most likely be confined to personal computers.
Reference: [81] <author> N. Lai and T. Gray, </author> <title> Strengthening Discretionary Access Controls to Inhibit Trojan Horses and Computer Viruses, </title> <booktitle> 1988 Summer USENIX Conference Proceedings (June 1988) pp. </booktitle> <pages> 275-286. </pages>
Reference: [82] <author> B. Lampson, </author> <title> Hints for Computer System Design, </title> <booktitle> IEEE Software 1(1) (Jan. 1984) pp. </booktitle> <pages> 11-28. </pages>
Reference-contexts: Other examples include trusting that the login banner being presented is actually from the login program and not from a users program which will record passwords [58], or that page faults cannot be detected while checking passwords one character at a time <ref> [82] </ref>. 6.2. Sharing Hardware and Software Intimately bound with the notion of trust is the ability to share. When many computers share a copy of an infected program, every file accessible from every one of those machines can be infected.
Reference: [83] <author> R. Levin, </author> <title> Computer Virus Handbook, </title> <publisher> McGraw-Hill Book Co., </publisher> <address> New York City, NY (1990). </address>
Reference: [84] <author> T. Levin, S. Padilla, and C. </author> <title> Irvine, A Formal Model for UNIX Setuid, </title> <booktitle> Proceedings of the 1989 Symposium on Security and Privacy (May 1989) pp. </booktitle> <pages> 73-83. </pages>
Reference: [85] <author> P. Lewis, </author> <title> The Executive Computer: A Virus Carries Fatal Complications, </title> <address> New York Times (June 26, 1988) p. C-11. </address>
Reference: [86] <author> J. Linn, </author> <title> Privacy Enhancement for Internet Electronic Mail: Part III Algorithms, Modes, and Identifiers, </title> <address> RFC-1115 (Aug. </address> <year> 1989). </year>
Reference: [87] <author> S. Lipner, </author> <title> Non-Discretionary Controls for Commercial Applications, </title> <booktitle> Proceedings of the 1982 Symposium on Security and Privacy (Apr. 1982) pp. </booktitle> <pages> 2-10. </pages>
Reference-contexts: Hence, malicious logic can only damage those entities with lower or equal integrity classifications. Lipner has proposed using the multilevel disclosure model to enforce multilevel integrity by assigning classifications and levels to appropriate user communities <ref> [87] </ref>; however, he notes that malicious logic could write up and thereby infect programs or alter production data and code.
Reference: [88] <author> T. Lunt and R. Jagannathan, </author> <title> A Prototype Real-Time Intrusion-Detection Expert System, </title> <booktitle> Proceedings of the 1988 Symposium on Security and Privacy (Apr. 1988) pp. </booktitle> <pages> 59-66. </pages>
Reference: [89] <author> J. McAfee, </author> <title> 4096 and 1260 Viruses (PC), </title> <journal> Virus-L Digest 3(27) (Jan. </journal> <volume> 31, </volume> <year> 1990), </year> <note> submitted by A. Roberts. Page 24 of 32 </note>
Reference-contexts: A computer virus can defeat any auditing scheme by infecting a file and then altering the files contents or characteristics during the audit, for example by restoring the uncorrupted version temporarily. An example of such a stealth virus is the 4096 (personal computer) virus <ref> [89] </ref>. No program can determine if an arbitrary virus has infected a file because of the undecidability results cited earlier; however, virus detectors or anti-virus agents can check files for specific virus.
Reference: [90] <author> J. McAfee and C. Haynes, </author> <title> Computer Viruses, Worms, Data Diddlers, Killer Programs, and Other Threats to Your System, </title> <address> St. </address> <publisher> Martins Press, </publisher> <address> New York City, NY (1989). </address>
Reference: [91] <author> J. </author> <title> Markoff, Virus in Military Computers Disrupts Systems Nationwide, </title> <address> New York Times (Nov. 4, 1988) p. A-1. </address>
Reference: [92] <editor> J. Markoff, Top-Secret, And Vulnerable, </editor> <address> New York Times (Apr. 25, 1988) p. A-1. </address>
Reference: [93] <author> J. </author> <title> Markoff, Student Says Error in Experiment Jammed a Network of Computers, </title> <address> New York Times (Jan. 19, 1990) p. A-19. </address>
Reference-contexts: It is worth noting that the author of the Internet worm stated that the worm disabled machines due to a pro gramming error <ref> [93] </ref>. Page 18 of 32
Reference: [94] <author> V. McLellan, </author> <title> Computer Systems Under Siege, </title> <address> New York Times (Jan. 31, 1989) p. C-3. </address>
Reference: [95] <author> R. Merkle, </author> <title> A Fast Software One Way Hash Function, </title> <note> unpublished. </note>
Reference: [96] <author> G. Miller, S. Sutton, M. Matthews, J. Yip, and T. Thomas, </author> <title> Integrity Mechanisms in a Secure UNIX: </title> <note> GOULD UTX/32S, AIAA/ASIS/DODCI Second Aerospace Computer Security Conference: A Collection of Technical Papers (Dec. 1986) pp. 19-26. </note>
Reference: [97] <author> W. Murray, </author> <title> The Application of Epidemiology to Computer Viruses, Computers and Security 7(1) (Feb. </title> <booktitle> 1988) pp. </booktitle> <pages> 139-150. </pages>
Reference: [98] <author> P. Neumann and D. Parker, </author> <title> A Summary of Computer Misuse Techniques, </title> <booktitle> Twelfth National Computer Security Conference Proceedings (Oct. 1989) pp. </booktitle> <pages> 396-407. </pages>
Reference-contexts: Exceptions would most likely be motivated by a perceived intellectual challenge of creating a virus, by a desire to demonstrate limits of existing security mechanisms, by a desire for publicity, or attacks launched simply by carelessness or error <ref> [98] </ref>. 11 Should an attacker use a computer virus or other malicious program, security mechanisms currently in use will be as effective as they are against other types of attacks.
Reference: [99] <author> A. Norman, </author> <title> Computer Insecurity, </title> <publisher> Chapman and Hall, </publisher> <address> New York City, NY (1983). </address>
Reference-contexts: Suffice it to say that the vulnerability of computer systems to such attacks is well known, and attacks on computer systems are common enough (see both <ref> [99] </ref> and [101] for descriptions of such incidents) that the use of mechanisms to inhibit them is generally agreed to be worthwhile. 5. <p> Little if anything can be done to prevent compromise by trusted personnel. Malicious users and system administrators can often circumvent security policy restrictions without being stopped, or even detected, by using the exceptions to the mechanisms enforcing the policies. (See <ref> [99] </ref> for examples of these inside jobs.) The study of computing ethics, or of a code of ethical conduct, reduces this threat by making clear what actions are considered acceptable; should a breach occur, legal remedies may be available [55][111]. 6.6.
Reference: [100] <author> J. </author> <title> Page, An Assured Pipeline Integrity Scheme for Virus Protection, </title> <booktitle> Twelfth National Computer Security Conference Proceedings (Oct. 1989) pp. </booktitle> <pages> 369-377. </pages>
Reference-contexts: An assumption is that the signed file does not contain a virus before it is signed. Page <ref> [100] </ref> has suggested expanding the model in [17] to include the software development process (in effect limiting execution domains for each development tool and user) to ensure software is not contaminated during development.
Reference: [101] <author> D. Parker, </author> <title> Crime by Computer, </title> <publisher> Charles Scribners Sons, </publisher> <address> New York City, NY (1976). </address>
Reference-contexts: Suffice it to say that the vulnerability of computer systems to such attacks is well known, and attacks on computer systems are common enough (see both [99] and <ref> [101] </ref> for descriptions of such incidents) that the use of mechanisms to inhibit them is generally agreed to be worthwhile. 5. <p> All too often, users (and systems personnel) see them as burdens to be evaded. Lack of awareness of the reasons for security procedures and mechanisms leads to carelessness or negligence, which can in turn lead to system compromise (see for example <ref> [101] </ref>). Little if anything can be done to prevent compromise by trusted personnel. <p> existence) of attacks, virus or otherwise, is common; it is estimated that victims report only 10% to 35% of computer crimes in general [119][129], in part to prevent embarrassment or loss of public confidence in the company, or to avoid the expense of gathering sufficient evidence to prosecute the offender <ref> [101] </ref>. 11. It is worth noting that the author of the Internet worm stated that the worm disabled machines due to a pro gramming error [93]. Page 18 of 32
Reference: [102] <author> J. Picciotto, </author> <title> The Design of an Effective Auditing Subsystem, </title> <booktitle> Proceedings of the 1987 Symposium on Security and Privacy (Apr. 1987) pp. </booktitle> <pages> 13-22. </pages>
Reference-contexts: The best auditing methods use a mechanism that records changes to files or their characteristics. Such schemes require kernel modifications <ref> [102] </ref> and should be designed into new systems [57][79][96]; if a site has only object code, it cannot add these mechanisms and so must scan the file system [13]. Audit logs must also be protected from illicit modification; again, an element of trust in the underlying subsystem is needed.
Reference: [103] <author> G. Popek and B. Walker, </author> <title> The LOCUS Distributed System Architecture, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA (1985). </address>
Reference-contexts: Page [100] has suggested expanding the model in [17] to include the software development process (in effect limiting execution domains for each development tool and user) to ensure software is not contaminated during development. Pozzo and Grey [104][105] have implemented Bibas integrity model on the distributed operating system LOCUS <ref> [103] </ref> to make the level of trust in the above assumption explicit. They have different classes of signed executable programs. Credibility ratings (Bibas integrity levels) assign a measure of trustworthiness on a scale of 0 (unsigned) to N (signed and formally verified), based on the origin of the software.
Reference: [104] <author> M. Pozzo and T. Gray, </author> <title> A Model for the Containment of Computer Viruses, </title> <booktitle> AIAA/ASIS/ DODCI Second Aerospace Computer Security Conference (Dec. 1986) pp. </booktitle> <pages> 11-18. </pages>
Reference: [105] <author> M. Pozzo and T. Gray, </author> <title> An Approach to Containing Computer Viruses, </title> <booktitle> Computers and Security 6(4) (Aug. 1987) pp. </booktitle> <pages> 321-331. </pages>
Reference: [106] <author> B. Randell, P. Lee, and P. Treleaven, </author> <title> Reliability Issues in Computing System Design, </title> <note> Page 25 of 32 Computing Surveys 10(2) (June 1978) pp. 167-196. </note>
Reference-contexts: If this is considered an error as well as a breach of security, fault-tolerant computer systems, which are designed to continue reliable operation when errors occur, could constrain malicious logic. Designers of reliable systems place emphasis on both recovery and preventing failures <ref> [106] </ref>; however, if malicious logic discloses information or gives away rights, or controls other critical systems (such as life support systems), recovery may not be possible. So the areas of reliability and fault-tolerance are relevant to the study of malicious logic, but those areas of fault recovery are less so.
Reference: [107] <author> D. Ritchie, </author> <title> Joy of Reproduction, </title> <journal> USENET newsgroup net.lang.c (Nov. </journal> <volume> 4, </volume> <year> 1982). </year>
Reference: [108] <author> R. Roberts, </author> <title> Computer Viruses, Compute! Books, </title> <address> Greensboro, NC (1988). </address>
Reference: [109] <author> J. Rochlis and M. Eichin, </author> <title> With Microscope and Tweezers: The Worm from MITs Perspective, </title> <journal> CACM 32(6) (June 1989) pp. </journal> <pages> 689-698. </pages>
Reference: [110] <author> J. Saltzer and M. Schroeder, </author> <title> The Protection of Information in Computer Systems, </title> <booktitle> Proceedings of the IEEE 63(9) (Sep. 1975) pp. </booktitle> <pages> 1278-1308. </pages>
Reference-contexts: Multiple Levels of Privilege Multi-user computer systems often provide many different levels of privilege; for example, UNIX provides a separate set of privileges for each user, and one all-powerful superuser. Enforcing the principle of least privilege <ref> [110] </ref> can limit the files that malicious logic can read or write. If someone using a privileged account accidentally executes a program containing a com Page 16 of 32 puter virus, the virus will spread throughout the system rapidly [45]. <p> As many computers use such terminals as their consoles, and allow access to the most privileged accounts only when the user is at the console, the danger is obvious. 6.7. Direct Device Access The principle of complete mediation <ref> [110] </ref> requires checking the validity of every access. Although multi-user systems have virtual memory protection to prevent processes from writing into each others memory, some represent devices and memory as addressable objects (such as files).
Reference: [111] <author> P. Samuelson, </author> <title> Can Hackers Be Sued for Damages Caused by Computer Viruses?, </title> <journal> CACM 32(6) (June 1989) pp. </journal> <pages> 666-669. </pages>
Reference: [112] <author> O. Saydjari, J. Beckman, and J. Leaman, </author> <title> Locking Computers Securely, </title> <booktitle> Tenth National Computer Security Conference Proceedings (Sep. 1987) pp. </booktitle> <pages> 129-141. </pages>
Reference: [113] <author> O. Saydjari, J. Beckman, and J. Leaman, LOCK Trek: </author> <title> Navigating Uncharted Space, </title> <booktitle> Proceedings of the 1989 Symposium on Security and Privacy (May 1989) pp. </booktitle> <pages> 167-175. </pages>
Reference: [114] <author> R. Schatz, </author> <title> New Virus Infects NASA Macintoshes, Washington Post (Apr. </title> <type> 18, </type> <institution> 1988), Washington Business section, </institution> <address> p. </address> <month> 25. </month>
Reference: [115] <author> J. Schoch and J. Hupp, </author> <title> The Worm Programs Early Experiences with a Distributed Computation, </title> <journal> CACM 25(3) (Mar. 1982) pp. </journal> <pages> 172-180. </pages>
Reference-contexts: Mandatory access controls prevent processes from crossing protection domain boundaries. Discretionary access controls condition permission to cross domain boundaries upon both the process identity and information associated with 4. Originally, a worm was simply a distributed computation <ref> [115] </ref>; it is now most often used in the above sense. Page 4 of 32 the object to be accessed. Policies using mandatory access controls to prevent disclosure define a linear ordering of security levels, and a set of classes into which information is placed.
Reference: [116] <author> P. Scott, Re: </author> <title> Faking Internet Mail [Re: RISKS-8.27], Forum on the Risks to the Public in Computers and Related Systems 8(28) (Feb. </title> <type> 19, </type> <year> 1989). </year>
Reference: [117] <author> D. Seeley, </author> <title> Password Cracking: A Game of Wits, </title> <journal> CACM 32(6) (June 1989) pp. </journal> <pages> 700-703. </pages>
Reference: [118] <author> D. Seeley, </author> <title> A Tour of the Worm, </title> <booktitle> Proceedings of USENIX Winter 89 (Jan. 1989) pp. </booktitle> <pages> 287-304. </pages>
Reference: [119] <author> P. Singer, </author> <title> Trying to Put a Brake on Computer Theft, </title> <address> New York Times (Mar. 2, 1986) p. WC-17. </address>
Reference: [120] <author> K. Smith, </author> <title> Tales of the Damned, UNIX Review 6(2) (Feb. </title> <booktitle> 1988) pp. </booktitle> <pages> 45-50. </pages>
Reference-contexts: As the command interpreter checked for commands in the current working directory and then in the system directories, the users doctored lister, not the system lister, was executed <ref> [120] </ref>. In the above, the system administrator trusted the command interpreter to look for system programs before executing programs in users directories.
Reference: [121] <author> T. Smith, </author> <title> User Definable Domains as a Mechanism for Implementing the Least Privilege Principle, </title> <booktitle> Ninth National Computer Security Conference Proceedings (Sep. 1986) pp. </booktitle> <pages> 143-148. </pages>
Reference: [122] <author> E. Spafford, Crisis and Aftermath, </author> <note> CACM 32(6) (June 1989) pp. 678-687. Page 26 of 32 </note>
Reference: [123] <author> E. Spafford, </author> <title> The Internet Worm Program: An Analysis, </title> <journal> ACM Computer Communications Review 19(1) (Jan. </journal> <year> 1989). </year>
Reference: [124] <author> E. Spafford, K. Heaphy, and D. Ferbrache, </author> <title> Computer Viruses: Dealing with Electronic Vandalism and Programmed Threats, </title> <address> ADAPSO, Arlington, VA (1989). </address>
Reference: [125] <author> C. Stoll, </author> <title> An Epidemiology of Viruses & Network Worms, </title> <booktitle> Twelfth National Computer Security Conference Proceedings (Oct. </booktitle> <year> 1989)pp. </year> <pages> 369-377. </pages>
Reference: [126] <author> H. Teng, K. Chen, and S. Lu, </author> <title> Adaptive Real-Time Anomaly Detection Using Inductively Generated Sequential Patterns, </title> <booktitle> Proceedings of the 1990 Symposium on Research in Security and Privacy (May 1990) pp. </booktitle> <pages> 278-284. </pages>
Reference: [127] <author> K. Thompson, </author> <title> Reections on Trusting Trust, </title> <journal> Communications of the ACM 27(8) (Aug. 1984) pp. </journal> <pages> 761-763. </pages>
Reference-contexts: Josh Alden of the Dartmouth Virus Clinic described the Interferon infection incident, Robert Van Cleef and Gene Spafford helped reconstruct the USENET logic bomb incident, and Ken Thompson confirmed that he had indeed doctored an internal version of the C compiler as described in <ref> [127] </ref>. My thanks to them also. 10. Cohen tantalizingly claims that one has been found, but reports no other details [27].
Reference: [128] <author> M. Todd, </author> <title> Man Catches Computer Virus!, Weekly World News p. </title> <address> 29 (June 18, </address> <year> 1991). </year>
Reference: [129] <author> United States Comptroller General, </author> <title> Computer-Related Crimes in Federal Programs, </title> <type> Report FGMSD-76-27, </type> <institution> United States Government Printing Office, </institution> <address> Washington, D. C. </address> <month> (Apr. 27, </month> <year> 1976). </year>
Reference: [130] <author> United States Congress Office of Technology Assessment, </author> <title> Defending Secrets, Sharing Data: New Locks and Keys for Electronic Information, </title> <type> Report OTA-CIT-310, </type> <institution> United States Government Printing Office, </institution> <address> Washington, D. C. </address> <month> (Oct. </month> <year> 1987). </year>
Reference-contexts: Although reports of malicious programs in general abound, no non-experimental computer viruses have been reported on mainframe systems. 10 Noting that the number of people with access to mainframes is relatively small compared to the number with access to personal computers <ref> [130] </ref>, Highland suggests that as malicious people make up a very small fraction of all computer programmers, most likely fewer malicious people use research and development systems than personal computers [64].
Reference: [131] <author> Virgil, </author> <title> The fineid, Random House, </title> <address> New York City, NY (1983). </address>
Reference: [132] <author> C. von Rospach, </author> <title> How to Post a Fake, Forum on the Risks to the Public in Computers and Related Systems 4(75) (Apr. </title> <type> 20, </type> <year> 1987). </year>
Reference: [133] <author> V. Voydock and S. Kent, </author> <title> Security Mechanisms in High-Level Network Protocols, </title> <journal> Computing Surveys 15(2) (June 1983) pp. </journal> <pages> 135-171. </pages>
Reference-contexts: Programs sent through electronic mail or posted to bulletin boards may be altered in transit, either by someone modifying them while they sit on an intermediate node, or while they are crossing networks <ref> [133] </ref>. Further, electronic Page 14 of 32 messages can easily be forged [116][132], so it is unwise to rely on such a programs stated origin.
Reference: [134] <author> S. Wiseman, </author> <title> Preventing Viruses in Computer Systems, </title> <booktitle> Computers and Security 8(5) (Aug. 1989) pp. </booktitle> <pages> 427-432. </pages>
Reference: [135] <author> I. Witten, </author> <note> Computer (in)security: Infiltrating Open Systems, Abacus 4(4) (1987) pp. 7-25. </note>
Reference: [136] <author> P. Wood and S. Kochan, </author> <title> UNIX System Security, </title> <publisher> Hayden Books, </publisher> <address> Indianapolis, </address> <note> IN (1985). </note>

References-found: 136

