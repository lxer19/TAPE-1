URL: http://www.isi.edu/sims/papers/91-spectrum.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: cak@cs.cmu.edu josh@cs.rochester.edu qyang@watdragon.waterloo.edu  
Title: Characterizing Abstraction Hierarchies for Planning  
Author: Craig A. Knoblock Josh D. Tenenberg Qiang Yang 
Date: 1991  
Note: Proceedings of the Ninth National Conference on Artificial Intelligence, AAAI Press,  
Address: Pittsburgh, PA 15213 Rochester, New York 14627 Waterloo, Ont., Canada N2L 3G1  Menlo Park, CA,  
Affiliation: Carnegie Mellon University University of Rochester University of Waterloo School of Computer Science Computer Science Department Computer Science Department  
Abstract: The purposes of this paper are threefold. The first is to provide a crisp formalization of abstrips-style abstraction, since the lack of such formalizations has made it difficult to ascertain the uses and value of this type of abstraction in previous research. Second, we define the refinement relationship between solutions at different levels of the abstraction hierarchy. Such definitions are crucial to developing efficient search strategies with this type of hierarchical planning. And third, we provide a restriction on the abstraction mapping that provides a criterion for generating useful abstractions. 
Abstract-found: 1
Intro-found: 1
Reference: [ Christensen, 1990 ] <author> Jens Christensen. </author> <title> A hierarchical planner that generates its own abstraction hierarchies. </title> <booktitle> In Proceedings of Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1004-1009, </pages> <year> 1990. </year>
Reference-contexts: A literal that occurs as a precondition in two different operators can be assigned different criti-calities in each operator. abstrips [ Sacerdoti, 1974 ] , abtweak [ Yang and Tenenberg, 1990 ] , soar [ Unruh and Rosenbloom, 1989 ] , and pablo <ref> [ Christensen, 1990 ] </ref> are examples of systems in this class. Any system in this class will have both the upward solution property and the monotonicity property. Although the monotonicity property applies to any system in this class, only abtweak explicitly uses this property in its search strategy.
Reference: [ Knoblock, 1990a ] <author> Craig A. Knoblock. </author> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proceedings of Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 923-928, </pages> <year> 1990. </year>
Reference-contexts: We now define the ordered monotonicity property for an abstraction hierarchy: Definition 7 An abstraction hierarchy has the ordered monotonicity property 1 if, for all levels i; i 1 1 This definition of ordered monotonicity is slightly more restrictive than the ordered monotonicity property that was informally described in <ref> [ Knoblock, 1990a ] </ref> . (0 &lt; i &lt; k), for every problem , if 0 is a justified plan that solves at level i, then every refinement of 0 at level i 1 is an ordered refinement. <p> At the third point on the spectrum lie the ordered hierarchies. Recall that these hierarchies impose an order on a partitioned hierarchy such that every refinement of an abstract plan will leave the literals in a more abstract space unchanged. This property is used in the alpine system <ref> [ Knoblock, 1990a ] </ref> , which automatically generates abstraction hierarchies that have this property. Conclusion and Future Directions This paper presents a formalism for studying abstraction in planning. It explores the properties of abstraction hierarchies that are generated by gradually restricting the assignment of criticality values to preconditions of operators.
Reference: [ Knoblock, 1990b ] <author> Craig A. Knoblock. </author> <title> A theory of abstraction for hierarchical planning. </title> <editor> In D. Paul Ben-jamin, editor, </editor> <booktitle> Change of Representation and Inductive Bias, </booktitle> <pages> pages 81-104. </pages> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1990. </year>
Reference: [ Knoblock, 1991 ] <author> Craig A. Knoblock. </author> <title> Automatically Generating Abstractions for Problem Solving. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year> <note> Tech. Report CMU-CS-91-120. </note>
Reference-contexts: The following is a set of conditions which are sufficient but not necessary to guarantee the ordered mono-tonicity property. (A set of less restrictive problem-specific conditions that are also sufficient to guarantee the ordered monotonicity property is described in <ref> [ Knoblock, 1991 ] </ref> .) Restriction 1 Let O be the set of operators in a domain. 8ff 2 O; 8p 2 P ff and 8e 1 ; e 2 2 A ff S (1) crit (e 1 ) = crit (e 2 ), and (2) crit (e 1 ) crit <p> If the resulting relation is partially ordered, then any total ordering of the relation gives a criticality assignment to literals that satisfies the ordered monotonicity property. Algorithms for automatically generating abstraction hierarchies based on the ordered monotonic-ity property are presented in <ref> [ Knoblock, 1991 ] </ref> .
Reference: [ Sacerdoti, 1974 ] <author> Earl Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2) </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference-contexts: A literal that occurs as a precondition in two different operators can be assigned different criti-calities in each operator. abstrips <ref> [ Sacerdoti, 1974 ] </ref> , abtweak [ Yang and Tenenberg, 1990 ] , soar [ Unruh and Rosenbloom, 1989 ] , and pablo [ Christensen, 1990 ] are examples of systems in this class. Any system in this class will have both the upward solution property and the monotonicity property.
Reference: [ Siklossy and Dreussi, 1973 ] <author> L. Siklossy and J. Dreussi. </author> <title> An efficient robot planner which generates its own procedures. </title> <booktitle> In Proceedings of the Third International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 423-430, </pages> <year> 1973. </year>
Reference-contexts: At the second point in the spectrum the following constraint is enforced on the assignment of the criti-calities: literals of the same predicate must have the same criticality. This corresponds to partitioned abstraction hierarchies. lawaly <ref> [ Siklossy and Dreussi, 1973 ] </ref> and sipe [ Wilkins, 1984 ] are both examples of systems in this class. The additional partitioning constraint does not provide any additional known formal properties. At the third point on the spectrum lie the ordered hierarchies.
Reference: [ Tenenberg, 1988 ] <author> Josh Tenenberg. </author> <title> Abstraction in Planning. </title> <type> PhD thesis, </type> <institution> University of Rochester, Dept. of Computer Science, </institution> <year> 1988. </year>
Reference: [ Unruh and Rosenbloom, 1989 ] <author> Amy Unruh and Paul S. Rosenbloom. </author> <title> Abstraction in problem solving and learning. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 681-687, </pages> <year> 1989. </year>
Reference-contexts: A literal that occurs as a precondition in two different operators can be assigned different criti-calities in each operator. abstrips [ Sacerdoti, 1974 ] , abtweak [ Yang and Tenenberg, 1990 ] , soar <ref> [ Unruh and Rosenbloom, 1989 ] </ref> , and pablo [ Christensen, 1990 ] are examples of systems in this class. Any system in this class will have both the upward solution property and the monotonicity property.
Reference: [ Wilkins, 1984 ] <author> David Wilkins. </author> <title> Domain-independent planning: Representation and plan generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22(3) </volume> <pages> 269-301, </pages> <year> 1984. </year>
Reference-contexts: At the second point in the spectrum the following constraint is enforced on the assignment of the criti-calities: literals of the same predicate must have the same criticality. This corresponds to partitioned abstraction hierarchies. lawaly [ Siklossy and Dreussi, 1973 ] and sipe <ref> [ Wilkins, 1984 ] </ref> are both examples of systems in this class. The additional partitioning constraint does not provide any additional known formal properties. At the third point on the spectrum lie the ordered hierarchies.
Reference: [ Yang and Tenenberg, 1990 ] <author> Qiang Yang and Josh D. Tenenberg. Abtweak: </author> <title> Abstracting a nonlinear, least commitment planner. </title> <booktitle> In Proceedings of Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 204-209, </pages> <year> 1990. </year>
Reference-contexts: A literal that occurs as a precondition in two different operators can be assigned different criti-calities in each operator. abstrips [ Sacerdoti, 1974 ] , abtweak <ref> [ Yang and Tenenberg, 1990 ] </ref> , soar [ Unruh and Rosenbloom, 1989 ] , and pablo [ Christensen, 1990 ] are examples of systems in this class. Any system in this class will have both the upward solution property and the monotonicity property. <p> These properties can be applied to both the construction and use of abstraction hierarchies for planning. The monotonicity property holds for every abstraction hierarchy and can be used to prune the search space without sacrificing completeness. The abtweak planner <ref> [ Yang and Tenenberg, 1990 ] </ref> exploits this property (within a nonlinear, least-commitment planner) to constrain the search space. The ordered monotonicity property and the associated restriction can be used to generate abstraction hierarchies from a set of operators.
References-found: 10

