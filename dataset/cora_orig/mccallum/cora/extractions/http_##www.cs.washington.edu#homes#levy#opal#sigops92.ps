URL: http://www.cs.washington.edu/homes/levy/opal/sigops92.ps
Refering-URL: http://www.cs.washington.edu/homes/levy/opal/opalpapers.html
Root-URL: 
Title: Distribution in a Single Address Space Operating System  
Author: Jeff Chase, Valerie Issarny, and Hank Levy 
Keyword: Opal's handling of both data names (virtual addresses) and resource names (capabilities).  
Address: Seattle, WA 98195 USA  
Affiliation: Department of Computer Science and Engineering FR-35 University of Washington  
Abstract: The recent appearance of architectures with flat 64-bit virtual addressing opens an opportunity to reconsider the way our operating systems use virtual address spaces. We are building an operating system called Opal for these wide-address architectures. The key feature of Opal is a single global virtual address space that extends to data on long-term storage and across the network. Hardware-enforced memory protection exists within this single address space. This paper outlines our ideas for extending Opal to a distributed environment, focusing on the naming and binding of data and services to allow uniform treatment across the network. Our central point is that although the meaning of names (i.e., the entities denoted by those names) should be uniform throughout the network, at a lower level the binding of names to physical data or servers may vary with the node uttering the name, in order to accommodate caching, replication, and migration. This principle affects 
Abstract-found: 1
Intro-found: 1
Reference: [Abrossimov et al. 89] <author> Abrossimov, V., Rozier, M., and Shapiro, M. </author> <title> Generic virtual memory management for operating system kernels. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 123-136, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Segments are potentially distributed and persistent, but the storage management policies are not dictated by the kernel. Instead, consistency and recoverability are managed by external paging servers similar to Mach [Young et al. 87] and Chorus <ref> [Abrossimov et al. 89] </ref>. Memory protection is independent of Opal's global virtual address space. Though an executing program can attempt to address any piece of data in the system, programs execute within protection domains that limit their access to global virtual storage.
Reference: [Bal & Tanenbaum 88] <author> Bal, H. E. and Tanenbaum, A. S. </author> <title> Distributed programming with shared data. </title> <booktitle> In Proceedings of the International Conference on Computer Languages, </booktitle> <pages> pages 82-91, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: in Ivy [Li & Hudak 86] 2 By this we mean a distributed virtual address space with coherency maintained at the object grain, notably Amber [Chase et al. 89], as opposed to distributed object systems that use surrogate names for objects, such as Emerald [Jul et al. 88] and Orca <ref> [Bal & Tanenbaum 88] </ref>. and Mach [Forin et al. 89] have shown that the best performance is achieved by placing a paging server on each node, and allowing the server to cooperate with peer servers on other nodes, rather than centralizing the paging server.
Reference: [Bershad et al. 90] <author> Bershad, B., Anderson, T., Lazowska, E., and Levy, H. </author> <title> Lightweight remote procedure call. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1), </volume> <month> February </month> <year> 1990. </year>
Reference-contexts: The portal model was chosen as a basis for implementing local cross-domain calls using the lightweight RPC (LRPC) techniques described in <ref> [Bershad et al. 90] </ref>. 3 Distribution in Opal Opal's single virtual address space is intended to span a network of independent nodes. Each node contains physical memory and one or more processors attached to that memory.
Reference: [Chase et al. 89] <author> Chase, J. S., Amador, F. G., Lazowska, E. D., Levy, H. M., and Littlefield, R. J. </author> <title> The Amber system: Parallel programming on a network of multiprocessors. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 147-158, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: It is frequently useful to structure a service as a group of cooperating servers. For example, consider a segment with page-based distributed coherency. Experiments in Ivy [Li & Hudak 86] 2 By this we mean a distributed virtual address space with coherency maintained at the object grain, notably Amber <ref> [Chase et al. 89] </ref>, as opposed to distributed object systems that use surrogate names for objects, such as Emerald [Jul et al. 88] and Orca [Bal & Tanenbaum 88]. and Mach [Forin et al. 89] have shown that the best performance is achieved by placing a paging server on each node,
Reference: [Chase et al. 92a] <author> Chase, J. S., Levy, H. M., Baker-Harvey, M., and Lazowska, E. D. </author> <title> How to use a 64-bit virtual address space. </title> <type> Technical Report 92-03-02, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: We are building a 64-bit operating system called Opal with a single virtual address space that maps all primary and secondary storage across a network <ref> [Chase et al. 92a, Chase et al. 92b] </ref>. The principal advantage of a single address space is that virtual addresses have a globally unique interpretation a given piece of data appears at the same virtual address regardless of where it is stored or which programs access it.
Reference: [Chase et al. 92b] <author> Chase, J. S., Levy, H. M., Baker-Harvey, M., and Lazowska, E. D. </author> <title> Lightweight shared objects in a 64-bit operating system. </title> <type> Technical Report 92-03-09, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: We are building a 64-bit operating system called Opal with a single virtual address space that maps all primary and secondary storage across a network <ref> [Chase et al. 92a, Chase et al. 92b] </ref>. The principal advantage of a single address space is that virtual addresses have a globally unique interpretation a given piece of data appears at the same virtual address regardless of where it is stored or which programs access it.
Reference: [Dig 92] <institution> Digital Equipment Corporation, Maynard, MA. Alpha Architecture Handbook, </institution> <note> preliminary edition, </note> <year> 1992. </year>
Reference-contexts: Our premise is that the next generation of workstations and servers will use processors with 64-bit data paths, and sparse, flat, 64-bit virtual addressing. The MIPS R4000 [MIP 91] and Digital's Alpha family <ref> [Dig 92] </ref> are recent examples of the trend to wider addresses.
Reference: [Forin et al. 89] <author> Forin, A., Barrera, J., and Sanzi, R. </author> <title> The shared memory server. </title> <booktitle> In Proceedings of the Usenix Conference, </booktitle> <pages> pages 229-242, </pages> <month> Winter </month> <year> 1989. </year>
Reference-contexts: 2 By this we mean a distributed virtual address space with coherency maintained at the object grain, notably Amber [Chase et al. 89], as opposed to distributed object systems that use surrogate names for objects, such as Emerald [Jul et al. 88] and Orca [Bal & Tanenbaum 88]. and Mach <ref> [Forin et al. 89] </ref> have shown that the best performance is achieved by placing a paging server on each node, and allowing the server to cooperate with peer servers on other nodes, rather than centralizing the paging server.
Reference: [Gharachorloo et al. 90] <author> Gharachorloo, K., Lenoski, D., Laudon, J., Gibbons, P., Gupta, A., and Hennessy, J. </author> <title> Memory consistency and event ordering in scalable shared-memory multiprocessors. </title> <booktitle> In Proc. 17th Annual Symposium on Computer Architecture, Computer Architecture News, </booktitle> <pages> pages 15-26. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Enforcing such a constraint across multiple nodes would be too restrictive, because caching of multiple copies of a page is crucial for performance. Furthermore, the system should tolerate inconsistency of cached pages in order to allow different coherency models, such as weak coherency (e.g., <ref> [Gharachorloo et al. 90] </ref>). As another example, object-based distributed virtual memory systems 2 rely on memory that is physically noncoherent across nodes, but use language-level knowledge to make objects appear coherent to the application.
Reference: [Jul et al. 88] <author> Jul, E., Levy, H., Hutchinson, N., and Black, A. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Experiments in Ivy [Li & Hudak 86] 2 By this we mean a distributed virtual address space with coherency maintained at the object grain, notably Amber [Chase et al. 89], as opposed to distributed object systems that use surrogate names for objects, such as Emerald <ref> [Jul et al. 88] </ref> and Orca [Bal & Tanenbaum 88]. and Mach [Forin et al. 89] have shown that the best performance is achieved by placing a paging server on each node, and allowing the server to cooperate with peer servers on other nodes, rather than centralizing the paging server.
Reference: [Li & Hudak 86] <author> Li, K. and Hudak, P. </author> <title> Memory coherence in shared virtual memory systems. </title> <booktitle> In Proceedings of the 5th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 229-239, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: It is frequently useful to structure a service as a group of cooperating servers. For example, consider a segment with page-based distributed coherency. Experiments in Ivy <ref> [Li & Hudak 86] </ref> 2 By this we mean a distributed virtual address space with coherency maintained at the object grain, notably Amber [Chase et al. 89], as opposed to distributed object systems that use surrogate names for objects, such as Emerald [Jul et al. 88] and Orca [Bal & Tanenbaum
Reference: [MIP 91] <institution> MIPS Computer Systems, Inc., Sunnyvale, CA. </institution> <note> MIPS R4000 Microprocessor User's Manual, first edition, </note> <year> 1991. </year>
Reference-contexts: 1 Introduction The Opal project is an investigation into the effect of wide-address architectures on the structure of operating systems and applications. Our premise is that the next generation of workstations and servers will use processors with 64-bit data paths, and sparse, flat, 64-bit virtual addressing. The MIPS R4000 <ref> [MIP 91] </ref> and Digital's Alpha family [Dig 92] are recent examples of the trend to wider addresses.
Reference: [Mullender & Tanenbaum 86] <author> Mullender, S. and Tanenbaum, A. </author> <title> The design of a capability-based operating system. </title> <journal> The Computer Journal, </journal> <volume> 29(4) </volume> <pages> 289-299, </pages> <year> 1986. </year>
Reference-contexts: Since a server may serve many resources, client domains need some way to name a resource and demonstrate permission to operate on it. Resource objects are named by capabilities based on sparse capabilities in Amoeba <ref> [Mullender & Tanenbaum 86] </ref>. Any domain that knows the value of a sparse capability can gain access to the named resource, but it is safe to assume that the value cannot be guessed.
Reference: [Shapiro 86] <author> Shapiro, M. </author> <title> Structure and encapsulation in distributed systems: The proxy principle. </title> <booktitle> In Proceedings of the Sixth International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1986. </year>
Reference-contexts: However, our approach is different in that the distributed nature of a service is encapsulated within the service. Our "agents" are also similar to proxies <ref> [Shapiro 86] </ref>. We use a new term to emphasize that the proxy is isolated from the clients by a memory protection boundary. 4 Summary This paper has described the high-level concepts of Opal and its support for distribution, concentrating primarily on name resolution for data and resources.
Reference: [Young et al. 87] <author> Young, M., Tevanian, A., Rashid, R., Golub, D., Eppinger, J., Chew, J., Bolosky, W., Black, D., and Baron, R. </author> <title> The duality of memory and communication in the implementation of a multiprocessor operating system. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 63-76, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Segments are potentially distributed and persistent, but the storage management policies are not dictated by the kernel. Instead, consistency and recoverability are managed by external paging servers similar to Mach <ref> [Young et al. 87] </ref> and Chorus [Abrossimov et al. 89]. Memory protection is independent of Opal's global virtual address space. Though an executing program can attempt to address any piece of data in the system, programs execute within protection domains that limit their access to global virtual storage.
References-found: 15

