URL: http://merv.cs.nyu.edu:8001/~binli/plinda/ftcs.ps
Refering-URL: http://merv.cs.nyu.edu:8001/~binli/plinda/
Root-URL: http://www.cs.nyu.edu
Title: An Approach to Fault-tolerant Parallel Processing on Intermittently Idle, Heterogeneous Workstations  
Author: Karpjoo Jeong Dennis Shasha, Surendranath Talla Peter Wyckoff 
Address: Ithaca, NY 14853 New York, NY 10012  
Affiliation: Laboratory for Nuclear Studies Department of Computer Science Cornell University New York University  
Abstract: We propose a novel approach to harness the idle cycles of workstations connected by LAN/WANs for long running scientific computations and present performance results for our prototype system called Persistent Linda (PLinda). PLinda offers low runtime overhead and, migration among heterogeneous architectures while retreating quickly when owners return to their workstations. PLinda achieves this by implementing a lightweight transaction model that sacrifices serializability and durability, but preserves a basic guarantee: if a PLinda execution terminates, it has the same result as some failure-free Linda execution. The efficiency of this model permits us to treat owner activity as workstation failure, thus making retreats extremely lightweight. Further, by storing the state of a PLinda process as a set of core variables as of each transaction commit, a PLinda process can migrate among different architectures. Within the space of lightweight transaction models, we offer three mechanisms that make different tradeoffs between failure-free performance and recovery time. All three mechanisms may be used at the same time in a single application; each process using the mechanism which is best suited for its characteristics. Our experiments illustrate the tradeoffs of the three mechanisms as well as the overall performance of the system on applications from physics and finance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yeshayahu Artsy and Raphael Finkel. </author> <title> Designing a process migration facility: </title> <booktitle> The Charlotte experience. IEEE Computer, </booktitle> <pages> pages 47-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance <ref> [1, 14, 15] </ref>. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance. Therefore, the Dome programmer has to rely on its specialized data types and porting existing code to Dome is difficult. Also, Dome does not intend to utilize idle workstations.
Reference: [2] <author> D. Bakken and R. Schlichting. </author> <title> Supporting Fault-tolerant Parallel Programming in Linda. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 6(3) </volume> <pages> 287-302, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: However, Paradise does not support explicit mechanisms (e.g., continuation committing) for making processes resilient, or tunable fault tolerance mechanisms, nor does it give the same correctness guarantee as PLinda. There are two fault tolerant Linda-variant systems, FT-Linda <ref> [2] </ref> and MOM [7]. For tuple space reliability, FT-Linda assumes a set of replicated tuple spaces connected together by an ordered atomic broadcast network. FT-Linda also provides a restricted form of transaction mechanism called atomic guarded statements for processes.
Reference: [3] <author> P.A. Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: The PLinda programmer invokes this facility using two operators: xstart and xcommit. Following an xstart, all accesses to tuple space are locked: write locks are held until the next xcommit and read locks are held while the read operation takes place <ref> [3, 17] </ref> (read locks need not be held until the end of the transaction because their only purpose is to ensure that reads access only committed data.
Reference: [4] <author> N. Biggs. </author> <title> Interaction models: </title> <institution> Course given at Royal Hollaway College, University of London. Cambridge University Press, </institution> <year> 1977. </year>
Reference-contexts: Specifically, the Option-Adjusted-Spread (OAS) and the embedded option value of a bond are calculated and the market-weighted average of the resulting OAS and option values are computed [6]. The 3D Ising model com putation <ref> [4] </ref> is a simplified model of magnets on a three dimensional lattice which can be used to describe qualitatively how small systems behave.
Reference: [5] <author> R. Bjornson. </author> <title> Linda on Distributed Memory Mul--tiprocessors. </title> <type> PhD thesis, </type> <institution> Yale University, Department of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: Because of their history and size, these programs will not be rewritten from scratch to create parallel versions of them. Rather, the parallel versions should evolve from the sequential code through relatively minor modifications. This has led us to the Linda model <ref> [5, 9] </ref> which adds just a few constructs to a standard language to par-allelize an application rather than requiring a rewrite in a new language. <p> If there are multiple matching tuples, then one is randomly selected and retrieved. If no matching tuple is found, in and rd block until a matching tuple is inserted. The difference is that in is destructive (i.e., removes the tuple) while rd is not. The references <ref> [5, 9, 11] </ref> present a more detailed description of Linda. 2.2 Lightweight Transactions: Atomic Steps PLinda provides lightweight transactions to ensure the atomic execution of a computation step | an atomic step. The PLinda programmer invokes this facility using two operators: xstart and xcommit.
Reference: [6] <author> F. Black, E. Derman, and W. </author> <title> Toy. One-factor model of interest rates and its application to treasury bond options. </title> <journal> Financial Analysts Journal, </journal> <pages> pages 33-39, </pages> <address> January-February 90. </address>
Reference-contexts: Specifically, the Option-Adjusted-Spread (OAS) and the embedded option value of a bond are calculated and the market-weighted average of the resulting OAS and option values are computed <ref> [6] </ref>. The 3D Ising model com putation [4] is a simplified model of magnets on a three dimensional lattice which can be used to describe qualitatively how small systems behave.
Reference: [7] <author> S. Cannon and D. Dunn. </author> <title> Adding fault-tolerant transaction processing to linda. </title> <journal> Software| Practice and Experience, </journal> <volume> 24(5) </volume> <pages> 449-466, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: However, Paradise does not support explicit mechanisms (e.g., continuation committing) for making processes resilient, or tunable fault tolerance mechanisms, nor does it give the same correctness guarantee as PLinda. There are two fault tolerant Linda-variant systems, FT-Linda [2] and MOM <ref> [7] </ref>. For tuple space reliability, FT-Linda assumes a set of replicated tuple spaces connected together by an ordered atomic broadcast network. FT-Linda also provides a restricted form of transaction mechanism called atomic guarded statements for processes. MOM supports checkpointing for tuple space reliability and a simple form of transaction.
Reference: [8] <author> Clemens H. Cap and Volker Strumpen. </author> <title> Efficient parallel computing in distributed workstation environments. </title> <journal> Parallel Computing, </journal> <volume> 19 </volume> <pages> 1221-1234, </pages> <year> 1993. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26].
Reference: [9] <author> N. Carriero. </author> <title> Implementing Tuple Space Machines. </title> <type> PhD thesis, </type> <institution> Yale University, Department of Computer Science, </institution> <year> 1987. </year>
Reference-contexts: Because of their history and size, these programs will not be rewritten from scratch to create parallel versions of them. Rather, the parallel versions should evolve from the sequential code through relatively minor modifications. This has led us to the Linda model <ref> [5, 9] </ref> which adds just a few constructs to a standard language to par-allelize an application rather than requiring a rewrite in a new language. <p> P fails during the execution of T4. Then, a backup process P' is invoked and restarted from state saved at the end of T3. 2.1 Brief Review of Linda The parallel execution model of PLinda is based on Linda <ref> [9] </ref>, a shared memory model. In Linda, processes in an application cooperate by communicating through the shared memory called tuple space. Each tuple in tuple space contains a sequence of data elements of basic types such as integers, floats, characters, and arrays of these types. <p> If there are multiple matching tuples, then one is randomly selected and retrieved. If no matching tuple is found, in and rd block until a matching tuple is inserted. The difference is that in is destructive (i.e., removes the tuple) while rd is not. The references <ref> [5, 9, 11] </ref> present a more detailed description of Linda. 2.2 Lightweight Transactions: Atomic Steps PLinda provides lightweight transactions to ensure the atomic execution of a computation step | an atomic step. The PLinda programmer invokes this facility using two operators: xstart and xcommit.
Reference: [10] <author> N. Carriero, E. Freeman, D. Gelernter, and D. Kaminsky. </author> <title> Adaptive Parallelism and Piranha. </title> <journal> IEEE Computer, </journal> <volume> 28(1) </volume> <pages> 40-49, </pages> <year> 1995. </year>
Reference-contexts: The public release of the prototype system is available at http://merv.cs.nyu.edu:8001/~binli/plinda/. 5.1 Performance Experimental Setup We used three sets of workstations. The first set is 10 identically configured 1 These criteria have already been used by other work-stealing systems and have demonstrated to be effective <ref> [10, 21] </ref>. Sparc5's running Solaris (hereafter just Solaris machines) connected to the same 10Mbit Ethernet which can be isolated from other networks. The second set is 10 identically configured Pentium Pro 200's running Linux (hereafter just Linux machines) connected to the same 100Mbit Ethernet switch. <p> Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Also, Dome does not intend to utilize idle workstations. By contrast, PLinda addresses parallel processing, fault tolerance, idle workstation utilization, and heterogeneous processing together, and still allows legacy code to be easily ported. Piranha is a Linda-variant system designed to utilize idle workstations effectively for parallel computation <ref> [10] </ref>. Piranha does not address fault tolerance and assumes a restricted programming model similar to the master/worker model. Also, compute processes need to undo intermediate results before retreat. PLinda's idle workstation utilization feature is inspired by Piranha, but unifies fault tolerance with migration.
Reference: [11] <author> N. Carriero and D. Gelernter. </author> <title> How to Write Parallel Programs: A First Course. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: If there are multiple matching tuples, then one is randomly selected and retrieved. If no matching tuple is found, in and rd block until a matching tuple is inserted. The difference is that in is destructive (i.e., removes the tuple) while rd is not. The references <ref> [5, 9, 11] </ref> present a more detailed description of Linda. 2.2 Lightweight Transactions: Atomic Steps PLinda provides lightweight transactions to ensure the atomic execution of a computation step | an atomic step. The PLinda programmer invokes this facility using two operators: xstart and xcommit.
Reference: [12] <author> David Cheriton. </author> <title> The V distributed system. </title> <booktitle> Communication of the ACM, </booktitle> <pages> pages 314-333, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) <ref> [12, 13, 21, 23, 25, 26] </ref>. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance [1, 14, 15]. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance.
Reference: [13] <author> Henry Clark and Bruce McMillin. </author> <title> DAWGS|a distributed computer server utilizing idle workstations. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 14 </volume> <pages> 175-186, </pages> <year> 1992. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) <ref> [12, 13, 21, 23, 25, 26] </ref>. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance [1, 14, 15]. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance.
Reference: [14] <author> P. Dasgupta, R.J. LeBlanc, M. Ahamad, and U. Ramachandran. </author> <title> The Clouds distributed operating system. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 34-44, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance <ref> [1, 14, 15] </ref>. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance. Therefore, the Dome programmer has to rely on its specialized data types and porting existing code to Dome is difficult. Also, Dome does not intend to utilize idle workstations.
Reference: [15] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent process migration: Design alternatives and the Sprite implementation. </title> <journal> Software-Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-785, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance <ref> [1, 14, 15] </ref>. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance. Therefore, the Dome programmer has to rely on its specialized data types and porting existing code to Dome is difficult. Also, Dome does not intend to utilize idle workstations.
Reference: [16] <author> I. Gaines and T. Nash. </author> <title> Use of new computer technologies in elementary particle physics. </title> <journal> Ann. Rev. of Nucl. Part. Sci., </journal> <volume> 37, </volume> <year> 1987. </year>
Reference-contexts: 1 Introduction Many problems in scientific fields including biology, physics, and chemistry require executing a large number of tasks that seldom communicate with one another | coarse grained parallel applications <ref> [16, 24] </ref>.
Reference: [17] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: The PLinda programmer invokes this facility using two operators: xstart and xcommit. Following an xstart, all accesses to tuple space are locked: write locks are held until the next xcommit and read locks are held while the read operation takes place <ref> [3, 17] </ref> (read locks need not be held until the end of the transaction because their only purpose is to ensure that reads access only committed data.
Reference: [18] <author> K. Jeong. </author> <title> Fault-tolerant Parallel Processing Combining Linda, Checkpointing, and Transactions. </title> <type> PhD thesis, </type> <institution> New York University, Department of Computer Science, </institution> <year> 1996. </year>
Reference-contexts: Some committed updates may have been lost, but the checkpoint contains a consistent state from which applications can resume execution. If that execution terminates, it will be a possible execution of the corresponding Linda program <ref> [18] </ref>. <p> Results obtained from experiments on the isolated Solaris network are the average of three runs. All other results are the average of ten runs. Tradeoffs Between the Three Fault Tolerance Mechanisms Using a previous prototype version of PLinda <ref> [19, 18] </ref>, we conducted experiments to examine how the three fault tolerance mechanisms work on different applications.
Reference: [19] <author> K. Jeong and D. Shasha. PLinda 2.0: </author> <title> A transactional/checkpointing approach to fault tolerant Linda. </title> <booktitle> In Proceedings of the 13th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 96-105, </pages> <year> 1994. </year>
Reference-contexts: Results obtained from experiments on the isolated Solaris network are the average of three runs. All other results are the average of ten runs. Tradeoffs Between the Three Fault Tolerance Mechanisms Using a previous prototype version of PLinda <ref> [19, 18] </ref>, we conducted experiments to examine how the three fault tolerance mechanisms work on different applications.
Reference: [20] <author> D. Kaminsky. </author> <title> Adaptive Parallelism with Piranha. </title> <type> PhD thesis, </type> <institution> Yale University, Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: It also requires that the steps of the computation are deterministic and have no time dependencies. 4 Fault tolerance-based Idle Worksta tion Utilization There has been a considerable amount of research done on how to utilize idle or under-utilized workstations connected by a network <ref> [20, 21] </ref>. We call these work-stealing systems. In general, work-stealing sys-tems are designed to monitor the workload of workstations and migrate processes from busy (or overloaded) to idle (or under-utilized) workstations. PLinda subsumes process migration into process failure resiliency.
Reference: [21] <author> M. Litzkow, M. Livny, and M.W. </author> <title> Mutka. Condor|a hunter of idle workstations. </title> <booktitle> In Proceedings of the 8th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: It also requires that the steps of the computation are deterministic and have no time dependencies. 4 Fault tolerance-based Idle Worksta tion Utilization There has been a considerable amount of research done on how to utilize idle or under-utilized workstations connected by a network <ref> [20, 21] </ref>. We call these work-stealing systems. In general, work-stealing sys-tems are designed to monitor the workload of workstations and migrate processes from busy (or overloaded) to idle (or under-utilized) workstations. PLinda subsumes process migration into process failure resiliency. <p> The public release of the prototype system is available at http://merv.cs.nyu.edu:8001/~binli/plinda/. 5.1 Performance Experimental Setup We used three sets of workstations. The first set is 10 identically configured 1 These criteria have already been used by other work-stealing systems and have demonstrated to be effective <ref> [10, 21] </ref>. Sparc5's running Solaris (hereafter just Solaris machines) connected to the same 10Mbit Ethernet which can be isolated from other networks. The second set is 10 identically configured Pentium Pro 200's running Linux (hereafter just Linux machines) connected to the same 100Mbit Ethernet switch. <p> Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) <ref> [12, 13, 21, 23, 25, 26] </ref>. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance [1, 14, 15]. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance.
Reference: [22] <author> J. Nagi, C. Arabe, and A. Beguelin. Dome: </author> <title> Parallel programming in a heterogeneous multiuser environment. </title> <type> Technical Report CMU-CS-95-137, </type> <institution> School of Computer Science, Carnegie Mel-lon University, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support only parallel processing on under-utilized workstations, but no fault tolerance [1, 14, 15]. Dome <ref> [22] </ref> is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance. Therefore, the Dome programmer has to rely on its specialized data types and porting existing code to Dome is difficult. Also, Dome does not intend to utilize idle workstations.
Reference: [23] <author> C.A. Waldspurger, T. Hogg, B.A. Huberman, J.O. Kephart, and W.S. Stornetta. Spawn: </author> <title> A distributed computational economy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(2) </volume> <pages> 103-117, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) <ref> [12, 13, 21, 23, 25, 26] </ref>. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance [1, 14, 15]. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance.
Reference: [24] <author> J. T. L. Wang, T. G. Marr, D. Shasha, B. A. Shapiro, and G.-W. Chirn. </author> <title> Discovering active motifs in sets of related protein sequences and using them for classification. </title> <journal> Nucleic Acids Research, </journal> <volume> 22(14) </volume> <pages> 2769-2775, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Many problems in scientific fields including biology, physics, and chemistry require executing a large number of tasks that seldom communicate with one another | coarse grained parallel applications <ref> [16, 24] </ref>.
Reference: [25] <author> Jingwen Wang, Songnian Zhou, Khalid Ahmed, and Weihong Long. LSBATCH: </author> <title> A distributed load sharing batch system. </title> <type> Technical Report CSRI-286, </type> <institution> University of Toronto, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) <ref> [12, 13, 21, 23, 25, 26] </ref>. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance [1, 14, 15]. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance.
Reference: [26] <author> Songnian Zhou, Jingwen Wang, Xiaohu Zheng, and Pierre Delisle. </author> <title> Utopia: A load sharing facility for large, heterogeneous distributed computer systems. </title> <type> Technical Report CSRI-257, </type> <institution> University of Toronto, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Five workstation owners participated in this experiment and none could detect when PLinda was running processes on their machine. 6 Related Work There have been research efforts to develop software systems to utilize idle or under-utilized workstations <ref> [1, 13, 12, 8, 15, 10, 21, 22, 23, 25, 26] </ref>. Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) [12, 13, 21, 23, 25, 26]. <p> Some of them support idle or under-utilized workstation utilization and fault tolerance only for applications which are sequential or consist of independent tasks (i.e., no-inter task communication) <ref> [12, 13, 21, 23, 25, 26] </ref>. Some of them support only parallel processing on under-utilized workstations, but no fault tolerance [1, 14, 15]. Dome [22] is a library of C++ class objects that supports parallel processing, automatic load balancing, and fault-tolerance.
References-found: 26

