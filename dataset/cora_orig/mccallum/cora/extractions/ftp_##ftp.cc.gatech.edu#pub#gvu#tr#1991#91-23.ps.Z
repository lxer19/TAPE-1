URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1991/91-23.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1991/
Root-URL: 
Phone: 2  3  
Title: Assessing Program Visualization Systems as Instructional Aids  
Author: Albert Badre Margaret Beranek J. Morgan Morris John Stasko 
Address: Atlanta, GA 30332-0280  Atlanta, GA 30303  Atlanta, GA 30303-3086  
Affiliation: College of Computing Georgia Institute of Technology  Computer Information Systems Department Georgia State University  Department of Mathematics and Computer Science Georgia State University  
Abstract: Technical Report GIT-GVU-91-23 October 1991 Graphics, Visualization, and Usability Center College of Computing Georgia Institute of Technology 
Abstract-found: 1
Intro-found: 1
Reference: [Bro88] <author> Marc H. Brown. </author> <title> Exploring algorithms using Balsa-II. </title> <journal> Computer, </journal> <volume> 21(5) </volume> <pages> 14-36, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Systems presenting a more global, high-level abstract view are called algorithm visualization systems. Often, these systems present a continuous, smooth view of a program during its execution, this earning the name algorithm animation. Over the past ten years, a number of algorithm visualization systems have been created <ref> [LD85, Dui86, Bro88, HHR89, Sta90] </ref>. Each concentrates on a slightly different aspect of the problem of viewing program execution, and all have their individual merits. The clear focus to this work, however, has been on improving the systems technology and visual techniques involved. <p> Essentially no follow-up to the claim that these systems improve software understanding has been checked. The small amount of system evaluation done to date is largely anecdotal. Perhaps the most extensive application of algorithm visualization technology was the use of the Balsa system <ref> [BS85, Bro88] </ref> as an aid for teaching algorithms at Brown University in the mid-1980s. Classes were taught in a large auditorium with Apollo, and subsequently Sun, workstations. Each lecture was accompanied by visualizations of the algorithm (s) being taught that day. <p> No formal study or attempt to quantify how much the visualizations helped was conducted, however. Instructors in a class on analysis of algorithms at San Diego State University utilized the MacBalsa <ref> [Bro88] </ref> system (a descendant of Balsa) and a local system called Algorithms Lab to help teach algorithms [WU90]. The instructors noted that the better students seemed to derive more and learn more from the addition of the computer visualizations.
Reference: [BS85] <author> Marc H. Brown and Robert Sedgewick. </author> <title> Techniques for algorithm animation. </title> <journal> IEEE Software, </journal> <volume> 2(1) </volume> <pages> 28-39, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Essentially no follow-up to the claim that these systems improve software understanding has been checked. The small amount of system evaluation done to date is largely anecdotal. Perhaps the most extensive application of algorithm visualization technology was the use of the Balsa system <ref> [BS85, Bro88] </ref> as an aid for teaching algorithms at Brown University in the mid-1980s. Classes were taught in a large auditorium with Apollo, and subsequently Sun, workstations. Each lecture was accompanied by visualizations of the algorithm (s) being taught that day.
Reference: [Dui86] <author> Robert A. Duisberg. </author> <title> Animated graphical interfaces using temporal constraints. </title> <booktitle> In Proceedings of the ACM SIGCHI '86 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 131-136, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: Systems presenting a more global, high-level abstract view are called algorithm visualization systems. Often, these systems present a continuous, smooth view of a program during its execution, this earning the name algorithm animation. Over the past ten years, a number of algorithm visualization systems have been created <ref> [LD85, Dui86, Bro88, HHR89, Sta90] </ref>. Each concentrates on a slightly different aspect of the problem of viewing program execution, and all have their individual merits. The clear focus to this work, however, has been on improving the systems technology and visual techniques involved.
Reference: [HHR89] <author> Esa Helttula, Aulikki Hyrskykari, and Kari-Jouko Raiha. </author> <title> Graphical specification of algorithm animations with Aladdin. </title> <booktitle> In Proceedings of the 22nd Hawaii International Conference on System Sciences, </booktitle> <pages> pages 892-901, </pages> <address> Kailua-Kona, HI, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: Systems presenting a more global, high-level abstract view are called algorithm visualization systems. Often, these systems present a continuous, smooth view of a program during its execution, this earning the name algorithm animation. Over the past ten years, a number of algorithm visualization systems have been created <ref> [LD85, Dui86, Bro88, HHR89, Sta90] </ref>. Each concentrates on a slightly different aspect of the problem of viewing program execution, and all have their individual merits. The clear focus to this work, however, has been on improving the systems technology and visual techniques involved.
Reference: [Knu73] <author> Donald E. Knuth. </author> <title> Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: A third representation lined up the numbers of the data values on a vertical axis and indicated an exchange using arrows. The fourth representation was from Knuth <ref> [Knu73] </ref>. We chose the first representation as the one used in our animation. 2.2 Observational Study The case study group consisted of students from three separate undergraduate data structures classes.
Reference: [LD85] <author> Ralph L. London and Robert A. Duisberg. </author> <title> Animating programs using Smalltalk. </title> <journal> Computer, </journal> <volume> 18(8) </volume> <pages> 61-71, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Systems presenting a more global, high-level abstract view are called algorithm visualization systems. Often, these systems present a continuous, smooth view of a program during its execution, this earning the name algorithm animation. Over the past ten years, a number of algorithm visualization systems have been created <ref> [LD85, Dui86, Bro88, HHR89, Sta90] </ref>. Each concentrates on a slightly different aspect of the problem of viewing program execution, and all have their individual merits. The clear focus to this work, however, has been on improving the systems technology and visual techniques involved.
Reference: [Mye90] <author> Brad A. Myers. </author> <title> Taxonomies of visual programming and program visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(1) </volume> <pages> 97-123, </pages> <month> March </month> <year> 1990. </year> <month> 10 </month>
Reference-contexts: 1 Introduction Recently, program visualization systems <ref> [Mye90] </ref> have garnered increasing attention as aids for software understanding and for teaching computer science. Program visualization systems provide graphical views of the constituents, methods, and techniques of computer programs.
Reference: [RBA90] <author> Lloyd P. Rieber, Mary J. Boyce, and Chahriar Assad. </author> <title> The effects of computer animation on adult learning and retrieval tasks. </title> <journal> Journal of Computer-Based Instruction, </journal> <volume> 17(2) </volume> <pages> 46-52, </pages> <month> Spring </month> <year> 1990. </year>
Reference-contexts: The next step in this line of research is developing a longitudinal study in a classroom environment, similar to the study of animations and physics in <ref> [RBA90] </ref>. We will make appropriate changes to the animations as suggested by this study, to make the graphical images easier to interpret and provide for a more responsive system. These changes include the addition of more text and legends to the animations.
Reference: [SH90] <author> John Stasko and J. Douglas Hayes. </author> <title> The XTANGO Algorithm Animation System, User Documentation. </title> <institution> GVU Center, College of Computing, Georgia Tech, </institution> <address> Atlanta, GA, </address> <month> De-cember </month> <year> 1990. </year>
Reference-contexts: The observational study investigated the effectiveness of computer animation to enhance algorithm comprehension in a classroom environment. The computer animation was implemented on top of the algorithm animation system, XTango <ref> [SH90] </ref> that helps to design graphical representations of data structures and algorithms. The animations were presented to students as a supplemental learning tool, and the students were tested to determine their knowledge and ability to conceptualize the algorithm presented to them. <p> Eleven students volunteered to participate. Approximately 64% of the students were in a Computer Science degree program and 36% were in a Computer Information Systems degree program. The algorithm animation system we used in our study is the XTango system <ref> [SH90] </ref>. XTango supports color, two-dimensional views of programs in a workstation-based windowing environment. In our experiments, end-users were viewing animation previously created and designed to help explain different algorithms. XTango is a descendant of the original Tango system [Sta90], and it is a simpler and more portable system.
Reference: [SP91] <author> John T. Stasko and Charles Patterson. </author> <title> Understanding and characterizing program visualization systems. </title> <type> Technical Report GIT-GVU-91/17, </type> <institution> Graphics, Visualization, and Usability Center, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Program visualization systems range from showing programs at a low level of detail, such as showing data structure manipulations, to showing programs at a more global level, such as showing the program's purpose and methodologies <ref> [SP91] </ref>. Systems presenting a more global, high-level abstract view are called algorithm visualization systems. Often, these systems present a continuous, smooth view of a program during its execution, this earning the name algorithm animation.
Reference: [Sta90] <author> John T. Stasko. </author> <title> TANGO: A framework and system for algorithm animation. </title> <journal> Computer, </journal> <volume> 23(9) </volume> <pages> 27-39, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Systems presenting a more global, high-level abstract view are called algorithm visualization systems. Often, these systems present a continuous, smooth view of a program during its execution, this earning the name algorithm animation. Over the past ten years, a number of algorithm visualization systems have been created <ref> [LD85, Dui86, Bro88, HHR89, Sta90] </ref>. Each concentrates on a slightly different aspect of the problem of viewing program execution, and all have their individual merits. The clear focus to this work, however, has been on improving the systems technology and visual techniques involved. <p> XTango supports color, two-dimensional views of programs in a workstation-based windowing environment. In our experiments, end-users were viewing animation previously created and designed to help explain different algorithms. XTango is a descendant of the original Tango system <ref> [Sta90] </ref>, and it is a simpler and more portable system. XTango functions directly on top of the X11 Window System, and it generates color or black-and-white animations without any intermediate software. XTango is available via anonymous ftp, and over 200 installations worldwide have acquired the system.
Reference: [WU90] <author> Roger E. Whitney and N. Scott Urquhart. </author> <title> Microcomputers in the mathematical sciences: Effects of courses, students, and instructors. </title> <publisher> Academic Computing, </publisher> <address> 4(6) 14-18,49-53, </address> <month> March </month> <year> 1990. </year> <month> 11 </month>
Reference-contexts: No formal study or attempt to quantify how much the visualizations helped was conducted, however. Instructors in a class on analysis of algorithms at San Diego State University utilized the MacBalsa [Bro88] system (a descendant of Balsa) and a local system called Algorithms Lab to help teach algorithms <ref> [WU90] </ref>. The instructors noted that the better students seemed to derive more and learn more from the addition of the computer visualizations. The authors believed that the minimal computer science background of the weaker students somewhat lessened the cognitive gains made by these students.
References-found: 12

