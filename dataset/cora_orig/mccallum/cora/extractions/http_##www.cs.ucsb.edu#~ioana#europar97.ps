URL: http://www.cs.ucsb.edu/~ioana/europar97.ps
Refering-URL: http://www.cs.ucsb.edu/~ioana/
Root-URL: http://www.cs.ucsb.edu
Phone: 2  
Title: Exploiting Atomic Broadcast in Replicated Databases (Extended Abstract)  
Author: Divyakant Agrawal Gustavo Alonso Amr El Abbadi and Ioana Stanoi 
Address: Santa Barbara, CA 93106, USA  CH-8092 Zurich, Switzerland  
Affiliation: 1 Department of Computer Science, University of California,  Institute for Information Systems, Database Group, ETH Zentrum,  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> D. Agrawal, G. Alonso, A. El Abbadi, and I. Stanoi. </author> <title> Exploiting Atomic Broadcast in Replicated Databases. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of California at Santa Barbara, </institution> <year> 1996. </year>
Reference-contexts: In the Section 3, we assume no site failures, however, in the rest of the paper we consider sites that are fail-stop [13]. In <ref> [1] </ref> issues involving failures and recovery are presented in more detail. 3 A Naive Broadcast Based Replica Control Protocol We first develop a simple protocol for maintaining a replicated database in an idealized environment when there are no failures. <p> The correctness of the proposed protocol is argued in <ref> [1] </ref>. In this protocol, deadlocks only involve write operations. This is because a write operation is never blocked indefinitely on account of a read operation. Since write operations are performed globally, a cycle involving write operations will be detected at every site in the system. <p> T i terminates at S as soon as it atomically obtains the write locks and successfully executes its write operations. Due to the fact that the commit decision is not being broadcast by the site initiating T i , the proof of correctness is different than the preceding protocol <ref> [1] </ref>. It is based on the fact that the order of conflicting operations is the same at all sites. This last protocol has the advantage over the previous one that it involves at most one broadcast operation.
Reference: 2. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> a communication sub-system for high availability. </title> <booktitle> In Proceedings of the Twenty-Second International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <year> 1992. </year>
Reference-contexts: The distributed systems and computing communities have in general been interested in the broader problem of fault-tolerance in distributed applications. In particular, several systems such as ISIS [4], Amoeba [8], Trans/Total [10], and Transis <ref> [2] </ref> provide broadcast communication to support fault-tolerant applications. Broadcast communication primitives typically provide reliability, atomic-ity, and ordering properties at a single operation (or equivalently message) level. Transactions, on the other hand, require reliability, atomicity, and ordering guarantees not for a single operation but for a group of operations.
Reference: 3. <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Re--covery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: However, if such atomic properties are weakened due to various system assumptions, a database application that requires strict database consistency must perform its own atomic commitment operations in spite of the properties of broadcast primitives. 2 System and Communication Model A distributed database <ref> [3] </ref> consists of a set of objects stored at different sites connected by a communication network. Users interact with the database by invoking transactions. <p> As a result T i is committed or aborted at consistently at every site. The protocol is fairly simple and use of the state machine approach makes the correctness argument a straightforward extension of the serializability argument in a non-replicated databases <ref> [3] </ref>. Since this protocol uses atomic broadcast and the state machine approach, it is desirable to localize the deadlock resolution at every site. However, it is important for the correctness of the protocol that every site makes the same decisions.
Reference: 4. <author> K. P. Birman and R. van Renesse. </author> <title> Reliable Distributed Computing with the ISIS Toolkit. </title> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: An alternative approach based on asynchronous updates may result in inconsistencies and an ever increasing number of reconciliation rules are needed [5]. The distributed systems and computing communities have in general been interested in the broader problem of fault-tolerance in distributed applications. In particular, several systems such as ISIS <ref> [4] </ref>, Amoeba [8], Trans/Total [10], and Transis [2] provide broadcast communication to support fault-tolerant applications. Broadcast communication primitives typically provide reliability, atomic-ity, and ordering properties at a single operation (or equivalently message) level.
Reference: 5. <author> J. Gray, P. Helland, P. O'Neil, and D. Shasha. </author> <title> The Dangers of Replication. </title> <booktitle> In Proceedings of the 1996 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 173-182, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: On one hand, traditional synchronous protocols are too expensive in terms of message cost and communication latency, and they are susceptible to deadlocks when compared to non-replicated databases. An alternative approach based on asynchronous updates may result in inconsistencies and an ever increasing number of reconciliation rules are needed <ref> [5] </ref>. The distributed systems and computing communities have in general been interested in the broader problem of fault-tolerance in distributed applications. In particular, several systems such as ISIS [4], Amoeba [8], Trans/Total [10], and Transis [2] provide broadcast communication to support fault-tolerant applications. <p> Conflicts with read locks are dealt with by aborting read operations. Eliminating deadlocks is a significant benefit for replicated databases as has been argued recently by Gray et al. <ref> [5] </ref>. Since all write operations are known to all sites and they will be eventually executed, the question arises if the extra broadcast at step 4 is superfluous. We illustrate the necessity of step 4 with the help of the following example.
Reference: 6. <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufman, </publisher> <year> 1993. </year>
Reference-contexts: This is achieved by deferring update operations until commit time, when a single message with all updates is sent to all other sites (a similar technique, field-calls, has been suggested to minimize the time interval during which a data item must be locked to be updated <ref> [6] </ref>). The advantage of this approach will be that either only two broadcast messages are needed per transaction or the cost of atomic commitment depending upon whether the "all-or-nothing" property is supported by the communication subsystem. Since there are only two broadcast operations involved, the communication overhead is significantly reduced.
Reference: 7. <author> V. Hadzilacos and S. Toueg. </author> <title> Fault-Tolerant Broadcast and Related Problems. </title> <editor> In S. Mullender, editor, </editor> <booktitle> Distributed Systems, chapter 5, </booktitle> <pages> pages 97-147. </pages> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: This is termed as one-copy equivalence and is enforced by a replica control protocol. The correctness criterion for replicated databases is one-copy serializability, which ensures both one-copy equivalence and the serializable execution of transactions. The atomic broadcast used in this paper is assumed to have the following properties <ref> [7] </ref>: 1. If a correct (non-failed) site broadcasts a message m, the primitive ensures that the message will be delivered to all operational sites. Furthermore, if a site delivers a message m, then all operational sites deliver m. 2.
Reference: 8. <author> M. Frans Kaashoek and A. S. Tanenbaum. </author> <title> Group Communication in the Amoeba Distributed Operating Systems. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 222-230, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The distributed systems and computing communities have in general been interested in the broader problem of fault-tolerance in distributed applications. In particular, several systems such as ISIS [4], Amoeba <ref> [8] </ref>, Trans/Total [10], and Transis [2] provide broadcast communication to support fault-tolerant applications. Broadcast communication primitives typically provide reliability, atomic-ity, and ordering properties at a single operation (or equivalently message) level.
Reference: 9. <author> E. Knapp. </author> <title> Deadlock Detection in Distributed Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(4) </volume> <pages> 303-328, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: An immediate consequence of this requirement is that every site must use the same approach for resolving deadlocks, i.e., all of them use either deadlock detection using wait-for-graphs or deadlock prevention using wound-wait or wound-die <ref> [9] </ref>. The manner in which commit operations (and hence lock releases) are processed by the lock managers has direct ramifications on the choice of the deadlock resolution mechanism. If the lock manager does not process new operations before the completion of a prior commit operation, either strategy can be used.
Reference: 10. <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended virtual synchrony. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 56-65, </pages> <year> 1994. </year>
Reference-contexts: The distributed systems and computing communities have in general been interested in the broader problem of fault-tolerance in distributed applications. In particular, several systems such as ISIS [4], Amoeba [8], Trans/Total <ref> [10] </ref>, and Transis [2] provide broadcast communication to support fault-tolerant applications. Broadcast communication primitives typically provide reliability, atomic-ity, and ordering properties at a single operation (or equivalently message) level.
Reference: 11. <author> M. Raynal, G. Thia-Kime, and M Ahamad. </author> <title> From Serializable to causal Transactions for Collaborative Applications. </title> <type> Technical report, </type> <institution> IRISA, </institution> <year> 1996. </year> <note> Publication Interne No. 983. </note>
Reference-contexts: From the database point of view, a study of relaxed consistency conditions, e.g., causal serializability <ref> [11] </ref> may be beneficial within the context of weaker broadcast properties, e.g., based on causal [15] rather than atomic broadcasts.
Reference: 12. <author> A. Schiper and M. Raynal. </author> <title> From Group Communication to Transactions in Distributed Systems. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 84-87, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Transactions, on the other hand, require reliability, atomicity, and ordering guarantees not for a single operation but for a group of operations. In order to use broadcast for transaction management in replicated data, this mismatch needs to be addressed <ref> [12] </ref>. In this paper, we propose a series of protocols that bridge the gap between database transactions and broadcast communication in the context of replicated databases. Our goal is twofold.
Reference: 13. <author> R. Schlichting and F. B. Schneider. </author> <title> Fail-Stop Processors: An Approach to Designing Fault-Tolerant Computing Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 1(3) </volume> <pages> 222-238, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: If sites p and q deliver broadcast messages m and m 0 , then m and m 0 are delivered in the same order at all sites. In the Section 3, we assume no site failures, however, in the rest of the paper we consider sites that are fail-stop <ref> [13] </ref>. In [1] issues involving failures and recovery are presented in more detail. 3 A Naive Broadcast Based Replica Control Protocol We first develop a simple protocol for maintaining a replicated database in an idealized environment when there are no failures.
Reference: 14. <author> F. B. Schneider. </author> <title> Synchronization in Distributed Programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(2) </volume> <pages> 125-148, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: Given that the underlying communication system supports totally ordered atomic broadcasts, the state machine approach <ref> [14] </ref> can be used to maintain replicated data. In the state machine approach operations are processed one at a time at every site in the same order.
Reference: 15. <author> I. Stanoi, D. Agrawal, and A. El Abbadi. </author> <title> Using Broadcast Primitives in Replicated Databases. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1997. </year> <title> Acknowledgements This research was partially supported by LANL under grant number 6863V0016-3A, by CalTrans under grant number 65V250A, and by the NSF under grant numbers IRI94-11330, </title> <publisher> CDA94-21978 and CCR95-05807. </publisher>
Reference-contexts: From the database point of view, a study of relaxed consistency conditions, e.g., causal serializability [11] may be beneficial within the context of weaker broadcast properties, e.g., based on causal <ref> [15] </ref> rather than atomic broadcasts.
References-found: 15

