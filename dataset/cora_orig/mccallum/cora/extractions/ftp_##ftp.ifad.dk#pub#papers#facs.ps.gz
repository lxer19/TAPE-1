URL: ftp://ftp.ifad.dk/pub/papers/facs.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: Formal Aspects of  A Formal Semantics of Data Flow Diagrams  
Author: Peter Gorm Larsen, Nico Plat and Hans Toetenel 
Keyword: Data flow diagrams; VDM; Formal semantics  
Address: Netherlands.  
Affiliation: 1 IFAD, Odense, Denmark. 2 Delft University of Technology, Faculty of Technical Mathematics and Informatics, Delft,  CAP Volmac, Utrecht, The  
Note: c  The Netherlands. Nico Plat is currently with  
Pubnum: Computing  
Date: (1993) 3: 1-000  1993 BCS  
Abstract: This paper presents a formal semantics of data flow diagrams as used in Structured Analysis, based on an abstract model for data flow transformations. The semantics consists of a collection of VDM functions, transforming an abstract syntax representation of a data flow diagram into an abstract syntax representation of a VDM specification. Since this transformation is executable, it becomes possible to provide a software analyst/designer with two `views' of the system being modeled: a graphical view in terms of a data flow diagram, and a textual view in terms of a VDM specification. In this paper emphasis is on the motivation for the choices made in the transformation. The main aspects of the transformation itself are described using annotated VDM functions with some examples. 
Abstract-found: 1
Intro-found: 1
Reference: [|92] ||. <institution> VDM Specification Language: </institution> <note> Proto-Standard (Draft). Document N-246 (I-9), </note> <author> BSI IST/5/-/19 and ISO/IEC JTC1/SC22/WG19, </author> <month> December </month> <year> 1992. </year>
Reference: [Adl88] <author> Mike Adler. </author> <title> An Algebra for Data Flow Diagram Process Decomposition. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(2):169-183, </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: In [ELP93] a complete semantics is provided for the Ward and Mellor version of SA/RT by means of high-level timed Petri nets. Here an executable subset of VDM-SL is also used to describe the mini-specifications of an SA/RT model. In <ref> [Adl88] </ref> a semantic base for guiding the decomposition process in the construction of a hierarchy of DFDs is presented. This work is based on graph theory in an algebraic setting.
Reference: [AI91] <author> Derek Andrews and Darell Ince. </author> <title> Practical Formal Methods with VDM. </title> <publisher> McGraw Hill, </publisher> <year> 1991. </year>
Reference-contexts: Our work in this area so far has concentrated on combining Structured Analysis (SA) [You75, DeM79, GS79] with the Vienna Development Method (VDM) [BJ82, Jon90]; we provide a brief introduction to SA, but we refer to text books such as [Jon90] and <ref> [AI91] </ref> for an introduction to VDM. We think that a well-integrated combination of notations can be achieved by using data flow diagrams (DFDs) which we consider to be the main design notation of SA - as a graphical view of the system and VDM as a textual view.
Reference: [Ala88] <author> Bruno Alabiso. </author> <title> Transformation of Data Flow Analysis Models to Object Oriented Design. </title> <booktitle> In OOPSLA'88 Proceedings, </booktitle> <pages> pages 335-353. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1988. </year>
Reference-contexts: In Section 4.2.2 we come back to this restriction in more detail. * There is a one-to-one mapping between the input to the system and the output from the system. One-to-many mappings and many-to-one mappings are a common problem when interpreting DFDs, described in more detail in <ref> [Ala88] </ref> 4 . <p> The types of all data flows in the data flow diagrams must be defined in the data dictionary. Besides this, the signature of the top-level DFD must conform to its topology. SA = HDFD fi DD fi MSs 4 In <ref> [Ala88] </ref> this problem is called I/O uncohesiveness. I/O uncohesiveness occurs if either a data transformer must consume several pieces of input data before generating output data, or if a data transformer generates pieces of output independently of all other inputs and outputs. <p> Work has been done on formalizing DFDs, with the intention of either disambiguating their meaning, or of using the formal semantics as a base for a combined formal/structured method. In [Ran90] a translation back and forth between DFDs and Z specifications is described. <ref> [Ala88] </ref> contains an explanation of how DFDs can manually be transformed into an object-oriented design. The paper touches upon some problematic issues arising in a transformation from DFDs. In [SA] a small example of how a DFD can be transformed in Z is presented.
Reference: [Bea88] <author> Stephen Bear. </author> <title> Structuring for the VDM Specification Language. </title> <editor> In R. Jones R. Bloomfield, L. Marshall, editor, </editor> <booktitle> VDM'88; VDM The Way Ahead, </booktitle> <pages> pages 2-25. </pages> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1988. </year> <note> LNCS 328. </note>
Reference-contexts: VDM functions and VDM operations (without side-effects) semantically differ in the way looseness is interpreted (see [LAMB89]). 3 VDM-SL as described in [|92] has no structuring mechanism. The structuring mechanism we used is based on a proposal by Bear <ref> [Bea88] </ref>. The constructs we use are simple so that an intuitive interpretation suffices. 6 P.G. Larsen, N. Plat and W.J. Toetenel 3.3.
Reference: [BJ82] <author> D. Bjtrner and C.B. Jones. </author> <title> Formal Specification & Software Development. </title> <publisher> Pren-tice Hall International, </publisher> <year> 1982. </year>
Reference-contexts: Our work in this area so far has concentrated on combining Structured Analysis (SA) [You75, DeM79, GS79] with the Vienna Development Method (VDM) <ref> [BJ82, Jon90] </ref>; we provide a brief introduction to SA, but we refer to text books such as [Jon90] and [AI91] for an introduction to VDM.
Reference: [BvdW89] <author> P.D. Bruza and Th. P. van der Weide. </author> <title> The Semantics of Data Flow Diagrams. </title> <type> Technical Report 89-16, </type> <institution> University of Nijmegen, </institution> <address> The Netherlands, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: In [SA] a small example of how a DFD can be transformed in Z is presented. However, no formal semantics of the DFDs is presented and it is not clear to what extent the transformation can be automated. In <ref> [BvdW89] </ref> some guidelines for how semantics can be attached to A Formal Semantics of Data Flow Diagrams 19 DFDs are given. It is sketched how DFDs can be transformed into a Petri net variant combined with path expressions.
Reference: [CY79] <author> L.L. Constantine and E. Yourdon. </author> <title> Structured Design. </title> <publisher> Prentice Hall International, </publisher> <year> 1979. </year>
Reference-contexts: A Formal Semantics of Data Flow Diagrams 3 2. Overview of Structured Analysis Structured Analysis (SA) [You75, DeM79, GS79] is one of the most widely used methods for software analysis. Often it is used in combination with Structured Design (SD) <ref> [CY79] </ref>; the resulting combination is called SA/SD.
Reference: [Daw91] <author> John Dawes. </author> <title> The VDM-SL Reference Guide. </title> <publisher> Pitman (London, </publisher> <address> UK), </address> <year> 1991. </year>
Reference-contexts: The base of a combined structured/formal method consists of a formally defined relation between the structured method and the formal method. In [PvKP91] we describe several approaches to modeling DFDs using the VDM-SL specification language <ref> [|92, Daw91] </ref>. In this paper we discuss one such particular model in more detail, thus essentially providing a `formal semantics' of DFDs. A discussion on the methodological aspects of the approach can be found in [LvKP + 93]. The remainder of this paper is organized as follows.
Reference: [DeM79] <author> Tom DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon Press (New Jersey, </publisher> <address> USA), </address> <year> 1979. </year>
Reference-contexts: Therefore, a combined structured/formal method may not only increase the understanding of the use of formal methods in the software process, but also may increase the acceptability of formal methods to these people. Our work in this area so far has concentrated on combining Structured Analysis (SA) <ref> [You75, DeM79, GS79] </ref> with the Vienna Development Method (VDM) [BJ82, Jon90]; we provide a brief introduction to SA, but we refer to text books such as [Jon90] and [AI91] for an introduction to VDM. <p> A Formal Semantics of Data Flow Diagrams 3 2. Overview of Structured Analysis Structured Analysis (SA) <ref> [You75, DeM79, GS79] </ref> is one of the most widely used methods for software analysis. Often it is used in combination with Structured Design (SD) [CY79]; the resulting combination is called SA/SD.
Reference: [ELP93] <author> Rene Elmstrtm, Raino Lintulampi, and Mauro Pezze. </author> <title> Giving Semantics to SA/RT by Means of High Level Timed Petri Nets. </title> <booktitle> Real-Time Systems, </booktitle> 5(2/3):249-272, May 1993. 
Reference-contexts: In [BvdW89] some guidelines for how semantics can be attached to A Formal Semantics of Data Flow Diagrams 19 DFDs are given. It is sketched how DFDs can be transformed into a Petri net variant combined with path expressions. In <ref> [ELP93] </ref> a complete semantics is provided for the Ward and Mellor version of SA/RT by means of high-level timed Petri nets. Here an executable subset of VDM-SL is also used to describe the mini-specifications of an SA/RT model.
Reference: [FKV91] <author> M.D. Fraser, K. Kumar, and V.K. Vaishnavi. </author> <title> Informal and Formal Requirements Specification Languages: Bridging the Gap. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-17(5):454-466, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: This work is based on graph theory in an algebraic setting. Kevin Jones uses VDM to provide a denotational style semantics of a non-conventional machine architecture (The Manchester DataFlow Machine) based on data flow graphs [Jon87]. In <ref> [FKV91] </ref> a rule-based approach for transforming SA products into VDM specifications is presented. Their VDM specifications are very explicit and hard to read, mainly because of the way decision tables have been taken into account.
Reference: [Fra92] <author> Robert B. </author> <title> France. Semantically Extended Data Flow Diagrams: A Formal Specification Tool. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-18(4):329-346, </volume> <month> April </month> <year> 1992. </year>
Reference-contexts: Polack et al. concentrate on the methodological aspects of combining SA notations and Z specifications [Pol92], the resulting combination is known as SAZ. Tse and Pong use extended Petri nets for formalizing DFDs [TP89]. France discusses an algebraic approach to modeling control-extended DFDs in <ref> [Fra92] </ref>. In [SFD92] an overview of several approaches to combining SA techniques and notations with formal methods (including our approach) is given.
Reference: [GS79] <author> Chris Gane and Trish Sarson. </author> <title> Structured Systems Analysis: Tools and Techniques. </title> <publisher> Prentice Hall International, </publisher> <year> 1979. </year>
Reference-contexts: Therefore, a combined structured/formal method may not only increase the understanding of the use of formal methods in the software process, but also may increase the acceptability of formal methods to these people. Our work in this area so far has concentrated on combining Structured Analysis (SA) <ref> [You75, DeM79, GS79] </ref> with the Vienna Development Method (VDM) [BJ82, Jon90]; we provide a brief introduction to SA, but we refer to text books such as [Jon90] and [AI91] for an introduction to VDM. <p> A Formal Semantics of Data Flow Diagrams 3 2. Overview of Structured Analysis Structured Analysis (SA) <ref> [You75, DeM79, GS79] </ref> is one of the most widely used methods for software analysis. Often it is used in combination with Structured Design (SD) [CY79]; the resulting combination is called SA/SD.
References-found: 14

