URL: http://www.cs.man.ac.uk/~kung-kiu/pub/icfem98.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~kung-kiu/pub/
Root-URL: http://www.cs.man.ac.uk
Email: kung-kiu@cs.man.ac.uk  liu@white.sel.cs.hiroshima-cu.ac.jp  ornaghi@dsi.unimi.it  alan@trireme.com  
Title: Interacting Frameworks in Catalysis  
Author: Kung-Kiu Lau Shaoying Liu Mario Ornaghi Alan Wills 
Address: Manchester M13 9PL, UK  151-5, Ozuka, Numata-cho,Asaminami-ku Hiroshima, 731-31, Japan  Via Comelico 39/41, 20135 Milano, Italy  24 Windsor Road, Manchester M19 2EB, UK  
Affiliation: Dept of Computer Science University of Manchester  Dept. of Computer Science Hiroshima City University  DSI, Universita' degli studi di Milano  Trireme International Ltd  
Abstract: In current OO Design, most of the existing (semi-formal) methods use classes or objects as the basic unit of design. However, it is increasingly recognised that classes are not the best focus for design. Typical design artefacts are about groups of objects and the way they interact. In the Catalysis project, we use the term frameworks for descriptions of groups of objects, their relationships, division of responsibilities, and interactions. The power of frameworks lies in the fact that interactions can also occur at the level of frameworks. In a previous paper, we defined a framework formally as a (first-order) many-sorted theory with a model-theoretic semantics and showed how it can be represented using a pictorial notation for practical system development. However, we considered only frameworks that do not interact with one another. In this paper, we discuss frameworks that interact with one another, and show that such frameworks are very powerful tools for formal OO Design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bertoni, G. Mauri and P. Miglioli. </author> <title> On the power of model theory in specifying abstract data types and in capturing their recursiveness. </title> <journal> Fundamenta Informati-cae VI(2):127170, </journal> <year> 1983. </year>
Reference-contexts: However, isoinitial theories handle negation properly, whereas initial theories can only do so via so-called `final models'. Negation is an important property in reasoning about specifications and program correctness in general, e.g. in proving invariants. Therefore we have chosen isoinitial theories as frameworks (see <ref> [1] </ref> for a discussion of isoinitial theories). The syntax we will use for F is similar to that used in algebraic abstract data types (e.g. [8, 19, 18]).
Reference: [2] <author> R.H. Bourdeau and B.H.C. Cheng. </author> <title> A formal semantics for object model diagrams. </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> 21(10) </volume> <pages> 799-821, </pages> <year> 1995. </year>
Reference-contexts: We also presented a pictorial representation of such theories, since practitioners of OO Design often prefer to use pictorial notations for design. Thus we could reason formally about design by using the sound (formal) semantics for the diagrams (cf. <ref> [2, 7] </ref>). The power of frameworks lies in the fact that interactions can also occur at the level of frameworks. However, in [16], we considered only frameworks that do not interact with one another. <p> To describe such interacting frameworks properly, we need first to formalise frameworks. We also need to include a formal semantics for objects with states; however for lack of space we will not do so in this paper, and refer the reader to <ref> [2] </ref> and [15] for two examples of possible formalisations. 3.1 Formalisation of Closed Frameworks We distinguish between closed and open frameworks, depending on the absence or presence of parameters. First we deal with closed frameworks. <p> Our interacting frameworks and their composition also have a formal semantics. Thus we believe that such frameworks provide very powerful tools for practical formal OOD. The work that is most closely related to ours is that of Bourdeau and Cheng <ref> [2] </ref>, and France et al [7]. Our work is different and novel mainly in the use of frameworks in general, and the use of interacting frameworks in particular. Future work includes completing the formalisation of OOD frameworks by adding a formalisation of objects with states. <p> Our work is different and novel mainly in the use of frameworks in general, and the use of interacting frameworks in particular. Future work includes completing the formalisation of OOD frameworks by adding a formalisation of objects with states. Here we envisage a similar approach to that of <ref> [2] </ref>, by adding states as sorts and operations on these sorts for updating states. Another important piece of future work will be the implementation of a tool for supporting the diagrammatic notation for frameworks, together with a tool for formal reasoning about frameworks.
Reference: [3] <author> D. Coleman, P. Arnold, S. Bodoff, C. Dollin, H. Gilchrist, F. Hayes, and P. Jeremaes. </author> <title> Object-Oriented Development: The Fusion Method. </title> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: Grant for Special Academic Research (International Studies) SCS-FM (A440). y Supported in part by the Ministry of Education of Japan under Grant-in-Aid for Scientific Research on Priority Areas (No.90264960) and by Hi-roshima City University under Hiroshima City University Grant for Special Academic Research (No. 9842). formal) methods such as Fusion <ref> [3, 5] </ref> and Syntropy [4] use classes or objects as the basic unit of design. However, it is increasingly recognised that classes are not the best focus for design (see e.g. [10, 17]).
Reference: [4] <author> S. Cook and J. Daniels. </author> <title> Designing Object Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: Research (International Studies) SCS-FM (A440). y Supported in part by the Ministry of Education of Japan under Grant-in-Aid for Scientific Research on Priority Areas (No.90264960) and by Hi-roshima City University under Hiroshima City University Grant for Special Academic Research (No. 9842). formal) methods such as Fusion [3, 5] and Syntropy <ref> [4] </ref> use classes or objects as the basic unit of design. However, it is increasingly recognised that classes are not the best focus for design (see e.g. [10, 17]).
Reference: [5] <author> D.F. D'Souza and A.C. Wills. </author> <title> Extending Fusion: practical rigor and refinement. </title> <editor> In R. Malan et al, editors, </editor> <booktitle> Object-Oriented Development at Work. Prentice-Hall 1996. </booktitle>
Reference-contexts: Grant for Special Academic Research (International Studies) SCS-FM (A440). y Supported in part by the Ministry of Education of Japan under Grant-in-Aid for Scientific Research on Priority Areas (No.90264960) and by Hi-roshima City University under Hiroshima City University Grant for Special Academic Research (No. 9842). formal) methods such as Fusion <ref> [3, 5] </ref> and Syntropy [4] use classes or objects as the basic unit of design. However, it is increasingly recognised that classes are not the best focus for design (see e.g. [10, 17]).
Reference: [6] <author> D.F. D'Souza and A.C. Wills. Catalysis: </author> <title> Components, Objects and Frameworks in UML. </title> <publisher> Addison-Wesley, </publisher> <month> October </month> <year> 1998. </year> <note> Draft available at http://www.trireme.com/catalysis/book. </note>
Reference-contexts: Designs are then built by composing these frameworks, and any object in the final design will play (various) roles from several frameworks. In [16], we discussed frameworks in the OO Design methodology Catalysis <ref> [6] </ref>, and showed that these frameworks can be formalised as many-sorted theories. We also presented a pictorial representation of such theories, since practitioners of OO Design often prefer to use pictorial notations for design.

Reference: [8] <author> J.A. Goguen and J. Meseguer. </author> <title> Unifying functional, object-oriented and relational programming with logical semantics. </title> <editor> In B. Shriver and P. Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 417477. </pages> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Therefore we have chosen isoinitial theories as frameworks (see [1] for a discussion of isoinitial theories). The syntax we will use for F is similar to that used in algebraic abstract data types (e.g. <ref> [8, 19, 18] </ref>). However, whilst an algebraic abstract data type is an initial model ([9]) of its specification, the intended model of F , i.e. the abstract data type it axiomatises, is an isoinitial model. In general, the existence of an isoinitial model is of course not guaranteed.
Reference: [9] <author> J.A. Goguen, J.W. Thatcher, and E. Wagner. </author> <title> An initial algebra approach to specification, correctness and implementation. </title> <editor> In R. Yeh, editor, </editor> <booktitle> Current Trends in Programming Methodology, IV, </booktitle> <pages> pages 80-149. </pages> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: Both initial and isoinitial theories enjoy the so-called `no junk' and `no confusion' properties <ref> [9] </ref>. `No junk' means that the (initial or isoinitial) model is reachable (by ground terms), and `no confusion' means that two ground terms of the domain of the model are identical iff they are equal according to the axioms.
Reference: [10] <author> R. Helm, I.M. Holland, and D. Gangopadhay. </author> <title> Contracts Specifying behavioural compositions in OO systems. </title> <journal> Sigplan Notices 25(10) (Proc. </journal> <volume> ECOOP/OOPSLA 90). </volume>
Reference-contexts: However, it is increasingly recognised that classes are not the best focus for design (see e.g. <ref> [10, 17] </ref>). Rather, in composing designs from reusable parts, the parts are preferably frameworks, namely descriptions of the interactive relationships between objects which participate in the interactions. Designs are then built by composing these frameworks, and any object in the final design will play (various) roles from several frameworks.
Reference: [11] <author> I. Jacobson et al. </author> <title> Object-Oriented Software Engineering. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: The idea is similar to transactions and to use-cases <ref> [11] </ref>. Both participants are named in the headers and referred to in the postcondition. The set of operations on either of the two types is obviously incomplete.
Reference: [12] <author> C. Kreitz, K.-K. Lau, and M. Ornaghi. </author> <title> Formal reasoning about modules, reuse and their correctness. In D.M. </title> <editor> Gabbay and H.J. Ohlbach, editors, </editor> <booktitle> Proc. Int. Conf. on Formal and Applied Practical Reasoning, LNAI 1085, </booktitle> <pages> pages 384399, </pages> <publisher> Springer-Verlag 1996. </publisher>
Reference-contexts: A proof is given in <ref> [12] </ref>. 3.5 Interacting Frameworks in Catalysis: An Example Having laid the formal foundations for interacting frameworks and their composition, we round off this paper with a look at an example of such frameworks and their composition in Catalysis.
Reference: [13] <author> K.-K. Lau and M. Ornaghi. </author> <title> On specification frameworks and deductive synthesis of logic programs. </title> <editor> In L. Fribourg and F. Turini, editors, </editor> <booktitle> Proc. LOPSTR 94 and META 94, </booktitle> <volume> LNCS 883, </volume> <pages> pages 104121, </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The last axiom is an induction schema for reasoning about all such predicates. Similarly, we can axiomatise (finite) bags and sets in terms of (finite) sequences of elements of type X. This illustrates the hierarchical nature of our approach to framework construction <ref> [13, 14] </ref>, starting from the simplest type, e.g. natural numbers. The same approach is of course adopted by related work in algebraic abstract data types; however, our approach is different in the use of isoinitial semantics as the intended semantics of the specification language.
Reference: [14] <author> K.-K. Lau, C.D.M. Moss and M. Ornaghi. </author> <title> Formal development of correct classes in computational logic. Formal development of correct classes in computational logic. In D.J. Duke and A.S. </title> <editor> Evans, editors, </editor> <booktitle> Proc. BCS-FACS Northern Formal Methods Workshop, Electronic Workshops in Computing Series. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The last axiom is an induction schema for reasoning about all such predicates. Similarly, we can axiomatise (finite) bags and sets in terms of (finite) sequences of elements of type X. This illustrates the hierarchical nature of our approach to framework construction <ref> [13, 14] </ref>, starting from the simplest type, e.g. natural numbers. The same approach is of course adopted by related work in algebraic abstract data types; however, our approach is different in the use of isoinitial semantics as the intended semantics of the specification language.
Reference: [15] <author> K.-K. Lau and M. Ornaghi. </author> <title> OOD Frameworks in Component-based Software Development in Computational Logic. </title> <editor> In P. Flener and K.-K. Lau, editors, </editor> <title> Pre-Proceedings of LOPSTR'98, </title> <type> Technical Report UMCS-98-6-1, </type> <institution> Dept of Computer Science, University of Manchester, </institution> <address> pages 172179, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: To describe such interacting frameworks properly, we need first to formalise frameworks. We also need to include a formal semantics for objects with states; however for lack of space we will not do so in this paper, and refer the reader to [2] and <ref> [15] </ref> for two examples of possible formalisations. 3.1 Formalisation of Closed Frameworks We distinguish between closed and open frameworks, depending on the absence or presence of parameters. First we deal with closed frameworks.
Reference: [16] <author> K.-K. Lau, M. Ornaghi, and A. Wills. </author> <title> Frameworks in Catalysis: Pictorial Notation and Formal Semantics. </title> <editor> In M. Hinchey and S. Liu, editors, </editor> <booktitle> Proc. 1st IEEE Int. Conf. on Formal Engineering Methods, pages 213--220, IEEE Computer Society, </booktitle> <year> 1997. </year>
Reference-contexts: Rather, in composing designs from reusable parts, the parts are preferably frameworks, namely descriptions of the interactive relationships between objects which participate in the interactions. Designs are then built by composing these frameworks, and any object in the final design will play (various) roles from several frameworks. In <ref> [16] </ref>, we discussed frameworks in the OO Design methodology Catalysis [6], and showed that these frameworks can be formalised as many-sorted theories. We also presented a pictorial representation of such theories, since practitioners of OO Design often prefer to use pictorial notations for design. <p> Thus we could reason formally about design by using the sound (formal) semantics for the diagrams (cf. [2, 7]). The power of frameworks lies in the fact that interactions can also occur at the level of frameworks. However, in <ref> [16] </ref>, we considered only frameworks that do not interact with one another. In this paper, we shall first briefly summarise our treatment of Catalysis frameworks in [16], and then expand it to interacting frameworks, viz. frameworks that interact with one another via external operations. <p> The power of frameworks lies in the fact that interactions can also occur at the level of frameworks. However, in <ref> [16] </ref>, we considered only frameworks that do not interact with one another. In this paper, we shall first briefly summarise our treatment of Catalysis frameworks in [16], and then expand it to interacting frameworks, viz. frameworks that interact with one another via external operations. <p> ResourceAllocation hResourceFacilityi hResourcei when: Date * * * Resource: hJobCategoryi hJobOccurrencei JobOccurrence: rqmts allocated schedule allocated6=NIL)allocated.providesjob.rqmts job *provides fjo1,jo2gschedule^jo16=jo2)jo1.when6=jo2.when 2.3 Composite OOD Frameworks An open OOD framework can be instantiated by a renaming of its signature (see <ref> [16] </ref>), and its instances can be composed. Such a composite framework would look like its constituent frameworks, with invariants that are simply the conjunction of those in the latter. Example 2.3 Consider the scheduling problem for a teaching organisation. <p> We shall use a diagrammatic notation introduced in <ref> [16] </ref>, which we have also used in the previous examples in this paper. Although our example is described informally, it is worth pointing out that our diagrammatic notation has the formal semantics that we have outlined for frameworks and their composition (see [16]). <p> We shall use a diagrammatic notation introduced in <ref> [16] </ref>, which we have also used in the previous examples in this paper. Although our example is described informally, it is worth pointing out that our diagrammatic notation has the formal semantics that we have outlined for frameworks and their composition (see [16]). In Catalysis, interactions between frameworks take place via abstract operations, which are formalised as relation parameters with p-axioms.
Reference: [17] <author> R. Mauth. </author> <title> A better foundation: development frameworks let you build an application with reusable objects. </title> <address> BYTE 21(9):40IS 10-13, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: However, it is increasingly recognised that classes are not the best focus for design (see e.g. <ref> [10, 17] </ref>). Rather, in composing designs from reusable parts, the parts are preferably frameworks, namely descriptions of the interactive relationships between objects which participate in the interactions. Designs are then built by composing these frameworks, and any object in the final design will play (various) roles from several frameworks.
Reference: [18] <author> D. Sannella and A. Tarlecki. </author> <title> Essential concepts of algebraic specification and program development. </title> <booktitle> Formal Aspects of Computer Science 9 </booktitle> <pages> 229-269, </pages> <year> 1997. </year>
Reference-contexts: Therefore we have chosen isoinitial theories as frameworks (see [1] for a discussion of isoinitial theories). The syntax we will use for F is similar to that used in algebraic abstract data types (e.g. <ref> [8, 19, 18] </ref>). However, whilst an algebraic abstract data type is an initial model ([9]) of its specification, the intended model of F , i.e. the abstract data type it axiomatises, is an isoinitial model. In general, the existence of an isoinitial model is of course not guaranteed.
Reference: [19] <author> M. Wirsing. </author> <title> Algebraic specification. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 675788. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: Therefore we have chosen isoinitial theories as frameworks (see [1] for a discussion of isoinitial theories). The syntax we will use for F is similar to that used in algebraic abstract data types (e.g. <ref> [8, 19, 18] </ref>). However, whilst an algebraic abstract data type is an initial model ([9]) of its specification, the intended model of F , i.e. the abstract data type it axiomatises, is an isoinitial model. In general, the existence of an isoinitial model is of course not guaranteed.
References-found: 18

