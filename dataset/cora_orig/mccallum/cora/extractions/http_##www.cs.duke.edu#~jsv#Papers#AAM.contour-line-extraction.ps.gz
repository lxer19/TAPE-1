URL: http://www.cs.duke.edu/~jsv/Papers/AAM.contour-line-extraction.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node21.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: pankaj@cs.duke.edu.  Email: large@cs.duke.edu.  Email: tmax@cs.duke.edu.  Email: krv@cs.duke.edu.  Email: jsv@cs.duke.edu.  
Title: I/O-Efficient Algorithms for Contour-line Extraction and Planar Graph Blocking (Extended Abstract)  
Author: Pankaj K. Agarwal Lars Arge T. M. Murali Kasturi R. Varadarajan Jeffrey Scott Vitter 
Note: Supported in part by National Science Foundation research grant CCR-93-01259, by Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by a National Science Foundation NYI award and matching funds from Xerox Corporation, and by a grant from the U.S.-Israeli Binational Science Foundation.  Supported in part by U.S. Army Research Office grant DAAH04-96-1-0013.  Affiliated with Brown University. Supported in part by National Science Foundation research grant CCR-9522047 and by Army Research Office MURI grant DAAH04-96-1-0013.  Supported in part by National Science Foundation Grant CCR-93-01259, by an Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, and by a National Science Foundation NYI award and matching funds from Xerox Corporation.  Supported in part by the U.S. Army Research Office under grants DAAH04-93-G-0076 and DAAH04-96-1-0013 and by the National Science Foundation under grant CCR-9522047. Part of this work was done while visiting Bell  Figure 1: A terrain represented as a TIN.  
Address: Durham, NC 27708-0129  Murray Hill, NJ.  
Affiliation: Center for Geometric Computing Department of Computer Science Duke University  Laboratories,  
Abstract: For a polyhedral terrain , the contour at z-coordinate h, denoted C h , is defined to be the intersection of the plane z = h with . In this paper, we study the contour-line extraction problem, where we want to preprocess into a data structure so that given a query z-coordinate h, we can report C h quickly. This is a central problem that arises in geographic information systems (GIS), where terrains are often stored as Triangular Irregular Networks (TINs). We present an I/O-optimal algorithm for this problem which stores a terrain with N vertices using O(N=B) blocks, where B is the size of a disk block, so that for any query h, the contour C h can be computed using O(log B N + jC h j=B) I/O operations, where jC h j denotes the size of C h . We also present an improved algorithm for a more general problem of blocking bounded-degree planar graphs such as TINs (i.e., storing them on disk so that any graph traversal algorithm can traverse the graph in an I/O-efficient manner), and apply it to two problms that arise in GIS. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal and J. S. Vitter. </author> <title> The Input/Output complexity of sorting and related problems. </title> <journal> Communications of the ACM, </journal> <volume> 31 </volume> <pages> 1116-1127, </pages> <year> 1988. </year>
Reference-contexts: Our focus in this paper is on developing algorithms that optimize I/O performance. 1.1 Memory model We develop our algorithms in the standard two-level I/O model proposed by Aggarwal and Vitter <ref> [1] </ref>. This model defines the following parameters: N = # of elements in the problem instance; M = # of elements fitting in internal memory; B = # of elements per disk block; where M &lt; N and 1 B M=2. <p> GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
Reference: [2] <author> L. Arge. </author> <title> The buffer tree: A new technique for optimal I/O-algorithms. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 955, </volume> <pages> pages 334-345, </pages> <year> 1995. </year>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
Reference: [3] <author> L. Arge. </author> <title> Efficient External-Memory Data Structures and Applications. </title> <type> PhD thesis, </type> <institution> University of Aarhus, Denmark, </institution> <month> February/August </month> <year> 1996. </year>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
Reference: [4] <author> L. Arge. </author> <title> External-memory algorithms with applications in geographic information systems. </title> <editor> In M. van Kreveld, J. Nievergelt, T. Roos, and P. Widmayer, editors, </editor> <title> Algorithmic Foundations of GIS. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
Reference: [5] <author> L. Arge, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory algorithms for processing line segments in geographic information systems. </title> <journal> Algorithmica, </journal> <note> to appear. </note>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
Reference: [6] <author> L. Arge and J. S. Vitter. </author> <title> Optimal dynamic interval management in external memory. </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 560-569, </pages> <year> 1996. </year>
Reference-contexts: The algorithm then traverses the terrain to obtain each contour component "in sorted order." Using the external interval tree recently developed by Arge and Vitter <ref> [6] </ref>, Chiang and Silva [9] extended and generalized van Kreveld's approach to external memory so that "unstructured" contour-line (or iso-surface) extraction queries (where no traversal of the components is needed) can be answered using an optimal O (log B N + jC h j=B) I/Os. <p> Using the above blocking of a terrain we can also improve upon the algorithm described in Section 1.3 for answering a contour-line extraction query (assuming that all components have length (log 2 B)). We construct an external interval tree <ref> [6] </ref> on the z-spans of the triangles in , query the interval tree to get a segment in each cycle in the contour, and then traverse each cycle in order using the path traversal scheme described above.
Reference: [7] <author> R. Bayer and E. McCreight. </author> <title> Organization and maintenance of large ordered indexes. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: The way we do this is similar to the way the leaves in a standard B-tree are maintained <ref> [7, 10] </ref>. We maintain L using a linked list of blocks; each block b stores a contiguous subsequence ff (b) of L, and the pointer from block b points to a block b 0 such that ff (b 0 ) follows ff (b) in L.
Reference: [8] <author> Y.-J. Chiang, M. T. Goodrich, E. F. Grove, R. Tamas-sia, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory graph algorithms. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 139-149, </pages> <year> 1995. </year>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein. <p> Using this information, we can do a "list-ranking" of the segments output by the query to obtain the segments of each cycle in the contour in order. The "list-ranking" takes O (T =B log M=B (T =B)) time <ref> [8] </ref>. Thus, we get an overall blocking scheme that uses O (N=B) blocks of storage and allows contour-extraction in O (log B N + T =B log M=B (T =B)) I/Os.
Reference: [9] <author> Y.-J. Chiang and C. T. Silva. </author> <title> I/O optimal isosurface extraction. </title> <booktitle> In Proc. IEEE Visualization, </booktitle> <year> 1997. </year>
Reference-contexts: The algorithm then traverses the terrain to obtain each contour component "in sorted order." Using the external interval tree recently developed by Arge and Vitter [6], Chiang and Silva <ref> [9] </ref> extended and generalized van Kreveld's approach to external memory so that "unstructured" contour-line (or iso-surface) extraction queries (where no traversal of the components is needed) can be answered using an optimal O (log B N + jC h j=B) I/Os.
Reference: [10] <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys, </journal> <volume> 11 </volume> <pages> 121-137, </pages> <year> 1979. </year>
Reference-contexts: The way we do this is similar to the way the leaves in a standard B-tree are maintained <ref> [7, 10] </ref>. We maintain L using a linked list of blocks; each block b stores a contiguous subsequence ff (b) of L, and the pointer from block b points to a block b 0 such that ff (b 0 ) follows ff (b) in L.
Reference: [11] <author> M. de Berg, M. van Kreveld, R. van Oostrum, and M. Overmars. </author> <title> Simple traversal of a subdivision without extra storage. </title> <booktitle> In Proc. 3rd ACM Workshop on Advances in GIS, </booktitle> <pages> pages 77-84, </pages> <year> 1995. </year>
Reference-contexts: In the window query problem, we want to preprocess a terrain so that, given any rectangular query window W in the xy-plane, we can report the set W of all triangles whose xy-projections intersect W . In internal memory, one space- and time-efficient way of solving the problem <ref> [11] </ref> is to construct a point-location structure on [14], as well as a doubly-connected edge list (DCEL) for the dual graph of , and answer a query by locating the triangle containing one of the corners of W and performing a traversal of the dual graph to report W in O
Reference: [12] <author> J. R. Driscoll, N. Sarnak, D. D. Sleator, and R. E. Tarjan. </author> <title> Making data structures persistent. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 38 </volume> <pages> 86-124, </pages> <year> 1989. </year>
Reference-contexts: In order to construct the data structure, we sweep the terrain using a horizontal plane and maintain a structure representing the contour lines contained in the sweep plane. We use the persistence paradigm <ref> [12, 22] </ref> to retain all versions of this structure in order to allow contour-line queries at any z-coordinate. <p> At any height h of the sweep, we maintain a plane-sweep structure from which the contour C h can be easily obtained. The plane-sweep structure needs to be updated only when the sweep plane passes a vertex of the terrain. We use the persistence paradigm <ref> [12, 22] </ref> to create a persistent structure that retains all older versions of the plane-sweep structure. <p> Splitting a list is also easy, as it corresponds to moving a sublist of elements from somewhere in the super-list to (say) the end of the super-list. In internal memory such a structure can easily be made persistent using linear space <ref> [12, 22] </ref>, and this representation is indeed almost the one we will use. However, if we use this technique to make an external version of the structure persistent, we may need one new block every time we perform a split. <p> Due to lack of space, we omit some of the details, which we will provide in the full version of the paper. Driscoll et al. <ref> [12] </ref> describe general techniques for making an internal memory data structure persistent, and it is easy to use their so-called node-copying technique to obtain a (partially) persistent linked list in internal memory under insertions and deletions, so that if a total of K operations and pointer changes are performed on the
Reference: [13] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, part I. </title> <journal> Int. J. Computer Mathematics, </journal> <volume> 13 </volume> <pages> 209-219, </pages> <year> 1983. </year>
Reference-contexts: His algorithm stores the z-span of each triangle of the terrain in an interval tree <ref> [13] </ref>. Given a query z-coordinate h, the algorithm searches the interval tree to compute all the faces of the terrain whose z-spans contain h, from which it extracts the segments of C h in O (jC h j) time.
Reference: [14] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: In internal memory, one space- and time-efficient way of solving the problem [11] is to construct a point-location structure on <ref> [14] </ref>, as well as a doubly-connected edge list (DCEL) for the dual graph of , and answer a query by locating the triangle containing one of the corners of W and performing a traversal of the dual graph to report W in O (log 2 N + jW j) time.
Reference: [15] <author> G. N. Frederickson. </author> <title> Fast algorithms for shortest paths in planar graphs, with applications. </title> <journal> SIAM Journal of Computing, </journal> <volume> 16 </volume> <pages> 1004-1022, </pages> <year> 1987. </year>
Reference-contexts: We allow a node to be stored in more than one block. We now outline an efficient scheme for blocking any planar graph G = (V; E) with maximum degree d. Our method is based on a technique developed by Frederick-son <ref> [15] </ref> for partitioning planar graphs. Let (V 1 ; : : : ; V k ) be a covering of the node set of V , that is, V i V and S i V i = V . We refer to each V i as a region.
Reference: [16] <author> M. T. Goodrich, J.-J. Tsay, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory computational geometry. </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 714-723, </pages> <year> 1993. </year>
Reference-contexts: To solve the problem in an I/O-efficient manner, we preprocess into the O (N=B) space external-memory point-location data structure described by Goodrich et al. <ref> [16] </ref>, which supports point-location queries in O (log B N ) I/Os. We block the dual graph of as described above. We thus obtain the following result.
Reference: [17] <author> R. J. Lipton and R. E. Tarjan. </author> <title> A separator theorem for planar graphs. </title> <journal> SIAM Journal of Applied Math., </journal> <volume> 36 </volume> <pages> 177-189, </pages> <year> 1979. </year>
Reference-contexts: 1. each region V i has at most B nodes, 2. any node v is either a boundary node or it is interior to some region V i , and 3. the total number of boundary nodes is O (N= p Based on the separator theorem of Lipton and Tar-jan <ref> [17] </ref>, Frederickson gave an algorithm for constructing a B-division of any planar graph. We use a B-division of G as follows: Let S be the set of boundary nodes of the B-division.
Reference: [18] <author> W. E. Lorensen and H. E. Cline. </author> <title> Marching cubes: a high resolution 3D surface construction algorithm. </title> <journal> Computer Graphics, </journal> <volume> 21 </volume> <pages> 163-169, </pages> <year> 1987. </year>
Reference-contexts: Although the contour-line extraction problem has been well-studied for terrains stored as raster images (for example, see the Marching Cubes algorithm <ref> [18] </ref>), not much work has been done when terrains are stored as TINs. van Kreveld [23] gives an internal-memory algorithm for preprocessing a terrain into a data structure of size O (N ) so that a contour-line query at z-coordinate h can be answered in optimal O (log 2 N +jC
Reference: [19] <author> J. Nievergelt and P. Widmayer. </author> <title> Spatial data structures: Concepts and design choices. </title> <editor> In M. van Kreveld, J. Nievergelt, T. Roos, and P. Widmayer, editors, </editor> <title> Algorithmic Foundations of GIS. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
Reference: [20] <author> M. H. Nodine, M. T. Goodrich, and J. S. Vitter. </author> <title> Blocking for external graph searching. </title> <journal> Algorithmica, </journal> <volume> 16 </volume> <pages> 181-214, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: However, their algorithm needs an additional O (jC h j) I/Os to traverse the contour in "sorted order." van Kreveld et al. [26] have recently presented some related results. Another solution to the contour-line extraction problem follows from the results of Goodrich et al. <ref> [20] </ref> on the graph-blocking problem (which we formally de-fine later). <p> The linear storage bound is a significant improvement over the results of Goodrich et al. <ref> [20] </ref>. This result implies that we can store a terrain using O (N=B) blocks so that contour-line extraction queries can be answered using O (log B N + jC h j= log 2 B) I/Os, assuming that each contour component has (log 2 B) vertices. <p> We believe that our overall algorithm for contour-line extraction is of practical use since our algorithm is very simple. 2 Efficient Blocking of Bounded-Degree Planar Graphs In the graph blocking problem <ref> [20] </ref>, we are asked to store a (bounded-degree) graph G on disk, i.e., assign the nodes of G to disk blocks, so that any path in G (a sequence of nodes in which consecutive nodes are edge-adjacent) can be traversed in an I/O-efficient manner. <p> It is apparent that for every two blocks that we load from disk, we traverse at least (log d B)=2 nodes in . Thus we have obtained the following result, whose optimality follows from the results of Goodrich et al. <ref> [20] </ref>: Theorem 2.1 A planar graph with bounded degree d can be stored using O (N=B) blocks so that any path of length T can be traversed using O (T = log 2 B) I/Os.
Reference: [21] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
Reference: [22] <author> N. Sarnak and R. E. Tarjan. </author> <title> Planar point location using persistent search trees. </title> <journal> Communications of the ACM, </journal> <volume> 29 </volume> <pages> 669-679, </pages> <year> 1986. </year>
Reference-contexts: In order to construct the data structure, we sweep the terrain using a horizontal plane and maintain a structure representing the contour lines contained in the sweep plane. We use the persistence paradigm <ref> [12, 22] </ref> to retain all versions of this structure in order to allow contour-line queries at any z-coordinate. <p> At any height h of the sweep, we maintain a plane-sweep structure from which the contour C h can be easily obtained. The plane-sweep structure needs to be updated only when the sweep plane passes a vertex of the terrain. We use the persistence paradigm <ref> [12, 22] </ref> to create a persistent structure that retains all older versions of the plane-sweep structure. <p> Splitting a list is also easy, as it corresponds to moving a sublist of elements from somewhere in the super-list to (say) the end of the super-list. In internal memory such a structure can easily be made persistent using linear space <ref> [12, 22] </ref>, and this representation is indeed almost the one we will use. However, if we use this technique to make an external version of the structure persistent, we may need one new block every time we perform a split. <p> is easy to use their so-called node-copying technique to obtain a (partially) persistent linked list in internal memory under insertions and deletions, so that if a total of K operations and pointer changes are performed on the list, the space used by the whole structure is O (K) (see also <ref> [22] </ref>). Any "old" version of the list of length L can be traversed in O (L) steps once the head of the list has been located. The head can be located in O (log 2 K) time using a search tree.
Reference: [23] <author> M. van Kreveld. </author> <title> Efficient methods for isoline extraction from a digital elevation model based on triangulated irregular networks. </title> <booktitle> In Proc. 6th Int. Symp. on Spatial Data Handling, </booktitle> <pages> pages 835-847. </pages> <note> to appear in Int. J. on GIS. </note>
Reference-contexts: Returning the segments "in sorted order" is important in GIS applications <ref> [23] </ref>, for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see [1, 2, 3, <p> Although the contour-line extraction problem has been well-studied for terrains stored as raster images (for example, see the Marching Cubes algorithm [18]), not much work has been done when terrains are stored as TINs. van Kreveld <ref> [23] </ref> gives an internal-memory algorithm for preprocessing a terrain into a data structure of size O (N ) so that a contour-line query at z-coordinate h can be answered in optimal O (log 2 N +jC h j) time.
Reference: [24] <author> M. van Kreveld. </author> <title> Variations on sweep algorithms: Efficient computation of extended viewsheds and classifications. </title> <booktitle> In Proc. 7th Int. Symp. on Spatial Data Handling, </booktitle> <pages> pages 13A.15-13A.27, </pages> <year> 1996. </year>
Reference: [25] <author> M. van Kreveld. </author> <title> Digital elevation models: overview and selected TIN algorithms. </title> <editor> In M. van Kreveld, J. Niev-ergelt, T. Roos, and P. Widmayer, editors, </editor> <title> Algorithmic Foundations of GIS. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference: [26] <author> M. van Kreveld, R. van Oostrum, C. Bajaj, V. Pas-cucci, and D. Schikore. </author> <title> Contour trees and small seed sets for isosurface traversal. </title> <booktitle> In Proc. ACM Annual Symposium on Computational Geometry, </booktitle> <pages> pages 212-220, </pages> <year> 1997. </year>
Reference-contexts: However, their algorithm needs an additional O (jC h j) I/Os to traverse the contour in "sorted order." van Kreveld et al. <ref> [26] </ref> have recently presented some related results. Another solution to the contour-line extraction problem follows from the results of Goodrich et al. [20] on the graph-blocking problem (which we formally de-fine later).
Reference: [27] <author> J. S. Vitter and E. A. M. Shriver. </author> <title> Algorithms for parallel memory, I: Two-level memories. </title> <journal> Algorithmica, </journal> <volume> 12 </volume> <pages> 110-147, </pages> <year> 1994. </year>
Reference-contexts: GIS applications [23], for example, when smoothing is applied to a contour before it is displayed. 1.3 Previous results In the last few years, considerable attention has been given to the development of I/O-efficient algorithms in many problem domains, including sorting, graph algorithms, string algorithms, computational geometry, and GIS; see <ref> [1, 2, 3, 4, 5, 8, 19, 21, 27] </ref> and the references therein.
References-found: 27

