URL: http://www.informatik.uni-freiburg.de/~koehler/ipp/report.ps.gz
Refering-URL: http://www.informatik.uni-freiburg.de/~koehler/ipp.html
Root-URL: 
Email: &lt;last-name&gt;@informatik.uni-freiburg.de  
Title: Extending Planning Graphs to an ADL Subset  
Author: Jana Koehler Bernhard Nebel Jorg Hoffmann Yannis Dimopoulos 
Web: http://www.informatik.uni-freiburg.de/~ koehler/ipp.html  
Address: Am Flughafen 17 79110 Freiburg, Germany  
Affiliation: Institute for Computer Science Albert Ludwigs University  
Abstract: We describe an extension of graphplan to a subset of ADL that allows conditional and universally quantified effects in operators. The data structure of planning graphs is extended to cope with the more expressive operators in such a way that most of the interesting properties of the original graphplan formalism are preserved. A sound and complete planning algorithm extracts plans from planning graphs and terminates on unsolvable problems. A new efficient technique for subset memoization is presented to speed up the planner and we prove that graphplan's termination test remains complete under subset memoization. Results from an empirical evaluation demonstrate that this extension of the original graphplan system comes with almost no computational overhead if carefully implemented. The resulting system is the kernel algorithm of our own interference progression planner IP 2 that competes very well with other complete planners for operators with conditional and universally quantified effects such as UCPOP and Prodigy. Technical Report No. 88 1997 fl This report is a significantly extended version of a paper that appeared in the Proceedings of the 4th European Conference in Planning, Toulouse 1997. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Konolige A. Saffioti and E. Ruspini. </author> <title> A multivalued logic approach to integrated planning and control. </title> <journal> Artificial Intelligence, </journal> <volume> 76(1-2):481-526, </volume> <year> 1995. </year>
Reference-contexts: and in particular the theoretical properties such as soundness, completeness, generation of shortest plans, and termination on unsolvable problems motivated us to use the approach as the kernel algorithm for our own planner IP 2 that we intend to use as the high-level front-end of the Pioneer mobile robot platform <ref> [1] </ref>. 1 But graphplan also has its limitations. First, its performance can decrease dramatically if too much irrelevant information is contained in the specification of a planning task, see [10] for a detailed analysis.
Reference: [2] <author> A. Blum and M. Furst. </author> <title> Fast planning through planning graph analysis. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1636-1642. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction Planning with planning graphs <ref> [2] </ref> has received considerable attention because of the spectacular runtime behavior reported for the graphplan system. <p> The three actions are non-exclusive because they interfere only over their conditional effects. Planning graphs for the ADL subset inherit all properties of the original planning graphs as described in <ref> [2] </ref>: First, their size is polynomially restricted in their depths and the number of actions and facts in the initial state.
Reference: [3] <author> A. Blum and M. Furst. </author> <title> Fast planning through planning graph analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 90(1-2):279-298, </volume> <year> 1997. </year>
Reference-contexts: Second, its simple representation language is restricted to pure STRIPS operators no conditional or universally quantified effects are allowed and it was unclear whether the underlying planning algorithm could be extended to more expressive formalisms <ref> [3, 6, 9] </ref>. In principle, sets of STRIPS operators can be used to encode conditional effects. <p> For standard STRIPS operators, it is relatively easy to define when two operators can be executed in parallel and what the result of the execution is, cf. <ref> [3] </ref>. In the case of operators with universally quantified and conditional effects, several semantics are possible of which we discuss two in the following. <p> ; : : : ; o n i) = Res (Res (S; ho 1 ; : : : ; o n1 i); o n ) For a planning language of simple STRIPS actions, the definition of Res can be extended to a set of parallel actions in a straightforward way <ref> [3] </ref> such that the resulting state is uniquely defined. However, when conditional effects are allowed, it is very difficult and even very restrictive to guarantee the uniqueness property of Res. <p> 6 will be the formal basis to prove the planner sound and complete in Section 6. 3 Planning Graphs for the ADL Subset The algorithm to construct planning graphs for a given planning problem in the ADL subset of operators differs not very much from the original algorithm described in <ref> [3] </ref>. Definition 7 A planning problem P (O; D; I; G) is a 4-tuple where O is the set of operators, D is the domain of discourse (a finite set of typed objects), and I (the initial state) and G (the goal state) are sets of ground atoms. <p> If such a memoized goal set is tried again, one knows immediately that the goal set cannot be achieved. In addition to making the search more efficient, memoizing enables us to detect unsolvability of a planning problem <ref> [3, Theorem 3] </ref>, i.e., it guarantees termination. Of course, also a goal set G n that is a superset of a memoized unsuccessful goal set G cannot be achieved, and one can immediately backtrack at this point. <p> Of course, also a goal set G n that is a superset of a memoized unsuccessful goal set G cannot be achieved, and one can immediately backtrack at this point. Although this obvious extension is not mentioned in the paper describing graph-plan <ref> [3] </ref>, the system contains an option that enables such subset memoization (in a limited way). Unfortunately, with subset memoization, the termination check may not be sound any longer because the proof of Blum and Furst's [3] Theorem 3 does not apply to subset memoization. <p> Although this obvious extension is not mentioned in the paper describing graph-plan <ref> [3] </ref>, the system contains an option that enables such subset memoization (in a limited way). Unfortunately, with subset memoization, the termination check may not be sound any longer because the proof of Blum and Furst's [3] Theorem 3 does not apply to subset memoization. For this reason, the termination check in graphplan is disabled when the subset-memoization option is enabled. <p> Further, if m denotes the level where the graph has leveled off, then we know that U max m+1 = U max1 Finally, if we detect that U max1 m = U max m , we can conclude that the goals are unachievable <ref> [3, Theorem 3] </ref>. Let T max n be the unsuccessful goal sets memoized under the subset memoization strategy. Since some unsuccessful goal sets are not memoized under this strategy, it follows immediately that T max n (2) after an unsuccessful stage max for all levels n max. <p> For this reason, it is impossible that ^ U max n 0 1 6 ^ T max n 0 1 and the claim holds for n 0 1 as well, which proves the theorem. The arguments in the proof of Theorem 3 in <ref> [3] </ref> are all valid for the sets of excluded goal sets, which we spell out below. Lemma 4 A planning problem is unsolvable if the graph has leveled off on level m and ^ U max m . Of course, detecting this might be computationally difficult. <p> This forces IP 2 to exhaustively traverse the whole search space and prove that no plan exists that can make both subgoals true simultaneously, because this property of the domain follows from the interplay of the operator set with the initial state. As Blum and Furst pointed out in <ref> [3] </ref> 16 The reader should also notice the fact proven by Blum and Furst that planning graphs are polynomially restricted in size of the planning problem, i.e., IP 2 is searching a finite search space of polynomial size. 33 already, if an object starts being in two different locations in the
Reference: [4] <editor> B. Drabble, editor. </editor> <booktitle> Proceedings of the 3rd International Conference on Artificial Intelligence Planning Systems. </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, </address> <year> 1996. </year>
Reference: [5] <author> E. Fink and M. Veloso. </author> <title> Prodigy planning algorithm. </title> <type> Technical Report CMU-94-123, </type> <institution> Carnegie Mellon University, </institution> <year> 1994. </year>
Reference-contexts: The next interesting question is how IP 2 compares to other planners that support universally quantified and conditional effects. We used the Briefcase domain to compare IP 2 to UCPOP [13], Prodigy <ref> [5] </ref>, and graphplan using the equivalent translation of operators into sets. We looked at the simple task of initially having the briefcase at home and several objects in different locations with the goal of finding a roundtrip to bring all objects home.
Reference: [6] <author> B. Gazen and C. Knoblock. </author> <title> Combining the expressivity of UCPOP with the efficiency of Graphplan. </title> <note> In Steel [15]. </note>
Reference-contexts: Second, its simple representation language is restricted to pure STRIPS operators no conditional or universally quantified effects are allowed and it was unclear whether the underlying planning algorithm could be extended to more expressive formalisms <ref> [3, 6, 9] </ref>. In principle, sets of STRIPS operators can be used to encode conditional effects. <p> These observations motivated us to directly embed operators with conditional and universally quantified effects into planning graphs, while other features of ADL [11, 12] that are for example available in UCPOP [13] can be reasonably handled by preprocessing <ref> [6] </ref>. 1 IP 2 is an acronym for interference progression planner. 2 In Section 2, we introduce the basic notations and discuss a semantics for STRIPS operators with conditional effects.
Reference: [7] <author> S. Kambhampati, E. Lambrecht, and E. Parker. </author> <title> Understanding and extending Graphplan. </title> <note> In Steel [15]. </note>
Reference-contexts: They are added to N F (i + 1) iff the following conditions are satisfied: 1. ' i (o) N F (n) 2. all facts in ' i (o) are non-exclusive of each other in N F (n) 6 This property was independently discovered in <ref> [7] </ref>. 7 When adopting a more strict semantics such as the one in Definition 5, one can also mark two Add effects as exclusive if for all possible ways of achieving these effects holds that ff i (o 1 ) " ffi j (o 2 ) 6= ; and vice versa.
Reference: [8] <author> H. Kautz and B. Selman. </author> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proceedings of the 14th National Conference of the American Association for Artificial Intelligence, </booktitle> <pages> pages 1194-1201. </pages> <publisher> AAAI Press, </publisher> <year> 1994. </year>
Reference-contexts: It seems likely that on small examples an overhead in search is compensated by savings during subset memoization. To get a clearer picture, we ran both systems on SATPLAN examples taken from <ref> [8] </ref> with and without subset memoization yielding the following results, cf. Table 8.
Reference: [9] <author> D. McDermott. </author> <title> A heuristic estimator for means-ends analysis in planning. </title> <booktitle> In Drabble [4], </booktitle> <pages> pages 142-149. </pages>
Reference-contexts: Second, its simple representation language is restricted to pure STRIPS operators no conditional or universally quantified effects are allowed and it was unclear whether the underlying planning algorithm could be extended to more expressive formalisms <ref> [3, 6, 9] </ref>. In principle, sets of STRIPS operators can be used to encode conditional effects.
Reference: [10] <author> B. Nebel, Y. Dimopoulos, and J. Koehler. </author> <title> Ignoring irrelevant facts and operators in plan generation. </title> <note> In Steel [15]. </note>
Reference-contexts: First, its performance can decrease dramatically if too much irrelevant information is contained in the specification of a planning task, see <ref> [10] </ref> for a detailed analysis. Second, its simple representation language is restricted to pure STRIPS operators no conditional or universally quantified effects are allowed and it was unclear whether the underlying planning algorithm could be extended to more expressive formalisms [3, 6, 9]. <p> In the meanwhile, version 3.0 has extended the system in four directions that were not described in this paper: First, we have incorporated techniques that have been developed in our group to eliminate irrelevant facts and ground instances in simple STRIPS representations <ref> [10] </ref>. Based on a backchaining technique that works from the goal towards the initial state, different heuristics were developed that turned out to be very 36 powerful.
Reference: [11] <author> E. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the Situation Calculus. </title> <editor> In R. Brachman, H.J. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the 1st International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 324-332, </pages> <address> Toronto, Canada, 1989. </address> <publisher> Mor-gan Kaufmann. </publisher>
Reference-contexts: But such an encoding leads to exponentially more operators which can make even small planning problems practically intractable, see Section 7. These observations motivated us to directly embed operators with conditional and universally quantified effects into planning graphs, while other features of ADL <ref> [11, 12] </ref> that are for example available in UCPOP [13] can be reasonably handled by preprocessing [6]. 1 IP 2 is an acronym for interference progression planner. 2 In Section 2, we introduce the basic notations and discuss a semantics for STRIPS operators with conditional effects.
Reference: [12] <author> E. Pednault. </author> <title> Generalizing nonlinear planning to handle complex goals and actions with context-dependent effects. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 240-245. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1991. </year> <month> 47 </month>
Reference-contexts: But such an encoding leads to exponentially more operators which can make even small planning problems practically intractable, see Section 7. These observations motivated us to directly embed operators with conditional and universally quantified effects into planning graphs, while other features of ADL <ref> [11, 12] </ref> that are for example available in UCPOP [13] can be reasonably handled by preprocessing [6]. 1 IP 2 is an acronym for interference progression planner. 2 In Section 2, we introduce the basic notations and discuss a semantics for STRIPS operators with conditional effects.
Reference: [13] <author> J. Penberthy and D. Weld. UCPOP: </author> <title> A sound, complete, partial order plan-ner for ADL. </title> <editor> In B. Nebel, W. Swartout, and C. Rich, editors, </editor> <booktitle> Proceedings of the 3rd International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-113. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: These observations motivated us to directly embed operators with conditional and universally quantified effects into planning graphs, while other features of ADL [11, 12] that are for example available in UCPOP <ref> [13] </ref> can be reasonably handled by preprocessing [6]. 1 IP 2 is an acronym for interference progression planner. 2 In Section 2, we introduce the basic notations and discuss a semantics for STRIPS operators with conditional effects. <p> In the case of the GPpartial technique, jG 0 n j = jG n j 1 must hold. The next interesting question is how IP 2 compares to other planners that support universally quantified and conditional effects. We used the Briefcase domain to compare IP 2 to UCPOP <ref> [13] </ref>, Prodigy [5], and graphplan using the equivalent translation of operators into sets. We looked at the simple task of initially having the briefcase at home and several objects in different locations with the goal of finding a roundtrip to bring all objects home.
Reference: [14] <author> Frank Rittinger. </author> <title> XGV a graphical interface to analyse planning graphs. System Documentation, </title> <note> available over http://www.informatik.uni-freiburg.de/~ koehler/ipp.html, </note> <year> 1997. </year>
Reference-contexts: state is impossible, thus IP 2 selects take-out (o) as the only possible action, which deletes the condition in (o) and guarantees that moving the briefcase in the next time step does not delete the goal at (o,l). 22 generated for the example and drawn in the graphical interface XGV <ref> [14] </ref>. No-ops are not shown to reduce the width of action levels. 6 Termination, Soundness, Completeness, and Optimality To speed up search, the original graphplan system memoizes at each proposition level goal sets that could not be achieved.
Reference: [15] <editor> S. Steel, editor. </editor> <booktitle> Proceedings of the 4th European Conference on Planning, </booktitle> <publisher> LNAI. Springer, </publisher> <year> 1997. </year> <month> 48 </month>
References-found: 15

