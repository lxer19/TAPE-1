URL: http://www.daimi.aau.dk/~ocaprani/ComAlign/article/article.ps
Refering-URL: http://www.daimi.aau.dk/~ocaprani/ComAlign/ComAlign.html
Root-URL: http://www.daimi.aau.dk
Title: Combining many multiple alignments in one improved alignment  
Author: Klaus Bucka-Lassen Ole Caprani Jotun Hein dk, 
Keyword: fhttp://www.daimi.aau.dk/ocapranig.  
Note: Availability: The C source code (a Smalltalk version is being worked on) of ComAlign and the other programs that have been implemented in this context are free and available on  Contact: klaus@bucka-lassen.dk,  
Address: 6004 Luzern Switzerland  Denmark  Denmark  
Affiliation: Object Oriented Ltd.  Department of Computer Science University of Aarhus 8000 Aarhus C  Department of Ecology and Genetics University of Aarhus 8000 Aarhus C  
Email: jotun@pop.bio.aau.  ocaprani@daimi.aau.dk  
Date: August 21, 1998  
Web: WWW  
Abstract: Motivation: The fact that the multiple sequence alignment problem is of high complexity has lead to many different heuristic algorithms attempting to find a solution in what would be considered a reasonable amount of computation time and space. Very few of these heuristics produce results that are guaranteed always to lie within a certain distance of an optimal solution (given a measure of quality, for example parsimony). Most practical heuristics can not guarantee this, but nevertheless perform well for certain cases. An alignment, obtained with one of these heuristics and with a bad overall score, is not unusable though, it might contain important information of how substrings should be aligned. This paper presents a method that extracts qualitatively good sub alignments from a set of multiple alignments and combines these into a new, often improved alignment. The algorithm is implemented as a variant of the traditional dynamic programming technique. Results: An implementation of ComAlign the algorithm that combines multiple alignments has been run on several sets of artificially generated sequences and a set of 5S RNA sequences. To assess the quality of the alignments obtained, the results have been compared with the output of MSA 2.1 [GKS95, KG + 95]. In all cases ComAlign was able to produce a solution with a score comparable to the solution obtained by MSA. The results also show that ComAlign actually does combine parts from different alignments and not just select the best of them. fl To whom correspondance should be addressed
Abstract-found: 1
Intro-found: 1
Reference: [CWC92] <author> S. C. Chan, A. K. C. Wong, and D. K. Y. Chiu. </author> <title> A survey of multiple sequence comparison methods. </title> <journal> Bulletin of Mathematical Biology, </journal> <volume> 54(4) </volume> <pages> 563-598, </pages> <year> 1992. </year>
Reference-contexts: By applying dynamic programming <ref> [Ful97, Mye91, WJE91, CWC92, Wat95] </ref> to this recursive function, each value of D i;j will only be calculated once.
Reference: [Dij59] <author> E. W. Dijkstra. </author> <title> A note on two problems in connexion with graphs. </title> <journal> Nummer. Math., </journal> <volume> 1 </volume> <pages> 269-271, </pages> <year> 1959. </year>
Reference-contexts: j different values D i;j and the computation of each of them requires a constant amount of time, the time complexity will be: T [DynAlg (s 0 ; s 1 )] 2 O (js 0 j js 1 j) The dynamic programming algorithm is equivalent to a single-source shortest path <ref> [Dij59] </ref> computation on the WDAG. Hereafter an optimal alignment is obtained by backtracking from the target to the source. Multiple alignment Multiple alignment is a generalisation of pairwise alignment.
Reference: [FD87] <author> D.-F. Feng and R. F. Doolittle. </author> <title> Progressive sequence alignment as prerequisite to correct phylogenetic trees. </title> <journal> Journal of Molecular Evolution, </journal> <volume> 25 </volume> <pages> 351-360, </pages> <year> 1987. </year>
Reference-contexts: Or one could generate maybe poorer quality, but more of them. Heuristics that produce close to optimal multiple alignments are rare, mostly very time-consuming and hard to implement (because they tend to be rather complex). Progressive alignment <ref> [FD87] </ref> (or "Alignment along a Tree" [Ful97]) on the other hand, is a heuristic that is easy to implement and produces results rather quickly, but does in general not score very high.
Reference: [Ful97] <author> Georg Fullen. </author> <title> A gentle guide to multiple alignment 2.03. </title> <address> http://www.techfak.uni-bielefeld.de/bcd/Curric/MulAli/ mulali.html, </address> <month> March </month> <year> 1997. </year>
Reference-contexts: By applying dynamic programming <ref> [Ful97, Mye91, WJE91, CWC92, Wat95] </ref> to this recursive function, each value of D i;j will only be calculated once. <p> Or one could generate maybe poorer quality, but more of them. Heuristics that produce close to optimal multiple alignments are rare, mostly very time-consuming and hard to implement (because they tend to be rather complex). Progressive alignment [FD87] (or "Alignment along a Tree" <ref> [Ful97] </ref>) on the other hand, is a heuristic that is easy to implement and produces results rather quickly, but does in general not score very high.
Reference: [Gen] <author> Genbank. </author> <note> http://www.ncbi.nlm.nih.gov/. </note>
Reference-contexts: In one particular case ComAlign spent 30 times as much time as MSA did. Results for biological data As many as 22 5S RNA sequences from Gen-Bank <ref> [Gen] </ref> have been chosen to demonstrate the usage of ComAlign on real biological data.
Reference: [GKS95] <author> Sandeep K. Gupta, John D. Kececioglu, and Alejandro A. Schaffer. </author> <title> Making the shortest-paths approach to sum-of-pairs multiple sequence alignment more space efficient in practice (extended abstract). </title> <booktitle> In Proceedings of the Sixth Annual Symposium on Combinatorial Pattern Matching, </booktitle> <year> 1995. </year>
Reference-contexts: To assess the quality of the multiple alignments that are produced by ComAlign, these are compared with the output from the MSA 2.1 <ref> [GKS95] </ref> program. MSA is run with the options: -c dna = mutation costs defined in file `dna'. -g = all gaps cost the same. -b = use sum-of-pairs score function. The 'dna' file was defined in accordance with table 1.
Reference: [Gus97] <author> Dan Gusfield. </author> <title> Algorithms On Strings: A Dual View from Computer Science and Computational Molecular Biology, chapter 13, Multiple String Comparison The Holy Grail. </title> <publisher> Cambridge University Press, </publisher> <year> 1997. </year>
Reference-contexts: Multiple alignment Multiple alignment is a generalisation of pairwise alignment. For example: A = 4 C T T G C T 3 The cost of a multiple alignment is here defined to be the accumulated cost of all projected pairwise alignments ("Sum-of-pairs", <ref> [Gus97] </ref>).
Reference: [KG + 95] <author> John D. Kececioglu, Robert Giegerich, et al. </author> <title> Discussion theme: The MSA algorithm. </title> <address> http://www.techfak.uni-bielefeld. de/bcd/Lectures/kececioglu.html, </address> <month> July </month> <year> 1995. </year>
Reference: [Mye91] <author> Eugene W. Myers. </author> <title> An Overview of Sequence Comparison Algorithms in Molecular Biology. </title> <institution> Department of Computer Science, The University of Arizona, Tucson, </institution> <type> TR 91-29, </type> <month> December </month> <year> 1991. </year>
Reference-contexts: By applying dynamic programming <ref> [Ful97, Mye91, WJE91, CWC92, Wat95] </ref> to this recursive function, each value of D i;j will only be calculated once.
Reference: [San72] <author> David Sankoff. </author> <title> Matching sequences under deletion-insertion constraints. </title> <journal> Proc. Natl. Acad. Sci., </journal> <volume> 68 </volume> <pages> 4-6, </pages> <year> 1972. </year>
Reference-contexts: Introduction Pairwise alignment Under the assumption that the two DNA sequences s 0 and s 1 have had a common ancestor, there must be a number of mutations (here only substitutions, insertions and deletions are taken into consideration) that transforms s 0 into s 1 and vice versa <ref> [San72] </ref>. These mutations will here be represented by an alignment, a 2 fi len matrix, where len determines the length of the alignment and a dash represents an insertion or deletion.
Reference: [Wat95] <author> Michael S. Waterman. </author> <title> Introduction to computational Biology, Maps, sequences and genomes Interdisciplinary Statistics, chapter 1 & 8-10. </title> <publisher> Chapman & Hall, </publisher> <address> Lon-don, UK, </address> <year> 1995. </year>
Reference-contexts: By applying dynamic programming <ref> [Ful97, Mye91, WJE91, CWC92, Wat95] </ref> to this recursive function, each value of D i;j will only be calculated once.
Reference: [WJE91] <author> Michael S. Waterman, Jana Joyce, and Mark Eggert. </author> <title> Computer alignment of sequences. </title> <editor> In M. M. Miyamoto and Cracraft, editors, </editor> <title> Phylogenetic Analysis of DNA Sequences, chapter 4. </title> <publisher> Oxford University Press, </publisher> <year> 1991. </year>
Reference-contexts: By applying dynamic programming <ref> [Ful97, Mye91, WJE91, CWC92, Wat95] </ref> to this recursive function, each value of D i;j will only be calculated once.
References-found: 12

