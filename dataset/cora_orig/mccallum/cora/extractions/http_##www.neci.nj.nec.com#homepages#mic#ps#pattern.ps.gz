URL: http://www.neci.nj.nec.com/homepages/mic/ps/pattern.ps.gz
Refering-URL: http://www.neci.nj.nec.com/homepages/mic/publications.html
Root-URL: 
Email: email: mic@research.nj.nec.com  
Title: From Simple Features to Sophisticated Evaluation Functions  
Author: Michael Buro 
Address: 4 Independence Way, Princeton NJ 08540, USA  
Affiliation: NEC Research Institute  
Abstract: This paper discusses a practical framework for the semi-automatic construction of evaluation functions for games. Based on a structured evaluation function representation, a procedure for exploring the feature space is presented that is able to discover new features in a computational feasible way. Besides the theoretical aspects, related practical issues such as the generation of training examples, feature selection, and weight fitting in huge linear systems are discussed. Finally, we present experimental results for Othello, which demonstrate the poten tial of the described approach.
Abstract-found: 1
Intro-found: 1
Reference: [Buro 1997a] <author> M. Buro. </author> <title> Experiments with Multi-ProbCut and a New High-Quality Evaluation Function for Othello, </title> <journal> NEC Research Institute TR 97-96. </journal>
Reference: [Buro 1997b] <author> M. Buro. </author> <title> The Othello Match of the Year: Takeshi Murakami vs. </title> <journal> Logistello, ICCA Journal 20(3), </journal> <pages> 189-193. </pages>
Reference-contexts: Equipped with an evaluation function very similar to that we have just described, Logistello beat the human Othello World-champion 6-0 in August 1997 <ref> [Buro 1997b] </ref>. After four years of successful tournament play, Logistello ended its career in October 1997 with a straight 22-win victory in its last computer-Othello tournament. Recently, the incorporation of larger patterns has improved the evaluation performance further. In the current implementation, configuration weights are represented as 16 bit integers.
Reference: [Hanson 1990] <author> S.J. Hanson. </author> <title> Meiosis Networks, </title> <booktitle> Advances in Neural Information Processing Systems, </booktitle> <pages> 553-541. </pages>
Reference-contexts: Other approaches for constructing features or adapting the combination function while fitting weights (e.g. Morph [Levinson & Snyder 1991], meiosis networks <ref> [Hanson 1990] </ref>, node splitting [Wynne-Jones 1992]), face similar complexity problems. Our solution is to separate these tasks in order to speed-up the process and to give many opportunities for optimization.
Reference: [Hsu et al. 1990] <author> F. Hsu, S. Anantharaman, M.S. Campbell, A. Nowatzyk. </author> <title> Deep Thought, In: T.A. </title> <editor> Marsland and J. Schaeffer (Eds.) </editor> <booktitle> Computer, Chess, and Cognition, </booktitle> <publisher> Springer Verlag, </publisher> <pages> 55-78. </pages>
Reference-contexts: While selecting features is difficult for a machine, fitting even a large number of weights given a set of training examples is not. Research focused on the latter topic produced TD-Gammon, a world-class backgammon-program [Tesauro 1994,1995], and contributed to Deep Blue's victory over Kasparov in 1997 <ref> [Hsu et al. 1990] </ref>. In this article we go a step further towards the ultimate goal of automatic evaluation function construction.
Reference: [Levinson & Snyder 1991] <author> R.A. Levinson, R. Snyder. </author> <title> Adaptive Pattern-Oriented Chess, </title> <editor> In: L. Birnbaum and G. Collins (Eds.) </editor> <booktitle> Proceedings of the 8th International Workshop on Machine Learning, </booktitle> <pages> 85-89. </pages>
Reference-contexts: Taking into account the large number of features needed for an adequate evaluation in complex domains, and the resulting considerable effort for optimizing weights, it seems hopeless to combine feature construction and weight fitting. Other approaches for constructing features or adapting the combination function while fitting weights (e.g. Morph <ref> [Levinson & Snyder 1991] </ref>, meiosis networks [Hanson 1990], node splitting [Wynne-Jones 1992]), face similar complexity problems. Our solution is to separate these tasks in order to speed-up the process and to give many opportunities for optimization.
Reference: [Press et al. 1992] <author> W.H. Press, S.A. Teukolsky, W.T. Vetter-ling, </author> <title> B.P. Flannery. Numerical Recipes, </title> <publisher> Cambridge University Press, 2nd edition. </publisher>
Reference-contexts: In each step, this procedure updates the current weight vector in direction of the negated gradient of the error function. If features are highly correlated, this simple algorithm is known to converge slowly. Faster conjugate gradient algorithms have been developed <ref> [Press et al. 1992] </ref>, that do not suffer from this problem.
Reference: [Samuel 1959] <author> A.L. Samuel. </author> <title> Some Studies in Machine Learning Using the Game of Checkers, </title> <journal> IBM Journal of Research and Development 3(3), </journal> <pages> 211-229. </pages>
Reference: [Sutton 1988] <author> R.S. Sutton. </author> <title> Learning to Predict by the Methods of Temporal Differences, </title> <booktitle> Machine Learning 3, </booktitle> <pages> 9-44. </pages>
Reference-contexts: Utgoff (1997) proposes a general evaluation function learner, called ELF, which combines the processes of constructing boolean feature combinations and weight fitting. This approach has been shown to be effective in small artificial problems, but could not convince in its application to checkers. Using the TD (0) learning approach <ref> [Sutton 1988] </ref>, more than 300 thousand games were played to build features based on a raw board representation, and to fit their weights.
Reference: [Tesauro 1994] <author> G. Tesauro. </author> <title> TD-Gammon, a Self-teaching Backgammon Program, Reaches Master-Level Play, </title> <booktitle> Neural Computation 6(20), </booktitle> <pages> 215-219. </pages>
Reference: [Tesauro 1995] <author> G. Tesauro. </author> <title> Temporal Difference Learning and TD-Gammon, </title> <journal> Communications of the ACM 38(3), </journal> <pages> 58-68. </pages>
Reference: [Utgoff 1997] <author> P.E. Utgoff. </author> <title> Constructive Function Approximation, </title> <institution> Department of CS, Univ. of Mass., </institution> <type> TR 97-4. </type>
Reference: [Wynne-Jones 1992] <author> M. Wynne-Jones. </author> <title> Node Splitting: A Constructive Algorithm for Feed-Forward Neural Networks, </title> <booktitle> Adv. in Neural Inf. Proc. Systems, </booktitle> <pages> 1072-1079. 10 </pages>
Reference-contexts: Other approaches for constructing features or adapting the combination function while fitting weights (e.g. Morph [Levinson & Snyder 1991], meiosis networks [Hanson 1990], node splitting <ref> [Wynne-Jones 1992] </ref>), face similar complexity problems. Our solution is to separate these tasks in order to speed-up the process and to give many opportunities for optimization.
References-found: 12

