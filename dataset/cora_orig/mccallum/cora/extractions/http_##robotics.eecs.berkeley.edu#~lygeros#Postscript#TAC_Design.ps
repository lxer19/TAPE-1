URL: http://robotics.eecs.berkeley.edu/~lygeros/Postscript/TAC_Design.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~lygeros/Publications/cdc96_game.html
Root-URL: 
Email: lygeros, godbole, sastry@eecs.berkeley.edu  
Title: A Design Framework for Hierarchical, Hybrid Control  
Author: John Lygeros, Datta N. Godbole and Shankar Sastry 
Address: Berkeley, CA 94720  
Affiliation: Intelligent Machines and Robotics Laboratory University of California, Berkeley  
Abstract: Large scale systems are common in applications such as chemical process control, power generation and distribution and transportation systems, among others. Of particular interest are multi-agent, scarce resource problems, where a large number of agents have to make efficient use of a scarce resource. Here we try to approach the problem of large scale systems from a hierarchical, hybrid control view point. Our analysis is based on a new hybrid dynamical system formulation, that allows us to model large scale systems in a modular fashion. We primarily address the problem of controller design for multi-agent systems. A design procedure is proposed that naturally leads to hierarchical, hybrid control schemes, with continuous controllers trying to optimize each agent's resource utilization at a lower level and discrete controllers resolving inter-agent conflicts at a higher level. An algorithm is presented to design the continuous controllers, as well as abstractions of their performance in terms of the discrete level. The algorithm makes use of ideas from game theory, treating the design process as a two player, zero sum game, between the controller of an agent and the disturbance generated by the actions of other agents. The resulting abstractions can be thought of as guidelines for the design of the discrete layer. If the resulting continuous controllers are used and the discrete controller satisfies the guidelines, the closed loop hybrid system is, by design, guaranteed to exhibit the desired behavior. We demonstrate our algorithm by application to the automated vehicle following problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. F. Stengel, </author> <title> "Intelligent flight control systems," </title> <booktitle> in IMA Conference on Aerospace Vehicle Dynamics, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: Because of the challenging problems associated with the control of multi-agent, scarce resource systems, this area has attracted considerable attention both theoretically and in application <ref> [1, 2, 3, 4, 5] </ref>. The obvious way to apply the central control paradigm to large scale systems is to design a centralized control scheme. In such a scheme, the information from the entire system is collected, processed centrally and commands are distributed to all the actuators.
Reference: [2] <author> A. Nerode and W. Kohn, </author> <title> "Multiple agent hybrid control architecture," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, eds.), </editor> <volume> no. </volume> <booktitle> 736 in LNCS, </booktitle> <pages> pp. 297-316, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Because of the challenging problems associated with the control of multi-agent, scarce resource systems, this area has attracted considerable attention both theoretically and in application <ref> [1, 2, 3, 4, 5] </ref>. The obvious way to apply the central control paradigm to large scale systems is to design a centralized control scheme. In such a scheme, the information from the entire system is collected, processed centrally and commands are distributed to all the actuators.
Reference: [3] <author> P. Varaiya and S. E. Shladover, </author> <title> "Sketch of an IVHS systems architecture," </title> <type> Tech. Rep. </type> <institution> UCB-ITS-PRR-91-3, Institute of Transportation Studies, University of California, Berke-ley, </institution> <year> 1991. </year>
Reference-contexts: Because of the challenging problems associated with the control of multi-agent, scarce resource systems, this area has attracted considerable attention both theoretically and in application <ref> [1, 2, 3, 4, 5] </ref>. The obvious way to apply the central control paradigm to large scale systems is to design a centralized control scheme. In such a scheme, the information from the entire system is collected, processed centrally and commands are distributed to all the actuators.
Reference: [4] <author> S. Sastry, G. Meyer, C. Tomlin, J. Lygeros, D. Godbole, and G. Pappas, </author> <title> "Hybrid systems in air traffic control," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 1478-1483, </pages> <year> 1995. </year>
Reference-contexts: Because of the challenging problems associated with the control of multi-agent, scarce resource systems, this area has attracted considerable attention both theoretically and in application <ref> [1, 2, 3, 4, 5] </ref>. The obvious way to apply the central control paradigm to large scale systems is to design a centralized control scheme. In such a scheme, the information from the entire system is collected, processed centrally and commands are distributed to all the actuators. <p> This process is difficult to formalize in an abstract setting. The solutions given in applications are typically problem dependent and rely heavily on the designers intuition about the problem. The reader is referred to [23] for an outline of this process for the automated highway problem and to <ref> [4] </ref> for the air traffic management problem. 4 The difficulties associated with quantifying an emergent behavior specification are beyond the scope of this paper. We circumvent them by assuming that the process has already been completed. <p> We circumvent them by assuming that the process has already been completed. Following the results of <ref> [4, 23] </ref> we assume that, at the end of the top down phase we are presented with a preliminary discrete design, in the form of a set of way points and a set of logic rules for switching between them.
Reference: [5] <author> K. M. Passino and P. J. Antsaklis, </author> <title> "Modeling and analysis of artificially intelligent planning systems," in An Introduction to Intelligent and Autonomous Control (P. </title> <editor> J. Antsaklis and K. M. Passino, </editor> <booktitle> eds.), </booktitle> <pages> pp. 191-214, </pages> <address> Boston: </address> <publisher> Kluwer Academic Publishing, </publisher> <year> 1993. </year>
Reference-contexts: Because of the challenging problems associated with the control of multi-agent, scarce resource systems, this area has attracted considerable attention both theoretically and in application <ref> [1, 2, 3, 4, 5] </ref>. The obvious way to apply the central control paradigm to large scale systems is to design a centralized control scheme. In such a scheme, the information from the entire system is collected, processed centrally and commands are distributed to all the actuators.
Reference: [6] <author> I. Wagner and A. Bruckstein, </author> <title> "Cooperative cleaners: a study in ant robotics," </title> <type> Tech. Rep. 9512, CIS Report, </type> <institution> Technion, IIT, Haifa, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Decentralized control schemes are easier to design. They have been shown to work well in problems where the coupling between subsystems is weak and/or the optimality of the closed loop performance is not crucial <ref> [6] </ref>. In some cases, however, proofs of performance claims are difficult to obtain, since global behavior may be hard to infer from local interactions. More importantly, the process starts to break down when one tries to push the system performance to its limit.
Reference: [7] <author> A. Nerode and W. Kohn, </author> <title> "Models for hybrid systems: Automata, topologies, controllability, observability," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, eds.), </editor> <volume> no. </volume> <booktitle> 736 in LNCS, </booktitle> <pages> pp. 317-356, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems.
Reference: [8] <author> R. W. Brockett, </author> <title> "Hybrid models for motion control systems," in Perspectives in Control (H. </title> <editor> Trentelman and J. Willems, eds.), </editor> <publisher> Birkhauser, </publisher> <year> 1993. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems.
Reference: [9] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine, </author> <title> "An approach to the description and analysis of hybrid systems," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, eds.), </editor> <volume> no. </volume> <booktitle> 736 in LNCS, </booktitle> <pages> pp. 149-178, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems.
Reference: [10] <author> P. J. Antsaklis, J. A. Stiver, and M. Lemmon, </author> <title> "Hybrid system modeling and autonomous control systems," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, eds.), </editor> <volume> no. </volume> <booktitle> 736 in LNCS, </booktitle> <pages> pp. 366-392, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems.
Reference: [11] <author> R. Alur, C. Courcoubetis, T. A. Henzinger, and P. H. Ho, </author> <title> "Hybrid automaton: An algorithmic approach to the specification and verification of hybrid systems," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, eds.), </editor> <volume> no. </volume> <booktitle> 736 in LNCS, </booktitle> <pages> pp. 209-229, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems.
Reference: [12] <author> M. S. Branicky, V. S. Borkar, and S. K. Mitter, </author> <title> "A unified framework for hybrid control: Background, model and theory," </title> <type> Tech. Rep. </type> <institution> LIDS-P-2239, Laboratory for Information and Decision Systems, Massachusetts Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems.
Reference: [13] <author> M. S. Branicky, </author> <title> Control of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Massacussets Institute of Technology, </institution> <year> 1994. </year> <month> 34 </month>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. <p> However, because we are interested in modeling different agents and their interaction we will take a more input/output approach, along the lines of the reactive module paradigm [34]. For an excellent overview of hybrid models from the dynamical systems point of view see <ref> [13] </ref>. Variables A hybrid automaton is a dynamical system which determines the evolution and interaction of a finite collection of variables.
Reference: [14] <author> A. Deshpande, </author> <title> Control of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engi--neering, University of California, Berkeley, California, </institution> <year> 1994. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. <p> Hybrid automata are convenient abstractions of systems with phased operation and they appear extensively in the literature in various forms ([11, 14]). The model we consider will be similar to models used primarily in computer science (in particular the ones in <ref> [14] </ref> and [15]). However, because we are interested in modeling different agents and their interaction we will take a more input/output approach, along the lines of the reactive module paradigm [34]. For an excellent overview of hybrid models from the dynamical systems point of view see [13].
Reference: [15] <author> A. Puri, </author> <title> Theory of Hybrid Systems and Discrete Event Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, University of California, Berkeley, California, </institution> <year> 1995. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. <p> Hybrid automata are convenient abstractions of systems with phased operation and they appear extensively in the literature in various forms ([11, 14]). The model we consider will be similar to models used primarily in computer science (in particular the ones in [14] and <ref> [15] </ref>). However, because we are interested in modeling different agents and their interaction we will take a more input/output approach, along the lines of the reactive module paradigm [34]. For an excellent overview of hybrid models from the dynamical systems point of view see [13].
Reference: [16] <author> T. Henzinger, P. Kopke, A. Puri, and P. Varaiya, </author> <title> "What's decidable about hybrid automata," </title> <booktitle> in STOCS, </booktitle> <year> 1995. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. <p> To guarantee that an automatic verification algorithm will terminate in a finite number of steps, the system needs to satisfy very stringent technical requirements. It can be shown <ref> [16] </ref> that relaxing any of these requirements makes the problem undecidable. Moreover, even though efficient algorithms exist (that make use of formal reduction techniques as well as heuristics and user input to facilitate the search), the verification task may still be prohibitively complex for current computers [32].
Reference: [17] <author> Z. Manna and A. Pnueli, </author> <title> Temporal Verification of Reactive Systems: Safety. </title> <address> New York: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: None of these tools, however, is capable of fully addressing the issues arising in hybrid systems. The development of specialized hybrid system tools has recently attracted the attention of a number of research groups <ref> [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] </ref>. In this paper we summarize one such effort [18, 19, 20, 21]. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems.
Reference: [18] <author> D. N. Godbole, </author> <title> Hierarchical Hybrid Control of Automated Highway Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, University of California, Berkeley, California, </institution> <year> 1994. </year>
Reference-contexts: The development of specialized hybrid system tools has recently attracted the attention of a number of research groups [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]. In this paper we summarize one such effort <ref> [18, 19, 20, 21] </ref>. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. We start by giving an overview of the proposed design process in Section 2.
Reference: [19] <author> J. Lygeros, D. N. Godbole, and S. Sastry, </author> <title> "Optimal control approach to multiagent, hierarchical system verification," </title> <booktitle> in IFAC World Congress, </booktitle> <year> 1996. </year>
Reference-contexts: The development of specialized hybrid system tools has recently attracted the attention of a number of research groups [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]. In this paper we summarize one such effort <ref> [18, 19, 20, 21] </ref>. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. We start by giving an overview of the proposed design process in Section 2. <p> In this paper we will concentrate on controller design and will not discuss the problem of verification further. A more thorough presentation can be found in <ref> [19, 21] </ref>. 3 Hybrid System Modeling In this section, we present a rather general model for multiagent systems. Each agent is modeled as a hybrid dynamical system. The modeling framework is modular, in that a hybrid system can be specified as a composition of subsystems.
Reference: [20] <author> J. Lygeros, D. N. Godbole, and S. Sastry, </author> <title> "A verified hybrid controller for automated vehicles." </title> <type> (preprint, </type> <note> submitted to Special Issue on Hybrid Systems of the IEEE Transactions on Automatic Control), </note> <month> March </month> <year> 1996. </year>
Reference-contexts: The development of specialized hybrid system tools has recently attracted the attention of a number of research groups [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]. In this paper we summarize one such effort <ref> [18, 19, 20, 21] </ref>. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. We start by giving an overview of the proposed design process in Section 2. <p> In Section 5, the application of this algorithm to the problem of automated vehicle following is presented. Section 6 gives a summary of the proposed scheme and highlights the major points. For further examples on the applications of these techniques the reader is referred to <ref> [20, 22] </ref>. 2 Outline of the Design Process In this section we give an outline of a possible strategy for designing hierarchical controllers for large scale systems. It involves a number of steps. <p> The objective is to come up with a discrete design that limits the disturbance so that a continuous design is feasible. Unfortunately, no formal technique exists for determining the coordination necessary to solve such a problem. Our work on specific applications <ref> [20, 22] </ref> suggests that all the requirements imposed on the discrete design by the continuous controllers can be encoded in terms of timed language specifications. The work of [27] indicates that timed language problems are purely discrete. <p> In this paper we will limit our attention to the design of continuous control laws and interfaces between these laws and the discrete world. In the examples we consider (refer to <ref> [20, 22] </ref>) the requirements on the discrete design follow automatically. Summarizing the bottom-up phase, our approach can be thought of as an attempt to add a minimal amount of centralization to an initial decentralized design. <p> The hybrid system description language introduced above can be customized to the specific application domain as shown in [30]. Then controllers for the various maneuvers required on the AHS can be designed to satisfy safety, comfort and efficiency requirements 7 using the tools presented in Section 4 <ref> [20] </ref>. To get to the emergent behavior, the various maneuver control laws of an automated vehicle can then be abstracted into space-time requirements. This information can be used in a traffic flow model to evaluate the throughput of the highway. <p> In this section we restrict our attention to cost functions associated with the continuous state evolution and in particular functions of the form (20). This restricted class of functions suffices for all the examples considered so far in our work <ref> [20, 22] </ref>. We will also assume that the entire state of the plant is available for feedback. 4.2.1 Multiobjective Controller Design Algorithm At the first stage we treat the design process as a two player, zero sum, dynamic game with cost J 1 . <p> Fortunately, in our examples thus far, including the most complicated cases of <ref> [20] </ref>, a solution can be obtained analytically, or using simple numerical calculations. However, we can not 21 expect such luck in general. <p> This is one of the problems that arise in the process of designing controllers for automated highways. Stronger results in this direction, in particular a complete hybrid controller that supports the formation of platoons with guaranteed safety, can be found in <ref> [20] </ref>. Consider three vehicles (labeled A, B and C) moving along a single lane highway (Figure 5). We will primarily be interested in the interaction between vehicles A and B, vehicle C will be used, to isolate the system A-B from the rest of the highway. <p> For example, they can be used to produce technological requirements on the physical plant (in particular the sensors and actuators) in order to guarantee certain levels of performance. This point of view is particularly evident in the automated highway problem <ref> [20] </ref>. There the solution to the game theory problems can be used to derive minimum sensor ranges, limits on the braking capability etc. needed to guarantee safe operation under certain requirements on throughput.
Reference: [21] <author> J. Lygeros, </author> <title> Hierarchical Hybrid Control of Large Scale Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, University of California, Berkeley, California, </institution> <year> 1996. </year>
Reference-contexts: The development of specialized hybrid system tools has recently attracted the attention of a number of research groups [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]. In this paper we summarize one such effort <ref> [18, 19, 20, 21] </ref>. In this paper, we concentrate on the problem of designing hierarchical, hybrid controllers for large scale systems. We start by giving an overview of the proposed design process in Section 2. <p> In this paper we will concentrate on controller design and will not discuss the problem of verification further. A more thorough presentation can be found in <ref> [19, 21] </ref>. 3 Hybrid System Modeling In this section, we present a rather general model for multiagent systems. Each agent is modeled as a hybrid dynamical system. The modeling framework is modular, in that a hybrid system can be specified as a composition of subsystems. <p> Output Evolution: for all t 2 t y (t) = h (q (t); x (t); u (t)) It can be shown <ref> [21] </ref> that the definitions introduced here are rich enough to allow us to model regular dynamical systems, discrete events, autonomous jumps, controlled jumps, etc. 3.2 Graphical Representation If the discrete state can assume a finite number of values it is very convenient to represent the hybrid automaton by a finite graph. <p> We 24 will assume v A max = 1 to simplify the analysis. Typical values of a A min , etc. can be found in <ref> [21] </ref>.
Reference: [22] <author> C. Tomlin, G. Pappas, and S. Sastry, </author> <title> "Conflict resolution for air traffic management: a case study in multi-agent hybrid systems." </title> <journal> (preprint,submitted to Special Issue on Hybrid Systems of the IEEE Transactions on Automatic Control), </journal> <year> 1996. </year>
Reference-contexts: In Section 5, the application of this algorithm to the problem of automated vehicle following is presented. Section 6 gives a summary of the proposed scheme and highlights the major points. For further examples on the applications of these techniques the reader is referred to <ref> [20, 22] </ref>. 2 Outline of the Design Process In this section we give an outline of a possible strategy for designing hierarchical controllers for large scale systems. It involves a number of steps. <p> The objective is to come up with a discrete design that limits the disturbance so that a continuous design is feasible. Unfortunately, no formal technique exists for determining the coordination necessary to solve such a problem. Our work on specific applications <ref> [20, 22] </ref> suggests that all the requirements imposed on the discrete design by the continuous controllers can be encoded in terms of timed language specifications. The work of [27] indicates that timed language problems are purely discrete. <p> In this paper we will limit our attention to the design of continuous control laws and interfaces between these laws and the discrete world. In the examples we consider (refer to <ref> [20, 22] </ref>) the requirements on the discrete design follow automatically. Summarizing the bottom-up phase, our approach can be thought of as an attempt to add a minimal amount of centralization to an initial decentralized design. <p> In this section we restrict our attention to cost functions associated with the continuous state evolution and in particular functions of the form (20). This restricted class of functions suffices for all the examples considered so far in our work <ref> [20, 22] </ref>. We will also assume that the entire state of the plant is available for feedback. 4.2.1 Multiobjective Controller Design Algorithm At the first stage we treat the design process as a two player, zero sum, dynamic game with cost J 1 .
Reference: [23] <author> P. Varaiya, </author> <title> "Smart cars on smart roads: problems of control," </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> vol. AC-38, no. 2, </volume> <pages> pp. 195-207, </pages> <year> 1993. </year>
Reference-contexts: The first step is to quantify such a specification. This process is difficult to formalize in an abstract setting. The solutions given in applications are typically problem dependent and rely heavily on the designers intuition about the problem. The reader is referred to <ref> [23] </ref> for an outline of this process for the automated highway problem and to [4] for the air traffic management problem. 4 The difficulties associated with quantifying an emergent behavior specification are beyond the scope of this paper. We circumvent them by assuming that the process has already been completed. <p> We circumvent them by assuming that the process has already been completed. Following the results of <ref> [4, 23] </ref> we assume that, at the end of the top down phase we are presented with a preliminary discrete design, in the form of a set of way points and a set of logic rules for switching between them.
Reference: [24] <author> A. Hsu, F. Eskafi, S. Sachs, and P. Varaiya, </author> <title> "Protocol design for an automated highway system," Discrete Event Dynamic Systems, </title> <journal> vol. </journal> <volume> 2, no. 1, </volume> <pages> pp. 183-206, </pages> <year> 1994. </year>
Reference-contexts: Such a design can be encoded by a finite state machine (see for example the design of <ref> [24] </ref> for the automated highways). The discrete design is accompanied by a set of cost functions to be used in the continuous controller design. A number of cost functions may need to be considered to encode different requirements (for example safety, efficiency, etc.).
Reference: [25] <author> T. Ba~sar and P. Bernhard, </author> <title> H 1 -Optimal Control and Related Minimax Design Problems. </title> <publisher> Birkhauser, </publisher> <year> 1991. </year>
Reference-contexts: Game theoretic ideas have already been applied in this context to problems with disturbances of Class 1 and 2 and quadratic cost functions. The resulting controllers are the so called H 1 or L 2 optimal controllers (see for example <ref> [25, 26] </ref>). We will try to extend these ideas to the multiagent, hybrid setting and focus on disturbances of Class 3.
Reference: [26] <author> J. C. Doyle, K. Glover, P. P. Khargonekar, and B. A. Francis, </author> <title> "State-space solutions to standard H 2 and H 1 control problems," </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 831-847, </pages> <year> 1989. </year>
Reference-contexts: Game theoretic ideas have already been applied in this context to problems with disturbances of Class 1 and 2 and quadratic cost functions. The resulting controllers are the so called H 1 or L 2 optimal controllers (see for example <ref> [25, 26] </ref>). We will try to extend these ideas to the multiagent, hybrid setting and focus on disturbances of Class 3.
Reference: [27] <author> R. Alur and D. Dill, </author> <title> "A theory of timed automata," </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 126, </volume> <pages> pp. 183-235, </pages> <year> 1994. </year>
Reference-contexts: Unfortunately, no formal technique exists for determining the coordination necessary to solve such a problem. Our work on specific applications [20, 22] suggests that all the requirements imposed on the discrete design by the continuous controllers can be encoded in terms of timed language specifications. The work of <ref> [27] </ref> indicates that timed language problems are purely discrete. Therefore, in principle, the task of completing the hierarchical controller is tractable and can be tackled using standard computational discrete design tools. <p> The constraint set will impose limits on these two aspects of the evolution of the discrete variables. It should be noted that both these constraints can be encoded by the requirement that the discrete variable sequence is generated/accepted by a timed automaton <ref> [27] </ref>. 4 The definitions are straightforward generalizations of the corresponding definitions for T = [t i ; t f ]. 16 3.5 Mathematical Tools The analysis presented in the next section will require concepts from the areas of game theory, optimal control, dynamical systems and topology.
Reference: [28] <author> B. S. Y. Rao and P. Varaiya, </author> <title> "Roadside intelligence for flow control in an IVHS," </title> <journal> Transportation Research - C, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 49-72, </pages> <year> 1994. </year> <month> 35 </month>
Reference-contexts: The requirement for designer input limits the complexity of the problems that can be handled analytically using this approach. A more common approach is to investigate the system performance using macro-simulation. This approach is especially valuable for multi-agent problems and has been successfully applied to a number of examples <ref> [28, 29] </ref>. 2.3 Multiagent Design and Verification Environment Based on the discussion presented above, we envision developing a complete design, simulation and verification environment for multi-agent, hierarchical, hybrid control systems (Figure 1). The specifications are described by the desired emergent behavior of the collection of agents.
Reference: [29] <author> A. Hitchcock, </author> <title> "Casualties in accidents occuring during split and merge maneuvers," </title> <type> tech. rep., PATH Technical Memo 93-9, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: The requirement for designer input limits the complexity of the problems that can be handled analytically using this approach. A more common approach is to investigate the system performance using macro-simulation. This approach is especially valuable for multi-agent problems and has been successfully applied to a number of examples <ref> [28, 29] </ref>. 2.3 Multiagent Design and Verification Environment Based on the discussion presented above, we envision developing a complete design, simulation and verification environment for multi-agent, hierarchical, hybrid control systems (Figure 1). The specifications are described by the desired emergent behavior of the collection of agents.
Reference: [30] <author> A. Deshpande, D. Godbole, A. Gollu, L. Semenzato, R. Sengupta, D. Swaroop, and P. Varaiya, </author> <title> "Automated highway system tool interchange format." </title> <type> (preprint) California PATH Technical Report, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1996. </year>
Reference-contexts: The process can be customized to a specific application, such as Automated Highway Systems (AHS) or Air Traffic Management Systems (ATMS). As an example, consider the case of AHS. The hybrid system description language introduced above can be customized to the specific application domain as shown in <ref> [30] </ref>. Then controllers for the various maneuvers required on the AHS can be designed to satisfy safety, comfort and efficiency requirements 7 using the tools presented in Section 4 [20].
Reference: [31] <author> L. Semenzato, A. R. Deshpande, A. Gollu, P. Varaiya, D. Godbole, and R. Sengupta, </author> <title> "SHIFT reference manual." </title> <type> (preprint) California PATH Technical Report, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1996. </year>
Reference-contexts: One such micro-simulator SmartAHS is being built for AHS applications at Berkeley. Note that the simulation program should be able to handle dynamically changing inter-connections between different agents. A language for describing such a dynamically changing network of hybrid systems, called SHIFT, is described in <ref> [31] </ref>. SHIFT adds the functionality to dynamically create and destroy new components and change input output connections as part of the reset actions.
Reference: [32] <author> F. Balarin, K. Petty, and A. L. Sangiovanni-Vincentelli, </author> <title> "Formal verification of the PATHO real-time operating system," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 2459-2465, </pages> <year> 1994. </year>
Reference-contexts: Moreover, even though efficient algorithms exist (that make use of formal reduction techniques as well as heuristics and user input to facilitate the search), the verification task may still be prohibitively complex for current computers <ref> [32] </ref>. Verification of closed loop hybrid systems is better suited for optimal control, rather than game theory, as one of the two players (the controller) has its strategy fixed a-priori. Therefore only the disturbances, trying to do their worst to upset the design, enter the picture.
Reference: [33] <author> A. Puri and P. Varaiya, </author> <title> "Driving safely in smart cars," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 3597-3599, </pages> <year> 1995. </year>
Reference-contexts: Optimal control can be used to determine the discrete command sequences that force the continuous system to violate the performance specifications. If the discrete design is such that these command sequences are excluded then the hybrid design is verified. <ref> [33] </ref> discusses the application of these ideas to the automated highway example. In this paper we will concentrate on controller design and will not discuss the problem of verification further.
Reference: [34] <author> R. Alur and T. A. Henzinger, </author> <title> Computer-Aided Verification. </title> <note> 1996. to appear. </note>
Reference-contexts: The model we consider will be similar to models used primarily in computer science (in particular the ones in [14] and [15]). However, because we are interested in modeling different agents and their interaction we will take a more input/output approach, along the lines of the reactive module paradigm <ref> [34] </ref>. For an excellent overview of hybrid models from the dynamical systems point of view see [13]. Variables A hybrid automaton is a dynamical system which determines the evolution and interaction of a finite collection of variables.
Reference: [35] <author> L. Berkovitz, </author> <title> Optimal Control Theory. </title> <publisher> Springer-Verlag, </publisher> <year> 1974. </year>
Reference-contexts: The games considered in the examples of this dissertation will turn out to have unique saddle solutions. Existence and uniqueness of solutions can not be guaranteed for general games, however. For results in this direction the reader is referred to <ref> [35, 36, 37] </ref>. The saddle solution is not the only solution concept of interest in dynamic games. Other types of solution can be defined (Nash, Stackelberg, etc.).
Reference: [36] <author> T. Ba~sar and G. J. Olsder, </author> <title> Dynamic Non-cooperative Game Theory. </title> <publisher> Academic Press, </publisher> <editor> second ed., </editor> <year> 1995. </year>
Reference-contexts: The games considered in the examples of this dissertation will turn out to have unique saddle solutions. Existence and uniqueness of solutions can not be guaranteed for general games, however. For results in this direction the reader is referred to <ref> [35, 36, 37] </ref>. The saddle solution is not the only solution concept of interest in dynamic games. Other types of solution can be defined (Nash, Stackelberg, etc.). <p> The saddle solution used here is the simplest solution concept and applies only to two player, zero sum games. For a thorough treatment of dynamic games, solution concepts and applications the reader is referred to <ref> [36, 37, 38] </ref>. 4 Game Theoretic Framework In this section we give an algorithm to produce low level controllers for a hierarchical control scheme for large scale systems.
Reference: [37] <author> J. Lewin, </author> <title> Differential Games. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The games considered in the examples of this dissertation will turn out to have unique saddle solutions. Existence and uniqueness of solutions can not be guaranteed for general games, however. For results in this direction the reader is referred to <ref> [35, 36, 37] </ref>. The saddle solution is not the only solution concept of interest in dynamic games. Other types of solution can be defined (Nash, Stackelberg, etc.). <p> The saddle solution used here is the simplest solution concept and applies only to two player, zero sum games. For a thorough treatment of dynamic games, solution concepts and applications the reader is referred to <ref> [36, 37, 38] </ref>. 4 Game Theoretic Framework In this section we give an algorithm to produce low level controllers for a hierarchical control scheme for large scale systems.
Reference: [38] <editor> T. Ba~sar and A. Haurie, eds., </editor> <booktitle> Advances in Dynamic Games and Applications, vol. 1 of Annals of the International Society of Dynamic Games. </booktitle> <publisher> Birkhauser, </publisher> <year> 1994. </year>
Reference-contexts: The saddle solution used here is the simplest solution concept and applies only to two player, zero sum games. For a thorough treatment of dynamic games, solution concepts and applications the reader is referred to <ref> [36, 37, 38] </ref>. 4 Game Theoretic Framework In this section we give an algorithm to produce low level controllers for a hierarchical control scheme for large scale systems.
Reference: [39] <author> A. L. Schwartz, </author> <title> Theory and Implementation of Numerical Methods Based on Runge-Kutta Integration for Solving Optimal Control Problems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, University of California, Berkeley, California, </institution> <year> 1996. </year>
Reference-contexts: Fortunately, in our examples thus far, including the most complicated cases of [20], a solution can be obtained analytically, or using simple numerical calculations. However, we can not 21 expect such luck in general. New and sophisticated optimal control tools <ref> [39] </ref> will hopefully make the solution of more general problems feasible, at least numerically. 4.3 Interface and Discrete Design Revisited The sets V are such that for all initial conditions in them all requirements on system performance are guaranteed.
Reference: [40] <author> J. Lygeros, D. N. Godbole, and M. E. Broucke, </author> <title> "Towards a fault tolerant AHS design." </title> <type> SAE Paper # 951894, </type> <note> Presented at SAE Future Transportation Technology Conference, Costa Mesa, </note> <year> 1995. </year>
Reference-contexts: This construction provides a convenient way of modeling gradual performance degradation, where lower priority performance requirements are abandoned in favor of higher priority ones. It can be particularly useful for operation under degraded conditions, for example in the presence of faults <ref> [40] </ref>. The overall continuous design including the interface is shown in Figure 4. Switching of continuous controllers takes place at two levels. Assume that the discrete layer specifies two set points, A and B, and two objectives, for example safety and efficiency. <p> In extreme cases (for example presence of faults) a fully cooperative game may be needed to salvage the situation (as can be seen in the algorithms proposed in <ref> [40, 41] </ref>). 5 The Vehicle Following Example To illustrate how this design methodology can be useful in applications we consider the problem of vehicle following on an automated highway. This is one of the problems that arise in the process of designing controllers for automated highways.
Reference: [41] <author> D. N. Godbole, J. Lygeros, E. Singh, A. Deshpande, and A. Lindsey, </author> <title> "Design and verification of coordination layer protocols for degraded modes of operation of AHS," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 427-432, </pages> <year> 1995. </year>
Reference-contexts: In extreme cases (for example presence of faults) a fully cooperative game may be needed to salvage the situation (as can be seen in the algorithms proposed in <ref> [40, 41] </ref>). 5 The Vehicle Following Example To illustrate how this design methodology can be useful in applications we consider the problem of vehicle following on an automated highway. This is one of the problems that arise in the process of designing controllers for automated highways.
Reference: [42] <author> D. N. Godbole and J. Lygeros, </author> <title> "Longitudinal control of the lead car of a platoon," </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> vol. 43, no. 4, </volume> <pages> pp. 1125-1135, </pages> <year> 1994. </year> <month> 36 </month>
Reference-contexts: Assume that vehicle B is leading while vehicle C comes last, i.e. x B &gt; x A &gt; x C &gt; 0. We assume no control over vehicle B and try to control vehicle A. The dynamics of the trailing vehicle be approximated <ref> [42] </ref> by a third order ordinary differential equation: a A and b A are complicated nonlinear functions of the state with a A ( _x A ) 6= 0. For our purposes the details of the nonlinear functions b A and a A are not important. Following the design of [42], <p> <ref> [42] </ref> by a third order ordinary differential equation: a A and b A are complicated nonlinear functions of the state with a A ( _x A ) 6= 0. For our purposes the details of the nonlinear functions b A and a A are not important. Following the design of [42], we will assume that feedback linearization has already been carried so that: The objective is to design a safe, comfortable and efficient controller for this linear system. It is assumed that safety takes precedence over the other two requirements. Comfort will be assumed to be more important than efficiency. <p> Efficiency (Fast Convergence): J 3 (x 0 ; u; d) = 0 where y d is the desired fixed point for a given maneuver and P 0. For steady state operation the fixed point used in <ref> [42] </ref> is: y L 2 4 0 3 5 for v = 1 second, p = 10 meters. 27 5.3 Design for safety The design of a safe controller can be posed as a reachability question on the hybrid automaton of Figure 6. <p> The saddle solution, (u fl 3 ; d fl 3 ), for cost function J 3 can be sought, for example. The result will be some form of H 1 optimal design for u fl 3 . Other designs (e.g. the one proposed in <ref> [42] </ref>) are also acceptable. 5.6 The Complete Controller Consider the following switched feedback law: u (x) = &gt; &gt; &gt; &lt; u fl 3 2 [C 2 ; C 2 ] 3 &gt; C 2 3 &lt; C 2 1 if x 2 X C n V 2 Note that the
References-found: 42

