URL: http://ballade.cs.ucla.edu:8080/~cong/papers/integration97_optimize.ps.Z
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: Performance Optimization of VLSI Interconnect Layout  
Author: Jason Cong, Lei He, Cheng-Kok Koh and Patrick H. Madden 
Address: Los Angeles, CA 90095  
Affiliation: Department of Computer Science University of California,  
Abstract: This paper presents a comprehensive survey of existing techniques for interconnect optimization during the VLSI physical design process, with emphasis on recent studies on interconnect design and optimization for high-performance VLSI circuit design under the deep submicron fabrication technologies. First, we present a number of interconnect delay models and driver/gate delay models of various degrees of accuracy and efficiency which are most useful to guide the circuit design and interconnect optimization process. Then, we classify the existing work on optimization of VLSI interconnect into the following three categories and discuss the results in each category in detail: (i) topology optimization for high-performance interconnects, including the algorithms for total wirelength minimization, critical pathlength minimization, and delay minimization; (ii) device and interconnect sizing, including techniques for efficient driver, gate, and transistor sizing, optimal wiresizing, and simultaneous topology construction, buffer insertion, buffer and wire sizing; (iii) high-performance clock routing, including abstract clock net topology generation and embedding, planar clock routing, buffer and wire sizing for clock nets, non-tree clock routing, and clock schedule optimization. For each method, we discuss its effectiveness, its advantages and limitations, as well as its computational efficiency. We group the related techniques according to either their optimization techniques or optimization objectives so that the reader can easily compare the quality and efficiency of different solutions. 
Abstract-found: 1
Intro-found: 1
Reference: [AlHK93] <author> C. J. Alpert, T. C. Hu, J. H. Huang, and A. B. Kahng, </author> <title> A Direct Combination of the Prim and Dijkstra Constructions for Improved Performance-Driven Global Routing, </title> <booktitle> Proc. Int'l Symp. on Circuits and Systems, </booktitle> <year> 1993, </year> <pages> pp. 1869-1872. </pages>
Reference-contexts: The authors used random point sets and 0:8m CMOS IC design parameters to evaluate the performance of their SERT algorithm. On average, improvements of 21% in delay over 1-Steiner [KaRo92] constructions were obtained. When compared to the AHHK <ref> [AlHK93] </ref> algorithm (described in Section 3.2.1, delay improvements of 10% were obtained. The basic SERT method was extended to utilize branch-and-bound optimization, resulting in the Branch-and-Bound Steiner Optimal Routing Tree (BB-SORT) algorithm [BoKM94]. Tree construction is restricted to the Hanan grid, making the problem tractable.
Reference: [AwBP90] <author> B. Awerbuch, A. Baratz, and D. Peleg, </author> <title> Cost-Sensitive Analysis of Communication Protocols, </title> <booktitle> Proc. ACM Symp. Principles of Distributed Computing, </booktitle> <year> 1990, </year> <pages> pp. 177-187. </pages>
Reference-contexts: In order to compute a spanning tree with bounded radius and bounded cost, Cong et al.[CoKR92] extended the shallow-light 22 tree construction by Awerbuch, Baratz, and Peleg <ref> [AwBP90] </ref>, which was originally designed for communications protocols. The algorithm of [AwBP90] constructs spanning trees which have bounded performance for both total tree length and also maximum diameter. This class of constructions are known as shallow-light trees. <p> In order to compute a spanning tree with bounded radius and bounded cost, Cong et al.[CoKR92] extended the shallow-light 22 tree construction by Awerbuch, Baratz, and Peleg <ref> [AwBP90] </ref>, which was originally designed for communications protocols. The algorithm of [AwBP90] constructs spanning trees which have bounded performance for both total tree length and also maximum diameter. This class of constructions are known as shallow-light trees.
Reference: [Ba90] <author> H. B. Bakoglu, </author> <title> Circuits, Interconnections, and Packaging for VLSI, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: The prediction is that it will reach 64 million in Year 2001 [SIA94]. Second, the devices operate at a higher speed, and the interconnect delay becomes much more significant. According to the simple scaling rule described in <ref> [Ba90] </ref>, when the devices and interconnects are scaled down in all three dimensions by a factor of S, the intrinsic gate delay is reduced by a factor of S, the delay of local interconnects (such as connections between adjacent gates) remains the same, but the delay of global interconnects increases by <p> Other lumped circuit models such as Land T -type circuits may be used to model an edge as well <ref> [Ba90] </ref>. It is also possible to model an edge as a distributed RC line as shown in (c). <p> first computes the center of mass of S, denoted c (S), by calculating the means of the x- and y-coordinates of sinks in S: x c (S) = n y i 11 Another scheme that yields equal-length interconnections is the X-clock tree, where the basic building block is an X-structure <ref> [Ba90] </ref>. It can be verified easily that for the simple case of four sinks at the corners of a unit square, an X-tree connection can be embedded on a rectilinear plane using a cost of 4 units, whereas an H-tree connection requires only a cost of 3 units.
Reference: [BaWM86] <author> H. Bakoglu, J. T. Walker, and J. D. Meindl, </author> <title> A Symmetric Clock-Distribution Tree and Optimized High-Speed Interconnections for Reduced Clock Skew in ULSI and WSI Circuits, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer Design, Port Chester, </booktitle> <year> 1986, </year> <pages> pp. 118-122. </pages>
Reference-contexts: But, we separate abstract topology generation from embedding since once the abstract topology is given, embedding can be done optimally (under the pathlength delay model) or near-optimally using the algorithms to be described in Section 5.2. 55 5.1.1 Top-Down Topology Generation In an H-tree topology <ref> [FiKu82, KuGa82, WaFr83, DhFW84, BaWM86] </ref>, the basic building block is a regular H-structure. 11 All four corners of the H-structure are equi-distant from the center of the structure. The H-tree algorithm minimizes clock skew by repeating the H-structure recursively top-down as shown in Figure 26.
Reference: [BeJe90] <author> M. Berkelaar and J. Jess, </author> <title> Gate Sizing in MOS Digital Circuits with Linear Programming, </title> <booktitle> Proc. European Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 217-221. </pages>
Reference-contexts: The nonlinear problem is solved by the Newton-Raphson algorithm. A 64K-SRAM was optimized on a mainframe computer in 2 hours. In order to speed up the gate sizing problem, the linear programming (LP) formulation has been proposed. Berkelaar and Jess <ref> [BeJe90] </ref> used a piecewise-linear (PWL) function to linearize the delay function. More precisely, one divides the gate sizes into subranges so that the delay of a gate is a linear function of gate sizes within each subrange. Thus, the gate sizing problem can be formulated as a LP problem. <p> More precisely, one divides the gate sizes into subranges so that the delay of a gate is a linear function of gate sizes within each subrange. Thus, the gate sizing problem can be formulated as a LP problem. Their LP formulation <ref> [BeJe90] </ref> is to minimize the power subject to a delay constraint. Experimental results on circuits with up to 500 gates were presented. Later on, their LP-based method was expanded [BeBJ94] to compute the entire area or power-consumption versus delay trade-off curve. <p> The objective is to minimize 35 the weighted linear combination of clock period, area and power. Result on a chip of 13,000 transistors was reported. Note that gate sizing works in <ref> [BeJe90, BeBJ94, TaMF94] </ref> assume that the gate delay is a convex function of gate sizes, which is needed to make sure that the error introduced by the PWL approximation is small. However, the gate delay in fact is not a strict convex function. <p> However, the gate delay in fact is not a strict convex function. More recently, Chen, Onodera and Tamaru [ChOT95] removed the convex delay model assumption in previous LP-based works. They also divided the the gate sizes into subranges, but different from the previous works <ref> [BeBJ94, BeJe90, TaMF94] </ref> where only one LP problem is formulated over the whole gate size range with the delay being a PWL function in this LP formulation, a LP problem is formulated for every subrange with the delay being a linear function for each LP formulation.
Reference: [BeBJ94] <author> M. Berkelaar, P. Buurman, and J. Jess, </author> <title> Computing the Entire Active Area/Power Consumption versus Delay Trade-off Curve for Gate Sizing with a Piecewise Linear Simulator, </title> <booktitle> Proc. IEEE Int'l. Conf. on Computer-Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 474-480. </pages>
Reference-contexts: Thus, the gate sizing problem can be formulated as a LP problem. Their LP formulation [BeJe90] is to minimize the power subject to a delay constraint. Experimental results on circuits with up to 500 gates were presented. Later on, their LP-based method was expanded <ref> [BeBJ94] </ref> to compute the entire area or power-consumption versus delay trade-off curve. Results on MCNC'91 two-level benchmarks with up to 4,700 gates were reported. <p> The objective is to minimize 35 the weighted linear combination of clock period, area and power. Result on a chip of 13,000 transistors was reported. Note that gate sizing works in <ref> [BeJe90, BeBJ94, TaMF94] </ref> assume that the gate delay is a convex function of gate sizes, which is needed to make sure that the error introduced by the PWL approximation is small. However, the gate delay in fact is not a strict convex function. <p> However, the gate delay in fact is not a strict convex function. More recently, Chen, Onodera and Tamaru [ChOT95] removed the convex delay model assumption in previous LP-based works. They also divided the the gate sizes into subranges, but different from the previous works <ref> [BeBJ94, BeJe90, TaMF94] </ref> where only one LP problem is formulated over the whole gate size range with the delay being a PWL function in this LP formulation, a LP problem is formulated for every subrange with the delay being a linear function for each LP formulation.
Reference: [Be88] <author> M. W. Bern, </author> <title> Two Probabilistic Results on Rectilinear Steiner Trees, </title> <journal> Algorithmica, </journal> <year> 1988, </year> <pages> pp. 3 191-204. </pages>
Reference-contexts: The 1-Steiner algorithm has very good performance in terms of wirelength minimization; on random point sets, the trees 20 generated by this algorithm are 11% shorter than MSTs on average. The best possible possible improvement is conjectured to be roughly 12% on average <ref> [Be88] </ref>, so the 1-Steiner algorithm is considered to be very close to optimal. While this algorithm constructs trees which are close to optimal in terms of length, it suffers from relatively high complexity.
Reference: [BoKa92] <author> K. D. Boese and A. B. Kahng, </author> <title> Zero-Skew Clock Routing Trees With Minimum Wirelength, </title> <booktitle> Proc. IEEE 5th Int'l ASIC Conf., </booktitle> <address> Rochester, </address> <month> September </month> <year> 1992, </year> <pages> pp. </pages> <address> 1.1.1 - 1.1.5. </address>
Reference-contexts: Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model <ref> [BoKa92, Ed91, Ed92] </ref> and the Elmore delay model [Ts91, BoKa92, ChHH92a, ChHH92b]. The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model [BoKa92, Ed91, Ed92] and the Elmore delay model <ref> [Ts91, BoKa92, ChHH92a, ChHH92b] </ref>. The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model [BoKa92, Ed91, Ed92] and the Elmore delay model [Ts91, BoKa92, ChHH92a, ChHH92b]. The Deferred-Merge Embedding (DME) algorithm by <ref> [BoKa92, ChHH92a, Ed91] </ref> can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> The methods in [CoKo95, HuKT95, CoKK95] address the bounded-skew tree (BST) construction problem under the pathlength and Elmore delay models by extending the DME algorithm for zero-skew tree to BST/DME algorithms by the enabling concept of a merging region, which generalizes the merging segment concept of <ref> [BoKa92, ChHH92a, Ed91] </ref> for zero-skew clock trees. Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. <p> Otherwise specified, the experimental results reported by various papers will be presented with respect to these benchmark circuits. 5.2 Embedding of Abstract Topology Given a prescribed abstract topology, the Deferred-Merge Embedding (DME) algorithm, proposed independently by Edahiro [Ed91], Chao, Hsu, and Ho [ChHH92a], and Boese and Kahng <ref> [BoKa92] </ref>, achieves exact zero skew for both pathlength and Elmore delay models. The enabling concept is that of a merging segment. The problem of bounded-skew embedding was first addressed independently by Cong and Koh [CoKo95], and Huang, Kahng, and Tsao [HuKT95] under the pathlength delay model. <p> These embedding algorithms (both zero-skew and bounded-skew) can also be combined with bottom-up topology generation to produce clock trees with less routing costs [Ed92, CoKo95, HuKT95, CoKK95]. 5.2.1 Zero-Skew Embedding The key idea of the DME algorithm is the delayed embedding of internal nodes of the abstract topology <ref> [Ed91, ChHH92a, BoKa92] </ref>. In general, given two zero-skew trees, there can be a number of locations at which two zero-skew trees can be joined with the minimum wirelength such that zero skew is achieved at the higher level. <p> We first illustrate the computation of je a j and je b j under the pathlength delay model <ref> [Ed91, BoKa92] </ref>. <p> For pathlength delay, DME returns the optimal solution, i.e., a tree with minimum cost and minimum source-sink pathlength for any input sink set S and topology G. DME is not optimal under the Elmore Delay model <ref> [BoKa92] </ref>. Using the topologies generated by the KCR algorithm, the DME algorithm averages more than 9% and 15% cost reductions over the clock routing trees constructed by the KCR and MMM algorithms only, respectively. The results are marginally better than those produced by combining BB with DME. <p> Similar to the DME algorithm for zero-skew tree, the BST/DME algorithms compute a bounded-skew routing tree (BST) for a prescribed topology in two phases: bottom-up and top-down. The enabling concept is that of a merging region, which generalizes the concept of merging segment in <ref> [BoKa92, ChHH92a, Ed91] </ref> for zero-skew clock trees. Figure 31 highlights the difference between the DME algorithm for zero-skew routing and the BST/DME algorithms for bounded-skew routing. <p> It is difficult to choose a good combination of upper and lower bounds for a specific allowed skew bound. The authors also noted that the approach cannot be extended to handle Elmore delay easily [OhPP96]. 5.2.3 Topology Generation with Embedding Since DME requires an input topology, several works <ref> [BoKa92, ChHH92a, Ed92] </ref> have thus studied topology constructions that lead to low-cost routing solutions when DME is applied. These methods interleave topology construction with merging segment computation using DME. <p> This stems from the following facts <ref> [BoKa92] </ref>: (i) Given a set of sinks S with diameter diameter (S), if one constructs for each sink s i in S a tilted rectangular region T RR (s i ) centered at s i such that all points in T RR (s i ) is of a distance of diameter <p> Instead of considering buffer insertion at each merging step as in the GRIN algorithm, [ChWo96] considers inserting buffers at the roots of all subtrees. Starting with a set S of subtrees, the algorithm performs several iterations of DME-based zero-skew merging <ref> [Ed91, ChHH92a, BoKa92] </ref> until the size of S is reduced by 2 k for some k (which is dependent on the strength of buffer). Note that this is akin to clustering of nodes, followed by buffer insertion to drive each cluster. <p> Extensive studies of the clock routing problem in the past few years have made much advance on automating high-performance clock net synthesis. The bottom-up construction methods using the DME technique (e.g., <ref> [Ed91, ChHH92a, BoKa92, CoKK95, ViMa95] </ref>) are most promising in terms of efficiency, flexibility, and the solution quality. Most existing approaches first produce a balanced routing topology and then perform buffer insertion, buffer and wire sizing.
Reference: [BoKM93] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> Fidelity and Near-Optimality of Elmore-Based Routing Constructions, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer Design, </booktitle> <month> October </month> <year> 1993, </year> <pages> pp. 81-84. </pages>
Reference-contexts: Although the Elmore delay model is not accurate, it has a high degree of fidelity: an optimal or near-optimal solution according to the estimator is also nearly optimal according to actual (SPICE-computed [Na75]) delay for routing constructions <ref> [BoKM93] </ref> and wiresizing optimization [CoHe96a]. Simulations by [CoKK95] also showed that the clock skew under the Elmore delay model has a high correlation with the actual (SPICE) skew. The same study also reported a poor correlation between the pathlength skew and the actual skew. <p> More accurate and efficient delay models for interconnect optimization: Most of existing works on interconnect optimization are based on the Elmore delay model due to its simplicity, explicit representation of signal delay in terms of interconnect design parameters, and fairly high fidelity under the current fabrication technology <ref> [BoKM93, CoHe96a, CoKK95] </ref>. However, limitations of the Elmore delay model are well recognized as it cannot be used to characterize the signal waveform, handle interconnect inductance, and model frequency-dependent effects.
Reference: [BoKM94] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> Rectilinear Steiner Trees with Minimum Elmore Delay, </title> <booktitle> Proc. Design Automation Conf., </booktitle> <year> 1994, </year> <pages> pp. 381-386. </pages>
Reference-contexts: The above algebraic expression allows analysis of how topology and wire widths affect Elmore delay, which leads to interconnect topology optimization algorithms such as <ref> [BoKR93, BoKM94] </ref> and wiresizing algorithms such as [CoLe95, Sa94, CoHe95]. The approximation of the 50% signal delay by the Elmore delay is exact only for a symmetrical impulse response, where the mean is equal to the median [GuTK95]. <p> When compared to the AHHK [AlHK93] algorithm (described in Section 3.2.1, delay improvements of 10% were obtained. The basic SERT method was extended to utilize branch-and-bound optimization, resulting in the Branch-and-Bound Steiner Optimal Routing Tree (BB-SORT) algorithm <ref> [BoKM94] </ref>. Tree construction is restricted to the Hanan grid, making the problem tractable. This approach has exponential time complexity, but pruning of the search space makes its application feasible for small problem sizes. For any weighted linear combination of sink delays, BB-SORT-C was shown to construct an optimal tree. <p> For any weighted linear combination of sink delays, BB-SORT-C was shown to construct an optimal tree. For minimizing the maximum sink delay, however, it was shown that the optimal tree may not fall on the Hanan grid <ref> [BoKM94] </ref>, which prevents 29 the BB-SORT-C algorithm from finding the optimal solution. Experiments showed that the delays of SERT constructions were very close to those of BB-SORT constructions. For random problems with 9 points, using 0:5m CMOS IC parameters, the SERT delays were only 3.9% above those of BB-SORT [BoKM94]. <p> grid <ref> [BoKM94] </ref>, which prevents 29 the BB-SORT-C algorithm from finding the optimal solution. Experiments showed that the delays of SERT constructions were very close to those of BB-SORT constructions. For random problems with 9 points, using 0:5m CMOS IC parameters, the SERT delays were only 3.9% above those of BB-SORT [BoKM94]. In [BoKM95], it was also shown that the trees constructed using the Elmore delay model as an objective provided good performance under SPICE simulation.
Reference: [BoKR93] <author> K. D. Boese, A. B. Kahng, and G. Robins, </author> <title> High-performance routing trees with identified critical sinks, </title> <booktitle> Proc. Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 182-187. </pages>
Reference-contexts: The above algebraic expression allows analysis of how topology and wire widths affect Elmore delay, which leads to interconnect topology optimization algorithms such as <ref> [BoKR93, BoKM94] </ref> and wiresizing algorithms such as [CoLe95, Sa94, CoHe95]. The approximation of the 50% signal delay by the Elmore delay is exact only for a symmetrical impulse response, where the mean is equal to the median [GuTK95]. <p> Rather than constructing a spanning tree, their algorithm connects nodes to vertices or Steiner points that could be contained by the partial tree. Their algorithm utilizes a 2-pole simulator to evaluate signal delay and waveform integrity at each step. In <ref> [BoKR93] </ref>, Boese, Kahng, and Robins define the Critical-Sink Routing Tree (CSRT) Problem as: Given signal net N, construct T (N) which minimizes a i fl t (s i ): This formulation allows for the weighting of individual sinks to account for the varying importance of specific delay paths. <p> Furthermore, simultaneous interconnect construction, buffer insertion and sizing, and wiresizing has been studied in order to achieve even better designs. 4.4.1 Dynamic Wiresizing during Topology Construction Hodes, McCoy and Robins [HoMR94] propose a method to do wiresizing dynamically during tree construction. They combine the Elmore Routing Tree (ERT) algorithm <ref> [BoKR93] </ref> (Section 3.3) and the GWSA algorithm [CoLe93] (Section 4.2.1) as follows: starting with a degenerate tree initially consisting of only the source pin, grow the tree at each step by finding a new pin to connect to the tree in order to minimize the Elmore delay in the current wiresized <p> Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation. The algorithm minimizes clock skew by iteratively assigning appropriate weights (or Lagrangian multipliers) to sinks and performing device and wire sizing based on a weighted-sum formulation similar to those in <ref> [CoLe95, CoKo94, BoKR93] </ref>. <p> These algorithms use the right level of abstraction and can be incorporated in a global router efficiently. Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in <ref> [BoOI94, BoKR93, ViMa94, XuKu95b] </ref>. Most effective topology optimization for delay reduction is achieved by considering routing tree construction with buffer insertion as discussed in [OkCo96a, OkCo96b, LiCL96a].
Reference: [BoKM95] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> Near-Optimal Critical Sink Routing Tree Constructions, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 14(12), </volume> <month> Dec. </month> <year> 1995, </year> <pages> pp. 1417-1436. </pages>
Reference-contexts: Experiments showed that the delays of SERT constructions were very close to those of BB-SORT constructions. For random problems with 9 points, using 0:5m CMOS IC parameters, the SERT delays were only 3.9% above those of BB-SORT [BoKM94]. In <ref> [BoKM95] </ref>, it was also shown that the trees constructed using the Elmore delay model as an objective provided good performance under SPICE simulation.
Reference: [BoOI94] <author> M. Borah, R. M. Owens, and M. J. Irwin, </author> <title> An Edge-Based Heuristic for Steiner Routing, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 13(12), </volume> <month> Dec. </month> <year> 1994, </year> <pages> pp. 1563-1568. </pages>
Reference-contexts: A sophisticated implementation is O (n 3 ), while a naive approach may be O (n 5 ); this may make it impractical for problems with large numbers of vertices. The third approach we discuss is an MST based heuristic by Borah, Owen, and Irwin <ref> [BoOI94] </ref>. It produces results that are comparable to the 1-Steiner algorithm, but with a complexity of only O (n 2 ). Rather than optimizing a MST by merging edges, their method improves an initial MST by finding the shortest edge between a vertex and any point along an MST edge. <p> These algorithms use the right level of abstraction and can be incorporated in a global router efficiently. Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in <ref> [BoOI94, BoKR93, ViMa94, XuKu95b] </ref>. Most effective topology optimization for delay reduction is achieved by considering routing tree construction with buffer insertion as discussed in [OkCo96a, OkCo96b, LiCL96a].
Reference: [BoOI95] <author> M. Borah, R. M. Owens, and M. J. Irwin, </author> <title> Transistor Sizing for Minimizing Power Consumption of CMOS Circuit under Delay Constraint, </title> <booktitle> Proc. Int'l Symp. on Lower Power Design, </booktitle> <year> 1995, </year> <pages> pp. 167-172. </pages>
Reference-contexts: Another sensitivity based transistor sizing work is [Sap90] which also performs iterative transistor sizing to reduce the critical path delay. In contrast to TILOS, it changes the size of more than one transistor in each iteration. In addition, a sensitivity-based transistor sizing is presented by Borah et al. <ref> [BoOI95] </ref> to minimize power consumption of CMOS circuit under delay constraint. 5 According to [Ec80], a posynomial is a function of positive vector X 2 R m having the form g (X) = N i=1 u i (X) with u i (X) = c i x a i1 2 x a
Reference: [BrBK89] <author> F. Brglez, D. Bryan, and K. Kozminski, </author> <title> Combinational Profiles of Sequential Benchmark Circuits, </title> <booktitle> Proc. Int'l Symp. on Circuits and Systems, </booktitle> <year> 1989, </year> <pages> pp. 1929-1934. </pages>
Reference-contexts: Note that this changes the clock routing tree configuration, and therefore, the clock schedule and skews. After each merging segment perturbation operation, the UST algorithm performs gate sizing of combinational logic blocks to reduce power dissipation. The UST heuristic has been evaluated using three ISCAS89 benchmark circuits <ref> [BrBK89] </ref> and two industry circuits. In all but one case, the UST algorithm uses less wirelength when compared to the Greedy-BST/DME [CoKo95, HuKT95] and BB+DME algorithms [ChHH92b]. For each circuit, the skew bound for BST construction [CoKo95, HuKT95] is set to be the smallest skew bound of all sink pairs.
Reference: [CaCh91] <author> R. C. Carden and C.-K. Cheng, </author> <title> A Global Router Using An Efficient Approximate Multicommodity Multitermi-nal Flow Algorithm, </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conf., </booktitle> <year> 1991, </year> <pages> pp. 316-321. 87 </pages>
Reference-contexts: Also, timing requirements are usually given in terms of path delay constraints. One needs to either develop efficient algorithms to allocate the timing budget to each net along a path or be able to optimize multiple nets on a path simultaneously. Most well-known global routers, such as <ref> [LeSe88, CoPr88, CaCh91] </ref>, did not consider timing optimization during global routing. Existing methods on delay budgeting, such as [NaBH89, Fr92a, TeKS96], were mainly developed for circuit placement and their applicability to global routing is yet to be demonstrated.
Reference: [Ch90] <author> P. K. Chan, </author> <title> Algorithms for Libaray-Specific Sizing of Combinational Logic, </title> <booktitle> Proc. ACM/IEEE Design Automa--tion Conf., </booktitle> <year> 1990, </year> <pages> pp. 353-356. </pages>
Reference-contexts: In general, the discrete gate sizing problem is NP-complete: Chan <ref> [Ch90] </ref> showed that the double sized discrete gate sizing problem to find discrete gate sizes to satisfy both maximum and minimum delay constraints is NP-complete, even without consideration of area minimization. <p> Li [Li94] further showed that the discrete gate sizing problem under both area and maximum delay constraints is strongly NP-hard even for a chain of gates. The methods which are optimal for logic networks of certain structures have been proposed. For the double-sided problem, a branch and bound algorithm <ref> [Ch90] </ref> was developed to find the optimal solution for tree structures. For the single-sided problem, an optimal dynamic programming method to minimize the maximum delay was proposed, again for tree structures [HiKo92]. <p> A simple series circuit is solved by a dynamic programming method and a simple parallel circuit is solved by a number of transformations. All series-parallel circuits can be solved recursively. Heuristics have been proposed to expand the optimal algorithms for trees or series-parallel circuits to the general cases in <ref> [Ch90, LiLA92] </ref>. Furthermore, the following methods have been developed: Lin, Marek-Sadowska and Kuh [LiMK90] use the weighted sum of sensitivity and criticality to choose cell sizes for standard-cell designs.
Reference: [ChHH92a] <author> T.-H. Chao, Y.-C. Hsu, and J.-M. Ho, </author> <title> Zero Skew Clock Net Routing, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1992, </year> <pages> pp. 518-523. </pages>
Reference-contexts: Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model [BoKa92, Ed91, Ed92] and the Elmore delay model <ref> [Ts91, BoKa92, ChHH92a, ChHH92b] </ref>. The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model [BoKa92, Ed91, Ed92] and the Elmore delay model [Ts91, BoKa92, ChHH92a, ChHH92b]. The Deferred-Merge Embedding (DME) algorithm by <ref> [BoKa92, ChHH92a, Ed91] </ref> can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> The methods in [CoKo95, HuKT95, CoKK95] address the bounded-skew tree (BST) construction problem under the pathlength and Elmore delay models by extending the DME algorithm for zero-skew tree to BST/DME algorithms by the enabling concept of a merging region, which generalizes the merging segment concept of <ref> [BoKa92, ChHH92a, Ed91] </ref> for zero-skew clock trees. Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. <p> Instead of routing alternatively between the horizontal and vertical directions, the MMM method is also extended to allow one level of look-ahead to determine the more favorable direction. Chao, Hsu, and Ho <ref> [ChHH92a] </ref> presented another top-down topology generation approach called the Balanced Bipartition (BB) method. The heuristic divides the sink set recursively into two partitions with nearly equal total loading capacitance. It is more general than the MMM method which uses only horizontal and vertical cuts. <p> Otherwise specified, the experimental results reported by various papers will be presented with respect to these benchmark circuits. 5.2 Embedding of Abstract Topology Given a prescribed abstract topology, the Deferred-Merge Embedding (DME) algorithm, proposed independently by Edahiro [Ed91], Chao, Hsu, and Ho <ref> [ChHH92a] </ref>, and Boese and Kahng [BoKa92], achieves exact zero skew for both pathlength and Elmore delay models. The enabling concept is that of a merging segment. <p> These embedding algorithms (both zero-skew and bounded-skew) can also be combined with bottom-up topology generation to produce clock trees with less routing costs [Ed92, CoKo95, HuKT95, CoKK95]. 5.2.1 Zero-Skew Embedding The key idea of the DME algorithm is the delayed embedding of internal nodes of the abstract topology <ref> [Ed91, ChHH92a, BoKa92] </ref>. In general, given two zero-skew trees, there can be a number of locations at which two zero-skew trees can be joined with the minimum wirelength such that zero skew is achieved at the higher level. <p> Similar to the DME algorithm for zero-skew tree, the BST/DME algorithms compute a bounded-skew routing tree (BST) for a prescribed topology in two phases: bottom-up and top-down. The enabling concept is that of a merging region, which generalizes the concept of merging segment in <ref> [BoKa92, ChHH92a, Ed91] </ref> for zero-skew clock trees. Figure 31 highlights the difference between the DME algorithm for zero-skew routing and the BST/DME algorithms for bounded-skew routing. <p> It is difficult to choose a good combination of upper and lower bounds for a specific allowed skew bound. The authors also noted that the approach cannot be extended to handle Elmore delay easily [OhPP96]. 5.2.3 Topology Generation with Embedding Since DME requires an input topology, several works <ref> [BoKa92, ChHH92a, Ed92] </ref> have thus studied topology constructions that lead to low-cost routing solutions when DME is applied. These methods interleave topology construction with merging segment computation using DME. <p> The solution is further improved by a post-processing local search that adjusts the resulting topology (cf. CL+I6 in [Ed93a]). Greedy-DME achieves 20% reduction in wiring cost compared with the results which were obtained by using BB followed by DME <ref> [ChHH92a] </ref>. Chou and Cheng [ChCh93] proposed a simulated annealing approach to construct a zero-skew tree. A tree grafting perturbation operation is used to swap two subtrees during the annealing process. The algorithm has been applied to both Manhattan and Euclidean geometries. <p> Instead of considering buffer insertion at each merging step as in the GRIN algorithm, [ChWo96] considers inserting buffers at the roots of all subtrees. Starting with a set S of subtrees, the algorithm performs several iterations of DME-based zero-skew merging <ref> [Ed91, ChHH92a, BoKa92] </ref> until the size of S is reduced by 2 k for some k (which is dependent on the strength of buffer). Note that this is akin to clustering of nodes, followed by buffer insertion to drive each cluster. <p> Extensive studies of the clock routing problem in the past few years have made much advance on automating high-performance clock net synthesis. The bottom-up construction methods using the DME technique (e.g., <ref> [Ed91, ChHH92a, BoKa92, CoKK95, ViMa95] </ref>) are most promising in terms of efficiency, flexibility, and the solution quality. Most existing approaches first produce a balanced routing topology and then perform buffer insertion, buffer and wire sizing.
Reference: [ChHH92b] <author> T.-H. Chao, Y.-C. Hsu, J. M. Ho, K. D. Boese and A. B. Kahng, </author> <title> Zero Skew Clock Routing With Minimum Wirelength, </title> <journal> IEEE Trans. on Circuits and Systems, </journal> <volume> 39(11), </volume> <month> Nov. </month> <year> 1992, </year> <pages> pp. 799-814. </pages>
Reference-contexts: Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model [BoKa92, Ed91, Ed92] and the Elmore delay model <ref> [Ts91, BoKa92, ChHH92a, ChHH92b] </ref>. The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> Note that BB is a purely topology generation algorithm. It relies on the embedding algorithm to be presented in Section 5.2 to embed the abstract topology generated. 5.1.2 Bottom-Up Topology Generation In contrast to the top-down approaches of <ref> [JaSK90, ChHH92b] </ref>, the KCR geometric matching algorithm was proposed by Kahng, Cong, and Robins [KaCR91, CoKR93] as the first bottom-up approach for clock tree abstract topology generation. <p> The UST heuristic has been evaluated using three ISCAS89 benchmark circuits [BrBK89] and two industry circuits. In all but one case, the UST algorithm uses less wirelength when compared to the Greedy-BST/DME [CoKo95, HuKT95] and BB+DME algorithms <ref> [ChHH92b] </ref>. For each circuit, the skew bound for BST construction [CoKo95, HuKT95] is set to be the smallest skew bound of all sink pairs. To compare the impact of a UST on power dissipation, [XiDa96] also performed gate sizing with bounded (zero) skew after a BST (ZST) was constructed.
Reference: [ChCW96a] <author> C. P. Chen, Y. W. Chang, and D. F. Wong, </author> <title> Fast Performance-Driven Optimization for Buffered Clock Trees Based on Lagrangian Relaxation, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1996, </year> <pages> pp. 405-408. </pages>
Reference-contexts: Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). Later on, single-source wire-sizing algorithms were presented in <ref> [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] </ref> using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. <p> Furthermore, several iterations of the procedures to minimize the weighted delay can be used to minimize the maximum delay or achieve the target delay by adjusting the weight penalty assignment in practice. Particularly, the Lagrangian relaxation wire-sizing work <ref> [ChCW96a] </ref> proposes an optimal method to assign the weight penalty, which will be presented in Subsection 4.2.2.D. A. Single-Source RC Tree under Elmore Delay Model Sapatnekar [Sa94] studied the wire-sizing problem to minimize the maximum delay under the Elmore delay formulation of Eqn. (3). <p> In particular, Chen, Chang and Wong <ref> [ChCW96a] </ref> showed that for the continuous wire-sizing formulation where the wire width can be any value between the lower and upper bounds, the weighted delay formulation is able to optimally minimize the maximum delay 8 Note that the delay in a tree of transmission lines is the sum of flying time <p> The following two-level algorithm was proposed in <ref> [ChCW96a] </ref>: in the outer loop, the weights associated with the delays from the source to sinks are dynamically adjusted, which are basically proportional to the delays at the sinks. <p> We note that buffer insertion algorithms such as those in [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. Chen, Chang, and Wong <ref> [ChCW96a] </ref> very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation. The algorithm minimizes clock skew by iteratively assigning appropriate weights (or Lagrangian multipliers) to sinks and performing device and wire sizing based on a weighted-sum formulation similar to those in [CoLe95, CoKo94, BoKR93].
Reference: [ChCW96b] <author> C. P. Chen, Y. P. Chen, and D. F. Wong, </author> <title> Optimal Wire-Sizing Formula Under the Elmore Delay Model, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1996, </year> <pages> pp. 487-490. </pages>
Reference-contexts: Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). Later on, single-source wire-sizing algorithms were presented in <ref> [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] </ref> using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. <p> Wiresizing works in [CoLe93, CoLe95, CoHe95, CoHe96a] assumed that the wire widths are discrete and uniform within a wire segment or sub-segment. Most recently in <ref> [ChCW96b] </ref>, an optimal wire-sizing formula was derived by Chen et al. to achieve the continuous and non-uniform wire width for each wire segment, again to minimize the weighted combination of Elmore delays from a single source to a set of critical sinks. <p> D. Continuous and Non-uniform Wiresizing for Single-Source RC Tree Another alternative to achieve non-uniform wire width within a segment is the optimal wire-sizing formula proposed in <ref> [ChCW96b] </ref> very recently. Let f (x) be the wire width at position x of a wire segment. <p> In the inner loop, the continuous wire-sizing solution is computed for the given set of weights, by the wire-sizing algorithm <ref> [ChCW96b] </ref> (Section 4.2.1.D) to minimize the weighted linear combination of delays. They showed that the Lagrangian relaxation iteration will converge to an optimal solution in terms of maximum-delay minimization.
Reference: [ChKa91] <author> H. Y. Chen and S. M. Kang, iCOACH: </author> <title> A Circuit Optimization Aid for CMOS High-Performance Circuits, Integration, </title> <journal> the VLSI Journal, </journal> <volume> vol. 10, </volume> <month> Jan. </month> <year> 1991, </year> <pages> pp. 155-168. </pages>
Reference-contexts: Studies have been done to formulate the transistor sizing problem as mathematical programming problems to obtain an optimal solution. Methods in [Ci87, He87, Ma86] formulate the transistor sizing problem as nonlinear programs and solve them by the method of Lagrangian multipliers. Methods in <ref> [DaAs89, HeFi91, ChKa91] </ref> apply the following two-step iterations. First, the delay budget is distributed to each gate; Then, the transistors in each gate are sized optimally to satisfy the time budget.
Reference: [ChOK93] <author> K. Chaudhary, A. Onozawa, and E. S. Kuh, </author> <title> A Spacing Algorithm for Performance Enhancement and Cross-Talk Reduction, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1993, </year> <pages> pp. 697-702. </pages>
Reference-contexts: Again, in order to consider the coupling effect (i.e. crosstalk), one needs to consider the interaction of multiple nets simultaneously. Existing works on crosstalk reduction, including those presented in <ref> [ChOK93, GaLi93, GaLi94, KiSa94, XuKW96] </ref>, focus mainly on proper spacing and wire segment ordering. It is not yet clear how crosstalk will be affected by buffer insertion, device and wire sizing, etc..
Reference: [ChOT95] <author> G. Chen, H. Onodera, and K. Tamaru, </author> <title> An Iterative Gate Sizing Approach with Accurate Delay Evaluation, </title> <booktitle> Proc. IEEE Int'l. Conf. on Computer-Aided Design, </booktitle> <year> 1995, </year> <pages> pp. 422-427. </pages>
Reference-contexts: However, the gate delay in fact is not a strict convex function. More recently, Chen, Onodera and Tamaru <ref> [ChOT95] </ref> removed the convex delay model assumption in previous LP-based works.
Reference: [ChWo96] <author> Y. P. Chen and D. F. Wong, </author> <title> An Algorithm for Zero-Skew Clock Tree Routing with Buffer Insertion, </title> <booktitle> Proc. Eu-ropean Design and Test Conf., </booktitle> <year> 1996. </year>
Reference-contexts: As the feature size becomes smaller, this approach has become more attractive and less expensive in terms of chip area. The earlier works by [DhFW84, WuSh92] considered insertion of uniform-size buffers in a H-tree structure. The more recent works by <ref> [ViMa95, ChWo96] </ref> perform buffer insertion simultaneously with clock routing. The work on buffer insertion and sizing will be presented in Section 5.4.3. The work on buffer insertion and wiresizing will be presented in Section 5.4.4. <p> Moreover, buffers at the same level have the same size. These restrictions may affect the optimality in terms of signal delay and total wirelength. However, they help to reduce skew sensitivity to process variations. Chen and Wong <ref> [ChWo96] </ref> also considered buffer insertion and topology generation simultaneously. Instead of considering buffer insertion at each merging step as in the GRIN algorithm, [ChWo96] considers inserting buffers at the roots of all subtrees. <p> However, they help to reduce skew sensitivity to process variations. Chen and Wong <ref> [ChWo96] </ref> also considered buffer insertion and topology generation simultaneously. Instead of considering buffer insertion at each merging step as in the GRIN algorithm, [ChWo96] considers inserting buffers at the roots of all subtrees. Starting with a set S of subtrees, the algorithm performs several iterations of DME-based zero-skew merging [Ed91, ChHH92a, BoKa92] until the size of S is reduced by 2 k for some k (which is dependent on the strength of buffer). <p> Note that this approach is less sensitive to process variations since all source-to-sink paths have the same number of buffers. Experimental results also showed that both signal delay and total wirelength are reduced when buffer insertion is considered <ref> [ChWo96] </ref>. Related works in the area of buffered clock tree synthesis also include [ChSa93, RaSh89]. <p> It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree [PuMO93]. We note that buffer insertion algorithms such as those in <ref> [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] </ref> do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation.
Reference: [ChSa93] <author> J. D. Cho and M. Sarrafzadeh, </author> <title> A Buffer Distribution Algorithm for High-Speed Clock Routing, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 537-543. </pages>
Reference-contexts: Experimental results also showed that both signal delay and total wirelength are reduced when buffer insertion is considered [ChWo96]. Related works in the area of buffered clock tree synthesis also include <ref> [ChSa93, RaSh89] </ref>. Assuming that all internal nodes of a clock routing tree will be inserted with buffers, Cho and Sarrafzadeh [ChSa93] considered distributing the buffers over the routing plane at the expense of minimum increase in routing cost to reduce local buffer congestion. <p> Related works in the area of buffered clock tree synthesis also include [ChSa93, RaSh89]. Assuming that all internal nodes of a clock routing tree will be inserted with buffers, Cho and Sarrafzadeh <ref> [ChSa93] </ref> considered distributing the buffers over the routing plane at the expense of minimum increase in routing cost to reduce local buffer congestion. The chip is first decomposed into several square subregions, say r of them. <p> Note that the minimum-length DDST partitions the sinks into clusters, with each cluster of sinks rooted by a center. Finally, the KCR algorithms is applied to generate the buffered clock tree, with the consideration that sinks in the same cluster are matched. <ref> [ChSa93] </ref> reported that buffer congestion is reduced by 20% at the cost of 10% increase in wirelength. However, with a buffer inserted at every internal node of the clock tree, this is a very expensive (in terms of power and delay) buffer distribution scheme.
Reference: [ChCh93] <author> N.-C. Chou and C.-K. Cheng, </author> <title> Wire Length and Delay Minimization in General Clock Net Routing, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 552-555. </pages>
Reference-contexts: The solution is further improved by a post-processing local search that adjusts the resulting topology (cf. CL+I6 in [Ed93a]). Greedy-DME achieves 20% reduction in wiring cost compared with the results which were obtained by using BB followed by DME [ChHH92a]. Chou and Cheng <ref> [ChCh93] </ref> proposed a simulated annealing approach to construct a zero-skew tree. A tree grafting perturbation operation is used to swap two subtrees during the annealing process. The algorithm has been applied to both Manhattan and Euclidean geometries.
Reference: [ChSa95] <author> W. Chuang and S. S. Sapatnekar, </author> <title> Power vs. Delay in Gate Sizing: </title> <booktitle> Conflicting Objectives? Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> November </month> <year> 1995, </year> <pages> pp. 463-466. </pages>
Reference-contexts: Another method to combine both gate sizing and clock skew optimization can be found in [SaSF95]. In addition, Chuang and Sapatnekar proposed another LP formulation to address the continuous gate sizing problem for power optimization in <ref> [ChSa95] </ref>. 4.1.3 Buffer Insertion Buffer (also called repeater) insertion is a common and effective technique to reduce interconnect delay. As the Elmore delay of a long wire grows quadratically in terms of the length of the wire, buffer insertion can reduce interconnect delay significantly.
Reference: [ChSH93a] <author> W. Chuang, S. S. Sapatnekar, and I. N. Hajj, </author> <title> A Unified Algorithm for Gate Sizing and Clock Skew Optimization to Minimize Sequential Circuit Area, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 220-223. </pages>
Reference-contexts: The criticality is inversely proportional to the slack of a cell so 36 that a cell in a non-critical path will not be over-sized 6 . Chuang, Sapatnekar and Hajj <ref> [ChSH93a, ChSH95] </ref> presented a three--step method to minimize the area subject to the single-sided delay constraint. First, they formulate a linear programming (LP) problem to obtain a continuous solution. <p> Then, they map the continuous solution onto the allowed discrete gate sizes; Finally, they adjust the gate sizes to satisfy the delay constraint. Also, the three-step algorithm was modified in [ChSH93b] to minimize the area under the double-sided delay constraint. It is worth mentioning that the work in <ref> [ChSH93a, ChSH95] </ref> further formulated gate sizing and clock skew optimization as a single LP problem not only to reduce the circuit area but also to achieve faster clocks. Another method to combine both gate sizing and clock skew optimization can be found in [SaSF95]. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], <ref> [ChSH93a, SaSF95] </ref> removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While [Fi90, ChSH93a, SaSF95] assumed a fixed network of registers, in [Fr92b, SoFr94, SoFM95], the authors considered retiming using skew information to optimize the circuit. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], [ChSH93a, SaSF95] removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While <ref> [Fi90, ChSH93a, SaSF95] </ref> assumed a fixed network of registers, in [Fr92b, SoFr94, SoFM95], the authors considered retiming using skew information to optimize the circuit. Registers may be removed or inserted as long the circuit still operates correctly.
Reference: [ChSH93b] <author> W. Chuang, S. S. Sapatnekar, and I. N. Hajj, </author> <title> Delay and Area Optimization for Discrete Gate Sizes under Double-Sided Timing Constraints, </title> <booktitle> Proc. IEEE Custom Integrated Circuits conf., </booktitle> <year> 1993, </year> <pages> pp. </pages> <month> 9.4.1-9.4.4. </month>
Reference-contexts: First, they formulate a linear programming (LP) problem to obtain a continuous solution. Then, they map the continuous solution onto the allowed discrete gate sizes; Finally, they adjust the gate sizes to satisfy the delay constraint. Also, the three-step algorithm was modified in <ref> [ChSH93b] </ref> to minimize the area under the double-sided delay constraint. It is worth mentioning that the work in [ChSH93a, ChSH95] further formulated gate sizing and clock skew optimization as a single LP problem not only to reduce the circuit area but also to achieve faster clocks.
Reference: [ChSH95] <author> W. Chuang, S. S. Sapatnekar, and I. N. Hajj, </author> <title> Timing and Area Optimization for Standard-Cell VLSI Circuit Design, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <month> March </month> <year> 1995, </year> <pages> pp. 308-320. 88 </pages>
Reference-contexts: The criticality is inversely proportional to the slack of a cell so 36 that a cell in a non-critical path will not be over-sized 6 . Chuang, Sapatnekar and Hajj <ref> [ChSH93a, ChSH95] </ref> presented a three--step method to minimize the area subject to the single-sided delay constraint. First, they formulate a linear programming (LP) problem to obtain a continuous solution. <p> Then, they map the continuous solution onto the allowed discrete gate sizes; Finally, they adjust the gate sizes to satisfy the delay constraint. Also, the three-step algorithm was modified in [ChSH93b] to minimize the area under the double-sided delay constraint. It is worth mentioning that the work in <ref> [ChSH93a, ChSH95] </ref> further formulated gate sizing and clock skew optimization as a single LP problem not only to reduce the circuit area but also to achieve faster clocks. Another method to combine both gate sizing and clock skew optimization can be found in [SaSF95].
Reference: [ChCh94] <author> J. Chung and C.-K. Cheng, </author> <title> Skew Sensitivity Minimization of Buffered Clock Tree, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 280-283. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation <ref> [PuMO93, ChCh94, LiWo94, XiDa95] </ref>, and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> will see in the following discussion, when delay sensitivity is considered, buffer insertion/sizing with wiresizing can reduce power and clock delay without an adverse impact on clock skew and reliability. 5.4.4 Buffer Insertion and Wire Sizing in Clock Routing The Skew Sensitivity Minimization (SSM) algorithm proposed by Chung and Cheng <ref> [ChCh94] </ref> considers buffer insertion and wire sizing to minimize skew sensitivity due to process variations. Since SSM considers a library of buffers of different sizes, it is capable of discrete buffer sizing. <p> The paper compared the worst case skews under process variations for clock trees before and after applying SSM. The reduction in the worst case skews is in the range of 87X to 144X <ref> [ChCh94] </ref>. The SSM algorithm also achieves 2X to 11X reduction 79 in clock delay. Pullela et al. [PuMO93] also proposed a buffer insertion/sizing and wire sizing algorithm for a tree of l levels. <p> We note that buffer insertion algorithms such as those in [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] do not restrict buffers to be located at branching points only, whereas the algorithms by <ref> [ChCh94, PuMO93] </ref> consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation.
Reference: [Ci87] <author> M. A. Cirit, </author> <title> Transistor Sizing in CMOS Circuits, </title> <booktitle> Proc. 24th ACMIEEE Design Automation Conf., </booktitle> <year> 1987, </year> <pages> pp. 121-124. </pages>
Reference-contexts: Mathematical Programming Based Transistor Sizing Note that the method in [FiDu85] does not guarantee the optimality of the result. Studies have been done to formulate the transistor sizing problem as mathematical programming problems to obtain an optimal solution. Methods in <ref> [Ci87, He87, Ma86] </ref> formulate the transistor sizing problem as nonlinear programs and solve them by the method of Lagrangian multipliers. Methods in [DaAs89, HeFi91, ChKa91] apply the following two-step iterations.
Reference: [CoRa91] <author> J. P. Cohoon and L. J. Randall, </author> <title> Critical Net Routing, </title> <booktitle> Proc. Int'l Conf. on Computer Design, </booktitle> <year> 1991, </year> <pages> pp. 174-177. </pages>
Reference-contexts: Assuming uniform wire width, constraining path lengths between source and sink clearly realizes this goal. In this subsection, we discuss approaches to delay minimization through the geometric objective of path length reduction or minimization. 3.2.1 Tree Cost/Path Length Tradeoffs Cohoon and Randal <ref> [CoRa91] </ref> presented an early work which addressed the problem of constructing interconnect trees for the VLSI domain, considering path length while not requiring shortest paths.
Reference: [CoHe95] <author> J. Cong and L. </author> <title> He, Optimal Wiresizing for Interconnects with Multiple Sources, </title> <booktitle> Proc. IEEE Int'l. Conf. on Computer Design, </booktitle> <month> Nov. </month> <year> 1995, </year> <pages> pp. 568-574. </pages>
Reference-contexts: The above algebraic expression allows analysis of how topology and wire widths affect Elmore delay, which leads to interconnect topology optimization algorithms such as [BoKR93, BoKM94] and wiresizing algorithms such as <ref> [CoLe95, Sa94, CoHe95] </ref>. The approximation of the 50% signal delay by the Elmore delay is exact only for a symmetrical impulse response, where the mean is equal to the median [GuTK95]. <p> Later on, single-source wire-sizing algorithms were presented in [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in <ref> [CoHe95] </ref>. Furthermore, wire-sizing was carried out simultaneously with device sizing in [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c]. <p> Later on, Cong and He <ref> [CoHe95, CoHe96a] </ref> extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. Wiresizing works in [CoLe93, CoLe95, CoHe95, CoHe96a] assumed that the wire widths are discrete and uniform within a wire segment or sub-segment. <p> Later on, Cong and He [CoHe95, CoHe96a] extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. Wiresizing works in <ref> [CoLe93, CoLe95, CoHe95, CoHe96a] </ref> assumed that the wire widths are discrete and uniform within a wire segment or sub-segment. <p> B. Discrete Wiresizing for Multi-Source RC Tree The wire-sizing problem for the multiple-source interconnect tree (MSIT) was studied by Cong and He in <ref> [CoHe95] </ref>. They decompose a MSIT into the source subtree (SST) and a set of loading subtrees (LSTs) (see Figure 22). The SST is the subtree spanned by all sources in the MSIT. <p> The direction of the signal (current) flowing out from Lsrc is 41 the right direction along each segment. Under such definitions, the signal in any LST always flows rightward, but the signal may flow either leftward or rightward in the SST. The following properties were shown in <ref> [CoHe95] </ref> for the wire-sizing problem for MSITs (the MSWS problem): LST Separability: Given the wire width assignment of the SST, the optimal width assignment for each LST branching off from the SST can be carried out independently. <p> Because of the two properties, the polynomial-time OWSA algorithm developed for single-source wire-sizing in [CoLe95] can be applied to compute the optimal wire widths independently for each LST when given the wire width assignments for the SST. Furthermore, the authors of <ref> [CoHe95] </ref> proved that the MSWS problem has the dominance property presented in Section 4.2.1.A. Thus, the GWSA algorithm, again developed in [CoLe95] for the single-source wire-sizing problem, can be applied to compute the lower and upper bounds for the optimal solution of the MSWS problem. <p> The fine and uniform segment-division, however, may result in high memory usage and computation time. An approach based on the bundled refinement property was proposed by Cong and He <ref> [CoHe95] </ref> to decide the appropriate segment-division during the wire-sizing procedure. It uses much less memory and computation time and is applicable to both single-source and multi-source wire-sizing problems. For the simplicity of presentation, we assume the multi-source wire-sizing problem since the single-source wire-sizing problem is a simple case of it. <p> A min-segment is a uni-segment of the minimum length, which is set by the user or determined by the technology. The finest segment-division is the one with each uni-segment being a min-segment. Then, the following property was revealed in <ref> [CoHe95] </ref>, even though the signal direction in the SST of an MSIT may be changed with respect to different sources. 42 Local Monotone Property: There exists an optimal wire-sizing solution for a routing tree, such that the wire widths within any segment e is monotone: (1) if F l (e) &gt; <p> For W dominated by W fl , if F l (e) F r (e), the local refinement of the rightmost min-segment e r is treated as the local refinement for all min-segments in segment e. The following property was proved in <ref> [CoHe95] </ref>. Bundled Refinement Property: Let W fl be an optimal wire-sizing solution under the finest segment division. If a wire-sizing solution W dominates W fl , then the wire-sizing solution obtained by any bundled refinement under any segment-division on W still dominates W fl . <p> The BWSA algorithm iterates through a number of passes until either identical lower and upper bounds are achieved for all uni-segments or each non-convergent uni-segment is a min-segment. It was shown in <ref> [CoHe95] </ref> that the lower and upper bound obtained by the BWSA algorithm under the iteratively refined segment-division is as tight as those obtained by the GWSA algorithm under the finest segment-division where every uni-segment is a min-segment. <p> In practice, the runtime of SDWS/D is on the same order as k times the runtime of the GWSA algorithm followed by the OWSA algorithm to compute the optimal wiresizing algorithm. Note that the BWSA algorithm <ref> [CoHe95] </ref> presented in Section 4.2.1.C can be used to greatly speed-up the computation of the optimal wiresizing solution. The simultaneous driver and wire sizing problem for power minimization was also studied in [CoKo94] and the efficient optimal algorithm was developed. <p> The theorem provides an easy way to verify the dominance property for both the single-source and the multi-source wiresiz-ing problems in [CoLe95] and <ref> [CoHe95] </ref>, respectively, since both objective functions are instances of the simple CH-posynomial. Furthermore, the theorem leads to efficient algorithms, for example, the generalizations of the GWSA algorithm [CoLe95] or the BWSA algorithm [CoHe95], to compute a set of lower and upper bounds of the optimal solution to a CH-posynomial program by <p> way to verify the dominance property for both the single-source and the multi-source wiresiz-ing problems in [CoLe95] and <ref> [CoHe95] </ref>, respectively, since both objective functions are instances of the simple CH-posynomial. Furthermore, the theorem leads to efficient algorithms, for example, the generalizations of the GWSA algorithm [CoLe95] or the BWSA algorithm [CoHe95], to compute a set of lower and upper bounds of the optimal solution to a CH-posynomial program by the local refinement operation and the bundled refinement operation very efficiently (in polynomial time). <p> Thus, the BWSA algorithm <ref> [CoHe95] </ref> is generalized to compute the lower and upper bounds for the optimal widths for both wires and transistors. <p> Device and interconnect sizing: The optimization problems in this area usually have well defined mathematical programming formulations. We feel that the sensitivity based heuristics, such as those used in [FiDu85, Sa94], and the local refinement technique based on the dominance property (and the bundled refinement property) used in <ref> [CoLe95, CoKo94, CoHe95, CoHe96c] </ref> are most efficient, produce good quality solutions, and scale up well with the rapid increasing of design complexity.
Reference: [CoHe96a] <author> J. Cong and L. </author> <title> He, Optimal Wiresizing for Interconnects with Multiple Sources, </title> <journal> ACM Trans. on Design Automation of Electronic Systems, </journal> <note> to appear, 1996 (also available as UCLA Technical Report 95-00031, </note> <year> 1995). </year>
Reference-contexts: Although the Elmore delay model is not accurate, it has a high degree of fidelity: an optimal or near-optimal solution according to the estimator is also nearly optimal according to actual (SPICE-computed [Na75]) delay for routing constructions [BoKM93] and wiresizing optimization <ref> [CoHe96a] </ref>. Simulations by [CoKK95] also showed that the clock skew under the Elmore delay model has a high correlation with the actual (SPICE) skew. The same study also reported a poor correlation between the pathlength skew and the actual skew. <p> Later on, Cong and He <ref> [CoHe95, CoHe96a] </ref> extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. Wiresizing works in [CoLe93, CoLe95, CoHe95, CoHe96a] assumed that the wire widths are discrete and uniform within a wire segment or sub-segment. <p> Later on, Cong and He [CoHe95, CoHe96a] extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. Wiresizing works in <ref> [CoLe93, CoLe95, CoHe95, CoHe96a] </ref> assumed that the wire widths are discrete and uniform within a wire segment or sub-segment. <p> Note that the Elmore delay model is suitable for formulations that minimize the weighted sum of delays for current CMOS designs, since 44 it has high fidelity with respect to the SPICE-computed delay for the wire-sizing optimization, which is verified by the exper-iments in <ref> [CoHe96a] </ref> based on the 0.5 mm CMOS designs. On the other hand, in order to achieve the target delay or handle MCM designs, more accurate delay models are required as in [MePD94, XuKY96]. <p> More accurate and efficient delay models for interconnect optimization: Most of existing works on interconnect optimization are based on the Elmore delay model due to its simplicity, explicit representation of signal delay in terms of interconnect design parameters, and fairly high fidelity under the current fabrication technology <ref> [BoKM93, CoHe96a, CoKK95] </ref>. However, limitations of the Elmore delay model are well recognized as it cannot be used to characterize the signal waveform, handle interconnect inductance, and model frequency-dependent effects.
Reference: [CoHe96b] <author> J. Cong and L. </author> <title> He, Simultaneous Transistor and Interconnect Sizing Based on the General Dominance Property, </title> <booktitle> Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <month> April. </month> <note> 1996 (also available as UCLA Computer Science, Technical Report 95-00046). </note>
Reference-contexts: In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in <ref> [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c] </ref>. <p> RC meshes (non-tree interconnects) can be handled by the SQP method, again under the assumption that the delay formulation is near-posynomial. 4.3.3 Simultaneous Transistor and Wire Sizing Very recently, the simultaneous transistor and interconnect (wire) sizing (STIS) problem is formulated and solved by Cong and He <ref> [CoHe96b, CoHe96c] </ref>. In order to minimize the delay along multiple PI-PO paths, they propose to minimize the weighted combination of delays for all stages in these PI-PO paths by choosing the discrete or continuous transistor sizes and wire widths. <p> Let the optimization problem to minimize a simple/general CH-posynomial be a simple/general CH-posynomial program. After generalizing the concepts of local refinement operation and the dominance property in [CoLe95] (presented in Section 4.2.1.A), the authors of <ref> [CoHe96b, CoHe96c] </ref> showed the following important theorem: Theorem (Cong-He): The dominance property holds for both the simple and the general CH-posynomial programs. <p> The authors of <ref> [CoHe96b, CoHe96c] </ref> further show that the STIS problem is a CH-posynomial program under the RC tree model for interconnects and a number models for the transistors, including both simple analytical models or more accurate table-lookup based models obtained by detailed simulation to consider the effect of the waveform slope.
Reference: [CoHe96c] <author> J. Cong and L. </author> <title> He, An Efficient Approach to Simultaneous Transistor and Interconnect Sizing, </title> <booktitle> to appear in Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in <ref> [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c] </ref>. <p> RC meshes (non-tree interconnects) can be handled by the SQP method, again under the assumption that the delay formulation is near-posynomial. 4.3.3 Simultaneous Transistor and Wire Sizing Very recently, the simultaneous transistor and interconnect (wire) sizing (STIS) problem is formulated and solved by Cong and He <ref> [CoHe96b, CoHe96c] </ref>. In order to minimize the delay along multiple PI-PO paths, they propose to minimize the weighted combination of delays for all stages in these PI-PO paths by choosing the discrete or continuous transistor sizes and wire widths. <p> Let the optimization problem to minimize a simple/general CH-posynomial be a simple/general CH-posynomial program. After generalizing the concepts of local refinement operation and the dominance property in [CoLe95] (presented in Section 4.2.1.A), the authors of <ref> [CoHe96b, CoHe96c] </ref> showed the following important theorem: Theorem (Cong-He): The dominance property holds for both the simple and the general CH-posynomial programs. <p> The authors of <ref> [CoHe96b, CoHe96c] </ref> further show that the STIS problem is a CH-posynomial program under the RC tree model for interconnects and a number models for the transistors, including both simple analytical models or more accurate table-lookup based models obtained by detailed simulation to consider the effect of the waveform slope. <p> Device and interconnect sizing: The optimization problems in this area usually have well defined mathematical programming formulations. We feel that the sensitivity based heuristics, such as those used in [FiDu85, Sa94], and the local refinement technique based on the dominance property (and the bundled refinement property) used in <ref> [CoLe95, CoKo94, CoHe95, CoHe96c] </ref> are most efficient, produce good quality solutions, and scale up well with the rapid increasing of design complexity.
Reference: [CoKK95] <author> J. Cong, A. B. Kahng, C.-K. Koh and C.-W. A. Tsao, </author> <title> Bounded-Skew Clock and Steiner Routing Under Elmore Delay, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1995, </year> <pages> pp. 66-71. </pages>
Reference-contexts: Although the Elmore delay model is not accurate, it has a high degree of fidelity: an optimal or near-optimal solution according to the estimator is also nearly optimal according to actual (SPICE-computed [Na75]) delay for routing constructions [BoKM93] and wiresizing optimization [CoHe96a]. Simulations by <ref> [CoKK95] </ref> also showed that the clock skew under the Elmore delay model has a high correlation with the actual (SPICE) skew. The same study also reported a poor correlation between the pathlength skew and the actual skew. <p> The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. The methods in <ref> [CoKo95, HuKT95, CoKK95] </ref> address the bounded-skew tree (BST) construction problem under the pathlength and Elmore delay models by extending the DME algorithm for zero-skew tree to BST/DME algorithms by the enabling concept of a merging region, which generalizes the merging segment concept of [BoKa92, ChHH92a, Ed91] for zero-skew clock trees. <p> Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew <ref> [CoKK95] </ref>. For example, Figure 25 (a) plots HSPICE delay skew against path-length delay skew for routing trees generated by the Greedy-BST/DME algorithm under pathlength delay [CoKo95, HuKT95] on MCNC benchmark circuit r3 [Ts91]. <p> On the other hand, Figure 25 (b) demonstrates the accuracy and fidelity of Elmore delay skew to actual skew for routing trees constructed by the Greedy-BST/DME algorithm under Elmore delay <ref> [CoKK95] </ref>. Nevertheless, for completeness, we will discuss studies under both pathlength and Elmore delay models. The clock routing 54 solutions obtained by Greedy-BST/DME algorithm [CoKK95] under pathlength delay and Elmore delay for benchmark r3. problem under the pathlength problem is more tractable and theoretically interesting. <p> Figure 25 (b) demonstrates the accuracy and fidelity of Elmore delay skew to actual skew for routing trees constructed by the Greedy-BST/DME algorithm under Elmore delay <ref> [CoKK95] </ref>. Nevertheless, for completeness, we will discuss studies under both pathlength and Elmore delay models. The clock routing 54 solutions obtained by Greedy-BST/DME algorithm [CoKK95] under pathlength delay and Elmore delay for benchmark r3. problem under the pathlength problem is more tractable and theoretically interesting. Many important results are obtained under the pathlength delay model. <p> The enabling concept is that of a merging segment. The problem of bounded-skew embedding was first addressed independently by Cong and Koh [CoKo95], and Huang, Kahng, and Tsao [HuKT95] under the pathlength delay model. Cong et al. <ref> [CoKK95] </ref> later extended the works to handle bounded-skew embedding under the Elmore delay model. The BST/DME algorithms proposed by [CoKo95, HuKT95, CoKK95] generalize the merging segment concept and introduce merging region for bounded-skew embedding. <p> The problem of bounded-skew embedding was first addressed independently by Cong and Koh [CoKo95], and Huang, Kahng, and Tsao [HuKT95] under the pathlength delay model. Cong et al. [CoKK95] later extended the works to handle bounded-skew embedding under the Elmore delay model. The BST/DME algorithms proposed by <ref> [CoKo95, HuKT95, CoKK95] </ref> generalize the merging segment concept and introduce merging region for bounded-skew embedding. <p> The BST/DME algorithms proposed by [CoKo95, HuKT95, CoKK95] generalize the merging segment concept and introduce merging region for bounded-skew embedding. These embedding algorithms (both zero-skew and bounded-skew) can also be combined with bottom-up topology generation to produce clock trees with less routing costs <ref> [Ed92, CoKo95, HuKT95, CoKK95] </ref>. 5.2.1 Zero-Skew Embedding The key idea of the DME algorithm is the delayed embedding of internal nodes of the abstract topology [Ed91, ChHH92a, BoKa92]. <p> The results are marginally better than those produced by combining BB with DME. As we shall see in Section 5.2.3, further cost reduction can be obtained when we interleave topology generation with embedding. 61 5.2.2 Bounded-Skew Embedding While the DME algorithm considers only zero-skew, the BST/DME algorithms proposed by <ref> [CoKo95, HuKT95, CoKK95] </ref> consider bounded-skew clock routing. Similar to the DME algorithm for zero-skew tree, the BST/DME algorithms compute a bounded-skew routing tree (BST) for a prescribed topology in two phases: bottom-up and top-down. <p> Two approaches were proposed to construct the merging regions: (i) the Boundary Merging and Embedding (BME) method [CoKo95, HuKT95] and (ii) the Interior Merging and Embedding (IME) method <ref> [CoKK95] </ref>. We consider only the pathlength delay formulation as in [CoKo95, HuKT95]. Extension to the Elmore delay model can be found in [CoKK95]. Boundary Merging and Embedding (BME). <p> Two approaches were proposed to construct the merging regions: (i) the Boundary Merging and Embedding (BME) method [CoKo95, HuKT95] and (ii) the Interior Merging and Embedding (IME) method <ref> [CoKK95] </ref>. We consider only the pathlength delay formulation as in [CoKo95, HuKT95]. Extension to the Elmore delay model can be found in [CoKK95]. Boundary Merging and Embedding (BME). The BME method utilizes only the boundaries of merging regions to construct new regions: Given merging regions mr (a) and mr (b) of v's children, the merging region mr (v) is constructed by merging the nearest boundary segments of mr (a) and mr (b). <p> Although the IME method is expected to produce routing solutions with smaller costs when compared to solutions constructed by the BME method, this is not always the case as shown in the experimental results of <ref> [CoKK95] </ref>. However, this could be due to the use of small sampling sets (k = 5 and s = 7) with only Manhattan arcs as sampling segments in the experiment. IME performs marginally better than BME for fixed topology. <p> These methods interleave topology construction with merging segment computation using DME. The works by <ref> [CoKo95, HuKT95, CoKK95] </ref> adopt a similar approach to construct BSTs by interleaving topology construction with merging region computation using BME or IME. Greedy-DME. The most successful method in this class is the Greedy-DME method of Edahiro [Ed92], which determines the topology of the merging tree in a greedy bottom-up fashion. <p> In fact, it very closely matches the performance of the best-known heuristics for both the zero-skew [Ed93a, Ed94] and infinite-skew limiting cases, i.e. Steiner routing (Section 3.1.2). For realistic skew bounds in the range of 0ps to 150ps, the Greedy-BST/DME algorithms in <ref> [CoKK95] </ref> averages 26.6% wirelength reduction when compared to the best reported zero-skew solutions by the CL+I6 algorithm in [Ed93a]. 5.3 Planar Clock Routing It is preferable to route clock nets on the metal layer with the smallest RC delay since this avoids the use of vias in the clock net and <p> Extensive studies of the clock routing problem in the past few years have made much advance on automating high-performance clock net synthesis. The bottom-up construction methods using the DME technique (e.g., <ref> [Ed91, ChHH92a, BoKa92, CoKK95, ViMa95] </ref>) are most promising in terms of efficiency, flexibility, and the solution quality. Most existing approaches first produce a balanced routing topology and then perform buffer insertion, buffer and wire sizing. <p> More accurate and efficient delay models for interconnect optimization: Most of existing works on interconnect optimization are based on the Elmore delay model due to its simplicity, explicit representation of signal delay in terms of interconnect design parameters, and fairly high fidelity under the current fabrication technology <ref> [BoKM93, CoHe96a, CoKK95] </ref>. However, limitations of the Elmore delay model are well recognized as it cannot be used to characterize the signal waveform, handle interconnect inductance, and model frequency-dependent effects.
Reference: [CoKR91] <author> J. Cong, A. B. Kahng, and G. Robins, </author> <title> On Clock Routing for General Cell Layouts, </title> <booktitle> Proc. IEEE Int'l ASIC Conf., </booktitle> <month> Sep. </month> <year> 1991, </year> <pages> pp. </pages> <month> 14:5.1-14:5.4. </month>
Reference-contexts: It constructs a routing tree by iteratively joining pairs of subtrees which are close, and can handle cell-based design with asymmetric distributions of clock pins and general-cell design <ref> [CoKR91, CoKR93] </ref>. The KCR algorithm starts with a set S of trees, each containing a single sink of the clock net.
Reference: [CoKR91b] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> Performance-Driven Global Routing for Cell Based ICs, </title> <booktitle> IEEE Int. Conf. Computer Design, </booktitle> <year> 1991, </year> <pages> pp. 170-173. </pages>
Reference-contexts: While the MPT algorithm provides a measure of control over the tradeoff between path length and tree length, a number of authors have attempted to refine this control. Some algorithms are able to bound the maximum tree length, the maximum path length, or both, with constant factors. In <ref> [CoKR91b] </ref>, Cong et al. proposed an extension of Prim's MST algorithm known as Bounded Prim (BPRIM). This algorithm bounds radius by using a shortest path connection for a sink when the MST edge normally selected would result in a radius in excess of a specified performance bound.
Reference: [CoKR93] <author> J. Cong, A. B. Kahng, and G. Robins, </author> <title> Matching-Based Methods for High-Performance Clock Routing, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 12(8), </volume> <month> Aug. </month> <year> 1993, </year> <pages> pp. 1157-1169. </pages>
Reference-contexts: It relies on the embedding algorithm to be presented in Section 5.2 to embed the abstract topology generated. 5.1.2 Bottom-Up Topology Generation In contrast to the top-down approaches of [JaSK90, ChHH92b], the KCR geometric matching algorithm was proposed by Kahng, Cong, and Robins <ref> [KaCR91, CoKR93] </ref> as the first bottom-up approach for clock tree abstract topology generation. It constructs a routing tree by iteratively joining pairs of subtrees which are close, and can handle cell-based design with asymmetric distributions of clock pins and general-cell design [CoKR91, CoKR93]. <p> It constructs a routing tree by iteratively joining pairs of subtrees which are close, and can handle cell-based design with asymmetric distributions of clock pins and general-cell design <ref> [CoKR91, CoKR93] </ref>. The KCR algorithm starts with a set S of trees, each containing a single sink of the clock net. <p> The time complexity of the KCR algorithm is O (M logn) where M is the time complexity of the matching algorithm. To solve problems of practical interest, efficient matching algorithms are chosen over optimal matching algorithm. Several efficient heuristic matching algorithms that were recommended by <ref> [CoKR93] </ref>. However, heuristic matching algorithms may produce a matching with crossing edges. In the KCR algorithm, intersecting edges in such a matching are uncrossed to reduce routing cost. <p> Via zero-skew merges, jKj=k nearest-neighbor pairs are taken from the graph in non-decreasing order of distance, where k is a constant typically between 2 and 4. In some respects, this approach is similar to the KCR algorithm in which a matching is computed in each iteration <ref> [CoKR93] </ref>. The solution is further improved by a post-processing local search that adjusts the resulting topology (cf. CL+I6 in [Ed93a]). Greedy-DME achieves 20% reduction in wiring cost compared with the results which were obtained by using BB followed by DME [ChHH92a].
Reference: [CoKR92] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> Provably Good Performance-Driven Global Routing, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 11(6), </volume> <month> June </month> <year> 1992, </year> <pages> pp. 739-752. </pages>
Reference-contexts: The e parameter may be adjusted freely, allowing a preference for either tree length or diameter. The Bounded Radius Bounded Cost (BRBC) spanning tree of <ref> [CoKR92] </ref> uses the shallow-light approach, and works as fol lows. 1. Construct an MST T M and an SPT T S for the graph. 2. Perform a depth-first traversal of T M . This traversal defines a tour of the tree, and each edge is traversed exactly twice. 3.
Reference: [CoKL96] <author> J. Cong, C.-K. Koh, and K.-S. Leung, </author> <title> Simultaneous Buffer and Wire Sizing for Performance and Power Optimization, </title> <booktitle> Proc. Int'l Symp. on Low Power Electronics and Design, </booktitle> <month> August </month> <year> 1996, </year> <pages> pp. 271-276. </pages>
Reference-contexts: Accurate SPICE simulation shows that the method reduces the delay by up to 12%-49% and power dissipation by 26%-63% compared with existing design methods. Very recently, Cong, Koh, and Leung <ref> [CoKL96] </ref> extended the work on SDWS to handle driver/buffer and wire sizing for buffered interconnects. <p> Accurate SPICE simulation shows that the method reduces the delay by up to 12%-49% and power dissipation by 26%-63% compared with existing design methods. Very recently, Cong, Koh, and Leung [CoKL96] extended the work on SDWS to handle driver/buffer and wire sizing for buffered interconnects. However, both <ref> [CoKo94, CoKL96] </ref> do not consider the waveform slope effect during the computation of the optimal driver/buffer sizes. 4.3.2 Simultaneous Gate and Wire Sizing Recently, Menezes et al. [MePP95, MeBP95] studied the simultaneous gate and wire sizing problem for different objectives: to achieve the target delays in [MePP95], and to find the
Reference: [CoKo95] <author> J. Cong and C.-K. Koh, </author> <title> Minimum-Cost Bounded-Skew Clock Routing, </title> <booktitle> Proc. IEEE Int'l Symp. on Circuits and Systems, Apr. 1995, </booktitle> <volume> vol. 1, </volume> <pages> pp. 215-218. </pages>
Reference-contexts: The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. The methods in <ref> [CoKo95, HuKT95, CoKK95] </ref> address the bounded-skew tree (BST) construction problem under the pathlength and Elmore delay models by extending the DME algorithm for zero-skew tree to BST/DME algorithms by the enabling concept of a merging region, which generalizes the merging segment concept of [BoKa92, ChHH92a, Ed91] for zero-skew clock trees. <p> In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. For example, Figure 25 (a) plots HSPICE delay skew against path-length delay skew for routing trees generated by the Greedy-BST/DME algorithm under pathlength delay <ref> [CoKo95, HuKT95] </ref> on MCNC benchmark circuit r3 [Ts91]. Not only is the correlation poor, but the pathlength-based BST solutions simply cannot meet tight skew bounds (of 100ps or less). <p> The enabling concept is that of a merging segment. The problem of bounded-skew embedding was first addressed independently by Cong and Koh <ref> [CoKo95] </ref>, and Huang, Kahng, and Tsao [HuKT95] under the pathlength delay model. Cong et al. [CoKK95] later extended the works to handle bounded-skew embedding under the Elmore delay model. The BST/DME algorithms proposed by [CoKo95, HuKT95, CoKK95] generalize the merging segment concept and introduce merging region for bounded-skew embedding. <p> The problem of bounded-skew embedding was first addressed independently by Cong and Koh [CoKo95], and Huang, Kahng, and Tsao [HuKT95] under the pathlength delay model. Cong et al. [CoKK95] later extended the works to handle bounded-skew embedding under the Elmore delay model. The BST/DME algorithms proposed by <ref> [CoKo95, HuKT95, CoKK95] </ref> generalize the merging segment concept and introduce merging region for bounded-skew embedding. <p> The BST/DME algorithms proposed by [CoKo95, HuKT95, CoKK95] generalize the merging segment concept and introduce merging region for bounded-skew embedding. These embedding algorithms (both zero-skew and bounded-skew) can also be combined with bottom-up topology generation to produce clock trees with less routing costs <ref> [Ed92, CoKo95, HuKT95, CoKK95] </ref>. 5.2.1 Zero-Skew Embedding The key idea of the DME algorithm is the delayed embedding of internal nodes of the abstract topology [Ed91, ChHH92a, BoKa92]. <p> The results are marginally better than those produced by combining BB with DME. As we shall see in Section 5.2.3, further cost reduction can be obtained when we interleave topology generation with embedding. 61 5.2.2 Bounded-Skew Embedding While the DME algorithm considers only zero-skew, the BST/DME algorithms proposed by <ref> [CoKo95, HuKT95, CoKK95] </ref> consider bounded-skew clock routing. Similar to the DME algorithm for zero-skew tree, the BST/DME algorithms compute a bounded-skew routing tree (BST) for a prescribed topology in two phases: bottom-up and top-down. <p> Note that in (b) the merging segments are depicted by dashed lines, and in (c) the merging regions are depicted by shaded polygons. Two approaches were proposed to construct the merging regions: (i) the Boundary Merging and Embedding (BME) method <ref> [CoKo95, HuKT95] </ref> and (ii) the Interior Merging and Embedding (IME) method [CoKK95]. We consider only the pathlength delay formulation as in [CoKo95, HuKT95]. Extension to the Elmore delay model can be found in [CoKK95]. Boundary Merging and Embedding (BME). <p> Two approaches were proposed to construct the merging regions: (i) the Boundary Merging and Embedding (BME) method <ref> [CoKo95, HuKT95] </ref> and (ii) the Interior Merging and Embedding (IME) method [CoKK95]. We consider only the pathlength delay formulation as in [CoKo95, HuKT95]. Extension to the Elmore delay model can be found in [CoKK95]. Boundary Merging and Embedding (BME). <p> These methods interleave topology construction with merging segment computation using DME. The works by <ref> [CoKo95, HuKT95, CoKK95] </ref> adopt a similar approach to construct BSTs by interleaving topology construction with merging region computation using BME or IME. Greedy-DME. The most successful method in this class is the Greedy-DME method of Edahiro [Ed92], which determines the topology of the merging tree in a greedy bottom-up fashion. <p> Then the tree topology is adjusted accordingly by adding, deleting, and redirecting some edges. The costs of the two subtrees may increase but the overall cost of the tree after merging may be better. Merging with non-root nodes is a powerful topology generation method. The work by <ref> [CoKo95] </ref> is a simple extension of Greedy-DME, i.e., it considers merging of root nodes only. The wirelength reduction averages 19% when the allowed skew increases from 0 to . <p> The UST heuristic has been evaluated using three ISCAS89 benchmark circuits [BrBK89] and two industry circuits. In all but one case, the UST algorithm uses less wirelength when compared to the Greedy-BST/DME <ref> [CoKo95, HuKT95] </ref> and BB+DME algorithms [ChHH92b]. For each circuit, the skew bound for BST construction [CoKo95, HuKT95] is set to be the smallest skew bound of all sink pairs. <p> The UST heuristic has been evaluated using three ISCAS89 benchmark circuits [BrBK89] and two industry circuits. In all but one case, the UST algorithm uses less wirelength when compared to the Greedy-BST/DME <ref> [CoKo95, HuKT95] </ref> and BB+DME algorithms [ChHH92b]. For each circuit, the skew bound for BST construction [CoKo95, HuKT95] is set to be the smallest skew bound of all sink pairs. To compare the impact of a UST on power dissipation, [XiDa96] also performed gate sizing with bounded (zero) skew after a BST (ZST) was constructed.
Reference: [CoKo94] <author> J. Cong and C.-K. Koh, </author> <title> Simultaneous Driver and Wire Sizing for Performance and Power Optimization, </title> <journal> IEEE Trans. on Very Large Scale Integration (VLSI) Systems, </journal> <volume> 2(4), </volume> <month> December </month> <year> 1994, </year> <pages> pp. 408-423. 89 </pages>
Reference-contexts: case of each wire segment modeled as a p-type circuit as in Figure 2 (b), we can write the Elmore delay from the source to sink s i in terms of the geometry of the interconnect, i.e., jej and w e , and the parasitics of the interconnect as follows <ref> [CoLe95, CoKo94] </ref>: t (s 0 ; s i ) = e v 2Path (s 0 ;s i ) r e v (c e v =2 + Cap (v)) 1 In general, the x% delay, denoted t x , is the delay time for the signal to reach x% of V DD <p> In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in <ref> [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c] </ref>. <p> C. Discrete Wiresizing Using Variable Segment-Division An assumption is made for wire-sizing algorithms presented in Subsections 4.2.1.A and 4.2.1.B that the wire width does not change within a segment. Intuitively, better wire-sizing solutions may be achieved when variable wire width is allowed within a segment. In <ref> [CoKo94] </ref>, a segment is further divided into a sequence of grid-edges with a unit length and the wire width is allowed to change every grid-edge. The fine and uniform segment-division, however, may result in high memory usage and computation time. <p> In addition to replacing the GWSA algorithm in both the single-source and multi-source wire-sizing problems, the BWSA algorithm can be used in the simultaneous driver and wire sizing problem <ref> [CoKo94] </ref> to be presented in Section 4.3.1. D. Continuous and Non-uniform Wiresizing for Single-Source RC Tree Another alternative to achieve non-uniform wire width within a segment is the optimal wire-sizing formula proposed in [ChCW96b] very recently. Let f (x) be the wire width at position x of a wire segment. <p> As a result, a number of recent studies size both devices and interconnects simultaneously. These methods will be discussed in this subsection. 4.3.1 Simultaneous Driver and Wire Sizing The simultaneous driver and wire sizing problem for delay minimization (SDWS/D problem) was studied in <ref> [CoKo94] </ref>. The switch-level model is used for a driver and both the gate and the drain (output) capacitances of the transistor are taken into account, while the interconnect tree is modeled by a distributed RC tree as was used in [CoLe95]. <p> The objective function is to minimize the summation of the delay for cascaded drivers and the weighted delay for the RC tree. The SDWS/D algorithm is based on the following important relation between the driver size and the optimal wire sizing: Driver and Wire Sizing Relation <ref> [CoKo94] </ref>: Let R d be the effective resistance for the last stage driver and W fl be the optimal wire sizing solution for driver resistance R d . <p> Note that the BWSA algorithm [CoHe95] presented in Section 4.2.1.C can be used to greatly speed-up the computation of the optimal wiresizing solution. The simultaneous driver and wire sizing problem for power minimization was also studied in <ref> [CoKo94] </ref> and the efficient optimal algorithm was developed. Accurate SPICE simulation shows that the method reduces the delay by up to 12%-49% and power dissipation by 26%-63% compared with existing design methods. <p> Accurate SPICE simulation shows that the method reduces the delay by up to 12%-49% and power dissipation by 26%-63% compared with existing design methods. Very recently, Cong, Koh, and Leung [CoKL96] extended the work on SDWS to handle driver/buffer and wire sizing for buffered interconnects. However, both <ref> [CoKo94, CoKL96] </ref> do not consider the waveform slope effect during the computation of the optimal driver/buffer sizes. 4.3.2 Simultaneous Gate and Wire Sizing Recently, Menezes et al. [MePP95, MeBP95] studied the simultaneous gate and wire sizing problem for different objectives: to achieve the target delays in [MePP95], and to find the <p> Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation. The algorithm minimizes clock skew by iteratively assigning appropriate weights (or Lagrangian multipliers) to sinks and performing device and wire sizing based on a weighted-sum formulation similar to those in <ref> [CoLe95, CoKo94, BoKR93] </ref>. <p> Device and interconnect sizing: The optimization problems in this area usually have well defined mathematical programming formulations. We feel that the sensitivity based heuristics, such as those used in [FiDu85, Sa94], and the local refinement technique based on the dominance property (and the bundled refinement property) used in <ref> [CoLe95, CoKo94, CoHe95, CoHe96c] </ref> are most efficient, produce good quality solutions, and scale up well with the rapid increasing of design complexity. <p> The initial device and interconnect sizing solutions can be computed using a simple switch-level driver model and Elmore delay model as in <ref> [FiDu85, CoLe95, CoKo94] </ref> and then more accurate driver and interconnect models, such as those used in [MePP95, MeBP95] can be applied to further refine the solution for performance and area optimization. 3.
Reference: [CoLe93] <author> J. Cong and K. S. Leung, </author> <title> Optimal Wiresizing Under the Distributed Elmore Delay Model, </title> <booktitle> Proc. Int'l. Conf. on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 634-639. </pages>
Reference-contexts: Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). Later on, single-source wire-sizing algorithms were presented in <ref> [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] </ref> using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. <p> them in Sections 4.2.1 and 4.2.2, and then discuss the simultaneous device and wire sizing in Section 4.3. 4.2.1 Wiresizing to Minimize Weighted Delay In order to reduce the delays to multiple critical sinks in an interconnect tree with a single source, the wire-sizing algorithms given by Cong and Leung <ref> [CoLe93, CoLe95] </ref> minimize a weighted combination of Elmore delays from the single source to multiple critical sinks. Later on, Cong and He [CoHe95, CoHe96a] extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. <p> Later on, Cong and He [CoHe95, CoHe96a] extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. Wiresizing works in <ref> [CoLe93, CoLe95, CoHe95, CoHe96a] </ref> assumed that the wire widths are discrete and uniform within a wire segment or sub-segment. <p> In addition, they developed the first polynomial-time optimal wire-sizing algorithm. Since the uniform upper bound delay model does not distinguish the delays at different sinks and may lead to over-sizing, Cong and Leung <ref> [CoLe93, CoLe95] </ref> extended the work to the Elmore delay formulation of Eqn. (3). Their formulation and method are summarized as follows. <p> A. Single-Source RC Tree under Elmore Delay Model Sapatnekar [Sa94] studied the wire-sizing problem to minimize the maximum delay under the Elmore delay formulation of Eqn. (3). First, he showed that the separability no longer holds for minimizing the maximum delay. So, the dynamic programming based approach in <ref> [CoLZ93, CoLe93] </ref> does not apply. <p> They combine the Elmore Routing Tree (ERT) algorithm [BoKR93] (Section 3.3) and the GWSA algorithm <ref> [CoLe93] </ref> (Section 4.2.1) as follows: starting with a degenerate tree initially consisting of only the source pin, grow the tree at each step by finding a new pin to connect to the tree in order to minimize the Elmore delay in the current wiresized topology.
Reference: [CoLe95] <author> J. Cong and K. S. Leung, </author> <title> Optimal Wiresizing Under the Distributed Elmore Delay Model, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 14(3), </volume> <month> March </month> <year> 1995, </year> <pages> pp. 321-336. </pages>
Reference-contexts: case of each wire segment modeled as a p-type circuit as in Figure 2 (b), we can write the Elmore delay from the source to sink s i in terms of the geometry of the interconnect, i.e., jej and w e , and the parasitics of the interconnect as follows <ref> [CoLe95, CoKo94] </ref>: t (s 0 ; s i ) = e v 2Path (s 0 ;s i ) r e v (c e v =2 + Cap (v)) 1 In general, the x% delay, denoted t x , is the delay time for the signal to reach x% of V DD <p> The above algebraic expression allows analysis of how topology and wire widths affect Elmore delay, which leads to interconnect topology optimization algorithms such as [BoKR93, BoKM94] and wiresizing algorithms such as <ref> [CoLe95, Sa94, CoHe95] </ref>. The approximation of the 50% signal delay by the Elmore delay is exact only for a symmetrical impulse response, where the mean is equal to the median [GuTK95]. <p> Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). Later on, single-source wire-sizing algorithms were presented in <ref> [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] </ref> using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. <p> them in Sections 4.2.1 and 4.2.2, and then discuss the simultaneous device and wire sizing in Section 4.3. 4.2.1 Wiresizing to Minimize Weighted Delay In order to reduce the delays to multiple critical sinks in an interconnect tree with a single source, the wire-sizing algorithms given by Cong and Leung <ref> [CoLe93, CoLe95] </ref> minimize a weighted combination of Elmore delays from the single source to multiple critical sinks. Later on, Cong and He [CoHe95, CoHe96a] extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. <p> Later on, Cong and He [CoHe95, CoHe96a] extended this formulation to the multiple-source net case, where the objective is to minimize the weighted combination of Elmore delays between multiple source-sink pairs. Wiresizing works in <ref> [CoLe93, CoLe95, CoHe95, CoHe96a] </ref> assumed that the wire widths are discrete and uniform within a wire segment or sub-segment. <p> In addition, they developed the first polynomial-time optimal wire-sizing algorithm. Since the uniform upper bound delay model does not distinguish the delays at different sinks and may lead to over-sizing, Cong and Leung <ref> [CoLe93, CoLe95] </ref> extended the work to the Elmore delay formulation of Eqn. (3). Their formulation and method are summarized as follows. <p> The larger l i , the more critical sink s i is. The following monotone property and separability were shown in <ref> [CoLe95] </ref>. Monotone Property: Given a routing tree, there exists an optimal wire-sizing solution W such that w e w e 0 if segment e 2 Ans (e 0 ) . <p> The following dominance property was shown in <ref> [CoLe95] </ref> Dominance Property: Suppose that W fl is an optimal wire-sizing solution. If a wire-sizing solution W dominates W fl , then any local refinement of W still dominates W fl . <p> LST Monotone Property: For an MSIT, there exists an optimal wire-sizing solution W fl where the wire widths decrease monotonically rightward within each LST in the MSIT. Because of the two properties, the polynomial-time OWSA algorithm developed for single-source wire-sizing in <ref> [CoLe95] </ref> can be applied to compute the optimal wire widths independently for each LST when given the wire width assignments for the SST. Furthermore, the authors of [CoHe95] proved that the MSWS problem has the dominance property presented in Section 4.2.1.A. Thus, the GWSA algorithm, again developed in [CoLe95] for the <p> wire-sizing in <ref> [CoLe95] </ref> can be applied to compute the optimal wire widths independently for each LST when given the wire width assignments for the SST. Furthermore, the authors of [CoHe95] proved that the MSWS problem has the dominance property presented in Section 4.2.1.A. Thus, the GWSA algorithm, again developed in [CoLe95] for the single-source wire-sizing problem, can be applied to compute the lower and upper bounds for the optimal solution of the MSWS problem. <p> However, it did not model the fringing capacitance. In order to apply the optimal wire-sizing formula to a routing tree, the authors propose to minimize the weighted combination of Elmore delays from the source to multiple sinks. A procedure like the GWSA algorithm developed in <ref> [CoLe95] </ref> is used. First, the minimum wire width is assigned to every segment. Then, the optimal wire-sizing formula is iteratively applied to each wire segment until no improvement can be achieved. <p> The switch-level model is used for a driver and both the gate and the drain (output) capacitances of the transistor are taken into account, while the interconnect tree is modeled by a distributed RC tree as was used in <ref> [CoLe95] </ref>. The objective function is to minimize the summation of the delay for cascaded drivers and the weighted delay for the RC tree. <p> First, the algorithm starts with the minimum wire width assignment and computes the capacitive load of the routing tree. Then, it computes the optimal sizes of the k cascaded drivers based on Lin-Linholm Theorem in Section 4.1.1. Next, the optimal wiresizing algorithms (GWSA followed by OWSA) developed in <ref> [CoLe95] </ref> are performed on the routing tree based on the effective resistance of the last driver. If the wire width assignment changes, the new driver sizes are obtained according to Lin-Linholm Theorem. <p> Let the optimization problem to minimize a simple/general CH-posynomial be a simple/general CH-posynomial program. After generalizing the concepts of local refinement operation and the dominance property in <ref> [CoLe95] </ref> (presented in Section 4.2.1.A), the authors of [CoHe96b, CoHe96c] showed the following important theorem: Theorem (Cong-He): The dominance property holds for both the simple and the general CH-posynomial programs. <p> The theorem provides an easy way to verify the dominance property for both the single-source and the multi-source wiresiz-ing problems in <ref> [CoLe95] </ref> and [CoHe95], respectively, since both objective functions are instances of the simple CH-posynomial. Furthermore, the theorem leads to efficient algorithms, for example, the generalizations of the GWSA algorithm [CoLe95] or the BWSA algorithm [CoHe95], to compute a set of lower and upper bounds of the optimal solution to a CH-posynomial <p> The theorem provides an easy way to verify the dominance property for both the single-source and the multi-source wiresiz-ing problems in <ref> [CoLe95] </ref> and [CoHe95], respectively, since both objective functions are instances of the simple CH-posynomial. Furthermore, the theorem leads to efficient algorithms, for example, the generalizations of the GWSA algorithm [CoLe95] or the BWSA algorithm [CoHe95], to compute a set of lower and upper bounds of the optimal solution to a CH-posynomial program by the local refinement operation and the bundled refinement operation very efficiently (in polynomial time). <p> Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation. The algorithm minimizes clock skew by iteratively assigning appropriate weights (or Lagrangian multipliers) to sinks and performing device and wire sizing based on a weighted-sum formulation similar to those in <ref> [CoLe95, CoKo94, BoKR93] </ref>. <p> Device and interconnect sizing: The optimization problems in this area usually have well defined mathematical programming formulations. We feel that the sensitivity based heuristics, such as those used in [FiDu85, Sa94], and the local refinement technique based on the dominance property (and the bundled refinement property) used in <ref> [CoLe95, CoKo94, CoHe95, CoHe96c] </ref> are most efficient, produce good quality solutions, and scale up well with the rapid increasing of design complexity. <p> The initial device and interconnect sizing solutions can be computed using a simple switch-level driver model and Elmore delay model as in <ref> [FiDu85, CoLe95, CoKo94] </ref> and then more accurate driver and interconnect models, such as those used in [MePP95, MeBP95] can be applied to further refine the solution for performance and area optimization. 3.
Reference: [CoLZ93] <author> J. Cong, K. S. Leung, and D. Zhou, </author> <title> Performance-Driven Interconnect Design Based on Distributed RC Delay Model, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 606-611. </pages>
Reference-contexts: Wire length minimization is of interest for the following reasons. * When the wire resistance is negligible compared to the driver resistance, minimization of total wire capacitance (and hence, net wire length) provides near optimal performance with respect to delay <ref> [CoLZ93] </ref>. 16 * Even when wire resistance is considered, the total wire capacitance still contributes a significant factor to interconnect delay [CoLZ93]. * Interconnect wiring contributes to circuit area. <p> When the wire resistance is negligible compared to the driver resistance, minimization of total wire capacitance (and hence, net wire length) provides near optimal performance with respect to delay <ref> [CoLZ93] </ref>. 16 * Even when wire resistance is considered, the total wire capacitance still contributes a significant factor to interconnect delay [CoLZ93]. * Interconnect wiring contributes to circuit area. Reduction of wire length reduces circuit area, lowering manufacturing costs and increasing fabrication yield. * Wire capacitance contributes significantly to switching power. Reduction of wire length also reduces power consumption and the amount of energy to be dissipated. <p> While this clearly minimizes path resistances, we also want to minimize the total tree capacitance. Cong, Leung, and Zhou <ref> [CoLZ93] </ref> showed that a minimum-cost shortest path tree is very useful for delay minimization. <p> Similarly, we can restrict the tree to the y-axis for values c 0 d. By considering the single quadrant solutions given various values of a, b, c, and d, and then finding the best performing combination, their heuristic constructs a tree in O (n 3 logn) time. In <ref> [CoLZ93] </ref>, Cong, Leung, and Zhou also addressed the construction of rectilinear Steiner arboresences, and presented the A-Tree algorithm. The A-tree algorithm constructs trees by starting with a forest of points (the source and all sinks), and then iteratively merges subtrees until all components are connected. <p> The A-tree algorithm constructs trees by starting with a forest of points (the source and all sinks), and then iteratively merges subtrees until all components are connected. In addition to the merging operation used in [RaSH92], the authors of <ref> [CoLZ93] </ref> identify three types of safe moves for optimal merging at each step. In other words, the safe merge moves preserve the tree length optimality during the construction process; if only safe moves are applied, the resulting tree will have optimal length. The A-Tree algorithm applies safe moves whenever possible. <p> Straight forward computation of the FR takes O (n 2 ) time by intersecting O (n 2 ) OEs; a linear time method to construct the FR was presented in [CoMa95b]. The authors use the A-Tree algorithm <ref> [CoLZ93] </ref> to construct a shortest path tree T from a root point within the FR to the pins of the net. <p> complexity of the algorithm is O ((N + B) 2 + k), where N is the total number of legal positions for buffer insertion, B the total number of buffer types and k the total number of sinks. 4.2 Wiresizing Optimization It was first shown by Cong, Leung, and Zhou <ref> [CoLZ93] </ref> that when wire resistance becomes significant, as in the deep submi-cron CMOS design, proper wire-sizing can further reduce the interconnect delay. Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). <p> All these works assume that the weights of the delay penalty between the source and each sink or each source-sink pair are given a prior. A. Discrete Wiresizing for Single-Source RC Tree In <ref> [CoLZ93] </ref>, Cong, Leung and Zhou modeled an interconnect tree as a distributed RC tree and applied the upper-bound delay model shown in Eqn. (1). <p> A. Single-Source RC Tree under Elmore Delay Model Sapatnekar [Sa94] studied the wire-sizing problem to minimize the maximum delay under the Elmore delay formulation of Eqn. (3). First, he showed that the separability no longer holds for minimizing the maximum delay. So, the dynamic programming based approach in <ref> [CoLZ93, CoLe93] </ref> does not apply. <p> The following techniques are combined to develop a wiresized buffered A-tree (WBA-tree) algorithm: the A-tree algorithm for tree construction <ref> [CoLZ93] </ref>, the simultaneous buffer insertion and wiresizing algorithm [va90, LiCL95], critical path isolation, and a balanced load decomposition used in logic synthesis. <p> As in the buffer insertion algorithm of [va90] (Section 4.1.3), the WBA algorithm include two phases: the bottom-up synthesis procedure and the top-down selection procedure. Similar definitions of the option and the pruning rule are used. Recall the heuristic move in the A-tree algorithm <ref> [CoLZ93] </ref> merges subtrees recursively in the bottom-up manner, starting from the set of subtrees, each containing a single sink. <p> Meanwhile, we want to minimize the total wire length, intuitively, we wish that D vw is as large as possible. Note that, when a = 0, it is equivalent to the heuristic move in <ref> [CoLZ93] </ref>. The option computation and pruning can be carried out in a manner similar to [va90, LiCL95] after each merging of T v and T w . Overall, after the bottom-up synthesis procedure to construct tree and compute options, the top-down selection procedure is invoked. <p> In this section, we would like to offer a brief summary with our assessment of various interconnect optimization techniques presented in this paper, and suggest directions for future research. 1. Interconnect topology optimization: We feel that geometric based Steiner tree algorithms such as the A-tree <ref> [CoLZ93] </ref>, Alphabetic Tree [ViMa94], P-Tree [LiCL96b] algorithms usually provide a good initial routing topology. These algorithms use the right level of abstraction and can be incorporated in a global router efficiently.
Reference: [CoMa95] <author> J. Cong and P. H. Madden, </author> <title> Performance Driven Routing with Multiple Sources, </title> <booktitle> Proc. Int'l Symp. on Circuits and Systems, </booktitle> <year> 1995, </year> <pages> pp. 1157-1169. </pages>
Reference-contexts: An example of such an instance is shown in Figure 15. A method proposed by Cong and Madden <ref> [CoMa95] </ref> constructs interconnect topologies which limit the maximum path length between any pair of pins to the diameter of the net, while using minimal total wire length. <p> For the Euclidean metric, Ho et al.[HLCW89] presented a method to construct a minimum diameter tree. They determine the smallest enclosing circle for the point set, and then construct a shortest path tree from the center of this circle. The method of <ref> [CoMa95] </ref> follows a similar approach. For the rectilinear metric, determination of the equivalent of the smallest enclosing circle is simple. A tilted rectangular region (TRR) is defined to be a rectangle with sides having slopes of 1. <p> By constructing a shortest-path tree rooted at c, any path from s i to s j will clearly have length no greater than D. It was noted in <ref> [CoMa95] </ref> that the feasible position for the root c of a minimum diameter rectilinear tree is not unique, and that the constraint d (c; s i ) D 2 is overly restrictive.
Reference: [CoMa95b] <author> J. Cong and P. H. Madden, </author> <title> Performance Driven Routing with Multiple Sources, </title> <type> Tech. Rep. </type> <institution> CSD-950002, UCLA, </institution> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: Figure 16 shows the octilinear ellipses for a set of points, and their intersection which results in the FR. Straight forward computation of the FR takes O (n 2 ) time by intersecting O (n 2 ) OEs; a linear time method to construct the FR was presented in <ref> [CoMa95b] </ref>. The authors use the A-Tree algorithm [CoLZ93] to construct a shortest path tree T from a root point within the FR to the pins of the net.
Reference: [CoPr88] <author> J. Cong and B. Preas, </author> <title> A New Algorithm for Standard Cell Global Routing, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1988, </year> <pages> pp. 176-179. </pages>
Reference-contexts: Also, timing requirements are usually given in terms of path delay constraints. One needs to either develop efficient algorithms to allocate the timing budget to each net along a path or be able to optimize multiple nets on a path simultaneously. Most well-known global routers, such as <ref> [LeSe88, CoPr88, CaCh91] </ref>, did not consider timing optimization during global routing. Existing methods on delay budgeting, such as [NaBH89, Fr92a, TeKS96], were mainly developed for circuit placement and their applicability to global routing is yet to be demonstrated.
Reference: [DaAs89] <author> Z. Dai and K. Asada, MOSIZ: </author> <title> A Two-Step Transistor Sizing Algorithm Based on Optimal Timing Assignment Method for Multi-stage Complex Gates, </title> <booktitle> Proc. 1989 Custom Integrated Circuits Conf., </booktitle> <pages> pp. 17. 3. 1-17. 3. 4, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Studies have been done to formulate the transistor sizing problem as mathematical programming problems to obtain an optimal solution. Methods in [Ci87, He87, Ma86] formulate the transistor sizing problem as nonlinear programs and solve them by the method of Lagrangian multipliers. Methods in <ref> [DaAs89, HeFi91, ChKa91] </ref> apply the following two-step iterations. First, the delay budget is distributed to each gate; Then, the transistors in each gate are sized optimally to satisfy the time budget.
Reference: [DaKJ90] <author> W. M. Dai, R. Kong, J. Jue, and M. Sato, </author> <title> Rubber Band Routing and Dynamic Data Representation, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1990, </year> <pages> pp. 52-55. </pages>
Reference-contexts: The traditional routing technology developed for two routing layers based on channel routers is becoming obsolete, and multi-layer general area routers are needed to handle over-the-cell routing efficiently. Most of existing works on general area routing, such as those in <ref> [LiHT89, KaSS90, DaKJ90, KhCo95] </ref>, were developed for the two-layer routing technology, and they cannot handle gridless routing. Therefore, in order to support the interconnect optimization techniques presented in this paper, one needs to develop efficient algorithms for multi-layer general-area gridless routing.
Reference: [DaMQ94] <author> F. Dartu, N. Menezes, J. Qian, and L. T. Pillage, </author> <title> A Gate-Delay Model for High-Speed CMOS Circuits, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1994, </year> <pages> pp. 576-580. </pages>
Reference-contexts: Meanwhile, all transistors in a gate are assumed to scale by the same factor, which allows that a gate can be described by its width w g . The gate is modeled by the single-resistor voltage-ramp model as proposed in <ref> [DaMQ94] </ref> (see Figure 6), which can accurately estimate the driver delay as well as output waveform slope. <p> A q-pole transfer function is used and the sensitivity computation of the poles and residues is conducted during the SQP procedure. Finally, the driver is modeled by the more accurate single-resistor voltage-ramp model <ref> [DaMQ94] </ref>. Again, the near-posynomial is assumed for path delay and the SQP method is applied. The sizing results showed that the fixed-resistance driver model could lead to undersized solutions.
Reference: [DeCJ96] <author> M. P. Desai, R. Cvijetic, and J. Jensen, </author> <title> Sizing of Clock Distribution Networks for High Performance CPU Chips, </title> <booktitle> Proc. 33rd Design Automation Conf., </booktitle> <year> 1996, </year> <pages> pp. 389-394. </pages>
Reference-contexts: Again, the paper did not report the amount of additional wiring area incurred. A very recent work by Desai, Cvijetic, and Jensen <ref> [DeCJ96] </ref> considered wiresizing of clock distribution networks (not necessary a tree) using a network flow-based approach. The algorithm may even remove an edge from the networks as long as the performance and connectivity is not adversely affected. <p> Experimental results on high performance microprocessors such as Digital's 275Mz Alpha 21164A and 300MHz Alpha 21164 showed up to 16% and 9.6% reductions in interconnect capacitance from the original distribution networks, respectively <ref> [DeCJ96] </ref>. 5.4.2 Buffer Insertion in Clock Routing It is a common practice to use cascaded tapered drivers with exponentially increasing sizes at the root of a clock tree. In some cases, it is possible to satisfy all design constraints by using drivers at the root only.
Reference: [DhFW84] <author> S. Dhar, M. A. Franklin, and D. F. Wann, </author> <title> Reduction of Clock Delays in VLSI Structures, </title> <booktitle> Proc. Int'l Conf. on Computer Design, </booktitle> <year> 1984, </year> <pages> pp. 778-783. </pages>
Reference-contexts: But, we separate abstract topology generation from embedding since once the abstract topology is given, embedding can be done optimally (under the pathlength delay model) or near-optimally using the algorithms to be described in Section 5.2. 55 5.1.1 Top-Down Topology Generation In an H-tree topology <ref> [FiKu82, KuGa82, WaFr83, DhFW84, BaWM86] </ref>, the basic building block is a regular H-structure. 11 All four corners of the H-structure are equi-distant from the center of the structure. The H-tree algorithm minimizes clock skew by repeating the H-structure recursively top-down as shown in Figure 26. <p> For example, instead of introducing detour wirelength to balance delays, a buffer can be inserted. As the feature size becomes smaller, this approach has become more attractive and less expensive in terms of chip area. The earlier works by <ref> [DhFW84, WuSh92] </ref> considered insertion of uniform-size buffers in a H-tree structure. The more recent works by [ViMa95, ChWo96] perform buffer insertion simultaneously with clock routing. The work on buffer insertion and sizing will be presented in Section 5.4.3. <p> The more recent works by [ViMa95, ChWo96] perform buffer insertion simultaneously with clock routing. The work on buffer insertion and sizing will be presented in Section 5.4.3. The work on buffer insertion and wiresizing will be presented in Section 5.4.4. The algorithm proposed by Dhar, Franklin, and Wann <ref> [DhFW84] </ref> inserts buffers into a full H-tree distributing clock signal to a symmetric N-by-N modules in three steps: (i) Folding the H-tree into a single line, (ii) inserting the buffers into the single line, and (iii) unfolding the buffered single line. <p> In a bottom-up order, the number of buffers needed for a wire segment from a branching point to the parent branching point is computed. Either minimum-size buffers or blocks of cascaded buffers are inserted to spread out the load. While <ref> [DhFW84] </ref> does not require buffers to be located at Steiner point, [WuSh92] always inserts a buffer at the parent branching point when buffers are inserted. Moreover, [DhFW84] assumed that the H-tree uses only one metal layer for routing, whereas [WuSh92] assumed a metal routing layer and crossunders, which are short polysilicon <p> Either minimum-size buffers or blocks of cascaded buffers are inserted to spread out the load. While <ref> [DhFW84] </ref> does not require buffers to be located at Steiner point, [WuSh92] always inserts a buffer at the parent branching point when buffers are inserted. Moreover, [DhFW84] assumed that the H-tree uses only one metal layer for routing, whereas [WuSh92] assumed a metal routing layer and crossunders, which are short polysilicon or diffusion segments used to route the H-tree under the power or ground wires. [WuSh92] reported a 60-90% reduction in clock delay and [DhFW84] reported an <p> Moreover, <ref> [DhFW84] </ref> assumed that the H-tree uses only one metal layer for routing, whereas [WuSh92] assumed a metal routing layer and crossunders, which are short polysilicon or diffusion segments used to route the H-tree under the power or ground wires. [WuSh92] reported a 60-90% reduction in clock delay and [DhFW84] reported an order of magnitude reduction in the delay. Since [DhFW84] inserts buffers at the same hierarchy of the clock tree, the skew of the clock tree should remain intact. However, since buffers are inserted at wire segments independently in [WuSh92], clock skew might be adversely affected. <p> layer for routing, whereas [WuSh92] assumed a metal routing layer and crossunders, which are short polysilicon or diffusion segments used to route the H-tree under the power or ground wires. [WuSh92] reported a 60-90% reduction in clock delay and <ref> [DhFW84] </ref> reported an order of magnitude reduction in the delay. Since [DhFW84] inserts buffers at the same hierarchy of the clock tree, the skew of the clock tree should remain intact. However, since buffers are inserted at wire segments independently in [WuSh92], clock skew might be adversely affected. <p> It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree [PuMO93]. We note that buffer insertion algorithms such as those in <ref> [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] </ref> do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation.
Reference: [Di59] <author> E. Dijkstra, </author> <title> A Note on Two Problems in Connexion with Graphs, </title> <journal> Numerische Mathematik, </journal> <year> 1959, </year> <pages> pp. 1 269-271. </pages>
Reference-contexts: The fourth term is a constant. This analysis shows the importance of constructing a minimum-cost shortest path tree. For a shortest paths spanning tree construction, the classical method by Dijkstra can be used to construct a shortest paths tree (SPT) in a graph <ref> [Di59] </ref>, in which every vertex is connected to the root (or source) by a shortest path. While the original algorithm only ensures that all paths are shortest paths, it can be easily modified to construct the minimum cost shortest path tree.
Reference: [DrWa72] <author> S. E. Dreyfus and R. A. Wagner, </author> <title> The Steiner Problem in Graphs, Networks, </title> <address> I:195-207, </address> <year> 1972. </year>
Reference-contexts: The algorithm uses the A* search technique, with delay calculated by a method described in [Sa83]. In [HoXK93], Hong et al. propose two tree construction methods. The first, called the Iterative Dreyfus-Wagner (IDW) Steiner tree algorithm. This method modifies the optimal Steiner tree construction method of Dreyfus and Wagner <ref> [DrWa72] </ref> to utilize a physical delay model from [Sa83]. Through successive runs of the Dreyfus-Wagner method, three terms which capture resistance, capacitance, and their product, are adjusted iteratively; the convergence of these terms produces the optimum solution. A second approach in [HoXK93] is based on a constructive force directed method.
Reference: [Ec80] <author> J. G. Ecker, </author> <title> Geometric Programming: Methods, Computations and Applications, </title> <journal> SIAM Review, </journal> <volume> vol. 22, No. 3, </volume> <month> July </month> <year> 1980, </year> <pages> pp. 338-362. </pages>
Reference-contexts: In contrast to TILOS, it changes the size of more than one transistor in each iteration. In addition, a sensitivity-based transistor sizing is presented by Borah et al. [BoOI95] to minimize power consumption of CMOS circuit under delay constraint. 5 According to <ref> [Ec80] </ref>, a posynomial is a function of positive vector X 2 R m having the form g (X) = N i=1 u i (X) with u i (X) = c i x a i1 2 x a im m ; i = 1; 2; ; N where the exponents a i <p> The solution of the current iteration is then used as an initial solution for the next iteration. The iteration converges to a solution for a convex programming problem. 49 When coefficients are constants, the class of functions, named simple CH-posynomials, is a subset of posynomials defined in <ref> [Ec80] </ref>. Furthermore, they define the following general CH-posynomials, which are no longer posynomials. General CH-posynomial: Eqn. (31) is a general CH-posynomial if coefficients satisfy the following conditions: (i) a pi (x i ) is a function of x i .
Reference: [Ed91] <author> M. Edahiro, </author> <title> Minimum Skew and Minimum Path Length Routing in VLSI Layout Design, </title> <journal> NEC Research and Development, </journal> <volume> 32(4), </volume> <month> Oct. </month> <year> 1991, </year> <pages> pp. 569-575. 90 </pages>
Reference-contexts: Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model <ref> [BoKa92, Ed91, Ed92] </ref> and the Elmore delay model [Ts91, BoKa92, ChHH92a, ChHH92b]. The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model [BoKa92, Ed91, Ed92] and the Elmore delay model [Ts91, BoKa92, ChHH92a, ChHH92b]. The Deferred-Merge Embedding (DME) algorithm by <ref> [BoKa92, ChHH92a, Ed91] </ref> can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> The methods in [CoKo95, HuKT95, CoKK95] address the bounded-skew tree (BST) construction problem under the pathlength and Elmore delay models by extending the DME algorithm for zero-skew tree to BST/DME algorithms by the enabling concept of a merging region, which generalizes the merging segment concept of <ref> [BoKa92, ChHH92a, Ed91] </ref> for zero-skew clock trees. Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. <p> Otherwise specified, the experimental results reported by various papers will be presented with respect to these benchmark circuits. 5.2 Embedding of Abstract Topology Given a prescribed abstract topology, the Deferred-Merge Embedding (DME) algorithm, proposed independently by Edahiro <ref> [Ed91] </ref>, Chao, Hsu, and Ho [ChHH92a], and Boese and Kahng [BoKa92], achieves exact zero skew for both pathlength and Elmore delay models. The enabling concept is that of a merging segment. <p> These embedding algorithms (both zero-skew and bounded-skew) can also be combined with bottom-up topology generation to produce clock trees with less routing costs [Ed92, CoKo95, HuKT95, CoKK95]. 5.2.1 Zero-Skew Embedding The key idea of the DME algorithm is the delayed embedding of internal nodes of the abstract topology <ref> [Ed91, ChHH92a, BoKa92] </ref>. In general, given two zero-skew trees, there can be a number of locations at which two zero-skew trees can be joined with the minimum wirelength such that zero skew is achieved at the higher level. <p> We first illustrate the computation of je a j and je b j under the pathlength delay model <ref> [Ed91, BoKa92] </ref>. <p> Similar to the DME algorithm for zero-skew tree, the BST/DME algorithms compute a bounded-skew routing tree (BST) for a prescribed topology in two phases: bottom-up and top-down. The enabling concept is that of a merging region, which generalizes the concept of merging segment in <ref> [BoKa92, ChHH92a, Ed91] </ref> for zero-skew clock trees. Figure 31 highlights the difference between the DME algorithm for zero-skew routing and the BST/DME algorithms for bounded-skew routing. <p> Instead of considering buffer insertion at each merging step as in the GRIN algorithm, [ChWo96] considers inserting buffers at the roots of all subtrees. Starting with a set S of subtrees, the algorithm performs several iterations of DME-based zero-skew merging <ref> [Ed91, ChHH92a, BoKa92] </ref> until the size of S is reduced by 2 k for some k (which is dependent on the strength of buffer). Note that this is akin to clustering of nodes, followed by buffer insertion to drive each cluster. <p> Extensive studies of the clock routing problem in the past few years have made much advance on automating high-performance clock net synthesis. The bottom-up construction methods using the DME technique (e.g., <ref> [Ed91, ChHH92a, BoKa92, CoKK95, ViMa95] </ref>) are most promising in terms of efficiency, flexibility, and the solution quality. Most existing approaches first produce a balanced routing topology and then perform buffer insertion, buffer and wire sizing.
Reference: [Ed92] <author> M. Edahiro, </author> <title> Minimum Path-Length Equi-Distant Routing, </title> <booktitle> Proc. IEEE Asia-Pacific Conf. on Circuits and Sys--tems, </booktitle> <month> Dec. </month> <year> 1992, </year> <pages> pp. 41-46. </pages>
Reference-contexts: Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model <ref> [BoKa92, Ed91, Ed92] </ref> and the Elmore delay model [Ts91, BoKa92, ChHH92a, ChHH92b]. The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> The BST/DME algorithms proposed by [CoKo95, HuKT95, CoKK95] generalize the merging segment concept and introduce merging region for bounded-skew embedding. These embedding algorithms (both zero-skew and bounded-skew) can also be combined with bottom-up topology generation to produce clock trees with less routing costs <ref> [Ed92, CoKo95, HuKT95, CoKK95] </ref>. 5.2.1 Zero-Skew Embedding The key idea of the DME algorithm is the delayed embedding of internal nodes of the abstract topology [Ed91, ChHH92a, BoKa92]. <p> It is difficult to choose a good combination of upper and lower bounds for a specific allowed skew bound. The authors also noted that the approach cannot be extended to handle Elmore delay easily [OhPP96]. 5.2.3 Topology Generation with Embedding Since DME requires an input topology, several works <ref> [BoKa92, ChHH92a, Ed92] </ref> have thus studied topology constructions that lead to low-cost routing solutions when DME is applied. These methods interleave topology construction with merging segment computation using DME. <p> The works by [CoKo95, HuKT95, CoKK95] adopt a similar approach to construct BSTs by interleaving topology construction with merging region computation using BME or IME. Greedy-DME. The most successful method in this class is the Greedy-DME method of Edahiro <ref> [Ed92] </ref>, which determines the topology of the merging tree in a greedy bottom-up fashion. Let K denote a set of merging segments which initially consists of all the sink locations, i.e., K = fms (s i )g. <p> The clock delay may get worse in some cases. Edahiro [Ed93b] proposed a wiresizing algorithm which performs wiresizing based on delay sensitivity due to wire to minimize clock delay. The algorithm constructs a clock tree in two phases. In the first phase, the algorithm applies Greedy-DME 72 <ref> [Ed92] </ref> to construct a pathlength balanced clock topology with edgelength information. Using the topology computed in the first phase, the second phase of the algorithm applies a modified version of DME under Elmore delay to construct a wiresized clock routing tree. The modified DME algorithm works as follows.
Reference: [Ed93a] <author> M. Edahiro, </author> <title> A Clustering-Based Optimization Algorithm in Zero-Skew Routing, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <month> Jun. </month> <year> 1993, </year> <pages> pp. 612-616. </pages>
Reference-contexts: The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength <ref> [Ed93a] </ref>. <p> After n 1 operations, K consists of the merging segment for the root of the topology. In <ref> [Ed93a] </ref>, O (n logn) time complexity was achieved by finding several nearest-neighbor pairs at once, i.e., the algorithm 66 step results in a new staircase with an error depicted by the shaded region. first constructs a nearest-neighbor graph which maintains the nearest neighbor of each merging segment in K. <p> In some respects, this approach is similar to the KCR algorithm in which a matching is computed in each iteration [CoKR93]. The solution is further improved by a post-processing local search that adjusts the resulting topology (cf. CL+I6 in <ref> [Ed93a] </ref>). Greedy-DME achieves 20% reduction in wiring cost compared with the results which were obtained by using BB followed by DME [ChHH92a]. Chou and Cheng [ChCh93] proposed a simulated annealing approach to construct a zero-skew tree. <p> A tree grafting perturbation operation is used to swap two subtrees during the annealing process. The algorithm has been applied to both Manhattan and Euclidean geometries. For the Manhattan distance metric, the heuristic produces tree lengths which are about 2% worse than those generated by CL+I6 <ref> [Ed93a] </ref>. Greedy-BST/DME. Similar to the Greedy-DME algorithm, [HuKT95] proposed a Greedy-BST/DME algorithm to construct a bounded-skew tree. A key difference between the Greedy-BST/DME algorithm and the Greedy-DME algorithm is that the former algorithm allows merging at non-root nodes whereas Greedy-DME always merges two subtrees at their roots. <p> The Greedy-BST/DME algorithm by [HuKT95] can achieve an average of 42% wirelength reduction when varying the skew bound from 0 to . In fact, it very closely matches the performance of the best-known heuristics for both the zero-skew <ref> [Ed93a, Ed94] </ref> and infinite-skew limiting cases, i.e. Steiner routing (Section 3.1.2). <p> Steiner routing (Section 3.1.2). For realistic skew bounds in the range of 0ps to 150ps, the Greedy-BST/DME algorithms in [CoKK95] averages 26.6% wirelength reduction when compared to the best reported zero-skew solutions by the CL+I6 algorithm in <ref> [Ed93a] </ref>. 5.3 Planar Clock Routing It is preferable to route clock nets on the metal layer with the smallest RC delay since this avoids the use of vias in the clock net and makes the layout more tolerant of process-variations. This motivates the following papers on planar clock routing. <p> The Planar-DME algorithms incur only an average penalty of 9:9% additional routing cost to achieve planarity while the planar clock trees generated by the Max-Min algorithm have an average of 35% higher routing cost when compared to the best (non-planar) zero-skew solutions in <ref> [Ed93a] </ref>. 5.4 Buffer and Wire Sizing for Clock Nets In this section, we deal with buffer and wire sizing, which consider sizing of wires, and insertion and sizing of buffers in clock routing to minimize clock skew, clock delay, and the sensitivity of the clock tree to process variations, which may <p> At the end of the bottom-up merging, the top-down embedding of the original DME approach is applied to obtain a wiresized clock tree. The wiresized clock trees constructed by [Ed93b] satisfy the zero skew constraint while achieving 10%-50% shorter total delay time than the un-sized clock trees in <ref> [Ed93a] </ref>. However, no result on the increase in wiring area is reported. Although the algorithm does not place a upper-bound constraint on the wire width, the computed wire widths are not expected to get too large since the algorithm consider the clock driver strength. <p> It would be an interesting study to find out the worst case skew of zero-skew routing trees such as those reported in <ref> [Ed93a] </ref> and evaluate how the algorithm proposed by [PuMP93] can impact the skew and reliability (in terms of worst case skew). <p> Similarly, a buffer may be inserted to drive T b alone. The shaded region between ms (b) and ms (v) shows the feasible locations of v when a buffer is inserted to drive T b . The GRIN algorithm follows the flow of the Greedy-DME algorithm of <ref> [Ed93a] </ref> with the following modifications. Instead of using just wirelength to define merging cost, the cost of merging is defined to reflect both total wirelength and total buffer size. <p> The buffer/driver area required by the GRIN algorithm is more than 6X smaller and the algorithm averages 2X reduction in power dissipation. Compared to the zero-skew solutions reported in <ref> [Ed93a] </ref>, the clock delay reduction is also very significant. The results also showed shorter clock delays when compared to the wiresized 76 zero-skew solutions in [Ed93b].
Reference: [Ed93b] <author> M. Edahiro, </author> <title> Delay Minimization for Zero-Skew Routing, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 563-566. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay <ref> [PuMO93, Ed93b, MePP93, PuMP93] </ref>, skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> A simple extension can be made to achieve zero-skew merging even when e a and e b have different widths <ref> [Ed93b] </ref>. <p> The first algorithm achieves minimal skew by making slower paths faster by wiresizing [ZhDX93] (instead of making the faster paths slower by snaking in the DME approach). The second approach considers wiresizing to minimize clock delay and uses the DME approach to ensure zero skew <ref> [Ed93b] </ref>. The third heuristic considers not only the nominal skew due to sink delays but also the process skew. At the same time, it tries to meet a specified target delay [PuMP93]. Both [ZhDX93, PuMP93] assume discrete wire sizes, whereas [Ed93b] assumes continuous wire width although it can also be modified <p> delay and uses the DME approach to ensure zero skew <ref> [Ed93b] </ref>. The third heuristic considers not only the nominal skew due to sink delays but also the process skew. At the same time, it tries to meet a specified target delay [PuMP93]. Both [ZhDX93, PuMP93] assume discrete wire sizes, whereas [Ed93b] assumes continuous wire width although it can also be modified to consider discrete wire widths. <p> Since it is not possible to achieve arbitrary precision during fabrication, it is better to have a layout with discrete wire widths and transistor sizes in order to eliminate skew due to mapping of continuous widths/sizes to discrete widths/sizes. [ZhDX93] can handle constraint on the maximum wire width whereas <ref> [Ed93b, PuMP93] </ref> can be extended easily to consider maximum wire width constraint. Note that the constraint on the maximum wire width is imposed by the available routing resource. On the other hand, the constraint on the minimum wire width is due to the fabrication technology. <p> The skew reduction is achieved at the expense of an average of 200% additional wiring area. The clock delay may get worse in some cases. Edahiro <ref> [Ed93b] </ref> proposed a wiresizing algorithm which performs wiresizing based on delay sensitivity due to wire to minimize clock delay. The algorithm constructs a clock tree in two phases. In the first phase, the algorithm applies Greedy-DME 72 [Ed92] to construct a pathlength balanced clock topology with edgelength information. <p> At the end of the bottom-up merging, the top-down embedding of the original DME approach is applied to obtain a wiresized clock tree. The wiresized clock trees constructed by <ref> [Ed93b] </ref> satisfy the zero skew constraint while achieving 10%-50% shorter total delay time than the un-sized clock trees in [Ed93a]. However, no result on the increase in wiring area is reported. <p> Compared to the zero-skew solutions reported in [Ed93a], the clock delay reduction is also very significant. The results also showed shorter clock delays when compared to the wiresized 76 zero-skew solutions in <ref> [Ed93b] </ref>. A shortcoming of inserting buffers to balance clock signal delay is that buffers, being active devices, potentially heighten the sensitivity of signal delay (and hence skew) to process variations.
Reference: [Ed94] <author> M. Edahiro, </author> <title> An Efficient Zero-Skew Routing Algorithm, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <month> Jun. </month> <year> 1994, </year> <pages> pp. 375-380. </pages>
Reference-contexts: The Greedy-BST/DME algorithm by [HuKT95] can achieve an average of 42% wirelength reduction when varying the skew bound from 0 to . In fact, it very closely matches the performance of the best-known heuristics for both the zero-skew <ref> [Ed93a, Ed94] </ref> and infinite-skew limiting cases, i.e. Steiner routing (Section 3.1.2).
Reference: [El48] <author> W. C. </author> <title> Elmore, The Transient Response of Damped Linear Networks with Particular Regard to Wide-Band Amplifiers, </title> <journal> Journal of Applied Physics, </journal> <volume> vol. 19, no. 1, </volume> <month> Jan. </month> <year> 1948, </year> <pages> pp. 55-63. </pages>
Reference-contexts: The Elmore delay model <ref> [El48] </ref> is the most commonly used delay model in recent works on interconnect design.
Reference: [Fi90] <author> J. P. Fishburn, </author> <title> Clock Skew Optimization, </title> <journal> IEEE Trans. on Computers, </journal> <volume> 39(7), </volume> <month> Jul. </month> <year> 1990, </year> <pages> pp. 945-951. </pages>
Reference-contexts: Moreover, different pairs of sequentially adjacent registers may have different skew constraints (since the delays due to different combinational logic blocks 82 are likely to be different). There are several works on clock schedule optimization. However, these works did not consider clock routing. For example, Fishburn <ref> [Fi90] </ref> used linear programming to compute the optimal clock arrival times at the sinks such that either the clock period C P is minimized or the safety margin for clock error given a prescribed clock period is maximized while constraints similar to those in Eqn. (38) are satisfied. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in <ref> [Fi90] </ref>, [ChSH93a, SaSF95] removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While [Fi90, ChSH93a, SaSF95] assumed a fixed network of registers, in [Fr92b, SoFr94, SoFM95], the authors considered retiming using skew information to optimize the circuit. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], [ChSH93a, SaSF95] removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While <ref> [Fi90, ChSH93a, SaSF95] </ref> assumed a fixed network of registers, in [Fr92b, SoFr94, SoFM95], the authors considered retiming using skew information to optimize the circuit. Registers may be removed or inserted as long the circuit still operates correctly.
Reference: [FiDu85] <author> J. P. Fishburn and A. E. Dunlop, TILOS: </author> <title> A Posynomial Programming Approach to Transistor Sizing, </title> <booktitle> Proc. Int'l. Conf. on Computer-Aided Design, </booktitle> <year> 1985, </year> <pages> pp. 326-328. </pages>
Reference-contexts: The transistor sizing problem has been approached using both sensitivity based methods and mathematical optimization based methods. The gate sizing problem has been classified into both continuous and discrete gate sizing problems, and solved by different approaches. A. Sensitivity Based Transistor Sizing Fishburn and Dunlop <ref> [FiDu85] </ref> studied the transistor sizing problems for synchronous MOS circuits. Let x 1 ; ; x i ; ; x n be the transistor sizes, A the total active area of transistors and T the clock period. <p> In fact, a i j is non-zero only when transistors i and j are dc-connected. Furthermore, the authors of <ref> [FiDu85] </ref> show that Eqn. (29) and the area A = x i are posynomials and the transistor sizing problems of the three forms are all posynomial programs. 5 Even though posynomial programming methods can be used to optimally solve the three forms of the transistor sizing problem, it is computationally expensive <p> In fact, the concepts of posynomial and posynomial program play an important role in many wire and device sizing works to be presented. 34 B. Mathematical Programming Based Transistor Sizing Note that the method in <ref> [FiDu85] </ref> does not guarantee the optimality of the result. Studies have been done to formulate the transistor sizing problem as mathematical programming problems to obtain an optimal solution. Methods in [Ci87, He87, Ma86] formulate the transistor sizing problem as nonlinear programs and solve them by the method of Lagrangian multipliers. <p> First, the delay budget is distributed to each gate; Then, the transistors in each gate are sized optimally to satisfy the time budget. Later, a two-phase algorithm was presented in [ShFD88] to minimize the circuit area under timing constraints: first, TILOS <ref> [FiDu85] </ref> is used to generate an initial solution; then, a mathematic optimization is formulated and solved by using feasible directions to find the optimal solution. <p> Under the delay model, the transistor sizing problem is a posynomial program that can be transformed into a convex program and the convex programming method [Va89] was implemented to solve the transformed problem. When using the simple delay model of TILOS <ref> [FiDu85] </ref>, and the timing specification is loose, the area of the solution obtained by TILOS is close to that of the solution obtained by the iCONTRAST algorithm. However, as the time specification is tightened, the TILOS-solutions have larger area when compared with the iCONTRAST-solutions. <p> Recall that r and c a are the resistance and the area capacitance for a unit-length wire, respectively. When a wire segment with upstream 6 Since the method in <ref> [FiDu85] </ref> only sizes those transistors in the critical path based on their sensitivities, criticality has been considered implicitly. 7 dc-connected means directly connected by wires. 37 node k is added at i, an option (q k ; c k ) will be generated at k for every (q i ; c <p> First, he showed that the separability no longer holds for minimizing the maximum delay. So, the dynamic programming based approach in [CoLZ93, CoLe93] does not apply. However, since the Elmore delay in an RC tree is a posynomial function of wire widths as first pointed out in <ref> [FiDu85] </ref>, it has this property that the local optimum is also the global optimum; thus a sensitivity-based method like that used in [FiDu85] can be applied. The algorithm in [Sa94] goes through a number of iterations. <p> However, since the Elmore delay in an RC tree is a posynomial function of wire widths as first pointed out in <ref> [FiDu85] </ref>, it has this property that the local optimum is also the global optimum; thus a sensitivity-based method like that used in [FiDu85] can be applied. The algorithm in [Sa94] goes through a number of iterations. <p> Experiments show that in nearly all cases, the optimal solution to the STIS problem is achieved because the recursive application of local refinement operations using the dominance property leads to identical lower and upper bounds. In contrast to the transistor sizing algorithm in <ref> [FiDu85] </ref> that is not able to consider the waveform-slope effect for transistors, the dominance property based STIS algorithm can be efficiently applied to either analytical or table-lookup based transistor models with consideration of the waveform-slope effect. <p> Device and interconnect sizing: The optimization problems in this area usually have well defined mathematical programming formulations. We feel that the sensitivity based heuristics, such as those used in <ref> [FiDu85, Sa94] </ref>, and the local refinement technique based on the dominance property (and the bundled refinement property) used in [CoLe95, CoKo94, CoHe95, CoHe96c] are most efficient, produce good quality solutions, and scale up well with the rapid increasing of design complexity. <p> The initial device and interconnect sizing solutions can be computed using a simple switch-level driver model and Elmore delay model as in <ref> [FiDu85, CoLe95, CoKo94] </ref> and then more accurate driver and interconnect models, such as those used in [MePP95, MeBP95] can be applied to further refine the solution for performance and area optimization. 3.
Reference: [FiKu82] <author> A. L. Fisher and and H. T. Kung, </author> <title> Synchronizing Large Systolic Arrays, </title> <booktitle> Proc. SPIE, </booktitle> <volume> vol. 341, </volume> <month> May </month> <year> 1982, </year> <pages> pp. 44-52. </pages>
Reference-contexts: But, we separate abstract topology generation from embedding since once the abstract topology is given, embedding can be done optimally (under the pathlength delay model) or near-optimally using the algorithms to be described in Section 5.2. 55 5.1.1 Top-Down Topology Generation In an H-tree topology <ref> [FiKu82, KuGa82, WaFr83, DhFW84, BaWM86] </ref>, the basic building block is a regular H-structure. 11 All four corners of the H-structure are equi-distant from the center of the structure. The H-tree algorithm minimizes clock skew by repeating the H-structure recursively top-down as shown in Figure 26.
Reference: [Fr92a] <author> J. Frankle, </author> <title> Iterative and Adaptive Slack Allocation for Performance-Driven Layout and FPGA Routing, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1992, </year> <pages> pp. 536-542. </pages>
Reference-contexts: Most well-known global routers, such as [LeSe88, CoPr88, CaCh91], did not consider timing optimization during global routing. Existing methods on delay budgeting, such as <ref> [NaBH89, Fr92a, TeKS96] </ref>, were mainly developed for circuit placement and their applicability to global routing is yet to be demonstrated.
Reference: [Fr92b] <author> E. G. Friedman, </author> <title> The Application of Localized Clock Distribution Design to Improving the Performance of Re-timed Sequential Circuits, </title> <booktitle> Proc. of IEEE Asia-Pacific Conf. on Circuits and Systems, </booktitle> <month> Dec </month> <year> 1992, </year> <pages> pp. 12-17. </pages>
Reference-contexts: Two-level clock routing with the upper level routing in multichip module substrate has also been studied [ZhXDS94]. In addition, there are studies that target hierarchical data path design (instead of flat logic design) [NeFr93, NeFr94, NeFr95] and consider retiming <ref> [Fr92b, SoFr94, SoFM95] </ref> using skew information. Interested reader may also refer to [Fr95] for a survey on different aspects of clock synthesis. 5.1 Abstract Topology Generation There are generally two approaches in generating the abstract topology: Top-down and bottom-up. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], [ChSH93a, SaSF95] removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While [Fi90, ChSH93a, SaSF95] assumed a fixed network of registers, in <ref> [Fr92b, SoFr94, SoFM95] </ref>, the authors considered retiming using skew information to optimize the circuit. Registers may be removed or inserted as long the circuit still operates correctly. A related problem on clock schedule optimization is to construct a clock tree that satisfies the clock schedule.
Reference: [Fr95] <author> E. G. Friedman, </author> <title> Editor, Clock Distribution networks in VLSI Circuits and Systems: </title> <journal> A Selected Reprint Volume, </journal> <year> 1995. </year>
Reference-contexts: In addition, there are studies that target hierarchical data path design (instead of flat logic design) [NeFr93, NeFr94, NeFr95] and consider retiming [Fr92b, SoFr94, SoFM95] using skew information. Interested reader may also refer to <ref> [Fr95] </ref> for a survey on different aspects of clock synthesis. 5.1 Abstract Topology Generation There are generally two approaches in generating the abstract topology: Top-down and bottom-up. In the top-down approach, the idea is to perform bipartitioning of sinks. <p> For example, data may reach the final register at too late a time, or the data may race through the fast path and destroy the correct data at the final register before the correct data is latched. To eliminate clock hazards, we impose the following constraints <ref> [Fr95] </ref>: skew (i; j) C P (t su + t ds + t max (L i j )); skew (i; j) t min (L i j ) + t ds t hold ; (38) where t hold is the amount of time the input data signal must remain stable once the
Reference: [GaLi93] <author> T. Gao and C. L. Liu, </author> <title> Minimum Crosstalk Channel Routing, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1993, </year> <pages> pp. 692-696. </pages>
Reference-contexts: Again, in order to consider the coupling effect (i.e. crosstalk), one needs to consider the interaction of multiple nets simultaneously. Existing works on crosstalk reduction, including those presented in <ref> [ChOK93, GaLi93, GaLi94, KiSa94, XuKW96] </ref>, focus mainly on proper spacing and wire segment ordering. It is not yet clear how crosstalk will be affected by buffer insertion, device and wire sizing, etc..
Reference: [GaLi94] <author> T. Gao and C. L. Liu, </author> <title> Minimum Crosstalk Switchbox Routing, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1994, </year> <pages> pp. 610-615. </pages>
Reference-contexts: Again, in order to consider the coupling effect (i.e. crosstalk), one needs to consider the interaction of multiple nets simultaneously. Existing works on crosstalk reduction, including those presented in <ref> [ChOK93, GaLi93, GaLi94, KiSa94, XuKW96] </ref>, focus mainly on proper spacing and wire segment ordering. It is not yet clear how crosstalk will be affected by buffer insertion, device and wire sizing, etc..
Reference: [GaZh93] <author> D. S. Gao and D. Zhou, </author> <title> Propagation Delay in RLC Interconnection Networks, </title> <booktitle> Proc. IEEE Int'l Symp. on Circuits and Systems, </booktitle> <year> 1993, </year> <pages> pp. 2125-2128. </pages>
Reference-contexts: The choice of order q depends on the accuracy required but is always much less than the order of the circuit. In practice, q 5 is commonly used. When q is chosen to be two, it is known as the two-pole model <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94] </ref>. In this model, the first three moments m 0 (which is normalized), m 1 , and m 2 are used. <p> A closed-form expression of m 2 is given and an analytical formula relating the performance of an RLC interconnect to its topology and geometry is derived by Gao and Zhou <ref> [GaZh93] </ref>. This provides a closed-form formula for the topology optimization algorithm in [ZhTG93]. However, the expression of m 2 is much more complicated than that of m 1 (the Elmore delay). <p> This provides a closed-form formula for the topology optimization algorithm in [ZhTG93]. However, the expression of m 2 is much more complicated than that of m 1 (the Elmore delay). Moreover, the method of <ref> [Ho84, GaZh93, ZhST94] </ref> calculates the second moment by replacing the off-path admittance by the sum of the total subtree capacitance. This is correct only to the coefficient of s in the subtree admittance. Thus, such a method underestimates the subtree impedance. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [GaJo79] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: Note that the inclusion of additional points to the spanning tree can reduce the total tree length. While the MST problem can be solved optimally in polynomial time, construction of a SMT is NP-hard for graphs, and for both rectilinear and Euclidean distance metrics <ref> [GaJo79] </ref>. We shall present several effective SMT heuristics for the rectilinear distance metric, which is most relevant to VLSI interconnect design. Clearly the set of potential Steiner points is infinite.
Reference: [GePa87] <author> G. Georgakopoulos and C. H. Papadimitriou, </author> <title> The 1-Steiner Tree Problem, </title> <journal> Journal of Algorithms, </journal> <volume> vol. 8, </volume> <year> 1987, </year> <pages> pp. 122-130. </pages>
Reference-contexts: The optimal Steiner tree, however, has significantly lower wirelength. The ratio of tree lengths of a merge-based heuristic and an optimal Steiner tree can be arbitrarily close to the 3 2 bound. is unique, resulting in limited improvement through edge merging. In <ref> [GePa87] </ref>, Georgakopoulos and Papadimitriou considered the 1-Steiner problem, which is to find a point s such that jMST (P)j - jMST (P S s)j is maximized. The point s is known as a 1-Steiner point.
Reference: [GuTK95] <author> R. Gupta, B. Tutuianu, B. Krauter, and L. T. Pillage, </author> <title> The Elmore Delay as a Bound for RC Trees with Generalized Input Signals, </title> <booktitle> Proc. 32nd ACM/IEEE Design Automation Conf., </booktitle> <month> June </month> <year> 1995, </year> <pages> pp. 364-369. </pages>
Reference-contexts: In general, the Elmore delay of a sink in an RC tree is a (loose) absolute upper bound on the actual 50% delay of the sink under the step input <ref> [GuTK95] </ref>. The main advantage of the Elmore delay is that it provides a simple closed-form expression with greatly improved accuracy for delay measure compared to the lumped RC model. <p> The approximation of the 50% signal delay by the Elmore delay is exact only for a symmetrical impulse response, where the mean is equal to the median <ref> [GuTK95] </ref>. Although the Elmore delay model is not accurate, it has a high degree of fidelity: an optimal or near-optimal solution according to the estimator is also nearly optimal according to actual (SPICE-computed [Na75]) delay for routing constructions [BoKM93] and wiresizing optimization [CoHe96a]. <p> Since the accuracy of the Elmore delay is affected by the spread and skewness of the impulse distribution, the three central moments may be used to reduce the relative errors of Elmore delay <ref> [GuTK95] </ref>. 3 Another advantage of using higher order moments for circuit analysis is that it can handle the inductance effect.
Reference: [Ha66] <author> M. Hanan, </author> <title> On Steiner's Problem with Rectilinear Distance, </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 14, </volume> <year> 1966, </year> <pages> pp. 255-265. </pages>
Reference-contexts: We shall present several effective SMT heuristics for the rectilinear distance metric, which is most relevant to VLSI interconnect design. Clearly the set of potential Steiner points is infinite. For the rectilinear metric, however, Hanan <ref> [Ha66] </ref> showed that the set of Steiner points which need to be considered in the construction of a SMT can be limited to the Hanan grid, formed by the intersections of vertical and horizontal lines through the vertices of the initial point set.
Reference: [HeJe87] <author> N. Hedenstierna and K. O. Jeppson, </author> <title> CMOS Circuit Speed and Buffer Optimization, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <year> 1987, </year> <pages> pp. 270-281. </pages>
Reference-contexts: A sharp input transition allows the full driving power of the driver to charge or discharge the load and therefore results in a smaller effective resistance of the driver. On the other hand, a slow transition results in a larger effective resistance of the driver. Hedenstierna and Jeppson <ref> [HeJe87] </ref> consider input waveform slope and provide the following expression for the delay time of a falling signal: t d f = t f =2 + 6 V n V DD where t t is the input transition time (more specifically, the input rise time in this case) and V n <p> This is the well known optimal stage ratio for delay minimization presented in most textbooks (such as [MeCo93]). The output capacitance of a driver is not considered in the above derivation. In <ref> [HeJe87] </ref>, a more accurate analytical delay formula was developed with consideration of the input waveform slope and the output capacitance of the driver. <p> The stage number N can be determined by the optimal stage ratio f as N = ln C L =ln f . Then, f is used for all stages, except that the last stage has a little bit larger ratio for delay minimization <ref> [HeJe87] </ref>. Most recently, Zhou and Liu [ZhLi96] discussed the optimal driver sizing for high-speed low-power ICs. The increasing stage ratios f i = f 0 (1 + g) i are used, where g is a modification factor determined by the I-V curve of the transistor. <p> They show that f 0 = e 2 + 2g C 0 and f i = f 0 (1 + g) i are the optimal stage ratios for delay minimization. We would like to point out that all studies in <ref> [LiLi75, HeJe87, ZhLi96] </ref> also discussed the optimal driver sizing for power minimization. <p> Experimental results of circuits with up to 500 transistors have been presented. More recently, Sapatnekar [SaRV93] developed a transistor sizing tool iCONTRAST, again, to minimize the circuit area under timing constraints. It employs the analytical delay model developed in <ref> [HeJe87] </ref> which can consider the waveform slope of input signals to transistors, but assumes that the transition time is twice the Elmore delay of the previous stage. <p> The number of total options at the source of the routing tree is still polynomial bounded. According to <ref> [HeJe87] </ref>, the delay of an inverter is the delay under the step input plus an increment due to the input slope. The increment is proportional to the input waveform transition time.
Reference: [He87] <author> K. S. Hedlund, AESOP: </author> <title> A Tool for Automatic Transistor Sizing, </title> <booktitle> Proc. 24 ACMIEEE Design Automation Conf., </booktitle> <year> 1987, </year> <pages> pp. 114-120. </pages>
Reference-contexts: Mathematical Programming Based Transistor Sizing Note that the method in [FiDu85] does not guarantee the optimality of the result. Studies have been done to formulate the transistor sizing problem as mathematical programming problems to obtain an optimal solution. Methods in <ref> [Ci87, He87, Ma86] </ref> formulate the transistor sizing problem as nonlinear programs and solve them by the method of Lagrangian multipliers. Methods in [DaAs89, HeFi91, ChKa91] apply the following two-step iterations.
Reference: [HeFi91] <author> L. S. Heulser and W. Fichtner, </author> <title> Transistor Sizing for Large Combinational Digital CMOS Circuits, Integration, </title> <journal> the VLSI Journal, </journal> <volume> vol. 10, </volume> <month> Jan. </month> <year> 1991, </year> <pages> pp. 185-212. </pages>
Reference-contexts: Studies have been done to formulate the transistor sizing problem as mathematical programming problems to obtain an optimal solution. Methods in [Ci87, He87, Ma86] formulate the transistor sizing problem as nonlinear programs and solve them by the method of Lagrangian multipliers. Methods in <ref> [DaAs89, HeFi91, ChKa91] </ref> apply the following two-step iterations. First, the delay budget is distributed to each gate; Then, the transistors in each gate are sized optimally to satisfy the time budget.
Reference: [HiKo92] <author> U. Hinsberger and R. Kolla, </author> <title> A Cell-based Approach to Performance Optimization of Fanout-Free Circuits, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> vol. 11, No. 10, </volume> <month> Oct., </month> <year> 1992, </year> <pages> pp. 1317-1321. </pages>
Reference-contexts: In general, the discrete gate sizing problem is NP-complete: Chan [Ch90] showed that the double sized discrete gate sizing problem to find discrete gate sizes to satisfy both maximum and minimum delay constraints is NP-complete, even without consideration of area minimization. Hinsberger and Kolla <ref> [HiKo92] </ref> proved the single-sided (with only maximum delay constraint) discrete gate sizing problem in a DAG (directed acyclic graph) is NP-complete under three objectives: to minimize the maximum delay, to minimize the maximum delay under an area constraint, and to minimize the area under a maximum delay constraint. <p> For the double-sided problem, a branch and bound algorithm [Ch90] was developed to find the optimal solution for tree structures. For the single-sided problem, an optimal dynamic programming method to minimize the maximum delay was proposed, again for tree structures <ref> [HiKo92] </ref>. It assumes that the delay for a gate could be determined locally, i.e., the delay could be determined only by the sizes of the gate and its fanout gates, and works in a bottom-up manner.
Reference: [HLCW89] <author> J.-M. Ho, D. T. Lee, C.-H. Chang, and C. K. Wong. </author> <title> Bounded-Diameter Minimum Spanning Trees and Related Problems, </title> <booktitle> Proc. Computational Geometry Conf., </booktitle> <year> 1989, </year> <pages> pp. 276-282. </pages>
Reference: [HoVW90] <author> J. M. Ho, G. Vijayan, and C. K. Wong. </author> <title> New Algorithms for the Rectilinear Steiner Tree Problem, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 9(2), </volume> <year> 1990, </year> <pages> pp. 185-193. </pages>
Reference-contexts: There may be more than one way in which edges can be merged; the selection of edges and the order of their merging is a central concern of many Steiner tree heuristics. The best known example of this approach is that of Ho, Vijayan, and Wong <ref> [HoVW90] </ref>. They first compute a separable MST in which no pair of non-adjacent edges have overlapping bounding boxes. They showed that for any point set P, there exists a separable MST on P. <p> For each connection, the edge routing which results in the maximum overlap with the existing tree is selected, and the edges are merged. Tree improvement involves a series of edge merges (similar to the merge-based Steiner tree heuristics of <ref> [HoVW90] </ref>, described in Section 3.1.2) and edge insertions and deletions. The operations are performed such that the path length from the source to the most distant sink is not increased, and this phase terminates at the local optimum. <p> In experiments with a variety of point sets, the authors observed that their heuristic produced an average of 25% reductions in path length with increases of 6% in wire length, when compared to the Steiner tree heuristic of <ref> [HoVW90] </ref>. While the MPT algorithm provides a measure of control over the tradeoff between path length and tree length, a number of authors have attempted to refine this control. Some algorithms are able to bound the maximum tree length, the maximum path length, or both, with constant factors.
Reference: [HoMR94] <author> T. D. Hodes, B. A. McCoy, and G. Robins, </author> <title> Dynamically-Wiresized Elmore-Based Routing Constructions, </title> <booktitle> Proc. Int'l Symp. on Circuits and Systems, </booktitle> <year> 1994, </year> <pages> pp. 463-466. </pages>
Reference-contexts: Recently, dynamic wiresizing has been studied, where the wiresizing is performed during interconnect construction. Furthermore, simultaneous interconnect construction, buffer insertion and sizing, and wiresizing has been studied in order to achieve even better designs. 4.4.1 Dynamic Wiresizing during Topology Construction Hodes, McCoy and Robins <ref> [HoMR94] </ref> propose a method to do wiresizing dynamically during tree construction.
Reference: [HoNS90] <author> B. Hoppe, G. Neuendore, D. Schmitt-Landsiedel, and W. </author> <title> Specks Optimization of High-Speed CMOS Logic Circuits with Analytical Models for Signal Delay, Chip Area and Dynamic Power Dissipation, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 9(3), </volume> <month> March </month> <year> 1990, </year> <pages> pp. 237-247. </pages>
Reference-contexts: In essence, it is very similar to the transistor sizing problem, but has much lower complexity for a given design, since all transistors in a gate are scaled by the same factor. Hoppe et al <ref> [HoNS90] </ref> developed analytical models for signal delay, chip area and dynamic power dissipation and formulated a nonlinear problem to minimize the weighted linear combination of delay, area and power. The nonlinear problem is solved by the Newton-Raphson algorithm. A 64K-SRAM was optimized on a mainframe computer in 2 hours.
Reference: [Ho84] <author> M. A. Horowitz, </author> <title> Timing Models for MOS Circuits, </title> <type> PhD Thesis, </type> <institution> Stanford University, </institution> <month> January, </month> <year> 1984. </year>
Reference-contexts: The choice of order q depends on the accuracy required but is always much less than the order of the circuit. In practice, q 5 is commonly used. When q is chosen to be two, it is known as the two-pole model <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94] </ref>. In this model, the first three moments m 0 (which is normalized), m 1 , and m 2 are used. <p> This provides a closed-form formula for the topology optimization algorithm in [ZhTG93]. However, the expression of m 2 is much more complicated than that of m 1 (the Elmore delay). Moreover, the method of <ref> [Ho84, GaZh93, ZhST94] </ref> calculates the second moment by replacing the off-path admittance by the sum of the total subtree capacitance. This is correct only to the coefficient of s in the subtree admittance. Thus, such a method underestimates the subtree impedance. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [HoXK93] <author> X. Hong, T. Xue, E. S. Kuh, C. K. Cheng, and J. Huang, </author> <title> Performance-Driven Steiner Tree Algorithms For Global Routing, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 177-181. </pages>
Reference-contexts: The target sink was selected to minimize the distance between the sink and the partial tree. The algorithm uses the A* search technique, with delay calculated by a method described in [Sa83]. In <ref> [HoXK93] </ref>, Hong et al. propose two tree construction methods. The first, called the Iterative Dreyfus-Wagner (IDW) Steiner tree algorithm. This method modifies the optimal Steiner tree construction method of Dreyfus and Wagner [DrWa72] to utilize a physical delay model from [Sa83]. <p> Through successive runs of the Dreyfus-Wagner method, three terms which capture resistance, capacitance, and their product, are adjusted iteratively; the convergence of these terms produces the optimum solution. A second approach in <ref> [HoXK93] </ref> is based on a constructive force directed method. This method begins with an initial forest of points, computes the weighted medium point for each vertex, and then grows the smallest weighted subtree. This process is iterated until all vertices are connected.
Reference: [HuKT95] <author> J. H. Huang, A. B. Kahng and C.-W. A. Tsao, </author> <title> On the Bounded-Skew Routing Tree Problem, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Francisco, </address> <month> Jun. </month> <year> 1995, </year> <pages> pp. 508-513. </pages>
Reference-contexts: The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. The methods in <ref> [CoKo95, HuKT95, CoKK95] </ref> address the bounded-skew tree (BST) construction problem under the pathlength and Elmore delay models by extending the DME algorithm for zero-skew tree to BST/DME algorithms by the enabling concept of a merging region, which generalizes the merging segment concept of [BoKa92, ChHH92a, Ed91] for zero-skew clock trees. <p> In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. For example, Figure 25 (a) plots HSPICE delay skew against path-length delay skew for routing trees generated by the Greedy-BST/DME algorithm under pathlength delay <ref> [CoKo95, HuKT95] </ref> on MCNC benchmark circuit r3 [Ts91]. Not only is the correlation poor, but the pathlength-based BST solutions simply cannot meet tight skew bounds (of 100ps or less). <p> The enabling concept is that of a merging segment. The problem of bounded-skew embedding was first addressed independently by Cong and Koh [CoKo95], and Huang, Kahng, and Tsao <ref> [HuKT95] </ref> under the pathlength delay model. Cong et al. [CoKK95] later extended the works to handle bounded-skew embedding under the Elmore delay model. The BST/DME algorithms proposed by [CoKo95, HuKT95, CoKK95] generalize the merging segment concept and introduce merging region for bounded-skew embedding. <p> The problem of bounded-skew embedding was first addressed independently by Cong and Koh [CoKo95], and Huang, Kahng, and Tsao [HuKT95] under the pathlength delay model. Cong et al. [CoKK95] later extended the works to handle bounded-skew embedding under the Elmore delay model. The BST/DME algorithms proposed by <ref> [CoKo95, HuKT95, CoKK95] </ref> generalize the merging segment concept and introduce merging region for bounded-skew embedding. <p> The BST/DME algorithms proposed by [CoKo95, HuKT95, CoKK95] generalize the merging segment concept and introduce merging region for bounded-skew embedding. These embedding algorithms (both zero-skew and bounded-skew) can also be combined with bottom-up topology generation to produce clock trees with less routing costs <ref> [Ed92, CoKo95, HuKT95, CoKK95] </ref>. 5.2.1 Zero-Skew Embedding The key idea of the DME algorithm is the delayed embedding of internal nodes of the abstract topology [Ed91, ChHH92a, BoKa92]. <p> The results are marginally better than those produced by combining BB with DME. As we shall see in Section 5.2.3, further cost reduction can be obtained when we interleave topology generation with embedding. 61 5.2.2 Bounded-Skew Embedding While the DME algorithm considers only zero-skew, the BST/DME algorithms proposed by <ref> [CoKo95, HuKT95, CoKK95] </ref> consider bounded-skew clock routing. Similar to the DME algorithm for zero-skew tree, the BST/DME algorithms compute a bounded-skew routing tree (BST) for a prescribed topology in two phases: bottom-up and top-down. <p> Note that in (b) the merging segments are depicted by dashed lines, and in (c) the merging regions are depicted by shaded polygons. Two approaches were proposed to construct the merging regions: (i) the Boundary Merging and Embedding (BME) method <ref> [CoKo95, HuKT95] </ref> and (ii) the Interior Merging and Embedding (IME) method [CoKK95]. We consider only the pathlength delay formulation as in [CoKo95, HuKT95]. Extension to the Elmore delay model can be found in [CoKK95]. Boundary Merging and Embedding (BME). <p> Two approaches were proposed to construct the merging regions: (i) the Boundary Merging and Embedding (BME) method <ref> [CoKo95, HuKT95] </ref> and (ii) the Interior Merging and Embedding (IME) method [CoKK95]. We consider only the pathlength delay formulation as in [CoKo95, HuKT95]. Extension to the Elmore delay model can be found in [CoKK95]. Boundary Merging and Embedding (BME). <p> These methods interleave topology construction with merging segment computation using DME. The works by <ref> [CoKo95, HuKT95, CoKK95] </ref> adopt a similar approach to construct BSTs by interleaving topology construction with merging region computation using BME or IME. Greedy-DME. The most successful method in this class is the Greedy-DME method of Edahiro [Ed92], which determines the topology of the merging tree in a greedy bottom-up fashion. <p> The algorithm has been applied to both Manhattan and Euclidean geometries. For the Manhattan distance metric, the heuristic produces tree lengths which are about 2% worse than those generated by CL+I6 [Ed93a]. Greedy-BST/DME. Similar to the Greedy-DME algorithm, <ref> [HuKT95] </ref> proposed a Greedy-BST/DME algorithm to construct a bounded-skew tree. A key difference between the Greedy-BST/DME algorithm and the Greedy-DME algorithm is that the former algorithm allows merging at non-root nodes whereas Greedy-DME always merges two subtrees at their roots. <p> Merging with non-root nodes is a powerful topology generation method. The work by [CoKo95] is a simple extension of Greedy-DME, i.e., it considers merging of root nodes only. The wirelength reduction averages 19% when the allowed skew increases from 0 to . The Greedy-BST/DME algorithm by <ref> [HuKT95] </ref> can achieve an average of 42% wirelength reduction when varying the skew bound from 0 to . In fact, it very closely matches the performance of the best-known heuristics for both the zero-skew [Ed93a, Ed94] and infinite-skew limiting cases, i.e. Steiner routing (Section 3.1.2). <p> The UST heuristic has been evaluated using three ISCAS89 benchmark circuits [BrBK89] and two industry circuits. In all but one case, the UST algorithm uses less wirelength when compared to the Greedy-BST/DME <ref> [CoKo95, HuKT95] </ref> and BB+DME algorithms [ChHH92b]. For each circuit, the skew bound for BST construction [CoKo95, HuKT95] is set to be the smallest skew bound of all sink pairs. <p> The UST heuristic has been evaluated using three ISCAS89 benchmark circuits [BrBK89] and two industry circuits. In all but one case, the UST algorithm uses less wirelength when compared to the Greedy-BST/DME <ref> [CoKo95, HuKT95] </ref> and BB+DME algorithms [ChHH92b]. For each circuit, the skew bound for BST construction [CoKo95, HuKT95] is set to be the smallest skew bound of all sink pairs. To compare the impact of a UST on power dissipation, [XiDa96] also performed gate sizing with bounded (zero) skew after a BST (ZST) was constructed.
Reference: [Hw76] <author> F. K. Hwang, </author> <title> On Steiner Minimal Trees with Rectilinear Distance, </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 30(1), </volume> <month> Jan. </month> <year> 1976, </year> <pages> pp. 104-114. </pages>
Reference-contexts: Given this observation, optimal SMT algorithms which utilize branch-and-bound techniques can be constructed, but these algorithms have exponential complexity and are applicable to only small problems. Given that construction of an optimal SMT is NP-hard, it is natural to look for heuristics. An interesting result, due to Hwang <ref> [Hw76] </ref>, is that the ratio of tree lengths between a rectilinear MST and a rectilinear SMT is no worse than 3 2 . The bounded performance of MST constructions has made the Prim and Kruskal algorithms popular as the basis of Steiner tree heuristics.
Reference: [HwRi92] <author> F. K. Hwang and D. S. Richards, </author> <title> Steiner Tree Problems, </title> <journal> Networks, </journal> <volume> 22 </volume> <pages> 55-89, </pages> <year> 1992. </year>
Reference-contexts: We will discuss several typical and commonly used algorithms here, and recommend a more detailed survey by Hwang and Richards <ref> [HwRi92] </ref> to the interested reader. The Steiner problem is defined as follows: Given a set P of n points, find a set S of Steiner points such that MST (P S the minimum cost. For interconnect optimization problems, the set P consists of the pins of a net.
Reference: [JaSK90] <author> M. A. B. Jackson, A. Srinivasan and E. S. Kuh, </author> <title> Clock Routing for High Performance ICs, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 573-579. 92 </pages>
Reference-contexts: Moreover, tree lengths can be excessively high for large clock nets, impacting circuit area, power consumption, and clock rates for large circuits. The Method of Means and Medians (MMM) algorithm proposed by Jackson, Srinivasan, and Kuh <ref> [JaSK90] </ref> generalizes the H-tree algorithm; the idea is to perform partitioning along x and y directions alternatively. <p> Note that BB is a purely topology generation algorithm. It relies on the embedding algorithm to be presented in Section 5.2 to embed the abstract topology generated. 5.1.2 Bottom-Up Topology Generation In contrast to the top-down approaches of <ref> [JaSK90, ChHH92b] </ref>, the KCR geometric matching algorithm was proposed by Kahng, Cong, and Robins [KaCR91, CoKR93] as the first bottom-up approach for clock tree abstract topology generation. <p> In general, the KCR algorithm performs better than the MMM algorithm, in terms of both routing cost and clock skew (under the pathlength delay model). The algorithms were evaluated using random point sets. Moreover, two MCNC benchmark circuits, named Primary1 and Primary2, reported in <ref> [JaSK90] </ref> were also used in the experiment. No data for the BB method is available since BB produces only an unembedded binary tree topology. <p> However, it is not clear how we can prevent steps (ii) and (iii) from messing up the work 73 done in step (i). Applying the algorithm to clock trees routed by the MMM method <ref> [JaSK90] </ref>, [PuMP93] reported an average of 7:5X reduction in the skews, reducing the original skews from the order of 1ns to skews in the order of 0:1ns.
Reference: [KaCR91] <author> A. B. Kahng, J. Cong and G. Robins, </author> <title> High-Performance Clock Routing Based on Recursive Geometric Match--ing, </title> <booktitle> Proc. ACM/IEEE Design Automation conf., </booktitle> <month> June </month> <year> 1991, </year> <pages> pp. 322-327. </pages>
Reference-contexts: It relies on the embedding algorithm to be presented in Section 5.2 to embed the abstract topology generated. 5.1.2 Bottom-Up Topology Generation In contrast to the top-down approaches of [JaSK90, ChHH92b], the KCR geometric matching algorithm was proposed by Kahng, Cong, and Robins <ref> [KaCR91, CoKR93] </ref> as the first bottom-up approach for clock tree abstract topology generation. It constructs a routing tree by iteratively joining pairs of subtrees which are close, and can handle cell-based design with asymmetric distributions of clock pins and general-cell design [CoKR91, CoKR93].
Reference: [KaMM96] <author> A. B. Kahng, K. Masuko, and S. Muddu, </author> <title> Analytical Delay Model for VLSI Interconnects Under Ramp Input, </title> <institution> UCLA CS Dept. TR-960015, </institution> <month> April </month> <year> 1996, </year> <note> also to appear in Proc. Int'l Conf. on Computer-Aided Design, </note> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: The model is further extended to consider RLC interconnection trees [KaMu96b] and ramp input <ref> [KaMM96] </ref>. While the methods in [KaMu96b, KaMM96] used only the first two moments, Tutuianu, Dartu, and Pileggi [TuDP96] proposed an explicit RC-circuit delay approximation based on the first three moments of the impulse response. <p> The model is further extended to consider RLC interconnection trees [KaMu96b] and ramp input [KaMM96]. While the methods in <ref> [KaMu96b, KaMM96] </ref> used only the first two moments, Tutuianu, Dartu, and Pileggi [TuDP96] proposed an explicit RC-circuit delay approximation based on the first three moments of the impulse response. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [KaMu94] <author> A. B. Kahng and S. Muddu, </author> <title> Optimal Equivalent Circuits for Interconnect Delay Calculations Using Moments, </title> <booktitle> Proc. European Design Automation Conf., </booktitle> <month> Sep. </month> <year> 1994, </year> <pages> pp. 164-169. </pages>
Reference-contexts: For moment computation of a tree of transmission lines, several works first model each transmission line as a large number of uniform lumped RLC segments [PiRo90, SrKa94] and then compute the moments of the resulting RLC tree. However, this approach is usually not efficient nor accurate. Kahng and Muddu <ref> [KaMu94] </ref> showed that using 10 uniform segments to approximate the behavior of a transmission line entails errors in the first and second moments of around 10% and 20%, respectively. In [KaMu94, YuKu95b], the authors improve both accuracy and efficiency by considering non-uniform segmentation of the transmission line. <p> However, this approach is usually not efficient nor accurate. Kahng and Muddu [KaMu94] showed that using 10 uniform segments to approximate the behavior of a transmission line entails errors in the first and second moments of around 10% and 20%, respectively. In <ref> [KaMu94, YuKu95b] </ref>, the authors improve both accuracy and efficiency by considering non-uniform segmentation of the transmission line. Yu and Kuh [YuKu95b] found that for exact moment computation of up to the p-th order, each transmission line 10 should be modeled by b3p=2c non-uniform lumped RLC segments. <p> Yu and Kuh [YuKu95b] found that for exact moment computation of up to the p-th order, each transmission line 10 should be modeled by b3p=2c non-uniform lumped RLC segments. Combining the non-uniform lumped RLC segment model by <ref> [KaMu94, YuKu95b] </ref> with the moment computation algorithm by [YuKu95b], the moments of a transmission line tree interconnect up to the order of p can be computed in O (np 2 ) time, where n is the number of nodes in the tree.
Reference: [KaMu95] <author> A. B. Kahng and S. Muddu, </author> <title> Two-pole Analysis of Interconnection Trees, </title> <booktitle> Proc. IEEE Multi-Chip Module Conf., </booktitle> <month> January </month> <year> 1995, </year> <pages> pp. 105-110. </pages>
Reference-contexts: . 9 Several approaches have been proposed to compute the moments at each node of a lumped RLC tree, where the lumped resistors and lumped inductors are floating from the ground and form a tree, and the lumped capacitors are connected between the nodes on the tree and the ground <ref> [KaMu95, RaPi94, YuKu95b] </ref>. In the following, we present a method proposed by Yu and Kuh [YuKu95b] for moment computation in an RLC tree. Consider a lumped RLC tree with n nodes. Let k be the parent node of node k, and T k be the subtree rooted at node k. <p> This was done in <ref> [KaMu95, KaMu96b, YuKu95b] </ref>. Based on the two-pole methodology, Kahng and Muddu [KaMu96b] derived an analytical delay model for RLC interconnects. Consider a source driving a distributed RLC line with total resistance R L , total inductance L L , and total capacitance C L .
Reference: [KaMu96a] <author> A. B. Kahng and S. Muddu, </author> <title> Efficient Gate Delay Modeling for Large Interconnect Loads, </title> <booktitle> Proc. IEEE Multi-Chip Module Conf., </booktitle> <year> 1996, </year> <pages> pp. 202-207. </pages>
Reference-contexts: Simulation results show that the response waveform obtained using the p-model is very close to the response waveform of the actual interconnect at the gate output [OBSa89]. Kahng and Muddu <ref> [KaMu96a] </ref> further simplify the modeling of the interconnect tree. They equate it to an open-ended RLC line with resistance R L , inductance L L , and capacitance C L which are equal to the total interconnect resistance, inductance, and capacitance, respectively as shown in Figure 5 (b). <p> It was shown that this simple open-ended RLC p model gives gate delay and rise/fall time which are within 25% of SPICE delays <ref> [KaMu96a] </ref>.
Reference: [KaMu96b] <author> A. B. Kahng and S. Muddu, </author> <title> Accurate Analytical Delay Models fo r VLSI Interconnects, </title> <booktitle> IEEE Int. Symposium on Circuits and Systems, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: This was done in <ref> [KaMu95, KaMu96b, YuKu95b] </ref>. Based on the two-pole methodology, Kahng and Muddu [KaMu96b] derived an analytical delay model for RLC interconnects. Consider a source driving a distributed RLC line with total resistance R L , total inductance L L , and total capacitance C L . <p> This was done in [KaMu95, KaMu96b, YuKu95b]. Based on the two-pole methodology, Kahng and Muddu <ref> [KaMu96b] </ref> derived an analytical delay model for RLC interconnects. Consider a source driving a distributed RLC line with total resistance R L , total inductance L L , and total capacitance C L . <p> The load C T at the end of the RLC line is modeled as a capacitive impedance (Z T = 1 sC T ). The transfer function is truncated to be <ref> [KaMu96b] </ref> H (s) 1 + b 1 s + b 2 s 2 ; (15) where b 1 = R d C L + R L C T + 2 b 2 = L + 2 (R L C L ) 2 + L C L C T + L d <p> The authors separately derive the sink delay at the load C T , denoted t T , from the two-pole response depending on the sign of b 2 1 4b 2 <ref> [KaMu96b] </ref>: t T = &gt; &gt; &gt; &gt; &lt; K r q 1 1 4b 2 &gt; 0, i.e., real poles K c 1 m 2 ) 3m 2 if b 2 1 4b 2 &lt; 0, i.e., complex poles K d 2 if b 2 1 4b 2 = 0, <p> 2 ) 3m 2 if b 2 1 4b 2 &lt; 0, i.e., complex poles K d 2 if b 2 1 4b 2 = 0, i.e., double poles where K r , K c , and K d are functions of b 1 and b 2 as described in <ref> [KaMu96b] </ref>. The model is further extended to consider RLC interconnection trees [KaMu96b] and ramp input [KaMM96]. While the methods in [KaMu96b, KaMM96] used only the first two moments, Tutuianu, Dartu, and Pileggi [TuDP96] proposed an explicit RC-circuit delay approximation based on the first three moments of the impulse response. <p> 0, i.e., complex poles K d 2 if b 2 1 4b 2 = 0, i.e., double poles where K r , K c , and K d are functions of b 1 and b 2 as described in <ref> [KaMu96b] </ref>. The model is further extended to consider RLC interconnection trees [KaMu96b] and ramp input [KaMM96]. While the methods in [KaMu96b, KaMM96] used only the first two moments, Tutuianu, Dartu, and Pileggi [TuDP96] proposed an explicit RC-circuit delay approximation based on the first three moments of the impulse response. <p> The model is further extended to consider RLC interconnection trees [KaMu96b] and ramp input [KaMM96]. While the methods in <ref> [KaMu96b, KaMM96] </ref> used only the first two moments, Tutuianu, Dartu, and Pileggi [TuDP96] proposed an explicit RC-circuit delay approximation based on the first three moments of the impulse response. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [KaRo92] <author> A. B. Kahng and G. Robins, </author> <title> A New Class of Iterative Steiner Tree Heuristics with Good Performance, </title> <journal> Trans. on Computer-Aided Design, </journal> <volume> 11(7), </volume> <month> July </month> <year> 1992, </year> <pages> pp. 893-902, </pages>
Reference-contexts: The algorithm obtains an improvement of roughly 9% over MST tree cost on average. 19 While improvement of an MST through edge merging can be effective at minimizing tree length on average, there exist patho-logical cases in which merge-based Steiner heuristics can exhibit the worst case performance <ref> [KaRo92] </ref>. In Figure 9, one such case is shown. For this point set, the tree constructed by any MST algorithm is unique. Traditional merge-based heuristics have relatively little gain, as only the three leftmost edges will be able to merge. The optimal Steiner tree, however, has significantly lower wirelength. <p> The point s is known as a 1-Steiner point. The authors presented an O (n 2 ) method to determine this point for the Euclidean plane. Kahng and Robins <ref> [KaRo92] </ref> adapted this result for the rectilinear metric, and presented the Iterated 1-Steiner heuristic. This algorithm represents our second heuristic class, and constructs a Steiner tree through iterative point insertion. <p> On average, it was shown that 94% of merge moves were optimal, and the trees constructed by the A-Tree algorithm were within 4% of the optimal arboresence length. In experiments on random nets under the 0:5m CMOS IC technology, the A-Tree constructions produced delay improvements approaching 20% over 1-Steiner <ref> [KaRo92] </ref> constructions. 3.2.3 Multiple Source Routing The existence of multiple source nets, such as signal busses, complicates interconnect topology construction, as a topology which provides good performance for one source may perform poorly for another. An example of such an instance is shown in Figure 15. <p> The intersection of these octilinear ellipses gives the set of points that can serve as the root of the tree. the smallest enclosing rectilinear circle is not necessarily the best root point. Tree constructions showed an average of 11.4% reductions in the maximum interconnect delay when compared to 1-Steiner <ref> [KaRo92] </ref> tree constructions. Industrial examples showed as much as a 16% delay reduction. 3.3 Topology Optimization for Delay Minimization While delay was an implied objective in the two previous subsections, the methods discussed there used geometric measures for optimization. <p> If only a single sink is critical, the algorithm is known as SERT-C. The authors used random point sets and 0:8m CMOS IC design parameters to evaluate the performance of their SERT algorithm. On average, improvements of 21% in delay over 1-Steiner <ref> [KaRo92] </ref> constructions were obtained. When compared to the AHHK [AlHK93] algorithm (described in Section 3.2.1, delay improvements of 10% were obtained. The basic SERT method was extended to utilize branch-and-bound optimization, resulting in the Branch-and-Bound Steiner Optimal Routing Tree (BB-SORT) algorithm [BoKM94].
Reference: [KaRo94] <author> A. B. Kahng and G. Robins, </author> <title> On Optimal Interconnections for VLSI, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: We then consider methods designed for the physical model, in which VLSI fabrication parameters and physical delay models influence the net topologies. Many of the early problems and algorithms on interconnect topology optimization surveyed in this section are discussed in depth in <ref> [KaRo94] </ref>, which is highly recommended to the reader who is interested to know more details of the results presented here. 17 3.1 Topology Optimization for Total Wirelength Minimization A problem central to any area of interconnect optimization is the minimization of the wirelength of a net. <p> We will present various works on clock routing based on the following classification: (i) Abstract topology generation, (ii) Embedding of abstract topology, (iii) Planar routing, (iv) Buffer and wire sizing, (v) Non-tree clock routing, and (vi) Clock schedule optimization. Many results in (i)-(iii) were also surveyed in <ref> [KaRo94] </ref>. While we aim to cover all recent works on interconnect design and optimization in high performance clock routing in this section, this is not a comprehensive survey on clock synthesis and we left out some related topics.
Reference: [KaSS90] <author> K. Kawamura, T. Shindo, T. Shibuya, H. Miwatari, and Y. Ohki, </author> <title> Touch and Cross Router, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1990, </year> <pages> pp. 56-59. </pages>
Reference-contexts: The traditional routing technology developed for two routing layers based on channel routers is becoming obsolete, and multi-layer general area routers are needed to handle over-the-cell routing efficiently. Most of existing works on general area routing, such as those in <ref> [LiHT89, KaSS90, DaKJ90, KhCo95] </ref>, were developed for the two-layer routing technology, and they cannot handle gridless routing. Therefore, in order to support the interconnect optimization techniques presented in this paper, one needs to develop efficient algorithms for multi-layer general-area gridless routing.
Reference: [KaTs94a] <author> A. B. Kahng and C.-W. A. Tsao, Planar-DME: </author> <title> Improved Planar Zero-Skew Clock Routing with Minimum Path-length Delay, </title> <booktitle> Proc. European Design Automation Conf., </booktitle> <year> 1994, </year> <pages> pp. 440-445. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing <ref> [ZhDa92, KaTs94a, KaTs94b] </ref>. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. <p> An X-tree is more costly due to overlapping routing when it is realized on a rectilinear plane <ref> [KaTs94a] </ref>. 56 The set of sinks are then ordered by their x- and y-coordinates. <p> The two rules guarantee that the tree produces by the algorithm is planar and has zero pathlength skew and the pathlength delay is minimal. 5.3.2 Planar-DME Clock Routing The key to the Planar-DME algorithm proposed by Kahng and Tsao <ref> [KaTs94a, KaTs94b] </ref> is that a single top-down pass can produce the same output as the two-phase DME algorithm at the expense of computation time under the pathlength delay model. <p> (v) Line through l (p)l (v) l (p) = l (v) 6= c (ms (v)) Line through p 1 p 2 l (p) = l (v) = c (ms (v)) Vertical line through l (p) Kahng and Tsao [KaTs94b] later extended the Planar-DME algorithm from the pathlength delay model in <ref> [KaTs94a] </ref> to the Elmore delay model.
Reference: [KaTs94b] <author> A. B. Kahng and C.-W. A. Tsao, </author> <title> Low-Cost Single-Layer Clock Trees with Exact Zero Elmore Delay Skew, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 213-218. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing <ref> [ZhDa92, KaTs94a, KaTs94b] </ref>. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. <p> The two rules guarantee that the tree produces by the algorithm is planar and has zero pathlength skew and the pathlength delay is minimal. 5.3.2 Planar-DME Clock Routing The key to the Planar-DME algorithm proposed by Kahng and Tsao <ref> [KaTs94a, KaTs94b] </ref> is that a single top-down pass can produce the same output as the two-phase DME algorithm at the expense of computation time under the pathlength delay model. <p> Partitioning Rules Location of p, v Splitting line l (p) 6= l (v) Line through l (p)l (v) l (p) = l (v) 6= c (ms (v)) Line through p 1 p 2 l (p) = l (v) = c (ms (v)) Vertical line through l (p) Kahng and Tsao <ref> [KaTs94b] </ref> later extended the Planar-DME algorithm from the pathlength delay model in [KaTs94a] to the Elmore delay model.
Reference: [KhCo95] <author> K. Y. Khoo and J. Cong, </author> <title> An Efficient Multilayer MCM Router Based on Four-Via Routing, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <month> Oct. </month> <year> 1995, </year> <pages> pp. 1277-1290. </pages>
Reference-contexts: The traditional routing technology developed for two routing layers based on channel routers is becoming obsolete, and multi-layer general area routers are needed to handle over-the-cell routing efficiently. Most of existing works on general area routing, such as those in <ref> [LiHT89, KaSS90, DaKJ90, KhCo95] </ref>, were developed for the two-layer routing technology, and they cannot handle gridless routing. Therefore, in order to support the interconnect optimization techniques presented in this paper, one needs to develop efficient algorithms for multi-layer general-area gridless routing.
Reference: [KhRY93] <author> S. Khuller, B. Raghavachari, and N. Young. </author> <title> Balancing Minimum Spanning Trees and Shortest-Path Trees, </title> <booktitle> Proc. Symp. on Discrete Algorithms, </booktitle> <year> 1993, </year> <pages> pp. 243-250. </pages>
Reference-contexts: An example of tree construction using the BRBC method is shown in Figure 12. Khuller, Raghavachari, and Young <ref> [KhRY93] </ref> developed a method similar to BRBC contemporaneously. Alpert et al.[AlHK93] proposed AHHK trees as a direct trade-off between Prim's MST algorithm and Dijkstra's shortest path tree algorithm. They utilize a parameter 0 c 1 to adjust the preference between tree length and path length.
Reference: [KiSa94] <author> D. A. Kirkpatrick and A. L. Sangiovanni-Vincentelli, </author> <title> Techniques for Crosstalk Avoidance in the Physical Design of High-Performance Digital Systems, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1994, </year> <pages> pp. 616-619. </pages>
Reference-contexts: Again, in order to consider the coupling effect (i.e. crosstalk), one needs to consider the interaction of multiple nets simultaneously. Existing works on crosstalk reduction, including those presented in <ref> [ChOK93, GaLi93, GaLi94, KiSa94, XuKW96] </ref>, focus mainly on proper spacing and wire segment ordering. It is not yet clear how crosstalk will be affected by buffer insertion, device and wire sizing, etc..
Reference: [KrGW95] <author> B. Krauter, R. Gupta, J. Willis, and L. T. Pileggi, </author> <title> Transmission Line Synthesis, </title> <booktitle> Proc. 32nd ACM/IEEE Design Automation Conf., </booktitle> <month> June </month> <year> 1995, </year> <pages> pp. 358-363. 93 </pages>
Reference-contexts: This algorithm also has a computational complexity of O (np 2 ). Higher order moments are extremely useful for circuit analysis. In general, higher order moments can be used to improve the accuracy of delay estimation. For example, Krauter et al. <ref> [KrGW95] </ref> proposed metrics based on the first three central moments, which are the moments of the distribution of the impulse response. From the distribution theory, the second central moment provides a measure of the spread of h (t) and the third central moment measures the skewness of h (t). <p> To compute the 3 The three moments were also used to detect underdamping, determine the conditions of critical damping for series terminated transmission line nets, and estimate the delay of the properly terminated line <ref> [KrGW95] </ref>. 11 second moment exactly, the admittance of off-path subtrees must be calculated correctly up to the coefficient of s 2 . This was done in [KaMu95, KaMu96b, YuKu95b]. Based on the two-pole methodology, Kahng and Muddu [KaMu96b] derived an analytical delay model for RLC interconnects. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96], and central moment formulation <ref> [KrGW95] </ref> have made very good progress in this direction. But much more work need to be done in this area. 2. Performance-driven global routing: Most of existing studies on interconnect design and optimization deal with only a single net for topology and wiresizing optimization.
Reference: [Kr56] <author> J. B. Kruskal, </author> <title> On the Shortest Spanning Subtree of a Graph, </title> <journal> Proc. American Math Society, </journal> <volume> vol. 7, </volume> <year> 1956, </year> <pages> pp. 48-50. </pages>
Reference-contexts: Two classic algorithms solve this problem optimally. Kruskal's algorithm <ref> [Kr56] </ref> begins with a forest of trees (the singleton vertices), and iteratively adds the lowest cost edge which connects two trees in the current forest (forming a new tree), until only a single tree which connects all points in P remains.
Reference: [KuGa82] <author> S. Y. Kung and R. J. Gal-Ezer, </author> <title> Synchronous vs Asynchronous Computation in VLSI Array Processor, </title> <booktitle> Proc. SPIE, </booktitle> <volume> vol. 341, </volume> <month> May </month> <year> 1982, </year> <pages> pp. 53-65. </pages>
Reference-contexts: But, we separate abstract topology generation from embedding since once the abstract topology is given, embedding can be done optimally (under the pathlength delay model) or near-optimally using the algorithms to be described in Section 5.2. 55 5.1.1 Top-Down Topology Generation In an H-tree topology <ref> [FiKu82, KuGa82, WaFr83, DhFW84, BaWM86] </ref>, the basic building block is a regular H-structure. 11 All four corners of the H-structure are equi-distant from the center of the structure. The H-tree algorithm minimizes clock skew by repeating the H-structure recursively top-down as shown in Figure 26.
Reference: [LeSe88] <author> K.-W. Lee and C. Sechen, </author> <title> A New Global Router for Row-Based Layout, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1988, </year> <pages> pp. 180-183. </pages>
Reference-contexts: Also, timing requirements are usually given in terms of path delay constraints. One needs to either develop efficient algorithms to allocate the timing budget to each net along a path or be able to optimize multiple nets on a path simultaneously. Most well-known global routers, such as <ref> [LeSe88, CoPr88, CaCh91] </ref>, did not consider timing optimization during global routing. Existing methods on delay budgeting, such as [NaBH89, Fr92a, TeKS96], were mainly developed for circuit placement and their applicability to global routing is yet to be demonstrated.
Reference: [LeWo80] <author> D. T. Lee and C. K. Wong, </author> <title> Voronoi Diagrams in l 1 (l ) Metrics with 2-Dimensional Storage Applications, </title> <journal> SIAM Journal of Computation, </journal> <volume> vol. 9, No. 1, </volume> <month> February </month> <year> 1980, </year> <pages> pp. 200-211. </pages>
Reference-contexts: Both algorithms construct MSTs with the minimum total cost. For a problem with n vertices, we can construct a Voronoi diagram <ref> [LeWo80] </ref> to constrain the number of edges to be considered by the two algorithms to be linear with n. With this constraint on the number of edges, both algorithms can be made to run in O (nlogn) time. Naive implementations have slightly higher complexity.
Reference: [Li94] <author> W. Li, </author> <title> Strongly NP-hard Discrete Gate-Size Problems, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> vol. 13, No. 8, </volume> <month> Aug. </month> <year> 1994, </year> <pages> pp. 1045-1051. </pages>
Reference-contexts: Li <ref> [Li94] </ref> further showed that the discrete gate sizing problem under both area and maximum delay constraints is strongly NP-hard even for a chain of gates. The methods which are optimal for logic networks of certain structures have been proposed.
Reference: [LiLA92] <author> W. Li, A. Lim, P. Agrawal, and S. Sahni, and R. Kolla, </author> <title> On the Circuit Implementation Problem, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1992, </year> <pages> pp. 478-483. </pages>
Reference-contexts: Furthermore, an exact algorithm to minimize area subject to a maximum delay constraint (single-sided) was presented for series-parallel circuits <ref> [LiLA92] </ref>. A simple series circuit is solved by a dynamic programming method and a simple parallel circuit is solved by a number of transformations. All series-parallel circuits can be solved recursively. <p> A simple series circuit is solved by a dynamic programming method and a simple parallel circuit is solved by a number of transformations. All series-parallel circuits can be solved recursively. Heuristics have been proposed to expand the optimal algorithms for trees or series-parallel circuits to the general cases in <ref> [Ch90, LiLA92] </ref>. Furthermore, the following methods have been developed: Lin, Marek-Sadowska and Kuh [LiMK90] use the weighted sum of sensitivity and criticality to choose cell sizes for standard-cell designs.
Reference: [LiDW93] <author> H. Liao, W. Dai, R. Wang, and F. Y. Chang, </author> <title> S-Parameter Based Macro Model of Distributed-Lumped Networks Using Exponentially Decayed Polynomial Function, </title> <booktitle> Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 726-731. </pages>
Reference-contexts: Note that different segments of wires may have different upper and lower bounds. The Optimal Sizing Method (OSM) proposed by Zhu, Dai, and Xi [ZhDX93] considers distributed RC and lossy transmission line models using a generalized delay macromodel which is based on scattering-parameters of interconnect <ref> [LiDW93] </ref>. Also, it can handle general clock network which may includes loops.
Reference: [LiCL95] <author> J. Lillis, C. K. Cheng and T. T. Y. Lin, </author> <title> Optimal Wire Sizing and Buffer Insertion for Low Power and a Generalized Delay Model, </title> <booktitle> Proc. IEEE Int'l. Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1995, </year> <pages> pp. 138-143. </pages>
Reference-contexts: In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in <ref> [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c] </ref>. <p> have been solved as special cases of the STIS problem, and a smooth area-delay trade-off has been yielded for the transistor sizing problem for circuits implemented by complex gates. 4.3.4 Simultaneous Buffer Insertion and Wire Sizing The polynomial-time dynamic programming algorithm for the buffer insertion problem [va90] was generalized in <ref> [LiCL95] </ref> to handle the simultaneous wiresizing and buffer insertion for both delay and power minimization. The slope effect on the buffer delay was also taken into account. Only the delay minimization feature will be discussed in the following. <p> The increment is proportional to the input waveform transition time. By assuming that the delay increment due to the input slope is proportional to the Elmore delay D prev in the previous stage, <ref> [LiCL95] </ref> further formulated the following buffer (inverter) delay for the downstream capacitance c k . bu f delay s (b; c k ) = bu f delay (b; c k ) + l b D prev where buf delay (b; c k ) equals to D bu f + R bu <p> With this new definition for the option, the number of total options at the source of a routing tree is no longer polynomially bounded in the theoretical sense. However, it was observed in <ref> [LiCL95] </ref> that the run time of the new version is comparable to that of its simpler version assuming step-input to buffers. 4.4 Simultaneous Topology Construction and Sizing All wire and device sizing works presented up to now assume that the topology of interconnects is given, which can be called static sizing. <p> The following techniques are combined to develop a wiresized buffered A-tree (WBA-tree) algorithm: the A-tree algorithm for tree construction [CoLZ93], the simultaneous buffer insertion and wiresizing algorithm <ref> [va90, LiCL95] </ref>, critical path isolation, and a balanced load decomposition used in logic synthesis. <p> Meanwhile, we want to minimize the total wire length, intuitively, we wish that D vw is as large as possible. Note that, when a = 0, it is equivalent to the heuristic move in [CoLZ93]. The option computation and pruning can be carried out in a manner similar to <ref> [va90, LiCL95] </ref> after each merging of T v and T w . Overall, after the bottom-up synthesis procedure to construct tree and compute options, the top-down selection procedure is invoked. <p> In short, during the dynamic program scheme to construct a P-Tree [LiCL96b] (Section 3.3) in a bottom-up manner for a given permutation, a set of options are computed for each subtree as in <ref> [va90, LiCL95] </ref> and the same option pruning rule is applied. 5 High-Performance Clock Routing In layout synthesis, the distribution of clock signals is critical to both the operation and performance of synchronous systems.
Reference: [LiCL96a] <author> J. Lillis, C. K. Cheng and T. T. Y. Lin, </author> <title> Simultaneous Routing and Buffer Insertion for High Performance Interconnect, </title> <booktitle> Proc. the Sixth Great Lakes Symp. on VLSI, </booktitle> <year> 1996. </year>
Reference-contexts: During the back-trace, the buffer positions and wire width of each segments are determined. Similarly, Lillis et al studied the simultaneous tree construction and wiresizing problem [LiCL96b] and the simultaneous tree construction and buffer insertion problem <ref> [LiCL96a] </ref>, respectively. In fact, their method can generalized to handle the simultaneous tree construction, buffer insertion and wiresizing problem as well. <p> Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in [BoOI94, BoKR93, ViMa94, XuKu95b]. Most effective topology optimization for delay reduction is achieved by considering routing tree construction with buffer insertion as discussed in <ref> [OkCo96a, OkCo96b, LiCL96a] </ref>. However, more studies need to be done on how to extend various routing tree construction algorithms to take into consideration of multiple-layer routing with different RC characteristics in each layer, presence of routing obstacles, and routability optimization. 2.
Reference: [LiCL96b] <author> J. Lillis, C. K. Cheng, T. T. Y. Lin, and C. Y. Ho, </author> <title> New Performance Driven Routing Techniques With Explicit Area/Delay Tradeoff and Simultaneous Wire Sizing, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <month> June </month> <year> 1996, </year> <pages> pp. 395-400. </pages>
Reference-contexts: During the back-trace, the buffer positions and wire width of each segments are determined. Similarly, Lillis et al studied the simultaneous tree construction and wiresizing problem <ref> [LiCL96b] </ref> and the simultaneous tree construction and buffer insertion problem [LiCL96a], respectively. In fact, their method can generalized to handle the simultaneous tree construction, buffer insertion and wiresizing problem as well. In short, during the dynamic program scheme to construct a P-Tree [LiCL96b] (Section 3.3) in a bottom-up manner for a <p> studied the simultaneous tree construction and wiresizing problem <ref> [LiCL96b] </ref> and the simultaneous tree construction and buffer insertion problem [LiCL96a], respectively. In fact, their method can generalized to handle the simultaneous tree construction, buffer insertion and wiresizing problem as well. In short, during the dynamic program scheme to construct a P-Tree [LiCL96b] (Section 3.3) in a bottom-up manner for a given permutation, a set of options are computed for each subtree as in [va90, LiCL95] and the same option pruning rule is applied. 5 High-Performance Clock Routing In layout synthesis, the distribution of clock signals is critical to both the operation and <p> Interconnect topology optimization: We feel that geometric based Steiner tree algorithms such as the A-tree [CoLZ93], Alphabetic Tree [ViMa94], P-Tree <ref> [LiCL96b] </ref> algorithms usually provide a good initial routing topology. These algorithms use the right level of abstraction and can be incorporated in a global router efficiently. Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in [BoOI94, BoKR93, ViMa94, XuKu95b].
Reference: [LiCW93] <author> A. Lim, S.-W. Cheng, and C.-T. Wu. </author> <title> Performance Oriented Rectilinear Steiner Trees, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 171-175. </pages>
Reference-contexts: They conjectured that the cost ratio may be bounded when the problem is embedded in a rectilinear plane. Most of the algorithms presented in this subsection so far are focused on bounded radius spanning tree construction, and do take advantage of Steiner point generation. In <ref> [LiCW93] </ref>, Lim, Cheng, and Wu proposed Performance Oriented Rectilinear Steiner Trees for the interconnect optimization problem. Their heuristic method attempts to minimize total tree length while satisfying distance constraints between the net driver and various sink nodes.
Reference: [LiHT89] <author> Y.-L. Lin, Y.-C. Hsu, and F.-S. Tsai, SILK: </author> <title> A Simulated Evolution Router, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 8(10), </volume> <month> Oct. </month> <year> 1989, </year> <pages> pp. 1108-1114. </pages>
Reference-contexts: The traditional routing technology developed for two routing layers based on channel routers is becoming obsolete, and multi-layer general area routers are needed to handle over-the-cell routing efficiently. Most of existing works on general area routing, such as those in <ref> [LiHT89, KaSS90, DaKJ90, KhCo95] </ref>, were developed for the two-layer routing technology, and they cannot handle gridless routing. Therefore, in order to support the interconnect optimization techniques presented in this paper, one needs to develop efficient algorithms for multi-layer general-area gridless routing.
Reference: [LiLi75] <author> H. C. Lin, L. W. Linholm, </author> <title> An Optimized Output Stage for MOS Integrated Circuits, </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> SC-10(2), </volume> <year> 1975, </year> <pages> pp. 106-109. </pages>
Reference-contexts: The 0-th stage is a small, often minimum size, driver, and the driver size increases until the last stage is large enough to drive the heavy loading capacitance (see Figure 19). An early result on the optimal driver sizing problem was reported in <ref> [LiLi75] </ref>. Let D i be the driver of the i-th stage, and C i and R i be its input gate capacitance and effective driver resistance, respectively. <p> They show that f 0 = e 2 + 2g C 0 and f i = f 0 (1 + g) i are the optimal stage ratios for delay minimization. We would like to point out that all studies in <ref> [LiLi75, HeJe87, ZhLi96] </ref> also discussed the optimal driver sizing for power minimization.
Reference: [LiMK90] <author> S. Lin, M. Marek-Sadowska, and E. S. Kuh, </author> <title> Delay and Area Optimization in Standard-cell Design, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 349-352. 94 </pages>
Reference-contexts: All series-parallel circuits can be solved recursively. Heuristics have been proposed to expand the optimal algorithms for trees or series-parallel circuits to the general cases in [Ch90, LiLA92]. Furthermore, the following methods have been developed: Lin, Marek-Sadowska and Kuh <ref> [LiMK90] </ref> use the weighted sum of sensitivity and criticality to choose cell sizes for standard-cell designs. The sensitivity of a cell is defined as Ddelay Darea , where both delay and area are in terms of the cell.
Reference: [LiWo94] <author> S. Lin and C. K. Wong, </author> <title> Process-Variation-Tolerant Clock Skew Minimization, </title> <booktitle> Proc. Int'l Conf. on Computer--Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 284-288. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation <ref> [PuMO93, ChCh94, LiWo94, XiDa95] </ref>, and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> In the following, we discuss a heuristic proposed by Lin and Wong <ref> [LiWo94] </ref> to construct a non-tree clock net. In [LiWo94], instead of binary-merging as in the DME approach, multiple-merge is considered to merge multiple pins at one time to form a rooted zero skew non-tree subrouting. <p> In the following, we discuss a heuristic proposed by Lin and Wong <ref> [LiWo94] </ref> to construct a non-tree clock net. In [LiWo94], instead of binary-merging as in the DME approach, multiple-merge is considered to merge multiple pins at one time to form a rooted zero skew non-tree subrouting. <p> Compared to the routing solution [Ts91] for a industry floating point unit, the non-tree routing algorithm by <ref> [LiWo94] </ref> reported better worst case skew under process variations. 5.6 Clock Schedule Optimization So far, we have presented research works that addressed the problem of constructing a clock routing tree T such that skew (T ) = max i; j jt i t j j B. <p> However, they did not give a specific routing algorithm to embed the abstract topology. Seki et al. [SeIK94] proposed a clock router that can accomplish specified delay using multiple routing layers. Very similar to the center tree routing step in the non-tree clock routing algorithm proposed by <ref> [LiWo94] </ref>, it uses a center trunk and routes from branching point on the trunk to sinks with snaking where necessary. A more recent work by Xi and Dai [XiDa96] considers clock schedule optimization with clock tree construction and gate sizing.
Reference: [Ma86] <author> D. P. Marple, </author> <title> Transistor Size Optimization of Digital VLSI Circuits, </title> <type> Tech. Rep. </type> <institution> CSL-TR-86-308, Stanford Univ., </institution> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: Mathematical Programming Based Transistor Sizing Note that the method in [FiDu85] does not guarantee the optimality of the result. Studies have been done to formulate the transistor sizing problem as mathematical programming problems to obtain an optimal solution. Methods in <ref> [Ci87, He87, Ma86] </ref> formulate the transistor sizing problem as nonlinear programs and solve them by the method of Lagrangian multipliers. Methods in [DaAs89, HeFi91, ChKa91] apply the following two-step iterations.
Reference: [Ma63] <author> D. W. Marquardt, </author> <title> An Algorithm for Least-Squares Estimation of Nonlinear Parameters, </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> vol. 11, </volume> <year> 1963, </year> <pages> pp. 431-441. </pages>
Reference-contexts: The least-squares estimation problem aims to assign widths to the m wires in the general network such that the sum of squares of error f (w 1 ; w 2 ; :::; w m ) = n i is minimized. The OSM uses the Gauss-Marquardt's method <ref> [Ma63] </ref> to solve the optimization problem. The Gauss-Marquardt's method takes an initial wire width assignment, W i and compute a new wire width assignment W i+1 based on a n fi m delay sensitivity matrix for a clock tree/mesh of n sinks and m edges.
Reference: [Ma93] <author> A. Martinez, </author> <title> Timing Model Accuracy Issues and Automated Library Characterization, </title> <journal> IFIP Transactions A (Computer Science and Technology), </journal> <volume> vol. A-22, </volume> <year> 1993, </year> <pages> pp. 413-426. </pages>
Reference: [MeCo93] <author> C. Mead and L. Conway, </author> <title> Introduction to VLSI Systems, </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: It is minimized when f ln ( f ) is minimum, which leads to f = e, the base of natural logarithms. This is the well known optimal stage ratio for delay minimization presented in most textbooks (such as <ref> [MeCo93] </ref>). The output capacitance of a driver is not considered in the above derivation. In [HeJe87], a more accurate analytical delay formula was developed with consideration of the input waveform slope and the output capacitance of the driver.
Reference: [MeBP95] <author> N. Menezes, R. Baldick, and L. T. Pileggi, </author> <title> A Sequential Quadratic Programming Approach to Concurrent Gate and Wire Sizing, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1995, </year> <pages> pp. 144-151. </pages>
Reference-contexts: In some previous works <ref> [PiRo90, MeBP95, Pi95] </ref>, a variant of the moment definition m i = (1) i i! 0 t i h (t)dt was used. <p> In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in <ref> [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c] </ref>. <p> However, both [CoKo94, CoKL96] do not consider the waveform slope effect during the computation of the optimal driver/buffer sizes. 4.3.2 Simultaneous Gate and Wire Sizing Recently, Menezes et al. <ref> [MePP95, MeBP95] </ref> studied the simultaneous gate and wire sizing problem for different objectives: to achieve the target delays in [MePP95], and to find the minimal-area solution to satisfy the performance requirement in [MeBP95]. A. <p> during the computation of the optimal driver/buffer sizes. 4.3.2 Simultaneous Gate and Wire Sizing Recently, Menezes et al. [MePP95, MeBP95] studied the simultaneous gate and wire sizing problem for different objectives: to achieve the target delays in [MePP95], and to find the minimal-area solution to satisfy the performance requirement in <ref> [MeBP95] </ref>. A. Simultaneous Gate and Wire Sizing to Achieve Target Delay The algorithm in [MePP95] is the extension of the moment fitting method for wiresizing [MePD94] (Section 4.2.2.C) to the simultaneous gate and wire sizing problem. <p> The trade-off between the area and the delay reduction was shown as well. B. Simultaneous Gate and Wire Sizing to Satisfy Performance Requirement The simultaneous gate and wire sizing approach <ref> [MeBP95] </ref> is aimed at finding the minimal-area solution to satisfy the performance requirement. First, the driver is modeled by a fixed resistance driven by a step waveform and the delay of the interconnect tree is modeled by the Elmore delay model. <p> The initial device and interconnect sizing solutions can be computed using a simple switch-level driver model and Elmore delay model as in [FiDu85, CoLe95, CoKo94] and then more accurate driver and interconnect models, such as those used in <ref> [MePP95, MeBP95] </ref> can be applied to further refine the solution for performance and area optimization. 3. Clock routing: Various interconnect optimization techniques presented in this paper have most significant impact on clock routing due to the extremely large size of clock nets.
Reference: [MePD94] <author> N. Menezes, S. Pullela, F. Dartu and L. T. Pillage, </author> <title> RC Interconnect Synthesis A Moment Fitting Approach, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 418-425. </pages>
Reference-contexts: Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). Later on, single-source wire-sizing algorithms were presented in [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] using the Elmore delay model, in <ref> [MePD94] </ref> using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c]. <p> We will present first the wire-sizing work [Sa94] to minimize the maximum delay in Subsection 4.2.2.A, where the Elmore delay model is used, then the wire-sizing work <ref> [MePD94] </ref> to achieve the target delay in Subsection 4.2.2.B, where a higher-order RC delay model is used, and finally the wire-sizing work [XuKY96] to minimize the maximum delay for a tree of transmission lines in Subsection 4.2.2.C, where a lossy transmission line model is used. <p> On the other hand, in order to achieve the target delay or handle MCM designs, more accurate delay models are required as in <ref> [MePD94, XuKY96] </ref>. Furthermore, several iterations of the procedures to minimize the weighted delay can be used to minimize the maximum delay or achieve the target delay by adjusting the weight penalty assignment in practice. <p> Note that both algorithms in [Sa94] and [SaSa94] produce wire-sizing solutions assuming continuous wire width choices, and then map them into the discrete wire widths. The optimality of the wire-sizing solution may be lost after mapping. B. Single-Source RC Tree under Higher-Order RC Delay Model In <ref> [MePD94] </ref>, a moment fitting approach is used to wiresize RC interconnect trees to achieve the target delays and slopes at critical sinks. <p> The approach is extended in [MePP95] to conduct simultaneous gate and interconnect sizing, which will be presented in Section 4.3. Note that the algorithm in <ref> [MePD94] </ref>, similar to [Sa94, SaSa94], assumes continuous wire width choices for their wire-sizing solutions. C. <p> A. Simultaneous Gate and Wire Sizing to Achieve Target Delay The algorithm in [MePP95] is the extension of the moment fitting method for wiresizing <ref> [MePD94] </ref> (Section 4.2.2.C) to the simultaneous gate and wire sizing problem. <p> A higher-order RC delay model is used for the interconnect tree as in <ref> [MePD94] </ref>. Meanwhile, all transistors in a gate are assumed to scale by the same factor, which allows that a gate can be described by its width w g .
Reference: [MePP93] <author> N. Menezes, A. Balivada, S. Pullela, and L. T. Pillage, </author> <title> Skew Reduction in Clock Trees Using Wire Width Optimization, </title> <booktitle> Proc. IEEE Custom Integrated Circuits Conf., </booktitle> <year> 1993, </year> <pages> pp. </pages> <month> 9.6.1-9.6.4. </month>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay <ref> [PuMO93, Ed93b, MePP93, PuMP93] </ref>, skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95].
Reference: [MePP95] <author> N. Menezes, S. Pullela, and L. T. Pileggi, </author> <title> Simultaneous Gate and Interconnect Sizing for Circuit-Level Delay Optimization, </title> <booktitle> Proc. 32nd ACM/IEEE Design Automation Conf., </booktitle> <month> June </month> <year> 1995, </year> <pages> pp. 690-695. </pages>
Reference-contexts: In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in <ref> [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c] </ref>. <p> Moreover, the delay sensitivity with respect to the driver area is also computed and compared with the delay sensitivity with respect to the interconnect area to empirically determine whether a larger driver should be used. The approach is extended in <ref> [MePP95] </ref> to conduct simultaneous gate and interconnect sizing, which will be presented in Section 4.3. Note that the algorithm in [MePD94], similar to [Sa94, SaSa94], assumes continuous wire width choices for their wire-sizing solutions. C. <p> However, both [CoKo94, CoKL96] do not consider the waveform slope effect during the computation of the optimal driver/buffer sizes. 4.3.2 Simultaneous Gate and Wire Sizing Recently, Menezes et al. <ref> [MePP95, MeBP95] </ref> studied the simultaneous gate and wire sizing problem for different objectives: to achieve the target delays in [MePP95], and to find the minimal-area solution to satisfy the performance requirement in [MeBP95]. A. <p> However, both [CoKo94, CoKL96] do not consider the waveform slope effect during the computation of the optimal driver/buffer sizes. 4.3.2 Simultaneous Gate and Wire Sizing Recently, Menezes et al. [MePP95, MeBP95] studied the simultaneous gate and wire sizing problem for different objectives: to achieve the target delays in <ref> [MePP95] </ref>, and to find the minimal-area solution to satisfy the performance requirement in [MeBP95]. A. Simultaneous Gate and Wire Sizing to Achieve Target Delay The algorithm in [MePP95] is the extension of the moment fitting method for wiresizing [MePD94] (Section 4.2.2.C) to the simultaneous gate and wire sizing problem. <p> Recently, Menezes et al. [MePP95, MeBP95] studied the simultaneous gate and wire sizing problem for different objectives: to achieve the target delays in <ref> [MePP95] </ref>, and to find the minimal-area solution to satisfy the performance requirement in [MeBP95]. A. Simultaneous Gate and Wire Sizing to Achieve Target Delay The algorithm in [MePP95] is the extension of the moment fitting method for wiresizing [MePD94] (Section 4.2.2.C) to the simultaneous gate and wire sizing problem. <p> Furthermore, the algorithm in <ref> [MePP95] </ref> handles a path, which contains cascaded stages. It is also based on the sensitivity guided moment-fitting method. <p> The initial device and interconnect sizing solutions can be computed using a simple switch-level driver model and Elmore delay model as in [FiDu85, CoLe95, CoKo94] and then more accurate driver and interconnect models, such as those used in <ref> [MePP95, MeBP95] </ref> can be applied to further refine the solution for performance and area optimization. 3. Clock routing: Various interconnect optimization techniques presented in this paper have most significant impact on clock routing due to the extremely large size of clock nets.
Reference: [Mi90] <author> M. Minoux, </author> <title> Efficient Greedy Heuristics for Steiner Tree Problems Using Reoptimization and Supermodularity, </title> <journal> INFOR, </journal> <volume> 28(3), </volume> <month> Aug. </month> <year> 1990, </year> <pages> pp. 221-233. </pages>
Reference-contexts: At each step, a 1-Steiner point is added to the point set, until no Steiner point can be found to reduce the MST length. The algorithm is explained in Figure 10. The same method was proposed for general graphs earlier <ref> [Mi90] </ref>. until no further improvement can be found. The 1-Steiner algorithm has very good performance in terms of wirelength minimization; on random point sets, the trees 20 generated by this algorithm are 11% shorter than MSTs on average.
Reference: [Na75] <author> L. W. Nagel, </author> <title> SPICE2: A Computer Program to Simulate Semiconductor Circuits, </title> <type> Technical Report ERL-M520, </type> <institution> UC-Berkeley, </institution> <month> May </month> <year> 1975. </year>
Reference-contexts: Although the Elmore delay model is not accurate, it has a high degree of fidelity: an optimal or near-optimal solution according to the estimator is also nearly optimal according to actual (SPICE-computed <ref> [Na75] </ref>) delay for routing constructions [BoKM93] and wiresizing optimization [CoHe96a]. Simulations by [CoKK95] also showed that the clock skew under the Elmore delay model has a high correlation with the actual (SPICE) skew. The same study also reported a poor correlation between the pathlength skew and the actual skew. <p> k 2 C L ) t t + k 3 C 3 t f = (k 0 2 C L ) t t + k 0 L + k 0 5 ; (19) where k 15 and k 0 15 are determined based on detailed circuit simulation (e.g. using SPICE <ref> [Na75] </ref>) and linear regression or least square fits. Similar k-factor equations can be obtained for the delay and rise time of the rising output transition. More generally, a look-up table can be used to characterize the delay of each type of gate.
Reference: [NaBH89] <author> R. Nair, L. Berman, P. S. Hauge, and E. J. Yoffa, </author> <title> Generation of Performance Constraints for Layout, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 8(8), </volume> <year> 1989, </year> <pages> pp. 860-874. </pages>
Reference-contexts: Most well-known global routers, such as [LeSe88, CoPr88, CaCh91], did not consider timing optimization during global routing. Existing methods on delay budgeting, such as <ref> [NaBH89, Fr92a, TeKS96] </ref>, were mainly developed for circuit placement and their applicability to global routing is yet to be demonstrated.
Reference: [NeFr93] <author> J. L. Neves and E. G. Friedman, </author> <title> Topological Design of Clock Distribution Networks Based on Non-Zero Clock Skew Specifications, </title> <booktitle> Proc of 36th Midwest Symp. on Circuits and Systems, </booktitle> <month> Aug. </month> <year> 1993, </year> <pages> pp. 468-471. </pages>
Reference-contexts: Two-level clock routing with the upper level routing in multichip module substrate has also been studied [ZhXDS94]. In addition, there are studies that target hierarchical data path design (instead of flat logic design) <ref> [NeFr93, NeFr94, NeFr95] </ref> and consider retiming [Fr92b, SoFr94, SoFM95] using skew information. Interested reader may also refer to [Fr95] for a survey on different aspects of clock synthesis. 5.1 Abstract Topology Generation There are generally two approaches in generating the abstract topology: Top-down and bottom-up. <p> Registers may be removed or inserted as long the circuit still operates correctly. A related problem on clock schedule optimization is to construct a clock tree that satisfies the clock schedule. Given a clock schedule, Neves and Friedman <ref> [NeFr93, NeFr94, NeFr95] </ref> construct an (abstract) topology of the clock distribution network and determine the delay values at each branch of the clock network. Their works are mainly targeted for hierarchical data path design [NeFr93, NeFr94, NeFr95]. <p> Given a clock schedule, Neves and Friedman <ref> [NeFr93, NeFr94, NeFr95] </ref> construct an (abstract) topology of the clock distribution network and determine the delay values at each branch of the clock network. Their works are mainly targeted for hierarchical data path design [NeFr93, NeFr94, NeFr95]. However, they did not give a specific routing algorithm to embed the abstract topology. Seki et al. [SeIK94] proposed a clock router that can accomplish specified delay using multiple routing layers.
Reference: [NeFr94] <author> J. L. Neves and E. G. Friedman, </author> <title> Circuit Synthesis of Clock Distribution Networks Based on Non-Zero Clock Skew, </title> <booktitle> Proc of IEEE Int'l Symp. on circuits and Systems, </booktitle> <month> June </month> <year> 1994, </year> <pages> pp. </pages> <month> 4.175-4.178. </month>
Reference-contexts: Two-level clock routing with the upper level routing in multichip module substrate has also been studied [ZhXDS94]. In addition, there are studies that target hierarchical data path design (instead of flat logic design) <ref> [NeFr93, NeFr94, NeFr95] </ref> and consider retiming [Fr92b, SoFr94, SoFM95] using skew information. Interested reader may also refer to [Fr95] for a survey on different aspects of clock synthesis. 5.1 Abstract Topology Generation There are generally two approaches in generating the abstract topology: Top-down and bottom-up. <p> Registers may be removed or inserted as long the circuit still operates correctly. A related problem on clock schedule optimization is to construct a clock tree that satisfies the clock schedule. Given a clock schedule, Neves and Friedman <ref> [NeFr93, NeFr94, NeFr95] </ref> construct an (abstract) topology of the clock distribution network and determine the delay values at each branch of the clock network. Their works are mainly targeted for hierarchical data path design [NeFr93, NeFr94, NeFr95]. <p> Given a clock schedule, Neves and Friedman <ref> [NeFr93, NeFr94, NeFr95] </ref> construct an (abstract) topology of the clock distribution network and determine the delay values at each branch of the clock network. Their works are mainly targeted for hierarchical data path design [NeFr93, NeFr94, NeFr95]. However, they did not give a specific routing algorithm to embed the abstract topology. Seki et al. [SeIK94] proposed a clock router that can accomplish specified delay using multiple routing layers.
Reference: [NeFr95] <author> J. L. Neves and E. G. Friedman, </author> <title> Minimizing Power Dissipation in Non-Zero Skew-based Clock Distribution Networks, </title> <booktitle> Proc of IEEE Int'l Symp. on Circuits and Systems, </booktitle> <month> Apr. </month> <year> 1995, </year> <pages> pp. </pages> <month> 3.1577-3.1579. </month>
Reference-contexts: Two-level clock routing with the upper level routing in multichip module substrate has also been studied [ZhXDS94]. In addition, there are studies that target hierarchical data path design (instead of flat logic design) <ref> [NeFr93, NeFr94, NeFr95] </ref> and consider retiming [Fr92b, SoFr94, SoFM95] using skew information. Interested reader may also refer to [Fr95] for a survey on different aspects of clock synthesis. 5.1 Abstract Topology Generation There are generally two approaches in generating the abstract topology: Top-down and bottom-up. <p> Registers may be removed or inserted as long the circuit still operates correctly. A related problem on clock schedule optimization is to construct a clock tree that satisfies the clock schedule. Given a clock schedule, Neves and Friedman <ref> [NeFr93, NeFr94, NeFr95] </ref> construct an (abstract) topology of the clock distribution network and determine the delay values at each branch of the clock network. Their works are mainly targeted for hierarchical data path design [NeFr93, NeFr94, NeFr95]. <p> Given a clock schedule, Neves and Friedman <ref> [NeFr93, NeFr94, NeFr95] </ref> construct an (abstract) topology of the clock distribution network and determine the delay values at each branch of the clock network. Their works are mainly targeted for hierarchical data path design [NeFr93, NeFr94, NeFr95]. However, they did not give a specific routing algorithm to embed the abstract topology. Seki et al. [SeIK94] proposed a clock router that can accomplish specified delay using multiple routing layers.
Reference: [OkCo96a] <author> T. Okamoto and J. Cong, </author> <title> Interconnect Layout Optimization by Simultaneous Steiner Tree Construction and Buffer Insertion, </title> <booktitle> Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <month> April. </month> <year> 1996, </year> <pages> pp. 1-6. 95 </pages>
Reference-contexts: Let T i be subtree rooted in node i, the following basic steps are iterated in the bottom-up synthesis procedure. 10 An early version of this work considers only simultaneous topology construction and buffer insertion <ref> [OkCo96a] </ref>. 52 * Select v and w with considering critical path isolation and balanced load decomposition. * Merge T v and T w to T r , and compute a set of options at r. <p> Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in [BoOI94, BoKR93, ViMa94, XuKu95b]. Most effective topology optimization for delay reduction is achieved by considering routing tree construction with buffer insertion as discussed in <ref> [OkCo96a, OkCo96b, LiCL96a] </ref>. However, more studies need to be done on how to extend various routing tree construction algorithms to take into consideration of multiple-layer routing with different RC characteristics in each layer, presence of routing obstacles, and routability optimization. 2.
Reference: [OkCo96b] <author> T. Okamoto and J. Cong, </author> <title> Buffered Steiner Tree Construction with Wire Sizing for Interconnect Layout Opti--mization, </title> <booktitle> to appear in Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Because the sink with the maximum delay also has the maximum skew, minimization of the maximum delay also minimizes the maximum skew. 4.4.2 Simultaneous Tree Construction, Buffer Insertion and Wiresizing Most recently, Okamoto and Cong <ref> [OkCo96b] </ref> study the simultaneous tree construction, buffer insertion and wiresizing problem 10 . <p> Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in [BoOI94, BoKR93, ViMa94, XuKu95b]. Most effective topology optimization for delay reduction is achieved by considering routing tree construction with buffer insertion as discussed in <ref> [OkCo96a, OkCo96b, LiCL96a] </ref>. However, more studies need to be done on how to extend various routing tree construction algorithms to take into consideration of multiple-layer routing with different RC characteristics in each layer, presence of routing obstacles, and routability optimization. 2.
Reference: [OBSa89] <author> P. R. O'Brien and T. L. Savarino, </author> <title> Modeling the Driving-Point Characteristic of Resistive Interconnect for Accurate Delay Estimation, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1989, </year> <pages> pp. 512-515. </pages>
Reference-contexts: Qian, Pullela, and Pileggi [QiPP94] proposed the effective capacitance model which first uses a p-model <ref> [OBSa89] </ref> to be discussed next (Figure 4 (c)) to better approximate the driving point admittance at the root of the interconnect (or equivalently, the output of the driver), and then compute iteratively the effective capacitance seen by the driver, denoted C e f f , using the k-factor equations. In [OBSa89], <p> <ref> [OBSa89] </ref> to be discussed next (Figure 4 (c)) to better approximate the driving point admittance at the root of the interconnect (or equivalently, the output of the driver), and then compute iteratively the effective capacitance seen by the driver, denoted C e f f , using the k-factor equations. In [OBSa89], O'Brien and Savarino construct the p-model load of an interconnect using the first three moments y 1 , y 2 and 14 p-model of the driving point admittance for the net in (a). (d) The same inverter driving the effective capacitance of the net in (a). <p> Simulation results show that the response waveform obtained using the p-model is very close to the response waveform of the actual interconnect at the gate output <ref> [OBSa89] </ref>. Kahng and Muddu [KaMu96a] further simplify the modeling of the interconnect tree.
Reference: [OhPP96] <author> J. Oh, I. Pyo and M. Pedram, </author> <title> Constructing Lower and Upper Bounded Delay Routing Trees Using Linear Programming, </title> <booktitle> Proc. 33rd Design Automation Conf., </booktitle> <year> 1996, </year> <pages> pp. 401-404. </pages>
Reference-contexts: R 1 is also the merging region obtained by BME when mr (x) merges with s 3 . Note that it is smaller than R 3 . skew bound is large. A very recent work by Oh, Pyo, and Pedram <ref> [OhPP96] </ref> can construct an optimal minimum-cost bounded delay routing for a given topology using linear programming under the pathlength delay model. The bounded delay routing tree satisfies the upper and lower bound delay constraints imposed by the designer. Clearly, the bounded delay routing tree is also a bounded-skew tree. <p> It is difficult to choose a good combination of upper and lower bounds for a specific allowed skew bound. The authors also noted that the approach cannot be extended to handle Elmore delay easily <ref> [OhPP96] </ref>. 5.2.3 Topology Generation with Embedding Since DME requires an input topology, several works [BoKa92, ChHH92a, Ed92] have thus studied topology constructions that lead to low-cost routing solutions when DME is applied. These methods interleave topology construction with merging segment computation using DME.
Reference: [Ou84] <author> J. K. Ousterhout, </author> <title> Switch-Level Delay Models for Digital MOS VLSI, </title> <booktitle> Proc. 21st Design Automation Conf., </booktitle> <year> 1984, </year> <pages> pp. 542-548. </pages>
Reference-contexts: In the slope model (first proposed by Pilling and Skalnik [PiSk72]), a one-dimensional table for the effective driver resistance based on the concept of rise-time ratio is proposed by Ousterhout <ref> [Ou84] </ref>. The effective resistance of a driver depends on the transition time of the input signal, the loading capacitance, and the size of the driver.
Reference: [Po78] <author> M. J. D. Powell, </author> <title> A Fast Algorithm for Nonlinear Constrained Optimization Calculations, </title> <booktitle> Lecture Notes in Mathematics, </booktitle> <volume> no. 630, </volume> <editor> ed. G. A. Watson, </editor> <publisher> Springer Verlag, </publisher> <year> 1978, </year> <pages> pp. 144-157. </pages>
Reference-contexts: delay models, the authors study the optimization problems whose objective functions have the following form: f (X) = m q=0 n j=1; j6=i x i q where a pi (x i ) 0 and b q j (x j ) 0 0 &lt; L X U (31) 9 According to <ref> [Po78] </ref>, the SQP method reduces the nonlinear optimization to a sequence of quadratic programming (QP) subproblems. At each iteration, a QP subproblem is constructed from a quadratic linearization of both the objective function and the constraints about the solution from the previous iteration.
Reference: [Pi95] <author> L. Pileggi, </author> <title> Coping with RC(L) Interconnect Design Headaches, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1995, </year> <pages> pp. 246-253. </pages>
Reference-contexts: Although our discussion will center around RC interconnect, some of the models are not restricted to RC interconnect. For a more comprehensive list of references on RLC interconnect, the interested reader may refer to <ref> [Pi95] </ref>. 6 In the lumped RC model, R refers to the resistance of the driver and C refers to the sum of the total capacitance of the interconnect and the total gate capacitance of the sinks. The model assumes that wire resistance is negligible. <p> In some previous works <ref> [PiRo90, MeBP95, Pi95] </ref>, a variant of the moment definition m i = (1) i i! 0 t i h (t)dt was used.
Reference: [PiRo90] <author> L. T. Pillage and R. A. Rohrer, </author> <title> Asymptotic Waveform Evaluation for Timing Analysis, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 9(4), </volume> <month> Apr. </month> <year> 1990, </year> <pages> pp. 352-366. </pages>
Reference-contexts: In some previous works <ref> [PiRo90, MeBP95, Pi95] </ref>, a variant of the moment definition m i = (1) i i! 0 t i h (t)dt was used. <p> Therefore, the moments up to the p-th order of an RLC tree can be computed in O (np) time. For moment computation of a tree of transmission lines, several works first model each transmission line as a large number of uniform lumped RLC segments <ref> [PiRo90, SrKa94] </ref> and then compute the moments of the resulting RLC tree. However, this approach is usually not efficient nor accurate. <p> An inherent shortcoming of the Elmore delay model and other simpler delay models is that they cannot handle the inductance effect. The Asymptotic Waveform Evaluation (AWE) method proposed by Pillage and Rohrer <ref> [PiRo90] </ref> is an efficient technique to use higher order moments in interconnect timing analysis which can handle the inductance effect. <p> time domain impulse response is h (t) = k i e : (14) The poles and residues in H (s) can be determined uniquely by matching the initial boundary conditions, denoted m 1 , and the first 2q 1 moments m i of H (s) to those of H (s) <ref> [PiRo90] </ref>. The choice of order q depends on the accuracy required but is always much less than the order of the circuit. In practice, q 5 is commonly used. When q is chosen to be two, it is known as the two-pole model [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94]. <p> For each transfer function, the first four target moments are obtained. Then, the first four real moments are computed for 45 each sink based on the recursive method developed in <ref> [PiRo90] </ref>, which computes the higher moments from the lower moments, and a O (MN 2 ) method is proposed to compute the sensitivities with respect to the wire widths for real moments, where M is the number of critical sinks and N the number of wire segments.
Reference: [PiSk72] <author> D. J. Pilling and J. G. Skalnik, </author> <title> A Circuit Model for Predicting Transient Delays in LSI Logic Systems, </title> <booktitle> Proc. 6th Asilomar Conf. on Circuits and Systems, </booktitle> <year> 1972, </year> <pages> pp. 424-428. </pages>
Reference-contexts: In the slope model (first proposed by Pilling and Skalnik <ref> [PiSk72] </ref>), a one-dimensional table for the effective driver resistance based on the concept of rise-time ratio is proposed by Ousterhout [Ou84]. The effective resistance of a driver depends on the transition time of the input signal, the loading capacitance, and the size of the driver.
Reference: [PrKu90] <author> S. Prasitjutrakul and W. J. Kubitz, </author> <title> A Timing-Driven Global Router for Custom Chip Design, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1990, </year> <pages> pp. 48-51. </pages>
Reference-contexts: Geometric objectives are in general more tractable than physical delay models, but can be inaccurate measures for signal delay. In this subsection, we discuss a number of methods which employ more accurate physical delay models to guide optimization. Prasitjutrakul and Kubitz <ref> [PrKu90] </ref> presented an early method as part of their timing-driven global router. As this method was a part of their global router, they utilized global delay constraints in their optimization. Individual sink pins had unique delay requirements, resulting in differing required arrival times for signals (and differing slack values).
Reference: [Pr57] <author> R. C. Prim, </author> <title> Shortest Connecting Networks, </title> <journal> Bell System Technical Journal, </journal> <volume> vol. 31, </volume> <year> 1957, </year> <pages> pp. 1398-1401. </pages>
Reference-contexts: Kruskal's algorithm [Kr56] begins with a forest of trees (the singleton vertices), and iteratively adds the lowest cost edge which connects two trees in the current forest (forming a new tree), until only a single tree which connects all points in P remains. Prim's algorithm <ref> [Pr57] </ref> starts with an arbitrary node as the root of a partial tree, and grows the partial tree by iteratively adding an unconnected vertex to it using the lowest cost edge, until no unconnected vertex remains. Both algorithms construct MSTs with the minimum total cost.
Reference: [PuMO93] <author> S. Pullela, N. Menezes, J. Omar and L. Pillage, </author> <title> Skew and Delay Optimization for Reliable Buffered Clock Trees, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 556-562. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay <ref> [PuMO93, Ed93b, MePP93, PuMP93] </ref>, skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation <ref> [PuMO93, ChCh94, LiWo94, XiDa95] </ref>, and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation <ref> [PuMO93, ViMa95] </ref>. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> The reduction in the worst case skews is in the range of 87X to 144X [ChCh94]. The SSM algorithm also achieves 2X to 11X reduction 79 in clock delay. Pullela et al. <ref> [PuMO93] </ref> also proposed a buffer insertion/sizing and wire sizing algorithm for a tree of l levels. Based on the most critical resources to be optimized, the algorithm first estimate the number of buffer levels, denoted b. <p> The smallest buffer size that satisfies the constraint Dskew b B b is chosen. Simulation results show that delay reduction is achieved, with up to 25X reduction for large circuits when compared to the wiresized clock trees constructed in [PuMP93]. By buffer insertion, <ref> [PuMO93] </ref> also reduces the maximum wire width required for reliability (compared to [PuMP93]). This translates to reduction in total wiring area and therefore power dissipation. <p> This translates to reduction in total wiring area and therefore power dissipation. It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree <ref> [PuMO93] </ref>. We note that buffer insertion algorithms such as those in [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. <p> We note that buffer insertion algorithms such as those in [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] do not restrict buffers to be located at branching points only, whereas the algorithms by <ref> [ChCh94, PuMO93] </ref> consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation.
Reference: [PuMP93] <author> S. Pullela, N. Menezes and L. T. Pillage, </author> <title> Reliable Non-Zero Skew Clock Tree Using Wire Width Optimization, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 165-170. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay <ref> [PuMO93, Ed93b, MePP93, PuMP93] </ref>, skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> The second approach considers wiresizing to minimize clock delay and uses the DME approach to ensure zero skew [Ed93b]. The third heuristic considers not only the nominal skew due to sink delays but also the process skew. At the same time, it tries to meet a specified target delay <ref> [PuMP93] </ref>. Both [ZhDX93, PuMP93] assume discrete wire sizes, whereas [Ed93b] assumes continuous wire width although it can also be modified to consider discrete wire widths. <p> The third heuristic considers not only the nominal skew due to sink delays but also the process skew. At the same time, it tries to meet a specified target delay [PuMP93]. Both <ref> [ZhDX93, PuMP93] </ref> assume discrete wire sizes, whereas [Ed93b] assumes continuous wire width although it can also be modified to consider discrete wire widths. <p> Since it is not possible to achieve arbitrary precision during fabrication, it is better to have a layout with discrete wire widths and transistor sizes in order to eliminate skew due to mapping of continuous widths/sizes to discrete widths/sizes. [ZhDX93] can handle constraint on the maximum wire width whereas <ref> [Ed93b, PuMP93] </ref> can be extended easily to consider maximum wire width constraint. Note that the constraint on the maximum wire width is imposed by the available routing resource. On the other hand, the constraint on the minimum wire width is due to the fabrication technology. <p> Note that since wire widths are selected based on delay sensitivity, delay sensitivity of the clock tree due to process variations is minimized indirectly. In <ref> [PuMP93] </ref>, Pullela, Menezes, and Pillage optimized the wire widths in three steps to achieve a reliable non-zero skew clock tree under the Elmore delay model: (i) The first step selects the suitable wires to widen in order to bring the average delay of the tree to a specified target delay, denoted <p> Otherwise, a wire with the least cost is chosen to be widened by Dw since the goal is to find a wire with zero cost quickly. However, step i may undo what step i 1 has accomplished. To prevent step (iii) from undoing the de-sensitization process in step (ii), <ref> [PuMP93] </ref> suggested tracing back from the widened edge in step (iii) to the root, and widening wires on the way up to ensure Dw max t i &lt; DB=l holds. <p> However, it is not clear how we can prevent steps (ii) and (iii) from messing up the work 73 done in step (i). Applying the algorithm to clock trees routed by the MMM method [JaSK90], <ref> [PuMP93] </ref> reported an average of 7:5X reduction in the skews, reducing the original skews from the order of 1ns to skews in the order of 0:1ns. <p> It would be an interesting study to find out the worst case skew of zero-skew routing trees such as those reported in [Ed93a] and evaluate how the algorithm proposed by <ref> [PuMP93] </ref> can impact the skew and reliability (in terms of worst case skew). While the intention is to improve skew and reliability of clock tree, [PuMP93] also reported improvement in terms of an average of 1:8X clock delay reduction after applying the algorithm. <p> study to find out the worst case skew of zero-skew routing trees such as those reported in [Ed93a] and evaluate how the algorithm proposed by <ref> [PuMP93] </ref> can impact the skew and reliability (in terms of worst case skew). While the intention is to improve skew and reliability of clock tree, [PuMP93] also reported improvement in terms of an average of 1:8X clock delay reduction after applying the algorithm. Again, the paper did not report the amount of additional wiring area incurred. <p> The smallest buffer size that satisfies the constraint Dskew b B b is chosen. Simulation results show that delay reduction is achieved, with up to 25X reduction for large circuits when compared to the wiresized clock trees constructed in <ref> [PuMP93] </ref>. By buffer insertion, [PuMO93] also reduces the maximum wire width required for reliability (compared to [PuMP93]). This translates to reduction in total wiring area and therefore power dissipation. <p> Simulation results show that delay reduction is achieved, with up to 25X reduction for large circuits when compared to the wiresized clock trees constructed in <ref> [PuMP93] </ref>. By buffer insertion, [PuMO93] also reduces the maximum wire width required for reliability (compared to [PuMP93]). This translates to reduction in total wiring area and therefore power dissipation. It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree [PuMO93].
Reference: [QiPP94] <author> J. Qian, S. Pullela, and L. T. Pileggi, </author> <title> Modeling the Effective Capacitance for the RC Interconnect of CMOS Gates, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 13(12), </volume> <month> Dec. </month> <year> 1994, </year> <pages> pp. 1526-1535. </pages>
Reference-contexts: Another commonly used driver delay model pre-characterizes the driver delay of each type of gate/buffer in terms of the input transition time t t , and the total load capacitance C L in the following form of k-factor equations <ref> [WeEs93, QiPP94] </ref>: t d f = (k 1 + k 2 C L ) t t + k 3 C 3 t f = (k 0 2 C L ) t t + k 0 L + k 0 5 ; (19) where k 15 and k 0 15 are determined <p> However, not all the capacitance of the routing tree and the sinks are seen by the driver due to the shielding effect of the interconnect resistance, especially for fast logic gates with lower driver resistance. Qian, Pullela, and Pileggi <ref> [QiPP94] </ref> proposed the effective capacitance model which first uses a p-model [OBSa89] to be discussed next (Figure 4 (c)) to better approximate the driving point admittance at the root of the interconnect (or equivalently, the output of the driver), and then compute iteratively the effective capacitance seen by the driver, denoted <p> The p-models computed above are usually incompatible with the commonly used k-factor equations, the slope model, and the table look-up method since these driver delay models assume a single loading capacitance. <ref> [QiPP94] </ref> proposed to compute an effective capacitance iteratively from the parameters R, C 1 and C 2 in the p-model (Figure 4 (c) and (d)) using the following 15 expression: C e f f = C 2 + C 1 1 t D t x =2 (R C 1 ) 2 <p> A better estimate of the effective capacitance is computed using Eqn. (21) and it is used as the loading capacitance for the next iteration of computation. The process stops when the value of C e f f does not change in two successive iterations. <ref> [QiPP94] </ref> also observes that the slow decaying tail portion of the response waveform is not accurately captured by the effective capacitance model. <p> This is due to the CMOS gate behaving like a resistor to ground beyond some timepoint t s , and its interaction with a p-model load yielding a vastly different response than the effective capacitance. Therefore, <ref> [QiPP94] </ref> uses the effective capacitance model to capture the initial delay and a resistance model (R-model) to capture the remaining portion of the response. They calculate the effective driver resistance by [QiPP94] (Figure 6): R d = C e f f ln v (t 80 ) where t 80 is the <p> Therefore, <ref> [QiPP94] </ref> uses the effective capacitance model to capture the initial delay and a resistance model (R-model) to capture the remaining portion of the response. They calculate the effective driver resistance by [QiPP94] (Figure 6): R d = C e f f ln v (t 80 ) where t 80 is the 80% point delay computed by the k-factor equations and v (t s ) can be estimated from the C e f f model. <p> The com putation of t s is given in <ref> [QiPP94] </ref>. Then, the voltage response at the gate output after time t s can be expressed as a double exponential approximation [QiPP94]: v 2 (t) = a 1 e p 1 (tt s ) + a 2 e p 2 (tt s ) ; (23) where a 1 , a 2 <p> The com putation of t s is given in <ref> [QiPP94] </ref>. Then, the voltage response at the gate output after time t s can be expressed as a double exponential approximation [QiPP94]: v 2 (t) = a 1 e p 1 (tt s ) + a 2 e p 2 (tt s ) ; (23) where a 1 , a 2 , p 1 , and p 2 can be obtained from R d , the p-model parameters (R, C 1 , <p> 2 e p 2 (tt s ) ; (23) where a 1 , a 2 , p 1 , and p 2 can be obtained from R d , the p-model parameters (R, C 1 , and C 2 ), and the initial conditions on the p-model as described in <ref> [QiPP94] </ref>.
Reference: [RaSh89] <author> P. Ramanathan and K. G. Shin, </author> <title> A Clock Distribution Scheme for Non-Symmetric VLSI Circuits, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1989, </year> <pages> pp. 398-401. </pages>
Reference-contexts: Experimental results also showed that both signal delay and total wirelength are reduced when buffer insertion is considered [ChWo96]. Related works in the area of buffered clock tree synthesis also include <ref> [ChSa93, RaSh89] </ref>. Assuming that all internal nodes of a clock routing tree will be inserted with buffers, Cho and Sarrafzadeh [ChSa93] considered distributing the buffers over the routing plane at the expense of minimum increase in routing cost to reduce local buffer congestion. <p> However, with a buffer inserted at every internal node of the clock tree, this is a very expensive (in terms of power and delay) buffer distribution scheme. Ramanathan and Shin <ref> [RaSh89] </ref> considered clock routing in an augmented channel intersection graph (ACIG). Given an abstract (buffered) topology, the algorithm first finds the best location along the peripheral of the ACIG for the clock source in order to minimize the clock delay.
Reference: [RaSH92] <author> S. K. Rao, P. Sadayappan, F. K. Hwang, and P. W. Shor, </author> <title> The Rectilinear Steiner Arboresence Problem, </title> <address> Algo-rithmica, </address> <year> 1992, </year> <pages> pp. 277-288. 96 </pages>
Reference-contexts: Such a tree is known as an arboresence, and clearly results in shortest paths from the root to every vertex. The authors of <ref> [RaSH92] </ref> were concerned with the construction of Rectilinear Minimum Spanning Arboresences (RMSA) and Rectilinear Steiner Minimal Arboresences (RSMA), for total wire length minimization in both cases. First, they showed that a 3 2 performance bound between an RMST and an RSMT does not hold for arboresences. <p> The A-tree algorithm constructs trees by starting with a forest of points (the source and all sinks), and then iteratively merges subtrees until all components are connected. In addition to the merging operation used in <ref> [RaSH92] </ref>, the authors of [CoLZ93] identify three types of safe moves for optimal merging at each step. In other words, the safe merge moves preserve the tree length optimality during the construction process; if only safe moves are applied, the resulting tree will have optimal length. <p> The authors first construct the Alphabetic Tree as an abstract topology. They then merge subtrees of the abstract topology in a similar way to the heuristic of <ref> [RaSH92] </ref>, described in Section 3.2.2. Afterwards, a post-processing procedure is applied to perform heuristic local optimization to further minimize the delay. Recently, Lillis et al.[LiCL96b] addressed performance driven interconnect topology problem through the construction of Permutation-constrained Routing Trees or P-Trees.
Reference: [RaPi94] <author> C. L. Ratzlaff and L. T. Pillage, RICE: </author> <title> Rapid Interconnect Circuit Evaluation Using AWE, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 13(6), </volume> <month> June </month> <year> 1994, </year> <pages> pp. 763-776. </pages>
Reference-contexts: . 9 Several approaches have been proposed to compute the moments at each node of a lumped RLC tree, where the lumped resistors and lumped inductors are floating from the ground and form a tree, and the lumped capacitors are connected between the nodes on the tree and the ground <ref> [KaMu95, RaPi94, YuKu95b] </ref>. In the following, we present a method proposed by Yu and Kuh [YuKu95b] for moment computation in an RLC tree. Consider a lumped RLC tree with n nodes. Let k be the parent node of node k, and T k be the subtree rooted at node k.
Reference: [RuPH83] <author> J. Rubinstein, P. Penfield, Jr., and M. A. Horowitz, </author> <title> Signal Delay in RC Tree Networks, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> CAD-2(3), </volume> <month> July </month> <year> 1983, </year> <pages> pp. 202-211. </pages>
Reference-contexts: The delay models presented in the remainder of this section consider both wire resistance and capacitance of the interconnect. Under these models, the interconnect is modeled as an RC tree, which is recursively defined as follows <ref> [RuPH83] </ref>: (i) a lumped capacitor between ground and another node is an RC tree, (ii) a lumped resistor between two nonground nodes is an RC tree, (iii) an RC line with no dc path to ground is an RC tree, and (iv) any two RC trees (with common ground) connected together <p> We can extend the above definition for RLC tree easily by considering inductors and RLC lines. Given an RC tree, Rubinstein, Penfield, and Horowitz <ref> [RuPH83] </ref> compute a uniform upper bound of signal delay at every node, denoted t P , as follows: t P = all nodes k R kk C k ; (1) where C k is the capacitance of the lumped capacitor at node k and R ki is defined to be the <p> The Elmore delay model [El48] is the most commonly used delay model in recent works on interconnect design. Under the Elmore delay model, the signal delay from source s 0 to node i in an RC tree is given by <ref> [RuPH83] </ref>: t (s 0 ; i) = all nodes k R ki C k : (2) Unlike the upper bound signal delay model in Eqn. (1), each sink (and in fact, all nodes in the RC tree) has a separate delay measure under the Elmore delay model. <p> Note that m 1 = b 1 a 1 where a 1 and b 1 are terms in Eqn. (6), and it can also be shown that the upper bound delay t P (Eqn. (1)) is in fact b 1 <ref> [RuPH83] </ref>. 2 From the distribution theory, the i-th moment of a function h (t) is in fact defined to be R 0 t i h (t)dt. <p> Cong, Leung, and Zhou [CoLZ93] showed that a minimum-cost shortest path tree is very useful for delay minimization. Given a routing tree T , they decomposed the upper bound signal delay t P at any node in T under the Rubinstein, Penfield, and Horowitz <ref> [RuPH83] </ref> model as follows (see Eqn. (1)): t P = t 1 (T ) + t 2 (T ) + t 3 (T ) + t 4 (T ); (24) where t 1 (T ) = R d c jTj; (25) all sinks s k c s 24 are candidates for
Reference: [Sa83] <author> T. Sakurai, </author> <title> Approximation of Wiring Delay in MOS-FET LSI, </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> vol. 4, </volume> <year> 1983, </year> <pages> pp. 418-426. </pages>
Reference-contexts: The target sink was selected to minimize the distance between the sink and the partial tree. The algorithm uses the A* search technique, with delay calculated by a method described in <ref> [Sa83] </ref>. In [HoXK93], Hong et al. propose two tree construction methods. The first, called the Iterative Dreyfus-Wagner (IDW) Steiner tree algorithm. This method modifies the optimal Steiner tree construction method of Dreyfus and Wagner [DrWa72] to utilize a physical delay model from [Sa83]. <p> with delay calculated by a method described in <ref> [Sa83] </ref>. In [HoXK93], Hong et al. propose two tree construction methods. The first, called the Iterative Dreyfus-Wagner (IDW) Steiner tree algorithm. This method modifies the optimal Steiner tree construction method of Dreyfus and Wagner [DrWa72] to utilize a physical delay model from [Sa83]. Through successive runs of the Dreyfus-Wagner method, three terms which capture resistance, capacitance, and their product, are adjusted iteratively; the convergence of these terms produces the optimum solution. A second approach in [HoXK93] is based on a constructive force directed method.
Reference: [SaSa94] <author> P. K. Sancheti and S. S. Sapatnekar, </author> <title> Interconnect Design Using Convex Optimization, </title> <booktitle> Proc. IEEE Custom Integrated Circuits Conf., </booktitle> <year> 1994, </year> <pages> pp. 549-552. </pages>
Reference-contexts: The iteration is stopped when no wire has a negative sensitivity or the delay specification is satisfied. Since a posynomial function can be mapped into a convex function, the convex programming technique developed in [Va89, SaRV93] was applied in <ref> [SaSa94] </ref> by Sancheti and Sapatnekar to achieve the exact solution at higher computation costs. Note that both algorithms in [Sa94] and [SaSa94] produce wire-sizing solutions assuming continuous wire width choices, and then map them into the discrete wire widths. The optimality of the wire-sizing solution may be lost after mapping. <p> Since a posynomial function can be mapped into a convex function, the convex programming technique developed in [Va89, SaRV93] was applied in <ref> [SaSa94] </ref> by Sancheti and Sapatnekar to achieve the exact solution at higher computation costs. Note that both algorithms in [Sa94] and [SaSa94] produce wire-sizing solutions assuming continuous wire width choices, and then map them into the discrete wire widths. The optimality of the wire-sizing solution may be lost after mapping. B. <p> The approach is extended in [MePP95] to conduct simultaneous gate and interconnect sizing, which will be presented in Section 4.3. Note that the algorithm in [MePD94], similar to <ref> [Sa94, SaSa94] </ref>, assumes continuous wire width choices for their wire-sizing solutions. C.
Reference: [Sa94] <author> S. S. Sapatnekar, </author> <title> RC Interconnect Optimization Under the Elmore Delay Model, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1994, </year> <pages> pp. 387-391. </pages>
Reference-contexts: The above algebraic expression allows analysis of how topology and wire widths affect Elmore delay, which leads to interconnect topology optimization algorithms such as [BoKR93, BoKM94] and wiresizing algorithms such as <ref> [CoLe95, Sa94, CoHe95] </ref>. The approximation of the 50% signal delay by the Elmore delay is exact only for a symmetrical impulse response, where the mean is equal to the median [GuTK95]. <p> Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). Later on, single-source wire-sizing algorithms were presented in <ref> [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] </ref> using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. <p> We will present first the wire-sizing work <ref> [Sa94] </ref> to minimize the maximum delay in Subsection 4.2.2.A, where the Elmore delay model is used, then the wire-sizing work [MePD94] to achieve the target delay in Subsection 4.2.2.B, where a higher-order RC delay model is used, and finally the wire-sizing work [XuKY96] to minimize the maximum delay for a tree <p> Particularly, the Lagrangian relaxation wire-sizing work [ChCW96a] proposes an optimal method to assign the weight penalty, which will be presented in Subsection 4.2.2.D. A. Single-Source RC Tree under Elmore Delay Model Sapatnekar <ref> [Sa94] </ref> studied the wire-sizing problem to minimize the maximum delay under the Elmore delay formulation of Eqn. (3). First, he showed that the separability no longer holds for minimizing the maximum delay. So, the dynamic programming based approach in [CoLZ93, CoLe93] does not apply. <p> The algorithm in <ref> [Sa94] </ref> goes through a number of iterations. <p> source to the identified sink: S i = Delay (F w i ) Delay (w i ) (F 1) w i where Delay (w i ) is the delay from the source to the identified sink and F is a constant larger than 1 (set to 1.2 or 1.5 in <ref> [Sa94] </ref>). Intuitively, the sensitivity is the delay reduction of unit wire area increment. For all wires on the path from the source to the identified sink, the width of the wire with the minimum negative sensitivity will be multiplied by F &gt; 1. <p> Since a posynomial function can be mapped into a convex function, the convex programming technique developed in [Va89, SaRV93] was applied in [SaSa94] by Sancheti and Sapatnekar to achieve the exact solution at higher computation costs. Note that both algorithms in <ref> [Sa94] </ref> and [SaSa94] produce wire-sizing solutions assuming continuous wire width choices, and then map them into the discrete wire widths. The optimality of the wire-sizing solution may be lost after mapping. B. <p> The approach is extended in [MePP95] to conduct simultaneous gate and interconnect sizing, which will be presented in Section 4.3. Note that the algorithm in [MePD94], similar to <ref> [Sa94, SaSa94] </ref>, assumes continuous wire width choices for their wire-sizing solutions. C. <p> Device and interconnect sizing: The optimization problems in this area usually have well defined mathematical programming formulations. We feel that the sensitivity based heuristics, such as those used in <ref> [FiDu85, Sa94] </ref>, and the local refinement technique based on the dominance property (and the bundled refinement property) used in [CoLe95, CoKo94, CoHe95, CoHe96c] are most efficient, produce good quality solutions, and scale up well with the rapid increasing of design complexity.
Reference: [Sap90] <author> S. S. Sapatnekar and V. B. Rao, </author> <title> iDEAS: A Delay Estimator and Transistor Sizing Tool for CMOS Circuits, </title> <booktitle> Proc. IEEE Custom Integrated Circuits Conf., </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 9. 3. 1-9. 3. 4. </pages>
Reference-contexts: However, it assumes that the effective resistance for a transistor is independent of the waveform slope of the input. But, in fact, the input slope has a significant effect on the transistor effective resistance. Another sensitivity based transistor sizing work is <ref> [Sap90] </ref> which also performs iterative transistor sizing to reduce the critical path delay. In contrast to TILOS, it changes the size of more than one transistor in each iteration.
Reference: [SeIK94] <author> M. Seki, K. Inoue, K. Kato, K. Tsurusaki, S. Fukasawa, H. Sasaki, and M. Aizawa, </author> <title> A Specified Delay Accomplishing Clock Router Using Multiple Layers, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 289-292. </pages>
Reference-contexts: Their works are mainly targeted for hierarchical data path design [NeFr93, NeFr94, NeFr95]. However, they did not give a specific routing algorithm to embed the abstract topology. Seki et al. <ref> [SeIK94] </ref> proposed a clock router that can accomplish specified delay using multiple routing layers. Very similar to the center tree routing step in the non-tree clock routing algorithm proposed by [LiWo94], it uses a center trunk and routes from branching point on the trunk to sinks with snaking where necessary.
Reference: [SIA94] <institution> Semiconductor Industry Association, National Technology Roadmap for Semiconductors, </institution> <year> 1994. </year>
Reference-contexts: The feature size decreased from about 2mm in 1985, to about 1mm in 1990, and to 0.35-0.5mm today (1996). The prediction is that it will be reduced to about 0.18mm in Year 2001 <ref> [SIA94] </ref>. Such continual miniaturization of VLSI devices has strong impact on the VLSI technology in several ways. First, the device density on integrated circuits grows quadratically with the rate of decrease in the feature size. <p> As a result, the total number of transistors on a single VLSI chip has increased from less than 500,000 in 1985 to over 10 million today. The prediction is that it will reach 64 million in Year 2001 <ref> [SIA94] </ref>. Second, the devices operate at a higher speed, and the interconnect delay becomes much more significant.
Reference: [SaRV93] <author> S. S. Sapatnekar, V. B. Rao, P. M. Vaidya, and S. M. Kang, </author> <title> An Exact Solution to the Transistor Sizing Problem for CMOS Circuits Using Convex Optimization, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <month> November </month> <year> 1993, </year> <pages> pp. 1621-1634. </pages>
Reference-contexts: Experimental results of circuits with up to 500 transistors have been presented. More recently, Sapatnekar <ref> [SaRV93] </ref> developed a transistor sizing tool iCONTRAST, again, to minimize the circuit area under timing constraints. <p> The iteration is stopped when no wire has a negative sensitivity or the delay specification is satisfied. Since a posynomial function can be mapped into a convex function, the convex programming technique developed in <ref> [Va89, SaRV93] </ref> was applied in [SaSa94] by Sancheti and Sapatnekar to achieve the exact solution at higher computation costs. Note that both algorithms in [Sa94] and [SaSa94] produce wire-sizing solutions assuming continuous wire width choices, and then map them into the discrete wire widths.
Reference: [SaSF95] <author> H. Sathyamurthy, S. S. Sapatnekar and J. P. Fishburn, </author> <title> Speeding up Pipelined Circuits through a Combination of Gate Sizing and Clock Skew Optimization, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1995, </year> <pages> pp. 467-470. </pages>
Reference-contexts: Another method to combine both gate sizing and clock skew optimization can be found in <ref> [SaSF95] </ref>. In addition, Chuang and Sapatnekar proposed another LP formulation to address the continuous gate sizing problem for power optimization in [ChSa95]. 4.1.3 Buffer Insertion Buffer (also called repeater) insertion is a common and effective technique to reduce interconnect delay. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], <ref> [ChSH93a, SaSF95] </ref> removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While [Fi90, ChSH93a, SaSF95] assumed a fixed network of registers, in [Fr92b, SoFr94, SoFM95], the authors considered retiming using skew information to optimize the circuit. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], [ChSH93a, SaSF95] removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While <ref> [Fi90, ChSH93a, SaSF95] </ref> assumed a fixed network of registers, in [Fr92b, SoFr94, SoFM95], the authors considered retiming using skew information to optimize the circuit. Registers may be removed or inserted as long the circuit still operates correctly.
Reference: [ShFD88] <author> J. Shyu, J. P. Fishburn, A. E. Dunlop, and A. L. Sangiovanni-Vincentelli, </author> <title> Optimization Based Transistor Sizing, </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <pages> pp. 400-409, </pages> <month> Apr. </month> <year> 1988. </year>
Reference-contexts: Methods in [DaAs89, HeFi91, ChKa91] apply the following two-step iterations. First, the delay budget is distributed to each gate; Then, the transistors in each gate are sized optimally to satisfy the time budget. Later, a two-phase algorithm was presented in <ref> [ShFD88] </ref> to minimize the circuit area under timing constraints: first, TILOS [FiDu85] is used to generate an initial solution; then, a mathematic optimization is formulated and solved by using feasible directions to find the optimal solution.
Reference: [SmLi79] <author> J. M. Smith and J. S. Liebman. </author> <title> Steiner Trees, Steiner Circuits and the Interference Problem in Building Design, </title> <journal> Engineering Optimization, </journal> <volume> 30(4), </volume> <year> 1979, </year> <pages> pp. 15-36. </pages>
Reference: [SoFr94] <author> T. Soyata and E. G. Friedman, </author> <title> Retiming with Non-Zero Clock Skew, Variable Register, and Interconnect Delay, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov </month> <year> 1994, </year> <pages> pp. 234-241. </pages>
Reference-contexts: Two-level clock routing with the upper level routing in multichip module substrate has also been studied [ZhXDS94]. In addition, there are studies that target hierarchical data path design (instead of flat logic design) [NeFr93, NeFr94, NeFr95] and consider retiming <ref> [Fr92b, SoFr94, SoFM95] </ref> using skew information. Interested reader may also refer to [Fr95] for a survey on different aspects of clock synthesis. 5.1 Abstract Topology Generation There are generally two approaches in generating the abstract topology: Top-down and bottom-up. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], [ChSH93a, SaSF95] removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While [Fi90, ChSH93a, SaSF95] assumed a fixed network of registers, in <ref> [Fr92b, SoFr94, SoFM95] </ref>, the authors considered retiming using skew information to optimize the circuit. Registers may be removed or inserted as long the circuit still operates correctly. A related problem on clock schedule optimization is to construct a clock tree that satisfies the clock schedule.
Reference: [SoFM95] <author> T. Soyata, E. G. Friedman, and J. H. Mulligan, Jr., </author> <title> Monotonicity Constraints on Path Delays for Efficient Retim-ing with Localized Clock Skew and Variable Register Delay, </title> <booktitle> Proc. of IEEE Int'l Symp. on Circuits and Systems, </booktitle> <month> Apr. </month> <year> 1995, </year> <pages> pp. </pages> <month> 3.1748-3.1751. </month>
Reference-contexts: Two-level clock routing with the upper level routing in multichip module substrate has also been studied [ZhXDS94]. In addition, there are studies that target hierarchical data path design (instead of flat logic design) [NeFr93, NeFr94, NeFr95] and consider retiming <ref> [Fr92b, SoFr94, SoFM95] </ref> using skew information. Interested reader may also refer to [Fr95] for a survey on different aspects of clock synthesis. 5.1 Abstract Topology Generation There are generally two approaches in generating the abstract topology: Top-down and bottom-up. <p> While the gate sizes in the logic block remain unchanged throughout the optimization process in [Fi90], [ChSH93a, SaSF95] removed this restriction and considered gate sizing in the clock schedule optimization process in order to achieve faster clock rate. While [Fi90, ChSH93a, SaSF95] assumed a fixed network of registers, in <ref> [Fr92b, SoFr94, SoFM95] </ref>, the authors considered retiming using skew information to optimize the circuit. Registers may be removed or inserted as long the circuit still operates correctly. A related problem on clock schedule optimization is to construct a clock tree that satisfies the clock schedule.
Reference: [SrKa94] <author> M. Sriram and S. K. Kang, </author> <title> Physical Design for Multichip Modules, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year> <month> 97 </month>
Reference-contexts: Therefore, the moments up to the p-th order of an RLC tree can be computed in O (np) time. For moment computation of a tree of transmission lines, several works first model each transmission line as a large number of uniform lumped RLC segments <ref> [PiRo90, SrKa94] </ref> and then compute the moments of the resulting RLC tree. However, this approach is usually not efficient nor accurate.
Reference: [TaMF94] <author> Y. Tamiya, Y. Matsunaga, and M. Fujita, </author> <title> LP Based Cell Selection with Constraints of Timing, Area and Power Consumption, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1994, </year> <pages> pp. 378-381. </pages>
Reference-contexts: Experimental results on circuits with up to 500 gates were presented. Later on, their LP-based method was expanded [BeBJ94] to compute the entire area or power-consumption versus delay trade-off curve. Results on MCNC'91 two-level benchmarks with up to 4,700 gates were reported. Recently, Tamiya, Matsunaga and Fujita <ref> [TaMF94] </ref> proposed another LP-based method where the latest and the earliest arrival times are introduced so that the setup and hold time constraints can be handled. The objective is to minimize 35 the weighted linear combination of clock period, area and power. <p> The objective is to minimize 35 the weighted linear combination of clock period, area and power. Result on a chip of 13,000 transistors was reported. Note that gate sizing works in <ref> [BeJe90, BeBJ94, TaMF94] </ref> assume that the gate delay is a convex function of gate sizes, which is needed to make sure that the error introduced by the PWL approximation is small. However, the gate delay in fact is not a strict convex function. <p> However, the gate delay in fact is not a strict convex function. More recently, Chen, Onodera and Tamaru [ChOT95] removed the convex delay model assumption in previous LP-based works. They also divided the the gate sizes into subranges, but different from the previous works <ref> [BeBJ94, BeJe90, TaMF94] </ref> where only one LP problem is formulated over the whole gate size range with the delay being a PWL function in this LP formulation, a LP problem is formulated for every subrange with the delay being a linear function for each LP formulation.
Reference: [TeKS96] <author> G. E. Tellez, D. Knol, and M. Sarrafzadeh, </author> <title> A Graph-Based Delay Budgeting Algorithm for Large Scale Timing-Driven Placement Problem, </title> <booktitle> Proc. 5th ACM/SIGDA Physical Design Workshop, </booktitle> <month> April </month> <year> 1996, </year> <pages> pp. 234-240. </pages>
Reference-contexts: Most well-known global routers, such as [LeSe88, CoPr88, CaCh91], did not consider timing optimization during global routing. Existing methods on delay budgeting, such as <ref> [NaBH89, Fr92a, TeKS96] </ref>, were mainly developed for circuit placement and their applicability to global routing is yet to be demonstrated.
Reference: [TeSa94] <author> G. E. Tellez and M. Sarrafzadeh, </author> <title> Clock Period Constrained Minimal Buffer Insertion in Clock Trees, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1994, </year> <pages> pp. 219-223. </pages>
Reference-contexts: Since [DhFW84] inserts buffers at the same hierarchy of the clock tree, the skew of the clock tree should remain intact. However, since buffers are inserted at wire segments independently in [WuSh92], clock skew might be adversely affected. A more recent work by Tellez and Sarrafzadeh <ref> [TeSa94] </ref> also used a bottom-up approach similar to that of [WuSh92], i.e. computation of the number of buffers to be inserted in a wire segment followed by buffer insertion at appropriate locations. [TeSa94] considers rise/fall time constraints to compute the number of buffers required. <p> A more recent work by Tellez and Sarrafzadeh <ref> [TeSa94] </ref> also used a bottom-up approach similar to that of [WuSh92], i.e. computation of the number of buffers to be inserted in a wire segment followed by buffer insertion at appropriate locations. [TeSa94] considers rise/fall time constraints to compute the number of buffers required. Again, since buffers are inserted independently as in [WuSh92], clock skew might be affected. <p> It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree [PuMO93]. We note that buffer insertion algorithms such as those in <ref> [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] </ref> do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation.
Reference: [TeFS95] <author> G. E. Tellez, Amir Farrahi, and M. Sarrafzadeh, </author> <title> Activity-Driven Clock Design for Low Power Circuits, </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1995, </year> <pages> pp. 62-65. </pages>
Reference-contexts: For example, there is a clock synthesis algorithm that specifically targets towards low power design using gated clock <ref> [TeFS95] </ref>. Two-level clock routing with the upper level routing in multichip module substrate has also been studied [ZhXDS94]. In addition, there are studies that target hierarchical data path design (instead of flat logic design) [NeFr93, NeFr94, NeFr95] and consider retiming [Fr92b, SoFr94, SoFM95] using skew information.
Reference: [Ts91] <author> R. S. Tsay, </author> <title> Exact Zero Skew, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1991, </year> <pages> pp. 336-339. </pages>
Reference-contexts: Clock schedule optimization will be discussed in Section 5.6. Recent works on clock skew minimization have accomplished exact zero skew under both the pathlength delay model [BoKa92, Ed91, Ed92] and the Elmore delay model <ref> [Ts91, BoKa92, ChHH92a, ChHH92b] </ref>. The Deferred-Merge Embedding (DME) algorithm by [BoKa92, ChHH92a, Ed91] can be either applied to a given clock topology or combined with a clock topology generation algorithm to achieve zero skew with a smaller wirelength [Ed93a]. <p> In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. For example, Figure 25 (a) plots HSPICE delay skew against path-length delay skew for routing trees generated by the Greedy-BST/DME algorithm under pathlength delay [CoKo95, HuKT95] on MCNC benchmark circuit r3 <ref> [Ts91] </ref>. Not only is the correlation poor, but the pathlength-based BST solutions simply cannot meet tight skew bounds (of 100ps or less). <p> Note that both the MMM and KCR algorithms cannot guarantee zero-skew routing, although the routing solutions constructed by the KCR algorithm have skews very close to zero. The two benchmark circuits Primary1 and Primary 2, together with the other five benchmark circuits r1 to r5 reported in <ref> [Ts91] </ref>, would later become the most commonly used benchmark circuits to evaluate the quality of routing solutions generated by various clock routing algorithms. <p> Then, the merging cost is minimized by setting je a j = 0 and je b j = t (a) t (b). In this case, detour occurs, i.e., je a j + je b j &gt; l. Under the Elmore delay model, We can compute x as follows <ref> [Ts91] </ref>: x = r l (c l + Cap (a) + Cap (b)) 60 where Cap (a) and Cap (b) are the total capacitances of sub-trees T a and T b , respectively, and r and c are the unit length resistance and capacitance, respectively. <p> Otherwise, detour occurs, i.e. je a j + je b j &gt; l. Again, without loss of generality, let t (a) &gt; t (b). Then, je a j = 0, and je b j is obtained by solving the following equation <ref> [Ts91] </ref>: Note that the above computation assumes both edges e a and e b have unit wire width. A simple extension can be made to achieve zero-skew merging even when e a and e b have different widths [Ed93b]. <p> For example, nominal wire widths may be used for the upstream edges. Then, with consideration of w e a and w e b , the minimum merging cost je a j + je b j is computed using a similar approach by <ref> [Ts91] </ref> (see Section 5.2.1). At the end of the bottom-up merging, the top-down embedding of the original DME approach is applied to obtain a wiresized clock tree. <p> constraint B w and computing the maximum change in delay Dt w induced by a change in the width of an edge due to process variations, the minimum width of the edge required such that Dt w B w =2 can be estimated. 13 By applying an approach similar to <ref> [Ts91] </ref> with the lengths and widths as variables, the widths and lengths of the two edges are computed to satisfy the estimated minimum width constraints and some prespecified maximum width constraint. Detour is avoided when absolutely possible. <p> The idea is that the buffer drives the center trunk through the balanced length binary tree at N driving points and thus shortening the signal propagation latency since there are now multiple paths to the center trunk. Compared to the routing solution <ref> [Ts91] </ref> for a industry floating point unit, the non-tree routing algorithm by [LiWo94] reported better worst case skew under process variations. 5.6 Clock Schedule Optimization So far, we have presented research works that addressed the problem of constructing a clock routing tree T such that skew (T ) = max i;
Reference: [TuDP96] <author> B. Tutuianu, F. Dartu, and L. Pileggi, </author> <title> An Explicit RC-Circuit Delay Approximation Based on the First Three Moments of the Impulse Response, </title> <booktitle> Proc. 33rd Design Automation Conf., </booktitle> <year> 1996, </year> <pages> pp. 611-616. </pages>
Reference-contexts: The model is further extended to consider RLC interconnection trees [KaMu96b] and ramp input [KaMM96]. While the methods in [KaMu96b, KaMM96] used only the first two moments, Tutuianu, Dartu, and Pileggi <ref> [TuDP96] </ref> proposed an explicit RC-circuit delay approximation based on the first three moments of the impulse response. <p> The explicit approximation of the delay point is a single Newton-Raphson iteration step, using the first order delay estimate (which can be expressed in terms of the poles and residues) as the initial guess. The reader is referred to <ref> [TuDP96] </ref> for the exact expressions of p 1 , p 2 , k 1 , k 2 , and the delay function. 2.2 Driver Delay Models In interconnect-driven layout designs, gates/buffers need to be optimized according to the interconnect load. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [va90] <author> L. P. P. P. van Ginneken, </author> <title> Buffer Placement in Distributed RC-tree Networks for Minimal Elmore Delay, </title> <booktitle> Proc. Int'l Symp. on Circuits and Systems, </booktitle> <year> 1990, </year> <pages> pp. 865-868. </pages>
Reference-contexts: A polynomial-time dynamic programming algorithm was presented in <ref> [va90] </ref> to find the optimal buffer placement and sizing for RC trees under the Elmore delay model. The formulation assumes that the possible buffer positions (called legal positions), possible buffer sizes, and the required arrival times at sinks are given. <p> If the total number of legal positions is N, it was shown in <ref> [va90] </ref> that the total number of options at the source of the whole routing tree is no larger than N + 1 even though the number of possible buffer assignments is 2 N . <p> and wire sizing problem have been solved as special cases of the STIS problem, and a smooth area-delay trade-off has been yielded for the transistor sizing problem for circuits implemented by complex gates. 4.3.4 Simultaneous Buffer Insertion and Wire Sizing The polynomial-time dynamic programming algorithm for the buffer insertion problem <ref> [va90] </ref> was generalized in [LiCL95] to handle the simultaneous wiresizing and buffer insertion for both delay and power minimization. The slope effect on the buffer delay was also taken into account. Only the delay minimization feature will be discussed in the following. Different from [va90], when a wire segment of length <p> algorithm for the buffer insertion problem <ref> [va90] </ref> was generalized in [LiCL95] to handle the simultaneous wiresizing and buffer insertion for both delay and power minimization. The slope effect on the buffer delay was also taken into account. Only the delay minimization feature will be discussed in the following. Different from [va90], when a wire segment of length l (with upstream node k) is added at the root i of a dc-connected subtree, a new option (q k ; c k ) will be generated at k for every wire width choice w and every (q i ; c i ) at <p> 50 The non-uniform wiresizing can be easily carried out by just introducing 2-degree Steiner points within a wire segment, and the other two bottom-up rules to compute new options (with extension to multiple inverter sizes and consideration of the signal polarity) and the rule to prune suboptimal options given in <ref> [va90] </ref> can be applied without any modifications. The number of total options at the source of the routing tree is still polynomial bounded. According to [HeJe87], the delay of an inverter is the delay under the step input plus an increment due to the input slope. <p> The following techniques are combined to develop a wiresized buffered A-tree (WBA-tree) algorithm: the A-tree algorithm for tree construction [CoLZ93], the simultaneous buffer insertion and wiresizing algorithm <ref> [va90, LiCL95] </ref>, critical path isolation, and a balanced load decomposition used in logic synthesis. <p> These transforma tions are applied recursively in a bottom-up process from the sinks in the same manner as the A-tree and the simultaneous buffer insertion and wiresizing algorithms. As in the buffer insertion algorithm of <ref> [va90] </ref> (Section 4.1.3), the WBA algorithm include two phases: the bottom-up synthesis procedure and the top-down selection procedure. Similar definitions of the option and the pruning rule are used. <p> Meanwhile, we want to minimize the total wire length, intuitively, we wish that D vw is as large as possible. Note that, when a = 0, it is equivalent to the heuristic move in [CoLZ93]. The option computation and pruning can be carried out in a manner similar to <ref> [va90, LiCL95] </ref> after each merging of T v and T w . Overall, after the bottom-up synthesis procedure to construct tree and compute options, the top-down selection procedure is invoked. <p> In short, during the dynamic program scheme to construct a P-Tree [LiCL96b] (Section 3.3) in a bottom-up manner for a given permutation, a set of options are computed for each subtree as in <ref> [va90, LiCL95] </ref> and the same option pruning rule is applied. 5 High-Performance Clock Routing In layout synthesis, the distribution of clock signals is critical to both the operation and performance of synchronous systems.
Reference: [Va89] <author> P. M. Vaidya, </author> <title> A New Algorithm for Minimizing Convex Functions over Convex Set, </title> <booktitle> Proc. IEEE Foundations of Computer Science, </booktitle> <month> Oct. </month> <year> 1989, </year> <pages> pp. 338-343. </pages>
Reference-contexts: Under the delay model, the transistor sizing problem is a posynomial program that can be transformed into a convex program and the convex programming method <ref> [Va89] </ref> was implemented to solve the transformed problem. When using the simple delay model of TILOS [FiDu85], and the timing specification is loose, the area of the solution obtained by TILOS is close to that of the solution obtained by the iCONTRAST algorithm. <p> The iteration is stopped when no wire has a negative sensitivity or the delay specification is satisfied. Since a posynomial function can be mapped into a convex function, the convex programming technique developed in <ref> [Va89, SaRV93] </ref> was applied in [SaSa94] by Sancheti and Sapatnekar to achieve the exact solution at higher computation costs. Note that both algorithms in [Sa94] and [SaSa94] produce wire-sizing solutions assuming continuous wire width choices, and then map them into the discrete wire widths.
Reference: [Ve84] <author> H. J. M. Veendrick, </author> <title> Short-Circuit Dissipation of Static CMOS Circuitry and Its Impact on the Design of Buffer Circuits, </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> SC-19(4), </volume> <month> August </month> <year> 1984, </year> <pages> pp. 468-473. </pages>
Reference-contexts: We would like to point out that all studies in [LiLi75, HeJe87, ZhLi96] also discussed the optimal driver sizing for power minimization. Another study on optimal driver sizing for low-power can be found in <ref> [Ve84] </ref>. 4.1.2 Transistor and Gate Sizing In addition to sizing drivers which usually drive global interconnects, the sizes of all transistors and gates in the entire circuit or a sub-circuit can also be adjusted properly according to their capacitive loads for performance or power optimization.
Reference: [ViMa94] <author> A. Vittal and M. Marek-Sadowska, </author> <title> Minimal Delay Interconnect Design Using Alphabetic Trees, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Diego, </address> <month> June </month> <year> 1994, </year> <pages> pp. 392-396. </pages>
Reference-contexts: The authors enumerated all possible topologies for small nets, and ranked them by delay using the Elmore delay model and SPICE; they found that the rankings were nearly identical, indicating that Elmore delay is a high fidelity objective for interconnect topology construction. In <ref> [ViMa94] </ref>, Vittal and Marek-Sadowska presented an algorithm which constructs interconnect topologies that are competitive in terms of delay with the SERT and BB-SORT methods described above, but with a complexity of only O (n 2 ). Their approach is through the construction of Alphabetic Trees (which are abstract topologies). <p> The weights are associated with sinks of the net, while edges are of unit length (as the tree is an abstract topology). An example of an Alphabetic tree is shown in Figure 18. The construction in <ref> [ViMa94] </ref> uses the circular ordering with respect to the driver to order the sinks, and uses the sink capacitance as the weight fore each sink. The authors first construct the Alphabetic Tree as an abstract topology. <p> Their algorithm first constructs a MST for the point set, and then derives its abstract topology. Rather than considering the node weights and path lengths from the root, as is done in <ref> [ViMa94] </ref>, the authors consider the tour length of traversing from sink to sink, using an ordering of the sinks that is consistent with the abstract topology. Using dynamic programming methods, their P-Tree algorithm finds the optimal permutation of sinks to minimize tour length, while maintaining consistency with the abstract topology. <p> In this section, we would like to offer a brief summary with our assessment of various interconnect optimization techniques presented in this paper, and suggest directions for future research. 1. Interconnect topology optimization: We feel that geometric based Steiner tree algorithms such as the A-tree [CoLZ93], Alphabetic Tree <ref> [ViMa94] </ref>, P-Tree [LiCL96b] algorithms usually provide a good initial routing topology. These algorithms use the right level of abstraction and can be incorporated in a global router efficiently. Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in [BoOI94, BoKR93, ViMa94, XuKu95b]. <p> These algorithms use the right level of abstraction and can be incorporated in a global router efficiently. Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in <ref> [BoOI94, BoKR93, ViMa94, XuKu95b] </ref>. Most effective topology optimization for delay reduction is achieved by considering routing tree construction with buffer insertion as discussed in [OkCo96a, OkCo96b, LiCL96a].
Reference: [ViMa95] <author> A. Vittal and M. Marek-Sadowska, </author> <title> Power Optimal Buffered Clock Tree Design, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1995, </year> <pages> pp. 497-502. </pages>
Reference-contexts: Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation <ref> [PuMO93, ViMa95] </ref>. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> As the feature size becomes smaller, this approach has become more attractive and less expensive in terms of chip area. The earlier works by [DhFW84, WuSh92] considered insertion of uniform-size buffers in a H-tree structure. The more recent works by <ref> [ViMa95, ChWo96] </ref> perform buffer insertion simultaneously with clock routing. The work on buffer insertion and sizing will be presented in Section 5.4.3. The work on buffer insertion and wiresizing will be presented in Section 5.4.4. <p> Again, since buffers are inserted independently as in [WuSh92], clock skew might be affected. The GReedy INternal buffer insertion (GRIN) algorithm proposed by Vittal and Marek-Sadowska <ref> [ViMa95] </ref> is an extension of the DME algorithm to consider the possible locations of buffers. <p> Note that this approach is only applicable to small problem instances since it is computationally very expensive. 77 5.4.3 Buffer Insertion and Sizing in Clock Routing While GRIN <ref> [ViMa95] </ref> considers construction of clock topology with buffer insertion, the balanced Buffer Insertion and Sizing (BIS) algorithm proposed by Xi and Dai [XiDa95] assumes a given unbuffered clock tree and insert buffers of multiple sizes to meet wire skew constraint due to asymmetric loads and wire width variations. <p> It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree [PuMO93]. We note that buffer insertion algorithms such as those in <ref> [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] </ref> do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation. <p> Extensive studies of the clock routing problem in the past few years have made much advance on automating high-performance clock net synthesis. The bottom-up construction methods using the DME technique (e.g., <ref> [Ed91, ChHH92a, BoKa92, CoKK95, ViMa95] </ref>) are most promising in terms of efficiency, flexibility, and the solution quality. Most existing approaches first produce a balanced routing topology and then perform buffer insertion, buffer and wire sizing.
Reference: [WaFr83] <author> D. F. Wann and M. A. Franklin, </author> <title> Asynchronous and Clocked Control Structures for VLSI Based Interconnection Networks, </title> <journal> IEEE Trans. on Computer, </journal> <volume> C-32(3), </volume> <month> March </month> <year> 1983, </year> <pages> pp. 284-293. </pages>
Reference-contexts: But, we separate abstract topology generation from embedding since once the abstract topology is given, embedding can be done optimally (under the pathlength delay model) or near-optimally using the algorithms to be described in Section 5.2. 55 5.1.1 Top-Down Topology Generation In an H-tree topology <ref> [FiKu82, KuGa82, WaFr83, DhFW84, BaWM86] </ref>, the basic building block is a regular H-structure. 11 All four corners of the H-structure are equi-distant from the center of the structure. The H-tree algorithm minimizes clock skew by repeating the H-structure recursively top-down as shown in Figure 26.
Reference: [WeEs93] <author> N. H. E. Weste and K. Eshraghian, </author> <title> Principles of CMOS VLSI Design: a Systems Perspective 2nd ed, </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: In general, the input has an input transition time, denoted t t , which is the input rise or fall time. We first use a transistor to illustrate the simple switch-level RC model, where a transistor is modeled as an effective resistance discharging or charging a capacitor <ref> [WeEs93] </ref>. Figure 3 (a) shows a simple switch-level RC model of an n-transistor. Let the minimum n-transistor resistance be R n . The gate capacitance and output diffusion capacitance of the minimum n-transistor are denoted C n g and C n d , respectively. <p> The capacitances are directly proportional to the transistor sizes, i.e., the gate capacitance is C n g d and the diffusion capacitance is C n d d. Assuming a step input, the fall time of the signal at the gate output is given by <ref> [WeEs93] </ref>: t f = k b n ; (16) where k is typically in the range of 3 to 4 for values of V DD in the range of 3 to 5, b n min is the gain factor for the minimum n-transistor, and C L is the loading capacitance driven <p> The delay time for the falling signal can be approximated to be t d f = t f =2 <ref> [WeEs93] </ref>. Note that since the effective resistance R d is proportional to 1=b min d, we can simply approximate t d f by the product of the effective transistor resistance and the loading capacitance C L . <p> Another commonly used driver delay model pre-characterizes the driver delay of each type of gate/buffer in terms of the input transition time t t , and the total load capacitance C L in the following form of k-factor equations <ref> [WeEs93, QiPP94] </ref>: t d f = (k 1 + k 2 C L ) t t + k 3 C 3 t f = (k 0 2 C L ) t t + k 0 L + k 0 5 ; (19) where k 15 and k 0 15 are determined <p> Both power dissipation (see <ref> [WeEs93] </ref>) and phase delay (under a model similar to the simple switch-level RC model) due to buffers are convex functions of d i and d n The key to the BIS algorithm is to transform the skew constraint to a convex function as follows: If the devices are sized such that <p> Local clock skew places upper bound on the performance of the circuit. The minimum allowable clock period C P between 81 positions. two sequentially adjacent registers R i and R j satisfies the following inequality <ref> [WeEs93] </ref>: C P t (L i j ) + skew (i; j) + t su + t ds ; (37) where t (L i j ) is the delay for the data to travel through combinational logic L i j from R i to R j , t su is the
Reference: [WuSh92] <author> B. Wu and N. A. Sherwani, </author> <title> Effective Buffer Insertion of Clock Tree for High-Speed VLSI Circuits, </title> <journal> Microelectronics Journal, </journal> <volume> vol. 23, </volume> <year> 1992, </year> <pages> pp. 291-300. </pages>
Reference-contexts: For example, instead of introducing detour wirelength to balance delays, a buffer can be inserted. As the feature size becomes smaller, this approach has become more attractive and less expensive in terms of chip area. The earlier works by <ref> [DhFW84, WuSh92] </ref> considered insertion of uniform-size buffers in a H-tree structure. The more recent works by [ViMa95, ChWo96] perform buffer insertion simultaneously with clock routing. The work on buffer insertion and sizing will be presented in Section 5.4.3. <p> The resulting set of equations can be solved to obtain the optimal locations of the buffers in the single line. The buffered single line is then unfolded to generate the buffered H-tree (Figure 39 (b)). 74 line and unfolding the clock tree. Wu and Sherwani <ref> [WuSh92] </ref> used a different scheme to insert buffers to a H-tree. In a bottom-up order, the number of buffers needed for a wire segment from a branching point to the parent branching point is computed. Either minimum-size buffers or blocks of cascaded buffers are inserted to spread out the load. <p> Either minimum-size buffers or blocks of cascaded buffers are inserted to spread out the load. While [DhFW84] does not require buffers to be located at Steiner point, <ref> [WuSh92] </ref> always inserts a buffer at the parent branching point when buffers are inserted. Moreover, [DhFW84] assumed that the H-tree uses only one metal layer for routing, whereas [WuSh92] assumed a metal routing layer and crossunders, which are short polysilicon or diffusion segments used to route the H-tree under the power <p> While [DhFW84] does not require buffers to be located at Steiner point, <ref> [WuSh92] </ref> always inserts a buffer at the parent branching point when buffers are inserted. Moreover, [DhFW84] assumed that the H-tree uses only one metal layer for routing, whereas [WuSh92] assumed a metal routing layer and crossunders, which are short polysilicon or diffusion segments used to route the H-tree under the power or ground wires. [WuSh92] reported a 60-90% reduction in clock delay and [DhFW84] reported an order of magnitude reduction in the delay. <p> Moreover, [DhFW84] assumed that the H-tree uses only one metal layer for routing, whereas <ref> [WuSh92] </ref> assumed a metal routing layer and crossunders, which are short polysilicon or diffusion segments used to route the H-tree under the power or ground wires. [WuSh92] reported a 60-90% reduction in clock delay and [DhFW84] reported an order of magnitude reduction in the delay. Since [DhFW84] inserts buffers at the same hierarchy of the clock tree, the skew of the clock tree should remain intact. However, since buffers are inserted at wire segments independently in [WuSh92], <p> <ref> [WuSh92] </ref> reported a 60-90% reduction in clock delay and [DhFW84] reported an order of magnitude reduction in the delay. Since [DhFW84] inserts buffers at the same hierarchy of the clock tree, the skew of the clock tree should remain intact. However, since buffers are inserted at wire segments independently in [WuSh92], clock skew might be adversely affected. A more recent work by Tellez and Sarrafzadeh [TeSa94] also used a bottom-up approach similar to that of [WuSh92], i.e. computation of the number of buffers to be inserted in a wire segment followed by buffer insertion at appropriate locations. [TeSa94] considers rise/fall time <p> However, since buffers are inserted at wire segments independently in <ref> [WuSh92] </ref>, clock skew might be adversely affected. A more recent work by Tellez and Sarrafzadeh [TeSa94] also used a bottom-up approach similar to that of [WuSh92], i.e. computation of the number of buffers to be inserted in a wire segment followed by buffer insertion at appropriate locations. [TeSa94] considers rise/fall time constraints to compute the number of buffers required. Again, since buffers are inserted independently as in [WuSh92], clock skew might be affected. <p> used a bottom-up approach similar to that of <ref> [WuSh92] </ref>, i.e. computation of the number of buffers to be inserted in a wire segment followed by buffer insertion at appropriate locations. [TeSa94] considers rise/fall time constraints to compute the number of buffers required. Again, since buffers are inserted independently as in [WuSh92], clock skew might be affected. The GReedy INternal buffer insertion (GRIN) algorithm proposed by Vittal and Marek-Sadowska [ViMa95] is an extension of the DME algorithm to consider the possible locations of buffers. <p> It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree [PuMO93]. We note that buffer insertion algorithms such as those in <ref> [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] </ref> do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation.
Reference: [Wy87] <author> J. L. Wyatt, </author> <title> Circuit Analysis, Simulation and Design Part 2, Chapter 11, </title> <publisher> North-Holland, </publisher> <year> 1987. </year>
Reference-contexts: Recently, Xue and Kuh [XuKu95b, XuKu95a] propose insertion of multi-links into an existing routing tree and do dynamic wiresizing during the link insertion in order to minimize the maximum delay. The Elmore delay formulation for RC meshes in <ref> [Wy87] </ref> is used. The algorithm works as follows: Given a routing tree with a performance requirement, the sink n max with the maximum delay is identified. A wire link e is established between the source and n max .
Reference: [XiDa95] <author> J. G. Xi and W. W.-M. Dai, </author> <title> Buffer Insertion and Sizing Under Process Variations for Low Power Clock Distribution, </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1995, </year> <pages> pp. 491-496. 98 </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing [ZhDa92, KaTs94a, KaTs94b]. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation <ref> [PuMO93, ChCh94, LiWo94, XiDa95] </ref>, and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. In practice, bounding pathlength skew does not provide reliable control of actual delay skew [CoKK95]. <p> The following approach may be used to estimate skew sensitivity <ref> [XiDa95] </ref>. To compute the estimated worst case clock skew, the algorithm computes for each sink s i , the best possible and worst possible delay due to process variations. <p> Note that this approach is only applicable to small problem instances since it is computationally very expensive. 77 5.4.3 Buffer Insertion and Sizing in Clock Routing While GRIN [ViMa95] considers construction of clock topology with buffer insertion, the balanced Buffer Insertion and Sizing (BIS) algorithm proposed by Xi and Dai <ref> [XiDa95] </ref> assumes a given unbuffered clock tree and insert buffers of multiple sizes to meet wire skew constraint due to asymmetric loads and wire width variations. <p> However, there is no improvement in terms of clock skew and clock delay. Although the clock skews are reasonably small, the clock delay can be as high as 10ns <ref> [XiDa95] </ref>, even for a relatively small clock net such as benchmark circuit Primary2. An explanation for the high clock delay is the use of minimum wire width for the clock tree. <p> It was observed that for delay (and power-delay product) minimization, the optimal number of buffer levels is close to half the number of levels in the tree [PuMO93]. We note that buffer insertion algorithms such as those in <ref> [DhFW84, WuSh92, TeSa94, ViMa95, ChWo96, XiDa95] </ref> do not restrict buffers to be located at branching points only, whereas the algorithms by [ChCh94, PuMO93] consider buffer insertion at branching points only. Chen, Chang, and Wong [ChCW96a] very recently proposed a simultaneous buffer and wire sizing algorithm based on La-grangian relaxation.
Reference: [XiDa96] <author> J. G. Xi and W. W.-M. Dai, </author> <title> Useful-Skew Clock Routing with Gate Sizing for Low Power Design, </title> <booktitle> Proc. 33rd Design Automation Conf., </booktitle> <year> 1996, </year> <pages> pp. 383-388. </pages>
Reference-contexts: Very similar to the center tree routing step in the non-tree clock routing algorithm proposed by [LiWo94], it uses a center trunk and routes from branching point on the trunk to sinks with snaking where necessary. A more recent work by Xi and Dai <ref> [XiDa96] </ref> considers clock schedule optimization with clock tree construction and gate sizing. The proposed useful skew tree (UST) algorithm first generates an abstract topology using a top-down bipartitioning approach. The bipartitioning process is guided by the objective of producing useful negative skew. <p> For each circuit, the skew bound for BST construction [CoKo95, HuKT95] is set to be the smallest skew bound of all sink pairs. To compare the impact of a UST on power dissipation, <ref> [XiDa96] </ref> also performed gate sizing with bounded (zero) skew after a BST (ZST) was constructed.
Reference: [XuKu95a] <author> T. Xue and E. S. Kuh, </author> <title> Post Routing Performance Optimization via Tapered Link Insertion and Wiresizing, </title> <booktitle> Proc. European Design Automation Conf., </booktitle> <year> 1995. </year>
Reference-contexts: In all of the works mentioned earlier in this section, we have been interested in the construction of routing trees, and have not allowed multiple connections between pairs of nodes. Recent work, however, has considered the relative merits of non-tree routings. Xue and Kuh <ref> [XuKu95a, XuKu95b] </ref> have suggested multi-link insertion as a method to reduce the resistance between a driver and critical sinks in a tree. In some respects, this can be considered as a generalization on the variable wire width formulations which are detailed in a subsequent section. <p> After the construction spans the entire net, the GWSA algorithm is invoked once more to wiresize the entire tree, starting with the minimal width. Recently, Xue and Kuh <ref> [XuKu95b, XuKu95a] </ref> propose insertion of multi-links into an existing routing tree and do dynamic wiresizing during the link insertion in order to minimize the maximum delay. The Elmore delay formulation for RC meshes in [Wy87] is used.
Reference: [XuKu95b] <author> T. Xue and E. S. Kuh, </author> <title> Post Routing Performance Optimization via Multi-Link Insertion and Non-Uniform Wire-sizing, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1995, </year> <pages> pp. 575-580. </pages>
Reference-contexts: In all of the works mentioned earlier in this section, we have been interested in the construction of routing trees, and have not allowed multiple connections between pairs of nodes. Recent work, however, has considered the relative merits of non-tree routings. Xue and Kuh <ref> [XuKu95a, XuKu95b] </ref> have suggested multi-link insertion as a method to reduce the resistance between a driver and critical sinks in a tree. In some respects, this can be considered as a generalization on the variable wire width formulations which are detailed in a subsequent section. <p> Their work presented an optimal wire-sizing algorithm for a single-source RC interconnect tree to minimize the uniform upper bound of the delay (Section 2.1, Eqn. (1)). Later on, single-source wire-sizing algorithms were presented in <ref> [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] </ref> using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in [XuKY96] using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. <p> After the construction spans the entire net, the GWSA algorithm is invoked once more to wiresize the entire tree, starting with the minimal width. Recently, Xue and Kuh <ref> [XuKu95b, XuKu95a] </ref> propose insertion of multi-links into an existing routing tree and do dynamic wiresizing during the link insertion in order to minimize the maximum delay. The Elmore delay formulation for RC meshes in [Wy87] is used. <p> These algorithms use the right level of abstraction and can be incorporated in a global router efficiently. Further delay reduction can be achieved by refining the initial topology, for example, using the techniques presented in <ref> [BoOI94, BoKR93, ViMa94, XuKu95b] </ref>. Most effective topology optimization for delay reduction is achieved by considering routing tree construction with buffer insertion as discussed in [OkCo96a, OkCo96b, LiCL96a].
Reference: [XuKW96] <author> T. Xue, E. S. Kuh, and D. Wang, </author> <title> Post Global Routing Crosstalk Risk Estimation and Reduction, </title> <booktitle> to appear in Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Again, in order to consider the coupling effect (i.e. crosstalk), one needs to consider the interaction of multiple nets simultaneously. Existing works on crosstalk reduction, including those presented in <ref> [ChOK93, GaLi93, GaLi94, KiSa94, XuKW96] </ref>, focus mainly on proper spacing and wire segment ordering. It is not yet clear how crosstalk will be affected by buffer insertion, device and wire sizing, etc..
Reference: [XuKY96] <author> T. Xue, E. S. Kuh and Q. Yu, </author> <title> A Sensitivity-Based Wiresizing Approach to Interconnect OPtimization of Lossy Transmission Line Topologies, </title> <booktitle> Proc. IEEE Multi-Chip Module Conf., </booktitle> <year> 1996, </year> <pages> pp. 117-121. </pages>
Reference-contexts: Later on, single-source wire-sizing algorithms were presented in [CoLe93, CoLe95, Sa94, XuKu95b, ChCW96b, ChCW96a] using the Elmore delay model, in [MePD94] using a higher-order RC delay model and in <ref> [XuKY96] </ref> using a lossy transmission line model. In addition, the wire-sizing problem for multiple-source nets was formulated and solved in [CoHe95]. Furthermore, wire-sizing was carried out simultaneously with device sizing in [CoKo94, MePP95, MeBP95, LiCL95, CoHe96b, CoHe96c]. <p> We will present first the wire-sizing work [Sa94] to minimize the maximum delay in Subsection 4.2.2.A, where the Elmore delay model is used, then the wire-sizing work [MePD94] to achieve the target delay in Subsection 4.2.2.B, where a higher-order RC delay model is used, and finally the wire-sizing work <ref> [XuKY96] </ref> to minimize the maximum delay for a tree of transmission lines in Subsection 4.2.2.C, where a lossy transmission line model is used. <p> On the other hand, in order to achieve the target delay or handle MCM designs, more accurate delay models are required as in <ref> [MePD94, XuKY96] </ref>. Furthermore, several iterations of the procedures to minimize the weighted delay can be used to minimize the maximum delay or achieve the target delay by adjusting the weight penalty assignment in practice. <p> Note that the algorithm in [MePD94], similar to [Sa94, SaSa94], assumes continuous wire width choices for their wire-sizing solutions. C. Single-Source Tree of Transmission Lines under Lossy Transmission Line Model The wire-sizing work by Xue and Kuh in <ref> [XuKY96] </ref> takes the wire inductance into account by modeling each wire segment as a lossy transmission line, and sizes the wire segments in an interconnect tree to minimize the maximum delay. The maximum delay and its sensitivities with respect to wire widths are computed via high order moments. <p> Then, if a wire segment e i has the maximum j t d j, e i will be assigned either the next larger or smaller wire width, based on the polarity of w i . The procedure iterates until the sensitivities of the maximum delay becomes small. <ref> [XuKY96] </ref> showed the following experimental results: The 2-pole transfer function with moments m 0 ; m 1 and m 2 (m 0 = 0) is reasonably accurate when compared with SPICE2.
Reference: [YuKu95a] <author> Q. Yu and E. S. </author> <title> Kuh Moment Models of General Transmission Line with Application to MCM Interconnect Analysis, </title> <booktitle> Proc. IEEE Multi-Chip Module Conf., </booktitle> <year> 1995, </year> <pages> pp. 594-598. </pages>
Reference-contexts: Another work of Yu and Kuh <ref> [YuKu95a] </ref> computes the moments of a transmission line tree interconnect directly, without first performing non-uniform segmentation of the transmission lines. This algorithm also has a computational complexity of O (np 2 ). Higher order moments are extremely useful for circuit analysis. <p> The maximum delay and its sensitivities with respect to wire widths are computed via high order moments. Based on the exact moment matching method in <ref> [YuKu95a] </ref>, the higher moments and their sensitivities with respect to the wire widths are computed recursively from the lower moments and the sensitivities can be computed analytically. Thus, the maximum delay and its sensitivities with respect to the wire widths can be computed efficiently. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation <ref> [YuKu95a] </ref>, low-order moment matching [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96], and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [YuKu95b] <author> Q. Yu and E. S. </author> <title> Kuh Exact Moment Matching Model of Transmission Lines and Application to Interconnect Delay Estimation, </title> <journal> IEEE Trans. on Very Large Scale Integration (VLSI) Systems, </journal> <volume> 3(2), </volume> <month> Jun. </month> <year> 1995, </year> <pages> pp. 311-322. </pages>
Reference-contexts: . 9 Several approaches have been proposed to compute the moments at each node of a lumped RLC tree, where the lumped resistors and lumped inductors are floating from the ground and form a tree, and the lumped capacitors are connected between the nodes on the tree and the ground <ref> [KaMu95, RaPi94, YuKu95b] </ref>. In the following, we present a method proposed by Yu and Kuh [YuKu95b] for moment computation in an RLC tree. Consider a lumped RLC tree with n nodes. Let k be the parent node of node k, and T k be the subtree rooted at node k. <p> In the following, we present a method proposed by Yu and Kuh <ref> [YuKu95b] </ref> for moment computation in an RLC tree. Consider a lumped RLC tree with n nodes. Let k be the parent node of node k, and T k be the subtree rooted at node k. <p> Let i k (t) be the current flowing from k to k, then its Laplace transform I k (s) is given by <ref> [YuKu95b] </ref>: I k (s) = C j s V j (s): (8) Let R ki and L ki be the total resistance and inductance on the portion of the path Path (s 0 ; i) that is common with the path Path (s 0 ; k), respectively; then, the total impedance <p> The voltage drop from root s 0 to node k is <ref> [YuKu95b] </ref>: V in (s) V k (s) = Z ki C i s V i (s): (9) Then, the transfer function H k (s) = V k (s)=V in (s) becomes [YuKu95b]: H k (s) = 1 Z ki C i s H i (s): (10) p k be the p-th <p> The voltage drop from root s 0 to node k is <ref> [YuKu95b] </ref>: V in (s) V k (s) = Z ki C i s V i (s): (9) Then, the transfer function H k (s) = V k (s)=V in (s) becomes [YuKu95b]: H k (s) = 1 Z ki C i s H i (s): (10) p k be the p-th order moment of H k (s). <p> Expanding H k (s) and H i (s) in Eqn. (10) by the expression in Eqn. (7), and equating the coefficients of powers of s, the p-th order moment at node k under a step input can be expressed as <ref> [YuKu95b] </ref>: m k = &gt; &gt; &gt; &lt; 0 if p = 1, i R ki C i m i L ki C i m i if p &gt; 0. <p> Let C T k p j C j , which is the total p-th order weighted capacitance of T k , then m p k (for p &gt; 0) can be written recursively as <ref> [YuKu95b] </ref>: m k = &lt; 0 if k is the root s 0 , m k p1 L k C T k (12) Therefore, given the (p 1)-th order and (p 2)-th order moments, the p-th order moments of all nodes can be computed by first computing C p1 and C <p> However, this approach is usually not efficient nor accurate. Kahng and Muddu [KaMu94] showed that using 10 uniform segments to approximate the behavior of a transmission line entails errors in the first and second moments of around 10% and 20%, respectively. In <ref> [KaMu94, YuKu95b] </ref>, the authors improve both accuracy and efficiency by considering non-uniform segmentation of the transmission line. Yu and Kuh [YuKu95b] found that for exact moment computation of up to the p-th order, each transmission line 10 should be modeled by b3p=2c non-uniform lumped RLC segments. <p> In [KaMu94, YuKu95b], the authors improve both accuracy and efficiency by considering non-uniform segmentation of the transmission line. Yu and Kuh <ref> [YuKu95b] </ref> found that for exact moment computation of up to the p-th order, each transmission line 10 should be modeled by b3p=2c non-uniform lumped RLC segments. Combining the non-uniform lumped RLC segment model by [KaMu94, YuKu95b] with the moment computation algorithm by [YuKu95b], the moments of a transmission line tree interconnect <p> Yu and Kuh [YuKu95b] found that for exact moment computation of up to the p-th order, each transmission line 10 should be modeled by b3p=2c non-uniform lumped RLC segments. Combining the non-uniform lumped RLC segment model by <ref> [KaMu94, YuKu95b] </ref> with the moment computation algorithm by [YuKu95b], the moments of a transmission line tree interconnect up to the order of p can be computed in O (np 2 ) time, where n is the number of nodes in the tree. <p> Yu and Kuh <ref> [YuKu95b] </ref> found that for exact moment computation of up to the p-th order, each transmission line 10 should be modeled by b3p=2c non-uniform lumped RLC segments. Combining the non-uniform lumped RLC segment model by [KaMu94, YuKu95b] with the moment computation algorithm by [YuKu95b], the moments of a transmission line tree interconnect up to the order of p can be computed in O (np 2 ) time, where n is the number of nodes in the tree. <p> This was done in <ref> [KaMu95, KaMu96b, YuKu95b] </ref>. Based on the two-pole methodology, Kahng and Muddu [KaMu96b] derived an analytical delay model for RLC interconnects. Consider a source driving a distributed RLC line with total resistance R L , total inductance L L , and total capacitance C L .
Reference: [ZhLi96] <author> D. Zhou, and X. Y. Liu, </author> <title> On the Optimal Drivers for High-Speed Low Power ICs, </title> <note> to appear in International Journal of High Speed Electronics and System, </note> <year> 1996. </year>
Reference-contexts: The stage number N can be determined by the optimal stage ratio f as N = ln C L =ln f . Then, f is used for all stages, except that the last stage has a little bit larger ratio for delay minimization [HeJe87]. Most recently, Zhou and Liu <ref> [ZhLi96] </ref> discussed the optimal driver sizing for high-speed low-power ICs. The increasing stage ratios f i = f 0 (1 + g) i are used, where g is a modification factor determined by the I-V curve of the transistor. The typical value of g is around 0.2. <p> They show that f 0 = e 2 + 2g C 0 and f i = f 0 (1 + g) i are the optimal stage ratios for delay minimization. We would like to point out that all studies in <ref> [LiLi75, HeJe87, ZhLi96] </ref> also discussed the optimal driver sizing for power minimization.
Reference: [ZhST93] <author> D. Zhou, S. Su, F. Tsui, D. S. Gao, and J. S. Cong, </author> <title> A Two-Pole Circuit Model for VLSI High-Speed Interconnection, </title> <booktitle> Proc. IEEE Int'l Symp. on Circuits and Systems, </booktitle> <year> 1993, </year> <pages> pp. 2129-2132. </pages>
Reference-contexts: The choice of order q depends on the accuracy required but is always much less than the order of the circuit. In practice, q 5 is commonly used. When q is chosen to be two, it is known as the two-pole model <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94] </ref>. In this model, the first three moments m 0 (which is normalized), m 1 , and m 2 are used. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [ZhST94] <author> D. Zhou, S. Su, F. Tsui, D. S. Gao, and J. S. Cong, </author> <title> A Simplified synthesis of Transmission Lines with A Tree Structure, </title> <journal> Int'l Journal of Analog Integrated Circuits and Signal Processing, </journal> <month> Jan. </month> <year> 1994, </year> <pages> pp. 19-30. </pages>
Reference-contexts: The choice of order q depends on the accuracy required but is always much less than the order of the circuit. In practice, q 5 is commonly used. When q is chosen to be two, it is known as the two-pole model <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94] </ref>. In this model, the first three moments m 0 (which is normalized), m 1 , and m 2 are used. <p> This provides a closed-form formula for the topology optimization algorithm in [ZhTG93]. However, the expression of m 2 is much more complicated than that of m 1 (the Elmore delay). Moreover, the method of <ref> [Ho84, GaZh93, ZhST94] </ref> calculates the second moment by replacing the off-path admittance by the sum of the total subtree capacitance. This is correct only to the coefficient of s in the subtree admittance. Thus, such a method underestimates the subtree impedance. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [ZhTG93] <author> D. Zhou, F. Tsui, and D. S. Gao, </author> <title> High Performance Multichip Interconnection Design, </title> <booktitle> Proc. 4th ACM/SIGDA Physical Design Workshop, </booktitle> <month> Apr. </month> <year> 1993, </year> <pages> pp. 32-43. </pages>
Reference-contexts: The choice of order q depends on the accuracy required but is always much less than the order of the circuit. In practice, q 5 is commonly used. When q is chosen to be two, it is known as the two-pole model <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94] </ref>. In this model, the first three moments m 0 (which is normalized), m 1 , and m 2 are used. <p> A closed-form expression of m 2 is given and an analytical formula relating the performance of an RLC interconnect to its topology and geometry is derived by Gao and Zhou [GaZh93]. This provides a closed-form formula for the topology optimization algorithm in <ref> [ZhTG93] </ref>. However, the expression of m 2 is much more complicated than that of m 1 (the Elmore delay). Moreover, the method of [Ho84, GaZh93, ZhST94] calculates the second moment by replacing the off-path admittance by the sum of the total subtree capacitance. <p> This method begins with an initial forest of points, computes the weighted medium point for each vertex, and then grows the smallest weighted subtree. This process is iterated until all vertices are connected. The weighted medium point, subtree weights, and direction of growth, are all heuristically determined. In <ref> [ZhTG93] </ref>, Zhou, Tsui, and Gao presented a heuristic method to construct routing trees based on their analysis using a 2-pole RLC delay model. Their model has been described in Section 2.1. <p> Therefore, there is a strong need to bridge the gap between the timing models used for circuit simulation and circuit and interconnect optimization. The recent work on efficient moment computation [YuKu95a], low-order moment matching <ref> [Ho84, ZhTG93, GaZh93, ZhST93, ZhST94, KaMu96b, KaMM96, TuDP96] </ref>, and central moment formulation [KrGW95] have made very good progress in this direction. But much more work need to be done in this area. 2.
Reference: [ZhDa92] <author> Q. Zhu and W. W.-M. Dai, </author> <title> Perfect-balance planar clock routing with minimal path-length, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 473-476. </pages>
Reference-contexts: Recent studies on clock routing have also led to new methods for single-layer (planar) clock routing <ref> [ZhDa92, KaTs94a, KaTs94b] </ref>. Furthermore, a number of authors have applied wiresizing optimizations and/or buffer optimizations to minimize phase delay [PuMO93, Ed93b, MePP93, PuMP93], skew sensitivity to process variation [PuMO93, ChCh94, LiWo94, XiDa95], and/or power dissipation [PuMO93, ViMa95]. Most of these works are based on the pathlength and Elmore delay models. <p> is not difficult to see that given a routing solution with Euclidean planarity, we can always embed a straight Euclidean segment by a rectilinear staircase to get a planar rectilinear routing solution. 68 5.3.1 Max-Min Planar Clock Routing The planar clock routing problem was first studied by Zhu and Dai <ref> [ZhDa92] </ref>. They proposed the Max-Min algorithm which assumes a given source location. At the start of the algorithm, the source forms a single-node tree T . At each iteration, the algorithm grows T by selecting a sink s i not attached to T and connecting s i to T .
Reference: [ZhDX93] <author> Q. Zhu, W. W.-M. Dai, and J. G. </author> <title> Xi, Optimal Sizing of High-Speed Clock Networks Based on Distributed RC and Lossy Transmission Line Models, </title> <booktitle> Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 628-633. </pages>
Reference-contexts: The first algorithm achieves minimal skew by making slower paths faster by wiresizing <ref> [ZhDX93] </ref> (instead of making the faster paths slower by snaking in the DME approach). The second approach considers wiresizing to minimize clock delay and uses the DME approach to ensure zero skew [Ed93b]. <p> The third heuristic considers not only the nominal skew due to sink delays but also the process skew. At the same time, it tries to meet a specified target delay [PuMP93]. Both <ref> [ZhDX93, PuMP93] </ref> assume discrete wire sizes, whereas [Ed93b] assumes continuous wire width although it can also be modified to consider discrete wire widths. <p> Since it is not possible to achieve arbitrary precision during fabrication, it is better to have a layout with discrete wire widths and transistor sizes in order to eliminate skew due to mapping of continuous widths/sizes to discrete widths/sizes. <ref> [ZhDX93] </ref> can handle constraint on the maximum wire width whereas [Ed93b, PuMP93] can be extended easily to consider maximum wire width constraint. Note that the constraint on the maximum wire width is imposed by the available routing resource. <p> Note that different segments of wires may have different upper and lower bounds. The Optimal Sizing Method (OSM) proposed by Zhu, Dai, and Xi <ref> [ZhDX93] </ref> considers distributed RC and lossy transmission line models using a generalized delay macromodel which is based on scattering-parameters of interconnect [LiDW93]. Also, it can handle general clock network which may includes loops. <p> The three rules can be generalized to handle buffered clock tree. A clock mesh and two clock trees were used to evaluate the OSM algorithm under both RC model and lossy transmission line model. <ref> [ZhDX93] </ref> reported smaller skews for optimized circuits when compared to the original circuits. The authors noted that the skew reduction should be more significant for clock trees than for clock meshes since stronger interaction among clock sinks in clock meshes results in less skew sensitivity with respect to wire widths. <p> Experimental results show that BIS can achieve up to 326% reduction in power dissipation when compared to the wiresized clock trees constructed by <ref> [ZhDX93] </ref>. However, there is no improvement in terms of clock skew and clock delay. Although the clock skews are reasonably small, the clock delay can be as high as 10ns [XiDa95], even for a relatively small clock net such as benchmark circuit Primary2.
Reference: [ZhXDS94] <author> Q. Zhu, J. G. Xi, W. W.-M. Dai, and R. Shukla, </author> <title> Low Power Clock Distribution Based on Area Pad Interconnect for Multichip Modules, </title> <booktitle> Proc. Int'l Workshop of Low Power Design, </booktitle> <year> 1994, </year> <pages> pp. 87-92. 99 </pages>
Reference-contexts: For example, there is a clock synthesis algorithm that specifically targets towards low power design using gated clock [TeFS95]. Two-level clock routing with the upper level routing in multichip module substrate has also been studied <ref> [ZhXDS94] </ref>. In addition, there are studies that target hierarchical data path design (instead of flat logic design) [NeFr93, NeFr94, NeFr95] and consider retiming [Fr92b, SoFr94, SoFM95] using skew information.
References-found: 198

