URL: http://mml.cs.ucla.edu/~santos/ipds98.ps
Refering-URL: http://mml.cs.ucla.edu/~santos/
Root-URL: http://www.cs.ucla.edu
Email: fmuntz,santos,frankg@cs.ucla.edu  
Title: Design of a Fault Tolerant Real-time Storage System for Multimedia Applications  
Author: Richard Muntz, Jose Renato Santos, Frank Fabbrocino 
Affiliation: UCLA Computer Science Department Multimedia Laboratory  
Abstract: We describe the design and implementation of the RIO (Randomized I/O) multimedia object server which manages a set of parallel disks and supports real-time throughput and statistical delay guarantees. The original implementation, on an SMP (Sun Microsystems E4000), has been ported to a cluster of PCs. The new version uses a similar philosophy with respect to allocation of data storage and scheduling of requests. However the parallel shared nothing architecture raises all the issues of latency, scalability, etc. that are familiar in parallel and distributed systems. Our requirements are particularly demanding since we expect to support a variety of multimedia applications with varying workload requirements and data reference patterns. 3D interactive applications, video, hypermedia and interactive scientific visualization of terabyte size data sets are among the applications we support. This paper details the design issues we addressed and the results of detailed simulation studies which dictated the design choices made. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.L. Eager, E.D. Lazowska, J. Zahorjan, </author> <title> Adaptive Load Sharing in Homogeneous Distributed Systems, </title> <journal> IEEE Trans. on Software Engineering, </journal> <pages> pp. 662-675, </pages> <year> 1986. </year>
Reference: [2] <author> F. Fabbrocino, J.R. Santos, R.R. Muntz, </author> <title> An Implicitly Scalable, Fully Interactive Multimedia Storage Server . To appear in the Second International Workshop on Distributed Interactive Simulation and Real Time Applications (DIS-RT '98), </title> <address> Montreal, </address> <month> July </month> <year> 1998 </year>
Reference-contexts: In this configuration half of the clusters are composed of logical volumes on disks attached to a single node (clusters I1, I2, I3, I4), while the other half have their logical volumes on disks attached to two neighboring nodes (clusters X12, X23, X34, X14). We have shown elsewhere <ref> [2] </ref> that an optimal combination of intra and inter replication, that maximizes load balance and thus performance, is approximately 80% and 20%, respectively. <p> Organizing overlapping clusters as described in Figure 6 has the advantage of generating approximately 75% intra-replication and 25% inter-replication, which has performance very close to the optimal 80%/20% combination described in <ref> [2] </ref>.
Reference: [3] <author> T. Funkhauser, C. Sequin, S. Teller, </author> <title> Management of Large Amounts of Data in Interactive Building Walkthroughs, </title> <booktitle> ACM SIGGRAPH Proc. of the 1992 Symposium on Interactive 3D Graphics, </booktitle> <year> 1992. </year>
Reference-contexts: The access pattern to storage objects thus depends on the speeds and paths selected by the user, which makes prediction imperfect at best. 3D virtual world models have been used for different applications such as architectural build-ing design <ref> [3] </ref>, urban city models [6], scientific visualization [7][4], etc.; and will be increasingly common in the future. patterns and online load balancing based on random replication.
Reference: [4] <author> W. Gekelman, D. Leneman, J. Maggs, </author> <title> Experimental Observation of Alfven Wave Cones, </title> <journal> Physics of Plasmas, </journal> <volume> 1, pp.3775-3783, </volume> <year> 1994. </year>
Reference: [5] <author> H. Hsiao, </author> <title> D.J. Dewitt, Chained Declustering: A New Availability Strategy for Multiprocessor Database Machines, </title> <booktitle> Proc. of Data Engineering, </booktitle> <pages> pp 456-65, </pages> <year> 1990. </year>
Reference-contexts: However these same constraints can also reduce the capacity for short term load balancing during both normal operation as well as degraded mode. One such 100% replication scheme is chained decluster-ing <ref> [5] </ref>, in which half the data which is stored on a given disk i is replicated in the next logically consecutive disk i + 1. This scheme is illustrated in Figure 3 (b). Chained declustering allows multiple disk failures, provided only that no two failures occur on logically consecutive disks.
Reference: [6] <author> W. Jepson, R. Liggett, S. Friedman, </author> <title> Virtual Modeling of Urban Environments, Presence: </title> <booktitle> Teleoperators and Virtual Environments, </booktitle> <volume> Vol. 5, </volume> <publisher> No.1, MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: The access pattern to storage objects thus depends on the speeds and paths selected by the user, which makes prediction imperfect at best. 3D virtual world models have been used for different applications such as architectural build-ing design [3], urban city models <ref> [6] </ref>, scientific visualization [7][4], etc.; and will be increasingly common in the future. patterns and online load balancing based on random replication.
Reference: [7] <author> W. Karplus, </author> <title> M.R. Harreld, The Role of Virtual Environments in Clinical Medicine: Scientific Visualization, </title> <booktitle> Proc. First Jint Conference of International Simulation Societies (CISS), </booktitle> <address> Zurich, Switzerland, </address> <pages> pp. 13-17, </pages> <month> September </month> <year> 1994. </year>
Reference: [8] <author> M.D. Mitzenmacher, </author> <title> The Power of Two Choices in Randomized Load Balancing, </title> <type> PhD Dissertation, </type> <institution> University of Cali-fornia at Berkeley, Computer Science Department, </institution> <year> 1996. </year>
Reference-contexts: In addition to illustrating the accuracy of the simulation, see that even as little as 25% replication provides a significant decrease in the delay bound that can be guaranteed with probability 110 6 ; particularly under relatively high load. (This observation was also made in <ref> [8] </ref> based on an analytic model of the same type of system we analyze here but with more restrictive assumptions.) 2.3 Fault tolerance The use of partial replication as described in the last sections is an effective method for providing short term load balance among the parallel disks.
Reference: [9] <author> R. Muntz, J. C-S. Lui, </author> <title> Performance Analysis of Disk Arrays Under Failure, </title> <booktitle> Proc. VLDB, </booktitle> <address> Brisbane, Australia, </address> <pages> pp. 162-173, </pages> <year> 1990. </year>
Reference-contexts: In this approach, the total number of disks in the system, D, are divided into N A disk arrays with D A = D=N A disks each. Each disk array is a RAID level 5 [10] with parity group declustering <ref> [9] </ref> that stores data organized as parity groups of size G distributed on D A different disks (G1 data blocks and 1 parity block; G D A ). A fraction ff of the data blocks are then randomly replicated across all disks of the system.
Reference: [10] <author> D.A. Patterson, G. Gibson, R.H. Katz, </author> <title> A Case for Redundant Arrays of Inexpensive Disks (RAID), </title> <booktitle> SIGMOD 88, </booktitle> <address> pp.109-116, </address> <year> 1988. </year>
Reference-contexts: There are basically two approaches; one is to use full replication and the other is to use parity groups such as used in RAID schemes <ref> [10] </ref>. One possibility is to use RAID technology to provide fault tolerance and partial replication of data blocks to provide short term load balancing. <p> In this approach, the total number of disks in the system, D, are divided into N A disk arrays with D A = D=N A disks each. Each disk array is a RAID level 5 <ref> [10] </ref> with parity group declustering [9] that stores data organized as parity groups of size G distributed on D A different disks (G1 data blocks and 1 parity block; G D A ). A fraction ff of the data blocks are then randomly replicated across all disks of the system.
References-found: 10

