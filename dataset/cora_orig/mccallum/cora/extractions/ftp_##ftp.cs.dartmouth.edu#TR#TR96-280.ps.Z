URL: ftp://ftp.cs.dartmouth.edu/TR/TR96-280.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~agent/papers/index.html
Root-URL: http://www.cs.dartmouth.edu
Author: Nog Sumit Chawla David Kotz 
Keyword: Transportable Agents, Remote Procedure Call (RPC), Interprocess Communication.  
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Note: Saurab  This work was funded in part by Office of Naval Research (ONR) contract number N00014-95-1-1204. Their support is gratefully acknowledged.  
Pubnum: Dartmouth Technical Report PCS-TR96-280  
Email: fsaurab, chawla, dfkg@cs.dartmouth.edu  
Date: March 5, 1996  
Abstract: Available at URL ftp://ftp.cs.dartmouth.edu/pub/CS-techreports/TR96-280.ps.Z An RPC Mechanism for Transportable Agents Abstract Transportable agents are autonomous programs that migrate from machine to machine, performing complex processing at each step to satisfy client requests. As part of their duties agents often need to communicate with other agents. We propose to use remote procedure call (RPC) along with a flexible interface definition language (IDL), to add structure to inter-agent communication. The real power of our Agent RPC comes from a client-server binding mechanism based on flexible IDL matching and from support for multiple simultaneous bindings. Our agents are programmed in Agent Tcl; we describe how the Tcl implementation made RPC particularly easy to implement. Finally, although our RPC is designed for Agent Tcl programs, the concepts would also work for standard Tcl programs. 
Abstract-found: 1
Intro-found: 1
Reference: [AR94] <author> J. S. Auerbach and J. R. Russell. </author> <title> The Concert signature representation: IDL as an intermediate language. </title> <booktitle> In Proceedings of the Workshop on Interface Definition Languages, </booktitle> <pages> pages 1-12, </pages> <year> 1994. </year>
Reference-contexts: There are many RPC-related systems. Several kinds of nameservers and stub compilers have been written, each with an intended application. Most research, however, is aimed at optimizing RPC speed, through kernel hacks [BALL90] or through the use of specification files to provide information that can be used for optimization <ref> [FHL95, AR94] </ref>. Our focus is in providing flexibility in the interface specification. The closest work we know is the "Tcl-DP Name Server" [LSR95], which augments the RPC mechanism of Tcl-DP [SRY93], a distributed programming extension to Tcl, with an easy and reliable lookup service.
Reference: [BALL90] <author> Brian N. Bershad, Thomas E. Anderson, Edward D. Lazowska, and Henry M. Levy. </author> <title> Lightweight remote procedure call. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 37-55, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Agent Tcl is free 1 and has been ported to several platforms. There are many RPC-related systems. Several kinds of nameservers and stub compilers have been written, each with an intended application. Most research, however, is aimed at optimizing RPC speed, through kernel hacks <ref> [BALL90] </ref> or through the use of specification files to provide information that can be used for optimization [FHL95, AR94]. Our focus is in providing flexibility in the interface specification.
Reference: [BLNS82] <author> A. D. Birrell, R. Levin, R. M. Needham, and M. D. Schroeder. </author> <title> Remote Execution. </title> <journal> Communications ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: So if the client supplied a value for payment form, it will overwrite the default value. The actual server function buy ticket is then called with all the parameters. 5 NameServer The nameserver is an agent with functionality similar to that of the Grapevine system <ref> [BLNS82] </ref>. It is a database that the servers use to register services and the clients use to locate services.
Reference: [BN84] <author> Andrew D. Birrell and Bruce Jay Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Agents often need to communicate, as would be the case between a client and server agent. This communication needs structure, as do all interfaces, but needs flexibility to allow agents to speak on different levels. We developed a remote procedure call (RPC) <ref> [BN84] </ref> mechanism that, together with our Agent Interface Definition Language (AIDL), provides this structure and flexibility for agents. Our system is built on top of Agent Tcl, a transportable-agent system under development at Dartmouth College [Gra95a, Gra95b].
Reference: [Bro95] <author> Kraig Brockschmidt. </author> <title> Inside OLE, </title> <booktitle> 2nd Edition. </booktitle> <address> ISBN 1-55615-843-2. </address> <publisher> Microsoft Press, </publisher> <year> 1995. </year>
Reference-contexts: Although the list of commands serviced by the name server is similar to ours, they use no IDL for specifying and matching interfaces. Also, clients and servers are processes, not agents. The Agent RPC system also shares common goals with distributed component technologies like Network OLE <ref> [Bro95] </ref> and CORBA [COR91]. Both systems try to help clients locate appropriate servers by using interface matching.
Reference: [COR91] <editor> The common object request broker: </editor> <title> Architecture and specification. OMG TC Document Number 91.12.1, Revision 1.1, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: Although the list of commands serviced by the name server is similar to ours, they use no IDL for specifying and matching interfaces. Also, clients and servers are processes, not agents. The Agent RPC system also shares common goals with distributed component technologies like Network OLE [Bro95] and CORBA <ref> [COR91] </ref>. Both systems try to help clients locate appropriate servers by using interface matching.
Reference: [Fab74] <author> R. S. Fabry. </author> <title> Capability-based addressing. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 403-412, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: Our system is different in other ways: * A new, flexible interface definition language, AIDL, allows default parameters and position-independent parameters. * Client-server bindings are based on interface matching rather than on names, and there is support for multiple simultaneous bindings. * Capabilities <ref> [Fab74] </ref> are supported at bind time. A server can accept or reject a bind request based on the validity of the capability provided by the client.
Reference: [FHL95] <author> B. Ford, M. Hibler, and J. Lepreau. </author> <title> Using annotated interface definitions to optimize RPC. </title> <type> Technical Report UUCS-95-014, </type> <institution> Utah, </institution> <month> March </month> <year> 1995. </year> <note> REFERENCES 16 </note>
Reference-contexts: There are many RPC-related systems. Several kinds of nameservers and stub compilers have been written, each with an intended application. Most research, however, is aimed at optimizing RPC speed, through kernel hacks [BALL90] or through the use of specification files to provide information that can be used for optimization <ref> [FHL95, AR94] </ref>. Our focus is in providing flexibility in the interface specification. The closest work we know is the "Tcl-DP Name Server" [LSR95], which augments the RPC mechanism of Tcl-DP [SRY93], a distributed programming extension to Tcl, with an easy and reliable lookup service.
Reference: [Gra95a] <author> Robert S. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <booktitle> In Proceedings of the CIKM Workshop on Intelligent Information Agents, Fourth International Conference on Information and Knowledge Management (CIKM 95), </booktitle> <address> Baltimore, Maryland, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: We developed a remote procedure call (RPC) [BN84] mechanism that, together with our Agent Interface Definition Language (AIDL), provides this structure and flexibility for agents. Our system is built on top of Agent Tcl, a transportable-agent system under development at Dartmouth College <ref> [Gra95a, Gra95b] </ref>. Transportable agents in this system are written in an extended version of the Tool Command Language (Tcl) [Ous94]. As a result, most of our RPC ideas apply to plain Tcl programs as well. component corresponds to its position in the system hierarchy. <p> In this section we describe related work in these areas. The advantages of transportable agents have led to a flurry of implementation work. Three notable systems are Tacoma [JvRS95], Telescript [Whi94], and Agent Tcl <ref> [Gra95a, Gra95b] </ref>. Tacoma agents are written in Tcl/Horus, which is a version of Tcl that uses Horus [vRHB94] to provide group communication and fault tolerance.
Reference: [Gra95b] <author> Robert S. Gray. </author> <title> Transportable agents. </title> <type> Technical Report PCS-TR95-261, </type> <institution> Dept. of Computer Science, Dartmouth College, </institution> <year> 1995. </year> <type> Thesis proposal. </type>
Reference-contexts: We developed a remote procedure call (RPC) [BN84] mechanism that, together with our Agent Interface Definition Language (AIDL), provides this structure and flexibility for agents. Our system is built on top of Agent Tcl, a transportable-agent system under development at Dartmouth College <ref> [Gra95a, Gra95b] </ref>. Transportable agents in this system are written in an extended version of the Tool Command Language (Tcl) [Ous94]. As a result, most of our RPC ideas apply to plain Tcl programs as well. component corresponds to its position in the system hierarchy. <p> In this section we describe related work in these areas. The advantages of transportable agents have led to a flurry of implementation work. Three notable systems are Tacoma [JvRS95], Telescript [Whi94], and Agent Tcl <ref> [Gra95a, Gra95b] </ref>. Tacoma agents are written in Tcl/Horus, which is a version of Tcl that uses Horus [vRHB94] to provide group communication and fault tolerance.
Reference: [JvRS95] <author> D. Johansen, R. van Renesse, and F.B. Schneider. </author> <title> An introduction to the TACOMA distributed system version 1.0. </title> <type> Technical Report 95-23, </type> <institution> University of Tromst, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: In this section we describe related work in these areas. The advantages of transportable agents have led to a flurry of implementation work. Three notable systems are Tacoma <ref> [JvRS95] </ref>, Telescript [Whi94], and Agent Tcl [Gra95a, Gra95b]. Tacoma agents are written in Tcl/Horus, which is a version of Tcl that uses Horus [vRHB94] to provide group communication and fault tolerance.
Reference: [LSR95] <author> P. T. Liu, B. Smith, and L. Rowe. </author> <title> Tcl-DP Name Server. </title> <booktitle> In Proceedings of the Tcl/Tk Workshop, </booktitle> <pages> pages 1-13, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Our focus is in providing flexibility in the interface specification. The closest work we know is the "Tcl-DP Name Server" <ref> [LSR95] </ref>, which augments the RPC mechanism of Tcl-DP [SRY93], a distributed programming extension to Tcl, with an easy and reliable lookup service. Services are organized in a hierarchical manner as if they were files in a directory. Aliases can be created for services shared by different applications.
Reference: [McK95] <author> Marshall Kirk McKusick. </author> <title> The virtual filesystem interface in 4.4BSD. </title> <journal> Computing Systems, </journal> <volume> 8(1) </volume> <pages> 3-25, </pages> <month> Winter </month> <year> 1995. </year>
Reference-contexts: if we are communicating with agents in other languages, a feature that will be present in a future version of Agent Tcl. * Security: provide the option to encrypt messages between clients and servers. * Nameserver: provide the nameserver the ability to update its list of active servers. * Portals <ref> [McK95] </ref> [SP95]: we would like to make the nameserver a portal process and use it to build an agent file system. 9 CONCLUSIONS 15 9 Conclusions We have presented an RPC mechanism for Tcl agents that provides a flexible and easy method of communicating with other agents.
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1994. </year>
Reference-contexts: Our system is built on top of Agent Tcl, a transportable-agent system under development at Dartmouth College [Gra95a, Gra95b]. Transportable agents in this system are written in an extended version of the Tool Command Language (Tcl) <ref> [Ous94] </ref>. As a result, most of our RPC ideas apply to plain Tcl programs as well. component corresponds to its position in the system hierarchy.
Reference: [SP95] <author> W. Richard Stevens and Jan-Simon Pendry. </author> <booktitle> Portals in 4.4BSD. In Proceedings of the 1995 Usenix Technical Conference, </booktitle> <pages> pages 1-10, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: we are communicating with agents in other languages, a feature that will be present in a future version of Agent Tcl. * Security: provide the option to encrypt messages between clients and servers. * Nameserver: provide the nameserver the ability to update its list of active servers. * Portals [McK95] <ref> [SP95] </ref>: we would like to make the nameserver a portal process and use it to build an agent file system. 9 CONCLUSIONS 15 9 Conclusions We have presented an RPC mechanism for Tcl agents that provides a flexible and easy method of communicating with other agents.
Reference: [SRY93] <author> B. C. Smith, L. A. Rowe, and S. Yen. </author> <title> Tcl Distributed Programming. </title> <booktitle> In Proceedings of the Tcl/Tk Workshop, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: Our focus is in providing flexibility in the interface specification. The closest work we know is the "Tcl-DP Name Server" [LSR95], which augments the RPC mechanism of Tcl-DP <ref> [SRY93] </ref>, a distributed programming extension to Tcl, with an easy and reliable lookup service. Services are organized in a hierarchical manner as if they were files in a directory. Aliases can be created for services shared by different applications.
Reference: [vRHB94] <author> R. van Renesse, T. M. Hickey, and K. P. Birman. </author> <title> Design and Performance of Horus: A Lightweight Group Communications System. </title> <type> Technical Report TR 94-1442, </type> <institution> Cornell, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: The advantages of transportable agents have led to a flurry of implementation work. Three notable systems are Tacoma [JvRS95], Telescript [Whi94], and Agent Tcl [Gra95a, Gra95b]. Tacoma agents are written in Tcl/Horus, which is a version of Tcl that uses Horus <ref> [vRHB94] </ref> to provide group communication and fault tolerance. Tacoma agents communicate using the meet operation; data to be exchanged is carried in a briefcase, which is a collection of folders containing units of data accessible by agents.
Reference: [Whi94] <author> James E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper, </title> <year> 1994. </year>
Reference-contexts: In this section we describe related work in these areas. The advantages of transportable agents have led to a flurry of implementation work. Three notable systems are Tacoma [JvRS95], Telescript <ref> [Whi94] </ref>, and Agent Tcl [Gra95a, Gra95b]. Tacoma agents are written in Tcl/Horus, which is a version of Tcl that uses Horus [vRHB94] to provide group communication and fault tolerance.
References-found: 18

