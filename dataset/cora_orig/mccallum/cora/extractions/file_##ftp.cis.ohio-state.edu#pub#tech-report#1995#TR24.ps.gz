URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1995/TR24.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: fspiro,iordonezg@cis.ohio-state.edu.  
Phone: Voice: +1 (614) 292 6377 FAX: +1 (614) 292 2911  
Title: Time and Money: A Case Study in Systematic Development of Constraint Logic Programs  
Author: Spiro Michaylov Ivan Ordo~nez 
Address: 2015 Neil Avenue, Columbus, OH 43210-1277, U.S.A.,  
Affiliation: Department of Computer and Information Science, The Ohio State University, 395 Dreese Lab,  
Pubnum: Technical Report OSU-CISRC-5/95-TR24  
Abstract: The utility of Constraint Logic Programming (CLP) for developing complex and flexible software has been well established. However, on realizing the full power of the paradigm, programmers can find themselves coding some remarkably complicated models, producing programs that are compact, powerful, but difficult to understand and modify. The Skeletons and Techniques discipline for developing Prolog programs has been seen to be most helpful in such situations. This discipline has already been shown to be usable for CLP. Here we present the first case study in developing a substantial CLP program, a financial modeling package in CLP(R), using an extended method based on Skeletons and Techniques. We develop a core set of simple programs that identify the essence of the required computations, and combine these at the source level to develop a complex and powerful program that is far easier to understand in terms of its component skeletons, techniques and compositions than by examining the resulting program source. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tod Amon and Gaetano Borriello. </author> <title> An approach to symbolic timing verification. </title> <booktitle> In Proc. 29th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 410-413, </pages> <address> Anaheim, CA, USA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [2] <author> D. Barker-Plummer. </author> <title> Clichee programming in prolog. </title> <booktitle> In Proc. 2nd Workshop on Meta-Programming in Logic, </booktitle> <pages> pages 247-256, </pages> <address> Leuven, </address> <year> 1990. </year>
Reference-contexts: Some interesting alternate views of constructing Prolog programs can be found in the work of Barker-Plummer <ref> [2] </ref>, Fuchs and Fromherz [4] and Gegg-Harrison [5]. Much of the utility of extending skeletons with techniques comes from combining extensions of a single skeleton by what is known as composition.
Reference: [3] <author> M. Dincbas, H. Simonis, and P. van Hentenryck. </author> <title> Solving Large Combinatorial Problems in Logic Programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 8(1-2):74-94, </volume> <month> January-March </month> <year> 1990. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [4] <author> N. E. Fuchs and M. P. J. Fromherz. </author> <title> Schema-based transformations of logic programs. </title> <booktitle> In Proc. International Workshop on Logic Program Synthesis and Transformation (LOPSTR), </booktitle> <pages> pages 111-125, </pages> <address> Manchester, </address> <year> 1991. </year> <note> Spring-Verlag LNCS. 19 </note>
Reference-contexts: Some interesting alternate views of constructing Prolog programs can be found in the work of Barker-Plummer [2], Fuchs and Fromherz <ref> [4] </ref> and Gegg-Harrison [5]. Much of the utility of extending skeletons with techniques comes from combining extensions of a single skeleton by what is known as composition.
Reference: [5] <author> Timothy S. Gegg-Harrison. </author> <title> Logic program schemata and programming techniques. </title> <booktitle> In Proc. 12th International Conference on Logic Programming, Kanagawa, </booktitle> <address> Japan, June 1995. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Some interesting alternate views of constructing Prolog programs can be found in the work of Barker-Plummer [2], Fuchs and Fromherz [4] and Gegg-Harrison <ref> [5] </ref>. Much of the utility of extending skeletons with techniques comes from combining extensions of a single skeleton by what is known as composition.
Reference: [6] <author> Michael M. Gorlick, Carl F. Kesselman, Daniel A. Marotta, and D. Stott Parker. Mockingbird: </author> <title> A logical methodology for testing. </title> <journal> Journal of Logic Programming, </journal> <volume> 8(1 </volume> & 2):95-119, January/March 1990. 
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [7] <author> Nevin Heintze, Spiro Michaylov, and Peter Stuckey. </author> <title> CLP(R) and some electrical engineering problems. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 9 </volume> <pages> 231-260, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [8] <author> Joxan Jaffar and Jean-Louis Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Munich, Germany, </address> <pages> pages 111-119. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1987. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) <ref> [8] </ref> for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature [1, 3, 6, 7, 10, 15, 16, 20, 21].
Reference: [9] <author> Joxan Jaffar, Spiro Michaylov, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems (TOPLAS), </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The use of the Skeletons and Techniques method for developing a significant Prolog application has already been demonstrated [14]. In this paper, we investigate using the method to develop significant programs in an arithmetic-based CLP language, CLP (R) <ref> [9] </ref>, although we could have used any other arithmetic-based CLP language. The application domain will be basic financial modeling. <p> These components are as much of an objective as the actual application at hand. The benefit of using CLP (R) for this work comes from a number of quarters: 2 1. As demonstrated by the notorious mortgage program <ref> [9] </ref>, the various programs developed can be at once remarkably simple, flexible and powerful. 2. Even if individual programs use the components with only one calling pattern, different programs can be developed by using the components with different calling patterns.
Reference: [10] <author> Jean Jourdan and Raul E. Valdes Perez. </author> <title> Constraint logic programming applied to hypothetical reasoning in chemistry. </title> <editor> In Saumya Debray and Manuel Hermenegildo, editors, </editor> <booktitle> Logic Programming: Proceedings of the North American Conference, </booktitle> <address> Austin, Texas, </address> <pages> pages 154-172. </pages> <publisher> MIT Press, </publisher> <month> November </month> <year> 1990. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [11] <author> Marc Kirschenbaum, Spiro Michaylov, and Leon Sterling. </author> <title> Skeletons and techniques as a normative approach to program construction in logic-based languages. </title> <type> Technical Report OSU-CISRC-5/94-TR25, </type> <institution> Department of Computer and Information Science, The Ohio State University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: This form of composition is the simplest of many ways that programs can be combined, and in this paper we will present a number of new ways. The use of skeletons for CLP was introduced by Kirschenbaum, Michaylov and Sterling <ref> [11] </ref>, with a number of simple examples. That paper explored the common aspects of the use of skeletons and techniques for logic-based language. In contrast, [17] explores the specific skeletons and techniques needed to make CLP programming accessible to relatively naive programmers.
Reference: [12] <author> Marc Kirschenbaum, Leon Sterling, and Ashish Jain. </author> <title> Relating logic programs via program maps. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 8(3-4):229-245, </volume> <year> 1993. </year>
Reference-contexts: Sum is 0. length ([X|Xs], Len) :- sum ([X|Xs], Sum) :- length (Xs, Len1), sum (Xs, Sum1), Len is Len1 + 1. Sum is Sum1 + X. Sterling and Kirschenbaum develop a catalog of useful skeletons and techniques, and in <ref> [12] </ref>, Kirschen-baum, Sterling and Jain show that the structure of computations is preserved by the application of a class of techniques in an important way. Some interesting alternate views of constructing Prolog programs can be found in the work of Barker-Plummer [2], Fuchs and Fromherz [4] and Gegg-Harrison [5].
Reference: [13] <author> Arun Lakhotia and Leon Sterling. </author> <title> Composing recursive programs with clausal join. </title> <journal> New Generation Computing, </journal> <volume> 6 </volume> <pages> 211-225, </pages> <year> 1988. </year>
Reference-contexts: like process (T, X, X1, Y, Y1) :- c1 (T), c2 (X, X1), c3 (Y, Y1). 18 A.2 Composition over a Skeleton By composition over a skeleton we are referring to the standard composition method used by Sterling and Kirschenbaum, and originally defined as clausal join by Lakhoita and Sterling <ref> [13] </ref>. This requires the two rules to be extensions of the same skeleton, and has the effect of applying the two corresponding techniques together to the original skeleton. The lengthsum program of Section 3 was obtained in this way from the length and sum programs.
Reference: [14] <author> Arun Lakhotia, Leon Sterling, and Dimitar Bojantchev. </author> <title> Development of a prolog tracer by stepwise enhancement. </title> <type> Technical Report CES-88-03, </type> <institution> Computer Engineering and Science Department, Case Western Reserve University, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum. The use of the Skeletons and Techniques method for developing a significant Prolog application has already been demonstrated <ref> [14] </ref>. In this paper, we investigate using the method to develop significant programs in an arithmetic-based CLP language, CLP (R) [9], although we could have used any other arithmetic-based CLP language. The application domain will be basic financial modeling.
Reference: [15] <author> Sivand Lakmazaheri and William J. Rasdorf. </author> <title> Constraint logic programming for the analysis and partial synthesis of truss structures. </title> <booktitle> Artificial Intelligence for Engineering Design, Analysis, and Manufacturing, </booktitle> <volume> 3(3) </volume> <pages> 157-173, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [16] <author> Catherine Lassez, Ken McAloon, and Roland Yap. </author> <title> Constraint logic programming and options trading. </title> <journal> IEEE Expert, Special Issue on Financial Software, </journal> <volume> 2(3) </volume> <pages> 42-50, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [17] <author> Spiro Michaylov. </author> <title> Skeletons and techniques for the systematic development of constraint logic programs. </title> <booktitle> In 6th IEEE International Conference on Tools with Artificial Intelligence, </booktitle> <address> New Orleans, </address> <month> November </month> <year> 1994. </year> <note> Also appears as Technical Report OSU-CISRC-6/94-TR30, </note> <institution> Department of Computer and Information Science, The Ohio State University. </institution>
Reference-contexts: A wide range of application programs have been described in the literature [1, 3, 6, 7, 10, 15, 16, 20, 21]. The problem of developing CLP programs systematically was addressed by Michaylov <ref> [17] </ref>, based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum. The use of the Skeletons and Techniques method for developing a significant Prolog application has already been demonstrated [14]. <p> The use of skeletons for CLP was introduced by Kirschenbaum, Michaylov and Sterling [11], with a number of simple examples. That paper explored the common aspects of the use of skeletons and techniques for logic-based language. In contrast, <ref> [17] </ref> explores the specific skeletons and techniques needed to make CLP programming accessible to relatively naive programmers. While it is frequently observed that many techniques can be described in terms of the higher-order constructs used in functional programming, this observation misses the point of the use of skeletons and techniques. <p> The threading technique is discussed in greater detail in <ref> [17] </ref>. That paper also discusses various issues relating to the control properties of techniques. Finally, let us consider some reasons why this application is particularly well suited to a development based on skeletons and techniques: 1.
Reference: [18] <author> Arun J. Prakash, Gordon V. Karels, and Ray Fernandez. </author> <title> Financial, commercial, and mortgage mathematics and their applications. Praeger, </title> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Finally, in the appendices we give definitions for our basic operations on programs. 2 Overview of the Problem For an introduction to the mathematical theory of loans and investments, the reader may consult a text such as <ref> [18] </ref>. Our application is a simulation of the long term financial investments of an individual, modeling such considerations as salary, savings, mortgages, major purchases, taxation and retirement.
Reference: [19] <author> Leon Sterling and Marc Kirschenbaum. </author> <title> Applying techniques to skeletons. </title> <editor> In J.-M. Jacquet, editor, </editor> <booktitle> Constructing Logic Programs, </booktitle> <pages> pages 127-140. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: A wide range of application programs have been described in the literature [1, 3, 6, 7, 10, 15, 16, 20, 21]. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques <ref> [19] </ref> of Sterling and Kirschenbaum. The use of the Skeletons and Techniques method for developing a significant Prolog application has already been demonstrated [14]. <p> The various incomes, investments, mortgages and taxes are modeled separately, but of course affect each other as they interact at various time intervals. 3 An Approach Based on Skeletons and Techniques In <ref> [19] </ref>, Sterling and Kirschenbaum describe how to develop Prolog programs by first developing simple programs that traverse data structures in a certain way (skeletons), and then extending them to perform useful computation by the use of program transformations (techniques).
Reference: [20] <author> D. Subramanian and C. S. Wang. </author> <title> Kinematic synthesis with configuration spaces. </title> <booktitle> In Proc. of the 7th Qualitative Reasoning Workshop, </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
Reference: [21] <author> Roland Yap Hoc Chuan. </author> <title> Restriction site mapping in CLP(R). </title> <editor> In Koichi Furukawa, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Logic Programming, </booktitle> <pages> pages 521-534, </pages> <address> Paris, France, June 1991. </address> <publisher> MIT Press. </publisher> <pages> 20 </pages>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming (CLP) [8] for developing complex and flexible software with remarkable ease has been quite well established. A wide range of application programs have been described in the literature <ref> [1, 3, 6, 7, 10, 15, 16, 20, 21] </ref>. The problem of developing CLP programs systematically was addressed by Michaylov [17], based on the work on Skeletons and Techniques [19] of Sterling and Kirschenbaum.
References-found: 21

