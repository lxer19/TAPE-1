URL: http://www-ccs.cs.umass.edu/kamath/icde96.ps
Refering-URL: http://ccs-www.cs.umass.edu/db/wf.html
Root-URL: 
Title: Advanced Transaction Models in Workflow Contexts  
Author: G. Alonso D. Agrawal, A. El Abbadi M. Kamath R. Gunthor C. Mohan 
Address: CH-8092, Zurich Santa Barbara, CA 9310 Amherst, MA 01003 Switzerland USA USA  Postfach 10 30 68, 69020 Heidelberg 650 Harry Road, San Jose, CA 95120 Germany USA  
Affiliation: Institute for Information Systems Computer Science Department Computer Science Department ETH-Zentrum University of California University of Massachusetts  IBM European Networking Center IBM Almaden Research Center  
Abstract: In recent years, numerous transaction models have been proposed to address the problems posed by advanced database applications, but only a few of these models are being used in commercial products. In this paper, we make the case that such models may be too centered around databases to be useful in real environments. Advanced applications raise a variety of issues that are not addressed at all by transaction models. These same issues, however, are the basis for existing workflow systems, which are having considerable success as commercial products in spite of not having a solid theoretical foundation. We explore some of these issues and show that, in many aspects, workflow models are a superset of transaction models and have the added advantage of incorporating a variety of ideas that to this date have remained outside the scope of traditional transaction processing. 
Abstract-found: 1
Intro-found: 1
Reference: [BDG + 94] <author> A. Biliris, S. Dar, N. Gehani, H.V. Jagadish, and K. Ramamritham. </author> <title> ASSET: A System for Supporting Extended Transactions. </title> <booktitle> In Proc. 1994 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 44-54, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Section 4 discusses the implementation of a variety of transaction models in a workflow system. Section 5 concludes the paper. 2 Motivation and Related Work In the last few years, several transactions models have been proposed to address non-traditional applications: <ref> [ELLR90, DHL91, Elm92, WR92, BDG + 94] </ref> to name a few. In most cases, the models are developed from a database point of view, where preserving the consistency of the shared database by using transactions is the main concern. <p> Taking advantage of the formalism inherent in database transactions, there have been several studies on the theoretical aspects of combining transactions into larger execution units [Kle91, CR91]. Currently, there are several attemps to provide an execution platform flexible enough to support a variety of advanced transaction models <ref> [BDG + 94, BP95] </ref>. It is not clear, however, which are the relevant models and how they can be combined. Moreover, only existing models are implemented, without extensions to address more realistic requirements.
Reference: [BP95] <author> R. Barga and Calton Pu. </author> <title> A Practical and Modular Method to Implement Extended Transaction Models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Databases (VLDB'95), </booktitle> <address> Zurich, Switzerland, </address> <month> September, </month> <year> 1995. </year>
Reference-contexts: Taking advantage of the formalism inherent in database transactions, there have been several studies on the theoretical aspects of combining transactions into larger execution units [Kle91, CR91]. Currently, there are several attemps to provide an execution platform flexible enough to support a variety of advanced transaction models <ref> [BDG + 94, BP95] </ref>. It is not clear, however, which are the relevant models and how they can be combined. Moreover, only existing models are implemented, without extensions to address more realistic requirements.
Reference: [CR91] <author> Panos K. Chrysanthis and Krithi Ramamritham. </author> <title> A formalism for extended transaction models. </title> <booktitle> In Proceedings 17th Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 103-112, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Although some of the ACID properties of transactions may be relaxed, the basic idea is always to use traditional transactions as building blocks. Taking advantage of the formalism inherent in database transactions, there have been several studies on the theoretical aspects of combining transactions into larger execution units <ref> [Kle91, CR91] </ref>. Currently, there are several attemps to provide an execution platform flexible enough to support a variety of advanced transaction models [BDG + 94, BP95]. It is not clear, however, which are the relevant models and how they can be combined.
Reference: [DHL91] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A Transaction Model for Long-running Activities. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Databases, </booktitle> <pages> pages 113-122, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Section 4 discusses the implementation of a variety of transaction models in a workflow system. Section 5 concludes the paper. 2 Motivation and Related Work In the last few years, several transactions models have been proposed to address non-traditional applications: <ref> [ELLR90, DHL91, Elm92, WR92, BDG + 94] </ref> to name a few. In most cases, the models are developed from a database point of view, where preserving the consistency of the shared database by using transactions is the main concern.
Reference: [ELLR90] <author> A.K. Elmagarmid, Y. Leu, W. Litwin, and M.E. Rusinkiewicz. </author> <title> A Multidatabase Transaction Model for Interbase. </title> <booktitle> In Proc. of the 16th VLDB Conference, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Section 4 discusses the implementation of a variety of transaction models in a workflow system. Section 5 concludes the paper. 2 Motivation and Related Work In the last few years, several transactions models have been proposed to address non-traditional applications: <ref> [ELLR90, DHL91, Elm92, WR92, BDG + 94] </ref> to name a few. In most cases, the models are developed from a database point of view, where preserving the consistency of the shared database by using transactions is the main concern. <p> In the original model, when the last activity commits, the entire saga commits. However, it is possible that users may require to compensate an already completed saga. In these cases all activities must be compensated. 4.2 Flexible Transactions Flexible transactions work in the context of heterogeneous multidatabase environments <ref> [ELLR90] </ref>. In such environments, each local database acts independently from the others. Since a local database can unilaterally abort a transaction, it is not possible to enforce the commit semantics of global transactions [ZNBB94]. Flexible transaction were designed to address this problem.
Reference: [Elm92] <editor> A.K. Elmagarmid, editor. </editor> <title> Transaction Models for Advanced Database Applications. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction It is a widely accepted fact that conventional databases are unsuitable for many applications. To address this problem, numerous advanced transaction models have been proposed <ref> [Elm92] </ref> but few have been implemented or used in commercial products. We believe, and this is the point we want to make in this paper, that the main reason for such a limited success is the inadequacy of advanced transaction models to operate in real working environments. <p> Section 4 discusses the implementation of a variety of transaction models in a workflow system. Section 5 concludes the paper. 2 Motivation and Related Work In the last few years, several transactions models have been proposed to address non-traditional applications: <ref> [ELLR90, DHL91, Elm92, WR92, BDG + 94] </ref> to name a few. In most cases, the models are developed from a database point of view, where preserving the consistency of the shared database by using transactions is the main concern.
Reference: [Fry94] <author> C. Frye. </author> <title> Move to Workflow Provokes Business Process Scrutiny. </title> <journal> Software Magazine, </journal> <pages> pages 77-89, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: As a result of this interest there has been considerable effort to deliver workflow products intended for the management of business processes, to the point where nowadays there are more than 70 vendors who claim to have such systems <ref> [Fry94] </ref>. The goals of Work-flow Management Systems, WFMSs, bear a strong resemblance to those of advanced transaction models, although addressing a much richer set of requirements. In this paper, we discuss the characteristics of work-flow models and the notion of business processes by comparing them with existing transaction models. <p> Parallel to this work, a wide range of workflow management systems, WFMSs, have become commercial products: OPEN/Workflow of Wang Laboratories, ProcessIT of AT&T, Fujitsu's Regatta, Sietec's Staffware, Action Workflow of Action Technology, Xe-rox's InConcert, IBM's FlowMark, among many others <ref> [Fry94, GHS95] </ref>. None of these commercial systems incorporates the transactional notions. In their conception and design most of these systems are orthogonal to advanced transaction models and transactional work-flows. Early systems concentrated on automation of office procedures and document management.
Reference: [GHS95] <author> D. Georgakopoulos, M. Hornick, and A. Sheth. </author> <title> An Overview of Workflow Management: From Process Modeling to Workflow Automation Infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 119-153, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Moreover, only existing models are implemented, without extensions to address more realistic requirements. Recently, this trend has changed its focus towards transactional workflows [SR93] in an attempt to address more realistic environments. Much of the work done along these lines is still transaction based <ref> [TAC + 93, MS93, Hsu93, KS94, GHS95] </ref>, merging advanced transaction technology and workflow management systems to support business processes with well-defined failure semantics and recovery features. <p> Parallel to this work, a wide range of workflow management systems, WFMSs, have become commercial products: OPEN/Workflow of Wang Laboratories, ProcessIT of AT&T, Fujitsu's Regatta, Sietec's Staffware, Action Workflow of Action Technology, Xe-rox's InConcert, IBM's FlowMark, among many others <ref> [Fry94, GHS95] </ref>. None of these commercial systems incorporates the transactional notions. In their conception and design most of these systems are orthogonal to advanced transaction models and transactional work-flows. Early systems concentrated on automation of office procedures and document management. <p> In their conception and design most of these systems are orthogonal to advanced transaction models and transactional work-flows. Early systems concentrated on automation of office procedures and document management. Modern WFMSs provide support for complex long-running business processes executing in distributed, heterogeneous environments. As has been pointed out <ref> [GHS95] </ref>, WFMSs lack the ability to ensure the correctness and reliability of the workflow execution in the presence of concurrency and failures. However, these are database concepts that cannot be interpreted in the same way in a workflow domain. <p> None of these ideas can be found in advanced transaction models. Finally, a major difference between WFMSs and transaction models is in the area of correctness and reliability. Current WFMSs do not offer significant support for recovery and failure handling <ref> [GHS95] </ref>. In most cases, user intervention is required, either to solve consistency problems or to specify which activities are needed to recover from an exception. Transaction models, on the other hand, are in many cases motivated by these issues and many solutions have been proposed. <p> In this paper we show this to be the case for both Sagas and Flexible transactions. There are still many areas in which WFMSs need to be improved. In particular, it has been noted that they lack the functionality to cope with failures <ref> [GHS95] </ref>. This point deserves special attention. In conventional environments, coping with failures usually means to provide failure atomicity, i.e., a transaction is executed in its entirety or not at all.
Reference: [GMGK + 91a] <author> H. Garc ia-Molina, D. Gawlick, J. Klein, K. Kleissner, and K. Salem. </author> <title> Coordinating Multi-transaction Activities. </title> <booktitle> In Proceedings IEEE Spring Compcon, </booktitle> <year> 1991. </year>
Reference-contexts: The model was later extended to parallel sagas and generalized sagas <ref> [GMGK + 91a, GMGK + 91b] </ref>. For reasons of space the discussion will be limited to the linear sagas, but the same ideas apply to the more general case. The basic idea of the saga model is to allow a transaction to release resources before committing.
Reference: [GMGK + 91b] <author> H. Garc ia-Molina, D. Gawlick, J. Klein, K. Kleissner, and K. Salem. </author> <title> Modeling Long-Running Activities as Nested Sagas. </title> <journal> Bulletin of the Technical Committe on Data Engineering, IEEE, </journal> <volume> 14(1) </volume> <pages> 18-22, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: The model was later extended to parallel sagas and generalized sagas <ref> [GMGK + 91a, GMGK + 91b] </ref>. For reasons of space the discussion will be limited to the linear sagas, but the same ideas apply to the more general case. The basic idea of the saga model is to allow a transaction to release resources before committing.
Reference: [GMS87] <author> H. Garc ia-Molina and K. Salem. Sagas. </author> <booktitle> In Proc. 1987 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: many transaction models such as forward recovery, optional execution paths, and a clear separation between the flow of data and control from the transactions themselves. 4.1 Linear Sagas Linear Sagas were originally proposed by Garc ia-Molina and Salem as a way to solve the problems related to long lived transactions <ref> [GMS87] </ref>. The model was later extended to parallel sagas and generalized sagas [GMGK + 91a, GMGK + 91b]. For reasons of space the discussion will be limited to the linear sagas, but the same ideas apply to the more general case.
Reference: [Hol94] <author> D. Hollinsworth. </author> <title> The workflow reference model. </title> <type> Technical Report TC00-1003, </type> <institution> Workflow Management Coalition, </institution> <month> December </month> <year> 1994. </year> <note> Accessible via: http://www.aiai.ed.ac.uk/WfMC/. </note>
Reference-contexts: Instead of trying to describe it precisely, we follow the Workflow Management Coalition, WfMC, <ref> [Hol94] </ref> in providing a high level description of the model and functionality that a WFMS must support to be considered as such. When discussing particular implementation details, we use FlowMark [LR94], IBM's workflow product, which will also be briefly discussed. <p> The components described below follow the meta-model proposed by the Workflow Management Coalition <ref> [Hol94] </ref>. This model is only an abstraction and does not provide implementation details. These are described based on FlowMark's model: Process, a description of the sequence of steps to be completed to accomplish some goal. A process consists of activities and relevant data. Processes can be nested.
Reference: [Hsu93] <author> M. Hsu. </author> <title> Special Issue on Workflow and Extended Transaction Systems. </title> <journal> Bulletin of the Technical Committee on Data Engineering, IEEE, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: Moreover, only existing models are implemented, without extensions to address more realistic requirements. Recently, this trend has changed its focus towards transactional workflows [SR93] in an attempt to address more realistic environments. Much of the work done along these lines is still transaction based <ref> [TAC + 93, MS93, Hsu93, KS94, GHS95] </ref>, merging advanced transaction technology and workflow management systems to support business processes with well-defined failure semantics and recovery features.
Reference: [Kle91] <author> J. Klein. </author> <title> Advanced Rule Driven Transaction Management. </title> <booktitle> In 36th IEEE Computer Society International Conference CompCon Spring 1991, </booktitle> <pages> pages 562-567, </pages> <address> San Francisco, California, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Although some of the ACID properties of transactions may be relaxed, the basic idea is always to use traditional transactions as building blocks. Taking advantage of the formalism inherent in database transactions, there have been several studies on the theoretical aspects of combining transactions into larger execution units <ref> [Kle91, CR91] </ref>. Currently, there are several attemps to provide an execution platform flexible enough to support a variety of advanced transaction models [BDG + 94, BP95]. It is not clear, however, which are the relevant models and how they can be combined.
Reference: [KS94] <author> N. Krishnakumar and A. Sheth. </author> <title> Specifying Multi-system Workflow Applications in METEOR. </title> <type> Technical Report TM-24198, </type> <institution> Bellcore, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Moreover, only existing models are implemented, without extensions to address more realistic requirements. Recently, this trend has changed its focus towards transactional workflows [SR93] in an attempt to address more realistic environments. Much of the work done along these lines is still transaction based <ref> [TAC + 93, MS93, Hsu93, KS94, GHS95] </ref>, merging advanced transaction technology and workflow management systems to support business processes with well-defined failure semantics and recovery features.
Reference: [LR94] <author> F. Leymann and D. </author> <title> Roller. Business Processes Management with FlowMark. </title> <booktitle> In Proc. 39th IEEE Computer Society Int'l Conference (Com-pCon), Digest of Papers, </booktitle> <pages> pages 230-233, </pages> <address> San Francisco, California, </address> <month> February 28 March 4 </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: Instead of trying to describe it precisely, we follow the Workflow Management Coalition, WfMC, [Hol94] in providing a high level description of the model and functionality that a WFMS must support to be considered as such. When discussing particular implementation details, we use FlowMark <ref> [LR94] </ref>, IBM's workflow product, which will also be briefly discussed. FlowMark follows very closely the reference model provided by the WfMC and the features used to implement different transaction models are found in many other workflow systems.
Reference: [Moh94] <author> C. Mohan. </author> <title> Advanced Transaction Models - Survey and Critique, </title> <booktitle> 1994. Tutorial presented at ACM SIGMOD International Conference on Management of Data. </booktitle>
Reference-contexts: Agrawal and A. El Abbadi during a sabbatical visit, and M. Kamath, R. Gunthor and G. Alonso as visiting scientists. ties and scope. Furthermore, since they tend to remain theoretical models, they generally ignore a large number of important design issues <ref> [Moh94] </ref>. Paradoxically, there is a growing interest in tools to support applications very similar in nature to those envisioned by the designers of advanced transaction models.
Reference: [Mos81] <author> J.E.B. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. </title> <type> PhD thesis, </type> <institution> M.I.T. Laboratory for Computer Science, </institution> <address> Cam-bridge, Massachusetts, </address> <publisher> MIT Press, </publisher> <year> 1981. </year>
Reference: [MRSK92] <author> S. Mehrotra, R. Rastogi, A. Silberschatz, and H.F. Korth. </author> <title> A Transaction Model for Multi-database Systems. </title> <booktitle> In Proceedings of the International Conference on Distributed Computing Systems, </booktitle> <pages> pages 56-63, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: A flexible transaction commits if either the main subtransactions or their alternatives commit. Following [ZNBB94], a flexible transaction is a partial order of subtransactions. A subtransaction can be compensatable, retriable, or pivot <ref> [MRSK92] </ref>. A compensatable subtransaction is one whose effects can be undone after it commits by executing a compensation transaction. A retriable transaction is a subtrans-action that will eventually commit if retried a sufficient number of times. A pivot subtransaction is one that is neither retriable nor compensatable. <p> A flexible transaction is well-formed when the possible orders of execution do not violate the data dependencies between subtransactions and the flexible transaction is "atomic" (its effects can be undone or by retrying subtransactions it will eventually commit). As has been shown <ref> [MRSK92] </ref>, a well-formed flexible transaction contains at most one pivot subtransaction. <p> In <ref> [MRSK92] </ref> it is further assumed that there are no data dependencies among subtransactions. In [ZNBB94], it was noted that such restrictions apply only to the subtransactions that actually commits.
Reference: [MS93] <author> D.R. McCarthy and S.K. </author> <title> Sarin. </title> <journal> Workflow and Transactions in InConcert. Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Moreover, only existing models are implemented, without extensions to address more realistic requirements. Recently, this trend has changed its focus towards transactional workflows [SR93] in an attempt to address more realistic environments. Much of the work done along these lines is still transaction based <ref> [TAC + 93, MS93, Hsu93, KS94, GHS95] </ref>, merging advanced transaction technology and workflow management systems to support business processes with well-defined failure semantics and recovery features.
Reference: [SR93] <author> A. Sheth and Rusinkiewicz. </author> <title> On Transactional Workflows. </title> <journal> Bulletin of the Technical Committee on Data Engineering, IEEE, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: It is not clear, however, which are the relevant models and how they can be combined. Moreover, only existing models are implemented, without extensions to address more realistic requirements. Recently, this trend has changed its focus towards transactional workflows <ref> [SR93] </ref> in an attempt to address more realistic environments. Much of the work done along these lines is still transaction based [TAC + 93, MS93, Hsu93, KS94, GHS95], merging advanced transaction technology and workflow management systems to support business processes with well-defined failure semantics and recovery features.
Reference: [TAC + 93] <author> C. Tomlison, P. Attie, P. Cannata, G. Mered-ith, A. Sheth, M. Singh, and D. Woelk. </author> <title> Work-flow Support in Carnot. </title> <journal> Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Moreover, only existing models are implemented, without extensions to address more realistic requirements. Recently, this trend has changed its focus towards transactional workflows [SR93] in an attempt to address more realistic environments. Much of the work done along these lines is still transaction based <ref> [TAC + 93, MS93, Hsu93, KS94, GHS95] </ref>, merging advanced transaction technology and workflow management systems to support business processes with well-defined failure semantics and recovery features.
Reference: [WR92] <author> H. Waechter and A. Reuter. </author> <title> The ConTract Model. In A.K. </title> <editor> Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <booktitle> chapter 7, </booktitle> <pages> pages 219-263. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: Section 4 discusses the implementation of a variety of transaction models in a workflow system. Section 5 concludes the paper. 2 Motivation and Related Work In the last few years, several transactions models have been proposed to address non-traditional applications: <ref> [ELLR90, DHL91, Elm92, WR92, BDG + 94] </ref> to name a few. In most cases, the models are developed from a database point of view, where preserving the consistency of the shared database by using transactions is the main concern. <p> In general, conditions increase the power and ex-pressibility of the model. They provide the means for discarding some branches of the control flow and for implementing structures similar to if-then-else. Such features are not found in any transaction model, except in the ConTract model <ref> [WR92] </ref> which is more of a programming environment for reliable execution of sets of activities. Exit conditions can be used to implement loops, by embedding subprocesses within another process. For the purposes of this paper, we will refer to subprocesses as blocks.
Reference: [ZNBB94] <author> A. Zhang, M. Nodine, B. Bhargava, and O. Bukhres. </author> <title> Ensuring Relaxed Atomicity for Flexible Transactions in Multidatabase Systems. </title> <booktitle> In Proc. 1994 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 67-78, </pages> <year> 1994. </year>
Reference-contexts: In such environments, each local database acts independently from the others. Since a local database can unilaterally abort a transaction, it is not possible to enforce the commit semantics of global transactions <ref> [ZNBB94] </ref>. Flexible transaction were designed to address this problem. A flexible transaction provides alternative execution paths, if a subtransaction is aborted, then a different subtransaction can be submitted in the hope that it will be successful. A flexible transaction commits if either the main subtransactions or their alternatives commit. Following [ZNBB94], <p> <ref> [ZNBB94] </ref>. Flexible transaction were designed to address this problem. A flexible transaction provides alternative execution paths, if a subtransaction is aborted, then a different subtransaction can be submitted in the hope that it will be successful. A flexible transaction commits if either the main subtransactions or their alternatives commit. Following [ZNBB94], a flexible transaction is a partial order of subtransactions. A subtransaction can be compensatable, retriable, or pivot [MRSK92]. A compensatable subtransaction is one whose effects can be undone after it commits by executing a compensation transaction. <p> In [MRSK92] it is further assumed that there are no data dependencies among subtransactions. In <ref> [ZNBB94] </ref>, it was noted that such restrictions apply only to the subtransactions that actually commits. As long as there is an alternative in case that a transaction aborts, there can be several pivots, and retriable and compensatable transactions can be interleaved.
References-found: 24

