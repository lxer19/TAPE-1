URL: http://www.cse.ogi.edu/DISC/projects/immunix/icmas96.ps.gz
Refering-URL: http://www.cse.ogi.edu/~walpole/publications.html
Root-URL: http://www.cse.ogi.edu
Email: email: calton@cse.ogi.edu  email: consel@irisa.fr  
Phone: Phone: +1-503-690-1214, FAX: +1-503-690-1553  
Title: A Specialization Toolkit to Increase the Diversity in Operating Systems  
Author: Calton Pu, Andrew Black, Crispin Cowan, Jonathan Walpole Charles Consel 
Keyword: Index terms: specialization, information survivability, operating systems, software diversity.  
Address: P.O. BOX 91000, Portland, OR 97291-1000, USA  France  
Affiliation: Dept. of Computer Science and Engineering Oregon Graduate Institute  Dept. of Computer Science University of Rennes/IRISA Rennes,  
Abstract: Virus and worm attacks that exploit system implementation details can be countered with a diversified set of implementations. Furthermore, immune systems show that attacks from previously unknown organisms require effective dynamic response. In the Synthetix project, we have been developing a specialization toolkit to improve the performance of operating system kernels. The toolkit helps programmers generate and manage diverse specialized implementations of software modules. The Tempo-C specializer tool generates different versions for both compile-time and run-time specialization. We are now adapting the toolkit to improve operating system survivability against implementations attacks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Consel, L. Hornof, F. Noel, and E.N. Volanschi. </author> <title> A uniform approach to compile-time and run-time specialization. </title> <booktitle> In Proceedings of the 1996 Dagstuhl Workshop on Partial Evaluation, </booktitle> <address> Germany, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: To support methodical specialization, we have been developing a toolkit that helps the kernel programmer in the tedious but important task of making specialized modules correct. For example, we have developed a specializer (called Tempo-C) <ref> [2, 1] </ref> for dynamic partial evaluation of C code, to simplify program optimization.
Reference: [2] <author> C. Consel and F. Noel. </author> <title> A general approach for run-time specialization and its application to c. </title> <booktitle> In Proceedings of the 1996 ACM Symposium on Principles of Programming Languages, </booktitle> <address> Florida, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: To support methodical specialization, we have been developing a toolkit that helps the kernel programmer in the tedious but important task of making specialized modules correct. For example, we have developed a specializer (called Tempo-C) <ref> [2, 1] </ref> for dynamic partial evaluation of C code, to simplify program optimization.
Reference: [3] <author> C. Consel, C. Pu, and J. Walpole. </author> <title> Incremental specialization: The key to high performance, modularity and portability in operating systems. </title> <booktitle> In Proceedings of ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <address> Copen-hagen, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: However, dynamic and effective response and recovery methods to counteract network attacks represent areas in need of research. In particular, we need fast, flexible, and low overhead mechanisms to support the incorporation and activation of a variety of response strategies against attacks. In the Synthetix project <ref> [3, 12, 5] </ref>, we have been developing a toolkit for systematic specialization of operating system (OS) kernels. The first purpose of the specialization toolkit interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Defense Advanced Research Projects Agency, Rome Laboratory, or the U.S. <p> Our work builds on the existing Synthetix project <ref> [3, 12, 5] </ref> research on specialization. The basic idea is to increase the representational variety of OS components in a systematic way, by using the Synthetix specialization toolkit.
Reference: [4] <author> Charles Consel, Calton Pu, and Jonathan Walpole. </author> <title> Incremental Specialization: The Key to High Performance, Modularity and Portability in Operating Systems. </title> <booktitle> In Proceedings 9 of ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'93), </booktitle> <address> Copenhagen, Denmark, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: With an immunity-based approach, our first goal is to increase the inherent variety of OS code, to create resilience against malicious attacks (e.g., viruses and worms), and to contain the damage after the attacks have partially succeeded. Our technique, based on specialization <ref> [4, 6, 7, 13, 14] </ref> is particularly useful due to its ability to cooperate with verification techniques through explicit definitions of quasi-invariants, and to cooperate with security wrappers through meta-interfaces. Concretely, we are concerned with operating system survivability under two kinds of attacks.
Reference: [5] <author> C. Cowan, T. Autrey, C. Krasic, C. Pu, and J. Walpole. </author> <title> Fast concurrent dynamic linking for an adaptive operating system. </title> <booktitle> In Proceedings of the International Conference on Configurable Distributed Systems, </booktitle> <address> Maryland, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: However, dynamic and effective response and recovery methods to counteract network attacks represent areas in need of research. In particular, we need fast, flexible, and low overhead mechanisms to support the incorporation and activation of a variety of response strategies against attacks. In the Synthetix project <ref> [3, 12, 5] </ref>, we have been developing a toolkit for systematic specialization of operating system (OS) kernels. The first purpose of the specialization toolkit interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Defense Advanced Research Projects Agency, Rome Laboratory, or the U.S. <p> Our work builds on the existing Synthetix project <ref> [3, 12, 5] </ref> research on specialization. The basic idea is to increase the representational variety of OS components in a systematic way, by using the Synthetix specialization toolkit.
Reference: [6] <author> Crispin Cowan, Tito Autrey, Charles Krasic, Calton Pu, and Jonathan Walpole. </author> <title> Fast Concurrent Dynamic Linking for an Adaptive Operating System. </title> <booktitle> In International Conference on Configurable Distributed Systems (ICCDS'96), Annapolis, </booktitle> <address> MD, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: With an immunity-based approach, our first goal is to increase the inherent variety of OS code, to create resilience against malicious attacks (e.g., viruses and worms), and to contain the damage after the attacks have partially succeeded. Our technique, based on specialization <ref> [4, 6, 7, 13, 14] </ref> is particularly useful due to its ability to cooperate with verification techniques through explicit definitions of quasi-invariants, and to cooperate with security wrappers through meta-interfaces. Concretely, we are concerned with operating system survivability under two kinds of attacks.
Reference: [7] <author> Crispin Cowan, Calton Pu, and Jonathan Walpole. </author> <title> Specialization Objects: A Reflective Interface for Specialization. </title> <type> Report CSE-95-024, </type> <institution> Dept. of Computer Science and Engineering, Oregon Graduate Institute, </institution> <address> Portland, OR, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: With an immunity-based approach, our first goal is to increase the inherent variety of OS code, to create resilience against malicious attacks (e.g., viruses and worms), and to contain the damage after the attacks have partially succeeded. Our technique, based on specialization <ref> [4, 6, 7, 13, 14] </ref> is particularly useful due to its ability to cooperate with verification techniques through explicit definitions of quasi-invariants, and to cooperate with security wrappers through meta-interfaces. Concretely, we are concerned with operating system survivability under two kinds of attacks.
Reference: [8] <author> Mark W. Eichin and Jon A. Rochlis. </author> <title> With Microscope and Tweezers: An Analysis of the Internet Virus of November 1988. </title> <booktitle> In Proceedings of the 1990 IEEE Symposium on Research in Security and Privacy, </booktitle> <month> September </month> <year> 1990. </year>
Reference-contexts: The second kind of attack is a more subtle one, from programs that execute legal kernel calls but somehow performing functions outside the original intentions. For example, the worm program written by R.T. Morris, Jr. <ref> [8] </ref> uses the debugging feature of sendmail. We call the second kind of attack contextual , since they take advantage of 2 legitimate functionality outside of their intended context. When an attack succeeds, we call the penetration a security fault in analogy to other kinds of faults in the system.
Reference: [9] <author> Gregor Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proc. of the IMSA'92 Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/oi.html for updates. </note>
Reference-contexts: This way, we expect to extend static verification of programs to the verification of programs generated at run-time, by watching over the quasi-invariants. Another technique we have used successfully in both Synthetix and extended transaction research is Open Implementation <ref> [10, 9] </ref>, which advocates the separation of a module's functional interface from its meta-interface, which contains attributes and implementation details that affect the other properties of the module, such as performance and fault tolerance.
Reference: [10] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: This way, we expect to extend static verification of programs to the verification of programs generated at run-time, by watching over the quasi-invariants. Another technique we have used successfully in both Synthetix and extended transaction research is Open Implementation <ref> [10, 9] </ref>, which advocates the separation of a module's functional interface from its meta-interface, which contains attributes and implementation details that affect the other properties of the module, such as performance and fault tolerance.
Reference: [11] <author> DARPA Program Managers. </author> <title> Survivability of large scale information systems. Commerce Business Daily, DARPA BAA(96-40), August 28th 1996. Technical Areas Cited in BAA: Public Health and Immune Systems; Adaptive Architectures for Survivable Systems; Techniques For Creating Variability and Diversity. </title>
Reference-contexts: The United States government has recognized the importance of this problem with a recent Broad Agency Announcement <ref> [11] </ref> by the Defense Advanced Research Projects Agency (DARPA), calling for proposals to perform research specifically aimed at creating the technology for an area called Information Survivability, to improve the resilience of GII against attacks.
Reference: [12] <author> C. Pu, T. Autrey, A. Black, C. Consel, C. Cowan, J. Inouye, L. Kethana, J. Walpole, and K. Zhang. </author> <title> Optimistic incremental specialization: Streamlining a commercial operating system. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <address> Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: However, dynamic and effective response and recovery methods to counteract network attacks represent areas in need of research. In particular, we need fast, flexible, and low overhead mechanisms to support the incorporation and activation of a variety of response strategies against attacks. In the Synthetix project <ref> [3, 12, 5] </ref>, we have been developing a toolkit for systematic specialization of operating system (OS) kernels. The first purpose of the specialization toolkit interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Defense Advanced Research Projects Agency, Rome Laboratory, or the U.S. <p> Our work builds on the existing Synthetix project <ref> [3, 12, 5] </ref> research on specialization. The basic idea is to increase the representational variety of OS components in a systematic way, by using the Synthetix specialization toolkit.
Reference: [13] <author> Calton Pu, Tito Autrey, Andrew Black, Charles Consel, Crispin Cowan, Jon Inouye, Lakshmi Kethana, Jonathan Walpole, and Ke Zhang. </author> <title> Optimistic Incremental Specialization: Streamlining a Commercial Operating System. </title> <booktitle> In Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: With an immunity-based approach, our first goal is to increase the inherent variety of OS code, to create resilience against malicious attacks (e.g., viruses and worms), and to contain the damage after the attacks have partially succeeded. Our technique, based on specialization <ref> [4, 6, 7, 13, 14] </ref> is particularly useful due to its ability to cooperate with verification techniques through explicit definitions of quasi-invariants, and to cooperate with security wrappers through meta-interfaces. Concretely, we are concerned with operating system survivability under two kinds of attacks. <p> An integral part of our research is an experimental evaluation to test and demonstrate the effectiveness of the extended specialization toolkit in a significant operating system component. For example, we have demonstrated the performance gains of specialization in the HP-UX Unix File System <ref> [13] </ref>. Suppose we choose file system code as a test vehicle, the extended specialization toolkit is expected to increase the survivability of the component.
Reference: [14] <author> Jonathan Walpole, Crispin Cowan, Andrew Black, Jon Inouye, Calton Pu, and Shanwei Cen. </author> <title> Customizable Operating Systems. </title> <type> Report CSE-95-023, </type> <institution> Dept. of Computer Science and Engineering, Oregon Graduate Institute, </institution> <address> Portland, OR, </address> <month> December </month> <year> 1995. </year> <note> Submitted for review. 10 </note>
Reference-contexts: With an immunity-based approach, our first goal is to increase the inherent variety of OS code, to create resilience against malicious attacks (e.g., viruses and worms), and to contain the damage after the attacks have partially succeeded. Our technique, based on specialization <ref> [4, 6, 7, 13, 14] </ref> is particularly useful due to its ability to cooperate with verification techniques through explicit definitions of quasi-invariants, and to cooperate with security wrappers through meta-interfaces. Concretely, we are concerned with operating system survivability under two kinds of attacks.
References-found: 14

