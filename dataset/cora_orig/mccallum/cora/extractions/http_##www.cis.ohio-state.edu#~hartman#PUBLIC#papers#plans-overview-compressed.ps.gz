URL: http://www.cis.ohio-state.edu/~hartman/PUBLIC/papers/plans-overview-compressed.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~hartman/publications.html
Root-URL: 
Email: jhartman@acm.org  
Title: Plans in Software Engineering An Overview  
Author: John Hartman 
Date: January 18, 1995  
Affiliation: Laboratory for Artificial Intelligence Research Dept. of Computer and Information Science The Ohio State University  
Abstract: Design and engineering domains use abstract artifact descriptions and standard designs. This paper reviews plans, the blueprint-like descriptions used in software engineering. Our goal is to provide a framework for discussion and research. We first focus on the nature of plans independent of their use or representation. Next we consider the use of plans in software engineering, particularly in automated programming, automated program understanding, reuse, and language design. Measures and methodologies are given for characterizing plan use in program populations and domains. Then we review some issues that arise in plan-based automatic software engineering. Plan libraries are discussed in terms of their organization, non-plan content, and performance implications. Plan representation issues are illustrated by representations used in program understanding and the problem of dual use for programming and understanding. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Special issue on automatic program synthesis. IEEE SOFTWARE, </institution> <month> May </month> <year> 1993. </year>
Reference: [2] <author> James Allen, Henry Kautz, Richard Pelavin, and Joshua Tenenberg. </author> <title> REASONING ABOUT PLANS. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference: [3] <author> James Allen and Austin Tate. </author> <title> READINGS IN PLANNING. </title> <publisher> Morgan Kaufmann, </publisher> <month> May </month> <year> 1990. </year>
Reference: [4] <author> Guillermo Arango and Peter Freeman. </author> <title> Modeling knowledge for software development. </title> <booktitle> In Proceedings of the Third International Workshop on Software Specifications and Design, </booktitle> <pages> pages 63-66, </pages> <year> 1985. </year>
Reference: [5] <author> Ted Biggerstaff. </author> <title> Program understanding and the concept assignment problem. </title> <journal> Communications of the ACM, </journal> <month> May </month> <year> 1994. </year>
Reference: [6] <author> Ruven Brooks. </author> <title> Towards a theory of the comprehension of computer programs. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 18 </volume> <pages> 543-554, </pages> <year> 1983. </year>
Reference: [7] <author> G. Bruns and S. Gerhart. </author> <title> Theories of design: An introduction to the literature. </title> <type> Technical Report STP-068-86, </type> <institution> Microelectronics and Computer Technology Corporation (MCC), </institution> <month> March </month> <year> 1986. </year>
Reference: [8] <author> Salwa Abd el Hafiz. </author> <title> Re-engineering code to formal specifications for program understanding and reuse. </title> <booktitle> In Conference on Software Maintenance - 1993, </booktitle> <year> 1993. </year> <note> Approximate title. See other papers by same author. </note>
Reference-contexts: Such knowledge can be used to refine the program 4 Current surveys of automatic program understanding are in [15] and [52]. Recent research is reported in [41], [51], [36], [49], <ref> [8] </ref> etc. representations evolving in design space. Suppose some representation in design space is found to be an instance of the recognition plan. The mapping induces a transformation in design space creating a refined program representation, the new design.
Reference: [9] <author> Andre Engberts, Wojtek Kozaczynski, and Jim Ning. </author> <title> Automating software maintenance by concept recognition-based program transformation. </title> <booktitle> In Conference on Software Maintenance - 1991. </booktitle> <publisher> IEEE, IEEE Press, </publisher> <month> October 14-17 </month> <year> 1991. </year>
Reference: [10] <author> Peter Freeman. </author> <title> The nature of design. </title> <editor> In Peter Freeman and Anthony I. Wasserman, editors, </editor> <booktitle> TUTORIAL ON SOFTWARE DESIGN TECHNIQUES. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1983. </year>
Reference: [11] <author> D. J. Gilmore and T. R. G. Green. </author> <title> Are programming plans psychologically real|outside pascal? In Human-Computer Interaction| INTERACT'87. </title> <publisher> IFIP, Elsevier Science Publishers B. V., </publisher> <year> 1987. </year>
Reference: [12] <author> Raymonde Guindon. </author> <title> Software design tasks as ill-structured problems, Software design as an opportunistic process. </title> <type> Technical Report STP-214-88, </type> <institution> Microelectronics and Computer Technology Corporation (MCC), </institution> <month> July 7 </month> <year> 1988. </year>
Reference: [13] <author> M. T. Harandi and F. H. Young. </author> <title> Template based specification and design. </title> <booktitle> In Proceedings of the Third International Workshop on Software Specifications and Design, </booktitle> <pages> pages 94-97, </pages> <year> 1985. </year>
Reference: [14] <author> John Hartman. </author> <title> Automatic control understanding for natural programs. </title> <type> Ph.D. Thesis AI 91-161, </type> <institution> Artificial Intelligence Laboratory, Dept. of Computer Sciences, The University of Texas at Austin, Austin, </institution> <address> TX 78712-1188., </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Other factors include: goals application, needed coverage; concepts sought; plan content; plan quality; recognition method; generation method; and program population variables like conceptual content and coding style. These factors are summarized in the performance model shown in Figure 13 and discussed in <ref> [14] </ref>. The unlabeled arrows are arbitrary properties of plans and programs. Arrows shows where, and sometimes how, the factor at the tail affects the measure at the head. For example, a recognition method can increase recognition rate by increasing its power, eg. by increased reasoning to capture more program variations.
Reference: [15] <author> John Hartman. </author> <title> Technical introduction to the First Workshop on AI and Automated Program Understanding. </title> <editor> In Larry Van Sickle, editor, </editor> <booktitle> AI and AUTOMATED PROGRAM UNDERSTANDING, WORKSHOP NOTES, AAAI-92 WORKSHOP PROGRAM, </booktitle> <pages> pages 8-30. </pages> <booktitle> Tenth National Conference On Artificial Intelligence, AAAI, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: The right side of the picture shows programming knowledge consisting of a precondition or recognition plan, a transformation on it ("mapping") whose result is given by a result or generation plan. Such knowledge can be used to refine the program 4 Current surveys of automatic program understanding are in <ref> [15] </ref> and [52]. Recent research is reported in [41], [51], [36], [49], [8] etc. representations evolving in design space. Suppose some representation in design space is found to be an instance of the recognition plan.
Reference: [16] <author> John Hartman. </author> <title> Programming knowledge acquisition for detector software development, acquisition and maintenance. Proposal by The Analytix Group, </title> <month> February </month> <year> 1994. </year>
Reference: [17] <author> J. M. </author> <title> Hoc. COGNITIVE PSYCHOLOGY OF PLANNING. </title> <publisher> Academic Press, </publisher> <month> January </month> <year> 1988. </year>
Reference: [18] <institution> International Joint Conferences on Artificial Intelligence. </institution> <note> PROCEEDINGS of the WORKSHOP ON AUTOMATING SOFTWARE DESIGN|IJCAI-89, </note> <year> 1989. </year>
Reference: [19] <editor> Neil Iscoe, editor. </editor> <booktitle> PROCEEDINGS OF THE WORKSHOP ON DOMAIN ANALYSIS. ACM, </booktitle> <month> October </month> <year> 1988. </year> <title> In conjunction with OOPSLA, </title> <address> San Diego. </address> <month> 18 </month>
Reference: [20] <editor> Neil Iscoe and Gerry Williams, editors. </editor> <booktitle> PRO--CEEDINGS OF THE WORKSHOP ON DOMAIN MODELING FOR SOFTWARE ENGINEERING. ACM, </booktitle> <month> October </month> <year> 1989. </year> <title> In conjunction with OOPSLA, </title> <address> New Orleans. </address>
Reference: [21] <author> Robin Jeffries, Althea A. Turner, Peter G. Pol-son, and Michael E. Atwood. </author> <title> The processes involved in designing software. </title> <journal> In COGNITIVE SKILLS and THEIR ACQUISITION, </journal> <pages> pages 255-283. </pages> <publisher> Erlbaum, </publisher> <year> 1981. </year>
Reference: [22] <author> W. Lewis Johnson. </author> <title> INTENTION-BASED DIAGNOSIS OF NOVICE PROGRAMMING ERRORS. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference: [23] <author> Wojtek Kozaczynski, Stanley Letovsky, and Jim Ning. </author> <title> A knowledge-based approach to software system understanding. </title> <booktitle> In Sixth Cpnfer-ence on Knowledge-Based Software Engineer-imng. </booktitle> <address> RADC, </address> <year> 1991. </year>
Reference: [24] <author> Stanley Ian Letovsky. </author> <title> PLAN ANALYSIS OF PROGRAMS. </title> <type> PhD thesis, </type> <institution> Yale University, Dept. of Computer Science, </institution> <month> December </month> <year> 1988. </year> <note> YALEU/CSD/RR 662. </note>
Reference: [25] <author> Spiro Michaylov. </author> <title> Program plans in declarative languages and beyond. </title> <institution> Internal Discussion Paper - Ohio State University Dept. CIS, </institution> <month> November 4 </month> <year> 1994. </year>
Reference-contexts: Language Design and Methodology Similar questions apply to language design and language-based programming methodology. Language constructs are the original reusable components. For example, in <ref> [25] </ref>, Michaylov discusses a plan-based logic programming methodology and characterization of different language classes in terms of plans. Suppose, for example, that a particular set of language dependent plans is found to be very useful.
Reference: [26] <author> Ali Mili, Jules Desharais, and Jean Gagne. </author> <title> Formal models of stepwise refinement of programs. </title> <journal> Computing Surveys, </journal> <volume> 18(3), </volume> <month> September </month> <year> 1986. </year>
Reference: [27] <author> William R. Murray. </author> <title> AUTOMATIC PROGRAM DEBUGGING FOR INTELLIGENT TUTORING SYSTEMS. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [28] <author> Jim Q. Ning. </author> <title> A KNOWLEDGE-BASED APPROACH TO AUTOMATIC PROGRAM ANALYSIS. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1989. </year>
Reference: [29] <author> H. Partsch and R. Steinbruggen. </author> <title> Program transformation systems. </title> <journal> Computing Surveys, </journal> <volume> 15(3) </volume> <pages> 199-236, </pages> <year> 1983. </year>
Reference: [30] <author> Helmut A. Partsch. </author> <title> SPECIFICATION and TRANSFORMATION OF PROGRAMS. </title> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1990. </year>
Reference: [31] <author> L. F. Pau and J. B. Kristinsson. SOFTM: </author> <title> A software maintenance expert system in Prolog. Software Maintenance: </title> <journal> Research and Practice, </journal> <volume> 2 </volume> <pages> 87-111, </pages> <year> 1990. </year>
Reference: [32] <author> Nancy Pennington. </author> <title> Cognitive components of expertise in computer programming: A review of the literature. </title> <journal> Psychological Documents, </journal> <volume> 15(1), </volume> <month> July </month> <year> 1985. </year> <note> Covers research up to June 1982. </note>
Reference: [33] <author> C. Potts. </author> <title> Requirements analysis, domain knowledge, and design. </title> <type> Technical Report STP-313-88, </type> <institution> Microelectronics and Computer Technology Corporation (MCC), </institution> <month> February 16 </month> <year> 1989. </year>
Reference: [34] <author> Ruben Prieto-Diaz. </author> <title> Domain analysis: An introduction. </title> <booktitle> Software Engineering Notes, </booktitle> <pages> pages 47-54, </pages> <month> April </month> <year> 1990. </year>
Reference: [35] <author> Alex Quilici. </author> <title> A memory-based approach to recognizing programming plans. </title> <journal> Communications of the ACM, </journal> <month> May </month> <year> 1994. </year>
Reference: [36] <editor> Vaclav Rajlich, editor. </editor> <booktitle> SECOND WORKSHOP ON PROGRAM COMPREHENSION. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: Such knowledge can be used to refine the program 4 Current surveys of automatic program understanding are in [15] and [52]. Recent research is reported in [41], [51], <ref> [36] </ref>, [49], [8] etc. representations evolving in design space. Suppose some representation in design space is found to be an instance of the recognition plan. The mapping induces a transformation in design space creating a refined program representation, the new design.
Reference: [37] <author> Charles Rich. </author> <title> Inspection methods in programming. </title> <type> Technical Report MIT/AI/TR-604, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> June </month> <year> 1981. </year> <type> PhD Thesis. </type>
Reference: [38] <author> Charles Rich and Richard C. Waters. </author> <title> Automatic programming: Myths and prospects. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 40-51, </pages> <month> August </month> <year> 1988. </year>
Reference: [39] <author> Charles Rich and Richard C. Waters. </author> <title> THE PROGRAMMER'S APPRENTICE. </title> <publisher> ACM Press and Addison-Wesley Publishing Co., </publisher> <year> 1990. </year>
Reference: [40] <author> R. S. Rist. </author> <title> Plans in programming: Definition, demonstration, and development. </title> <editor> In El-liot Soloway and Sitharama Iyengar, editors, </editor> <booktitle> Empirical Studies of Programmers, </booktitle> <pages> pages 28-47. </pages> <publisher> Ablex, </publisher> <month> June </month> <year> 1986. </year> <note> Papers presented at the First Workshop. </note>
Reference: [41] <editor> Larry Van Sickle, editor. </editor> <booktitle> AI and AUTOMATED PROGRAM UNDERSTANDING, WORKSHOP NOTES, AAAI-92 WORKSHOP PROGRAM. Tenth National Conference On Artificial Intelligence, AAAI, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: Such knowledge can be used to refine the program 4 Current surveys of automatic program understanding are in [15] and [52]. Recent research is reported in <ref> [41] </ref>, [51], [36], [49], [8] etc. representations evolving in design space. Suppose some representation in design space is found to be an instance of the recognition plan. The mapping induces a transformation in design space creating a refined program representation, the new design.
Reference: [42] <author> Douglas R. Smith and Eduardo A. </author> <title> Parra. Transformational approach to transportation scheduling. </title> <booktitle> In Eight Knowledge-Based Software Engineering Conference, </booktitle> <year> 1993. </year> <month> 19 </month>
Reference: [43] <author> Elliot Soloway. </author> <title> From problems to programs via plans: The content and structure of knowledge for introductory LISP programming. </title> <journal> Journal of Educational Computing Research, </journal> <year> 1985. </year>
Reference: [44] <author> Elliot Soloway. </author> <title> Learning to program = Learning to construct mechanisms and explanations. </title> <journal> Communications of the ACM, </journal> <volume> 29(9) </volume> <pages> 850-858, </pages> <month> September </month> <year> 1986. </year>
Reference: [45] <author> Elliot Soloway and Kate Ehrlich. </author> <title> Empirical studies of programming knowledge. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(5) </volume> <pages> 595-609, </pages> <month> September </month> <year> 1984. </year>
Reference: [46] <author> Elliot Soloway, Kate Ehrlich, and Jeffrey Bonar. </author> <title> Cognitive strategies and looping concepts: An empirical study. </title> <journal> Communications of the ACM, </journal> <volume> 26(11), </volume> <month> November </month> <year> 1983. </year>
Reference: [47] <author> Sam Steel. </author> <title> Bibliography on planning in AI. </title> <institution> Dept. of Computer Science, University of Es-sex, UK, </institution> <month> August </month> <year> 1990. </year>
Reference: [48] <author> Leon Sterling and Marc Kirschenbaum. </author> <title> Applying techniques to skeletons. </title> <editor> In j. M. Jacquet, editor, </editor> <booktitle> CONSTRUCTING LOGIC PROGRAMS, </booktitle> <pages> pages 127-140. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference: [49] <author> H. van Zuylen, </author> <title> editor. The REDO Compendium: Reverse Engineering for Software Maintenance. </title> <publisher> John Wiley & Sons, </publisher> <year> 1993. </year>
Reference-contexts: Such knowledge can be used to refine the program 4 Current surveys of automatic program understanding are in [15] and [52]. Recent research is reported in [41], [51], [36], <ref> [49] </ref>, [8] etc. representations evolving in design space. Suppose some representation in design space is found to be an instance of the recognition plan. The mapping induces a transformation in design space creating a refined program representation, the new design.
Reference: [50] <author> Richard C. Waters. KBEMACS: </author> <title> A step toward the programmer's apprentice. </title> <type> Technical Report A.I. T.R. No. 753, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> May </month> <year> 1985. </year>
Reference-contexts: Duality also arises in justifying plans, in analysis by synthesis, and in the plan calculus' synthesis/analysis neutrality goal, eg. Wills' use of cliches that have also been used for interactive synthesis in KBEMACS <ref> [50] </ref>. More practically, recognition/generation plan duality could affect plan representation. Under duality, a single plan representation formalism could be designed for both recognition and generation plans. Given plans could be represented once and used in both roles.
Reference: [51] <editor> Richard C. Waters and Elliot J. Chikofsky, editors. </editor> <booktitle> WORKING CONFERENCE ON REVERSE ENGINEERING. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: Such knowledge can be used to refine the program 4 Current surveys of automatic program understanding are in [15] and [52]. Recent research is reported in [41], <ref> [51] </ref>, [36], [49], [8] etc. representations evolving in design space. Suppose some representation in design space is found to be an instance of the recognition plan. The mapping induces a transformation in design space creating a refined program representation, the new design.
Reference: [52] <author> Linda Mary Wills. </author> <title> Automated program recognition by graph parsing. </title> <type> Technical Report AI-TR-1358, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> July </month> <year> 1992. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Such knowledge can be used to refine the program 4 Current surveys of automatic program understanding are in [15] and <ref> [52] </ref>. Recent research is reported in [41], [51], [36], [49], [8] etc. representations evolving in design space. Suppose some representation in design space is found to be an instance of the recognition plan. The mapping induces a transformation in design space creating a refined program representation, the new design.
Reference: [53] <author> Chiung-Chen Yu and Scott P. Robertson. </author> <title> Plan-based representations of Pascal and Fortran code. </title> <booktitle> In CHI88: Conference on Computer Human Interaction, </booktitle> <pages> pages 251-256, </pages> <year> 1988. </year> <month> 20 </month>
References-found: 53

