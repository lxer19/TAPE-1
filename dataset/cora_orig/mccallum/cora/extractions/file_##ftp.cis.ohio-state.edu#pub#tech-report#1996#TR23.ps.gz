URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1996/TR23.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: fgrother,harroldg@cis.ohio-state.edu  
Title: Analyzing Regression Test Selection Techniques  
Author: Gregg Rothermel and Mary Jean Harrold 
Keyword: software maintenance, regression testing, selective retest, regression test selection.  
Date: April 12, 1996  
Address: 395 Dreese Lab, 2015 Neil Avenue Columbus, OH 43210-1277  
Affiliation: Department of Computer and Information Science Ohio State University  
Abstract: Regression testing is a necessary but expensive maintenance activity aimed at showing that code has not been adversely affected by changes. Regression test selection techniques reuse tests from an existing test suite to test a modified program. Many regression test selection techniques have been proposed; however, it is difficult to compare and evaluate these techniques because they have different goals. This paper outlines the issues relevant to regression test selection techniques, and uses these issues as the basis for a framework within which to evaluate the techniques. We illustrate the application of our framework by using it to evaluate existing regression test selection techniques. The evaluation reveals the strengths and weaknesses of existing techniques, and highlights some problems that future work in this area should address. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Agrawal, J. Horgan, E. Krauser, and S. </author> <title> London. Incremental regression testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1993, </booktitle> <pages> pages 348-357, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: The technique makes no assumptions about development environments or initial design of test suites. The technique requires tools for calculating control dependence and for collecting test trace information at the statement level. 32 5.10 Slicing Techniques Agrawal et al. <ref> [1] </ref> define a family of selective retest techniques that use slicing. For each test t 2 T , each technique constructs a slice. The authors discuss four different slice types: execution slice, dynamic slice, relevant slice, and approximate relevant slice.
Reference: [2] <author> S. Bates and S. Horwitz. </author> <title> Incremental program testing using program dependence graphs. </title> <booktitle> In Proceedings of the 20th ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: The techniques assume the initial use of dataflow test selection criteria, and require tools for static dataflow analysis and for collecting test traces at the basic block level. The incremental approach also requires incremental dataflow analysis tools. 5.5 Program Dependence Graph Techniques Bates and Horwitz <ref> [2] </ref> present test selection techniques based on the program dependence graph (PDG) criteria: all-PDG-nodes and all-PDG-flow-edges.
Reference: [3] <author> P. Benedusi, A. Cimitile, and U. De Carlini. </author> <title> Post-maintenance testing based on path change analysis. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1988, </booktitle> <pages> pages 352-361, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The technique does not require test traces. 5.3 The Path Analysis Technique Benedusi, Cimitile, and De Carlini <ref> [3] </ref> present a selective retest technique based on path analysis. Their technique takes as input the set of program paths in P 0 expressed as an algebraic expression, and manipulates that expression to obtain a set of cycle-free exemplar paths: acyclic paths from program entry to program exit.
Reference: [4] <author> D. Binkley. </author> <title> Using semantic differencing to reduce the cost of regression testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 41-50, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management. Hartmann and Robson [20], Taha, Thebaut, and Liu [39], Harrold, Gupta, and Soffa [14], and Wong et al.[43] address test suite management. Binkley <ref> [4] </ref> presents an algorithm that constructs a reduced-size version of the modified program for use in regression testing. Leung and White [26] discuss regression testability metrics. Most recent research on regression testing, however, concerns selective retest techniques.
Reference: [5] <author> D. Binkley. </author> <title> Reducing the cost of regression testing by semantics guided test case selection. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1995, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: The techniques assume the use of PDG-based test adequacy criteria, and require tools for constructing PDGs (which in turn require tools for performing control dependence and dataflow analysis), tools for performing program slicing, and tools for collecting test traces at the statement level. 5.6 System Dependence Graph Techniques Binkley <ref> [5] </ref> presents a technique for interprocedural regression test selection that operates on the system dependence graph (SDG).
Reference: [6] <author> P.A. Brown and D. Hoffman. </author> <title> The application of module regression testing at TRIUMF. Nuclear Instruments and Methods in Physics Research, Section A, </title> <address> .A293(1-2):377-381, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Research on regression testing spans a wide variety of topics. Dogsa and Rozman [9], Hoffman and 2 Brealey [22], Hoffman [21], Brown and Hoffman <ref> [6] </ref>, and Ziegler, Grasso, and Burgermeister [46] focus on test environments and automation of the regression testing process. Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management.
Reference: [7] <author> Y.F. Chen, D.S. Rosenblum, and K.P. Vo. TestTube: </author> <title> A system for selective regression testing. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 211-222, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The techniques require test trace information at the basic block level, and tools for constructing control flow graphs; advanced versions of the techniques also require tools for dataflow analysis. 5.12 The Modified Entity Technique Chen, Rosenblum, and Vo <ref> [7] </ref> present the modified entity technique, a regression test selection technique that detects modified code entities. Code entities are defined as executable portions of code such as functions, or nonexecutable components such as storage locations. The technique selects all tests associated with changed entities.
Reference: [8] <author> H. Crowder, E.L. Johnson, and M. Padberg. </author> <title> Solving large-scale zero-one linear programming problems. </title> <journal> Operations Research, </journal> <volume> 31(5) </volume> <pages> 803-834, </pages> <month> September </month> <year> 1983. </year> <month> 42 </month>
Reference-contexts: In fact, the underlying problem is NP-hard [12], and all known 0-1 integer programming algorithms may take exponential time. Despite this possible worst-case behavior, 0-1 integer programming algorithms exist that can obtain solutions, in practice, in times that may be acceptable. For example, Crowder, Johnson, and Padberg <ref> [8] </ref> report experimental results in which ten large-scale problems are solved, each in less than an hour. Hartmann and Robson report that their interprocedural technique, by treating functions rather than smaller code segments as the basic entities for coverage, achieves performance gains over intraprocedural techniques.
Reference: [9] <author> T. Dogsa and I. Rozman. </author> <title> CAMOTE computer aided module testing and design environment. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1988, </booktitle> <pages> pages 404-408, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Research on regression testing spans a wide variety of topics. Dogsa and Rozman <ref> [9] </ref>, Hoffman and 2 Brealey [22], Hoffman [21], Brown and Hoffman [6], and Ziegler, Grasso, and Burgermeister [46] focus on test environments and automation of the regression testing process. Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management.
Reference: [10] <author> K.F. Fischer. </author> <title> A test case selection method for the validation of software maintenance modifications. </title> <booktitle> In Proceedings of COMPSAC '77, </booktitle> <pages> pages 421-426, </pages> <month> November </month> <year> 1977. </year>
Reference-contexts: To evaluate space efficiency | a topic seldom discussed in the papers on test selection techniques | we have confined ourselves to mentioning cases in which techniques may require space exponential in the size of their input. 5.1 Linear Equation Techniques Fischer <ref> [10] </ref> presents a selective retest technique that uses systems of linear equations to select test suites that yield segment coverage of modified code. Lee and He [25] propose a similar technique. <p> However, when control flow is affected, linear equation techniques are not defined at the intrapro 12 Program segments are defined variously in the literature on linear equation techniques. Fischer <ref> [10] </ref> defines a segment as a single-entry, single-exit block of code whose statements are executed sequentially; by this definition, segments are equivalent to basic blocks. Fischer later applies the term to procedures or functions, in which statements might not be executed sequentially. <p> When the techniques operate as minimization techniques, they return small test suites and thus reduce the time required to run the selected tests. However, Fischer states that due to the calculations required to solve systems of linear equations the techniques may be data and computation intensive on large programs <ref> [10] </ref>. In fact, the underlying problem is NP-hard [12], and all known 0-1 integer programming algorithms may take exponential time. Despite this possible worst-case behavior, 0-1 integer programming algorithms exist that can obtain solutions, in practice, in times that may be acceptable.
Reference: [11] <author> K.F. Fischer, F. Raji, and A. Chruscicki. </author> <title> A methodology for retesting modified software. </title> <booktitle> In Proceedings of the National Telecommunications Conference B-6-3, </booktitle> <pages> pages 1-6, </pages> <month> November </month> <year> 1981. </year>
Reference-contexts: Lee and He [25] propose a similar technique. Fischer, Raji, and Chruscicki <ref> [11] </ref> extend Fischer's earlier work to incorporate information on variable definitions and uses. 14 15 Hartmann and Robson [18, 19, 20] extend and implement Fischer, Raji, and Chruscicki's technique.
Reference: [12] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: However, Fischer states that due to the calculations required to solve systems of linear equations the techniques may be data and computation intensive on large programs [10]. In fact, the underlying problem is NP-hard <ref> [12] </ref>, and all known 0-1 integer programming algorithms may take exponential time. Despite this possible worst-case behavior, 0-1 integer programming algorithms exist that can obtain solutions, in practice, in times that may be acceptable.
Reference: [13] <author> R. Gupta, M.J. Harrold, </author> <title> and M.L. Soffa. An approach to regression testing using slicing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 299-308, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Incremental techniques process a single change, select tests for that change, incrementally update dataflow information and test trace information, and then repeat the process for the next change. Nonincremental techniques process a multiply-changed program considering all modifications simultaneously. The dataflow regression testing techniques described by Gupta, Harrold, and Soffa <ref> [13] </ref>, Harrold and Soffa [15, 16, 17], Taha, Thebaut and Liu [39], and Ostrand and Weyuker [31], are sufficiently alike to justify treating them together. Inclusiveness. Dataflow techniques consider tests only in association with definition-use pairs. As a result, they can omit modification-revealing tests in several ways.
Reference: [14] <author> M. J. Harrold, R. Gupta, and M. L. Soffa. </author> <title> A methodology for controlling the size of a test suite. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 2(3) </volume> <pages> 270-285, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management. Hartmann and Robson [20], Taha, Thebaut, and Liu [39], Harrold, Gupta, and Soffa <ref> [14] </ref>, and Wong et al.[43] address test suite management. Binkley [4] presents an algorithm that constructs a reduced-size version of the modified program for use in regression testing. Leung and White [26] discuss regression testability metrics. Most recent research on regression testing, however, concerns selective retest techniques.
Reference: [15] <author> M.J. Harrold and M.L. Soffa. </author> <title> An incremental approach to unit testing during maintenance. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1988, </booktitle> <pages> pages 362-367, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Nonincremental techniques process a multiply-changed program considering all modifications simultaneously. The dataflow regression testing techniques described by Gupta, Harrold, and Soffa [13], Harrold and Soffa <ref> [15, 16, 17] </ref>, Taha, Thebaut and Liu [39], and Ostrand and Weyuker [31], are sufficiently alike to justify treating them together. Inclusiveness. Dataflow techniques consider tests only in association with definition-use pairs. As a result, they can omit modification-revealing tests in several ways.
Reference: [16] <author> M.J. Harrold and M.L. Soffa. </author> <title> An incremental data flow testing tool. </title> <booktitle> In Proceedings of the Sixth International Conference on Testing Computer Software, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: Nonincremental techniques process a multiply-changed program considering all modifications simultaneously. The dataflow regression testing techniques described by Gupta, Harrold, and Soffa [13], Harrold and Soffa <ref> [15, 16, 17] </ref>, Taha, Thebaut and Liu [39], and Ostrand and Weyuker [31], are sufficiently alike to justify treating them together. Inclusiveness. Dataflow techniques consider tests only in association with definition-use pairs. As a result, they can omit modification-revealing tests in several ways.
Reference: [17] <author> M.J. Harrold and M.L. Soffa. </author> <title> Interprocedural data flow testing. </title> <booktitle> In Proceedings of the Third Testing, Analysis, and Verification Symposium, </booktitle> <pages> pages 158-167, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Nonincremental techniques process a multiply-changed program considering all modifications simultaneously. The dataflow regression testing techniques described by Gupta, Harrold, and Soffa [13], Harrold and Soffa <ref> [15, 16, 17] </ref>, Taha, Thebaut and Liu [39], and Ostrand and Weyuker [31], are sufficiently alike to justify treating them together. Inclusiveness. Dataflow techniques consider tests only in association with definition-use pairs. As a result, they can omit modification-revealing tests in several ways.
Reference: [18] <author> J. Hartmann and D.J. Robson. </author> <title> Revalidation during the software maintenance phase. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 70-79, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Lee and He [25] propose a similar technique. Fischer, Raji, and Chruscicki [11] extend Fischer's earlier work to incorporate information on variable definitions and uses. 14 15 Hartmann and Robson <ref> [18, 19, 20] </ref> extend and implement Fischer, Raji, and Chruscicki's technique. <p> Fischer later applies the term to procedures or functions, in which statements might not be executed sequentially. Hartmann and Robson define segments for C procedures and programs as either particular groups of statements in procedures, or as entire functions, respectively <ref> [18] </ref>. In all cases, segments are portions of code through which test execution can be tracked, that serve as test requirements or entities to be tested.
Reference: [19] <author> J. Hartmann and D.J. Robson. </author> <title> RETEST development of a selective revalidation prototype environment for use in software maintenance. </title> <booktitle> In Proceedings of the Twenty-Third Hawaii International Conference on System Sciences, </booktitle> <pages> pages 92-101, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Lee and He [25] propose a similar technique. Fischer, Raji, and Chruscicki [11] extend Fischer's earlier work to incorporate information on variable definitions and uses. 14 15 Hartmann and Robson <ref> [18, 19, 20] </ref> extend and implement Fischer, Raji, and Chruscicki's technique.
Reference: [20] <author> J. Hartmann and D.J. Robson. </author> <title> Techniques for selective revalidation. </title> <journal> IEEE Software, </journal> <volume> 16(1) </volume> <pages> 31-38, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Dogsa and Rozman [9], Hoffman and 2 Brealey [22], Hoffman [21], Brown and Hoffman [6], and Ziegler, Grasso, and Burgermeister [46] focus on test environments and automation of the regression testing process. Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management. Hartmann and Robson <ref> [20] </ref>, Taha, Thebaut, and Liu [39], Harrold, Gupta, and Soffa [14], and Wong et al.[43] address test suite management. Binkley [4] presents an algorithm that constructs a reduced-size version of the modified program for use in regression testing. Leung and White [26] discuss regression testability metrics. <p> Lee and He [25] propose a similar technique. Fischer, Raji, and Chruscicki [11] extend Fischer's earlier work to incorporate information on variable definitions and uses. 14 15 Hartmann and Robson <ref> [18, 19, 20] </ref> extend and implement Fischer, Raji, and Chruscicki's technique.
Reference: [21] <author> D. Hoffman. </author> <title> A CASE study in module testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 100-105, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Research on regression testing spans a wide variety of topics. Dogsa and Rozman [9], Hoffman and 2 Brealey [22], Hoffman <ref> [21] </ref>, Brown and Hoffman [6], and Ziegler, Grasso, and Burgermeister [46] focus on test environments and automation of the regression testing process. Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management.
Reference: [22] <author> D. Hoffman and C. Brealey. </author> <title> Module test case generation. </title> <booktitle> In Proceedings of the Third Workshop on Software Testing, Analysis, and Verification, </booktitle> <pages> pages 97-102, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Research on regression testing spans a wide variety of topics. Dogsa and Rozman [9], Hoffman and 2 Brealey <ref> [22] </ref>, Hoffman [21], Brown and Hoffman [6], and Ziegler, Grasso, and Burgermeister [46] focus on test environments and automation of the regression testing process. Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management.
Reference: [23] <author> S. Horwitz, T. Reps, and D. Binkley. </author> <title> Interprocedural slicing using dependence graphs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(1) </volume> <pages> 26-60, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Each slice can require time linear in the size of the SDG. SDG size is polynomial in a number of factors relating to program size, including number of parameters, procedure size, and number of call sites <ref> [23] </ref>: this polynomial is at least of degree two.
Reference: [24] <author> J. Laski and W. Szermer. </author> <title> Identification of program modifications and its applications in software maintentance. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 282-290, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: One such differencing algorithm is proposed by Yang [44]; this algorithm requires time O (jP j fl jP 0 j) to compute a correspondence between P and P 0 . An O (max (jP j; jP 0 j) 3 ) algorithm is proposed by Laski and Szermer <ref> [24] </ref>. More efficient comparison methods, such as the UNIX 10 diff utility, may not be precise enough for computing correspondences at the intraprocedural level. However, coarser-grained 9 There are various ways in which this two-phase process may fit into the overall software maintenance process. <p> The technique does require tools for collecting test traces at the function level. Finally, although in this work we focus on code-based testing needs, it is worth noting that the firewall technique also addresses testing needs with respect to specification changes. 5.9 The Cluster Identification Technique Laski and Szermer <ref> [24] </ref> present a technique for identifying single-entry, single-exit subgraphs of a control flow graph (CFG), called clusters, that have been modified from one version of a program to the next.
Reference: [25] <author> J.A.N. Lee and X. </author> <title> He. A Methodology for Test Selection. </title> <journal> The Journal of Systems and Software, </journal> <volume> 13(1) </volume> <pages> 177-185, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Lee and He <ref> [25] </ref> propose a similar technique. Fischer, Raji, and Chruscicki [11] extend Fischer's earlier work to incorporate information on variable definitions and uses. 14 15 Hartmann and Robson [18, 19, 20] extend and implement Fischer, Raji, and Chruscicki's technique.
Reference: [26] <author> H.K.N. Leung and L. White. </author> <title> Insights Into Regression Testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 60-69, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Hartmann and Robson [20], Taha, Thebaut, and Liu [39], Harrold, Gupta, and Soffa [14], and Wong et al.[43] address test suite management. Binkley [4] presents an algorithm that constructs a reduced-size version of the modified program for use in regression testing. Leung and White <ref> [26] </ref> discuss regression testability metrics. Most recent research on regression testing, however, concerns selective retest techniques. Selective retest techniques reduce the cost of testing a modified program by reusing existing tests and identifying the portions of the modified program or its specification that should be tested.
Reference: [27] <author> H.K.N. Leung and L. White. </author> <title> Insights into testing and regression testing global variables. </title> <journal> Journal of Software Maintenance, </journal> <volume> 2 </volume> <pages> 209-222, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Their technique determines where to place a firewall around modified code modules. Where test selection from T is concerned, the technique selects unit tests for modified modules that lie within the firewall, and integration tests for groups of interacting modules that lie within the firewall. Leung and White <ref> [27, 41] </ref> extend their technique to handle interactions involving global variables. White et al. [42] discuss experiences implementing the firewall technique. Inclusiveness.
Reference: [28] <author> H.K.N. Leung and L.J. White. </author> <title> A study of integration testing and software regression at the integration level. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1990, </booktitle> <pages> pages 290-300, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Regression test selection techniques, in contrast, attempt to reduce the time required to retest a modified program by selecting some subset of the existing test suite. 2 Although some regression test selection techniques select tests based on information collected from program specifications <ref> [28, 40] </ref> most techniques select tests based on information about the code of the program and the modified version [1, 2, 3, 5, 7, 10, 11, 13, 15, 16, 17, 18, 20, 19, 24, 25, 27, 28, 31, 33, 35, 34, 37, 38, 39, 41, 42, 45]. <p> The technique can apply interprocedurally or intraprocedurally. The technique does not depend on any particular testing criteria, but requires a tool for collecting test traces at the statement level, and tools for performing static and dynamic control and data dependence analysis. 5.8 The Firewall Technique Leung and White <ref> [28] </ref> present a selective retest technique directed specifically at interprocedural regression testing that handles both code and specification changes. Their technique determines where to place a firewall around modified code modules.
Reference: [29] <author> H.K.N. Leung and L.J. White. </author> <title> A cost model to compare regression test strategies. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1991, </booktitle> <pages> pages 201-208, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Selective retest techniques differ from the retest-all technique, which reruns all tests in the existing test suite. Leung and White <ref> [29] </ref> show that a selective retest technique is more economical than the retest-all technique if the cost of selecting a reduced subset of tests to run is less than the cost of running the tests that the selective retest technique lets us omit. <p> Where time is concerned, a test selection technique is more economical than the retest-all technique if the cost of selecting T 0 is less than the cost of running the tests in T -T 0 <ref> [29] </ref>. Space efficiency primarily depends on the test history and program analysis information a technique must store. Thus, both space and time efficiency depend on the size of the test suite that a technique selects, and on the computational cost of that technique.
Reference: [30] <author> R. Lewis, D.W. Beck, and J. Hartmann. </author> <title> Assay a tool to support regression testing. </title> <booktitle> In ESEC '89. 2nd European Software Engineering Conference Proceedings, </booktitle> <pages> pages 487-496, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Research on regression testing spans a wide variety of topics. Dogsa and Rozman [9], Hoffman and 2 Brealey [22], Hoffman [21], Brown and Hoffman [6], and Ziegler, Grasso, and Burgermeister [46] focus on test environments and automation of the regression testing process. Lewis, Beck, and Hartmann <ref> [30] </ref> investigate automated capture-playback mechanisms and test suite management. Hartmann and Robson [20], Taha, Thebaut, and Liu [39], Harrold, Gupta, and Soffa [14], and Wong et al.[43] address test suite management. Binkley [4] presents an algorithm that constructs a reduced-size version of the modified program for use in regression testing.
Reference: [31] <author> T.J. Ostrand and E.J. Weyuker. </author> <title> Using dataflow analysis for regression testing. </title> <booktitle> In Sixth Annual Pacific Northwest Software Quality Conference, </booktitle> <pages> pages 233-247, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: Nonincremental techniques process a multiply-changed program considering all modifications simultaneously. The dataflow regression testing techniques described by Gupta, Harrold, and Soffa [13], Harrold and Soffa [15, 16, 17], Taha, Thebaut and Liu [39], and Ostrand and Weyuker <ref> [31] </ref>, are sufficiently alike to justify treating them together. Inclusiveness. Dataflow techniques consider tests only in association with definition-use pairs. As a result, they can omit modification-revealing tests in several ways.
Reference: [32] <author> G. Rothermel. </author> <title> Efficient, Effective Regression Testing Using Safe Test Selection Techniques. </title> <type> Ph.D. dissertation, </type> <institution> Clemson University, Department of Computer Science (usually omitted), </institution> <month> May </month> <year> 1996. </year> <month> 43 </month>
Reference-contexts: A program P fails for t if, when P is tested with t, P produces an output that is incorrect according to S. There is no effective procedure by which to find the tests in T that are fault-revealing for P 0 <ref> [32] </ref>. Under certain conditions, however, a regression test selection technique can select a superset of the set of tests in T 3 that are fault-revealing for P 0 . Under those conditions, such a technique omits no tests in T that can reveal faults in P 0 . <p> such that, if any test exceeds that bound, we assume it is fault-revealing for P 0 : 4 Unfortunately, even when the P-Correct-for-T Assumption and the Obsolete-Test-Identification Assumption hold, there is no effective procedure for precisely identifying the nonobsolete tests in T that are modification-revealing for P and P 0 <ref> [32] </ref>. Thus, we consider a third subset of T : the modification-traversing tests. <p> a time bound b to discover, conservatively, which tests are fault-revealing for P 0 ; however, in running all tests in T we are doing the very thing that selective retest aims to avoid. 5 To capture more formally the notion of executing new, modified, or deleted code, in Reference <ref> [32] </ref> we define the concept of an execution trace ET (P (t)) for t on P to consist of the sequence of statements in P that are executed when P is tested with t. <p> When all three of our assumptions hold, this process locates the tests in T that are fault-revealing for P 0 . Figure 1 illustrates the relationship that holds between the sets of obsolete, fault-revealing, modification-revealing, and modification-traversing tests in T when the assumptions hold. Reference <ref> [32] </ref> gives an algorithm that precisely identifies the tests t in T that are modification-traversing for P and P 0 . Unfortunately, that algorithm has an exponential worst-case running time. <p> For an arbitrary choice of M , P , P 0 , and T , there is no algorithm to determine the inclusiveness of M relative to P , P 0 , and T <ref> [32] </ref>; however, we can still draw useful conclusions about inclusiveness. First, we can prove that M is safe by showing that M selects a known superset of the modification-revealing tests. For example, if M selects all modification-traversing tests then for proper regression testing M is safe. <p> As with inclusiveness, there is no algorithm to determine, for an arbitrary choice of M , P , P 0 , and T , the precision of M relative to P , P 0 , and T <ref> [32] </ref>; however, we can draw useful conclusions about precision. <p> Finally, a technique may support intraprocedural or interprocedural test selection. 11 In practice, regression testing is often performed at the interprocedural level on subsystems or programs. Furthermore, empirical evidence suggests that test selection at the intraprocedural level may not offer savings sufficient to justify its cost <ref> [32] </ref>. 11 Most intraprocedural test selection techniques may be used interprocedurally in a naive fashion, by applying them to all pairs of procedures in the program and its modified version. However, this simplistic approach to interprocedural test selection can be unnecessarily costly [32]. <p> not offer savings sufficient to justify its cost <ref> [32] </ref>. 11 Most intraprocedural test selection techniques may be used interprocedurally in a naive fashion, by applying them to all pairs of procedures in the program and its modified version. However, this simplistic approach to interprocedural test selection can be unnecessarily costly [32]. We judge a method interprocedural if it addresses interprocedural test selection by a method that goes beyond this naive approach. 12 We could define generality more quantitatively, as we have defined inclusiveness and precision. <p> The techniques require collection of test trace information at either the statement or procedure level; some of the techniques also require tools for static and dynamic dependence analysis. 34 5.11 Graph Walk Techniques Rothermel and Harrold <ref> [32, 33, 35] </ref> present an intraprocedural regression test selection technique that builds control flow graphs (CFGs) for P and P 0 , collects traces for tests in T that associate tests with CFG edges, and performs synchronous depth-first traversals of the two graphs, comparing nodes (or actually, the program statements associated <p> The most recent version of the technique is based on control flow graphs <ref> [32] </ref>. <p> This approach identifies tests that reach code that is new in or modified for P 0 , and tests that formerly reached code that has been deleted from P . The technique selects all of the tests in T that are modification-traversing for P and P 0 <ref> [32] </ref>. The authors offer an interprocedural version of the technique, also based on CFGs, that can be applied to entire programs or subsystems. Rothermel and Harrold also present versions of their techniques that add data dependence information to CFGs to facilitate more precise test selection. Inclusiveness. <p> Rothermel and Harrold also present versions of their techniques that add data dependence information to CFGs to facilitate more precise test selection. Inclusiveness. The graph walk techniques select all modification-traversing tests <ref> [32] </ref>. Thus, for proper regression testing they are safe. Precision. Graph walk techniques are not 100% precise for arbitrary programs. Rothermel [32] defines a property of CFGs called the multiply-visited-node property. 16 Rothermel proves that when P and P 0 do not exhibit the multiply-visited-node property, graph walk techniques select exactly <p> Inclusiveness. The graph walk techniques select all modification-traversing tests <ref> [32] </ref>. Thus, for proper regression testing they are safe. Precision. Graph walk techniques are not 100% precise for arbitrary programs. Rothermel [32] defines a property of CFGs called the multiply-visited-node property. 16 Rothermel proves that when P and P 0 do not exhibit the multiply-visited-node property, graph walk techniques select exactly the tests in T that are modification-traversing for P and P 0 . <p> Interprocedural versus intraprocedural test selection. Many test selection techniques are intrapro-cedural. Preliminary experimental results suggest that such techniques may not offer savings that justify their costs <ref> [32] </ref>. More extensive empirical studies can help to determine the level at which test selection should be performed. Minimization techniques. Minimization techniques take coverage to an extreme, requiring selection of only a single test through some modified or affected component of P 0 . <p> These techniques significantly reduce the number of tests that must be executed. However, preliminary experimental results suggest that minimization of test suites may have a significant, adverse impact on the ability to detect regression errors <ref> [32] </ref>. Additional empirical studies in this area would be useful. Another important direction for future work is the investigation of other selective retest tasks. Our work has focused on the regression test selection problem: the problem of selecting tests from an existing test suite.
Reference: [33] <author> G. Rothermel and M.J. Harrold. </author> <title> A safe, efficient algorithm for regression test selection. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1993, </booktitle> <pages> pages 358-367, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: The techniques require collection of test trace information at either the statement or procedure level; some of the techniques also require tools for static and dynamic dependence analysis. 34 5.11 Graph Walk Techniques Rothermel and Harrold <ref> [32, 33, 35] </ref> present an intraprocedural regression test selection technique that builds control flow graphs (CFGs) for P and P 0 , collects traces for tests in T that associate tests with CFG edges, and performs synchronous depth-first traversals of the two graphs, comparing nodes (or actually, the program statements associated <p> tests with CFG edges, and performs synchronous depth-first traversals of the two graphs, comparing nodes (or actually, the program statements associated with those nodes) that are reached along prefixes of execution traces. 15 When a pair of 15 Earlier versions of this technique used control, program, or system dependence graphs <ref> [33, 35] </ref>. The most recent version of the technique is based on control flow graphs [32].
Reference: [34] <author> G. Rothermel and M.J. Harrold. </author> <title> Selecting regression tests for object-oriented software. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1994, </booktitle> <pages> pages 14-25, </pages> <month> September </month> <year> 1994. </year>
Reference: [35] <author> G. Rothermel and M.J. Harrold. </author> <title> Selecting tests and identifying test coverage requirements for modified software. </title> <booktitle> In Proceedings of the 1994 International Symposium on Software Testing and Analysis (ISSTA 94), </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: The techniques require collection of test trace information at either the statement or procedure level; some of the techniques also require tools for static and dynamic dependence analysis. 34 5.11 Graph Walk Techniques Rothermel and Harrold <ref> [32, 33, 35] </ref> present an intraprocedural regression test selection technique that builds control flow graphs (CFGs) for P and P 0 , collects traces for tests in T that associate tests with CFG edges, and performs synchronous depth-first traversals of the two graphs, comparing nodes (or actually, the program statements associated <p> tests with CFG edges, and performs synchronous depth-first traversals of the two graphs, comparing nodes (or actually, the program statements associated with those nodes) that are reached along prefixes of execution traces. 15 When a pair of 15 Earlier versions of this technique used control, program, or system dependence graphs <ref> [33, 35] </ref>. The most recent version of the technique is based on control flow graphs [32].
Reference: [36] <author> S. Schach. </author> <title> Software Engineering. </title> <publisher> Aksen Associates, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Estimates indicate that software maintenance activities account for as much as two-thirds of the cost of software production <ref> [36] </ref>. One necessary but expensive maintenance task is regression testing, performed on a modified program to instill confidence that changes are correct and have not adversely affected unchanged portions of the program.
Reference: [37] <author> B. Sherlund and B. Korel. </author> <title> Modification oriented software testing. </title> <booktitle> In Conference Proceedings: Quality Week 1991, </booktitle> <pages> pages 1-17, </pages> <year> 1991. </year>
Reference-contexts: The techniques require tools for constructing SDGs (which in turn require tools for performing control dependence and dataflow analysis), and for collecting test traces at the statement level. The techniques assume the use of PDG-based test adequacy criteria. 5.7 The Modification Based Technique Sherlund and Korel <ref> [37] </ref> present a selective retest technique that uses static dependence analysis to determine program components that are data or control dependent on modified code, and thus may be affected by a modification.
Reference: [38] <author> B. Sherlund and B. Korel. </author> <title> Logical modification oriented software testing. </title> <booktitle> In Proceedings: Twelfth International Conference on Testing Computer Software, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Testing is complete for the modification when each influenced component has been reached by some test that exercised the modification. In Reference <ref> [38] </ref>, the authors extend the work to handle logical modifications, which consist of groups of logically related modifications. The modification based technique differs from the other techniques we analyze, in that it does not automate the process of selecting T 0 from T .
Reference: [39] <author> A.B. Taha, S.M. Thebaut, and S.S. Liu. </author> <title> An approach to software fault localization and revalidation based on incremental data flow analysis. </title> <booktitle> In Proceedings of the 13th Annual International Computer Software and Applications Conference, </booktitle> <pages> pages 527-534, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management. Hartmann and Robson [20], Taha, Thebaut, and Liu <ref> [39] </ref>, Harrold, Gupta, and Soffa [14], and Wong et al.[43] address test suite management. Binkley [4] presents an algorithm that constructs a reduced-size version of the modified program for use in regression testing. Leung and White [26] discuss regression testability metrics. <p> Nonincremental techniques process a multiply-changed program considering all modifications simultaneously. The dataflow regression testing techniques described by Gupta, Harrold, and Soffa [13], Harrold and Soffa [15, 16, 17], Taha, Thebaut and Liu <ref> [39] </ref>, and Ostrand and Weyuker [31], are sufficiently alike to justify treating them together. Inclusiveness. Dataflow techniques consider tests only in association with definition-use pairs. As a result, they can omit modification-revealing tests in several ways.
Reference: [40] <author> A. von Mayrhauser, R.T. Mraz, and J. </author> <title> Walls. Domain based regression testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1994, </booktitle> <pages> pages 26-35, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Regression test selection techniques, in contrast, attempt to reduce the time required to retest a modified program by selecting some subset of the existing test suite. 2 Although some regression test selection techniques select tests based on information collected from program specifications <ref> [28, 40] </ref> most techniques select tests based on information about the code of the program and the modified version [1, 2, 3, 5, 7, 10, 11, 13, 15, 16, 17, 18, 20, 19, 24, 25, 27, 28, 31, 33, 35, 34, 37, 38, 39, 41, 42, 45].
Reference: [41] <author> L.J. White and H.K.N. Leung. </author> <title> A firewall concept for both control-flow and data-flow in regression integration testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 262-270, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Their technique determines where to place a firewall around modified code modules. Where test selection from T is concerned, the technique selects unit tests for modified modules that lie within the firewall, and integration tests for groups of interacting modules that lie within the firewall. Leung and White <ref> [27, 41] </ref> extend their technique to handle interactions involving global variables. White et al. [42] discuss experiences implementing the firewall technique. Inclusiveness.
Reference: [42] <author> L.J. White, V. Narayanswamy, T. Friedman, M. Kirschenbaum, P. Piwowarski, and M. Oha. </author> <title> Test Manager: a regression testing tool. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1993, </booktitle> <pages> pages 338-347, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Leung and White [27, 41] extend their technique to handle interactions involving global variables. White et al. <ref> [42] </ref> discuss experiences implementing the firewall technique. Inclusiveness. <p> The firewall technique has been implemented, and initial measurements of its expense have been reported <ref> [42] </ref>. The implementation requires a database that may be expensive to set up; however, this setup can be performed during the initial phase of regression testing.
Reference: [43] <author> W. E. Wong, J. R. Horgan, S. London, and A. P. Mathur. </author> <title> Effect of test set minimization on fault detection effectiveness. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 41-50, </pages> <month> April </month> <year> 1995. </year>
Reference: [44] <author> W. Yang. </author> <title> Identifying syntactic differences between two programs. </title> <journal> Software|Practice and Experience, </journal> <volume> 21(7) </volume> <pages> 739-755, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: One such differencing algorithm is proposed by Yang <ref> [44] </ref>; this algorithm requires time O (jP j fl jP 0 j) to compute a correspondence between P and P 0 . An O (max (jP j; jP 0 j) 3 ) algorithm is proposed by Laski and Szermer [24].
Reference: [45] <author> S.S. Yau and Z. Kishimoto. </author> <title> A method for revalidating modified programs in the maintenance phase. </title> <booktitle> In COMP-SAC '87: The Eleventh Annual International Computer Software and Applications Conference, </booktitle> <pages> pages 272-277, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: The techniques require tools for solving 0-1 integer programming problems, and for collecting test trace information at either the function level, or some intraprocedural segment level. 5.2 The Symbolic Execution Technique Yau and Kishimoto <ref> [45] </ref> present a selective retest technique that uses input partitions and data-driven symbolic execution to select and execute regression tests. Initially, the technique analyzes code and specifications to derive the input partition for a modified program.
Reference: [46] <author> J. Ziegler, J.M. Grasso, and L.G. Burgermeister. </author> <title> An Ada based real-time closed-loop integration and regression test tool. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 81-90, </pages> <month> October </month> <year> 1989. </year> <month> 44 </month>
Reference-contexts: Research on regression testing spans a wide variety of topics. Dogsa and Rozman [9], Hoffman and 2 Brealey [22], Hoffman [21], Brown and Hoffman [6], and Ziegler, Grasso, and Burgermeister <ref> [46] </ref> focus on test environments and automation of the regression testing process. Lewis, Beck, and Hartmann [30] investigate automated capture-playback mechanisms and test suite management. Hartmann and Robson [20], Taha, Thebaut, and Liu [39], Harrold, Gupta, and Soffa [14], and Wong et al.[43] address test suite management.
References-found: 46

