URL: http://www.cs.rutgers.edu/~minsky/papers/auditing-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Email: minsky@cs.rutgers.edu  
Title: Independent On-Line Monitoring of Evolving Systems  
Author: Naftaly H. Minsky 
Keyword: monitoring, trustworthiness, law-governed architecture, software evolution, invariants of evolution.  
Note: Work supported in part by NSF grants No. CCR-9308773  
Date: July 28  
Address: New Brunswick, NJ, 08903 USA  
Affiliation: Department of Computer Science Rutgers University  
Abstract: We argue that the trustworthiness of evolving software systems can be significantly enhanced by a rigorous process of independent on-line monitoring. Such monitoring can prevent fraud, encourage careful maintenance, and serve as an early detector of irregularities in the state and behavior of a system. Unfortunately, there is a conflict between the concepts of on-line and independent monitoring. This conflict is due to the fact that on-line monitoring requires the embedding of some kinds of sensors in the base-system. But the introduction of such sensors requires a degree of cooperation with the developers of the base system, and may interfere with the operations of that system, contrary to the requirements of independent monitoring. We describe a way to resolve this conflict by applying the concept of law-governed architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [BGMW81] <author> A.D. Baily, J. Gerlach, P. McAfee, </author> <title> and A.B. Whinston. Internal accounting control in the office of the future. </title> <journal> The IEEE Computer Journal, </journal> <month> May </month> <year> 1981. </year>
Reference-contexts: The latter condition makes it possible for the developers of the base system to be able to tolerate the independent existence of the monitoring mechanism. Independent monitoring has been practiced for years for the audit of financial institutions <ref> [BGMW81] </ref>, and is required by law in some countries. But in spite of some recent attempts in this direction, the independent monitoring of financial systems is never done truly on-line [VH91] | which poses a serious threat to the trustworthiness of modern computerized financial systems.
Reference: [Cia91] <author> Paolo Ciancarini. </author> <title> Enacting rule-based software processes with polis. </title> <type> Technical report, </type> <institution> University of Pisa, </institution> <month> october </month> <year> 1991. </year>
Reference-contexts: Conventional approaches to software development do not support such constraints. Although the so called "process oriented environments," such as Marvel [Kai88] and Polis <ref> [Cia91] </ref>, can constrain the process of software development, they do not provide any constraints over the system being developed, and they cannot make their constraints invariant of evolution.
Reference: [Kai88] <author> G. et al. Kaiser. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1988. </year>
Reference-contexts: Conventional approaches to software development do not support such constraints. Although the so called "process oriented environments," such as Marvel <ref> [Kai88] </ref> and Polis [Cia91], can constrain the process of software development, they do not provide any constraints over the system being developed, and they cannot make their constraints invariant of evolution.
Reference: [Min91] <author> N.H. Minsky. </author> <title> Law-governed systems. </title> <journal> The IEE Software Engineering Journal, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: lends itself to independent on-line monitoring. (We confine ourselves to centralized systems, however, avoiding a host of issues involved with the monitoring of distributed systems.) The realization of this model turns out to require a departure from the conventional view of large systems, into what we call law-governed architecture (LGA) <ref> [Min91] </ref>, the essence of which is introduced in Section 3.
Reference: [MP94] <author> N.H. Minsky and P. Pal. </author> <title> Establishing regularity in object-oriented (eiffel) systems. </title> <type> Technical Report LCSR-TR-227, </type> <institution> Rutgers University, LCSR, </institution> <month> June </month> <year> 1994. </year> <booktitle> (Presented at the ECOOP Workshop on Patterns on OO programming, </booktitle> <address> Bologna, </address> <month> July </month> <year> 1994). </year>
Reference-contexts: The actual implementation of auditable systems under the LGA-based software development environment called Darwin-E <ref> [MP94] </ref> is discussed in Section 4. 2 A Model for Auditable Software Pro jects We refer in this paper to an evolving software system as a project. <p> Another regulated interaction is the relation call (f1,c1,f2,c2) which means that routine f1 featured by class c1 contains a call to feature f2 of class c2. These, and other regulated interactions, are discussed in detail in <ref> [MP94] </ref>. The disposition of a given interaction is determined by evaluating the "goal" can t with respect to the the system-part of law L, which is expected to contain appropriate rules. <p> This concept of side-effect-free routines is established by a small set of primitive rules permanently associated with every project under Darwin-E environment, in a manner described in <ref> [MP94] </ref>. The examination by S a of objects in S b by means of SEF-routines is consistent with our principles of auditable systems. But it depends on the existence of such routines in S b .
Reference: [Pal95] <author> P. Pal. </author> <title> Law-governed support for realizing design patterns. </title> <booktitle> In Proceedings of the 17th Conference on Technology of Object-Oriented Languages and Systems(TOOLS-17), </booktitle> <pages> pages 25-34, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: We will see later how the semantics of these properties is established by the law of the project. Our discussion of this architecture in this paper is based on the LGA-based environment called Darwin-E <ref> [Pal95] </ref>, which is an operational specialization of the language-independent Darwin environment to systems written in the object oriented language Eiffel. 3.1 Evolution and its Sublaw A software project J evolves, under Darwin-E, by means of messages sent to various objects that populate the project. <p> Darwin-E supplies methods that can thus be used to create and destroy objects, and to update and observe existing objects. (For details about the methods provided by Darwin-E the reader is referred to <ref> [Pal95] </ref>.) But messages are subject to the law L of the project, or, more precisely, to the evolution-sublaw of L. <p> We now illustrate the structure of such rules, and their effect, by means of two example rules (for a detailed discussion the reader is referred, again, to <ref> [Pal95] </ref>). First, Rule R2 below R2. canDo (S,M,T) :- division (base)@S,division (base)@T. if included in law L, authorizes all messages whose sender and target belong to the base division, thus providing developers with complete access to all objects in the base division. <p> These are what we call monitor update rules, which would govern the monitoring of changes in the system; and the monitor call rules, which would govern the monitoring of call-interaction within a system developed under M. (For the structure of metaRule objects the reader is referred to <ref> [Pal95] </ref>.) Finally, the initial state of M contains a collection of rule-objects, or, simply, rules. Some of these rules are primitive, in the sense that they are present in every project under Darwin-E; they will not be discussed here. The other kind of rules are those designed specifically for M.
Reference: [Sch95] <author> Beth A. Schroeder. </author> <title> On-line monitoring: A tutorial. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 72-78, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: On-line monitoring has been used effectively in various computer systems to facilitate debugging, testing, and performance evaluation and to help protect the security of systems. But the effectiveness of conventional on-line monitoring (see recent review by Schroeder <ref> [Sch95] </ref>) as a confidence building measure is limited by the fact that it is not independent. <p> We will not address this issue here, confining ourselves to sequential systems in this paper. 2 itself <ref> [Sch95] </ref>. But the introduction of such sensors requires a degree of co-operation with the developers of the base system, and may interfere with the operations of that system, contrary to the requirements of independent monitoring. The resolution of this conflict is the focus of this paper.
Reference: [VH91] <author> Miklos A. Vasarhelyi and Fern B. Halper. </author> <title> The continuous audit of online systems. Auditing: </title> <journal> A Journal of Practice and Theory, </journal> <volume> 10(1), </volume> <year> 1991. </year>
Reference-contexts: Independent monitoring has been practiced for years for the audit of financial institutions [BGMW81], and is required by law in some countries. But in spite of some recent attempts in this direction, the independent monitoring of financial systems is never done truly on-line <ref> [VH91] </ref> | which poses a serious threat to the trustworthiness of modern computerized financial systems. Unfortunately, there is a conflict between the concepts of on-line and independent monitoring.
References-found: 8

