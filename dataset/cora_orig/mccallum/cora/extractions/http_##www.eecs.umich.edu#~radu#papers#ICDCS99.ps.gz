URL: http://www.eecs.umich.edu/~radu/papers/ICDCS99.ps.gz
Refering-URL: http://www.eecs.umich.edu/~radu/research/research.html
Root-URL: http://www.eecs.umich.edu
Email: E-mail: fradu,aprakashg@eecs.umich.edu  
Title: Stateful Group Communication Services  
Author: Radu Litiu and Atul Prakash 
Address: Ann Arbor, MI 48109-2122, USA  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: Reliable group multicasts provide a nice abstraction for communicating data reliably among group members and have been used for a variety of applications. In this paper we present Corona, a group communication service for building collaboration tools and reliable data dissemination services in Web-based environments, where clients connect independently of other clients and are not necessarily connected to the group multicast services all the time. The key features of Corona are: (1) the shared state of a group consists of a set of objects shared collectively among group members; (2) Corona supports multiple state transfer policies to accommodate clients with different needs and resources; (3) the communication service provides the current group state or state updates to new clients even when other clients are not available; (4) the service supports persistent groups that tolerate client failures and leaves. We show that the overhead incurred by the multicast service in managing each group's shared state has little impact on the latency seen by the clients or the server throughput. We also show that the multicast service does not have to be aware of the client-specific semantics of the objects in the group's state. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Amir, Y. Amir, and D. Dolev. </author> <title> A Highly Available Application in the Transis Environment. </title> <booktitle> In Proc. of the Workshop on Hardware and Software Architectures for Fault Tolerance, Lecture Notes in Computer Science 774, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: Transis provides a transport layer with a variety of multicast ordering and delivery semantics and it is used primarily in the context of distributed replicated database systems. By having replicated Transis processes, a higher level of fault-tolerance than a single server can achieve has been realized. One Transis-based approach <ref> [1] </ref> to achieve consistent replication suffers from the inefficiencies of using global total ordering with Lamport clocks. Corel [9] addresses this problem and also the fault-tolerance. However, these approaches require consistent membership views and require end-to-end acknowledgments for each message.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication Sub-System for High Availability. </title> <type> Technical Report TR CS91-13, </type> <institution> Computer Science Dept., Hebrew University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Section 5 discusses the current implementation status and presents some performance results. Section 6 presents an evaluation of the implementation and Section 7 concludes the paper with a brief summary of Corona and our future plans. 2 Related Work As transport layer subsystems, ISIS [5, 4], and Transis <ref> [2, 3] </ref> support the notion of process groups, notification of membership changes, and group multicast and may be used to build services such as group awareness and group notification services. Both support a fully replicated architecture with individual members maintaining replicated state.
Reference: [3] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Robust and Efficient Replication using Group Communication. </title> <type> Technical Report TR CS94-20, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Section 5 discusses the current implementation status and presents some performance results. Section 6 presents an evaluation of the implementation and Section 7 concludes the paper with a brief summary of Corona and our future plans. 2 Related Work As transport layer subsystems, ISIS [5, 4], and Transis <ref> [2, 3] </ref> support the notion of process groups, notification of membership changes, and group multicast and may be used to build services such as group awareness and group notification services. Both support a fully replicated architecture with individual members maintaining replicated state.
Reference: [4] <author> K. P. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <journal> Comm. of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Section 5 discusses the current implementation status and presents some performance results. Section 6 presents an evaluation of the implementation and Section 7 concludes the paper with a brief summary of Corona and our future plans. 2 Related Work As transport layer subsystems, ISIS <ref> [5, 4] </ref>, and Transis [2, 3] support the notion of process groups, notification of membership changes, and group multicast and may be used to build services such as group awareness and group notification services. Both support a fully replicated architecture with individual members maintaining replicated state.
Reference: [5] <author> K. P. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight Causal and Atomic Group Multicast. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Section 5 discusses the current implementation status and presents some performance results. Section 6 presents an evaluation of the implementation and Section 7 concludes the paper with a brief summary of Corona and our future plans. 2 Related Work As transport layer subsystems, ISIS <ref> [5, 4] </ref>, and Transis [2, 3] support the notion of process groups, notification of membership changes, and group multicast and may be used to build services such as group awareness and group notification services. Both support a fully replicated architecture with individual members maintaining replicated state.
Reference: [6] <author> N. Fredrickson and N. Lynch. </author> <title> Electing a Leader in a Synchronous Ring. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 98-115, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Alternatively, one of the election algorithms existing in the literature <ref> [7, 6] </ref> may be used in case of a coordinator crash to select a new coordinator. In case of a network partition, there will ultimately exist two subsets of the server set which run without having knowledge about each other.
Reference: [7] <author> H. Garcia-Molina. </author> <title> Elections in a Distributed Computing System. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-31(1):48-59, </volume> <month> Jan. </month> <year> 1982. </year> <month> 11 </month>
Reference-contexts: Alternatively, one of the election algorithms existing in the literature <ref> [7, 6] </ref> may be used in case of a coordinator crash to select a new coordinator. In case of a network partition, there will ultimately exist two subsets of the server set which run without having knowledge about each other.
Reference: [8] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: However, these approaches require consistent membership views and require end-to-end acknowledgments for each message. Horus [17] achieves consistent and fault-tolerant data replication by implementing the virtually synchronous process group, in which all processes receive consistent information about the group membership in the form of views. Based on x-kernel <ref> [8] </ref> and Psync (a group-oriented atomic multicast protocol that preserves the partial/causal order of messages)[11], Consul [12] implements the replicated state machine approach to provide a collection of fault-tolerant services for building distributed applications.
Reference: [9] <author> I. Keidar. </author> <title> A Highly Available Paradigm for Consistent Object Replication. </title> <type> In Master's Thesis, </type> <institution> Institute for Computer Science, The Hebrew University of Jerusalem, </institution> <year> 1994. </year>
Reference-contexts: By having replicated Transis processes, a higher level of fault-tolerance than a single server can achieve has been realized. One Transis-based approach [1] to achieve consistent replication suffers from the inefficiencies of using global total ordering with Lamport clocks. Corel <ref> [9] </ref> addresses this problem and also the fault-tolerance. However, these approaches require consistent membership views and require end-to-end acknowledgments for each message.
Reference: [10] <author> B. Liskov and R. Ladin. </author> <title> Highly-Available Distributed Services and Fault-Tolerant Distributed Garbage Collection. </title> <booktitle> In Proceedings of the Fifth ACM Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 29-39, </pages> <address> Calgary, Canada, </address> <year> 1986. </year>
Reference-contexts: For each group, the server which created the group acts as the primary provider of the group state. If this server goes down, a new server becomes primary for that group. 4.3 Fault tolerance Several approaches to the design of fault-tolerant replicated systems exist <ref> [16, 10] </ref>, depending on the failure assumptions. We assume the fail-stop fault model. The solution we propose is similar to the state-machine model in the sense that multiple sites maintain the shared state and provide services simultaneously.
Reference: [11] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Implementing Fault-Tolerant Replicated Objects Using Psync. </title> <booktitle> In Proc. of IEEE 8th. Symp. on Reliable Distributed Systems, </booktitle> <pages> pages 42-52, </pages> <address> Seattle, WA, </address> <month> Oct. </month> <year> 1989. </year>
Reference: [12] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <journal> Distributed Systems Engineeering Journal, </journal> <volume> 1(2) </volume> <pages> 87-103, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Based on x-kernel [8] and Psync (a group-oriented atomic multicast protocol that preserves the partial/causal order of messages)[11], Consul <ref> [12] </ref> implements the replicated state machine approach to provide a collection of fault-tolerant services for building distributed applications. Lotus' NSTP [14] advocates centralized management of shared state; the semantics of shared state is client-based so that the services provided are generalized to a wide range of applications.
Reference: [13] <author> S. Mittra. Iolus: </author> <title> A framework for scalable secure multicasting. </title> <booktitle> In Proceedings of the ACM SIGCOMM '97, </booktitle> <address> Atlanta, Georgia, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: This architecture is similar with the solution proposed by Iolus <ref> [13] </ref> to address the scalability problems of secure multicast and multicast key management, based on the notion of a secure distribution tree composed of multiple smaller secure multicast subgroups arranged in a hierarchy. Server ServerServer Coordinator A C EE GB F D represent different shared states.
Reference: [14] <author> J. F. Patterson, M. Day, and J. Kucan. </author> <title> Notification Servers for Synchronous Groupware. </title> <booktitle> In Proc. of the Sixth ACM Conference on Computer-Supported Cooperative Work. </booktitle> <publisher> ACM Press, </publisher> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Based on x-kernel [8] and Psync (a group-oriented atomic multicast protocol that preserves the partial/causal order of messages)[11], Consul [12] implements the replicated state machine approach to provide a collection of fault-tolerant services for building distributed applications. Lotus' NSTP <ref> [14] </ref> advocates centralized management of shared state; the semantics of shared state is client-based so that the services provided are generalized to a wide range of applications.
Reference: [15] <author> A. Prakash and H. Shim. DistView: </author> <title> Support for Building Efficient Collaborative Applications using Replicated Objects. </title> <booktitle> In Proc. of the Fifth ACM Conf. on Computer Supported Cooperative Work, </booktitle> <pages> pages 153-164, </pages> <address> Chapel-Hill, NC, </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The identifier of a shared object is used to uniquely identify the object in S and may be automatically generated by a support system for building collaborative applications such as the DistView toolkit <ref> [15] </ref>. Note that the state of a shared object is type-independent. A shared object should be able to write its internal state to a stream as well as to set its state to the data encoded in a stream upon request.
Reference: [16] <author> F. B. Schneider. </author> <title> Implementing Fault-Tolerant Services using the State-Machine Approach. </title> <journal> ACM Computing Surveys, </journal> <volume> 22, </volume> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: For each group, the server which created the group acts as the primary provider of the group state. If this server goes down, a new server becomes primary for that group. 4.3 Fault tolerance Several approaches to the design of fault-tolerant replicated systems exist <ref> [16, 10] </ref>, depending on the failure assumptions. We assume the fail-stop fault model. The solution we propose is similar to the state-machine model in the sense that multiple sites maintain the shared state and provide services simultaneously.
Reference: [17] <author> R. van Renesse, K.P. Birman, and S. Maffeis. Horus, </author> <title> a flexible Group Communication System. </title> <journal> Communications of the ACM, </journal> <month> Apr. </month> <year> 1996. </year> <month> 12 </month>
Reference-contexts: One Transis-based approach [1] to achieve consistent replication suffers from the inefficiencies of using global total ordering with Lamport clocks. Corel [9] addresses this problem and also the fault-tolerance. However, these approaches require consistent membership views and require end-to-end acknowledgments for each message. Horus <ref> [17] </ref> achieves consistent and fault-tolerant data replication by implementing the virtually synchronous process group, in which all processes receive consistent information about the group membership in the form of views.
References-found: 17

