URL: ftp://ftp.cs.utexas.edu/pub/darshan/delhi95.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/darshan/abstracts/abstracts.html
Root-URL: 
Title: Fully Asynchronous, Robust, High-throughput Arithmetic Structures  
Author: P. Patra and D. S. Fussell 
Address: Austin, TX 78712-1188, USA  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: This paper presents some novel circuit designs for bit serial adders and multipliers built out of some unusual, but well-defined, circuit primitives. The circuits are fully delay-insensitive, provide good reliability and speed, and are easily verified. The structures are flexible and handle inputs of arbitrary lengths while being asymptotically optimal in speed and area. The scalability of these circuits makes them very attractive for applications such as RSA cryptosystems which need very large operands and fast multiplication. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jo C. Ebergen. </author> <title> A formal approach to designing delay-insensitive circuits. </title> <journal> Distributed Computing, </journal> <volume> 5(3) </volume> <pages> 107-119, </pages> <year> 1991. </year>
Reference-contexts: following operations on trace structures: `pref' is prefix-closure; `;' is sequential composition, but often we will use mere juxtaposition to denote sequential composition. `k' is parallel composition; `j' is non-deterministic choice, and `?' is the Kleene-closure on appropriate trace-structures. (For a good introduction to trace theory for specifying circuits, see <ref> [1] </ref>.) We very often use the J oin primitives.
Reference: [2] <author> Rodney M. Goodman and Anthony J. McAuley. </author> <title> An efficient asynchronous multiplier. </title> <editor> In K. Bromley, S.- Y. Kung, and E. Swartzlander, editors, </editor> <booktitle> Proceedings of the Second International Conference on Systolic Arrays, </booktitle> <pages> pages 593-599. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1988. </year>
Reference-contexts: The numbers involved are usually quite large (e.g. 1024 bits long) to make decryption without the private key compu-tationally infeasible. A high-throughput and scalable multiplier for very wide operands, which make their parallel implementations impracticable, is highly desirable for, e.g., RSA cryptosystems <ref> [2, 12] </ref>. To reduce the area requirements of pure DI circuits, many researchers and practitioners ([5, 10]) introduce timing assumptions such as isochronic forks, bundled-data constraints, etc. or even perform timing simulations to control delays in various circuit paths in line with traditional asynchronous design methods.
Reference: [3] <author> Jaco Haans, Kees van Berkel, Ad Peeters, and Frits Schalij. </author> <title> Asynchronous multipliers as combinational handshake circuits. </title> <editor> In S. Furber and M. Edwards, editors, </editor> <title> Asynchronous Design Methodologies, </title> <journal> volume A-28 of IFIP Transactions, </journal> <pages> pages 149-163. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1993. </year>
Reference: [4] <author> M.B. Josephs and P. Patra. </author> <title> An asynchronous bit-serial adder and its delay-insensitive decomposition. </title> <type> Technical report, </type> <institution> Oxford University Computing Lab., Oxford, </institution> <year> 1992. </year> <type> Unpublished Manuscript. </type>
Reference-contexts: The behavior remains delay insensitive as long as at most one input transition occurs at a time.) <ref> [4] </ref> provides a formal verification of this Adder using DI Algebra. For our purposes, you may recall the behavior of a J oin primitive and manually trace the signals to satisfy yourself that EqualizeAB and AddEqual operate as described above. <p> Moreover, there are no CAD tools available yet to assist in low-level optimization of the asynchronous circuits presented here. This leaves a lot open for future research. Acknowledgements The first author thanks Mark Josephs for encouragement and for providing the Adder circuit's algebraic verification in the unpublished joint work <ref> [4] </ref>.
Reference: [5] <author> Alain J. Martin, Steven M. Burns, T. K. Lee, Drazen Borkovic, and Pieter J. Hazewindus. </author> <title> The design of an asynchronous microprocessor. </title> <editor> In Charles L. Seitz, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the Decennial Caltech Conference on VLSI, </booktitle> <pages> pages 351-373. </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference: [6] <author> Anthony J. McAuley. </author> <title> Four state asynchronous architectures. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(2) </volume> <pages> 129-142, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: 1 Introduction and previous work While most digital circuits to date have been designed as synchronous, clocked systems, there has recently been a surge of interest in asynchronous circuits, mainly due to the potential and realized advantages of asynchronous circuits for modern low-power computing and communication applications <ref> [6] </ref>. The class of "delay-insensitive (DI) circuits" circuits whose external behaviors make no explicit reference to time and are independent of any (non-negative) delays in their internal components and wires is a subclass of the class of asynchronous circuits. <p> We use a simple gray-coding of data, different from that suggested in <ref> [6] </ref>: The value 1 or 0 is associated permanently with one or the other wire of the pair of data wires in a channel. For example, a transition on wire A 1 (A 0 ) indicates a 1 (0) value on channel A.
Reference: [7] <author> P. Patra and D.S. Fussell. </author> <title> Efficient building blocks for delay insensitive circuits. </title> <booktitle> In Proc. of International Symposium on Advanced Research in Asynchronous Circuits and Systems, </booktitle> <month> November </month> <year> 1994. </year> <note> (To appear). </note>
Reference: [8] <author> P. Patra and D.S. Fussell. </author> <title> Optimization of delay-insensitive circuits a case study. </title> <type> Technical report, </type> <institution> Dept. of Computer Sciences, The Univ of Texas at Austin, </institution> <year> 1994. </year>
Reference: [9] <author> S.G. Smith and P. B. Denyer. </author> <title> Serial Data Computation. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference: [10] <author> Ivan E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 720-738, </pages> <month> June </month> <year> 1989. </year>
Reference: [11] <author> Jan Tijmen Udding. </author> <title> A formal model for defining and classifying delay-insensitive circuits. </title> <journal> Distributed Computing, </journal> <volume> 1(4) </volume> <pages> 197-204, </pages> <year> 1986. </year>
Reference-contexts: A delay-insensitive design discipline requires that a second signal is not sent along a wire (or channel) until its predecessor has been acknowledged <ref> [11] </ref>. This class holds a great potential for low-power applications as well due to factors such as (1) absence of global clock trees to be powered, and (2) the computations or signal activity being driven by `useful-only' transition events (so, CMOS circuits use little energy when quiescent).
Reference: [12] <author> I-Chen Wu. </author> <title> A fast 1-d serial parallel systolic multiplier. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36:1243-1247, </volume> <month> Oct </month> <year> 1987. </year>
Reference-contexts: The numbers involved are usually quite large (e.g. 1024 bits long) to make decryption without the private key compu-tationally infeasible. A high-throughput and scalable multiplier for very wide operands, which make their parallel implementations impracticable, is highly desirable for, e.g., RSA cryptosystems <ref> [2, 12] </ref>. To reduce the area requirements of pure DI circuits, many researchers and practitioners ([5, 10]) introduce timing assumptions such as isochronic forks, bundled-data constraints, etc. or even perform timing simulations to control delays in various circuit paths in line with traditional asynchronous design methods.
References-found: 12

