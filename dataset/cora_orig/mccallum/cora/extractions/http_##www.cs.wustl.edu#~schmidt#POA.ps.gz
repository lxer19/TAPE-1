URL: http://www.cs.wustl.edu/~schmidt/POA.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/corba-research-design.html
Root-URL: 
Email: firfan,schmidtg@cs.wustl.edu  
Title: An Overview of the CORBA Portable Object Adapter an integral part of the Common Object
Author: Irfan Pyarali and Douglas C. Schmidt 
Note: An Object Adapter is  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: This paper will appear in a special issue of the ACM Stan-dardView magazine on CORBA. Abstract This paper provides two contributions to the study of Object Adapters. First, it outlines the CORBA Portable Object Adapter (POA) specification, which is a recent addition to the CORBA standard that greatly simplifies the development of portable and extensible servants and server applications. The design goals, architectural components, and semantics of the POA are explained. Second, the paper describes the design choices made to adapt the POA for the TAO Real-time ORB. Key design issues regarding efficient demultiplexing, up-call and collocation optimizations, ORB and POA concur-rency configurations, POA synchronization, and predictability are covered. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: 1 Introduction The Common Object Request Broker Architecture (CORBA) <ref> [1] </ref> is an emerging standard for distributed object computing (DOC) middleware. DOC middleware resides between clients and servers, simplifying application development by providing a uniform view of heterogeneous network and OS layers. At the heart of DOC middleware are Object Request Brokers (ORBs), such as CORBA [1], DCOM [2], and Java <p> Request Broker Architecture (CORBA) <ref> [1] </ref> is an emerging standard for distributed object computing (DOC) middleware. DOC middleware resides between clients and servers, simplifying application development by providing a uniform view of heterogeneous network and OS layers. At the heart of DOC middleware are Object Request Brokers (ORBs), such as CORBA [1], DCOM [2], and Java RMI [3]. fl This work was supported in part by Boeing, CDI, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and US Sprint. <p> ORB Core: When a client invokes an operation on a servant, the ORB Core is responsible for delivering the request to the servant and returning a response, if any, to the client. For servants executing remotely, a CORBA-compliant <ref> [1] </ref> ORB Core communicates via the Internet Inter-ORB Protocol (IIOP), which is a version of the General Inter-ORB Protocol (GIOP) that runs atop the TCP transport protocol. An ORB Core is typically implemented as a run-time library linked into client and server applications. <p> Likewise, servers need not know if clients use the DII or SII to invoke requests. Object Adapter: An Object Adapter associates a servant with an ORB, demultiplexes incoming requests to the servant, and dispatches the appropriate operation upcall on that servant. Recent CORBA portability enhancements <ref> [1] </ref> define the Portable Object Adapter (POA), which supports multiple nested POAs per ORB. Object Adapters make it possible for 1 The OMG has recently standardized an asynchronous method invocation interface, as well. 2 an ORB to support various types of servants that possess sim-ilar requirements. <p> Object Adapters cooperate with the communication mechanisms in the ORB Core and underlying OS to ensure that the information necessary to reach an object is present in the object reference. (IOR), which supports the Internet Inter-ORB Protocol (IIOP) <ref> [1] </ref>. An IOR contains the IIOP version, host name, and port number that identifies a communication endpoint for the server process; some means to ensure uniqueness for certain types of IORs, e.g., timestamps for transient IORs; the identity of the Object Adapter; and the identity of the CORBA object.
Reference: [2] <author> D. </author> <title> Box, Essential COM. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1997. </year>
Reference-contexts: DOC middleware resides between clients and servers, simplifying application development by providing a uniform view of heterogeneous network and OS layers. At the heart of DOC middleware are Object Request Brokers (ORBs), such as CORBA [1], DCOM <ref> [2] </ref>, and Java RMI [3]. fl This work was supported in part by Boeing, CDI, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and US Sprint.
Reference: [3] <author> A. Wollrath, R. Riggs, and J. Waldo, </author> <title> A Distributed Object Model for the Java System, </title> <booktitle> USENIX Computing Systems, </booktitle> <volume> vol. 9, </volume> <month> November/December </month> <year> 1996. </year>
Reference-contexts: DOC middleware resides between clients and servers, simplifying application development by providing a uniform view of heterogeneous network and OS layers. At the heart of DOC middleware are Object Request Brokers (ORBs), such as CORBA [1], DCOM [2], and Java RMI <ref> [3] </ref>. fl This work was supported in part by Boeing, CDI, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and US Sprint.
Reference: [4] <institution> Object Management Group, </institution> <note> Specification of the Portable Object Adapter (POA), OMG Document orbos/97-05-15 ed., </note> <month> June </month> <year> 1997. </year>
Reference-contexts: Thus, ORBs facilitate the development of flexible distributed applications and reusable services in heterogeneous distributed environments. The Portable Object Adapter (POA) specification <ref> [4] </ref> is an important new component that the OMG has defined for the CORBA standard. The POA is an integral part of the server-side of the CORBA reference model. It allows developers to construct CORBA server applications that are portable between heterogeneous ORB implementations [5]. <p> This paper is organized as follows: Section 2 gives an overview of the CORBA architecture and shows how the Object Adapter fits into this architecture; Section 3 describes the functionality provided by a CORBA Object Adapter and introduces the POA <ref> [4] </ref>; Section 4 outlines the designed goals of the POA as specified by the OMG; Section 5 presents an overview of the POA architecture; Section 6 illustrates the key interactions and collaborations of POA components; Section 7 discusses the POA features necessary for a Real-time ORB; and Section 8 presents concluding <p> The skeleton then passes the demarshaled arguments as parameters to the intended servant operation. 3.2 Portable Object Adapter (POA) The Portable Object Adapter (POA) is a standard component in the CORBA model recently specified by the OMG <ref> [4] </ref>. The POA allows programmers to construct servants that are portable between different ORB implementations. Portability is achieved by standardizing the skeletons classes produced by the IDL compiler, as well as the interactions between the servants and the Object Adapter. The POA's predecessor was the Basic Object Adapter (BOA).
Reference: [5] <author> D. C. Schmidt and S. Vinoski, </author> <title> Object Adapters: Concepts and Terminology, </title> <journal> C++ Report, </journal> <volume> vol. 11, </volume> <month> November/December </month> <year> 1997. </year>
Reference-contexts: The POA is an integral part of the server-side of the CORBA reference model. It allows developers to construct CORBA server applications that are portable between heterogeneous ORB implementations <ref> [5] </ref>.
Reference: [6] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: as specified by the OMG; Section 5 presents an overview of the POA architecture; Section 6 illustrates the key interactions and collaborations of POA components; Section 7 discusses the POA features necessary for a Real-time ORB; and Section 8 presents concluding remarks. 2 CORBA Architecture CORBA Object Request Brokers (ORBs) <ref> [6] </ref> allow clients to invoke operations on distributed objects without concern for: Object location: CORBA objects can be co-located with the client or distributed on a remote server, without affecting their implementation or use.
Reference: [7] <author> E. Eide, K. Frei, B. Ford, J. Lepreau, and G. Lindstrom, </author> <month> Flick: </month>
Reference-contexts: IDL Compiler: An IDL compiler automatically transforms OMG IDL definitions into an application programming language like C++ or Java. In addition to providing language transparency, IDL compilers eliminate common sources of network programming errors and provide opportunities for automated compiler optimizations <ref> [7] </ref>. Dynamic Invocation Interface (DII): The DII allows clients to generate requests at run-time. This flexibility is useful when an application has no compile-time knowledge of the interface it is accessing.
References-found: 7

