URL: ftp://ftp.cs.man.ac.uk/pub/IPG/sw93a.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Author: Jin Sa and Brian C. Warboys 
Keyword: Software Process Example  
Web: ISPW-6  
Note: A Formal Description of the  
Address: Manchester M13 9PL, England  
Affiliation: Department of Computer Science University of Manchester  
Pubnum: Technical Report Series UMCS-93-6-1  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Bandinelli, A.Fuggetta and C. Ghezzi, </author> <title> "SLANG Solution for the ISPW-7 Software Process Example", </title> <month> October, </month> <year> 1991. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A [24], EPOS [7], GRAPPLE [13], MASP/DL, Merlin [20], PROCESS WEAVER [5], SEI's approach [15], SLANG <ref> [1] </ref> and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [2] <author> S. Bandinelli, A.Fuggetta, C. Ghezzi and S. Grigolli, </author> <title> "Process Enactment in SPADE", </title> <booktitle> Proceedings of the 2nd European Workshop, </booktitle> <address> EWSPT'92, Trondheim, Norway, </address> <month> September </month> <year> 1992, </year> <note> LNCS 635. 28 </note>
Reference-contexts: 1 Introduction There has been an increasing research interest in software process modelling. Many different approaches have been developed in this field, for example, PML [25], Adele2 [3], SPELL [6], PROCESS WEAVER [9], AP5 [11], STATEMATE [14] and SLANG <ref> [2] </ref>. It was thought that in order to compare and contrast the different approaches, it would be useful if a common problem were used to demonstrate the different approaches. Therefore an example was defined for such purpose at the sixth International Software Process Workshop.
Reference: [3] <author> N. Belkhatir, J. Estublier and w.L. Melo, </author> <title> "ADELE2:a Support to Large Software Development Process", </title> <booktitle> Proceedings of the First International Conference on the Software Process, </booktitle> <month> October, </month> <year> 1991. </year>
Reference-contexts: 1 Introduction There has been an increasing research interest in software process modelling. Many different approaches have been developed in this field, for example, PML [25], Adele2 <ref> [3] </ref>, SPELL [6], PROCESS WEAVER [9], AP5 [11], STATEMATE [14] and SLANG [2]. It was thought that in order to compare and contrast the different approaches, it would be useful if a common problem were used to demonstrate the different approaches.
Reference: [4] <author> N. Belkhatir, J. Estublier and w.L. Melo, </author> <title> "Software Process Modeling in Adele: The ISPW-7 Example", </title> <month> October, </month> <year> 1991. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A [24], EPOS [7], GRAPPLE [13], MASP/DL, Merlin [20], PROCESS WEAVER [5], SEI's approach [15], SLANG [1] and Adele <ref> [4] </ref>. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [5] <author> M. </author> <title> Bourdon, "PROCESS WEAVER: Process Modelling Experience Report", </title> <type> Technical Report Series TR 92014, </type> <institution> Cap Gemini Innovation, </institution> <year> 1992. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A [24], EPOS [7], GRAPPLE [13], MASP/DL, Merlin [20], PROCESS WEAVER <ref> [5] </ref>, SEI's approach [15], SLANG [1] and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [6] <author> R. Conradi, et al., </author> <title> "Design, Use and Implementation of SPELL, a Language for Software Process Modeling and Evolution", </title> <booktitle> Proceeding of the second European Workshop, </booktitle> <address> EWSPT'92, Trondheim, Norway, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction There has been an increasing research interest in software process modelling. Many different approaches have been developed in this field, for example, PML [25], Adele2 [3], SPELL <ref> [6] </ref>, PROCESS WEAVER [9], AP5 [11], STATEMATE [14] and SLANG [2]. It was thought that in order to compare and contrast the different approaches, it would be useful if a common problem were used to demonstrate the different approaches.
Reference: [7] <author> R. Conradi, et al., </author> <title> "The EPOS Approach to the ISPW-7 Software Process Modeling Example", </title> <month> October, </month> <year> 1991. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A [24], EPOS <ref> [7] </ref>, GRAPPLE [13], MASP/DL, Merlin [20], PROCESS WEAVER [5], SEI's approach [15], SLANG [1] and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [8] <author> B. Curtis, M.I. Kellner and J. </author> <title> Over, "Process Modelling", </title> <journal> Communication of ACM, </journal> <volume> Volume 35, Number 9, </volume> <month> September, </month> <year> 1992. </year>
Reference-contexts: Usually the operation pattern for a step object consists of a few receive operations, followed by, possibly an iteration of, the step operation and followed by a few supply operations. 1 The term artifact is used in accordance with the definitions given in <ref> [8] </ref> and [18]. Artifacts mean both input and output data for steps. 5 5.3 Input and Output flows In the ISPW-6 example, the scopes of the data are not explicitly described.
Reference: [9] <author> C. Fernstrom, </author> <title> "PROCESS WEAVER: Adding Process Support to UNIX", </title> <booktitle> Proceedings of the Second International Conference on the Software Process, </booktitle> <address> Berlin, Germany, </address> <month> February, </month> <year> 1993. </year>
Reference-contexts: 1 Introduction There has been an increasing research interest in software process modelling. Many different approaches have been developed in this field, for example, PML [25], Adele2 [3], SPELL [6], PROCESS WEAVER <ref> [9] </ref>, AP5 [11], STATEMATE [14] and SLANG [2]. It was thought that in order to compare and contrast the different approaches, it would be useful if a common problem were used to demonstrate the different approaches.
Reference: [10] <author> M. </author> <type> Greenwood, </type> <institution> "BM stepper", Department of Electronics and Computer Science, The University of Southampton, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Our future work will concentrate mainly on the issue of process change. The other aspect of this work that we are currently developing is a simulation facility which allows us to step through the operation patterns of the objects. A prototype version <ref> [10] </ref> of this stepping through facility has been implemented using Enact [12]. Early experiments with it have confirmed its significance in the construction of a specification in the sense that the modellers are able to gain much more confidence than simply reading the specifications. <p> An enactment model of the ISPW-6 example has also been implemented in a process modelling language [19]. Rigorous checking of the enactment model against the BM specification has been performed using the stepping through facility <ref> [10] </ref>. 18 A BM Specification of the ISPW-6 Software Process Example A.1 Identify the Agent Objects The following table lists all the agent objects in the example.
Reference: [11] <author> N. Goldman and K. Narayanaswamy, </author> <title> "Solution to ISPW-7 Process Example", </title> <month> October, </month> <year> 1991. </year>
Reference-contexts: 1 Introduction There has been an increasing research interest in software process modelling. Many different approaches have been developed in this field, for example, PML [25], Adele2 [3], SPELL [6], PROCESS WEAVER [9], AP5 <ref> [11] </ref>, STATEMATE [14] and SLANG [2]. It was thought that in order to compare and contrast the different approaches, it would be useful if a common problem were used to demonstrate the different approaches. Therefore an example was defined for such purpose at the sixth International Software Process Workshop. <p> Existing solutions include: AP5 <ref> [11] </ref>, APPL/A [24], EPOS [7], GRAPPLE [13], MASP/DL, Merlin [20], PROCESS WEAVER [5], SEI's approach [15], SLANG [1] and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [12] <author> P. Henderson, </author> <title> "Enact:a functional, object-oriented modelling language", Reference Manual, </title> <institution> Department of Electronics and Computer Science, University of Southampton, July,1992. </institution>
Reference-contexts: The other aspect of this work that we are currently developing is a simulation facility which allows us to step through the operation patterns of the objects. A prototype version [10] of this stepping through facility has been implemented using Enact <ref> [12] </ref>. Early experiments with it have confirmed its significance in the construction of a specification in the sense that the modellers are able to gain much more confidence than simply reading the specifications. An enactment model of the ISPW-6 example has also been implemented in a process modelling language [19].
Reference: [13] <author> K.E. </author> <title> Huff "ISPW-7 Process Example in GRAPPLE", </title> <month> October, </month> <year> 1991. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A [24], EPOS [7], GRAPPLE <ref> [13] </ref>, MASP/DL, Merlin [20], PROCESS WEAVER [5], SEI's approach [15], SLANG [1] and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [14] <author> M. Kellner, </author> <title> "Representation Formalisms for Software Process Modeling", </title> <booktitle> Proceeding of the 4th International Software Process Workshop: Representing and Enacting the Software Process, ACM Software Engineering Notes 14(4), </booktitle> <month> June, </month> <year> 1989. </year>
Reference-contexts: 1 Introduction There has been an increasing research interest in software process modelling. Many different approaches have been developed in this field, for example, PML [25], Adele2 [3], SPELL [6], PROCESS WEAVER [9], AP5 [11], STATEMATE <ref> [14] </ref> and SLANG [2]. It was thought that in order to compare and contrast the different approaches, it would be useful if a common problem were used to demonstrate the different approaches. Therefore an example was defined for such purpose at the sixth International Software Process Workshop.
Reference: [15] <author> M.I. Kellner, </author> <title> "Solution to the ISPW-7 Software Process Example", </title> <address> Octo-ber, </address> <year> 1991. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A [24], EPOS [7], GRAPPLE [13], MASP/DL, Merlin [20], PROCESS WEAVER [5], SEI's approach <ref> [15] </ref>, SLANG [1] and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [16] <author> M. Kellner, P.Feiler, A. Finkelstein, T. Katayama, L. Osterweil, M. Penedo and H.D.Rombach, </author> <title> "ISPW-6 Software Process Example", </title> <booktitle> Proceedings of the First International Conference on Software Process. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC, </address> <year> 1991. </year> <month> 29 </month>
Reference-contexts: During the software process, the following steps may be taken by various personnel: Schedule and Assign Tasks, Modify Design, Review Design, Modify Code, Modify Test Plans, Modify Unit Test Package, Test Unit and Monitor Progress. A full description of the example is given in <ref> [16] </ref>. 3 Overview of BM BM [21] is a specification method aimed at the specification of concurrent object-based systems. 3.1 General Concepts In BM, a system is considered to be composed of components which may be executed in parallel. <p> requirement change to step object SAT reqtoSAT authorization to step object SAT authtoSAT Notification of cancellation to PM cantoPM cancellation to MP cantoMP 9 * identify the receive operations None * identify the step interface operations None * define the operation pattern The description of the ISPW-6 example given in <ref> [16] </ref> does not mention the constraints on the operations of CCB . Therefore the operation pattern is not defined here. * define each operation The precise definitions of the three supply operations are not significantly relevant to the objectives of this report, and therefore they are not defined here.
Reference: [17] <author> P.H. Feiler, </author> <title> WS Humphrey: "Software Process Development And Enact--ment: Concepts And Definitions", </title> <booktitle> Proceedings of the second International Conference on Software Process 1993. </booktitle>
Reference: [18] <author> J. Lonchamp, </author> <title> "A Structured Conceptual and Terminological Framework for Software Process Engineering", </title> <booktitle> Proceedings of the Second International Conference on the Software Process, </booktitle> <address> Berlin, Germany, </address> <month> February, </month> <year> 1993. </year>
Reference-contexts: Usually the operation pattern for a step object consists of a few receive operations, followed by, possibly an iteration of, the step operation and followed by a few supply operations. 1 The term artifact is used in accordance with the definitions given in [8] and <ref> [18] </ref>. Artifacts mean both input and output data for steps. 5 5.3 Input and Output flows In the ISPW-6 example, the scopes of the data are not explicitly described.
Reference: [19] <author> I. Robertson and M. Greenwood, </author> <title> "The Implementation of the ISPW-6 Example in PWI", </title> <institution> Department of Computer Science, University of Manch-ester, </institution> <month> May, </month> <year> 1993. </year>
Reference-contexts: Early experiments with it have confirmed its significance in the construction of a specification in the sense that the modellers are able to gain much more confidence than simply reading the specifications. An enactment model of the ISPW-6 example has also been implemented in a process modelling language <ref> [19] </ref>. Rigorous checking of the enactment model against the BM specification has been performed using the stepping through facility [10]. 18 A BM Specification of the ISPW-6 Software Process Example A.1 Identify the Agent Objects The following table lists all the agent objects in the example.
Reference: [20] <author> B. Peuschel and W. Schaffer, "ISPW-7 Exerise Solution", </author> <month> October, </month> <year> 1991. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A [24], EPOS [7], GRAPPLE [13], MASP/DL, Merlin <ref> [20] </ref>, PROCESS WEAVER [5], SEI's approach [15], SLANG [1] and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [21] <author> J. Sa, B. C. Warboys, </author> <title> "Specifying Concurrent Object-based Systems using Combined Specification Notations", </title> <type> Technical Report Series UMCS-91-9-2, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> July, </month> <year> 1991. </year>
Reference-contexts: A full description of the example is given in [16]. 3 Overview of BM BM <ref> [21] </ref> is a specification method aimed at the specification of concurrent object-based systems. 3.1 General Concepts In BM, a system is considered to be composed of components which may be executed in parallel. <p> A component may only communicate with another component by calling the operations of the other component. 3.2 Underlying Model The semantics of BM constructs are defined using a linear time temporal logic. A brief overview of the underlying model is described below. A detailed definition is given in <ref> [21] </ref>. The behaviour of a component is defined as the set of all the possible execution sequences of the component. An execution sequence of a component is a sequential 2 combination of its operation sequences. An operation sequence is a sequence of events.
Reference: [22] <author> J. Sa, </author> <title> "BM Specification of the Surrey Project PSS Demonstration Model", </title> <type> Draft Note, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> February, </month> <year> 1992. </year>
Reference-contexts: In this report we shall model the ISPW-6 example using a method called BM which was developed as a specification method for concurrent object-based systems at the University of Manchester. Details of BM are described in <ref> [22] </ref>. An initial study of the feasibility of the BM application to process modelling was carried out and reported in [23]. This report further investigates the suitability of BM to software process modelling.
Reference: [23] <author> J. Sa, B. C. Warboys, </author> <title> "Integrating a Formal Specification Method with PML: A Case Study", </title> <booktitle> Lecture Notes in Computer Science 635, </booktitle> <pages> page 106-123, </pages> <publisher> Springer-Verlag, </publisher> <month> September, </month> <year> 1992. </year>
Reference-contexts: Details of BM are described in [22]. An initial study of the feasibility of the BM application to process modelling was carried out and reported in <ref> [23] </ref>. This report further investigates the suitability of BM to software process modelling. In this report, instead of simply providing a BM description of the ISPW-6 example, a method for modelling the example in BM is first of all defined.
Reference: [24] <author> S.M. Sutton, Jr., </author> <title> "APPL/A Solution for the ISPW7 Coordination and Communication Problem", </title> <month> October, </month> <year> 1991. </year>
Reference-contexts: Existing solutions include: AP5 [11], APPL/A <ref> [24] </ref>, EPOS [7], GRAPPLE [13], MASP/DL, Merlin [20], PROCESS WEAVER [5], SEI's approach [15], SLANG [1] and Adele [4]. In some of the above mentioned approaches, agents are modelled as variables, parameters or attributes which can be bound to different steps from time to time.
Reference: [25] <author> B.C. Warboys, </author> <title> "The ISPE2.5 Project: Process Modelling as the basis for a Support Environment", </title> <booktitle> Proceedings of the first International Conference on Software Development, Environments and Factories, </booktitle> <address> Berlin, </address> <year> 1989. </year> <month> 30 </month>
Reference-contexts: 1 Introduction There has been an increasing research interest in software process modelling. Many different approaches have been developed in this field, for example, PML <ref> [25] </ref>, Adele2 [3], SPELL [6], PROCESS WEAVER [9], AP5 [11], STATEMATE [14] and SLANG [2]. It was thought that in order to compare and contrast the different approaches, it would be useful if a common problem were used to demonstrate the different approaches.
References-found: 25

