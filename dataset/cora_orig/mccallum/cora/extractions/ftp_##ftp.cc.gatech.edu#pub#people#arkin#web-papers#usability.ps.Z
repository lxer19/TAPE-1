URL: ftp://ftp.cc.gatech.edu/pub/people/arkin/web-papers/usability.ps.Z
Refering-URL: http://www.cs.gatech.edu/aimosaic/robot-lab/mrl-online-publications.html
Root-URL: 
Email: arkin@cc.gatech.edu  
Title: Evaluating the Usability of Robot Programming Toolsets  
Author: Douglas C. MacKenzie doug@mobile-intelligence.com Ronald C. Arkin 
Date: October 14, 1997  
Address: Georgia Tech  
Affiliation: Mobile Intelligence Corp., and Georgia Tech  College of Computing  
Abstract: The days of specifying missions for mobile robots using traditional programming languages such as C++ and LISP are coming to an end. The need to support operators lacking programming skills coupled with the increasing diversity of robot run-time operating systems is moving the field towards high-level robot programming toolsets which allow graphical mission specification. This paper explores the issues of evaluating such toolsets as to their usability. This article first examines how usability criteria are established and performance target values chosen. The methods by which suitable experiments are created to gather data relevant to the usability criteria are then presented. Finally, methods to analyze the data gathered to establish values for the usability criteria are discussed. The MissionLab toolset is used as a concrete example throughout the article to ground the discussions, but the methods and techniques are generalizable to many such systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.C. Arkin. </author> <title> Motor schema-based mobile robot navigation. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 8(4) </volume> <pages> 92-112, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life. <p> The process of retargeting a configuration when hardware requirements change is thus eased. MissionLab currently possesses the ability to generate code for either the ARPA Unmanned Ground Vehicle (UGV) architecture [13, 12, 27, 28] or for the AuRA architecture <ref> [1, 19, 2] </ref>. The AuRA executables drive both simulated robots, several types of Denning robots (DRV-1, MRV-2, MRV-3), and a robotic HUMMER all-terrain vehicle.
Reference: [2] <author> R.C. Arkin and T.R. Balch. AuRA: </author> <title> Principles and practice in review. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 9(2) </volume> <pages> 175-189, </pages> <year> 1997. </year>
Reference-contexts: The user interface centers around the graphical designer (Configuration Editor - CfgEdit). From here the user can develop configurations, bind them to specific robots, and generate executables. The CDL compiler generates architecture-specific code based according to the user's intentions. Built-in support for the AuRA <ref> [2] </ref> architecture allows deploying and monitoring configurations on the multiagent simulator and/or robots, all from within MissionLab. CfgEdit is used to create and maintain configurations. It supports the recursive construction of reusable components at all levels: from primitive motor behaviors to entire societies of cooperating robots. <p> The process of retargeting a configuration when hardware requirements change is thus eased. MissionLab currently possesses the ability to generate code for either the ARPA Unmanned Ground Vehicle (UGV) architecture [13, 12, 27, 28] or for the AuRA architecture <ref> [1, 19, 2] </ref>. The AuRA executables drive both simulated robots, several types of Denning robots (DRV-1, MRV-2, MRV-3), and a robotic HUMMER all-terrain vehicle.
Reference: [3] <author> R.C. </author> <title> Arkin and D.C. MacKenzie. Temporal coordination of perceptual algorithms for mobile robot navigation. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(3) </volume> <pages> 276-286, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: This allows developers to build libraries of increasingly higher-level abstractions which are directly tailored to their end-users' needs. MissionLab's support for the graphical construction of state-transition diagrams allows the use of temporal sequencing <ref> [3] </ref> that partitions a mission into a set of discrete operating states, with assemblages implementing each state. 3 Example: The MissionLab Robot Programming Toolset The MissionLab toolset has been created at Georgia Tech as an integrated development environment for behavior-based mobile robots.
Reference: [4] <author> N.A. Aykin, J.P. Cunningham, and J.P. Rotella. </author> <title> Designing operations systems interfaces that are easy to use. </title> <journal> AT&T Technical Journal, </journal> <volume> 73(4) </volume> <pages> 14-21, </pages> <month> July/August </month> <year> 1994. </year>
Reference-contexts: A configuration generally is a solution for a particular robot mission. This article explores the issues surrounding just how one begins to evaluate the usability of robot programming toolsets used to create and maintain configurations. It is necessary to consider usability early in the develop cycle <ref> [4, 10, 14, 15, 26, 33] </ref>, but when the application is available, it must be evaluated as to its usability by the target audience. There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature.
Reference: [5] <author> R.A. Brooks. </author> <title> A robot that walks: Emergent behaviors from a carefully evolved network. </title> <journal> Neural Computation, </journal> <volume> 1(2) </volume> <pages> 253-262, </pages> <year> 1989. </year> <note> Also MIT AI Memo 1091. </note>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life.
Reference: [6] <author> Jonathan M. Cameron and Douglas C. MacKenzie. </author> <title> MissionLab User Manual. </title> <institution> College of Computing, Georgia Institute of Technology, </institution> <note> Available via http://www.cc.gatech.edu/ai/robot-lab/research/MissionLab/mlab manual.ps.gz, Version 1.0 edition, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: Toolsets should clearly separate development tasks. Skilled developers are then able to create libraries of high-level control abstractions tailored to a particular target task domain. Robot commanders can then select, parameterize, and combine components from these libraries to perform a variety of missions, without requiring detailed robotics knowledge. MissionLab <ref> [6] </ref>, presented in the next section, is an example of a robot programming toolset which meets these goals (Another example targeted to industrial robotics is Onika [29, 11]). MissionLab uses the assemblage [18] abstraction to permit the recursive construction of new coherent behaviors from coordinated groups of other behaviors. <p> MissionLab also permits mixing simulated and real robots within a single mission to allow evaluating the benefits of additional hardware. This section provides an overview of the MissionLab toolset to ground the usability evaluations which will follow. In-depth descriptions of MissionLab can be found in the MissionLab user's manual <ref> [6] </ref>. 3.1 The Societal Agent theory The theoretical basis of MissionLab is the Societal Agent theory [20, 21], which describes the recursive composition of agents in both natural and man-made organizations. Minsky proposes an agent-based structure of human intelligence in "The Society of Mind"[24].
Reference: [7] <author> John P. Chin, Virginia A. Diehl, and Kent L. Norman. </author> <title> Development of an instrument measuring user satisfaction of the human-computer interface. </title> <editor> In E. Soloway et al., editors, </editor> <booktitle> Proc. CHI'88, Human Factors in Computing Systems, </booktitle> <pages> pages 213-218. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference: [8] <author> J. Connell. </author> <title> A colony architecture for an artificial creature. </title> <type> AI Tech Report 1151, </type> <institution> MIT, </institution> <year> 1989. </year>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life.
Reference: [9] <author> J. Firby. </author> <title> Adaptive execution in complex dynamic worlds. </title> <institution> Computer Science Tech Report YALEU/CSD/RR 672, Yale, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life.
Reference: [10] <author> Susan L. Fowler and Victor R. Stanwick. </author> <title> The GUI Style Guide. </title> <publisher> Academic Press, </publisher> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: A configuration generally is a solution for a particular robot mission. This article explores the issues surrounding just how one begins to evaluate the usability of robot programming toolsets used to create and maintain configurations. It is necessary to consider usability early in the develop cycle <ref> [4, 10, 14, 15, 26, 33] </ref>, but when the application is available, it must be evaluated as to its usability by the target audience. There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature.
Reference: [11] <author> Matthew W. Gertz, Roy A. Maxion, and Pradeep K. Khosla. </author> <title> Visual programming and hy-permedia implementation within a distributed laboratory environment. </title> <journal> Intelligent Automation and Soft Computing, </journal> <volume> 1(1) </volume> <pages> 43-62, </pages> <year> 1995. </year>
Reference-contexts: MissionLab [6], presented in the next section, is an example of a robot programming toolset which meets these goals (Another example targeted to industrial robotics is Onika <ref> [29, 11] </ref>). MissionLab uses the assemblage [18] abstraction to permit the recursive construction of new coherent behaviors from coordinated groups of other behaviors. This allows developers to build libraries of increasingly higher-level abstractions which are directly tailored to their end-users' needs. <p> It does little good to set targets that are out of reach. 5 Example: MissionLab Usability Criteria In this section, using MissionLab as a concrete example, usability criteria are established that serve as a prelude to an actual usability evaluation of the toolset. (An example of analyzing Onika appears in <ref> [11] </ref>). Two primary objectives were identified as important for the evaluation of MissionLab: 9 1. Show that it is significantly faster to create robot configurations by using the MissionLab toolset than by writing corresponding C code. 2. Show that the MissionLab toolset is well suited to the configuration design task.
Reference: [12] <author> J. Gowdy. </author> <title> SAUSAGES Users Manual. </title> <journal> Robotics Institute, </journal> <note> Carnegie Mellon, version 1.0 edition, </note> <month> February 8 </month> <year> 1991. </year> <title> SAUSAGES: A Framework for Plan Specification, Execution, and Monitoring. </title>
Reference-contexts: The process of retargeting a configuration when hardware requirements change is thus eased. MissionLab currently possesses the ability to generate code for either the ARPA Unmanned Ground Vehicle (UGV) architecture <ref> [13, 12, 27, 28] </ref> or for the AuRA architecture [1, 19, 2]. The AuRA executables drive both simulated robots, several types of Denning robots (DRV-1, MRV-2, MRV-3), and a robotic HUMMER all-terrain vehicle.
Reference: [13] <author> J. Gowdy. SAUSAGES: </author> <title> Between planning and action. </title> <type> Technical Report Draft, </type> <institution> Robotics Institute, Carnegie Mellon, </institution> <year> 1994. </year>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life. <p> The process of retargeting a configuration when hardware requirements change is thus eased. MissionLab currently possesses the ability to generate code for either the ARPA Unmanned Ground Vehicle (UGV) architecture <ref> [13, 12, 27, 28] </ref> or for the AuRA architecture [1, 19, 2]. The AuRA executables drive both simulated robots, several types of Denning robots (DRV-1, MRV-2, MRV-3), and a robotic HUMMER all-terrain vehicle.
Reference: [14] <author> Deborah Hix and H. Rex Hartson. </author> <title> Developing User Interfaces. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: A configuration generally is a solution for a particular robot mission. This article explores the issues surrounding just how one begins to evaluate the usability of robot programming toolsets used to create and maintain configurations. It is necessary to consider usability early in the develop cycle <ref> [4, 10, 14, 15, 26, 33] </ref>, but when the application is available, it must be evaluated as to its usability by the target audience. There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature. <p> In Cognitive walkthroughs, developers perform software walkthroughs to evaluate the actions required by the toolset based on a cognitive model of how users will expect the interface to work. Usability testing <ref> [14, 23] </ref> attempts to study and measure how representative users interact with the system while performing realistic tasks. The peculiarities of applying Usability testing to a robot programming toolset are the focus of this article. The desired characteristics of a Robot Programming Toolset are presented in Section 2. <p> Table 1 depicts an example technique for presenting the usability metrics. Table 1: An example usability criteria specification table for some indeterminate task (After <ref> [14] </ref>, page 223). Notice that Usability Attributes are vague high-level concepts while the Values to be Measured are concrete performance metrics. The Current Level shows the average user performance on existing systems. <p> The remainder of this section presents the development of the experiments; the procedures to be followed in carrying them out, the nature and type of data generated, and the evaluation methods followed in analyzing the data. 12 for use in the usability experiments (Patterned after <ref> [14] </ref>, page 300). 13 7.1 Experiment 1: CfgEdit Mission Specification 7.1.1 Objective Determine the performance of novice and expert users specifying benchmark robot missions using the Configuration Editor.
Reference: [15] <author> William Horton. </author> <title> The Icon Book. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: A configuration generally is a solution for a particular robot mission. This article explores the issues surrounding just how one begins to evaluate the usability of robot programming toolsets used to create and maintain configurations. It is necessary to consider usability early in the develop cycle <ref> [4, 10, 14, 15, 26, 33] </ref>, but when the application is available, it must be evaluated as to its usability by the target audience. There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature.
Reference: [16] <author> Jaeho Lee, Marcus J. Huber, Edmund H. Durfee, and Patrick G. Kenny. UM-PRS: </author> <title> An implementation of the procedure reasoning system for multirobot applications. </title> <booktitle> In Proceedings AIAA/NASA Conference on Intelligent Robots in Field, Factory, Service, and Space (CIRFFSS '94), </booktitle> <year> 1994. </year>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life.
Reference: [17] <author> Michelle A. Lund. </author> <title> Evaluating the user interface: The candid camera approach. </title> <editor> In L. Borman et al., editors, </editor> <booktitle> Proc. CHI'85, Human Factors in Computing Systems, </booktitle> <pages> pages 107-113. </pages> <publisher> ACM, </publisher> <year> 1985. </year>
Reference-contexts: This is not an easy task and 11 requires careful planning and execution to prevent bias and noise from swamping the underlying data. Objective methods for data gathering generally involve test subjects using the system under controlled conditions <ref> [17] </ref>. Commonly, the software is instrumented to gather keystroke and timing information that will allow determining how the user performed certain tasks. The experiments are best if administered by a third party observer to remove bias and to keep the developers from interjecting knowledge not commonly available.
Reference: [18] <author> Damian M. Lyons and M. A. Arbib. </author> <title> A formal model of computation for sensory-based robotics. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 5(3) </volume> <pages> 280-293, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: MissionLab [6], presented in the next section, is an example of a robot programming toolset which meets these goals (Another example targeted to industrial robotics is Onika [29, 11]). MissionLab uses the assemblage <ref> [18] </ref> abstraction to permit the recursive construction of new coherent behaviors from coordinated groups of other behaviors. This allows developers to build libraries of increasingly higher-level abstractions which are directly tailored to their end-users' needs.
Reference: [19] <author> Douglas C. MacKenzie. </author> <title> Configuration Network Language (CNL) User Manual. </title> <institution> College of Computing, Georgia Institute of Technology, </institution> <note> Available via http://www.cc.gatech.edu/ai/robot-lab/research/MissionLab/cnl manual.ps.gz, Version 1.5 edition, </note> <month> June </month> <year> 1996. </year>
Reference-contexts: The process of retargeting a configuration when hardware requirements change is thus eased. MissionLab currently possesses the ability to generate code for either the ARPA Unmanned Ground Vehicle (UGV) architecture [13, 12, 27, 28] or for the AuRA architecture <ref> [1, 19, 2] </ref>. The AuRA executables drive both simulated robots, several types of Denning robots (DRV-1, MRV-2, MRV-3), and a robotic HUMMER all-terrain vehicle.
Reference: [20] <author> Douglas C. MacKenzie. </author> <title> A Design Methodology for the Configuration of Behavior-Based Mobile Robots. </title> <type> Ph.D. dissertation, </type> <institution> Georgia Institute of Technology, College of Computing, </institution> <year> 1997. </year> <month> GIT-CS-97/01. </month>
Reference-contexts: This section provides an overview of the MissionLab toolset to ground the usability evaluations which will follow. In-depth descriptions of MissionLab can be found in the MissionLab user's manual [6]. 3.1 The Societal Agent theory The theoretical basis of MissionLab is the Societal Agent theory <ref> [20, 21] </ref>, which describes the recursive composition of agents in both natural and man-made organizations. Minsky proposes an agent-based structure of human intelligence in "The Society of Mind"[24]. <p> An important facet of CDL is its support for the construction of reusable assemblages. This allows building libraries of high-level primitives for later reuse. Assemblages are defined using the defAgent keyword and can be used interchangeably with primitives. The syntax and semantics of CDL is formally defined in <ref> [20, 21] </ref> and the interested reader should look there for in-depth treatments. 3.3 The MissionLab Toolset The MissionLab toolset has been developed based upon Configuration Description Language. Figure 1 shows a block diagram of the MissionLab system. The user interface centers around the graphical designer (Configuration Editor - CfgEdit). <p> Comparisons between Experiment 1 and Experiment 2 should be made as paired samples when the same person performs both experiments since the performance of different subjects likely has more variability than for the same individual. The detailed analysis of these experiments can be found in <ref> [20] </ref>. As a concrete example, consider how the Time to specialize a step value was determined. When a new step is added to a mission it defaults to the Stop behavior.
Reference: [21] <author> Douglas C. MacKenzie, Ronald C. Arkin, and Jonathan M. Cameron. </author> <title> Multiagent mission specification and execution. </title> <booktitle> Autonomous Robots, </booktitle> <volume> 4(1) </volume> <pages> 29-52, </pages> <year> 1997. </year>
Reference-contexts: This section provides an overview of the MissionLab toolset to ground the usability evaluations which will follow. In-depth descriptions of MissionLab can be found in the MissionLab user's manual [6]. 3.1 The Societal Agent theory The theoretical basis of MissionLab is the Societal Agent theory <ref> [20, 21] </ref>, which describes the recursive composition of agents in both natural and man-made organizations. Minsky proposes an agent-based structure of human intelligence in "The Society of Mind"[24]. <p> An important facet of CDL is its support for the construction of reusable assemblages. This allows building libraries of high-level primitives for later reuse. Assemblages are defined using the defAgent keyword and can be used interchangeably with primitives. The syntax and semantics of CDL is formally defined in <ref> [20, 21] </ref> and the interested reader should look there for in-depth treatments. 3.3 The MissionLab Toolset The MissionLab toolset has been developed based upon Configuration Description Language. Figure 1 shows a block diagram of the MissionLab system. The user interface centers around the graphical designer (Configuration Editor - CfgEdit).
Reference: [22] <author> M. J. Mataric. </author> <title> Designing emergent behaviors: From local interactions to collective intelligence. </title> <booktitle> In Proceedings From Animals to Animats, Second International Conference on Simulation of Adaptive Behavior (SAB92). </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life.
Reference: [23] <author> James R. Miller and Robin Jeffries. </author> <title> Usability evaluation: </title> <booktitle> Science of trade-offs. IEEE Software, </booktitle> <pages> pages 97-102, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: It is necessary to consider usability early in the develop cycle [4, 10, 14, 15, 26, 33], but when the application is available, it must be evaluated as to its usability by the target audience. There are four popular procedures to evaluate the usability of software packages <ref> [23] </ref> in the Human-Computer Interfaces literature. Heuristic evaluation [25, 32] asks interface specialists to study the package and look for aspects that, based on their experience, will be confusing for users. A process called Guidelines [31] has developers rate their system based on a list of good interface design principles. <p> In Cognitive walkthroughs, developers perform software walkthroughs to evaluate the actions required by the toolset based on a cognitive model of how users will expect the interface to work. Usability testing <ref> [14, 23] </ref> attempts to study and measure how representative users interact with the system while performing realistic tasks. The peculiarities of applying Usability testing to a robot programming toolset are the focus of this article. The desired characteristics of a Robot Programming Toolset are presented in Section 2.
Reference: [24] <author> M. Minsky. </author> <title> The Society of Mind. </title> <publisher> Simon and Schuster, </publisher> <address> New York, </address> <year> 1986. </year>
Reference: [25] <author> Jakob Nielsen. </author> <title> Finding usability problems through heuristic evaluation. </title> <booktitle> In Proc. CHI '92: Striking a Balance Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 373-380, </pages> <address> Monterey, CA, </address> <year> 1992. </year>
Reference-contexts: There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature. Heuristic evaluation <ref> [25, 32] </ref> asks interface specialists to study the package and look for aspects that, based on their experience, will be confusing for users. A process called Guidelines [31] has developers rate their system based on a list of good interface design principles.
Reference: [26] <author> R.E. Opaluch and Y.C. Tsao. </author> <title> Ten ways to improve usability engineering designing user interfaces for ease of use. </title> <journal> AT&T Technical Journal, </journal> <volume> 72(3) </volume> <pages> 75-88, </pages> <month> May/June </month> <year> 1993. </year>
Reference-contexts: A configuration generally is a solution for a particular robot mission. This article explores the issues surrounding just how one begins to evaluate the usability of robot programming toolsets used to create and maintain configurations. It is necessary to consider usability early in the develop cycle <ref> [4, 10, 14, 15, 26, 33] </ref>, but when the application is available, it must be evaluated as to its usability by the target audience. There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature.
Reference: [27] <author> Julio K. Rosenblatt. Damn: </author> <title> A distributed architecture for mobile navigation. </title> <booktitle> In AAAI Spring Symposium: Lessons Learned from Implementing Software Architectures for Physical Agents, </booktitle> <volume> volume 1, </volume> <pages> pages 167-178, </pages> <year> 1995. </year>
Reference-contexts: The evaluation of experimental data is discussed in Section 8 with the results for the MissionLab experiments analyzed in Section 9. The summary in Section 10 concludes the article. 2 Robot Programming Toolset Requirements Behavior-based robotic systems are becoming both more prevalent and more competent <ref> [5, 22, 8, 27, 13, 9, 16, 1] </ref>. However, operators lacking programming skills are generally forced to use canned configurations hand-crafted by experienced roboticists. This inability of ordinary people to specify tasks for robots inhibits the acceptance of robots into everyday life. <p> The process of retargeting a configuration when hardware requirements change is thus eased. MissionLab currently possesses the ability to generate code for either the ARPA Unmanned Ground Vehicle (UGV) architecture <ref> [13, 12, 27, 28] </ref> or for the AuRA architecture [1, 19, 2]. The AuRA executables drive both simulated robots, several types of Denning robots (DRV-1, MRV-2, MRV-3), and a robotic HUMMER all-terrain vehicle.
Reference: [28] <author> Julio K. Rosenblatt and D.W. Payton. </author> <title> A fine-grained alternative to the subsumption architecture for mobile robot control. </title> <booktitle> In IEEE INNS International Joint Conference on Neural Networks, </booktitle> <volume> volume 2, </volume> <pages> pages 317-323, </pages> <year> 1989. </year>
Reference-contexts: The process of retargeting a configuration when hardware requirements change is thus eased. MissionLab currently possesses the ability to generate code for either the ARPA Unmanned Ground Vehicle (UGV) architecture <ref> [13, 12, 27, 28] </ref> or for the AuRA architecture [1, 19, 2]. The AuRA executables drive both simulated robots, several types of Denning robots (DRV-1, MRV-2, MRV-3), and a robotic HUMMER all-terrain vehicle.
Reference: [29] <author> David B. Stewart and P.K. Khosla. </author> <title> Rapid development of robotic applications using component-based real-time software. </title> <booktitle> In Proc. Intelligent Robotics and Systems (IROS 95), </booktitle> <volume> volume 1, </volume> <pages> pages 465-470. </pages> <publisher> IEEE/RSJ, IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: MissionLab [6], presented in the next section, is an example of a robot programming toolset which meets these goals (Another example targeted to industrial robotics is Onika <ref> [29, 11] </ref>). MissionLab uses the assemblage [18] abstraction to permit the recursive construction of new coherent behaviors from coordinated groups of other behaviors. This allows developers to build libraries of increasingly higher-level abstractions which are directly tailored to their end-users' needs.
Reference: [30] <institution> MissionLab Toolset. Mobile Robot Laboratory. College of Computing, Georgia Institute of Technology, </institution> <note> Available via http://www.cc.gatech.edu/ai/robot-lab/research/MissionLab, Version 1.0 edition, </note> <month> May </month> <year> 1996. </year> <month> 32 </month>
Reference-contexts: The binding process determines which compiler 4 is used to generate the executable code and which libraries of behavior primitives are available for user placement within the graphical editor. The MissionLab system <ref> [30] </ref> is available in both source and binary form at http://www.cc.gatech.edu/ai/robot-lab/research/MissionLab. 3.4 Illustrative MissionLab session This display is where end-users will normally interact with the system. Missions are constructed by adding states and transitions to the workspace.
Reference: [31] <author> M. Turnell and J. de Queiroz. </author> <title> Guidelines an approach in the evaluation of human-computer in-terfaces. </title> <booktitle> In Proc. IEEE International Conference on Systems, Man, and Cybernetics, </booktitle> <volume> volume 3, </volume> <pages> pages 2090-2095, </pages> <year> 1996. </year>
Reference-contexts: There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature. Heuristic evaluation [25, 32] asks interface specialists to study the package and look for aspects that, based on their experience, will be confusing for users. A process called Guidelines <ref> [31] </ref> has developers rate their system based on a list of good interface design principles. In Cognitive walkthroughs, developers perform software walkthroughs to evaluate the actions required by the toolset based on a cognitive model of how users will expect the interface to work.
Reference: [32] <author> R.A. Virzi, J.L. Sokolov, and D. Karis. </author> <title> Usability problem identification using both low- and high-fidelity prototypes. </title> <booktitle> In Proc. CHI '96: Common Ground Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 236-243, </pages> <address> Vancouver, BC Canada, </address> <year> 1996. </year>
Reference-contexts: There are four popular procedures to evaluate the usability of software packages [23] in the Human-Computer Interfaces literature. Heuristic evaluation <ref> [25, 32] </ref> asks interface specialists to study the package and look for aspects that, based on their experience, will be confusing for users. A process called Guidelines [31] has developers rate their system based on a list of good interface design principles.

References-found: 32

