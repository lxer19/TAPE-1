URL: http://www.medg.lcs.mit.edu/sdcr/reports/cp.ps
Refering-URL: http://www.medg.lcs.mit.edu/sdcr/reports/
Root-URL: 
Title: Constraint Programming The Constraint Programming Working Group ACM-MIT SDCR Workshop  
Author: Version George 
Date: Oct 14, 1996  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Afrati, S. Cosmadakis, S. Grumbach, and G. Kuper. </author> <title> Linear versus polynomial constraints in database query languages. </title> <editor> In A. Borning, editor, </editor> <booktitle> Proceedings of the International Workshop on Principles and Practice of Constraint Programming, volume 874 of LNCS, </booktitle> <pages> pages 181-192, </pages> <address> Orcas Island, WA, 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The propagation phase is built on a very simple idea: remove inconsistent values from the domain of the variables. For instance assume that x, y, and z are three variables with integer values in the closed interval <ref> [1; 10] </ref>, with the constraint y &lt; z. We can see that the value of y will be at least 1. Since the constraint states that z must be greater than y, z = 1 is no longer possible. <p> Since the constraint states that z must be greater than y, z = 1 is no longer possible. For that reason, 1 is removed from the domain of z. which becomes [2; 10]. Similarly, the domain of y becomes <ref> [1; 9] </ref>. The domain of x remains unchanged since no constraints involve x at this point. Let's assume now that we add another constraint, say, x = y + z.
Reference: [2] <author> Hassan A it-Kaci and Andreas Podelski. </author> <title> Towards a meaning of LIFE. </title> <journal> Journal of Logic Programming, </journal> 16(3&4):195-234, 1993. 
Reference-contexts: On the other hand, CC provides a general declarative framework for concurrency encompassing and extending data-flow languages, languages based on "residuation" <ref> [2] </ref>, and concurrent functional languages. For, the CC paradigm was based on another fundamentally novel observation: that constraints can be used not only to state and solve combinatorial problems, but also to specify process communication and synchronization in a general way. <p> We can see that the value of y will be at least 1. Since the constraint states that z must be greater than y, z = 1 is no longer possible. For that reason, 1 is removed from the domain of z. which becomes <ref> [2; 10] </ref>. Similarly, the domain of y becomes [1; 9]. The domain of x remains unchanged since no constraints involve x at this point. Let's assume now that we add another constraint, say, x = y + z.
Reference: [3] <author> J. Allen. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26 </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: Finally, special classes of constraints associated with temporal reasoning have received much attention in the last decade. Tractable classses include subsets of Allen's (qualitative) interval algebra <ref> [3] </ref>, as well as quantitative binary linear inequalities over the reals, of the form X Y a [28]. The focus in the AI community, (in contrast to OR), is on handling new types of queries and on 10 combining such constraints with qualitative constraints. <p> Let's assume now that we add another constraint, say, x = y + z. Now the minimal possible value for y is 1, and the minimal possible value for z is 2, so x has to be at least 3. The domain of x is then reduced to <ref> [3; 10] </ref>. Furthermore, as the maximal possible value for x is 10 and the minimal value of y is 1, z, which is equal to x y must be at most 8. Similarly, y, which is equal to x z must be smaller than 8.
Reference: [4] <author> I. Balbin, D.B. Kemp, K. Meenakshi, and K. Ramamohanarao. </author> <title> Propagating constraints in recursive deductive databases. </title> <booktitle> In Proceedings of the North American Conference on Logic Programming, </booktitle> <year> 1989. </year>
Reference: [5] <author> E. Best, F.S. De Boer, and C. Palamidessi. </author> <title> Concurrent constraint programming with information removal. </title> <booktitle> In First Conference on Concurrent Constraint Programming, </booktitle> <address> Venice, </address> <year> 1995. </year>
Reference: [6] <author> S. Bistarelli, U. Montanari, and F. Rossi. </author> <title> Constraint Solving over Semir-ings. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1995. </year>
Reference: [7] <author> F.S. De Boer and C. Palamidessi. </author> <title> A fully abstract model for concurrent constraint programming. </title> <booktitle> In Proceedings of the CAAP. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [8] <author> A. Borning. </author> <title> The programming language aspects of ThingLab, a constraint oriented simulation laboratory. </title> <journal> ACM Transaction on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <year> 1981. </year>
Reference-contexts: It included the concepts of a constraint as a declarative relation, enforced by the computer; of local propagation constraint solvers; and of multiple cooperating solvers. A subsequent (similar) system, ThingLab <ref> [8] </ref>, included a facility for compiling constraint satisfaction plans, allowing constraints to be re-satisfied rapidly for changing inputs. EL [121] was an early constraint-based circuit analysis program.
Reference: [9] <author> A. Borning, R. Anderson, and B. Freeman-Benson. Indigo: </author> <title> A local propagation algorithm for inequality constraints. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <address> Seat-tle, </address> <month> November </month> <year> 1996. </year> <month> 26 </month>
Reference-contexts: Examples include QOCA [58], which solves simultaneous linear equation and inequality constraints while optimizing a quadratic expression, Bramble [46] and Juno-2 [65] which use numerical solvers, Indigo <ref> [9] </ref>, an interval propagation algorithm for inequality constraints, and DETAIL [67] and Ultraviolet [10], both of which are hybrid algorithms supporting both local propagation and cycle solvers. 3.4 Constraint Programming in Operations Research Operations Research is a vast field represented by departments in major universities and industrial settings around the world. <p> Since the constraint states that z must be greater than y, z = 1 is no longer possible. For that reason, 1 is removed from the domain of z. which becomes [2; 10]. Similarly, the domain of y becomes <ref> [1; 9] </ref>. The domain of x remains unchanged since no constraints involve x at this point. Let's assume now that we add another constraint, say, x = y + z.
Reference: [10] <author> A. Borning and B. Freeman-Benson. </author> <title> The OTI constraint solver: A con-straint library for constructing interactive graphical user interfaces. </title> <editor> In U. Montanari and F. Rossi, editors, </editor> <booktitle> Proceedings of the International Conference on Principles and Practice of Constraint Programming, </booktitle> <volume> volume 976, </volume> <pages> pages 624-628, </pages> <address> Cassis, France, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Examples include QOCA [58], which solves simultaneous linear equation and inequality constraints while optimizing a quadratic expression, Bramble [46] and Juno-2 [65] which use numerical solvers, Indigo [9], an interval propagation algorithm for inequality constraints, and DETAIL [67] and Ultraviolet <ref> [10] </ref>, both of which are hybrid algorithms supporting both local propagation and cycle solvers. 3.4 Constraint Programming in Operations Research Operations Research is a vast field represented by departments in major universities and industrial settings around the world. <p> The propagation phase is built on a very simple idea: remove inconsistent values from the domain of the variables. For instance assume that x, y, and z are three variables with integer values in the closed interval <ref> [1; 10] </ref>, with the constraint y &lt; z. We can see that the value of y will be at least 1. Since the constraint states that z must be greater than y, z = 1 is no longer possible. <p> We can see that the value of y will be at least 1. Since the constraint states that z must be greater than y, z = 1 is no longer possible. For that reason, 1 is removed from the domain of z. which becomes <ref> [2; 10] </ref>. Similarly, the domain of y becomes [1; 9]. The domain of x remains unchanged since no constraints involve x at this point. Let's assume now that we add another constraint, say, x = y + z. <p> Let's assume now that we add another constraint, say, x = y + z. Now the minimal possible value for y is 1, and the minimal possible value for z is 2, so x has to be at least 3. The domain of x is then reduced to <ref> [3; 10] </ref>. Furthermore, as the maximal possible value for x is 10 and the minimal value of y is 1, z, which is equal to x y must be at most 8. Similarly, y, which is equal to x z must be smaller than 8.
Reference: [11] <author> A. Borning, B. Freeman-Benson, and M. Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference: [12] <author> A. Brodsky, J. Jaffar, and M.J. Maher. </author> <title> Toward practical constraint databases. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <address> Dublin, </address> <year> 1993. </year>
Reference-contexts: More recent works on deductive databases (e.g., [100]) considered manipulation and repositioning of constraints for optimizing recursion. Algorithms for constraint algebra operators such as constraint joins, and generic global optimization were studied in <ref> [12] </ref>. The work [77] proposed an efficient data structure for secondary storage suitable for indexing constraints, that achieves not only the optimal space and time complexity as priority search trees, but also full clustering. The work [13] proposed an approach to achieve the optimal quality of constraint and spatial filtering.
Reference: [13] <author> A. Brodsky, C. Lassez, J.-L. Lassez, and M. J. Maher. </author> <title> Separability of polyhedra for optimal filtering of spatial and constraint data. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems. </booktitle> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: The work [77] proposed an efficient data structure for secondary storage suitable for indexing constraints, that achieves not only the optimal space and time complexity as priority search trees, but also full clustering. The work <ref> [13] </ref> proposed an approach to achieve the optimal quality of constraint and spatial filtering. A number of works consider special constraint domains: integer order constraints [107]; set constraints [108]; dense-order constraints [50]. Linear constraints over reals have drawn special attention [1,12,51,126].
Reference: [14] <author> F. Bueno, M. Jose Garcia de la Banda, M. Hermenegildo, U. Montanari, and F. Rossi. </author> <title> From eventual to atomic and locally atomic CC programs: A concurrent semantics. </title> <booktitle> In Proceedings of the International Conference on Algebraic and Logic Programming, </booktitle> <year> 1994. </year>
Reference: [15] <author> F. Bueno, M. Jose Garcia de la Banda, M. Hermenegildo, F. Rossi, and U. Montanari. </author> <title> Towards true concurrency semantics based transformation between CLP and CC. </title> <editor> In A. Borning, editor, </editor> <booktitle> Proceedings of the International Workshop on Principles and Practice of Constraint Programming, volume 874 of LNCS, </booktitle> <address> Orcas Island, WA, 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: abstract interpretation [128,22] which execute CC programs on an abstract constraint domain with the hope to derive some useful knowledge for program simplification, for those on suspension analysis [20], whose aim is to understand the conditions under which CC program deadlock, and for those on relating CC and CLP languages <ref> [15] </ref>, which try to parallelize CLP programs using CC-based techniques or to sequentialize CC programs via an analysis of their inherent concurrency.
Reference: [16] <author> J.-H. Byon and P. Revesz. </author> <title> Disco: A constraint database system with sets. </title> <booktitle> In CONTESSA Workshop on Constraint Databases and Applications, </booktitle> <month> September </month> <year> 1995. </year>
Reference: [17] <author> J. Carlier and E. Pinson. </author> <title> An algorithm for solving the job shop problem. </title> <journal> Management Science, </journal> <volume> 35, </volume> <year> 1989. </year>
Reference-contexts: Work in OR on discrete optimization has also contributed to developments in CP. Indeed, some of the recent success in CP on scheduling problems can trace back to <ref> [17] </ref> on the Job Shop Problem. Conversely, the CP work has led to new algorithms for these and related applications and to the creation of software tools to facilitate exploitation of these techniques.
Reference: [18] <author> J. Chassin and P. Codognet. </author> <title> Parallel Logic Programming Systems. </title> <journal> Computing Surveys, </journal> <volume> 26(3) </volume> <pages> 295-336, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Also, much research remains to be done in finding accurate abstraction techniques for 22 standard constraint systems. Parallelization. A program optimization which has shown significant speedups in the context of logic programs is automatic parallelization <ref> [18] </ref>. Exploitation of parallelism in the search (or-parallelism) is comparatively easy and has been shown to provide speedups in several industrial applications containing extensive search [60,32,85].
Reference: [19] <author> P. Cheeseman, B. Kanefsky, and W. Taylor. </author> <title> Where the really hard problems are. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Iintelligence, </booktitle> <pages> pages 331-337, </pages> <year> 1991. </year>
Reference-contexts: The focus in the AI community, (in contrast to OR), is on handling new types of queries and on 10 combining such constraints with qualitative constraints. Generating hard instances Another theme that has received great interest recently is locating the "really hard" problems <ref> [19] </ref>. It turns out that when problems are generated randomly, most of them are very easy. Consequently, special care is needed in selecting the random generator if non-trivial problems are to be produced.
Reference: [20] <author> M. Codish, M. Falaschi, and K. Marriott. </author> <title> Suspension analysis for concurrent logic programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3), </volume> <year> 1994. </year> <month> 27 </month>
Reference-contexts: This holds, for example, for the works on abstract interpretation [128,22] which execute CC programs on an abstract constraint domain with the hope to derive some useful knowledge for program simplification, for those on suspension analysis <ref> [20] </ref>, whose aim is to understand the conditions under which CC program deadlock, and for those on relating CC and CLP languages [15], which try to parallelize CLP programs using CC-based techniques or to sequentialize CC programs via an analysis of their inherent concurrency.
Reference: [21] <author> M. Codish, M. Falaschi, K. Marriott, and W. Winsborough. </author> <title> Efficient analysis of concurrent constraint logic programs. </title> <booktitle> In Proceedings of the International Colloquium on Automata, Languages and Programming, Lund, </booktitle> <address> Sweden, </address> <month> July </month> <year> 1993. </year>
Reference: [22] <author> C. Codognet, P. Codognet, and M. Corsini. </author> <title> Abstract interpretation for concurrent logic languages. </title> <booktitle> In Proceedings of the North American Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [23] <author> P. Codognet and D. Diaz. </author> <title> Compiling constraints in clp(fd). </title> <journal> Journal of Logic Programming, </journal> <volume> 27(3), </volume> <year> 1996. </year>
Reference-contexts: Building on progress in the area of Concurrent Constraint Programming some languages provide constructs for defining the propagation of a constraint within the language (examples are cc (fd) [62] and clp (fd) <ref> [23] </ref>). Some others propose to view a constraint as a Boolean expression. The Boolean variable is true if the constraint is necessarily true (entailed by the other constraints). The Boolean variable is false if the negation of the constraint is entailed by the other constraints.
Reference: [24] <author> P. Codognet and F. Rossi. </author> <title> NMCC Programming: Constraint Enforcement and Retraction in CC Programming. </title> <booktitle> In Proceedings of the International Conference on Logic Programming, </booktitle> <year> 1995. </year>
Reference: [25] <author> A. Colmerauer. </author> <title> An introduction to Prolog-III. </title> <journal> Communication of the ACM, </journal> <volume> 33(7), </volume> <year> 1990. </year>
Reference-contexts: Although the CLP scheme immediately gave rise to languages like CLP (R) [71] and Prolog III <ref> [25] </ref>, it took the practical experience of application-oriented research to link CLP to the propagation algorithms developed earlier in AI.
Reference: [26] <author> R. Dechter. </author> <title> Enhancement schemes for constraint processing: Backjump-ing, learning and cutset decomposition. </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <pages> 273-312, </pages> <year> 1990. </year>
Reference: [27] <author> R. Dechter. </author> <title> Constraint networks. </title> <booktitle> Encyclopedia of Artificial Intelligence, </booktitle> <pages> pages 276-285, </pages> <year> 1992. </year>
Reference-contexts: For example, tree-clustering transforms a problem into a tree-structured meta-problem whose variables are subproblems of the original problem, and the cycle cutset method extracts a tree-structured subproblem from the original problem <ref> [27] </ref>. The micro structure can be exploited by, for example, developing specific consistency enforcing algorithms for specific classes of constraints, or removing values that are redundant because they participate in the same solutions (e.g., see Section 3.7.1).
Reference: [28] <author> R. Dechter, I. Meiri, and J. Pearl. </author> <title> Temporal constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 61-95, </pages> <year> 1991. </year>
Reference-contexts: Finally, special classes of constraints associated with temporal reasoning have received much attention in the last decade. Tractable classses include subsets of Allen's (qualitative) interval algebra [3], as well as quantitative binary linear inequalities over the reals, of the form X Y a <ref> [28] </ref>. The focus in the AI community, (in contrast to OR), is on handling new types of queries and on 10 combining such constraints with qualitative constraints. Generating hard instances Another theme that has received great interest recently is locating the "really hard" problems [19].
Reference: [29] <author> R. Dechter and J. Pearl. </author> <title> Network-based heuristics for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 34 </volume> <pages> 1-38, </pages> <year> 1987. </year>
Reference: [30] <author> R. Dechter and P. van Beek. </author> <title> From local to global relational consistency. </title> <editor> In U. Montanari and F. Rossi, editors, </editor> <booktitle> Proceeding of the International Conference on Constraint Programming, volume 976, </booktitle> <address> Cassis, France, </address> <year> 1995. </year> <note> Springer-Verlag. A full version to appear in Theoretical Computer Science, </note> <year> 1996. </year>
Reference-contexts: Structure-driven algorithms such as variable elimination, clustering, and conditioning can be applied across many areas of reasoning such as satisfiability, solution of linear inequalities, belief assessment and belief maximization in Bayes' networks, combinatorial optimization, and planning under uncertainity <ref> [30] </ref>. Tractability The identification of polynomially recognizable restrictions that are sufficient to ensure tractability is important from both the theoretical and the practical points of view and has been extensively studied over the last two decades.
Reference: [31] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The constraint logic programming language CHIP. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems. </booktitle> <address> Tokyo, Japan, </address> <year> 1988. </year>
Reference: [32] <institution> European Computer Research Center. </institution> <note> Eclipse User's Guide, </note> <year> 1993. </year>
Reference-contexts: Yet another approach is to provide hooks in the parameter passing mechanism of the language (e.g., within unification, for CLP systems) through attributed variables or meta-terms [103,66]. This approach is used extensively in the implementation of constraint solvers in systems such as ECL i PS e <ref> [32] </ref>, SIC-Stus, and CIAO [64]. A last approach is motivated by the need for adding support for global constraints.
Reference: [33] <author> Moreno Falaschi, Maurizio Gabbrielli, Kim Marriott, and Catuscia Palamidessi. </author> <title> Compositional analysis for concurrent constraint programming. </title> <booktitle> In Proceedings of the Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 210-221. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year> <month> 28 </month>
Reference: [34] <author> R. Fikes. </author> <title> A Heuristic Program for Solving Problems Stated as Non--deterministic Procedures. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1968. </year>
Reference-contexts: In these systems, there was still no notion of constraint programming; rather the problem was modeled directly via sets of constraints which were solved using an algorithm. (Mention must also be made of the remarkably prescient systems REF-ARF <ref> [34] </ref> and ALICE [82].
Reference: [35] <author> E. C. Freuder. </author> <title> Synthesizing constraint expressions. </title> <journal> Communications of the ACM, </journal> <volume> 21(11) </volume> <pages> 958-966, </pages> <year> 1978. </year>
Reference: [36] <author> E. C. Freuder. </author> <title> A sufficient condition for backtrack-free search. </title> <journal> Journal of the ACM, </journal> <volume> 29(1) </volume> <pages> 24-32, </pages> <year> 1982. </year>
Reference: [37] <author> E. C. Freuder. </author> <title> Exploiting structure in constraint satisfaction problems. </title> <editor> In B. Mayoh, E. Tyugu, and J. Penjam, editors, </editor> <booktitle> Constraint Programming, NATO ASI series, </booktitle> <pages> pages 51-74. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [38] <editor> E. C. Freuder, editor. </editor> <booktitle> Principles and Practice of Constraint Programming-CP96, number 1118 in LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [39] <author> T. Fruhwirth. </author> <title> Constraint handling rules. </title> <editor> In A. Podelski, editor, </editor> <booktitle> Constraint Programming: Basics and Trends, number 910 in LNCS, </booktitle> <pages> pages 90-107. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A related approach is to define constraints using a rewrite system, as in the Constraint Handling Rules solution <ref> [39] </ref>. The promise of such a special-purpose language for defining constraint systems is that properties of a constraint-solver such as termination and confluence can be tackled independently of a particular constraint system.
Reference: [40] <author> T. Fruhwirth, A. Herold, V. Kuchenoff, T. Le Provost, and P. Lim. </author> <title> Constraint logic programming an informal introduction. </title> <booktitle> In Logic Programming in Action, number 636 in LNCS, </booktitle> <pages> pages 3 - 35. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [41] <author> M. Garca de la Banda, F. Bueno, and M. Hermenegildo. </author> <title> Towards independent And-Parallelism in CLP. </title> <booktitle> In Proceedings of the International Symposium on Programming Language Implementation and Logic Programming, </booktitle> <publisher> LNCS. Springer Verlag, </publisher> <month> September </month> <year> 1996. </year>
Reference-contexts: Based on this, parallelizing compilers as well as and-parallel abstract machines for CP languages have recently become available, and initial performance results are encouraging <ref> [41] </ref>. 4 Promising Directions Constraint programming has by now shown that constraints can be used not only to represent knowledge but also as a way to guide search, prune useless branches, filter queries, and describe process communication and synchronization.
Reference: [42] <author> M. Garca de la Banda, M. Hermenegildo, M. Bruynooghe, V. Dumortier, G. Janssens, and W. Simoens. </author> <title> Global Analysis of Constraint Logic Programs. </title> <journal> In ACM Transactions on Programming Languages and Systems. ACM, </journal> <note> 1996. To appear. </note>
Reference-contexts: Alternatively they can be generated by the compiler and the user can inspect them for errors. In both cases global analysis techniques and systems similar to those used by the compiler for optimization purposes, discussed later in this section, can be used for these purposes (e.g., <ref> [42] </ref>), as well as, perhaps, other proof techniques previously used in logic programming (e.g., based on induction assertion). <p> Some significant progress has already been made in practical global analysis and optimization of constraint logic programming systems. Results on the possible speedups obtainable with global analysis information have been studied (e.g., [92,41]), practical frameworks for global analysis developed (e.g., <ref> [42] </ref>), and some CP systems have been reported which perform global analysis based optimization [78,41]. Such global analysis has also been applied to concurrent CP systems, where one of the most important objectives is to reduce suspension and resumption of goals and synchronization overhead [21,33,91,15,44].
Reference: [43] <author> M. Garca de la Banda, M. Hermenegildo, and K. Marriott. </author> <title> Independence in Constraint Logic Programs. </title> <booktitle> In Proceedings of the International Logic Programming Symposium, </booktitle> <pages> pages 130-146. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Although traditional concepts of independence used in imperative programming (e.g., the "Bernstein conditions") or even those of logic programming, do not apply in the context of CP <ref> [43] </ref>, notions of independence appropriate for (concurrent) CP have been recently proposed [43,14].
Reference: [44] <author> M. Garca de la Banda, K. Marriott, and P. Stuckey. </author> <title> Efficient Analysis of Constraint Logic Programs with Dynamic Scheduling. </title> <booktitle> In Proceedings of the International Logic Programming Symposium, </booktitle> <address> Portland, OR, Decem-ber 1995. </address> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference: [45] <author> J. Gaschnig. </author> <title> Performance measurement and analysis of search algorithms. </title> <type> Technical Report CMU-CS-79-124, </type> <institution> Carnegie Mellon University, </institution> <address> Pitts-burgh, Pa., </address> <year> 1979. </year> <month> 29 </month>
Reference-contexts: Look-back schemes are invoked when the algorithm encounters a dead end. These schemes perform two functions: One, decide how far to backtrack by analyzing the reasons for the dead end, a process often referred to as backjumping, <ref> [45] </ref>. Two, record the reasons for the dead end in the form of new constraints so that the same conflicts will not arise again. Terms used to describe this idea are constraint recording and no-good learning [26,121].
Reference: [46] <author> M. Gleicher. </author> <title> Practical issues in programming constraints. </title> <editor> In V. A. Saraswat and P. Van Hentenryck, editors, </editor> <booktitle> Principles and Practice of Constraint Programming: The Newport Papers, </booktitle> <pages> pages 407-426. </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Examples include QOCA [58], which solves simultaneous linear equation and inequality constraints while optimizing a quadratic expression, Bramble <ref> [46] </ref> and Juno-2 [65] which use numerical solvers, Indigo [9], an interval propagation algorithm for inequality constraints, and DETAIL [67] and Ultraviolet [10], both of which are hybrid algorithms supporting both local propagation and cycle solvers. 3.4 Constraint Programming in Operations Research Operations Research is a vast field represented by departments
Reference: [47] <author> D. Q. </author> <title> Goldin and P.C. Kanellakis. Constraint query algebras. Constraints, </title> <year> 1996. </year>
Reference: [48] <author> K. Govindarajan, B. Jayaraman, and S. Mantha. </author> <title> Optimization and Relaxation in Constraint Logic Languages. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1996. </year>
Reference: [49] <author> R. Gross-Brunschwiler. </author> <title> Implementation of Constraint Database system using a compile-time rewrite aproach. </title> <type> PhD thesis, </type> <institution> ETH, </institution> <year> 1996. </year>
Reference: [50] <author> S. Grumbach and J. Su. </author> <title> Dense-order constraint databases. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The work [13] proposed an approach to achieve the optimal quality of constraint and spatial filtering. A number of works consider special constraint domains: integer order constraints [107]; set constraints [108]; dense-order constraints <ref> [50] </ref>. Linear constraints over reals have drawn special attention [1,12,51,126]. The use of constraints in spatial database queries was addressed in [105]. The work [120] used constraints to describe incomplete information.
Reference: [51] <author> S. Grumbach, J. Su, and C. Tollu. </author> <title> Linear constraint databases. </title> <note> In Proceedings of the LCC; To appear in LNCS Springer-Verlag volume, </note> <year> 1995. </year>
Reference: [52] <author> V. Gupta, R. Jagadeesan, and V. A. Saraswat. </author> <title> Truly concurrent constraint programming. </title> <editor> In U. Montanari and V. Sassone, editors, </editor> <booktitle> CONCUR96 - Concurrency Theory, volume 1119 of LNCS, </booktitle> <year> 1996. </year>
Reference: [53] <author> V. Gupta, R. Jagadeesan, and V. A. Saraswat. </author> <title> Computing with continuous change. </title> <journal> Science of Computer Programming, </journal> <note> To appear. </note>
Reference: [54] <author> V. Gupta, R. Jagadeesan, V. A. Saraswat, and D. G. Bobrow. </author> <title> Programming in hybrid constraint languages. </title> <editor> In Antsaklis, Kohn, Nerode, and Sastry, editors, </editor> <booktitle> Hybrid Systems II, volume 999 of LNCS. </booktitle> <publisher> Springer Verlag, </publisher> <month> November </month> <year> 1995. </year>
Reference-contexts: The resulting framework is quite simple mathematically and a very powerful basis for compositional modeling <ref> [54] </ref>.
Reference: [55] <author> M.R. Hansen, B.S. Hansen, P. Lucas, and P. van Emde Boas. </author> <title> Integrating relational databases and constraint languages. </title> <journal> Computer Languages, </journal> <volume> 14(2) </volume> <pages> 63-82, </pages> <year> 1989. </year>
Reference-contexts: Existing DBMS do not handle constraints as stored data; and CLP implementation techniques need to be developed to deal with large amounts of persistent data. The work <ref> [55] </ref> considered polynomial equality constraints as rules, taking advantage of their adirectionality. [76] proposed a framework for integrating abstract constraints into database query languages by providing a number of design principles, and studied, mostly in terms of expressiveness and complexity, a number of specific instances.
Reference: [56] <author> M. Haralick and J. Elliot. </author> <title> Increasing tree-search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 263-313, </pages> <year> 1980. </year>
Reference-contexts: When moving forward, to extend a partial solution, some consistency inference can be carried out to prune the remaining problem space and help decide which variable and value to choose next <ref> [56] </ref>. These methods, which vary in the strength of constraint inference (propagation), try to find a cost effective balance between pruning and overhead. Look-back schemes are invoked when the algorithm encounters a dead end. <p> Often some form of the "fail first principle" (which chooses the most constrained variable first) is employed in an attempt to prune large portions of the search space by failing high up in the backtrack search tree (e.g., <ref> [56] </ref>). Stochastic search In the last few years, greedy local search strategies have been reintroduced into the satisfiability and constraint satisfaction literature. These algorithms incrementally alter inconsistent value assignments to all the variables. They use a "repair" or "hill climbing" metaphor to move towards more and more complete solutions [96].
Reference: [57] <author> S. Haridi and S. Janson. </author> <title> Kernel Andorra Prolog and its Computational Model. </title> <booktitle> In Proceedings of the International Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Examples are the semantics based on traces and closure operators [7,114], and those based on truly concurrent models like Petri nets [98,52]. Languages based directly upon the CC idea are Oz [117], AKL <ref> [57] </ref>, and, partly, CIAO [64]. <p> Languages like AKL <ref> [57] </ref>, Oz [117], and CIAO [64] are essentially based on the CC ideas, although they add many features mainly because of application needs and of efficiency reasons. For example, AKL employs a model of computation based on the so-called Andorra principles, which basically leads to executing all deterministic steps first.
Reference: [58] <author> R. Helm, T. Huynh, C. Lassez, and K. Marriott. </author> <title> A linear constraint technology for interactive graphic systems. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> pages 301-309, </pages> <year> 1992. </year> <month> 30 </month>
Reference-contexts: Examples include QOCA <ref> [58] </ref>, which solves simultaneous linear equation and inequality constraints while optimizing a quadratic expression, Bramble [46] and Juno-2 [65] which use numerical solvers, Indigo [9], an interval propagation algorithm for inequality constraints, and DETAIL [67] and Ultraviolet [10], both of which are hybrid algorithms supporting both local propagation and cycle solvers.
Reference: [59] <author> P. Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference: [60] <author> P. Van Hentenryck. </author> <title> Parallel Constraint Satisfaction in Logic Programming. </title> <booktitle> In International Conference on Logic Programming, </booktitle> <pages> pages 165-180, </pages> <address> Lisbon, Portugal, June 1989. </address> <publisher> MIT Press. </publisher>
Reference: [61] <author> P. Van Hentenryck. </author> <title> Constraint logic programming. </title> <journal> Knowledge Engineering Review, </journal> <volume> 6(6):151 - 194, </volume> <year> 1991. </year>
Reference: [62] <author> P. Van Hentenryck, V. A. Saraswat, and Y. Deville. </author> <title> Constraint processing in cc(fd). </title> <editor> In A. Podelski, editor, </editor> <title> Constraint Programming : Basics and Trends. </title> <publisher> Springer Verlag, LNCS 910, </publisher> <year> 1995. </year>
Reference-contexts: Facilities for controlling the generation of constraints (forward rules, conditionals, annotations) were provided, though without a clear declarative foundation. This is even more so in recently developed languages such as cc (fd) 5 <ref> [62] </ref>, where constraint propagation methods can be specified in the language. In this way, the underlying constraint solver can be tailored to the users' needs, achieving the so-called glass-box approach (Section 3.7.1). <p> This is called the glass-box approach, in contrast with the original CLP idea of the constraint solver as a black box. Building on progress in the area of Concurrent Constraint Programming some languages provide constructs for defining the propagation of a constraint within the language (examples are cc (fd) <ref> [62] </ref> and clp (fd) [23]). Some others propose to view a constraint as a Boolean expression. The Boolean variable is true if the constraint is necessarily true (entailed by the other constraints). The Boolean variable is false if the negation of the constraint is entailed by the other constraints.
Reference: [63] <author> M. Hermenegildo, K. Marriott, G. Puebla, and P. Stuckey. </author> <title> Incremental Analysis of Logic Programs. </title> <booktitle> In International Conference on Logic Programming, </booktitle> <pages> pages 797-811. </pages> <publisher> MIT Press, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: Such global analysis has also been applied to concurrent CP systems, where one of the most important objectives is to reduce suspension and resumption of goals and synchronization overhead [21,33,91,15,44]. Finally, recent progress in incremental global analysis (e.g., <ref> [63] </ref>) has the potential to solve most remaining problems related to supporting large programs and the use of global analysis in the interactive program development environment that is common in constraint programming systems.
Reference: [64] <author> M. </author> <title> Hermenegildo and the CLIP group. Some Methodological Issues in the Design of CIAO A Generic, Parallel Concurrent Constraint System. </title> <booktitle> In Principles and Practice of Constraint Programming, </booktitle> <volume> LNCS 874, </volume> <pages> pages 123-133. </pages> <publisher> Springer-Verlag, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Examples are the semantics based on traces and closure operators [7,114], and those based on truly concurrent models like Petri nets [98,52]. Languages based directly upon the CC idea are Oz [117], AKL [57], and, partly, CIAO <ref> [64] </ref>. <p> Languages like AKL [57], Oz [117], and CIAO <ref> [64] </ref> are essentially based on the CC ideas, although they add many features mainly because of application needs and of efficiency reasons. For example, AKL employs a model of computation based on the so-called Andorra principles, which basically leads to executing all deterministic steps first. <p> This approach is used extensively in the implementation of constraint solvers in systems such as ECL i PS e [32], SIC-Stus, and CIAO <ref> [64] </ref>. A last approach is motivated by the need for adding support for global constraints. In that case the definition of the constraint is done in an imperative language and linked with the CP system using an object oriented protocol (used in CHARME, ILOG Solver, Oz, CHIP).
Reference: [65] <author> A. Heydon and G. Nelson. </author> <title> The Juno-2 constraint-based drawing editor. </title> <type> Technical Report 131a, </type> <institution> DEC Systems Research Center, </institution> <address> Palo Alto, CA, </address> <year> 1994. </year>
Reference-contexts: Examples include QOCA [58], which solves simultaneous linear equation and inequality constraints while optimizing a quadratic expression, Bramble [46] and Juno-2 <ref> [65] </ref> which use numerical solvers, Indigo [9], an interval propagation algorithm for inequality constraints, and DETAIL [67] and Ultraviolet [10], both of which are hybrid algorithms supporting both local propagation and cycle solvers. 3.4 Constraint Programming in Operations Research Operations Research is a vast field represented by departments in major universities
Reference: [66] <author> C. Holzbaur. </author> <title> Metastructures vs. Attributed Variables in the Context of Extensible Unification. </title> <booktitle> In International Symposium on Programming Language Implementation and Logic Programming, volume 631 of LNCS, </booktitle> <pages> pages 260-268. </pages> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1992. </year>
Reference: [67] <author> H. Hosobe, S. Matsuoka, and A. Yonezawa. </author> <title> Generalized local propagation: A framework for solving constraint hierarchies. </title> <editor> In E. C. Freuder, editor, </editor> <booktitle> Proceedings of the International Conference on Principles and Practice of Constraint Programming, volume 1118, </booktitle> <address> Boston, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Examples include QOCA [58], which solves simultaneous linear equation and inequality constraints while optimizing a quadratic expression, Bramble [46] and Juno-2 [65] which use numerical solvers, Indigo [9], an interval propagation algorithm for inequality constraints, and DETAIL <ref> [67] </ref> and Ultraviolet [10], both of which are hybrid algorithms supporting both local propagation and cycle solvers. 3.4 Constraint Programming in Operations Research Operations Research is a vast field represented by departments in major universities and industrial settings around the world.
Reference: [68] <author> J. Jaffar and J.-L. Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the of the ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <year> 1987. </year>
Reference-contexts: However, what really counted was the observation that term equations are just constraints of a special type and that thus the unification algorithm is just a special kind of constraint solving algorithm [81]. This has led to the definition of a general framework, called Constraint Logic Programming (CLP) <ref> [68] </ref>, which has all the features of logic programming but is parametric with respect to the kind of constraints used within the language.
Reference: [69] <author> J. Jaffar and M.J. Maher. </author> <title> Constraint Logic Programming: A Survey. </title> <journal> Journal of Logic Programming, </journal> <volume> 19 & 20 </volume> <pages> 503-581, </pages> <year> 1994. </year>
Reference: [70] <author> J. Jaffar, S. Michaylov, P. Stuckey, and R. Yap. </author> <title> An abstract machine for CLP(R). </title> <booktitle> In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 128-139, </pages> <address> San Fran-cisco, </address> <month> June </month> <year> 1992. </year> <month> 31 </month>
Reference: [71] <author> J. Jaffar, S. Michaylov, P. Stuckey, and R. Yap. </author> <title> The CLP(R) Language and System. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <year> 1992. </year>
Reference-contexts: Although the CLP scheme immediately gave rise to languages like CLP (R) <ref> [71] </ref> and Prolog III [25], it took the practical experience of application-oriented research to link CLP to the propagation algorithms developed earlier in AI.
Reference: [72] <editor> M. Jampel, E. Freuder, and M. Maher, editors. </editor> <booktitle> Over-Constrained Systems, number 1106 in LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Insights into problem structure have supported and connected these research avenues. Growing interest in applications has motivated increasing interest in representation issues. For example, attention is being paid to overconstrained systems <ref> [72] </ref>, where preferences must be expressed. Modeling is emerging as a major challenge: automating the formulation of real problems in a suitable form for efficient algorithmic processing. The classic AI constraint paradigm is the constraint satisfaction problem (CSP). <p> Moreover, better theoretical and empirical understanding is needed of the relationship between real-world problem parameters and search methods. An important issue is that of over-constrained constraint problems <ref> [72] </ref>, since most real-life problems are indeed over-constrained. Thus either the constraint domain, or the language itself, should be flexible enough to be able to deal with such situations and solve them in some satisfactory way.
Reference: [73] <author> P. Jeavons, D. Cohen, and M. Gyssens. </author> <title> A test for tractability. </title> <editor> In E. C. Freuder, editor, </editor> <booktitle> Principles and Practice of Constraint Programming, number 1118 in LNCS, </booktitle> <pages> pages 267-281. </pages> <publisher> Springer-Verlag, </publisher> <address> Boston, MA, </address> <year> 1996. </year>
Reference-contexts: These classes justify the intuition that problems having large domains and higher arity constraints are generally harder. The investigation of classes of constraints that ensure tractability in whichever way they are combined has related tractability to algebraic closure properties of the constraints <ref> [73] </ref>. Finally, special classes of constraints associated with temporal reasoning have received much attention in the last decade. Tractable classses include subsets of Allen's (qualitative) interval algebra [3], as well as quantitative binary linear inequalities over the reals, of the form X Y a [28].
Reference: [74] <editor> J.P. Jouannaud, editor. </editor> <booktitle> Proceedings of the 1st Conference on Constraints in Computational Logic (CCL), number 845 in LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Moreover, it has also brought fundamental changes in areas that were extensively based on equational term rewriting, like Computational Logic, since researchers in that area realized that they could switch to a more powerful and expressive paradigm by moving from term equalities to constraints <ref> [74] </ref>. Although the CLP scheme immediately gave rise to languages like CLP (R) [71] and Prolog III [25], it took the practical experience of application-oriented research to link CLP to the propagation algorithms developed earlier in AI.
Reference: [75] <author> F. Kabanza, J.-M. Stevenne, and P. Wolper. </author> <title> Handling infinite temporal data. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1990. </year>
Reference-contexts: A restricted form of linear constraints, called linear repeating points, was used to model infinite sequences of time points (e.g., <ref> [75] </ref>). More recent works on deductive databases (e.g., [100]) considered manipulation and repositioning of constraints for optimizing recursion. Algorithms for constraint algebra operators such as constraint joins, and generic global optimization were studied in [12].
Reference: [76] <author> P. Kanellakis, G. Kuper, and P. Revesz. </author> <title> Constraint query languages. </title> <journal> Journal of Computer and System Sciences, </journal> <pages> pages 26-52, </pages> <year> 1995. </year>
Reference-contexts: The use of arithmetic constraints for semantic query optimization and optimization of SQL queries involving constraints has been extensively investigated. The area of constraint databases (CDBs), in which constraints are integrated as a basic data-type, has emerged recently, prompted by the seminal work of <ref> [76] </ref>. Constraint databases naturally extend relational, deductive or object-oriented databases by making feasible the use of constraints to represent possibly infinite, but finitely representable complex data. This has turned out to be natural for many application domains, since constraints possess great modeling power. <p> Existing DBMS do not handle constraints as stored data; and CLP implementation techniques need to be developed to deal with large amounts of persistent data. The work [55] considered polynomial equality constraints as rules, taking advantage of their adirectionality. <ref> [76] </ref> proposed a framework for integrating abstract constraints into database query languages by providing a number of design principles, and studied, mostly in terms of expressiveness and complexity, a number of specific instances.
Reference: [77] <author> P. Kanellakis, S. Ramaswamy, D.E. Vengroff, and J.S. Vitter. </author> <title> Indexing for data models with constraints and classes. </title> <booktitle> In Symposium on Principles of Database Systems, </booktitle> <year> 1993. </year>
Reference-contexts: More recent works on deductive databases (e.g., [100]) considered manipulation and repositioning of constraints for optimizing recursion. Algorithms for constraint algebra operators such as constraint joins, and generic global optimization were studied in [12]. The work <ref> [77] </ref> proposed an efficient data structure for secondary storage suitable for indexing constraints, that achieves not only the optimal space and time complexity as priority search trees, but also full clustering. The work [13] proposed an approach to achieve the optimal quality of constraint and spatial filtering.
Reference: [78] <author> A.D. Kelly, A. Macdonald, K. Marriott, P.J. Stuckey, and R.H.C. Yap. </author> <title> Effectiveness of optimizing compilation for clp(r). </title> <booktitle> In Proceedings of the Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 37-51. </pages> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference: [79] <author> G. Kondrak and P. van Beek. </author> <title> A theoretical evaluation of selected backtracking algorithms. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Iintelligence, </booktitle> <pages> pages 541-547, </pages> <address> Montreal, </address> <year> 1995. </year>
Reference: [80] <author> G. M. Kuper. </author> <title> Aggregation in constraint databases. </title> <booktitle> In Proceedings of the Workshop on Principles and Practice of Constraint Programming, </booktitle> <year> 1993. </year>
Reference-contexts: Linear constraints over reals have drawn special attention [1,12,51,126]. The use of constraints in spatial database queries was addressed in [105]. The work [120] used constraints to describe incomplete information. Constraint aggregation was studied in <ref> [80] </ref>. 3.3 Constraint Programming in User Interfaces Constraint programming has a long history of use in graphics and user interfaces, beginning with Sketchpad system [123].
Reference: [81] <author> J-.L. Lassez, M.J. Maher, and K. Marriott. </author> <title> Foundations of Deductive Databases and Logic Programming, chapter Unification Revisited. </title> <publisher> Morgan Kaufmann Publishers, Inc, </publisher> <year> 1988. </year>
Reference-contexts: However, what really counted was the observation that term equations are just constraints of a special type and that thus the unification algorithm is just a special kind of constraint solving algorithm <ref> [81] </ref>. This has led to the definition of a general framework, called Constraint Logic Programming (CLP) [68], which has all the features of logic programming but is parametric with respect to the kind of constraints used within the language.
Reference: [82] <author> J.-L. Lauriere. </author> <title> A language and a program for stating and solving combinatorial problems. </title> <journal> Artificial Intelligence, </journal> <volume> 10(1), </volume> <year> 1978. </year>
Reference-contexts: In these systems, there was still no notion of constraint programming; rather the problem was modeled directly via sets of constraints which were solved using an algorithm. (Mention must also be made of the remarkably prescient systems REF-ARF [34] and ALICE <ref> [82] </ref>. <p> A classic shared interest of CP and OR is declarative programming. In fact, in terms of languages, the interaction between CP and OR goes back at least to <ref> [82] </ref>. The formulation of a mixed integer program is quintessentially declarative. Moreover, the algebraic modeling languages of OR (such as GAMS, AMPL, AIMMS) provide an example of a very pure form of declarative programming system.
Reference: [83] <author> A. Levy, I.S. Mumick, and Y. Sagiv. </author> <title> Query optimization by predicate move-around. </title> <booktitle> In Proceedings of the VLDB Conference, </booktitle> <year> 1994. </year> <month> 32 </month>
Reference: [84] <author> A. Levy and Y. Sagiv. </author> <title> Constraints and redundancy in datalog. </title> <booktitle> In Pro--ceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1992. </year>
Reference-contexts: This prompted a series of work on the repositioning of constraints in (recursive and non-recursive) database queries for the purpose of optimization, such as pushing constraint selections in [119,83] or finding redundant parts of evaluation trees using query constraints in <ref> [84] </ref>. The promise of the emerging constraint database work is that it will provide a uniform framework for the declarative and efficient querying of symbolically 12 represented data.
Reference: [85] <author> Liang-Liang Li, Mike Reeve, Kees Schuerman, Andre Veron, Jacques Bel-lone, Claudine Pradelless, Zissis Palaskas, Takis Stamatopoulos, Dominic Clark, S. Doursenot, Chris Rawlings, Jack Shirazi, and Guisseppe Sardu. APPLAUSE: </author> <title> Applications using the ElipSys parallel CLP system. </title> <booktitle> In Proceedings of the International Conference on Logic Programming, </booktitle> <pages> pages 847-848, </pages> <year> 1993. </year>
Reference: [86] <author> A. K. Mackworth. </author> <title> Constraint satisfaction. </title> <booktitle> Encyclopedia of Artificial Intelligence, </booktitle> <pages> pages 285-293, </pages> <year> 1992. </year>
Reference: [87] <author> A. K. Mackworth and E. C. Freuder. </author> <title> The complexity of some polynomial network consistency algorithms for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 25, </volume> <year> 1985. </year>
Reference: [88] <author> A. K. Mackworth and E. C. Freuder. </author> <title> The complexity of constraint satisfaction revisited. </title> <journal> Artificial Intelligence, </journal> <volume> 25 </volume> <pages> 57-62, </pages> <year> 1993. </year>
Reference: [89] <author> A.K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8(1), </volume> <year> 1977. </year>
Reference: [90] <author> M. J. Maher. </author> <title> Logic semantics for a class of committed-choice programs. </title> <booktitle> In Proceedings of the International Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Maher provided a breakthrough with his analysis that entailment lay at the heart of the synchronization mechanisms <ref> [90] </ref>. On this basis, Saraswat developed the simple but general concurrent constraint (CC) programming framework which views computation as arising from the activities of agents that communicate via a shared set of variables on which they can either impose ("tell") or test ("ask") for the presence of some constraints [112].
Reference: [91] <author> K. Marriott, M. Garca de la Banda, and M. Hermenegildo. </author> <title> Analyzing Logic Programs with Dynamic Scheduling. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 240-254. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1994. </year>
Reference: [92] <author> K. Marriott and P. Stuckey. </author> <title> The 3 R's of Optimizing Constraint Logic Programs: Refinement, Removal, and Reordering. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <year> 1992. </year>
Reference: [93] <author> K. McAloon and C. Tretkoff. </author> <title> Logic, modeling and programming. </title> <journal> Annals of Operations Research, </journal> <note> To appear. </note>
Reference-contexts: A case in point is the 2LP language ("Linear Programming and Logic Programming") which is designed to encapsulate a part of the practice of OR, namely mixed integer programming and extensions <ref> [93] </ref>. Work in OR on discrete optimization has also contributed to developments in CP. Indeed, some of the recent success in CP on scheduling problems can trace back to [17] on the Job Shop Problem.
Reference: [94] <author> M. Meier. Grace User Manual, </author> <year> 1996. </year> <note> Available at http://www.ecrc.de/eclipse/html/grace/grace.html. </note>
Reference-contexts: A run-time technique which is currently receiving much attention is the use of visualization, both of the search space and of the constraint store at different points of execution <ref> [94] </ref>. 21 3.8 Constraint Programming Language Implementation Techniques Compilers and abstract machines. The programming component that CP offers as an essential addition to the constraint solving capabilities is implemented in an efficient way in most current CP programming systems via compilation.
Reference: [95] <author> S. Minton. </author> <title> Automatically Configuring Constraint Satisfaction Programs: </title>
Reference-contexts: We need to automate the process of moving from problem descriptions natural to the problem domain to problem descriptions designed for efficient solution. A variety of problem-solving techniques are now available to us, but synthesizing appropriate algorithms for specific tasks should be automated <ref> [95] </ref>. In addition, robust constraint computation must cope with change in the world and in models, and with noise (e.g., in data), and uncertainity (e.g., in parameter values). Towards constraint-based distributed systems. Another challenge for constraint programming systems is related to the role of such systems in network-wide programming.
References-found: 95

