URL: ftp://ftp.cs.vu.nl/pub/papers/theory/IR-445.ps.Z
Refering-URL: http://www.cs.vu.nl/vakgroepen/ti/ftpindex.html
Root-URL: 
Title: Comparative semantics for a process language with probabilistic choice and non-determinism  
Author: J. I. den Hartog 
Abstract: In this report a comparative semantics is given for a language L p containing probabilistic and non-deterministic choice. The effects of interpreting these operators as local or global are investigated. For three of the possible combinations an operational model and a denotational model are given and compared. First models for local probabilistic choice and local non-deterministic choice are given using a generative approach. By adjusting these models slightly models for global probability and local non-determinism are obtained. Finally models for local probability and global non-determinism are presented using a stratified approach. For use with the denotational models a construction of a complete ultra-metric space of finite multisets is given. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. America and J.J.M.M. Rutten. </author> <title> Solving reflexive domain equations in a category of complete metric spaces. </title> <journal> Journal of Computer Systems and Sciences, </journal> <volume> 39 </volume> <pages> 343-375, </pages> <year> 1989. </year>
Reference-contexts: Other than this the atomic actions are left without an interpretation. The meaning of an action b will simply be b itself. The atomic actions are supplemented with the probability that this action occurs. This results in the set PAct of pairs in <ref> [0; 1] </ref> fi Act and PIAct of pairs in 6 [0; 1] fi IAct. The variable ff ranges over PAct, fi ranges over PIAct and ; ; range over [0; 1]. The symbol ffi is used to denote deadlock. <p> The meaning of an action b will simply be b itself. The atomic actions are supplemented with the probability that this action occurs. This results in the set PAct of pairs in <ref> [0; 1] </ref> fi Act and PIAct of pairs in 6 [0; 1] fi IAct. The variable ff ranges over PAct, fi ranges over PIAct and ; ; range over [0; 1]. The symbol ffi is used to denote deadlock. Furthermore the following notation is used: PIAct ffi = PIAct + [0; 1] fi f ffi g, IAct 1 ffi = IAct <p> This results in the set PAct of pairs in <ref> [0; 1] </ref> fi Act and PIAct of pairs in 6 [0; 1] fi IAct. The variable ff ranges over PAct, fi ranges over PIAct and ; ; range over [0; 1]. The symbol ffi is used to denote deadlock. Furthermore the following notation is used: PIAct ffi = PIAct + [0; 1] fi f ffi g, IAct 1 ffi = IAct 1 + IAct fl f ffi g. To describe recursion a set PVar of procedure variables is used. <p> <ref> [0; 1] </ref> fi Act and PIAct of pairs in 6 [0; 1] fi IAct. The variable ff ranges over PAct, fi ranges over PIAct and ; ; range over [0; 1]. The symbol ffi is used to denote deadlock. Furthermore the following notation is used: PIAct ffi = PIAct + [0; 1] fi f ffi g, IAct 1 ffi = IAct 1 + IAct fl f ffi g. To describe recursion a set PVar of procedure variables is used. The variable x ranges over PVar. <p> Recursive domain equations are solved up to isomorphism, yielding instead the domain equation (or more accurately a domain isometry) M ' F (M ). The method of solving recursive domain equations over metric spaces comes from [7], <ref> [1] </ref> and [26]. First some basic notions is introduced and then the functors used are given. More on domain equations can be found in e.g. [6]. <p> -algebra A over X is a collection of subsets which is closed under com plement and countable union. (b) The collection B (X) of Borel sets over X is the least -algebra containing all open sets. (c) A (Borel) probability measure on X is a function : B (X) ! <ref> [0; 1] </ref> such that (X) = 1 and is -additive, i.e. ([ i2I A i ) = P i2I (A i ) for countable number of disjoint sets A i . (d) A probability measure is said to have compact support if vanishes outside some compact set K, i.e. (X n <p> The action level consists of a set of possible actions Act which may be followed by a process, i.e. an element of the domain P d . In the generative model the actions are labeled with the probability of this action occurring (number in <ref> [0; 1] </ref>), yielding PAct as the set of possible actions. The pairing of an action with the process that may follow is done by fi. The + provides the choice between a single action or an action followed by a process. <p> Instead probabilities occur as transitions themselves. The non-deterministic choice does not need to be made explicit by the special action any more. The role of the - (dividing the possible actions into groups) is now incorporated into the transitions. Obs = Act <ref> [ [0; 1] </ref> In the following transition system negative premises are used several times. Correctness of the transition system can be shown using induction on the weight function wgt. Definition 7.1 The transition system T ps is given by T ps = (Decl fi Res; Act [ [0; 1]; ! ; <p> Instead probabilities occur as transitions themselves. The non-deterministic choice does not need to be made explicit by the special action any more. The role of the - (dividing the possible actions into groups) is now incorporated into the transitions. Obs = Act [ <ref> [0; 1] </ref> In the following transition system negative premises are used several times. Correctness of the transition system can be shown using induction on the weight function wgt. Definition 7.1 The transition system T ps is given by T ps = (Decl fi Res; Act [ [0; 1]; ! ; Spec). <p> Obs = Act <ref> [ [0; 1] </ref> In the following transition system negative premises are used several times. Correctness of the transition system can be shown using induction on the weight function wgt. Definition 7.1 The transition system T ps is given by T ps = (Decl fi Res; Act [ [0; 1]; ! ; Spec). A transition ((Djr); a; (Djr 0 )) 2 ! is written as r a ! r 0 . Spec is given in two parts. <p> Obs = Act [ <ref> [0; 1] </ref> In the following transition system negative premises are used several times. Correctness of the transition system can be shown using induction on the weight function wgt. Definition 7.1 The transition system T ps is given by T ps = (Decl fi Res; Act [ [0; 1]; ! ; Spec). A transition ((Djr); a; (Djr 0 )) 2 ! is written as r a ! r 0 . Spec is given in two parts. <p> 2 if s 2 6! r 1 (Merge) s 2 ks 1 ! s 1 kr if s 2 6! r 1 s 1 ! r 1 s 2 ! r 2 t ! r 1 kr 2 (Sync) The second part concerns the transitions labeled with a probability 2 <ref> [0; 1] </ref>. * s 1 + s 2 ! s 1 (Chance) s 1 + s 2 ! s 2 s 1 ! r s 1 ; s 2 ! r; s 2 (Seq ) s 1 ! r ! r + s 2 (Choice ) s 2 + s 1
Reference: [2] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Process algebra with partial choice. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <volume> LNCS 836 (CONCUR'94), </volume> <pages> pages 465-480. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: The term probability is used for the different options created by the second, probabilistic, kind of choice. 1 Two different interpretations of choice, local and global, are investigated. Local and global non-deterministic choice have been studied extensively. For instance in [5], [19] and more recently in <ref> [2] </ref> where local choice is called static choice and global choice is called dynamic choice. For probabilistic choice, the interpretation as local or global has not been investigated much. The difference between the two interpretations of choice is the influence of the environment. <p> This means that the statement can be implemented in two ways either by s 1 or by s 2 (i.e. s has two possible behaviors). Since the choices do not depend on the environment they can be made beforehand (illustrating the link with static choice from <ref> [2] </ref>). Global non-determinism takes the environment into account. If one of the alternatives starts with communication with the environment then this alternative will only be chosen if the environment is willing to communicate. This makes it possible for the environment to determine which alternative is chosen. <p> The choice is made only when the first action of one of the alternatives actually executes (illustrating the link with dynamic choice from <ref> [2] </ref>). 7 The statement s 1 ks 2 denotes parallel composition and also causes non--determinism. If the non-determinism is local, a failed synchronization attempt (from either s 1 or s 2 ) will result in deadlock.
Reference: [3] <author> J.C.M. Baeten, J.A. Bergstra, and S.A. Smolka. </author> <title> Axiomatizing probabilistic processes: ACP with generative probabilities. </title> <journal> Information and Computation, </journal> <volume> 121 </volume> <pages> 234-255, </pages> <year> 1995. </year>
Reference-contexts: To adequately reason about such sequences as a whole, distributions are used. The modeling of probability has been the subject of various papers. The usual approach, when dealing with probability, is to replace non-deterministic choice by probabilistic choice. In [17], [28] and <ref> [3] </ref> this approach is followed. However, interpreting all choices as probabilistic choices does not seem to be appropriate, especially when there is also parallel composition. When replacing non-deterministic choice with probabilistic choice, parallel composition will either become probabilistic, or needs to be restricted. <p> The different semantics are given using SOS and bisimulation. In [22] bisimulation for reactive probabilistic processes has been studied in a testing setting. A testing algorithm which can distinguish non-bisimilar processes with probability 1 * (for any given * &gt; 0) is given. In <ref> [3] </ref> a calculus PrACP , derived from ACP (from [8]) is introduced. In the calculus PrACP the operator for choice `+' is replaced by a probabilistic version `+ p '. The parallel composition `k' is also made probabilistic by replacing it with an operator `k r;s '.
Reference: [4] <author> C. Baier and M. Kwiatkowska. </author> <title> Domain equations for probabilistic processes. </title> <editor> In M. Mislove, M. Nivat, C. Papadimitriou, C. Palamidessi, and J. Parrow, editors, ENTCS, </editor> <volume> volume 7. </volume> <publisher> Elsevier, </publisher> <year> 1997. </year>
Reference-contexts: An example is given in subsection 5.3 were the functor is used in specifying a linear domain. The functor is that same as the functor M 0 1 introduced in [30] restricted to CUMS. A more detailed description and more general results can be found there. Also in <ref> [4] </ref> a functor yielding distributions (called evaluations in [4]) is given on the category CUMS. A comparison with set-theoretic and complete partial order approaches can be found there. <p> The functor is that same as the functor M 0 1 introduced in [30] restricted to CUMS. A more detailed description and more general results can be found there. Also in <ref> [4] </ref> a functor yielding distributions (called evaluations in [4]) is given on the category CUMS. A comparison with set-theoretic and complete partial order approaches can be found there.
Reference: [5] <author> J.W. de Bakker, J.-J.Ch. Meyer, E.-R. Olderog, and J.I. Zucker. </author> <title> Transition systems, metric spaces and ready sets in the semantics of uniform concurrency. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36 </volume> <pages> 158-224, </pages> <year> 1988. </year>
Reference-contexts: The term probability is used for the different options created by the second, probabilistic, kind of choice. 1 Two different interpretations of choice, local and global, are investigated. Local and global non-deterministic choice have been studied extensively. For instance in <ref> [5] </ref>, [19] and more recently in [2] where local choice is called static choice and global choice is called dynamic choice. For probabilistic choice, the interpretation as local or global has not been investigated much. The difference between the two interpretations of choice is the influence of the environment.
Reference: [6] <editor> J.W. de Bakker and E.P. de Vink. </editor> <title> Control Flow Semantics. </title> <booktitle> Foundations of Computing Series. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: The comparative semantics consists of giving an operational model, a denotational model and relating both models. For the semantics modeling metric domains are used. An overview of and introduction in metric semantics can be found in <ref> [6] </ref>. For the denotational model for global interpretation of probability a branching domain for probabilistic processes is required. For this purpose the functor M f is introduced that, for a space S, gives the space M f (S) of finite multisets over S. <p> Especially the limitation on the parallel composition seems strong. 3 2 Mathematical preliminaries In this section some notation and lemmas that are needed in the sequel are given. The notions of a compact set, a complete metric space and an ultra-metric space are assumed known (See e.g. <ref> [6] </ref>). <p> The method of solving recursive domain equations over metric spaces comes from [7], [1] and [26]. First some basic notions is introduced and then the functors used are given. More on domain equations can be found in e.g. <ref> [6] </ref>. <p> The constant functor and the ff-identity functor are locally contractive. The rest of these functors are locally non-expansive. More on these functors can be found in e.g. <ref> [6] </ref>. In addition the following functors are introduced here, 1. finite multisets (M f ), 2. distributions (). These two functors are described in more detail below. The multiset functor is combined with the powerset functor when defining the domains.
Reference: [7] <author> J.W. de Bakker and J.I. Zucker. </author> <title> Processes and the denotational semantics of concurrency. </title> <journal> Information and Control, </journal> <volume> 54 </volume> <pages> 70-120, </pages> <year> 1982. </year>
Reference-contexts: Recursive domain equations are solved up to isomorphism, yielding instead the domain equation (or more accurately a domain isometry) M ' F (M ). The method of solving recursive domain equations over metric spaces comes from <ref> [7] </ref>, [1] and [26]. First some basic notions is introduced and then the functors used are given. More on domain equations can be found in e.g. [6].
Reference: [8] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information and Computation, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference-contexts: In [22] bisimulation for reactive probabilistic processes has been studied in a testing setting. A testing algorithm which can distinguish non-bisimilar processes with probability 1 * (for any given * &gt; 0) is given. In [3] a calculus PrACP , derived from ACP (from <ref> [8] </ref>) is introduced. In the calculus PrACP the operator for choice `+' is replaced by a probabilistic version `+ p '. The parallel composition `k' is also made probabilistic by replacing it with an operator `k r;s '. In [28] a calculus PCSP is introduced.
Reference: [9] <author> M. Bernardo and R. Gorrieri. </author> <title> A tutorial on EMPA: A theory of concurrent processes with nondeterminism, priorities, probabilities and time. </title> <type> Technical Report UBLCS-96-17, </type> <institution> University of Bologna, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: For the global interpretation, however, the use of zero probability could be used to express precedence. s 1 + 0 s 2 behaves like s 2 (with probability 1) if possible, but like s 1 if s 2 deadlocks. This way of expressing precedence is also used in <ref> [9] </ref> and in [29]. To be able to handle situations like s 1 + 1 (s 2 + 1 s 3 ) (where s 1 has precedence over s 2 and s 2 has 47 precedence over s 3 ) the probabilistic choice would have to be fully stratified.
Reference: [10] <editor> M.M. Bonsangue. </editor> <title> Topological Dualities in Semantics. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <month> November </month> <year> 1996. </year> <month> 48 </month>
Reference-contexts: The is used to distinguish alternatives belonging to different non-deterministic alternatives. A way to avoid using is to somehow join together the transitions that belong to one non-deterministic alternative. Bundling together transitions can be done by using hyper-transition systems as introduced in <ref> [10] </ref> and [11] or probabilistic automata as introduced in [27]. Both these methods could use a (more) systematic approach to defining the possible transitions, for instance, an adjusted form of transition system specifications (i.e. in the style of SOS [25]) would be an option.
Reference: [11] <author> M.M. Bonsangue and J.N. Kok. </author> <title> Specifying computations using hyper tran-sition systems. </title> <booktitle> In Proceedings of the 22nd International Symposium on Mathematical Foundations of Computer Science (MFCS '97), </booktitle> <pages> pages 169-178, </pages> <month> August </month> <year> 1997. </year>
Reference-contexts: The is used to distinguish alternatives belonging to different non-deterministic alternatives. A way to avoid using is to somehow join together the transitions that belong to one non-deterministic alternative. Bundling together transitions can be done by using hyper-transition systems as introduced in [10] and <ref> [11] </ref> or probabilistic automata as introduced in [27]. Both these methods could use a (more) systematic approach to defining the possible transitions, for instance, an adjusted form of transition system specifications (i.e. in the style of SOS [25]) would be an option.
Reference: [12] <author> F. van Breugel. </author> <title> Topological Models in Comparative Semantics. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <month> September </month> <year> 1994. </year> <title> Appeared with Birkhauser as Comparative Metric Semantics of Programming Languages. </title>
Reference-contexts: This rule is allowed because the limitation to guarded recursion prevents problems. The proofs can be given by using induction on the weight function introduced below. (Induction on a weight function was introduced in [20] and the systematic use is due to Van Breugel <ref> [12] </ref>.) Definition 3.2 wgt: Res ! N is given by wgt (E) = 0 wgt (x) = wgt (D (x)) + 1 wgt (s 1 ;s 2 ) = wgt (s 1 ) + 1; and similarly for `k wgt (s 1 ks 2 ) = 1 + wgt (s 1
Reference: [13] <author> F. van Breugel. </author> <title> Comparative Metric Semantics of Programming Languages. </title> <booktitle> Progress in Theoretical Computer Science. </booktitle> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1998. </year>
Reference: [14] <author> Bakker J.W. de and J.H.A. Warmerdam. </author> <title> Metric pomset semantics for a concurrent language with recursion. </title> <type> Technical Report CS-R9033, </type> <institution> Centrum voor Wiskunde en Informatica (CWI), </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: For a space S the finite multiset functor gives the space of all finite multisets over S. The way the multisets are coded is derived from the codings used in 10 pomsets and event-structures, see for example [18], [15] and [23]. The work here has been inspired by [31], <ref> [14] </ref> in which a metric approach to pomsets is followed. A countably infinite set , called the base set, is chosen. A natural example is N . In event-structures and pomsets elements of the base set are called the events or nodes.
Reference: [15] <author> H. Gaifman. </author> <title> Modeling concurrency by partial orders and nonlinear transition systems. </title> <booktitle> In LNCS 354 (REX'88), </booktitle> <pages> pages 467-488. </pages> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: Finite multisets suffice since the probabilistic choice is finite. For a space S the finite multiset functor gives the space of all finite multisets over S. The way the multisets are coded is derived from the codings used in 10 pomsets and event-structures, see for example [18], <ref> [15] </ref> and [23]. The work here has been inspired by [31], [14] in which a metric approach to pomsets is followed. A countably infinite set , called the base set, is chosen. A natural example is N .
Reference: [16] <author> R.J. van Glabbeek. </author> <title> The linear-branching time spectrum. </title> <booktitle> In LNCS 458 (CONCUR'90), </booktitle> <pages> pages 278-297. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: A linear domain, a mixed domain and two branching domains are given below. A model using a linear, mixed or branching domain are called a linear, mixed or branching model, respectively. In the style of <ref> [16] </ref> these models can be ordered by their distinguishing power. The situation here, however, is a lot simpler. There are two branching models, a denotational model and an operational-like model which distinguishes fewer statements than the denotational model.
Reference: [17] <author> R.J. van Glabbeek, S.A. Smolka, and B. Steffen. </author> <title> Reactive, generative and stratified models of probabilistic processes. </title> <journal> Information and Computation, </journal> <volume> 121 </volume> <pages> 59-80, </pages> <year> 1995. </year>
Reference-contexts: Also of interest are infinite sequences of probabilistic choices. To adequately reason about such sequences as a whole, distributions are used. The modeling of probability has been the subject of various papers. The usual approach, when dealing with probability, is to replace non-deterministic choice by probabilistic choice. In <ref> [17] </ref>, [28] and [3] this approach is followed. However, interpreting all choices as probabilistic choices does not seem to be appropriate, especially when there is also parallel composition. When replacing non-deterministic choice with probabilistic choice, parallel composition will either become probabilistic, or needs to be restricted. <p> In [27] these probabilistic automata are the starting point of the discussion whereas in this report, constructing the transition system for a statement in the language is also an important step. In <ref> [17] </ref> reactive, generative and stratified models are given for a calculus PCCS . In this calculus, based on Milner's SCCS [24] the non-deterministic choice has been replaced by probabilistic choice and the parallel composition is a synchronous product. The different semantics are given using SOS and bisimulation. <p> The terminology is due to <ref> [17] </ref>. The first type of model will be called generative. Generative models assign probability to actions such that the sum of probabilities for all actions is one or less. To find the probability of an action successive choices are combined into one. <p> The domain used here is not a purely stratified domain. It will not be necessary to completely stratify the probability. A non-deterministic choice is not combined with a following probabilistic choice, but successive probabilistic choices can still be combined. (This is not the case in <ref> [17] </ref> which deals, among others, with restriction.) Reactive models as introduced in [17] are not used. 3 The syntax of the language L p The language L p is based on a set of atomic actions Act which will be ranged over by a. <p> It will not be necessary to completely stratify the probability. A non-deterministic choice is not combined with a following probabilistic choice, but successive probabilistic choices can still be combined. (This is not the case in <ref> [17] </ref> which deals, among others, with restriction.) Reactive models as introduced in [17] are not used. 3 The syntax of the language L p The language L p is based on a set of atomic actions Act which will be ranged over by a.
Reference: [18] <author> J. Gricher. </author> <note> On partial languages. Fundamenta Informaticae, IV.2:427-498, </note> <year> 1981. </year>
Reference-contexts: Finite multisets suffice since the probabilistic choice is finite. For a space S the finite multiset functor gives the space of all finite multisets over S. The way the multisets are coded is derived from the codings used in 10 pomsets and event-structures, see for example <ref> [18] </ref>, [15] and [23]. The work here has been inspired by [31], [14] in which a metric approach to pomsets is followed. A countably infinite set , called the base set, is chosen. A natural example is N .
Reference: [19] <author> C.A.R. Hoare. </author> <title> Communicating sequential processes. </title> <booktitle> Series in Computer Science. Prentice-Hall International, </booktitle> <address> Englewood Cliffs, NJ, </address> <year> 1985. </year>
Reference-contexts: The term probability is used for the different options created by the second, probabilistic, kind of choice. 1 Two different interpretations of choice, local and global, are investigated. Local and global non-deterministic choice have been studied extensively. For instance in [5], <ref> [19] </ref> and more recently in [2] where local choice is called static choice and global choice is called dynamic choice. For probabilistic choice, the interpretation as local or global has not been investigated much. The difference between the two interpretations of choice is the influence of the environment.
Reference: [20] <author> J.N. Kok and J.J.M.M. Rutten. </author> <title> Contractions in comparing concurrency semantics. </title> <journal> Theoretical Computer Science, </journal> <volume> 76 </volume> <pages> 179-222, </pages> <year> 1990. </year>
Reference-contexts: This rule is allowed because the limitation to guarded recursion prevents problems. The proofs can be given by using induction on the weight function introduced below. (Induction on a weight function was introduced in <ref> [20] </ref> and the systematic use is due to Van Breugel [12].) Definition 3.2 wgt: Res ! N is given by wgt (E) = 0 wgt (x) = wgt (D (x)) + 1 wgt (s 1 ;s 2 ) = wgt (s 1 ) + 1; and similarly for `k wgt (s
Reference: [21] <author> M. Kwiatowska and G. Norman. </author> <title> Probabilistic metric semantics for a simple language with recursion. </title> <booktitle> In LNCS 1113 (MFCS'96), </booktitle> <pages> pages 419-430. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: For instance an (external) choice between a followed by P 1 and a followed by P 2 is not allowed. A first step analysis is done in [28] to find which statements are allowed. In <ref> [21] </ref> a reactive model is given for a language containing probabilistic choice and non-determinism. In this model the probabilistic choice is guarded by an action. The behavior of a process after performing an action a is a probabilistic choice between several alternatives.
Reference: [22] <author> K.G. Larsen and A. Skou. </author> <title> Bisimulation through probabilistic testing. </title> <journal> Information and Computation, </journal> <volume> 94 </volume> <pages> 1-28, </pages> <year> 1991. </year>
Reference-contexts: In [17] reactive, generative and stratified models are given for a calculus PCCS . In this calculus, based on Milner's SCCS [24] the non-deterministic choice has been replaced by probabilistic choice and the parallel composition is a synchronous product. The different semantics are given using SOS and bisimulation. In <ref> [22] </ref> bisimulation for reactive probabilistic processes has been studied in a testing setting. A testing algorithm which can distinguish non-bisimilar processes with probability 1 * (for any given * &gt; 0) is given. In [3] a calculus PrACP , derived from ACP (from [8]) is introduced.
Reference: [23] <author> R. Loogen and U. Goltz. </author> <title> Modelling non-determistic concurrent processes with event structures. </title> <note> Fundamenta Informaticae, XIV:39-74, </note> <year> 1991. </year>
Reference-contexts: Finite multisets suffice since the probabilistic choice is finite. For a space S the finite multiset functor gives the space of all finite multisets over S. The way the multisets are coded is derived from the codings used in 10 pomsets and event-structures, see for example [18], [15] and <ref> [23] </ref>. The work here has been inspired by [31], [14] in which a metric approach to pomsets is followed. A countably infinite set , called the base set, is chosen. A natural example is N .
Reference: [24] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Series in Computer Science. Prentice-Hall International, </booktitle> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: In [17] reactive, generative and stratified models are given for a calculus PCCS . In this calculus, based on Milner's SCCS <ref> [24] </ref> the non-deterministic choice has been replaced by probabilistic choice and the parallel composition is a synchronous product. The different semantics are given using SOS and bisimulation. In [22] bisimulation for reactive probabilistic processes has been studied in a testing setting.
Reference: [25] <author> G.D. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Aarhus University, </institution> <year> 1981. </year> <month> 49 </month>
Reference-contexts: The transition system represents a virtual machine that can take steps from one configuration to another. Each step produces observable output (a 2 Obs). The transition system for each statement in the language will be defined in the style of SOS <ref> [25] </ref> using a transition system specification. With some abuse of language the transition system specification T will be referred to as the transition system. The notation (x 2)X will be used for the set X with a typical element x. <p> Both these methods could use a (more) systematic approach to defining the possible transitions, for instance, an adjusted form of transition system specifications (i.e. in the style of SOS <ref> [25] </ref>) would be an option. As a final topic for further work, the probability allowed in the probabilistic choice operator in this report are in (0; 1). Also allowing the probability to be 0 or 1 is not interesting for the local interpretation of probability.
Reference: [26] <author> J. Rutten and D.Turi. </author> <title> On the foundation of final semantics: non-standard sets, metric spaces, partial orders. </title> <booktitle> In LNCS 666 (Proceedings of the REX Workshop on Semantics: Foundations and Applications), </booktitle> <pages> pages 477-530. </pages> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: Recursive domain equations are solved up to isomorphism, yielding instead the domain equation (or more accurately a domain isometry) M ' F (M ). The method of solving recursive domain equations over metric spaces comes from [7], [1] and <ref> [26] </ref>. First some basic notions is introduced and then the functors used are given. More on domain equations can be found in e.g. [6]. <p> The theorem below is a special case of a result which can be found in <ref> [26] </ref>. Theorem 4.2 A locally contractive functor F : CUMS ! CUMS has a unique fixed point. Several combinations of locally contractive functors with locally non-expan sive functors result in a locally contractive functor. Due to this most functors used need only be locally non-expansive.
Reference: [27] <author> R. Segala. </author> <title> Modeling and Verification of Ramdomized Distributed Real-Time Systems. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Some issues concerning this question are mentioned in section 8. The following table illustrates the different interpretations and their place in this report. 2 probability (+ ) non-determinism (+; k) local global local section 5 section 6 global section 7 section 8 Closely related is the work done in <ref> [27] </ref> where the combination of non-determinism and probability is also investigated. However, in this work the non-determinism is still seen as something that can be refined to probability, only the exact chances are not known. <p> However, in this work the non-determinism is still seen as something that can be refined to probability, only the exact chances are not known. It seems that the generative transition systems used in sections 5 and 6 have at least the same expressibility as the probabilistic automata used in <ref> [27] </ref>. In [27] these probabilistic automata are the starting point of the discussion whereas in this report, constructing the transition system for a statement in the language is also an important step. In [17] reactive, generative and stratified models are given for a calculus PCCS . <p> It seems that the generative transition systems used in sections 5 and 6 have at least the same expressibility as the probabilistic automata used in <ref> [27] </ref>. In [27] these probabilistic automata are the starting point of the discussion whereas in this report, constructing the transition system for a statement in the language is also an important step. In [17] reactive, generative and stratified models are given for a calculus PCCS . <p> A way to avoid using is to somehow join together the transitions that belong to one non-deterministic alternative. Bundling together transitions can be done by using hyper-transition systems as introduced in [10] and [11] or probabilistic automata as introduced in <ref> [27] </ref>. Both these methods could use a (more) systematic approach to defining the possible transitions, for instance, an adjusted form of transition system specifications (i.e. in the style of SOS [25]) would be an option.
Reference: [28] <author> K. Seidel. </author> <title> Probabilistic communicating processes. </title> <journal> TCS, </journal> <volume> 152 </volume> <pages> 219-249, </pages> <year> 1995. </year>
Reference-contexts: Also of interest are infinite sequences of probabilistic choices. To adequately reason about such sequences as a whole, distributions are used. The modeling of probability has been the subject of various papers. The usual approach, when dealing with probability, is to replace non-deterministic choice by probabilistic choice. In [17], <ref> [28] </ref> and [3] this approach is followed. However, interpreting all choices as probabilistic choices does not seem to be appropriate, especially when there is also parallel composition. When replacing non-deterministic choice with probabilistic choice, parallel composition will either become probabilistic, or needs to be restricted. <p> In [3] a calculus PrACP , derived from ACP (from [8]) is introduced. In the calculus PrACP the operator for choice `+' is replaced by a probabilistic version `+ p '. The parallel composition `k' is also made probabilistic by replacing it with an operator `k r;s '. In <ref> [28] </ref> a calculus PCSP is introduced. The calculus PCSP contains a probabilistic choice ` u p ' which replaces the non-deterministic choice of CSP. In PCSP there is also a restricted form of external choice and there are two kinds of parallel composition. <p> The external choice is restricted to a choice between processes with disjoint sets of possible first steps. For instance an (external) choice between a followed by P 1 and a followed by P 2 is not allowed. A first step analysis is done in <ref> [28] </ref> to find which statements are allowed. In [21] a reactive model is given for a language containing probabilistic choice and non-determinism. In this model the probabilistic choice is guarded by an action. The behavior of a process after performing an action a is a probabilistic choice between several alternatives.
Reference: [29] <author> S. A. Smolka and B. Steffen. </author> <title> Priority as extremal probability. </title> <booktitle> In LNCS 458 (CONCUR'90), </booktitle> <pages> pages 456-466. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: This way of expressing precedence is also used in [9] and in <ref> [29] </ref>. To be able to handle situations like s 1 + 1 (s 2 + 1 s 3 ) (where s 1 has precedence over s 2 and s 2 has 47 precedence over s 3 ) the probabilistic choice would have to be fully stratified.
Reference: [30] <author> E.P. de Vink and J.J.M.M. Rutten. </author> <title> Bisimulation for probabilistic transition systems: a coalgebraic approach. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> Automata, Languages and Programming, </booktitle> <pages> pages 460-470. </pages> <booktitle> Lecture Notes in Computer Science 1256, 1997. Proc. 24th ICALP'97, </booktitle> <address> Bologna, Italy. </address>
Reference-contexts: An infinite sequence of probabilistic choices cannot be described in a linear fashion by a finite multiset. An example is given in subsection 5.3 were the functor is used in specifying a linear domain. The functor is that same as the functor M 0 1 introduced in <ref> [30] </ref> restricted to CUMS. A more detailed description and more general results can be found there. Also in [4] a functor yielding distributions (called evaluations in [4]) is given on the category CUMS. A comparison with set-theoretic and complete partial order approaches can be found there. <p> Define the distance d on (M ) by d (; -) = inff* &gt; 0 j 8O 2 O * : (O) = -(O)g then ((M ); d) is a complete ultra-metric space. The proof of this lemma can be found in the full version of <ref> [30] </ref>. The compactness of the support is needed for completeness of (M ). <p> Define (f ) : (M ) ! (N ) by (f )= :B:(f 1 (B)) then is a locally non-expansive functor on CUMS. The proof of this lemma can again be found in the full version of <ref> [30] </ref>. When working with distributions over sets of sequences, the following notation is useful. Let B be a subset of A 1 then the set B=b = f w j aw 2 B g. If B is a Borel set then B=b is also a Borel set.
Reference: [31] <author> J.H.A. Warmerdam. </author> <title> Case studies in true concurrency and logic programming semantics. </title> <type> Master's thesis, </type> <institution> Vrije Universiteit, </institution> <month> October </month> <year> 1989. </year> <month> 50 </month>
Reference-contexts: For a space S the finite multiset functor gives the space of all finite multisets over S. The way the multisets are coded is derived from the codings used in 10 pomsets and event-structures, see for example [18], [15] and [23]. The work here has been inspired by <ref> [31] </ref>, [14] in which a metric approach to pomsets is followed. A countably infinite set , called the base set, is chosen. A natural example is N . In event-structures and pomsets elements of the base set are called the events or nodes.
References-found: 31

