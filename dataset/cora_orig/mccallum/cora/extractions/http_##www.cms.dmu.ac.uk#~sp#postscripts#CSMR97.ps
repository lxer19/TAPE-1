URL: http://www.cms.dmu.ac.uk/~sp/postscripts/CSMR97.ps
Refering-URL: http://www.cms.dmu.ac.uk:80/~sp/
Root-URL: 
Email: email: sp@dmu.ac.uk  email: ibd2gc@loqi15.elka.pg.gda.pl  
Phone: 2  
Title: Case Study in Migration to ObjectOriented System Structure Using Design Transformation Methods  
Author: Sagar Pidaparthi Grzegorz Cysewski 
Address: UK,  Gdansk, Gdansk, Poland,  
Affiliation: 1 Department of Computer Science, DeMontfort University, Leicester,  Department of Applied Informatics, Technical University of  
Abstract: subject system than to redesign software starting from scratch. Object identification relies upon program analysis and a study of inter component relationships and dependencies. Researchers in reengineering have proposed some guidelines to identify objects from within the subject systems. Design Transformation is the first step in reengineering existing programs, which can be followed by program translation methods to transform a procedural program into the newly identified structure. This paper reports the results of the application of three object identification methods on a sample procedural program. Secondly it provides a design of a system for program component storage and object identification. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bergstra, J.A., Heering, J., Klint,, </author> <title> P (1990) Module Algebra, </title> <journal> JACM Vol. </journal> <volume> 37 No 2 pp. </volume> <pages> 335-372. </pages>
Reference: 2. <author> Booch, G., </author> <year> (1991), </year> <title> Object Oriented Design with Applications, </title> <publisher> The Benjamin/ Cummings Publishing Company. </publisher>
Reference-contexts: The present implementation is supported by an interactive graphical user interface implemented on HP UNIX workstation. The implementation uses INGRES database, 4GL and embedded sql with C++ programming language. The design diagramming follows the Booch <ref> [2] </ref> notation for system design. Acknowledgement : We would like to express our sincere thanks to I. Vlaimincke of DeMontfort University for the permission to use the source code of Token Ring Simulator program developed under his supervision.
Reference: 3. <author> Chen, Y.F., Nishimoto, M.Y., Ramamoorthy, </author> <title> C.V.,(1990) The C Information Abstraction System, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 16, No. </volume> <pages> 3. </pages>
Reference-contexts: One of the options is to use design specification or module inter connection languages like NuMIL [4], as in SOFTMAN. The second option is to use the relational databases, which was employed in OMEGA [10], CIA <ref> [3] </ref> and others. Dietrich and Calliss [6], in a variation from OMEGA and CIA, use deductive databases for storing the program component Procedural Source Programs Procedural Program Component Database Object Oriented Program Component Database OO Program Generator Software Transformation New OO Source Programs details.
Reference: 4. <author> Choi, S.C. and Scacchi, W., </author> <year> (1990), </year> <title> Extracting and Restructuring the design of large systems, </title> <journal> IEEE Software. </journal>
Reference-contexts: Database Design There are two possible options for storing and using the extracted information from software programs. One of the options is to use design specification or module inter connection languages like NuMIL <ref> [4] </ref>, as in SOFTMAN. The second option is to use the relational databases, which was employed in OMEGA [10], CIA [3] and others.
Reference: 5. <author> Chikofsky, E.J., Cross II, J.H., </author> <year> (1990), </year> <title> Reverse engineering and design recovery : A taxonomy", </title> <journal> IEEE Software,Vol. </journal> <volume> 7, No. 1, </volume> <pages> pp 13-17. </pages>
Reference-contexts: 1. Introduction Chikofsky and Cross <ref> [5] </ref> define reverse engineering as: "process of analysing a subject system to identify the system's components and their interrelationships, to create representations of the system in another or at higher level of abstraction".
Reference: 6. <author> Dietrich, S.W., Calliss, F.W., </author> <title> (1991) The Application of Deductive Databases to Inter-Module Code Analysis", </title> <booktitle> Proceedings of IEEE conference on software maintenance , pp 120-128. </booktitle>
Reference-contexts: One of the options is to use design specification or module inter connection languages like NuMIL [4], as in SOFTMAN. The second option is to use the relational databases, which was employed in OMEGA [10], CIA [3] and others. Dietrich and Calliss <ref> [6] </ref>, in a variation from OMEGA and CIA, use deductive databases for storing the program component Procedural Source Programs Procedural Program Component Database Object Oriented Program Component Database OO Program Generator Software Transformation New OO Source Programs details.
Reference: 7. <author> Feijs, L. </author> <title> (1993) Formalisation of Design Methods, Ellis Horwood Series in Computers and their Applications. </title>
Reference: 8. <author> Feijs, L. And Jonkers, H.B.M. </author> <note> (1989) METEOR and beyondd: industrialising formal methods, In: K.H. </note> <editor> Bennet (ED.) </editor> <booktitle> Software Engineering Environments: Research and Practice, </booktitle> <publisher> Ellis Horwood Limited, </publisher> <pages> pp. 255-274. </pages>
Reference-contexts: Usually there is one component which is called the system, which represents the system to be developed. Components in a software system are: classes, procedures, functions, types, varibales. This section discussses important concepts in design transformations and the work on Meteor <ref> [8] </ref> project, which are suitably adapted to provide a design transformation from procedural programs to object oriented programs. Meteor project introduces a design lanaguage to specify the designs of software systems, in which it introduces the concepts of black box descriptions and glass box descriptions of software systems.
Reference: 9. <author> Harandi, M.T., Ning, J.Q., </author> <year> (1990), </year> <title> Knowledge Based Program Analysis", </title> <journal> IEEE Software. </journal>
Reference: 10. <author> Linton, M.A.,1984, </author> <title> Implementing relational views of programs, </title> <booktitle> Proc. ACM SIGSOFT/SIGPLAN Software Engineering Symposium Practical Software Development Environment. </booktitle>
Reference-contexts: One of the options is to use design specification or module inter connection languages like NuMIL [4], as in SOFTMAN. The second option is to use the relational databases, which was employed in OMEGA <ref> [10] </ref>, CIA [3] and others. Dietrich and Calliss [6], in a variation from OMEGA and CIA, use deductive databases for storing the program component Procedural Source Programs Procedural Program Component Database Object Oriented Program Component Database OO Program Generator Software Transformation New OO Source Programs details.
Reference: 11. <author> Livadas,P.E.,Roy,P.K.,(1992), </author> <title> Program dependence analysis",IEEE Conference on Software Maintenance. </title>
Reference-contexts: RESTRUCT is a project using reverse engineering to transform poorly structured programs to programs with object oriented structure. An object in a conventional programming language can be defined as a collection of routines, types and data items <ref> [11] </ref>. The routines implement the methods associated with objects; types represent object attributes, and data items represent or point to actual instances of the object classes. <p> Sneed [15] describes 10 steps to deriving object oriented design from program structure. RESTRUCT works on Sneed's third step, which defines objects in three ways which are based on the algorithms proposed by Livadas & Roy <ref> [11] </ref> and Liu & Wilde [13], these are global based, type based and receiver based object identifiers. In this tool a relational database is used to store information about subject program structure. <p> The work in RESTRUCT at present is centred around the first level, for which three algorithms described by Livadas and Roy <ref> [11] </ref>, Liu and Wilde,[13] have been im plemented. These analyse calling and functional dependencies between program components and then identify classes for a subject program.
Reference: 12. <author> Marsden, P., </author> <year> (1993), </year> <title> Token Ring Simulator, </title> <note> BSc Dissertation submitted to DeMontfort University Leiecester, U.K. </note>
Reference-contexts: It is usually called after the execution of the above algorithms, to identify additional classes in a subject system. 6. Transformation of Token Ring Simulator Design 6.1 Subject System Simulation of Token Ring, implemented as a final year Bachelors project by Marsden <ref> [12] </ref>, was taken as an example for design extraction and transformation using RESTRUCT. It was originally written in C and used Motif user interface and contained 11 files totalling over 3000 lines with 60 procedures.
Reference: 13. <author> Liu, S.S., Wilde, N., </author> <title> (1990) Identifying Objects in a Conventional Procedural Language : An Example of Data Design Recovery", </title> <booktitle> in Proceedings of the Conference on Software Maintenance. </booktitle>
Reference-contexts: Sneed [15] describes 10 steps to deriving object oriented design from program structure. RESTRUCT works on Sneed's third step, which defines objects in three ways which are based on the algorithms proposed by Livadas & Roy [11] and Liu & Wilde <ref> [13] </ref>, these are global based, type based and receiver based object identifiers. In this tool a relational database is used to store information about subject program structure. Object identification algorithms use the information from the database to restructure the program and to store the new structure in the database. <p> The second step is based on the intuition that if a routine must be clustered with one of its parameter types, it should be clustered with the most complex of these types <ref> [13] </ref>. 5.3 Receiver Based Object Identifier Receiver based object identifier ( rboi ) algorithm defines a candidate object as a pair (F, T), where F is a set of routines that modify variables of type T.
Reference: 14. <author> Pidaparthi, S., </author> <title> (1994)Forward and Reverse Engineering CASE Tool Supporting Multiple Views for Software Development". </title> <institution> Internal Report for De Montfort University, Leicester, U.K. </institution>
Reference-contexts: The new program structure information can be used to synthesise the object oriented source code. This paper reports on object identification algorithms implemented for integrated forward and reverse engineering workbench <ref> [14] </ref> supporting multiple views for restructuring procedural programs. It also provides results of application of object identification techniques on a subject system and provides a discussion on these results. In order to migrate from procedural programs to object oriented software, transformations at design level have to be performed. 2.
Reference: 15. <author> Sneed, H.M., </author> <title> (1992),Migration of Procedurally Oriented COBOL Programs in an ObjectOriented Architecture, </title> <booktitle> IEEE Conference on Software Maintenance. </booktitle> <pages> 16. </pages>
Reference-contexts: Finding and defining such objects is a natural way to create representation of the system in another form and in a higher level of abstraction. Sneed <ref> [15] </ref> describes 10 steps to deriving object oriented design from program structure.
References-found: 15

