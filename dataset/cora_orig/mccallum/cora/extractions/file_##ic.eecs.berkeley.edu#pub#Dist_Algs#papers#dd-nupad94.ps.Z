URL: file://ic.eecs.berkeley.edu/pub/Dist_Algs/papers/dd-nupad94.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/Respep/Research/dist-sim/publications.html
Root-URL: 
Title: Massively Parallel Device Simulation Using Irregular Grids  
Author: J. Sanghavi (sanghavi@eecs.Berkeley.EDU), E. Tomacruz, A. Sangiovanni-Vincentelli 
Address: Berkeley 94720, USA  
Affiliation: Department of Electrical Engineering Computer Sciences, University of California,  
Abstract: Partitioning, communication scheduling, and preconditioning algorithms are developed to implement a parallel linear solver for an irregular grid drift-diffusion device simulator. The parallel program is executed on a 64 node CM-5 and is compared with PILS running on a single processor. We obtain an average CPU time speed-up of 46.1X for each CGS iteration with no preconditioning, and a speed-up of 33.6X for the solution of the matrix.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Webber, E. Tomacruz, R. Guerrieri, T. Toyabe, and A. </author> <title> Sangiovanni-Vincentelli, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 10, </volume> <pages> pp. 1201-1209, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction The massively parallel 3-D drift-diffusion device simulators in <ref> [1, 2, 3] </ref> use rectangular grids since they offer the following advantages ease of implementation, load balance, and regular communication patterns. However, the applicability of rectangular grids is restricted since it can only model rectangular device boundaries and internal interfaces.
Reference: [2] <author> K. Wu, G. Chin, and R. </author> <title> Dutton, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 10, </volume> <pages> pp. 1132-1140, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction The massively parallel 3-D drift-diffusion device simulators in <ref> [1, 2, 3] </ref> use rectangular grids since they offer the following advantages ease of implementation, load balance, and regular communication patterns. However, the applicability of rectangular grids is restricted since it can only model rectangular device boundaries and internal interfaces.
Reference: [3] <author> E. Tomacruz, J. Sanghavi, and A. </author> <title> Sangiovanni-Vincentelli, </title> <booktitle> VPAD Proceedings, </booktitle> <pages> pp. 20-21, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction The massively parallel 3-D drift-diffusion device simulators in <ref> [1, 2, 3] </ref> use rectangular grids since they offer the following advantages ease of implementation, load balance, and regular communication patterns. However, the applicability of rectangular grids is restricted since it can only model rectangular device boundaries and internal interfaces.
Reference: [4] <author> N. Hitschfeld, P. Conti, and W. </author> <title> Fichtner, </title> <booktitle> SISDEP Proceedings, </booktitle> <volume> vol. 4, </volume> <pages> pp. 165-169, </pages> <year> 1991. </year>
Reference-contexts: However, the applicability of rectangular grids is restricted since it can only model rectangular device boundaries and internal interfaces. It is also wasteful since grids usually extend into quasi-neutral regions. We present a device simulator that uses an irregular grid generated by OMEGA <ref> [4] </ref>, which takes a device geometry and gradient of the impurity concentration as a basis for determining mesh density. <p> The Cuthill-Mckee, Reverse Cuthill-Mckee (RCM), minimum degree, and maximum degree [7] algorithms are implemented for ordering the grid nodes and the processors. 5 Experimental Results and Conclusions Several device structures described in <ref> [4] </ref> are used to study the partitioning schemes described above. ECL is a trench-isolated bipolar transistor (Vbe=0.7,Vce=1.0), LOCOS is a short channel MOS transistor with surrounding locos isolation, and MCT is a MOS-controlled Thyristor with integrated MOS controlled n+ emitter shorts and a bipolar gate.
Reference: [5] <author> C. Fiduccia and R. </author> <title> Mattheyses, </title> <booktitle> DAC Proceedings, </booktitle> <volume> vol. 19, </volume> <pages> pp. 175-181, </pages> <year> 1982. </year>
Reference-contexts: The geometrical partitioner sorts the grid points according to their coordinates along the axis that has the most number of unique coordinate points. The location of coordinate change in this sorted list closest to the middle is used as the partition boundary. The Fiduccia-Mattheyses algorithm <ref> [5] </ref> is used to implement a topographical partitioner. The basic algorithm moves a node from one partition to the other partition in an attempt to minimize the cutset while maintaining the load balance between the two partitions within a specified tolerance.
Reference: [6] <editor> H. Simon, </editor> <booktitle> Computer Systems in Engineering, </booktitle> <volume> vol. 2, </volume> <pages> pp. 135-148, </pages> <year> 1991. </year>
Reference-contexts: The Fiduccia-Mattheyses algorithm [5] is used to implement a topographical partitioner. The basic algorithm moves a node from one partition to the other partition in an attempt to minimize the cutset while maintaining the load balance between the two partitions within a specified tolerance. The spectral partitioner <ref> [6] </ref> is based on the computation of the second largest eigenvalue and the corresponding eigenvector of the Laplacian matrix of the connectivity graph. 3 Communication Scheduling Given a partition of grid nodes among processors, the abstract model used for scheduling communication is a processor-communication graph, each vertex of which represents a
Reference: [7] <author> I. Duff and G. </author> <title> Meurant, </title> <journal> B.I.T., </journal> <pages> pp. 635-657, </pages> <year> 1989. </year>
Reference-contexts: For the sequential ILU, the ordering of processors is another factor to be con-sidered. The ordering of processors affects the convergence behavior and also determines the amount of parallelism for a given processor-communication graph. The Cuthill-Mckee, Reverse Cuthill-Mckee (RCM), minimum degree, and maximum degree <ref> [7] </ref> algorithms are implemented for ordering the grid nodes and the processors. 5 Experimental Results and Conclusions Several device structures described in [4] are used to study the partitioning schemes described above.
Reference: [8] <author> C. Pommerell and W. </author> <title> Fichtner, </title> <booktitle> Supercomputing '91, </booktitle> <pages> pp. 588-599, </pages> <year> 1991. </year>
Reference-contexts: In terms of single Sparc CPU time which is also shown in Table 1, both topographical and spectral partitioner are an order of magnitude slower than the geometrical partitioner. Several grid sizes for ECL are used to compare the performance of the parallel solver and PILS <ref> [8] </ref> (an efficient iterative linear solver). A Connection Machine 5 (CM-5) [9] with 64 Sparc nodes and no vector units is used for the parallel solver and a single Sparc processor is used for PILS. It is observed that load balance is important in minimizing CPU time for each iteration.
Reference: [9] <author> J. Palmer and G. Steele Jr., </author> <booktitle> IEEE 4th Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pp. </pages> <address> 474- 483, </address> <year> 1992. </year>
Reference-contexts: Several grid sizes for ECL are used to compare the performance of the parallel solver and PILS [8] (an efficient iterative linear solver). A Connection Machine 5 (CM-5) <ref> [9] </ref> with 64 Sparc nodes and no vector units is used for the parallel solver and a single Sparc processor is used for PILS. It is observed that load balance is important in minimizing CPU time for each iteration.
Reference: [10] <author> G. Heiser, C. Pommerell, J. Weis, and W. </author> <title> Fichtner, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 10, </volume> <pages> pp. 1218-1230, </pages> <year> 1991. </year>
Reference-contexts: An average speed-up (geometrical mean) of 46.1X for 100 CGS iterations with no preconditioning is illustrated in Table 2. Geometrical partitioning with perfect load balance was used. Linear device matrices are currently generated with the sequential program called Second <ref> [10] </ref>. In a typical 3-D simulation with a number of grid points of the order of 100,000, between 70 and 90% of the total time is used to solve the linear system [10]. Hence, having a parallel linear solver would significantly improve the performance of a device simulator. <p> Linear device matrices are currently generated with the sequential program called Second <ref> [10] </ref>. In a typical 3-D simulation with a number of grid points of the order of 100,000, between 70 and 90% of the total time is used to solve the linear system [10]. Hence, having a parallel linear solver would significantly improve the performance of a device simulator. The matrix generator should be easy to parallelize since the communication requirement is the same as the matrix times vector operation.
References-found: 10

