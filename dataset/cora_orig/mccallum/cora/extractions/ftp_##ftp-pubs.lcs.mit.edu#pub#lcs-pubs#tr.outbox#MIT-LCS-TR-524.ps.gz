URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-524.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr500.html
Root-URL: 
Email: E-mail: trevor@theory.lcs.mit.edu.  E-mail: meyer@theory.lcs.mit.edu.  
Phone: 2  0071. 3  
Title: Full Abstraction and the Context Lemma  
Author: Trevor Jim and Albert R. Meyer 
Web: DAAL03-89-G  
Note: 1 Extended version of the paper appearing in the proceedings of TACS '91 (Meyer and Ito, Eds., volume 526 of Lecture Notes in Computer Science, pages 131-151, Springer-Verlag, 1991).  Work supported by ARO grant  Work supported by ONR grant N00014-89-J-1988 and NSF grant 8819761-CCR.  
Date: December 20, 1991  
Affiliation: MIT Laboratory for Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Abramsky. </author> <title> The lazy lambda calculus. </title> <editor> In D. L. Turner, editor, </editor> <booktitle> Research Topics in Functional Programming. </booktitle> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1989. </year>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom [9, 10], has been identified by many authors as technically significant in program semantics <ref> [37, 29, 24, 1, 18, 2, 35] </ref>. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10].
Reference: [2] <author> S. Abramsky. </author> <title> Domain theory in logical form. </title> <journal> Ann. Pure Appl. Logic, </journal> <volume> 51 </volume> <pages> 1-77, </pages> <year> 1991. </year>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom [9, 10], has been identified by many authors as technically significant in program semantics <ref> [37, 29, 24, 1, 18, 2, 35] </ref>. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10].
Reference: [3] <author> H. P. Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics, </title> <booktitle> volume 103 of Studies in Logic and the Foundations of Mathematics. </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <note> second edition, </note> <year> 1984. </year>
Reference: [4] <editor> G. Berry. Sequentialite de l'evaluation formelle des lambda-expressions. In B. Robi-net, editor, </editor> <title> Program Transformations, </title> <booktitle> 3 eme Colloque International sur la program-mation, </booktitle> <pages> pages 67-80, </pages> <year> 1978. </year> <month> 19 </month>
Reference-contexts: Although none are fully abstract for PCF, one motivation for the development of spaces such as the stable functions, bistable functions, sequential algorithms <ref> [5, 4, 8, 7, 15] </ref>, and most recently the strongly stable functions [13] was that they captured various aspects of sequentiality and so seemed "closer" to full abstraction for unextended PCF than the popular cpo model. The stable function model in particular has a simple definition and attractive category-theoretic properties.
Reference: [5] <author> G. Berry. </author> <title> Stable models of typed lambda-calculi. </title> <editor> In G. Ausiello and C. Bohm, editors, </editor> <booktitle> Automata, Languages and Programming: Fifth Colloquium, volume 62 of Lecture Notes in Computer Science, </booktitle> <pages> pages 72-89. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1978. </year>
Reference-contexts: Although none are fully abstract for PCF, one motivation for the development of spaces such as the stable functions, bistable functions, sequential algorithms <ref> [5, 4, 8, 7, 15] </ref>, and most recently the strongly stable functions [13] was that they captured various aspects of sequentiality and so seemed "closer" to full abstraction for unextended PCF than the popular cpo model. The stable function model in particular has a simple definition and attractive category-theoretic properties. <p> Likewise, there is a natural notion of finite and effective elements of stable domains, and these domains yield an adequate least fixed-point model for PCF. Further, they form a Cartesian Closed Category with solutions for domain equations <ref> [5] </ref>. This category was also independently discovered and used in constructing a model of polymorphic -calculus [16]. So the stable domains seem to offer a setting for a theory for higher-order recursive computation with many of the attractions of the cpo category. <p> Proof: Just note that C [[D]] = C [[x: o ]], but B [[D]] 6= B [[x: o ]], where B [[]] is the bistable model of <ref> [5] </ref>. ffi The PCF-like languages, defined in the next section, do not satisfy the Comparability Context Lemma.
Reference: [6] <author> G. Berry and P.-L. Curien. </author> <title> Sequential algorithms on concrete data structures. </title> <journal> Theor. Comput. Sci., </journal> <volume> 20(3) </volume> <pages> 265-321, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: Our proof exploits the lack of order-extensionality in these domains, but an extension of our results to certain order-extensional domains such as the bistable domains is possible and will be the subject of a forthcoming paper. The category of sequential algorithms <ref> [6] </ref> is technically not a model in our sense, but is like the stable model in that it is a Cartesian Closed Category with partially ordered function objects that are not pointwise ordered. <p> We believe that with some minor modifications our results will apply to it as well. (This claim stands in apparent contradiction to the results of <ref> [6] </ref>, which shows that the language CDS, based on concrete data structures [22], is fully abstract for the sequential algorithm model.
Reference: [7] <author> G. Berry and P.-L. Curien. </author> <title> Theory and practice of sequential algorithms: the kernel of the programming language CDS. </title> <editor> In M. Nivat and J. C. Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, chapter 2, </booktitle> <pages> pages 35-87. </pages> <publisher> Cambridge Univ. Press, </publisher> <year> 1985. </year>
Reference-contexts: Although none are fully abstract for PCF, one motivation for the development of spaces such as the stable functions, bistable functions, sequential algorithms <ref> [5, 4, 8, 7, 15] </ref>, and most recently the strongly stable functions [13] was that they captured various aspects of sequentiality and so seemed "closer" to full abstraction for unextended PCF than the popular cpo model. The stable function model in particular has a simple definition and attractive category-theoretic properties.
Reference: [8] <author> G. Berry, P.-L. Curien, and J.-J. Levy. </author> <title> Full abstraction for sequential languages: the state of the art. </title> <editor> In M. Nivat and J. C. Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, chapter 3, </booktitle> <pages> pages 89-132. </pages> <publisher> Cambridge Univ. Press, </publisher> <year> 1985. </year>
Reference-contexts: The problem of characterizing a fully abstract model of unextended PCF remains open after nearly two decades, cf. <ref> [27, 8, 28, 36] </ref>. Efforts to construct spaces of "sequential" functions corresponding to those definable in the original PCF without parallelism have led to the discovery of a number of new domains suitable for denotational semantics. <p> Although none are fully abstract for PCF, one motivation for the development of spaces such as the stable functions, bistable functions, sequential algorithms <ref> [5, 4, 8, 7, 15] </ref>, and most recently the strongly stable functions [13] was that they captured various aspects of sequentiality and so seemed "closer" to full abstraction for unextended PCF than the popular cpo model. The stable function model in particular has a simple definition and attractive category-theoretic properties.
Reference: [9] <author> B. Bloom. </author> <title> Can LCF be topped? Flat lattice models of typed lambda calculus (preliminary report). </title> <booktitle> In Third Annual Symposium on Logic in Computer Science [20], </booktitle> <pages> pages 282-295. </pages>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom <ref> [9, 10] </ref>, has been identified by many authors as technically significant in program semantics [37, 29, 24, 1, 18, 2, 35]. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10]. <p> extensionality by Bloom <ref> [9, 10] </ref>, has been identified by many authors as technically significant in program semantics [37, 29, 24, 1, 18, 2, 35]. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10]. The second author raised the question of whether there is a "reasonable" extension of PCF that would yield a fully abstract evaluator for lattice models [33, 34]. <p> Our PCF-like rules are, in an appropriate sense, as powerful as Bloom's observational calculi, and strictly subsume the class of consistent rules. In particular, consistent rules are necessarily confluent and hence single-valued; as Bloom remarks <ref> [9] </ref>, introducing a join combinator with simple multiple-valued rewrite rules yields a PCF extension both fully abstract for the lattice model and also satisfying the Context Lemma. <p> One method for proving observational approximations is by developing an abstract meaning, [[M ]], of a term M that is adequate to determine its observations. 1 In particular when O is O eval , Bloom <ref> [9] </ref> calls this "operational extensionality" while Milner [27] uses simply "the Context Lemma". <p> In particular, although the system for pure, unextended PCF is both single-valued|every term reduces to at most one constant|and confluent, PCF-like systems in general may be multiple-valued and nonconfluent. An interesting example of a multiple-valued PCF-like system arises in <ref> [9] </ref>. There, Bloom defines an extension of PCF that is both fully abstract and denotationally universal for the lattice model of PCF.
Reference: [10] <author> B. Bloom. </author> <title> Can LCF be topped? Flat lattice models of typed -calculus. </title> <journal> Information and Computation, </journal> 87(1/2):263-300, July/Aug. 1990. 
Reference-contexts: It is of course possible that some operational behavior that we declare to be non-PCF-like, in our technical sense, will nevertheless 1 offer a useful extension of PCF for which stable domains are fully abstract. For example, Bloom <ref> [10] </ref> provides such an extension for complete lattice models, though he goes on to criticize the rather complex algorithmic specification of the combinators in his extension. (The general benefits of structured approaches to operational semantics and connections to full abstraction are discussed in [26, 11].) To illustrate the generality of our <p> This property, more perspicuously dubbed operational extensionality by Bloom <ref> [9, 10] </ref>, has been identified by many authors as technically significant in program semantics [37, 29, 24, 1, 18, 2, 35]. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10]. <p> extensionality by Bloom <ref> [9, 10] </ref>, has been identified by many authors as technically significant in program semantics [37, 29, 24, 1, 18, 2, 35]. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10]. The second author raised the question of whether there is a "reasonable" extension of PCF that would yield a fully abstract evaluator for lattice models [33, 34]. <p> The consistent rules of Bloom <ref> [10] </ref> are an important, natural candidate for the restricted class. We do not know whether the Comparability Context Lemma holds for them. <p> There, 9 is defined by the deductive rules pn tt , 9p ! ff where is the reflexive transitive closure of !. The resulting language is indeed confluent, but goes beyond mere term rewriting. Because he wanted to be able to specify constants like 9, Bloom <ref> [10] </ref> introduced observation calculi as a definition of "PCF-like" deductive rules. But note that if we give up confluence, it is possible to define an 9 constant while remaining in a term rewriting discipline. <p> Note that if we require our rules to be non-overlapping, then they are a special case of orthogonal rewrite systems, for which both confluence and standardization have been known for some time [19]. Similarly, confluence and standardization have been known for the systems of Bloom <ref> [10] </ref>, which restrict our systems by allowing only so-called consistent overlaps at the root. <p> 9 can be defined in such systems, and we certainly lose the ability to define interesting non-confluent systems, such as PCF extended with join. 14 5 The Context Lemma Once standardization is known, the Context Lemma can be proved by a straightforward adaptation of Bloom's proof for his observation calculi <ref> [10] </ref>. First we recall the following basic facts about substitutions.
Reference: [11] <author> B. Bloom, S. Istrail, and A. R. Meyer. </author> <title> Bisimulation can't be traced (preliminary report). </title> <booktitle> In Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 229-239, </pages> <year> 1988. </year> <note> Also appears as MIT Technical Memo MIT/LCS/TM-345; submitted for journal publication. </note>
Reference-contexts: For example, Bloom [10] provides such an extension for complete lattice models, though he goes on to criticize the rather complex algorithmic specification of the combinators in his extension. (The general benefits of structured approaches to operational semantics and connections to full abstraction are discussed in <ref> [26, 11] </ref>.) To illustrate the generality of our notion of PCF-like rules, we note that the standard extensions of PCF by parallel-or and existential combinators are easily seen to be PCF-like.
Reference: [12] <author> A. Bucciarelli and T. Ehrard. </author> <title> Extensional embedding of a strongly stable model of PCF. </title> <booktitle> In Automata, Languages and Programming: Eighteenth Colloquium, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Finally, although we are able to show the failures of some order-extensional models, like the bistable models, the extensional embedding methods of <ref> [12] </ref> offer a more sophisticated way to restore order-extensionality which, for example, guarantees that the theory of the extensionally embedded models includes that of cpo's. We do not know whether these models can avoid the kind of failure of full abstraction that we have identified.
Reference: [13] <author> A. Bucciarelli and T. Ehrard. </author> <title> Sequentiality and strong stability. </title> <booktitle> In Proceedings, Sixth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <year> 1991. </year>
Reference-contexts: Although none are fully abstract for PCF, one motivation for the development of spaces such as the stable functions, bistable functions, sequential algorithms [5, 4, 8, 7, 15], and most recently the strongly stable functions <ref> [13] </ref> was that they captured various aspects of sequentiality and so seemed "closer" to full abstraction for unextended PCF than the popular cpo model. The stable function model in particular has a simple definition and attractive category-theoretic properties. <p> We remark that the authors of <ref> [13] </ref> have informed us that their strongly stable models are adequate models with Booleans for PCF, and that truesep is strongly stable, so Theorem 15 and Corollary 16 hold for strongly stable models.
Reference: [14] <author> R. Cartwright and M. Felleisen. </author> <title> Observable sequentiality and full abstraction. </title> <note> Draft of October 1, 1991; to appear in POPL '92. </note>
Reference-contexts: But as we observed in the introduction, the failures of full abstraction we have shown might be avoidable by some other attractive, as yet undeveloped, operational semantics. Such an operational semantics would be interesting to see; and indeed, some recent work of Cartwright and Felleisen <ref> [14] </ref> suggests a fruitful development in this direction. Acknowledgments We are grateful to G. Berry, B. Bloom, P.-L. Curien, J.-J. Levy, G.D. Plotkin, and Scott Smith for helpful discussions.
Reference: [15] <author> P.-L. Curien. </author> <title> Categorical Combinators, Sequential Algorithms and Functional Programming. </title> <publisher> John Wiley and Sons, </publisher> <year> 1986. </year>
Reference-contexts: Although none are fully abstract for PCF, one motivation for the development of spaces such as the stable functions, bistable functions, sequential algorithms <ref> [5, 4, 8, 7, 15] </ref>, and most recently the strongly stable functions [13] was that they captured various aspects of sequentiality and so seemed "closer" to full abstraction for unextended PCF than the popular cpo model. The stable function model in particular has a simple definition and attractive category-theoretic properties. <p> Since the counterexample of Corollary 15 relies on the non-pointwise stable ordering, it does not apply to the bistable model. There is, however, an interesting counterexample to the full abstraction of the bistable model that provides a starting point for extending our results. The counterexample, noted in <ref> [15] </ref>, has its roots in the fundamental motivation behind stable models, viz., to eliminate elements like parallel-or. Consider the following definition: Definition 17 Let lor be the or-function that is strict in its left argument, and ror be the or-function that is strict in its right argument.
Reference: [16] <author> J.-Y. Girard. </author> <title> The system F of variable types, fifteen years later. </title> <journal> Theor. Comput. Sci., </journal> <volume> 45 </volume> <pages> 152-192, </pages> <year> 1986. </year> <month> 20 </month>
Reference-contexts: Further, they form a Cartesian Closed Category with solutions for domain equations [5]. This category was also independently discovered and used in constructing a model of polymorphic -calculus <ref> [16] </ref>. So the stable domains seem to offer a setting for a theory for higher-order recursive computation with many of the attractions of the cpo category.
Reference: [17] <author> J. R. Hindley and J. P. Seldin. </author> <title> Introduction to Combinators and -calculus, volume 1 of London Math. Soc. Student Texts. </title> <publisher> Cambridge Univ. Press, </publisher> <year> 1986. </year>
Reference: [18] <author> D. J. Howe. </author> <title> Equality in lazy computation systems. </title> <booktitle> In Proceedings, Fourth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 198-203. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom [9, 10], has been identified by many authors as technically significant in program semantics <ref> [37, 29, 24, 1, 18, 2, 35] </ref>. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10].
Reference: [19] <author> G. Huet and J.-J. Levy. </author> <title> Computations in nonambiguous term rewriting systems. </title> <type> Technical Report 359, </type> <institution> INRIA, Rocquencourt, France, </institution> <year> 1979. </year>
Reference-contexts: For instance, in the pure, typed -calculus, a standard reduction is one in which redexes are contracted from left to right. The definition of standard reductions in PCF-like rewrite systems is more complicated because they admit the upwards creation of redexes, cf. <ref> [19] </ref>. However, there is a simple inductive characterization of those standard reductions that end at a ground constant. <p> Note that if we require our rules to be non-overlapping, then they are a special case of orthogonal rewrite systems, for which both confluence and standardization have been known for some time <ref> [19] </ref>. Similarly, confluence and standardization have been known for the systems of Bloom [10], which restrict our systems by allowing only so-called consistent overlaps at the root.
Reference: [20] <editor> IEEE. </editor> <booktitle> Third Annual Symposium on Logic in Computer Science, </booktitle> <year> 1988. </year>
Reference: [21] <author> T. Jim and A. R. Meyer. </author> <title> Communication in the types electronic forum (types@theory.lcs.mit.edu). </title> <note> June 17 th , 1989. </note>
Reference: [22] <author> G. Kahn and D. B. MacQueen. </author> <title> Coroutines and networks of parallel processes. </title> <editor> In B. Gilchrist, editor, </editor> <booktitle> Information Processing '77, </booktitle> <pages> pages 993-998. </pages> <publisher> North-Holland Publishing Co., </publisher> <year> 1977. </year>
Reference-contexts: We believe that with some minor modifications our results will apply to it as well. (This claim stands in apparent contradiction to the results of [6], which shows that the language CDS, based on concrete data structures <ref> [22] </ref>, is fully abstract for the sequential algorithm model. However, it seems questionable to us to call a language such as CDS "PCF-like", since it does not have -abstraction or even variables.) 18 We conjecture that our methods and results will extend to untyped versions of PCF--like languages.
Reference: [23] <author> J. W. Klop. </author> <title> Combinatory reduction systems. Tract 127, </title> <publisher> Mathematisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1980. </year>
Reference: [24] <author> I. Mason and C. Talcott. </author> <title> Programming, transforming, and proving with function abstractions and memories. </title> <editor> In G. Ausiello, M. Dezani-Ciancaglini, and S. R. D. Rocca, editors, </editor> <booktitle> Automata, Languages and Programming: 16 th International Colloquium, volume 372 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom [9, 10], has been identified by many authors as technically significant in program semantics <ref> [37, 29, 24, 1, 18, 2, 35] </ref>. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10].
Reference: [25] <author> A. R. Meyer. </author> <title> What is a model of the lambda calculus? Information and Control, </title> <booktitle> 52(1) </booktitle> <pages> 87-122, </pages> <month> Jan. </month> <year> 1982. </year>
Reference: [26] <author> A. R. Meyer. </author> <title> Semantical paradigms: Notes for an invited lecture, with two appendices by Stavros Cosmadakis. </title> <booktitle> In Third Annual Symposium on Logic in Computer Science [20], </booktitle> <pages> pages 236-253. </pages>
Reference-contexts: For example, Bloom [10] provides such an extension for complete lattice models, though he goes on to criticize the rather complex algorithmic specification of the combinators in his extension. (The general benefits of structured approaches to operational semantics and connections to full abstraction are discussed in <ref> [26, 11] </ref>.) To illustrate the generality of our notion of PCF-like rules, we note that the standard extensions of PCF by parallel-or and existential combinators are easily seen to be PCF-like. <p> If, in addition, the meaning function is sound for the evaluator, we easily obtain a familiar (cf. <ref> [26] </ref>) alternate characterization of adequacy: Definition 6 A meaning function [[]] is sound for an "evaluates to" relation if for all terms M and N , M evaluates to N implies [[M ]] = [[N ]]: 2 As with the Context Lemma, we might more descriptively call this "approximation adequate"; but
Reference: [27] <author> R. Milner. </author> <title> Fully abstract models of the typed lambda calculus. </title> <journal> Theor. Comput. Sci., </journal> <volume> 4 </volume> <pages> 1-22, </pages> <year> 1977. </year>
Reference-contexts: The problem of characterizing a fully abstract model of unextended PCF remains open after nearly two decades, cf. <ref> [27, 8, 28, 36] </ref>. Efforts to construct spaces of "sequential" functions corresponding to those definable in the original PCF without parallelism have led to the discovery of a number of new domains suitable for denotational semantics. <p> In general, our PCF-like rules need not even be single valued. A substantial technical contribution of this paper is a simple, modest restriction on the format of rewrite rules which is sufficient to guarantee Milner's Context Lemma <ref> [27] </ref> for languages defined by such rules. <p> Section 4 gives our general notion of term rewriting systems of the kind used for symbolic evaluation of PCF terms. Then in Section 5, we show that any such system defines an observational approximation relation that must satisfy the Context Lemma <ref> [27] </ref>. An immediate corollary is Theorem 30 that there is no extension of PCF defined by PCF-like rewriting rules for which the stable domain semantics is fully abstract. <p> The Approximation Context Lemma 1 holds if for all closed terms M and N , M v app N iff M v obs N: A fundamental result of Milner <ref> [27] </ref> is that under O eval with numerals taken as the output terms, PCF itself, as well as its extension with parallel-or, satisfies the Approximation Context Lemma. <p> One method for proving observational approximations is by developing an abstract meaning, [[M ]], of a term M that is adequate to determine its observations. 1 In particular when O is O eval , Bloom [9] calls this "operational extensionality" while Milner <ref> [27] </ref> uses simply "the Context Lemma".
Reference: [28] <author> K. Mulmuley. </author> <title> Full Abstraction and Semantic Equivalence. </title> <booktitle> ACM Doctoral Dissertation Award 1986. </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: The problem of characterizing a fully abstract model of unextended PCF remains open after nearly two decades, cf. <ref> [27, 8, 28, 36] </ref>. Efforts to construct spaces of "sequential" functions corresponding to those definable in the original PCF without parallelism have led to the discovery of a number of new domains suitable for denotational semantics.
Reference: [29] <author> C.-H. L. Ong. </author> <title> The Lazy Lambda Calculus: An Investigation into the Foundations of Functional Programming. </title> <type> PhD thesis, </type> <institution> Imperial College, University of London, </institution> <year> 1988. </year>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom [9, 10], has been identified by many authors as technically significant in program semantics <ref> [37, 29, 24, 1, 18, 2, 35] </ref>. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10].
Reference: [30] <author> G. D. Plotkin. </author> <title> LCF considered as a programming language. </title> <journal> Theor. Comput. Sci., </journal> <volume> 5(3) </volume> <pages> 223-256, </pages> <month> Dec. </month> <year> 1977. </year> <month> 21 </month>
Reference-contexts: For example, with the semantics based on cpo's, PCF must be extended with a "parallel-or" combinator in order to express enough computations to be fully abstract, i.e., semantical distinctions and computational distinctions between terms coincide <ref> [31, 30] </ref>. The problem of characterizing a fully abstract model of unextended PCF remains open after nearly two decades, cf. [27, 8, 28, 36]. <p> For example, we can define an evaluator for Plotkin's 9 constant <ref> [30] </ref> while remaining within a term rewriting discipline, as follows. <p> For example, <ref> [30] </ref> extends parallel PCF by an existential operator, 9 : ( ! o) ! o, to achieve a language that is fully abstract and denotationally universal for the cpo model.
Reference: [31] <author> V. Sazonov. </author> <title> Expressibility of functions in D. Scott's LCF language. </title> <journal> Algebra i Logika, </journal> <volume> 15 </volume> <pages> 308-330, </pages> <year> 1976. </year> <pages> (Russian). </pages>
Reference-contexts: For example, with the semantics based on cpo's, PCF must be extended with a "parallel-or" combinator in order to express enough computations to be fully abstract, i.e., semantical distinctions and computational distinctions between terms coincide <ref> [31, 30] </ref>. The problem of characterizing a fully abstract model of unextended PCF remains open after nearly two decades, cf. [27, 8, 28, 36].
Reference: [32] <author> D. S. Scott. </author> <title> A type theoretical alternative to CUCH, ISWIM, OWHY. </title> <type> Manuscript, </type> <institution> Oxford Univ., </institution> <year> 1969. </year>
Reference-contexts: 1 Introduction A paradigmatic example of a functional programming language is PCF, Scott's simply typed -calculus for recursive functions on the integers <ref> [32] </ref>. Many categories of deno-tational meaning are known to adequately reflect the computational behavior of PCF in a precise technical sense, namely, a PCF term evaluates to the numeral n iff it means the integer n.
Reference: [33] <author> D. S. Scott. </author> <title> Continuous lattices. </title> <editor> In F. W. Lawvere, editor, </editor> <booktitle> Toposes, Algebraic Geometry and Logic, volume 274 of Lecture Notes in Mathematics, </booktitle> <pages> pages 97-136. </pages> <publisher> Springer-Verlag, </publisher> <year> 1972. </year>
Reference-contexts: Our work borrows much from Bloom [9, 10]. The second author raised the question of whether there is a "reasonable" extension of PCF that would yield a fully abstract evaluator for lattice models <ref> [33, 34] </ref>. In answering this question, Bloom emphasized how the Context Lemma and full abstraction were incompatible with single-valued evaluators for the lattice model. He also characterized a general class of consistent rewrite rules that ensured the soundness of the Context Lemma.
Reference: [34] <author> D. S. Scott. </author> <title> Data types as lattices. </title> <journal> SIAM J. Comput., </journal> <volume> 5 </volume> <pages> 522-587, </pages> <year> 1976. </year>
Reference-contexts: Our work borrows much from Bloom [9, 10]. The second author raised the question of whether there is a "reasonable" extension of PCF that would yield a fully abstract evaluator for lattice models <ref> [33, 34] </ref>. In answering this question, Bloom emphasized how the Context Lemma and full abstraction were incompatible with single-valued evaluators for the lattice model. He also characterized a general class of consistent rewrite rules that ensured the soundness of the Context Lemma.
Reference: [35] <author> S. Smith. </author> <title> From operational to denotational semantics. </title> <booktitle> In Mathematical Foundations of Programming Semantics, </booktitle> <year> 1991. </year> <note> To appear. </note>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom [9, 10], has been identified by many authors as technically significant in program semantics <ref> [37, 29, 24, 1, 18, 2, 35] </ref>. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10].
Reference: [36] <author> A. Stoughton. </author> <title> Fully Abstract Models of Progamming Languages. </title> <booktitle> Research Notes in Theoretical Computer Science. </booktitle> <address> Pitman/Wiley, </address> <year> 1988. </year> <type> Revision of Ph.D thesis, </type> <institution> Dept. of Computer Science, Univ. Edinburgh, </institution> <note> Report No. CST-40-86, </note> <year> 1986. </year>
Reference-contexts: The problem of characterizing a fully abstract model of unextended PCF remains open after nearly two decades, cf. <ref> [27, 8, 28, 36] </ref>. Efforts to construct spaces of "sequential" functions corresponding to those definable in the original PCF without parallelism have led to the discovery of a number of new domains suitable for denotational semantics. <p> terms M and N , M evaluates to N implies [[M ]] = [[N ]]: 2 As with the Context Lemma, we might more descriptively call this "approximation adequate"; but we will use only the version of adequacy based on approximation, and call it simply adequacy for brevity. 3 Stoughton <ref> [36] </ref> calls this "inequationally fully abstract". 5 Lemma 7 A sound, compositional meaning function [[]] is adequate for O eval iff [[O]] = [[M ]] iff M evaluates to O; for all terms M and output terms O. This paper focuses specifically on the language PCF and its extensions.
Reference: [37] <author> C. Talcott. </author> <title> Programming and proving with function and control abstractions. </title> <type> Technical Report STAN-CS-89-1288, </type> <institution> Stanford Univ., </institution> <year> 1988. </year> <month> 22 </month>
Reference-contexts: This property, more perspicuously dubbed operational extensionality by Bloom [9, 10], has been identified by many authors as technically significant in program semantics <ref> [37, 29, 24, 1, 18, 2, 35] </ref>. The key to the proof of the Context Lemma is a new Standard Reduction Theorem 25 for PCF-like rewrite systems. Our work borrows much from Bloom [9, 10].
References-found: 37

