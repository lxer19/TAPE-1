URL: http://graphics.stanford.edu/~slusallek/Papers/eg94.ps.gz
Refering-URL: http://graphics.stanford.edu/~slusallek/cv.html
Root-URL: http://www.cs.stanford.edu
Email: email: fslusallek,tspflaum,seidelg@informatik.uni-erlangen.de  
Title: Implementing RenderMan Practice, Problems and Enhancements  
Author: Philipp Slusallek, Thomas Pflaum, Hans-Peter Seidel 
Address: Am Weichselgarten 9, D-91058 Erlangen, Germany  
Affiliation: Computer Graphics Group, University of Erlangen  
Abstract: The RenderMan interface has been proposed as a general interface to rendering systems, yet only a few implementations of the interface exist. In this paper we describe the implementation of the RenderMan interface on a general rendering architecture that supports various rendering algorithms. Specifically we discuss the implementation of the RenderMan Shading Language and its integration into our rendering architecture. Special attention is focused on the problems that we have encountered and how they can be solved. Additionally, we suggest extensions and enhancements to the current interface definition, which would make RenderMan easier to implement and more flexible to use.
Abstract-found: 1
Intro-found: 1
Reference: [Ali93] <institution> Alias Research Inc., Toronto, Canada. </institution> <note> Making Models in ALIAS, version 4.0 edition, </note> <year> 1993. </year>
Reference-contexts: The object-oriented structure of shaders provides a flexible framework for programming shaders, but the RenderMan interface does not yet allow the flexibility to use shaders as building blocks for creating composite shaders. We have used our implementation with example RIB files generated by the ALIAS PowerAnimator <ref> [Ali93] </ref>, the Geomview program [Phi93], the Next 3D Graphics Kit [Nex92] and examples collected from the Internet (see Figure 1 and 2). Our experience was, that most examples did not use the available functionality of RenderMan to transfer all the available information.
Reference: [Apo93] <author> Tony Apodaca. </author> <title> private communications. </title> <year> 1993. </year>
Reference-contexts: The problems start with the exact definition of these functions. The RenderMan reference [Pix89] is not clear about whether the derivation extends to variables in the expression, which themselves depend on u or v. It turns out, that the derivation includes these expressions <ref> [Apo93] </ref>. The benefit of having the derivative extend to these variables is that more complicated expressions are possible. The expressions can now depend on values computed in conditionals or loops.
Reference: [CCC87] <author> Robert L. Cook, Loren Carpenter, and Edwin Catmull. </author> <title> The Reyes image rendering architecture. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 95-102, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: One shortcoming of the RenderMan interface is the incompleteness of the specification and its strong foundation on the REYES rendering architecture <ref> [CCC87] </ref>. Especially the last point makes an implementation on other rendering architectures difficult. While designing our rendering system, we faced the problem of how to interface it to modeling systems. <p> We also describe the optimizations that are possible in the interface between the renderer and the compiled shader code. In Section 5 we discuss some shortcomings of the RenderMan interface definition and the problems we encountered by implementing it on a rendering architecture very different to the REYES architecture <ref> [CCC87] </ref>. We indicate possible solutions and directions how the RenderMan interface definition could be changed to ease supporting it on different rendering architectures.
Reference: [CW93] <author> Michael F. Cohen and John R Wallace. </author> <title> Radiosity and Realistic Image Synthesis. </title> <publisher> Academic Press Professional, </publisher> <year> 1993. </year>
Reference-contexts: To properly weight the samples, additional information about the solid angle that is covered by this sample must be provided. To make meaningful computations possible the units of the light values must also be provided: For global illumination light is generally specified as radiance [W=m 2 sr] <ref> [CW93] </ref>. This information would make it possible to use the shading language to describe arbitrary bidirectional reflectance distribution functions (BRDF) of advanced reflectance models for global illumination computations. The image shader could also be used to compute tone reproduction operators [TR93].
Reference: [HL90] <author> Pat Hanrahan and Jim Lawson. </author> <title> A language for shading and lighting calculation. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 289-298, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: the RenderMan interface and the shading language in particular, that would make them easier to implement and more flexible to use. 1.1 The RenderMan Interface The RenderMan Interface consists of three distinct components: The RenderMan Application Programming Interface (RM-API), the RenderMan Interface Bytestream (RIB) protocol and the Shading Language (SL) <ref> [Pix89, Ups90, HL90] </ref>. The RenderMan API is a collection of C functions that are used by an application to transfer geometry and rendering attributes to the renderer and to control the rendering process. <p> Because the shading of surfaces and volumes, the description of light sources, and the imaging process need a very flexible interface, the designers of the RenderMan interface added a programmable interface the RenderMan Shading Language (SL) <ref> [Pix89, Ups90, HL90] </ref>. The SL allows the procedural specification of the local interaction of light with matter (surface and volume shaders) and light source distribution functions (light shaders). Support is also included for general, procedural transformation of geometry (transformation shader), small surface changes (displacement shaders) and imaging functions (image shader). <p> Support is also included for general, procedural transformation of geometry (transformation shader), small surface changes (displacement shaders) and imaging functions (image shader). A good overview of the SL and its design is given in <ref> [HL90] </ref>. The SL is modeled after the C language, but has some high level constructs for dealing with colour and points and special control structures for lighting calculations. The SL supports writing procedural shaders through special shader functions. <p> This includes the derivative (see Section 5.1) and the solar, illuminate and illuminance constructs. The latter three language features are similar to loops that execute the following statement or block multiple times, depending on the rendering environment. In the following subsections we describe the various stages <ref> [HL90] </ref> of a RenderMan shader in our rendering system. 4.2.2 Compilation The SL compiler starts by piping the shader source code through the standard C preprocessor, which is responsible for file inclusion, conditional compilation and macro expansion. <p> As an alternative the SL could allow shaders to call other shaders and require the shader programmer to call the shaders in the correct order. 5.3 RenderMan and Global Illumination The RenderMan interface was designed with global illumination in mind <ref> [Ups90, HL90] </ref>. The support offered by the SL is through the illuminance construct for surface shaders. As defined, illuminance is called with a point and the center axis and spread angle of a cone.
Reference: [Nex92] <author> Next. </author> <title> 3D Graphics Kit, </title> <type> Version 3.0. </type> <institution> Next Computer Inc., </institution> <year> 1992. </year>
Reference-contexts: The API allows programs to directly control a RenderMan renderer and to use RenderMan as a high-level, high-quality visualization tool. The possibilities of using the RenderMan interface as a programming tool is demonstrated by the "3D Graphics Kit" and Quick-RenderMan in the NextStep environment <ref> [Nex92] </ref>. Here, the RM-API is encapsulated into an object-oriented class hierarchy and is the standard for 3D graphics output. The interface functions of the RenderMan API can be grouped into five categories: * The graphics state functions manage the state of the interface. <p> We have used our implementation with example RIB files generated by the ALIAS PowerAnimator [Ali93], the Geomview program [Phi93], the Next 3D Graphics Kit <ref> [Nex92] </ref> and examples collected from the Internet (see Figure 1 and 2). Our experience was, that most examples did not use the available functionality of RenderMan to transfer all the available information.
Reference: [Phi93] <author> Mark Phillips. </author> <note> Geomview Manual, Version 1.4. The Geometry Center, </note> <institution> University of Minnesota, Minneapolis, </institution> <year> 1993. </year>
Reference-contexts: We have used our implementation with example RIB files generated by the ALIAS PowerAnimator [Ali93], the Geomview program <ref> [Phi93] </ref>, the Next 3D Graphics Kit [Nex92] and examples collected from the Internet (see Figure 1 and 2). Our experience was, that most examples did not use the available functionality of RenderMan to transfer all the available information.
Reference: [Pix89] <author> Pixar. </author> <title> The Renderman Interface. </title> <address> Pixar, San Rafael, California, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The RenderMan Interface <ref> [Pix89, Ups90] </ref> was designed by Pixar as a standard interface between modeling and rendering systems. The idea was to create a high level description for rendering jobs and thus separate the modeling and the rendering programs that were (and often still are) tightly integrated. <p> the RenderMan interface and the shading language in particular, that would make them easier to implement and more flexible to use. 1.1 The RenderMan Interface The RenderMan Interface consists of three distinct components: The RenderMan Application Programming Interface (RM-API), the RenderMan Interface Bytestream (RIB) protocol and the Shading Language (SL) <ref> [Pix89, Ups90, HL90] </ref>. The RenderMan API is a collection of C functions that are used by an application to transfer geometry and rendering attributes to the renderer and to control the rendering process. <p> Because the shading of surfaces and volumes, the description of light sources, and the imaging process need a very flexible interface, the designers of the RenderMan interface added a programmable interface the RenderMan Shading Language (SL) <ref> [Pix89, Ups90, HL90] </ref>. The SL allows the procedural specification of the local interaction of light with matter (surface and volume shaders) and light source distribution functions (light shaders). Support is also included for general, procedural transformation of geometry (transformation shader), small surface changes (displacement shaders) and imaging functions (image shader). <p> Each function computes the derivative of its argument with respect to the underlying surface parameters u and v. The problems start with the exact definition of these functions. The RenderMan reference <ref> [Pix89] </ref> is not clear about whether the derivation extends to variables in the expression, which themselves depend on u or v. It turns out, that the derivation includes these expressions [Apo93]. The benefit of having the derivative extend to these variables is that more complicated expressions are possible.
Reference: [SS94] <author> Philipp Slusallek and Hans-Peter Seidel. </author> <title> An architecture for global illumination calculation. </title> <type> Technical report TR-94-3, </type> <institution> Universitat Erlangen, IMMD IX, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: The RM-API and its mapping onto our rendering architecture <ref> [SS94] </ref> is described in Section 2. The RIB protocol is implemented by directly mapping RIB commands to their equivalent RM-API calls. Details are given in Section 3. The heart of our implementation is the Shading Language Compiler.
Reference: [TR93] <author> Jack Tumblin and Holly Rushmeier. </author> <title> Tone reproduction for realistic images. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 13(6) </volume> <pages> 42-48, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: This information would make it possible to use the shading language to describe arbitrary bidirectional reflectance distribution functions (BRDF) of advanced reflectance models for global illumination computations. The image shader could also be used to compute tone reproduction operators <ref> [TR93] </ref>.
Reference: [Ups90] <author> Steve Upstill. </author> <title> The RenderMan Companion. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction The RenderMan Interface <ref> [Pix89, Ups90] </ref> was designed by Pixar as a standard interface between modeling and rendering systems. The idea was to create a high level description for rendering jobs and thus separate the modeling and the rendering programs that were (and often still are) tightly integrated. <p> the RenderMan interface and the shading language in particular, that would make them easier to implement and more flexible to use. 1.1 The RenderMan Interface The RenderMan Interface consists of three distinct components: The RenderMan Application Programming Interface (RM-API), the RenderMan Interface Bytestream (RIB) protocol and the Shading Language (SL) <ref> [Pix89, Ups90, HL90] </ref>. The RenderMan API is a collection of C functions that are used by an application to transfer geometry and rendering attributes to the renderer and to control the rendering process. <p> Because the shading of surfaces and volumes, the description of light sources, and the imaging process need a very flexible interface, the designers of the RenderMan interface added a programmable interface the RenderMan Shading Language (SL) <ref> [Pix89, Ups90, HL90] </ref>. The SL allows the procedural specification of the local interaction of light with matter (surface and volume shaders) and light source distribution functions (light shaders). Support is also included for general, procedural transformation of geometry (transformation shader), small surface changes (displacement shaders) and imaging functions (image shader). <p> As an alternative the SL could allow shaders to call other shaders and require the shader programmer to call the shaders in the correct order. 5.3 RenderMan and Global Illumination The RenderMan interface was designed with global illumination in mind <ref> [Ups90, HL90] </ref>. The support offered by the SL is through the illuminance construct for surface shaders. As defined, illuminance is called with a point and the center axis and spread angle of a cone.
References-found: 11

