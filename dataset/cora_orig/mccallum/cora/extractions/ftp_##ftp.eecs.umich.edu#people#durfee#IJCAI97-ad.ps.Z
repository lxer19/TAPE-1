URL: ftp://ftp.eecs.umich.edu/people/durfee/IJCAI97-ad.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/durfee/vita.html
Root-URL: http://www.cs.umich.edu
Email: armst, durfee-@umich.edu  
Title: Dynamic Prioritization of Complex Agents in Distributed Constraint Satisfaction Problems  
Author: Aaron Armstrong Edmund Durfee 
Address: Ann Arbor, MI 48109 USA  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan  
Abstract: Cooperative distributed problem solving (CDPS) by loosely-coupled agents can be effectively modeled as a distributed constraint satisfaction problem (DCSP) where each agent has multiple local variables. DCSP protocols typically impose (partial) orders on agents to ensure systematic exploration of the search space, but the ordering decisions can have a dramatic effect on the overall problemsolving effort. In this paper, we examine several heuristics for ordering agents, and conclude that the best heuristics attempt to order agents based on the cumulative difficulty of finding assignments to their local variables. Less costly heuristics are sometimes also effective depending on the structure of the variables constraints, and we describe the tradeoffs between heuristic cost and quality. Finally, we also show that a combined heuristic, with weightings determined through a genetic algorithm, can lead to the best performance. 
Abstract-found: 1
Intro-found: 1
Reference: [Durfee et al. 1989] <author> Durfee, E., Lesser, V., and Corkill, D. </author> <title> Cooperative Distributed Problem Solving. </title> <editor> In A. Barr, P. Cohen, and E. Feigenbaum (eds.). </editor> <booktitle> The Handbook of Artificial Intelligence, Volume IV, </booktitle> <publisher> Addison-Wesley. </publisher>
Reference-contexts: 1 Introduction This work has been supported, in part, by the National Science Foundation under PYI award 91-58473. Cooperative distributed problem solving (CDPS) is often modeled as being done by a group of loosely-coupled computational agents involved in extensive local computations <ref> [Durfee et al. 1989; Luo et al. 1993] </ref>. Because these agents need to develop local solutions that together comprise one or more solutions to collective problems, they need to communicate intermittently about aspects of their local solutions to ensure compatibility.
Reference: [Ginsberg and McAllester 1994] <author> Ginsberg, M. and McAllester, D. </author> <title> GSAT and Dynamic Backtracking. </title> <booktitle> Proc. of Princ. and Pract. of Constraint Prog.-1994, </booktitle> <pages> 243-265. </pages>
Reference-contexts: Many open problems remain, including characterizing the tradeoffs between local computation and the benefits of the heuristics. We also need to investigate further decentralization of the protocol and better storage of no-goods (cf. the polynomial space usage in <ref> [Ginsberg and McAllester 1994] </ref>). Finally, it might be the case that a good ordering of agents is not possible without redistribution of variables, leading to issues of negotiation and load-balancing.
Reference: [Holland 1992] <author> Holland, J. </author> <title> Adaptation in Natural and Artificial Systems: an Introductory Analysis with Applications to Biology, Control, and AC, </title> <publisher> 1st MIT Press ed. </publisher> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Combining Heuristics In addition to investigating single heuristics, we also implemented an algorithm to automate performance tuning of combinations of heuristics. Priorities were assigned to agents by combining the heuristic values in a weighted sum. We used a genetic algorithm <ref> [Holland 1992] </ref> to search the space of heuristic weightings, to automatically discover which heuristics were effective, and if possible to exploit epistatic relations between them.
Reference: [Luo et al. 1993] <author> Luo, Q., Hendry, P., and Buchanan, J. </author> <title> Heuristic Search for Distributed Constraint Satisfaction Problems. Research report K E G -6-93, </title> <institution> University of Strathclyde, UK. </institution>
Reference-contexts: 1 Introduction This work has been supported, in part, by the National Science Foundation under PYI award 91-58473. Cooperative distributed problem solving (CDPS) is often modeled as being done by a group of loosely-coupled computational agents involved in extensive local computations <ref> [Durfee et al. 1989; Luo et al. 1993] </ref>. Because these agents need to develop local solutions that together comprise one or more solutions to collective problems, they need to communicate intermittently about aspects of their local solutions to ensure compatibility.
Reference: [Minton et al. 1990] <author> Minton, S., Johnston, M., Philips, A., and Laird, P. </author> <title> Solving Large-Scale Constraint Satisfaction and Scheduling Problems using a Heuristic Repair Method. </title> <booktitle> Proc. of AAAI-1990, </booktitle> <pages> 17-24. </pages>
Reference-contexts: For example, highly constrained agents should have first choice. Mapping this once again to the constraint satisfaction problem (CSP) framework, it would appear that ordering the agents is analogous to ordering the variables. In fact, this is the strategy that has generally been employed <ref> [Minton et al. 1990; Yokoo 1993] </ref>, along with the typical assumption that each agent has one variable. The trouble in CDPS is that, to use communication bandwidth efficiently, the problem is distributed into a relatively small number of complex local problemscorresponding to a number of local CSPs . <p> Value ordering heuristics, though important, were not the aim of this research and so were not used. We concentrated instead on the problem of deriving agent ordering heuristics from variable ordering heuristics which have been described in the literature, e.g. <ref> [Yokoo 1993; Minton et al. 1990] </ref>. In much of the previous work, there had been a trivial derivation: since each agent had one variable, an ordering of the variables constituted an ordering of the agents.
Reference: [Yokoo et al. 1992] <author> Yokoo, M., Durfee, E., Ishida, T., and Kuwabara, K. </author> <title> Distributed Constraint Satisfaction for Formalizing Distributed Problem Solving. </title> <booktitle> 12th IEEE Int. Conf. on Dist. Computing Sys., </booktitle> <pages> 614-621. </pages>
Reference-contexts: This may be usefully viewed as a distributed constraint satisfaction problem, where there are constraints between the local solutions of the different agents <ref> [Yokoo et al. 1992] </ref>. The agents want to exchange enough information to identify and to rectify violations of constraints. Rapid delivery of pertinent information is essential for the agents to avoid computationally expensive deadends. <p> This strategy is the multi-agent version of a centralized, backtracking search. In fact, it is possible for backtracking to exploit parallelism, in cases where constraints are not highly constraining, by asynchronous backtracking ( ABT) <ref> [Yokoo et al. 1992] </ref>. With A B T , all agents in parallel pass their own variable assignments to relevant, lower priority agents and pass information on inconsistent combinations of value assignments (no-goods) to higher priority agents. <p> To reduce the size of the search space, we may use static or dynamic consistency methods to prune the tree, such as node, arc, and path consistency checks. 2.1 Asynchronous Backtracking To allow us to study dynamic prioritization, we developed a DCSP protocol inspired by the asynchronous backtracking (ABT) <ref> [Yokoo et al. 1992] </ref> and weak-commitment ( WC) protocols [Yokoo 1994]. A key idea of asynchronous backtracking is to distribute the search problem and then allow the agents to work concurrently on their local problems.
Reference: [Yokoo 1993] <author> Yokoo, M. </author> <title> Dynamic Variable/Value Ordering Heuristics for Solving Large-Scale Distributed Constraint Satisfaction Problems. </title> <booktitle> Proc. of 12th Int. Workshop on Distributed Art. Int., </booktitle> <pages> 407-422. </pages>
Reference-contexts: For example, highly constrained agents should have first choice. Mapping this once again to the constraint satisfaction problem (CSP) framework, it would appear that ordering the agents is analogous to ordering the variables. In fact, this is the strategy that has generally been employed <ref> [Minton et al. 1990; Yokoo 1993] </ref>, along with the typical assumption that each agent has one variable. The trouble in CDPS is that, to use communication bandwidth efficiently, the problem is distributed into a relatively small number of complex local problemscorresponding to a number of local CSPs . <p> Value ordering heuristics, though important, were not the aim of this research and so were not used. We concentrated instead on the problem of deriving agent ordering heuristics from variable ordering heuristics which have been described in the literature, e.g. <ref> [Yokoo 1993; Minton et al. 1990] </ref>. In much of the previous work, there had been a trivial derivation: since each agent had one variable, an ordering of the variables constituted an ordering of the agents.
Reference: [Yokoo 1994] <author> Yokoo, M. </author> <title> Weak-Commitment Search for Solving Constraint Satisfaction Problems. </title> <booktitle> Proc. of the 12th National Conf. on Art. Int., </booktitle> <pages> 313-318. </pages>
Reference-contexts: we may use static or dynamic consistency methods to prune the tree, such as node, arc, and path consistency checks. 2.1 Asynchronous Backtracking To allow us to study dynamic prioritization, we developed a DCSP protocol inspired by the asynchronous backtracking (ABT) [Yokoo et al. 1992] and weak-commitment ( WC) protocols <ref> [Yokoo 1994] </ref>. A key idea of asynchronous backtracking is to distribute the search problem and then allow the agents to work concurrently on their local problems. This creates potential parallelism by allowing each agent to actively guess solutions and by allowing agents to discover no-goods simultaneously. <p> The other two agents likewise do not need to change their assignments (a slight time savings from parallelism). The agents find the solution (x 1 , x 2 , x 3 , x 4 ) = (2, 1, 3, 1). 2.2 Asynchronous Weak-Commitment Search In (asynchronous) weak commitment search <ref> [Yokoo 1994, 1995] </ref>, agents solve their local problems and check constraints in a manner similar to asynchronous backtracking, but whenever a no-good is discovered, the agent ordering is changed so that the agent who discovered the no-good now has highest priority. In weak-commitment search, the ordering is total and dynamic.
Reference: [Yokoo 1995] <author> Yokoo, M. </author> <title> Asynchronous Weak-Commitment Search for Solving Large-Scale Distributed Constraint Satisfaction Problems. </title> <booktitle> Proc. of the 1st Int. Conf. on Multi-Agent Systems, </booktitle> <pages> 467. </pages>
References-found: 9

