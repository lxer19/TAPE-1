URL: ftp://ftp.comlab.ox.ac.uk/pub/Documents/techpapers/Jonathan.Bowen/fme93.ps.Z
Refering-URL: http://www.comlab.ox.ac.uk/archive/safety.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: &lt;Jonathan.Bowen@comlab.ox.ac.uk&gt;  Email: &lt;victoria@dcs.rhbnc.ac.uk&gt;  
Phone: 2  
Title: The Industrial Take-up of Formal Methods in Safety-Critical and Other Areas: A Perspective  
Author: Jonathan Bowen and Victoria Stavridou 
Note: "To err is human but to really foul things up requires a computer." Farmers' Almanac for 1978 (1977) `Capsules of Wisdom'  
Address: 11 Keble Road, Oxford OX1 3QD, UK.  Egham, Surrey TW20 0EX, UK.  
Affiliation: 1 Oxford University Computing Laboratory, Programming Research Group,  Department of Computer Science, Royal Holloway, University of London,  
Abstract: Formal methods may be at the crossroads of acceptance by a wider industrial community. In order for the techniques to become widely used, the gap between theorists and practitioners must be bridged effectively. In particular, safety-critical systems offer an application area where formal methods may be engaged usefully to the benefit of all. This paper discusses some of the issues concerned with the general acceptance of formal methods and concludes with a summary of the current position and how the formal methods community could proceed to improve matters in the future. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Safety related computer controlled systems market study. A review for the Department of Trade and Industry by Coopers & Lybrand in association with SRD-AEA Technology and Benchmark Research (HMSO, </institution> <address> London, </address> <year> 1992) </year>
Reference-contexts: the use of formal methods in industry [13, 14] provides a view of the current situation by comparing some significant projects which have made serious use of such techniques. [9] provides a survey of selected projects and companies that have used formal methods in the design of safety-critical systems and <ref> [1] </ref> gives an overall view of this industrial sector in the UK. In critical systems, reliability and safety are paramount. Extra cost involved in the use of formal methods is acceptable, and the use of mechanization for formal proofs may be worthwhile for critical sections of the software.
Reference: 2. <institution> The Procurement of Safety Critical Software in Defence Equipment (Part 1: </institution> <type> Requirements, Part 2: Guidance). Interim Defence Standard 00-55, Issue 1, </type> <institution> Ministry of Defence, Directorate of Standardization, </institution> <address> Kentigern House, 65 Brown Street, Glasgow G2 8EX, UK (5 April 1991) </address>
Reference-contexts: Many emerging safety-related standards are at the discussion stage [43]. A major impetus has already been provided in the UK by promulgation of the MoD interim standard 00-55 <ref> [2] </ref>, which mandates the use of formal methods and languages with sound formal semantics. It is important that standards should not be prescriptive, or that parts that are should be clearly separated and marked as such. <p> Software standards, especially those concerning safety, are likely to provide a motivating force for the use of formal methods, and it is vital that sensible and realistic approaches are suggested in emerging and future standards. 00-55 <ref> [2] </ref> seems to provide such an example at present and is recommended as guidance for other proposed standards in this area. 5 Conclusions We conclude with a subjective account of the state of the art and current issues in the formal specification and verification of computer-based systems, both in software and
Reference: 3. <author> Barden, R., Stepney, S., Cooper, D.: </author> <title> The use of Z. </title> <editor> In Nicholls, J.E. (ed.): </editor> <booktitle> Z User Workshop, </booktitle> <address> York 1991 (Springer-Verlag, </address> <note> Workshops in Computing, 1992) pp. 99-124 </note>
Reference-contexts: This is sometimes misunderstood by antagonists (and even enthusiasts) who assume that using formal methods means that everything has to be proved correct. In fact much current industrial use of formal methods involves no, or minimal, proofs <ref> [3] </ref>. At a basic level, formal methods may simply be used for a high-level specification of the system to be designed (e.g., using the Z notation). <p> An important but often neglected part of a designed system is its documentation, particularly if subsequent changes are made. Formalizing the documentation leads to less ambiguity and thus less likelyhood of errors [7]. Formal specification alone has proved beneficial in practice in many cases <ref> [3] </ref>. Such use allows the possibility of formal development subsequently as experience is gained. The human-computer interface (HCI) is an increasingly important component of most software-based systems. Errors often occur due to misunderstandings caused by poorly constructed interfaces [27].
Reference: 4. <author> Barroca, L., McDermid, J.: </author> <title> Formal methods: use and relevance for the development of safety critical systems. </title> <note> The Computer Journal 35 6 (December 1992) </note>
Reference-contexts: television program Arena broadcast in the UK during October 1990 graphically illustrates the publicly demonstrated gap between much of the computing and electronics industry, and the formal methods community, in the context of safety-critical systems; these, arguably, have the most potential benefit to gain from the use of formal methods <ref> [4] </ref>. Narrator: [On Formal Methods] ". . . this concentration on a relatively immature science has been criticized as impractical." Phil Bennett, IEE: "Well we do face the problem today that we are putting in ever increasing numbers of these systems which we need to assess.
Reference: 5. <author> Bjtrner, D.: </author> <title> Trusted computing systems: the ProCoS experience. </title> <booktitle> Proc. 14th International Conference on Software Engineering (ICSE), </booktitle> <address> Melbourne, Australia (11-14 May 1992) </address>
Reference-contexts: They are useful at a number of levels of abstraction in the development process from requirements capture, through to specification, design, coding, compilation and the underlying digital hardware itself. Some research projects are specification investigating the formal relationships between these different levels <ref> [5, 8] </ref> which are all important to avoid errors. An example of a suggested overall approach to project organization using formal methods is provided by [37]. <p> Research issues A concern, separate from ways of transforming research results into technology fit for purpose, is the direction of further research in verification. We believe that much remains to be done in terms of notations and models. Research projects such as the European ESPRIT ProCoS project <ref> [5] </ref> and the UK safemos project [8] are attempting to address such issues. However, a most pressing question is the shape of the future theorem proving activity itself, whether it relates to software, hardware or both.
Reference: 6. <author> Blyth, D., Bolddyreff, C., Ruggles, C., Tetteh-Lartey, N.: </author> <title> The case for formal methods in standards. </title> <note> IEEE Software (September 1990) 65-67 </note>
Reference-contexts: Formal notations are eschewed in many software-related standards for describing semantics, although BNF-style descriptions are universally accepted for describing syntax. The case for the use of formal notations in standards is now mounting as formalisms become increasingly understood and accepted by the relevant readership <ref> [6] </ref>. Hopefully this will produce more precise and less ambiguous standards in the future, although there is still considerable debate on the subject and widely differing views across different countries [15].
Reference: 7. <author> Bowen, J.P.: </author> <title> Formal specification in Z as a design and documentation tool. </title> <note> Second IEE/BCS Conference, Software Engineering 88, Conference Publication No. 290 (July 1988) pp. 164-168 </note>
Reference-contexts: An important but often neglected part of a designed system is its documentation, particularly if subsequent changes are made. Formalizing the documentation leads to less ambiguity and thus less likelyhood of errors <ref> [7] </ref>. Formal specification alone has proved beneficial in practice in many cases [3]. Such use allows the possibility of formal development subsequently as experience is gained. The human-computer interface (HCI) is an increasingly important component of most software-based systems.
Reference: 8. <author> Bowen, J.P.: </author> <title> Towards verified systems (Elsevier, Real-time Safety-critical Systems Series, </title> <note> 1993) In preparation </note>
Reference-contexts: They are useful at a number of levels of abstraction in the development process from requirements capture, through to specification, design, coding, compilation and the underlying digital hardware itself. Some research projects are specification investigating the formal relationships between these different levels <ref> [5, 8] </ref> which are all important to avoid errors. An example of a suggested overall approach to project organization using formal methods is provided by [37]. <p> We believe that much remains to be done in terms of notations and models. Research projects such as the European ESPRIT ProCoS project [5] and the UK safemos project <ref> [8] </ref> are attempting to address such issues. However, a most pressing question is the shape of the future theorem proving activity itself, whether it relates to software, hardware or both.
Reference: 9. <author> Bowen, J.P., Stavridou, V.: </author> <title> Safety-critical systems, formal methods and standards. </title> <type> Technical Report PRG-TR-5-92, </type> <institution> Programming Research Group, Oxford University Computing Laboratory, </institution> <note> UK (1992) Revised version to appear in the Software Engineering Journal </note>
Reference-contexts: Now that a number of case studies and examples of real use are available, formal methods are becoming more acceptable in some industrial circles [19, 22, 24]. Some of the most notable of these are mentioned in <ref> [9] </ref>, particularly those where a quantitative indication of the benefits gained have been published. 2.2 Modes of use Formal methods may be characterized at a number of levels of usage and these provide different levels of assurance for the resulting software that is developed. <p> A recent international investigation of the use of formal methods in industry [13, 14] provides a view of the current situation by comparing some significant projects which have made serious use of such techniques. <ref> [9] </ref> provides a survey of selected projects and companies that have used formal methods in the design of safety-critical systems and [1] gives an overall view of this industrial sector in the UK. In critical systems, reliability and safety are paramount.
Reference: 10. <author> Bowen, J.P., Stavridou, V.: </author> <title> Formal methods and software safety. </title> <booktitle> In [17] (1992) pp. </booktitle> <pages> 93-98 </pages>
Reference-contexts: However formal methods have been demonstrated to reduce errors (and even costs and time to market) if used appropriately [24, 30]. In general though, formal development does increase costs <ref> [10] </ref>. For example, at the 1992 Z Users Meeting Andrew Bradley of British Aerospace reported the following typical productivity figures for different development approaches in terms of lines of code (LOC) per man year: Non-safety critical code 1400-1600 LOC/m.y. Normal safety critical code 700-800 LOC/m.y. Full formal development 200-400 LOC/m.y.
Reference: 11. <author> Buxton, J.N., Malcolm, R.: </author> <title> Software technology transfer. </title> <note> Software Engineering Journal 6 1 (January 1991) 17-23 </note>
Reference-contexts: Problems at any stage can lead to overall failure <ref> [11] </ref>. A technology such as formal methods should be well established before it is applied, especially in critical applications where safety is paramount.
Reference: 12. <author> Coleman, D.: </author> <title> The technology transfer of formal methods: </title> <booktitle> what's going wrong? Proc. 12th ICSE Workshop on Industrial Use of Formal Methods, </booktitle> <address> Nice, France (March 1990) </address>
Reference-contexts: It is likely that there will be a skills shortage in this area for the foreseeable future and significant difficulties remain to be overcome <ref> [12] </ref>.
Reference: 13. <author> Craigen, D., Gerhart, S., Ralston, T.J.: </author> <title> An international survey of industrial applications of formal methods. Atomic Energy Control Board of Canada, </title> <type> U.S. </type> <institution> National Institute of Standards and Technology, and U.S. </institution> <note> Naval Research Laboratories (1993) To appear </note>
Reference-contexts: Some companies have managed to specialize in providing formal methods expertise (e.g., CLInc in the US, ORA in Canada and Praxis in the UK), although such examples are exceptional. A recent international investigation of the use of formal methods in industry <ref> [13, 14] </ref> provides a view of the current situation by comparing some significant projects which have made serious use of such techniques. [9] provides a survey of selected projects and companies that have used formal methods in the design of safety-critical systems and [1] gives an overall view of this industrial <p> However, systems based on widely used programming languages and microprocessors are still problematic and we can only deal with some of their aspects. Despite these achievements, there are some very real problems hindering widespread use of formal methods. Some of these are articulated elsewhere <ref> [13, 14] </ref>. We summarize the issues by pointing out that formal methods deployment in the large remains an esoteric, risky and potentially very costly activity whose impact on processes and products of the computer industry has never been properly evaluated.
Reference: 14. <author> Craigen, D., Gerhart, S., Ralston, T.J.: </author> <title> Formal methods reality check: industrial usage. </title> <note> In Formal Methods Europe Symposium (FME'93) (Springer-Verlag, LNCS, 1993) In this volume </note>
Reference-contexts: Some companies have managed to specialize in providing formal methods expertise (e.g., CLInc in the US, ORA in Canada and Praxis in the UK), although such examples are exceptional. A recent international investigation of the use of formal methods in industry <ref> [13, 14] </ref> provides a view of the current situation by comparing some significant projects which have made serious use of such techniques. [9] provides a survey of selected projects and companies that have used formal methods in the design of safety-critical systems and [1] gives an overall view of this industrial <p> However, systems based on widely used programming languages and microprocessors are still problematic and we can only deal with some of their aspects. Despite these achievements, there are some very real problems hindering widespread use of formal methods. Some of these are articulated elsewhere <ref> [13, 14] </ref>. We summarize the issues by pointing out that formal methods deployment in the large remains an esoteric, risky and potentially very costly activity whose impact on processes and products of the computer industry has never been properly evaluated.
Reference: 15. <author> Deransart, P.: </author> <title> Prolog standardisation: the usefulness of a formal specification, </title> <journal> on comp.lang.prolog, </journal> <note> comp.specification and comp.software-eng electronic usenet newsgroups (October 1992) </note>
Reference-contexts: Hopefully this will produce more precise and less ambiguous standards in the future, although there is still considerable debate on the subject and widely differing views across different countries <ref> [15] </ref>. Formal notations themselves have now reached the level of maturity that some of them are being standardized (e.g., LOTOS, VDM and Z). An important trigger for the exploitation of research into formal methods could be the interest of regulatory bodies or standardization committees (e.g., the International Electrotechnical Commission).
Reference: 16. <author> Dyer, M.: </author> <title> The Cleanroom approach to quality software development (Wiley Series in Software Engineering Practice, </title> <year> 1992) </year>
Reference-contexts: An example of a suggested overall approach to project organization using formal methods is provided by [37]. The Cleanroom approach is a technique that could easily incorporate the use of existing formal notations to produce highly reliable software by means of non execution-based program development <ref> [16] </ref>. This technique has been applied very successfully using rigorous software development techniques with a proven track record of reducing errors by a significant factor, in both safety-critical and non-critical applications. The programs are developed separately using informal (often just mental) proofs before they are certified (rather than tested).
Reference: 17. <editor> Frey, H.H. (ed.): </editor> <booktitle> Safety of computer control systems 1992 (SAFECOMP'92). Computer Systems in Safety-critical Applications, Proc. IFAC Symposium, </booktitle> <address> Zurich, Switzerland, </address> <note> 28-30 October 1992 (Pergamon Press, </note> <year> 1992) </year>
Reference-contexts: Meetings with a good mix of industry and academia are to be encouraged, such as SAFECOMP <ref> [17] </ref> and those organized by the UK Safety-Critical Systems Club [38]. Research issues A concern, separate from ways of transforming research results into technology fit for purpose, is the direction of further research in verification. We believe that much remains to be done in terms of notations and models.
Reference: 18. <author> Good, D.I., Young, W.D.: </author> <title> Mathematical methods for digital system development. </title> <editor> In Prehn, S., Toetenel, W.J. (eds.): </editor> <booktitle> VDM '91, Formal Software Development Methods, </booktitle> <volume> Volume 2: </volume> <publisher> Tutorials (Springer-Verlag, LNCS 552, </publisher> <pages> 1991) pp. 406-430 </pages>
Reference-contexts: Some impressive verification results. Proving the correctness of simple but realistic systems based on small microprocessors is no longer an issue as the work on SACEM [19] and at CLInc <ref> [18, 31] </ref>, for example, illustrates. SACEM is notable for its size, involving around 80 man years effort for a system that is designed for actual use.
Reference: 19. <author> Guiho, G., Hennebert, C.: </author> <booktitle> SACEM software validation. Proc. 12th International Conference on Software Engineering (ICSE) (IEEE Computer Society Press, March 1990) pp. </booktitle> <pages> 186-191 </pages>
Reference-contexts: Up until quite recently it has widely been considered infeasible to use formal techniques to verify software in an industrial setting. Now that a number of case studies and examples of real use are available, formal methods are becoming more acceptable in some industrial circles <ref> [19, 22, 24] </ref>. <p> Some impressive verification results. Proving the correctness of simple but realistic systems based on small microprocessors is no longer an issue as the work on SACEM <ref> [19] </ref> and at CLInc [18, 31], for example, illustrates. SACEM is notable for its size, involving around 80 man years effort for a system that is designed for actual use.
Reference: 20. <author> Hall, J.A.: </author> <title> Seven myths of formal methods. </title> <note> IEEE Software (September 1990) 11-19 </note>
Reference-contexts: Even in companies where formal methods are used, it is normally only to a limited extent and is often resisted (at least initially) by engineers, programmers and managers. <ref> [20] </ref> is an excellent article that helps to dispel some of the unfounded notions and beliefs about formal methods. Up until quite recently it has widely been considered infeasible to use formal techniques to verify software in an industrial setting.
Reference: 21. <author> Harrison, </author> <title> M.D.: Engineering human error tolerant software. </title> <editor> In Nicholls, J.E. (ed.): </editor> <booktitle> Z User Workshop, </booktitle> <address> York 1991 (Springer-Verlag, </address> <note> Workshops in Computing, 1992) pp. 191-204 </note>
Reference-contexts: There seems to be considerable scope for further research in this area, which also spans many other disparate disciplines, particularly with application to safety-critical systems where human errors can easily cause death and injury <ref> [21] </ref>. 4 Motivation for the Use of Formal Methods 4.1 Standards Up until relatively recently there have been few standards concerned specifically with formal notations and methods. Formal notations are eschewed in many software-related standards for describing semantics, although BNF-style descriptions are universally accepted for describing syntax.
Reference: 22. <author> Hill, J.V.: </author> <title> Software development methods in practice. </title> <booktitle> Proc. COMPASS '91: 6th Annual Conference on Computer Assurance (1991) </booktitle>
Reference-contexts: Up until quite recently it has widely been considered infeasible to use formal techniques to verify software in an industrial setting. Now that a number of case studies and examples of real use are available, formal methods are becoming more acceptable in some industrial circles <ref> [19, 22, 24] </ref>. <p> For such projects, formal methods should be used more selectively, perhaps only using rigorous proofs or just specification alone. Formal documentation of key components may provide significant benefits to the development of many industrial software-based systems without excessive and sometimes demonstrably decreased overall cost (e.g., see <ref> [22, 24, 30] </ref>). 3.1 Application areas and techniques Formal methods are applicable in a wide variety of contexts to both software and hardware.
Reference: 23. <author> Hoare, </author> <title> C.A.R.: Let's make models. </title> <editor> In Baeten, J.C.M., Klop, J.W. (eds.): </editor> <booktitle> Proc. </booktitle> <publisher> CONCUR '90 (Springer-Verlag, LNCS 458, </publisher> <year> 1990) </year>
Reference-contexts: In the words of C.A.R. Hoare <ref> [23] </ref> models are like seeds scattered in the wind. Most will perish but others will root and flourish. The more seeds the better.
Reference: 24. <author> Houston, I., King, </author> <title> S: CICS project report: experiences and results from the use of Z in IBM. </title> <editor> In Prehn, S., Toetenel, W.J. (eds.): </editor> <title> VDM '91, Formal Software Development Methods (Springer-Verlag, </title> <note> LNCS 551, 1991) pp. 588-603 </note>
Reference-contexts: Up until quite recently it has widely been considered infeasible to use formal techniques to verify software in an industrial setting. Now that a number of case studies and examples of real use are available, formal methods are becoming more acceptable in some industrial circles <ref> [19, 22, 24] </ref>. <p> It should be noted that despite the mathematical basis of formal methods, errors are still possible because of the fallibility of humans and, for mechanical verification, computers. However formal methods have been demonstrated to reduce errors (and even costs and time to market) if used appropriately <ref> [24, 30] </ref>. In general though, formal development does increase costs [10]. For example, at the 1992 Z Users Meeting Andrew Bradley of British Aerospace reported the following typical productivity figures for different development approaches in terms of lines of code (LOC) per man year: Non-safety critical code 1400-1600 LOC/m.y. <p> For such projects, formal methods should be used more selectively, perhaps only using rigorous proofs or just specification alone. Formal documentation of key components may provide significant benefits to the development of many industrial software-based systems without excessive and sometimes demonstrably decreased overall cost (e.g., see <ref> [22, 24, 30] </ref>). 3.1 Application areas and techniques Formal methods are applicable in a wide variety of contexts to both software and hardware.
Reference: 25. <institution> IEEE standard glossary of software engineering terminology. In IEEE Software Engineering Standards Collection (Elsevier Applied Science, </institution> <year> 1991) </year>
Reference-contexts: For example, the following two alternative definitions for formal specification are taken from a glossary issued by the IEEE <ref> [25] </ref>: 1. A specification written and approved in accordance with established stan dards. 2. A specification written in a formal notation, often for use in proof of cor rectness. The meaning of "formal notation" is not elaborated further in the glossary, although "proof of correctness" is defined in general terms.
Reference: 26. <author> Josephs, M.B., Redmund-Pyle, D.: </author> <title> Entity-relationship models expressed in Z: a synthesis of structured and formal methods, </title> <type> Technical Report PRG-TR-20-91, </type> <institution> Programming Research Group, Oxford University Computing Laboratory, </institution> <address> UK (July 1991) </address>
Reference-contexts: The meaning of "formal notation" is not elaborated further in the glossary, although "proof of correctness" is defined in general terms. Some confuse formal methods with "structured methods". While research is underway to link the two and provide a formal basis to structured methods (e.g., see <ref> [26] </ref>), the two communities have, at least until now, been sharply divided apart from a few notable exceptions. Many so-called formal "methods" have concentrated on notations and/or tools and have not addressed how they should be slotted into existing industrial best practice.
Reference: 27. <author> Learmount, D.: </author> <title> Airline safety review: human factors. </title> <note> Flight International 142 4238 (22-28 July 1992) 30-33 </note>
Reference-contexts: Formal specification alone has proved beneficial in practice in many cases [3]. Such use allows the possibility of formal development subsequently as experience is gained. The human-computer interface (HCI) is an increasingly important component of most software-based systems. Errors often occur due to misunderstandings caused by poorly constructed interfaces <ref> [27] </ref>. Formalizing an HCI in a realistic and useful manner is a difficult task, but progress is being made in categorizing features of interfaces that may help to ensure their reliability in the future.
Reference: 28. <author> Liskov, B., Guttag, J.: </author> <title> Abstraction and Specification in Program Development (MIT Press, </title> <year> 1986) </year>
Reference-contexts: We believe that discovering ways of harnessing abstraction in theorem proving will be exciting and empowering. Liskov and Guttag argue that abstraction is 2-dimensional <ref> [28] </ref>. Firstly, it can be obtained via parameterization, e.g., the use of procedure parameters so that a piece of code is usable on large, perhaps polymorphic data sets.
Reference: 29. <author> MacKenzie, D.: </author> <title> Computers, formal proof, and the law courts. </title> <journal> Notices of the American Mathematical Society 39 9 (November 1992) 1066-1069 </journal>
Reference-contexts: In particular, the term formal proof has been used quite loosely sometimes, and this has even led to litigation in the law courts over the VIPER microprocessor, although the case was ended before a court ruling was pronounced <ref> [29] </ref>. If extravagant claims are made, it is quite possible that a similar case could occur again. 00-55 differentiates between formal proof and rigorous argument, preferring the former, but sometimes accepting the latter with a correspondingly lower level of design assurance.
Reference: 30. <author> May, D., Barrett, G., Shepherd, D.: </author> <title> Designing chips that work. In Hoare, C.A.R., </title> <editor> Gordon, M.J.C. (eds.): </editor> <booktitle> Mechanized reasoning and hardware design (Prentice Hall International Series in Computer Science, 1992) pp. </booktitle> <pages> 3-19 </pages>
Reference-contexts: It should be noted that despite the mathematical basis of formal methods, errors are still possible because of the fallibility of humans and, for mechanical verification, computers. However formal methods have been demonstrated to reduce errors (and even costs and time to market) if used appropriately <ref> [24, 30] </ref>. In general though, formal development does increase costs [10]. For example, at the 1992 Z Users Meeting Andrew Bradley of British Aerospace reported the following typical productivity figures for different development approaches in terms of lines of code (LOC) per man year: Non-safety critical code 1400-1600 LOC/m.y. <p> For such projects, formal methods should be used more selectively, perhaps only using rigorous proofs or just specification alone. Formal documentation of key components may provide significant benefits to the development of many industrial software-based systems without excessive and sometimes demonstrably decreased overall cost (e.g., see <ref> [22, 24, 30] </ref>). 3.1 Application areas and techniques Formal methods are applicable in a wide variety of contexts to both software and hardware.
Reference: 31. <author> Moore, J.S. et al., </author> <note> Special issue on system verification. Journal of Automated Reasoning 5 4 (1989) 409-530 </note>
Reference-contexts: Some impressive verification results. Proving the correctness of simple but realistic systems based on small microprocessors is no longer an issue as the work on SACEM [19] and at CLInc <ref> [18, 31] </ref>, for example, illustrates. SACEM is notable for its size, involving around 80 man years effort for a system that is designed for actual use.
Reference: 32. <author> Neesham, C.: </author> <note> Safe conduct. Computing (12 November 1992) 18-20 </note>
Reference-contexts: For example, 00-55 includes a separate guidance section. 4.2 Legislation Governmental legislation is likely to provide increasing motivation to apply appropriate techniques in the development of safety-critical systems. For example, a new piece of European Commission legislation, the Machine Safety Directive, is effective from 1st January 1993 <ref> [32] </ref>. This encompasses software and if there is an error in the machine's logic that results in injury then a claim can be made under civil law against the supplier.
Reference: 33. <author> Nicholls, </author> <title> J.E.: A survey of Z courses in the UK. </title> <editor> In Nicholls, J.E. (ed.), </editor> <booktitle> Z User Workshop, Oxford 1990 (Springer-Verlag, Workshops in Computing, 1991) pp. </booktitle> <pages> 343-350 </pages>
Reference-contexts: In the past has been necessary for companies to provide their own training or seek specialist help, although formal methods courses are now quite widely available from both industry and academia in some countries (e.g., for the UK, see <ref> [33] </ref>). It appears that Europe is leading the US and the rest of the world in this particular battle, and in the use of formal methods in general, so this may be a good sign for the long term development and reliability of software emanating from Europe.
Reference: 34. <editor> Normington, G.: Cleanroom and Z. In Bowen, J.P., Nicholls, J.E. (eds.), </editor> <booktitle> Z User Workshop, </booktitle> <address> London 1992 (Springer-Verlag, </address> <note> Workshops in Computing, 1993) To appear </note>
Reference-contexts: The pragmatic view is that real programs are too large to be formally proved correct, so they must be written correctly in the first place! The possibility of combining Cleanroom techniques and formal methods is now being investigated <ref> [34] </ref>. There is considerable research into object-oriented extensions of existing formal notations such as Z and VDM [40] and the subject is under active discussion in both communities.
Reference: 35. <author> Pyle, </author> <title> I.: </title> <journal> Software engineers and the IEE. </journal> <note> Software Engineering Journal 1 2 (March 1986) 66-68 </note>
Reference-contexts: Many computing science courses, especially in Europe, are now including a significant portion of basic relevant mathematical training (e.g., discrete mathematics such as set theory and predicate logic). In this respect, education in the US seems to be lagging behind. <ref> [35] </ref> discusses the accreditation of software engineers by profession institutions. It is suggested that training is as important as experience in that both are necessary. In addition, software engineers should be responsible for their mistakes if they occur through negligence rather than genuine error.
Reference: 36. <institution> Potocki de Montalk, J.P.: Computer software in civil aircraft. Microprocessors and Microsystems. </institution> <note> In Cullyer, W.J. (ed.): Special issue on safety critical systems (1993) To appear </note>
Reference-contexts: 1 Introduction The software used in computers has become progressively more complex as the size of computers has increased and their price has decreased <ref> [36] </ref>. Unfortunately software development techniques have not kept pace with the rate of software production and improvements in hardware. Errors in software are renowned and software manufacturers have in general issued their products with outrageous disclaimers that would not be acceptable in any other more established industrial engineering sector.
Reference: 37. <author> Ravn, A.P., Stavridou, V.: </author> <title> Project organisation. </title> <editor> In Bjtrner, D., Langmaack, H., </editor> <title> Hoare, C.A.R.: Provably Correct Systems, </title> <note> chapter 9, part 1, ESPRIT BRA 3104 ProCoS Technical Report (1992) Available from Department of Computer Science, </note> <institution> DTH, Lyngby, Denmark </institution>
Reference-contexts: Some research projects are specification investigating the formal relationships between these different levels [5, 8] which are all important to avoid errors. An example of a suggested overall approach to project organization using formal methods is provided by <ref> [37] </ref>. The Cleanroom approach is a technique that could easily incorporate the use of existing formal notations to produce highly reliable software by means of non execution-based program development [16].
Reference: 38. <author> Redmill, F., Anderson, T.: </author> <title> Safety-critical systems current issues, </title> <publisher> techniques and standards (Chapman and Hall, </publisher> <year> 1993) </year>
Reference-contexts: Meetings with a good mix of industry and academia are to be encouraged, such as SAFECOMP [17] and those organized by the UK Safety-Critical Systems Club <ref> [38] </ref>. Research issues A concern, separate from ways of transforming research results into technology fit for purpose, is the direction of further research in verification. We believe that much remains to be done in terms of notations and models.
Reference: 39. <author> Stein, </author> <title> R.M.: Safety by formal design. </title> <note> BYTE (August 1992) p. 157 </note>
Reference-contexts: Awareness of the benefits of formal methods must be publicized to a wide selection of both technical and non-technical people, especially outside the formal methods community (e.g., as in <ref> [39] </ref>), and the possibilities and limitations of the techniques available must be well understood by the relevant personnel to avoid costly mistakes. Unfortunately, the rapid advances and reduction in cost of computers in recent years has meant that time is not on our side.
Reference: 40. <author> Stepney, S., Barden, R., Cooper, D. (eds.): </author> <title> Object orientation in Z (Springer-Verlag, </title> <booktitle> Workshops in Computing, </booktitle> <year> 1992) </year>
Reference-contexts: There is considerable research into object-oriented extensions of existing formal notations such as Z and VDM <ref> [40] </ref> and the subject is under active discussion in both communities. Object-oriented techniques have had considerable success in their take-up by industry, and such research may eventually lead to a practical method combining the two techniques.
Reference: 41. <author> Thomas, </author> <title> M.C.: The industrial use of formal methods. </title> <journal> Microprocessors and Mi-crosystems. </journal> <note> In Cullyer, W.J. (ed.): Special issue on safety critical systems (1993) To appear </note>
Reference-contexts: A further consideration must be whether formal methods can enhance product quality, and even company prestige. 3 Industrial-scale Usage As has previously been mentioned, the take up of formal methods is not yet great in industry, but their use has normally been successful when they have been applied appropriately <ref> [41] </ref>. Some companies have managed to specialize in providing formal methods expertise (e.g., CLInc in the US, ORA in Canada and Praxis in the UK), although such examples are exceptional.
Reference: 42. <author> Tierney, M.: </author> <title> The evolution of Def Stan 00-55 and 00-56: an intensification of the "formal methods debate" in the UK. </title> <booktitle> Proc. Workshop on Policy Issues in Systems and Software Development, </booktitle> <institution> Science Policy Research Unit, </institution> <address> Brighton, UK (July 1991) </address>
Reference-contexts: The fact that we can build over-complex safety-critical systems is no excuse for doing so." This repartee is typical not only of the substantial technology transfer problems, but also of the debate between the "reformist" (pro "real world") and the "radical" (pro formal methods) camps in software engineering <ref> [42] </ref>. 2.1 Misconceptions and barriers Unfortunately formal methods is sometimes misunderstood and relevant terms are even misused in industry (at least, in the eyes of the formal methods community). For example, the following two alternative definitions for formal specification are taken from a glossary issued by the IEEE [25]: 1.
Reference: 43. <author> Wallace, D.R., Kuhn, D.R., Ippolito, L.M.: </author> <title> An analysis of selected software safety standards. </title> <note> IEEE AES Magazine (August 1992) 3-14 </note>
Reference-contexts: An important trigger for the exploitation of research into formal methods could be the interest of regulatory bodies or standardization committees (e.g., the International Electrotechnical Commission). Many emerging safety-related standards are at the discussion stage <ref> [43] </ref>. A major impetus has already been provided in the UK by promulgation of the MoD interim standard 00-55 [2], which mandates the use of formal methods and languages with sound formal semantics.
Reference: 44. <author> Wing, J.M., Zaremski, </author> <title> A.M.: Unintrusive ways to integrate formal specifications in practice. </title> <editor> In Prehn, S., Toetenel, W.J. (eds.), </editor> <title> VDM '91, Formal Software Development Methods (Springer-Verlag, LNCS 551, 1991) pp. 547-569 This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: However, the existence of such a formalism is not sufficient; the relevant technology must also be able to address the problems of the industry by integrating with currently used techniques <ref> [44] </ref>, and must do so in a way that is commercially advantageous. It should be noted that despite the mathematical basis of formal methods, errors are still possible because of the fallibility of humans and, for mechanical verification, computers.
References-found: 44

