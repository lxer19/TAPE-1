URL: http://pertsserver.cs.uiuc.edu/papers/HuaLiCh95.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Email: fthuang, janeliug@cs.uiuc.edu  jychung@watson.ibm.com  
Title: Allowing Cycle-Stealing Direct Memory Access I/O Concurrent with Hard-Real-Time Programs  
Author: Tai-Yi Huang, Jane W.-S. Liu 
Address: 1304 W Springfield Ave. Urbana, IL 61801, USA  P.O. Box 704  Yorktown Heights, NY 10598, USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  Jen-Yao Chung  IBM T. J. Watson Research Center  
Date: June 3-6, 1996, Tokyo  
Note: To appear in: Int. Conf. on Parallel and Distributed Systems, ICPADS'96,  
Abstract: Hard-real-time schedulability analysis is carried out based on the assumption that the worst-case execution time (WCET) of each task is known. Cycle-stealing Direct Memory Access (DMA) I/O steals bus cycles from an executing program and prolongs the execution time of the program. Because of the difficulty in bounding the interference on the executing program, cycle-stealing DMA I/O is often disabled in hard-real-time systems. This paper presents an analytical method for bounding the WCET of a program executing concurrently with cycle-stealing DMA I/O. This is an extension of our previous work [3] which bounded the WCET of a straight-line sequence of instructions when cycle-stealing operations are allowed. We demonstrate the effectiveness of our method with experiments on several programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> MC68000 Family: </author> <title> CPU32 reference manual. </title> <address> Mo-torola, </address> <year> 1990. </year>
Reference-contexts: The timing information of each instruction, including how many machine cycles the instruction is composed of, the function of each machine cycle, and the execution time of each machine cycle, is obtained from <ref> [1] </ref>. Because the clock frequency of MC68332 microprocessor is 16.78 MHz, we set T c to 60 ns. By assuming that a 0-wait memory is used and the DMA transfer of a unit of data takes 1 bus cycle, we set DT to 120 ns.
Reference: [2] <author> R. Gupta and P. Gopinath. </author> <title> Correlation analysis techniques for refining execution time estimates of real-time applications. </title> <booktitle> In Proceedings of the IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 54-58, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Mok et al. [5] implemented a timing tool that finds the worst-case execution paths of assembly language programs and bounds their WCETs. Pusher and Koza [9] invented several new language constructs to let programmers provide information about the execution frequency constraints for a statement. Gupta and Gopinath <ref> [2] </ref> introduced techniques for identifying correlations among various statements within a program. Zhang, Burns and Nicholson [11] bounded the WCET of a program executed in a two-stage instruction pipeline. <p> Because the timing effect of cycle-stealing operations on each instruction is analyzed independently, many techniques, including the language constructs developed by Pusher and Koza [9], the correlation analysis techniques developed by Gupta and Gopinath <ref> [2] </ref>, the semantics-preserving transformation techniques developed by Niehaus [6], and the dynamic path analysis developed by Park [8], can be used to improve the prediction. To simplify the analysis, we assumed that no cache memory is present.
Reference: [3] <author> Tai-Yi Huang and Jane W.-S. Liu. </author> <title> Predicting the worst-case execution time of the concurrent execution of instructions and cycle-stealing DMA I/O operations. </title> <booktitle> In ACM SIGPLAN Workshop on Languages, Compilers and Tools for Real-Time Systems, </booktitle> <pages> pages 1-6, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Our previous work (Huang and Liu <ref> [3] </ref>) bounded the WCET of a sequence of instructions when cycle-stealing operations are allowed. In this paper we extend the previous work to bound the WCET of straight-line structures, loop structures, and conditional structures, the three basic structures of a program. <p> We can compute d by the equation d = m fl DT + 2 fl BMT T k where T c is the period of a clock cycle. The derivation for these equations can be found in our previous work <ref> [3] </ref>. Because each instruction begins with a B cycle, no DMA data transfer can cross two instructions. As a result, the effect of cycle-stealing operations on each instruction can be analyzed independently, without considering the other instructions.
Reference: [4] <author> Sung-Soo Lim, et al. </author> <title> An accurate worst case timing analysis technique for RISC processor. </title> <booktitle> In Proceedinngs of Real-Time Systems Symposium, </booktitle> <pages> pages 97-108. </pages> <publisher> IEEE, </publisher> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Gupta and Gopinath [2] introduced techniques for identifying correlations among various statements within a program. Zhang, Burns and Nicholson [11] bounded the WCET of a program executed in a two-stage instruction pipeline. Lim et al. <ref> [4] </ref> extended the original work [7] to account for the effect of caching and pipelining execution on RISC processors. All the above methods assume no interaction between the executing program and other activities such as DMA I/O in the system.
Reference: [5] <author> Aloysius K. Mok, Prasanna Amerasinghe, Moyer Chen, and Kamtorn Tantisirivat. </author> <title> Evaluating tight execution time bounds of programs by annotations. </title> <booktitle> In Proceedings of the Sixth IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 272-279, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: To bound the WCET of a program, the dynamic execution of the program and interactions between the program and other activities in the system must be considered. Mok et al. <ref> [5] </ref> implemented a timing tool that finds the worst-case execution paths of assembly language programs and bounds their WCETs. Pusher and Koza [9] invented several new language constructs to let programmers provide information about the execution frequency constraints for a statement. <p> The predicted WCET, denoted by WCET NCS , is equal to the sum of the WCET of the program and the WCET of the I/O operation obtained by assuming that each executes alone. In this experiment, we use the approach developed by Mok et al. <ref> [5] </ref> to predict the WCET of a program as it executes alone.
Reference: [6] <author> Douglas Niehaus. </author> <title> Program representation and translation for predictable real-time systems. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 53-63, </pages> <year> 1991. </year>
Reference-contexts: Because the timing effect of cycle-stealing operations on each instruction is analyzed independently, many techniques, including the language constructs developed by Pusher and Koza [9], the correlation analysis techniques developed by Gupta and Gopinath [2], the semantics-preserving transformation techniques developed by Niehaus <ref> [6] </ref>, and the dynamic path analysis developed by Park [8], can be used to improve the prediction. To simplify the analysis, we assumed that no cache memory is present. If cache memory is used, the number of bus accesses by the CPU is significantly reduced because of cache hits.
Reference: [7] <author> Chang Yun Park. </author> <title> Predicting Deterministic Execution Times of Real-Time Programs. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <address> Seattle, WA, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Gupta and Gopinath [2] introduced techniques for identifying correlations among various statements within a program. Zhang, Burns and Nicholson [11] bounded the WCET of a program executed in a two-stage instruction pipeline. Lim et al. [4] extended the original work <ref> [7] </ref> to account for the effect of caching and pipelining execution on RISC processors. All the above methods assume no interaction between the executing program and other activities such as DMA I/O in the system.
Reference: [8] <author> Chang Yun Park. </author> <title> Predicting program execution times by analyzing static and dynamic program paths. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 5 </volume> <pages> 31-62, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: the timing effect of cycle-stealing operations on each instruction is analyzed independently, many techniques, including the language constructs developed by Pusher and Koza [9], the correlation analysis techniques developed by Gupta and Gopinath [2], the semantics-preserving transformation techniques developed by Niehaus [6], and the dynamic path analysis developed by Park <ref> [8] </ref>, can be used to improve the prediction. To simplify the analysis, we assumed that no cache memory is present. If cache memory is used, the number of bus accesses by the CPU is significantly reduced because of cache hits.
Reference: [9] <author> P. Puschner and C. Koza. </author> <title> Calculating the maximum execution time of real-time programs. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 1 </volume> <pages> 159-176, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Mok et al. [5] implemented a timing tool that finds the worst-case execution paths of assembly language programs and bounds their WCETs. Pusher and Koza <ref> [9] </ref> invented several new language constructs to let programmers provide information about the execution frequency constraints for a statement. Gupta and Gopinath [2] introduced techniques for identifying correlations among various statements within a program. <p> The bus utilization analyzer also analyzed the computational requirement of each program. We classify all instructions into two categories: long instructions and short instructions. An instruction is classified as a long instruction if during its execution, the CPU 1 This is the example used in <ref> [9] </ref> Name Utilization % of long insts Select 0.92 0% Scheduler 0.89 0% Bsearch 0.83 0% Calcenter 0.53 6% Mtxmul 0.40 11% Correlate 0.36 16% Tdsim 0.34 16% Mtxmul2 0.32 22% Table 2: The features of tested programs does not need the bus for 8 processor clock cycles or more. <p> Because the timing effect of cycle-stealing operations on each instruction is analyzed independently, many techniques, including the language constructs developed by Pusher and Koza <ref> [9] </ref>, the correlation analysis techniques developed by Gupta and Gopinath [2], the semantics-preserving transformation techniques developed by Niehaus [6], and the dynamic path analysis developed by Park [8], can be used to improve the prediction. To simplify the analysis, we assumed that no cache memory is present.
Reference: [10] <institution> The VMEbus Specification. Motorola, </institution> <year> 1985. </year>
Reference-contexts: In contrast, the CPU does not access the bus when it is in an E cycle. We assume that the CPU is a synchronous one, i.e., each machine cycle is triggered by the processor clock. The bus controller uses a protocol based on the VMEbus specification <ref> [10] </ref> to regulate the bus contention between the CPU and the DMAC. Each device that needs to access the bus sends a bus request first. If the CPU is in a B cycle, the DMAC waits after sending a bus request.
Reference: [11] <author> N. Zhang, A. Burns, and M. Nicholson. </author> <title> Pipelined processors and worst case execution times. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 5 </volume> <pages> 319-343, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Pusher and Koza [9] invented several new language constructs to let programmers provide information about the execution frequency constraints for a statement. Gupta and Gopinath [2] introduced techniques for identifying correlations among various statements within a program. Zhang, Burns and Nicholson <ref> [11] </ref> bounded the WCET of a program executed in a two-stage instruction pipeline. Lim et al. [4] extended the original work [7] to account for the effect of caching and pipelining execution on RISC processors.
References-found: 11

