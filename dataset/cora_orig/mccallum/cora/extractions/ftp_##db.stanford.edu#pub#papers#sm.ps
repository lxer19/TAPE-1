URL: ftp://db.stanford.edu/pub/papers/sm.ps
Refering-URL: http://www.cs.toronto.edu/~mendel/dwbib.html
Root-URL: 
Email: quass@cs.stanford.edu  mumick@research.att.com  widom@cs.stanford.edu  
Title: Making Views Self-Maintainable for Data Warehousing (Extended Abstract)  
Author: Dallan Quass Ashish Gupta Inderpal Singh Mumick Jennifer Widom 
Web: ashgupta.us.oracle.com  
Affiliation: Stanford University  Oracle Corporation  AT&T Bell Laboratories  Stanford University  
Abstract: A data warehouse stores materialized views over data from one or more sources in order to provide fast access to the integrated data, regardless of the availability of the data sources. Warehouse views need to be maintained in response to changes to the base data in the sources. Except for very simple views, maintaining a warehouse view requires access to data that is not available in the view itself. Hence, to maintain the view, one either has to query the data sources or store auxiliary data in the warehouse. We show that by using key and referential integrity constraints, we often can maintain a select-project-join view with respect to insertions, deletions, and updates to the base relations, without going to the data sources or replicating the base relations in their entirety in the warehouse. We derive a set of auxiliary views such that the warehouse view and the auxiliary views together are self-maintainable|they can be maintained without going to the data sources or replicating all base data. In addition, our technique can be applied to simplify traditional materialized view maintenance by exploiting key and referential integrity constraints.
Abstract-found: 1
Intro-found: 1
Reference: [BCL89] <author> J. Blakeley, N. Coburn, and P. Larson. </author> <title> Updating derived relations: Detecting irrelevant and autonomously computable updates. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 14(3) </volume> <pages> 369-400, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Rule 3.3 (Irrelevant Update Simplification Rule <ref> [BCL89] </ref>) Let K be a join expression in the maintenance expression for old-updates or new-updates. <p> a referential integrity constraint from sale.store id to store.store id, none of the updatable attributes of store are exposed, and the auxiliary view for store does not depend upon the auxiliary view for sale. 5 Related Work, Summary, and Future Directions The problem of view self-maintainability was considered initially in <ref> [BCL89, GJM96] </ref>. Those papers separately consider insertions, deletions, and updates. <p> Those papers separately consider insertions, deletions, and updates. For each modification type, the papers identify subclasses of SPJ views that can be maintained using only the view and the modification. <ref> [BCL89] </ref> states necessary and sufficient conditions on the view definition for the view to be self-maintainable for updates specified using a particular SQL modification statement (e.g., delete all tuples where R:A &gt; 3). [GJM96] uses information about key attributes to determine self-maintainability of a view with respect to all modifications of
Reference: [BLT86] <author> J. Blakeley, P. Larson, and F. Tompa. </author> <title> Efficiently Updating Materialized Views. </title> <editor> In Carlo Zaniolo, editor, </editor> <booktitle> Proceedings of ACM SIGMOD 1986 International Conference on Management of Data, </booktitle> <pages> pages 61-71, </pages> <address> Washington, D.C., </address> <month> May 28-30 </month> <year> 1986. </year> <month> 14 </month>
Reference-contexts: Note that we do not materialize the line relation (likely to be the largest relation) at all, and the sale relation (likely to be the second largest relation) has been reduced significantly by excluding all sales made in stores outside California. Previous work <ref> [BLT86, GJM96] </ref> has shown that for a view joining more than one distinct relation to be maintained for insertions into the base relations, all base relations must be available. But previous work did not take into account key and referential integrity constraints, which are often available in practice.
Reference: [CKPS95] <author> S. Chaudhuri, R. Krishnamurthy, S. Potamianos, and K. Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> In Proceedings of the Eleventh IEEE International Conference on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <month> March 6-10 </month> <year> 1995. </year>
Reference-contexts: Given V , we "guess" a set of auxiliary views A and then check if E 1 ; : : : ; E n can be computed from A [V using an algorithm to determine whether a query can be answered using a set of views <ref> [CKPS95, LMSS95, RSU95] </ref>, and we also check if the views in A can be maintained from A [V . <p> To help us extract fewer and smaller auxiliary views, we will first simplify the maintenance expressions. To use approach (2) we need to have a technique to to guess the set A, and we need to extend the algorithms of <ref> [CKPS95, LMSS95, RSU95] </ref> to incorporate 4's and to allow for referential integrity and key constraints. These extensions and approach (2) are not discussed further in this paper. 4 Paper Outline The paper proceeds as follows. Section 2 presents notation, terminology, and some assumptions.
Reference: [CS95] <editor> M. Carey and D. Schneider, editors. </editor> <booktitle> Proceedings of ACM SIGMOD 1995 International Conference on Management of Data, </booktitle> <address> San Jose, CA, </address> <month> May 23-25 </month> <year> 1995. </year>
Reference: [DEB95] <institution> IEEE Data Engineering Bulletin, </institution> <note> Special Issue on Materialized Views and Data Warehousing, 18(2), </note> <month> June </month> <year> 1995. </year>
Reference-contexts: 1 Introduction The problem of materialized view maintenance has received increasing attention recently [GM95, GM96, Mum95], particularly due to its application to data warehousing <ref> [DEB95, ZGMHW95] </ref>. A view is a derived relation defined in terms of base relations. A view is said to be materialized when it is stored in the database, rather than computed from the base relations in response to queries. <p> The materialized view maintenance problem is the problem of keeping the contents of the stored view consistent with the contents of the base relations as the base relations are modified. Data warehouses store materialized views in order to provide fast access to integrated information <ref> [DEB95] </ref>. The base data from which the views are derived is stored in one or more data sources, where these sources may be distributed, heterogeneous, and/or remote from the warehouse. Consequently, the problem of maintaining a materialized view in a data warehouse differs from the traditional view maintenance problem.
Reference: [GJM96] <author> A. Gupta, H. Jagadish, and I. Mumick. </author> <title> Data integration using self-maintainable views. </title> <booktitle> In Proceedings of the Fifth International Conference on Extending Database Technology, </booktitle> <address> Avignon, France, </address> <month> March </month> <year> 1996. </year> <note> Industrial Session. </note>
Reference-contexts: Note that we do not materialize the line relation (likely to be the largest relation) at all, and the sale relation (likely to be the second largest relation) has been reduced significantly by excluding all sales made in stores outside California. Previous work <ref> [BLT86, GJM96] </ref> has shown that for a view joining more than one distinct relation to be maintained for insertions into the base relations, all base relations must be available. But previous work did not take into account key and referential integrity constraints, which are often available in practice. <p> fi Property 3.2 says that if V projects the key of some relation R i , we can determine the effect of 5R i on V by joining V with 5R i on the key of R i . (Recall that SPE's always include a key of the base relation.) <ref> [GJM96] </ref> use this property to determine when a view is self-maintainable with respect to deletions from a base relation. <p> a referential integrity constraint from sale.store id to store.store id, none of the updatable attributes of store are exposed, and the auxiliary view for store does not depend upon the auxiliary view for sale. 5 Related Work, Summary, and Future Directions The problem of view self-maintainability was considered initially in <ref> [BCL89, GJM96] </ref>. Those papers separately consider insertions, deletions, and updates. <p> papers identify subclasses of SPJ views that can be maintained using only the view and the modification. [BCL89] states necessary and sufficient conditions on the view definition for the view to be self-maintainable for updates specified using a particular SQL modification statement (e.g., delete all tuples where R:A &gt; 3). <ref> [GJM96] </ref> uses information about key attributes to determine self-maintainability of a view with respect to all modifications of a certain type (inserts, deletes, or updates).
Reference: [GL95] <author> T. Griffin and L. Libkin. </author> <title> Incremental maintenance of views with duplicates. </title> <booktitle> In Carey and Schneider [CS95], </booktitle> <pages> pages 328-339. </pages>
Reference-contexts: by Rome Laboratories under Air Force Contract F30602-94-C-023, by the Anderson Faculty Scholar Fund, and by equipment grants from Digital and IBM Corporations. 1 For any view involving a join, maintaining the view when base relations change may require accessing base data, even when incremental view maintenance techniques are used <ref> [GL95, GMS93] </ref>. In the warehousing scenario, accessing base data means querying the data sources, which is best avoided [ZGMHW95], or replicating the base relations in the warehouse. <p> For simplicity of the view maintenance expressions, we treat each type of change separately, as if each type were made in isolation. For each type of change we use a differential algorithm <ref> [GL95] </ref> to derive the view maintenance expression. The view maintenance expression uses the contents of the base relations and possibly the view before changes of that type have been applied. <p> For example, Table 3 gives the maintenance expression for Example 1.1 for insertions into all base relations <ref> [GL95] </ref> (ignore the X symbols for now). In the table the join conditions are omitted for clarity. The final projection of only the attributes in the view also is omitted for clarity. <p> new tuples in another chronicle, then the join 4L 1 Sa would be guaranteed to be empty, and we could eliminate the third and tenth join expressions in the table as well. 7 3.3 Deletions Table 4 gives the maintenance expression for Example 1.1 for deletions from all base relations <ref> [GL95] </ref> (ignore the right-hand side of the table for now). Similar to the expression for insertions, the join conditions and the final projection are omitted for clarity. <p> We assume that the union and difference operators associate from left to right. The reason for the difference operators in the maintenance expression is to "put back" tuples that have been deleted too many times by other parts of the expression <ref> [GL95] </ref>. For example, in the first two lines of Table 4, tuples in the view of Example 1.1 that were the result of joining a tuple in 5St with a tuple in 5Sa would be added to 5V once by line one, and again by line two.
Reference: [GM95] <author> A. Gupta and I. Mumick. </author> <title> Maintenance of Materialized Views: Problems, Techniques, </title> <journal> and Applications. In IEEE Data Engineering Bulletin, Special Issue on Materialized Views and Data Warehousing [DEB95], </journal> <pages> pages 3-19. </pages>
Reference-contexts: 1 Introduction The problem of materialized view maintenance has received increasing attention recently <ref> [GM95, GM96, Mum95] </ref>, particularly due to its application to data warehousing [DEB95, ZGMHW95]. A view is a derived relation defined in terms of base relations. A view is said to be materialized when it is stored in the database, rather than computed from the base relations in response to queries.
Reference: [GM96] <author> A. Gupta and I. Mumick, </author> <title> editors. Materialized Views. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1996. </year> <note> To be published. </note>
Reference-contexts: 1 Introduction The problem of materialized view maintenance has received increasing attention recently <ref> [GM95, GM96, Mum95] </ref>, particularly due to its application to data warehousing [DEB95, ZGMHW95]. A view is a derived relation defined in terms of base relations. A view is said to be materialized when it is stored in the database, rather than computed from the base relations in response to queries.
Reference: [GMS93] <author> A. Gupta, I. Mumick, and V. Subrahmanian. </author> <title> Maintaining views incrementally. </title> <booktitle> In Proceedings of ACM SIGMOD 1993 International Conference on Management of Data, </booktitle> <address> Washington, DC, </address> <month> May 26-28 </month> <year> 1993. </year>
Reference-contexts: by Rome Laboratories under Air Force Contract F30602-94-C-023, by the Anderson Faculty Scholar Fund, and by equipment grants from Digital and IBM Corporations. 1 For any view involving a join, maintaining the view when base relations change may require accessing base data, even when incremental view maintenance techniques are used <ref> [GL95, GMS93] </ref>. In the warehousing scenario, accessing base data means querying the data sources, which is best avoided [ZGMHW95], or replicating the base relations in the warehouse.
Reference: [Han87] <author> E. Hanson. </author> <title> A performance analysis of view materialization strategies. </title> <editor> In Umeshwar Dayal and Irv Traiger, editors, </editor> <booktitle> Proceedings of ACM SIGMOD 1987 International Conference on Management of Data, </booktitle> <pages> pages 440-453, </pages> <address> San Francisco, CA, </address> <month> May 27-29 </month> <year> 1987. </year>
Reference-contexts: We assume that the set of insertions, deletions, and updates represent the "net effect" of a set of modifications <ref> [Han87] </ref>. Net effect guarantees the following properties.
Reference: [HGMW + 95] <author> J. Hammer, H. Garcia-Molina, J. Widom, W. Labio, and Y. Zhuge. </author> <title> The Stanford Data Warehousing Project. </title> <journal> In IEEE Data Engineering Bulletin, Special Issue on Materialized Views and Data Warehousing [DEB95], </journal> <pages> pages 41-48. </pages>
Reference-contexts: Consequently, the problem of maintaining a materialized view in a data warehouse differs from the traditional view maintenance problem. In particular, although the data sources containing the base relations may be willing to report changes, querying such sources may be expensive or impossible <ref> [HGMW + 95, ZGMHW95] </ref>. fl This work was supported by Rome Laboratories under Air Force Contract F30602-94-C-023, by the Anderson Faculty Scholar Fund, and by equipment grants from Digital and IBM Corporations. 1 For any view involving a join, maintaining the view when base relations change may require accessing base data,
Reference: [JMS95] <author> H. Jagadish, I. Mumick, and A. Silberschatz. </author> <title> View maintenance issues in the chronicle data model. </title> <booktitle> In Proceedings of the Fourteenth Symposium on Principles of Database Systems (PODS) [POD95], </booktitle> <pages> pages 113-124. </pages>
Reference-contexts: If we had more information about the behavior of insertions, we could guarantee that other joins were also empty. For example, if we thought of line and sale as chronicles <ref> [JMS95] </ref>, where new tuples in a chronicle only join with new tuples in another chronicle, then the join 4L 1 Sa would be guaranteed to be empty, and we could eliminate the third and tenth join expressions in the table as well. 7 3.3 Deletions Table 4 gives the maintenance expression
Reference: [LMSS95] <author> A. Levy, A. Mendelzon, Y. Sagiv, and D. Srivastava. </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the Fourteenth Symposium on Principles of Database Systems (PODS) [POD95], </booktitle> <pages> pages 95-104. </pages>
Reference-contexts: Given V , we "guess" a set of auxiliary views A and then check if E 1 ; : : : ; E n can be computed from A [V using an algorithm to determine whether a query can be answered using a set of views <ref> [CKPS95, LMSS95, RSU95] </ref>, and we also check if the views in A can be maintained from A [V . <p> To help us extract fewer and smaller auxiliary views, we will first simplify the maintenance expressions. To use approach (2) we need to have a technique to to guess the set A, and we need to extend the algorithms of <ref> [CKPS95, LMSS95, RSU95] </ref> to incorporate 4's and to allow for referential integrity and key constraints. These extensions and approach (2) are not discussed further in this paper. 4 Paper Outline The paper proceeds as follows. Section 2 presents notation, terminology, and some assumptions.
Reference: [Mum95] <author> I. Mumick. </author> <title> The Rejuvenation of Materialized Views. </title> <booktitle> In Proceedings of the Sixth International Conference on Information Systems and Management of Data (CISMOD), </booktitle> <address> Bombay, India, </address> <month> November 15-17 </month> <year> 1995. </year>
Reference-contexts: 1 Introduction The problem of materialized view maintenance has received increasing attention recently <ref> [GM95, GM96, Mum95] </ref>, particularly due to its application to data warehousing [DEB95, ZGMHW95]. A view is a derived relation defined in terms of base relations. A view is said to be materialized when it is stored in the database, rather than computed from the base relations in response to queries.
Reference: [POD95] <institution> Proceedings of the Fourteenth Symposium on Principles of Database Systems (PODS), </institution> <address> San Jose, CA, </address> <month> May 22-24 </month> <year> 1995. </year>
Reference: [RSU95] <author> A. Rajaraman, Y. Sagiv, and J. Ullman. </author> <title> Answering queries using templates with binding patterns. </title> <booktitle> In Proceedings of the Fourteenth Symposium on Principles of Database Systems (PODS) [POD95], </booktitle> <pages> pages 105-112. </pages>
Reference-contexts: Given V , we "guess" a set of auxiliary views A and then check if E 1 ; : : : ; E n can be computed from A [V using an algorithm to determine whether a query can be answered using a set of views <ref> [CKPS95, LMSS95, RSU95] </ref>, and we also check if the views in A can be maintained from A [V . <p> To help us extract fewer and smaller auxiliary views, we will first simplify the maintenance expressions. To use approach (2) we need to have a technique to to guess the set A, and we need to extend the algorithms of <ref> [CKPS95, LMSS95, RSU95] </ref> to incorporate 4's and to allow for referential integrity and key constraints. These extensions and approach (2) are not discussed further in this paper. 4 Paper Outline The paper proceeds as follows. Section 2 presents notation, terminology, and some assumptions.
Reference: [ZGMHW95] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View maintenance in a warehousing environment. </title> <booktitle> In Carey and Schneider [CS95], </booktitle> <pages> pages 316-327. 15 </pages>
Reference-contexts: 1 Introduction The problem of materialized view maintenance has received increasing attention recently [GM95, GM96, Mum95], particularly due to its application to data warehousing <ref> [DEB95, ZGMHW95] </ref>. A view is a derived relation defined in terms of base relations. A view is said to be materialized when it is stored in the database, rather than computed from the base relations in response to queries. <p> Consequently, the problem of maintaining a materialized view in a data warehouse differs from the traditional view maintenance problem. In particular, although the data sources containing the base relations may be willing to report changes, querying such sources may be expensive or impossible <ref> [HGMW + 95, ZGMHW95] </ref>. fl This work was supported by Rome Laboratories under Air Force Contract F30602-94-C-023, by the Anderson Faculty Scholar Fund, and by equipment grants from Digital and IBM Corporations. 1 For any view involving a join, maintaining the view when base relations change may require accessing base data, <p> In the warehousing scenario, accessing base data means querying the data sources, which is best avoided <ref> [ZGMHW95] </ref>, or replicating the base relations in the warehouse. It turns out that for many views, including views with joins, if key and referential integrity constraints are present then it is not necessary to store the base relations in their entirety in order to maintain the view.
References-found: 18

