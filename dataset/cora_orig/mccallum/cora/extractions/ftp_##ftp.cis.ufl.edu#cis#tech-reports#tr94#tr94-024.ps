URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr94/tr94-024.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr94-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [ACL87] <author> Rakesh Agrawal, Michael J. Carey, and Miron Livny. </author> <title> Concurrency control performance modeling: Alternatives and implications. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 609-654, </pages> <year> 1987. </year>
Reference-contexts: Thus we assume that transaction rollback and restart do not require any disk access. The values of parameters used for this experiment are shown in Table 3. The values of cpu time and i/o time are chosen to balance the utilization of CPU and disk <ref> [ACL87, AGM92, TSG85] </ref>. With this parameter assignments the system is slightly I/O bound. Resource time in this experiment depends on the cpu time, the number of objects, the number of disk access, and i/o time. <p> Thus the priority-based restarts of the active transactions that are blocked waiting for locks or resources increases very rapidly. The increase in the restart ratio means that a longer fraction of disk time is spent doing work that will be redone later <ref> [ACL87] </ref>. Wasted resource time due to priority-based restart causes high resource utilization and easily makes bottleneck resource saturation that induces longer I/O wait time. With the longer I/O wait time more transactions are scheduled and that increases the I/O wait time further.
Reference: [AD85] <author> Rakesh Agrawal and D. DeWitt. </author> <title> Integrated concurrency control and recovery mechanism: Design and performance evaluation. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(4) </volume> <pages> 529-564, </pages> <year> 1985. </year>
Reference-contexts: However, if a transaction is aborted during its I/O access it is not deleted until it releases the disk. We used deferred update rather than immediate update for fast rollback <ref> [AD85] </ref>. Thus we assume that transaction rollback and restart do not require any disk access. The values of parameters used for this experiment are shown in Table 3. The values of cpu time and i/o time are chosen to balance the utilization of CPU and disk [ACL87, AGM92, TSG85].
Reference: [AGM88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 71-81, </pages> <year> 1988. </year>
Reference-contexts: Thus, fewer transactions are preempted and there are fewer opportunities for restarts <ref> [AGM88] </ref>. 6.1.2 Effect of multiclass (Transaction mix) In this experiment, the arriving transactions are divided into three classes (class 0, 1, and 2) and assigned different values of cpu time - 1 for class 0, 10 for class 1, and 100 for class 2.
Reference: [AGM89] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions with disk resident data. </title> <booktitle> In Proceedings of the 15th VLDB, </booktitle> <pages> pages 385-396. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: obtaining scheduling policies to meet the requirements of transaction executions in real-time databases. 2 Previous Work In addition to the approaches taken for real-time systems, there is a large body of work on RTDBS that can be summarized as follows: * Priority scheduling and concurrency control 1. 2PL-HP, 2PL-WP, 2PL-CR <ref> [AGM89] </ref> 2. Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion [KS91] 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. <p> Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion [KS91] 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling <ref> [AGM89, KS91] </ref> In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91]. <p> Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in <ref> [AGM89, BMH89, Sha88, SRSC91, HJC93] </ref>. Conditional Restart (CR) [AGM89] uses estimated execution time of transactions to make a decision on blocking and aborts and CCA [HJC93] uses data access pattern to estimate the dynamic costs incurred by the interference among transactions. <p> Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in [AGM89, BMH89, Sha88, SRSC91, HJC93]. Conditional Restart (CR) <ref> [AGM89] </ref> uses estimated execution time of transactions to make a decision on blocking and aborts and CCA [HJC93] uses data access pattern to estimate the dynamic costs incurred by the interference among transactions. <p> Figure 1 illustrates the classification of various scheduling algorithms proposed in the literature with respect to the type of knowledge used. Type 0 Does not assume any a priori knowledge. Only available timing information is deadline (EDF-HP <ref> [AGM89] </ref>). Type 1 Deadline and data access pattern are available (CCA [HJC93]). Type 2 Deadline and estimated execution time are assumed to be available (EDF-CR [AGM89]). Type 3 Data access pattern and static transaction priorities are assumed to be available (Priority Ceiling [SRL90]). <p> Type 0 Does not assume any a priori knowledge. Only available timing information is deadline (EDF-HP <ref> [AGM89] </ref>). Type 1 Deadline and data access pattern are available (CCA [HJC93]). Type 2 Deadline and estimated execution time are assumed to be available (EDF-CR [AGM89]). Type 3 Data access pattern and static transaction priorities are assumed to be available (Priority Ceiling [SRL90]). EDF-HP is the simplest and most straightforward approach for an RTDBS. EDF priority assignment policy minimizes the number of late transactions when systems are lightly loaded. <p> The performance, however, steeply degrades in overloaded systems. There have been several approaches to overcome the shortcoming of EDF and they can be grouped into: 1. Use overload detection and management [HLC91]. 2. Delay the build up of overload <ref> [AGM89, HJC93] </ref>. Overload detection mechanisms for real-time tasks are quite straightforward as one can assume the availability of arrival time, execution time, resource requirement and deadline [DLT85]. For database applications, however, arrival and execution times of transactions are usually not available or not correct due to database characteristics. <p> AED, however, is only applicable to firm real-time systems. AED uses past history that have been gathered dynamically rather than a priori knowledge to detect overload. Other approaches <ref> [AGM89, HJC93] </ref> use additional information to improve EDF-HP further. Even though these approaches do not have a specific overload management mechanism their methods improve the performance of soft RTDBS by delaying the buildup of overload.
Reference: [AGM92] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transaction: Performance evaluation. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(3) </volume> <pages> 513-560, </pages> <year> 1992. </year> <month> 21 </month>
Reference-contexts: Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms <ref> [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91] </ref>. Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. <p> Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The scheduling policies presented in <ref> [AGM92, HSRT91, HLC91, SZ88] </ref> combine either 2 phase locking or optimistic concurrency control (OCC) with time-critical schedulers. EDF-HP (Earliest Deadline First with High Priority), LSF-HP (Least Slack First with HP), EDF-WP (EDF with Wait Promote), Virtual Clock, Pairwise Value Function [SZ88] are combined with 2 phase locking. <p> Thus we assume that transaction rollback and restart do not require any disk access. The values of parameters used for this experiment are shown in Table 3. The values of cpu time and i/o time are chosen to balance the utilization of CPU and disk <ref> [ACL87, AGM92, TSG85] </ref>. With this parameter assignments the system is slightly I/O bound. Resource time in this experiment depends on the cpu time, the number of objects, the number of disk access, and i/o time.
Reference: [BHG87] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: OCC schemes display better performance for firm real-time transactions [HCL90a]. Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method <ref> [BHG87] </ref> that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in [AGM89, BMH89, Sha88, SRSC91, HJC93].
Reference: [BMH89] <author> A. Buchmann, D.R. McCarthy, and M. Hsu. </author> <title> Time-critical database scheduling: A framework for integrating real-time scheduling and concurrency control. </title> <booktitle> In Proceedings of the Fifth Conference on Data Engineering, </booktitle> <pages> pages 470-480, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms <ref> [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91] </ref>. Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. <p> Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in <ref> [AGM89, BMH89, Sha88, SRSC91, HJC93] </ref>. Conditional Restart (CR) [AGM89] uses estimated execution time of transactions to make a decision on blocking and aborts and CCA [HJC93] uses data access pattern to estimate the dynamic costs incurred by the interference among transactions. <p> Conflict avoiding nonpreemptive method and Hybrid algorithms which use conflict avoiding schemes in the non-overload case and CR conflict resolution method in the overload case have been proposed in <ref> [BMH89] </ref>.
Reference: [CBB + 89] <author> Sharma Chakravarthy, Barbara Blaustein, Alejandro Buchmann, Michael Carey, Umesh-war Dayal, David Goldhirsch, Meichun Hsu, Rivka Ladin Rajiv Jauhari, Miron Livny, Dennis McCarthy, Richard McKee, and Arnon Rosenthal. Hipac: </author> <title> A research project in active, time-constrained database management. </title> <note> Final technical report xait-89-02, XEROX, </note> <month> July </month> <year> 1989. </year>
Reference-contexts: Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms <ref> [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91] </ref>. Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements.
Reference: [CHJ94] <author> S. Chakravarthy, D. Hong, and T. Johnson. </author> <title> Real-time transaction scheduling: A framework for synthesizing static and dynamic factors. </title> <type> Technical Report Electronic UF-CIS-TR-94-008, </type> <note> Availiable at anonymous ftp site cis.ufl.edu, </note> <institution> University of Florida, Dept. of CIS, </institution> <year> 1994. </year>
Reference-contexts: Static priority assignment based Priority Ceiling Protocol (PCP) using priority inheritance with exclusive lock and read/write PCP have been proposed in [Sha88, SRSC91]. 3 Motivation for our approach The primary motivation for our approach <ref> [CHJ94] </ref> is to answer the question "What kind of information is relevant and how to meaningfully incorporate it into the design of a real-time scheduling algorithm?". Various types of information are useful in different ways. <p> The basic idea is to save valuable system resources by not aborting partly executed conflicting transactions blindly. EDF-CR uses type 2 information while CCA uses type 1 information to improve EDF-HP further and our experiments in <ref> [CHJ94] </ref> has shown that CCA is better than EDF-CR for soft real-time systems when a resource time is used as an estimated execution time for EDF-CR. Type 2 information is important for RTDBS but the estimation should be combined with system load adequately. <p> Pick the highest among transactions that are ready and does not conflict with any partially executed transaction. Of the above, we found that the second one comes out as the best for soft real-time transactions <ref> [CHJ94] </ref> and applied it to CCA-ALF and EDF-CR-ALF where type 1 information is available. Consider the following scenario: Transaction T 1 is blocked and is waiting for an I/O completion. <p> When we deal with soft deadline the variations of actual execution time changes considerably with the changes in the system load. Thus, it seems naive for EDF-CR to use statically estimated execution time which does not consider the changes to the system load at all. Our simulations in <ref> [CHJ94] </ref> showed that EDF-CR is worse than EDF-HP when the resource time of a transaction is used as an estimated execution time. We can estimate the actual execution time dynamically by using additional information available about transactions.
Reference: [CJL89] <author> M.J. Carey, R. Jauhari, and M. Livny. </author> <title> Priority in dbms resource scheduling. </title> <booktitle> In Proceedings of the 15th VLDB, </booktitle> <pages> pages 0-0, </pages> <year> 1989. </year>
Reference-contexts: Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion [KS91] 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness [KM92] 2 * Buffer management <ref> [CJL89, RMM90] </ref> * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91].
Reference: [DLT85] <author> Jensen E. Douglas, C. Douglass Locke, and Hideyuki Tokuda. </author> <title> A time-driven sched-uler for real-time operating systems. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 112-122. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: Use overload detection and management [HLC91]. 2. Delay the build up of overload [AGM89, HJC93]. Overload detection mechanisms for real-time tasks are quite straightforward as one can assume the availability of arrival time, execution time, resource requirement and deadline <ref> [DLT85] </ref>. For database applications, however, arrival and execution times of transactions are usually not available or not correct due to database characteristics. AED (Adaptive Earliest Deadline) [HLC91] priority assignment for an RTDBS uses a feedback mechanism that detects overload conditions and modifies transaction priority assignment policy accordingly.
Reference: [Fis92] <author> Paul A. Fishwick. </author> <title> SIMPACK:C-based Simulation Tool Package Version 2. </title> <institution> University of Florida, </institution> <year> 1992. </year>
Reference-contexts: The advantage of EDF-CR-ALF over EDF-CR is that EDF-CR-ALF is never worse than EDF-HP for any situation. 6 Performance Evaluation In order to evaluate the performance of the CCA-ALF algorithm described in this paper, two simulations of a real-time transaction scheduler were implemented (using C language and SIMPACK simulation package <ref> [Fis92] </ref>) for main memory- and disk-resident databases as shown in Figure 2. The parameters used in the simulations are shown in Table 1.
Reference: [GR93] <author> Jim Gray and Andreas Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Mor-gan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Each function is an instance of a transaction type. That is, RTDBS invokes a transaction program that implements the requested function. The random aspect is the sequence and the frequency with which programs are invoked <ref> [GR93] </ref>. Use of canned transactions and queries whose read and write sets can be predicted beforehand is a step in the right direction and the data items accessed by a transaction are likely to be known a priori once its functionality is known [Ram93].
Reference: [HCL90a] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Livny. </author> <title> Dynamic real-time optimistic concurrency control. </title> <booktitle> In Proceedings of Real-Time System Symposium, </booktitle> <pages> pages 94-103. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: OCC schemes display better performance for firm real-time transactions <ref> [HCL90a] </ref>. Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in [AGM89, BMH89, Sha88, SRSC91, HJC93]. <p> If a system load increases the effects of deadline in the priority formula decreases due to increase of ALF. Thus in heavily loaded situations the results obtained using our priority formula is comparable to Random Priority (RP) <ref> [HCL90a] </ref> since the value of Timelost override the effect of deadline in the formula.
Reference: [HCL90b] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Livny. </author> <title> On being optimistic about real-time constraints. </title> <booktitle> ACM PODS, </booktitle> <year> 1990. </year>
Reference-contexts: Optimistic concurrency control (OCC) <ref> [HCL90b] </ref> 3. Multiversion [KS91] 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. <p> We consider a system to be heavily loaded when the system misses more than 20 % of transactions <ref> [HCL90b] </ref>. Thus we define this arrival rate as a boundary arrival rate and will show that our algorithm has a bigger boundary arrival rate. 6.1 Main memory DB In this simulation we have a single processor and a memory resident database.
Reference: [HJC93] <author> D. Hong, T. Johnson, and S. Chakravarthy. </author> <title> Real-time transaction scheduling: A cost-conscious approach. </title> <booktitle> In Proceedings of the 1993 ACM SIGMOD Int'l Conference on Management of Data, </booktitle> <pages> pages 197-206. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in <ref> [AGM89, BMH89, Sha88, SRSC91, HJC93] </ref>. Conditional Restart (CR) [AGM89] uses estimated execution time of transactions to make a decision on blocking and aborts and CCA [HJC93] uses data access pattern to estimate the dynamic costs incurred by the interference among transactions. <p> Priority scheduling with some a priori knowledge is introduced as another approach in [AGM89, BMH89, Sha88, SRSC91, HJC93]. Conditional Restart (CR) [AGM89] uses estimated execution time of transactions to make a decision on blocking and aborts and CCA <ref> [HJC93] </ref> uses data access pattern to estimate the dynamic costs incurred by the interference among transactions. Conflict avoiding nonpreemptive method and Hybrid algorithms which use conflict avoiding schemes in the non-overload case and CR conflict resolution method in the overload case have been proposed in [BMH89]. <p> Figure 1 illustrates the classification of various scheduling algorithms proposed in the literature with respect to the type of knowledge used. Type 0 Does not assume any a priori knowledge. Only available timing information is deadline (EDF-HP [AGM89]). Type 1 Deadline and data access pattern are available (CCA <ref> [HJC93] </ref>). Type 2 Deadline and estimated execution time are assumed to be available (EDF-CR [AGM89]). Type 3 Data access pattern and static transaction priorities are assumed to be available (Priority Ceiling [SRL90]). EDF-HP is the simplest and most straightforward approach for an RTDBS. <p> The performance, however, steeply degrades in overloaded systems. There have been several approaches to overcome the shortcoming of EDF and they can be grouped into: 1. Use overload detection and management [HLC91]. 2. Delay the build up of overload <ref> [AGM89, HJC93] </ref>. Overload detection mechanisms for real-time tasks are quite straightforward as one can assume the availability of arrival time, execution time, resource requirement and deadline [DLT85]. For database applications, however, arrival and execution times of transactions are usually not available or not correct due to database characteristics. <p> AED, however, is only applicable to firm real-time systems. AED uses past history that have been gathered dynamically rather than a priori knowledge to detect overload. Other approaches <ref> [AGM89, HJC93] </ref> use additional information to improve EDF-HP further. Even though these approaches do not have a specific overload management mechanism their methods improve the performance of soft RTDBS by delaying the buildup of overload. <p> Although the value of ! over some ranges showed good performance in <ref> [HJC93] </ref>, we can improve the performance by fine-tuning the value of ! since no priority assignment policy shows good performance in different load situations in a consistent manner. Since the value of Timelost consists of effective service time of conflicting transactions, it does not include system load in it. <p> A noncontributing execution is defined as a lower priority transaction's execution during the I/O wait of higher priority transaction that has to be rolled back when the higher priority transaction finishes its I/O <ref> [HJC93] </ref>. We expect that CCA-ALF works like EDF-HP when the system is lightly loaded and RP-Wait (Random Priority with Wait) when the system is heavily loaded. When the system is heavily loaded the multiplication of ALF and Timelost dominates the deadline effect of many transactions.
Reference: [HLC91] <author> Jayant R. Haritsa, Miron Livny, and Michael J. Carey. </author> <title> Earliest deadline scheduling for real-time database systems. </title> <booktitle> In Proceedings of Real-Time System Symposium, </booktitle> <pages> pages 232-242. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms <ref> [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91] </ref>. Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. <p> Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The scheduling policies presented in <ref> [AGM92, HSRT91, HLC91, SZ88] </ref> combine either 2 phase locking or optimistic concurrency control (OCC) with time-critical schedulers. EDF-HP (Earliest Deadline First with High Priority), LSF-HP (Least Slack First with HP), EDF-WP (EDF with Wait Promote), Virtual Clock, Pairwise Value Function [SZ88] are combined with 2 phase locking. <p> An OCC scheme with a deadline and transaction length based priority assignment scheme is presented in [HSRT91]. An OCC with adaptive EDF has also been proposed <ref> [HLC91] </ref>. With OCC approach, a policy is needed to resolve the access conflicts during the validation phase. <p> EDF priority assignment policy minimizes the number of late transactions when systems are lightly loaded. The performance, however, steeply degrades in overloaded systems. There have been several approaches to overcome the shortcoming of EDF and they can be grouped into: 1. Use overload detection and management <ref> [HLC91] </ref>. 2. Delay the build up of overload [AGM89, HJC93]. Overload detection mechanisms for real-time tasks are quite straightforward as one can assume the availability of arrival time, execution time, resource requirement and deadline [DLT85]. <p> For database applications, however, arrival and execution times of transactions are usually not available or not correct due to database characteristics. AED (Adaptive Earliest Deadline) <ref> [HLC91] </ref> priority assignment for an RTDBS uses a feedback mechanism that detects overload conditions and modifies transaction priority assignment policy accordingly. AED, however, is only applicable to firm real-time systems. AED uses past history that have been gathered dynamically rather than a priori knowledge to detect overload. <p> When the system is heavily loaded the multiplication of ALF and Timelost dominates the deadline effect of many transactions. Thus their priorities are randomized and the conflict resolution policy is changing to Wait. In heavily loaded situation RP has shown better performance than EDF <ref> [HLC91] </ref>. 8 5 EDF-CR-ALF for soft deadline EDF-CR uses estimated execution time of a transaction when it decides whether to abort a conflicting lower priority transaction or block a higher priority transaction.
Reference: [HSRT91] <author> Jiandong Hyang, John A. Stankovic, Krithi Ramamritham, and Don Towsley. </author> <title> Experimental evaluation of real-time optimistic concurrency control schemes. </title> <booktitle> In Proceedings of the 17th VLDB, </booktitle> <pages> pages 35-46. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms <ref> [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91] </ref>. Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. <p> Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The scheduling policies presented in <ref> [AGM92, HSRT91, HLC91, SZ88] </ref> combine either 2 phase locking or optimistic concurrency control (OCC) with time-critical schedulers. EDF-HP (Earliest Deadline First with High Priority), LSF-HP (Least Slack First with HP), EDF-WP (EDF with Wait Promote), Virtual Clock, Pairwise Value Function [SZ88] are combined with 2 phase locking. <p> As a variant of single version 2 phase locking, real-time multiversion concurrency control [KS91] has been introduced to increase concurrency and adjust the serialization order dynamically. An OCC scheme with a deadline and transaction length based priority assignment scheme is presented in <ref> [HSRT91] </ref>. An OCC with adaptive EDF has also been proposed [HLC91]. With OCC approach, a policy is needed to resolve the access conflicts during the validation phase.
Reference: [KM92] <author> Tei-Wei Kuo and Aloysius K. Mok. </author> <title> Application semantics and concurrency control of real-time data-intensive applications. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 35-45. </pages> <publisher> IEEE, </publisher> <year> 1992. </year> <month> 22 </month>
Reference-contexts: Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion [KS91] 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness <ref> [KM92] </ref> 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions.
Reference: [KS91] <author> Woosaeng Kim and Jaideep Srivastava. </author> <title> Enhancing real-time dbms performance with multiversion data and priority based disk scheduling. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 222-231. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion <ref> [KS91] </ref> 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. <p> Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion [KS91] 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling <ref> [AGM89, KS91] </ref> In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91]. <p> EDF-HP (Earliest Deadline First with High Priority), LSF-HP (Least Slack First with HP), EDF-WP (EDF with Wait Promote), Virtual Clock, Pairwise Value Function [SZ88] are combined with 2 phase locking. As a variant of single version 2 phase locking, real-time multiversion concurrency control <ref> [KS91] </ref> has been introduced to increase concurrency and adjust the serialization order dynamically. An OCC scheme with a deadline and transaction length based priority assignment scheme is presented in [HSRT91]. An OCC with adaptive EDF has also been proposed [HLC91].
Reference: [LS90] <author> Yi Lin and Sang H. Son. </author> <title> Concurrency control in real-time databases by dynamic adjustment of serialization order. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 104-112. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion [KS91] 4. Mixed Integrated concurrency control <ref> [LS90] </ref> 5. Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. <p> OCC schemes display better performance for firm real-time transactions [HCL90a]. Lin and Son <ref> [LS90] </ref> have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in [AGM89, BMH89, Sha88, SRSC91, HJC93].
Reference: [PLJ92] <author> Hweeehwa Pang, Miron Livny, and Michael J.Carey. </author> <title> Transaction scheduling in multiclass real-time database systems. </title> <booktitle> In Proceedings of Real-Time System Symposium, </booktitle> <pages> pages 23-34. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: We expected that there would be less discrimination against long running transactions in CCA-ALF than EDF-HP because CCA-ALF implicitly considers the effective service time of a transaction as we can see it in Figure 5. Discrimination against long running transactions in RTDBS is discussed in <ref> [PLJ92] </ref>. In their experiment each class requires different ranges of object number. Thus each class has different level of data contention and resource time. In our experiment, however, each class only has different level of resource contention.
Reference: [Ram93] <author> Krithi Ramamrithm. </author> <title> Real-time databases. </title> <journal> International Journal of Distributed and Parallel Databases, </journal> <pages> pages 1-30, </pages> <year> 1993. </year>
Reference-contexts: As a result, scheduling algorithms [ZRS87b, ZRS87a] used in current real-time systems assume a priori knowledge of tasks, such as arrival time, deadline, resource requirement, and worst case (CPU) execution time. For database applications, on the other hand, many sources of unpredictability exist <ref> [Ram93] </ref> which makes it difficult to predict some of the resource requirements for transactions that need to meet time constraints. 1 Transactions with deadlines have been categorized into hard deadline, soft deadline, and firm deadline transactions. <p> Use of canned transactions and queries whose read and write sets can be predicted beforehand is a step in the right direction and the data items accessed by a transaction are likely to be known a priori once its functionality is known <ref> [Ram93] </ref>. Although it is possible to make conservative (or worst case) estimates (e.g., read and write sets gleaned from a transaction), it is, in general, not possible to predict a priori the interference among transactions.
Reference: [RMM90] <author> R.Jauhari, M.J.Carey, and M.Livny. Priority-hint: </author> <title> An algorithm for priority-based buffer management. </title> <booktitle> In Proceedings of the 16th VLDB, </booktitle> <pages> pages 708-721, </pages> <year> 1990. </year>
Reference-contexts: Optimistic concurrency control (OCC) [HCL90b] 3. Multiversion [KS91] 4. Mixed Integrated concurrency control [LS90] 5. Semantics and correctness [KM92] 2 * Buffer management <ref> [CJL89, RMM90] </ref> * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91].
Reference: [Sha88] <author> Lui Sha. </author> <title> Concurrency control for distributed real-time databases. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 82-98, </pages> <year> 1988. </year>
Reference-contexts: Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms <ref> [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91] </ref>. Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. <p> Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in <ref> [AGM89, BMH89, Sha88, SRSC91, HJC93] </ref>. Conditional Restart (CR) [AGM89] uses estimated execution time of transactions to make a decision on blocking and aborts and CCA [HJC93] uses data access pattern to estimate the dynamic costs incurred by the interference among transactions. <p> Static priority assignment based Priority Ceiling Protocol (PCP) using priority inheritance with exclusive lock and read/write PCP have been proposed in <ref> [Sha88, SRSC91] </ref>. 3 Motivation for our approach The primary motivation for our approach [CHJ94] is to answer the question "What kind of information is relevant and how to meaningfully incorporate it into the design of a real-time scheduling algorithm?". Various types of information are useful in different ways.
Reference: [SRL90] <author> Lui Sha, Ragunathan Rajkumar, and J.P. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39 </volume> <pages> 1175-1185, </pages> <year> 1990. </year>
Reference-contexts: Only available timing information is deadline (EDF-HP [AGM89]). Type 1 Deadline and data access pattern are available (CCA [HJC93]). Type 2 Deadline and estimated execution time are assumed to be available (EDF-CR [AGM89]). Type 3 Data access pattern and static transaction priorities are assumed to be available (Priority Ceiling <ref> [SRL90] </ref>). EDF-HP is the simplest and most straightforward approach for an RTDBS. EDF priority assignment policy minimizes the number of late transactions when systems are lightly loaded. The performance, however, steeply degrades in overloaded systems.
Reference: [SRSC91] <author> Lui Sha, Ragunathan Rajkumar, Sang Hyuk Son, and Chun-Hyun Chang. </author> <title> A real-time locking protocol. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: Lin and Son [LS90] have proposed a new concurrency control algorithm which is based on mixed integrated concurrency control method [BHG87] that adjusts the serialization order dynamically. Priority scheduling with some a priori knowledge is introduced as another approach in <ref> [AGM89, BMH89, Sha88, SRSC91, HJC93] </ref>. Conditional Restart (CR) [AGM89] uses estimated execution time of transactions to make a decision on blocking and aborts and CCA [HJC93] uses data access pattern to estimate the dynamic costs incurred by the interference among transactions. <p> Static priority assignment based Priority Ceiling Protocol (PCP) using priority inheritance with exclusive lock and read/write PCP have been proposed in <ref> [Sha88, SRSC91] </ref>. 3 Motivation for our approach The primary motivation for our approach [CHJ94] is to answer the question "What kind of information is relevant and how to meaningfully incorporate it into the design of a real-time scheduling algorithm?". Various types of information are useful in different ways.
Reference: [SZ88] <author> John A. Stankovic and Wei Zhao. </author> <title> On real-time transactions. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: Semantics and correctness [KM92] 2 * Buffer management [CJL89, RMM90] * IO scheduling [AGM89, KS91] In this paper, we focus on priority assignment of concurrent transactions. Concurrency control based real-time database (time-critical database) scheduling algorithms combine various properties of time-critical schedulers with properties of concurrency control algorithms <ref> [AGM92, BMH89, CBB + 89, HLC91, Sha88, SZ88, HSRT91] </ref>. Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. <p> Priority scheduling without knowing the data access pattern is presented as a representative of algorithms with incomplete knowledge of resource requirements. The scheduling policies presented in <ref> [AGM92, HSRT91, HLC91, SZ88] </ref> combine either 2 phase locking or optimistic concurrency control (OCC) with time-critical schedulers. EDF-HP (Earliest Deadline First with High Priority), LSF-HP (Least Slack First with HP), EDF-WP (EDF with Wait Promote), Virtual Clock, Pairwise Value Function [SZ88] are combined with 2 phase locking. <p> The scheduling policies presented in [AGM92, HSRT91, HLC91, SZ88] combine either 2 phase locking or optimistic concurrency control (OCC) with time-critical schedulers. EDF-HP (Earliest Deadline First with High Priority), LSF-HP (Least Slack First with HP), EDF-WP (EDF with Wait Promote), Virtual Clock, Pairwise Value Function <ref> [SZ88] </ref> are combined with 2 phase locking. As a variant of single version 2 phase locking, real-time multiversion concurrency control [KS91] has been introduced to increase concurrency and adjust the serialization order dynamically. An OCC scheme with a deadline and transaction length based priority assignment scheme is presented in [HSRT91].
Reference: [Tay92] <author> Y.C. Tay. </author> <title> A behavioral analysis of scheduling by earliest deadline. </title> <type> Technical Report No. 532, </type> <institution> Department of Mathematics, National University of Singapore, </institution> <year> 1992. </year>
Reference-contexts: Figure 3 (b), it is usually the case that the currently running transaction arrived a long time ago, but could not get system services due to the heavy load on the system (most of the dynamic factors in heavily loaded situation are arrival blockings rather than preemption blockings and aborts <ref> [Tay92] </ref>).
Reference: [TSG85] <author> Y.C. Tay, R. Suri, and N. Goodman. </author> <title> Locking performance in centralized databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(4) </volume> <pages> 415-462, </pages> <year> 1985. </year>
Reference-contexts: Thus we assume that transaction rollback and restart do not require any disk access. The values of parameters used for this experiment are shown in Table 3. The values of cpu time and i/o time are chosen to balance the utilization of CPU and disk <ref> [ACL87, AGM92, TSG85] </ref>. With this parameter assignments the system is slightly I/O bound. Resource time in this experiment depends on the cpu time, the number of objects, the number of disk access, and i/o time.
Reference: [ZRS87a] <author> Wei Zhao, Krithi Ramamritham, and John A. Stankovic. </author> <title> Preemptive scheduling under time and resource constraints. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(8) </volume> <pages> 949-960, </pages> <year> 1987. </year>
Reference-contexts: For the assumptions used in real-time systems, it is possible to predict some of the characteristics of tasks needed for the design of scheduling algorithms. As a result, scheduling algorithms <ref> [ZRS87b, ZRS87a] </ref> used in current real-time systems assume a priori knowledge of tasks, such as arrival time, deadline, resource requirement, and worst case (CPU) execution time.
Reference: [ZRS87b] <author> Wei Zhao, Krithi Ramamritham, and John A. Stankovic. </author> <title> Scheduling tasks with requirement in hard real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(5) </volume> <pages> 225-236, </pages> <year> 1987. </year>
Reference-contexts: For the assumptions used in real-time systems, it is possible to predict some of the characteristics of tasks needed for the design of scheduling algorithms. As a result, scheduling algorithms <ref> [ZRS87b, ZRS87a] </ref> used in current real-time systems assume a priori knowledge of tasks, such as arrival time, deadline, resource requirement, and worst case (CPU) execution time.
References-found: 32

