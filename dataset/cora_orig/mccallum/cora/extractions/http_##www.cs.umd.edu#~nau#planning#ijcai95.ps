URL: http://www.cs.umd.edu/~nau/planning/ijcai95.ps
Refering-URL: http://www.cs.umd.edu/~nau/publications.html
Root-URL: 
Email: kutluhan@cs.umd.edu hendler@cs.umd.edu nau@cs.umd.edu reiko@cs.umd.edu  
Title: A Critical Look at Critics in HTN Planning  
Author: Kutluhan Erol James Hendler Dana S. Nau Reiko Tsuneto 
Address: College Park, MD 20742  
Affiliation: Computer Science Department, Institute for Systems Research, and Institute for Advanced Computer Studies University of Maryland,  
Date: August 1995  
Note: To appear, IJCAI-95,  
Abstract: Detecting interactions and resolving conflicts is one of the key issues for generative planning systems. Hierarchical Task Network (HTN) planning systems use critics for this purpose. Critics have provided extra efficiency and flexibility to HTN planning systems, but their procedural -and sometimes domain-specific - nature has not been amenable to analytical studies. As a result, little work is available on the correctness or efficiency of critics. This paper describes a principled approach to handling conflicts, as implemented in UMCP 1 , an HTN planning system. Critics in UMCP have desirable properties such as systematicity, and the preservation of soundness and completeness.
Abstract-found: 1
Intro-found: 1
Reference: [ Allen et al., 1990 ] <editor> Allen, J.; Hendler, J. and Tate, A. editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan-Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference: [ Chapman, 1987 ] <author> Chapman, D. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-378, </pages> <year> 1987. </year>
Reference-contexts: Causal links are also employed by UMCP in the form of special state constraints stored in the Promissory List. SNLP's threat removal process is similar to how UMCP handles those special constraints in its constraint propagation phase. <ref> [ Chapman, 1987 ] </ref> introduced the MTC (modal truth criterion) to tell whether a literal is true at a given point in a partially-ordered plan. In order to evaluate state constraints, UMCP uses an extended version of the MTC that also accounts for compound tasks.
Reference: [ Collins and Pryor, 1992 ] <author> Collins, G. and Pryor, L. </author> <title> Achieving the functionality of filter conditions in a partial order planner In Proc. </title> <booktitle> AAAI-92, </booktitle> <year> 1992, </year> <pages> pp. 375|380. </pages>
Reference: [ Dean, 1983 ] <author> Dean, T. </author> <title> Time map maintenance. </title> <type> Technical Report 289, </type> <institution> Yale University, </institution> <month> October </month> <year> 1983. </year>
Reference-contexts: In O-Plan2, Constraint Managers support decision making of the planner by providing complete information about the constraints they are managing. * A number of special-purpose "domain dependent" planning systems have identified interactions occurring only in the particular domain for which the sys 2 See also <ref> [ Dean, 1983 ] </ref> . 1 tem is being developed. Typically special-purpose heuristics are introduced to exploit this knowledge. As can be seen, the many interactions which need to be handled during planning go beyond the (relatively) well-understood deleted-condition interaction.
Reference: [ Drummond, 1985 ] <author> Drummond, M. </author> <title> Refining and Extending the Procedural Net. </title> <booktitle> In Proc. IJCAI-85, </booktitle> <year> 1985. </year>
Reference: [ Erol et al., 1994a ] <author> Erol, K.; Hendler, J. and Nau, D. </author> <title> Semantics for Hierarchical Task Network Planning. </title> <institution> CS-TR-3239, UMIACS-TR-94-31, ISR-TR-95-9, University of Maryland, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: To reason about analytical properties of such mechanisms (i.e. system-aticity, soundness, completeness), a general model of interactions and critics is clearly needed. The work described in <ref> [ Erol et al., 1994a; 1994b ] </ref> presents a formal model for HTN planning, which provides a constraint-based representation for interactions among tasks and enables principled approaches to conflict detection and handling in HTN planning. This paper presents conflict management and constraint handling techniques based on that framework. <p> Among the properties of these techniques are soundness, completeness and systematicity. These techniques have been implemented in UMCP, an HTN planning system. 2 An Overview of HTN planning Here is a brief informal description of HTN planning. For a precise formal description, see <ref> [ Erol et al., 1994a; 1994b ] </ref> . htn planning representations for actions and states of the world are similar to those used in strips-style planning. 3 Each state of the world is represented by the set of atoms true in that state. <p> Expanding or reducing each non-primitive task (steps 3-5) is done by finding a method capable of accomplishing the non-primitive task, and replacing the non-primitive task with the task network produced by the method. Details of how to do the task expansion is presented in <ref> [ Erol et al., 1994a; 1994b ] </ref> . The task network produced in Step 5 may contain conflicts caused by the interactions among tasks. The job of finding and resolving such interactions is performed by critics. <p> This three-stage approach facilitates dealing with the disjunctions in the constraint formula, and by postponing its processing of some types of constraints, UMCP preserves completeness without sacrificing efficiency. 6 Conclusion Dealing with numerous types of interactions is an important aspect of planning systems. The work described in <ref> [ Erol et al., 1994a; 1994b ] </ref> has provided a formal framework for representing interactions and conflicts via constraints, and in this paper we have introduced techniques for constraint handling as a means for detecting interactions and resolving conflicts.
Reference: [ Erol et al., 1994b ] <author> Erol, K.; Hendler, J. and Nau, D. </author> <title> Complexity results for hierarchical task-network planning. </title> <note> To appear in Annals of Mathematics and Artificial Intelligence Also available as Technical report CS-TR-3240, </note> <institution> UMIACS-TR-94-32, ISR-TR-95-10 Computer Science Dept., University of Mary-land, </institution> <month> March </month> <year> 1994. </year>
Reference: [ Erol, 1995 ] <author> Erol, K. </author> <title> HTN Planning: Formalization, Analysis, and Implementation. </title> <type> Ph.D. Dissertation, </type> <institution> Computer Science Dept., University of Maryland, </institution> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: They are designed to preserve soundness, completeness, and systematicity. Details for each type of constraint are summarized in the next section. For a full description, see <ref> [ Erol, 1995 ] </ref> . The three types of decisions in HTN planning are the choice of method for each non-primitive task, the choice of constant to assign to each variable, and the orderings of tasks.
Reference: [ Fikes and Nilsson, 1971 ] <author> Fikes, R. E. and Nilsson, N. J. </author> <title> strips: a new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> 2(3/4):189-208, 1971. 
Reference-contexts: 1 Introduction Detecting interactions and resolving conflicts is one of the key issues for planning systems. The importance of this issue was realized as long ago as the 1970s in early AI planning systems such as strips <ref> [ Fikes and Nilsson, 1971 ] </ref> and hacker [ Sussman, 1990 ] .
Reference: [ Kambhampati and Hendler, 1992 ] <author> Kambhampati, S. and Hendler, J. </author> <title> "A Validation Structure Based Theory of Plan Modification and Reuse" Artificial Intelligence, </title> <month> May, </month> <year> 1992. </year>
Reference-contexts: A number of different systems that use heuristic algorithms have been devised for HTN planning [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] , and several recent papers have tried to provide formal descriptions of these algorithms <ref> [ Yang, 1990; Kambhampati and Hendler, 1992 ] </ref> . planning works by expanding tasks and resolving conflicts iteratively, until a conflict-free plan can be found that consists only of primitive tasks.
Reference: [ Kambhampati, 1992 ] <author> Kambhampati, S. </author> <title> "On the utility of systematicity: understanding trade-offs between redundancy and commitment in partial-ordering planning," </title> <type> unpublished manuscript, </type> <month> Dec., </month> <year> 1992. </year>
Reference: [ Kambhampati et al., 1995 ] <author> Kambhampati, S.; Knoblock, C. and Yang, Q. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial order planning. </title> <note> To appear in Artificial Intelligence, Special Issue on Planning. </note>
Reference-contexts: Those task networks whose set of solutions are determined to be empty are filtered out. In this aspect, UMCP nicely fits into the general refinement search framework described in <ref> [ Kambhampati et al., 1995 ] </ref> . an OPEN-LIST of task networks in the search space that are to be explored; by altering how task networks are picked from the OPEN-LIST and how they are inserted, depth-first, breadth-first, best-first and various other search techniques can be employed.
Reference: [ Kanal and Kumar, 1988 ] <editor> Kanal, L. and Kumar, V. </editor> <booktitle> Search in Artificial Intelligence, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: To accomplish this UMCP uses a branch-and-bound approach <ref> [ Kanal and Kumar, 1988 ] </ref> . A task network can be thought of as an implicit representation for the set of solutions for that task network.
Reference: [ McAllester and Rosenblitt, 1991 ] <author> McAllester, D. and Rosenblitt, D. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. AAAI-91, </booktitle> <year> 1991. </year>
Reference-contexts: constraint selection are mutually exclusive (i.e. any two conjuncts have a common literal, positive in one, negated in the other); (b) there is no overlap among the solution sets to the task networks produced in update phase. 5 Related Work Causal links are used by POCL planners such as SNLP <ref> [ McAllester and Rosenblitt, 1991 ] </ref> to establish preconditions and to detect threats. Causal links are also employed by UMCP in the form of special state constraints stored in the Promissory List.
Reference: [ Minton et al., 1991 ] <author> Minton, S.; Bresina, J. and Drum-mond, M. </author> <title> Commitment strategies in planning. </title> <booktitle> In Proc. IJCAI-91, </booktitle> <year> 1991. </year>
Reference: [ Sacerdoti, 1977 ] <author> Sacerdoti, E. D. </author> <title> A Structure for Plans and Behavior, </title> <publisher> Elsevier-North Holland. </publisher> <year> 1977. </year>
Reference-contexts: In order to evaluate state constraints, UMCP uses an extended version of the MTC that also accounts for compound tasks. UMCP's extended MTC algorithm runs in quadratic time|and it is directly applicable for computing Chapman's MTC, for which the other known algorithms run in cubic time. NOAH <ref> [ Sacerdoti, 1977 ] </ref> employs its resolve conflicts critic to deal with deleted-condition interactions, which are explicitly represented by state constraints in UMCP. The constraint refinement techniques of UMCP guarantees these interactions will be handled without sacrificing soundness or completeness.
Reference: [ Sussman, 1990 ] <author> Sussman, G.J., </author> <title> HACKER: a computational model of skill acquisition, </title> <institution> MIT AI Lab Memo 1973, </institution> <note> also in Allen, </note> <year> 1990, </year> <title> Readings in Planning. </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1 Introduction Detecting interactions and resolving conflicts is one of the key issues for planning systems. The importance of this issue was realized as long ago as the 1970s in early AI planning systems such as strips [ Fikes and Nilsson, 1971 ] and hacker <ref> [ Sussman, 1990 ] </ref> . The introduction of task networks and task decomposition in noah [ Sacer-doti, 1977 ] provided an even richer set of interactions and resolution methods, and a component of noah called the critic mechanism was designed for handling these interactions.
Reference: [ Tate et al., 1990 ] <editor> Tate, A.; Hendler, J. and Drummond, D. </editor> <title> AI planning: Systems and techniques. </title> <journal> AI Magazine, (UMIACS-TR-90-21, </journal> <volume> CS-TR-2408):61-77, </volume> <month> Summer </month> <year> 1990 </year>
Reference: [ Tate, 1977 ] <author> Tate, A. </author> <title> Generating Project Networks In Proc. </title> <address> IJCAI-77, </address> <year> 1977. </year> <pages> pp. 888-893. </pages>
Reference-contexts: Critics could also draw upon domain-specific information to do their job more efficiently. The power of the critic mechanism was quickly realized and adopted by hierarchical task network (HTN) planning systems <ref> [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] </ref> . fl This work was supported in part by NSF Grants DDM-9201779, IRI-9306580 and NSF EEC 94-02384, AFOSR (F49620-93-1-0065), the ARPA/Rome Laboratory Planning Initiative (F30602-93-C-0039), and ONR grant N00014-91-J-1451. <p> They also have discussed a "simultaneous action" interaction that arises in some domains. * To handle iteration in plans, Drummond [ 1985 ] has proposed several extensions to the procedural net, and an extension to Sacerdoti's Resolve-conflicts critic. * NONLIN <ref> [ Tate, 1977 ] </ref> and O-Plan2 [ Tate et al., 1994 ] provide various condition types which can be used to reduce the search space. <p> A number of different systems that use heuristic algorithms have been devised for HTN planning <ref> [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] </ref> , and several recent papers have tried to provide formal descriptions of these algorithms [ Yang, 1990; Kambhampati and Hendler, 1992 ] . planning works by expanding tasks and resolving conflicts iteratively, until a conflict-free plan can be found that consists only of <p> HTN planners often allow several types of conditions in methods. How to deal with those conditions has been a topic of debate. NONLIN <ref> [ Tate, 1977 ] </ref> evaluates filter conditions as soon as they are encountered, using the Q&A mechanism. Q&A returns false unless it can verify those conditions to be necessarily true, even if the conditions are possibly true.
Reference: [ Tate et al., 1994 ] <author> Tate, A.; Drabble, B. and Dalton, J. </author> <title> The Use of Condition Types to Restrict Search in an AI Planner. </title> <booktitle> Proc. AAAI-94. </booktitle> <pages> pp. 1129-1134. </pages>
Reference-contexts: They also have discussed a "simultaneous action" interaction that arises in some domains. * To handle iteration in plans, Drummond [ 1985 ] has proposed several extensions to the procedural net, and an extension to Sacerdoti's Resolve-conflicts critic. * NONLIN [ Tate, 1977 ] and O-Plan2 <ref> [ Tate et al., 1994 ] </ref> provide various condition types which can be used to reduce the search space.
Reference: [ Vere, 1983 ] <author> Vere, S. A. </author> <title> Planning in Time: Windows and Durations for Activities and Goals. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-5(3):246-247, </volume> <year> 1983. </year>
Reference-contexts: Critics could also draw upon domain-specific information to do their job more efficiently. The power of the critic mechanism was quickly realized and adopted by hierarchical task network (HTN) planning systems <ref> [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] </ref> . fl This work was supported in part by NSF Grants DDM-9201779, IRI-9306580 and NSF EEC 94-02384, AFOSR (F49620-93-1-0065), the ARPA/Rome Laboratory Planning Initiative (F30602-93-C-0039), and ONR grant N00014-91-J-1451. <p> A number of different systems that use heuristic algorithms have been devised for HTN planning <ref> [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] </ref> , and several recent papers have tried to provide formal descriptions of these algorithms [ Yang, 1990; Kambhampati and Hendler, 1992 ] . planning works by expanding tasks and resolving conflicts iteratively, until a conflict-free plan can be found that consists only of
Reference: [ Wilkins, 1988 ] <author> Wilkins, D. </author> <title> Practical Planning: Extending the classical AI planning paradigm, </title> <publisher> Morgan-Kaufmann, </publisher> <address> CA. </address> <year> 1988. </year>
Reference-contexts: Critics could also draw upon domain-specific information to do their job more efficiently. The power of the critic mechanism was quickly realized and adopted by hierarchical task network (HTN) planning systems <ref> [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] </ref> . fl This work was supported in part by NSF Grants DDM-9201779, IRI-9306580 and NSF EEC 94-02384, AFOSR (F49620-93-1-0065), the ARPA/Rome Laboratory Planning Initiative (F30602-93-C-0039), and ONR grant N00014-91-J-1451. <p> can arise in planning have been identified in the literature: * For his deviser system, Vere [ 1983 ] has discussed temporal interactions between the times at which actions must occur. 2 He has used temporal window-ing and performed an analysis thereof to eliminate possible reductions. * Wilkins' sipe system <ref> [ Wilkins, 1988 ] </ref> has added several different mechanisms for recognizing resource interactions and for allowing user preferences to be considered when making a choice among reductions. * Yang, Nau, and Hendler [ Yang et al., 1993 ] have discussed a general "action-precedence" interaction that, while less general than deleted-condition interactions, <p> A number of different systems that use heuristic algorithms have been devised for HTN planning <ref> [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] </ref> , and several recent papers have tried to provide formal descriptions of these algorithms [ Yang, 1990; Kambhampati and Hendler, 1992 ] . planning works by expanding tasks and resolving conflicts iteratively, until a conflict-free plan can be found that consists only of <p> Those techniques preserve soundness, completeness, systematicity, and they have been implemented in UMCP, an HTN planning system. 9 In fact, Collins and Pryor [ 1992 ] have made a similar argument against filter conditions in the context of planning with STRIPS-style operators. 10 sipe <ref> [ Wilkins, 1988 ] </ref> uses a "sort hierarchy" for this purpose, the only difference in UMCP is that UMCP allows arbitrary boolean formulae constructed from all types of con straints, instead of a conjunct of constraints as in sipe. 6 By instantiating the constraint selection strategy in different ways, various commitment
Reference: [ Yang, 1990 ] <author> Yang, Q. </author> <title> Formalizing planning knowledge for hierarchical planning Computational Intelligence Vol.6., </title> <type> 12-24, </type> <year> 1990. </year>
Reference-contexts: A number of different systems that use heuristic algorithms have been devised for HTN planning [ Tate, 1977; Vere, 1983; Wilkins, 1988 ] , and several recent papers have tried to provide formal descriptions of these algorithms <ref> [ Yang, 1990; Kambhampati and Hendler, 1992 ] </ref> . planning works by expanding tasks and resolving conflicts iteratively, until a conflict-free plan can be found that consists only of primitive tasks.
Reference: [ Yang et al., 1993 ] <author> Yang, Q.; Nau, D.S.; and Hendler, J. </author> <title> Merging separately generated plans with restricted interactions. </title> <journal> Computational Intelligence, </journal> <volume> 9(1), </volume> <month> February </month> <year> 1993. </year> <month> 7 </month>
Reference-contexts: He has used temporal window-ing and performed an analysis thereof to eliminate possible reductions. * Wilkins' sipe system [ Wilkins, 1988 ] has added several different mechanisms for recognizing resource interactions and for allowing user preferences to be considered when making a choice among reductions. * Yang, Nau, and Hendler <ref> [ Yang et al., 1993 ] </ref> have discussed a general "action-precedence" interaction that, while less general than deleted-condition interactions, can be exploited in some planning situations.
References-found: 24

