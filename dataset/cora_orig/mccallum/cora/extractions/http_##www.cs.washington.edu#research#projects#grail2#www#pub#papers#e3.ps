URL: http://www.cs.washington.edu/research/projects/grail2/www/pub/papers/e3.ps
Refering-URL: http://www.cs.washington.edu/research/projects/grail2/www/pub/abstracts.html
Root-URL: 
Title: Electronic "How Things Work" Articles  
Author: Franz G. Amador, Deborah Berman, Alan Borning, Tony DeRose, Adam Finkelstein, Dorothy Neville, Norge, David Notkin, David Salesin, Mike Salisbury, Joe Sherman, Ying Sun, Daniel S. Weld, Georges Winkenbach 
Abstract: Technical Report 92-04-08 Dept. of Computer Science and Engineering University of Washington June 1992 Abstract The Electronic Encyclopedia Exploratorium (E 3 ) is a vision of a future computer system|a kind of electronic "How Things Work" book. Typical articles in E 3 will describe such mechanisms as compression refrigerators, engines, telescopes, and mechanical linkages. Each article will provide simulations, 3-dimensional animated graphics that the user can manipulate, laboratory areas that allow a user to modify the device or experiment with related artifacts, and a facility for asking questions and receiving customized, computer-generated English language explanations. In this paper, we discuss some of the foundational technology|especially focusing on topics in artificial intelligence, graphics, and user interfaces|needed to achieve this long-term vision. We describe our two initial prototypes and the technical lessons we've learned from them. 
Abstract-found: 1
Intro-found: 1
Reference: [Addanki et al. 1991] <author> S. Addanki, R. Cremonini, and J. S. Penberthy. </author> <title> Graphs of Models. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1-3):145-178, </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: For example, there will be model fragments describing both laminar and turbulent flow of liquid through a pipe. E 3 will use assumption classes to record the fact that these two descriptions are inconsistent <ref> [Addanki et al. 1991] </ref>. In addition, model fragments in an assumption class are related in a partial order signifying a more-accurate-than relation.
Reference: [Allen et al. 1990] <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Our second prototype goes beyond simple simulation when constructing explanations in response to user queries. We are also integrating algorithms for partial order planning <ref> [Allen et al. 1990] </ref> and model-based diagnosis [de Kleer and Williams 1987] so that E 3 can automatically answer questions about how one might diagnose, repair, or change the parts of the refrigerator (or any artifact created in a laboratory area).
Reference: [Barrett and Weld 1992] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating the Efficiency Gains. </title> <type> Technical Report 92-05-01, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <note> To Appear in May 1992. </note>
Reference-contexts: Since SPA uses a partial order representation it runs quickly on problems that are intractable for linear planners <ref> [Barrett and Weld 1992] </ref>. Despite this advantage, we expect to cache commonly requested plans to assure real-time response to questions requiring plan generation. In addition, our diagnosis algorithm allows E 3 to instruct users on troubleshooting strategy.
Reference: [Borning 1981] <author> A.H. Borning. </author> <title> The Programming Language Aspects of ThingLab, A Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: An electrical part has a collection of terminals; for example, a resistor has two. An electrical part has other attributes (for instance, a resistance). As another example, a wire would be a part with two terminals. This representation follows the technique used in ThingLab <ref> [Borning 1981] </ref>. A similar representation works for fluid, thermal, force and other types of connections. By typing the terminals and nodes the structural model can now support alternate views of composite devices. We can inquire from LOOM about all the electrical connections of a device. <p> All of these together act under the umbrella of a "laboratory" metaphor where the readers connect parts and observe results as if they were in a real laboratory. Much of the laboratory metaphor uses ideas from ThingLab <ref> [Borning 1981] </ref>. Lab Area Evaporator Condenser Compressor Thermometer Lab Supplies x=y Model View Hierarchy File Pressure Gauge Expansion Valve Post It Flow Overview The refrigerator laboratory in the second prototype is initialized with a set of components, each of which has a visual representation and a behavior.
Reference: [Brill 1991] <author> D. Brill. </author> <title> LOOM Reference Manual. </title> <address> USC-ISI, 4353 Park Terrace Drive, Westlake Village, CA 91361, </address> <note> version 1.4 edition, </note> <month> August </month> <year> 1991. </year>
Reference: [Collins and Forbus 1987] <author> J. Collins and K. Forbus. </author> <title> Reasoning About Fluids Via Molecular Collections. </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <month> July </month> <year> 1987. </year> <note> Reprinted in [Weld and de Kleer 1989]. </note>
Reference-contexts: For the refrigerator, the entities are the fluids contained in its components; we speak, for example, of the pressure of the refrigerant in the condenser. 13 Other ontologies are possible and useful. In the Molecular Collection ontology <ref> [Collins and Forbus 1987] </ref>, for example, the modeled entity is a very small, but still macroscopic, "piece" of fluid. Tracing the history of its travels through the refrigerator reveals how the refrigerator works: refrigerant absorbs heat in the evaporator, travels to the condenser, and there releases heat to the environment.
Reference: [de Kleer and Williams 1987] <author> J. de Kleer and B. Williams. </author> <title> Diagnosing Multiple Faults. </title> <journal> Artificial Intelligence, </journal> <volume> 32, </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: Our second prototype goes beyond simple simulation when constructing explanations in response to user queries. We are also integrating algorithms for partial order planning [Allen et al. 1990] and model-based diagnosis <ref> [de Kleer and Williams 1987] </ref> so that E 3 can automatically answer questions about how one might diagnose, repair, or change the parts of the refrigerator (or any artifact created in a laboratory area).
Reference: [de Kleer and Williams 1989] <author> J. de Kleer and B.C. Williams. </author> <title> Diagnosis with Behavioral Modes. </title> <booktitle> In Proceedings of IJCAI-89, </booktitle> <month> August </month> <year> 1989. </year>
Reference-contexts: The user will be able to ask for advice and the diagnosis algorithm will give hints. To implement diagnosis we are using a version of Sherlock <ref> [de Kleer and Williams 1989] </ref> built on top of an assumption-based truth maintenance system [de Kleer 1986]. Since model-based diagnosis systems do not require information about failure modes, they are appropriate for complex systems (such as a compression refrigerator) that can exhibit complex faulty behavior.
Reference: [de Kleer 1986] <author> J. de Kleer. </author> <title> An Assumption-based Truth Maintenance System. </title> <journal> Artificial Intelligence, </journal> <volume> 28, </volume> <year> 1986. </year>
Reference-contexts: The user will be able to ask for advice and the diagnosis algorithm will give hints. To implement diagnosis we are using a version of Sherlock [de Kleer and Williams 1989] built on top of an assumption-based truth maintenance system <ref> [de Kleer 1986] </ref>. Since model-based diagnosis systems do not require information about failure modes, they are appropriate for complex systems (such as a compression refrigerator) that can exhibit complex faulty behavior. <p> They have since created a second implementation, [Forbus and Falkenhainer 1992], but their simulation generation algorithm still has exponential time and space complexity because of its reliance on an ATMS <ref> [de Kleer 1986] </ref>; as a result, their SIMGEN program takes hours to construct simulations, ruling out the real-time operation necessary for E 3 . Our qml simulation-construction algorithm (section 3.3) runs in time that is low order polynomial in the size of the domain theory.
Reference: [Feiner and McKeown 1990] <author> S. Feiner and K. McKeown. </author> <title> Coordinating Text and Graphics in Explanation Generation. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 442-449, </pages> <year> 1990. </year>
Reference: [Forbus and Falkenhainer 1990] <author> K. Forbus and B. Falkenhainer. </author> <title> Self-Explanatory Simulations: An integration of qualitative and quantitative knowledge. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 380-387, </pages> <year> 1990. </year>
Reference: [Forbus and Falkenhainer 1992] <author> K. Forbus and B. Falkenhainer. </author> <title> Self-Explanatory Simulations: Scaling Up to Large Models. </title> <note> In Proceedings of AAAI-92, page To Appear, </note> <year> 1992. </year>
Reference-contexts: Forbus and Falkenhainer [1990] pioneered the idea of custom generation of self explanatory simulations, but their approach did not scale to devices of an interesting size. They have since created a second implementation, <ref> [Forbus and Falkenhainer 1992] </ref>, but their simulation generation algorithm still has exponential time and space complexity because of its reliance on an ATMS [de Kleer 1986]; as a result, their SIMGEN program takes hours to construct simulations, ruling out the real-time operation necessary for E 3 .
Reference: [Forbus 1984] <author> K. Forbus. </author> <title> Qualitative Process Theory. </title> <journal> Artificial Intelligence, </journal> <volume> 24, </volume> <month> December </month> <year> 1984. </year> <note> Reprinted in [Weld and de Kleer 1989]. </note>
Reference-contexts: The absence of arguments to the MF indicates it is an unquantified model fragment. A quantified MF includes arguments and a set of preconditions (based on the arguments) under which it will become active. The use of quantified model fragments, an idea adopted from Qualitative Process theory <ref> [Forbus 1984] </ref>, is an essential aspect of our modeling paradigm.
Reference: [Fuchs et al. 1980] <author> H. Fuchs, Z. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structure. </title> <journal> Computer Graphics, </journal> <volume> 14(3), </volume> <month> June </month> <year> 1980. </year>
Reference-contexts: To allow efficient rendering, this CSG representation must be translated to a polygonal boundary representation. This translation step is performed using binary space partitioning (BSP) trees <ref> [Fuchs et al. 1980] </ref>. Each CSG primitive is first translated into a BSP tree representation. A BSP tree for a composite CSG object is then produced using boolean set operations on the primitives' BSP trees [Naylor et al. 1987].
Reference: [Hanks and Weld 1992] <author> Steven Hanks and Daniel Weld. </author> <title> Systematic adaptation for case-based planning. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Specifically, the second E 3 prototype includes the SPA partial order planner <ref> [Hanks and Weld 1992] </ref> to answer questions about manipulating components ("How do you replace the compressor?") and perhaps to plan animation sequences. Since SPA uses a partial order representation it runs quickly on problems that are intractable for linear planners [Barrett and Weld 1992].
Reference: [Hovy and Arens 1991] <author> E. Hovy and Y. Arens. </author> <title> Automatic Generation of Formatted Text. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: For example, a device with two resistors might be encoded: (create-instance resistor r1) (create-instance resistor r2) 1 In the long-term, we anticipate providing natural language answers to these questions. We have performed some initial experiments that use the PENMAN <ref> [Hovy and Arens 1991] </ref> system to dynamically generate English from LOOM descriptions. 10 These create-instance commands instantiate resistors; the physics associated with these re-sistors is detailed in the domain description, which is discussed shortly.
Reference: [ISX 1991] <institution> ISX Corporation, </institution> <address> 4353 Park Terrace Drive, Westlake Village, CA 91361. </address> <note> LOOM Users Guide, version 1.4 edition, </note> <month> August </month> <year> 1991. </year> <month> 19 </month>
Reference: [Lounsbery 1989] <author> J.M. Lounsbery. </author> <title> The renaissance modeling system: A tutorial with man pages. </title> <type> Technical Report 89-01-05, </type> <institution> University of Washington, Department of Computer Science, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: Another advantage, exploited in the first prototype, is that real-time color rendering of the model can be implemented on BSP trees without hardware support. CSG models were created using the Renaissance modeling system <ref> [Lounsbery 1989] </ref>. The first prototype's user interface is constructed using the Common Lisp Interface Manager (CLIM) [Sym 1991], an interface builder for Common Lisp and certain window systems. CLIM manages presentations, which are textual or graphical display views of application objects.
Reference: [Maloney 1991] <author> J. Maloney. </author> <title> Using Constraints for User Interface Construction. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> August </month> <year> 1991. </year> <note> Published as Department of Computer Science and Engineering technical report 91-08-12. </note>
Reference-contexts: Second, Garnet provides an interface builder, in most cases saving the developer from having to write significant amounts of Lisp code. Third, Garnet provides constraints, which is an approach that we have found to be useful in constructing user interfaces <ref> [Maloney 1991] </ref>. Finally, we have Common Lisp source code available for Garnet, allowing us to experiment with different UI system architectures.
Reference: [Myers et al. 1990] <author> B.A. Myers, D. Guise, R.B. Dannenberg, B. Vander Zanden, D. Kosbie, P. Mar-chal, and E. Pervin. </author> <title> Comprehensive Support for Graphical, Highly-Interactive User Interfaces: The Garnet User Interface Development Environment. </title> <journal> IEEE Computer, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: These notes can be edited, iconified, or deleted by the user. User Interface Toolkits As noted earlier, we found several weaknesses in using CLIM in constructing the first prototype. After careful consideration, we decided to change to Garnet <ref> [Myers et al. 1990] </ref> as a user interface support system, due primarily to the increased flexibility and power that it will provide.
Reference: [Naylor et al. 1987] <author> B. Naylor, J. Amanatides, and W. Thibault. </author> <title> Merging bsp trees yields polyhedral set operations. </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1987. </year>
Reference-contexts: This translation step is performed using binary space partitioning (BSP) trees [Fuchs et al. 1980]. Each CSG primitive is first translated into a BSP tree representation. A BSP tree for a composite CSG object is then produced using boolean set operations on the primitives' BSP trees <ref> [Naylor et al. 1987] </ref>. This approach was chosen because the boolean operations on polyhedra 4 are efficiently and robustly implemented used BSP trees. Another advantage, exploited in the first prototype, is that real-time color rendering of the model can be implemented on BSP trees without hardware support.
Reference: [Press et al. 1986] <author> W. Press, B. Flannery, S. Teukolsky, and W. Vetterling, </author> <title> editors. Numerical Recipes. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1986. </year>
Reference-contexts: The simulation engine passes these equations, along with a set of bounding constraints, to a solver which calculates the model's time-varying behavior. The solver employs a 4th order Runge-Kutta integrator with adaptive step-size control <ref> [Press et al. 1986] </ref> to solve the ordinary differential equations. The solver produces a behavioral record that is essentially a large array of parameter values over time. This behavioral data is recorded as a LOOM object for centralized availability and use in animations and other parts of the system.
Reference: [Requicha and Voelcker 1982] <author> A.A.G. Requicha and H.B. Voelcker. </author> <title> Solid modeling: A historical summary and comtemporary assessment. </title> <journal> IEEE Computer Graphics and Applications, </journal> <month> March </month> <year> 1982. </year>
Reference-contexts: to answer user queries such as, "What parts comprise the refrigerator?" and "What parts are connected to the compressor?" Additionally, this model can be used to answer simple queries about the parts using canned descriptions. * Another model describes the geometry of the refrigerator using constructive solid geometry (CSG) expressions <ref> [Requicha and Voelcker 1982] </ref>. This model allows the user to query what the refrigerator looks like from any angle. * A thermal model allows the generation and simulation of some of the heating and cooling properties of the refrigerator. <p> The solution consists of the internal temperature of the refrigerator compartment as a function of time and of the on-off state of the compressor. Three-dimensional objects, such as the refrigerator itself, are described using a CSG representation <ref> [Requicha and Voelcker 1982] </ref> of the device.
Reference: [Sannella and Borning 1992] <author> M. Sannella and A. Borning. Multi-Garnet: </author> <title> Integrating Multi-Way Constraints with Garnet. </title> <note> Submitted for publication, </note> <month> May </month> <year> 1992. </year>
Reference-contexts: Finally, we have Common Lisp source code available for Garnet, allowing us to experiment with different UI system architectures. For example, we have constructed an augmented version of Garnet, Multi-Garnet <ref> [Sannella and Borning 1992] </ref>, which includes support for multi-way constraints and constraint hierarchies; we will be using the E 3 user interface as a testbed for our research in this area. 3.3 Dynamic Modeling and Simulation No single model is capable of supporting a wide range of queries about a device
Reference: [Seligmann and Feiner 1991] <author> D.D. Seligmann and S. Feiner. </author> <title> Automated generation of intent-based 3D illustrations. </title> <booktitle> In Proceedings of SIGGRAPH, </booktitle> <pages> pages 123-132, </pages> <month> July </month> <year> 1991. </year>
Reference: [Sullivan and Notkin 1990] <author> K. Sullivan and D. Notkin. </author> <title> Reconciling Environment Integration and Component Independence. </title> <booktitle> In Proceedings SIGSOFT90: 4th Symposium on Software Development Environments, </booktitle> <address> Irvine, CA, </address> <month> December </month> <year> 1990. </year> <note> ACM. </note>
Reference-contexts: For example, the compressor can be represented by a single object first; should the user ask a question about its functioning, it can be replaced by a more detailed representation extracted from the LOOM structural hierarchy. 15 Renoir mediates <ref> [Sullivan and Notkin 1990] </ref> the relationship between the objects in the CSG representation and the objects in the BSP representation used for rendering the images. The trans lation from the CSG to the BSP representation is as in the first prototype.
Reference: [Sym 1991] <institution> Symbolics, Inc., </institution> <address> 8 New England Executive Park, East, Burlington, MA 01803. </address> <booktitle> Common Lisp Interface Manager (CLIM): Release 1.0, </booktitle> <month> March </month> <year> 1991. </year>
Reference-contexts: Another advantage, exploited in the first prototype, is that real-time color rendering of the model can be implemented on BSP trees without hardware support. CSG models were created using the Renaissance modeling system [Lounsbery 1989]. The first prototype's user interface is constructed using the Common Lisp Interface Manager (CLIM) <ref> [Sym 1991] </ref>, an interface builder for Common Lisp and certain window systems. CLIM manages presentations, which are textual or graphical display views of application objects. CLIM allows user actions (such as right-button down) to depend on application context. CLIM also translates actions on presentations to commands on corresponding application objects.
Reference: [Van Amerongen 1967] <author> C. Van Amerongen. </author> <title> The Way Things Work, volume 1-4. </title> <editor> Simon and Schus-ter, </editor> <address> New York, </address> <year> 1967. </year>
Reference-contexts: The prototype is modeled in the style of articles in Van Amerongen's The Way Things Work book, which describes the composition and function of mechanical and electrical devices <ref> [Van Amerongen 1967] </ref>. In the prototype, the reader can view and query several relatively simple models of a com pression refrigerator. * One model describes the structural relationships among the parts (such as the evaporator and the expansion valve).
Reference: [Weld and de Kleer 1989] <author> D. Weld and J. de Kleer, </author> <title> editors. Readings in Qualitative Reasoning about Physical Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1989. </year>
Reference: [Weld 1992] <author> D. Weld. </author> <title> Reasoning about Model Accuracy. </title> <journal> Artificial Intelligence, </journal> <note> To Appear 1992. </note>
Reference-contexts: Depending on the task, different simplifications, ontologies, and mathematical precision are required. We are applying our work on automated model management <ref> [Weld 1992] </ref> to compose the model fragments dynamically into an appropriate model for a query. From this model, qualitative and numeric simulations are automatically compiled and run to generate the information necessary to answer the query. This section explains our architecture for flexible simulation. <p> In addition, model fragments in an assumption class are related in a partial order signifying a more-accurate-than relation. We have explored a variety of algorithms for automatically choosing the simplest models that are accurate enough for a given simulation <ref> [Weld 1992] </ref>, but for the current E 3 prototype we plan to experiment with graphical tools for user control of modeling assumptions (Section 3.2).
Reference: [Weyer and Borning 1985] <author> S. Weyer and A. Borning. </author> <title> A Prototype Electronic Encyclopedia. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 3(1) </volume> <pages> 63-88, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: This reflects the fact that sometimes the best strategy is to replace a component and see if that solves the problem rather than continue troubleshooting until certain of the fault. 16 4 Related Work In one of the earliest electronic encyclopedia projects <ref> [Weyer and Borning 1985] </ref>, readers were presented with multi-media articles on a variety of topics, including articles with simulations of physical phenomena such as Hooke's Law and resonance behavior. The system was a significant advance for its time.
Reference: [Woods 1991] <author> E. Woods. </author> <title> The Hybrid Phenomena Theory. </title> <booktitle> In Proceedings of the 5th intenational workshop on qualitative reasoning, </booktitle> <pages> pages 71-76, </pages> <month> May </month> <year> 1991. </year> <month> 20 </month>
References-found: 32

