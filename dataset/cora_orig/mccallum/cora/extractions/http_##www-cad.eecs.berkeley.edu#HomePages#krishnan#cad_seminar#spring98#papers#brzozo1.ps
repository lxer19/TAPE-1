URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/spring98/papers/brzozo1.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/spring98/abstract/brzozowski.html
Root-URL: http://www.cs.berkeley.edu
Email: email: brzozo@uwaterloo.ca  email: luba@tele.pw.edu.pl  
Title: Decomposition of Boolean Functions Specified by Cubes  
Author: J. A. BRZOZOWSKI T. LUBA 
Note: This research was supported by the Natural Sciences and Engineering Research Council of Canada under grant No. OGP0000871. This work was done while T. Luba was a Visiting Professor at the  
Web: ftp://cs-archive.uwaterloo.ca/cs-archive/CS-97-01/CS-97-01.ps.Z  
Address: Waterloo, Ontario, Canada N2L 3G1  Nowowiejska 15/19 00-665 Warsaw, Poland  
Affiliation: Department of Computer Science University of Waterloo  Institute of Telecommunications Warsaw University of Technology  University of Waterloo.  
Abstract: We study the problem of decomposing a Boolean function into a set of functions with fewer arguments. This problem has considerable practical importance in VLSI. For example, for digital circuits designed with field-programmable gate arrays, it is necessary to express Boolean functions in terms of `smaller' functions that fit the cells of the array. The decomposition problem is old, and well understood when the function to be decomposed is specified by a truth table listing the function's minterms, or has one output only. However, modern design tools, such as Berkeley's Espresso, handle functions with many outputs and represent them by Boolean cubes rather than minterms, for reasons of efficiency. In this paper we develop a decomposition theory for multiple-output, partially specified Boolean functions represented by cubes. The theory uses ternary algebra and generalized set systems. Keywords: blanket, Boolean function, cube, decomposition, disjunctive, "don't care," multiple-output, set system, ternary algebra, type fr 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. L. Ashenhurst, </author> <title> The Decomposition of Switching Functions, </title> <booktitle> Proc. of International Symp. Theory of Switching Functions, </booktitle> <year> 1959. </year>
Reference-contexts: Numerous decomposition algorithms have been developed. Ashenhurst, in his fundamental paper <ref> [1] </ref>, stated the disjunctive decomposition theorem based on decomposition charts. Curtis extended Ashenhurst's results to multiple decompositions [7], of the form F = H (U; G 1 (V ); : : : ; G k (V )).
Reference: [2] <author> R. K. Brayton, G. D. Hachtel, C. T. McMullen, and U. L. Sangiovanni-Vincentelli, </author> <title> Logic Minimization Algorithms for VLSI Synthesis, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1984. </year>
Reference-contexts: In this paper we extend previous results concerning functional decomposition to the case where the given function is specified by cubes in the so-called fr type description <ref> [2] </ref>. We develop a new framework, based on ternary algebra, and on certain generalizations of set systems, which we call "blankets." The remainder of the paper is structured as follows. Section 2 presents some notions from ternary algebra. <p> An fr function <ref> [2] </ref>, is any set F of (n + m)-tuples from f0; ; 1g n+m that satisfies the following consistency condition, which guarantees that there are no contradictions. <p> A specification in the form of Table 4 can be viewed as an abbreviated version of the truth table of Table 3. Such specifications are widely used; for example, the function representations of type fr used with the program Espresso <ref> [2] </ref> satisfy our definition. 12 5 Blankets for Boolean Functions We will use blankets to characterize decompositions of fr functions. <p> The subtraction can be easily performed by intersecting r (B) with the complement of the set of all the cubes to be subtracted. An efficient method for complementing a set of cubes can be found in <ref> [2] </ref>. We can use a similar approach to obtain the table of function H. <p> Other, more detailed tasks are reducible to widely used procedures in modern logic synthesis, for example, column covering or cube complementation <ref> [2, 19] </ref>. 29 10.1 Maximal Mergeability Classes The main task in calculating a serial decomposition of a function F with given sets U and V is to find a blanket fi G which satisfies the conditions of Theorem 1. <p> This covering problem is equivalent to the well-known covering problem encountered in modern logic synthesis. Several algorithms have been developed for efficient calculation of minimal covers. The best-known methods inherit ideas developed for two-level logic minimization algorithms <ref> [2, 19] </ref>. The minimal cover problem for the set fB i g can be reduced to the column covering problem [2] if we represent rows of a binary matrix M by blocks B i of fi V and columns of M by maximal mergeability classes C j . <p> Several algorithms have been developed for efficient calculation of minimal covers. The best-known methods inherit ideas developed for two-level logic minimization algorithms [2, 19]. The minimal cover problem for the set fB i g can be reduced to the column covering problem <ref> [2] </ref> if we represent rows of a binary matrix M by blocks B i of fi V and columns of M by maximal mergeability classes C j . Element m ij of M takes on the value 1 if block B i is contained in class C j .
Reference: [3] <author> R. K. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang, </author> <title> MIS: Multiple-Level Logic Minimization System, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. CAD-6, No. 6, </volume> <pages> pp. 1062-1081, </pages> <month> Novem-ber </month> <year> 1987. </year>
Reference-contexts: Algebraic division of sum-of-product expressions represented by sets of cubes has been a basic operation in the procedures of so-called kernel extraction widely used in multi-level synthesis of Boolean functions <ref> [3] </ref>. A renewed interest in functional decomposition in recent years was caused by the introduction of field programmable gate arrays by Xilinx in 1986, and other companies (AT&T, Actel, Altera) in succeeding years.
Reference: [4] <author> D. Brown, </author> <title> Field Programmable Gate Arrays, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: Its goal is to break a logic circuit into a set of smaller interacting components. Such an implementation is desirable for a number of reasons. In the case of designs using field-programmable gate arrays (FPGAs), particularly those with lookup table structures <ref> [4] </ref>, decomposition is a necessity, since FPGA cells can only accomodate functions with very few inputs and outputs. In PLA- and PLD-oriented designs, a decomposed circuit often leads to a smaller silicon area and shorter signal delays [6]. Consequently, decomposition methods are increasingly exploited in today's logic synthesis systems [17]. <p> A renewed interest in functional decomposition in recent years was caused by the introduction of field programmable gate arrays by Xilinx in 1986, and other companies (AT&T, Actel, Altera) in succeeding years. FPGAs are modern logic devices which can be programmed by the users to implement any logic circuit <ref> [4] </ref>. Because of their short turnaround time compared with that of the standard ASIC process, they have recently become very popular in rapid system prototyping. Many FPGA architectures have been proposed; the architecture based on look-up tables is one of the most popular ones.
Reference: [5] <author> J. A. Brzozowski and C-J. Seger, </author> <title> Asynchronous Circuits, </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1995. </year>
Reference-contexts: The overall decomposition algorithm is next described in Section 10, and Section 11 concludes the paper. 2 Notions from Ternary Algebra In this section we present for later use some concepts and notation from ternary algebra. For more details see <ref> [5] </ref>. We use 0 and 1 to denote the usual logic values, and to denote a third value, which will have several interpretations.
Reference: [6] <author> M. J. Ciesielski and S. Yang, PLADE: </author> <title> A Two-Stage PLA Decomposition, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 11, No. 8, </volume> <month> August </month> <year> 1992. </year>
Reference-contexts: In PLA- and PLD-oriented designs, a decomposed circuit often leads to a smaller silicon area and shorter signal delays <ref> [6] </ref>. Consequently, decomposition methods are increasingly exploited in today's logic synthesis systems [17]. Mathematically, decomposition is the process of expressing a function of n variables as a function of functions of fewer variables [7].
Reference: [7] <author> H. A. Curtis, </author> <title> A New Approach to the Design of Switching Circuits, </title> <address> D. </address> <publisher> Van Nostrand Co. Inc., </publisher> <address> Princeton, NJ, </address> <year> 1962. </year> <month> 34 </month>
Reference-contexts: Consequently, decomposition methods are increasingly exploited in today's logic synthesis systems [17]. Mathematically, decomposition is the process of expressing a function of n variables as a function of functions of fewer variables <ref> [7] </ref>. For example, a function F (X ) is decomposable if it can be expressed as F = H (U; G (V )), where U and V are proper subsets of the set X of input variables, and G and H have fewer input variables than F . <p> Numerous decomposition algorithms have been developed. Ashenhurst, in his fundamental paper [1], stated the disjunctive decomposition theorem based on decomposition charts. Curtis extended Ashenhurst's results to multiple decompositions <ref> [7] </ref>, of the form F = H (U; G 1 (V ); : : : ; G k (V )). The use of charts for decomposition of logic networks is applicable only to restricted classes of functions. <p> The use of blankets for Boolean functions is described in Section 5. The notion of "disjunctive serial separation"|a functional decomposition without any constraints on the size of the components|is defined in Section 6, where we also prove a generalized version of a theorem of Curtis <ref> [7] </ref>. Section 7 extends our methods to nondisjunctive decompositions. Section 8, discusses decompositions with constraints on the number of arguments of the components. The use of cubes in the decomposition process is illustrated in Section 9. <p> and F Y we = ft 2 F j t " w eg: (3) For example, for the function of Table 4, fi F = f 4; 5; 4; 6; 2; 3; 7; 1; 3; 6; 7g: 6 Disjunctive Serial Separations The following is a generalization of the work of <ref> [7] </ref> and a formalization of the work in [12]. We use the following notation. Let X = fx 1 ; : : :; x n g be the set of input variables of an fr function F (x 1 ; : : : ; x n ).
Reference: [8] <author> J. Hartmanis and R. E. Stearns, </author> <title> Algebraic Structure Theory of Sequential Machines, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1966. </year>
Reference-contexts: Also, we have the following property: fiflfi 0 fi and fiflfi 0 fi 0 : Next, we consider some special blankets called set systems <ref> [8] </ref>. A set system on a set S is a blanket = fB 1 ; : : : ; B k g in which the blocks are maximal in the sense that B i B j implies i = j. <p> The product ffi 0 of two set systems <ref> [8] </ref> is defined as follows: ffi 0 = max (fl 0 ): For example, f1; 2; 3; 3; 4; 5g ffi f1; 3; 4; 1; 5; 2; 3; 4g = f1; 3; 2; 3; 3; 4; 5g: One verifies that set system product is idempotent, commutative, and asso-ciative.
Reference: [9] <author> L. Jozwiak, </author> <title> General Decomposition and its Use in Digital Circuit Synthesis, </title> <booktitle> VLSI Design, </booktitle> <volume> Vol. 3, </volume> <pages> Nos. 3-4, pp. 225-248, </pages> <year> 1995. </year>
Reference: [10] <author> Z. Kohavi, </author> <title> Switching and Finite Automata Theory, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: The problem of finding maximal mergeability classes is identical to that of finding maximal compatibility classes for the reduction of incompletely specified finite-state machines <ref> [10] </ref>.
Reference: [11] <author> Y. T. Lai, M. Pedram, and B. K. Vrudhula, </author> <title> EVBDD-Based Algorithms for Integer Linear Programming, Spectral Transformation, and Function Decomposition, </title> <journal> IEEE Trans. on Computer Aided Design, </journal> <volume> Vol. 13, No. 8, </volume> <pages> pp. 959-975, </pages> <year> 1994. </year>
Reference-contexts: For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes.
Reference: [12] <author> T. Luba and H. Selvaraj, </author> <title> A General Approach to Boolean Function Decomposition and its Application in FPGA-Based Synthesis, </title> <booktitle> VLSI Design, </booktitle> <volume> Vol. 3, </volume> <pages> Nos. 3-4, pp. 289-300, </pages> <year> 1995. </year>
Reference-contexts: For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes. <p> j t " w eg: (3) For example, for the function of Table 4, fi F = f 4; 5; 4; 6; 2; 3; 7; 1; 3; 6; 7g: 6 Disjunctive Serial Separations The following is a generalization of the work of [7] and a formalization of the work in <ref> [12] </ref>. We use the following notation. Let X = fx 1 ; : : :; x n g be the set of input variables of an fr function F (x 1 ; : : : ; x n ). <p> A comparison of the results achieved by DEMAIN with the other published results shows that the effectiveness of the proposed method does not suffer because of its universality; in fact, it provides better solutions in many cases <ref> [12, 13] </ref>. Recently, several experiments were performed using the MCNC benchmark circuits to compare the results produced by DEMAIN with those pro 33 duced by ALTERA's MAX+Plus2 software. For example, the benchmark circuit rd84 was initially compiled directly using ALTERA's compiler.
Reference: [13] <author> T. Luba, H. Selvaraj, M. Nowicka, and A. Krasniewski, </author> <title> Balanced Multi-Level Decomposition and its Applications in FPGA-Based Synthesis, </title> <editor> in G. Saucier and A. Mignotte, eds., </editor> <booktitle> Logic and Architecture Synthesis, </booktitle> <pages> pp. 109-115, </pages> <publisher> Chapman and Hall, </publisher> <year> 1995. </year>
Reference-contexts: The proposed serial decomposition procedure has already been partly included in the logic synthesis tool DEMAIN dedicated to FPGA-based logic synthesis <ref> [13] </ref>. Because of the arbitrary number of cell inputs and outputs accepted by DEMAIN, DEMAIN's applicability is wider than that of other FPGA oriented tools. This is because the FPGA logic cell is treated as a universal cell capable of implementing any n input m output Boolean function. <p> A comparison of the results achieved by DEMAIN with the other published results shows that the effectiveness of the proposed method does not suffer because of its universality; in fact, it provides better solutions in many cases <ref> [12, 13] </ref>. Recently, several experiments were performed using the MCNC benchmark circuits to compare the results produced by DEMAIN with those pro 33 duced by ALTERA's MAX+Plus2 software. For example, the benchmark circuit rd84 was initially compiled directly using ALTERA's compiler.
Reference: [14] <author> R. Murgai, N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> Improved Logic Synthesis Algorithm for Table Look Up Architectures, </title> <booktitle> Proc. IEEE International Conf. on Computer Aided Design, </booktitle> <pages> pp. 564-567, </pages> <year> 1991. </year>
Reference-contexts: For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes. <p> Perhaps the most important feature of our method is that it permits us to process incompletely specified multiple-output functions specified by sets of on and off cubes, as a single n-input, m-output object, for which the result is represented in the same form. Although existing methods <ref> [14, 15, 17, 20] </ref> deal with multiple-output functions, they do not process them as single objects represented by an Espresso f r matrix. Also, they do not find nondisjunctive decompositions. Our representation of Boolean functions allows for the same treatment of disjunctive and non-disjunctive decompositions.
Reference: [15] <author> J. P. Roth and R. M. Karp, </author> <title> Minimization over Boolean Graphs, </title> <journal> IBM Journal of Research and Development, </journal> <volume> Vol. 6, </volume> <pages> pp. 227-238, </pages> <month> April </month> <year> 1962. </year>
Reference-contexts: The use of charts for decomposition of logic networks is applicable only to restricted classes of functions. To remedy this, Roth and Karp used a more compact representation of a function in the form of a cover of the on-set and a cover of the off-set <ref> [15] </ref>. However, their method does not deal directly with multiple-output functions. In the early 1980's, functional decomposition methods received less attention because of the rapid development of synthesis techniques for multilevel logic. <p> Perhaps the most important feature of our method is that it permits us to process incompletely specified multiple-output functions specified by sets of on and off cubes, as a single n-input, m-output object, for which the result is represented in the same form. Although existing methods <ref> [14, 15, 17, 20] </ref> deal with multiple-output functions, they do not process them as single objects represented by an Espresso f r matrix. Also, they do not find nondisjunctive decompositions. Our representation of Boolean functions allows for the same treatment of disjunctive and non-disjunctive decompositions.
Reference: [16] <author> A. Saldanha, T. Villa, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> Satisfaction of Input and Output Encoding Constraints, </title> <journal> IEEE Trans. on Computer Aided Design,, </journal> <volume> Vol. 13, No. 5, </volume> <pages> pp. 589-602, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 ; B 4 ; B 6 ; B 7 g; fB 5 ; B 6 ; B 7 ; B 8 g; fB 4 ; B 6 ; B 7 ; B 8 g; For a discussion of efficient methods of calculating maximal mergeability classes using unmergeable pairs see <ref> [16] </ref>. 31 10.3 Minimal Covers for fi V The next step in calculating fi G is the selection of a set of maximal classes, with minimal cardinality, that covers all the blocks of fi V .
Reference: [17] <author> A. Sangiovanni-Vincentelli, A. Gamal, and J. Rose, </author> <title> Synthesis Methods for Field Programmable Gate Arrays, </title> <journal> Proc. IEEE, </journal> <volume> Vol. 81, No. 7, </volume> <pages> pp. 1057-1083, </pages> <year> 1993. </year> <month> 35 </month>
Reference-contexts: In PLA- and PLD-oriented designs, a decomposed circuit often leads to a smaller silicon area and shorter signal delays [6]. Consequently, decomposition methods are increasingly exploited in today's logic synthesis systems <ref> [17] </ref>. Mathematically, decomposition is the process of expressing a function of n variables as a function of functions of fewer variables [7]. <p> For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes. <p> Perhaps the most important feature of our method is that it permits us to process incompletely specified multiple-output functions specified by sets of on and off cubes, as a single n-input, m-output object, for which the result is represented in the same form. Although existing methods <ref> [14, 15, 17, 20] </ref> deal with multiple-output functions, they do not process them as single objects represented by an Espresso f r matrix. Also, they do not find nondisjunctive decompositions. Our representation of Boolean functions allows for the same treatment of disjunctive and non-disjunctive decompositions.
Reference: [18] <author> P. Sapiecha, M. Perkowski, and T. Luba, </author> <title> Decomposition of Infor--mation Systems Based on Coloring Heuristics, </title> <booktitle> Proc. Symposium on Modelling, Analysis and Simulation, CESA'96 IMACS Multi-conference. Computational Engineering in Systems Applications , pp. </booktitle> <pages> 1101-1106, </pages> <address> Lille, France, </address> <note> Gerf EC Lille Cite Scientifique 1996. </note>
Reference-contexts: fi 0 Translating these to the corresponding subsets of cubes, we finally have fi G = f1; 2; 5; 6; 7; 8; 10; 3; 4; 6; 9; 10g and fi 0 As we will now show, we can reduce the task of generating fi G to the graph coloring problem <ref> [18] </ref>. Blocks of fi V are treated as nodes v 2 N and unmergeable pairs e = (B i ; B j ) 2 E as edges of a graph = (N; E).
Reference: [19] <author> T. Sasao, </author> <title> Logic Synthesis and Optimization, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes. <p> Other, more detailed tasks are reducible to widely used procedures in modern logic synthesis, for example, column covering or cube complementation <ref> [2, 19] </ref>. 29 10.1 Maximal Mergeability Classes The main task in calculating a serial decomposition of a function F with given sets U and V is to find a blanket fi G which satisfies the conditions of Theorem 1. <p> This covering problem is equivalent to the well-known covering problem encountered in modern logic synthesis. Several algorithms have been developed for efficient calculation of minimal covers. The best-known methods inherit ideas developed for two-level logic minimization algorithms <ref> [2, 19] </ref>. The minimal cover problem for the set fB i g can be reduced to the column covering problem [2] if we represent rows of a binary matrix M by blocks B i of fi V and columns of M by maximal mergeability classes C j .
Reference: [20] <author> T. Stanion and C. Sechen, </author> <title> A Method for Finding Good Ashenhurst Decomposition and Its Application to FPGA Synthesis, </title> <booktitle> 32 Design Automation Conference, </booktitle> <pages> pp. 60-64, </pages> <address> San Francisco, </address> <year> 1995. </year>
Reference-contexts: For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes. <p> Perhaps the most important feature of our method is that it permits us to process incompletely specified multiple-output functions specified by sets of on and off cubes, as a single n-input, m-output object, for which the result is represented in the same form. Although existing methods <ref> [14, 15, 17, 20] </ref> deal with multiple-output functions, they do not process them as single objects represented by an Espresso f r matrix. Also, they do not find nondisjunctive decompositions. Our representation of Boolean functions allows for the same treatment of disjunctive and non-disjunctive decompositions.
Reference: [21] <author> W. A. Shen, J. D. Huang, and S. M. Chao, </author> <title> Lambda Set Selection in Roth-Karp Decomposition for LUT-Based FPGA Technology Mapping, </title> <booktitle> 32 Design Automation Conference, </booktitle> <pages> pp. 65-69, </pages> <address> San Francisco, </address> <year> 1995. </year>
Reference-contexts: For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes.
Reference: [22] <author> M. Sys lo, N. Deo, and J. Kowalik, </author> <title> Discrete Optimization Algorithms, </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1983. </year>
Reference-contexts: In this section we show that the main decomposition tasks can be reduced to graph partitioning or graph coloring problems <ref> [22] </ref>, or to the computation of maximal cliques or maximal independent sets in a graph. <p> The smallest integer k for which there exists a k-coloring of graph is the chromatic number of . Although, the problem of finding the minimal chromatic number for a given graph is NP-complete, a number of fast heuristics have been developed for it <ref> [22] </ref>. 32 Calculating fi G corresponds to finding the minimal number k of col-ors for graph = (N; E).
Reference: [23] <author> W. Wan and M. A. Perkowski, </author> <title> A New Approach to the Decomposition of Incompletely Specified Multi-Output Function Based on Graph Coloring and Local Transformations and Its Application to FPGA Mapping, </title> <booktitle> Proc. European Design Automation Conf., </booktitle> <pages> pp. 230-235, </pages> <year> 1992. </year>
Reference-contexts: For example, in Xilinx XC3000 architecture, k is 5. When they found that the earlier algebraic methods could not be easily adapted to the look-up-table model, researchers switched to decomposition methods based on functional dependencies <ref> [11, 12, 14, 17, 19, 20, 21, 23] </ref>. However, despite the fundamental nature of the functional decomposition problem and its many applications, there does not exist any uniform approach to decomposition which could be applied to completely or incompletely specified multiple-output Boolean functions represented compactly by covers using Boolean cubes.
References-found: 23

