URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/small.ps.gz
Refering-URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/small.html
Root-URL: http://www.cs.uiuc.edu
Title: Iterated Nearest Neighbors and Finding Minimal Polytopes  
Author: David Eppstein Jeff Erickson 
Abstract: We introduce a new method for finding several types of optimal k-point sets, minimizing perimeter, diameter, circumradius, and related measures, by testing sets of the O(k) nearest neighbors to each point. We argue that this is better in a number of ways than previous algorithms, which were based on high order Voronoi diagrams. Our technique allows us for the first time to efficiently maintain minimal sets as new points are inserted, to generalize our algorithms to higher dimensions, to find minimal convex k-vertex polygons and polytopes, and to improve many previous results. We achieve many of our results via a new algorithm for finding rectilinear nearest neighbors in the plane in time O(n log n + kn). We also demonstrate a related technique for finding minimum area k-point sets in the plane, based on testing sets of nearest vertical neighbors to each line segment determined by a pair of points. A generalization of this technique also allows us to find minimum volume and boundary measure sets in arbitrary dimensions.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and J. Matousek. </author> <title> Ray shooting and parametric search. </title> <booktitle> In 24th ACM Symp. Theory Comput., </booktitle> <pages> pages 517-526, </pages> <year> 1992. </year>
Reference-contexts: Agarwal and Matousek <ref> [1] </ref> recently discovered an algorithm for constructing planar order-k Voronoi diagrams in time O (kn 1+" ). 1 Combining their algorithm with our techniques, we can find minimum variance sets in the plane in time O (n log n + k 2+" n), which is slightly worse than the existing bound. <p> We then test each of the O (n=k) neighbor sets in time O (k 5=2+" ) and space O (k 5=2 ) using Agarwal and Matousek's Voronoi diagram algorithm <ref> [1] </ref>. 2 This algorithm matches or improves previous time bounds for all k in O (n " ) " (log 2 n). For smaller values of k, the O (n log n + k 2 n)-time algorithm of Aggarwal et al. is faster. <p> 2 n) for diameter, O (k log 2 k + log 2 n) for L 1 diameter, and O (k 3+" + log 2 n) for variance. 2 We can dynamize our higher dimensional results in a similar manner, using a dynamic nearest neighbor data structure of Agarwal and Matousek <ref> [1] </ref>, with results that are just slightly better than brute force. 7 Nearest Vertical Neighbors We now consider the problem nearest vertical neighbors for points and line segments; we use this as a subroutine in our minimum area algorithm.
Reference: [2] <author> A. Aggarwal, H. Imai, N. Katoh, and S. Suri. </author> <title> Finding k points with minimum diameter and related problems. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 38-56, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion <ref> [2, 14, 20] </ref>. Criteria that have been studied include diameter [2], variance [2], area of the convex hull [20], convex hull perimeter [14, 20], and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. <p> 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion [2, 14, 20]. Criteria that have been studied include diameter <ref> [2] </ref>, variance [2], area of the convex hull [20], convex hull perimeter [14, 20], and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. We study and improve known algorithms for these problems. <p> 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion [2, 14, 20]. Criteria that have been studied include diameter <ref> [2] </ref>, variance [2], area of the convex hull [20], convex hull perimeter [14, 20], and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. We study and improve known algorithms for these problems. <p> Criteria that have been studied include diameter <ref> [2] </ref>, variance [2], area of the convex hull [20], convex hull perimeter [14, 20], and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. We study and improve known algorithms for these problems. We also introduce dynamic versions of these problems, in which the optimum set must be maintained as new points are inserted. <p> Constructing the Voronoi diagram and searching the O (kn) such regions takes a total time of O (n log n + k c+1 n). Aggarwal et al. <ref> [2] </ref> reduced the number of regions to be searched from O (kn) to O (n). Thus the time becomes O (n log n+k c n). <p> There are several reasons why we believe this. First, the reduction to O (n) regions to be searched is immediate, and avoids the complicated analysis of Aggarwal et al. <ref> [2] </ref>. Second, by finding neighbors of neighbors, we show that the number of regions can be further reduced to O (n=k), improving the time bounds by a factor of k and eliminating the anomaly described above. Third, our time bounds can be improved in a different way. <p> Our results are summarized in the first column of Table 1. We improve all previous results <ref> [2, 14, 20] </ref>, except for variance and area, which we improve for certain values of k. * We maintain minimal point sets in the plane as points are inserted, under a variety of "one-dimensional" measures. Our results are summarized in the second column of Table 1. <p> L 1 boundary measure, or volume. Our results are summarized in Table 2. We improve previous algorithms for circumradius and variance based on Voronoi diagrams, which run in time O (n d+1 ) <ref> [2] </ref>. No previous bounds were known for the other problems. * We generalize all of our results to k-point convex polygons and polytopes. We derive time bounds with the same dependence on n as the corresponding k-point set algorithms, but with an exponential dependence on k. <p> This was previously solved in O (k 2 n log n + k 5 n) time by Dobkin et al. [14]; this can be improved to O (n log n + k 4 n) using the techniques of Aggarwal et al. <ref> [2] </ref> Both algorithms use a dynamic programming algorithm, requiring time O (kn 3 ) and space O (kn), as a subroutine within each region of a certain high order Voronoi diagram [14]. We will use this algorithm as a subroutine within each set of nearest neighbors. Lemma 5.1. <p> The minimum L 1 perimeter k-point set is the set enclosable in the minimum perimeter axis-aligned rectangle. Aggarwal et al. <ref> [2] </ref> solve this problem in time O (k 2 n log n). We use their O (n 3 )-time brute force algorithm as a subroutine. Theorem 5.2. <p> We improve previous time bounds, due to Aggarwal et al. <ref> [2] </ref>, of O (n log n+k 2 n) in the plane and O (n d+1 ) in higher dimensions. Their algorithms are based on higher order Voronoi diagrams. First we develop a new algorithm to use as a subroutine within each neighbor set. <p> In the plane, Aggarwal et al. <ref> [2] </ref> show how to find the minimum diameter k-point set in time O (n log n + k 2:5 n log k). Unfortunately, we know of no fully polynomial algorithm for this problem in higher dimensions, so we are forced to use a brute force approach. Lemma 5.4. <p> Aggarwal et al. <ref> [2] </ref> solve this problem by reducing it to one of finding a maximum independent set in a certain bipartite graph. <p> As noted by Aggarwal et al. <ref> [2] </ref>, these operations can be performed in O (log n) amortized time and linear space using the circular hull data structure of Hershberger and Suri [25]. We start the labeling process by marking each unmatched point as even (it has a zero length path to an unmatched point). <p> We sweep a lune around p, covering in turn O (n) different point sets; we must test if any of these sets contains a small diameter k-point subset. As noted by Aggarwal et al. <ref> [2] </ref>, if S is the point set contained in a given lune, then G D (S) is bipartite, and a subset of S with diameter less than D is exactly an independent set in G D (S). <p> The minimum Nearest Neighbors and Minimal Polytopes 13 L 1 diameter (equivalently, minimum L 1 circumradius) k-point set is the set en-closable in the smallest axis-aligned hypercube. In the plane, Aggarwal et al. <ref> [2] </ref> give an algorithm for this problem, based on higher order L 1 Voronoi diagrams, that takes time O (k 2 n log n). Our approach is almost identical to that used to find minimum circumradius sets. <p> Equivalently, the variance is the sum of the squares of the distances from each point to the centroid of the set <ref> [2] </ref>. 14 D. Eppstein and J. Erickson Lemma 5.8. If a point p is in the minimum variance k-point set, then the set is contained in the O (k d=2+1 ) rectilinear nearest neighbors of p. <p> We can partition this hypercube into O (k d=2 ) hypercubes of width 2R p 2=dk, and thus of circumradius R p 2=k. If any of these spheres contain k points, their variance is at most 2R 2 , which is less than V . 2 Aggarwal et al. <ref> [2] </ref> prove that the minimum variance k-point set corresponds to one of the cells in the kth order Voronoi diagram of the original n points and derive an algorithm that uses time O (n log n+k 2 n) in the plane. <p> Then the set is contained in the O (ck (d+1)=2 ) nearest Euclidean neighbors of p. Proof: Let S be the sphere, centered at the optimal set's centroid, which just contains the set, and let R be the radius of S. S contains exactly k points <ref> [2] </ref>. Then S is contained in a sphere centered at p with radius R + 2c p V =k. <p> To find minimum variance sets in higher dimensions, we use Mulmuley's algorithm as a subroutine within each neighbor set. We improve the previous time bound of O (n d+1 ) <ref> [2] </ref>. Theorem 5.8. <p> Then, given a set of n points in IR d , we can find the k-point subset minimizing , in time O (n r+1 + n r f (m)). 2 We know of no fully polynomial time algorithm to find minimum volume or boundary measure sets, except in the plane <ref> [2, 14, 20] </ref>. A nave algorithm runs in time O ( n k bd=2c ), by explicitly computing the convex hull of every k-point subset [5]. We use this algorithm as a subroutine. <p> Similarly, we have been unable to generalize our minimum diameter algorithm, or the earlier algorithms of Aggarwal et al. <ref> [2] </ref>, into higher dimensions. Are there faster algorithms for finding nearest neighbors? An efficient technique for finding neighbors of (d 2)-flats might also lead to a faster minimum boundary measure algorithm. <p> The resulting algorithms all follow the algebraic decision tree model of computation. In fact, we can improve the performance of our variance algorithm by substituting the new neighbor algorithm for Vaidya's. The new algorithm is faster than the one described by Aggarwal et al. <ref> [2] </ref> for all values of k. Theorem 12.1.
Reference: [3] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Sorting in c log n parallel steps. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <address> 1983. 30 D. </address> <note> Eppstein and J. Erickson </note>
Reference-contexts: Thus, the total time is O (n d log 2 n) in general, and O (n 2 log n) in the plane. The parametric search technique requires the construction of an AKS sorting network <ref> [3] </ref> with O (n d ) inputs, one for each processor used by the parallel implementation of the fixed-parameter algorithm. This network can be built in time and space O (n d log n) [3]. 2 Lemma 5.3. <p> The parametric search technique requires the construction of an AKS sorting network <ref> [3] </ref> with O (n d ) inputs, one for each processor used by the parallel implementation of the fixed-parameter algorithm. This network can be built in time and space O (n d log n) [3]. 2 Lemma 5.3. If a point p is in the minimum circumradius k-point set, then the set is contained in the O (k) rectilinear nearest neighbors of p. Proof: Let R be the optimal circumradius.
Reference: [4] <author> J. L. Bentley and J. B. Saxe. </author> <title> Decomposable searching problems I: Static-to-dynamic transformation. </title> <journal> J. Algorithms, </journal> <volume> 1 </volume> <pages> 301-358, </pages> <year> 1980. </year>
Reference-contexts: Proof: We apply a standard dynamic-to-static reduction technique for decomposable searching problems <ref> [4] </ref> to the rectilinear nearest neighbor data structure of Lemma 3.3. 2 Theorem 6.1.
Reference: [5] <author> B. Chazelle. </author> <title> An optimal convex hull algorithm and new results on cuttings. </title> <booktitle> In 32nd IEEE Symp. Found. Comput. Sci., </booktitle> <pages> pages 29-38, </pages> <year> 1991. </year>
Reference-contexts: A nave algorithm runs in time O ( n k bd=2c ), by explicitly computing the convex hull of every k-point subset <ref> [5] </ref>. We use this algorithm as a subroutine. Throughout this section, we let jAj and j@Aj denote the volume and boundary measure of the convex hull of A. The following lemma relates the volumes of bounding boxes and extremal simplices. Lemma 9.2.
Reference: [6] <author> B. Chazelle and H. Edelsbrunner. </author> <title> An improved algorithm for constructing k th -order Voronoi diagrams. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-36:1349-1354, </volume> <year> 1987. </year>
Reference-contexts: For larger values of k, Agarwal and Matousek's Voronoi diagram algorithm is faster. Finally, for k = (n 1" ), the fastest algorithm is based on another Voronoi algorithm of Chazelle and Edelsbrunner <ref> [6] </ref> and runs in time O (n 2 log 2 n).
Reference: [7] <author> B. Chazelle, L. J. Guibas, and D. T. Lee. </author> <title> The power of geometric duality. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 76-90, </pages> <year> 1985. </year>
Reference-contexts: This observation was used to develop O (n 2 ) algorithms for the minimum triangle problem <ref> [7, 16, 15] </ref>. We can tighten this characterization as follows. Let 4pqr be the minimum area triangle, and assume that the vertical projection of r is between those of p and q.
Reference: [8] <author> B. M. Chazelle and D. T. Lee. </author> <title> On a circle placement problem. </title> <journal> Computing, </journal> <volume> 36 </volume> <pages> 1-16, </pages> <year> 1986. </year>
Reference-contexts: Thus, the entire sweep algorithm takes time O (n d log n). In the plane, we can solve this problem in time and space O (n 2 ), using a more complicated algorithm developed by Chazelle and Lee <ref> [8] </ref>. To find minimum circumradius sets, we apply parametric searching with Cole's weighted median strategy [10]. Our sweep algorithm can be parallelized to run in O (log n) steps on O (n d ) processors.
Reference: [9] <author> B. Chazelle, M. Sharir, and E. Welzl. </author> <title> Quasi-optimal upper bounds for simplex range searching and new zone theorems. </title> <booktitle> In 6th ACM Symp. Comput. Geom., </booktitle> <pages> pages 23-33, </pages> <year> 1990. </year>
Reference-contexts: set of n points in IR d , in time and space O (n d = log d1 n), so that the k nearest neighbors to a query hyperplane can be found in time O (k log n). 2 We make use of a technique developed by Chazelle et al. <ref> [9] </ref> for answering simplex range queries. Given a data structure used to answer some arbitrary geometric Nearest Neighbors and Minimal Polytopes 25 query, they build on top of it another structure, called a partition tree, that limits the query to the points within an arbitrary halfspace.
Reference: [10] <author> R. Cole. </author> <title> Slowing down sorting networks to obtain faster sorting algorithms. </title> <journal> J. ACM, </journal> <volume> 34 </volume> <pages> 200-208, </pages> <year> 1987. </year>
Reference-contexts: In the plane, we can solve this problem in time and space O (n 2 ), using a more complicated algorithm developed by Chazelle and Lee [8]. To find minimum circumradius sets, we apply parametric searching with Cole's weighted median strategy <ref> [10] </ref>. Our sweep algorithm can be parallelized to run in O (log n) steps on O (n d ) processors. Thus, the total time is O (n d log 2 n) in general, and O (n 2 log n) in the plane.
Reference: [11] <author> H. P. Croft, K. J. Falconer, and R. K. Guy. </author> <title> Unsolved Problems in Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Erd-os and Szekeres also conjecture that ES 2 (k) = 2 k2 + 1 and prove that this is a lower bound. Tightening the bounds on this function remains one of the outstanding open problems in combinatorial geometry <ref> [11] </ref>. We know of no bounds on ES d (k) other than those stated here, but it is clear that the function decreases with increasing d. Clearly, any reduction of the upper bound on ES d (k) would speed up our algorithms.
Reference: [12] <author> A. Datta, H.-P. Lenhof, C. Schwarz, and M. Smid. </author> <title> Static and dynamic algorithms for k-point clustering problems. </title> <type> Report MPI-I-93-108, </type> <institution> Max-Planck-Institut Inform., Saarbrucken, Germany, </institution> <year> 1993. </year> <note> To appear in Proc. 3nd Workshop Algorithms Data Struct. </note>
Reference-contexts: Theorem 12.1. We can find the minimum variance k-point subset of a set of n points in the plane, in time O (n log n + k 3=2+" n) and space O (kn + k 5=2 ). 2 Very recently, Datta et al. <ref> [12] </ref> developed new algorithms for each of the problems we discuss in Section 5, except variance, using a search technique developed by Lenhof and Smid [27] that does not require the computation of nearest neighbors and follows the algebraic decision tree model.
Reference: [13] <author> M. T. Dickerson and R. L. Drysdale and J. R. Sack. </author> <title> Simple algorithm for enumerating interpoint distances and finding k nearest neighbors. </title> <journal> Internat. J. Comput. Geom. Appl. </journal> <volume> 2 </volume> <pages> 221-239, </pages> <year> 1993. </year>
Reference-contexts: Finally, is it possible to find rectilinear neighbors of points in higher dimensions in o (mn log n) time? 12 Recent Results Dickerson et al. <ref> [13] </ref> describe an algorithm for finding k nearest neighbors in the plane, under any metric, in time O (n log n + kn log k) and space O (n).
Reference: [14] <author> D. P. Dobkin, R. L. Drysdale, and L. J. Guibas. </author> <title> Finding smallest polygons. </title> <editor> In F. P. Preparata, editor, </editor> <booktitle> Computational Geometry, volume 1 of Advances in Computing Research, </booktitle> <pages> pages 181-214. </pages> <publisher> JAI Press, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion <ref> [2, 14, 20] </ref>. Criteria that have been studied include diameter [2], variance [2], area of the convex hull [20], convex hull perimeter [14, 20], and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. <p> 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion [2, 14, 20]. Criteria that have been studied include diameter [2], variance [2], area of the convex hull [20], convex hull perimeter <ref> [14, 20] </ref>, and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. We study and improve known algorithms for these problems. <p> Eppstein and J. Erickson Many of these problems were previously solved using the following method, originally developed by Dobkin et al. <ref> [14] </ref>. An ad hoc algorithm was determined, with time bounded by a polynomial O (n c ). Then, it was shown that the optimum k-point set is contained in the set of points labeling a single region of the order-O (k) Voronoi diagram. <p> Our results are summarized in the first column of Table 1. We improve all previous results <ref> [2, 14, 20] </ref>, except for variance and area, which we improve for certain values of k. * We maintain minimal point sets in the plane as points are inserted, under a variety of "one-dimensional" measures. Our results are summarized in the second column of Table 1. <p> The problem is to find, given a set of n points in the plane, a set of k points for which the perimeter of the convex hull is minimized. This was previously solved in O (k 2 n log n + k 5 n) time by Dobkin et al. <ref> [14] </ref>; this can be improved to O (n log n + k 4 n) using the techniques of Aggarwal et al. [2] Both algorithms use a dynamic programming algorithm, requiring time O (kn 3 ) and space O (kn), as a subroutine within each region of a certain high order Voronoi <p> can be improved to O (n log n + k 4 n) using the techniques of Aggarwal et al. [2] Both algorithms use a dynamic programming algorithm, requiring time O (kn 3 ) and space O (kn), as a subroutine within each region of a certain high order Voronoi diagram <ref> [14] </ref>. We will use this algorithm as a subroutine within each set of nearest neighbors. Lemma 5.1. If a point p is in the minimum perimeter k-point set, then the set is contained in the O (k) nearest rectilinear neighbors of p. <p> Proof: This is a direct application of the two-dimensional case of Lemma 4.2. We have m = O (k) by the previous lemma, and T (m) = O (km 3 ) and S (m) = O (km) from <ref> [14] </ref>. 2 This algorithm generalizes to minimize perimeter in any metric, but we can do better in L 1 . The minimum L 1 perimeter k-point set is the set enclosable in the minimum perimeter axis-aligned rectangle. <p> Then, given a set of n points in IR d , we can find the k-point subset minimizing , in time O (n r+1 + n r f (m)). 2 We know of no fully polynomial time algorithm to find minimum volume or boundary measure sets, except in the plane <ref> [2, 14, 20] </ref>. A nave algorithm runs in time O ( n k bd=2c ), by explicitly computing the convex hull of every k-point subset [5]. We use this algorithm as a subroutine. <p> Our results suggest several open problems. None of our results is known to be optimal. Faster algorithms, or matching lower bounds, would be interesting. In particular, is it possible to find higher-dimensional k-point sets with minimum diameter, volume, or boundary measure without resorting to brute force? Dobkin et al. <ref> [14] </ref> and Eppstein et al. [20] present dynamic programming algorithms which can be used to solve a variety of minimum and maximum measure problems in the plane, but it seems highly unlikely that their approach can be adapted to higher Nearest Neighbors and Minimal Polytopes 29 dimensional problems.
Reference: [15] <author> H. Edelsbrunner and L. J. Guibas. </author> <title> Topologically sweeping an arrangement. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 38 </volume> <pages> 165-194, </pages> <year> 1989. </year>
Reference-contexts: This observation was used to develop O (n 2 ) algorithms for the minimum triangle problem <ref> [7, 16, 15] </ref>. We can tighten this characterization as follows. Let 4pqr be the minimum area triangle, and assume that the vertical projection of r is between those of p and q. <p> New results for finding minimum measure convex k-gons, given n points in the plane. (Compare Table 1.) Proof: The minimum circumradius convex k-point set is contained in the O (4 k ) nearest neighbors to each of its points. Edelsbrunner and Guibas <ref> [15] </ref> describe an algorithm that finds, given a set of n points, the largest (cardinality) convex subset that includes a given leftmost point, in time O (n 2 ) and space O (n).
Reference: [16] <author> H. Edelsbrunner, J. O'Rourke, and R. Seidel. </author> <title> Constructing arrangements of lines and hyperplanes with applications. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 341-363, </pages> <year> 1986. </year>
Reference-contexts: This observation was used to develop O (n 2 ) algorithms for the minimum triangle problem <ref> [7, 16, 15] </ref>. We can tighten this characterization as follows. Let 4pqr be the minimum area triangle, and assume that the vertical projection of r is between those of p and q.
Reference: [17] <author> D. Eppstein. </author> <title> New algorithms for minimum area k-gons. </title> <booktitle> In 3rd ACM-SIAM Symp. Discrete Algorithms, </booktitle> <pages> pages 83-88, </pages> <year> 1992. </year>
Reference-contexts: Our methods further generalize to higher dimensional versions of these problems. Our techniques apply to all of the problems cited above. fl Portions of this paper were presented at the 3rd and 4th ACM-SIAM Symposia on Discrete Algorithms <ref> [17, 19] </ref>. This paper includes work done while Jeff Erickson was at the University of California at Irvine.
Reference: [18] <author> D. Eppstein. </author> <title> Persistence, o*ine algorithms, and space compaction. </title> <type> Technical Report 91-54, </type> <institution> Dept. Information and Comput. Sci., </institution> <address> U. C. Irvine, </address> <year> 1991. </year>
Reference-contexts: We would like our data structure to reconstruct the state of this list at each time in the sweep. This is a persistent o*ine data structure problem <ref> [18] </ref>, in which we perform a number of updates (insertions into a linked list) and must then query different versions of the data structure (the list at different times in the sweep).
Reference: [19] <author> D. Eppstein and J. Erickson. </author> <title> Iterated nearest neighbors and finding minimal polytopes. </title> <booktitle> In 4th ACM-SIAM Symp. Discrete Algorithms, </booktitle> <pages> pages 64-73, </pages> <year> 1992. </year>
Reference-contexts: Our methods further generalize to higher dimensional versions of these problems. Our techniques apply to all of the problems cited above. fl Portions of this paper were presented at the 3rd and 4th ACM-SIAM Symposia on Discrete Algorithms <ref> [17, 19] </ref>. This paper includes work done while Jeff Erickson was at the University of California at Irvine.
Reference: [20] <author> D. Eppstein, M. Overmars, G. Rote, and G. Woeginger. </author> <title> Finding minimum area k-gons. </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 </volume> <pages> 45-58, </pages> <year> 1992. </year> <title> Nearest Neighbors and Minimal Polytopes 31 </title>
Reference-contexts: 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion <ref> [2, 14, 20] </ref>. Criteria that have been studied include diameter [2], variance [2], area of the convex hull [20], convex hull perimeter [14, 20], and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. <p> 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion [2, 14, 20]. Criteria that have been studied include diameter [2], variance [2], area of the convex hull <ref> [20] </ref>, convex hull perimeter [14, 20], and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. We study and improve known algorithms for these problems. <p> 1 Introduction A number of recent papers have discussed problems of selecting, from a set of n points, the k points optimizing some particular criterion [2, 14, 20]. Criteria that have been studied include diameter [2], variance [2], area of the convex hull [20], convex hull perimeter <ref> [14, 20] </ref>, and rectilinear diameter and perimeter [2]. Such problems are useful in clustering, line detection, statistical data analysis, and other geometric applications. We study and improve known algorithms for these problems. <p> Our results are summarized in the first column of Table 1. We improve all previous results <ref> [2, 14, 20] </ref>, except for variance and area, which we improve for certain values of k. * We maintain minimal point sets in the plane as points are inserted, under a variety of "one-dimensional" measures. Our results are summarized in the second column of Table 1. <p> We derive time bounds with the same dependence on n as the corresponding k-point set algorithms, but with an exponential dependence on k. We know of no previous results for these problems, except for a O (kn 3 ) time bound on finding minimum area or perimeter k-gons <ref> [20] </ref>, which we improve for small k. 3 Rectilinear Nearest Neighbors We begin by describing a data structure for finding m rectilinear nearest neighbors in the plane. <p> Eppstein and J. Erickson seven nearest neighbors have a five-point subset in one parallelogram. 8 Minimizing Area We now describe how to use the data structure of the previous section to find k-point sets with minimum area convex hulls. The problem was previously solved by Eppstein et al. <ref> [20] </ref> in time O (kn 3 ) and space O (kn 2 ). Lemma 8.1. <p> That gives us a set of 4k 6 points, in which we can find the minimum k-point set in time O (k 4 ) using the algorithm of Eppstein et al. <ref> [20] </ref>. Thus we achieve a total time of O (n 2 log n + k 4 n 2 ). The O (k 4 ) term in this bound can be improved. <p> find the minimum area k-point subset of a set of n points in the plane, in time O (n 2 log n + k 3 n 2 ) and space O (n log n + k 3 ). 2 This improves the previous time bound of O (kn 3 ) <ref> [20] </ref> whenever k = O ( p Our space bound is always an improvement over the previous O (kn 2 ) [20]. 9 Minimizing Volume and Boundary Measure In this section, we demonstrate a natural generalization of our minimum area algorithm to arbitrary dimensions. <p> n + k 3 n 2 ) and space O (n log n + k 3 ). 2 This improves the previous time bound of O (kn 3 ) <ref> [20] </ref> whenever k = O ( p Our space bound is always an improvement over the previous O (kn 2 ) [20]. 9 Minimizing Volume and Boundary Measure In this section, we demonstrate a natural generalization of our minimum area algorithm to arbitrary dimensions. We also generalize our results for finding minimum perimeter sets in the plane. Let T be some r-dimensional polytope in IR d , with r &lt; d. <p> Then, given a set of n points in IR d , we can find the k-point subset minimizing , in time O (n r+1 + n r f (m)). 2 We know of no fully polynomial time algorithm to find minimum volume or boundary measure sets, except in the plane <ref> [2, 14, 20] </ref>. A nave algorithm runs in time O ( n k bd=2c ), by explicitly computing the convex hull of every k-point subset [5]. We use this algorithm as a subroutine. <p> Proof: The minimum perimeter convex k-gon is contained in the O (4 k ) nearest neighbors to each of its points. We can use the dynamic programming algorithm of Eppstein et al. <ref> [20] </ref> to find minimum perimeter convex k-gons in time O (kn 3 ) and space O (n 2 ). <p> Proof: The minimum area convex k-point sets is contained in the O (4 k ) nearest vertical neighbors to the segment joining its leftmost and rightmost points. We can use the dynamic programming algorithm of Eppstein et al. <ref> [20] </ref> to find minimum area convex k-gons in time O (kn 3 ) and space O (n 2 ). As in the k-point set problem, we can reduce the time complexity by combining j-gons, j &lt; k, from each side of each segment p L p R . <p> We have also presented versions of our algorithms which maintain minimum measure sets as points are inserted and versions which find, or dynamically maintain, minimum measure convex sets. Eppstein et al. <ref> [20] </ref> also consider the problem of finding minimal empty convex polygons. Unfortunately, our methods do not suffice to solve this problem, except for a few special cases. <p> None of our results is known to be optimal. Faster algorithms, or matching lower bounds, would be interesting. In particular, is it possible to find higher-dimensional k-point sets with minimum diameter, volume, or boundary measure without resorting to brute force? Dobkin et al. [14] and Eppstein et al. <ref> [20] </ref> present dynamic programming algorithms which can be used to solve a variety of minimum and maximum measure problems in the plane, but it seems highly unlikely that their approach can be adapted to higher Nearest Neighbors and Minimal Polytopes 29 dimensional problems.
Reference: [21] <author> P. Erd-os and G. Szekeres. </author> <title> A combinatorial problem in geometry. </title> <journal> Compositio Math., </journal> <volume> 2 </volume> <pages> 463-470, </pages> <year> 1935. </year>
Reference-contexts: In dimension d, even first order Voronoi diagrams can have complexity (n dd=2e ); whereas, the nearest neighbors can still be found in time O (n log n) using Vaidya's algorithm [34]. Finally, by applying an old combinatorial result of Erd-os and Szekeres <ref> [21] </ref>, we can generalize our techniques to find minimum measure convex polygons and polytopes. A variant of our technique also yields new algorithms for finding minimum area k-point sets in the plane, or minimum boundary measure or volume k-point sets in arbitrary dimensions. <p> Such results are given by Ramsey theory [24]; indeed, the following was one of the seminal results in the development of both Ramsey theory and combinatorial geometry. Lemma 10.1 (Erd-os and Szekeres <ref> [21] </ref>). Given a set of ES 2 (k) 2k4 points in general position in the plane, some k points form the vertices of a convex polygon. 2 Lemma 10.2.
Reference: [22] <author> G. N. Frederickson and D. B. Johnson. </author> <title> The complexity of selection and ranking in X + Y and matrices with sorted rows and columns. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 24 </volume> <pages> 197-208, </pages> <year> 1982. </year>
Reference-contexts: We binary search through M for the optimal diameter. Since the rows and columns of M are sorted, we can select any element in time O (n log n) <ref> [22] </ref>. Thus, each step of the search is dominated by Overmars and Yap's algorithm, and the entire search requires time O (n d=2 log 2 n). 2 Theorem 5.6.
Reference: [23] <author> F. W. Fredman and D. E. Willard. </author> <title> Trans-dichotomous algorithms for minimum spanning trees and shortest paths. </title> <booktitle> In 31st IEEE Symp. Found. Comput. Sci., </booktitle> <pages> pages 719-725, </pages> <year> 1990. </year>
Reference-contexts: Each insert or delete can be performed with O (1) steps of integer arithmetic on a random access machine, as can the operation of moving from one element to the next in a given version of the list. 2 By analogy to the atomic heaps of Fredman and Willard <ref> [23] </ref> we call this data structure an atomic list. This completes the description of each slab, which we summarize below. Lemma 3.2. <p> We reduce this to m neighbors using a linear time selection algorithm. Using a global list of all points, sorted by x + y, we can represent priorities as O (log n)-bit integers, so we can perform priority queue operations in O (1) time using atomic heaps <ref> [23] </ref>. Lemma 3.3. For any fixed m, we can preprocess a set of n points in the plane, in time and space O (n log n), so that the m nearest rectilinear neighbors to any query point can be found in time O (m + log n). <p> This selection can be performed in constant time per operation, using atomic heaps <ref> [23] </ref>. Theorem 7.1. Given n points, we can enumerate all point sets found as the k nearest vertical neighbors of each segment formed by a pair of points, in total time O (n 2 log n + kn 2 ) and space O (n log n).
Reference: [24] <author> R. L. Graham, B. L. Rothschild, and J. H. Spencer. </author> <title> Ramsey Theory. </title> <publisher> John Wiley & Sons, </publisher> <address> Second edition, </address> <year> 1990. </year>
Reference-contexts: We cannot apply this technique directly, since k points contained in some convex body obviously do not necessarily form a convex set. Hence we need a result of the form that, if enough points are given, some k-point subset will be convex. Such results are given by Ramsey theory <ref> [24] </ref>; indeed, the following was one of the seminal results in the development of both Ramsey theory and combinatorial geometry. Lemma 10.1 (Erd-os and Szekeres [21]).
Reference: [25] <author> J. Hershberger and S. Suri. </author> <title> Finding tailored partitions. </title> <booktitle> In 5th ACM Symp. Comput. Geom., </booktitle> <pages> pages 255-265, </pages> <year> 1989. </year>
Reference-contexts: As noted by Aggarwal et al. [2], these operations can be performed in O (log n) amortized time and linear space using the circular hull data structure of Hershberger and Suri <ref> [25] </ref>. We start the labeling process by marking each unmatched point as even (it has a zero length path to an unmatched point). We build the data structure above, letting P consist of all unmarked points (initially, that is simply the matched points).
Reference: [26] <author> J. D. Horton. </author> <title> Sets with no empty convex 7-gons. </title> <journal> Canad. Math. Bull., </journal> <volume> 26 </volume> <pages> 482-484, </pages> <year> 1983. </year>
Reference-contexts: However, it is open whether there is a largest set with no empty convex hexagon (see, for example, [31]), and there are arbitrarily large point sets that contain no empty convex heptagons <ref> [26] </ref>. We know of no similar results in higher dimensions. Our results suggest several open problems. None of our results is known to be optimal. Faster algorithms, or matching lower bounds, would be interesting.
Reference: [27] <author> H.-P. Lenhof and M. Smid. </author> <title> Enumerating the k closest pairs optimally. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 380-386, </pages> <year> 1992. </year>
Reference-contexts: plane, in time O (n log n + k 3=2+" n) and space O (kn + k 5=2 ). 2 Very recently, Datta et al. [12] developed new algorithms for each of the problems we discuss in Section 5, except variance, using a search technique developed by Lenhof and Smid <ref> [27] </ref> that does not require the computation of nearest neighbors and follows the algebraic decision tree model. In the plane, their algorithms use the same time and less space than the solutions we present here; in higher dimensions, they improve both both time and space bounds.
Reference: [28] <author> J. Matousek. </author> <title> On vertical ray-shooting in arrangements. </title> <journal> Comput. Geom. Theory. Appl., </journal> <volume> 2 </volume> <pages> 279-285, </pages> <year> 1993. </year>
Reference-contexts: Vertical point-hyperplane distances in the dual space are the same as the corresponding vertical hyperplane-point distances in the primal space. Thus, we can solve this problem by vertical ray-shooting in the dual space. We will use the following result of Matousek <ref> [28] </ref>. Lemma 9.6 (Matousek [28]). <p> Vertical point-hyperplane distances in the dual space are the same as the corresponding vertical hyperplane-point distances in the primal space. Thus, we can solve this problem by vertical ray-shooting in the dual space. We will use the following result of Matousek <ref> [28] </ref>. Lemma 9.6 (Matousek [28]).
Reference: [29] <author> N. Megiddo. </author> <title> Applying parallel computation algorithms in the design of serial algorithms. </title> <journal> J. ACM, </journal> <volume> 30 </volume> <pages> 852-865, </pages> <year> 1983. </year>
Reference-contexts: Consider the related problem of placing a fixed-size sphere so that it covers the maximum number of a given set of points. Once we have a solution to this problem, we can apply Megiddo's parametric search technique <ref> [29] </ref> to find the smallest sphere whose optimal placement covers k (or more) points. Lemma 5.2.
Reference: [30] <author> K. Mulmuley. </author> <title> Output sensitive construction of levels and Voronoi diagrams in R d of order 1 to k. </title> <booktitle> In 22nd ACM Symp. Theory Comput., </booktitle> <pages> pages 322-330, </pages> <year> 1990. </year>
Reference-contexts: Mulmuley describes an algorithm that constructs the kth order Voronoi diagram of a set of n points in IR d , in time O (k d d+1 2 e n b d+1 2 c log n+k d n 2 ) <ref> [30] </ref>. To find minimum variance sets in higher dimensions, we use Mulmuley's algorithm as a subroutine within each neighbor set. We improve the previous time bound of O (n d+1 ) [2]. Theorem 5.8.
Reference: [31] <author> M. H. Overmars, B. Scholten, and I. Vincent. </author> <title> Sets without empty convex 6-gons. </title> <journal> Bull. EATCS, </journal> <volume> 37:160, </volume> <year> 1989. </year>
Reference-contexts: However, it is open whether there is a largest set with no empty convex hexagon (see, for example, <ref> [31] </ref>), and there are arbitrarily large point sets that contain no empty convex heptagons [26]. We know of no similar results in higher dimensions. Our results suggest several open problems. None of our results is known to be optimal. Faster algorithms, or matching lower bounds, would be interesting.
Reference: [32] <author> M. H. Overmars and C.-K. Yap. </author> <title> New upper bounds in Klee's measure problem. </title> <journal> SIAM J. Comput., </journal> <volume> 20 </volume> <pages> 1034-1045, </pages> <year> 1991. </year>
Reference-contexts: Proof: Finding the optimal placement of a hypercube is equivalent to finding the deepest point in an arrangement of hypercubes. We can easily adapt an algorithm of Overmars and Yap <ref> [32] </ref>, originally applied to Klee's measure problem, to find the deepest point in an arrangement of axis-aligned boxes in time O (n d=2 log n) and space O (n d=2 ). To find the optimal hypercube size, we search along each coordinate axis as follows.
Reference: [33] <author> M. Smid. </author> <title> Maintaining the minimal distance of a point set in polylogarithmic time. </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 </volume> <pages> 415-431, </pages> <year> 1992. </year>
Reference-contexts: They also present faster algorithms for maintaining the optimal set as points are inserted, and new algorithms for maintaining the optimal set as points are inserted and deleted, using techniques developed by Smid <ref> [33] </ref>. Their dynamic algorithms work efficiently in all dimensions.
Reference: [34] <author> P. M. Vaidya. </author> <title> An O(n log n) algorithm for the all-nearest-neighbors problem. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 101-115, </pages> <year> 1989. </year> <note> Received July 15, 1992, and in revised form June ?, 1993. </note>
Reference-contexts: Third, our time bounds can be improved in a different way. The k nearest neighbors can be found in time O (kn log n), using Vaidya's algorithm <ref> [34] </ref>. For the rectilinear (L 1 or L 1 ) metric, we further improve this to O (n log n+kn) on a random access machine. Thus we get faster time bounds in the plane, even for problems such as circumradius for which the reduction to Voronoi diagrams is immediate. <p> Fifth, our approach generalizes to higher dimensions in a way that does not work for Voronoi diagrams. In dimension d, even first order Voronoi diagrams can have complexity (n dd=2e ); whereas, the nearest neighbors can still be found in time O (n log n) using Vaidya's algorithm <ref> [34] </ref>. Finally, by applying an old combinatorial result of Erd-os and Szekeres [21], we can generalize our techniques to find minimum measure convex polygons and polytopes. <p> points. 2 New Results We present algorithms for the following problems. * We find the k nearest rectilinear (L 1 or L 1 ) neighbors to each of a set of n points in the plane, in time O (n log n+kn), improving the previous O (kn log n) bound <ref> [34] </ref>. * We find the k nearest vertical neighbors to each of the O (n 2 ) line segments determined by pairs of points in an n-point set, in total time O (kn 2 +n 2 log n). * Given a set of n points in the plane, we find the <p> Proof: By our results above, the rectilinear nearest neighbors can be found in time O (n log n + mn) and space O (n log n) in the plane. In higher dimensions, we use Vaidya's algorithm <ref> [34] </ref>. We only call the ad hoc algorithm when the neighbor sphere contains k or more points, and those points are immediately discarded. Thus, the ad hoc algorithm is called at most dn=ke times, each time on a set of size O (m) by the previous lemma.
References-found: 34

