URL: ftp://ftp.cs.washington.edu/tr/1995/03/UW-CSE-95-03-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: Simultaneous Place and Route for Wire-Constrained FPGAs  
Author: Darren C. Cronquist 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report 95-03-01 March, 1995 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. F. Beetem, </author> <title> "Simultaneous Placement and Routing of the LABYRINTH Reconfigurable Logic Array," </title> <booktitle> The International Workshop on Field Programmable Logic and Applications, </booktitle> <year> 1991, </year> <pages> pp. 232-243. </pages>
Reference-contexts: To take advantage of this interdependency, research has focused on merging these tools into one cohesive unit. In 1991, Beetem introduced a Penalty-Driven Iterative Improvement scheme for simultaneously placing and routing FPGAs containing cells used for both logic and routing <ref> [1] </ref>. In 1992, Schlag et al. presented a routability-driven algorithm for technology mapping of LUT-based FPGAs [9]. In 1993, Nag and Roy introduced an incremental placer for row-based FPGAs which analyzes post-layout timing and routability information to obtain better placements [8].
Reference: [2] <author> S. Hauck, G. Borriello, and C. Ebeling, "TRIPTYCH: </author> <title> An FPGA Architecture with Integrated Logic and Routing," </title> <booktitle> Proceedings of the 1992 Conference on Advanced Research in VLSI and Parallel Systems, </booktitle> <month> March </month> <year> 1992, </year> <pages> pp. 26-43. </pages>
Reference-contexts: As a result, tests are run on two versions of a highly wire-constrained FPGA, Triptych <ref> [2] </ref>. Both arrays are 4 fi 16, have 64 RLBs (routing and logic blocks), one 3-input LUT per RLB, one latch per RLB, 16 vertical segmented buses in each column, and nearest neighbor connections.
Reference: [3] <author> M. D. Huang, F. Romeo, and A. Sangiovanni-Vincentelli, </author> <title> "An Efficient General Cooling Schedule for Simulated Annealing," </title> <booktitle> IEEE International Conference on Computer-Aided Design, </booktitle> <year> 1986, </year> <pages> pp. 381-384. </pages>
Reference-contexts: All three annealers use a cooling schedule that performs a least squares approximation to predict the largest temperature drop that lowers the average cost by no more than a standard deviation <ref> [3] </ref>. A result of this method is that the number of iterations (swapings) per temperature drop is directly related to the run time of the algorithm. Hence, in order to vary the run times, the experiments parameterize the number of iterations.
Reference: [4] <author> R. M. Karp, </author> <title> "Reducibility Among Combinatorial Problems," </title> <editor> in R. E. Miller and J. W. Thatcher (eds.) </editor> <title> Complexity of Computer Computations, </title> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1972, </year> <pages> pp. 85-103. </pages>
Reference-contexts: The set of points in this subtree are steiner points and will be denoted by S. Karp proved this problem to be NP-hard for undirected graphs <ref> [4] </ref>, and hence no polynomial time solution is known to exist.
Reference: [5] <author> S. Kirkpatrick, C. Gelatt, and M. Vecchi, </author> <title> "Optimization by Simulated Annealing," </title> <journal> Science, </journal> <volume> 220/4598, </volume> <year> 1983, </year> <pages> pp. 671-680. </pages>
Reference-contexts: This paper introduces a simulated annealing based placement algorithm for wire-constrained FP-GAs which uses fast but informative routes during placement to incorporate wirability information into the cost function. Simulated annealing, introduced by Kirkpatrick et al. in 1983 <ref> [5] </ref>, is an algorithmic technique used to solve optimization problems. Applications of this process to placement have been well-studied [11] and have been shown to produce good results at the cost of long run times.
Reference: [6] <author> L. McMurchie, C. Ebeling, and G. Borriello, </author> <title> "An Architecture-Adaptive, Performance-Driven Router for FPGAs," </title> <type> TR #94-05-01, </type> <institution> University of Washington, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Hence, in order to vary the run times, the experiments parameterize the number of iterations. Once the three annealers have finished, all final placements are routed on a performance-driven negotiation based router <ref> [6] </ref>. benchmark (described in section 4.3). The leftmost grid shows how Semi, without knowledge of the routing resources, simply tries to place all of the signals as close together as possible.
Reference: [7] <author> D. Mitra, F. Romeo, and A. L. Sangiovanni-Vincentelli, </author> <title> "Convergence and Finite-time Behavior of Simluated Annealing," </title> <booktitle> Proceedings of the 24th Conference on Decision and Control, </booktitle> <year> 1985, </year> <pages> pp. 761-767. </pages>
Reference-contexts: By the time the temperature reaches zero, a value close to the global minimum is reached. As a matter of fact, with a properly chosen cooling schedule and a sufficient amount of execution time, the simulated annealing process is guaranteed to yield a global minimum <ref> [7] </ref>. Success of a simulated annealing-based placement algorithm is dependent on the cost function's ability to accurately evaluate the routability of the current placement.
Reference: [8] <author> S. Nag and K. Roy, </author> <title> "Iterative Wirability and Performance Improvement for FPGAs," </title> <booktitle> Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <year> 1993, </year> <pages> pp. 321-325. </pages>
Reference-contexts: In 1992, Schlag et al. presented a routability-driven algorithm for technology mapping of LUT-based FPGAs [9]. In 1993, Nag and Roy introduced an incremental placer for row-based FPGAs which analyzes post-layout timing and routability information to obtain better placements <ref> [8] </ref>. In 1994, Togawa et al. proposed a method for the simultaneous place and route of symmetrical FPGAs based on hierarchical bi-partitioning [13]. <p> Finally, the rightmost grid shows how MST-SPAR achieves a combination of these two extremes 8 out1 <ref> [8] </ref> [15] [31] [32] out2 [16] [37] [12] [8] out7 [47] [13] [16] nn10 [22] [29] nn10 out1 [44] [40] [37] out0 [17] out3 out0 [15] nn70 nn7 out6 [39] [34] nn70 out2 [13] out6 [29] out4 [32] [45] [47] [37] [40] [31] [36] out6 out7 [44] out2 [18] [32] [45] <p> Finally, the rightmost grid shows how MST-SPAR achieves a combination of these two extremes 8 out1 <ref> [8] </ref> [15] [31] [32] out2 [16] [37] [12] [8] out7 [47] [13] [16] nn10 [22] [29] nn10 out1 [44] [40] [37] out0 [17] out3 out0 [15] nn70 nn7 out6 [39] [34] nn70 out2 [13] out6 [29] out4 [32] [45] [47] [37] [40] [31] [36] out6 out7 [44] out2 [18] [32] [45] [40] [8] by having several dense areas interspersed <p> [31] [32] out2 [16] [37] [12] <ref> [8] </ref> out7 [47] [13] [16] nn10 [22] [29] nn10 out1 [44] [40] [37] out0 [17] out3 out0 [15] nn70 nn7 out6 [39] [34] nn70 out2 [13] out6 [29] out4 [32] [45] [47] [37] [40] [31] [36] out6 out7 [44] out2 [18] [32] [45] [40] [8] by having several dense areas interspersed with empty RLBs. For the three anneals in figure 4, Semi's placement didn't come close to routing (the router's lowest number of wire conflicts was nine), Trip3's placement routed with a delay of 58.5ns, and MST-SPAR's placement routed with a delay of 49.5ns.
Reference: [9] <author> M. Schlag, J. Kong, and P. Chan, </author> <title> "Routability-Driven Technology Mapping for LookUp Table-Based FPGAs," </title> <type> TR #UCSC-CRL-92-06, </type> <institution> University of California at Santa Cruz, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: In 1991, Beetem introduced a Penalty-Driven Iterative Improvement scheme for simultaneously placing and routing FPGAs containing cells used for both logic and routing [1]. In 1992, Schlag et al. presented a routability-driven algorithm for technology mapping of LUT-based FPGAs <ref> [9] </ref>. In 1993, Nag and Roy introduced an incremental placer for row-based FPGAs which analyzes post-layout timing and routability information to obtain better placements [8]. In 1994, Togawa et al. proposed a method for the simultaneous place and route of symmetrical FPGAs based on hierarchical bi-partitioning [13].
Reference: [10] <author> E. Sentovich et al., </author> <title> "SIS: A System for Sequential Circuit Synthesis," </title> <note> Electronics Research Laboratory Memorandum No. </note> <institution> UCB/ERL M92/41, Dept. of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: These circuits were taken from ISCAS93 and mapped to 3-input LUTs with the synthesis tool SIS <ref> [10] </ref>. To ensure a quality mapping, four different SIS scripts were run on the benchmarks, each using combinations of script.algebraic, script.rugged, and full simplify. The best mappings (fewest cells) were chosen for all circuits accept s349d, s349f, s386a, s386f, and s386g.
Reference: [11] <author> K. Shahookar and P. Mazumder, </author> <title> "VLSI Cell Placement Techniques," </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 23, No. 2, </volume> <month> June </month> <year> 1991, </year> <pages> pp. 143-220. </pages>
Reference-contexts: Simulated annealing, introduced by Kirkpatrick et al. in 1983 [5], is an algorithmic technique used to solve optimization problems. Applications of this process to placement have been well-studied <ref> [11] </ref> and have been shown to produce good results at the cost of long run times. To implement a simulating annealing-based placement algorithm, a cost function that accurately evaluates the routability of a given placement must first be determined.
Reference: [12] <author> H. Takahashi and A. </author> <title> Matsuyama, "An Approximate Solution for the Steiner Problem in Graphs," </title> <journal> Math. Japonica, </journal> <volume> Vol. 24, </volume> <year> 1980, </year> <pages> pp. 573-577. </pages>
Reference-contexts: We propose a simultaneous place and route algorithm which determines congestion information by approximating the minimum cost steiner tree. Our method is derived from Takahashi and Matsuyama's polynomial time approximation algorithm to the minimum steiner tree problem <ref> [12] </ref> as described in section 2.1. <p> Finally, the rightmost grid shows how MST-SPAR achieves a combination of these two extremes 8 out1 [8] [15] [31] [32] out2 [16] [37] <ref> [12] </ref> [8] out7 [47] [13] [16] nn10 [22] [29] nn10 out1 [44] [40] [37] out0 [17] out3 out0 [15] nn70 nn7 out6 [39] [34] nn70 out2 [13] out6 [29] out4 [32] [45] [47] [37] [40] [31] [36] out6 out7 [44] out2 [18] [32] [45] [40] [8] by having several dense areas
Reference: [13] <author> N. Togawa, M. Sato, and T. Ohtsuki, </author> <title> "A Simultaneous Placement and Global Routing Algorithm for Symmetric FPGAs," </title> <booktitle> The 2nd International ACM/SIGDA Workshop on Field-Programmable Gate Arrays, Session 8, </booktitle> <year> 1994. </year>
Reference-contexts: In 1993, Nag and Roy introduced an incremental placer for row-based FPGAs which analyzes post-layout timing and routability information to obtain better placements [8]. In 1994, Togawa et al. proposed a method for the simultaneous place and route of symmetrical FPGAs based on hierarchical bi-partitioning <ref> [13] </ref>. This paper introduces a simulated annealing based placement algorithm for wire-constrained FP-GAs which uses fast but informative routes during placement to incorporate wirability information into the cost function. Simulated annealing, introduced by Kirkpatrick et al. in 1983 [5], is an algorithmic technique used to solve optimization problems. <p> Finally, the rightmost grid shows how MST-SPAR achieves a combination of these two extremes 8 out1 [8] [15] [31] [32] out2 [16] [37] [12] [8] out7 [47] <ref> [13] </ref> [16] nn10 [22] [29] nn10 out1 [44] [40] [37] out0 [17] out3 out0 [15] nn70 nn7 out6 [39] [34] nn70 out2 [13] out6 [29] out4 [32] [45] [47] [37] [40] [31] [36] out6 out7 [44] out2 [18] [32] [45] [40] [8] by having several dense areas interspersed with empty RLBs. <p> Finally, the rightmost grid shows how MST-SPAR achieves a combination of these two extremes 8 out1 [8] [15] [31] [32] out2 [16] [37] [12] [8] out7 [47] <ref> [13] </ref> [16] nn10 [22] [29] nn10 out1 [44] [40] [37] out0 [17] out3 out0 [15] nn70 nn7 out6 [39] [34] nn70 out2 [13] out6 [29] out4 [32] [45] [47] [37] [40] [31] [36] out6 out7 [44] out2 [18] [32] [45] [40] [8] by having several dense areas interspersed with empty RLBs.
Reference: [14] <author> P. Winter, </author> <title> "Steiner Problem in Networks: A Survey," </title> <journal> NETWORKS, </journal> <volume> Vol. 17, </volume> <year> 1987, </year> <pages> pp. 129-167. 18 </pages>
Reference-contexts: can be phrased as follows: given a graph G = (V; E), a weight for each edge in E, and a subset T of V , find a subtree of G containing all vertices in T such that the sum of the edge costs in the subtree is a minimum <ref> [14] </ref>. The set of points in this subtree are steiner points and will be denoted by S. Karp proved this problem to be NP-hard for undirected graphs [4], and hence no polynomial time solution is known to exist.
References-found: 14

