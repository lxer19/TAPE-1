URL: ftp://ftp.inria.fr/INRIA/publication/publi-ps-gz/RR/RR-2361.ps.gz
Refering-URL: http://www.cs.umd.edu/~keleher/bib/dsmbiblio/node8.html
Root-URL: 
Title: Irregular Loop Patterns Compilation on Distributed Shared Memory Multiprocessors  
Author: Mounir Hahad, Thierry Priol and Jocelyne Erhel N 
Note: PROGRAMME 1  
Date: Septembre 1994  
Affiliation: INSTITUT NATIONAL DE RECHERCHE EN INFORMATIQUE ET EN AUTOMATIQUE  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Fran~cois Bodin, Lionnel Kervella, and Thierry Priol. </author> <title> Fortran-s : a fortran interface for shared virtual memory architectures. </title> <booktitle> In Supercomputing'93, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Indeed, high level user-inserted annotations allow automatic code generation of both CIL and LEARNing techniques. The compiler used is Fortran-S <ref> [1] </ref>. The source code is a standard (sequential) Fortran77 code where annotations have been inserted to express parallelism : which data is shared, which loop is parallel, etc: : : The output is a Fortran SPMD code targeted to the desired parallel SVM machine.
Reference: [2] <author> Marie Odile Bristeau, Jocelyne Erhel, Philippe Feat, Roland Glowinski, and Jaques Periaux. </author> <title> Solving the helmotz equation at high wave numbers on a parallel computer with a shared virtual memory. </title> <journal> International journal of supercomputer applications and high performance computing, </journal> <volume> (9.1), </volume> <year> 1995. </year>
Reference-contexts: Three mesh problems with different sizes are considered : Problem nodes triangles # write access 16K 16384 31976 95928 200K 207691 411380 1234140 INRIA Irregular Loop Patterns Compilation on Distributed Shared Memory Multiprocessors 11 Both a renumbered version (with a greedy algorithm that enhances spatial locality <ref> [2] </ref>) and a randomly mixed version of each problem are used. '-r' is appended to the names of the renumbered versions and '-m' is appended to the mixed ones. were carried out on 32 processors for the 16k problem because of its too small size (the results wouldn't have much significance).
Reference: [3] <author> Barbara Chapman, Piyush Mehrotra, Hans Moritsch, and Hans Zima. </author> <title> Dynamic Data Distribution in Vienna Fortran. </title> <type> Technical Report 93-92, </type> <institution> ICASE/NASA LRC, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: On DMPCs, PARTI [9, 4, 7] is one of the most advanced projects in resolving such problems. It has been grafted to several HPF compilers such as FORTRAN-D [10, 11] and Vienna-Fortran <ref> [3] </ref>. The next section of that paper will go over the context of our study. Section 3 introduces the very heart of our proposal which is the CIL technique. An analytical model is also given in that section. In section 4, an improving extension to the CIL is introduced.
Reference: [4] <author> R. Das, R. Ponnusamy, J. Saltz, and D. Mavriplis. </author> <title> Distributed Memory Compiler Methods for Irregular Problems Data Copy Reuse and Runtime Partitioning. </title> <type> Technical Report 91-73, </type> <institution> ICASE - NASA Langley RC, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: In this study, we suppose that L is duplicated among the processors. In very large problems, L can be actually shared rather than duplicated since read-only data (as L) does not disturb the system performance significantly [5]. On DMPCs, PARTI <ref> [9, 4, 7] </ref> is one of the most advanced projects in resolving such problems. It has been grafted to several HPF compilers such as FORTRAN-D [10, 11] and Vienna-Fortran [3]. The next section of that paper will go over the context of our study.
Reference: [5] <author> Mounir Hahad, Jocelyne Erhel, and Thierry Ppriol. </author> <title> Scheduling strategies for parallel sparse cholesky factorization on a shared virtual memory parallel computer. </title> <booktitle> International Conference on Parallel Processing, </booktitle> <volume> 3 </volume> <pages> 290-297, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: In this study, we suppose that L is duplicated among the processors. In very large problems, L can be actually shared rather than duplicated since read-only data (as L) does not disturb the system performance significantly <ref> [5] </ref>. On DMPCs, PARTI [9, 4, 7] is one of the most advanced projects in resolving such problems. It has been grafted to several HPF compilers such as FORTRAN-D [10, 11] and Vienna-Fortran [3]. The next section of that paper will go over the context of our study.
Reference: [6] <author> Kai Li and Richard Schaefer. </author> <title> A hypercube shared virtual memory system. </title> <booktitle> International Conference on Parallel Processing, </booktitle> <volume> 1 </volume> <pages> 125-131, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Although message passing is the usual programming model of DMPCs, Shared Virtual Memory provides an alternative with a data sharing model on these architectures. Software based SVM (like KOAN [8] and Shiva <ref> [6] </ref> on the iPSC/2) as well as hardware based ones (like ALLCACHE on the KSR1) are built on top of a paging mechanism : accessing a page which is not present in the local memory awakes the SVM engine which will look for the missing page.
Reference: [7] <author> Ravi Ponnusamy, Joel Saltz, Alok Choudhary, Yuan-Shin Hwang, and Geoffrey Fox. </author> <title> Runtime Support and Compilation Methods for User-Specified Data Distributions. </title> <type> Technical Report 93-99, </type> <institution> ICASE - NASA Langley RC, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: In this study, we suppose that L is duplicated among the processors. In very large problems, L can be actually shared rather than duplicated since read-only data (as L) does not disturb the system performance significantly [5]. On DMPCs, PARTI <ref> [9, 4, 7] </ref> is one of the most advanced projects in resolving such problems. It has been grafted to several HPF compilers such as FORTRAN-D [10, 11] and Vienna-Fortran [3]. The next section of that paper will go over the context of our study.
Reference: [8] <author> Thierry Priol and Zakaria Lahjomri. </author> <title> Experiments with shared virtual memory and message-passing on an ipsc/2 hypercube. </title> <booktitle> International Conference on Parallel Processing, </booktitle> <volume> 2 </volume> <pages> 145-149, </pages> <month> August </month> <year> 1992. </year> <title> INRIA Irregular Loop Patterns Compilation on Distributed Shared Memory Multiprocessors 15 </title>
Reference-contexts: 1 Introduction Although message passing is the usual programming model of DMPCs, Shared Virtual Memory provides an alternative with a data sharing model on these architectures. Software based SVM (like KOAN <ref> [8] </ref> and Shiva [6] on the iPSC/2) as well as hardware based ones (like ALLCACHE on the KSR1) are built on top of a paging mechanism : accessing a page which is not present in the local memory awakes the SVM engine which will look for the missing page.
Reference: [9] <author> J. Saltz, K. Crowley, R. Mirchandaney, and H. Berryman. </author> <title> Run-time scheduling and execution of loops on message passing machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 8 </volume> <pages> 303-312, </pages> <year> 1990. </year>
Reference-contexts: In this study, we suppose that L is duplicated among the processors. In very large problems, L can be actually shared rather than duplicated since read-only data (as L) does not disturb the system performance significantly [5]. On DMPCs, PARTI <ref> [9, 4, 7] </ref> is one of the most advanced projects in resolving such problems. It has been grafted to several HPF compilers such as FORTRAN-D [10, 11] and Vienna-Fortran [3]. The next section of that paper will go over the context of our study.
Reference: [10] <author> Chau-Wen Tseng. </author> <title> An Optimizing Fortran D Compiler for MIMD Distibuted Memory Machines. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: On DMPCs, PARTI [9, 4, 7] is one of the most advanced projects in resolving such problems. It has been grafted to several HPF compilers such as FORTRAN-D <ref> [10, 11] </ref> and Vienna-Fortran [3]. The next section of that paper will go over the context of our study. Section 3 introduces the very heart of our proposal which is the CIL technique. An analytical model is also given in that section.

References-found: 10

