URL: http://www.eecs.umich.edu/~marios/papers/iccad98.ps
Refering-URL: http://www.eecs.umich.edu/~marios/pubs.html
Root-URL: http://www.cs.umich.edu
Title: Asymptotically Efficient Retiming Under Setup and Hold Constraints  
Author: Marios C. Papaefthymiou 
Address: Ann Arbor, MI 48109  
Affiliation: Advanced Computer Architecture Laboratory Department of Electrical Engineering and Computer Science Univesity of Michigan  
Abstract: In this paper we present a polynomial-time algorithm for retiming synchronous circuits with edge-triggered registers under setup and hold constraints. Given a circuit G and a target clock period c, our algorithm computes in O(V 3 E) steps a retimed circuit that achieves c and is free of hold violations, where V is the circuit's gate count, and E is the number of wires in the circuit. This is the first polynomial-time algorithm ever reported for retiming with constraints on both long and short paths. The asymptotically efficient operation of our algorithm is based on a novel formulation of the timing constraints as an integer monotonic program with O(E 2 ) inequalities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: We now show that Algorithm RSH terminates in O (V 3 E) steps. The parameters D, , and W in Step 1 can be computed in O (V E + V 2 lg V ) time using John-son's algorithm for all-pairs shortest-paths <ref> [1] </ref>. The O (E 2 ) Inequalities (15)-(18) can be computed in O (E 2 ) time. The functions f (r (x)) and g (r (u); r (y)) can be com-puted in O (1) time.
Reference: [2] <author> S. Dey and S. Chakradhar. </author> <title> Retiming sequential circuits to enhance testability. </title> <booktitle> In Proceedings of the 12th IEEE VLSI Test Symposium, </booktitle> <pages> pages 28-33, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Since then, retiming has been extended to optimize the timing and area of level-clocked circuits [4, 9, 10, 13] and has been further explored in the context of logic synthesis, power optimization, and testability <ref> [2, 11] </ref>. Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines [3, 4, 6, 9, 10, 12, 17].
Reference: [3] <author> A. T. Ishii. </author> <title> Retiming gated-clocks and precharged circuit structures. </title> <booktitle> In Digest of Technical Papers of the 1993 IEEE International Conference on CAD, </booktitle> <pages> pages 300-307, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines <ref> [3, 4, 6, 9, 10, 12, 17] </ref>. The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in [15]. Its worst-case running time is exponential, however.
Reference: [4] <author> A. T. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Optimizing two-phase, </title> <journal> level-clocked circuitry. Journal of the Association for Computing Machinery, </journal> <volume> 41(1) </volume> <pages> 148-199, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: The first algorithmic investigation of retiming for reducing the clock period and area of edge-triggered circuits appeared in [7, 8]. Since then, retiming has been extended to optimize the timing and area of level-clocked circuits <ref> [4, 9, 10, 13] </ref> and has been further explored in the context of logic synthesis, power optimization, and testability [2, 11]. Over the years, most retiming research has focused on optimum timing. <p> Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines <ref> [3, 4, 6, 9, 10, 12, 17] </ref>. The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in [15]. Its worst-case running time is exponential, however. <p> If W r (u; v) + w r (v; y) = 0, then Inequality (13) is equivalent to w r (x; u) 1, which already holds from Inequality (9). The inequalities in Theorem 5 can be rewritten as a simple integer monotonic program <ref> [4] </ref>, which is defined as follows: Problem SIMP (Simple Integer Monotonic Programming) Let S be a set of constraints over the unknowns x 1 ; x 2 ; ; x n , in which the kth constraint has the form f k (x i ) g k (x 1 ; x <p> Subsequently, we adapt that algorithm to solve the retiming problem. A simple integer monotonic program can be solved using Algorithm MonoRelax which is described in Figure 3. This algorithm relies on the fact that simple integer monotonic programs can be solved by iterative relaxation <ref> [4] </ref>. Its correctness stems from the following theorem which has been proved in [4]. <p> A simple integer monotonic program can be solved using Algorithm MonoRelax which is described in Figure 3. This algorithm relies on the fact that simple integer monotonic programs can be solved by iterative relaxation <ref> [4] </ref>. Its correctness stems from the following theorem which has been proved in [4].
Reference: [5] <author> A. T. Ishii and M. C. Papaefthymiou. </author> <title> Efficient pipelin-ing of level-clocked circuits with min-max propagation delays. </title> <booktitle> In TAU'95 ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: Its worst-case running time is exponential, however. A polynomial-time algorithm for pipelin-ing a combinational circuit with level-clocked latches in order to achieve minimum clock period under a two-phase clocking scheme while satisfying all setup and hold constraints has been presented in <ref> [5] </ref>. That algorithm is applicable only to acyclic combinational circuits, however, and cannot be used to retime general circuits with sequential cycles. In this paper we present a polynomial-time algorithm for minimum clock-period retiming of circuits with edge-triggered registers under both setup and hold constraints.
Reference: [6] <author> K. N. Lalgudi and M. C. Papaefthymiou. </author> <title> Retiming edge-triggered circuits under general delay models. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 16(12) </volume> <pages> 1393-1408, </pages> <month> December </month> <year> 1997. </year>
Reference-contexts: Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines <ref> [3, 4, 6, 9, 10, 12, 17] </ref>. The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in [15]. Its worst-case running time is exponential, however.
Reference: [7] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing synchronous systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction Retiming is a general architectural-level optimization that can improve circuit performance by shifting storage elements across combinational logic blocks. The first algorithmic investigation of retiming for reducing the clock period and area of edge-triggered circuits appeared in <ref> [7, 8] </ref>. Since then, retiming has been extended to optimize the timing and area of level-clocked circuits [4, 9, 10, 13] and has been further explored in the context of logic synthesis, power optimization, and testability [2, 11]. Over the years, most retiming research has focused on optimum timing. <p> Over the years, most retiming research has focused on optimum timing. The original work in <ref> [7] </ref> has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines [3, 4, 6, 9, 10, 12, 17].
Reference: [8] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1), </volume> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. </note>
Reference-contexts: 1 Introduction Retiming is a general architectural-level optimization that can improve circuit performance by shifting storage elements across combinational logic blocks. The first algorithmic investigation of retiming for reducing the clock period and area of edge-triggered circuits appeared in <ref> [7, 8] </ref>. Since then, retiming has been extended to optimize the timing and area of level-clocked circuits [4, 9, 10, 13] and has been further explored in the context of logic synthesis, power optimization, and testability [2, 11]. Over the years, most retiming research has focused on optimum timing. <p> The retimed circuit in Figure 1 (b) is obtained by shifting the register k across block C and is functionally equivalent to the one in Figure 1 (a). This circuit can be computed by applying the retiming algorithm in <ref> [8] </ref> with a target clock period of 40. Since the longest combinational path in this circuit is AB with a delay of 10 + 30 = 40, there are no setup violations in the re-timed circuit. <p> With the exception of the parameters ffi and that are introduced to account for minimum gate delays and clock skew, respectively, this model is identical to the one used in <ref> [8] </ref>. Each vertex u in the vertex-set V corresponds to a combinational logic block. The nonnegative weights d (u) and ffi (u) associated with each vertex u denote the maximum and minimum data propagation delay through u, respectively. <p> An asymptotically more efficient procedure that solves these constraints in O (V E) steps has been presented in <ref> [8] </ref>. 4 Timing constraints This section gives a mathematical statement of the hold constraints that must be satisfied in a correctly timed edge-triggered circuit. It also describes a set of O (E 2 ) necessary and sufficient conditions for a retimed circuit to be free of hold violations. <p> An interesting problem for further investigation is the design of an asymptotically faster algorithm than RSH. We conjecture that an O (V 2 E)-time algorithm can be designed using an approach similar to the one described in <ref> [8] </ref>. From a practical standpoint, it is also interesting to investigate schemes for reducing the number of constraints in the integer monotonic program. The most fertile area for further research appears to be the investigation of retiming in level-clocked circuits that use multiple overlapping phases.
Reference: [9] <author> B. Lockyear and C. Ebeling. </author> <title> Optimal retiming of multi-phase, </title> <booktitle> level-clocked circuits. In Advanced Research in VLSI and Parallel Systems: Proc. of the 1992 Brown/MIT Conference. </booktitle> <publisher> MIT Press, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: The first algorithmic investigation of retiming for reducing the clock period and area of edge-triggered circuits appeared in [7, 8]. Since then, retiming has been extended to optimize the timing and area of level-clocked circuits <ref> [4, 9, 10, 13] </ref> and has been further explored in the context of logic synthesis, power optimization, and testability [2, 11]. Over the years, most retiming research has focused on optimum timing. <p> Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines <ref> [3, 4, 6, 9, 10, 12, 17] </ref>. The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in [15]. Its worst-case running time is exponential, however.
Reference: [10] <author> B. Lockyear and C. Ebeling. </author> <title> The practical application of retiming to the design of high performance systems. </title> <booktitle> In Digest of Technical Papers of the 1993 IEEE International Conference on CAD, </booktitle> <pages> pages 288-295, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: The first algorithmic investigation of retiming for reducing the clock period and area of edge-triggered circuits appeared in [7, 8]. Since then, retiming has been extended to optimize the timing and area of level-clocked circuits <ref> [4, 9, 10, 13] </ref> and has been further explored in the context of logic synthesis, power optimization, and testability [2, 11]. Over the years, most retiming research has focused on optimum timing. <p> Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines <ref> [3, 4, 6, 9, 10, 12, 17] </ref>. The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in [15]. Its worst-case running time is exponential, however.
Reference: [11] <author> S. Malik, E. Sentovich, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming and resynthesis: Optimizing sequential networks with combinational techniques. </title> <booktitle> In Proc. of the Hawaii International Conference on System Sciences, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: Since then, retiming has been extended to optimize the timing and area of level-clocked circuits [4, 9, 10, 13] and has been further explored in the context of logic synthesis, power optimization, and testability <ref> [2, 11] </ref>. Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines [3, 4, 6, 9, 10, 12, 17].
Reference: [12] <author> M. C. Papaefthymiou. </author> <title> Understanding retiming through maximum average-delay cycles. </title> <journal> Mathematical Systems Theory, </journal> <volume> 27 </volume> <pages> 65-84, </pages> <year> 1994. </year>
Reference-contexts: Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines <ref> [3, 4, 6, 9, 10, 12, 17] </ref>. The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in [15]. Its worst-case running time is exponential, however.
Reference: [13] <author> M. C. Papaefthymiou and K. H. Randall. Tim: </author> <title> a timing package for two-phase, </title> <booktitle> level-clocked circuitry. In Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1993. </year> <note> Also available as an MIT VLSI Memo 92-693, </note> <month> October </month> <year> 1992. </year>
Reference-contexts: The first algorithmic investigation of retiming for reducing the clock period and area of edge-triggered circuits appeared in [7, 8]. Since then, retiming has been extended to optimize the timing and area of level-clocked circuits <ref> [4, 9, 10, 13] </ref> and has been further explored in the context of logic synthesis, power optimization, and testability [2, 11]. Over the years, most retiming research has focused on optimum timing.
Reference: [14] <author> K. A. Sakallah, T. N. Mudge, T. M. Burks, and E. S. Davidson. </author> <title> Synchronization of pipelines. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 12(8) </volume> <pages> 1132-1146, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: The most fertile area for further research appears to be the investigation of retiming in level-clocked circuits that use multiple overlapping phases. In the presence of level-clocked latches, the problem of optimal timing with constraints on short and long paths is particularly challenging even when latch locations are fixed <ref> [14] </ref>. The insights we have developed for edge-triggered circuits may result in efficient retiming algorithms for multi-phase level-clocked circuits.
Reference: [15] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming of circuits with single phase level-sensitive latches. </title> <booktitle> In International Conference on Computer Design, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in <ref> [15] </ref>. Its worst-case running time is exponential, however. A polynomial-time algorithm for pipelin-ing a combinational circuit with level-clocked latches in order to achieve minimum clock period under a two-phase clocking scheme while satisfying all setup and hold constraints has been presented in [5].
Reference: [16] <author> N. V. Shenoy, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Minimum padding to satisfy short path constraints. </title> <booktitle> In Digest of Technical Papers of the 1993 IEEE/ACM International Conference on CAD, </booktitle> <month> Novem-ber </month> <year> 1993. </year>
Reference: [17] <author> T. Soyata, E. Friedman, and J. Mulligan. </author> <title> Incorporating interconnect, register, and clock distribution delays into the retiming process. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 16(1) </volume> <pages> 105-120, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: Over the years, most retiming research has focused on optimum timing. The original work in [7] has been followed by a flurry of research on minimum clock-period retiming of edge-triggered and level-clocked circuits under various delay models and multiphase clocking disciplines <ref> [3, 4, 6, 9, 10, 12, 17] </ref>. The polynomial-time retiming algorithms described in these papers can only be used to satisfy setup timing constraints, however. An algorithm for retiming single-phase level-clocked circuits under setup and hold constraints has been presented in [15]. Its worst-case running time is exponential, however.
References-found: 17

