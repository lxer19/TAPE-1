URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-22.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-22.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [BIER86A] <author> Bier, Eric A., and Stone, Maureen C. </author> <title> Snap Dragging, </title> <booktitle> SIGGRAPH '86 Proceedings, </booktitle> <year> 1986. </year>
Reference-contexts: Positioning objects in screen space precisely is a difficult task for any user. In 2D, various solutions have been introduced: grids, snapping and gravity <ref> [BIER86A] </ref>. All of these somewhat restrict the expressive freedom of the user in 2D and when generalized to 3D [BIER86B], the effect becomes even worse, partly because the user mostly uses a 2D input device to manipulate objects in three-space.
Reference: [BIER86B] <author> Bier, Eric A. Skitters and Jacks: </author> <title> Interactive 3D Positioning Tools, </title> <booktitle> 1986 Symposium on Interactive 3D Graphics, </booktitle> <pages> pp. 183-278, </pages> <month> October, </month> <year> 1986. </year>
Reference-contexts: Positioning objects in screen space precisely is a difficult task for any user. In 2D, various solutions have been introduced: grids, snapping and gravity [BIER86A]. All of these somewhat restrict the expressive freedom of the user in 2D and when generalized to 3D <ref> [BIER86B] </ref>, the effect becomes even worse, partly because the user mostly uses a 2D input device to manipulate objects in three-space. In designing LOG, we wanted to remove the burden of accurately positioning objects in 3D from the user.
Reference: [BORN86] <author> Borning, A. and Duisberg, R. </author> <title> Constraint-Based Tools for Building User Interfaces, </title> <journal> ACM Trans. Graphics, </journal> <volume> Vol. 5, No. 4, </volume> <month> Oct. </month> <year> 1986, </year> <pages> pp. 345-374. </pages>
Reference-contexts: We only mention the landmark systems in the field for reference, because none of these systems with the exception of [KURL91] is particularly similar to LOG. 2.1 2D The two landmark explicit constraint specification systems are Thinglab <ref> [BORN86] </ref> and Garnet [MYERS90]. Thinglab provides preconstrained parts which the user can assemble to create complex shapes. The user can also specify additional constraints on existing objects. Garnet helps the user interactively create user interfaces that let the user operate on graphic objects with the mouse and keyboard.
Reference: [CONN92] <author> Conner, D. Brookshire, Snibbe, Scott S., Herndon, Kenneth P., Robbins, Daniel C., Zeleznik, Robert C. and van Dam, Andries. </author> <title> Three-Dimensional Widgets, </title> <booktitle> 1992 SIGGRAPH Symposium on Interactive 3D Graphics, </booktitle> <pages> pp. 197-208, </pages> <month> March, </month> <year> 1992. </year>
Reference-contexts: Geometry refers to the appearance of a widget and the term behavior describes a widget's functionality. Standard examples of 2D widgets are sliders, scroll bars, and dialog boxes. Some examples of 3D widgets include the rack, virtual trackball, and the warp wid get <ref> [CONN92] </ref>.
Reference: [FALK86] <author> Falkenhainer, B. C. and Michalski, R. S. </author> <title> Integrating Quantitative and Qualitative Discovery: The ABACUS System, </title> <booktitle> Machine Learning I, </booktitle> <pages> pp. 367-402, </pages> <year> 1986. </year>
Reference: [KOKAR86] <author> Kokar, M. M. </author> <title> Determining Arguments of Invariant Functional Descriptions, </title> <booktitle> Machine Learning I, </booktitle> <pages> pp. 403-422, </pages> <year> 1986. </year>
Reference: [KURL91] <author> Kurlander, David and Feiner, Steven. </author> <title> Inferring Constraints from Multiple Snapshots, </title> <year> 1991. </year>
Reference-contexts: We only mention the landmark systems in the field for reference, because none of these systems with the exception of <ref> [KURL91] </ref> is particularly similar to LOG. 2.1 2D The two landmark explicit constraint specification systems are Thinglab [BORN86] and Garnet [MYERS90]. Thinglab provides preconstrained parts which the user can assemble to create complex shapes. The user can also specify additional constraints on existing objects. <p> The user can also specify additional constraints on existing objects. Garnet helps the user interactively create user interfaces that let the user operate on graphic objects with the mouse and keyboard. The three landmark demonstrational constraint specification systems are Peridot [MYERS88], Metamouse [MAUL89], and <ref> [KURL91] </ref>. Peridot is a system that infers graphical constraints automatically as objects are added to the scene. Peridot confirms all its inferences with the user, which gives the user hints about what the constraints present might be; however, the user still needs to understand thouroughly what constraints are. <p> Metamouse keeps track of the user's procedural editing actions and attempts to infer 2.2 3D 4 generalized procedures from them. For example, if the user aligns boxes along a line, Metamouse will infer the iteration and align the rest of the boxes. <ref> [KURL91] </ref> is meant to be used for doing geometric constructions. The system infers constraints by using the snapshot method, which requires it to draw information from still configurations, not dynamic environments. 2.2 3D In 3D, the situation is less well-developed. <p> We say that LOG handles approximate constraints: it is sufficient for the user to specify approximately what he is trying to communicate to LOG. 4.1 The Snapshot Method 6 4.1 The Snapshot Method The user communicates with LOG by using the snapshot method <ref> [KURL91] </ref>. In doing so, the user draws a configuration that approximately complies with his design goals for the widget from which a number of possible constraints are inferred. <p> The feedback he gets from LOG gives him direction for future snapshots. There are numerous advantages to using the snapshot method for purposes of communication between the user and the system <ref> [KURL91, MYERS92] </ref>. Complex constraint systems can be specified with few operations, allowing novices to learn basic functionality quickly. Furthermore, experienced users can work rapidly to carry out a wide range of tasks. The snapshot method makes for a friendly system that is intuitive to use.
Reference: [LANG90] <author> Langley, Pat and Shrager, Jeff, ed. </author> <title> Computational Models of Scientific Discovery and Theory Formation. </title> <publisher> Morgan Kaufmann Publishers; San Mateo, </publisher> <address> CA, </address> <year> 1990. </year>
Reference: [MAUL89] <author> Maulsby, David L., Witten, Ian H., and Kittlitz, Kenneth A. Metamouse: </author> <title> Specifying Graphical Procedures by Example, </title> <booktitle> SIGGRAPH '89 Proceedings, </booktitle> <pages> pp. 127-136, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The user can also specify additional constraints on existing objects. Garnet helps the user interactively create user interfaces that let the user operate on graphic objects with the mouse and keyboard. The three landmark demonstrational constraint specification systems are Peridot [MYERS88], Metamouse <ref> [MAUL89] </ref>, and [KURL91]. Peridot is a system that infers graphical constraints automatically as objects are added to the scene. Peridot confirms all its inferences with the user, which gives the user hints about what the constraints present might be; however, the user still needs to understand thouroughly what constraints are.
Reference: [MYERS86] <author> Myers, Brad A. and Buxton, William. </author> <title> Creating Highly-Interactive and Graphical User Interfaces by Demonstration, </title> <booktitle> SIGGRAPH '86 Proceedings, </booktitle> <pages> pp. 249-258, </pages> <year> 1986. </year>
Reference: [MYERS88] <author> Myers, Brad A. </author> <title> Creating User Interfaces by Demonstration, </title> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1988. </year>
Reference-contexts: The user can also specify additional constraints on existing objects. Garnet helps the user interactively create user interfaces that let the user operate on graphic objects with the mouse and keyboard. The three landmark demonstrational constraint specification systems are Peridot <ref> [MYERS88] </ref>, Metamouse [MAUL89], and [KURL91]. Peridot is a system that infers graphical constraints automatically as objects are added to the scene.
Reference: [MYERS89A] <author> Myers, Brad A., Vander Zanden, Brad, and Dannenberg, Roger B. </author> <title> Creating Graphical Interactive Application Objects by Demonstration, </title> <booktitle> Proceedings ACM SIGGRAPH Symposium on user Interface Software and Technology, ACM, </booktitle> <year> 1989, </year> <pages> pp. 95-104. REFERENCES 20 </pages>
Reference: [MYERS89B] <author> Myers, Brad A. </author> <title> User-Interface Tools: Introduction and Survey, </title> <booktitle> IEEE Interface Systems, </booktitle> <pages> pp. 15-23, </pages> <month> January, </month> <year> 1989. </year>
Reference: [MYERS90] <author> Myers, Brad A., Guise, Dario A., Dannenberg, Roger B., Zanden, Brad Vander, Kosbie, David S., Pervin, Edward, Mickish, Andrew, and Marchal, Philippe. Garnet: </author> <title> Comprehensive Support for Graphical, Highly Interactive User Interfaces, </title> <booktitle> IEEE Computer, </booktitle> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: We only mention the landmark systems in the field for reference, because none of these systems with the exception of [KURL91] is particularly similar to LOG. 2.1 2D The two landmark explicit constraint specification systems are Thinglab [BORN86] and Garnet <ref> [MYERS90] </ref>. Thinglab provides preconstrained parts which the user can assemble to create complex shapes. The user can also specify additional constraints on existing objects. Garnet helps the user interactively create user interfaces that let the user operate on graphic objects with the mouse and keyboard.
Reference: [MYERS92] <author> Myers, Brad A. </author> <title> Demonstrational Interfaces: A Step Beyond Direct Manipulation, </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 61-73, </pages> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: The feedback he gets from LOG gives him direction for future snapshots. There are numerous advantages to using the snapshot method for purposes of communication between the user and the system <ref> [KURL91, MYERS92] </ref>. Complex constraint systems can be specified with few operations, allowing novices to learn basic functionality quickly. Furthermore, experienced users can work rapidly to carry out a wide range of tasks. The snapshot method makes for a friendly system that is intuitive to use.
Reference: [SNIBBE92] <author> Snibbe, Scott S., Herndon, Kenneth P., Robbins, Daniel C., Conner, D. Brook-shire and van Dam, Andries. </author> <title> Using Deformations to Explore 3D Widget Design", </title> <booktitle> SIGGRAPH '92 Proceedings, </booktitle> <pages> pp. 351-352, </pages> <month> July, </month> <year> 1992. </year>
Reference: [STRANG88] <author> Strang, Gilbert. </author> <title> Linera Algebra and its Applications, 3rd Edition, </title> <publisher> Harcourt Brace Jovanovich, </publisher> <address> Orlando, Fla., </address> <year> 1988. </year>
Reference-contexts: We can plot any black box item against any work area object by plotting (x,y)-pairs, where x is the black box array value and y is the work area object array value for the same snapshot. Then, we proceed by fitting a line (using a least-squares fit <ref> [STRANG88] </ref>) through the points. What we are looking for is the best such fit, where the error of fitting a line through the data points is minimized.
Reference: [ZELE93] <author> Zeleznik, Robert C., Herndon, Kenneth P., Robbins, Daniel C., Huang, Nathan H., Parker, Noah F., Meyer, Thomas W. and Hughes, John F. </author> <note> 3D Widget Construction Toolkit,To appear in SIGGRAPH '93 Proceedings. </note>
Reference-contexts: The system infers constraints by using the snapshot method, which requires it to draw information from still configurations, not dynamic environments. 2.2 3D In 3D, the situation is less well-developed. We know of only one explicit system <ref> [ZELE93] </ref> and no prior work on demonstrational constraint specification. [ZELE93] is a 3D widget construction toolkit that allows the user to construct widgets by bringing up primitives and clicking on appropriate icons to constrain objects in a specified way. There is absolutely no inferencing involved. <p> The system infers constraints by using the snapshot method, which requires it to draw information from still configurations, not dynamic environments. 2.2 3D In 3D, the situation is less well-developed. We know of only one explicit system <ref> [ZELE93] </ref> and no prior work on demonstrational constraint specification. [ZELE93] is a 3D widget construction toolkit that allows the user to construct widgets by bringing up primitives and clicking on appropriate icons to constrain objects in a specified way. There is absolutely no inferencing involved.
References-found: 18

