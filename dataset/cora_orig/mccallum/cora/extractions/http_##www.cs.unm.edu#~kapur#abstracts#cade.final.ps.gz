URL: http://www.cs.unm.edu/~kapur/abstracts/cade.final.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/cade.13.96.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu, subu@cs.albany.edu  
Title: Lemma Discovery in Automating Induction  
Author: Deepak Kapur M. Subramaniam 
Address: New York Albany, NY 12222  
Affiliation: Computer Science Department State University of  
Abstract: Speculating intermediate lemmas is one of the main reason of user interaction/guidance while mechanically attempting proofs by induction. An approach for generating intermediate lemmas is developed, and its effectiveness is demonstrated while proving properties of recursively defined functions. The approach is guided by the paradigm of attempting to generate a proof of the conclusion subgoal in an induction step by the application of an induction hypothesis(es). Generation of intermediate conjectures is motivated by attempts to find appropriate instantiations for non-induction variables in the main conjecture. In case, the main conjecture does not have any non-induction variables, such variables are introduced by attempting its generalization. A constraint based paradigm is proposed for guessing the missing side of an intermediate conjecture by identifying constraints on the term schemes introduced for the missing side. Definitions and properties of functions are judiciously used for generating instantiations and intermediate conjectures. Heuristics are identified for performing such analysis. The approach fails if appropriate instantiations of non-induction variables cannot be generated. Otherwise, proofs of intermediate conjectures are attempted and the proposed method is recursively applied. The method has proven to be surprisingly very effective in speculating intermediate lemmas for tail-recursive programs. The method is demonstrated using a number of examples on numbers and lists. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.S. Boyer and J S. Moore, </author> <title> A Computational Logic. </title> <booktitle> ACM Monographs in Computer Science, </booktitle> <year> 1979. </year>
Reference-contexts: The speculated instantiation must satisfy all the constraints. A useful heuristic in speculation is to identify unchangeable <ref> [1] </ref> arguments of the term schema from the definitional constraints.
Reference: 2. <author> A. Bundy, A. Stevens, A. Ireland, and A. Smaill, "Rippling: </author> <title> A heuristic for guiding inductive proofs", </title> <journal> Artificial Intelligence, </journal> <volume> 62 </volume> <pages> 185-253, </pages> <year> 1993. </year>
Reference-contexts: through several examples on lists and numbers. 2 Related Work Our work is similar in its motivation to that of [6, 5, 4] in which approaches for speculating intermediate lemmas and for discovering generalized forms of con jectures for fixing failed induction proof attempts are given using the rippling heuristic <ref> [2] </ref>. The non-induction variables of a conjecture (called sinks) are exploited in that approach also. In rippling, it is assumed that a common term structure called the skeleton is shared by both the induction hypothesis and the conclusion.
Reference: 3. <editor> D.Basin and T.Walsh "Difference Matching", </editor> <booktitle> In Proc. of CADE 11, </booktitle> <editor> D. Kapur (editor), </editor> <publisher> LNAI 607, Springer Verlag 1992. </publisher>
Reference-contexts: Another related approach based on rippling is a critic [10] for handling diverging induction proof attempts. The critic is implemented in the theorem prover SPIKE and identifies accumulating term structures in successive induction sub-goals by difference matching these subgoals <ref> [3] </ref>, a technique for reconciling term annotations. Missing lemmas are heuristically speculated as wave rules that can aid in removal of this accumulating structure. The speculation of lemmas is based solely on the analysis of the proof attempts and does not exploit the structure of the rewrite rules.
Reference: 4. <institution> J.T.Hesketh "Using middle out reasoning to guide inductive theorem proving", </institution> <type> Ph.D thesis. </type> <institution> University of Edinburgh 1991. </institution>
Reference-contexts: The procedure for discovering such generalized conjectures is discussed in section 5. The effectiveness of the proposed approach for speculating intermediate lemmas and discovering generalized conjectures is illustrated through several examples on lists and numbers. 2 Related Work Our work is similar in its motivation to that of <ref> [6, 5, 4] </ref> in which approaches for speculating intermediate lemmas and for discovering generalized forms of con jectures for fixing failed induction proof attempts are given using the rippling heuristic [2]. The non-induction variables of a conjecture (called sinks) are exploited in that approach also. <p> We believe that it is much simpler as it does not require additional annotations to be associated with the rewrite rules and avoids higher order unification for generating instantiations for term schemas as done in <ref> [6, 5, 4] </ref>. Suitable instantiations are instead obtained by generating sufficiently many constraints on instantiations, and heuristically speculating ground instances using constraints. More constraints can be generated, if need be, depending upon how much resources a prover is interested in using in speculating conjectures.
Reference: 5. <author> A. Ireland and A. Bundy, </author> <title> "Productive Use of Failure in Inductive Proof", </title> <note> Edin-burgh DAI Research Report No: 716. To appear on the Special Issue on Automation of Proof by Mathematical Induction, JAR. </note>
Reference-contexts: The procedure for discovering such generalized conjectures is discussed in section 5. The effectiveness of the proposed approach for speculating intermediate lemmas and discovering generalized conjectures is illustrated through several examples on lists and numbers. 2 Related Work Our work is similar in its motivation to that of <ref> [6, 5, 4] </ref> in which approaches for speculating intermediate lemmas and for discovering generalized forms of con jectures for fixing failed induction proof attempts are given using the rippling heuristic [2]. The non-induction variables of a conjecture (called sinks) are exploited in that approach also. <p> We believe that it is much simpler as it does not require additional annotations to be associated with the rewrite rules and avoids higher order unification for generating instantiations for term schemas as done in <ref> [6, 5, 4] </ref>. Suitable instantiations are instead obtained by generating sufficiently many constraints on instantiations, and heuristically speculating ground instances using constraints. More constraints can be generated, if need be, depending upon how much resources a prover is interested in using in speculating conjectures. <p> Suitable instantiations are instead obtained by generating sufficiently many constraints on instantiations, and heuristically speculating ground instances using constraints. More constraints can be generated, if need be, depending upon how much resources a prover is interested in using in speculating conjectures. All of the examples reported in <ref> [5, 6] </ref> have been done using the proposed approach.
Reference: 6. <author> A. </author> <title> Ireland "The use of planning critics in mechanizing inductive proofs", </title> <booktitle> In Proc. LPAR 92, </booktitle> <editor> A. Voronkov (editor), </editor> <publisher> LNAI 624 Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The procedure for discovering such generalized conjectures is discussed in section 5. The effectiveness of the proposed approach for speculating intermediate lemmas and discovering generalized conjectures is illustrated through several examples on lists and numbers. 2 Related Work Our work is similar in its motivation to that of <ref> [6, 5, 4] </ref> in which approaches for speculating intermediate lemmas and for discovering generalized forms of con jectures for fixing failed induction proof attempts are given using the rippling heuristic [2]. The non-induction variables of a conjecture (called sinks) are exploited in that approach also. <p> We believe that it is much simpler as it does not require additional annotations to be associated with the rewrite rules and avoids higher order unification for generating instantiations for term schemas as done in <ref> [6, 5, 4] </ref>. Suitable instantiations are instead obtained by generating sufficiently many constraints on instantiations, and heuristically speculating ground instances using constraints. More constraints can be generated, if need be, depending upon how much resources a prover is interested in using in speculating conjectures. <p> Suitable instantiations are instead obtained by generating sufficiently many constraints on instantiations, and heuristically speculating ground instances using constraints. More constraints can be generated, if need be, depending upon how much resources a prover is interested in using in speculating conjectures. All of the examples reported in <ref> [5, 6] </ref> have been done using the proposed approach.
Reference: 7. <author> Deepak Kapur and M. </author> <title> Subramaniam " Failure Analysis and its role in Generalization", </title> <type> Manuscript under Preparation. </type>
Reference-contexts: This requirement is captured in the notion of reachable functions from a term t using a rewrite system R introduced in <ref> [7] </ref>. The set of functions reachable from a term t using a rewrite system R can be iteratively constructed by starting with the function symbols in t. <p> The set of function symbols which can possibly appear as the root of a term after normalization can also be exploited. Another heuristic useful for determining whether the two arguments can become equal is based on using the notion of incompatible functions introduced in <ref> [7] </ref>, which can be used to determine the function symbols in the term retained in any of its normal forms. <p> An implementation of the proposed method in RRL is in progress. It is planned to integrate the method for fixing failures of inductive proof attempts predicted based on several criteria proposed in <ref> [7] </ref>.
Reference: 8. <institution> Deepak Kapur and M.Subramaniam "Lemma Discovery in Automated Induction", </institution> <type> Technical Report, </type> <institution> CS Dept., </institution> <note> SUNY April, 1995(an expanded version of this paper). </note>
Reference-contexts: More constraints can be generated, if need be, depending upon how much resources a prover is interested in using in speculating conjectures. All of the examples reported in [5, 6] have been done using the proposed approach. For a detailed comparison of these approaches the reader is referred to <ref> [8] </ref>. 3 Using Non-induction Variables to Fix Failures The main idea exploited in the proposed approach is that if an induction proof attempt is not likely to succeed because of inapplicability of induction hypotheses, then in each induction step, intermediate conjectures should be generated to be applicable to the conclusion subgoal. <p> Several other examples illustrating how speculate can be recursively employed to generate a series of intermediate lemmas are discussed in <ref> [8] </ref>.
Reference: 9. <author> D. Kapur and H. Zhang, </author> <title> "An overview of Rewrite Rule Laboratory (RRL)," </title> <journal> J. of Computer and Mathematics with Applications, </journal> <volume> 29, 2, </volume> <year> 1995, </year> <pages> 91-114. </pages> <note> Earlier descriptions in CADE-88 and RTA-89. </note>
Reference: 10. <author> T. </author> <title> Walsh "A divergence critic", </title> <booktitle> In Proc. of CADE 12, </booktitle> <editor> A. Bundy (editor), </editor> <publisher> LNAI 814, Springer Verlag 1994. </publisher>
Reference-contexts: The approach uses higher-order unification, an expensive primitive operation, often leading to many useless paths. This approach is implemented in the prover Oyster and has been used in conjunction with proof planner CLAM. Another related approach based on rippling is a critic <ref> [10] </ref> for handling diverging induction proof attempts. The critic is implemented in the theorem prover SPIKE and identifies accumulating term structures in successive induction sub-goals by difference matching these subgoals [3], a technique for reconciling term annotations.
Reference: 11. <author> H. Zhang, D. Kapur, </author> <title> and M.S. Krishnamoorthy, "A mechanizable induction principle for equational specifications," </title> <booktitle> Proc. Ninth International Conference on Automated Deduction, </booktitle> <editor> E. Lusk and R. Overbeek (eds.), LNCS, </editor> <volume> Vol. 310, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988, </year> <month> 250-265. </month> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
References-found: 11

