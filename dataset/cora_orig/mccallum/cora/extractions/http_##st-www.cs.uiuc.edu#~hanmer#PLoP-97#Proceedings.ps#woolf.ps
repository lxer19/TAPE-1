URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Proceedings.ps/woolf.ps
Refering-URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Workshops.html
Root-URL: http://www.cs.uiuc.edu
Email: bwoolf@ksccary.com  
Phone: 919-677-1119 x541,  
Title: The Abstract Class Pattern A BSTRACT C LASS Class Behavioral Intent Define the interface for
Author: Bobby Woolf 
Address: 4001 Weston Pkwy, Cary, NC 27513-2303  
Affiliation: Knowledge Systems Corp.  
Note: 07/17/97 10:13 1 of 8  A  
Abstract: The number framework in a robust objectoriented system should take advantage of the CPUs efficiency whenever possible. However, to make the system more robust, the framework should overcome the CPUs limitations whenever possible. It should be able to represent a virtually limitless range of numbers, both really huge numbers and really tiny ones. It should be able to represent a decimal number with complete precision, at least to a specified number of decimal places. It should be able to perform simple arithmetic without any loss of precision. It could even compute complex equations by simplifying them first. CPU numbers, LargePositiveInteger and LargeNegativeInteger for huge integer values, FixedPoint for complete precision, Fraction for division without round off, and so on. This way, the framework performs as much computation as possible using the CPU, but also uses other classes to represent numbers that that the CPU cannot. The diagram below shows the classes for this framework. 
Abstract-found: 1
Intro-found: 1
Reference: [Auer95] <author> Ken Auer. </author> <title> Reusability Through Self-Encapsulation. Pattern Languages of Program Design. </title> <editor> Edited by James Coplien and Douglas Schmidt. </editor> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: When a pattern talks about a participant that defines an interface [State, GHJV95, page 306] or declares an interface [Strategy, GHJV95, page 317] for several subclasses, it is describing an Abstract Class. Auer discusses how to develop class hierarchies that are reusable and extensible <ref> [Auer95] </ref>. He suggests using a base class to define and interface and subclasses to implement state. Related Patterns Most design-level patterns employ abstract classes. <p> Auer walks the reader through the process of developing a hierarchy whose interface is defined by an abstract class. <ref> [Auer95] </ref>
Reference: [GHJV95] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable ObjectOriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: However, if all of the ConcreteClasses require a variable, and if future ConcreteClasses would also probably require that variable, then it can be declared in the AbstractClass. 3. Implementation through Template Methods. An AbstractClass is usually implemented as a collection of Template Methods <ref> [GHJV95, page 325] </ref>. An AbstractClass is said to define an interface but leave its implementation to the ConcreteClasses. However, when a message has a default implementation that is appropriate for all ConcreteClasses, that implementation can be made in the AbstractClass. <p> In Java, java.lang.Object serves the same purpose. When a class hierarchy is known by the class at the root of the hierarchy (such as Number, Collection, Stream, Window, etc.), that class is almost always an abstract class. Almost every documented design pattern, such as those in Design Patterns <ref> [GHJV95] </ref>, features one or more Abstract Classes. Often the pattern suggests the creation of an Abstract Class if there isnt one already. For example, Composite [GHJV95, page 163] uses the Component abstract class to define the interface for both the Leaf and Composite classes. <p> Almost every documented design pattern, such as those in Design Patterns [GHJV95], features one or more Abstract Classes. Often the pattern suggests the creation of an Abstract Class if there isnt one already. For example, Composite <ref> [GHJV95, page 163] </ref> uses the Component abstract class to define the interface for both the Leaf and Composite classes. To apply Proxy [GHJV95, page 207] to a RealSubject class, the developer should use the abstract class Subject to define the interface that the RealSubject and its Proxy will share. <p> Often the pattern suggests the creation of an Abstract Class if there isnt one already. For example, Composite [GHJV95, page 163] uses the Component abstract class to define the interface for both the Leaf and Composite classes. To apply Proxy <ref> [GHJV95, page 207] </ref> to a RealSubject class, the developer should use the abstract class Subject to define the interface that the RealSubject and its Proxy will share. <p> To apply Proxy [GHJV95, page 207] to a RealSubject class, the developer should use the abstract class Subject to define the interface that the RealSubject and its Proxy will share. When a pattern talks about a participant that defines an interface <ref> [State, GHJV95, page 306] </ref> or declares an interface [Strategy, GHJV95, page 317] for several subclasses, it is describing an Abstract Class. Auer discusses how to develop class hierarchies that are reusable and extensible [Auer95]. He suggests using a base class to define and interface and subclasses to implement state. <p> To apply Proxy [GHJV95, page 207] to a RealSubject class, the developer should use the abstract class Subject to define the interface that the RealSubject and its Proxy will share. When a pattern talks about a participant that defines an interface [State, GHJV95, page 306] or declares an interface <ref> [Strategy, GHJV95, page 317] </ref> for several subclasses, it is describing an Abstract Class. Auer discusses how to develop class hierarchies that are reusable and extensible [Auer95]. He suggests using a base class to define and interface and subclasses to implement state. Related Patterns Most design-level patterns employ abstract classes. <p> He suggests using a base class to define and interface and subclasses to implement state. Related Patterns Most design-level patterns employ abstract classes. Of the twenty-three patterns in Design Patterns, twenty of them suggest implementing abstract classes (Singleton, Facade, and Memento do not). <ref> [GHJV95] </ref> An Abstract Class is usually implemented using Template Methods [GHJV95, page 325]. Auer walks the reader through the process of developing a hierarchy whose interface is defined by an abstract class. [Auer95] <p> Related Patterns Most design-level patterns employ abstract classes. Of the twenty-three patterns in Design Patterns, twenty of them suggest implementing abstract classes (Singleton, Facade, and Memento do not). [GHJV95] An Abstract Class is usually implemented using Template Methods <ref> [GHJV95, page 325] </ref>. Auer walks the reader through the process of developing a hierarchy whose interface is defined by an abstract class. [Auer95]
Reference: [LW93] <author> Barbara Liskov and Jeannette Wing. </author> <title> A New Definition of the Subtype Relation. </title> <booktitle> ECOOP 93, Lecture Notes on Computer Science 707. </booktitle> <address> Berlin, Heidelberg: </address> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 118-141. </pages> <note> The Abstract Class Pattern Bobby Woolf 07/17/97 10:13 8 of 8 </note>
Reference: [Meyer91] <author> Bertrand Meyer. </author> <title> Design by Contract. Advances in ObjectOriented Software Engineering. Edited by Dino Mandrioli and Bertrand Meyer. </title> <publisher> Prentice-Hall, </publisher> <year> 1991, </year> <pages> pp. 1-50. </pages>
Reference: [WWW90] <author> Rebecca Wirfs-Brock, Brian Wilkerson, and Lauren Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference: [Woolf97] <author> Bobby Woolf. </author> <title> Polymorphic Hierarchy. The Smalltalk Report. </title> <month> January, </month> <year> 1997. </year> <note> 6(4). Acknowledgments I would like to thank Dana Anthony and Steve Berzcuk for their help in improving this paper. </note>
References-found: 6

