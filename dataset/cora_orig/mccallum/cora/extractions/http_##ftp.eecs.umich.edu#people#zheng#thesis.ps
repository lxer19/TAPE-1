URL: http://ftp.eecs.umich.edu/people/zheng/thesis.ps
Refering-URL: http://ftp.eecs.umich.edu/people/zheng/
Root-URL: http://www.eecs.umich.edu
Title: REAL-TIME FAULT-TOLERANT COMMUNICATION IN COMPUTER NETWORKS  
Author: by Qin Zheng 
Degree: A dissertation submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy  Doctoral Committee: Professor Kang G. Shin, Chairman Professor Semyon M. Meerkov Professor John F. Meyer Professor Katta G. Murty Assistant Professor Chinya V. Ravishankar Associate Professor Wayne E. Stark  
Date: 1993  
Affiliation: (Electrical Engineering: Systems) in The University of Michigan  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Prycker, </author> <title> Asynchronous transfer mode: solution for broadband ISDN, </title> <publisher> Ellis Horwood Limited, </publisher> <address> Chichester, West Sussex, PO191EB, England, </address> <year> 1991. </year>
Reference-contexts: INTRODUCTION 1.1 Background Today's communication networks are characterized by specialization <ref> [1] </ref>. Different networks provide different communication services. Some of the most important existing communication networks include 1. a telephone network which offers the customers two-way voice conversations, 2. a computer network which transports computer data traffic, and 3. a cable TV (CATV) network which delivers television signals. <p> It is thus desirable to integrate a large number of different networks into a single universal network which is capable of providing all types of services. A single service-independent network will have the following advantages <ref> [1] </ref>: 1. Advances in technology may surpass the bandwidth used of existing communication services. New applications may require new communication services. A network capable of delivering all types of services will be able to adapt itself to changing or new needs. 2. <p> Notice that at most two of them can be non-zero. 2 Here "above" means counter-clockwise and "below" means clockwise. 87 Step 2. Set i := 1 and node <ref> [1] </ref> := v s . <p> In Step 2, the initial rotating direction R for the secondary link is chosen such that if node <ref> [1] </ref> has two links both on shortest paths 3 to the destination nodes, node [1]:s will take one of them. In this way, the resulting IFI path needs less links and nodes than when doing otherwise. <p> Otherwise, the channel establishment request is rejected. Theorem 2.8 can be used for the calculation of the link delay bounds in Step 1. Let node [i]; i = 1; ; k be the nodes of an IFI path obtained from Algorithm 5.7, where node <ref> [1] </ref> is the source node and node [k] is the destination node. Let d [i]:p and d [i]:s be the delay bounds over the primary and secondary links of node [i], respectively. Then the end-to-end message delivery delay bound in Step 2 can be calculated using the following algorithm. <p> Since i p and i s are always larger than i for i k 2, the maximum delay bound from node [i] to node [k] can be obtained from the above equations. If d <ref> [1] </ref> D, the IFI real-time channel can be established, and we need to determine the link delay bounds to be assigned to the channel. <p> Notice that there could be two links for i = k 2 or i = k 1. Step 2. Record all the links traversed as one goes from node <ref> [1] </ref> to node [k] using only the links recorded in Step 1. This gives a critical path from the source to the destination which has the end-to-end delay bound d [1] as calculated from Algorithm 5.8. Step 3. Let N be the total number of links on the critical path. <p> Step 2. Record all the links traversed as one goes from node <ref> [1] </ref> to node [k] using only the links recorded in Step 1. This gives a critical path from the source to the destination which has the end-to-end delay bound d [1] as calculated from Algorithm 5.8. Step 3. Let N be the total number of links on the critical path. <p> Step 1. Using Theorem 2.8, calculate the minimum message delay bounds d [i]:p min and d [i]:s min over the primary and secondary links of node [i]; i = 1; ; k 1. Step 2. Calculate the end-to-end delay bound d <ref> [1] </ref> from Algorithm 5.8. Step 3. If d [1] is larger than the user-requested end-to-end delay bound D, the channel request is rejected. <p> Step 1. Using Theorem 2.8, calculate the minimum message delay bounds d [i]:p min and d [i]:s min over the primary and secondary links of node [i]; i = 1; ; k 1. Step 2. Calculate the end-to-end delay bound d <ref> [1] </ref> from Algorithm 5.8. Step 3. If d [1] is larger than the user-requested end-to-end delay bound D, the channel request is rejected. <p> For simplicity, assume C p C. We first construct an IFI path from node 1 to node 8 using Algorithm 5.7. For i = 1, node <ref> [1] </ref> = node 1. (m x ; m y ; m z ) = (2; 0; 2). The initial rotating direction for the secondary link R = 1 since abs (m x ) &gt; 1 and m z 6= 0. <p> Then, for i = 1; ; 8, d [i]:p min = d [i]:s min = C = 5. Using Algorithm 5.8, d [i]'s are calculated and shown near each node in Figure 5.8. The requested real-time channel can be established since d <ref> [1] </ref> = 35 &lt; D = 70. <p> We assume that each host node wants to set up a video channel to a destination node which is h links away, where h is a random integer variable uniformly distributed over <ref> [1; H] </ref>, and 1 H 19 is an integer parameter (H cannot be larger than 19 in a 20-node ring). For each H, we use Protocol 3.3 to establish real-time channels for each node. <p> The lengths of real-time channels are uniformly distributed in <ref> [1; H] </ref>. 136 D = 4T = 120 ms. From Fig. 7.3, we see that with the FDDI-II, the circuit bandwidth can be reduced to be 1.3 times the average signal bandwidth, i.e., 1:3 fi 10:5 Mbps = 13:65 Mbps. <p> After equipping it with fault-tolerant real-time channels, HARTS will become a very promising architecture for critical real-time applications. Extension to the ATM: This thesis assumes the environment of computer networks for the establishment of real-time channels. With the development of BISDN <ref> [1] </ref>, the current telecommunication network will also carry data traffic. The ATM is expected to become the main transfer mode for the BISDN. Thus, it is important to investigate the suitability of the real-time channel concept for the ATM.
Reference: [2] <author> D. Ferrari, </author> <title> "Client requirements for real-time communication services," </title> <type> Technical Report TR-90-007, </type> <institution> International Computer Science Institute, Berkeley, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: Insufficient service quality limits the application domain of computer networks to non real-time data communication only. Services which are not widely provided include digital continuous-media (motion video, audio), timely delivery of urgent messages in real-time control/manufacturing systems, and fast request-reply communication <ref> [2] </ref>. The objective of this research is thus to study how the quality of service can be 4 improved in computer networks. Specifically, in addition to non real-time data communication, we want to provide network users with services which guarantee the timely and reliable delivery of messages. <p> From Algorithm 5.6, the primary link is calculated to be node [1]:p = L (1) = X, and the secondary link is node [1]:s = L (1) + 1 = Z. Set the next node to one which link Z leads to, then node <ref> [2] </ref> = node 2. Update m x ; m y ; m z for node [2] as follows. The direction of Z is Z, so u = Z, and v = X; w = Y . Also, s = 1. <p> Set the next node to one which link Z leads to, then node <ref> [2] </ref> = node 2. Update m x ; m y ; m z for node [2] as follows. The direction of Z is Z, so u = Z, and v = X; w = Y . Also, s = 1.
Reference: [3] <author> R. McFarland, </author> <title> "Protocols in a computer internetworking environment," </title> <booktitle> Proceedings of EASCON 79, </booktitle> <year> 1979. </year>
Reference-contexts: For these applications, we need a third type of service which guarantees the timely, sequenced delivery of messages. The need for providing services which guarantee the timely delivery of messages in computer networks was first noted in <ref> [3] </ref>, recognizing that in addition to the TCP, at least two other types of protocols are desirable: (i) a protocol guaranteeing sequenced, timely delivery of messages without considering the reliability of message delivery, and (ii) a protocol guaranteeing both timeliness and high reliability.
Reference: [4] <author> D. Ferrari and D. C. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. SAC-8, no. 3, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: To counter this problem, a new transfer mode, called the real-time channel, has 6 recently been proposed to support real-time communication in packet-switched networks <ref> [4] </ref>. Real-time channels use two techniques to guarantee end-to-end message delay bound: admission control of channels and deadline scheduling of packet transmissions. Like the circuit-switched transmission, admission control requires a process requesting real-time service to establish a connection (i.e., a real-time channel) before starting packet transmissions. <p> A fundamental problem is then to find the conditions under which a new channel request can be granted without violating existing guarantees. Previously known conditions either used some restrictive assumptions on the channel parameters <ref> [4] </ref> or were sufficient but not necessary [6]. Under such conditions, a channel establishment request could be rejected even if the network has the capacity to accommodate it. <p> However, this result is hardly useful for real-time channels since a message's deadline over one link does not equal to the generation time of the next message in most cases. Ferrari and Verma <ref> [4] </ref> obtained a solution to the schedulability problem under an assumption that the summation of the maximum message transmission times over all real-time channels passing through a link is not larger than the minimum message inter-arrival times of these channels. <p> Since a set of channels which are schedulable under the priority scheduling policy are also schedulable under the deadline scheduling policy, this condition is a sufficient schedulability condition for the deadline scheduling policy. It can be proved that under the assumption of <ref> [4] </ref>, the sufficient condition of [6] is equivalent to the condition of [4]. So, the result of [6] subsumes that of [4]; that is, [6] can deal with situations where the assumption of [4] fails to hold. <p> It can be proved that under the assumption of <ref> [4] </ref>, the sufficient condition of [6] is equivalent to the condition of [4]. So, the result of [6] subsumes that of [4]; that is, [6] can deal with situations where the assumption of [4] fails to hold. <p> It can be proved that under the assumption of <ref> [4] </ref>, the sufficient condition of [6] is equivalent to the condition of [4]. So, the result of [6] subsumes that of [4]; that is, [6] can deal with situations where the assumption of [4] fails to hold. However, using sufficient schedulability conditions for establishing real-time channels may still under-utilize the network's transmission capacity since a violation of the sufficient conditions does not necessarily mean that the channels cannot be established. <p> It can be proved that under the assumption of <ref> [4] </ref>, the sufficient condition of [6] is equivalent to the condition of [4]. So, the result of [6] subsumes that of [4]; that is, [6] can deal with situations where the assumption of [4] fails to hold. However, using sufficient schedulability conditions for establishing real-time channels may still under-utilize the network's transmission capacity since a violation of the sufficient conditions does not necessarily mean that the channels cannot be established. <p> Thus, we get the solution D 3 = maxfD t : t 2 Gg = 9. The correctness of the solution was verified in Example 2.1. 2 We give a comparison of Theorem 2.3 with that of <ref> [4, 6] </ref>. The result of [4] can not be used for this example since C 1 + C 2 + C 3 = 9 &gt; minfT 1 ; T 2 ; T 3 g = 8. <p> Thus, we get the solution D 3 = maxfD t : t 2 Gg = 9. The correctness of the solution was verified in Example 2.1. 2 We give a comparison of Theorem 2.3 with that of [4, 6]. The result of <ref> [4] </ref> can not be used for this example since C 1 + C 2 + C 3 = 9 &gt; minfT 1 ; T 2 ; T 3 g = 8. <p> It paves a solid mathematical basis for the whole real-time channel concept. Compared to the previously obtained results <ref> [4, 6] </ref>, our results allow us to accommodate heterogeneous real-time channels and fully utilize the network's transmission bandwidth. The deadline scheduling theory thus obtained is also a significant generalization of the classical periodic task scheduling theory developed for a single processor [5].
Reference: [5] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The deadline scheduling policy can minimize the effects of queueing delays in the sense that given a set of packets with deadlines, if they are schedulable under any scheduling policy (i.e., every packet can be transmitted before its deadline), so can they under the deadline scheduling policy <ref> [5] </ref>. Thus, the deadline scheduling policy gives the communication network more capacity to accommodate real-time channels than that with other scheduling policies. In other words, the dead line scheduling reduces the probability of rejecting channel establishment requests. 2. <p> Deadline scheduling theory was first studied in <ref> [5] </ref> which presented some results on periodic task scheduling on a single processor. A schedulability condition was obtained under the condition that a task's deadline always equals the generation time of the next task. <p> Thus, it can be concluded that when the requested delay bounds are equal to the minimum message inter-arrival times, the channels are schedulable over the link if and only if the maximum link utilization does not exceed 1. This is the well-known result obtained in <ref> [5] </ref> for the problem of scheduling periodic tasks over a single processor. Thus Theorem 2.1 is a generalization of the schedulability condition of [5]. Two additional properties about the channel schedulability over a single link follow immediately from Theorem 2.1. 1. <p> This is the well-known result obtained in <ref> [5] </ref> for the problem of scheduling periodic tasks over a single processor. Thus Theorem 2.1 is a generalization of the schedulability condition of [5]. Two additional properties about the channel schedulability over a single link follow immediately from Theorem 2.1. 1. Increasing the requested delay bounds D i 's will not affect the schedulability of chan nels. 2. <p> Application of the deadline scheduling theory is not limited to real-time channels only. A link can represent any time-critical resource like a processor, and the channels can represent any periodic time-critical tasks. So, our solutions can also be used for periodic task scheduling problems as those discussed in <ref> [5] </ref>. Actually, the problems addressed in this chapter are more general than the ones in [5] since we do not require the delay bound D to be equal to the task period T and the tasks do not have to be strictly periodic as long as there exists a minimum task <p> So, our solutions can also be used for periodic task scheduling problems as those discussed in <ref> [5] </ref>. Actually, the problems addressed in this chapter are more general than the ones in [5] since we do not require the delay bound D to be equal to the task period T and the tasks do not have to be strictly periodic as long as there exists a minimum task inter-arrival time. <p> Compared to the previously obtained results [4, 6], our results allow us to accommodate heterogeneous real-time channels and fully utilize the network's transmission bandwidth. The deadline scheduling theory thus obtained is also a significant generalization of the classical periodic task scheduling theory developed for a single processor <ref> [5] </ref>. It removes the restriction that the deadline of each task always equal the generation time of the next task, thereby making the theory applicable to a larger number of areas including the deadline scheduling of message transmissions.
Reference: [6] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <booktitle> in Proc. 11th Int. Conf. on Distributed Computer Systems, </booktitle> <pages> pp. 300-307. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: A fundamental problem is then to find the conditions under which a new channel request can be granted without violating existing guarantees. Previously known conditions either used some restrictive assumptions on the channel parameters [4] or were sufficient but not necessary <ref> [6] </ref>. Under such conditions, a channel establishment request could be rejected even if the network has the capacity to accommodate it. <p> CHAPTER 2 DEADLINE SCHEDULING THEORY 2.1 Introduction As discussed in Chapter 1, real-time channels use deadline scheduling for packet transmissions. The advantages of using the deadline scheduling policy are the minimal effects of contention delays and channel protection. However, as pointed out in <ref> [6] </ref>, one major problem of using the deadline scheduling is the difficulty in computing guarantees. <p> This assumption is also quite restrictive in practice since 13 14 it limits the traffic types to be serviced. Without using this assumption, Kandlur et al. <ref> [6] </ref> established a sufficient condition to check the schedulability of channels. They first derived the schedulability conditions from a priority scheduling policy which assigns different priorities to the packets of different channels and the packet with the highest priority in the waiting queue is always transmitted first. <p> Since a set of channels which are schedulable under the priority scheduling policy are also schedulable under the deadline scheduling policy, this condition is a sufficient schedulability condition for the deadline scheduling policy. It can be proved that under the assumption of [4], the sufficient condition of <ref> [6] </ref> is equivalent to the condition of [4]. So, the result of [6] subsumes that of [4]; that is, [6] can deal with situations where the assumption of [4] fails to hold. <p> It can be proved that under the assumption of [4], the sufficient condition of <ref> [6] </ref> is equivalent to the condition of [4]. So, the result of [6] subsumes that of [4]; that is, [6] can deal with situations where the assumption of [4] fails to hold. <p> It can be proved that under the assumption of [4], the sufficient condition of <ref> [6] </ref> is equivalent to the condition of [4]. So, the result of [6] subsumes that of [4]; that is, [6] can deal with situations where the assumption of [4] fails to hold. However, using sufficient schedulability conditions for establishing real-time channels may still under-utilize the network's transmission capacity since a violation of the sufficient conditions does not necessarily mean that the channels cannot be established. <p> Thus, we get the solution D 3 = maxfD t : t 2 Gg = 9. The correctness of the solution was verified in Example 2.1. 2 We give a comparison of Theorem 2.3 with that of <ref> [4, 6] </ref>. The result of [4] can not be used for this example since C 1 + C 2 + C 3 = 9 &gt; minfT 1 ; T 2 ; T 3 g = 8. <p> The result of [4] can not be used for this example since C 1 + C 2 + C 3 = 9 &gt; minfT 1 ; T 2 ; T 3 g = 8. To compare the proposed scheme with that of <ref> [6] </ref>, let us compute the worst-case delay for o 3 's messages from the priority-driven scheduling policy. Since o 3 is not supposed to affect the delay guarantees for o 1 and o 2 's messages, its messages must be assigned the lowest priority. <p> Then, when messages of all three channels (one per channel) arrive at the link simultaneously, the delay of o 3 's messages will be 15. Thus, the solution given by <ref> [6] </ref> to Example 2 would be at least 15. 1 One can see that the gap between the sufficient condition of [6] and our sufficient and necessary condition for the schedulability of real-time channels is quite large, indicating the superiority of the latter. <p> Thus, the solution given by <ref> [6] </ref> to Example 2 would be at least 15. 1 One can see that the gap between the sufficient condition of [6] and our sufficient and necessary condition for the schedulability of real-time channels is quite large, indicating the superiority of the latter. <p> However, as the link utilization P n i=1 C i =T i approaches one, S could become very large. 1 Actually, since 15 is larger than T 3 , <ref> [6] </ref> cannot give a solution for Example 2. 27 One way to deal with this problem is to avoid the heavily-loaded links in the network (e.g., with the utilization &gt; 0:9) during the real-time channel routing phase. <p> However, since the computational complexity of Theorem 2.5 is in the order of the number of channels to be scheduled, Theorem 2.5 is useful when a smaller channel establishment time is required. In this example, the solution obtained from Theorem 2.5 is shown to be better than that of <ref> [6] </ref> (see Example 2.2). Although this cannot be said in general, our solution always requires less computation than that of [6]. 30 2.4 Non-preemptive Deadline Scheduling All results obtained in the last section are based on an assumption that a preemptive deadline scheduling policy is used for message transmissions. <p> In this example, the solution obtained from Theorem 2.5 is shown to be better than that of <ref> [6] </ref> (see Example 2.2). Although this cannot be said in general, our solution always requires less computation than that of [6]. 30 2.4 Non-preemptive Deadline Scheduling All results obtained in the last section are based on an assumption that a preemptive deadline scheduling policy is used for message transmissions. <p> It paves a solid mathematical basis for the whole real-time channel concept. Compared to the previously obtained results <ref> [4, 6] </ref>, our results allow us to accommodate heterogeneous real-time channels and fully utilize the network's transmission bandwidth. The deadline scheduling theory thus obtained is also a significant generalization of the classical periodic task scheduling theory developed for a single processor [5].
Reference: [7] <author> Q. Zheng and K. G. Shin, </author> <title> "On the ability of establishing real-time channels in point-to-point packet-switched networks," </title> <journal> IEEE Transactions on Communication (in press), </journal> <year> 1993. </year>
Reference-contexts: We derive in Chapter 2 some results of deadline scheduling theory from which sufficient and necessary real-time channel establishment conditions can be obtained without any assumptions on the channel parameters <ref> [7] </ref>. Thus, under these conditions, the network transmission resources can be fully utilized when real-time channels are established. Based on the deadline scheduling theory obtained in Chapter 2, we present in Chapter 3 the detailed procedures for channel establishment and message transmissions.
Reference: [8] <author> Q. Zheng and K. G. Shin, </author> <title> "Real-time communication in local area ring networks," </title> <booktitle> in Conference on Local Computer Networks, </booktitle> <pages> pp. 416-425, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In Chapter 4, we present a design of hardware deadline scheduler which can schedule one packet in at most 12 clock cycles <ref> [8, 9] </ref>. In other words, the scheduler can schedule n million packets per second with a 12 fi n MHz clock frequency. The scheduling time is independent of the queue length as long as the total number of real-time channels passing through a link does not exceed the designed capacity.
Reference: [9] <author> A. Indiresan and Q. Zheng, </author> <title> "Design and evaluation of a fast deadline scheduling switch for multicomputers," RTCL working document, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: In Chapter 4, we present a design of hardware deadline scheduler which can schedule one packet in at most 12 clock cycles <ref> [8, 9] </ref>. In other words, the scheduler can schedule n million packets per second with a 12 fi n MHz clock frequency. The scheduling time is independent of the queue length as long as the total number of real-time channels passing through a link does not exceed the designed capacity.
Reference: [10] <author> Q. Zheng and K. G. Shin, </author> <title> "Fault-tolerant real-time communication in distributed computing systems," </title> <booktitle> in in Proc. 22nd Annual International Symposium on Fault-tolerant Computing, </booktitle> <pages> pp. 86 - 93, </pages> <year> 1992. </year>
Reference-contexts: A single node/link failure in the path could disable the whole channel. In networks with sufficient connectivity like meshes and cubes, a basic real-time channel can be made Single Failure Immune (SFI) by adopting a semi-dynamic routing strategy and adding some extra links/nodes to the channel <ref> [10] </ref>. An SFI real-time channel guarantees the timely delivery of messages as long as there is no more than one link/node failure on the channel.
Reference: [11] <author> Q. Zheng and K. G. Shin, </author> <title> "Establishment of isolated failure immune real-time channels in HARTS," </title> <note> submitted for publication, </note> <year> 1992. </year>
Reference-contexts: An SFI real-time channel guarantees the timely delivery of messages as long as there is no more than one link/node failure on the channel. We also show how a class of reliable real-time channels, called Isolated Failure Immune (IFI) real-time channels, can be established in hexagonal mesh networks <ref> [11, 12] </ref>. An IFI real-time channel can tolerate any node/link failures which are not adjacent. For networks where the SFI real-time channels can not be established, backup 11 real-time channels can be established and switched in quickly in case a primary channel becomes faulty.
Reference: [12] <author> K. G. Shin, </author> <title> "HARTS: A distributed real-time architecture," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 25-36, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: An SFI real-time channel guarantees the timely delivery of messages as long as there is no more than one link/node failure on the channel. We also show how a class of reliable real-time channels, called Isolated Failure Immune (IFI) real-time channels, can be established in hexagonal mesh networks <ref> [11, 12] </ref>. An IFI real-time channel can tolerate any node/link failures which are not adjacent. For networks where the SFI real-time channels can not be established, backup 11 real-time channels can be established and switched in quickly in case a primary channel becomes faulty. <p> [0:31] WAIT Packet ID to PQ Packet ID to M2 R1 [6:63] ==&gt; DR2 1 ==&gt; FLAG M1 (R1 [0:5]) ==&gt; DR1 R1 [0:5] ==&gt; AR1 [0:5] Otherwise Otherwise IN = 0 FLAG = 0 & OUT = 0 IN = 1 FLAG = 0 & OUT = 0 DR1 <ref> [12] </ref> = 0 DR1 [12] = 1 1 2 5 6 9 12 58 1 ==&gt; SHIFT M1 [PDO [0:5]] ==&gt; DR1 1 ==&gt; FLAG; 0 ==> SHIFT Shift PQ DR1 [0:5] ==&gt; AR2 [6:11] M2 [AR2] ==&gt; DR2 DR1 [0:5]+1 ==&gt; DR1 [0:5] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase <p> to PQ Packet ID to M2 R1 [6:63] ==&gt; DR2 1 ==&gt; FLAG M1 (R1 [0:5]) ==&gt; DR1 R1 [0:5] ==&gt; AR1 [0:5] Otherwise Otherwise IN = 0 FLAG = 0 & OUT = 0 IN = 1 FLAG = 0 & OUT = 0 DR1 <ref> [12] </ref> = 0 DR1 [12] = 1 1 2 5 6 9 12 58 1 ==&gt; SHIFT M1 [PDO [0:5]] ==&gt; DR1 1 ==&gt; FLAG; 0 ==> SHIFT Shift PQ DR1 [0:5] ==&gt; AR2 [6:11] M2 [AR2] ==&gt; DR2 DR1 [0:5]+1 ==&gt; DR1 [0:5] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase 1 IF DR1 [0:5] <p> M2 [AR2] ==&gt; DR2 DR1 [0:5]+1 ==&gt; DR1 [0:5] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase 1 IF DR1 [0:5] = DR1 [6:11] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase 1 DR1 ==&gt; M1 (PDO [0:5]) 0 ==&gt; FLAG DR1 ==&gt; M1 (PDO [0:5]) 0 ==&gt; FLAG 0 ==&gt; DR1 <ref> [12] </ref> IDLE WAIT Otherwise Otherwise FLAG = 0 FLAG = 0 OUT = 0 OUT = 1 Get a packet ID from M2 No more packets of the channel 0 3 4 13 14 59 3160 DATA2 DATA 1 PACKET ADDRESS PACKET DEADLINECHANNEL ID ison and insertion. <p> At the Real-Time Computing Laboratory, the University of Michigan, we are currently building an experimental distributed real-time fault-tolerant systems called HARTS <ref> [12] </ref>. HARTS has a wrapped hexagonal mesh interconnection network as shown in Figure 5.5 which can be defined as follows. Definition 5.2 Let [a] b denote a mod b. <p> A key problem is an efficient implementation of the deadline scheduling of message transmissions. We have proposed in Chapter 4 a preliminary design of a fast deadline scheduler. The next step is to refine and implement the design. The HARTS <ref> [12] </ref> currently being built at the Real-Time Computing Laboratory is an ideal platform to perform experiments on real-time channels. The point-to-point connected hexagonal topology of HARTS will allow us to conduct experiments ranging from the basic real-time channels to the highly reliable IFI real-time channels.
Reference: [13] <author> K. G. Shin and Q. Zheng, "FDDI-M: </author> <title> a scheme to double FDDI's ability of supporting synchronous traffic," </title> <note> submitted for publication, 1992. 152 153 </note>
Reference-contexts: This chapter shows how the real-time channels can be established over FDDI local area networks. A modification to the FDDI, called the FDDI-M, is also proposed which significantly improves a network's capacity of supporting real-time traffic <ref> [13, 14] </ref>. The new protocol can be implemented with minor modifications to the existing FDDI networks. One of the main applications of real-time communication is multimedia networking. Interactive continuous-media communication like digital motion video needs timely delivery of messages. Messages arrived late will be discarded but deteriorate transmission quality. <p> P BUS 1 6:63 0:5 58 0:25 14 14 58 58 65 0:5 0:5 OUT 57 -R1 [0:5], DR2- ==&gt; PQ (PAR) phase 1 -R1 [0:5], DR2- ==&gt; PQ (PAR) phase 2 1 ==&gt; FLAG DR2 [0:25] ==&gt; PAR DR1 ==&gt; M1 (R1 [0:5]) 0 ==&gt; FLAG 1 ==&gt; DR1 <ref> [13] </ref> DR2 ==&gt; M2 (AR2) IDLE BUS 1 ==&gt; R1 [0:31] WAIT Packet ID to PQ Packet ID to M2 R1 [6:63] ==&gt; DR2 1 ==&gt; FLAG M1 (R1 [0:5]) ==&gt; DR1 R1 [0:5] ==&gt; AR1 [0:5] Otherwise Otherwise IN = 0 FLAG = 0 & OUT = 0 IN =
Reference: [14] <author> K. G. Shin and Q. Zheng, </author> <title> "Mixed time-constrained and non-time-constrained communications in local area networks," </title> <journal> IEEE Transactions on Communication (in press), </journal> <year> 1993. </year>
Reference-contexts: This chapter shows how the real-time channels can be established over FDDI local area networks. A modification to the FDDI, called the FDDI-M, is also proposed which significantly improves a network's capacity of supporting real-time traffic <ref> [13, 14] </ref>. The new protocol can be implemented with minor modifications to the existing FDDI networks. One of the main applications of real-time communication is multimedia networking. Interactive continuous-media communication like digital motion video needs timely delivery of messages. Messages arrived late will be discarded but deteriorate transmission quality.
Reference: [15] <author> Q. Zheng, K. G. Shin, and E. Abram-Profeta, </author> <title> "Transmission of compressed digital motion video over computer networks," </title> <note> to appear in COMPCON Spring'93, </note> <year> 1993. </year>
Reference-contexts: Usage of the fixed bandwidth circuits for those applications with highly-varying signal rates wastes link bandwidth. In Chapter 7, we show how the real-time channel protocol can be used to support the transmission of digital motion video <ref> [15] </ref>. When comparing to the conventional circuit switching, the real-time channel protocol is shown to remove the waste of link bandwidth, and when comparing to the conventional packet switching, the real-time channel protocol is shown to remove the uncertainty in message transmission delays.
Reference: [16] <author> D. Peng, </author> <title> Modeling, assignment and scheduling of tasks in distributed real-time systems, </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, The University of Michigan, </institution> <address> Ann Arbor, MI, </address> <year> 1989. </year>
Reference-contexts: Peng <ref> [16] </ref> proved that a sufficient schedulability condition is P n i=1 C i =T i . <p> have another sufficient condition in terms of the system hazard: max f (1 + (1 i=1 k X C i =T k ) 1 g: Since C i =T k C i =T i , it can be proved that the above sufficient condition is tighter than Peng's condition in <ref> [16] </ref>. The following example shows how much of improvement can be achieved. Suppose there are two channels, * o 1 : T 1 = 4; C 1 = 2, Using Peng's condition, the minimum system hazard is P 2 i=1 C i =T i = 0:75.
Reference: [17] <author> W. J. Dally and C. L. Seitz, </author> <title> "The torus routing chip," </title> <journal> J. Distributed Systems, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 187-196, </pages> <year> 1986. </year>
Reference-contexts: Here by "fast" we mean that the switching/processing time of a packet can be controlled under the packet transmission time. There has been extensive research on fast switch design <ref> [17, 18, 19, 20, 21] </ref>. With an output-buffer architecture, switches supporting Gbps transmission links have been shown to be feasible with the available VLSI technology [22]. However, to implement real-time channels, a switch must perform an extra function: scheduling of packet transmissions.
Reference: [18] <author> D. A. Reed and R. M. Fujimoto, </author> <title> Multicomputer Networks: Message-Based Parallel Processing, </title> <editor> M. I. T. </editor> <publisher> Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: Here by "fast" we mean that the switching/processing time of a packet can be controlled under the packet transmission time. There has been extensive research on fast switch design <ref> [17, 18, 19, 20, 21] </ref>. With an output-buffer architecture, switches supporting Gbps transmission links have been shown to be feasible with the available VLSI technology [22]. However, to implement real-time channels, a switch must perform an extra function: scheduling of packet transmissions.
Reference: [19] <author> J. W. Dolter, P. Ramanathan, and K. G. Shin, </author> <title> "A microprogrammable VLSI routing controller for HARTS," </title> <booktitle> in International Conference on Computer Design: VLSI in Computers, </booktitle> <pages> pp. 160-163, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Here by "fast" we mean that the switching/processing time of a packet can be controlled under the packet transmission time. There has been extensive research on fast switch design <ref> [17, 18, 19, 20, 21] </ref>. With an output-buffer architecture, switches supporting Gbps transmission links have been shown to be feasible with the available VLSI technology [22]. However, to implement real-time channels, a switch must perform an extra function: scheduling of packet transmissions.
Reference: [20] <author> H. Ahmadi and W. E. Denzel, </author> <title> "A survey of moden high-performance switching techniques," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 7, no. 7, </volume> <pages> pp. 1091-1102, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Here by "fast" we mean that the switching/processing time of a packet can be controlled under the packet transmission time. There has been extensive research on fast switch design <ref> [17, 18, 19, 20, 21] </ref>. With an output-buffer architecture, switches supporting Gbps transmission links have been shown to be feasible with the available VLSI technology [22]. However, to implement real-time channels, a switch must perform an extra function: scheduling of packet transmissions.
Reference: [21] <author> F. A. Tobagi, </author> <title> "Fast packet switch architectures for broadband integrated services digital networks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 78, no. 1, </volume> <pages> pp. 133-167, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Here by "fast" we mean that the switching/processing time of a packet can be controlled under the packet transmission time. There has been extensive research on fast switch design <ref> [17, 18, 19, 20, 21] </ref>. With an output-buffer architecture, switches supporting Gbps transmission links have been shown to be feasible with the available VLSI technology [22]. However, to implement real-time channels, a switch must perform an extra function: scheduling of packet transmissions.
Reference: [22] <author> H. Suzuki, H. Nagano, and T. Suzuki, </author> <title> "Output-buffer switch architecture for asynchronous transfer mode," </title> <booktitle> in Proceedings of International Conference on Communications, </booktitle> <pages> pp. </pages> <address> 4.1.1 - 4.1.5, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: There has been extensive research on fast switch design [17, 18, 19, 20, 21]. With an output-buffer architecture, switches supporting Gbps transmission links have been shown to be feasible with the available VLSI technology <ref> [22] </ref>. However, to implement real-time channels, a switch must perform an extra function: scheduling of packet transmissions.
Reference: [23] <author> D. D. Kandlur, </author> <title> Networking in Distributed Real-Time Systems, </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <year> 1991. </year>
Reference-contexts: In either case, the whole waiting queue must be searched once for every packet transmitted. Previous research on real-time channels simply ignored the scheduling time by assuming a fast network processor which performs the packet insertion/deletion in software <ref> [23] </ref>. However, for a communication network with high link bandwidth (say larger 51 52 than 100Mbps) and short packet size (say less than 1000 bits), the transmission time of a packet is of the order of microseconds. This makes the above assumption impractical.
Reference: [24] <author> K. G. Shin, </author> <title> "HARTS: A distributed real-time architecture," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 25-35, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Each node is composed of one or more application processors and a network processor. Application 53 Application Processor Network Processor processors execute application programs and the network processors provide an interface for the application processors to communicate with application processors in other nodes. As discussed in <ref> [24] </ref>, the usage of network processors can o*oad communication overhead from the application processors and increase parallelism between computation and communication. The main functions of a conventional network processor are packet processing and routing. It also buffers incoming packets when there are contentions at outgoing links.
Reference: [25] <author> M.-S. Chen, K. G. Shin, and D. D. Kandlur, </author> <title> "Addressing, routing and broadcasting in hexagonal mesh multiprocessors," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 39, no. 1, </volume> <pages> pp. 10-18, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: We discuss in this section how the problem can be solved by choosing a proper network topology. If a network has a wrapped hexagonal mesh topology <ref> [25] </ref>, one can readily establish Isolated Failure Immune (IFI) real-time channels. An IFI real-time channel guarantees the timely delivery of messages in the presence of network component failures as long as the failures are isolated with respect to the channel. <p> One important result obtained from the HARTS project is the routing algorithm in a wrapped hexagonal mesh network. It was proved in <ref> [25] </ref> that a wrapped hexagonal 84 mesh is homogeneous. Consequently, any node can view itself as the center of the mesh. <p> Let m x ; m y , and m z be, respectively, the number of hops (negative values mean the moves in negative directions) from the source node to the destination node along the X; Y; and Z directions on a shortest path. The following routing algorithm <ref> [25] </ref> determines the values of m x , m y , and m z for the shortest paths from a source node s to a destination node d in a wrapped hexagonal mesh of size n: Algorithm 5.5 (Routing in HARTS) . Step 0.
Reference: [26] <author> A. M. Farley, </author> <title> "Networks immune to isolated failures," </title> <journal> Networks, </journal> <volume> vol. 11, </volume> <pages> pp. 255-268, </pages> <year> 1981. </year>
Reference-contexts: Figure 5.4 shows an example of an IFI channel from node 1 to node 6 and one pattern of tolerable isolated failures. The isolated failure immune communication problem for undirected networks was first discussed in <ref> [26] </ref> where the authors proved that a 2-tree 1 is a minimum IFI network. In other words, any IFI network must contain a spanning 2-tree. This result excludes almost all 1 A 2-tree can be constructed as follows. Two nodes connected by a link is a 2-tree.
Reference: [27] <author> A. Tanenbaum, </author> <title> Computer Networks, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1989. </year>
Reference-contexts: Nodes' access to the bus or ring is controlled by a Medium Access Control (MAC) protocol. The MAC protocol can be contention-based or non contention-based. A typical contention-based MAC protocol is the IEEE 802.3 (also called CSMA/CD) used for the Ethernet <ref> [27, 28] </ref> in which all nodes are connected together by a common bus. Each node is allowed to transmit its packets when it senses the idle bus. Due to the propagation delay, transmissions may collide when two nodes sense the idle bus and transmit their packets simultaneously. <p> Since no deterministic medium access time is guaranteed, the Ethernet is not suitable for real-time communication. Under non contention-based MAC protocols like the IEEE 802.4 token bus, IEEE 802.5 token ring, and the FDDI token ring <ref> [27, 28] </ref>, the access to a shared-medium is controlled by a token circulating among nodes. Only the node which has the token is allowed to transmit packets, and the transmission time is controlled by a few internal timers of the node.
Reference: [28] <author> W. Stallings, </author> <title> Data and Computer Communications, </title> <publisher> Macmillan Publishing Company, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: Nodes' access to the bus or ring is controlled by a Medium Access Control (MAC) protocol. The MAC protocol can be contention-based or non contention-based. A typical contention-based MAC protocol is the IEEE 802.3 (also called CSMA/CD) used for the Ethernet <ref> [27, 28] </ref> in which all nodes are connected together by a common bus. Each node is allowed to transmit its packets when it senses the idle bus. Due to the propagation delay, transmissions may collide when two nodes sense the idle bus and transmit their packets simultaneously. <p> Since no deterministic medium access time is guaranteed, the Ethernet is not suitable for real-time communication. Under non contention-based MAC protocols like the IEEE 802.4 token bus, IEEE 802.5 token ring, and the FDDI token ring <ref> [27, 28] </ref>, the access to a shared-medium is controlled by a token circulating among nodes. Only the node which has the token is allowed to transmit packets, and the transmission time is controlled by a few internal timers of the node.
Reference: [29] <author> F. E. Ross, </author> <title> "An overview of FDDI: The fiber distributed data interface," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 7, no. 7, </volume> <pages> pp. 1043 - 1051, </pages> <month> September </month> <year> 1989. </year> <month> 154 </month>
Reference-contexts: The chapter concludes with Section 6.6. 103 6.2 Preliminaries The Fiber Distributed Data Interface (FDDI) is a proposed ANSI standard for a 100 Mbps token ring network using a fiber-optic medium <ref> [29, 30] </ref>. During the past several years, a large number of FDDI networks have been installed and this number is still increasing rapidly. <p> Suppose the TTRT is set to be T =2 (As discussed in <ref> [29] </ref>, TTRT should not be set too small in order to achieve a high network efficiency), the high-priority token holding time of the node then must be set to no smaller than C in order to give the node enough time to transmit at least one message after getting the token. <p> To remedy this inflexibility, a hybrid transmission protocol, called the FDDI-II, has been proposed to add time-division circuit-switched transmission to the existing packet-switched FDDI networks <ref> [29, 42] </ref>. In an FDDI-II network, users can set up circuits with bandwidth of multiples of 64 Kbps up to 98.304 Mbps. In this way, continuous media communication like digital voice and video transmissions can be readily accommodated.
Reference: [30] <author> A. C. Weaver, </author> <title> "Local area networks and busses an analysis," </title> <type> Technical report, </type> <institution> Flight Data Systems, NASA-Johnson Space Center, </institution> <year> 1986. </year>
Reference-contexts: The chapter concludes with Section 6.6. 103 6.2 Preliminaries The Fiber Distributed Data Interface (FDDI) is a proposed ANSI standard for a 100 Mbps token ring network using a fiber-optic medium <ref> [29, 30] </ref>. During the past several years, a large number of FDDI networks have been installed and this number is still increasing rapidly. <p> The main reason for the FDDI's deficiency in supporting real-time communication is that the target token rotation time TTRT cannot always control the actual token rotation time below TTRT. As proved in <ref> [30] </ref>, the worst-case token rotation time could be twice as large as TTRT. Thus, to guarantee an access delay bound, say d, the T T RT must be set to no larger than d=2 instead of d. <p> Notice that a packet's type is identified by the first bit of the Frame Control (FC) field in the packet's header <ref> [30] </ref>, thus no need to change the packet format. The use of the late counter L c can also be eliminated since the token will never be late under the modified token passing protocol. <p> We carry out extensive simulations to verify the advantages of the FDDI-M over FDDI and FDDI-II. The network simulated is a medium-size FDDI single ring of 50 nodes and 92-kilometer ring length. Assuming a node latency of 0.6 microsecond and a propagation delay of 5.085 microseconds per kilometer <ref> [30] </ref>, the ring has a latency T ring = 0:5 ms. According to the FDDI standard, the maximum-packet size is 36 Kbits, and thus, the maximum packet transmission time C p = 0:36 ms. The synchronous traffic under consideration is the digital motion video signals compressed with the MPEG [44].
Reference: [31] <institution> FDDI Station Management (SMT) draft proposed. American National Standard, ANSI X3T9/92-067, </institution> <month> June 25, </month> <year> 1992. </year>
Reference-contexts: Violation of this constraint would make the ring unstable and oscillate between "claiming" and "operational" <ref> [31] </ref>. Under this protocol constraint, a well-known fact about the FDDI is that the worst-case token rotation time is bounded by 2 fi T T RT , and the 105 average token rotation time is bounded by TTRT [32].
Reference: [32] <author> K. C. Sevcik and M. J. Johnson, </author> <title> "Cycle time properties of the FDDI token ring protocol," </title> <type> Technical Report CSRI-179, </type> <institution> Computer Science Research Institute, University of Toronto, </institution> <year> 1986. </year>
Reference-contexts: Under this protocol constraint, a well-known fact about the FDDI is that the worst-case token rotation time is bounded by 2 fi T T RT , and the 105 average token rotation time is bounded by TTRT <ref> [32] </ref>. A more general result was obtained in a recent paper [33] as stated below. Lemma 6.1 (Worst-case token rotation times) .
Reference: [33] <author> G. Agrawal, B. Chen, W. Zhao, and S. Davari, </author> <title> "Guaranteeing synchronous message deadlines with the timed token protocol," </title> <booktitle> in Proceedings of IEEE International Conference on Distributed Computing Systems. IEEE, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Under this protocol constraint, a well-known fact about the FDDI is that the worst-case token rotation time is bounded by 2 fi T T RT , and the 105 average token rotation time is bounded by TTRT [32]. A more general result was obtained in a recent paper <ref> [33] </ref> as stated below. Lemma 6.1 (Worst-case token rotation times) . Under the protocol constraint (6.1) of the FDDI, the time elapsed between any n consecutive token's visits to a node i is bounded by n fi T T RT h i . <p> Once node i gets the token, it is given up to h i units of time to transmit its synchronous packets. The following lemma gives a lower bound of time that node i is allowed to transmit its synchronous packets during a time period t <ref> [33] </ref>. Lemma 6.2 (Synchronous transmission time) . Under the protocol constraint (6.1) of the FDDI, node i has at least bt=T T RT 1c h i units of time to transmit its synchronous packets during a time period t. <p> An SBA scheme is said to be optimal if it is always feasible whenever there exists a feasible SBA scheme. Using Lemma 6.2, a normalized proportional SBA scheme was proposed in <ref> [33] </ref> which has the following features and/or problems. 1. The scheme can be used for real-time channels with d i = T i only. In other words, it can establish only those real-time channels whose requested message delay bound d i equal the message generation period T i . 2. <p> Use of a global SBA scheme also complicates the synchronous bandwidth allocation protocol, making it difficult to implement. As an improvement of the scheme in <ref> [33] </ref>, Chen et al. proposed an optimal SBA scheme in a recent paper [34]. However, it still suffers the limitation of d i = T i and is a global scheme. <p> Comparing with the SBA schemes of <ref> [33] </ref> and [34], Algorithm 6.1 has the following advantages. Generality: The SBA schemes of [33, 34] can establish real-time channels with d i = T i only, while Algorithm 6.1 can establish channels of arbitrary parameters, i.e., d i T i or d i &gt; T i . <p> Comparing with the SBA schemes of [33] and [34], Algorithm 6.1 has the following advantages. Generality: The SBA schemes of <ref> [33, 34] </ref> can establish real-time channels with d i = T i only, while Algorithm 6.1 can establish channels of arbitrary parameters, i.e., d i T i or d i &gt; T i . <p> Real-time channels with d i &gt; T i are also useful for multimedia applications. Thus restricting d i = T i would greatly limit a network's ability and effectiveness of supporting real-time communications. Optimality: The SBA scheme of <ref> [33] </ref> is not optimal, even under the restrictive assumption d i = T i . Thus a real-time channel establishment request may be rejected even if 113 it can be established using another scheme. <p> The SBA scheme of [34] is optimal under the restrictive assumption of d i = T i and requires complex computations. By contrast, Algorithm 6.1 is optimal for d i T i + T T RT (which subsumes the special case d i = T i of <ref> [33, 34] </ref>) as well as for some other cases when the exact value of ff n can be calculated (see Algorithm 6.2), because it is based on the necessary and sufficient conditions of Theorem 6.1, and the computation of the optimal bandwidths is simple and straightforward. <p> Rejection of a channel establishment request by Algorithm 6.1 means the violation of the necessary conditions, implying that the channel cannot be established with any other scheme. Simplicity: The SBA schemes of <ref> [33, 34] </ref> are global schemes in the sense that the addition/removal of a channel or change of the parameters of a channel would require adjustment of the high-priority token holding times of all nodes in the network. This requires a complex SBA protocol. <p> This requires a complex SBA protocol. By contrast, Algorithm 6.1 needs only local para meter adjustment, thereby making it far easier to implement than those in <ref> [33, 34] </ref>. We now investigate an FDDI network's capacity of supporting real-time communication. <p> to be the worst-case achievable utilization of a network if the network can accommodate every set of real-time channels with utilization U w , and for any U &gt; U w , there exists a set of real-time channels with utilization U which can not be accommodated by the network <ref> [33] </ref>. The following theorem gives the worst-case achievable utilization of an FDDI network using Algorithm 6.1. Theorem 6.3 (Worst-case achievable utilization of FDDI) . Let = minfd i =T i : i = 1; ; ng. <p> In other words, no other SBA scheme can guarantee the establishment of a set of real-time channels with utilization &gt; U w = =3. In <ref> [33] </ref>, Agrawal et al. proved that their normalized proportional SBA scheme has a worst-case achievable utilization of 33% when d i = T i . Thus their scheme, albeit not optimal, reaches the highest worst-case achievable utilization.
Reference: [34] <author> B. Chen, G. Agrawal, and W. Zhao, </author> <title> "Optimal synchronous capacity allocation for hard real-time communications with the timed token protocol," </title> <booktitle> in Proc. Real-Time Systems Symposium. IEEE, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Use of a global SBA scheme also complicates the synchronous bandwidth allocation protocol, making it difficult to implement. As an improvement of the scheme in [33], Chen et al. proposed an optimal SBA scheme in a recent paper <ref> [34] </ref>. However, it still suffers the limitation of d i = T i and is a global scheme. Besides, it uses an iterative algorithm for the calculation of the optimal bandwidths which may, in theory, need an infinite number of steps to converge. <p> Comparing with the SBA schemes of [33] and <ref> [34] </ref>, Algorithm 6.1 has the following advantages. Generality: The SBA schemes of [33, 34] can establish real-time channels with d i = T i only, while Algorithm 6.1 can establish channels of arbitrary parameters, i.e., d i T i or d i &gt; T i . <p> Comparing with the SBA schemes of [33] and [34], Algorithm 6.1 has the following advantages. Generality: The SBA schemes of <ref> [33, 34] </ref> can establish real-time channels with d i = T i only, while Algorithm 6.1 can establish channels of arbitrary parameters, i.e., d i T i or d i &gt; T i . <p> Optimality: The SBA scheme of [33] is not optimal, even under the restrictive assumption d i = T i . Thus a real-time channel establishment request may be rejected even if 113 it can be established using another scheme. The SBA scheme of <ref> [34] </ref> is optimal under the restrictive assumption of d i = T i and requires complex computations. <p> The SBA scheme of [34] is optimal under the restrictive assumption of d i = T i and requires complex computations. By contrast, Algorithm 6.1 is optimal for d i T i + T T RT (which subsumes the special case d i = T i of <ref> [33, 34] </ref>) as well as for some other cases when the exact value of ff n can be calculated (see Algorithm 6.2), because it is based on the necessary and sufficient conditions of Theorem 6.1, and the computation of the optimal bandwidths is simple and straightforward. <p> Rejection of a channel establishment request by Algorithm 6.1 means the violation of the necessary conditions, implying that the channel cannot be established with any other scheme. Simplicity: The SBA schemes of <ref> [33, 34] </ref> are global schemes in the sense that the addition/removal of a channel or change of the parameters of a channel would require adjustment of the high-priority token holding times of all nodes in the network. This requires a complex SBA protocol. <p> This requires a complex SBA protocol. By contrast, Algorithm 6.1 needs only local para meter adjustment, thereby making it far easier to implement than those in <ref> [33, 34] </ref>. We now investigate an FDDI network's capacity of supporting real-time communication.
Reference: [35] <author> R. M. </author> <title> Grow, "A timed token protocol for local area networks," </title> <booktitle> in Electro 82, </booktitle> <month> May </month> <year> 1982. </year>
Reference-contexts: removed by updating h s := h s ffih s at the source node, and T S := T S ffih s ffi P in the token. 118 6.5 A New MAC Protocol: FDDI-M The token passing scheme used for the MAC protocol of the FDDI was proposed in 1982 <ref> [35] </ref>. Since then, a large number of papers have been published uncovering various properties of the protocol. However, few have discussed the rational and possible improvements of the protocol itself.
Reference: [36] <author> M. J. Johnson, </author> <title> "Fairness of channel access for non-time-critical traffic using the FDDI token ring protocol," </title> <booktitle> Proc. seminar real-time local area networks, </booktitle> <pages> pp. 145-157, </pages> <year> 1986. </year>
Reference-contexts: Another salient feature of an FDDI network is its fairness in transmitting asynchronous messages <ref> [36] </ref>. If a number of nodes have a large amount of asynchronous traffic to transmit, then all nodes will achieve approximately an identical average asynchronous 124 throughput. FDDI-M preserves this feature.
Reference: [37] <author> M. Liebhold and E. M. Hoffert, </author> <title> "Toward an open enviroment for digital video," </title> <journal> Communication of ACM, </journal> <volume> vol. 34, no. 4, </volume> <pages> pp. 104 - 112, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Extensive work has been reported on the development of video processor, multimedia workstations, and network support for this new application <ref> [37, 38, 39, 40, 41] </ref>. Traditionally, video signals are transmitted over dedicated circuits only, e.g., the CATV. Clearly, this kind of service lacks flexibility (mainly for broadcasting or fixed point-to-point communication) and is not easily adaptable to computer networks for which packet switching is commonly used. <p> In this way, continuous media communication like digital voice and video transmissions can be readily accommodated. However, the problem with the fixed-bandwidth circuits is the inefficient use of link bandwidth <ref> [37] </ref>. The bit-rate of digital video signals, after compressed, is highly time 126 127 varying, with the peak rate several times higher than the average rate. <p> By statistically multiplexing packets on transmission links, packet switched transmission is believed to be able to support variable bit-rate transmissions and make more efficient use of link bandwidth <ref> [37] </ref>. However, due to the contention delays at intermediate nodes, packet-switched transmission does not guarantee timely delivery of packets. This causes a serious problem in transmitting real-time motion video where each video frame is required to be delivered in a timely manner.
Reference: [38] <author> E. A. Fox, </author> <title> "Advances in interactive digital multimedia systems," </title> <booktitle> Computer, </booktitle> <pages> pp. 9 - 21, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Extensive work has been reported on the development of video processor, multimedia workstations, and network support for this new application <ref> [37, 38, 39, 40, 41] </ref>. Traditionally, video signals are transmitted over dedicated circuits only, e.g., the CATV. Clearly, this kind of service lacks flexibility (mainly for broadcasting or fixed point-to-point communication) and is not easily adaptable to computer networks for which packet switching is commonly used.
Reference: [39] <author> B. I. Szabo and G. K. Wallace, </author> <title> "Design considerations for JPEG video and synchronized audio in a Unix workstation enviroment," </title> <booktitle> in proceedings of summer 1991 Usenix Conference, </booktitle> <pages> pp. 353 - 368, </pages> <year> 1991. </year>
Reference-contexts: Extensive work has been reported on the development of video processor, multimedia workstations, and network support for this new application <ref> [37, 38, 39, 40, 41] </ref>. Traditionally, video signals are transmitted over dedicated circuits only, e.g., the CATV. Clearly, this kind of service lacks flexibility (mainly for broadcasting or fixed point-to-point communication) and is not easily adaptable to computer networks for which packet switching is commonly used.
Reference: [40] <author> T. D. C. Little and A. Ghafoor, </author> <title> "Network considerations for distributed multimedia object composition and communication," </title> <journal> IEEE network magazine, pp. </journal> <volume> 32 - 49, </volume> <month> November </month> <year> 1990. </year>
Reference-contexts: Extensive work has been reported on the development of video processor, multimedia workstations, and network support for this new application <ref> [37, 38, 39, 40, 41] </ref>. Traditionally, video signals are transmitted over dedicated circuits only, e.g., the CATV. Clearly, this kind of service lacks flexibility (mainly for broadcasting or fixed point-to-point communication) and is not easily adaptable to computer networks for which packet switching is commonly used.
Reference: [41] <author> M.-S. Chen, Z.-Y. Shae, D. D. Kandlur, T. P. Barzrilai, and H. M. Vin, </author> <title> "A multimedia desktop collaboration system," </title> <type> Research Report, </type> <institution> IBM Research Division, T. J. Watson Research Center, </institution> <year> 1992. </year>
Reference-contexts: Extensive work has been reported on the development of video processor, multimedia workstations, and network support for this new application <ref> [37, 38, 39, 40, 41] </ref>. Traditionally, video signals are transmitted over dedicated circuits only, e.g., the CATV. Clearly, this kind of service lacks flexibility (mainly for broadcasting or fixed point-to-point communication) and is not easily adaptable to computer networks for which packet switching is commonly used.
Reference: [42] <author> M. Teener and R. Gvozdanovic, </author> <title> "FDDI-II operation and architectures," </title> <booktitle> in proceedings of the 14th conference on local computer networks, </booktitle> <pages> pp. 49-61, </pages> <year> 1989. </year>
Reference-contexts: To remedy this inflexibility, a hybrid transmission protocol, called the FDDI-II, has been proposed to add time-division circuit-switched transmission to the existing packet-switched FDDI networks <ref> [29, 42] </ref>. In an FDDI-II network, users can set up circuits with bandwidth of multiples of 64 Kbps up to 98.304 Mbps. In this way, continuous media communication like digital voice and video transmissions can be readily accommodated.
Reference: [43] <author> G. K. Wallace, </author> <title> "The JPEG still picture compression standard," </title> <journal> Communication of ACM, </journal> <volume> vol. 34, no. 4, </volume> <pages> pp. 30 - 43, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The video data used here are obtained from a sequence of CNN headline news, stored on a laser disk. The size of each frame is 512 fi 512 black and white pixels. The number of bits in each frame, after compressed with JPEG <ref> [43] </ref>, is plotted in Fig. 7.1. At a 30 frames/second transmission rate, the video sequence needs an average 10.5 Mbps, and a peak 15.3 Mbps transmission bandwidth. The frame-transmission delays using a fixed-bandwidth circuit are easy to calculate.
Reference: [44] <author> D. Gall, </author> <title> "MPEG: a video compression standard for multimedia applications," </title> <journal> Communications of the ACM, </journal> <pages> pp. 46-58, </pages> <year> 1991. </year>
Reference-contexts: According to the FDDI standard, the maximum-packet size is 36 Kbits, and thus, the maximum packet transmission time C p = 0:36 ms. The synchronous traffic under consideration is the digital motion video signals compressed with the MPEG <ref> [44] </ref>. Each MPEG video channel has an average signal rate of approximately 1.5 Mbps and the video frames are transmitted at the rate of 30 frames/second. Thereby the frame generation period T = 33 ms. Each video frame is required to be transmitted before the generation of the next frame.
References-found: 44

