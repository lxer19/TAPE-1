URL: ftp://ftp.cs.brown.edu/pub/techreports/94/cs94-43.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-94-43.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [Akyu92] <author> S. Akyurek, K. Salem, </author> <title> "Placing Replicated Data to Reduce Seek Delays" Proc. </title> <booktitle> USENIX File System Conference, </booktitle> <month> May </month> <year> 1992. </year> <type> (also Tech. Rep. </type> <institution> CS-TR-2746, University of Maryland, College Park). </institution>
Reference-contexts: Finally, the tradeoff between replication to support access to hot data while making cold data more expensive to access has been investigated for magnetic disks <ref> [Akyu92] </ref>. 23 7 Summary and Future Work In this paper, we have described our design of a multilevel broadcast disk and cache management policies for this style of memory.
Reference: [Anto93] <author> C. Antonelli, P. Honeyman, </author> <title> "Integrating Mass Storage and File Systems", </title> <booktitle> Proc. 12th IEEE Symposium on Mass Storage Systems, </booktitle> <year> 1993. </year>
Reference-contexts: The need for cost-based caching and page replacement has been recognized in other domains in which there is a wide variation in the cost of obtaining data from different levels of the storage hierarchy. For example, <ref> [Anto93] </ref> describes the need for considering "cost of acquisition" for page replacement in deep-store file systems involving tertiary mass storage.
Reference: [Arch86] <author> J. Archibald, J. Baer, </author> <title> "Cache Coherence Protocols: Evaluation Using a Multiprocessor Simulation Model", </title> <journal> ACM TOCS, </journal> <volume> 4(4), </volume> <month> November, </month> <year> 1986. </year>
Reference-contexts: This observation leads to a novel and important result of this work: namely, that the introduction of broadcast fundamentally changes the role of client caching in a client-server information system. In traditional, pull-based systems (e.g., <ref> [Arch86, Howa88, Wilk90, Care91, Wang91, Fran92a] </ref> etc.), clients cache their hottest data (i.e., the items that they are most likely to access in the future).
Reference: [Barb94] <author> D. Barbara, T. Imielinski, "Sleepers and Workaholics: </author> <title> Caching Strategies in Mobile Environments",Proc. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Minneapolis, Minnesota,1993. </address>
Reference-contexts: However, we are currently investigating ways to integrate indexes with the multilevel disk in order to support broadcast program changes due to client population changes and updates. Caching in a mobile environment has been considered in <ref> [Barb94] </ref>. However, their model was different in that it considered volatile data and clients who could be inactive (and/or disconnected) over long periods of time. Thus, the focus of both broadcasting and caching in this work was to efficiently detect and avoid access to stale data in the cache.
Reference: [Bowe92] <author> T. Bowen, G. Gopal, G. Herman, T. Hickey, K. Lee, W. Mansfield, J. Raitz, A. </author> <title> Weinrib, </title> <journal> "The Datacycle Architecture" CACM 35,(12), </journal> <month> December, </month> <year> 1992. </year>
Reference-contexts: This "flat" approach has been adopted in earlier work on broadcast-based database systems such as Datacycle <ref> [Bowe92] </ref> and [Imie94a]. Alternatively, the server can broadcast different items with differing frequency: important items can be broadcast more often than others. <p> Second, the randomness of broadcast disallows the use of "sleeping" to reduce power consumption (as in [Imie94b]). Finally, there is no notion of "period" for such a broadcast. Periodicity may be important for providing correct semantics for updates (e.g., as was done in Datacycle <ref> [Herm87, Bowe92] </ref>) and for introducing changes to the structure of the broadcast program. <p> As stated previously, the notion of using a repetitive broadcast medium for database storage and query 21 (a) (b) (a) (b) processing was investigated in the Datacycle project at Bellcore <ref> [Herm87, Bowe92] </ref>. Datacycle was intended to exploit high bandwidth, optical communication technology and employed custom VLSI data filters for performing associative searches and continuous queries on the broadcast data.
Reference: [Care91] <author> M. Carey, M. Franklin, M. Livny, E. Shekita, </author> <title> "Data Caching Tradeoffs in Client-Server DBMS Architectures", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Denver, </address> <month> June, </month> <year> 1991. </year>
Reference-contexts: This observation leads to a novel and important result of this work: namely, that the introduction of broadcast fundamentally changes the role of client caching in a client-server information system. In traditional, pull-based systems (e.g., <ref> [Arch86, Howa88, Wilk90, Care91, Wang91, Fran92a] </ref> etc.), clients cache their hottest data (i.e., the items that they are most likely to access in the future).
Reference: [Dan90] <author> A. Dan, D. M. Dias, P. Yu, </author> <title> "The Effect of Skewed Access on Buffer Hits and Data Contention in a Data Sharing Environment", </title> <booktitle> Proc. 16th VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <month> August, </month> <year> 1990. </year>
Reference-contexts: It produces access patterns that become increasingly skewed as increases | the probability of accessing any page numbered i or less is (i=N ) , where N is the total number of pages. Similar to earlier models of skewed access <ref> [Dan90] </ref>, we partition the pages into regions of RegionSize pages each, such that the probability of accessing any page within a region is uniform; the Zipf distribution is applied to these regions.
Reference: [Fran92a] <author> M. Franklin and M. Carey, </author> <title> "Client-Server Caching Revisited", </title> <booktitle> Proc. International Workshop on Distributed Object Management, </booktitle> <address> Edmonton, Alberta, Canada, </address> <month> August </month> <year> 1992, </year> <note> (Published as Distributed Object Management, </note> <editor> Ozsu, Dayal, Valduriez, eds., </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1994). </year>
Reference-contexts: This observation leads to a novel and important result of this work: namely, that the introduction of broadcast fundamentally changes the role of client caching in a client-server information system. In traditional, pull-based systems (e.g., <ref> [Arch86, Howa88, Wilk90, Care91, Wang91, Fran92a] </ref> etc.), clients cache their hottest data (i.e., the items that they are most likely to access in the future).
Reference: [Fran92b] <author> M. Franklin, M. Carey, M. Livny, </author> <title> "Global Memory Management in Client-Server DBMS Architectures", </title> <booktitle> Proc. 18th VLDB Conf., </booktitle> <address> Vancouver, B.C., Canada, </address> <month> August, </month> <year> 1992. </year>
Reference-contexts: This issue is also addressed for client-server database systems in which a global memory hierarchy is created by allowing clients to obtain data from other clients that have that data cached <ref> [Fran92b] </ref>. In this work, server page replacement policies are modified to favor pages that are not cached at clients, as they must be obtained from disk, which is more expensive. Recently, a technique called "Disk-Directed I/O" has been proposed for High Performance Computing applications [Kotz94].
Reference: [Gray94] <author> J. Gray, P. Sundaresan, S. Englert, K. Baclawski, P. J. Weinberger, </author> <title> "Quickly Generating Billion-Record Synthetic Databases", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <year> 1994. </year>
Reference-contexts: All pages outside of this range have a zero probability of access at the client. Within the range the page access probabilities follow a Zipf distribution <ref> [Knut81, Gray94] </ref>, with page 0 being the most frequently accessed, and page AccessRange 1 being the least frequently accessed. The Zipf distribution is typically used to model non-uniform access patterns.
Reference: [Herm87] <author> G. Herman, G. Gopal, K. Lee, A. Weinrib, </author> <title> "The Datacycle Architecture for Very High Throughput Database Systems", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May, </month> <year> 1987. </year>
Reference-contexts: In this approach, a server continuously and repeatedly broadcasts data to a client community. In effect, the broadcast channel becomes a "disk" from which clients can retrieve data as it goes by. Broadcasting data has been addressed previously by other researchers <ref> [Herm87, Imie94b] </ref>. Our technique differs, however, in that we superimpose multiple disks of different sizes and speeds on the broadcast medium. The broadcast is created by multiplexing chunks of data from different disks on the same broadcast channel. The chunks of each disk are evenly interspersed with each other. <p> Second, the randomness of broadcast disallows the use of "sleeping" to reduce power consumption (as in [Imie94b]). Finally, there is no notion of "period" for such a broadcast. Periodicity may be important for providing correct semantics for updates (e.g., as was done in Datacycle <ref> [Herm87, Bowe92] </ref>) and for introducing changes to the structure of the broadcast program. <p> As stated previously, the notion of using a repetitive broadcast medium for database storage and query 21 (a) (b) (a) (b) processing was investigated in the Datacycle project at Bellcore <ref> [Herm87, Bowe92] </ref>. Datacycle was intended to exploit high bandwidth, optical communication technology and employed custom VLSI data filters for performing associative searches and continuous queries on the broadcast data.
Reference: [Howa88] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, M. West, </author> <title> "Scale and Performance in a Distributed File System", </title> <journal> ACM TOCS, </journal> <volume> 6(1), </volume> <month> February, </month> <year> 1988. </year>
Reference-contexts: This observation leads to a novel and important result of this work: namely, that the introduction of broadcast fundamentally changes the role of client caching in a client-server information system. In traditional, pull-based systems (e.g., <ref> [Arch86, Howa88, Wilk90, Care91, Wang91, Fran92a] </ref> etc.), clients cache their hottest data (i.e., the items that they are most likely to access in the future).
Reference: [Imie94a] <author> T. Imielinski, B. Badrinath, </author> <title> "Mobile Wireless Computing: Challenges in Data Management", </title> <journal> Communications of the ACM, </journal> <volume> Vol. 37, No. 10, </volume> <month> October, </month> <year> 1994. </year>
Reference-contexts: This "flat" approach has been adopted in earlier work on broadcast-based database systems such as Datacycle [Bowe92] and <ref> [Imie94a] </ref>. Alternatively, the server can broadcast different items with differing frequency: important items can be broadcast more often than others.
Reference: [Imie94b] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> "Energy Efficient Indexing on Air" Proc. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: In this approach, a server continuously and repeatedly broadcasts data to a client community. In effect, the broadcast channel becomes a "disk" from which clients can retrieve data as it goes by. Broadcasting data has been addressed previously by other researchers <ref> [Herm87, Imie94b] </ref>. Our technique differs, however, in that we superimpose multiple disks of different sizes and speeds on the broadcast medium. The broadcast is created by multiplexing chunks of data from different disks on the same broadcast channel. The chunks of each disk are evenly interspersed with each other. <p> In contrast, program (c) is regular; there is no variance in the inter-arrival time for each page. The performance characteristics 1 This discussion assumes that broadcast items are self-identifying. Another option is to provide an index, as is discussed in <ref> [Imie94b] </ref>. 4 of program (c) are the same as if page A was stored on a disk that was spinning twice as fast as the disk on which pages B and C are stored. For this reason, we refer to program (c) as a Multi-disk broadcast. <p> First, the randomness in arrivals can reduce the effectiveness of some prefetch-ing techniques that require knowledge of exactly when a particular item will next be broadcast [Zdon94]. Second, the randomness of broadcast disallows the use of "sleeping" to reduce power consumption (as in <ref> [Imie94b] </ref>). Finally, there is no notion of "period" for such a broadcast. Periodicity may be important for providing correct semantics for updates (e.g., as was done in Datacycle [Herm87, Bowe92]) and for introducing changes to the structure of the broadcast program. <p> We intend to investigate issues raised by allowing such upstream communication through low-bandwidth links as part of our ongoing work. More recently, the mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [Imie94b] </ref>. The main thrust of this work has been to investigate ways to reduce power consumption at the clients in order to preserve battery life. Some of the indexing techniques described in [Imie94b] involve the interleaving of index information with data, which forms a restricted type of multilevel disk. <p> More recently, the mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [Imie94b] </ref>. The main thrust of this work has been to investigate ways to reduce power consumption at the clients in order to preserve battery life. Some of the indexing techniques described in [Imie94b] involve the interleaving of index information with data, which forms a restricted type of multilevel disk. However, this work did not investigate the notion of replicating the actual data to support non-uniform access patterns and did not investigate the impact of caching.
Reference: [John94] <author> T. Johnson, D. Shasha, </author> <title> "2Q: A Low Overhead High Performance Buffer Management Replacement Algorithm", </title> <booktitle> Proc. 20th VLDB Conf., </booktitle> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference-contexts: LIX is a simple approximation of PIX , yet in spite of this, it performs surprisingly well (as is shown below). Better approximations of PIX , however, might be developed using some of the recently proposed improvements to LRU like 2Q <ref> [John94] </ref> or LRU-k [ONei93]. 20 5.5.1 Experiment 6: LIX vs. LRU The next set of experiments are similar to those for P and PIX and compare LIX and LRU. However, unlike P, the best performance for LRU isn't at an offset equal to the cache size.
Reference: [Katz94] <author> R. Katz, </author> <title> "Adaption and Mobility in Wireless Information Systems", </title> <journal> IEEE Personal Communications, First Quarter, </journal> <year> 1994. </year>
Reference: [Knut81] <author> D. Knuth, </author> <booktitle> "The Art of Computer Programming, </booktitle> <volume> Vol II", </volume> <publisher> Addison Wesley, </publisher> <year> 1981. </year>
Reference-contexts: All pages outside of this range have a zero probability of access at the client. Within the range the page access probabilities follow a Zipf distribution <ref> [Knut81, Gray94] </ref>, with page 0 being the most frequently accessed, and page AccessRange 1 being the least frequently accessed. The Zipf distribution is typically used to model non-uniform access patterns.
Reference: [Kotz94] <author> D. Kotz, </author> <title> "Disk-directed I/O for MIMD Multiprocessors", </title> <booktitle> 1st Symposium on OS Design and Implementation, USENIX, </booktitle> <address> Monterey, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: In this work, server page replacement policies are modified to favor pages that are not cached at clients, as they must be obtained from disk, which is more expensive. Recently, a technique called "Disk-Directed I/O" has been proposed for High Performance Computing applications <ref> [Kotz94] </ref>. Disk-Directed I/O sends large requests to I/O devices and allows the devices to fulfill the requests in a piecemeal fashion in an order that improves the disk bandwidth.
Reference: [ONei93] <author> E. J. O'Neil, P. E. O'Neil, G. Weikum, </author> <title> "The LRU-k Page Replacement Algorithm for Database Disk Buffering", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <year> 1993, </year> <pages> pp. 297-306. 25 </pages>
Reference-contexts: LIX is a simple approximation of PIX , yet in spite of this, it performs surprisingly well (as is shown below). Better approximations of PIX , however, might be developed using some of the recently proposed improvements to LRU like 2Q [John94] or LRU-k <ref> [ONei93] </ref>. 20 5.5.1 Experiment 6: LIX vs. LRU The next set of experiments are similar to those for P and PIX and compare LIX and LRU. However, unlike P, the best performance for LRU isn't at an offset equal to the cache size.
Reference: [Schw86] <author> H. D. Schwetman, "CSIM: </author> <title> A C-based process oriented simulation language", </title> <booktitle> Proceedings of the 1986 Winter Simulation Conference, </booktitle> <pages> pp. 387-396. </pages>
Reference-contexts: The simulator, which is implemented using CSIM <ref> [Schw86] </ref>, models a single server that continuously broadcasts pages and a single client that continuously accesses pages from the broadcast and from its cache. In the simulator, the client generates requests for logical pages. These logical pages are then mapped to the physical pages that are broadcast by the server.
Reference: [Wang91] <author> Y. Wang, L. Rowe, </author> <title> "Cache Consistency and Concurrency Control in a Client/Server DBMS Architecture", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Denver, </address> <month> June, </month> <year> 1991. </year>
Reference-contexts: This observation leads to a novel and important result of this work: namely, that the introduction of broadcast fundamentally changes the role of client caching in a client-server information system. In traditional, pull-based systems (e.g., <ref> [Arch86, Howa88, Wilk90, Care91, Wang91, Fran92a] </ref> etc.), clients cache their hottest data (i.e., the items that they are most likely to access in the future).
Reference: [Wilk90] <author> W. Wilkinson, M. Neimat, </author> <title> "Maintaining Consistency of Client Cached Data", </title> <booktitle> Proc. 16th VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <month> August, </month> <year> 1990. </year>
Reference-contexts: This observation leads to a novel and important result of this work: namely, that the introduction of broadcast fundamentally changes the role of client caching in a client-server information system. In traditional, pull-based systems (e.g., <ref> [Arch86, Howa88, Wilk90, Care91, Wang91, Fran92a] </ref> etc.), clients cache their hottest data (i.e., the items that they are most likely to access in the future).
Reference: [Vish94] <author> S. Vishwanath, T. Imielinski, </author> <title> "Pyramid Broadcasting for Video on Demand Service", </title> <institution> Rutgers Univ. Tech. Report DCS TR-311, </institution> <year> 1994. </year>
Reference-contexts: Thus, the focus of both broadcasting and caching in this work was to efficiently detect and avoid access to stale data in the cache. Very recently, another approach to broadcasting data for video on demand has been taken in <ref> [Vish94] </ref>. The technique, called pyramid broadcasting, splits an object (e.g., a video clip) into a number of segments of increasing sizes. To minimize latency the first segment is broadcast more frequently than the rest.
Reference: [Zdon94] <author> S. Zdonik, M. Franklin, R. Alonso, S. Acharya, </author> <title> "Are `Disks in the Air' Just Pie in the Sky?", </title> <booktitle> IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December, </month> <year> 1994, </year> <note> to appear. 26 </note>
Reference-contexts: First, the randomness in arrivals can reduce the effectiveness of some prefetch-ing techniques that require knowledge of exactly when a particular item will next be broadcast <ref> [Zdon94] </ref>. Second, the randomness of broadcast disallows the use of "sleeping" to reduce power consumption (as in [Imie94b]). Finally, there is no notion of "period" for such a broadcast.
References-found: 24

