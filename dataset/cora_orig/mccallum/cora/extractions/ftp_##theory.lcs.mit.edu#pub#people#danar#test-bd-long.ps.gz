URL: ftp://theory.lcs.mit.edu/pub/people/danar/test-bd-long.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~danar/papers.html
Root-URL: 
Email: E-mail: oded@wisdom.weizmann.ac.il.  E-mail: danar@theory.lcs.mit.edu.  
Title: Property Testing in Bounded Degree Graphs  
Author: Oded Goldreich Dana Ron 
Keyword: Approximation Algorithms, Graph Algorithms.  
Note: On sabbatical leave at LCS,  Supported by an NSF postdoctoral fellowship.  
Address: Rehovot, Israel.  545 Technology Sq., Cambridge, MA 02139.  
Affiliation: Department of Computer Science and Applied Mathematics, Weizmann Institute of Science,  MIT. Laboratory for Computer Science, MIT,  
Date: February 13, 1998  
Abstract: We further develop the study of testing graph properties as initiated by Goldreich, Gold-wasser and Ron. Whereas they view graphs as represented by their adjacency matrix and measure distance between graphs as a fraction of all possible vertex pairs, we view graphs as represented by bounded-length incidence lists and measure distance between graphs as a fraction of the maximum possible number of edges. Thus, while the previous model is most appropriate for the study of dense graphs, our model is most appropriate for the study of bounded-degree graphs. In particular, we present randomized algorithms for testing whether an unknown bounded-degree graph is connected, k-connected (for k &gt; 1), planar, etc. Our algorithms work in time polynomial in 1=*, always accept the graph when it has the tested property, and reject with high probability if the graph is *-away from having the property. For example, the 2-Connectivity algorithm rejects (w.h.p.) any N -vertex d-degree graph for which more than *dN edges need to be added to make the graph 2-edge-connected. In addition we prove lower bounds of ( p N ) on the query complexity of testing algorithms for the Bipartite and Expander properties. 
Abstract-found: 1
Intro-found: 1
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and intractability of approximation problems. </title> <booktitle> In Proceedings of the Thirty-Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes <ref> [BFLS91, ALM + 92, BGS95, H-as96] </ref>, and its relevance to the construction of probabilistically checkable proofs [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] is well known. <p> The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes [BFLS91, ALM + 92, BGS95, H-as96], and its relevance to the construction of probabilistically checkable proofs <ref> [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] </ref> is well known. Recently, a general formulation of property testing has been presented in [GGR96], and its connection to the former approach to approximation have been demonstrated. <p> Finally, we observe that the known results on inapproximability of Minimum Vertex Cover (and Dominating Set) for bounded-degree graphs <ref> [ALM + 92, PY91] </ref>, rule out the possibility of efficient testing algorithms for these properties in our model. 1.2 What does this type of approximation mean? To make the discussion less abstract, let us consider the k-(edge)-connectivity tester. <p> Then A distinguishes between N -vertex graphs (of degree at most d) having vertex cover of size N and similar graphs having no vertex cover of size ( + *d) N . Since distinguishing the two cases is NP-Hard for some constants d; * and <ref> [ALM + 92, PY91] </ref>, we cannot expect A to have "reasonable" (e.g., polynomial in N ) complexity. Proof: By definition, the former graphs are in C d . <p> Then A distinguishes between N -vertex graphs (of degree at most d) having no dominating set of size N and similar graphs having dominating set of size ( + *d) N . Again, since distinguishing the two cases is NP-Hard for some constants d; * and <ref> [ALM + 92, PY91] </ref>, we cannot expect A to have "reasonable" complexity.
Reference: [AS92] <author> S. Arora and S. Safra. </author> <title> Probabilistic checkable proofs: A new characterization of NP. </title> <booktitle> In Proceedings of the Thirty-Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1-13, </pages> <year> 1992. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes [BFLS91, ALM + 92, BGS95, H-as96], and its relevance to the construction of probabilistically checkable proofs <ref> [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] </ref> is well known. Recently, a general formulation of property testing has been presented in [GGR96], and its connection to the former approach to approximation have been demonstrated.
Reference: [Ben95] <author> A. Benczur. </author> <title> A representation of cuts within 6/5 times the edge connectivity with applications. </title> <booktitle> In Proceedings of the Thirty-Sixth Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 92-101, </pages> <year> 1995. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [WN87, NGM90, Gab91, Ben95, NI96] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [BFL91] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1(1) </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes [BFLS91, ALM + 92, BGS95, H-as96], and its relevance to the construction of probabilistically checkable proofs <ref> [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] </ref> is well known. Recently, a general formulation of property testing has been presented in [GGR96], and its connection to the former approach to approximation have been demonstrated.
Reference: [BFLS91] <author> L. Babai, L. Fortnow, L. Levin, and M. Szegedy. </author> <title> Checking computations in polyloga rithmic time. </title> <booktitle> In Proceedings of the Twenty-Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 21-31, </pages> <year> 1991. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes <ref> [BFLS91, ALM + 92, BGS95, H-as96] </ref>, and its relevance to the construction of probabilistically checkable proofs [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] is well known. <p> The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes [BFLS91, ALM + 92, BGS95, H-as96], and its relevance to the construction of probabilistically checkable proofs <ref> [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] </ref> is well known. Recently, a general formulation of property testing has been presented in [GGR96], and its connection to the former approach to approximation have been demonstrated.
Reference: [BGS95] <author> M. Bellare, O. Goldreich, and M. Sudan. </author> <title> Free bits, pcps and non-approximability towards tight results. </title> <booktitle> In Proceedings of the Thirty-Sixth Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1995. </year> <note> Full version available from ECCC, http://www.eccc.uni-trier.de/eccc/. </note>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes <ref> [BFLS91, ALM + 92, BGS95, H-as96] </ref>, and its relevance to the construction of probabilistically checkable proofs [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] is well known.
Reference: [BLR93] <author> M. Blum, M. Luby, and R. Rubinfeld. </author> <title> Self-testing/correcting with applications to nu merical problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 47 </volume> <pages> 549-595, </pages> <year> 1993. </year>
Reference: [DKL76] <author> E. A. Dinic, A. V. Karazanov, and M. V. Lomonosov. </author> <title> On the structure of the system of minimum edge cuts in a graph. </title> <booktitle> Studies in Discrete Optimizations, </booktitle> <pages> pages 290-306, </pages> <year> 1976. </year> <note> In Russian. </note>
Reference-contexts: Here we only state the facts necessary for our algorithms. Let G be a (k 1)-connected graph. Then we can define an auxiliary graph T G [DW95] (based on the cactus structure of <ref> [DKL76] </ref>), which is a tree, such that for every k-class in G there is a corresponding (unique) node in T G . The tree T G might include additional auxiliary nodes, but they are not leaves and we shall not be interested in them here.
Reference: [DW95] <author> Y. Dinitz and J. Westbrook. </author> <title> Maintaining the classes of 4-edge-connectivity in a graph on-line. </title> <type> Technical Report #871, </type> <institution> Technion, Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: In Appendix A we describe in more detail the structure of (k 1)-connected graphs in terms of their k-classes. Here we only state the facts necessary for our algorithms. Let G be a (k 1)-connected graph. Then we can define an auxiliary graph T G <ref> [DW95] </ref> (based on the cactus structure of [DKL76]), which is a tree, such that for every k-class in G there is a corresponding (unique) node in T G .
Reference: [Eve79] <author> S. </author> <title> Even. Graph Algorithms. </title> <publisher> Computer Science Press, </publisher> <year> 1979. </year>
Reference-contexts: For more details on the structure of the auxiliary tree of 2 and 3 connected graphs, see <ref> [Eve79] </ref> and [Pou92], respectively. For our purposes we only need the above stated fact concerning the k-class leaves and the following lemma which follows from Lemmas B.4 and B.8 (see Appendix B). Lemma 4.1 1. Let G be a connected graph which is *-far from the class of 2-connected graphs. <p> algorithm must have a non-zero accepting probability on graphs which are far from cycle-free (e.g., consider the execution on the empty graph). 19 6 Testing Planarity A graph is planar if it can be drawn in the plane so that no two edges in the graph cross each other (cf. <ref> [Eve79] </ref>). Our planarity testing algorithm is based on a theorem which is due to Kura-towski [Kur30].
Reference: [FGL + 91] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In Proceedings of the Thirty-Second Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-12, </pages> <year> 1991. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes [BFLS91, ALM + 92, BGS95, H-as96], and its relevance to the construction of probabilistically checkable proofs <ref> [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] </ref> is well known. Recently, a general formulation of property testing has been presented in [GGR96], and its connection to the former approach to approximation have been demonstrated.
Reference: [Gab91] <author> H. Gabow. </author> <title> Applications of a poset representation to edge connectivity and graph rigid ity. </title> <booktitle> In Proceedings of the Thirty-Second Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 812-821, </pages> <year> 1991. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [WN87, NGM90, Gab91, Ben95, NI96] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [Gab95] <author> H. Gabow. </author> <title> A matroid approach to finding edge connectivity and packing arborescences. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 50(2) </volume> <pages> 259-273, </pages> <year> 1995. </year>
Reference-contexts: We also assume that the number of vertices in G is greater than 32 *d , since otherwise we could decide if the graph is k-connected by observing the whole graph and running an algorithm for finding a minimum cut (in time ~ O (N dk) <ref> [Gab95] </ref>). k-Connectivity Testing Algorithm 1. Uniformly choose a set of m = 32 *d vertices; 2. For each vertex s chosen, check whether s belongs to a leaf class which has at most 16 *d vertices. 3. If any leaf class was discovered then output REJECT, otherwise output ACCEPT.
Reference: [GGR96] <author> O. Goldreich, S. Goldwasser, and D. Ron. </author> <title> Property testing and its connection to learn ing and approximation. </title> <booktitle> In Proceedings of the Thirty-Seventh Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 339-348, </pages> <year> 1996. </year> <month> 31 </month>
Reference-contexts: Recently, a general formulation of property testing has been presented in <ref> [GGR96] </ref>, and its connection to the former approach to approximation have been demonstrated. Still the two approaches do differ, and the question of meaningfulness has to be addressed (as we do below). Another general point is that approximation is applicable not only when the optimization problems are intractable. <p> In particular, in a RAM model of computation, an approximation algorithm may even run in sub-linear time and still provide valuable information. For example, the testing algorithms of <ref> [GGR96] </ref> run in constant time and provide "constant error approximations" (e.g., one can approximate the value of the maximum cut in a dense graph to within a constant factor in constant time). 1.1 Testing graph properties Recently, a study of testing graph properties was initiated by Goldreich et. al., as part <p> error approximations" (e.g., one can approximate the value of the maximum cut in a dense graph to within a constant factor in constant time). 1.1 Testing graph properties Recently, a study of testing graph properties was initiated by Goldreich et. al., as part of a general study of Property Testing <ref> [GGR96] </ref>. In the general model, the algorithm is given oracle access 1 to a function and has to decide whether the function has some specified property or is "far" from having that property. <p> This model is most appropriate for the study of dense graphs, and indeed the graph algorithms in <ref> [GGR96] </ref> refer mainly to dense graphs. <p> In particular, it is no longer true that every (degree-d) graph is 0.1-close to being connected and so an algorithm for testing connectivity cannot be trivial (i.e., always accept). On the other hand, the techniques in <ref> [GGR96] </ref> do not apply to our model and the analogies of most of the results in [GGR96] do not hold: For example, we show that no constant time (Monte Carlo) algorithm can test whether a graph is Bipartite or is 0:1-far from Bipartite, where distance is as defined here. <p> On the other hand, the techniques in <ref> [GGR96] </ref> do not apply to our model and the analogies of most of the results in [GGR96] do not hold: For example, we show that no constant time (Monte Carlo) algorithm can test whether a graph is Bipartite or is 0:1-far from Bipartite, where distance is as defined here. <p> In addition, we establish ( p N) lower bounds on the query complexity of testing algorithms for the Bipartite and Expander properties. The first lower bound stands in sharp contrast to a 2 result on testing bipartiteness which is described in <ref> [GGR96] </ref>. Recall that in [GGR96] graphs are represented by their N fi N adjacency matrices, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. The Bipartite tester of [GGR96] works in time poly (1=*) and distinguishes Bipartite graphs from <p> In addition, we establish ( p N) lower bounds on the query complexity of testing algorithms for the Bipartite and Expander properties. The first lower bound stands in sharp contrast to a 2 result on testing bipartiteness which is described in <ref> [GGR96] </ref>. Recall that in [GGR96] graphs are represented by their N fi N adjacency matrices, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. The Bipartite tester of [GGR96] works in time poly (1=*) and distinguishes Bipartite graphs from graphs in which at <p> a 2 result on testing bipartiteness which is described in <ref> [GGR96] </ref>. Recall that in [GGR96] graphs are represented by their N fi N adjacency matrices, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. The Bipartite tester of [GGR96] works in time poly (1=*) and distinguishes Bipartite graphs from graphs in which at least *N 2 edges must be omitted in order to be bipartite. <p> However, the analysis does not reduce to showing that each of the two sub-testers is valid as property testing of a conjunction of two sub-properties does not reduce in general to the property testing of each of the two sub-properties <ref> [GGR96] </ref>. Nonetheless, the following lemma does establish the validity of our tester. Lemma 7.1 Let G be a graph which is *-far from the class of Eulerian graphs with maximum degree d. <p> In this section we show that any algorithm for testing whether a graph is bipartite has query complexity ( p N). This lower bound stands in contrast to a result on testing bipartiteness which is described in <ref> [GGR96] </ref>. In [GGR96] a graph is assume to be represented by its N fi N adjacency matrix, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. <p> In this section we show that any algorithm for testing whether a graph is bipartite has query complexity ( p N). This lower bound stands in contrast to a result on testing bipartiteness which is described in <ref> [GGR96] </ref>. In [GGR96] a graph is assume to be represented by its N fi N adjacency matrix, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. <p> Thus, a testing algorithm for a certain graph property should distinguish between the case in which the graph has the property, and the case in which one must add and/or remove at least *N 2 edges in order to transform the graph into a graph that has the property. <ref> [GGR96] </ref> give an algorithm for testing bipartiteness in this model whose query complexity and running time are poly (1=*).
Reference: [GLR + 91] <author> P. Gemmell, R. Lipton, R. Rubinfeld, M. Sudan, and A. Wigderson. </author> <title> Self testing/correcting for polynomials and for approximate functions. </title> <booktitle> In Proceedings of the Twenty-Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 32-42, </pages> <year> 1991. </year>
Reference: [H-as96] <author> J. H-astad. </author> <title> Testing of the long code and hardness for clique. </title> <booktitle> In Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 11-19, </pages> <year> 1996. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [BLR93, RS96, GLR + 91, BFL91, BFLS91, FGL + 91, ALM + 92] and codes <ref> [BFLS91, ALM + 92, BGS95, H-as96] </ref>, and its relevance to the construction of probabilistically checkable proofs [BFL91, BFLS91, FGL + 91, AS92, ALM + 92] is well known.
Reference: [Kar93] <author> D. Karger. </author> <title> Global min-cuts in RN C and other ramifications of a simple mincut al gorithm. </title> <booktitle> In Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 21-30, </pages> <year> 1993. </year>
Reference-contexts: Our algorithm finds the component containing the input vertex, within time cubic in the size of the component (independent of k and of the size of the entire graph). It is based on the underlying idea of the min-cut algorithm of Karger <ref> [Kar93] </ref>. For k = 2, we have an alternative algorithm which 3 works in time linear in the size of the component. 3 We suggest the improvement of the complexity of the above task, for k 3, as an open problem. <p> Invoking Lemma 3.6, we are done. 3.2.5 Identifying a k-class Leaf (k 2) The following applies to any k 2, but for k = 2; 3 we have described more efficient procedures (above). The algorithm for finding leaf k-classes (k 2) is based on Karger's Contraction Algorithm <ref> [Kar93] </ref> which is a randomized algorithm for finding a minimum cut in a graph. <p> Proof of Claim 3.8.1: By induction on the size of S. 2 Thus, all we need is to lower bound the probability that C contains a cheaper-than-the-cut spanning tree. This is done by using Karger's analysis of his contraction algorithm (for finding a minimum cut) <ref> [Kar93] </ref>. Details follow. We start by considering an auxiliary graph G 0 , in which all of C is represented by an auxiliary vertex, denoted x. <p> To obtain the better bound claimed in the lemma, we reproduce Karger's analysis <ref> [Kar93] </ref>. He considers an n-vertex graph with min-cut of size c and such that the degree of every vertex in the residual graph at any step of the Contraction Algorithm is at least D c.
Reference: [Kar95] <author> D. Karger. </author> <title> Random Sampling in Graph Optimization Problems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1995. </year> <note> Available from http://theory.lcs.mit.edu/~karger. </note>
Reference: [Kur30] <author> K. </author> <title> Kuratowski. Sur le probleme des courbes gauches en topologie. </title> <journal> Fund. Math., </journal> <volume> 15:217 283, </volume> <year> 1930. </year>
Reference-contexts: Our planarity testing algorithm is based on a theorem which is due to Kura-towski <ref> [Kur30] </ref>. Two graphs are said to be homomorphic if both can be obtained from the same graph by replacing edges with paths of degree-2 vertices (where these degree-2 vertices do not appear in the original graph).
Reference: [NGM90] <author> D. Naor, D. Gusfield, and C. Martel. </author> <title> A fast algorithm for optimally increasing the edge connectivity. </title> <booktitle> In Proceedings of the Thirty-First Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 698-707, </pages> <year> 1990. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [WN87, NGM90, Gab91, Ben95, NI96] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [NI96] <author> H. Nagamochi and T. Ibaraki. </author> <title> Deterministic ~ O(nm) time edge-splitting in undirected graphs. </title> <booktitle> In Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 64-73, </pages> <year> 1996. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [WN87, NGM90, Gab91, Ben95, NI96] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [Pou92] <author> J. A. La Poutre. </author> <title> Maintenance of triconnected components of graphs. </title> <booktitle> In Proceedings of the 19th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 354-365, </pages> <year> 1992. </year> <note> Springer-Verlag Lecure Notes in Computer Science 623. </note>
Reference-contexts: For more details on the structure of the auxiliary tree of 2 and 3 connected graphs, see [Eve79] and <ref> [Pou92] </ref>, respectively. For our purposes we only need the above stated fact concerning the k-class leaves and the following lemma which follows from Lemmas B.4 and B.8 (see Appendix B). Lemma 4.1 1. Let G be a connected graph which is *-far from the class of 2-connected graphs.
Reference: [PY91] <author> C.H. Papadimitriou and M. Yanakakis. </author> <title> Optimization, approximation and complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year>
Reference-contexts: Finally, we observe that the known results on inapproximability of Minimum Vertex Cover (and Dominating Set) for bounded-degree graphs <ref> [ALM + 92, PY91] </ref>, rule out the possibility of efficient testing algorithms for these properties in our model. 1.2 What does this type of approximation mean? To make the discussion less abstract, let us consider the k-(edge)-connectivity tester. <p> Then A distinguishes between N -vertex graphs (of degree at most d) having vertex cover of size N and similar graphs having no vertex cover of size ( + *d) N . Since distinguishing the two cases is NP-Hard for some constants d; * and <ref> [ALM + 92, PY91] </ref>, we cannot expect A to have "reasonable" (e.g., polynomial in N ) complexity. Proof: By definition, the former graphs are in C d . <p> Then A distinguishes between N -vertex graphs (of degree at most d) having no dominating set of size N and similar graphs having dominating set of size ( + *d) N . Again, since distinguishing the two cases is NP-Hard for some constants d; * and <ref> [ALM + 92, PY91] </ref>, we cannot expect A to have "reasonable" complexity.
Reference: [RS96] <author> R. Rubinfeld and M. Sudan. </author> <title> Robust characterization of polynomials with applications to program testing. </title> <journal> SIAM Journal on Computing, </journal> <volume> 25(2) </volume> <pages> 252-271, </pages> <year> 1996. </year>
Reference: [WN87] <author> T. Watanabe and A. Nakamura. </author> <title> Edge-connectivity augmentation problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 35 </volume> <pages> 96-144, </pages> <year> 1987. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [WN87, NGM90, Gab91, Ben95, NI96] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
References-found: 25

