URL: http://dimacs.rutgers.edu/techps/1993/93-01.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1993.html
Root-URL: http://www.cs.rutgers.edu
Title: A Randomized Algorithm for Finding Maximum with O((log n) 2 Polynomial Tests  
Author: Hing F. Ting and Andrew C. Yao 
Abstract: A well-known result by Rabin [1] implies that n 1 polynomial tests are necessary and sufficient in the worst case to find the maximum of n distinct real numbers. In this note we show that, for any fixed constant c &gt; 0, there is a randomized algorithm with error probability O(n c ) for finding the maximum of n distinct real numbers using only O((log n) 2 ) polynomial tests. keywords: algorithms, decision trees, maximum, parity tests, randomized algorithms.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Rabin, </author> <title> "Proving simultaneous positivity of linear forms," </title> <journal> Journal of Computer and System Sciences 6 (1972), </journal> <pages> 639-650. 6 </pages>
Reference-contexts: Clearly, there is a polynomial decision tree of height n 1 for finding the maximum of n distinct input numbers x 1 ; x 2 ; ; x n . A well-known result by Rabin <ref> [1, Theorem 4] </ref> implies that this is also a lower bound. In this paper, we show that the number of tests can be drastically reduced if randomization is allowed. Theorem 1 Let c &gt; 0 be any fixed constant. <p> It remains to prove that * 1 = O (n c ). Consider the following process G of generating a random decreasing sequence of integers r 1 ; r 2 ; ; r s : take a random r 1 uniformly from integers in <ref> [1; n] </ref>; for ` 1, take a random r `+1 uniformly from [1; r ` 1], and stop when we get r s = 1. For each ` 1, let ` be the probability that s `, i.e., the sequence generated has length greater than or equal to `. <p> Consider the following process G of generating a random decreasing sequence of integers r 1 ; r 2 ; ; r s : take a random r 1 uniformly from integers in [1; n]; for ` 1, take a random r `+1 uniformly from <ref> [1; r ` 1] </ref>, and stop when we get r s = 1. For each ` 1, let ` be the probability that s `, i.e., the sequence generated has length greater than or equal to `. We claim that * 1 m 0 .
References-found: 1

