URL: http://www.daimi.aau.dk/~stefand/Publications/csl96.ps.gz
Refering-URL: http://www.daimi.aau.dk/~stefand/publications.html
Root-URL: http://www.daimi.aau.dk
Email: std@mimuw.edu.pl  
Phone: phone: (+48-22) 658-31-65, fax: (+48-22) 658-31-64  
Title: Bounded-Variable Fixpoint Queries are  
Author: PSPACE-complete Stefan Dziembowski 
Address: Banacha 2, 02-097 Warszawa, Poland,  
Affiliation: Warsaw University, Institute of Informatics,  
Abstract: We study the complexity of the evaluation of bounded-variable fixpoint queries in relational databases. We exhibit a finite database such that the problem of deciding whether a closed fixpoint formula using only 2 individual variables is satisfied in this database is PSPACE-complete. This clarifies the issues raised by Vardi in [Var95]. We study also the complexity of query evaluation for a number of restrictions of fixpoint logic. In particular we exhibit a sublogic for which the upper bound postulated by Vardi holds. 
Abstract-found: 1
Intro-found: 1
Reference: [Bus87] <author> S.R. Buss. </author> <title> The boolean formula value problem is in ALOGTIME. </title> <booktitle> In Proceedings of the 19th Annual ACM Symposium on Theory of Computing (New York City, </booktitle> <month> May 25-27, </month> <year> 1987), </year> <pages> pages 123-131, </pages> <address> New York, 1987. </address> <publisher> ACM, ACM Press. </publisher>
Reference-contexts: Recall that a parenthesis grammar is a context-free grammar with two distinguished terminals: "(" and ")" such that each production is of the form A ! (x) with x parenthesis free. Such a grammar generates a parenthesis language. In our proof we make use of the the fact from <ref> [Bus87] </ref> that all parenthesis languages are recognisable in ALOGTIME. Theorem 10. The Answer FP k n (B; ; ) problem is in ALOGTIME for every database B every k and every n. Proof sketch.
Reference: [CH82] <author> A. Chandra and D. Harel. </author> <title> Structure and complexity of relational queries. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 25(1) </volume> <pages> 99-128, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: Whether this gap is indeed more narrow depends on the hypothesis that PSPACE 6= EX-PTIME. 2 Basic Definitions The definitions presented in this section are based on the definitions from <ref> [CH82, Var82] </ref>. We change them a bit introducing the notion of database signature, which is similar to the standard notion of signature used in mathematical logic. This technical modification makes the proofs in the paper more readable. 2.1 Databases and Queries Definition 1. <p> Consequently the expression complexity of L is not higher than its combined complexity. 3 Fixpoint First-Order Logic The FP language is an extension of the standard first-order logic with two dual fix-point operators: and , denoting the least and the greatest fixpoint, respectively <ref> [CH82] </ref>. The syntax is extended in the following way.
Reference: [DJN96] <author> S. Dziembowski, M. Jurdzinski, and D. Niwinski. </author> <title> On the expression complexity of the modal -calculus model checking. </title> <type> unpublished manuscript, </type> <year> 1996. </year>
Reference-contexts: It is worth to note that Lemmas 13 and 14 give us translations between models and formulas independently. Thus the expression complexity of c FP k is PTIME-equivalent to the expression complexity of the modal -calculus. The best known lower bound for it is PTIME <ref> [DJN96] </ref>. We also want to emphasise that Vardi's algorithm for evaluating FP k queries given in [Var95] works properly for c FP k .
Reference: [EJS93] <author> E. A. Emerson, C. S. Jutla, and A. Sistla. </author> <title> On model-checking for fragments of calculus. </title> <booktitle> In CAV'93, volume 679 of LNCS, </booktitle> <pages> pages 385-396, </pages> <year> 1993. </year>
Reference-contexts: It can be done however, observing that two variables x and y used alternatively are sufficient. It is also easy to see that the condition * is satisfied. 2 Since model-checking for the modal -calculus is in NP " co-NP <ref> [EJS93] </ref>, Lemma 13 gives us Theorem 15. The Answer b FP k (; ; ) problem is in NP " co-NP. By Lemma 14 all lower bounds for the complexity of the -calculus model checking apply also to Answer b FP k (; ; ).
Reference: [Koz83] <author> D. Kozen. </author> <title> Results on the propositional -calculus. </title> <journal> Theor. Comput. Sci., </journal> <volume> 27(3) </volume> <pages> 333-354, </pages> <year> 1983. </year>
Reference-contexts: In the sequel we will use some results on the modal -calculus. We recall here that the modal -calculus, as introduced by Kozen <ref> [Koz83] </ref>, is a modal logic with two dual fixpoint operators and . <p> F ::= F ^ F j F _ F j x i : F j x i : F j hai F j [a] F j x i j p i j :p i The formal definition of the modal -calculus semantics can be found in <ref> [Koz83] </ref>. We write M; s j= to mean that is satisfied in a state s of M (i.e. s 2 [[ ]] M ).
Reference: [Lyn77] <author> N. Lynch. </author> <title> Log space recognition and translation of parenthesis languages. </title> <journal> J. ACM, </journal> <volume> 24 </volume> <pages> 583-590, </pages> <year> 1977. </year>
Reference-contexts: This gives us PTIME as an easy upper bound. We can improve it however by using a technique from <ref> [Lyn77] </ref>. Recall that a parenthesis grammar is a context-free grammar with two distinguished terminals: "(" and ")" such that each production is of the form A ! (x) with x parenthesis free. Such a grammar generates a parenthesis language.
Reference: [Tar55] <author> A. Tarski. </author> <title> A lattice theoretical fixpoint theorem and its applications. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 5 </volume> <pages> 285-309, </pages> <year> 1955. </year>
Reference-contexts: Because the variable V occurs in the formula ' positively, the operator b' is monotone. Thus by the Knaster-Tarski theorem <ref> [Tar55] </ref> there exists the least fixpoint of this operator, equal to the sum of the following sequence: ; b'(;) b'( b'(;)) (1) Denote this sum by b' 1 .
Reference: [Var82] <author> M.Y. Vardi. </author> <title> The complexity of relational query languages. </title> <booktitle> In Proceedings of the 14th Ann. ACM Symposium on Theory of Computing (San Francisco, </booktitle> <address> CA), </address> <pages> pages 137-146, </pages> <address> New York, 1982. </address> <publisher> ACM, ACM Press. </publisher>
Reference-contexts: Whether this gap is indeed more narrow depends on the hypothesis that PSPACE 6= EX-PTIME. 2 Basic Definitions The definitions presented in this section are based on the definitions from <ref> [CH82, Var82] </ref>. We change them a bit introducing the notion of database signature, which is similar to the standard notion of signature used in mathematical logic. This technical modification makes the proofs in the paper more readable. 2.1 Databases and Queries Definition 1.
Reference: [Var95] <author> M. Y. Vardi. </author> <title> On the complexity of bounded-variable queries. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 266-276, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction In <ref> [Var95] </ref> Vardi studies computational complexity of queries expressed in various logics. There are three notions of the complexity of query evaluation. 1. We can fix a database and evaluate many different queries expressible in a certain logic against this database. <p> Part of this work was done at BRICS, the Center for Basic Research in Computer Science, Aarhus, Denmark. The main idea of <ref> [Var95] </ref> is that for logics with a uniformly bounded number of individual variables this gap narrows. The syntax restriction captures the well-known technique of database programmers of avoiding large intermediate results. <p> The syntax restriction captures the well-known technique of database programmers of avoiding large intermediate results. We study the problem of measuring the expression and the combined complexities of the bounded-variable version of the fixpoint first-order logic (FP k ). We show that both of them are PSPACE-complete. In <ref> [Var95] </ref> Vardi has proposed an NP algorithm for this problem, however the algorithm works only for a subclass of FP k formulas. Recall that data complexity of FP k is PTIME. We also consider various restrictions of the FP k syntax and study their complexity. <p> Because in the paper we study complexity issues we make here the formal assumption that, together with a language, we are given a standard way of encoding its elements. We also fix some standard way of encoding databases. We skip here the details. 2.2 Logics as Query Languages In <ref> [Var95] </ref> Vardi studied various logical languages (interpreted in relational structures) considered as query languages. Every formula ' (without function symbols) of any such logic L induces a query defined in the following way. <p> Proof. Let b' be an operator induced by '(x). We have that V = b' 1 = b'( b' 1 ) = b'(V), which is equal to (2). 2 4 The Complexity of FP k In <ref> [Var95] </ref> Vardi considers several languages L k , each one obtained from a certain language L by restricting the set of individual variables allowed in the formulas to fx 1 ; : : : ; x k g. <p> Below we argue that the linear lower bound is essential by showing the upper bound for the expression complexity. The proof is similar to the proof establishing the complexity of Answer FO k in <ref> [Var95] </ref>. The key observation is that for a fixed database, and a fixed number of the first- and second-order variables, the arity of all relations is fixed too, and thus the number of all definable relations (and relations on relations) is bounded. <p> Thus the expression complexity of c FP k is PTIME-equivalent to the expression complexity of the modal -calculus. The best known lower bound for it is PTIME [DJN96]. We also want to emphasise that Vardi's algorithm for evaluating FP k queries given in <ref> [Var95] </ref> works properly for c FP k . Thus, as announced by Vardi, his algorithm still can be viewed as a new proof of the membership of the model-checking problem for the modal -calculus in NP " co-NP. 7 Conclusion Below we summarise the results of this paper.
Reference: [ZSS94] <author> Shipei Zhang, Oleg Sokolsky, and Scott A. Smolka. </author> <title> On the parallel complexity of model checking in the modal mu-calculus. </title> <booktitle> In Proceedings, Ninth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 154-163, </pages> <address> Paris, France, </address> <month> 4-7 July </month> <year> 1994. </year> <title> IEEE Computer Society Press. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The Answer b FP k (; ; ) problem is in NP " co-NP. By Lemma 14 all lower bounds for the complexity of the -calculus model checking apply also to Answer b FP k (; ; ). Thus by <ref> [ZSS94] </ref> we get: Theorem 16. The Answer b FP k (; ; ) problem is PTIME-hard. It is worth to note that Lemmas 13 and 14 give us translations between models and formulas independently.
References-found: 10

