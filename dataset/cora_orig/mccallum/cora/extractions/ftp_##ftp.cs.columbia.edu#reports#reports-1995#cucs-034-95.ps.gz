URL: ftp://ftp.cs.columbia.edu/reports/reports-1995/cucs-034-95.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1995.html
Root-URL: http://www.cs.columbia.edu
Email: issy@ee.technion.ac.il  kaiser@cs.columbia.edu  
Title: An Interoperability Model for Process-Centered Software Engineering Environments and its Implementation in Oz  
Author: Israel Z. Ben-Shaul Gail E. Kaiser Z. Ben-Shaul and Gail E. Kaiser 
Keyword: process modeling, software engineering environments, distributed systems, work-flow interoperability, collaborative work.  
Note: c fl1995, Israel  
Web: CUCS-034-95  
Address: City, Haifa 32000 ISRAEL  500 West 120th Street New York, NY 10027 UNITED STATES  
Affiliation: Technion-Israel Institute of Technology Department of Electrical Engineering Technion  Columbia University Department of Computer Science  
Abstract: This paper is based on work sponsored in part by Advanced Research Project Agency under ARPA Order B128 monitored by Air Force Rome Lab F30602-94-C-0197, in part by National Science Foundation CCR-9301092, and in part by the New York State Science and Technology Foundation Center for Advanced Technology in High Performance Computing and Communications in Healthcare NYSSTF-CAT-95013. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gail E. Kaiser Andrew Z. Tong and Steven S. Popovich. </author> <title> A flexible rule-chaining engine for process-based software engineering. </title> <booktitle> In 9th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 79-88, </pages> <address> Monterey CA, September 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We base our evaluation mainly on our experience in using Emerald City, an Oz environment that has been used to develop the Amber <ref> [1] </ref> rule processor, Pern [25] transaction manager, and the Darkover [35] object management system.
Reference: [2] <author> Sergio Bandinelli and Alfonso Fuggetta. </author> <title> Computational reflection in software process modeling: the SLANG approach. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <pages> pages 144-154, </pages> <address> Baltimore MD, May 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: S could be part of an external database that is separate from the PML (as in SPADE <ref> [2] </ref>) or it could be part of the PML (as in Marvel [30]). In addition, the process data could be kept separately from the product data (which may reside in 5 the native file system). <p> The application of our decentralized model to Petri net-based PSEEs is influenced primarily by SLANG <ref> [2] </ref> and FUNSOFT [21], and their corresponding PSEEs, SPADE and MELMAC, respectively. Each of these PMLs is based on extended Petri net formalisms (specifically, SLANG is based on ER nets, and FUNSOFT on predicate/transition nets), but we will use for the most part general Petri net terminology.
Reference: [3] <author> Sergio Bandinelli, Alfonso Fuggetta, Carlo Ghezzi, and Sandro Grigolli. </author> <title> Process enactment in SLANG. </title> <editor> In J.C. Derniame, editor, </editor> <booktitle> Software Process Technology Second European Workshop, number 635 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Trondheim, Norway, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: This is a multi-process extension of an example which was originally given in <ref> [3] </ref> describing SLANG. 35 In the example, there are two processes, CODE and TEST, used by two separate groups that are responsible for coding and testing the application, respectively.
Reference: [4] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 48 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: The latter is concerned with coordinating concurrent activities that might violate the consistency of the project database, assuming that all participants use the same process, the same schema, and most importantly, share the same centralized, project database (see, for example, <ref> [4] </ref>). In contrast, we focus in this paper on collaboration between users or teams with different processes, different schemas, and different project databases.
Reference: [5] <author> Noureddine Belkhatir, Jacky Estublier, and Walcelio L. Melo. </author> <title> Adele 2: A support to large software development process. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 159-170, </pages> <address> Redondo Beach CA, Oc-tober 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: TEMPO is data-centered, and is built on top of Adele 2 <ref> [5] </ref>, an active configuration management system with data-driven triggering, which enables to realize rule processing in TEMPO.
Reference: [6] <author> Noureddine Belkhatir, Jacky Estublier, and Walcelio L. Melo. </author> <title> Software process model and work space control in the Adele system. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 2-11, </pages> <address> Berlin Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: However, there is no support for multiple processes with distinct instantiated products. TEMPO <ref> [6] </ref> is another PSEE that is designed to support "programming-in-the-many", i.e., projects that involve a large number of people, and therefore its emphasis is on modeling and mechanisms for supporting collaboration, coordination, and synchronization between project participants.
Reference: [7] <author> Israel Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: Our earlier paper [9] introduced a preliminary version of the model and its implementation, focusing 3 on enactment. Our book <ref> [7] </ref> presented a revised, comprehensive and formalized model with detailed coverage of both the definition and enactment aspects, and describes a mature implementation. This paper abridges the book, and adds new material in two areas: Section 5 is entirely new. <p> This point is addressed in Section 2.2.4. In the rest of this section we address requirements 1, 4 and 5. Requirements 2 and 3, which are more database oriented, are covered elsewhere <ref> [7] </ref>. 2.2.2 Alternative Approaches In considering the possible alternatives to expressing common sub-processes within otherwise private and encapsulated processes, we can draw an analogy between our problem and similar problems in the domain of distributed programming languages and systems, and investigate alternatives there: 1. <p> We address some of these issues here by discussing the realization of Treaties and Summits. The architectural aspects of Oz, including site interconnectivity, configuration, transactions, database and cache management, are beyond the scope of this paper and can be found elsewhere <ref> [7, 8] </ref>. 3.1 Oz Overview Oz is a multi-process PSEE (as defined in Section 2.1.3), and it supports definition and execution of autonomous multiple SubEnvs following the Treaty and Summit models. <p> We assume the existence of the necessary underlying infrastructure to communicate with the remote SubEnv (This topic is beyond the scope of this paper, see <ref> [7] </ref>). In particular, there must be a connection from DstSubEnv to SrcSubEnv, since the operation is initiated at DstSubEnv but it involves both SubEnvs. The realization of import consists of four distinct phases: 1. <p> To provide a full solution, however, Oz allows remote activities to be delegated to (remote) users by extending its modeling language to specify delegation, and by providing a delegation mechanism that redirects activities. This topic is beyond the scope of this paper, see <ref> [7] </ref>. 3.3.3 Summit Activity If the condition of the rule is satisfied, the multi-site activity is fired at the coordinating site. <p> If there are none, it completes the task and releases resources that were allocated for the Summit (e.g., transaction locks, which are beyond the scope of this paper, see <ref> [7] </ref>). If there are pending Summit rules, the coordinating SubEnv reiterates to the Summit initialization phase, except it bypasses the manual parameter binding phase which is (automatically) performed by the extended parameter binding mechanism. <p> Summit rules. 4 Application of the Model to Other PMLs We now outline how the interoperability model may be applied to two other families of PSEEs categorized by the paradigm underlying their PMLs, namely Petri nets and Grammars (application to imperative process programming such as APPL/A can be found in <ref> [7] </ref>). These families, together with rules, cover most kinds of PSEE [33]. <p> This figure, which can be used as a (static) measure of the level of site-interoperability, seems to be typical for Oz environments; in another experimental environment that implemented the ISPW9 "benchmark scenario" [44], this interoperability measure was 15% (see <ref> [7] </ref>). Another (dynamic) measure of site-interoperability is the percentage of actual invocations of Treaty rules in Summits from the total invocations. Table 5.1 summarizes the runtime statistics made for 11 active project members (taken from execution log files generated by Oz).
Reference: [8] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A configuration process for a distributed software development environment. </title> <booktitle> In 2nd International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 123-134, </pages> <address> Pittsburgh PA, March 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We address some of these issues here by discussing the realization of Treaties and Summits. The architectural aspects of Oz, including site interconnectivity, configuration, transactions, database and cache management, are beyond the scope of this paper and can be found elsewhere <ref> [7, 8] </ref>. 3.1 Oz Overview Oz is a multi-process PSEE (as defined in Section 2.1.3), and it supports definition and execution of autonomous multiple SubEnvs following the Treaty and Summit models. <p> Emerald City has been in use since April 1995 and is constantly evolving. In its present configuration it consists of 16 SubEnvs: 1 Master, 1 Assembly, and 14 Workspace SubEnvs. The Master process consists of 34 local rules (in addition to the 15 standard rules used for site configuration <ref> [8] </ref> and for built-in operations, e.g., copy object) and 21 Treaty rules. rules.
Reference: [9] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Our earlier paper <ref> [9] </ref> introduced a preliminary version of the model and its implementation, focusing 3 on enactment. Our book [7] presented a revised, comprehensive and formalized model with detailed coverage of both the definition and enactment aspects, and describes a mature implementation.
Reference: [10] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> Process support for synchronous groupware activities. </title> <type> Technical Report CUCS-002-95, </type> <institution> Columbia University Department of Computer Science, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: In case of a multi-user groupware activity (e.g., virtual whiteboard), Oz provides mechanisms to define the participants and bind the activity to them at run time, see <ref> [10] </ref>. 3.3.4 Post-Summit The first step in Post-Summit asserts the appropriate (local and remote) effects of the Summit rule, depending on the output from the activity. <p> The Treaty abstraction appears to support particularly well interoperability modeling of process and data. Two areas that still need improvements are in modeling interoperability at the user and the tool levels, which are related to groupware technology. Preliminary work has been done in <ref> [10] </ref>. Work in Emerald City revealed another area that requires improvements in Oz, namely better support for multi-site operations between trusted sites, particularly for interoperability modeling. The Treaty operation as a single command (with the issuer being administrator in both sites) was a step in that direction.
Reference: [11] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multiuser software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: When not interoperating with other SubEnvs, the functionality of a local SubEnv resembles that of Marvel <ref> [11] </ref>, the predecessor to Oz. As in Marvel, each local (sub)environment in Oz is tailored by a local administrator who provides the data model, process model, tool envelopes and coordination model for its team. These definitions are translated into an internal format and then loaded into the environment.
Reference: [12] <author> Omran A. Bukhres, Jiansan Chen, Weimin Du, and Ahmed K. Elmagarmid. </author> <title> Interbase: An execution environment for heterogeneous software systems. </title> <journal> Computer, </journal> <volume> 26(8) </volume> <pages> 57-69, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: The concept of system-interoperability, which has been largely motivated by the emerging globalization of computing, has been increasingly gaining popularity in various domains such as workflow interoperability for business process re-engineering [19], multi-database interoperability <ref> [12] </ref>, and general client-server interoperability [43, 37]). In this paper we explore interoperability in the context of process-centered software engineering environments (PSEEs).
Reference: [13] <author> Noam Chomsky. </author> <title> On certain formal properties of grammars. </title> <journal> Information and Control, </journal> <volume> 2(2), </volume> <year> 1959. </year>
Reference-contexts: At a later point, when both teams are ready for a second test, a second Summit activity is initiated. 4.2 Grammar-Based PMLs The grammar hierarchy <ref> [13] </ref> and the corresponding automata provide another powerful set of formalisms for modeling a wide variety of systems, although they may have been less frequently applied to software process modeling than the other paradigms mentioned.
Reference: [14] <author> Mark Dowson. </author> <title> ISTAR | an integrated project support environment. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 27-33, </pages> <address> Palo Alto, CA, </address> <month> December </month> <year> 1986. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 22(1), </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: This suggests language constructs for Treaties in conjunction with system calls that are called from them, as an improved approach. 6 Related Work ISTAR <ref> [14] </ref>, one of the earliest software engineering environments (or "Integrated Project Support Environments"), provided comprehensive support to the software development life-cycle, including both management and software engineering.
Reference: [15] <author> R. Ahmed et al. </author> <title> The Pegasus heterogenous multidatabase system. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 19-27, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Another problematic issue with supporting pre-existing processes is with their schemas, particularly in strongly-typed PMLs. Such PMLs should provide facilities that enable to superimpose new shared sub-schemas on top of the preexisting ones (perhaps along the lines of what is done in Pegasus <ref> [15] </ref>). Alternatively, PMLs might need to sacrifice some of their typing restrictions, at least for Summit activities, to accommodate heterogeneous schemas, and to be able to check for schema (sub)compatibility. 5.2.5 Scaleability The Treaty/Summit model scales up mainly because it does not assume any global authority or centralized control.
Reference: [16] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 49 </pages>
Reference-contexts: Our focus here is on the more decentralized bottom-up construction of multi-PSEE processes. This is in contrast to most other distributed PSEEs which decompose a single process in a top-down fashion into sub-processes with predefined and coordinated interfaces (as done in ProcessWEAVER <ref> [16] </ref>, see Section 6). Notice that we do not exclude support for top-down methodology; we do not, however, enforce it. Thus, it should be possible for pre-existing SubEnvs to "join" an on-going multi-site environment or to form a new one with minimal configuration overhead. <p> ProcessWEAVER is a commercial product of Cap Gemini Innovation, with a Petri net based PML. Fernstrom describes "...in a process, which consists of a set of cooperating sub-processes, every sub-process can be characterized by the set of 'services' it provides and requires from the other sub-processes" <ref> [16] </ref>. This sounds remarkably similar to our approach.
Reference: [17] <author> Pankaj K. Garg, Peiwei Mi, Thuan Pham, Walt Scacchi, and Gary Thunquest. </author> <title> The SMART approach for software process engineering. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 341-350, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Finally, autonomy concerns for local process and their artifacts, which is a fundamental requirement in our approach, is not considered. SMART <ref> [17] </ref> is an attempt to provide a methodology and a supporting technology for the process (as opposed to product) lifecycle through multi-formalism support, whereby different phases in the lifecycle are supported by different formalisms and corresponding (sub)systems.
Reference: [18] <author> P.K. Garg, T. Pham, B. Beach, A. Deshpande, A. Ishizaki, K. Wentzel, and W. Fong. Ma-tisse: </author> <title> A knowldge-based team programming environment. </title> <journal> International Journal of Software Engineering and Knowledge Engineering, </journal> <volume> 4(1) </volume> <pages> 15-59, </pages> <year> 1994. </year>
Reference-contexts: Modeling, analysis, and simulation are performed with the Articulator system [40], process execution is performed by HP's SynerVision, and Matisse <ref> [18] </ref> (also from HP) is used to maintain a knowledge-base containing the artifacts that represent the process models developed in the Articulator, and serves as an integration medium between Articulator and SynerVision.
Reference: [19] <author> Dimitrios Georgakopoulos, Mark Hornick, and Amit Sheth. </author> <title> An overview of workflow management: From process modeling to workflow automation infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3 </volume> <pages> 119-153, </pages> <year> 1995. </year>
Reference-contexts: The concept of system-interoperability, which has been largely motivated by the emerging globalization of computing, has been increasingly gaining popularity in various domains such as workflow interoperability for business process re-engineering <ref> [19] </ref>, multi-database interoperability [12], and general client-server interoperability [43, 37]). In this paper we explore interoperability in the context of process-centered software engineering environments (PSEEs).
Reference: [20] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Note that import fetches only the rules, without the tools and their envelopes (i.e., the wrapping mechanism used to integrate tools into Oz, see <ref> [20] </ref>).
Reference: [21] <author> Volker Gruhn and Rudiger Jegelka. </author> <title> An evaluation of FUNSOFT nets. </title> <editor> In J.C. Derniame, editor, </editor> <booktitle> Software Process Technology Second European Workshop, number 635 in Lecture Notes in Computer Science, </booktitle> <pages> pages 196-214. </pages> <publisher> Springer-Verlag, </publisher> <address> Trondheim, Norway, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Process-step | This level encapsulates an activity with local prerequisites and immediate consequences (if any) of the tool invocation, as imposed by the process. For example, in the FUNSOFT Petri net based PML <ref> [21] </ref> a process step corresponds to a transition along with its (optionally) attached predicates; in the Articulator task graphs [41] this level corresponds to a node with its predecessor and successor edges; and in rule-based PMLs, a process step is represented by a rule with pre- and post-conditions. <p> The application of our decentralized model to Petri net-based PSEEs is influenced primarily by SLANG [2] and FUNSOFT <ref> [21] </ref>, and their corresponding PSEEs, SPADE and MELMAC, respectively. Each of these PMLs is based on extended Petri net formalisms (specifically, SLANG is based on ER nets, and FUNSOFT on predicate/transition nets), but we will use for the most part general Petri net terminology.
Reference: [22] <author> Dennis Heimbigner. </author> <title> Proscription versus Prescription in process-centered environments. </title> <editor> In Takuya Katayama, editor, </editor> <booktitle> 6th International Software Process Workshop: Support for the Software Process, </booktitle> <pages> pages 99-102, </pages> <address> Hakodate, Japan, October 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: There is a spectrum of approaches to employing grammars in process modeling, analogous to sentence generation at one end (what Heimbigner calls a prescriptive process <ref> [22] </ref>) to sentence recognition (parsing) at the other (proscriptive) [29]. The PDL project employed the former for context-free grammars [28], while the implementation of the Activity Structures Language on top of Marvel follows the latter approach [31].
Reference: [23] <author> Dennis Heimbigner. </author> <title> A federated architecture for envrionments: Take II. In Preprints of the Process Sensitive SEE Architectures Workshop, </title> <address> Boulder CO, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: This preliminary model, while advocating decentralization, still considers every sub-environment to be strongly affiliated with the corporation and necessarily abiding by some global rules. Thus, autonomy is necessarily restricted a priori. Heimbigner argues in <ref> [23] </ref> that just like databases, "environments will move to looser, federated, architectures ... address inter-operability between partial-environments of varying degrees of openness". He also notes that part of the reason for not adopting this approach until recently was due to the inadequacy of existing software process technology.
Reference: [24] <author> Dennis Heimbigner. </author> <title> The ProcessWall: A process state server approach to process programming. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 159-168, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: This paper explores a limited aspect of heterogeneity by fixing the system and language levels (although not restricting to a particular system or language) and supporting heterogeneity at the process model level. This is in contrast to ProcessWall <ref> [24] </ref> for example, which focuses on language heterogeneity (see Section 6). <p> He also notes that part of the reason for not adopting this approach until recently was due to the inadequacy of existing software process technology. However, 45 his focus is on support for multiple formalisms. His proposed ProcessWall <ref> [24] </ref> is an attempt to address heterogeneity at the language level. The main idea in the ProcessWall is the separation of process state from the programs that construct the state; in theory, multiple process formalisms (e.g., procedural and rule-based) can co-exist and be used for writing fragments of a process.
Reference: [25] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We base our evaluation mainly on our experience in using Emerald City, an Oz environment that has been used to develop the Amber [1] rule processor, Pern <ref> [25] </ref> transaction manager, and the Darkover [35] object management system.
Reference: [26] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: The reason is somewhat pragmatic, and has to do with the rule-overloading mechanism. Oz allows multiple rules with the same name to co-exist, and determines which rule to execute based on the types and number of actual parameters supplied by the client <ref> [26] </ref>. <p> However, this alternative both limits the power of the rule inference engine and proves to be unnecessary. Given that a Summit rule is syntactically a "normal" rule that just happens to have remote objects bound to it, then by extending the mechanism for dynamic binding of parameters <ref> [26] </ref> to handle binding of both local and remote objects to chained rules, the basic rule-inference mechanism can infer Summit rules | these are simply the rules that happen to have been instantiated with (some) remote objects as parameters.
Reference: [27] <author> SynerVision for SoftBench: </author> <title> A Process Engine for Teams, 1992. Marketing literature. </title>
Reference-contexts: In addition, the process data could be kept separately from the product data (which may reside in 5 the native file system). In PMLs with no data modeling at all (e.g., Synervision <ref> [27] </ref>) this element degenerates to the empty language and all data elements are considered to belong to the single "universal" class. * D is a database for storing the persistent objects, each belonging to a certain type (or class) from S. * P is a set of activities/steps/tasks and their inter-relationships,
Reference: [28] <author> Hajimu Iida, Takeshi Ogihara, Katsuro Inoue, and Koji Torii. </author> <title> Generating a menu-oriented navigation system from formal description of software development activity sequence. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 45-57, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: There is a spectrum of approaches to employing grammars in process modeling, analogous to sentence generation at one end (what Heimbigner calls a prescriptive process [22]) to sentence recognition (parsing) at the other (proscriptive) [29]. The PDL project employed the former for context-free grammars <ref> [28] </ref>, while the implementation of the Activity Structures Language on top of Marvel follows the latter approach [31]. One group experimented with both in the context of attribute grammars for HFSP [32] and Objective Attribute Grammars [47], respectively.
Reference: [29] <author> Gail E. Kaiser, Israel Z. Ben-Shaul, and Steven S. Popovich. </author> <title> Implementing activity structures process modeling on top of the marvel environment kernel. </title> <type> Technical Report CUCS-027-91, </type> <institution> Columbia University, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: There is a spectrum of approaches to employing grammars in process modeling, analogous to sentence generation at one end (what Heimbigner calls a prescriptive process [22]) to sentence recognition (parsing) at the other (proscriptive) <ref> [29] </ref>. The PDL project employed the former for context-free grammars [28], while the implementation of the Activity Structures Language on top of Marvel follows the latter approach [31]. One group experimented with both in the context of attribute grammars for HFSP [32] and Objective Attribute Grammars [47], respectively.
Reference: [30] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year> <month> 50 </month>
Reference-contexts: and maintenance of software, including task definitions, control integration such as global task ordering and local constraints on their activation, tool integration, data modeling and integration, and user modeling; and (2) mechanisms for enacting the modeled process by the PSEEs process-engine, where forms of enactment include process automation (e.g., Marvel <ref> [30] </ref>), consistency (e.g., CLF [46]), monitoring (e.g., Provence [34]), enforcement (e.g., Darwin [42]), and guidance (e.g., Merlin [51]). <p> S could be part of an external database that is separate from the PML (as in SPADE [2]) or it could be part of the PML (as in Marvel <ref> [30] </ref>). In addition, the process data could be kept separately from the product data (which may reside in 5 the native file system).
Reference: [31] <author> Gail E. Kaiser, Steven S. Popovich, and Israel Z. Ben-Shaul. </author> <title> A bi-level language for software process modeling. </title> <editor> In Walter F. Tichy, editor, </editor> <booktitle> Configuration Management, number 2 in Trends in Software, chapter 2, </booktitle> <pages> pages 39-72. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: Pre-Summit actions include: (1) Verification that prerequisites imposed by the process step enclosing the activity are satisfied locally; this may be regarded as "internal" constraints. (2) Verification that the activity can be executed with respect to the overall task workflow; this may be regarded as "external" constraints (see <ref> [31] </ref> for more on this distinction). (3) Active invocation of related activities, e.g., to satisfy (1) and (2). And (4) Deriving and binding data arguments that are required by the activity but were not specified as parameters. <p> The PDL project employed the former for context-free grammars [28], while the implementation of the Activity Structures Language on top of Marvel follows the latter approach <ref> [31] </ref>. One group experimented with both in the context of attribute grammars for HFSP [32] and Objective Attribute Grammars [47], respectively. Considering the grammar-based PMLs, a terminal symbol corresponds to an activity in our context hierarchy, a non-terminal symbol to a task, and a production to a process step.
Reference: [32] <author> Takuya Katayama. </author> <title> A hierarchical and functional software process description and its enaction. </title> <booktitle> In 11th International Conference on Software Engineering, </booktitle> <pages> pages 343-352, </pages> <address> Pittsburgh PA, </address> <month> May </month> <year> 1989. </year> <note> IEEE Computer Science Press. </note>
Reference-contexts: The PDL project employed the former for context-free grammars [28], while the implementation of the Activity Structures Language on top of Marvel follows the latter approach [31]. One group experimented with both in the context of attribute grammars for HFSP <ref> [32] </ref> and Objective Attribute Grammars [47], respectively. Considering the grammar-based PMLs, a terminal symbol corresponds to an activity in our context hierarchy, a non-terminal symbol to a task, and a production to a process step.
Reference: [33] <author> Marc I. Kellner and H. Dieter Rombach. </author> <title> Session summary: Comparisons of software process descriptions. </title> <editor> In Takuya Katayama, editor, </editor> <booktitle> 6th International Software Process Workshop: Support for the Software Process, </booktitle> <pages> pages 7-18, </pages> <address> Hakodate, Japan, October 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: These families, together with rules, cover most kinds of PSEE <ref> [33] </ref>.
Reference: [34] <author> Balachander Krishnamurthy and Naser S. Barghouti. Provence: </author> <title> A process visualization and enactment environment. </title> <editor> In Ian Sommerville and Manfred Paul, editors, </editor> <booktitle> 4th European Software Engineering Conference, number 717 in Lecture Notes in Computer Science, </booktitle> <pages> pages 451-465. </pages> <publisher> Springer-Verlag, </publisher> <address> Garmisch-Partenkirchen, Germany, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: integration such as global task ordering and local constraints on their activation, tool integration, data modeling and integration, and user modeling; and (2) mechanisms for enacting the modeled process by the PSEEs process-engine, where forms of enactment include process automation (e.g., Marvel [30]), consistency (e.g., CLF [46]), monitoring (e.g., Provence <ref> [34] </ref>), enforcement (e.g., Darwin [42]), and guidance (e.g., Merlin [51]).
Reference: [35] <institution> Programming Systems Lab. </institution> <note> Darkover 1.0 manual. Technical Report CUCS-023-95e, </note> <institution> Columbia University Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: We base our evaluation mainly on our experience in using Emerald City, an Oz environment that has been used to develop the Amber [1] rule processor, Pern [25] transaction manager, and the Darkover <ref> [35] </ref> object management system.
Reference: [36] <institution> Programming Systems Laboratory. </institution> <note> Marvel 3.1 Administrator's manual. Technical Report CUCS-009-93, </note> <institution> Columbia University Department of Computer Science, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: These definitions are translated into an internal format and then loaded into the environment. The process modeling language of Oz is based on the Marvel Strategy Language (MSL) <ref> [36] </ref>. Most importantly, Oz extends the user-driven, rule-based paradigm to multi-process environments. Specifically, as far as local processes are concerned, Oz processes are defined in terms of rules which correspond to the notion of process-steps in the generic context hierarchy.
Reference: [37] <author> Ted G. Lewis. </author> <title> Where is client/server software headed? Computer, </title> <booktitle> 28(4) </booktitle> <pages> 49-55, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: The concept of system-interoperability, which has been largely motivated by the emerging globalization of computing, has been increasingly gaining popularity in various domains such as workflow interoperability for business process re-engineering [19], multi-database interoperability [12], and general client-server interoperability <ref> [43, 37] </ref>). In this paper we explore interoperability in the context of process-centered software engineering environments (PSEEs).
Reference: [38] <author> Jeff Magee, Naranker Dulay, and Jeff Kramer. </author> <title> Structuring parallel and distributed progrmas. </title> <journal> Software Engineering Journal, </journal> <volume> 8(2) </volume> <pages> 73-82, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Process interconnection language, separate from a specific PML | This is analogous to dynamic module interconnection languages, in which a separate notation is used to denote how modules are inter-connected. For example, the Darwin <ref> [38] </ref> configuration language 1 (the successor to Conic [39]) enables (operating system) processes to interconnect independently of the specific language in which they are written, by means of typed ports through which data is exchanged between the processes.
Reference: [39] <author> Jeff Magee, Jeff Kramer, and Morris Sloman. </author> <title> Constructing distributed systems in Conic. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6) </volume> <pages> 663-675, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Process interconnection language, separate from a specific PML | This is analogous to dynamic module interconnection languages, in which a separate notation is used to denote how modules are inter-connected. For example, the Darwin [38] configuration language 1 (the successor to Conic <ref> [39] </ref>) enables (operating system) processes to interconnect independently of the specific language in which they are written, by means of typed ports through which data is exchanged between the processes.
Reference: [40] <author> Peiwei Mi and Walt Scacchi. </author> <title> Modeling articulation work in software engineering processes. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 188-201, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Modeling, analysis, and simulation are performed with the Articulator system <ref> [40] </ref>, process execution is performed by HP's SynerVision, and Matisse [18] (also from HP) is used to maintain a knowledge-base containing the artifacts that represent the process models developed in the Articulator, and serves as an integration medium between Articulator and SynerVision.
Reference: [41] <author> Peiwei Mi and Walt Scacchi. </author> <title> Process integration in CASE environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: For example, in the FUNSOFT Petri net based PML [21] a process step corresponds to a transition along with its (optionally) attached predicates; in the Articulator task graphs <ref> [41] </ref> this level corresponds to a node with its predecessor and successor edges; and in rule-based PMLs, a process step is represented by a rule with pre- and post-conditions. The process-step level may also supply the mechanism to interface among multiple activities in a process. <p> In a Petri net formalism, for example, the transition (along with its input and output places) seems a natural choice, whereas in rule-based PMLs the rule (process step) is likely to be chosen. In PMLs that support task hierarchies and modularization (e.g., Articulator <ref> [41] </ref>), a subtask might be the right choice. It is important to recognize that the activity portion of a decentralized sub-process need not be executable in every participating SubEnv, e.g., since the encapsulated tool may not be physically available everywhere.
Reference: [42] <author> Naftaly H. Minsky. </author> <title> Law-governed systems. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 285-302, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: task ordering and local constraints on their activation, tool integration, data modeling and integration, and user modeling; and (2) mechanisms for enacting the modeled process by the PSEEs process-engine, where forms of enactment include process automation (e.g., Marvel [30]), consistency (e.g., CLF [46]), monitoring (e.g., Provence [34]), enforcement (e.g., Darwin <ref> [42] </ref>), and guidance (e.g., Merlin [51]).
Reference: [43] <author> John R. Nicol, C. Thomas Wilkes, and Frank A. Manola. </author> <title> Object orientation in heterogeneous distributed computing systems. </title> <journal> Computer, </journal> <volume> 26(6) </volume> <pages> 57-67, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The concept of system-interoperability, which has been largely motivated by the emerging globalization of computing, has been increasingly gaining popularity in various domains such as workflow interoperability for business process re-engineering [19], multi-database interoperability [12], and general client-server interoperability <ref> [43, 37] </ref>). In this paper we explore interoperability in the context of process-centered software engineering environments (PSEEs).
Reference: [44] <author> Maria H. Penedo. </author> <title> Life-cycle (sub) process scenario. In Carlo Ghezzi, editor, </title> <booktitle> 9th International Software Process Workshop, </booktitle> <pages> pages 141-143, </pages> <address> Airlie VA, October 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Thus, 19% of the total distinct rules in Emerald City are Treaty rules. This figure, which can be used as a (static) measure of the level of site-interoperability, seems to be typical for Oz environments; in another experimental environment that implemented the ISPW9 "benchmark scenario" <ref> [44] </ref>, this interoperability measure was 15% (see [7]). Another (dynamic) measure of site-interoperability is the percentage of actual invocations of Treaty rules in Summits from the total invocations. Table 5.1 summarizes the runtime statistics made for 11 active project members (taken from execution log files generated by Oz).
Reference: [45] <author> James L. Peterson. </author> <title> Petri Net Theory and The Modeling of Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs NJ, </address> <year> 1981. </year> <month> 51 </month>
Reference-contexts: These families, together with rules, cover most kinds of PSEE [33]. Since we take the existing PMLs as given, the uninitiated reader should see the cited references for background and justification of each approach to process modeling. 4.1 Petri Nets The Petri net <ref> [45] </ref> is a formalism for modeling concurrent systems, and it has been widely applied to software process modeling. The application of our decentralized model to Petri net-based PSEEs is influenced primarily by SLANG [2] and FUNSOFT [21], and their corresponding PSEEs, SPADE and MELMAC, respectively.
Reference: [46] <institution> CLF Project. CLF Manual. USC Information Sciences Institute, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: including task definitions, control integration such as global task ordering and local constraints on their activation, tool integration, data modeling and integration, and user modeling; and (2) mechanisms for enacting the modeled process by the PSEEs process-engine, where forms of enactment include process automation (e.g., Marvel [30]), consistency (e.g., CLF <ref> [46] </ref>), monitoring (e.g., Provence [34]), enforcement (e.g., Darwin [42]), and guidance (e.g., Merlin [51]).
Reference: [47] <author> Yoichi Shinoda and Takuya Katayama. </author> <title> Towards formal description and automatic generation of programming environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, number 467 in Lecture Notes in Computer Science, </booktitle> <pages> pages 261-270. </pages> <publisher> Springer-Verlag, </publisher> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: The PDL project employed the former for context-free grammars [28], while the implementation of the Activity Structures Language on top of Marvel follows the latter approach [31]. One group experimented with both in the context of attribute grammars for HFSP [32] and Objective Attribute Grammars <ref> [47] </ref>, respectively. Considering the grammar-based PMLs, a terminal symbol corresponds to an activity in our context hierarchy, a non-terminal symbol to a task, and a production to a process step.
Reference: [48] <author> Izhar Shy, Richard Taylor, and Leon Osterweil. </author> <title> A metaphor and a conceptual architecture for software development enviornments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 77-97. </pages> <publisher> Springer-Verlag, </publisher> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: Although ISTAR was not a PSEE (it had a somewhat hard-coded process), its architecture was an important step towards decentralization. Shy, Taylor, and Osterweil were among the first to explicitly identify decentralization as a key environment technology <ref> [48] </ref>. Their theoretical work draws an analogy between software development and the business corporation, and they advocate a "federated decentralization" model for PSEEs with global support for environment infrastructure capabilities and local management with means to mediate relations between local processes.
Reference: [49] <author> Robert E. Strom, David F. Bacon, Arthur P. Goldberg, Andy Lowry, Daniel M. Yellin, and Shaula Alexander Yemini. </author> <title> Hermes A Language for Distributed Computing. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs NJ, </address> <year> 1991. </year>
Reference-contexts: Other distributed programming languages | This community produced numerous languages that support some form of dynamic program configuration among relatively independent (operating system) processes. One representative is Hermes <ref> [49] </ref>, another port-based language in which new ports can be added to an executing (operating system) process and existing port connections can also be changed, by statements executed from within the existing Hermes code.
Reference: [50] <author> Giuseppe Valetto and Gail E. Kaiser. </author> <title> Enveloping sophisticated tools into computer-aided software engineering environments. </title> <booktitle> In IEEE 7th International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 40-48, </pages> <address> Toronto Ontario, Canada, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: The solution in Oz is to direct all activities to the initiating user, by default. An optimization could be to direct only interactive activities to the remote client and execute non-interactive activities with a local "proxy" client (see <ref> [50] </ref>). To provide a full solution, however, Oz allows remote activities to be delegated to (remote) users by extending its modeling language to specify delegation, and by providing a delegation mechanism that redirects activities.
Reference: [51] <author> Wilhelm Schafer, Burkhard Peuschel and Stefan Wolf. </author> <title> A knowledge-based software development environment supporting cooperative work. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 79-106, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: on their activation, tool integration, data modeling and integration, and user modeling; and (2) mechanisms for enacting the modeled process by the PSEEs process-engine, where forms of enactment include process automation (e.g., Marvel [30]), consistency (e.g., CLF [46]), monitoring (e.g., Provence [34]), enforcement (e.g., Darwin [42]), and guidance (e.g., Merlin <ref> [51] </ref>).
References-found: 51

