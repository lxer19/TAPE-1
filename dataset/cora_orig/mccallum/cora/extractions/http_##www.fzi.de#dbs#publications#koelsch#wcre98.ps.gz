URL: http://www.fzi.de/dbs/publications/koelsch/wcre98.ps.gz
Refering-URL: http://www.fzi.de/dbs/publications/1998_de.html
Root-URL: http://www.fzi.de
Email: email: koelsch@fzi.de  
Title: Object-Oriented Re-Engineering of Information Systems in a Heterogeneous Distributed Environment  
Author: Ulrike Kolsch 
Address: Haid-und-Neustrasse 10-14 76131 Karlsruhe, Germany  
Affiliation: Forschungszentrum Informatik (FZI)  
Abstract: Distributed object-oriented environments are the architecture of choice for supporting modern, highly flexible business processes. Existing host-based information systems (IS) must be integrated into these environments in order to preserve their investments in a changing environment. In this paper we present a strategy that establishes a cooperative co-existence of legacy and new IS in a distributed object-oriented environment. The cooperation is based on the approximation of the semantics of the participating systems. The approximated semantics allows for a mapping between corresponding entities of the different models. This mapping forms the basis of an implementation translating and replicating the repository instances of the systems taking part in the cooperation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. M. Sneed, </author> <title> "Encapsulating Legacy Software for Use in Client/Server Systems," </title> <booktitle> in Proceedings of the Third Working Conference on Reverse Engineering, </booktitle> <month> November </month> <year> 1996, </year> <pages> pp. 104-119, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference: [2] <author> E.L. Burd, M. Munro, C. </author> <title> Wezeman "Analysing Large COBOL Programs: the extraction of reusable modules," </title> <booktitle> in Proceedings of the International Conference on Software Maintenance, </booktitle> <address> California, 1996, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference: [3] <author> H. M. Sneed, </author> <title> "Program Interface Reengineering for Wrapping," </title> <booktitle> in Proceedings of the Fourth Working Conference on Reverse Engineering, </booktitle> <month> October </month> <year> 1997, </year> <pages> pp. 206-214, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: The major intention of wrapping is to migrate system parts or complete systems, or to provide an encapsulated functionality of a specific system. The proposed granularity of wrapping units reaches from the level of functions or modules ([2],[1]), applications <ref> [3] </ref> up to the level of complete systems and heterogeneous data sources. Brodie and Stone-braker [4] recommend to separate the systems along the three tiers architecture (user interface layer/application layer/data base management system layer) whenever this is possible.
Reference: [4] <author> M.L. Brodie, M. Stonebraker, </author> <title> "Migrating Legacy Systems," </title> <publisher> Morgan Kaufman, </publisher> <year> 1997. </year>
Reference-contexts: The proposed granularity of wrapping units reaches from the level of functions or modules ([2],[1]), applications [3] up to the level of complete systems and heterogeneous data sources. Brodie and Stone-braker <ref> [4] </ref> recommend to separate the systems along the three tiers architecture (user interface layer/application layer/data base management system layer) whenever this is possible. But legacy systems based on pre-relational or file-based databases often do not use this architecture.
Reference: [5] <author> J.-L. Hainault, J. Henrard, D. Roland, V. Englebert, and J.-M. Hick, </author> <title> "Stucture Eliciation in Database Reverse Engineering," </title> <booktitle> in Proceedings of the Third Working Conference on Reverse Engineering, </booktitle> <month> November </month> <year> 1996, </year> <pages> pp. 131-140, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference: [6] <author> K. H. Davis, </author> <title> "Combining a Flexible Data Model and Phase Schema Translation in Data Model," </title> <booktitle> in Proceedings of the Third Working Conference on Reverse Engineering, </booktitle> <month> November </month> <year> 1996, </year> <pages> pp. 141-151, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference: [7] <author> J.-L. Hainault, M. Chandelon, C. Tonneau, and M. Joris, </author> <title> "Contribution to a Theory of Database Reverse Engineering," </title> <booktitle> in Proceedings of the First Working Conference on Reverse Engineering, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 161-170, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference: [8] <author> W.J. Premerlani, </author> <title> M.R. Blaha, "An Approach for Reverse Engineering of Relational Databases," </title> <booktitle> in Proceedings of the First Working Conference on Reverse Engineering, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 151-160, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference: [9] <author> K.H. Davis, </author> <title> "August II: A Tool for Step-by-Step Data Model Reverse Engineering," </title> <booktitle> in Proceedings of the Second Working Conference on Reverse Engineering, </booktitle> <month> July </month> <year> 1995, </year> <pages> pp. 146-154, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: However, since we do not make use of the legacy source code the source code analysing approaches are of little interest for our purposes. Many authors concentrate on the problem of extracting semantic information from databases ([7],[5],[8], and <ref> [9] </ref>). In the light of our situation most approaches show a number of deficiencies: * Their strategies are based on the assumption that legacy databases are homogenous with regard to technology, development method, and style. We have to deal with legacy databases using different technologies.
Reference: [10] <author> S.B. Navathe, A.M. Awong, </author> <title> "Abstracting relational and hierarchical data with a semantic data model," </title> <booktitle> in Proceedings of the Sixth International Conference on Entity-Relationship Approach, </booktitle> <month> November </month> <year> 1987, </year> <pages> pp. 305-333, </pages> <publisher> IEEE Computer Society Press, </publisher>
Reference: [11] <author> E.G. </author> <title> Nilsson "The Translation of a Cobol Data Structure to an Entity-Relationship Type Conceptual Schema," </title> <booktitle> in Proceedings of the Fourth International Conference on Entity-Relationship Approach, </booktitle> <month> October </month> <year> 1985, </year> <pages> pp. 170-177, </pages> <publisher> IEEE Computer Society Press, </publisher>
Reference: [12] <author> U. Kolsch, M. Wallrath, </author> <title> "A Process Model for Controlling and Performing Re-Engineering Tasks," </title> <booktitle> in Proceedings of the First Euromicro Conference on Software Maintenance and Reengineering, </booktitle> <address> March 1997, </address> <publisher> IEEE Computer Society Press </publisher>
Reference-contexts: The approximation process orients itself according to the EOM by considering the variants and design patterns used. Therefore we already achieve a semantic approximation of the two models. This process of reference model oriented adaptation of the reverse model is described in <ref> [12] </ref>. Most of the modelling constructs introduced to keep the information of the host-based legacy system are transformed into documentation notes or shifted to other model entities. Some transformations are listed below: * Objects of same semantics but different origin are united into one location-invariant object.
Reference: [13] <author> U. Kolsch, </author> <title> "Reverse Modeling of Data Semantics of a VSAM File based Information System," </title> <booktitle> Poster at Fourth Working Conference on Reverse Engineering, </booktitle> <month> October </month> <year> 1997, </year> <institution> Amsterdam, The Netherlands </institution>
Reference-contexts: We used the COBOL and Assembler data structures as well as the data dictionaries of the systems as information sources. The approach of extracting an object model from data file description is described in <ref> [13] </ref>. We also use the approaches described in ([6],[11],[10]) adapted to our specific needs. Based on the following strategy we extract the objects stored/buried in the data record descriptions: 1. As a starting point, every data record description forms an object.
Reference: [14] <author> S. Conrad, </author> <title> "Foderierte Datenbanksysteme," </title> <publisher> Springer, </publisher> <year> 1997 </year>
Reference: [15] <author> R. Hull, </author> <title> "Managing Semantic Heterogeneity in Databases: </title>
References-found: 15

