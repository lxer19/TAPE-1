URL: http://www.brunel.ac.uk/~cspgssk/documents/nca97/NCA97.ps.gz
Refering-URL: http://www.brunel.ac.uk/~cspgssk/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Genetic Programming for Prediction and Control  
Author: Dimitris C. Dracopoulos Simon Kent 
Keyword: Genetic Programming, Parallel Computing, Prediction, Evolutionary Control, Evolutionary Computing  
Address: London, UK  London, UK  
Affiliation: Dept of Inf Systems Computing Brunel University  Dept of Inf Systems Computing, Brunel University  
Abstract: The relatively "new" field of genetic programming has received a lot of attention during the last few years. This is because of its potential for generating functions which are able to solve specific problems. This paper begins with an extensive overview of the field, highlighting its power and limitations and providing practical tips and techniques for the successful application of GP in general domains. Following this, emphasis is placed on the application of genetic programming to prediction and control. These two domains are of extreme importance in many disciplines. Results are presented for an oral cancer prediction task and a satellite attitude control problem. Finally the paper, discusses how the convergence of genetic programming can be significantly speeded up through bulk synchronous model parallelisation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Andre and John R. Koza. </author> <title> Parallel genetic programming: A scalable implementation using the transputer network architecture. </title> <editor> In Peter J. Angeline and K. E. Kinnear, 18 Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 16, </booktitle> <pages> pages 317-338. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: To evaluate the fitness of the circuits, a patched version of the freely available SPICE (Simulation program with Integrated Circuit Emphasis) simulator was used [33]. The run was on a system consisting of 64, 80MHz PowerPC 601 processors the architecture of which is described in Andre and Koza <ref> [1] </ref>. Although it is reported that this is an efficient means of parallelising GP, the equipment required is not going to be freely available to most researchers. Another parallel GP implementation is reported by Juille and Pollack [17].
Reference: [2] <author> Forrest H Bennett III, John R. Koza, David Andre, and Martin A. Keane. </author> <title> Evolution of a 60 decibel op amp using genetic programming. </title> <booktitle> In Proceedings of International Conference on Evolvable Systems: From Biology to Hardware (ICES-96), Lecture Notes in Computer Science, </booktitle> <address> Berlin, Germany, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: It is a natural progression to apply similar techniques to GP. A good example of applying parallel 15 GP to a complex problem is provided by Bennet III et al <ref> [2] </ref>. In this approach GP was used to evolve analogue electronic circuits. To evaluate the fitness of the circuits, a patched version of the freely available SPICE (Simulation program with Integrated Circuit Emphasis) simulator was used [33].
Reference: [3] <author> Tobias Blickle and Lothar Thiele. </author> <title> A comparison of selection schemes used in genetic algorithms. </title> <type> Technical Report 11, </type> <institution> Computer Engineering and Communications Networks Lab (TIK), Swiss Federal Institute of Technology (ETH), </institution> <address> Gloriastrae 3, 8092 Zurich, Switzer-land, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: An alternative (rank selection) is to sort the individuals' fitnesses and rank them accordingly. During the tournament, the ranks can be compared rather than the fitnesses. The relative merits of different selection schemes are discussed by Blickle <ref> [3] </ref> in the context of GA. 2.5 The GP Population To allow evolution to progress, sufficient diversity must exist in the population as a whole. In nature, a loss of genetic diversity brought about by incestuous behaviour shows itself in genetic abnormalities.
Reference: [4] <author> Charles Darwin. </author> <title> On the Origin of Species. </title> <publisher> John Murray, </publisher> <address> London, </address> <month> 1859. </month>
Reference-contexts: With genetic programming there is no need to formulate an algorithm which is later coded in a particular programming language. Instead, GP evolves an algorithm by drawing on Darwinian evolutionary theory <ref> [4] </ref>. The principle of survival of the fittest has produced extremely complex functional solutions through biological evolution in the form of plants and animals.
Reference: [5] <author> Dimitris C. Dracopoulos. </author> <title> Evolutionary control of a satellite. </title> <editor> In John R. Koza, Deb. Kalyan-moy, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <address> Stanford University, San Francisco, CA, July 13-16 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: So far, GP has been applied to a small number of control problems but without major consideration of stability issues (with the exception of <ref> [5] </ref>). Some of the successful GP control applications include the solution to classical control theory problems, the broom balancing problem and the truck backer upper problem [20]. However, there is a current "explosion" of GP application to control problems (for an overview of evolutionary algorithms for control applications see [7]). <p> In <ref> [5] </ref> it was proved that for the control law given by (5) a Lyapunov function exists, therefore the stability of the system is guaranteed from theory. This was the first (and the only so far) proof of stability for a controller derived by the genetic programming approach.
Reference: [6] <author> Dimitris C. Dracopoulos. </author> <title> Evolutionary Learning Algorithms for Neural Adaptive Control. </title> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1997. </year>
Reference-contexts: The fitness is the single means by which the GP process can choose which genetic material should be propagated from generation to generation. The GP process which relies on the the feedback provided by the fitness value, resembles that of reinforcement learning techniques <ref> [6, 34] </ref>. Individuals are punished (extinguished) if their fitness is low, while those with above average fitness are rewarded, through their selection for further reproduction. During fitness evaluation each program in a GP population is evaluated against the problem. <p> To determine which stopping point is ideal, the available data should be split into three sets: training, validation and test, and these sets used as a decision for the stopping point of the run. The details of this approach can be found in <ref> [6] </ref> and also in the other paper in this issue by the first author. 2.7 GP problems and solutions The most obvious problems with GP are related to computer hardware. Given infinite power and memory, GP could solve any problem (although this is also true of a random search). <p> There are several cases where freely rotating rigid bodies can exhibit chaotic behaviour <ref> [6] </ref>.
Reference: [7] <author> Dimitris C. Dracopoulos. </author> <title> Genetic algorithms and genetic programming for control. </title> <editor> In D. Dasgupta and Z. Michalewicz, editors, </editor> <booktitle> Evolutionary Algorithms in Engineering Applications, </booktitle> <pages> pages 329-344. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Intelligent controllers can be classified as either "pure" or hybrid architectures <ref> [7] </ref>. Neural, evolutionary and fuzzy approaches are used or integrated to build systems with improved performance [38]. Genetic programming offers an ideal candidate for controller designs, due to the direct matching of its individual structures and control rules. <p> Some of the successful GP control applications include the solution to classical control theory problems, the broom balancing problem and the truck backer upper problem [20]. However, there is a current "explosion" of GP application to control problems (for an overview of evolutionary algorithms for control applications see <ref> [7] </ref>).
Reference: [8] <author> Dimitris C. Dracopoulos and Duncan Self. </author> <booktitle> Parallel genetic programming. In Proceedings of UK Parallel 96. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: A similar parallel approach using PVM was implemented in <ref> [8] </ref>, tested on the truck backer upper problem. 7 Conclusions The number of applications in the genetic programming area are now quite substantial, and new journals appear which specifically deal with evolutionary computation, presenting more and more GP applications in a number of disciplines.
Reference: [9] <author> Ciaran Elliot. </author> <title> The use of inductive logic programming and data mining techniques to identify people at risk of oral cancer and precancer. </title> <type> Master's thesis, </type> <institution> Brunel University, </institution> <year> 1996. </year>
Reference-contexts: These are defined in Table 3 with results for the best evolved GP rule. For comparison, values are given for a Neural Network rule developed in Elliot <ref> [9] </ref>, and for a manual dental screener. Metric Description Definition Performance Ratings GP NN Manual Sensitivity Performance of a test in terms of its ability to accurately predict a positive outcome, given that the outcome was actually positive.
Reference: [10] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: In evolutionary computing, the selection of individuals to participate in the genetic operations must be made according to an algorithm. The most popular method, known as proportional fitness or roulette wheel selection <ref> [10] </ref>, involves calculating, for each individual its proportion of the total population fitness, such that the sum of all the individual fitnesses equals 1.0. On a line between 0.0 and 1.0, the better individuals will take up a larger proportion of the line than will less fit individuals.
Reference: [11] <author> Herbert Goldstein. </author> <title> Classical Mechanics. </title> <publisher> Addison Wesley, </publisher> <address> second edition, </address> <year> 1980. </year>
Reference-contexts: The second part of the attitude control problem (achieving a desired orientation) is not addressed here. It is assumed that the satellite is a rigid body, so that the motion is described by the Euler equations <ref> [11] </ref>. The system is equipped with reaction thrusters which provide control torques about the three principal axes. <p> They are given by the following equations <ref> [11] </ref>: L = I x _! 1 (I y I z )! 2 ! 3 N = I z _! 3 (I x I y )! 1 ! 2 where I x ; I y ; I z are principal moments of inertia, ! 1 ; ! 2 ; ! 3
Reference: [12] <author> V. Scott Gordon and Darrell Whitley. </author> <title> Serial and parallel genetic algorithms as function optimizers. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, </booktitle> <address> San Francisco, CA, USA, 1993. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: It is logical to locate a sub-population or deme at each processing node. In this way each processing node can be considered to be an island. This island model has been previously adopted in the GA field <ref> [12] </ref> and in parallel GP [23]. The extreme case of loosely coupled system would involve the simultaneous execution of a number of differently seeded runs as completely independent processes [15], but this does not take advantage of the use of demes.
Reference: [13] <author> Simon G. Handley. </author> <title> The prediction of the degree of exposure to solvent of amino acid residues via genetic programming. </title> <booktitle> In Second International Conference on Intelligent Systems for Molecular Biology, </booktitle> <institution> Stanford University, Stanford, </institution> <address> CA, USA, 1994. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Traditional approaches to research in molecular biology are very labour intensive and the structures which are being researched are enormous. The human genome contains roughly 100,000 genes, each containing around 1,000 bases. Intelligent techniques such as GP are being adopted <ref> [13, 14, 24] </ref> to support the traditional methods, and thus speed up research. One of the most interesting areas of GP application is in the evolution of electrical hardware. Koza et al [25] have used GP to evolve analogue electronic circuits.
Reference: [14] <author> Simon G. Handley. </author> <title> Classifying nucleic acid sub-sequences as introns or exons using genetic programming. </title> <editor> In Christopher Rawlins, Dominic Clark, Russ Altman, Lawrence Hunter, Thomas Lengauer, and Shoshana Wodak, editors, </editor> <booktitle> Proceedings of the Third International Conference on Intelligent Systems for Molecular Biology (ISMB-95), </booktitle> <pages> pages 162-169, </pages> <address> Cam-bridge, UK, 1995. </address> <publisher> AAAI Press. </publisher> <pages> 19 </pages>
Reference-contexts: Traditional approaches to research in molecular biology are very labour intensive and the structures which are being researched are enormous. The human genome contains roughly 100,000 genes, each containing around 1,000 bases. Intelligent techniques such as GP are being adopted <ref> [13, 14, 24] </ref> to support the traditional methods, and thus speed up research. One of the most interesting areas of GP application is in the evolution of electrical hardware. Koza et al [25] have used GP to evolve analogue electronic circuits.
Reference: [15] <author> Christopher Harris and Bernard Buxton. GP-COM: </author> <title> A distributed, component-based ge-netic programming system in C++. Research Note RN/96/2, </title> <publisher> UCL, </publisher> <address> Gower Street, London, WC1E 6BT, UK, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: This island model has been previously adopted in the GA field [12] and in parallel GP [23]. The extreme case of loosely coupled system would involve the simultaneous execution of a number of differently seeded runs as completely independent processes <ref> [15] </ref>, but this does not take advantage of the use of demes. The standard GP process is modified by the addition of a migration operator as shown in The processing islands are arranged according to a topology, examples of which are shown in Figure 7.
Reference: [16] <author> T. Higuchi, M. Iwata, and L. Weixin, </author> <title> editors. Evolvable Systems: From Biology to Hardware. </title> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: This is a very computationally expensive application which uses parallel computing as described in Section 6. Over the past couple of years some very interesting work has been developed on the direct evolution of Hardware. This Evolvable Hardware (EHW) <ref> [16] </ref> field has arisen only due to the availability of the Field Programmable Gate Array (FPGA). This is a large array of cells which can be instructed to act as one of a number of logic gates.
Reference: [17] <author> Hugues Juille and Jordan B. Pollack. </author> <title> Parallel genetic programming and fine-grained SIMD architecture. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 31-37, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, 10-12November 1995. </address> <publisher> AAAI. </publisher>
Reference-contexts: Although it is reported that this is an efficient means of parallelising GP, the equipment required is not going to be freely available to most researchers. Another parallel GP implementation is reported by Juille and Pollack <ref> [17] </ref>. Those seeking to enter the field of GP with a view to evaluating its suitability for use with their specific application need a simple means of producing a parallel GP system which will work on a network of entry level workstations.
Reference: [18] <author> J.A. Jullien, M.C Downer, J. Zakzrewska, and P.M. Speight. </author> <title> Evaluation of a screening test for the early detection of oral cancer and pre-cancer. </title> <journal> Communications of Dental Health, </journal> <volume> 12:3, </volume> <year> 1995. </year>
Reference-contexts: A specific example of such screening is for oral cancer and pre-cancer. Data was made available from the Eastman Dental Institute following a previous study <ref> [18] </ref> which provided information on patient's lifestyles and habits. It was hoped that GP would be able to learn a rule to classify patients into two groups.
Reference: [19] <author> John R. Koza. </author> <title> Hierarchical genetic algorithms operating on populations of computer programs. </title> <editor> In N. S. Sridharan, editor, </editor> <booktitle> Proceedings of the Eleventh International Joint Conference on Artificial Intelligence IJCAI-89, </booktitle> <volume> volume 1, </volume> <pages> pages 768-774, </pages> <address> San Mateo, CA, USA, 20-25August 1989. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: GP has its foundations in the well established field of GAs, and an earlier paper <ref> [19] </ref> actually refers to GP as hierarchical genetic algorithms. The principles which underly GA and GP are very similar.
Reference: [20] <author> John R. Koza. </author> <title> Genetic Programming: on the Programming of Computers by means of Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: Finally, Section 6 shows how GP runs can become faster through bulk synchronous model parallelisation. 2 Genetic Programming Although a number of people have claimed that they first introduced genetic programming, the field became publicised in the early 90's with the publication of Koza's book <ref> [20] </ref> on genetic programming. GP has its foundations in the well established field of GAs, and an earlier paper [19] actually refers to GP as hierarchical genetic algorithms. The principles which underly GA and GP are very similar. <p> Other more specialised genetic operators exist, and full details of the most common of them can be found in <ref> [20] </ref>. For some problems it may be appropriate to adopt special operators which apply some heuristic to the domain of the problem. <p> This is known as protected division <ref> [20] </ref>. An alternative to the closure condition, is that of strong typing [31]. This involves having functions and terminals which can return different types. Type checking mechanisms must be adopted during the creation of the initial generation and subsequent evolution of the population such that type inconsistencies are removed. <p> In the latter, the fitness is aggregated over all the fitness cases to arrive at a fitness for that individual. Several different types of fitness are described by Koza <ref> [20] </ref> (chapter 6) but the important feature of fitness is that it provides a continuous scale of program performance. 2.4 Survival of the Fittest The underlying principle of evolution is that of "survival of the fittest", whereby the good genetic material perpetuates at the expense of the bad genetic material. <p> Some of the successful GP control applications include the solution to classical control theory problems, the broom balancing problem and the truck backer upper problem <ref> [20] </ref>. However, there is a current "explosion" of GP application to control problems (for an overview of evolutionary algorithms for control applications see [7]). <p> of individuals from each island were migrated to neighbouring islands consequently displacing the lowest performing individuals, thereby distributing the best genetic material throughout the global population. 16 6.1 The Artificial Ant Problem The problem chosen to test the BSP GP implementation was the Artificial Ant problem as used by Koza <ref> [20] </ref>. The problem involves moving a robot ant along a trail of food which lies on a grid. This trail contains 157 pieces of food as shown in Figure 8.
Reference: [21] <editor> John R. Koza. </editor> <booktitle> Genetic Programming II. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1994. </year>
Reference-contexts: According to this, GP is able to evolve subroutines (ADF) as part of the large general solution routine. The details of the incorporation of ADF to the standard GP is found in <ref> [21] </ref>. ADFs have also been shown to enable GP to solve problems more quickly than plain GP, or in some cases to solve problems which plain GP cannot. The improvement of GP as a technique is still an area of very active research.
Reference: [22] <author> John R. Koza. </author> <title> Future work and practical applications of genetic programming. </title> <editor> In T. Baeck, D. B. Fogel, and Z. Michalewicz, editors, </editor> <booktitle> Handbook of Evolutionary Computation, pages H1.1-1-6. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1997. </year>
Reference-contexts: This section provides an insight into some of the wide ranging areas of GP research. More information on ideas for future work in GP may be found in <ref> [22] </ref>. It is fitting, as GP has its roots in Biology, that there are problems in biology and medicine to which GP may be applied.
Reference: [23] <author> John R. Koza and David Andre. </author> <title> Parallel genetic programming on a network of transputers. </title> <type> Technical Report CS-TR-95-1542, </type> <institution> Stanford University, Department of Computer Science, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: It is logical to locate a sub-population or deme at each processing node. In this way each processing node can be considered to be an island. This island model has been previously adopted in the GA field [12] and in parallel GP <ref> [23] </ref>. The extreme case of loosely coupled system would involve the simultaneous execution of a number of differently seeded runs as completely independent processes [15], but this does not take advantage of the use of demes.
Reference: [24] <author> John R. Koza and David Andre. </author> <title> Classifying protein segments as transmembrane domains using architecture-altering operations in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 8, </booktitle> <pages> pages 155-176. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Traditional approaches to research in molecular biology are very labour intensive and the structures which are being researched are enormous. The human genome contains roughly 100,000 genes, each containing around 1,000 bases. Intelligent techniques such as GP are being adopted <ref> [13, 14, 24] </ref> to support the traditional methods, and thus speed up research. One of the most interesting areas of GP application is in the evolution of electrical hardware. Koza et al [25] have used GP to evolve analogue electronic circuits.
Reference: [25] <author> John R. Koza, Forrest H. Bennett III, David Andre, and Martin A. Keane. </author> <title> Automated WYWIWYG design of both the topology and component values of electrical circuits using genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 123-131, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Intelligent techniques such as GP are being adopted [13, 14, 24] to support the traditional methods, and thus speed up research. One of the most interesting areas of GP application is in the evolution of electrical hardware. Koza et al <ref> [25] </ref> have used GP to evolve analogue electronic circuits. The technique uses component creating functions and connection modifying functions to generate the final circuit by operating on a simple embryonic initial circuit.
Reference: [26] <author> John R. Koza, Forrest H Bennett III, Jeffrey L. Hutchings, Stephen L. Bade, Martin A. Keane, and David Andre. </author> <title> Rapidly reconfigurable field-programmable gate arrays for accelerating fitness evaluation in genetic programming. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the 1997 Genetic Programming Conference, </booktitle> <pages> pages 121-131, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: One, or a mesh of FPGA devices may be connected to a standard PC hosting the evolutionary process. Work in this area was pioneered by Thompson [36] and has more recently been adopted by other researchers <ref> [26, 28] </ref>. The specialist hardware required undoubtedly presents a barrier to entry into this area, but the promise of faster GP is likely to give rise to a considerable increase in research in this area.
Reference: [27] <author> R. B. Leipnik and T. A. </author> <title> Newton. Double strange attractors in rigid body motion with linear feedback control. </title> <journal> Physics Letters, </journal> <volume> 86A:63-67, </volume> <year> 1981. </year> <month> 20 </month>
Reference-contexts: The system is equipped with reaction thrusters which provide control torques about the three principal axes. The attitude control problem has no complete general solution [29], it is highly nonlinear, exhibits chaotic behaviour under certain circumstances <ref> [27] </ref> and therefore is a challenging problem for testing the suitability of GP for the design of complex plant controllers. 13 5.2 The Euler equations The Euler equations describe the rotational motion of a rigid body about its mass centre. <p> by A, so that G = (L; M; N ) = A!, the equations (1) become (A!) 1 = I x _! 1 (I y I z )! 2 ! 3 (A!) 3 = I z _! 3 (I x I y )! 1 ! 2 It has been observed <ref> [27, 32] </ref> that for certain choices of I x ; I y ; I z and A equations (2) exhibit both strange attractors and limit cycles, therefore the high-nonlinear dynamic system is very complex (can exhibit different modes of motion). 5.3 The GP approach Plain GP was applied for the detumbling
Reference: [28] <author> Weixin Liu, Masahiro Murakawa, and Tetsuya Higuchi. </author> <title> Evolvable hardware for on-line adaptive traffic control in ATM networks. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 504-509, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: One, or a mesh of FPGA devices may be connected to a standard PC hosting the evolutionary process. Work in this area was pioneered by Thompson [36] and has more recently been adopted by other researchers <ref> [26, 28] </ref>. The specialist hardware required undoubtedly presents a barrier to entry into this area, but the promise of faster GP is likely to give rise to a considerable increase in research in this area.
Reference: [29] <author> George Meyer. </author> <title> On the use of Euler's theorem on rotations for the synthesis of attitude control systems. </title> <type> Technical Report TN D-3643, </type> <institution> NASA, </institution> <year> 1966. </year>
Reference-contexts: It is assumed that the satellite is a rigid body, so that the motion is described by the Euler equations [11]. The system is equipped with reaction thrusters which provide control torques about the three principal axes. The attitude control problem has no complete general solution <ref> [29] </ref>, it is highly nonlinear, exhibits chaotic behaviour under certain circumstances [27] and therefore is a challenging problem for testing the suitability of GP for the design of complex plant controllers. 13 5.2 The Euler equations The Euler equations describe the rotational motion of a rigid body about its mass centre.
Reference: [30] <author> Richard Miller and Joy Reed. </author> <title> The Oxford BSP Library users' guide. </title> <type> Technical report, </type> <institution> University of Oxford, </institution> <year> 1993. </year>
Reference-contexts: It is a SIMD (Single Instruction Multiple Data) parallel model which is easily implemented through a library such as that developed by Miller and Reed <ref> [30] </ref>. The library contains only six operations as shown in Table 5.
Reference: [31] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <type> BBN Technical Report #7866, </type> <institution> Bolt Beranek and Newman, Inc., </institution> <address> 10 Moulton Street, Cambridge, MA 02138, USA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: This is known as protected division [20]. An alternative to the closure condition, is that of strong typing <ref> [31] </ref>. This involves having functions and terminals which can return different types. Type checking mechanisms must be adopted during the creation of the initial generation and subsequent evolution of the population such that type inconsistencies are removed.
Reference: [32] <author> George E. Piper and Harry G. Kwatny. </author> <title> Complicated dynamics in spacecraft attitude control systems. </title> <journal> Journal of Guidance, Control and Dynamics, </journal> <volume> 15(4) </volume> <pages> 825-831, </pages> <month> July-August </month> <year> 1992. </year>
Reference-contexts: by A, so that G = (L; M; N ) = A!, the equations (1) become (A!) 1 = I x _! 1 (I y I z )! 2 ! 3 (A!) 3 = I z _! 3 (I x I y )! 1 ! 2 It has been observed <ref> [27, 32] </ref> that for certain choices of I x ; I y ; I z and A equations (2) exhibit both strange attractors and limit cycles, therefore the high-nonlinear dynamic system is very complex (can exhibit different modes of motion). 5.3 The GP approach Plain GP was applied for the detumbling
Reference: [33] <author> Thomas Quarles, </author> <title> A.R. Newton, D.O. Pederson, and A Sangiovanni-Vincentelli. </title> <note> SPICE 3 Version 3F5 User's Manual. </note> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA, USA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: The technique uses component creating functions and connection modifying functions to generate the final circuit by operating on a simple embryonic initial circuit. The evolved circuits are evaluated on a patched version of the freely available SPICE (Simulation program with Integrated Circuit Emphasis) simulator <ref> [33] </ref>. This is a very computationally expensive application which uses parallel computing as described in Section 6. Over the past couple of years some very interesting work has been developed on the direct evolution of Hardware. <p> In this approach GP was used to evolve analogue electronic circuits. To evaluate the fitness of the circuits, a patched version of the freely available SPICE (Simulation program with Integrated Circuit Emphasis) simulator was used <ref> [33] </ref>. The run was on a system consisting of 64, 80MHz PowerPC 601 processors the architecture of which is described in Andre and Koza [1].
Reference: [34] <author> Richard S. Sutton and Andrew G. Barto. </author> <title> Reinforcement Learning: An Introduction. </title> <publisher> MIT Press/Bradford Books, </publisher> <year> 1998. </year>
Reference-contexts: The fitness is the single means by which the GP process can choose which genetic material should be propagated from generation to generation. The GP process which relies on the the feedback provided by the fitness value, resembles that of reinforcement learning techniques <ref> [6, 34] </ref>. Individuals are punished (extinguished) if their fitness is low, while those with above average fitness are rewarded, through their selection for further reproduction. During fitness evaluation each program in a GP population is evaluated against the problem.
Reference: [35] <author> Gilbert Syswerd. </author> <title> Uniform crossover in genetic algorithm. </title> <editor> In J.D.Schaffer, editor, </editor> <booktitle> Proceedings of the third international conference on genetic algorithms. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: An alternative, which is more similar to natural evolution, is to generate new population by just replacing one or two individuals in the current population. This steady state GP (the equivalent of the current state GA <ref> [35, 39] </ref>) is less prone to premature convergence and it usually improves the quality of solutions found by the GP run. 6 Another approach to maintaining diversity is to divide the population up into smaller, sub--populations referred to as demes.
Reference: [36] <author> Adrian Thompson. </author> <title> Silicon evolution. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 444-452, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: The device may be programmed as many times as required, thus allowing direct, hardware evaluation of GA/GP structures. One, or a mesh of FPGA devices may be connected to a standard PC hosting the evolutionary process. Work in this area was pioneered by Thompson <ref> [36] </ref> and has more recently been adopted by other researchers [26, 28]. The specialist hardware required undoubtedly presents a barrier to entry into this area, but the promise of faster GP is likely to give rise to a considerable increase in research in this area.
Reference: [37] <author> Leslie G. Valiant. </author> <title> A bridging model for parallel computation. </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> 33(8) </volume> <pages> 103-111, </pages> <year> 1990. </year>
Reference-contexts: An obvious restriction to this method of parallelisation is the relatively slow communication afforded by a typical Ethernet network. The Bulk Synchronous Parallel (BSP) <ref> [37] </ref> model of parallel computing offers an easy entry to parallel computing, and does not require great skill in parallel computing. It is a SIMD (Single Instruction Multiple Data) parallel model which is easily implemented through a library such as that developed by Miller and Reed [30].
Reference: [38] <author> David A. White and Donald A. Sofge, </author> <title> editors. Handbook of Intelligent Control. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1992. </year>
Reference-contexts: Intelligent controllers can be classified as either "pure" or hybrid architectures [7]. Neural, evolutionary and fuzzy approaches are used or integrated to build systems with improved performance <ref> [38] </ref>. Genetic programming offers an ideal candidate for controller designs, due to the direct matching of its individual structures and control rules. One particular problem in the application of GP to control problems is the consideration of stability issues.
Reference: [39] <author> Darrell Whitle. </author> <title> The genitor algorithm and selection pressure: Why rank based allocation of reproductive trials is best. </title> <editor> In J.D.Schaffer, editor, </editor> <booktitle> Proceedings of the third international conference on genetic algorithms. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: An alternative, which is more similar to natural evolution, is to generate new population by just replacing one or two individuals in the current population. This steady state GP (the equivalent of the current state GA <ref> [35, 39] </ref>) is less prone to premature convergence and it usually improves the quality of solutions found by the GP run. 6 Another approach to maintaining diversity is to divide the population up into smaller, sub--populations referred to as demes.

References-found: 39

