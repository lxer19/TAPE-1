URL: ftp://coast.cs.purdue.edu/pub/COAST/papers/IDIOT/IDIOT_Users_Guide.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: mcrosbie@cs.purdue.edu Bryn Dole dole@cs.purdue.edu  ellista@cs.purdue.edu  krsul@cs.purdue.edu  spaf@cs.purdue.edu  
Title: IDIOT Users Guide.  
Author: Mark Crosbie Todd Ellis Ivan Krsul Eugene Spafford 
Date: September 4, 1996  
Pubnum: Technical Report TR-96-050  
Abstract-found: 0
Intro-found: 1
Reference: [ES96a] <author> Todd Ellis and Eugene Spafford. </author> <title> Debugging idiot. </title> <type> Technical report, </type> <month> April </month> <year> 1996. </year>
Reference-contexts: IDIOT work.ps [ES96b] This report outlines the structure of IDIOT, explaining how the components fit and work together. It also describes results from profiling IDIOT against two audit trails and suggests possible approaches to optimizing the program. debugging IDIOT.ps <ref> [ES96a] </ref> This report describes changes made to IDIOT code which allow a greater flexibility in the amount and type of debugging information generated.
Reference: [ES96b] <author> Todd Ellis and Eugene Spafford. </author> <title> Working with idiot. </title> <type> Technical report, </type> <month> April </month> <year> 1996. </year>
Reference-contexts: We recommend that you read this document last before you start writing patterns of your own. IDIOT work.ps <ref> [ES96b] </ref> This report outlines the structure of IDIOT, explaining how the components fit and work together.
Reference: [KS94] <author> Sandeep Kumar and Eugene Spafford. </author> <title> An application of pattern matching in intrusion detection. </title> <type> Technical report, </type> <institution> Purdue University, </institution> <year> 1994. </year>
Reference-contexts: This section will remain short because a much better description of what IDIOT is, the design goals and the model it works under can be found in the documents included in the doc/IDIOT directory in the IDIOT distribution. The files in that directory are: kumar-spaf-overview.ps <ref> [KS94] </ref> This report examines and classifies the characteristics of signatures used in misuse intrusion detection. The document describes a generalized model for matching intrusion signatures based on Colored Petri Nets. This is the first document you should read.
Reference: [KS95] <author> Sandeep Kumar and Eugene Spafford. </author> <title> A taxonomy of common computer security vulnerabilities based on their method of detection. </title> <type> Technical report, </type> <institution> Purdue University, </institution> <year> 1995. </year>
Reference-contexts: An in-depth description of intrusion detection, the theoretical considerations behind IDIOT, and a description of the model that was used to implement IDIOT. taxonomy.ps <ref> [KS95] </ref> This report classifies UNIX vulnerabilities based on the signatures required to detect them, and gives the best overview on how to write IDIOT patterns with examples from real UNIX vulnerabilities. We recommend that you read this document last before you start writing patterns of your own.
Reference: [Kum95] <author> Sandeep Kumar. </author> <title> Classification and Detection of Computer Intrusions. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The document describes a generalized model for matching intrusion signatures based on Colored Petri Nets. This is the first document you should read. We recommend that you stop reading this guide now and return here when you have finished reading that document. kumar-intdet-phddiss.ps <ref> [Kum95] </ref> Sandeep Kumar's original Ph.D. thesis.
Reference: [Set89] <author> Ravi Sethi. </author> <title> Programming Languages, Concepts and Constructs. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: IDIOT uses unification to test guard expressions. An expression is unifiable if the value on the left hand side and that on the right of the = sign can be combined. The reader is refered to standard textbooks on this topic: <ref> [Set89] </ref> for example. Simply put, an expression of the form x = y is unifiable if x and y both have the same value. If one of x or y does not have a value bound to it, it assumes the value of the other variable.
Reference: [Sun] <author> Sun Microsystems. </author> <title> SunSHIELD Basic Security Module Guide. </title>
Reference-contexts: The showaudit.pl script is a PERL [WS92] script that converts a Sun BSM audit trail <ref> [Sun] </ref> into a canonical audit format that IDIOT can handle. The back end pattern matching engine will take this canonical form and run the patterns against it.
Reference: [WS92] <author> Larry Wall and Randal Schwartz. </author> <title> Programming PERL. </title> <publisher> O'Reilly and Associates, </publisher> <year> 1992. </year> <month> 63 </month>
Reference-contexts: The showaudit.pl script is a PERL <ref> [WS92] </ref> script that converts a Sun BSM audit trail [Sun] into a canonical audit format that IDIOT can handle. The back end pattern matching engine will take this canonical form and run the patterns against it.
References-found: 8

