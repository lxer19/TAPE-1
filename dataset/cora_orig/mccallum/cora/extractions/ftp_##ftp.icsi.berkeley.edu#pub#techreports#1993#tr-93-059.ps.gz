URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1993/tr-93-059.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1993.html
Root-URL: http://www.icsi.berkeley.edu
Title: Constructive Deterministic PRAM Simulation on a Mesh-Connected Computer  
Author: A. Pietracaprina G. Pucci zx J.F. Sibeyn 
Note: This research was supported in part, through the Leonardo Fibonacci Institute, by the  The work of the author was partially supported by MURST,  jopsi@mpi-sb.mpg.de. The work of the author was partially supported by project ALTEC (basic research actions IC1000) of the EC.  
Address: I 1947 Center Street Suite 600 Berkeley, California 94704  Providence, RI 02912, USA.  I35131, Italy.  Berkeley, CA 94708-1105, USA.  Im Stadtwald, W-6600 Saarbrucken, Germany.  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Istituto Trentino di Cultura. Department of Computer Science, Brown University,  Dipartimento di Elettronica e Informatica, Universita di Padova, Padova  Italy. International Computer Science Institute,  -Max-Planck Institut fur Informatik,  
Pubnum: TR-93-059  
Email: Email aap@cs.brown.edu.  Email geppo@art.dei.unipd.it.  Email  
Phone: 1-510-642-4274 FAX 1-510-643-7684  
Date: October 1993  
Abstract: The PRAM model of computation consists of a collection of sequential RAM machines accessing a shared memory in lock-step fashion. The PRAM is a very high-level abstraction of a parallel computer, and its direct realization in hardware is beyond reach of the current (or even foreseeable) technology. In this paper we present a deterministic simulation scheme to emulate PRAM computation on a mesh-connected computer, a feasible machine where each processor has its own memory module and is connected to at most four other processors via point-to-point links. In order to achieve a good worst-case performance, any deterministic simulation scheme has to replicate each variable in a number of copies. Such copies are stored in the local memory modules according to a Memory Organization Scheme (MOS), which is known to all the processors. A variable is then accessed by routing packets to its copies. All deterministic schemes in the literature make use of a MOS whose existence is proved via the probabilistic method, but that cannot be efficiently constructed. We introduce a new constructive MOS, and show how to employ it to simulate an n-processor PRAM on an n-node mesh-connected computer. Our simulation achieves almost optimal slowdown for small memories. This is the first constructive deterministic PRAM simulation on a bounded-degree network. 
Abstract-found: 1
Intro-found: 1
Reference: [AHMP87] <author> H. Alt, T. Hagerup, K. Mehlhorn, </author> <title> and F.P. Preparata. Deterministic simulation of idealized parallel computers on more realistic ones. </title> <journal> SIAM J. on Computing, </journal> <volume> 16(5) </volume> <pages> 808-835, </pages> <year> 1987. </year>
Reference-contexts: They do not provide an explicit construction for G but show that a random graph exhibits the desired properties, with high probability. Several authors followed the ideas in [UW87] improving the time complexity and using bounded-degree networks instead of the MPC <ref> [AHMP87, HB88, Her89, LPP90, Her90b, AS90] </ref>. However, all these schemes are based on the existence of highly expanding graphs, which represents the basic shortcoming (maybe fatal from the practical standpoint) of this class of approaches, since the construction and testing of such graph is hard (see [PP93a]).
Reference: [AS90] <author> Y. Aumann and A. Schuster. </author> <title> Improved memory utilization in deterministic PRAM simulations. </title> <type> Manuscript, </type> <year> 1990. </year>
Reference-contexts: They do not provide an explicit construction for G but show that a random graph exhibits the desired properties, with high probability. Several authors followed the ideas in [UW87] improving the time complexity and using bounded-degree networks instead of the MPC <ref> [AHMP87, HB88, Her89, LPP90, Her90b, AS90] </ref>. However, all these schemes are based on the existence of highly expanding graphs, which represents the basic shortcoming (maybe fatal from the practical standpoint) of this class of approaches, since the construction and testing of such graph is hard (see [PP93a]).
Reference: [CW79] <author> J.L. Carter and M.N. Wegman. </author> <title> Universal classes of hash functions. </title> <journal> J. of Computers and System Sci., </journal> <volume> 18 </volume> <pages> 143-154, </pages> <year> 1979. </year>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93]. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class <ref> [CW79] </ref>. One of the most significant results is Ranade's simulation of an n-processor PRAM step on an n-node Butterfly, in O (log n) time, with high probability [Ran91].
Reference: [DM93] <editor> M. Dietzfelbinger and F. Meyer auf der Heide. </editor> <title> Simple, efficient shared memory simulations. </title> <booktitle> Proc. of the 5nd ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 110-118, </pages> <year> 1993. </year>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, <ref> [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93] </ref>. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class [CW79]. <p> One of the most significant results is Ranade's simulation of an n-processor PRAM step on an n-node Butterfly, in O (log n) time, with high probability [Ran91]. Recently, <ref> [Mey92, KLM92, DM93] </ref> showed that if each variable is replicated into a (small) number of copies, distributed among the modules by distinct hash functions, more efficient simulations are achievable.
Reference: [Gif79] <author> D.K. Gifford. </author> <title> Weighted voting for replicated data. </title> <booktitle> Proc. of the 7th ACM Symp. on Operating System Principles, </booktitle> <pages> pages 150-159, </pages> <year> 1979. </year>
Reference-contexts: Later, Upfal and Widgerson [UW87] proposed a more balanced use of the copies based the majority concept, previously adopted for databases <ref> [Gif79, Tho79] </ref>. Each variable is replicated into 2c 1 copies. Each copy contains the value of the variable and a time-stamp indicating the last time that the copy has been accessed. <p> When accessing any variable v during the simulation of a PRAM step, consistency can be guaranteed by providing each copy with a timestamp, as customary in a multiple copy approach, and extending the majority rule of <ref> [Gif79, Tho79, UW87] </ref> to fit the HMOS, as follows. Definition 2 A leaf of T v is accessed if it is reached during a read or write step. A node of T v at level i, 0 i k 1 is accessed if a majority of its children is accessed.
Reference: [Hal86] <author> M. Hall Jr. </author> <title> Combinatorial Theory. </title> <publisher> John Wiley & Sons, </publisher> <address> New York NY, </address> <note> second edition, </note> <year> 1986. </year>
Reference-contexts: E 1 ) Q Q Qs r r P P P P P Q Q - r 1 r (U k1 ; U k ; E k ) 3 - 1 The construction of the actual graph is based on a well known combinatorial structure, the Balanced Incomplete Block Design <ref> [Hal86] </ref>, which has been first exploited for PRAM simulation on the MPC in [PP93a].
Reference: [HB88] <author> K.T. Herley and G. Bilardi. </author> <title> Deterministic simulations of PRAMs on bounded degree networks. </title> <booktitle> Proc. of the 26th Annual Allerton Conference on Communication, Control and Computation, </booktitle> <pages> pages 1084-1093, </pages> <year> 1988. </year>
Reference-contexts: They do not provide an explicit construction for G but show that a random graph exhibits the desired properties, with high probability. Several authors followed the ideas in [UW87] improving the time complexity and using bounded-degree networks instead of the MPC <ref> [AHMP87, HB88, Her89, LPP90, Her90b, AS90] </ref>. However, all these schemes are based on the existence of highly expanding graphs, which represents the basic shortcoming (maybe fatal from the practical standpoint) of this class of approaches, since the construction and testing of such graph is hard (see [PP93a]).
Reference: [Her89] <author> K.T. Herley. </author> <title> Efficient simulations of small shared memories on bounded degree networks. </title> <booktitle> Proc. of the 30th IEEE Symp. on Foundations of Comp. Sc., </booktitle> <pages> pages 390-395, </pages> <year> 1989. </year>
Reference-contexts: They do not provide an explicit construction for G but show that a random graph exhibits the desired properties, with high probability. Several authors followed the ideas in [UW87] improving the time complexity and using bounded-degree networks instead of the MPC <ref> [AHMP87, HB88, Her89, LPP90, Her90b, AS90] </ref>. However, all these schemes are based on the existence of highly expanding graphs, which represents the basic shortcoming (maybe fatal from the practical standpoint) of this class of approaches, since the construction and testing of such graph is hard (see [PP93a]).
Reference: [Her90a] <author> K.T. Herley. </author> <title> Deterministic simulation of shared memory on bounded degree networks. </title> <type> Tech. Rep. </type> <institution> TR90-1090, Cornell University, Ithaca, </institution> <year> 1990. </year>
Reference-contexts: Moreover, if one resorts to random graphs, the internal representation of the memory map becomes extremely space-inefficient <ref> [Her90a] </ref>. In two recent works, Pietracaprina and Preparata [PP93a, PP93b] presented the first explicit deterministic PRAM simulations that exhibit a sublinear time complexity for both read and write operations. Both results are for the MPC.
Reference: [Her90b] <author> K.T. Herley. </author> <title> Space-efficient representations of shared data for parallel computers. </title> <booktitle> Proc. of the 2nd ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 407-416, </pages> <year> 1990. </year>
Reference-contexts: They do not provide an explicit construction for G but show that a random graph exhibits the desired properties, with high probability. Several authors followed the ideas in [UW87] improving the time complexity and using bounded-degree networks instead of the MPC <ref> [AHMP87, HB88, Her89, LPP90, Her90b, AS90] </ref>. However, all these schemes are based on the existence of highly expanding graphs, which represents the basic shortcoming (maybe fatal from the practical standpoint) of this class of approaches, since the construction and testing of such graph is hard (see [PP93a]).
Reference: [KLM92] <author> R. Karp, M. Luby, and F. Meyer auf der Heide. </author> <title> Efficient PRAM simulation on distributed machines. </title> <booktitle> Proc. of the 24th ACM Symp. on Theory of Comp., </booktitle> <pages> pages 318-326, </pages> <year> 1992. </year>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, <ref> [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93] </ref>. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class [CW79]. <p> One of the most significant results is Ranade's simulation of an n-processor PRAM step on an n-node Butterfly, in O (log n) time, with high probability [Ran91]. Recently, <ref> [Mey92, KLM92, DM93] </ref> showed that if each variable is replicated into a (small) number of copies, distributed among the modules by distinct hash functions, more efficient simulations are achievable.
Reference: [KSS94] <author> M. Kaufmann, J.F. Sibeyn, and T. Suel. </author> <title> Derandomizing routing and sorting algorithms for meshes. </title> <booktitle> Proc of the 5th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Route all packets to their final destination. 4 Sorting and ranking can be done in O (l 1 p n) steps (see for example <ref> [KSS94, Kun93] </ref>), and the two routing stages require, using Theorem 2, p l 1 ffin+O (l 1 p p ffil 2 m+O (ffi p steps, respectively.
Reference: [KU88] <author> A.R. Karlin and E. Upfal. </author> <title> Parallel hashing: An efficient implementation of shared memory. </title> <journal> J. ACM, </journal> <volume> 35(4) </volume> <pages> 876-892, </pages> <year> 1988. </year>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, <ref> [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93] </ref>. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class [CW79].
Reference: [Kun93] <author> M. Kunde. </author> <title> Block gossiping on grids and tori: Deterministic sorting and routing match the bisection bound. </title> <booktitle> Proc. of the 1st European Symp. on Algorithms, </booktitle> <pages> pages 272-283, </pages> <year> 1993. </year>
Reference-contexts: Route all packets to their final destination. 4 Sorting and ranking can be done in O (l 1 p n) steps (see for example <ref> [KSS94, Kun93] </ref>), and the two routing stages require, using Theorem 2, p l 1 ffin+O (l 1 p p ffil 2 m+O (ffi p steps, respectively.
Reference: [LPP88] <author> F. Luccio, A. Pietracaprina, and G. Pucci. </author> <title> A probabilistic simulation of PRAMs in VLSI. </title> <journal> Information Processing Lett., </journal> <volume> 28(3) </volume> <pages> 141-147, </pages> <year> 1988. </year>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, <ref> [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93] </ref>. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class [CW79].
Reference: [LPP90] <author> F. Luccio, A. Pietracaprina, and G. Pucci. </author> <title> A new scheme for the deterministic simulation of PRAMs in VLSI. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 529-544, </pages> <year> 1990. </year>
Reference-contexts: They do not provide an explicit construction for G but show that a random graph exhibits the desired properties, with high probability. Several authors followed the ideas in [UW87] improving the time complexity and using bounded-degree networks instead of the MPC <ref> [AHMP87, HB88, Her89, LPP90, Her90b, AS90] </ref>. However, all these schemes are based on the existence of highly expanding graphs, which represents the basic shortcoming (maybe fatal from the practical standpoint) of this class of approaches, since the construction and testing of such graph is hard (see [PP93a]).
Reference: [Mey92] <editor> F. Meyer auf der Heide. </editor> <title> Hashing strategies for simulating shared memory on distributed memory machines. </title> <booktitle> Proc. 1st Heinz Nixdorf Symp. on Parallel Architectures and their Efficient Use, </booktitle> <year> 1992. </year> <note> To appear in LNCS. </note>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, <ref> [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93] </ref>. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class [CW79]. <p> One of the most significant results is Ranade's simulation of an n-processor PRAM step on an n-node Butterfly, in O (log n) time, with high probability [Ran91]. Recently, <ref> [Mey92, KLM92, DM93] </ref> showed that if each variable is replicated into a (small) number of copies, distributed among the modules by distinct hash functions, more efficient simulations are achievable.
Reference: [MV84] <author> K. Mehlhorn and U. Vishkin. </author> <title> Randomized and deterministic simulations of PRAMs by parallel machines with restricted granularity of parallel memories. </title> <journal> Acta Informatica, </journal> <volume> 9(1) </volume> <pages> 29-59, </pages> <year> 1984. </year>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, <ref> [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93] </ref>. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class [CW79]. <p> The number of copies for each variable is called the redundancy of the simulation scheme. Mehlhorn and Vishkin <ref> [MV84] </ref> pioneered the multiple copy approach devising a PRAM simulation on the MPC, with redundancy c. In their scheme, only one copy is needed to read a variable, whereas all the copies have to be updated when the variable is written.
Reference: [PP93a] <author> A. Pietracaprina and F.P. Preparata. </author> <title> An O( p n)-worst-case-time solution to the granularity problem. </title> <booktitle> Proc. of the 10th Symp. on Theoretical Aspects of Comp. Sc., </booktitle> <volume> LNCS 665 </volume> <pages> 110-119, </pages> <year> 1993. </year>
Reference-contexts: However, all these schemes are based on the existence of highly expanding graphs, which represents the basic shortcoming (maybe fatal from the practical standpoint) of this class of approaches, since the construction and testing of such graph is hard (see <ref> [PP93a] </ref>). Moreover, if one resorts to random graphs, the internal representation of the memory map becomes extremely space-inefficient [Her90a]. In two recent works, Pietracaprina and Preparata [PP93a, PP93b] presented the first explicit deterministic PRAM simulations that exhibit a sublinear time complexity for both read and write operations. <p> Moreover, if one resorts to random graphs, the internal representation of the memory map becomes extremely space-inefficient [Her90a]. In two recent works, Pietracaprina and Preparata <ref> [PP93a, PP93b] </ref> presented the first explicit deterministic PRAM simulations that exhibit a sublinear time complexity for both read and write operations. Both results are for the MPC. <p> In two recent works, Pietracaprina and Preparata [PP93a, PP93b] presented the first explicit deterministic PRAM simulations that exhibit a sublinear time complexity for both read and write operations. Both results are for the MPC. In <ref> [PP93a] </ref>, a simulation scheme for a PRAM with at most n 2 variables is given where, using constant redundancy, a set of n (read/write) requests can be satisfied in O ( p n) time in the worst-case. <p> At any level i, the assignment of copies of modules of level i 1 to modules of level i is done according to a Balanced Incomplete Block Design, which is the distribution graph underlying the memory organization scheme in <ref> [PP93a] </ref>. The construction of such graph is simple and allows a very efficient representation of the memory map. As we will see in the following sections, as the level number grows higher, the modules become fewer and bigger. <p> Q Q - r 1 r (U k1 ; U k ; E k ) 3 - 1 The construction of the actual graph is based on a well known combinatorial structure, the Balanced Incomplete Block Design [Hal86], which has been first exploited for PRAM simulation on the MPC in <ref> [PP93a] </ref>. <p> It immediately follows from 1 that jW j = m (m1) q (q1) and that the degree of each node in U is m1 q1 . An explicit construction of a (q d ; q)-BIBD, suitable for use in PRAM simulations, is given in <ref> [PP93a] </ref> for any prime power q and integer d 1.
Reference: [PP93b] <author> A. Pietracaprina and F.P. Preparata. </author> <title> A practical constructive scheme for deterministic shared-memory access. </title> <booktitle> Proc. of the 5nd ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 100-109, </pages> <year> 1993. </year>
Reference-contexts: Moreover, if one resorts to random graphs, the internal representation of the memory map becomes extremely space-inefficient [Her90a]. In two recent works, Pietracaprina and Preparata <ref> [PP93a, PP93b] </ref> presented the first explicit deterministic PRAM simulations that exhibit a sublinear time complexity for both read and write operations. Both results are for the MPC. <p> Both results are for the MPC. In [PP93a], a simulation scheme for a PRAM with at most n 2 variables is given where, using constant redundancy, a set of n (read/write) requests can be satisfied in O ( p n) time in the worst-case. In <ref> [PP93b] </ref>, an O (n 1=3 log fl n) access time is achieved for a shared memory of at most n 1:5 variables, again using constant redundancy.
Reference: [Ran91] <author> A.G. Ranade. </author> <title> How to emulate shared memory. </title> <journal> J. of Computers and System Sci., </journal> <volume> 42 </volume> <pages> 307-326, </pages> <year> 1991. </year>
Reference-contexts: Several randomized simulation schemes have been presented in the literature, <ref> [MV84, KU88, LPP88, Ran91, Mey92, KLM92, DM93] </ref>. In all these schemes, the PRAM shared memory is distributed among the modules using one (or more) hash functions randomly drawn from a specific universal class [CW79]. <p> One of the most significant results is Ranade's simulation of an n-processor PRAM step on an n-node Butterfly, in O (log n) time, with high probability <ref> [Ran91] </ref>. Recently, [Mey92, KLM92, DM93] showed that if each variable is replicated into a (small) number of copies, distributed among the modules by distinct hash functions, more efficient simulations are achievable.
Reference: [SK93] <author> J.F. Sibeyn and M. Kaufmann. </author> <title> 1-k routing on meshes, with application to hot-potato worm-hole. </title> <note> (submitted to STACS94), </note> <year> 1993. </year>
Reference-contexts: In <ref> [SK93] </ref> the following theorem is proved Theorem 2 Any (l 1 ; l 2 )-routing can be performed on an n-node mesh in p p steps. In the general case, this result is optimal, however we will show now that under certain conditions a better routing time can be achieved.
Reference: [Tho79] <author> R.H. Thomas. </author> <title> A majority consensus approach to concurrency control for multiple copy databases. </title> <journal> ACM Transactions on Databases Systems, </journal> <volume> 4(2) </volume> <pages> 180-209, </pages> <year> 1979. </year>
Reference-contexts: Later, Upfal and Widgerson [UW87] proposed a more balanced use of the copies based the majority concept, previously adopted for databases <ref> [Gif79, Tho79] </ref>. Each variable is replicated into 2c 1 copies. Each copy contains the value of the variable and a time-stamp indicating the last time that the copy has been accessed. <p> When accessing any variable v during the simulation of a PRAM step, consistency can be guaranteed by providing each copy with a timestamp, as customary in a multiple copy approach, and extending the majority rule of <ref> [Gif79, Tho79, UW87] </ref> to fit the HMOS, as follows. Definition 2 A leaf of T v is accessed if it is reached during a read or write step. A node of T v at level i, 0 i k 1 is accessed if a majority of its children is accessed.
Reference: [UW87] <author> E. Upfal and A. Widgerson. </author> <title> How to share memory in a distributed system. </title> <journal> J. ACM, </journal> <volume> 34(1) </volume> <pages> 116-127, </pages> <year> 1987. </year>
Reference-contexts: An involved access protocol is given that satisfies a set of n read in time O (cn 11=c ), in the 1 worst-case, whereas for n write operations, the protocol can take up to O (cn) time. Later, Upfal and Widgerson <ref> [UW87] </ref> proposed a more balanced use of the copies based the majority concept, previously adopted for databases [Gif79, Tho79]. Each variable is replicated into 2c 1 copies. Each copy contains the value of the variable and a time-stamp indicating the last time that the copy has been accessed. <p> With c 2 fi (log n), <ref> [UW87] </ref> show that there exist graphs G with suitable expansion properties so that n variables can be accessed in O (log n (log log n) 2 ) worst-case time on the MPC. <p> They do not provide an explicit construction for G but show that a random graph exhibits the desired properties, with high probability. Several authors followed the ideas in <ref> [UW87] </ref> improving the time complexity and using bounded-degree networks instead of the MPC [AHMP87, HB88, Her89, LPP90, Her90b, AS90]. <p> In [PP93b], an O (n 1=3 log fl n) access time is achieved for a shared memory of at most n 1:5 variables, again using constant redundancy. In both cases, an approach similar to that by <ref> [UW87] </ref> is followed; however, the graph G underlying the memory distribution is explicitly constructed, and the implementation of the memory map is simple and requires only constant internal storage in each processor. Unfortunately, the MPC itself is an unrealistic model, since it assumes a complete interconnection among the processors. <p> When accessing any variable v during the simulation of a PRAM step, consistency can be guaranteed by providing each copy with a timestamp, as customary in a multiple copy approach, and extending the majority rule of <ref> [Gif79, Tho79, UW87] </ref> to fit the HMOS, as follows. Definition 2 A leaf of T v is accessed if it is reached during a read or write step. A node of T v at level i, 0 i k 1 is accessed if a majority of its children is accessed.
References-found: 24

