URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/widom-rule-language.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/
Root-URL: http://www.cs.berkeley.edu
Email: widom@ibm.com, shel@suntan.tandem.com  
Title: Set-Oriented Production Rules in Relational Database Systems  
Author: Jennifer Widom Sheldon J. Finkelstein 
Address: 650 Harry Road San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Note: Proc. of 1990 ACM-SIGMOD Conference, pages 259-270  
Abstract: We propose incorporating a production rules facility into a relational database system. Such a facility allows definition of database operations that are automatically executed whenever certain conditions are met. In keeping with the set-oriented approach of relational data manipulation languages, our production rules are also set-oriented|they are triggered by sets of changes to the database and may perform sets of changes. The condition and action parts of our production rules may refer to the current state of the database as well as to the sets of changes triggering the rules. We define a syntax for production rule definition as an extension to SQL. A model of system behavior is used to give an exact semantics for production rule execution, taking into account externally-generated operations, self-triggering rules, and simultaneous triggering of multiple rules.
Abstract-found: 1
Intro-found: 1
Reference: [BFKM85] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages <ref> [BFKM85] </ref>. Other work|including ours|focuses on extending database systems to include a production rules facility [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90]. <p> c; v) in upd (all (h; c; v)'s in upd will have the same v). 4.4 Rule Selection We have left unspecified the method for choosing a rule for consideration when more than one rule is triggered. (This is similar to conflict resolution in OPS, which has received considerable attention <ref> [BFKM85] </ref>.) A number of strategies are possible. Rules could be chosen arbitrarily, but such purely non-deterministic behavior is probably undesirable|in many cases it is useful or even necessary to have some degree of control over rule selection.
Reference: [CJL91] <author> M.J. Carey, R. Jauhari, and M. Livny. </author> <title> On transaction boundaries in active databases: A performance perspective. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(3), </volume> <month> Septem-ber </month> <year> 1991. </year>
Reference: [Cod70] <author> E.F. Codd. </author> <title> A relational model for large shared data banks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1970. </year>
Reference-contexts: As a first step towards implementation, Section 4 also includes an algorithm for rule execution that reflects the desired semantics. A number of potential extensions are proposed in Section 5. Section 6 contains discussion of future work. 2 Model of System Execution We assume a typical relational database structure <ref> [Cod70] </ref>: a set of named tables (or relations) is defined, each having a fixed set of named and typed columns (or attributes). 1 In a given state of the database, each table contains zero or more tuples, where a tuple assigns a single value (or null) to each column of the
Reference: [Coh89] <author> D. Cohen. </author> <title> Compiling complex database transition triggers. </title> <booktitle> In Proceedings of the ACM SIG-MOD International Conference on Management of Data, </booktitle> <pages> pages 225-234, </pages> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed. <p> We provide a precise semantics that allows an easy understanding of rule behavior while remaining expressive and flexible. Most other proposals for production rules in database systems (e.g., <ref> [Coh89, dMS88, Esw76, MD89, SJGP90] </ref>) consider instance-oriented rules: rules that are applied once for each data item satisfying the condition part of the rule. (For example, one might define an instance-oriented rule that is applied once for each tuple inserted into the database.) In contrast, we propose set-oriented rules: rules that
Reference: [CW90] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for constraint maintenance. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 566-577, </pages> <address> Bris-bane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: The examples included here and in Section 4.5 are somewhat unrealistic, but they serve to illustrate important aspects of production rule definition and execution. Additional examples pertaining to a fairly large case study appear in <ref> [CW90] </ref>. 5 Transition tables allow access to a subset of a previous database state in a rule's execution environment. Determining which database versions may be referenced in production rules involves difficult trade-offs among simplicity, expressiveness, and implementation. A precise semantics for our transition tables appears in Section 4. <p> We have designed a facility whereby the user defines integrity constraints in a high-level non-procedural language. The system then performs semi-automatic translation of these constraints into sets of lower-level production rules that maintain the constraints. This work is described in <ref> [CW90] </ref>. Finally, we are currently implementing a set-oriented production rules facility following the syntax and semantics proposed in this paper. The facility is being built as an attachment to the Starburst extensible database system [HFLP89,LMP87] at the IBM Almaden Research Center.
Reference: [DE89] <author> L.M.L. Delcambre and J.N. Etheredge. </author> <title> The Relational Production Language: A production language for relational databases. </title> <editor> In L. Ker-schberg, editor, </editor> <booktitle> Expert Database Systems| Proceedings from the Second International Conference, </booktitle> <pages> pages 333-351. </pages> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as <ref> [DE89, SLR88, Tzv88] </ref>, focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90].
Reference: [dMS88] <author> C. de Maindreville and E. Simon. </author> <title> A production rule based approach to deductive databases. </title> <booktitle> In Proceedings of the Fourth International Conference on Data Engineering, </booktitle> <pages> pages 234-241, </pages> <address> Los Angeles, California, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed. <p> We provide a precise semantics that allows an easy understanding of rule behavior while remaining expressive and flexible. Most other proposals for production rules in database systems (e.g., <ref> [Coh89, dMS88, Esw76, MD89, SJGP90] </ref>) consider instance-oriented rules: rules that are applied once for each data item satisfying the condition part of the rule. (For example, one might define an instance-oriented rule that is applied once for each tuple inserted into the database.) In contrast, we propose set-oriented rules: rules that
Reference: [Esw76] <author> K.P. Eswaran. </author> <title> Specifications, implementations and interactions of a trigger subsystem in an integrated database system. </title> <institution> IBM Research Report RJ 1820, IBM San Jose Research Laboratory, </institution> <address> San Jose, California, </address> <month> August </month> <year> 1976. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed. <p> A number of potential uses motivate the addition of such a facility. Production rules are a natural mechanism for integrity constraint enforcement, as suggested by <ref> [Esw76] </ref>. More generally, production rules permit additional semantic structure for the database. In active database systems [MD89, Mor83], production rules are used to monitor particular conditions (sometimes associated with timing constraints) and, when appropriate, to trigger corresponding actions. [Esw76] suggests that production rules may be useful for authorization checking and for <p> rules are a natural mechanism for integrity constraint enforcement, as suggested by <ref> [Esw76] </ref>. More generally, production rules permit additional semantic structure for the database. In active database systems [MD89, Mor83], production rules are used to monitor particular conditions (sometimes associated with timing constraints) and, when appropriate, to trigger corresponding actions. [Esw76] suggests that production rules may be useful for authorization checking and for maintenance of derived data. Finally, production rules in database systems provide a flexible framework for building efficient knowledge-base and expert systems. <p> We provide a precise semantics that allows an easy understanding of rule behavior while remaining expressive and flexible. Most other proposals for production rules in database systems (e.g., <ref> [Coh89, dMS88, Esw76, MD89, SJGP90] </ref>) consider instance-oriented rules: rules that are applied once for each data item satisfying the condition part of the rule. (For example, one might define an instance-oriented rule that is applied once for each tuple inserted into the database.) In contrast, we propose set-oriented rules: rules that
Reference: [FPT88] <author> S.J. Finkelstein, H. Pirahesh, and M. Tsangaris. </author> <title> Rule support for Starburst. </title> <booktitle> Unpublished notes, </booktitle> <year> 1988. </year>
Reference-contexts: Such optimization is not inhibited by the presence of our set-oriented production rules; furthermore, it is directly applicable to the rules themselves. Set-oriented execution may also allow rules to be combined with database operations or with other rules <ref> [FPT88] </ref>. In some cases, instance-oriented rules can be compiled for set-oriented execution [SdM88, SJGP90], but our direct approach avoids complications and limitations arising from such a scheme. Finally, our set-oriented rules allow specification of some conditions and actions not expressible using instance-oriented rules. The paper proceeds as follows. <p> Acknowledgements Stefano Ceri inspired a number of improvements and extensions to our original proposal [WF89b]. Bruce Lindsay suggested several useful modifications to the semantics and is collaborating with us on system design. Hamid Pirahesh and Manolis Tsangaris pursued initial work in this area <ref> [FPT88] </ref>. 10 The latter case is necessary to simulate integrity constraint enforcement in existing systems [IBM88].
Reference: [Han89] <author> E.N. Hanson. </author> <title> An initial report on the design of Ariel: A DBMS with an integrated production rule system. </title> <booktitle> SIGMOD Record, Special Issue on Rule Management and Processing in Expert Database Systems, </booktitle> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed.
Reference: [HFLP89] <author> L.M. Haas, J.C. Freytag, G.M. Lohman, and H. Pirahesh. </author> <title> Extensible query processing in Starburst. </title> <booktitle> In Proceedings of the ACM SIG-MOD International Conference on Management of Data, </booktitle> <pages> pages 377-388, </pages> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference: [IBM88] <author> IBM Form Number SC26-4348-1. </author> <title> IBM Systems Application Architecture, Common Programming Interface: Database Reference, </title> <month> Octo-ber </month> <year> 1988. </year>
Reference-contexts: Finally, production rules in database systems provide a flexible framework for building efficient knowledge-base and expert systems. We propose a production rules facility compatible with the SQL data manipulation language <ref> [IBM88] </ref>, although our framework could apply equally well to other relational database languages. Rule activation results from user-generated (or application-generated) database operations. <p> Using a variant of the SQL data manipulation language <ref> [IBM88] </ref> and assuming some familiarity with SQL, a syntax for operation blocks is given as follows: op-block ::= sql-op ; sql-op ; : : : ; sql-op sql-op ::= insert-op j delete-op j update-op insert-op ::= insert into table values hv 1 ; v 2 ; : : : ; v <p> Thus, we have: emp (name, emp no, salary, dept no) dept (dept no, mgr no) We use this schema for examples throughout the paper. Example 3.1 Our first example illustrates the "cascaded delete" method of enforcing referential integrity <ref> [IBM88] </ref>: Whenever departments are deleted, delete all employees in the deleted departments. when deleted from dept then delete from emp where dept no in (select dept no from deleted dept) No if clause is needed in this rule|we want it to execute whenever one or more departments are deleted. <p> Bruce Lindsay suggested several useful modifications to the semantics and is collaborating with us on system design. Hamid Pirahesh and Manolis Tsangaris pursued initial work in this area [FPT88]. 10 The latter case is necessary to simulate integrity constraint enforcement in existing systems <ref> [IBM88] </ref>.
Reference: [KDM88] <author> A.M. Kotz, K.R. Dittrich, and J.A. Mulle. </author> <title> Supporting semantic rules by a generalized event/trigger mechanism. </title> <booktitle> In Advances in Database Technology|EDBT '88, Lecture Notes in Computer Science 303, </booktitle> <pages> pages 76-91. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> March </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed.
Reference: [LMP87] <author> B. Lindsay, J. McPherson, and H. Pirahesh. </author> <title> A data management extension architecture. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 220-226, </pages> <address> San Francisco, California, </address> <month> May </month> <year> 1987. </year>
Reference: [MD89] <author> D.R. McCarthy and U. Dayal. </author> <title> The architecture of an active database management system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed. <p> A number of potential uses motivate the addition of such a facility. Production rules are a natural mechanism for integrity constraint enforcement, as suggested by [Esw76]. More generally, production rules permit additional semantic structure for the database. In active database systems <ref> [MD89, Mor83] </ref>, production rules are used to monitor particular conditions (sometimes associated with timing constraints) and, when appropriate, to trigger corresponding actions. [Esw76] suggests that production rules may be useful for authorization checking and for maintenance of derived data. <p> We provide a precise semantics that allows an easy understanding of rule behavior while remaining expressive and flexible. Most other proposals for production rules in database systems (e.g., <ref> [Coh89, dMS88, Esw76, MD89, SJGP90] </ref>) consider instance-oriented rules: rules that are applied once for each data item satisfying the condition part of the rule. (For example, one might define an instance-oriented rule that is applied once for each tuple inserted into the database.) In contrast, we propose set-oriented rules: rules that
Reference: [Mor83] <author> M. Morgenstern. </author> <title> Active databases as a paradigm for enhanced computing environments. </title> <booktitle> In Proceedings of the Ninth International Conference on Very Large Data Bases, </booktitle> <pages> pages 34-42, </pages> <address> Flo-rence, Italy, </address> <month> October </month> <year> 1983. </year>
Reference-contexts: A number of potential uses motivate the addition of such a facility. Production rules are a natural mechanism for integrity constraint enforcement, as suggested by [Esw76]. More generally, production rules permit additional semantic structure for the database. In active database systems <ref> [MD89, Mor83] </ref>, production rules are used to monitor particular conditions (sometimes associated with timing constraints) and, when appropriate, to trigger corresponding actions. [Esw76] suggests that production rules may be useful for authorization checking and for maintenance of derived data.
Reference: [RS89] <author> L. Raschid and S.Y.W. Su. </author> <title> A transaction oriented mechanism to control processing in a knowledge base management system. </title> <editor> In L. Ker-schberg, editor, </editor> <booktitle> Expert Database Systems| Proceedings from the Second International Conference, </booktitle> <pages> pages 353-373. </pages> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed.
Reference: [SdM88] <author> E. Simon and C. de Maindreville. </author> <title> Deciding whether a production rule is relational computable. </title> <booktitle> In Proceedings of the Second International Conference on Database Theory, </booktitle> <address> Bruges, Belgium, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: Set-oriented execution may also allow rules to be combined with database operations or with other rules [FPT88]. In some cases, instance-oriented rules can be compiled for set-oriented execution <ref> [SdM88, SJGP90] </ref>, but our direct approach avoids complications and limitations arising from such a scheme. Finally, our set-oriented rules allow specification of some conditions and actions not expressible using instance-oriented rules. The paper proceeds as follows. Section 2 describes our model of database system execution.
Reference: [SHP88] <author> M. Stonebraker, E.N. Hanson, and S. Potami-anos. </author> <title> The POSTGRES rule manager. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(7) </volume> <pages> 897-907, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On rules, procedures, caching and views in data base systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 281-290, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as [DE89, SLR88, Tzv88], focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility <ref> [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90] </ref>. Generally, production rules take the form when X then Y, where X is a triggering condition and Y is an action: whenever condition X is true, action Y is performed. <p> We provide a precise semantics that allows an easy understanding of rule behavior while remaining expressive and flexible. Most other proposals for production rules in database systems (e.g., <ref> [Coh89, dMS88, Esw76, MD89, SJGP90] </ref>) consider instance-oriented rules: rules that are applied once for each data item satisfying the condition part of the rule. (For example, one might define an instance-oriented rule that is applied once for each tuple inserted into the database.) In contrast, we propose set-oriented rules: rules that <p> Set-oriented execution may also allow rules to be combined with database operations or with other rules [FPT88]. In some cases, instance-oriented rules can be compiled for set-oriented execution <ref> [SdM88, SJGP90] </ref>, but our direct approach avoids complications and limitations arising from such a scheme. Finally, our set-oriented rules allow specification of some conditions and actions not expressible using instance-oriented rules. The paper proceeds as follows. Section 2 describes our model of database system execution. <p> As a single transaction, the system executes the externally-generated operation block followed by all resulting rule-generated operation blocks. Although this is a reasonable choice in many situations, 9 This is also necessary for implementing procedures and views using rules, as in <ref> [SJGP90] </ref>. we might want additional flexibility in the time at which rules are triggered and in the correspondence between rules and transactions. (See [CJL91,MD89] for further discussion of these issues.) For example, we might want the ability to specify that a rule's action should be executed in a separate transaction.
Reference: [SLR88] <author> T. Sellis, C.-C. Lin, and L. Raschid. </author> <title> Implementing large production systems in a DBMS environment: </title> <booktitle> Concepts and algorithms. In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 404-412, </pages> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as <ref> [DE89, SLR88, Tzv88] </ref>, focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90].
Reference: [Tzv88] <author> A. Tzvieli. </author> <title> On the coupling of a production system shell and a DBMS. </title> <booktitle> In Proceedings of the Third International Conference on Data and Knowledge Bases, </booktitle> <pages> pages 291-309, </pages> <address> Jerusalem, Is-rael, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable interest in integrating production rules systems and database management systems. Some work, such as <ref> [DE89, SLR88, Tzv88] </ref>, focuses on using database technology to efficiently support OPS-like production rules languages [BFKM85]. Other work|including ours|focuses on extending database systems to include a production rules facility [Coh89, dMS88, Esw76, Han89, KDM88, MD89, RS89, SHP88, SJGP90].
Reference: [WF89a] <author> J. Widom and S.J. Finkelstein. </author> <title> A syntax and semantics for set-oriented production rules in relational database systems. </title> <institution> IBM Research Report RJ 6880, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> June </month> <year> 1989. </year> <month> Revised March </month> <year> 1990. </year>
Reference-contexts: In a rule, the list of basic transition predicates is a disjunction: the rule is triggered by any transition with an effect satisfying one or more of the basic predicates in the list. (In <ref> [WF89a] </ref>, we show that it is possible to use the condition part of a rule to obtain the effect of arbitrary boolean combinations of basic transition predicates.) The syntax for transition predicates is thus: trans-pred ::= basic-trans-pred j basic-trans-pred or trans-pred basic-trans-pred ::= inserted into table j deleted from table j
Reference: [WF89b] <author> J. Widom and S.J. Finkelstein. </author> <title> A syntax and semantics for set-oriented production rules in relational database systems (extended abstract). </title> <journal> SIGMOD Record, Special Issue on Rule Man--agement and Processing in Expert Database Systems, </journal> <volume> 18(3) </volume> <pages> 36-45, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Or, a rule could be evaluated with respect to the transition since the state preceding the most recent triggering of the rule, as specified in our initial proposal <ref> [WF89b] </ref>. For each interpretation, it is certainly possible to contrive examples for which the semantics is inappropriate. As an extension, we might permit a choice of interpretations to be specified as part of rule definition. Fig. 1 below, which follows Definition 2.1 of transition effect composition). <p> The facility is being built as an attachment to the Starburst extensible database system [HFLP89,LMP87] at the IBM Almaden Research Center. Design and implementation issues will be discussed in a future report. Acknowledgements Stefano Ceri inspired a number of improvements and extensions to our original proposal <ref> [WF89b] </ref>. Bruce Lindsay suggested several useful modifications to the semantics and is collaborating with us on system design. Hamid Pirahesh and Manolis Tsangaris pursued initial work in this area [FPT88]. 10 The latter case is necessary to simulate integrity constraint enforcement in existing systems [IBM88].
References-found: 24

