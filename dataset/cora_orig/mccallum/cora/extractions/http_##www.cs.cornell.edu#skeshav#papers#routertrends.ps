URL: http://www.cs.cornell.edu/skeshav/papers/routertrends.ps
Refering-URL: http://www.cs.cornell.edu/skeshav/papers.html
Root-URL: http://www.cs.cornell.edu
Abstract-found: 0
Intro-found: 1
Reference: [ASNS 97] <author> D. S. Alexander, M. Shaw, S. M. Nettles and J. Smith, </author> <title> Active Bridging, </title> <booktitle> Proceedings of ACM SIGCOMM97, </booktitle> <address> Cannes, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: It is not clear what performance penalty such an approach would exact, but recent work shows that both the security concerns and the performance hit of active networks may be tolerable, at least in some environments <ref> [ASNS 97] </ref>. 5. Open Problems In this section, we identify some challenging open problems in router design.
Reference: [Ballew 97] <author> S. M. Ballew, </author> <title> Managing IP Networks with Cisco Routers, </title> <month> OReilly </month> <year> 1997. </year>
Reference-contexts: Misconfigured routers can be hard to detect and can cause nearly untraceable performance problems. For example, bugs in the configuration of proxy ARP on routers manifest themselves only as a mysterious increase in network delay <ref> [ Ballew 97] </ref>. We believe that simple and intuitive abstractions of the underlying network functionality would go a long way in solving these problems. These abstractions remain elusive.
Reference: [BCDP 97] <author> A. Brodnik, S. Carlsson, M. Degermark, S. Pink, </author> <title> Small Forwarding Tables for Fast Route Lookups, </title> <booktitle> Proceedings of ACM SIGCOMM97, </booktitle> <address> Cannes, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Reference [GLM 98] describes cheap special purpose hardware that can perform rapid updates on the forwarding table. Table-compaction techniques, such as the algorithm described in Reference <ref> [BCDP 97] </ref> , exploit the sparse distribution of forwarding entries in the space of all possible network addresses to build a complicated but compact data structure for the forwarding table. The table is then stored in the primary cache of a processor, allowing route lookup at gigabit speeds.
Reference: [BZ 96] <author> J.C.R. Bennett and H. Zhang, </author> <title> Hierarchical Packet Fair Queueing Algorithms, </title> <booktitle> Proceedings of ACM SIGCOMM 96 , Stanford, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: This sort of link-sharing requirements deal with classes of connections, rather than with individual connections, and require per-class bookkeeping. In recent work, it has been shown that extensions of Fair Queueing are compatible with hierarchical link-sharing requirements <ref> [ BZ 96, GVC 96] </ref> . Fast implementat ions of algorithms that provide both hierarchical link sharing and per-connection QoS guarantees are an area of active research [ BSZ 97, RBGW 97 ].
Reference: [BSZ 97] <author> J.C.R. Bennett, D. C. Stephens and H. Zhang, </author> <title> High Speed, Scalable, and Accurate Implementation of Fair Queueing Algorithms in ATM Networks, </title> <address> ICNP 97, </address> <year> 1997. </year>
Reference-contexts: In recent work, it has been shown that extensions of Fair Queueing are compatible with hierarchical link-sharing requirements [ BZ 96, GVC 96] . Fast implementat ions of algorithms that provide both hierarchical link sharing and per-connection QoS guarantees are an area of active research <ref> [ BSZ 97, RBGW 97 ] </ref>. We expect that all future routers will provide some form of Fair Queueing at output queues. 4.6 Reducing port cost Both enterprise and access routers support a large number of ports.
Reference: [CW 97] <author> D. Clark and J. Wroclawski, </author> <title> An Approach to Serice Allocations in the Internet, Internet Draft, </title> <note> Internet Draft draft-clark-diff-svc- alloc-00.txt, available from http://www.ietf.org </note>
Reference-contexts: Given the complexity of implementing Fair-Queueing type scheduling algorithms at high speed, there has been much recent work in coming up with efficient policers. For example, in the RIO scheme, over-limit packets are marked as low priority and preferentially discarded <ref> [CW 97] </ref>. The choice of good policing algorithms and associated pricing schemes is an open problem. 5.3 Ease of configuration Configuring routers is hard work. Misconfigured routers can be hard to detect and can cause nearly untraceable performance problems.
Reference: [DKS 89] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> Design and Analysis of a Fair Queueing Algorithm, </title> <booktitle> Proceedings of ACM SIGCOMM 89, </booktitle> <address> Austin, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: An alternative service method called Fair Queuing solves these problems, albeit at a greater implementation cost <ref> [DKS 89] </ref> . In the Fair Queuing approach, each source sharing a bottleneck link is allocated an ideal rate of service at that link.
Reference: [FJ 93] <author> S. Floyd and V. Jacobson, </author> <title> Random Early Detection Gateways for Congestion Avoidance, </title> <journal> IEEE/ACM Transactions on Networking, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: It cannot send a packet to the FDDI port if that port does not have the token. Clearly, with the diversity of link technologies, building a general-purpose input port controller is a challenging, if not impossible task. Second, enhanced router service s such as Random Early Discard <ref> [FJ 93 ] </ref> depend on the length of the output queue. With an input-queued switch, the output queue length is not known.
Reference: [Goyal 97] <author> P. Goyal, </author> <title> Packet Scheduling Algorithms for Integrated Service Networks, </title> <type> PhD Thesis, </type> <institution> UC Texas Austin, </institution> <year> 1997. </year>
Reference-contexts: An exhaustive survey of variants of the Fair Queueing algorithm can be found in <ref> [ Goyal 97] </ref>. Fair Queuing has three important and useful properties. First, it provides protection, so that a well-behaved source does not see packet losses due to misbehavior by other sources. Second, by design, it provides fair bandwidth allocation.
Reference: [GLM98] <author> P. Gupta, S. Lin and N. McKeown, </author> <title> Routing Lookups in Hardware at Memory Access Speeds , Proceedings of IEEE INFOCOM 98, </title> <address> March 1998.. </address>
Reference: [GVC 96] <author> P. Goyal, H. Vin, and H. Chen, </author> <title> Start-time Fair Queueing: A Scheduling Algorithm for Integrated Services Packet Switching Networks, </title> <booktitle> Proceedings of ACM SIGCOMM 96, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: This sort of link-sharing requirements deal with classes of connections, rather than with individual connections, and require per-class bookkeeping. In recent work, it has been shown that extensions of Fair Queueing are compatible with hierarchical link-sharing requirements <ref> [ BZ 96, GVC 96] </ref> . Fast implementat ions of algorithms that provide both hierarchical link sharing and per-connection QoS guarantees are an area of active research [ BSZ 97, RBGW 97 ].
Reference: [IPATM 96] <institution> Online Proceeding of the panel discussion on Better Integration of IP and ATM , IP ATM Workshop, Washington University St. Louis, </institution> <month> November </month> <year> 1996. </year> <note> http://arl.wustl.edu/arl </note>
Reference-contexts: In particular, gi ven a destination address, we do not know the prefix to use for finding the longest match. The solution to this problem is to try different masks, choosing the one has that has the longest mask length . The choice of masks can be iterative <ref> [IPATM 96] </ref>, hierarchical, or the first few bits of the address could be used to find a list of prefix lengths. Unfortunately, none of these solutions scale well with the size of the destination address.
Reference: [JTAPI] <institution> Java Telephony Application Programmers Interface, </institution> <note> available from http://java.sun.com/products/jtapi/index.html </note>
Reference-contexts: There is a fairly large and vocal Open Signalling community that is lobbying router vendors for precisely this kind of access to router internals [ Opensig]. It is interesting to note that telephone companies already provide an extremely rich programming interface to PBX hardware through the JTAPI interface <ref> [JTAPI] </ref>. 3 In IP switching, the backbone tells the edge about the mapping, instead of the other way around, but the ide a is conceptually similar to what we describe here.
Reference: [Keshav 97] <author> S. Keshav, </author> <title> An Engineering Approach to Computer Networking, </title> <publisher> Addison-Wesley, </publisher> <year> 1997. </year>
Reference-contexts: They can implement sophisticated scheduling algorithms to support priorities and guarantees. Like input ports, output ports also need to support datalink layer encapsulation and decapsulation, and a variety of higher-level protocols. More details on packet scheduling can be found in Reference <ref> [Keshav 97] </ref>. The routing processor computes the forwarding table , implements routing protocols, and runs the software to configure and manage the router. It also handles any packet whose destination address cannot be found in the forwarding table in the line card. 3.
Reference: [LM 97] <author> S. Lin and N. McKeown, </author> <title> A simulation of IP Switching, </title> <booktitle> Proceedings of ACM SIGCOMM97, </booktitle> <address> Cannes, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Therefore, it is useful to identify flows on-the-fly, by noticing, for instance, that more than X packets with the same source and destination IP addresses and TCP port numbers have been seen in the last Y seconds <ref> [LM 97] </ref>. Flows may also be associated with real-time performance guarantees. We can identify these flows by matching incoming packet headers with a set of pre-specified filters. Since classification needs to be done for each incoming packet, we need fast classification algorithms.
Reference: [LMJ 97] <author> C. Labovitz, G. R. Malan and F. Jahanian, </author> <title> Internet Routing Instability, </title> <booktitle> Proceedings of ACM SIGCOMM97, </booktitle> <address> Cannes, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Recent studies have shown that the routing oscillations that characterize the current Internet are often the result of small bugs in protocol implementation or router misconfiguration <ref> [LMJ 97] </ref>. 3.2 Enterprise routers Enterprise or campus networks interconnect end-systems. Unlike backbone networks, where speed comes first and cost is a secondary issue, t heir primary goal is to provide connectivity to a large number of endpoints as cheaply as possible. <p> A second consideration in designing forwarding table data structures is the time taken to update the table. Recent studies have shown that routing table changes relatively slowly, requiring updates only around once every two minutes <ref> [LMJ 97] </ref>. This allows us to use complicated data structures that optimize route lookup at the expense of the time taken to update the routing table. <p> Software stability is hard to achieve because software state is affected by interaction among different features. For example, the addition of a BGP (exterior routing) attribute may affect the calculation of routes exported to interior routing protocols. Further, interaction between bugs from different vendors <ref> [LMJ 97] </ref> can lead to persistent instabilities in the network. Simulation may not be very helpful as it is difficult to reproduce bugs in implementations, and thus the exact behavior of nodes in the network.
Reference: [MAW 96] <author> N. McKeown, V. Anantharam, and J. Walrand, </author> <title> Achieving 100% Throughput in an Input -Queued Switch, </title> <booktitle> Proceedings of IEEE INFOCOM'96, </booktitle> <address> San Francisco, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: However, with this approach, an arbiter must resolve contention for the switching fabric and for the output queue. It is hard to design arbiters that run at high speeds, and can also fairly schedule the switch fabric and the output line <ref> [McKeown 95, MAW 96] </ref>. We discuss strategies for speeding up output queued routers in Section 4.3. In addition to overcoming bottlenecks in performance at individual router s, there is an additional design issue that is often ignored .
Reference: [McKeown 95] <author> N. McKeown, </author> <title> Scheduling Algorithms for Input -Queued Cell Switches, </title> <type> PhD Thesis, </type> <institution> University of California at Berkeley, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: However, with this approach, an arbiter must resolve contention for the switching fabric and for the output queue. It is hard to design arbiters that run at high speeds, and can also fairly schedule the switch fabric and the output line <ref> [McKeown 95, MAW 96] </ref>. We discuss strategies for speeding up output queued routers in Section 4.3. In addition to overcoming bottlenecks in performance at individual router s, there is an additional design issue that is often ignored . <p> This still leaves the problem of arbitrating access to the switch fabric at high speeds. Recent research suggests that this may solvable with current technology <ref> [McKeown 95 ] </ref>. Consequently, it appears that router bandwidth can be increased by yet another order of magnitude by moving to input-queueing. Input-queueing, however, suffers from some serious problems that still need resolution. First, packet scheduling algorithms for providing quality of service are usually specified in terms of output queues.
Reference: [NLANR 97] <institution> Contribution of packet sizes to packet and byte volumes, </institution> <address> MCI vBNS http://www.nlanr.net/NA/Learn/ packetsize.html </address>
Reference-contexts: We now present some representative measurements to evaluate the si tuation in current backbones. Figure 2 (a) shows the packet size distribution from a 5 minute trace collected on a backbone router in the MCI backbone <ref> [NLANR 97] </ref>. We see that approximately 40% packets are 40 bytes long (these correspond to TCP acknowledgment packets). This distribution implies that current backbone routers must perform a large number of route lookup s every second.
Reference: [NLANR 95] <institution> Flow counts as a function of flow granularity, FIX-West, </institution> <note> http://www.nlanr.ner/NA/Learn/aggregation.html </note>
Reference-contexts: One metric of route diversity is the size of the forwarding cache if routes are kept in the cache for a given time period. In a trace obtained in 1995 , Figure 2 (b) <ref> [NLANR 95] </ref>, we find that if routes are kept in a cache for only 64 seconds since their last use , we still need a cache of size 64K entries. (a) Packet size distribution in a backbone router (b) Number of active flows in a backbone router data was computed from
Reference: [OpenSig 97] <editor> OPENSIG Spring97 Workshop, </editor> <address> http://www.ctr.columbia.edu/opensig </address>
Reference: [OSMKM 90] <author> Y. Oie, T. Suda, M. Murata, D. Kolson, and H. Miyahara, </author> <title> Survey of Switching Techniques in High-Speed Networks and Their Performance, </title> <booktitle> Proceedings of IEEE INFOCOM &gt;90, </booktitle> <month> June </month> <year> 1990, </year> <pages> pp. 1242-1251. </pages>
Reference-contexts: If the router is input queued , several input ports must share the fabric: the final function of an input port is to participate in arbitration protocols to share this common resource. The switching fabric can be implemented using many different techniques (see <ref> [OSMKM 90] </ref> for a detailed survey). The most common switch fabric technologies in use today are busses, crossbars, and shared memories. The simplest switch fabric is a bus that links all the input and output po rts. <p> These designs include the well-known Banyan family of fabrics, along with others such as the Delta and the Omega fabric (for a survey, please see Reference <ref> [OSMKM 90] </ref>). These designs were revived in the early nineties, mostly for building large ATM switches. With the recent decline in demand for ATM, IP routers are being built by wrapping segmentation and reassembly modules around ATM switch fabric core s.
Reference: [RBGW 97] <author> J. Rexford, F. Bonomi, A. Greenberg and A. Wong, </author> <title> A Scalable Architecture for Fair Leaky-Bucket Shaping, </title> <booktitle> Proceedings of IEEE INFOCOM97, </booktitle> <address> Kobe, Japan. </address>
Reference-contexts: In recent work, it has been shown that extensions of Fair Queueing are compatible with hierarchical link-sharing requirements [ BZ 96, GVC 96] . Fast implementat ions of algorithms that provide both hierarchical link sharing and per-connection QoS guarantees are an area of active research <ref> [ BSZ 97, RBGW 97 ] </ref>. We expect that all future routers will provide some form of Fair Queueing at output queues. 4.6 Reducing port cost Both enterprise and access routers support a large number of ports.
Reference: [Slower] <author> K. Sklower, </author> <title> A Tree-Based Packet Routing Scheme for Berkeley Unix, Internal Memorandum, </title> <institution> University of California Berkeley. </institution>
Reference: [Stevens 95] <editor> W.R. Stevens, TCP/IP Illustrated, </editor> <volume> Vol. 2, </volume> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The standard data structure to store routes is a tree, where each path in the tree from root to leaf corresponds to an entry in the forwarding table. Thus, the longest prefix match is the longest path in the tree that matches the destination address of an incoming packet <ref> [Stevens 95] </ref>. Conceptually, a tree-based algorithm starts at the root of the tree and recursively matches the children of the current node with the next few bits of the destination address, stopping if no match is found [Sklower].
Reference: [WVTP 97] <author> M. Waldvogel, G. Varghese, J. Turner and B. Plattner, </author> <title> Scalable High Speed IP Routing Lookups, </title> <booktitle> Proceedings of ACM SIGCOMM97, </booktitle> <address> Cannes, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: The choice of masks can be iterative [IPATM 96], hierarchical, or the first few bits of the address could be used to find a list of prefix lengths. Unfortunately, none of these solutions scale well with the size of the destination address. In recent work, Waldvogel et al <ref> [WVTP 97] </ref> have presented a scalable hash based algorithm that can look up the longest prefix match for an N bit address in O (log N) steps . Their algorithm computes a separate hash table for each possible prefix length.
References-found: 26

