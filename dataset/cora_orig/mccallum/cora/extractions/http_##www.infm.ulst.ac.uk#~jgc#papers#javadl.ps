URL: http://www.infm.ulst.ac.uk/~jgc/papers/javadl.ps
Refering-URL: http://www.infm.ulst.ac.uk/research/preprints.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: jg.campbell@ulst.ac.uk.  
Title: Signal and Image Processing in Java  
Author: Jonathan Campbell and Fionn Murtagh 
Date: 10-13 September 1997. 9 September 1997 Revised 20 September 1997 Revised 6 November 1997  
Web: http://www.infm.ulst.ac.uk/research/preprints.html  
Note: Revisions available from  Original paper presented at IMVIP '97  
Address: Magee College, Derry, BT48 7JL  Magee College, Derry  
Affiliation: University of Ulster,  University of Ulster,  
Abstract: We describe the implementation of a multi-purpose data analysis laboratory, DataLab-J, in the programming language Java. We briefly trace the stages of the evolution of DataLab from a FORTRAN-IV system in 1973 to the current Java development. Description of this evolution allows us to discuss some key design and functionality decisions and issues that arose throughout the years; many of these issues remain topical, so, in addition to an evaluation of Java, we identify and discuss what are for us the major issues in the design of such software. Moreover, we address questions raised by the need to convert legacy systems, e.g. those programmed in C and various versions of FORTRAN. The experience of redesign and implementation in Java is described, together with a brief evaluation of the suitability of Java for 'number-crunching'. Overall conclusions are drawn, regarding design of such software, lessons learned, traps to avoid, and on Java itself.
Abstract-found: 1
Intro-found: 1
Reference: [AAI, 1997] <author> AAI (1997). </author> <title> Www page: Image understanding environment. </title> <type> Technical report, </type> <institution> AAI Corp. </institution> <note> http://www.aai.com/AAI/IUE/IUE.html (9 Sept 1997). </note>
Reference-contexts: We have always held the view that, sooner or later, bought-in software will be found wanting whether in general lack of functionality, in lack of programmability/extensibility, in lack of performance, etc. In addition, there are libraries and (object-oriented) class hierarchies such as Image Understanding Environment (IUE) <ref> [AAI, 1997] </ref>. IUE is public domain, and is very comprehensive in covering apparently every `image processing' need, and caters for the range of abstractions from low-level pixel operations up to high-level `descriptions'. Moreover, IUE's aim of promoting cooperation and the sharing of research results is laudable.
Reference: [Bailey and White, 1977] <author> Bailey, D. and White, I. </author> <year> (1977). </year> <title> The Winograd Fourier Transform Algorithm a description with software and hardware applications. </title> <type> Technical report, </type> <institution> Plessey Radar Research Centre, Havant, U.K., </institution> <note> Report 17/77/R132U. </note>
Reference-contexts: As a consequence, we were able to increase sequence lengths by a factor of four, and image dimensions by a factor of two. Key Concerns and Projects Winograd Fourier Transform algorithm (WFTA) [McClellan and Rader, 1976, Winograd, 1978], number theoretic transforms (NTT), implemented using WFTA <ref> [Bailey and White, 1977] </ref>; the Prime 300 was microprogrammable, so that key algorithm hot-spots could be implemented in microcode, e.g. FFT 'butterfly'. 3.5 IDP 3000 1975-80 First 'commercial' digital image processing system in Europe. 3.6 DSL Revision [Campbell, 1979] Hardware & Software Platform Prime 300 16-bit mini-computer.
Reference: [Brooks, 1995] <author> Brooks, F. </author> <year> (1995). </year> <title> The Mythical Man Month. </title> <address> Reading: MA, </address> <note> Addison Wesley, second (20th anniversary) edition. </note>
Reference-contexts: We have demonstrated a pleasantly parsimonious design, and it is pleasing to report that many `features' have been relinquished, compared to the predecessor. So far, we have definitely avoided the `second system' syndrome <ref> [Brooks, 1995] </ref> in which developers run riot with indulgence, pride and delusions of grandeur. Acknowledgements We are indepted to George Row, now Southbank University, London, for many enlightening discussions on data-abstraction, functional programming, and, indeed, computer science in general. Likewise Aiden McCaughey for his support and encouragement on Linux and Java.
Reference: [Campbell, 1979] <author> Campbell, J. </author> <year> (1979). </year> <title> The Data Structure Laboratory, Description and User Manual. </title> <type> Technical report, </type> <institution> Plessey Electronic Systems Research, </institution> <address> Havant, United Kingdom. </address> <month> 11 </month>
Reference-contexts: FFT 'butterfly'. 3.5 IDP 3000 1975-80 First 'commercial' digital image processing system in Europe. 3.6 DSL Revision <ref> [Campbell, 1979] </ref> Hardware & Software Platform Prime 300 16-bit mini-computer. Software Architecture As before. Statistics block, means, covariances etc, stored with data. 5 3.7 Laboratory for Multivariate and Image Data (LAMID) 1980-81 [Campbell, 1981] Hardware and Software Platform DECsystem-20, TOPS-20 operating system. FORTRAN IV. (University College, Dublin).
Reference: [Campbell, 1981] <author> Campbell, J. </author> <year> (1981). </year> <title> The Use of Landsat MSS Data for Ecological Mapping. </title> <booktitle> In Proceedings of Ninth Annual Conference of the Remote Sensing Society, </booktitle> <publisher> University of London, </publisher> <pages> pages 143-161. </pages>
Reference-contexts: FFT 'butterfly'. 3.5 IDP 3000 1975-80 First 'commercial' digital image processing system in Europe. 3.6 DSL Revision [Campbell, 1979] Hardware & Software Platform Prime 300 16-bit mini-computer. Software Architecture As before. Statistics block, means, covariances etc, stored with data. 5 3.7 Laboratory for Multivariate and Image Data (LAMID) 1980-81 <ref> [Campbell, 1981] </ref> Hardware and Software Platform DECsystem-20, TOPS-20 operating system. FORTRAN IV. (University College, Dublin). Software Architecture LAMID standalone programs. Data objects single UDSF files (Universal Data Storage Format): metadata, data, statistics. IMPS table of commands, dispatcher for table of subprograms.
Reference: [Campbell, 1994a] <author> Campbell, J. </author> <year> (1994a). </year> <title> DataLab Programmers' Manual. </title> <type> Technical report, </type> <institution> University of Ulster, Interactive Systems Centre, </institution> <note> Report isc/94/016/n; available http://www.infm.ulst.ac.uk/ jgc/dl/dlusr.a. </note>
Reference-contexts: In order to explore the data and processing requirements, it is instructive to examine the facilities of DataLab <ref> [Campbell, 1994b, Campbell, 1994a] </ref>. The most general data structure is a multidimensional image which could represent, amongst other things, a multicolour two-dimensional spatial intensity pattern, i.e. whose pixels are vector valued, or a time sequence of monochrome images. <p> Software Architecture LAMID standalone programs. Data objects single UDSF files (Universal Data Storage Format): metadata, data, statistics. IMPS table of commands, dispatcher for table of subprograms. Data objects are again FORTRAN COMMON blocks. 3.8 DISPP (1986) Hardware and Software Platform IBM PC, MS-DOS, Microsoft FORTRAN-77. 3.9 LISSP, DataLab, 1990-95 <ref> [Campbell, 1994b, Campbell, 1994a] </ref> Hardware and Software Platform IBM PC, MS-DOS, Borland C. Software Architecture Table of commands functions; command interpreter dispatcher.
Reference: [Campbell, 1994b] <author> Campbell, J. </author> <year> (1994b). </year> <title> DataLab Users' Manual. </title> <type> Technical report, </type> <institution> University of Ulster, Interactive Systems Centre, </institution> <note> Report isc/94/015/r, available from http://www.infm.ulst.ac.uk/ jgc/dl/dlprg.a. </note>
Reference-contexts: In order to explore the data and processing requirements, it is instructive to examine the facilities of DataLab <ref> [Campbell, 1994b, Campbell, 1994a] </ref>. The most general data structure is a multidimensional image which could represent, amongst other things, a multicolour two-dimensional spatial intensity pattern, i.e. whose pixels are vector valued, or a time sequence of monochrome images. <p> Software Architecture LAMID standalone programs. Data objects single UDSF files (Universal Data Storage Format): metadata, data, statistics. IMPS table of commands, dispatcher for table of subprograms. Data objects are again FORTRAN COMMON blocks. 3.8 DISPP (1986) Hardware and Software Platform IBM PC, MS-DOS, Microsoft FORTRAN-77. 3.9 LISSP, DataLab, 1990-95 <ref> [Campbell, 1994b, Campbell, 1994a] </ref> Hardware and Software Platform IBM PC, MS-DOS, Borland C. Software Architecture Table of commands functions; command interpreter dispatcher.
Reference: [Campbell, 1995] <author> Campbell, J. </author> <year> (1995). </year> <title> Lecture notes on image processing. </title> <type> Technical report, </type> <institution> University of Ulster, </institution> <note> Module AC460, available from http://www.infm.ulst.ac.uk/ jgc/ip/. </note>
Reference-contexts: DataLab has been used for teaching an image processing course <ref> [Campbell, 1995] </ref>, and has been used successfully on a large number of student dissertations, see e.g. [Doherty, 1994].
Reference: [Campbell, 1997] <author> Campbell, J. </author> <year> (1997). </year> <title> Lessons on object-oriented programming. </title> <type> Technical report, </type> <institution> University of Ulster, </institution> <note> Module AC264, available from http://www.infm.ulst.ac.uk/ jgc/oop/oop.complete.ps. </note>
Reference-contexts: For linear algebra (matrix inversion, singular value decomposition, etc.) we use the public domain LINPACK conversions provided by [Verrill, 1997]. Polymorphism via Templates Java does not have templates. Although C++ templates are appealing for the implemenation of, for example, multiple image types, byte, integer, float, etc., see <ref> [Campbell, 1997] </ref>, we have successfully overcome their absence in our current simplified design, see Section 5 multiple numeric types. Polymorphic Collections Since, in the style of Smalltalk, all Java classes inherit from the class Object Java allows, with approriate casts, polymorphic collections, e.g. Vector.
Reference: [Campbell and Hashim, 1992] <author> Campbell, J. and Hashim, A. </author> <year> (1992). </year> <title> Fuzzy sets, pattern recognition, linear estimation, and neural networks a unification of the theory with relevance to remote sensing. </title> <booktitle> In Proceedings of Eighteenth Annual Conference of the Remote Sensing Society, University of Dundee, </booktitle> <pages> pages 508-517. </pages>
Reference-contexts: the project has survived with little or no funding support; nonetheless, it has been capable of being used for serious projects in such diverse areas as face recognition, development of fuzzy logic algorithms, experimentation with neural networks, as well as the usual pattern classification, and signal and image processing activities <ref> [Campbell and Hashim, 1992] </ref>. DataLab has been used for teaching an image processing course [Campbell, 1995], and has been used successfully on a large number of student dissertations, see e.g. [Doherty, 1994].
Reference: [Doherty, 1994] <author> Doherty, W. </author> <year> (1994). </year> <title> Textile flaw detection. </title> <type> Master's thesis, </type> <institution> University of Ulster, Dept. of Applied Computing. </institution>
Reference-contexts: DataLab has been used for teaching an image processing course [Campbell, 1995], and has been used successfully on a large number of student dissertations, see e.g. <ref> [Doherty, 1994] </ref>.
Reference: [Eaton, 1997] <author> Eaton, J. </author> <year> (1997). </year> <title> Www page: </title> <type> Octave. Technical report, </type> <institution> Univ. Wisconsin. </institution> <note> http://www.che.wisc.edu/octave (9 Sept 1997). </note>
Reference-contexts: Of course, nowadays, there are a great number of commercially available packages, e.g. [Mathworks, 1997, Khoral, 1997], and numerous public-domain and shareware packages, e.g. <ref> [Eaton, 1997] </ref>. However by the very nature of `research', workers in these areas often demand more than mere `canned-solutions'. New algorithms must be implemented in the system not always easy in third-party software.
Reference: [Flanagan, 1997] <author> Flanagan, D. </author> <year> (1997). </year> <title> Java in a Nutshell. </title> <journal> O'Reilly and Assoc., </journal> <note> 2nd edition. </note>
Reference-contexts: Later, other advantages of Java became apparent. However, this article asserts neither that Java is perfect, nor that C++ is bad. 4.2 Java Descendant of C, C++ Java <ref> [Flanagan, 1997, Horstmann, 1997] </ref> is a descendant of C++. Like C++, Java supports object-oriented software development, though it is perfectly feasible to produce Java code in an almost entirely imperative style. Indeed most C functions which deal with purely with numbers, convert directly to Java. <p> Nonetheless, someone with a working knowledge of C++ classes/objects, and with a good knowledge of procedural C or C++ could expect to be programming productively in Java with one day's reading of textbooks such as <ref> [Flanagan, 1997, Horstmann, 1997] </ref>. 6 Strong Typing Java type checking is stricter than C or C++. Expressions containing mixed types, even float, double must use explicit casts; this is not a significant inconvenience, and, in fact, is a considerable advantage for Java as a teaching language.
Reference: [Harold, 1997] <author> Harold, E. R. </author> <year> (1997). </year> <title> Www page: Java frequently asked questions (faq). </title> <type> Technical report, </type> <note> http://sunsite.unc.edu/javafaq/javafaq.html#methodpointers (6 Nov 1997). </note>
Reference-contexts: Java functions are not higher-order, i.e. they cannot take functions as arguments, not even pointers-to-functions as in C. 7 Though a workaround, using interfaces, is indicated in <ref> [Harold, 1997] </ref>, we have adopted a simpler solution in the current prototype. Scientific libraries Although the lack of scientific software libraries for Java could be seen as a weakness, things are catching up fast.
Reference: [Horstmann, 1997] <author> Horstmann, C. </author> <year> (1997). </year> <title> Practical Object-oriented Development in C++ and Java. </title> <address> New York: </address> <publisher> John Wiley. </publisher>
Reference-contexts: Later, other advantages of Java became apparent. However, this article asserts neither that Java is perfect, nor that C++ is bad. 4.2 Java Descendant of C, C++ Java <ref> [Flanagan, 1997, Horstmann, 1997] </ref> is a descendant of C++. Like C++, Java supports object-oriented software development, though it is perfectly feasible to produce Java code in an almost entirely imperative style. Indeed most C functions which deal with purely with numbers, convert directly to Java. <p> Nonetheless, someone with a working knowledge of C++ classes/objects, and with a good knowledge of procedural C or C++ could expect to be programming productively in Java with one day's reading of textbooks such as <ref> [Flanagan, 1997, Horstmann, 1997] </ref>. 6 Strong Typing Java type checking is stricter than C or C++. Expressions containing mixed types, even float, double must use explicit casts; this is not a significant inconvenience, and, in fact, is a considerable advantage for Java as a teaching language.
Reference: [Khoral, 1997] <institution> Khoral (1997). WWW Page: Khoral Research Inc. Creators of Khoros Technology. </institution> <type> Technical report, </type> <institution> Khoral Research Inc. </institution> <note> http://www.khoral.com/ (9 Sept 1997). </note>
Reference-contexts: 1 Introduction As in most applied mathematics, research in signal processing, image processing, pattern classification, signal estimation more and more depends on good software tools; especially important are easy-to-use interactivity with effective data visualisation. Of course, nowadays, there are a great number of commercially available packages, e.g. <ref> [Mathworks, 1997, Khoral, 1997] </ref>, and numerous public-domain and shareware packages, e.g. [Eaton, 1997]. However by the very nature of `research', workers in these areas often demand more than mere `canned-solutions'. New algorithms must be implemented in the system not always easy in third-party software.
Reference: [MacLennan, 1990] <author> MacLennan, B. </author> <year> (1990). </year> <title> Functional Programming: Practice and Theory. </title> <address> Reading: MA, </address> <publisher> Addison Wesley. </publisher>
Reference-contexts: Measures such as lazy evaluation and memoising <ref> [MacLennan, 1990] </ref> are partial solutions, but may incur unwarranted complexity. 5.6 Multiple Numeric Types In previous systems it was neccessary to store, at least initially, large images in byte and integer format. However,fixed-point computations are simply inconvenient so that there is always temptation, where feasible, to work in floating-point.
Reference: [Mathworks, 1997] <author> Mathworks (1997). </author> <title> WWW page: The Mathworks Web Site. </title> <type> Technical report, </type> <institution> Mathworks. </institution> <note> http://www.mathworks.com/ (9 Sept 1997). </note>
Reference-contexts: 1 Introduction As in most applied mathematics, research in signal processing, image processing, pattern classification, signal estimation more and more depends on good software tools; especially important are easy-to-use interactivity with effective data visualisation. Of course, nowadays, there are a great number of commercially available packages, e.g. <ref> [Mathworks, 1997, Khoral, 1997] </ref>, and numerous public-domain and shareware packages, e.g. [Eaton, 1997]. However by the very nature of `research', workers in these areas often demand more than mere `canned-solutions'. New algorithms must be implemented in the system not always easy in third-party software.
Reference: [McClellan and Rader, 1976] <author> McClellan, J. and Rader, C. </author> <year> (1976). </year> <title> Seminar: There is something much faster than the Fast Fourier Transform, </title> <month> October 21, </month> <year> 1976. </year> <type> Technical report, </type> <institution> Massachussetts Institute of Technology, Lincoln Laboratory. </institution>
Reference-contexts: Primos multitasking, virtual memory operating system (64K virtual memory). As a consequence, we were able to increase sequence lengths by a factor of four, and image dimensions by a factor of two. Key Concerns and Projects Winograd Fourier Transform algorithm (WFTA) <ref> [McClellan and Rader, 1976, Winograd, 1978] </ref>, number theoretic transforms (NTT), implemented using WFTA [Bailey and White, 1977]; the Prime 300 was microprogrammable, so that key algorithm hot-spots could be implemented in microcode, e.g.
Reference: [Morgan et al., 1973] <author> Morgan, O. E., White, I., Balston, D., Morton, R. D., Stentiford, F., Pike, M., and Campbell, J. </author> <year> (1973). </year> <title> The Data Structure Laboratory software currently available. </title> <type> Technical report, </type> <institution> Plessey Radar Research Centre, </institution> <address> Havant, United Kingdom. </address>
Reference-contexts: If we are to foster proper technology accumulation and retention, we need `reusability' in its widest sense. The project/package that is described in this paper has its origins in the very different computational environment of the early 1970s. The Data Structure Laboratory <ref> [Morgan et al., 1973] </ref> was an early multivariate data analysis laboratory developed by a company whose business was sensors and systems. <p> Existence of, and dimensionality of ancillary data 3 History and Origins In this section we trace the development of DataLab from its FORTRAN IV, minicomputer origins through to the current Java development. 3.1 Data Structure Laboratory (DSL), 1973 The DataLab project had its origins the the Plessey Data Structure Laboratory <ref> [Morgan et al., 1973] </ref>. One of its first projects was the design of optimal (spectral) filtering for the detection of shallow graves using multispectral data, remotely sensed from an airborne platform. Hardware Platform Honeywell DDP 516 mini-computer.
Reference: [Sammon, 1970] <author> Sammon, J. </author> <year> (1970). </year> <title> Interactive pattern analysis and classification. </title> <journal> IEEE Trans. Computers, C-19(7). </journal> <volume> 12 </volume>
Reference-contexts: DSL is not mandated, but the pull provided by the ease of use and availability of a rapidly growing software base, mean that it gains widespread acceptance. Related Software Multics OLPARS <ref> [Sammon, 1970] </ref>. Key Concerns Visualisation - 'data structure', feedback, analyst-in-loop, 'serendipity' in data analysis. We had no line printer based on the motto: the purpose of computers is to provide insight, not create data - John Tukey.
Reference: [Shaw and Garlan, 1996] <author> Shaw, M. and Garlan, D. </author> <year> (1996). </year> <title> Software Architecture: Perspectives on an Emerging Discipline. Upper Saddle River, </title> <address> NJ: </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Section 2 of the paper describes the general requirements and characteristics of such a package: processing functions, display & user-interaction, and the sort of data objects involved the one permanent theme of the 25 years evolution is that of data abstraction <ref> [Shaw and Garlan, 1996] </ref>. Section 3 outlines the evolution. Section 4 describes the Java implementation. Section 5 discusses what appear to be the major issues a critical decisions in such designs. <p> Eventually, we may have to consider reintroducing multiple types, e.g. byte for class labels. 5.7 Software Architecture The software architecture based on function-table/shared memory/objects has some limitations compared to other architectures, <ref> [Shaw and Garlan, 1996] </ref>. The chief drawback is that of configuration management: it is difficult to extend the system across distributed sites, without serious divergence occurring divergence that is most difficult to correct. A UNIX `filter' architecture is one notable and attractive alternative.
Reference: [Verrill, 1997] <author> Verrill, S. </author> <year> (1997). </year> <title> Www page: Linear algebra for statistics java package. </title> <type> Technical report, </type> <note> http://www1.fpl.fs.fed.us/linear algebra.html (6 Nov 1997). </note>
Reference-contexts: Scientific libraries Although the lack of scientific software libraries for Java could be seen as a weakness, things are catching up fast. For linear algebra (matrix inversion, singular value decomposition, etc.) we use the public domain LINPACK conversions provided by <ref> [Verrill, 1997] </ref>. Polymorphism via Templates Java does not have templates. Although C++ templates are appealing for the implemenation of, for example, multiple image types, byte, integer, float, etc., see [Campbell, 1997], we have successfully overcome their absence in our current simplified design, see Section 5 multiple numeric types. <p> Eventually, these classes proved to be more hindrance than help, and we now use plain Java arrays in their place, coupled with a class Matvec that provides no data-abstraction, but a collection of vector and matrix operations, and incorporates some of the Basic Linear Algebra Subroutines Java conversions provided by <ref> [Verrill, 1997] </ref>. Whilst Im image representation does benefit from data-abstraction and encapsulation, special array and matrix objects were incompatible with external software, e.g. the LINPACK Java conversions provided by [Verrill, 1997] and that much complexity was introduced by required conversion functions. <p> but a collection of vector and matrix operations, and incorporates some of the Basic Linear Algebra Subroutines Java conversions provided by <ref> [Verrill, 1997] </ref>. Whilst Im image representation does benefit from data-abstraction and encapsulation, special array and matrix objects were incompatible with external software, e.g. the LINPACK Java conversions provided by [Verrill, 1997] and that much complexity was introduced by required conversion functions. An alternative approach, to convert the externally produced libraries to use our objects, is attractive to the naive, but costs dearly in the long run.

References-found: 23

