URL: ftp://ftp.cs.umd.edu/pub/cim/papers/ISR_TR_94-82.ps
Refering-URL: http://www.cs.umd.edu/users/nau/imacs/IMACS.html
Root-URL: 
Title: An Application of Distributed Solid Modeling: Feature Recognition implemented on a network of SUN workstations
Author: William C. Regli Satyandra K. Gupta Dana S. Nau 
Keyword: NIH C++ class library; inter-processor communication is handled with TCP/IP-based network communication tools. Keywords: Multiprocessor Solid Modeling, Feature Recognition, Feature-Based Modeling, Distributed Computing.  
Note: Available as CS-TR-3375, UMIACS-TR-94-126, ISR-TR  This has been  and the  Also affiliated with:  
Address: Building 220, Room A-127 Gaithersburg, MD 20899  College Park, MD 20742 USA  College Park, MD 20742 USA  Park.  
Affiliation: National Institute of Standards and Technology Manufacturing Systems Integration Division  Mechanical Engineering Department Institute for Systems Research University of Maryland  Computer Science Department Institute for Advanced Computer Studies Institute for Systems Research University of Maryland  Computer Science Department and Institute for Systems Research, University of Maryland, College  
Email: regli@cme.nist.gov  skgupta@src.umd.edu  nau@cs.umd.edu  
Date: 94-82.  
Abstract: The availability of low-cost computational power is a driving force behind the growing sophistication of CAD software. Tools designed to reduce time-consuming build-test-redesign iterations are essential for increasing engineering quality and productivity. However, automation of the design process poses many difficult computational problems. As more downstream engineering activities are being considered during the design phase, guaranteeing reasonable response times within design systems becomes problematic. Design is an interactive process and speed is a critical factor in systems that enable designers to explore and experiment with alternative ideas during the design phase. Achieving interactivity requires an increasingly sophisticated allocation of computational resources in order to perform realistic design analyses and generate feedback in real time. This paper presents our initial efforts to develop techniques to apply distributed algorithms to the problem of recognizing machining features from solid models. Existing work on recognition of features has focused exclusively on serial computer architectures. Our objective is to show that distributed algorithms can be employed on realistic parts with large numbers of features and many geometric and topological entities to obtain significant improvements in computation time using existing hardware and software tools. Migrating solid modeling applications toward a distributed computing framework enables interconnection of many of the autonomous and geographically diverse software tools used in the modern manufacturing enterprise. fl This work was supported in part by NSF Grants IRI9306580, DDM-9201779, EEC 94-02384 and a forgivable loan from General Electric Corporation awarded to the first author. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> George Almasi, Raghu Karinthi, and Kankanahalli Srinivas. </author> <title> A parallel algorihtm for computing set operations on loops. </title> <type> Technical Report TR 93-10, </type> <institution> Department of Statistics and Computer Science, West Virginia University, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: In the domain of boundary representation modeling, Karinthi et al [16] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al <ref> [1] </ref>, these techniques are extended to more general loops of edges. Existing work on recognition of features has dealt with exclusively serial computer architectures. These feature technologies are based heavily on the geometric and topological manipulation capabilities of solid modeling systems and deal predominantly with form or machining features.
Reference: [2] <author> Raja P. K. Banerjee, Vineet Goel, and Amar Mukherjee. </author> <title> Efficient parallel evaluation of csg tree using fixed number of processors. </title> <editor> In Jaroslaw Rossignac, Joshua Turner, and George Allen, editors, </editor> <booktitle> Second Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 313-322, </pages> <address> New York, NY 10036, USA, </address> <month> May </month> <year> 1993. </year> <booktitle> ACM SIGGRAPH, </booktitle> <publisher> ACM Press. </publisher> <address> Montreal, Canada. </address>
Reference-contexts: Narayanaswami and Franklin [20] presented a parallel multi-processor method for calculating the mass properties of polygonal CSG objects and outlined some extensions for applying the techniques to 3-D polyhedra. Banerjee et al <ref> [2] </ref> have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory. In the domain of boundary representation modeling, Karinthi et al [16] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes.
Reference: [3] <author> S. H. Chuang and M. R. Henderson. </author> <title> Three-dimensional shape pattern recognition using vertex classification and the vertex-edge graph. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Secondly, methods based on pattern matching and finding subgraph isomorphisms (a problem known to be NP-hard) are prone to combinatorial difficulties. Chuang and Henderson <ref> [3] </ref> explored graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Sakurai [29] provided for limited user-defined feature types with a graph-based feature recognition system.
Reference: [4] <author> J. Corney and D. E. R. Clark. </author> <title> Method for finding holes and pockets that connect multiple faces in 2 1 2 d objects. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 23(10) </volume> <pages> 658-668, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search <ref> [6, 4] </ref> and those based on pattern matching [15, 21, 26]. A common difficulty for both categories of graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Sakurai [29] provided for limited user-defined feature types with a graph-based feature recognition system. Efforts at Carnegie Mellon University [21, 26] have employed graph grammars for finding features in models of injection molded parts. Recently, Corney 2 (a): a drilling feature (b): an end-milling feature and Clark <ref> [4] </ref> have employed graph-based algorithms to find general feature classes from 2 1 2 -dimensional parts. Geometric algorithms for finding convex hulls have been employed to decompose polyhedral parts and identify form features.
Reference: [5] <author> Diginta Das, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Reducing setup cost by automated generation of redesign suggestions. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 159-170. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: They attempt to formally describe the behavior of their algorithm and calculate a general measure of its complexity. Their approach has been employed for automated design analysis [12] and automated redesign <ref> [5] </ref>. Trace-based approaches have several nice properties that are just beginning to be exploited by researchers, including: * Feature traces can be produced from a richer variety of design information from the part, such as tolerances, surface finish requirements, and function information associated with surfaces.
Reference: [6] <author> Leila De Floriani. </author> <title> Feature extraction from boundary models of three-dimensional objects. </title> <journal> IEEE Trans actions on Pattern Analysis and Machine Intelligence, </journal> <volume> 11(8), </volume> <month> August </month> <year> 1989. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search <ref> [6, 4] </ref> and those based on pattern matching [15, 21, 26]. A common difficulty for both categories of graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts.
Reference: [7] <author> J. L. Ellis, G. Kedem, T. C. Lyerly, D. G. Thielman, R. J. Marisa, P. J. Menon, and H. B. Voelcker. </author> <title> The RayCasting Engine and ray representations. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 255-267, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: Lastly, Section 6 contains concluding remarks and discussion. 2 Related Work The bibliography of work on multi-processor algorithms for solid modeling applications is limited but growing. Currently, most have focused on parallel operations on CSG trees and other CSG representations of polygonal or polyhedral entities. Ellis et al <ref> [7] </ref> have developed the RayCasting Engine: a hardware-implemented facility for sampling solids represented in CSG for a variety of purposes, including rendering and mass-property calculations. They outline how this special-case hardware makes possible brute-force solutions to difficult computational problems, such as spatial sweeping and offsetting.
Reference: [8] <author> R. Gadh and F. B. Prinz. </author> <title> Recognition of geometric forms using the differential depth filter. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(11) </volume> <pages> 583-598, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: They have several nice properties, however, including that they can be employed to produce alternative feature decompositions and, in the case of machining, that the cells can be used to generate many of the tool paths of interest in planning applications. Gadh and Prinz <ref> [8] </ref> were the first to describe techniques for combating the combinatorial costs of handling realistic industrial parts (i.e. those with thousands of topological entities).
Reference: [9] <author> P. Gavankar and M. R. Henderson. </author> <title> Graph-based extraction of protrusions and depressions from bound ary representations. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(7) </volume> <pages> 442-450, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The work of Henderson has continually brought new computational techniques to address the feature recognition problem. The work described in [14], was the first to apply expert systems to the feature recognition problem. Gavankar and Henderson <ref> [9] </ref> presented techniques to identify protrusions and depressions in the boundary model of a part. More recently, Prabhakar and Henderson [22] described the use of neural networks to recognize and classify features.
Reference: [10] <author> S. K. Gupta, D. S. Nau, W. C. Regli, and G. Zhang. </author> <title> A methodology for systematic generation and evaluation of alternative operation plans. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <title> Advances in Feature Based Manufacturing. </title> <publisher> Elsevier/North Holland, </publisher> <year> 1993. </year>
Reference: [11] <author> Satyandra K. Gupta, Thomas R. Kramer, Dana S. Nau, William C. Regli, and Guangming Zhang. </author> <title> Building MRSEV models for CAM applications. </title> <booktitle> Advances in Engineering Software, </booktitle> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Synthesis of results. Combine the results obtained by each separate processor into a global solution. This solution set can then be passed on the application at hand|in the context of our previous work, this is a subsystem for performing manufacturability analysis for machined parts <ref> [12, 11] </ref>. The benefits of applying this approach include: * It increases the complexity of parts that are now computationally feasible.
Reference: [12] <author> S.K. Gupta and D.S. Nau. </author> <title> A systematic approach for analyzing the manufacturability of machined parts. </title> <booktitle> Computer Aided Design, </booktitle> <year> 1994. </year> <note> To appear. 14 </note>
Reference-contexts: Synthesis of results. Combine the results obtained by each separate processor into a global solution. This solution set can then be passed on the application at hand|in the context of our previous work, this is a subsystem for performing manufacturability analysis for machined parts <ref> [12, 11] </ref>. The benefits of applying this approach include: * It increases the complexity of parts that are now computationally feasible. <p> Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [31], incremental recognition of features [18, 13], modeling alternative feature interpretations and completeness [19, 24], reasoning about the manufacturability of features <ref> [12] </ref>, and incorporation of user-customizable feature classes. 3 (a): part (after machining) (b): part (underside view) 3 Problem Specification 3.1 Machining Features A machining feature is the portion of the workpiece affected by a machining operation. <p> They attempt to formally describe the behavior of their algorithm and calculate a general measure of its complexity. Their approach has been employed for automated design analysis <ref> [12] </ref> and automated redesign [5]. Trace-based approaches have several nice properties that are just beginning to be exploited by researchers, including: * Feature traces can be produced from a richer variety of design information from the part, such as tolerances, surface finish requirements, and function information associated with surfaces.
Reference: [13] <author> JungHyun Han and Aristides A. G. Requicha. </author> <title> Incremental recognition of machining features. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 143-150. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [31], incremental recognition of features <ref> [18, 13] </ref>, modeling alternative feature interpretations and completeness [19, 24], reasoning about the manufacturability of features [12], and incorporation of user-customizable feature classes. 3 (a): part (after machining) (b): part (underside view) 3 Problem Specification 3.1 Machining Features A machining feature is the portion of the workpiece affected by a machining
Reference: [14] <author> Mark R. Henderson. </author> <title> Extraction of Feature Information from Three-Dimensional CAD Data. </title> <type> PhD thesis, </type> <institution> Purdue University, West Lafayette, IN, USA, </institution> <year> 1984. </year>
Reference-contexts: These feature technologies are based heavily on the geometric and topological manipulation capabilities of solid modeling systems and deal predominantly with form or machining features. The work of Henderson has continually brought new computational techniques to address the feature recognition problem. The work described in <ref> [14] </ref>, was the first to apply expert systems to the feature recognition problem. Gavankar and Henderson [9] presented techniques to identify protrusions and depressions in the boundary model of a part. More recently, Prabhakar and Henderson [22] described the use of neural networks to recognize and classify features.
Reference: [15] <author> S. Joshi and T. C. Chang. </author> <title> Graph-based heuristics for recognition of machined features from a 3D solid model. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 20(2) </volume> <pages> 58-66, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search [6, 4] and those based on pattern matching <ref> [15, 21, 26] </ref>. A common difficulty for both categories of graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Similarly, in the case of an end-milling feature such as the one in Figure 1 (b), as trace might be a portion of its bottom surface. Trace-based techniques have their origin in the work of Marefat and Kashyap [19]. They expanded on the work of <ref> [15] </ref> and augmented it with hypothesis testing techniques. In this method, information from the solid model is used to generate hypotheses about the existence of features. These hypotheses are tested to see if they give rise to valid feature instances.
Reference: [16] <author> Raghu Karinthi, Kankanahalli Srinivas, and George Almasi. </author> <title> A parallel algorithm for computing polygon set operations. </title> <type> Technical Report TR 93-4, </type> <institution> Department of Statistics and Computer Science, West Virginia University, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Banerjee et al [2] have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory. In the domain of boundary representation modeling, Karinthi et al <ref> [16] </ref> have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al [1], these techniques are extended to more general loops of edges. Existing work on recognition of features has dealt with exclusively serial computer architectures.
Reference: [17] <author> Y. S. Kim. </author> <title> Recognition of form features using convex decomposition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(9) </volume> <pages> 461-476, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In an early effort in this direction, Woo [33] proposed a method for finding general depression and protrusion features on a part through decomposing the convex hull of the solid model. Recent work by Kim et al <ref> [17, 32] </ref> addresses some of the limitations of Woo's approach, improving upon its utility for generating descriptions for polyhedral parts and extending it to handle parts with some kinds of non-planar surfaces. More recently, other approaches based on cellular decomposition have emerged, most notably [27, 28].
Reference: [18] <author> Timo Laakko and Martti Mantyla. </author> <title> Feature modelling by incremental feature recognition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 25(8) </volume> <pages> 479-492, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [31], incremental recognition of features <ref> [18, 13] </ref>, modeling alternative feature interpretations and completeness [19, 24], reasoning about the manufacturability of features [12], and incorporation of user-customizable feature classes. 3 (a): part (after machining) (b): part (underside view) 3 Problem Specification 3.1 Machining Features A machining feature is the portion of the workpiece affected by a machining
Reference: [19] <author> M. Marefat and R. L. Kashyap. </author> <title> Geometric reasoning for recognition of three-dimensional object features. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 12(10) </volume> <pages> 949-965, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [31], incremental recognition of features [18, 13], modeling alternative feature interpretations and completeness <ref> [19, 24] </ref>, reasoning about the manufacturability of features [12], and incorporation of user-customizable feature classes. 3 (a): part (after machining) (b): part (underside view) 3 Problem Specification 3.1 Machining Features A machining feature is the portion of the workpiece affected by a machining operation. <p> Similarly, in the case of an end-milling feature such as the one in Figure 1 (b), as trace might be a portion of its bottom surface. Trace-based techniques have their origin in the work of Marefat and Kashyap <ref> [19] </ref>. They expanded on the work of [15] and augmented it with hypothesis testing techniques. In this method, information from the solid model is used to generate hypotheses about the existence of features. These hypotheses are tested to see if they give rise to valid feature instances.
Reference: [20] <author> Chandrasekhar Narayanaswami and William R. Franklin. </author> <title> Determination of mass properties of polygonal csg objects in parallel. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 255-267, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: They outline how this special-case hardware makes possible brute-force solutions to difficult computational problems, such as spatial sweeping and offsetting. Narayanaswami and Franklin <ref> [20] </ref> presented a parallel multi-processor method for calculating the mass properties of polygonal CSG objects and outlined some extensions for applying the techniques to 3-D polyhedra. Banerjee et al [2] have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory.
Reference: [21] <author> J. Miguel Pinilla, Susan Finger, and Friedrich B. Prinz. </author> <title> Shape feature description using an augmented topology graph grammar. </title> <booktitle> In Proceedings NSF Engineering Design Research Conference, </booktitle> <pages> pages 285-300. </pages> <institution> National Science Foundation, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search [6, 4] and those based on pattern matching <ref> [15, 21, 26] </ref>. A common difficulty for both categories of graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Chuang and Henderson [3] explored graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Sakurai [29] provided for limited user-defined feature types with a graph-based feature recognition system. Efforts at Carnegie Mellon University <ref> [21, 26] </ref> have employed graph grammars for finding features in models of injection molded parts. Recently, Corney 2 (a): a drilling feature (b): an end-milling feature and Clark [4] have employed graph-based algorithms to find general feature classes from 2 1 2 -dimensional parts.
Reference: [22] <author> S. Prabhakar and M. R. Henderson. </author> <title> Automatic form-feature recognition using neural-network-based techniques on boundary representations of solid models. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(7) </volume> <pages> 381-393, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The work described in [14], was the first to apply expert systems to the feature recognition problem. Gavankar and Henderson [9] presented techniques to identify protrusions and depressions in the boundary model of a part. More recently, Prabhakar and Henderson <ref> [22] </ref> described the use of neural networks to recognize and classify features. A strength to this approach is that they exploit the trainability of a neural net to incorporate new feature types.
Reference: [23] <author> William C. Regli, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Extracting alternative machining features: An algorithmic approach. </title> <type> Technical Report ISR-TR94-55, </type> <institution> The University of Maryland, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: After filling frames with the trace information present in the part, the system classifies the partial frames and attempts to complete the frame information for those that appear promising using a variety of geometric reasoning and computational geometry techniques. Regli et al <ref> [25, 23] </ref> presented an approach for guaranteeing completeness of a recognition algorithm, i.e., that one could define a class of features and verify that one's approach was capable of producing all features in that class. <p> A presentation of the details of the various procedures P t i () for these traces is beyond the scope of this paper. Such algorithms have been developed in previous work, notably: Vandenbrande [31] for drilling feature traces 1 and 2 and end-milling feature trace 1; and Regli <ref> [25, 23] </ref> for all of the above traces. 4 Approach 4.1 Motivations The properties that make trace-based approaches highly suitable for parallelization are evident in the procedure from the previous section: the feature classes and their traces each introduce natural partition lines along which the problem can be divided into independent
Reference: [24] <author> William C. Regli, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Feature recognition for manufacturability analysis. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 93-104. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [31], incremental recognition of features [18, 13], modeling alternative feature interpretations and completeness <ref> [19, 24] </ref>, reasoning about the manufacturability of features [12], and incorporation of user-customizable feature classes. 3 (a): part (after machining) (b): part (underside view) 3 Problem Specification 3.1 Machining Features A machining feature is the portion of the workpiece affected by a machining operation. <p> In existing literature, the members of M are often defined as parameterized geometric templates. The feature set F is a finite set of features comprised of those features belonging to the alternative feature-based models for the part <ref> [24] </ref>. 3.3 Trace-based Recognition of Features A trace represents the partial information left in the model by an instance of a feature. <p> They are intended to provide an indication of the time-lag experienced by the user of the system. More significant than the elapsed time statistics are the speedup factors between the serial and parallelized versions. (a): example from [31] (b): example from <ref> [24] </ref> Empirical Results 1. This example, taken from [31], contains 21 part faces. In serial, 1 drilling and 8 end-milling features were identified in approximately 45-50 seconds. In parallel on 6 processors, it took approximately 5 seconds to set up the decomposition and 8-12 seconds to recognize the features. <p> Using the design information reduction and simplification techniques, there was a 22% reduction in the number of geometric and topological entities that had to be considered. Empirical Results 2. The example part in Figure 6 (b) is a socket taken from <ref> [24] </ref>. This part, when machined from a cylindrical piece of stock material, has 37 faces in the delta volume. For this part, there are 12 drilling and 20 end-milling 12 features appearing in its feature-based models that can be produced with the traces given above.
Reference: [25] <author> William C. Regli and Dana S. Nau. </author> <title> Building a general approach to feature recognition of material removal shape element volumes (MRSEVs). </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Second Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <address> New York, NY 10036, USA, May 19-21, Montreal, Canada 1993. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: In this paper we present our initial efforts toward developing a methodology for recognizing a class of machining features using a distributed, multi-processor computational architecture. Feature recognition has been approached using a variety of techniques, some of which are easier to parallelize than others. In previous work <ref> [25] </ref>, we described trace-based, serial algorithms for finding feature instances from solid model data. This current work indicates that trace-based feature recognition methodologies are particularly well suited for parallelization. The basic steps in this approach are: 1. Identify a task decomposition. <p> After filling frames with the trace information present in the part, the system classifies the partial frames and attempts to complete the frame information for those that appear promising using a variety of geometric reasoning and computational geometry techniques. Regli et al <ref> [25, 23] </ref> presented an approach for guaranteeing completeness of a recognition algorithm, i.e., that one could define a class of features and verify that one's approach was capable of producing all features in that class. <p> A presentation of the details of the various procedures P t i () for these traces is beyond the scope of this paper. Such algorithms have been developed in previous work, notably: Vandenbrande [31] for drilling feature traces 1 and 2 and end-milling feature trace 1; and Regli <ref> [25, 23] </ref> for all of the above traces. 4 Approach 4.1 Motivations The properties that make trace-based approaches highly suitable for parallelization are evident in the procedure from the previous section: the feature classes and their traces each introduce natural partition lines along which the problem can be divided into independent
Reference: [26] <author> Scott A. Safier and Susan Finger. </author> <title> Parsing features in solid geometric models. </title> <booktitle> In European Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search [6, 4] and those based on pattern matching <ref> [15, 21, 26] </ref>. A common difficulty for both categories of graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Chuang and Henderson [3] explored graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Sakurai [29] provided for limited user-defined feature types with a graph-based feature recognition system. Efforts at Carnegie Mellon University <ref> [21, 26] </ref> have employed graph grammars for finding features in models of injection molded parts. Recently, Corney 2 (a): a drilling feature (b): an end-milling feature and Clark [4] have employed graph-based algorithms to find general feature classes from 2 1 2 -dimensional parts.
Reference: [27] <author> Hiroshi Sakurai. </author> <title> Decomposing a delta volume into maximal convex volumes and sequencing them for machining. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 135-142. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: More recently, other approaches based on cellular decomposition have emerged, most notably <ref> [27, 28] </ref>. Such methods are computationally intensive, often producing a large number of cells with a large (often exponential) number of ways for them to be combined into features.
Reference: [28] <author> Hiroshi Sakurai and Chia-Wei Chin. </author> <title> Definition and recognition of volume features for process planning. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <booktitle> Advances in Feature Based Manufacturing, chapter 4, </booktitle> <pages> pages 65-80. </pages> <address> Elsevier/North Holland, </address> <year> 1994. </year> <month> 15 </month>
Reference-contexts: More recently, other approaches based on cellular decomposition have emerged, most notably <ref> [27, 28] </ref>. Such methods are computationally intensive, often producing a large number of cells with a large (often exponential) number of ways for them to be combined into features.
Reference: [29] <author> Hiroshi Sakurai and David C. Gossard. </author> <title> Recognizing shape features in solid models. </title> <journal> IEEE Computer Graphics & Applications, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: Secondly, methods based on pattern matching and finding subgraph isomorphisms (a problem known to be NP-hard) are prone to combinatorial difficulties. Chuang and Henderson [3] explored graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Sakurai <ref> [29] </ref> provided for limited user-defined feature types with a graph-based feature recognition system. Efforts at Carnegie Mellon University [21, 26] have employed graph grammars for finding features in models of injection molded parts.
Reference: [30] <author> Amjad Umar. </author> <title> Distributed Computing: A Practical Synthesis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ 07632, </address> <year> 1993. </year>
Reference-contexts: It is not as well suited to problems where the feature instances are complex, i.e., a pocket with 5280 distinct curved surfaces comprising its profile. 7 4.2 Overall Methodology In the distributed computing paradigm, collections of autonomous computational resources are interconnected on a network, as illustrated in Figure 3 <ref> [30] </ref>. While these resources do not share main memory, they may share access to common devices such as peripherals, file systems, output devices, etc. Software systems can use the network and shared peripherals to exchange information between the autonomous resources.
Reference: [31] <author> J. H. Vandenbrande and A. A. G. Requicha. </author> <title> Spatial reasoning for the automatic recognition of machinable features in solid models. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 15(12):1269, </volume> <month> December </month> <year> 1993. </year>
Reference-contexts: Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features <ref> [31] </ref>, incremental recognition of features [18, 13], modeling alternative feature interpretations and completeness [19, 24], reasoning about the manufacturability of features [12], and incorporation of user-customizable feature classes. 3 (a): part (after machining) (b): part (underside view) 3 Problem Specification 3.1 Machining Features A machining feature is the portion of the <p> They expanded on the work of [15] and augmented it with hypothesis testing techniques. In this method, information from the solid model is used to generate hypotheses about the existence of features. These hypotheses are tested to see if they give rise to valid feature instances. Vandenbrande and Requicha <ref> [31] </ref> were the first to formalize trace-based (or hint-based) techniques for constructing features from information in a solid model. In the work of Vandenbrande, the traces are used to fill "feature frames" in a frame-based reasoning system. <p> A presentation of the details of the various procedures P t i () for these traces is beyond the scope of this paper. Such algorithms have been developed in previous work, notably: Vandenbrande <ref> [31] </ref> for drilling feature traces 1 and 2 and end-milling feature trace 1; and Regli [25, 23] for all of the above traces. 4 Approach 4.1 Motivations The properties that make trace-based approaches highly suitable for parallelization are evident in the procedure from the previous section: the feature classes and their <p> They are intended to provide an indication of the time-lag experienced by the user of the system. More significant than the elapsed time statistics are the speedup factors between the serial and parallelized versions. (a): example from <ref> [31] </ref> (b): example from [24] Empirical Results 1. This example, taken from [31], contains 21 part faces. In serial, 1 drilling and 8 end-milling features were identified in approximately 45-50 seconds. <p> They are intended to provide an indication of the time-lag experienced by the user of the system. More significant than the elapsed time statistics are the speedup factors between the serial and parallelized versions. (a): example from <ref> [31] </ref> (b): example from [24] Empirical Results 1. This example, taken from [31], contains 21 part faces. In serial, 1 drilling and 8 end-milling features were identified in approximately 45-50 seconds. In parallel on 6 processors, it took approximately 5 seconds to set up the decomposition and 8-12 seconds to recognize the features.
Reference: [32] <author> Douglas L. Waco and Yong Se Kim. </author> <title> Geometric reasoning for machining features using convex decomposition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 26(6) </volume> <pages> 477-489, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In an early effort in this direction, Woo [33] proposed a method for finding general depression and protrusion features on a part through decomposing the convex hull of the solid model. Recent work by Kim et al <ref> [17, 32] </ref> addresses some of the limitations of Woo's approach, improving upon its utility for generating descriptions for polyhedral parts and extending it to handle parts with some kinds of non-planar surfaces. More recently, other approaches based on cellular decomposition have emerged, most notably [27, 28]. <p> In the example illustrated in Figure 5 (b), six disjoint planar part faces are grouped to be handled together on the same processor. This grouping collects the split faces <ref> [32] </ref> of the part. 3. end-milling trace 2: Group convex cylindrical surfaces with equivalent axis directions. 9 (a) (b) information. 4. end-milling trace 3: Group planar surfaces with normals perpendicular to a common vector, i.e., for each grouping there is a vector v such that, for all surfaces s i and
Reference: [33] <author> Tony C. Woo. </author> <title> Feature extraction by volume decomposition. </title> <booktitle> In Conference on CAD/CAM Technology in Mechanical Engineering, </booktitle> <pages> pages 76-94, </pages> <month> March </month> <year> 1982. </year> <month> 16 </month>
Reference-contexts: Geometric algorithms for finding convex hulls have been employed to decompose polyhedral parts and identify form features. In an early effort in this direction, Woo <ref> [33] </ref> proposed a method for finding general depression and protrusion features on a part through decomposing the convex hull of the solid model.
References-found: 33

