URL: ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/koop95-OperMachSpec.ps.gz
Refering-URL: http://www.cs.kun.nl/~clean/Clean.Papers.html
Root-URL: 
Title: Operational Machine Specification in a Functional Programming Language  
Author: P.W.M. Koopman M.C.J.D. van Eekelen and M.J. Plasmeijer 
Keyword: functional programming language, formal specification, machine specification, prototype implementation, executable specification  
Address: Toernooiveld 1, 6525 ED, Nijmegen, The Netherlands  
Affiliation: Department of computer science, University of Nijmegen,  
Abstract: This paper advocates the use of a functional programming language for the formal specification of (abstract) machines. The presented description method describes machines at two levels. At the bottom layer machine components and micro instructions to handle them are described by an abstract data type. The top layer describes the machine instructions in terms of these micro instructions. The use of a functional language for this purpose has several advantages. The abstraction mechanisms offered by a functional programming language are that good that one can abstract from irrelevant details as is required for a specification language. Functional languages have a well defined semantics such that the meaning of the specification is clear as well. On the other hand they offer the advantages of a programming language: the compiler can check the specification for partial correctness eliminating e.g. type errors and unbound identifiers (errors which occur in many published descriptions). Furthermore, the specification can be executed such that one obtains a prototype implementation almost for free. Such an executable formal specification can for instance be used to investigate the dynamic behaviour of the described machine. For a simple machine, the proposed description method is compared with several other description methods: a traditional style, a denotational semantics and a formal specification in the language Z. To show that the proposed method is indeed useful to describe large and complicated machines, the method is applied for the specification of an abstract imperative graph rewrite machine (the ABC-machine) which has been used in the construction of the compiler for the functional language Concurrent Clean. 
Abstract-found: 1
Intro-found: 1
References-found: 0

