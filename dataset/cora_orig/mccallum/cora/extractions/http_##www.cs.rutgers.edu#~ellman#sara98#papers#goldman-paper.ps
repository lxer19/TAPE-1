URL: http://www.cs.rutgers.edu/~ellman/sara98/papers/goldman-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~ellman/sara98/papers/
Root-URL: http://www.cs.rutgers.edu
Email: fgoldman,musliner,boddy,krebsbacg@htc.honeywell.com  
Title: Abstraction for Real-time Intelligent Control: Extended Abstract  
Author: Robert P. Goldman, David J. Musliner, Mark S. Boddy, Kurt D. Krebsbach 
Address: 3660 Technology Drive Minneapolis, MN 55418  
Affiliation: Automated Reasoning Group Honeywell Technology Center  
Abstract-found: 0
Intro-found: 1
Reference: <author> Barrett, A., and Weld, D. </author> <year> 1994. </year> <title> Partial order planning: Evaluating possible efficiency gains. </title> <booktitle> Artificial Intelligence 67(1) </booktitle> <pages> 71-112. </pages>
Reference-contexts: In particular, we present results for test domains that focus on: * "Benign" events; * Uncertainty in initial conditions; * Interactions between events and goal achievement. Our random problem design is based on techniques developed by Barrett and Weld for "classical" planning <ref> (Barrett & Weld 1994) </ref>. Throughout our experiments, we consider domains in which there is a causal chain from the initial state (s) to the goal. <p> To automatically generate one of these domains, we build a sequence of simple actions that rely on each others preconditions, and must be chained together to achieve the final goal. Using a notation derived from that used by Barrett and Weld <ref> (Barrett & Weld 1994) </ref>, we can describe these actions by the template: (make-instance 'action :name Achieve-Goal-i :preconds ( (G i F) (G i1 T) ) :postconds ( (G i T) )) A set of actions like this creates a sequence of goal features, G 1 ; G 2 ; : :
Reference: <author> Boutilier, C.; Dearden, R.; and Goldszmidt, M. </author> <year> 1995. </year> <title> Exploiting structure in policy construction. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1104-1113. </pages>
Reference-contexts: The underlying model is also significantly different from CIRCA's: it does not model exogenous events or the timing required for real-time guarantees. In more recent work, Boutilier et al. have developed an approach to MDPs that uses dynamic, local abstraction, much like our own <ref> (Boutilier, Dearden, & Gold-szmidt 1995) </ref>. Their technique is like ours in gradually, dynamically adding information to different parts of the state space, and in using regression across actions to direct state refinement.
Reference: <author> Dearden, R., and Boutilier, C. </author> <year> 1997. </year> <title> Abstraction and approximate decision-theoretic planning. </title> <journal> Artificial Intelligence 89(1-2):219-283. </journal>
Reference: <author> Givan, R., and Dean, T. </author> <year> 1997. </year> <title> Model minimization, regression and propositional STRIPS planning. </title> <editor> In Pollack, M., ed., </editor> <booktitle> Proceedings of the 15th International Joint Conference on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: Our DAP planning algorithm is essentially performing on-line model minimization. This model minimization is based on concepts of regression from "classical" AI planning. In work done simultaneously with our development of DAP, Givan and Dean have explored the connection between model minimization and STRIPS-style planning <ref> (Givan & Dean 1997) </ref>. They show how STRIPS style regression may be interpreted in terms of model minimization.
Reference: <author> Godefroid, P., and Kabanza, F. </author> <year> 1991. </year> <title> An efficient reactive planner for synthesizing reactive plans. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> 640-645. </pages> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Goldman, R. P.; Musliner, D. J.; Krebsbach, K. D.; and Boddy, M. S. </author> <year> 1997. </year> <title> Dynamic abstraction planning. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> 680-686. </pages> <address> Menlo Park, CA: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: In this generation process we abstract temporal information, using a special-purpose temporal prover to summarize information about the latency of various events. We also use a technique we call Dynamic Abstraction Planning <ref> (Goldman et al. 1997) </ref> to minimize the (nontemporal) feature space of the controllers. In this position paper we present the two abstraction methods used in CIRCA state-space planning. We start by reviewing the CIRCA architecture, which couples a deliberative planning component with a sched-uler and a real-time executive. <p> Dynamic Abstraction Planning The original CIRCA planner used a forward planning algorithm with full state descriptions. This led to an explosion in the state space of the planner. In recent work <ref> (Goldman et al. 1997) </ref>, we have addressed this state-space explosion using a new planning technique that we call Dynamic Abstraction Planning (DAP).
Reference: <author> Kabanza, F.; Barbeau, M.; and St.-Denis, R. </author> <year> 1997. </year> <title> Planning control rules for reactive agents. </title> <booktitle> Artificial Intelligence 95(1) </booktitle> <pages> 67-113. </pages>
Reference-contexts: The model we have outlined is a simplified timed discrete-event control model (Ostroff & Wonham 1990). Kabanza provides a controller synthesis algorithm that works with such models in a straightforward way, interleaving non-volitional and volitional transitions, and with state feature spaces augmented by a feature corresponding to elapsed time <ref> (Kabanza, Bar-beau, & St.-Denis 1997) </ref>. However, in the applications we have examined, this approach is not feasible. The reason is that our applications involve both very long latency processes (e.g., the warming up of a rocket engine) and short latency processes (tests and actions in the RTS controller loop). <p> Related Work As we mentioned earlier, Kabanza et al. <ref> (Kabanza, Barbeau, & St.-Denis 1997) </ref> have developed a planning method for reactive agents based on a model similar to ours. Their architecture differs in emphasis, however. The NFAs it constructs are "clocked:" they make transitions at times that are the least common denominator of all possible transitions. <p> Unfortunately, these results are not immediately applicable to CIRCA, because their world model does not include exogenous events. The more recent work by Kabanza et al. <ref> (Kabanza, Bar-beau, & St.-Denis 1997) </ref> does include exogenous events, but they do not seem to have carried over the earlier abstraction concepts. Conclusions We have presented two abstraction techniques used in CIRCA's automatic generation of hard real-time discrete event controllers. The controller synthesis is handled by constructing a timed NFA.
Reference: <author> Kambhampati, S. </author> <year> 1994. </year> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title>
Reference-contexts: The overall performance results are shown in Figure 14. Comparison to Other State-space Abstraction Techniques Many classical planning systems have used abstraction methods to increase the efficiency of searching for plans (see <ref> (Kambhampati 1994) </ref> for a brief survey). However, these abstractions are typically used only as guides in searching for a plan; the system may not know that its goals will actually be achieved by an abstract plan, and it will not be able to execute the abstracted opera tors directly.
Reference: <editor> In Doyle, J.; Sandewall, E.; and Torasso, P., eds., </editor> <booktitle> Principles of Knowledge Representation and Reasoning:Proceedings of the Fourth International Conference. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Knoblock, C. A. </author> <year> 1994. </year> <title> Automatically generating abstractions for planning. </title> <booktitle> Artificial Intelligence 68 </booktitle> <pages> 243-302. </pages>
Reference-contexts: Their method is similar to the DAP approach in that it involves aggregating states, but there are some differences. First, their method is not dynamic: aggregation is performed using a predefined set of "relevant" propositions, which is determined using Knoblock's approach <ref> (Knoblock 1994) </ref>. Second, their method is uniform: the same propositions are relevant everywhere. The underlying model is also significantly different from CIRCA's: it does not model exogenous events or the timing required for real-time guarantees.
Reference: <author> Musliner, D. J.; Durfee, E. H.; and Shin, K. G. </author> <year> 1993. </year> <title> CIRCA: a cooperative intelligent real-time control architecture. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics 23(6) </journal> <pages> 1561-1574. </pages>
Reference: <author> Musliner, D. J.; Durfee, E. H.; and Shin, K. G. </author> <year> 1995. </year> <title> World modeling for the dynamic construction of real-time control plans. </title> <booktitle> Artificial Intelligence 74(1) </booktitle> <pages> 83-127. </pages>
Reference-contexts: ((emergency T)) ;; light by deadline POSTCONDS: ((failure T)) MIN-DELAY: 30 [seconds] ACTION push-emergency-button PRECONDS: ((part-in-gripper nil)) POSTCONDS: ((emergency nil) (robot-position over-button)) WORST-CASE-EXEC-TIME: 2.0 [seconds] CIRCA's planning system builds reaction plans based on a world model and a set of formally-defined safety conditions that must be satisfied by feasible plans <ref> (Musliner, Durfee, & Shin 1995) </ref>. To describe a domain to CIRCA, the user inputs a set of transition descriptions that implicitly define the set of reachable states. For example, Figure 2 illustrates several transitions used in the Puma domain. <p> A transition is enabled if its preconditions are satisfied by the state features. This simple model corresponds to the original CIRCA planner <ref> (Musliner, Durfee, & Shin 1995) </ref>. A well-formed plan is one in which an arc is present for every enabled nonvolitional transition between nodes which is not preempted, and each node has outgoing arcs for at most one action (non-deterministic actions may require more than one arc).
Reference: <author> Ostroff, J. S., and Wonham, W. M. </author> <year> 1990. </year> <title> A framework for real-time discrete event control. </title> <journal> IEEE Transactions on Automatic Control 35(4) </journal> <pages> 386-397. </pages>
Reference-contexts: The model we have outlined is a simplified timed discrete-event control model <ref> (Ostroff & Wonham 1990) </ref>. Kabanza provides a controller synthesis algorithm that works with such models in a straightforward way, interleaving non-volitional and volitional transitions, and with state feature spaces augmented by a feature corresponding to elapsed time (Kabanza, Bar-beau, & St.-Denis 1997).
References-found: 13

