URL: http://robotics.stanford.edu/~latombe/papers/aij/assembly/paper.ps.gz
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.cs.stanford.edu
Email: rwilson@cs.stanford.edu  latombe@cs.stanford.edu  
Title: Geometric Reasoning About Mechanical Assembly  for their encouragement and comments.  
Author: Randall H. Wilson Jean-Claude Latombe Leo Guibas, Rajeev Motwani, and Achim Schweikard 
Note: Acknowledgments: This research was funded by arpa contract n00014-88-k-0620, nsf grant iri-9306544-001, and a grant of the Stanford Integrated Manufacturing Association (sima). The authors also thank  
Address: Stanford, CA 94305, USA  
Affiliation: Robotics Laboratory Department of Computer Science, Stanford University  
Abstract: In which order can a product be assembled or disassembled? How many hands are required? How many degrees of freedom? What parts should be withdrawn to allow the removal of a specified subassembly? To answer such questions automatically, important theoretical issues in geometric reasoning must be addressed. This paper investigates the planning of assembly algorithms specifying (dis)assembly operations on the components of a product and the ordering of these operations. It also presents measures to evaluate the complexity of these algorithms and techniques to estimate the inherent complexity of a product. The central concept underlying these planning and complexity evaluation techniques is that of a "non-directional blocking graph," a qualitative representation of the internal structure of an assembly product. This representation describes the combinatorial set of parts interactions in polynomial space. It is obtained by identifying physical criticalities where geometric interferences among parts change. It is generated from an input geometric description of the product. The main application considered in the paper is the creation of smart environments to help designers create products that are easier to manufacture and service. Other possible applications include planning for rapid prototyping and autonomous robots. 
Abstract-found: 1
Intro-found: 1
Reference: [1] |- <author> 1990. </author> <title> Special Issue on Robotic Assembly and Task Planning. AI Magazine, </title> <publisher> AAAI Press, </publisher> <pages> 11(1). </pages>
Reference-contexts: However, the high complexity of assembly planning when viewed as a general motion planning problem has led researchers to turn their attention toward a simpler subproblem known as assembly sequence planning, or simply assembly sequencing <ref> [1, 22] </ref>. In this problem, only the constraints (mainly geometric ones) arising from the assembly itself are considered; the manipulation system (e.g., the robots) executing this plan is simply ignored by assuming that the parts composing the assembly are flee-flying objects. The early assembly sequencers were mainly sequence editors.
Reference: [2] <author> Aho, A.V., Hopcroft, J.E., and Ullman J.D. </author> <year> 1974. </year> <title> The Design and Analysis of Computer Algorithms. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The computation of G (d; A) takes O (n 2 + c) time. We can avoid the initial clearing of the adjacency matrix by keeping track of the updated cells in a stack of pointers (see <ref> [2] </ref>, page 71). This modification reduces the computing complexity of G (d; A) to O (c). By repeating the computation for all regular regions, the ndbg (A) is constructed in O (c 2 ) time. The size of (A) is O (cn 2 ).
Reference: [3] <author> Aho, A.V., Hopcroft, J.E., and Ullman J.D. </author> <year> 1983. </year> <title> Data Structures and Algorithms. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Each dbg contains n nodes and at most 2r arcs. Hence, finding the strong components of any dbg takes O (r) time <ref> [3] </ref> and generating a candidate partitioning of A, given (A), takes O (r 2 ) time. Furthermore, if a candidate algorithm exists, one candidate algorithm also exists for each of the two subassemblies in any candidate partitioning. Thus, generating a candidate algorithm takes O (r 2 n) time.
Reference: [4] <author> Arkin, E.M., Connelly, R., and Mitchell, J.S. </author> <year> 1989. </year> <title> On Monotone Paths among Obstacles with Applications to Planning Assemblies. </title> <booktitle> ACM Symp. on Computational Geometry, </booktitle> <pages> 334-343. </pages>
Reference-contexts: Given a 2D polygonal assembly A, the problem of deciding whether there is a direction d and a subassembly S A such that a translation along d separates S from the rest of A is addressed in <ref> [4] </ref>. An algorithm to construct a sequence of translations separating two polygonal parts is given in [39]. Several techniques presented in this paper have been influenced by the work in computational geometry.
Reference: [5] <author> Baldwin, D.F. </author> <year> 1990. </year> <title> Algorithmic Methods and Software Tools for the Generation of Mechanical Assembly Sequences, </title> <type> Master's thesis, </type> <institution> MIT. </institution>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions [7, 10]. Automated geometric reasoning was later added to answer these questions automatically <ref> [5, 19, 20, 28, 30, 47, 51] </ref>. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. This approach tends to repeat the same geometric computations many times.
Reference: [6] <author> Boothroyd, G. </author> <year> 1991. </year> <title> Assembly Automation and Product Design. </title> <publisher> Marcel Dekker, Inc., </publisher> <address> New York, NY. </address>
Reference-contexts: The synthesis of pertinent information to feed back to designers is another important issue. The concept of the algorithmic complexity of an assembly design presented in this paper directly addresses this issue. It derives in part from informal complexity measures currently in use in several companies (e.g., see <ref> [6] </ref>). The field of computational geometry has also explored issues relevant to assembly planning, for example, set separation problems [46].
Reference: [7] <author> Bourjault, A. </author> <year> 1984. </year> <title> Contribution a une Approche Methodologique de l'Assemblage Automatise: Elaboration Automatique des Sequences Operatoires. </title> <type> PhD thesis, </type> <institution> Faculte des Sciences et des Techniques de l'Universite de Franche-Comte, France. </institution>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions <ref> [7, 10] </ref>. Automated geometric reasoning was later added to answer these questions automatically [5, 19, 20, 28, 30, 47, 51]. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions.
Reference: [8] <author> Canny, J.F. and Goldberg, K.Y. </author> <year> 1992. </year> <title> RISC Robotics. </title> <note> in preparation. </note>
Reference-contexts: We also expect that it will contribute to the emergence of a completely new type of manufacturing technology where a large number of very simple, mass-produced actuators and sensors are combined in highly modular manufacturing systems. The risc approach to robotics recently proposed in <ref> [8] </ref> takes a similar view. One of our current research goals is to construct polynomial ndbgs for more complex families of motion and investigate the effect of additional constraints (e.g., uncertainty, grasp accessibility) on the construction of ndbgs.
Reference: [9] <author> Cutkosky, M.R. and Tenenbaum, J.M. </author> <year> 1990. </year> <title> A Methodology and Computational Framework for Concurrent Product and Process Design. </title> <journal> ASME J. of Mechanism and Machine Theory, </journal> <volume> 25(3) </volume> <pages> 365-381. 28 </pages>
Reference-contexts: Our main goal is to provide efficient computational support for the "concurrent engineering" approach to design, in which constraints arising from manufacturing and servicing are taken into account at design time <ref> [9] </ref>. As products are designed with more parts of various sorts (e.g., machined, composite, electrical, electronic) densely packed to provide more functions per cubic inch, the need for powerful assembly support tools will increase dramatically.
Reference: [10] <author> De Fazio, T.L. and Whitney, D.E. </author> <year> 1987. </year> <title> Simplified Generation of All Mechanical Assembly Sequences. </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> RA-3(6):640-658. </volume> <editor> Errata in RA-4(6):705-708. [11] de Kleer, J. and Williams, B.C. (guest editors). </editor> <year> 1991. </year> <title> Special Volume, Qualitative Reasoning about Physical Systems II. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 51(1-3). </pages>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions <ref> [7, 10] </ref>. Automated geometric reasoning was later added to answer these questions automatically [5, 19, 20, 28, 30, 47, 51]. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. <p> Originally, the research in assembly planning was aimed at assisting process planning in order to reduce delays between design and manufacturing, and eventually produce better plans <ref> [10] </ref>. This goal is still valuable, especially for rapid prototyping and even mass production. Recently, however, the interest has shifted toward generating assembly sequences to evaluate assembly designs and help designers create products that are easier to manufacture [44, 48].
Reference: [12] <author> Edelsbrunner, H. and Guibas, L. </author> <year> 1989. </year> <title> Topologically Sweeping an Arrangement. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 38 </volume> <pages> 165-194. </pages>
Reference-contexts: The c plane-plane contacts induce arcs of great circles partitioning S 2 into an arrangement of O (c 2 ) regular regions of dimensions 2, 1 and 0 (faces, edges, and vertices, respectively). This arrangement is computed in O (c 2 ) time using a topological sweep <ref> [12] </ref>. The ndbg is computed in O (c 3 ) time and has size O (c 2 n 2 ). If only one dbg is represented at any one time, we can use crossing rules between regions and successively compute all the dbgs in O (c 2 ) time. <p> Since a singleton in the above arrangement arises whenever five hyperplanes intersect, the arrangement contains O (k 5 ) regions. It is constructed in O (k 5 ) time by a multi-dimensional topological sweep <ref> [12] </ref>. Constructing a dbg in any region is done in time O (k).
Reference: [13] <author> Fahlman, S.E. </author> <year> 1974. </year> <title> A Planning System for Robot Construction Tasks. </title> <journal> Artificial Intelligence, </journal> <volume> 5(1) </volume> <pages> 1-49. </pages>
Reference-contexts: ON (A,B). Additional geometric knowledge is implicitly coded in the operators representing the actions that can be executed (e.g., stacking a block on top of another). A noticeable exception is build <ref> [13] </ref>, which includes a simple treatment of such notions as stability and friction. The interest of AI in general planning is still very high [35]. The geometric approach to assembly planning originated in robotics with the work reported in [29] (autopass), [31] (lama), and [45].
Reference: [14] <author> Faltings, B. </author> <year> 1992. </year> <title> A Symbolic Approach to Qualitative Kinematics. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 56(2-3), 139-170. </pages>
Reference-contexts: The construction of an ndbg is based on the identification of physical criticalities to decompose a continuous set into a finite number of regions that are treated as single entities. This approach relates to the general interests of qualitative physics [11] and, more specifically, qualitative kinematics <ref> [14, 24] </ref>, which studies the internal motions of parts in an operational device. It yields more meaningful decompositions than blind discretizations not based on any sort of criticality (discontinuity, singularity, or event).
Reference: [15] <author> Fikes, R.E. and Nilsson, N.J. </author> <year> 1971. </year> <title> Strips: A New Approach to the Application of Theorem Proving to Problem Solving. </title> <journal> Artificial Intelligence, 2(3-4):189-208. </journal>
Reference-contexts: All other notations are defined and used locally. 3 2. Related Work The automatic planning of assembly and disassembly operations has attracted the interest of AI researchers for a long time. The classical blocks world can be seen as a primitive assembly planning domain <ref> [15, 38] </ref>. Moreover, some AI planners have considered more complex domains. For instance, noah [42] was originally aimed at supplying instructions to a human apprentice to repair an air compressor, including disassembly and assembly plans.
Reference: [16] <author> Garey, M.R. and Johnson, D.S. </author> <year> 1979. </year> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <address> New York, NY:W.H. </address> <publisher> Freeman and Co. </publisher>
Reference-contexts: This idea is analogous to the computational complexity of a problem, which is defined as the lower-bound complexity (in terms of time and space) of all the computer algorithms that solve the problem <ref> [16] </ref>. The estimated complexity measures for a product can be used to provide concise, pertinent information to the designers. To be useful, however, the complexity of an assembly product must be measured along many more axes than that of a computational problem.
Reference: [17] <author> Goldberg, K.Y. </author> <year> 1990. </year> <title> Stochastic Plans for Robotic Manipulation. </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: Aspect graphs were first computed by discretizing the set of viewing directions. Recent algorithms take advantage of the fact that, except at critical viewing directions, the occluding contours of an object remain qualitatively (i.e., topologically) the same for small changes in the viewpoint (e.g., see [25]). In <ref> [17] </ref> a criticality-driven approach makes it possible to plan a sensorless sequence of squeezing operations to achieve some specified orientation of a polygonal part independent of its initial orientation. 5 3.
Reference: [18] <author> Hirukawa, H., Matsui, T., and Takase, K. </author> <year> 1991. </year> <title> A General Algorithm for Derivation and Analysis of Constraint for Motion of Polyhedra in Contact. </title> <booktitle> IEEE/RSJ Int. Workshop on Intelligent Robots and Systems, </booktitle> <address> Osaka, </address> <pages> 38-43. </pages>
Reference-contexts: The set of motions dX allowed by this contact is the intersection of all the closed half-spaces n F j J V k dX 0 computed for the vertices V k of the convex hull of the intersection of F i and F j <ref> [18, 49] </ref>. For example, in Fig. 6, the vertices V k are circled. We make the same simplifying assumptions about contacts as in Subsection 5.1.
Reference: [19] <author> Hoffman, R.L. </author> <year> 1991. </year> <title> A Common Sense Approach to Assembly Sequence Planning. </title> <editor> In Homem de Mello, L.S. and Lee, S., editors, </editor> <title> Computer-Aided Mechanical Assembly Planning, </title> <address> Boston, MA: </address> <publisher> Kluwer Academic Publishers, </publisher> <pages> 289-314. </pages>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions [7, 10]. Automated geometric reasoning was later added to answer these questions automatically <ref> [5, 19, 20, 28, 30, 47, 51] </ref>. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. This approach tends to repeat the same geometric computations many times.
Reference: [20] <author> Homem de Mello, L.S. </author> <year> 1989. </year> <title> Task Sequence Planning for Robotic Assembly. </title> <type> PhD Thesis, </type> <institution> Carnegie Mellon University. </institution>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions [7, 10]. Automated geometric reasoning was later added to answer these questions automatically <ref> [5, 19, 20, 28, 30, 47, 51] </ref>. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. This approach tends to repeat the same geometric computations many times. <p> Indeed, the contacts among the parts in the assembled product can be used to quickly filter out many impossible motions. Contact analysis is the basis of much previous work in assembly sequencing (e.g., <ref> [20] </ref>), where it was part of an overall generate-and-test planning approach. This approach recursively partitions an assembly into subassemblies and uses contact analysis to check the feasibility of each decomposition. <p> A graph is strongly connected if it has only one strong component. 9 free to translate relative to P j is a closed cone (possibly a half-space or a single ray) <ref> [20, 48] </ref>. For every pair of parts P i and P j in contact in A, we draw the diameters of S 1 parallel to the two sides of the cone characterizing the local freedom of P i relative to P j .
Reference: [21] <author> Homem de Mello, L.S. and Sanderson, A.C. </author> <year> 1991. </year> <title> Representations of Mechanical Assembly Sequences. </title> <journal> IEEE Tr. on Robotics and Automation, </journal> <volume> 7(2) </volume> <pages> 211-227. </pages>
Reference-contexts: The set of all candidate algorithms can be represented as an and/or graph <ref> [21] </ref> and searched for the shortest one using alpha-beta pruning [38]. But in general, the size of this graph is exponential in the number n of parts. Efficiently computing the minimal length of candidate algorithms, or a bounded approximation of this length, is still an open problem.
Reference: [22] <author> Homem de Mello, L.S. and Lee, S. </author> <title> (editors) 1991. Computer-Aided Mechanical Assembly Planning. </title> <address> Boston, MA: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: However, the high complexity of assembly planning when viewed as a general motion planning problem has led researchers to turn their attention toward a simpler subproblem known as assembly sequence planning, or simply assembly sequencing <ref> [1, 22] </ref>. In this problem, only the constraints (mainly geometric ones) arising from the assembly itself are considered; the manipulation system (e.g., the robots) executing this plan is simply ignored by assuming that the parts composing the assembly are flee-flying objects. The early assembly sequencers were mainly sequence editors.
Reference: [23] <author> Hopcroft, J.E., Schwartz, J.T., and Sharir, M. </author> <year> 1984. </year> <title> On the Complexity of Motion Planning for Multiple Independent Objects: Pspace-Hardness of the `Warehouseman's Problem', </title> <journal> The Int. J. of Robotics Research, </journal> <volume> 3(4) </volume> <pages> 76-88. </pages>
Reference-contexts: Trying to construct and exploit a unique ndbg or collection of ndbgs covering all possible motions would bring us back to the general planning problem of finding a coordinated path for a set of parts. This problem is known to be pspace-hard <ref> [23, 37] </ref> and is strongly believed to require exponential time in the number of parts.
Reference: [24] <author> Joskowicz, L. and Sacks, E. </author> <year> 1991. </year> <title> Computational Kinematics. </title> <journal> Artificial Intelligence, 51(1-3):381-416. </journal> <volume> 29 </volume>
Reference-contexts: The construction of an ndbg is based on the identification of physical criticalities to decompose a continuous set into a finite number of regions that are treated as single entities. This approach relates to the general interests of qualitative physics [11] and, more specifically, qualitative kinematics <ref> [14, 24] </ref>, which studies the internal motions of parts in an operational device. It yields more meaningful decompositions than blind discretizations not based on any sort of criticality (discontinuity, singularity, or event).
Reference: [25] <author> Kriegman, D.J. and Ponce, J. </author> <year> 1990. </year> <title> Computing Exact Aspect Graphs of Curved Objects: Solids of Revolution. </title> <journal> Int. J. of Computer Vision, </journal> <volume> 5(2) </volume> <pages> 119-135. </pages>
Reference-contexts: Aspect graphs were first computed by discretizing the set of viewing directions. Recent algorithms take advantage of the fact that, except at critical viewing directions, the occluding contours of an object remain qualitatively (i.e., topologically) the same for small changes in the viewpoint (e.g., see <ref> [25] </ref>). In [17] a criticality-driven approach makes it possible to plan a sensorless sequence of squeezing operations to achieve some specified orientation of a polygonal part independent of its initial orientation. 5 3.
Reference: [26] <author> Lakshminarayana, K. </author> <year> 1978. </year> <title> The Mechanics of Form Closure. </title> <journal> ASME Paper, </journal> <volume> No. </volume> <month> 78-DET-32. </month>
Reference-contexts: This is achieved by positioning fingers or fixture elements on their boundary. A grasp of a moved set achieves form closure if, when the fingers are locked relative to each other, no part in the moved set can move relative to any other and the fingers <ref> [26, 27] </ref>. (Another concept, involving friction and forces, is that of force closure; we will not discuss it here, though it is perhaps more practical than form closure.) Given some abstract dimensionless model of a finger, e.g., a point-plane contact, a measure of the complexity of an assembly instruction is the
Reference: [27] <author> Latombe, J.C. </author> <year> 1991. </year> <title> Robot Motion Planning. </title> <address> Boston, MA: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: 1. Introduction Reasoning about mechanical assembly (and disassembly) is an important research topic which has attracted interest from researchers in both artificial intelligence [38] and robotics <ref> [27] </ref>. <p> It is more limited in scope than traditional AI planning and focuses specifically on issues raised by the manipulation of physical objects. It has motivated various research in basic path planning, motion planning with uncertainty, manipulation planning with movable objects, and grasp planning <ref> [27] </ref>. However, the high complexity of assembly planning when viewed as a general motion planning problem has led researchers to turn their attention toward a simpler subproblem known as assembly sequence planning, or simply assembly sequencing [1, 22]. <p> We wish to plan an algorithm to make the robot system assemble the product from its individual parts. This problem can be formulated as a manipulation problem whose solution is a path in a large-dimensional space, the composite configuration space of the robot and all the movable parts <ref> [27] </ref>. A point (configuration) in this space fully represents a spatial placement of the robot and the other parts. A solution path describes all the motions that are necessary to construct the assembly. <p> If P i and P j are polygons in 2D (resp. polyhedra in 3D), then P j P i is also a polygon (resp. a polyhedron) <ref> [27, 32] </ref>. Again, let us consider the 3D case with polyhedral parts. B ij is the intersection of S 2 and the polygonal cone of all rays erected from O and intersecting P j P i . <p> This is achieved by positioning fingers or fixture elements on their boundary. A grasp of a moved set achieves form closure if, when the fingers are locked relative to each other, no part in the moved set can move relative to any other and the fingers <ref> [26, 27] </ref>. (Another concept, involving friction and forces, is that of force closure; we will not discuss it here, though it is perhaps more practical than form closure.) Given some abstract dimensionless model of a finger, e.g., a point-plane contact, a measure of the complexity of an assembly instruction is the
Reference: [28] <author> Lee, S. and Shin, Y.G. </author> <year> 1990. </year> <title> Assembly Planning Based on Geometric Reasoning, </title> <journal> Computation and Graphics, </journal> <volume> 14(2) </volume> <pages> 237-250. </pages>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions [7, 10]. Automated geometric reasoning was later added to answer these questions automatically <ref> [5, 19, 20, 28, 30, 47, 51] </ref>. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. This approach tends to repeat the same geometric computations many times.
Reference: [29] <author> Liebermann, L.I. and Wesley, M.A. </author> <year> 1977. </year> <title> Autopass: An Automatic Programming System for Computer Controlled Mechanical Assembly. </title> <journal> IBM J. of Research and Development, </journal> <volume> 21(4) </volume> <pages> 321-333. </pages>
Reference-contexts: A noticeable exception is build [13], which includes a simple treatment of such notions as stability and friction. The interest of AI in general planning is still very high [35]. The geometric approach to assembly planning originated in robotics with the work reported in <ref> [29] </ref> (autopass), [31] (lama), and [45]. It is more limited in scope than traditional AI planning and focuses specifically on issues raised by the manipulation of physical objects. It has motivated various research in basic path planning, motion planning with uncertainty, manipulation planning with movable objects, and grasp planning [27].
Reference: [30] <author> Liu, Y. </author> <year> 1990. </year> <title> Symmetry Groups in Robotic Assembly Planning. </title> <type> PhD Thesis, COINS Tech. Rep. 90-83, </type> <institution> Computer and Information Science Dept., University of Massachusetts, Amherst. </institution>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions [7, 10]. Automated geometric reasoning was later added to answer these questions automatically <ref> [5, 19, 20, 28, 30, 47, 51] </ref>. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. This approach tends to repeat the same geometric computations many times.
Reference: [31] <author> Lozano-Perez, T. </author> <year> 1976. </year> <title> The Design of a Mechanical Assembly System. </title> <type> Tech. Rep. </type> <institution> AI-TR 397, AI Lab., MIT. </institution>
Reference-contexts: A noticeable exception is build [13], which includes a simple treatment of such notions as stability and friction. The interest of AI in general planning is still very high [35]. The geometric approach to assembly planning originated in robotics with the work reported in [29] (autopass), <ref> [31] </ref> (lama), and [45]. It is more limited in scope than traditional AI planning and focuses specifically on issues raised by the manipulation of physical objects. It has motivated various research in basic path planning, motion planning with uncertainty, manipulation planning with movable objects, and grasp planning [27].
Reference: [32] <author> Lozano-Perez, T. </author> <year> 1983. </year> <title> Spatial Planning: A Configuration Space Approach, </title> <journal> IEEE Tr. on Computers, </journal> <volume> 32(2) </volume> <pages> 108-120. </pages>
Reference-contexts: If P i and P j are polygons in 2D (resp. polyhedra in 3D), then P j P i is also a polygon (resp. a polyhedron) <ref> [27, 32] </ref>. Again, let us consider the 3D case with polyhedral parts. B ij is the intersection of S 2 and the polygonal cone of all rays erected from O and intersecting P j P i .
Reference: [33] <author> Lozano-Perez, T. and Wilson, R.H. </author> <year> 1992. </year> <title> Assembly Sequencing. </title> <note> In preparation. </note>
Reference-contexts: Ndbgs for infinite generalized motions and, more generally, sequences of extended motions along different directions could be investigated as well. The investigation for sequences of extended translations is under way in <ref> [33] </ref>. It leads to partitioning the composite configuration space C A of the parts in A into regions 17 over which all the relative placements of the parts induce the same ndbgs for in-finitesimal translations. This construct yields a collection of ndbgs distributed over regions of C A .
Reference: [34] <author> Markenscoff, X., Ni, L., and Papadimitriou, C.H. </author> <year> 1990. </year> <title> The Geometry of Grasping. </title> <journal> The Int. J. of Robotics Research, </journal> <volume> 9(1) </volume> <pages> 61-74. </pages>
Reference-contexts: The higher the degree of form-closure, the safer the grasp. The number of fingers to achieve form-closure grasps for a single rigid part (equivalently, form-closure of order 0 for a set of parts) is investigated in several papers, including <ref> [34, 36] </ref>. There exist other pertinent measures of complexity. For example, uncertainties may also play an important role in assembly instructions, requiring sensors to be used. The number of elementary sensors (e.g., plane probe, diameter sensors) may also be used as a measure of product complexity.
Reference: [35] <author> McDermott, D.V. </author> <year> 1992. </year> <title> Robot Planning. AI Magazine, </title> <publisher> AAAI Press, </publisher> <pages> 13(2) 55-79. </pages>
Reference-contexts: A noticeable exception is build [13], which includes a simple treatment of such notions as stability and friction. The interest of AI in general planning is still very high <ref> [35] </ref>. The geometric approach to assembly planning originated in robotics with the work reported in [29] (autopass), [31] (lama), and [45]. It is more limited in scope than traditional AI planning and focuses specifically on issues raised by the manipulation of physical objects.
Reference: [36] <author> Mishra, B., Schwartz, J.T., and Sharir, M. </author> <year> 1987. </year> <title> On the Existence and Synthesis of Multifinger Positive Grips. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 541-558. </pages>
Reference-contexts: The higher the degree of form-closure, the safer the grasp. The number of fingers to achieve form-closure grasps for a single rigid part (equivalently, form-closure of order 0 for a set of parts) is investigated in several papers, including <ref> [34, 36] </ref>. There exist other pertinent measures of complexity. For example, uncertainties may also play an important role in assembly instructions, requiring sensors to be used. The number of elementary sensors (e.g., plane probe, diameter sensors) may also be used as a measure of product complexity.
Reference: [37] <author> Natarajan, B.K. </author> <year> 1988. </year> <title> On Planning Assemblies. </title> <booktitle> ACM Symp. on Computational Geometry, </booktitle> <pages> 299-308. </pages>
Reference-contexts: Trying to construct and exploit a unique ndbg or collection of ndbgs covering all possible motions would bring us back to the general planning problem of finding a coordinated path for a set of parts. This problem is known to be pspace-hard <ref> [23, 37] </ref> and is strongly believed to require exponential time in the number of parts. <p> A product is p-handed if all correct assembly algorithms for this product are m-handed, with m p, and at least one is p-handed. A p-handed product requires p moving "hands" to be (dis)assembled, in addition to a fixed one (e.g., a vise). It is shown in <ref> [37] </ref> that an assembly made of n parts may require up to n 1 moving hands to be assembled (i.e., the assembly can only be built by moving every part relative to all the other parts simultaneously).
Reference: [38] <author> Nilsson, N.J. </author> <year> 1980. </year> <booktitle> Principles of Artificial Intelligence, </booktitle> <address> Los Altos, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1. Introduction Reasoning about mechanical assembly (and disassembly) is an important research topic which has attracted interest from researchers in both artificial intelligence <ref> [38] </ref> and robotics [27]. <p> All other notations are defined and used locally. 3 2. Related Work The automatic planning of assembly and disassembly operations has attracted the interest of AI researchers for a long time. The classical blocks world can be seen as a primitive assembly planning domain <ref> [15, 38] </ref>. Moreover, some AI planners have considered more complex domains. For instance, noah [42] was originally aimed at supplying instructions to a human apprentice to repair an air compressor, including disassembly and assembly plans. <p> The set of all candidate algorithms can be represented as an and/or graph [21] and searched for the shortest one using alpha-beta pruning <ref> [38] </ref>. But in general, the size of this graph is exponential in the number n of parts. Efficiently computing the minimal length of candidate algorithms, or a bounded approximation of this length, is still an open problem.
Reference: [39] <author> Pollack, R., Sharir, M., and Sifrony, S. </author> <year> 1988. </year> <title> Separating Two Simple Polygons by a Sequence of Translations, </title> <journal> Discrete and Computational Geometry, </journal> <volume> 3 </volume> <pages> 123-136. </pages>
Reference-contexts: An algorithm to construct a sequence of translations separating two polygonal parts is given in <ref> [39] </ref>. Several techniques presented in this paper have been influenced by the work in computational geometry. The construction of an ndbg is based on the identification of physical criticalities to decompose a continuous set into a finite number of regions that are treated as single entities.
Reference: [40] <author> Preparata, </author> <title> F.P. and Shamos, </title> <address> M.I. </address> <year> 1985. </year> <title> Computational Geometry: An Introduction. </title> <address> New York, NY:Springer-Verlag. </address> <month> 30 </month>
Reference-contexts: Its convex hull is constructed in fi (v i v j log v i v j ) time <ref> [40] </ref> and has O (v i + v j ) vertices. Indeed, all the intersection vertices of F i " F j lie on edges of F i and F j , but each particular edge can contribute at most two vertices of the convex hull.
Reference: [41] <author> Reif, J.H. </author> <year> 1979. </year> <title> Complexity of the Mover's Problem and Generalizations. </title> <booktitle> 20th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> 421-427. </pages>
Reference: [42] <author> Sacerdoti, E.D. </author> <year> 1977. </year> <title> A Structure for Plans and Behavior. </title> <publisher> Amsterdam: Elsevier. </publisher>
Reference-contexts: Related Work The automatic planning of assembly and disassembly operations has attracted the interest of AI researchers for a long time. The classical blocks world can be seen as a primitive assembly planning domain [15, 38]. Moreover, some AI planners have considered more complex domains. For instance, noah <ref> [42] </ref> was originally aimed at supplying instructions to a human apprentice to repair an air compressor, including disassembly and assembly plans.
Reference: [43] <author> Scheinman, R. </author> <year> 1988. </year> <title> RobotWorld: A Multiple Robot Vision Guided Assembly System. </title> <editor> In Bolles, R.C. and Roth, B., editors, </editor> <booktitle> Robotics Research, </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <pages> 23-27. </pages>
Reference-contexts: The generate-and-test algorithm was stopped after failing to find any candidate instructions for the friction-testing machine in two days. Assembly sequences generated for the electric bell were converted into robot programs executed by a RobotWorld system <ref> [43] </ref>. 7. Complexity of an Assembly The outcome of assembly planning, i.e., assembly algorithms, can be used to specify, select, design, and/or program the manipulation systems that will execute these algorithms.
Reference: [44] <author> Subramani, A. </author> <year> 1992. </year> <title> Development of a Design for Service Methodology. </title> <type> PhD Thesis, </type> <institution> Dept. of Industrial and Manufacturing Engineering, The University of Rhode Island, Kingston, RI. </institution>
Reference-contexts: This goal is still valuable, especially for rapid prototyping and even mass production. Recently, however, the interest has shifted toward generating assembly sequences to evaluate assembly designs and help designers create products that are easier to manufacture <ref> [44, 48] </ref>. In this new context, automated geometric reasoning and computational efficiency of assembly planning are critical issues that must be thoroughly explored. The synthesis of pertinent information to feed back to designers is another important issue.
Reference: [45] <author> Taylor, R.H. </author> <year> 1976. </year> <title> Synthesis of Manipulator Control Programs from Task-Level Specifications. </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, Stanford University. </institution>
Reference-contexts: A noticeable exception is build [13], which includes a simple treatment of such notions as stability and friction. The interest of AI in general planning is still very high [35]. The geometric approach to assembly planning originated in robotics with the work reported in [29] (autopass), [31] (lama), and <ref> [45] </ref>. It is more limited in scope than traditional AI planning and focuses specifically on issues raised by the manipulation of physical objects. It has motivated various research in basic path planning, motion planning with uncertainty, manipulation planning with movable objects, and grasp planning [27].
Reference: [46] <author> Toussaint, G.T. </author> <year> 1985. </year> <title> Movable Separability of Sets. </title> <editor> In Toussaint, G.T., editor, </editor> <booktitle> Computational Geometry. </booktitle> <address> Amsterdam: </address> <publisher> Elsevier. </publisher>
Reference-contexts: It derives in part from informal complexity measures currently in use in several companies (e.g., see [6]). The field of computational geometry has also explored issues relevant to assembly planning, for example, set separation problems <ref> [46] </ref>. Given a 2D polygonal assembly A, the problem of deciding whether there is a direction d and a subassembly S A such that a translation along d separates S from the rest of A is addressed in [4].
Reference: [47] <author> Wilson, R.H. and Rit, J.F. </author> <year> 1990. </year> <title> Maintaining Geometric Dependencies in an Assembly Planner. </title> <booktitle> IEEE Int. Conf. on Robotics and Automation, </booktitle> <address> Scottsdale, AZ, </address> <pages> 890-895. </pages>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions [7, 10]. Automated geometric reasoning was later added to answer these questions automatically <ref> [5, 19, 20, 28, 30, 47, 51] </ref>. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. This approach tends to repeat the same geometric computations many times. <p> This approach tends to repeat the same geometric computations many times. Mechanisms for saving and reusing previous computations, such as the "precedence expressions" <ref> [47] </ref>, have been proposed to overcome this drawback, but with limited success. In practice, the generate-and-test paradigm remains relatively inefficient (it takes time exponential in the number of parts) and is applicable only to assemblies with few parts. The ndbg avoids this combinato 4 rial trap.
Reference: [48] <author> Wilson, R.H. </author> <year> 1992. </year> <title> On Geometric Assembly Planning. </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, Stanford University. </institution>
Reference-contexts: This goal is still valuable, especially for rapid prototyping and even mass production. Recently, however, the interest has shifted toward generating assembly sequences to evaluate assembly designs and help designers create products that are easier to manufacture <ref> [44, 48] </ref>. In this new context, automated geometric reasoning and computational efficiency of assembly planning are critical issues that must be thoroughly explored. The synthesis of pertinent information to feed back to designers is another important issue. <p> A graph is strongly connected if it has only one strong component. 9 free to translate relative to P j is a closed cone (possibly a half-space or a single ray) <ref> [20, 48] </ref>. For every pair of parts P i and P j in contact in A, we draw the diameters of S 1 parallel to the two sides of the cone characterizing the local freedom of P i relative to P j . <p> If these contacts are not given explicitly they can be easily inferred from the spatial relations among the parts in quadratic time in the total number of vertices of the parts <ref> [48] </ref>. Let n be the number of parts in A and c the total number of edge contacts. We represent each dbg as an n fi n adjacency matrix. Under the above assumptions, the partition of S 1 is obtained by drawing the diameters parallel to all edge contacts. <p> This set 11 contains all correct assembly algorithms; it may also contain incorrect algorithms, since global accessibility constraints were not considered to compute the ndbg. Hence the assembly algorithms given by (A) must be validated by further tests (not described here; see <ref> [48] </ref>). These tests operate on assembly operations; therefore each instruction in an assembly algorithm should be validated before constructing the rest of the algorithm. Since (A) allows the direct generation of instructions satisfying local freedom constraints, the number of additional tests required is usually relatively small. <p> The set of all candidate partitionings of A for some direction d is computed in O (ru) output-sensitive time by reducing G (d; A) to the acyclic graph of its strong components (see <ref> [48] </ref>). The set of all candidate partitionings of A is computed in O (r 2 u) time. 4.5. Computing Variant One can notice that there is little or no change between the dbgs of two adjacent regular regions. <p> Other Blocking Graphs The notion of an ndbg introduced in the previous section admits several extensions and variants. We present some of them below. See <ref> [48] </ref> for more detail. 5.1. 3D Assemblies The ndbg for infinitesimal translations can be easily extended to 3D assemblies made of polyhedral parts. <p> Implementation We have implemented the algorithms constructing the ndbgs for infinitesimal and infinite translations both in 2D and 3D <ref> [48] </ref>. In 3D our implementation allows parts with planar, cylindrical, and some helicoidal faces. For infinitesimal generalized motions, we have implemented a hybrid algorithm that has the same time complexity as the translational version. <p> The set of suggested generalized motions is incomplete but accounts for most motions required 18 by actual assembly products. Our programs are written in CommonLisp as part of a larger assembly sequencing system <ref> [48] </ref> and run on a DEC 5000 workstation. We have used the ndbgs to compute candidate partitionings of assemblies and construct candidate assembly algorithms. <p> The class of 1-handed products is thus an important one. Let a subassembly be any subset of parts in their final relative positions. An assembly algorithm is monotonic if each of its instructions merges the corresponding moved sets into a subassembly <ref> [48, 51] </ref>. A product is p-handed monotonic if it admits a p-handed monotonic assembly algorithm. For example, the 3-part latch assembly shown in Fig. 10 is not 1-handed monotonic, but is 2-handed monotonic.
Reference: [49] <author> Wilson, R.H. and Matsui, T. </author> <year> 1992. </year> <title> Partitioning an Assembly for Infinitesimal Motions in Translation and Rotation. </title> <booktitle> IEEE Int. Conf. on Intelligent Robots and Systems, </booktitle> <address> Raleigh, NC, </address> <pages> 1311-1318. </pages>
Reference-contexts: The set of motions dX allowed by this contact is the intersection of all the closed half-spaces n F j J V k dX 0 computed for the vertices V k of the convex hull of the intersection of F i and F j <ref> [18, 49] </ref>. For example, in Fig. 6, the vertices V k are circled. We make the same simplifying assumptions about contacts as in Subsection 5.1.
Reference: [50] <author> Wilson, R.H. and Latombe, J.C. </author> <year> 1992. </year> <title> On the Qualitative Structure of a Mechanical Assembly. </title> <booktitle> AAAI-92 Nat. Conf. on Artificial Intelligence, </booktitle> <address> San Jose, CA, </address> <pages> 697-702. </pages>
Reference: [51] <author> Wolter, J.D. </author> <year> 1988. </year> <title> On the Automatic Generation of Plans for Mechanical Assembly. </title> <type> PhD thesis, </type> <institution> The University of Michigan. </institution>
Reference-contexts: The early assembly sequencers were mainly sequence editors. Geometric reasoning was supplied by a human who answered questions asked by the computer systems; the assembly sequences were inferred from the answers to these questions [7, 10]. Automated geometric reasoning was later added to answer these questions automatically <ref> [5, 19, 20, 28, 30, 47, 51] </ref>. This development resulted in generate-and-test assembly sequencers, with a module guessing candidate sequences and generating questions to check their feasibility, and geometric reasoning modules answering these questions. This approach tends to repeat the same geometric computations many times. <p> The class of 1-handed products is thus an important one. Let a subassembly be any subset of parts in their final relative positions. An assembly algorithm is monotonic if each of its instructions merges the corresponding moved sets into a subassembly <ref> [48, 51] </ref>. A product is p-handed monotonic if it admits a p-handed monotonic assembly algorithm. For example, the 3-part latch assembly shown in Fig. 10 is not 1-handed monotonic, but is 2-handed monotonic.
Reference: [52] <author> Wolter, J., Chakrabarty, S., and Tsao, J. </author> <year> 1992. </year> <title> Mating Constraint Languages for Assembly Sequence Planning. </title> <booktitle> IEEE Int. Conf. on Robotics and Automation, Nice, France, </booktitle> <pages> 2367-2374. 31 </pages>
References-found: 51

