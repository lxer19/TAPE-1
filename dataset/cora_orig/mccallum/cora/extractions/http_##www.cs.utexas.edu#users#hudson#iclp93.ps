URL: http://www.cs.utexas.edu/users/hudson/iclp93.ps
Refering-URL: http://www.cs.utexas.edu/users/hudson/papers.html
Root-URL: 
Email: hudson@cs.utexas.edu  
Title: A Monotonicity Theorem for Extended Logic Programs  
Author: Hudson Turner 
Address: Austin, TX 78712, USA  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: Because general and extended logic programs behave nonmonotonically, it is in general difficult to predict how even minor changes to such programs will affect their meanings. This paper shows that for a restricted class of extended logic programs | those with signings | it is possible to state a fairly general theorem comparing the entailments of programs. To this end, we generalize (to the class of extended logic programs) the definition of a signing, first formulated by Kunen for general programs, and establish a theorem characterizing a restricted monotonicity property for signed extended programs. The theorem is formulated in terms of simple syntactic criteria on pairs of programs. To demonstrate the usefulness of this result, we use it to compare the strengths of two families of extended logic programs for commonsense reasoning about action. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Krzysztof Apt and Marc Bezem. </author> <title> Acyclic programs. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proc. of the Seventh Int'l Conf., </booktitle> <pages> pages 617-633, </pages> <year> 1990. </year>
Reference-contexts: Their work is presented in part as an extension of work by Apt and Bezem <ref> [1] </ref> on representing properties of actions in general logic programs. <p> Their work is presented in part as an extension of work by Apt and Bezem <ref> [1] </ref> (among others) on representing properties of actions in general logic programs.
Reference: [2] <author> Phan Minh Dung. </author> <title> On the relations between stable and well-founded semantics of logic programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 105 </volume> <pages> 7-25, </pages> <year> 1992. </year>
Reference-contexts: Our notion of entailment is based on the answer set semantics [5] (which, in the absence of classical negation, is also known as the "stable model" semantics [4]). Dung <ref> [2] </ref> has proved that, for signed general programs, answer set semantics and well-founded semantics [11] yield the same (positive) en-tailments. In the next section, we define the notion of a signing for extended logic programs, that is, programs using both negation as failure and classical negation. <p> As we will see, this characterization facilitates the proof of Theorem 1. In fact, these are the two most important answer sets of a signed general program , in the sense that entails exactly their intersection. So we see, as has been established previously in <ref> [2] </ref>, that a signed general program entails exactly the ground atoms included in WF ? (). 5 Theorem 2 also provides an unusually direct proof of another previously established result: a signed general logic program has at least one answer set. <p> That is, all ground instances of the appropriate sorts in the language of D. 5. Dung <ref> [2] </ref> proved this for a larger class of general programs | the bottom--stratified & top-strict programs | which subsumes the signed general programs. 6. The class of order-consistent programs was first defined by Sato in [9], where it is shown that such programs have a consistent completion. <p> The class of order-consistent programs was first defined by Sato in [9], where it is shown that such programs have a consistent completion. Fages' proof in [3] relies crucially on Sato's result in completion semantics. <ref> [2] </ref> includes a similar, somewhat less general, result. Acknowledgments My profound thanks to Vladimir Lifschitz for fundamentally enabling this work. Thanks to Norman McCain for careful reading and comments on a draft of this paper. Thanks also to one of the anonymous referees for several useful, specific criticisms and questions.
Reference: [3] <author> Fran~cois Fages. </author> <title> Consistency of Clark's completion and existence of stable models. </title> <type> Technical report, </type> <institution> Ecole Normale Superieure, </institution> <year> 1990. </year> <note> To appear in Methods of Logic in Computer Science. </note>
Reference-contexts: In particular, it turns out that lfp () corresponds to WF ? () [ (WF &gt; () " S), and gfp () corresponds to WF ? () [ (WF &gt; () " S). In <ref> [3] </ref>, Fages establishes the existence of answer sets for a much larger class of general logic programs. <p> The class of order-consistent programs was first defined by Sato in [9], where it is shown that such programs have a consistent completion. Fages' proof in <ref> [3] </ref> relies crucially on Sato's result in completion semantics. [2] includes a similar, somewhat less general, result. Acknowledgments My profound thanks to Vladimir Lifschitz for fundamentally enabling this work. Thanks to Norman McCain for careful reading and comments on a draft of this paper.
Reference: [4] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <editor> In Robert Kowalski and Kenneth Bowen, editors, </editor> <booktitle> Logic Programming: Proc. of the Fifth Int'l Conf. and Symp., </booktitle> <pages> pages 1070-1080, </pages> <year> 1988. </year>
Reference-contexts: Our notion of entailment is based on the answer set semantics [5] (which, in the absence of classical negation, is also known as the "stable model" semantics <ref> [4] </ref>). Dung [2] has proved that, for signed general programs, answer set semantics and well-founded semantics [11] yield the same (positive) en-tailments. In the next section, we define the notion of a signing for extended logic programs, that is, programs using both negation as failure and classical negation. <p> Thus, by Theorem 1, D entails at least every ground literal in S that is entailed by forward D . 2 4 Answer Set and Well-Founded Semantics We exploit in this paper the close relationship between the answer set semantics for general logic programs <ref> [4] </ref> and the well-founded semantics for general logic programs [11]. This section restates in a form convenient for our purposes a number of previously-known results in the declarative semantics of general logic programs. At the close of this section, we state a new result for signed general programs.
Reference: [5] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Logic programs with classical negation. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proc. of the Seventh Int'l Conf., </booktitle> <pages> pages 579-597, </pages> <year> 1990. </year>
Reference-contexts: Furthermore, when we subtract from the bodies of rules in S or add to the bodies of rules in S , again becomes stronger in S. Our notion of entailment is based on the answer set semantics <ref> [5] </ref> (which, in the absence of classical negation, is also known as the "stable model" semantics [4]). Dung [2] has proved that, for signed general programs, answer set semantics and well-founded semantics [11] yield the same (positive) en-tailments.
Reference: [6] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year>
Reference-contexts: Proof. Immediate by the definitions and Proposition 2 of <ref> [6] </ref>. 2 Lemma 8 Let be an extended program with signing S. Program is consistent iff LB () "S is consistent. Proof. Let A + be the set WF ? ( + ) [ (WF &gt; ( + ) " S).
Reference: [7] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Representing actions in ex-tended logic programming. </title> <editor> In Krzysztof Apt, editor, </editor> <booktitle> Proc. Joint Int'l Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 559-573, </pages> <year> 1992. </year>
Reference-contexts: This definition of a signing for extended programs extends Kunen's definition of a signing for general programs. In fact, the particular example motivating this work involves classical negation. In the paper "Representing Actions in Extended Logic Programming", Gelfond and Lifschitz <ref> [7] </ref> introduce a simple declarative language for describing actions, called A; and they propose a modular translation from A into the language of extended logic programming. <p> programs, the set S = fa; :a; cg would be a common signing for programs P and Q, in which case the monotonicity theorem would be falsified. 3 Restricted Monotonicity in Logic Programs for Commonsense Reasoning About Action In the paper "Representing Actions in Extended Logic Programming", Gel-fond and Lifschitz <ref> [7] </ref> introduce a simple declarative language for describing actions, called A; and they propose a modular translation from A into the language of extended logic programming. <p> We will briefly describe the syntax of A. As for the semantics of A, we simply remark that they are based in a straightforward manner on deterministic finite automata, and that the results of this semantics are generally intuitive. (See <ref> [7] </ref> for the full story.) Begin with two disjoint non-empty sets of symbols, called fluent names and action names. A fluent expression is a fluent name possibly preceded by :. <p> A closely related proof of the existence of answer sets for signed general programs is presented in <ref> [7] </ref>. There the authors define a monotone operator associated with each signed general program and show that every fixpoint of corresponds to an answer set for . <p> And since literals (P ) " S literals (Q) " S, the theorem is proved for the case when program Q is not consistent. 2 Notes 1. This is slightly different from the original definition in [8]. 2. In <ref> [7] </ref>, the soundness of D is proved with respect to the semantics of A for consistent domain descriptions D without similar effect-propositions, where two effect-propositions are similar if they differ only in their preconditions.
Reference: [8] <author> Kenneth Kunen. </author> <title> Signed data dependencies in logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 7(3) </volume> <pages> 231-245, </pages> <year> 1989. </year>
Reference-contexts: Of course this is not surprising: we lose atom d because d "depends negatively" on f , and we don't lose atom b because b "depends positively" on f . The notion of a signing, defined by Kunen in <ref> [8] </ref> for general programs, makes this idea precise. Let be a general logic program (that is, a program that includes negation as failure but not classical negation). <p> And since literals (P ) " S literals (Q) " S, the theorem is proved for the case when program Q is not consistent. 2 Notes 1. This is slightly different from the original definition in <ref> [8] </ref>. 2. In [7], the soundness of D is proved with respect to the semantics of A for consistent domain descriptions D without similar effect-propositions, where two effect-propositions are similar if they differ only in their preconditions.
Reference: [9] <author> Taisuke Sato. </author> <title> Completed logic programs and their consistency. </title> <journal> Journal of Logic Programming, </journal> <volume> 9 </volume> <pages> 33-44, </pages> <year> 1990. </year>
Reference-contexts: Dung [2] proved this for a larger class of general programs | the bottom--stratified & top-strict programs | which subsumes the signed general programs. 6. The class of order-consistent programs was first defined by Sato in <ref> [9] </ref>, where it is shown that such programs have a consistent completion. Fages' proof in [3] relies crucially on Sato's result in completion semantics. [2] includes a similar, somewhat less general, result. Acknowledgments My profound thanks to Vladimir Lifschitz for fundamentally enabling this work.
Reference: [10] <author> Alfred Tarski. </author> <title> A lattice-theoretical fixpoint theorem and its applications. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 5 </volume> <pages> 285-309, </pages> <year> 1955. </year>
Reference-contexts: Let X = ff X . Observe that the answer sets of can be characterized as the fixpoints of . It is easy to see that is anti-monotone. Consequently, 2 is monotone. Because 2 is monotone, we know by the Knaster-Tarski theorem <ref> [10] </ref> that 2 has a least fixpoint, lfp ( 2 ), and a greatest fixpoint, gfp ( 2 ). Let WF ? () denote lfp ( 2 ); and let WF &gt; () denote gfp ( 2 ).
Reference: [11] <author> Allen Van Gelder, Kenneth Ross, and John Schlipf. </author> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of ACM, </journal> <pages> pages 221-230, </pages> <year> 1990. </year>
Reference-contexts: Our notion of entailment is based on the answer set semantics [5] (which, in the absence of classical negation, is also known as the "stable model" semantics [4]). Dung [2] has proved that, for signed general programs, answer set semantics and well-founded semantics <ref> [11] </ref> yield the same (positive) en-tailments. In the next section, we define the notion of a signing for extended logic programs, that is, programs using both negation as failure and classical negation. This definition of a signing for extended programs extends Kunen's definition of a signing for general programs. <p> 1, D entails at least every ground literal in S that is entailed by forward D . 2 4 Answer Set and Well-Founded Semantics We exploit in this paper the close relationship between the answer set semantics for general logic programs [4] and the well-founded semantics for general logic programs <ref> [11] </ref>. This section restates in a form convenient for our purposes a number of previously-known results in the declarative semantics of general logic programs. At the close of this section, we state a new result for signed general programs. In this section, stands for any general logic program.
References-found: 11

