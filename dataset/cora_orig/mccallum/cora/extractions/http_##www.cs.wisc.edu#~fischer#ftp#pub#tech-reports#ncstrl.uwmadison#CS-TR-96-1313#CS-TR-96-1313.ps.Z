URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-96-1313/CS-TR-96-1313.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-96-1313/
Root-URL: http://www.cs.wisc.edu
Title: On the Performance of an Array-Based ADT for OLAP Workloads  
Author: Yihong Zhao Kristin Tufte Jeffrey F. Naughton 
Date: May 6, 1996  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: There is currently a raging debate among OLAP vendors on the best way to provide OLAP functionality: Relational OLAP (ROLAP) vendors advocate using sophisticated front ends to provide a multidimensional view of a standard relational database, whereas Multidimensional OLAP (MOLAP) vendors provide custom servers that generally store their data as arrays (instead of tables.) An important question in this debate is the relative performance of arrays vs. tables for common OLAP operations. To shed some light on this question, we have implemented a MOLAP Abstract Data Type (ADT), which uses a multidimensional array as its principle storage mechanism, within the Paradise object-relational DBMS. Using this implementation, we have studied MOLAP and ROLAP performance on the same DBMS platform (by using either the MOLAP ADT or standard relational tables.) In particular, we have compared a new MOLAP consolidation algorithm with three ROLAP consolidation algorithms, and found that our MOLAP implementation significantly outperforms ROLAP both in terms of disk storage and query execution time. This suggests that the ADT mechanism of object-relational database systems is useful for constructing hybrid solutions that provide the benefits of both ROLAP and MOLAP systems.
Abstract-found: 1
Intro-found: 1
Reference: [Fin] <author> Richard Finkelstein. </author> <title> Understanding the Need for On-Line Analytical Servers, Richard Finkelstein, President, Performance Computing, </title> <publisher> Inc. </publisher> <address> "http://www.arborsoft.com/papers/finkTOC.html" </address>
Reference-contexts: tables are not as natural or efficient as the MOLAP storage structures for storing multidimensional data; and 2) the complex functionality required by OLAP is mismatched with the SQL interface provided by RDBMSs, sometimes forcing complex OLAP functions to be executed in a specialized front end outside the database server <ref> [Fin] </ref>. Which architecture is better suited to meet the analytical needs of OLAP consumers? An important piece of this puzzle is the performance of ROLAP tables versus MOLAP arrays on common OLAP operations, such as consolidation.
Reference: [Codd93] <author> E.F. Codd, </author> <title> S.B. Codd, and C.T. Salley. Providing OLAP (On-line Analytical Processing) to User-Analysts: An IT Mandate, </title> <type> White Paper, </type> <institution> E.F. Codd and Associates. </institution> <note> "http://www.arborsoft.com/papers/coddTOC.html" </note>
Reference: [DKLPY94] <author> D. J. DeWitt, N. Kabra, J. Luo, J.M. Patel, and J. Yu. </author> <title> "Client-Server Paradise". </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <year> 1994 </year>
Reference-contexts: To address this issue, we have designed a MOLAP Abstract Data Type (ADT) and implemented it within the Paradise object-relational database system <ref> [DKLPY94] </ref>. <p> Tiling, on the other hand, breaks an n-dimensional array into n-dimensional tiles and stores each tile as an object on disk. This helps keep elements that are close together in the array close together on disk, which improves access times <ref> [DKLPY94] </ref> [SS94]. The Paradise multidimensional array also implements compression on a tile by tile basis using the LZW algorithm [Wel84] to further improve performance. 4.2 Storage Efficiency Multidimensional arrays are clearly efficient for storing dense data.
Reference: [Kenan] <author> Kenan Technologies. </author> <title> Guide to OLAP Terminology, Kenan System, </title> <address> Cambridge, MA. "http://www.kenan.com/acumate/olaptrms.html" </address>
Reference-contexts: This section describes the most important of these operations, including consolidation, drill down, selection, and slicing and dicing <ref> [Kenan] </ref>. Consolidation Consolidation involves the aggregation of data over one or more dimension hierarchies or formulaic relationships within a dimension. While they are often as simple as summations, consolidations can involve complicated mathematical and statistical functions such as expected value and correlation.
Reference: [SAT95] <author> M.J.Salyor, M.G.Achaya, and R.G.Trenkamp. </author> <title> True Relational OLAP: The Future of Decision Support, </title> <journal> Database Journal, </journal> <note> Dec 1995, p.38. "http://www.strategy.com/tro dbj.html" 24 </note>
Reference-contexts: ROLAP vendors find several faults with the MOLAP architecture. They argue that MOLAP systems do not effectively support ad-hoc querying, do not scale up to large data sizes, and do not conform to an existing open architecture (as RDBMSs do) <ref> [SAT95] </ref>. On the other side, MOLAP vendors criticize ROLAP systems for taking an inherently multidimensional data set and flattening it into two-dimensional relational tables. <p> Finally, ROLAP systems can scale up to the large data set sizes required for enterprise solutions by using parallel RDBMS technology. MOLAP systems currently can not scale beyond say 20-30 gigabyte data 8 sets <ref> [SAT95] </ref>, since parallel MOLAP technology has not yet been developed. 4 MOLAP ADT In this section, we describe the design and implementation of a MOLAP ADT which integrates a multidimensional OLAP storage structure into the Paradise database system.
Reference: [SS94] <author> Sunita Sarawagi, Michael Stonebraker, </author> <title> "Efficient Organization of Large Multidimensional Arrays". </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering, </booktitle> <address> Houston, TX, </address> <month> February </month> <year> 1994 </year>
Reference-contexts: Tiling, on the other hand, breaks an n-dimensional array into n-dimensional tiles and stores each tile as an object on disk. This helps keep elements that are close together in the array close together on disk, which improves access times [DKLPY94] <ref> [SS94] </ref>. The Paradise multidimensional array also implements compression on a tile by tile basis using the LZW algorithm [Wel84] to further improve performance. 4.2 Storage Efficiency Multidimensional arrays are clearly efficient for storing dense data.
Reference: [Wel84] <author> T.A. </author> <title> Welch "A Technique for High-Performance Data Compression". </title> <journal> IEEE Computer, </journal> <volume> 17(6), </volume> <year> 1984. </year>
Reference-contexts: This helps keep elements that are close together in the array close together on disk, which improves access times [DKLPY94] [SS94]. The Paradise multidimensional array also implements compression on a tile by tile basis using the LZW algorithm <ref> [Wel84] </ref> to further improve performance. 4.2 Storage Efficiency Multidimensional arrays are clearly efficient for storing dense data.
References-found: 7

