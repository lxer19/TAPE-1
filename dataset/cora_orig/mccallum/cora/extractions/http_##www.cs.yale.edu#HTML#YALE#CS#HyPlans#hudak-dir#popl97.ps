URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/popl97.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-paul.html
Root-URL: http://www.cs.yale.edu
Email: fchen-chih-ping,hudakg@cs.yale.edu  
Title: Rolling Your Own Mutable ADT A Connection between Linear Types and Monads  
Author: Chih-Ping Chen and Paul Hudak 
Address: New Haven, CT 06520  
Affiliation: Yale University Department of Computer Science  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Z. Ariola, M. Felleisen, J. Maraist, M. Odersky, and P. Wadler. </author> <title> A call-by-need lambda calculus. </title> <booktitle> In Proc. 22nd ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 233-241, </pages> <address> New York, </address> <month> January </month> <year> 1995. </year> <note> ACM Press. </note>
Reference: [2] <author> E. Barendsen and S. Smetsers. </author> <title> Conventional and uniqueness typing in graph rewrite systems (extended abstract). </title> <booktitle> In Proc. 13th Conference on the Foundations of Software Technology & Theoretical Computer Science, </booktitle> <address> Bombay, India, </address> <year> 1993. </year>
Reference: [3] <author> A. Filinski. </author> <title> Declarative continuations: An investigation of duality in programming language semantics. </title> <editor> In D. H. Pitt, editor, </editor> <booktitle> Category Theory and Computer Science, </booktitle> <pages> pages 224-249. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year> <note> (Lect. Notes in Comp. Science Vol. 389). </note>
Reference: [4] <author> J. Guzman and P. Hudak. </author> <title> Single-threaded polymorphic lambda calculus. </title> <booktitle> In Proc. Symposium on Logic in Computer Science, </booktitle> <pages> pages 333-343. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference: [5] <author> J.C. Guzman. </author> <title> On Expressiong the Mutation of State in a Functional Programming Language. </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <year> 1993. </year> <month> 10 </month>
Reference: [6] <author> S. Holmstrom. </author> <title> A linear functional language. </title> <booktitle> In Proc. the Workshop on the Implementation of Lazy Functional Languages, PMG Report 53, </booktitle> <pages> pages 13-32, </pages> <year> 1988. </year>
Reference: [7] <author> P. Hudak. </author> <title> Mutable abstract datatypes or- how to have your state and munge it too. </title> <institution> Research Report YALEU/DCS/RR-914, Yale University, Department of Computer Science, </institution> <month> December </month> <year> 1992. </year>
Reference: [8] <editor> P. Hudak, S. Peyton Jones, and P. Wadler (editors). </editor> <title> Report on the Programming Language Haskell, A Non-strict Purely Functional Language (Version 1.2). </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference: [9] <author> Y. Lafont. </author> <title> The linear abstract machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 59 </volume> <pages> 157-180, </pages> <year> 1988. </year>
Reference: [10] <author> J. Launchbury. </author> <title> A natural semantics for lazy evaluation. </title> <booktitle> In Proc. 20th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 144-154, </pages> <address> New York, </address> <month> January </month> <year> 1993. </year> <note> ACM Press. </note>
Reference: [11] <author> J. Launchbury and S. Peyton Jones. </author> <title> Lazy functional state threads. </title> <booktitle> In Proc. Symposium on Programming Language Design and Implementation '94, </booktitle> <address> Orlando, </address> <month> June </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: A more serious limitation of the current system is that it does not handle more than one mutable ADT. One possible solution to this is to introduce references, so that individual objects can be named and manipulated, and use the extension to the Hindley-Milner type system proposed in <ref> [11] </ref> to prevent the escape of references from the monadic computation. Related to this issue is the inability to handle treelike structures, ruled out by our definition of a simple ADT.
Reference: [12] <author> S. Liang and P. Hudak. </author> <title> Modular denotational semantics for compiler construction. </title> <booktitle> In European Symposium on Programming '96, </booktitle> <address> Linkoping, Swe-den, </address> <month> April </month> <year> 1996. </year>
Reference: [13] <author> E. Moggi. </author> <title> Computational lambda-calculus and monads. </title> <booktitle> In Proceedings of Symposium on Logic in Computer Science. IEEE, </booktitle> <month> June </month> <year> 1989. </year>
Reference: [14] <author> G. Morriset, M. Felleisen, and R. Harper. </author> <title> Abstract models of memory management. </title> <booktitle> In Proc. Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 66-77, </pages> <address> New York, </address> <month> June </month> <year> 1995. </year> <title> ACM/IFIP, </title> <publisher> ACM Press. </publisher>
Reference: [15] <author> M. Odersky, D. Rabin, and P. Hudak. </author> <title> Call-by-name, assignment, and the lambda-calculus. </title> <booktitle> In Proc. 20th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charleston, South Carolina, </address> <month> January </month> <year> 1993. </year>
Reference: [16] <author> S. Peyton Jones and P. Wadler. </author> <title> Imperative functional programming. </title> <booktitle> In Proc. 20th Symposium on Principles of Programming Languages. ACM, </booktitle> <month> Jan-uary </month> <year> 1993. </year> <note> (to appear). </note>
Reference: [17] <author> D. A. Schmidt. </author> <title> Detecting global variables in deno-tational specification. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(2) </volume> <pages> 299-310, </pages> <year> 1985. </year>
Reference: [18] <author> P. Wadler. </author> <title> Comprehending monads. </title> <booktitle> In Proc. Symposium on Lisp and Functional Programming, </booktitle> <pages> pages 61-78, </pages> <address> Nice, France, </address> <month> June </month> <year> 1990. </year> <note> ACM. </note>
Reference: [19] <editor> P. Wadler. </editor> <booktitle> Linear types can change the world! In IFIP TC 2 Working Conference on Programming Concepts and Methods, Sea of Galilee, </booktitle> <address> Isreal, April 1990. </address> <publisher> IFIP. </publisher>
Reference-contexts: We can fix this problem by making fst and snd hyper-strict in the first component of their arguments. This is the only sensible way to ensure that there are no dangling references to the type of interest, and is similar to the use of a hyper-strict let expression in <ref> [19] </ref>. Thus we define new versions of the pair selectors, fstA and sndA: fstA (v; e) ) ffi v sndA (v; e) ) ffi e where v is a value.
Reference: [20] <author> P. Wadler. </author> <title> The essence of functional programming. </title> <booktitle> In Proc. 19th Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-14. </pages> <publisher> ACM, </publisher> <month> Jan-uary </month> <year> 1992. </year>
Reference: [21] <author> C.P. Wadsworth. </author> <title> Semantics and Pragmatics of the Lambda Calculus. </title> <type> PhD thesis, </type> <institution> Oxford University, </institution> <year> 1971. </year>
References-found: 21

