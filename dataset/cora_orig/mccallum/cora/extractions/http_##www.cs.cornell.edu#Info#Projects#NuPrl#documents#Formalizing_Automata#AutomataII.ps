URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/documents/Formalizing_Automata/AutomataII.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/html/publication.html
Root-URL: 
Title: Formalizing Automata II: Decidable Properties  
Author: Robert L. Constable 
Affiliation: Cornell University  
Abstract: Is it possible to create formal proofs of interesting mathematical theorems which are mechanically checked in every detail and yet are readable and even faithful to the best expositions of those results in the literature? This paper answers that question positively for theorems about decidable properties of finite automata. The exposition is from Hopcroft and Ullman's classic 1969 textbook Formal Languages and Their Relation to Automata. This paper describes a successful formalization which is faithful to that book. The requirement of being faithful to the book has unexpected consequences, namely that the underlying formal theory must include primitive notions of computability. This requirement makes a constructive formalization especially suitable. It also opens the possibility of using the formal proofs to decide properties of automata. The paper shows how to do this.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mark Aagaard and Miriam Leeser. </author> <title> Verifying a logic synthesis tool in Nuprl. </title> <editor> In Gregor Bochmann and David Probst, editors, </editor> <booktitle> Proceedings of Workshop on Computer-Aided Verification, </booktitle> <pages> pages 72-83. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: Tactics are being grouped into larger collections which act as small theorem provers on their own (like Auto tactic). We sometimes call these super tactics <ref> [2, 1] </ref>. They automate more of the proof building. Eventually we hope to support proof plans in the sense of Bundy [16, 17]. As systems like Nuprl are rebuilt and overhauled (Nuprl is now on version 5), their basic algorithms usually become faster.
Reference: [2] <author> Mark D. Aagaard, Miriam E. Leeser, and Phillip J. Windley. </author> <title> Towards a super duper hardware tactic. </title> <editor> In Jeffrey J. Joyce and Carl-Johan H. Seger, editors, </editor> <booktitle> HOL Theorem Proving System and its Applications, </booktitle> <pages> pages 400-413. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Tactics are being grouped into larger collections which act as small theorem provers on their own (like Auto tactic). We sometimes call these super tactics <ref> [2, 1] </ref>. They automate more of the proof building. Eventually we hope to support proof plans in the sense of Bundy [16, 17]. As systems like Nuprl are rebuilt and overhauled (Nuprl is now on version 5), their basic algorithms usually become faster.
Reference: [3] <author> Stuart F. Allen. </author> <title> A Non-Type-Theoretic Semantics for Type-Theoretic Language. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1987. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF [6, 32, 33, 54, 67], Nuprl <ref> [30, 3, 45, 43] </ref>. Hopcroft and Ullman also intended that there be a way to provide data to algorithms explicitly. 4 2 This theory is also called type theory to stress its difference from classical set theory and its similarity to the notion of type in programming languages.
Reference: [4] <author> L. Augustsson, T. Coquand, and B. Nordstrom. </author> <title> A short description of another logical frame work. </title> <booktitle> In Proceedings of the First Annual Workshop on Logical Frameworks, </booktitle> <pages> pages 39-42, </pages> <address> Sophia-Antipolis, France, </address> <year> 1990. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq <ref> [4, 28, 51] </ref>, IZF [6, 32, 33, 54, 67], Nuprl [30, 3, 45, 43].
Reference: [5] <author> Antony J. Bailey. </author> <title> The Machine-Checked Literate Formalization of Algebra in Type Theory. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <year> 1998. </year>
Reference-contexts: Werner and Paulin-Mohring [61] have proved a decidability theorem for propositional logic. A topological completeness proof for predicate logic was proved in Alf by Persson [63] and the Hahn-Banach theorem in Coq [19]. Anthony Bailey is finishing a PhD thesis on Galois' theory in Lego with Peter Aczel <ref> [5] </ref>. 15 Boyer and Moore's account in primitive recursive arithmetic (PRA) [14] is also constructive, but PRA does not correspond to ordinary mathematical practice. Chet Murthy produced a constructive proof of Higman's Lemma, but the proof was obtained by automatically translating a classical one and is not readable [65].
Reference: [6] <author> M. J. Beeson. </author> <title> Foundations of Constructive Mathematics. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF <ref> [6, 32, 33, 54, 67] </ref>, Nuprl [30, 3, 45, 43].
Reference: [7] <author> U. Berger and H. Schwichtenberg. </author> <title> The greatest common divisor: a case study for program extraction from classical proofs. </title> <booktitle> In Logic Notes in Computer Science, </booktitle> <month> June </month> <year> 1995. </year> <booktitle> Workshop on Proofs and Types. </booktitle>
Reference-contexts: Chet Murthy produced a constructive proof of Higman's Lemma, but the proof was obtained by automatically translating a classical one and is not readable [65]. Also see Berger and Schwichtenberg <ref> [7] </ref>. 25 7.3 future directions The Nuprl mathematics is noteworthy in large measure because it expresses in a unified way both the algorithmics and descriptive aspects of mathematics.
Reference: [8] <author> Paul Bernays and A. A. Fraenkel. </author> <title> Axiomatic Set Theory. </title> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1958. </year>
Reference-contexts: This is one of the most basic concepts of classical set theory, and it gives it an impredicative character since in defining a subset S of T we can quantify over any set in P (T ), including S in P (T ) which we are defining (see <ref> [8] </ref>). 4 perfect number if there is one, otherwise 17. Knowing n 0 depends on solving the open problem of determining the largest perfect number, if one exists. The states, K; could be the two real numbers e and e+.
Reference: [9] <author> J. Bertot, Y. Bertot, Y. Coscoy, H. Goguen, and F. Montagnac. </author> <title> User Guide to the CTCOQ Proof Environment. </title> <institution> INRIA, Sophia Antipolis, </institution> <month> February </month> <year> 1997. </year> <title> System Revision 1.22; Documentation Revision 1.31. </title>
Reference-contexts: The Nuprl group is also committed to making the Prover easier to use by improving its user interface a goal we share with the CTCoq project using the Centaur system <ref> [68, 10, 9] </ref>. As provers become more powerful and user-friendly, we expect that they will be more widely used. Eventually nonexperts will use these provers to create a world wide digital library of formalized mathematics. Chapter 3 of Formal Languages and Their Relation to Automata will be part of it.
Reference: [10] <author> Y. Bertot, G. Kahn, and L. Thery. </author> <title> Proof by pointing. </title> <booktitle> In Theoretical Aspects of Computer Software, Lecture Notes in Computer Science, </booktitle> <volume> volume 789, </volume> <pages> pages 141-160, </pages> <year> 1994. </year>
Reference-contexts: The Nuprl group is also committed to making the Prover easier to use by improving its user interface a goal we share with the CTCoq project using the Centaur system <ref> [68, 10, 9] </ref>. As provers become more powerful and user-friendly, we expect that they will be more widely used. Eventually nonexperts will use these provers to create a world wide digital library of formalized mathematics. Chapter 3 of Formal Languages and Their Relation to Automata will be part of it.
Reference: [11] <author> E. Bishop. </author> <title> Foundations of Constructive Analysis. </title> <publisher> McGraw Hill, </publisher> <address> NY, </address> <year> 1967. </year>
Reference-contexts: To compute with them requires that we can reduce an expression for a natural number to decimal form. Indeed, we could follow Bishop <ref> [11] </ref> in defining a natural number to be an expression which reduces to a decimal numeral or to another canonical form like binary or tally notation. The canonical natural numbers are 0 and suc (n) where n is a natural number. <p> In the realm of continuous mathematics, there is a constructive proof of the Intermediate Value Theorem from Bishop's book <ref> [11] </ref>. The most up-to-date library is by Forester [31], building on work of Chirimar and Howe [20]. The Coq and Alf research groups have also formalized a number of interesting results in constructive mathematics [44]. Pollock [64] proved a strong normalization theorem for Lego.
Reference: [12] <author> P. Borras, D. Clement, T. Despeyroux, J. Incerpi, G. Kahn, B. Lang, and V. Pascual. </author> <title> Centaur: the system. </title> <booktitle> In Software Engineering Notes, volume 13(5). Third Symposium on Software Development Environments, </booktitle> <year> 1988. </year>
Reference: [13] <author> N. Bourbaki. </author> <title> Elements of Mathematics, Theory of Sets. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1968. </year>
Reference: [14] <author> R. S. Boyer and J. S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: A topological completeness proof for predicate logic was proved in Alf by Persson [63] and the Hahn-Banach theorem in Coq [19]. Anthony Bailey is finishing a PhD thesis on Galois' theory in Lego with Peter Aczel [5]. 15 Boyer and Moore's account in primitive recursive arithmetic (PRA) <ref> [14] </ref> is also constructive, but PRA does not correspond to ordinary mathematical practice. Chet Murthy produced a constructive proof of Higman's Lemma, but the proof was obtained by automatically translating a classical one and is not readable [65].
Reference: [15] <editor> L. E. J. Brouwer. Collected Works A. Heyting, ed., </editor> <volume> volume 1. </volume> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1975. </year> <note> (see On the foundations of mathematics 11-98.). </note>
Reference-contexts: Even more profoundly, when we take seriously the task of keeping track of effectiveness, we will rediscover Brouwer's results that the logical operations must also be refined. Brouwer <ref> [15] </ref> made his discoveries for analysis and set theory.
Reference: [16] <author> A. Bundy. </author> <title> The use of explicit plans to guide inductive proofs. </title> <booktitle> In Ninth Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 203, </volume> <pages> pages 111-120. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <month> 27 </month>
Reference-contexts: Tactics are being grouped into larger collections which act as small theorem provers on their own (like Auto tactic). We sometimes call these super tactics [2, 1]. They automate more of the proof building. Eventually we hope to support proof plans in the sense of Bundy <ref> [16, 17] </ref>. As systems like Nuprl are rebuilt and overhauled (Nuprl is now on version 5), their basic algorithms usually become faster.
Reference: [17] <author> A. Bundy. </author> <title> The use of proof plans for normalization. In R.S. </title> <editor> Boyer, editor, </editor> <booktitle> Essays in Honor of Woody Bledsoe, </booktitle> <pages> pages 149-166. </pages> <publisher> Kluwer, </publisher> <year> 1991. </year>
Reference-contexts: Tactics are being grouped into larger collections which act as small theorem provers on their own (like Auto tactic). We sometimes call these super tactics [2, 1]. They automate more of the proof building. Eventually we hope to support proof plans in the sense of Bundy <ref> [16, 17] </ref>. As systems like Nuprl are rebuilt and overhauled (Nuprl is now on version 5), their basic algorithms usually become faster.
Reference: [18] <author> James Caldwell. </author> <title> Classical propositional decidability via Nuprl proof extraction. Submitted to TPHOLs'98: </title> <booktitle> The 11th International Conference on Theorem Proving in Higher Order Logics, </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: Several people have formalized the fundamental theorem of arithmetic (FTA) constructively [41]. 15 Paul Jackson has shown how to formalize a large amount of computational algebra of the kind that underlies symbolic algebra systems [45]. These results are accessible on the Web from Nuprl home page. James Caldwell <ref> [18] </ref> is finishing a PhD thesis that presents decidability theorems for classical and intuitionistic propositional calculus, and Pavel Naumov is finishing a PhD thesis that presents a formal semantics for a fragment of Java.
Reference: [19] <author> Jan Cederquist, Thierry Coquand, and Sara Negri. </author> <title> The Hahn-Banach theorem in type theory. </title> <editor> In G. Sambin and J. Smith, editors, </editor> <title> Proceedings of Twenty-Five Years of Constructive Type Theory. </title> <publisher> Oxford University Press, </publisher> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Pollock [64] proved a strong normalization theorem for Lego. Werner and Paulin-Mohring [61] have proved a decidability theorem for propositional logic. A topological completeness proof for predicate logic was proved in Alf by Persson [63] and the Hahn-Banach theorem in Coq <ref> [19] </ref>. Anthony Bailey is finishing a PhD thesis on Galois' theory in Lego with Peter Aczel [5]. 15 Boyer and Moore's account in primitive recursive arithmetic (PRA) [14] is also constructive, but PRA does not correspond to ordinary mathematical practice.
Reference: [20] <author> J. Chirimar and Douglas J. Howe. </author> <title> Implementing constructive real analysis: a preliminary report. </title> <booktitle> In Symposium on Constructivity in Computer Science, </booktitle> <pages> pages 165-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In the realm of continuous mathematics, there is a constructive proof of the Intermediate Value Theorem from Bishop's book [11]. The most up-to-date library is by Forester [31], building on work of Chirimar and Howe <ref> [20] </ref>. The Coq and Alf research groups have also formalized a number of interesting results in constructive mathematics [44]. Pollock [64] proved a strong normalization theorem for Lego. Werner and Paulin-Mohring [61] have proved a decidability theorem for propositional logic.
Reference: [21] <author> Robert L. Constable. </author> <title> Experience using type theory as a foundation for computer science. </title> <booktitle> In Proceedings of the Tenth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 266-279. </pages> <note> LICS, </note> <month> June </month> <year> 1995. </year>
Reference: [22] <author> Robert L. Constable. </author> <title> The structure of Nuprl's type theory. </title> <editor> In Helmut Schwichtenberg, editor, </editor> <booktitle> Logic of Computation, </booktitle> <pages> pages 123-156. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: In the first paper we formally proved the Myhill/Nerode Theorem and its corollary that there is a unique (up to isomorphism) minimal finite automaton accepting any regular language. A constructive proof was created using the Nuprl proof development system <ref> [22, 24] </ref>, and from it we obtained an algorithm for correctly minimizing automata. 1 In this paper we are concerned with the decidability results in Chapter 3.
Reference: [23] <author> Robert L. Constable. </author> <title> A note on complexity measures for inductive classes in constructive type theory. </title> <journal> Information and Computation, </journal> <note> To appear 1998. </note>
Reference-contexts: Indeed, we might want to state the Hopcroft result [39] that a finite automaton with n states can be minimized in n log n time. Work is being done to extend Nuprl's theory in just this manner <ref> [23] </ref>. The Nuprl system takes the formalization beyond what can be achieved for classical logics. The Evaluator is able to mechanically reduce expressions to canonical form; this means it can compute with functions and evaluate the extracts of proofs. We say that the system animates the mathematics.
Reference: [24] <author> Robert L. Constable, Stuart F. Allen, H. M. Bromley, W. R. Cleaveland, J. F. Cremer, R. W. Harper, Douglas J. Howe, T. B. Knoblock, N. P. Mendler, P. Panangaden, James T. Sasaki, and Scott F. Smith. </author> <title> Implementing Mathematics with the Nuprl Development System. </title> <publisher> Prentice-Hall, </publisher> <address> NJ, </address> <year> 1986. </year>
Reference-contexts: In the first paper we formally proved the Myhill/Nerode Theorem and its corollary that there is a unique (up to isomorphism) minimal finite automaton accepting any regular language. A constructive proof was created using the Nuprl proof development system <ref> [22, 24] </ref>, and from it we obtained an algorithm for correctly minimizing automata. 1 In this paper we are concerned with the decidability results in Chapter 3.
Reference: [25] <author> Robert L. Constable, Paul B. Jackson, Pavel Naumov, and Juan Uribe. </author> <title> Constructively for malizing automata. In Proof, Language and Interaction: Essays in Honour of Robin Milner. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1998. </year>
Reference-contexts: 1 Introduction 1.1 context This is a self contained second paper in a series about the formalization of automata theory. As in the first paper <ref> [25] </ref>, the object of formalization is Hopcroft and Ullman's 1969 classic book Formal Languages and Their Relation to Automata (called Hopcroft and Ullman) [40]. <p> Moreover, we directly formalize the intuitive ideas motivating the work. Making that point is a major theme of this article. Another important theme is that our presentation is also completely formal : the proofs were all done in the Nuprl proof development system by extending results from <ref> [25] </ref> with help of Pavel Naumov, who posted his work on the Nuprl web page. 5 1.4 outline Section 2 reviews the basic concepts of automata theory and casts them in a rigorous language. Section 3 reviews the decidability results from Hopcroft and Ullman and raises the foundational questions.
Reference: [26] <author> Thierry Coquand and G. Huet. </author> <title> The Calculus of Constructions. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 95-120, </pages> <year> 1988. </year>
Reference: [27] <author> N. G. deBruijn. </author> <title> Set theory with type restrictions. </title> <editor> In A. Jahnal, R. Rado, and V. T. Sos, editors, </editor> <title> Infinite and Finite Sets, </title> <booktitle> volume I of Collections of the Mathematics Society, </booktitle> <pages> pages 205-314. </pages> <note> J. Bolyai 10, </note> <year> 1975. </year>
Reference: [28] <author> G. Dowek, A. Felty, H. Herbelin, G. Huet, C. Murthy, C. Parent, C. Paulin-Mohring, and B. Werner. </author> <title> The Coq Proof Assistant User's Guide. </title> <note> INRIA, Version 5.8, </note> <year> 1993. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq <ref> [4, 28, 51] </ref>, IZF [6, 32, 33, 54, 67], Nuprl [30, 3, 45, 43].
Reference: [29] <author> Samuel Eilenberg. </author> <title> Automata, Languages and Machines, volume A. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1974. </year>
Reference-contexts: So if a string longer than n is accepted, then we can keep removing copies of b until there is an accepted string whose length is n or less. 6.2 abstract pumping lemma Automata theory can be seen as a branch of algebra <ref> [57, 66, 29, 48] </ref>. This is well illustrated in Eilenberg's books, Automata, Languages and Machines [29]. 13 Recently Kozen has discovered a beautiful generalization of regular expressions in the notion of a Kleene algebra [48]. <p> This is well illustrated in Eilenberg's books, Automata, Languages and Machines <ref> [29] </ref>. 13 Recently Kozen has discovered a beautiful generalization of regular expressions in the notion of a Kleene algebra [48]. We can see the flavor and power of these algebraic results by looking at an algebraic form of the pumping lemma used above in the decidability results.
Reference: [30] <author> Solomon Feferman. </author> <title> A language and axioms for explicit mathematics. </title> <editor> In J. N. Crossley, editor, </editor> <booktitle> Algebra and Logic, Lecture Notes in Mathematics, </booktitle> <volume> Vol. 480, </volume> <pages> pages 87-139. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1975. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF [6, 32, 33, 54, 67], Nuprl <ref> [30, 3, 45, 43] </ref>. Hopcroft and Ullman also intended that there be a way to provide data to algorithms explicitly. 4 2 This theory is also called type theory to stress its difference from classical set theory and its similarity to the notion of type in programming languages.
Reference: [31] <author> Max B. Forester. </author> <title> Formalizing constructive real analysis. </title> <type> Technical Report TR93-1382, </type> <institution> Com puter Science Department, Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1993. </year> <month> 28 </month>
Reference-contexts: In the realm of continuous mathematics, there is a constructive proof of the Intermediate Value Theorem from Bishop's book [11]. The most up-to-date library is by Forester <ref> [31] </ref>, building on work of Chirimar and Howe [20]. The Coq and Alf research groups have also formalized a number of interesting results in constructive mathematics [44]. Pollock [64] proved a strong normalization theorem for Lego. Werner and Paulin-Mohring [61] have proved a decidability theorem for propositional logic.
Reference: [32] <author> H. Friedman. </author> <title> Set theoretic foundations for constructive analysis. </title> <journal> Annals of Math, </journal> <volume> 105 </volume> <pages> 1-28, </pages> <year> 1977. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF <ref> [6, 32, 33, 54, 67] </ref>, Nuprl [30, 3, 45, 43].
Reference: [33] <author> H. Friedman and A. Scedrov. </author> <title> Set existence property for intuitionistic theories with countable choice. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 25 </volume> <pages> 129-140, </pages> <year> 1983. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF <ref> [6, 32, 33, 54, 67] </ref>, Nuprl [30, 3, 45, 43].
Reference: [34] <author> Michael Gordon and T. Melham. </author> <title> Introduction to HOL: A Theorem Proving Environment for Higher-Oder Logic. </title> <publisher> University Press, </publisher> <address> Cambridge, </address> <year> 1993. </year>
Reference-contexts: The work is part of a research program to explore the foundations of computational mathematics. An attempt to formalize the undecidability results of Hopcroft and Ullman's Chapter 3 in classical set theory (say as in Mizar [46]) or in classical type theory (say HOL <ref> [34, 43, 42] </ref> or PVS [60]) would encounter severe difficulties. It could not remain close to the style of the book. It could not capture the computational intuitions that motivate and permeate the whole account.
Reference: [35] <author> Michael Gordon, Robin Milner, and Christopher Wadsworth. </author> <title> Edinburgh LCF: a mechanized logic of computation, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 78. </volume> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1979. </year>
Reference: [36] <author> Paul R. Halmos. </author> <title> Naive Set Theory. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1974. </year>
Reference-contexts: The conclusion mentions related work and future plans. 2 Set Theory Preliminaries 2.1 symbols and sentences Hopcroft and Ullman write in a naive set theory (see Halmos <ref> [36] </ref>) with effective procedures. Let us call it naive effective set theory. Their first definition says that an alphabet is any finite set of symbols, . 6 They say that these finite sets come from some countable set, say Symbols.
Reference: [37] <author> Arend Heyting. </author> <title> Mathematische Grundlagenforschung. </title> <publisher> Intuitionismus.Beweistheorie. Springer, </publisher> <address> Berlin, </address> <year> 1934. </year>
Reference-contexts: It is defined as P _fl Q iff :(:P &:Q): The concept of negation used here is that :P holds when P ) F alse, i.e., F alse P . 14 5.2 axiomatizing a logic of problems It is a remarkable fact discovered by Kolmogorov [47] and Heyting <ref> [37] </ref> that the operators Decidable (P; Q); Q P; 9; 8 used to make distinctions about decidability, reducibility, construction and uniform solution obey the ordinary laws of logic of the corresponding classical operators with only one exception.
Reference: [38] <author> Jason J. Hickey. Nuprl-light: </author> <title> An implementation framework for higer-order logics. </title> <editor> In William McCune, editor, </editor> <booktitle> Proceedings of the 14th International Conference on Automated Deduction, volume 1249 of Lecture Notes on Artificial Intelligence, </booktitle> <pages> pages 395-399, </pages> <address> Berlin, July 13-17 1997. </address> <publisher> Springer. CADE '97. </publisher>
Reference: [39] <author> J. E. Hopcroft. </author> <title> An nlogn algorithm for minimizing states in a finite automaton. </title> <booktitle> In Theory of Machines and Computations, </booktitle> <pages> pages 189-196. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: The Nuprl theory can capture the basic intuitions behind the Hopcroft and Ullman book, but it cannot directly express notions of computational complexity that would be part of a more modern account. Indeed, we might want to state the Hopcroft result <ref> [39] </ref> that a finite automaton with n states can be minimized in n log n time. Work is being done to extend Nuprl's theory in just this manner [23]. The Nuprl system takes the formalization beyond what can be achieved for classical logics.
Reference: [40] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Formal Languages and Their Relation to Automata. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1969. </year>
Reference-contexts: 1 Introduction 1.1 context This is a self contained second paper in a series about the formalization of automata theory. As in the first paper [25], the object of formalization is Hopcroft and Ullman's 1969 classic book Formal Languages and Their Relation to Automata (called Hopcroft and Ullman) <ref> [40] </ref>. In the first paper we formally proved the Myhill/Nerode Theorem and its corollary that there is a unique (up to isomorphism) minimal finite automaton accepting any regular language.
Reference: [41] <author> Douglas J. Howe. </author> <title> Implementing number theory: An experiment with Nuprl. </title> <booktitle> Eighth Inter national Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 230, </volume> <pages> pages 404-415, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Several people have formalized the fundamental theorem of arithmetic (FTA) constructively <ref> [41] </ref>. 15 Paul Jackson has shown how to formalize a large amount of computational algebra of the kind that underlies symbolic algebra systems [45]. These results are accessible on the Web from Nuprl home page.
Reference: [42] <author> Douglas J. Howe. </author> <title> Importing mathematics from HOL into Nuprl. </title> <editor> In J. von Wright, J. Grundy, and J. Harrison, editors, </editor> <title> Theorem Proving in Higher Order Logics, </title> <booktitle> volume 1125, of Lecture Notes in Computer Science, </booktitle> <pages> pages 267-282. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: The work is part of a research program to explore the foundations of computational mathematics. An attempt to formalize the undecidability results of Hopcroft and Ullman's Chapter 3 in classical set theory (say as in Mizar [46]) or in classical type theory (say HOL <ref> [34, 43, 42] </ref> or PVS [60]) would encounter severe difficulties. It could not remain close to the style of the book. It could not capture the computational intuitions that motivate and permeate the whole account.
Reference: [43] <author> Douglas J. Howe. </author> <title> Semantic foundations for embedding HOL in Nuprl. </title> <editor> In Martin Wirsing and Maurice Nivat, editors, </editor> <booktitle> Algebraic Methodology and Software Technology, volume 1101 of Lecture Notes in Computer Science, </booktitle> <pages> pages 85-101. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: The work is part of a research program to explore the foundations of computational mathematics. An attempt to formalize the undecidability results of Hopcroft and Ullman's Chapter 3 in classical set theory (say as in Mizar [46]) or in classical type theory (say HOL <ref> [34, 43, 42] </ref> or PVS [60]) would encounter severe difficulties. It could not remain close to the style of the book. It could not capture the computational intuitions that motivate and permeate the whole account. <p> So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF [6, 32, 33, 54, 67], Nuprl <ref> [30, 3, 45, 43] </ref>. Hopcroft and Ullman also intended that there be a way to provide data to algorithms explicitly. 4 2 This theory is also called type theory to stress its difference from classical set theory and its similarity to the notion of type in programming languages.
Reference: [44] <author> G. Huet and A. Sa ibi. </author> <title> Constructive category theory. </title> <editor> In Gordon Plotkin, Colin Stirling and Mads Tofte, editors, </editor> <title> Proof, Language and Interaction: Essays in Honour of Robin Milner. </title> <publisher> MIT Press, </publisher> <year> 1998. </year> <note> Presented at CLICS-TYPES BRA '95. </note>
Reference-contexts: The most up-to-date library is by Forester [31], building on work of Chirimar and Howe [20]. The Coq and Alf research groups have also formalized a number of interesting results in constructive mathematics <ref> [44] </ref>. Pollock [64] proved a strong normalization theorem for Lego. Werner and Paulin-Mohring [61] have proved a decidability theorem for propositional logic. A topological completeness proof for predicate logic was proved in Alf by Persson [63] and the Hahn-Banach theorem in Coq [19].
Reference: [45] <author> Paul B. Jackson. </author> <title> Enhancing the Nuprl Proof Development System and Applying it to Compu tational Abstract Algebra. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF [6, 32, 33, 54, 67], Nuprl <ref> [30, 3, 45, 43] </ref>. Hopcroft and Ullman also intended that there be a way to provide data to algorithms explicitly. 4 2 This theory is also called type theory to stress its difference from classical set theory and its similarity to the notion of type in programming languages. <p> Several people have formalized the fundamental theorem of arithmetic (FTA) constructively [41]. 15 Paul Jackson has shown how to formalize a large amount of computational algebra of the kind that underlies symbolic algebra systems <ref> [45] </ref>. These results are accessible on the Web from Nuprl home page. James Caldwell [18] is finishing a PhD thesis that presents decidability theorems for classical and intuitionistic propositional calculus, and Pavel Naumov is finishing a PhD thesis that presents a formal semantics for a fragment of Java.
Reference: [46] <author> Miroslava Kaloper and Piotr Rudnicki. </author> <title> Minimization of finite state machines. </title> <booktitle> Mizar User's Association, </booktitle> <year> 1996. </year>
Reference-contexts: The work is part of a research program to explore the foundations of computational mathematics. An attempt to formalize the undecidability results of Hopcroft and Ullman's Chapter 3 in classical set theory (say as in Mizar <ref> [46] </ref>) or in classical type theory (say HOL [34, 43, 42] or PVS [60]) would encounter severe difficulties. It could not remain close to the style of the book. It could not capture the computational intuitions that motivate and permeate the whole account.
Reference: [47] <author> A. N. </author> <title> Kolmogorov. </title> <journal> Zur deutung der intuitionistischen logik. Mathematische Zeitschrift, </journal> <volume> 35:58 65, </volume> <year> 1932. </year>
Reference-contexts: It is remarkable that these operations make sense in terms of a "logic of problems." <ref> [47] </ref>. We have already seen P ! Q in the definition of Q P . To say P ! Q is to say that there is an effective function that converts a proof of P to a proof of Q. This function f reduces Q to P . <p> It is defined as P _fl Q iff :(:P &:Q): The concept of negation used here is that :P holds when P ) F alse, i.e., F alse P . 14 5.2 axiomatizing a logic of problems It is a remarkable fact discovered by Kolmogorov <ref> [47] </ref> and Heyting [37] that the operators Decidable (P; Q); Q P; 9; 8 used to make distinctions about decidability, reducibility, construction and uniform solution obey the ordinary laws of logic of the corresponding classical operators with only one exception.
Reference: [48] <author> Dexter Kozen. </author> <title> A completeness theorem for Kleene algebras and the algebra of regular events. </title> <journal> Information and Computation, </journal> <volume> 110 </volume> <pages> 366-390, </pages> <year> 1994. </year>
Reference-contexts: So if a string longer than n is accepted, then we can keep removing copies of b until there is an accepted string whose length is n or less. 6.2 abstract pumping lemma Automata theory can be seen as a branch of algebra <ref> [57, 66, 29, 48] </ref>. This is well illustrated in Eilenberg's books, Automata, Languages and Machines [29]. 13 Recently Kozen has discovered a beautiful generalization of regular expressions in the notion of a Kleene algebra [48]. <p> This is well illustrated in Eilenberg's books, Automata, Languages and Machines [29]. 13 Recently Kozen has discovered a beautiful generalization of regular expressions in the notion of a Kleene algebra <ref> [48] </ref>. We can see the flavor and power of these algebraic results by looking at an algebraic form of the pumping lemma used above in the decidability results. The algebraic notion of a set with an action, an action set, is a good generalization of an automaton.
Reference: [49] <author> Dexter Kozen. </author> <title> Automata and Computability. </title> <publisher> Springer, </publisher> <address> New York, </address> <year> 1997. </year>
Reference: [50] <author> C. </author> <title> Kreitz. Constructive automata theory implemented with the Nuprl proof development system. </title> <type> Technical Report 86-779, </type> <institution> Cornell University, </institution> <address> Ithaca, New York, </address> <month> September </month> <year> 1986. </year>
Reference: [51] <author> L. Magnusson and B. Nordstrom. </author> <title> The ALF proof editor and its proof engine. </title> <publisher> In Springer Verlag, </publisher> <editor> editor, </editor> <title> Types for Proofs and Programs, </title> <booktitle> volume 806 of Lecture Notes in Computer Science, </booktitle> <pages> pages 213-237, </pages> <year> 1994. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq <ref> [4, 28, 51] </ref>, IZF [6, 32, 33, 54, 67], Nuprl [30, 3, 45, 43].
Reference: [52] <author> Per Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Proceedings of the Sixth International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-175, </pages> <address> Amsterdam, 1982. </address> <publisher> North Holland. </publisher>
Reference: [53] <author> Per Martin-Lof. </author> <title> On the meaning of the logical constants and the justification of the logical laws. </title> <booktitle> Lectures in Siena, </booktitle> <year> 1983. </year>
Reference: [54] <author> David McCarty. </author> <title> Realizability and recursive set theory. </title> <journal> Journal of Pure and Applied Logic, </journal> <volume> 32 </volume> <pages> 153-183, </pages> <year> 1986. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF <ref> [6, 32, 33, 54, 67] </ref>, Nuprl [30, 3, 45, 43].
Reference: [55] <author> A. Morse. </author> <title> A Theory of Sets. </title> <publisher> Academic Press, </publisher> <year> 1965. </year>
Reference-contexts: We do not need it here and, more significantly, it can be defined as we note below. Once we have combined propositions P (x) with the set constructors, an idea also used in Morse's set theory <ref> [55] </ref>, we can also form P fi Q; P ! Q and x : A ! P (x). It is remarkable that these operations make sense in terms of a "logic of problems." [47]. We have already seen P ! Q in the definition of Q P .
Reference: [56] <author> Y. Moschovakis. </author> <title> Notes on Set Theory. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: The concept of a list type, A fl , is basic to computer science. In classical set theory we need to provide an encoding of lists into sets. Typically, this is done by an inductive definition. For a modern account see Moschovakis <ref> [56] </ref>.
Reference: [57] <author> A. Nerode. </author> <title> Linear automaton transformations. </title> <booktitle> In Proceedings of the American Mathematical Society, </booktitle> <volume> volume 9, </volume> <pages> pages 541-544, </pages> <year> 1958. </year>
Reference-contexts: So if a string longer than n is accepted, then we can keep removing copies of b until there is an accepted string whose length is n or less. 6.2 abstract pumping lemma Automata theory can be seen as a branch of algebra <ref> [57, 66, 29, 48] </ref>. This is well illustrated in Eilenberg's books, Automata, Languages and Machines [29]. 13 Recently Kozen has discovered a beautiful generalization of regular expressions in the notion of a Kleene algebra [48].
Reference: [58] <author> Alexei Nogin. </author> <title> Improving the efficiency of Nuprl proofs. </title> <institution> Moscow State University, unpublished, </institution> <year> 1997. </year>
Reference: [59] <author> B. Nordstrom, K. Petersson, and J. Smith. </author> <title> Programming in Martin-Lof 's Type Theory. </title> <publisher> Oxford Sciences Publication, Oxford, </publisher> <year> 1990. </year>
Reference-contexts: Martin-Lof also refers to it as a set theory <ref> [59] </ref>, a term that might be natural when equality between types is extensional.
Reference: [60] <author> S. Owre, J. M. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE, </booktitle> <address> Saratoga NY, </address> <year> 1992), </year> <booktitle> volume 607 of Lecture Notes in Computer Science, </booktitle> <pages> pages 748-752. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The work is part of a research program to explore the foundations of computational mathematics. An attempt to formalize the undecidability results of Hopcroft and Ullman's Chapter 3 in classical set theory (say as in Mizar [46]) or in classical type theory (say HOL [34, 43, 42] or PVS <ref> [60] </ref>) would encounter severe difficulties. It could not remain close to the style of the book. It could not capture the computational intuitions that motivate and permeate the whole account.
Reference: [61] <author> Christine Paulin-Mohring and Benjamin Werner. </author> <title> Synthesis of ML programs in the system Coq. </title> <journal> Journal of Symbolic Computations, </journal> <volume> 15 </volume> <pages> 607-640, </pages> <year> 1993. </year>
Reference-contexts: The most up-to-date library is by Forester [31], building on work of Chirimar and Howe [20]. The Coq and Alf research groups have also formalized a number of interesting results in constructive mathematics [44]. Pollock [64] proved a strong normalization theorem for Lego. Werner and Paulin-Mohring <ref> [61] </ref> have proved a decidability theorem for propositional logic. A topological completeness proof for predicate logic was proved in Alf by Persson [63] and the Hahn-Banach theorem in Coq [19].
Reference: [62] <author> L. C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> No. 78. </volume> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [63] <author> Henrik Persson. </author> <title> A formalization of a constructive completeness proof for intuitionistic predicate logic. </title> <institution> Chalmers University of Technology, Goteborg, </institution> <month> September </month> <year> 1995. </year> <note> Draft. </note>
Reference-contexts: Pollock [64] proved a strong normalization theorem for Lego. Werner and Paulin-Mohring [61] have proved a decidability theorem for propositional logic. A topological completeness proof for predicate logic was proved in Alf by Persson <ref> [63] </ref> and the Hahn-Banach theorem in Coq [19]. Anthony Bailey is finishing a PhD thesis on Galois' theory in Lego with Peter Aczel [5]. 15 Boyer and Moore's account in primitive recursive arithmetic (PRA) [14] is also constructive, but PRA does not correspond to ordinary mathematical practice.
Reference: [64] <author> Robert Pollack. </author> <title> The Theory of LEGO:A Proof Checker for the Extended Calculus of Construc tions. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: The most up-to-date library is by Forester [31], building on work of Chirimar and Howe [20]. The Coq and Alf research groups have also formalized a number of interesting results in constructive mathematics [44]. Pollock <ref> [64] </ref> proved a strong normalization theorem for Lego. Werner and Paulin-Mohring [61] have proved a decidability theorem for propositional logic. A topological completeness proof for predicate logic was proved in Alf by Persson [63] and the Hahn-Banach theorem in Coq [19].
Reference: [65] <author> J. Russell and Chetan Murthy. </author> <title> A direct constructive proof of Higman's Lemma. </title> <booktitle> In Proceedings of the Fifth Symposium on Logic in Computer Science, </booktitle> <pages> pages 257-269. </pages> <publisher> IEEE, </publisher> <year> 1990. </year> <month> 30 </month>
Reference-contexts: Chet Murthy produced a constructive proof of Higman's Lemma, but the proof was obtained by automatically translating a classical one and is not readable <ref> [65] </ref>. Also see Berger and Schwichtenberg [7]. 25 7.3 future directions The Nuprl mathematics is noteworthy in large measure because it expresses in a unified way both the algorithmics and descriptive aspects of mathematics.
Reference: [66] <author> Arto Salomaa. </author> <title> Two complete axiom systems for the algebras of regular events. </title> <journal> Journal of the ACM, </journal> <volume> 13 </volume> <pages> 158-169, </pages> <year> 1966. </year>
Reference-contexts: So if a string longer than n is accepted, then we can keep removing copies of b until there is an accepted string whose length is n or less. 6.2 abstract pumping lemma Automata theory can be seen as a branch of algebra <ref> [57, 66, 29, 48] </ref>. This is well illustrated in Eilenberg's books, Automata, Languages and Machines [29]. 13 Recently Kozen has discovered a beautiful generalization of regular expressions in the notion of a Kleene algebra [48].
Reference: [67] <author> Andrej Scedrov. </author> <title> Intuitionistic set theory. </title> <editor> In Morley, Scedrov, Harrington and Simpson, edi tors, </editor> <booktitle> Harvey Friedman's Research on the Foundations of Mathematics, </booktitle> <pages> pages 257-284. </pages> <publisher> North-Holland, </publisher> <year> 1985. </year>
Reference-contexts: So they seem to have in mind a foundation that includes Set Theory + Effective Procedures. Alas, there was no careful account of such a theory for them to rely on in 1969 as there are now: Alf, Coq [4, 28, 51], IZF <ref> [6, 32, 33, 54, 67] </ref>, Nuprl [30, 3, 45, 43].
Reference: [68] <author> L. Thery, Y. Bertot, and G. Kahn. </author> <title> Real theorem provers deserve real user-interfaces. </title> <booktitle> In Software Engineering Notes, </booktitle> <volume> volume 17(5), </volume> <pages> pages 120-129. </pages> <booktitle> Fifth Symposium on Software Development Environments, </booktitle> <year> 1992. </year> <month> 31 </month>
Reference-contexts: The Nuprl group is also committed to making the Prover easier to use by improving its user interface a goal we share with the CTCoq project using the Centaur system <ref> [68, 10, 9] </ref>. As provers become more powerful and user-friendly, we expect that they will be more widely used. Eventually nonexperts will use these provers to create a world wide digital library of formalized mathematics. Chapter 3 of Formal Languages and Their Relation to Automata will be part of it.
References-found: 68

