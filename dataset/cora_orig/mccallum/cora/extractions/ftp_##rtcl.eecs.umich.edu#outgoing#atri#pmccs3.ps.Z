URL: ftp://rtcl.eecs.umich.edu/outgoing/atri/pmccs3.ps.Z
Refering-URL: http://www.eecs.umich.edu/~atri/
Root-URL: http://www.cs.umich.edu
Email: fatri,ashish,kgshing@eecs.umich.edu  
Phone: 313-763-0391 (voice); 313-763-4617 (fax)  
Title: The END: An Emulated Network Device for Evaluating Adapter Design  
Author: Atri Indiresan, Ashish Mehra, and Kang G. Shin 
Web: http://www.eecs.umich.edu/RTCL/atri  
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Indiresan, A. Mehra, and K. Shin, </author> <title> "The END: Exploring QoS issues in adapter design via an E mulated N etwork D evice," </title> <note> submitted for publication, </note> <month> June </month> <year> 1996. </year>
Reference-contexts: The main goal of this paper is to propose device emulation as an effective evaluation technique to study the performance considerations and tradeoffs in network interface design. While we focus on issues in data transmission, a companion paper <ref> [1] </ref> presents further details of END , including data reception issues, as well as implementation and evaluation results. Section 2 motivates emulation as a performance evaluation tool. Section 3 describes the issues involved in designing network adapters, and Section 4 shows how END may be used to study them. <p> Though various flow control and queuing schemes have been suggested to provide these (per-connection) guarantees [8], we have shown that implementation/system overheads [9], CPU scheduling [10], and the division of services between the host and adapter <ref> [1] </ref>, greatly influence performance in ways that are often not obvious. END permits rapid implementation and evaluation of various policies and algorithms. See [10] for an example of QoS evaluation using simple emulation techniques, and experiments using END are described in [1]. 5.2 Performability Analysis END may be used to verify <p> the division of services between the host and adapter <ref> [1] </ref>, greatly influence performance in ways that are often not obvious. END permits rapid implementation and evaluation of various policies and algorithms. See [10] for an example of QoS evaluation using simple emulation techniques, and experiments using END are described in [1]. 5.2 Performability Analysis END may be used to verify the correctness of protocols, and study their behavior in the presence of faults. <p> We have designed and implemented an initial prototype of END <ref> [1] </ref>, which is capable of representing the functionality of a network adapter at different levels of detail. Further, network protocols may be divided between the host and the adapter in different ways.
Reference: [2] <author> R. C. Bedichek, "Talisman: </author> <title> Fast and accurate multicomputer simulation," </title> <booktitle> in Proceedings of Sigmetrics 95/Performance 95, </booktitle> <pages> pp. 14-24, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Mathematical models are typically used to evaluate the queuing behavior of network traffic. However, such models are usually simplified to make the analysis tractable, and they rarely account for system overheads of interrupt handling, context switches, etc., encountered in practice. Another technique is simulation, which has several significant advantages <ref> [2] </ref>, including ease of development, flexibility and versatility. Since a simulator is built in software, it can be readily modified and augmented to test new features and interfaces. Simulators are usually easier to build and cheaper than real systems.
Reference: [3] <author> L. S. Brakmo and L. L. Peterson, </author> <title> "Experiences with network simulation," </title> <booktitle> in Proceedings of ACM Sigmetrics 96, </booktitle> <pages> pp. 80-90, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: In general, not only is it difficult to provide accurate models, but, the greater the detail of the models (and hence, greater accuracy), the slower the operation of the simulator. Exceptions to this do exist in approaches that execute actual software under control of the simulator <ref> [3] </ref>. This not only enables the simulator to get accurate timings for execution of code segments, but also greatly speeds up the simulation. However, while sufficient to study the performance of software components, such approaches are not sufficient when hardware-software interaction and concurrency needs to be captured as well.
Reference: [4] <author> J. S. Ahn, P. B. Danzig, Z. Liu, and L. Yan, </author> <title> "Evaluation of TCP vegas: Emulation and experiment," </title> <booktitle> in Proc. of ACM SIGCOMM, </booktitle> <pages> pp. 185-195, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Emulation suffers from one significant drawback compared to simulation. Since the emulator runs in real time, any overhead for instrumentation and observation is real, and affects performance, unlike in a simulator, Other Emulators: Emulation has been used in different ways to evaluate networks. Hitbox <ref> [4] </ref> injected delays in Ethernet links connected in a point-to-point mode to emulate the delay and throughput of Wide Area Network links. It emulates the throughput and delay behavior of the network, as long as it is not faster than the Ethernet.
Reference: [5] <author> G. Blair, A. Campbell, G. Coulson, F. Garcia, D. Hutchison, A. Scott, and D. Shepherd, </author> <title> "A network interface unit to support continuous media," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 11, no. 2, </volume> <pages> pp. 264-275, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Hitbox [4] injected delays in Ethernet links connected in a point-to-point mode to emulate the delay and throughput of Wide Area Network links. It emulates the throughput and delay behavior of the network, as long as it is not faster than the Ethernet. Blair et al. <ref> [5] </ref> used transputer based point-to-point connections to emulate the protocols and behavior of a FDDI network. END , on the other hand, emulates in detail not only the throughput and delay of individual components of a network adapter, but also the protocols and algorithms running on the adapter.
Reference: [6] <author> R. K. Budhia, P. M. Melliar-Smith, L. E. Moser, and R. Miller, </author> <title> "Higher performance and implementation independence: Downloading a protocol onto a communication card," </title> <booktitle> in Proc. of the Intl. Conf. on Comm., </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: END , on the other hand, emulates in detail not only the throughput and delay of individual components of a network adapter, but also the protocols and algorithms running on the adapter. Downloading protocols to communication cards have been suggested as a means of enhancing performance <ref> [6] </ref>.
Reference: [7] <author> K. K. Ramakrishnan, </author> <title> "Performance considerations in designing network interfaces," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 11, no. 2, </volume> <pages> pp. 203-219, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: on adapter cards, even before the design and implementation of the hardware is complete. 3 Issues in Network Adapter Design that comprise this architecture: the host/adapter interface 1 , the data transfer control, transmis 1 Note that most network adapters are accessed by the host via the system I/O bus <ref> [7] </ref>. sion/reception queuing, buffer management, and the adapter/network interface. For efficient and flexible implementation, an adapter typically employs one or more general-purpose microprocessors, as well as custom hardware, under the control of the adapter firmware. Adapters can be quite complex, depending on their performance goals and the underlying network technology.
Reference: [8] <author> C. M. Aras, J. F. Kurose, D. S. Reeves, and H. Schulzrinne, </author> <title> "Real-time communication in packet-switched networks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 122-139, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: We discuss some examples below. 5.1 Design for QoS Quality-of-service (QoS) requirements, which may include minimum bandwidth, bounded delays, delay jitter and packet loss rates, are often required on connections between peer applications. Though various flow control and queuing schemes have been suggested to provide these (per-connection) guarantees <ref> [8] </ref>, we have shown that implementation/system overheads [9], CPU scheduling [10], and the division of services between the host and adapter [1], greatly influence performance in ways that are often not obvious. END permits rapid implementation and evaluation of various policies and algorithms.
Reference: [9] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> "Resource management for real-time communication: Making theory meet practice," </title> <booktitle> in Proc. of 2nd Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Though various flow control and queuing schemes have been suggested to provide these (per-connection) guarantees [8], we have shown that implementation/system overheads <ref> [9] </ref>, CPU scheduling [10], and the division of services between the host and adapter [1], greatly influence performance in ways that are often not obvious. END permits rapid implementation and evaluation of various policies and algorithms.
Reference: [10] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> "Structuring communication software for quality-of-service guarantees," </title> <booktitle> in Proc. of 17th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: Though various flow control and queuing schemes have been suggested to provide these (per-connection) guarantees [8], we have shown that implementation/system overheads [9], CPU scheduling <ref> [10] </ref>, and the division of services between the host and adapter [1], greatly influence performance in ways that are often not obvious. END permits rapid implementation and evaluation of various policies and algorithms. See [10] for an example of QoS evaluation using simple emulation techniques, and experiments using END are described <p> suggested to provide these (per-connection) guarantees [8], we have shown that implementation/system overheads [9], CPU scheduling <ref> [10] </ref>, and the division of services between the host and adapter [1], greatly influence performance in ways that are often not obvious. END permits rapid implementation and evaluation of various policies and algorithms. See [10] for an example of QoS evaluation using simple emulation techniques, and experiments using END are described in [1]. 5.2 Performability Analysis END may be used to verify the correctness of protocols, and study their behavior in the presence of faults.
References-found: 10

