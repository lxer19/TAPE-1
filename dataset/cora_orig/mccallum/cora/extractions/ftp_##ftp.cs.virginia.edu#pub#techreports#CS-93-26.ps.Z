URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-93-26.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Preemptive Scheduling of Periodic Tasks on Multiprocessor: Dynamic Algorithms and Their Performance  
Author: Yingfeng Oh and Sang H. Son 
Abstract: Technical Report No. CS-93-26 May 24, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E.G. COFFMAN, JR. (ED.), </author> <title> Computer and Job Shop Scheduling Theory, </title> <address> New York: </address> <publisher> Wiley, </publisher> <year> 1975. </year>
Reference-contexts: Then / 2.33. In order to prove the above bound, we define a function that maps the utilization of tasks into the real interval <ref> [0, 1] </ref> as follows: or , where a = . Let be k j tasks assigned to processor P j , and let . <p> Then 2.33, where a = . In order to prove the above bound, we define a function that maps the utilization of tasks into the real interval <ref> [0, 1] </ref> as it is done in the previous section. The function is the same as the one used for RMFF-WC Algorithm. For a processor P j , its deficiency d j and its coarseness a j are similarly defined as those for RMFF-WC Algorithm.
Reference: [2] <author> E.G. COFFMAN, JR., M.R. GAREY, AND D.S. JOHNSON, </author> <title> Approximate Algorithms for Bin Packing An Updated Survey, </title> <booktitle> In Algorithm Design for Computer System Design, </booktitle> <pages> pp. 49-106, </pages> <editor> G. AUSIELLO, M. LUCERTINIT, and P. SERAFINI (Eds), </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference: [3] <author> S. DAVARI AND S.K. DHALL, </author> <title> An On Line Algorithm for Real-Time Tasks Allocation, </title> <booktitle> IEEE Real-Time Systems Symposium, </booktitle> <month> 194-200 </month> <year> (1986). </year>
Reference: [4] <author> S. DAVARI AND S.K. DHALL, </author> <title> On a Periodic Real-Time Task Allocation Problem, </title> <booktitle> Proc. of 19th Annual International Conference on System Sciences, </booktitle> <month> 133-141 </month> <year> (1986). </year>
Reference: [5] <author> S.K. DHALL AND C.L. LIU, </author> <title> On a Real-Time Scheduling Problem, </title> <note> Operations Research 26, </note> <month> 127-140 </month> <year> (1978). </year>
Reference-contexts: 1. Readers can convince themselves of the existence of errors in <ref> [5] </ref> by reading theorem 4.2, since the worst-case examples given in the theorem are also the worst-case examples for RMFF. If interested, see [11] for details. - 2 - exclusively. <p> The way that these two algorithms are so called is to distinguish them from the other two algorithms RMNF and RMFF studied by Dhall and Liu <ref> [5] </ref>. The key difference between these two algorithms RMNF-WC and RMFF-WC and RMNF and RMFF is that RMNF-WC and RMFF-WC are truly dynamic algorithms, while RMNF and RMFF are static algorithms. <p> This condition is a worst-case condition, and therefore it is referred to as Condition WC. The function f (m) = is a strictly decreasing function with regards to m, the number of tasks on a processor. In studying the performance of RMNF and RMFF, Dhall and Liu <ref> [5] </ref> used a different schedulability condition, which is stated as follows: Condition IP: Let be a set of tasks with periods . Let .
Reference: [6] <author> M.R. GAREY AND D.S. JOHNSON, </author> <title> Computers and Intractability: A Guide to the Theory of NP-completeness, W.H. </title> <publisher> Freeman and Company, </publisher> <address> NY, </address> <year> 1978. </year>
Reference: [7] <author> D.S. JOHNSON, </author> <title> Near-Optimal Bin Packing Algorithms, </title> <type> Doctoral Thesis, </type> <institution> MIT, </institution> <year> 1973 </year>
Reference: [8] <author> J. LEHOCZKY, L. SHA, AND Y. DING, </author> <title> The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior, </title> <booktitle> IEEE Real-Time Symposium, </booktitle> <month> 166-171 </month> <year> (1989). </year>
Reference-contexts: Both Condition WC and Condition IP can be easily used to test the schedulability of a task set, since the only parameters involved are the total utilization of tasks and the number of tasks. Another schedulability condition, which was given by Lehoczky et al <ref> [8] </ref>, takes into account both the computation time and the period of a task when a task is scheduled. It is called Condition IFF (IF and only iF) since it is a sufficient and necessary condition.
Reference: [9] <author> J.Y.T. LEUNG AND J. WHITEHEAD. </author> <title> On the Complexity of Fixed-Priority Scheduling of Periodic, Real-Time Tasks, Performance Evaluation 2, </title> <month> 237-250 </month> <year> (1982). </year>
Reference: [10] <author> C.L. LIU AND J. LAYLAND, </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment, </title> <journal> J. Assoc. Comput. </journal> <volume> Machinery 10(1), </volume> <month> 174-189 </month> <year> (1973) </year>
Reference-contexts: Condition WC: If a set of tasks is scheduled according to the rate-monotonic scheduling algo rithm, then the minimum achievable utilization factor is . As m approaches infinity, the minimum utilization factor approaches ln2. This schedulability condition was first given by Liu and Layland <ref> [10] </ref>. It implies that a task set can be scheduled to meet their deadlines if the total utilization factor of the tasks is less than a threshold number, which is given by , where m is the number of tasks to be scheduled.
Reference: [11] <author> Y. OH AND S.H. SON, </author> <title> Tight Bounds of Heuristics for a Real-Time Scheduling Problem, </title> <note> Submitted for Publication, </note> <month> April </month> <year> 1993. </year>
Reference-contexts: 1. Readers can convince themselves of the existence of errors in [5] by reading theorem 4.2, since the worst-case examples given in the theorem are also the worst-case examples for RMFF. If interested, see <ref> [11] </ref> for details. - 2 - exclusively. The performance of FFDUF is tightly bounded by 2, while the performance of NEXT-FIT-M is upper bounded by a number S M , which is a function of the pre-selected number M. The FFDUF is obviously an static algorithm. <p> Table 2: Performance of Several Multiprocessor Scheduling Algorithms Condition WC Condition IP Condition IFF Next-Fit 2.88 2.67 2.88 First-Fit 2.33 2.33 <ref> [11] </ref> ? Best-Fit 2.33 2.33 [11] ? FFDUF 2.0 ? ? f u i ( ) i 1= 1 3 N N 0 lim N 0 N 0 fi - 21 - Appendix Lemma 4.4: If tasks are assigned to the processors according to the RMFF-WC Algorithm, among all processors to <p> Table 2: Performance of Several Multiprocessor Scheduling Algorithms Condition WC Condition IP Condition IFF Next-Fit 2.88 2.67 2.88 First-Fit 2.33 2.33 <ref> [11] </ref> ? Best-Fit 2.33 2.33 [11] ? FFDUF 2.0 ? ? f u i ( ) i 1= 1 3 N N 0 lim N 0 N 0 fi - 21 - Appendix Lemma 4.4: If tasks are assigned to the processors according to the RMFF-WC Algorithm, among all processors to each of which n tasks
Reference: [12] <author> P. </author> <title> SERLIN, Scheduling of Time Critical Processes, </title> <booktitle> Proceedings of the Spring Joint Computers Conference 40, </booktitle> <month> 925-932 </month> <year> (1972). </year> <title> t k 1, t k 2, t k m, 1-, , , u k j, j 1= n y 1+( ) 2 1-( ) u y l, l 1= n y u k i, n y 1+( ) 2 1-( ) u y l, l 1= t k i, u k i, n y 1+( ) 2 1-( ) u y l, l 1= u k j, </title> <address> j 1= m 1-m 1-m 1 </address>
References-found: 12

