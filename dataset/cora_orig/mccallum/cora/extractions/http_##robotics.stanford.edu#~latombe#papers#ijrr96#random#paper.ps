URL: http://robotics.stanford.edu/~latombe/papers/ijrr96/random/paper.ps
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.robotics.stanford.edu
Title: A Random Sampling Scheme for Path Planning  
Author: Jerome Barraquand Lydia Kavraki Jean-Claude Latombe Tsai-Yen Li Rajeev Motwani Prabhakar Raghavan 
Date: June 24, 1996  
Abstract: Several randomized path planners have been proposed during the last few years. Their attractiveness stems from their applicability to virtually any type of robots, and their empirically observed success. In this paper we attempt to present a unifying view of these planners and to theoretically explain their success. First, we introduce a general planning scheme that consists of randomly sampling the robot's configuration space. We then describe two previously developed planners as instances of planners based on this scheme, but applying very different sampling strategies. These planners are probabilistically complete: if a path exists, they will find one with high probability, if we let them run long enough. Next, for one of the planners, we analyze the relation between the probability of failure and the running time. Under assumptions characterizing the "goodness" of the robot's free space, we show that the running time only grows as the absolute value of the logarithm of the probability of failure that we are willing to tolerate. We also show that it increases at a reasonable rate as the space goodness degrades. In the last section we suggest directions for future research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> J.M. Ahuactzin Larios, Le Fil d'Ariane: Une Methode de Planification Generale. Application a la Planification Automatique de Trajectoires, These de l'Institut National Polytechnique de Grenoble, </institution> <month> Septembre </month> <year> 1994. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include <ref> [1, 5, 15, 16, 35, 36] </ref>. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners. <p> Any path lying in C f ree that joins these two configurations is a solution of this problem. We assume for simplificity that C is the cube <ref> [0; 1] </ref> n , so that each configuration q is described by an n-tuple (q 1 ; : : : ; q n ). However, it is straightforward to extend our presentation to cases where C is multiply connected, i.e., one or more dimensions can "wrap around". <p> Processing each query then only requires connecting the input initial and goal configurations to the roadmap. If the queries are not known in advance, it seems reasonable to construct the roadmap by choosing configurations uniformly at random from <ref> [0; 1] </ref> n since the resulting free configurations are then uniformly distributed over C free . However, we will see in Section 3.2 that, while the roadmap is being generated, it is possible to derive heuristic information from it and bias the selection of the new configurations. <p> Return q. At Step 2 (a) let q = (q 1 ; : : : ; q n ) and = clearance (q). Configurations are picked at random from the volume defined by i=1;:::;n [q i =; q i + =] " <ref> [0; 1] </ref> n . According to Definition 1, all configurations in this volume are adjacent to q.
Reference: [2] <author> S. </author> <title> Arya and D.M. Mount, Approximate Range Searching, </title> <booktitle> Proc. of ACM Symp. on Computational Geometry, </booktitle> <pages> 172-181, </pages> <year> 1995. </year>
Reference-contexts: The number of adjacency checks is at most proportional to f 2 ; however, the planner may choose not to test all pairs of free configurations for adjacency. 4 4 Checking the sample configurations for adjacency is an instance of the orthogonal range-searching problem <ref> [2, 38] </ref>. Using the range-tree technique, the pairs of adjacent configurations can be computed in O (f log n1 f ) time, or slightly faster.
Reference: [3] <author> J. Barraquand and J.C. Latombe, </author> <title> Robot Motion Planning: A Distributed Representation Approach, </title> <journal> The Int. J. of Robotics Research, </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: With this philosophy in mind, we have designed new path planners and experimented with them in large configuration spaces. One of them, described in <ref> [3, 4, 29] </ref>, is a potential-field-based planner that escapes local minima by performing random walks; in the following, we will refer to it as the 1 In any case, very few tailor-made planners have been successfully designed for specific robots with more than four dofs. 2 potential-field planner. <p> This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> the analysis will not yield useful results; on the other hand, if they are too general, the results will be too weak. 3 Specific Planners We now present two planners that make use of the above scheme with different sampling strategies. 3.1 Potential-Field Planner This planner was originally described in <ref> [3, 4, 29] </ref>, along with experimental results. 5 Extensions and additional experimental results were presented in [8, 11, 26, 27]. Here, we focus on its relation to the general scheme presented above. <p> According to Definition 1, all configurations in this volume are adjacent to q. To guarantee that Step 2 does not loop for ever, 5 The planner is available by anonymous ftp from flamingo.stanford.edu:/pub/li/rpp3d.tar.gz. 6 Techniques to automatically construct this function are proposed in <ref> [3, 29] </ref>. 6 U must have no local minimum in the boundary of C free . This can easily be obtained by including in the definition of U (q) a term proportional to 1/clearance (q). <p> Although the global geometry of C f ree is unknown, U can be seen as a specialist that gives some heuristic indications about this geometry, i.e.: which directions are promising and which aren't. The techniques in <ref> [3, 29] </ref> compute U by 7 In [3], we note that, on the average, a random walk of length ` ends p ` away from its starting point. <p> Although the global geometry of C f ree is unknown, U can be seen as a specialist that gives some heuristic indications about this geometry, i.e.: which directions are promising and which aren't. The techniques in [3, 29] compute U by 7 In <ref> [3] </ref>, we note that, on the average, a random walk of length ` ends p ` away from its starting point. This leads us to suggest choosing p ` according to a truncated Laplace distribution with mean value equal to the "radius" of the configuration space. <p> On the other hand, computing local-minima-free potentials in large dimensional spaces is a difficult problem [25] that is at least as hard as path planning itself. Using well-known properties of random motions, the potential-field planner can be shown probabilistically complete <ref> [3, 28] </ref>. Moreover, a calculation of the finite expected number of invocations of Escape-Motion is given in [28]. The idea underlying this calculation is the following. <p> But, in practice, the p ij 's are unknown. In fact, a key issue in analyzing a planner based on random sampling is to translate some geometric property of the free space into probabilistic terms. The potential-field planner has successfully solved many difficult problems (e.g., see <ref> [3, 8, 11, 26] </ref>). However, it is easy to create problems that it fails to solve in a reasonable amount of time, though they admit rather obvious solutions.
Reference: [4] <author> J. Barraquand, B. Langlois, and J.C. Latombe, </author> <title> Numerical potential Field Techniques for Robot Path Planning, </title> <journal> IEEE Tr. on Syst., Man, and Cyb., </journal> <volume> 22(2) </volume> <pages> 224-241, </pages> <year> 1992. </year>
Reference-contexts: With this philosophy in mind, we have designed new path planners and experimented with them in large configuration spaces. One of them, described in <ref> [3, 4, 29] </ref>, is a potential-field-based planner that escapes local minima by performing random walks; in the following, we will refer to it as the 1 In any case, very few tailor-made planners have been successfully designed for specific robots with more than four dofs. 2 potential-field planner. <p> the analysis will not yield useful results; on the other hand, if they are too general, the results will be too weak. 3 Specific Planners We now present two planners that make use of the above scheme with different sampling strategies. 3.1 Potential-Field Planner This planner was originally described in <ref> [3, 4, 29] </ref>, along with experimental results. 5 Extensions and additional experimental results were presented in [8, 11, 26, 27]. Here, we focus on its relation to the general scheme presented above.
Reference: [5] <author> P. Bessiere, E. Mazer, J.M. Ahuactzin, </author> <title> Planning in a Continuous Space with Forbidden Regions: The Ariadne's Clew Algorithm, Algorithmic Foundations of Robotics, </title> <editor> K. Goldberg et al. (eds.), AKPeters, </editor> <address> Wellesley, MA, 39-47, </address> <year> 1995. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include <ref> [1, 5, 15, 16, 35, 36] </ref>. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners.
Reference: [6] <author> J.F. Canny, </author> <title> The Complexity of Robot Motion Planning, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: This result is remarkably stable: it still holds for rather specific robots, e.g., planar linkages consisting of links serially connected by revolute joints [17] and sets of rectangles executing axis-parallel translations in a rectangular workspace [13, 14]. Though general and complete algorithms have been proposed <ref> [6, 42] </ref>, their high complexity precludes any useful application. This negative result has led some researchers to seek heuristic algorithms. fl Salomon Brothers Int. Ltd., Victoria Plaza, 111 Buckingham Palace Road, London SW1W 0SB, UK. Email: jerome.barraquand@sbil.co.uk. y Department of Computer Science, Stanford University, Stanford, CA 94305, USA. <p> But every extension of the basic problem adds in computational complexity. For instance, allowing moving obstacles makes the problem exponential in the number of moving obstacles <ref> [6, 41] </ref>; uncertainties in control and sensing make the problem exponential in the complexity of the robot environment [6]. Before we can effectively investigate such extensions in large configuration spaces, it seems that we must better understand how to practically solve basic path planning. <p> But every extension of the basic problem adds in computational complexity. For instance, allowing moving obstacles makes the problem exponential in the number of moving obstacles [6, 41]; uncertainties in control and sensing make the problem exponential in the complexity of the robot environment <ref> [6] </ref>. Before we can effectively investigate such extensions in large configuration spaces, it seems that we must better understand how to practically solve basic path planning.
Reference: [7] <author> D. Challou and M. Gini, </author> <title> Parallel Formulation of Informed Randomized Search for Robot Motion Planning Problems, </title> <booktitle> Proc. of IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 709-714, </pages> <address> Nayoga, Japan, </address> <year> 1995. </year>
Reference-contexts: This paper does not present experimental results obtained with our planners. Many such results were previously reported in [3, 8, 18, 20, 21, 24, 26, 27] and in papers by other authors <ref> [7, 11, 47] </ref>. The reader is referred to [34] for a textbook on randomized algorithms and sampling techniques. 2 General Scheme We consider the problem of planning collision-free paths for an arbitrary n-degree-of-freedom holonomic 3 robot A.
Reference: [8] <author> H. Chang and T.Y. Li, </author> <title> Assembly Maintainability Study with Motion Planning, </title> <booktitle> Proc. of IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 1012-1019, </pages> <address> Nagoya, </address> <year> 1995. </year>
Reference-contexts: Both the potential-field and the roadmap planners have been used to check that parts can be removed from an aircraft engine for inspection and maintenance <ref> [8] </ref>; here, paths are generated in configuration spaces having only six dimensions, but the parts have particularly complex geometry. These two planners achieve probabilistic completeness. <p> This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> the results will be too weak. 3 Specific Planners We now present two planners that make use of the above scheme with different sampling strategies. 3.1 Potential-Field Planner This planner was originally described in [3, 4, 29], along with experimental results. 5 Extensions and additional experimental results were presented in <ref> [8, 11, 26, 27] </ref>. Here, we focus on its relation to the general scheme presented above. <p> But, in practice, the p ij 's are unknown. In fact, a key issue in analyzing a planner based on random sampling is to translate some geometric property of the free space into probabilistic terms. The potential-field planner has successfully solved many difficult problems (e.g., see <ref> [3, 8, 11, 26] </ref>). However, it is easy to create problems that it fails to solve in a reasonable amount of time, though they admit rather obvious solutions.
Reference: [9] <author> P.C. Chen, </author> <title> Adaptive Path Planning: Algorithm and Analysis, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 721-728, </pages> <address> Nagoya, </address> <year> 1995. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include [1, 5, 15, 16, 35, 36]. Formal attempts to predict the behavior of specific random planners are proposed in very few papers <ref> [9, 28] </ref>. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners. In the planners cited above, the robot's free space is not explicitly represented, but randomly sampled.
Reference: [10] <author> E.G. Gilbert, D.W. Johnson, and S.S. Keerthi, </author> <title> A Fast Procedure for Computing the Distance Between Complex Objects in Three-Dimensional Space, </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> 4(2) </volume> <pages> 193-203, </pages> <year> 1988. </year>
Reference-contexts: On the other hand, reasonably efficient algorithms are available to compute the Euclidean distance between two objects in three-dimensional space (e.g., <ref> [10, 32, 37, 39, 45] </ref>).
Reference: [11] <author> L. Graux, P. Millies, P.L. Kociemba, and B. Langlois, </author> <title> Integration of a Path Generation Algorithm into Off-Line Programming of AIRBUS Panels. Aerospace Automated Fastening Conf. and Exp., </title> <type> SAE Tech. Paper 922404, </type> <year> 1992. </year>
Reference-contexts: This paper does not present experimental results obtained with our planners. Many such results were previously reported in [3, 8, 18, 20, 21, 24, 26, 27] and in papers by other authors <ref> [7, 11, 47] </ref>. The reader is referred to [34] for a textbook on randomized algorithms and sampling techniques. 2 General Scheme We consider the problem of planning collision-free paths for an arbitrary n-degree-of-freedom holonomic 3 robot A. <p> the results will be too weak. 3 Specific Planners We now present two planners that make use of the above scheme with different sampling strategies. 3.1 Potential-Field Planner This planner was originally described in [3, 4, 29], along with experimental results. 5 Extensions and additional experimental results were presented in <ref> [8, 11, 26, 27] </ref>. Here, we focus on its relation to the general scheme presented above. <p> But, in practice, the p ij 's are unknown. In fact, a key issue in analyzing a planner based on random sampling is to translate some geometric property of the free space into probabilistic terms. The potential-field planner has successfully solved many difficult problems (e.g., see <ref> [3, 8, 11, 26] </ref>). However, it is easy to create problems that it fails to solve in a reasonable amount of time, though they admit rather obvious solutions.
Reference: [12] <author> D. Halperin, J.C. Latombe, and R. Motwani, </author> <title> Dynamic Maintenance of Kinematic Structures, </title> <type> Tech. Rep. </type> , <institution> Dept. of Computer Science, Stanford Univ., </institution> <year> 1995. </year>
Reference-contexts: A perhaps more efficient solution would be to create a single data structure for all the rigid bodies forming the robot and to efficiently update this data structure when configuration parameters vary (as proposed in <ref> [12] </ref>). Then the sampling strategy should try to generate configurations in a sequence that minimizes update costs. The random sampling scheme for path planning proposed in this paper offers many opportunities for further research.
Reference: [13] <author> J.E. Hopcroft, J.T. Schwartz, and M. Sharir, </author> <title> On the Complexity of Motion Planning for Multiple Independent Objects: PSPACE-Hardness of the `Warehouseman's Problem', </title> <journal> Int. J. of Robotics Research, </journal> <volume> 3(4) </volume> <pages> 76-88, </pages> <year> 1984. </year>
Reference-contexts: This result is remarkably stable: it still holds for rather specific robots, e.g., planar linkages consisting of links serially connected by revolute joints [17] and sets of rectangles executing axis-parallel translations in a rectangular workspace <ref> [13, 14] </ref>. Though general and complete algorithms have been proposed [6, 42], their high complexity precludes any useful application. This negative result has led some researchers to seek heuristic algorithms. fl Salomon Brothers Int. Ltd., Victoria Plaza, 111 Buckingham Palace Road, London SW1W 0SB, UK.
Reference: [14] <author> J.E. Hopcroft and G.T. Wilfong, </author> <title> Reducing Multiple Object Motion Planning to Graph Searching. </title> <journal> SIAM J. on Computing, </journal> <volume> 15(3) </volume> <pages> 768-785, </pages> <year> 1986. </year>
Reference-contexts: This result is remarkably stable: it still holds for rather specific robots, e.g., planar linkages consisting of links serially connected by revolute joints [17] and sets of rectangles executing axis-parallel translations in a rectangular workspace <ref> [13, 14] </ref>. Though general and complete algorithms have been proposed [6, 42], their high complexity precludes any useful application. This negative result has led some researchers to seek heuristic algorithms. fl Salomon Brothers Int. Ltd., Victoria Plaza, 111 Buckingham Palace Road, London SW1W 0SB, UK.
Reference: [15] <author> T. Horsch, F. Schwarz, and H. Tolle, </author> <title> Motion Planning for Many Degrees of Freedom Random Reflections at C-Space Obstacles, </title> <booktitle> Proc. of IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 3318-3323, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include <ref> [1, 5, 15, 16, 35, 36] </ref>. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners.
Reference: [16] <author> Y.K. Hwang and P.C. Chen, </author> <title> A Heuristic and Complete Planner for the Classical Mover's Problem, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 729-736, </pages> <address> Nagoya, </address> <year> 1995. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include <ref> [1, 5, 15, 16, 35, 36] </ref>. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners.
Reference: [17] <author> D.A. Joseph and W.H. Plantiga, </author> <title> On the Complexity of Reachability and Motion Planning Questions. </title> <booktitle> Proc. of the First ACM Symp. on Computational Geometry, </booktitle> <pages> 62-66, </pages> <year> 1985. </year> <month> 21 </month>
Reference-contexts: This result is remarkably stable: it still holds for rather specific robots, e.g., planar linkages consisting of links serially connected by revolute joints <ref> [17] </ref> and sets of rectangles executing axis-parallel translations in a rectangular workspace [13, 14]. Though general and complete algorithms have been proposed [6, 42], their high complexity precludes any useful application. This negative result has led some researchers to seek heuristic algorithms. fl Salomon Brothers Int.
Reference: [18] <author> L. Kavraki, </author> <title> Random Networks in Configuration Space for Fast Path Planning, </title> <type> Ph.D. Thesis, Rep. </type> <institution> STAN--CS-TR-95-1535, Comp. Sci. Dept., Stanford Univ., </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: Another planner, presented in <ref> [18, 20, 21, 24] </ref>, precomputes a "roadmap" (network) of simple paths connecting randomly selected configurations and tries to construct a path between any two input configurations by connecting them to this roadmap; we will refer to this planner as the roadmap planner. <p> But, for the roadmap planner, we have proven stronger results that relate the probability that it finds a path, when one exists, to its running time <ref> [18, 19, 22, 23] </ref>. In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include [1, 5, 15, 16, 35, 36]. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. <p> This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> We did some experiments with this idea, but we only got limited results. 3.2 Roadmap Planner The problems encountered with the potential-field planner led us to develop another planner, the roadmap planner 8 described in <ref> [18, 20, 21, 24] </ref>. Several variants of this planner have been implemented; we present one below. Unlike the potential-field planner, this new planner uses no problem-specific heuristics. <p> Indeed, these proofs are longer and more technical, while the theorems themselves are less important to a robotics audience. Finally, Theorem 8 is essentially a refinement of Theorem 7. Its proof can be found in <ref> [18, 19] </ref>. <p> Note that Permeation is a last resort; hopefully, much if not all of the connectivity information should have been discovered before this step. It is worth noticing that the algorithms of the implemented planner presented in <ref> [18, 20, 21] </ref> are similar to those described here, except that it uses the potential-field planner of Section 3.1 instead of the complex planner. <p> The potential-field planner is not complete, but it is quite rare in practice that two milestones in the same component of the free space can be connected neither by invoking Connect at Step 3 of the proprocessing, nor by the potential-field planner. The planner of <ref> [18, 20, 21] </ref> seems a good approximation of the algorithms given here, and the analysis proposed below is relevant to this planner. The query processing is handled by the following algorithm, which is similar to the query-processing algorithm of Section 3.2: Query-Processing (q init ; q goal ): 1.
Reference: [19] <author> L. Kavraki, M. Kolountzakis, and J.C. Latombe, </author> <title> Analysis of Probabilistic Roadmaps for Path Planning, </title> <booktitle> Proc. of the IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 3020-3025, </pages> <address> Minneapolis, MN, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: But, for the roadmap planner, we have proven stronger results that relate the probability that it finds a path, when one exists, to its running time <ref> [18, 19, 22, 23] </ref>. In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include [1, 5, 15, 16, 35, 36]. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. <p> Indeed, these proofs are longer and more technical, while the theorems themselves are less important to a robotics audience. Finally, Theorem 8 is essentially a refinement of Theorem 7. Its proof can be found in <ref> [18, 19] </ref>. <p> According to Theorem 1, this is achieved with high probability if: s ! 2 log ! 17 Estimate of s using Theorem 7: Using (3) we can derive the following order of magnitude for s that will make the planning algorithm of Section 4.2 to return yes with high probability <ref> [19] </ref>: s ! 2 log ! Estimate of s using Theorem 8: The bound given by (4) leads to choosing (see [19]): s ! 2 log log ! Comparison: Note that to answer queries with high probability it is necessary and sufficient in this example to pick a bounded number of <p> Theorem 7: Using (3) we can derive the following order of magnitude for s that will make the planning algorithm of Section 4.2 to return yes with high probability <ref> [19] </ref>: s ! 2 log ! Estimate of s using Theorem 8: The bound given by (4) leads to choosing (see [19]): s ! 2 log log ! Comparison: Note that to answer queries with high probability it is necessary and sufficient in this example to pick a bounded number of milestones in the box, which happens with probability ! 2 .
Reference: [20] <author> L. Kavraki and J.C. Latombe, </author> <title> Randomized Preprocessing of Configuration Space for Fast Path Planning, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 2138-2145, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: Another planner, presented in <ref> [18, 20, 21, 24] </ref>, precomputes a "roadmap" (network) of simple paths connecting randomly selected configurations and tries to construct a path between any two input configurations by connecting them to this roadmap; we will refer to this planner as the roadmap planner. <p> This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> We did some experiments with this idea, but we only got limited results. 3.2 Roadmap Planner The problems encountered with the potential-field planner led us to develop another planner, the roadmap planner 8 described in <ref> [18, 20, 21, 24] </ref>. Several variants of this planner have been implemented; we present one below. Unlike the potential-field planner, this new planner uses no problem-specific heuristics. <p> Note that Permeation is a last resort; hopefully, much if not all of the connectivity information should have been discovered before this step. It is worth noticing that the algorithms of the implemented planner presented in <ref> [18, 20, 21] </ref> are similar to those described here, except that it uses the potential-field planner of Section 3.1 instead of the complex planner. <p> The potential-field planner is not complete, but it is quite rare in practice that two milestones in the same component of the free space can be connected neither by invoking Connect at Step 3 of the proprocessing, nor by the potential-field planner. The planner of <ref> [18, 20, 21] </ref> seems a good approximation of the algorithms given here, and the analysis proposed below is relevant to this planner. The query processing is handled by the following algorithm, which is similar to the query-processing algorithm of Section 3.2: Query-Processing (q init ; q goal ): 1.
Reference: [21] <author> L. Kavraki and J.C. Latombe, </author> <title> Randomized Preprocessing of Configuration Space for Path Planning: Articulated Robots, </title> <booktitle> Proc. IROS, </booktitle> <pages> 1764-1771, </pages> <address> Munchen, Germany, </address> <year> 1994. </year>
Reference-contexts: Another planner, presented in <ref> [18, 20, 21, 24] </ref>, precomputes a "roadmap" (network) of simple paths connecting randomly selected configurations and tries to construct a path between any two input configurations by connecting them to this roadmap; we will refer to this planner as the roadmap planner. <p> This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> We did some experiments with this idea, but we only got limited results. 3.2 Roadmap Planner The problems encountered with the potential-field planner led us to develop another planner, the roadmap planner 8 described in <ref> [18, 20, 21, 24] </ref>. Several variants of this planner have been implemented; we present one below. Unlike the potential-field planner, this new planner uses no problem-specific heuristics. <p> Note that Permeation is a last resort; hopefully, much if not all of the connectivity information should have been discovered before this step. It is worth noticing that the algorithms of the implemented planner presented in <ref> [18, 20, 21] </ref> are similar to those described here, except that it uses the potential-field planner of Section 3.1 instead of the complex planner. <p> The potential-field planner is not complete, but it is quite rare in practice that two milestones in the same component of the free space can be connected neither by invoking Connect at Step 3 of the proprocessing, nor by the potential-field planner. The planner of <ref> [18, 20, 21] </ref> seems a good approximation of the algorithms given here, and the analysis proposed below is relevant to this planner. The query processing is handled by the following algorithm, which is similar to the query-processing algorithm of Section 3.2: Query-Processing (q init ; q goal ): 1.
Reference: [22] <author> L. Kavraki, J.C. Latombe, R. Motwani, and P. Raghavan, </author> <title> Randomized Query Processing in Robot Motion Planning, </title> <type> Rep. </type> <institution> STAN-CS-TR-94-1533, Dept. of Computer Science, Stanford University, </institution> <year> 1994. </year>
Reference-contexts: But, for the roadmap planner, we have proven stronger results that relate the probability that it finds a path, when one exists, to its running time <ref> [18, 19, 22, 23] </ref>. In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include [1, 5, 15, 16, 35, 36]. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. <p> The proofs of two other theorems (Theorems 3 and 4) are straighforward and short; they appear in the text below. For the proofs of Theorems 5 and 6, we refer the reader to <ref> [22, 23] </ref>. Indeed, these proofs are longer and more technical, while the theorems themselves are less important to a robotics audience. Finally, Theorem 8 is essentially a refinement of Theorem 7. Its proof can be found in [18, 19].
Reference: [23] <author> L. Kavraki, J.C. Latombe, R. Motwani, and P. Raghavan, </author> <title> Randomized Query Processing in Robot Path Planning, </title> <booktitle> 27th Annual ACM Symp. on Theory of Computing (STOC), </booktitle> <pages> 353-362, </pages> <address> Las Vegas, NV, </address> <year> 1995. </year> <note> (A journal version of this paper will appear in Journal of Computer and System Sciences.) </note>
Reference-contexts: But, for the roadmap planner, we have proven stronger results that relate the probability that it finds a path, when one exists, to its running time <ref> [18, 19, 22, 23] </ref>. In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include [1, 5, 15, 16, 35, 36]. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. <p> The proofs of two other theorems (Theorems 3 and 4) are straighforward and short; they appear in the text below. For the proofs of Theorems 5 and 6, we refer the reader to <ref> [22, 23] </ref>. Indeed, these proofs are longer and more technical, while the theorems themselves are less important to a robotics audience. Finally, Theorem 8 is essentially a refinement of Theorem 7. Its proof can be found in [18, 19]. <p> By the preceding discussion, we have: Theorem 4 Deterministic-Permeation correctly solves the permeation problem using O (pk) probes. The following lower bound establishes that Deterministic-Permeation is optimal. The proof uses a non-trivial adversary argument <ref> [23] </ref>. Theorem 5 For 1 k p, T (p; k) = (pk). We now give a randomized algorithm that beats the lower bound of Theorem 5 when the sizes of the k cliques differ significantly, which is often the case in practice (when k &gt; 1). <p> E.g., if the free space is a rectangle having very small width ~, then ~ inf ~, but * = 1. 19 in which the number of invocations of the connector is larger by a factor of 2 t . See <ref> [23] </ref> for more detail. We believe that future research should develop and analyze new sampling strategies, as well as combinations of strategies, under various assumptions. In particular, it would be of particular interest to investigate strategies suitable for single-query planning problems.
Reference: [24] <author> L. Kavraki, P. Svestka, J.C. Latombe, and M. Overmars, </author> <title> Probabilistic Roadmaps for Fast Path Planning in High Dimensional Configuration Spaces, </title> <note> to appear in IEEE Tr. on Robotics and Automation. </note>
Reference-contexts: Another planner, presented in <ref> [18, 20, 21, 24] </ref>, precomputes a "roadmap" (network) of simple paths connecting randomly selected configurations and tries to construct a path between any two input configurations by connecting them to this roadmap; we will refer to this planner as the roadmap planner. <p> This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> We did some experiments with this idea, but we only got limited results. 3.2 Roadmap Planner The problems encountered with the potential-field planner led us to develop another planner, the roadmap planner 8 described in <ref> [18, 20, 21, 24] </ref>. Several variants of this planner have been implemented; we present one below. Unlike the potential-field planner, this new planner uses no problem-specific heuristics.
Reference: [25] <author> D.E. Koditschek, </author> <title> Exact Robot Navigation by Means of Potential Functions: Some Topological Considerations, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <address> Raleigh, NC, 1-6, </address> <year> 1987. </year>
Reference-contexts: Although the resulting U often prevents the planner from getting trapped into big obstacle cavities, it still has local minima and therefore is an imperfect characterization of the free space's geometry. On the other hand, computing local-minima-free potentials in large dimensional spaces is a difficult problem <ref> [25] </ref> that is at least as hard as path planning itself. Using well-known properties of random motions, the potential-field planner can be shown probabilistically complete [3, 28]. Moreover, a calculation of the finite expected number of invocations of Escape-Motion is given in [28].
Reference: [26] <author> Y. Koga, K. Kondo, J. Kuffner, and J.C. Latombe, </author> <title> Planning Motions with Intentions. </title> <booktitle> Proc. of SIG-GRAPH'94, </booktitle> <pages> 395-408, </pages> <year> 1994. </year>
Reference-contexts: Both these planners have been successfully applied to complex problems. For example, in <ref> [26] </ref>, the potential-field planner was used to automatically synthesize a video clip with graphically simulated human and robot characters entailing a 78-dimension configuration space. <p> This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> the results will be too weak. 3 Specific Planners We now present two planners that make use of the above scheme with different sampling strategies. 3.1 Potential-Field Planner This planner was originally described in [3, 4, 29], along with experimental results. 5 Extensions and additional experimental results were presented in <ref> [8, 11, 26, 27] </ref>. Here, we focus on its relation to the general scheme presented above. <p> But, in practice, the p ij 's are unknown. In fact, a key issue in analyzing a planner based on random sampling is to translate some geometric property of the free space into probabilistic terms. The potential-field planner has successfully solved many difficult problems (e.g., see <ref> [3, 8, 11, 26] </ref>). However, it is easy to create problems that it fails to solve in a reasonable amount of time, though they admit rather obvious solutions.
Reference: [27] <author> Y. Koga and J.C. Latombe, </author> <title> On Multi-Arm Manipulation Planning, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 945-952, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: This paper does not present experimental results obtained with our planners. Many such results were previously reported in <ref> [3, 8, 18, 20, 21, 24, 26, 27] </ref> and in papers by other authors [7, 11, 47]. <p> the results will be too weak. 3 Specific Planners We now present two planners that make use of the above scheme with different sampling strategies. 3.1 Potential-Field Planner This planner was originally described in [3, 4, 29], along with experimental results. 5 Extensions and additional experimental results were presented in <ref> [8, 11, 26, 27] </ref>. Here, we focus on its relation to the general scheme presented above.
Reference: [28] <author> F. Lamiraux and J.P. Laumond, </author> <title> On the Expected Complexity of Random Path Planning, </title> <journal> Rep. </journal> <volume> No. </volume> <pages> 95087, </pages> <address> LAAS/CNRS, Toulouse, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include [1, 5, 15, 16, 35, 36]. Formal attempts to predict the behavior of specific random planners are proposed in very few papers <ref> [9, 28] </ref>. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners. In the planners cited above, the robot's free space is not explicitly represented, but randomly sampled. <p> On the other hand, computing local-minima-free potentials in large dimensional spaces is a difficult problem [25] that is at least as hard as path planning itself. Using well-known properties of random motions, the potential-field planner can be shown probabilistically complete <ref> [3, 28] </ref>. Moreover, a calculation of the finite expected number of invocations of Escape-Motion is given in [28]. The idea underlying this calculation is the following. <p> Using well-known properties of random motions, the potential-field planner can be shown probabilistically complete [3, 28]. Moreover, a calculation of the finite expected number of invocations of Escape-Motion is given in <ref> [28] </ref>. The idea underlying this calculation is the following. The basins of attraction of the local minima of U which have non-zero measure (the goal basin is assumed to be one of them) form a partition of the free space.
Reference: [29] <author> J.C. Latombe, </author> <title> Robot Motion Planning, </title> <publisher> Kluwer Academic Publ., </publisher> <address> Boston, MA,1991. </address>
Reference-contexts: Collision-free path planning, which assumes perfect knowledge of the world and stationary obstacles, is only the most basic motion planning problem in robotics. Clearly, we would ultimately like robot planners to also deal with issues such as uncertainties, moving obstacles, movable objects, and dynamic constraints <ref> [29, 30] </ref>. But every extension of the basic problem adds in computational complexity. For instance, allowing moving obstacles makes the problem exponential in the number of moving obstacles [6, 41]; uncertainties in control and sensing make the problem exponential in the complexity of the robot environment [6]. <p> With this philosophy in mind, we have designed new path planners and experimented with them in large configuration spaces. One of them, described in <ref> [3, 4, 29] </ref>, is a potential-field-based planner that escapes local minima by performing random walks; in the following, we will refer to it as the 1 In any case, very few tailor-made planners have been successfully designed for specific robots with more than four dofs. 2 potential-field planner. <p> the analysis will not yield useful results; on the other hand, if they are too general, the results will be too weak. 3 Specific Planners We now present two planners that make use of the above scheme with different sampling strategies. 3.1 Potential-Field Planner This planner was originally described in <ref> [3, 4, 29] </ref>, along with experimental results. 5 Extensions and additional experimental results were presented in [8, 11, 26, 27]. Here, we focus on its relation to the general scheme presented above. <p> According to Definition 1, all configurations in this volume are adjacent to q. To guarantee that Step 2 does not loop for ever, 5 The planner is available by anonymous ftp from flamingo.stanford.edu:/pub/li/rpp3d.tar.gz. 6 Techniques to automatically construct this function are proposed in <ref> [3, 29] </ref>. 6 U must have no local minimum in the boundary of C free . This can easily be obtained by including in the definition of U (q) a term proportional to 1/clearance (q). <p> Although the global geometry of C f ree is unknown, U can be seen as a specialist that gives some heuristic indications about this geometry, i.e.: which directions are promising and which aren't. The techniques in <ref> [3, 29] </ref> compute U by 7 In [3], we note that, on the average, a random walk of length ` ends p ` away from its starting point.
Reference: [30] <author> J.C. Latombe, </author> <title> Controllability, Recognizability, and Complexity Issues in Robot Motion Planning, </title> <booktitle> Proc. 36th Annual Symp. on Foundations of Computer Science (FOCS), </booktitle> <pages> 484-500, </pages> <address> Milwaukee, Wis-consin, </address> <year> 1995. </year>
Reference-contexts: Collision-free path planning, which assumes perfect knowledge of the world and stationary obstacles, is only the most basic motion planning problem in robotics. Clearly, we would ultimately like robot planners to also deal with issues such as uncertainties, moving obstacles, movable objects, and dynamic constraints <ref> [29, 30] </ref>. But every extension of the basic problem adds in computational complexity. For instance, allowing moving obstacles makes the problem exponential in the number of moving obstacles [6, 41]; uncertainties in control and sensing make the problem exponential in the complexity of the robot environment [6].
Reference: [31] <author> T.Y. Li and J.C. Latombe, </author> <title> On-Line Motion Planning for Two Robot Arms in a Dynamic Environment, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 1048-1055, </pages> <address> Nagoya, </address> <year> 1995. </year>
Reference-contexts: As costs and time for designing and deploying them become more critical, path planners integrated with CAD systems will be in higher demand to facilitate robot programming. Eventually, planners will run online to allow for non-deterministic sequences of goals and events <ref> [31] </ref>. Robots in domains other than manufacturing (e.g., medical surgery, space exploration) will also require efficient and reliable path planners. Some non-robotics domains raise a similar need as well. In computer graphics, animation of synthetic actors to produce digital movies or video games requires dealing with several dozen dofs.
Reference: [32] <author> M.C. Lin and J.F. Canny, </author> <title> A Fast Algorithm f0r Incremental Distance Calculation, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 1008-1014, </pages> <address> Sacramento, CA, </address> <year> 1991. </year>
Reference-contexts: On the other hand, reasonably efficient algorithms are available to compute the Euclidean distance between two objects in three-dimensional space (e.g., <ref> [10, 32, 37, 39, 45] </ref>). <p> One could also try to match the distance calculation algorithm and the sampling strategy, to get the best global result. For example, a sampling strategy generating configurations in small neighborhoods of previously generated configurations could be combined with an incremental distance calculation algorithm such as the one proposed in <ref> [32] </ref>. Such an algorithm uses the nearest points computed at the previous configuration to quickly find the nearest points at the new configuration. As another example, the distance calculation algorithm proposed in [39] (and used in our planners) precomputes data structures to later accelerate the processing of distance calculation queries.
Reference: [33] <author> L. Lovasz and N. Young, </author> <title> Lecture Notes on Evasiveness of Graph Properties, </title> <type> Tech. Rep. CS-TR-317-91, </type> <institution> Comp. Sci. Dept., Princeton Univ., </institution> <year> 1991. </year>
Reference-contexts: The graph is presented as an adjacency matrix and the cost of an algorithm is measured by the number of entries it examines in the adjacency matrix of N . This is the edge probe model used in the study of evasive graph properties <ref> [33] </ref>. The vertices of N correspond to the milestones in V , and an edge is present between two vertices if the corresponding milestones lie in the same component of C free .
Reference: [34] <author> R. Motwani and P. Raghavan, </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: This paper does not present experimental results obtained with our planners. Many such results were previously reported in [3, 8, 18, 20, 21, 24, 26, 27] and in papers by other authors [7, 11, 47]. The reader is referred to <ref> [34] </ref> for a textbook on randomized algorithms and sampling techniques. 2 General Scheme We consider the problem of planning collision-free paths for an arbitrary n-degree-of-freedom holonomic 3 robot A.
Reference: [35] <author> M. Overmars, </author> <title> A Random Approach to Motion Planning, </title> <type> Tech. Rep. </type> <institution> RUU-CS-92-32, Dept. of Comp. Sci., Utrecht Univ., </institution> <year> 1992. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include <ref> [1, 5, 15, 16, 35, 36] </ref>. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners.
Reference: [36] <author> M. Overmars and P. Svestka, </author> <title> A Probabilistic Learning Approach to Motion Planning, Algorithmic Foundations of Robotics, </title> <editor> K. Goldberg et al. (eds.), A.K.Peters, </editor> <address> Wellesley, MA, 19-37, </address> <year> 1995. </year>
Reference-contexts: In turn, these theoretical results suggest improvements of the planner. Other work investigating similar or related randomized planning approaches include <ref> [1, 5, 15, 16, 35, 36] </ref>. Formal attempts to predict the behavior of specific random planners are proposed in very few papers [9, 28]. This paper proposes a consistent framework to describe and study the randomized planners cited above, with the goal to eventually build more powerful planners. <p> See <ref> [36, 43, 44] </ref>. 3 urations in C f ree as free configurations. A planning problem is specified by two free configurations, q init and q goal , called the initial and the goal configurations, respectively.
Reference: [37] <author> M. Ponamgi, D. Manocha, and M.C. Lin, </author> <title> Incremental Algorithms for Collision Detection Between Solid Models, </title> <booktitle> Proc. 3rd ACM Symp. on Solid Modeling and Applications, </booktitle> <pages> 293-304, </pages> <address> Salt Lake City, UT, </address> <year> 1995. </year>
Reference-contexts: On the other hand, reasonably efficient algorithms are available to compute the Euclidean distance between two objects in three-dimensional space (e.g., <ref> [10, 32, 37, 39, 45] </ref>).
Reference: [38] <author> F.P. Preparata and M.I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: The number of adjacency checks is at most proportional to f 2 ; however, the planner may choose not to test all pairs of free configurations for adjacency. 4 4 Checking the sample configurations for adjacency is an instance of the orthogonal range-searching problem <ref> [2, 38] </ref>. Using the range-tree technique, the pairs of adjacent configurations can be computed in O (f log n1 f ) time, or slightly faster.
Reference: [39] <author> S. Quinlan, </author> <title> Efficient Distance Computation Between Non-Convex Objects. </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 3324-3330, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: On the other hand, reasonably efficient algorithms are available to compute the Euclidean distance between two objects in three-dimensional space (e.g., <ref> [10, 32, 37, 39, 45] </ref>). <p> Such an algorithm uses the nearest points computed at the previous configuration to quickly find the nearest points at the new configuration. As another example, the distance calculation algorithm proposed in <ref> [39] </ref> (and used in our planners) precomputes data structures to later accelerate the processing of distance calculation queries. Each such data structure is a binary tree of spheres approximating a single rigid body.
Reference: [40] <author> J. Reif, </author> <title> Complexity of the Mover's Problem and Generalizations. </title> <booktitle> FOCS, </booktitle> <pages> 421-4127, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction Robot path planning has been proven a hard problem <ref> [40] </ref>. There is strong evidence that its solution requires exponential time in the number of dimensions of the configuration space, i.e., the number of degrees of freedom (dofs) of the robot.
Reference: [41] <author> J.H. Reif and M. Sharir, </author> <title> Motion Planning in the Presence of Moving Obstacles, </title> <booktitle> proc. 25th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> 144-154, </pages> <year> 1985. </year> <month> 22 </month>
Reference-contexts: But every extension of the basic problem adds in computational complexity. For instance, allowing moving obstacles makes the problem exponential in the number of moving obstacles <ref> [6, 41] </ref>; uncertainties in control and sensing make the problem exponential in the complexity of the robot environment [6]. Before we can effectively investigate such extensions in large configuration spaces, it seems that we must better understand how to practically solve basic path planning.
Reference: [42] <author> J.T. Schwartz and M. Sharir, </author> <title> On the `Piano Movers' Problem: II. General Techniques for Computing Topological Properties of Real Algebraic Manifolds. </title> <booktitle> Advances in Applied Mathematics, </booktitle> <volume> 4 </volume> <pages> 298-351, </pages> <year> 1983. </year>
Reference-contexts: This result is remarkably stable: it still holds for rather specific robots, e.g., planar linkages consisting of links serially connected by revolute joints [17] and sets of rectangles executing axis-parallel translations in a rectangular workspace [13, 14]. Though general and complete algorithms have been proposed <ref> [6, 42] </ref>, their high complexity precludes any useful application. This negative result has led some researchers to seek heuristic algorithms. fl Salomon Brothers Int. Ltd., Victoria Plaza, 111 Buckingham Palace Road, London SW1W 0SB, UK. Email: jerome.barraquand@sbil.co.uk. y Department of Computer Science, Stanford University, Stanford, CA 94305, USA.
Reference: [43] <author> S. Sekhavat, P. Svestka, J.P. Laumond, and M. Overmars, </author> <title> Probabilistic Path Planning for Tractor-Trailer Robots, </title> <type> Tech. Rep., </type> <institution> LAAS/CNRS, Toulouse, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: See <ref> [36, 43, 44] </ref>. 3 urations in C f ree as free configurations. A planning problem is specified by two free configurations, q init and q goal , called the initial and the goal configurations, respectively.
Reference: [44] <author> P. Svestka, </author> <title> A Probabilistic Approach to Motion Planning for Car-Like Robots, </title> <institution> RUU-CS-93-18, Comp. Sci. Dept., Utrecht Univ., </institution> <address> The Netherlands, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: See <ref> [36, 43, 44] </ref>. 3 urations in C f ree as free configurations. A planning problem is specified by two free configurations, q init and q goal , called the initial and the goal configurations, respectively.
Reference: [45] <author> F. Thomas and C. Torras, </author> <title> Interference Detection Between Non-Convex Polyhedra Revisited with a Practical Aim, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> 587-590, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: On the other hand, reasonably efficient algorithms are available to compute the Euclidean distance between two objects in three-dimensional space (e.g., <ref> [10, 32, 37, 39, 45] </ref>).
Reference: [46] <author> E. Veach and L.J. Guibas, </author> <title> Optimally Combining Sampling Techniques for Monte Carlo Rendering, </title> <booktitle> Proc. of SIGGRAPH'95, </booktitle> <pages> 419-428, </pages> <year> 1995. </year>
Reference-contexts: We envision that ultimately randomized planners will automatically select and combine sampling strategies from a library of basic strategies to closely match the characteristics of the input problems. This sort of combination has already given good results in another area, graphic rendering <ref> [46] </ref>. We did not discuss distance calculation in this paper, but it is a key computation in the context of our sampling scheme. Indeed, our planners spend most of their time evaluating clearance.
Reference: [47] <author> X. Zhu and K. Gupta, </author> <title> On Local Minima and Random Search in Robot Motion Planning, </title> <type> Technical Report, </type> <institution> Simon Fraser Univ., BC, Canada, </institution> <year> 1993. </year>
Reference-contexts: This paper does not present experimental results obtained with our planners. Many such results were previously reported in [3, 8, 18, 20, 21, 24, 26, 27] and in papers by other authors <ref> [7, 11, 47] </ref>. The reader is referred to [34] for a textbook on randomized algorithms and sampling techniques. 2 General Scheme We consider the problem of planning collision-free paths for an arbitrary n-degree-of-freedom holonomic 3 robot A.
References-found: 47

