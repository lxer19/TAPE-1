URL: ftp://ftp.eecs.umich.edu/groups/gasm/pevalifip.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Title: Evolving Algebras and Partial Evaluation  
Author: Yuri Gurevich and James K. Huggins 
Keyword: Software Engineering, Tools and Techniques; Software Engineering, Miscellaneous; Logics and Meanings of Programs, Semantics of Programming Languages  
Web: D.2.2; D.2.m; F.3.2  
Note: Keyword Codes:  
Date: July 14, 1994  
Abstract: We describe an automated partial evaluator for evolving algebras implemented at the University of Michigan. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yuri Gurevich, </author> <title> "Evolving Algebras 1993: Lipari Guide", in Specification and Validation Methods, </title> <editor> ed. E. Borger, </editor> <address> Oxford University Press, </address> <note> to appear. </note>
Reference-contexts: 1 Introduction to Sequential Evolving Algebras A fuller discussion of evolving algebras (or ealgebras) can be found in <ref> [1] </ref>; to make this paper self-contained, we recall briefly the main concepts. A sequential ealgebra A is an abstract machine. The signature of A is a (finite) collection of function names, each of a fixed arity.
Reference: [2] <author> Yuri Gurevich and James K. Huggins, </author> <title> "The Semantics of the C Programming Language", </title> <booktitle> Selected papers from CSL`92 (Computer Science Logic), Springer Lecture Notes in Computer Science 702, </booktitle> <year> 1993, </year> <pages> 274-308. </pages>
Reference-contexts: It is admittedly cryptic. In <ref> [2] </ref>, we presented an ealgebra interpreter for the C programming language. As a test, we ran our partial evaluator on our algebra for C, specializing it with respect to strcpy (). <p> It is not optimal: for example, CopyFrom could be replaced by t, since t is never used after the initial state. It does, however, exhibit the behavior of strcpy () more directly than the entire ealgebra for C given strcpy as input. (For those familiar with <ref> [2] </ref>, the input functions initially specified as positive were CurTask , TaskType, NextTask, LeftTask , RightTask, TrueTask , FalseTask, Decl , WhichChild , and ChooseChild , assuming that ChooseChild always moves to the left first.) 5
Reference: [3] <author> N.D. Jones, C.K. Gomard, and P. Sestoft, </author> <title> Partial Evaluation and Automatic Program Generation, </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <month> 6 </month>
Reference-contexts: Our partial evaluator follows the "mix" methodology (described in more detail in <ref> [3] </ref>) and has three phases: binding-time analysis, polyvariant mixed computation, and post-processing optimizations. We describe each of these phases below. 2 2.1 Binding-Time Analysis Initially, the partial evaluator is given the names of the basic functions of the ealgebra which will be known ahead of time. <p> This "specialized" ealgebra has the same behavior as the original, but is hardly more useful than the original algebra. <ref> [3] </ref> suggest a standard for evaluating partial evaluators.
References-found: 3

