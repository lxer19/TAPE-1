URL: http://www.eecs.berkeley.edu/~tah/Publications/hybrid_automata_with_finite_bisimulations.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/hybrid_automata_with_finite_bisimulations.html
Root-URL: 
Title: Hybrid Automata with Finite Bisimulations  
Author: Thomas A. Henzinger 
Address: Ithaca, NY 14850  
Affiliation: Department of Computer Science, Cornell University,  
Abstract: The analysis, verification, and control of hybrid automata with finite bisim-ulations can be reduced to finite-state problems. We advocate a time-abstract, phase-based methodology for checking if a given hybrid automaton has a finite bisimulation. First, we factor the automaton into two components, a boolean automaton with a discrete dynamics on the finite state space B m and a euclidean automaton with a continuous dynamics on the infinite state space R n . Second, we investigate the phase portrait of the euclidean component. In this fashion, we obtain new decidability results for hybrid systems as well as new, uniform proofs of known decidability results. For example, we prove that if two hybrid automata have finite bisimulations, and both can be calibrated to a common time scale, then their product also has a finite bisimulation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: This question is important for the analysis of embedded systems, because the problems of language emptiness, model checking, and controller synthesis are decidable for hybrid automata that are finitary and effective <ref> [1, 13, 19] </ref>. There have been several results of the type "the emptiness problem is undecidable for hybrid automata with clocks and a stopwatch" [2, 12, 15]. <p> For periodic activities, it suffices to look at a single grid cell. The n-dimensional unit cube U n is the region <ref> [0; 1] </ref> n that is defined by the formula V n unit cube has 2n facets of dimension n 1, each of which results from intersecting U n with a region of the form [[x i = 0]] or [[x i = 1]].
Reference: [2] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. Hybrid Systems, </title> <publisher> Springer LNCS 736, </publisher> <pages> pp. 209-229, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction A hybrid automaton <ref> [2] </ref> is a mathematical model for a digital program that interacts with an analog environment. Hybrid automata are useful for analyzing embedded systems [4, 10, 14, 21, 22]. We advocate the view of hybrid automata as infinite-state transition systems. <p> There have been several results of the type "the emptiness problem is undecidable for hybrid automata with clocks and a stopwatch" <ref> [2, 12, 15] </ref>. <p> This approach leads, first, to a finer distinction between the decidability and undecidability of hybrid automata than previous results indicate and, second, to a uniform explanation of many previous decidability results <ref> [2, 6, 20, 21] </ref>. While their decidability proofs relied either on transformations into timed automata or on digitizations of trajectories, our finitariness proofs provide insight into the state-transition structure of hybrid automata and guarantee the termination of HyTech. Second, we prove new classes of hybrid automata to be finitary. <p> The result of the procedure BisimApprox is stable under activities with these slope invariants. If, however, two clocks with different slopes are compared by a guard, filter, or point invariant, or both a clock and a stopwatch advance according to a slope invariant, then emptiness is undecidable <ref> [2, 12] </ref>, and it is not difficult to check that the procedure BisimApprox does not terminate. Finitariness, on the other hand, is only sufficient but not necessary for decidability; indeed, the emptiness problem is decidable for drifting-clock automata [12, 24]. Directed automata. <p> If E is a clock automaton with precise clocks, then (B; E) is a timed automaton [3]. It is not difficult to check that, in addition to timed automata, also the multirate automata of <ref> [2, 21] </ref>, the suspension automata of [20], and the 1-integrator automata of [6] have finitary euclidean components. We have thus provided an alternative, uniform decidability proof for these classes of hybrid automata.
Reference: [3] <author> R. Alur, D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The phase domain was first exploited by Alur and Dill for proving that the so-called region quotient is a finite bisimulation of a timed automaton <ref> [3] </ref>. This paper can be seen as an extension of and a tribute to their work. Consider, for example, a finitary hybrid automaton H with four control locations, two clocks, and one stopwatch. There are two extreme approaches for checking that H is finitary. <p> The transition system A is finitary if there is a finite bisimulation for A. In particular, every finite automaton is finitary. Examples of finitary transition systems with infinite state spaces are affine transition systems [17] and finite automata with real-valued clocks <ref> [3] </ref>. By Proposition 1, the languages of the finitary transition systems are the regular languages. <p> In particular, with the slope set 10 + = + = S 1 all rectangular action formulas are safe, and we can relax the condition of boundedness to the condition of positiveness. The resulting phase portrait, shown in Figure 8, is the region quotient of timed automata <ref> [3] </ref>. Clock and stopwatch automata. We next look at the euclidean components of several generalizations of timed automata. Let E be a positive rectangular automaton of dimension n. <p> Theorem 10. Every clock automaton and every stopwatch automaton is periodic and finitary, and there is a bounded 2D drifting-clock automaton that is not finitary. Proof. To show the first claim, we construct a finite bisimulation by generalizing the region quotient of timed automata <ref> [3] </ref>. Let k 2 N be the least common multiple of all constants that occur in the given automaton. <p> The procedure ReachApprox has been implemented, in HyTech, for hybrid automata with linear euclidean components [4]. If E is a clock automaton with precise clocks, then (B; E) is a timed automaton <ref> [3] </ref>. It is not difficult to check that, in addition to timed automata, also the multirate automata of [2, 21], the suspension automata of [20], and the 1-integrator automata of [6] have finitary euclidean components. We have thus provided an alternative, uniform decidability proof for these classes of hybrid automata.
Reference: [4] <author> R. Alur, T.A. Henzinger, P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> IEEE Real-time Systems Symp., </booktitle> <pages> pp. 2-11, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction A hybrid automaton [2] is a mathematical model for a digital program that interacts with an analog environment. Hybrid automata are useful for analyzing embedded systems <ref> [4, 10, 14, 21, 22] </ref>. We advocate the view of hybrid automata as infinite-state transition systems. We call an infinite-state transition system finitary and effective if it has a finite bisimulation that can be constructed effectively, and we examine the question of which hybrid automata are finitary and effective. <p> x 2 9 x 2 6 _x = (1; 1) _x = (1; 1) _x = (1; 2)_x = (1; 1) a general class of finitary hybrid automata (those with finite bisimulations), they must be brought into accord with our experience with the symbolic model checker HyTech for hybrid automata <ref> [4] </ref>. Although HyTech is guaranteed to terminate only for finitary hybrid automata, the procedure does terminate on many automata with clocks and a stopwatch, including the well-known example of a leaking gas burner [9]. <p> It follows that the procedures BisimApprox and ReachApprox are semi-decision procedures for the emptiness problem of hybrid automata with effective euclidean components, and both are decision procedures in the finitary case. The procedure ReachApprox has been implemented, in HyTech, for hybrid automata with linear euclidean components <ref> [4] </ref>. If E is a clock automaton with precise clocks, then (B; E) is a timed automaton [3].
Reference: [5] <author> P. Abdulla, B. Jonsson. </author> <title> Verifying programs with unreliable channels. </title> <booktitle> IEEE Symp. Logic in Computer Science, </booktitle> <pages> pp. 160-170, </pages> <year> 1993. </year>
Reference: [6] <author> A. Bouajjani, R. Echahed, R. Robbana. </author> <title> Verifying invariance properties of timed systems with duration variables. Formal Techniques in Real-time and Fault-tolerant Systems, </title> <publisher> Springer LNCS 863, </publisher> <pages> pp. 193-210, </pages> <year> 1994. </year>
Reference-contexts: This approach leads, first, to a finer distinction between the decidability and undecidability of hybrid automata than previous results indicate and, second, to a uniform explanation of many previous decidability results <ref> [2, 6, 20, 21] </ref>. While their decidability proofs relied either on transformations into timed automata or on digitizations of trajectories, our finitariness proofs provide insight into the state-transition structure of hybrid automata and guarantee the termination of HyTech. Second, we prove new classes of hybrid automata to be finitary. <p> If E is a clock automaton with precise clocks, then (B; E) is a timed automaton [3]. It is not difficult to check that, in addition to timed automata, also the multirate automata of [2, 21], the suspension automata of [20], and the 1-integrator automata of <ref> [6] </ref> have finitary euclidean components. We have thus provided an alternative, uniform decidability proof for these classes of hybrid automata.
Reference: [7] <author> A. Bouajjani, J.-C. Fernandez, N. Halbwachs. </author> <title> Minimal model generation. Computer-aided Verification, </title> <publisher> Springer LNCS 531, </publisher> <pages> pp. 197-203, </pages> <year> 1990. </year>
Reference-contexts: Each step of the procedure BisimApprox is effectively computable if A is effective. The successive approximation converges |i.e., the procedure BisimApprox terminates| iff A is finitary. Implementations of the procedure BisimApprox are discussed in [16, 23] for finite automata and in <ref> [7, 17] </ref> for arbitrary transition systems. Questions about transition systems. 1 The emptiness problem for transition systems asks, given a transition system A, is the language [[A]] L empty.
Reference: [8] <author> A. Bouajjani, R. Robbana. </author> <title> Verifying !-regular properties for subclasses of linear hybrid systems. Computer-aided Verification, </title> <publisher> Springer LNCS, </publisher> <year> 1995. </year>
Reference-contexts: We close with two remarks. First, as pointed out before, finitariness is sufficient but not necessary for decidability. In particular, hybrid automata with infinite 1-counter encodable bisim-ulations are decidable, because emptiness can be reduced to the emptiness problem for pushdown automata <ref> [8] </ref>. Examples of such automata include 2D grid automata with the slope set S 2 and only one bounded variable (see full paper).
Reference: [9] <author> Z. Chaochen, </author> <title> C.A.R. Hoare, A.P. Ravn. A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40 </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: Although HyTech is guaranteed to terminate only for finitary hybrid automata, the procedure does terminate on many automata with clocks and a stopwatch, including the well-known example of a leaking gas burner <ref> [9] </ref>. It is this apparent discrepancy between verification theory and practice we set out to explain in this paper. Consider, for example, the two water-level controllers shown in Figure 1. The real-valued variable x 2 represents the water level in a tank.
Reference: [10] <author> T.A. Henzinger, P.-H. Ho. </author> <title> Model-checking strategies for linear hybrid systems. </title> <booktitle> Workshop on Hybrid Systems and Autonomous Control (Ithaca, </booktitle> <address> NY), </address> <year> 1994. </year> <month> 14 </month>
Reference-contexts: 1 Introduction A hybrid automaton [2] is a mathematical model for a digital program that interacts with an analog environment. Hybrid automata are useful for analyzing embedded systems <ref> [4, 10, 14, 21, 22] </ref>. We advocate the view of hybrid automata as infinite-state transition systems. We call an infinite-state transition system finitary and effective if it has a finite bisimulation that can be constructed effectively, and we examine the question of which hybrid automata are finitary and effective.
Reference: [11] <author> T.A. Henzinger, P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. Computer-aided Verification, </title> <publisher> Springer LNCS, </publisher> <year> 1995. </year>
Reference-contexts: Second, we expect that our phase view of hybrid systems will also lead to a theory of conservative approximations for nonlinear hybrid automata with the property that, unlike in the time domain <ref> [11] </ref>, approximation errors do not accumulate. Acknowledgments. Our view of hybrid systems has been shaped in collaboration with many people, including Rajeev Alur, Costas Courcoubetis, Pei-Hsin Ho, Peter Kopke, Amir Pnueli, Joseph Sifakis, Anuj Puri, and Pravin Varaiya. We also thank Oded Maler and Howard Wong-Toi for valuable comments.
Reference: [12] <author> T.A. Henzinger, P. Kopke, A. Puri, P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? ACM Symp. Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: There have been several results of the type "the emptiness problem is undecidable for hybrid automata with clocks and a stopwatch" <ref> [2, 12, 15] </ref>. <p> The result of the procedure BisimApprox is stable under activities with these slope invariants. If, however, two clocks with different slopes are compared by a guard, filter, or point invariant, or both a clock and a stopwatch advance according to a slope invariant, then emptiness is undecidable <ref> [2, 12] </ref>, and it is not difficult to check that the procedure BisimApprox does not terminate. Finitariness, on the other hand, is only sufficient but not necessary for decidability; indeed, the emptiness problem is decidable for drifting-clock automata [12, 24]. Directed automata. <p> Finitariness, on the other hand, is only sufficient but not necessary for decidability; indeed, the emptiness problem is decidable for drifting-clock automata <ref> [12, 24] </ref>. Directed automata. While not periodic, the euclidean component of the water-level controller W 1 from the introduction is nonetheless finitary. <p> For instance, unlike _x 1 = 1 ^ _x 2 = 1, the slope invariant _x 1 = _x 2 defines a time-abstract activity with the same phase portrait <ref> [12] </ref>. Similarly, the slope invariants _x 1 +2 _x 2 5 and _x 1 5 ^ _x 2 = _x 1 define activities that can be sped up and slowed down, respectively. Theorem 13.
Reference: [13] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111 </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: This question is important for the analysis of embedded systems, because the problems of language emptiness, model checking, and controller synthesis are decidable for hybrid automata that are finitary and effective <ref> [1, 13, 19] </ref>. There have been several results of the type "the emptiness problem is undecidable for hybrid automata with clocks and a stopwatch" [2, 12, 15]. <p> Also, in both cases, there are successive-approximation procedures that depend on and R, respectively, and by computing problem-dependent quotients of A typically converge faster than the successive approximation of the bisimilarity quotient A= <ref> [13, 19] </ref>. Operations on transition systems. Let A 1 = (Q 1 ; 1 ; ! 1 ; ! ! be two transition systems. An alphabet combinator fl is a partial function on 1 fi 2 . We write fl ( 1 ; 2 ) for the range of fl.
Reference: [14] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. Static Analysis Symp., </title> <publisher> Springer LNCS 864, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction A hybrid automaton [2] is a mathematical model for a digital program that interacts with an analog environment. Hybrid automata are useful for analyzing embedded systems <ref> [4, 10, 14, 21, 22] </ref>. We advocate the view of hybrid automata as infinite-state transition systems. We call an infinite-state transition system finitary and effective if it has a finite bisimulation that can be constructed effectively, and we examine the question of which hybrid automata are finitary and effective.
Reference: [15] <author> Y. Kesten, A. Pnueli, J. Sifakis, S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. Hybrid Systems, </title> <publisher> Springer LNCS 736, </publisher> <pages> pp. 179-208, </pages> <year> 1993. </year>
Reference-contexts: There have been several results of the type "the emptiness problem is undecidable for hybrid automata with clocks and a stopwatch" <ref> [2, 12, 15] </ref>.
Reference: [16] <author> P.C. Kanellakis, S.A. Smolka. </author> <title> CCS expressions, finite-state processes, and three problems of equivalence. </title> <journal> Information and Computation, </journal> <volume> 86 </volume> <pages> 43-68, </pages> <year> 1990. </year>
Reference-contexts: Each step of the procedure BisimApprox is effectively computable if A is effective. The successive approximation converges |i.e., the procedure BisimApprox terminates| iff A is finitary. Implementations of the procedure BisimApprox are discussed in <ref> [16, 23] </ref> for finite automata and in [7, 17] for arbitrary transition systems. Questions about transition systems. 1 The emptiness problem for transition systems asks, given a transition system A, is the language [[A]] L empty.
Reference: [17] <author> D. Lee, M. Yannakakis. </author> <title> Online minimization of transition systems. </title> <booktitle> ACM Symp. Theory of Computing, </booktitle> <pages> pp. 264-274, </pages> <year> 1992. </year>
Reference-contexts: The transition system A is finitary if there is a finite bisimulation for A. In particular, every finite automaton is finitary. Examples of finitary transition systems with infinite state spaces are affine transition systems <ref> [17] </ref> and finite automata with real-valued clocks [3]. By Proposition 1, the languages of the finitary transition systems are the regular languages. <p> Each step of the procedure BisimApprox is effectively computable if A is effective. The successive approximation converges |i.e., the procedure BisimApprox terminates| iff A is finitary. Implementations of the procedure BisimApprox are discussed in [16, 23] for finite automata and in <ref> [7, 17] </ref> for arbitrary transition systems. Questions about transition systems. 1 The emptiness problem for transition systems asks, given a transition system A, is the language [[A]] L empty.
Reference: [18] <author> O. Maler, A. Pnueli. </author> <title> Reachability analysis of planar multi-linear systems. Computer-aided Verification, </title> <publisher> Springer LNCS 697, </publisher> <pages> pp. 194-209, </pages> <year> 1993. </year>
Reference-contexts: While also geometric in its intuition, the hybrid-automaton model differs from the related approach of <ref> [18] </ref>. First, their dynamical systems are deterministic and our euclidean automata are nondeterministic, both as far as discrete and continuous progress is concerned. Second, we consider the product of euclidean automata with boolean automata, which results in multiple copies of euclidean state spaces.
Reference: [19] <author> O. Maler, A. Pnueli, J. Sifakis. </author> <title> On the synthesis of discrete controllers for timed systems. </title> <booktitle> Theoretical Aspects of Computer Science, </booktitle> <publisher> Springer LNCS, </publisher> <year> 1995. </year>
Reference-contexts: This question is important for the analysis of embedded systems, because the problems of language emptiness, model checking, and controller synthesis are decidable for hybrid automata that are finitary and effective <ref> [1, 13, 19] </ref>. There have been several results of the type "the emptiness problem is undecidable for hybrid automata with clocks and a stopwatch" [2, 12, 15]. <p> Also, in both cases, there are successive-approximation procedures that depend on and R, respectively, and by computing problem-dependent quotients of A typically converge faster than the successive approximation of the bisimilarity quotient A= <ref> [13, 19] </ref>. Operations on transition systems. Let A 1 = (Q 1 ; 1 ; ! 1 ; ! ! be two transition systems. An alphabet combinator fl is a partial function on 1 fi 2 . We write fl ( 1 ; 2 ) for the range of fl.
Reference: [20] <author> J. McManis, P. Varaiya. </author> <title> Suspension automata: a decidable class of hybrid automata. Computer-aided Verification, </title> <publisher> Springer LNCS 818, </publisher> <pages> pp. 105-117, </pages> <year> 1994. </year>
Reference-contexts: This approach leads, first, to a finer distinction between the decidability and undecidability of hybrid automata than previous results indicate and, second, to a uniform explanation of many previous decidability results <ref> [2, 6, 20, 21] </ref>. While their decidability proofs relied either on transformations into timed automata or on digitizations of trajectories, our finitariness proofs provide insight into the state-transition structure of hybrid automata and guarantee the termination of HyTech. Second, we prove new classes of hybrid automata to be finitary. <p> The positive rectangular automaton E is a stopwatch automaton if all variables of E are stopwatches and each slope invariant of E implies _x i = 0 for all but one 1 i n. Stopwatch automata are useful for modeling real-time multi-tasking <ref> [20] </ref>. Theorem 10. Every clock automaton and every stopwatch automaton is periodic and finitary, and there is a bounded 2D drifting-clock automaton that is not finitary. Proof. To show the first claim, we construct a finite bisimulation by generalizing the region quotient of timed automata [3]. <p> If E is a clock automaton with precise clocks, then (B; E) is a timed automaton [3]. It is not difficult to check that, in addition to timed automata, also the multirate automata of [2, 21], the suspension automata of <ref> [20] </ref>, and the 1-integrator automata of [6] have finitary euclidean components. We have thus provided an alternative, uniform decidability proof for these classes of hybrid automata.
Reference: [21] <author> X. Nicollin, A. Olivero, J. Sifakis, S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. Hybrid Systems, </title> <publisher> Springer LNCS 736, </publisher> <pages> pp. 149-178, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction A hybrid automaton [2] is a mathematical model for a digital program that interacts with an analog environment. Hybrid automata are useful for analyzing embedded systems <ref> [4, 10, 14, 21, 22] </ref>. We advocate the view of hybrid automata as infinite-state transition systems. We call an infinite-state transition system finitary and effective if it has a finite bisimulation that can be constructed effectively, and we examine the question of which hybrid automata are finitary and effective. <p> This approach leads, first, to a finer distinction between the decidability and undecidability of hybrid automata than previous results indicate and, second, to a uniform explanation of many previous decidability results <ref> [2, 6, 20, 21] </ref>. While their decidability proofs relied either on transformations into timed automata or on digitizations of trajectories, our finitariness proofs provide insight into the state-transition structure of hybrid automata and guarantee the termination of HyTech. Second, we prove new classes of hybrid automata to be finitary. <p> If E is a clock automaton with precise clocks, then (B; E) is a timed automaton [3]. It is not difficult to check that, in addition to timed automata, also the multirate automata of <ref> [2, 21] </ref>, the suspension automata of [20], and the 1-integrator automata of [6] have finitary euclidean components. We have thus provided an alternative, uniform decidability proof for these classes of hybrid automata.
Reference: [22] <author> A. Olivero, J. Sifakis, S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. Computer-aided Verification, </title> <publisher> Springer LNCS 818, </publisher> <pages> pp. 81-94, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction A hybrid automaton [2] is a mathematical model for a digital program that interacts with an analog environment. Hybrid automata are useful for analyzing embedded systems <ref> [4, 10, 14, 21, 22] </ref>. We advocate the view of hybrid automata as infinite-state transition systems. We call an infinite-state transition system finitary and effective if it has a finite bisimulation that can be constructed effectively, and we examine the question of which hybrid automata are finitary and effective.
Reference: [23] <author> R. Paige, R.E. Tarjan. </author> <title> Three partition-refinement algorithms. </title> <journal> SIAM J. Computing, </journal> <volume> 16 </volume> <pages> 973-989, </pages> <year> 1987. </year>
Reference-contexts: Each step of the procedure BisimApprox is effectively computable if A is effective. The successive approximation converges |i.e., the procedure BisimApprox terminates| iff A is finitary. Implementations of the procedure BisimApprox are discussed in <ref> [16, 23] </ref> for finite automata and in [7, 17] for arbitrary transition systems. Questions about transition systems. 1 The emptiness problem for transition systems asks, given a transition system A, is the language [[A]] L empty.
Reference: [24] <author> A. Puri, P. Varaiya. </author> <title> Decidability of hybrid systems with rectangular differential inclusions. Computer-aided Verification, </title> <publisher> Springer LNCS 818, </publisher> <pages> pp. 95-104, </pages> <year> 1994. </year> <month> 15 </month>
Reference-contexts: Finitariness, on the other hand, is only sufficient but not necessary for decidability; indeed, the emptiness problem is decidable for drifting-clock automata <ref> [12, 24] </ref>. Directed automata. While not periodic, the euclidean component of the water-level controller W 1 from the introduction is nonetheless finitary.
References-found: 24

