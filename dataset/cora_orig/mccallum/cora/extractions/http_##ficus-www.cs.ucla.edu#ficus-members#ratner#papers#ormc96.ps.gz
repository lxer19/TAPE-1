URL: http://ficus-www.cs.ucla.edu/ficus-members/ratner/papers/ormc96.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/ficus-members/ratner/papers.html
Root-URL: http://www.cs.ucla.edu
Title: The Ward Model: A Scalable Replication Architecture for Mobility  
Author: David Ratner Gerald J. Popek Peter Reiher 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. G. Guy, J. S. Heidemann, W. Mak, T. W. Page, Jr., G. J. Popek, and D. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Early replication solutions assumed stationary and relatively well-connected environments, and thus had relatively simple architectures. Even systems designed to support common network disconnections and treat them as normal occurrences <ref> [2, 1] </ref> were designed assuming a static infrastructure. Mobile users are by definition not static, but mobile users of these systems are nevertheless forced to conform to their static infrastructures by acting as if they were not mobile. <p> The system's statically designed communication topologies stress under the strain of mobility, and become overly complicated and often severely inefficient. Peer-to-peer solutions <ref> [1, 6] </ref> solved some of the problems, but with a static infrastructure they can still become widely inefficient in mobile environments. As such, replication in a mobile world requires more than simply a peer-to-peer solution.
Reference: [2] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <type> Technical Report CMU-CS-91-166, </type> <institution> Carnegie-Mellon University, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Early replication solutions assumed stationary and relatively well-connected environments, and thus had relatively simple architectures. Even systems designed to support common network disconnections and treat them as normal occurrences <ref> [2, 1] </ref> were designed assuming a static infrastructure. Mobile users are by definition not static, but mobile users of these systems are nevertheless forced to conform to their static infrastructures by acting as if they were not mobile.
Reference: [3] <author> P. Kumar and M. Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 66-70, </pages> <address> Napa, California, </address> <month> Oct. </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: of Computer Science, UCLA, Los Angeles, CA 90095, or by email to fratner,popek,reiherg@cs.ucla.edu. y Gerald Popek is also affiliated with Platinum technology. 1 detect concurrent updates and resolve the resulting conflicts, but recent studies have demonstrated that, in many environments, conflicts are rare and resolution is straight-forward, if not automatic <ref> [3, 5] </ref>. Peer-based algorithms [6], which allow all replicas to directly exchange information, are required to support interaction between mobile machines. Client-server algorithms allow no direct interaction between clients; mobile clients wishing to communicate must do so through a third party.
Reference: [4] <author> D. Ratner, G. J. Popek, and P. Reiher. </author> <title> Peer replication with selective control. </title> <type> Technical Report CSD-960031, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: Mobile machines have neither luxury; replication onto the mobiles must therefore be more selective in terms of which objects get locally replicated and the size of the minimal replication set. This is often referred to as selective replication <ref> [4] </ref>. Selective replication allows individual objects to be replicated without replicating the entire container or set of related objects. Second, mobile machines by their very nature have the ability to encounter more data objects than static machines.
Reference: [5] <author> P. Reiher, J. S. Heidemann, D. Ratner, G. Skinner, and G. J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 183-195. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: of Computer Science, UCLA, Los Angeles, CA 90095, or by email to fratner,popek,reiherg@cs.ucla.edu. y Gerald Popek is also affiliated with Platinum technology. 1 detect concurrent updates and resolve the resulting conflicts, but recent studies have demonstrated that, in many environments, conflicts are rare and resolution is straight-forward, if not automatic <ref> [3, 5] </ref>. Peer-based algorithms [6], which allow all replicas to directly exchange information, are required to support interaction between mobile machines. Client-server algorithms allow no direct interaction between clients; mobile clients wishing to communicate must do so through a third party.
Reference: [6] <author> P. Reiher, J. Popek, M. Gunter, J. Salomone, and D. Ratner. </author> <title> Peer-to-peer reconciliation based replication for mobile computers. </title> <booktitle> In Proceedings of ECOOP'96 II Workshop on Mobility and Replication, </booktitle> <month> July </month> <year> 1996. </year> <month> 4 </month>
Reference-contexts: The system's statically designed communication topologies stress under the strain of mobility, and become overly complicated and often severely inefficient. Peer-to-peer solutions <ref> [1, 6] </ref> solved some of the problems, but with a static infrastructure they can still become widely inefficient in mobile environments. As such, replication in a mobile world requires more than simply a peer-to-peer solution. <p> Peer-based algorithms <ref> [6] </ref>, which allow all replicas to directly exchange information, are required to support interaction between mobile machines. Client-server algorithms allow no direct interaction between clients; mobile clients wishing to communicate must do so through a third party.
References-found: 6

