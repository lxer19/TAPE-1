URL: ftp://ftp.eecs.umich.edu/groups/gasm/mapauto.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Title: Mapping Automata Simple Abstract State Machines  
Author: Jorn W. Janneck Philipp W. Kutter 
Abstract: TIK Report 49 June 1998 Computer Engineering and Networks Laboratory Swiss Federal Institute of Technology (ETH) Zurich 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Borger and J.K. Huggins. </author> <title> Abstract state machines 1988-1998: A commented asm bibliography. </title> <journal> EATCS Bulletin, </journal> (64):105-127, 1998. 
Reference-contexts: Aware of the problem that neither applicability to all kinds of algorithms nor appropriateness of the reachable abstraction levels can be proven, one tried to give evidence by working out a large number of case studies <ref> [1, 6] </ref>. The variety of application areas covered by these case studies was only possible because GASM are not endowed with a specific type system.
Reference: [2] <author> G. Del Castillo, Y. Gurevich, and K. Stroetmann. </author> <title> Typed abstract state machines. </title> <address> J.UCS, </address> <year> 1998. </year> <note> to appear. </note>
Reference-contexts: The variety of application areas covered by these case studies was only possible because GASM are not endowed with a specific type system. For most of the single problems, a suitable and useful type system can be thought of <ref> [11, 2] </ref>, but one general solution to enhance typing of GASM has not been found. The fact that the definition of GASM has not been changed over time finally became one of the major strengths of the existing GASM-work.
Reference: [3] <author> Y. Gurevich. </author> <title> Logic and the challenge of computer science. </title> <editor> In E. Boerger, editor, </editor> <booktitle> Current Trends in Theoretical Computer Science, </booktitle> <pages> pages 1 - 57. </pages> <publisher> CS Press, </publisher> <year> 1988. </year>
Reference-contexts: Since they also have a rather straightforward operational semantics, they can serve as a prototyping or (combined with stepwise refinement techniques) even as an implementation base for computational systems. The original idea of GASMs <ref> [3] </ref> was to elaborate on what Gurevich calls the implicit Turing's thesis: every algorithm is simulated by an appropriate Turing machine. 1 Unfortunately the operational semantics of algorithms given by Turing machines is often not modeling the algorithm on a natural abstraction level.
Reference: [4] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Gurevich's Abstract State Machines (GASM) as defined in <ref> [4, 5] </ref> are an elegant model of computation and provide a powerful, abstract specification method for a broad variety of specification tasks. <p> While an algorithm executes just one step, the simulating Turing machine typically performs a long sequence of steps. The GASM thesis <ref> [4] </ref> is that any algorithm can be modeled at its natural abstraction level by an appropriate GASM. In short, this is achieved by combining a very flexible notion of state, i.e. Tarski's notion of structure [9], with the possibility to specify freely how much is done in one step.
Reference: [5] <author> Y. Gurevich. </author> <title> May 1997 draft of the asm guide. </title> <type> Technical Report CSE-TR-336-97, </type> <institution> EECS Dept., University of Michigan, </institution> <year> 1997. </year>
Reference-contexts: 1 Introduction Gurevich's Abstract State Machines (GASM) as defined in <ref> [4, 5] </ref> are an elegant model of computation and provide a powerful, abstract specification method for a broad variety of specification tasks. <p> The fact that the definition of GASM has not been changed over time finally became one of the major strengths of the existing GASM-work. In <ref> [5] </ref> Gurevich claims that in dynamic situations, it is convenient to view a state as a kind of memory that maps locations to values. A location is a pair of an r-ary function name and an r-tuple of elements. <p> R (oe i ) Of course, a run terminates iff ex k such that oe i = oe i+1 for all i &gt; k. 4 A rule language and its denotation In the following we will suggest a notation for MA rules, which parallels the one suggested for GASM in <ref> [5] </ref>. Following [5], we will give the denotation of each construction in our notation in terms of the update set that it represents given an interpretation and a state according to definition 3.3. <p> i ) Of course, a run terminates iff ex k such that oe i = oe i+1 for all i &gt; k. 4 A rule language and its denotation In the following we will suggest a notation for MA rules, which parallels the one suggested for GASM in <ref> [5] </ref>. Following [5], we will give the denotation of each construction in our notation in terms of the update set that it represents given an interpretation and a state according to definition 3.3. <p> parallel composition of two rule descriptions, written as 6 R 1 R 2 Its denotation is simply the union of the update sets: Den I [ R 1 R 2 ](oe) = def Den I [R 1 ](oe) [ Den I [R 2 ](oe) 4.3 First-order extensions As shown in <ref> [5] </ref>, one can add first-order constructs to describe both rules and terms. <p> of all updates resulting from the body for each individual element of the specified set bound to the constant symbol: Den I [do forall c in s : R enddo](oe) = def [ Den I [c7!a] [R](oe) 6 Since at this point we have no notion of blocks as in <ref> [5] </ref>, we need no do in-parallel syntax that except for inconsistencies, this rule notation is otherwise equivalent to. 7 From a theoretical point of view, allowing, a rule to iterate on, say, U would potentially make the entire universe accessible, and thus the reserve empty see section 4.5 for details. 8 <p> new interpretation as I [c 7! a], and the deterministic and non-deterministic denotation, respectively, then become Den I [import c R endimport](oe) = def Den I [c7!a] [R](oe) a 2 R N Den I [import c R endimport](oe) = def N Den I [c7!a] [R](oe) a 2 R As in <ref> [5] </ref> we assume that different imports choose different reserve elements. Furthermore, we assume that for any new element a, oe a x = ? for all x 2 U .
Reference: [6] <author> J.K. Huggins. </author> <title> Abstract state machines web page. </title> <address> http://www.eecs.umich.edu/gasm. </address>
Reference-contexts: Aware of the problem that neither applicability to all kinds of algorithms nor appropriateness of the reachable abstraction levels can be proven, one tried to give evidence by working out a large number of case studies <ref> [1, 6] </ref>. The variety of application areas covered by these case studies was only possible because GASM are not endowed with a specific type system.
Reference: [7] <author> J.W. Janneck. </author> <title> Object-based mapping automata reference manual. </title> <type> Technical report, </type> <institution> Institute TIK, ETH Zurich. </institution>
Reference-contexts: We believe that this will allow us to compose specifications much easier than was possible in GASM, an interesting aspect of this improved compositionality possibly being the easy integration of object-based constructs into the concept with a view of making it a practical specification and prototyping method in such environments <ref> [7] </ref>. In the next section, the used static structures are described, then MA are defined formally. In section 4 the definition of transition rules is adopted to MA.
Reference: [8] <author> J.W. Janneck. </author> <title> Object-based mapping automata home page. </title> <address> http://www.tik.ee.ethz.ch/ jan-neck/OMA. </address>
Reference-contexts: The motivation for this work is threefold. First we want to make the MA view explicit in a formal way. Second the MA and the mapping from GASM to MA serve as implementation base for a GASM interpreter written in Java <ref> [8] </ref>. And finally the definition of MA simplifies the syntactic aspect as well as the structure of a state by removing the concept of 'signature'.
Reference: [9] <author> A. Tarsky. </author> <title> Der wahrheitsbegriff in den formalisierten sprachen. </title> <journal> Studia Philosophica, </journal> (1):261-405, 1936. English translation in A. Tarsky. Logic, Semantics, Methamathematics. Oxford University Press. 
Reference-contexts: The GASM thesis [4] is that any algorithm can be modeled at its natural abstraction level by an appropriate GASM. In short, this is achieved by combining a very flexible notion of state, i.e. Tarski's notion of structure <ref> [9] </ref>, with the possibility to specify freely how much is done in one step.
Reference: [10] <author> A.M. </author> <title> Turing. On computable numbers with an application to the entscheidungsproblem. </title> <journal> Proc. London Math. Soc., </journal> (12):230-265, 1937. correction, ibid, No. <volume> 13(1937), </volume> <pages> 511-516. </pages>
Reference-contexts: In section 4 the definition of transition rules is adopted to MA. In the last section the mapping from GASM to MA 1 The implicit Turing thesis is used in the informal proof of Turing's thesis <ref> [10] </ref> 3 is formalized. 2 Static structures Before we present MA as describing the dynamic transition from one state to the next, we first make precise our notion of state.
Reference: [11] <author> A. Zamulin. </author> <title> Typed Gurevich Machines Revisited. </title> <note> Joint CS & IIS Bulletin, </note> <institution> Computer Science, </institution> <year> 1997. </year> <month> 14 </month>
Reference-contexts: The variety of application areas covered by these case studies was only possible because GASM are not endowed with a specific type system. For most of the single problems, a suitable and useful type system can be thought of <ref> [11, 2] </ref>, but one general solution to enhance typing of GASM has not been found. The fact that the definition of GASM has not been changed over time finally became one of the major strengths of the existing GASM-work.
References-found: 11

