URL: http://www.cs.indiana.edu/l/www/ftp/pierce/pict/old/machine.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/pict/old/
Root-URL: http://www.cs.indiana.edu
Title: The Pict Abstract Machine  Not for Distribution  
Author: Benjamin C. Pierce David N. Turner 
Date: June 3, 1995  
Note: Draft of  
Abstract: We define an abstract machine for Pict, a high-level concurrent language based on the -calculus, and sketch a proof that it yields only process-fair execution sequences.
Abstract-found: 1
Intro-found: 1
Reference: [Bou92] <author> Gerard Boudol. </author> <title> Asynchrony and the -calculus (note). </title> <institution> Rapporte de Recherche 1702, INRIA Sofia-Antipolis, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: 1 The Pict Core Language We briefly review the syntax and semantics of the core language: an asynchronous, choice-free fragment of the -calculus (c.f. <ref> [HT91, Bou92, Mil95] </ref>), enriched with tuples, records, and pattern matching. 1.1 Syntax For brevity, we give only the abstract syntax of untyped terms in this note: the detailed rules of precedence used by the parser, syntax of type annotations, lexical analysis rules, etc. can be found in the Pict manuals [PT95b,
Reference: [HT91] <author> Kohei Honda and Mario Tokoro. </author> <title> An object calculus for asynchronous communication. </title> <editor> In Pierre America, editor, </editor> <booktitle> Proceedings of the European Conference on Object-Oriented Programming (ECOOP), volume 512 of Lecture Notes in Computer Science, </booktitle> <address> Geneva CH, 1991. </address> <publisher> Springer-Verlag , Berlin, </publisher> <address> Heidelberg, New York, Tokyo. </address>
Reference-contexts: 1 The Pict Core Language We briefly review the syntax and semantics of the core language: an asynchronous, choice-free fragment of the -calculus (c.f. <ref> [HT91, Bou92, Mil95] </ref>), enriched with tuples, records, and pattern matching. 1.1 Syntax For brevity, we give only the abstract syntax of untyped terms in this note: the detailed rules of precedence used by the parser, syntax of type annotations, lexical analysis rules, etc. can be found in the Pict manuals [PT95b,
Reference: [Mil91] <author> Robin Milner. </author> <title> The polyadic -calculus: a tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, </institution> <month> October </month> <year> 1991. </year> <booktitle> Proceedings of the International Summer School on Logic and Algebra of Specification, Marktoberdorf, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: Finally, a new declaration introduces a new channel. Again, we make declarations a separate syntactic category to leave room for growth. Dec = new Name channel creation The expression let new x in e end binds x with scope e. 1.2 Structural Congruence Following <ref> [Mil91] </ref>, the operational semantics of Pict programs is presented in two steps.
Reference: [Mil95] <author> Robin Milner. </author> <title> Calculi for interaction. </title> <journal> Acta Informatica, </journal> <note> 1995. To appear. </note>
Reference-contexts: 1 The Pict Core Language We briefly review the syntax and semantics of the core language: an asynchronous, choice-free fragment of the -calculus (c.f. <ref> [HT91, Bou92, Mil95] </ref>), enriched with tuples, records, and pattern matching. 1.1 Syntax For brevity, we give only the abstract syntax of untyped terms in this note: the detailed rules of precedence used by the parser, syntax of type annotations, lexical analysis rules, etc. can be found in the Pict manuals [PT95b,
Reference: [Pie95] <author> Benjamin C. Pierce. </author> <title> Programming in the pi-calculus: An experiment in programming language design. Tutorial notes on the Pict language. </title> <note> Available electronically, </note> <year> 1995. </year>
Reference-contexts: [HT91, Bou92, Mil95]), enriched with tuples, records, and pattern matching. 1.1 Syntax For brevity, we give only the abstract syntax of untyped terms in this note: the detailed rules of precedence used by the parser, syntax of type annotations, lexical analysis rules, etc. can be found in the Pict manuals <ref> [PT95b, Pie95] </ref>. The entities that can be communicated on channels are called values. They include variables, tuples of values, records of values, and constants. <p> Introducing names and record fields as sep-arate syntactic classes with just one production each gives some "growing room" to the syntax, which we exploit in defining a variety of derived forms in the full language <ref> [?, PT95b, Pie95] </ref>. Values can be decomposed by means of patterns. Pat = Name variable pattern [Pat,. . . ,Pat] tuple pattern record Id =Pat,. . . ,Id =Pat end record pattern _ wildcard pattern Name @ Pat layered pattern All the variables bound by a pattern must be distinct.
Reference: [PT95a] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Concurrent objects in a process calculus. </title> <editor> In Takayasu Ito and Akinori Yonezawa, editors, </editor> <booktitle> Theory and Practice of Parallel Programming (TPPP), Sendai, </booktitle> <address> Japan (Nov. </address> <year> 1994), </year> <booktitle> number 907 in Lecture Notes in Computer Science, </booktitle> <pages> pages 187-215. </pages> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: For many applications of a -calculus-based programming language, this kind of fairness is perfectly adequate. For example, the FIFO queing of the lock channel l in the reference cell of Section [s:lockeg?] ensures that competing set and deref requests are handled fairly; the replicated choice construct of <ref> [PT95a] </ref> exhibits similar good behavior. On the other hand, programs that use constructs like the full choice operator (whether primitive or encoded) may need stronger guarantees to behave as the programmer expects. But the randomization necessary to achieve fair behavior of choice imposes a significant cost at run time.
Reference: [PT95b] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict language definition. </title> <note> Technical report in preparation; available electronically, 1995. 12 </note>
Reference-contexts: [HT91, Bou92, Mil95]), enriched with tuples, records, and pattern matching. 1.1 Syntax For brevity, we give only the abstract syntax of untyped terms in this note: the detailed rules of precedence used by the parser, syntax of type annotations, lexical analysis rules, etc. can be found in the Pict manuals <ref> [PT95b, Pie95] </ref>. The entities that can be communicated on channels are called values. They include variables, tuples of values, records of values, and constants. <p> Introducing names and record fields as sep-arate syntactic classes with just one production each gives some "growing room" to the syntax, which we exploit in defining a variety of derived forms in the full language <ref> [?, PT95b, Pie95] </ref>. Values can be decomposed by means of patterns. Pat = Name variable pattern [Pat,. . . ,Pat] tuple pattern record Id =Pat,. . . ,Id =Pat end record pattern _ wildcard pattern Name @ Pat layered pattern All the variables bound by a pattern must be distinct.
References-found: 7

