URL: ftp://gaia.cs.umass.edu/pub/Ramj94:Adaptive.ps.Z
Refering-URL: http://www.cs.umass.edu/~ramjee/papers.html
Root-URL: 
Email: framjee,kurose,towsleyg@cs.umass.edu hgs@fokus.gmd.de  
Title: Adaptive Playout Mechanisms for Packetized Audio Applications in Wide-Area Networks  
Author: Ramachandran Ramjee, Jim Kurose, Don Towsley Henning Schulzrinne 
Address: Berlin, Germany  
Affiliation: Department of Computer Science GMD-Fokus Univ. of Massachusetts  
Abstract: Recent interest in supporting packet-audio applications over wide area networks has been fueled by the availability of low-cost, toll-quality workstation audio and the demonstration that limited amounts of interactive audio can be supported by today's Internet. In such applications, received audio packets are buffered, and their playout delayed at the destination host in order to compensate for the variable network delays. In this paper we investigate the performance of four different algorithms for adaptively adjusting the playout delay of audio packets in an interactive packet-audio terminal application, in the face of such varying network delays. We evaluate the playout algorithms using experimentally-obtained delay measurements of audio traffic between several different Internet sites. Our results indicate that an adaptive algorithm which explicitly adjusts to the sharp, spike-like increases in packet delay which we observed in our traces can achieve a lower rate of lost packets for both a given average play-out delay and a given maximum buffer size. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Alvarez-Cuevas, M. Bertran, F. Oller and J. Selga, </author> <title> "Voice Synchronization in Packet Switching Networks," </title> <journal> IEEE Networks Magazine, </journal> <volume> Vol. 7, No. </volume> <month> 5 (Sept., </month> <year> 1993), </year> <pages> pp. 20 - 25. </pages>
Reference-contexts: This approach is advocated in <ref> [1] </ref>, where this playout delay is fixed either for the length of the audio call [9, 4], or is recalculated at the beginning of each talkspurt.
Reference: [2] <author> J.C. Bolot, </author> <title> "End-to-End Packet Delay and Loss Behavior in the Internet," </title> <booktitle> Proc. 1993 ACM SIG-COMM Conf., </booktitle> <address> (Sept. 1993, San Francisco), </address> <pages> pp. 289-298. </pages>
Reference-contexts: In this paper we investigate the performance of four different algorithms for adaptively adjusting the play-out delay of audio packets in an interactive packet-audio terminal application, in the face of such varying network delays. This work is motivated in part by recent Internet delay measurements <ref> [2, 12] </ref> indicating that end-to-end delays may fluctuate rapidly and significantly over small intervals of time. <p> A more serious concern is that the end-to-end delay distribution of packets within a talkspurt is not known, and can change over relatively short time scales <ref> [2] </ref>. An approach to dealing with the unknown nature of the delay distribution is to estimate these delays and adaptively respond to their change by dynamically adjusting the playout delay. In the following section, we define four receiver-based algorithms for performing such delay estimation and dynamic play-out delay adaptation. <p> In these traces, we noted frequent occurrences of delay spikes. The occurrence of spikes have been reported by Mills and Bolot <ref> [8, 2] </ref>. Figure 5, adapted from one of these traces, depicts a typical spike. Each point shown represents a packet arriving at the time indicated by its x-axis value, having experienced an end-to-end network delay (n i ) equal to the y-axis value.
Reference: [3] <author> S. Casner and S. Deering, </author> <title> "First IETF Internet Audiocast," </title> <journal> ACM Computer Communication Review, </journal> <volume> Vol. 22, No. </volume> <month> 3 (July </month> <year> 1992), </year> <pages> pp. 92 - 97. </pages>
Reference-contexts: For example, live audio from several sessions of the March 1992 Internet Engineering Task Force (IETF) meeting were "audiocast" over the Internet to participants at 20 sites <ref> [3] </ref>. More recently, sessions from the IETF meeting in Amsterdam were audiocast (and videocast) to over 500 users, using a semi-permanent multicast testbed, known as the mbone, layered over the Internet. <p> use of wide-area, packet-switched networks to carry packetized voice was an active research area in the late 70's and early 80's [4, 7, 9, 14] and has again recently seen a surge in activity, perhaps as a result of recent demonstrations of carrying such traffic over the 1 voice Internet <ref> [3, 13] </ref>. Throughout this time, the underlying model and assumptions regarding the generation and (to a somewhat lesser extent) the playout of packetized voice have remained unchanged. the sending and receiving hosts while taking part in an audio session.
Reference: [4] <author> D. Cohen, </author> <title> "Issues in Transnet Packetized Voice Communication," </title> <booktitle> Proc. Fifth Data Communications Symposium, </booktitle> <address> (Sept., 1977, Snowbird UT), </address> <pages> pp. </pages> <address> 6.10 - 6.13. </address>
Reference-contexts: This additional artificial delay until playout can either be fixed throughout the duration of an audio call, or may vary adaptively during a call's lifetime <ref> [4, 9, 14] </ref>. Packets which are not received before their scheduled playout time are considered lost. Packet loss rates of between 1 and 10% can be tolerated, depending on the manner in which voice is coded and missing packets are masked [7]. <p> We then quantitatively compare the performance of these four algorithms and discuss our results. Section 5 concludes the paper. 2 Background The use of wide-area, packet-switched networks to carry packetized voice was an active research area in the late 70's and early 80's <ref> [4, 7, 9, 14] </ref> and has again recently seen a surge in activity, perhaps as a result of recent demonstrations of carrying such traffic over the 1 voice Internet [3, 13]. <p> This approach is advocated in [1], where this playout delay is fixed either for the length of the audio call <ref> [9, 4] </ref>, or is recalculated at the beginning of each talkspurt. One potential problem with this approach is that the propagation delay is not known (although it can be estimated and typically remains fixed throughout the duration of the audio call).
Reference: [5] <author> John. G. Gruber and Nguyen H. LE, </author> <title> "Performance requirements for integrated voice/data networks," </title> <journal> IEEE J. on Selected Areas in Communications, </journal> <volume> Sol. SAC-6, No. </volume> <month> 1 (Dec. </month> <year> 1983), </year> <pages> pp. 981 - 1005. </pages>
Reference: [6] <author> V. Jacobson, </author> <title> "Congestion avoidance and control," </title> <booktitle> Proc. 1988 ACM SIGCOMM Conf.,(Aug. 1988, Stanford), </booktitle> <pages> pp. 314-329. </pages>
Reference-contexts: A discussion of this variation measure and standard measures of variation, such as standard deviation, can be found in <ref> [6] </ref>. The playout mechanism is further illustrated in Figure 3. <p> We now describe the four delay adaptation algorithms considered in this paper. 3.1 Algorithm 1 In our first algorithm, the delay estimate for the ith packet is calculated based on the RFC793 algorithm [11] and a measure of the variation in the delays is calculated as suggested by Van Jacobson <ref> [6] </ref> in the calculation of round-trip-time estimates for the TCP retransmit timer. <p> The low pass filter computation can be optimized, as suggested in <ref> [6] </ref>, by keeping scaled versions of ^ d i and ^v i and doing the multiplication/division as shift operations.
Reference: [7] <author> N. Jayant, </author> <title> "Effects of Packet Loss on Waveform Coded Speech," </title> <booktitle> Proc. Fifth Int. Conference on Computer Communications, </booktitle> <address> (Oct. 1980, Atlanta GA), </address> <pages> pp. 275 - 280. </pages>
Reference-contexts: Packets which are not received before their scheduled playout time are considered lost. Packet loss rates of between 1 and 10% can be tolerated, depending on the manner in which voice is coded and missing packets are masked <ref> [7] </ref>. In this paper we investigate the performance of four different algorithms for adaptively adjusting the play-out delay of audio packets in an interactive packet-audio terminal application, in the face of such varying network delays. <p> We then quantitatively compare the performance of these four algorithms and discuss our results. Section 5 concludes the paper. 2 Background The use of wide-area, packet-switched networks to carry packetized voice was an active research area in the late 70's and early 80's <ref> [4, 7, 9, 14] </ref> and has again recently seen a surge in activity, perhaps as a result of recent demonstrations of carrying such traffic over the 1 voice Internet [3, 13]. <p> On the other hand, setting the playout delay to a high value leads to longer delays between the transmission and the play-out of the audio packets; long delays are intolerable with interactive audio <ref> [7] </ref>. Thus we desire a playout adaptation mechanism which has low loss rate as well as low playout delay.
Reference: [8] <author> D. Mills, </author> <title> "Internet Delay experiments," ARPANET Working Group Requests for Comment, </title> <month> (December </month> <year> 1983), </year> <note> RFC 889. </note>
Reference-contexts: In our experimental studies, the value of ff was chosen to be 0.998002 to conform with the existing implementation of this algorithm in the distribution of NeVoT 1.4 [13]. 3.2 Algorithm 2 The second algorithm is a small modification to the first algorithm, based on a suggestion by Mills <ref> [8] </ref> which would allow the TCP retransmission timer estimate to adapt more quickly to short burst of packets incurring long delays. The idea is to use a different weighting mechanism by choosing two values of the weighting factor, one for increasing trends in the delay and one for decreasing trends. <p> In these traces, we noted frequent occurrences of delay spikes. The occurrence of spikes have been reported by Mills and Bolot <ref> [8, 2] </ref>. Figure 5, adapted from one of these traces, depicts a typical spike. Each point shown represents a packet arriving at the time indicated by its x-axis value, having experienced an end-to-end network delay (n i ) equal to the y-axis value.
Reference: [9] <author> W. Montgomery, </author> <title> "Techniques for Packet Voice Synchronization," </title> <journal> IEEE J. on Selected Areas in Communications, </journal> <volume> Sol. SAC-6, No. </volume> <month> 1 (Dec. </month> <year> 1983), </year> <pages> pp. 1022 - 1028. </pages>
Reference-contexts: This additional artificial delay until playout can either be fixed throughout the duration of an audio call, or may vary adaptively during a call's lifetime <ref> [4, 9, 14] </ref>. Packets which are not received before their scheduled playout time are considered lost. Packet loss rates of between 1 and 10% can be tolerated, depending on the manner in which voice is coded and missing packets are masked [7]. <p> We then quantitatively compare the performance of these four algorithms and discuss our results. Section 5 concludes the paper. 2 Background The use of wide-area, packet-switched networks to carry packetized voice was an active research area in the late 70's and early 80's <ref> [4, 7, 9, 14] </ref> and has again recently seen a surge in activity, perhaps as a result of recent demonstrations of carrying such traffic over the 1 voice Internet [3, 13]. <p> This approach is advocated in [1], where this playout delay is fixed either for the length of the audio call <ref> [9, 4] </ref>, or is recalculated at the beginning of each talkspurt. One potential problem with this approach is that the propagation delay is not known (although it can be estimated and typically remains fixed throughout the duration of the audio call). <p> Compression or expansion of silence by a small amount is not noticeable in the played-out speech <ref> [9] </ref>. 3 Four adaptive playout delay adjust ment algorithms In this section we define four adaptive playout delay adjustment algorithms. In describing these algorithms, the notation in Figure 2 will be useful. <p> The idea behind the four playout algorithms described in this paper is simple; all follow the so-called absolute timing method as defined by Montgomery <ref> [9] </ref>.
Reference: [10] <author> A. Mukherjee, </author> <title> "On the Dynamics and Significance of the Low Frequency Components of the Internet Load," </title> <type> TR CIS-92-83, </type> <institution> University of Penn., </institution> <address> Philadelphia, PA, </address> <month> December </month> <year> 1992. </year>
Reference: [11] <author> Jon Postel, </author> <title> editor, "Transmission Control Protocol specification," ARPANET Working Group Requests for Comment, </title> <month> (September </month> <year> 1981), </year> <note> RFC 793. </note>
Reference-contexts: We now describe the four delay adaptation algorithms considered in this paper. 3.1 Algorithm 1 In our first algorithm, the delay estimate for the ith packet is calculated based on the RFC793 algorithm <ref> [11] </ref> and a measure of the variation in the delays is calculated as suggested by Van Jacobson [6] in the calculation of round-trip-time estimates for the TCP retransmit timer.
Reference: [12] <author> D. Sanghi, O. Gudmundsson, A. Agrawala, </author> <title> "Experimental Assessment of of end-to-end Behavior on Internet," </title> <booktitle> Proc. IEEE Infocom93, (Apr. 1993, </booktitle> <address> San Francisco, CA), </address> <pages> pp. 867 - 874. </pages>
Reference-contexts: In this paper we investigate the performance of four different algorithms for adaptively adjusting the play-out delay of audio packets in an interactive packet-audio terminal application, in the face of such varying network delays. This work is motivated in part by recent Internet delay measurements <ref> [2, 12] </ref> indicating that end-to-end delays may fluctuate rapidly and significantly over small intervals of time.
Reference: [13] <author> H. Schulzrinne, </author> <title> "Voice Communication Across the Internet: a Network Voice Terminal," </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, U. Massachusetts, </institution> <address> Amherst MA, </address> <month> July </month> <year> 1992. </year> <note> (available via anonymous ftp to gaia.cs.umass.edu in pub/nevot/nevot.ps.Z) </note>
Reference-contexts: use of wide-area, packet-switched networks to carry packetized voice was an active research area in the late 70's and early 80's [4, 7, 9, 14] and has again recently seen a surge in activity, perhaps as a result of recent demonstrations of carrying such traffic over the 1 voice Internet <ref> [3, 13] </ref>. Throughout this time, the underlying model and assumptions regarding the generation and (to a somewhat lesser extent) the playout of packetized voice have remained unchanged. the sending and receiving hosts while taking part in an audio session. <p> When the audio source is active (i.e., sound is being produced) packets containing the audio samples are generated and sent into the network. The staircase nature of the sender in Figure 1 indicates that packets are being generated periodically at the source. In the NeVoT audio terminal program <ref> [13] </ref> used in our Internet experiments, one 160 byte audio packet is generated approximately every 20 milliseconds when the speaker is in talkspurt. The average talkspurt length is typically on the order of several 100's of milliseconds, although the lengths can vary with different silence detection thresholds. <p> In our experimental studies, the value of ff was chosen to be 0.998002 to conform with the existing implementation of this algorithm in the distribution of NeVoT 1.4 <ref> [13] </ref>. 3.2 Algorithm 2 The second algorithm is a small modification to the first algorithm, based on a suggestion by Mills [8] which would allow the TCP retransmission timer estimate to adapt more quickly to short burst of packets incurring long delays. <p> The computation of the variable var in Algorithm 4 can also be performed similarly as all fractions are chosen such that they are reciprocal powers of 2. 4 Algorithm Comparison 4.1 Experimental Internet delay mea surements NeVoT <ref> [13] </ref>, an audio conferencing tool, was used to collect experimental data. This tool has options for tracing various network- and audio-dependent events which occur during an audio conversation.
Reference: [14] <author> C. Weinstein and J.W. Forgie, </author> <title> "Experience with Speech Communication in Packet Networks," </title> <journal> IEEE J. on Selected Areas in Communications, </journal> <volume> Sol. SAC-6, No. </volume> <month> 1 (Dec. </month> <year> 1983), </year> <pages> pp. 963 - 980. </pages> <address> (UMASS-OSAKA) (UMASS-UCI) </address>
Reference-contexts: This additional artificial delay until playout can either be fixed throughout the duration of an audio call, or may vary adaptively during a call's lifetime <ref> [4, 9, 14] </ref>. Packets which are not received before their scheduled playout time are considered lost. Packet loss rates of between 1 and 10% can be tolerated, depending on the manner in which voice is coded and missing packets are masked [7]. <p> We then quantitatively compare the performance of these four algorithms and discuss our results. Section 5 concludes the paper. 2 Background The use of wide-area, packet-switched networks to carry packetized voice was an active research area in the late 70's and early 80's <ref> [4, 7, 9, 14] </ref> and has again recently seen a surge in activity, perhaps as a result of recent demonstrations of carrying such traffic over the 1 voice Internet [3, 13].
References-found: 14

