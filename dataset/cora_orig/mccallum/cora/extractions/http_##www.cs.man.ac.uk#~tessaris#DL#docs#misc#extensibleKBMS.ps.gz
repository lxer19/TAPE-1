URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/misc/extensibleKBMS.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Title: Extensible Knowledge Base Management for Description Logics to express everything desired, or because the implementation
Author: Alex Borgida 
Note: As all other logical representational formalisms, DLs are subject to the familiar expressiveness-tractability tradeoff, which leave users unhappy either because the language is not rich enough  
Date: April 21, 1997  
Affiliation: Dept. of Computer Science Rutgers University  
Abstract: This paper offers a new alternative for approaching this dilemma: a modularized software architecture for DL-based KBMS, which supports both through its structure and through methodological heuristics the extension of a base logic with new constructors. The architecture detailed here supports both the "subsumption reasoning" involving concepts, and the "recognition reasoning" involving individuals after incremental updates to the knowledge base. The ability to extend DL reasoners with new constructors that are motivated by specific problems or applications, and to customize the inferences to those desired by a user, offers a new approach to the problem that most likely there is no "perfect" knowledge representation and reasoning facility, one that will meet the needs of all users. Keywords: Description logics, knowledge representation, extensible reasoning, extensible architecture, subsumption, reconginer. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baader, F., and Hanscke, P., </author> <title> "A scheme for integrating concrete domains into concept languages", </title> <booktitle> Proc. </booktitle> <address> IJCAI'91, Australia, </address> <month> August </month> <year> 1991 </year>
Reference-contexts: Baader's proposal <ref> [1] </ref> for extending DLs with "concrete domains" allows concepts to consist of arbitrary predicates involving values from some domain other than ordinary objects (i.e., other than elements of I ), as long as these values are fillers of functional attributes of ordinary 11 objects. <p> This shows that all extensions programmable in <ref> [1] </ref> could also be programmed in the Pro-toDL framework.
Reference: [2] <editor> Baader, F., Hollunder, B., Nebel, B., Profitlich, H.-J., Franconi, E., </editor> <title> `An Empirical Analysis of Optimization Techniques for Terminological Representation Systems or- Making KRIS get a move on', </title> <journal> Applied Intelligence, </journal> <volume> Vol 4(2), </volume> <pages> pp 109-132, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The classification algorithms rely on the ! and =) relationships, but usually treat these as subroutines, and as such are largely DL-independent. Interesting previous work in this area has been reported in <ref> [2] </ref>. The DL-KBMS is also charged with detecting updates that are redundant (e.g., defining a class which is equivalent to a previously defined one), or those that lead to an inconsistent KB, and restoring the KB to a prior consistent state after such an error. <p> One approach is based on theorem proving techniques specially adapted for descriptions, particularly a variant of tableau techniques that determines the subsumption A =) B by checking for the unsatisfiability of A ^ :B; systems such as kris <ref> [2] </ref> and crack [11] follow this approach. Such systems have the advantage of being theoretically well-founded and provably complete.
Reference: [3] <author> H. W. Beck, S. K. Gala, and S. B. Navathe, </author> <title> "Classification as a query processing technique in the CANDIDE semantic data model," </title> <booktitle> Proc. Fifth IEEE International Data Engineering Conference, </booktitle> <month> February </month> <year> 1989, </year> <pages> 572-581. </pages>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references [8, 6]. 1 For examples, see <ref> [9, 3, 12, 14, 13] </ref>, the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as a language for identifying commonalities among
Reference: [4] <author> Borgida, A., </author> <title> "From Type Systems to Knowledge Representation: Natural Semantics Specifications for Description Logics," </title> <booktitle> Int. J. of Intelligent and Cooperative Information Systems 1(1), </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: In fact, the key advantage of DLs over Predicate Calculus is the syntactic differentiation of special kinds of assertions and the computational efficiency which comes from special purpose inference rules being used. A proof-theoretic specification of the meaning of DL0, based on the ideas of "natural semantics" <ref> [4] </ref>, would indicate, among others, that smaller bounds on the number of role fillers for role r lead to more specialized concepts: n m ` at-most (m,r) =) at-most (n,r) This rule can be paraphrased as "IF one can prove n m THEN one can write as the next line of
Reference: [5] <author> A. Borgida, </author> <title> "Description Logics in Data Management", </title> <journal> IEEE Trans. on Knowledge and Data Engineering, vol.7, </journal> <volume> no.5, </volume> <month> October </month> <year> 1995, </year> <pages> pp. 671-682. </pages>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references [8, 6]. 1 For examples, see [9, 3, 12, 14, 13], the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article <ref> [5] </ref>. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as a language for identifying commonalities among sets of individuals.
Reference: [6] <author> A. Borgida, </author> <title> "Towards the Systematic Development of Terminological Reasoners: CLASP Reconstructed", </title> <booktitle> in Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <address> Boston, MA, </address> <year> 1992, </year> <month> pp.259-269 </month>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references <ref> [8, 6] </ref>. 1 For examples, see [9, 3, 12, 14, 13], the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as <p> Finally, note that we have detailed elsewhere other extensions to ProtoDL, including ones for reasoning about plans <ref> [6] </ref>, concept constructors missing from Classic [8], and strings [7]. 3.4 Relationship to "Concrete Domain" extensions Although we shall address general work on extensible KR&R in the conclusion, there is one specific approach involving description logics that deserve closer scrutiny at this stage, while the details of the present work are
Reference: [7] <author> A. Borgida, C. Isbell, D. McGuinness, </author> <title> "Reasoning with Black Boxes: Handling Test Concepts in CLASSIC", </title> <booktitle> Proc. Intern. Workshop on Description Logics - DL-96, </booktitle> <address> Cambridge, MA, </address> <pages> pp 87-91, </pages> <year> 1996. </year>
Reference-contexts: Finally, note that we have detailed elsewhere other extensions to ProtoDL, including ones for reasoning about plans [6], concept constructors missing from Classic [8], and strings <ref> [7] </ref>. 3.4 Relationship to "Concrete Domain" extensions Although we shall address general work on extensible KR&R in the conclusion, there is one specific approach involving description logics that deserve closer scrutiny at this stage, while the details of the present work are still fresh.
Reference: [8] <author> Borgida, A., and Brachman, R., </author> " <title> Customizable Classification Inference in the ProtoDL Description Management System", </title> <booktitle> Proc. Conf. Information and Knowledge Management, </booktitle> <address> Baltimore, MD, </address> <month> November </month> <year> 1992, </year> <month> pp.482-490. </month>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references <ref> [8, 6] </ref>. 1 For examples, see [9, 3, 12, 14, 13], the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as <p> Finally, note that we have detailed elsewhere other extensions to ProtoDL, including ones for reasoning about plans [6], concept constructors missing from Classic <ref> [8] </ref>, and strings [7]. 3.4 Relationship to "Concrete Domain" extensions Although we shall address general work on extensible KR&R in the conclusion, there is one specific approach involving description logics that deserve closer scrutiny at this stage, while the details of the present work are still fresh.
Reference: [9] <author> Borgida, A., Brachman, R. J., McGuinness, D. L., and Resnick, L. A. </author> <title> "CLASSIC: A Structural Data Model for Objects," </title> <booktitle> Proc. 1989 ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June, </month> <year> 1989, </year> <pages> pp. 59-67. </pages>
Reference-contexts: There is growing evidence that DLs are useful in a variety of tasks dealing with data management 1 . As just one example, the Classic DL KBMS <ref> [9] </ref> was used in a prototype data exploration system [10] intended to support people in identifying interesting patterns in large accumulations of data from multiple sources; Classic was used, among others, as a language for capturing the domain model, as a unifying object-centered representation of information fl This work was supported <p> The material in Section 3.2 and the appendix have also been treated in references [8, 6]. 1 For examples, see <ref> [9, 3, 12, 14, 13] </ref>, the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as a language for identifying commonalities among <p> Most implemented systems that have a wider distribution and use, such as Classic <ref> [9] </ref>, loom [23] and back [22], follow a so-called "normalize-compare" paradigm, where most of the reasoning work is performed in an initial "normalization" phase, whose goal is to find a normal form for concepts which explicates implicit facts, eliminates redundancies and detects inconsistencies.
Reference: [10] <author> R. Brachman, P.Selfridge, L.Terveen, B.Altman, A. Borgida, F. Halper, T.Kirk, A.Lazar, S.McGuiness, L.Resnick, </author> <title> "Knowledge Representation Support for Data Archaelogy", </title> <booktitle> Int. J. of Intelligent and Cooperative Information Systems 2(2), </booktitle> <month> June </month> <year> 1993, </year> <month> pp.159-186. </month>
Reference-contexts: There is growing evidence that DLs are useful in a variety of tasks dealing with data management 1 . As just one example, the Classic DL KBMS [9] was used in a prototype data exploration system <ref> [10] </ref> intended to support people in identifying interesting patterns in large accumulations of data from multiple sources; Classic was used, among others, as a language for capturing the domain model, as a unifying object-centered representation of information fl This work was supported in part by NSF grants IRI-91-19310 and IRI-9619979.
Reference: [11] <author> Paolo Bresciani, Enrico Franconi and Sergio Tessaris, </author> <title> "Implementing and testing expressive Description Logics: a preliminary report", </title> <booktitle> Proc. 1995 Intern. Workshop on Description Logics, </booktitle> <address> Rome, Italy; June 1995. </address> <note> Also in the Proc. of the International KRUSE Symposium, Santa Cruz; August 1995. 8 For details, see the manual and [7]. 20 </note>
Reference-contexts: One approach is based on theorem proving techniques specially adapted for descriptions, particularly a variant of tableau techniques that determines the subsumption A =) B by checking for the unsatisfiability of A ^ :B; systems such as kris [2] and crack <ref> [11] </ref> follow this approach. Such systems have the advantage of being theoretically well-founded and provably complete. <p> On the other hand, KRSn has built-in support for rules and exceptions to them, which are an important component for any knowledge-based environment. Finally, recently, Franconi <ref> [11] </ref> has suggested that the tableau-based approach of crack is extensible through the addition of new "completion" rules, which are traditionally used to either build a model of a certain concept/knowledge base or prove its inconsistency.
Reference: [12] <author> Buchheit, M., M. Jeusfeld, W. Nutt, and M. Staudt, </author> <title> "Subsumption between queries in object-oriented databases", </title> <booktitle> Information Systems 19(1), </booktitle> <address> pp.33-54, </address> <year> 1994. </year>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references [8, 6]. 1 For examples, see <ref> [9, 3, 12, 14, 13] </ref>, the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as a language for identifying commonalities among
Reference: [13] <author> Catarci, T. and M. Lenzerini, </author> <title> "Representing and using Interschema Knowledge in Cooperative Information Systems", </title> <journal> Int. J. of Intelligent and Coorperative Information Systems 2(4), </journal> <pages> pp. 375-398, </pages> <month> Decembe </month> <year> 1993. </year>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references [8, 6]. 1 For examples, see <ref> [9, 3, 12, 14, 13] </ref>, the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as a language for identifying commonalities among
Reference: [14] <author> Diego Calvanese, Giuseppe De Giacomo, and Maurizio Lenzerini. </author> <title> "Structured objects: </title> <booktitle> Modeling and resoning." In Proceedings of the Fourth International Conference on Deductive and Object-Oriented Databases (DOOD-95), Number 1013 in Lecture Notes in Computer Science, </booktitle> <pages> pages 229-246, </pages> <year> 1995. </year>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references [8, 6]. 1 For examples, see <ref> [9, 3, 12, 14, 13] </ref>, the proceedings of a series of workshops on databases and knowledge repre sentation [20] as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as a language for identifying commonalities among
Reference: [15] <author> Doyle, J, and R. Patil, </author> <title> "Two theses of knowledge representation: language restrictions, taxonomic classification, and the utility of representation services", </title> <booktitle> Artificial Intelligence 48(3), </booktitle> <month> April </month> <year> 1991, </year> <month> pp.261-298. </month>
Reference-contexts: We argued that these issues are best attacked on a per-application basis. To resolve this problem, we proposed the use of an extensible DL-KBMS, where one tries to go as far as possible with a set of core, efficient concept constructors, and then, when encountering unsolvable expressiveness problems <ref> [15] </ref>, add new concept constructors to overcome them.
Reference: [16] <author> Gaines, B.R., </author> <title> "A Class Library Implementation of a Principled Open Architecture Knowledge Representation Server with Plug-In Data Types", </title> <booktitle> Proc. 13th IJCAI, </booktitle> <address> pp.504-509, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: and we also care about the semantics of the extension and access to databases. 7 The pseudocode for InferFromAssert [same-as] is omitted in the interest of saving space. 18 The utility of a declarative specification and of a clean, extensible modularization for a DL-reasoner have also been advocated by Gaines <ref> [16] </ref>, whose system is based on principles of algebraic lattice theory.
Reference: [17] <author> Genesereth, M., </author> <title> "An overview of Meta-Level Architecture," </title> <booktitle> Proc. AAAI-83, </booktitle> <address> Washington, DC, </address> <year> 1983. </year>
Reference-contexts: One approach to this (used in [18] and <ref> [17] </ref>), would have been to offer some form of "declarative description" of the inferences to be performed, and then have a meta-interpreter which executes them.
Reference: [18] <author> Greiner, R., and D. Lenat, "RLL: </author> <title> A Representation Language Language," </title> <booktitle> Proc. AAAI-80, </booktitle> <address> Stanford, CA, </address> <year> 1980. </year>
Reference-contexts: One approach to this (used in <ref> [18] </ref> and [17]), would have been to offer some form of "declarative description" of the inferences to be performed, and then have a meta-interpreter which executes them.
Reference: [19] <author> Karp P.D., Myers K.L., Gruber T., </author> <title> "The Generic Frame Protocol", </title> <booktitle> Proc. 14th IJCAI, </booktitle> <address> pp.768-774, </address> <year> 1995. </year>
Reference-contexts: Such a dual approach ought to make it easier to integrate extensions into a "universal" language for communicating between knowledge bases, such as the Generic Frame Protocol <ref> [19] </ref>. The specification is offered using rules of inference in the "natural semantics" style, and a heursitic methodology suggests various categories of rules to be looked for.
Reference: [20] <institution> Knowledge Representation meets Databases: </institution> <note> Workshop Proceeedings, http://sunsite.informatik.rwth-aachen.de/Publications/CEUR-WS/ </note>
Reference-contexts: The material in Section 3.2 and the appendix have also been treated in references [8, 6]. 1 For examples, see [9, 3, 12, 14, 13], the proceedings of a series of workshops on databases and knowledge repre sentation <ref> [20] </ref> as well as the review article [5]. 1 retrieved from archival data bases, as a query language (supporting the organization of queries themselves), and potentially as a language for identifying commonalities among sets of individuals.
Reference: [21] <author> Lenat, D., and R. Guha, </author> <title> Building Large Knowledge-Based Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: One approach to this (used in [18] and [17]), would have been to offer some form of "declarative description" of the inferences to be performed, and then have a meta-interpreter which executes them. Except for cycl <ref> [21] </ref>, dealing with the efficient addition of new forms of inference rule schemas in First Order Predicate Calculus, we see no evidence that such a meta-interpreter has a chance of being nearly as efficient as custom-built implementations, so we have opted for a different approach: Joshua [24] is also an effort
Reference: [22] <author> K. von Luck,B. Nebel, C. Peltason, and A. Schmiedel, </author> <title> "The anatomy of the BACK System", KIT (Kunstliche Intelligenz und Textverstehen) Report 41, </title> <institution> Technical University of Berlin, </institution> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Most implemented systems that have a wider distribution and use, such as Classic [9], loom [23] and back <ref> [22] </ref>, follow a so-called "normalize-compare" paradigm, where most of the reasoning work is performed in an initial "normalization" phase, whose goal is to find a normal form for concepts which explicates implicit facts, eliminates redundancies and detects inconsistencies.
Reference: [23] <author> R.M. MacGregor, </author> <title> "A deductive pattern matcher", </title> <booktitle> in Proceedings AAAI-87, </booktitle> <address> St. Paul, </address> <month> Min-nesota </month> <year> (1987) </year> <month> 403-408. </month>
Reference-contexts: Most implemented systems that have a wider distribution and use, such as Classic [9], loom <ref> [23] </ref> and back [22], follow a so-called "normalize-compare" paradigm, where most of the reasoning work is performed in an initial "normalization" phase, whose goal is to find a normal form for concepts which explicates implicit facts, eliminates redundancies and detects inconsistencies. <p> Without a priori knowledge, after an update of e one might have to reconsider every other individual in the KB. One alternative, used in Loom <ref> [23] </ref>, is to keep track of all questions asked about an individual as part of the previous processing ("hits" and "misses"), and if answers to these do not change as a result of the update then no re-processing is needed.
Reference: [24] <author> Rowley, S., Shrobe, H., Cassels, R. "Joshua: </author> <title> Uniform access to heterogeneous knowledge structures", </title> <booktitle> AAAI'86, </booktitle> <address> pp.48-52, </address> <year> 1986 </year>
Reference-contexts: Except for cycl [21], dealing with the efficient addition of new forms of inference rule schemas in First Order Predicate Calculus, we see no evidence that such a meta-interpreter has a chance of being nearly as efficient as custom-built implementations, so we have opted for a different approach: Joshua <ref> [24] </ref> is also an effort at providing extensible reasoning, which allows the user (knowledge system engineer) the ability to change at compile-time the implementation of any or all of the elements of the protocol of inference, which describes the reasoning of the system.
Reference: [25] <author> I. Horrocks, A. Rector, </author> <title> "Using a description logi with concept inclusions", </title> <booktitle> in Papers from the 1996 Workshop on DLs, </booktitle> <publisher> AAAI Press. </publisher>
Reference-contexts: Such systems have the advantage of being theoretically well-founded and provably complete. Unfortunately, the worst-case complexity bound of the resulting algorithms are usually not polynomial time ([12] is a notable exception), and there is evidence that with large realistic KBs performance is slow enough to require additional heuristics <ref> [25] </ref>.
Reference: [26] <author> Vilain, M., </author> <title> `The Restricted Language Architecture of a Hybrid Representation System', </title> <booktitle> IJCAI-85, </booktitle> <pages> pp 547-551, </pages> <year> 1985. </year> <month> 21 </month>
Reference-contexts: Another alternative is to use an elaborate truth-maintenance system (as available in KL-TWO <ref> [26] </ref>), for each kind of judgement. In our opinion, both these approaches might however become very expensive in terms of space and often computation time, because they maintain too many details.
References-found: 26

