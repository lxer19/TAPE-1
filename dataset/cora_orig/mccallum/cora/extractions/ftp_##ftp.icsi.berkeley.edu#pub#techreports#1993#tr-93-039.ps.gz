URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1993/tr-93-039.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1993.html
Root-URL: http://www.icsi.berkeley.edu
Title: Building Convex Space Partitions Induced by Pairwise Interior-Disjoint Simplices  
Author: Marco Pellegrini 
Address: I 1947 Center Street Suite 600 Berkeley, California 94704  King's College London  King's College, Strand, London WC2R 2LS U.K.  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Dept. of Computer Science,  Department of Computer Science,  
Pubnum: TR-93-039  
Email: e-mail: marco@dcs.kcl.ac.uk  
Phone: 1-510-642-4274 FAX 1-510-643-7684  
Date: August 1993  
Abstract: Given a set S of n pairwise interior-disjoint (d 1)-simplices in d-space, for d 3, a Convex Space Partition induced by S (denoted CSP (S)) is a partition of d-space into convex cells such that the interior of each cell does not intersect the interior of any simplex in S. In this paper it is shown that a CSP (S) of size O(n d1 ) can be computed deterministically in time O(n d1 ). These bounds are worst case optimal for d = 3. The results are proved using a variation of the efficient hierarchical cuttings of Chazelle. 
Abstract-found: 1
Intro-found: 1
Reference: [AS90] <author> B. Aronov and M. Sharir. </author> <title> Triangles in space or building (and analyzing) castles in the air. </title> <journal> Combinatorica, </journal> <volume> 10(2) </volume> <pages> 137-173, </pages> <year> 1990. </year>
Reference-contexts: Quite often these parts must be convex to facilitate further computations. Thus the problem of computing efficiently Convex Space Partitions lies at the heart of many geometric problems in 3-and higher dimensional spaces. Aronov and Sharir in <ref> [AS90, AS92] </ref> prove that a cell C in an arrangement of n possibly intersecting (d 1)-simplices in E d can be partitioned in O (n d1 ) convex polyhedra. Unfortunately this combinatorial result does not immediately imply an efficient algorithm to build such a partition in d 4. <p> The algorithm of Aronov and Sharir is more general (for d = 3) than the one presented in this paper since the simplices are not required to be disjoint. On the other hand the method in <ref> [AS90, AS92] </ref>, which is based on randomized techniques in [Cla87], has expected time and size bounds O (n 2+ffi ) also for disjoint triangles.
Reference: [AS92] <author> B. Aronov and M. Sharir. </author> <title> Castles in the air revisited. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 146-256, </pages> <year> 1992. </year>
Reference-contexts: Quite often these parts must be convex to facilitate further computations. Thus the problem of computing efficiently Convex Space Partitions lies at the heart of many geometric problems in 3-and higher dimensional spaces. Aronov and Sharir in <ref> [AS90, AS92] </ref> prove that a cell C in an arrangement of n possibly intersecting (d 1)-simplices in E d can be partitioned in O (n d1 ) convex polyhedra. Unfortunately this combinatorial result does not immediately imply an efficient algorithm to build such a partition in d 4. <p> The algorithm of Aronov and Sharir is more general (for d = 3) than the one presented in this paper since the simplices are not required to be disjoint. On the other hand the method in <ref> [AS90, AS92] </ref>, which is based on randomized techniques in [Cla87], has expected time and size bounds O (n 2+ffi ) also for disjoint triangles.
Reference: [Ber93] <author> M. Bern. </author> <title> Compatible tetrahedralizations. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 281-288, </pages> <year> 1993. </year>
Reference-contexts: Again, it is unlikely that this technique can be extended to similar problems in higher dimensional space or to non-simple polyhedra in 3-space. Some convex space partitions for special polyhedral sets in E 3 are discussed in <ref> [Ber93] </ref>. In this paper we show how to construct Convex Space Partitions (which enclose both cylindrical decompositions and BSP's) induced by pairwise interior-disjoint (d 1)-simplices in d-dimensional space (d 3).
Reference: [CEG + 90] <author> K.L. Clarkson, H. Edelsbrunner, L.J. Guibas, M. Sharir, and E. Welzl. </author> <title> Combinatorial complexity bounds for arrangements of curves and spheres. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 5 </volume> <pages> 99-160, </pages> <year> 1990. </year>
Reference-contexts: Mulmuley [Mul91] uses a cylindrical decomposition to solve visibility problems in 3-space. The cylindrical decomposition in [Mul91], which is similar to a construction in <ref> [CEG + 90] </ref>, has worst case size O (n 2 ) and is built in worst case time O (n 2 log n). 1 The method in [Mul91] is based on sweeping a plane in 3-space, together with the dynamic maintenance of a planar point location data structure.
Reference: [Cha84] <author> B. Chazelle. </author> <title> Convex partitions of polyhedra: a lower bound and worst-case optimal algorithm. </title> <journal> SIAM J. on Computing, </journal> <volume> 13(3) </volume> <pages> 488-507, </pages> <year> 1984. </year>
Reference-contexts: In this paper we take a different approach that avoids any sweeping technique and dynamic maintenance of data structures. For the special case when S is the boundary of a simple polyhedron 2 in 3-space Chazelle <ref> [Cha84] </ref> gives a Convex Space Partition of size O (n 2 ) which is built in time O (n 2 ). Both bounds are worst case optimal. The method in [Cha84] relies on the connectivity properties of the boundary of a simple polyhedron and therefore this method does not extend to <p> For the special case when S is the boundary of a simple polyhedron 2 in 3-space Chazelle <ref> [Cha84] </ref> gives a Convex Space Partition of size O (n 2 ) which is built in time O (n 2 ). Both bounds are worst case optimal. The method in [Cha84] relies on the connectivity properties of the boundary of a simple polyhedron and therefore this method does not extend to a set of disjoint simplices or to a non-simple polyhedron. <p> Moreover, the size and time bounds are worst case optimal for d = 3, as follows from an (n 2 ) lower bound in <ref> [Cha84] </ref>. 1 Actually the time and the size of the cylindrical decomposition in [Mul91] depend on the number of "regular crossings" of the projection of the edges of S onto the xy-plane.
Reference: [Cha87] <author> B. Chazelle. </author> <title> Approximation and decomposition of shapes. </title> <booktitle> In Advances in Robotics, </booktitle> <volume> Vol. 1: </volume> <booktitle> Algorithmic and Geometric Aspects of Robotics, </booktitle> <pages> pages 145-185. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction 1.1 Convex Space Partitions Decomposing subsets of Euclidean Real Space E d into convex parts is an ubiquitous problem in Computational Geometry. Most of the known results are for d = 2; 3 and fewer for higher dimensional spaces (i.e. d 4). We refer the reader to <ref> [Cha87] </ref> for a survey of results in the plane. In this paper we deal with d 3. The problem in its general formulation is the following. We are given a subset S E d and we consider the free space F S = E d =S.
Reference: [Cha93] <author> B. Chazelle. </author> <title> Cutting hyperplanes for divide and conquer. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 9 </volume> <pages> 145-158, </pages> <year> 1993. </year>
Reference-contexts: We obtain a deterministic algorithm that builds a Convex Space Partition of size O (n d1 ) in time O (n d1 ). The results of this paper are obtained by modifying the the Hierarchical Cuttings Method of Chazelle <ref> [Cha93] </ref>. The main idea is to project the set S onto a (d 1)-subspace and construct a cutting on the projected arrangement. This computation is intermixed with additional split operations which are carried out in the original d-dimensional space. <p> We refer the reader to [PS85, Ede87]. For the analogous problem in dimension d 3 fewer results are known. If S is a set of hyperplanes then we can locate a point in time O (log n) using O (n d ) storage <ref> [Cha93] </ref>. If S forms a convex partition of E 3 with n edges faces and vertices, a method of Preparata and Tamassia [PT89] locates a point in S in time O (log 2 n) using O (n log 2 n) storage. <p> Definition 4 An (1=r)-cutting for H is a partition of R d into interior-disjoint simplices such that any simplex meets at most n=r of the hyperplanes in H. The number of simplices in the partition is called the size of the cutting. Chazelle <ref> [Cha93] </ref> builds a sequence of (1=r i 0 )-cuttings for H for i = 1; ::; k, which are denoted by C 1 :::; C k , where k = log r 0 r, r 0 is a constant, and r a parameter r &lt; n. <p> Let n=r k1 0 &gt; jH (s)j &gt; n=r k 0 jH (s)j=n and = 0 log 0 . We use the following lemmas from <ref> [Cha93] </ref>: Lemma 1 Let A be an (1=2d 0 )-approximation of H (s) and R a sparse (1=2d 0 )-net for (A; s), then we have R s 4 (=jH (s)j) d H s + 4 d = 0 .
Reference: [Cla87] <author> K.L. Clarkson. </author> <title> New applications of random sampling in computational geometry. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 2 </volume> <pages> 195-222, </pages> <year> 1987. </year>
Reference-contexts: The algorithm of Aronov and Sharir is more general (for d = 3) than the one presented in this paper since the simplices are not required to be disjoint. On the other hand the method in [AS90, AS92], which is based on randomized techniques in <ref> [Cla87] </ref>, has expected time and size bounds O (n 2+ffi ) also for disjoint triangles.
Reference: [CP90] <author> B. Chazelle and L. Palios. </author> <title> Triangulating a nonconvex polytope. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 5 </volume> <pages> 505-526, </pages> <year> 1990. </year>
Reference-contexts: Both bounds are worst case optimal. The method in [Cha84] relies on the connectivity properties of the boundary of a simple polyhedron and therefore this method does not extend to a set of disjoint simplices or to a non-simple polyhedron. Later, Chazelle and Palios <ref> [CP90] </ref> gave an algorithm to decompose a simple polyhedron in 3-space which produces O (n + r 2 ) convex pieces in time O (nr + r 2 log r) where n is the number of edges of the polyhedron and r in the number of reflex edges.
Reference: [Ede87] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: This class of input includes boundaries of simple and non-simple polyhedra in E d . We can think of this class as an high-dimensional extension of planar maps <ref> [PS85, Ede87] </ref>, which are arrangements of pairwise interior-disjoint segments. In order to solve problems on the set S, such as locate points, plan collision free paths, etc., it is important to chop the free space F S into simple and manageable parts. <p> We also need an efficient method for locating the cell containing a query point. Point location on planar maps is a very important problem and mentioning all the important papers on the subject is beyond the scope of this paper. We refer the reader to <ref> [PS85, Ede87] </ref>. For the analogous problem in dimension d 3 fewer results are known. If S is a set of hyperplanes then we can locate a point in time O (log n) using O (n d ) storage [Cha93].
Reference: [Mul91] <author> K. Mulmuley. </author> <title> Hidden surface removal with respect to a moving view point. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 512-522, </pages> <year> 1991. </year>
Reference-contexts: In Constructive Solid Geometry BSP's are used to find small formulas 1 for the description of non-convex polyhedral objects. In the context of Hidden Surface Removal BSP's are used to compute efficiently the correct visibility order of polyhedral faces with respect to a view-point (see <ref> [PY90, Mul91] </ref> for more details on applications). Mulmuley [Mul91] uses a cylindrical decomposition to solve visibility problems in 3-space. <p> In the context of Hidden Surface Removal BSP's are used to compute efficiently the correct visibility order of polyhedral faces with respect to a view-point (see [PY90, Mul91] for more details on applications). Mulmuley <ref> [Mul91] </ref> uses a cylindrical decomposition to solve visibility problems in 3-space. The cylindrical decomposition in [Mul91], which is similar to a construction in [CEG + 90], has worst case size O (n 2 ) and is built in worst case time O (n 2 log n). 1 The method in [Mul91] <p> In the context of Hidden Surface Removal BSP's are used to compute efficiently the correct visibility order of polyhedral faces with respect to a view-point (see [PY90, Mul91] for more details on applications). Mulmuley <ref> [Mul91] </ref> uses a cylindrical decomposition to solve visibility problems in 3-space. The cylindrical decomposition in [Mul91], which is similar to a construction in [CEG + 90], has worst case size O (n 2 ) and is built in worst case time O (n 2 log n). 1 The method in [Mul91] is based on sweeping a plane in 3-space, together with the dynamic maintenance of a <p> <ref> [Mul91] </ref> uses a cylindrical decomposition to solve visibility problems in 3-space. The cylindrical decomposition in [Mul91], which is similar to a construction in [CEG + 90], has worst case size O (n 2 ) and is built in worst case time O (n 2 log n). 1 The method in [Mul91] is based on sweeping a plane in 3-space, together with the dynamic maintenance of a planar point location data structure. This method is off the optimal worst case time by a logarithmic factor. Moreover this sweeping approach does not give us an efficient algorithm in higher dimensional space. <p> For d = 3, our result improves of a logarithmic factor over the worst case time needed to construct a cylindrical decomposition using the method in <ref> [Mul91] </ref>. Moreover, the size and time bounds are worst case optimal for d = 3, as follows from an (n 2 ) lower bound in [Cha84]. 1 Actually the time and the size of the cylindrical decomposition in [Mul91] depend on the number of "regular crossings" of the projection of the <p> case time needed to construct a cylindrical decomposition using the method in <ref> [Mul91] </ref>. Moreover, the size and time bounds are worst case optimal for d = 3, as follows from an (n 2 ) lower bound in [Cha84]. 1 Actually the time and the size of the cylindrical decomposition in [Mul91] depend on the number of "regular crossings" of the projection of the edges of S onto the xy-plane. <p> If S forms a convex partition of E 3 with n edges faces and vertices, a method of Preparata and Tamassia [PT89] locates a point in S in time O (log 2 n) using O (n log 2 n) storage. The cylindrical decomposition in <ref> [Mul91] </ref> can be associated with a point location data structure of worst case size O (n 2 ) that answers point location queries in time O (log 2 n).
Reference: [Pel93] <author> M. Pellegrini. </author> <title> Point Location, Vertical Ray Shooting and Motion Planning in Arrangements of Simplices. </title> <type> Manuscript, </type> <month> August </month> <year> 1993. </year>
Reference-contexts: The algorithm works in any fixed dimension and is optimal for d = 3. We apply these partitions to solve point location and path planning problems. In a companion paper <ref> [Pel93] </ref> we use similar techniques to solve point location and path planning problems in arrangements of intersecting simplices. 7
Reference: [PS85] <author> F.P. Preparata and M.I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springr Verlag, </publisher> <year> 1985. </year>
Reference-contexts: This class of input includes boundaries of simple and non-simple polyhedra in E d . We can think of this class as an high-dimensional extension of planar maps <ref> [PS85, Ede87] </ref>, which are arrangements of pairwise interior-disjoint segments. In order to solve problems on the set S, such as locate points, plan collision free paths, etc., it is important to chop the free space F S into simple and manageable parts. <p> We also need an efficient method for locating the cell containing a query point. Point location on planar maps is a very important problem and mentioning all the important papers on the subject is beyond the scope of this paper. We refer the reader to <ref> [PS85, Ede87] </ref>. For the analogous problem in dimension d 3 fewer results are known. If S is a set of hyperplanes then we can locate a point in time O (log n) using O (n d ) storage [Cha93].
Reference: [PT89] <author> F. Preparata and R. Tamassia. </author> <title> Efficient spatial point location. </title> <booktitle> In Proceedings of the 1989 Workshop on Algorithms and Data Structures, </booktitle> <pages> pages 3-11, </pages> <year> 1989. </year> <month> 8 </month>
Reference-contexts: If S is a set of hyperplanes then we can locate a point in time O (log n) using O (n d ) storage [Cha93]. If S forms a convex partition of E 3 with n edges faces and vertices, a method of Preparata and Tamassia <ref> [PT89] </ref> locates a point in S in time O (log 2 n) using O (n log 2 n) storage.
Reference: [PY90] <author> M.S. Paterson and F.F. Yao. </author> <title> Efficient binary space partitions for hidden surface removal and solid modeling. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 5 </volume> <pages> 485-503, </pages> <year> 1990. </year> <month> 9 </month>
Reference-contexts: The leaves are associated with regions whose interior does not meet any triangle in S. Paterson and Yao show in <ref> [PY90] </ref> how to obtain a BSP's of size O (n 2 ) in time O (n 3 ). They restrict the construction to those BSP whose cells are bounded by planes spanning triangles in S (auto-partitions). <p> They restrict the construction to those BSP whose cells are bounded by planes spanning triangles in S (auto-partitions). For the class of auto-partition they also show a lower bound (n 2 ) on the number of cells of the BSP, in the worst case. The technique in <ref> [PY90] </ref> constructs a BSP of optimal worst case size but the time bound for the computation is far from optimal. In higher dimensional space the method in [PY90] builds a BSP of size O (n d1 ) in time O (n d+1 ). <p> The technique in <ref> [PY90] </ref> constructs a BSP of optimal worst case size but the time bound for the computation is far from optimal. In higher dimensional space the method in [PY90] builds a BSP of size O (n d1 ) in time O (n d+1 ). Binary Space Partitions have applications in Constructive Solid Geometry and Hidden Surface Removal. In Constructive Solid Geometry BSP's are used to find small formulas 1 for the description of non-convex polyhedral objects. <p> In Constructive Solid Geometry BSP's are used to find small formulas 1 for the description of non-convex polyhedral objects. In the context of Hidden Surface Removal BSP's are used to compute efficiently the correct visibility order of polyhedral faces with respect to a view-point (see <ref> [PY90, Mul91] </ref> for more details on applications). Mulmuley [Mul91] uses a cylindrical decomposition to solve visibility problems in 3-space.
References-found: 15

