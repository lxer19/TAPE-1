URL: http://www.cs.pitt.edu/~gupta/research/Dist/pdcs97.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dist.html
Root-URL: 
Email: wuw@cs.pitt.edu  mspezial@starbase.cs.trincoll.edu  gupta@cs.pitt.edu  
Title: On-line Avoidance of Communication Intrusion in Token Ring Networks  
Author: Wanqing Wu Madalene Spezialetti Rajiv Gupta 
Keyword: monitoring, intrusion, token ring protocol, message passing, priority scheduling.  
Address: Pittsburgh Pittsburgh, PA 15260  Hartford, CT 06106  Pittsburgh Pittsburgh, PA 15260  
Affiliation: Department of Computer Science University of  Computer Science Department Trinity College  Department of Computer Science University of  
Abstract: Distributed programs are often instrumented for collecting information to assist in analyzing the behavior of an application. However, the act of monitoring a process can alter the very behavior being monitored. The changes in the behavior occur because the order in which application messages are delivered at a site and the pool of messages available at the site at critical execution points are different for monitored and unmonitored executions. We consider a distributed system in which communication is carried out using a token ring network and the scheduling of the application processes mapped to a site is carried out using priority based scheduling. In this paper we present intrusion removal techniques that control the relative progress in communication and computation activities to avoid changes in message ordering and message pool contents at each site. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. S. Tanenbaum, </author> <title> Computer Networks, </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference: [2] <author> M. Clegg and K. Marzullo, </author> <title> Clock Synchronization in Hard Real-Time Distributed Systems, </title> <type> Technical Report TR CS96-478, </type> <institution> University of California at San Diego, La Jolla, </institution> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: We consider a distributed system in which communication is carried out using a token ring network and the scheduling of the application processes mapped to a site is carried out using priority based scheduling. In addition, we assume that the clock synchronization algorithm <ref> [2] </ref> is being used. First, a modified token ring protocol is developed which ensures that message ordering is correctly enforced during monitored execution.
Reference: [3] <author> J.A. Gannon, K.J. Williams, M.S. Andersland, T.L. Casavant, and J.E. Lummp, </author> <title> Trace Recovery in Multi-Processing Systems: Architectural Considerations, </title> <booktitle> International Conference on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pages 99-102, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: These delays can significantly alter the behavior of a distributed application being monitored, particularly on nondeterministic events, such as resource allocation and the fairness and performance of scheduling techniques. An approach for analyzing program behavior by post-processing of execution traces to compensate for the intrusive effects of monitoring <ref> [3, 8] </ref> has been commonly used. fl Supported in part by NSF through a PYI Award CCR-9157371, CCR-9704350, NASA/Connecticut Space Grant College Consortium, and Trinity College.
Reference: [4] <author> R. Gupta and M. Spezialetti, </author> <title> Dynamic Techniques for Minimizing the Intrusive Affects of Monitoring Actions, </title> <booktitle> IEEE-CS 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 368-376, </pages> <address> Vancouver, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: as follows: M CP = (NA i jMA) fl CA 1 (MCT 1 i ) CA 2 (MCT 2 i ) (NA i jMA) fl CA n (MCT n i ) ) i CA 1 MCT 1 i i i i 2 NA fl i i n NA fl In <ref> [4, 5] </ref> we developed techniques for ensuring that the outcomes of computation critical actions are the same for monitored and unmonitored executions. These techniques are based upon the maintenance of site intrusion times. <p> In addition, the updating of site intrusion times is also performed by the update rou tines, whose details are now discussed. The update rules are discussed in greater depth in <ref> [4] </ref>. CatchUpUpdate: If an action performed during monitored execution would not have been performed during an 7 unmonitored execution, then the time spent on it is added to the site intrusion time.
Reference: [5] <author> W. Wu, M. Spezialetti and R. Gupta, </author> <title> On-line Avoidance of the Intrusive Effects of Monitoring on Runtime Scheduling Decisions, </title> <booktitle> IEEE-CS 16th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 216-223, </pages> <address> HongKong, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: To address the limitations of the trace-based approach, we developed a general approach for on-line intrusion removal on process scheduling and non-deterministic receives in our previous work <ref> [5, 6, 7] </ref>. However, the monitoring effects on message transmission ordering on the network, communication intrusion, were not considered previously. <p> as follows: M CP = (NA i jMA) fl CA 1 (MCT 1 i ) CA 2 (MCT 2 i ) (NA i jMA) fl CA n (MCT n i ) ) i CA 1 MCT 1 i i i i 2 NA fl i i n NA fl In <ref> [4, 5] </ref> we developed techniques for ensuring that the outcomes of computation critical actions are the same for monitored and unmonitored executions. These techniques are based upon the maintenance of site intrusion times. <p> The key to our approach is the maintenance of token and site intrusion times. Although we have used a priority-based scheduler in this work, our approach is general and has been successfully applied to other scheduling paradigms <ref> [5] </ref>.
Reference: [6] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> Designing a Nonintrusive Monitoring Tool for Developing Complex Distributed Applications, </title> <booktitle> Second IEEE International Conference on Engineering of Complex Computer Systems, </booktitle> <pages> pages 450-457, </pages> <address> Montreal, Canada, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: To address the limitations of the trace-based approach, we developed a general approach for on-line intrusion removal on process scheduling and non-deterministic receives in our previous work <ref> [5, 6, 7] </ref>. However, the monitoring effects on message transmission ordering on the network, communication intrusion, were not considered previously.
Reference: [7] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> Guaranteed Intrusion Removal from Monitored Distributed Applications, </title> <booktitle> Eighth IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 422-425, </pages> <address> New Orleans, Louisiana, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: To address the limitations of the trace-based approach, we developed a general approach for on-line intrusion removal on process scheduling and non-deterministic receives in our previous work <ref> [5, 6, 7] </ref>. However, the monitoring effects on message transmission ordering on the network, communication intrusion, were not considered previously.
Reference: [8] <author> A. Malony and D. Reed, </author> <title> Models for Performance Perturbation Analysis, </title> <booktitle> ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 15-25, </pages> <year> 1991. </year> <month> 8 </month>
Reference-contexts: These delays can significantly alter the behavior of a distributed application being monitored, particularly on nondeterministic events, such as resource allocation and the fairness and performance of scheduling techniques. An approach for analyzing program behavior by post-processing of execution traces to compensate for the intrusive effects of monitoring <ref> [3, 8] </ref> has been commonly used. fl Supported in part by NSF through a PYI Award CCR-9157371, CCR-9704350, NASA/Connecticut Space Grant College Consortium, and Trinity College.
References-found: 8

