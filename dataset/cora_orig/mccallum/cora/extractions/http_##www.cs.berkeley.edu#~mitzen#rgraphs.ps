URL: http://www.cs.berkeley.edu/~mitzen/rgraphs.ps
Refering-URL: http://www.cs.berkeley.edu/~mitzen/
Root-URL: 
Title: Designing Stimulating Programming Assignments for an Algorithms Course: A Collection of Problems Based on Random Graphs  
Author: Michael Mitzenmacher 
Abstract: The field of random graphs contains many surprising and interesting results. Here we demonstrate how some of these results can be used to develop stimulating, open-ended problems for courses in algorithms and data structures or graph theory. Specifically, we provide problems for algorithms that compute minimum spanning trees, connected components, maximum flows, and shortest paths.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.Atjai, J. Komlos, and E. Szemedredi. </author> <title> Largest Random Component of a k-Cube. </title> <journal> Combinatorica. </journal> <volume> 2, </volume> <year> 1982, </year> <pages> 1-7. </pages>
Reference-contexts: spanning tree approaches a small constant! The result, due to Frieze [4] and presented in [2, p. 141-144], can be formulated as follows: Theorem 1 Let s (n) be a random variable corresponding to the weight of the minimum spanning tree when the edges given weights independently and uniformly from <ref> [0; 1] </ref>. <p> In fact, we make the following conjecture: Conjecture: The diameter of an n-dimensional hypercube with edge weights independently and uniformly distributed from <ref> [0; 1] </ref> is at most 2 with high probability for all n. We gave this problem on an assignment, and were surprised by the results. <p> This particular problem seems not to have been mentioned previously in the literature; however, several related results can be found. (For example, see <ref> [1] </ref> and [6].) Proving tight bounds on the diameter, however, appears difficult; we would be interested in a proof. Because the number of vertices and edges grows exponentially with the dimension, students should not be expected to run this experiment for large values of n.
Reference: [2] <author> B. Bollobas. </author> <title> Random Graphs. </title> <publisher> Academic Press, </publisher> <year> 1985. </year>
Reference-contexts: Algorithms for all of the problems we consider can be found in [3, 7, 9], and many other standard texts. For more information on the area of random graphs, we recommend the indispensable Random Graphs <ref> [2] </ref> by Bela Bollobas. Throughout we assume that the students 1 have simple and reliable pseudo-random number generators available in their programming environment. <p> The actual result is rather peculiar; as n goes to infinity, the weight of the minimum spanning tree approaches a small constant! The result, due to Frieze [4] and presented in <ref> [2, p. 141-144] </ref>, can be formulated as follows: Theorem 1 Let s (n) be a random variable corresponding to the weight of the minimum spanning tree when the edges given weights independently and uniformly from [0; 1]. <p> This follows from the following more specific theorem, paraphrased from <ref> [2, p. 150-151] </ref>: Theorem 2 If we throw n (log n+c) 2 edges, the probability that the graph is connected goes to e e c Using this fact, we can get a good estimate for the expected number of edges required to connect the graph as n gets large. <p> This type of behavior appears often in the study of random graphs; for more details on threshold behavior, see <ref> [2, pp. 37-38] </ref>. Again, this problem raises many interesting questions, making it a good candidate for open-ended assignments. For example: 1. How many edges must be included before there is one large component, say with over half the vertices? Over some fraction p of the vertices? 2. <p> Again, n log n 2 is a threshold function; if we throw n (log n+c) 2 edges, the probability that the graph is connected goes to e 2e c . See <ref> [2, p.155-168] </ref> for more details. Students should notice behaviors similar to those in the problem of when a graph becomes connected. Again, one might also have students explore some of the following questions: 1.
Reference: [3] <author> T. Cormen, C. Leiserson, and R.Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: We will not delve too deeply into these technical details, but instead merely attempt provide some basic intuition and references where possible. Algorithms for all of the problems we consider can be found in <ref> [3, 7, 9] </ref>, and many other standard texts. For more information on the area of random graphs, we recommend the indispensable Random Graphs [2] by Bela Bollobas. Throughout we assume that the students 1 have simple and reliable pseudo-random number generators available in their programming environment. <p> n, since the expected number of vertices whose adjacent edges are at least this size is approximately 1. 1 3 Union-Find: Connected components Union-find refers to a class of algorithms used to maintain a data structure for disjoint sets, many of which have been analyzed by Tarjan. (For references, see <ref> [3, p. 461] </ref>.) These algorithms are often used in connected components algorithms, which motivates the following problem: Problem: Consider a graph that initially contains n vertices and no edges. Randomly include one edge at a time until the graph is connected; that is, until there is only one connected component.
Reference: [4] <author> A. Frieze. </author> <title> On the Value of a Random Minimum Spanning Tree Problem. </title> <journal> Discrete Applied Math. </journal> <volume> 10, </volume> <year> 1985, </year> <pages> 47-56. </pages>
Reference-contexts: The actual result is rather peculiar; as n goes to infinity, the weight of the minimum spanning tree approaches a small constant! The result, due to Frieze <ref> [4] </ref> and presented in [2, p. 141-144], can be formulated as follows: Theorem 1 Let s (n) be a random variable corresponding to the weight of the minimum spanning tree when the edges given weights independently and uniformly from [0; 1].
Reference: [5] <author> B. Hajek. </author> <title> Asymptotic Analysis of an Assignment Problem Arising in a Distributed Communications Protocol. </title> <booktitle> Proceedings of the 27th Conference on Decision and Control. </booktitle> <year> 1988, </year> <pages> 1455-1459. </pages>
Reference-contexts: Experimentally determine how f (n) grows. For a specific value of n use your samples to plot the an estimate of the probability that the maximal matching has at least m edges. Do you notice anything? 2 This question was studied by Hajek <ref> [5] </ref>. As n ! 1, f (n) 0:8381n, and as n gets larger, the tighter the concentration about its mean.
Reference: [6] <author> A.V. Kostochka, A.A. Sapozhenko, and K.Weber. </author> <title> Radius and Diameter of Random Subgraphs of the Hypercube. Random Structures and Algorithms. </title> <type> 4, </type> <year> 1992, </year> <pages> 215-229. </pages>
Reference-contexts: This particular problem seems not to have been mentioned previously in the literature; however, several related results can be found. (For example, see [1] and <ref> [6] </ref>.) Proving tight bounds on the diameter, however, appears difficult; we would be interested in a proof. Because the number of vertices and edges grows exponentially with the dimension, students should not be expected to run this experiment for large values of n.
Reference: [7] <author> D. Kozen. </author> <title> The Design and Analysis of Algorithms. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: We will not delve too deeply into these technical details, but instead merely attempt provide some basic intuition and references where possible. Algorithms for all of the problems we consider can be found in <ref> [3, 7, 9] </ref>, and many other standard texts. For more information on the area of random graphs, we recommend the indispensable Random Graphs [2] by Bela Bollobas. Throughout we assume that the students 1 have simple and reliable pseudo-random number generators available in their programming environment.
Reference: [8] <author> S. Lumetta, A. Krishnamurthy, and D. Culler. </author> <title> Towards Modeling the Performance of a Fast Connected Components Algorithm on Parallel Machines. </title> <note> Available at http://www.cs.berkeley.edu/ stevel. Conference version at http://www.supercomp.org/sc95/proceedings/465 SLUM/SC95.HTM. </note>
Reference-contexts: What is the size of the largest component after m edges have been included? The second largest component? 3. What is the expected number of isolated vertices after m edges have been included? 4. What is the behavior on other types of graphs, such as lattices? (See, for example, <ref> [8] </ref>.) 5. How well does the disjoint set data structure perform on this problem? 5 Students may be encouraged to experiment with these or other similar questions. 4 Flow algorithms: Bipartite matchings Finding maximal bipartite matchings is a standard example of a use of maximum flow algorithms.
Reference: [9] <author> R. Sedgewick. </author> <title> Algorithms. </title> <publisher> Addison-Wesley Publishing Co, </publisher> <year> 1988. </year> <month> 9 </month>
Reference-contexts: We will not delve too deeply into these technical details, but instead merely attempt provide some basic intuition and references where possible. Algorithms for all of the problems we consider can be found in <ref> [3, 7, 9] </ref>, and many other standard texts. For more information on the area of random graphs, we recommend the indispensable Random Graphs [2] by Bela Bollobas. Throughout we assume that the students 1 have simple and reliable pseudo-random number generators available in their programming environment.
References-found: 9

