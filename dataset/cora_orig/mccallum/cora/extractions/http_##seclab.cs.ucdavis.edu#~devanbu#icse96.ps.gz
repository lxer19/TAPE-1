URL: http://seclab.cs.ucdavis.edu/~devanbu/icse96.ps.gz
Refering-URL: http://seclab.cs.ucdavis.edu/~devanbu/prem_papers.html
Root-URL: http://www.cs.ucdavis.edu
Title: Analytical and Empirical Evaluation of Software Reuse Metrics  
Author: Prem Devanbu, Sakke Karstu, Walcelio Melo and William Thomas 
Abstract: How much can be saved by using existing software components when developing new software systems? With the increasing adoption of reuse methods and technologies, this question becomes critical. However, directly tracking the actual cost savings due to reuse is difficult. A worthy goal would be to develop a method of measuring the savings indirectly by analyzing the code for reuse of components. The focus of this paper is to evaluate how well several published software reuse metrics measure the "time, money and quality" benefits of software reuse. We conduct this evaluation both analytically and empirically. On the analytic front, we introduce some properties that should arguably hold of any measure of "time, money and quality" benefit due to reuse. We assess several existing software reuse metrics using these properties. Empirically, we constructed a toolset (using GEN++) to gather data on all published reuse metrics from C++ code; then, using some productivity and quality data from "nearly replicated" student projects at the University of Maryland, we evaluate the relationship the known metrics and the process data. Our empirical study sheds some light the applicability of our different analytic properties, and has raised some practical issues to be addressed as we undertake broader study of reuse metrics in industrial projects. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Baker. </author> <title> A theory of parametrized pattern matching: algorithms and applications. </title> <journal> Journal of Comput. Sys. </journal> <note> Sci., to appear, </note> <year> 1995. </year>
Reference-contexts: Of course, it conforms only for components which are modified 25% or less. This deficiency stems from the difficulty of identifying the "degree of cutting and pasting" in modified components. However, we are experimenting some new algorithms due to Baker <ref> [1] </ref> which might lead to repeatable, analytic approaches to quantifying the level of modification. 3.5 Discussion Table 1 provides a summary of the examined reuse measures in terms of their conformance to the properties listed in section 2.
Reference: [2] <author> V. Basili, L. Briand, and W. Melo. </author> <title> Measuring the impact of reuse on quality and productivity in object-oriented systems. </title> <type> Technical Report CS-TR-3395, </type> <institution> University of Maryland, Computer Science Department, </institution> <year> 1995. </year>
Reference-contexts: Measures derivable directly from the code are internal measures. Several such measures of software reuse have been proposed in the literature <ref> [2, 4, 9, 11, 14] </ref>. This paper is concerned with the evaluation of how well various indirect, internal measures of software reuse actually measure the relevant external process attribute: reuse benefit. The rest of the paper is organized as follows. <p> (S c v ) &gt; R b (S c m ) &gt; R b (S ) Since the term "slightly modified" is hard to define, Property 8 can be particularly difficult to measure a repeatable way; perhaps for this reason, most published measures ignore this property, with the exception of <ref> [2] </ref>. However, as discussed below, our empirical study suggests that this in an important property. <p> We now describe a measure that actually accounts for non-verbatim reuse. 3.4 Reuse Ratio The reuse ratio has been used for many in the NASA Software Engineering Laboratory [13]. Recently this metric has been further investigated on object-oriented systems developed in C++ and Ada <ref> [2, 15] </ref>. It is the only measure examined here that addresses Property 8. This measure is defined for a system S, with components C i ; i : : : n. For each component C i , we use a Size (C i ), as before. <p> In practice, it is difficult to account precisely for the degree of custom coding in a reused component. In <ref> [2, 15] </ref> this problem has been handled by asking the reuser if 25% or more of a component had been changed; then, the value of Change i is thresholded as follows (IR is a binary value standing for is reused) IR (i) = 1 if Change i &lt; 0:25 ; 0 <p> To do so, we used the data gathered in study performed at the University of Maryland <ref> [2] </ref>. Section 4.1 describes the product and process measures that were collected in the study, and Section 4.2 provides a summary of the metrics collected for each of the programs in the study. <p> We describe here only the product and process data that are relevant to help us validate the suite of reuse metrics presented in this paper. For further details about how these data were gathered and validated see <ref> [2] </ref>. 4.1.1 Product data We have built the software tool infrastructure to gather data about 4 different reuse measures: our R sf metrics, the RSI metric used by Poulin and others, and the RL and RF metrics of Frakes and Terry. Our tools have 3 elements. <p> Unfortunately, we did not have a software tool to calculate reuse ratio. We used a form, the component origination form <ref> [2] </ref>, to capture whether a component has been developed from scratch or has been developed from a reused component. In the latter case, we asked the developers to tell us if more or less than 25 percent of a component had been changed. <p> In the former case, the component was labeled: Extensively modified and in the latter case: slightly modified . If the component was inserted into the system without any modification it was labeled: verbatim reuse. Only verbatim reuse and slightly modified have been used to calculate reuse ratio <ref> [2] </ref>. 4.1.2 Effort Here we are interested in estimating the effort breakdown for development phases, and for error correction. Again, we used forms filled out by the developers to track person-hours expended across development activities. These activities include: * Analysis.
Reference: [3] <author> J. M. Bieman. </author> <title> Deriving measures of softwre reuse in object oriented systems. </title> <editor> In T. Denvir, R. Her-man, and R. W. Whittey, editors, </editor> <booktitle> Formal Aspects of Measurement, </booktitle> <pages> pages 79-82. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: measures of reuse benefit turn out to be not strictly consistent with one or more of the properties listed above; in fact, as we shall see below, there are some inherent difficulties in any approach to measuring reuse. 3 Analytic Evaluation of Reuse Metrics There are many models and metrics <ref> [3, 4, 5, 10, 11, 14] </ref> in the literature that try to evaluate the degree of reuse in a software system. Most of these measures are concerned with estimating the actual financial benefits due to reuse. <p> Most of these measures are concerned with estimating the actual financial benefits due to reuse. Bieman <ref> [3] </ref> suggests a range of measures of various reuse occurrences in object oriented software. Our theoretical framework, as well the empirical study, is concerned more with measures that yield a single number that could potentially estimate the savings due to reuse.
Reference: [4] <author> T. Bollinger and S Pfleeger. </author> <title> Economics of reuse: issues and alternatives. </title> <journal> Information and Software Technology, </journal> <volume> 32(10) </volume> <pages> 643-652, </pages> <year> 1990. </year>
Reference-contexts: Measures derivable directly from the code are internal measures. Several such measures of software reuse have been proposed in the literature <ref> [2, 4, 9, 11, 14] </ref>. This paper is concerned with the evaluation of how well various indirect, internal measures of software reuse actually measure the relevant external process attribute: reuse benefit. The rest of the paper is organized as follows. <p> measures of reuse benefit turn out to be not strictly consistent with one or more of the properties listed above; in fact, as we shall see below, there are some inherent difficulties in any approach to measuring reuse. 3 Analytic Evaluation of Reuse Metrics There are many models and metrics <ref> [3, 4, 5, 10, 11, 14] </ref> in the literature that try to evaluate the degree of reuse in a software system. Most of these measures are concerned with estimating the actual financial benefits due to reuse. <p> In this section we will compare some of these models to our proposed set of properties of reuse benefit measures. 3.1 Producer/Consumer Models Several researchers <ref> [5, 11, 10, 4, 14] </ref> seek to evaluate the benefits of reuse in a corporation. They use different models, but essentially, they all comprise a producer-consumer framework. Reusable artifacts are created by the producer (e.g., a domain engineering group which produces reusable software) and re-used by several consumers. <p> Gaffney et al have investigated different models for computing the financial benefits of reuse [11, 10]. Poulin et al [14] have developed and institutionalized a comprehensive reuse program that incorporates a producer/consumer financial model of reuse benefits. Bollinger and Pfleeger <ref> [4] </ref> propose financial and accounting practices to motivate multi-project reuse, based on the producer/consumer model. A key component of all these efforts is a model for the amount of savings during the coding phase, directly attributable to reuse. <p> A key component of all these efforts is a model for the amount of savings during the coding phase, directly attributable to reuse. However, the methods used for computing coding-phase savings in <ref> [4, 14, 11, 10] </ref> do not necessarily conform to the properties presented in x 2.3. For example Poulin [14] gives reuse benefit credit only for external components, and for each reused component just once, regardless of the number of times it is called.
Reference: [5] <author> Y-F. Chen, B. Krishnamurthy, and K-P. Vo. </author> <title> An Objective Reuse Metric: Model and Methodology. </title> <booktitle> In Fifth European Software Engineering Conference, </booktitle> <year> 1995. </year>
Reference-contexts: measures of reuse benefit turn out to be not strictly consistent with one or more of the properties listed above; in fact, as we shall see below, there are some inherent difficulties in any approach to measuring reuse. 3 Analytic Evaluation of Reuse Metrics There are many models and metrics <ref> [3, 4, 5, 10, 11, 14] </ref> in the literature that try to evaluate the degree of reuse in a software system. Most of these measures are concerned with estimating the actual financial benefits due to reuse. <p> In this section we will compare some of these models to our proposed set of properties of reuse benefit measures. 3.1 Producer/Consumer Models Several researchers <ref> [5, 11, 10, 4, 14] </ref> seek to evaluate the benefits of reuse in a corporation. They use different models, but essentially, they all comprise a producer-consumer framework. Reusable artifacts are created by the producer (e.g., a domain engineering group which produces reusable software) and re-used by several consumers. <p> To estimate the actual cost savings (Reuse Cost Avoidance, or RCA) he multiplies the RSI number by the a per-line cost savings. Chen et al <ref> [5] </ref> use a very similar computation, but have constructed a repeatable, tool-based measurement apparatus.
Reference: [6] <author> P. Devanbu. </author> <title> genoa a customizable, language and front-end independent code analyzer. </title> <booktitle> In Proc. of 14th Int'l Conf. on Software Engineering (ICSE), </booktitle> <pages> pages 307-317. </pages> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: Our tools have 3 elements. First, we have a static analyzer, built with the GEN++ <ref> [6] </ref> analyzer generator, which analyses C++ programs and generates call graph and function size information. This information is generated into flat files.
Reference: [7] <author> P. Devanbu and S. Karstu. </author> <title> Measuring the benefits of software reuse. </title> <type> Technical report, </type> <institution> AT&T Bell Laboratories, </institution> <year> 1994. </year>
Reference-contexts: Thus, RL and RF may not always conform to Property 8. 3.3 Size and Frequency metric - R sf In this section, we describe another normalized indirect measure of reuse benefit, R sf , first described in <ref> [7] </ref>. <p> larger than the difference between size (c e ) and size (c int ), (i.e.,): size (c e ) &gt;> j size (c int ) size (c e ) j (7) Under this assumption, we can easily show (the details are omitted here for brevity, and may be found in <ref> [7] </ref>) that R sf (S) &gt; R sf ( ~ S) as specified by Property (6). Now we turn to property (7). Assume that we have a system S with an external function c e 1 , invoked i times (i &gt; 1).
Reference: [8] <author> N. E. Fenton. </author> <title> Software Metrics: A Rigorous Approach. </title> <publisher> Chapman & Hall, </publisher> <year> 1991. </year>
Reference-contexts: We can think of reuse benefit of a project or system, as being the normalized (percentage) financial gain due to reuse. This is an example of an external process attribute (see <ref> [8] </ref>), concerned with an external input (money) into the software development process. Unfortunately, the direct measurement of the actual financial impact of reuse in a system can be difficult. The project as a whole may not have the machinery in place to gather financial data. <p> framework to assist in the study of reuse metrics, covering: a) the formulation of analytic properties, b) analytic evaluation of published metrics, c) construction of metrics gathering tools, and d) empirical evaluation which in turn shed some light on the analytic properties. 2 Indirect Measurement of Reuse Ben efit Fenton <ref> [8] </ref> categorizes software measures along two orthogonal axes. The first is the process/product axis: a metric may measure an attribute of software product, (e.g., quality of code), or an attribute of software process (e.g., cost of design review meetings). Another, orthogonal axis is the internal/external axis.
Reference: [9] <author> W. Frakes and C. Terry. </author> <title> Reuse level metrics. </title> <type> Technical Report TR 94-03, </type> <institution> Virginia Polytechnic Institute and State University, </institution> <year> 1991. </year>
Reference-contexts: Measures derivable directly from the code are internal measures. Several such measures of software reuse have been proposed in the literature <ref> [2, 4, 9, 11, 14] </ref>. This paper is concerned with the evaluation of how well various indirect, internal measures of software reuse actually measure the relevant external process attribute: reuse benefit. The rest of the paper is organized as follows. <p> Our case study suggests that there is a significant degree of benefit from re-using partially modified components. 3.2 Reuse Level Models Unlike the work described in the previous chapter, which is concerned exclusively with how much code is being reused, Frakes and Terry <ref> [9] </ref> focus on how code is being reused. Their reuse level and frequency measures are concerned with how frequently components are being used. They distinguish between internal and external reuse; total reuse is the sum of these two. <p> RF, on the other hand, is usage sensitive. However, these measures are insensitive to the cost of the modules being reused; thus, they don't incorporate Property (5). However, <ref> [9] </ref> does describe a simple method to weight these measures based on computation of certain ratios of the average sizes of reused modules. While this "size weighting" method accounts for the size to some extent, it is not sensitive to the level of reuse of modules of various sizes.
Reference: [10] <author> J. E. Gaffney and R. Cruickshank. </author> <title> A general economic model for software reuse. </title> <booktitle> In Proc. of the 14th Int'l Conf. on Software Engineering. </booktitle> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: measures of reuse benefit turn out to be not strictly consistent with one or more of the properties listed above; in fact, as we shall see below, there are some inherent difficulties in any approach to measuring reuse. 3 Analytic Evaluation of Reuse Metrics There are many models and metrics <ref> [3, 4, 5, 10, 11, 14] </ref> in the literature that try to evaluate the degree of reuse in a software system. Most of these measures are concerned with estimating the actual financial benefits due to reuse. <p> In this section we will compare some of these models to our proposed set of properties of reuse benefit measures. 3.1 Producer/Consumer Models Several researchers <ref> [5, 11, 10, 4, 14] </ref> seek to evaluate the benefits of reuse in a corporation. They use different models, but essentially, they all comprise a producer-consumer framework. Reusable artifacts are created by the producer (e.g., a domain engineering group which produces reusable software) and re-used by several consumers. <p> Gaffney et al have investigated different models for computing the financial benefits of reuse <ref> [11, 10] </ref>. Poulin et al [14] have developed and institutionalized a comprehensive reuse program that incorporates a producer/consumer financial model of reuse benefits. Bollinger and Pfleeger [4] propose financial and accounting practices to motivate multi-project reuse, based on the producer/consumer model. <p> A key component of all these efforts is a model for the amount of savings during the coding phase, directly attributable to reuse. However, the methods used for computing coding-phase savings in <ref> [4, 14, 11, 10] </ref> do not necessarily conform to the properties presented in x 2.3. For example Poulin [14] gives reuse benefit credit only for external components, and for each reused component just once, regardless of the number of times it is called.
Reference: [11] <author> J. E. Gaffney and T. A. Durek. </author> <title> Software reuse | key to enhanced productivity: some quantitative models. </title> <journal> Information and Software Technology, </journal> <volume> 31(5) </volume> <pages> 258-267, </pages> <year> 1989. </year>
Reference-contexts: Measures derivable directly from the code are internal measures. Several such measures of software reuse have been proposed in the literature <ref> [2, 4, 9, 11, 14] </ref>. This paper is concerned with the evaluation of how well various indirect, internal measures of software reuse actually measure the relevant external process attribute: reuse benefit. The rest of the paper is organized as follows. <p> measures of reuse benefit turn out to be not strictly consistent with one or more of the properties listed above; in fact, as we shall see below, there are some inherent difficulties in any approach to measuring reuse. 3 Analytic Evaluation of Reuse Metrics There are many models and metrics <ref> [3, 4, 5, 10, 11, 14] </ref> in the literature that try to evaluate the degree of reuse in a software system. Most of these measures are concerned with estimating the actual financial benefits due to reuse. <p> In this section we will compare some of these models to our proposed set of properties of reuse benefit measures. 3.1 Producer/Consumer Models Several researchers <ref> [5, 11, 10, 4, 14] </ref> seek to evaluate the benefits of reuse in a corporation. They use different models, but essentially, they all comprise a producer-consumer framework. Reusable artifacts are created by the producer (e.g., a domain engineering group which produces reusable software) and re-used by several consumers. <p> Gaffney et al have investigated different models for computing the financial benefits of reuse <ref> [11, 10] </ref>. Poulin et al [14] have developed and institutionalized a comprehensive reuse program that incorporates a producer/consumer financial model of reuse benefits. Bollinger and Pfleeger [4] propose financial and accounting practices to motivate multi-project reuse, based on the producer/consumer model. <p> A key component of all these efforts is a model for the amount of savings during the coding phase, directly attributable to reuse. However, the methods used for computing coding-phase savings in <ref> [4, 14, 11, 10] </ref> do not necessarily conform to the properties presented in x 2.3. For example Poulin [14] gives reuse benefit credit only for external components, and for each reused component just once, regardless of the number of times it is called. <p> This kind of needless re-use, by "re-discovering" external components, might inflate the RSI count and thus complicate the return on investment computations. This would appear to present difficulties for both of <ref> [11] </ref> and [14]. Intuitively, the problem seems to arise from the exclusive focus on the reused code (RSI) rather than the manner in which it is reused in the rest of the code. Thus simply by inflating RSI, without re-using it effectively, one can get an inflated relative benefit number.
Reference: [12] <author> R. </author> <title> Greer. All about daytona. </title> <type> Technical report, </type> <institution> AT&T Bell Laboratories, </institution> <year> 1994. </year>
Reference-contexts: Our tools have 3 elements. First, we have a static analyzer, built with the GEN++ [6] analyzer generator, which analyses C++ programs and generates call graph and function size information. This information is generated into flat files. These are then processed by a relational database system (Daytona <ref> [12] </ref>) which supports such features as transitive closure (which is needed to identify a connected call graph), and aggregate queries (which are needed to compute the different summary metrics). Unfortunately, we did not have a software tool to calculate reuse ratio.
Reference: [13] <author> F. McGarry, R. Pajerski, G. Page, S. Waligora, V. Basili, and M. Zelkowitz. </author> <title> Software process improvement in the nasa software engineering laboratory. </title> <type> Technical Report CMU/SEI-95-TR-22, </type> <institution> Carniege-Mellon Unv., S/W Eng. Institute, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: We now describe a measure that actually accounts for non-verbatim reuse. 3.4 Reuse Ratio The reuse ratio has been used for many in the NASA Software Engineering Laboratory <ref> [13] </ref>. Recently this metric has been further investigated on object-oriented systems developed in C++ and Ada [2, 15]. It is the only measure examined here that addresses Property 8. This measure is defined for a system S, with components C i ; i : : : n.
Reference: [14] <author> J. Poulin, J. Caruso, and D. Hancock. </author> <title> The business case for software reuse. </title> <journal> IBM Systems Journal, </journal> <volume> 32(4) </volume> <pages> 567-594, </pages> <year> 1993. </year>
Reference-contexts: Measures derivable directly from the code are internal measures. Several such measures of software reuse have been proposed in the literature <ref> [2, 4, 9, 11, 14] </ref>. This paper is concerned with the evaluation of how well various indirect, internal measures of software reuse actually measure the relevant external process attribute: reuse benefit. The rest of the paper is organized as follows. <p> measures of reuse benefit turn out to be not strictly consistent with one or more of the properties listed above; in fact, as we shall see below, there are some inherent difficulties in any approach to measuring reuse. 3 Analytic Evaluation of Reuse Metrics There are many models and metrics <ref> [3, 4, 5, 10, 11, 14] </ref> in the literature that try to evaluate the degree of reuse in a software system. Most of these measures are concerned with estimating the actual financial benefits due to reuse. <p> In this section we will compare some of these models to our proposed set of properties of reuse benefit measures. 3.1 Producer/Consumer Models Several researchers <ref> [5, 11, 10, 4, 14] </ref> seek to evaluate the benefits of reuse in a corporation. They use different models, but essentially, they all comprise a producer-consumer framework. Reusable artifacts are created by the producer (e.g., a domain engineering group which produces reusable software) and re-used by several consumers. <p> Gaffney et al have investigated different models for computing the financial benefits of reuse [11, 10]. Poulin et al <ref> [14] </ref> have developed and institutionalized a comprehensive reuse program that incorporates a producer/consumer financial model of reuse benefits. Bollinger and Pfleeger [4] propose financial and accounting practices to motivate multi-project reuse, based on the producer/consumer model. <p> A key component of all these efforts is a model for the amount of savings during the coding phase, directly attributable to reuse. However, the methods used for computing coding-phase savings in <ref> [4, 14, 11, 10] </ref> do not necessarily conform to the properties presented in x 2.3. For example Poulin [14] gives reuse benefit credit only for external components, and for each reused component just once, regardless of the number of times it is called. <p> However, the methods used for computing coding-phase savings in [4, 14, 11, 10] do not necessarily conform to the properties presented in x 2.3. For example Poulin <ref> [14] </ref> gives reuse benefit credit only for external components, and for each reused component just once, regardless of the number of times it is called. His argument is that the cost of implementing the component is saved only once; after that each additional use should not get additional credit. <p> This kind of needless re-use, by "re-discovering" external components, might inflate the RSI count and thus complicate the return on investment computations. This would appear to present difficulties for both of [11] and <ref> [14] </ref>. Intuitively, the problem seems to arise from the exclusive focus on the reused code (RSI) rather than the manner in which it is reused in the rest of the code. Thus simply by inflating RSI, without re-using it effectively, one can get an inflated relative benefit number. <p> For this purpose, these measures differ from the RSI measure used by <ref> [14] </ref>; here, there is actually a focus on how the reusable components are used, rather than just the total line count of reused code. In addition Frakes and Terry give credit for both internal and external components. However, RL and RF are different.
Reference: [15] <author> W. Thomas, A. Delis, and V. Basili. </author> <title> An analysis of errors in a reuse-oriented development environment. </title> <type> Technical Report CS-TR-3424, </type> <institution> Dept. of Computer Science, University of Maryland, College Park, MD, 20742, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: We now describe a measure that actually accounts for non-verbatim reuse. 3.4 Reuse Ratio The reuse ratio has been used for many in the NASA Software Engineering Laboratory [13]. Recently this metric has been further investigated on object-oriented systems developed in C++ and Ada <ref> [2, 15] </ref>. It is the only measure examined here that addresses Property 8. This measure is defined for a system S, with components C i ; i : : : n. For each component C i , we use a Size (C i ), as before. <p> In practice, it is difficult to account precisely for the degree of custom coding in a reused component. In <ref> [2, 15] </ref> this problem has been handled by asking the reuser if 25% or more of a component had been changed; then, the value of Change i is thresholded as follows (IR is a binary value standing for is reused) IR (i) = 1 if Change i &lt; 0:25 ; 0
Reference: [16] <author> E. J. Weyuker. </author> <title> Evaluating software complexity metrics. </title> <journal> IEEE Transacations on Software Engineering, </journal> <volume> 14(9) </volume> <pages> 1357-1365, </pages> <year> 1988. </year>
Reference-contexts: This paper is concerned with the evaluation of how well various indirect, internal measures of software reuse actually measure the relevant external process attribute: reuse benefit. The rest of the paper is organized as follows. First, following the lead of Weyuker <ref> [16] </ref> in the field of complexity measures, we develop some general properties or axioms that (we argue) should apply to any measure of reuse benefit. <p> A parallel (or perhaps preceding) approach, proposed by Weyuker <ref> [16] </ref> and others is to enumerate some formal properties that should hold of any measure (direct or indirect) of the attribute in question. Then, given a candidate measure, one can evaluate whether these properties apply to it. Weyuker used this approach to evaluate several internal measures of complexity. <p> So the maximal value of reuse benefit would be strictly less that 1 2 . Thus, we have, for any system S: Property 1 8S; 0 R b (S) &lt; 1 2.3 Implementation Dependence Weyuker's Property 4 <ref> [16] </ref> asserts that there are systems with the same function, but different complexity measures (based on the implementation style). This implementation dependence is a crucial aspect that we demand of any good measure of reuse benefit. Clearly, it is possible to produce the same functionality with and without reuse.
References-found: 16

