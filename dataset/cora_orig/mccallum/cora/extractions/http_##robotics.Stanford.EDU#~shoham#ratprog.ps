URL: http://robotics.Stanford.EDU/~shoham/ratprog.ps
Refering-URL: http://robotics.Stanford.EDU/~shoham/
Root-URL: 
Email: shoham@cs.stanford.edu  
Title: Rational Programming  
Author: Yoav Shoham 
Date: July 16, 1997  
Affiliation: Stanford University  
Abstract: In its early days AI played an important role in the development of novel programming paradigms. There is an opportunity now to do it again, by inventing new programming languages and systems that embrace various aspects of rationality. The paper surveys and reflects on several recent efforts within AI in this area, and suggests a few other potential directions. The AI community is challenged to turn these initial ideas into a bona-fide paradigm of rational programming.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Artuaud, P. Bieber, L. Fari nas del Cerro, J. Henry, and A Herzig. Molog: Manuel d'utilisation. </author> <type> Internal report, </type> <institution> I.R.I.T., Universite P. Sabatier Toulouse (France), </institution> <year> 1986. </year>
Reference-contexts: Notice though that LP embodies logic in a rather particular way. First, it is based on first-order logic; one can imagine other logics being used, and in fact several have been proposed (for example, modal logic <ref> [1] </ref>). Second, logic is embraced in an extreme fashion. For one thing, all elements of the programming language (program, data, variables, constants) are constructs of first-order logic; one could imagine incorporating logic into the language without having it take over the language completely.
Reference: [2] <author> F. Bacchus and A. Grove. </author> <title> Graphical models for preference and utility. </title> <booktitle> In Proceedings UAI, </booktitle> <pages> pages 3-10, </pages> <year> 1995. </year>
Reference: [3] <author> A. Colmerauer. Prolog-ii: Manuel de reference and modele theorique. </author> <type> Technical report, </type> <institution> Groupe d'Intelligence Artificielle, Universite d'Aix, Marseille II, 1982. [4] "Microsoft Corporation". Intellisense in microsoft office 97, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: For example, and without getting too deeply into questions of credit assignment, there is no doubt that AI has played a critical role in the development of functional programming (e.g., McCarthy's LISP [13]), object oriented programming (e.g., Hewitt's Actors [7]), and logic programming (e.g., Green [6], Colmerauer <ref> [3] </ref>, and Kowalski [10]). In recent years AI hasn't had impact of this magnitude on programming languages. At the same time, within AI there have been several creative marriages between PL notions and AI notions (the latter primarily from the knowledge representation and reasoning area).
Reference: [5] <author> J. Doyle and M. P. Wellman. </author> <title> Representing preferences as ceteris paribus comparatives. </title> <booktitle> In Proceedings of AAAI Spring Symposium on Decision-Theoretic Planning, </booktitle> <year> 1994. </year> <month> 12 </month>
Reference: [6] <author> C. C. Green. </author> <title> Application of theorem proving to problem solving. </title> <booktitle> In Proceedings IJCAI 1, </booktitle> <pages> pages 219-239. IJCAI, </pages> <year> 1969. </year>
Reference-contexts: For example, and without getting too deeply into questions of credit assignment, there is no doubt that AI has played a critical role in the development of functional programming (e.g., McCarthy's LISP [13]), object oriented programming (e.g., Hewitt's Actors [7]), and logic programming (e.g., Green <ref> [6] </ref>, Colmerauer [3], and Kowalski [10]). In recent years AI hasn't had impact of this magnitude on programming languages. At the same time, within AI there have been several creative marriages between PL notions and AI notions (the latter primarily from the knowledge representation and reasoning area).
Reference: [7] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference-contexts: For example, and without getting too deeply into questions of credit assignment, there is no doubt that AI has played a critical role in the development of functional programming (e.g., McCarthy's LISP [13]), object oriented programming (e.g., Hewitt's Actors <ref> [7] </ref>), and logic programming (e.g., Green [6], Colmerauer [3], and Kowalski [10]). In recent years AI hasn't had impact of this magnitude on programming languages.
Reference: [8] <author> E. Horvitz. </author> <note> http://www.research.microsoft.com/ research/dtg/horvitz/lum.htm. </note>
Reference-contexts: Such activities are already being carried out (for example, Microsoft's context-sensitive help that is based on a bayesian-net model of the user <ref> [4, 8] </ref>), but not as part of the development effort, and certainly not aided automatically by the development system.
Reference: [9] <author> D. Koller and A. Pfeffer. </author> <title> Generating and solving imperfect information games. </title> <booktitle> In Proc. IJCAI-95. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1995. </year>
Reference-contexts: The fairly recent work I am alluding to includes (in rough historical order) McCarthy's Elephant2000 [12], Shoham's Agent Oriented Programming [15], Wellman's Market Oriented Programming [16], and Koller and Pfeffer's GALA <ref> [9] </ref>. I will describe these four in the next section, but by way of introduction let me first briefly discuss logic programming. In the following I assume familiarity with LP, and will refer to the pure concept (as opposed to, say, Prolog). <p> One can implement any other auction mechanism, and Well-man's group has been experimenting with several in the AuctionBot testbed (http://auction.eecs.umich.edu). GALA is a language in which to specify games in the sense of game theory <ref> [9] </ref>. Implemented in Prolog and inheriting a Prolog-like notation, in GALA one specifies a game by writing programming-language-style the sequence of actions of the game.
Reference: [10] <author> R. Kowalski. </author> <title> A Logic for Problem Solving. </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: For example, and without getting too deeply into questions of credit assignment, there is no doubt that AI has played a critical role in the development of functional programming (e.g., McCarthy's LISP [13]), object oriented programming (e.g., Hewitt's Actors [7]), and logic programming (e.g., Green [6], Colmerauer [3], and Kowalski <ref> [10] </ref>). In recent years AI hasn't had impact of this magnitude on programming languages. At the same time, within AI there have been several creative marriages between PL notions and AI notions (the latter primarily from the knowledge representation and reasoning area).
Reference: [11] <author> R. Kowalski and M. J. Sergot. </author> <title> A logic-based calculus of events. </title> <journal> New Generation Computing, </journal> <volume> 4 </volume> <pages> 67-95, </pages> <year> 1986. </year>
Reference-contexts: A programming language might embrace domain specific theories, beyond general principles of rationality. A good example is temporal programming, a domain that has already been tackled. Examples include Moszkowski's Tempura language, [14], and Kowalski and Sergot's event calculus <ref> [11] </ref>. Are there other common-sense domains that give rise to interesting programming languages? 9 These are all potentially interesting directions. However, as said earlier, the particularly interesting opportunities seem to lie in multi-agent programming.
Reference: [12] <author> J. McCarthy. </author> <month> Elephant </month> <year> 2000: </year> <title> A programming language based on speech acts, 1990. </title> <type> unpublished manuscript. </type>
Reference-contexts: The fairly recent work I am alluding to includes (in rough historical order) McCarthy's Elephant2000 <ref> [12] </ref>, Shoham's Agent Oriented Programming [15], Wellman's Market Oriented Programming [16], and Koller and Pfeffer's GALA [9]. I will describe these four in the next section, but by way of introduction let me first briefly discuss logic programming. <p> Recent work in Rational Programming In this section I highlight some elements of four relatively recent pieces of work in the area, and then step back and make several observations about them. 2.1 A look at four examples Elephant2000 is a language that was described by McCarthy in informal notes <ref> [12] </ref>. While it has several strands and is still under development, two ideas stand out. The one is the temporal interpretation of program variables.
Reference: [13] <author> J.M. McCarthy. </author> <title> Recursive functions of symbolic expressions and their computation by machine. </title> <journal> Communications of the ACM, </journal> <volume> 3(3) </volume> <pages> 184-195, </pages> <year> 1960. </year>
Reference-contexts: 1 Introduction Since its inception, AI has played an important role in the development of novel programming paradigms. For example, and without getting too deeply into questions of credit assignment, there is no doubt that AI has played a critical role in the development of functional programming (e.g., McCarthy's LISP <ref> [13] </ref>), object oriented programming (e.g., Hewitt's Actors [7]), and logic programming (e.g., Green [6], Colmerauer [3], and Kowalski [10]). In recent years AI hasn't had impact of this magnitude on programming languages.
Reference: [14] <author> B. C. Moszkowski. </author> <title> Executing temporal logic programs. </title> <type> technical report 71, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <address> Cambridge, England, </address> <year> 1985. </year>
Reference-contexts: A programming language might embrace domain specific theories, beyond general principles of rationality. A good example is temporal programming, a domain that has already been tackled. Examples include Moszkowski's Tempura language, <ref> [14] </ref>, and Kowalski and Sergot's event calculus [11]. Are there other common-sense domains that give rise to interesting programming languages? 9 These are all potentially interesting directions. However, as said earlier, the particularly interesting opportunities seem to lie in multi-agent programming.
Reference: [15] <author> Y. Shoham. </author> <title> Agent Oriented Programming. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: The fairly recent work I am alluding to includes (in rough historical order) McCarthy's Elephant2000 [12], Shoham's Agent Oriented Programming <ref> [15] </ref>, Wellman's Market Oriented Programming [16], and Koller and Pfeffer's GALA [9]. I will describe these four in the next section, but by way of introduction let me first briefly discuss logic programming. <p> a hypothetical travel agency program, is if : full flt then accept.request ( make commitment (admit (psgr, flt))) and its intuitive reading is "if a passanger has requested to reserve a seat on a given flight, and that flight is not full, then make the reservation." Agent Oriented Programming (AOP) <ref> [15] </ref> is similar in several respects. 1 It too includes temporal operators in the language, though differently from Elephant2000. Interestingly, AOP too embraces speech acts as the form and meaning of communication among agents. <p> a certain future time, if you're not committed to finishing a print job within ten minutes of that time, and if you believe the requester to be friendly, then accept the request and tell them that you did." The exact syntax, semantics and interpreter design of Agent0 are described in <ref> [15] </ref>. Market Oriented Programming (MOP) [16] embraces economic mechanisms, in particular price and auction mechanisms. In one of the first MOP applications Wellman implemented a distribution transportation problem by coding up an Walrasian auction. This worked roughly as follows. For each commodity (i.e., task) there was a clearing house.
Reference: [16] <author> M. P. Wellman. </author> <title> A market-oriented programming environment and its application to distributed multicommodity flow problems. </title> <journal> Journal of AI Research, </journal> <volume> 1 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: The fairly recent work I am alluding to includes (in rough historical order) McCarthy's Elephant2000 [12], Shoham's Agent Oriented Programming [15], Wellman's Market Oriented Programming <ref> [16] </ref>, and Koller and Pfeffer's GALA [9]. I will describe these four in the next section, but by way of introduction let me first briefly discuss logic programming. In the following I assume familiarity with LP, and will refer to the pure concept (as opposed to, say, Prolog). <p> Market Oriented Programming (MOP) <ref> [16] </ref> embraces economic mechanisms, in particular price and auction mechanisms. In one of the first MOP applications Wellman implemented a distribution transportation problem by coding up an Walrasian auction. This worked roughly as follows. For each commodity (i.e., task) there was a clearing house.
Reference: [17] <author> J. White. </author> <title> Telescript technology (white paper). </title> <type> Technical report, </type> <institution> General Magic, Inc., </institution> <year> 1994. </year> <month> 13 </month>
Reference-contexts: However, all the work has been put into enabling the mechanics of interaction (in which I include also the interesting work on mobile code in the sense of Telescript <ref> [17] </ref>; see below). The field is wide open as far as effecting meaningful interactions among disparate programs, each of which answers to different masters, which is in large measure what the four systems discussed are about. Next, notice that neither MOP nor GALA are programming languages or systems per se. <p> Here are directions in addition to the ones already mentioned, all preliminary and highly speculative. * Where to GO? An exciting notion in programming languages, which was given particular relevance in the context of wide-area networks, is mobile code. This concept's current best embodiment is the Telescript language <ref> [17] </ref>. Telescript is an object-oriented language, whose `agent' class is characterized by the GO command.
References-found: 16

