URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP140-F95/L1995-10-03.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP140-F1995/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP 140: Introduction to Translator Systems Syntactic Analysis (Lecture 6 of 6) 1 Implementing syntax-directed
Author: Siddhartha Chatterjee T T F T .nptr mknode(*, T .nptr, F .nptr) T F T .nptr F .nptr F (E) F .nptr E.nptr F id F .nptr mkleaf(id, id.stabentry) 
Keyword: Production Semantic rule  
Affiliation: E E 1 T E.nptr mknode(+, E 1 .nptr, T .nptr) E T E.nptr T .nptr  
Note: that symbol. 2. An action must not refer to  can be evaluated only after all attributes it references have been computed. Thus, it can be placed at the end of the production.  
Date: 3 October 1995  
Abstract: In the last lecture, we discussed syntax-directed definitions of two varieties, S-attributed and L-attributed. If we were to implement these definitions in a separate pass after parsing, we need a postorder traversal of the parse tree for S-attributed definitions and a depth first traversal for L-attributed definitions. But our goal is to avoid making multiple passes and do the translation during parsing. We will now see how to translate L-attributed definitions during top-down parsing. We will need to precisely state when the semantic rules are activated, and we will use a formalism called a translation scheme for this. A translation scheme is a context-free grammar in which attributes are associated with the grammar symbols and semantic actions enclosed between braces are inserted within the right sides of productions. The key difference between a syntax-directed definition and a translation scheme is that the semantic actions in a translation scheme can occur anywhere in the RHS of a production. The idea is that the identification of nonterminals, the matching of terminals, and the execution of semantic actions are performed in the order they are seen on the RHS. When designing such a scheme for a syntex-directed definition, we must observe the restriction that an action must not refer to an attribute that has not yet been computed. The following rules suffice. Since we will be translating in the context of a top-down predictive parser, we must ensure that the underlying CFG is LL(1). We will use as our example the definition for building ASTs from the expression grammar that we saw last time. Here it is again. 
Abstract-found: 1
Intro-found: 1
References-found: 0

