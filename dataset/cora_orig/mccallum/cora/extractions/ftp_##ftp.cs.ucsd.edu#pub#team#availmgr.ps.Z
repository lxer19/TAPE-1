URL: ftp://ftp.cs.ucsd.edu/pub/team/availmgr.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Email: flaviu@cs.ucsd.edu  
Title: Automatic Reconfiguration in the Presence of Failures  
Author: Flaviu Cristian 
Address: La Jolla, California 92093-0114  
Affiliation: Computer Science and Engineering University of California, San Diego  
Abstract: We describe a new kind of distributed system service, the Availability Management service, responsible for ensuring that the critical services of a distributed system remain continuously available to users despite arbitrary numbers of concurrent node removals and node restarts caused by failures, maintenance and growth. The presentation stresses the main ideas behind this new service, and outlines a simple design that depends upon the existence of synchronous membership and atomic broadcast group communication services. Extensions of this initial design to deal with asynchronous group communica tion services are also briefly discussed.
Abstract-found: 1
Intro-found: 1
Reference: [ADKM92] <author> Y. Amir, D. Dolev, S. Kramer, D. Malki: Transis: </author> <title> A Communication Sub-System for High Availability, </title> <booktitle> 22d Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1992. </year>
Reference-contexts: In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also [HSS84], at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting [CM84], [Carr85], [BJ87], [KTHB89], [SLS89], [LLS90], <ref> [ADKM92] </ref>. Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [BD85] <author> O. Babaoglu, R. Drumond: </author> <title> Streets of Byzantium: network architectures for fast reliable broadcasts, </title> <journal> IEEE Tr. on Software Eng., </journal> <volume> Vol. SE-11, No. 6, </volume> <year> 1985. </year>
Reference-contexts: If the sender s does not fail while broadcasting m, then all active A members deliver m at T+D (termination). Protocols for implementing synchronous atomic broadcast services for point-to-point and broadcast channel based networks are given in <ref> [BD85] </ref>, [CASD85] and [Cris90]. All of these protocols depend on the existence of an underlying internal clock synchronization service. 5 A synchronous membership service enables active A members to agree in a bounded time on the member failures and recoveries that affect the team. <p> Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], <ref> [BD85] </ref>, [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [BJ87] <author> K. Birman, T. Joseph: </author> <title> Exploiting Virtual Synchrony in Distributed Systems, </title> <booktitle> 11th ACM Symp. on Operating Systems Principles, </booktitle> <year> 1987. </year> <month> 18 </month>
Reference-contexts: In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also [HSS84], at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting [CM84], [Carr85], <ref> [BJ87] </ref>, [KTHB89], [SLS89], [LLS90], [ADKM92]. Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]). <p> Note that the safety properties specified for atomic broadcast and membership in [CASD85] and [Cris88] imply the set of safety properties bundled under the name "virtual synchrony" in <ref> [BJ87] </ref> and are sufficient to make the "state machine approach" described in [L84] and [Schn90] work.
Reference: [BSS91] <author> K. Birman, A. Schiper, and P. Stephenson: </author> <title> Lightweight Causal and Atomic Group Multicast, </title> <journal> ACM Tr. on Comp. Systems, </journal> <volume> Vol. 9, No. 3, </volume> <year> 1991. </year>
Reference-contexts: It is possible to design membership and atomic broadcast protocols that will let any two active team members that continuously join majority groups see the same sequence of global state updates, including node restarts and failures despite unbounded communication delays (e.g. [CM84], [Carr85], [KTHB89], [Cris90b], <ref> [BSS91] </ref>). The main drawbacks of such a solution are that no availability management will happen unless a majority group of active nodes exists and there will be no bounds on the time it takes to react to events such as administrator commands and node membership changes.
Reference: [Carr85] <author> R. Carr: </author> <title> The Tandem Global Update Protocols, </title> <journal> Tandem Systems Review, </journal> <month> June </month> <year> 1985. </year>
Reference-contexts: It is possible to design membership and atomic broadcast protocols that will let any two active team members that continuously join majority groups see the same sequence of global state updates, including node restarts and failures despite unbounded communication delays (e.g. [CM84], <ref> [Carr85] </ref>, [KTHB89], [Cris90b], [BSS91]). The main drawbacks of such a solution are that no availability management will happen unless a majority group of active nodes exists and there will be no bounds on the time it takes to react to events such as administrator commands and node membership changes. <p> In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also [HSS84], at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting [CM84], <ref> [Carr85] </ref>, [BJ87], [KTHB89], [SLS89], [LLS90], [ADKM92]. Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [CASD85] <author> F. Cristian, H. Aghili, R. Strong, D. Dolev: </author> <title> Atomic broadcast: from simple message diffusion to Byzantine Agreement, </title> <booktitle> 15th Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1985. </year>
Reference-contexts: If the sender s does not fail while broadcasting m, then all active A members deliver m at T+D (termination). Protocols for implementing synchronous atomic broadcast services for point-to-point and broadcast channel based networks are given in [BD85], <ref> [CASD85] </ref> and [Cris90]. All of these protocols depend on the existence of an underlying internal clock synchronization service. 5 A synchronous membership service enables active A members to agree in a bounded time on the member failures and recoveries that affect the team. <p> Because all updates to the replicated membership and state variables are received in the same order <ref> [CASD85] </ref>, [Cris88] by all active Availability Managers, after an Availability Manager j joins the group of active Availability Managers, its local state variables N, H, on, primary, backup will go through the same sequence of values as the local variables of any other Availability Manager m that was already joined when <p> The requirements for the atomic broadcast and membership services published in <ref> [CASD85] </ref> and [Cris88] were derived from this design experience: the safety properties of atomicity and order for atomic broadcast and agreement on group history and agreement on group membership for a membership service were distilled so as to ensure that autonomous availability management servers will reach identical decisions when interpreting identical <p> Note that the safety properties specified for atomic broadcast and membership in <ref> [CASD85] </ref> and [Cris88] imply the set of safety properties bundled under the name "virtual synchrony" in [BJ87] and are sufficient to make the "state machine approach" described in [L84] and [Schn90] work.
Reference: [CAS86] <author> F. Cristian, H. Aghili, R. </author> <title> Strong: Approximate clock synchronization despite omission and performance failures and processor joins, </title> <booktitle> 16th Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1986. </year>
Reference-contexts: Protocols for achieving internal clock synchronization in synchronous communication networks are described in <ref> [CAS86] </ref>, [Cris89], [HSS84], [K87], [LM85], [LL84] and [ST87]. A synchronous atomic broadcast service enables any member s of a team A to broadcast at any (synchronized) clock time T a message m to the group of active A members so that the following properties hold, for some time constant D.
Reference: [CDD90] <author> F. Cristian, J. Dehn, B. Dancey: </author> <title> Fault-tolerance in the Advanced Automation System, </title> <booktitle> 20th Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1990. </year>
Reference-contexts: For example, [Gray86] reports that 42 % of the failures in the Tandem distributed systems are caused by human mistakes made during maintenance, operation and configuration. To ensure automatic reconfiguration in the presence of failures and maximize the availability of critical services, the Advanced Automation System <ref> [CDD90] </ref>, built for supporting US air traffic control in the 21st century, uses a new Availability Management service, that automatically reconfigures servers implementing critical services in the presence of processor removals caused by failures and maintenance and processor additions caused by restart, repair and horizontal growth. <p> decide that the manager running in the backup (s) node which hosts the backup server for s, say p, will have to promote it to primary and that the manager running in the node q returned by the 2 for a hierarchical approach to Availability Management in large systems, see <ref> [CDD90] </ref>. 12 function select-host (s,N " H (s)-backup (s)) will have to start a new backup for s. <p> By the time the architecture of the Advanced Automation System was being elaborated in 1986, the ideas of using services such as membership, atomic broadcast and automatic availability mangement were mature enough to be applicable to this critical system design <ref> [CDD90] </ref>.
Reference: [CM84] <author> J. M. Chang, N. Maxemchuck: </author> <title> Reliable Broadcast Protocols, </title> <journal> ACM Tr. on Comp. Systems, </journal> <volume> Vol. 2, No. 3, </volume> <year> 1984. </year>
Reference-contexts: It is possible to design membership and atomic broadcast protocols that will let any two active team members that continuously join majority groups see the same sequence of global state updates, including node restarts and failures despite unbounded communication delays (e.g. <ref> [CM84] </ref>, [Carr85], [KTHB89], [Cris90b], [BSS91]). The main drawbacks of such a solution are that no availability management will happen unless a majority group of active nodes exists and there will be no bounds on the time it takes to react to events such as administrator commands and node membership changes. <p> In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also [HSS84], at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting <ref> [CM84] </ref>, [Carr85], [BJ87], [KTHB89], [SLS89], [LLS90], [ADKM92]. Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [Cris85] <author> F. Cristian: </author> <title> A rigorous approach to fault-tolerant programming, </title> <journal> IEEE Tr. on Software Engineering, </journal> <volume> Vol. 11, No. 1, </volume> <year> 1985. </year>
Reference-contexts: Our view is that primary/backup check-pointing is an application specific issue that is orthogonal to the system wide service Availability Management issue. We view the Availability Management service, as exporting two kinds of operations to two concurrent "users": the human administrator and the Adverse Environment <ref> [Cris85] </ref>. The operations that the administrator can invoke are start-service (s), stop-service (s), add-hosts (s,h), remove-host (s,h) and start-node (n), while the Adverse Environment can invoke the crash-node (n) operation, s2S, n2N, hP.
Reference: [Cris88] <author> F. Cristian: </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems, </title> <booktitle> 18th Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1988, </year>
Reference-contexts: We do not assume any particular network topology: it can be point-to-point or broadcast channel based. To make the presentation of Availability Management as simple as possible, we will assume a synchronous <ref> [Cris88] </ref> communication network. Roughly speaking, a synchronous network enables any two active servers to communicate within a known, bounded time, so that no communication partitions are possible (a more elaborate definition and ways to implement such communication networks are given in [Cris88]). <p> as simple as possible, we will assume a synchronous <ref> [Cris88] </ref> communication network. Roughly speaking, a synchronous network enables any two active servers to communicate within a known, bounded time, so that no communication partitions are possible (a more elaborate definition and ways to implement such communication networks are given in [Cris88]). The synchronicity assumption enables us to avoid discussing issues related to potential divergence of states among redundant servers due to partitioning and the need to restrict activity to majority groups in order to prevent such divergence. <p> Several protocols for implementing a synchronous membership service in point-to-point and broadcast based networks are described in <ref> [Cris88] </ref>. The protocols depend on the existence of underlying internal clock synchronization and synchronous atomic broadcast services. The availability management service we present is most useful when combined with a location transparent, highly available request/reply transport service. <p> When joining the group of active Availability Management servers, a newly started server follows the state initialization protocol described in <ref> [Cris88] </ref>, where the new server gets an older value of the service state, monitors all updates to that past state until its reception and then applies these updates to the received state to get an up-to-date state. <p> the membership and atomic broadcast services described in section 3: any update to a replicated state variable is either a result of an atomic broadcast message arrival or of a membership change notification that appears to the replicated Availability Managers as an atomic broadcast message arrival (for more details see <ref> [Cris88] </ref>). Because all updates to the replicated membership and state variables are received in the same order [CASD85], [Cris88] by all active Availability Managers, after an Availability Manager j joins the group of active Availability Managers, its local state variables N, H, on, primary, backup will go through the same sequence <p> either a result of an atomic broadcast message arrival or of a membership change notification that appears to the replicated Availability Managers as an atomic broadcast message arrival (for more details see <ref> [Cris88] </ref>). Because all updates to the replicated membership and state variables are received in the same order [CASD85], [Cris88] by all active Availability Managers, after an Availability Manager j joins the group of active Availability Managers, its local state variables N, H, on, primary, backup will go through the same sequence of values as the local variables of any other Availability Manager m that was already joined when j <p> After completing the state initialization protocol described in <ref> [Cris88] </ref> that initializes the N, H, on, primary, backup variables, an Availability Manager enters an infinite loop inside which it waits for the following event types: an upcall from the membership service that is a notification of a change in the membership of active nodes (and hence, in the group of <p> The requirements for the atomic broadcast and membership services published in [CASD85] and <ref> [Cris88] </ref> were derived from this design experience: the safety properties of atomicity and order for atomic broadcast and agreement on group history and agreement on group membership for a membership service were distilled so as to ensure that autonomous availability management servers will reach identical decisions when interpreting identical events that <p> Note that the safety properties specified for atomic broadcast and membership in [CASD85] and <ref> [Cris88] </ref> imply the set of safety properties bundled under the name "virtual synchrony" in [BJ87] and are sufficient to make the "state machine approach" described in [L84] and [Schn90] work.
Reference: [Cris89] <author> F. Cristian: </author> <title> Probabilistic clock synchronization, </title> <journal> Distributed Computing, </journal> <volume> Vol. 3, </volume> <pages> pp. 146-158, </pages> <year> 1989. </year>
Reference-contexts: Protocols for achieving internal clock synchronization in synchronous communication networks are described in [CAS86], <ref> [Cris89] </ref>, [HSS84], [K87], [LM85], [LL84] and [ST87]. A synchronous atomic broadcast service enables any member s of a team A to broadcast at any (synchronized) clock time T a message m to the group of active A members so that the following properties hold, for some time constant D.
Reference: [Cris90] <author> F. Cristian: </author> <title> Synchronous atomic broadcast for redundant broadcast channels, </title> <journal> Journal of Real-time Systems, </journal> <volume> Vol. 2, </volume> <pages> pp. 195-212, </pages> <year> 1990. </year>
Reference-contexts: If the sender s does not fail while broadcasting m, then all active A members deliver m at T+D (termination). Protocols for implementing synchronous atomic broadcast services for point-to-point and broadcast channel based networks are given in [BD85], [CASD85] and <ref> [Cris90] </ref>. All of these protocols depend on the existence of an underlying internal clock synchronization service. 5 A synchronous membership service enables active A members to agree in a bounded time on the member failures and recoveries that affect the team.
Reference: [Cris90b] <author> F. Cristian: </author> <title> New Asynchronous Atomic Broadcast Protocols. </title> <booktitle> Presented at 1st Workshop on Management of Replicated Data, </booktitle> <address> Houston, TX, </address> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: It is possible to design membership and atomic broadcast protocols that will let any two active team members that continuously join majority groups see the same sequence of global state updates, including node restarts and failures despite unbounded communication delays (e.g. [CM84], [Carr85], [KTHB89], <ref> [Cris90b] </ref>, [BSS91]). The main drawbacks of such a solution are that no availability management will happen unless a majority group of active nodes exists and there will be no bounds on the time it takes to react to events such as administrator commands and node membership changes. <p> Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. <ref> [Cris90b] </ref>).
Reference: [Cris91] <author> F. Cristian: </author> <title> Understanding Fault-tolerant Distributed Systems, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 34, No. 2, </volume> <month> Feb </month> <year> 1991. </year>
Reference: [CS85] <author> F. Cristian, D. Skeen: </author> <title> Auditor: coordinator-based and coordinator-less designs, </title> <type> unpublished manuscript, </type> <year> 1985. </year>
Reference-contexts: A leader based solution will of course share the drawbacks inherent to any solution based on asynchronous communication: need for majority presence and no bounds on reaction times. Our own experience <ref> [CS85] </ref> showed us that a leader based solution tends to be more complex to implement that a peer based solution such as the one presented in this paper. 7 Discussion While a member of the Highly Available Systems (HAS) systems project at the IBM Almaden Research Center, we contributed to the <p> as the one presented in this paper. 7 Discussion While a member of the Highly Available Systems (HAS) systems project at the IBM Almaden Research Center, we contributed to the design and implementation of a leader based availability management service in 1983, and then a peer based service in 1985 <ref> [CS85] </ref>, both for the IBM VM.SP system.
Reference: [Gray86] <author> J. Gray: </author> <title> Why do computers stop and what can be done about it?, </title> <booktitle> 5th Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <year> 1986. </year> <month> 19 </month>
Reference-contexts: Also, humans are notorious for making mistakes, especially when under stress, and the mistakes made while attempting repair actions can lead to further failures, causing further unavailability. For example, <ref> [Gray86] </ref> reports that 42 % of the failures in the Tandem distributed systems are caused by human mistakes made during maintenance, operation and configuration. <p> For concreteness, we will consider that the availability policy specified by the system administrator for all critical services is 7 (loose-synchronization,2). This is a common availability policy used in fault-tolerant systems based on favorable past experience (for example, empirical measurements reported in <ref> [Gray86] </ref> show that when one of the primary or backup servers fails, the probability that the other one survives is greater than 0.99, despite the fact that the two servers are programmed identically and process identical sequences of inputs).
Reference: [HSS84] <author> J. Halpern, B. Simons, R. </author> <title> Strong: Fault-tolerant clock synchronization, </title> <booktitle> Proc. 3rd ACM PODS, </booktitle> <year> 1984. </year>
Reference-contexts: Protocols for achieving internal clock synchronization in synchronous communication networks are described in [CAS86], [Cris89], <ref> [HSS84] </ref>, [K87], [LM85], [LL84] and [ST87]. A synchronous atomic broadcast service enables any member s of a team A to broadcast at any (synchronized) clock time T a message m to the group of active A members so that the following properties hold, for some time constant D. <p> In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also <ref> [HSS84] </ref>, at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting [CM84], [Carr85], [BJ87], [KTHB89], [SLS89], [LLS90], [ADKM92].
Reference: [Kope87] <author> H. Kopetz: </author> <title> Clock synchronization in distributed real-time systems, </title> <journal> IEEE Tr. on Computers, </journal> <volume> Vol. C-36, No. 8, </volume> <year> 1987. </year>
Reference: [KTHB89] <author> F. Kaashoek, A. Tanenbaum, S. Hummel, and H. Bal: </author> <title> An Efficient Reliable Broadcast Protocol, </title> <journal> Operating Systems Review, </journal> <volume> Vol. 23, No. 4, </volume> <year> 1989. </year>
Reference-contexts: It is possible to design membership and atomic broadcast protocols that will let any two active team members that continuously join majority groups see the same sequence of global state updates, including node restarts and failures despite unbounded communication delays (e.g. [CM84], [Carr85], <ref> [KTHB89] </ref>, [Cris90b], [BSS91]). The main drawbacks of such a solution are that no availability management will happen unless a majority group of active nodes exists and there will be no bounds on the time it takes to react to events such as administrator commands and node membership changes. <p> In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also [HSS84], at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting [CM84], [Carr85], [BJ87], <ref> [KTHB89] </ref>, [SLS89], [LLS90], [ADKM92]. Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [Lamp84] <author> L. Lamport: </author> <title> Using Time Instead of Timeout in Fault-tolerant Distributed Systems, </title> <journal> ACM Tr. on Prog. Languages and Systems, </journal> <volume> Vol. 6, No. 2, </volume> <year> 1984. </year>
Reference: [LM85] <author> L. Lamport, M. Melliar-Smith: </author> <title> Synchronizing clocks in the presence of faults, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 32, No. 1, </volume> <year> 1985. </year>
Reference-contexts: Protocols for achieving internal clock synchronization in synchronous communication networks are described in [CAS86], [Cris89], [HSS84], [K87], <ref> [LM85] </ref>, [LL84] and [ST87]. A synchronous atomic broadcast service enables any member s of a team A to broadcast at any (synchronized) clock time T a message m to the group of active A members so that the following properties hold, for some time constant D. <p> Of course research on synchronous services was also pursued at other places [L84], [LL84], <ref> [LM85] </ref>, [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [LL84] <author> J. Lundelius, N. Lynch: </author> <title> A new fault-tolerant algorithm for clock synchronization, </title> <booktitle> Proc. 3rd ACM PODS, </booktitle> <year> 1984. </year>
Reference-contexts: Protocols for achieving internal clock synchronization in synchronous communication networks are described in [CAS86], [Cris89], [HSS84], [K87], [LM85], <ref> [LL84] </ref> and [ST87]. A synchronous atomic broadcast service enables any member s of a team A to broadcast at any (synchronized) clock time T a message m to the group of active A members so that the following properties hold, for some time constant D. <p> Of course research on synchronous services was also pursued at other places [L84], <ref> [LL84] </ref>, [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [LLS90] <author> R. Ladin, B. Liskov, L. Shrira: </author> <title> Lazy Replication: Exploiting the Semantics of Distributed Services. </title> <booktitle> Proc. 9th ACM Symp. on Principles of Distributed Computing, </booktitle> <year> 1990. </year>
Reference-contexts: In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also [HSS84], at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting [CM84], [Carr85], [BJ87], [KTHB89], [SLS89], <ref> [LLS90] </ref>, [ADKM92]. Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [Parnas72] <author> D. Parnas: </author> <title> A technique for software module specification with examples, </title> <journal> Comm. of the ACM, </journal> <volume> Vol. 15, No. 5, </volume> <year> 1972. </year>
Reference-contexts: Such implementation details are hidden from users, who need only know the externally visible, abstract 3 service specification <ref> [Parnas72] </ref>. For example, a database service can be implemented by a single database server, by a set of distributed servers that each manages a fragment of the database state, or by a group of redundant distributed database servers that each manages a replica of the entire database.
Reference: [PBSVW88] <author> D. Powell, G. Bonn, D. Seaton, P. Verissimo, F. Waeselynck: </author> <title> The Delta-4 Approach to Dependability in Open Distributed Computing Systems, </title> <booktitle> Proc. 18th Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1988. </year>
Reference-contexts: Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], <ref> [PBSVW88] </ref>, [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [Schn90] <author> F. Schneider: </author> <title> Implementing Fault-tolerant Services Using the State Machine Approach: A Tutorial, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 22, No. 4, </volume> <year> 1990. </year>
Reference-contexts: Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], <ref> [Schn90] </ref> and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]). <p> Note that the safety properties specified for atomic broadcast and membership in [CASD85] and [Cris88] imply the set of safety properties bundled under the name "virtual synchrony" in [BJ87] and are sufficient to make the "state machine approach" described in [L84] and <ref> [Schn90] </ref> work. By the time the architecture of the Advanced Automation System was being elaborated in 1986, the ideas of using services such as membership, atomic broadcast and automatic availability mangement were mature enough to be applicable to this critical system design [CDD90].
Reference: [SESTT92] <author> S. Shrivastava, P. Ezhilchelvan, N. Speirs,S. Tao and A. Tully: </author> <title> Principle Features of the Voltan Family of Reliable Node Architectures for Distributed Systems, </title> <journal> IEEE Tr. on Computers, </journal> <volume> Vol. 41, No. 5, </volume> <year> 1992. </year>
Reference: [SLS89] <author> S. Mishra, L. Peterson, R. Schlichting: </author> <title> Implementing Fault-tolerant Objects Using Psync, </title> <booktitle> Proc 8th Symp. on Reliable Distributed Systems, </booktitle> <year> 1989. </year>
Reference-contexts: In parallel with the implemention driven reaserch done in a synchronous setting at IBM Almaden, see also [HSS84], at other places implemntation driven research on fundamental services for designing fault-tolerant 17 services was mostly pursued in an asynchronous setting [CM84], [Carr85], [BJ87], [KTHB89], <ref> [SLS89] </ref>, [LLS90], [ADKM92]. Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], [ST87], [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
Reference: [ST87] <author> T. Shrikanth, S. Toueg: </author> <title> Optimal clock synchronization, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 34, No. 3, </volume> <year> 1987. </year> <month> 20 </month>
Reference-contexts: Protocols for achieving internal clock synchronization in synchronous communication networks are described in [CAS86], [Cris89], [HSS84], [K87], [LM85], [LL84] and <ref> [ST87] </ref>. A synchronous atomic broadcast service enables any member s of a team A to broadcast at any (synchronized) clock time T a message m to the group of active A members so that the following properties hold, for some time constant D. <p> Of course research on synchronous services was also pursued at other places [L84], [LL84], [LM85], [BD85], [K87], <ref> [ST87] </ref>, [PBSVW88], [Schn90] and research on asynchronous networks was pursued at IBM Almaden as well (e.g. [Cris90b]).
References-found: 30

