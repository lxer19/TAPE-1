URL: http://ptolemy.eecs.berkeley.edu/papers/97/idf/idf.ps
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/97/idf/
Root-URL: 
Email: miyazaki@dsp.cl.nec.co.jp  eal@eecs.berkeley.edu  
Title: CODE GENERATION BY USING INTEGER-CONTROLLED DATAFLOW GRAPH  
Author: Takashi Miyazaki and Edward A. Lee 
Affiliation: Information Technology Research Laboratories, NEC Corporation  Dept. of EECS, University of California, Berkeley  
Date: April 1997  
Address: Munich, Germany,  1-1, Miyazaki, 4-chome, Miyamae-ku, Kawasaki, Kanagawa, 216, Japan  518 Cory Hall, #1770, Berkeley, CA 94720-1770, USA  
Note: Proc. of ICASSP '97,  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. T. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, Ptolemy: </author> <title> A framework for simulating and prototyping heterogeneous systems, </title> <journal> International journal of Computer Simulation, special issue on Simulation Software Development, </journal> <volume> vol. 4, </volume> <pages> pp. 155-182, </pages> <year> 1994. </year>
Reference-contexts: 1. INTRODUCTION Ptolemy <ref> [ 1] </ref> is a framework for simulation, prototyping and software synthesis for heterogeneous systems. In Ptolemy, a system is specified by a dataflow graph in which nodes represent computational actors and data token flow between them along the arcs of the graph.
Reference: [2] <author> E. A. Lee and D. G. Messerschmit, </author> <title> Synchronous data flow, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 75, no. 9, </volume> <pages> pp. 1235-1245, </pages> <year> 1987. </year>
Reference-contexts: In Ptolemy, a system is specified by a dataflow graph in which nodes represent computational actors and data token flow between them along the arcs of the graph. Algorithms with control flow that is completely deterministic can be effectively represented by using the synchronous dataflow (SDF) model of computation <ref> [2] </ref>. In SDF graphs, each actor consumes and produces a constant number of tokens at every firing. The advantage of the SDF model is that it is possible to determine the execution order of actors (schedule) and memory requirements at compile-time.
Reference: [3] <author> E. A. Lee, </author> <title> Consistency in Dataflow Graphs, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 2, </volume> <pages> No.2, </pages> <month> April </month> <year> 1991. </year>
Reference: [4] <author> D. G. Messerschmitt, </author> <title> Structured Interconnection of Signal Processing Programs, </title> <type> Globecom, </type> <institution> Atlanta, Georgia, </institution> <year> 1984. </year> <note> [5]D. </note> <author> G. Messerschmitt, </author> <title> A Tool for Structured Functional Simulation, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. SAC-2 no. 1, </volume> <year> 1984. </year>
Reference-contexts: The advantage of the SDF model is that it is possible to determine the execution order of actors (schedule) and memory requirements at compile-time. However, data-dependent decision-making at runtime is required in many digital signal processing algorithms. Dynamic dataflow (DDF) <ref> [ 4, 5] </ref> is a data-driven model that includes asynchronous operations. The DDF model is usable, but the overhead of runtime scheduling is excessive. To preserve the compile-time scheduling properties of SDF but permit data-dependent execution, Boolean controlled dataflow (BDF) [ 6, 7] was developed.
Reference: [6] <author> J. Buck and E. A. Lee, </author> <title> Scheduling Dynamic Dataflow Graphs With Bounded Memory Using the Token Flow Model, </title> <booktitle> Proc. Of ICASSP 93, </booktitle> <year> 1993. </year>
Reference-contexts: Dynamic dataflow (DDF) [ 4, 5] is a data-driven model that includes asynchronous operations. The DDF model is usable, but the overhead of runtime scheduling is excessive. To preserve the compile-time scheduling properties of SDF but permit data-dependent execution, Boolean controlled dataflow (BDF) <ref> [ 6, 7] </ref> was developed. The BDF model of computation extends the SDF model to permit data movement to depend on the values of certain Boolean tokens in the system. The BDF model is successfully applied to simulation and C program synthesis in Ptolemy.
Reference: [7] <author> J. Buck, </author> <title> Scheduling Dynamic Dataflow Graphs With Bounded Memory Using the Token Flow Model, Memorandum No. </title> <type> UCB/ERL M93/69 (Ph.D. Thesis), </type> <institution> EECS Dept., University of California, Berkeley, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Dynamic dataflow (DDF) [ 4, 5] is a data-driven model that includes asynchronous operations. The DDF model is usable, but the overhead of runtime scheduling is excessive. To preserve the compile-time scheduling properties of SDF but permit data-dependent execution, Boolean controlled dataflow (BDF) <ref> [ 6, 7] </ref> was developed. The BDF model of computation extends the SDF model to permit data movement to depend on the values of certain Boolean tokens in the system. The BDF model is successfully applied to simulation and C program synthesis in Ptolemy. <p> The scheduling of the IDF graph relies on the BDF techniques. It is known that the static scheduling of BDF graphs is not always possible. Indeed, it is undecidable for any given graph whether a static, bounded memory schedule can be constructed <ref> [ 7] </ref>. Nonetheless, experience with BDF indicates that most practical applications yield static scheduling. In any case, the set of applications that can be statically scheduled is much larger than the set that can be described with SDF. 4. CONCLUSION IDF and its code generation applications in Ptolemy are presented.
Reference: [8] <author> J. T. Buck, </author> <title> Static Scheduling and Code Generation from Dynamic Dataflow Graphs with Integer-Valued Control Systems, </title> <booktitle> Proc. of IEEE Asilomar Conf. on Signals, Systems, and Computers, </booktitle> <address> Oct. 31, </address> <year> 1994. </year>
Reference-contexts: The BDF model is successfully applied to simulation and C program synthesis in Ptolemy. Limiting control variables to binary values, however, is overly restrictive. A generalization to integer control variables has been proposed <ref> [8] </ref>. In this paper, integer-controlled dataflow (IDF) and its code generation implementation in Ptolemy are presented. The IDF graphs, which include IF, CASE, REPEAT and LOOP control structures, support not only simulation but also code generation. C and DSP assembler programs with the IDF structure can be synthesized. 2.
Reference: [9] <author> J. L. Pino, S. Ha, E. A. Lee and J. T. Buck, </author> <title> Software Synthesis for DSP Using Ptolemy, </title> <journal> Journal of VLSI Signal Processing, </journal> <volume> 9, </volume> <pages> 7-21, </pages> <year> 1995. </year>
Reference-contexts: The combination of static scheduling at compile-time and IDF flow control at runtime greatly contributes to efficient simulation on Ptolemy. 3. CODE GENERATION AND APPLICATION The IDF capability also supports code generation <ref> [ 9] </ref> in Ptolemy. Programmers edit program graphs composed of existing SDF code generation actors and IDF code generation actors such as CASE-BEGIN, CASE-END, REPEAT-BEGIN, REPEAT-END and LOOP. The code generation procedure is as follows.
Reference: [10] <author> S. Ritz, M. Pankert, V. Zivojnovie and H. Meyr, </author> <title> High level software synthesis for the design of communication systems, </title> <journal> IEEE Journal on Selected Area in Communications, pp. </journal> <volume> 348 - 358, </volume> <month> Apr. </month> <year> 1993. </year>

References-found: 9

