URL: http://www.usc.edu/dept/ATRIUM/Papers/DHT-SCM7.ps
Refering-URL: http://cwis.usc.edu/dept/ATRIUM/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Supporting Distributed Configuration Management in Virtual Enterprises  
Author: John Noll and Walt Scacchi 
Address: Los Angeles, CA 90089-1421  
Affiliation: ATRIUM Laboratory Marshall School of Business University of Southern California  
Abstract: This paper presents a semantic hypertext-based framework called DHT that supports distributed software configuration management, provides transparent access to heterogeneous, autonomous software repositories, and enables an implementation strategy with low cost and effort. We show how DHT solves the practical problems of sharing and updating heterogenous multi-version software in a virtual enterprise of distributed teams, integrating existing CM tools and environments, executing CM processes to coordinate development activities across wide-area networks. This is when the process model is represented as a user navigable hypertext graph whose nodes associate process steps, user roles, and associated tools with designated software product versions and configurations. Furthermore, we show that this can require the support for alternative policy models for the commitment of software updates into local CM repositories. Overall, these capabilities provide support for product-centered enactment of CM policies and processes across a virtual enterprise of teams connected via the Internet.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Evan W. Adams, Masahiro Honda, and Terrence C. Miller. </author> <title> Object management in a CASE environment. </title> <booktitle> In Proc. 11th Intl. Conf. on Software Engineering. IEEE and ACM, </booktitle> <year> 1989. </year>
Reference: 2. <author> Kenneth M. Anderson, Richard N. Taylor, and E. James Whitehead, Jr., </author> <title> Chimera: Hypertext for heterogeneous software environments. </title> <booktitle> In European Conf. on Hyper-media Technology, </booktitle> <address> Edinburgh, Scotland, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: A number of research projects have applied hypertext to software object management, including the Hypertext Abstract Machine (HAM) [6], the Documents Integration Facility (DIF) [13, 14], and HyperCASE [7]; however, these are based on a single, centralized repository architecture. Notable exceptions are PROXHY [20], Chimera <ref> [2] </ref>, and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts. However, existing relationships among the artifacts or data repositories are not translated into links.
Reference: 3. <author> Israel Ben-Shaul, Gail Kaiser, and George Heineman, </author> <title> An Architecture for Multi-User Software Development Environments. </title> <booktitle> In Proc. 5th. ACM SIG-SOFT/SIGPLAN Symposium on Practical Development Environments, </booktitle> <year> 1992. </year>
Reference-contexts: Many such environments rely upon the use of a centralized object management system that may be implemented using a relational DBMS-controlled object server or object-oriented DBMS as its repository, with static graph-based or reactive rule-based process modeling and enactment capabilities (e.g., Marvel <ref> [3] </ref>, SMART [16], Articulator [28], and dozens of others in the U.S., Europe, and Japan [12]). However, the reliance on a DBMS for object management services or CM implies the need for a transaction manager.
Reference: 4. <author> M. W. Bright, A. R. Hurson, and Simin H. Pakzad. </author> <title> A taxonomy and current issues in multidatabase systems. </title> <booktitle> IEEE Computer, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: As a result, ad-hoc techniques such as file naming conventions, and numerous tool-specific databases like Makefiles, tag files, etc. are required to augment the basic directory-file model. Consequently, information sharing is at a rudimentary level. The multi-database approach <ref> [4] </ref> occupies the other extreme: here the inte-gration layer provides a relational or object-oriented data model with explicit relationship types. This would seem to solve the relationship problem of the network file-system; both of these models have been used in conventional environments.
Reference: 5. <author> G.A. Bolcer and R. Taylor. Endeavors: </author> <title> A Process System Integration Infrastructure. </title> <booktitle> Proc. Intl. Software Process Conf. (to appear), </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: A number of research projects have applied hypertext to software object management, including the Hypertext Abstract Machine (HAM) [6], the Documents Integration Facility (DIF) [13, 14], and HyperCASE [7]; however, these are based on a single, centralized repository architecture. Notable exceptions are PROXHY [20], Chimera [2], and Endeavors <ref> [5] </ref>. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts. However, existing relationships among the artifacts or data repositories are not translated into links. ISHYS [15] and sigmaTrellis [45] explored software process modeling and enactment via hypertext, although in a centralized architecture. <p> However, existing relationships among the artifacts or data repositories are not translated into links. ISHYS [15] and sigmaTrellis [45] explored software process modeling and enactment via hypertext, although in a centralized architecture. More recently, HOSS [35] and Endeavors <ref> [5] </ref> have addressed process support, and have extended their hypertext mechanisms support distributed capabilities similar to DHT, but with some differences.
Reference: 6. <author> Brad Campbell and Joseph M. Goodman. </author> <title> HAM: A general purpose hypertext abstract machine. </title> <journal> Communications of the ACM, </journal> <volume> 31(7), </volume> <month> July </month> <year> 1988. </year>
Reference-contexts: A number of research projects have applied hypertext to software object management, including the Hypertext Abstract Machine (HAM) <ref> [6] </ref>, the Documents Integration Facility (DIF) [13, 14], and HyperCASE [7]; however, these are based on a single, centralized repository architecture. Notable exceptions are PROXHY [20], Chimera [2], and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts.
Reference: 7. <author> Jacob L. Cybulski and Karl Reed. </author> <title> A hypertext based software-engineering environment. </title> <journal> IEEE Software, </journal> <month> March </month> <year> 1992. </year>
Reference-contexts: A number of research projects have applied hypertext to software object management, including the Hypertext Abstract Machine (HAM) [6], the Documents Integration Facility (DIF) [13, 14], and HyperCASE <ref> [7] </ref>; however, these are based on a single, centralized repository architecture. Notable exceptions are PROXHY [20], Chimera [2], and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts. However, existing relationships among the artifacts or data repositories are not translated into links.
Reference: 8. <author> S. </author> <title> Dart. Concepts in Configuration Management Systems. </title> <booktitle> In Proc. Third Intern. Workshop on Software Configuration Management, ACM SIGSOFT, </booktitle> <pages> 1-18, </pages> <year> 1991. </year>
Reference-contexts: How can the chosen policy be supported? In our view, the basis of the problem for distributed CM in virtual enterprises comprises the following aspects: provision of standard CM services component identification, configuration structure definition, control over concurrent updates, team and process support, etc. <ref> [8] </ref> in a manner compatible with the use of a distributed software infrastructure. provision of CM services across heterogeneous (and legacy) CM tools, data models, repositories, update control policy models [10], etc., while maintain ing local/remote CM administrative autonomy and access control. provision of languages, notations, and/or executable environments for identifying <p> Also, Endeavors and HOSS are addressing issues of versioning, but based on the available reports, have not yet addressed the range of standard CM services <ref> [8] </ref> and CM update policy models [10] that have been addressed by DHT and NUCM [19], nor the multi-tactic tool integration schemes of DHT or DESERT [41].
Reference: 9. <author> D. Fang, J. Hammer, D. McLeod, and A. Si. Remote-exchange: </author> <title> An approach to controlled sharing among autonomous, heterogenous database systems. </title> <booktitle> In Proc. IEEE Compcon, </booktitle> <address> San Francisco. </address> <publisher> IEEE, </publisher> <month> February </month> <year> 1991. </year>
Reference-contexts: However, the complexity of constructing and maintaining a single global schema that captures all of the concepts present in each participating repository, combined with the requirement that integrated repositories have DBMS functionality (query language, data schema, transactions, etc.), generally makes this approach costly and difficult to implement <ref> [9] </ref>. CORBA-based implementations such as NUCM [19] face similar problems. Note, however, that CORBA could serve as the foundation layer on which the DHT protocol could be implemented; we chose a different approach largely because of the relative immaturity of CORBA implementations at the time.
Reference: 10. <author> Peter H. Feiler. </author> <title> Configuration Management Models in Commercial Environments. </title> <type> Technical Report CMU/SEI-91-TR-7, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: Furthermore, each team's repositories may support different CM policy models (e.g., long transaction model for the customer's RDBMS repository, composition model for the vendor's NFS, check-in check-out model for the contractor's RCS repository, and change set model for the consultant's knowledge base repository) <ref> [10] </ref>. Each team also requires access to at least part of the others' artifacts. Also, each will need to update and expand the shared set of products that represents the project's collective output and deliverables. <p> aspects: provision of standard CM services component identification, configuration structure definition, control over concurrent updates, team and process support, etc. [8] in a manner compatible with the use of a distributed software infrastructure. provision of CM services across heterogeneous (and legacy) CM tools, data models, repositories, update control policy models <ref> [10] </ref>, etc., while maintain ing local/remote CM administrative autonomy and access control. provision of languages, notations, and/or executable environments for identifying and configuring heterogeneous software artifacts (atoms) and product structures (graph-structured aggregates) that relate software development products (software source code, development artifacts, executables, documentation), processes, organizations (location, roles, team members), and <p> The resulting hypertext view is shown in Figure 2; this image shows how the DHT infrastructure library's RCS archive is exported. 2.4 SUPPORTING CONFIGURATION MANAGEMENT Feiler <ref> [10] </ref> found four CM models in commercial software development environ ments: 1. The check-out/check-in model. This is the familiar model implemented by RCS. 2. The composition model. <p> Also, Endeavors and HOSS are addressing issues of versioning, but based on the available reports, have not yet addressed the range of standard CM services [8] and CM update policy models <ref> [10] </ref> that have been addressed by DHT and NUCM [19], nor the multi-tactic tool integration schemes of DHT or DESERT [41].
Reference: 11. <author> S. Finger, M. Terk, E. Subrahmanian, C. Kasabach, F. Prinz, D.P. Siewiorek, A. Smailagic, J. Stivoric, and L. Weiss, </author> <title> Rapid Design and Manufacture of Wearable Computers, </title> <journal> Communications of the ACM, </journal> <volume> 39(2) </volume> <pages> 63-70, </pages> <year> 1996. </year>
Reference: 12. <author> Pankaj K. Garg and Mehdi Jayerzi (eds.), </author> <title> Process-Centered Software Engineering Environments, </title> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> CA, </address> <year> 1996. </year>
Reference-contexts: Finally, recent surveys of conventional and process-centered software engineering environments <ref> [21, 12] </ref>, underscore the growing trend toward the support of process life cycle activities, such as modeling, enactment, and repository management [25]. <p> of a centralized object management system that may be implemented using a relational DBMS-controlled object server or object-oriented DBMS as its repository, with static graph-based or reactive rule-based process modeling and enactment capabilities (e.g., Marvel [3], SMART [16], Articulator [28], and dozens of others in the U.S., Europe, and Japan <ref> [12] </ref>). However, the reliance on a DBMS for object management services or CM implies the need for a transaction manager.
Reference: 13. <author> Pankaj K. Garg and Walt Scacchi. </author> <title> A Hypertext Environment for Managing Configured Software Descriptions, </title> <booktitle> Proc. First Intl. Workshop Version and Configuration Control, </booktitle> <pages> pp. 326-343, </pages> <address> B.G. </address> <publisher> Teubner, </publisher> <address> Stuttgart, FRG, </address> <month> (January </month> <year> 1988). </year>
Reference-contexts: A number of research projects have applied hypertext to software object management, including the Hypertext Abstract Machine (HAM) [6], the Documents Integration Facility (DIF) <ref> [13, 14] </ref>, and HyperCASE [7]; however, these are based on a single, centralized repository architecture. Notable exceptions are PROXHY [20], Chimera [2], and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts.
Reference: 14. <author> Pankaj K. Garg and Walt Scacchi. </author> <title> A hypertext system for software life cycle documents. </title> <journal> IEEE Software, </journal> <volume> 7(3) </volume> <pages> 90-99, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: A number of research projects have applied hypertext to software object management, including the Hypertext Abstract Machine (HAM) [6], the Documents Integration Facility (DIF) <ref> [13, 14] </ref>, and HyperCASE [7]; however, these are based on a single, centralized repository architecture. Notable exceptions are PROXHY [20], Chimera [2], and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts.
Reference: 15. <author> Pankaj K. Garg and Walt Scacchi. ISHYS: </author> <title> Designing an intelligent software hypertext system. </title> <journal> IEEE Expert, </journal> <volume> 4(3) </volume> <pages> 52-63, </pages> <month> Fall </month> <year> 1989. </year>
Reference-contexts: Notable exceptions are PROXHY [20], Chimera [2], and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts. However, existing relationships among the artifacts or data repositories are not translated into links. ISHYS <ref> [15] </ref> and sigmaTrellis [45] explored software process modeling and enactment via hypertext, although in a centralized architecture. More recently, HOSS [35] and Endeavors [5] have addressed process support, and have extended their hypertext mechanisms support distributed capabilities similar to DHT, but with some differences.
Reference: 16. <author> P.K. Garg, P. Mi, T. Phan, W. Scacchi, and G. Thunquest. </author> <title> The SMART Approach to Software Process Engineering, </title> <booktitle> Proc. 16th. Intnl. Conf. Software Engineering, </booktitle> <address> Sorrento, Italy, </address> <publisher> IEEE Computer Society, </publisher> <pages> 341-350. </pages> <year> 1994. </year>
Reference-contexts: The significance of this approach to modeling process instances is that the mechanism for process enactment is embedded entirely within the process representation, as the source predicates and resolution functions of available-task links. In contrast to other enactment systems which employ an environment accessed through a process-based user interface <ref> [27, 16] </ref>, process-aware tools [46], or process state database [18] to execute process specifications, DHT process models can be enacted simply by browsing the process hypertext using any DHT browser or tool. <p> Many such environments rely upon the use of a centralized object management system that may be implemented using a relational DBMS-controlled object server or object-oriented DBMS as its repository, with static graph-based or reactive rule-based process modeling and enactment capabilities (e.g., Marvel [3], SMART <ref> [16] </ref>, Articulator [28], and dozens of others in the U.S., Europe, and Japan [12]). However, the reliance on a DBMS for object management services or CM implies the need for a transaction manager.
Reference: 17. <author> M. Hardwick, D.L. Spooner, T. Rando, and K.C. Morris, </author> <title> Sharing Manufacturing Information in Virtual Enterprises, </title> <journal> Communications of the ACM, </journal> <volume> 39(2) </volume> <pages> 46-54, </pages> <year> 1996. </year>
Reference: 18. <author> Dennis Heimbigner. </author> <title> The ProcessWall: A process state server approach to process programming. </title> <booktitle> In Proc. Fifth SIGSOFT Symposium on Software Development Environments, </booktitle> <address> Tyson's Corner, Virginia, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: Debug the module and return to step 1. At a given time, many instances of the process may be active, on different modules by different developers. Each instance has separate process state <ref> [27, 18] </ref> including the module being modified, the developer doing the modification, the last step completed, etc. To support process enactment, it is necessary to keep track of this state for each process instance [18], in order to guide the developer through the process tasks in the appropriate sequence. <p> Each instance has separate process state [27, 18] including the module being modified, the developer doing the modification, the last step completed, etc. To support process enactment, it is necessary to keep track of this state for each process instance <ref> [18] </ref>, in order to guide the developer through the process tasks in the appropriate sequence. Process state is represented by Resource links. Each process instance has an associated context that contains the resource links that define the state of that instance. <p> In contrast to other enactment systems which employ an environment accessed through a process-based user interface [27, 16], process-aware tools [46], or process state database <ref> [18] </ref> to execute process specifications, DHT process models can be enacted simply by browsing the process hypertext using any DHT browser or tool.
Reference: 19. <author> A. van der Hoek, D. Heimbigner, and A. Wolf. </author> <title> A Generic, Peer-to-Peer Repository for Distributed Configuration Management. </title> <booktitle> In Proc. 18th. Intl. Conf. Software Engineering, </booktitle> <publisher> IEEE Computer Society, Berlin, </publisher> <pages> 308-317, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: CORBA-based implementations such as NUCM <ref> [19] </ref> face similar problems. Note, however, that CORBA could serve as the foundation layer on which the DHT protocol could be implemented; we chose a different approach largely because of the relative immaturity of CORBA implementations at the time. <p> Also, Endeavors and HOSS are addressing issues of versioning, but based on the available reports, have not yet addressed the range of standard CM services [8] and CM update policy models [10] that have been addressed by DHT and NUCM <ref> [19] </ref>, nor the multi-tactic tool integration schemes of DHT or DESERT [41]. Finally, recent surveys of conventional and process-centered software engineering environments [21, 12], underscore the growing trend toward the support of process life cycle activities, such as modeling, enactment, and repository management [25].
Reference: 20. <author> Charles J. Kacmar and John J. Leggett. PROXHY: </author> <title> A process-oriented extensible hypertext architecture. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 9(4) </volume> <pages> 399-420, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: A number of research projects have applied hypertext to software object management, including the Hypertext Abstract Machine (HAM) [6], the Documents Integration Facility (DIF) [13, 14], and HyperCASE [7]; however, these are based on a single, centralized repository architecture. Notable exceptions are PROXHY <ref> [20] </ref>, Chimera [2], and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts. However, existing relationships among the artifacts or data repositories are not translated into links.
Reference: 21. <author> Anthony S. Karrer and Walt Scacchi, </author> <title> Meta-Environments for Software Production, </title> <booktitle> Advances in Software Engineering and Knowledge Engineering, </booktitle> <volume> Vol. 4, </volume> <editor> D. Hurley (ed.), </editor> <publisher> World Scientific Press, </publisher> <year> 1995. </year>
Reference-contexts: Finally, recent surveys of conventional and process-centered software engineering environments <ref> [21, 12] </ref>, underscore the growing trend toward the support of process life cycle activities, such as modeling, enactment, and repository management [25].
Reference: 22. <author> James Kistler and Mahadev Satyanarayanan. </author> <title> Disconnected operation in the coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-20, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: The DHT architecture provides the physical integration of participating repositories necessary for users to access instances of data objects. Other research uses the same general approach we have taken, but with different data models and results. For example, network file-system solutions <ref> [22, 40, 42] </ref> implement a common global file-system at the integration layer, where each repository exports its objects as files in a single unified directory tree.
Reference: 23. <author> Henry F. Korth and Abraham Silbershatz. </author> <title> Database System Concepts. </title> <publisher> McGraw-Hill, </publisher> <year> 1986. </year>
Reference-contexts: A request-response style communication protocol implements the operations specified in the DHT data model, and includes provisions for locating servers and authenticating and encrypting messages. The protocol also provides a form of time-stamp concurrency control to prevent lost updates <ref> [23] </ref>. This provides a minimum concurrency control mechanism at the lowest integration level that is compatible with the widest possible variety of component repositories. More sophisticated concurrency control strategies are left to implementation at the client level through specific software process models (Section 3). Fig. 1.
Reference: 24. <author> Y-J. Lin and S. Reiss. </author> <title> Configuration Management with Logical Structures. </title> <booktitle> In Proc. 18th. Intern. Conf. Software Engineering, </booktitle> <publisher> IEEE Computer Society, Berlin, </publisher> <pages> 298-307, </pages> <month> March </month> <year> 1996. </year>
Reference: 25. <author> P. Mi, M-J. Lee, and W. Scacchi. </author> <title> A knowledge-based software process library for process-driven software development. </title> <booktitle> Proc. 7th. Knowledge-Based Software Engineering Conf. </booktitle> <address> Washington, DC, </address> <publisher> IEEE Computer Society, </publisher> <pages> 121-132, </pages> <year> 1992. </year>
Reference-contexts: Finally, recent surveys of conventional and process-centered software engineering environments [21, 12], underscore the growing trend toward the support of process life cycle activities, such as modeling, enactment, and repository management <ref> [25] </ref>.
Reference: 26. <author> P. Mi and W. Scacchi, </author> <title> A knowledge-based environment for modeling and simulating software engineering processes, </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> 2(3) </volume> <pages> 283-294, </pages> <year> 1990. </year>
Reference: 27. <author> P. Mi and W. Scacchi. </author> <title> Process integration in CASE environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-54, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Debug the module and return to step 1. At a given time, many instances of the process may be active, on different modules by different developers. Each instance has separate process state <ref> [27, 18] </ref> including the module being modified, the developer doing the modification, the last step completed, etc. To support process enactment, it is necessary to keep track of this state for each process instance [18], in order to guide the developer through the process tasks in the appropriate sequence. <p> The significance of this approach to modeling process instances is that the mechanism for process enactment is embedded entirely within the process representation, as the source predicates and resolution functions of available-task links. In contrast to other enactment systems which employ an environment accessed through a process-based user interface <ref> [27, 16] </ref>, process-aware tools [46], or process state database [18] to execute process specifications, DHT process models can be enacted simply by browsing the process hypertext using any DHT browser or tool.
Reference: 28. <author> P. Mi and W. Scacchi. </author> <title> A knowledge-based meta-model for formulating models of software development processes, Decision Support Systems, </title> <note> (to appear), </note> <year> 1996. </year>
Reference-contexts: Many such environments rely upon the use of a centralized object management system that may be implemented using a relational DBMS-controlled object server or object-oriented DBMS as its repository, with static graph-based or reactive rule-based process modeling and enactment capabilities (e.g., Marvel [3], SMART [16], Articulator <ref> [28] </ref>, and dozens of others in the U.S., Europe, and Japan [12]). However, the reliance on a DBMS for object management services or CM implies the need for a transaction manager.
Reference: 29. <institution> National Industrial Information Information Protocol Consortium (Vision, Goals and Objectives Pages). </institution> <note> See http://www.niiip.org. </note>
Reference: 30. <author> B.A. Nejmeh. </author> <title> Internet: A Strategic Tools for the Software Enterprise, </title> <journal> Communications of the ACM, </journal> <volume> 37(11) </volume> <pages> 23-27, </pages> <month> November </month> <year> 1994. </year>
Reference: 31. <author> John Noll. </author> <title> Software Object Management in Heterogeneous, Autonomous Environments: A Hypertext Approach. </title> <type> PhD Dissertation, </type> <institution> University of Southern California, </institution> <year> 1997. </year>
Reference: 32. <author> John Noll and Walt Scacchi. </author> <title> Integrating diverse information repositories: A distributed hypertext approach. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 38-45, </pages> <month> December </month> <year> 1991. </year>
Reference: 33. <author> John Noll and Walt Scacchi. </author> <title> A hypertext system for integrating heterogeneous, autonomous software repositories. </title> <booktitle> In Proc. Fourth Irvine Software Symposium, </booktitle> <pages> pages 49-59, </pages> <address> Irvine, CA, </address> <month> April </month> <year> 1994. </year>
Reference: 34. <author> John Noll and Walt Scacchi. </author> <title> Repository Support for Virtual Software Enterprise. </title> <booktitle> In Proc. California Software Symposium, </booktitle> <address> UCI-USC, Los Angeles, CA, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: The remainder of this paper is organized as follows: in the next section, we present an overview of our approach that is based on the use of a semantic distributed hypertext data model, client-broker-server architecture, and supporting environment. We refer to this capability simply as DHT <ref> [34] </ref>. Following this, we discuss the DHT approach to the multi-level integration of various CM tools, policy/workspace models, and repositories. Then, we present an approach to software/CM process modeling and enactment using DHT-based hypertext browsing.
Reference: 35. <author> P.J. Nurnberg, J.J. Leggett, E.R. Schneider, and J.L. Schnase. </author> <title> Hypermedia Operating Systems: A New Paradigm for Computing, </title> <booktitle> Proc. Hypertext '96, ACM, </booktitle> <address> Washington, DC, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: However, existing relationships among the artifacts or data repositories are not translated into links. ISHYS [15] and sigmaTrellis [45] explored software process modeling and enactment via hypertext, although in a centralized architecture. More recently, HOSS <ref> [35] </ref> and Endeavors [5] have addressed process support, and have extended their hypertext mechanisms support distributed capabilities similar to DHT, but with some differences.
Reference: 36. <author> Katia Obraczka, Peter Danzig, and Shih-Hao Li, </author> <title> Internet resouce discovery services, </title> <journal> Computer, </journal> <volume> 26(9) </volume> <pages> 8-22, </pages> <year> 1993. </year>
Reference-contexts: DHT can in-corporate both DBMS and non-DBMS repositories, whether specific to CM or not. In addition, DHT supports navigational browsing and versioning, multiple workspace models, and is compatible with existing Internet resource discovery mechanisms <ref> [36] </ref>.
Reference: 37. <author> Maria H. Penedo, Erhard Ploedereder, and Ian Thomas. </author> <title> Object management issues for software engineering environments; workshop report. </title> <booktitle> In SIGSOFT '88, </booktitle> <address> Boston, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: However, network file-systems are a lowest-common denominator solution [44]: the directory-file model lacks explicit constructs to represent the numerous relationships that exist among software artifacts <ref> [37] </ref>. As a result, ad-hoc techniques such as file naming conventions, and numerous tool-specific databases like Makefiles, tag files, etc. are required to augment the basic directory-file model. Consequently, information sharing is at a rudimentary level.
Reference: 38. <author> P. J. Plauger. </author> <title> The Standard C Library. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference: 39. <author> Jurgen Reuter, Stefan U. Hngen, James J. Hunt, and Walter F. Tichy. </author> <title> Distributed Revision Control Via the World Wide Web, </title> <booktitle> In Proc. Sixth Intl. Workshop on Software Configuration Management, </booktitle> <address> Berlin, Germany, </address> <month> March, </month> <year> 1996 </year>
Reference: 40. <author> Herman C. Rao and Larry L. Peterson. </author> <title> Accessing files in an internet: the jade file system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(6) </volume> <pages> 613-625, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The DHT architecture provides the physical integration of participating repositories necessary for users to access instances of data objects. Other research uses the same general approach we have taken, but with different data models and results. For example, network file-system solutions <ref> [22, 40, 42] </ref> implement a common global file-system at the integration layer, where each repository exports its objects as files in a single unified directory tree.
Reference: 41. <author> S. Reiss. </author> <title> Simplifying Data Integration: </title> <booktitle> The Design of the Desert Software Devel--opment Environment. In Proc. 18th. Intern. Conf. Software Engineering, </booktitle> <publisher> IEEE Computer Society, Berlin, </publisher> <pages> 398-407, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Endeavors and HOSS are addressing issues of versioning, but based on the available reports, have not yet addressed the range of standard CM services [8] and CM update policy models [10] that have been addressed by DHT and NUCM [19], nor the multi-tactic tool integration schemes of DHT or DESERT <ref> [41] </ref>. Finally, recent surveys of conventional and process-centered software engineering environments [21, 12], underscore the growing trend toward the support of process life cycle activities, such as modeling, enactment, and repository management [25].
Reference: 42. <author> Mahadev Satyanarayanan. </author> <title> The influence of scale on distributed file system design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(1) </volume> <pages> 1-9, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The DHT architecture provides the physical integration of participating repositories necessary for users to access instances of data objects. Other research uses the same general approach we have taken, but with different data models and results. For example, network file-system solutions <ref> [22, 40, 42] </ref> implement a common global file-system at the integration layer, where each repository exports its objects as files in a single unified directory tree.
Reference: 43. <author> Walt Scacchi. </author> <title> A software infrastructure for a distributed system factory, </title> <journal> IEE/BCS Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 355-369, </pages> <year> 1991. </year>
Reference: 44. <author> Peter Scheurmann, Clement Yu, Ahmed Elmagarmid, Hector Garcia-Molina, Frank Manola, Dennis McLeod, Arnon Rosenthal, and Marjorie Templeton. </author> <booktitle> Report on the workshop on heterogeneous database systems. SIGMOD Record, </booktitle> <volume> 19(4), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: For example, network file-system solutions [22, 40, 42] implement a common global file-system at the integration layer, where each repository exports its objects as files in a single unified directory tree. However, network file-systems are a lowest-common denominator solution <ref> [44] </ref>: the directory-file model lacks explicit constructs to represent the numerous relationships that exist among software artifacts [37]. As a result, ad-hoc techniques such as file naming conventions, and numerous tool-specific databases like Makefiles, tag files, etc. are required to augment the basic directory-file model.
Reference: 45. <author> P. David Stotts. sigmaTrellis: </author> <title> Process models as multi-reader collaborative hy-perdocuments. </title> <booktitle> In Proc. Ninth Intl. Software Process Workshop, </booktitle> <address> Airlie, Virginia, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Notable exceptions are PROXHY [20], Chimera [2], and Endeavors [5]. In contrast to DHT, PROHXY and Chimera focus on adding new links among existing artifacts. However, existing relationships among the artifacts or data repositories are not translated into links. ISHYS [15] and sigmaTrellis <ref> [45] </ref> explored software process modeling and enactment via hypertext, although in a centralized architecture. More recently, HOSS [35] and Endeavors [5] have addressed process support, and have extended their hypertext mechanisms support distributed capabilities similar to DHT, but with some differences.
Reference: 46. <author> Richard Taylor, Frank Belz, Lori Clarke, Leon Osterweil, Richard Selby, Jack Wile-den, Alexander Wolf, and Michal Young. </author> <title> Foundations for the Arcadia environment architecture. </title> <booktitle> In SIGSOFT '88, </booktitle> <address> Boston, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: In contrast to other enactment systems which employ an environment accessed through a process-based user interface [27, 16], process-aware tools <ref> [46] </ref>, or process state database [18] to execute process specifications, DHT process models can be enacted simply by browsing the process hypertext using any DHT browser or tool.
Reference: 47. <institution> Working Group on Versioning and Configuration Management of World Wide Web Content. </institution> <address> http://www.ics.uci.edu/ ejw/versioning/ </address>
References-found: 47

