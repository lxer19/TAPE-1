URL: ftp://ftp.cs.wpi.edu/pub/techreports/98-4.ps.gz
Refering-URL: http://cs.wpi.edu/Resources/techreports/index.html
Root-URL: 
Title: Using Complex Substitution Strategies for View Synchronization  
Author: by Anisoara Nica Elke A. Rundensteiner 
Date: February 1998  
Pubnum: WPI-CS-TR-98-4  
Abstract: Computer Science Technical Report Series WORCESTER POLYTECHNIC INSTITUTE Computer Science Department 100 Institute Road, Worcester, Massachusetts 01609-2280 
Abstract-found: 1
Intro-found: 1
Reference: [AKS96] <author> Y. Arens, C. A. Knoblock, and W.-M. Shen. </author> <title> Query Reformulation for Dynamic Information Integration. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 6 </volume> (2/3):99-130, 1996. 
Reference-contexts: EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous information sources. On this venue, related work that addresses the problem of information integration are among others the SIMS <ref> [AKS96] </ref> and SoftBot [EW94] projects. In the SIMS project, a unified schema is apriori defined and the user interaction with the system is via queries posed against the unified schema.
Reference: [CKP95] <author> S. Chaudhuri, R. Krishnamurthy, and S. Potamianos. </author> <title> Optimizing Query with Materialized Views. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: This issue is similar to the problem of answering queries using views which was extensively studied in the database community <ref> [CKP95, LSK95] </ref>. However, in our problem domain, we have an added issue of the availability of the set of partial/complete information constraints defined in MKB' that could be used to compare the extent of the initial view V and the extent of the evolved view V 0 . <p> Unlike the approach proposed for query rewriting using materialized views <ref> [LRU96, SDJL96, CKP95, LMS95] </ref> our proposed techniques address new issues: (1) finding view rewritings that are not necessarily equivalent to the original view definition (VE 2 f; ; g), (2) using semantic containment information expressed using PC-constraints for proving that candidate rewritings satisfy the view-extent evolution parameter, and (3) preserving at
Reference: [EW94] <author> O. Etzioni and D. Weld. </author> <title> A Softbot-Based Interface to the Internet. </title> <journal> Communication of ACM, </journal> <year> 1994. </year>
Reference-contexts: EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous information sources. On this venue, related work that addresses the problem of information integration are among others the SIMS [AKS96] and SoftBot <ref> [EW94] </ref> projects. In the SIMS project, a unified schema is apriori defined and the user interaction with the system is via queries posed against the unified schema.
Reference: [GJM96] <author> A. Gupta, H.V. Jagadish, </author> <title> and I.S. Mumick. Data Integration using Self-Maintainable Views. </title> <booktitle> In Proceedings of International Conference on Extending Database Technology (EDBT), </booktitle> <year> 1996. </year>
Reference-contexts: While the evolution of views is assumed to be implicitly triggered by capability changes of (autonomous) ISs in our work, previous work that dealt with view redefinition (e.g., by Gupta et al. <ref> [GJM96] </ref> and Mohania et al. [MD96]) typically assumed that the view redefinition was explicitly requested by the view developer at the view site, while the underlying information sources remained unchanged. Furthermore, previous work Gupta et al. [GJM96], Mohania et al. [MD96], etc., has focused on the maintenance of the materialized views <p> our work, previous work that dealt with view redefinition (e.g., by Gupta et al. <ref> [GJM96] </ref> and Mohania et al. [MD96]) typically assumed that the view redefinition was explicitly requested by the view developer at the view site, while the underlying information sources remained unchanged. Furthermore, previous work Gupta et al. [GJM96], Mohania et al. [MD96], etc., has focused on the maintenance of the materialized views after such view redefinition and not on the modification of the view definitions themselves as done in our work. <p> Moreover, we introduce in this paper the concept of the strongest synch-equivalent view definition that makes the implicit semantics of the view evolution parameters explicit and give the transformation rules for finding it for a E-SQL view definition. Gupta et al. <ref> [GJM96] </ref> and Mohania et al. [MD96] address the problem of how most efficiently to maintain a materialized view after a view redefinition explicitly initiated by the user takes place. They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue.
Reference: [GL94] <author> C. </author> <title> Galindo-Legaria. </title> <booktitle> Outerjoins as disjunctions . Proceedings of SIGMOD, </booktitle> <year> 1994. </year>
Reference-contexts: F.PName) (CD = f alse; CR = true) AND (F.Dest = 'Asia') AND (P.StartDate = F.Date) AND (P.Location = 'Asia') (29) 7.3 Mapping the MKB to a Hypergraph Representation Generally, a database schema can be represented as a hypergraph whose nodes are the attributes and whose hyperedges are the relations <ref> [Ull89, GL94] </ref>. Inspired by this representation, we represent the set of attributes and the set of relations described in MKB by a hypergraph that is extended with extra nodes corresponding to the join constraints in the MKB and extra edges corresponding to the function-of constraints. <p> For this, the notion of connected relations is introduced as a natural extension of the concept of full disjunction <ref> [GL94] </ref>. In the default case when only natural joins are defined in the IS descriptions in the MKB it then can be shown that the semantics of these two concepts (connected rules and full disjunction) are equivalent [NR98a]. AI planning techniques are used in DIIM for query refinement.
Reference: [LKNR98] <author> A. J. Lee, A. Koeller, A. Nica, and E. A. Rundensteiner. </author> <title> Data Warehousing Evolution: Trade-offs between Quality and Cost. </title> <type> Technical Report WPI-CS-TR-98-2, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1998. </year>
Reference-contexts: On this venue, we incorporated into EVE a cost model to differentiate between the "quality" of these two alternative yet legal rewritings <ref> [LKNR98] </ref>. 19 (B) The expression used to obtain a replacement for the attribute Customer.Address is not merged into the new definition by failing to add the join condition in the WHERE clause, thus violating M2: CREATE VIEW Asia-Customer (VE =) AS SELECT C.Name, P.PAddress (AD = f alse; AR = true), <p> In EVE, instead, we now assume that precise (SQL) queries are used to define views (instead of loosely-specified ones), and thus query refinement in the sense of DIIM is not needed. 9 Conclusion Our work is the first to study the problem of view evolution in a dynamic environment <ref> [RLN97, LNR97a, LNR97b, NLR98, LKNR98, NR98b] </ref>. In our EVE system, views survive even when the underlying ISs upon which they are defined change their capabilities. <p> Examples of EVE work to be done include the exploration of alternate view evolution preference models, MKB evolution as well as cost models for maximal view preservation <ref> [LKNR98] </ref>.
Reference: [LMS95] <author> A.Y. Levy, A.O. Mendelzon, and Y. Sagiv. </author> <title> Answering Queries Using Views. </title> <booktitle> In Proceedings of ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 95-104, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Unlike the approach proposed for query rewriting using materialized views <ref> [LRU96, SDJL96, CKP95, LMS95] </ref> our proposed techniques address new issues: (1) finding view rewritings that are not necessarily equivalent to the original view definition (VE 2 f; ; g), (2) using semantic containment information expressed using PC-constraints for proving that candidate rewritings satisfy the view-extent evolution parameter, and (3) preserving at <p> None of the two projects address the particular problem of evolution under capability changes of participating external information sources. 37 Research on query reformulation using materialized views Levy et al. <ref> [LRU96, LMS95, SDJL96] </ref> considers the problem of replacing an original query with a new expression containing materialized view definitions such that the new query is equivalent to the old one. <p> To the best of our knowledge, there is no work done in this context of query reformulation using views with the goal of generating queries without equivalence (e.g., the new reformulated query could be a subset of the original query). This approach to query reformulation <ref> [LMS95] </ref> has some similarities with our view synchronization process, but again it is set in a different environment and has different goals.
Reference: [LNR97a] <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> Keeping Virtual Information Resources Up and Running. In Proceedings of IBM Centre for Advanced Studies Conference CASCON97, </title> <type> Best Paper Award, </type> <pages> pages 1-14, </pages> <month> November </month> <year> 1997. </year>
Reference-contexts: Views in such environments introduce new challenges to the database community [Wid95]. In our prior work <ref> [RLN97, LNR97a] </ref>, we have identified view evolution caused by capability changes of one or several of the underlying ISs as a critical new problem faced by these applications. The problem is that current view technology is insufficient for supporting flexible view definitions. <p> Our view synchronization algorithm finds valid replacements for affected (deleted) components of the existing view definitions based on the semantic constraints captured in the MKB. Rather than just providing simple so-called `one-step-away' view rewriting <ref> [LNR97b, LNR97a] </ref>, these replacements may correspond to possibly complex pieces of information from several ISs. For this, our solution succeeds in determining view rewritings through multiple join constraints given in the MKB. <p> Below we introduce the MISD model as used by the remainder of this paper. All MISD constraints are summarized in Figure 3 <ref> [LNR97a, LNR97b] </ref>. <p> = f alse) FROM S (RD = true; RR = true); R (RD = f alse; RR = true) WHERE (S:B 0 = R:B)(CD = true; CR = true)AND (R:B value)(CD = true; CR = false) (17) 9 View synchronization algorithms for "deleteattribute" are given in our previous work in <ref> [LNR97a, LNR97b] </ref>. 16 Legal Derived Rewritings of the view V . <p> In [RLN97], we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems. In 36 <ref> [LNR97a, LNR97b] </ref>, we then lay the basis for the solutions presented in this current paper by introducing the overall EVE solution framework, in particular the idea of associating evolution preferences with view specifications. <p> In EVE, instead, we now assume that precise (SQL) queries are used to define views (instead of loosely-specified ones), and thus query refinement in the sense of DIIM is not needed. 9 Conclusion Our work is the first to study the problem of view evolution in a dynamic environment <ref> [RLN97, LNR97a, LNR97b, NLR98, LKNR98, NR98b] </ref>. In our EVE system, views survive even when the underlying ISs upon which they are defined change their capabilities.
Reference: [LNR97b] <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> The EVE Framework: View Evolution in an Evolving Environment. </title> <type> Technical Report WPI-CS-TR-97-4, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year> <month> 39 </month>
Reference-contexts: In our prior work, we have proposed a novel approach to solve this view inflexibility problem <ref> [RLN97, LNR97b, NLR97] </ref>. Namely, we have designed a framework for view adaptation in these evolving environments, called EVE (Evolvable View Environment), which supports to "preserve as much as possible" of the view instead of completely disabling it with each IS change. <p> Our view synchronization algorithm finds valid replacements for affected (deleted) components of the existing view definitions based on the semantic constraints captured in the MKB. Rather than just providing simple so-called `one-step-away' view rewriting <ref> [LNR97b, LNR97a] </ref>, these replacements may correspond to possibly complex pieces of information from several ISs. For this, our solution succeeds in determining view rewritings through multiple join constraints given in the MKB. <p> The proposed strategy is shown to find a new valid definition of a view in many cases where current view technology would have simply disabled the view, and where our proposed one-step view synchronization (SVS) <ref> [LNR97b] </ref> would have failed to locate a suitable solution. The remainder of the paper is structured as follows. In Section 2, we present our EVE solution approach. In Section 3, we present the IS description model MISD. <p> Below we introduce the MISD model as used by the remainder of this paper. All MISD constraints are summarized in Figure 3 <ref> [LNR97a, LNR97b] </ref>. <p> = f alse) FROM S (RD = true; RR = true); R (RD = f alse; RR = true) WHERE (S:B 0 = R:B)(CD = true; CR = true)AND (R:B value)(CD = true; CR = false) (17) 9 View synchronization algorithms for "deleteattribute" are given in our previous work in <ref> [LNR97a, LNR97b] </ref>. 16 Legal Derived Rewritings of the view V . <p> In [RLN97], we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems. In 36 <ref> [LNR97a, LNR97b] </ref>, we then lay the basis for the solutions presented in this current paper by introducing the overall EVE solution framework, in particular the idea of associating evolution preferences with view specifications. <p> In EVE, instead, we now assume that precise (SQL) queries are used to define views (instead of loosely-specified ones), and thus query refinement in the sense of DIIM is not needed. 9 Conclusion Our work is the first to study the problem of view evolution in a dynamic environment <ref> [RLN97, LNR97a, LNR97b, NLR98, LKNR98, NR98b] </ref>. In our EVE system, views survive even when the underlying ISs upon which they are defined change their capabilities. <p> CVS finds a new valid rewriting of a view in many cases where current view technology would have simply disabled the view, and where our previous one-step view synchronization (SVS) <ref> [LNR97b] </ref> would have failed to locate a suitable solution. Examples to illustrate the main ideas are given throughout the paper. In particular, we treat in depth view evolution caused by the "delete-relation" capability change.
Reference: [LRU96] <author> A. Y. Levy, A. Rajaraman, and J. D. Ullman. </author> <title> Answering queries using limited external proces-sors. </title> <booktitle> In Proceedings of the Fifteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 227-237, </pages> <address> Montreal, Canada, </address> <month> 3-5 June </month> <year> 1996. </year>
Reference-contexts: Unlike the approach proposed for query rewriting using materialized views <ref> [LRU96, SDJL96, CKP95, LMS95] </ref> our proposed techniques address new issues: (1) finding view rewritings that are not necessarily equivalent to the original view definition (VE 2 f; ; g), (2) using semantic containment information expressed using PC-constraints for proving that candidate rewritings satisfy the view-extent evolution parameter, and (3) preserving at <p> None of the two projects address the particular problem of evolution under capability changes of participating external information sources. 37 Research on query reformulation using materialized views Levy et al. <ref> [LRU96, LMS95, SDJL96] </ref> considers the problem of replacing an original query with a new expression containing materialized view definitions such that the new query is equivalent to the old one.
Reference: [LSK95] <author> A. Y. Levy, D. Srivastava, and T. Kirk. </author> <title> Data Model and Query Evaluation in Global Information Systems. </title> <journal> Journal of Intelligent Information Systems. </journal> <note> Special Issue on Networked Information Discovery and Retrieval, </note> <year> 1995. </year>
Reference-contexts: This issue is similar to the problem of answering queries using views which was extensively studied in the database community <ref> [CKP95, LSK95] </ref>. However, in our problem domain, we have an added issue of the availability of the set of partial/complete information constraints defined in MKB' that could be used to compare the extent of the initial view V and the extent of the evolved view V 0 . <p> Their algorithms could potentially be applied in the context of our overall framework, once EVE has determined an acceptable view redefinition. Their results are thus complimentary to our work. In the work of Levy et al. <ref> [LSK95] </ref>, a global information system is designed using the world-view approach where the external information sources are described relative to the unified world-view relations. <p> The problem of view evolution as posed by our work, i.e., that the world view itself may evolve, is not discussed in <ref> [LSK95] </ref>. Papakonstantinou et al. [PGMW95, PGMU96] are pursuing the goal of information gathering across multiple sources. Their proposed language OEM assumes queries that explicitly list the source identifiers of the database from which the data is to be taken.
Reference: [MD96] <author> M. Mohania and G. Dong. </author> <title> Algorithms for Adapting Materialized Views in Data Warehouses. </title> <booktitle> International Symposium on Cooperative Database Systems for Advanced Applications, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: While the evolution of views is assumed to be implicitly triggered by capability changes of (autonomous) ISs in our work, previous work that dealt with view redefinition (e.g., by Gupta et al. [GJM96] and Mohania et al. <ref> [MD96] </ref>) typically assumed that the view redefinition was explicitly requested by the view developer at the view site, while the underlying information sources remained unchanged. Furthermore, previous work Gupta et al. [GJM96], Mohania et al. [MD96], etc., has focused on the maintenance of the materialized views after such view redefinition and <p> that dealt with view redefinition (e.g., by Gupta et al. [GJM96] and Mohania et al. <ref> [MD96] </ref>) typically assumed that the view redefinition was explicitly requested by the view developer at the view site, while the underlying information sources remained unchanged. Furthermore, previous work Gupta et al. [GJM96], Mohania et al. [MD96], etc., has focused on the maintenance of the materialized views after such view redefinition and not on the modification of the view definitions themselves as done in our work. <p> Moreover, we introduce in this paper the concept of the strongest synch-equivalent view definition that makes the implicit semantics of the view evolution parameters explicit and give the transformation rules for finding it for a E-SQL view definition. Gupta et al. [GJM96] and Mohania et al. <ref> [MD96] </ref> address the problem of how most efficiently to maintain a materialized view after a view redefinition explicitly initiated by the user takes place. They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue.
Reference: [NLR97] <author> A. Nica, A.J . Lee, and E. A. Rundensteiner. </author> <title> View Synchronization with Complex Substitution Algorithms. </title> <type> Technical Report WPI-CS-TR-97-8, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: In our prior work, we have proposed a novel approach to solve this view inflexibility problem <ref> [RLN97, LNR97b, NLR97] </ref>. Namely, we have designed a framework for view adaptation in these evolving environments, called EVE (Evolvable View Environment), which supports to "preserve as much as possible" of the view instead of completely disabling it with each IS change. <p> Next, we use one example to demonstrate the usage of and interactions among proposed evolution parameters, while an extensive justification for the design of this language plus many more examples can be found in <ref> [NLR97] </ref>. Example 6 In our Example 1, let's assume that the travel agency has a promotion for the customers who travel to Asia. Therefore, the travel agency needs to find the customers' names, addresses, and phone numbers. <p> Two, we assume that any join constraint in MKB is augmented with the order constraints defined for the relations involved in that join constraint. The computation of this integrated representation of constraints from the MKB is straightforward, and is omitted here for space reasons <ref> [NLR97] </ref>. We now start by giving some definitions of concepts needed to characterize valid replacements of view components.
Reference: [NLR98] <author> A. Nica, A. J. Lee, and E. A. Rundensteiner. </author> <title> The CVS Algorithm for View Synchronization in Evolvable Large-Scale Information Systems. </title> <booktitle> To appear in Proceedings of International Conference on Extending Database Technology (EDBT'98), </booktitle> <address> Valencia, Spain, </address> <month> March </month> <year> 1998. </year>
Reference-contexts: In EVE, instead, we now assume that precise (SQL) queries are used to define views (instead of loosely-specified ones), and thus query refinement in the sense of DIIM is not needed. 9 Conclusion Our work is the first to study the problem of view evolution in a dynamic environment <ref> [RLN97, LNR97a, LNR97b, NLR98, LKNR98, NR98b] </ref>. In our EVE system, views survive even when the underlying ISs upon which they are defined change their capabilities.
Reference: [NR97] <author> A. Nica and E. A. Rundensteiner. </author> <title> On Translating Loosely-Specified Queries into Executable Plans in Large-Scale Information Systems. </title> <booktitle> In Proceedings of Second IFCIS International Conference on Cooperative Information Systems CoopIS'97, </booktitle> <pages> pages 213-222, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: Further, we introduce the concept of a join constraint in our model that allows expressing default conditions among external relations that should be used by the system to attempt to integrate information instead of evaluating (blindly) all possible Cartesian combinations based on value matches (full disjunction) <ref> [NR98a, NR97] </ref>. The problem of view evolution as posed by our work, i.e., that the world view itself may evolve, is not discussed in [LSK95]. Papakonstantinou et al. [PGMW95, PGMU96] are pursuing the goal of information gathering across multiple sources.
Reference: [NR98a] <author> A. Nica and E. A. Rundensteiner. </author> <title> Loosely-Specified Query Processing in Large-Scale Information Systems. </title> <note> To appear in International Journal of Cooperative Information Systems, </note> <year> 1998. </year>
Reference-contexts: The EVE environment is populated by a possibly large number of heterogeneous ISs. These ISs are autonomous in the sense that they are free to change their capabilities dynamically at any time without regard to views defined upon them. Similar to other large-scale systems <ref> [NR98a] </ref>, an IS is integrated into the EVE framework via a wrapper (e.g., [PGMU96]), 3 called the Information Source Interface (ISI), that translates between IS's native language and model to a common model understood by the EVE system. <p> type (which must be reflected by the type constraints for their relations). 3 We assume in this paper that information sources support at least SPJ (SQL) queries with conjunctions of primitive clauses in the WHERE clause, and thus we are not discussing how query capabilities are described in our system <ref> [NR98a] </ref>. 6 3.3 Order Integrity Constraints The order constraints specify data constraints that are satisfied by any tuple of a relation at any time. <p> Further, we introduce the concept of a join constraint in our model that allows expressing default conditions among external relations that should be used by the system to attempt to integrate information instead of evaluating (blindly) all possible Cartesian combinations based on value matches (full disjunction) <ref> [NR98a, NR97] </ref>. The problem of view evolution as posed by our work, i.e., that the world view itself may evolve, is not discussed in [LSK95]. Papakonstantinou et al. [PGMW95, PGMU96] are pursuing the goal of information gathering across multiple sources. <p> And, if not possible to preseve all view attributes (from the SELECT clause), our view redefinition semantic allows to specify evolution preferences that add flexibility and in the same time let the view definer control the view evolution process. In the University of Michigan Digital Library project <ref> [NR98a] </ref>, we have proposed the Dynamic Information Integration Model (DIIM) to allow information sources to dynamically participate in an information integration system. <p> In the default case when only natural joins are defined in the IS descriptions in the MKB it then can be shown that the semantics of these two concepts (connected rules and full disjunction) are equivalent <ref> [NR98a] </ref>. AI planning techniques are used in DIIM for query refinement.
Reference: [NR98b] <author> A. Nica and E. A. Rundensteiner. </author> <title> Using Containment Information for View Evolution in Dynamic Distributed Environments. </title> <type> Technical Report WPI-CS-TR-98-3, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1998. </year>
Reference-contexts: This development is beyond the scope of current paper but our current work is starting to address this problem <ref> [NR98b] </ref>. Example 18 For our view Customer-Passenger-Asia defined by Equation (29), we now show how to apply Steps 4 and 5 from the CVS algorithm and find replacements under the change "delete relation Customer". <p> Due to the space limitation we don't present here our work done in this direction <ref> [NR98b] </ref>, insead we simply give an example for when the view-extent parameter could be shown to be satisfied by a PC-constraint. Example 19 Let's assume that the view Customer-Passengers-Asia has the view-extent evolution parameter VE set to "". <p> In EVE, instead, we now assume that precise (SQL) queries are used to define views (instead of loosely-specified ones), and thus query refinement in the sense of DIIM is not needed. 9 Conclusion Our work is the first to study the problem of view evolution in a dynamic environment <ref> [RLN97, LNR97a, LNR97b, NLR98, LKNR98, NR98b] </ref>. In our EVE system, views survive even when the underlying ISs upon which they are defined change their capabilities.
Reference: [PGMU96] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Ullman. Medmaker: </author> <title> A Mediation System Based on Declarative Specifications. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <year> 1996. </year>
Reference-contexts: These ISs are autonomous in the sense that they are free to change their capabilities dynamically at any time without regard to views defined upon them. Similar to other large-scale systems [NR98a], an IS is integrated into the EVE framework via a wrapper (e.g., <ref> [PGMU96] </ref>), 3 called the Information Source Interface (ISI), that translates between IS's native language and model to a common model understood by the EVE system. While the EVE framework is generally applicable, we restrict ourselves in this paper to EVE's common data model being a relational one. <p> The problem of view evolution as posed by our work, i.e., that the world view itself may evolve, is not discussed in [LSK95]. Papakonstantinou et al. <ref> [PGMW95, PGMU96] </ref> are pursuing the goal of information gathering across multiple sources. Their proposed language OEM assumes queries that explicitly list the source identifiers of the database from which the data is to be taken.
Reference: [PGMW95] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Widom. </author> <title> Object Exchange Across Heterogeneous Information Sources. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <pages> pages 251-260, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: The problem of view evolution as posed by our work, i.e., that the world view itself may evolve, is not discussed in [LSK95]. Papakonstantinou et al. <ref> [PGMW95, PGMU96] </ref> are pursuing the goal of information gathering across multiple sources. Their proposed language OEM assumes queries that explicitly list the source identifiers of the database from which the data is to be taken.
Reference: [RLN97] <author> E. A. Rundensteiner, A. J. Lee, and A. </author> <title> Nica. On Preserving Views in Evolving Environments. </title> <booktitle> In Proceedings of 4th Int. Workshop on Knowledge Representation Meets Databases (KRDB'97): Intelligent Access to Heterogeneous Information, pages 13.1-13.11, </booktitle> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: Views in such environments introduce new challenges to the database community [Wid95]. In our prior work <ref> [RLN97, LNR97a] </ref>, we have identified view evolution caused by capability changes of one or several of the underlying ISs as a critical new problem faced by these applications. The problem is that current view technology is insufficient for supporting flexible view definitions. <p> In our prior work, we have proposed a novel approach to solve this view inflexibility problem <ref> [RLN97, LNR97b, NLR97] </ref>. Namely, we have designed a framework for view adaptation in these evolving environments, called EVE (Evolvable View Environment), which supports to "preserve as much as possible" of the view instead of completely disabling it with each IS change. <p> In <ref> [RLN97] </ref>, we establish a taxonomy of view adaptation problems that identifies alternate dimensions of the problem space, and hence serves as a framework for characterizing and hence distinguishing our view synchronization problem from other (previously studied) view adaptation problems. <p> In EVE, instead, we now assume that precise (SQL) queries are used to define views (instead of loosely-specified ones), and thus query refinement in the sense of DIIM is not needed. 9 Conclusion Our work is the first to study the problem of view evolution in a dynamic environment <ref> [RLN97, LNR97a, LNR97b, NLR98, LKNR98, NR98b] </ref>. In our EVE system, views survive even when the underlying ISs upon which they are defined change their capabilities.
Reference: [SDJL96] <author> D. Srivastava, S. Dar, H.V. Jagadish, and A.Y. Levy. </author> <title> Answering Queries with Aggregation Using Views. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <pages> pages 318-329, </pages> <year> 1996. </year>
Reference-contexts: Unlike the approach proposed for query rewriting using materialized views <ref> [LRU96, SDJL96, CKP95, LMS95] </ref> our proposed techniques address new issues: (1) finding view rewritings that are not necessarily equivalent to the original view definition (VE 2 f; ; g), (2) using semantic containment information expressed using PC-constraints for proving that candidate rewritings satisfy the view-extent evolution parameter, and (3) preserving at <p> None of the two projects address the particular problem of evolution under capability changes of participating external information sources. 37 Research on query reformulation using materialized views Levy et al. <ref> [LRU96, LMS95, SDJL96] </ref> considers the problem of replacing an original query with a new expression containing materialized view definitions such that the new query is equivalent to the old one.
Reference: [Ull89] <author> J.D. Ullman. </author> <title> Principle of Database and Knowledge-Base Systems. </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: F.PName) (CD = f alse; CR = true) AND (F.Dest = 'Asia') AND (P.StartDate = F.Date) AND (P.Location = 'Asia') (29) 7.3 Mapping the MKB to a Hypergraph Representation Generally, a database schema can be represented as a hypergraph whose nodes are the attributes and whose hyperedges are the relations <ref> [Ull89, GL94] </ref>. Inspired by this representation, we represent the set of attributes and the set of relations described in MKB by a hypergraph that is extended with extra nodes corresponding to the join constraints in the MKB and extra edges corresponding to the function-of constraints.
Reference: [Wid95] <author> J. Widom. </author> <title> Research Problems in Data Warehousing. </title> <booktitle> In Proceedings of International Conference on Information and Knowledge Management, </booktitle> <pages> pages 25-30, </pages> <month> November </month> <year> 1995. </year> <month> 40 </month>
Reference-contexts: We would also like to thank our industrial sponsors, in particular IBM for the IBM Partnership Award and our collaborators at IBM Toronto for their support. (ISs) such as the WWW <ref> [Wid95] </ref>. The ISs in such environments are usually distributed, have distinct schemas, support different query languages, update not only their content but also their capabilities 1 , and even join or leave the environment frequently. <p> In order to provide easy access to information in such environments, relevant data is often retrieved from several sources, integrated as necessary, and then materialized at the user site as what's called a view. Views in such environments introduce new challenges to the database community <ref> [Wid95] </ref>. In our prior work [RLN97, LNR97a], we have identified view evolution caused by capability changes of one or several of the underlying ISs as a critical new problem faced by these applications. The problem is that current view technology is insufficient for supporting flexible view definitions.
References-found: 23

