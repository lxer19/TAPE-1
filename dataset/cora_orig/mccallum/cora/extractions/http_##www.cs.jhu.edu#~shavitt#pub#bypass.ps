URL: http://www.cs.jhu.edu/~shavitt/pub/bypass.ps
Refering-URL: http://www.cs.jhu.edu/~shavitt/pub.html
Root-URL: http://www.cs.jhu.edu
Title: A Fast Bypass Algorithm for High-Speed Networks  
Author: Israel Cidon Raphael Rom Yuval Shavitt 
Address: Mountain View, CA 94043-1100  Israel  
Affiliation: Sun Microsystems  Department of Electrical Engineering Technion, Haifa,  
Abstract: In this work we suggest an algorithm that increases the reservation success probability for bursty traffic in high speed networks by adding flexibility to the construction of the routes. The algorithm is simple enough to be implemented by cheap hardware. It causes no additional delay to packets that use the original route, and a very small delay to the packets that are rerouted. In addition, the presented algorithm has a minimal communication overhead due to the local nature of its work. Two high-speed network models are considered: source routing and ATM. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jean-Yves Le Boudec. </author> <title> The asynchronous transfer mode: a tutorial. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 24:279 - 309, </volume> <year> 1992. </year>
Reference-contexts: The VC and VP identifiers are written in the cell header and possibly swapped in every switch. Tables in the switches are used to determine the route based on local identifiers <ref> [1] </ref>. For our purpose it is important to note that the routing information is distributed in the switches along the path the cells traverse. Modifying a cell's route on the fly requires changing the routing information in several switches an operation that is neither simple nor fast [9].
Reference: [2] <author> Pierre E. Boyer and Didier P. Trachier. </author> <title> A reservation principle with applications to the ATM traffic control. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 24:321 - 334, </volume> <year> 1992. </year>
Reference-contexts: Here, the overhead of reservation is not as bothersome so traditional reservation algorithms can be used. Note, however, that this approach is valid only if there is enough storage at the source to hold the burst data until positive acknowledgment is received for the reservation signaling <ref> [2, 6] </ref>. Thus, such an approach would be useful for bursty data applications such as FTP in which the data can be easily kept in the source. <p> As already stated, bursty VCs are brought up with no bandwidth reservation. We shall concentrate here on applications that use fast reservation algorithms whenever there is a burst to transmit <ref> [2] </ref>, on-the-fly reservation [12] is shortly discussed in section 5. In ATM networks, fast reservation algorithms use mono-cell messages that traverse the VC route, reserve bandwidth in one direction, and acknowledge/reject a reservation request in the reverse direction.
Reference: [3] <author> Robert G. Busacker and Thomas L. Saaty. </author> <title> Finite Graphs and Networks: an introduction with applications. </title> <publisher> McGraw-Hill, </publisher> <year> 1965. </year>
Reference-contexts: This may lead us to implement the algorithm with the one bypass option which is the easiest and most efficient implementation. Triangulated Graphs A planar graph where every region is bounded by a circuit of three edges is said to be triangulated <ref> [3] </ref>. Consider, first, a lattice of triangles (figure 5). A shortest path route in a triangular lattice has no 60 ffi turns. The probability that a two-hop segment is congested is 1 p 2 . We look, first, at networks that employ source routing.
Reference: [4] <author> I. Cidon, I. Gopal, P. M. Gopal, R. Guerin, J. Jannielo, and M. Kaplan. </author> <title> The plaNET/Orbit high speed network. </title> <type> Technical Report RC-18270, </type> <institution> IBM, T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: A typical switch is constructed as an interconnection of link processors (LPs) each supporting a single link <ref> [5, 4] </ref>. The routing of packets that arrive at the input links is done directly by these LPs. Only packets that require more complex processing (e.g., control packets) are forwarded to a more sophisticated control unit. Naturally, the suggested algorithm is designed to be performed by the LPs.
Reference: [5] <author> Israel Cidon and Inder Gopal. PARIS: </author> <title> an approach to integrated high-speed private networks. </title> <journal> International Journal of Digital and Analog Cabled Systems, </journal> <volume> 1(2):77 - 86, </volume> <month> April-June </month> <year> 1988. </year>
Reference-contexts: The suggested bypass algorithm is simple enough to be implemented by cheap hardware. Before proceeding, we describe two routing approaches for high speed networks with which our algorithm can be used: source routing and ATM. Source routing, or Automatic Network Routing (ANR) <ref> [5] </ref>, is a routing method where each packet carries in it the entire route it should traverse. <p> the header as a list of port-IDs (or link-IDs), and each node along the packet route strips the ID it uses from the head of the list (in practice, there are other methods for handling the source route that only differ in technicalities and can be integrated with our algorithm <ref> [5] </ref>). In networks that employ source routing, the route for the session is computed at the source node using data that is distributed by a topology update algorithm. It is therefore plausible that routes thus computed are not optimal (and may not even be feasible). <p> A typical switch is constructed as an interconnection of link processors (LPs) each supporting a single link <ref> [5, 4] </ref>. The routing of packets that arrive at the input links is done directly by these LPs. Only packets that require more complex processing (e.g., control packets) are forwarded to a more sophisticated control unit. Naturally, the suggested algorithm is designed to be performed by the LPs.
Reference: [6] <author> Israel Cidon, Inder Gopal, and Adrian Segall. </author> <title> Fast connection establishment in high speed networks. </title> <booktitle> In ACM SIGCOM'90, </booktitle> <pages> pages 287 - 296, </pages> <year> 1990. </year>
Reference-contexts: Here, the overhead of reservation is not as bothersome so traditional reservation algorithms can be used. Note, however, that this approach is valid only if there is enough storage at the source to hold the burst data until positive acknowledgment is received for the reservation signaling <ref> [2, 6] </ref>. Thus, such an approach would be useful for bursty data applications such as FTP in which the data can be easily kept in the source.
Reference: [7] <author> Israel Cidon, Raphael Rom, and Yuval Shavitt. </author> <title> Fast bypass algorithms for high-speed networks. </title> <type> Technical Report EE PUB No. 924, </type> <institution> Technion - Israel Institute of Technology, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: It is clear from these graphs (and others omitted due to space restrictions) that the effectiveness of the bypass algorithm grows with the length of the VP. Note also that even when only one bypass is allowed the improvement is significant. In fact, it is shown in <ref> [7] </ref> that the contribution of the first bypass is the most significant while the improvement of the third bypass and on is negligible. This may lead us to implement the algorithm with the one bypass option which is the easiest and most efficient implementation. <p> Another possibility is to switch the route only after an end-of-burst is detected. Further studies are needed to investigate the implementation of the last two methods. One of the important merits of our algorithm is the ability to implement it with simple hardware without adversely effecting performance. In <ref> [7] </ref> we describe a possible implementation of our algorithm for a source routing based network. This implementation does not add delay to packets that are not deflected, and adds only a small delay (a few byte transmission time) to the ones that are deflected.
Reference: [8] <author> Reuven Cohen, Baiju Patel, Frank Schaffa, and Marc Willebeek-LeMail. </author> <title> The sink tree paradigm: Connectionless traffic support on ATM LANs. </title> <booktitle> In INFOCOM'94, </booktitle> <pages> pages 821 - 828, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Other uses of tree shaped VPs can be found in <ref> [8] </ref>. 4 Analysis In this section we compute the improvement in the reservation success probability when our algorithm is used in several networks with regular structure.
Reference: [9] <author> Reuven Cohen and Adrian Segall. </author> <title> Connection management and rerouting in ATM networks. </title> <booktitle> In INFOCOM'94, </booktitle> <pages> pages 184 - 191, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: For our purpose it is important to note that the routing information is distributed in the switches along the path the cells traverse. Modifying a cell's route on the fly requires changing the routing information in several switches an operation that is neither simple nor fast <ref> [9] </ref>. In particular, buffering requirements for the cells while a new route is created makes on-the-fly rerouting look impractical. The algorithm we suggest in this work increases the probability of a successful short burst transmission or the probability of a successful reservation for longer bursts by using local route-deflections. <p> In ATM networks the routing information is not carried in the cells but is scattered in the switches along the path it traverses. Changing the routing information in several switches to create a deflection route is therefore neither simple nor fast <ref> [9] </ref>. In particular, buffering requirements for storing the cells while the new route is created make on-the-fly deflection look impractical. We suggest, instead, to preprepare for congestion when a VP is constructed.
Reference: [10] <author> Daniel H. Greene and Donald E. Knuth. </author> <title> Mathematics for the Analysis of Algorithms. </title> <type> Birkhauser, </type> <note> second edition, </note> <year> 1982. </year>
Reference-contexts: If we do not limit the number of bypass the success probability along an h-hop route, S (h), is given by the recurrence S (0) = 1 (2) S (h) = pS (h 1) + (1 p)p 2 S (h 2) (4) The solution of this recurrence (see <ref> [10] </ref>) gives the ex pression for S (h), h 2 S (h) = 2 1 + p p 2 + 2 1 p p 2 (5) succeed in reserving bandwidth along its route as a function of the probability to find enough bandwidth success probability of bursts as a function of
Reference: [11] <author> Adrian Segall. </author> <title> Distributed network protocols. </title> <journal> IEEE Transaction on Information Theory, </journal> <volume> IT-29(1):23 - 35, </volume> <month> January </month> <year> 1983. </year>
Reference-contexts: Each entry contains the node-ID and a list of all the local segments that identify this node, i.e., its local segment group. HostT able can be initialized either when the network is started or can be built by a topology update algorithm <ref> [11] </ref>. 2.1 A Detailed Description Two tables are maintained and used by the algorithm: RoutingT able has an entry for each local segment that comprises four fields: 1 Node IDs can be global or locally assigned by higher level algorithms. * The id of the node at the end of the
Reference: [12] <author> Jonathan S. Turner. </author> <title> Managing bandwidth in ATM networks with burtsy traffic. </title> <journal> IEEE Network, </journal> <volume> 6(5):50 - 58, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: The best method for this type of bursts is to make an initial zero-bandwidth reservation and subsequently to send the data without reservation and use time-outs (possibly at a higher layer) to detect failures. Turner <ref> [12] </ref> suggested an on-the-fly reservation scheme. In his scheme a burst that arrives to an ATM switch and finds sufficient bandwidth for its cells, reserves the required bandwidth (to prevent new bursts from disturbing this one) and proceeds to the next switch towards its destination. <p> As already stated, bursty VCs are brought up with no bandwidth reservation. We shall concentrate here on applications that use fast reservation algorithms whenever there is a burst to transmit [2], on-the-fly reservation <ref> [12] </ref> is shortly discussed in section 5. In ATM networks, fast reservation algorithms use mono-cell messages that traverse the VC route, reserve bandwidth in one direction, and acknowledge/reject a reservation request in the reverse direction.
References-found: 12

