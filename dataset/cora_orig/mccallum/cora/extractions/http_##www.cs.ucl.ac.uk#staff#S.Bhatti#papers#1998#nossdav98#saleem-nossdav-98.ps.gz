URL: http://www.cs.ucl.ac.uk/staff/S.Bhatti/papers/1998/nossdav98/saleem-nossdav-98.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/staff/S.Bhatti/publications.html
Root-URL: http://www.cs.ucl.ac.uk
Email: S.Bhatti@cs.ucl.ac.uk and G.Knight@cs.ucl.ac.uk  
Title: QoS Assurance vs. Dynamic Adaptability for Applications  
Author: Saleem N. Bhatti and Graham Knight 
Address: College London, Gower St., London WC1E 6BT, UK  
Affiliation: Computer Science Department, University  
Abstract: Enabling adaptability to network QoS (quality of service) is seen as a key feature for future applications. One way to approach adaptability is to build it into the network and allow applications to signal their requirements to the network. This means that resource reservation mechanisms must be available end-to-end, which is not always the case, especially on the Internet. Also, user preferences affect how the application is used. So the application must be dynamically adaptive, taking into account the applications capabilities, the available network QoS and the user preferences. We suggest that it is possible to build practicable QoS summaries that capture all these inputs and allow dynamic adaptability. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Campbell, C. Aurrecoechea, L. Hauw, </author> <title> A Review of QoS Architectures, </title> <booktitle> Proc. of 4th IFIP International Workshop on Quality of Service (IWQS'96), </booktitle> <address> Paris, France, </address> <month> Mar </month> <year> 1996. </year>
Reference-contexts: QoS assurance In <ref> [1] </ref>, there is an excellent description of the elements of a general QoS architecture for assuring QoS. With QoS assurance mechanisms, applications have to specify what they want the network to do for them, and the network tries to honour this request. <p> With QoS assurance mechanisms, applications have to specify what they want the network to do for them, and the network tries to honour this request. The network itself may provide adaptability mechanisms [2] to cope with fluctuating QoS or heterogeneity due to network architecture. <ref> [1] </ref> suggests that (among other things) the application should be in control of the following information that passes to the network: QoS service-level (e.g. guaranteed-service, controlled-load service) and QoS management policy (how adaptation should take place when there are QoS fluctuations). <p> For assuring QoS, the integration principle says that we need QoS to be configurable, predictable and maintainable over all architectural layers <ref> [1] </ref>. With this in mind, the principle of integration does not have to apply so strongly for adaptable applications. <p> However, in our consideration of dynamic adaptability, the use of the application typically requires interaction from the user in order to determine its adaptation requirements, and these may not be known until after the application is running. In <ref> [1] </ref>, the QoS management policy: captures the degree of QoS adaptation (continuous or discrete) that the flow can tolerate and the scaling actions to be taken in the event of violations to the contracted QoS [9]. <p> In [14], we use a mechanism which we call the QoSSpace that produces a QoSReport summarising the compatibility between the network QoS and an applications flowstates. The QoSReport contains a state compatibility value (SCV) for each flowstate. The SCV is a number in the range <ref> [0, 1] </ref> indicating the instantaneous assessment of compatibility between a flowstate and the network, with 0 indicating that the QoSSpace has no confidence that the flowstate cannot be supported by the network, and 1 indicating that the QoSSpace has high confidence that the flowstate can be supported.
Reference: [2] <author> A. T. Campbell, Mobiware: </author> <title> QoS-Aware Middleware for Mobile Multimedia Networking, </title> <booktitle> Proc. IFIP 7 th International Conference on High Performance Networking, </booktitle> <address> White Plains, New York, </address> <month> Apr </month> <year> 1997. </year>
Reference-contexts: With QoS assurance mechanisms, applications have to specify what they want the network to do for them, and the network tries to honour this request. The network itself may provide adaptability mechanisms <ref> [2] </ref> to cope with fluctuating QoS or heterogeneity due to network architecture. [1] suggests that (among other things) the application should be in control of the following information that passes to the network: QoS service-level (e.g. guaranteed-service, controlled-load service) and QoS management policy (how adaptation should take place when there are
Reference: [3] <author> R. Braden, Ed., L. Zhang, S. Berson, S. Herzog, S. Jamin, </author> <title> Resource ReSerVation Protocol (RSVP) Version 1 Functional Specification, </title> <address> RFC2205, </address> <month> Sep </month> <year> 1997. </year>
Reference-contexts: QoS assurance mechanisms are based around the use of resource reservation and QoS renegotiation to achieve the desired QoS for the application. Mechanisms such as RSVP <ref> [3] </ref> are designed to provide resource reservations in the Internet. However, RSVP can fail [4], and adaptability mechanisms in the network become impracticable and increasingly difficult to support in ad hoc or mobile network architectures.
Reference: [4] <author> L. Wolf, C. Gridwodz, R. Steinmetz, </author> <title> Multimedia Communication, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 85 no. 12, pp-1915-1933, </volume> <month> Dec </month> <year> 1997. </year>
Reference-contexts: QoS assurance mechanisms are based around the use of resource reservation and QoS renegotiation to achieve the desired QoS for the application. Mechanisms such as RSVP [3] are designed to provide resource reservations in the Internet. However, RSVP can fail <ref> [4] </ref>, and adaptability mechanisms in the network become impracticable and increasingly difficult to support in ad hoc or mobile network architectures. Additionally, where resource reservation and QoS renegotiation are used, they should be available end-to-end for maximum utility.
Reference: [5] <author> L. Delgrossi, C. Halstrick, D. Hehmann, R. G. Herrtwich, O. Krone, J. Sandvoss, C. Vogt, </author> <title> Media scaling for Audiovisual Communication with the Heidelberg Transport System, </title> <booktitle> Proc. ACM Multimedia, </booktitle> <address> pp99-104, </address> <month> Jun </month> <year> 1993. </year>
Reference-contexts: This is of particular importance for real-time media flows or flows that are sensitive to QoS fluctuations. Much of the attention for this work has focused on mechanisms that allow adaptability of the media flow construction (which we call the flowstate) by scaling (e.g. <ref> [5] </ref>), filtering (e.g. [6]) or encoding techniques (e.g. [7] [8]). An area that has received little attention, however, is how applications can automatically select the correct flowstate to match the available network QoS as detected during operation.
Reference: [6] <author> N. Yeadon, F. Garcia, D. Hutchison, D. Shepherd, </author> <title> Filters: QoS Support Mechanisms for Multipeer Communications, </title> <journal> IEEE Journal of Selected Areas in Communication, </journal> <volume> vol. 14, no. 7, pp1245-1262, </volume> <month> Sep </month> <year> 1996. </year>
Reference-contexts: This is of particular importance for real-time media flows or flows that are sensitive to QoS fluctuations. Much of the attention for this work has focused on mechanisms that allow adaptability of the media flow construction (which we call the flowstate) by scaling (e.g. [5]), filtering (e.g. <ref> [6] </ref>) or encoding techniques (e.g. [7] [8]). An area that has received little attention, however, is how applications can automatically select the correct flowstate to match the available network QoS as detected during operation.
Reference: [7] <author> V. Hardman, M. A. Sasse, M. Handley & A. Watson, </author> <title> Reliable Audio for Use over the Internet, </title> <booktitle> Proc. INET95, pp171-178, Hawaii, </booktitle> <address> USA, </address> <month> 27-30 Jun </month> <year> 1995. </year>
Reference-contexts: Much of the attention for this work has focused on mechanisms that allow adaptability of the media flow construction (which we call the flowstate) by scaling (e.g. [5]), filtering (e.g. [6]) or encoding techniques (e.g. <ref> [7] </ref> [8]). An area that has received little attention, however, is how applications can automatically select the correct flowstate to match the available network QoS as detected during operation. The application must currently rely on the user to set the correct preferences to allow operation in a particular QoS regime.
Reference: [8] <author> E. Amir, S. McCanne, M. Vetterli, </author> <title> A Layered DCT Coder for Internet Video, </title> <booktitle> Proc. </booktitle> <address> ICIP96, Lausanne, Switzerland, </address> <month> Sep </month> <year> 1996. </year>
Reference-contexts: Much of the attention for this work has focused on mechanisms that allow adaptability of the media flow construction (which we call the flowstate) by scaling (e.g. [5]), filtering (e.g. [6]) or encoding techniques (e.g. [7] <ref> [8] </ref>). An area that has received little attention, however, is how applications can automatically select the correct flowstate to match the available network QoS as detected during operation. The application must currently rely on the user to set the correct preferences to allow operation in a particular QoS regime.
Reference: [9] <author> A. Campbell, G. Coluson, D. Hutchison, </author> <title> Supporting Adaptive Flows in Quality of Service Architecture, </title> <journal> ACM Multimedia Systems Journal, </journal> <year> 1996, </year> <month> May </month> <year> 1996. </year>
Reference-contexts: that a particular service-level is not available at a given time at a given point in the network. 3. new, additional service-level definitions may be introduced that are more suitable (in terms functionality or cost) for use in a given situation, e.g. there are two recent descriptions of adaptive service-level <ref> [9] </ref> [10], and differentiated services may be set up that are do main/administration specific [11]. <p> In [1], the QoS management policy: captures the degree of QoS adaptation (continuous or discrete) that the flow can tolerate and the scaling actions to be taken in the event of violations to the contracted QoS <ref> [9] </ref>. We chose to make a separation between what the flow can tolerate and the scaling actions to be taken. We argue that the former is a property of the media and the latter is an application specific requirement that includes interaction with the user.
Reference: [10] <author> S. Lu, K.-W. Lee, V. Bharghavan, </author> <title> Adaptive Service in Mobile Computing Environments, in Building QoS into Distributed Systems, </title> <editor> (A. Campbell, K. Nahrstedt, Eds), pp25-36, </editor> <publisher> [Chapman & Hall] 1997 </publisher>
Reference-contexts: a particular service-level is not available at a given time at a given point in the network. 3. new, additional service-level definitions may be introduced that are more suitable (in terms functionality or cost) for use in a given situation, e.g. there are two recent descriptions of adaptive service-level [9] <ref> [10] </ref>, and differentiated services may be set up that are do main/administration specific [11].
Reference: [11] <author> K. Nichols, S. Blake (Eds), </author> <title> Differentiated Services Operational Model and Definitions, </title> <booktitle> IETF DIFFSERV WG, </booktitle> <address> work-in-progress, </address> <month> Feb </month> <year> 1998. </year>
Reference-contexts: point in the network. 3. new, additional service-level definitions may be introduced that are more suitable (in terms functionality or cost) for use in a given situation, e.g. there are two recent descriptions of adaptive service-level [9] [10], and differentiated services may be set up that are do main/administration specific <ref> [11] </ref>. Additionally, if cost-based feedback is available from the network, then cost could be treated as a QoS parameter although not related to the performance of the flow it acts as a defining constraint in the same way as, say, defining minimum data rate or maximum jitter for a flow.
Reference: [12] <author> S. Shenkar, D. Clark, D. Estrin, S. Herzog, </author> <title> Pricing in Computer Network: Reshaping the Research Agenda, </title> <journal> ACM Computer Communications Review, </journal> <volume> vol. 26. No. 2, pp19-43, </volume> <month> Apr </month> <year> 1996 </year>
Reference-contexts: The value of making the cost explicit as a QoS parameter is that it highlights the importance of cost as a feedback control mechanism in future services <ref> [12] </ref>. QoS management policy will be subject to user prefer-ences and application specific behaviour. Applications may find it useful to have a specification of the QoS management policy before the application starts operating.
Reference: [13] <author> H. Schulzrinne, S. Casner, R. Frederick, V. Jacobson, RTP: </author> <title> A Transport Protocol for Real-Time Applications, </title> <address> RFC1889, </address> <month> Jan </month> <year> 1996. </year>
Reference-contexts: Real-time, QoS sensi tive Internet applications may use mechanisms such as RTCP <ref> [13] </ref> (or application specific mechanisms) to distribute such QoS information. In order to select a flow-state that matches this information, the application must assess the compatibility between the network QoS, the flow-state requirements and the user preferences.
Reference: [14] <author> S. N. Bhatti, G. Knight, </author> <title> Notes on a QoS information model for making adaptation decisions, </title> <note> to appear, </note> <institution> HIPPARCH98, UCL, </institution> <address> London, UK, </address> <month> 15-16 Jun </month> <year> 1998. </year>
Reference-contexts: In order to select a flow-state that matches this information, the application must assess the compatibility between the network QoS, the flow-state requirements and the user preferences. In <ref> [14] </ref>, we use a mechanism which we call the QoSSpace that produces a QoSReport summarising the compatibility between the network QoS and an applications flowstates. The QoSReport contains a state compatibility value (SCV) for each flowstate. <p> Essentially, the aim of our model is not that same as that for a traditional control system; instead of attempting to maintain a set-point, our model seeks to allow the application to select a flowstate. (Our work in <ref> [14] </ref> is ongoing.) 6. Conclusions The Internet applications of the future will need to be adaptive in order to cope with network heterogeneity, differing QoS from the service provider, fluctuating QoS during operation, and differing user preferences.
References-found: 14

