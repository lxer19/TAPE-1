URL: http://www-cad.eecs.berkeley.edu/research/hsis/papers/tutorial/pif.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/research/hsis/index.html
Root-URL: http://www.cs.berkeley.edu
Title: PIF: a Property Interchange Format for verification using HSIS  
Date: 1 July 1994  
Affiliation: Berkeley CAD Group  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Aziz, F. Balarin, S.-T. Cheng, R. Hojati, T. Kam, S. C. Krishnan, R. K. Ranjan, T. R. Shiple, V. Singhal, S. Tasiran, H.-Y. Wang, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. HSIS: </author> <title> A BDD-Based Environment for Formal Verification. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 454-459, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction This document describes the Property Interchange Format (PIF) for use in HSIS verification (for a detailed description of the HSIS system, refer to <ref> [5, 1] </ref>). This format is used to describe fairness constraints on the system specification (which has already been read in using the read blif mv command in HSIS), and automata properties to be proved of this system. <p> If properties are to be specified only in CTL, then the PIF file may only contain fairness constraints on the system. CTL with fairness constraints is called "fair CTL", which is strictly more expressive than CTL, as described in the HSIS paper <ref> [1] </ref>. 4.1 Comments Whenever the PIF parser encounters a % character in the PIF file, it ignores it and all other characters from the % to the end of the line.
Reference: [2] <author> R. K. Brayton, M. Chiodo, R. Hojati, T. Kam, K. Kodandapani, R. P. Kurshan, S. Malik, A. L. Sangiovanni-Vincentelli, E. M. Sentovich, T. Shiple, K. J. Singh, and H.-Y. Wang. BLIF-MV: </author> <title> An Interchange Format for Design Verification and Synthesis. </title> <type> Technical Report UCB/ERL M91/97, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Notice that if the current BLIF-MV file is derived from a Verilog file, process refers to an instantiation of a module in the hierarchy. For a detailed description of the BLIF-MV system hierarchy inside HSIS refer to <ref> [2, 4] </ref>. Definition 3 A state of a process is a unique assignment of values to all of the latches 1 for the process.
Reference: [3] <author> S.-T. Cheng, G. York, and R. K. Brayton. VL2MV: </author> <note> A Compiler from Verilog to BLIF-MV, October 1993. Supplied documentation. </note>
Reference-contexts: The transition structure for a property automaton is described using a BLIF-MV file. This BLIF-MV file can be obtained from a Verilog source by using the vl2mv translator (see <ref> [3, 5] </ref>).
Reference: [4] <author> Berkeley CAD group. </author> <title> Revisiting BLIF-MV, An Intermediate Format for Verification and Synthesis of Hierarchical Networks of FSMs, 1993. Supplied documentation. </title>
Reference-contexts: Notice that if the current BLIF-MV file is derived from a Verilog file, process refers to an instantiation of a module in the hierarchy. For a detailed description of the BLIF-MV system hierarchy inside HSIS refer to <ref> [2, 4] </ref>. Definition 3 A state of a process is a unique assignment of values to all of the latches 1 for the process.
Reference: [5] <institution> Berkeley CAD group. HSIS, </institution> <month> June </month> <year> 1994. </year> <title> Supplied documentation. </title>
Reference-contexts: 1 Introduction This document describes the Property Interchange Format (PIF) for use in HSIS verification (for a detailed description of the HSIS system, refer to <ref> [5, 1] </ref>). This format is used to describe fairness constraints on the system specification (which has already been read in using the read blif mv command in HSIS), and automata properties to be proved of this system. <p> The transition structure for a property automaton is described using a BLIF-MV file. This BLIF-MV file can be obtained from a Verilog source by using the vl2mv translator (see <ref> [3, 5] </ref>). <p> Though we intend to specify these CTL specified properties in the PIF format, in this release of HSIS, we do not support this. Currently, the way to invoke model checking on CTL formulae is through the HSIS command interface <ref> [5] </ref>: .mc &lt;CTL formula filename&gt; where &lt;CTL formula filename&gt; is a file containing possibly multiple CTL formulae. 4.4 Including PIF descriptions inside current PIF file Since each reading of a new PIF file destroys the effects of the previously read in PIF files (Section 3), it might be convenient to store <p> following construct: .include &lt;file name&gt; This construct can be used to include fairness constraints on a set of instances using the .instance or .model constructs, or to include a set of properties using the .properties construct. 5 Example For an example of a PIF file see the detailed example in <ref> [5] </ref>, which uses a PIF format to describe fairness constraints on the system and property automata for the ping pong example. One PIF file from that documents is file prop2.pif which in turn includes file process-fairness.pif. <p> One PIF file from that documents is file prop2.pif which in turn includes file process-fairness.pif. These files refer to file prop2.mv which has been generated from prop2.v using vl2mv (see <ref> [5] </ref>). file prop2.pif ------------------------- .include process-fairness.pif .properties # property 2 # Begin instantiation of automaton with name ioh. 10 .automaton ioh # # include blif-mv file obtained from Verilog description .blifmv prop2.mv # # make connections to the process ping_pong .connections (player_action = ping_pong.action_A) # # begin fairness constraints on this
Reference: [6] <author> Z. Har'El and R. P. Kurshan. </author> <title> Software for Analytical Development of Communication Protocols. </title> <journal> AT&T Technical Journal, </journal> <pages> pages 45-59, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Also note that multiple constraints of each type can be defined. For example, multiple .subsets constraints correspond to a set of cysets of Kurshan <ref> [6] </ref>. 3 For a beginning user, we suggest the use of only negative fairness constraints for the system. Also, many constraints can be specified without using CFC's (the 4th type of negative fairness constraint).
Reference: [7] <author> R. Hojati, V. Singhal, and R. K. Brayton. </author> <title> Edge-Streett/Edge-Rabin Automata Environment for Formal Verification Using Language Containment. </title> <type> Technical Report UCB/ERL M94/12, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: If an instance matches multiple descriptions (either by .instance construct or by .model construct), then only the fairness constraints described by the last match are considered. The previous constraints are ignored. Two types of fairness constraints| negative and positive| can be associated with any process <ref> [7] </ref>. Subsections 4.2.2 and 4.2.2 discuss these. Before that, in the next subsection, we define a way of specifying sets of states for these fairness constraints. 4.2.1 Defining a set of states The .state construct is used to specify a set of states for the current process. <p> In PIF, we allow the user a large set of options to describe the acceptance conditions| all of these can be handled with ease in the HSIS language containment environment <ref> [7] </ref>. The description of the automaton must be encompassed by the following two declarations: .automaton &lt;property name&gt; . . . .endautomaton The &lt;property name&gt; is the name used to refer to this property in the language containment routines of HSIS.
Reference: [8] <author> W. Thomas. </author> <title> Automata on Infinite Objects. </title> <editor> In J. van Leeuwen, editor, </editor> <title> Formal Models and Semantics, </title> <booktitle> volume B of Handbook of Theoretical Computer Science, </booktitle> <pages> pages 133-191. </pages> <publisher> Elsevier Science, </publisher> <year> 1990. </year> <month> 12 </month>
Reference-contexts: For each run, its infinitary set is the set of states which are visited infinitely often. There is a large class of specifications (systems or properties) which cannot be expressed just by providing a transition structure and allowing all runs on the transition structures to be acceptable <ref> [8] </ref>. Specifying additional constraints (fairness constraints) on the transition structure alleviates this problem. When properties are expressed as automata, we need additional constraints on the transition structure to increase the expressiveness of the automata. <p> The syntax is identical to that for the negative canonical fairness constraint in Section 4.2.2. Note, however, that the interpretation of the specification is different. Multiple positive canonical fairness constraints can be used to specify fairness constraints of the Streett type <ref> [8] </ref>, which are known to be exponentially more compact than any other type of popular fairness constraint. 4.3 Property description in PIF Besides specifying fairness constraints in the system, the PIF file is also used to specify the set of automata properties that one intends to prove of the system.
References-found: 8

