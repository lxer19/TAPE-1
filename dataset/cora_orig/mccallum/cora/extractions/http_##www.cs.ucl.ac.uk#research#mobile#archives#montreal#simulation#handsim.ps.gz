URL: http://www.cs.ucl.ac.uk/research/mobile/archives/montreal/simulation/handsim.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/research/mobile/archives/montreal/simulation/
Root-URL: http://www.cs.ucl.ac.uk
Email: E-mail: lecuyer@iro.umontreal.ca  
Title: CHAPTER 4 RANDOM NUMBER GENERATION 1  
Author: Pierre L'Ecuyer 
Note: Version:  
Date: 4.1 INTRODUCTION  August 14, 1996  
Address: Montreal 2  Montreal, C.P. 6128, Succ. Centre-Ville, Montreal, H3C 3J7, Canada.  
Affiliation: University of  2 Departement d'informatique et de recherche operationnelle, Universite de  
Abstract: Random numbers are the nuts and bolts of simulation. Typically, all the randomness required by the model is simulated by a so-called random number generator whose output is assumed to be a sequence of independent and identically distributed (i.i.d.) U(0; 1) random variables (that is, continuous random variables distributed uniformly over the interval (0; 1)). These random numbers are then transformed as needed to simulate random variables from different probability distributions, such as the normal, exponential, Poisson, Binomial, geometric, discrete uniform, and so on, as well as mul-tivariate distributions and more complicated random objects. In general, the validity of the transformation methods strongly depends on the i.i.d. U (0; 1) assumption. But this assumption is false, since the random number generators are actually simple deterministic programs trying to fool the user by producing a deterministic sequence that looks random. What could be the impact of this on the simulation results? Despite this problem, are there "safe" generators? What about the generators commonly available in system libraries and simulation packages? If they are not satisfactory, how can we build "better" ones? Which ones should be used and where is the code? These are some of the topics addressed in the present chapter. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W. Aiello, S. Rajagopalan, and R. Venkatesan, </author> <title> Design of practical and provably good random number generators. </title> <type> Manuscript (contact venkie@bellcore.com), </type> <year> 1996. </year>
Reference-contexts: One can identify s n with x n and the state space S is the set f0; : : : ; m 1g. To produce values in the interval <ref> [0; 1] </ref>, one can simply define the output function G by u n = G (x n ) = x n =m. When c = 0, this generator is called a multiplicative linear congruential generator (MLCG). The maximal period length for the LCG is m in general. <p> Structural analysis, on the other hand, studies the mathematical structure underlying the successsive values produced by the generator, most often over its entire period length. For example, vectors of t successive output values of a LCG can be viewed as points in the t-dimensional unit hypercube <ref> [0; 1] </ref> t . It turns out that all these points, over the entire period of the generator, form a regular lattice structure. As a result, all the points lie in a limited number of equidistant parallel hyperplanes, in each dimension t. <p> Then, one may ask to be uniformly spread over U t . For example, if U is a discretization of the unit interval <ref> [0; 1] </ref>, such as U = f0; 1=m; 2=m; : : : ; (m 1)=mg for some large integer m, and if the points of are evenly distributed over U t , then they are also (pretty much) evenly distributed over the unit hypercube [0; 1] t . <p> a discretization of the unit interval <ref> [0; 1] </ref>, such as U = f0; 1=m; 2=m; : : : ; (m 1)=mg for some large integer m, and if the points of are evenly distributed over U t , then they are also (pretty much) evenly distributed over the unit hypercube [0; 1] t . Example 3 Suppose U = f0; 1=100; 2=100; : : : ; 99=100g and that the period of the generator is ae = 10 4 . Here we have jU j = 100 and ae = jU j 2 . <p> In dimension 3, for instance, we can cover only 10 4 points out of 10 6 . We would like those 10 4 points that are covered to be very uniformly distributed over the unit cube <ref> [0; 1] </ref> 3 . An even distribution of over U t , in all dimensions t, will be our basis for discriminating among generators. <p> This captures both uniformity and independence: if u n = (u n ; : : : ; u n+t1 ) is generated according to the uniform distribution over <ref> [0; 1] </ref> t , then the components of u n are independent and uniformly distributed over [0; 1]. <p> This captures both uniformity and independence: if u n = (u n ; : : : ; u n+t1 ) is generated according to the uniform distribution over <ref> [0; 1] </ref> t , then the components of u n are independent and uniformly distributed over [0; 1]. This idea of looking at what happens when the seed is random, for a given finite sequence, is very similar to the "scanning ensemble" idea of Compagner [11, 12], only that we use the framework of probability theory instead. <p> Over small fractions of the period length, the available bounds on the discrepancy are more in accordance with the law of the iterated logarithm [90]. This is yet another important justification for never using more than a negligible fraction of the period. Suppose now that numbers are generated in <ref> [0; 1] </ref> with L fractional binary digits. This gives resolution 2 L , which means that all u n 's are multiples of 2 L . It then follows (see [92]) that D fl (t) N 2 L for all t 1 and N 1. <p> The output function can be defined simply by u n = G (s n ) = x n =m, which gives a value in <ref> [0; 1] </ref>, or by a more refined transformation if a better resolution than 1=m is required. The special case where k = 1 is the MLCG mentioned previously. <p> The two most widely known combination methods are: (i) Shu*ing one sequence with another or with itself; (ii) Adding two or more integer sequences modulo some integer m 0 , or adding sequences of real numbers in <ref> [0; 1] </ref> modulo 1, or adding binary fractions bitwise modulo 2. 4.3. LINEAR-TYPE METHODS 31 Shu*ing one LCG with another can be accomplished as follows. <p> EMPIRICAL STATISTICAL TESTING 45 Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See [55, 71, 5] for overviews and discussions. An interesting idea, pursued for instance in <ref> [1] </ref>, is to combine a slow but cryptographically strong generator with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step. The result is an interesting compromise between speed, size, and security. In [1], it is also suggested to use a block cipher encryption algorithm <p> An interesting idea, pursued for instance in <ref> [1] </ref>, is to combine a slow but cryptographically strong generator with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step. The result is an interesting compromise between speed, size, and security. In [1], it is also suggested to use a block cipher encryption algorithm for the slow generator. These authors actually use triple-DES (three passes over the well-known data encryption standard algorithm, with three different keys), combined with a linear hashing function defined by a matrix.
Reference: 2. <author> S. L. Anderson, </author> <title> Random number generators on vector supercomputers and other advanced architecture, </title> <journal> SIAM Review, </journal> <volume> 32 (1990), </volume> <pages> pp. 221-251. </pages>
Reference-contexts: For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 21, 85, 98] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada grant # OGP0110050 and FCAR-Quebec grant # 93-ER-1654. Thanks to Jerry Banks, Raymond Couture, Hans Leeb, and Thierry Moreau for their helpful comments.
Reference: 3. <author> A. C. Atkinson, </author> <title> Tests of pseudo-random numbers, </title> <journal> Applied Statistics, </journal> <volume> 29 (1980), </volume> <pages> pp. 164-171. </pages>
Reference-contexts: Consider for example an MLCG for which m is a power of two, a mod 8 = 5, and x 0 is odd. The t-dimensional points constructed from successive values produced by this generator form a subgrid of L t containing one-fourth of the points <ref> [46, 3] </ref>. For a LCG with m a power of two and c 6= 0, with full period length ae = m, the points all lie in a grid that is a shift of the lattice L t associated with the corresponding MLCG (with the same a amd m).
Reference: 4. <author> L. Blum, M. Blum, and M. Schub, </author> <title> A simple unpredictable pseudo-random number generator, </title> <journal> SIAM Journal on Computing, </journal> <volume> 15 (1986), </volume> <pages> pp. 364-383. </pages> <note> Preliminary version published in Proceedings of CRYPTO'82, 61-78. </note>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 55, 71] </ref> and other references given there). Are there efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not there exists such a family. But some generator families are conjectured to be polynomial-time perfect. <p> But some generator families are conjectured to be polynomial-time perfect. The one with apparently the best behavior so far is the BBS, introduced by Blum, Blum, and Shub <ref> [4] </ref>, explained in the next example. Example 2 The BBS generator of size k is defined as follows. <p> DESIRED PROPERTIES 9 is that with probability at least 1 e k* for some * &gt; 0, factoring m (that is, finding p or q, given m) cannot be done in polynomial time (in k). Under this conjecture, the BBS generator has been proved polynomial-time perfect <ref> [4, 113] </ref>. Now, a down-to-earth question is: how large should be k to be safe in practice? Also, how small should be K? Perhaps no one really knows. A k larger than a few thousands is probably pretty safe, but makes the generator too slow for general simulation use.
Reference: 5. <author> M. Boucher, </author> <title> La generation pseudo-aleatoire cryptographiquement securitaire et ses considerations pratiques, </title> <type> Master's thesis, </type> <institution> Departement d'I.R.O., Universite de Montreal, </institution> <year> 1994. </year>
Reference-contexts: An implementation based on fast modular multiplication is proposed by Moreau [89]. 4.5. EMPIRICAL STATISTICAL TESTING 45 Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See <ref> [55, 71, 5] </ref> for overviews and discussions. An interesting idea, pursued for instance in [1], is to combine a slow but cryptographically strong generator with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step.
Reference: 6. <editor> G. Brassard, </editor> <booktitle> Modern Cryptology ATutorial, vol. 325 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1988. </year> <month> 52 </month>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 55, 71] </ref> and other references given there). Are there efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not there exists such a family. But some generator families are conjectured to be polynomial-time perfect.
Reference: 7. <author> P. Bratley, B. L. Fox, and L. E. </author> <title> Schrage, A Guide to Simulation, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <note> second ed., </note> <year> 1987. </year>
Reference-contexts: Since simulations often consume several hours of cpu time, this could be very significant. The memory size used by a generator might also be important in general, especially since simulations often use several generators in parallel, for instance to maintain synchronization for variance reduction purposes (see Section 4.6 and <ref> [7, 56] </ref> for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques [7, 51, 56, 102]. <p> for variance reduction purposes (see Section 4.6 and [7, 56] for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques <ref> [7, 51, 56, 102] </ref>. Repeatability is a major advantage of pseudorandom sequences over sequences generated by physical devices. <p> For k = 1 and p = 2, an upper bound on the period length of the ith least significant bit of x n is max (1; 2 i2 ) <ref> [7] </ref>, and if a full cycle is split into 2 d equal segments, then all segments are identical except for their d most significant bits [19, 24]. <p> Then, for any positive integer x &lt; m, the 20 following instructions have the same effect as the assignment x := ax mod m, but with all intermediate (integer) results remaining strictly between m and m (see <ref> [7, 57, 96] </ref>): y := bx=qc; IF x &lt; 0 THEN x := x + m END. As an illustration, if m = 2 31 1 and a = 16807, then the generator satisfies the condition, since 16807 &lt; p m. <p> It is used in the GPSS/H simulation environment. The second multiplier, a = 16807, was originally proposed in [75], is suggested in many simulation books and papers (e.g., <ref> [7, 96, 103] </ref>) and appears in several software systems such as the SLAM II and SIMAN simulation programming languages, the IMSL statistical library, and in operating systems for the IBM and Macintosh computers. It satisfies the condition (4.5).
Reference: 8. <author> M. Brown and H. Solomon, </author> <title> On combining pseudorandom number generators, </title> <journal> Annals of Statistics, </journal> <volume> 1 (1979), </volume> <pages> pp. 691-695. </pages>
Reference-contexts: See [10, 53, 56, 58, 79] and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. Some authors (e.g., <ref> [8, 42, 79] </ref>) have also given theoretical results which (on the surface) appear to "prove" that the output of a combined generator is "more random" than (or at least "as random" as) the output of each of its components.
Reference: 9. <author> J. Chen and P. Whitlock, </author> <title> Implementation of a distributed pseudorandom number generator, in Monte Carlo and Quasi-Monte Carlo Methods in Scientific Computing, </title> <editor> H. Niederreiter and P. J.-S. Shiue, eds., </editor> <volume> no. </volume> <booktitle> 106 in Lecture Notes in Statistics, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 168-185. </pages>
Reference-contexts: For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 21, 85, 98] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada grant # OGP0110050 and FCAR-Quebec grant # 93-ER-1654. Thanks to Jerry Banks, Raymond Couture, Hans Leeb, and Thierry Moreau for their helpful comments.
Reference: 10. <author> B. J. Collings, </author> <title> Compound random number generators, </title> <journal> Journal of the American Statistical Association, </journal> <volume> 82 (1987), </volume> <pages> pp. 525-527. </pages>
Reference-contexts: See <ref> [10, 53, 56, 58, 79] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well.
Reference: 11. <author> A. Compagner, </author> <title> The hierarchy of correlations in random binary sequences, </title> <journal> Journal of Statistical Physics, </journal> <volume> 63 (1991), </volume> <pages> pp. 883-896. </pages> <month> 12. </month> , <title> Operational conditions for random number generation, </title> <journal> Physical Review E, </journal> <volume> 52 (1995), </volume> <pages> pp. 5634-5645. </pages>
Reference-contexts: This idea of looking at what happens when the seed is random, for a given finite sequence, is very similar to the "scanning ensemble" idea of Compagner <ref> [11, 12] </ref>, only that we use the framework of probability theory instead. The reader may have already noticed that under these requirements, will not look at all like a random set of points, because its distribution over U t is too even (or super-uniform, as some authors say [105]). <p> For specialized jump-ahead algorithms, see [21, 63]. Unfortunately, such simple recurrences lead to LFSR generators with bad structural 38 properties (see <ref> [11, 63, 88, 109] </ref> and other references there). But combining several recurrences of this type can give good generators.
Reference: 13. <author> R. Couture and P. L'Ecuyer, </author> <title> On the lattice structure of certain linear congru-ential sequences related to AWC/SWB generators, </title> <journal> Mathematics of Computation, </journal> <volume> 62 (1994), </volume> <pages> pp. 798-808. </pages> <month> 14. </month> , <title> Linear recurrences with carry as random number generators, </title> <booktitle> in Proceedings of the 1995 Winter Simulation Conference, </booktitle> <year> 1995, </year> <pages> pp. 263-267. </pages> <month> 15. </month> , <title> Computation of a shortest vector and Minkowski-reduced bases in a lattice. In preparation, 1996. 16. , Distribution properties of multiply-with-carry random number generators, </title> <journal> Mathematics of Computation, </journal> <note> (1997). To appear. </note>
Reference-contexts: L'Ecuyer and Couture [70] show how to construct bases for such lattices, how to compute d t (I), and so on. The following provides "quick-and-dirty" lower bounds on d t (I) <ref> [13, 61] </ref>: (i) If I contains all the indices i such that a ki+1 6= 0, then d t (I) @ 1 + j=1 i A : (4.10) In particular, if x n = (a r x nr + a k x nk ) mod m and I = f0; k <p> They are analyzed in [16], where a better set of parameters, in terms of the lattice structure of the LCG is also given. Special cases of the MWC include the add-with-carry (AWC) and subtract-with-borrow (SWB) generators, originally proposed Marsaglia and Zaman [83] and subsequently analyzed in <ref> [13, 111] </ref>. For the AWC, put a r = a k = a 0 = 1 for 0 &lt; r &lt; k and all other a ` equal to zero.
Reference: 17. <author> R. Couture, P. L'Ecuyer, and S. Tezuka, </author> <title> On the distribution of k-dimensional vectors for simple and combined Tausworthe sequences, </title> <journal> Mathematics of Computation, </journal> <volume> 60 (1993), </volume> <pages> pp. 749-761, </pages> <month> S11-S16. </month>
Reference-contexts: Fushimi [40] gives an initialization procedure satisfying this condition. Couture, L'Ecuyer, and Tezuka <ref> [17] </ref> show how the (t; `)-equidistribution of simple and combined LFSR generators can be analyzed via the lattice structure of an equivalent LCG in a space of formal series.
Reference: 18. <author> R. R. Coveyou and R. D. MacPherson, </author> <title> Fourier analysis of uniform random number generators, </title> <journal> Journal of the ACM, </journal> <volume> 14 (1967), </volume> <pages> pp. 100-119. </pages>
Reference-contexts: This appears to be the best (general) approach known to date, and is certainly much faster than the algorithm given in [22] and [53]. This idea of analyzing d t was introduced by Coveyou and MacPherson <ref> [18] </ref> via the viewpoint of spectral analysis. For this historical reason, computing d t is often called the spectral test. The shorter the distance d t , the better, because a large d t means thick empty slices of space between the hyperplanes.
Reference: 19. <author> A. De Matteis and S. Pagnutti, </author> <title> Parallelization of random number generators and long-range correlations, </title> <journal> Numerische Mathematik, </journal> <volume> 53 (1988), </volume> <pages> pp. 595-608. </pages> <month> 4.6. </month> <title> PRACTICAL RANDOM NUMBER PACKAGES 53 20. , A class of parallel random number generators, </title> <booktitle> Parallel Computing, 13 (1990), </booktitle> <pages> pp. 193-198. </pages>
Reference-contexts: p = 2, an upper bound on the period length of the ith least significant bit of x n is max (1; 2 i2 ) [7], and if a full cycle is split into 2 d equal segments, then all segments are identical except for their d most significant bits <ref> [19, 24] </ref>. For k &gt; 1 and p = 2, the upper bound on the period length of the ith least significant bit is (2 k 1)2 i1 . So, the low-order bits are typically much too regular when p = 2.
Reference: 21. <author> I. De ak, </author> <title> Uniform random number generators for parallel computers, </title> <booktitle> Parallel Computing, 15 (1990), </booktitle> <pages> pp. 155-164. </pages>
Reference-contexts: Efficient computer code that implements the sequence (4.23), for the case where the recurrence has the form x n = (x nr + x nk ) mod 2 with s r and 2r &gt; k, can be found in [63, 110, 109]. For specialized jump-ahead algorithms, see <ref> [21, 63] </ref>. Unfortunately, such simple recurrences lead to LFSR generators with bad structural 38 properties (see [11, 63, 88, 109] and other references there). But combining several recurrences of this type can give good generators. <p> For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 21, 85, 98] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada grant # OGP0110050 and FCAR-Quebec grant # 93-ER-1654. Thanks to Jerry Banks, Raymond Couture, Hans Leeb, and Thierry Moreau for their helpful comments.
Reference: 22. <author> U. Dieter, </author> <title> How to calculate shortest vectors in a lattice, </title> <journal> Mathematics of Computation, </journal> <volume> 29 (1975), </volume> <pages> pp. 827-833. </pages>
Reference-contexts: Then, this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studied and to see how to construct a basis for this lattice L t and its dual, see <ref> [22, 53, 66, 70] </ref>. <p> In these papers, the authors use an ellipsoid method to compute the bounds on the z j for the branch-and-bound. This appears to be the best (general) approach known to date, and is certainly much faster than the algorithm given in <ref> [22] </ref> and [53]. This idea of analyzing d t was introduced by Coveyou and MacPherson [18] via the viewpoint of spectral analysis. For this historical reason, computing d t is often called the spectral test.
Reference: 23. <author> E. J. Dudewicz and T. G. Ralley, </author> <title> The Handbook of Random Number Generation and Testing with TESTRAND Computer Code, </title> <publisher> American Sciences Press, </publisher> <address> Columbus, Ohio, </address> <year> 1981. </year>
Reference-contexts: A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND <ref> [23] </ref>. A newer battery of tests is DIEHARD, designed by Marsaglia [79, 81]. It contains more stringent tests than those in [53], in the sense that more generators tend to fail some of the tests. References to other statistical tests can be found in [59, 60, 68, 67, 65, 105].
Reference: 24. <author> M. J. Durst, </author> <title> Using linear congruential generators for parallel random number generation, </title> <booktitle> in Proceedings of the 1989 Winter Simulation Conference, </booktitle> <publisher> IEEE Press, </publisher> <year> 1989, </year> <pages> pp. 462-466. </pages>
Reference-contexts: But there are several counter-examples, such as for certain large simulations in particle physics <ref> [24] </ref>, or when using intensive Monte Carlo simulation to estimate with precision the distribution of a statistic that is fast to compute but requires many random numbers. <p> p = 2, an upper bound on the period length of the ith least significant bit of x n is max (1; 2 i2 ) [7], and if a full cycle is split into 2 d equal segments, then all segments are identical except for their d most significant bits <ref> [19, 24] </ref>. For k &gt; 1 and p = 2, the upper bound on the period length of the ith least significant bit is (2 k 1)2 i1 . So, the low-order bits are typically much too regular when p = 2.
Reference: 25. <author> J. Eichenauer, H. Grothe, J. Lehn, and A. Topuz oglu, </author> <title> A multiple recursive nonlinear congruential pseudorandom number generator, Manuscripta Mathematica, </title> <booktitle> 59 (1987), </booktitle> <pages> pp. 331-346. </pages>
Reference-contexts: The sequence fz n g has period m k1 , under conditions given in [29, 92]. This class of generators was introduced and first studied in <ref> [26, 25, 28] </ref>. For k = 2, (4.26) is equivalent to the recurrence z n = (a 1 + a 2 z 1 a 1 if z n1 = 0, where a 1 and a 2 are the MRG coefficients.
Reference: 26. <author> J. Eichenauer and J. Lehn, </author> <title> A nonlinear congruential pseudorandom number generator, </title> <journal> Statistische Hefte, </journal> <volume> 27 (1986), </volume> <pages> pp. 315-326. </pages> <month> 27. </month> , <title> On the structure of quadratic congruential sequences, </title> <journal> Manuscripta Mathemat-ica, </journal> <volume> 58 (1987), </volume> <pages> pp. 129-140. </pages>
Reference-contexts: The sequence fz n g has period m k1 , under conditions given in [29, 92]. This class of generators was introduced and first studied in <ref> [26, 25, 28] </ref>. For k = 2, (4.26) is equivalent to the recurrence z n = (a 1 + a 2 z 1 a 1 if z n1 = 0, where a 1 and a 2 are the MRG coefficients.
Reference: 28. <author> J. Eichenauer, J. Lehn, and A. Topuz oglu, </author> <title> A nonlinear congruential pseudorandom number generator with power of two modulus, </title> <journal> Mathematics of Computation, </journal> <volume> 51 (1988), </volume> <pages> pp. 757-759. </pages>
Reference-contexts: The sequence fz n g has period m k1 , under conditions given in [29, 92]. This class of generators was introduced and first studied in <ref> [26, 25, 28] </ref>. For k = 2, (4.26) is equivalent to the recurrence z n = (a 1 + a 2 z 1 a 1 if z n1 = 0, where a 1 and a 2 are the MRG coefficients. <p> As a simple illustrative example, take m = 2 31 1 and a = c = 1. (However, at the moment, we are not in a position to recommend these particular parameters nor any other specific ones.) Inversive congruential generators with power-of-two moduli have also been studied <ref> [28, 29, 33] </ref>. However, they have have more regular structures than those based on prime moduli [29, 32]. Their low-order bits have the same short period lengths as for the LCGs.
Reference: 29. <author> J. Eichenauer-Herrmann, </author> <title> Inversive congruential pseudorandom numbers: A tutorial, </title> <journal> International Statistical Reviews, </journal> <volume> 60 (1992), </volume> <pages> pp. 167-176. </pages> <month> 30. </month> , <title> Statistical independence of a new class of inversive congruential pseudorandom numbers, </title> <journal> Mathematics of Computation, </journal> <volume> 60 (1993), </volume> <pages> pp. 375-384. </pages> <month> 31. </month> , <title> On generalized inversive congruential pseudorandom numbers, </title> <journal> Mathematics of Computation, </journal> <volume> 63 (1994), </volume> <pages> pp. 293-299. </pages> <month> 32. </month> , <title> Pseudorandom number generation by nonlinear methods, </title> <journal> International Statistical Reviews, </journal> <volume> 63 (1995), </volume> <pages> pp. 247-255. 54 </pages>
Reference-contexts: Several types of nonlinear generators have been proposed over the last decade or so, and an impressive volume of theoretical results have been obtained for them. See, for example, <ref> [29, 32, 55, 71, 92, 94] </ref> and other references given there. Here, we give a brief overview of this rapidly developing area. Nonlinear generators avoid lattice structures. Typically, no t-dimensional hyperplane contains more than t overlapping t-tuples of successive values. <p> The sequence fz n g has period m k1 , under conditions given in <ref> [29, 92] </ref>. This class of generators was introduced and first studied in [26, 25, 28]. <p> As a simple illustrative example, take m = 2 31 1 and a = c = 1. (However, at the moment, we are not in a position to recommend these particular parameters nor any other specific ones.) Inversive congruential generators with power-of-two moduli have also been studied <ref> [28, 29, 33] </ref>. However, they have have more regular structures than those based on prime moduli [29, 32]. Their low-order bits have the same short period lengths as for the LCGs. <p> However, they have have more regular structures than those based on prime moduli <ref> [29, 32] </ref>. Their low-order bits have the same short period lengths as for the LCGs. The idea of combined generators, already discussed in the linear case, also applies to nonlinear generators and offers some computational advantages. Huber [48] and Eichenauer-Herrmann [31] introduced and analyzed the following method.
Reference: 33. <author> J. Eichenauer-Herrmann and H. Grothe, </author> <title> A new inversive congruential pseudorandom number generator with power of two modulus, </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 2 (1992), </volume> <pages> pp. 1-11. </pages>
Reference-contexts: As a simple illustrative example, take m = 2 31 1 and a = c = 1. (However, at the moment, we are not in a position to recommend these particular parameters nor any other specific ones.) Inversive congruential generators with power-of-two moduli have also been studied <ref> [28, 29, 33] </ref>. However, they have have more regular structures than those based on prime moduli [29, 32]. Their low-order bits have the same short period lengths as for the LCGs.
Reference: 34. <author> J. Eichenauer-Herrmann, H. Grothe, and J. Lehn, </author> <title> On the period length of pseudorandom vector sequences generated by matrix generators, </title> <journal> Mathematics of Computation, </journal> <volume> 52 (1989), </volume> <pages> pp. 145-148. </pages>
Reference-contexts: Otherwise, if m = p e for p prime and e 1, and k &gt; 1 or p &gt; 2, the upper bound is (p k 1)p e1 <ref> [34] </ref>. Clearly, p = 2 is very convenient from the implementation point of view, because the modulo operation then amounts to "chopping-off" the higher-order bits.
Reference: 35. <author> J. Eichenauer-Herrmann and H. Niederreiter, </author> <title> An improved upper bound for the discrepancy of quadratic congruential pseudorandom numbers, </title> <journal> Acta Arithmetica, </journal> <month> LXIX.2 </month> <year> (1995), </year> <pages> pp. 193-198. </pages>
Reference-contexts: Consider the recurrence: x n = (ax 2 where a; b; c 2 ZZ m and x n 2 ZZ m for each n. This is studied in <ref> [53, 27, 35, 92] </ref>. If m is a power of two, this generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd. Its t-dimensional points turn out to lie on a union of grids.
Reference: 36. <author> A. M. Ferrenberg, D. P. Landau, and Y. J. Wong, </author> <title> Monte Carlo simulations: Hidden errors from "good" random number generators, </title> <journal> Physical Review Letters, </journal> <volume> 69 (1992), </volume> <pages> pp. 3382-3384. </pages>
Reference-contexts: Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such pattern can easily show up in certain classes of applications <ref> [36, 45, 68] </ref>. Which are the best tests? No one can really answer this question.
Reference: 37. <author> U. Fincke and M. Pohst, </author> <title> Improved methods for calculating vectors of short length in a lattice, including a complexity analysis, </title> <journal> Mathematics of Computation, </journal> <volume> 44 (1985), </volume> <pages> pp. 463-471. </pages>
Reference-contexts: This is a quadratic optimization problem with integer variables and can be solved by a branch-and-bound algorithm, as in <ref> [37, 15] </ref>. In these papers, the authors use an ellipsoid method to compute the bounds on the z j for the branch-and-bound. This appears to be the best (general) approach known to date, and is certainly much faster than the algorithm given in [22] and [53].
Reference: 38. <author> G. S. Fishman and L. S. Moore III, </author> <title> An exhaustive analysis of multiplicative congruential random number generators with modulus 2 31 1, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 7 (1986), </volume> <pages> pp. 24-45. </pages>
Reference-contexts: For m = 2 31 1, the multiplier a = 742938285 was found by Fishman and Moore <ref> [38] </ref> in an exhaustive search for the MLCGs with the best value of M 6 for this value of m. It is used in the GPSS/H simulation environment.
Reference: 39. <author> M. Fushimi, </author> <title> Increasing the orders of equidistribution of the leading bits of the Taus-worthe sequence., </title> <journal> Information Processing Letters, </journal> <volume> 16 (1983), </volume> <pages> pp. 189-192. </pages> <month> 40. </month> , <title> An equivalence relation between Tausworthe and GFSR sequences and applications, </title> <journal> Applied Mathematics Letters, </journal> <volume> 2 (1989), </volume> <pages> pp. 135-137. </pages>
Reference: 41. <author> M. Fushimi and S. Tezuka, </author> <title> The k-distribution of generalized feedback shift register pseudorandom numbers, </title> <journal> Communications of the ACM, </journal> <volume> 26 (1983), </volume> <pages> pp. 516-523. </pages>
Reference-contexts: Full-period LFSR generators are all (bk=sc; s)-equidistributed. Full period GFSR generators are all (k; 1)-equidistributed, but their (k; `)-equidistribution for ` &gt; 1 depends on the initial state (i.e., on the shifts between the different copies of the MRG). Fushimi and Tezuka <ref> [41] </ref> give a necessary and sufficient condition on this initial state for (t; L)-equidistribution, for t = bk=Lc.
Reference: 42. <author> I. J. </author> <title> Good, Probability and the Weighting of Evidence, </title> <publisher> Griffin, </publisher> <address> London, </address> <year> 1950. </year> <title> 43. , How random are random numbers ?, The American Statistician, </title> <booktitle> (1969), </booktitle> <pages> pp. 42-45. </pages>
Reference-contexts: See [10, 53, 56, 58, 79] and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. Some authors (e.g., <ref> [8, 42, 79] </ref>) have also given theoretical results which (on the surface) appear to "prove" that the output of a combined generator is "more random" than (or at least "as random" as) the output of each of its components.
Reference: 44. <author> H. Grothe, </author> <title> Matrix generators for pseudo-random vectors generation, </title> <journal> Statistische Hefte, </journal> <volume> 28 (1987), </volume> <pages> pp. 233-238. </pages>
Reference-contexts: k fi k matrix A has a primitive characteristic polynomial P (z) = z k a 1 z k1 a k , then X n also follows the recurrence X n = (a 1 X n1 + : : : + a k X nk ) mod m (4.17) (see <ref> [44, 58, 91] </ref>). So, each component of the vector X n evolves according to (4.2). In other words, one simply has k copies of the same MRG sequence in parallel, usually with some shifting between those copies.
Reference: 45. <author> P. Hellekalek, </author> <title> Inversive pseudorandom number generators: Concepts, results, 4.6. PRACTICAL RANDOM NUMBER PACKAGES 55 and links, </title> <booktitle> in Proceedings of the 1995 Winter Simulation Conference, </booktitle> <editor> C. Alexopoulos, K. Kang, W. R. Lilegdon, and D. Goldsman, eds., </editor> <publisher> IEEE Press, </publisher> <year> 1995, </year> <pages> pp. 255-262. </pages>
Reference-contexts: U (0; 1) sequence of random variables. They have also succeeded quite well in empirical tests performed so far <ref> [45] </ref>. Fast implementations with specific well-tested parameters are still under development, although several generic implementations are already available [45, 65]. 4.4.1 Inversive Congruential Generators To construct a nonlinear generator with long period, a first idea is simply to add a nonlinear twist to the output of a known generator. <p> U (0; 1) sequence of random variables. They have also succeeded quite well in empirical tests performed so far [45]. Fast implementations with specific well-tested parameters are still under development, although several generic implementations are already available <ref> [45, 65] </ref>. 4.4.1 Inversive Congruential Generators To construct a nonlinear generator with long period, a first idea is simply to add a nonlinear twist to the output of a known generator. For example, take a full-period 4.4. <p> Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such pattern can easily show up in certain classes of applications <ref> [36, 45, 68] </ref>. Which are the best tests? No one can really answer this question. <p> So, the best the designer can do (after the generator has been properly designed) is to apply a wide variety of tests that tend to detect defects of different natures. Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [45, 59, 68, 67, 64, 81, 73] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 46. <author> D. C. Hoaglin and M. L. King, </author> <title> A remark on algorithm AS 98: The spectral test for the evaluation of congruential pseudo-random generators, </title> <journal> Applied Statistics, </journal> <volume> 27 (1978), </volume> <pages> pp. 375-377. </pages>
Reference-contexts: Consider for example an MLCG for which m is a power of two, a mod 8 = 5, and x 0 is odd. The t-dimensional points constructed from successive values produced by this generator form a subgrid of L t containing one-fourth of the points <ref> [46, 3] </ref>. For a LCG with m a power of two and c 6= 0, with full period length ae = m, the points all lie in a grid that is a shift of the lattice L t associated with the corresponding MLCG (with the same a amd m).
Reference: 47. <author> W. H ormann and G. Derflinger, </author> <title> A portable random number generator well suited for the rejection method, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 19 (1993), </volume> <pages> pp. 489-495. </pages>
Reference-contexts: As an illustration, if m = 2 31 1 and a = 16807, then the generator satisfies the condition, since 16807 &lt; p m. In this case, one has q = 127773 and r = 2836. Hormann and Derflinger <ref> [47] </ref> give a different method, which is about as fast, for the case where m = 2 31 1. Another approach is to represent all the numbers and perform all the arithmetic modulo m in double precision floating-point.
Reference: 48. <author> K. Huber, </author> <title> On the period length of generalized inversive pseudorandom number generators, </title> <journal> Applied Algebra in Engineering, Communications, and Computing, </journal> <volume> 5 (1994), </volume> <pages> pp. 255-260. </pages>
Reference-contexts: Their low-order bits have the same short period lengths as for the LCGs. The idea of combined generators, already discussed in the linear case, also applies to nonlinear generators and offers some computational advantages. Huber <ref> [48] </ref> and Eichenauer-Herrmann [31] introduced and analyzed the following method. Take J inversive generators as in (4.27), with distinct prime moduli m 1 ; : : : ; m J , all larger than 4, and full period length ae j = m j .
Reference: 49. <author> T. E. Hull, </author> <title> Random number generators, </title> <journal> SIAM Review, </journal> <volume> 4 (1962), </volume> <pages> pp. 230-254. </pages>
Reference-contexts: Law and Kelton [56] present a short (but interesting) historical overview. Further surveys and historical accounts of the old days are provided in <ref> [43, 49, 108] </ref>. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. An illustrative example is the mid-square method, which works as follows (see, e.g., [56]).
Reference: 50. <author> I. </author> <title> IMSL, IMSL Library Users's Manual, </title> <type> Vol.3, IMSL, </type> <institution> Houston, Texas, </institution> <year> 1987. </year>
Reference-contexts: A large number of empirical investigations performed over the past 30 years strongly support shu*ing and many generators available in software libraries use it (e.g., <ref> [50, 99, 106] </ref>). However, it has two important drawbacks: (a) the effect of shu*ing is not well-enough understood from the theoretical viewpoint and (b) one does not know how to quickly jump ahead to an arbitrary point in the sequence of the combined generator.
Reference: 51. <author> F. James, </author> <title> A review of pseudorandom number generators, </title> <journal> Computer Physics Communications, </journal> <volume> 60 (1990), </volume> <pages> pp. 329-344. 52. </pages> , <month> RANLUX: </month> <title> A Fortran implementation of the high-quality pseudorandom number generator of Luscher's, </title> <journal> Computer Physics Communications, </journal> <volume> 79 (1994), </volume> <pages> pp. 111-114. </pages>
Reference-contexts: for variance reduction purposes (see Section 4.6 and [7, 56] for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques <ref> [7, 51, 56, 102] </ref>. Repeatability is a major advantage of pseudorandom sequences over sequences generated by physical devices.
Reference: 53. <author> D. E. Knuth, </author> <booktitle> The Art of Computer Programming, Volume 2: Seminumerical Algorithms, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <note> second ed., </note> <year> 1981. </year>
Reference-contexts: Good generators typically have their ae very close to jSj (otherwise, there is a waste of computer memory). 4.1.2 Example: Linear Congruential Generators Example 1 The best-known and (still) most widely used types of generators are the simple linear congruential generators (LCGs) <ref> [53, 56, 74] </ref>. <p> However, experience shows that random number generators should not be built at random (see Knuth <ref> [53] </ref> for more discussion on this). Building a good random number generator may look easy on the surface, but it is not. It requires a good understanding of heavy mathematics. <p> However, they seem to have good enough statistical properties for most reasonable simulation applications. 4.2.2 What is a Random Sequence? The idea of a "truly random" sequence makes sense only in the (abstract) framework of probability theory. Several authors (see, e.g., <ref> [53] </ref>) give definitions of a random sequence, but these definitions require nonperiodic infinite-length sequences. Whenever one selects a generator with a fixed seed, as in Definition 1, one always obtains a deterministic sequence of finite length (the length of the period) which repeats itself indefinitely. <p> Define ZZ m as the set f0; 1; : : : ; m 1g on which operations are performed modulo m. The state at step n of the multiple recursive generator (MRG) <ref> [53, 58, 92] </ref> is the vector s n = (x n ; : : : ; x n+k1 ) 2 ZZ k m . <p> Suppose that m is prime and let r = (m k 1)=(m 1). The polynomial P is primitive over ZZ m if and only if it satisfies the following conditions, where everything is assumed to be modulo m (see Knuth <ref> [53] </ref>): (a) ((1) k+1 a k ) (m1)=q 6= 1 for each prime factor q of m 1; (b) (z r mod P (z)) = (1) k+1 a k ; (c) (z r=q mod P (z)) has degree &gt; 0 for each prime factor q of r, 1 &lt; q &lt; <p> For k = 1 and m = 2 e , e 4, the maximum period length is 4.3. LINEAR-TYPE METHODS 17 2 e2 , which is reached if a 1 = 3 or 5 (mod 8) and x 0 is odd <ref> [53, p.20] </ref>. Otherwise, if m = p e for p prime and e 1, and k &gt; 1 or p &gt; 2, the upper bound is (p k 1)p e1 [34]. <p> Adding a constant c as in (4.1) can alleviate the period-length limitations just discussed. The LCG with recurrence (4.1) has period length m if and only if the following conditions are satisfied see <ref> [53, p.16] </ref>: (a) c is relatively prime to m; (b) a 1 is a multiple of p for every prime factor p of m (including m itself if m is prime); (c) If m is a multiple of 4 then a 1 is also a multiple of 4. <p> Then, this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studied and to see how to construct a basis for this lattice L t and its dual, see <ref> [22, 53, 66, 70] </ref>. <p> In these papers, the authors use an ellipsoid method to compute the bounds on the z j for the branch-and-bound. This appears to be the best (general) approach known to date, and is certainly much faster than the algorithm given in [22] and <ref> [53] </ref>. This idea of analyzing d t was introduced by Coveyou and MacPherson [18] via the viewpoint of spectral analysis. For this historical reason, computing d t is often called the spectral test. <p> One has the theoretical lower bound d t d fl 1 where fl t is a constant called the Hermite constant for quadratic forms, that depends only on t, and whose exact value is currently known only for t 8 (see <ref> [53] </ref>). So, for t 8 and T 8, one can define the figures of merit S t = d fl t =d t and M T = min ktT S t , which lie between 0 and 1. Values close to 1 are desired. <p> As a consequence, all vectors 30 (u n ; u n+r ; u n+k ) produced by such a generator lie in only two planes! Specific instances of this generator are the one proposed by Mitchell and Moore and recommended by Knuth <ref> [53] </ref>, based on the recurrence x n = (x n24 + x n55 ) mod 2 e for e equal to the computer's word length, as well as the "addrans" function in the SUN Unix library [106], based on x n = (x n5 + x n17 ) mod 2 24 <p> See <ref> [10, 53, 56, 58, 79] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. <p> Consider the recurrence: x n = (ax 2 where a; b; c 2 ZZ m and x n 2 ZZ m for each n. This is studied in <ref> [53, 27, 35, 92] </ref>. If m is a power of two, this generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd. Its t-dimensional points turn out to lie on a union of grids. <p> This empirical distribution is then compared to the theoretical distribution of T under H 0 , say F , via a standard goodness-of-fit test, such as the Kolmogorov-Smirnov (KS) test <ref> [53, 104] </ref>. This procedure is sometimes called a two-level test [60]. <p> For still better confidence, it is always a good idea to run important simulations twice (or more), using random number generators of totally different types. 4.5.2 Available Batteries of Tests The statistical tests described by Knuth <ref> [53] </ref> have long been considered the "standard" tests for random number generators. A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND [23]. A newer battery of tests is DIEHARD, designed by Marsaglia [79, 81]. It contains more stringent tests than those in [53], in the <p> by Knuth <ref> [53] </ref> have long been considered the "standard" tests for random number generators. A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND [23]. A newer battery of tests is DIEHARD, designed by Marsaglia [79, 81]. It contains more stringent tests than those in [53], in the sense that more generators tend to fail some of the tests. References to other statistical tests can be found in [59, 60, 68, 67, 65, 105]. Simply testing uniformity, or pair correlations, is far from enough.
Reference: 54. <author> C. Koc, </author> <title> Recurring-with-carry sequences, </title> <journal> Journal of Applied Probability, </journal> <volume> 32 (1995), </volume> <pages> pp. 966-971. </pages>
Reference-contexts: As in [14, 16, 80], we call this a Multiply-with-Carry (MWC) generator. The idea was suggested in <ref> [54, 83] </ref>. The recurrence looks like that of an MRG, except that a carry c n is propagated between the steps. What is the effect of this carry? Assume that b is a power of two, which is very nice form the implementation viewpoint.
Reference: 55. <author> J. C. Lagarias, </author> <title> Pseudorandom numbers, </title> <journal> Statistical Science, </journal> <volume> 8 (1993), </volume> <pages> pp. 31-39. </pages>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 55, 71] </ref> and other references given there). Are there efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not there exists such a family. But some generator families are conjectured to be polynomial-time perfect. <p> Several types of nonlinear generators have been proposed over the last decade or so, and an impressive volume of theoretical results have been obtained for them. See, for example, <ref> [29, 32, 55, 71, 92, 94] </ref> and other references given there. Here, we give a brief overview of this rapidly developing area. Nonlinear generators avoid lattice structures. Typically, no t-dimensional hyperplane contains more than t overlapping t-tuples of successive values. <p> An implementation based on fast modular multiplication is proposed by Moreau [89]. 4.5. EMPIRICAL STATISTICAL TESTING 45 Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See <ref> [55, 71, 5] </ref> for overviews and discussions. An interesting idea, pursued for instance in [1], is to combine a slow but cryptographically strong generator with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step.
Reference: 56. <author> A. M. Law and W. D. </author> <title> Kelton, Simulation Modeling and Analysis, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <note> second ed., </note> <year> 1991. </year>
Reference-contexts: Good generators typically have their ae very close to jSj (otherwise, there is a waste of computer memory). 4.1.2 Example: Linear Congruential Generators Example 1 The best-known and (still) most widely used types of generators are the simple linear congruential generators (LCGs) <ref> [53, 56, 74] </ref>. <p> Since simulations often consume several hours of cpu time, this could be very significant. The memory size used by a generator might also be important in general, especially since simulations often use several generators in parallel, for instance to maintain synchronization for variance reduction purposes (see Section 4.6 and <ref> [7, 56] </ref> for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques [7, 51, 56, 102]. <p> for variance reduction purposes (see Section 4.6 and [7, 56] for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques <ref> [7, 51, 56, 102] </ref>. Repeatability is a major advantage of pseudorandom sequences over sequences generated by physical devices. <p> Implementing a random number package as described in Section 4.6 requires efficient jump-ahead techniques. 4.2.8 Historical Accounts There is an enormous amount of scientific literature on random number generation. Law and Kelton <ref> [56] </ref> present a short (but interesting) historical overview. Further surveys and historical accounts of the old days are provided in [43, 49, 108]. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. <p> Further surveys and historical accounts of the old days are provided in [43, 49, 108]. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. An illustrative example is the mid-square method, which works as follows (see, e.g., <ref> [56] </ref>). Take a b-digit number x i1 (say, in base 10, with b even), square it to obtain a 2b-digit number (perhaps with zeros on the left), and extract the b middle digits to define the next number x i . <p> It satisfies the condition (4.5). The multiplier a = 630360016 was proposed in [97], is recommended in <ref> [56, 84] </ref> among others, and is used in software such as the SIMSCRIPT II.5 and INSIGHT simulation programming languages. Generator G4, with modulus m = 2 31 and multiplier a = 65539, is the infamous RANDU generator, used for a long time in the IBM/360 operating system. <p> Its lattice structure is particularly bad in dimension 3, where all the points lie in only 15 parallel planes. Law and Kelton <ref> [56] </ref> give a graphical illustration. Generator G5, with m = 2 32 , a = 69069, and c = 1, is used in the VAX/VMS operating system. <p> See <ref> [10, 53, 56, 58, 79] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. <p> This implies that the structural effect of the combination method must be well-understood. Law and Kelton <ref> [56, Problem 7.6] </ref> give an example where combination makes things worse.

Reference: 66. <author> P. L'Ecuyer, F. Blouin, and R. Couture, </author> <title> A search for good multiple recursive random number generators, </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 3 (1993), </volume> <pages> pp. 87-98. </pages>
Reference-contexts: In this case, the trick is to choose m and k so that r is prime (this can be done only for odd k). Testing primality of large numbers (using probabilistic algorithms, for example, as in <ref> [66, 100] </ref> is much easier than factoring. Given m, k, and the factorizations of m 1 and r, primitive polynomials are generally easy to find, simply by random search. <p> Then, this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studied and to see how to construct a basis for this lattice L t and its dual, see <ref> [22, 53, 66, 70] </ref>. <p> This m is the largest prime under 2 31 such that (m 7 1)=(m 1) is also prime. The latter property facilitates the verification of condition (c) in the full period conditions for an MRG. These two generators are taken from <ref> [66] </ref>, where one can also find more details on the search and a precise definition of the selection criterion. It turns out that G8 has a very bad figure of merit S 8 , and larger values of d t than G7 for t slightly larger than 7. <p> More references and pointers can be found from the page http://random.mat.sbg.ac.at on the world wide web. Computer codes that this author can suggest for the moment include those of the MRG in <ref> [66] </ref>, the combined MRG in [62], the combined Tausworthe generator in [63], the twisted GFSR in [87], and perhaps the RANLUX code in [52]. 4.6.2 Multi-Generator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . .
Reference: 67. <author> P. L'Ecuyer, A. Compagner, and J.-F. Cordeau, </author> <title> Entropy-based tests for random number generators. </title> <note> In preparation, </note> <year> 1996. </year>
Reference-contexts: A newer battery of tests is DIEHARD, designed by Marsaglia [79, 81]. It contains more stringent tests than those in [53], in the sense that more generators tend to fail some of the tests. References to other statistical tests can be found in <ref> [59, 60, 68, 67, 65, 105] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such pattern can easily show up in certain classes of applications [36, 45, 68]. <p> So, the best the designer can do (after the generator has been properly designed) is to apply a wide variety of tests that tend to detect defects of different natures. Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [45, 59, 68, 67, 64, 81, 73] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 68. <author> P. L'Ecuyer and J.-F. Cordeau, </author> <title> Close-neighbor tests for random number generators. </title> <note> In preparation, </note> <year> 1996. </year>
Reference-contexts: A newer battery of tests is DIEHARD, designed by Marsaglia [79, 81]. It contains more stringent tests than those in [53], in the sense that more generators tend to fail some of the tests. References to other statistical tests can be found in <ref> [59, 60, 68, 67, 65, 105] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such pattern can easily show up in certain classes of applications [36, 45, 68]. <p> Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such pattern can easily show up in certain classes of applications <ref> [36, 45, 68] </ref>. Which are the best tests? No one can really answer this question. <p> So, the best the designer can do (after the generator has been properly designed) is to apply a wide variety of tests that tend to detect defects of different natures. Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [45, 59, 68, 67, 64, 81, 73] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 69. <author> P. L'Ecuyer and S. </author> <title> C ^ ot e, Implementing a random number package with splitting facilities, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 17 (1991), </volume> <pages> pp. 98-111. </pages>
Reference-contexts: For example, if m = 2 31 1 and a 1 = 16807, then x n1 can be as large as 2 31 2, so the product a 1 x n1 can easily exceed 2 31 . L'Ecuyer and Cote <ref> [69] </ref> study and compare different techniques for computing a product modulo a large integer m, using only integer arithmetic, so that no intermediate result ever exceeds m. Among the general methods, working for all representable integers and easily implementable in a high-level language, decomposition was the fastest in their experiments. <p> In most cases, this is the same generator, but starting with different seeds, widely spaced in the sequence. L'Ecuyer and Cote <ref> [69] </ref> have constructed a package with 32 generators (which can be easily extended to 1024). Each generator is in fact based on the same recurrence (a combined LCG of period length near 2 61 ), with seeds spaced 2 50 values apart. <p> Without appropriate tools, this may require tricky programming, because the two systems do not necessarily use the same number of random numbers in a given run. But with the package in <ref> [69] </ref>, one simply assign each run to a segment number. With the first system, simulate run 1 with the initial seed, and before each new run, advance each generator to the beginning of the next segment. <p> After the nth run, reset the generators to their initial seeds and do the same for the second system. The number and length of segments in the package of <ref> [69] </ref> are now deemed too small for current and future needs. But other similar packages, based on generators with much larger period lengths, are now under development.
Reference: 70. <author> P. L'Ecuyer and R. Couture, </author> <title> An implementation of the lattice and spectral tests for multiple recursive linear random number generators, </title> <journal> INFORMS Journal on Computing, </journal> <note> (Circa 1997). To appear. </note>
Reference-contexts: Then, this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studied and to see how to construct a basis for this lattice L t and its dual, see <ref> [22, 53, 66, 70] </ref>. <p> For more details on the latter, which is typically much more costly to compute than d t , the reader can consult <ref> [70] </ref> and the references given there. These alternative figures of merit do not tell us much important information in addition to d t . Tables 4.1 and 4.2 give the values of d t and S t for certain LCGs and MRGs. All these generators have full period length. <p> L'Ecuyer and Couture <ref> [70] </ref> show how to construct bases for such lattices, how to compute d t (I), and so on. <p> Note that this combined generator was originally constructed on the basis of the lattice structure of the components only, without examining the lattice structure of the combination. Slightly better combinations of the same size have been constructed since this original proposal <ref> [72, 70] </ref>. 4.3.7 Matrix LCGs and MRGs A natural way to generalize LCGs and MRGs is to consider linear recurrences for vectors, with matrix coefficients: X n = (A 1 X n1 + + A k X nk ) mod m (4.15) where A 1 ; : : : ; A <p> For LCGs and MRGs, for example, the lattice structure can be analyzed with such lacunary indices. See <ref> [70] </ref> for more details and numerical examples. 4.6.3 Generators for Parallel Computers Another situation where multiple random number generators are needed is for simulation on parallel processors. The same approach can be taken: partition the sequence of a single random number generator with very long period into disjoint subsequences. 4.6.
Reference: 71. <author> P. L'Ecuyer and R. Proulx, </author> <title> About polynomial-time "unpredictable" generators, </title> <booktitle> in Proceedings of the 1989 Winter Simulation Conference, </booktitle> <publisher> IEEE Press, </publisher> <month> Dec </month> <year> 1989, </year> <pages> pp. 467-476. </pages>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 55, 71] </ref> and other references given there). Are there efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not there exists such a family. But some generator families are conjectured to be polynomial-time perfect. <p> Several types of nonlinear generators have been proposed over the last decade or so, and an impressive volume of theoretical results have been obtained for them. See, for example, <ref> [29, 32, 55, 71, 92, 94] </ref> and other references given there. Here, we give a brief overview of this rapidly developing area. Nonlinear generators avoid lattice structures. Typically, no t-dimensional hyperplane contains more than t overlapping t-tuples of successive values. <p> An implementation based on fast modular multiplication is proposed by Moreau [89]. 4.5. EMPIRICAL STATISTICAL TESTING 45 Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See <ref> [55, 71, 5] </ref> for overviews and discussions. An interesting idea, pursued for instance in [1], is to combine a slow but cryptographically strong generator with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step.
Reference: 72. <author> P. L'Ecuyer and S. Tezuka, </author> <title> Structural properties for two classes of combined 4.6. PRACTICAL RANDOM NUMBER PACKAGES 57 random number generators, </title> <journal> Mathematics of Computation, </journal> <volume> 57 (1991), </volume> <pages> pp. 735-746. </pages>
Reference-contexts: Define the two combinations: z n = @ j=1 1 and 0 J X ffi j x j;n 1 32 Q J j=1 m j . The following results were proved in <ref> [72] </ref> for the case of MLCG components (k = 1) and in [62] for the more general case: (i) The sequences fu n g and fw n g both have period length ae = lcm (ae 1 ; : : : ; ae J ) (the least common multiple of the <p> Note that this combined generator was originally constructed on the basis of the lattice structure of the components only, without examining the lattice structure of the combination. Slightly better combinations of the same size have been constructed since this original proposal <ref> [72, 70] </ref>. 4.3.7 Matrix LCGs and MRGs A natural way to generalize LCGs and MRGs is to consider linear recurrences for vectors, with matrix coefficients: X n = (A 1 X n1 + + A k X nk ) mod m (4.15) where A 1 ; : : : ; A
Reference: 73. <author> H. Leeb and S. Wegenkittl, </author> <title> Inversive and linear congruential pseudorandom number generators in selected empirical tests, </title> <booktitle> ACM Transactions on Modeling and Computer Simulation, </booktitle> <year> (1996). </year> <note> Submitted. </note>
Reference-contexts: So, the best the designer can do (after the generator has been properly designed) is to apply a wide variety of tests that tend to detect defects of different natures. Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [45, 59, 68, 67, 64, 81, 73] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 74. <author> D. H. Lehmer, </author> <title> Mathematical methods in large scale computing units, </title> <note> Annals Comp. </note> <institution> Laboratory Harvard University, </institution> <month> 26 </month> <year> (1951), </year> <pages> pp. 141-146. </pages>
Reference-contexts: Good generators typically have their ae very close to jSj (otherwise, there is a waste of computer memory). 4.1.2 Example: Linear Congruential Generators Example 1 The best-known and (still) most widely used types of generators are the simple linear congruential generators (LCGs) <ref> [53, 56, 74] </ref>.
Reference: 75. <author> P. A. W. Lewis, A. S. Goodman, and J. M. Miller, </author> <title> A pseudo-random number generator for the system/360, </title> <journal> IBM System's Journal, </journal> <volume> 8 (1969), </volume> <pages> pp. 136-143. </pages>
Reference-contexts: For a concrete illustration, let m = 2 31 1 = 2147483647, c = 0, and a = 16807. These parameters were originally proposed in <ref> [75] </ref>. Take x 0 = 12345. <p> It is used in the GPSS/H simulation environment. The second multiplier, a = 16807, was originally proposed in <ref> [75] </ref>, is suggested in many simulation books and papers (e.g., [7, 96, 103]) and appears in several software systems such as the SLAM II and SIMAN simulation programming languages, the IMSL statistical library, and in operating systems for the IBM and Macintosh computers. It satisfies the condition (4.5).
Reference: 76. <author> T. G. Lewis and W. H. Payne, </author> <title> Generalized feedback shift register pseudorandom number algorithm, </title> <journal> Journal of the ACM, </journal> <volume> 20 (1973), </volume> <pages> pp. 456-468. </pages>
Reference: 77. <author> M. L uscher, </author> <title> A portable high-quality random number generator for lattice field theory simulations, </title> <journal> Computer Physics Communications, </journal> <volume> 79 (1994), </volume> <pages> pp. 100-110. </pages>
Reference-contexts: Obviously, this is bad. 4.3. LINEAR-TYPE METHODS 37 Perhaps one way to get around this problem is to take only k successive output values, then skip (say) values, take another k successive ones, skip another , and so on. Luscher <ref> [77] </ref> has proposed such an approach, with specific values of for a specific SWB generator, with theoretical justification based on chaos theory.
Reference: 78. <author> N. M. MacLaren, </author> <title> A limit on the usable length of a pseudorandom sequence, </title> <journal> Journal of Statistical Computing and Simulation, </journal> <volume> 42 (1992), </volume> <pages> pp. 47-54. </pages>
Reference-contexts: What is long enough? Suppose a simulation experiment takes N random numbers from a sequence of length ae. Several reasons justify the need to take ae &gt;> N ; see, e.g., <ref> [20, 60, 78, 92, 101] </ref>. Based on geometric arguments, Ripley [101] suggests ae &gt;> N 2 for linear congruential generators. Our previous discussion also supports the view that ae must be huge in general.
Reference: 79. <author> G. Marsaglia, </author> <title> A current view of random number generators, </title> <booktitle> in in Computer Science and Statistics, Sixteenth Symposium on the Interface, </booktitle> <publisher> North-Holland, </publisher> <address> Am-sterdam, 1985, </address> <publisher> Elsevier Science Publishers, </publisher> <pages> pp. 3-10. </pages> <note> 80. , Yet another rng. Posted to the electronic billboard sci.stat.math, August 1, 1994. 81. , Diehard: A battery of tests of randomness. Available via WWW at http://stat.fsu.edu/geo/diehard.html, 1996. 82. , The Marsaglia random number CDROM. Available via WWW at http://stat.fsu.edu/geo/, 1996. </note>
Reference-contexts: See <ref> [10, 53, 56, 58, 79] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. <p> See [10, 53, 56, 58, 79] and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. Some authors (e.g., <ref> [8, 42, 79] </ref>) have also given theoretical results which (on the surface) appear to "prove" that the output of a combined generator is "more random" than (or at least "as random" as) the output of each of its components. <p> A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND [23]. A newer battery of tests is DIEHARD, designed by Marsaglia <ref> [79, 81] </ref>. It contains more stringent tests than those in [53], in the sense that more generators tend to fail some of the tests. References to other statistical tests can be found in [59, 60, 68, 67, 65, 105]. Simply testing uniformity, or pair correlations, is far from enough.
Reference: 83. <author> G. Marsaglia and A. Zaman, </author> <title> A new class of random number generators, </title> <journal> The Annals of Applied Probability, </journal> <volume> 1 (1991), </volume> <pages> pp. 462-480. </pages>
Reference-contexts: As in [14, 16, 80], we call this a Multiply-with-Carry (MWC) generator. The idea was suggested in <ref> [54, 83] </ref>. The recurrence looks like that of an MRG, except that a carry c n is propagated between the steps. What is the effect of this carry? Assume that b is a power of two, which is very nice form the implementation viewpoint. <p> Marsaglia [80] proposed two specific parameter sets. They are analyzed in [16], where a better set of parameters, in terms of the lattice structure of the LCG is also given. Special cases of the MWC include the add-with-carry (AWC) and subtract-with-borrow (SWB) generators, originally proposed Marsaglia and Zaman <ref> [83] </ref> and subsequently analyzed in [13, 111]. For the AWC, put a r = a k = a 0 = 1 for 0 &lt; r &lt; k and all other a ` equal to zero.
Reference: 84. <author> K. Marse and S. D. Roberts, </author> <title> Implementing a portable FORTRAN uniform (0,1) generator, Simulation, </title> <booktitle> 41 (1983), </booktitle> <pages> pp. 135-139. </pages>
Reference-contexts: It satisfies the condition (4.5). The multiplier a = 630360016 was proposed in [97], is recommended in <ref> [56, 84] </ref> among others, and is used in software such as the SIMSCRIPT II.5 and INSIGHT simulation programming languages. Generator G4, with modulus m = 2 31 and multiplier a = 65539, is the infamous RANDU generator, used for a long time in the IBM/360 operating system.
Reference: 85. <author> M. Mascagni, M. L. Robinson, D. V. Pryor, and S. A. Cuccaro, </author> <title> Parallel pseudorandom number generation using additive lagged-fibonacci recursions, in Monte Carlo and Quasi-Monte Carlo Methods in Scientific Computing, </title> <editor> H. Niederre 58 iter and P. J.-S. Shiue, eds., </editor> <volume> no. </volume> <booktitle> 106 in Lecture Notes in Statistics, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 263-277. </pages>
Reference-contexts: For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 21, 85, 98] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada grant # OGP0110050 and FCAR-Quebec grant # 93-ER-1654. Thanks to Jerry Banks, Raymond Couture, Hans Leeb, and Thierry Moreau for their helpful comments.
Reference: 86. <author> M. Matsumoto and Y. Kurita, </author> <title> Twisted GFSR generators, </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 2 (1992), </volume> <pages> pp. 179-194. </pages> <month> 87. </month> , <title> Twisted GFSR generators II, </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 4 (1994), </volume> <pages> pp. 254-266. </pages> <month> 88. </month> , <title> Strong deviations from randomness in m-sequences based on trinomials, </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <note> 6 (1996). To appear. </note>
Reference-contexts: An interesting idea is to "twist" the recurrence (4.17) slightly so that each a i I is replaced by a matrix A i such that the corresponding recurrence (4.15) has full period length m kL 1 while its implementation remains essentially as fast as (4.17). Matsumoto and Kurita <ref> [86, 87] </ref> proposed a specific way to do this for GFSR generators and called the resulting generators twisted GFSR (TGFSR).
Reference: 89. <author> T. Moreau, </author> <title> A practical "perfect" pseudo-random number generator. </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: The speed of the generator slows down with k, since at each step we must square a 2k-bit integer modulo another 2k-bit integer. An implementation based on fast modular multiplication is proposed by Moreau <ref> [89] </ref>. 4.5. EMPIRICAL STATISTICAL TESTING 45 Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See [55, 71, 5] for overviews and discussions.

Reference: 96. <author> S. K. Park and K. W. Miller, </author> <title> Random number generators: Good ones are hard to find, </title> <journal> Communications of the ACM, </journal> <volume> 31 (1988), </volume> <pages> pp. 1192-1201. </pages>
Reference-contexts: Then, for any positive integer x &lt; m, the 20 following instructions have the same effect as the assignment x := ax mod m, but with all intermediate (integer) results remaining strictly between m and m (see <ref> [7, 57, 96] </ref>): y := bx=qc; IF x &lt; 0 THEN x := x + m END. As an illustration, if m = 2 31 1 and a = 16807, then the generator satisfies the condition, since 16807 &lt; p m. <p> It is used in the GPSS/H simulation environment. The second multiplier, a = 16807, was originally proposed in [75], is suggested in many simulation books and papers (e.g., <ref> [7, 96, 103] </ref>) and appears in several software systems such as the SLAM II and SIMAN simulation programming languages, the IMSL statistical library, and in operating systems for the IBM and Macintosh computers. It satisfies the condition (4.5).
Reference: 97. <author> W. H. Payne, J. R. Rabung, and T. P. Bogyo, </author> <title> Coding the lehmer pseudorandom number generator, </title> <journal> Communications of the ACM, </journal> <volume> 12 (1969), </volume> <pages> pp. 85-86. </pages>
Reference-contexts: It satisfies the condition (4.5). The multiplier a = 630360016 was proposed in <ref> [97] </ref>, is recommended in [56, 84] among others, and is used in software such as the SIMSCRIPT II.5 and INSIGHT simulation programming languages.
Reference: 98. <author> D. E. Percus and M. Kalos, </author> <title> Random number generators for MIMD parallel 4.6. PRACTICAL RANDOM NUMBER PACKAGES 59 processors, </title> <journal> Journal of Parallel and Distributed Computation, </journal> <volume> 6 (1989), </volume> <pages> pp. 477-497. </pages>
Reference-contexts: For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 21, 85, 98] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada grant # OGP0110050 and FCAR-Quebec grant # 93-ER-1654. Thanks to Jerry Banks, Raymond Couture, Hans Leeb, and Thierry Moreau for their helpful comments.

References-found: 66

