URL: file://ftp.cs.ucla.edu/pub/ficus/usenix_summer_94_resolver.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/ficus-members/gds/home-page.html
Root-URL: http://www.cs.ucla.edu
Title: Resolving File Conflicts in the Ficus File System  
Author: Peter Reiher, John Heidemann, David Ratner, Greg Skinner, Gerald Popek 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract: Ficus is a flexible replication facility with optimistic concurrency control designed to span a wide range of scales and network environments. Optimistic con-currency control provides rapid local access and high availability of files for update in the face of disconnection, at the cost of occasional conflicts that are only discovered when the system is reconnected. Ficus reliably detects all possible conflicts. Many conflicts can be automatically resolved by recognizing the file type and understanding the file's semantics. This paper describes experiences with conflicts and automatic conflict resolution in Ficus. It presents data on the frequency and character of conflicts in our environment. This paper also describes how semantically knowledgeable resolvers are designed and implemented, and discusses our experiences with their strengths and limitations. We conclude from our experience that optimistic concurrency works well in at least one realistic environment, conflicts are rare, and a large proportion of those conflicts that do occur can be automatically solved without human intervention. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Susan B. Davidson, Hector Garcia-Molina, and Dale Skeen. </author> <title> Consistency in partitioned networks. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(3) </volume> <pages> 341-370, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: Much of the value of replication is based on all replicas being identical, so inconsistent updates are a potentially serious problem. Early solutions to the problem relied on various conservative algorithms that prevented conflicting updates to different replicas <ref> [1] </ref>. These solutions used a wide variety of mechanisms, but their common theme is that they refuse updates that have any possibility of causing conflicting updates. These solutions trade availability for consistency. When consistency of replicas is of vital importance, conservative solutions are preferable.
Reference: [2] <author> Sergio Zarur Faissol. </author> <title> Operation of Distributed Database Systems Under Network Partition. </title> <type> Ph.D. dissertation, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1981. </year>
Reference-contexts: Version vectors were used in the university Locus operating system [15, 17], a system that provided data replication and dealt with partitioned operation. However, the Locus system never dealt substantively with the problems of conflicting updates. Sergio Faissol's Ph.D. dissertation examined this question in the context of databases <ref> [2] </ref>. He investigated several classes of information that could be stored in a database, how independent updates to those classes of information could be reconciled, and the information required to perform the necessary reconciliation. His work was primarily theoretical, and was never applied to file systems.
Reference: [3] <author> Richard G. Guy. Ficus: </author> <title> A Very Large Scale Reliable Distributed File System. </title> <type> Ph.D. dissertation, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> June </month> <year> 1991. </year> <note> Also available as UCLA technical report CSD-910018. </note>
Reference-contexts: Thus, conflicts in directories are very serious. Either they must not occur often, or they must be resolved automatically. Ficus directory conflicts are repaired automatically during reconciliation. As shown in <ref> [4, 3] </ref>, all conflicts that can occur in a Unix directory can be automatically resolved, except for name conflicts.
Reference: [4] <author> Richard G. Guy, John S. Heidemann, Wai Mak, Thomas W. Page, Jr., Gerald J. Popek, and Dieter Roth-meier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: A hypothesis of this paper is that the cost of optimism is low in many environments. To test this hypothesis, this paper reports conflict resolution experiences with Ficus, an optimistic file system developed at UCLA <ref> [4] </ref>. Ficus has supported the primary computing needs of over a dozen users at UCLA for more than three years. Ficus has a general architecture for dealing with file conflicts. Conflicts are automatically detected and examined to determine if they can also be resolved automatically. <p> Section 5 presents conflict data gathered from Ficus; Section 6 discusses some related research. We close with a discussion of future work and some conclusions. 2 Ficus Overview Ficus is a distributed file system utilizing optimistic replication <ref> [16, 4] </ref>. The default synchronization policy provides single copy availability; so long as any copy of a data item is accessible, it may be updated. <p> Thus, conflicts in directories are very serious. Either they must not occur often, or they must be resolved automatically. Ficus directory conflicts are repaired automatically during reconciliation. As shown in <ref> [4, 3] </ref>, all conflicts that can occur in a Unix directory can be automatically resolved, except for name conflicts.
Reference: [5] <author> Richard G. Guy and Gerald J. Popek. </author> <title> Reconciling partially replicated name spaces. </title> <type> Technical Report CSD-900010, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: If the system had left him unsubscribed when he had just recently subscribed, however, the user might not notice that his subscription had been invisibly revoked. This is an example of the create/delete ambiguity described in <ref> [5] </ref>. In some cases, taking one possible action and reporting the action taken to the user may be sufficient. The .newsrc resolver shows a typical characteristic of many resolvers.
Reference: [6] <author> Richard G. Guy, Gerald J. Popek, and Thomas W. Page, Jr. </author> <title> Consistency algorithms for optimistic replication. </title> <booktitle> In Proceedings of the First International Conference on Network Protocols. IEEE, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Partitioned creation of independent files in the same directory would ordinarily result in an update/update conflict on that directory. Since directories are internal to the file system, Ficus automatically resolves this sort of concurrent update, producing the union of all directory changes. (See <ref> [6] </ref> for a description of the algorithms employed in directory management.) A problem occurs when two files are independently created with the same name; Unix requires that each directory entry be unique. We term is kind of directory update/update conflict a name conflict.
Reference: [7] <author> John S. Heidemann, Thomas W. Page, Jr., Richard G. Guy, and Gerald J. Popek. </author> <title> Primarily disconnected operation: Experiences with Ficus. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data. IEEE, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: One reason is that replica reconciliation is scheduled to coordinate the movement of the users with the data of the system, effectively allowing the system's user to act as a human write token <ref> [7] </ref>. While this behavior avoids many conflicts, nevertheless the conflict rate in mostly disconnected volumes is much higher than in other volumes. Table 1 shows the conflict statistics for more than nine months of operation in the UCLA environment. About 0.0035% of all non-directory updates resulted in conflicts.
Reference: [8] <author> John H. Howard. </author> <title> Using reconciliation to share files between occasionally connected computers. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 56-60, </pages> <address> Napa, California, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: No attempt is made to automatically resolve them, though Huston and Hon-eyman do briefly discuss plans to provide tools to help users resolve common types of conflicts. Howard has developed an optimistic reconciliation-based system to permit occasionally connected machines to share files <ref> [8] </ref>. He reliably detects conflicts using a journalling mechanism, but currently makes no attempt to reconcile them. 7 Observations and Conclusions Optimistic file replication in an environment that has any serious degree of disconnection benefits from au tomatic conflict resolution; it can substantially reduce the conflict rate observed by users.
Reference: [9] <author> L. B. Huston and Peter Honeyman. </author> <title> Disconnected operation for AFS. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 1-10. </pages> <publisher> USENIX, </publisher> <year> 1993. </year>
Reference-contexts: More experience with both systems is needed to determine if either approach has a clear advantage in user friendliness. The statistics presented in this paper provide the first step at addressing some of these issues. Huston and Honeyman describe their approach to optimistic replication in disconnected AFS in <ref> [9] </ref>. This system permits updates to cached copies of data at disconnected client sites under AFS. Writes generated by a disconnected client site are logged and replayed when the client is reconnected to a server.
Reference: [10] <author> James J. Kistler and Mahadev Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: These solutions trade availability for consistency. When consistency of replicas is of vital importance, conservative solutions are preferable. However, experience with file access by typical users has shown that many files are only accessed by a single user <ref> [10] </ref>. Of those that are shared by multiple users, few are updated by more than one user. In such environments, a mechanism that prevents one user from updating a file in favor of preserving the update ability of other users who might never generate an update is seriously flawed. <p> While these servers may occasionally fail or become disconnected from each other, they are expected to be more reli-able than the typical single-user workstation machine. Client machines cache replicas of files they actually use, and send the updates back to a server replica <ref> [10] </ref>. The nature of the Coda system makes partitioned first class replicas a less common event than in Ficus. Partitioned update is far more common between first and second class Coda replicas where simpler reconciliation algorithms are possible [10]. <p> they actually use, and send the updates back to a server replica <ref> [10] </ref>. The nature of the Coda system makes partitioned first class replicas a less common event than in Ficus. Partitioned update is far more common between first and second class Coda replicas where simpler reconciliation algorithms are possible [10]. References [11, 12] discuss Coda's log-based approach to conflict resolution between first-class replicas. The design of conflict resolution in Coda is described in [13]. Like the Fi-cus approach, conflict resolvers are provided and are selected by file type.
Reference: [11] <author> Puneet Kumar. </author> <title> Coping with conflicts in an optimisti-cally replicated file system. </title> <booktitle> In Proceedingsof the Workshop on Management of Replicated Data, </booktitle> <pages> pages 60-64. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1990. </year>
Reference-contexts: The nature of the Coda system makes partitioned first class replicas a less common event than in Ficus. Partitioned update is far more common between first and second class Coda replicas where simpler reconciliation algorithms are possible [10]. References <ref> [11, 12] </ref> discuss Coda's log-based approach to conflict resolution between first-class replicas. The design of conflict resolution in Coda is described in [13]. Like the Fi-cus approach, conflict resolvers are provided and are selected by file type.
Reference: [12] <author> Puneet Kumar and Mahadev Satyanarayanan. </author> <title> Log-based directory resolution in the Coda file system. </title> <type> Technical Report CMU-CS-91-164, </type> <institution> Carnegie-Mellon University School of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: The nature of the Coda system makes partitioned first class replicas a less common event than in Ficus. Partitioned update is far more common between first and second class Coda replicas where simpler reconciliation algorithms are possible [10]. References <ref> [11, 12] </ref> discuss Coda's log-based approach to conflict resolution between first-class replicas. The design of conflict resolution in Coda is described in [13]. Like the Fi-cus approach, conflict resolvers are provided and are selected by file type.
Reference: [13] <author> Puneet Kumar and Mahadev Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 66-70, </pages> <address> Napa, California, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Partitioned update is far more common between first and second class Coda replicas where simpler reconciliation algorithms are possible [10]. References [11, 12] discuss Coda's log-based approach to conflict resolution between first-class replicas. The design of conflict resolution in Coda is described in <ref> [13] </ref>. Like the Fi-cus approach, conflict resolvers are provided and are selected by file type. Unlike Ficus, the Coda approach uses files that hold resolution rules that apply to all files in a directory or its subdirectories. These rules are similar in form to rules in a Unix makefile.
Reference: [14] <author> D. Stott Parker, Jr., Gerald Popek, Gerard Rudisin, Allen Stoughton, Bruce J. Walker, Evelyn Walton, Jo-hanna M. Chow, David Edwards, Stephen Kiser, and Charles Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 9(3) </volume> <pages> 240-247, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: In practice, the update propagation mechanism is fast and reliable enough that conflicts unrelated to actual failures or partitioning almost never occur. Ficus detects all types of conflicts using a mechanism known as a version vector <ref> [14] </ref>. Each file replica maintains its own version vector that keeps track of the history of updates to the file. Conflicts are detected by comparing version vectors from two file replicas. Version vectors reliably detect all file conflicts that involve replicas of a single file. <p> This section discusses some of the related work, with particular attention to that concerning optimistic replication, conflicts in optimistically replicated systems, and automatic resolution of such conflicts. Parker's work on version vectors was an important early step in optimistic file replication <ref> [14] </ref>. It permitted reliable detection of independent updates to different replicas of a data item with limited and reasonable costs for maintaining the necessary information. Version vectors were used in the university Locus operating system [15, 17], a system that provided data replication and dealt with partitioned operation.
Reference: [15] <author> Gerald Popek, Bruce Walker, Johanna Chow, David Ed-wards, Charles Kline, Gerald Rudisin, and Greg Thiel. </author> <title> LOCUS: A network transparent, high reliability distributed system. </title> <booktitle> In Proceedings of the Eighth Symposium on Operating Systems Principles, </booktitle> <pages> pages 169-177. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1981. </year>
Reference-contexts: Parker's work on version vectors was an important early step in optimistic file replication [14]. It permitted reliable detection of independent updates to different replicas of a data item with limited and reasonable costs for maintaining the necessary information. Version vectors were used in the university Locus operating system <ref> [15, 17] </ref>, a system that provided data replication and dealt with partitioned operation. However, the Locus system never dealt substantively with the problems of conflicting updates. Sergio Faissol's Ph.D. dissertation examined this question in the context of databases [2].
Reference: [16] <author> Gerald J. Popek, Richard G. Guy, Thomas W. Page, Jr., and John S. Heidemann. </author> <title> Replication in Ficus distributed file systems. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 20-25. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1990. </year>
Reference-contexts: Section 5 presents conflict data gathered from Ficus; Section 6 discusses some related research. We close with a discussion of future work and some conclusions. 2 Ficus Overview Ficus is a distributed file system utilizing optimistic replication <ref> [16, 4] </ref>. The default synchronization policy provides single copy availability; so long as any copy of a data item is accessible, it may be updated.
Reference: [17] <author> Gerald J. Popek and Bruce J. Walker. </author> <title> The Locus Distributed System Architecture. </title> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: Parker's work on version vectors was an important early step in optimistic file replication [14]. It permitted reliable detection of independent updates to different replicas of a data item with limited and reasonable costs for maintaining the necessary information. Version vectors were used in the university Locus operating system <ref> [15, 17] </ref>, a system that provided data replication and dealt with partitioned operation. However, the Locus system never dealt substantively with the problems of conflicting updates. Sergio Faissol's Ph.D. dissertation examined this question in the context of databases [2].

References-found: 17

