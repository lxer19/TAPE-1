URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P246.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/preprints.htm
Root-URL: http://www.mcs.anl.gov
Title: A PARALLEL GRAPH COLORING HEURISTIC  
Phone: 60439  
Author: Mark T. Jones and Paul E. Plassmann 
Keyword: Key words: distributed memory computers, graph coloring heuristics, parallel algorithms, random algorithms, sparse matrices  
Note: AMS(MOS) subject classifications: 65F10, 65F50, 65Y05, 68Q22, 68R10 This work was supported by the Applied Mathematical Sciences subprogram of the Office of Energy Research, U.S. Department of Energy, under Contract W-31-109-Eng-38.  
Date: June 1991 (Revised February 1992)  
Address: 9700 South Cass Avenue Argonne, Illinois  Preprint MCS-P246-0691  
Affiliation: ARGONNE NATIONAL LABORATORY  Mathematics and Computer Science Division  
Abstract: The problem of computing good graph colorings arises in many diverse applications, such as in the estimation of sparse Jacobians and in the development of efficient, parallel iterative methods for solving sparse linear systems. In this paper we present an asynchronous graph coloring heuristic well suited to distributed memory parallel computers. We present experimental results obtained on an Intel iPSC/860 which demonstrate that, for graphs arising from finite element applications, the heuristic exhibits scalable performance and generates colorings usually within three or four colors of the best-known linear time sequential heuristics. For bounded degree graphs, we show that the expected running time of the heuristic under the P-RAM computation model is bounded by EO(log(n)= log log(n)). This bound is an improvement over the previously known best upper bound for the expected running time of a random heuristic for the graph coloring problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. </author> <title> Bollob as, Graph Theory, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: A sequential greedy coloring heuristic It is known that an optimal coloring can be obtained with a greedy heuristic if the vertices are visited in the correct order <ref> [1] </ref>. The basic structure of the greedy heuristic is shown in Figure 1. The only aspect of the sequential heuristic that must be specified is the rule for choosing the vertex v i . Many strategies for obtaining this vertex ordering have been proposed.
Reference: [2] <author> D. Br elaz, </author> <title> New methods to color the vertices of a graph, </title> <journal> Comm. ACM, </journal> <volume> 22 (1979), </volume> <pages> pp. 251-256. </pages>
Reference-contexts: The only aspect of the sequential heuristic that must be specified is the rule for choosing the vertex v i . Many strategies for obtaining this vertex ordering have been proposed. One of the most effective heuristics is the saturation degree ordering (SDO) suggested by Brelaz <ref> [2] </ref>. The SDO vertex ordering is defined as follows. Suppose that vertices v 1 ; : : : ; v i1 have been chosen and colored.
Reference: [3] <author> T. F. Coleman and J. J. Mor e, </author> <title> Estimation of sparse Jacobian matrices and graph coloring problems, </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 20 (1983), </volume> <pages> pp. 187-209. </pages>
Reference-contexts: 1. Introduction. The determination of the chromatic number of a general graph is a well-known NP-hard problem [4]. However, a number of practical problems require the determination of nearly optimal graph colorings. For example, it has been shown <ref> [3] </ref> that the problem of directly estimating a sparse Jacobian by finite differences with a minimum number of function evaluations is equivalent to a graph coloring problem. <p> For graphs arising from a number of applications, it has been demonstrated that these heuristics are often able to find colorings that are within one or two of an optimal coloring <ref> [3, 7] </ref>. V V ; Choose a vertex v i from V 0 oe (v i ) = smallest available consistent color; V V n fv i g; enddo Fig. 1. <p> Note that this heuristic can be implemented to run in time proportional to P v2V deg 2 (v), where deg (v) is the degree of vertex v. A modification of the SDO heuristic is the incidence degree ordering (IDO) introduced by Coleman and More in their work <ref> [3] </ref> on using coloring heuristics to obtain consistent partitions for sparse Jacobian estimation. The IDO vertex ordering has the advantage that its running time is a linear function of the number of edges.
Reference: [4] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: 1. Introduction. The determination of the chromatic number of a general graph is a well-known NP-hard problem <ref> [4] </ref>. However, a number of practical problems require the determination of nearly optimal graph colorings. For example, it has been shown [3] that the problem of directly estimating a sparse Jacobian by finite differences with a minimum number of function evaluations is equivalent to a graph coloring problem. <p> The minimum possible value for s is known as the chromatic number 1 of G, which we denote as O (G). The question as to whether a general graph G is s-colorable is NP-complete <ref> [4] </ref>. It is known that unless P = NP , there does not exist a polynomial approximation scheme for solving the graph coloring problem [4]. <p> The question as to whether a general graph G is s-colorable is NP-complete <ref> [4] </ref>. It is known that unless P = NP , there does not exist a polynomial approximation scheme for solving the graph coloring problem [4]. In fact, the best polynomial time heuristic known [6] can theoretically guarantee a coloring of only size c (n= log n) O (G), where c is some constant.
Reference: [5] <author> J. L. Gustafson, G. R. Montry, and R. E. Benner, </author> <title> Development of parallel methods for a 1024-processor hypercube, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 9 (1988), </volume> <pages> pp. 609-638. </pages>
Reference-contexts: This optimization is included in the initialization section of Figure 6. 5. Experimental Results. We have implemented the heuristic described in section we present results obtained with this implementation. One of our main objectives is to demonstrate the scalability of this heuristic consistent with the definition given in <ref> [5] </ref>. <p> The results shown in Table 5 through Table 12 demonstrate the scalable performance of the heuristic: for a fixed number of nonzeros per processor, the time required by the global and local phases is essentially constant <ref> [5] </ref>. Note that as the size of G S increases, the average number of messages sent per processor gradually increases. By maintaining a reasonable average message size, the high communication overhead on the iPSC/860 can be partially amortized.
Reference: [6] <author> D. S. Johnson, </author> <title> Worst case behavior of graph coloring algorithms, </title> <booktitle> in Proceedings 5th Southeastern Conference on Combinatorics, Graph Theory, and Computing, </booktitle> <publisher> Utilitas Mathematica Publishing, </publisher> <address> Winnipeg, </address> <year> 1974, </year> <pages> pp. 513-527. </pages>
Reference-contexts: The question as to whether a general graph G is s-colorable is NP-complete [4]. It is known that unless P = NP , there does not exist a polynomial approximation scheme for solving the graph coloring problem [4]. In fact, the best polynomial time heuristic known <ref> [6] </ref> can theoretically guarantee a coloring of only size c (n= log n) O (G), where c is some constant. Given these pessimistic theoretical results, it is quite surprising that, for certain classes of graphs, there exist a number of sequential graph coloring heuristics that are very effective in practice.
Reference: [7] <author> M. T. Jones and P. E. Plassmann, </author> <title> Scalable iterative solution of sparse linear systems, </title> <type> Preprint MCS-P277-1191, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1991. </year>
Reference-contexts: For graphs arising from a number of applications, it has been demonstrated that these heuristics are often able to find colorings that are within one or two of an optimal coloring <ref> [3, 7] </ref>. V V ; Choose a vertex v i from V 0 oe (v i ) = smallest available consistent color; V V n fv i g; enddo Fig. 1.
Reference: [8] <author> M. Luby, </author> <title> A simple parallel algorithm for the maximal independent set problem, </title> <journal> SIAM Journal on Computing, </journal> <volume> 4 (1986), </volume> <pages> pp. 1036-1053. </pages>
Reference-contexts: The initial phase maintains the good expected running time bounds obtained for a Monte Carlo algorithm for determining a maximal independent set <ref> [8] </ref>. In fact, for bounded degree graphs, we show that an upper bound for the expected running time of our heuristic under the P-RAM computation model is EO (log (n)= log log (n)). <p> For each vertex v 2 V 0 determine a distinct, random number ae (v). 2. v 2 I , ae (v) &gt; ae (w); 8 w 2 adj (v). In the Monte Carlo algorithm described by Luby <ref> [8] </ref>, this initial independent set is augmented to obtain a maximal independent set. The approach is the following. After the initial independent set is found, the set of vertices adjacent to a vertex in I, the neighbor set N (I), is determined. <p> An asynchronous parallel coloring heuristic the system. It is reasonable, therefore, to consider the model problem of a graph G with n vertices and bounded degree . Since we assume that is bounded, the previous work by Luby <ref> [8] </ref> shows that a random heuristic for the ( + 1) vertex coloring problem can be accomplished on the P-RAM model in EO (log (n)) time. As discussed above, this heuristic is based on a synchronous random algorithm for determining a sequence of maximal independent sets. <p> This bound is an improvement over the EO (log (n)) upper bound obtained by Luby <ref> [8] </ref>. The bound given in Theorem 3.3 yields a surprisingly close fit to what we have observed in practice. In Figure 5 we compare the bound for EX with our experimental results for regular graphs of degree 4. <p> In the above analysis, note that the probability that there exists a monotonic path of length greater than t asymptotically decays faster than exponentially. Thus, the bounds on the expected running time hold with very high probability. In addition, Luby <ref> [8] </ref> gives a prescription for converting his Monte Carlo MIS algorithm into a deterministic algorithm with the same running time. Hence, these heuristics are fundamentally different from those based on simulated annealing.
Reference: [9] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning sparse matrices with eigenvectors of graphs, </title> <journal> SIAM Journal on Matrix Analysis, </journal> <volume> 11 (1990), </volume> <pages> pp. 430-452. </pages>
Reference-contexts: When the determination of a partition is not straightforward, a partitioning heuristic would have to be used. For example, recent advances in the automatic partitioning of three dimensional domains [11] or in spectral dissection methods <ref> [9] </ref> could be employed. We note that a partitioning that maintains locality is advantageous, although not essential, to the performance of the parallel heuristic. The heuristic requires only that the number of vertices assigned per processor allow for good load balancing.
Reference: [10] <author> R. Schreiber and W.-P. Tang, </author> <title> Vectorizing the conjugate gradient method. </title> <type> Unpublished manuscript, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1982. </year>
Reference-contexts: For example, it has been shown [3] that the problem of directly estimating a sparse Jacobian by finite differences with a minimum number of function evaluations is equivalent to a graph coloring problem. Also, it has been shown <ref> [10] </ref> that the minimum number of parallel steps in the solution of the triangular systems involving incomplete Cholesky factors can be obtained by a matrix reordering derived from the solution of a graph coloring problem.
Reference: [11] <author> S. Vavasis, </author> <title> Automatic domain partitioning in three dimensions, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 12 (1991), </volume> <pages> pp. 950-970. 20 </pages>
Reference-contexts: For many problems a physical partition can be used to generate a good vertex to processor assignment. When the determination of a partition is not straightforward, a partitioning heuristic would have to be used. For example, recent advances in the automatic partitioning of three dimensional domains <ref> [11] </ref> or in spectral dissection methods [9] could be employed. We note that a partitioning that maintains locality is advantageous, although not essential, to the performance of the parallel heuristic. The heuristic requires only that the number of vertices assigned per processor allow for good load balancing.
References-found: 11

