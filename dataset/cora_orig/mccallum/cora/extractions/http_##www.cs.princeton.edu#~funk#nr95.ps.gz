URL: http://www.cs.princeton.edu/~funk/nr95.ps.gz
Refering-URL: http://www.cs.princeton.edu/~funk/
Root-URL: http://www.cs.princeton.edu
Title: Network Services for Multi-User Virtual Environments  
Author: Thomas A. Funkhouser 
Address: Murray Hill, NJ  
Affiliation: AT&T Bell Laboratories  
Abstract: This paper describes network services to support large multi-user virtual environments. A client-server design is proposed in which multiple servers coordinate execution, manage communication, offload processing, and provide persistent storage for their clients. Using this design, it is possible to support real-time features, such as collision detection, voice bridging, persistent updates, physical simulation, and autonomous agents, that would be difficult to implement for large virtual environments with a peer-to-peer design. The paper includes a description of services being implemented in RING, a client-server system for interaction between many users in large virtual environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Airey, John M., John H. Rohlf, and Freder-ick P. Brooks, Jr., </author> <title> Towards Image Realism with Interactive Update Rates in Complex Virtual Building Environments. </title> <journal> ACM SIG-GRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </journal> <volume> 24, 2 (1990), </volume> <pages> 41-50. </pages>
Reference-contexts: Naive algorithms for detecting interactions between n entities execute in O (n 2 ) and require up-to-date locations for all n entities. More efficient algorithms use spatial data structures [7, 14] and/or precomputed regional interactions <ref> [1, 17] </ref> to search for potential interactions. In any case, typical interaction detection algorithms for large virtual environments require more processing power, storage capacity, and/or network bandwidth than is available on affordable client computers.
Reference: [2] <author> Blanchard, C., S. Gurgess, Y. Harvill, J. Lanier, A. Lasko, M. Oberman, and M. Tei-tel, </author> <title> Reality Built for Two: A Virtual Reality Tool. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <address> (Snowbird, Utah), </address> <year> 1990, </year> <pages> 35-36. </pages>
Reference-contexts: There are several examples of multi-user virtual environments available in research and commercial systems today. First, various research systems allow simple multi-user interactions in 3D virtual environments <ref> [2, 6] </ref>. Second, commercial multi-player games allow a small number of users to play in a shared 3D gaming experience [9]. Third, MUDs and chat groups allow hundreds of people to interact via text over networks in real-time [8]. <p> Historically, most multi-user virtual environment systems have been built using a peer-to-peer communication design. Clients store replicate copies of the virtual environment and maintain consistent state by passing messages via point-to-point <ref> [2, 15] </ref>, multicast [5, 13], and/or broadcast networks [3, 4] (see Figure 2). The difficulty with peer-to-peer system designs is that they don't scale well.
Reference: [3] <author> Blau, Brian, Charles E. Hughes, Michael J. Moshell, and Curtis Lisle, </author> <title> Networked Virtual Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <address> (Cambridge, MA), </address> <year> 1992, </year> <pages> 157-164. </pages>
Reference-contexts: Historically, most multi-user virtual environment systems have been built using a peer-to-peer communication design. Clients store replicate copies of the virtual environment and maintain consistent state by passing messages via point-to-point [2, 15], multicast [5, 13], and/or broadcast networks <ref> [3, 4] </ref> (see Figure 2). The difficulty with peer-to-peer system designs is that they don't scale well. Generally, every client must store a representation for every entity, every client must process messages for every entity, and every client must simulate behavior for every entity in the virtual environment.
Reference: [4] <author> Calvin, James, Alan Dickens, Bob Gaines, Paul Metzger, Dale Miller, and Dan Owen, </author> <title> The SIMNET Virtual World Architecture. </title> <booktitle> Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September, </month> <year> 1993, </year> <pages> 450-455. </pages>
Reference-contexts: Third, MUDs and chat groups allow hundreds of people to interact via text over networks in real-time [8]. Finally, military simulators allow up to a few hundred soldiers to train simultaneously on a shared virtual battlefield <ref> [4, 13] </ref>. Although there are many examples of interactive, real-time applications with a shared experience between multiple users, none of them provides the important combination of real-time graphics, real-time voice, and persistent data; and none scales to a very large number of users. <p> Historically, most multi-user virtual environment systems have been built using a peer-to-peer communication design. Clients store replicate copies of the virtual environment and maintain consistent state by passing messages via point-to-point [2, 15], multicast [5, 13], and/or broadcast networks <ref> [3, 4] </ref> (see Figure 2). The difficulty with peer-to-peer system designs is that they don't scale well. Generally, every client must store a representation for every entity, every client must process messages for every entity, and every client must simulate behavior for every entity in the virtual environment.
Reference: [5] <author> Carlsson, Christer, and Olof Hafsand, Dive: </author> <title> A Multi-User Virtual Reality System. </title> <booktitle> Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September, </month> <year> 1993, </year> <pages> 394-401. </pages>
Reference-contexts: Historically, most multi-user virtual environment systems have been built using a peer-to-peer communication design. Clients store replicate copies of the virtual environment and maintain consistent state by passing messages via point-to-point [2, 15], multicast <ref> [5, 13] </ref>, and/or broadcast networks [3, 4] (see Figure 2). The difficulty with peer-to-peer system designs is that they don't scale well.
Reference: [6] <author> Codella, C., R. Jalili, L. Koved, J.B. Lewis, D.T. Ling, J.S. Lipscomb, D.A. Rabenhorst, C.P. Wang, A. Norton, P. Sweeney, and G. Turk, </author> <title> Interactive Simulation in a Multi-Person Virtual World. </title> <booktitle> Proceedings of CHI`92, </booktitle> <month> May, </month> <year> 1992, </year> <pages> 329-334. </pages>
Reference-contexts: There are several examples of multi-user virtual environments available in research and commercial systems today. First, various research systems allow simple multi-user interactions in 3D virtual environments <ref> [2, 6] </ref>. Second, commercial multi-player games allow a small number of users to play in a shared 3D gaming experience [9]. Third, MUDs and chat groups allow hundreds of people to interact via text over networks in real-time [8].
Reference: [7] <author> Cohen, J.D., M. C. Lin, D. Manocha, and M. K. Ponamgi. I-COLLIDE: </author> <title> An Interactive and Exact Collision Detection System for Large-Scale Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1995 Symposium on Interactive 3D Graphics, </booktitle> <address> (Monterey, CA), </address> <year> 1995, </year> <pages> 189-196. </pages>
Reference-contexts: Naive algorithms for detecting interactions between n entities execute in O (n 2 ) and require up-to-date locations for all n entities. More efficient algorithms use spatial data structures <ref> [7, 14] </ref> and/or precomputed regional interactions [1, 17] to search for potential interactions. In any case, typical interaction detection algorithms for large virtual environments require more processing power, storage capacity, and/or network bandwidth than is available on affordable client computers.
Reference: [8] <author> Curtis, Pavel. Mudding: </author> <title> Social Phenomena in Text-Based Virtual Reality. </title> <booktitle> 1992 conference on Directions and Implications of Advanced Computing, </booktitle> <year> 1992. </year>
Reference-contexts: Second, commercial multi-player games allow a small number of users to play in a shared 3D gaming experience [9]. Third, MUDs and chat groups allow hundreds of people to interact via text over networks in real-time <ref> [8] </ref>. Finally, military simulators allow up to a few hundred soldiers to train simultaneously on a shared virtual battlefield [4, 13].
Reference: [9] <institution> Doom. id Software, Mesquite, TX, </institution> <year> 1993. </year>
Reference-contexts: There are several examples of multi-user virtual environments available in research and commercial systems today. First, various research systems allow simple multi-user interactions in 3D virtual environments [2, 6]. Second, commercial multi-player games allow a small number of users to play in a shared 3D gaming experience <ref> [9] </ref>. Third, MUDs and chat groups allow hundreds of people to interact via text over networks in real-time [8]. Finally, military simulators allow up to a few hundred soldiers to train simultaneously on a shared virtual battlefield [4, 13].
Reference: [10] <author> Funkhouser, Thomas A. </author> <title> RING: A Client-Server System for Multi-User Virtual Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1995 Symposium on Interactive 3D Graphics, </booktitle> <address> (Monterey, CA), </address> <year> 1995, </year> <pages> 85-92. </pages>
Reference-contexts: Additionally, fully distributed algorithms must be used to synchronize access to shared data. The focus of this paper is to investigate services that can be provided to support multi-user virtual environments via a client-server design <ref> [10, 12, 16] </ref>. The idea is to include multiple server computers that perform processing and manage communication for their clients. <p> For the remainder of this paper, we describe and discuss services that are being included in servers for a multi-user virtual environment system called RING (Real-time Interactive Networked Graphics) <ref> [10] </ref>. <p> It would be difficult to duplicate these results in a peer-to-peer system since the storage for precomputed visibility regions and the network bandwidth for periodic messages would exceed the capabilities of most client computers. See <ref> [10] </ref> for more details. the updates. Another advantage of message servers is that distribution of messages for high-level management of the virtual environment can be performed by servers without the involvement of every client.
Reference: [11] <author> Horn, David, and Atul Sharma. </author> <title> A Versatile Audio Bridge for Multimedia Conferencing. </title> <institution> AT&T Bell Laboratories Technical Memorandum BL0113870-931210-05TM, </institution> <month> December, </month> <year> 1993. </year>
Reference-contexts: The process of combining n input voice streams and producing a single output stream is called voice bridging. Currently available voice bridges generally use DSP processors to produce n output voice streams as weighted sums of n input voice streams <ref> [11] </ref>. This type of voice bridge can be represented by a matrix with element a i;j corresponding to the gain of input i for output j . Conceptually, inputs come in on the left (rows) and are weighted to form outputs which come out on the bottom (columns).
Reference: [12] <author> Kazman, Rick, </author> <title> Making WAVES: On the Design of Architectures for Low-end Distributed Virtual Environments. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September </month> <year> 1993, </year> <pages> 443-449. </pages>
Reference-contexts: Additionally, fully distributed algorithms must be used to synchronize access to shared data. The focus of this paper is to investigate services that can be provided to support multi-user virtual environments via a client-server design <ref> [10, 12, 16] </ref>. The idea is to include multiple server computers that perform processing and manage communication for their clients.
Reference: [13] <author> Macedonia, Michael, R. Michael J. Zyda, David R. Pratt, and Paul T Barham, </author> <title> Exploiting Reality with Multicast Groups: A Network Architecture for Large Scale Virtual Environments. </title> <booktitle> To appear in Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: Third, MUDs and chat groups allow hundreds of people to interact via text over networks in real-time [8]. Finally, military simulators allow up to a few hundred soldiers to train simultaneously on a shared virtual battlefield <ref> [4, 13] </ref>. Although there are many examples of interactive, real-time applications with a shared experience between multiple users, none of them provides the important combination of real-time graphics, real-time voice, and persistent data; and none scales to a very large number of users. <p> Historically, most multi-user virtual environment systems have been built using a peer-to-peer communication design. Clients store replicate copies of the virtual environment and maintain consistent state by passing messages via point-to-point [2, 15], multicast <ref> [5, 13] </ref>, and/or broadcast networks [3, 4] (see Figure 2). The difficulty with peer-to-peer system designs is that they don't scale well.
Reference: [14] <author> Naylor, Bruce F., John Amanatides, and William C. Thibault. </author> <title> Merging BSP Trees Yields Polyhedral Set Operations. </title> <journal> Computer Graphics (SIGGRAPH `90). </journal> <volume> 24, 4, </volume> <pages> 115-124. </pages>
Reference-contexts: Naive algorithms for detecting interactions between n entities execute in O (n 2 ) and require up-to-date locations for all n entities. More efficient algorithms use spatial data structures <ref> [7, 14] </ref> and/or precomputed regional interactions [1, 17] to search for potential interactions. In any case, typical interaction detection algorithms for large virtual environments require more processing power, storage capacity, and/or network bandwidth than is available on affordable client computers.
Reference: [15] <author> Shaw, Chris, and Mark Green, </author> <title> The MR Toolkit Peers Package and Experiment. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September </month> <year> 1993, </year> <pages> 463-469. </pages>
Reference-contexts: Historically, most multi-user virtual environment systems have been built using a peer-to-peer communication design. Clients store replicate copies of the virtual environment and maintain consistent state by passing messages via point-to-point <ref> [2, 15] </ref>, multicast [5, 13], and/or broadcast networks [3, 4] (see Figure 2). The difficulty with peer-to-peer system designs is that they don't scale well.
Reference: [16] <author> Singh, Gurminder, Luis Serra, Willie Png, Au-drey Wong, and Hern Ng, BrickNet: </author> <title> Sharing Object Behaviors on the Net. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> March, </month> <year> 1995, </year> <pages> 19-25. </pages>
Reference-contexts: Additionally, fully distributed algorithms must be used to synchronize access to shared data. The focus of this paper is to investigate services that can be provided to support multi-user virtual environments via a client-server design <ref> [10, 12, 16] </ref>. The idea is to include multiple server computers that perform processing and manage communication for their clients.
Reference: [17] <author> Teller, Seth J., and Carlo H. Sequin, </author> <title> Visibility Preprocessing for Interactive Walkthroughs. </title> <journal> Computer Graphics (SIGGRAPH `91). </journal> <volume> 25, 4, </volume> <pages> 61-69. </pages>
Reference-contexts: Naive algorithms for detecting interactions between n entities execute in O (n 2 ) and require up-to-date locations for all n entities. More efficient algorithms use spatial data structures [7, 14] and/or precomputed regional interactions <ref> [1, 17] </ref> to search for potential interactions. In any case, typical interaction detection algorithms for large virtual environments require more processing power, storage capacity, and/or network bandwidth than is available on affordable client computers.
References-found: 17

