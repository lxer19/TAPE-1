URL: ftp://ftp.cs.colorado.edu/users/alw/papers/sen0197b.ps.Z
Refering-URL: http://www.cs.colorado.edu/users/alw/AvailablePubs.html
Root-URL: http://www.cs.colorado.edu
Title: Software Architecture Workshop (ISAW-2)  
Author: Alexander L. Wolf 
Degree: Organizing Committee Chair  
Note: ACM SIGSOFT Software Engineering Notes vol 22 no 1 January 1997 Page 42 Succeedings of the Second International  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B. Boehm. </author> <title> Anchoring the Software Process. </title> <journal> IEEE Software, </journal> <volume> 13(4) </volume> <pages> 73-82, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Initially we formed four activity groups: requirements, specification, design, and evaluation (e.g., testing), with the working group leaders acted as nominal managers (and hence in charge of process). The groups were to move through one "spiral" of architectural development, based on Boehm's Lifecycle Architecture concept <ref> [1] </ref>. However, the specification group quickly folded in with the testing group due to the time constraints and research interests.
Reference: [2] <author> F. Buschmann, R. Meunier, H. Rohnert, P. Sommerlad, and M. Stal. </author> <title> Pattern-Oriented Software Architecture: A System of Patterns. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: In addition to the seminal text on design patterns that describe micro-architectures for software [3], there is a text describing patterns at various levels of scale, including the architectural level <ref> [2] </ref>. The topic our working group addressed was "styles and patterns" for software architecture. We explicitly chose to focus our work on the case study at hand (the C4 system described above) and found this practical approach valuable.
Reference: [3] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> editors. Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1995. </year>
Reference-contexts: A pattern is a prose form for recording architectural styles as problem/solution-pairs and is particularly valuable as a communication mechanism for the software architect and other persons involved in developing the system (designers, users, etc.). In addition to the seminal text on design patterns that describe micro-architectures for software <ref> [3] </ref>, there is a text describing patterns at various levels of scale, including the architectural level [2]. The topic our working group addressed was "styles and patterns" for software architecture.
Reference: [4] <author> P. Inverardi and A.L. Wolf. </author> <title> Formal Specification and Analysis of Software Architectures using the Chemical Abstract Machine Model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 373-386, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: As scenarios are changed and added, new test cases are developed and obsolete ones removed. At the architecture stage, the test cases run on the operational specifications. As an example, the evaluation group drew up a short CHAM specification <ref> [4] </ref>, which describes the interaction between the customer interaction component and the interaction manager component (Figure 8). This specification can be exercised by providing a specific start state, which corresponds to a scenario elicited in the requirements phase.
Reference: [5] <author> M. Shaw and D. Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1996. </year>
Reference-contexts: Recurring design problems and their solutions can be viewed as architectural styles. A taxonomy of such styles is beginning to emerge e.g., dataflow systems such as pipes and filters and data-centered systems such as blackboards <ref> [5] </ref>. An architectural style defines a family of systems by describing their component and connector types together with a set of constraints on how they can be combined. Ideally, certain extra-functional properties (e.g., robustness, maintainability, scalability, etc.) are associated with the style.
Reference: [6] <editor> L. Vidal, A. Finkelstein, G. Spanoudakis, and A.L. Wolf, editors. </editor> <booktitle> Joint Proceedings of the SIGSOFT '96 Workshops. </booktitle> <publisher> ACM Press, </publisher> <address> New York, New York, </address> <year> 1996. </year>
Reference-contexts: As a complement to the Fourth Symposium on the Foundations of Software Engineering (FSE-4), whose theme was software architecture, the Second International Software Architecture Workshop (ISAW-2) brought together practitioners and researchers for two intense days of discussion and work. The ISAW-2 proceedings <ref> [6] </ref> were published in the Joint Proceedings of the SIGSOFT '96 Workshops, ACM Press, ISBN 0-89791-867-3. <p> The industrial software architects among us confirmed that meetings and discussions of this kind on software architecture are typical for them. 3.1 Working Group Participants The following gives a very short summary of each participant's position; for more detailed information, refer to the position papers in the workshop proceedings <ref> [6] </ref>. * Jean-Marc DeBaud points out that most work in software architecture focuses on solutions rather than on problems.
References-found: 6

