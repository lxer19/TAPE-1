URL: http://swarm.cs.wustl.edu/~picco/papers/TSE.ps.gz
Refering-URL: http://swarm.cs.wustl.edu/~picco/papers/IEEE.html
Root-URL: 
Title: Modeling and Improving an Industrial Software Process  
Author: Sergio Bandinelli, Alfonso Fuggetta, Member, IEEE, Luigi Lavazza, Maurizio Loi, and Gian Pietro Picco 
Keyword: Software process, process-centered software engineering environments (PSEEs), process modeling, process modeling languages, process assessment, process improvement.  
Abstract: This paper discusses the problems that a software development organization must address in order to assess and improve its software processes. In particular, the authors are involved in a project aiming at assessing and improving the current practice and the quality manual of the "Business Unit Telecommunications for Defence (BUTD)" of a large telecommunications company. The paper reports on the usage of formal process modeling languages to detect inconsistencies, ambiguities, incompleteness, and opportunities for improvement of both the software process and its documentation. 0 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Bandinelli, M. Braga, A. Fuggetta, and L. </author> <title> Lavazza, </title> <booktitle> "The Architecture of the SPADE-1 Process-Centered SEE," Proc. 3rd European Workshop on Software Process Technology, </booktitle> <address> Grenoble, France, </address> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: Consequently we had to model them "from scratch", based on the process owner's knowledge. B. The SLANG process modeling language SPADE (Software Process Analysis, Design and Enactment) is a Process-centered Software Engineering Environment, currently being developed at CEFRIEL and Poli-tecnico di Milano <ref> [1] </ref>, [2], [3]. SPADE provides a domain-specific language for modeling software processes called SLANG (Spade LANGuage). This section provides only a brief overview of the language. The complete language definition is available in [2].
Reference: [2] <author> S. Bandinelli, A. Fuggetta, C. Ghezzi, and L. Lavazza, </author> <title> "The SLANG 1.0 Process Modeling Language Reference Manual", </title> <type> Technical Report RT93032, </type> <institution> CEFRIEL, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: To prove this hypothesis, CEFRIEL and BUTD decided to use process formalisms to model a significant part of the BUTD software process, namely, the management of anomaly reports. In particular, the process modeling language SLANG <ref> [2] </ref> and finite state machines (FSMs) have been used as formal notations to model the process. <p> Consequently we had to model them "from scratch", based on the process owner's knowledge. B. The SLANG process modeling language SPADE (Software Process Analysis, Design and Enactment) is a Process-centered Software Engineering Environment, currently being developed at CEFRIEL and Poli-tecnico di Milano [1], <ref> [2] </ref>, [3]. SPADE provides a domain-specific language for modeling software processes called SLANG (Spade LANGuage). This section provides only a brief overview of the language. The complete language definition is available in [2]. <p> and Enactment) is a Process-centered Software Engineering Environment, currently being developed at CEFRIEL and Poli-tecnico di Milano [1], <ref> [2] </ref>, [3]. SPADE provides a domain-specific language for modeling software processes called SLANG (Spade LANGuage). This section provides only a brief overview of the language. The complete language definition is available in [2].
Reference: [3] <author> S. Bandinelli, A. Fuggetta, and C. Ghezzi, </author> <title> "Software Process Model Evolution in the SPADE Environment," </title> <journal> IEEE Trans. Software Eng. Special Issue on Process Evolution, </journal> <volume> vol. 19, </volume> <pages> pp. 1128-1144, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Consequently we had to model them "from scratch", based on the process owner's knowledge. B. The SLANG process modeling language SPADE (Software Process Analysis, Design and Enactment) is a Process-centered Software Engineering Environment, currently being developed at CEFRIEL and Poli-tecnico di Milano [1], [2], <ref> [3] </ref>. SPADE provides a domain-specific language for modeling software processes called SLANG (Spade LANGuage). This section provides only a brief overview of the language. The complete language definition is available in [2].
Reference: [4] <author> V.R. Basili, G. Caldiera, F. McGarry, R. Pajerski, G. Page, and S. Waligora, </author> <title> "The Software Engineering Laboratory an operational software experience factory," </title> <booktitle> Proc. 14th Int. Conf. Software Engineering (ICSE 14), </booktitle> <publisher> ACM Press, </publisher> <month> May </month> <year> 1992. </year>
Reference-contexts: In conclusion, the research by Johnson and Brodman has indicated that small-to-medium organizations have several problems in supporting a CMM-based improvement initiative, especially as far as the availability and cost of human resources are concerned. F. The Experience Factory at Software Engineering Laboratory The Software Engineering Laboratory (SEL) <ref> [4] </ref> was established in 1976 as a cooperative effort among the University of Maryland, the National Aeronautics and Space Administration (NASA), and the Computer Science Corporation (CSC). Its goal is to improve the software process used within the Goddard Space Flight Center's Flight Dynamics Division.
Reference: [5] <author> V.R. Basili and H.D. Rombach, </author> <title> "The TAME Approach: Towards Improvement-Oriented Software Environments", </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. 14, </volume> <pages> pp. 758-773, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: SEL is based on the Experience Factory, i.e., a framework to consistently apply a set of techniques and methods for process improvement. The main concepts supporting the Experience Factory are the Quality Improvement Paradigm (see Section I) and the Goal/Question/Metric approach for the definition/selection of appropriate software metrics <ref> [5] </ref>. During 15 years, SEL has collected data from over 100 projects. This information has been used to build predictive models and provide rationale to existing process practices.
Reference: [6] <author> Bootstrap Project Team, </author> <title> "Bootstrap: Europe's Assessment Method," </title> <journal> IEEE Software, </journal> <volume> vol. 10, </volume> <editor> n. </editor> <volume> 3, </volume> <pages> pp. 93-95, </pages> <month> May </month> <year> 1993. </year>
Reference: [7] <author> R. Conradi, C. Fernstrom, and A. Fuggetta, </author> <title> "Concepts for Evolving Software Processes," in Software Process Modeling and Technology, </title> <editor> A. Finkelstein, J. Kramer, and B.A. Nuseibeh, Eds. </editor> <publisher> Research Studies Press Limited, </publisher> <year> 1994, </year> <month> pp.9-32. </month>
Reference-contexts: This initial revision pointed out that more iterations of the above "process" were necessary to refine, enrich, and complete the existing process model. In conclusion, the modeling activity is composed of several iterations. In this iterative meta-process (i.e., a process whose target is another process <ref> [7] </ref>), process knowledge has to be "elicited" from a large amount of information sources through several iterations. The meta-process followed in the experiment has been therefore structured in the following phases: 1. Knowledge elicitation.
Reference: [8] <author> B. Curtis, M.I. Kellner, and J. </author> <title> Over, "Process modeling," </title> <journal> Communications of ACM, </journal> <volume> vol. 35, n.9, </volume> <pages> pp. 75-90, </pages> <month> Sept. </month> <year> 1992. </year>
Reference: [9] <author> M.A. Cusumano, </author> <title> Japan's Software Factories, </title> <publisher> Oxford University Press, </publisher> <year> 1991. </year>
Reference: [10] <author> W.E. </author> <title> Deming, Out of the Crisis, </title> <institution> MIT Centre for Advanced Engineering Studies, </institution> <address> Cambridge, MA, </address> <year> 1982. </year>
Reference: [11] <author> R. Dion, </author> <title> "Process improvement and the corporate balance sheet," </title> <journal> IEEE Software, </journal> <volume> vol. 10, </volume> <editor> n. </editor> <volume> 4, </volume> <pages> pp. 28-35, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: C. Experiences at Raytheon's Equipment Division Raytheon's Equipment Division started in 1988 an improvement initiative to increase the maturity of the software process used in its Software System Laboratory (SSL) <ref> [11] </ref>. This initiative was steered by a benchmarking of the software process maturity that was accomplished in 1988 using the SEI capability assessment questionnaire. In five years, the SSL has improved from level 1 to level 3 (in the SEI CMM). Current initiatives aim at approaching level 4.
Reference: [12] <author> M. Dowson and C. Fernstrom, </author> <title> "Mechanisms for Process Change," </title> <booktitle> Proc. 3rd European Workshop on Software Process Technology, </booktitle> <address> Grenoble, France, </address> <year> 1994. </year>
Reference-contexts: In many cases, it is also possible to spot another interesting phenomenon. Each process agent has in general a poor visibility of the Actual Process, i.e., the actual evolution of software production activities ("process performances", according to Dowson and Fernstrom's terminology <ref> [12] </ref>). What the agent sees (the Observed Process) is something that is in general different from both the Perceived Process, the Actual Process, and the Desired Process.
Reference: [13] <author> A. Finkelstein, J. Kramer, and B.A. Nuseibeh, Eds, </author> <title> Software Process Modeling and Technology, </title> <publisher> Research Studies Press Limited, </publisher> <year> 1994. </year>
Reference-contexts: Process, and the Perceived Process can be reduced or, at least, more clearly emphasized. * Each agent's Observed Process can be more easily checked against the formal definition, thus facilitating the identification of deviations and misunderstandings. * By introducing environments based on the formal definition of the Official Process ([8], <ref> [13] </ref>), it is possible to reduce and better control the discrepancies between the Official Process and the Actual Process. In conclusion, the work discussed in this paper shares several objectives of the Kellner and Hansen's case study.
Reference: [14] <author> C. Ghezzi, D. Mandrioli, S. Morasca, and M. Pezze, </author> <title> "A unified high-level Petri net formalism for time-critical systems," </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. 17, </volume> <pages> pp. 160-172, </pages> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: This section provides only a brief overview of the language. The complete language definition is available in [2]. SLANG is based on high-level Petri nets and is given formal semantics in terms of a translation scheme from SLANG objects into ER nets <ref> [14] </ref>, a mathematically defined class of high-level Petri nets that 6 RIMO stands for RIchiesta di MOdifica. 7 The terms review and verification & validation are interchangeable within the BUTD terminology. provide the designer with powerful means to describe concurrent and real-time systems.
Reference: [15] <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sher-man, A. Shtul-Trauring, "Statemate: </author> <title> A working environment for the development of complex reactive systems," </title> <booktitle> Proc. 10th Int. Conf. Software Eng. (ICSE 10), IEEE Computer Society, </booktitle> <year> 1988, </year> <pages> pp. 396-406. </pages>
Reference-contexts: 1. Enable effective communications regarding the pro cess. 2. Facilitate process reuse. 3. Support process evolution. 4. Facilitate process management. The case study was centered on the formalization of the target process using Statemate, an analysis and design workbench based on an extended finite state machine formalism called Statecharts <ref> [15] </ref>. This workbench is typically used to specify reactive systems with real-time constraints. Thus, the modeling activity was carried out using a "traditional" specification language that was not specifically designed to model software processes.
Reference: [16] <author> M. Imai, </author> <title> Kaizen The Key to Japan's Competitive Success, </title> <publisher> McGraw-Hill, </publisher> <year> 1986. </year>
Reference: [17] <institution> Italtel BUTD, Manuale del Sistema di Qualita Software, Italtel, </institution> <year> 1988. </year>
Reference: [18] <author> A. Johnson, </author> <title> "Software Process Improvement Experience in the DP/MIS Function," </title> <booktitle> Proc. 16th Int. Conf. Software Eng. (ICSE 16), IEEE Computer Society, </booktitle> <year> 1994. </year>
Reference-contexts: SSL was able to demonstrate to top-level management that improvements have yielded a $7.7 return on every dollar invested. D. Experiences at Corning Incorporated Corning Incorporated has launched an improvement initiative whose goal is to increase the quality of all its departments <ref> [18] </ref>. In particular, the Information Services Division started an assessment of its software process using the SEI CMM. Based on the result of this assessment, Corning established a Process Improvement Team to develop and plan specific improvement activities.
Reference: [19] <author> D.L. Johnson, J.G. Brodman, </author> <title> "What Small Organizations Say About the CMM," </title> <booktitle> Proc. 16th Int. Conf. Software Eng. (ICSE 16), IEEE Computer Society, </booktitle> <year> 1994. </year>
Reference-contexts: Quantitative evaluation of process performance should steer the improvement initiative from the very beginning (as suggested by Basili's QIP). E. The research by Johnson and Brodman Johnson and Brodman have recently conducted an interesting research <ref> [19] </ref>. They have contacted a large number of small-to-medium software development organizations 1 in 1 By "small-to-medium organizations", the authors mean either in 4 order to determine the applicability of the SEI CMM to small businesses.
Reference: [20] <author> J.M. Juran, </author> <title> Juran on planning for quality, </title> <publisher> The Free Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: In five years, the SSL has improved from level 1 to level 3 (in the SEI CMM). Current initiatives aim at approaching level 4. The approach followed by SSL has been based on a process-improvement paradigm which applies the principles of Deming and Juran ([10] and <ref> [20] </ref>). The lessons learned and comments that can be derived from the Raytheon experience can be summarized as follows: 1. In order to justify the high investments in process improvement, it is necessary to provide a quantitative evaluation of the benefits deriving from the improve ment effort. 2.
Reference: [21] <author> M.I. Kellner and G.A. Hansen, </author> <title> "Software Process modeling: </title>
References-found: 21

