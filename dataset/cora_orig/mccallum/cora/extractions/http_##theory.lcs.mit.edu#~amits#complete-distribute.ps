URL: http://theory.lcs.mit.edu/~amits/complete-distribute.ps
Refering-URL: http://theory.lcs.mit.edu/~amits/
Root-URL: 
Email: amits@theory.lcs.mit.edu salil@math.mit.edu  
Title: A Complete Promise Problem for Statistical Zero-Knowledge  
Author: Amit Sahai Salil P. Vadhan 
Address: Cambridge, MA 02139 Cambridge, MA 02139  
Affiliation: Department of Computer Science Department of Mathematics Massachusetts Institute of Technology Massachusetts Institute of Technology  
Note: To appear in the 38th Symposium on the Foundations of Computer Science, c fl1997 IEEE  
Abstract: We present a complete promise problem for SZK, the class of languages possessing statistical zero-knowledge proofs (against an honest verifier). The problem is to decide whether two efficiently samplable distributions are either statistically close or far apart. This characterizes SZK with no reference to interaction or zero-knowledge. From this theorem and its proof, we are able to establish several other results about SZK, knowledge complexity, and effi ciently samplable distributions.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Aiello, M. Bellare, and R. Venkatesan. </author> <title> Knowledge on the averageperfect, statistical, and logarithmic. </title> <booktitle> In Proceedings of the Twenty Seventh Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: In this model, we measure the number of bits of help the verifier needs to simulate the interaction exactly, rather than statistically closely. Using our complete problem for SZK, we are able to give tighter bounds on the perfect knowledge complexity of statistical zero-knowledge, as studied previously in <ref> [1] </ref>. <p> Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21]. The computational complexity of languages with low knowledge complexity was studied in [9, 20, 29]. The relationship between perfect and statistical knowledge complexity was explored in <ref> [20, 1] </ref>. 2 Notation and definitions The problem we prove to be complete for SZK is not a language, but is a promise problem. <p> All of the following definitions of knowledge complexity for interactive proof systems come from [21], except for the last which comes from <ref> [1] </ref>. * Hint sense: We say that (P; V ) has perfect (resp., statistical) knowledge complexity k (n) in the hint sense if there exists a PPT simulator S and a hint function h : L ! f0; 1g fl such that jh (x)j = k (jxj) and kS (x; h <p> Thus, if we take the union over all hints, we obtain a statistical zero-knowledge problem, which is easily seen to be the original language. The formal proof is omitted in this abstract. The next theorem establishes tighter bounds on the perfect knowledge complexity of SZK. Aiello, Bellare, and Venkatesan <ref> [1] </ref> have previously demonstrated that every language in SZK has perfect knowledge complexity n !(1) (resp., 1 + n !(1) ) in the entropy (resp. average oracle) sense. Our results improve on these bounds, although the results of [1] also apply to cheating-verifier classes and ours do not. <p> Aiello, Bellare, and Venkatesan <ref> [1] </ref> have previously demonstrated that every language in SZK has perfect knowledge complexity n !(1) (resp., 1 + n !(1) ) in the entropy (resp. average oracle) sense. Our results improve on these bounds, although the results of [1] also apply to cheating-verifier classes and ours do not. Goldreich, Ostrovsky, and Petrank [20] show that SZK has logarithmic perfect knowledge complexity in the oracle sense, so our results are incomparable to theirs. Our result for the strict oracle sense is the first that we know of. <p> We are deeply indebted to Oded Goldreich for many enlightening conversations on this topic and his extensive comments on this paper. We are grateful for Mihir Bellare's valuable suggestions on our presentation. Our thanks also to Erez Pe-trank for useful discussions on this topic and bringing <ref> [1] </ref> to our attention, and to anonymous referees for helpful sug gestions.
Reference: [2] <author> W. Aiello and J. Hastad. </author> <title> Perfect zero-knowledge languages can be recognized in two rounds. </title> <booktitle> In Proceedings of the Twenty Eighth Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 439-448, </pages> <year> 1987. </year>
Reference-contexts: Unlike a computational zero-knowledge protocol, a statistical zero-knowledge protocol remains zero-knowledge even against a computationally unbounded verifier. In addition, a language which has a statistical zero-knowledge proof must lie low in the polynomial-time hierarchy. In fact, such a language cannot be NP-complete unless the polynomial-time hierarchy collapses <ref> [16, 2, 10] </ref>. Because SZK contains problems believed to be hard yet cannot contain NP-complete problems, it holds an intriguing position in complexity theory. The complete problem. The promise problem we show to be complete for SZK is STATISTICAL DIFFERENCE . <p> Related work. The complexity of statistical zero-knowledge was first considered by Fortnow [16], who showed that SZK co-AM. Aiello and Hastad <ref> [2] </ref> continued Fortnow's work, showing that SZK AM. De Santis et. al [15] and Damgard and Cramer [13] studied monotone boolean closure properties of SZK. Okamoto [26] first proved closure under complementation and showed that every language in SZK has a public-coin proof system. <p> We wish to find 6 The 2 (n) in these results can be improved to 2 (n k ) for any constant k by amplifying with security parameter n k instead of n + 1 in Protocol of Section 3.3. 7 This terminology is taken from <ref> [2] </ref>. The cases we consider are quite similar to those analyzed in [16, 2] Because we focus on public coin proofs, many complications that other researchers faced do not arise. <p> The cases we consider are quite similar to those analyzed in <ref> [16, 2] </ref> Because we focus on public coin proofs, many complications that other researchers faced do not arise.
Reference: [3] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proceedings of the Thirty Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: Similarly, the result that IP = PSPACE was shown by giving an interactive proof for QUANTIFIED BOOLEAN FORMULA, which is complete for PSPACE [25, 30]. More recently, the celebrated PCP theorem characterizing NP was proven by designing efficient probabilistically checkable proofs for a specific NP-complete language <ref> [3, 4] </ref>. In this paper, we present a complete promise problem 1 for SZK, the class of languages possessing statistical zero-knowledge proofs against an honest verifier. For traditional complexity classes, such as NP and PSPACE, the construction of natural complete problems has become a routine task.
Reference: [4] <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs. </title> <booktitle> In Proceedings of the Thirty Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-13, </pages> <year> 1992. </year>
Reference-contexts: Similarly, the result that IP = PSPACE was shown by giving an interactive proof for QUANTIFIED BOOLEAN FORMULA, which is complete for PSPACE [25, 30]. More recently, the celebrated PCP theorem characterizing NP was proven by designing efficient probabilistically checkable proofs for a specific NP-complete language <ref> [3, 4] </ref>. In this paper, we present a complete promise problem 1 for SZK, the class of languages possessing statistical zero-knowledge proofs against an honest verifier. For traditional complexity classes, such as NP and PSPACE, the construction of natural complete problems has become a routine task.
Reference: [5] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin games: A randomized proof system and a hierarchy of complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36 </volume> <pages> 254-276, </pages> <year> 1988. </year>
Reference-contexts: A key ingredient in our proof that all languages in SZK reduce to STATISTICAL DIFFERENCE is a powerful theorem of Okamoto [26], which states that all languages in SZK have public coin, also known as Arthur-Merlin <ref> [5] </ref>, statistical zero-knowledge proofs. In the same paper, Okamoto proves a second theorem, showing that SZK is closed under complementation. Our techniques provide a simpler proof of this second theorem. From the formal description of our complete problem, it will follow immediately that SZK is a natural generalization of BPP.
Reference: [6] <author> M. Bellare. </author> <title> A note on negligible functions. </title> <type> Technical Report CS97-529, </type> <institution> Department of Computer Science and Engineering, University of California at San Diego, </institution> <month> March </month> <year> 1997. </year> <note> Also available from the Theory of Cryptography Library (http://theory.lcs.mit.edu/~tcryptol). </note>
Reference-contexts: It is fairly straightforward to construct a complete promise problem for PZK involving descriptions of Turing machines for the verifier and simulator. This construction has been extended to SZK by [7], using a result of Bellare <ref> [6] </ref> on negligible functions. However, in contrast to SD, a complete problem constructed in this manner is essentially restatement of the definition of the class and therefore does not simplify the study of the class at all.
Reference: [7] <author> M. Bellare, O. Goldreich, and M. </author> <title> Sudan. </title> <type> Personal communication, </type> <month> June </month> <year> 1997. </year>
Reference-contexts: It is fairly straightforward to construct a complete promise problem for PZK involving descriptions of Turing machines for the verifier and simulator. This construction has been extended to SZK by <ref> [7] </ref>, using a result of Bellare [6] on negligible functions. However, in contrast to SD, a complete problem constructed in this manner is essentially restatement of the definition of the class and therefore does not simplify the study of the class at all.
Reference: [8] <author> M. Bellare, S. Micali, and R. Ostrovsky. </author> <title> The (true) complexity of statistical zero-knowledge. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 494-502, </pages> <year> 1990. </year>
Reference-contexts: Usually one wants the zero-knowledge condition to hold for all (even dishonest) polynomial-time verifiers. Our results translate to this more general setting under cryptographic assumptions such as the existence of one-way functions <ref> [8, 27, 12, 14, 26] </ref>. SZK contains a number of important problems, including GRAPH NONISOMORPHISM [19], a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average [22, 18].
Reference: [9] <author> M. Bellare and E. Petrank. </author> <title> Making zero-knowledge provers efficient. </title> <booktitle> In Proceedings of the Twenty Sixth Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1994. </year>
Reference-contexts: Okamoto [26] first proved closure under complementation and showed that every language in SZK has a public-coin proof system. Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21]. The computational complexity of languages with low knowledge complexity was studied in <ref> [9, 20, 29] </ref>. The relationship between perfect and statistical knowledge complexity was explored in [20, 1]. 2 Notation and definitions The problem we prove to be complete for SZK is not a language, but is a promise problem.
Reference: [10] <author> R. B. Boppana, J. Hastad, and S. Zachos. </author> <title> Does co-NP have short interactive proofs? Information Processing Letters, </title> <booktitle> 25 </booktitle> <pages> 127-132, </pages> <year> 1987. </year>
Reference-contexts: Unlike a computational zero-knowledge protocol, a statistical zero-knowledge protocol remains zero-knowledge even against a computationally unbounded verifier. In addition, a language which has a statistical zero-knowledge proof must lie low in the polynomial-time hierarchy. In fact, such a language cannot be NP-complete unless the polynomial-time hierarchy collapses <ref> [16, 2, 10] </ref>. Because SZK contains problems believed to be hard yet cannot contain NP-complete problems, it holds an intriguing position in complexity theory. The complete problem. The promise problem we show to be complete for SZK is STATISTICAL DIFFERENCE .
Reference: [11] <author> S. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Conference Record of Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <year> 1971. </year>
Reference-contexts: 1 Introduction A revolution in theoretical computer science occurred when it was discovered that NP has complete problems <ref> [11, 24, 23] </ref>. Most often, this theorem and other completeness results are viewed as negative statements, as they provide evidence of a problem's intractability. These same results, viewed as positive statements, enable one to study an entire class of problems by focusing on a single problem.
Reference: [12] <author> I. Damgard. </author> <title> Interactive hashing can simplify zero-knowledge protocol design. </title> <booktitle> In Proceedings of Crypto `95, Lecture Notes in Computer Science, </booktitle> <volume> volume 403, </volume> <pages> pages 100-109. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Usually one wants the zero-knowledge condition to hold for all (even dishonest) polynomial-time verifiers. Our results translate to this more general setting under cryptographic assumptions such as the existence of one-way functions <ref> [8, 27, 12, 14, 26] </ref>. SZK contains a number of important problems, including GRAPH NONISOMORPHISM [19], a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average [22, 18].
Reference: [13] <author> I. Damgard and R. Cramer. </author> <title> On monotone function closure of perfect and statistical zero-knowledge. Theory of Cryptography Library: </title> <type> Record 96-03, </type> <year> 1996. </year> <note> http://theory.lcs.mit.edu/~tcryptol. </note>
Reference-contexts: Related work. The complexity of statistical zero-knowledge was first considered by Fortnow [16], who showed that SZK co-AM. Aiello and Hastad [2] continued Fortnow's work, showing that SZK AM. De Santis et. al [15] and Damgard and Cramer <ref> [13] </ref> studied monotone boolean closure properties of SZK. Okamoto [26] first proved closure under complementation and showed that every language in SZK has a public-coin proof system. Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21].
Reference: [14] <author> I. Damgard, O. Goldreich, T. Okamoto, and A. Wigderson. </author> <title> Honest verifier vs. dishonest verifier in public coin zero-knowledge proofs. </title> <booktitle> In Proceedings of Crypto `95, Lecture Notes in Computer Science, </booktitle> <volume> volume 403. </volume> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Usually one wants the zero-knowledge condition to hold for all (even dishonest) polynomial-time verifiers. Our results translate to this more general setting under cryptographic assumptions such as the existence of one-way functions <ref> [8, 27, 12, 14, 26] </ref>. SZK contains a number of important problems, including GRAPH NONISOMORPHISM [19], a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average [22, 18].
Reference: [15] <author> A. De Santis, G. Di Crescenzo, G. Persiano, and M. Yung. </author> <title> On monotone formula closure of SZK. </title> <booktitle> In Proceedings of the Thirty Fifth Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 454-465, </pages> <year> 1994. </year>
Reference-contexts: Related work. The complexity of statistical zero-knowledge was first considered by Fortnow [16], who showed that SZK co-AM. Aiello and Hastad [2] continued Fortnow's work, showing that SZK AM. De Santis et. al <ref> [15] </ref> and Damgard and Cramer [13] studied monotone boolean closure properties of SZK. Okamoto [26] first proved closure under complementation and showed that every language in SZK has a public-coin proof system. Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21]. <p> Output a sample of C b 1 C b k . It is easily verified that kD 0 D 1 k = kC 0 C 1 k k . This construction is a generalization of the technique used in <ref> [15] </ref> to represent the logical AND of statements about GRAPH NONISOMORPHISM. Combining the constructions of Lemma 3 and Facts A.4 and A.3, we obtain the following amplification lemma. 3 The details are omitted in this abstract. <p> Since the above protocol is nearly identical to the one for GRAPH NONISOMORPHISM, ideas useful for that protocol can be applied to SD and thereby all of SZK. For example, <ref> [15] </ref> gives SZK proofs for all monotone boolean formulae whose atoms are statements about membership in GRAPH NONISOMORPHISM. Their techniques generalize readily to SD.
Reference: [16] <author> L. Fortnow. </author> <title> The complexity of perfect zero-knowledge. </title> <editor> In S. Micali, editor, </editor> <booktitle> Advances in Computing Research, </booktitle> <volume> volume 5, </volume> <pages> pages 327-343. </pages> <publisher> JAC Press, Inc., </publisher> <year> 1989. </year>
Reference-contexts: Unlike a computational zero-knowledge protocol, a statistical zero-knowledge protocol remains zero-knowledge even against a computationally unbounded verifier. In addition, a language which has a statistical zero-knowledge proof must lie low in the polynomial-time hierarchy. In fact, such a language cannot be NP-complete unless the polynomial-time hierarchy collapses <ref> [16, 2, 10] </ref>. Because SZK contains problems believed to be hard yet cannot contain NP-complete problems, it holds an intriguing position in complexity theory. The complete problem. The promise problem we show to be complete for SZK is STATISTICAL DIFFERENCE . <p> Related work. The complexity of statistical zero-knowledge was first considered by Fortnow <ref> [16] </ref>, who showed that SZK co-AM. Aiello and Hastad [2] continued Fortnow's work, showing that SZK AM. De Santis et. al [15] and Damgard and Cramer [13] studied monotone boolean closure properties of SZK. <p> Previously, Goldreich and Petrank [21] have shown that SKC hint (poly (n)) AM and SKC hint (O (log (n))) co-AM; the second of these results can be derived immediately from our result and Fortnow's theorem <ref> [16] </ref> that SZK co-AM. Theorem 11 For any polynomially bounded function k (n), SKC hint (k (n) + log n) = SKC hint (k (n)): For intuition, consider the case that k (n) = 0. <p> The cases we consider are quite similar to those analyzed in <ref> [16, 2] </ref> Because we focus on public coin proofs, many complications that other researchers faced do not arise. <p> This means that the virtual prover is doing quite well in fooling the virtual verifier. This naturally suggest a strategy for a real prover imitate the virtual prover's behavior. Such a prover, called a simulation-based prover, was introduced by Fortnow <ref> [16] </ref> and is a crucial construct in our proof. The soundness of the proof system tells us that the simulation-based prover cannot hope to convince the real verifier with high probability.
Reference: [17] <author> O. Goldreich. </author> <title> Foundations of Cryptography (Fragments of a Book). </title> <institution> Weizmann Institute of Science, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: Before defining zero-knowledge, we need to introduce some more terminology. A PPT algorithm is a probabilistic algorithm which runs in strict polynomial time. A function f (n) is negligible if for all polynomials p (n), f (n) 1 p (n) for all sufficiently large n. We follow [22] and <ref> [17] </ref> in defining zero-knowledge. For an interactive protocol (P; V ), we let View P;V be a random variable describing the random coins of V and the messages exchanged between P and V during their interaction on input x. <p> PZK) denote the class of languages with statistical (resp. perfect) zero-knowledge proof systems with c (n) = s (n) = 1=3. As long as 1 c (n) is larger than s (n) by an inverse polynomial, the class of languages having statistical or perfect zero-knowledge proofs does not change <ref> [17] </ref>. The negligible function ff is termed the simulator deviation. <p> Observe that like <ref> [17] </ref>, we work with the variant of zero-knowledge in which the simulator is required to run in strict polynomial time, with some probability of failure in the perfect case. The original definition in [22] allows the simulator to run in expected polynomial time, but with zero probability of failure.
Reference: [18] <author> O. Goldreich and E. Kushilevitz. </author> <title> A perfect zero-knowledge proof system for a problem equivalent to the discrete logarithm. </title> <journal> Journal of Cryptology, </journal> <volume> 6 </volume> <pages> 97-116, </pages> <year> 1993. </year>
Reference-contexts: SZK contains a number of important problems, including GRAPH NONISOMORPHISM [19], a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average <ref> [22, 18] </ref>. At the same time, the statistical zero-knowledge property has several strong consequences. Unlike a computational zero-knowledge protocol, a statistical zero-knowledge protocol remains zero-knowledge even against a computationally unbounded verifier. In addition, a language which has a statistical zero-knowledge proof must lie low in the polynomial-time hierarchy. <p> We wish to prove that SD is complete for SZK. In order for this to make sense, we extend SZK to promise problems in the natural way, as previously done by Goldreich and Kushilevitz <ref> [18] </ref>. That is, we require the completeness and zero-knowledge conditions to hold for inputs in the Y set, and we require the soundness condition to hold for inputs in the N set. For the sake of elegance, we also call this extension SZK.
Reference: [19] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that yield nothing but their validity or all languages in NP have zero-knowledge proof systems. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 38(1) </volume> <pages> 691-729, </pages> <year> 1991. </year>
Reference-contexts: These same results, viewed as positive statements, enable one to study an entire class of problems by focusing on a single problem. For example, all languages in NP were shown to have computational zero-knowledge proofs when such a proof was exhibited for GRAPH 3-COLORABILITY <ref> [19] </ref>. Similarly, the result that IP = PSPACE was shown by giving an interactive proof for QUANTIFIED BOOLEAN FORMULA, which is complete for PSPACE [25, 30]. More recently, the celebrated PCP theorem characterizing NP was proven by designing efficient probabilistically checkable proofs for a specific NP-complete language [3, 4]. <p> Usually one wants the zero-knowledge condition to hold for all (even dishonest) polynomial-time verifiers. Our results translate to this more general setting under cryptographic assumptions such as the existence of one-way functions [8, 27, 12, 14, 26]. SZK contains a number of important problems, including GRAPH NONISOMORPHISM <ref> [19] </ref>, a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average [22, 18]. At the same time, the statistical zero-knowledge property has several strong consequences. <p> For details, see the preliminary version of this paper, avail able from http://www-math.mit.edu/~salil. 3.3 A protocol for STATISTICAL DIFFERENCE In this section, we show that SD has a simple two-round statistical zero-knowledge protocol, similar to the standard ones for QUADRATIC NONRESIDUOSITY [22] and GRAPH NONISOMORPHISM <ref> [19] </ref>. Intuitively, if two distributions are statistically far apart, then, when given a random sample from one of the distributions, the prover should have a good chance of guessing which distribution it came from.
Reference: [20] <author> O. Goldreich, R. Ostrovsky, and E. Petrank. </author> <title> Computational complexity and knowledge complexity. </title> <booktitle> In Proceedings of the Twenty Sixth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 534-543, </pages> <year> 1994. </year>
Reference-contexts: Okamoto [26] first proved closure under complementation and showed that every language in SZK has a public-coin proof system. Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21]. The computational complexity of languages with low knowledge complexity was studied in <ref> [9, 20, 29] </ref>. The relationship between perfect and statistical knowledge complexity was explored in [20, 1]. 2 Notation and definitions The problem we prove to be complete for SZK is not a language, but is a promise problem. <p> Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21]. The computational complexity of languages with low knowledge complexity was studied in [9, 20, 29]. The relationship between perfect and statistical knowledge complexity was explored in <ref> [20, 1] </ref>. 2 Notation and definitions The problem we prove to be complete for SZK is not a language, but is a promise problem. <p> Our results improve on these bounds, although the results of [1] also apply to cheating-verifier classes and ours do not. Goldreich, Ostrovsky, and Petrank <ref> [20] </ref> show that SZK has logarithmic perfect knowledge complexity in the oracle sense, so our results are incomparable to theirs. Our result for the strict oracle sense is the first that we know of. Theorem 12 6 1.
Reference: [21] <author> O. Goldreich and E. Petrank. </author> <title> Quantifying knowledge complexity. </title> <booktitle> In Proceedings of the Thirty Second Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 59-68, </pages> <year> 1991. </year>
Reference-contexts: Our work also has some consequences for knowledge complexity <ref> [22, 21] </ref>. Knowledge complexity seeks to measure how much knowledge a polynomial-time verifier gains from an interactive proof. Loosely speaking, the definitions of knowledge complexity measure the amount of help a verifier needs to generate a distribution that is statistically close to its real interaction with the prover. <p> We show that for the weakest of these variants, knowledge complexity collapses by logarithmic additive factors at all levels, and in particular, knowledge complexity log n equals statistical zero-knowledge. No collapse was previously known for any of the variants of knowledge complexity suggested in <ref> [21] </ref>. As with zero-knowledge, perfect knowledge complexity can also be defined. In this model, we measure the number of bits of help the verifier needs to simulate the interaction exactly, rather than statistically closely. <p> Okamoto [26] first proved closure under complementation and showed that every language in SZK has a public-coin proof system. Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank <ref> [21] </ref>. The computational complexity of languages with low knowledge complexity was studied in [9, 20, 29]. <p> All of the following definitions of knowledge complexity for interactive proof systems come from <ref> [21] </ref>, except for the last which comes from [1]. * Hint sense: We say that (P; V ) has perfect (resp., statistical) knowledge complexity k (n) in the hint sense if there exists a PPT simulator S and a hint function h : L ! f0; 1g fl such that jh <p> Statistical knowledge complexity is denoted by SKC with the appropriate subscript. Our first result about knowledge complexity is that the SKC hint hierarchy collapses by logarithmic additive factors. Previously, Goldreich and Petrank <ref> [21] </ref> have shown that SKC hint (poly (n)) AM and SKC hint (O (log (n))) co-AM; the second of these results can be derived immediately from our result and Fortnow's theorem [16] that SZK co-AM.
Reference: [22] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Statistical zero-knowledge. Informally, an interactive proof is a protocol in which a computationally unbounded prover P attempts to convince a probabilistic polynomial-time verifier V of an assertion, i.e. that a string x is in a language L. Following the framework laid out by Goldwasser, Micali, and Rackoff <ref> [22] </ref>, we consider two probability dis tributions in defining zero-knowledge: 1. The interaction of P and V from V 's point of view. 2. The output of a probabilistic polynomial-time ma chine not interacting with anyone, called the simula tor, on input x. <p> SZK contains a number of important problems, including GRAPH NONISOMORPHISM [19], a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average <ref> [22, 18] </ref>. At the same time, the statistical zero-knowledge property has several strong consequences. Unlike a computational zero-knowledge protocol, a statistical zero-knowledge protocol remains zero-knowledge even against a computationally unbounded verifier. In addition, a language which has a statistical zero-knowledge proof must lie low in the polynomial-time hierarchy. <p> Our work also has some consequences for knowledge complexity <ref> [22, 21] </ref>. Knowledge complexity seeks to measure how much knowledge a polynomial-time verifier gains from an interactive proof. Loosely speaking, the definitions of knowledge complexity measure the amount of help a verifier needs to generate a distribution that is statistically close to its real interaction with the prover. <p> Before defining zero-knowledge, we need to introduce some more terminology. A PPT algorithm is a probabilistic algorithm which runs in strict polynomial time. A function f (n) is negligible if for all polynomials p (n), f (n) 1 p (n) for all sufficiently large n. We follow <ref> [22] </ref> and [17] in defining zero-knowledge. For an interactive protocol (P; V ), we let View P;V be a random variable describing the random coins of V and the messages exchanged between P and V during their interaction on input x. <p> Observe that like [17], we work with the variant of zero-knowledge in which the simulator is required to run in strict polynomial time, with some probability of failure in the perfect case. The original definition in <ref> [22] </ref> allows the simulator to run in expected polynomial time, but with zero probability of failure. Our choice is not very restrictive, because we are only discussing honest-verifier statistical zero-knowledge and we know of no particular language which requires an expected polynomial time simulator for the honest verifier. <p> For details, see the preliminary version of this paper, avail able from http://www-math.mit.edu/~salil. 3.3 A protocol for STATISTICAL DIFFERENCE In this section, we show that SD has a simple two-round statistical zero-knowledge protocol, similar to the standard ones for QUADRATIC NONRESIDUOSITY <ref> [22] </ref> and GRAPH NONISOMORPHISM [19]. Intuitively, if two distributions are statistically far apart, then, when given a random sample from one of the distributions, the prover should have a good chance of guessing which distribution it came from. <p> Hence all languages in SZK have protocols that can be security-parametrized in this manner. Contrast this with the original definition of SZK <ref> [22] </ref>, which only requires that the simulator deviation vanish as an negligible function of the input length.
Reference: [23] <author> R. M. Karp. </author> <title> Reducibility among combinatorial problems. </title> <editor> In J. W. Thatcher and R. E. Miller, editors, </editor> <booktitle> Complexity of Computer Computations, </booktitle> <pages> pages 85-103. </pages> <publisher> Plenum Press, Inc., </publisher> <year> 1972. </year>
Reference-contexts: 1 Introduction A revolution in theoretical computer science occurred when it was discovered that NP has complete problems <ref> [11, 24, 23] </ref>. Most often, this theorem and other completeness results are viewed as negative statements, as they provide evidence of a problem's intractability. These same results, viewed as positive statements, enable one to study an entire class of problems by focusing on a single problem.
Reference: [24] <author> L. A. Levin. </author> <title> Universal'nye perebornye zadachi (Universal search problems : in Russian). </title> <journal> Problemy Peredachi Infor-matsii, </journal> <volume> 9(3) </volume> <pages> 265-266, </pages> <year> 1973. </year>
Reference-contexts: 1 Introduction A revolution in theoretical computer science occurred when it was discovered that NP has complete problems <ref> [11, 24, 23] </ref>. Most often, this theorem and other completeness results are viewed as negative statements, as they provide evidence of a problem's intractability. These same results, viewed as positive statements, enable one to study an entire class of problems by focusing on a single problem.
Reference: [25] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proofs. </title> <booktitle> In Proceedings of the Thirty First Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1-10, </pages> <year> 1990. </year>
Reference-contexts: For example, all languages in NP were shown to have computational zero-knowledge proofs when such a proof was exhibited for GRAPH 3-COLORABILITY [19]. Similarly, the result that IP = PSPACE was shown by giving an interactive proof for QUANTIFIED BOOLEAN FORMULA, which is complete for PSPACE <ref> [25, 30] </ref>. More recently, the celebrated PCP theorem characterizing NP was proven by designing efficient probabilistically checkable proofs for a specific NP-complete language [3, 4]. In this paper, we present a complete promise problem 1 for SZK, the class of languages possessing statistical zero-knowledge proofs against an honest verifier.
Reference: [26] <author> T. Okamoto. </author> <title> On relationships between statistical zero-knowledge proofs. </title> <booktitle> In Proceedings of the Twenty Eighth Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1996. </year>
Reference-contexts: Usually one wants the zero-knowledge condition to hold for all (even dishonest) polynomial-time verifiers. Our results translate to this more general setting under cryptographic assumptions such as the existence of one-way functions <ref> [8, 27, 12, 14, 26] </ref>. SZK contains a number of important problems, including GRAPH NONISOMORPHISM [19], a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average [22, 18]. <p> The gap between `close' and `far apart' is what makes it a promise problem and not just a language. A key ingredient in our proof that all languages in SZK reduce to STATISTICAL DIFFERENCE is a powerful theorem of Okamoto <ref> [26] </ref>, which states that all languages in SZK have public coin, also known as Arthur-Merlin [5], statistical zero-knowledge proofs. In the same paper, Okamoto proves a second theorem, showing that SZK is closed under complementation. Our techniques provide a simpler proof of this second theorem. <p> To summarize informally, our paper * Introduces a simple complete promise problem for sta tistical zero-knowledge, * Exhibits a simple 2-round statistical zero-knowledge protocol for that problem and thus for all of SZK, * Gives a simpler proof for Okamoto's second theorem in <ref> [26] </ref>, showing that SZK is closed under complemen tation, 2 Recall that a function f (n) is negligible if for any polynomial p (n), f (n) &lt; 1=p (n) for sufficiently large n. * Shows that SZK naturally generalizes BPP, * Demonstrates that one can efficiently transform a pair of samplable <p> Related work. The complexity of statistical zero-knowledge was first considered by Fortnow [16], who showed that SZK co-AM. Aiello and Hastad [2] continued Fortnow's work, showing that SZK AM. De Santis et. al [15] and Damgard and Cramer [13] studied monotone boolean closure properties of SZK. Okamoto <ref> [26] </ref> first proved closure under complementation and showed that every language in SZK has a public-coin proof system. Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21]. The computational complexity of languages with low knowledge complexity was studied in [9, 20, 29]. <p> The proof of Theorem 1 will come in Sections 3.3 and 3.4 via two lemmas and a theorem of Okamoto <ref> [26] </ref>. But first, we observe that a statement analogous to Theorem 1 can be made for BPP, if we generalize BPP to promise problems in the obvious way. The proof is omitted in this abstract. <p> So x 7! (C 0 ; C 1 ) is a reduction from to SD which works for all but finitely many x. The final ingredient in the proof of Theorem 1 is a theorem of Okamoto <ref> [26] </ref>, which we state in terms of promise problems. 5 Theorem 8 ([26, Thm. 1]) If a promise problem has a statistical zero-knowledge proof, then has a public coin statistical zero-knowledge proof. <p> We now show how to use Corollary 7 and Theorem 8 to obtain a simpler proof of Okamoto's Theorem 2 in <ref> [26] </ref>. 4 See, for example, [28, Thms. 8.1 and 8.2]. 5 Okamoto stated his result in terms of languages. Extending it to promise problems will be discussed in the full version of this paper. Corollary 9 ([26, Thm. 2]) SZK is closed under comple-ment, even for promise problems.
Reference: [27] <author> R. Ostrovsky, R. Venkatesan, and M. Yung. </author> <title> Interactive hashing simplifies zero-knowledge protocol design. </title> <booktitle> In Proceedings of Eurocrypt `93, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Usually one wants the zero-knowledge condition to hold for all (even dishonest) polynomial-time verifiers. Our results translate to this more general setting under cryptographic assumptions such as the existence of one-way functions <ref> [8, 27, 12, 14, 26] </ref>. SZK contains a number of important problems, including GRAPH NONISOMORPHISM [19], a problem which is not known to be in NP. It also contains problems with cryptographic application and significance that are believed to be hard on average [22, 18].
Reference: [28] <author> C. H. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: We now show how to use Corollary 7 and Theorem 8 to obtain a simpler proof of Okamoto's Theorem 2 in [26]. 4 See, for example, <ref> [28, Thms. 8.1 and 8.2] </ref>. 5 Okamoto stated his result in terms of languages. Extending it to promise problems will be discussed in the full version of this paper. Corollary 9 ([26, Thm. 2]) SZK is closed under comple-ment, even for promise problems. Proof: Suppose 2 SZK.
Reference: [29] <author> E. Petrank and G. Tardos. </author> <title> On the knowledge complexity of NP. </title> <booktitle> In Proceedingsof the Thirty Seventh Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 494-502, </pages> <year> 1996. </year>
Reference-contexts: Okamoto [26] first proved closure under complementation and showed that every language in SZK has a public-coin proof system. Relationships between the various types of knowledge complexity were first explored by Goldreich and Pe-trank [21]. The computational complexity of languages with low knowledge complexity was studied in <ref> [9, 20, 29] </ref>. The relationship between perfect and statistical knowledge complexity was explored in [20, 1]. 2 Notation and definitions The problem we prove to be complete for SZK is not a language, but is a promise problem.
Reference: [30] <author> A. Shamir. IP=PSPACE. </author> <booktitle> In Proceedings of the Thirty First Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference-contexts: For example, all languages in NP were shown to have computational zero-knowledge proofs when such a proof was exhibited for GRAPH 3-COLORABILITY [19]. Similarly, the result that IP = PSPACE was shown by giving an interactive proof for QUANTIFIED BOOLEAN FORMULA, which is complete for PSPACE <ref> [25, 30] </ref>. More recently, the celebrated PCP theorem characterizing NP was proven by designing efficient probabilistically checkable proofs for a specific NP-complete language [3, 4]. In this paper, we present a complete promise problem 1 for SZK, the class of languages possessing statistical zero-knowledge proofs against an honest verifier.
References-found: 30

