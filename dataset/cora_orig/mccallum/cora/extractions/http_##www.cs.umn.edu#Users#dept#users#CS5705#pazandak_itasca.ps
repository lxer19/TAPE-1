URL: http://www.cs.umn.edu/Users/dept/users/CS5705/pazandak_itasca.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/CS5705/
Root-URL: http://www.cs.umn.edu
Title: Conceptual-level Schemata to Object Oriented Implementation Level Schemata target model requires more information than supplied
Author: Paul Pazandak John Carlis 
Note: 1 The  
Affiliation: Computer Science Department University of Minnesota  
Abstract: Con ce pt ua l le ve l da ta ba se d es ig n sh ou ld b e man ag ed i nd ep en d en tl y o f it s implementation. Therefore, once a conceptual level schema has been completed, some transformation method must exist which can be used in the construction of an implementation level design supported by the target model (e.g., relational, object-oriented, network). This paper provides a method for the transformation of concep tual-level schemata, specifically those created u sing the Log ical Data Structure (LDS) model, to an implementation level object model. LDS schemata transformed using the methodology and graphical notational conventions presented may be directly used as implementation level schemata for object DBMSs. SECTION 1. INTRODUCTION During the design phase of a database project, a graphical tool for modeling data serves as a communication medium between designers and users. We use a Logical Data Structure (LDS) [Senko73, Carlis84, Carlis93] notation to depict the names of the types of data to be remembered. At this level, the notational conventions used should be sufficient to capture the required information, yet simple enough so that the design effort does not confuse the users. If the users cannot understand the graph, they cannot verify its correctness, and, therefore, requirements may not be met. Additional requirements are maintained in a textual format. Once the data-modeling phase has completed, the next task of the designers is to create an i m p l e m e n t a t i o n level g r a p h i c a l ( o r t e x t ) r e p r e s e n t a t i o n b y m a p p i n g t h e L D S t o t h e implementation model of the target DBMS using some method or algorithm. Depending upon the target DBMS and the complexity of the application, this task may be rather difficult. When transforming a conceptual-level schema to an implementation-level schema, one may find that: The LDS model is implementation-independent. Thus, a designer should be able to transform an LDS schema to any implementation model. Methods currently exist to map an LDS schema to relational, hierarchical, and network DBMS models [Carlis88, El Masri89]. This paper explores the transformation of LDSs to the objectoriented model 1 - the ITASCA ODBMS model, in particular. The use of this methodology results in a working, implementation-level schema. An overview of the transformation is as follows. The designer will usually examine one relationship and make a decision of how to transform it based upon transformation methods presented in this paper, and record the decision on the LDS schema using the notation presented below. There will be situations which will require two or more relationships to be considered 1 Since no object data model has been adopted as a standard, the specific method discussed in this paper is not generally applicable. 
Abstract-found: 1
Intro-found: 1
Reference: [Carlis93] <author> Carlis, J. V. </author> , <title> "Logical Data Structures", Book Manuscript, </title> <publisher> in press, </publisher> <year> 1993. </year>
Reference: [Carlis84] <author> Carlis, J.V. and March, S. T., </author> <title> "Multi-level Model of Physical Database Design Problems and Solutions", </title> <booktitle> IEEE Data Engineering Conference, </booktitle> <month> February, </month> <year> 1984. </year>
Reference-contexts: If clustering were used instead of absorption, the related instances would need to be retrieved individually. All the information (instances), however, would be on the same page as above, so only one page fault would occur in both cases. SECTION 5.2 Meta_LDS The metaLDS <ref> [Carlis84] </ref> must change to capture four items: relationship typing, class typing, attribute typing, and superclass ordering. We need to designate how the relationships.
Reference: [Cattell] <author> Cattell, R. G. G., </author> <title> "Object data management", </title> <publisher> Addison-Wesley, </publisher> <year> 1991 </year>
Reference: [ D r a k e 9 2 ] <author> Drake, J.M. and Carlis, J.V. </author> <title> "Document Repository Based on ISO 8613," </title> <institution> University of Minnesota Technical Report, TR92-12. </institution>
Reference: [ E l m a s r i ] <author> Elmasri, R. and Na vathe, </author> <title> S ., "Fund ament als of Da tabase S ystems", </title> <publisher> Ben jamin/ Cummings, </publisher> <year> 1989. </year>
Reference: [ISO] <author> The International Organization for Standardization, </author> <title> "ISO 8613 Information Processing - Text and office systems - Office Document Architecture (ODA) and interchange format", </title> <year> 1989 </year>
Reference-contexts: As part of developing the methods presented, a large LDS was chosen to verify and validate them. The LDS schema chosen was created by J. Drake and J. Carlis [Drake92] for a document repository based on the ISO standard 8613 (Office Document Architecture, or ODA) <ref> [ISO] </ref>. The ODA LDS was well suited for this effort, having 98 entities, well over 200 relationships and hundreds of attributes (see appendix for the resulting object schema). A database contains descriptions of instances of types of things. An LDS names the types of things described.
Reference: [ITASCA] <author> ITASCA Systems , Inc., </author> <title> ITASCA Distributed Object Database Management System Manuals, </title> <year> 1992. </year>
Reference-contexts: We end with summary and extensions in section 6. SECTION 2. ITASCA-SUPPORTED RELATIONSHIPS Before discussing the transformation of LDS objects to ITASCA, We provide a brief explanation of the relationships supported by ITASCA. ITASCA supports class relationships and instance relationships (more detailed descriptions can be found in [Kim], <ref> [ITASCA] </ref>). Section 2.1 will describe the instance relationships, and section 2.2 will describe the class relationship. A basic understanding by the reader of object-oriented concepts and terminology is assumed. <p> However, we italicize it to indicate that it will not be used. Arbitrary, identifying LDS attributes, if of no interest to users, may profitably have OID's substituted for them at the implementation level. A complete list of attribute notation is displayed in figure 3.2.1. See [Kim], <ref> [ITASCA] </ref> for a discussion of class and shared attributes. object_logical_type This attribute is not needed in the resulting object schema. Not Used object_logical_type Most all attributes transform to instance attributes - no special symbol used.
Reference: [ K i m] <author> Kim, W., </author> <title> "Introduction to Object-Oriented Databases", </title> <publisher> MIT Press, </publisher> <year> 1990 </year>
Reference: [ S e n k o 7 3 ] <author> Senko, M., </author> <title> "Data Structures and Accessing in Data Base Systems", </title> <journal> IBM Systems Journal (12,1), </journal> <year> 1973. </year>
References-found: 9

