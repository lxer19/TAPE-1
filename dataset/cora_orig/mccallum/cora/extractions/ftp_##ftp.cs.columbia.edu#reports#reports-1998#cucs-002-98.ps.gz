URL: ftp://ftp.cs.columbia.edu/reports/reports-1998/cucs-002-98.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1998.html
Root-URL: http://www.cs.columbia.edu
Email: fmontek,nowickg@cs.columbia.edu  
Title: Synthesis for Logical Initializability of Synchronous Finite State Machines  
Author: Montek Singh Steven M. Nowick 
Date: Jan 4-7, 1997 [21].  
Note: This work was supported by an NSF CAREER Award MIP-9501880 and by an Alfred P. Sloan Research Fellowship. This work is an extended version of a conference paper with the same title, that appeared in the proceedings of the 10th International Conference on VLSI Design,  
Address: 1214 Amsterdam Ave: Mailcode 0401 New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: Technical report: CUCS-002-98 January 15, 1998 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V.D. Agrawal, K.T. Cheng, and P. Agrawal, </author> <title> "A directed search method for test generation using a concurrent fault simulator," </title> <journal> IEEE Trans. CAD, </journal> <volume> vol. CAD-8, </volume> <pages> pp. 131-138, </pages> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Initializability is needed in order to physically reset machines if they get out of synchronism. Furthermore, a form of initializability called logical initializability is required for several fault simulators and non-scan automatic test pattern generators (ATPG's) to work effectively. Examples of such ATPG's include STG [2] and CONTEST <ref> [1] </ref>. The notion of initializability is tightly tied to the model used to simulate the machine. For example, this model could be a functional simulation of an abstract state machine, a 3-valued (0,1,X) logical simulation of a gate-level circuit, or a true-value (0,1) simulation of a gate-level circuit.
Reference: [2] <author> S. Mallela and S. Wu, </author> <title> "A sequential circuit test generation system," </title> <booktitle> in Proc. of ITC, </booktitle> <address> Philadelphia, PA. </address> <year> 1985, </year> <pages> pp. 57-61. </pages>
Reference-contexts: Initializability is needed in order to physically reset machines if they get out of synchronism. Furthermore, a form of initializability called logical initializability is required for several fault simulators and non-scan automatic test pattern generators (ATPG's) to work effectively. Examples of such ATPG's include STG <ref> [2] </ref> and CONTEST [1]. The notion of initializability is tightly tied to the model used to simulate the machine.
Reference: [3] <author> J.A. Wehbeh and D.G. Saab, </author> <title> "On the initialization of sequential circuits," </title> <booktitle> in Proc. of ITC, </booktitle> <pages> pp. 233-239, </pages> <year> 1994. </year>
Reference-contexts: Further, while some methods only analyze a machine description 3 to search for initialization sequences, other methods go a step further and synthesize for initializability. For example, the method of Wehbeh and Saab <ref> [3] </ref> analyzes the gate-level circuit to determine if it is logically initializable. On the other hand, the method of Cheng and Agrawal [4, 5] attempts to synthesize a logically initializable gate-level circuit from a functionally initializable finite state machine (FSM). <p> Rho et. al. [6] analyze a functional description of a state machine, in the form of a state transition graph, and identify functional initialization sequences, if any exist. This method uses BDD's [9] and produces minimum-length initialization sequences. Wehbeh and Saab <ref> [3] </ref> present a method which determines if a gate-level implementation is initializable. This method is able to generate both functional and logical initialization sequences from a given gate-level circuit. In this paper, we present a new procedure for synthesis of initializable synchronous circuits.
Reference: [4] <author> K. Cheng and V. Agrawal, </author> <title> "State assignment for initializable synthesis," </title> <booktitle> in Proc. IC-CAD, </booktitle> <pages> pp. 212-215, </pages> <year> 1989. </year>
Reference-contexts: For example, the method of Wehbeh and Saab [3] analyzes the gate-level circuit to determine if it is logically initializable. On the other hand, the method of Cheng and Agrawal <ref> [4, 5] </ref> attempts to synthesize a logically initializable gate-level circuit from a functionally initializable finite state machine (FSM). It is well known that state encoding can affect the logical initializability of a finite state machine implementation [4, 5]. <p> On the other hand, the method of Cheng and Agrawal <ref> [4, 5] </ref> attempts to synthesize a logically initializable gate-level circuit from a functionally initializable finite state machine (FSM). It is well known that state encoding can affect the logical initializability of a finite state machine implementation [4, 5]. If the sole objective of an "optimal" state assignment is to minimize the amount of logic, one may end up with implementations that are logically uninitializable. <p> The method is the first systematic approach for synthesis-for-logical-initializability which addresses both of these issues. State Assignment. In previous work <ref> [4, 5] </ref>, a method was proposed for state assignment for initializability. We demonstrate that the constraints on state assignment imposed by that method are neither necessary nor sufficient. The contribution of this paper towards state-assignment-for-initializability is two-fold: (i) we identify where the constraints of [4, 5] can be easily and safely <p> State Assignment. In previous work <ref> [4, 5] </ref>, a method was proposed for state assignment for initializability. We demonstrate that the constraints on state assignment imposed by that method are neither necessary nor sufficient. The contribution of this paper towards state-assignment-for-initializability is two-fold: (i) we identify where the constraints of [4, 5] can be easily and safely relaxed, and (ii) we identify where additional constraints are needed (irrespective of whether or not the constraints of [4, 5] were relaxed). <p> The contribution of this paper towards state-assignment-for-initializability is two-fold: (i) we identify where the constraints of <ref> [4, 5] </ref> can be easily and safely relaxed, and (ii) we identify where additional constraints are needed (irrespective of whether or not the constraints of [4, 5] were relaxed). The new set of constraints used by our state assignment method is sufficient ; we guarantee that our method always produces a state assignment that allows one to synthesize a logically initializable circuit. Combinational Logic Synthesis. <p> Moreover, the state assignment step provided by their method is not always correct as far as initializability is concerned. Hence, their method may not always yield initializable circuits. 6 3 Background The Cheng-Agrawal Method This section reviews the Cheng and Agrawal state assignment method <ref> [4, 5] </ref>. Given a finite state machine and a synchronizing sequence, the basic approach of the method is to constrain the state encoding step to insure logical initializability. An example first shows how state encoding can affect logical (3-valued) initializability. Example 3.1.
Reference: [5] <author> K. Cheng and V. Agrawal, </author> <title> "Initializability consideration in sequential machine synthesis," </title> <journal> IEEE Trans. Comput., </journal> <volume> vol 41, </volume> <pages> pp. 374-379, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: For example, the method of Wehbeh and Saab [3] analyzes the gate-level circuit to determine if it is logically initializable. On the other hand, the method of Cheng and Agrawal <ref> [4, 5] </ref> attempts to synthesize a logically initializable gate-level circuit from a functionally initializable finite state machine (FSM). It is well known that state encoding can affect the logical initializability of a finite state machine implementation [4, 5]. <p> On the other hand, the method of Cheng and Agrawal <ref> [4, 5] </ref> attempts to synthesize a logically initializable gate-level circuit from a functionally initializable finite state machine (FSM). It is well known that state encoding can affect the logical initializability of a finite state machine implementation [4, 5]. If the sole objective of an "optimal" state assignment is to minimize the amount of logic, one may end up with implementations that are logically uninitializable. <p> The method is the first systematic approach for synthesis-for-logical-initializability which addresses both of these issues. State Assignment. In previous work <ref> [4, 5] </ref>, a method was proposed for state assignment for initializability. We demonstrate that the constraints on state assignment imposed by that method are neither necessary nor sufficient. The contribution of this paper towards state-assignment-for-initializability is two-fold: (i) we identify where the constraints of [4, 5] can be easily and safely <p> State Assignment. In previous work <ref> [4, 5] </ref>, a method was proposed for state assignment for initializability. We demonstrate that the constraints on state assignment imposed by that method are neither necessary nor sufficient. The contribution of this paper towards state-assignment-for-initializability is two-fold: (i) we identify where the constraints of [4, 5] can be easily and safely relaxed, and (ii) we identify where additional constraints are needed (irrespective of whether or not the constraints of [4, 5] were relaxed). <p> The contribution of this paper towards state-assignment-for-initializability is two-fold: (i) we identify where the constraints of <ref> [4, 5] </ref> can be easily and safely relaxed, and (ii) we identify where additional constraints are needed (irrespective of whether or not the constraints of [4, 5] were relaxed). The new set of constraints used by our state assignment method is sufficient ; we guarantee that our method always produces a state assignment that allows one to synthesize a logically initializable circuit. Combinational Logic Synthesis. <p> The new set of constraints used by our state assignment method is sufficient ; we guarantee that our method always produces a state assignment that allows one to synthesize a logically initializable circuit. Combinational Logic Synthesis. In <ref> [5] </ref>, it was suggested that combinational logic synthesis influences logical initializability, and a synthesis-for-initializability method was proposed. Here, we show that the logic synthesis technique surmised in [5] is not adequate. <p> Combinational Logic Synthesis. In <ref> [5] </ref>, it was suggested that combinational logic synthesis influences logical initializability, and a synthesis-for-initializability method was proposed. Here, we show that the logic synthesis technique surmised in [5] is not adequate. <p> The idea is to modify the signal transition graph specification to insure functional initializability for an asynchronous circuit specification. However, initializability is achieved only at the cost of some reduction in concurrency. Cheng and Agrawal <ref> [5] </ref> target the state assignment step in an attempt to produce logically initializable circuits from functionally initializable specifications. This method is applicable to synthesis of synchronous state machines. The method of Chakradhar et. al. [7], targets the combinational logic synthesis step for initializability. <p> We provide both (i) a state assignment step, and (ii) a combinational logic synthesis step, both of which are shown to be critical to logical initializability. From among the previous work just cited, the one that comes closest to our work is that of Cheng and Agrawal <ref> [5] </ref>. However, their method does not provide for a combinational logic synthesis step specifically constrained for initializability. Moreover, the state assignment step provided by their method is not always correct as far as initializability is concerned. <p> Moreover, the state assignment step provided by their method is not always correct as far as initializability is concerned. Hence, their method may not always yield initializable circuits. 6 3 Background The Cheng-Agrawal Method This section reviews the Cheng and Agrawal state assignment method <ref> [4, 5] </ref>. Given a finite state machine and a synchronizing sequence, the basic approach of the method is to constrain the state encoding step to insure logical initializability. An example first shows how state encoding can affect logical (3-valued) initializability. Example 3.1. <p> However, combinational logic synthesis can still adversely affect logical initializabil-ity. That is, even after an FSM has been state encoded in accordance with the method of Section 5, unrestrained combinational logic minimization can render it logically uninitializ-able. 19 In <ref> [5] </ref>, Cheng and Agrawal point out that combinational logic synthesis influences logical initializability. They surmise that initializability can be preserved by applying single-output logic minimization for each output, as opposed to performing multi-output logic minimization. However, we discovered that this restriction is neither necessary nor sufficient. <p> The method provides both a state assignment step, and a combinational logic synthesis step. For state assignment, we introduced two sets of constraints. First, relaxed face embedding constraints were presented. These constraints are safely relaxed versions of existing face-embedding constraints <ref> [5] </ref>. Second, don't-care intersection constraints were introduced and were shown to be critical for initializability. For combinational logic synthesis, it was first shown that unconstrained logic minimization can render a circuit logically uninitializable under 3-valued simulation. Next, necessary and sufficient conditions on combinational logic for initializability were enumerated.
Reference: [6] <author> J.-K. Rho, F. Somenzi, and C. Pixley, </author> <title> "Minimum length synchronizing sequences of finite state machines," </title> <booktitle> Proc. DAC, </booktitle> <pages> pp. 463-468, </pages> <year> 1993. </year>
Reference-contexts: This method is essentially a search procedure for finding initialization sequences and concomitant don't-care assignments in order to synthesize initializable asynchronous circuits. Each of the above methods focuses on synthesis for initializability. The following methods are analysis techniques to find initialization sequences given a circuit description. Rho et. al. <ref> [6] </ref> analyze a functional description of a state machine, in the form of a state transition graph, and identify functional initialization sequences, if any exist. This method uses BDD's [9] and produces minimum-length initialization sequences. Wehbeh and Saab [3] present a method which determines if a gate-level implementation is initializable.
Reference: [7] <author> S.T. Chakradhar, S. Banerjee, R.K. Roy, and D.K. Pradhan, </author> <title> "Synthesis of initializable asynchronous circuits," </title> <booktitle> in Proc. 7th Int. Conf. on VLSI Design, </booktitle> <pages> pp. 383-388, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Cheng and Agrawal [5] target the state assignment step in an attempt to produce logically initializable circuits from functionally initializable specifications. This method is applicable to synthesis of synchronous state machines. The method of Chakradhar et. al. <ref> [7] </ref>, targets the combinational logic synthesis step for initializability. This method is essentially a search procedure for finding initialization sequences and concomitant don't-care assignments in order to synthesize initializable asynchronous circuits. Each of the above methods focuses on synthesis for initializability.
Reference: [8] <author> S. Banerjee, R.K. Roy, S.T. Chakradhar, and D.K. Pradhan, </author> <title> "Initialization Issues in the Synthesis of Asynchronous Circuits," </title> <booktitle> in Proc. </booktitle> <address> ICCD-1994. </address>
Reference-contexts: Initializability considerations can be incorporated at various levels. The figure is labeled to show some of the recent work on initializability targeting different levels in the synthesis path. 5 Banerjee et. al. <ref> [8] </ref> present a technique that targets the highest level in the synthesis path: the top-level functional specification (signal transition graph). The idea is to modify the signal transition graph specification to insure functional initializability for an asynchronous circuit specification.
Reference: [9] <author> R. E. Bryant, </author> <title> "Graph-based algorithms for Boolean function manipulation," </title> <journal> in IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: The following methods are analysis techniques to find initialization sequences given a circuit description. Rho et. al. [6] analyze a functional description of a state machine, in the form of a state transition graph, and identify functional initialization sequences, if any exist. This method uses BDD's <ref> [9] </ref> and produces minimum-length initialization sequences. Wehbeh and Saab [3] present a method which determines if a gate-level implementation is initializable. This method is able to generate both functional and logical initialization sequences from a given gate-level circuit.
Reference: [10] <author> O. Coudert, </author> <title> "Two-level logic minimization: an overview," in Integration, </title> <journal> the VLSI journal, </journal> <volume> 17 </volume> <pages> 97-140, </pages> <year> 1994. </year> <month> 34 </month>
Reference-contexts: However, such a code is potentially expensive in terms of the amount of logic used to synthesize the circuit. Therefore, several well known methods have been developed for efficiently solving a set of dichotomy constraints (e.g., Scherzo <ref> [10] </ref>, Nova [11]). 6 Step #2: Combinational Logic Synthesis Once constrained state assignment is complete, combinational logic synthesis can be performed. However, combinational logic synthesis can still adversely affect logical initializabil-ity.
Reference: [11] <author> T. Villa and A. Sangiovanni-Vincentelli, </author> <title> "NOVA: state assignment of finite state ma-chines for optimal two-level logic implementation," </title> <journal> in IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 9(9) </volume> <pages> 905-924, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: However, such a code is potentially expensive in terms of the amount of logic used to synthesize the circuit. Therefore, several well known methods have been developed for efficiently solving a set of dichotomy constraints (e.g., Scherzo [10], Nova <ref> [11] </ref>). 6 Step #2: Combinational Logic Synthesis Once constrained state assignment is complete, combinational logic synthesis can be performed. However, combinational logic synthesis can still adversely affect logical initializabil-ity.
Reference: [12] <author> S.H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <address> New York: </address> <publisher> Wiley-Interscience, </publisher> <year> 1969. </year>
Reference-contexts: The RFEC as well as DCIC constraints are dichotomy constraints. Any set of dichotomy constraints can always be solved. For example, a one-hot code <ref> [12] </ref> which uses one state bit for every symbolic state satisfies all dichotomies that can be defined over the set of states. However, such a code is potentially expensive in terms of the amount of logic used to synthesize the circuit. <p> In a hazard model which assumes arbitrary gate and wire delays, worst case behavior is assumed <ref> [12, 18] </ref>. Hence, if a minterm is reachable by some sequence of transitions on the set of wires, x, it is assumed reachable. 2 Proposition 6.1 (hazard simulation of an atomic gate). Let G be an atomic gate for a Boolean function f . <p> We consider both 2-level and multi-level logic synthesis. 2-level: For the special case of a 2-level AND-OR implementation, the conditions for hazard freedom have been presented in <ref> [15, 16, 12] </ref>. To eliminate static logic hazards ([12, 15]), constraints imposed on logic synthesis are of the form of required cubes. A required cube is a cube that must be covered by some product term of the cover.
Reference: [13] <author> G.D. </author> <title> Micheli, Synthesis and Optimization of Digital Circuits, </title> <publisher> McGraw-Hill (1994). </publisher>
Reference-contexts: To this end, the method introduces an additional set of face-embedding constraints into the state assignment step. Constraints are in the form of dichotomies <ref> [13, 14] </ref>. A dichotomy constraint, or simply dichotomy, is written as (X; Y ), where X and Y are disjoint sets of states. The constraint (X; Y ) is the stipulation that the smallest containing cubes of X and Y , after state encoding, do not intersect. <p> Benchmark examples. Results for 14 state machines from the MCNC89 benchmark suite are presented. Each machine was functionally initializable, and the same initialization sequence was used for each synthesis method. For each machine, the optimal state encoding constraints of <ref> [13] </ref> were first generated. Then, the initializability constraints for each of the synthesis methods (except for the BASE method which uses none) were generated. All the dichotomy constraints were then solved to obtain a final state assignment. Next, 2-level multi-output logic minimization was performed to synthesize a gate-level circuit.
Reference: [14] <author> J.H. Tracey, </author> <title> "Internal state assignments for asynchronous sequential machines," </title> <journal> IEEE-TEC, </journal> <volume> vol. EC-15, no, 4, </volume> <pages> pp. 551-560, </pages> <month> Aug. </month> <year> 1966. </year>
Reference-contexts: To this end, the method introduces an additional set of face-embedding constraints into the state assignment step. Constraints are in the form of dichotomies <ref> [13, 14] </ref>. A dichotomy constraint, or simply dichotomy, is written as (X; Y ), where X and Y are disjoint sets of states. The constraint (X; Y ) is the stipulation that the smallest containing cubes of X and Y , after state encoding, do not intersect.
Reference: [15] <author> E.B. Eichelberger, </author> <title> "Hazard detection in combinational and sequential switching circuits," </title> <journal> IBM J. Res. Develop., </journal> <volume> vol 9, no. 2, </volume> <pages> pp. 90-99, </pages> <year> 1965. </year>
Reference-contexts: Then, the key result of this section is presented: a theorem that relates 3-valued simulatability of a circuit with hazard-freedom of asynchronous circuits. In particular, it is shown that our new constraints on logic synthesis for initializability correspond precisely to hazard-free synthesis requirements (cf. Nowick [16], Eichelberger <ref> [15] </ref>). Finally, a multi-level synthesis method for initializability is presented that leverages off of existing hazard-free synthesis methods. 6.1 How logic synthesis affects 3-valued simulatability The following example illustrates how logic synthesis can affect logical initializability under 3-valued simulation. Example 6.1. <p> We consider both 2-level and multi-level logic synthesis. 2-level: For the special case of a 2-level AND-OR implementation, the conditions for hazard freedom have been presented in <ref> [15, 16, 12] </ref>. To eliminate static logic hazards ([12, 15]), constraints imposed on logic synthesis are of the form of required cubes. A required cube is a cube that must be covered by some product term of the cover.
Reference: [16] <author> S.M. Nowick and D.L. Dill, </author> <title> "Exact Two-level Minimization of Hazard-free Logic with Multiple-Input Changes," </title> <journal> IEEE Trans. CAD, </journal> <volume> vol. CAD-14, </volume> <pages> pp. 986-997, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Then, the key result of this section is presented: a theorem that relates 3-valued simulatability of a circuit with hazard-freedom of asynchronous circuits. In particular, it is shown that our new constraints on logic synthesis for initializability correspond precisely to hazard-free synthesis requirements (cf. Nowick <ref> [16] </ref>, Eichelberger [15]). Finally, a multi-level synthesis method for initializability is presented that leverages off of existing hazard-free synthesis methods. 6.1 How logic synthesis affects 3-valued simulatability The following example illustrates how logic synthesis can affect logical initializability under 3-valued simulation. Example 6.1. <p> Example 6.1 showed that it is sometimes necessary to include a certain product term in the 2-level implementation for initializability. In that example, bc was such a product term in the implementation for Y . In the asynchronous terminology of <ref> [16] </ref>, bc is called a required cube; the stipulation that the 2-level implementation of Y must include at least one term that covers bc is a hazard-free covering requirement. We now point out the correspondence between 3-valued simulatability and hazard-freedom for the synthesized circuit of Fig. 8. <p> We consider both 2-level and multi-level logic synthesis. 2-level: For the special case of a 2-level AND-OR implementation, the conditions for hazard freedom have been presented in <ref> [15, 16, 12] </ref>. To eliminate static logic hazards ([12, 15]), constraints imposed on logic synthesis are of the form of required cubes. A required cube is a cube that must be covered by some product term of the cover. <p> To eliminate static logic hazards ([12, 15]), constraints imposed on logic synthesis are of the form of required cubes. A required cube is a cube that must be covered by some product term of the cover. Techniques for minimization of hazard-free logic based on required cubes are well known <ref> [16, 17] </ref>. Moreover, the input transitions are function hazard free, since the function value is all 0 (or all 1) throughout the transition. <p> Techniques for minimization of hazard-free logic based on required cubes are well known [16, 17]. Moreover, the input transitions are function hazard free, since the function value is all 0 (or all 1) throughout the transition. Therefore, the constraints for static logic hazard-freedom can always be solved <ref> [16] </ref>. 4 Multi-level: The duality between simulatability and hazard-freedom enables us to do multi-level logic synthesis for simulatability as follows: (a) do 2-level hazard-free logic synthesis on the appropriate input transitions that span the 3-valued vectors, and (b) use multi-level transformations that do not introduce any static hazards (see [18]). <p> Obviously, this solution may be very expensive, but, in practice, when an exact hazard-free minimizer is used, the overhead in satisfying hazard constraints is often negligible <ref> [16] </ref>. 29 ability, we used a second variant that consisted of Cheng-Agrawal state assignment followed by our combinational logic synthesis method of Section 6. We call this method CA+HF.
Reference: [17] <author> M. Theobald and S.M. Nowick, </author> <title> "An implicit method for hazard-free two-level logic minimization," </title> <booktitle> in Proc. Intl. Symposium on Advanced Research in Asynchronous Circuits and Systems, </booktitle> <month> Mar. </month> <year> 1998. </year>
Reference-contexts: To eliminate static logic hazards ([12, 15]), constraints imposed on logic synthesis are of the form of required cubes. A required cube is a cube that must be covered by some product term of the cover. Techniques for minimization of hazard-free logic based on required cubes are well known <ref> [16, 17] </ref>. Moreover, the input transitions are function hazard free, since the function value is all 0 (or all 1) throughout the transition.
Reference: [18] <author> D.S. Kung, </author> <title> "Hazard-Non-Increasing Gate-Level Optimization Algorithms," </title> <booktitle> in Proc. ICCAD, </booktitle> <pages> pp 631-, </pages> <year> 1992. </year>
Reference-contexts: We first review Kung's 9-valued algebra <ref> [18] </ref> which will be needed to prove our later results. Kung's algebra is a transition algebra that classifies a transition on a wire into one of 9 values: f0; 1; "; #; S0; S1; D+; D; flg. <p> In a hazard model which assumes arbitrary gate and wire delays, worst case behavior is assumed <ref> [12, 18] </ref>. Hence, if a minterm is reachable by some sequence of transitions on the set of wires, x, it is assumed reachable. 2 Proposition 6.1 (hazard simulation of an atomic gate). Let G be an atomic gate for a Boolean function f . <p> solved [16]. 4 Multi-level: The duality between simulatability and hazard-freedom enables us to do multi-level logic synthesis for simulatability as follows: (a) do 2-level hazard-free logic synthesis on the appropriate input transitions that span the 3-valued vectors, and (b) use multi-level transformations that do not introduce any static hazards (see <ref> [18] </ref>). Corollary 6.1 provides the basis for the correctness of this procedure.
Reference: [19] <author> B. Lin and S. Devadas, </author> <title> "Synthesis of Hazard-Free Multilevel Logic Under Multi-Input Changes from Binary Decision Diagrams," </title> <journal> IEEE Trans. CAD, </journal> <volume> vol. 14, </volume> <pages> pp 974-985, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Corollary 6.1 provides the basis for the correctness of this procedure. Alternatively, direct multi-level hazard-free synthesis methods based on BDD's can be used <ref> [19] </ref>. 7 Results Tables 1 and 2 present the results of our synthesis-for-initializability method of Sections 5 and 6 on several synchronous state machine examples from the MCNC89 benchmark suite [20]. We compare our new method with both the Cheng-Agrawal method, and a base method. Comparison of synthesis methods.
Reference: [20] <author> R. Lisanke, </author> <title> "Finite-State Machine Benchmark Set v1.0," http://www.cbl.ncsu.edu/pub/Benchmark dirs/LGSynth89/fsmexamples/, </title> <booktitle> 1989 MCNC International Workshop on Logic Synthesis. </booktitle>
Reference-contexts: Alternatively, direct multi-level hazard-free synthesis methods based on BDD's can be used [19]. 7 Results Tables 1 and 2 present the results of our synthesis-for-initializability method of Sections 5 and 6 on several synchronous state machine examples from the MCNC89 benchmark suite <ref> [20] </ref>. We compare our new method with both the Cheng-Agrawal method, and a base method. Comparison of synthesis methods. For Cheng-Agrawal, we consider two variants.
Reference: [21] <author> M. Singh and S.M. Nowick, </author> <title> "Synthesis for logical initializability of synchronous finite state machines," </title> <booktitle> in Proc. of Intl. Conf. on VLSI Design, </booktitle> <pages> pp 76-80, </pages> <month> Jan. </month> <year> 1997. </year> <month> 35 </month>
References-found: 21

