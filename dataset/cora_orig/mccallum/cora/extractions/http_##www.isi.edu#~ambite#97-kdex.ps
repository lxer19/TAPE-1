URL: http://www.isi.edu/~ambite/97-kdex.ps
Refering-URL: http://www.isi.edu/~ambite/
Root-URL: 
Email: fambite, knoblockg@isi.edu  
Title: Flexible and Scalable Query Access Planning using an AI Planner  
Author: Jose Luis Ambite Craig A. Knoblock 
Address: Marina del Rey, CA 90292, USA  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  
Abstract: In [1], we introduced Planning by Rewriting (PBR), a new paradigm for efficient high-quality planning that exploits plan rewriting rules and efficient local search techniques to transform an easy-to-generate, but possibly suboptimal, initial plan into a low-cost plan. In this paper we show in detail the application of the general framework to query planning in distributed environments. As a result we obtain an scalable and flexible query planner for use in an information mediator. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jose Luis Ambite and Craig A. Knoblock. </author> <title> Planning by rewriting: Efficiently generating high-quality plans. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <address> Providence, RI, </address> <year> 1997. </year>
Reference-contexts: However planning is computationally hard except for its simplest formulations [3]. Moreover, in many circumstances it is not enough to find any solution plan since the quality of the solution is also critical. In <ref> [1] </ref> we presented Planning by Rewriting (PBR), a paradigm for efficient high-quality planning based on local search and plan rewriting. In this paper we focus on the application of the general framework to query planning in distributed environments and show how it results in a flexible and scalable query planner. <p> Section 4 shows some encouraging initial results. Section 5 discusses related work. Section 6 discusses future work. Section 7 concludes. 2 Review of Planning by Rewriting Planning by Rewriting <ref> [1] </ref> follows the iterative improvement style of many optimization algorithms. The framework works in two phases: 1. Efficiently generate an initial solution plan. 2. <p> The framework of Planning by Rewriting is related to several pieces of previous work in AI planning. Most significantly it is a generalization of plan merging [4] and it follows on iterative repair ideas such as those in [18] and [23]. The reader is referred to <ref> [1] </ref> for a more detailed discussion of the relationship with AI planning. Finally, PBR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization [19].
Reference: [2] <author> Yigal Arens, Craig A. Knoblock, and Wei-Min Shen. </author> <title> Query reformulation for dynamic information integration. </title> <journal> Journal of Intelligent Information Systems, Special Issue on Intelligent Information Integration, </journal> 6(2/3):99-130, 1996. 
Reference-contexts: This is a highly combinatorial problem in which the number of query evaluation plans grows exponentially with the number of relations in the given query. Our distributed query processing and integration model follows that of the SIMS mediator system <ref> [2, 13] </ref>. Briefly, a set of information sources such as databases, knowledge bases, web servers, etc, supply data about a particular application domain. A SIMS mediator integrates and provides a single point of access for all the information in such a domain.
Reference: [3] <author> Kutluhan Erol, Dana Nau, and V. S. Subrahmanian. </author> <title> Decidability and undecidability results for domain-independent planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76(1-2):75-88, </volume> <year> 1995. </year>
Reference-contexts: 1 Introduction Planning, the process of generating a network of actions that achieves a desired goal from an initial state of the world, is a problem of considerable practical significance. However planning is computationally hard except for its simplest formulations <ref> [3] </ref>. Moreover, in many circumstances it is not enough to find any solution plan since the quality of the solution is also critical. In [1] we presented Planning by Rewriting (PBR), a paradigm for efficient high-quality planning based on local search and plan rewriting.
Reference: [4] <author> David E. Foulser, Ming Li, and Qiang Yang. </author> <title> Theory and algorithms for plan merging. </title> <journal> Artificial Intelligence, </journal> <volume> 57(2-3):143-182, </volume> <year> 1992. </year>
Reference-contexts: The framework of Planning by Rewriting is related to several pieces of previous work in AI planning. Most significantly it is a generalization of plan merging <ref> [4] </ref> and it follows on iterative repair ideas such as those in [18] and [23]. The reader is referred to [1] for a more detailed discussion of the relationship with AI planning.
Reference: [5] <author> G. Graefe, R. L. Cole, D. L. Davison, W. J. McKenna, and R. H. Wolniewicz. </author> <title> Extensible query optimization and parallel execution in volcano. </title> <editor> In J. C. Freytag, G. Vossen and D. Maier, editor, </editor> <title> Query Processing for Advanced Database Applications, page 305. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1994. </year>
Reference-contexts: Although Exodus strives for extensibility, its operator definition language is more restricted than ours. Also it has a fixed search strategy (a form of hill climbing). Exodus focuses more in implementation methods and it operates on centralized databases. Volcano <ref> [5] </ref>, a successor of Exodus, provides a general implementation of data processing operations based on iterators, but do not offer more generality on algebraic query optimization.
Reference: [6] <author> Geotz Graefe and David J. DeWitt. </author> <title> The EXODUS optimizer generator. </title> <booktitle> In Proceedings of the ACM SIG-MOD International Conference on Management of Data, </booktitle> <address> San Francisco, CA, </address> <year> 1987. </year>
Reference-contexts: There are two types of research on query optimization that are most relevant to our approach. The first one are query optimizer generators, some of which ac cept declarative specifications. Exodus <ref> [6] </ref> is a query optimizer generator that compiles a query optimizer out of a set of operators, transformation rules and the code for the methods that implement each operator. Although Exodus strives for extensibility, its operator definition language is more restricted than ours.
Reference: [7] <author> Goetz Graefe. </author> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2) </volume> <pages> 73-170, </pages> <year> 1993. </year>
Reference-contexts: Query optimizers need both to find the most efficient algebraic form of a query and to choose specific methods to implement each data processing operation <ref> [7] </ref>. For example, a join can be performed by a variety of algorithms, such as nested loops, merge scan, hash join, etc.
Reference: [8] <author> Yannis Ioannidis and Younkyung Cha Kang. </author> <title> Randomized algorithms for optimizing large join queries. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 312-321, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: We expect that PBR would be able to provide more general interleaving of planning and execution [11]. The second type of work is in efficient search algorithms for query planners <ref> [21, 8] </ref>. Our approach being based in a domain-independent planner is more flexible than previous research allowing the analysis of different domains (operators, rewriting rules) and search algorithms in an uniform and easily extensible framework. Despite the importance of query planning, there has been little work in the planning literature.
Reference: [9] <author> Matthias Jarke and Jurgen Koch. </author> <title> Query optimization in database systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 111-152, </pages> <year> 1984. </year>
Reference-contexts: We expect that a more appropriate implementation would provide significantly better results. 5 Related work In the database literature, query optimization has been extensively studied <ref> [9] </ref>. Query optimizers need both to find the most efficient algebraic form of a query and to choose specific methods to implement each data processing operation [7]. For example, a join can be performed by a variety of algorithms, such as nested loops, merge scan, hash join, etc.
Reference: [10] <author> Craig A. Knoblock. </author> <title> Applying a general-purpose planner to the problem of query access planning. </title> <booktitle> In Proceedings of the AAAI Fall Symposium on Planning and Learning: On to Real Applications, </booktitle> <address> New Orleans, La, </address> <year> 1994. </year>
Reference-contexts: The user interacts directly with the SIMS mediator without knowledge about the schemas and locations of the sources. Such is the task of the query planner. The encoding of information goals and the operator specification appear in <ref> [10, 12] </ref>. A sample information goal for this domain is shown in Figure 1. This goal asks to send to the output device of the SIMS mediator all the codes of ships that can dock in the port of Tabarka. <p> It is derived from the associative and commutative properties of the relational algebra join operation. This rule allows the system to explore the space of join trees. In the query planning domain of <ref> [10] </ref> queries are expressed as complex terms. The PBR rules use the interpreted predicates in the constraints field to manipulate such query expressions. For example, the join-swappable predicate checks if the two join operators have queries that can be exchanged.
Reference: [11] <author> Craig A. Knoblock. </author> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: We expect that PBR would be able to provide more general interleaving of planning and execution <ref> [11] </ref>. The second type of work is in efficient search algorithms for query planners [21, 8]. Our approach being based in a domain-independent planner is more flexible than previous research allowing the analysis of different domains (operators, rewriting rules) and search algorithms in an uniform and easily extensible framework.
Reference: [12] <author> Craig A. Knoblock. </author> <title> Building a planner for information gathering: A report from the trenches. </title> <booktitle> In Proceedings of the Third International Conference on Artificial Intelligence Planning Systems, </booktitle> <address> Edinburgh, Scotland, </address> <year> 1996. </year>
Reference-contexts: The user interacts directly with the SIMS mediator without knowledge about the schemas and locations of the sources. Such is the task of the query planner. The encoding of information goals and the operator specification appear in <ref> [10, 12] </ref>. A sample information goal for this domain is shown in Figure 1. This goal asks to send to the output device of the SIMS mediator all the codes of ships that can dock in the port of Tabarka. <p> Despite the importance of query planning, there has been little work in the planning literature. Occam [15] is a planner for information gathering, but it does not specifically address plan quality. Sage <ref> [12] </ref> considers plan quality and supports interleaving of planning and execution. PBR does not currently interleaves currently planning and execution, but it has the capability of being as general as Sage with better scaling properties.
Reference: [13] <author> Craig A. Knoblock and Jose-Luis Ambite. </author> <title> Agents for information gathering. </title> <editor> In J. Bradshaw, editor, </editor> <booktitle> Software Agents. </booktitle> <publisher> AAAI/MIT Press, </publisher> <address> Menlo Park, CA, </address> <year> 1997. </year>
Reference-contexts: This is a highly combinatorial problem in which the number of query evaluation plans grows exponentially with the number of relations in the given query. Our distributed query processing and integration model follows that of the SIMS mediator system <ref> [2, 13] </ref>. Briefly, a set of information sources such as databases, knowledge bases, web servers, etc, supply data about a particular application domain. A SIMS mediator integrates and provides a single point of access for all the information in such a domain.
Reference: [14] <author> Craig A. Knoblock and Alon Levy. </author> <title> Exploiting run-time information for efficient processing of queries. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Information Gathering in Heterogeneous, Distributed Environments, </booktitle> <address> Palo Alto, CA, </address> <year> 1995. </year>
Reference-contexts: Interleaving planning and execution is necessary in order to deal effectively with unexpected situations in the environment such as database or network failures. It also enables the planner to perform dynamic query optimization, in which plans depend on run-time conditions, and the insertion of information gathering actions <ref> [14] </ref>. We plan to explore a variety of search techniques for query planning, for example, variable depth rewriting. In variable depth search a sequence of rewritings is applied atomically. This allows the planner to overcome initial cost increases that eventually would lead to strong cost reductions.
Reference: [15] <author> Chung T. Kwok and Daniel S. Weld. </author> <title> Planning to gather information. </title> <type> Technical Report UW-CSE-96-01-04, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1996. </year>
Reference-contexts: Our approach being based in a domain-independent planner is more flexible than previous research allowing the analysis of different domains (operators, rewriting rules) and search algorithms in an uniform and easily extensible framework. Despite the importance of query planning, there has been little work in the planning literature. Occam <ref> [15] </ref> is a planner for information gathering, but it does not specifically address plan quality. Sage [12] considers plan quality and supports interleaving of planning and execution.
Reference: [16] <author> Robert MacGregor. </author> <title> A deductive pattern matcher. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <address> Saint Paul, Minnesota, </address> <year> 1988. </year>
Reference-contexts: A sample information goal for this domain is shown in Figure 1. This goal asks to send to the output device of the SIMS mediator all the codes of ships that can dock in the port of Tabarka. The query is written in the Loom query language <ref> [16] </ref> which is used in the SIMS mediator system.
Reference: [17] <author> Michael V. Mannino, Paicheng Chu, and Thomas Sager. </author> <title> Statistical profile estimation in database systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 20(3) </volume> <pages> 191-221, </pages> <year> 1988. </year>
Reference-contexts: The query size estimation is computed from simple statistics obtained from the source relations, such as number of tuples in a relation, the number of distinct values for each attribute, and the maximum and minimum values for numeric attributes. More sophisticated estimation models are surveyed in <ref> [17] </ref>. 3.4 Search Strategy The space of rewritings for query planning is too large for complete search methods to provide an acceptable performance.
Reference: [18] <author> Steven Minton. </author> <title> Minimizing conflicts: A heuristic repair method for constraint-satisfaction and scheduling problems. </title> <journal> Artificial Intelligence, </journal> <volume> 58(1-3):161-205, </volume> <year> 1992. </year>
Reference-contexts: The framework of Planning by Rewriting is related to several pieces of previous work in AI planning. Most significantly it is a generalization of plan merging [4] and it follows on iterative repair ideas such as those in <ref> [18] </ref> and [23]. The reader is referred to [1] for a more detailed discussion of the relationship with AI planning. Finally, PBR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization [19].
Reference: [19] <author> Christos H. Papadimitriou and Kenneth Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1982. </year>
Reference-contexts: The reader is referred to [1] for a more detailed discussion of the relationship with AI planning. Finally, PBR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization <ref> [19] </ref>.
Reference: [20] <author> J. Scott Penberthy and Daniel S. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 189-197, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: In Planning by Rewriting a plan is represented by a graph notation, in the spirit of partial-order causal-link planners such as UCPOP <ref> [20] </ref>. The nodes are domain actions. The edges specify a temporal order-ing relation among steps, imposed by causal links and ordering constraints. A plan rewriting rule, akin to term and graph rewriting rules, specifies the replacement under certain conditions of a partial plan by another partial plan.
Reference: [21] <author> Arun N. Swami. </author> <title> Optimization of large join queries: Combining heuristic and combinatorial techniques. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 367-376, </pages> <address> Port-land, OR, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: We expect that PBR would be able to provide more general interleaving of planning and execution [11]. The second type of work is in efficient search algorithms for query planners <ref> [21, 8] </ref>. Our approach being based in a domain-independent planner is more flexible than previous research allowing the analysis of different domains (operators, rewriting rules) and search algorithms in an uniform and easily extensible framework. Despite the importance of query planning, there has been little work in the planning literature.
Reference: [22] <author> C.T. Yu and C.C. Chang. </author> <title> Distributed query processing. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(4) </volume> <pages> 399-433, </pages> <year> 1984. </year>
Reference-contexts: This is the given plan cost function to optimize. * Search of the space of rewritings. There are many possible ways of searching the space of rewritten plans, for example, gradient descent, simulated annealing, etc. 3 Query Planning Distributed query processing <ref> [22] </ref> involves generating a plan that efficiently computes a user query. This plan is composed of data retrieval actions at diverse information sources and operations on this data (such as those of the relational algebra: join, selection, etc).
Reference: [23] <author> Monte Zweben, Brian Daun, and Michael Deale. </author> <title> Scheduling and rescheduling with iterative repair. </title> <booktitle> In Intelligent Scheduling, </booktitle> <pages> pages 241-255. </pages> <publisher> Morgan Kauf-man, </publisher> <address> San Mateo, CA, </address> <year> 1994. </year>
Reference-contexts: The framework of Planning by Rewriting is related to several pieces of previous work in AI planning. Most significantly it is a generalization of plan merging [4] and it follows on iterative repair ideas such as those in [18] and <ref> [23] </ref>. The reader is referred to [1] for a more detailed discussion of the relationship with AI planning. Finally, PBR can be understood as an instantiation of the local search idea, which has a long tradition in combinatorial optimization [19].
References-found: 23

