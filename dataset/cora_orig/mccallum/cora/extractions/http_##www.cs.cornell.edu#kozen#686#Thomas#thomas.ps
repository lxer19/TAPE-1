URL: http://www.cs.cornell.edu/kozen/686/Thomas/thomas.ps
Refering-URL: http://www.cs.cornell.edu/kozen/686/
Root-URL: 
Email: E-Mail: wt@informatik.uni-kiel.de  
Title: Languages, Automata, and Logic  
Author: Wolfgang Thomas 
Note: Work supported by ESPRIT BRA Working Group No. 6317 ASMICS 2 ("Algebraic and Syntactic Methods in Computer Science") and Deutsche Forschungs gemeinschaft (DFG Th 352/3-1).  
Address: D-24098 Kiel  
Affiliation: Institut fur Informatik und Praktische Mathematik der Christian-Albrechts-Universitat zu Kiel  
Date: May 1996  
Pubnum: Bericht 9607  
Abstract-found: 0
Intro-found: 1
Reference: [AD94] <author> R. Alur, D. Dill, </author> <title> A theory of timed automata, </title> <institution> Theor. Comput. Sci. </institution> <month> 126 </month> <year> (1994), </year> <pages> 183-235. </pages>
Reference-contexts: Often, the specification of a program involves also conditions on admissible time intervals or durations of states. There is by now a large number of logics and automata models which incorporate such aspects, e.g. the timed automata of Alur and Dill <ref> [AD94] </ref>. (For an overview of the field see [AH93].) The underlying models are timed words, extending classical !-words. <p> Wilke showed that this "MSO-logic of relative distance" characterizes the expressive power of the timed automata in the sense of Alur and Dill <ref> [AD94] </ref>; the decidability of the emptiness problem for these automata implies that also the satisfiability problem for this timed MSO-logic is decidable. 6 Automata and MSO-Logic on Infinite Trees Rabin showed in [Rab69] that the correspondence between automata and MSO-formulas can be lifted from the domain of infinite words to the
Reference: [AH93] <author> R. Alur, T.A. Henzinger, </author> <title> Real-time logics: complexity and expressiveness, </title> <booktitle> Information and Computation 104 (1993), </booktitle> <pages> 35-77. </pages>
Reference-contexts: Often, the specification of a program involves also conditions on admissible time intervals or durations of states. There is by now a large number of logics and automata models which incorporate such aspects, e.g. the timed automata of Alur and Dill [AD94]. (For an overview of the field see <ref> [AH93] </ref>.) The underlying models are timed words, extending classical !-words. A timed word is an !-sequence of letters ("states") together with a sequence of strictly increasing non-negative real numbers, such that the i-th number indicates the beginning of the lifetime of the i-th state.
Reference: [AHU74] <author> A.V. Aho, J.E. Hopcroft, J.D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address> <year> 1974. </year>
Reference-contexts: Successive alternations of quantifiers thus amount to successive applications of the powerset construction for automata. This means that (in the straightforward approach) each quantifier alternation induces an exponential blow-up of the size of corresponding finite automata. Indeed, from results of Meyer and Stockmeyer (see <ref> [AHU74] </ref>) it follows that, regarding computation time, a blow-up cannot be avoided: The time complexity of any algorithm converting MSO-formulas (even FO [S; &lt;]-formulas) to equivalent finite automata cannot be bounded by an elementary function (i.e. by an iterated exponential of the form 2 ^ (2 ^ : : : (2
Reference: [AN92] <author> A. Arnold, D. Niwinski, </author> <title> Fixed point characterization of weak monadic logic definable sets of trees, in: Tree Automata and Languages (M. </title> <editor> Nivat, A. Podelski, Eds.), </editor> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam 1992, </address> <pages> pp. 159-188. </pages>
Reference-contexts: For a more detailed synopsis of the classification of Rabin recognizable tree languages and for further references we refer the reader to the concluding section of [TL94]. The connections to fixed point logics constitute an own fascinating chapter of definability theory and are developed by Arnold and Niwinski in <ref> [AN92] </ref>, [Niw96]. Let us turn to decidability results for monadic second-order theories. An application of Theorem 6.19 to an MSO-sentence ' yields an input-free tree automaton which admits a successful run iff ' is true in the tree structure T .
Reference: [Arn94a] <author> A. Arnold, </author> <title> Finite Transition Systems, </title> <publisher> Masson, </publisher> <address> Paris, </address> <publisher> and Prentice-Hall, </publisher> <address> Hemel Hempstead 1994. </address>
Reference-contexts: This led to powerful algorithms and software systems for the verification of finite-state programs ("model-checking"). The area has developed into an own subject, built on an extensive literature which cannot be covered here in detail; as recent monographs in the field we mention [McM93], <ref> [Arn94a] </ref>, and [Kur94]. The equivalence between automata and logical formalisms also started new tracks of research in language theory itself.
Reference: [Arn94b] <author> A. Arnold, </author> <title> An initial semantics of the -calculus on trees and Rabin's complementation theorem, </title> <institution> Theor. Comput. Sci. </institution> <month> 148 </month> <year> (1994), </year> <pages> 121-132. </pages>
Reference-contexts: In the self-dual framework of alternating automata, complementation is easy, while projection is the nontrivial step. Another natural self-dual calculus to show the complementation of Rabin tree automata is developed by Arnold <ref> [Arn94b] </ref>; it involves operators for the definition of least and greatest fixed points over the powerset of f0; 1g fl , the set of tree 54 nodes. Definitions of winning strategies in fixed point calculi are presented in [EJ91] and [Wal96].
Reference: [BCST88] <author> D.A.M. Barrington, K.J. Compton, H. Straubing, D. Therien, </author> <title> Regular languages in NC 1 , J. </title> <journal> Comput. System Sci. </journal> <volume> 38 (1988), </volume> <pages> 478-499. </pages>
Reference-contexts: As shown in <ref> [BCST88] </ref>, the intersection of AC 0 with the class of regular languages contains precisely the languages definable in first-order logic with regular numerical predicates. The reader should consult Straubing's book [Str94] for proofs, many more results, and some intriguing open problems.
Reference: [BHMV94] <author> V. Bruyere, G. Hansel, C. Michaux, R. Villemaire, </author> <title> Logic and p-recognizable sets of integers, </title> <journal> Bull. Belg. Math. Soc. </journal> <volume> Simon Stevin 1 (1994), </volume> <pages> 191-238. </pages>
Reference-contexts: Then the following equivalence result holds: Theorem 3.5 (cf. <ref> [BHMV94] </ref>) A relation of natural numbers is p-recognizable iff it is first-order definable in the structure (!; +; V p ) (by a formula '(x 1 ; : : : ; x n ) if the relation is n-ary). <p> A generalization of Cobham's Theorem, namely for relations instead of sets of numbers, was obtained by Semenov and later given a very elegant proof by Muchnik; for comprehensive expositions see the lucid survey <ref> [BHMV94] </ref> or [MV96]. It is interesting to note that the expressive power of finite automata which recognize relations in an asynchronous manner (such that the reading heads on different components may be apart by arbitrary distances) is much greater than in the synchronous case.
Reference: [BK95] <author> D. Basin, N. Klarlund, </author> <title> Hardware verification using monadic second-order logic, in: Computer Aided Verification (P. Wolper, </title> <editor> Ed.), </editor> <booktitle> Lecture Notes in Computer Science 939, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1995, </address> <pages> pp. 31-41. </pages>
Reference: [BL69] <author> J.R. Buchi, </author> <title> L.H. Landweber, Solving sequential conditions by finite-state strategies, </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 138 (1969), </volume> <pages> 295-311. 62 </pages>
Reference-contexts: Furthermore, it turned out (in the work of Buchi and Landweber <ref> [BL69] </ref>) that the circuit synthesis problem with respect to S1S-specifications is solvable effectively, which gave a new perspective to the automatic construction of nonterminating programs. <p> Relative to these expanded game graphs the simple construction of memoryless strategies suffices. If the game graph is finite, the determinacy result can be sharpened by an effectiveness claim. This is the content of the "Buchi-Landweber Theorem" <ref> [BL69] </ref>, again presented here for the case of the Rabin chain winning condition and mem-oryless strategies (instead of the classical Muller condition and finite-memory strategies). The proof is simple in the presence of the Determinacy Theorem 6.13. Theorem 6.16 (Effective Determinacy of Finite-State Games, [BL69]) Let (G; Win) be a game <p> the content of the "Buchi-Landweber Theorem" <ref> [BL69] </ref>, again presented here for the case of the Rabin chain winning condition and mem-oryless strategies (instead of the classical Muller condition and finite-memory strategies). The proof is simple in the presence of the Determinacy Theorem 6.13. Theorem 6.16 (Effective Determinacy of Finite-State Games, [BL69]) Let (G; Win) be a game where G is finite and Win is given in Rabin chain form as in the preceding Theorem.
Reference: [BN95] <author> D. Beauquier, D. Niwinski, </author> <title> Automata on infinite trees with counting constraints, </title> <booktitle> Information and Computation 120 (1995), </booktitle> <pages> 117-125. </pages>
Reference-contexts: Other acceptance conditions as known from !-automata, like the Buchi condition, Rabin condition, Streett condition, are introduced accordingly. It turns out that Muller, Rabin, and Streett tree automata have the same expressive power. (Another approach to acceptance conditions over infinite trees is studied in <ref> [BN95] </ref>; the requirement that all paths of a run should be successful is replaced there by a condition on the cardinality of the set of successful paths, for instance to be infinite or uncountable.) Let us look at two simple examples, which also show that Buchi tree automata are strictly weaker
Reference: [BP89] <author> D. Beauquier and J.-E. Pin, </author> <title> Factors of words, </title> <booktitle> in: Automata, Languages, and Programming, Proc. 16th ICALP (G. </booktitle> <editor> Ausiello et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 372, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1989, </address> <pages> pp. 63-79. </pages>
Reference-contexts: Wilke showed in [Wil93] that an !-language is finitely locally threshold testable iff it is both locally threshold testable and Staiger-Wagner recognizable. Since the latter two properties are decidable (by <ref> [BP89] </ref> and [SW74]), so is the first, and we may conclude that one can decide effectively whether a regular !-language is definable in FO [S]-logic. Buchi's Theorem 5.9 has been refined and extended in many ways.
Reference: [BS95] <author> F. Blanchet-Sadri, </author> <title> Some logical characterizations of the dot-depth hierarchy and applications, </title> <journal> J. Comput. System Sci. </journal> <volume> 51 (1995), </volume> <pages> 324-337. </pages>
Reference-contexts: Analogous results can be proved for the closely related "dot-depth hierarchy" ([Th82a], [Th87]). A still finer classification, distinguishing formulas not only by the number of quantifier alternations but also by the lengths of quantifier blocks, is studied in <ref> [BS95] </ref>. An open problem in this theory is the question whether the smallest n such that a given star-free language belongs to V n can be computed effectively.
Reference: [Bu60] <author> J.R. Buchi, </author> <title> Weak second-order arithmetic and finite automata, </title> <journal> Z. Math. Logik Grundl. Math. </journal> <volume> 6 (1960), </volume> <pages> 66-92. </pages>
Reference-contexts: 1 Introduction The subject of this chapter is the study of formal languages (mostly languages recognizable by finite automata) in the framework of mathematical logic. The connection between automata and logic goes back to work of Buchi <ref> [Bu60] </ref> and Elgot [Elg61], who showed that finite automata and monadic second-order logic (interpreted over finite words) have the same expressive power, and that the transformations from formulas to automata and vice versa are effective. <p> The language recognized by A collects all words over A accepted by A. Theorem 3.1 (Buchi <ref> [Bu60] </ref>, Elgot [Elg61]) A language of finite words is recognizable by a finite automaton iff it is MSO [S]-definable, and both conversions, from automata to formulas and vice versa, are effective. Proof. <p> Indeed, any MSO-sentence ' with this interpretation is equivalent to an input-free finite automaton on finite words, and truth of ' in (!; S; &lt;) amounts to the existence of a successful run of this automaton (which is easily checked). In <ref> [Bu60] </ref> and [Elg61] it was also noted that from the decidability of WS1S the decidability of Presburger Arithmetic can be inferred, the set of true first-order sentences in the structure (!; +). <p> Thus one calls word relations recognized by such automata synchronized rational relations ([FS93]). In the context of numbers represented over base 2, one speaks of 2-recognizable relations of natural numbers. In Buchi's work <ref> [Bu60] </ref>, the question was considered which extension of Pres-burger arithmetic would allow to define precisely the 2-recognizable sets of natural numbers.
Reference: [Bu62] <author> J.R. Buchi, </author> <title> On a decision method in restricted second-order arithmetic, </title> <booktitle> in: Proc. 1960 Int. Congr. for Logic, Methodology and Philosophy of Science, </booktitle> <publisher> Stanford Univ. Press, Stanford, </publisher> <year> 1962, </year> <pages> pp. 1-11. </pages>
Reference-contexts: Later, in work of Buchi <ref> [Bu62] </ref>, McNaughton [McN66], and Rabin [Rab69], such an equivalence was shown also between finite automata and monadic second-order logic over infinite words and trees. This research was initiated by decision problems for restricted systems of arithmetic and the problem of synthesizing circuits with nonterminating behaviour from logic specifications ([Chu63], [TB73]). <p> The reduction of formulas to finite automata was the key to the solution of both problems: The monadic second-order theories S1S and S2S of one, respectively two successor functions were shown to be decidable in <ref> [Bu62] </ref> and [Rab69], leading to decidabil-ity results also for other interesting mathematical theories and for several logics of programs. <p> The corresponding logics are systems of modal logic and process logic (equivalent to fragments of first-order logic). For an overview of this subject see [Mil90] or [Sti96]. 27 5 Automata and MSO-Logic on Infinite Words In his paper <ref> [Bu62] </ref>, Buchi showed that MSO-logic over !-words is equivalent to finite automata equipped with natural acceptance conditions for infinite words. This founded a beautiful branch of definability theory for properties of infinite sequences, complementing earlier results of descriptive set theory and recursion theory. <p> We write 9 ! for the quantifier "there exist infinitely many" and consider the set In () = fq 2 Q j 9 ! i (i) = qg: The most frequently used acceptance conditions are the following requirements on In () (called so according to their inventors): * Buchi condition <ref> [Bu62] </ref>: In () " F 6= ; for a set F Q of "final states", requiring that some final state occurs infinitely often in the run . * Muller condition [Mul63]: W F 2F In () = F , for a family F 2 Q of final state sets, requiring that <p> One speaks of the regular !-languages. In the sequel we focus on the Buchi recognizable (or regular) !-languages and their logical description. The key result, due to Buchi <ref> [Bu62] </ref>, states that an !-language is Buchi recognizable iff it is MSO-definable. The nontrivial step 30 in the proof is to show closure of the class of Buchi recognizable sets under complement. The original approach of [Bu62] uses a representation of Buchi recognizable sets in the form S i , where <p> The key result, due to Buchi <ref> [Bu62] </ref>, states that an !-language is Buchi recognizable iff it is MSO-definable. The nontrivial step 30 in the proof is to show closure of the class of Buchi recognizable sets under complement. The original approach of [Bu62] uses a representation of Buchi recognizable sets in the form S i , where the U i ; V i are classes of a sufficiently fine congruence over A fl of finite index, and applies a combinatorial argument (e.g., a form of Ramsey's Theorem) to guarantee that the complement has <p> finite automata (accepting infinite Mazurkiewicz traces) is presented in [KMS95]. 5.3 Applications to Definability and Decision Problems As a first consequence of McNaughton's Theorem, we note the equivalence between Buchi automata and MSO-logic over infinite words (originally shown by Buchi without use of deterministic automata). 37 Theorem 5.9 (Buchi's Theorem <ref> [Bu62] </ref>) An !-language is Buchi-recognizable iff it is MSO-definable, and the transformation of Buchi automata into MSO-formulas and conversely is effective. Proof.
Reference: [Bu64] <author> J.R. Buchi, </author> <title> Regular canonical systems, Arch. Math. </title> <booktitle> Logik Grundlagen-forschung 6 (1964), </booktitle> <pages> 91-111. </pages>
Reference-contexts: rules generating these vertices from q 0 v 0 have the form qaw ! q 0 uw with q; q 0 2 Q, a 2 P , and u; w 2 P fl ; thus they form a prefix rewriting system (or regular canonical system in the sense of Buchi <ref> [Bu64] </ref>) and are known to generate a regular language. This shows that G belongs to R.
Reference: [Bu77] <author> J.R. Buchi, </author> <title> Using determinacy to eliminate quantifiers, in: Fundamentals of Computation Theory (M. </title> <editor> Karpinski, Ed.), </editor> <booktitle> Lecture Notes in Computer Science 56, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1977, </address> <pages> pp. 367-378. </pages>
Reference-contexts: The core of Rabin's work is a complementation theorem for nondeterministic finite automata on infinite trees. In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi <ref> [Bu77] </ref>, [Bu83] and Gurevich and Harrington [GH82], and uses more recent work of [EJ91], [Mst91a], [McN93], [Th95], and [Zie95]. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees.
Reference: [Bu83] <editor> J.R. Buchi, State-strategies for games in F ffi " G ffi , J. Symb. </editor> <booktitle> Logic 48 (1983), </booktitle> <pages> 1171-1198. </pages>
Reference-contexts: The core of Rabin's work is a complementation theorem for nondeterministic finite automata on infinite trees. In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi [Bu77], <ref> [Bu83] </ref> and Gurevich and Harrington [GH82], and uses more recent work of [EJ91], [Mst91a], [McN93], [Th95], and [Zie95]. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees. <p> The converse is also true ([Mst91b], [Car94]). We give a simple proof, using a data structure of Buchi <ref> [Bu83] </ref>. Theorem 6.5 For any Muller tree automaton one can construct an equivalent Rabin chain tree automaton. Proof. <p> The states of the desired Rabin chain tree automaton A 0 will be permutations of (1 : : : n) together with an index from f1; : : : ; ng. This data structure was introduced by Buchi <ref> [Bu83] </ref> under the name "order-vector with hit".
Reference: [Car94] <author> O. Carton, </author> <title> Chain automata, </title> <booktitle> in: Technology and Applications, Information Processing '94, </booktitle> <volume> Vol. </volume> <editor> I (B. Pherson, I. Simon, Eds.), </editor> <publisher> IFIP, North-Holland, </publisher> <address> Amsterdam 1994, </address> <pages> pp. 451-458. </pages>
Reference-contexts: The converse is also true ([Mst91b], <ref> [Car94] </ref>). We give a simple proof, using a data structure of Buchi [Bu83]. Theorem 6.5 For any Muller tree automaton one can construct an equivalent Rabin chain tree automaton. Proof.
Reference: [Cau96] <author> D. Caucal, </author> <title> On infinite transition graphs having a decidable monadic theory, </title> <booktitle> in: Automata, Languages, and Programming, Proc. </booktitle> <editor> ICALP'96, (F. Meyer auf der Heide, B. Monien, Eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <pages> Springer-Verlag, </pages> <note> Berlin 1996 (to appear). </note>
Reference-contexts: More general classes of graphs with a decidable monadic second-order theory were obtained by Courcelle [Cou95] and Caucal <ref> [Cau96] </ref>. We discuss here the graphs considered by Caucal, which are specified by a concrete language theoretical description. <p> Both operations preserve the decidability of the monadic second-order theory. Thus, by Rabin's Tree Theorem, the following holds: Theorem 6.24 <ref> [Cau96] </ref> Each graph in the class R, i.e. each rational restriction of the right closure of a recognizable graph, has a decidable monadic second-order theory. It is possible to include also nonregular features in graphs and still keep the decidability of the monadic theory.
Reference: [Chu63] <author> A. Church, </author> <title> Logic, arithmetic, and automata, </title> <journal> Proc. Intern. Congr. Math. </journal> <year> 1962, </year> <title> Almqvist and Wiksells, </title> <booktitle> Uppsala 1963, </booktitle> <pages> pp. 21-35. </pages>
Reference-contexts: The use of the Rabin chain winning condition allows a simpler construction, by an induction on the size of the game graphs (see [McN93, Sect. 6], [Th95]). Theorem 6.16 provides a solution to "Church's Problem" <ref> [Chu63] </ref>, which asked for an automatic synthesis of reactive finite-state programs from automaton specifications (or from MSO-specifications, invoking their translation into automata). An easy application of Theorem 6.16 shows that the emptiness problem of automata over infinite trees is decidable (here with the Rabin chain acceptance condition).
Reference: [CG95] <author> C. Choffrut, L. Guerra, </author> <title> Logical definability of some rational trace languages, Math. </title> <booktitle> Syst. Theory 28 (1995), </booktitle> <pages> 397-420. </pages>
Reference-contexts: For certain rational trace languages, which transcend the class of recognizable trace languages, Choffrut and Guerra <ref> [CG95] </ref> found a logical characterization, extending MSO-logic with formulas which allow to compare cardinalities of sets. Over trees, the situation is somewhat easier, referring to the theory of finite tree automata (see e.g. [GS84] or the chapter on tree languages in this Handbook).
Reference: [CGL94] <author> E. Clarke, O. Grumberg, D. </author> <title> Long, Verification tools for finite-state concurrent systems, in: A Decade of Concurrency (J.W. </title> <editor> de Bakker et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 803, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1994, </address> <pages> pp. 124-175. </pages>
Reference-contexts: For more details and for applications in practical verification tasks, the reader should consult specific surveys and monographs such as [Em90], [McM93], <ref> [CGL94] </ref>, [Kur94], [Em96], [Var96]. In practice, the verification of nonterminating systems requires to check more complex computation properties than simply a correct order of events or states in time, as expressible in PTL or MSO-logic.
Reference: [CPP93] <author> J. Cohen, D. Perrin and J.E. Pin, </author> <title> On the expressive power of temporal logic, </title> <journal> J. Comput. System Sci. </journal> <volume> 46 (1993), </volume> <pages> 271-294. </pages>
Reference-contexts: An interesting class of !-languages arises by cancelling the "until"-operator from PTL; an automata theoretic (and semi-group theoretic) analysis of this restricted temporal logic RTL is carried out in <ref> [CPP93] </ref>. Recently, an infinite hierarchy based on the nesting of "until"-operators was established in [EW96], providing also further characterizations of restricted temporal logics by structural properties of corresponding automata.
Reference: [Cou90] <author> B. Courcelle, </author> <title> The monadic second-order logic of graphs I: recognizable sets of finite graphs Inform. </title> <journal> and Comput. </journal> <volume> 85 (1990), </volume> <pages> 12-75. </pages>
Reference-contexts: recognizability and definability in MSO-logic coincide for text languages where these tree representations involve only trees of bounded arity (i.e., can be handled by finite tree automata). 16 A more general framework of definability of graph properties (which implic-itly involves terms and trees with unbounded arity) was developed by Courcelle <ref> [Cou90] </ref>. It is based on the construction of graphs in a many-sorted graph algebra and leads to an algebraic notion of recognizability of graph sets which is strictly more expressive than MSO-logic.
Reference: [Cou91] <author> B. Courcelle, </author> <title> The monadic second-order theory of graphs V: on closing the gap between definability and recognizability, </title> <institution> Theor. Comput. Sci. </institution> <month> 80 </month> <year> (1991), </year> <pages> 153-202. </pages>
Reference-contexts: An interesting class where this question is open is given by the graphs of bounded tree-width; see <ref> [Cou91] </ref> and [See92] for a detailed treatment and partial results in two complementary approaches. A general method to construct sets of graphs from sets of trees is to apply monadic second-order interpretations.
Reference: [Cou94] <author> B. Courcelle, </author> <title> Monadic second-order definable graph transductions: a survey, </title> <institution> Theor. Comput. Sci. </institution> <month> 126 </month> <year> (1994), </year> <pages> 53-75. </pages>
Reference-contexts: Seese [See92] applies interpretations of graphs in trees and uses tree automata theory to obtain decidability results, as well as upper time-bounds for computational graph problems. In <ref> [Cou94] </ref>, the related notion of monadic second-order graph transduction is studied. Sets of graphs which are generated by (different versions of) context-free graph grammars are shown to be presentable as images of recognizable tree languages under such MSO-definable graph transductions.
Reference: [Cou95] <author> B. Courcelle, </author> <title> The monadic second-order theory of graphs IX: Machines and their behaviours, </title> <institution> Theor. Comput. Sci. </institution> <month> 151 </month> <year> (1995), </year> <pages> 125-162. </pages>
Reference-contexts: + ; m 2 M g: Now let the unravelling of M be the structure M + = (M + ; S M ; C M ; P + m ; R + n ): A related notion of unravelling (giving computation trees of deterministic transition systems) is developed in <ref> [Cou95] </ref>. In unpublished work of Muchnik (see [Sem84]), in [Cou95] and (for the general form) in [Wal96] it is shown how to translate a sentence ' of the monadic second-order language of M + into a sen tence ' of the language of the original structure M such that M + <p> unravelling of M be the structure M + = (M + ; S M ; C M ; P + m ; R + n ): A related notion of unravelling (giving computation trees of deterministic transition systems) is developed in <ref> [Cou95] </ref>. In unpublished work of Muchnik (see [Sem84]), in [Cou95] and (for the general form) in [Wal96] it is shown how to translate a sentence ' of the monadic second-order language of M + into a sen tence ' of the language of the original structure M such that M + j= ' iff M j= '. <p> More general classes of graphs with a decidable monadic second-order theory were obtained by Courcelle <ref> [Cou95] </ref> and Caucal [Cau96]. We discuss here the graphs considered by Caucal, which are specified by a concrete language theoretical description.
Reference: [Cou96] <author> B. Courcelle, </author> <title> The expression of graph properties and graph transformations in monadic second-order logic, in: Handbook of Graph Transformations, Vol. I: </title> <editor> Foundations (G. Rozenberg, Ed.), </editor> <publisher> World Scientific, </publisher> <address> Singapore 1996. </address>
Reference-contexts: Sets of graphs which are generated by (different versions of) context-free graph grammars are shown to be presentable as images of recognizable tree languages under such MSO-definable graph transductions. A detailed exposition of these results and their applications is given in the survey <ref> [Cou96] </ref>. 4 First-Order Definability 4.1 The Ehrenfeucht-Frasse Game The limited expressive power of finite automata (and hence MSO-logic) over words or trees is verified conveniently using pumping lemmas and related combinatorial arguments. For first-order logic, the situation is more involved.
Reference: [DM96] <author> V. Diekert, Y. Metivier, </author> <title> Partial commutation and traces, </title> <booktitle> in: Handbook of Formal Language Theory, </booktitle> <volume> Vol. </volume> <editor> III (G. Rozenberg, A. Salomaa, Eds.), </editor> <publisher> Springer-Verlag, </publisher> <address> New York (to appear). </address>
Reference-contexts: In this section we discuss some basic classes of structures where such a generalization is possible. The first is the class of (dependency graphs of) Mazurkiewicz traces, cf. [DR95], <ref> [DM96] </ref>. Traces are formed over a dependence alphabet, which is a pair (A; D) with an alphabet A and a reflexive and symmetric "dependency relation" D A fi A. Note that each letter is considered dependent on itself.
Reference: [Don70] <author> J. Doner, </author> <title> Tree acceptors and some of their applications, </title> <journal> J. Comput. System Sci. </journal> <volume> 4 (1970), </volume> <pages> 406-451. </pages>
Reference-contexts: The classical subset construction works without essential change also for tree automata of this form, which shows that over trees the nondeterministic and the deterministic automaton model (in frontier-to-root mode) are equivalent. So the method of Theorem 3.1 can be applied again: Theorem 3.8 (Thatcher and Wright [TW68], Doner <ref> [Don70] </ref>) A set of finite trees is recognizable by a finite tree automaton iff it is MSO-definable. <p> As shown in [Th84b], this system is strictly weaker than MSO-logic. Theorem 3.8 allows to obtain decidability results for tree theories, as Theorem 3.1 does for theories of successor (i.e, fragments of arithmetic). In [TW68] and <ref> [Don70] </ref>, the weak monadic theory of the binary infinite tree was shown to be decidable, using the decidability of the emptiness problem for tree automata. Dauchet and Tison [DT90] applied tree automata in the spirit of the decidabil-ity proof for Presburger arithmetic (as discussed in the previous section).
Reference: [DR95] <editor> V. Diekert, G. Rozenberg (Eds.), </editor> <title> The Book of Traces, </title> <publisher> World Scientific, </publisher> <address> Singapore 1995. </address>
Reference-contexts: In this section we discuss some basic classes of structures where such a generalization is possible. The first is the class of (dependency graphs of) Mazurkiewicz traces, cf. <ref> [DR95] </ref>, [DM96]. Traces are formed over a dependence alphabet, which is a pair (A; D) with an alphabet A and a reflexive and symmetric "dependency relation" D A fi A. Note that each letter is considered dependent on itself. <p> An initial condition for first vertices (with respect to &lt;) and a final condition for the last ones is also given. It turns out that recognizability by asynchronous automata also matches the algebraic definition of recognizability and thus provides a robust and natural notion (cf. <ref> [DR95] </ref>). The fundamental result on asynchronous automata states that the nondeterministic and the deterministic version are expressively equivalent ([Zie87]). Thus, the proof method of Theorem 3.1 can be applied, and one obtains the following result, shown e.g. in [DR95]: Theorem 3.6 A set of traces is recognizable by an asynchronous automaton <p> definition of recognizability and thus provides a robust and natural notion (cf. <ref> [DR95] </ref>). The fundamental result on asynchronous automata states that the nondeterministic and the deterministic version are expressively equivalent ([Zie87]). Thus, the proof method of Theorem 3.1 can be applied, and one obtains the following result, shown e.g. in [DR95]: Theorem 3.6 A set of traces is recognizable by an asynchronous automaton iff it is MSO-definable. For certain rational trace languages, which transcend the class of recognizable trace languages, Choffrut and Guerra [CG95] found a logical characterization, extending MSO-logic with formulas which allow to compare cardinalities of sets.
Reference: [DT90] <author> M. Dauchet, S. Tison, </author> <title> The theory of ground rewrite systems is decidable, </title> <booktitle> Proc. 5th IEEE Symp. on Logic in Computer Science, </booktitle> <year> 1990, </year> <pages> pp. 242-248. </pages>
Reference-contexts: In [TW68] and [Don70], the weak monadic theory of the binary infinite tree was shown to be decidable, using the decidability of the emptiness problem for tree automata. Dauchet and Tison <ref> [DT90] </ref> applied tree automata in the spirit of the decidabil-ity proof for Presburger arithmetic (as discussed in the previous section). <p> In analogy to the case of word relations, the j-th components code the j-th tree of the n-tuple. Three relations between trees are considered in <ref> [DT90] </ref>, each of them given by a finite tree rewriting system S ("ground rewriting system"): The first relation R 1 collects all tree pairs (s; t) such that t is obtained from s by application of a rule from S, the second relation R 2 contains all pairs (s; t) where
Reference: [EF95] <author> H.D. Ebbinghaus, J. Flum, </author> <title> Finite Model Theory, </title> <publisher> Springer-Verlag, </publisher> <address> New York 1995. </address>
Reference-contexts: This theory now forms the core of the subject finite model theory or (more specifically) descriptive complexity theory, and we refer the reader to <ref> [EF95] </ref> for a recent and comprehensive exposition. 1 The topic of the present chapter, where finite automata are considered rather than resource-bounded Turing machines, may be called a descriptive theory of recognizability. <p> It follows that full second-order logic covers all languages in the polynomial time hierarchy. Other second-order concepts, such as least fixed-point operator or transitive closure operator, lead to logics which characterize further complexity classes like P, NLOGSPACE, PSPACE. For these results of descriptive complexity theory the reader should consult <ref> [EF95] </ref>. If only binary relations are admitted and restricted to so-called "matchings" ([LST95]), a characterization of the context-free languages is obtained. <p> The most versatile method to show non-definability in systems of first-order logic is the Ehrenfeucht-Frasse game, and it is applied in characterizations of several classes of first-order definable languages. We give the main facts in a brief overview; more background can be found e.g. in [EFT94] or <ref> [EF95] </ref>. In the sequel we consider a first-order language (with equality) for a signature Sig with the unary relation symbols Q 1 ; : : : ; Q k and the binary relation symbols 17 R 1 ; : : : ; R l .
Reference: [EFT94] <author> H.D. Ebbinghaus, J. Flum, W. Thomas, </author> <title> Mathematical Logic (2nd Ed.), </title> <publisher> Springer-Verlag, </publisher> <address> New York 1994. </address>
Reference-contexts: The most versatile method to show non-definability in systems of first-order logic is the Ehrenfeucht-Frasse game, and it is applied in characterizations of several classes of first-order definable languages. We give the main facts in a brief overview; more background can be found e.g. in <ref> [EFT94] </ref> or [EF95]. In the sequel we consider a first-order language (with equality) for a signature Sig with the unary relation symbols Q 1 ; : : : ; Q k and the binary relation symbols 17 R 1 ; : : : ; R l .
Reference: [EH93] <author> J. Engelfriet, </author> <title> H.J. </title> <type> Hoogeboom, </type> <institution> X-automata on !-words, Theor. Comput. Sci. </institution> <month> 110 </month> <year> (1993), </year> <pages> 1-51. </pages>
Reference-contexts: A complete analysis of the expressiveness of the acceptance conditions and their transfer to automata with arbitrary storage types (like pushdown store) is given by Staiger [Sta87] and Engelfriet and Hoogeboom <ref> [EH93] </ref>. Let us connect the Buchi recognizable !-languages with the standard notion of regular sets of finite words.
Reference: [EJ88] <author> E.A. Emerson, C.S. Jutla, </author> <title> The complexity of tree automata and logics of programs, </title> <booktitle> in: Proc. 29th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 328-337. </pages>
Reference-contexts: Since B has 2 O (n) many states, the claim is proved. 2 Applications of the Safra determinization construction in obtaining (essentially optimal) complexity bounds for logics of programs are given e.g. in <ref> [EJ88] </ref>. <p> Rabin used a converse approach in [Rab72]; he gave a direct proof of the Basis Theorem (for tree automata with Rabin acceptance condition) and used the existence of regular trees to show that finite-state winning strategies exist in games over finite graphs (see e.g. [Th90]). In <ref> [EJ88] </ref> (see also [Em96]) it is proved that the non-emptiness problem for Rabin tree automata with m states and n accepting pairs is solvable in time O ((mn) 3n ). <p> Many modal and temporal logics have been proved decidable along this line; examples are the modal -calculus and the computation tree logic CTL fl (see e.g. [Th90] or <ref> [EJ88] </ref> for a more detailed explanation and further references, and [JW95] for a recent automata theoretic study of the modal -calculus).
Reference: [EJ91] <author> E.A. Emerson, C.S. Jutla, </author> <title> Tree automata, Mu-calculus and determinacy, </title> <booktitle> in: Proc. 32nd IEEE Symp. on Foundations of Computer Science (1991), </booktitle> <pages> 368-377. </pages>
Reference-contexts: In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi [Bu77], [Bu83] and Gurevich and Harrington [GH82], and uses more recent work of <ref> [EJ91] </ref>, [Mst91a], [McN93], [Th95], and [Zie95]. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees. <p> We now turn to the complementation problem for automata on infinite trees. The solution is simplified considerably when we use a seemingly more complicated acceptance condition, the "Rabin chain condition" (introduced by Mostowski [Mst84], [Mst91a]), also called "parity condition" (introduced independently by Emerson and Jutla <ref> [EJ91] </ref>). The idea is to fix the final state sets not by listing their states separately in each case, but to use a more uniform scheme based on a global indexing of the states. <p> The above-mentioned first step in the complementation of tree automata is the following result on memoryless determinacy of Rabin chain games, proved in detail later in this section. Theorem 6.8 (Determinacy of Rabin Chain Tree Automata Games, <ref> [EJ91] </ref>, [Mst91a]) Let A be a Rabin chain tree automaton and t be an input tree for A. Then in A;t , from any game position either Automaton or Pathfinder has a memoryless winning strategy. Let us apply the theorem to establish complementation for Rabin chain tree automata. <p> Definitions of winning strategies in fixed point calculi are presented in <ref> [EJ91] </ref> and [Wal96]. Fixed point expressions allow very compact representations of the desired vertex sets from where player 0, respectively player 1 wins, but are (as yet) found difficult to read by nonspecialists.
Reference: [EJS93] <author> E.A. Emerson, C.S. Jutla, </author> <title> A.P. Sistla, On model checking for fragments of -calculus, in: Computer Aided Verification (C. Courcoubetis, </title> <editor> Ed.), </editor> <booktitle> Lecture Notes in Computer Science 697, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1993, </address> <pages> pp. 385-396. </pages>
Reference: [Elg61] <author> C.C. Elgot, </author> <title> Decision problems of finite automata design and related arith-metics, </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 98, </volume> <year> (1961), </year> <pages> 21-52. </pages>
Reference-contexts: 1 Introduction The subject of this chapter is the study of formal languages (mostly languages recognizable by finite automata) in the framework of mathematical logic. The connection between automata and logic goes back to work of Buchi [Bu60] and Elgot <ref> [Elg61] </ref>, who showed that finite automata and monadic second-order logic (interpreted over finite words) have the same expressive power, and that the transformations from formulas to automata and vice versa are effective. <p> The language recognized by A collects all words over A accepted by A. Theorem 3.1 (Buchi [Bu60], Elgot <ref> [Elg61] </ref>) A language of finite words is recognizable by a finite automaton iff it is MSO [S]-definable, and both conversions, from automata to formulas and vice versa, are effective. Proof. <p> Indeed, any MSO-sentence ' with this interpretation is equivalent to an input-free finite automaton on finite words, and truth of ' in (!; S; &lt;) amounts to the existence of a successful run of this automaton (which is easily checked). In [Bu60] and <ref> [Elg61] </ref> it was also noted that from the decidability of WS1S the decidability of Presburger Arithmetic can be inferred, the set of true first-order sentences in the structure (!; +).
Reference: [Em90] <author> E.A. Emerson, </author> <title> Temporal and modal logic, </title> <booktitle> in: Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B (J. v. Leeuwen, Ed.), </editor> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam 1990, </address> <pages> pp. 995-1072. </pages>
Reference-contexts: 1 ; : : : ; p n concisely by associating with them certain first-order formulas ' 0 (X 1 ; : : : X n ; x), to be interpreted in !-words over f0; 1g n "from position x onwards". (For a more detailed and standard introduction see e.g. <ref> [Em90] </ref> or [MP92].) For ' = p i we have ' 0 (x) = X i (x), and the boolean connectives are handled as usual. <p> Via the above translation, this can be achieved in a time which is polynomial in the size (number of states) of P and exponential in the length of '. For more details and for applications in practical verification tasks, the reader should consult specific surveys and monographs such as <ref> [Em90] </ref>, [McM93], [CGL94], [Kur94], [Em96], [Var96]. In practice, the verification of nonterminating systems requires to check more complex computation properties than simply a correct order of events or states in time, as expressible in PTL or MSO-logic.
Reference: [Em96] <author> E.A. Emerson, </author> <title> Automated temporal reasoning about reactive systems, in: Logics for Concurrency: Structure versus Automata (F. Moller, </title> <editor> G. Birtwistle, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 1043, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1996, </address> <pages> pp. 41-101. </pages>
Reference-contexts: Buchi's Theorem 5.9 has been refined and extended in many ways. For example, a transfer from !-words to infinite Mazurkiewicz traces was achieved by Ebinger and Muscholl in <ref> [EM96] </ref>. In the sequel we discuss in a little more detail two logical systems which are applied in the verification of (nonterminating finite-state) programs, namely propositional temporal logic and monadic second-order logic over timed words. <p> For more details and for applications in practical verification tasks, the reader should consult specific surveys and monographs such as [Em90], [McM93], [CGL94], [Kur94], <ref> [Em96] </ref>, [Var96]. In practice, the verification of nonterminating systems requires to check more complex computation properties than simply a correct order of events or states in time, as expressible in PTL or MSO-logic. Often, the specification of a program involves also conditions on admissible time intervals or durations of states. <p> Thus membership in U 0 (as well as membership in U 1 ) is a problem in NP " coNP. It is open whether a polynomial-time algorithm exists. This question is equivalent to the problem whether there is a polynomial-time model-checking algorithm for the modal -calculus ([EJS93], <ref> [Em96] </ref>). 55 It is possible to avoid the use of the Determinacy Theorem 6.13 and to con-struct the sets U 0 and U 1 as well as the corresponding winning strategies directly. <p> Rabin used a converse approach in [Rab72]; he gave a direct proof of the Basis Theorem (for tree automata with Rabin acceptance condition) and used the existence of regular trees to show that finite-state winning strategies exist in games over finite graphs (see e.g. [Th90]). In [EJ88] (see also <ref> [Em96] </ref>) it is proved that the non-emptiness problem for Rabin tree automata with m states and n accepting pairs is solvable in time O ((mn) 3n ).
Reference: [EM96] <author> W. Ebinger, A. Muscholl, </author> <title> Logical definability on infinite traces, </title> <institution> Theor. Comput. Sci. </institution> <month> 154 </month> <year> (1996), </year> <pages> 67-84. </pages>
Reference-contexts: Buchi's Theorem 5.9 has been refined and extended in many ways. For example, a transfer from !-words to infinite Mazurkiewicz traces was achieved by Ebinger and Muscholl in <ref> [EM96] </ref>. In the sequel we discuss in a little more detail two logical systems which are applied in the verification of (nonterminating finite-state) programs, namely propositional temporal logic and monadic second-order logic over timed words. <p> For more details and for applications in practical verification tasks, the reader should consult specific surveys and monographs such as [Em90], [McM93], [CGL94], [Kur94], <ref> [Em96] </ref>, [Var96]. In practice, the verification of nonterminating systems requires to check more complex computation properties than simply a correct order of events or states in time, as expressible in PTL or MSO-logic. Often, the specification of a program involves also conditions on admissible time intervals or durations of states. <p> Thus membership in U 0 (as well as membership in U 1 ) is a problem in NP " coNP. It is open whether a polynomial-time algorithm exists. This question is equivalent to the problem whether there is a polynomial-time model-checking algorithm for the modal -calculus ([EJS93], <ref> [Em96] </ref>). 55 It is possible to avoid the use of the Determinacy Theorem 6.13 and to con-struct the sets U 0 and U 1 as well as the corresponding winning strategies directly. <p> Rabin used a converse approach in [Rab72]; he gave a direct proof of the Basis Theorem (for tree automata with Rabin acceptance condition) and used the existence of regular trees to show that finite-state winning strategies exist in games over finite graphs (see e.g. [Th90]). In [EJ88] (see also <ref> [Em96] </ref>) it is proved that the non-emptiness problem for Rabin tree automata with m states and n accepting pairs is solvable in time O ((mn) 3n ).
Reference: [ER66] <author> C.C. Elgot, M.O. Rabin, </author> <title> Decidability and undefinability of second (first) order theory of (generalized) successor, </title> <editor> J. </editor> <booktitle> Symbolic Logic 31 (1966), </booktitle> <pages> 169-181. </pages>
Reference-contexts: It is possible to include also nonregular features in graphs and still keep the decidability of the monadic theory. For example, as shown by Elgot and Rabin <ref> [ER66] </ref>, there are nonregular sets P of natural numbers, e.g. the set of squares, the set of powers of 2 or the set of factorial numbers, such that the structure (!; S; P ) of the natural numbers with successor and expanded by P has a decidable monadic second-order theory.
Reference: [ER93] <author> A. Ehrenfeucht, G. Rozenberg, T-structures, T-functions, </author> <title> and texts, </title> <institution> Theor. Comput. Sci. </institution> <month> 116 </month> <year> (1993), </year> <pages> 227-290. </pages>
Reference-contexts: As an example we mention properties of texts, a structure introduced in <ref> [ER93] </ref>. A text is a word which has a second ordering besides the natural ordering of letters. Alternatively, a text is presented as a word together with a permutation of its positions, for example in the form (acabaacbc; (5; 2; 4; 1; 3; 6; 7; 8; 9)).
Reference: [EW96] <author> K. Etessami, Th. Wilke, </author> <title> An Until hierarchy for temporal logic, </title> <booktitle> in: Proc. 11th IEEE Symp. on Logic in Computer Science, 1996 (to appear). </booktitle>
Reference-contexts: An interesting class of !-languages arises by cancelling the "until"-operator from PTL; an automata theoretic (and semi-group theoretic) analysis of this restricted temporal logic RTL is carried out in [CPP93]. Recently, an infinite hierarchy based on the nesting of "until"-operators was established in <ref> [EW96] </ref>, providing also further characterizations of restricted temporal logics by structural properties of corresponding automata. The unidirectional (or "one-way") character of PTL's future operators ("from now to infinity") is useful for the translation of PTL-formulas into !-automata, essentially because automata also work in a one-way mode.
Reference: [Fag74] <author> R. Fagin, </author> <title> Generalized first-order spectra and polynomial-time recognizable sets, in: Complexity of Computation (R.M. </title> <editor> Karp, Ed.), </editor> <booktitle> SIAM-AMS Proceedings 7 (1974), </booktitle> <pages> pp. 43-73. </pages>
Reference-contexts: The logical description of the behaviour of computational models was also taken up in complexity theory. Starting from Fagin's work <ref> [Fag74] </ref>, it was shown that many complexity classes, such as NP, P, PSPACE, could be characterized by different versions of second-order logic (involving, for example, fixed point operators or transitive closure operators). <p> A natural generalization of MSO-logic is to admit second-order variables of higher arity, i.e. variables ranging over relations, together with quantifiers for them. This leads to a much larger language class than the class of regular languages: Theorem 3.3 (Fagin <ref> [Fag74] </ref>) A language belongs to the complexity class NP iff it is definable in (general) existential second-order logic. It follows that full second-order logic covers all languages in the polynomial time hierarchy.
Reference: [FS93] <author> C. Frougny, J. Sakarovitch, </author> <title> Synchronized rational relations of finite and infinite words, </title> <institution> Theor. Comput. Sci. </institution> <month> 108 </month> <year> (1993), </year> <pages> 45-82. </pages>
Reference: [FSV95] <author> R. Fagin, L.J. Stockmeyer, MY. Vardi, </author> <title> On monadic NP vs monadic co-NP, </title> <booktitle> Information and Computation 120 (1995), </booktitle> <pages> 78-92. </pages>
Reference-contexts: Also in the domain of arbitrary finite graphs MSO-logic can be separated from EMSO-logic: Connectivity is an MSO-expressible graph property which is not definable in EMSO-logic (cf. <ref> [FSV95] </ref>). Some classes of graphs have been found where the classical technique of connecting MSO-logic with notions of recognizability can be applied; usually, however, this depends on the possibility to describe graph properties in terms of certain tree properties. <p> Let us now describe how to play the EF-game. The game G m ((S; s); (T ; t)) is played between two players called Spoiler and Duplicator (as suggested in <ref> [FSV95] </ref>) on the structures (S; s) and (T ; t). There are m rounds carried out as follows: The initial configuration is the relation s 7! t.
Reference: [GHR94] <author> D. Gabbay, I. Hodkinson, M. Reynolds, </author> <title> Temporal Logic, </title> <journal> Vol. </journal> <volume> 1, </volume> <publisher> Claren-don Press, </publisher> <address> Oxford 1994. </address> <month> 65 </month>
Reference-contexts: By the above definition, each PTL-definable !-language is first-order definable. A difficult and rather technical result states that the converse is also true: Theorem 5.14 (Kamp [Kam68], see also <ref> [GHR94] </ref>) An !-language is PTL-definable iff it is first-order definable (in the signature with S and &lt;).
Reference: [GH82] <author> Y. Gurevich, L. Harrington, </author> <title> Trees, automata, and games, </title> <booktitle> in: Proc. 14th ACM Symp. on the Theory of Computing, </booktitle> <year> 1982, </year> <pages> pp. 60-65. </pages>
Reference-contexts: The core of Rabin's work is a complementation theorem for nondeterministic finite automata on infinite trees. In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi [Bu77], [Bu83] and Gurevich and Harrington <ref> [GH82] </ref>, and uses more recent work of [EJ91], [Mst91a], [McN93], [Th95], and [Zie95]. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees. <p> This data structure was introduced by Buchi [Bu83] under the name "order-vector with hit". The idea is to keep a record of the states in the order of their "last visits" (as in the "later appearance record" LAR of Gurevich-Harrington <ref> [GH82] </ref>), together with a pointer to the position where the last change in this record occurred (the "hit position"). <p> For this, a game theoretic view of tree automata acceptance is used. With any tree automaton A = (Q; A; q 0 ; ; ) and any input tree t one associates an "infinite two-person game" A;t . It is played by two players, named "Automaton" and "Pathfinder" (following <ref> [GH82] </ref>), on the tree t. <p> Thus B accepts precisely those trees which A does not accept, as was to be shown. 2 It remains to verify the Determinacy Theorem. We refer to the abstract setting of countable game graphs, using terminology and ideas from <ref> [GH82] </ref>, [McN93], [Th95], [Zie95]. The players are now named 0 and 1 (instead of Automaton and Pathfinder). <p> In these cases, the winning strategy of at least one player needs in general some memory (of uniformly bounded finite size), and the construction of strategies is more involved. References on such strategy constructions are <ref> [GH82] </ref>, further developed in [YY90], [Zei94], as well as [Muc92] and [Kla94]. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp [MS90], [MS95].
Reference: [GR96] <author> D. Giammarresi, A. Restivo, </author> <title> Two-dimensional languages, </title> <booktitle> in: Handbook of Formal Language Theory, </booktitle> <volume> Vol. </volume> <editor> III (G. Rozenberg, A. Salomaa, Eds.), </editor> <publisher> Springer-Verlag, </publisher> <address> New York (to appear). </address>
Reference-contexts: For a detailed discussion of picture languages see <ref> [GR96] </ref>. Over the class of pictures, also other facts fail which are familiar from the domain of words or trees. <p> In the framework of pictures (rectangular arrays of symbols, with a horizontal and a vertical successor relation), these graph acceptors turn out to be equivalent to "tiling systems" (cf. [GRST96] or <ref> [GR96] </ref>). 4.3 Star-Free Languages A language L + is called star-free if it can be constructed from finite languages by applications of boolean operations and concatenation.
Reference: [GRST96] <author> D. Giammarresi, A. Restivo, S. Seibert, W. Thomas, </author> <title> Monadic second-order logic over rectangular pictures and recognizability by tiling systems, </title> <booktitle> Information and Computation 125 (1996), </booktitle> <pages> 32-45. </pages>
Reference-contexts: First, EMSO-logic turns out to be strictly weaker than MSO-logic over pictures; for example, the set of (n fi 2n)-dimensional pictures which are composed from two identical square pictures is MSO-definable but not EMSO-definable (cf. <ref> [GRST96] </ref>). Closely related is the fact that the powerset construction fails for canonical models of finite automata over pictures and acyclic graphs (see [PST94], where a claim of [KS81] concerning applicability of the powerset construction is corrected). <p> In the framework of pictures (rectangular arrays of symbols, with a horizontal and a vertical successor relation), these graph acceptors turn out to be equivalent to "tiling systems" (cf. <ref> [GRST96] </ref> or [GR96]). 4.3 Star-Free Languages A language L + is called star-free if it can be constructed from finite languages by applications of boolean operations and concatenation.
Reference: [GS84] <author> F. Gecseg, M. Steinby, </author> <title> Tree Automata, </title> <address> Akademiai Kiodo, Budapest 1984. </address>
Reference-contexts: For certain rational trace languages, which transcend the class of recognizable trace languages, Choffrut and Guerra [CG95] found a logical characterization, extending MSO-logic with formulas which allow to compare cardinalities of sets. Over trees, the situation is somewhat easier, referring to the theory of finite tree automata (see e.g. <ref> [GS84] </ref> or the chapter on tree languages in this Handbook). We consider tree automata working in bottom-up (or frontier-to-root) mode. In their transition relation, they can at each node only merge information which is provided by the states assumed at the son nodes.
Reference: [Hnf65] <author> W. Hanf, </author> <title> Model-theoretic methods in the study of elementary logic, in: The Theory of Models (J. </title> <editor> Addison, L. Henkin, P. Suppes, Eds.), </editor> <publisher> North-Holland, </publisher> <address> Amsterdam 1965, </address> <pages> pp. 132-145. </pages>
Reference-contexts: More general formulations are possible, but for simplicity we stay with the case of graphs of degree bounded by d. Theorem 4.7 ("Sphere Theorem", <ref> [Hnf65] </ref>) For any m 0 there are r; q 0 such that for any two graphs S; T (finite or infinite, but of degree d) we have: If S ~ r;q T then S m T . Proof.
Reference: [HP94] <author> H.J. Hoogeboom, P. </author> <title> ten Pas, </title> <booktitle> MSO-definable text languages, in: Mathematical Foundations of Computer Science 1994 (I. </booktitle> <editor> Pr ivara et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 841, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1994, </address> <pages> pp. 413-422. </pages>
Reference-contexts: A text can be built up in a structured way, combining parts of it in the form of a tree structure, called shape. Hoogeboom and ten Pas showed in <ref> [HP94] </ref> that a natural algebraic notion of recognizability and definability in MSO-logic coincide for text languages where these tree representations involve only trees of bounded arity (i.e., can be handled by finite tree automata). 16 A more general framework of definability of graph properties (which implic-itly involves terms and trees with
Reference: [HR86] <author> H.J. Hoogeboom, G. Rozenberg, </author> <title> Infinitary languages: basic theory and applications to concurrent systems, in: Current Trends in Concurrency (J. </title> <editor> de Bakker et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 224 , Springer-Verlag, </booktitle> <address> Berlin 1986, </address> <pages> pp. 266-342. </pages>
Reference-contexts: In this section, only some central logical aspects of !-automata are reviewed. More information can be found in the chapter on !-languages in this Handbook or the surveys <ref> [HR86] </ref>, [Sta87], [Th90], [TL94]. 5.1 !-Automata While the acceptance condition of automata over finite words is rather canonical, there are many possibilities of defining acceptance of infinite words. An acceptance condition restricts the occurrences of states in a run under consideration.
Reference: [Imm87] <author> N. Immerman, </author> <title> Languages that capture complexity classes, </title> <journal> SIAM J. Comput. </journal> <volume> 16 (1987), </volume> <pages> 761-778. </pages>
Reference: [JW95] <author> D. Janin, I. Walukiewicz, </author> <title> Automata for the modal -calculus and related results, in: </title> <institution> Math. Found. of Comput. Sci. </institution> <note> 1995 (J. Wiedermann, </note> <editor> P. Hajek, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 969, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1995, </address> <pages> pp. 552-562. </pages>
Reference-contexts: Many modal and temporal logics have been proved decidable along this line; examples are the modal -calculus and the computation tree logic CTL fl (see e.g. [Th90] or [EJ88] for a more detailed explanation and further references, and <ref> [JW95] </ref> for a recent automata theoretic study of the modal -calculus).
Reference: [Kam68] <author> J.A. Kamp, </author> <title> Tense logic and the theory of linear order, </title> <type> Ph. D. Thesis, </type> <institution> Univ. of California, </institution> <address> Los Angeles, </address> <year> 1968. </year>
Reference-contexts: By the above definition, each PTL-definable !-language is first-order definable. A difficult and rather technical result states that the converse is also true: Theorem 5.14 (Kamp <ref> [Kam68] </ref>, see also [GHR94]) An !-language is PTL-definable iff it is first-order definable (in the signature with S and &lt;).
Reference: [KG96] <author> O. Kupferman, O. Grumberg, </author> <title> Branching-time temporal logic and tree automata, </title> <booktitle> Information and Computation 125 (1996), </booktitle> <pages> 62-69. </pages>
Reference-contexts: So the respective modal logic L has the so-called finite model property. Tree automata can also be applied to obtain a solution of the model checking problem for branching-time logics (where satisfaction in a given model is to be tested rather than satisfiability); see <ref> [KG96] </ref> for a recent study. The process of unravelling is also the basis of an interesting generalization of Rabin's Tree Theorem.
Reference: [Kla94] <author> N. Klarlund, </author> <title> Progress measures, immediate determinacy, and a subset construction for tree automata, </title> <journal> Ann. Pure Appl. Logic 69 (1994), </journal> <pages> 243-168. </pages>
Reference-contexts: In these cases, the winning strategy of at least one player needs in general some memory (of uniformly bounded finite size), and the construction of strategies is more involved. References on such strategy constructions are [GH82], further developed in [YY90], [Zei94], as well as [Muc92] and <ref> [Kla94] </ref>. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp [MS90], [MS95]. <p> In these cases, the winning strategy of at least one player needs in general some memory (of uniformly bounded finite size), and the construction of strategies is more involved. References on such strategy constructions are [GH82], further developed in [YY90], [Zei94], as well as [Muc92] and <ref> [Kla94] </ref>. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp [MS90], [MS95]. Alternating automata are a generalization of nondeterministic automata in which transitions are defined by "and-or"-expressions, instead of "or"-expressions as present in nondeterministic automata.
Reference: [KMS95] <author> N. Klarlund, M. Mukund, M. Sohoni, </author> <title> Determinizing Buchi asynchronous automata, </title> <booktitle> in: Foundations of Software Technology and Theoretical Computer Science (P.S. </booktitle> <editor> Thiagarajan , Ed.), </editor> <booktitle> Lecture Notes in Computer Science 1026, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1995, </address> <pages> pp. 456-470. 66 </pages>
Reference-contexts: A generalization of the Safra construction to asynchronous finite automata (accepting infinite Mazurkiewicz traces) is presented in <ref> [KMS95] </ref>. 5.3 Applications to Definability and Decision Problems As a first consequence of McNaughton's Theorem, we note the equivalence between Buchi automata and MSO-logic over infinite words (originally shown by Buchi without use of deterministic automata). 37 Theorem 5.9 (Buchi's Theorem [Bu62]) An !-language is Buchi-recognizable iff it is MSO-definable, and
Reference: [KPB95] <author> S.C. Krishnan, A. Puri, R.K. Brayton, </author> <title> Structural complexity of !- automata, </title> <editor> in: STACS'95 (E.W. Mayr, C. Puech, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 900, </booktitle> <publisher> Springer-Verlag 1995, </publisher> <pages> pp. 143-156. </pages>
Reference-contexts: For the complexity analysis of the transformations from one acceptance condition to another, see e.g. [Saf88], [Saf92] and <ref> [KPB95] </ref>. In a more general framework of acceptance conditions, one can also consider the case that only the mere occurrence of states in runs is restricted (instead of the infinite occurrence). <p> As a consequence of this theory, the Rabin index of a regular !-language L is effectively computable, which is the minimal m such that a disjunction of length m as above in Proposition 5.11 defines L. Efficient procedures to determine the Rabin index are developed in [WY95] and <ref> [KPB95] </ref>. If in Proposition 5.11 we replace the quantifiers 9x8y (x &lt; y ! : : : ) by 8y : : : and 8x9y (x &lt; y ^ : : : ) by 9y : : : , then formulas arise which characterize the Staiger-Wagner-recognizable !-languages.
Reference: [KS81] <author> T. Kamimura, G. Slutzki, </author> <title> Parallel and two-way automata on directed ordered acyclic graphs, </title> <journal> Inform. Contr. </journal> <volume> 49 (1981), </volume> <pages> 10-51. </pages>
Reference-contexts: Closely related is the fact that the powerset construction fails for canonical models of finite automata over pictures and acyclic graphs (see [PST94], where a claim of <ref> [KS81] </ref> concerning applicability of the powerset construction is corrected). Also in the domain of arbitrary finite graphs MSO-logic can be separated from EMSO-logic: Connectivity is an MSO-expressible graph property which is not definable in EMSO-logic (cf. [FSV95]).
Reference: [Kur94] <author> R.P. Kurshan, </author> <title> Computer-Aided Verification of Coordinating Processes, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, N.J. </address> <year> 1994. </year>
Reference-contexts: This led to powerful algorithms and software systems for the verification of finite-state programs ("model-checking"). The area has developed into an own subject, built on an extensive literature which cannot be covered here in detail; as recent monographs in the field we mention [McM93], [Arn94a], and <ref> [Kur94] </ref>. The equivalence between automata and logical formalisms also started new tracks of research in language theory itself. <p> For more details and for applications in practical verification tasks, the reader should consult specific surveys and monographs such as [Em90], [McM93], [CGL94], <ref> [Kur94] </ref>, [Em96], [Var96]. In practice, the verification of nonterminating systems requires to check more complex computation properties than simply a correct order of events or states in time, as expressible in PTL or MSO-logic.
Reference: [Lad77] <author> R. Ladner, </author> <title> Application of model theoretic games to discrete linear orders and finite automata, </title> <booktitle> Information and Control 33 (1977), </booktitle> <pages> 281-303. </pages>
Reference-contexts: Proof. For the translation of first-order formulas into star-free expressions, we follow the approach of <ref> [Lad77] </ref>, [Th82a], [PP86], applying the Ehrenfeucht-Frasse technique. We proceed by induction on quantifier-depth m and sketch the induction step.
Reference: [Lan69] <author> L.H. </author> <title> Landweber, Decision problems for !-automata, Math. </title> <booktitle> Systems Theory 3 (1969), </booktitle> <pages> 376-384. </pages>
Reference-contexts: The disjunctions of Proposition 5.11 lead to a classification of !-languages, in which the complexity of these formulas (e.g., given by the parameter m) is connected with structural properties of deterministic Muller automata. This theory was initiated by Landweber <ref> [Lan69] </ref>, continued by Staiger and Wagner [SW74], and culminated in a deep structure theory of !-automata by Wagner [Wag79].
Reference: [LPZ85] <author> O. Lichtenstein, A. Pnueli, L. Zuck, </author> <title> The glory of the past, in: Logics of Programs (R. </title> <editor> Parikh et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 193, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1985, </address> <pages> pp. 196-218. </pages>
Reference-contexts: Some book-keeping is necessary for this, which means that auxiliary truth-value components have to be added (however not more than there are subformulas). Altogether, the following result is obtained: Theorem 5.15 (cf. <ref> [LPZ85] </ref>, [VW94]) PTL-formulas of length n can be translated effectively into equivalent Buchi automata with 2 O (n) states (and in time 2 O (n) ); consequently, the satisfiability problem for PTL is solvable in exponential time.
Reference: [LST95] <author> C. Lautemann, Th. Schwentick, D. Therien, </author> <title> Logics for context-free languages, </title> <booktitle> in: Computer Science Logic (L. </booktitle> <editor> Pacholski, J. Tiuryn, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 933, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1995, </address> <pages> pp. 205-216. </pages>
Reference-contexts: Typically, this kind of binary relation serves to define Dyck languages, by connecting positions where matching letters a i ; a i occur. Theorem 3.4 (Lautemann, Schwentick, Therien <ref> [LST95] </ref>) A language is context-free iff it is definable in existential second-order logic where the second-order variables range only over matchings. We turn to some applications of Theorem 3.1 to decision problems and results concerning definability of sets and relations over finite words.
Reference: [McM93] <author> K. McMillan, </author> <title> Symbolic Model Checking, </title> <publisher> Kluwer, </publisher> <address> Dordrecht 1993. </address>
Reference-contexts: This led to powerful algorithms and software systems for the verification of finite-state programs ("model-checking"). The area has developed into an own subject, built on an extensive literature which cannot be covered here in detail; as recent monographs in the field we mention <ref> [McM93] </ref>, [Arn94a], and [Kur94]. The equivalence between automata and logical formalisms also started new tracks of research in language theory itself. <p> For more details and for applications in practical verification tasks, the reader should consult specific surveys and monographs such as [Em90], <ref> [McM93] </ref>, [CGL94], [Kur94], [Em96], [Var96]. In practice, the verification of nonterminating systems requires to check more complex computation properties than simply a correct order of events or states in time, as expressible in PTL or MSO-logic.
Reference: [McN66] <author> R. McNaughton, </author> <title> Testing and generating infinite sequences by a finite automaton, </title> <journal> Inform. Contr. </journal> <volume> 9 (1966), </volume> <pages> 521-530. </pages>
Reference-contexts: Later, in work of Buchi [Bu62], McNaughton <ref> [McN66] </ref>, and Rabin [Rab69], such an equivalence was shown also between finite automata and monadic second-order logic over infinite words and trees. This research was initiated by decision problems for restricted systems of arithmetic and the problem of synthesizing circuits with nonterminating behaviour from logic specifications ([Chu63], [TB73]). <p> 2 Q n F .) In the next two subsections we give a proof of this determinization theorem and discuss some of its logical applications. 5.2 Determinization of !-Automata The purpose of this section is to show the key theorem of the theory of finite !-automata: Theorem 5.4 (McNaughton's Theorem <ref> [McN66] </ref>) A Buchi automaton can be transformed effectively into an equivalent deterministic Muller automaton. We shall follow Safra's proof [Saf88], which is an intricate refinement of the classical subset construction as used in the determinization of automata over finite words. First we outline the main ideas and do some preparations.
Reference: [McN93] <author> R. McNaughton, </author> <title> Infinite games played on finite graphs, </title> <journal> Ann. Pure Appl. Logic 65 (1993), </journal> <pages> 149-184. </pages>
Reference-contexts: In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi [Bu77], [Bu83] and Gurevich and Harrington [GH82], and uses more recent work of [EJ91], [Mst91a], <ref> [McN93] </ref>, [Th95], and [Zie95]. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees. <p> Thus B accepts precisely those trees which A does not accept, as was to be shown. 2 It remains to verify the Determinacy Theorem. We refer to the abstract setting of countable game graphs, using terminology and ideas from [GH82], <ref> [McN93] </ref>, [Th95], [Zie95]. The players are now named 0 and 1 (instead of Automaton and Pathfinder). <p> Fixed point expressions allow very compact representations of the desired vertex sets from where player 0, respectively player 1 wins, but are (as yet) found difficult to read by nonspecialists. Thus we used here a more standard graph theoretic presentation in the style of <ref> [McN93] </ref>, and owing a lot to Zielonka's work [Zie95]. <p> This is the approach of the (rather difficult) original proof of Buchi and Landwe-ber for finite-state games with Muller winning condition ([BL69], see also [TB73]). The use of the Rabin chain winning condition allows a simpler construction, by an induction on the size of the game graphs (see <ref> [McN93, Sect. 6] </ref>, [Th95]). Theorem 6.16 provides a solution to "Church's Problem" [Chu63], which asked for an automatic synthesis of reactive finite-state programs from automaton specifications (or from MSO-specifications, invoking their translation into automata).
Reference: [McNP71] <author> R. McNaughton and S. Papert, </author> <title> Counter-Free Automata, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass. </address> <year> 1971. </year>
Reference-contexts: A fl a b ~ (A fl a A fl ) defines the same language as 9x9y (S (x; y) ^ Q a (x) ^ Q b (y) ^ :9z (y &lt; z ^ Q a (z))): An analysis of first-order definability shows also the converse: Theorem 4.10 (McNaughton, Papert <ref> [McNP71] </ref>) A language is star-free iff it is first-order definable (in the signature with &lt;). Proof. For the translation of first-order formulas into star-free expressions, we follow the approach of [Lad77], [Th82a], [PP86], applying the Ehrenfeucht-Frasse technique. We proceed by induction on quantifier-depth m and sketch the induction step. <p> Certain properties concerning modular counting are also captured by special numerical predicates, in particular the unary predicates C r;q , containing those numbers (in word models: positions) which are congruent to r modulo q. The use of these predicates was suggested in <ref> [McNP71] </ref>, and together with successor and order they constitute the regular numerical predicates. Using them, the set of words of even length becomes definable, whereas PARITY is not definable in first-order logic with regular numerical predicates only.
Reference: [Mic88] <author> M. Michel, </author> <title> Complementation is more difficult with automata on infinite words, </title> <type> manuscript, </type> <institution> CNET, Paris, </institution> <year> 1988. </year>
Reference-contexts: For the proof we use an elegant (and up to now unpublished) example of Michel <ref> [Mic88] </ref>, concerning the complexity of complementing nondeterministic Buchi automata. We present it before giving the proof of Theorem 5.7. 35 Theorem 5.8 ([Mic88]) There is a family (L n ) n1 of !-languages such that each L n is recognized by a Buchi automaton with n + 2 states, and any
Reference: [Mil90] <author> R. Milner, </author> <title> Operational and algebraic semantics of concurrent processes, </title> <booktitle> in: Handbook of Theoretical Computer Science (J. </booktitle> <editor> v. Leeuwen, Ed.), </editor> <publisher> Elsevier Science Publ., </publisher> <address> Amsterdam 1990, </address> <pages> pp. 1201-1242. </pages>
Reference-contexts: The corresponding logics are systems of modal logic and process logic (equivalent to fragments of first-order logic). For an overview of this subject see <ref> [Mil90] </ref> or [Sti96]. 27 5 Automata and MSO-Logic on Infinite Words In his paper [Bu62], Buchi showed that MSO-logic over !-words is equivalent to finite automata equipped with natural acceptance conditions for infinite words.
Reference: [Mos80] <author> Y. N. Moschovakis, </author> <title> Descriptive Set Theory, </title> <publisher> North-Holland, </publisher> <address> Amsterdam 1980. </address>
Reference-contexts: Proposition 5.11 can be interpreted also in topological terms, referring to the Cantor topology on the space of all !-words over a given alphabet (see the chapter on !-languages of this Handbook, <ref> [Mos80] </ref>, or [TL94] for definitions). While recognition of an !-language L by a nondeterministic Buchi automaton shows that L is "projective", the recognition by a deterministic Muller or Ra-bin automaton puts L into the boolean closure of the second level of the Borel hierarchy.
Reference: [MP92] <author> Z. Manna, A. Pnueli, </author> <title> The Temporal Logic of Reactive and Concurrent Programs, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, New York 1992. </address> <month> 67 </month>
Reference-contexts: latter is called Staiger-Wagner acceptance (introduced in [SW74]); it captures the general case of condition where the set of visited states in a run determines whether the input is accepted. (In the classification of execution sequence properties of nontermi-nating programs, this case is described by the term "obligation property", cf. <ref> [MP92] </ref>.) A still more flexible framework is obtained in a logical setting: Here we consider acceptance components which are boolean combinations of formulas "9i (i) 2 F " and "9 ! i (i) 2 F " for state sets F of a given automaton. <p> : : : ; p n concisely by associating with them certain first-order formulas ' 0 (X 1 ; : : : X n ; x), to be interpreted in !-words over f0; 1g n "from position x onwards". (For a more detailed and standard introduction see e.g. [Em90] or <ref> [MP92] </ref>.) For ' = p i we have ' 0 (x) = X i (x), and the boolean connectives are handled as usual. <p> Since in the first-order framework the analogue of this normal form also holds ([Th81]), it turns out that any PTL-formula can be written as a disjunction of formulas FG' ^ GF with past-formulas '; . 41 In <ref> [MP92] </ref>, applications of this representation to finite-state program verification are studied. Another classification of PTL-definable properties is obtained by cancelling certain temporal operators.
Reference: [MS85] <author> D.E. Muller, P.E. Schupp, </author> <title> The theory of ends, pushdown automata, and second-order logic, </title> <institution> Theor. Comput. Sci. </institution> <month> 37 </month> <year> (1985), </year> <pages> 51-75. </pages>
Reference-contexts: A different kind of generalization of the Rabin Tree Theorem is concerned with the monadic second-order theory of infinite graphs which are "regular modifications of trees". A first result in this direction was proved by Muller and Schupp <ref> [MS85] </ref>; they showed that the monadic second-order theory of any context-free graph is decidable. These graphs are obtained as transition graphs of pushdown automata (where a vertex is a word qv 2 Q P fl , for a state set Q and a pushdown alphabet P ).
Reference: [MS90] <author> D.E. Muller, P.E. Schupp, </author> <title> Alternating automata on infinite trees, </title> <journal> Theor.Comput. Sci. </journal> <volume> 54 (1987), </volume> <pages> 267-276. </pages>
Reference-contexts: References on such strategy constructions are [GH82], further developed in [YY90], [Zei94], as well as [Muc92] and [Kla94]. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp <ref> [MS90] </ref>, [MS95]. Alternating automata are a generalization of nondeterministic automata in which transitions are defined by "and-or"-expressions, instead of "or"-expressions as present in nondeterministic automata. In the self-dual framework of alternating automata, complementation is easy, while projection is the nontrivial step.
Reference: [MS95] <author> D.E. Muller, P.E. Schupp, </author> <title> Simulating alternating tree automata by nondeterministic automata: new results and new proofs of the theorems of Ra-bin, McNaughton and Safra, </title> <institution> Theor. Comput. Sci. </institution> <month> 141 </month> <year> (1995), </year> <pages> 69-107. </pages>
Reference-contexts: References on such strategy constructions are [GH82], further developed in [YY90], [Zei94], as well as [Muc92] and [Kla94]. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp [MS90], <ref> [MS95] </ref>. Alternating automata are a generalization of nondeterministic automata in which transitions are defined by "and-or"-expressions, instead of "or"-expressions as present in nondeterministic automata. In the self-dual framework of alternating automata, complementation is easy, while projection is the nontrivial step.
Reference: [Mst84] <author> A.W. Mostowski, </author> <title> Regular expressions for infinite trees and a standard form of automata, </title> <editor> in: A. Skowron (ed.), </editor> <booktitle> Computation Theory, Lecture Notes in Computer Science 208, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1984, </address> <pages> pp. 157-168. </pages>
Reference-contexts: This contradicts the assumption that A recognizes T 2 . We now turn to the complementation problem for automata on infinite trees. The solution is simplified considerably when we use a seemingly more complicated acceptance condition, the "Rabin chain condition" (introduced by Mostowski <ref> [Mst84] </ref>, [Mst91a]), also called "parity condition" (introduced independently by Emerson and Jutla [EJ91]). The idea is to fix the final state sets not by listing their states separately in each case, but to use a more uniform scheme based on a global indexing of the states.
Reference: [Mst91a] <author> A.W. Mostowski, </author> <title> Games with forbidden positions, </title> <type> Preprint No. 78, </type> <institution> Uniwersytet Gdanski, Instytyt Matematyki, </institution> <year> 1991. </year>
Reference-contexts: In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi [Bu77], [Bu83] and Gurevich and Harrington [GH82], and uses more recent work of [EJ91], <ref> [Mst91a] </ref>, [McN93], [Th95], and [Zie95]. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees. <p> This contradicts the assumption that A recognizes T 2 . We now turn to the complementation problem for automata on infinite trees. The solution is simplified considerably when we use a seemingly more complicated acceptance condition, the "Rabin chain condition" (introduced by Mostowski [Mst84], <ref> [Mst91a] </ref>), also called "parity condition" (introduced independently by Emerson and Jutla [EJ91]). The idea is to fix the final state sets not by listing their states separately in each case, but to use a more uniform scheme based on a global indexing of the states. <p> The above-mentioned first step in the complementation of tree automata is the following result on memoryless determinacy of Rabin chain games, proved in detail later in this section. Theorem 6.8 (Determinacy of Rabin Chain Tree Automata Games, [EJ91], <ref> [Mst91a] </ref>) Let A be a Rabin chain tree automaton and t be an input tree for A. Then in A;t , from any game position either Automaton or Pathfinder has a memoryless winning strategy. Let us apply the theorem to establish complementation for Rabin chain tree automata.
Reference: [Mst91b] <author> A.W. Mostowski, </author> <title> Hierarchies of weak automata and weak monadic formulas, </title> <institution> Theor. Comput. Sci. </institution> <month> 83 </month> <year> (1991), </year> <pages> 323-335. </pages>
Reference: [Muc92] <author> A. Muchnik, </author> <title> Games on infinite trees and automata with dead-ends. A new proof for the decidability of the monadic second-order theory of two successors, </title> <journal> Bull. </journal> <note> of the EATCS 48 (1992), 220-267 (Russian version in Semiotics and Information 24 (1984)). </note>
Reference-contexts: In these cases, the winning strategy of at least one player needs in general some memory (of uniformly bounded finite size), and the construction of strategies is more involved. References on such strategy constructions are [GH82], further developed in [YY90], [Zei94], as well as <ref> [Muc92] </ref> and [Kla94]. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp [MS90], [MS95].
Reference: [Mul63] <author> D.E. Muller, </author> <title> Infinite sequences and finite machines, </title> <booktitle> in: Proc. 4th IEEE Symp. on Switching Circuit Theory and Logical Design, </booktitle> <year> 1963, </year> <pages> pp. 3-16. </pages>
Reference-contexts: frequently used acceptance conditions are the following requirements on In () (called so according to their inventors): * Buchi condition [Bu62]: In () " F 6= ; for a set F Q of "final states", requiring that some final state occurs infinitely often in the run . * Muller condition <ref> [Mul63] </ref>: W F 2F In () = F , for a family F 2 Q of final state sets, requiring that the set of states assumed infinitely often in the run forms a set in F . * Rabin condition ("pairs condition") [Rab69], [Rab72]: W n i=1 (In () " E
Reference: [MV96] <author> C. Michaux, R. Villemaire, </author> <title> Presburger arithmetic and recognizability of natural numbers by automata: new proofs of Cobham's and Semenov's theorems, </title> <journal> Ann. Pure Appl. Logic 77 (1996), </journal> <pages> 251-277. </pages>
Reference-contexts: A generalization of Cobham's Theorem, namely for relations instead of sets of numbers, was obtained by Semenov and later given a very elegant proof by Muchnik; for comprehensive expositions see the lucid survey [BHMV94] or <ref> [MV96] </ref>. It is interesting to note that the expressive power of finite automata which recognize relations in an asynchronous manner (such that the reading heads on different components may be apart by arbitrary distances) is much greater than in the synchronous case.
Reference: [Niw88] <author> D. Niwinski, </author> <title> Fixed points vs. infinite generation, </title> <booktitle> in: Proc. 3rd IEEE Symp. on Logic in Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 402-409. </pages>
Reference-contexts: The classification of weak second-order formulas according to quantifier alternation of the prenex normal form yields an infinite hierarchy ([Th82b]). Another hierarchy is built up by classifying the Rabin recognizable tree languages according to the number of disjunction members in the Rabin acceptance condition. Niwinski <ref> [Niw88] </ref> proved that this hierarchy is infinite, sharpening considerably the separation of Buchi and Rabin recognizability as explained above in Example 6.3. For a more detailed synopsis of the classification of Rabin recognizable tree languages and for further references we refer the reader to the concluding section of [TL94].
Reference: [Niw96] <author> D. Niwinski, </author> <title> Fixed points characterization of infinite behaviour of finite state systems, </title> <institution> Theor. Comput. Sci. </institution> <note> (to appear). </note>
Reference-contexts: The connections to fixed point logics constitute an own fascinating chapter of definability theory and are developed by Arnold and Niwinski in [AN92], <ref> [Niw96] </ref>. Let us turn to decidability results for monadic second-order theories. An application of Theorem 6.19 to an MSO-sentence ' yields an input-free tree automaton which admits a successful run iff ' is true in the tree structure T .
Reference: [Per90] <author> D. Perrin, </author> <title> Finite Automata, </title> <booktitle> in: Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B (J. van Leuwen, ed.), </editor> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam 1990, </address> <pages> pp. 1-57. </pages>
Reference-contexts: A deep theorem due to Cobham connects the notions of p- and q-recognizability for different p and q: A set of natural numbers which is both p- and q-recognizable for multiplicatively independent p and q must be 1-recognizable, hence ultimately periodic (see e.g. <ref> [Per90] </ref>). Here two numbers p, q are called multiplicatively independent if there are no powers p m and q n (m; n &gt; 0) which coincide. <p> is much supported by Schutzenberger's fundamental characterization [Sch65] in terms of finite group-free (or: aperiodic) monoids. (Whereas we have verified the aperiodicity prop 25 erty of first-order definable languages in Proposition 4.5 above, the converse is more difficult and relies on nontrivial results concerning the decomposition of monoids; see e.g. <ref> [Per90] </ref>.) In the framework of minimal deterministic automata, this aperiodicity property amounts to the lack of words which induce a nontrivial permutation on a subset of the state space.
Reference: [Pin86] <author> J.-E. Pin, </author> <title> Varieties of Formal Languages, </title> <publisher> Plenum, </publisher> <address> New-York, </address> <year> 1986. </year>
Reference-contexts: The class of locally threshold testable languages, considered in the previous section, is an example, and adaptations of the Ehrenfeucht-Frasse method are usually applied in fixing the logical part of the characterizations. The field is presented in several surveys and books, e.g. <ref> [Pin86] </ref> and [Str94]. Below we list only a small selection of results. We shall only consider languages of words; in fact, it seems difficult to characterize first-order logic over trees by structural properties of tree automata (for partial results in this direction see [Pot95]).
Reference: [PP86] <author> D. Perrin and J.-E. Pin, </author> <title> First-order logic and star-free sets, </title> <journal> J. Comput. System Sci. </journal> <volume> 32 (1986), </volume> <pages> 393-406. 68 </pages>
Reference-contexts: Proof. For the translation of first-order formulas into star-free expressions, we follow the approach of [Lad77], [Th82a], <ref> [PP86] </ref>, applying the Ehrenfeucht-Frasse technique. We proceed by induction on quantifier-depth m and sketch the induction step. <p> The levels of this hierarchy have a natural characterization in terms of quantifier-prefixes of first-order formulas in which only &lt; (but not S) appears as a numerical relation: Theorem 4.12 (cf. <ref> [PP86] </ref>) A star-free language belongs to the class V n iff it is definable by a B ( n )-sentence of first-order logic with &lt;. The first level of this hierarchy gives the class of piecewise testable languages (Simon [Sim75]).
Reference: [Pot95] <author> A. Potthoff, </author> <title> First-order logic on finite trees, in: TAPSOFT '95 (P.D. </title> <editor> Mosses et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin 1995, </address> <pages> pp. 125-139. </pages>
Reference-contexts: Below we list only a small selection of results. We shall only consider languages of words; in fact, it seems difficult to characterize first-order logic over trees by structural properties of tree automata (for partial results in this direction see <ref> [Pot95] </ref>). Within the class of star-free languages, a hierarchy (V n ) n0 of language classes can be built up whose levels measure the concatenation depth of defining star-free expressions.
Reference: [PST94] <author> A. Potthoff, S. Seibert, W. Thomas, </author> <title> Nondeterminism versus determinism of finite automata over directed acyclic graphs, </title> <journal> Bull. Belg. Math. Soc. </journal> <volume> Simon Stevin 1 (1994), </volume> <pages> 285-298. </pages>
Reference-contexts: Closely related is the fact that the powerset construction fails for canonical models of finite automata over pictures and acyclic graphs (see <ref> [PST94] </ref>, where a claim of [KS81] concerning applicability of the powerset construction is corrected). Also in the domain of arbitrary finite graphs MSO-logic can be separated from EMSO-logic: Connectivity is an MSO-expressible graph property which is not definable in EMSO-logic (cf. [FSV95]).
Reference: [PT93] <author> A. Potthoff, W. Thomas, </author> <title> Regular tree languages without unary symbols are star-free, in: Fundamentals of of Computation Theory (Z. </title> <editor> Esik, Ed.), </editor> <booktitle> Lecture Notes in Computer Science 710, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1993, </address> <pages> pp. 396-405. </pages>
Reference: [Rab69] <author> M.O. Rabin, </author> <title> Decidability of second-order theories and automata on infinite trees, </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 141 (1969), </volume> <pages> 1-35. </pages>
Reference-contexts: Later, in work of Buchi [Bu62], McNaughton [McN66], and Rabin <ref> [Rab69] </ref>, such an equivalence was shown also between finite automata and monadic second-order logic over infinite words and trees. This research was initiated by decision problems for restricted systems of arithmetic and the problem of synthesizing circuits with nonterminating behaviour from logic specifications ([Chu63], [TB73]). <p> The reduction of formulas to finite automata was the key to the solution of both problems: The monadic second-order theories S1S and S2S of one, respectively two successor functions were shown to be decidable in [Bu62] and <ref> [Rab69] </ref>, leading to decidabil-ity results also for other interesting mathematical theories and for several logics of programs. <p> This will include certain difficult automata theoretic constructions over infinite words and trees, e.g. Safra's determinization of !-automata [Saf88] and Rabin's Tree Theorem <ref> [Rab69] </ref>, which are as yet not accessible in textbooks or surveys, as well as a short exposition of the Ehrenfeucht-Frasse game technique and some of its applications concerning first-order logic in formal language theory. Thus, some complementary material to the related survey paper [Th90] is given. <p> often in the run . * Muller condition [Mul63]: W F 2F In () = F , for a family F 2 Q of final state sets, requiring that the set of states assumed infinitely often in the run forms a set in F . * Rabin condition ("pairs condition") <ref> [Rab69] </ref>, [Rab72]: W n i=1 (In () " E i = ; ^ In () " F i 6= ;), for a sequence of "accepting pairs" (E 1 ; F 1 ); : : : ; (E n ; F n ) with E i ; F i Q; it requires <p> of relative distance" characterizes the expressive power of the timed automata in the sense of Alur and Dill [AD94]; the decidability of the emptiness problem for these automata implies that also the satisfiability problem for this timed MSO-logic is decidable. 6 Automata and MSO-Logic on Infinite Trees Rabin showed in <ref> [Rab69] </ref> that the correspondence between automata and MSO-formulas can be lifted from the domain of infinite words to the domain of infinite trees. As a consequence, the monadic second-order theory S2S of two successor functions turned out to be decidable. <p> The existence of such a successful run is decided effectively by Theorem 6.18. Hence we obtain the celebrated Theorem 6.20 (Rabin Tree Theorem <ref> [Rab69] </ref>) The theory S2S is decidable. Many mathematical theories have been shown to be decidable by an interpretation in S2S; some examples are presented in [Rab69]. <p> The existence of such a successful run is decided effectively by Theorem 6.18. Hence we obtain the celebrated Theorem 6.20 (Rabin Tree Theorem <ref> [Rab69] </ref>) The theory S2S is decidable. Many mathematical theories have been shown to be decidable by an interpretation in S2S; some examples are presented in [Rab69]. In particular, the decidability S2S extends to tree models with arbitrary finite and even countable branching (such trees are easily embedded in the binary tree T ).
Reference: [Rab70] <author> M.O. Rabin, </author> <title> Weakly definable relations and special automata, in: Mathematical Logic and Foundations of Set Theory (Y. </title> <editor> Bar-Hillel, ed.), </editor> <publisher> North-Holland, </publisher> <address> Amsterdam 1970, </address> <pages> pp. 1-23. </pages>
Reference-contexts: For example, if only weak second-order quantifiers are admitted (ranging over finite sets of tree nodes), a proper subclass of the MSO-definable tree languages (the class of weakly definable tree languages) is obtained. As shown by Rabin <ref> [Rab70] </ref>, these tree languages are the sets L such that both L and the complement of L are recognizable by Buchi tree automata. The classification of weak second-order formulas according to quantifier alternation of the prenex normal form yields an infinite hierarchy ([Th82b]).
Reference: [Rab72] <author> M.O. Rabin, </author> <title> Automata on infinite objects and Church's Problem, </title> <publisher> Amer. Math. Soc., </publisher> <address> Providence, RI, </address> <year> 1972. </year>
Reference-contexts: in the run . * Muller condition [Mul63]: W F 2F In () = F , for a family F 2 Q of final state sets, requiring that the set of states assumed infinitely often in the run forms a set in F . * Rabin condition ("pairs condition") [Rab69], <ref> [Rab72] </ref>: W n i=1 (In () " E i = ; ^ In () " F i 6= ;), for a sequence of "accepting pairs" (E 1 ; F 1 ); : : : ; (E n ; F n ) with E i ; F i Q; it requires that <p> Clearly the unique run of C generates (in its A-component) the tree which is generated by the word automaton B. Conversely, an input-free tree automaton as above induces canonically a word automaton which generates the same (regular) tree. Theorem 6.18 (Rabin Basis Theorem, cf. <ref> [Rab72] </ref>) For Rabin chain tree automata A, the emptiness problem " T ! (A) = ;?" is decidable, and any nonempty set T ! (A) contains a regular tree (whose generating automaton B is obtained effectively from A). Proof. <p> By the remark above, such a deterministic tree automaton generates a regular tree. By construction of A 0 , this regular tree belongs to the tree language recognized by A. 2 In Theorem 6.18 we applied the effective determinacy result 6.16. Rabin used a converse approach in <ref> [Rab72] </ref>; he gave a direct proof of the Basis Theorem (for tree automata with Rabin acceptance condition) and used the existence of regular trees to show that finite-state winning strategies exist in games over finite graphs (see e.g. [Th90]).
Reference: [Saf88] <author> S. Safra, </author> <title> On the complexity of !-automata, </title> <booktitle> in: Proc. 29th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 319-327. </pages>
Reference-contexts: The main objective of this survey is to explain the precise relation between finite automata and monadic second-order logic and to give self-contained proofs of some fundamental results. This will include certain difficult automata theoretic constructions over infinite words and trees, e.g. Safra's determinization of !-automata <ref> [Saf88] </ref> and Rabin's Tree Theorem [Rab69], which are as yet not accessible in textbooks or surveys, as well as a short exposition of the Ehrenfeucht-Frasse game technique and some of its applications concerning first-order logic in formal language theory. <p> This can be signalled by the Buchi acceptance condition. 2 29 It follows from McNaughton's Theorem (see next section) that even determin-istic automata can be obtained when the Muller-, Rabin-, or Streett-acceptance is used. For the complexity analysis of the transformations from one acceptance condition to another, see e.g. <ref> [Saf88] </ref>, [Saf92] and [KPB95]. In a more general framework of acceptance conditions, one can also consider the case that only the mere occurrence of states in runs is restricted (instead of the infinite occurrence). <p> We shall follow Safra's proof <ref> [Saf88] </ref>, which is an intricate refinement of the classical subset construction as used in the determinization of automata over finite words. First we outline the main ideas and do some preparations. Let A = (Q; A; q 0 ; ; F ) be a Buchi automaton. <p> The number of combinations of such maps (and hence the number of possible Safra trees) is thus bounded by (2n + 1) n+32n , which is in 2 O (nlog (n)) . 2 This complexity bound is optimal in the following sense: Theorem 5.7 (cf. <ref> [Saf88] </ref>) There is no conversion of Buchi automata with n states into deterministic Rabin automata with 2 O (n) states and O (n) accepting pairs. For the proof we use an elegant (and up to now unpublished) example of Michel [Mic88], concerning the complexity of complementing nondeterministic Buchi automata.
Reference: [Saf92] <author> S. Safra, </author> <title> Exponential determinization for !-automata with strong-fairness acceptance condition, </title> <booktitle> in: Proc. 24th ACM Symp. on the Theory of Computing, </booktitle> <year> 1992, </year> <pages> pp. 275-282. </pages>
Reference-contexts: For the complexity analysis of the transformations from one acceptance condition to another, see e.g. [Saf88], <ref> [Saf92] </ref> and [KPB95]. In a more general framework of acceptance conditions, one can also consider the case that only the mere occurrence of states in runs is restricted (instead of the infinite occurrence). <p> Since B has 2 O (n) many states, the claim is proved. 2 Applications of the Safra determinization construction in obtaining (essentially optimal) complexity bounds for logics of programs are given e.g. in [EJ88]. In <ref> [Saf92] </ref>, Safra achieved a transformation of nondeterministic Streett automata into deterministic Rabin automata with the same asymptotic blow-up as for nondeterministic Buchi automata; more precisely, a nondeterministic Streett automaton with n states and h pairs in the acceptance component is converted into a deterministic Rabin automaton with 2 O (nhlog (nh))
Reference: [SC85] <author> A.P. Sistla, </author> <title> E.M. Clarke, The complexity of propositional linear time logics, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 32 (1985), </volume> <pages> 733-749. </pages>
Reference: [Sch65] <author> M.P. Schutzenberger, </author> <title> On finite monoids having only trivial subgroups, </title> <booktitle> Information and Control 8 (1965), </booktitle> <pages> 190-194. </pages>
Reference-contexts: Thus a disjunction of normal formulas is reached. 2 Theorem 4.10 is the starting point of a rich definability theory of star-free lan guages. The significance of the class of star-free languages is much supported by Schutzenberger's fundamental characterization <ref> [Sch65] </ref> in terms of finite group-free (or: aperiodic) monoids. (Whereas we have verified the aperiodicity prop 25 erty of first-order definable languages in Proposition 4.5 above, the converse is more difficult and relies on nontrivial results concerning the decomposition of monoids; see e.g. [Per90].) In the framework of minimal deterministic automata,
Reference: [See92] <author> D. Seese, </author> <title> Interpretability and tree automata: a simple way to solve algorithmic problems on graphs closely related to trees, in: Tree Automata and Languages (M. </title> <editor> Nivat, A. Podelski, Eds.), </editor> <publisher> Elsevier Science Publishers, </publisher> <year> 1992, </year> <pages> pp. 83-114. </pages>
Reference-contexts: An interesting class where this question is open is given by the graphs of bounded tree-width; see [Cou91] and <ref> [See92] </ref> for a detailed treatment and partial results in two complementary approaches. A general method to construct sets of graphs from sets of trees is to apply monadic second-order interpretations. <p> One formula (with a free variable) defines a copy of the domain of S within R, and further formulas are provided to define the relations of S as relations over that part of R which represents S. Seese <ref> [See92] </ref> applies interpretations of graphs in trees and uses tree automata theory to obtain decidability results, as well as upper time-bounds for computational graph problems. In [Cou94], the related notion of monadic second-order graph transduction is studied.
Reference: [See96] <author> D. Seese, </author> <title> Linear time computable problems and first-order descriptions, </title> <journal> Math. </journal> <note> Struct. in Comp. Sci. </note> <year> 1996. </year>
Reference: [Sei92] <author> S. Seibert, </author> <title> Quantifier hierarchies over word relations, </title> <booktitle> in: Computer Science Logic (E. </booktitle> <editor> Borger et al. Eds.), </editor> <booktitle> Lecture Notes in Computer Science 626, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1992, </address> <pages> 329-338. 69 </pages>
Reference: [Sem84] <author> A.L. Semenov, </author> <title> Decidability of monadic theories, </title> <booktitle> in: Proc. MFCS 84 (M.P. </booktitle> <editor> Chytil, V, Koubek, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 176, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1984, </address> <pages> pp. 162-175. </pages>
Reference-contexts: In unpublished work of Muchnik (see <ref> [Sem84] </ref>), in [Cou95] and (for the general form) in [Wal96] it is shown how to translate a sentence ' of the monadic second-order language of M + into a sen tence ' of the language of the original structure M such that M + j= ' iff M j= '.
Reference: [Sim75] <author> I. Simon, </author> <title> Piecewise testable events, </title> <booktitle> Proc. 2nd GI Conf., </booktitle> <publisher> Springer LNCS 33 (1975), </publisher> <pages> 214-222. </pages>
Reference-contexts: The first level of this hierarchy gives the class of piecewise testable languages (Simon <ref> [Sim75] </ref>). It can be shown that the V n form a strictly increasing hierarchy; in the logical framework the EF-game may be applied for the hierarchy proof ([Th84a]). Analogous results can be proved for the closely related "dot-depth hierarchy" ([Th82a], [Th87]).
Reference: [St82] <author> R.S. Streett, </author> <title> Propositional dynamic logic of looping and converse, </title> <journal> Inform. Contr. </journal> <volume> 54 (1982), </volume> <pages> 121-141. </pages>
Reference-contexts: Q; it requires that for some i, all states of E i are visited only finitely often in (excluded from some point onwards), but some state of F i (i.e., a final state) is visited infinitely often. 28 * Streett condition ("complemented pairs condition", the dual of the Rabin condition) <ref> [St82] </ref>: V n i=1 (In ()"E i 6= ; _ In ()"F i = ;) for a sequence of pairs (E 1 ; F 1 ); : : : ; (E n ; F n ) where the E i ; F i are subsets of Q; it represents a "fairness
Reference: [Sta87] <author> L. Staiger, </author> <title> Research in the theory of !-languages, </title> <journal> J. Inf. Process. Cybern. </journal> <volume> EIK 23 (1987), </volume> <pages> 415-439. </pages>
Reference-contexts: In this section, only some central logical aspects of !-automata are reviewed. More information can be found in the chapter on !-languages in this Handbook or the surveys [HR86], <ref> [Sta87] </ref>, [Th90], [TL94]. 5.1 !-Automata While the acceptance condition of automata over finite words is rather canonical, there are many possibilities of defining acceptance of infinite words. An acceptance condition restricts the occurrences of states in a run under consideration. <p> A complete analysis of the expressiveness of the acceptance conditions and their transfer to automata with arbitrary storage types (like pushdown store) is given by Staiger <ref> [Sta87] </ref> and Engelfriet and Hoogeboom [EH93]. Let us connect the Buchi recognizable !-languages with the standard notion of regular sets of finite words.
Reference: [Sta] <author> L. Staiger, !-languages, </author> <title> in: </title> <booktitle> Handbook of Formal Language Theory, </booktitle> <volume> Vol. </volume> <editor> I (G. Rozenberg, A. Salomaa, Eds.), </editor> <publisher> Springer-Verlag, </publisher> <address> New York (to appear). </address>
Reference: [Sti96] <author> C. Stirling, </author> <title> Modal and temporal logics for processes, in: Logics for Con-currency: Structure versus Automata (F. Moller, </title> <editor> G. Birtwistle, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 1043, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1996, </address> <pages> pp. 149-237. </pages>
Reference-contexts: The corresponding logics are systems of modal logic and process logic (equivalent to fragments of first-order logic). For an overview of this subject see [Mil90] or <ref> [Sti96] </ref>. 27 5 Automata and MSO-Logic on Infinite Words In his paper [Bu62], Buchi showed that MSO-logic over !-words is equivalent to finite automata equipped with natural acceptance conditions for infinite words.
Reference: [Str94] <author> H. Straubing, </author> <title> Finite Automata, Formal Logic, and Circuit Complexity, </title> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: It turned out that natural families of circuits (given by such bounds on size and depth) can be described by generalized models of finite automata as well as by appropriate systems of first-order logic. In Straubing's book <ref> [Str94] </ref> these results are developed in detail, including algebraic aspects (concerning, e.g., varieties of monoids associated with regular languages). The main objective of this survey is to explain the precise relation between finite automata and monadic second-order logic and to give self-contained proofs of some fundamental results. <p> The class of locally threshold testable languages, considered in the previous section, is an example, and adaptations of the Ehrenfeucht-Frasse method are usually applied in fixing the logical part of the characterizations. The field is presented in several surveys and books, e.g. [Pin86] and <ref> [Str94] </ref>. Below we list only a small selection of results. We shall only consider languages of words; in fact, it seems difficult to characterize first-order logic over trees by structural properties of tree automata (for partial results in this direction see [Pot95]). <p> As shown in [BCST88], the intersection of AC 0 with the class of regular languages contains precisely the languages definable in first-order logic with regular numerical predicates. The reader should consult Straubing's book <ref> [Str94] </ref> for proofs, many more results, and some intriguing open problems.
Reference: [Stu75] <author> J. Stupp, </author> <title> The lattice model is recursive in the original model, </title> <type> manuscript, </type> <institution> The Hebrew Univ., </institution> <address> Jerusalem 1975. </address>
Reference-contexts: In unpublished work of Stupp <ref> [Stu75] </ref>, it was shown that the decidability of the monadic second-order theory of a given structure M can be transferred to 59 M # .
Reference: [STT95] <author> H. Straubing, D. Therien and W. Thomas, </author> <title> Regular Languages Defined with Generalized Quantifiers, </title> <booktitle> in: Information and Computation 118 (1995), </booktitle> <pages> 289-301. </pages>
Reference-contexts: Properties which involve modular counting are conveniently described by modular quantifiers 9 q;r x, to be read as "there are exactly r elements x modulo q such that : : : ". In <ref> [STT95] </ref> it is shown that the languages definable in the extension of first-order logic by modular quantifiers are those whose syntactic monoid is finite and contains only groups which are solvable.
Reference: [SW74] <editor> L. Staiger, K. Wagner, Automatentheoretische und automatenfreie Charakterisierungen topologischer Klassen regularer Folgenmengen, Elek-tron. Informationsverarbeitung u. </editor> <booktitle> Kybernetik EIK 10 (1974), </booktitle> <pages> 379-392. </pages>
Reference-contexts: Oc () " F 6= ; for a set F of states or Oc () 2 F for a system F of state sets. The latter is called Staiger-Wagner acceptance (introduced in <ref> [SW74] </ref>); it captures the general case of condition where the set of visited states in a run determines whether the input is accepted. (In the classification of execution sequence properties of nontermi-nating programs, this case is described by the term "obligation property", cf. [MP92].) A still more flexible framework is obtained <p> The disjunctions of Proposition 5.11 lead to a classification of !-languages, in which the complexity of these formulas (e.g., given by the parameter m) is connected with structural properties of deterministic Muller automata. This theory was initiated by Landweber [Lan69], continued by Staiger and Wagner <ref> [SW74] </ref>, and culminated in a deep structure theory of !-automata by Wagner [Wag79]. <p> A beautiful result of <ref> [SW74] </ref> states that membership of a regular !-language in this class is decidable and that these !-languages are precisely those sets L such that L and its complement are both recognized by deterministic Buchi automata. <p> Wilke showed in [Wil93] that an !-language is finitely locally threshold testable iff it is both locally threshold testable and Staiger-Wagner recognizable. Since the latter two properties are decidable (by [BP89] and <ref> [SW74] </ref>), so is the first, and we may conclude that one can decide effectively whether a regular !-language is definable in FO [S]-logic. Buchi's Theorem 5.9 has been refined and extended in many ways.
Reference: [TB73] <author> B.A. Trakhtenbrot, Y.M. Barzdin, </author> <title> Finite Automata, </title> <publisher> North-Holland, </publisher> <month> Am-sterdam </month> <year> 1973. </year>
Reference-contexts: This research was initiated by decision problems for restricted systems of arithmetic and the problem of synthesizing circuits with nonterminating behaviour from logic specifications ([Chu63], <ref> [TB73] </ref>). <p> This is the approach of the (rather difficult) original proof of Buchi and Landwe-ber for finite-state games with Muller winning condition ([BL69], see also <ref> [TB73] </ref>). The use of the Rabin chain winning condition allows a simpler construction, by an induction on the size of the game graphs (see [McN93, Sect. 6], [Th95]).
Reference: [Th81] <author> W. Thomas, </author> <title> A combinatorial approach to the theory of !-automata, </title> <booktitle> Information and Control 48 (1981), </booktitle> <pages> 261-283. </pages>
Reference: [Th82a] <author> W. Thomas, </author> <title> Classifying regular events in symbolic logic, </title> <institution> J. Comput. Syst. Sci. </institution> <month> 25 </month> <year> (1982), </year> <pages> 360-375. </pages>
Reference-contexts: Invoking the second part of the proof, we see that it provides a normal form of MSO [S]- formulas, in Buchi's terminology an "automata normal form". Corollary 3.2 Any MSO [S]-formula can be written as an EMSO [S]-formula. In <ref> [Th82a] </ref> it is shown that even a single existential set quantifier suffices in EMSO-formulas for defining recognizable languages. 9 The automata theoretic approach to monadic second-order logic yields a form of quantifier elimination, as is visible from the reduction of arbitrary formulas to the mentioned automata normal form. <p> Proof. For the translation of first-order formulas into star-free expressions, we follow the approach of [Lad77], <ref> [Th82a] </ref>, [PP86], applying the Ehrenfeucht-Frasse technique. We proceed by induction on quantifier-depth m and sketch the induction step.
Reference: [Th82b] <author> W. Thomas, </author> <title> A hierarchy of sets of infinite trees, in: Theoretical Computer Science (A.B. Cremers, H.P. Kriegel, </title> <editor> Eds.), </editor> <booktitle> Lecture Notes in Computer Science 145, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1982, </address> <pages> pp. 335-342. 70 </pages>
Reference: [Th84a] <author> W. Thomas, </author> <title> An application of the Ehrenfeucht-Frasse game in formal language theory, </title> <journal> Bull. Soc. Math. France, Mem. </journal> <volume> 16 (1984), </volume> <pages> 11-21. </pages>
Reference: [Th84b] <author> W. Thomas, </author> <title> Logical aspects in the study of tree languages, </title> <booktitle> in: Ninth Coll. on Trees in Algebra and Programming (B. Courcelle, </booktitle> <publisher> Ed.), Cambridge Univ. Press 1984, </publisher> <pages> pp. 31-49. </pages>
Reference-contexts: Similarly, chain logic is introduced; it allows only set quantifiers ranging over sets where any two elements are related via the partial prefix order. As shown in <ref> [Th84b] </ref>, this system is strictly weaker than MSO-logic. Theorem 3.8 allows to obtain decidability results for tree theories, as Theorem 3.1 does for theories of successor (i.e, fragments of arithmetic).
Reference: [Th87] <author> W. Thomas, </author> <title> A concatenation game and the dot-depth hierarchy, in: Computation Theory and Logic (E. </title> <editor> Borger, Ed.), </editor> <booktitle> Lecture Notes in Computer Science 270, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1987, </address> <pages> pp. 415-426. </pages>
Reference-contexts: It can be shown that the V n form a strictly increasing hierarchy; in the logical framework the EF-game may be applied for the hierarchy proof ([Th84a]). Analogous results can be proved for the closely related "dot-depth hierarchy" ([Th82a], <ref> [Th87] </ref>). A still finer classification, distinguishing formulas not only by the number of quantifier alternations but also by the lengths of quantifier blocks, is studied in [BS95].
Reference: [Th90] <author> W. Thomas, </author> <title> Automata on infinite objects, </title> <booktitle> in: Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B (J. v. Leeuwen, Ed.), </editor> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam 1990, </address> <pages> pp. 135-191. </pages>
Reference-contexts: Thus, some complementary material to the related survey paper <ref> [Th90] </ref> is given. On the other hand, only short remarks will be made on the neighbour subjects mentioned above, for which the reader can refer to the cited monographs. 2 Models and Formulas Let us start with a simple example to explain the description of formal languages by logical formulas. <p> In this section, only some central logical aspects of !-automata are reviewed. More information can be found in the chapter on !-languages in this Handbook or the surveys [HR86], [Sta87], <ref> [Th90] </ref>, [TL94]. 5.1 !-Automata While the acceptance condition of automata over finite words is rather canonical, there are many possibilities of defining acceptance of infinite words. An acceptance condition restricts the occurrences of states in a run under consideration. <p> Rabin used a converse approach in [Rab72]; he gave a direct proof of the Basis Theorem (for tree automata with Rabin acceptance condition) and used the existence of regular trees to show that finite-state winning strategies exist in games over finite graphs (see e.g. <ref> [Th90] </ref>). In [EJ88] (see also [Em96]) it is proved that the non-emptiness problem for Rabin tree automata with m states and n accepting pairs is solvable in time O ((mn) 3n ). <p> Many modal and temporal logics have been proved decidable along this line; examples are the modal -calculus and the computation tree logic CTL fl (see e.g. <ref> [Th90] </ref> or [EJ88] for a more detailed explanation and further references, and [JW95] for a recent automata theoretic study of the modal -calculus).
Reference: [Th91] <author> W. Thomas, </author> <title> On logics, tilings, and automata, in: Automata, Languages, </title> <editor> and Programming (J. Leach et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 510 , Springer-Verlag, </booktitle> <address> Berlin 1991, </address> <pages> pp. 441-453. </pages>
Reference-contexts: Since locally threshold testable languages are recognized by finite automata, so are their projections (using nondeterminism). In <ref> [Th91] </ref> this approach is considered over graphs of bounded degree and taken as a starting point to introduce finite-state graph acceptors.
Reference: [Th95] <author> W. Thomas, </author> <title> On the synthesis of strategies in infinite games, </title> <editor> in: STACS'95 (E.W. Mayr, C. Puech, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 900, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1995, </address> <pages> pp. 1-13. </pages>
Reference-contexts: In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi [Bu77], [Bu83] and Gurevich and Harrington [GH82], and uses more recent work of [EJ91], [Mst91a], [McN93], <ref> [Th95] </ref>, and [Zie95]. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees. <p> Thus B accepts precisely those trees which A does not accept, as was to be shown. 2 It remains to verify the Determinacy Theorem. We refer to the abstract setting of countable game graphs, using terminology and ideas from [GH82], [McN93], <ref> [Th95] </ref>, [Zie95]. The players are now named 0 and 1 (instead of Automaton and Pathfinder). <p> Thus we used here a more standard graph theoretic presentation in the style of [McN93], and owing a lot to Zielonka's work [Zie95]. In the exposition above, the problem of introducing memory is settled in advance (following <ref> [Th95] </ref>): the reduction of Muller tree automata to Rabin chain tree automata of Theorem 6.5, which expands the state space by "order-vectors" (or "later appearance records"), may be viewed as supplying sufficient memory in the game graphs. Relative to these expanded game graphs the simple construction of memoryless strategies suffices. <p> The use of the Rabin chain winning condition allows a simpler construction, by an induction on the size of the game graphs (see [McN93, Sect. 6], <ref> [Th95] </ref>). Theorem 6.16 provides a solution to "Church's Problem" [Chu63], which asked for an automatic synthesis of reactive finite-state programs from automaton specifications (or from MSO-specifications, invoking their translation into automata).
Reference: [TL94] <author> W. Thomas, H. Lescow, </author> <title> Logical specifications of infinite computations, in: A Decade of Concurrency (J.W. </title> <editor> de Bakker et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 803, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1994, </address> <pages> pp. 583-621. </pages>
Reference-contexts: In this section, only some central logical aspects of !-automata are reviewed. More information can be found in the chapter on !-languages in this Handbook or the surveys [HR86], [Sta87], [Th90], <ref> [TL94] </ref>. 5.1 !-Automata While the acceptance condition of automata over finite words is rather canonical, there are many possibilities of defining acceptance of infinite words. An acceptance condition restricts the occurrences of states in a run under consideration. <p> Proposition 5.11 can be interpreted also in topological terms, referring to the Cantor topology on the space of all !-words over a given alphabet (see the chapter on !-languages of this Handbook, [Mos80], or <ref> [TL94] </ref> for definitions). While recognition of an !-language L by a nondeterministic Buchi automaton shows that L is "projective", the recognition by a deterministic Muller or Ra-bin automaton puts L into the boolean closure of the second level of the Borel hierarchy. <p> Niwinski [Niw88] proved that this hierarchy is infinite, sharpening considerably the separation of Buchi and Rabin recognizability as explained above in Example 6.3. For a more detailed synopsis of the classification of Rabin recognizable tree languages and for further references we refer the reader to the concluding section of <ref> [TL94] </ref>. The connections to fixed point logics constitute an own fascinating chapter of definability theory and are developed by Arnold and Niwinski in [AN92], [Niw96]. Let us turn to decidability results for monadic second-order theories.
Reference: [TW68] <author> J.W. Thatcher, J.B. Wright, </author> <title> Generalized finite automata with an application to a decision problem of second order logic, Math. </title> <booktitle> Syst. Theory 2 (1968), </booktitle> <pages> 57-82. </pages>
Reference-contexts: The classical subset construction works without essential change also for tree automata of this form, which shows that over trees the nondeterministic and the deterministic automaton model (in frontier-to-root mode) are equivalent. So the method of Theorem 3.1 can be applied again: Theorem 3.8 (Thatcher and Wright <ref> [TW68] </ref>, Doner [Don70]) A set of finite trees is recognizable by a finite tree automaton iff it is MSO-definable. <p> As shown in [Th84b], this system is strictly weaker than MSO-logic. Theorem 3.8 allows to obtain decidability results for tree theories, as Theorem 3.1 does for theories of successor (i.e, fragments of arithmetic). In <ref> [TW68] </ref> and [Don70], the weak monadic theory of the binary infinite tree was shown to be decidable, using the decidability of the emptiness problem for tree automata. Dauchet and Tison [DT90] applied tree automata in the spirit of the decidabil-ity proof for Presburger arithmetic (as discussed in the previous section).
Reference: [Var96] <author> M.Y. Vardi, </author> <title> An automata-theoretic approach to linear temporal logic, in: Logics for Concurrency: Structure versus Automata (F. Moller, </title> <editor> G. Birtwistle, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 1043, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1996, </address> <pages> pp. 238-266. </pages>
Reference-contexts: For more details and for applications in practical verification tasks, the reader should consult specific surveys and monographs such as [Em90], [McM93], [CGL94], [Kur94], [Em96], <ref> [Var96] </ref>. In practice, the verification of nonterminating systems requires to check more complex computation properties than simply a correct order of events or states in time, as expressible in PTL or MSO-logic. Often, the specification of a program involves also conditions on admissible time intervals or durations of states.
Reference: [VW94] <author> M.Y. Vardi, P. Wolper, </author> <title> Reasoning about infinite computations, </title> <booktitle> Information and Computation 115 (1994), </booktitle> <pages> 1-37. </pages>
Reference-contexts: Some book-keeping is necessary for this, which means that auxiliary truth-value components have to be added (however not more than there are subformulas). Altogether, the following result is obtained: Theorem 5.15 (cf. [LPZ85], <ref> [VW94] </ref>) PTL-formulas of length n can be translated effectively into equivalent Buchi automata with 2 O (n) states (and in time 2 O (n) ); consequently, the satisfiability problem for PTL is solvable in exponential time.
Reference: [Wag79] <author> K.W. Wagner, </author> <title> On !-regular sets, </title> <journal> Inform. Contr. </journal> <volume> 43 (1979), </volume> <pages> 123-177. </pages>
Reference-contexts: This theory was initiated by Landweber [Lan69], continued by Staiger and Wagner [SW74], and culminated in a deep structure theory of !-automata by Wagner <ref> [Wag79] </ref>.
Reference: [Wal96] <author> I. Walukiewicz, </author> <title> Monadic second order logic on tree-like structures, </title> <editor> in: STACS'96 (C. Puech, R. Reischuk, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 1046, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1996, </address> <pages> pp. 401-414. 71 </pages>
Reference-contexts: Definitions of winning strategies in fixed point calculi are presented in [EJ91] and <ref> [Wal96] </ref>. Fixed point expressions allow very compact representations of the desired vertex sets from where player 0, respectively player 1 wins, but are (as yet) found difficult to read by nonspecialists. <p> In unpublished work of Muchnik (see [Sem84]), in [Cou95] and (for the general form) in <ref> [Wal96] </ref> it is shown how to translate a sentence ' of the monadic second-order language of M + into a sen tence ' of the language of the original structure M such that M + j= ' iff M j= '. <p> This yields the following powerful transfer theorem for decidability of theories: Theorem 6.21 (Muchnik, cf. <ref> [Wal96] </ref>) If the monadic second-order theory of M is decidable, so is the monadic second-order theory of M + . A different kind of generalization of the Rabin Tree Theorem is concerned with the monadic second-order theory of infinite graphs which are "regular modifications of trees".
Reference: [Wil93] <author> Th. Wilke, </author> <title> Locally threshold testable languages of infinite words, </title> <note> in: STACS '93 (P. </note> <editor> Enjalbert, A. Finkel, K.W. Wagner, Eds.), </editor> <booktitle> Lecture Notes in Computer Science 665, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1993, </address> <pages> pp. 607-616. </pages>
Reference-contexts: As for finite words, the finitely locally threshold testable !-languages coincide with those definable in FO [S]-logic, the first-order logic of successor. Wilke showed in <ref> [Wil93] </ref> that an !-language is finitely locally threshold testable iff it is both locally threshold testable and Staiger-Wagner recognizable.
Reference: [Wil94] <author> Th. Wilke, </author> <title> Specifying timed state sequences in powerful decidable logics and timed automata, in: Formal Techniques in Real Time and Fault Tolerant Systems (H. </title> <editor> Langmaack et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 863, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1994, </address> <pages> pp. 694-715. </pages>
Reference-contexts: A timed word is an !-sequence of letters ("states") together with a sequence of strictly increasing non-negative real numbers, such that the i-th number indicates the beginning of the lifetime of the i-th state. In this framework, a natural extension of Buchi's Theorem is presented by Wilke in <ref> [Wil94] </ref>; it offers a logic in which time bounds given by natural numbers k are expressible, e.g. statements of the type "there is a time instance &lt; x belonging to a set X such that the time interval from the greatest such instance in X up to x is bounded by
Reference: [WY95] <author> Th. Wilke, H. Yoo, </author> <title> Computing the Wadge degree, the Lifschitz degree, and the Rabin index of a regular language of infinite words in polynomial time, </title> <editor> in: TAPSOFT'95 (P.D. Mosses et al., Eds.), </editor> <booktitle> Lecture Notes in Computer Science 915, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1995, </address> <pages> 288-302. </pages>
Reference-contexts: As a consequence of this theory, the Rabin index of a regular !-language L is effectively computable, which is the minimal m such that a disjunction of length m as above in Proposition 5.11 defines L. Efficient procedures to determine the Rabin index are developed in <ref> [WY95] </ref> and [KPB95]. If in Proposition 5.11 we replace the quantifiers 9x8y (x &lt; y ! : : : ) by 8y : : : and 8x9y (x &lt; y ^ : : : ) by 9y : : : , then formulas arise which characterize the Staiger-Wagner-recognizable !-languages.
Reference: [YY90] <author> A. Yakhnis, V. Yakhnis, </author> <title> Extension of Gurevich-Harrington's restricted determinacy theorem: A criterion for the winning player and an explicit class of winning strategies, </title> <journal> Ann. Pure Appl. Logic 48 (1990), </journal> <pages> 277-279. </pages>
Reference-contexts: In these cases, the winning strategy of at least one player needs in general some memory (of uniformly bounded finite size), and the construction of strategies is more involved. References on such strategy constructions are [GH82], further developed in <ref> [YY90] </ref>, [Zei94], as well as [Muc92] and [Kla94]. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp [MS90], [MS95].
Reference: [Zei94] <editor> S. Zeitman, Unforgettable forgetful determinacy, J. </editor> <booktitle> Logic Computation 4 (1994), </booktitle> <pages> 273-283. </pages>
Reference-contexts: In these cases, the winning strategy of at least one player needs in general some memory (of uniformly bounded finite size), and the construction of strategies is more involved. References on such strategy constructions are [GH82], further developed in [YY90], <ref> [Zei94] </ref>, as well as [Muc92] and [Kla94]. In [Kla94] essentially optimal complexity bounds for complementation of (Streett-) tree automata are given. An approach using alternating tree automata was developed by Muller and Schupp [MS90], [MS95].
Reference: [Zie87] <author> W. Zielonka, </author> <title> Notes on finite asynchronous automata, </title> <journal> RAIRO Inform. Theor. Appl. </journal> <volume> 21 (1987), </volume> <pages> 99-135. </pages>
Reference-contexts: On the other hand, it is nontrivial to set up a model of finite automaton which works in accordance with the idea of dependency and independency inherent in the definition of traces over an alphabet (A; D). Zielonka suggested in <ref> [Zie87] </ref> the model of asynchronous finite automaton.
Reference: [Zie95] <author> W. Zielonka, </author> <title> Infinite games on finitely coloured graphs with applications to automata on infinite trees, </title> <type> Rep. 1091-95, </type> <institution> LaBRI, Univ. de Bordeaux, </institution> <note> to appear in Theor. Comput. Sci.. 72 </note>
Reference-contexts: In the first two parts of this section we give a fairly self-contained proof, which follows a 43 game theoretical approach suggested by Buchi [Bu77], [Bu83] and Gurevich and Harrington [GH82], and uses more recent work of [EJ91], [Mst91a], [McN93], [Th95], and <ref> [Zie95] </ref>. The last section presents some logical applications. 6.1 Automata on Infinite Trees We shall consider finite tree automata working "top-down" on infinite input trees. <p> Thus B accepts precisely those trees which A does not accept, as was to be shown. 2 It remains to verify the Determinacy Theorem. We refer to the abstract setting of countable game graphs, using terminology and ideas from [GH82], [McN93], [Th95], <ref> [Zie95] </ref>. The players are now named 0 and 1 (instead of Automaton and Pathfinder). <p> a player i, the attractor set Attr i (G; U ) is the set of all vertices from where player i can force a visit to some vertex of U in finitely many steps. 51 (The suggestive terminology of "attractor sets" and "traps" as used below is due to Zielonka <ref> [Zie95] </ref>.) The following easy lemma shows how to form an attractor set and how to build a memoryless strategy on it which enforces a visit to U ; we state it for player 0 (the definition for player 1 is dual). <p> Thus we used here a more standard graph theoretic presentation in the style of [McN93], and owing a lot to Zielonka's work <ref> [Zie95] </ref>.
References-found: 138

