URL: file://ftp.cis.ohio-state.edu/pub/hpce/tensor/Papers/JISE93-multi.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~chh/Publication/tensor-papers.html
Root-URL: 
Title: An Algebraic Theory for Modeling Multistage Interconnection Networks  
Author: S. D. Kaushik, S. Sharma, C.-H. Huang 
Keyword: Tensor product, parallel architecture, multistage interconnection network, partitionability, topological equivalence, algorithm mapping.  
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: We use an algebraic theory based on tensor products to model multistage interconnection networks. This algebraic theory has been used for designing and implementing block recursive numerical algorithms on shared-memory vector multiprocessors. In this paper, we focus on the modeling of multistage interconnection networks. The tensor product representations of the baseline network, the reverse baseline network, the indirect binary n-cube network, the generalized cube network, the omega network, and the flip network are given. We present the use of this theory for specifying and verifying network properties such as network partitioning and topological equivalence. Algorithm mapping using tensor product formulation is demonstrated by mapping the matrix transposition algorithm onto multistage interconnection networks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Agrawal. </author> <title> Graph theoretical analysis and design of multistage interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(7):637-648, </volume> <year> 1983. </year>
Reference-contexts: Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks [26, 27, 28]. Agrawal <ref> [1] </ref> uses a graph theoretic approach to model the properties of networks. Pradhan and Kodandapani [23] use bit strings to represent the permutations performed by single and multistage interconnection networks to partition a class of networks.
Reference: [2] <author> K. E. Batcher. </author> <title> The flip network in STARAN. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages 65-71, </pages> <year> 1976. </year>
Reference: [3] <author> K. E. Batcher. </author> <title> Design of a massively parallel processor. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(9):836-844, </volume> <year> 1980. </year>
Reference: [4] <author> K. E. Batcher. </author> <title> Bit serial parallel processing systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(5):377-384, </volume> <year> 1982. </year>
Reference: [5] <author> V. E. </author> <title> Benes. Proving the rearrangeability of connecting networks by group calculations. </title> <journal> The Bell System Technical Journal, </journal> <volume> 54 </volume> <pages> 421-434, </pages> <year> 1975. </year>
Reference-contexts: Each network has the full access capability, i.e., it can connect any input terminal to any output terminal. Several mathematical models have been used to specify and verify various properties of multistage interconnection networks. Benes <ref> [5, 6, 7] </ref> uses a group theoretic approach to prove properties of the Benes and Clos Network. Lawrie [20] uses a number theoretic approach to prove the permutation capabilities of the omega network.
Reference: [6] <author> V. E. </author> <title> Benes. Towards a group-theoretic proof of the rearrangeability theorem for Clos network. </title> <journal> The Bell System Technical Journal, </journal> <volume> 55 </volume> <pages> 797-805, </pages> <year> 1975. </year>
Reference-contexts: Each network has the full access capability, i.e., it can connect any input terminal to any output terminal. Several mathematical models have been used to specify and verify various properties of multistage interconnection networks. Benes <ref> [5, 6, 7] </ref> uses a group theoretic approach to prove properties of the Benes and Clos Network. Lawrie [20] uses a number theoretic approach to prove the permutation capabilities of the omega network.
Reference: [7] <author> V.E. </author> <title> Benes. Applications of group theory to connecting networks. </title> <journal> The Bell System Technical Journal, </journal> <volume> 54 </volume> <pages> 407-420, </pages> <year> 1975. </year>
Reference-contexts: Each network has the full access capability, i.e., it can connect any input terminal to any output terminal. Several mathematical models have been used to specify and verify various properties of multistage interconnection networks. Benes <ref> [5, 6, 7] </ref> uses a group theoretic approach to prove properties of the Benes and Clos Network. Lawrie [20] uses a number theoretic approach to prove the permutation capabilities of the omega network.
Reference: [8] <author> Marc Davio. </author> <title> Kronecker products and shu*e algebra. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(2):116-125, </volume> <year> 1981. </year>
Reference-contexts: Pradhan and Kodandapani [23] use bit strings to represent the permutations performed by single and multistage interconnection networks to partition a class of networks. It has been proved that the graph and binary representations for a given class of interconnection networks are equivalent to the tensor product representation <ref> [8] </ref>. However, the tensor product representation is more versatile in the ability to represent both algorithms and architectures. In this paper, we use an algebraic theory based on the tensor product notation for representing multistage interconnection networks.
Reference: [9] <author> T. Feng. </author> <title> Data manipulating functions in parallel processors and their implementations. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-23(3):309-318, </volume> <year> 1974. </year>
Reference: [10] <author> T. Feng. </author> <title> A survey of interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(12):12-27, </volume> <year> 1981. </year>
Reference: [11] <author> A. Graham. </author> <title> Kronecker Products and Matrix Calculus: With Applications. </title> <publisher> Ellis Horwood Limited, </publisher> <year> 1981. </year>
Reference-contexts: 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus <ref> [11, 12] </ref>. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms [16, 17, 31] and Strassen's matrix multiplication algorithm [13, 14, 17]. <p> Conclusions are given in Section 8. 2 The Tensor Product Representation In this section, we give an overview of the tensor product notation and the properties which are used in the representation of multistage interconnection networks. For details of this theory, the 2 reader is referred to <ref> [11, 12] </ref>. Definition 2.1 (Tensor Product) Let A and B be two matrices of sizes m fi n and p fi q, respectively.
Reference: [12] <author> R. A. Horn and C. R. Johnson. </author> <title> Topics in Matrix Analysis. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus <ref> [11, 12] </ref>. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms [16, 17, 31] and Strassen's matrix multiplication algorithm [13, 14, 17]. <p> Conclusions are given in Section 8. 2 The Tensor Product Representation In this section, we give an overview of the tensor product notation and the properties which are used in the representation of multistage interconnection networks. For details of this theory, the 2 reader is referred to <ref> [11, 12] </ref>. Definition 2.1 (Tensor Product) Let A and B be two matrices of sizes m fi n and p fi q, respectively.
Reference: [13] <author> C.-H. Huang, J. R. Johnson, and R. W. Johnson. </author> <title> A tensor product formulation of Strassen's matrix multiplication algorithm. </title> <journal> Appl. Math Letters, </journal> <volume> 3(3) </volume> <pages> 67-71, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus [11, 12]. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms [16, 17, 31] and Strassen's matrix multiplication algorithm <ref> [13, 14, 17] </ref>. The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors. It has been proved to be useful for extracting parallel and vector operations and for automatically generating code for complex index computations [14, 15, 17].
Reference: [14] <author> C.-H. Huang, J. R. Johnson, and R. W. Johnson. </author> <title> Generating parallel programs from tensor product formulas: a case study of Strassen's matrix multiplication algorithm. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages 104-108, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus [11, 12]. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms [16, 17, 31] and Strassen's matrix multiplication algorithm <ref> [13, 14, 17] </ref>. The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors. It has been proved to be useful for extracting parallel and vector operations and for automatically generating code for complex index computations [14, 15, 17]. <p> The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors. It has been proved to be useful for extracting parallel and vector operations and for automatically generating code for complex index computations <ref> [14, 15, 17] </ref>. We extend this work to use the tensor product notation for designing and implementing efficient algorithms for non-uniform shared-memory multiprocessors which are connected by multistage interconnection networks.
Reference: [15] <author> J. R. Johnson, C.-H. Huang, and R. W. Johnson. </author> <title> Tensor permutations and block matrix allocation. </title> <booktitle> In Second International Workshop on Array Structures (ATABLE-92), </booktitle> <year> 1992. </year> <note> To appear. </note>
Reference-contexts: The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors. It has been proved to be useful for extracting parallel and vector operations and for automatically generating code for complex index computations <ref> [14, 15, 17] </ref>. We extend this work to use the tensor product notation for designing and implementing efficient algorithms for non-uniform shared-memory multiprocessors which are connected by multistage interconnection networks.
Reference: [16] <author> J. R. Johnson, R. W. Johnson, D. Rodriguez, and R. Tolimieri. </author> <title> A methodology for designing, modifying and implementing Fourier transform algorithms on various architectures. </title> <journal> Circuits Systems Signal Process, </journal> <volume> 9(4) </volume> <pages> 450-500, </pages> <year> 1990. </year> <month> 23 </month>
Reference-contexts: 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus [11, 12]. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms <ref> [16, 17, 31] </ref> and Strassen's matrix multiplication algorithm [13, 14, 17]. The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors.
Reference: [17] <author> R. W. Johnson, C.-H. Huang, and J. R. Johnson. </author> <title> Multilinear algebra and parallel program-ming. </title> <journal> Journal of Supercomputing, </journal> <volume> 5 </volume> <pages> 189-218, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus [11, 12]. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms <ref> [16, 17, 31] </ref> and Strassen's matrix multiplication algorithm [13, 14, 17]. The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors. <p> 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus [11, 12]. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms [16, 17, 31] and Strassen's matrix multiplication algorithm <ref> [13, 14, 17] </ref>. The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors. It has been proved to be useful for extracting parallel and vector operations and for automatically generating code for complex index computations [14, 15, 17]. <p> The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors. It has been proved to be useful for extracting parallel and vector operations and for automatically generating code for complex index computations <ref> [14, 15, 17] </ref>. We extend this work to use the tensor product notation for designing and implementing efficient algorithms for non-uniform shared-memory multiprocessors which are connected by multistage interconnection networks.
Reference: [18] <author> S. D. Kaushik, S. Sharma, C.-H. Huang, J. R. Johnson, R. W. Johnson, and P. Sadayappan. </author> <title> An algebraic theory for modelling direct interconnection networks. </title> <booktitle> In Supercomputing '92, </booktitle> <pages> pages 488-497, </pages> <year> 1992. </year>
Reference-contexts: We have presented an example of map ping matrix transposition onto multistage networks. Strategies for automatic program generation for a particular architecture using the tensor product formulation are currently under study. Tensor product representations of direct networks such as the ring, the mesh, the hypercube, have also been developed <ref> [18] </ref> and the process of mapping algorithms onto these networks is currently under investigation. Acknowledgments We would like express our appreciation to J. R. Johnson, R. W. Johnson, and P. Sadayappan for sharing their ideas concerning properties of tensor products and multistage interconnection networks. 22
Reference: [19] <author> T. Lang. </author> <title> Interconnections between processors and memory modules using shu*e-exchange networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-25(5):496-503, </volume> <year> 1976. </year>
Reference-contexts: ni2 L 2 i+2 2 i I 2 3 2 n1 2 0 Y D N I 2 ni2 L 2 i+1 2 i+1 3 2 n1 2 n1 Y D N I 2 j1 L 2 nj 2 nj 3 2 n1 4.5 The Omega Network The omega network <ref> [19, 20, 21, 30] </ref>, also known as the shu*e exchange network, is represented by the permutation N j which maps line b n1 b n2 b 0 at the output of stage j 1, to line b n2 b 0 b n1 at the input of stage j.
Reference: [20] <author> D. K. Lawrie. </author> <title> Access and alignment of data in an array processor. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-24(12):1145-1155, </volume> <year> 1975. </year>
Reference-contexts: Several mathematical models have been used to specify and verify various properties of multistage interconnection networks. Benes [5, 6, 7] uses a group theoretic approach to prove properties of the Benes and Clos Network. Lawrie <ref> [20] </ref> uses a number theoretic approach to prove the permutation capabilities of the omega network. <p> ni2 L 2 i+2 2 i I 2 3 2 n1 2 0 Y D N I 2 ni2 L 2 i+1 2 i+1 3 2 n1 2 n1 Y D N I 2 j1 L 2 nj 2 nj 3 2 n1 4.5 The Omega Network The omega network <ref> [19, 20, 21, 30] </ref>, also known as the shu*e exchange network, is represented by the permutation N j which maps line b n1 b n2 b 0 at the output of stage j 1, to line b n2 b 0 b n1 at the input of stage j.
Reference: [21] <author> D. S. Parker. </author> <title> Notes on shu*e/exchange-type switching networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(3):213-222, </volume> <year> 1980. </year>
Reference-contexts: ni2 L 2 i+2 2 i I 2 3 2 n1 2 0 Y D N I 2 ni2 L 2 i+1 2 i+1 3 2 n1 2 n1 Y D N I 2 j1 L 2 nj 2 nj 3 2 n1 4.5 The Omega Network The omega network <ref> [19, 20, 21, 30] </ref>, also known as the shu*e exchange network, is represented by the permutation N j which maps line b n1 b n2 b 0 at the output of stage j 1, to line b n2 b 0 b n1 at the input of stage j.
Reference: [22] <author> M. C. Pease III. </author> <title> The indirect binary n-cube microprocessor array. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-26(5):458-473, </volume> <year> 1977. </year>
Reference-contexts: Noting that 1 we have 1 0 Y D N I 2 i L 2 ni n1 Y D N I 2 nj1 L 2 j+1 4.3 The Indirect Binary n-Cube Network The indirect binary n-cube network <ref> [22] </ref> can be represented by the permutation fi N j which maps the line b n1 b j+1 b j b j1 b 1 b 0 at the output of stage j 1 to the line b n1 b j+1 b 0 b j1 b 1 b j at the input
Reference: [23] <author> D. K. Pradhan and K. L. Kodandapani. </author> <title> A uniform representation of single- and multistage interconnection networks used in SIMD machines. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(9):777-791, </volume> <year> 1980. </year>
Reference-contexts: Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks [26, 27, 28]. Agrawal [1] uses a graph theoretic approach to model the properties of networks. Pradhan and Kodandapani <ref> [23] </ref> use bit strings to represent the permutations performed by single and multistage interconnection networks to partition a class of networks. It has been proved that the graph and binary representations for a given class of interconnection networks are equivalent to the tensor product representation [8].
Reference: [24] <author> H. J. Siegel. </author> <title> Interconnection networks for SIMD machines. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 57-65, </pages> <year> 1979. </year>
Reference: [25] <author> H. J. Siegel. </author> <title> A model of SIMD machines and a comparison of various interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(12):907-917, </volume> <year> 1979. </year>
Reference-contexts: Operator A can be expressed in terms of the permutations performed by the switching stages and the permutation of lines between the stages. These have been referred to as the control structure and the topology of multistage interconnection networks <ref> [25] </ref>.
Reference: [26] <author> H. J. Siegel. </author> <title> The theory underlying the partitioning of permutation networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(9):791-800, </volume> <year> 1980. </year>
Reference-contexts: Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks <ref> [26, 27, 28] </ref>. Agrawal [1] uses a graph theoretic approach to model the properties of networks. Pradhan and Kodandapani [23] use bit strings to represent the permutations performed by single and multistage interconnection networks to partition a class of networks. <p> Thus, it is necessary to be able to partition a network into subnetworks <ref> [26] </ref>. Each subnetwork should have all the interconnection capabilities of a complete network of its size and should be able to function independently.
Reference: [27] <author> H. J. Siegel. </author> <title> Using the multistage cube network topology in parallel computers. </title> <booktitle> Proceedings of IEEE, </booktitle> <volume> 77(12) </volume> <pages> 1932-1953, </pages> <year> 1989. </year>
Reference-contexts: Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks <ref> [26, 27, 28] </ref>. Agrawal [1] uses a graph theoretic approach to model the properties of networks. Pradhan and Kodandapani [23] use bit strings to represent the permutations performed by single and multistage interconnection networks to partition a class of networks. <p> 2 L 2 i+2 # An indirect binary n-cube network of size N = 8 is as shown in Fig. 3 and is represented as fi 8 = L 8 2 I 2 L 8 2 I 4 D 2 : 4.4 The Generalized Cube Network The generalized cube network <ref> [27, 28, 29] </ref> can be represented by the permutation G N j which maps line b n1 b nj+1 b nj b nj1 b 0 at the output of stage j1 to line b n1 b nj+1 b 0 b nj1 b nj at the input of stage j.
Reference: [28] <author> H. J. Siegel. </author> <title> Interconnection Networks for Large Scale Parallel Processing : Theory and Case Studies. </title> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks <ref> [26, 27, 28] </ref>. Agrawal [1] uses a graph theoretic approach to model the properties of networks. Pradhan and Kodandapani [23] use bit strings to represent the permutations performed by single and multistage interconnection networks to partition a class of networks. <p> 2 L 2 i+2 # An indirect binary n-cube network of size N = 8 is as shown in Fig. 3 and is represented as fi 8 = L 8 2 I 2 L 8 2 I 4 D 2 : 4.4 The Generalized Cube Network The generalized cube network <ref> [27, 28, 29] </ref> can be represented by the permutation G N j which maps line b n1 b nj+1 b nj b nj1 b 0 at the output of stage j1 to line b n1 b nj+1 b 0 b nj1 b nj at the input of stage j.
Reference: [29] <author> H. J. Siegel, W. T. Hsu, and M. Jeng. </author> <title> An introduction to the multistage cube family of interconnection networks. </title> <journal> Journal of Supercomputing, </journal> <volume> 1 </volume> <pages> 13-42, </pages> <year> 1987. </year>
Reference-contexts: 2 L 2 i+2 # An indirect binary n-cube network of size N = 8 is as shown in Fig. 3 and is represented as fi 8 = L 8 2 I 2 L 8 2 I 4 D 2 : 4.4 The Generalized Cube Network The generalized cube network <ref> [27, 28, 29] </ref> can be represented by the permutation G N j which maps line b n1 b nj+1 b nj b nj1 b 0 at the output of stage j1 to line b n1 b nj+1 b 0 b nj1 b nj at the input of stage j.
Reference: [30] <author> H. S. Stone. </author> <title> Parallel processing with the perfect shu*e. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20(2):153-161, </volume> <year> 1971. </year>
Reference-contexts: ni2 L 2 i+2 2 i I 2 3 2 n1 2 0 Y D N I 2 ni2 L 2 i+1 2 i+1 3 2 n1 2 n1 Y D N I 2 j1 L 2 nj 2 nj 3 2 n1 4.5 The Omega Network The omega network <ref> [19, 20, 21, 30] </ref>, also known as the shu*e exchange network, is represented by the permutation N j which maps line b n1 b n2 b 0 at the output of stage j 1, to line b n2 b 0 b n1 at the input of stage j.
Reference: [31] <author> C. Van Loan. </author> <title> Computational Framework for the Fast Fourier Transform. </title> <publisher> SIAM, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Tensor products, also known as Kronecker products, have been previously used for matrix calculus [11, 12]. This notation has also been used for the design and implementation of block recursive numerical algorithms such as fast Fourier transforms <ref> [16, 17, 31] </ref> and Strassen's matrix multiplication algorithm [13, 14, 17]. The tensor product formulation of these algorithms has been used to generate efficient parallel and vector programs for shared-memory multiprocessors.
Reference: [32] <author> C.-L. Wu and T. Feng. </author> <title> On a class of multistage interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(8):694-702, </volume> <year> 1980. </year>
Reference-contexts: Wu and Feng use the binary representation of the input lines and permutations on these representations to prove topological and functional equivalence of a class of multistage interconnection networks and the universality of the omega network <ref> [32, 33, 34] </ref>. Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks [26, 27, 28]. Agrawal [1] uses a graph theoretic approach to model the properties of networks. <p> Each line can be represented by a binary string of length n <ref> [32, 33] </ref>. The topology of a network is represented by the permutations performed between the switching stages of the network. <p> Topological equivalence has been a means of establishing equivalence between two networks. Topological equivalence of two networks implies that one network can be obtained from the other by permuting switches within a switching stage. Wu and Feng have proved topological equivalence of a class of a multistage interconnection networks <ref> [32] </ref>. To specify topological equivalence, every line in the network is assigned a physical name and a logical name. The topological equivalence between two networks is shown by renumbering the lines at the input and the output of the switching stages in one of the networks.
Reference: [33] <author> C.-L. Wu and T. Feng. </author> <title> The reverse exchange interconnection network. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(9):801-810, </volume> <year> 1980. </year>
Reference-contexts: Wu and Feng use the binary representation of the input lines and permutations on these representations to prove topological and functional equivalence of a class of multistage interconnection networks and the universality of the omega network <ref> [32, 33, 34] </ref>. Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks [26, 27, 28]. Agrawal [1] uses a graph theoretic approach to model the properties of networks. <p> Each line can be represented by a binary string of length n <ref> [32, 33] </ref>. The topology of a network is represented by the permutations performed between the switching stages of the network.
Reference: [34] <author> C.-L. Wu and T. Feng. </author> <title> The universality of the shu*e-exchange network. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(5):324-332, </volume> <year> 1981. </year> <month> 24 </month>
Reference-contexts: Wu and Feng use the binary representation of the input lines and permutations on these representations to prove topological and functional equivalence of a class of multistage interconnection networks and the universality of the omega network <ref> [32, 33, 34] </ref>. Siegel uses permutation cycles to explore the ability to partition various multistage interconnection networks [26, 27, 28]. Agrawal [1] uses a graph theoretic approach to model the properties of networks.
References-found: 34

