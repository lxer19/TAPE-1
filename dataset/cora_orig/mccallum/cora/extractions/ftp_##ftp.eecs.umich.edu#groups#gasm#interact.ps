URL: ftp://ftp.eecs.umich.edu/groups/gasm/interact.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: schfeld@darmstadt.gmd.de  
Title: Interacting  
Address: Dolivostr. 15, D-64293 Darmstadt  
Affiliation: GMD Forschungszentrum Informationstechnik GmbH IPSI MOBILE  
Abstract: State Machines Abstract. Abstract State Machines are used to clarify the role of time in computer interaction. The framework of Abstract State Machines is extended by a construct allowing to specify simultaneous actions as known from distributed system theory e.g. Petri nets. Its expressive power is demonstrated by considering partially ordered runs and by some examples from communication. Using the well-known railroad crossing problem, its role in system development by stepwise refinement is shown. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Gurevich, </author> <title> The 1997 ASM Guide, </title> <address> http://www.eecs.umich.edu/ealgebras/Guide97/index.html </address>
Reference-contexts: Finally, we compile by some open questions. To read this paper, some basic knowledge of communication techniques is helpful. The reader may use [6] as a reference. 2 Distributed Abstract State Machines We assume knowledge of the basic notions for sequential ASMs as defined in <ref> [1] </ref>: vocabulary state update set sequel rules program deterministic denotation Since we do not need to import elements, we can simplify the notion of an action. It simply is an update set (instead of an equivalence class of update sets). <p> As far as possible, we adopt the anthropomorphic standpoint and think of an agent running the program, performing a sequence of actions. Since distributed ASMs are not yet (at least at the time when this paper was written) fully covered by <ref> [1] </ref>, we partly follow its predecessor [8] and work out some definitions. 2.1 Basic Definitions Let be given a finite set P = fP i ji 2 Ig of ASM programs, called modules, with function symbols from a vocabulary . We call P a distributed program over .
Reference: 2. <author> D. Beauquier, A. Slissenko, </author> <title> On Semantics of Algorithms with Continuous Time, </title> <institution> Universite Paris 12, Informatique 97-15, </institution> <year> 1997 </year>
Reference-contexts: soon as the behavior changes, it will not be too difficult to single out the offending rule (s). 5.1 Railroad Crossing Problem Let us consider the real-time control problem from [7] and elaborate some steps of phase 1 as indicated above. (For phase 2, one may proceed as described in <ref> [2] </ref>.) A railroad crossing is a real-time system which, by closing its gates, prevents cars from crossing the tracks when one or more trains are coming. For automatic operation, each track is equipped with one sensor before the crossing and one after the crossing.
Reference: 3. <author> R. Milner, </author> <title> A Calculus of Communicating Systems, </title> <booktitle> Lecture Notes in Computer Science 92, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980 </year> <month> 4. </month> <note> http://www.darmstadt.gmd.de/mobile/Kommunikation/COSMOS/Prolog.html </note>
Reference-contexts: One might hope that theoretical computer science offers an abstract view of concurrency hiding these language specifics. There are many theoretical approaches to concurrency, see e.g. [10]. As important examples, we would like to mention Petri Nets [12], Calculus of Communicating Systems <ref> [3] </ref> and Communicating Sequential Processes [5]. Common to all three is that joint state transitions are the means of cooperation: Sending a message and receiving it are two facets of one and the same action. This results in very elegant formulations of basic interaction examples.
Reference: 5. <author> C.A.R. Hoare, </author> <title> Communicating Sequential Processes, </title> <booktitle> Communications of the ACM 21 (1978), </booktitle> <pages> 666-677 </pages>
Reference-contexts: One might hope that theoretical computer science offers an abstract view of concurrency hiding these language specifics. There are many theoretical approaches to concurrency, see e.g. [10]. As important examples, we would like to mention Petri Nets [12], Calculus of Communicating Systems [3] and Communicating Sequential Processes <ref> [5] </ref>. Common to all three is that joint state transitions are the means of cooperation: Sending a message and receiving it are two facets of one and the same action. This results in very elegant formulations of basic interaction examples.
Reference: 6. <author> D.E. Comer, </author> <title> Computer Networks and Internets, </title> <publisher> Prentice-Hall, </publisher> <year> 1997 </year>
Reference-contexts: Then, the well-known railroad crossing problem is used to demonstrate the role of the construct in systems engineering. Finally, we compile by some open questions. To read this paper, some basic knowledge of communication techniques is helpful. The reader may use <ref> [6] </ref> as a reference. 2 Distributed Abstract State Machines We assume knowledge of the basic notions for sequential ASMs as defined in [1]: vocabulary state update set sequel rules program deterministic denotation Since we do not need to import elements, we can simplify the notion of an action.
Reference: 7. <author> Y. Gurevich, J.K. Higgins, </author> <title> The Railroad Crossing Problem: An Experiment with Instantaneous Actions and Immediate Reactions, </title> <editor> in: H. Kleine Buning (Ed.), </editor> <booktitle> Computer Science Logic, Selected papers from CSL'95, Springer Lecture Notes in Computer Science 1092 (1996), </booktitle> <pages> 266-290. </pages>
Reference-contexts: P i contributes to the transition leading from S m to S m+1 ). The run is fair if all agents act fair. Another notion restricting non-determinism can be derived from <ref> [7] </ref> where real-time control systems are specified: Definition: The agent running module P i (i 2 I) acts instantaneously in the run if for any n 0 such that Den (P i ; S n ) 6= ;, i 2 T n holds. <p> As soon as the behavior changes, it will not be too difficult to single out the offending rule (s). 5.1 Railroad Crossing Problem Let us consider the real-time control problem from <ref> [7] </ref> and elaborate some steps of phase 1 as indicated above. (For phase 2, one may proceed as described in [2].) A railroad crossing is a real-time system which, by closing its gates, prevents cars from crossing the tracks when one or more trains are coming.
Reference: 8. <author> Y. Gurevich, </author> <title> Evolving Algebras 1993: Lipari Guide, </title> <editor> in: E. Borger (Ed.), </editor> <title> Specification and Validation methods, </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: As far as possible, we adopt the anthropomorphic standpoint and think of an agent running the program, performing a sequence of actions. Since distributed ASMs are not yet (at least at the time when this paper was written) fully covered by [1], we partly follow its predecessor <ref> [8] </ref> and work out some definitions. 2.1 Basic Definitions Let be given a finite set P = fP i ji 2 Ig of ASM programs, called modules, with function symbols from a vocabulary . We call P a distributed program over . <p> This means that several agents may contribute to a move. The choice of T n gives the non-determinism inherent to distributed systems: Any agent is free to make a move or not. We do not need self or names for agents or modules as introduced in <ref> [8] </ref>. Agents are statically assigned to modules. 2.2 Inconsistencies In addition to the well-known 'sequential' inconsistencies within modules, we now may have 'distributed' inconsistencies, e.g. if more than one agent attempts to update one and the same location at the same time with different values. <p> Below, we mostly apply wording 1. Note however that it is essential for distributed system development to abstract from these different points of view. 3.4 Partially Ordered Runs Partially ordered runs are axiomatically introduced in <ref> [8] </ref>. To construct a partially ordered run from an interactive ASM program P = fP i ji 2 Ig, fix a certain initial state S 0 . <p> The causality order is C = f (x 1 ; x 3 ); (x 2 ; x 3 )g. 5 <ref> [8] </ref> only considers the case j (A (x)j = 1. The modification is obvious. It is easy to see that no distributed two-module program has a causality order which is isomorphic to C and in which the largest element is a joined action of the two modules. <p> In the sequel, we shall work out how we can specify that both sender and receiver act in time. Note that the problem also arises when cooperative actions as introduced in <ref> [8] </ref> are used for communication. There, the value to be transmitted is directly copied from SendBuffer to RecvBuffer without the use of an intermediate medium. Since sender and receiver do not have access to the respective buffer, an auxiliary 'team' agent is formed to carry out the transfer.
Reference: 9. <author> L. Lamport, </author> <title> Time, Clock, and the Ordering of Events in a Distributed System, </title> <booktitle> Comm. ACM 21 (1978), </booktitle> <pages> 558-564. </pages>
Reference: 10. <author> L. Lamport, N. Lynch, </author> <title> Distributed Computing: Models and Methods, Ch. 16 in: </title> <editor> J. van Leeuwen (Ed.), </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: This diversity is a strong obstacle to portability. One might hope that theoretical computer science offers an abstract view of concurrency hiding these language specifics. There are many theoretical approaches to concurrency, see e.g. <ref> [10] </ref>. As important examples, we would like to mention Petri Nets [12], Calculus of Communicating Systems [3] and Communicating Sequential Processes [5].
Reference: 11. <author> M. Broy, </author> <title> Informatik. Eine grundlegende Einfuhrung. Teil III. Systemstrukturen und systemnahe Programmierung, </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: 12. <institution> C.A. Petri, Kommunikation mit Automaten. Schriftenreihe des Institutes fur In--strumentelle Mathematik, Bonn, </institution> <year> 1962. </year>
Reference-contexts: This diversity is a strong obstacle to portability. One might hope that theoretical computer science offers an abstract view of concurrency hiding these language specifics. There are many theoretical approaches to concurrency, see e.g. [10]. As important examples, we would like to mention Petri Nets <ref> [12] </ref>, Calculus of Communicating Systems [3] and Communicating Sequential Processes [5]. Common to all three is that joint state transitions are the means of cooperation: Sending a message and receiving it are two facets of one and the same action. This results in very elegant formulations of basic interaction examples.
Reference: 13. <author> P. Wegner, </author> <title> Why Interaction is More Powerful Than Algorithms, </title> <booktitle> Communications of the ACM 40 (1997), </booktitle> <pages> 80-91. </pages>
Reference-contexts: Robin Milner in his Turing award lecture ([14]) and Peter Wegner (<ref> [13] </ref>) shed some light onto this problem. 3 They give strong arguments for the standpoint that the concept of an algorithm does not suffice for an appropriate formulation of concurrency. Cited from [13]: Turing machines cannot handle the passage of time or interactive events that occur during the process of computation. 2 Ada is an exception. 3 I would like to thank Heinz-Dieter Bocker for drawing my attention to these articles. The paper at hand discusses interactions of ASMs.
Reference: 14. <author> R. Milner, </author> <title> Elements of Interaction, </title> <booktitle> Communications of the ACM 36 (1993), </booktitle> <pages> 78-89. </pages>
Reference: 15. <author> W. Schonfeld, </author> <title> Korrekter Entwurf einer sicheren Modellbahnsteuerung, </title> <institution> Institut fur Informatik, Stuttgart, </institution> <year> 1982. </year>
Reference-contexts: If control, after setting gates := close, does not get this indication within a reasonable amount of time, it stops the train by a semaphore. 12 The full integration into operative control (switches etc.) can be carried out along the lines indicated in <ref> [15] </ref>. 11 after extending the definition of 'label' appropriately 12 This is an important safety function in modern railroad systems. 6 Conclusions The above examples show the appropriateness of interacting ASMs for system development in the fields of communication and real-time control.
References-found: 14

