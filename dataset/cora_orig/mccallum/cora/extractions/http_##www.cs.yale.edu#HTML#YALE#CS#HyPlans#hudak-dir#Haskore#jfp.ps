URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/Haskore/jfp.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/Haskore/
Root-URL: http://www.cs.yale.edu
Email: hudak@cs.yale.edu  
Title: Haskore Music Notation An Algebra of Music  
Author: Paul Hudak Tom Makucevich Syam Gadde Bo Whong 
Date: August 24, 1995  
Address: New Haven, CT 06520  
Affiliation: Yale University Department of Computer Science  
Abstract: We have developed a simple algebraic approach to music description and composition called Haskore. In this framework, musical objects consist of primitive notions such as notes and rests, operations to transform musical objects such as transpose and tempo-scaling, and operations to combine musical objects to form more complex ones, such as concurrent and sequential composition. When these simple notions are embedded into a functional language such as Haskell, rather complex musical relationships can be expressed clearly and succinctly. Exploiting the algebraic properties of Haskore, we have furthermore defined a notion of literal performance (devoid of articulation) through which observationally equivalent musical objects can be determined. With this basis many useful properties can be proved, such as commutative, associative, and distributive properties of various operators. An algebra of music thus surfaces. 
Abstract-found: 1
Intro-found: 1
Reference: [AK92] <author> D.P. Anderson and R. Kuivila. </author> <title> Formula: A programming language for expressive computer music. In Denis Baggi, editor, Computer Generated Music. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [Ary94] <author> K. Arya. </author> <title> A functional animation starter-kit. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(1) </volume> <pages> 1-18, </pages> <year> 1994. </year>
Reference-contexts: There we find a structure that is in spirit very similar to ours: most importantly, a clear distinction between object description and interpretation (which in this paper we have been calling musical objects and their performance). A similar structure can be found in Arya's functional animation work <ref> [Ary94] </ref>. There are many interesting avenues to pursue with this research. On the theoretical side, we need a deeper investigation of the algebraic structure of music, and would like to express certain modern theories of music in Haskore.
Reference: [Bal92] <author> M. Balaban. </author> <title> Music structures: Interleaving the temporal and hierarchical aspects of music. </title> <editor> In M. Balaban, K. Ebcioglu, and O. Laske, editors, </editor> <booktitle> Understanding Music With AI, </booktitle> <pages> pages 110-139. </pages> <publisher> AAAI Press, </publisher> <year> 1992. </year>
Reference-contexts: On the other hand, Balaban describes an abstract notion (apparently not yet a programming language) of "music structure," and provides various operators that look similar to ours <ref> [Bal92] </ref>. In addition, she describes an operation called flatten that resembles our literal interpretation perform. It would be interesting to translate her ideas into Haskell; the match would likely be good.
Reference: [Col84] <author> D. Collinge. Moxie: </author> <title> A languge for computer music performance. </title> <booktitle> In Proc. Int'l Computer Music Conference, </booktitle> <pages> pages 217-220. </pages> <publisher> Computer Music Association, </publisher> <year> 1984. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [CR84] <author> P. Cointe and X. Rodet. </author> <title> Formes: an object and time oriented system for music composition and synthesis. </title> <booktitle> In Proceedings of the 1984 ACM Symposium on Lisp and Functional Programmming, </booktitle> <pages> pages 85-95. </pages> <publisher> ACM, </publisher> <year> 1984. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [Dan89] <author> R.B. Dannenberg. </author> <title> The Canon score language. </title> <journal> Computer Music Journal, </journal> <volume> 13(1) </volume> <pages> 47-56, </pages> <year> 1989. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [DFV92] <author> R.B. Dannenberg, C.L. Fraley, and P. Velikonja. </author> <title> A functional language for sound synthesis with behavioral abstraction and lazy evaluation. In Denis Baggi, editor, Computer Generated Music. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here. <p> There are some other related approaches based on variants of Lisp, most notably Dannenberg's Fugue language <ref> [DFV92] </ref>, in which operators similar to ours can be found but where the emphasis is more on instrument synthesis rather than note-oriented composition.
Reference: [For73] <author> A. Forte. </author> <title> The Structure of Atonal Music. </title> <publisher> Yale University Press, </publisher> <address> New Haven, CT, </address> <year> 1973. </year>
Reference-contexts: Many well-known (not just contemporary) ideas in music theory are difficult if not impossible to express in traditional notation. The basic concepts of atonal music theory <ref> [For73] </ref>, for example, are impossible to express without the use of a meta-logic; more preferable would be a common notation that could be used to express musical objects and the inter relationships between them. 4. <p> Thus we define: 5 For example, Forte prescribes normal forms for chords in an atonal setting <ref> [For73] </ref>. 12 A chord is in pitch normal form if the first pitch is zero, and the subsequent pitches are monotonically increasing. One could also represent a chord intervalically; i.e. as a sequence of intervals.
Reference: [HB95] <author> P. Hudak and J. Berger. </author> <title> A model of performance, interaction, </title> <booktitle> and improvisation. In Proceedings of International Computer Music Conference. Int'l Computer Music Association, </booktitle> <year> 1995. </year>
Reference-contexts: On the practical side, the potential of a graphical interface to Haskore is appealing. We are also interested in extending the methodology to sound synthesis. Our primary goal currently, however, is to continue using Haskore as a vehicle for interesting algorithmic composition (for example, see <ref> [HB95] </ref>). 16 A Proof of Axiom 10 We first state a simple lemma (proof omitted): dur (Line (Note p d : ns)) d + dur (Line ns) dur (Line (Rest d : ns)) d + dur (Line ns) With this lemma, the proof of Axiom 10 is as follows: pf x@(s,_,_,t)
Reference: [Hen82] <author> P. Henderson. </author> <title> Functional geometry. </title> <booktitle> In Proceedings of the 1982 ACM Symposium on Lisp and Functional Programmming. ACM, </booktitle> <year> 1982. </year>
Reference-contexts: It would be interesting to translate her ideas into Haskell; the match would likely be good. Perhaps surprisingly, the work that we find most closely related to ours is not about music at all: it is Henderson's functional geometry, a functional language approach to generating computer graphics <ref> [Hen82] </ref>. There we find a structure that is in spirit very similar to ours: most importantly, a clear distinction between object description and interpretation (which in this paper we have been calling musical objects and their performance). A similar structure can be found in Arya's functional animation work [Ary94].
Reference: [HF92] <author> P. Hudak and J. Fasel. </author> <title> A gentle introduction to Haskell. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: Those completely unfamiliar with functional languages are urged to at least read <ref> [HF92] </ref> before continuing. This paper is written assuming good familiarity with functional programming in general and Haskell in particular; a different version is being written that is 3 targeted mainly for musicians.
Reference: [Hin49] <author> P. Hindemith. </author> <title> Elementary Training for Musicians. </title> <publisher> Associated Music Publishers, Inc., </publisher> <address> New York, 2 edition, </address> <year> 1949. </year>
Reference-contexts: rules governing the "default interpretation" of such phrases are somewhat ad hoc: for example, the 3 and 5 notes in the 3-tuple and 5-tuple are to be played in the space of 2 and 4 notes, respectively; but the 7-tuple is intended to be played in the space of 4 <ref> [Hin49] </ref>. To avoid this problem, traditional notation is sometimes generalized to make the implicit "denominator" more explicit, as shown in Figure 1 (b). With this simple generalization we now have much more freedom in expressing more interesting phrases, as shown, for example, in 1.
Reference: [HPJWe92] <editor> P. Hudak, S. Peyton Jones, and P. Wadler (editors). </editor> <title> Report on the Programming Language Haskell, A Non-strict Purely Functional Language (Version 1.2). </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: Our background in the theory, design, and implementation of high-level programming languages, in particular functional languages, has led us to a rather satisfying solution based on the functional language Haskell <ref> [HPJWe92] </ref>. In fact, we did not design a new language at all: our system, which we call Haskore, is essentially a set of program modules written in Haskell that allow the user to express musical ideas in a high-level, higher-order, and extensible manner.
Reference: [HS92] <author> G. Haus and A. Sametti. Scoresynth: </author> <title> A system for the synthesis of music scores based on petri nets and a music algebra. In Denis Baggi, editor, Computer Generated Music. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [IMA90] <institution> Midi 1.0 detailed specification: </institution> <note> Document version 4.1.1, </note> <month> February </month> <year> 1990. </year>
Reference-contexts: Haskore Figure 2 shows the overall structure of our system. We will not provide details of the various translators in this paper; they are reasonably straightforward functional programs for converting from internal abstract datatypes to the file syntax required to play Haskore compositions as conventional midi-files <ref> [IMA90] </ref>, NeXT MusicKit score files [JB91], or Csound score files [Ver86], and to print Haskore compositions in traditional notation using the CMN (Common Music Notation) subsystem.
Reference: [JB91] <author> D. Jaffe and L. Boynton. </author> <title> An overview of the sound and music kits for the NeXT computer. </title> <editor> In S.T. Pope, editor, </editor> <booktitle> The Well-Tempered Object, </booktitle> <pages> pages 107-118. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: We will not provide details of the various translators in this paper; they are reasonably straightforward functional programs for converting from internal abstract datatypes to the file syntax required to play Haskore compositions as conventional midi-files [IMA90], NeXT MusicKit score files <ref> [JB91] </ref>, or Csound score files [Ver86], and to print Haskore compositions in traditional notation using the CMN (Common Music Notation) subsystem.
Reference: [OFLB94] <author> O. Orlarey, D. Fober, S. Letz, and M. Bilton. </author> <title> Lambda calculus and music calculi. </title> <booktitle> In Proceedings of International Computer Music Conference. Int'l Computer Music Association, </booktitle> <year> 1994. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here. <p> None of them (perhaps surprisingly) are based on a pure functional language, with one exception: the recent work done by Orlarey et al. at GRAME <ref> [OFLB94] </ref>, which uses a pure lambda calculus approach to music description, and bears a strong resemblance to our effort (but unfortunately has not been implemented).
Reference: [Sch83] <author> B. Schottstaedt. </author> <title> Pla: A composer's idea of a language. </title> <journal> Computer Music Journal, </journal> <volume> 7(1) </volume> <pages> 11-20, </pages> <year> 1983. </year>
Reference-contexts: such defaults have been defined to capture certain classes of instruments such as string, woodwind, and percussion, since members of these classes tend to be constrained by the same physical features. 7 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [Ver86] <author> B. Vercoe. Csound: </author> <title> A manual for the audio processing system and supporting programs. </title> <type> Technical report, </type> <institution> MIT Media Lab, </institution> <year> 1986. </year> <month> 19 </month>
Reference-contexts: We will not provide details of the various translators in this paper; they are reasonably straightforward functional programs for converting from internal abstract datatypes to the file syntax required to play Haskore compositions as conventional midi-files [IMA90], NeXT MusicKit score files [JB91], or Csound score files <ref> [Ver86] </ref>, and to print Haskore compositions in traditional notation using the CMN (Common Music Notation) subsystem.
References-found: 19

