URL: ftp://ftp.cs.columbia.edu/reports/reports-1992/cucs-017-92.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1992.html
Root-URL: http://www.cs.columbia.edu
Title: Finding all periods and initial palindromes of a string in parallel  
Author: Dany Breslauer Zvi Galil 
Address: CUCS-017-92  
Affiliation: Columbia University  Columbia University and Tel-Aviv University  
Abstract: An optimal O(log log n) time CRCW-PRAM algorithm for computing all periods of a string is presented. Previous parallel algorithms compute the period only if it is shorter than half of the length of the string. This algorithm can be used to find all initial palindromes of a string in the same time and processor bounds. Both algorithms are the fastest possible over a general alphabet. We derive a lower bound for finding palindromes by a modification of a previously known lower bound for finding the period of a string [3]. When p processors are available the bounds become fi(d n p e + log log d1+p=ne 2p).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brent, R. P. </author> <year> (1974), </year> <title> The parallel evaluation of general arithmetic expressions, </title> <editor> J. </editor> <booktitle> ACM 21, </booktitle> <pages> 201-206. </pages>
Reference: [2] <author> Breslauer, D. and Galil, Z. </author> <year> (1990), </year> <title> An optimal O(log log n) parallel string matching algorithm, </title> <journal> SIAM J. Comput. </journal> <volume> 19:6, </volume> <pages> 1051-1058. </pages>
Reference-contexts: The period of a string is computed in linear time as a step in Knuth, Morris and Pratt's sequential string matching algorithm [6] and in optimal O (log log n) parallel time on a CRCW-PRAM as a step in Breslauer and Galil's string matching algorithm <ref> [2] </ref>. By optimal fl Work partially supported by NSF Grant CCR-90-14605. y Partially supported by an IBM Graduate Fellowship. 1 we mean that the time-processor product is linear in the length of the string. <p> A recent lower bound by Breslauer and Galil [3] shows that the O (log log n) bound is the best possible over a general alphabet, where only comparisons between symbols are allowed. However, Breslauer and Galil's <ref> [2] </ref> algorithm as well as an algorithm discovered by Vishkin [10] compute the period p only if p d n 2 e; knowing the fact that p &gt; d n 2 e is sufficient to obtain good string matching algorithms. <p> We show that given an optimal parallel algorithm for string matching, one can compute all periods, including those which are longer than half of the length of the input string, in the same processor and time bounds of the string matching algorithm. In particular Breslauer and Galil's <ref> [2] </ref> algorithm can be used to obtain an optimal O (log log n) time CRCW-PRAM algorithm that computes the exact period of a string. A palindrome is a string that reads the same forward and backward. <p> The number of operations at stage will be denoted by O = T P . We show later how to implement stage number in T = O (log log l ) time and O = l operations using Breslauer and Galil's <ref> [2] </ref> parallel string matching algorithm. Since all stages of our algorithm are executed in parallel the total number of operation performed in all stages is P P 3 n = O (n) and the time is max T = O (log log n). <p> Proof: Correctness of the algorithm follows from Lemmas 3.4, 3.5 and 3.6. The two calls to a string matching algorithm to compute the fq i g and fp i g sequences take O (log log l ) time and O (l ) operations if we use Breslauer and Galil's <ref> [2] </ref> string matching algorithm. The sequences fq i g and fp i g can be represented by three integers which can be computed from the output of the string matching algorithm (which is assume to be a Boolean vector representing all occurrences) in constant time and O (l ) operations. <p> Steps 2 and 3 can be done also in constant time and O (l ) operations. 2 Lemma 3.8: Stage number can be implemented in O (log log d1+p=ne 2p time on p n l processors if p n. Proof: The calls to Breslauer and Galil's <ref> [2, 3] </ref> string matching algorithm take O (log log d1+p=ne 2p n l ) time if p n and p n l processors are available for stage number . <p> The adversary can go on as long as K i n 2 . By simple arithmetic (log log 2p n p) rounds are necessary. 2 5 Discussion The algorithm described in this paper uses a string matching procedure as a "black-box". Using Breslauer and Galil's <ref> [2] </ref> string matching algorithm would result in an optimal O (log log n) time algorithm which is the best possible in the case of a general alphabet as implied by a lower bound of Breslauer and Galil [3].
Reference: [3] <author> Breslauer, D. and Galil, Z. </author> <year> (1991), </year> <title> A lower bound for parallel string matching, </title> <booktitle> Proc. 23nd ACM Symp. on Theory of Computation, </booktitle> <pages> 439-443. </pages>
Reference-contexts: Note that a simple algorithm can compute all periods of S in constant time if n 2 processors are available; our goal is to design a fast optimal parallel algorithm. A recent lower bound by Breslauer and Galil <ref> [3] </ref> shows that the O (log log n) bound is the best possible over a general alphabet, where only comparisons between symbols are allowed. <p> Steps 2 and 3 can be done also in constant time and O (l ) operations. 2 Lemma 3.8: Stage number can be implemented in O (log log d1+p=ne 2p time on p n l processors if p n. Proof: The calls to Breslauer and Galil's <ref> [2, 3] </ref> string matching algorithm take O (log log d1+p=ne 2p n l ) time if p n and p n l processors are available for stage number . <p> We modify the lower bound of 7 Breslauer and Galil <ref> [3] </ref> to a lower bound for determining whether a string S [0::n] has a an initial palindrome of length larger than n 2 . Since there are minor modification in the details of the lower bound we include the complete proofs. <p> Using Breslauer and Galil's [2] string matching algorithm would result in an optimal O (log log n) time algorithm which is the best possible in the case of a general alphabet as implied by a lower bound of Breslauer and Galil <ref> [3] </ref>. It is unknown if a faster algorithm exists for string matching in the case of a fixed alphabet. If such algorithm exists it would immediately imply a faster algorithm for finding the periods.
Reference: [4] <author> Fich, F. E., Ragde, R. L., and Wigderson, A. </author> <year> (1984), </year> <title> Relations between concurrent-write models of parallel computation, </title> <booktitle> Proc. 3rd ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> 179-189. </pages>
Reference-contexts: Corollary 2.3: The exact period of a string S can be computed in the same time and processor bounds. Proof: The period of S is the smallest i such that P [i] is true. We use a technique of Fich, Ragde and Weigderson <ref> [4] </ref> to compute the minimum of n integers in the range 1::n in constant time using an n-processor CRCW-PRAM. (By Theorem 2.1 this step can be slowed down to work in optimal O (log log n) time or in O ( n p ) time on p processors.) 2 Corollary 2.4:
Reference: [5] <author> Fischer, M. J. and Paterson, M. S. </author> <year> (1974), </year> <title> String-Matching and other products, </title> <booktitle> SIAM-AMS proceedings, </booktitle> <volume> Vol 7, </volume> <pages> 113-125. </pages>
Reference-contexts: Two copies of the string w$w R are aligned with each other shifted by some offset and the overlapping parts are identical if and only if the overlapping part is an initial palindrome of w. This reduction was used by Fischer and Paterson <ref> [5] </ref>. 2 3 Example: The string abaab has an initial palindrome aba. This initial palin-drome corresponds to the period abaab$ba of the string abaab$baaba. Proof of Theorem 2.2: The algorithm will proceed in independent stages which are all computed simultaneously and described in the next section.
Reference: [6] <author> Knuth, D. E., Morris, J. H. and Pratt, V. R. </author> <year> (1977), </year> <title> Fast pattern matching in strings, </title> <journal> SIAM J. Comput. </journal> <volume> 6, </volume> <pages> 322-350. </pages>
Reference-contexts: The period of S is defined as its shortest period. The period of a string is computed in linear time as a step in Knuth, Morris and Pratt's sequential string matching algorithm <ref> [6] </ref> and in optimal O (log log n) parallel time on a CRCW-PRAM as a step in Breslauer and Galil's string matching algorithm [2].
Reference: [7] <author> Lyndon, R. C. and Schutzenberger, M. P. </author> <year> (1962), </year> <title> The equation a M = b N c P in a free group, </title> <journal> Michigan Math. J. </journal> <volume> 9, </volume> <pages> 289-298. </pages>
Reference-contexts: Luckily the sequences fp i g and fq i g have a "nice" structure as we show in the following lemmas. This structure enables us to proceed efficiently to test which of the q i 's is actually a period of S. Lemma 3.1 (Lyndon and Schutzenberger <ref> [7] </ref>): If a string of length m has two periods of length p and q and p + q m, then it has also a period of length gcd (p; q).
Reference: [8] <author> Rosser, J. B. and Schoenfeld, L. </author> <year> (1962), </year> <title> Approximate formulas for some functions of prime numbers, </title> <journal> Illinois Journal of Mathematics, </journal> <volume> 6 </volume> <pages> 64-94. </pages>
Reference-contexts: A comparison S [l] = S [j] must be answered as equal if l and j are in the same extended residue class modulo k i+1 , that is, if k i+1 (l) = k i+1 (j). We say that k i+1 forces this comparison. Theorem 4.1 (see <ref> [8] </ref>): For large enough n, the number of primes between 1 and n denoted by (n) satisfies, n ln n (n) 5 n Corollary: The number of primes between 1 2 n and n is greater than 1 4 log n .
Reference: [9] <author> Valiant, L. G. </author> <year> (1975), </year> <title> Parallelism in comparison models, </title> <journal> SIAM J. of comput. </journal> <volume> 4, </volume> <pages> 348-355. </pages>
Reference-contexts: We prove also a matching lower bound for this problem under the assumption of a general alphabet. The model for which the lower bound is proved is similar to Valiant's parallel comparison tree model <ref> [9] </ref>. We assume the only access the algorithm has to the input string is by comparisons that check whether two symbols are equal or not. The algorithm is allowed p comparisons in each round, after which it can proceed to the next round or terminate with the answer.
Reference: [10] <author> Vishkin, U. </author> <year> (1985), </year> <title> Optimal parallel pattern matching in strings, </title> <booktitle> Information and Control 67, </booktitle> <pages> 91-113. 15 </pages>
Reference-contexts: A recent lower bound by Breslauer and Galil [3] shows that the O (log log n) bound is the best possible over a general alphabet, where only comparisons between symbols are allowed. However, Breslauer and Galil's [2] algorithm as well as an algorithm discovered by Vishkin <ref> [10] </ref> compute the period p only if p d n 2 e; knowing the fact that p &gt; d n 2 e is sufficient to obtain good string matching algorithms.
References-found: 10

