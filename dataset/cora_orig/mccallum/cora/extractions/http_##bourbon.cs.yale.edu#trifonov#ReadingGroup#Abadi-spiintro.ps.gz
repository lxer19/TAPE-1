URL: http://bourbon.cs.yale.edu/trifonov/ReadingGroup/Abadi-spiintro.ps.gz
Refering-URL: http://bourbon.cs.yale.edu/trifonov/ReadingGroup/
Root-URL: http://www.cs.yale.edu
Email: ma@pa.dec.com  adg@cl.cam.ac.uk  
Title: A Calculus for Cryptographic Protocols The Spi Calculus  
Author: Martn Abadi Andrew D. Gordon 
Affiliation: Digital Equipment Corporation Systems Research Center  University of Cambridge Computer Laboratory  
Abstract: We introduce the spi calculus, an extension of the pi calculus designed for the description and analysis of cryptographic protocols. We show how to use the spi calculus, particularly for studying authentication protocols. The pi calculus (without extension) suffices for some abstract protocols; the spi calculus enables us to consider cryptographic issues in more detail. We represent protocols as processes in the spi calculus and state their security properties in terms of coarse-grained notions of protocol equivalence. 
Abstract-found: 1
Intro-found: 1
Reference: [ABLP93] <author> M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. </author> <title> A calculus for access control in distributed systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 706-734, </pages> <year> 1993. </year>
Reference-contexts: As in some modal logics (e.g., <ref> [ABLP93, LABW92] </ref>), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., [DY81, MCF87, Mil95, Kem89, Mea92]), we are interested in characterising the knowledge of an environment.
Reference: [AN96] <author> M. Abadi and R. Needham. </author> <title> Prudent engineering practice for cryptographic protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(1) </volume> <pages> 6-15, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: The challenge is N S , a nonce created by S; the nonce must not have been used before for this purpose. Obviously the nonce is not secret, but it must be unpredictable (for otherwise an attacker could simulate a challenge and later replay the response <ref> [AN96] </ref>). In Message 3, A says that A and B can communicate under K AB , sometime after receipt of N S . All the components A, B, K AB , N S appear explicitly in the message, for safety [AN96], but A could perhaps be elided. <p> attacker could simulate a challenge and later replay the response <ref> [AN96] </ref>). In Message 3, A says that A and B can communicate under K AB , sometime after receipt of N S . All the components A, B, K AB , N S appear explicitly in the message, for safety [AN96], but A could perhaps be elided. The presence of N S in Message 3 proves the freshness of the message. In Message 4, fl represents a fixed but arbitrary message; S uses fl to signal that it is ready for a nonce challenge N B from B.
Reference: [BAN89] <author> M. Burrows, M. Abadi, and R. M. Needham. </author> <title> A logic of authentication. </title> <journal> Proceedings of the Royal Society of London A, </journal> <volume> 426 </volume> <pages> 233-271, </pages> <year> 1989. </year> <note> A preliminary version appeared as Digital Equipment Corporation Systems Research Center report No. 39, </note> <month> February </month> <year> 1989. </year>
Reference-contexts: Their main shortcoming is that they do not provide a precise and solid basis for reasoning about protocols. Other notations (e.g., <ref> [BAN89] </ref>) are more formal, but their relation to implementations may be more tenuous or subtle. The spi calculus is a middle ground: it is directly executable and it has a precise semantics. <p> Like work based on temporal logics or process algebras (e.g., [GM95, Low96, Sch96]), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., <ref> [BAN89] </ref>). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., [DY81, MCF87, Mil95, Kem89, Mea92]), we are interested in characterising the knowledge of an environment. <p> There are many different ways of establishing a channel, even at the abstract level at which we work here. The one we describe is inspired by the Wide Mouthed Frog protocol <ref> [BAN89] </ref>, which has the basic structure shown in Figure 1. We consider an abstract and simplified version of the Wide Mouthed Frog protocol. <p> It is not assumed that all messages contain information that allows each principal to recognise its own messages (cf. <ref> [BAN89] </ref>). The semantics of the spi calculus can be formalised in much the same way as the semantics of the pi calculus. We carry out this formalisation in Section 4. Again, we write P ' Q to mean that the behaviours of the processes P and Q are indistinguishable.
Reference: [BB90] <author> G. Berry and G. Boudol. </author> <title> The chemical abstract machine. </title> <booktitle> In Conference Record of the Seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 81-94, </pages> <year> 1990. </year>
Reference-contexts: free names.) The set Proc = fP j fv (P ) = ;g is the set of closed processes. 4.1 The Reaction Relation The reaction relation is a concise account of computation in the pi calculus introduced by Milner [Mil92], inspired by the Chemical Abstract Machine of Berry and Boudol <ref> [BB90] </ref>. One thinks of a process as consisting of a chemical solution of molecules waiting to react.
Reference: [BN95] <author> M. Boreale and R. De Nicola. </author> <title> Testing equivalence for mobile processes. </title> <journal> Information and Computation, </journal> <volume> 120(2) </volume> <pages> 279-303, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: One possible drawback of testing equivalence is that it is sensi tive to the choice of language <ref> [BN95] </ref>. However, our results appear fairly robust in that they carry over smoothly to some extensions of our calculus. 5 Further Cryptographic Primitives Although so far we have discussed only shared-key cryptography, other kinds of cryptography are also easy to treat within the spi calculus.
Reference: [BR95] <author> M. Bellare and P. Rogaway. </author> <title> Provably secure session key distribution: The three party case. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: Our model of protocols is simpler, but poorer, than some models developed for informal mathematical arguments be cause the spi calculus does not include any notion of prob-ability or complexity (cf. <ref> [BR95] </ref>). It would be interesting to bridge the gap between the spi calculus and those models, perhaps by giving a probabilistic interpretation for our results. Contents of this Paper Section 2 introduces the pi calculus and our method of specifying security properties as equations.
Reference: [DES77] <institution> Data encryption standard. Fed. </institution> <note> Inform. Processing Standards Pub. 46, </note> <institution> National Bureau of Standards, </institution> <address> Washington DC, </address> <month> January </month> <year> 1977. </year> <month> 11 </month>
Reference-contexts: Intuitively, the meaning of the new constructs is as fol lows: * The term fM g N represents the ciphertext obtained by encrypting the term M under the key N using a shared-key cryptosystem such as DES <ref> [DES77] </ref>. * The process case L of fxg N in P attempts to decrypt the term L with the key N . If L is a ciphertext of the form fM g N , then the process behaves as P [M=x]. Otherwise the process is stuck.
Reference: [DH76] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-22(6):644-654, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: Normally, one of the keys in each pair is private to one principal, while the other key is public. Any principal can encrypt a message using the public key; only a principal that has the private key can then decrypt the message <ref> [DH76, RSA78] </ref>. We assume that neither key can be recovered from the other. We could just as easily deal with the case where the public key can be derived from the private one.
Reference: [DH84] <author> R. De Nicola and M. C. B. Hennessy. </author> <title> Testing equivalences for processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 34 </volume> <pages> 83-133, </pages> <year> 1984. </year>
Reference-contexts: gives rise to a testing equivalence on the set Proc of closed processes: P ' Q = for any test (R; fi), (P j R) + fi if and only if (Q j R) + fi The idea of testing equivalence comes from the work of De Nicola and Hennessy <ref> [DH84] </ref>. Despite superficial differences, we can show that our relation ' is a version of De Nicola and Hennessy's may-testing equivalence. As De Ni-cola and Hennessy have explained, may-testing corresponds to partial correctness (or safety), while must-testing corresponds to total correctness.
Reference: [DY81] <author> D. Dolev and A. C. Yao. </author> <title> On the security of public key protocols. </title> <booktitle> In Proc. 22th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 350-357, </pages> <year> 1981. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95, Kem89, Mea92] </ref>), we are interested in characterising the knowledge of an environment.
Reference: [GM95] <author> J. Gray and J. McLean. </author> <title> Using temporal logic to specify and verify cryptographic protocols (progress report). </title> <booktitle> In Proceedings of the 8th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pages 108-116, </pages> <year> 1995. </year>
Reference-contexts: We resolve this conflict by letting the environment be an arbitrary spi calculus process. Our approach has some similarities with other recent approaches for reasoning about protocols. Like work based on temporal logics or process algebras (e.g., <ref> [GM95, Low96, Sch96] </ref>), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., [BAN89]). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances.
Reference: [Hoa85] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: The channels a process knows about determine the communication possibilities of the process. Channels may be restricted, so that only certain processes may communicate on them. In this respect the pi calculus is similar to earlier process calculi such as CSP <ref> [Hoa85] </ref> and CCS [Mil89]. What sets the pi calculus apart from earlier calculi is that the scope of a restriction|the program text in which a channel may be used|may change during computation.
Reference: [Kem89] <author> R. A. Kemmerer. </author> <title> Analyzing encryption protocols using formal verification techniques. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 7, </volume> <year> 1989. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95, Kem89, Mea92] </ref>), we are interested in characterising the knowledge of an environment.
Reference: [LABW92] <author> B. Lampson, M. Abadi, M. Burrows, and E. Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <month> Novem-ber </month> <year> 1992. </year>
Reference-contexts: As in some modal logics (e.g., <ref> [ABLP93, LABW92] </ref>), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., [DY81, MCF87, Mil95, Kem89, Mea92]), we are interested in characterising the knowledge of an environment.
Reference: [Lie93] <author> A. Liebl. </author> <title> Authentication in distributed systems: A bibliography. </title> <journal> ACM Operating Systems Review, </journal> <volume> 27(4) </volume> <pages> 31-41, </pages> <year> 1993. </year>
Reference-contexts: Some, which have long been used in the authentication literature, have a fairly clear connection To appear in the Proceedings of the Fourth ACM Conference on Computer and Communications Security, April 1997. to the intended implementations of those protocols (see, e.g., <ref> [NS78, Lie93] </ref>). Their main shortcoming is that they do not provide a precise and solid basis for reasoning about protocols. Other notations (e.g., [BAN89]) are more formal, but their relation to implementations may be more tenuous or subtle.
Reference: [Low96] <author> G. Lowe. </author> <title> Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Tools and Algorithms for the Construction and Analysis of Systems, </title> <booktitle> volume 1055 of Lecture Notes in Computer Science, </booktitle> <pages> pages 147-166. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We resolve this conflict by letting the environment be an arbitrary spi calculus process. Our approach has some similarities with other recent approaches for reasoning about protocols. Like work based on temporal logics or process algebras (e.g., <ref> [GM95, Low96, Sch96] </ref>), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., [BAN89]). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances.
Reference: [Mao96] <author> W. Mao. </author> <title> On two proposals for on-line bankcard payments using open networks: Problems and solutions. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 201-210, </pages> <year> 1996. </year>
Reference-contexts: In particular, there seems to be no fundamental difficulty in writing other kinds of examples, such as protocols for electronic commerce. Unfortunately, the specifications for those protocols do not yet seem to be fully understood, even in informal terms <ref> [Mao96] </ref>. In both the pi calculus and the spi calculus, restriction and scope extrusion play a central role. The pi calculus provides an abstract treatment of channels, while the spi calculus expresses the cryptographic operations that usually underlie channels in systems for distributed security.
Reference: [MCF87] <author> J. K. Millen, S. C. Clark, and S. B. Freedman. </author> <title> The Interrogator: Protocol security analysis. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(2):274-288, </volume> <month> February </month> <year> 1987. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95, Kem89, Mea92] </ref>), we are interested in characterising the knowledge of an environment.
Reference: [Mea92] <author> C. Meadows. </author> <title> Applying formal methods to the analysis of a key management protocol. </title> <journal> Journal of Computer Security, </journal> <volume> 1(1) </volume> <pages> 5-36, </pages> <year> 1992. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95, Kem89, Mea92] </ref>), we are interested in characterising the knowledge of an environment.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1989. </year>
Reference-contexts: The channels a process knows about determine the communication possibilities of the process. Channels may be restricted, so that only certain processes may communicate on them. In this respect the pi calculus is similar to earlier process calculi such as CSP [Hoa85] and CCS <ref> [Mil89] </ref>. What sets the pi calculus apart from earlier calculi is that the scope of a restriction|the program text in which a channel may be used|may change during computation.
Reference: [Mil92] <author> R. Milner. </author> <title> Functions as processes. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2 </volume> <pages> 119-141, </pages> <year> 1992. </year>
Reference-contexts: variables. (To be able to communicate externally, a process must have free names.) The set Proc = fP j fv (P ) = ;g is the set of closed processes. 4.1 The Reaction Relation The reaction relation is a concise account of computation in the pi calculus introduced by Milner <ref> [Mil92] </ref>, inspired by the Chemical Abstract Machine of Berry and Boudol [BB90]. One thinks of a process as consisting of a chemical solution of molecules waiting to react.
Reference: [Mil95] <author> J. K. Millen. </author> <title> The Interrogator model. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 251-260, </pages> <year> 1995. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95, Kem89, Mea92] </ref>), we are interested in characterising the knowledge of an environment.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes, parts I and II. </title> <booktitle> Information and Computation, </booktitle> <pages> pages 1-40 and 41-77, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Security and the Pi Calculus The spi calculus is an extension of the pi calculus <ref> [MPW92] </ref> with cryptographic primitives. It is designed for the description and analysis of security protocols, such as those for authentication and for electronic commerce. These protocols rely on cryptography and on communication channels with properties like authenticity and privacy.
Reference: [NS78] <author> R. M. Needham and M. D. Schroeder. </author> <title> Using encryption for authentication in large networks of computers. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 993-999, </pages> <month> December </month> <year> 1978. </year>
Reference-contexts: Some, which have long been used in the authentication literature, have a fairly clear connection To appear in the Proceedings of the Fourth ACM Conference on Computer and Communications Security, April 1997. to the intended implementations of those protocols (see, e.g., <ref> [NS78, Lie93] </ref>). Their main shortcoming is that they do not provide a precise and solid basis for reasoning about protocols. Other notations (e.g., [BAN89]) are more formal, but their relation to implementations may be more tenuous or subtle.
Reference: [RSA78] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: Normally, one of the keys in each pair is private to one principal, while the other key is public. Any principal can encrypt a message using the public key; only a principal that has the private key can then decrypt the message <ref> [DH76, RSA78] </ref>. We assume that neither key can be recovered from the other. We could just as easily deal with the case where the public key can be derived from the private one.
Reference: [Sch94] <author> B. Schneier. </author> <title> Applied Cryptography: Protocols, Algorithms, and Source Code in C. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Functions such as SHA and RIPE-MD are generally believed to have these properties <ref> [Sch94] </ref>. When we represent hash functions in the spi calculus, we pretend that operations that are very expensive are altogether impossible.
Reference: [Sch96] <author> S. Schneider. </author> <title> Security properties and CSP. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 174-187, </pages> <year> 1996. </year> <month> 12 </month>
Reference-contexts: We resolve this conflict by letting the environment be an arbitrary spi calculus process. Our approach has some similarities with other recent approaches for reasoning about protocols. Like work based on temporal logics or process algebras (e.g., <ref> [GM95, Low96, Sch96] </ref>), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., [BAN89]). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasise reasoning about channels and their utterances.
References-found: 27

