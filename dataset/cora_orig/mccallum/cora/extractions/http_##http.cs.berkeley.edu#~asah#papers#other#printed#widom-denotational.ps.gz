URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/widom-denotational.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/
Root-URL: http://www.cs.berkeley.edu
Email: widom@almaden.ibm.com  
Title: A Denotational Semantics for the Starburst Production Rule Language  
Author: Jennifer Widom 
Address: 650 Harry Road San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Date: 4-9, September 1992  
Note: In: SIGMOD Record, vol. 21 no. 3, pages  
Abstract: Researchers often complain that the behavior of database production rules is difficult to reason about and understand, due in part to the lack of formal declarative semantics. It has even been claimed that database production rule languages inherently cannot be given declarative semantics, in contrast to, e.g., deductive database rule languages. In this short paper we dispute this claim by giving a denotational semantics for the Starburst database production rule language.
Abstract-found: 1
Intro-found: 1
Reference: [ACL91] <author> R. Agrawal, R.J. Cochrane, and B. Lindsay. </author> <title> On maintaining priorities in a production rule system. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 479-487, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: We assume initially that this rule selection is performed by a deterministic algorithm <ref> [ACL91] </ref>, and we take the semantics of 1 It may be presumptuous to assume a semantics for SQL, but we do not intend to tackle this issue here. 3 this algorithm as given.
Reference: [AWH92] <author> A. Aiken, J. Widom, and J.M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence, and observable determinism. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 59-68, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: For numerous examples see [WCL91,WF90]. The description given here is similar to that in, e.g. [WCL91]. A more detailed but still mostly informal definition of the language is given in [WF90]. Prior to this paper, the closest to a formal specification is the execution model given in <ref> [AWH92] </ref> to prove properties of rule analysis. Starburst production rules are based on the notion of transitions. A transition is a database state change resulting from execution of a sequence of data manipulation operations.
Reference: [BFKM85] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: A wide variety of semantics have been proposed for database production rule languages; see, e.g. [HW93, Sel89]. Most of these semantics are based to some extent on the recognize-act cycle of the OPS5 production rule language <ref> [BFKM85] </ref>. In all cases, the semantics are described informally or, at best, as an algorithm for rule execution. The lack of formal declarative semantics for database production rule languages has been discussed at some length, particularly in the context of understanding and reasoning about rule behavior [AWH92,DD91,KdMS92,RL91].
Reference: [CGT90] <author> S. Ceri, G. Gottlob, and L. Tanca. </author> <title> Logic Programming and Databases. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: In response to this problem, some work has been done in extending deductive database rule languages, which have a clean declarative semantics <ref> [CGT90] </ref>, to include production rule capabilities. In [RL91], a declarative semantics is given for such an extension, but the extension is not as powerful as most integrated database production rule languages. In [KdMS92], a more powerful extension is considered, but no declarative semantics is specified.
Reference: [DD91] <author> U. Dayal and K.R. Dittrich. </author> <title> Active database systems. </title> <booktitle> In Seventeenth International Conference on Very Large Data Bases (tutorial), </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [Han89] <author> E.N. Hanson. </author> <title> An initial report on the design of Ariel: A DBMS with an integrated production rule system. </title> <booktitle> SIGMOD Record, Special Issue on Rule Management and Processing in Expert Database Systems, </booktitle> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> September </month> <year> 1989. </year>
Reference: [HS86] <editor> J.R. Hindley and J.P. Seldin. </editor> <title> Introduction to Combinators and -Calculus. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1986. </year>
Reference-contexts: Function definitions are given using the lambda-calculus <ref> [HS86] </ref>. Briefly, x 1 ; ::; x n :E denotes a function that takes argument values v 1 ; ::; v n and returns the result of evaluating expression E with all free occurrence of x i in E replaced by v i , 1 i n.
Reference: [HW93] <author> E.N. Hanson and J. Widom. </author> <title> An overview of production rules in database systems. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8(2) </volume> <pages> 121-143, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Production rules in database systems allow specification of data manipulation operations that are executed automatically whenever certain events occur or conditions are met, e.g. [Han89,MD89, SJGP90, WF90]. A wide variety of semantics have been proposed for database production rule languages; see, e.g. <ref> [HW93, Sel89] </ref>. Most of these semantics are based to some extent on the recognize-act cycle of the OPS5 production rule language [BFKM85]. In all cases, the semantics are described informally or, at best, as an algorithm for rule execution. <p> Database production rules are processed in response to user modifications on persistent data, and the effect of rule processing is additional modifications to that data <ref> [HW93] </ref>. Hence, a denotational semantics for a database production rule language is defined as a meaning 1 function that takes any set of rules and produces the function that maps a set of modifications and a database state into the new database state that results from processing those rules.
Reference: [KdMS92] <author> J. Kiernan, C. de Maindreville, and E. Simon. </author> <title> Supporting deductive and active rules on top of a relational DBMS. </title> <type> Research report, </type> <institution> INRIA, Le Chesnay, France, </institution> <year> 1992. </year>
Reference-contexts: In [RL91], a declarative semantics is given for such an extension, but the extension is not as powerful as most integrated database production rule languages. In <ref> [KdMS92] </ref>, a more powerful extension is considered, but no declarative semantics is specified. In this short paper we give a denotational semantics for the Starburst rule language [WCL91, WF90], showing that a formal declarative semantics is possible for database production rules.
Reference: [MD89] <author> D.R. McCarthy and U. Dayal. </author> <title> The architecture of an active database management system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference: [RL91] <author> L. Raschid and J. Lobo. </author> <title> Semantics for update rule programs and implementation in a relational database management system. </title> <type> Technical Report UMIACS-TR-91-140, </type> <institution> Institute for Advanced Computer Studies, University of Maryland, </institution> <year> 1991. </year>
Reference-contexts: In response to this problem, some work has been done in extending deductive database rule languages, which have a clean declarative semantics [CGT90], to include production rule capabilities. In <ref> [RL91] </ref>, a declarative semantics is given for such an extension, but the extension is not as powerful as most integrated database production rule languages. In [KdMS92], a more powerful extension is considered, but no declarative semantics is specified.
Reference: [Sel89] <author> T. Sellis, </author> <title> editor. Special Issue on Rule Management and Processing in Expert Database Systems, </title> <booktitle> SIGMOD Record 18(3), </booktitle> <month> September </month> <year> 1989. </year> <month> 8 </month>
Reference-contexts: 1 Introduction Production rules in database systems allow specification of data manipulation operations that are executed automatically whenever certain events occur or conditions are met, e.g. [Han89,MD89, SJGP90, WF90]. A wide variety of semantics have been proposed for database production rule languages; see, e.g. <ref> [HW93, Sel89] </ref>. Most of these semantics are based to some extent on the recognize-act cycle of the OPS5 production rule language [BFKM85]. In all cases, the semantics are described informally or, at best, as an algorithm for rule execution.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On rules, procedures, caching and views in data base systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 281-290, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Production rules in database systems allow specification of data manipulation operations that are executed automatically whenever certain events occur or conditions are met, e.g. <ref> [Han89,MD89, SJGP90, WF90] </ref>. A wide variety of semantics have been proposed for database production rule languages; see, e.g. [HW93, Sel89]. Most of these semantics are based to some extent on the recognize-act cycle of the OPS5 production rule language [BFKM85].
Reference: [Sto77] <author> J.E. Stoy. </author> <title> Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1977. </year>
Reference-contexts: In general, a denotational semantics for a conventional programming language is defined as a meaning function that takes any program in the language and produces the (input-output) function computed by that program <ref> [Sto77] </ref>. Database production rules are processed in response to user modifications on persistent data, and the effect of rule processing is additional modifications to that data [HW93].
Reference: [WCL91] <author> J. Widom, R.J. Cochrane, and B.G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: In [KdMS92], a more powerful extension is considered, but no declarative semantics is specified. In this short paper we give a denotational semantics for the Starburst rule language <ref> [WCL91, WF90] </ref>, showing that a formal declarative semantics is possible for database production rules. Although the semantics is (of course) tailored for the Starburst rule language, a similar semantics should be definable for other similar database rule languages, e.g. [Han89,SJGP90]. <p> For numerous examples see [WCL91,WF90]. The description given here is similar to that in, e.g. <ref> [WCL91] </ref>. A more detailed but still mostly informal definition of the language is given in [WF90]. Prior to this paper, the closest to a formal specification is the execution model given in [AWH92] to prove properties of rule analysis. Starburst production rules are based on the notion of transitions.
Reference: [WF90] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in relational database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year> <month> 9 </month>
Reference-contexts: 1 Introduction Production rules in database systems allow specification of data manipulation operations that are executed automatically whenever certain events occur or conditions are met, e.g. <ref> [Han89,MD89, SJGP90, WF90] </ref>. A wide variety of semantics have been proposed for database production rule languages; see, e.g. [HW93, Sel89]. Most of these semantics are based to some extent on the recognize-act cycle of the OPS5 production rule language [BFKM85]. <p> In [KdMS92], a more powerful extension is considered, but no declarative semantics is specified. In this short paper we give a denotational semantics for the Starburst rule language <ref> [WCL91, WF90] </ref>, showing that a formal declarative semantics is possible for database production rules. Although the semantics is (of course) tailored for the Starburst rule language, a similar semantics should be definable for other similar database rule languages, e.g. [Han89,SJGP90]. <p> For numerous examples see [WCL91,WF90]. The description given here is similar to that in, e.g. [WCL91]. A more detailed but still mostly informal definition of the language is given in <ref> [WF90] </ref>. Prior to this paper, the closest to a formal specification is the execution model given in [AWH92] to prove properties of rule analysis. Starburst production rules are based on the notion of transitions. <p> ; hr n ; ffi n ig: fhr 1 ; Net-Effect (ffi 1 ; ffi)i; : : :; hr n ; Net-Effect (ffi n ; ffi)ig * Function Net-Effect takes two sets of changes and returns the set of changes that is their net effect. (This is similarly defined in <ref> [WF90] </ref>.) Net-Effect : fi ! Net-Effect = [I 1 ; D 1 ; U 1 ]; [I 2 ; D 2 ; U 2 ]: [ (I 1 fl D 2 ) [ I 2 ; D 1 [ (D 2 fl I 1 ); (U 1 fl D 2 )
References-found: 16

