URL: http://www.isi.edu/~frank/Papers/iui98.ps
Refering-URL: http://www.isi.edu/~mm-proj/pages/publicat.htm
Root-URL: http://www.isi.edu
Email: Martin.R.Frank@acm.org szekely@isi.edu  
Title: Adaptive Forms: An Interaction Paradigm for Entering Structured Data  
Author: Martin R. Frank, Pedro Szekely 
Keyword: Data entry, layout, parsing, user interfaces, human-computer interaction  
Address: 4676 Admiralty Way, Marina del Rey, California 90292  
Affiliation: University of Southern California Information Sciences Institute  
Abstract: Many software applications solicit input from the user via a forms paradigm that emulates their paper equi valent. It exploits the users familiarity with these and is well suited for the input of simple attrib ute-value data (name, phone number, ...). The paper-forms paradigm starts breaking down when there is user input that may or may not be applicable depending on previous user input. In paper based forms, this manifests itself by sections marked fill out only if you entered yes in question 8a above, and simple electronic forms suffer from the same problem - much space is taken up for input fields that are not applicable. One possible approach to making only rele vant sections appear is to handwrite program fragments to hide and sho w them. As an alternative, we have developed a form specification language based on a context-free grammar that encodes data dependencies of the input, together with an accompanying run-time interpreter that uses novel layout techniques for collapsing already-entered input fields, for blending input fields possibly yet to come, and for sho wing only the applicable sections of the form. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. V. Aho and J. D. Ullman. </author> <booktitle> Principles of Compiler Design. Series in Computer Science and Information Processing. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1977. </year>
Reference-contexts: Below we show the complete grammar used to generate the screen shots for our running e xample. We require that the grammar be unambiguous (more precisely, that for all right-hand sides of a nonterminal their FIRST sets do not intersect <ref> [1] </ref>). This restrictions f acilitates writing a recursive-descent parser that requires no backtracking. The first section of the grammar pro vides for user-defined symbols, if any. In this particular grammar, we let users input their own city names if the grammar does not already contain them. <p> We use a recursive-descent parsing technique (as opposed to a shift-reduce technique such as LALR parsing) <ref> [1] </ref> so that the parse tree is e xplicitly represented at all times. This is convenient because the algorithm for laying out fields based on the grammar and the current state can then be implemented as a recursive function on the parse tree.
Reference: 2. <author> Y. Arens, C. A. Knoblock, and W.-M. Shen. </author> <title> Query reformulation for dynamic information integration. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 6(2/3):99130, </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: Figure 7 sho ws a snapshot of Adaptive Forms as a query interf ace for international emergency relief operations (driven by a static grammar), de vel-oped in conjunction with the SIMS project <ref> [2] </ref>.
Reference: 3. <author> A. Girgensohn, B. Zimmermann, A. Lee, B. Burns, and M. E. Atwood. </author> <title> Dynamic forms: An enhanced interaction abstraction based on forms. </title> <booktitle> In Proceedings of Inter-act95, Fifth IFIP Conference on Human-Computer Interaction, </booktitle> <pages> pages 362367. </pages> <publisher> Chapman & Hall, </publisher> <address> (London, England) 1995. </address>
Reference-contexts: Amulet even allows the constraints to create new graphical objects, so it would be possible to write constraints that add and delete fields in a form. However, like in ActiveForms, developers must explicitly write programming language code for that purpose (in C++). Dynamic Forms <ref> [3] </ref> is another system that pro vides some capabilities to hide and e xpose fields in a form. Dynamic Forms allows forms to be or ganized in a hierarchy, and the forms interpreter provides a facility to let users hide or e x-pose branches of the hierarch y.
Reference: 4. <author> R. Jeffries and J. Rosenberg. </author> <title> Comparing a form-based and a language-based user interface for instructing a mail program. </title> <booktitle> In Proceedings of CHI+GI, ACM Conference on Human Factors in Computing Systems and Graphics Interface, </booktitle> <pages> pages 261266, </pages> <address> (Toronto, Canada, </address> <month> April 5-9) </month> <year> 1987. </year>
Reference: 5. <author> B. A. Myers, R. McDaniel, R. Miller, A. Ferrency, P. Doane, A. Faulring, E. Borison, A. Mickish, , and A. Klimovitski. </author> <title> The amulet environment: New models for effective user interface software development. </title> <type> Technical Report CMU-CS-96-189, </type> <institution> Carnegie Mellon University School of Computer Science, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: We plan to extend Adaptive Forms with an application programming interf ace that will allow developers to define procedures that dynamically compute the set of terminals for a nonterminal, and also to perform input validation that is cumbersome or impossible to encode in a grammar. Systems like Amulet <ref> [5] </ref>, which use constraints, can also be used to specify relationships between fields so that the values and set of choices for one field can be computed based on the values of other fields. <p> Figure 7 sho ws a snapshot of Adaptive Forms as a query interf ace for international emergency relief operations (driven by a static grammar), de vel-oped in conjunction with the SIMS project [2]. Web-based Version Our current implementation is based on the X-Windows version of the Amulet toolkit <ref> [5] </ref>; we currently plan to also of fer two Web-based implementations, one intended for machines with high netw ork bandwidth and high processing power (such as desktop w orkstations), and one intended for lower-bandwidth yet low-latency network connections and little processing po wer (such as a handheld Personal Digital Assistant with
Reference: 6. <author> R. M. Stallman. </author> <title> Emacs: The extensible, customizable, self-documenting display editor. </title> <type> Technical Report 519, </type> <institution> Artificial Intelligence Laboratory, Massachusetts Institute of Technology, </institution> <month> August </month> <year> 1979. </year>
Reference-contexts: The Adaptive Form auto-completes all input so that only disambiguating input has to be entered, similar to the auto-completion in the Intuit Quick en personal finance program and in the Emacs editor <ref> [6] </ref>. In response, the cursor advances to the next field and the interface shows one more nesting level ahead (the Evacuate-from-where clause field from Figure 1 has expanded into two fields in Figure 2 - from and Evacuate from where?).
Reference: 7. <author> G. Szwillus and L. Neal, </author> <title> editors. Structure-Based Editors and Environments. Computers and People Series. </title> <publisher> Academic Press, </publisher> <address> San Diego, California, </address> <year> 1996. </year>
Reference-contexts: NLMenu accepts an ambiguous grammars and uses a parser based on pushdown automata. Adaptive Forms are driven by unambiguous grammar, and uses a recursi ve descent parser. Our research should not be confused with earlier w ork on syntax-directed editors (see <ref> [7] </ref> for a good o verview) - our focus is on forms and simple languages, not on general-purpose programming languages. There are several tools for building forms that support dynamic hiding and exposure of fields.
Reference: 8. <author> H. R. Tennant, K. M. Ross, R. M. Saenz, C. W. Thomp-son, and J. R. Miller. </author> <title> Menu-based natural language understanding. </title> <booktitle> In Proceedings of the 21st Annual Meeting of the Association for Computational Logistics, </booktitle> <pages> pages 151158, </pages> <address> (Boston, Massachusetts, </address> <month> June 15-17) </month> <year> 1983. </year>
Reference-contexts: CONCLUSIONS Our experience with Adaptive Forms is limited but encouraging. We used the system for constructing an editor that allows air campaign planners to specify objecti ves (67 rules), and for constructing a database query interf ace <ref> (837 rules) </ref>. The objectives editor allows users to enter thirty-tw o different kinds of objectives and was developed in consultation with domain experts. It has been used in se veral simulated exercises, but has not yet been deployed for routine use.
Reference: 9. <author> H. R. Tennant, K. M. Ross, and C. W. Thompson. </author> <title> Usable natural language interfaces through menu-based natural language understanding. </title> <booktitle> In Proceedings of the ACM Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 154160, </pages> <address> (Boston, Massachusetts, </address> <month> Decem-ber 12-15) </month> <year> 1983. </year>
Reference: 10. <author> P. Thistlewaite and S. Ball. </author> <title> Active FORMs. </title> <booktitle> In Fifth World Wide Web Conference, </booktitle> <year> 1996. </year> <month> ht-tp://www5conf.inria.fr/fich_html/papers/P40/Overview.html. </month>
Reference-contexts: There are several tools for building forms that support dynamic hiding and exposure of fields. ActiveForms <ref> [10] </ref> is a system written in Tcl/Tk that runs under SurfIt, a W eb browser also written in Tcl/Tk.
References-found: 10

