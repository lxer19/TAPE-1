URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/COLLISION/cms.ps.gz
Refering-URL: http://www.cs.unc.edu/~lin/papers.html
Root-URL: http://www.cs.unc.edu
Title: Collision detection between geometric models: a survey  
Author: Ming C. Lin Stefan Gottschalk 
Affiliation: University of North Carolina  
Abstract: In this paper, we survey the state of the art in collision detection between general geometric models. The set of models include polygonal objects, spline or algebraic surfaces, CSG models, and deformable bodies. We present a number of techniques and systems available for contact determination. We also describe several N-body algorithms to reduce the number of pairwise intersection tests.
Abstract-found: 1
Intro-found: 1
Reference: [AANJ94] <author> A.Garica-Alonso, N.Serrano, and J.Flaquer. </author> <title> Solving the collision detection problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(3) </volume> <pages> 36-43, </pages> <year> 1994. </year> <note> Ming C. Lin & Stefan Gottschalk 15 </note>
Reference-contexts: Other structures include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Binary space partitions (BSP) [NAT90] and extensions to multi-space partitions [BV91], and spatial partitionings based on space-time bounds or four-dimensional testing <ref> [AANJ94, Cam90, Can86, Hub93] </ref> have been used. All of these hierarchical methods do very well in performing "rejection tests" whenever two objects are far apart.
Reference: [AB88] <author> S.S. Abhyankar and C. Bajaj. </author> <title> Computations with algebraic curves. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 358, </volume> <pages> pages 279-284. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference: [Bar90] <author> D. Baraff. </author> <title> Curved surfaces and coherence for non-penetrating rigid body simulation. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 19-28, </pages> <year> 1990. </year>
Reference-contexts: Minkowski difference and convex optimization techniques are used in [GJK88] to compute the distance between convex polytopes by finding the closest points. In applications involving rigid motion, geometric coherence has been exploited to design algorithms for convex polyhedra based on local features <ref> [Bar90, LC91, Lin93] </ref>. Local properties have been used in the earlier motion planning algorithms by [Don84, LPW79] when two objects come into contact. These algorithms exploit the spatial and temporal coherence between successive queries and work well in practice.
Reference: [BCG+96] <author> G. Barequet, B. Chazelle, L. Guibas, J. Mitchell, and A. Tal. Box-tree: </author> <title> A hierarchical representation of surfaces in 3d. </title> <booktitle> In Proc. of Euro-graphics'96, </booktitle> <year> 1996. </year>
Reference-contexts: More recent work seems to have focused on tighter-fitting bounding volumes. Gottschalk et al. [GLM96], have presented a fast algorithm and a system, called RAPID, for interference detection based on oriented bounding boxes, which approximate geometry better than do axis-aligned bounding boxes. Barequet et al. <ref> [BCG+96] </ref> have also used oriented bounding boxes for computing hierarchical representations of surfaces for performing collision detection. Klosowski et al. [KHM+96] have used discrete orientation polytopes (k-DOPs), which also are superior approximations to bounded geometry.
Reference: [BFJP87] <author> R. Barnhill, G. Farin, M. Jordan, and B. Piper. </author> <title> Surface/surface intersection. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4(3) </volume> <pages> 3-16, </pages> <year> 1987. </year>
Reference-contexts: In some cases, lattice methods or subdivision methods are used to find starting points for use by the tracing methods. 4.2.6 Tracing methods The tracing method begins with a given point known to be on the intersection curve <ref> [BFJP87, BHHL88, Hoh91, MC91, KM97] </ref>. Then the intersection curve is traced in sufficiently small steps until the edge of the patch is found, or until the curve returns to itself to close a loop.
Reference: [BHHL88] <author> C.L. Bajaj, C.M. Hoffmann, J.E.H. Hopcroft, and R.E. Lynch. </author> <title> Tracing surface intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 285-307, </pages> <year> 1988. </year>
Reference-contexts: Given two surfaces, the prob Ming C. Lin & Stefan Gottschalk 7 lem corresponds to computing all components of the intersection curve, robustly and accurately. It includes work on curves and surface intersections <ref> [SWZ89, SP86, BHHL88, Hof89, Hof90, MD94, MD95, KM97] </ref>. All these algorithms have focussed on accurate computation of the intersection set for static models. However, for collision detection we are actually dealing with a restricted version of this problem. That is, given two surfaces we want to know whether they intersect. <p> In some cases, lattice methods or subdivision methods are used to find starting points for use by the tracing methods. 4.2.6 Tracing methods The tracing method begins with a given point known to be on the intersection curve <ref> [BFJP87, BHHL88, Hoh91, MC91, KM97] </ref>. Then the intersection curve is traced in sufficiently small steps until the edge of the patch is found, or until the curve returns to itself to close a loop. <p> Frequently this is posed as an initial-value differential equations problem [KPW90] or solving a system of algebraic equations <ref> [BHHL88, MC91, KM97] </ref>. At the intersection point on the surfaces, the intersection curve must be mutually orthogonal to the normals of the surfaces.
Reference: [BV91] <author> W. Bouma and G. Vanecek. </author> <title> Collision detection and analysis in a physically based simulation. </title> <booktitle> Proceedings Eurographics workshop on animation and simulation, </booktitle> <pages> pages 191-203, </pages> <year> 1991. </year>
Reference-contexts: Other structures include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Binary space partitions (BSP) [NAT90] and extensions to multi-space partitions <ref> [BV91] </ref>, and spatial partitionings based on space-time bounds or four-dimensional testing [AANJ94, Cam90, Can86, Hub93] have been used. All of these hierarchical methods do very well in performing "rejection tests" whenever two objects are far apart.
Reference: [BW90] <author> Jules Bloomenthal and Brian Wyvill. </author> <title> Interactive techniques for implicit modeling. </title> <editor> In Rich Riesenfeld and Carlo Sequin, editors, </editor> <booktitle> Computer Graphics (1990 Symposium on Interactive 3D Graphics), </booktitle> <volume> volume 24, </volume> <pages> pages 109-116, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Consequently, implicit surfaces are generically closed manifolds, a desirable property. If the function is polynomial in x, y, and z, then it is called algebraic, which includes the algebraic surfaces [Sed90], higher-order functions <ref> [BW90] </ref> and convolution surfaces. Implicits are also often used as the primitives in CSG systems. A special case of algebraic surfaces are the quadrics, which are the second-degree polynomials in x, y, and z. These can represent slabs, cones, spheres, and cylinders in a unified framework.
Reference: [Cam84] <author> Stephen Cameron. </author> <title> Modelling Solids in Motion. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1984. </year>
Reference: [Cam85] <author> S. Cameron. </author> <title> A study of the clash detection problem in robotics. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 488-493, </pages> <year> 1985. </year>
Reference: [Cam90] <author> S. Cameron. </author> <title> Collision detection by four-dimensional intersection testing. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 291-302, </pages> <year> 1990. </year>
Reference-contexts: Other structures include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Binary space partitions (BSP) [NAT90] and extensions to multi-space partitions [BV91], and spatial partitionings based on space-time bounds or four-dimensional testing <ref> [AANJ94, Cam90, Can86, Hub93] </ref> have been used. All of these hierarchical methods do very well in performing "rejection tests" whenever two objects are far apart.
Reference: [Cam91] <author> S. Cameron. </author> <title> Approximation hierarchies and s-bounds. </title> <booktitle> In Proceedings. Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 129-137, </pages> <address> Austin, TX, </address> <year> 1991. </year>
Reference-contexts: One strength of the CSG representation is that it enables an intuitive design process of building shapes by means of cutting (intersection and set difference) and joining (union) simple shapes to form more complex ones. It also makes finding a collision witness easier <ref> [Cam91] </ref>. The difficulty with CSG is that certain operations, such as rounding an edge or filleting a join, are difficult to describe with CSG operations. <p> Typical examples of bounding volumes include axis-aligned boxes (cubes are a special case) and spheres, and they are chosen for their fast overlap tests. Other structures include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds <ref> [Cam91] </ref> etc. Binary space partitions (BSP) [NAT90] and extensions to multi-space partitions [BV91], and spatial partitionings based on space-time bounds or four-dimensional testing [AANJ94, Cam90, Can86, Hub93] have been used. All of these hierarchical methods do very well in performing "rejection tests" whenever two objects are far apart. <p> This is sometimes called the "Null Object Detector", or NOD [Hof89, Man88]. One possible solution involves computing a boundary representation of the resulting solid. However, efficient, accurate and robust computation of the boundary remains a hard problem for CSG models described using curved primitives [Hof89, KKM97]. 4.1.1 S-bounds Cameron <ref> [Cam91] </ref> introduced "S-Bounds" as a means of speeding up intersection evaluation. Points in space can be applied to the expression tree of a CSG object in order to yield the "in", "out", or "on" classification of the point. <p> The S-Bounds are intended to restrict the scope (spatially) of the sample points, but which is still sufficient to determine emptiness of the intersection. In practice, Cameron observed that using S-Bounds increased the speed of intersection testing by one to two orders of magnitude on his CSG system <ref> [Cam91] </ref>. 8 Collision detection between geometric models: a survey 4.1.2 Interval arithmetic and CSG combinations of implicit func tions Duff [Duf92] employs interval arithmetic to evaluate implicit functions over box-like regions of space to determine whether the regions lie entirely inside, entirely outside, or potentially laying across the boundary of the
Reference: [Cam97a] <author> S. Cameron. </author> <title> Enhancing GJK: Computing minimum and penetration distance between convex polyhedra. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 3112-3117, </pages> <year> 1997. </year>
Reference-contexts: It is designed to operate on large numbers of static or moving polygonal objects to allow dynamic addition or deletion of objects between timesteps. 6.4 Distance computation between convex polytopes http://www.comlab.ox.ac.uk/oucl/users/stephen.cameron/distances.html This package is an enhanced and dynamic version <ref> [Cam97b, Cam97a] </ref> of the distance routine of Gilbert, Johnson and Keerthi (GJK), which allows the tracking of the distance between a pair of convex polyhedra. It requires a list of all the edges in each convex polyhedra for best performance.
Reference: [Cam97b] <author> Stephen Cameron. </author> <title> A comparison of two fast algorithms for computing the distance between convex polyhedra. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 13(6) </volume> <pages> 915-920, </pages> <month> December </month> <year> 1997. </year> <title> 16 Collision detection between geometric models: a survey </title>
Reference-contexts: It is designed to operate on large numbers of static or moving polygonal objects to allow dynamic addition or deletion of objects between timesteps. 6.4 Distance computation between convex polytopes http://www.comlab.ox.ac.uk/oucl/users/stephen.cameron/distances.html This package is an enhanced and dynamic version <ref> [Cam97b, Cam97a] </ref> of the distance routine of Gilbert, Johnson and Keerthi (GJK), which allows the tracking of the distance between a pair of convex polyhedra. It requires a list of all the edges in each convex polyhedra for best performance.
Reference: [Can86] <author> J. F. Canny. </author> <title> Collision detection for moving polyhedra. </title> <journal> IEEE Trans. PAMI, </journal> <volume> 8 </volume> <pages> 200-209, </pages> <year> 1986. </year>
Reference-contexts: Other structures include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Binary space partitions (BSP) [NAT90] and extensions to multi-space partitions [BV91], and spatial partitionings based on space-time bounds or four-dimensional testing <ref> [AANJ94, Cam90, Can86, Hub93] </ref> have been used. All of these hierarchical methods do very well in performing "rejection tests" whenever two objects are far apart.
Reference: [CC86] <author> S. Cameron and R. K. Culley. </author> <title> Determining the minimum translational distance between two convex polyhedra. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 591-596, </pages> <year> 1986. </year>
Reference-contexts: Sometimes, we must find which parts (if any) touch, i.e. find their intersection. Sometimes we want to know their separation: if two objects are disjoint, what is the minimum Euclidean distance between them? If they penetrate, what is the minimum translational distance required to separate them <ref> [CC86] </ref>? Finally, if we know the objects' placements and motions, when will be their next collision? This is ETA computation, borrowing from the phrase, "estimated time of arrival". Different applications need different queries.
Reference: [CL90] <author> J. F. Canny and M. C. Lin. </author> <title> An opportunistic global path planner. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 1554-1559, </pages> <year> 1990. </year>
Reference: [CLMP95] <author> J. Cohen, M. Lin, D. Manocha, and M. Ponamgi. I-collide: </author> <title> An interactive and exact collision detection system for large-scale environments. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 189-196, </pages> <year> 1995. </year>
Reference-contexts: frequency of the collision checks and thereby speeding up dynamics simulation. 12 Collision detection between geometric models: a survey 5.2 Sorting-based sweep and prune More recently, Cohen et al. have presented algorithms and a system, I-COLLIDE, based on spatial and temporal coherence, for large environments composed of multiple moving objects <ref> [CLMP95] </ref>. The number of object pair interactions is reduced to only the pairs within close proximity by sorting axis-aligned bounding boxes (AABBs) surrounding the objects. It is output sensitive and its run time is linearly dependent on the number of objects in the environment instead of quadratic dependence. <p> I-COLLIDE is an interactive and exact collision-detection library for environments composed of many convex polyhedra or union of convex pieces, based on the expected constant time, incremental distance computation algorithm [LC91, Lin93] and algorithms to check for collision between multiple moving objects <ref> [CLMP95] </ref>. 6.2 RAPID interference detection system http://www.cs.unc.edu/~geom/OBB/OBBT.html. RAPID is a robust and accurate polygon interference detection library for pairs of unstructured polygonal models. It is applicable to polygon soups models which contain no adjacency information and obey no topological constraints.
Reference: [DK90] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra A unified approach. </title> <booktitle> In Proc. 17th Internat. Colloq. Automata Lang. Program., volume 443 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 400-413. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: A number of algorithms with good asymptotic performance have been proposed in the computational geometry literature. Using hierarchical representations, an O (log 2 n) algorithm is given in <ref> [DK90] </ref> for polytope-polytope overlap problem, where n is the number of vertices. This elegant approach has not been robustly implemented in 6 Collision detection between geometric models: a survey 3D, however. Good theoretical and practical approaches based on linear complexity of the linear programming problem are known [Meg83, Sei90].
Reference: [Don84] <author> B. R. Donald. </author> <title> Motion planning with six degrees of freedom. </title> <type> Master's thesis, </type> <institution> MIT Artificial Intelligence Lab., </institution> <year> 1984. </year> <month> AI-TR-791. </month>
Reference-contexts: In applications involving rigid motion, geometric coherence has been exploited to design algorithms for convex polyhedra based on local features [Bar90, LC91, Lin93]. Local properties have been used in the earlier motion planning algorithms by <ref> [Don84, LPW79] </ref> when two objects come into contact. These algorithms exploit the spatial and temporal coherence between successive queries and work well in practice. A number of hierarchies have been used for collision detection between general polygonal models.
Reference: [Duf92] <author> Tom Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 131-139, </pages> <year> 1992. </year>
Reference-contexts: In practice, Cameron observed that using S-Bounds increased the speed of intersection testing by one to two orders of magnitude on his CSG system [Cam91]. 8 Collision detection between geometric models: a survey 4.1.2 Interval arithmetic and CSG combinations of implicit func tions Duff <ref> [Duf92] </ref> employs interval arithmetic to evaluate implicit functions over box-like regions of space to determine whether the regions lie entirely inside, entirely outside, or potentially laying across the boundary of the implicit surfaces. This is the familiar point classification scheme extended to regions obtained from adaptive subdivision of space.
Reference: [Ede83] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, Part I. </title> <journal> Internat. J. Comput. Math., </journal> <volume> 13 </volume> <pages> 209-219, </pages> <year> 1983. </year>
Reference-contexts: In order to eliminate some unnecessary pairwise checks and to speed up the runtime performance, several techniques have been proposed. Algorithms of complexity O (nlog 2 n + m) have been presented for spheres in [HSS83] and rectangular bounding boxes in <ref> [Ede83] </ref>, where m corresponds to the actual number of overlaps. <p> It uses dynamically sized AABBs, linear sweep and prune, and geometric coherence to quickly reject the object pairs, that are unlikely to collide within the next time step. 5.3 Interval tree for 2D intersection tests We can use the interval tree <ref> [Ede83] </ref> for static query, as well as for the rectangle intersection problem. Each query of interval intersection takes O (logn + k) time where k is the number of reported intersection and n is the number of intervals.
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: </title>
Reference-contexts: Parametric surfaces are easier to polygonalize and render as compared to the implicits, and a special class called the Non-Uniform Rational B-Spline (NURBS) has gained in popularity in CAD <ref> [LR80, Far93] </ref>. NURBS have some very nice properties which make them easier to operate on. They can also be represented using Bezier patches.
References-found: 23

