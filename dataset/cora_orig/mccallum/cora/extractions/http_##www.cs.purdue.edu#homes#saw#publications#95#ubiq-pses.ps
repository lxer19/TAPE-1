URL: http://www.cs.purdue.edu/homes/saw/publications/95/ubiq-pses.ps
Refering-URL: http://www.cs.purdue.edu/homes/saw/publications/
Root-URL: http://www.cs.purdue.edu
Email: E-mail: fttd,saw,joshi,raw,enhg@cs.purdue.edu  
Title: Software Architecture of Ubiquitous Scientific Computing Environments for Mobile Platforms  
Author: Tzvetan T. Drashansky, Sanjiva Weerawarana, Anupam Joshi, Ranjeewa A. Weerasinghe and Elias N. Houstis 
Keyword: Ubiquitous Computing, Scientific Computing, Problem Solving Environments.  
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Recent and anticipated technological advances in wireless computing will permit scientists and engineers to do experimental and computational modeling "anywhere" and "any time." In the SciencePad project our aim is to develop such "ubiquitous" problem solving environments (UPSE). The main objective of this paper is to address the architectural design of UPSEs on wireless notebook platforms supported by stationary high performance computing (HPC) servers. In our previous work, we have researched and developed various aspects of PSEs for scientific computing on HPC platforms. In this paper, we address the issue of "mapping" these PSEs onto mobile and stationary computational engines. For this, we have extended the previously developed architecture and infrastructure for partial differential equation (PDE) based PSEs (PDELab) to include parametrized objects and templates, lazy evaluation, and to deal with fuzzy and unstructured I/O. The resulting architecture uses a proxy-based methodology to partition the application components across the dual (wireless and stationary) network of computational units and build a distributed PSE architecture. This architecture is currently being validated by building a ubiquitous version of PDELab (UPDELab) on a two mega-bit wireless ethernet network of notebook platforms and heterogeneous parallel machines. fl Work reported herein was supported in part by NSF awards ASC 9404859 and CCR 9202536, AFOSR award F49620-92-J-0069, ARPA ARO award DAAH04-04-G-0010 and an award from the Intel Foundation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bentley et. al., </author> <title> Template-Driven Interfaces for Numerical Subroutines, </title> <journal> ACM Trans. Math. Soft. </journal> <volume> 19 (1993), no. 3, </volume> <pages> 265-287. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [4, 20, 27, 1, 8] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [2] <author> T. Berners-Lee et. al., </author> <title> World Wide Web: The Information Universe, </title> <journal> Electronic Networking: Research, Applications, and Policy 2 (1992), </journal> <volume> no. 1, </volume> <pages> 52-58. </pages>
Reference-contexts: Besides being concentrated in traditional repositories such as libraries, such information is also increasingly distributed, residing in workstations and computers belonging to individual researchers or research groups, and linked together to form a docuverse <ref> [2, 3] </ref>. The World Wide Web (WWW, Web) is an example of such a scenario. The fact that some of the citations that you will see in this paper are to Web documents is eloquent testimony to the fact. <p> Another dimension of tools and services we believe the electronic notebook should possess is in the area of information ac cess. The notebook should also provide users the ability to refer to and access digitally available information in an infosphere such as the World Wide Web <ref> [2] </ref>. In this view, the notebook is the central access point into the scientist's problem solving environment. Further, the PSE is an integral part of his/her natural research tool (as represented by the electronic notebook) and not some external entity with its own complex interfaces.
Reference: [3] <author> CERN, </author> <title> How to Put Your Data on the Web, </title> <address> (http://info.cern.ch/hypertext/WWW/Provider/ Overview.html), </address> <year> 1994. </year>
Reference-contexts: Besides being concentrated in traditional repositories such as libraries, such information is also increasingly distributed, residing in workstations and computers belonging to individual researchers or research groups, and linked together to form a docuverse <ref> [2, 3] </ref>. The World Wide Web (WWW, Web) is an example of such a scenario. The fact that some of the citations that you will see in this paper are to Web documents is eloquent testimony to the fact.
Reference: [4] <author> H. R. Cho and S. Moon, CADTM. </author> <title> A Database Transaction Manager for Coordinating Design Activities in CAD Environments, </title> <journal> Microprocessing and Microprogramming 37 (1993), </journal> <volume> no. </volume> <pages> 1-5, 115-118. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [4, 20, 27, 1, 8] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [5] <author> T. T. Drashansky, </author> <title> A Software Architecture of Collaborating Agents for Solving PDEs, </title> <type> Tech. Report TR-95-010, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995, </year> <title> (M.S. </title> <type> thesis). </type>
Reference-contexts: Specific goals of the project include studying related issues such as problem solving environments [23], agent based computing [6], multiagent coordination [15], intelligent communication <ref> [5] </ref>, notebook interfaces [16, 25] and integration of tools to support telematics related to the scope of SciencePad [9]. In this section we describe the hardware environment on which this platform will run and also discuss the realization of the electronic classroom and laboratory scenario in SciencePad.
Reference: [6] <author> T. Drashansky et. al., </author> <title> SciAgents AnAgent Based Environment for Distributed, Cooperative Scientific Computing, </title> <type> Tech. Report TR-95-029, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995, </year> <note> (submitted to Tools with AI '95). </note>
Reference-contexts: In the context of scientific computing, the factors characterizing mobile computing (e.g. bandwidth, memory, power, interfaces) add a further layer of complexity to an already complex domain. From a mobile computing perspective, the computationally intense nature and size of scientific computing tasks requires that distributed problem solving <ref> [19, 6] </ref> be the operating paradigm, which also leads to a complex system. Thus the use of mobile platforms in scientific computing is virtually nonexistant, to the best of the authors' knowledge. However, mobile systems provide the opportunity to make the resources of HPC available anywhere and any time. <p> However, mobile systems provide the opportunity to make the resources of HPC available anywhere and any time. In our previous work in the do 1 main of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 6, 12, 24] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system. <p> Specific goals of the project include studying related issues such as problem solving environments [23], agent based computing <ref> [6] </ref>, multiagent coordination [15], intelligent communication [5], notebook interfaces [16, 25] and integration of tools to support telematics related to the scope of SciencePad [9]. <p> They will create and use different objects, storing them in separate databases controlled by different OMs. SciencePad allows the applications to use objects from different database while communicating with one OM. To do this, we employ the approach of cooperative interacting agents described in <ref> [6, 15] </ref>. When an OM is asked for a representation of an object it does not posses, it interacts with the other OMs that it knows of and, if the representation (the object) is found, transfers it in its database and delivers it to the application. <p> We describe next the second type of templates which we use to transfer a large PSO representation in a relatively short message. 5.3.2 Communicating and Evaluating S-KIF Pro grams The second approach defines the templates as S-KIF <ref> [6] </ref> programs or program specifications. These templates are to be used in communications between the proxy of an agent (a tool, for example) and its static end, as well as when different OM agents exchange representations of objects among themselves.
Reference: [7] <author> D. Duchamp et. al., </author> <title> Software technology for wireless mobile computing, </title> <booktitle> IEEE Networks (1991), </booktitle> <pages> 12-18. </pages>
Reference-contexts: The classroom aspect of this approach is similar to SEN <ref> [7] </ref> but broader in scope. Notebook computers running the SciencePad environment are used for a wide variety of tasks in the classroom, including taking notes, receiving and submitting home-works, monitoring student progress, and supporting the problem solving processes and experimentation required by each course.
Reference: [8] <editor> A. K. Elmagarmid et. al., </editor> <title> Interbase: an Execution Environment for Global Applications Over Distributed, Autonomous and Heterogeneous Software Systems, </title> <type> Tech. Report TR-92-016, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1992. </year>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [4, 20, 27, 1, 8] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [9] <editor> Joshi et. al. A.Q, </editor> <title> Ideas for Telelearning: WWW, Virtual Classroom and Cyberversity, </title> <type> Tech. Report TR-95-023, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995. </year>
Reference-contexts: Specific goals of the project include studying related issues such as problem solving environments [23], agent based computing [6], multiagent coordination [15], intelligent communication [5], notebook interfaces [16, 25] and integration of tools to support telematics related to the scope of SciencePad <ref> [9] </ref>. In this section we describe the hardware environment on which this platform will run and also discuss the realization of the electronic classroom and laboratory scenario in SciencePad.
Reference: [10] <author> D. E. Hall etal, </author> <title> The software bus: A vision for scientific software development, </title> <journal> Computer Physics Communications 57 (1989), </journal> <pages> 211-216. </pages>
Reference-contexts: The underlying communication fabric in PPK that supports this is based on the software bus <ref> [10, 21] </ref> model. The software bus concept is an attempt to emulate the hardware bus mechanism that supports data and control interaction between various components of the machine and to incrementally attach new capabilities to a machine.
Reference: [11] <author> E. Gallopoulos et. al., </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science, </title> <journal> IEEE Computational Science and Engineering 1 (1994), </journal> <volume> no. 2, </volume> <pages> 11-23. </pages>
Reference-contexts: However, mobile systems provide the opportunity to make the resources of HPC available anywhere and any time. In our previous work in the do 1 main of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 6, 12, 24] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system.
Reference: [12] <editor> C.M. Hoffmann et. al., </editor> <title> Softlab a virtual laboratory for computational science, Math. </title> <booktitle> Comp. in Simulation 36 (1994). </booktitle>
Reference-contexts: However, mobile systems provide the opportunity to make the resources of HPC available anywhere and any time. In our previous work in the do 1 main of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 6, 12, 24] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system. <p> In the future, to support telepresence, we plan to use virtual reality devices like head gear and a data glove. To support remote experimentation, virtual laboratory software based on GPIB-based (General Purpose Interface Bus) instruments are being developed <ref> [12] </ref>. "Classroom and Laboratory of the Future." 2.2 Electronic Classroom and Laboratory The electronic classroom and laboratory scenario of the SciencePad project is currently being realized on the hardware platform described above. The classroom aspect of this approach is similar to SEN [7] but broader in scope. <p> This assisting process traverses the entire gamut from being a simple notebook for storing text to being a mechanism for gathering data from experimental processes and using them in later work. This latter aspect is the subject of the SoftLab project. SoftLab <ref> [12] </ref> is a framework for building virtual laboratories for computational science. Each instance of a SoftLab virtual laboratory links physical laboratory experimentation with computer control and simulation for a specific application in the engineering sciences.
Reference: [13] <editor> E. Houstis et. al., </editor> <booktitle> The PYTHIA projet, Proc. First Intl. Conf. on Neural, Parallel and Scientific Computing, </booktitle> <year> 1995, </year> <note> (to appear). </note>
Reference-contexts: In order to intelligently manage the distribution of computations between the mobile platform and the stationary machine, we use a knowledge based environment we have developed for this purpose <ref> [13] </ref>. The PYTHIA system uses the knowledge it has about previously seen computations as a basis for predicting the execution profile of a computation about to be scheduled. <p> The PYTHIA system described earlier <ref> [13] </ref> is capable of deriving these parameters automatically by consulting its database of known problems and obtaining conclusions based on previous cases. More details about PYTHIA can be found in [17]. Using it is part of our approach to the fuzzy and unstructured user input in SciencePad.
Reference: [14] <author> T. Imielinski and B. R. Bandrinath, </author> <title> Mobile Wireless Computing: Challenges in Data Management, </title> <journal> Comm. ACM 37 (1994), </journal> <volume> no. 10, </volume> <pages> 18-28. </pages>
Reference-contexts: This new paradigm, variously referred to as mobile, nomadic or ubiquitous computing, raises a host of research issues in a variety of areas of computer science <ref> [26, 14, 18] </ref>. The nature of the hardware involved in the mobile part of this scenario forces certain restrictions, like limited amounts of communication bandwidth, memory, and power. Another critical issue is the nature of the interfaces, which will need to operate with limited screen space and pen devices.
Reference: [15] <author> A. Joshi, </author> <title> To Learn or Not to Learn ..., Proc. </title> <booktitle> IJCAI'95 Workshop on Adaptation and Learning in Multiagent Systems, </booktitle> <year> 1995, </year> <note> (to appear). </note>
Reference-contexts: Specific goals of the project include studying related issues such as problem solving environments [23], agent based computing [6], multiagent coordination <ref> [15] </ref>, intelligent communication [5], notebook interfaces [16, 25] and integration of tools to support telematics related to the scope of SciencePad [9]. In this section we describe the hardware environment on which this platform will run and also discuss the realization of the electronic classroom and laboratory scenario in SciencePad. <p> They will create and use different objects, storing them in separate databases controlled by different OMs. SciencePad allows the applications to use objects from different database while communicating with one OM. To do this, we employ the approach of cooperative interacting agents described in <ref> [6, 15] </ref>. When an OM is asked for a representation of an object it does not posses, it interacts with the other OMs that it knows of and, if the representation (the object) is found, transfers it in its database and delivers it to the application.
Reference: [16] <editor> A. Joshi et. al., SciencePad: </editor> <title> An Intelligent Electronic Notepad for Ubiquitous Scientific Computing, </title> <booktitle> Intl. Conf. on Inteligent Information Management Systems, </booktitle> <month> June </month> <year> 1995, </year> <title> (to appear). [17] , The Use of Neural Networks to Support Intelligent Scientific Computing, </title> <booktitle> Proc. IEEE Intl. Conf. Neural Networks, </booktitle> <publisher> IEEE, IEEE Press, </publisher> <month> July </month> <year> 1995. </year>
Reference-contexts: Specific goals of the project include studying related issues such as problem solving environments [23], agent based computing [6], multiagent coordination [15], intelligent communication [5], notebook interfaces <ref> [16, 25] </ref> and integration of tools to support telematics related to the scope of SciencePad [9]. In this section we describe the hardware environment on which this platform will run and also discuss the realization of the electronic classroom and laboratory scenario in SciencePad.
Reference: [18] <author> R. Katz, </author> <title> Adaptation and Mobility in Wireless Information Systems, </title> <journal> IEEE Personal Communications 1 (1994), </journal> <volume> no. 1, </volume> <pages> 6-17. </pages>
Reference-contexts: This new paradigm, variously referred to as mobile, nomadic or ubiquitous computing, raises a host of research issues in a variety of areas of computer science <ref> [26, 14, 18] </ref>. The nature of the hardware involved in the mobile part of this scenario forces certain restrictions, like limited amounts of communication bandwidth, memory, and power. Another critical issue is the nature of the interfaces, which will need to operate with limited screen space and pen devices.
Reference: [19] <author> V. R. Lesser, </author> <title> A Retrospective View of FA/C Distributed Problem Solving, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 21 (1991), </journal> <volume> no. 6, </volume> <pages> 1347-1363. </pages>
Reference-contexts: In the context of scientific computing, the factors characterizing mobile computing (e.g. bandwidth, memory, power, interfaces) add a further layer of complexity to an already complex domain. From a mobile computing perspective, the computationally intense nature and size of scientific computing tasks requires that distributed problem solving <ref> [19, 6] </ref> be the operating paradigm, which also leads to a complex system. Thus the use of mobile platforms in scientific computing is virtually nonexistant, to the best of the authors' knowledge. However, mobile systems provide the opportunity to make the resources of HPC available anywhere and any time.
Reference: [20] <author> R. Marin et. al., </author> <title> Asynchronous Dialogue Control in a Medical Graphic Interface, </title> <journal> Cybernetics and Systems 23 (1992), </journal> <volume> no. </volume> <pages> 3-4, 271-284. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [4, 20, 27, 1, 8] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [21] <author> J. M. Purtilo, </author> <title> The polylith software bus, </title> <journal> ACM Transactions on Programming Languages and Systems 16 (1994), </journal> <volume> no. 1, </volume> <pages> 151-174. </pages>
Reference-contexts: The underlying communication fabric in PPK that supports this is based on the software bus <ref> [10, 21] </ref> model. The software bus concept is an attempt to emulate the hardware bus mechanism that supports data and control interaction between various components of the machine and to incrementally attach new capabilities to a machine.
Reference: [22] <author> V. Russo and D. Comer, </author> <title> The CrossPoint Project, </title> <address> (http://www.cs.purdue.edu/homes/lcheng/xpoint/ xpoint.html), </address> <year> 1994. </year>
Reference-contexts: The operating environment is DOS and Windows for Workgroups. These machines are wirelessly networked via a commercially available wireless ethernet providing 2MB/s bandwidth throughout most of the Computer Sciences building. The wireless ethernet hardware is a PCMCIA card along with an attached antenna. A separate group in our department <ref> [22] </ref> is working towards providing campus-wide coverage at this level of bandwidth and we will use the results of their work. The wireless network is supported by a base station that serves as a router between the wireless network and the wired Internet.
Reference: [23] <author> S. Weerawarana, </author> <title> Problem Solving Environments for Partial Differential Equation Based Applications, </title> <type> Ph.D. thesis, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: Specific goals of the project include studying related issues such as problem solving environments <ref> [23] </ref>, agent based computing [6], multiagent coordination [15], intelligent communication [5], notebook interfaces [16, 25] and integration of tools to support telematics related to the scope of SciencePad [9]. <p> A problem solving environment is defined as a collection of problem solving tools (i.e., the basic "solver" components), an integrated user interface environment and a mechanism to integrate all these components into a useful whole. In <ref> [23] </ref>, we have developed a software framework for building PSEs for partial differential equation based applications. Recently we have generalized this work and are developing the Purdue PSE Kernel (PPK), a software kernel that application PSE developers can use to build their own problem solving environments. <p> function as the overall system user interface, an object manager to store and manipulate the various objects produced by these tools, support (in terms of application programming interfaces (APIs) for the notebook and the object manager) for building the collection of tools, and a software bus based software interconnection mechanism <ref> [23] </ref>. <p> The software bus concept is an attempt to emulate the hardware bus mechanism that supports data and control interaction between various components of the machine and to incrementally attach new capabilities to a machine. In the PPK software bus (PDEBus <ref> [23] </ref>), software components have logical names (addresses) which uniquely identify them and register their exported services with the software bus. PDEBus arbitrates requests and services and invokes the appropriate functions at the appropriate service provider when some service is invoked by an interested client.
Reference: [24] <author> S. Weerawarana et. al., PDELab: </author> <title> An Object-Oriented Framework for Building Problem Solving Environments for PDE Based Applications, </title> <booktitle> Proc. Second Annual Object-Oriented Numerics Conference (Rogue-Wave Software, </booktitle> <address> Corvallis, OR), </address> <year> 1994, </year> <pages> pp. </pages> <month> 79-92. </month> <title> [25] , Using NCSA Mosaic to build notebook interfaces for CS&E applications, </title> <type> Tech. Report TR-95-006, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995. </year> <month> 14 </month>
Reference-contexts: However, mobile systems provide the opportunity to make the resources of HPC available anywhere and any time. In our previous work in the do 1 main of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 6, 12, 24] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system. <p> This is realized by building ubiquitous problem solving environments (UPSEs). In this paper we present the software architecture of such PSEs. This work is currently being validated by building a UPDELab, an ubiquitous version of our PDELab <ref> [24] </ref> PSE. This document is organized as follows: Section 2 presents an overview of the SciencePad project and its realization for an electronic classroom and laboratory scenario. Section 3 presents an overview of our previous work on software architectures for PSEs on high performance platforms. <p> While scientists and engineers will use the notebook as the central exchange between various tools, it is often not appropriate to store all 4 the interaction data in the notebook itself. For example, in the PDELab <ref> [24] </ref> PSE, one may generate a finite element mesh with thousands of elements and later user it for some finite element simulation. <p> In this section we present a set of techniques we use to form an efficient and functional data communication and storage scheme, and the major parts of this scheme. We illustrate and explain these using examples from one scientific application in SciencePad - PDELab <ref> [24] </ref> which numerically solves mathematical models based on partial differential equations (PDEs). 5.1 Overview Our approach is built around the concept of managing, communicating, and storing data and action templates.
Reference: [26] <author> Mark Weiser, </author> <booktitle> The Computer for the Twenty-First Century, Sci. </booktitle> <address> Am. </address> <year> (1991), </year> <pages> 94-104. </pages>
Reference-contexts: This new paradigm, variously referred to as mobile, nomadic or ubiquitous computing, raises a host of research issues in a variety of areas of computer science <ref> [26, 14, 18] </ref>. The nature of the hardware involved in the mobile part of this scenario forces certain restrictions, like limited amounts of communication bandwidth, memory, and power. Another critical issue is the nature of the interfaces, which will need to operate with limited screen space and pen devices.
Reference: [27] <author> M. K. Zang, </author> <title> Interconnection Language for Reuse at the Template/Module Level, </title> <journal> J. Systems and Software 23 (1993), </journal> <volume> no. 1, </volume> <pages> 9-26. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [4, 20, 27, 1, 8] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
References-found: 25

