URL: ftp://dirleton.csres.utexas.edu/pub/reports/085.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: An Assistant for Reading Nqthm Proof Output  
Phone: (512) 322-9951  
Author: Matt Kaufmann 
Note: This work was supported in part at Computational Logic, Inc., by the Defense Advanced Research Projects Agency, ARPA Order 7406. The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Defense Advanced Research Projects Agency or the U.S. Government.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Abstract: Technical Report 85 November, 1992 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. S. Boyer and J S. Moore, </author> <title> A Computational Logic Handbook, </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: This utility should be a major help to beginning users of the Boyer Moore prover, and should also be a timesaver for more advanced users. 2 Experienced users of the Boyer-Moore prover `Nqthm' <ref> [1] </ref> have a knack for getting information from the output of a failed proof attempt, by focusing on the most useful parts of that (often voluminous) output. Such information can be crucial in formulating appropriate lemmas that can help the proof to succeed. <p> The user is at least slightly familiar with Nqthm. The user is at least slightly familiar with Emacs [2]. The user is prepared to run Nqthm inside Emacs. The utility is based on the notion of a ``checkpoint,'' roughly as defined in Chapter 9 of <ref> [1] </ref>.
Reference: 2. <author> Richard M. Stallman, </author> <title> Free Software Foundation, GNU EMACS Manual, </title> <booktitle> Sixth ed., </booktitle> <year> 1987. </year>
Reference-contexts: We make the following assumptions of the user of this facility (and reader of this report). The user is at least slightly familiar with Nqthm. The user is at least slightly familiar with Emacs <ref> [2] </ref>. The user is prepared to run Nqthm inside Emacs. The utility is based on the notion of a ``checkpoint,'' roughly as defined in Chapter 9 of [1]. <p> The interested reader is welcome, however, to refer to the Emacs manual, <ref> [2] </ref> 3 thanks to Bob Boyer for defining this keymap 4 That's the number `1', not the letter `l'. 6 Currently, our system does not print a note above every checkpoint. Instead, it only prints a note above selected checkpoints.
Reference: 3. <author> Matt Kaufmann, </author> <title> ``A User's Manual for an Interactive Enhancement to the Boyer-Moore Theorem Prover'', </title> <type> Technical Report 19, </type> <institution> Computational Logic, Inc., </institution> <month> May </month> <year> 1988. </year> <title> i Table of Contents </title>
Reference-contexts: If you intend to read the entire document, then you can skip this section. Of course, the filenames below need to be adjusted if they are not in your current directory. First start up Nqthm or Pc-Nqthm <ref> [3] </ref>, and then compile as follows. (compile-file "checkpoints.lisp") Then to use the system, either right away or at any time in the future, submit the following form to (Pc-)Nqthm. (load "checkpoints") Next, load the Emacs file "checkpoints.el" (again, with an appropriate pathname if this file is not in the current directory):
Reference: 1. <author> Brief summary. </author> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . <month> 2 </month>
Reference-contexts: This utility should be a major help to beginning users of the Boyer Moore prover, and should also be a timesaver for more advanced users. 2 Experienced users of the Boyer-Moore prover `Nqthm' <ref> [1] </ref> have a knack for getting information from the output of a failed proof attempt, by focusing on the most useful parts of that (often voluminous) output. Such information can be crucial in formulating appropriate lemmas that can help the proof to succeed. <p> The user is at least slightly familiar with Nqthm. The user is at least slightly familiar with Emacs [2]. The user is prepared to run Nqthm inside Emacs. The utility is based on the notion of a ``checkpoint,'' roughly as defined in Chapter 9 of <ref> [1] </ref>.

Reference: 3. <institution> An example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 </institution>
Reference-contexts: If you intend to read the entire document, then you can skip this section. Of course, the filenames below need to be adjusted if they are not in your current directory. First start up Nqthm or Pc-Nqthm <ref> [3] </ref>, and then compile as follows. (compile-file "checkpoints.lisp") Then to use the system, either right away or at any time in the future, submit the following form to (Pc-)Nqthm. (load "checkpoints") Next, load the Emacs file "checkpoints.el" (again, with an appropriate pathname if this file is not in the current directory):
Reference: 4. <institution> Modifying the system's behavior. </institution> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . <month> 8 </month>
References-found: 6

