URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/skyblue-uist-94.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/ui/skyblue-uist-94.html
Root-URL: 
Email: E-mail: sannella@cs.washington.edu  
Title: SkyBlue: A Multi-Way Local Propagation Constraint Solver for User Interface Construction  
Author: Michael Sannella 
Keyword: SkyBlue, constraints, local propagation, constraint hierarchies, user interface implementation.  
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Abstract: Many user interface toolkits use constraint solvers to maintain geometric relationships between graphic objects, or to connect the graphics to the application data structures. One efficient and flexible technique for maintaining constraints is multi-way local propagation, where constraints are represented by sets of method procedures. To satisfy a set of constraints, a local propagation solver executes one method from each constraint. SkyBlue is an incremental constraint solver that uses local propagation to maintain a set of constraints as individual constraints are added and removed. If all of the constraints cannot be satisfied, SkyBlue leaves weaker constraints unsatisfied in order to satisfy stronger constraints (maintaining a constraint hierarchy). SkyBlue is a more general successor to the DeltaBlue algorithm that satisfies cycles of methods by calling external cycle solvers and supports multi-output methods. These features make SkyBlue more useful for constructing user in terfaces, since cycles of constraints can occur frequently in user interface applications and multi-output methods are necessary to represent some useful constraints. This paper discusses some of the applications that use Sky-Blue, presents times for some user interface benchmarks and describes the SkyBlue algorithm in detail. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Franz G. Amador, Adam Finkelstein, and Daniel S. Weld. </author> <title> Real-Time Self-Explanatory Simulation. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 562-567. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: These constraints are added and removed as the user manipulates different objects in the virtual world. * The Kaleidoscope language [4] integrates constraints and imperative, object-oriented programming. The current implementation of this language (Kaleidoscope'93) uses SkyBlue to maintain primitive constraints. * The Pika simulation system <ref> [1] </ref> constructs simulations in domains such as electronics or thermodynamics by collecting algebraic and differential equations representing relationships between object attributes.
Reference: 2. <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint Hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [10], Rendezvous [8], and ThingLab II [9]. References <ref> [2, 6] </ref> contain additional references to constraint-based systems. One efficient and flexible technique for maintaining con straints is multi-way local propagation. <p> For a given set of constraints, there may be multiple ways to select methods to satisfy the constraints. It is also possible that there is no way for the solver to select methods for all of the constraints so there are no method conflicts. The theory of constraint hierarchies <ref> [2] </ref> offers a way to control the behavior of a constraint solver in these situations. Given a constraint hierarchy, a set of constraints where each constraint has an associated strength, a constraint solver can leave weaker constraints unsatisfied in order to satisfy stronger con straints. <p> MGB mgraphs are similar to the Locally-Graph-Better graphs constructed by DeltaBlue [9]. The variable values produced by executing the enforced constraints are usually (but not always) Locally-Predicate-Better solutions as defined by the theory of constraint hierarchies <ref> [2, 12] </ref>. SkyBlue can handle any number of different constraint strengths. Examples in this paper use the strengths max , strong , medium, weak (strongest to weakest). As an example, consider the mgraphs in Figure 3.
Reference: 3. <author> Conal Elliott, Greg Schechter, Ricky Yeung, and Salim Abi-Ezzi. TBAG: </author> <title> A High Level Framework for Interactive, Animated 3D Graphics Applications. </title> <booktitle> In SIGGRAPH '94 Conference Proceedings, </booktitle> <pages> pages 421-434, </pages> <address> Orlando, Florida, </address> <month> July </month> <year> 1994. </year> <note> ACM. Also in Computer Graphics 28(2), </note> <month> July </month> <year> 1994. </year>
Reference-contexts: existing Garnet programs without change and build Multi-Garnet applications us ing Garnet's library of widgets. * The CoolDraw constraint-based drawing program [5] uses an extended version of SkyBlue to maintain geometric relationships between graphic objects in a two dimensional plane. * TBAG is a toolkit for creating interactive 3D graphics <ref> [3] </ref> that uses SkyBlue to maintain relationships between time-varying properties of graphic objects such as their positions and the derivatives of their positions. * The VB2 virtual reality system [7] uses SkyBlue to maintain connections between 3D input devices and objects in the virtual world, and to attach virtual tools to
Reference: 4. <author> Bjorn Freeman-Benson. </author> <title> Constraint Imperative Programming. </title> <type> PhD thesis, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> July </month> <year> 1991. </year> <note> Published as UW CSE Technical Report 91-07-02. </note>
Reference-contexts: These constraints are added and removed as the user manipulates different objects in the virtual world. * The Kaleidoscope language <ref> [4] </ref> integrates constraints and imperative, object-oriented programming. The current implementation of this language (Kaleidoscope'93) uses SkyBlue to maintain primitive constraints. * The Pika simulation system [1] constructs simulations in domains such as electronics or thermodynamics by collecting algebraic and differential equations representing relationships between object attributes.
Reference: 5. <author> Bjorn Freeman-Benson. </author> <title> Converting an Existing User Interface to Use Constraints. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 207-215, </pages> <address> At-lanta, Georgia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Multi-Garnet allows the SkyBlue constraint solver to coexist with the Garnet constraint solver. It is possible to run existing Garnet programs without change and build Multi-Garnet applications us ing Garnet's library of widgets. * The CoolDraw constraint-based drawing program <ref> [5] </ref> uses an extended version of SkyBlue to maintain geometric relationships between graphic objects in a two dimensional plane. * TBAG is a toolkit for creating interactive 3D graphics [3] that uses SkyBlue to maintain relationships between time-varying properties of graphic objects such as their positions and the derivatives of their <p> One direction for future work is to extend SkyBlue to support inequalities. The CoolDraw system used an extended version of Sky-Blue to support some inequalities <ref> [5] </ref>. Another area of active research is building debugging tools to help the programmer examine the constraint network, determine why a given solution is produced, and change the network to produce the desired solution.
Reference: 6. <author> Bjorn Freeman-Benson, John Maloney, and Alan Borning. </author> <title> An Incremental Constraint Solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [10], Rendezvous [8], and ThingLab II [9]. References <ref> [2, 6] </ref> contain additional references to constraint-based systems. One efficient and flexible technique for maintaining con straints is multi-way local propagation.
Reference: 7. <author> Enrico Gobbetti and Jean-Francis Balaguer. VB2: </author> <title> An Architecture for Interaction in Synthetic Worlds. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 167-178, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: maintain geometric relationships between graphic objects in a two dimensional plane. * TBAG is a toolkit for creating interactive 3D graphics [3] that uses SkyBlue to maintain relationships between time-varying properties of graphic objects such as their positions and the derivatives of their positions. * The VB2 virtual reality system <ref> [7] </ref> uses SkyBlue to maintain connections between 3D input devices and objects in the virtual world, and to attach virtual tools to objects that the user is editing.
Reference: 8. <author> Ralph D. Hill, Tom Brinck, Steven L. Rohall, John F. Patterson, and Wayne Wilner. </author> <title> The Rendezvous Architecture and Language for Constructing Multi-User Applications. </title> <journal> ACM Transactions on Computer-Human Interaction, </journal> <volume> 1(2), </volume> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [10], Rendezvous <ref> [8] </ref>, and ThingLab II [9]. References [2, 6] contain additional references to constraint-based systems. One efficient and flexible technique for maintaining con straints is multi-way local propagation.
Reference: 9. <author> John Maloney. </author> <title> Using Constraints for User Interface Construction. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> August </month> <year> 1991. </year> <note> Published as UW CSE Technical Report 91-08-12. </note>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet [10], Rendezvous [8], and ThingLab II <ref> [9] </ref>. References [2, 6] contain additional references to constraint-based systems. One efficient and flexible technique for maintaining con straints is multi-way local propagation. <p> Given a constraint hierarchy, a set of constraints where each constraint has an associated strength, a constraint solver can leave weaker constraints unsatisfied in order to satisfy stronger con straints. The DeltaBlue algorithm is an incremental algorithm for maintaining constraint hierarchies using local propagation <ref> [9, 15] </ref>. The ThingLab II user interface development environment was based on DeltaBlue, demonstrating its feasibility for constructing user interfaces [9]. <p> The DeltaBlue algorithm is an incremental algorithm for maintaining constraint hierarchies using local propagation [9, 15]. The ThingLab II user interface development environment was based on DeltaBlue, demonstrating its feasibility for constructing user interfaces <ref> [9] </ref>. However, DeltaBlue has two significant limitations: cycles in the graph of constraints and variables are prohibited (if a cycle is found, the cycle is broken by removing a constraint), and constraint methods can only have one output variable. <p> However, it has been proven that supporting cycles and multi-output methods is NP-complete <ref> [9] </ref>. Special examples have been constructed where the time for SkyBlue to add or remove a particular constraint is exponential in the number of constraints in the set. These test cases are highly unusual, and it is unlikely that similar sets of constraints would be constructed in a real application. <p> By constructing MGB mgraphs, SkyBlue ensures that weaker constraints are left unenforced if necessary to enforce stronger constraints. However, weaker constraints can influence which selected methods are used to enforce stronger constraints. MGB mgraphs are similar to the Locally-Graph-Better graphs constructed by DeltaBlue <ref> [9] </ref>. The variable values produced by executing the enforced constraints are usually (but not always) Locally-Predicate-Better solutions as defined by the theory of constraint hierarchies [2, 12]. SkyBlue can handle any number of different constraint strengths.
Reference: 10. <author> Brad A. Myers, Dario A. Giuse, Roger B. Dan-nenberg, Brad Vander Zanden, David S. Kosbie, Ed Pervin, Andrew Mickish, and Philippe Mar-chal. Garnet: </author> <title> Comprehensive Support for Graphical, Highly-Interactive User Interfaces. </title> <journal> IEEE Computer, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including Garnet <ref> [10] </ref>, Rendezvous [8], and ThingLab II [9]. References [2, 6] contain additional references to constraint-based systems. One efficient and flexible technique for maintaining con straints is multi-way local propagation. <p> Contact the author for information about implementations of SkyBlue. 2 SKYBLUE APPLICATIONS SkyBlue has been used in a number of applications pro duced by different research groups: * The Multi-Garnet package [14] uses SkyBlue to add support for multi-way constraints and constraint hier archies to Garnet <ref> [10] </ref>, a user interface toolkit built on Common Lisp and X windows. Multi-Garnet constraints support many of the useful features of Garnet's one-way constraints (formulas), including indirect references to constrained object slots though a series of other slots and inheritance of constraints in Garnet's prototype-based object system.
Reference: 11. <author> Michael Sannella. </author> <title> Analyzing and Debugging Hierarchies of Multi-way Local Propagation Constraints. </title> <editor> In Borning, editor, </editor> <booktitle> Proceedings of the 1994 Workshop on Principles and Practice of Constraint Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: A system has been developed for interactively constructing graphical user interfaces based on constraints (maintained by SkyBlue), and debugging the constraint networks <ref> [11] </ref>. This debugging system uses a new algorithm for generating all of the MGB mgraphs for a set of constraints. This algorithm is the basis for a powerful debugging tool that allows the programmer to explore the different behaviors that can be produced by a set of constraints.
Reference: 12. <author> Michael Sannella. </author> <title> Constraint Satisfaction and Debugging for Interactive User Interfaces. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1994. </year>
Reference-contexts: The SkyBlue algorithm presented in this paper is a successor to the DeltaBlue algorithm that supports cycles and multi-output methods <ref> [12, 13] </ref>. Cycles of constraints can occur frequently in user interface applications, particular when geometric constraints are created among graphic objects. DeltaBlue's prohibition of cycles places an undue burden on the programmer who has to worry about inadvertently introducing cycles. <p> The following sections list some of the applications built using SkyBlue and describes user interface benchmarks comparing SkyBlue to another solver. The rest of this paper presents the details of the SkyBlue algorithm. The author's dissertation describes SkyBlue in more detail <ref> [12] </ref>. <p> MGB mgraphs are similar to the Locally-Graph-Better graphs constructed by DeltaBlue [9]. The variable values produced by executing the enforced constraints are usually (but not always) Locally-Predicate-Better solutions as defined by the theory of constraint hierarchies <ref> [2, 12] </ref>. SkyBlue can handle any number of different constraint strengths. Examples in this paper use the strengths max , strong , medium, weak (strongest to weakest). As an example, consider the mgraphs in Figure 3. <p> If it is unable to construct a conflict-free m graph where root is enforced, it leaves the mgraph unchanged. It has been proven that if none of the unenforced constraints are mvine-enforcible (i.e., can be enforced by build_mvine), then the mgraph must be an MGB mgraph <ref> [12] </ref>. The procedure build_mvine tries to enforce root by the following process: root is enforced with one of its methods. If this method has a method conflict with the selected methods of other enforced constraints, these conflicting constraints are unenforced. <p> Sky-Blue uses several techniques to update *pmec* when the mgraph is changed. It has been proven that these techniques will collect all of the newly mvine-enforcible constraints (in addition to some constraints that are not mvine-enforcible) whenever the mgraph is changed <ref> [12] </ref>. * The Collect Local Unenforced Technique. Whenever an unenforced constraint is added to the mgraph, it must be added to *pmec*. <p> It has been proven that the only walkbounds that need to be updated after the mgraph is changed are the walkbounds of the redetermined variables and downstream variables <ref> [12] </ref>. This procedure takes all of the constraints that determine these vari ables, and collapses all constraint cycles into collapsed cycle methods (as described in Section 8). Then, the collapsed cycle methods and the other selected methods are topologically sorted and processed in order. <p> It is only necessary to execute "new" selected methods (ones that weren't selected the last time methods were executed) and selected methods downstream of those methods <ref> [12] </ref>. If there are no directed cycles in the mgraph, the selected methods are executed in topological order. If there are directed cycles in the mgraph, it is not possible to topologically sort them. In this case, the cycles (actually, the strongly-connected components) are collapsed to produce collapsed cycle methods.
Reference: 13. <author> Michael Sannella. </author> <title> The SkyBlue Constraint Solver and Its Applications. </title> <editor> In Saraswat and van Hen-tenryck, editors, </editor> <booktitle> Proceedings of the 1993 Workshop on Principles and Practice of Constraint Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: The SkyBlue algorithm presented in this paper is a successor to the DeltaBlue algorithm that supports cycles and multi-output methods <ref> [12, 13] </ref>. Cycles of constraints can occur frequently in user interface applications, particular when geometric constraints are created among graphic objects. DeltaBlue's prohibition of cycles places an undue burden on the programmer who has to worry about inadvertently introducing cycles.
Reference: 14. <author> Michael Sannella and Alan Borning. Multi-Garnet: </author> <title> Integrating Multi-Way Constraints with Garnet. </title> <type> Technical Report 92-07-01, </type> <institution> Department of Computer Science and Engineering, University of Wash-ington, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: The author's dissertation describes SkyBlue in more detail [12]. Contact the author for information about implementations of SkyBlue. 2 SKYBLUE APPLICATIONS SkyBlue has been used in a number of applications pro duced by different research groups: * The Multi-Garnet package <ref> [14] </ref> uses SkyBlue to add support for multi-way constraints and constraint hier archies to Garnet [10], a user interface toolkit built on Common Lisp and X windows.
Reference: 15. <author> Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Borning. </author> <title> Multi-way versus One-way Constraints in User Interfaces: Experience with the DeltaBlue Algorithm. </title> <journal> Software|Practice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <month> May </month> <year> 1993. </year> <month> 10 </month>
Reference-contexts: Given a constraint hierarchy, a set of constraints where each constraint has an associated strength, a constraint solver can leave weaker constraints unsatisfied in order to satisfy stronger con straints. The DeltaBlue algorithm is an incremental algorithm for maintaining constraint hierarchies using local propagation <ref> [9, 15] </ref>. The ThingLab II user interface development environment was based on DeltaBlue, demonstrating its feasibility for constructing user interfaces [9].
References-found: 15

