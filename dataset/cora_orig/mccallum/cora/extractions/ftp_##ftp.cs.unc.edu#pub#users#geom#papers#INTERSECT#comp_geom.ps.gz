URL: ftp://ftp.cs.unc.edu/pub/users/geom/papers/INTERSECT/comp_geom.ps.gz
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Email: krishnas@cs.unc.edu  narkhede@cs.unc.edu  manocha@cs.unc.edu  
Title: Representation and Computation of Boolean Combinations of Sculptured Models  
Author: Shankar Krishnan Atul Narkhede Dinesh Manocha 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science, University of North Carolina,  
Abstract: We outline an algorithm and implementation of a system that computes Boolean combinations of sculptured solids. We represent the surface of the solids in terms of trimmed and untrimmed spline surfaces and a connectivity graph. Based on algorithms for trapezoidation of polygons, partitioning of polygons, surface intersection and ray-shooting, we compute the boundaries of the resulting solids after the Boolean operation. 
Abstract-found: 1
Intro-found: 1
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: At the same time, the field of geometric modeling has been developed to model classes of piecewise surfaces based on particular conditions of shape and smoothness. Such models are called sculptured solids. There is considerable interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89] </ref>. However, the major bottlenecks are in performing robust, efficient and accurate Boolean operations on the sculptured models. The topology of a surface patch becomes quite complicated when Boolean operations are performed and finding a convenient representation for these topologies has been a major challenge.
Reference: [KM94] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <type> Technical Report TR94-062, </type> <institution> Department of Computer Science, University of North Car-olina, </institution> <year> 1994. </year>
Reference-contexts: This is followed by a stack-based traversal of the polygon boundary and partitions are generated when proper combinations of labelled intersections are found [KNM94]. Computing the intersection curve between two parametrically defined surfaces forms an important ingredient of the CSG algorithm. We use the algorithm in <ref> [KM94] </ref> which computes all the components of the intersection curve between a pair of patches in piecewise linear form. The accuracy of the intersection curve is user-controlled.
Reference: [KNM94] <author> S. Krishnan, A. Narkhede, and D. Manocha. </author> <title> Boole: A system to compute boolean combinations of sculptured solids. </title> <type> Technical Report TR95-008, </type> <institution> Department of Computer Science, University of North Car-olina, </institution> <year> 1994. </year>
Reference-contexts: This is followed by a stack-based traversal of the polygon boundary and partitions are generated when proper combinations of labelled intersections are found <ref> [KNM94] </ref>. Computing the intersection curve between two parametrically defined surfaces forms an important ingredient of the CSG algorithm. We use the algorithm in [KM94] which computes all the components of the intersection curve between a pair of patches in piecewise linear form. The accuracy of the intersection curve is user-controlled. <p> The resulting solid consists of 96 trimmed patches each of degree 2 fi 2 and took 135 seconds to gener ate. The complete details of the algorithm and its performance are presented in <ref> [KNM94] </ref>. Acknowledgements We thank Electric Boat for letting us use the CSG representation of the roller model and the UNC Walkthru group for their support.
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, Cal-ifornia, </address> <year> 1990. </year>
Reference-contexts: The second step of the algorithm uses the graph structure of each solid, and depending on the set operation, computes the new solid and its associated graph structure. The overall algorithm makes use of a number of recently developed geometric algorithms for linear programming <ref> [Sei90] </ref>, trapezoidation of polygons [Sei91], partition of polygonal domains and ray-shooting. 2 Geometric Algorithms used in the System The CSG algorithm is based on a number of geometric operations.
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Computational Geometry Theory & Applications, </journal> <volume> 1(1) </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: The second step of the algorithm uses the graph structure of each solid, and depending on the set operation, computes the new solid and its associated graph structure. The overall algorithm makes use of a number of recently developed geometric algorithms for linear programming [Sei90], trapezoidation of polygons <ref> [Sei91] </ref>, partition of polygonal domains and ray-shooting. 2 Geometric Algorithms used in the System The CSG algorithm is based on a number of geometric operations. <p> Some of the algorithms used are not necessarily the most optimal in terms of time complexity. In such cases, we have traded implementation simplicity for efficiency. This section briefly discusses these algorithms. We use Seidel's algorithm <ref> [Sei91] </ref> to construct the horizontal decomposition of a simple polygon. This enables us to answer point location queries in O (log n) time and find one point inside the polygon in constant time. It is an incremental randomized algorithm whose expected complexity is O (n log fl n).
References-found: 5

