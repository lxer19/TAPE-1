URL: http://www.cs.princeton.edu/~dpd/Papers/TalDobkin.ps.Z
Refering-URL: http://www.cs.princeton.edu/~dpd/Research.html
Root-URL: http://www.cs.princeton.edu
Title: Visualization of Geometric Algorithms  
Author: Ayellet Tal, David Dobkin 
Abstract: This paper investigates the visualization of geometric algorithms. We discuss how limiting the domain makes it possible to create a system that enables others to use it easily. Knowledge about the domain can be very helpful in building a system which automates large parts of the user's task. A system can be designed to isolate the user from any concern about how graphics is done. The application need only specify "what" happens and need not be concerned with "how" to make it happen on the screen. We develop a conceptual model and a framework for experimenting with it. We also present a system, GASP, which implements this model. GASP allows quick generation of three-dimensional geometric algorithm visualizations, even for highly complex algorithms. It also provides a visual debugging facility for geometric computing. We show the utility of GASP by presenting a variety of examples. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.M. Baecker. </author> <title> Sorting out sorting (video). </title> <note> In SIGGRAPH Video Review 7, </note> <year> 1981. </year>
Reference: [2] <author> T. Banchoff and C. Strauss. </author> <title> Complex Function Graphs, Dupin Cylinders, Gauss Map, and Veronese Surface. </title> <institution> Computer Geometry Films. Brown University, </institution> <year> 1977. </year>
Reference: [3] <author> R. Beach and M. Stone. </author> <title> Graphical style: Towards high quality illustration. </title> <booktitle> In Computer Graphics (Proc. </booktitle> <volume> SIG-GRAPH '83), </volume> <pages> pages 127-135, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: We define a similar interface for animating algorithms. The interface we propose in response to these needs consists of library calls for the naive-programmer and external ASCII style files for the advanced programmer. The idea of using style files in not new in computer graphics (e.g., see <ref> [3] </ref>). Its use in animation systems, however, is novel. The naive-programmer writes short snippets of C code to define the structure of the animation. The animation system knows how to generate an appropriate animation from this C code.
Reference: [4] <author> H. Bronnimann. </author> <title> Almost optimal polyhedral separators (video). </title> <booktitle> In Third Annual Video Review of Computational Geometry, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This is important because complex algorithms are those that benefit the most from being visualized. We have shown several animations of geometric algorithms. The system is now at the stage where other people are starting to use it. In fact, three <ref> [4] </ref>, [10], [30] out of the eight segments of animations which appeared in the Third Annual Video Review of Computational Geometry were created by GASP. Two of them were created by the geometers who made movies describing their newly discovered algorithms. They took less than a week to produce.
Reference: [5] <author> M.H. Brown. </author> <title> Algorithm Animation. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference: [6] <author> M.H. Brown. </author> <title> Exploring algorithms using Balsa-II. </title> <journal> Computer, </journal> <volume> 21(5) </volume> <pages> 14-36, </pages> <month> May </month> <year> 1988. </year>
Reference: [7] <author> M.H. Brown. Zeus: </author> <title> A system for algorithm animation and multi-view editing. </title> <booktitle> In 1991 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 10-17, </pages> <month> October </month> <year> 1991. </year>
Reference: [8] <author> M.H. Brown and R. Sedgewick. </author> <title> Techniques for algorithm animation. </title> <journal> IEEE Software, </journal> <volume> 2(1) </volume> <pages> 28-39, </pages> <month> January </month> <year> 1985. </year>
Reference: [9] <author> B. Chazelle and H. Edelsbrunner. </author> <title> An optimal algorithm for intersecting line segments in the plane. </title> <journal> Journal of the ACM, </journal> <volume> 39(1) </volume> <pages> 1-54, </pages> <year> 1992. </year>
Reference-contexts: Objects that Cannot be Taken Apart with Two Hands Using Translation Fig. 6. Objects that Cannot be Taken Apart with Two Hands Using Isometries 12 C. Line Segment Intersections This example, which is based on <ref> [9] </ref>, is a short clip from an animation ([29]) which shows a line segment intersection algorithm in action and illustrates its most important features. The goal is to use the animation as an aid in explaining a highly complex algorithm.
Reference: [10] <author> D. Dobkin and D. Gunopulos. </author> <title> Computing the rectangle discrepancy (video). </title> <booktitle> In Third Annual Video Review of Computational Geometry, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This is important because complex algorithms are those that benefit the most from being visualized. We have shown several animations of geometric algorithms. The system is now at the stage where other people are starting to use it. In fact, three [4], <ref> [10] </ref>, [30] out of the eight segments of animations which appeared in the Third Annual Video Review of Computational Geometry were created by GASP. Two of them were created by the geometers who made movies describing their newly discovered algorithms. They took less than a week to produce.
Reference: [11] <author> D. Dobkin and D. Kirkpatrick. </author> <title> Fast detection of polyhedral intersections. </title> <journal> Journal of Algorithms, </journal> <volume> 6 </volume> <pages> 381-392, </pages> <year> 1985. </year>
Reference-contexts: Excerpts from the animations are given in a videotape [30]. For each case we present the problem of study, the goal in creating the animation and the animation itself. A. Building and Using Polyhedral Hierarchies This algorithm, which is based on <ref> [11] </ref>, [12], builds an advanced data structure for a polyhedron and uses it for intersecting a polyhedron and a plane. The main component of the algorithm is a preprocessing method for convex polyhedra in 3D which creates a linear-size data structure for the polyhedron called its Hierarchical Representation.
Reference: [12] <author> D. Dobkin and D. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra a unified approach. </title> <booktitle> ICALP, </booktitle> <volume> LNCS 443, </volume> <pages> pages 400-413, </pages> <year> 1990. </year>
Reference-contexts: Excerpts from the animations are given in a videotape [30]. For each case we present the problem of study, the goal in creating the animation and the animation itself. A. Building and Using Polyhedral Hierarchies This algorithm, which is based on [11], <ref> [12] </ref>, builds an advanced data structure for a polyhedron and uses it for intersecting a polyhedron and a plane. The main component of the algorithm is a preprocessing method for convex polyhedra in 3D which creates a linear-size data structure for the polyhedron called its Hierarchical Representation.
Reference: [13] <author> D. Dobkin and A. Tal. </author> <title> Building and using polyhedral hierarchies (video). </title> <booktitle> In The Ninth Annual ACM Symposium on Computational Geometry, </booktitle> <month> May </month> <year> 1993. </year>
Reference: [14] <author> Open Software Foundation. </author> <title> OSF/Motif Programmer's Reference. </title> <publisher> Prentice Hall, Inc., </publisher> <year> 1991. </year>
Reference-contexts: At the end, when the array is sorted, the colors of the elements are "sorted" as well (Fig. 12). VI. Implementation GASP is written in C and runs under UNIX on a Silicon Graphics Iris. It is built on top of Inventor [28] and Motif/Xt <ref> [14] </ref>. GASP consists of two processes which communicate with each other through messages, as shown in Fig. 13. Process 1 includes the collection of procedures which make up the programmer interface. Process 2 is responsible for executing the animation and handling the viewer's input.
Reference: [15] <author> C. Gunn. </author> <title> Discrete groups and visualization of three-dimensional manifolds. </title> <booktitle> In Computer Graphics (Proc. </booktitle> <volume> SIG-GRAPH '93), </volume> <pages> pages 255-262, </pages> <month> August </month> <year> 1993. </year>
Reference: [16] <author> C. Gunn and D. Maxell. </author> <title> Not Knot (video). </title> <editor> Jones and Bartlett, </editor> <year> 1991. </year>
Reference: [17] <author> L. Lamport. </author> <title> A Document Preparation System L a T E X User's Guide and Reference Manual. </title> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Finally, there are times when the creator of the animation does want to change the viewing aspects (e.g., colors) of the animation. By analogy, there are times when the writer of a document would like to change fonts and margins. Systems such as L a T E X <ref> [17] </ref> provide this flexibility. The user can change many defaults by creating personal style files of L a T E X . To do it, the user needs additional knowledge. This is the third type of user, the advanced programmer. We define a similar interface for animating algorithms.
Reference: [18] <author> D. Lerner and D. Asimov. </author> <title> The sudanese mobius band (video). </title> <note> In SIGGRAPH Video Review, </note> <year> 1984. </year>
Reference: [19] <author> S. Levy, D. Maxwell, and T. Munzner. </author> <note> Outside in (video). In SIGGRAPH Video Review, </note> <year> 1994. </year>
Reference: [20] <author> A. Marcus. </author> <title> Graphics Design for Electronic Documents and User Interfaces. </title> <publisher> ACM Press. </publisher>
Reference-contexts: Different normals defined for the faces of the mesh influence the colors of the faces. We can modify all those parameters. Special attention is given to the issue of colors. "Color is the most sophisticated and complex of the visible language components" <ref> [20] </ref>. GASP chooses colors for the objects and for the features it creates. GASP maintains palettes of preselected colors, and picks colors which are appropriate for the device they are presented on (i.e., screen or video). This is especially important for inexperienced users.
Reference: [21] <author> N. Max. </author> <title> Turning a Sphere Inside Out (video). </title> <booktitle> International Film Bureau, </booktitle> <year> 1977. </year>
Reference: [22] <author> M.A. Najork and M.H. Brown. </author> <title> A library for visualizing combinatorial structures. </title> <booktitle> In Proc. '94 Visualization, </booktitle> <pages> pages 164-171, </pages> <month> October </month> <year> 1994. </year>
Reference: [23] <author> B.A. Price, R.M. Baecker, </author> <title> and I.S. Small. A principles taxonomy of software visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 4 </volume> <pages> 211-266, </pages> <year> 1993. </year>
Reference: [24] <author> P. Schorn. </author> <title> Robust Algorithms in a Program Library for Geometric Computation. </title> <type> PhD thesis, </type> <institution> Informatik-dissertationen eth zurich, </institution> <year> 1992. </year>
Reference: [25] <author> R. Sedgewick. </author> <title> Algorithms. </title> <publisher> Addison Wesley, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference-contexts: D. Heapsort Though GASP was originally meant to facilitate animations that involve three-dimensional geometric computation, we found that the interface we provide actually facilitates the animation of any algorithm that involves the display of three dimensional geometry, among them many of the algorithms in <ref> [25] </ref>. To show the added power of the system, we chose to animate heapsort. Heapsort is an efficient sorting algorithm that is defined from the basic operations on heaps. The idea is to build a heap containing the elements to be sorted and then remove them all in order.
Reference: [26] <author> J. Snoeyink and J. Stolfi. </author> <title> Objects that cannot be taken apart with two hands. </title> <booktitle> In The Ninth Annual ACM Sym 16 posium on Computational Geometry, </booktitle> <pages> pages 247-256, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The control panel of GASP allows us to fast-forward over these initial fragments to get to the section of interest. Single-stepping through the section under consideration and rewinding are also highly valuable tools. B. Objects that Cannot be Taken Apart with Two Hands This animation is based on <ref> [26] </ref>. This paper shows a configuration of six tetrahedra that cannot be taken apart by translation with two hands (Fig. 5). Then, it presents a configuration of thirty objects that cannot be taken apart by applying an isometry to any proper subset (Fig. 6).
Reference: [27] <author> J. Stasko. </author> <title> TANGO: A framework and system for algorithm animation. </title> <journal> Computer, </journal> <volume> 23(9) </volume> <pages> 27-39, </pages> <month> September </month> <year> 1990. </year>
Reference: [28] <author> P.S. Strauss and R. Carey. </author> <title> An object-oriented 3D graphics toolkit. </title> <booktitle> In Computer Graphics (Proc. SIGGRAPH '92), </booktitle> <pages> pages 341-349, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: In addition to the creation and deletion of trees and lists, GASP supports the addition of nodes, and the removal of nodes and subtrees. Views: A view is more than a window used for rendering. Built on top of Inventor's Examiner-viewer <ref> [28] </ref>, a view contains a camera and a light model. It also contains buttons and thumbwheels that allows use of the mouse to modify the camera placement in the scene. Text and titles: Text objects and title objects define text strings to be rendered to the screen. <p> GASP's environment allows us to do all these. B. The Algorithm Window We observe the algorithm in the algorithm windows (at the bottom of Fig. 1). Algorithm windows use Inventor's Examiner-Viewer <ref> [28] </ref> and thus are decorated with thumbwheels and push buttons. Thumbwheels let us rotate and scale the scene. We use the left thumbwheel for a screen X rotation. We use the bottom thumbwheel for a screen Y rotation. We use the right thumbwheel for dolly (in and out of screen). <p> At the end, when the array is sorted, the colors of the elements are "sorted" as well (Fig. 12). VI. Implementation GASP is written in C and runs under UNIX on a Silicon Graphics Iris. It is built on top of Inventor <ref> [28] </ref> and Motif/Xt [14]. GASP consists of two processes which communicate with each other through messages, as shown in Fig. 13. Process 1 includes the collection of procedures which make up the programmer interface. Process 2 is responsible for executing the animation and handling the viewer's input.
Reference: [29] <author> A. Tal, B. Chazelle, and D. </author> <title> Dobkin. </title> <booktitle> The New-Jersey line-segment saw massacre (video). In The Eighth Annual ACM Symposium on Computational Geometry, </booktitle> <year> 1992. </year>
Reference: [30] <author> A. Tal and D. Dobkin. </author> <title> GASP a system to facilitate animating geometric algorithms (video). </title> <booktitle> In Third Annual Video Review of Computational Geometry, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Voice is also supported by GASP. The viewer can listen to the explanations that appear in the text window. V. GASP in Action In this section we describe different scenarios for which we produced animations to accompany geometric papers. Excerpts from the animations are given in a videotape <ref> [30] </ref>. For each case we present the problem of study, the goal in creating the animation and the animation itself. A. <p> This is important because complex algorithms are those that benefit the most from being visualized. We have shown several animations of geometric algorithms. The system is now at the stage where other people are starting to use it. In fact, three [4], [10], <ref> [30] </ref> out of the eight segments of animations which appeared in the Third Annual Video Review of Computational Geometry were created by GASP. Two of them were created by the geometers who made movies describing their newly discovered algorithms. They took less than a week to produce.
Reference: [31] <author> A. Tal and D. Dobkin. </author> <title> GASP a system for visualizing geometric algorithms. </title> <booktitle> In Proc. '94 Visualization, </booktitle> <pages> pages 149-155, </pages> <month> October </month> <year> 1994. </year>
Reference: [32] <author> J.E. Taylor. </author> <title> Computing Optimal Geometries. Selected Lectures in Mathematics, </title> <publisher> American Mathematical Society, </publisher> <year> 1991. </year>
Reference: [33] <author> J.E. Taylor. </author> <title> Computational Crystal Growers Workshop. Selected Lectures in Mathematics, </title> <publisher> American Mathematical Society, </publisher> <year> 1992. </year>
Reference: [34] <author> S. Wolfram. </author> <title> Mathematica A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1988. </year>
References-found: 34

