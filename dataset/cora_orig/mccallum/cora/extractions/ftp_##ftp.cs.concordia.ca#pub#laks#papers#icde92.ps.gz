URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/icde92.ps.gz
Refering-URL: http://karna.cs.umd.edu:3264/people/godfrey/cites.html
Root-URL: 
Title: ON SEMANTIC QUERY OPTIMIZATION IN DEDUCTIVE DATABASES  
Author: Laks V. S. Lakshmanan yfl and R. Missaoui zy 
Address: UQAM, Montreal, Canada  
Affiliation: Dept. of Computer Science, Concordia University, Montreal, Canada Departement de Mathematiques et d'Informatique,  
Date: February 1992.  
Note: Appears in: Int. Conf. on Data Engineering, Phoenix, AZ,  
Abstract: The focus of this paper is semantic query optimization in the presence of integrity constraints (ICs) such as inclusion dependencies (INDs) and context dependencies (CDs). INDs are well known to arise naturally in many applications. CDs, introduced earlier in a different context, can capture natural semantic constraints that cannot be expressed using INDs. Besides, some CDs can also be inferred from given INDs, and further have the advantage of being more directly geared toward semantic query optimization than INDs. We provide an inference mechanism for reasoning with CDs and develop efficient algorithms for semantic query optimization using them. The contributions of this paper are sufficient conditions and algorithms for the detection of redundant atoms and rules in a class of linear recursive programs, arising in deductive databases. We take a program transformation approach to semantic query optimization. As a consequence, our approach has the following advantages: (i) our technique is independent of the query processing paradigm used it may be top-down or bottom-up; (ii) the method is independent of a particular binding pattern of the query or even of the query predicate; and (iii) since optimization is done statically in one shot, our method does not incur run-time overheads such as maintenance of the query subexpressions processed in a loop of the bottom-up evaluation. Our results and techniques apply to conventional relational queries as well as (recursive) queries arising in deductive databases. 
Abstract-found: 1
Intro-found: 1
Reference: [BR 86] <author> F. Bancilhon and R. Ramakrishnan, </author> <title> "An amateur's introduction to recursive query processing strategies," </title> <booktitle> ACM-SIGMOD Conf., </booktitle> <year> 1986, </year> <pages> pp. 16-52. </pages>
Reference-contexts: A significant amount of research has been done on efficient processing of recursive queries (see <ref> [BR 86, CGT 89] </ref> for surveys). Any typical database application always has associated ICs that define which database states are meaningful with respect to the application modeled (see Vardi [V 88] for a survey of ICs studied in the literature).
Reference: [CGT 89] <author> S. Ceri, G. Gottlob, and L. Tanca, </author> <title> "What You Always Wanted to Know About Datalog (And Never Dared to Ask)," </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <month> (March </month> <year> 1989), </year> <pages> 146-166. </pages>
Reference-contexts: A significant amount of research has been done on efficient processing of recursive queries (see <ref> [BR 86, CGT 89] </ref> for surveys). Any typical database application always has associated ICs that define which database states are meaningful with respect to the application modeled (see Vardi [V 88] for a survey of ICs studied in the literature).
Reference: [CFP 84] <author> M. Casanova, R. Fagin, and C. Papadimitriou, </author> <title> "Inclusion dependencies and their interaction with functional dependencies," </title> <journal> JCSS 28,1 (1984), </journal> <pages> 9-59. </pages>
Reference-contexts: It asserts that every "S-value" in r i is also an "S-value" in r j . Inclusion dependencies are known to arise naturally in database applications <ref> [CFP 84] </ref>. The integrity constraints considered in this paper are those involving edb relations only. It should be noted these are among the most naturally arising constraints in database applications. In the sequel, by a database scheme, we shall always mean such a scheme for the edb relations.
Reference: [CGM 88] <author> U.S. Chakravarthy, J. Grant, and J. Minker, </author> <title> "Foundations of semantic query optimization for deductive databases," in Foundations of Deductive Databases and Logic Programming, </title> <editor> (ed. J. Minker), </editor> <publisher> Morgan Kauffman, </publisher> <year> 1988, </year> <pages> pp. 243-274. </pages>
Reference-contexts: A major concern with deductive databases is the efficient processing of recursive queries for which several efficient processing strategies have been developed ([BR 87, CGT 89] contain surveys). Chakravarthy et al <ref> [CGM 88] </ref> provides a foundation for semantic optimization in deductive databases without recursive rules. <p> There are essentially two approaches for recursive queries. The first approach, based on the evaluation paradigm assumes that queries will be evaluated bottom-up. Since the various subqueries processed inside the bottom-up evaluation loop are nonrecursive, this approach makes a straightforward extension of the residue technique introduced in <ref> [CGM 88] </ref> to the recursive case. Thus, residues are applied to the subqueries in each iteration of the bottom-up evaluation. Chakravarthy et al [CGM 90] and Lee and Han [LH 88] follow this approach. <p> Any typical database application always has associated ICs that define which database states are meaningful with respect to the application modeled (see Vardi [V 88] for a survey of ICs studied in the literature). This semantic knowledge about a database can be exploited in query optimization. Chakravarthy et al <ref> [CGM 88] </ref> provides a broad motivation for semantic optimization. In this section, we shall first see how inclusion dependencies (INDs), which are one of the most fundamental and natural type of ICs, can be used in query optimization. Example 1.
Reference: [CGM 90] <author> U.S. Chakravarthy, J. Grant, and J. Minker, </author> <title> "Logic Based Approach to Semantic Query Optimization," </title> <journal> ACM TODS, </journal> <month> (June </month> <year> 1990), </year> <pages> 162-207. </pages>
Reference-contexts: Indeed, they constitute a rich source of semantic knowledge about the application, which can be fruitfully employed in speeding up query evaluation. Several approaches for semantic query optimization have been proposed in the literature. The reader is referred to <ref> [CGM 90] </ref> for a detailed survey of semantic optimization on relational as well as deductive databases. For want of space, we only review works on deductive databases here. <p> Since the various subqueries processed inside the bottom-up evaluation loop are nonrecursive, this approach makes a straightforward extension of the residue technique introduced in [CGM 88] to the recursive case. Thus, residues are applied to the subqueries in each iteration of the bottom-up evaluation. Chakravarthy et al <ref> [CGM 90] </ref> and Lee and Han [LH 88] follow this approach. The former extends the residue technique to all recursive queries while the latter specializes this to a subclass of linear recursive queries.
Reference: [DDLM 87] <author> A. D'Atri, P. Di Felice, V.S. Lakshmanan, and M. Moscarini, </author> <title> "Global context dependencies and their properties," </title> <booktitle> Proc. 1st Symp. Math. Foundations of Database Systems, </booktitle> <address> Dresden, GDR, </address> <month> Jan </month> <year> 1987. </year>
Reference-contexts: query: thus any query involving the idb predicates will be evaluated much more efficiently using the transformed rules, and (ii) the transformation makes no assumption about the query processing paradigm used: it may be top-down or bottom-up. 2 Let us next consider context (and global context) dependencies (CDs/GCDs), introduced in <ref> [DDLM 87] </ref> in a different context (see Section 4 for a formal definition). These are constraints that generalize INDs. They assert that the results computed by certain algebraic expressions are contained in others. The next example motivates these constraints as well as their usefulness in semantic optimization.
Reference: [GM 91] <author> R. Godin and R. Missaoui, </author> <title> "Semantic query optimization using inter-relational functional dependencies," </title> <booktitle> Proc. Hawaii Int. Conf. on System Sciences (HICSS-24), </booktitle> <month> Jan 8-11, </month> <year> 1991, </year> <title> vol. </title> <booktitle> III, </booktitle> <pages> pp. 368-375. </pages>
Reference-contexts: As a second line of attack, we provide sufficient conditions for a rule in a program to be redundant and derive a polynomial time algorithm for detecting redundant rules according to the criteria developed. A related work on inclusion dependencies is Godin and Missaoui <ref> [GM 91] </ref> which develops semantic optimization procedures in the context of relational databases. For the basic definitions on relational and deductive databases, the reader is referred to [Ul 88-89]. For want of space, we only give the most relevant definitions here.
Reference: [L 91] <author> V.S. Lakshmanan, </author> <title> "Semantic Query Optimization Using Inclusion, Context, and Global Context Dependencies in Deductive Databases," </title> <type> Tech. Rep., </type> <institution> Dept. of Comp. Science, Concordia University, </institution> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: We can readily show Lemma 1. The axioms and inference rules cd0-cd8 are sound. 2 Lemma 2. The axioms and inference rules above are independent. lational database literature, while the logical notation is the preferred one for deductive databases. We use both notations interchangeably, as appropriate. 2 In <ref> [L 91] </ref> we show that a restricted version of the above inference system is also complete with respect to GCDs, as well as provide a polynomial time algorithm for testing if a GCD is logically implied by a given set of GCDs.
Reference: [LH 91] <author> V.S. Lakshmanan and H. Hernandez, </author> <title> "Structural Query Optimization: A Uniform Framework for Semantic Query Optmization in Deductive Databases," </title> <booktitle> Proc. ACM SIGACT-SIGMOD Symp. Principles of Database Systems, </booktitle> <address> Denver, </address> <month> May 29-31, </month> <year> 1991, </year> <pages> pp. 102-114. </pages>
Reference-contexts: This problem is in general undecidable [S 87] and Sagiv's procedure should be regarded as a sufficiency test for atoms or rules to be removable from a program. Further, his procedure may not terminate when dealing with embedded constraints. Lakshmanan and Hernandez <ref> [LH 91] </ref> studies the problem of detecting and eliminating redundant subgoal occurrences in proof-trees generated by programs in the presence of functional dependencies, and gives a syntactic characterization of when the number of times a subgoal is needed can be bounded, for a class of single linear recursive rule programs. <p> We need certain auxiliary notions which are explained 3 Example 1 illustrates this for nonrecursive rules. Examples for the recursive case can be found in Sections 5.1 and 5.2. in terms of the hypergraph representation of rules intro-duced in <ref> [LH 91] </ref>. A rule (body) may be represented naturally as a hypergraph by letting the variables occurring in the body be the nodes and the predicates be the (hyper)edges.
Reference: [LH 88] <author> S. Lee and J. Han, </author> <title> "Semantic query optimization in recursive databases," </title> <booktitle> Proc. IEEE Int. Conf. Data Eng., </booktitle> <year> 1988, </year> <pages> pp. 444-451. </pages>
Reference-contexts: Thus, residues are applied to the subqueries in each iteration of the bottom-up evaluation. Chakravarthy et al [CGM 90] and Lee and Han <ref> [LH 88] </ref> follow this approach. The former extends the residue technique to all recursive queries while the latter specializes this to a subclass of linear recursive queries.
Reference: [LHQ 91] <author> S.-G. Lee, L.J. Henschen, and G.Z. Qadah, </author> <title> "Semantic Query Reformulation in Deductive Databases," </title> <booktitle> Proc. IEEE Int. Conf. Data Eng., </booktitle> <address> April 8-12, 1991, Kobe, Japan, </address> <pages> pp. 232-239. </pages>
Reference-contexts: Their approach is to compile queries with respect to given ICs and extract "residues" which are then imposed on the queries in order to reduce the generation of useless facts or to eliminate redundant joins during evaluation. Lee et al <ref> [LHQ 91] </ref> proposes a way of determining relvant ICs for semantically reformulating queries involving joins/unions of predicates, for nonrecursive deductive databases. There are essentially two approaches for recursive queries. The first approach, based on the evaluation paradigm assumes that queries will be evaluated bottom-up.
Reference: [S 87] <author> Y. Sagiv, </author> <title> "Optimizing datalog programs," </title> <booktitle> 6th PODS, </booktitle> <year> 1987, </year> <pages> pp. 349-362. </pages>
Reference-contexts: The problem is then detecting and eliminating these redundancies by transforming the original program into an equivalent one (w.r.t. ICs) free from such redundancies. Sagiv <ref> [S 87] </ref> shows how to exploit ICs in the form of tuple generating dependencies to eliminate redundant atoms and rules from a program, and develops a useful procedure for this purpose which runs in time exponential in the size of the program. This problem is in general undecidable [S 87] and <p> Sagiv <ref> [S 87] </ref> shows how to exploit ICs in the form of tuple generating dependencies to eliminate redundant atoms and rules from a program, and develops a useful procedure for this purpose which runs in time exponential in the size of the program. This problem is in general undecidable [S 87] and Sagiv's procedure should be regarded as a sufficiency test for atoms or rules to be removable from a program. Further, his procedure may not terminate when dealing with embedded constraints. <p> It is known that the problem of detecting program containment (and hence equivalence) is undecidable [Sh 86]. Sagiv <ref> [S 87] </ref> gives a useful procedure for testing uniform containment (which is a stronger form of containment), which takes exponential time in the size of the program. Our aim here is a polynomial time sufficiency test for detecting this type of redundancy.
Reference: [Sh 86] <author> O. Shmueli, </author> <title> "Decidability and Expressiveness Aspects of Logic Queries," </title> <booktitle> Proc. ACM SIGACT-SIGMOD Symp. Principles of Database Systems, </booktitle> <year> 1986, </year> <pages> 237-249. </pages>
Reference-contexts: It is known that the problem of detecting program containment (and hence equivalence) is undecidable <ref> [Sh 86] </ref>. Sagiv [S 87] gives a useful procedure for testing uniform containment (which is a stronger form of containment), which takes exponential time in the size of the program. Our aim here is a polynomial time sufficiency test for detecting this type of redundancy.
Reference: [T 91] <author> S. Tsur, </author> <title> "Deductive Databases in Action," </title> <booktitle> PODS 1991 Invited Talk, Proc. ACM SIGACT-SIGMOD Symp. Principles of Database Systems, </booktitle> <address> Denver, </address> <month> May 29-31, </month> <year> 1991, </year> <pages> pp. 142-153. </pages>
Reference-contexts: databases, with their increased expressive power and inferencing capability, have been recognized as one of the important models fl This author's work was supported by grants from NSERC (Canada) and FCAR (Quebec) y Work supported by NSERC Grant # OGP0041899 and FCAR Grant # 91-NC-0446 for the next generation databases <ref> [T 91] </ref>. A major concern with deductive databases is the efficient processing of recursive queries for which several efficient processing strategies have been developed ([BR 87, CGT 89] contain surveys). Chakravarthy et al [CGM 88] provides a foundation for semantic optimization in deductive databases without recursive rules.
Reference: [U 88-89] <author> J.D. Ullman, </author> <title> Principles of Database and Knowledge-Base Systems, vol I & II, Comp. </title> <publisher> Sci. Press, </publisher> <address> MD., </address> <pages> 1988-89. </pages>
Reference: [V 88] <author> M.Y. Vardi, </author> <title> "Fundamentals of dependency theory," </title> <booktitle> in Trends in Theor. Comp. Science, </booktitle> <editor> (ed. I. Borger), </editor> <booktitle> Comp. </booktitle> <publisher> Sci. Press, </publisher> <address> MD., </address> <year> 1988. </year>
Reference-contexts: A significant amount of research has been done on efficient processing of recursive queries (see [BR 86, CGT 89] for surveys). Any typical database application always has associated ICs that define which database states are meaningful with respect to the application modeled (see Vardi <ref> [V 88] </ref> for a survey of ICs studied in the literature). This semantic knowledge about a database can be exploited in query optimization. Chakravarthy et al [CGM 88] provides a broad motivation for semantic optimization.
References-found: 16

