URL: http://www.cs.cornell.edu/Info/People/pearson/mbs.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/pearson/pearson.html
Root-URL: 
Title: Efficient Sequential and Parallel Algorithms for Maximal Bipartite Sets  
Author: David Pearson Vijay V. Vazirani 
Address: Ithaca, NY 14853  New Delhi 110016, India  
Affiliation: Computer Science Department Cornell University  Department of Computer Science and Engineering Indian Institute of Technology  
Abstract: A maximal bipartite set (MBS) in an undirected graph G = (V; E) is a maximal collection of vertices B V whose induced subgraph is bipartite. In this paper we present efficient sequential (linear time) and parallel (NC) algorithms for constructing an MBS.
Abstract-found: 1
Intro-found: 1
Reference: [ABI] <author> N. ALON, L. BABAI and A. ITAI, </author> <title> A Fast and Simple Randomized Parallel Algorithm for the Maximal Independent Set Problem, </title> <editor> J. </editor> <booktitle> Algorithms 7 (1986), </booktitle> <pages> 567-583. </pages>
Reference: [Cook] <author> S. A. COOK, </author> <title> Taxonomy of Problems with Fast Parallel Algorithms, </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> 2-22. </pages>
Reference-contexts: We will establish in lemma 3 that the number of iterations is O (log n), making the total running time of the MBS algorithm O (log 3 n). This establishes that the MBS problem is in N C 3 (see <ref> [Cook] </ref> for a discussion of the class N C). Lemma 3 The number of iterations required by the MBS algorithm is O (log n). Proof. To see why O (log n) iterations are sufficient, it is convenient to start from the end and work backward to the beginning. <p> These are still open problems. 3.3 Finding the lexicographically first MBS We will show that the problem of finding the lex-first MBS is P -complete for N C, thereby giving evidence that it is not parallelizable. Cook, in <ref> [Cook] </ref> proved that finding the lexicographically first MIS is P - complete (actually his proof was for the equivalent problem, maximal clique).
Reference: [GJ] <author> M. R. GAREY and D. S. JOHNSON, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York (1979). </address>
Reference-contexts: This is where the difficulty of our problem lies. The extension to maximal k-colorable subgraphs, k 3, is N P -hard since the problem of deciding whether a graph is k-colorable is N P -complete for k 3 <ref> [GJ] </ref>. 2 Sequential MBS algorithms A straightforward algorithm for finding an MBS is to greedily add vertices as long as the induced subgraph on the chosen vertices remains bipartite. Since testing for bipartiteness can be done in O (m) time, this is an O (mn) algorithm.
Reference: [GS] <author> M. GOLDBERG and T. SPENCER, </author> <title> A New Parallel Algorithm for the Maximal Independent Set Problem, </title> <journal> SIAM J. Computing 18 (1989), </journal> <pages> 419-427. </pages>
Reference-contexts: 1 Introduction In the last few years several efficient parallel algorithms have appeared for the maximal independent set (MIS) problem <ref> [GS, KW, Luby] </ref>. This may be thought of as the problem of finding a maximal 1-colorable set in a given graph.
Reference: [Har] <author> F. HARARY, </author> <title> Graph Theory, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1969. </year> <month> 10 </month>
Reference: [KW] <author> R. M. KARP and A. WIGDERSON, </author> <title> A Fast Parallel Algorithm for the Max--imal Independent Set Problem, </title> <booktitle> in Proc. 16th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 266-272, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction In the last few years several efficient parallel algorithms have appeared for the maximal independent set (MIS) problem <ref> [GS, KW, Luby] </ref>. This may be thought of as the problem of finding a maximal 1-colorable set in a given graph.
Reference: [Luby] <author> M. LUBY, </author> <title> A Simple Parallel Algorithm for the Maximal Independent Set Problem, </title> <journal> SIAM J. Computing 15 (1986), </journal> <pages> 1036-1053. </pages>
Reference-contexts: 1 Introduction In the last few years several efficient parallel algorithms have appeared for the maximal independent set (MIS) problem <ref> [GS, KW, Luby] </ref>. This may be thought of as the problem of finding a maximal 1-colorable set in a given graph. <p> This contradicts the fact that the maximal independent set I was null. 2 Step 3 of the algorithm can be performed using Luby's MIS algorithm in time O (log 2 n) on an EREW PRAM using O (n 4 ) processors deterministically, or O (n 2 ) processors using randomization <ref> [Luby] </ref>. Step 2, forming the incompatibility relation, can also be implemented in O (log 2 n) time on n 3 processors using matrix multiplication and matrix powers.
Reference: [MS] <author> E. W. MAYR and A. SUBRAMANIAN, </author> <title> The Complexity of Circuit Value and Network Stability, </title> <booktitle> in Proc. 4th Structure in Complexity Theory, </booktitle> <pages> 114-123, </pages> <year> 1989. </year>
Reference-contexts: The main difficulty in carrying out a P -completeness proof is simulating fan-out. A similar difficulty arises in carrying out a P -completeness proof for lex-first maximal matching; however, 9 this problem has been shown to be CC-complete <ref> [MS] </ref> (a weaker evidence of inherent sequentiality). It would be interesting to show a similar result for the lex-first MBG problem. 5 Summary Given a graph G = (V; E), let n = jV j and m = jEj. The following table summarizes our results for the problems discussed above.
Reference: [Tar] <author> R. E. TARJAN, </author> <title> Efficiency of a good but not linear set union algorithm, </title> <journal> J. Assoc. Computing Mach. </journal> <volume> 22 (1975), </volume> <pages> 215-225. 11 </pages>
Reference-contexts: So its total running time is O (mff (m; n)), where ff (m; n) is the functional inverse of Ackerman's function, the smallest integer i such that A (i; bm=nc) &gt; log n) <ref> [Tar] </ref>. 3 A parallel MBS algorithm This algorithm proceeds in stages, maintaining a bipartite set which is extended incrementally until it cannot be extended any further. Let G = (V; E) be the 3 original graph, and let B V be the current bipartite set.
References-found: 9

