URL: http://www.cc.gatech.edu/systems/papers/Silva98CDR.ps
Refering-URL: http://www.cs.gatech.edu/people/home/eisen/
Root-URL: 
Email: dilma@ime.usp.br  fschwan,eiseng@cc.gatech.edu  
Title: Configurable Distributed Retrieval of Scientific Data  
Author: Dilma M. Silva Karsten Schwan Greg Eisenhauer 
Address: 05508-900 Sao Paulo, Brazil  Atlanta, GA 30332  
Affiliation: Computer Science Department University of Sao Paulo Rua do Matao, 1010  College of Computing Georgia Institute of Technology  
Abstract: The recent boom of new application categories, such as multi-media systems, groupware, and the wide area distribution of information across the Internet, has led to further demands for flexibility in software. This paper presents a framework (COBS-OM) for building configurable parallel and distributed programs where type-dependent object functionality is explicitly separated from its characteristics subject to configuration. COBS-OM supports a programming model where dealing with configuration issues is a central part of the design. It provides abstractions for incorporating flexibility into a distributed object-oriented application in a methodical fashion. In addition, performance issues are addressed by considering runtime execution adjustments of the basic mechanisms that influence them. We introduce the basic elements of the model. We also present Data Object, a complex configurable object that provides flexible access to data output from a high performance parallel and distributed scientific application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ahamad and K. Schwan. </author> <title> The COBS Project. </title> <note> http:// www.cc.gatech.edu/systems/projects/COBS, 1995. </note>
Reference-contexts: To attain this goal, we have developed a system for the construction and manipulation of dynamically configurable objects, called COBS-OM (COBS <ref> [1] </ref> project Object Model). This system offers programming environment and runtime support for object configuration. It addresses performance issues by providing novel abstractions for incorporating runtime flexibility into a distributed object program in a methodical fashion.
Reference: [2] <author> G. Eisenhauer. </author> <title> Portable self-describing binary data streams. </title> <type> Technical Report GIT-CC-94-45, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <year> 1994. </year>
Reference-contexts: The framework relies on a repository of component descriptions (updated at compile-time) and data structures de scribing object compositions. The first prototype included ad hoc marshaling for IDL types; the current implementation uses PBIO <ref> [2] </ref> support for transport between different address spaces. The framework library provides runtime support for objects, configuration objects, configuration channels, and manipulation of basic IDL types. COBS-OM can be used with a threads package, thereby allowing the use of its concurrency/parallelism mechanisms in the development of COBS-OM objects. <p> Moreover, code gen exports the interface description to the Interface Repository, so that available class information can be queried at runtime and composition compatibility can be checked. The PBIO library <ref> [2] </ref> is again used to achieve inter-operability among descriptions generated by heterogeneous hardware. The tool code gen generates dispatchers, object creation attributes, and remote invocation information. The configuration entity descriptions are processed by the tool conf gen.
Reference: [3] <author> G. Eisenhauer, B. Schroeder, and K. Schwan. </author> <title> From interactive high performance programs to distributed laboratories: A research agenda. </title> <booktitle> In Proc. of the SPDP'96 Workshop on Program Visualization and Instrumentation, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Namely, it offers a natural interface for requesting specific sets of data. For example, for the interactive steering support tool developed by Heiner and Zou <ref> [3] </ref>, the Data Object method get grid (latitude/longitude range, range of levels, range of time steps) is sufficiently general to address all the existing tool requests for application data. Moreover, the level of abstraction in the method signature matches the tool's view of data.
Reference: [4] <author> G. Eisenhauer and K. Schwan. </author> <title> Parallelization of a molecular dynamics code. </title> <journal> Journal of Parallel and Distributed Computing (SPDT), </journal> <volume> 34(2), </volume> <month> May </month> <year> 1996. </year>
Reference-contexts: Examples range from the adaptation of communication protocols to changes in network or application behavior [12], to the runtime alteration of operating system abstractions [15], to application-level changes performed by adaptation heuristics [20, 9] or by end users themselves <ref> [4] </ref>. At the application-level, our research offers the notion of configurable objects as a means of achieving flexible software in which runtime execution adjustments lead to improved performance.
Reference: [5] <author> R. Ferreira, B. Moon, J. Humphries, A. Sussman, and J. Saltz. </author> <title> The virtual microscope. </title> <type> Technical Report UMI-ACS CS-TR-3777, </type> <institution> University of Maryland, Department of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: This demonstrates Data Object's utility for implementation of the diverse collaboration roles sought by multiple end users interacting with each other and the model via diverse user interfaces. As with other recent efforts to organize and access large scale parallel and distributed data <ref> [5] </ref>, Data Object supports simple and application-specific queries on distributed data. Namely, it offers a natural interface for requesting specific sets of data.
Reference: [6] <author> I. Froman, S. Danforth, and H. Madduri. </author> <title> Composition of before/after metaclasses in SOM. </title> <booktitle> In Proc. of OOPSLA'94, </booktitle> <pages> pages 427439. </pages> <publisher> ACM Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: These methods receive configuration descriptions as arguments and change the appropriate attribute values and configuration channels. 5. Related Work and Conclusion Section 3 briefly discussed the relationship between the configuration programming model being presented and work done on meta-objects (reflective programming) and Spring subcontracts. Other related work includes <ref> [17, 21, 6] </ref>. The retrieval of data from high performance simulating is related to the current work in parallel I/O. In particular, a declustering technique for maximizing disk parallelism has been extensively studied [14].
Reference: [7] <author> G. Hamilton, M. Powell, and J. Mitchell. Subcontract: </author> <title> A flexible base for distributed computing. </title> <booktitle> In Proc. of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 6979. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: The latter, like meta-objects [10], can change how the invocations to the basic object are carried out. The application programmer can directly request n to m associations or configuration object actions; these kinds of interactions are not possible with meta-objects. Spring subcontracts <ref> [7] </ref> can also alter object behavior by changing basic object mechanisms. They differ from our model in many ways: * subcontracts are used by the object model, not by the basic object implementor.
Reference: [8] <author> P. T. Homer and R. D. Schlichting. </author> <title> Configuring scientific applications in a heterogeneous distributed system. </title> <journal> IEE Di-stirbuted Systems Engineering Journal, </journal> <year> 1996 1996. </year>
Reference-contexts: Other related work includes [17, 21, 6]. The retrieval of data from high performance simulating is related to the current work in parallel I/O. In particular, a declustering technique for maximizing disk parallelism has been extensively studied [14]. The Schooner project <ref> [8] </ref> de fines an interconnection system that can be used to connect visualization tools to a graphics workstation so that data generated by a scientific simulation on a parallel machine can be displayed. Regis/Darwin [13] encourages a component based approach, providing a configuration language.
Reference: [9] <author> R. Jha, M. Muhammad, S. Yalamanchili, K. Schwan, and D. I. Rosu. </author> <title> Adaptive resource allocation for embedded parallel applications. </title> <booktitle> In Proceedings of the 3rd International Conference on High Performance Computing (HiPC), </booktitle> <address> Trivandrum, India, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Examples range from the adaptation of communication protocols to changes in network or application behavior [12], to the runtime alteration of operating system abstractions [15], to application-level changes performed by adaptation heuristics <ref> [20, 9] </ref> or by end users themselves [4]. At the application-level, our research offers the notion of configurable objects as a means of achieving flexible software in which runtime execution adjustments lead to improved performance.
Reference: [10] <author> G. Kiczales et al. </author> <title> Open implementations: A metaobject protocol approach. </title> <booktitle> In Proc. of the 9th Conference on Object-Oriented Programming Systems, Language, and Applications, 1994. Tutorial notes. </booktitle>
Reference-contexts: Configuration entities are implemented through objects, and therefore they can also be configured by association with other configuration entities, resulting in complex hierarchies of objects and configuration objects. Discussion COBS-OM novel aspects rely on the flexible association between basic objects and configuration objects. The latter, like meta-objects <ref> [10] </ref>, can change how the invocations to the basic object are carried out. The application programmer can directly request n to m associations or configuration object actions; these kinds of interactions are not possible with meta-objects. Spring subcontracts [7] can also alter object behavior by changing basic object mechanisms.
Reference: [11] <author> T. Kindler, K. Schwan, D. M. Silva, M. Trauner, and F. Alyea. </author> <title> Parallelization of spectral models for atmospheric transport processes. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 8(9):639666, </volume> <month> November </month> <year> 1996. </year>
Reference-contexts: Conclusions and related work are elaborated in Section 5. 2. Flexible Access to Distributed Data In collaboration with atmospheric scientists at Georgia Tech, we have developed a parallel and distributed global chemical transport model <ref> [11] </ref> (GCTM) capable of running in heterogeneous high performance computing environments (Figure 1 depicts the environment available in our laboratory). Models like this are important tools for answering scientific questions concerning the distribution of chemical species such as chlrofluorocarbons, hydrochlorofluo-rocarbon, and ozone. <p> Moreover, this transformation is time-consuming and benefits from its execution on a parallel platform <ref> [11] </ref>. * Multiple users can simultaneously examine the data, by simply invoking the Data Object's interface concurrently. This demonstrates Data Object's utility for implementation of the diverse collaboration roles sought by multiple end users interacting with each other and the model via diverse user interfaces.
Reference: [12] <author> R. Kravets, K. Calvert, P. Krishnan, and K. Schwan. </author> <title> Adaptive variation of reliability. </title> <booktitle> In Proceedings of the Seventh IFIP Conference on High Performance Networking (HPN'97), </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: Our work has been addressing runtime flexibility as a crucial requirement for current and emerging application domains, by incorporating adaptation capabilities into software components. Examples range from the adaptation of communication protocols to changes in network or application behavior <ref> [12] </ref>, to the runtime alteration of operating system abstractions [15], to application-level changes performed by adaptation heuristics [20, 9] or by end users themselves [4].
Reference: [13] <author> J. Magee, N. Dulay, and J. Kramer. Regis: </author> <title> A constructive development environment for parallel and distributed programs. </title> <journal> IEE Distirbuted Systems Engineering Journal, </journal> <volume> 1(5):304312, </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: The Schooner project [8] de fines an interconnection system that can be used to connect visualization tools to a graphics workstation so that data generated by a scientific simulation on a parallel machine can be displayed. Regis/Darwin <ref> [13] </ref> encourages a component based approach, providing a configuration language. The connections in Regis/Darwin are realized through port objects, which queue messages of a particular type; in our work the connection can vary from function calls to remote method invocation.
Reference: [14] <author> B. Moon and J. H. Saltz. </author> <title> Scalability analysis of declustering methods for multidimensional range queries. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> April </month> <year> 1997. </year>
Reference-contexts: Other related work includes [17, 21, 6]. The retrieval of data from high performance simulating is related to the current work in parallel I/O. In particular, a declustering technique for maximizing disk parallelism has been extensively studied <ref> [14] </ref>. The Schooner project [8] de fines an interconnection system that can be used to connect visualization tools to a graphics workstation so that data generated by a scientific simulation on a parallel machine can be displayed. Regis/Darwin [13] encourages a component based approach, providing a configuration language.
Reference: [15] <author> B. Mukherjee and K. Schwan. </author> <title> Improving performance by use of adaptive objects: Experimentation with a configurable multiprocessor thread package. </title> <booktitle> In Proc. of the Second International Symposium on High Performance Distributed Computing (HPDC-2), </booktitle> <pages> pages 5966, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Our work has been addressing runtime flexibility as a crucial requirement for current and emerging application domains, by incorporating adaptation capabilities into software components. Examples range from the adaptation of communication protocols to changes in network or application behavior [12], to the runtime alteration of operating system abstractions <ref> [15] </ref>, to application-level changes performed by adaptation heuristics [20, 9] or by end users themselves [4]. At the application-level, our research offers the notion of configurable objects as a means of achieving flexible software in which runtime execution adjustments lead to improved performance. <p> The framework library provides runtime support for objects, configuration objects, configuration channels, and manipulation of basic IDL types. COBS-OM can be used with a threads package, thereby allowing the use of its concurrency/parallelism mechanisms in the development of COBS-OM objects. The current implementation has been tested with Cthreads <ref> [15] </ref> and Solaris 5.5 Pthreads. Another relevant function carried out by the framework is the activation of initialization steps when distributed applications are being built up.
Reference: [16] <institution> Object Management Group. </institution> <note> The OMG web site. http:- //www.omg.org. </note>
Reference-contexts: COBS-OM tools Object interfaces are specified using the Interface Description Language (IDL) [18]. The object de veloper provides an implementation module which asso-ciates code with the methods present in the interface. Using an IDL compiler front end available from the OMG site <ref> [16] </ref>, we have constructed an IDL to C compiler. The tool code gen consumes the description of an IDL interface and generates class-specific implementation routines for the creation of objects, parameter block allocation, and method invocation.
Reference: [17] <author> D. Schmidt. </author> <title> The adaptive communication environment. </title> <booktitle> In Proc. of the 11th Sun User Group Conference, </booktitle> <year> 1993. </year>
Reference-contexts: These methods receive configuration descriptions as arguments and change the appropriate attribute values and configuration channels. 5. Related Work and Conclusion Section 3 briefly discussed the relationship between the configuration programming model being presented and work done on meta-objects (reflective programming) and Spring subcontracts. Other related work includes <ref> [17, 21, 6] </ref>. The retrieval of data from high performance simulating is related to the current work in parallel I/O. In particular, a declustering technique for maximizing disk parallelism has been extensively studied [14].
Reference: [18] <author> J. Siegel. </author> <title> CORBA Fundamentals and Programming. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1996. </year>
Reference-contexts: The implementation relies on COBS-OTL for management of object naming, efficient identification of local object references, and propagation of server information (host name, port number) among the nodes participating in the application. COBS-OM tools Object interfaces are specified using the Interface Description Language (IDL) <ref> [18] </ref>. The object de veloper provides an implementation module which asso-ciates code with the methods present in the interface. Using an IDL compiler front end available from the OMG site [16], we have constructed an IDL to C compiler.
Reference: [19] <author> D. M. Silva. </author> <title> COBS-OM performance evaluation. </title> <address> http://- www.ime.usp.br/ dilma/DataObject/, </address> <month> March </month> <year> 1998. </year>
Reference-contexts: Performance Performance experiments have been recently driving some refinements in the design and implementation, so that we can show that the configuration support can be carried out efficiently. The detailed current performance numbers can be found in <ref> [19] </ref>. Improvements are demonstrated on a cluster of workstations and shared memory parallel machines jointly executing the scientific application and multiple visualizations accessing the data it produces. Microbenchmarks are used to evaluate specific COBS-OM components and their basic performance properties.
Reference: [20] <author> D. M. Silva and K. Schwan. CTK: </author> <title> configurable object abstractions for multiprocessors. </title> <type> Technical Report GIT-CC-97-03, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332, </address> <month> January </month> <year> 1997. </year> <note> Submitted to IEEE Transactions on Software Engineering. </note>
Reference-contexts: Examples range from the adaptation of communication protocols to changes in network or application behavior [12], to the runtime alteration of operating system abstractions [15], to application-level changes performed by adaptation heuristics <ref> [20, 9] </ref> or by end users themselves [4]. At the application-level, our research offers the notion of configurable objects as a means of achieving flexible software in which runtime execution adjustments lead to improved performance.
Reference: [21] <author> C. Zimmermann and V. Cahill. </author> <title> Open to sugestions: on adaptable, distributed application support architectures. </title> <booktitle> In European Research Seminar on Advances in Distributed Systems, </booktitle> <year> 1995. </year>
Reference-contexts: These methods receive configuration descriptions as arguments and change the appropriate attribute values and configuration channels. 5. Related Work and Conclusion Section 3 briefly discussed the relationship between the configuration programming model being presented and work done on meta-objects (reflective programming) and Spring subcontracts. Other related work includes <ref> [17, 21, 6] </ref>. The retrieval of data from high performance simulating is related to the current work in parallel I/O. In particular, a declustering technique for maximizing disk parallelism has been extensively studied [14].
References-found: 21

