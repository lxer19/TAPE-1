URL: http://geyer.lcs.mit.edu/~jchapin/6853/Papers/spring-kernel.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/readinglist.html
Root-URL: 
Email: hamilton@eng.sun.com panos.kougiouris@eng.sun.com  
Title: The Spring Nucleus: A Microkernel for Objects  
Author: Graham Hamilton Panos Kougiouris 
Address: M/S 29-01 2550 Garcia Avenue Mountain View, CA 94043  
Note: email addresses: graham  
Date: April 1993  
Pubnum: SMLI TR-93-14  
Abstract: This paper discusses the deign rationale for the nucleus IPC facilities and how they fit into the overall Spring programming model. We then describe how the internal structure of the nucleus is organized to support fast cross-address-space calls, including some specific details and performance information on the current implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [Acetta et al 1986] <author> M. Acceta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian and M. Young. </author> <title> Mach: A New Kernel Foundation For UNIX Development. </title> <booktitle> Summer USENIX Conference, </booktitle> <address> Atlanta, </address> <year> 1986. </year>
Reference-contexts: Related work Many operating systems provide some form of message passing interprocess communication. Recent examples include sockets in Berkeley UNIX [Lefer et al 1989], ports in Mach <ref> [Acetta et al 1986] </ref>, and ports in Chorus [Rozier et al 1992]. It is possible to provide a procedural call and return model based on such message passing facilities, but the fundamental model is of distinct threads reading messages and writing replies. <p> This security requirement quickly led us to use a software capability model for providing secure access to specific objects. This approach is similar to that used in the Cambridge fileserver [Birrell & Needham 1980], Amoeba [Tanenbaum et al 1986], and Mach <ref> [Acetta et al 1986] </ref>, [Sansom et al 1986]. Following from this desire for security are some secondary requirements. When a cross-address-space call occurs on a capability, neither the client nor the server should be vulnerable to the others incompetence or malice. <p> Doors Doors are a Spring IPC mechanism resembling in many aspects the gates mechanism of Multics [Organick 1972] or the cross-address space-call mechanisms of Taos [Bershad et al 1990], and in other aspects the communication endpoint notions of sockets in BSD UNIX [Lefer et al 1989] or ports in Mach <ref> [Acetta et al 1986] </ref>. The design for doors progressed through several stages. The earliest designs were for a primitive mechanism for transferring control and data between different address spaces. A domain D1 could create a door designating a particular entry point into its address space.
Reference: [Anderson et al 1991] <author> T. E. Anderson, H. M. Levy, B. N. Bershad and E. D. Lazowska. </author> <title> The Interaction of Archi tecture and Operating System Design. </title> <booktitle> Proceedings of the Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> Santa Clara, California, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: and times scaled by the CPUs Specmark89 speed. (Since we lack Specmark numbers for the exact machines used for the Taos and NT benchmarks, we use Specmark numbers from product systems using the same CPU chips.) However, OS performance does not necessarily scale linearly with raw CPU speed [Ousterhout 1990] <ref> [Anderson et al 1991] </ref> and the scaled numbers should be regarded as only an extremely approximate guide to relative performance. 5.3. Performance discussion In traditional IPC systems, such as Berkeley sockets, there are three major costs: First, there is the cost of making scheduling and dispatching decisions.
Reference: [Bershad et al 1990] <author> B. N. Bershad, T. E Anderson, E. D. Lazowska and H. M. Levy. </author> <title> Lightweight Remote Proce dure Call. </title> <journal> ACM Transactions on Computer Systems 8(1), </journal> <month> February </month> <year> 1990. </year>
Reference-contexts: Some operating systems provide direct support for procedural IPC. Multics provided a facilities called gates that enabled secure procedural communication between different protection rings within a process [Organick 1972]. More recently, several variants of the Taos system have provided explicit cross-address-space procedure call facilities with high performance <ref> [Bershad et al 1990] </ref>, [Bershad et al 1991]. The Microsoft NT system [Cutler 92] provides an interesting IPC mechanism known as event pairs that is specialized for cross-address-space calls. <p> Doors Doors are a Spring IPC mechanism resembling in many aspects the gates mechanism of Multics [Organick 1972] or the cross-address space-call mechanisms of Taos <ref> [Bershad et al 1990] </ref>, and in other aspects the communication endpoint notions of sockets in BSD UNIX [Lefer et al 1989] or ports in Mach [Acetta et al 1986]. The design for doors progressed through several stages. <p> Performance for small calls Table 5 shows the costs for minimal cross-address-space calls in a number of systems including Taos LRPC <ref> [Bershad et al 1990] </ref>, Mach [Draves et al 1991], and NT [Cutler 1992]. All times are for bare calls on uniprocessors and exclude stubs or other higher level software costs.
Reference: [Bershad et al 1991] <author> B. N. Bershad, T.E Anderson, E. D. Lazowska and H. M. Levy. </author> <title> User-Level Interprocess Communication for Shared Memory Multiprocessors. </title> <journal> ACM Transactions on Computer Systems 9(2), </journal> <month> May </month> <year> 1991. </year>
Reference-contexts: Multics provided a facilities called gates that enabled secure procedural communication between different protection rings within a process [Organick 1972]. More recently, several variants of the Taos system have provided explicit cross-address-space procedure call facilities with high performance [Bershad et al 1990], <ref> [Bershad et al 1991] </ref>. The Microsoft NT system [Cutler 92] provides an interesting IPC mechanism known as event pairs that is specialized for cross-address-space calls.
Reference: [Birrell & Needham 1980] <author> A. D. Birrell and R. M. Needham. </author> <title> A Universal File Server. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 6(5), </volume> <month> September </month> <year> 1980. </year>
Reference-contexts: This security requirement quickly led us to use a software capability model for providing secure access to specific objects. This approach is similar to that used in the Cambridge fileserver <ref> [Birrell & Needham 1980] </ref>, Amoeba [Tanenbaum et al 1986], and Mach [Acetta et al 1986], [Sansom et al 1986]. Following from this desire for security are some secondary requirements.
Reference: [Birrell et al 1987] <author> A. D. Birrell, J. V. Guttag, J. J. Horning and R. Levin. </author> <title> Synchronization Primitives for a Multiprocessor: A Formal Specification. </title> <booktitle> Proceedings of the 11th ACM Symposium on Operating Systems Prin ciples, </booktitle> <address> Austin, Texas, </address> <month> November </month> <year> 1987. </year>
Reference-contexts: So we would like to provide some non-intrusive way for a called domain to optionally detect that its client has gone away and thus perhaps abort whatever action it is performing. We have chosen to use an alert mechanism similar to that provided by the Taos system <ref> [Birrell et al 1987] </ref>. Briey, associated with each thread is a single bit specifying whether that thread is alerted. Whenever a thread sleeps it can specify that it should be awoken from that sleep with an exception if it is alerted.
Reference: [Cutler 1992] <author> D. N. Cutler. </author> <title> NT. </title> <booktitle> Presentation at the USENIX Workshop on Micro-kernels and Other Kernel Architectures, </booktitle> <address> Seattle, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Performance for small calls Table 5 shows the costs for minimal cross-address-space calls in a number of systems including Taos LRPC [Bershad et al 1990], Mach [Draves et al 1991], and NT <ref> [Cutler 1992] </ref>. All times are for bare calls on uniprocessors and exclude stubs or other higher level software costs.
Reference: [Draves et al 1991] <author> R. P. Draves, B. N. Bershad, R.F. Rashid and R. W. Dean. </author> <title> Using Continuations to Implement Thread Management and Communication in Operating Systems. </title> <booktitle> Proceedings of the 13th ACM Sympo sium on Operating Systems Principles, </booktitle> <address> Pacific Grove, California, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Performance for small calls Table 5 shows the costs for minimal cross-address-space calls in a number of systems including Taos LRPC [Bershad et al 1990], Mach <ref> [Draves et al 1991] </ref>, and NT [Cutler 1992]. All times are for bare calls on uniprocessors and exclude stubs or other higher level software costs.
Reference: [Khalidi & Nelson 1993A] <author> Y. A. Khalidi, M. N. Nelson. </author> <title> The Spring Virtual Memory System. </title> <institution> Sun Microsys tems SMLI TR93-9, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Short overview of Spring Spring currently exists as a fairly complete prototype. Two components of the OS run in kernel mode. One of these is the virtual memory manager, which provides the core facilities for paged virtual memory <ref> [Khalidi & Nelson 1993A] </ref>. The other is the microkernel proper, known as the nucleus, which provides the basic primitives for domains (the Spring analogue of UNIX processes) and threads. Functionality such as file systems, naming, paging, etc., are all provided as user-mode services on top of this basic kernel. <p> The nucleus uses virtual memory services <ref> [Khalidi & Nelson 1993A] </ref> to satisfy calls that go through the bulk path. The bulk path was added recently, as an extension to the basic cross-domain call mechanism.
Reference: [Khalidi & Nelson 1993B] <author> Y. A. Khalidi, M. N. Nelson. </author> <title> An implementation of UNIX on an object-oriented oper ating system. </title> <booktitle> Proceedings of the Winter USENIX Conference, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: language, which supports an object-oriented type system with multiple inheritance.The system is inherently distributed and a number of caching techniques are used to boost network performance for key functions. 3 The system provides enough UNIX emulation to support standard utilities such as make, vi, csh, the X window system, etc. <ref> [Khalidi & Nelson 1993B] </ref>. 1.2. Related work Many operating systems provide some form of message passing interprocess communication. Recent examples include sockets in Berkeley UNIX [Lefer et al 1989], ports in Mach [Acetta et al 1986], and ports in Chorus [Rozier et al 1992].
Reference: [Lefer et al 1989] <author> S. Lefer, M. McKusick, M. Karels and J. Quaterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Related work Many operating systems provide some form of message passing interprocess communication. Recent examples include sockets in Berkeley UNIX <ref> [Lefer et al 1989] </ref>, ports in Mach [Acetta et al 1986], and ports in Chorus [Rozier et al 1992]. It is possible to provide a procedural call and return model based on such message passing facilities, but the fundamental model is of distinct threads reading messages and writing replies. <p> Doors Doors are a Spring IPC mechanism resembling in many aspects the gates mechanism of Multics [Organick 1972] or the cross-address space-call mechanisms of Taos [Bershad et al 1990], and in other aspects the communication endpoint notions of sockets in BSD UNIX <ref> [Lefer et al 1989] </ref> or ports in Mach [Acetta et al 1986]. The design for doors progressed through several stages. The earliest designs were for a primitive mechanism for transferring control and data between different address spaces.
Reference: [Organick 1972] <author> E. I. Organick. </author> <title> The Multics System: An Examination of Its Structure. </title> <publisher> The MIT Press, </publisher> <address> Cam bridge, Massachusetts, </address> <year> 1972. </year>
Reference-contexts: Some operating systems provide direct support for procedural IPC. Multics provided a facilities called gates that enabled secure procedural communication between different protection rings within a process <ref> [Organick 1972] </ref>. More recently, several variants of the Taos system have provided explicit cross-address-space procedure call facilities with high performance [Bershad et al 1990], [Bershad et al 1991]. The Microsoft NT system [Cutler 92] provides an interesting IPC mechanism known as event pairs that is specialized for cross-address-space calls. <p> Thus we require a mechanism that is highly efficient, particularly for the common cases where the number of arguments and results is small. 4 2.2. Doors Doors are a Spring IPC mechanism resembling in many aspects the gates mechanism of Multics <ref> [Organick 1972] </ref> or the cross-address space-call mechanisms of Taos [Bershad et al 1990], and in other aspects the communication endpoint notions of sockets in BSD UNIX [Lefer et al 1989] or ports in Mach [Acetta et al 1986]. The design for doors progressed through several stages.
Reference: [Ousterhout 1990] <author> J. Ousterhout. </author> <title> Why Arent Operating Systems Getting Faster as Fast as Hardware? Proceed ings of the Summer USENIX Conference, </title> <publisher> Anaheim, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: raw times and times scaled by the CPUs Specmark89 speed. (Since we lack Specmark numbers for the exact machines used for the Taos and NT benchmarks, we use Specmark numbers from product systems using the same CPU chips.) However, OS performance does not necessarily scale linearly with raw CPU speed <ref> [Ousterhout 1990] </ref> [Anderson et al 1991] and the scaled numbers should be regarded as only an extremely approximate guide to relative performance. 5.3. Performance discussion In traditional IPC systems, such as Berkeley sockets, there are three major costs: First, there is the cost of making scheduling and dispatching decisions.
Reference: [Rozier et al 1992] <author> M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillermont, F. Herrman, C. Kai ser, S. Langlois, P. Leonard and W. Neuhauser. </author> <title> Overview of the Chorus Distributed Operating System. </title> <booktitle> Proceedings of USENIX Workshop on Micro-kernels and Other Kernel Architectures, </booktitle> <address> Seattle, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Related work Many operating systems provide some form of message passing interprocess communication. Recent examples include sockets in Berkeley UNIX [Lefer et al 1989], ports in Mach [Acetta et al 1986], and ports in Chorus <ref> [Rozier et al 1992] </ref>. It is possible to provide a procedural call and return model based on such message passing facilities, but the fundamental model is of distinct threads reading messages and writing replies.
Reference: [Sansom et al 1986] <author> R. D. Sansom, D. P. Julin and R. F. Rashid. </author> <title> Extending a Capability Based System into a Net work Environment. </title> <booktitle> SIGCOMM 86 Symposium On Communications Architectures & Protocols, </booktitle> <address> Stowe, Vermont, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: This security requirement quickly led us to use a software capability model for providing secure access to specific objects. This approach is similar to that used in the Cambridge fileserver [Birrell & Needham 1980], Amoeba [Tanenbaum et al 1986], and Mach [Acetta et al 1986], <ref> [Sansom et al 1986] </ref>. Following from this desire for security are some secondary requirements. When a cross-address-space call occurs on a capability, neither the client nor the server should be vulnerable to the others incompetence or malice.
Reference: [SPARC 1992A] <author> SPARC International. </author> <title> The SPARC Architecture Manual Version 8. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: The fast-path The nucleus fast-path call sequence is currently roughly 60 SPARC <ref> [SPARC 1992A] </ref> instructions, and the nucleus return fast-path is roughly 40 nucleus instructions, permitting a complete cross-domain call in roughly 100 nucleus instructions. In practice, there also have to be a certain number of user-level instructions at each end.
Reference: [SPARC 1992B] <author> SPARC International. </author> <title> The SPARC Architecture Version 9. </title> <year> 1992. </year>
Reference-contexts: We expect it should be possible to obtain similar instruction counts on most modern RISC CPUs. The main imponderable is the cost of switching the MMU context, which happens to be fairly low on SPARC. 4.1.2. SPARC V9 The SPARC V9 architecture <ref> [SPARC 1992B] </ref> is a 64-bit extension of the 32-bit SPARC V8 architecture. It is fully compatible with SPARC V8 for user-mode instructions, but has a number of significant changes to the privileged mode architecture.

References-found: 17

