URL: http://www.ai.mit.edu/~mpf/homedir/files/limbo/Baggage/snapshots/medg.1995-10-16/Beaver_abs.ps
Refering-URL: 
Root-URL: 
Title: Factoring: The DNA Solution  
Author: Donald Beaver 
Address: College, PA 16802, USA  
Affiliation: Penn State University, State  
Abstract: We consider molecular models for computing and derive a DNA-based mechanism for solving intractable problems through massive parallelism. In principle, such methods might reduce the effort needed to solve otherwise difficult tasks, such as factoring large numbers. We investigate the application of such techniques to cryptography.
Abstract-found: 1
Intro-found: 1
Reference: [A94] <author> L. Adleman. </author> <title> "Molecular Computation of Solutions to Combinatorial Problems." </title> <booktitle> Science 266 (November 1994), </booktitle> <pages> 1021-1024. </pages>
Reference-contexts: These transitions are such that, roughly speaking, an exponential number of paths are followed, but only certain paths, each corresponding to a solution, are ultimately observable. The question arises whether other computational models might escape the "polynomial bonds" of Turing-like devices. Adleman suggested a positive answer <ref> [A94] </ref>, showing how a series of molecular reactions could solve a 7-node Hamiltonian Path problem. 1 Since Hamil-tonian Path is an NP-complete problem and hence outside the known range of polynomial-time computational devices, a solution to this problem suggests that molecular computers might also escape polynomial bounds. <p> If no such path exists, no such molecule will be found. We sketch a solution derived without reference to <ref> [A94] </ref>. <p> After these n operations, the only surviving molecules are those which encode a Hamiltonian path. 4 Since the path may not be unique, this answers only the question of existence. Additional simple manipulations to discover a path are possible, however. (In Adleman's experiment <ref> [A94] </ref>, "step numbers" are not used. Instead, initial candidates of varying length are generated, and then separated by length to retain paths of length n 1.
Reference: [CLR90] <author> T. Cormen, C. Leiserson, R. Rivest. </author> <title> Introduction to Algorithms. </title> <address> New York: McGraw Hill, </address> <year> 1990. </year>
Reference-contexts: Consider factoring a 1000-bit number by any standard reduction to Hamiltonian Path (cf. <ref> [CLR90] </ref>, pp. 954-959). This gives a graph with at least 10 6 nodes. It is probably safe to underestimate the number of possible paths at 2 10 6 . Thus, on the order of 2 10 6 10 300;000 candidate molecules are needed.
Reference: [Sho94] <author> P. Shor. </author> <title> "Algorithms for Quantum Computation: Discrete Logarithms and Factoring." </title> <booktitle> Proceedings of the 35 th FOCS, IEEE, </booktitle> <year> 1994, </year> <month> 124-134. </month> <title> 3 A palindrome is suggested to stabilize the unpaired single-strand portion as a loop, but it is not necessary. Other minor biochemical modifications may be helpful. 4 Using loops of cleverly chosen, different lengths, the repetitions can be avoided. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Building on the work of others, Shor recently gave algorithms for factoring and discrete logarithm using a quantum computer, a probabilistic Turing machine whose state transitions follow quantum-mechanical laws <ref> [Sho94] </ref>. These transitions are such that, roughly speaking, an exponential number of paths are followed, but only certain paths, each corresponding to a solution, are ultimately observable. The question arises whether other computational models might escape the "polynomial bonds" of Turing-like devices.
References-found: 3

