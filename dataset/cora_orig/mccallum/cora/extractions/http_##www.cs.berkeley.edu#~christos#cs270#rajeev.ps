URL: http://www.cs.berkeley.edu/~christos/cs270/rajeev.ps
Refering-URL: http://www.cs.berkeley.edu/~christos/cs270/takehome.html
Root-URL: 
Phone: 2  
Title: Constrained TSP and Low-Power Computing  
Author: Moses Charikar ? Rajeev Motwani ?? Prabhakar Raghavan ??? Craig Silverstein y 
Address: Stanford, CA-94305, USA  650 Harry Road, San Jose, CA 95120-6099, USA  
Affiliation: 1 Department of Computer Science, Stanford University,  IBM Almaden Research Center,  
Abstract: In the precedence-constrainedtraveling salesman problem (PTSP) we are given a partial order on n nodes, each of which is labeled by one of k points in a metric space. We are to find a visit order consistent with the precedence constraints that minimizes the total cost of the corresponding path in the metric space. We give negative results on approximability by relating the problem to the Shortest Common Supersequence problem, helping to explain why there has been very little successin approximation algorithms for this problem. We also give approximation algorithms for a number of special cases, included cases appropriate for a problem in low-power computing; in the process, we show that algorithms for the k-server problem and the traveling salesman problem can be used to derive approximation algorithms for the PTSP. We give tight bounds on the approximation ratios achieved by natural classes of algorithms for this optimization problem (which include algorithms proposed and used in empirical studies of this problem). We briefly summarize results of experiments with several algorithms on a standard set of compiler benchmarks, comparing several known and new algorithms.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Aggarwal, A.K. Chandra and P. Raghavan. </author> <title> Energy Consumption in VLSI Circuits. </title> <booktitle> In Proceedings of the ACM Symposium on Theory of Computing, </booktitle> <year> 1988, </year> <pages> pp. 205-216. </pages>
Reference-contexts: The major source of power consumption in a CMOS processor is in energy dissipation due to state changes in the logic circuits. Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity <ref> [1, 11] </ref>. Several papers in the low-power literature have made proposals on reducing switching activity during a clock cycle [16, 17, 22]. Su, Tsui, and Despain [19] model power consumption at the architecture level by the switching activity at the input/output of the processor modules/chips.
Reference: 2. <author> R. Bhatia, S. Khuller, and J. Naor. </author> <title> The Loading Time Scheduling Problem. </title> <booktitle> In Proceedings of the 36th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1995, </year> <pages> pp. 72-81. </pages>
Reference-contexts: Xerox Corporation. a negative result showing that the PTSP is hard to approximate even on simple metric spaces such as the line and the hypercube, showing that it is not possible to exploit geometry to obtain good approximation algorithms for PTSP. (Previous hardness results, due to Bhatia, Khuller and Naor <ref> [2] </ref>, do not apply to these simple metric spaces.) The PTSP on the hypercube is important because of its connection to an application to low-power computing, which we describe below. Because of the difficulty of approximation, we attack the PTSP problem by developing heuristics that work well for special cases. <p> The SCS problem is known to be difficult to solve exactly [7] or even approximately <ref> [2] </ref>. We first review the hardness results for SCS from Bhatia, Khuller, and Naor [2]. Theorem 1. For the SCS problem with a fixed alphabet size k, there is no polynomial time k ff -approximation algorithm for some ff &gt; 0, unless P = N P . Theorem 2. <p> The SCS problem is known to be difficult to solve exactly [7] or even approximately <ref> [2] </ref>. We first review the hardness results for SCS from Bhatia, Khuller, and Naor [2]. Theorem 1. For the SCS problem with a fixed alphabet size k, there is no polynomial time k ff -approximation algorithm for some ff &gt; 0, unless P = N P . Theorem 2. <p> Lemma 15. U is a (k 1; fi)-sequence, where fi is a constant depending only on M. Besides being applicable to PTSP, our universal sequence construction gives a ( 1)-approximation (with at most constant additive error) for the Loading Time Scheduling Problem (LTSP), improving the approximation of <ref> [2] </ref>. This is not an insignificant improvement since , the number of machines, is typically very small (about 4 or 5). The distance function for LTSP is not a metric, since d (i; j) depends only on j.
Reference: 3. <author> L. Bianco, A. Mingozzi, S. Riccardelli, and M. Spadoni. </author> <title> Exact and Heuristic Procedures for the Traveling Salesman Problem with Precedence Constraints, Based on Dynamic Programming. </title> <journal> INFOR, </journal> <volume> 32(1) </volume> <pages> 19-32, </pages> <year> 1994. </year>
Reference-contexts: This classic generalization of the TSP has been extensively studied for its applications to vehicle routing <ref> [3, 4, 8, 12] </ref>, with essentially no theoretical approximation guarantees. In this paper we explain this lack of success through ? E-mail: moses@cs.stanford.edu.
Reference: 4. <author> N. Christofides. </author> <title> Vehicle Routing. In The Traveling Salesman Problem: A Guided Tour of Combinatorial Optimization (Ed: </title> <editor> E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan, and D.B. Shmoys), </editor> <publisher> John Wiley & Sons (1985), </publisher> <pages> pp. 431-448. </pages>
Reference-contexts: This classic generalization of the TSP has been extensively studied for its applications to vehicle routing <ref> [3, 4, 8, 12] </ref>, with essentially no theoretical approximation guarantees. In this paper we explain this lack of success through ? E-mail: moses@cs.stanford.edu.
Reference: 5. <author> C.J. Colbourn and W.R. Pulleyblank. </author> <title> Minimizing Setups in Ordered Sets of Fixed Width. Order, </title> <type> 1 </type> <month> 225-229 </month> <year> (1985). </year>
Reference-contexts: In the following sections, we give good approximation algorithms for several special cases of the PTSP. We should note that an exact solution can be easily obtained, using dynamic programming, in time n w , where w is the size of the largest anti-chain <ref> [5] </ref>. In general, however, we will be searching for polynomial time algorithms. We start with an upper bound for a special case of PTSP on the line. This case is exactly the dial-a-ride problem on the line [12]. Theorem 13.
Reference: 6. <author> S. Devadas and S. Malik. </author> <title> A Survey of Optimization Techniques Targeting Low-Power VLSI Circuits. </title> <type> Preprint, </type> <year> 1995. </year>
Reference-contexts: All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems <ref> [6, 9, 13, 19, 20, 21] </ref>. Recently, Yao et al. [24] have applied competitive analysis to an online model for a scheduling problem related to power minimization.
Reference: 7. <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability a Guide to the Theory of NP completeness. W.H. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The SCS problem is known to be difficult to solve exactly <ref> [7] </ref> or even approximately [2]. We first review the hardness results for SCS from Bhatia, Khuller, and Naor [2]. Theorem 1.
Reference: 8. <editor> B.L. Golden and A.A. Assad, Eds. </editor> <title> Vehicle Routing: Methods and Studies. </title> <publisher> North-Holland, </publisher> <address> Amsterdam (1988). </address>
Reference-contexts: This classic generalization of the TSP has been extensively studied for its applications to vehicle routing <ref> [3, 4, 8, 12] </ref>, with essentially no theoretical approximation guarantees. In this paper we explain this lack of success through ? E-mail: moses@cs.stanford.edu.
Reference: 9. <author> K. Govil, E. Chan, and H. Wasserman. </author> <title> Comparing Algorithms for Dynamic Speed-Setting of a Low-Power CPU. </title> <type> Preprint, </type> <year> 1995. </year>
Reference-contexts: All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems <ref> [6, 9, 13, 19, 20, 21] </ref>. Recently, Yao et al. [24] have applied competitive analysis to an online model for a scheduling problem related to power minimization.
Reference: 10. <author> T. Jiang and M. Li. </author> <title> On the Approximation of Shortest Common Supersequencesand Longest Common Subsequences. </title> <booktitle> In Proceedingsof 21st International Colloquium on Automata, Languages and Programming, </booktitle> <year> 1994, </year> <pages> pp. 191-202. </pages>
Reference-contexts: Several of the theoretically motivated algorithms, however, were competitive with CGREEDY and all have superior theoretical properties. It is known that a greedy algorithm performs well on the average for the Shortest Common Supersequence problem <ref> [10] </ref>. The similarity between that problem and the PTSP could explain why greedy algorithms for the PTSP perform better than predicted by worst case analysis. Acknowledgements We are grateful to Sharad Malik for helpful discussions and pointers to the relevant literature.
Reference: 11. <author> G. Kissin. </author> <title> Energy Consumption in VLSI Circuits: a Foundation. </title> <booktitle> ACM Symposium on Theory of Computing, </booktitle> <year> 1982. </year>
Reference-contexts: The major source of power consumption in a CMOS processor is in energy dissipation due to state changes in the logic circuits. Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity <ref> [1, 11] </ref>. Several papers in the low-power literature have made proposals on reducing switching activity during a clock cycle [16, 17, 22]. Su, Tsui, and Despain [19] model power consumption at the architecture level by the switching activity at the input/output of the processor modules/chips.
Reference: 12. <author> M. Kubo and H. Kagusai. </author> <title> Heuristic Algorithms for the Single-Vehicle Dial-a-ride Problem. </title> <journal> Journal of the Operations Research Society of Japan, </journal> <volume> 30(4) </volume> <pages> 354-365, </pages> <year> 1990. </year>
Reference-contexts: This classic generalization of the TSP has been extensively studied for its applications to vehicle routing <ref> [3, 4, 8, 12] </ref>, with essentially no theoretical approximation guarantees. In this paper we explain this lack of success through ? E-mail: moses@cs.stanford.edu. <p> In general, however, we will be searching for polynomial time algorithms. We start with an upper bound for a special case of PTSP on the line. This case is exactly the dial-a-ride problem on the line <ref> [12] </ref>. Theorem 13.
Reference: 13. <author> M. T. Lee, V. Tiwari, S. Malik, and M. Fujita. </author> <title> Power Analysis and Low-Power Scheduling Techniques for Embedded DSP Software. </title> <type> Technical Report FLA-CAD-95-01, </type> <institution> Fujitsu Labs of America, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems <ref> [6, 9, 13, 19, 20, 21] </ref>. Recently, Yao et al. [24] have applied competitive analysis to an online model for a scheduling problem related to power minimization. <p> Their approach has its limitations, partly due to processor technology and more importantly due to the fact that operating system scheduling is inapplicable to mobile embedded systems. For example, it does not help in embedded DSP (digital signal processing) chips designed for dedicated applications <ref> [13, 20] </ref>. The major source of power consumption in a CMOS processor is in energy dissipation due to state changes in the logic circuits. Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity [1, 11].
Reference: 14. <author> M. Manasse, L. McGeoch, and D. Sleator. </author> <title> Competitive Algorithms for Server Problems. </title> <journal> Journal of Algorithms, </journal> <volume> 11 </volume> <month> 208-230 </month> <year> (1990). </year>
Reference-contexts: There is an interesting connection between universal sequences and algorithms for the celebrated k-server problem. Consider a k point metric space M. Let A be a (k 1)-competitive algorithm for the (k 1)-server problem on M (see <ref> [14] </ref>). We use A to obtain a (k 1; fi)-sequence, where fi is a constant. By Lemma 14, this gives a (k 1)-approximation algorithm for PTSP with a constant additive error. <p> It then tries ordering instructions in reverse TSP order and takes the better of the two runs. KSrv - KSERVER uses the k1-sever algorithm of <ref> [14] </ref> to obtain a universal sequence. It picks its next instruction to be the next instruction in this universal sequence, short-cutting non-ready instructions. KSrv-NoS - KSERVER WITHOUT SHORTCUT is the same as KSERVER, but it does not short-cut, and therefore pays for instructions even if they are not used.
Reference: 15. <author> R. Motwani, K. Palem, S. Reyen, and V. Sarkar. </author> <title> Combining Register Allocation and In struction Scheduling. </title> <note> Submitted for publication, 1997. Preliminary version: Technical Report STAN-CS-TN-95-22, </note> <institution> Department of Computer Science, Stanford University, </institution> <year> 1996. </year>
Reference-contexts: This gives competitive ratio r=4 (for n r), which is unbounded. 5 Experimental Results We tested our heuristics on basic blocks generated from the standard SPEC92 benchmark suite [18] that is commonly used in compiler research. We used the experimental setup of Motwani, Palem, Reyen, and Sarkar <ref> [15] </ref>, in that we used the input data generated by them (for an unrelated experimental study) as the input for our empirical testing. They compiled the SPEC92 benchmark programs for the SuperSPARC processor, with full optimization turned on in gcc, the Gnu C compiler. <p> The similarity between that problem and the PTSP could explain why greedy algorithms for the PTSP perform better than predicted by worst case analysis. Acknowledgements We are grateful to Sharad Malik for helpful discussions and pointers to the relevant literature. We are deeply indebted to the authors of <ref> [15] </ref> for sharing their experimental set-up, and in particular to Salem Reyen for his help with the experiments.
Reference: 16. <author> S. Prasad and K. Roy. </author> <title> Circuit Activity Driven Multilevel Logic Optimization for Low Power Reliable Operation. </title> <booktitle> Proceedings of the European Conference on Design Autoamtion (EDAC), </booktitle> <year> 1993, </year> <pages> pp. 368-372. </pages>
Reference-contexts: Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity [1, 11]. Several papers in the low-power literature have made proposals on reducing switching activity during a clock cycle <ref> [16, 17, 22] </ref>. Su, Tsui, and Despain [19] model power consumption at the architecture level by the switching activity at the input/output of the processor modules/chips.
Reference: 17. <author> K. Roy and S. Prasad. SYSLOP: </author> <title> Synthesis of CMOS Logic for Low-Power Applications. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <year> 1992. </year>
Reference-contexts: Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity [1, 11]. Several papers in the low-power literature have made proposals on reducing switching activity during a clock cycle <ref> [16, 17, 22] </ref>. Su, Tsui, and Despain [19] model power consumption at the architecture level by the switching activity at the input/output of the processor modules/chips.
Reference: 18. <institution> SPEC Consortium. </institution> <note> The SPECint95 and SPECfp95 Benchmarks. World-Wide Web URL http://www.specbench.org, 1995. </note>
Reference-contexts: CRITICAL PATH will alternate chains, however, incurring cost at least rn=2+n. This gives competitive ratio r=4 (for n r), which is unbounded. 5 Experimental Results We tested our heuristics on basic blocks generated from the standard SPEC92 benchmark suite <ref> [18] </ref> that is commonly used in compiler research. We used the experimental setup of Motwani, Palem, Reyen, and Sarkar [15], in that we used the input data generated by them (for an unrelated experimental study) as the input for our empirical testing.
Reference: 19. <author> C-L. Su, C-Y. Tsui, and A.M. Despain. </author> <title> Low-Power Architecture Design and Compilation Techniques for High-Performance Processors. </title> <booktitle> In Proceedings of the IEEE COMPCON, </booktitle> <year> 1994, </year> <pages> pp. 489-498. </pages>
Reference-contexts: All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems <ref> [6, 9, 13, 19, 20, 21] </ref>. Recently, Yao et al. [24] have applied competitive analysis to an online model for a scheduling problem related to power minimization. <p> Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity [1, 11]. Several papers in the low-power literature have made proposals on reducing switching activity during a clock cycle [16, 17, 22]. Su, Tsui, and Despain <ref> [19] </ref> model power consumption at the architecture level by the switching activity at the input/output of the processor modules/chips. Specifically, they model the power consumption by the number of bit switches at all positions of the instruction word as the CPU executes a stream of instructions. Su et al. [19] perform <p> Despain <ref> [19] </ref> model power consumption at the architecture level by the switching activity at the input/output of the processor modules/chips. Specifically, they model the power consumption by the number of bit switches at all positions of the instruction word as the CPU executes a stream of instructions. Su et al. [19] perform instruction scheduling within basic blocks (that is, branch-free segments of code) to minimize the number of bit switches. Instructions within basic blocks can be freely reordered subject to data dependencies that are represented as a DAG. Su et al. [19] adopt the approach of scheduling basic blocks so as <p> Su et al. <ref> [19] </ref> perform instruction scheduling within basic blocks (that is, branch-free segments of code) to minimize the number of bit switches. Instructions within basic blocks can be freely reordered subject to data dependencies that are represented as a DAG. Su et al. [19] adopt the approach of scheduling basic blocks so as to minimize the total amount of bit switches rather than the common approach of trying to minimize running time. <p> The COST GREEDY heuristic picks the point p 0 that minimizes d (p; p 0 ); this is essentially the heuristic of Su et al. <ref> [19] </ref>. The NODE GREEDY heuristic picks the point p 0 minimizing n (p 0 ). The WEIGHTED GREEDY heuristic picks the p 0 minimizing d (p; p 0 )=n (p 0 ). <p> We tested the following eager scheduling algorithms. NGreedy NODE GREEDY picks the most frequently occurring ready instruction. CGreedy COST GREEDY picks the instruction among the ready instructions that is closest (in terms of cost) to the current instruction. This is the algorithm of <ref> [19] </ref>. WGreedy WEIGHTED GREEDY combines the other greedy schemes, picking the in struction among the ready instructions that minimizes cost=node count.
Reference: 20. <author> V. Tiwari, S. Malik, and A. Wolfe. </author> <title> Power analysis of embedded software: A first step to wards software power minimization. </title> <journal> IEEE Transaction on VLSI Systems, </journal> <volume> 2 </volume> <month> 437-445 </month> <year> (1994). </year>
Reference-contexts: All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems <ref> [6, 9, 13, 19, 20, 21] </ref>. Recently, Yao et al. [24] have applied competitive analysis to an online model for a scheduling problem related to power minimization. <p> Their approach has its limitations, partly due to processor technology and more importantly due to the fact that operating system scheduling is inapplicable to mobile embedded systems. For example, it does not help in embedded DSP (digital signal processing) chips designed for dedicated applications <ref> [13, 20] </ref>. The major source of power consumption in a CMOS processor is in energy dissipation due to state changes in the logic circuits. Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity [1, 11].
Reference: 21. <author> V. Tiwari, S. Malik, and A. Wolfe. </author> <title> Compilation Techniques for Low Energy: An Overview. </title> <booktitle> In Proceedings of the 1994 Symposium on Low-Power Electronics, </booktitle> <year> 1994, </year> <pages> pp. 38-39. </pages>
Reference-contexts: All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems <ref> [6, 9, 13, 19, 20, 21] </ref>. Recently, Yao et al. [24] have applied competitive analysis to an online model for a scheduling problem related to power minimization.
Reference: 22. <author> C.Y. Tsui, M. Pedram, and A.M. Despain. </author> <title> Technology Decomposition and Mapping Tar geting Low-Power Dissipation. </title> <booktitle> In Proceedings of the 30th Design Automation Conference, </booktitle> <year> 1993, </year> <pages> pp. 68-73. </pages>
Reference-contexts: Thus, the main avenue for reducing CPU power consumption is in reducing the switching activity [1, 11]. Several papers in the low-power literature have made proposals on reducing switching activity during a clock cycle <ref> [16, 17, 22] </ref>. Su, Tsui, and Despain [19] model power consumption at the architecture level by the switching activity at the input/output of the processor modules/chips.
Reference: 23. <author> M. Weiser. </author> <title> Some Computer Science Issues in Ubiquitous Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36 </volume> <month> 74-83 </month> <year> (1993). </year>
Reference-contexts: We give our positive results in Section 4. We conclude in Section 5 with an experimental summary. 1.1 Low-Power Computing The demand for ubiquitous mobile computing <ref> [23] </ref> has greatly outstripped the improvement in the performance of lightweight batteries. All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems [6, 9, 13, 19, 20, 21].
Reference: 24. <author> F. Yao, A. Demers, and S. Shenker. </author> <title> A Scheduling Model for Reduced CPU Energy. </title> <booktitle> In Pro ceedings of the 36th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1995, </year> <pages> pp. </pages> <month> 374-382. </month> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: All notebook computers on the market employ clever power management techniques, and researchers are converging to CPU power minimization as key issue in mobile systems [6, 9, 13, 19, 20, 21]. Recently, Yao et al. <ref> [24] </ref> have applied competitive analysis to an online model for a scheduling problem related to power minimization. Their approach has its limitations, partly due to processor technology and more importantly due to the fact that operating system scheduling is inapplicable to mobile embedded systems.
References-found: 24

