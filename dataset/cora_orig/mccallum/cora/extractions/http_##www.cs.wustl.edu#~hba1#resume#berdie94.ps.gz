URL: http://www.cs.wustl.edu/~hba1/resume/berdie94.ps.gz
Refering-URL: http://www.cs.wustl.edu/~hba1/resume/
Root-URL: 
Title: On efficient reduction-algorithms for some trace rewriting systems  
Author: Michael Bertol and Volker Diekert 
Address: Breitwiesenstr. 20-22, D-70565 Stuttgart  
Affiliation: Universitat Stuttgart, Institut fur Informatik  
Abstract: We consider some basic problems on the decidability and complexity of trace rewriting systems. The new contribution of this paper is an O(n log(n)) algorithm for some computing irreducible normal forms in the case of certain one-rule systems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> I.J. Aalbersberg and G. Rozenberg. </author> <title> Theory of traces. </title> <journal> Theoretical Computer Science, </journal> <volume> 60 </volume> <pages> 1-82, </pages> <year> 1988. </year>
Reference-contexts: The time bounds known before were either quadratic or linear. We assume the reader is familiar with the concept of Mazurkiewcz traces [16]. For the background material we refer to <ref> [1, 9, 17] </ref> and to the forthcoming book on traces [12]. For basic notions on rewriting systems see [2, 14] or any other chapter of the present lecture notes. 2 Notations By we denote a finite alphabet, D fi is a reflexive and symmetric dependence relation.
Reference: 2. <author> R.V. Book and F. Otto. </author> <title> String Rewriting Systems. Texts and Monographs in Computer Science. </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: The time bounds known before were either quadratic or linear. We assume the reader is familiar with the concept of Mazurkiewcz traces [16]. For the background material we refer to [1, 9, 17] and to the forthcoming book on traces [12]. For basic notions on rewriting systems see <ref> [2, 14] </ref> or any other chapter of the present lecture notes. 2 Notations By we denote a finite alphabet, D fi is a reflexive and symmetric dependence relation.
Reference: 3. <editor> P. Cartier and D. Foata. Problemes combinatoires de commutation et rearrangements. </editor> <booktitle> Number 85 in Lecture Notes in Mathematics. </booktitle> <publisher> Springer, </publisher> <address> Berlin-Heidelberg-New York, </address> <year> 1969. </year>
Reference-contexts: The complement I = fi n D is called the independence relation and the quotient monoid IM = IM (; D) = fl =fab = ba j (a; b) 2 Ig is called the free partially commutative monoid. This monoid has been introduced in combinatorics by Cartier and Foata <ref> [3] </ref>. In computer science it is known as trace monoid, introduced by Mazurkiewicz [16]. Accordingly an element t 2 IM is a trace.
Reference: 4. <author> M. Clerbout. </author> <title> Commutations partielles et familles de langages. </title> <institution> These, Universite de Lille (France), </institution> <year> 1984. </year>
Reference-contexts: Then the (in real time computable) homomorphism : IM (; D) ! A2C A fl is injective. The Projection Lemma has different independent sources. It can be found in [15, Lemma 2.5], <ref> [4] </ref>, [5, Lemma 3.1], [6, Prop. 1.1]. A more categorial form is in [13, Thm. 2.1] and [9, Thm. 1.4.4]. Here we use it for transforming traces in a convenient data structure, i.e., representing traces as n-tuples of words.
Reference: 5. <author> M. Clerbout and M. Latteux. </author> <title> Partial commutations and faithful rational trans-ductions. </title> <journal> Theoretical Computer Science, </journal> <volume> 35 </volume> <pages> 241-254, </pages> <year> 1985. </year>
Reference-contexts: Then the (in real time computable) homomorphism : IM (; D) ! A2C A fl is injective. The Projection Lemma has different independent sources. It can be found in [15, Lemma 2.5], [4], <ref> [5, Lemma 3.1] </ref>, [6, Prop. 1.1]. A more categorial form is in [13, Thm. 2.1] and [9, Thm. 1.4.4]. Here we use it for transforming traces in a convenient data structure, i.e., representing traces as n-tuples of words.
Reference: 6. <author> R. Cori and D. Perrin. </author> <title> Automates et commutations partielles. </title> <journal> R.A.I.R.O. | Informatique Theorique et Applications, </journal> <volume> 19 </volume> <pages> 21-32, </pages> <year> 1985. </year>
Reference-contexts: Then the (in real time computable) homomorphism : IM (; D) ! A2C A fl is injective. The Projection Lemma has different independent sources. It can be found in [15, Lemma 2.5], [4], [5, Lemma 3.1], <ref> [6, Prop. 1.1] </ref>. A more categorial form is in [13, Thm. 2.1] and [9, Thm. 1.4.4]. Here we use it for transforming traces in a convenient data structure, i.e., representing traces as n-tuples of words. Note for that this structure depends on the dependence alphabet and the clique covering.
Reference: 7. <editor> Max Dauchet. </editor> <title> Termination of rewriting is undecidable in the one-rule case. </title> <editor> In M. Chytil et al., editors, </editor> <booktitle> Proceedings of the 13th Symposium on Mathematical Foundations of Computer Science (MFCS'88), Carlsbad (CSSR) 1988, number 324 in Lecture Notes in Computer Science, </booktitle> <pages> pages 262-288, </pages> <address> Berlin-Heidelberg-New York, 1988. </address> <publisher> Springer. </publisher>
Reference-contexts: Given an one-rule system R = fl ! rg; l; r 2 IM. Is it decidable whether R is Noetherian? For one-rule semi-Thue systems this is an outstanding open problem and for one-rule term rewriting systems the property of being Noetherian is undecidable <ref> [7] </ref>. Of course, a positive solution to Problem 3 would imply the semi-Thue case. However, due to the commutation rules it may happen that there is a negative answer in the trace case and a positive answer in the word case.
Reference: 8. <author> V. Diekert. </author> <title> Combinatorial rewriting on traces. </title> <editor> In C. Choffrut et al., editors, </editor> <booktitle> Proceedings of the 7th Annual Symposium on Theoretical Aspects of Computer Science (STACS'90), Rouen (France) 1990, number 415 in Lecture Notes in Computer Science, </booktitle> <pages> pages 138-151, </pages> <address> Berlin-Heidelberg-New York, 1990. </address> <publisher> Springer. </publisher>
Reference-contexts: For trace monoids in general no such positive result is known. The basic problem is due to the fact that this procedure does not compute irreducible descendants, in general. In <ref> [10, 8] </ref> cones and blocks are introduced as some more general decidable and sufficient conditions such that irreducible descendants can be computed following the algorithmic scheme above. In general we can use pattern matching to obtain a correct algorithm.
Reference: 9. <author> V. Diekert. </author> <title> Combinatorics on Traces. </title> <booktitle> Number 454 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <address> Berlin-Heidelberg-New York, </address> <year> 1990. </year>
Reference-contexts: The time bounds known before were either quadratic or linear. We assume the reader is familiar with the concept of Mazurkiewcz traces [16]. For the background material we refer to <ref> [1, 9, 17] </ref> and to the forthcoming book on traces [12]. For basic notions on rewriting systems see [2, 14] or any other chapter of the present lecture notes. 2 Notations By we denote a finite alphabet, D fi is a reflexive and symmetric dependence relation. <p> Problem 6. Let (; D) = [a | b | c]. Is it decidable whether a finite Noetherian system is confluent? A more general problem is to find good (decidable) sufficient conditions for Noetherian systems such that confluence becomes decidable. Further details can be found in <ref> [9, Chapt.3] </ref>. 4 A simple reduction algorithm Let R IM fi IM be a finite Noetherian trace rewriting system. Assume for the sake of simplicity that the system R is length-reducing and not part of the input. <p> Then the (in real time computable) homomorphism : IM (; D) ! A2C A fl is injective. The Projection Lemma has different independent sources. It can be found in [15, Lemma 2.5], [4], [5, Lemma 3.1], [6, Prop. 1.1]. A more categorial form is in [13, Thm. 2.1] and <ref> [9, Thm. 1.4.4] </ref>. Here we use it for transforming traces in a convenient data structure, i.e., representing traces as n-tuples of words. Note for that this structure depends on the dependence alphabet and the clique covering.
Reference: 10. <author> V. Diekert. </author> <title> Word problems over traces which are solvable in linear time. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 74 </volume> <pages> 3-18, </pages> <year> 1990. </year>
Reference-contexts: For trace monoids in general no such positive result is known. The basic problem is due to the fact that this procedure does not compute irreducible descendants, in general. In <ref> [10, 8] </ref> cones and blocks are introduced as some more general decidable and sufficient conditions such that irreducible descendants can be computed following the algorithmic scheme above. In general we can use pattern matching to obtain a correct algorithm.
Reference: 11. <author> V. Diekert. </author> <title> Rewriting, semi-commutations, and mobius functions. </title> <editor> In Z. Esik, editor, </editor> <booktitle> Proc. of the 9th Fundamentals of Computation Theory (FCT 93), Szeged (Hungary) 1993, number 710 in Lecture Notes in Computer Science, </booktitle> <pages> pages 1-15, </pages> <address> Berlin-Heidelberg-New York, 1993. </address> <publisher> Springer. Invited Lecture. </publisher>
Reference-contexts: 1 Introduction The notes of this paper are based on the Font Romeu Lecture and on an invited lecture at FCT-93 conference <ref> [11] </ref> of the second author. In the first part of the paper we give some basic background about trace rewriting systems. There is some overlap with the published notes from FCT-93. However, the second part is original and constitutes a new contribution to the theory of trace rewriting systems.
Reference: 12. <author> V. Diekert and G. Rozenberg, editors. </author> <note> Trace Book (preliminary title). 1993. To appear. </note>
Reference-contexts: The time bounds known before were either quadratic or linear. We assume the reader is familiar with the concept of Mazurkiewcz traces [16]. For the background material we refer to [1, 9, 17] and to the forthcoming book on traces <ref> [12] </ref>. For basic notions on rewriting systems see [2, 14] or any other chapter of the present lecture notes. 2 Notations By we denote a finite alphabet, D fi is a reflexive and symmetric dependence relation.
Reference: 13. <author> W. Fischer. </author> <title> Uber erkennbare und rationale Mengen in freien partiell kommuta-tiven Monoiden. </title> <type> Report FBI-HH-B-121/86, </type> <institution> Fachbereich Informatik der Univer-sitat Hamburg, Hamburg, </institution> <year> 1986. </year> <month> (Diplomarbeit </month> <year> 1985). </year>
Reference-contexts: Then the (in real time computable) homomorphism : IM (; D) ! A2C A fl is injective. The Projection Lemma has different independent sources. It can be found in [15, Lemma 2.5], [4], [5, Lemma 3.1], [6, Prop. 1.1]. A more categorial form is in <ref> [13, Thm. 2.1] </ref> and [9, Thm. 1.4.4]. Here we use it for transforming traces in a convenient data structure, i.e., representing traces as n-tuples of words. Note for that this structure depends on the dependence alphabet and the clique covering.
Reference: 14. <author> M. </author> <title> Jantzen. Confluent String Rewriting. </title> <booktitle> EATCS Monographs on Theoretical Computer Science 14. </booktitle> <publisher> Springer, </publisher> <address> Berlin-Heidelberg-New York, </address> <year> 1988. </year>
Reference-contexts: The time bounds known before were either quadratic or linear. We assume the reader is familiar with the concept of Mazurkiewcz traces [16]. For the background material we refer to [1, 9, 17] and to the forthcoming book on traces [12]. For basic notions on rewriting systems see <ref> [2, 14] </ref> or any other chapter of the present lecture notes. 2 Notations By we denote a finite alphabet, D fi is a reflexive and symmetric dependence relation.
Reference: 15. <author> R. Keller. </author> <title> Parallel program schemata and maximal parallelism I. Fundamental results. </title> <journal> Journal of the Association of Computing Machinery, </journal> <volume> 20 </volume> <pages> 514-537, </pages> <year> 1973. </year>
Reference-contexts: Then the (in real time computable) homomorphism : IM (; D) ! A2C A fl is injective. The Projection Lemma has different independent sources. It can be found in <ref> [15, Lemma 2.5] </ref>, [4], [5, Lemma 3.1], [6, Prop. 1.1]. A more categorial form is in [13, Thm. 2.1] and [9, Thm. 1.4.4]. Here we use it for transforming traces in a convenient data structure, i.e., representing traces as n-tuples of words.
Reference: 16. <author> A. Mazurkiewicz. </author> <title> Concurrent program schemes and their interpretations. </title> <type> DAIMI Rep. </type> <institution> PB 78, Aarhus University, Aarhus, </institution> <year> 1977. </year>
Reference-contexts: We present an O (n log (n)) algorithm for computing irreducible normal forms in the case of certain one-rule systems. The time bounds known before were either quadratic or linear. We assume the reader is familiar with the concept of Mazurkiewcz traces <ref> [16] </ref>. For the background material we refer to [1, 9, 17] and to the forthcoming book on traces [12]. <p> This monoid has been introduced in combinatorics by Cartier and Foata [3]. In computer science it is known as trace monoid, introduced by Mazurkiewicz <ref> [16] </ref>. Accordingly an element t 2 IM is a trace. We denote by jtj the length of a trace t, by jtj a its a-length for some a 2 , and by alph (t) = fa 2 j jtj a 1g its alphabet.
Reference: 17. <author> A. Mazurkiewicz. </author> <title> Trace theory. </title> <editor> In W. Brauer et al., editors, </editor> <title> Petri Nets, Applications and Relationship to other Models of Concurrency, </title> <booktitle> number 255 in Lecture Notes in Computer Science, </booktitle> <pages> pages 279-324, </pages> <address> Berlin-Heidelberg-New York, 1987. </address> <publisher> Springer. </publisher>
Reference-contexts: The time bounds known before were either quadratic or linear. We assume the reader is familiar with the concept of Mazurkiewcz traces [16]. For the background material we refer to <ref> [1, 9, 17] </ref> and to the forthcoming book on traces [12]. For basic notions on rewriting systems see [2, 14] or any other chapter of the present lecture notes. 2 Notations By we denote a finite alphabet, D fi is a reflexive and symmetric dependence relation.
Reference: 18. <author> P. Narendran and F. Otto. </author> <title> Preperfectness is undecidable for Thue systems containing only length-reducing rules and a single commutation rule. </title> <journal> Information Processing Letters, </journal> <volume> 29 </volume> <pages> 125-130, </pages> <year> 1988. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: For trace-rewriting systems a fully satisfactory notion of a critical pair is not available. Whatever definition we use, there must be finite Noetherian systems without any finite computable set of critical pairs. This is due to the following result of Narendran and Otto: Proposition 4 <ref> [18] </ref>. There exists an alphabet (; D) with exactly one pair of independent letters such that the confluence of finite length-reducing trace-rewriting systems is recursively undecidable. Problem 5.
References-found: 18

