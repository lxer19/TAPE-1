URL: ftp://ftp.cs.sunysb.edu/pub/XSB/doc/XSB/prog_XSB_book_dr.ps.gz
Refering-URL: http://www.cs.sunysb.edu/~warren/
Root-URL: http://www.cs.sunysb.edu
Title: Programming in Tabled Prolog (very) DRAFT 1  
Author: David S. Warren 
Note: 1 This is a very early draft made available privately for those who might find it of interest. I reserve all rights to this work. -dsw  
Date: June 1995  
Address: NY 11794-4400, U.S.A.  
Affiliation: Department of Computer Science SUNY Stony Brook Stony Brook,  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> T. Chen, I.V. Ramakrishnan, and R. Ramesh. </author> <title> Multistage indexing algorithms for speeding Prolog execution. </title> <booktitle> In Proc. of the Int'l Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 639-653, </pages> <year> 1992. </year>
Reference: [2] <author> W. Chen and D.S Warren. </author> <title> A goal-oriented approach to computing well founded semantics. </title> <booktitle> In Joint Intl. Conf. and Symp. on Logic Programming, </booktitle> <year> 1992. </year>
Reference: [3] <author> W. Chen and D.S. Warren. </author> <title> Towards effective evaluation of general logic programs. </title> <type> Technical report, </type> <institution> SUNY at Stony Brook, </institution> <year> 1993. </year> <note> A shortened version of this paper appeared in the Proceedings of the 12th PODS. </note>
Reference: [4] <author> S. Dawson, C. R. Ramakrishnan, I. V. Ramakrishnan, K. Sagonas, S. Skiena, T. Swift, and D. S. Warren. </author> <title> Unification factoring for efficient execution of logic programs. </title> <booktitle> In Proc. of the 22nd Symp. on Principles of Programming Languages. ACM, </booktitle> <year> 1995. </year>
Reference-contexts: Database interface, heterogeneous databases (defining views to merge DB's) 13.3 Indexing Static Program Clauses For static (or compiled) user predicates, the compiler accepts a directive that performs a variant of unif icationf actoring <ref> [4] </ref>. .... Bibliographic Notes The idea of using program transformations as a general method to index program clauses was presented in a rough form by [7] [4] extented these ideas to factor unifications ... <p> 13.3 Indexing Static Program Clauses For static (or compiled) user predicates, the compiler accepts a directive that performs a variant of unif icationf actoring <ref> [4] </ref>. .... Bibliographic Notes The idea of using program transformations as a general method to index program clauses was presented in a rough form by [7] [4] extented these ideas to factor unifications ...
Reference: [5] <author> S. Dawson, C.R. Ramakrishnan, I.V. Ramakrishnan, and T. Swift. </author> <title> Compilation aspects of optimizing tabled logic programs. </title> <type> Technical report, </type> <institution> SUNY at Stony Brook, </institution> <year> 1994. </year>
Reference: [6] <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: student database for a college: 1. student (StdId,StdName,Yr): Student with ID StdId and name StdName is in year Yr, where year is 1 for freshman, 2 for sophomores, etc. 1 The algorithm to find such a minimal set of predicates corresponds to the feedback vertex set problem and is NP-Complete <ref> [6] </ref>. CHAPTER 3. TABLING AND DATALOG PROGRAMMING 42 2. enroll (StdId,CrsId): Student with ID StdId is enrolled in the course with number CrsId. 3. course (CrsId,CrsName): Course with number CrsId has name CrsName.
Reference: [7] <author> T. Hickey and S. Mudambi. </author> <title> Global compilation of Prolog. </title> <journal> Journal of Logic Programming, </journal> <volume> 7 </volume> <pages> 193-230, </pages> <year> 1989. </year>
Reference-contexts: Bibliographic Notes The idea of using program transformations as a general method to index program clauses was presented in a rough form by <ref> [7] </ref> [4] extented these ideas to factor unifications ...
Reference: [8] <author> J. Naughton, R. Ramakrishnan, Y. Sagiv, and J. Ullman. </author> <title> Argument reduction through factoring. </title> <booktitle> In Proc. of the 15th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 173-182. </pages> <publisher> VLDB End., </publisher> <year> 1989. </year>
Reference: [9] <author> R. O'Keefe. </author> <title> The Craft of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [10] <author> L. Plumer. </author> <title> Termination proofs for logic programming based on predicate inequalities. </title> <booktitle> In Logic Programming: Proc. of the Seventh Int'l Conf., </booktitle> <pages> pages 634-648, </pages> <year> 1990. </year>
Reference-contexts: Finally, given the declaration :- auto_table the supplementary predicate supp join is produced along with a table declaration. Will we have related work sections? The question of how to construct close approximations of the minimal set has been studied in the field of termination analysis for SLD <ref> [10, 14] </ref>. [dsw: thoughts on complexity of tabled datalog programs: The worst-case complexity of a datalog program (with every predicate tabled) is: X clauses (len (clause) + k num of vars (body (clause)) ) where k is the number of constants in the Herbrand base.
Reference: [11] <author> I.V. Ramakrishnan P. Rao, K. Sagonas, T. Swift, and D.S. Warren. </author> <title> Efficient table access mechanisms for logic programs. </title> <booktitle> In International Conference on Logic Programming, </booktitle> <year> 1995. </year> <note> To Appear. </note>
Reference: [12] <author> R.C. Sekar, R. Ramesh, and I.V. Ramakrishnan. </author> <title> Adaptive pattern matching. </title> <journal> Siam J. Computing, </journal> <note> 1994. To Appear. 114 BIBLIOGRAPHY 115 </note>
Reference: [13] <author> L. Sterling and E. Shapiro. </author> <title> The Art of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference: [14] <author> J. Verschaetse and Danny De Schreye. </author> <title> Deriving termination proofs for logic programming using abstract procedures. </title> <booktitle> In Logic Programming: Proc. of the Eighth Int'l Conf., </booktitle> <pages> pages 301-315, </pages> <year> 1991. </year>
Reference-contexts: Finally, given the declaration :- auto_table the supplementary predicate supp join is produced along with a table declaration. Will we have related work sections? The question of how to construct close approximations of the minimal set has been studied in the field of termination analysis for SLD <ref> [10, 14] </ref>. [dsw: thoughts on complexity of tabled datalog programs: The worst-case complexity of a datalog program (with every predicate tabled) is: X clauses (len (clause) + k num of vars (body (clause)) ) where k is the number of constants in the Herbrand base.
References-found: 14

