URL: http://www-rhig.physics.ucla.edu/class/winter98/phys180a/paw_man.ps
Refering-URL: http://www-rhig.physics.ucla.edu/class/winter98/phys180a/index.html
Root-URL: http://www.cs.ucla.edu
Title: CERN Program Library Long Writeup Q121 Physics Analysis Workstation An Introductory Tutorial Application Software Group  
Affiliation: Computing and Networks Division CERN Geneva, Switzerland  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> CERN. </author> <title> COMIS Compilation and Interpretation System, </title> <address> nProgram Library L210, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Function drawingExamples 63 64 Chapter 3. PAW by Examples 3.5.5 The Mandelbrot distribution Calculate and plot (BOX option) the Mandelbrot distribution FUN2 10 mandel.f <ref> [1] </ref> -2.4 .8 [1] -1.2 1.2 ' ' HI/PL 10 BOX FORTRAN Routine MANDEL real function mandel (xp) dimension xp (2) data nmax/30/ x=xp (1) xx=0. do n=1,nmax tt=xx*xx-yy*yy+x xx=tt enddo 20 mandel=float (n)/float (nmax) end This example shows one of the usages of comis. <p> Function drawingExamples 63 64 Chapter 3. PAW by Examples 3.5.5 The Mandelbrot distribution Calculate and plot (BOX option) the Mandelbrot distribution FUN2 10 mandel.f <ref> [1] </ref> -2.4 .8 [1] -1.2 1.2 ' ' HI/PL 10 BOX FORTRAN Routine MANDEL real function mandel (xp) dimension xp (2) data nmax/30/ x=xp (1) xx=0. do n=1,nmax tt=xx*xx-yy*yy+x xx=tt enddo 20 mandel=float (n)/float (nmax) end This example shows one of the usages of comis. <p> Pictures and PostScript 163 164 Chapter 3. PAW by Examples 3.11.6 How to use PostScript files This macro can be used to print the tutorial examples MACRO PRINTEX 1=1 FOR/FILE 44 pawex <ref> [1] </ref>.ps METAFILE 44 -111 EXEC PAWEX [1] CLOSE 44 SHELL local print command pawex [1].ps The PostScript workstation types have the following format: -[Format][Nx][Ny][Type] Where: Format is an integer between 0 and 99 which defines the format of the paper. For example if Format=3 the paper is in the standard A3 format. <p> Output when executing PAW &gt; EXEC m Macro m: foo ? (&lt;CR&gt;=[foo]) 123 Macro m: bar ? (&lt;CR&gt;=abc) 123 abc Enter message: (&lt;CR&gt;=) Hello You said Hello. Macro arguments The EXEC command can pass arguments to a macro. The arguments are assigned to the numbered vari ables <ref> [1] </ref>, [2], etc. For example, with the macro definition 202 Chapter 4. User interface - KUIP MACRO m MESS p1=[1] p2=[2] we get the result PAW &gt; EXEC m foo bar p1=foo p2=bar Unlike named variables undefined numbered variables are always replaced by the blank string ' ', i.e. <p> The named variables are a copy of their numbered counterparts rather that aliases, i.e. the above macro definition is equivalent to MACRO m 1=abc 2=def arg1 = <ref> [1] </ref> The named parameters can be redefined by a variable assignment which leaves the value of the numbered variable untouched. For example, MACRO m arg=old MESS [1] [arg] arg = new MESS [1] [arg] yields PAW &gt; EXEC m old old The EXEC command allows to give values for named parameters <p> are a copy of their numbered counterparts rather that aliases, i.e. the above macro definition is equivalent to MACRO m 1=abc 2=def arg1 = <ref> [1] </ref> The named parameters can be redefined by a variable assignment which leaves the value of the numbered variable untouched. For example, MACRO m arg=old MESS [1] [arg] arg = new MESS [1] [arg] yields PAW &gt; EXEC m old old The EXEC command allows to give values for named parameters in non-positional order. For example, MACRO m arg1=abc arg2=def MESS [arg1] [arg2] 4.6. <p> counterparts rather that aliases, i.e. the above macro definition is equivalent to MACRO m 1=abc 2=def arg1 = <ref> [1] </ref> The named parameters can be redefined by a variable assignment which leaves the value of the numbered variable untouched. For example, MACRO m arg=old MESS [1] [arg] arg = new MESS [1] [arg] yields PAW &gt; EXEC m old old The EXEC command allows to give values for named parameters in non-positional order. For example, MACRO m arg1=abc arg2=def MESS [arg1] [arg2] 4.6. <p> of the $INLINE function: MACRO m1 1=0 b=0 a = $INLINE (<ref> [1] </ref>) mess [a] [b] Special variables A numbered variable cannot be redefined, i.e. an assignment such as 1 = foo is illegal. The only possibly manipulation of numbered variables is provided by the SHIFT statement which copies [2] into [1], [3] into [2], etc. and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. <p> The only possibly manipulation of numbered variables is provided by the SHIFT statement which copies [2] into <ref> [1] </ref>, [3] into [2], etc. and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. <p> The only possibly manipulation of numbered variables is provided by the SHIFT statement which copies [2] into <ref> [1] </ref>, [3] into [2], etc. and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. <p> In general each expression is a single list item even if the result contains blanks. For example, foobar = 'foo bar' FOR item IN [foobar] MESS [item] ENDFOR results in a single iteration. The variable [*] is treated as a special case being equivalent to the expression list <ref> [1] </ref> [2] ... [n] which allows yet another construct to traverse the macro arguments: 4.6. Macros 211 FOR arg IN [*] ENDFOR WHILE expression DO statements ENDWHILE The WHILE-loop is iterated while the boolean expression evaluates to true. <p> An invisible vector named ?, mono-dimensional and of length 100, is always present. It is used for communication between arrays in the user code (for instance in a COMIS <ref> [1] </ref> routine) and KUIP vectors, being equivalenced with the real array VECTOR (100) in the labelled common block /KCWORK/. 5.1 Vector creation and filling A vector is created either by the PAW command VECTOR/CREATE, by the SIGMA function ARRAY. or by the COMIS statement VECTOR. <p> Ntuples: A closer look 263 7.5.3 Ntuple selection mechanisms With most Ntuple operations a selection function UWFUNC of a form described in table 7.2 can be used, i.e. it can take the form of a simple or composed expression or an external FORTRAN function, executed by COMIS <ref> [1] </ref>, a cut or a mask. When used together with the NTUPLE/PLOT command the selection function also acts as a weighting factor. 7.5.4 Masks The mask facility allows the user to specify up to 32 selection criteria associated with a Ntuple. <p> Ntuples: A closer look 265 266 Chapter 7. HBOOK COMIS selection function In the definition of a selection criterion an external function (in the sense that it has not been compiled and linked together with PAW) can be used. This function is interpreted by the COMIS <ref> [1] </ref> package. The functions which are callable from within such a function are given below. <p> If the name enclosed in brackets is not a macro variable then no substitution takes place. MACRO/SYNTAX/Variables/Numbered Accessing macro arguments. The EXEC command can pass arguments to a macro. The arguments are assigned to the numbered variables <ref> [1] </ref>, [2], etc., in the order given in the EXEC command. The name of the macro, including the file specification, is assigned to [0]. A numbered variable cannot be redefined, i.e., an assignment such as "1 = foo" is illegal. See MACRO/SYNTAX/SHIFT. MACRO/SYNTAX/Variables/Special Predefined special macro variables. <p> The READ statement prompts for the variable value. If name is already defined the present value will be proposed as default. MACRO/SYNTAX/Variables/SHIFT Manipulation numbered variables. The only possible manipulation of numbered variables is provided by the SHIFT statement which copies [2] into <ref> [1] </ref>, [3] into [2], etc., and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. 11.2. SYNTAX 355 11.2.3 Definitions Statements for defining macros. <p> MACRO/SYNTAX/Variables/SHIFT Manipulation numbered variables. The only possible manipulation of numbered variables is provided by the SHIFT statement which copies [2] into <ref> [1] </ref>, [3] into [2], etc., and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. 11.2. SYNTAX 355 11.2.3 Definitions Statements for defining macros. MACRO/SYNTAX/Definitions/MACRO Defining a macro. A .kumac file may contain several macros. <p> MACRO/SYNTAX/Variables/SHIFT Manipulation numbered variables. The only possible manipulation of numbered variables is provided by the SHIFT statement which copies [2] into <ref> [1] </ref>, [3] into [2], etc., and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. 11.2. SYNTAX 355 11.2.3 Definitions Statements for defining macros. MACRO/SYNTAX/Definitions/MACRO Defining a macro. A .kumac file may contain several macros.
Reference: [2] <author> CN/ASD Group. </author> <title> HBOOK Users Guide (Version 4.21), </title> <address> nProgram Library Y250. </address> <publisher> CERN, </publisher> <month> January </month> <year> 1994. </year>
Reference-contexts: The number of lines printed depend on the recording frequency. !foo re-executed the latest command line starting with the string foo. The command line numbering can also be seen if the prompt string contains []: PAW &gt; PROMPT 'Paw [] ' Paw <ref> [2] </ref> 4.1. <p> Output when executing PAW &gt; EXEC m Macro m: foo ? (&lt;CR&gt;=[foo]) 123 Macro m: bar ? (&lt;CR&gt;=abc) 123 abc Enter message: (&lt;CR&gt;=) Hello You said Hello. Macro arguments The EXEC command can pass arguments to a macro. The arguments are assigned to the numbered vari ables [1], <ref> [2] </ref>, etc. For example, with the macro definition 202 Chapter 4. User interface - KUIP MACRO m MESS p1=[1] p2=[2] we get the result PAW &gt; EXEC m foo bar p1=foo p2=bar Unlike named variables undefined numbered variables are always replaced by the blank string ' ', i.e. <p> For example, PAW &gt; EXEC m arg1=foo bar foo def i.e. the second argument bar is not assigned to [arg2] or <ref> [2] </ref> but to [3]. Note that this differs from the behavior for command arguments (see section 4.1.2). The construct name =value may also be used in the EXEC command for names not defined in the macro's parameter list. The variable name is implicitly defined inside the macro. <p> The only possibly manipulation of numbered variables is provided by the SHIFT statement which copies <ref> [2] </ref> into [1], [3] into [2], etc. and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. <p> The only possibly manipulation of numbered variables is provided by the SHIFT statement which copies <ref> [2] </ref> into [1], [3] into [2], etc. and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. <p> In general each expression is a single list item even if the result contains blanks. For example, foobar = 'foo bar' FOR item IN [foobar] MESS [item] ENDFOR results in a single iteration. The variable [*] is treated as a special case being equivalent to the expression list [1] <ref> [2] </ref> ... [n] which allows yet another construct to traverse the macro arguments: 4.6. Macros 211 FOR arg IN [*] ENDFOR WHILE expression DO statements ENDWHILE The WHILE-loop is iterated while the boolean expression evaluates to true. <p> SQRT of a negative number is taken as 0). Chapter 7: HBOOK 7.1 Introduction Many of the ideas and functionality in the area of data presentation, manipulation and management in PAW find their origin in the HBOOK subroutine package <ref> [2] </ref>, which handles statistical distributions (histograms and Ntuples). HBOOK is normally run in a batch environment, and it produces generally graphics output on the line printer or, optionally, via the HPLOT [11] package on a high resolution graphic output device. <p> If the name enclosed in brackets is not a macro variable then no substitution takes place. MACRO/SYNTAX/Variables/Numbered Accessing macro arguments. The EXEC command can pass arguments to a macro. The arguments are assigned to the numbered variables [1], <ref> [2] </ref>, etc., in the order given in the EXEC command. The name of the macro, including the file specification, is assigned to [0]. A numbered variable cannot be redefined, i.e., an assignment such as "1 = foo" is illegal. See MACRO/SYNTAX/SHIFT. MACRO/SYNTAX/Variables/Special Predefined special macro variables. <p> The READ statement prompts for the variable value. If name is already defined the present value will be proposed as default. MACRO/SYNTAX/Variables/SHIFT Manipulation numbered variables. The only possible manipulation of numbered variables is provided by the SHIFT statement which copies <ref> [2] </ref> into [1], [3] into [2], etc., and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. 11.2. SYNTAX 355 11.2.3 Definitions Statements for defining macros. <p> The READ statement prompts for the variable value. If name is already defined the present value will be proposed as default. MACRO/SYNTAX/Variables/SHIFT Manipulation numbered variables. The only possible manipulation of numbered variables is provided by the SHIFT statement which copies <ref> [2] </ref> into [1], [3] into [2], etc., and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. 11.2. SYNTAX 355 11.2.3 Definitions Statements for defining macros. MACRO/SYNTAX/Definitions/MACRO Defining a macro. <p> In general each expression is a single list item even if the result contains blanks. The variable [*] is treated as a special case being equivalent to the expression list "[1] <ref> [2] </ref> ... [n]" which allows yet another construct to traverse the macro arguments: FOR arg IN [*] ENDFOR MACRO/SYNTAX/Looping/REPEAT Loop until condition becomes true. REPEAT statements UNTIL expression The body of a REPEAT-loop is executed at least once and iterated until the boolean expression evaluates to true. 11.2.
Reference: [3] <author> CN/ASD Group. </author> <title> HIGZ/HPLOT Users Guide, </title> <address> nProgram Library Q120 and Y251. </address> <publisher> CERN, </publisher> <year> 1993. </year>
Reference-contexts: For example, PAW &gt; EXEC m arg1=foo bar foo def i.e. the second argument bar is not assigned to [arg2] or [2] but to <ref> [3] </ref>. Note that this differs from the behavior for command arguments (see section 4.1.2). The construct name =value may also be used in the EXEC command for names not defined in the macro's parameter list. The variable name is implicitly defined inside the macro. <p> The only possibly manipulation of numbered variables is provided by the SHIFT statement which copies [2] into [1], <ref> [3] </ref> into [2], etc. and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. <p> The READ statement prompts for the variable value. If name is already defined the present value will be proposed as default. MACRO/SYNTAX/Variables/SHIFT Manipulation numbered variables. The only possible manipulation of numbered variables is provided by the SHIFT statement which copies [2] into [1], <ref> [3] </ref> into [2], etc., and discards the value of the last defined numbered variable. For example, the construct WHILE [1] &lt;&gt; ' ' DO arg = [1] SHIFT ENDDO allows to traverse the list of macro arguments. 11.2. SYNTAX 355 11.2.3 Definitions Statements for defining macros. MACRO/SYNTAX/Definitions/MACRO Defining a macro.
Reference: [4] <author> CN/ASD Group. </author> <title> KUIP Kit for a User Interface Package, </title> <address> nProgram library I202. </address> <publisher> CERN, </publisher> <month> January </month> <year> 1994. </year>
Reference-contexts: The Cut Editor panel, shown at the lower right, allows various combinations of cuts to be specified and applied. 22 Chapter 2. General principles 2.4 Command structure PAW is based on the KUIP <ref> [4] </ref> User Interface package, which can provide different types of dialogue styles: Command mode, where the user enters a command line via the terminal keyboard. Alphanumeric menu mode, where the command is selected from a list. <p> The user identifies his data elements using a single integer. Each of the elements has a number of attributes associated with it. The HBOOK system uses the ZEBRA [7] data manager to store its data elements in a COMMON block /PAWC/, shared with the KUIP <ref> [4] </ref> and HIGZ [10] packages, when the latter are also used (as is the case in PAW).
Reference: [5] <author> CN/ASD Group. </author> <title> MINUIT Users Guide, </title> <address> nProgram Library D506. </address> <publisher> CERN, </publisher> <year> 1993. </year>
Reference-contexts: HBOOK 7.6 Fitting with PAW/HBOOK/MINUIT Minuit <ref> [5] </ref> 3 is conceived as a tool to find the minimum value of a multi-parameter function and analyze the shape of the function around the minimum.
Reference: [6] <author> CN/ASD Group. </author> <title> PAW users guide, </title> <address> nProgram Library Q121. </address> <publisher> CERN, </publisher> <month> October </month> <year> 1993. </year>
Reference: [7] <author> CN/ASD Group and J. Zoll/ECP. </author> <title> ZEBRA Users Guide, </title> <address> nProgram Library Q100. </address> <publisher> CERN, </publisher> <year> 1993. </year>
Reference-contexts: HBOOK 7.2 Basic ideas The basic data elements of HBOOK are the histogram (one- and two-dimensional) and the Ntuple. The user identifies his data elements using a single integer. Each of the elements has a number of attributes associated with it. The HBOOK system uses the ZEBRA <ref> [7] </ref> data manager to store its data elements in a COMMON block /PAWC/, shared with the KUIP [4] and HIGZ [10] packages, when the latter are also used (as is the case in PAW). <p> In the /PAWC/ data store, the HBOOK, HIGZ and KUIP packages have all their own division (see <ref> [7] </ref> for more details on the notion of divisions) as follows (figure 7.1): LINKS Some locations at the beginning of /PAWC/ for ZEBRA pointers. WORKS Working space (or division 1) used by the various packages storing information in /PAWC/ HBOOK Division 2 of the store.
Reference: [8] <author> L. Lamport. </author> <title> L A T E X A Document Preparation System (2nd Edition). </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [9] <author> Adobe. </author> <title> PostScript Language Manual (Second Edition). </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference: [10] <author> R. Bock et al. </author> <title> HIGZ Users Guide, </title> <address> nProgram Library Q120. </address> <publisher> CERN, </publisher> <year> 1991. </year>
Reference-contexts: Nitty-Gritty 231 Speed of the zooming effect in the browser (s) when turned on: ...*zoomSpeed: ... <ref> [10] </ref> Double click interval in milliseconds (time span within which 2 button clicks must occur to be con sidered as a double click rather than two single clicks): ...*doubleClickInterval: ... [250] Background and foreground colors for the Browsable window in browser (s): ...*fileList*background: ... ...*fileList*foreground: ... Focus policy: ...*keyboardFocusPolicy: ... <p> If VNAME has the form VNAME1%VNAME2 then a scatter-plot of vector VNAME1 versus VNAME2 is plotted. See section 3.4.4 in the tutorial section for an explanation of the difference between VECTOR/DRAW and VECTOR/PLOT. A number of HIGZ <ref> [10] </ref> macro-primitives are available in PAW. Those directly related to the graphical output of vectors are: GRAPH N X Y Draw a curve through a set of points defined by arrays X and Y. HIST N X Y Draw an histogram defined by arrays X and Y. <p> The user identifies his data elements using a single integer. Each of the elements has a number of attributes associated with it. The HBOOK system uses the ZEBRA [7] data manager to store its data elements in a COMMON block /PAWC/, shared with the KUIP [4] and HIGZ <ref> [10] </ref> packages, when the latter are also used (as is the case in PAW). In fact the first task of a HBOOK user is to declare the length of this common to ZEBRA by a call to HLIMIT, as is seen in figures 7.3 and 7.5 1 .
Reference: [11] <author> R. Brun and H. Renshall. </author> <title> HPLOT users guide, </title> <address> nProgram Library Y251. </address> <publisher> CERN, </publisher> <year> 1990. </year>
Reference-contexts: HBOOK is normally run in a batch environment, and it produces generally graphics output on the line printer or, optionally, via the HPLOT <ref> [11] </ref> package on a high resolution graphic output device. The HBOOK system consists of a few hundred FORTRAN subroutines which enable the user to symbolically define, fill and output one- and two-dimensional density estimators, under the form of histograms, scatter-plots and tables.
Reference: [12] <author> F. James. </author> <title> Interpretation of the errors on parameters as given by MINUIT, nSupplement to CERN Program Library Long writeup D506. </title> <publisher> CERN, </publisher> <year> 1978. </year>
Reference-contexts: Statistical interpretation: For discussuion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels, see <ref> [12, 13, 14] </ref>. 272 Chapter 7. HBOOK Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution.
Reference: [13] <author> F. James. </author> <title> Determining the statistical Significance of experimental Results. </title> <type> Technical Report DD/81/02 and CERN Report 81-03, </type> <institution> CERN, </institution> <year> 1981. </year>
Reference-contexts: Statistical interpretation: For discussuion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels, see <ref> [12, 13, 14] </ref>. 272 Chapter 7. HBOOK Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution.
Reference: [14] <author> W. T. Eadie, D. Drijard, F. James, M. Roos, and B. Sadoulet. </author> <title> Statistical Methods in Experimental Physics. </title> <publisher> North-Holland, </publisher> <year> 1971. </year>
Reference-contexts: Statistical interpretation: For discussuion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels, see <ref> [12, 13, 14] </ref>. 272 Chapter 7. HBOOK Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution.
Reference: [15] <author> H. J. Klein and J. Zoll. </author> <title> PATCHY Reference Manual, </title> <address> nProgram Library L400. </address> <publisher> CERN, </publisher> <year> 1988. </year>
Reference-contexts: OS9 modules). Both ZFTP and real time access to histograms on a remote computer require the implementation of a PAW server on this computer. The PAW server is automatically started from a PAW session, if PAW has been implemented with the relevant options (PATCHY <ref> [15] </ref> flag CZ). PAW and the PAW server must be linked with two special modules called CZ and TCPAW [16, 17]. CZ is a small FORTRAN package (about 300 lines). It provides an interface between the ZEBRA Input/Output routines and the high level transport routines of the TCPAW package.
Reference: [16] <author> B. Segal. </author> <title> The TCPAW package. </title> <publisher> CERN, </publisher> <year> 1989. </year>
Reference-contexts: The PAW server is automatically started from a PAW session, if PAW has been implemented with the relevant options (PATCHY [15] flag CZ). PAW and the PAW server must be linked with two special modules called CZ and TCPAW <ref> [16, 17] </ref>. CZ is a small FORTRAN package (about 300 lines). It provides an interface between the ZEBRA Input/Output routines and the high level transport routines of the TCPAW package. TCPAW [16] is a networking package, written in C by Ben Segal (about 1500 lines). <p> PAW and the PAW server must be linked with two special modules called CZ and TCPAW [16, 17]. CZ is a small FORTRAN package (about 300 lines). It provides an interface between the ZEBRA Input/Output routines and the high level transport routines of the TCPAW package. TCPAW <ref> [16] </ref> is a networking package, written in C by Ben Segal (about 1500 lines). It provides a very simple FORTRAN-callable interface to TCP/IP services. It supports client and server modules running on UNIX, Apollo, VMS, VM/CMS and OS9 environments.
Reference: [17] <author> R. Brun and B. Segal. </author> <title> A distributed Physics Analysis workbench. </title> <publisher> CERN, </publisher> <year> 1989. </year>
Reference-contexts: The PAW server is automatically started from a PAW session, if PAW has been implemented with the relevant options (PATCHY [15] flag CZ). PAW and the PAW server must be linked with two special modules called CZ and TCPAW <ref> [16, 17] </ref>. CZ is a small FORTRAN package (about 300 lines). It provides an interface between the ZEBRA Input/Output routines and the high level transport routines of the TCPAW package. TCPAW [16] is a networking package, written in C by Ben Segal (about 1500 lines).

References-found: 17

