URL: ftp://ftp.win.tue.nl/pub/techreports/josb/dtcalc.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/misc/pubbaeten.html
Root-URL: http://www.win.tue.nl
Phone: 8, 3584  
Title: Some Simple Calculations in Relative Discrete Time Process Algebra  
Author: J.C.M. Baeten J.A. Bergstra 
Note: Note: Dedicated to prof.dr. F.E.J. Kruseman Aretz, on the occasion of his `afscheidscollege'.  
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands  Kruislaan 403, 1098 SJ Amsterdam, The Netherlands  Heidelberglaan  Netherlands  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of Technology,  Programming Research Group, University of Amsterdam,  and Department of Philosophy, Utrecht University,  CS Utrecht, The  
Abstract: We do some simple calculations involving bufiers in discrete time process algebra with relative timing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Discrete time process algebra. </title> <type> Technical Report CSR 95-09, </type> <institution> Eindhoven University of Technology, Computing Science Department, </institution> <year> 1995. </year> <note> To appear in Formal Aspects of Computing. </note>
Reference-contexts: We use the phrase discrete time process algebra if an enumeration of time slices is used. In <ref> [1] </ref> ACP was extended to a discrete time process algebra. Here, we use discrete time process algebra with relative timing, where timing refers to the execution of the previous action. We use the so-called two-phase version, where the passage of time and the execution of actions is separated. <p> Another version of discrete time process algebra uses absolute timing, 1 where all timing refers to an absolute clock. Finally, we have discrete process algebra with parametric timing, where absolute and relative timing are integrated (see <ref> [1] </ref>). 2 Discrete Time Process Algebra with Relative Timing We present axioms for discrete time process algebra with relative timing. We base ourselves on [1], but use the slightly optimised presentation of [2]. 2.1 Basic Process Algebra We assume we have given a (flnite) set of atomic actions A. <p> Finally, we have discrete process algebra with parametric timing, where absolute and relative timing are integrated (see <ref> [1] </ref>). 2 Discrete Time Process Algebra with Relative Timing We present axioms for discrete time process algebra with relative timing. We base ourselves on [1], but use the slightly optimised presentation of [2]. 2.1 Basic Process Algebra We assume we have given a (flnite) set of atomic actions A. This set is a parameter of the theory to be presented. <p> This special form of RSP will be called RSP (USD) in the sequel. y = rel (x) + rel (y) ) y = bxc RSP (USD) Table 2: RSP for Unbounded Start Delay. 2.3 Structured Operational Semantics We refer to <ref> [1] </ref> for an operational semantics for BPA drt . The set of bisimulation equivalence classes of closed terms then gives a model for BPA drt , thereby showing consistency of the theory. We can also provide action rules in order to deal with recursion.
Reference: [2] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Discrete time process algebra with abstraction. </title> <type> Technical Report CSR 95-17, </type> <institution> Eindhoven University of Technology, Computing Science Department, </institution> <year> 1995. </year> <note> To appear in Proceedings FCT'95, Dresden. </note>
Reference-contexts: Finally, we have discrete process algebra with parametric timing, where absolute and relative timing are integrated (see [1]). 2 Discrete Time Process Algebra with Relative Timing We present axioms for discrete time process algebra with relative timing. We base ourselves on [1], but use the slightly optimised presentation of <ref> [2] </ref>. 2.1 Basic Process Algebra We assume we have given a (flnite) set of atomic actions A. This set is a parameter of the theory to be presented. <p> Likewise, with DCS5,3; 6. By deflnition; 7. Use 6; 8. Use 7; 9. a + - = a + - = a + - = a = a; 10. Like 9. 2.4 Parallel Composition We extend the theory BPA drt with parallel composition, with or without communication, as in <ref> [2] </ref>. The additional syntax has binary operators k (merge), k (left merge) and j (communication merge), and unary operators @ H (encapsulation operator, for H A). <p> @ H r2 (e) s3 (e) rel (C 23 ) k s2 (d) rel (C 12 )+ X @ H s2 (d) rel (C 12 ) j r2 (e) s3 (e) rel (C 23 ) ! = d2D = d2D = d2D Using a theory of abstraction as outlined in <ref> [2] </ref>, we can derive that after hiding the c2 (d) actions, the composition behaves again as a no-delay channel, with input port 1 and output port 3.
Reference: [3] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Number 18 in Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: In this note, we do some simple calculations in the formal language of relative discrete time process algebra. The process algebra ACP <ref> [3] </ref> describes the main features of imperative concurrent programming without explicit mention of time. Implicitly, time is present in the interpretation of sequential composition: in p q the process p must be executed before q. <p> _ -)) = rel (xk _ -) = rel ( _ -) = -. 3 Some Simple Calculations In time free process algebra, there is the following standard speciflcation of a one-item bufier with input port i and output port j: B ij = d2D A straightforward calculation (see e.g. <ref> [3] </ref>, page 106) shows that the composition of two such bufiers in sequence gives a two-item bufier. In the following, we consider three timed versions of this bufier. <p> The composition denotes a bufier with capacity two and delay of two time units. This is similar to the result obtained if all timing is left out (see <ref> [3] </ref>, page 106). 6 3.3 Delay 1, More Capacity Finally, we drop the restriction in the previous speciflcation that output must occur before the next input.
Reference: [4] <author> J.A. Bergstra and J.W. Klop. </author> <title> Veriflcation of an alternating bit protocol by means of process algebra. </title> <editor> In W. Bibel and K.P. Jantke, editors, </editor> <title> Math. Methods of Spec. </title> <booktitle> and Synthesis of Software Systems '85, number 215 in LNCS, </booktitle> <pages> pages 9-23. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: The Recursive Speciflcation Principle RSP says that a guarded recursive speciflcation has at most one solution. This principle was introduced in <ref> [4] </ref> and has proven to be very useful in system veriflcations. Specialised to the recursive equation deflning the unbounded start delay, RSP instantiates as shown in Table 2.
Reference: [5] <author> J.A. Bergstra and Gh. Stefanescu. </author> <title> Network algebra for synchronous and asynchronous dataow. </title> <type> Technical Report LGPS 122, </type> <institution> Utrecht University, Department of Philosophy, </institution> <year> 1994. </year>
Reference-contexts: This fact was also stated in <ref> [5] </ref>, where this no-delay channel (called minimal stream delayer) acts as the identity in a data ow algebra. 3.2 Delay 1, Capacity 1 It is interesting to see what happens if we change the previous speciflcation slightly.
Reference: [6] <author> F.E.J. </author> <type> Kruseman Aretz. </type> <institution> Vallen en opstaan (de computer in de wiskunde). Inaugural Address. Scheltema en Holkema, </institution> <address> Amsterdam, </address> <year> 1967. </year>
Reference-contexts: 1 Introduction Any formal language should enable formal analysis. As Kruseman Aretz already emphasised in <ref> [6] </ref>, it is essential to do precise calculations, perform mathematics, with a formal language, and a well-designed language should facilitate such calculations. In this note, we do some simple calculations in the formal language of relative discrete time process algebra.
Reference: [7] <author> M.A. Reniers and J.J. Vereijken. </author> <title> Completeness in discrete time process algebra. </title> <type> draft, </type> <year> 1995. </year> <month> 7 </month>
Reference-contexts: We can also provide action rules in order to deal with recursion. Then, we obtain a model in which every recursive speciflcation has a solution, and in which every guarded recursive speciflcation has a unique solution (thus, satisfying RSP). For further details, see <ref> [7] </ref>.
References-found: 7

