URL: http://www.csc.ncsu.edu/faculty/mpsingh/papers/mas/ecai-94-change.ps
Refering-URL: http://www.csc.ncsu.edu/faculty/mpsingh/papers/mas/
Root-URL: http://www.csc.ncsu.edu
Email: msingh@mcc.com  
Phone: (512)-338-3431 (voice) (512)-338-3890 (fax)  
Title: Maintenance and Prevention: Formalization and Fixpoint Characterization  
Author: Munindar P. Singh 
Address: 3500 W. Balcones Center Drive Austin, TX 78759-5398 USA  
Affiliation: Information Systems Division Microelectronics and Computer Technology Corporation  
Abstract: Maintenance and prevention are important concepts in the science of intelligent systems, yet they are usually ignored in favor of concepts related to achievement. We show, however, that maintenance and prevention are neither trivial nor intractable to formalize or compute and, given their value, merit serious research attention. Maintenance and prevention are duals of each other, but cannot be reduced to other known concepts. We formalize maintenance in a general model of actions and time, giving its model theory and axiomatization. We next introduce techniques from theoretical computer science by giving a fixpoint characterization of maintenance. That characterization yields an efficient algorithm for computing maintenance. Variants of this algorithm apply to achievement-like concepts as well. When applicable, it appears superior to traditional planning approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [ Burch et al., 1990 ] <author> Burch, J. R.; Clarke, E. C.; McMillan, K. L.; Dill, D. L.; and Hwang, L. J.; </author> <year> 1990. </year> <title> Symbolic model checking: 10 20 states and beyond. </title> <note> In LICS. </note>
Reference-contexts: We adapt it for reasoning about action. We assume that we are given a model and a formula Mp and attempt to compute all moments at which Mp holds in it. 6.1 The Propositional Mu-Calculus An especially powerful class of tools (e.g., <ref> [ Burch et al., 1990 ] </ref> ) is based on the mu-calculus of [ Scott & de Bakker, 1969 ] . The mu-calculus provides a syntax for writing expressions involving least and greatest fixpoints.
Reference: [ Emerson, 1990 ] <author> Emerson, E. A.; </author> <year> 1990. </year> <title> Temporal and modal logic. </title> <editor> In Leeuwen, J.van, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B. </booktitle> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam, The Netherlands. </address>
Reference-contexts: After that he can just cycle through t 0 . He cannot maintain p in t 3 , but he can maintain it in all successors of t 3 . 4 The Formal Language Our formal language, L, is based on CTL*, a branching-time logic <ref> [ Emerson, 1990 ] </ref> ; augmentations are described below. L is the minimal set closed under the following rules. Here L s is the set of "scenario-formulae," which is used as an auxiliary definition.
Reference: [ Moore, 1984 ] <author> Moore, Robert C.; </author> <year> 1984. </year> <title> A formal theory of knowledge and action. </title> <editor> In Hobbs, Jerry R. and Moore, Robert C., editors, </editor> <title> Formal Theories of the Commonsense World. </title> <publisher> Ablex Publishing Company, </publisher> <address> Norwood, NJ. </address> <pages> 319-358. </pages>
Reference-contexts: Each moment is associated with a possible state of the world (identified by the atomic propositions that hold there) and the knowledge of different agents (determined by a reflexive and transitive alternativeness relation on moments <ref> [ Moore, 1984 ] </ref> ). A partial order on moments denotes temporal precedence. future to some extent by choosing action a or action b.
Reference: [ Scott & de Bakker, 1969 ] <author> Scott, Dana and de Bakker, J.; </author> <year> 1969. </year> <title> A theory of programs. </title> <type> Technical report, </type> <institution> IBM, Vienna. </institution>
Reference-contexts: We assume that we are given a model and a formula Mp and attempt to compute all moments at which Mp holds in it. 6.1 The Propositional Mu-Calculus An especially powerful class of tools (e.g., [ Burch et al., 1990 ] ) is based on the mu-calculus of <ref> [ Scott & de Bakker, 1969 ] </ref> . The mu-calculus provides a syntax for writing expressions involving least and greatest fixpoints. In order to use mu-calculus based algorithms, we show how maintenance can be characterized as a greatest fixpoint of a moderately simple functional.
Reference: [ Waldinger, 1981 ] <author> Waldinger, Richard; 1981. </author> <title> Achieving several goals simultaneously. </title> <editor> In Webber, Bonnie L. and Nilsson, Nils J., editors, </editor> <booktitle> Readings in Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann. </publisher> <pages> 250-271. 11 </pages>
Reference-contexts: Indeed, planning systems often deal with maintenance under the guise of protection: in achieving conjunctive goals, one conjunct is achieved first and while it is protected, other conjuncts are attempted <ref> [ Waldinger, 1981 ] </ref> . Further, prevention is crucial to the understanding of deontic concepts such as obligation and corresponding communicative concepts such as prohibitions. Unfortunately, despite their importance, the concepts of prevention and maintenance have not received significant attention in theoretical AI.
References-found: 5

