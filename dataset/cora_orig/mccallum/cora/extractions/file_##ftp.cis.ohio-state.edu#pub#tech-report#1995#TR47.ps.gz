URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1995/TR47.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Randomized Quick Hull  
Author: R. Wenger 
Date: October 18, 1995  
Abstract: This paper contains a simple, randomized algorithm for constructing the convex hull of a set of n points in the plane with expected running time O(n log h) where h is the number of points on the convex hull.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Akl, S. G., and Toussaint, G. T. </author> <title> A fast convex hull algorithm. </title> <journal> Inform. Process. Lett. </journal> <volume> 7, 5 (1978), </volume> <pages> 219-222. </pages>
Reference-contexts: Jarvis's algorithm runs in O (nh) time where h is the number of points in the convex hull. The next ten years saw many other algorithms for finding convex hulls in the plane most of which run in O (n log n) time <ref> [1, 4, 11, 13, 16] </ref>. Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) [10, 3].
Reference: [2] <author> Avis, D. </author> <title> Comments on a lower bound for convex hull determination. </title> <journal> Inform. Process. Lett. </journal> <volume> 11 (1980), </volume> <pages> 126. </pages>
Reference-contexts: Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) [10, 3]. During this period, Avis <ref> [2] </ref> and Yao [20] proved lower bounds of (n log n) on the time to find a convex hull, assuming suitable models of computation.
Reference: [3] <author> Bentley, J. L., and Shamos, M. I. </author> <title> Divide-and-conquer for linear expected time. </title> <journal> Inform. Process. Lett. </journal> <volume> 7 (1978), </volume> <pages> 87-91. </pages>
Reference-contexts: Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) <ref> [10, 3] </ref>. During this period, Avis [2] and Yao [20] proved lower bounds of (n log n) on the time to find a convex hull, assuming suitable models of computation.
Reference: [4] <author> Bykat, A. </author> <title> Convex hull of a finite set of points in two dimensions. </title> <journal> Inform. Process. Lett. </journal> <volume> 7 (1978), </volume> <pages> 296-298. </pages>
Reference-contexts: Jarvis's algorithm runs in O (nh) time where h is the number of points in the convex hull. The next ten years saw many other algorithms for finding convex hulls in the plane most of which run in O (n log n) time <ref> [1, 4, 11, 13, 16] </ref>. Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) [10, 3].
Reference: [5] <author> Chan, T. </author> <title> Ouput-sensitive results on convex hulls, extreme points, and related problems. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom. </institution> <year> (1995), </year> <pages> pp. 10-19. </pages>
Reference-contexts: Their algorithm uses a median find operation in place of randomization but otherwise is quite similar to the algorithm presented in this paper. They generalized their algorithm to higher dimensions. Chan in <ref> [5] </ref> gave an output-sensitive convex hull algorithm based on ray shooting. His algorithm runs in optimal O (n log h) time in two and three dimensions. Randomized Quickhull The algorithm presented in this paper is called RQ-HULL, an abbreviation for randomized quick hull.
Reference: [6] <author> Chan, T., Snoeyink, J., and Yap, C. K. </author> <title> Ouput-sensitive construction of polytopes in four dimensions and clipped Voronoi diagrams in three. </title> <booktitle> In Proc. 6th ACM-SIAM Sympos. Discrete Algorithms (1995), </booktitle> <pages> pp. 282-291. </pages>
Reference-contexts: Differences between our algorithm and the one given by Shafer and Steiger allow us to prove such a bound. Recently Chan, Snoeyink and Yap published a deterministic variation of QUICKHULL which runs in O (n log h) time <ref> [6] </ref>. Their algorithm uses a median find operation in place of randomization but otherwise is quite similar to the algorithm presented in this paper. They generalized their algorithm to higher dimensions. Chan in [5] gave an output-sensitive convex hull algorithm based on ray shooting.
Reference: [7] <author> Clarkson, K. L. </author> <title> New applications of random sampling in computational geometry. </title> <journal> Discrete Comput. Geom. </journal> <volume> 2 (1987), </volume> <pages> 195-222. </pages>
Reference-contexts: Their algorithm is based on linear time algorithms by Megiddo and Dyer for solving linear programming problems in the plane. Starting with seminal work by Clarkson, randomized algorithms have played an increasingly important role in computational geometry <ref> [8, 7, 9] </ref>. These algorithms always produce the correct solution but their running time depends upon random choices made during the execution of the algorithm. As such, they are called Las Vegas random algorithms.
Reference: [8] <author> Clarkson, K. L. </author> <title> A randomized algorithm for closest-point queries. </title> <journal> SIAM J. Comput. </journal> <volume> 17 (1988), </volume> <pages> 830-847. </pages>
Reference-contexts: Their algorithm is based on linear time algorithms by Megiddo and Dyer for solving linear programming problems in the plane. Starting with seminal work by Clarkson, randomized algorithms have played an increasingly important role in computational geometry <ref> [8, 7, 9] </ref>. These algorithms always produce the correct solution but their running time depends upon random choices made during the execution of the algorithm. As such, they are called Las Vegas random algorithms.
Reference: [9] <author> Clarkson, K. L., and Shor, P. W. </author> <title> Applications of random sampling in computational geometry, II. </title> <journal> Discrete Comput. Geom. </journal> <volume> 4 (1989), </volume> <pages> 387-421. </pages>
Reference-contexts: Their algorithm is based on linear time algorithms by Megiddo and Dyer for solving linear programming problems in the plane. Starting with seminal work by Clarkson, randomized algorithms have played an increasingly important role in computational geometry <ref> [8, 7, 9] </ref>. These algorithms always produce the correct solution but their running time depends upon random choices made during the execution of the algorithm. As such, they are called Las Vegas random algorithms. <p> These algorithms always produce the correct solution but their running time depends upon random choices made during the execution of the algorithm. As such, they are called Las Vegas random algorithms. Clarkson and Shor in <ref> [9] </ref> gave randomized incremental algorithms for constructing convex hulls in various dimensions which run in O (n log n) expected time in R 2 and R 3 . They also gave fl To appear in the journal Algorithmica. y Ohio State University, Columbus, OH 43210, U.S.A. (wenger@cis.ohio-state.edu).
Reference: [10] <author> Devroye, L. P. </author> <title> How to reduce the average complexity of convex hull finding algorithms. </title> <journal> Comput. Math. Appl. </journal> <volume> 7 (1981), </volume> <pages> 299-308. </pages>
Reference-contexts: Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) <ref> [10, 3] </ref>. During this period, Avis [2] and Yao [20] proved lower bounds of (n log n) on the time to find a convex hull, assuming suitable models of computation.
Reference: [11] <author> Eddy, W. F. </author> <title> A new convex hull algorithm for planar sets. </title> <journal> ACM Trans. Math. Softw. </journal> <volume> 3 (1977), </volume> <pages> 398-403 and 411-412. </pages>
Reference-contexts: Jarvis's algorithm runs in O (nh) time where h is the number of points in the convex hull. The next ten years saw many other algorithms for finding convex hulls in the plane most of which run in O (n log n) time <ref> [1, 4, 11, 13, 16] </ref>. Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) [10, 3].
Reference: [12] <author> Graham, R. L. </author> <title> An efficient algorithm for determining the convex hull of a finite planar set. </title> <journal> Inform. Process. Lett. </journal> <volume> 1 (1972), </volume> <pages> 132-133. </pages>
Reference-contexts: Introduction Determining the convex hull of a set of points is one of the most basic problems in computational geometry. Ron Graham presented the first O (n log n) algorithm for finding the convex hull of points in the plane in 1972 <ref> [12] </ref>. The following year, R. Jarvis gave an algorithm whose running time depends on the output size [14]. Jarvis's algorithm runs in O (nh) time where h is the number of points in the convex hull.
Reference: [13] <author> Green, P. J., and Silverman, B. W. </author> <title> Constructing the convex hull of a set of points in the plane. </title> <journal> Comput. J. </journal> <volume> 22 (1979), </volume> <pages> 262-266. </pages>
Reference-contexts: Jarvis's algorithm runs in O (nh) time where h is the number of points in the convex hull. The next ten years saw many other algorithms for finding convex hulls in the plane most of which run in O (n log n) time <ref> [1, 4, 11, 13, 16] </ref>. Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) [10, 3].
Reference: [14] <author> Jarvis, R. A. </author> <title> On the identification of the convex hull of a finite set of points in the plane. </title> <journal> Inform. Process. Lett. </journal> <volume> 2 (1973), </volume> <pages> 18-21. </pages>
Reference-contexts: Ron Graham presented the first O (n log n) algorithm for finding the convex hull of points in the plane in 1972 [12]. The following year, R. Jarvis gave an algorithm whose running time depends on the output size <ref> [14] </ref>. Jarvis's algorithm runs in O (nh) time where h is the number of points in the convex hull. The next ten years saw many other algorithms for finding convex hulls in the plane most of which run in O (n log n) time [1, 4, 11, 13, 16].
Reference: [15] <author> Kirkpatrick, D. G., and Seidel, R. </author> <title> The ultimate planar convex hull algorithm? SIAM J. </title> <journal> Comput. </journal> <volume> 15 (1986), </volume> <pages> 287-299. </pages>
Reference-contexts: In 1983, Kirkpatrick and Seidel constructed an "output sensitive" algorithm which runs in O (n log h) time where h is the number of points on the convex hull <ref> [15] </ref>. Their algorithm is based on linear time algorithms by Megiddo and Dyer for solving linear programming problems in the plane. Starting with seminal work by Clarkson, randomized algorithms have played an increasingly important role in computational geometry [8, 7, 9].
Reference: [16] <author> Koplowitz, J., and Jouppi, D. </author> <title> A more efficient convex hull algorithm. </title> <journal> Inform. Process. Lett. </journal> <volume> 7 (1978), </volume> <pages> 56-57. 9 </pages>
Reference-contexts: Jarvis's algorithm runs in O (nh) time where h is the number of points in the convex hull. The next ten years saw many other algorithms for finding convex hulls in the plane most of which run in O (n log n) time <ref> [1, 4, 11, 13, 16] </ref>. Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) [10, 3].
Reference: [17] <author> Preparata, F. P., and Shamos, M. I. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Moreover this algorithm is extremely simple, both to describe and to implement, involving no data structures other than arrays and no presorting of points. The algorithm is a randomized variation of the QUICKHULL algorithm described in <ref> [17] </ref>. Shafer and Steiger proposed a similar algorithm in a recent paper [19], but without establishing an O (n log h) bound on the running time of the algorithm independent of the input point set.
Reference: [18] <author> Seidel, R. </author> <title> Backwards analysis of randomized geometric algorithms. In New Trends in Discrete and Computational Geometry, </title> <editor> J. Pach, Ed., </editor> <volume> vol. </volume> <booktitle> 10 of Algorithms and Combinatorics. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 37-68. </pages>
Reference-contexts: Seidel in <ref> [18] </ref> described a simpler randomized incremental algorithm for points in the plane which also runs in O (n log n) expected time. This paper contains yet another randomized algorithm for finding the convex hull of points in the plane.
Reference: [19] <author> Shafer, L., and Steiger, W. </author> <title> Randomizing optimal geometric algorithms. </title> <booktitle> In Proc. 5th Canad. Conf. </booktitle> <institution> Comput. Geom. (Waterloo, Canada, </institution> <year> 1993), </year> <pages> pp. 133-138. </pages>
Reference-contexts: Moreover this algorithm is extremely simple, both to describe and to implement, involving no data structures other than arrays and no presorting of points. The algorithm is a randomized variation of the QUICKHULL algorithm described in [17]. Shafer and Steiger proposed a similar algorithm in a recent paper <ref> [19] </ref>, but without establishing an O (n log h) bound on the running time of the algorithm independent of the input point set. Differences between our algorithm and the one given by Shafer and Steiger allow us to prove such a bound. <p> We suspect the algorithm still runs in O (n log n) but not necessarily O (n log h) ex pected time. RQ-HULL without steps 8-11 is similar to an algorithm described by Shafer and Steiger in <ref> [19] </ref>. Acknowledgements Thanks to Kennith Supowit for helpful discussions on bounding recurrence relations. 8
Reference: [20] <author> Yao, A. C. </author> <title> A lower bound to finding convex hulls. </title> <editor> J. </editor> <booktitle> ACM 28 (1981), </booktitle> <pages> 780-787. </pages>
Reference-contexts: Some very simple algorithms were proposed which have O (n) expected running time for many distributions of points in the plane (such as points with normal density) [10, 3]. During this period, Avis [2] and Yao <ref> [20] </ref> proved lower bounds of (n log n) on the time to find a convex hull, assuming suitable models of computation.
References-found: 20

