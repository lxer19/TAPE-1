URL: ftp://ftp.essex.ac.uk/pub/csp/ga/LauTsa96.ps.Z
Refering-URL: http://www.ing.unlp.edu.ar/cetad/mos/memetic_home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: -tllau, edward-@essex.ac.uk  
Title: Applying a Mutation-Based Genetic Algorithm to Processor Configuration Problems  
Author: T L Lau and E P K Tsang 
Address: Wivenhoe Park Colchester CO4 3SQ United Kingdom  
Affiliation: Dept. of Computer Science University of Essex,  
Abstract: In this paper, we present a Genetic Algorithm (GA) approach to the PCP. Our technique uses a mutation based GA, a function that produces schemata by analyzing previous solutions, and an effective data representation. Our approach has been shown to outperform other published techniques in this problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chalmers A. and Gregory S. </author> <title> (1992) Constructing Minimum Path Configurations for Multiprocessor Systems. </title> <type> Technical Report CSTR-92-12, </type> <month> April </month> <year> 1992, </year> <institution> University of Bristol, Computer Science Department. </institution>
Reference-contexts: These processors work in tandem to solve a complex problem, sharing information where needed by exchanging messages. The Processor Configuration Problem (PCP) is a real world problem about linking up a finite set of processors into a network, where each processor has a finite number of external communication channels <ref> [1] </ref>. The PCP was formally defined at the University of Bristol, where members of its research staff regularly construct processor configurations to interconnect networks of transputers for the solution of engineering problems. <p> Networks that interface with a system controller are the subject of our study in this paper. The network of processors can be thought of as a graph (from extremal graph theory), with the processors being the nodes and the communication channels assuming the role of arcs <ref> [1] </ref>. Making use of performance measures from graph theory, one can determine how good a given network configuration is. For the PCP domain, a good measure of quality would be the mean internode distance, as defined next. <p> The performance of an algorithm is judged by the time required to reach a solution and the quality of that solution, which is given by the fitness function, d avg . The benchmark suite used here was based on <ref> [1, 10, 11] </ref>, so as to provide a comparison. The environment is as follows: PCP suite with 32 to 40 processors and a d max value of 3. Each recorded result (for d avg and CPU time) is the average of a trial of five runs. <p> A retention percentage of 25% was used to produce a schema for second phase optimization. The two competing solvers used in the benchmark are AMP <ref> [1] </ref> and GAcSP [10, 11]. AMP is an algorithm that uses depth-first search with hill-climbing. Note that for AMP, no runtime results were available and only results for 32 and 40 processor configurations were reported.
Reference: [2] <author> Eiben A., Rau P-E. and Ruttkay Zs. </author> <title> (1993) Heuristic Genetric Algorithms for Constrainted Problems. </title> <booktitle> Proceedings of Dutch National AI Conference, </booktitle> <volume> NAIC 93, </volume> <pages> pages 241 - 252. </pages>
Reference-contexts: Tsang argues in [5] to use stochastic methods. The project presented in this paper follows the footstep of those who have used GA to tackle CSOPs <ref> [2, 3, 8, 10, 11] </ref>. In this paper, we wish to demonstrate that GA can be an effective method to solve the stated class of CSOPs.
Reference: [3] <author> Eiben A., Rau P-E. and Ruttkay Zs. </author> <title> (1994) GA-easy and GA-hard Constraint Satisfaction Problems. </title> <institution> Vrije Universiteit Amsterdam, Artificial Intelligence Group, Department of Mathematics and Computer Science. </institution>
Reference-contexts: Tsang argues in [5] to use stochastic methods. The project presented in this paper follows the footstep of those who have used GA to tackle CSOPs <ref> [2, 3, 8, 10, 11] </ref>. In this paper, we wish to demonstrate that GA can be an effective method to solve the stated class of CSOPs.
Reference: [4] <author> Freuder E. and Mackworth A. </author> <title> (Editor) (1994). Constraints-based Reasoning. </title> <publisher> MIT Press. </publisher>
Reference-contexts: The challenge is to find solution tuples which map the variables onto values that are within their respective domain, and does not violate any of the constraints placed on them. Constraint Satisfaction Optimization Problems (CSOP) are a subclass of CSPs and require that the solution found must be optimal <ref> [4, 9] </ref>. In this paper, we are particularly interested in optimizing one class of CSP where the solution tuples can be expressed as permutation of each other. We chose the Processor Configuration Problem for this reason and because of its applicability (see section 1.3). 1.2.
Reference: [5] <author> Freuder E. (Chair), Dechter R., Selman B., Ginsberg M. and Tsang E. </author> <year> (1995). </year> <title> Systematic Versus Stochastic Constraint Satisfaction (Panel Paper). </title> <booktitle> 14 th International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Genetic Algorithm and CSP CSPs are NP-complete in general and although heuristics have been found useful in solving them, complete search algorithms are limited by the combinatorial explosion problem. Tsang argues in <ref> [5] </ref> to use stochastic methods. The project presented in this paper follows the footstep of those who have used GA to tackle CSOPs [2, 3, 8, 10, 11]. In this paper, we wish to demonstrate that GA can be an effective method to solve the stated class of CSOPs.
Reference: [6] <author> Goldberg D. </author> <title> (1989) Genetic Algorithm in Search, Optimization and Machine Learning. </title> <publisher> Addison-Wesley Pub. Co., Inc. </publisher>
Reference: [7] <author> Holland J. </author> <booktitle> (1975) Adaptation in Natural and Artificial Systems. </booktitle> <publisher> The University of Michigan Press. </publisher>
Reference: [8] <author> Tsang E. and Warwick T. </author> <title> (1989) Applying Genetic Algorithms to Constraint Satisfaction Optimisation Problems. </title> <booktitle> Proceedings of the European Conference on No. of processors AMP GAcSP GAcSP (HC) LPGA LPGA (CPA) 32 N.A. </booktitle> <volume> 1160 9103 813 1652 34 N.A. 1018 5979 875 1903 36 N.A. 2095 10135 942 2159 38 N.A. 5032 10304 1033 2271 40 N.A. </volume> <booktitle> 5432 14908 1131 2420 Artificial Intelligence. </booktitle> <address> Stockholm, Sweden. </address>
Reference-contexts: Tsang argues in [5] to use stochastic methods. The project presented in this paper follows the footstep of those who have used GA to tackle CSOPs <ref> [2, 3, 8, 10, 11] </ref>. In this paper, we wish to demonstrate that GA can be an effective method to solve the stated class of CSOPs.
Reference: [9] <author> Tsang E. </author> <title> (1993) Foundations of Constraint Satisfaction. </title> <publisher> Academic Press Limited. </publisher>
Reference-contexts: The challenge is to find solution tuples which map the variables onto values that are within their respective domain, and does not violate any of the constraints placed on them. Constraint Satisfaction Optimization Problems (CSOP) are a subclass of CSPs and require that the solution found must be optimal <ref> [4, 9] </ref>. In this paper, we are particularly interested in optimizing one class of CSP where the solution tuples can be expressed as permutation of each other. We chose the Processor Configuration Problem for this reason and because of its applicability (see section 1.3). 1.2.
Reference: [10] <author> Warwick T. and Tsang E. </author> <title> (1993) Using a Genetic Algorithm to tackle the Processor Configuration Problem. </title> <booktitle> Symposium on Applied Computing, </booktitle> <year> 1994, </year> <pages> pages 217-221 </pages>
Reference-contexts: Tsang argues in [5] to use stochastic methods. The project presented in this paper follows the footstep of those who have used GA to tackle CSOPs <ref> [2, 3, 8, 10, 11] </ref>. In this paper, we wish to demonstrate that GA can be an effective method to solve the stated class of CSOPs. <p> The performance of an algorithm is judged by the time required to reach a solution and the quality of that solution, which is given by the fitness function, d avg . The benchmark suite used here was based on <ref> [1, 10, 11] </ref>, so as to provide a comparison. The environment is as follows: PCP suite with 32 to 40 processors and a d max value of 3. Each recorded result (for d avg and CPU time) is the average of a trial of five runs. <p> A retention percentage of 25% was used to produce a schema for second phase optimization. The two competing solvers used in the benchmark are AMP [1] and GAcSP <ref> [10, 11] </ref>. AMP is an algorithm that uses depth-first search with hill-climbing. Note that for AMP, no runtime results were available and only results for 32 and 40 processor configurations were reported. GAcSP is based on the standard GA with the addition of a repairer and an optional hill-climber. 4.1.
Reference: [11] <author> Warwick T. </author> <title> (1995) A GA approach to Constraint Satisfaction Problems. </title> <type> Ph.D. thesis, </type> <note> to appear. </note> <institution> University of Essex, Department of Computer Science. </institution>
Reference-contexts: Tsang argues in [5] to use stochastic methods. The project presented in this paper follows the footstep of those who have used GA to tackle CSOPs <ref> [2, 3, 8, 10, 11] </ref>. In this paper, we wish to demonstrate that GA can be an effective method to solve the stated class of CSOPs. <p> The performance of an algorithm is judged by the time required to reach a solution and the quality of that solution, which is given by the fitness function, d avg . The benchmark suite used here was based on <ref> [1, 10, 11] </ref>, so as to provide a comparison. The environment is as follows: PCP suite with 32 to 40 processors and a d max value of 3. Each recorded result (for d avg and CPU time) is the average of a trial of five runs. <p> A retention percentage of 25% was used to produce a schema for second phase optimization. The two competing solvers used in the benchmark are AMP [1] and GAcSP <ref> [10, 11] </ref>. AMP is an algorithm that uses depth-first search with hill-climbing. Note that for AMP, no runtime results were available and only results for 32 and 40 processor configurations were reported. GAcSP is based on the standard GA with the addition of a repairer and an optional hill-climber. 4.1.
References-found: 11

