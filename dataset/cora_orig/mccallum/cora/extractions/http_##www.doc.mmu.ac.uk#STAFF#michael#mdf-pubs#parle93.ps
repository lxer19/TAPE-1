URL: http://www.doc.mmu.ac.uk/STAFF/michael/mdf-pubs/parle93.ps
Refering-URL: http://www.doc.mmu.ac.uk/RESEARCH/LoCo/group_pub.html
Root-URL: 
Title: Concurrent METATEM A Language for Modelling Reactive Systems  
Author: Michael Fisher 
Address: Manchester M20 0GR United Kingdom  
Affiliation: Department of Computer Science University of Manchester  
Abstract: In this paper, a language based on the notion of concurrent, communicating objects is presented. Each object executes a specification given in temporal logic and communicates with other objects using asynchronous broadcast message-passing. In contrast to the notions of predicates as processes and stream parallelism seen in concurrent logic languages, Concurrent METATEM represents a more course-grained approach, where an object consists of a set of temporal rules and communication is achieved by the evaluation of certain types of predicate. Thus, Concurrent METATEM represents a combination of the direct execution of temporal specifications, together with a novel model of concurrent computation and, as such, it provides a new approach to the modelling of complex reactive systems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Abadi and Z. Manna. </author> <title> Temporal Logic Programming. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 8: </volume> <pages> 277-295, </pages> <year> 1989. </year>
Reference-contexts: We again stress that although a (temporal) logic is executed directly, we do not use the logic programming approach. Various executable temporal logics have been developed, for example <ref> [17, 1] </ref>, but few have incorporated the notions of concurrency and we know of none that are based upon a computational model similar to the one described here. 7 Conclusions Concurrent METATEM not only provides a novel model for the simulation and implementation of a class of reactive systems, but also
Reference: 2. <author> Gul Agha. </author> <title> Actors A Model for Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Objects are considered to be self contained entities, encapsulating both data and behaviour, able to execute independently of each other, and communicating via message-passing. The predominant approach to concurrent object-based systems is that of the actor model of computation <ref> [14, 2] </ref>. The metaphor used in the actor model is of a mail system, with messages being addressed and sent directly to individual actors. Thus, actor systems are based upon point-to-point message-passing and message-driven computation.
Reference: 3. <author> Gregory R. Andrews. </author> <title> Paradigms for Process Interaction in Distributed Programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 49-90, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: An advantage of this approach, at least when representing certain systems from Distributed AI, is that the model follows the way in which humans communicate and cooperate. Although the use of broadcast message-passing has many advantages, particularly for developing flexible and fault-tolerant systems <ref> [7, 20, 3] </ref>, the obvious drawback of this approach is that systems communicating in this may not scale up.
Reference: 4. <author> H. Barringer, M. Fisher, D. Gabbay, G. Gough, and R. Owens. </author> <title> METATEM: A Framework for Programming in Temporal Logic. </title> <booktitle> In Proceedings of REX Workshop on Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness, Mook, </booktitle> <address> Netherlands, </address> <month> June </month> <year> 1989. </year> <booktitle> (Published in Lecture Notes in Computer Science, </booktitle> <volume> volume 430, </volume> <publisher> Springer Verlag). </publisher>
Reference-contexts: These entities encapsulate both data and behaviour and, hence, can be termed objects. Such reactive systems are sometimes termed concurrent object-based systems. The language described in this paper has been developed from the sequential execution of temporal formulae provided by METATEM, an executable temporal logic described in <ref> [4, 10] </ref>. Thus, individual objects execute temporal specifications and communicate with their environment at certain times by broadcasting information. <p> Such executing objects are generally course-grained, with an object consisting of a set of logical rules which define constraints upon certain predicates. In particular, the temporal logic we use within each individual object has been shown to be useful in describing and implementing various properties of reactive systems <ref> [15, 4] </ref>. Concurrent METATEM is an instance of an abstract model of computation, called the CMP Model. <p> we here assume that all objects in the system are defined using Concurrent METATEM. 3 The Basic Features of Concurrent METATEM The computation mechanism for a single object in the Concurrent METATEM system is provided by a METATEM-like computational engine, which is based on the execution of temporal logic formulae <ref> [4, 10] </ref>. We first give a brief overview of temporal logic together with an outline of the METATEM execution mechanism. 3.1 Temporal Logic Temporal logic can be seen as classical logic extended with various modalities representing temporal aspects of logical formulae. <p> There are many other temporal operators used in temporal logics in general, and in META-TEM in particular, though they will not be mentioned here (see <ref> [4, 10] </ref> for more details). It should be noted that the use of temporal logic as the basis for the computation rules gives an extra level of expressive power over the corresponding classical logics.
Reference: 5. <author> H. Barringer, M. Fisher, D. Gabbay, and A. Hunter. </author> <title> Meta-Reasoning in Executable Temporal Logic. </title> <editor> In J. Allen, R. Fikes, and E. Sandewall, editors, </editor> <booktitle> Proceedings of the International Conference on Principles of Knowledge Representation and Reasoning (KR'91), </booktitle> <address> Cambridge, Mas-sachusetts, April 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: will briefly describe some of the more advanced features of Concurrent METATEM. 5 Extensions of Concurrent METATEM Although the features we will describe in this section can be categorised as extra-logical, the intention is that these extensions to the basic execution of temporal logic will be defined using meta-level techniques <ref> [5] </ref>, rather than system primitives. Note that several of these capabilities have yet to be implemented fully. 5.1 Dynamic interfaces The interface definition of an object defines the initial set of messages that are recognised by that object.
Reference: 6. <author> Kenneth P. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <type> Techan-ical Report TR91-1216, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: An object can selectively broadcast messages to particular rooms that it is a member of. This mechanism is related to the process group approach used in many distributed operating systems <ref> [6] </ref>, and to the group model of computation described in [16]. 6 Related Work Due to lack of space we are only be able to briefly sketch the relationship between our work and others in the area of both executable logics and languages for distributed systems. <p> Maruichi et. al. [16] use a model of computation similar to ours for their investigation in DAI systems, while several distributed operating systems also use the notion of process groups (what we call `rooms') in order to group processes (objects) together <ref> [6] </ref>. Though several of the above approaches have similarities with Concurrent METATEM, none are based on the direct execution of logical statements. Related work on Concurrent Logic Programming has mainly been based on the execution of logic programs within the Linda and actor models, e.g. [19].
Reference: 7. <author> A. Borg, J. Baumbach, and S. Glazer. </author> <title> A Message System Supporting Fault Tolerance. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 90-99, </pages> <address> New Hampshire, </address> <month> October </month> <year> 1983. </year> <journal> ACM. (In ACM Operating Systems Review, </journal> <volume> vol. 17, no. </volume> <pages> 5). </pages>
Reference-contexts: An advantage of this approach, at least when representing certain systems from Distributed AI, is that the model follows the way in which humans communicate and cooperate. Although the use of broadcast message-passing has many advantages, particularly for developing flexible and fault-tolerant systems <ref> [7, 20, 3] </ref>, the obvious drawback of this approach is that systems communicating in this may not scale up.
Reference: 8. <author> M. Finger, M. Fisher, and R. Owens. </author> <title> METATEM at Work: Modelling Reactive Systems Using Executable Temporal Logic. </title> <booktitle> In Sixth International Conference on Industrial and Engineering Applications of Artificial Intelligence and Expert Systems (IEA/AIE-93), </booktitle> <address> Edinburgh, U.K., </address> <month> June </month> <year> 1993. </year> <note> Gordon and Breach Publishers. (To appear). </note>
Reference-contexts: Sets of Concurrent METATEM objects representing `standard' examples, such as the dining philosophers and producer/consumer problems can be similarly defined. Concurrent METATEM is being applied in a variety of areas, from the modelling of transport systems <ref> [8] </ref>, to Distributed A.I. [9]. Systems based upon point-to-point message-passing, for example actor systems, can also be defined by ensuring that each message incorporates a destination address as one of its arguments.
Reference: 9. <author> M. Fisher and H. Barringer. </author> <title> Concurrent METATEM Processes A Language for Distributed AI. </title> <booktitle> In Proceedings of the European Simulation Multiconference, </booktitle> <address> Copenhagen, Denmark, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Thus, individual objects execute temporal specifications and communicate with their environment at certain times by broadcasting information. This model of computation for executable temporal logics was initially outlined in <ref> [9] </ref> here we describe the full language and present applications of this approach to the design and development of reactive systems. Objects in Concurrent METATEM, while being logic-based, execute their logical specifications using a particular operational interpretation for temporal formulae. <p> Sets of Concurrent METATEM objects representing `standard' examples, such as the dining philosophers and producer/consumer problems can be similarly defined. Concurrent METATEM is being applied in a variety of areas, from the modelling of transport systems [8], to Distributed A.I. <ref> [9] </ref>. Systems based upon point-to-point message-passing, for example actor systems, can also be defined by ensuring that each message incorporates a destination address as one of its arguments.
Reference: 10. <author> M. Fisher and R. Owens. </author> <title> From the Past to the Future: Executing Temporal Logic Programs. </title> <booktitle> In Proceedings of Logic Programming and Automated Reasoning (LPAR), </booktitle> <address> St. Petersberg, Russia, </address> <month> July </month> <year> 1992. </year> <booktitle> (Published in Lecture Notes in Computer Science, </booktitle> <volume> volume 624, </volume> <publisher> Springer Verlag). </publisher>
Reference-contexts: These entities encapsulate both data and behaviour and, hence, can be termed objects. Such reactive systems are sometimes termed concurrent object-based systems. The language described in this paper has been developed from the sequential execution of temporal formulae provided by METATEM, an executable temporal logic described in <ref> [4, 10] </ref>. Thus, individual objects execute temporal specifications and communicate with their environment at certain times by broadcasting information. <p> we here assume that all objects in the system are defined using Concurrent METATEM. 3 The Basic Features of Concurrent METATEM The computation mechanism for a single object in the Concurrent METATEM system is provided by a METATEM-like computational engine, which is based on the execution of temporal logic formulae <ref> [4, 10] </ref>. We first give a brief overview of temporal logic together with an outline of the METATEM execution mechanism. 3.1 Temporal Logic Temporal logic can be seen as classical logic extended with various modalities representing temporal aspects of logical formulae. <p> There are many other temporal operators used in temporal logics in general, and in META-TEM in particular, though they will not be mentioned here (see <ref> [4, 10] </ref> for more details). It should be noted that the use of temporal logic as the basis for the computation rules gives an extra level of expressive power over the corresponding classical logics. <p> For a more detailed description of the METATEM execution mechanism, see <ref> [10] </ref>. By default, predicates remain false unless otherwise constrained and each object executes asynchronously. The message-passing mechanism is asynchronous but does not guarantee that the order of arrival of messages is the same as the order of sending.
Reference: 11. <author> Narian H. Gehani. </author> <title> Broadcasting Sequential Processes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(4) </volume> <pages> 343-351, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: In <ref> [11] </ref>, Gehani describes Broadcasting Sequential Processes (BSP) which is also based on the asynchronous broadcasting of messages.
Reference: 12. <author> D. Gelernter, N. Carriero, S. Chandran, and S. Chang. </author> <title> Parallel programming in Linda. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1985. </year>
Reference-contexts: Concurrent METATEM is an instance of an abstract model of computation, called the CMP Model. Lack of space prevents us from exploring this model in full, but we note its links with coordination languages, such as Linda <ref> [12] </ref>, where heterogeneous networks of objects can be constructed, and give a brief overview of its features in 2. <p> One, more fundamental, difference between BSP and our approach is that objects in BSP are message driven. The Linda model <ref> [12] </ref> has some similarities with this approach in that the shared data structures represented in the Linda tuple space can be seen as providing a broadcast mechanism for data.
Reference: 13. <author> D. Harel and A. Pnueli. </author> <title> On the Development of Reactive Systems. </title> <type> Technical Report CS85-02, </type> <institution> Department of Applied Mathematics, The Weizmann Institute of Science, Revohot, Israel, </institution> <month> January </month> <year> 1985. </year>
Reference-contexts: 1 Introduction A wide variety of computer systems are reactive. Rather than simply reading a set of inputs and producing, on termination, a set of outputs, reactive systems typically consist of nonter-minating, concurrent and distributed components, each of which continually interact with their environment <ref> [18, 13] </ref>. Such systems are widely used in complex real-life applications, yet they are notoriously difficult to characterise and model formally. In this paper, a language for representing a subclass of reactive systems is described.
Reference: 14. <author> Carl Hewitt. </author> <title> Control Structure as Patterns of Passing Messages. </title> <editor> In P. H. Winston and R. H. Brown, editors, </editor> <booktitle> Artificial Intelligence: An MIT Perspective (Volume 2), </booktitle> <pages> pages 433-465. </pages> <publisher> MIT Press, </publisher> <year> 1979. </year>
Reference-contexts: Objects are considered to be self contained entities, encapsulating both data and behaviour, able to execute independently of each other, and communicating via message-passing. The predominant approach to concurrent object-based systems is that of the actor model of computation <ref> [14, 2] </ref>. The metaphor used in the actor model is of a mail system, with messages being addressed and sent directly to individual actors. Thus, actor systems are based upon point-to-point message-passing and message-driven computation.
Reference: 15. <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Such executing objects are generally course-grained, with an object consisting of a set of logical rules which define constraints upon certain predicates. In particular, the temporal logic we use within each individual object has been shown to be useful in describing and implementing various properties of reactive systems <ref> [15, 4] </ref>. Concurrent METATEM is an instance of an abstract model of computation, called the CMP Model.
Reference: 16. <author> T. Maruichi, M. Ichikawa, and M. Tokoro. </author> <title> Modelling autonomous agents and their groups. </title> <editor> In Y. Demazeau and J. P. Muller, editors, </editor> <booktitle> Decentralized A.I. </booktitle> <volume> (Volume 2), </volume> <pages> pages 215-234. </pages> <address> Elsevier/North-Holland, </address> <year> 1990. </year>
Reference-contexts: An object can selectively broadcast messages to particular rooms that it is a member of. This mechanism is related to the process group approach used in many distributed operating systems [6], and to the group model of computation described in <ref> [16] </ref>. 6 Related Work Due to lack of space we are only be able to briefly sketch the relationship between our work and others in the area of both executable logics and languages for distributed systems. <p> Maruichi et. al. <ref> [16] </ref> use a model of computation similar to ours for their investigation in DAI systems, while several distributed operating systems also use the notion of process groups (what we call `rooms') in order to group processes (objects) together [6].
Reference: 17. <author> Ben Moszkowski. </author> <title> Executing Temporal Logic Programs. </title> <publisher> Cambridge University Press, </publisher> <address> Cam-bridge, U.K., </address> <year> 1986. </year>
Reference-contexts: We again stress that although a (temporal) logic is executed directly, we do not use the logic programming approach. Various executable temporal logics have been developed, for example <ref> [17, 1] </ref>, but few have incorporated the notions of concurrency and we know of none that are based upon a computational model similar to the one described here. 7 Conclusions Concurrent METATEM not only provides a novel model for the simulation and implementation of a class of reactive systems, but also
Reference: 18. <author> Amir Pnueli. </author> <title> Applications of Temporal Logic to the Specification and Verification of Reactive Systems: A Survey of Current Trends. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 224, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: 1 Introduction A wide variety of computer systems are reactive. Rather than simply reading a set of inputs and producing, on termination, a set of outputs, reactive systems typically consist of nonter-minating, concurrent and distributed components, each of which continually interact with their environment <ref> [18, 13] </ref>. Such systems are widely used in complex real-life applications, yet they are notoriously difficult to characterise and model formally. In this paper, a language for representing a subclass of reactive systems is described.
Reference: 19. <author> E. Shapiro and A. Takeuchi. </author> <title> Object Oriented Programming in Concurrent Prolog. </title> <editor> In Ehud Shapiro, editor, </editor> <booktitle> Concurrent Prolog-Collected Papers, chapter 29, </booktitle> <pages> pages 251-273. </pages> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Though several of the above approaches have similarities with Concurrent METATEM, none are based on the direct execution of logical statements. Related work on Concurrent Logic Programming has mainly been based on the execution of logic programs within the Linda and actor models, e.g. <ref> [19] </ref>. We again stress that although a (temporal) logic is executed directly, we do not use the logic programming approach.
Reference: 20. <author> R. Strom and S. Yemini. </author> <title> Optimistic Recovery in Distributed Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: An advantage of this approach, at least when representing certain systems from Distributed AI, is that the model follows the way in which humans communicate and cooperate. Although the use of broadcast message-passing has many advantages, particularly for developing flexible and fault-tolerant systems <ref> [7, 20, 3] </ref>, the obvious drawback of this approach is that systems communicating in this may not scale up.
References-found: 20

