URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3642/3642.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: Email: nick@cs.umd.edu  
Phone: Phone: 301-405-2687. Fax: 301-405-6707,  
Title: Efficient Refreshment of Data Warehouse Views  
Author: Lars Bkgaard Nick Roussopoulos 
Keyword: Key Terms: Incremental view refreshment, data warehousing.  
Address: College Park A.V. Williams Building, College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies and Department of Computer Science University of Maryland at  
Abstract: A data warehouse is a view on a set of distributed and possible loosely coupled source databases. For efficiency reasons a warehouse should be maintained as a materialized view. Therefore, efficient incremental algorithms must be used to periodically refresh the data warehouse. It is possible and desirable to separate the process of warehouse refreshment from the process of warehouse use. In this paper we describe and compare view refreshment algorithms that are based on different combinations of materialized views, partially materialized views, and pointers. Our contribution is twofold. First, our algorithms and data structures are designed to minimize network communication and interactions between the warehouse and the source databases. The minimal set of data that is necessary for both warehouse refreshment and warehouse use is stored on the warehouse. Second, we describe the results of an experiment comparing these methods with respect to storage overhead and I/O. Briefly, the experiment show that algorithms based on a combination of partially materialized views and pointers outperforms algorithms based on materialized views. 
Abstract-found: 1
Intro-found: 1
Reference: [Bk95] <author> L. Bkgaard. </author> <title> The Predicate Indexed Incremental Join. </title> <type> R 95-2019, </type> <institution> Department of Mathematics and Computer Science, Aalborg University, Denmark, </institution> <year> 1995. </year>
Reference-contexts: View indexing by means of pointer structures has been described in <ref> [Bk95] </ref>, [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. <p> The tuple identifier and join attribute of these tuples must be removed S0 ptr (a) . In Steps 5-6 R0 and S0 are updated. 4.3 Partially Materialized Operand ViewCaches The algorithm PartMatOp <ref> [Bk95] </ref> is an incremental algorithm that is identical to ViewCache with the following exception. ViewCache is designed to handle both insertions to and deletions from R and S. The joins in Steps 1-2 are based on partially materialized views for R and S rather than on R and S.
Reference: [BLT86] <author> J.A. Blakeley, P. A. Larson, and F.Wm. Tompa. </author> <title> Efficiently Udating Materialized Views. </title> <booktitle> In Proceedings of the 1986 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Washington, D.C., </address> <pages> pages 61-71, </pages> <year> 1986. </year>
Reference-contexts: We have assumed that all involved databases are relational databases. Much research work has focussed on incremental view refreshment. Incremental formulas has been defined for views defined by SPJ-queries <ref> [BLT86] </ref>, [LHM + 86], [Rou91], for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections [BM95c], and for view defined by set differences [BM95b]. <p> We use the terms R1 and R0 to denote the sets of joining and non-joining tuples, respectively, in R. Figure 3 illustrates the contents of R0 and S0. R1 = R:a;R:b;:R:c (R1S) The following formulas define the incremental refreshment of join views <ref> [BLT86] </ref>, [Rou91]. (R1S) new = ((R1S) old n ((R1S) D ))[((R1S) I ) (1) R 11:15:95 r 1 1 10 100 r 3 3 12 102 R 11:15:9511:17:95 tid a b c r 6 7 15 105 tid a b c r 2 2 11 101 r 4 4 13 103
Reference: [BM90] <author> J.A. Blakeley and N.L. Martin. </author> <title> Join Index, Materialized View, and Hybrid-Hash Join: A Performance Analysis. </title> <booktitle> In Proceedings of the Sixth International Conference on Data Engineering, </booktitle> <pages> pages 256-263, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in <ref> [BM90] </ref>, [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88].
Reference: [BM95a] <author> L. Bkgaard and L. Mark. </author> <title> Incremental Computation of Nested Relational Query Expressions. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 20(2) </volume> <pages> 111-148, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], <ref> [BM95a] </ref>, [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95].
Reference: [BM95b] <author> L. Bkgaard and L. Mark. </author> <title> Incremental Computation of Set Difference Views. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <note> 1995. In press. </note>
Reference-contexts: Much research work has focussed on incremental view refreshment. Incremental formulas has been defined for views defined by SPJ-queries [BLT86], [LHM + 86], [Rou91], for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections [BM95c], and for view defined by set differences <ref> [BM95b] </ref>. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. <p> been defined for views defined by SPJ-queries [BLT86], [LHM + 86], [Rou91], for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections [BM95c], and for view defined by set differences <ref> [BM95b] </ref>. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95].
Reference: [BM95c] <author> L. Bkgaard and L. Mark. </author> <title> Incremental Computation of Time-Varying Query Expressions. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 7(4) </volume> <pages> 583-590, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Much research work has focussed on incremental view refreshment. Incremental formulas has been defined for views defined by SPJ-queries [BLT86], [LHM + 86], [Rou91], for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections <ref> [BM95c] </ref>, and for view defined by set differences [BM95b]. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. <p> defined for views defined by SPJ-queries [BLT86], [LHM + 86], [Rou91], for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections <ref> [BM95c] </ref>, and for view defined by set differences [BM95b]. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. <p> The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases <ref> [BM95c] </ref>, [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches. In Section 2 we discuss a set of methods that can be used for view organization and refreshment in data warehousing environments.
Reference: [BT94] <author> D. Bitton and C. Turbyfill. </author> <title> A Retrospective on the Wisconsin Benchmark. </title> <editor> In M. Stonebraker, editor, </editor> <booktitle> Readings in Database Systems, </booktitle> <pages> pages 422-441. </pages> <publisher> Morgan kauf-mann, </publisher> <year> 1994. </year> <month> 13 </month>
Reference-contexts: Partially Materialized Operand ViewCache: the ROWID and the joining attribute values, and a ViewCache pointer view. 5.1 Experiment Design We used a variation of the Wisconsin Benchmark relations <ref> [BT94] </ref>. Two of them, R and T , have 10,000 records each while a third one, S, contains 24,000. In each of R and T , 20% of the tuples do not join with any tuples of S (part of R0 and T 0).
Reference: [CKPS95] <author> S. Chaudhuri, R. Krishnamurthy, S. Potamianos, and K. Shim. </author> <title> Optimizing Queries with Materialized Views. </title> <booktitle> In 1995 Proceedings of the 11th International Conference on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <year> 1995. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], <ref> [CKPS95] </ref>, [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88].
Reference: [CR94] <author> C.M. Chen and N. Roussopoulos. </author> <title> The implementation and Performance Evaluation of the ADMS Query Optimizer: Integrating Query Result Caching and Matching. </title> <booktitle> In Procs. of the 4th Intl. Conf. on Extending Database Technology, </booktitle> <year> 1994. </year>
Reference-contexts: All the experiments were run in the ADMS prototype [RES93]. The ADMS engine and its optimizer have been developed to take advantage of cached views <ref> [CR94] </ref>. We ran the experiments to measure the I/O cost of the five algorithms described in section 2: the two basic categories of fully Materialized Views, the ViewCache Pointer based one, and two Partially Materialized and partially ViewCaches. 1.
Reference: [CSL + 90] <author> M. Carey, E. Shekita, G. Lapsis, B. Lindsay, and J. McPherson. </author> <title> An Incremental Join Attachment for Starburst. </title> <booktitle> In 1990 Proceedings of the 16th International Conference on Very Large Databases, </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases <ref> [CSL + 90] </ref>, [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [CW91] <author> S. Ceri and J. Widom. </author> <title> Deriving Production Rules for Incremental View Maintenance. </title> <booktitle> In 1991 Proceedings of the 17th International Conference on Very Large Databases, </booktitle> <address> Barcelona, Spain, </address> <year> 1991. </year>
Reference-contexts: The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], <ref> [CW91] </ref>, [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [GL95] <author> T. Griffin and L. Libkin. </author> <title> Incremental Maintenance of Views with Duplicates. </title> <booktitle> In Proceedings of the 1995 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Jose, California, USA, </address> <year> 1995. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], <ref> [GL95] </ref>, [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88].
Reference: [GMR95] <author> A. Gupta, I.S. Mumick, and K.A. Ross. </author> <title> Adapting Materialized Views after Redefinitions. </title> <booktitle> In Proceedings of the 1995 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Jose, California, USA, </address> <pages> pages 211-222, </pages> <year> 1995. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], <ref> [GMR95] </ref>, [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88].
Reference: [GMS93] <author> A. Gupta, </author> <title> I.S. Mumick, and V.S. Subrahmanian. Maintaining Views Incrementally. </title> <booktitle> In Proceedings of the 1993 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Washington D.C., USA, </address> <year> 1993. </year>
Reference-contexts: We have assumed that all involved databases are relational databases. Much research work has focussed on incremental view refreshment. Incremental formulas has been defined for views defined by SPJ-queries [BLT86], [LHM + 86], [Rou91], for views defined by relational complete query languages <ref> [GMS93] </ref>, [QW91], for views defined by time-varying selections [BM95c], and for view defined by set differences [BM95b]. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. <p> The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases <ref> [GMS93] </ref>, and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches. In Section 2 we discuss a set of methods that can be used for view organization and refreshment in data warehousing environments.
Reference: [Han87] <author> E.N. Hanson. </author> <title> A Performance Analysis of View Materialization Strategies. </title> <booktitle> In Proceedings of the 1987 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Fransisco, California, </address> <pages> pages 440-453, </pages> <year> 1987. </year>
Reference-contexts: A pointer-based ViewCache contains a set of tuple identifiers that identify and point to the data objects in the underlying relations that be dereferenced to materialize the view [Rou91]. A materialized view is stored as the set of data objects that belong to the view <ref> [Han87] </ref>. ViewCaches and materialized views must be maintained incrementally. We present and analyze five refreshment algorithms that are based on various combinations of materialized views, partially materialized views, and ViewCaches. Existing data warehousing approaches focus solely on materialized views. <p> View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], <ref> [Han87] </ref>, [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [Han92] <author> E.N. Hanson. </author> <title> Rule Condition Testing and Action Execution in ARIAL. </title> <booktitle> In Proceedings of the 1992 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Diego, California, USA, </address> <year> 1992. </year>
Reference-contexts: The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], <ref> [Han92] </ref>, [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [HCKW90] <author> E.N. Hanson, M. Chaabouni, C.-H. Kim, and Y.-W. Wang. </author> <title> A Predicate Matching Algorithm for Database and Rule Systems. </title> <booktitle> In Proceedings of the 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Atlantic City, New Jersey, </address> <year> 1990. </year>
Reference-contexts: The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], <ref> [HCKW90] </ref>, [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [HK95] <author> C. Hamon and A.M. Keller. </author> <title> Two-Level Caching of Composite Object Views of Relational Databases. </title> <booktitle> In 1995 Proceedings of the 11th International Conference on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <year> 1995. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], <ref> [HK95] </ref>, [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88].
Reference: [Inm93] <author> W.H. Inmon. </author> <title> Building the Data Warehouse. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1993. </year>
Reference-contexts: The reason is that the warehouse is used for analytical, managerial data processing rather than for day-by-day operational data processing. Inmon has even recommended that a data warehouse is refreshed with a 24-hour delay in order to ensure that warehouse data are not confused with operational data <ref> [Inm93] </ref>. Consequently, it makes sense to assume that warehouse use and warehouse refreshment are separate processes. We believe that such separation makes it easier to answer warehouse queries efficiently and to solve the problems of warehouse consistency [ZGMHW95].
Reference: [JMR91] <author> C.S. Jensen, L. Mark, and N. Roussopoulos. </author> <title> Incremental Implementation Model for Relational Databases with Transaction Time. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(4) </volume> <pages> 461-473, </pages> <year> 1991. </year> <month> 14 </month>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], <ref> [JMR91] </ref>, [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. <p> The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], <ref> [JMR91] </ref>, [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches. In Section 2 we discuss a set of methods that can be used for view organization and refreshment in data warehousing environments.
Reference: [LHM + 86] <author> B. Lindsay, L. Haas, C. Mohan, H. Pirahesh, and P. Wilms. </author> <title> A Snapshot Differ--ential Refresh Algorithm. </title> <booktitle> In Proceedings of the 1986 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Washington, D.C., </address> <year> 1986. </year>
Reference-contexts: We have assumed that all involved databases are relational databases. Much research work has focussed on incremental view refreshment. Incremental formulas has been defined for views defined by SPJ-queries [BLT86], <ref> [LHM + 86] </ref>, [Rou91], for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections [BM95c], and for view defined by set differences [BM95b].
Reference: [LMSS95] <author> J.J. Lu, G. Moerkotte, J. Schue, </author> <title> and V.S. Subrahmanian. Efficient Maintenance of Materialized Mediated Views. </title> <booktitle> In Proceedings of the 1995 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Jose, California, USA, </address> <pages> pages 340-351, </pages> <year> 1995. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], <ref> [LMSS95] </ref>, [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [McK88] <author> L.E. McKenzie. </author> <title> An Algebraic Language for Query and Update of Temporal Databases. </title> <type> TR 88-050, </type> <institution> University of North Carolina at Chapel Hill, Department of Computer Science, USA, </institution> <year> 1988. </year>
Reference-contexts: The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], <ref> [McK88] </ref>. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches. In Section 2 we discuss a set of methods that can be used for view organization and refreshment in data warehousing environments.
Reference: [QW91] <author> X. Qian and G. Wiederhold. </author> <title> Incremental Recomputation of Active Relational Expressions. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(3) </volume> <pages> 337-341, </pages> <year> 1991. </year>
Reference-contexts: We have assumed that all involved databases are relational databases. Much research work has focussed on incremental view refreshment. Incremental formulas has been defined for views defined by SPJ-queries [BLT86], [LHM + 86], [Rou91], for views defined by relational complete query languages [GMS93], <ref> [QW91] </ref>, for views defined by time-varying selections [BM95c], and for view defined by set differences [BM95b]. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. <p> views defined by SPJ-queries [BLT86], [LHM + 86], [Rou91], for views defined by relational complete query languages [GMS93], <ref> [QW91] </ref>, for views defined by time-varying selections [BM95c], and for view defined by set differences [BM95b]. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95].
Reference: [RCBB89] <author> A. Rosenthal, S. Chakravarthe, B. Blaustein, and J. Blakeley. </author> <title> Situation Monitoring for Active Databases. </title> <booktitle> In 1989 Proceedings of the 15th International Conference on Very Large Data Bases, </booktitle> <address> Amsterdam, The Netherlands, </address> <year> 1989. </year>
Reference-contexts: The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], <ref> [RCBB89] </ref>, [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [RES93] <author> N. Roussopoulos, N. Economou, and A. Stamenas. ADMS: </author> <title> A Testbed for Incremental Access Methods. </title> <type> Technical Report UMIACS-TR-90-103, </type> <institution> University of Maryland Institute for Advanced Computer Studies, </institution> <year> 1993. </year>
Reference-contexts: For complex joins where the operands are not base relations the pointer cache will point to partially materialized views for the operands. 10 5 Experiments In this section we describe a limited experiment testing the incremental join algorithms described above. All the experiments were run in the ADMS prototype <ref> [RES93] </ref>. The ADMS engine and its optimizer have been developed to take advantage of cached views [CR94].
Reference: [RK91] <author> N. Roussopoulos and H. Kang. </author> <title> A Pipeline N-way Join Algorithm Based on the 2-way Semijoin Program. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(4) </volume> <pages> 486-495, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], <ref> [RK91] </ref>, [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95].
Reference: [Rou82a] <author> N. Roussopoulos. </author> <title> The Logical Access Path Schema of a Database. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-8(6):563-573, </volume> <year> 1982. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], <ref> [Rou82a] </ref>, [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95].
Reference: [Rou82b] <author> N. Roussopoulos. </author> <title> View Indexing in Relational Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7(2) </volume> <pages> 258-290, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], <ref> [Rou82b] </ref>, [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95].
Reference: [Rou91] <author> N. Roussopoulos. </author> <title> An Incremental Access Method for Viewcache: Concept, Algorithms, and Cost Analysis. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(3) </volume> <pages> 535-563, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: A computed view is reconstructed each time it is accessed by methods like query modification [Sto75]. A pointer-based ViewCache contains a set of tuple identifiers that identify and point to the data objects in the underlying relations that be dereferenced to materialize the view <ref> [Rou91] </ref>. A materialized view is stored as the set of data objects that belong to the view [Han87]. ViewCaches and materialized views must be maintained incrementally. We present and analyze five refreshment algorithms that are based on various combinations of materialized views, partially materialized views, and ViewCaches. <p> We have assumed that all involved databases are relational databases. Much research work has focussed on incremental view refreshment. Incremental formulas has been defined for views defined by SPJ-queries [BLT86], [LHM + 86], <ref> [Rou91] </ref>, for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections [BM95c], and for view defined by set differences [BM95b]. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. <p> SPJ-queries [BLT86], [LHM + 86], <ref> [Rou91] </ref>, for views defined by relational complete query languages [GMS93], [QW91], for views defined by time-varying selections [BM95c], and for view defined by set differences [BM95b]. View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. <p> We use the terms R1 and R0 to denote the sets of joining and non-joining tuples, respectively, in R. Figure 3 illustrates the contents of R0 and S0. R1 = R:a;R:b;:R:c (R1S) The following formulas define the incremental refreshment of join views [BLT86], <ref> [Rou91] </ref>. (R1S) new = ((R1S) old n ((R1S) D ))[((R1S) I ) (1) R 11:15:95 r 1 1 10 100 r 3 3 12 102 R 11:15:9511:17:95 tid a b c r 6 7 15 105 tid a b c r 2 2 11 101 r 4 4 13 103 r <p> If V is stored as a join ViewCache as illustrated in Figure 4, access to the view attributes of R1 and S1 is necessary for view materialization. Briefly, a join ViewCache contains a pair of tuple identifiers for each joining tuple pair <ref> [Rou91] </ref>. Access to the predicate attributes and the tuple identifiers of R0 new , R1 new , S0 new , and S1 new is necessary for the propagation. <p> All three algorithms are based on data structures that store all data that is needed for view refreshment at the warehouse. 4.1 Join ViewCache The algorithm ViewCache <ref> [Rou91] </ref> is an incremental algorithm that maintains and materializes a join ViewCache for a 2-way join. Figure 4 illustrates the contents of join ViewCaches. ViewCache is designed to handle both insertions to and deletions from R and S. <p> The first category requires sophisticated preprocessing of the logs and non-negligible I/O comparable to duplicate elimination while pointer based methods incur no cost for deletions when done in the same pass with the processing of insertions <ref> [Rou91] </ref>. 11 5.2 Storage Overhead First, we provide storage statistics for each of the view categories. Table 1 indicates the amount of storage in excess of the total storage cost required for the base relations.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On Rules, Procedures, Caching and Views in Data Basa Systems. </title> <booktitle> In Proceedings of the 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Atlantic City, New Jersey, </address> <pages> pages 281-290, </pages> <year> 1990. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], <ref> [SJGP90] </ref>, [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [SL76] <author> D.G. Severance and G.M. Lohman. </author> <title> Differential Files: Their Application to the Maintenance of Large Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(3) </volume> <pages> 256-267, </pages> <month> September </month> <year> 1976. </year>
Reference-contexts: The symbol R denotes R as of current time. We assume that all tuples are augmented with immutable and globally unique tuple identifiers. Consequently, each tuple is uniquely identified even though duplicates may occur. Changes made to base relations are stored on differential files <ref> [SL76] </ref> from which insertion sets and deletion sets are extracted. The symbol R t 1 t 2 I denotes the insertion set of R relative to the time interval (t 1 ; t 2 ].
Reference: [SR87] <author> K. Subieta and W. Rzeczkowski. </author> <title> Query Optimization by Stored Queries. </title> <booktitle> In 1987 Proceedings of the13th International Conference on Very Large Databases, </booktitle> <address> Brighton, Great Britain, </address> <pages> pages 369-380, </pages> <year> 1987. </year> <month> 15 </month>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], <ref> [SR87] </ref>, [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [Sto75] <author> M. Stonebraker. </author> <title> Implementation of Integrity Constraints and Views by Query Mod--ification. </title> <booktitle> In Proceedings of the 1975 SIGMOD Workshop on Management of Data, </booktitle> <address> San Jose, California, </address> <pages> pages 65-78, </pages> <year> 1975. </year>
Reference-contexts: A combination of three basic methods can be used to support data warehouse views. A computed view is stored as a view definition, ie., as a query expression. A computed view is reconstructed each time it is accessed by methods like query modification <ref> [Sto75] </ref>. A pointer-based ViewCache contains a set of tuple identifiers that identify and point to the data objects in the underlying relations that be dereferenced to materialize the view [Rou91]. A materialized view is stored as the set of data objects that belong to the view [Han87].
Reference: [Val87] <author> P. Valduriez. </author> <title> Join Indices. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(2) </volume> <pages> 218-246, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], <ref> [Val87] </ref>. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95].
Reference: [WDSY91] <author> O. Wolfson, H.M. Dewan, S.J. Stolfo, and Y. Yemini. </author> <title> Incremental Evaluation of Rules and its Relationship to Parallelism. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Denver, Colorado, USA, </address> <year> 1991. </year>
Reference-contexts: The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], [ZGMHW95]. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], <ref> [WDSY91] </ref>, for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
Reference: [ZGMHW95] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View Maintenance in a Warehousing Environment. </title> <booktitle> In Proceedings of the 1995 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Jose, California, USA, </address> <pages> pages 316-327, </pages> <year> 1995. </year>
Reference-contexts: However, it is a central issue in data warehousing environments where views defined on physically separated, heterogeneous, and autonomous databases must be supported <ref> [ZGMHW95] </ref>. Changes in the source databases must be transformed into a data model format used by the warehouse and integrated into the warehouse. A data warehouse does not necessarily have to be completely up to date. <p> Consequently, it makes sense to assume that warehouse use and warehouse refreshment are separate processes. We believe that such separation makes it easier to answer warehouse queries efficiently and to solve the problems of warehouse consistency <ref> [ZGMHW95] </ref>. In this paper we address some of the problems of efficient incremental refreshment of warehouse views. We focus on the following questions. <p> View indexing by means of pointer structures has been described in [Bk95], [BM95a], [BM95b], [BM95c], [JMR91], [QW91], [Rou82a], [Rou82b], [Rou91], [RK91], [Val87]. The use and refreshment of materialized views has been de 2 scribed in [BM90], [CKPS95], [GL95], [GMR95], [HK95], [Han87], [LMSS95], [SJGP90], [SR87], <ref> [ZGMHW95] </ref>. Incremental techniques has been described for active databases [CSL + 90], [CW91], [HCKW90], [Han92], [RCBB89], [WDSY91], for deductive databases [GMS93], and for temporal databases [BM95c], [JMR91], [McK88]. However, we are not aware of existing incremental algorithms that combine materialized view, partially materialized views, and ViewCaches.
References-found: 37

