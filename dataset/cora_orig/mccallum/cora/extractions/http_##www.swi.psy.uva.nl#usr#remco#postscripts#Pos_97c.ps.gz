URL: http://www.swi.psy.uva.nl/usr/remco/postscripts/Pos:97c.ps.gz
Refering-URL: http://www.swi.psy.uva.nl/usr/remco/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: fpos,akkermang@cs.utwente.nl  E-mail: remco@swi.psy.uva.nl  
Phone: 2  
Title: Problem Solving for Redesign  
Author: Anita Pos and Hans Akkermans and Remco Straatman 
Address: (UT)  P.O. Box 217 NL-7500 AE Enschede The Netherlands  Roetersstraat 15 1081 WB Amsterdam The Netherlands  
Affiliation: 1 University of Twente  Department of Computer Science  University of Amsterdam (UvA) Department of Social Science Informatics (SWI)  
Abstract: A knowledge-level analysis of complex tasks like diagnosis and design can give us a better understanding of these tasks in terms of the goals they aim to achieve and the different ways to achieve these goals. In this paper we present a knowledge-level analysis of redesign. Redesign is viewed as a family of methods based on some common principles, and a number of dimensions along which redesign problem solving methods can vary are distinguished. By examining the problem-solving behavior of a number of existing redesign systems and approaches, we came up with a collection of problem-solving methods for redesign and developed a task-method structure for redesign. In constructing a system for redesign a large number of knowledge-related choices and decisions are made. In order to describe all relevant choices in redesign problem solving, we have to extend the current notion of possible relations between tasks and methods in a PSM architecture. The realization of a task by a problem-solving method, and the decomposition of a problem-solving method into subtasks are the most common relations in a PSM architecture. However, we suggest to extend these relations with the notions of task refinement and method refinement. These notions represent intermediate decisions in a task-method structure, in which the competence of a task or method is refined without immediately paying attention to its operationalization in terms of subtasks. Explicit representation of this kind of intermediate decisions helps to make and represent decisions in a more piecemeal fashion. 
Abstract-found: 1
Intro-found: 1
Reference: <author> AKKERMANS, H., WIELINGA, B., & SCHREIBER, G. </author> <year> (1994). </year> <title> Steps in constructing problem solving methods. </title> <editor> In Gaines, B. R. & Musen, M., editors, </editor> <booktitle> Proceedings of the 8th International Knowledge Acquisition Workshop (KAW'94), </booktitle> <volume> volume 2, </volume> <pages> pages 29.1-29.21, </pages> <address> Banff, </address> <institution> Alberta. University of Calgary, SRDG Publications. </institution>
Reference-contexts: Competence refinement of a problem-solving method may introduce both additional teleological assumptions on the precise definition of the functional specification of a PSM as well as additional ontological assumptions on additional knowledge structures that should be available in the domain knowledge. The competence description <ref> (Akkermans et al., 1994) </ref> of a method or goal describes its problem space and requirements on the solution it produces.
Reference: <author> ALTERMAN, R. </author> <year> (1986). </year> <title> An adaptive planner. </title> <editor> In Kehler, T., Rosenschein, S., Filman, R., & Patel-Schneider, P. F., editors, </editor> <booktitle> Proceedings of the 5th National Conference on Artificial Intelligence (AAAI-86), </booktitle> <pages> pages 65-69, </pages> <address> Philadelphia, PA. </address> <publisher> Morgan Kaufman Publishers, Inc. </publisher>
Reference-contexts: Search-based substitution methods can be further specialized by considering the additional knowledge necessary for searching: query memory (Hinrichs & Kolodner, 1991) requires information on what to look for, in the form of a partial description of the item searched for. Local search, which can e.g. be found in PLEXUS <ref> (Alterman, 1986) </ref>, requires instructions on where to search for alternatives. Specialized search, which can e.g. be found in the SWALE system (Schank & Leake, 1989), requires instructions on how to find an alternative.
Reference: <author> BENJAMINS, V. R. </author> <year> (1993). </year> <title> Problem solving methods for diagnosis. </title> <type> Ph. D. Thesis, </type> <institution> University of Amsterdam. </institution>
Reference-contexts: We tried to use this framework to establish a task-method structure for problem solving behavior of different redesign systems and approaches, similar to the task-method structure for diagnosis presented in <ref> (Benjamins, 1993) </ref>. However, although the PSM architecture in (Benjamins et al., 1996) is rich, it does not adequately cover all (intermediate) types of design decisions we encountered.
Reference: <author> BENJAMINS, V. R., FENSEL, D., & STRAATMAN, R. </author> <year> (1996). </year> <title> Assumptions of problem-solving methods and their role in knowledge engineering. </title> <editor> In Wahlster, W., editor, </editor> <booktitle> Proceedings of the 12th European Conference on Artificial Intelligence (ECAI-96), </booktitle> <pages> pages 408-412, </pages> <address> Budapest, Hungary. </address> <publisher> John Wiley and Sons. </publisher>
Reference-contexts: The idea is that PSMs provide solutions to tasks by making assumptions about the precise definition of their functionality, and about the available domain knowledge. With this idea in mind, Fig. 1. The architecture of a PSM. <ref> (Benjamins et al., 1996) </ref> states that a PSM consists of three subparts (presented in figure 1): its functional specification. This is a declarative description of the input/output be havior of the PSM. its operational specification. This is an account of how to realize that behavior. <p> We tried to use this framework to establish a task-method structure for problem solving behavior of different redesign systems and approaches, similar to the task-method structure for diagnosis presented in (Benjamins, 1993). However, although the PSM architecture in <ref> (Benjamins et al., 1996) </ref> is rich, it does not adequately cover all (intermediate) types of design decisions we encountered.
Reference: <author> BERNARAS, A. </author> <year> (1994). </year> <title> Problem-oriented and task-oriented models of design in the COMMONKADS framework. </title> <editor> In Gero, J. S. & Sudweeks, F., editors, </editor> <booktitle> Artificial Intelligence in Design '94. </booktitle> <address> Dordrecht, the Netherlands, </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Requirement management as a separate task is based on the observation that in general a design problem is often initiated by a statement of needs and desires <ref> (Bernaras, 1994) </ref>. These, sometimes quite vague, needs and desires are to be interpreted and operationalized into a set of requirements suitable for automated assessment. This corresponds to the task of requirements engineering in software design (Wieringa, 1996). Figure 4 presents a partial task-method structure for the requirement management task.
Reference: <author> BRAZIER, F. M. T., TREUR, J., & WIJNGAARDS, N. J. E. </author> <year> (1996a). </year> <title> Interaction with experts: the role of a shared task model. </title> <editor> In Wahlster, W., editor, </editor> <booktitle> Proceedings of the 12th European Conference on Artificial Intelligence (ECAI-96), </booktitle> <pages> pages 241-245, </pages> <address> Budapest, Hungary. </address> <publisher> Wiley and Sons. </publisher>
Reference: <author> BRAZIER, F. M. T., VAN LANGEN, P. H. G., TREUR, J., & WIJNGAARDS, N. J. E. </author> <year> (1996b). </year> <title> Redesign and reuse in compositional knowledge-based systems. Knowledge Based Systems, Special Issue on Models and Techniques for Reuse of Designs, </title> <booktitle> 9(2) </booktitle> <pages> 105-119. </pages>
Reference-contexts: This collection was obtained in a bottom-up manner by examining the problem solving behavior of existing redesign systems and approaches, most notably those developed in the REVISE-project. Within this project the redesign of technical systems (Eldonk et al., 1996), simulation models (Pos et al., 1997), compositional architectures <ref> (Brazier et al., 1996b) </ref> and control knowledge in knowledge based systems (Straatman, 1995) is studied. The number of knowledge based decisions made during the design of a redesign system is large and diverse. <p> In our point of view, explicit management of requirements is essential in non-routine redesign: addition, retraction and modification of the original requirements often forms a major part of any non-routine redesign task. Examples of such non-routine redesign tasks can be found in systems for redesign of compositional architectures <ref> (Brazier et al., 1996b) </ref>, simulation models (Pos & Akkermans, 1996; Pos et al., 1997) and software specifications (Funk & Robertson, 1994). <p> In the near future, we plan to use this framework to describe other redesign systems, starting with the redesign systems which are at the moment being developed by the other participants in the REVISE-project. These systems focus on redesign of compositional architectures <ref> (Brazier et al., 1996b) </ref> and redesign of control knowledge in knowledge based systems (Straatman, 1995), respectively. Acknowledgments This paper has been significantly influenced by many discussions in the REVISE-project. We would like to thank all other REVISE participants for their input.
Reference: <author> BRAZIER, F. M. T., VAN LANGEN, P. H. G., TREUR, J., WIJNGAARDS, N. J. E., & WILLEMS, M. </author> <year> (1996c). </year> <title> Modelling an elevator design task in DESIRE: the VT example. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 46 </volume> <pages> 469-520. </pages>
Reference-contexts: This information can e.g. be represented the form of common forms (cliches) for different problems (Reubenstein & Waters, 1991; Pos et al., 1997), in the form of cases (Maher & Balacandran, 1994) or in the form of a predefined list of requirements to be specified <ref> (Brazier et al., 1996c) </ref>. A necessary ontological assumption for each of these PSMs is that knowledge on when a set of requirements is supposed to be complete is present in the domain knowledge.
Reference: <author> CHANDRASEKARAN, B. </author> <year> (1988). </year> <title> Generic tasks as building blocks for knowledge-based systems: the diagnosis and routine design examples. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 3 </volume> <pages> 183-210. </pages>
Reference-contexts: 1 Introduction The concept of reusable problem-solving methods (PSMs) is present in many current knowledge engineering frameworks, e.g. Generic Tasks <ref> (Chandrasekaran, 1988) </ref>, Com ? This work has been funded by NWO/SION within project 612-322-316, Evolutionary design in knowledge-based systems (the REVISE-project).
Reference: <author> CHANDRASEKARAN, B. </author> <year> (1990). </year> <title> Design problem solving: a task analysis. </title> <journal> AI Magazine, </journal> <volume> 11(4) </volume> <pages> 59-71. </pages>
Reference-contexts: The task of redesign in this context produces a new temporary design description which is (hopefully) closer to the specification than the former design description. This view is the basis for the Propose-Critique-Modify family of design methods discussed in <ref> (Chandrasekaran, 1990) </ref>. Secondly, redesign can be considered in the context of reuse. Here, redesign starts with a previously constructed design description, and a new set of requirements. The previously constructed design description must now be modified to fulfill the new set of requirements. <p> Section 3.2 discusses some examples of PSMs for the subtask of design modification. The main difference between the REVISE model and other models for (re)design, like Propose-Critique-Modify <ref> (Chandrasekaran, 1990) </ref>, lies in the inclusion of the task of requirement management in the redesign process. In our point of view, explicit management of requirements is essential in non-routine redesign: addition, retraction and modification of the original requirements often forms a major part of any non-routine redesign task. <p> In cases where the set of possible requirements is small and requirements are not apparently interacting, requirement management is usually not necessary. The PSM `semi-automated-requirements-management' decomposes the task of requirement management in three subtasks: propose-requirements, assess-requirements and repair-requirements. This decomposition corresponds to the family of methods Chan-drasekaran <ref> (Chandrasekaran, 1990) </ref> calls Propose-Critique-Modify. For the current example, we will focus on the assess-requirements subtask in requirement management.
Reference: <author> DAUBE, F. & HAYES-ROTH, B. </author> <year> (1989). </year> <title> A case-based mechanical redesign system. </title> <editor> In Shridharan, N. S., editor, </editor> <booktitle> Proceedings of the 11th International Joint Conference on Artificial Intelligence (IJCAI-89), </booktitle> <address> Detroit, Michigan. </address> <publisher> Morgan Kaufman Publishers, Inc. </publisher>
Reference-contexts: Transformation methods are used to transform an old solution into one that will (hopefully) work in the new situation. Generative methods re-enact (part of) the reasoning trace to modify the design description. FIRST <ref> (Daube & Hayes-Roth, 1989) </ref>, a case-based system for redesign of mechanical systems, and COBRA (Finn et al., 1992), a case-based system for redesign of heat-transfer models, provide examples of the latter approach. Both systems retrieve 'redesign plans' from a case-base and transfer these plans to the new problem at hand.
Reference: <author> ELDONK, S. J. M., ALBERTS, L., BAKKER, R., F.DIKKER, & WOGNUM, P. </author> <year> (1996). </year> <title> Redesign of technical systems. Knowledge-Based Systems, Special Issue on Models and Techniques for Reuse of Designs, </title> <booktitle> 9(2) </booktitle> <pages> 93-104. </pages>
Reference-contexts: This collection was obtained in a bottom-up manner by examining the problem solving behavior of existing redesign systems and approaches, most notably those developed in the REVISE-project. Within this project the redesign of technical systems <ref> (Eldonk et al., 1996) </ref>, simulation models (Pos et al., 1997), compositional architectures (Brazier et al., 1996b) and control knowledge in knowledge based systems (Straatman, 1995) is studied. The number of knowledge based decisions made during the design of a redesign system is large and diverse.
Reference: <author> FENSEL, D. </author> <year> (1997). </year> <title> The tower-of-adapters method for developing and reusing problem-solving methods. </title> <booktitle> In Proceedings of the European Knowledge Acquisition Workshop (EKAW-97). Springer-Verlag. Lecture Notes in Artificial Intelligence (LNAI). </booktitle>
Reference-contexts: In this early stage of KBS design, common sense descriptions of problem-solving methods and their underlying knowledge requirements (in terms of teleological and ontological assumptions made by each problem-solving method) will often be used in advance of any formal work. In a later stage, adapters as proposed in <ref> (Fensel, 1997) </ref>, could be used to implement and formalize the additional refinement relations proposed here in an informal context. An alternative approach to specifying and selecting PSMs is presented in (ten Teije et al., 1996).
Reference: <author> FINN, D. P., GRIMSON, J. B., & HARTY, N. M. </author> <year> (1992). </year> <title> An intelligent modelling assistant for preliminary analysis in design. </title> <editor> In Gero, J., editor, </editor> <booktitle> Artificial intelligence in Design (AID'92), </booktitle> <pages> pages 579-596. </pages> <address> Dordrecht, </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Transformation methods are used to transform an old solution into one that will (hopefully) work in the new situation. Generative methods re-enact (part of) the reasoning trace to modify the design description. FIRST (Daube & Hayes-Roth, 1989), a case-based system for redesign of mechanical systems, and COBRA <ref> (Finn et al., 1992) </ref>, a case-based system for redesign of heat-transfer models, provide examples of the latter approach. Both systems retrieve 'redesign plans' from a case-base and transfer these plans to the new problem at hand. Fig. 5. A partial task decomposition of the modify-design-description task.
Reference: <author> FISCHER, G., LEMKE, A. C., & RATHKE, C. </author> <year> (1987). </year> <title> From design to redesign. </title> <booktitle> In Proceedings of the 9th International Conference on Software Engineering, </booktitle> <pages> pages 369-376, </pages> <address> Washington, D.C. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: <author> FUNK, P. J. & ROBERTSON, D. </author> <year> (1994). </year> <title> Case-based support for the design of dynamic system requirements. </title> <booktitle> In Proceedings of the 2nd European Workshop on Advances in Case-Based Reasoning (EWCBR-94), </booktitle> <pages> pages 211-225, </pages> <address> Chantilly, France. </address>
Reference-contexts: Examples of such non-routine redesign tasks can be found in systems for redesign of compositional architectures (Brazier et al., 1996b), simulation models (Pos & Akkermans, 1996; Pos et al., 1997) and software specifications <ref> (Funk & Robertson, 1994) </ref>.
Reference: <author> GENNARI, J., TU, S., ROSENFLUH, T., & MUSEN, M. </author> <year> (1994). </year> <title> Mapping domains to methods in support of reuse. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 41 </volume> <pages> 399-424. </pages>
Reference-contexts: Participants in the REVISE-project are: the TWIST group at the University of Amsterdam, the AI department oAmsterdam and the STEVIN group at the University ponents of Expertise (Steels, 1990), Method-to-Task <ref> (Gennari et al., 1994) </ref>, role-limiting methods (McDermott, 1988), GTMD (O'Hara & Shadbolt, 1993) and COMMONKADS (Wielinga et al., 1993). The interest in PSMs originates from the need to describe and explicate generic aspects of the problem solving behavior of knowledge based systems.
Reference: <author> GOEL, A. K. </author> <year> (1991). </year> <title> A model-based approach to case adaptation. </title> <booktitle> In Proceedings of the 13th Annual Conference of the Cognitive Science Society (CogSci'91), </booktitle> <pages> pages 143-148, </pages> <address> Chicago, Illinois. </address>
Reference-contexts: The latter results in a form of redesign called derivational analogy (Mostow, 1989), while the former is the subject of more standard redesign approaches which directly modify the current design description (e.g. KRITIK <ref> (Goel, 1991) </ref> and 007 (Pos et al., 1997)). The requirements put on the design description provide a second source of variation in redesign. Again, there are several dimensions along which the requirements can be classified. The first of these is the operationality of requirements. <p> Systems like KRITIK <ref> (Goel, 1991) </ref> and 007 (Pos et al., 1997) fall somewhere in between: the repair plans used in these systems are general enough to be applied to many different problems, but not as generic as general strategies like 'divide and conquer'.
Reference: <author> HINRICHS, T. & KOLODNER, J. </author> <year> (1991). </year> <title> The roles of adaptation in case-based design. </title> <editor> In Dean, T. & McKeown, K., editors, </editor> <booktitle> Proceedings of the 9th National Conference on Artificial Intelligence (AAAI-91), </booktitle> <pages> pages 28-33. </pages> <publisher> AAAI Press / The MIT Press. </publisher>
Reference-contexts: Search-based substitution methods can be further specialized by considering the additional knowledge necessary for searching: query memory <ref> (Hinrichs & Kolodner, 1991) </ref> requires information on what to look for, in the form of a partial description of the item searched for. Local search, which can e.g. be found in PLEXUS (Alterman, 1986), requires instructions on where to search for alternatives. <p> Transformation methods can be further specialized by considering the general or specific nature of the modification knowledge used for transformation: generic strategies like 'divide-and-conquer', which can e.g. be found in JULIA <ref> (Hinrichs & Kolodner, 1991) </ref>, form one end of this spectrum, while application-specific heuristics, which can e.g. be found in the VT-system for elevator design (Marcus et al., 1987), form the other end of the spectrum.
Reference: <author> KOLODNER, J. </author> <year> (1993). </year> <title> Case-Based Reasoning. </title> <publisher> Morgan Kaufman Publishers, Inc. </publisher>
Reference-contexts: The task decomposition depicted in Figure 5 covers the same set of methods as the classification of adaptation methods and strategies in case-based reasoning presented in <ref> (Kolodner, 1993) </ref>.
Reference: <author> MAHER, M. & BALACANDRAN, B. </author> <year> (1994). </year> <title> Flexible retrieval strategies for case-based design. </title> <editor> In Gero, J. & Sudweeks, F., editors, </editor> <booktitle> Artificial Intelligence in Design '94. </booktitle> <address> Dordrecht, </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: This information can e.g. be represented the form of common forms (cliches) for different problems (Reubenstein & Waters, 1991; Pos et al., 1997), in the form of cases <ref> (Maher & Balacandran, 1994) </ref> or in the form of a predefined list of requirements to be specified (Brazier et al., 1996c). A necessary ontological assumption for each of these PSMs is that knowledge on when a set of requirements is supposed to be complete is present in the domain knowledge.
Reference: <author> MAHER, M. L., BALACHANDRAN, M. B., & ZHANG, D. M. </author> <year> (1995). </year> <title> Case-based reasoning in design. </title> <address> Hove, UK, </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: This task has as input (a part of) the design description and delivers as output a modified version of this part that is hopefully more suitable in the new situation. Three general families of problem-solving methods for this task are substitution, transformation and generation <ref> (Maher et al., 1995) </ref>. Substitution methods substitute a part of the old design description with a new part more suitable for the new situation. Transformation methods are used to transform an old solution into one that will (hopefully) work in the new situation.
Reference: <author> MARCUS, S., STOUT, J., & MCDERMOTT, J. </author> <year> (1987). </year> <title> VT: an expert elevator designer that uses knowledge-based backtracking. </title> <journal> AI Magazine, </journal> <volume> 8(4) </volume> <pages> 39-58. </pages>
Reference-contexts: specialized by considering the general or specific nature of the modification knowledge used for transformation: generic strategies like 'divide-and-conquer', which can e.g. be found in JULIA (Hinrichs & Kolodner, 1991), form one end of this spectrum, while application-specific heuristics, which can e.g. be found in the VT-system for elevator design <ref> (Marcus et al., 1987) </ref>, form the other end of the spectrum.
Reference: <author> MCDERMOTT, J. </author> <year> (1988). </year> <title> Preliminary steps toward a taxonomy of problem-solving methods. </title> <editor> In Marcus, S., editor, </editor> <booktitle> Automating Knowledge Acquisition for Expert Systems, </booktitle> <pages> pages 225-255. </pages> <address> Boston, </address> <publisher> Kluwer. </publisher>
Reference-contexts: Participants in the REVISE-project are: the TWIST group at the University of Amsterdam, the AI department oAmsterdam and the STEVIN group at the University ponents of Expertise (Steels, 1990), Method-to-Task (Gennari et al., 1994), role-limiting methods <ref> (McDermott, 1988) </ref>, GTMD (O'Hara & Shadbolt, 1993) and COMMONKADS (Wielinga et al., 1993). The interest in PSMs originates from the need to describe and explicate generic aspects of the problem solving behavior of knowledge based systems.
Reference: <author> MOSTOW, J. </author> <year> (1989). </year> <title> Design by derivational analogy: Issues in the automated replay of design plans. </title> <journal> Artificial Intelligence, </journal> <volume> 40 </volume> <pages> 119-184. </pages>
Reference-contexts: At one end of this spectrum the design description can purely describe the current status of the design, while at the other end the design description includes a complete plan of design steps resulting in the current design. The latter results in a form of redesign called derivational analogy <ref> (Mostow, 1989) </ref>, while the former is the subject of more standard redesign approaches which directly modify the current design description (e.g. KRITIK (Goel, 1991) and 007 (Pos et al., 1997)). The requirements put on the design description provide a second source of variation in redesign.
Reference: <author> O'HARA, K. & SHADBOLT, N. </author> <year> (1993). </year> <title> Locating generic tasks. </title> <journal> Knowledge Acquisition, </journal> <volume> 5 </volume> <pages> 449-481. </pages>
Reference: <author> POS, A. & AKKERMANS, J. M. </author> <year> (1996). </year> <title> 007: A system for automated model revision. </title> <editor> In Javar, A., Lehmann, A., & Molnar, I., editors, </editor> <booktitle> Proceedings of the 10th European Simulation Multiconference (ESM'96), </booktitle> <pages> pages 50-54, </pages> <address> Budapest, Hungary. </address> <publisher> SCS. </publisher>
Reference: <author> POS, A., AKKERMANS, J. M., & TOP, J. L. </author> <year> (1997). </year> <title> Automated model revision. </title> <journal> IEEE Expert. </journal> <note> In Press. </note>
Reference-contexts: This collection was obtained in a bottom-up manner by examining the problem solving behavior of existing redesign systems and approaches, most notably those developed in the REVISE-project. Within this project the redesign of technical systems (Eldonk et al., 1996), simulation models <ref> (Pos et al., 1997) </ref>, compositional architectures (Brazier et al., 1996b) and control knowledge in knowledge based systems (Straatman, 1995) is studied. The number of knowledge based decisions made during the design of a redesign system is large and diverse. <p> The latter results in a form of redesign called derivational analogy (Mostow, 1989), while the former is the subject of more standard redesign approaches which directly modify the current design description (e.g. KRITIK (Goel, 1991) and 007 <ref> (Pos et al., 1997) </ref>). The requirements put on the design description provide a second source of variation in redesign. Again, there are several dimensions along which the requirements can be classified. The first of these is the operationality of requirements. <p> Systems like KRITIK (Goel, 1991) and 007 <ref> (Pos et al., 1997) </ref> fall somewhere in between: the repair plans used in these systems are general enough to be applied to many different problems, but not as generic as general strategies like 'divide and conquer'. <p> The extended PSM framework described in this paper has been used to describe rel-evant choices in selecting problem-solving methods for a specific redesign system in the domain of computational engineering models, called 007 <ref> (Pos et al., 1997) </ref>. In the near future, we plan to use this framework to describe other redesign systems, starting with the redesign systems which are at the moment being developed by the other participants in the REVISE-project.
Reference: <author> REUBENSTEIN, H. B. & WATERS, R. C. </author> <year> (1991). </year> <title> The requirements apprentice: Automated assistance for requirements acquisition. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 226-240. </pages>
Reference: <author> SCHANK, R. C. & LEAKE, D. B. </author> <year> (1989). </year> <title> Creativity and learning in a case-based explainer. </title> <journal> Artificial Intelligence, </journal> <volume> 40 </volume> <pages> 353-385. </pages>
Reference-contexts: Local search, which can e.g. be found in PLEXUS (Alterman, 1986), requires instructions on where to search for alternatives. Specialized search, which can e.g. be found in the SWALE system <ref> (Schank & Leake, 1989) </ref>, requires instructions on how to find an alternative. Case based substitution, which can e.g. be found in the JULIA system (Hin-richs & Kolodner, 1991), requires instructions on how to find a similar case which might suggest an appropriate alternative.
Reference: <author> SMYTH, B. & KEANE, M. T. </author> <year> (1996). </year> <title> Using adaptation knowledge to retrieve and adapt design cases. Knowledge-based Systems, Special Issue on Models and Techniques for Reuse of Designs, </title> <booktitle> 9(2) </booktitle> <pages> 127-136. </pages>
Reference: <author> STEELS, L. </author> <year> (1990). </year> <title> Components of expertise. </title> <journal> AI Magazine, </journal> <volume> 11 </volume> (2):28-49. 
Reference-contexts: Participants in the REVISE-project are: the TWIST group at the University of Amsterdam, the AI department oAmsterdam and the STEVIN group at the University ponents of Expertise <ref> (Steels, 1990) </ref>, Method-to-Task (Gennari et al., 1994), role-limiting methods (McDermott, 1988), GTMD (O'Hara & Shadbolt, 1993) and COMMONKADS (Wielinga et al., 1993). The interest in PSMs originates from the need to describe and explicate generic aspects of the problem solving behavior of knowledge based systems.
Reference: <author> STRAATMAN, R. </author> <year> (1995). </year> <title> Learning control knowledge in models of expertise. </title> <editor> In Fensel, D., editor, </editor> <booktitle> Proceedings of the ECML-95 Workshop on Knowledge Level Modeling and Machnine Learning, pages I.2.1-I.2.13, </booktitle> <address> Heraklion, Greece. </address>
Reference-contexts: Within this project the redesign of technical systems (Eldonk et al., 1996), simulation models (Pos et al., 1997), compositional architectures (Brazier et al., 1996b) and control knowledge in knowledge based systems <ref> (Straatman, 1995) </ref> is studied. The number of knowledge based decisions made during the design of a redesign system is large and diverse. In order to describe all relevant choices and decisions in a task-method structure, we need to extend the current notion of possible relations between tasks and methods. <p> These systems focus on redesign of compositional architectures (Brazier et al., 1996b) and redesign of control knowledge in knowledge based systems <ref> (Straatman, 1995) </ref>, respectively. Acknowledgments This paper has been significantly influenced by many discussions in the REVISE-project. We would like to thank all other REVISE participants for their input. We would also like to thank Tim Menzies for his extensive comments on this paper.
Reference: <author> TEN TEIJE, A., VAN HARMELEN, F., SCHREIBER, A. T., & WIELINGA, B. J. </author> <year> (1996). </year> <title> Construction of problem-solving methods as parametric design. </title> <editor> In Gaines, B. R. & Musen, M. A., editors, </editor> <booktitle> Proceedings of the 10th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, </booktitle> <volume> volume 1, </volume> <pages> pages 12.1-12.21, </pages> <institution> Alberta, Canada. SRDG Publications, University of Calgary. track: Shareable and reusable problem-solving methods. </institution>
Reference-contexts: In a later stage, adapters as proposed in (Fensel, 1997), could be used to implement and formalize the additional refinement relations proposed here in an informal context. An alternative approach to specifying and selecting PSMs is presented in <ref> (ten Teije et al., 1996) </ref>. Here, a family of PSMs for diagnosis tasks is represented by a skeletal functional description, with a number of subfunctions. Values for these are chosen from a fixed set to obtain a specific diagnostic function.
Reference: <author> WIELINGA, B. J. & SCHREIBER, A. T. </author> <year> (1997). </year> <title> Configuration-design problem solving. </title> <publisher> IEEE Expert (in press). </publisher>
Reference: <author> WIELINGA, B. J., VELDE, W. V. D., SCHREIBER, A. T., & AKKERMANS, J. M. </author> <year> (1993). </year> <title> Towards a unification of knowledge modeling approaches. </title> <editor> In David, J. M., Krivine, J. P., & Simmons, R., editors, </editor> <booktitle> Second-generation expert systems, chapter 14, </booktitle> <pages> pages 299-335. </pages> <address> Berlin, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Participants in the REVISE-project are: the TWIST group at the University of Amsterdam, the AI department oAmsterdam and the STEVIN group at the University ponents of Expertise (Steels, 1990), Method-to-Task (Gennari et al., 1994), role-limiting methods (McDermott, 1988), GTMD (O'Hara & Shadbolt, 1993) and COMMONKADS <ref> (Wielinga et al., 1993) </ref>. The interest in PSMs originates from the need to describe and explicate generic aspects of the problem solving behavior of knowledge based systems.
Reference: <author> WIERINGA, R. J. </author> <year> (1996). </year> <title> Requirements Engineering: Frameworks for Understanding. </title> <address> Chicester, England, </address> <publisher> John Wiley and Sons. </publisher>
Reference-contexts: These, sometimes quite vague, needs and desires are to be interpreted and operationalized into a set of requirements suitable for automated assessment. This corresponds to the task of requirements engineering in software design <ref> (Wieringa, 1996) </ref>. Figure 4 presents a partial task-method structure for the requirement management task. We identified two methods for this task: ask-user-operational-requirements or semi-automated-requirement-management. In many redesign systems, the task of requirements specification is put completely in the hands of the user, and no automated support is provided. <p> The task of requirement management has not often been modeled in other (re)design models, but is in our view essential in non-routine (re)design. Requirement management in design corresponds to the task of requirements engineering in software design <ref> (Wieringa, 1996) </ref>. Each of these redesign subtasks can be achieved by one or more (families of) PSMs. In this paper we selected two subtasks, requirement management and artifact modification, and described task-structures for these subtasks in somewhat more detail. For the other redesign subtasks similar task-structures have been developed.
References-found: 37

