URL: http://theory.stanford.edu/~dabo/papers/sharing.ps.gz
Refering-URL: http://theory.stanford.edu/~dabo/publications.html
Root-URL: 
Email: dabo@bellcore.com franklin@research.att.com  
Title: Efficient Generation of Shared RSA keys (Extended Abstract)  
Author: Dan Boneh Matthew Franklin 
Keyword: RSA, Threshold Cryptography, Primality testing, Multiparty computation.  
Abstract: We describe efficient techniques for three (or more) parties to jointly generate an RSA key. At the end of the protocol an RSA modulus N = pq is publicly known. None of the parties know the factorization of N . In addition a public encryption exponent is publicly known and each party holds a share of the private exponent that enables threshold decryption. Our protocols are efficient in computation and communication.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon, Z. Galil and M. Yung, </author> <title> "Dynamic-resharing verifiable secret sharing," ESA 1995. </title>
Reference-contexts: When t is small t-out-of-k sharing can be achieved through t-out-of-t sharing. Naively this can by done by giving each of the k coalitions a t-out-of-t sharing of the secret. Other techniques <ref> [1] </ref> can reduce t-out-of-k sharing to t-out-of-t sharing using fewer instances 4 . However, it is essential for these reductions that the instances of t-out-of-t sharing be independent. <p> Then d = d s;i s + d s;j s enabling the two parties to reconstruct the secret. Hence, we achieved 2-out-of-k sharing using only log k independent 2-out-of-2 sharings (as opposed to k required by the naive solution). This generalizes to larger values of t as well <ref> [1] </ref>. 11 at least as secure as the scheme where every share is a random elements in [B; B] and i publishes the difference between the secret and the sum of all the shares. <p> This generalizes to larger values of t as well [1]. 11 at least as secure as the scheme where every share is a random elements in [B; B] and i publishes the difference between the secret and the sum of all the shares. When s 2 <ref> [1; b] </ref> the following lemma establishes that this scheme is sufficiently private when B &gt; tb 2+* for any fixed * &gt; 0. Lemma 7.1 Let s 2 [1 : : : b], and let p x = prob (s = x) = 1 b for all x 2 [1; b]. <p> 2 <ref> [1; b] </ref> the following lemma establishes that this scheme is sufficiently private when B &gt; tb 2+* for any fixed * &gt; 0. Lemma 7.1 Let s 2 [1 : : : b], and let p x = prob (s = x) = 1 b for all x 2 [1; b]. Let (s 1 ; : : : ; s t ) 2 R P t i=1 s i s. For any coalition C [1; t], let p x;C = prob (s = xjffi; fs i g i2C ). <p> Let (s 1 ; : : : ; s t ) 2 R P t i=1 s i s. For any coalition C <ref> [1; t] </ref>, let p x;C = prob (s = xjffi; fs i g i2C ). Then, for every coalition C and every * &gt; 0, the distributions fp x g x and fp x;C g x are statistically indistinguishable when B &gt; tb 2+* . <p> Proof It suffices to consider coalitions of size t 1. Consider the coalition C of all parties other than party 1. The main observation is that if s 1 2 [B + b; B 1] then p x = p x;C = 1=b for all x 2 <ref> [1; b] </ref>. In other words, given s 2 ; : : : ; s t ; ffi all possibilities for s = x are equally likely. This follows since when s 1 2 [B + b; B 1] then for every s 0 2 [1; b] there exists a unique s <p> = 1=b for all x 2 <ref> [1; b] </ref>. In other words, given s 2 ; : : : ; s t ; ffi all possibilities for s = x are equally likely. This follows since when s 1 2 [B + b; B 1] then for every s 0 2 [1; b] there exists a unique s 0 1 2 [B; B] such that ffi = i6=1 s i + s 0 1 s.
Reference: [2] <author> D. Beaver, </author> <title> "Security, fault tolerance, and communication complexity in distributed systems," </title> <type> Ph.D. thesis, </type> <institution> Harvard University, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: The idea is essentially the same as for the distributed computation of N in the preceding paragraph. For k &gt; 3, trial division can be done dk=2e 1 privately, but a different protocol must be used. We adapt an idea due to Beaver <ref> [2] </ref>. Let q = q 1 + : : : + q k be an integer shared among the k parties. Let p be a small prime.
Reference: [3] <author> M. Ben-Or, S. Goldwasser, A. Wigderson, </author> <title> "Completeness theorems for non-cryptographic fault tolerant distributed computation", </title> <booktitle> STOC 1988, </booktitle> <pages> pp. 1-10. </pages>
Reference-contexts: Our results eliminate the need for a trusted dealer since the k parties can generate N and the private shares themselves. Such results were previously known for the ElGamal public key system [22], but not for RSA. We note that generic secure circuit evaluation techniques, e.g. <ref> [26, 17, 3, 7] </ref> can also be used to generate shared RSA keys. After all, a primality test can be represented as a boolean circuit. However, such general techniques are usually too inefficient. 1 Our protocols are useful even when only two parties are involved. <p> Henry has no information about either p i nor q i (for i = a; b) and the same should hold at the end of the protocol. Clearly, Henry learns N (since N is public) but he learns nothing more. BenOr, Goldwasser and Wigderson <ref> [3] </ref> (and similarly Chaum, Crepeau and Damg-ard [7]) describe a protocol for private evaluation of general functions for three or more parties. Their full technique is an overkill for the simple function we have in mind.
Reference: [4] <author> J. Benaloh (Cohen), </author> <title> "Secret sharing homomorphisms: keeping shares of a secret secret," </title> <booktitle> Crypto '86, </booktitle> <pages> 251-260. </pages>
Reference-contexts: We give details for the small public exponent case from Section 6.1. The k parties first compute (N ) mod 3. Since this is a simple sum, it can be done k-privately and efficiently as shown by Benaloh <ref> [4] </ref>. If (N ) mod 3 = 1, then party 1 computes d 1 = b 2N2p 1 2q 1 3 c + 1 while each party i computes d i = b 2p i 2q i 3 c, 2 i k.
Reference: [5] <editor> B. Blakley and G. Blakley, </editor> <title> "Security of number theoretic public key cryptosystems against random attack," </title> <journal> Cryptologia, </journal> <volume> Part I (Vol. 2, No. 4, </volume> <month> Oct </month> <year> 1978), </year> <booktitle> Part II (Vol. </booktitle> <volume> 3, No. 1, </volume> <month> Jan </month> <year> 1979), </year> <booktitle> Part III (Vol. </booktitle> <volume> 3, No. 2, </volume> <month> Apr </month> <year> 1979). </year>
Reference-contexts: It would be useful to be able to generate moduli of some special form. For example, a modulus which is a product of "safe primes" (i.e., where both p1 2 and q1 2 are prime) has been considered for security purposes <ref> [5] </ref> as well as for technical reasons related to threshold cryptography [11, 18]. Throughout the paper we use a model in which parties honestly follow the protocol. The case of active adversaries that cheat during the protocol is of great interest as well.
Reference: [6] <author> J. Carter and M. Wegman, </author> <title> "Universal classes of hash functions", </title> <institution> J. Comput. Syst. Sci. </institution> <month> 18 </month> <year> (1979), </year> <pages> 143-154. </pages>
Reference-contexts: A number of simple protocols have been proposed for privately evaluating the equality predicate [16], including one with a third helper party, based on universal classes of hash functions <ref> [6, 25] </ref> (attributed to Noga Alon in [16]). Using this equality test, the trial division protocol is as follows: Alice Pick random c i 2 ZZ p i and d i 2 ZZ fl p .
Reference: [7] <author> D. Chaum, C. Crepeau, and I. Damg-ard, </author> <title> "Multiparty unconditionally secure protocols," </title> <booktitle> ACM STOC 1988, </booktitle> <pages> 11-19. </pages>
Reference-contexts: Our results eliminate the need for a trusted dealer since the k parties can generate N and the private shares themselves. Such results were previously known for the ElGamal public key system [22], but not for RSA. We note that generic secure circuit evaluation techniques, e.g. <ref> [26, 17, 3, 7] </ref> can also be used to generate shared RSA keys. After all, a primality test can be represented as a boolean circuit. However, such general techniques are usually too inefficient. 1 Our protocols are useful even when only two parties are involved. <p> Clearly, Henry learns N (since N is public) but he learns nothing more. BenOr, Goldwasser and Wigderson [3] (and similarly Chaum, Crepeau and Damg-ard <ref> [7] </ref>) describe a protocol for private evaluation of general functions for three or more parties. Their full technique is an overkill for the simple function we have in mind.
Reference: [8] <author> N. De Bruijn, </author> <title> "On the number of uncanceled elements in the sieve of Eratosthenes", </title> <journal> Proc. Neder. Akad. Wetensch, </journal> <volume> vol. 53, </volume> <year> 1950, </year> <pages> pp. 803-812. </pages> <note> Reviewed in LeVeque Reviews in Number Theory, Vol. 4, Section N-28, p. 221. </note>
Reference-contexts: Suppose a random n-bit number p passes the trial division test where all primes less than B are tested. We take B = c n for some constant c. How likely is p to be prime? Using a classic result due to Mertens, DeBruijn <ref> [8] </ref> shows that asymptotically Pr [p prime j trial division up to B] = e fl ln B ln 2 n + o (1=n) = 2:57 n Hence, when n = 512 bits and ln B = 9 (i.e.
Reference: [9] <author> A. DeSantis, Y. Desmedt, Y. Frankel, M. Yung, </author> <title> "How to share a function securely", </title> <booktitle> STOC 1994, </booktitle> <pages> pp. 522-533. </pages>
Reference-contexts: A threshold RSA signature scheme involves k parties and enables any subset of t of them to generate an RSA signature of a given message. No subset of t 1 parties can generate a signature. A complete solution to this problem was given in <ref> [9] </ref>. Unfortunately, the modulus N and the shares of the private key were assumed to be generated by a dealer. The dealer, or anyone who compromises the dealer, can forge signatures. <p> Thus, we are left with the problem of generating the d i;j given d i . Secret sharing modulo (N ) is not easy. An elegant solution was given in <ref> [9] </ref> where the authors show how a trusted dealer (who knows the factorization of N ) can generate shares d i;j as required. <p> That is, the parties can engage in a multi-party protocol to compute the same shares d i;j that were generated by the dealer in <ref> [9] </ref>. Unfortunately, this requires multiple invocations of the BGW protocol described in Section 4. Since we are mainly concerned with efficient solutions we describe an alternate approach which works well when the threshold t is small. When t is small t-out-of-k sharing can be achieved through t-out-of-t sharing.
Reference: [10] <author> Y. Desmedt, </author> <title> "Threshold cryptography," </title> <journal> European Transactions on Telecommunications and Related Technologies, </journal> <volume> Vol. 5, No. 4, </volume> <month> July-August </month> <year> 1994, </year> <pages> pp. 35-43. </pages>
Reference-contexts: Our results eliminate the need for a trusted dealer since the parties can generate the modulus N themselves. Threshold cryptography is a concrete example where shared generation of RSA keys is very useful. We give a brief motivating discussion and refer to <ref> [10] </ref> for a survey. A threshold RSA signature scheme involves k parties and enables any subset of t of them to generate an RSA signature of a given message. No subset of t 1 parties can generate a signature. A complete solution to this problem was given in [9].
Reference: [11] <author> Y. Desmedt and Y. Frankel, </author> <title> "Shared generation of authenticators and signatures", </title> <booktitle> Crypto '91, </booktitle> <pages> 457-469. </pages>
Reference-contexts: For example, a modulus which is a product of "safe primes" (i.e., where both p1 2 and q1 2 are prime) has been considered for security purposes [5] as well as for technical reasons related to threshold cryptography <ref> [11, 18] </ref>. Throughout the paper we use a model in which parties honestly follow the protocol. The case of active adversaries that cheat during the protocol is of great interest as well.
Reference: [12] <author> U. Feige, A. Fiat, and A. Shamir, </author> <title> "Zero-knowledge proofs of identity," </title> <journal> Journal of Cryptology 1 (1988), </journal> <pages> 77-94. </pages>
Reference-contexts: The test enables two (or more) parties to test that a random integer N is a product of two large primes without revealing the primes themselves. A number of cryptographic protocols require an RSA modulus N for which none of the participants know the factorization. For examples see <ref> [12, 13, 15, 19, 20, 21] </ref>. Usually this is done by asking a dealer to generate N . Consequently, the dealer must be trusted not to reveal the factorization of N . Our results eliminate the need for a trusted dealer since the parties can generate the modulus N themselves.
Reference: [13] <author> A. Fiat and A. Shamir, </author> <title> "How to prove yourself: Practical solutions to identification and signature problems," </title> <booktitle> Crypto '86, </booktitle> <pages> 186-194. </pages>
Reference-contexts: The test enables two (or more) parties to test that a random integer N is a product of two large primes without revealing the primes themselves. A number of cryptographic protocols require an RSA modulus N for which none of the participants know the factorization. For examples see <ref> [12, 13, 15, 19, 20, 21] </ref>. Usually this is done by asking a dealer to generate N . Consequently, the dealer must be trusted not to reveal the factorization of N . Our results eliminate the need for a trusted dealer since the parties can generate the modulus N themselves.
Reference: [14] <author> Y. Frankel, </author> <title> "A practical protocol for large group oriented networks", </title> <booktitle> Eurocrypt 89, </booktitle> <pages> pp. 56-61. </pages>
Reference-contexts: If (N ) mod 3 = 2, then d a = b Np a q a +2 3 c and 3 e. Either way d = d a + d b mod (N ). This enables threshold decryption as described in <ref> [14] </ref>, i.e., c d c d a c d b mod N . 6.2 Arbitrary public exponent Unlike the previous technique, our second method for generating shares of d works for arbitrary public exponent e and leaks no information. However, it requires the help of Henry.
Reference: [15] <author> M. Franklin and S. Haber, </author> <title> "Joint encryption and message-efficient secure computation," </title> <journal> Journal of Cryptology, </journal> <volume> 9 (1996), </volume> <pages> 217-232. </pages>
Reference-contexts: The test enables two (or more) parties to test that a random integer N is a product of two large primes without revealing the primes themselves. A number of cryptographic protocols require an RSA modulus N for which none of the participants know the factorization. For examples see <ref> [12, 13, 15, 19, 20, 21] </ref>. Usually this is done by asking a dealer to generate N . Consequently, the dealer must be trusted not to reveal the factorization of N . Our results eliminate the need for a trusted dealer since the parties can generate the modulus N themselves.
Reference: [16] <author> R. Fagin, M. Naor, P. Winkler, </author> <title> "Comparing information without leaking it", </title> <journal> CACM, </journal> <volume> Vol 39, No. 5, </volume> <month> May </month> <year> 1996, </year> <pages> pp. 77-85. </pages>
Reference-contexts: This is equivalent to testing that q a mod p i 6= q b mod p i for all i, 1 i j. A number of simple protocols have been proposed for privately evaluating the equality predicate <ref> [16] </ref>, including one with a third helper party, based on universal classes of hash functions [6, 25] (attributed to Noga Alon in [16]). <p> A number of simple protocols have been proposed for privately evaluating the equality predicate <ref> [16] </ref>, including one with a third helper party, based on universal classes of hash functions [6, 25] (attributed to Noga Alon in [16]). Using this equality test, the trial division protocol is as follows: Alice Pick random c i 2 ZZ p i and d i 2 ZZ fl p . Compute u i = c i + d i q a mod p i , for all i, 1 i j.
Reference: [17] <author> O. Goldreich, S. Micali, A. Wigderson, </author> <title> "How to play any mental game", </title> <booktitle> STOC 1987, </booktitle> <pages> pp. 218-229. </pages> <note> [18] , R. </note> <author> Gennaro, S. Jarecki, H. Krawczyk, T. Rabin, </author> <title> "Robust and efficient sharing of RSA functions", </title> <booktitle> Crypto 96, </booktitle> <pages> pp. 157-172. </pages>
Reference-contexts: Our results eliminate the need for a trusted dealer since the k parties can generate N and the private shares themselves. Such results were previously known for the ElGamal public key system [22], but not for RSA. We note that generic secure circuit evaluation techniques, e.g. <ref> [26, 17, 3, 7] </ref> can also be used to generate shared RSA keys. After all, a primality test can be represented as a boolean circuit. However, such general techniques are usually too inefficient. 1 Our protocols are useful even when only two parties are involved.
Reference: [19] <author> L. Guillou and J. Quisquater, </author> <title> "A practical zero-knowledge protocol fitted to security microprocessor minimizing both transmission and memory," </title> <booktitle> Eurocrypt '88, </booktitle> <pages> 123-128. </pages>
Reference-contexts: The test enables two (or more) parties to test that a random integer N is a product of two large primes without revealing the primes themselves. A number of cryptographic protocols require an RSA modulus N for which none of the participants know the factorization. For examples see <ref> [12, 13, 15, 19, 20, 21] </ref>. Usually this is done by asking a dealer to generate N . Consequently, the dealer must be trusted not to reveal the factorization of N . Our results eliminate the need for a trusted dealer since the parties can generate the modulus N themselves.
Reference: [20] <author> K. Ohta and T. Okamoto, </author> <title> "A modification of the Fiat-Shamir scheme," </title> <booktitle> Crpto '88, </booktitle> <pages> 232-243. </pages>
Reference-contexts: The test enables two (or more) parties to test that a random integer N is a product of two large primes without revealing the primes themselves. A number of cryptographic protocols require an RSA modulus N for which none of the participants know the factorization. For examples see <ref> [12, 13, 15, 19, 20, 21] </ref>. Usually this is done by asking a dealer to generate N . Consequently, the dealer must be trusted not to reveal the factorization of N . Our results eliminate the need for a trusted dealer since the parties can generate the modulus N themselves.
Reference: [21] <author> H. Ong and C. Schnorr, </author> <title> "Fast signature generation with a Fiat Shamir-like scheme," </title> <booktitle> Eurocrypt '90, </booktitle> <pages> 432-440. </pages>
Reference-contexts: The test enables two (or more) parties to test that a random integer N is a product of two large primes without revealing the primes themselves. A number of cryptographic protocols require an RSA modulus N for which none of the participants know the factorization. For examples see <ref> [12, 13, 15, 19, 20, 21] </ref>. Usually this is done by asking a dealer to generate N . Consequently, the dealer must be trusted not to reveal the factorization of N . Our results eliminate the need for a trusted dealer since the parties can generate the modulus N themselves.
Reference: [22] <author> T. Pederson, </author> <title> "A threshold cryptosystem without a trusted party," </title> <booktitle> Proceedings of Eurocrypt 91, </booktitle> <pages> pp. 522-526. </pages>
Reference-contexts: The dealer, or anyone who compromises the dealer, can forge signatures. Our results eliminate the need for a trusted dealer since the k parties can generate N and the private shares themselves. Such results were previously known for the ElGamal public key system <ref> [22] </ref>, but not for RSA. We note that generic secure circuit evaluation techniques, e.g. [26, 17, 3, 7] can also be used to generate shared RSA keys. After all, a primality test can be represented as a boolean circuit.
Reference: [23] <author> M. Rabin, </author> <title> "Probabilistic algorithm for testing primality", </title> <journal> J. of Number Theory, </journal> <volume> vol. 12, </volume> <pages> pp. 128-138, </pages> <year> 1980. </year>
Reference-contexts: Both parties know N , where N = (p a + p b )(q a + q b ). They wish to determine if N is the product of two primes. The primality test is a mix of the Solovay-Strassen [24] and the Rabin-Miller <ref> [23] </ref> primality tests. We assume that the secret values chosen by the parties satisfy p a = q a = 3 mod 4 and p b = q b = 0 mod 4.
Reference: [24] <author> R. Solovay, V. Strassen, </author> <title> "A fast monte carlo test for primality", </title> <journal> SIAM journal of computing, </journal> <volume> vol. 6, </volume> <pages> pp. 84-85, </pages> <year> 1977. </year>
Reference-contexts: Both parties know N , where N = (p a + p b )(q a + q b ). They wish to determine if N is the product of two primes. The primality test is a mix of the Solovay-Strassen <ref> [24] </ref> and the Rabin-Miller [23] primality tests. We assume that the secret values chosen by the parties satisfy p a = q a = 3 mod 4 and p b = q b = 0 mod 4.
Reference: [25] <author> M. Wegman and J. Carter, </author> <title> "New hash functions and their use in authentication and set equality", </title> <institution> J. Comput. Syst. Sci. </institution> <month> 22 </month> <year> (1981), </year> <pages> 265-279. </pages>
Reference-contexts: A number of simple protocols have been proposed for privately evaluating the equality predicate [16], including one with a third helper party, based on universal classes of hash functions <ref> [6, 25] </ref> (attributed to Noga Alon in [16]). Using this equality test, the trial division protocol is as follows: Alice Pick random c i 2 ZZ p i and d i 2 ZZ fl p .
Reference: [26] <author> A. Yao, </author> <title> "How to generate and exchange secrets", </title> <booktitle> FOCS 1986, </booktitle> <pages> pp. 162-167. 14 </pages>
Reference-contexts: Our results eliminate the need for a trusted dealer since the k parties can generate N and the private shares themselves. Such results were previously known for the ElGamal public key system [22], but not for RSA. We note that generic secure circuit evaluation techniques, e.g. <ref> [26, 17, 3, 7] </ref> can also be used to generate shared RSA keys. After all, a primality test can be represented as a boolean circuit. However, such general techniques are usually too inefficient. 1 Our protocols are useful even when only two parties are involved. <p> Therefore, it is of some interest to develop efficient two party protocols for this specific function which do not make use of a third party. General two party computation protocols (e.g. <ref> [26] </ref>) are too inefficient. Our protocols generate an RSA modulus which is the product of two large random primes. It would be useful to be able to generate moduli of some special form.
References-found: 25

