URL: http://www.eecs.umich.edu/VERIFY/PSFS/vts95.ps
Refering-URL: http://www.eecs.umich.edu/VERIFY/main.html
Root-URL: http://www.eecs.umich.edu
Title: VLSI Test  High-Level Test Generation using Physically-Induced Faults  
Author: Mark C. Hansen* and John P. Hayes** M.C. Hansen 
Address: Ann Arbor, MI 48109  
Affiliation: Advanced Computer Architecture Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Date: May 1995 1  
Note: Symposium Paper, Hansen Hayes,  was supported by a fellowship from Delco Electronics Corporation. J. P. Hayes was supported by the National Science Foundation under Grant No. MIP-9200526 and by the Semiconductor Research Corporation under Contract #93-DJ-338.  
Abstract: A high-level fault modeling and testing philosophy is proposed which is aimed at ensuring full detection of low-level, physical faults, as well as the industry-standard single stuck-line (SSL) faults. A set of independent functional faults and the corresponding functional tests are derived (induced) from the circuit under test; of particular interest are SSL-induced functional faults or SIFs. We present, for the first time, complete functional circuit models and tests for representative 74X-series and ISCAS-85 benchmark circuits, and apply the proposed methodology to them. These examples demonstrate that functional testing can, with far less effort than conventional methods, produce test sets that provide complete coverage of SSL faults in practical circuits. Surprisingly, these test sets are also provably of minimal or near-minimal size. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abramovici, M. A. Breuer, and A. D. Friedman, </author> <title> Digital Systems Testing and Testable Design, </title> <publisher> Computer Science Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction For over twenty years, researchers have developed new methods for algorithmic test pattern generation. Digital circuits have been modeled at various levels of abstraction for testing purposes. Gate-level methods <ref> [1] </ref>, hierarchical methods [2,3], and functional methods [4,5,6,7] are well known. Despite all this work, some fundamental problems still exist. We consider three nagging issues here: Fault modeling: The ultimate goal of a fault model is to effectively represent realistic physical faults in a circuit under test. <p> General faults: The general fault (GF) model assumes that the function realized by M changes to any of the k-variable functions that differ from Z (X). (This is referred as the universal fault model in <ref> [1] </ref>.) The GF model implies that exhaustive testing is required for each primitive module. It is also technology and implementation independent. Pin faults: The pin fault (PF) model for functional circuits is a generalization of the gate-level SSL fault model. <p> But for the following alter native description of M (HDL code B): Temp [1:0] := A + B + C; Z := Temp <ref> [1] </ref>; where + is addition, there is little consensus in the literature as to what testing should be performed to verify that addition works. Testing for all stuck-variable faults yields four tests, e.g., T 2 :T 5 , giving 73% SSL fault coverage. <p> expansion: If the circuit of Figure 2 is repeated n times in a ripple-carry fashion to form an n-stage carry circuit M n , how many tests now are needed? We know that an n-bit adder (which contains M n ) is fully testable with a constant number of tests <ref> [1] </ref>. Unfortunately, M n is not. We now apply the fault-independence concept to prove that the number of tests for M n grows linearly with n.
Reference: [2] <author> B. T. Murray and J. P. Hayes, </author> <title> Hierarchical Test Generation Using Precomputed Tests for Modules, </title> <journal> IEEE TCAD, </journal> <volume> Vol. 9, </volume> <month> June </month> <year> 1990, </year> <pages> pp. 594-603. </pages>
Reference-contexts: One exception is that if two or more buses request on the channel that is acknowledged, each bus is acknowledged. For example, if A [4], A <ref> [2] </ref>, B [6] and C [4] are requested, A [4] and C [4] are acknowledged. With the foregoing functional model, we create a SIF list as outlined in Section 2.
Reference: [3] <author> J. D. Calhoun and F. Brglez, </author> <title> A Framework and Method for Hierarchical Test Generation, </title> <booktitle> Proc. </booktitle> <address> ITC, </address> <year> 1992, </year> <pages> pp 480-490. </pages>
Reference: [4] <author> S. M. Thatte and J. A. Abraham, </author> <title> Test Generation for Microprocessors, </title> <journal> IEEE TC, </journal> <volume> Vol. C-29, </volume> <month> June </month> <year> 1980, </year> <pages> pp. 429-441. </pages>
Reference-contexts: One exception is that if two or more buses request on the channel that is acknowledged, each bus is acknowledged. For example, if A <ref> [4] </ref>, A [2], B [6] and C [4] are requested, A [4] and C [4] are acknowledged. With the foregoing functional model, we create a SIF list as outlined in Section 2. <p> One exception is that if two or more buses request on the channel that is acknowledged, each bus is acknowledged. For example, if A <ref> [4] </ref>, A [2], B [6] and C [4] are requested, A [4] and C [4] are acknowledged. With the foregoing functional model, we create a SIF list as outlined in Section 2. <p> One exception is that if two or more buses request on the channel that is acknowledged, each bus is acknowledged. For example, if A <ref> [4] </ref>, A [2], B [6] and C [4] are requested, A [4] and C [4] are acknowledged. With the foregoing functional model, we create a SIF list as outlined in Section 2. <p> One exception is that if two or more buses request on the channel that is acknowledged, each bus is acknowledged. For example, if A <ref> [4] </ref>, A [2], B [6] and C [4] are requested, A [4] and C [4] are acknowledged. With the foregoing functional model, we create a SIF list as outlined in Section 2.
Reference: [5] <author> Y. H. Levendel and P. R. Menon, </author> <title> Test Generation Algorithms for Computer Hardware Description Languages, </title> <journal> IEEE TC, </journal> <volume> Vol. C-31, </volume> <month> July </month> <year> 1982, </year> <pages> pp. 577-588. </pages>
Reference: [6] <author> T. Lin and S. Y. H. Su, </author> <title> The S-Algorithm: A Promising Solution for Systematic Functional Test Generation, </title> <journal> IEEE TCAD, </journal> <volume> Vol. CAD-4, </volume> <month> July </month> <year> 1985, </year> <pages> pp. 250-263. </pages>
Reference-contexts: The fault models used with hardware description language (HDLs) [5,6] can be viewed as IFs induced from the functional domain, as opposed to the physical domain. Data transfer, storage, and manipulation faults, as well as instruction decode and execution faults <ref> [6] </ref> are IFs induced from specific variable and operator faults. These faults depend on the HDL language, but are otherwise technology and implementation independent. <p> One exception is that if two or more buses request on the channel that is acknowledged, each bus is acknowledged. For example, if A [4], A [2], B <ref> [6] </ref> and C [4] are requested, A [4] and C [4] are acknowledged. With the foregoing functional model, we create a SIF list as outlined in Section 2.
Reference: [7] <author> J. Lee and J. H. Patel, </author> <title> A Signal-driven Discrete Relaxation Technique for Architectural Level Test Generation, </title> <booktitle> Proc. </booktitle> <address> ICCAD, </address> <year> 1991, </year> <pages> pp. 458-461. </pages>
Reference-contexts: Functional information: As design tools improve, more logic design is done at the functional level. Several automated tools exist that can synthesize gate-level circuits from functional descriptions. Since it is usually easier to justify and propagate signals using a circuits functional description <ref> [7] </ref>, it is desirable to perform test generation at this higher level. Throwing away this high-level information and resorting to gate-level test generation to ensure complete low-level fault coverage is an extremely inefficient alternative. Test set minimization: Many real circuits require few tests for complete SSL fault detection.
Reference: [8] <author> F. Brglez and H. Fujiwara, </author> <title> A Neutral Netlist of 10 Combinational Benchmark Designs and a Special Translator in Fortran, </title> <booktitle> Proc. </booktitle> <address> ISCAS, </address> <year> 1985, </year> <pages> pp. 695-698. </pages>
Reference-contexts: Throwing away this high-level information and resorting to gate-level test generation to ensure complete low-level fault coverage is an extremely inefficient alternative. Test set minimization: Many real circuits require few tests for complete SSL fault detection. For example, we show that the 60-input 383-gate ISCAS-85 benchmark circuit c880 <ref> [8] </ref> requires only 17 of its 2 60 possible test patterns. In fact, the average number of tests generated for all ISCAS-85 benchmarks by a fast test generation program like COMPACTEST [9] is only 67. <p> We define the notion of functional fault independence, and prove that it can be used to derive near-minimal functional test sets for a wide range of practical circuits including several 74X-series [13] and ISCAS-85 <ref> [8] </ref> circuits. Section 2 discusses functional fault modeling and introduces our new fault model. We develop these ideas and discuss functional fault independence in Section 3. In Section 4, we functionally model and test several 74X-series circuits. <p> In only one of the four 74X examples did COMPACTEST find a minimum test set. 5 Large-Scale Examples: ISCAS-85 The ISCAS-85 benchmarks <ref> [8] </ref> are large combinational circuits derived from industrial sources whose high-level structure has not previously been published. In this section, we present functional models of the five ISCAS-85 circuits listed in Figure 7.
Reference: [9] <author> I. Pomeranz, L. N. Reddy, and S. M. Reddy, COMPACT-EST: </author> <title> A Method to Generate Compact Test Sets for Combinational Circuits, </title> <booktitle> Proc. </booktitle> <address> ITC, </address> <year> 1991, </year> <pages> pp. 194-203. </pages>
Reference-contexts: For example, we show that the 60-input 383-gate ISCAS-85 benchmark circuit c880 [8] requires only 17 of its 2 60 possible test patterns. In fact, the average number of tests generated for all ISCAS-85 benchmarks by a fast test generation program like COMPACTEST <ref> [9] </ref> is only 67. To explore the minimum test requirements of large circuits, Akers et al. [10] introduce the concept of independent fault sets. Faults that cannot be tested with the same tests are independent, and their number is a lower bound on the test set size. <p> S S1S0 P' C C' n A=B Y C' n+4 CLA D 4 4 1 4 4 2 4 4 4 4 4 4 1 1 74X series circuit Best previous lower bound on test set size [16] Lower bound from indep. functional fault set COMPAC TEST test set size <ref> [9] </ref> SIF test set size 74182 - 10 12 10 7485 - 23 23 23 best known to date; minimum possible 100% SSL fault coverage. for each circuit, these particular test sets are all of minimum size. <p> Preliminary analysis of counters, shift registers, and general sequential control modules is producing promising results. ISCAS-85 circuit Best previous lower bound on test set size [20] Lower bound from indep. functional fault set COMPAC TEST test set size <ref> [9] </ref> SIF test set size c432 24 27 47 32 c880 12 17 30 17 c6288 6 11 16 12 best known to date; minimum possible 100% SSL fault coverage. Acknowledgment: We thank Shawn Blanton and Krish Chakrabarty for their help and insight.
Reference: [10] <author> S. B. Akers, C. Joseph and B. Krishnamurthy, </author> <title> On the Role of Independent Fault Sets in the Generation of Minimal Test Sets, </title> <booktitle> Proc. </booktitle> <address> ITC, </address> <year> 1987, </year> <pages> pp. 1100-1107. </pages>
Reference-contexts: In fact, the average number of tests generated for all ISCAS-85 benchmarks by a fast test generation program like COMPACTEST [9] is only 67. To explore the minimum test requirements of large circuits, Akers et al. <ref> [10] </ref> introduce the concept of independent fault sets. Faults that cannot be tested with the same tests are independent, and their number is a lower bound on the test set size. Unfortunately, the problem of calculating maximum independent fault sets is NP-hard [11]. <p> F4 Generate 1 0 1 1 F5 Stop generate with B 0 0 1 0 F6 Stop generate with A 0 0 0 1 (b) (a) P P F F ' P VLSI Test Symposium Paper, Hansen & Hayes, May 1995 4 We can extend the notion of fault independence <ref> [10] </ref> to the functional level. We define a compatible fault set as a set of functional faults that can be detected by a single test. Two compatible fault sets are independent iff they cannot be detected by a single test.
Reference: [11] <author> I. Pomeranz and S. M. Reddy, </author> <title> Generalization of Independent Faults for Transition Faults, </title> <booktitle> Proc. VLSI Test Symp., </booktitle> <year> 1992, </year> <pages> pp. 7-12. </pages>
Reference-contexts: Faults that cannot be tested with the same tests are independent, and their number is a lower bound on the test set size. Unfortunately, the problem of calculating maximum independent fault sets is NP-hard <ref> [11] </ref>. Pomeranz et al. [9,11] employ heuristics to lower the computation effort, at the expense of less-than-minimal test set size.
Reference: [12] <author> D. K. Pradhan, Ed., </author> <title> Fault-Tolerant Computing Theory and Techniques, Vol. I, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference: [13] <institution> Texas Instruments Inc., </institution> <note> The TTL Data Book, </note> <editor> 2nd Ed., Dal-las, </editor> <address> TX, </address> <year> 1976. </year>
Reference-contexts: We define the notion of functional fault independence, and prove that it can be used to derive near-minimal functional test sets for a wide range of practical circuits including several 74X-series <ref> [13] </ref> and ISCAS-85 [8] circuits. Section 2 discusses functional fault modeling and introduces our new fault model. We develop these ideas and discuss functional fault independence in Section 3. In Section 4, we functionally model and test several 74X-series circuits. <p> Because the high-level circuit models are generally small, the foregoing steps are often easy to apply and produce small test sets. The tests we derive for the circuits in this section cover all SSL faults in the standard 74X-series gate-level designs <ref> [13] </ref>, a property that we verify by complete gate-level fault simulation. Furthermore, these test sets are provably minimal, and are generally smaller than those found by the efficient gate-level test generator COM-PACTEST.
Reference: [14] <author> J. P. Shen, W. Maly, and F. J. Ferguson, </author> <title> Inductive Fault Analysis of MOS Integrated Circuits, </title> <journal> IEEE Design and Test, </journal> <volume> Vol. 2, </volume> <month> December </month> <year> 1985, </year> <pages> pp. 13-26. </pages>
Reference-contexts: Given a full set of physical faults, a set of functional faults can be derived, usually without too much difficulty. For example, the work of Shen et al. on inductive fault analysis <ref> [14] </ref> can be used to supply a comprehensive physical-fault list. Conversely, if parametric testing is considered as in I DDQ testing, activation of a functional fault like F16 causes a high-current condition which can be detected.
Reference: [15] <author> M. C. Hansen and J. P. Hayes, </author> <title> Functional Modeling and Testing of 74X and ISCAS-85 Circuits, </title> <type> Tech. Report, </type> <institution> Dept. of EECS, University of Michigan, </institution> <note> in preparation. </note>
Reference-contexts: In the next section, we present the functional models for the larger gate-level circuits listed in column 2 of Figure 7; for complete modeling and testing details of these circuits, see <ref> [15] </ref>. Given both the function and its realization, we extract the SIFs for each functional module M i . Often functional faults can be identified directly from the high-level design, and take the form permanently enable (disable) function F i . Examples are seen in Figures 3a, 6 and 14.
Reference: [16] <author> S. B. Akers and B. Krishnamurthy, </author> <title> Test Counting: A Tool for VLSI Testing, </title> <journal> IEEE Design & Test, </journal> <volume> Vol. 6, </volume> <month> October </month> <year> 1985, </year> <pages> pp. 58-77 </pages>
Reference-contexts: Analysis shows that they require the same number of tests (23) as the 74L85 for complete SSL fault coverage. 74181 4-bit ALU: This somewhat more complex circuit is often thought to be a good example of random logic. Akers et al. <ref> [16] </ref> and Tromp [17] struggled with this circuit at the gate level to find a test set of the minimal size 12. Tromp notes that test sets generated for this experiment are the result of extensive computations and manual heuristics. <p> Note that the CLA module M3 is again a key component. To explain the surprising ease with which we generate tests for the 74181, we dissect the twelve-vector test set given by Akers et al. <ref> [16] </ref>. Applying their tests to the primary inputs, we find that ten of the tests exactly produce the functional tests required for the CLA module M3 of and that the ten CLA functional tests fail to cover one SIF each from M1 and M2. <p> equals the number of independent functional faults A S E B M2 A S S1S0 P' C C' n A=B Y C' n+4 CLA D 4 4 1 4 4 2 4 4 4 4 4 4 1 1 74X series circuit Best previous lower bound on test set size <ref> [16] </ref> Lower bound from indep. functional fault set COMPAC TEST test set size [9] SIF test set size 74182 - 10 12 10 7485 - 23 23 23 best known to date; minimum possible 100% SSL fault coverage. for each circuit, these particular test sets are all of minimum size.
Reference: [17] <author> G.-J. Tromp, </author> <title> Minimal Test Sets for Combinational Circuits, </title> <booktitle> Proc. </booktitle> <address> ITC, </address> <year> 1991, </year> <pages> pp. 204-209. </pages>
Reference-contexts: Analysis shows that they require the same number of tests (23) as the 74L85 for complete SSL fault coverage. 74181 4-bit ALU: This somewhat more complex circuit is often thought to be a good example of random logic. Akers et al. [16] and Tromp <ref> [17] </ref> struggled with this circuit at the gate level to find a test set of the minimal size 12. Tromp notes that test sets generated for this experiment are the result of extensive computations and manual heuristics. <p> With this functional fault information, we easily find a minimum set of 52 (84) tests. (The test set size of 82 claimed for c1355 in <ref> [17] </ref> is incorrect [19].) c880 8-bit ALU: This 383-gate circuit turns out to be an 8-bit ALU with the high-level model shown in Figure 16. Given the presence of a CLA module in the 74181 ALU, it is not surprising to find a similar module in c880.
Reference: [18] <author> C. L. Chen and M. Y. Hsiao, </author> <title> Error-Correcting Codes for Semiconductor Memory Applications: A State-of-the-Art Review, </title> <journal> IBM J. R&D, </journal> <volume> Vol. 28, </volume> <month> March </month> <year> 1984, </year> <pages> pp. 124-134. </pages>
Reference-contexts: The 41 inputs are combined to form an 8-bit internal bus S, which then combines with 32 primary inputs to form the 32 primary outputs; see Figure 15. The boolean expressions defining S form the H matrix for a (40,32) Hamming code <ref> [18] </ref>. Module M2 contains the necessary correcting logic, so c499 can correct single-bit errors, but no error-detection logic is present. The c1355 circuit has the same function as c499; it differs in that all XOR primitives of c499 are expanded to their four-NAND-gate equivalents in c1355.
Reference: [19] <author> G.-J. Tromp, </author> <title> Private communication, </title> <month> September </month> <year> 1994. </year>
Reference-contexts: With this functional fault information, we easily find a minimum set of 52 (84) tests. (The test set size of 82 claimed for c1355 in [17] is incorrect <ref> [19] </ref>.) c880 8-bit ALU: This 383-gate circuit turns out to be an 8-bit ALU with the high-level model shown in Figure 16. Given the presence of a CLA module in the 74181 ALU, it is not surprising to find a similar module in c880.
Reference: [20] <author> S. Kajihara, I. Pomeranz, K. Kinoshita, and S. M. Reddy, </author> <title> On Compacting Test Sets by Addition and Removal of Test Vectors, </title> <booktitle> Proc. VLSI Test Symp., </booktitle> <year> 1994, </year> <pages> pp. 202-207. </pages>
Reference-contexts: The sizes of our independent functional fault sets are compared to the best published lower bounds on test set size <ref> [20] </ref>. We also compare the sizes of our SIF test sets to those produced by COMPACTEST. Observe that in several cases, we have improved upon the best-known test set sizes and their lower bounds. <p> In fact, physical faults in sequential circuits also naturally abstract to the functional level. Preliminary analysis of counters, shift registers, and general sequential control modules is producing promising results. ISCAS-85 circuit Best previous lower bound on test set size <ref> [20] </ref> Lower bound from indep. functional fault set COMPAC TEST test set size [9] SIF test set size c432 24 27 47 32 c880 12 17 30 17 c6288 6 11 16 12 best known to date; minimum possible 100% SSL fault coverage.
References-found: 20

