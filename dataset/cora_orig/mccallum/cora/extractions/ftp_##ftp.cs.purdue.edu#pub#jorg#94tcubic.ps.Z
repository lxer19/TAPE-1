URL: ftp://ftp.cs.purdue.edu/pub/jorg/94tcubic.ps.Z
Refering-URL: http://www.cs.purdue.edu/homes/jorg/jorgs_papers.html
Root-URL: http://www.cs.purdue.edu
Title: Geometric Constraints for CAGD  
Author: Christoph M. Hoffmann and Jorg Peters M. Dhlen, T. Lyche, and L. L. 
Note: Mathematical Methods in CAGD III 1  Schumaker (eds.), pp. 1-16. Copyright o c 1995 by xxx ISBN xxx. All rights of reproduction in any form reserved.  
Abstract: To enrich the shape vocabulary of mechanical CAD systems, we develop techniques that allow defining free-form curves from geometric constraints. An important aspect of this aproach is the ability to obtain all possible instances of curve segments satisfying the constraints of a dimensioned sketch. We illustrate the approach by treating constraints on Tschirnhausen cubics in some detail. Constraint-based sketching has become a major design paradigm in mechanical computer-aided design (MCAD). Conceptually, a rough sketch is prepared by the user and annotated with geometric constraints such as distance, angle, parallelism, tangency, concentricity, etc. The sketch is then instantiated to the precise specifications implied by the constraints, and is interpreted as a profile. This profile, in turn, defines a solid or solid operation through lofting or sweeping such as a linear extrusion, revolution about an axis, or a general sweep along a space curve. This style of defining solids and their bounding surfaces is considered an attractive way to express some of the functionality of the final design. The use of geometric constraints, moreover, conveys certain design intent. The use of geometric constraints in MCAD is not confined to profile specification alone. Other uses include eliminating explicit coordinate computations in assemblies and conveniently specifying relative position, in 3-space, of geometric form features of parts. Geometric constraint solving is important because it enables generic design, feature libraries, convenient redesign, and design variation. Its chief limitations, at this time, are rooted to a significant part in the absence of strong techniques for solving the mathematical problems that underlie geometric constraint specification. For this reason, the vocabulary of geometric constraint solvers is typically restricted to points, lines and circles, and the constraints to dimensioning constraints, concentricity, tangency and perpendicularity. For a thorough review of the literature on this kind of constraint solving, we refer the reader to [1, 14, 16, 17]. x1. Introduction
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W. Bouma, I. Fudos, C. Hoffmann, J. Cai, and R. Paige. </author> <title> A geometric constraint solver. Computer Aided Design, </title> <note> page to appear, </note> <year> 1994. </year>
Reference-contexts: Below, we will sketch a particular solver that satisfies all three requirements. In view of a number of papers on this solver, however, we remain brief and refer the reader to <ref> [1, 8, 14] </ref> for details. A multimedia description of the core algorithm is available on the world-wide-web at URL http://www.cs.purdue.edu/people/cmh/electrobook/intro.html. A Simple Constraint Solver. The constraint solver has two distinct phases.
Reference: 2. <author> B. </author> <title> Buchberger. Grobner Bases: An Algorithmic Method in Polynomial Ideal Theory. </title> <editor> In N. K. Bose, editor, </editor> <booktitle> Multidimensional Systems Theory, </booktitle> <pages> pages 184-232. </pages> <address> D. </address> <publisher> Reidel Publishing Co., </publisher> <year> 1985. </year>
Reference-contexts: The two cases can be investigated separately. Assume v 0 = 0. Using the lexicographic ordering with u 1 v 1 u 0 v 0 , the Grobner basis (cf. <ref> [2, 13] </ref>) of (4) is v 0 = 0 1 3v 2 0 4a) 9b 2 = 0 (5) 1 + 12av 1 3u 2 From this form of the equations, the following conclusions are immediate. 1.
Reference: 3. <author> C.-S. Chiang, C. M. Hoffmann, and R. E. Lynch. </author> <title> How to compute offsets without self-intersection. </title> <booktitle> In Proc SPIE Conf Curves and Surfaces in Computer Vision and Graphics, </booktitle> <volume> Volume 1610, </volume> <pages> pages 76-87. </pages> <booktitle> Intl Society for Optical Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: Basic Measurement Computations Distance computations involving arcs must account for the endpoints. For instance, in Figure 8, points that lie below the angled region defined by the curve normals at the endpoints will be closer to the endpoints of the arc than to any interior arc point. Since <ref> [3] </ref> treats the relevant geometric considerations in some detail, we consider entire curves below. Fig. 8. Regions for point proximity computations. 8 C. M. Hoffmann and J. Peters Distance of a Line from a T-cubic.
Reference: 4. <author> G. Crippen and T. </author> <title> Havel. Distance Geometry and Molecular Conformation. </title> <publisher> John Wiley & Sons, </publisher> <year> 1988. </year>
Reference-contexts: When the shape vocabulary is restricted to points, and the constraints are restricted to distances only, there is a complete characterization of generically solvable constraint problems; e.g., <ref> [4] </ref>. This characterization can be extended to include line segments and angles [11] and thus to constraints on fixed-radius circular arcs that can be reduced to line and point configurations.
Reference: 5. <institution> D-Cubed Ltd, </institution> <address> 68 Castle Street, Cambridge, CB3 0AJ, England. </address> <booktitle> The Dimensional Constraint Manager, </booktitle> <month> May </month> <year> 1993. </year> <note> Version 2.5. </note>
Reference: 6. <author> R. T. Farouki. </author> <title> Pythagorean hodographs. </title> <journal> IBM J of Research and Development, </journal> <volume> 34 </volume> <pages> 736-752, </pages> <year> 1990. </year>
Reference-contexts: In order to solve all constraints exactly and include parallelism as a natural constraint, we consider curves that have rational offsets, because two curves that are offsets of each other are naturally considered parallel curves. Among the simplest such curves are Tschirnhausen cubics <ref> [6] </ref>, called T-cubics in the following, and Pythagorean quartics [18]. T-cubics have quintic rational offsets and a Bezier representation whose control polygon has a nice geometric characterization. <p> A T-cubic arc is defined by four geometric constraints, such as incidence to four points, or tangency to two lines plus interpolation of two points. Using the four parameters u 0 ; v 0 ; u 1 ; v 1 , we formally define any T-cubic F following Farouki <ref> [6] </ref> as F (t) := p 0 s 3 + p 1 3s 2 t + p 2 3st 2 + p 3 t 3 ; s := 1 t: where the control points satisfy p 1 = p 0 + 3 0 v 2 p 2 = p 1 +
Reference: 7. <author> R. T. Farouki, J. Peters, </author> <title> Splining Tschirnhausen cubics, </title> <type> manuscript, </type> <year> 1994. </year>
Reference: 8. <author> I. Fudos and C. M. Hoffmann. </author> <title> Correctness proof of a geometric constraint solver. </title> <type> Technical Report 93-076, </type> <institution> Purdue University, Computer Science, </institution> <year> 1993. </year>
Reference-contexts: Below, we will sketch a particular solver that satisfies all three requirements. In view of a number of papers on this solver, however, we remain brief and refer the reader to <ref> [1, 8, 14] </ref> for details. A multimedia description of the core algorithm is available on the world-wide-web at URL http://www.cs.purdue.edu/people/cmh/electrobook/intro.html. A Simple Constraint Solver. The constraint solver has two distinct phases. <p> For the more general constraint solver outlined above neither cluster formation nor cluster merging are unique. However, it has been proved that generic solvability is independent of the sequence in which clusters are formed, independent of the clusters constructed, and independent of the sequence in which clusters are merged <ref> [8] </ref>. Moreover, even though different construction sequences can lead to different geometric solutions during Phase 2, the same solution will be constructed if we add selection criteria for the geometric subproblems.
Reference: 9. <author> I. Fudos and C. M. Hoffmann. </author> <title> On the Hermite problem for conic arcs. </title> <type> Technical Report 94-065, </type> <institution> Purdue University, Computer Science, </institution> <year> 1994. </year>
Reference: 10. <author> G. Geise and Th. Nestler. </author> <title> Bezier representations of conics of contact in the projective plane. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 11 </volume> <pages> 233-246, </pages> <year> 1994. </year>
Reference: 11. <author> T. </author> <title> Havel. Some examples of the use of distances as coordinates for Eu-clidean geometry. </title> <journal> J. of Symbolic Computation, </journal> <volume> 11 </volume> <pages> 579-594, </pages> <year> 1991. </year>
Reference-contexts: When the shape vocabulary is restricted to points, and the constraints are restricted to distances only, there is a complete characterization of generically solvable constraint problems; e.g., [4]. This characterization can be extended to include line segments and angles <ref> [11] </ref> and thus to constraints on fixed-radius circular arcs that can be reduced to line and point configurations. However, the characterization includes a nondeterministic step, and to date no efficient deterministic solver has been found that can actually solve all generically well-constrained problems.
Reference: 12. <author> D. </author> <title> Hilbert. Grundlagen der Geometrie. </title> <editor> B. G. </editor> <publisher> Teubner, Stuttgart, </publisher> <year> 1956. </year>
Reference-contexts: Unfortunately, the solution space is exponential in the number of geometric elements, and no theories are known that might result in an efficient search for real solutions. In the case of ruler-constructible problems, Hilbert has shown that either all solutions are real or all are imaginary <ref> [12] </ref>. In general, however, there seem to be no good characterizations of the solution space. Fig. 2. Left: Cubic defined by four points with distance constraints. Right: Cubic defined by 2 points and two lines x3.
Reference: 13. <author> C. M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <institution> Cal., </institution> <year> 1989. </year>
Reference-contexts: The two cases can be investigated separately. Assume v 0 = 0. Using the lexicographic ordering with u 1 v 1 u 0 v 0 , the Grobner basis (cf. <ref> [2, 13] </ref>) of (4) is v 0 = 0 1 3v 2 0 4a) 9b 2 = 0 (5) 1 + 12av 1 3u 2 From this form of the equations, the following conclusions are immediate. 1.
Reference: 14. <author> Christoph M. Hoffmann and Pamela J. Vermeer. </author> <title> Geometric constraint solving in R 2 and R 3 . In D. </title> <editor> Z. Du and F. Hwang, editors, </editor> <title> Computing in Euclidean Geometry. </title> <publisher> World Scientific Publishing, </publisher> <year> 1994. </year> <note> second edition. </note>
Reference-contexts: Below, we will sketch a particular solver that satisfies all three requirements. In view of a number of papers on this solver, however, we remain brief and refer the reader to <ref> [1, 8, 14] </ref> for details. A multimedia description of the core algorithm is available on the world-wide-web at URL http://www.cs.purdue.edu/people/cmh/electrobook/intro.html. A Simple Constraint Solver. The constraint solver has two distinct phases.
Reference: 15. <author> M. Hohmeyer. </author> <title> Surface Intersection. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, Dept. of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: Distance between two T-cubics. The distance computation requires finding a common normal to the two arcs; Figure 9. This computation is analogous to certain types of loop detection in surface intersection; e.g., <ref> [15] </ref>. Fig. 9. Distance between two T-cubics. x5. Basic Constructions We consider constructing a T-cubic arc from constraints with points and lines. As pointed out before, this includes circles with fixed radius.
Reference: 16. <author> G. Kramer. </author> <title> Solving Geometric Constraint Systems. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference: 17. <author> W. Leler. </author> <title> Constraint Programming Languages: Their Specification and Generation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference: 18. <author> H. Pottmann. </author> <title> Rational curves and surfaces with rational offsets. </title> <type> Technical report, </type> <institution> Technical University Vienna, Institut fur Geometrie, </institution> <year> 1993. </year>
Reference-contexts: Among the simplest such curves are Tschirnhausen cubics [6], called T-cubics in the following, and Pythagorean quartics <ref> [18] </ref>. T-cubics have quintic rational offsets and a Bezier representation whose control polygon has a nice geometric characterization. Pythagorean quartics lack a Geometric Constraints for CAGD 5 simple geometric primary (control point) representation, but their dual class representation has been elegantly characterized in [18]. <p> T-cubics in the following, and Pythagorean quartics <ref> [18] </ref>. T-cubics have quintic rational offsets and a Bezier representation whose control polygon has a nice geometric characterization. Pythagorean quartics lack a Geometric Constraints for CAGD 5 simple geometric primary (control point) representation, but their dual class representation has been elegantly characterized in [18]. A number of nonlinear problems arise when integrating such curves into geometric constraint solvers. Neither the point nor the class representation is better suited for all of them, and ideally one would use both representations.
Reference: 19. <author> Reif, U., </author> <type> personal communication, </type> <month> July </month> <year> 1994. </year> <title> Geometric Constraints for CAGD 17 Acknowledgements. </title> <editor> Christoph M. </editor> <title> Hoffmann is supported in part by ONR contract N00014-90-J-1599, by NSF Grant CDA 92-23502, and by NSF Grant ECD 88-03017. Jorg Peters is supported by NSF RIA 9396164-CCR and NSF NYI 9457806-CCR. </title> <type> Christoph M. </type> <institution> Hoffmann Department of Computer Science, Purdue University, W-Lafayette IN 47907-1398 USA http://www.cs.purdue.edu/people/cmh Jorg Peters Department of Computer Science, Purdue University, </institution> <address> W-Lafayette IN 47907-1398 USA http://www.cs.purdue.edu/people/jorg </address>
Reference-contexts: Otherwise r is decreased. For this method to work well, we would like to know that the that members of the one-parameter family do not intersect each other except at the arc endpoints because this would yield uniqueness and monotonicity. As Reif <ref> [19] </ref> points out, this is not true for curves of type 5 or 8, and an example is shown in Figure 15, left, where the largest curve has the control points p 0 = (0; 0), p 1 = (15:4258; 0), p 2 = (8:5411; 10:0633), and p 3 = (5:0488;
References-found: 19

