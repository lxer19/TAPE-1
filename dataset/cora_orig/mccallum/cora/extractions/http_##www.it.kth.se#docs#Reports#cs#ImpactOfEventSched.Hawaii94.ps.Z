URL: http://www.it.kth.se/docs/Reports/cs/ImpactOfEventSched.Hawaii94.ps.Z
Refering-URL: http://www.it.kth.se/docs/Reports/cs/
Root-URL: http://www.it.kth.se
Title: Impact of Event Scheduling on Performance of Time Warp Parallel Simulations  
Author: Hallo Ahmed, Robert Rnngren and Rassul Ayani 
Keyword: Key Words: Parallel discrete event simulation, Time Warp simulation, Event scheduling.  
Note: 1: Introduction A timestamp is associated with each event which indicates to the receiving LP the virtual time at which the event should be processed.  
Address: Electrum 204, S-164 40 Kista, Sweden  
Affiliation: Dept. of Teleinformatics, Royal Institute of Technology (KTH)  
Abstract: The main objective of this work is to study the impact of scheduling policies on performance of TW. We compare a dynamic scheduling scheme with a static one. Our experimental results indicate that the dynamic policy reduces rollback costs for small shared memory multiprocessors. In conventional parallel processing systems, scheduling plays the important role of insuring efficient utilisa-tion of processing elements by responding to short-term fluctuations in system load. Although an optimal scheduling algorithm for multiprocessors can be shown to be computationally intractable, some dynamic scheduling algorithms are close to optimal [5]. The main objective of this work is to study the impact of different scheduling strategies on the performance of Time Warp (TW) simulations [2, 7]. TW is a parallel discrete event simulation (PDES) approach. According to this model, the system to be simulated is partitioned into a number of logical processes (LPs) each simulating part of the real system. An LP has its own local or virtual time, some local state variables and an event list containing all event messages to be simulated by the LP. Event messages, or events, represent stimuli in the real system. All PDES approaches obey the local causality constraint which requires that each LP processes its events in nondecreasing timestamp order. Violation of this constraint may result in causality errors and consequently to incorrect simulation. In TW each LP maintains its own notion of simulated time referred to as Local Virtual Time, LVT, measuring how far in simulation the LP has proceeded. The simulation approach is optimistic because an LP processes the current event assuming that the next event will have a timestamp larger than or equal to the current one. Under this assumption the LP progresses in its simulation time without delay, possibly exploiting more parallelism from the problem than would be possible using conservative synchronization. However, if an LP receives an event e with a smaller timestamp it must rollback to a state that existed before processing any erroneous messages, i.e. prior to the time indicated by the time stamp of e. In order to recover from causality errors each LP must save its state and copies of all messages it has received or sent to other LPs, (see Figure 1). If an erroneous message is transmitted to an LP, the sender of the message initiates a recovery routine when it rolls back itself by sending the concerned LP an anti-message that will either cause a rollback or annihilate the erroneous message. For TW simulations, the choice of a scheduling strategy is not based on the same criteria as for conventional parallel processing. In the latter, we are interested in exploiting the processing power of a system to its limits with the aim of allowing each process to progress through its execution as far as possible until it is constrained by synchronization or scheduling requirements. In TW, however, the goal is not the same; keeping all processors busy with the execution of some LPs may not be a good strategy! Instead of useful work, the LPs may be performing erroneous computations which eventually 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Biswas J and Browne J. C., </author> <title> Simultaneous update of Priority Structures, </title> <booktitle> Proc. of the 1987 Int. Conf. on Parallel Processing, </booktitle> <pages> pp 17-21, </pages> <month> Aug. </month> <year> 1987. </year>
Reference: 2. <author> Fujimoto, R. </author> <title> Parallel Discrete Event Simulation, </title> <journal> Comm. ACM Vol. </journal> <volume> 33, No. </volume> <pages> 10 , pp. 31 - 53, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Although an optimal scheduling algorithm for multiprocessors can be shown to be computationally intractable, some dynamic scheduling algorithms are close to optimal [5]. The main objective of this work is to study the impact of different scheduling strategies on the performance of Time Warp (TW) simulations <ref> [2, 7] </ref>. TW is a parallel discrete event simulation (PDES) approach. According to this model, the system to be simulated is partitioned into a number of logical processes (LPs) each simulating part of the real system.
Reference: 3. <author> Fujimoto, R. </author> <title> Time Warp on a Shared Memory Multiprocessor, </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> Vol. 6, No. 3, </volume> <pages> pp. 211-239, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: If event processing and scheduling takes about the same time, this means that dynamic scheduling could be successful for up to 16 processors. 3.2.2: Time warp implementation: Our current Time Warp system is implemented on a Sequent Symmetry with 26 processors. It uses direct aggressive cancellation <ref> [3] </ref>. In direct cancellation anti-messages are implemented as pointers to the corresponding positive messages, eliminating the need for searching the input queue when cancelling events. Aggressive cancellation sends all the anti-messages directly when a rollback sequence is initiated at an LP.
Reference: 4. <author> Glazer, D. and Tropper, C., </author> <title> On Process Migration and Load Balancing in Time Warp, </title> <journal> IEEE Transactions on Parallel and Distributed Systems Vol. </journal> <volume> 4, No. 3, </volume> <pages> pp 318-327, </pages> <month> March </month> <year> 1993 </year>
Reference: 5. <author> Hwang, K., Briggs, </author> <title> F.A., </title> <booktitle> Computer Architecture and Parallel Processing. </booktitle> <publisher> McGraw-Hill Books Co, </publisher> <pages> pp 591-613, </pages> <year> 1984. </year>
Reference-contexts: 1: Introduction In conventional parallel processing systems, scheduling plays the important role of insuring efficient utilisa-tion of processing elements by responding to short-term fluctuations in system load. Although an optimal scheduling algorithm for multiprocessors can be shown to be computationally intractable, some dynamic scheduling algorithms are close to optimal <ref> [5] </ref>. The main objective of this work is to study the impact of different scheduling strategies on the performance of Time Warp (TW) simulations [2, 7]. TW is a parallel discrete event simulation (PDES) approach.
Reference: 6. <author> Jain, R., </author> <title> The Art of Computer Systems Performance Analysis. </title> <publisher> John Wiley & Sons, Inc. </publisher> <year> 1991, </year> <pages> pp 393-473. </pages>
Reference-contexts: Independence of the multiple streams of random numbers was guaranteed by carefully computing the initial seeds for every LP and PE such that it is impossible for any two streams to overlap either partially or completely <ref> [6] </ref>, thus eliminating any correlation between the behaviour of the various LPs and PEs. Several well known techniques were used to verify the behaviour of the simulator [6]. For example, we used degeneracy tests to check that the model works correctly for extreme values of input parameters. <p> the initial seeds for every LP and PE such that it is impossible for any two streams to overlap either partially or completely <ref> [6] </ref>, thus eliminating any correlation between the behaviour of the various LPs and PEs. Several well known techniques were used to verify the behaviour of the simulator [6]. For example, we used degeneracy tests to check that the model works correctly for extreme values of input parameters.
Reference: 7. <author> Jeffersson, D. </author> <title> Virtual Time, </title> <journal> ACM trans. on Programming Languages and Systems Vol. </journal> <volume> 7, No. 3, </volume> <pages> pp. 404 - 425, </pages> <month> Jul. </month> <year> 1985. </year>
Reference-contexts: Although an optimal scheduling algorithm for multiprocessors can be shown to be computationally intractable, some dynamic scheduling algorithms are close to optimal [5]. The main objective of this work is to study the impact of different scheduling strategies on the performance of Time Warp (TW) simulations <ref> [2, 7] </ref>. TW is a parallel discrete event simulation (PDES) approach. According to this model, the system to be simulated is partitioned into a number of logical processes (LPs) each simulating part of the real system. <p> Scheduling is based on the progress that the LPs have made in virtual time. In Time Warp, for a scheduling policy to be correct, it is required that it asserts that the global virtual time, GVT, will progress <ref> [7] </ref>, (GVT is defined as the minimum virtual time of all LPs and messages in transition in the system). Several scheduling policies for LPs have been suggested that fulfil this requirement. <p> In direct cancellation anti-messages are implemented as pointers to the corresponding positive messages, eliminating the need for searching the input queue when cancelling events. Aggressive cancellation sends all the anti-messages directly when a rollback sequence is initiated at an LP. The state queue, the input and output queue <ref> [7] </ref> have all been incorporated into the input queue. State saving is performed after each event is processed. Synchronization is achieved by simple locks.
Reference: 8. <author> Jones, D.W. </author> <title> Concurrent Operations on Priority Queues, </title> <journal> Comm. ACM Vol. </journal> <volume> 32, No. 1, </volume> <pages> pp. 132-137, </pages> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: Several scheduling policies for LPs have been suggested that fulfil this requirement. The most well known are Minimum Virtual Time, MVT, scheduling that gives highest priority to the LP with the smallest LVT <ref> [8] </ref>. Lowest Virtual Timestamp First, LVTF, gives precedence to the LP with the smallest timestamped unprocessed event in its input queue. Thus LVTF gives priority to the LP that has the lowest probability for performing erroneous computa tions. <p> This gives the Skew Heap a stable performance in the sense that the access time is O (log N) (N is the number of elements in the queue) in any access regardless of the actual distribution of the elements of the queue [14]. The parallel access version proposed <ref> [8] </ref> allows for O (log N) simultaneous parallel accesses theoretically giving an amortized access time of O (1). Figure 4 shows results from experiments measuring the amortized access time of a parallel access Skew Heap on a Sequent Symmetry S81 with an exponential distribution of the time stamp increments.
Reference: 9. <editor> Madisetti, V. et al, </editor> <booktitle> The MIMDIX Operating System for Parallel Simulation, Proceedings of the 6th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <pages> pp 65-74, </pages> <year> 1992. </year>
Reference-contexts: This experiment is referred to as a PHOLD work load <ref> [9] </ref>. 2. Heterogeneous systems, where the behaviour of certain nodes differs from that of the rest of the system. a. Lazy nodes. In these experiments the application was partitioned into k clusters where k is the number of PEs used.
Reference: 10. <author> Matsumo, Y. and Taki, K., </author> <title> Parallel Logic Simulation on a Distributed Memory Machine, </title> <booktitle> Proceedings of the European Conference on Design Automation, </booktitle> <year> 1992. </year>
Reference: 11. <author> Nandy, B. and Loucks, W., </author> <title> On a Parallel Partitioning Technique for Use With Conservative Parallel Simulations, </title> <booktitle> Proceedings of the 7th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <pages> pp 43-51, </pages> <year> 1993. </year>
Reference: 12. <editor> Preiss, B et al, </editor> <title> On the Tradeoff Between Time and Space in Optimistic Parallel Discrete-Event Simulation, </title> <booktitle> Proceedings of the 6th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <pages> pp 33-41, </pages> <year> 1992. </year>
Reference-contexts: Lowest Virtual Timestamp First, LVTF, gives precedence to the LP with the smallest timestamped unprocessed event in its input queue. Thus LVTF gives priority to the LP that has the lowest probability for performing erroneous computa tions. In general LVTF gives better result than other scheduling policies <ref> [12] </ref> a PE PEPE LP LP LP LP LP LP LP LP LP Ready Queues The partitioning problem is an important issue in most Time Warp systems. Finding a good partitioning that gives reasonable load balancing is a hard task.
Reference: 13. <author> Rajaei, H. et al, </author> <title> The Local Time Warp Approach to Parallel Simulation, </title> <booktitle> Proceedings of the 7th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <pages> pp 119-126, </pages> <year> 1993. </year>
Reference: 14. <author> Rnngren R, Riboe J. and Ayani R. </author> <title> Fast Implementations of the Pending Event Set, </title> <booktitle> Proceedings of the International Workshop on Modeling, Analysis and Simulation of Computer and Telecommunication Systems, </booktitle> <volume> Vol. 2, No, 1, </volume> <pages> pp 210-215, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Several parallel access queues have been presented in the literature, of which the Skew Heap [8,15] is one of the most promising implementations <ref> [14] </ref>. The Skew Heap is a linked tree structure with heap ordering. It is kept near balanced by rotating branches in the updating operations. <p> This gives the Skew Heap a stable performance in the sense that the access time is O (log N) (N is the number of elements in the queue) in any access regardless of the actual distribution of the elements of the queue <ref> [14] </ref>. The parallel access version proposed [8] allows for O (log N) simultaneous parallel accesses theoretically giving an amortized access time of O (1).
Reference: 15. <author> Sleator D. D. and Tarjan R. E., </author> <title> Self-Adjusting Binary Search Trees, </title> <journal> Journal of the ACM Vol. </journal> <volume> 32, No. 3, </volume> <pages> pp. 652-686, </pages> <month> Jul. </month> <year> 1985. </year>
Reference: 16. <author> Steinmann J. S., SPEEDES: </author> <title> A Unified approach to Parallel Simulation, </title> <booktitle> Proceedings of the 6th Workshop on Parallel and Distributed Simulation", </booktitle> <volume> Vol. 24, No. 3, </volume> <pages> pp. 75-84, </pages> <month> Jan. </month> <year> 1992. </year>
Reference: 17. <author> Sporrer, C. and Bauer, H., </author> <title> Corolla partitioning for Distributed Logic Simulation of VLSI-Circuits, </title> <booktitle> Proceedings of the 7th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <pages> pp 85-92, </pages> <year> 1993. </year>

References-found: 17

