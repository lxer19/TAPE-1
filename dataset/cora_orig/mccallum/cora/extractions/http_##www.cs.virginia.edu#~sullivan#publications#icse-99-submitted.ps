URL: http://www.cs.virginia.edu/~sullivan/publications/icse-99-submitted.ps
Refering-URL: http://www.cs.virginia.edu/~sullivan/
Root-URL: http://www.cs.virginia.edu
Title: Information Survivability Control Systems  
Author: Kevin Sullivan, John C. Knight, Xing Du, and Steve Geist 
Keyword: Infrastructure survivability, control, architecture economics  
Address: Thornton Hall, Charlottesville, VA 22903, USA  
Affiliation: University of Virginia, Department of Computer Science  
Email: Email: -sullivan, knight, xd2a, smg9c-@cs.virginia.edu  
Phone: Tel. (804) 982-2206; FAX: (804) 982-2214;  
Web: URL: www.cs.virginia.edu  
Abstract: We address the dependence of critical infrastructures including electric power, telecommunications, finance and transportationon vulnerable information systems. Our approach is based on the notion of control. We envision distributed, hierarchical, adaptive, multiple model, discrete-state control systems to monitor infrastructure information systems and respond to disruptions (e.g., security attacks) by changing operating modes and design configurations to minimize loss of utility. Controlling legacy information systems presents some significant challenges. To explore and evaluate our approach, we have developed a toolkit for building distributed dynamic models of infrastructure information systems. We used this toolkit to build a model of a simple subset of the United States payment system and a control system for this model information system. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Bateson, </author> <title> Introduction to Control System Technology, (6 th ed.), Upper Saddle River, </title> <address> NJ: </address> <publisher> Prentice Hall, </publisher> <year> (1998). </year>
Reference-contexts: Reconfiguration will involve changes in operating modes, module implementations and interconnection structure. We describe our approach, which is based on a control systems perspective and our previous work [10]. Control theory <ref> [1] </ref> provides a vocabulary for reasoning about how to keep systems operating as desired, and for structuring information-based mechanisms to effect such control. The characteristics of the systems that we seek to control imply novel control systems. <p> Functional properties are not enough; real-time control appears likely to emerge as an important issue. 7. RELATED WORK Control theory <ref> [1] </ref> provides a mature way of thinking about and designing information flows and feedback to maintain complex systems under desired behavioral conditions over time. For traditionally engineered systems, control theory provides a rich and beautiful set of modeling and analysis methods based on advanced mathematical analysis.
Reference: 2. <author> M. A. Bauer, R. B. Bunt, A. El Rayess, P. J. Finnigan, T. Kunz, H. L. Lutfiyya, A. D. Marshall, P. Martin, G. M. Oster, W. Powley, J. Rolia, D. Taylor, and M. Woodside, </author> <title> Services Supporting Management of Distributed Applications and Systems, </title> <journal> IBM Systems Journal, </journal> <volume> 36, 4, </volume> <year> (1997), </year> <pages> 508-526. </pages>
Reference-contexts: Control systems ideas have been used in distributed application management. Meta [13] is an architecture and a tool that uses a nonhierarchical control system to optimize performance in fault-tolerant distributed systems using Isis. Distributed application management (e.g., <ref> [2, 25] </ref>) employs services supporting the dynamic management of distributed applications. Network management uses control concepts to manage networks and their running software [3, 4]. However, the major objective in such work is to monitor and improve application or network performance in 9 traditional dimensions, e.g., runtime efficiency.
Reference: 3. <author> B. Boardman, </author> <title> Network Management Solutions Lack Clear Leader, </title> <journal> Network Computing, </journal> <month> (August 15, </month> <year> 1998), </year> <pages> 54-67. </pages>
Reference-contexts: Distributed application management (e.g., [2, 25]) employs services supporting the dynamic management of distributed applications. Network management uses control concepts to manage networks and their running software <ref> [3, 4] </ref>. However, the major objective in such work is to monitor and improve application or network performance in 9 traditional dimensions, e.g., runtime efficiency. By contrast, our use of control is targeted at enhancing the survivability of controlled applications.
Reference: 4. <author> Computer Associates, </author> <title> Enterprise Management 10 Strategy: Managing the New Enterprise, </title> <note> White paper, http://www.cai.com/products/unicent/whitepap.htm, (1996). </note>
Reference-contexts: Distributed application management (e.g., [2, 25]) employs services supporting the dynamic management of distributed applications. Network management uses control concepts to manage networks and their running software <ref> [3, 4] </ref>. However, the major objective in such work is to monitor and improve application or network performance in 9 traditional dimensions, e.g., runtime efficiency. By contrast, our use of control is targeted at enhancing the survivability of controlled applications.
Reference: 5. <author> R. J. Ellison, D. A. Fisher, R. C. Linger, H. F. Lipson, T. Longstaff, and N. R. Mead, </author> <title> Survivable Network Systems: An Emerging Discipline, </title> <type> Technical Report CMU/SEI-97-TR-013, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> (November </month> <year> 1997). </year>
Reference-contexts: 1. INTRODUCTION The survivability of critical infrastructure systems, such as electric power distribution, telecommunications, freight rail and banking, has become a major concern of the United States government, and will garner increasing concern from private industry <ref> [5, 15, 18] </ref>. The intuitive notion of survivability is clear: we want infrastructure systems that continue to provide acceptable service levels to customers in the face of disturbances, natural, accidental or malicious.
Reference: 6. <author> J. Goldberg, L. Gong, I. Greenberg, R. Clark, E. D. Jensen, K. Kim, and D. Wells, </author> <title> Adaptive Fault-Resistant Systems, </title> <type> Technical Report, </type> <institution> SRI, </institution> <year> (1994). </year>
Reference-contexts: Hiltunen and Schlichting propose a model for adaptive systems [8] that respond to changes in three phases: change detection, agreement, and action. It is used for performance and fault-tolerance. Goldberg et al. discuss adaptive fault-resistant systems and present some examples <ref> [6] </ref>. Our approach provides a way to embed adaptation in the system through multiple model control. Different control policies may be adaptively used for different operating regimes. 8.
Reference: 7. <author> P. Gopinath, R. Ramnath, and K. Schwan, </author> <title> Data base Design for Real-Time Adaptations , Journal of Systems and Software, </title> <type> 17, </type> <year> (1992), </year> <pages> 155-167. </pages>
Reference-contexts: Jehuda and Israeli [9] propose a control system for dynamically adapting a software configuration to accommodate varying runtime circumstances impacting on real-time performance. In contrast to our work, which leaves the objective function as a qualitative notion, Jehuda and Israeli use explicit optimization. In CHAOS <ref> [7] </ref>, real time systems are adapted with the use of an entity-relation database modeling system structure. Control systems ideas have been used in distributed application management. Meta [13] is an architecture and a tool that uses a nonhierarchical control system to optimize performance in fault-tolerant distributed systems using Isis.
Reference: 8. <author> M. A. Hiltunen and R. D. Schlichting, </author> <title> Adaptive Distributed and Fault-Tolerant Systems, </title> <journal> International Journal of Computer Systems and Engineering , 11, </journal> <volume> 5, </volume> <year> (1995), </year> <pages> 125-133. </pages>
Reference-contexts: The capability is achieved through the use of an Intruder Detection and Isolation Protocol (IDIP). The work attempts to address the network intrusion problem only. Hiltunen and Schlichting propose a model for adaptive systems <ref> [8] </ref> that respond to changes in three phases: change detection, agreement, and action. It is used for performance and fault-tolerance. Goldberg et al. discuss adaptive fault-resistant systems and present some examples [6]. Our approach provides a way to embed adaptation in the system through multiple model control.
Reference: 9. <author> J. Jehuda and A. Israeli, </author> <title> Automated Meta-Control for Adaptive Real-Time Software, </title> <booktitle> Real-Time Systems, </booktitle> <volume> 14, </volume> <year> (1998), </year> <pages> 107-134. </pages>
Reference-contexts: In a second thrust, we appeal to the concept of economic optimization under uncertainty to reason about the nature of software evolvability [22]. The application of control systems concepts in software design is not new. Jehuda and Israeli <ref> [9] </ref> propose a control system for dynamically adapting a software configuration to accommodate varying runtime circumstances impacting on real-time performance. In contrast to our work, which leaves the objective function as a qualitative notion, Jehuda and Israeli use explicit optimization.
Reference: 10. <author> J.C. Knight, R. W. Lubinsky, J. McHugh, and K. J. Sullivan, </author> <title> Architectural Approaches to Information Survivability, </title> <type> Technical Report CS-97-25, </type> <institution> Department of Computer Science, University of Virginia, </institution> <address> Charlottesville, VA 22903 (September 1997). </address>
Reference-contexts: For example, in reacting to a coordinated security attack, computers hosting critical databases might be disconnected from a network. Reconfiguration will involve changes in operating modes, module implementations and interconnection structure. We describe our approach, which is based on a control systems perspective and our previous work <ref> [10] </ref>. Control theory [1] provides a vocabulary for reasoning about how to keep systems operating as desired, and for structuring information-based mechanisms to effect such control. The characteristics of the systems that we seek to control imply novel control systems. <p> A key property of the design of our toolkit is that a new L-node can be inserted transparently between any two nodes in a system. (At present, each application L-node has exactly one such associated L-node.) Messages passed between the two nodes are then routed through these 4 interposed shell <ref> [10] </ref> or mediator [20, 21, 23] nodes.
Reference: 11. <author> J. C. Knight, M. C. Elder, J. Flinn, and P. Marx, </author> <title> Summaries of Three Critical Infrastructure Applications, </title> <type> Technical Report CS-97-27, </type> <institution> Department of Computer Science, University of Virginia, Charlottesville, </institution> <note> VA 22903 (December 1997). </note>
Reference-contexts: The machines were in Charlottesville (VA), Portland (OR), Tucson (AZ), and Pittsburgh (PA). 4. A MODEL OF THE U.S. PAYMENT SYSTEM In this section, we describe as an example a distributed dynamic model of the United States payment system <ref> [11] </ref> together with a variety of malicious attacks to which it might be subjected. Our model is grossly simplified in relation to the real banking system, of course, but it captures some essential function and architecture. <p> The money-center banks maintain balances in their accounts at the Federal Reserve Bank to allow the necessary funds transfers. This model is based on our domain study of the banking system <ref> [11] </ref>, and models the payment reasonably well at a gross level. a form simplified slightly for presentation. The actual model comprises 11 application nodes: one Federal Reserve Bank node, three money-center bank nodes, and seven branch-bank nodes. Each runs on its own computer.
Reference: 12. <author> R. W. Lubinsky. </author> <title> Distributed Model Development System: Description and Examples, </title> <type> Unpublished Internal Report, </type> <institution> Department of Computer Science, University of Virginia, </institution> <month> (May </month> <year> 1998). </year>
Reference: 13. <author> K. Marzullo, R. Cooper, M. D. Wood, and K. P. Birman, </author> <title> Tools for Distributed Application Management, </title> <booktitle> IEEE Computer, </booktitle> <month> (August </month> <year> 1991), </year> <pages> 42-51. </pages>
Reference-contexts: In contrast to our work, which leaves the objective function as a qualitative notion, Jehuda and Israeli use explicit optimization. In CHAOS [7], real time systems are adapted with the use of an entity-relation database modeling system structure. Control systems ideas have been used in distributed application management. Meta <ref> [13] </ref> is an architecture and a tool that uses a nonhierarchical control system to optimize performance in fault-tolerant distributed systems using Isis. Distributed application management (e.g., [2, 25]) employs services supporting the dynamic management of distributed applications.
Reference: 14. <editor> Multiple Model Approaches to Modelling and Control , R. Murray-Smith and T.A. Johansen (eds.), Taylor & Francis: </editor> <address> London, UK, </address> <year> (1997). </year>
Reference-contexts: For example, an efficient but fragile configuration might be controlled under one policy, but under a different one in a less efficient but more secure configuration (e.g., in which new nodes are prohibited from entering the system). This observation leads us to the notion of multiple-model control <ref> [14] </ref>. In traditional control theory, multiple-model control is used to partition nonlinear systems into piecewise linear systems, with each piece subject to a different analyzable control policy.
Reference: 15. <institution> Office of the Undersecretary of Defense for Acquisition & Technology, Report of the Defense Science Board Task Force on Information Warfare-Defense (IW-D), </institution> <month> (November </month> <year> 1996). </year>
Reference-contexts: 1. INTRODUCTION The survivability of critical infrastructure systems, such as electric power distribution, telecommunications, freight rail and banking, has become a major concern of the United States government, and will garner increasing concern from private industry <ref> [5, 15, 18] </ref>. The intuitive notion of survivability is clear: we want infrastructure systems that continue to provide acceptable service levels to customers in the face of disturbances, natural, accidental or malicious.
Reference: 16. <author> D. Parnas, </author> <title> Designing software for ease of extension and contraction, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5, no. 2, </volume> <month> March </month> <year> 1979, </year> <pages> pp. 128138. </pages>
Reference-contexts: That is, the application must provide a sufficiently rich design space to provide scope for a control system to reconfigure it to handle specified adverse conditions. The need for design flexibility is reminiscent of Parnass notion of design for ease of extension and contraction <ref> [16] </ref>. Our situation is different in at least two ways. First, survivability demands runtime not just design-time reconfiguration. Second, it demands flexibility to respond to adverse conditions related to information systems operation, not just for market segmentation or incremental delivery.
Reference: 17. <author> P. A. Porras and P. Neumann, </author> <title> EMERALD: Event Monitoring Enabling Responses to Anomalous Live Disturbances, </title> <booktitle> 1997 National Information Systems Security Conference, </booktitle> <month> (October 7-10, </month> <year> 1997), </year> <title> Baltimore, Maryland. </title> <booktitle> (Proceedings on the CDROM.) </booktitle>
Reference-contexts: Similarly, security techniques are used to harden a system but typically do not provide any solution when the system is compromised. Intrusion detection provides a way to monitor and control the abnormal behaviors of a system. EMERALD <ref> [17] </ref> introduces an approach to network surveillance, attack isolation, and automated response. It uses distributed, independently tunable surveillance and response monitors as the building blocks, and combines signature analysis with statistical profiling to provide localized protection.
Reference: 18. <institution> Presidents Commission on Critical Infrastructure Protection, Critical Foundations: Protecting Americas Infrastructures, United States Government Printing Office (GPO), </institution> <note> No. 040-000-00699-1. </note>
Reference-contexts: 1. INTRODUCTION The survivability of critical infrastructure systems, such as electric power distribution, telecommunications, freight rail and banking, has become a major concern of the United States government, and will garner increasing concern from private industry <ref> [5, 15, 18] </ref>. The intuitive notion of survivability is clear: we want infrastructure systems that continue to provide acceptable service levels to customers in the face of disturbances, natural, accidental or malicious.
Reference: 19. <author> S. Staniford-Chen, S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland, K. Levitt, C. Wee, R. Yip, and D. Zerkle, </author> <title> GrIDS - A Graph Based Intrusion Detection System for Large Networks, </title> <booktitle> Proceedings of The 19th National Information Systems Security Conference. </booktitle> <month> (October 22-25, </month> <year> 1996), </year> <institution> Baltimore, MD, USA, </institution> <month> 361-370. </month>
Reference-contexts: A recursive framework is proposed for coordinating the dissemination of analyses from the distributed monitors to provide a global detection and response capability. We address disturbances not limited to security. GrIDS <ref> [19] </ref> is a graph based large network intrusion detection system. It collects data about computer activity and network traffic, and aggregates this information into activity graphs which reveal the causal structure of network activity. This is an intrusion detection system. No response mechanism is discussed.
Reference: 20. <author> K. Sullivan, Mediators: </author> <title> Easing the Design and Evolution of Integrated Systems. </title> <type> Ph.D Dissertation, </type> <institution> Department of Computer Science and Engineering, University of Washington, TR UW-CSE-94-08-01, </institution> <month> (August </month> <year> 1994). </year>
Reference-contexts: of the design of our toolkit is that a new L-node can be inserted transparently between any two nodes in a system. (At present, each application L-node has exactly one such associated L-node.) Messages passed between the two nodes are then routed through these 4 interposed shell [10] or mediator <ref> [20, 21, 23] </ref> nodes.
Reference: 21. <author> K. Sullivan, I. J. Kalet, and D. Notkin, </author> <title> Evaluating the Mediator Methods: Prism as a Case Study. </title> <journal> IEEE Transactions on Software Engineering . 22, </journal> <volume> 8, </volume> <year> (1996). </year> <pages> 563-579. </pages>
Reference-contexts: of the design of our toolkit is that a new L-node can be inserted transparently between any two nodes in a system. (At present, each application L-node has exactly one such associated L-node.) Messages passed between the two nodes are then routed through these 4 interposed shell [10] or mediator <ref> [20, 21, 23] </ref> nodes.
Reference: 22. <author> K. Sullivan, </author> <title> The Phenomenology of Software Evolution, </title> <booktitle> International Software Evolution Workshop, </booktitle> <address> Kyoto, Japan, </address> <year> (1998). </year>
Reference-contexts: In a second thrust, we appeal to the concept of economic optimization under uncertainty to reason about the nature of software evolvability <ref> [22] </ref>. The application of control systems concepts in software design is not new. Jehuda and Israeli [9] propose a control system for dynamically adapting a software configuration to accommodate varying runtime circumstances impacting on real-time performance.
Reference: 23. <author> K. Sullivan, P. Shaw, and S. Geist, </author> <booktitle> Mediators in Architectural Hardening of Critical Infrastructure Applications, The 3 rd International Software Architecture Workshop. </booktitle> <year> (1998). </year>
Reference-contexts: of the design of our toolkit is that a new L-node can be inserted transparently between any two nodes in a system. (At present, each application L-node has exactly one such associated L-node.) Messages passed between the two nodes are then routed through these 4 interposed shell [10] or mediator <ref> [20, 21, 23] </ref> nodes.
Reference: 24. <author> K. Sullivan, S. Jha and P. Chalasani, </author> <title> Software Design Decisions as Real Options, </title> <journal> IEEE Transactions on Software Engineering. </journal> <note> To appear. </note>
Reference-contexts: In one related project, we are applying concepts from options theoryan application of stochastic optimal control, and of optimal stopping theory in particularto reason about the value of flexibility in software products and processes <ref> [24] </ref>. In a second thrust, we appeal to the concept of economic optimization under uncertainty to reason about the nature of software evolvability [22]. The application of control systems concepts in software design is not new.
Reference: 25. <institution> Tivoli Systems, Tivoli and Application Management, </institution> <note> White paper, http://www.tivoli.com/o_products/html/body_map_wp. html, </note> <year> (1998). </year>
Reference-contexts: Control systems ideas have been used in distributed application management. Meta [13] is an architecture and a tool that uses a nonhierarchical control system to optimize performance in fault-tolerant distributed systems using Isis. Distributed application management (e.g., <ref> [2, 25] </ref>) employs services supporting the dynamic management of distributed applications. Network management uses control concepts to manage networks and their running software [3, 4]. However, the major objective in such work is to monitor and improve application or network performance in 9 traditional dimensions, e.g., runtime efficiency.
Reference: 26. <institution> UC Davis and Boeing Co., </institution> <note> Intrusion Detection and Isolation Protocol (IDIP). http://www.cs.ucdavis.edu/ projects/idip.html. </note>
Reference-contexts: This is an intrusion detection system. No response mechanism is discussed. The graph based detection mechanism could perhaps be used in our architecture. The Dynamic, Cooperating Boundary Controllers program <ref> [26] </ref> is developing a capability to allow traditionally static and standalone network boundary controllers (e.g. filtering routers and firewalls) to work cooperatively to protect networks. The capability is achieved through the use of an Intruder Detection and Isolation Protocol (IDIP). The work attempts to address the network intrusion problem only.
Reference: 27. <author> A.J. Wood and B.F. Wollenberg, </author> <title> Power Generation, Operation and Control. </title> <address> New York: </address> <publisher> John Wiley & Sons, </publisher> <address> 1996 (2 nd ed.) </address> <month> 11 </month>
Reference-contexts: The idea of building infrastructure simulations is not a new idea: it is done routinely in the electric power industry, for example; and such simulations are typically used as subjects of and elements in control systems <ref> [27] </ref>. We know of no other work using simulations of infrastructure information systems to serve as subjects of control systems for infrastructure survivability research. In this section, we describe briefly our toolkit for building dynamic models of infrastructure systems and their superimposed control systems.
References-found: 27

