URL: http://www.cs.brandeis.edu/~mairson/Seminar/comult.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/PL-oldtalks.html
Root-URL: http://www.cs.brandeis.edu
Email: lincoln@cs.stanford.edu winkler@csl.sri.com  
Title: Constant-Only Multiplicative Linear Logic is NP-Complete  
Author: Patrick Lincoln Timothy Winkler 
Date: August 31, 1992  
Address: Stanford, CA, 94305 Menlo Park, CA  
Affiliation: Computer Science Department Computer Science Laboratory Stanford University SRI International  
Abstract: Linear logic is a resource-aware logic that is based on an analysis of the classical proof rules of contraction (copying) and weakening (throwing away). In this paper we study the decision problem for the multiplicative fragment of linear logic without quantifiers or propositions: the constant-only case. We show that this fragment is np-complete. Earlier work by Max Kanovich showed that propositional multiplicative linear logic is np-complete. With Natarajan Shankar, the first author developed a simplified proof for the propositional case. The structure of this simplified proof is utilized here with a new encoding which uses only constants. The end product is the somewhat surprising result that simply evaluating expressions in true, false, and, and or in multiplicative linear logic (, -, 1, and ?) is np-complete. By con-servativity results not proven here, the np-hardness of larger fragments of linear logic follows. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky. </author> <title> Computational interpretations of linear logic. </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1991. </year> <note> Special Issue on the 1990 Workshop on Math. Found. Prog. Semantics. To appear. </note>
Reference-contexts: However, it is still essentially unknown how to harness the evident power of linear logic for useful purposes. Several interesting attempts have been made, including using linear logic as the basis for a logic programming language [9, 2], and as the basis for a functional programming language <ref> [1, 14] </ref>. The results given here have more direct impact on the logic programming approach, which is still in its infancy.
Reference: [2] <author> J.-M. Andreoli and R. Pareschi. </author> <title> Linear objects: Logical processes with built-in inheritance. </title> <booktitle> In Proc. 7-th International Conference on Logic Programming, </booktitle> <address> Jerusalem, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: However, it is still essentially unknown how to harness the evident power of linear logic for useful purposes. Several interesting attempts have been made, including using linear logic as the basis for a logic programming language <ref> [9, 2] </ref>, and as the basis for a functional programming language [1, 14]. The results given here have more direct impact on the logic programming approach, which is still in its infancy.
Reference: [3] <author> A. Avron. </author> <title> Some properties of linear logic proved by semantic methods. </title> <type> Technical Report 260/92, </type> <institution> Eskenasy Institute of Computer Science, Tel-Aviv University, </institution> <year> 1992. </year>
Reference-contexts: Also, one may generalize these conditions somewhat, replacing all instances of 1 with any arbitrary constant c, and allowing propositions to have different (although fixed) values, where p has value v p , and p ? has value cv p <ref> [3] </ref>. Other related work is given in [17] and [4].
Reference: [4] <author> M. Barr. </author> <title> *-autonomous categories. </title> <booktitle> In: Lecture Notes in Mathematics 752, </booktitle> <publisher> Springer, </publisher> <year> 1979. </year>
Reference-contexts: Also, one may generalize these conditions somewhat, replacing all instances of 1 with any arbitrary constant c, and allowing propositions to have different (although fixed) values, where p has value v p , and p ? has value cv p [3]. Other related work is given in [17] and <ref> [4] </ref>. Since the above is only a necessary condition, there has been a question as to whether some form of simple "truth table" or numerical evaluation function like the above could yield a necessary and sufficient condition for provability of constant multiplicative (comll) expressions.
Reference: [5] <author> G. Bellin. </author> <title> Mechanizing Proof Theory: Resource-Aware Logics and Proof-Transformations to Extract Implicit Information. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1990. </year>
Reference-contexts: Since linear logic treats propositions as resources natively, it has been called "resource-consciousness" <ref> [5] </ref>. Note that since full linear logic is conservative over mll, our encoding remains sound and complete even in larger fragments.
Reference: [6] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co., </publisher> <year> 1979. </year>
Reference-contexts: This does not lead to new results, however, since the complexity of most larger linear logics have already been completely characterized [15]. 2.1 3-Partition We use the np-completeness of 3-Partition: (as stated in Garey+Johnson <ref> [6] </ref> page 224) Instance: Set A of 3m elements, a bound B 2 Z + , and a size s (a) 2 Z + for each a 2 A such that B=4 &lt; s (a) &lt; B=2 and such that P Question: Can A be partitioned into m disjoint sets A <p> and such that P Question: Can A be partitioned into m disjoint sets A 1 ; A 2 ; ; A m such that, for 1 i m, P a2A i s (a) = B (note that each A i must therefore contain exactly 3 elements from A)? Reference: [Garey+Johnson <ref> [6] </ref>, 1975]. Comment: NP-complete in the strong sense. Note that 3-Partition is np-complete in the strong sense, which implies that even when the input is represented in unary, the problem is np-hard.
Reference: [7] <author> J.-Y. Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction When Girard introduced linear logic <ref> [7] </ref>, he brought to light the expressive power which can be gained by restricting the structural rules of contraction fl Supported by AT&T Doctoral Scholarship and SRI. 1 2 (copying) and weakening (throwing away) for propositions. <p> Thus an entire proof, if one exists, can be guessed and checked in nondeterministic polynomial time. Formally, we first state a fundamental theorem originally due to Gi-rard <ref> [7] </ref>, but proven in complete gory detail in [15]. Theorem 1.1 (Cut Elimination) If a sequent is provable in mll, then it is provable in mll without using the Cut rule.
Reference: [8] <author> Jean-Yves Girard. </author> <type> Personal communication. </type> <month> April </month> <year> 1990. </year>
Reference-contexts: (Permutability of -) If there is a proof of ` ; (A -B), then there is a proof of ` ; A; B. 7 The corresponding fact for does not hold, as demonstrated by the following example ` (1 -1); (? ?). 2 comll is np-complete Some time ago, Girard <ref> [8] </ref> developed a necessary condition for the provability of constant multiplicative linear expressions: Lemma 2.1 (Girard) Define a function M from constant multiplicative linear expressions to the integers as follows: M (1) = 1 M (A - B) = M (A) + M (B) If a formula A is provable in
Reference: [9] <author> J.S. Hodas and D. Miller. </author> <title> Logic programming in a fragment of intu-itionistic linear logic. </title> <booktitle> In Proc. 6-th Annual IEEE Symposium on Logic 16 17 in Computer Science, Amsterdam, </booktitle> <pages> pages 32-42. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <month> July </month> <year> 1991. </year> <note> Full paper to appear in Information and Computation. </note>
Reference-contexts: However, it is still essentially unknown how to harness the evident power of linear logic for useful purposes. Several interesting attempts have been made, including using linear logic as the basis for a logic programming language <ref> [9, 2] </ref>, and as the basis for a functional programming language [1, 14]. The results given here have more direct impact on the logic programming approach, which is still in its infancy.
Reference: [10] <author> M. Kanovich. </author> <title> The multiplicative fragment of linear logic is np-complete. Email Message, </title> <year> 1991. </year>
Reference-contexts: An 6 argument for the np-hardness of this fragment was first sketched by Max Kanovich in electronic mail <ref> [10] </ref>. Together with the earlier result [15] that the multiplicatives are in np, Kanovich's result showed that this decision problem is np-complete.
Reference: [11] <author> M. Kanovich. </author> <title> The multiplicative fragment of linear logic is np-complete. </title> <type> Technical Report X-91-13, </type> <institution> Institute for Language, Logic, and Information, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Together with the earlier result [15] that the multiplicatives are in np, Kanovich's result showed that this decision problem is np-complete. Kanovich later updated his argument to show that the "Horn fragment" of the multiplicatives is also np-complete <ref> [11, 12] </ref>, using a novel computational interpretation of this fragment of linear logic. This paper continues this trend by providing a proof that evaluating expressions in true, false, and, and or in multiplicative linear logic is np-complete.
Reference: [12] <author> M. Kanovich. </author> <title> Horn programming in linear logic is np-complete. </title> <booktitle> In Proc. 7-th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Santa Cruz, </address> <pages> pages 200-210. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Together with the earlier result [15] that the multiplicatives are in np, Kanovich's result showed that this decision problem is np-complete. Kanovich later updated his argument to show that the "Horn fragment" of the multiplicatives is also np-complete <ref> [11, 12] </ref>, using a novel computational interpretation of this fragment of linear logic. This paper continues this trend by providing a proof that evaluating expressions in true, false, and, and or in multiplicative linear logic is np-complete.
Reference: [13] <author> S.C. Kleene. </author> <title> Permutability of inferences in Gentzen's calculi LK and LJ. </title> <journal> Memoirs of the AMS, </journal> <year> 1952. </year>
Reference-contexts: The following is one of a large family of permutabilities of inferences. Propositional classical logic allows all possible permutabilities (that is, it never matters which formula one choses to break first in a classical proof), and intuitionistic logic exhibits a few impermutabilities <ref> [13] </ref>. The following permutability of (multiplicative) disjunction holds in linear logic.
Reference: [14] <author> P. Lincoln and J. Mitchell. </author> <title> Operational aspects of linear lambda calculus. </title> <booktitle> In Proc. 7th IEEE Symp. on Logic in Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: However, it is still essentially unknown how to harness the evident power of linear logic for useful purposes. Several interesting attempts have been made, including using linear logic as the basis for a logic programming language [9, 2], and as the basis for a functional programming language <ref> [1, 14] </ref>. The results given here have more direct impact on the logic programming approach, which is still in its infancy.
Reference: [15] <author> P. Lincoln, J. Mitchell, A. Scedrov, and N. Shankar. </author> <title> Decision problems for propositional linear logic. </title> <journal> Annals Pure Appl. Logic, </journal> <volume> 56 </volume> <pages> 239-311, </pages> <year> 1992. </year> <title> Special Volume dedicated to the memory of John Myhill abstract appeared in Proc. </title> <booktitle> 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1990. </year>
Reference-contexts: Girard also added "exponential" unary connectives to linear logic, increasing the expressive power of the logic greatly. In fact, propositional linear logic with exponentials is undecidable <ref> [15] </ref>. Without exponentials, Multiplicative-Additive Linear Logic (mall) is decidable, and is pspace-complete [15]. In this paper we focus on the smaller fragment with only the multiplicative connectives and constants, Constant-Only Multiplicative Linear Logic. <p> Girard also added "exponential" unary connectives to linear logic, increasing the expressive power of the logic greatly. In fact, propositional linear logic with exponentials is undecidable <ref> [15] </ref>. Without exponentials, Multiplicative-Additive Linear Logic (mall) is decidable, and is pspace-complete [15]. In this paper we focus on the smaller fragment with only the multiplicative connectives and constants, Constant-Only Multiplicative Linear Logic. <p> In an earlier paper, the first author showed that the decision problem for Multiplicative Linear Logic (with propositions) mll is in np, by giving (a sketch of) an np algorithm <ref> [15] </ref>. However, the np-hardness of this problem was left open. Here we show that not only is mll np-complete, but the fragment containing no propostions, comll is np-complete as well. <p> An 6 argument for the np-hardness of this fragment was first sketched by Max Kanovich in electronic mail [10]. Together with the earlier result <ref> [15] </ref> that the multiplicatives are in np, Kanovich's result showed that this decision problem is np-complete. Kanovich later updated his argument to show that the "Horn fragment" of the multiplicatives is also np-complete [11, 12], using a novel computational interpretation of this fragment of linear logic. <p> Thus an entire proof, if one exists, can be guessed and checked in nondeterministic polynomial time. Formally, we first state a fundamental theorem originally due to Gi-rard [7], but proven in complete gory detail in <ref> [15] </ref>. Theorem 1.1 (Cut Elimination) If a sequent is provable in mll, then it is provable in mll without using the Cut rule. The above references actually prove this theorem for full linear logic, but the results for the fragments in question here follow immediately. <p> Note that since full linear logic is conservative over mll, our encoding remains sound and complete even in larger fragments. This does not lead to new results, however, since the complexity of most larger linear logics have already been completely characterized <ref> [15] </ref>. 2.1 3-Partition We use the np-completeness of 3-Partition: (as stated in Garey+Johnson [6] page 224) Instance: Set A of 3m elements, a bound B 2 Z + , and a size s (a) 2 Z + for each a 2 A such that B=4 &lt; s (a) &lt; B=2 and
Reference: [16] <author> P.D. Lincoln. </author> <title> Computational Aspects of Linear Logic. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1992. </year>
Reference-contexts: It has been show that this formula is provable in the multiplicative frag ment of linear logic if and only if the 3-Partition problem is solvable <ref> [16] </ref>. The encoding using only constants can be generated from this one by replacing k and c by ?. 11 2.4 Constant-only Encoding We will now describe how 432-Partition instances (which are at the same time 3-Partition instances) can be encoded in comll.
Reference: [17] <author> R.A.G. Seely. </author> <title> Linear logic, </title> <booktitle> *-autonomous categories, and cofree coalge-bras. In: Categories in Computer Science and Logic, </booktitle> <month> June </month> <year> 1989, 1989. </year>
Reference-contexts: Also, one may generalize these conditions somewhat, replacing all instances of 1 with any arbitrary constant c, and allowing propositions to have different (although fixed) values, where p has value v p , and p ? has value cv p [3]. Other related work is given in <ref> [17] </ref> and [4]. Since the above is only a necessary condition, there has been a question as to whether some form of simple "truth table" or numerical evaluation function like the above could yield a necessary and sufficient condition for provability of constant multiplicative (comll) expressions.
References-found: 17

