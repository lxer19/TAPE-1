URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/ned.scan98.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: http://www.cs.toronto.edu
Email: fned,krjg@cs.toronto.edu  
Title: An Interval Hermite-Obreschkoff Method for Computing Rigorous Bounds on the Solution of an Initial Value
Author: N. S. NEDIALKOV AND K. R. JACKSON 
Keyword: initial value problems, ordinary differential equations, interval arithmetic, Taylor series methods, Hermite-Obreschkoff methods, stability.  
Address: Toronto, Ontario, Canada, M5S 3G4.  
Affiliation: Department of Computer Science, University of Toronto,  
Note: 1-22 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Abstract: To date, the only effective approach for computing guaranteed bounds on the solution of an initial value problem (IVP) for an ordinary differential equation (ODE) has been interval methods based on Taylor series. This paper derives a new approach, an interval Hermite-Obreschkoff (IHO) method, for computing such enclosures. Compared to interval Taylor series (ITS) methods, for the same stepsize and order, our IHO scheme has a smaller truncation error, better stability, and requires fewer Taylor coefficients and high-order Jacobians. The stability properties of the ITS and IHO methods are investigated. We show as an important by-product of this analysis that the stability of an interval method is determined not only by the stability function of the underlying formula, as in a standard method for an IVP for an ODE, but also by the associated formula for the truncation error. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. Adams, D. Cordes, and R. Lohner. </author> <title> Enclosure of solutions of ordinary initial value problems and applications. </title> <editor> In E. Adams, R. Ansorge, Chr. Gromann, and H. G. Roos, editors, </editor> <booktitle> Dis-cretization in Differential Equations and Enclosures, </booktitle> <pages> pages 9-28. </pages> <publisher> Akademie-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: enclosure [y j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore [22], [23], [24], Kruckeberg [18], Eijgenraam [9], and Lohner <ref> [1] </ref>, [20], [21]. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. <p> ) = f [i] (^y j ) + J f [i] ; y j ; ^y j (y j ^y j ); (7) where J is the Jacobian of f [i] with its lth row evaluated at y j + il (^y j y j ) for some il 2 <ref> [0; 1] </ref> (l = 1; : : :; n). <p> y j+1 = ^y j + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], [23], [24], Eijgenraam [9], Lohner <ref> [1] </ref>, [20], [21], and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. <p> [i] (^y j+1 ) p X c i h i i j (y j ^y j ) + * j+1 ; (25) where J (0) is the Jacobian of f [i] with its lth row evaluated at y j+1 + il (^y j+1 y j+1 ) for some il 2 <ref> [0; 1] </ref>, J is the Jacobian of f [i] with its lth row evaluated at y j + j il (^y j y j ) for some j il 2 [0; 1] (l = 1; : : : ; n), and * j+1 = (1) q q!p! h j (p + <p> [i] with its lth row evaluated at y j+1 + il (^y j+1 y j+1 ) for some il 2 <ref> [0; 1] </ref>, J is the Jacobian of f [i] with its lth row evaluated at y j + j il (^y j y j ) for some j il 2 [0; 1] (l = 1; : : : ; n), and * j+1 = (1) q q!p! h j (p + q + 1)! Using (25), we show how to compute a better enclosure than [y (0) this end, we denote by J (0) the Jacobian of f [i] evaluated over
Reference: 2. <author> G. Alefeld and J. Herzberger. </author> <title> Introduction to Interval Computations. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: In general, enclosing the inverse of an arbitrary point matrix is more expensive than enclosing the inverse of a floating-point approximation to an orthogonal matrix. However, we can still enclose the inverse of an arbitrary point matrix in O (n 3 ) operations <ref> [2] </ref>. Lohner's method has 2 matrix-matrix multiplications, while the IHO method has 6 matrix-matrix multiplications. To summarize, in the IHO method, we reduce the work for generating Jacobians, but increase the number of matrix operations. Suppose that N n 2 .
Reference: 3. <author> Claus Bendsten and Ole Stauning. FADBAD, </author> <title> a flexible C++ package for automatic differentiation using the forward and backward methods. </title> <type> Technical Report 1996-x5-94, </type> <institution> Department of Mathematical Modelling, Technical University of Denmark, DK-2800, Lyngby, Denmark, </institution> <month> August </month> <year> 1996. </year> <note> FADBAD is available at http://www.imm.dtu.dk/fadbad.html. </note>
Reference-contexts: We measure the work by the number of floating-point operations. However, the time spent on memory operations may not be insignificant for the following reasons. * The packages for automatic differentiation are often implemented through operator overloading <ref> [3] </ref>, [4], [13], which may involve many memory allocations and deallocations. * In generating Taylor coefficients, there may be a significant overhead caused by reading and storing the Taylor coefficients, f [i] , and their Jacobians [11]. 4.3.1. <p> The FADBAD/TADIFF <ref> [3] </ref>, [4] and IADOL-C [16] packages compute @f [i] =@y by differentiating the code list of f [i] (IADOL-C is an interval version of ADOL-C [13]). We also assume that the cost of evaluating @f [i] =@y is roughly n times the cost of evaluating f [i] [11]. <p> VNODE is a set of C++ classes that implement existing and new techniques (including the IHO method) used in validated ODE solving. The underlying interval-arithmetic and automatic differentiation packages are PROFIL/BIAS [17] and FAD-BAD/TADIFF <ref> [3] </ref>, [4], respectively. We compiled VNODE with the GNU C++ compiler version 2.7.2 on a Sun Ultra 2/2170 workstation with an 168 MHz Ultra-SPARC CPU.
Reference: 4. <author> Claus Bendsten and Ole Stauning. TADIFF, </author> <title> a flexible C++ package for automatic differentiation using Taylor series. </title> <type> Technical Report 1997-x5-94, </type> <institution> Department of Mathematical Modelling, Technical University of Denmark, DK-2800, Lyngby, Denmark, </institution> <month> April </month> <year> 1997. </year> <note> TADIFF is available at http://www.imm.dtu.dk/fadbad.html. </note>
Reference-contexts: We measure the work by the number of floating-point operations. However, the time spent on memory operations may not be insignificant for the following reasons. * The packages for automatic differentiation are often implemented through operator overloading [3], <ref> [4] </ref>, [13], which may involve many memory allocations and deallocations. * In generating Taylor coefficients, there may be a significant overhead caused by reading and storing the Taylor coefficients, f [i] , and their Jacobians [11]. 4.3.1. <p> The FADBAD/TADIFF [3], <ref> [4] </ref> and IADOL-C [16] packages compute @f [i] =@y by differentiating the code list of f [i] (IADOL-C is an interval version of ADOL-C [13]). We also assume that the cost of evaluating @f [i] =@y is roughly n times the cost of evaluating f [i] [11]. <p> VNODE is a set of C++ classes that implement existing and new techniques (including the IHO method) used in validated ODE solving. The underlying interval-arithmetic and automatic differentiation packages are PROFIL/BIAS [17] and FAD-BAD/TADIFF [3], <ref> [4] </ref>, respectively. We compiled VNODE with the GNU C++ compiler version 2.7.2 on a Sun Ultra 2/2170 workstation with an 168 MHz Ultra-SPARC CPU.
Reference: 5. <author> G. Birkhoff and R. S. Varga. </author> <title> Discretization errors for well-set Cauchy problems: I. </title> <journal> J. Math. and Phys., </journal> <volume> 44 </volume> <pages> 1-23, </pages> <year> 1965. </year>
Reference: 6. <author> G. F. Corliss and R. Rihm. </author> <title> Validating an a priori enclosure using high-order Taylor series. </title> <editor> In G. Alefeld and A. Frommer, editors, </editor> <booktitle> Scientific Computing, Computer Arithmetic, and Validated Numerics, </booktitle> <pages> pages 228-238. </pages> <publisher> Akademie Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: The stepsize control used is as in the previous subsection. The Taylor series approach [24, pp.100-103], <ref> [6] </ref> for implementing Algorithm I often allows larger stepsizes than the constant enclosure method [9], which has been the most commonly used method for validation [20], [32]. 5.2. Nonlinear Case 5.2.1.
Reference: 7. <author> G. Darboux. </author> <title> Sur les developpements en serie des fonctions d'une seule variable. </title> <journal> J. des Mathematique pures et appl., </journal> <pages> pages 291-312, 1876. </pages> <editor> 3eme serie, t. </editor> <booktitle> II. </booktitle>
Reference-contexts: If we integrate R 1 0 P p;q (s)g (p+q+1) (s) ds repeatedly by parts, we find (1) (p+q) 0 q X (1) i c i g i (1) i=0 p;q This derivation is sometimes attributed to Darboux <ref> [7] </ref> and Hermite [15].
Reference: 8. <author> B. L. Ehle. </author> <title> On Pade approximations to the exponential function and A-stable methods for the numerical solution of initial value problems. </title> <journal> SIAM J. Math. Anal., </journal> <volume> 4 </volume> <pages> 671-680, </pages> <year> 1973. </year>
Reference: 9. <author> P. Eijgenraam. </author> <title> The Solution of Initial Value Problems Using Interval Arithmetic. </title> <publisher> Mathematical Centre Tracts No. 144. Stichting Mathematisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1981. </year>
Reference-contexts: compute a tighter enclosure [y j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore [22], [23], [24], Kruckeberg [18], Eijgenraam <ref> [9] </ref>, and Lohner [1], [20], [21]. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. <p> and (7), y j+1 = ^y j + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], [23], [24], Eijgenraam <ref> [9] </ref>, Lohner [1], [20], [21], and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. <p> The stepsize control used is as in the previous subsection. The Taylor series approach [24, pp.100-103], [6] for implementing Algorithm I often allows larger stepsizes than the constant enclosure method <ref> [9] </ref>, which has been the most commonly used method for validation [20], [32]. 5.2. Nonlinear Case 5.2.1.
Reference: 10. <author> W. H. Enright, T. E. Hull, and B. Lindberg. </author> <title> Comparing numerical methods for stiff systems of ODEs. </title> <journal> BIT, </journal> <volume> 15 </volume> <pages> 10-48, </pages> <year> 1975. </year>
Reference-contexts: In this section p = q (k = p + q + 1). 5.1. Constant Coefficient Problem 5.1.1. Constant Stepsizes We integrated y 0 = 10y; y (0) = 1 (54) on <ref> [0; 10] </ref> with constant stepsizes h = 0:2; 0:3; : : :; 0:8. <p> For "small" stepsizes, h = 0:2; 0:3; 0:4, the error in the IHO method is approximately fl 8;8 =Q 8;8 (10h) 10 5 times the error 16 Table 1. ITS (17) and IHO (8; 8) on y 0 = 10y, y (0) = 1, t 2 <ref> [0; 10] </ref>. h Error Reductions Time ITS IHO IHO/ITS fl 8;8 =Q 8;8 (10h) ITS IHO 0:3 8:5e 48 1:6e 52 1:9e 05 1:9e 05 2:3e 02 1:4e 02 0:5 1:2e 40 1:8e 48 1:5e 08 7:8e 06 1:3e 02 8:8e 03 0:7 4:0e 01 1:3e 45 3:2e 45 3:5e 06 <p> Although on this problem, the IHO method is more expensive per step for "low" orders, including k = 11, we still have savings in time due to the fewer stepsizes taken. 5.2.2. Stiff Detest Problem We integrated the Stiff Detest problem D1 <ref> [10] </ref>, y 0 y 0 y 0 with y (0) = (0; 0; 0) T ; for t 2 [0; 400]: (58) Here, we used the ITS (17) and IHO (8; 8) methods, Taylor series for validation, and a variable stepsize control with tolerances 10 6 ; 10 7 ; :
Reference: 11. <author> Andreas Griewank. </author> <title> ODE solving via automatic differentiation and rational prediction. </title> <editor> In D. F. Griffiths and G. A. Watson, editors, </editor> <booktitle> Numerical Analysis 1995, volume 344 of Pitman Research Notes in Mathematics Series. </booktitle> <publisher> Addison-Wesley Longman Ltd, </publisher> <year> 1995. </year>
Reference-contexts: In standard numerical methods, Hermite-Obreschkoff methods are known to be suitable for stiff systems <ref> [11] </ref>, [12], [34], [35], but in the interval case, they 3 still have a restriction on the stepsize. To develop an interval method for stiff problems, we need not only a formula with a good stability function, but also a better associated formula for the truncation error. <p> The system (24) defines the point (q; p) Hermite-Obreschkoff method <ref> [11] </ref>, [12], [14, p. 277], [34], [35]. If p &gt; 0 and q = 0, then we obtain from (23) an explicit Taylor series method; if p = 0 and q &gt; 0, then (23) becomes an implicit Taylor series formula. <p> following reasons. * The packages for automatic differentiation are often implemented through operator overloading [3], [4], [13], which may involve many memory allocations and deallocations. * In generating Taylor coefficients, there may be a significant overhead caused by reading and storing the Taylor coefficients, f [i] , and their Jacobians <ref> [11] </ref>. 4.3.1. <p> The FADBAD/TADIFF [3], [4] and IADOL-C [16] packages compute @f [i] =@y by differentiating the code list of f [i] (IADOL-C is an interval version of ADOL-C [13]). We also assume that the cost of evaluating @f [i] =@y is roughly n times the cost of evaluating f [i] <ref> [11] </ref>. For simplicity, suppose that f contains only arithmetic operations.
Reference: 12. <author> Andreas Griewank, George F. Corliss, Petra Henneberger, Gabriella Kirlinger, Florain A. Potra, and Hans J. Stetter. </author> <title> High-order stiff ODE solvers via automatic differentiation and rational prediction. </title> <booktitle> In Lecture Notes in Comput. Sci., </booktitle> <volume> 1196, </volume> <pages> pages 114-125. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1997. </year>
Reference-contexts: In standard numerical methods, Hermite-Obreschkoff methods are known to be suitable for stiff systems [11], <ref> [12] </ref>, [34], [35], but in the interval case, they 3 still have a restriction on the stepsize. To develop an interval method for stiff problems, we need not only a formula with a good stability function, but also a better associated formula for the truncation error. <p> The system (24) defines the point (q; p) Hermite-Obreschkoff method [11], <ref> [12] </ref>, [14, p. 277], [34], [35]. If p &gt; 0 and q = 0, then we obtain from (23) an explicit Taylor series method; if p = 0 and q &gt; 0, then (23) becomes an implicit Taylor series formula.
Reference: 13. <author> Andreas Griewank, David Juedes, and Jean Utke. ADOL-C, </author> <title> a package for the automatic differentiation of algorithms written in C/C++. </title> <journal> ACM Trans. Math. Software, </journal> <volume> 22(2) </volume> <pages> 131-167, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: We measure the work by the number of floating-point operations. However, the time spent on memory operations may not be insignificant for the following reasons. * The packages for automatic differentiation are often implemented through operator overloading [3], [4], <ref> [13] </ref>, which may involve many memory allocations and deallocations. * In generating Taylor coefficients, there may be a significant overhead caused by reading and storing the Taylor coefficients, f [i] , and their Jacobians [11]. 4.3.1. <p> The FADBAD/TADIFF [3], [4] and IADOL-C [16] packages compute @f [i] =@y by differentiating the code list of f [i] (IADOL-C is an interval version of ADOL-C <ref> [13] </ref>). We also assume that the cost of evaluating @f [i] =@y is roughly n times the cost of evaluating f [i] [11]. For simplicity, suppose that f contains only arithmetic operations.
Reference: 14. <author> E. Hairer, S. P. Norsett, and G. Wanner. </author> <title> Solving Ordinary Differential Equations I. Nonstiff Problems. </title> <note> Springer-Verlag, 2nd revised edition, </note> <year> 1991. </year>
Reference-contexts: The system (24) defines the point (q; p) Hermite-Obreschkoff method [11], [12], <ref> [14, p. 277] </ref>, [34], [35]. If p &gt; 0 and q = 0, then we obtain from (23) an explicit Taylor series method; if p = 0 and q &gt; 0, then (23) becomes an implicit Taylor series formula.
Reference: 15. <author> Ch. Hermite. Extrait d'une lettre de M. Ch. Hermite a M. Borchardt sur la formule d'interpolation de Lagrange. J. de Crelle, 84(70):70, 1878. Oeuvres, tome III, p. </author> <month> 432-443. </month>
Reference-contexts: In this paper, we develop an interval Hermite-Obreschkoff (IHO) method for computing tight enclosures of the solution. Validated methods based on the Hermite-Obreschkoff formula <ref> [15] </ref>, [27], [28] have not been derived or considered before. Although Taylor series methods can be viewed as a special case of the more general Hermite-Obreschkoff methods, the method we propose is conceptually different from the interval Taylor series (ITS) methods. <p> If we integrate R 1 0 P p;q (s)g (p+q+1) (s) ds repeatedly by parts, we find (1) (p+q) 0 q X (1) i c i g i (1) i=0 p;q This derivation is sometimes attributed to Darboux [7] and Hermite <ref> [15] </ref>.
Reference: 16. <author> Ron Van Iwaarden. IADOL-C, </author> <type> personal communications, </type> <year> 1997. </year>
Reference-contexts: The FADBAD/TADIFF [3], [4] and IADOL-C <ref> [16] </ref> packages compute @f [i] =@y by differentiating the code list of f [i] (IADOL-C is an interval version of ADOL-C [13]). We also assume that the cost of evaluating @f [i] =@y is roughly n times the cost of evaluating f [i] [11].
Reference: 17. <author> O. Knuppel. </author> <title> PROFIL/BIAS a fast interval library. </title> <booktitle> Computing, </booktitle> <address> 53(3-4):277-287, </address> <year> 1994. </year> <note> PROFIL/BIAS is available at http://www.ti3.tu-harburg.de/Software/PROFIL/Profil.texinfo 1.html. </note>
Reference-contexts: VNODE is a set of C++ classes that implement existing and new techniques (including the IHO method) used in validated ODE solving. The underlying interval-arithmetic and automatic differentiation packages are PROFIL/BIAS <ref> [17] </ref> and FAD-BAD/TADIFF [3], [4], respectively. We compiled VNODE with the GNU C++ compiler version 2.7.2 on a Sun Ultra 2/2170 workstation with an 168 MHz Ultra-SPARC CPU.
Reference: 18. <author> F. Kruckeberg. </author> <title> Ordinary differential equations. In Eldon Hansen, editor, </title> <booktitle> Topics in Interval Analysis, </booktitle> <pages> pages 91-97. </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> 1969. </year> <month> 22 </month>
Reference-contexts: Algorithm II: compute a tighter enclosure [y j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore [22], [23], [24], Kruckeberg <ref> [18] </ref>, Eijgenraam [9], and Lohner [1], [20], [21]. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term.
Reference: 19. <author> J. D. Lambert. </author> <title> Computational Methods in Ordinary Differential Equations. </title> <publisher> John Wiley & Sons, </publisher> <year> 1977. </year>
Reference-contexts: If z is complex with Re (z) &lt; 0, the following results are known: 11 * if p = q, then fi fi * if q = p + 1 or q = p + 2, then fi fi fi fi (see also <ref> [19, pp. 236-237] </ref>). Consider (41) and (45). For the ITS method, fi fi fi &lt; 1 when h is in the stability region of T k1 (z).
Reference: 20. <author> Rudolf J. Lohner. </author> <title> Einschlieung der Losung gewohnlicher Anfangs- und Randwertaufgaben und Anwendungen. </title> <type> PhD thesis, </type> <institution> Universitat Karlsruhe, </institution> <year> 1988. </year>
Reference-contexts: [y j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore [22], [23], [24], Kruckeberg [18], Eijgenraam [9], and Lohner [1], <ref> [20] </ref>, [21]. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. <p> j+1 = ^y j + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], [23], [24], Eijgenraam [9], Lohner [1], <ref> [20] </ref>, [21], and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. Here, we briefly describe Lohner's method for reducing it. 2.1. <p> The stepsize control used is as in the previous subsection. The Taylor series approach [24, pp.100-103], [6] for implementing Algorithm I often allows larger stepsizes than the constant enclosure method [9], which has been the most commonly used method for validation <ref> [20] </ref>, [32]. 5.2. Nonlinear Case 5.2.1. Van der Pol's equation We integrated Van der Pol's equation, written as a system, y 0 y 0 1 )y 2 y 1 ; (55) with y (0) = (2; 0) T ; (56) for t 2 [0; 20], where = 5. <p> Nonlinear Case 5.2.1. Van der Pol's equation We integrated Van der Pol's equation, written as a system, y 0 y 0 1 )y 2 y 1 ; (55) with y (0) = (2; 0) T ; (56) for t 2 <ref> [0; 20] </ref>, where = 5. We used the ITS (11) and IHO (5; 5) methods and tolerances 10 7 ; 10 8 ; : : : ; 10 12 .
Reference: 21. <author> Rudolph J. Lohner. </author> <title> Enclosing the solutions of ordinary initial and boundary value problems. </title> <editor> In Edgar W. Kaucher, Ulrich W. Kulisch, and Christian Ullrich, editors, </editor> <booktitle> Computer Arithmetic: Scientific Computation and Programming Languages, </booktitle> <pages> pages 255-286. </pages> <booktitle> Wiley-Teubner Series in Computer Science, </booktitle> <address> Stuttgart, </address> <year> 1987. </year>
Reference-contexts: j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore [22], [23], [24], Kruckeberg [18], Eijgenraam [9], and Lohner [1], [20], <ref> [21] </ref>. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. <p> = ^y j + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], [23], [24], Eijgenraam [9], Lohner [1], [20], <ref> [21] </ref>, and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. Here, we briefly describe Lohner's method for reducing it. 2.1. <p> Usually, a good choice for A j+1 is the Q-factor from the QR-factorization of b A j+1 = m ([S j ]A j ). A detailed explanation of the reasons for this and other choices for A j+1 can be found in <ref> [21] </ref> and [25]. 3. Derivation of the Interval Hermite-Obreschkoff Method 3.1.
Reference: 22. <author> Ramon E. Moore. </author> <title> The automatic analysis and control of error in digital computation based on the use of interval numbers. </title> <editor> In Louis B. Rall, editor, </editor> <booktitle> Error in Digital Computation, </booktitle> <volume> Vol. I, </volume> <pages> pages 61-130. </pages> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1965. </year>
Reference-contexts: ; t j+1 ]; Algorithm II: compute a tighter enclosure [y j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore <ref> [22] </ref>, [23], [24], Kruckeberg [18], Eijgenraam [9], and Lohner [1], [20], [21]. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. <p> Then from (5) and (7), y j+1 = ^y j + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore <ref> [22] </ref>, [23], [24], Eijgenraam [9], Lohner [1], [20], [21], and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24].
Reference: 23. <author> Ramon E. Moore. </author> <title> Automatic local coordinate transformations to reduce the growth of error bounds in interval computation of solutions of ordinary differential equations. </title> <editor> In Louis B. Rall, editor, </editor> <booktitle> Error in Digital Computation, </booktitle> <volume> Vol. II, </volume> <pages> pages 103-140. </pages> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1965. </year>
Reference-contexts: t j+1 ]; Algorithm II: compute a tighter enclosure [y j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore [22], <ref> [23] </ref>, [24], Kruckeberg [18], Eijgenraam [9], and Lohner [1], [20], [21]. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. <p> Then from (5) and (7), y j+1 = ^y j + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], <ref> [23] </ref>, [24], Eijgenraam [9], Lohner [1], [20], [21], and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24].
Reference: 24. <author> Ramon E. Moore. </author> <title> Interval Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1966. </year>
Reference-contexts: j+1 ]; Algorithm II: compute a tighter enclosure [y j+1 ] [~y j ], for which y (t j+1 ; t 0 ; [y 0 ]) [y j+1 ] : Significant developments in the area of validated solutions of IVPs for ODEs are the interval methods of Moore [22], [23], <ref> [24] </ref>, Kruckeberg [18], Eijgenraam [9], and Lohner [1], [20], [21]. All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. <p> All these methods are based on Taylor series. One reason for the popularity of the Taylor series approach is the simple form of the error term. In addition, the Taylor series coefficients can be readily generated by automatic differentiation <ref> [24, pp. 107-130] </ref>, the order of the method can be changed easily by adding or deleting Taylor series terms, and the stepsize can be changed without recomputing Taylor series coefficients. In this paper, we develop an interval Hermite-Obreschkoff (IHO) method for computing tight enclosures of the solution. <p> from (5) and (7), y j+1 = ^y j + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], [23], <ref> [24] </ref>, Eijgenraam [9], Lohner [1], [20], [21], and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. <p> series methods of Moore [22], [23], <ref> [24] </ref>, Eijgenraam [9], Lohner [1], [20], [21], and Rihm [30] (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. Here, we briefly describe Lohner's method for reducing it. 2.1. <p> If N is the number of these operations, and c f is the ratio of multiplications and divisions in N , then to generate k 1 coefficients f [i] (i = 1; : : : ; k 1), we need c f N k 2 +O (N k) operations <ref> [24, pp. 111-112] </ref>; to generate k 1 Jacobians in an ITS method, we use c f nN k 2 + O (nN k) (52) arithmetic operations [26]. Let p = q (k = p + q + 1). <p> In the next two examples, we compare the ITS and IHO methods with a variable stepsize control and our version of a Taylor series method for validating existence and uniqueness of the solution [26]. The stepsize control used is as in the previous subsection. The Taylor series approach <ref> [24, pp.100-103] </ref>, [6] for implementing Algorithm I often allows larger stepsizes than the constant enclosure method [9], which has been the most commonly used method for validation [20], [32]. 5.2. Nonlinear Case 5.2.1.
Reference: 25. <author> N. S. Nedialkov, K. R. Jackson, and G. F. Corliss. </author> <title> Validated solutions of initial value problems for ordinary differential equations. </title> <note> To appear in Applied Mathematics and Computation. Available at http://www.cs.toronto.edu/NA/reports.html. </note>
Reference-contexts: t 0 ; [y 0 ]) [y j ] ; for j = 1; : : : ; m: Usually, validated methods for IVPs for ODEs are one-step methods, where the (j + 1)st step consists of two phases, which we refer to as Algorithm I and Algo rithm II <ref> [25] </ref>: Algorithm I: validate existence and uniqueness of the solution in [t j ; t j+1 ] and compute an enclosure [~y j ] such that y (t; t j ; [y j ]) [~y j ] ; for all t 2 [t j ; t j+1 ]; Algorithm II: compute <p> f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], [23], [24], Eijgenraam [9], Lohner [1], [20], [21], and Rihm [30] (see also <ref> [25] </ref>). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. Here, we briefly describe Lohner's method for reducing it. 2.1. <p> Usually, a good choice for A j+1 is the Q-factor from the QR-factorization of b A j+1 = m ([S j ]A j ). A detailed explanation of the reasons for this and other choices for A j+1 can be found in [21] and <ref> [25] </ref>. 3. Derivation of the Interval Hermite-Obreschkoff Method 3.1. <p> Constant Coefficient Problem 5.1.1. Constant Stepsizes We integrated y 0 = 10y; y (0) = 1 (54) on [0; 10] with constant stepsizes h = 0:2; 0:3; : : :; 0:8. To avoid possible stepsize reductions in Algorithm I <ref> [25] </ref>, we computed a priori enclosures on each step by [~y j ] = [e 10h y j ; y j ]: In Algorithm II, we used the ITS (17) and IHO (8; 8) methods.
Reference: 26. <author> Nedialko Stoyanov Nedialkov. </author> <title> Computing Rigorous Bounds on the Solution of an Initial Value Problem for an Ordinary Differential Equation. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, Toronto, Canada, M5S 3G4. </institution> <note> Available at http://www.cs.toronto.edu/NA/reports.html. </note>
Reference-contexts: In the nonlinear case, we must enclose the solution of a nonlinear system (see x3.2). Computing such an enclosure normally introduces additional errors. It can be shown that if the predicted enclosure is computed with an ITS method of order (q + 1), then these errors are sufficiently small <ref> [26] </ref>. As in the constant coefficient case, the error propagation in the IHO method is similar to that of Lohner's method, but the local error term in the former is much smaller than in the latter [26]. <p> an ITS method of order (q + 1), then these errors are sufficiently small <ref> [26] </ref>. As in the constant coefficient case, the error propagation in the IHO method is similar to that of Lohner's method, but the local error term in the former is much smaller than in the latter [26]. Furthermore, the IHO method requires roughly half the work for generating high order Jacobians, the computation of which is usually the most expensive part in the IHO and ITS methods (see x4.3). In x5.2, we show numerical results comparing the two methods on two nonlinear problems. 4.3. <p> 1 coefficients f [i] (i = 1; : : : ; k 1), we need c f N k 2 +O (N k) operations [24, pp. 111-112]; to generate k 1 Jacobians in an ITS method, we use c f nN k 2 + O (nN k) (52) arithmetic operations <ref> [26] </ref>. Let p = q (k = p + q + 1). <p> In x5.2.1, we study empirically the amount of work per step on Van der Pol's equation. 5. Numerical Results The numerical results in this section are produced with the VNODE (Validated Numerical ODE) package <ref> [26] </ref>, which we are developing at the University of Toronto. VNODE is a set of C++ classes that implement existing and new techniques (including the IHO method) used in validated ODE solving. The underlying interval-arithmetic and automatic differentiation packages are PROFIL/BIAS [17] and FAD-BAD/TADIFF [3], [4], respectively. <p> As h increases beyond 0:4, the ITS method produces enclosures with rapidly increasing widths, while the IHO method computes good enclosures for those stepsizes. 5.1.2. Variable Stepsizes We integrated (54) for t 2 [0; 100] with a simple step-size selection scheme <ref> [26] </ref> based on controlling the width of the enclosure of the truncation error per unit step. We used an absolute tolerance of 10 10 . In Figure 2, we plot the stepsizes against the step number for the two methods. <p> This observation confirms the conclusions in x4.1. In the next two examples, we compare the ITS and IHO methods with a variable stepsize control and our version of a Taylor series method for validating existence and uniqueness of the solution <ref> [26] </ref>. The stepsize control used is as in the previous subsection. The Taylor series approach [24, pp.100-103], [6] for implementing Algorithm I often allows larger stepsizes than the constant enclosure method [9], which has been the most commonly used method for validation [20], [32]. 5.2. Nonlinear Case 5.2.1.
Reference: 27. <author> N. Obreschkoff. </author> <title> Neue Quadraturformeln. </title> <journal> Abh. Preuss. Akad. Wiss. Math. Nat. Kl., </journal> <volume> 4, </volume> <year> 1940. </year>
Reference-contexts: In this paper, we develop an interval Hermite-Obreschkoff (IHO) method for computing tight enclosures of the solution. Validated methods based on the Hermite-Obreschkoff formula [15], <ref> [27] </ref>, [28] have not been derived or considered before. Although Taylor series methods can be viewed as a special case of the more general Hermite-Obreschkoff methods, the method we propose is conceptually different from the interval Taylor series (ITS) methods.
Reference: 28. <author> N. Obreschkoff. </author> <title> Sur le quadrature mecaniques. </title> <journal> Spisanie Bulgar. Akad. Nauk. (Journal of the Bulgarian Academy of Sciences), </journal> <volume> 65 </volume> <pages> 191-289, </pages> <year> 1942. </year>
Reference-contexts: In this paper, we develop an interval Hermite-Obreschkoff (IHO) method for computing tight enclosures of the solution. Validated methods based on the Hermite-Obreschkoff formula [15], [27], <ref> [28] </ref> have not been derived or considered before. Although Taylor series methods can be viewed as a special case of the more general Hermite-Obreschkoff methods, the method we propose is conceptually different from the interval Taylor series (ITS) methods.
Reference: 29. <author> A. Ralston. </author> <title> A First Course in Numerical Analysis. </title> <publisher> McGraw-Hill, </publisher> <address> New York, 2nd edition, </address> <year> 1978. </year>
Reference-contexts: However, R p;q (z) is the Pade rational approximation to e z (see for example <ref> [29] </ref>). If z is complex with Re (z) &lt; 0, the following results are known: 11 * if p = q, then fi fi * if q = p + 1 or q = p + 2, then fi fi fi fi (see also [19, pp. 236-237]).
Reference: 30. <author> Robert Rihm. </author> <title> On a class of enclosure methods for initial value problems. </title> <journal> Computing, </journal> <volume> 53 </volume> <pages> 369-377, </pages> <year> 1994. </year>
Reference-contexts: + i=1 j f [i] (^y j ) + h k + I + i=1 j J f [i] ; y j ; ^y j ) This formula is the basis of the interval Taylor series methods of Moore [22], [23], [24], Eijgenraam [9], Lohner [1], [20], [21], and Rihm <ref> [30] </ref> (see also [25]). If we evaluate (8) in interval arithmetic, we can often obtain enclosures with smaller widths than in (6). A serious problem that may occur in this evaluation is the wrapping effect [24]. Here, we briefly describe Lohner's method for reducing it. 2.1.
Reference: 31. <author> J. Rohn. </author> <title> NP-hardness results for linear algebraic problems with interval data. </title> <editor> In J. Herzberger, editor, </editor> <booktitle> Topics in Validated Computations, volume 5 of Studies in Computational Mathematics, </booktitle> <pages> pages 463-471, </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: However, it is easier to compute the enclosure of the inverse of a point matrix than of an interval matrix. In fact, computing an enclosure of an interval matrix is NP hard in general <ref> [31] </ref>. 9 4. If we intersect the computed enclosure as in (36), it is important to choose ^y j+1 2 [y j+1 ].
Reference: 32. <author> Ole Stauning. </author> <title> Automatic validation of numerical solutions. </title> <type> Technical Report IMM-PHD-1997-36, </type> <institution> IMM, Lyngby, Denmark, </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: The stepsize control used is as in the previous subsection. The Taylor series approach [24, pp.100-103], [6] for implementing Algorithm I often allows larger stepsizes than the constant enclosure method [9], which has been the most commonly used method for validation [20], <ref> [32] </ref>. 5.2. Nonlinear Case 5.2.1. Van der Pol's equation We integrated Van der Pol's equation, written as a system, y 0 y 0 1 )y 2 y 1 ; (55) with y (0) = (2; 0) T ; (56) for t 2 [0; 20], where = 5.
Reference: 33. <author> R. S. Varga. </author> <title> On higher order stable implicit methods for solving parabolic differential equations. </title> <journal> J. Math. and Phys., </journal> <volume> 40 </volume> <pages> 220-231, </pages> <year> 1961. </year>
Reference-contexts: Consider (41) and (45). For the ITS method, fi fi fi &lt; 1 when h is in the stability region of T k1 (z). However, for the IHO method, fi fi h &gt; 0 when q p <ref> [33] </ref>, and fi fi fi ! 0 as h ! 1 when q &gt; p.
Reference: 34. <author> G. Wanner. </author> <title> On the integration of stiff differential equations. </title> <type> Technical report, </type> <institution> Universite de Geneve, Section de Mathematique, </institution> <address> 1211 Geneve 24th, Suisse, </address> <month> October </month> <year> 1976. </year>
Reference-contexts: In standard numerical methods, Hermite-Obreschkoff methods are known to be suitable for stiff systems [11], [12], <ref> [34] </ref>, [35], but in the interval case, they 3 still have a restriction on the stepsize. To develop an interval method for stiff problems, we need not only a formula with a good stability function, but also a better associated formula for the truncation error. <p> The system (24) defines the point (q; p) Hermite-Obreschkoff method [11], [12], [14, p. 277], <ref> [34] </ref>, [35]. If p &gt; 0 and q = 0, then we obtain from (23) an explicit Taylor series method; if p = 0 and q &gt; 0, then (23) becomes an implicit Taylor series formula.
Reference: 35. <author> G. Wanner. </author> <title> On the integration of stiff differential equations. In Proceedings of the Colloquium on Numerical Analysis, </title> <journal> volume 37 of Internat. Ser. Numer. Math., </journal> <pages> pages 209-226, </pages> <address> Basel, 1977. </address> <publisher> Birkhauser. </publisher>
Reference-contexts: In standard numerical methods, Hermite-Obreschkoff methods are known to be suitable for stiff systems [11], [12], [34], <ref> [35] </ref>, but in the interval case, they 3 still have a restriction on the stepsize. To develop an interval method for stiff problems, we need not only a formula with a good stability function, but also a better associated formula for the truncation error. An outline of this paper follows. <p> The system (24) defines the point (q; p) Hermite-Obreschkoff method [11], [12], [14, p. 277], [34], <ref> [35] </ref>. If p &gt; 0 and q = 0, then we obtain from (23) an explicit Taylor series method; if p = 0 and q &gt; 0, then (23) becomes an implicit Taylor series formula.
References-found: 35

