URL: http://www.cs.rutgers.edu/~minsky/papers/reconfig-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Email: fminsky,ungurean,wenhui,junzhangg@cs.rutgers.edu  
Title: Building Reconfiguration Primitives into the Law of a System sequence of primitives from S C
Author: Naftaly H. Minsky Victoria Ungureanu Wenhui Wang Junbiao Zhang 
Note: Any reconfiguration in C can be carried out by a  
Address: New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  
Abstract: Given a certain class C of reconfigurations, deemed to be potentially important for a given system, we define a reconfiguration suite S C to be a set of primitive operations that satisfy the following conditions: We describe a mechanism for implementing such reconfiguration suites, for a system that operates under law-governed interaction (LGI), currently supported by an experimental toolkit called Moses. LGI is a mode of interaction between the members of a given group (or system) of agents, which is governed by an explicit and strictly enforced set of rules, called the law of this group. The existence of such a law under LGI provides us with an architectural model of the system, which can be made to include the definition of reconfiguration suites. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Kramer and J. Magee. </author> <title> The evolving philosophers problem: Dynamic change management. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(11) </volume> <pages> 1293-1306, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: CCR-9308773 problematic. Programmed reconfigurations are frequently inapplicable, because of the difficulty to predict precisely how a system will need to be changed, and ad-hoc reconfiguration are difficult to carry out reliably, and generally involve massive disruptions in the normal operation of the system <ref> [1] </ref>. <p> This is useful, in particular, when repairing bugs or introducing new functionalities. We will discuss here such code replacement using the client-server model from <ref> [1] </ref> as an example. Under this model, the system consists of a number of clients and servers; the problem is to update the code of a given server s without losing any requests from its clients. The solution introduced here involves only the server whose program is being modified. <p> This is done, essentially, by having the controller of each server absorb the requests arriving to it while the update of its program is in progress. The solution presented in <ref> [1] </ref> for this problem passivates 5 all the clients that might send messages to s, even when only independent 6 transactions 5 A node is in a passive state if (1) it is not currently engaged in a transaction that it initiated, (2) it will not initiate new transactions. 6 An
Reference: [2] <author> N.H. Minsky. </author> <title> Coordination and trust in open distributed systems. </title> <type> Technical report, </type> <institution> Rutgers University, LCSR, </institution> <month> October </month> <year> 1995. </year> <note> (available through http://www.cs.rutgers.edu/~minsky/index.html). </note>
Reference-contexts: And to satisfy condition (2) above, one should try to insert an agent into a ring without passivating any other member of it. We describe here a mechanism for implementing such reconfiguration suites, for a system that operates under law-governed interaction (LGI) <ref> [2] </ref>, currently supported by an experimental toolkit called Moses. LGI is a mode of interaction between the members of a given group (or system) of agents, which is governed by an explicit and strictly enforced set of rules, called the law of this group. <p> In particular, the token would circulate along the ring even if any numbers of agents on it fail | provided the controllers do not fail. The fault tolerance of LGI under failures of controllers has been discussed in <ref> [2] </ref>. Initially: The group consists of a collection of agents organized into a ring via a term next (N) in the CS of each agent. Exactly one of these agents has the term token in its CS.
Reference: [3] <author> N.H. Minsky. </author> <title> The imposition of protocols over open distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1991. </year>
Reference-contexts: In general, however, the semantics of attributes is defined, for a given group, by its law. For instance, in a token-ring group to be discussed later, each member x 3 However, as explained in <ref> [3] </ref>, we intend to provide means for the global changing of R would have an attribute next (x1) that defines x1 to be the next member on the ring. Also, in this particular group, the attribute token in CS x would indicate that agent x has the token. <p> For the details of this formulation the reader is referred to <ref> [3] </ref>. 2.4 The Distributed Enforcement Mech anism The law is enforced, in principle, as follows: There is a controller associated with each member of a given group, logically placed between the agent and the com-munications medium, as is illustrated in Figure 1.
Reference: [4] <author> J.M. Andreoli, H. Gallaire, and R. Pareschi. </author> <title> Rule-based object coordination. </title> <editor> In P. Ciancarini, O. Nierstrasz, and A. Yonezawa, editors, </editor> <booktitle> Object-Based Models and Languages for Concurrent Systems, Lecture Notes in Computer Science, </booktitle> <pages> pages 1-13. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <title> Number 924. </title>
Reference-contexts: That is, it prescribes what should be done in response to certain events, but it cannot initiate any action on its own. To provide our model with certain pro-active capabilities, in some analogy with, but weaker than, the pro-active capabilities proposed by Andreoli et al. <ref> [4] </ref>, we now introduce a concept of "obligation." This concept is broadly based on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky [5], and on the work of Maibaum [6] and of Feather [7], on formal specification of temporal constraints.
Reference: [5] <author> N.H. Minsky and A. Lockman. </author> <title> Ensuring integrity by adding obligations to privileges. </title> <booktitle> In Proceedings of the 8th International Conference on Software Engineering, </booktitle> <pages> pages 92-102, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: with certain pro-active capabilities, in some analogy with, but weaker than, the pro-active capabilities proposed by Andreoli et al. [4], we now introduce a concept of "obligation." This concept is broadly based on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky <ref> [5] </ref>, and on the work of Maibaum [6] and of Feather [7], on formal specification of temporal constraints. For a complete treatment of this concept the reader is referred to [8].
Reference: [6] <author> S.J.H. Kent, T.S.E. Maibaum, and W.J. Quirk. </author> <title> Formally specifying temporal constraints and error recovery. </title> <booktitle> In Proceedings of the IEEE Int. Symp. on Requirement Engineering, </booktitle> <pages> pages 208-215, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: with, but weaker than, the pro-active capabilities proposed by Andreoli et al. [4], we now introduce a concept of "obligation." This concept is broadly based on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky [5], and on the work of Maibaum <ref> [6] </ref> and of Feather [7], on formal specification of temporal constraints. For a complete treatment of this concept the reader is referred to [8].
Reference: [7] <author> Feather Martin S. </author> <title> An implementation of bounded obligations. </title> <booktitle> In Proceedings of the 8th Knowladge Based Software Engineering Conference, </booktitle> <pages> pages 114-122, </pages> <address> Chicago, Ill, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: the pro-active capabilities proposed by Andreoli et al. [4], we now introduce a concept of "obligation." This concept is broadly based on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky [5], and on the work of Maibaum [6] and of Feather <ref> [7] </ref>, on formal specification of temporal constraints. For a complete treatment of this concept the reader is referred to [8].
Reference: [8] <author> J. Leichter and N.H. Minsky. </author> <title> Obligations in law-governed distributed systems. </title> <type> Technical report, </type> <institution> Rutgers University, LCSR, </institution> <year> 1995. </year>
Reference-contexts: For a complete treatment of this concept the reader is referred to <ref> [8] </ref>.
Reference: [9] <author> G. Etzkorn. </author> <title> Change programming in distributed systems. </title> <booktitle> In Intl. Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 140-151, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Note that once agent y is thus inserted into the ring, it is guaranteed to function correctly as a member of this ring, independently of the program that drives it. Discussion Note that unlike in <ref> [9] </ref>, both primitives in this suite are carried out without stopping the normal operation of any member of the ring. Moreover, the coordinator is not required to have any knowledge of the structure of the ring in order to invoke the change primitives on it.
References-found: 9

