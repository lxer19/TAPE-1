URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-93-16.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Abstract: Non-Tree Routing Bernard A. McCoy and Gabriel Robins Technical Report No. CS-93-16 April 12, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Alpert, T. C. Hu, J. H. Huang, and A. B. Kahng, </author> <title> A Direct Combination of the Prim and Dijkstra Constructions for Improved Performance-Driven Global Routing, </title> <booktitle> in Proc. IEEE Intl. Symp. on Circuits and Systems (to appear), </booktitle> <address> Chicago, IL, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Cong et al. have proposed finding minimum spanning trees with bounded source-sink path-length [8] by simultaneously minimizing both tree cost and the tree radius; another cost-radius tradeoff was achieved by Alpert et al. <ref> [1] </ref>. Boese et al. [5] have developed a "critical sink" routing approach which significantly reduces delay to specified sinks, thereby exploiting the critical-path information that is implicitly available during iterative timing-driven layout.
Reference: [2] <author> T. Barrera, J. Griffith, , G. Robins, and T. Zhang, </author> <title> Narrowing the Gap: Near-Optimal Steiner Trees in Polynomial Time, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf. (to appear), </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: To find the Steiner tree over the net (Step 1 of the SLDRG algorithm of Figure 6), an efficient implementation of the Iterated 1-Steiner algorithm of Kahng and Robins may be used <ref> [2] </ref> [3] [13]. algorithm) on a random net of 10 pins.
Reference: [3] <author> T. Barrera, J. Griffith, S. A. McKee, G. Robins, and T. Zhang, </author> <title> Toward a Steiner Engine: Enhanced Serial and Parallel Implementations of the Iterated 1-Steiner Algorithm, </title> <booktitle> in Great Lakes Symposium on VLSI, </booktitle> <address> Kalamazoo, MI, </address> <month> March </month> <year> 1993, </year> <pages> pp. 90-94. </pages>
Reference-contexts: To find the Steiner tree over the net (Step 1 of the SLDRG algorithm of Figure 6), an efficient implementation of the Iterated 1-Steiner algorithm of Kahng and Robins may be used [2] <ref> [3] </ref> [13]. algorithm) on a random net of 10 pins.
Reference: [4] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> Towards Optimal Routing Trees, </title> <booktitle> in to appear in ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Boese et al. [5] have developed a "critical sink" routing approach which significantly reduces delay to specified sinks, thereby exploiting the critical-path information that is implicitly available during iterative timing-driven layout. Recently, Boese et al. <ref> [4] </ref> have identified and exploited a high-quality, algorithmically tractable model of interconnect delay, based on an upper bound [19] for Elmore delay. An implicit premise of previous methods is that a routing topology must correspond to a tree (i.e., an acyclic topology). <p> The delay performance of our method is competitive with the best existing tree constructions <ref> [4] </ref>, yet our average wirelength is superior as compared with such previous methods. Our algorithms are efficient, and our basic approaches are amenable to numerous extensions of the routing design problem, such as Steiner graph routing, critical sink routing, and wire sizing. <p> Note that the ORG problem generalizes the Optimal Routing Tree (ORT) problem of <ref> [4] </ref>, which corresponds to the special case where G is a tree; this special case is studied extensively in [4] [5]. The case where certain sinks in the ORG are identified as critical is discussed in Section 5.1 below. <p> Note that the ORG problem generalizes the Optimal Routing Tree (ORT) problem of <ref> [4] </ref>, which corresponds to the special case where G is a tree; this special case is studied extensively in [4] [5]. The case where certain sinks in the ORG are identified as critical is discussed in Section 5.1 below. The specific routing graph G that solves the ORG problem will depend on the model used to estimate the delay t (G). <p> Unfortunately, SPICE delay is too computationally prohibitive to evaluate during the routing phase of layout, and we are thus forced to seek other alternatives. Another delay model is the Elmore delay formula [11], which was shown in <ref> [4] </ref> to have both high accuracy and fidelity in comparison with SPICE. The Elmore delay is defined as follows. Given routing tree T (N ) 5 rooted at n 0 , let e i denote the edge from pin n i to its parent. <p> Furthermore, H3 improves upon the MST often than does H1 (for nets of 10, 20 and 30 pins). We also investigated how LDRG routings fare against trees with best known delay characteristics, namely Elmore Routing Trees (ERTs), which were recently found to be near-optimal by Boese et al. <ref> [4] </ref>. Table 6 provides the relative performance of the ERT to the MST. Using Table 5 we can compare heuristics H2 and H3 to ERT. The data indicates that H3 beats ERT with respect to wirelength (for 20 pin nets H3 has 20% wirelength penalty over MST, where ERT's 26%). <p> When considering only the cases when ERT-based LDRG wins over ERT, we can realize routing graphs with as much as 4% improvement over ERTs on average. This implies that there exist non-tree routings which can beat the optimal tree routing (since is was shown by Boese et al. <ref> [4] </ref> that the average delay of ERTs is only 2% away from optimal). 13 5 Conclusions and Future Directions In this paper we have explored the consequences of abandoning an implicit restriction common to previous routing formulations, namely the insistence on a strictly acyclic (tree) routing topology. <p> The delay performance of our method is competitive with the best existing tree constructions <ref> [4] </ref>, yet our average wirelength is significantly better. Our methods are highly efficient, and extend to various routing regimes. <p> The CSORG problem for the special case where G is a tree is studied in <ref> [4] </ref>. 5.2 Wire Sizing Having two separate parallel wires of width w running between two pins is equivalent to having a single wire of width 2w. Some of the wires added by our algorithms may therefore be "merged" with adjacent wires to yield wider wires.
Reference: [5] <author> K. D. Boese, A. B. Kahng, and G. Robins, </author> <title> High-Performance Routing Trees With Identified Critical Sinks, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf. (to appear), </booktitle> <address> Dal-las, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Cong et al. have proposed finding minimum spanning trees with bounded source-sink path-length [8] by simultaneously minimizing both tree cost and the tree radius; another cost-radius tradeoff was achieved by Alpert et al. [1]. Boese et al. <ref> [5] </ref> have developed a "critical sink" routing approach which significantly reduces delay to specified sinks, thereby exploiting the critical-path information that is implicitly available during iterative timing-driven layout. <p> Note that the ORG problem generalizes the Optimal Routing Tree (ORT) problem of [4], which corresponds to the special case where G is a tree; this special case is studied extensively in [4] <ref> [5] </ref>. The case where certain sinks in the ORG are identified as critical is discussed in Section 5.1 below. The specific routing graph G that solves the ORG problem will depend on the model used to estimate the delay t (G). <p> In other words, the ORG problem concentrates on net-dependent objectives, rather than path-dependent objectives based on pre-defined critical paths. Following the formulation of <ref> [5] </ref>, a path-dependent variant of the ORG problem can be defined as follows. For each sink n i in N we can associate a criticality ff i , reflecting the timing information obtained during the performance-driven placement phase.
Reference: [6] <author> P. K. Chan and K. Karplus, </author> <title> Computing Signal Delay in General RC Networks by Tree/Link Partitioning, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 9 (1990), </volume> <pages> pp. 898-902. 16 </pages>
Reference-contexts: Because of its relatively simple form, Elmore delay can be calculated in O (k) time, as noted by Rubinstein et al. [19]. Unfortunately, the Elmore delay model outlined above applies only to tree topologies, and in order to extend this formula to non-tree topologies, additional transformations are required <ref> [6] </ref>.
Reference: [7] <author> J. Cohoon and J. Randall, </author> <title> Critical Net Routing, </title> <booktitle> in Proc. IEEE Intl. Conf. on Computer Design, </booktitle> <address> Cambridge, MA, </address> <month> October </month> <year> 1991, </year> <pages> pp. 174-177. </pages>
Reference-contexts: determine net priorities based on static timing analysis, and process higher priority nets earlier, using fewer feedthroughs; Jackson et al. [12] outline a hierarchical approach to timing-driven routing; and Prastjutrakul and Kubitz [17] use A* heuristic search and the Elmore delay formula [11] in their tree optimization; Cohoon and Randall <ref> [7] </ref> developed a critical net routing algorithm in order to reduce interconnect delay. Cong et al. have proposed finding minimum spanning trees with bounded source-sink path-length [8] by simultaneously minimizing both tree cost and the tree radius; another cost-radius tradeoff was achieved by Alpert et al. [1].
Reference: [8] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> Provably Good Performance-Driven Global Routing, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 739-752. </pages>
Reference-contexts: Cong et al. have proposed finding minimum spanning trees with bounded source-sink path-length <ref> [8] </ref> by simultaneously minimizing both tree cost and the tree radius; another cost-radius tradeoff was achieved by Alpert et al. [1].
Reference: [9] <author> W. E. Donath, R. J. Norman, B. K. Agrawal, S. E. Bello, S. Y. Han, J. M. Kurtzberg, P. Lowy, and R. I. McMillan, </author> <title> Timing Driven Placement Using Complete Path Delays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 84-89. </pages>
Reference-contexts: In light of this trend, performance-driven physical layout has become central to the design of leading-edge digital systems. Early work focused on performance-driven placement, with the usual objective being the close placement of cells in timing-critical paths <ref> [9] </ref> [14] [15]. While timing-driven placement has a large effect on layout performance, the lack of optimal-delay interconnection algorithms impedes designers in fully exploiting a high-quality placement. Once a module placement has been fixed, good timing-driven interconnection algorithms are 1 key to enhancing the performance of the layout solution.
Reference: [10] <author> A. E. Dunlop, V. D. Agrawal, D. Deutsch, M. F. Jukl, P. Kozak, and M. Wiesel, </author> <title> Chip Layout Optimization Using Critical Path Weighting, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1984, </year> <pages> pp. 133-136. </pages>
Reference-contexts: For a given signal net, the typical objective has been to minimize the maximum signal delay from the source pin to any sink pin. Many approaches have appeared in the literature, e.g., Dunlop et al. <ref> [10] </ref> determine net priorities based on static timing analysis, and process higher priority nets earlier, using fewer feedthroughs; Jackson et al. [12] outline a hierarchical approach to timing-driven routing; and Prastjutrakul and Kubitz [17] use A* heuristic search and the Elmore delay formula [11] in their tree optimization; Cohoon and Randall
Reference: [11] <author> W. C. </author> <title> Elmore, The Transient Response of Damped Linear Networks with Particular Regard to Wide-Band Amplifiers, </title> <journal> J. Appl. Phys., </journal> <volume> 19 (1948), </volume> <pages> pp. 55-63. </pages>
Reference-contexts: in the literature, e.g., Dunlop et al. [10] determine net priorities based on static timing analysis, and process higher priority nets earlier, using fewer feedthroughs; Jackson et al. [12] outline a hierarchical approach to timing-driven routing; and Prastjutrakul and Kubitz [17] use A* heuristic search and the Elmore delay formula <ref> [11] </ref> in their tree optimization; Cohoon and Randall [7] developed a critical net routing algorithm in order to reduce interconnect delay. <p> Unfortunately, SPICE delay is too computationally prohibitive to evaluate during the routing phase of layout, and we are thus forced to seek other alternatives. Another delay model is the Elmore delay formula <ref> [11] </ref>, which was shown in [4] to have both high accuracy and fidelity in comparison with SPICE. The Elmore delay is defined as follows. Given routing tree T (N ) 5 rooted at n 0 , let e i denote the edge from pin n i to its parent.
Reference: [12] <author> M. A. B. Jackson, E. S. Kuh, and M. Marek-Sadowska, </author> <title> Timing-Driven Routing for Building Block Layout, </title> <booktitle> in Proc. IEEE Intl. Symp. on Circuits and Systems, </booktitle> <year> 1987, </year> <pages> pp. 518-519. </pages>
Reference-contexts: Many approaches have appeared in the literature, e.g., Dunlop et al. [10] determine net priorities based on static timing analysis, and process higher priority nets earlier, using fewer feedthroughs; Jackson et al. <ref> [12] </ref> outline a hierarchical approach to timing-driven routing; and Prastjutrakul and Kubitz [17] use A* heuristic search and the Elmore delay formula [11] in their tree optimization; Cohoon and Randall [7] developed a critical net routing algorithm in order to reduce interconnect delay.
Reference: [13] <author> A. B. Kahng and G. Robins, </author> <title> A New Class of Iterative Steiner Tree Heuristics With Good Performance, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 893-902. </pages>
Reference-contexts: To find the Steiner tree over the net (Step 1 of the SLDRG algorithm of Figure 6), an efficient implementation of the Iterated 1-Steiner algorithm of Kahng and Robins may be used [2] [3] <ref> [13] </ref>. algorithm) on a random net of 10 pins.
Reference: [14] <author> I. Lin and D. H. C. Du, </author> <title> Performance-Driven Constructive Placement, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 103-106. </pages>
Reference-contexts: In light of this trend, performance-driven physical layout has become central to the design of leading-edge digital systems. Early work focused on performance-driven placement, with the usual objective being the close placement of cells in timing-critical paths [9] <ref> [14] </ref> [15]. While timing-driven placement has a large effect on layout performance, the lack of optimal-delay interconnection algorithms impedes designers in fully exploiting a high-quality placement. Once a module placement has been fixed, good timing-driven interconnection algorithms are 1 key to enhancing the performance of the layout solution.
Reference: [15] <author> M. Marek-Sadowska and S. P. Lin, </author> <title> Timing Driven Placement, </title> <booktitle> in Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1989, </year> <pages> pp. 94-97. </pages>
Reference-contexts: In light of this trend, performance-driven physical layout has become central to the design of leading-edge digital systems. Early work focused on performance-driven placement, with the usual objective being the close placement of cells in timing-critical paths [9] [14] <ref> [15] </ref>. While timing-driven placement has a large effect on layout performance, the lack of optimal-delay interconnection algorithms impedes designers in fully exploiting a high-quality placement. Once a module placement has been fixed, good timing-driven interconnection algorithms are 1 key to enhancing the performance of the layout solution.
Reference: [16] <author> L. Nagel, </author> <title> SPICE2: A Computer Program to Simulate Semiconductor Circuits, </title> <month> May </month> <year> 1975. </year>
Reference-contexts: The interconnect parameters used are representative of a 0:8 CMOS process (see discussion below for details). Since we are highly concerned with obtaining realistic results, we use the SPICE circuit simulator <ref> [16] </ref> to determine the efficacy of our methods (in Section 2 we discuss in detail the SPICE parameters used). <p> The specific routing graph G that solves the ORG problem will depend on the model used to estimate the delay t (G). Ideally, we would like to compute and optimize delay according to the complete physical attributes of the circuit. To this end, we use the circuit simulator SPICE <ref> [16] </ref>, which is generally regarded as the best available tool for obtaining a precise, complete measure of interconnect delay. These are representative of a typical 0:8 CMOS process.
Reference: [17] <author> S. Prasitjutrakul and W. J. Kubitz, </author> <title> A Timing-Driven Global Router for Custom Chip Design, </title> <booktitle> in Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. 48-51. </pages>
Reference-contexts: Many approaches have appeared in the literature, e.g., Dunlop et al. [10] determine net priorities based on static timing analysis, and process higher priority nets earlier, using fewer feedthroughs; Jackson et al. [12] outline a hierarchical approach to timing-driven routing; and Prastjutrakul and Kubitz <ref> [17] </ref> use A* heuristic search and the Elmore delay formula [11] in their tree optimization; Cohoon and Randall [7] developed a critical net routing algorithm in order to reduce interconnect delay.
Reference: [18] <author> B. T. Preas and M. J. Lorenzetti, </author> <title> Physical Design Automation of VLSI Systems, </title> <address> Benjamin/Cummings, Menlo Park, CA, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Recent advances in VLSI technology have steadily improved chip packing densities. As feature sizes decrease, device switching speeds tend to increase; however, thinner wires have higher resistance, causing signal propagation delay through the interconnect to increase <ref> [18] </ref>. Thus, interconnection delay has had a greater impact on circuit speed, being responsible for up to 70% of the clock cycle in the design of dense, high-performance circuits [20]. In light of this trend, performance-driven physical layout has become central to the design of leading-edge digital systems.
Reference: [19] <author> J. Rubinstein, P. Penfield, and M. A. Horowitz, </author> <title> Signal Delay in RC Tree Networks, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 2 (1983), </volume> <pages> pp. 202-211. </pages>
Reference-contexts: Recently, Boese et al. [4] have identified and exploited a high-quality, algorithmically tractable model of interconnect delay, based on an upper bound <ref> [19] </ref> for Elmore delay. An implicit premise of previous methods is that a routing topology must correspond to a tree (i.e., an acyclic topology). In retrospect, this seems a natural assumption, since a tree topology spans a net, thus achieving connectivity using a minimum number of edges. <p> Because of its relatively simple form, Elmore delay can be calculated in O (k) time, as noted by Rubinstein et al. <ref> [19] </ref>. Unfortunately, the Elmore delay model outlined above applies only to tree topologies, and in order to extend this formula to non-tree topologies, additional transformations are required [6].
Reference: [20] <author> S. Sutanthavibul and E. Shragowitz, </author> <title> An Adaptive Timing-Driven Layout for High Speed VLSI, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 90-95. 17 </pages>
Reference-contexts: Thus, interconnection delay has had a greater impact on circuit speed, being responsible for up to 70% of the clock cycle in the design of dense, high-performance circuits <ref> [20] </ref>. In light of this trend, performance-driven physical layout has become central to the design of leading-edge digital systems. Early work focused on performance-driven placement, with the usual objective being the close placement of cells in timing-critical paths [9] [14] [15].
References-found: 20

