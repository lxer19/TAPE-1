URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-001.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Hypertextual Concurrent Control of a Lisp Kernel  
Author: P. David Stotts Richard Furuta 
Keyword: Key words: functional programming, parallelism, kernel-control decomposition, Lisp, hypertext, exe cution visualization.  
Address: Gainesville, FL 32611 College Park, MD 20742  
Affiliation: Department of Computer and Department of Computer Science and Information Sciences Institute for Advanced Computer Studies University of Florida University of Maryland  
Abstract: Using the Trellis human/computer interaction model as an implementation vehicle, we demonstrate how to use concurrency-supporting hypertext to provide visual displays of the execution flows through a parallel Lisp program. In addition to displays, the hypertext interface allows injection of control flow into an otherwise functional computation, and therefore provides reader control over the order of evaluation of expressions. The resulting system, termed Trellis, can be thought of as a concurrent control flow browser for composing functional computations, providing a visual implementation of kernel-control decomposition. The advantages of Trellis are ease of exploring program side effects; ease of debugging parallel code; aid in teaching functional languages; and the ability to construct hypertext documents that have parallel execution semantics and flexible browsing behaviors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ahuja, N. Carriero, and D. Gelernter. Linda and friends. </author> <booktitle> Computer, </booktitle> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Many other systems have taken a graphical approach to the construction or visualization of parallel computation. Just to name a few, consider Poker [10], Novis [6], and prograph [8, 7]. In a related fashion, the Linda family of languages <ref> [2, 1, 3] </ref> shares some common design goals with Trellis.
Reference: [2] <author> D. Gelernter. </author> <title> Generative communication in linda. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1) </volume> <pages> 80-112, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Many other systems have taken a graphical approach to the construction or visualization of parallel computation. Just to name a few, consider Poker [10], Novis [6], and prograph [8, 7]. In a related fashion, the Linda family of languages <ref> [2, 1, 3] </ref> shares some common design goals with Trellis.
Reference: [3] <author> D. Gelernter. </author> <title> Programming for advanced computing. </title> <journal> Scientific American, </journal> <volume> 257(4) </volume> <pages> 90-98, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Many other systems have taken a graphical approach to the construction or visualization of parallel computation. Just to name a few, consider Poker [10], Novis [6], and prograph [8, 7]. In a related fashion, the Linda family of languages <ref> [2, 1, 3] </ref> shares some common design goals with Trellis.
Reference: [4] <author> S. Horwitz, J. Prins, and T. Reps. </author> <title> Integrating non-interfering versions of programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(3), </volume> <month> July </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Pratt introduced in 1978 a concept he called kernel-control decomposition [9] for separating the program text that defines and executes control paths from the text that performs data state transformations. A more generalized form of this technique is now known as program slicing <ref> [14, 15, 4, 5] </ref>. Kernel-control decomposition can be viewed as a pair of program slices: one on the control variables, and the second the complementary slice. This form of analysis has been used for optimizations and other program transformations.
Reference: [5] <author> S. Horwitz, T. Reps, and D. Binkley. </author> <title> Interprocedural slicing using dependence graphs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(1), </volume> <month> January </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Pratt introduced in 1978 a concept he called kernel-control decomposition [9] for separating the program text that defines and executes control paths from the text that performs data state transformations. A more generalized form of this technique is now known as program slicing <ref> [14, 15, 4, 5] </ref>. Kernel-control decomposition can be viewed as a pair of program slices: one on the control variables, and the second the complementary slice. This form of analysis has been used for optimizations and other program transformations.
Reference: [6] <author> C. D. Norton and E. P. Glinert. </author> <title> A visual environment for designing and simulating execution of processor arrays. </title> <booktitle> In Proceedings of the 1990 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 227-232, </pages> <month> October </month> <year> 1990. </year> <institution> Skokie, IL. </institution>
Reference-contexts: Trellis is based on a parallel automaton (a timed Petri net), and one of its interfaces is a graphical editor for constructing documents. Many other systems have taken a graphical approach to the construction or visualization of parallel computation. Just to name a few, consider Poker [10], Novis <ref> [6] </ref>, and prograph [8, 7]. In a related fashion, the Linda family of languages [2, 1, 3] shares some common design goals with Trellis.
Reference: [7] <author> T. Pietrzykowski and S. Matwin. Prograph: </author> <title> A preliminary report. </title> <type> Technical Report Technical Report TR-84-07, </type> <institution> University of Ottawa, </institution> <month> April </month> <year> 1984. </year>
Reference-contexts: Many other systems have taken a graphical approach to the construction or visualization of parallel computation. Just to name a few, consider Poker [10], Novis [6], and prograph <ref> [8, 7] </ref>. In a related fashion, the Linda family of languages [2, 1, 3] shares some common design goals with Trellis.
Reference: [8] <author> T. Pietrzykowski, S. Matwin, and T. Muldner. </author> <title> The programming language prograph: Yet another application of graphics. </title> <booktitle> In Graphics Interface '83, </booktitle> <pages> pages 143-145, </pages> <month> May </month> <year> 1983. </year> <institution> Edmonton, Alberta. </institution>
Reference-contexts: Many other systems have taken a graphical approach to the construction or visualization of parallel computation. Just to name a few, consider Poker [10], Novis [6], and prograph <ref> [8, 7] </ref>. In a related fashion, the Linda family of languages [2, 1, 3] shares some common design goals with Trellis.
Reference: [9] <author> T. W. Pratt. </author> <title> Program analysis and optimization through kernel-control decomposition. </title> <journal> Acta Informat-ica, </journal> <volume> 9 </volume> <pages> 195-216, </pages> <year> 1978. </year>
Reference-contexts: 1 Introduction Pratt introduced in 1978 a concept he called kernel-control decomposition <ref> [9] </ref> for separating the program text that defines and executes control paths from the text that performs data state transformations. A more generalized form of this technique is now known as program slicing [14, 15, 4, 5].
Reference: [10] <author> L. Snyder. </author> <title> Parallel programming and the poker programming environment. </title> <journal> Computer, </journal> <volume> 17(7) </volume> <pages> 27-36, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Trellis is based on a parallel automaton (a timed Petri net), and one of its interfaces is a graphical editor for constructing documents. Many other systems have taken a graphical approach to the construction or visualization of parallel computation. Just to name a few, consider Poker <ref> [10] </ref>, Novis [6], and prograph [8, 7]. In a related fashion, the Linda family of languages [2, 1, 3] shares some common design goals with Trellis.
Reference: [11] <author> P. D. Stotts and R. Furuta. </author> <title> Browsing parallel process networks,. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9(2) </volume> <pages> 224-235, </pages> <year> 1990. </year>
Reference-contexts: A breadth-first exploration of the calling tree would simulate eager evaluation, whereas a more selective exploration would simulate lazy evaluation. This method is similar in spirit to our previous experiment in browsing various aspects of CSP programs (like the message flow, for example) <ref> [11] </ref>. 5 Conclusions We have illustrated a visual programming system that operates in the domain of hypertext and hyperpro-rams. This system contains a parallel control flow structure imposed on a functional computation kernel.
Reference: [12] <author> P. David Stotts and Richard Furuta. </author> <title> Petri-net-based hypertext: Document structure with browsing semantics. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 7(1) </volume> <pages> 3-29, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Due to our past development of Trellis concepts in the hypertext domain, we will use the terms document and hyperprogram interchangeably throughout the report. 2 Trellis and Trellis The Trellis model has been formally defined in detail elsewhere <ref> [12, 13] </ref>; we include a brief informal description here to aid the current discussion. Abstractly, a Trellis hypertext (document) is an annotated timed Petri net. The information associated with the places is document content.
Reference: [13] <author> P. David Stotts and Richard Furuta. </author> <title> Temporal hyperprogramming. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(3) </volume> <pages> 237-253, </pages> <year> 1990. </year>
Reference-contexts: Due to our past development of Trellis concepts in the hypertext domain, we will use the terms document and hyperprogram interchangeably throughout the report. 2 Trellis and Trellis The Trellis model has been formally defined in detail elsewhere <ref> [12, 13] </ref>; we include a brief informal description here to aid the current discussion. Abstractly, a Trellis hypertext (document) is an annotated timed Petri net. The information associated with the places is document content. <p> The result is a programming system that has a functional kernel language and a separate parallel control notation. The editing client we have written 1 Timing is fully explained in <ref> [13] </ref>. 2 for creating Trellis hyperprograms uses a graphical notation to express the control (Petri net), and normal textual notation to express Lisp fragments. <p> In a hyperprogram, the interaction of the reader/user with the parallel control flow and with the information annotations will often be the primary end of a computation. An early form of this concept has been previously presented in detail <ref> [13] </ref>. In this report, we expand on the earlier concept by discussing the added dimension of a Lisp kernel. 3 In hyperprogramming the Lisp agents are responsible for, among other things, setting traps and triggers for the control net as they execute.
Reference: [14] <author> M. Weiser. </author> <title> Programmers use slices when debugging. </title> <journal> Communications of the ACM, </journal> <month> July </month> <year> 1982. </year>
Reference-contexts: 1 Introduction Pratt introduced in 1978 a concept he called kernel-control decomposition [9] for separating the program text that defines and executes control paths from the text that performs data state transformations. A more generalized form of this technique is now known as program slicing <ref> [14, 15, 4, 5] </ref>. Kernel-control decomposition can be viewed as a pair of program slices: one on the control variables, and the second the complementary slice. This form of analysis has been used for optimizations and other program transformations.
Reference: [15] <author> M. Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, July 1984. </journal> <volume> 7 8 9 10 11 12 13 14 15 </volume>
Reference-contexts: 1 Introduction Pratt introduced in 1978 a concept he called kernel-control decomposition [9] for separating the program text that defines and executes control paths from the text that performs data state transformations. A more generalized form of this technique is now known as program slicing <ref> [14, 15, 4, 5] </ref>. Kernel-control decomposition can be viewed as a pair of program slices: one on the control variables, and the second the complementary slice. This form of analysis has been used for optimizations and other program transformations.
References-found: 15

