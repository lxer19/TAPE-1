URL: http://www.cs.columbia.edu/~dalal/papers/aaai97.ps.gz
Refering-URL: http://www.cs.columbia.edu/~dalal/papers.html
Root-URL: http://www.cs.columbia.edu
Email: froyr,dalalg@cs.columbia.edu  
Title: Model-Theoretic Semantics and Tractable Algorithm for CNF-BCP  
Author: Rahul Roy-Chowdhury and Mukesh Dalal 
Address: New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Abstract: CNF-BCP is a well-known propositional reasoner that extends clausal Boolean Constraint Propagation (BCP) to non-clausal theories. Although BCP has efficient linear-time implementations, CNF-BCP requires clausal form transformation that sometimes leads to an exponential increase in the size of a theory. We present a new quadratic-time reasoner, RFP, that infers exactly the same literals as CNF-BCP. Although CNF-BCP has been specified only syntactically, we present a simple model-theoretic semantics for RFP. We also present a convergent term-rewriting system for RFP that is suitable for reasoning with knowledge bases that are built incrementally. Potential applications of RFP include logical truth-maintenance systems and general-purpose knowledge representation systems. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Chang, C., and Lee, R. </author> <year> 1973. </year> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, London. </publisher>
Reference-contexts: For example, CNF (fP _ (:P ^Q)g) = f (P _:P ); (P _ Q)g. BCP is a variant of unit resolution <ref> (Chang & Lee 1973) </ref>. Given any clausal theory , BCP monotonically expands it by adding facts as follows: in each step, if any single clause in and all the facts in taken together logically entail any other fact, then the new fact is added to the theory . <p> Somewhat surprisingly, the polynomial transformation resulted in sizes that were about half the sizes produced by the shortest exponential transformation. Related Work and Conclusions For clausal theories, BCP (McAllester 1980) is the hyper-resolution variant of unit resolution <ref> (Chang & Lee 1973) </ref>, that has been variously called unit-resulting resolution, forward pruning, and DPL-oracle. Several efficient implementations of BCP have been proposed (McAllester 1990). Several extensions of BCP to non-clausal theories have been defined syntactically in (de Kleer 1990): Formula BCP, Prime BCP, and CNF-BCP.
Reference: <author> Cook, S. </author> <year> 1971. </year> <title> The complexity of theorem proving procedures. </title> <booktitle> In Proceedings Third Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> 151-158. </pages>
Reference-contexts: One well-known extension of BCP is CNF-BCP, in which the non-clausal theories are first transformed into logically equivalent clausal theories. Although there are two approaches to this transformation, the standard one (Mendelson 1964) causes an exponential increase in the size of the theories in some cases, and the other <ref> (Cook 1971) </ref> requires adding new atoms that strongly inhibits reasoning by BCP. fl Copyright c fl1997, American Association for Artificial Intelligence (www.aaai.org). All rights reserved. This work is partially supported by NSF Grant No. IRI-94-10117, NSF infrastructure grant CDA-9625374, and DARPA/ARL Contract No. DAAL01-94-K-0119. <p> DUP-BCP This is similar to CNF-BCP, except that duplicate literals in a clause are removed before ap plying BCP. CLAUSE-BCP This is similar to DUP-BCP except that duplicate clauses are also removed. POLY-BCP Polynomial transformation into clausal form followed by BCP <ref> (Cook 1971) </ref>. This requires the addition of new literals to the theory. We considered three methods to measure the efficiency of the reasoning algorithms. The first of these is simply the execution time of the algorithms.
Reference: <author> Crawford, J., ed. </author> <year> 1992. </year> <booktitle> Proceedings of the AAAI Workshop on Tractable Reasoning. </booktitle> <address> San Jose, California: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: Introduction Given a propositional theory, it is important in many AI systems to be able to determine the formulae that it logically entails. Since this reasoning problem is intractable, many systems settle for sound, incomplete, and tractable reasoners <ref> (Crawford 1992) </ref>. One such reasoner, Clausal Boolean Constraint Propagation (BCP) (McAllester 1990), is widely used for incomplete linear-time reasoning with clausal propositional theories. However, all extensions of BCP to non-clausal theories that have been proposed so far are intractable (de Kleer 1990).
Reference: <author> Dalal, M. </author> <year> 1992. </year> <title> Efficient propositional constraint propagation. </title> <booktitle> In Proceedings Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <pages> 409-414. </pages> <address> San Jose, Cali-fornia: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Dalal, M. </author> <year> 1995. </year> <title> Tractable reasoning in knowledge representation systems. </title> <type> Technical Report CUCS-017-95, </type> <institution> Department of Computer Science, Columbia University, </institution> <address> New York, </address> <publisher> NY. </publisher> <editor> de Kleer, J. </editor> <year> 1990. </year> <title> Exploiting locality in a TMS. </title> <booktitle> In Proceedings Eighth National Conference on Artificial Intelligence (AAAI-90), </booktitle> <pages> 264-271. </pages>
Reference-contexts: fl RF P t then there is a term v for which s ) fl RFP v and t ) fl 3. (Modularity) if fi (B 1 ) , fl RF P fi (B 2 ) then fi (B; B 1 ) , fl The proof can be found in <ref> (Dalal 1995) </ref>. The termination of RFP guarantees that any rewrite sequence is finite. It then follows from confluence that RFP is convergent; that is, each rewrite sequence starting from a theory produces a unique irreducible form for that theory.
Reference: <author> Levesque, H. </author> <year> 1984. </year> <title> A logic of implicit and explicit belief. </title> <booktitle> Proceedings National Conference on Artificial Intelligence (AAAI-84) 198-202. </booktitle>
Reference-contexts: Our model theory not only provides an independent characterization of reasoning, but is also conceptually simpler than the corresponing proof theoretic characterization. The importance of model-theoretic semantics for reasoners has been convincingly argued in several papers (c.f. <ref> (Levesque 1984) </ref>). Apart from a quadratic time algorithm and a model-theoretic semantics, we also provide a rewrite system (Plaisted 1993) for RFP. A rewrite system is a collection of rewrite rules that indicate all the ways in which subformulas of a theory can be systematically replaced by possibly simpler formulas.
Reference: <author> McAllester, D. </author> <year> 1980. </year> <title> An outlook on truth maintenance. </title> <type> Memo 551, </type> <institution> MIT AI Lab. </institution>
Reference-contexts: This is a consequence of the large size of the clausal form transformation of the theories. Somewhat surprisingly, the polynomial transformation resulted in sizes that were about half the sizes produced by the shortest exponential transformation. Related Work and Conclusions For clausal theories, BCP <ref> (McAllester 1980) </ref> is the hyper-resolution variant of unit resolution (Chang & Lee 1973), that has been variously called unit-resulting resolution, forward pruning, and DPL-oracle. Several efficient implementations of BCP have been proposed (McAllester 1990).
Reference: <author> McAllester, D. </author> <year> 1990. </year> <title> Truth maintenance. </title> <booktitle> In Proceedings Eighth National Conference on Artificial Intelligence (AAAI-90), </booktitle> <pages> 1109-1116. </pages>
Reference-contexts: Introduction Given a propositional theory, it is important in many AI systems to be able to determine the formulae that it logically entails. Since this reasoning problem is intractable, many systems settle for sound, incomplete, and tractable reasoners (Crawford 1992). One such reasoner, Clausal Boolean Constraint Propagation (BCP) <ref> (McAllester 1990) </ref>, is widely used for incomplete linear-time reasoning with clausal propositional theories. However, all extensions of BCP to non-clausal theories that have been proposed so far are intractable (de Kleer 1990). <p> It turns out that the rewrite system CBCP is convergent, content preserving, monotonic, modular, and tractable. In particular, the linear time algorithm presented in <ref> (McAllester 1990) </ref> reduces any theory with respect to CBCP. Lemma 6 shows that rewriting using CBCP does not change models of a clausal theory. Lemma 6 If ) CBCP , then and have identical models. <p> Related Work and Conclusions For clausal theories, BCP (McAllester 1980) is the hyper-resolution variant of unit resolution (Chang & Lee 1973), that has been variously called unit-resulting resolution, forward pruning, and DPL-oracle. Several efficient implementations of BCP have been proposed <ref> (McAllester 1990) </ref>. Several extensions of BCP to non-clausal theories have been defined syntactically in (de Kleer 1990): Formula BCP, Prime BCP, and CNF-BCP. While the first two are intractable (unless P = NP), no tractable algorithm for CNF-BCP was previously known.
Reference: <author> Mendelson, E. </author> <year> 1964. </year> <note> Introduction to Mathematical Logic. </note>
Reference-contexts: One well-known extension of BCP is CNF-BCP, in which the non-clausal theories are first transformed into logically equivalent clausal theories. Although there are two approaches to this transformation, the standard one <ref> (Mendelson 1964) </ref> causes an exponential increase in the size of the theories in some cases, and the other (Cook 1971) requires adding new atoms that strongly inhibits reasoning by BCP. fl Copyright c fl1997, American Association for Artificial Intelligence (www.aaai.org). All rights reserved. <p> In formal notation, ^ and _ are used as unary functors over finite bags of formulas, and the unary functor fi is used to construct theories. For readability, we will adopt the standard notation of propositional calculus (PC) for formulas in negation normal form <ref> (Mendelson 1964) </ref>. For example, the set fP; (:P ^Q)_f g is the informal notation for the theory 2 = fi (P; _ (^(:P; Q); _ ())). The formulas ^() and _ () are represented by the logical constants t and f , respectively. <p> We considered four different clausal transformations, followed by BCP. In addition to FP and RFP, these algorithms are: CNF-BCP Usual exponential transformation into clausal form <ref> (Mendelson 1964) </ref> followed by BCP. DUP-BCP This is similar to CNF-BCP, except that duplicate literals in a clause are removed before ap plying BCP. CLAUSE-BCP This is similar to DUP-BCP except that duplicate clauses are also removed. POLY-BCP Polynomial transformation into clausal form followed by BCP (Cook 1971).
Reference: <institution> Princeton, </institution> <address> N.J.: </address> <publisher> Van Nostrand. </publisher>
Reference: <author> Plaisted, D. </author> <year> 1993. </year> <title> Equational reasoning and term rewriting systems. </title> <editor> In Gabbay, D., and Siekmann, J., eds., </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 1. </volume> <publisher> Oxford University Press. </publisher>
Reference-contexts: The importance of model-theoretic semantics for reasoners has been convincingly argued in several papers (c.f. (Levesque 1984)). Apart from a quadratic time algorithm and a model-theoretic semantics, we also provide a rewrite system <ref> (Plaisted 1993) </ref> for RFP. A rewrite system is a collection of rewrite rules that indicate all the ways in which subformulas of a theory can be systematically replaced by possibly simpler formulas. <p> In PC, which uses boolean valuations, this implies that V ( ) = 1. Thus j is sound with respect to j=. RFP: A rewrite system In this section we present a rewrite system <ref> (Plaisted 1993) </ref>, RFP, that precisely captures the notion of entailment described above. In particular, we show that RFP is sound and complete with respect to j . We also prove that RFP possesses several desirable properties, namely termination, confluence and modularity.
References-found: 11

