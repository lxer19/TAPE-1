URL: http://www.cs.columbia.edu/~kar/pubsk/procedural.ps
Refering-URL: http://www.cs.columbia.edu/~kar/pubsk/pubsk.html
Root-URL: http://www.cs.columbia.edu
Email: kar@cs.stanford.edu  
Title: A Procedural Semantics for Well Founded Negation in Logic Programs "Procedural Semantics for Well Founded
Author: Kenneth A. Ross Ken Ross 
Address: Stanford, CA, 94305  
Note: This research was supported by the National Science Foundation under grant IRI-87-22886, by a grant from IBM Corporation, and by the United States Air Force Office of Scientific Research under contract AFOSR-88-0266. Running title:  
Affiliation: Stanford University  Department of Computer Science Stanford University  
Abstract: We introduce global SLS-resolution, a procedural semantics for well-founded negation as defined by Van Gelder, Ross and Schlipf. Global SLS-resolution extends Przymusin-ski's SLS-resolution, and may be applied to all programs, whether locally stratified or not. 1 Global SLS-resolution is defined in terms of global trees, a new data structure representing the dependence of goals on derived negative subgoals. We prove that global SLS-resolution is sound with respect to the well-founded semantics, and complete for non-floundering queries. While not effective in general, global SLS-resolution is effective for classes of "acyclic" programs, and can be augmented with a memoing device to be effective for all function-free programs. A preliminary version of this paper was presented at the Eighth ACM Symposium on the Principles of Database Systems in March, 1989 [24]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Apt, H. Blair, and A. Walker. </author> <title> Towards a theory of declarative knowledge. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 89-148, </pages> <address> Los Altos, CA, 1988. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Another approach was taken by Przymusinski [22]. Przymusinski defined the class of "perfect models" of a program, and argued that the semantics of the program be given by the logical consequences of the (unique) perfect model. For locally stratified programs (and hence also for stratified programs <ref> [5, 1, 30] </ref>) there is guaranteed to exist a unique perfect Herbrand model, so the semantics is well-defined in these cases. Based on the perfect model approach, Przymusinski introduced SLS-resolution [21]. SLS-resolution is a top-down procedural semantics that uses an extension of SLD-resolution to answer queries.
Reference: [2] <author> K.R. Apt and M. Bezem. </author> <title> Acyclic programs. </title> <booktitle> In Proceedings of the Seventh International Conference on Logic Programming, </booktitle> <year> 1990. </year>
Reference-contexts: In order to be able to use well-founded negation in logic programs, a corresponding procedural semantics is necessary. This paper presents such a procedural semantics. Global SLS-resolution is not effective, as discussed below. However, for certain subclasses of programs, global SLS-resolution is effective. For acyclic programs <ref> [3, 2] </ref> or, more generally, for modularly acyclic programs [25] global SLS-resolution is effective.
Reference: [3] <author> L. Cavedon. </author> <title> Continuity, consistency, and completeness properties for logic programs. </title> <booktitle> In Proceedings of the Sixth International Conference on Logic Programming, </booktitle> <year> 1989. </year>
Reference-contexts: In order to be able to use well-founded negation in logic programs, a corresponding procedural semantics is necessary. This paper presents such a procedural semantics. Global SLS-resolution is not effective, as discussed below. However, for certain subclasses of programs, global SLS-resolution is effective. For acyclic programs <ref> [3, 2] </ref> or, more generally, for modularly acyclic programs [25] global SLS-resolution is effective.
Reference: [4] <author> David Chan. </author> <title> Constructive negation based on the completed database. </title> <booktitle> In Proc. Fifth International Conference and Symposium on Logic Programming, </booktitle> <year> 1988. </year>
Reference-contexts: Some results in this direction have been 19 presented in [12], and some more recent work has described a process called "constructive negation" in which negative subgoals are used to generate negative bindings <ref> [4, 20] </ref>. Whether such methods will be useful in practice, or whether ground negation is sufficient for most purposes remains to be seen. Restricting programs and goals to be "allowed" [13], for example, guarantees freedom from floundering.
Reference: [5] <author> A. Chandra and D. Harel. </author> <title> Horn clause queries and generalizations. </title> <journal> Journal of Logic Programming, </journal> <volume> 2(1) </volume> <pages> 1-15, </pages> <year> 1985. </year>
Reference-contexts: Another approach was taken by Przymusinski [22]. Przymusinski defined the class of "perfect models" of a program, and argued that the semantics of the program be given by the logical consequences of the (unique) perfect model. For locally stratified programs (and hence also for stratified programs <ref> [5, 1, 30] </ref>) there is guaranteed to exist a unique perfect Herbrand model, so the semantics is well-defined in these cases. Based on the perfect model approach, Przymusinski introduced SLS-resolution [21]. SLS-resolution is a top-down procedural semantics that uses an extension of SLD-resolution to answer queries.
Reference: [6] <author> K. L. Clark. </author> <title> Negation as failure. </title> <editor> In Gallaire and Minker, editors, </editor> <booktitle> Logic and Databases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year> <month> 22 </month>
Reference-contexts: These proposals have come from both the logic programming community and the deductive database community, and the various approaches attempt to give an intuitive meaning to negation incorporating some form of default reasoning. The first approach, due to Clark <ref> [6] </ref>, was to define the "completion" of a program. The semantics of the program is then given by the logical consequences of the completion. For a detailed description of this approach see [27, 28, 13]. <p> Przymusinski proposes an alternative solution. In proving the soundness and completeness of SLS-resolution with respect to the perfect model semantics, he considers all perfect models rather than just perfect Herbrand models [21]. These models have to be models of a set of equality axioms known as Clark's equality axioms <ref> [6] </ref>. Theorem 6.2: (Completeness of global SLS-resolution) Let P be a program, and G = Q a non-floundering goal involving only symbols from P . Let P 0 be the augmented version of P . Let be a substitution for the variables of Q. Then 1.
Reference: [7] <author> M. </author> <title> Fitting. A Kripke-Kleene semantics for logic programs. </title> <journal> Journal of Logic Program--ming, </journal> <volume> 2(4) </volume> <pages> 295-312, </pages> <year> 1985. </year>
Reference-contexts: The first approach, due to Clark [6], was to define the "completion" of a program. The semantics of the program is then given by the logical consequences of the completion. For a detailed description of this approach see [27, 28, 13]. An alternative approach was taken by Fitting <ref> [7] </ref> and Kunen [11], who interpreted the completion in terms of 3-valued logic in order to overcome some anomalies with the completion when interpreted in a 2-valued sense. <p> We denote this least fixpoint by M W F (P ), and call this the well-founded (partial) model of P . 2 Note that M W F (P ) is a "three-valued model" in the sense of Fitting <ref> [7] </ref>. A ground atom A may appear positively, negatively or not at all in M W F (P ).
Reference: [8] <author> M. Gelfond and V. Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <booktitle> In Proc. Fifth International Conference and Symposium on Logic Programming, </booktitle> <year> 1988. </year>
Reference-contexts: Various other approaches have been proposed. Minker's "Generalized Closed World Assumption" [16] which is based on minimal models is closely related to McCarthy's "Circumscription" [15]. Gelfond and Lifschitz have defined the class of "Stable Models," and argued that the semantics of a program be determined by these models <ref> [8] </ref>. In the context of disjunctive databases, Ross and Topor have introduced the "Disjunctive Database Rule" [23]. As a development of these approaches, Van Gelder, Ross and Schlipf [31] introduced the "Well-Founded Semantics" for logic programs with negation.
Reference: [9] <author> J. Jaffar, J.-L. Lassez, and J. Lloyd. </author> <title> Completeness of the negation-as-failure rule. </title> <booktitle> In Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pages 500-506, </pages> <year> 1983. </year>
Reference-contexts: This method is sound with respect to the completion of the program, and is complete for Horn programs (possibly with negative subgoals in the goal only) <ref> [9] </ref>. Another approach was taken by Przymusinski [22]. Przymusinski defined the class of "perfect models" of a program, and argued that the semantics of the program be given by the logical consequences of the (unique) perfect model.
Reference: [10] <author> D. Kemp and R. Topor. </author> <title> Completeness of a top down query evaluation procedure for stratified databases. </title> <booktitle> In Proc. Fifth International Conference and Symposium on Logic Programming, </booktitle> <year> 1988. </year>
Reference-contexts: For acyclic programs [3, 2] or, more generally, for modularly acyclic programs [25] global SLS-resolution is effective. In the absence of function symbols, the Herbrand Base is finite, and so effective procedures exist. 5 For function-free programs global SLS-resolution may be made effective by using the memoing techniques of <ref> [10, 26] </ref> to prune positive loops, and by also pruning negative loops.
Reference: [11] <author> K. Kunen. </author> <title> Negation in logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 4(4) </volume> <pages> 289-308, </pages> <year> 1987. </year>
Reference-contexts: The semantics of the program is then given by the logical consequences of the completion. For a detailed description of this approach see [27, 28, 13]. An alternative approach was taken by Fitting [7] and Kunen <ref> [11] </ref>, who interpreted the completion in terms of 3-valued logic in order to overcome some anomalies with the completion when interpreted in a 2-valued sense.
Reference: [12] <author> J. L. Lassez and K. Marriott. </author> <title> Explicit representation of terms defined by counter examples. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 3 </volume> <pages> 301-317, </pages> <year> 1987. </year>
Reference-contexts: Some results in this direction have been 19 presented in <ref> [12] </ref>, and some more recent work has described a process called "constructive negation" in which negative subgoals are used to generate negative bindings [4, 20]. Whether such methods will be useful in practice, or whether ground negation is sufficient for most purposes remains to be seen.
Reference: [13] <author> J. W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <address> New York, 2nd edition, </address> <year> 1987. </year>
Reference-contexts: The first approach, due to Clark [6], was to define the "completion" of a program. The semantics of the program is then given by the logical consequences of the completion. For a detailed description of this approach see <ref> [27, 28, 13] </ref>. An alternative approach was taken by Fitting [7] and Kunen [11], who interpreted the completion in terms of 3-valued logic in order to overcome some anomalies with the completion when interpreted in a 2-valued sense. <p> Nevertheless, for subclasses of programs we can guarantee termination. 2 We discuss this further in Section 7. 1.1 Terminology In this section we describe our notation, and the class of logic programs we consider. Where possible, we use the standard terminology of <ref> [13] </ref>. Definition 1.1: A normal program clause is a clause of the form A L 1 ; : : : ; L n where A is an atom, and L 1 ; : : : ; L n are (positive or negative) literals. <p> Such a result may be proved using a "switching lemma." See <ref> [13] </ref> for details. 12 that L = L 1 [ : : : [ L n [ f:q 1 ; : : : ; :q m g. <p> Gffi as an unrestricted derivation from G, i.e., a derivation in which we do not insist that unifiers be most general. (In the ground SLP-tree, such unifiers always make the resulting goal ground.) The proof of this lemma is then very similar to the proof of the "mgu lemma" in <ref> [13] </ref>, and the details are omitted here. 17 Lemma 5.3: Let G be a goal. <p> Whether such methods will be useful in practice, or whether ground negation is sufficient for most purposes remains to be seen. Restricting programs and goals to be "allowed" <ref> [13] </ref>, for example, guarantees freedom from floundering. Before we present our completeness result, we first address what has been termed the "universal query problem" [21]. Certain anomalies occur when working only with Herbrand interpretations. <p> Then fl 0 = , and so is indeed more general than . We cannot substitute P for P 0 in the third item in Theorem 6.2 as illustrated by Example 6.1. Some texts (for example <ref> [13] </ref>) make the implicit assumption that extra ground terms exist in order to prove completeness results. The purpose of the augmented program is to formally include sufficiently many such ground terms in the Herbrand universe.
Reference: [14] <author> M. J. Maher. </author> <title> Equivalences of logic programs. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 388-402, </pages> <address> Los Altos, CA, 1988. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Before we present our completeness result, we first address what has been termed the "universal query problem" [21]. Certain anomalies occur when working only with Herbrand interpretations. We define the augmented program, first introduced in [31], but discussed implicitly in <ref> [14] </ref>, and show how this allows us to restrict ourselves to Herbrand interpretations.
Reference: [15] <author> J. McCarthy. </author> <title> Circumscription a form of non-monotonic reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1) </volume> <pages> 27-39, </pages> <year> 1980. </year>
Reference-contexts: Various other approaches have been proposed. Minker's "Generalized Closed World Assumption" [16] which is based on minimal models is closely related to McCarthy's "Circumscription" <ref> [15] </ref>. Gelfond and Lifschitz have defined the class of "Stable Models," and argued that the semantics of a program be determined by these models [8]. In the context of disjunctive databases, Ross and Topor have introduced the "Disjunctive Database Rule" [23].
Reference: [16] <author> J. Minker. </author> <title> On indefinite databases and the closed world assumption. </title> <booktitle> In Proc. Sixth Conference on Automated Deduction, </booktitle> <pages> pages 292-308. </pages> <publisher> Springer Verlag, </publisher> <year> 1982. </year>
Reference-contexts: Unfortunately, SLS-resolution is not effective. However it was argued in [21] that SLS-resolution may be considered a theoretical construct, an ideal query answering procedure to which various effective approximations may be compared. Various other approaches have been proposed. Minker's "Generalized Closed World Assumption" <ref> [16] </ref> which is based on minimal models is closely related to McCarthy's "Circumscription" [15]. Gelfond and Lifschitz have defined the class of "Stable Models," and argued that the semantics of a program be determined by these models [8].
Reference: [17] <author> Y. N. Moschovakis. </author> <title> Elementary Induction on Abstract Structures. </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1974. </year>
Reference-contexts: For limit ordinal ff, I ff = [ I fi Note that 0 is a limit ordinal, and I 0 = ;. 2. For successor ordinal ff + 1, I ff+1 = V P (I ff ) 3. Finally, define I 1 = [ I ff Following <ref> [17] </ref>, for any literal p in I 1 , we define the stage of p (written stage p ) to be the least ordinal ff such that p 2 I ff .
Reference: [18] <author> H. Przymusinska and T. Przymusinski. </author> <title> Weakly perfect model semantics for logic programs. </title> <booktitle> In Proc. Fifth International Conference and Symposium on Logic Programming, </booktitle> <year> 1988. </year>
Reference-contexts: However, in a top-down system, the status of subgoals is unknown until they are themselves expanded, and so such a restriction on the selection of subgoals is unlikely to be useful. Observe that if R is not positivistic, then we will not be able to achieve completeness. Example 3.2: <ref> [18] </ref> Let P be the program p :s; q; :r r p; :q The model fs; :p; :q; :rg for P is well-founded.
Reference: [19] <author> T. Przymusinski. </author> <title> Every logic program has a natural stratification and an iterated fixed point model. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <year> 1989. </year>
Reference-contexts: Our construction relaxes this requirement by allowing all subsidiary SLP-trees to be constructed recursively. Recently, Przymusinski has independently defined a similar extension of SLS-resolution using induction on what he terms the "dynamic stratification" of a program <ref> [19] </ref>. Dynamic stratification corresponds roughly to what we have called the level of the global tree for a goal.
Reference: [20] <author> T. Przymusinski. </author> <title> On constructive negation in logic programming. </title> <booktitle> In Proceedings, North American Conference on Logic Programming, </booktitle> <year> 1989. </year>
Reference-contexts: Some results in this direction have been 19 presented in [12], and some more recent work has described a process called "constructive negation" in which negative subgoals are used to generate negative bindings <ref> [4, 20] </ref>. Whether such methods will be useful in practice, or whether ground negation is sufficient for most purposes remains to be seen. Restricting programs and goals to be "allowed" [13], for example, guarantees freedom from floundering.
Reference: [21] <author> T. Przymusinski. </author> <title> On the declarative and procedural semantics of logic programs. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5 </volume> <pages> 167-205, </pages> <year> 1989. </year>
Reference-contexts: For locally stratified programs (and hence also for stratified programs [5, 1, 30]) there is guaranteed to exist a unique perfect Herbrand model, so the semantics is well-defined in these cases. Based on the perfect model approach, Przymusinski introduced SLS-resolution <ref> [21] </ref>. SLS-resolution is a top-down procedural semantics that uses an extension of SLD-resolution to answer queries. Przymusinski showed that for stratified programs with non-floundering queries, SLS-resolution is sound and complete with respect to the perfect model of the program. Unfortunately, SLS-resolution is not effective. However it was argued in [21] that <p> SLS-resolution <ref> [21] </ref>. SLS-resolution is a top-down procedural semantics that uses an extension of SLD-resolution to answer queries. Przymusinski showed that for stratified programs with non-floundering queries, SLS-resolution is sound and complete with respect to the perfect model of the program. Unfortunately, SLS-resolution is not effective. However it was argued in [21] that SLS-resolution may be considered a theoretical construct, an ideal query answering procedure to which various effective approximations may be compared. Various other approaches have been proposed. Minker's "Generalized Closed World Assumption" [16] which is based on minimal models is closely related to McCarthy's "Circumscription" [15]. <p> Restricting programs and goals to be "allowed" [13], for example, guarantees freedom from floundering. Before we present our completeness result, we first address what has been termed the "universal query problem" <ref> [21] </ref>. Certain anomalies occur when working only with Herbrand interpretations. We define the augmented program, first introduced in [31], but discussed implicitly in [14], and show how this allows us to restrict ourselves to Herbrand interpretations. <p> Przymusinski proposes an alternative solution. In proving the soundness and completeness of SLS-resolution with respect to the perfect model semantics, he considers all perfect models rather than just perfect Herbrand models <ref> [21] </ref>. These models have to be models of a set of equality axioms known as Clark's equality axioms [6]. Theorem 6.2: (Completeness of global SLS-resolution) Let P be a program, and G = Q a non-floundering goal involving only symbols from P .
Reference: [22] <author> T. C. Przymusinski. </author> <title> On the declarative semantics of deductive databases and logic programs. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 193-216, </pages> <address> Los Altos, CA, 1988. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 23 </pages>
Reference-contexts: This method is sound with respect to the completion of the program, and is complete for Horn programs (possibly with negative subgoals in the goal only) [9]. Another approach was taken by Przymusinski <ref> [22] </ref>. Przymusinski defined the class of "perfect models" of a program, and argued that the semantics of the program be given by the logical consequences of the (unique) perfect model.
Reference: [23] <author> K. Ross and R. W. Topor. </author> <title> Inferring negative information from disjunctive databases. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4 </volume> <pages> 397-424, </pages> <year> 1988. </year> <note> Also appeared as Melbourne University Technical Report 87/1. </note>
Reference-contexts: Gelfond and Lifschitz have defined the class of "Stable Models," and argued that the semantics of a program be determined by these models [8]. In the context of disjunctive databases, Ross and Topor have introduced the "Disjunctive Database Rule" <ref> [23] </ref>. As a development of these approaches, Van Gelder, Ross and Schlipf [31] introduced the "Well-Founded Semantics" for logic programs with negation. For a discussion of the relationship between the well-founded semantics and the various other semantics see [31].
Reference: [24] <author> K. A. Ross. </author> <title> A procedural semantics for well-founded negation in logic programs. </title> <booktitle> In Proceedings of the Eighth ACM Symposium on Principles of Database Systems, </booktitle> <year> 1989. </year> <note> Also Stanford University Technical Report STAN-CS-88-1233. </note>
Reference-contexts: I would also like to thank the three anonymous referees for their suggested improvements to the paper, particularly for pointing out an error in the appendix of <ref> [24] </ref>.
Reference: [25] <author> K.A. Ross. </author> <title> Modular acyclicity and tail recursion in logic programs. </title> <note> Submitted for publication, </note> <year> 1990. </year>
Reference-contexts: This paper presents such a procedural semantics. Global SLS-resolution is not effective, as discussed below. However, for certain subclasses of programs, global SLS-resolution is effective. For acyclic programs [3, 2] or, more generally, for modularly acyclic programs <ref> [25] </ref> global SLS-resolution is effective. In the absence of function symbols, the Herbrand Base is finite, and so effective procedures exist. 5 For function-free programs global SLS-resolution may be made effective by using the memoing techniques of [10, 26] to prune positive loops, and by also pruning negative loops.
Reference: [26] <author> Hirohisa Seki and Hidenori Itoh. </author> <title> A query evaluation method for stratified programs under the extended cwa. </title> <booktitle> In Proc. Fifth International Conference and Symposium on Logic Programming, </booktitle> <year> 1988. </year>
Reference-contexts: For acyclic programs [3, 2] or, more generally, for modularly acyclic programs [25] global SLS-resolution is effective. In the absence of function symbols, the Herbrand Base is finite, and so effective procedures exist. 5 For function-free programs global SLS-resolution may be made effective by using the memoing techniques of <ref> [10, 26] </ref> to prune positive loops, and by also pruning negative loops.
Reference: [27] <author> J. C. Shepherdson. </author> <title> Negation as failure, II. </title> <journal> Journal of Logic Programming, </journal> <volume> 2(3) </volume> <pages> 185-202, </pages> <year> 1985. </year>
Reference-contexts: The first approach, due to Clark [6], was to define the "completion" of a program. The semantics of the program is then given by the logical consequences of the completion. For a detailed description of this approach see <ref> [27, 28, 13] </ref>. An alternative approach was taken by Fitting [7] and Kunen [11], who interpreted the completion in terms of 3-valued logic in order to overcome some anomalies with the completion when interpreted in a 2-valued sense.
Reference: [28] <author> J. C. Shepherdson. </author> <title> Negation in logic programming. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 19-88, </pages> <address> Los Altos, CA, 1988. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The first approach, due to Clark [6], was to define the "completion" of a program. The semantics of the program is then given by the logical consequences of the completion. For a detailed description of this approach see <ref> [27, 28, 13] </ref>. An alternative approach was taken by Fitting [7] and Kunen [11], who interpreted the completion in terms of 3-valued logic in order to overcome some anomalies with the completion when interpreted in a 2-valued sense.
Reference: [29] <author> M. H. Van Emden and R. A. Kowalski. </author> <title> The semantics of predicate logic as a programming language. </title> <journal> JACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <year> 1976. </year>
Reference-contexts: Based on the completion, Clark proposed a top-down procedural semantics known as "Negation as Failure," which when combined with SLD-resolution <ref> [29] </ref> is referred to as SLDNF-resolution. This method is sound with respect to the completion of the program, and is complete for Horn programs (possibly with negative subgoals in the goal only) [9]. Another approach was taken by Przymusinski [22].
Reference: [30] <author> A. Van Gelder. </author> <title> Negation as failure using tight derivations for general logic programs. </title> <booktitle> In Proc. Third IEEE Symposium on Logic Programming, </booktitle> <address> Salt Lake City, Utah, </address> <month> September </month> <year> 1986. </year> <note> Springer-Verlag. (Preliminary version also appears in Foundations of Deductive Databases and Logic Programming (J. </note> <editor> Minker, Ed.), </editor> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, CA, 1988.). </address>
Reference-contexts: Another approach was taken by Przymusinski [22]. Przymusinski defined the class of "perfect models" of a program, and argued that the semantics of the program be given by the logical consequences of the (unique) perfect model. For locally stratified programs (and hence also for stratified programs <ref> [5, 1, 30] </ref>) there is guaranteed to exist a unique perfect Herbrand model, so the semantics is well-defined in these cases. Based on the perfect model approach, Przymusinski introduced SLS-resolution [21]. SLS-resolution is a top-down procedural semantics that uses an extension of SLD-resolution to answer queries.
Reference: [31] <author> A. Van Gelder, K. A. Ross, and J. S. Schlipf. </author> <title> Unfounded sets and well-founded semantics for general logic programs. </title> <booktitle> In Proc. Seventh ACM Symposium on Principles of Database Systems, </booktitle> <year> 1988. </year> <note> Full version to appear in J.ACM. </note>
Reference-contexts: In the context of disjunctive databases, Ross and Topor have introduced the "Disjunctive Database Rule" [23]. As a development of these approaches, Van Gelder, Ross and Schlipf <ref> [31] </ref> introduced the "Well-Founded Semantics" for logic programs with negation. For a discussion of the relationship between the well-founded semantics and the various other semantics see [31]. The purpose of this paper is to present a top-down procedural implementation of the well-founded semantics. <p> As a development of these approaches, Van Gelder, Ross and Schlipf <ref> [31] </ref> introduced the "Well-Founded Semantics" for logic programs with negation. For a discussion of the relationship between the well-founded semantics and the various other semantics see [31]. The purpose of this paper is to present a top-down procedural implementation of the well-founded semantics. <p> A partial model is a partial interpretation that can be extended to a total model. 2 3 2 Unfounded Sets and the Well-Founded Semantics In this section we present the definition of the well-founded semantics for logic programs. For a more detailed presentation with examples see <ref> [31] </ref>. Definition 2.1: Let P be a program and H its Herbrand base. Let I be a given partial interpretation. <p> We now give an alternative definition of the well-founded partial model that has technical advantages for the proofs of our results. Define T P (I) = T P (I) [ I: 2 For a justification that it is a partial model see <ref> [31] </ref>. 4 Since T is monotonic, so is T . Let V P be defined by V P (I) = ( [ T k Again V P is monotonic, and has a least fixpoint. We can construct the least fixpoint of V P by the following transfinite iteration. <p> Restricting programs and goals to be "allowed" [13], for example, guarantees freedom from floundering. Before we present our completeness result, we first address what has been termed the "universal query problem" [21]. Certain anomalies occur when working only with Herbrand interpretations. We define the augmented program, first introduced in <ref> [31] </ref>, but discussed implicitly in [14], and show how this allows us to restrict ourselves to Herbrand interpretations.
Reference: [32] <author> A. Van Gelder, K. A. Ross, and J. S. Schlipf. </author> <title> Unfounded sets and well-founded semantics for general logic programs. </title> <journal> JACM, </journal> <note> (to appear). (Full paper). 24 </note>
Reference-contexts: Global SLS-resolution (and hence the well-founded semantics) captures the meaning of all well-behaved programs in the sense that every program without infinite recursion through 5 A polynomial time algorithm for constructing the well-founded model for function-free programs, that is bottom-up in nature, is given in <ref> [32] </ref>. 21 negation is given a semantics in which every ground atom is either true or false. For the perfect model approach, finite recursion through negation is only guaranteed for locally stratified programs.
References-found: 32

