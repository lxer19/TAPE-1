URL: http://www.cs.umn.edu/Users/dept/users/myriad/dataEng93.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/myriad/
Root-URL: http://www.cs.umn.edu
Title: Entity Identification in Database Integration  
Author: Ee-Peng Lim Satya Prabhakar Jaideep Srivastava James Richardson 
Address: Minneapolis, MN 55418 Minneapolis, MN 55455  
Affiliation: Department of Computer Science Honeywell SSDC University of Minnesota  
Abstract: The objective of entity identification is to determine the correspondence between object instances from more than one database. This paper examines the problem at the instance level assuming that schema level heterogeneity has been resolved a priori. Soundness and completeness are defined as the desired properties of any entity identification technique. To achieve soundness, a set of identity and distinctness rules are established for entities in the integrated world. We propose the use of extended key, which is the union of keys (and possibly other attributes) from the relations to be matched, and its corresponding identity rule, to determine the equivalence between tuples from relations which may not share any common key. Instance level functional dependencies (ILFD), a form of semantic constraint information about the real-world entities, are used to derive the missing extended key attribute values of a tuple. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Ahmed, P. DeSmedt, W. Du, B. Kent, M. Ketabchi, W. Litwin, A. Rafii, and M-C. Shan. </author> <title> The pegasus heterogeneous multidatabase system. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: User specified equivalence. This approach requires the user to specify equivalence between object instances, e.g. as a table that maps local object-ids to global object-ids, i.e. the responsibility of matching the object instances is assigned to the user. This technique has been suggested for the Pegasus project <ref> [1] </ref>. Since the matching table can be very large, this approach can potentially be cumbersome. 3. Use of probabilistic key equivalence. Instead of insisting on full key equivalence, Pu suggested matching object instances using only a portion of the key values in the restricted domain [11]. <p> For example, it is possible for a knowledgeable user to add entries directly to the matching table, e.g. as in <ref> [1] </ref>. We define the concept of extended key and extended key equivalence.
Reference: [2] <author> E. Bertino. </author> <title> Integration of heterogeneous data repositories by using object-oriented views. </title> <booktitle> In Proc. of the 1st Int'l Workshop on Interoperability in Multidatabase Systems, </booktitle> <year> 1991. </year>
Reference-contexts: We propose a new approach in section 4. Conclusion is given in section 5. 2 Background The task of integrating pre-existing autonomous databases has to resolve the logical heterogeneity that arises when the participating databases are designed independently of one another <ref> [2] </ref>. Logical heterogeneity can occur at two levels, namely schema level and instance level. The resolution of schema level heterogeneity is known as schema integration. The resolution of instance level heterogeneity is known as instance integration.
Reference: [3] <author> A. Chatterjee and A. Segev. </author> <title> Data manipulation in heterogeneous databases. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 20(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: The probabilistic nature of matching may also admit erroneous matching. 4. Use of probabilistic attribute equivalence. Chat--terjee and Segev proposed the use of all common attributes between two relations to determine entity equivalence <ref> [3] </ref>. For each pair of records from two relations, a value called comparison value is computed based on a probabilistic model. However, in section 2.1 we demonstrated that comparing common attribute values does not necessarily produce correct matching. 5. Use of heuristic rules.
Reference: [4] <author> U. Dayal. </author> <title> Processing queries over generalized hierarchies in a multidatabase systems. </title> <booktitle> In Proc. of the 9th VLDB Conf., </booktitle> <year> 1983. </year>
Reference-contexts: The key attributes are italicized in the table representation. To integrate relations R and S, we first have to determine which tuples in R and S, respectively, describe the same restaurant entity in the integrated world. A popular approach, of using common candidate key for identification <ref> [4, 5] </ref> does not work since R and S do not share a common candidate key. The common key attribute, name, may suggest that the first tuple in R and the first tuple in S refer to the same restaurant entity since they have the same value, i.e. name="VillageWok". <p> The above identity rule then is used by the technique called entity identification by key equivalence <ref> [4, 5] </ref>. Similar to identity rules, a set of distinctness rules can be defined to determine unmatched tuples.
Reference: [5] <author> L.G. DeMichiel. </author> <title> Resolving database incompatibility:an approach to performing relational operations over mismatched domains. </title> <journal> IEEE TKDE, </journal> <volume> 1(4), </volume> <year> 1989. </year>
Reference-contexts: The key attributes are italicized in the table representation. To integrate relations R and S, we first have to determine which tuples in R and S, respectively, describe the same restaurant entity in the integrated world. A popular approach, of using common candidate key for identification <ref> [4, 5] </ref> does not work since R and S do not share a common candidate key. The common key attribute, name, may suggest that the first tuple in R and the first tuple in S refer to the same restaurant entity since they have the same value, i.e. name="VillageWok". <p> The above identity rule then is used by the technique called entity identification by key equivalence <ref> [4, 5] </ref>. Similar to identity rules, a set of distinctness rules can be defined to determine unmatched tuples.
Reference: [6] <author> C. Galindo-Legaria and A. Rosenthal. </author> <title> How to extend a conventional optimizer to handle one- and two-sided outerjoin. </title> <booktitle> In Proc. of the Int'l Conf. on Data Eng., </booktitle> <pages> pages 402-409, </pages> <year> 1992. </year>
Reference-contexts: Let K R and K S be the keys of tables R and S respectively. The integrated table T RS can be expressed as M T RS $ $ 1 K S S where $ 1 denotes the full outerjoin operator <ref> [6] </ref>. 4.2 Matching Table Construction Let K R and K S be the key of R and S respectively.
Reference: [7] <author> W. Kent. </author> <title> The breakdown of the information model in mdbss. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 20(4), </volume> <month> De-cember </month> <year> 1991. </year>
Reference-contexts: This property does not hold for multiple autonomous databases and the problem of entity identification therefore arises. Kent described this as the fl Supported in part by contract #F30602-91-C-0128 from Rome Laboratory of the US Air Force. breakdown of the information model <ref> [7] </ref>. For example, when we add two tuples to a relation in a single database, the one-to-one correspondence between tuples and real-world entities ensures that the two new tuples refer to distinct real-world entities.
Reference: [8] <author> J.A. Larson, S.B. Navathe, and R. Elmasri. </author> <title> A theory of attribute equivalence in databases with application to schema integration. </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> 15(4), </volume> <month> April </month> <year> 1989. </year>
Reference-contexts: The synonym problem arises due to the fact that the attributes `employee number' in both relations are not semantically equivalent. Since semantically equivalent attributes can usually be determined at the schema integration stage <ref> [8, 13] </ref>, we assume that synonym problem would have been resolved before entity identification is performed. While homonym problem may arise due to semantically nonequivalent attributes, it can also be caused by the fact that the key of a relation is not a key in the integrated world.
Reference: [9] <author> E-P. Lim, J. Srivastava, S. Prabhakar, and J. Richardson. </author> <title> Entity identification in database integration. </title> <type> Technical Report TR 92-62, </type> <institution> Univ. of Minnesota, </institution> <year> 1992. </year>
Reference-contexts: In processing a federated database query, entity identification has to be performed whenever information about real-world entities exists in different databases. Our ongoing research is developing mechanism to do so. A Prolog-based prototype has been developed and detail about the system can be found in <ref> [9] </ref>.
Reference: [10] <author> D.V. McDermott. </author> <title> Non-monotonic logic 1. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1), </volume> <year> 1980. </year>
Reference-contexts: To guarantee soundness of the entity identification process, the technique used should be monotonic <ref> [10] </ref>. Definition (Monotonic Entity Identification Technique): An entity identification technique is monotonic if every pair of tuples determined by the technique to be matching/not matching remains so when additional information is supplied. Pictorially, we can visualize the relationships between pairs of tuples as a venn diagram shown in Figure 2.
Reference: [11] <author> C. Pu. </author> <title> Key equivalence in heterogeneous databases. </title> <booktitle> In Proc. of the 1st Int'l Workshop on Interoperability in Multidatabase Systems, </booktitle> <year> 1991. </year>
Reference-contexts: Since the matching table can be very large, this approach can potentially be cumbersome. 3. Use of probabilistic key equivalence. Instead of insisting on full key equivalence, Pu suggested matching object instances using only a portion of the key values in the restricted domain <ref> [11] </ref>. While this approach can produce a high confidence on the matching result, it is applicable only when a common key exists between relations. The probabilistic nature of matching may also admit erroneous matching. 4. Use of probabilistic attribute equivalence.
Reference: [12] <author> Y.R. Wang and S.E. Madnick. </author> <title> The inter-database instance identification problem in integrating autonomous systems. </title> <booktitle> In Proc. of the Int'l Conf. on Data Eng., </booktitle> <year> 1989. </year>
Reference-contexts: However, in section 2.1 we demonstrated that comparing common attribute values does not necessarily produce correct matching. 5. Use of heuristic rules. Wang and Madnick attacked the problem using a knowledge-based approach <ref> [12] </ref>. A set of heuristic rules are used to infer additional information about the object instances to be matched. Since the knowledge used is heuristic in nature, the matching result produced may not be correct.
Reference: [13] <author> C. Yu, W. Sun, S. Dao, and D. Kersey. </author> <title> Determining relationships among attributes for interoperability of multi-database systems. </title> <booktitle> In Proc. of the 1st Int'l Workshop on Interoperability in Multidatabase Systems, </booktitle> <year> 1991. </year>
Reference-contexts: The synonym problem arises due to the fact that the attributes `employee number' in both relations are not semantically equivalent. Since semantically equivalent attributes can usually be determined at the schema integration stage <ref> [8, 13] </ref>, we assume that synonym problem would have been resolved before entity identification is performed. While homonym problem may arise due to semantically nonequivalent attributes, it can also be caused by the fact that the key of a relation is not a key in the integrated world.
References-found: 13

