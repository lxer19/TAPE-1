URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rbd/www/papers/nyquist.ps.Z
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rbd/www/bib-arctic.html
Root-URL: 
Email: Email: dannenberg@cs.cmu.edu, mercer@cs.cmu.edu  
Title: Real-Time Software Synthesis on Superscalar Architectures DSPs for computer music are obsolete. The i860-with the
Author: Roger B. Dannenberg and Clifford W. Mercer 
Note: before  
Address: Pittsburgh, PA 15213 USA  
Affiliation: Carnegie Mellon University School of Computer Science  
Abstract: Advances in processor technology will make it possible to use general-purpose personal computers as real-time signal processors. This will enable highly-integrated ``all-software'' systems for music processing. To this end, the performance of a present generation superscalar processor running synthesis software is measured and analyzed. A real-time reimplementation of Fugue, now called Nyquist, takes advantage of the superscalar synthesis approach, integrating symbolic and signal processing. Performance of Nyquist is compared to Csound. pipelined arithmetic units. Instruction scheduling in the Superscalar architectures are expected to compute 500 to compiler assures that many floating point operations are 1000 million instructions per second (MIPS) by the end of computed in parallel. By the year 2000, we expect the decade. Software synthesis on superscalars will offer personal computers will deliver performance we now greater speed, flexibility, simplicity, and integration than associate with super-computers. This means that real-time today's systems based on DSP chips. We are developing a signal processing applications may no longer require real-time implementation of the composition and synthesis special-purpose hardware or digital signal processors. language Nyquist for these future processors. These applications can be supported in a single, integrated, Nyquist embraces a very high-level synthesis model, high-performance programming environment. where entire sounds are values which may be passed as There is, however, some debate over the viability of function parameters and returned as results. Nyquist is superscalars for signal processing. First, these systems attractive to composers, but difficult to implement. For rely on a memory hierarchy with caching at various levels example, infinite duration sounds offer flexibility to to provide instructions and data to the CPU. This is good composers, but require special implementation support. in that it provides the programmer with a very large flat When multiplied by a finite envelope, an infinite sound address space, but caching makes performance hard to computation is terminated and garbage collected to avoid predict relative to DSPs. Second, an integrated system wasteful computation. To allow infinite signals and to run requires real-time support from the operating system, yet in real time, signal computation must be incremental. most operating systems provide weak support (if any) for In this paper, we describe the advantages of the superscalar real-time applications. Third, cost will be an important architecture and indicate its future potential. We outline factor until personal computers are faster than low-cost the requirements that this architecture places on the plug-in DSP systems. Nyquist implementation and how these requirements are Nevertheless, we believe that it is only a matter of time met. And finally, we compare the performance of Nyquist the ``all software'' approach we believe will soon be the feature single-cycle execution of common instructions, the issue of multiple instructions per cycle, and multiple 1. Introduction
Abstract-found: 1
Intro-found: 1
Reference: [Dannenberg 86] <author> Dannenberg, R. B., P. McAvinney, and D. Rubine. </author> <title> Arctic: A Functional Language for Real-Time Systems. </title> <journal> Computer Music Journal 10(4) </journal> <pages> 67-78, </pages> <month> Winter, </month> <year> 1986. </year>
Reference-contexts: Even without the benefits of a superscalar processor and a real-time operating system, Csound illustrates impressive performance. Our work in this area began in 1983 with the design of Arctic <ref> [Dannenberg 86] </ref>, a very high-level language for real-time control. Arctic showed how a single language could integrate note-level event processing, control-signal generation, and audio synthesis. The language Nyquist is based on Fugue [Dannenberg 91a] which in turn is based on Arctic.
Reference: [Dannenberg 91a] <author> Dannenberg, R. B., C. L. Fraley, and P. Velikonja. Fugue: </author> <title> A Functional Language for Sound Synthesis. </title> <booktitle> Computer 24(7) </booktitle> <pages> 36-42, </pages> <month> July, </month> <year> 1991. </year>
Reference-contexts: Our work in this area began in 1983 with the design of Arctic [Dannenberg 86], a very high-level language for real-time control. Arctic showed how a single language could integrate note-level event processing, control-signal generation, and audio synthesis. The language Nyquist is based on Fugue <ref> [Dannenberg 91a] </ref> which in turn is based on Arctic. Nyquist offers a high-level and general treatment of scores, synthesis algorithms, and temporal behavior. Superscalar processors seem ideal to handle the mixture of symbolic and signal processing required by Nyquist.
Reference: [Dannenberg 91b] <author> Dannenberg, R. B., D. Rubine, </author> <title> 3 One might argue that the benchmark penalizes Csound by having only T. Neuendorffer. The Resource-Instance Model of Music a few simple control-rate envelopes: with enough control rate signals, Representation. </title> <editor> In B. Alphonse and B. Pennycook (editor), </editor> <title> Csound would probably win out, but if Nyquist is also allowed to ICMC Montreal 1991 Proceedings, pages 428-432. International compute at control rates (a feature of Nyquist), Nyquist's advantage will Computer Music Association, </title> <address> San Francisco, </address> <year> 1991. </year> <title> actually widen because even Nyquist's control-rate signals are processed in blocks. </title> <type> 4 </type>
Reference: [Jaffe 89] <author> Jaffe, D., and L. Boynton. </author> <title> An Overview of the Sound and Music Kit for the NeXT Computer. </title> <journal> Computer Music Journal 13(2) </journal> <pages> 48-55, </pages> <year> 1989. </year>
Reference-contexts: The authors also wish to thank Carla Scaletti [Scaletti 91] and NeXT sound kit <ref> [Jaffe 89] </ref> run our and Julius Smith for M56001 performance measurements, particular benchmark on a single M56001 at most 3 times Dean Rubine for many insights, Joe Newcomer for helping faster than Nyquist running on an RS/6000.
Reference: [Lindemann 91] <author> Lindemann, E., F. Dechelle, B. Smith, and M. Starkier. </author> <title> The Architecture of the IRCAM Musical Workstation. </title> <journal> Computer Music Journal 15(3) </journal> <pages> 41-49, </pages> <month> Fall, </month> <year> 1991. </year>
Reference: [Scaletti 91] <author> Scaletti, C., and K. Hebel. </author> <title> An Object-based Representation for Digital Audio Signals. Representations of Musical Signals. </title> <editor> In G. De Poli, A. Piccialli, and C. Roads, </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1991, </year> <pages> pages 371-389, </pages> <note> Chapter 11. </note>
Reference-contexts: The authors also wish to thank Carla Scaletti <ref> [Scaletti 91] </ref> and NeXT sound kit [Jaffe 89] run our and Julius Smith for M56001 performance measurements, particular benchmark on a single M56001 at most 3 times Dean Rubine for many insights, Joe Newcomer for helping faster than Nyquist running on an RS/6000.
Reference: [Vercoe 90] <author> Vercoe, B. and D. Ellis. </author> <title> Real-Time CSOUND: Software Synthesis with Sensing and Control. </title> <editor> In S. Arnold and G. Hair (editor), </editor> <booktitle> ICMC Glasgow 1990 Proceedings, </booktitle> <pages> pages 209-211. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1990. </year> <month> 5 </month>
References-found: 7

