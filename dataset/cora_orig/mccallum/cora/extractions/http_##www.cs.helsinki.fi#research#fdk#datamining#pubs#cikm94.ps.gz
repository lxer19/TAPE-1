URL: http://www.cs.helsinki.fi/research/fdk/datamining/pubs/cikm94.ps.gz
Refering-URL: http://www.cs.helsinki.fi/research/pmdm/datamining/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: mannila@cs.helsinki.fi  
Title: Finding Interesting Rules from Large Sets of Discovered Association Rules  
Author: Mika Klemettinen Heikki Mannila Pirjo Ronkainen Hannu Toivonen A. Inkeri Verkamo 
Address: P.O. Box 26, FIN-00014 University of Helsinki, Finland  
Affiliation: Department of Computer Science University of Helsinki  
Abstract: Association rules, introduced by Agrawal, Imielinski, and Swami, are rules of the form "for 90 % of the rows of the relation, if the row has value 1 in the columns in set W , then it has 1 also in column B". Efficient methods exist for discovering association rules from large collections of data. The number of discovered rules can, however, be so large that browsing the rule set and finding interesting rules from it can be quite difficult for the user. We show how a simple formalism of rule templates makes it possible to easily describe the structure of interesting rules. We also give examples of visualization of rules, and show how a visualization tool interfaces with rule templates. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rakesh Agrawal, Tomasz Imielinski, and Arun Swami. </author> <title> Mining association rules between sets of items in large databases. </title> <booktitle> In Proceedings of the 1993 International Conference on Management of Data (SIGMOD 93), </booktitle> <pages> pages 207 - 216, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: 84 % of the students that have taken Introduction to Unix, also have taken Programming in C, and that 34 % of all the students actually have taken both courses. 2 Given and fl, the collection of all association rules that hold in a data set can be computed efficiently <ref> [1, 2, 9] </ref>. These algorithms work in time proportional to the size of the database and the number and size of covering subsets. Specifically, one can find all covering subsets reasonably fast. <p> On average, a row has 5 courses. The total number of courses is 112. The goal in analyzing this data is to obtain accurate and useful information about the interrelationships between enrollments of various courses. Such relationships can be quite 1 Agrawal et al. <ref> [1] </ref> use the term large. complex, but they can be valuable, e.g., in the planning of the curriculum and in allocating resources.
Reference: [2] <author> Rakesh Agrawal and Ramakrishnan Srikant. </author> <title> Fast algorithms for mining association rules in large databases. </title> <booktitle> In VLDB '94, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: 84 % of the students that have taken Introduction to Unix, also have taken Programming in C, and that 34 % of all the students actually have taken both courses. 2 Given and fl, the collection of all association rules that hold in a data set can be computed efficiently <ref> [1, 2, 9] </ref>. These algorithms work in time proportional to the size of the database and the number and size of covering subsets. Specifically, one can find all covering subsets reasonably fast.
Reference: [3] <author> G.H. Collier. Thot-II: </author> <title> Hypertext with explicit semantics. </title> <booktitle> In ACM Hypertext '87 Proceedings, </booktitle> <pages> pages 269 - 289, </pages> <address> Chapel Hill, North Carolina, </address> <month> November </month> <year> 1987. </year>
Reference-contexts: If a node is joined with another node it is not obvious which of the connections of the joint node are strong enough to be visualized. One way to reduce complexity is to use a variation of the so-called Spiders technique <ref> [3] </ref>. This technique allows multiple instances of some nodes. A special case would be to use separate nodes for the left-hand side attributes and the right-hand side attributes.
Reference: [4] <author> E. R. Gansner, S. C. North, and K. P. Vo. </author> <title> DAG | a program that draws directed graphs. </title> <journal> Software| Practice and Experience, </journal> <volume> 18(11):1047 - 1062, </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: The wide research in drawing and visualizing ordinary graphs shows that even that problem is by no means easy (see e.g. EDGE [11], DAG <ref> [4] </ref>, or [15]); thus for the much harder problem of visualizing weighted hypergraphs we must be content with fairly simple solutions. We concentrate on an attribute graph model; simpler graphical alternatives include techniques such as the tree model [10, 16].
Reference: [5] <author> Jiawei Han, Yandong Cai, and Nick Cercone. </author> <title> Knowledge discovery in databases: an attribute-oriented approach. </title> <booktitle> In Proceedings of the 18th International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 547 - 559, </pages> <month> August </month> <year> 1992. </year>
Reference: [6] <author> Peter Hoschka and Willi Klosgen. </author> <title> A support system for interpreting statistical data. </title> <editor> In Gregory Piatetsky-Shapiro and William J. Frawley, editors, </editor> <booktitle> Knowledge Discovery in Databases, </booktitle> <pages> pages 325 - 345. </pages> <publisher> AAAI Press / The MIT Press, </publisher> <address> Menlo Park, CA, </address> <year> 1991. </year>
Reference-contexts: We suggest that this is done by giving the user a possibility to specify classes of both interesting and uninteresting rules. Hoschka and Klosgen deal with the problem of redundancy in their Explora system <ref> [6] </ref>. It uses partial orderings of attributes and attribute sets to avoid presenting several types of redundant knowledge. However, the two parameters of association rules | confidence and support | make it more difficult to define sensible limits and semantics for redundancy.
Reference: [7] <author> K. W. Kolence. </author> <title> The software empiricist. Performance Evaluation Review, </title> <address> 2(2):31 - 36, </address> <year> 1973. </year>
Reference-contexts: Another way to visualize rule significance is to create rectangles in which one side represents the confidence and the other side the support of a rule. Thus, the area of the rectangle represents the commonness of the two values. Also the Kiviat graphs <ref> [7, 8] </ref> could be useful for rule visualization. With the Rule Visualizer, the user can browse the rules in different modes: in textual, graphical, or combined mode (Figure 3). The graphs give a rough idea of the confidence and support even with a quick glance.
Reference: [8] <author> K. W. Kolence and P. J. Kiviat. </author> <title> Software unit profiles and Kiviat figures. Performance Evaluation Review, </title> <address> 2(3):2 - 12, </address> <year> 1973. </year>
Reference-contexts: Another way to visualize rule significance is to create rectangles in which one side represents the confidence and the other side the support of a rule. Thus, the area of the rectangle represents the commonness of the two values. Also the Kiviat graphs <ref> [7, 8] </ref> could be useful for rule visualization. With the Rule Visualizer, the user can browse the rules in different modes: in textual, graphical, or combined mode (Figure 3). The graphs give a rough idea of the confidence and support even with a quick glance.
Reference: [9] <author> Heikki Mannila, Hannu Toivonen, and A. Inkeri Verkamo. </author> <title> Efficient algorithms for discovering association rules. </title> <editor> In Usama M. Fayyad and Ramasamy Uthu-rusamy, editors, </editor> <booktitle> AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <pages> pages 181 - 192, </pages> <address> Seattle, Wash-ington, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: 84 % of the students that have taken Introduction to Unix, also have taken Programming in C, and that 34 % of all the students actually have taken both courses. 2 Given and fl, the collection of all association rules that hold in a data set can be computed efficiently <ref> [1, 2, 9] </ref>. These algorithms work in time proportional to the size of the database and the number and size of covering subsets. Specifically, one can find all covering subsets reasonably fast. <p> These algorithms work in time proportional to the size of the database and the number and size of covering subsets. Specifically, one can find all covering subsets reasonably fast. Additionally, one can obtain good approximations to the collection of association rules by using reasonably small samples <ref> [9] </ref>; the data sets of our case studies are representative of reasonable sample sizes. The set of all association rules holding in a data set provides a wealth of information about the data. For example, for all attributes we obtain all possible rules that explain the presence of the attribute. <p> We used this data to find association rules with the algorithm represented in <ref> [9] </ref>. With support threshold = 0:01 (corresponding to 11 students) there are 2010 association rules (with confidence threshold fl = 0:00). The largest left-hand side of a rule consists of 4 courses. <p> Rule Visualizer consists of three components: Rule Selection, Rule Browsing, and Rule Graph. The Rule Selection component is a tool for specifying the criteria for rules to be presented. It also includes the association rule discovery capability (see <ref> [9] </ref> for the algorithms). The Rule Browsing component is used for presenting rules separately, and the Rule Graph component visualizes a set of rules as a dependency graph. support thresholds, and a lower limit for their product | or commonness .
Reference: [10] <author> S. Moen. </author> <title> Drawing dynamic trees. </title> <journal> IEEE Software, </journal> <volume> 7(4):21 - 28, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: EDGE [11], DAG [4], or [15]); thus for the much harder problem of visualizing weighted hypergraphs we must be content with fairly simple solutions. We concentrate on an attribute graph model; simpler graphical alternatives include techniques such as the tree model <ref> [10, 16] </ref>. The basic idea of the graph model is to represent attributes as nodes and associations as directed arcs (see Figure 4). The thickness of an arc represents the confidence or support of the corresponding rule. Colors can be used for visualizing additional information.
Reference: [11] <author> F. N. Paulisch and W. F. Tichy. </author> <title> EDGE: An extendible graph editor. </title> <journal> Software|Practice and Experience, </journal> <volume> 20(S1):63 - 88, </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: The wide research in drawing and visualizing ordinary graphs shows that even that problem is by no means easy (see e.g. EDGE <ref> [11] </ref>, DAG [4], or [15]); thus for the much harder problem of visualizing weighted hypergraphs we must be content with fairly simple solutions. We concentrate on an attribute graph model; simpler graphical alternatives include techniques such as the tree model [10, 16].
Reference: [12] <author> Gregory Piatetsky-Shapiro. </author> <title> Discovery, analysis, and presentation of strong rules. </title> <editor> In Gregory Piatetsky-Shapiro and William J. Frawley, editors, </editor> <booktitle> Knowledge Discovery in Databases, </booktitle> <pages> pages 229 - 248. </pages> <publisher> AAAI Press / The MIT Press, </publisher> <address> Menlo Park, CA, </address> <year> 1991. </year>
Reference: [13] <editor> Gregory Piatetsky-Shapiro and William J. Frawley, editors. </editor> <title> Knowledge Discovery in Databases. </title> <publisher> AAAI Press / The MIT Press, </publisher> <address> Menlo Park, CA, </address> <year> 1991. </year>
Reference: [14] <author> Gregory Piatetsky-Shapiro and Christopher J. Matheus. </author> <title> The interestingness of deviations. </title> <editor> In Us-ama M. Fayyad and Ramasamy Uthurusamy, editors, </editor> <booktitle> AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <pages> pages 25 - 36, </pages> <address> Seattle, Washington, </address> <month> July </month> <year> 1994. </year>
Reference: [15] <author> L. A. Rowe, M. Davis, E. Messinger, C. Meyer, C. Spi-rakis, and A. Tuan. </author> <title> A browser for directed graphs. </title> <journal> Software|Practice and Experience, </journal> <volume> 17(1):61 - 76, </volume> <month> Jan-uary </month> <year> 1987. </year>
Reference-contexts: The wide research in drawing and visualizing ordinary graphs shows that even that problem is by no means easy (see e.g. EDGE [11], DAG [4], or <ref> [15] </ref>); thus for the much harder problem of visualizing weighted hypergraphs we must be content with fairly simple solutions. We concentrate on an attribute graph model; simpler graphical alternatives include techniques such as the tree model [10, 16].
Reference: [16] <author> J. Q. Walker II. </author> <title> A node-positioning algorithm for general trees. </title> <journal> Software|Practice and Experience, </journal> <volume> 20(7):685 - 705, </volume> <month> July </month> <year> 1990. </year> <month> 7 </month>
Reference-contexts: EDGE [11], DAG [4], or [15]); thus for the much harder problem of visualizing weighted hypergraphs we must be content with fairly simple solutions. We concentrate on an attribute graph model; simpler graphical alternatives include techniques such as the tree model <ref> [10, 16] </ref>. The basic idea of the graph model is to represent attributes as nodes and associations as directed arcs (see Figure 4). The thickness of an arc represents the confidence or support of the corresponding rule. Colors can be used for visualizing additional information.
References-found: 16

