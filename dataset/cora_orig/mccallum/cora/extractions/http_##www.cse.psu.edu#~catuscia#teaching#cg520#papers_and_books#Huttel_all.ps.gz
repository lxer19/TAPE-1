URL: http://www.cse.psu.edu/~catuscia/teaching/cg520/papers_and_books/Huttel_all.ps.gz
Refering-URL: http://www.cse.psu.edu/~catuscia/teaching/cg520/98Fall/assignments/Projects.html
Root-URL: http://www.cse.psu.edu
Title: Bisimulation Equivalence is Decidable for all Context-Free Processes  
Author: Soren Christensen Hans Huttel Colin Stirling 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J.C.M. Baeten, J.A. Bergstra, and J.W. Klop. </author> <title> Decidability of bisimula-tion equivalence for processes generating context-free languages. </title> <type> Technical Report CS-R8632, </type> <institution> CWI, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: A process is said to be normed if it can terminate in finitely many steps at any point during the execution. Even though normed BPA does not incorporate all regular processes, systems defined in this calculus can in general have infinitely many states. In <ref> [1, 2] </ref> Baeten, Bergstra and Klop proved the remarkable result that bisim-ulation equivalence is decidable on the class of normed context-free processes. fl Laboratory for Foundations of Computer Science, James Clerk Maxwell Building, Univer sity of Edinburgh, Edinburgh EH9 3JZ, Scotland. y Department of Mathematics and Computer Science, Aalborg University Centre, <p> final) section through a finite representability result; here the emphasis is on decomposition of pairs of bisimilar processes into "smaller" pairs of bisimilar processes such that only finitely many interesting pairs of bisimilar processes cannot be decomposed further. 2 BPA processes The class of recursive BPA (Basic Process Algebra) processes <ref> [1, 4] </ref> is defined by the following abstract syntax E ::= a j X j E 1 + E 2 j E 1 E 2 Here a ranges over a set of atomic actions Act, and X over a family of variables. <p> Any system of guarded BPA equations has a unique solution up to bisim-ulation equivalence [3]. Moreover, in <ref> [1] </ref> it is shown that any such system can be effectively presented in a normal form fX i = j=1 such that bisimilarity is preserved. From the transition rules we see that if X i w then E is just a sequence ff of variables. <p> Extra definitions and some preliminary results are needed to achieve this. A process ff 2 V ar + is normed if there is a w 2 Act + such that ff w ! *. When ff is normed we let the norm of ff, written as jffj following <ref> [1] </ref>, be defined as: jffj = minflength (w) j ff w By convention we also assume that j*j = 0. Clearly ff is normed just in case each variable occurring in it has a norm. <p> Lemma 3.2 If ff Xflff and fi Xflfi then ff fi. Proof: If ff Xflff and fi Xflfi then both ff and fi are solutions to the same (guarded) equation. As any system of guarded equations has a unique solution up to bisimulation equivalence <ref> [1] </ref> it follows that ff fi. 2 Let us call a OE 2 V ar fl a unifier for ff; fi 2 V ar fl if ff 6 fi but ffOE fiOE. Intuitively, a unifier repairs a bisimulation error by introducing a tail of infinite transitions.
Reference: [2] <author> J.C.M. Baeten, J.A. Bergstra, and J.W. Klop. </author> <title> Decidability of bisimulation equivalence for processes generating context-free languages. </title> <journal> JACM, </journal> <volume> 40 </volume> <pages> 653-682, </pages> <year> 1993. </year>
Reference-contexts: A process is said to be normed if it can terminate in finitely many steps at any point during the execution. Even though normed BPA does not incorporate all regular processes, systems defined in this calculus can in general have infinitely many states. In <ref> [1, 2] </ref> Baeten, Bergstra and Klop proved the remarkable result that bisim-ulation equivalence is decidable on the class of normed context-free processes. fl Laboratory for Foundations of Computer Science, James Clerk Maxwell Building, Univer sity of Edinburgh, Edinburgh EH9 3JZ, Scotland. y Department of Mathematics and Computer Science, Aalborg University Centre,
Reference: [3] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information and Control, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference-contexts: Any system of guarded BPA equations has a unique solution up to bisim-ulation equivalence <ref> [3] </ref>. Moreover, in [1] it is shown that any such system can be effectively presented in a normal form fX i = j=1 such that bisimilarity is preserved. From the transition rules we see that if X i w then E is just a sequence ff of variables.
Reference: [4] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process theory based on bisimulation semantics. </title> <editor> In J.W. de Bakker, W.P de Roever, and G. Rozenberg, editors, </editor> <volume> LNCS 354, </volume> <pages> pages 50-122. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: For finite-state processes all known behavioural equivalences can be seen to be decidable. In the setting of process algebra, an example of infinite-state systems is that of the transition graphs of processes in the calculus BPA (Basic Process Algebra) <ref> [4] </ref>. These are recursively defined processes with nondeterministic choice and sequential composition. A special case is that of normed BPA processes. A process is said to be normed if it can terminate in finitely many steps at any point during the execution. <p> final) section through a finite representability result; here the emphasis is on decomposition of pairs of bisimilar processes into "smaller" pairs of bisimilar processes such that only finitely many interesting pairs of bisimilar processes cannot be decomposed further. 2 BPA processes The class of recursive BPA (Basic Process Algebra) processes <ref> [1, 4] </ref> is defined by the following abstract syntax E ::= a j X j E 1 + E 2 j E 1 E 2 Here a ranges over a set of atomic actions Act, and X over a family of variables. <p> The relation is an equivalence, and moreover it is a congruence relation with respect to the operators + and , <ref> [4] </ref>. An alternative characterization of is via a sequence of approximations.
Reference: [5] <author> O. Burkart and B. Steffen. </author> <title> Model checking for context-free processes. </title> <booktitle> Proceedings of CONCUR'92, LNCS 630, </booktitle> <year> 1992. </year>
Reference-contexts: A similar result for full BPA would be a proper extension of Milner's axiom system for regular processes [18]. More generally this work addresses the area of infinite-state processes. Besides deciding equivalences there is also the question of model checking: a recent result <ref> [5] </ref> shows decidability for fragments of the modal mu-calculus in the case of normed BPA. There is also the question of pushdown automata processes (which 10 generate a richer family of transition graphs than BPA processes). [20] contains a very elegant characterization of their graphs.
Reference: [6] <editor> D. Caucal. Decidabilite de l`egalite des langages algebriques infinitaires sim-ples. </editor> <booktitle> In Proceedings of STACS 86, </booktitle> <volume> LNCS 210, </volume> <pages> pages 37-48. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: One remaining question to be answered is whether bisimulation equivalence is decidable for the full class of context-free processes. We here answer this question in the affirmative, using a technique inspired by Caucal's proof of the decidability of language equivalence for simple algebraic grammars (see <ref> [6] </ref>). In the first section we introduce an alternative characterisation of bisimu-lation equivalence, namely via a sequence of approximations, which will enable us to conclude semi-decidability of bisimulation inequivalence on the class of guarded context-free processes. <p> This means that bisimulation inequivalence is semi-decidable via the simple procedure which seeks the least i such that ff 6 i fi. Therefore we just need to establish the semi-decidability of bisimulation equivalence. The proof of this (inspired by <ref> [6, 7, 8] </ref>) relies on showing that there is a finite self-bisimulation relation which generates the bisimulation equivalence. 3.1 Self-bisimulations The notion of self-bisimulation was introduced by Didier Caucal in [8] (originally published as [7]). Here the notion of a least congruence is essential. <p> In the case of normed processes (where each variable in V ar is normed) the important property underpinning decidability of is that any bisimilar pair (Xff; Y fi) is decomposable (see <ref> [6] </ref>). Assuming that jXj jY j and that fi is not empty this 6 means that there is a decomposition of Xff into the two smaller (with respect to norm) subsequences Xfl and fi with Xfl Y . <p> Moreover, if R is a finite self-bisimulation then for some n it is an n-self-bisimulation. We now complete the proof that bisimulation equivalence is semi-decidable using a dovetailing technique (compare <ref> [6] </ref>). Let R 0 : : : R i : : : be an effective enumeration of all finite relations on (V fl fin V 1 ) [ V fl effective bijection.
Reference: [7] <author> D. </author> <month> Caucal. </month> <institution> Graphes canoniques de graphes algebriques. Rapport de Recherche 872, INRIA, </institution> <month> Juillet </month> <year> 1988. </year>
Reference-contexts: This means that bisimulation inequivalence is semi-decidable via the simple procedure which seeks the least i such that ff 6 i fi. Therefore we just need to establish the semi-decidability of bisimulation equivalence. The proof of this (inspired by <ref> [6, 7, 8] </ref>) relies on showing that there is a finite self-bisimulation relation which generates the bisimulation equivalence. 3.1 Self-bisimulations The notion of self-bisimulation was introduced by Didier Caucal in [8] (originally published as [7]). Here the notion of a least congruence is essential. <p> The proof of this (inspired by [6, 7, 8]) relies on showing that there is a finite self-bisimulation relation which generates the bisimulation equivalence. 3.1 Self-bisimulations The notion of self-bisimulation was introduced by Didier Caucal in [8] (originally published as <ref> [7] </ref>). Here the notion of a least congruence is essential.
Reference: [8] <author> D. </author> <title> Caucal. </title> <journal> Graphes canoniques de graphes algebriques. Informatique theorique et Applications (RAIRO), </journal> <volume> 24(4) </volume> <pages> 339-352, </pages> <year> 1990. </year> <month> 11 </month>
Reference-contexts: Caucal presented in <ref> [8] </ref> a more elegant (and shorter) proof of the same result utilising rewrite techniques. Finally, in [16] Huttel and Stirling presented yet another proof of the decidability result by appealing to the tableau method. <p> This means that bisimulation inequivalence is semi-decidable via the simple procedure which seeks the least i such that ff 6 i fi. Therefore we just need to establish the semi-decidability of bisimulation equivalence. The proof of this (inspired by <ref> [6, 7, 8] </ref>) relies on showing that there is a finite self-bisimulation relation which generates the bisimulation equivalence. 3.1 Self-bisimulations The notion of self-bisimulation was introduced by Didier Caucal in [8] (originally published as [7]). Here the notion of a least congruence is essential. <p> Therefore we just need to establish the semi-decidability of bisimulation equivalence. The proof of this (inspired by [6, 7, 8]) relies on showing that there is a finite self-bisimulation relation which generates the bisimulation equivalence. 3.1 Self-bisimulations The notion of self-bisimulation was introduced by Didier Caucal in <ref> [8] </ref> (originally published as [7]). Here the notion of a least congruence is essential. <p> Lemma 3.1 <ref> [8] </ref> If R is a self-bisimulation then ! R Corollary 3.1 ff fi iff there is a self-bisimulation R such that ffRfi. 5 3.2 Decompositions Our aim is to show that bisimulation equivalence on V ar fl is generable from a finite self-bisimulation.
Reference: [9] <author> S. Christensen. </author> <title> Decidability and decomposition in process algebra. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1993. </year>
Reference-contexts: Of more interest to concurrency theory are process languages with parallel combinators. Although bisimulation equivalence is undecidable for ACP, CCS, and CSP it is decidable for the calculus BPP (Basic Parallel processes), which is the recursive fragment of CCS with parallel but without the restriction operator <ref> [9, 10] </ref>. An open question is whether bisimulation is decidable in the case of the PA calculus which is BPA with an added parallel operator. Moreover there may be even finer useful equivalences which permit general decidability results.
Reference: [10] <author> S. Christensen, Y. Hirshfeld and F. </author> <title> Moller Bisimulation equivalence is decidable for basic parallel processes. </title> <booktitle> Proceedings of CONCUR'93, </booktitle> <volume> LNCS 715, </volume> <pages> 143-157, </pages> <year> 1993. </year>
Reference-contexts: Of more interest to concurrency theory are process languages with parallel combinators. Although bisimulation equivalence is undecidable for ACP, CCS, and CSP it is decidable for the calculus BPP (Basic Parallel processes), which is the recursive fragment of CCS with parallel but without the restriction operator <ref> [9, 10] </ref>. An open question is whether bisimulation is decidable in the case of the PA calculus which is BPA with an added parallel operator. Moreover there may be even finer useful equivalences which permit general decidability results.
Reference: [11] <author> J. F. Groote. </author> <title> A short proof of the decidability of bisimulation for normed BPA-processes. </title> <type> Tech. </type> <institution> Report Utrecht University 1992. </institution>
Reference: [12] <author> J.F. Groote and H. Huttel. </author> <title> Undecidable equivalences for basic process algebra. </title> <type> Technical Report ECS-LFCS-91-169, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <month> August </month> <year> 1991. </year>
Reference: [13] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction Over the past decade much attention has been devoted to the study of process calculi such as CCS, ACP and CSP <ref> [13] </ref>. Of particular interest has been the study of the behavioural semantics of these calculi as given by labelled transition graphs. One important question is when processes can be said to exhibit the same behaviour, and a plethora of behavioural equivalences exists today.
Reference: [14] <author> J. Hopcroft and J.D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: From the transition rules we see that if X i w then E is just a sequence ff of variables. The normal form is called Greibach Normal Form, GNF, by analogy with context-free grammars (without the empty production) in GNF (see e.g. <ref> [14] </ref>).
Reference: [15] <author> H. Huttel. </author> <title> Decidability, Behavioural Equivalences and Infinite Transition Graphs. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Finally, in [16] Huttel and Stirling presented yet another proof of the decidability result by appealing to the tableau method. The tableau based approach also supports a sound and complete sequent based equational theory for normed context-free processes (see <ref> [16, 15] </ref>). One remaining question to be answered is whether bisimulation equivalence is decidable for the full class of context-free processes. We here answer this question in the affirmative, using a technique inspired by Caucal's proof of the decidability of language equivalence for simple algebraic grammars (see [6]). <p> As the proof involves two semi-decision procedures it is not obvious how to determine the complexity of solving this problem. Moreover it does not provide us with an intuitive technique for deciding bisimilarity as does the tableau method in <ref> [16, 15] </ref> which also has the advantage of providing us with a way of extracting a complete axiomatization for normed BPA processes. A similar result for full BPA would be a proper extension of Milner's axiom system for regular processes [18].
Reference: [16] <author> H. Huttel and C. Stirling. </author> <title> Actions speak louder than words: Proving bisim-ilarity for context-free processes. </title> <booktitle> In Proceedings of 6th Annual Symposium on Logic in Computer Science (LICS 91), </booktitle> <pages> pages 376-386. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Caucal presented in [8] a more elegant (and shorter) proof of the same result utilising rewrite techniques. Finally, in <ref> [16] </ref> Huttel and Stirling presented yet another proof of the decidability result by appealing to the tableau method. The tableau based approach also supports a sound and complete sequent based equational theory for normed context-free processes (see [16, 15]). <p> Finally, in [16] Huttel and Stirling presented yet another proof of the decidability result by appealing to the tableau method. The tableau based approach also supports a sound and complete sequent based equational theory for normed context-free processes (see <ref> [16, 15] </ref>). One remaining question to be answered is whether bisimulation equivalence is decidable for the full class of context-free processes. We here answer this question in the affirmative, using a technique inspired by Caucal's proof of the decidability of language equivalence for simple algebraic grammars (see [6]). <p> As the proof involves two semi-decision procedures it is not obvious how to determine the complexity of solving this problem. Moreover it does not provide us with an intuitive technique for deciding bisimilarity as does the tableau method in <ref> [16, 15] </ref> which also has the advantage of providing us with a way of extracting a complete axiomatization for normed BPA processes. A similar result for full BPA would be a proper extension of Milner's axiom system for regular processes [18].
Reference: [17] <author> Dung T. Huynh and Lu Tian. </author> <title> On deciding readiness and failure equivalences for processes. </title> <type> Technical Report UTDCS-31-90, </type> <institution> University of Texas at Dallas, </institution> <month> September </month> <year> 1990. </year>
Reference: [18] <author> R. Milner. </author> <title> A complete inference system for a class of regular behaviours. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28 </volume> <pages> 439-466, </pages> <year> 1984. </year>
Reference-contexts: The theory of finite-state systems and their equivalences can now be said to be well-established. There are many automatic verification tools for their analysis which incorporate equivalence checking. Sound and complete equational theories exist for the various known equivalences, an elegant example is <ref> [18] </ref>. One may be led to wonder what the results will look like for infinite-state systems. Although language equivalence is decidable for finite-state processes, it is undecidable when one moves beyond finite automata to context-free languages. For finite-state processes all known behavioural equivalences can be seen to be decidable. <p> A similar result for full BPA would be a proper extension of Milner's axiom system for regular processes <ref> [18] </ref>. More generally this work addresses the area of infinite-state processes. Besides deciding equivalences there is also the question of model checking: a recent result [5] shows decidability for fragments of the modal mu-calculus in the case of normed BPA.
Reference: [19] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1989. </year>
Reference-contexts: 2 Act - p ! p 0 implies q a ! q 0 and p 0 n q 0 for some q 0 - q ! q 0 implies p a ! p 0 and p 0 n q 0 for some p 0 It is a standard result, see <ref> [19] </ref> for instance, that for any image-finite labelled transition graph (that is, where for each p and a the set fq j p a ! qg is finite): = n=0 Clearly, the transition graph for any family of guarded BPA processes is image-finite.
Reference: [20] <author> D. Muller and P. Schupp. </author> <title> The theory of ends, pushdown automata, and second-order logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 37 </volume> <pages> 51-75, </pages> <year> 1985. </year> <month> 12 </month>
Reference-contexts: There is also the question of pushdown automata processes (which 10 generate a richer family of transition graphs than BPA processes). <ref> [20] </ref> contains a very elegant characterization of their graphs. Of more interest to concurrency theory are process languages with parallel combinators.
References-found: 20

