URL: http://www.cs.arizona.edu/people/gene/PAPERS/assembly.overview.ps
Refering-URL: http://www.cs.arizona.edu/people/gene/vita.html
Root-URL: http://www.cs.arizona.edu
Title: Advances in Sequence Assembly  
Author: Eugene W. Myers 
Abstract: This article surveys the current state of affairs with regard to software for sequence assembly. We try to give some appreciation of the underlying combinatorial problems involved and the nature of the computer codes or algorithms used to solve them. The article further discusses the requirements that should reasonably be met by the user-interface that drives the computational components. This discussion is intended to give the reader a perspective on how to evaluate the software systems currently available to them. Finally, the article discusses current research on algorithms for fragment assembly and the nature of the improvements that can be expected in the near future. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allison, D.P., Thompson, J.R., Jacobson, </author> <title> K.B., Warmack, R.J. and Ferrell, T.L. (1990). "Scanning tunneling microscopy and spectroscopy of plasmid DNA". </title> <journal> Scanning Microsc. </journal> <volume> 4, </volume> <pages> 517-522. </pages>
Reference-contexts: More exotic technologies, such as directly reading the sequence of a single strand with a scanning tunneling microscope <ref> (Allison et al., 1990) </ref>, are contemplated but well into the future.
Reference: <author> Dear, S., and Staden, R. </author> <year> (1991). </year> <title> "A sequence assembly and editing program for efficient management of large projects". </title> <journal> Nuc. Acids Res. </journal> <volume> 19, </volume> <pages> 3907-3911. </pages>
Reference-contexts: The first software to be based on a reasonably firm analytic foundation was the SEQAID tool (Peltola, 1984). These systems were not highly interactive and designed for a simple ASCII terminal interface. While the most recent systems have significantly improved window-based, menu-driven interfaces <ref> (e.g. Dear & Staden, 1991) </ref>, the capabilities of the current workstation technology have not been fully utilized. Moreover, in many cases the underlying algorithm suite is still quite naive and facilities such as revision control (1.4), constraints (1.5, 1.6), and seamless integration (1.7) to other tools are not realized.
Reference: <author> Drmanac, R., Labat, I., Brukner, I., and Crkvenjakov, R. </author> <year> (1989). </year> <title> "Sequencing of megabase plus DNA by hybridization: Theory of the method". </title> <booktitle> Genomics 4, </booktitle> <pages> 114-128. </pages>
Reference-contexts: Besides shotgun strategies, there are many other distinctive approaches that are very actively being pursued in an attempt to produce more economical, accurate, and faster methods. For example, there is much excitement about sequencing by hybridization <ref> (Drmanac et al., 1989) </ref>. However, it should be noted that most of these proposals really amount to very rapid ways to produce fragment data, and still beg the problem of assembling the fragments.
Reference: <author> Feng, D. and Doolittle, R. </author> <year> (1987). </year> <title> "Progressive sequence alignment as a prerequisite to correct phylogenetic trees", </title> <journal> J. Mol. Evol. </journal> <volume> 25, </volume> <pages> 351-360. </pages>
Reference-contexts: This is always possible, computationally efficient, and since the error rate is typically less than 10% produces a very good first approximation (unlike the related work on protein sequences that are 70% different <ref> (Feng & Doolittle, 1987) </ref>). In a second step, a "window" is swept over this initial alignment to optimize the alignment in subregions where the use of global overlap alignments produced locally nonoptimal subalignments.
Reference: <author> Gingeras, T.R., Milazzo, J.P., Sciaky, D. and Roberts, R.J. </author> <year> (1979). </year> <title> "Computer programs for the assembly of DNA sequences". </title> <journal> Nuc. Acids Res. </journal> <volume> 7, </volume> <pages> 529-545. </pages>
Reference-contexts: The earliest work was so ad hoc in nature that a formal statement of the problem the software was attempting to solve was not given and the underlying algorithms did little more than assist in "melding" fragments together <ref> (Staden, 1979, Gingeras et al., 1979) </ref>. <p> Software Systems for Fragment Assembly Early software systems did little more than assist in melding fragments together <ref> (Staden, 1979, Gingeras et al., 1979) </ref>. The first software to be based on a reasonably firm analytic foundation was the SEQAID tool (Peltola, 1984). These systems were not highly interactive and designed for a simple ASCII terminal interface. While the most recent systems have significantly improved window-based, menu-driven interfaces (e.g.
Reference: <author> Huang, X, </author> <year> (1992). </year> <title> "A contig assembly program based on sensitive detection of fragment overlaps". </title> <booktitle> Genomics 14, </booktitle> <pages> 18-25. </pages>
Reference: <author> Kececioglu, J.D. </author> <year> (1991). </year> <title> "Exact and approximate algorithms for DNA sequence reconstruction". </title> <type> Ph.D. Thesis. Technical Report 91-26, </type> <institution> Dept. of Computer Science, U. of Arizona, </institution> <address> Tucson, AZ 85721. </address>
Reference: <author> Kececioglu, J.D. and Myers, E.W. </author> <year> (1992). </year> <title> "Combinatorial algorithms for DNA sequence assembly". </title> <note> Accepted for publication in Algorithmica. </note>
Reference-contexts: However, empirically the problems that arise in practice can be solved quite well by sufficiently powerful algorithms. Such algorithms generally decompose the problem into the three phases depicted in Figure 2.1. We discuss each phase and in particular our approaches to them <ref> (Kececioglu & Myers, 1992) </ref>. - 7 - (fragments) GF assembly whenever desired Invoke to peruse current as data is generated Invoke on each fragment . . 2nd best solution (overlap graph) N = total nucleotides 1st best solution 2.5 minutes/solution c = average coverage 500 fragments of length 300 1 minute/fragment <p> Finally, we turn attention to constraints (1.5 and 1.6). Such capabilities must be supported by the underlying algorithms for assembly (1.e). To date, no system has such capabilities and we are the first to address it at the algorithmic level <ref> (Kececioglu & Myers, 1992) </ref>. Our relaxation approach to the layout phase naturally supports constraints: the spanning tree generator algorithm already produces alternate trees by placing constraints on the edges (i.e. overlaps) that must be in or not in the next spanning tree.
Reference: <author> Lander, E.S. and Waterman, M.S. </author> <year> (1988). </year> <title> "Genomic mapping by fingerprinting random clones: </title> <journal> a mathematical analysis". </journal> <volume> Genomics 2, </volume> <pages> 231-239. </pages>
Reference-contexts: However, for the large stretches anticipated, coverage is a significant problem. Statistical considerations alone show that if one sequences six genome equivalents of 1kbp fragments of a 50kbp clone, then one can expect two to six gaps in the resulting assemblages of the data <ref> (Lander & Waterman, 1988) </ref>. Of course, biological and experimental considerations tend to further increase this number. It is clear that in order to achieve closure other techniques such as directed sequencing or PCR must be employed near the end of a large-scale shotgun project.
Reference: <author> Maier, D. </author> <year> (1978). </year> <title> "The complexity of some problems on subsequences and supersequences". </title> <editor> J. </editor> <booktitle> of the ACM 25, </booktitle> <pages> 322-336. </pages>
Reference-contexts: The criterion that R be as short as possible is an appeal to the principle of parsimony: R is the shortest possible explanation of all the data F. Theoretically the problem is in the class of NP-hard problems <ref> (Maier, 1978) </ref> implying that a procedure that is guaranteed to be computationally efficient for all problem instances probably does not exist. However, empirically the problems that arise in practice can be solved quite well by sufficiently powerful algorithms.
Reference: <author> Maxam, A.M., and Gilbert, W. </author> <year> (1977). </year> <title> "A new method for sequencing DNA". </title> <booktitle> Proc. </booktitle> <institution> NatL. Acad. Sci. </institution> <address> USA 74, 560-564. </address> - <note> 15 - Miller, </note> <editor> S. and Myers, E.W. </editor> <year> (1991). </year> <title> "A fragment assembly project environment". </title> <type> Technical Report 91-17, </type> <institution> Dept. of Computer Science, U. of Arizona, </institution> <address> Tucson, AZ 85721. </address>
Reference: <author> Myers, E.W. </author> <year> (1986). </year> <title> "Incremental alignment algorithms and their applications". </title> <type> Technical Report 86-2, </type> <institution> Dept. of Computer Science, U. of Arizona, </institution> <address> Tucson, AZ 85721. </address>
Reference-contexts: We advocate a full-sensitivity approach, as opposed to heuristics which occasionally miss significant overlaps. Our own algorithms score each overlap based on its statistical significance. We are the only ones to do so and can do it because of an incremental alignments algorithm we developed specifically for this problem <ref> (Myers, 1986) </ref>. Efficiency, without losing sensitivity, is afforded by the further use of a Four-Russians prescreener (Wu et al., 1992). For a problem with 500 fragments of average length 300, we can perform this com-putationally intensive step in 3 hours on a 20MHz workstation.
Reference: <author> Peltola, H., So"derlund, H. and Ukkonen, E. </author> <year> (1984). </year> <title> "SEQAID: A DNA sequence assembly program based on a mathematical model". </title> <journal> Nuc. Acids Res. </journal> <volume> 12, </volume> <pages> 307-321. </pages>
Reference-contexts: As work progressed it became clear <ref> (Peltola et al. 1984, Turner, 1986, Kececioglu 1991) </ref> that the formal problem for a shotgun problem addressing items (1.a), (1.b), and (1.c) was in essence a "noisy" shortest common superstring problem: The Fragment Assembly Problem: Given a collection of fragments F and a small error toler ance e [0,1], find the <p> Software Systems for Fragment Assembly Early software systems did little more than assist in melding fragments together (Staden, 1979, Gingeras et al., 1979). The first software to be based on a reasonably firm analytic foundation was the SEQAID tool <ref> (Peltola, 1984) </ref>. These systems were not highly interactive and designed for a simple ASCII terminal interface. While the most recent systems have significantly improved window-based, menu-driven interfaces (e.g. Dear & Staden, 1991), the capabilities of the current workstation technology have not been fully utilized.
Reference: <author> Sanger, F., Nicklen, S., and Coulson, A.R. </author> <year> (1977). </year> <title> "DNA sequencing with chain-terminating inhibitors". </title> <booktitle> Proc. </booktitle> <institution> NatL. Acad. Sci. </institution> <address> USA 74, </address> <pages> 5463-5467. </pages>
Reference: <author> Sanger, F., Coulson, A.R., Hong, G.F., Hill, D.F., and Petersen, G.B. </author> <year> (1982). </year> <title> "Nucleotide sequence of bacteriophage l DNA". </title> <journal> J. Mol. Biol.. </journal> <volume> 162, </volume> <pages> 729-773. </pages>
Reference-contexts: Current Address: Dept. of Computer Science, University of Arizona, Tucson, AZ 85721. - 2 - A variety of schemes have been proposed for sequencing such large stretches. The traditional shotgun approach still has a great deal of appeal because it is economical, parallelizable, and automatable <ref> (Sanger et al., 1982) </ref>. However, for the large stretches anticipated, coverage is a significant problem.
Reference: <author> Staden, R. </author> <year> (1979). </year> <title> "A strategy of DNA sequencing employing computer programs". </title> <journal> Nuc. Acids Res. </journal> <volume> 7, </volume> <pages> 2601-2610. </pages>
Reference-contexts: The earliest work was so ad hoc in nature that a formal statement of the problem the software was attempting to solve was not given and the underlying algorithms did little more than assist in "melding" fragments together <ref> (Staden, 1979, Gingeras et al., 1979) </ref>. <p> Software Systems for Fragment Assembly Early software systems did little more than assist in melding fragments together <ref> (Staden, 1979, Gingeras et al., 1979) </ref>. The first software to be based on a reasonably firm analytic foundation was the SEQAID tool (Peltola, 1984). These systems were not highly interactive and designed for a simple ASCII terminal interface. While the most recent systems have significantly improved window-based, menu-driven interfaces (e.g.
Reference: <author> Staden, R. </author> <title> (1982) "Automation of the computer handling of gel reading data produced by the shotgun method of DNA sequence". </title> <journal> Nuc. Acids Res. </journal> <volume> 10, </volume> <pages> 4731-4751. </pages>
Reference-contexts: In terms of the overlap graph this problem reduces to one of finding a maximum weight Hamiltonian path through G (Turner, 1986, Kececioglu, 1991). Whereas previous investigators have used a simple greedy heuristic <ref> (Staden, 1982, Peltola et al., 1984, Huang, 1992) </ref> to find a Hamiltonian path whose weight is near the optimal, we are the first to use a relaxation approach: we took an efficient algorithm for the com-putationally tractable problem of generating directed spanning trees in order of score, and ran this generator
Reference: <author> Studier, F.W. </author> <year> (1989). </year> <title> "A strategy for high-volume sequencing of cosmid DNAs: Random and directed priming with a library of oligonucleotides". </title> <booktitle> Proc. </booktitle> <institution> Natl. Acad. Sci. </institution> <address> USA 86, </address> <pages> 6917-6921. </pages>
Reference-contexts: In another direction, improvements in the cost of producing primer oligonucleotides may make it quite economical to directly sequence large stretches via primer walking <ref> (Studier, 1989) </ref>. PCR using oft-occurring subsequences or transposable elements as primers can be used to obtain multiple start - 3 - points for such directed walks, so that a higher level of parallelism can be achieved.
Reference: <author> Turner, J. </author> <year> (1986). </year> <title> "Approximation algorithms for the shortest common superstring problem". </title> <type> Technical Report WUCS-86-16, </type> <institution> Dept. of Computer Science, Washington University, St. </institution>
Reference-contexts: In terms of the overlap graph this problem reduces to one of finding a maximum weight Hamiltonian path through G <ref> (Turner, 1986, Kececioglu, 1991) </ref>.
Reference: <author> Louis, </author> <type> MO 63130. </type>
Reference: <institution> U.S. Dept. of Energy (1992). Human Genome: </institution> <note> 1991-92 Program Report. Available from the National Technical Information Service, </note> <institution> U.S. Dept. of Commerce, 5285 Port Royal Rd., </institution> <address> Springfield, VA 22161. </address>
Reference-contexts: But today, projects to sequence entire cosmids or small YACs of 40,000 to 200,000 nucleotides are routinely being undertaken, propelled by goals such as the Human Genome Initiative <ref> (U.S. Dept. of Energy, 1992) </ref>. hhhhhhhhhhhhhhhhhh This work was supported in part by the National Library of Medicine under Grant R01 LM04960 and the Aspen Center for Physics.
Reference: <author> Wu, S., Manber, U. and Myers, E.W. </author> <year> (1992). </year> <title> "A sub-quadratic algorithm for approximate limited expression matching". </title> <type> Technical Report 92-36, </type> <institution> Dept. of Computer Science, U. of Arizona, </institution> <address> Tucson, AZ 85721. </address> <note> Also submitted to Algorithmica. </note>
Reference-contexts: We are the only ones to do so and can do it because of an incremental alignments algorithm we developed specifically for this problem (Myers, 1986). Efficiency, without losing sensitivity, is afforded by the further use of a Four-Russians prescreener <ref> (Wu et al., 1992) </ref>. For a problem with 500 fragments of average length 300, we can perform this com-putationally intensive step in 3 hours on a 20MHz workstation. Moreover, this computation can be amortized over the period of data entry which for the project above was six months.
References-found: 22

