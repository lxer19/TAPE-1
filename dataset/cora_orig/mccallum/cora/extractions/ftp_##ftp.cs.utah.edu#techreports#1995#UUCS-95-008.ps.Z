URL: ftp://ftp.cs.utah.edu/techreports/1995/UUCS-95-008.ps.Z
Refering-URL: http://www.cs.utah.edu/~willrich/async/mypapers.html
Root-URL: 
Title: Fred: An Architecture for a Self-Timed Decoupled Computer  
Author: William F. Richardson and Erik Brunvand 
Date: May 8, 1995  
Address: Salt Lake City, UT 84112 USA  
Affiliation: Department of Computer Science University of Utah  
Pubnum: UUCS-95-008  
Abstract: Decoupled computer architectures provide an effective means of exploiting instruction level parallelism. Self-timed micropipeline systems are inherently decoupled due to the elastic nature of the basic FIFO structure, and may be ideally suited for constructing decoupled computer architectures. Fred is a self-timed decoupled, pipelined computer architecture based on micropipelines. We present the architecture of Fred, with specific details on a micropipelined implementation that includes support for multiple functional units and out-of-order instruction completion due to the self-timed decoupling. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Erik Brunvand. </author> <title> Using FPGAs to prototype a self-timed computer. </title> <booktitle> In International Workshop on Field Programmable Logic and Applications, </booktitle> <institution> Vienna University of Technology, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: The NSR was built using FPGAs. It is pipelined and decoupled, but doesn't handle exceptions. It is a simple 16-bit processor with only sixteen instructions, since it was built partially as an exercise in using FPGAs for rapid prototyping of self-timed circuits <ref> [1] </ref>. The Amulet A group at Manchester has built a self-timed micropipelined VLSI implementation of the ARM processor [6] which is an extremely power-efficient commercial microprocessor. The Amulet is a real processor in the sense that it mimics the behavior of an existing commercial processor and it handles simple exceptions.
Reference: 2. <author> Erik Brunvand. </author> <title> The NSR processor. </title> <booktitle> In Proceedings of the 26th Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 428-435, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: The processor as implemented has a small 16-bit instruction set, uses a simple two-stage fetch-execute pipeline, is not decoupled, and FRED: AN ARCHITECTURE FOR A SELF-TIMED DECOUPLED COMPUTER 3 does not handle exceptions. It has been fabricated both in CMOS and GaAs. The NSR The NSR (Non-Synchronous RISC) processor <ref> [2, 15] </ref> is structured as a five-stage pipeline where each pipe stage operates concurrently and communicates over self-timed data channels in the style of micropipelines. Branches, jumps, and memory accesses are also decoupled through the use of additional FIFO queues which can hide the execution latency of these instructions. <p> More details on building systems using a two-phase micropipeline circuit style can be found elsewhere [18, 15, 14]. 4 The Fred Architecture The Fred architecture is based roughly on the NSR architecture developed at the University of Utah <ref> [2, 15] </ref>. As such it consists of several decoupled independent processes connected by FIFO queues of various lengths, an approach which we believe offers a number of advantages over a clocked synchronous organization. The Fred architecture specifies the instruction set and the general layout and behavior of the processor.
Reference: 3. <author> Wesley A. Clark and Charles A. Molnar. </author> <title> Macromodular system design. </title> <type> Technical Report 23, </type> <institution> Computer Systems Laboratory, Washington University, </institution> <month> April </month> <year> 1973. </year>
Reference-contexts: Early work in asynchronous computer architecture includes the Macromodule project during the early 70's at Washington University <ref> [3] </ref> and the self-timed dataflow machines built at the University of Utah in the late 70's [4]. Although these projects were successful in many ways, asynchronous processor design did not progress much, perhaps because the circuit concepts were a little too far ahead of the available technology.
Reference: 4. <author> A.L. Davis. </author> <title> The architecture and system method for DDM1: A recursively structured data-driven machine. </title> <booktitle> In 5th Annual Symp. on Computer Architecture, </booktitle> <month> April </month> <year> 1978. </year>
Reference-contexts: Early work in asynchronous computer architecture includes the Macromodule project during the early 70's at Washington University [3] and the self-timed dataflow machines built at the University of Utah in the late 70's <ref> [4] </ref>. Although these projects were successful in many ways, asynchronous processor design did not progress much, perhaps because the circuit concepts were a little too far ahead of the available technology.
Reference: 5. <author> Matthew Farrens, Pius Ng, and Phil Nico. </author> <title> A comparison of superscalar and decoupled access/execute architectures. </title> <booktitle> In Proceedings of the 26th Annual ACM/IEEE International Symposium on Microarchitecture, </booktitle> <address> Austin, Texas, </address> <month> December </month> <year> 1993. </year> <pages> IEEE,ACM. </pages>
Reference-contexts: Experience has shown the difficulty of writing parallel programs, yet most sequential programs have an (arguably) significant amount of instruction-level parallelism [13, 20] 1 . One way of exploiting this parallelism is by decoupling the memory access portion of an instruction stream from the execution portion <ref> [7, 21, 5] </ref>. By performing the two operations independently, peaks and valleys in 1 Nicolau claims there is lots of parallelism available. Wall claims there's some, but not much. FRED: AN ARCHITECTURE FOR A SELF-TIMED DECOUPLED COMPUTER 2 each may be smoothed, resulting in an overall performance gain.
Reference: 6. <author> S. B. Furber, P. Day, J. D. Garside, N. C. Paver, and J. V. Woods. </author> <title> A micropipelined ARM. In Proceedings of the VII Banff Workshop: Asynchronous Hardware Design, Banff, Canada, FRED: AN ARCHITECTURE FOR A SELF-TIMED DECOUPLED COMPUTER 12 August 1993. </title>
Reference-contexts: It is a simple 16-bit processor with only sixteen instructions, since it was built partially as an exercise in using FPGAs for rapid prototyping of self-timed circuits [1]. The Amulet A group at Manchester has built a self-timed micropipelined VLSI implementation of the ARM processor <ref> [6] </ref> which is an extremely power-efficient commercial microprocessor. The Amulet is a real processor in the sense that it mimics the behavior of an existing commercial processor and it handles simple exceptions.
Reference: 7. <author> J. R. Goodman, J. Hsieh, K. Liou, A. R. Pleszkun, P. B. Schechter, and H. C. Young. </author> <title> PIPE: </title>
Reference-contexts: Experience has shown the difficulty of writing parallel programs, yet most sequential programs have an (arguably) significant amount of instruction-level parallelism [13, 20] 1 . One way of exploiting this parallelism is by decoupling the memory access portion of an instruction stream from the execution portion <ref> [7, 21, 5] </ref>. By performing the two operations independently, peaks and valleys in 1 Nicolau claims there is lots of parallelism available. Wall claims there's some, but not much. FRED: AN ARCHITECTURE FOR A SELF-TIMED DECOUPLED COMPUTER 2 each may be smoothed, resulting in an overall performance gain.
References-found: 7

