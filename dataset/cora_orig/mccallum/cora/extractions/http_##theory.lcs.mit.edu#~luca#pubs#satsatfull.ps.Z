URL: http://theory.lcs.mit.edu/~luca/pubs/satsatfull.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~luca/papers.html
Root-URL: 
Title: Approximating Satisfiable Satisfiability Problems  
Author: Luca Trevisan 
Date: August 6, 1997  
Abstract: We study the approximability of the Maximum Satisfiability Problem (Max SAT) and of the boolean k-ary Constraint Satisfaction Problem (Max kCSP) restricted to satisfiable instances. For both problems we improve on the performance ratios of known algorithms for the unrestricted case. Our approximation for satisfiable Max 3CSP instances is better than any possible approximation for the unrestricted version of the problem (unless P = NP). This result implies that the requirement of perfect completeness weakens the acceptance power of non-adaptive PCP verifiers that read 3 bits. We also present the first non-trivial results about PCP classes defined in terms of free bits that collapse to P.
Abstract-found: 1
Intro-found: 1
Reference: [AE97] <author> G. Andersson and L. Engebretsen. </author> <title> Better approximation algorithms and tighter analysis for set splitting and not-all-equal sat. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: For fi = :931 and ff = 3:5 the last term evaluates to :82605, 2 For the Max SAT analysis we resort to a methodology of analysis introduced in <ref> [AE97] </ref>. We have to study the performance of an approximation algorithm that consists of running several approximation algorithms and then take the best solution. <p> Then, A (') max f i 1 2 i m i ; X 2 m i ; p2f0;ffi;2ffi;:::;:5g p (1 p)m 2 + i ) It is easy to cast the search for a worst case as a linear program <ref> [AE97] </ref>. The only seeming difficulty is that we would need infinitely many variables m 2 ; m 3 ; : : : Indeed, we can choose a large enough upper bound N (e.g.
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [PY91, KMSV94] and the computation of PCP verifiers <ref> [ALM + 92, Tre96] </ref>; complete classifications of their approximability properties, for the case of boolean variables, appear in [Cre95, KSW97]. We call Max kCSP the boolean constraint satisfaction problem where every constraint involves at most k variables. <p> The restriction to satisfiable instances of Max kCSP corresponds to the restriction to non-adaptive PCP verifiers with perfect completeness. The requirement of perfect completeness and non-adaptiveness appeared in the first definitions of PCP and in several subsequent papers <ref> [AS92, ALM + 92, BGLR93, BS94] </ref>. Recently, adaptiveness (with perfect completeness) was used in [BGS96], and a verifier without perfect completeness (but non-adaptive) appears in [H-as97]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness.
Reference: [AS92] <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs; a new characterization of NP. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-13, </pages> <year> 1992. </year>
Reference-contexts: The restriction to satisfiable instances of Max kCSP corresponds to the restriction to non-adaptive PCP verifiers with perfect completeness. The requirement of perfect completeness and non-adaptiveness appeared in the first definitions of PCP and in several subsequent papers <ref> [AS92, ALM + 92, BGLR93, BS94] </ref>. Recently, adaptiveness (with perfect completeness) was used in [BGS96], and a verifier without perfect completeness (but non-adaptive) appears in [H-as97]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness.
Reference: [Asa97] <author> T. Asano. </author> <title> Approximation algorithms for MAX SAT: Yannakakis vs. </title> <booktitle> Goemans-Williamson. In Proceedings of the 5th IEEE Israel Symposium on Theory of Computing and Systems, </booktitle> <year> 1997. </year>
Reference-contexts: Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 <ref> [Asa97] </ref> (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT.
Reference: [BF92] <author> L. Babai and P. Frankl. </author> <title> Linear Algebraic Methods in Combinatorics (2nd Preliminary version). </title> <note> Monograph in preparation, 1992. 24 </note>
Reference-contexts: i , 1 i k, then the CT technique allows to design an algorithm for gl1-Max SAT that satisfies clauses of total weight k X (1 p (1 p) i1 ) i m i + ik+1 3 An Application of the Linear Algebra Method The linear algebra method in combinatorics <ref> [BF92] </ref> is a collection of techniques that allow to prove combinatorial results by making use of the following well-known fact: if we have a set of n-dimensional vectors that are linearly independent, then the size of the set is at most n.
Reference: [BGLR93] <author> M Bellare, S. Goldwasser, C. Lund, and A. Russell. </author> <title> Efficient probabilistically checkable proofs and applications to approximation. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 294-304, </pages> <year> 1993. </year> <note> See also the errata sheet in Proc of STOC'94. </note>
Reference-contexts: The restriction to satisfiable instances of Max kCSP corresponds to the restriction to non-adaptive PCP verifiers with perfect completeness. The requirement of perfect completeness and non-adaptiveness appeared in the first definitions of PCP and in several subsequent papers <ref> [AS92, ALM + 92, BGLR93, BS94] </ref>. Recently, adaptiveness (with perfect completeness) was used in [BGS96], and a verifier without perfect completeness (but non-adaptive) appears in [H-as97]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness.
Reference: [BGS96] <author> M. Bellare, O. Goldreich, and M. Sudan. </author> <title> Free bits, PCP's and non-approximability - towards tight results (4th version). Technical Report TR95-24, </title> <booktitle> Electronic Colloquium on Computational Complexity, </booktitle> <year> 1996. </year> <note> Preliminary version in Proc. of FOCS'95. </note>
Reference-contexts: There is a corresponding history of continuous improvements in the non-approximability; we do not mention it here (the interested reader can find it in <ref> [BGS96] </ref>), and we only recall that the best known hardness is 7=8 + " due to H-astad [H-as97], and it still holds when restricting to satisfiable instances with exactly three literals per clause. Our results. <p> It is easy to see that, with two queries, it is impossible to get perfect completeness, while with 3 it is possible (see e.g. <ref> [BGS96] </ref>). The challenging question arises of determining which is the best soundness achievable with three bits and perfect completeness. <p> The requirement of perfect completeness and non-adaptiveness appeared in the first definitions of PCP and in several subsequent papers [AS92, ALM + 92, BGLR93, BS94]. Recently, adaptiveness (with perfect completeness) was used in <ref> [BGS96] </ref>, and a verifier without perfect completeness (but non-adaptive) appears in [H-as97]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [BGS96]. <p> completeness) was used in <ref> [BGS96] </ref>, and a verifier without perfect completeness (but non-adaptive) appears in [H-as97]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [BGS96]. The best known approximation for Max kCSP, for general k, is 2 1k [Tre96]. Our results. We improve the approximation to (k + 1)2 k for satisfiable instances. Source of our improvement. We use again substitutions (but of a more general kind) as a preprocessing step. <p> this parameter (implicit in [FK94] and explicitly introduced in [BS94]) lies in the fact that the "efficiency" of the reduction from PCP to Max Clique [FGL + 96] depends only on the number of free bits of the verifier (indeed, it depends only on the amortized number of free bits <ref> [BGS96] </ref>, but we will not exploit the latter notion here). Since the same reduction is used to derive the best known hardness result for Min Vertex Cover, further improvements in the hardness of approximating Min Vertex Cover could be obtained by improved PCP constructions with low free bits complexity. <p> proof, there at most 2 f possible answers that make him accept (this is why f cannot be larger than the number of query bits.) This definition has been used almost always, including in H-astad's papers on Max Clique (where he used the free bit-efficient complete test.) One exception is <ref> [BGS96] </ref>, where an adaptive version of the definition of free bits is used. We also mention that the free bit parameter has almost always been used for verifiers with perfect completeness (Bellare et al. [BGS96] also show that one can always reduce the free bit complexity by reducing the completeness.) However, <p> H-astad's papers on Max Clique (where he used the free bit-efficient complete test.) One exception is <ref> [BGS96] </ref>, where an adaptive version of the definition of free bits is used. We also mention that the free bit parameter has almost always been used for verifiers with perfect completeness (Bellare et al. [BGS96] also show that one can always reduce the free bit complexity by reducing the completeness.) However, the currently best hardness result for Min Vertex Cover is due to H-astad [H-as97] and uses a verifier with low free bit complexity and completeness 1 ", for any " &gt; 0. <p> The only result was that, with perfect completeness, it is impossible to characterize NP with only 1 free bit, while log 3 free bits are sufficient <ref> [BGS96] </ref>. It has been conjectured that with log 3 free bits and perfect completeness it is possible to achieve any soundness. Our result. <p> for any instance, finds a solution whose cost is at least r times the optimum (such a solution is said to be r-approximate). 2.2 Gadgets We also need the definition of gadgets. 2 gl1 stands for "Gap Location 1", which is the terminology of Petrank [Pet94]. 6 Definition 6 (Gadget <ref> [BGS96] </ref>) For ff 2 R, a function f : f0; 1g k ! f0; 1g, and a constraint family F: an ff-gadget reducing f to F is a finite collection of constraints C j from F over primary variables x 1 ; : : : ; x k and auxiliary variables <p> The class naFPCP c;s [log; f ] is defines analogously by using the non-adaptive free bit parameter. Regarding recent constructions of verifiers optimized for the free bit parameter, the verifiers that use the Complete Test [H-as96a] are non-adaptive, while the verifier that uses the Extended Monomial Basis Test <ref> [BGS96] </ref> is adaptive. The notion of free bit was originally introduced to prove hardness results for Max Clique. An amortized version of the free bit parameter has been defined in [BS94]. <p> the gadgets of Table 3, we have an algorithm that satisfies constraints of total weight 15 Source Target ff Due to Constraint Constraint 3SAT 2SAT 3:5 [TSSW96] 4SAT 2SAT 6 This paper 3CSP 3 2SAT 5:5 This paper 3CSP 4 2SAT 5:5 This paper not linear 3CSP 4 2SAT 11 <ref> [BGS96] </ref> linear 3CSP 5 2SAT 8:25 This paper 3CSP 6 2SAT 5:5 This paper Table 3: Gadgets used.
Reference: [BS94] <author> M. Bellare and M. Sudan. </author> <title> Improved non-approximability results. </title> <booktitle> In Proceedings of the 26th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 184-193, </pages> <year> 1994. </year>
Reference-contexts: The restriction to satisfiable instances of Max kCSP corresponds to the restriction to non-adaptive PCP verifiers with perfect completeness. The requirement of perfect completeness and non-adaptiveness appeared in the first definitions of PCP and in several subsequent papers <ref> [AS92, ALM + 92, BGLR93, BS94] </ref>. Recently, adaptiveness (with perfect completeness) was used in [BGS96], and a verifier without perfect completeness (but non-adaptive) appears in [H-as97]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. <p> The interest in this parameter (implicit in [FK94] and explicitly introduced in <ref> [BS94] </ref>) lies in the fact that the "efficiency" of the reduction from PCP to Max Clique [FGL + 96] depends only on the number of free bits of the verifier (indeed, it depends only on the amortized number of free bits [BGS96], but we will not exploit the latter notion here). <p> The notion of free bit was originally introduced to prove hardness results for Max Clique. An amortized version of the free bit parameter has been defined in <ref> [BS94] </ref>. We will not deal with this amortized version in this paper, since an essentially tight result has been established: H-astad [H-as96b] has shown that it is possible to characterize NP using " &gt; 0 amortized free bits, for any fixed " &gt; 0.
Reference: [CFZ97] <author> J. Chen, D. Friesen, and H. Zheng. </author> <title> Tight bound on Johnson's algorithm for MaxSAT. </title> <booktitle> In Proceedings of the 12th IEEE Conference on Computational Complexity, </booktitle> <pages> pages 274-281, </pages> <year> 1997. </year>
Reference-contexts: The Maximum Satisfiability Problem. The Max SAT problem appears in a paper of John-son [Joh74] which is the first paper where the term "approximation algorithm" was introduced. Johnson proved that his algorithm was 1/2-approximate. It has been recently showed that John-son's algorithm is indeed 2/3-approximate <ref> [CFZ97] </ref>. In the last five years, several improved approximation algorithms for Max SAT and its restricted versions Max 2SAT and Max 3SAT have been developed; we summarize such previous results in Table 1.
Reference: [Cre95] <author> N. Creignou. </author> <title> A dichotomy theorem for maximum generalized satisfiability problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 51(3) </volume> <pages> 511-522, </pages> <year> 1995. </year>
Reference-contexts: Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [PY91, KMSV94] and the computation of PCP verifiers [ALM + 92, Tre96]; complete classifications of their approximability properties, for the case of boolean variables, appear in <ref> [Cre95, KSW97] </ref>. We call Max kCSP the boolean constraint satisfaction problem where every constraint involves at most k variables. In this paper we consider the following restriction of the problem of r-approximating Max SAT and Max kCSP: given a satisfiable instance of Max SAT (resp.
Reference: [CT96] <author> P. Crescenzi and L. Trevisan. </author> <title> MAX NP-completeness made easy. </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: As an application to Max SAT, we note that if, for some k, we have an ff k -gadget reducing kSAT to 2SAT, then we can substitute (fi (1 fi)(ff k 1)) in place of 2 k fi in the analysis of the GW technique. CT Technique <ref> [CT96] </ref>. This technique is parameterized with an integer k and a real 0 p 1.
Reference: [FG95] <author> U. Feige and M.X. Goemans. </author> <title> Approximating the value of two provers proof systems, with applications to MAX 2SAT and MAX DICUT. </title> <booktitle> In Proceedings of the 3rd IEEE Israel Symposium on Theory of Computing and Systems, </booktitle> <pages> pages 182-189, </pages> <year> 1995. </year>
Reference-contexts: Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl <ref> [FG95] </ref> (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl <ref> [FG95] </ref> (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using <ref> [Yan94, GW94, GW95, FG95, OHA96] </ref>) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> The factors depicted with a fl do not appear explicitly in the referenced papers <ref> [GW95, FG95] </ref>. polynomial time an assignment that satisfies at least a fraction r of the total weight of clauses (resp. constraints). The issue of approximating constraint satisfaction problems restricted to satisfiable instances has been considered by Petrank [Pet94], and called approximation problem at gap location one. <p> The FGW <ref> [GW95, FG95] </ref> algorithm for Max 2SAT is :931-approximate. 2.3 Probabilistically Checkable Proofs We now talk about PCP classes and their relation with the approximability of Max kCSP. <p> It finds a solution that satisfies clauses of total weight at least X 1 FGW Algorithm <ref> [GW95, FG95] </ref>.
Reference: [FGL + 96] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Interactive proofs and the hardness of approximating cliques. </title> <journal> Journal of the ACM, </journal> <volume> 43(2) </volume> <pages> 268-292, </pages> <year> 1996. </year> <note> Preliminary version in Proc. of FOCS91. </note>
Reference-contexts: The interest in this parameter (implicit in [FK94] and explicitly introduced in [BS94]) lies in the fact that the "efficiency" of the reduction from PCP to Max Clique <ref> [FGL + 96] </ref> depends only on the number of free bits of the verifier (indeed, it depends only on the amortized number of free bits [BGS96], but we will not exploit the latter notion here).
Reference: [FK94] <author> U. Feige and J. Kilian. </author> <title> Two prover protocols low error at affordable rates. </title> <booktitle> In Proceedings of the 26th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 172-183, </pages> <year> 1994. </year>
Reference-contexts: It is a relaxation of the notion of query bit: if a verifier queries q bits on the proof, than it uses at most f free bits, but a verifier using f free bits can read arbitrarily many bits. The interest in this parameter (implicit in <ref> [FK94] </ref> and explicitly introduced in [BS94]) lies in the fact that the "efficiency" of the reduction from PCP to Max Clique [FGL + 96] depends only on the number of free bits of the verifier (indeed, it depends only on the amortized number of free bits [BGS96], but we will not
Reference: [GW94] <author> M.X. Goemans and D.P. Williamson. </author> <title> New 3/4-approximation algorithms for the maximum satisfiability problem. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 7(4) </volume> <pages> 656-666, </pages> <year> 1994. </year> <note> Preliminary version in Proc. of IPCO'93. </note>
Reference-contexts: Max kCSP), find in fl An extended abstract of this paper will be presented at the 5th European Symposium on Algorithms. y trevisan@cui.unige.ch. Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 <ref> [GW94] </ref> :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 <ref> [GW94] </ref> :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using <ref> [GW94, GW95] </ref>) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using <ref> [Yan94, GW94, GW95] </ref>) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using <ref> [Yan94, GW94, GW95, FG95, OHA96] </ref>) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT.
Reference: [GW95] <author> M.X. Goemans and D.P. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <journal> Journal of the ACM, </journal> <volume> 42(6) </volume> <pages> 1115-1145, </pages> <year> 1995. </year> <note> Preliminary version in Proc. of STOC'94. </note>
Reference-contexts: Max kCSP), find in fl An extended abstract of this paper will be presented at the 5th European Symposium on Algorithms. y trevisan@cui.unige.ch. Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl <ref> [GW95] </ref> (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using <ref> [GW94, GW95] </ref>) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using <ref> [Yan94, GW94, GW95] </ref>) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using <ref> [Yan94, GW94, GW95, FG95, OHA96] </ref>) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> The factors depicted with a fl do not appear explicitly in the referenced papers <ref> [GW95, FG95] </ref>. polynomial time an assignment that satisfies at least a fraction r of the total weight of clauses (resp. constraints). The issue of approximating constraint satisfaction problems restricted to satisfiable instances has been considered by Petrank [Pet94], and called approximation problem at gap location one. <p> The FGW <ref> [GW95, FG95] </ref> algorithm for Max 2SAT is :931-approximate. 2.3 Probabilistically Checkable Proofs We now talk about PCP classes and their relation with the approximability of Max kCSP. <p> It finds a solution that satisfies clauses of total weight at least X 1 FGW Algorithm <ref> [GW95, FG95] </ref>. <p> is a feasible solution, and vectors y 1 ; : : : ; y k such that the set of feasible solutions is precisely fua 1 y 1 a k y k : a 1 ; : : : ; a k 2 f0; 1gg : 2.5.2 Techniques GW Technique <ref> [GW95] </ref>. It allows to extend a fi-approximate algorithm for Max 2SAT (e.g. the FGW algorithm) to the Max SAT problem. Here we present a simplified analysis of the GW technique that is sufficient to deal with satisfiable instances of Max SAT.
Reference: [H-as96a] <author> J. H-astad. </author> <title> Testing of the long code and hardness for clique. </title> <booktitle> In Proceedings of the 28th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 11-19, </pages> <year> 1996. </year>
Reference-contexts: The class naFPCP c;s [log; f ] is defines analogously by using the non-adaptive free bit parameter. Regarding recent constructions of verifiers optimized for the free bit parameter, the verifiers that use the Complete Test <ref> [H-as96a] </ref> are non-adaptive, while the verifier that uses the Extended Monomial Basis Test [BGS96] is adaptive. The notion of free bit was originally introduced to prove hardness results for Max Clique. An amortized version of the free bit parameter has been defined in [BS94].
Reference: [H-as96b] <editor> J. H-astad. </editor> <booktitle> Clique is hard to approximate within n 1" . In Proceedings of the 37th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 627-636, </pages> <year> 1996. </year>
Reference-contexts: The notion of free bit was originally introduced to prove hardness results for Max Clique. An amortized version of the free bit parameter has been defined in [BS94]. We will not deal with this amortized version in this paper, since an essentially tight result has been established: H-astad <ref> [H-as96b] </ref> has shown that it is possible to characterize NP using " &gt; 0 amortized free bits, for any fixed " &gt; 0. For the non-amortized version of this parameter, it is still an open question to find the best possible characterizations of NP.
Reference: [H-as97] <author> J. H-astad. </author> <title> Some optimal inapproximability results. </title> <booktitle> In Proceedings of the 29th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-10, </pages> <year> 1997. </year>
Reference-contexts: There is a corresponding history of continuous improvements in the non-approximability; we do not mention it here (the interested reader can find it in [BGS96]), and we only recall that the best known hardness is 7=8 + " due to H-astad <ref> [H-as97] </ref>, and it still holds when restricting to satisfiable instances with exactly three literals per clause. Our results. <p> The challenging question arises of determining which is the best soundness achievable with three bits and perfect completeness. The state of the art for this question is that NP can be checked with soundness :75 + " <ref> [H-as97] </ref>, while this is impossible with soundness :367 [TSSW96], unless P = NP. Furthermore, it is possible to check NP with three queries, soundness :5 + " and completeness 1 " for any " &gt; 0 [H-as97]. <p> for this question is that NP can be checked with soundness :75 + " <ref> [H-as97] </ref>, while this is impossible with soundness :367 [TSSW96], unless P = NP. Furthermore, it is possible to check NP with three queries, soundness :5 + " and completeness 1 " for any " &gt; 0 [H-as97]. The latter result implies that Max 3SAT is hard to approximate within 7=8 + ", but not when restricted to satisfiable instances. A different and more complicated proof was needed to prove the 7=8 + " hardness result also for satisfiable instances [H-as97]. <p> 1 " for any " &gt; 0 <ref> [H-as97] </ref>. The latter result implies that Max 3SAT is hard to approximate within 7=8 + ", but not when restricted to satisfiable instances. A different and more complicated proof was needed to prove the 7=8 + " hardness result also for satisfiable instances [H-as97]. It was an open question whether soundness :5 + " is achievable with three queries and perfect completeness. Our result. <p> The requirement of perfect completeness and non-adaptiveness appeared in the first definitions of PCP and in several subsequent papers [AS92, ALM + 92, BGLR93, BS94]. Recently, adaptiveness (with perfect completeness) was used in [BGS96], and a verifier without perfect completeness (but non-adaptive) appears in <ref> [H-as97] </ref>. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [BGS96]. The best known approximation for Max kCSP, for general k, is 2 1k [Tre96]. <p> also mention that the free bit parameter has almost always been used for verifiers with perfect completeness (Bellare et al. [BGS96] also show that one can always reduce the free bit complexity by reducing the completeness.) However, the currently best hardness result for Min Vertex Cover is due to H-astad <ref> [H-as97] </ref> and uses a verifier with low free bit complexity and completeness 1 ", for any " &gt; 0. Even in the simple case of the non-adaptive definition and of perfect completeness there were basically no result about PCP classes with low free bit complexity collapsing to P. <p> As a consequence of their new technique, they were able to present a (7=8 ")-approximate algorithm for Max 3SAT, for any " &gt; 0. Such an algorithm is the best possible, since we recall that (7=8 + ")-approximating Max 3SAT is NP-hard <ref> [H-as97] </ref>. Very recently, Zwick [Zwi97] applied the techniques of [KZ97] to the study of Max 3CSP, and came up with a 1=2-approximate algorihtm, which is again the best possible. <p> Theorem 32 naPCP 1;:514 [log; 3] P. Recall that H-astad <ref> [H-as97] </ref> proved that naPCP 1"; 1 2 +" [log; 3] = NP and that naPCP 1; 3 4 +" [log; 3] = 6 The Max kCSP Algorithm The general pattern of the results of this paper is that we take an instance of a constraint satisfaction problem and, using approximation preserving <p> 2] P 8" &gt; 0 : The first inclusion means that using a Proof System with perfect completeness, non-adaptiveness, and log 3 free bits, the stronger hardness result that can be shown for Vertex Cover is 13=12 " for 19 any " (weaker than H-astad's result that uses almost-prefect completeness <ref> [H-as97] </ref>). Using 2 free bits, the stronger result is 7=6 ", which equals H-astad's result. With log 5 free bits or more, we can only do worse. <p> ); (x 1 _ x 2 ); (x 2 _ x 3 ); (:x 2 _ :x 3 ) The second constraint gives rise to a constraint satisfaction problem such that, given a satisfiable instance, it is NP-hard to satisfy more than a fraction 3=4 + " of the constraint <ref> [H-as97] </ref>. <p> :x 8 ); (:x 3 _ :x 9 ); (:x 1 _ x 9 ); (:x 3 _ :x 8 ); (x 3 _ x 9 ); weight 1 : (:x 2 _ x 9 ); (x 2 _ :x 8 ) Our gadget, combined with the non-approximability result of <ref> [H-as97] </ref> gives an alternative proof of the fact that Max 2SAT is hard to approximate within 21=22 + ". The third constraint is just x 1 _ x 2 .
Reference: [Joh74] <author> D.S. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year> <month> 25 </month>
Reference-contexts: We now discuss our results in more detail. The Maximum Satisfiability Problem. The Max SAT problem appears in a paper of John-son <ref> [Joh74] </ref> which is the first paper where the term "approximation algorithm" was introduced. Johnson proved that his algorithm was 1/2-approximate. It has been recently showed that John-son's algorithm is indeed 2/3-approximate [CFZ97]. <p> We examine different algorithms, and different ways to extend/mix them. Under the assumption that the formula be satisfiable, the cost of the solutions provided by all the algorithms below will always be lower bounded by some linear combination of the m i 's. 2.5.1 Algorithms Johnson's algorithm <ref> [Joh74] </ref>. It finds a solution that satisfies clauses of total weight at least X 1 FGW Algorithm [GW95, FG95].
Reference: [KMSV94] <author> S. Khanna, R. Motwani, M. Sudan, and U. Vazirani. </author> <title> On syntactic versus computational views of approximability. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 819-830, </pages> <year> 1994. </year>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP <ref> [PY91, KMSV94] </ref> and the computation of PCP verifiers [ALM + 92, Tre96]; complete classifications of their approximability properties, for the case of boolean variables, appear in [Cre95, KSW97]. We call Max kCSP the boolean constraint satisfaction problem where every constraint involves at most k variables.
Reference: [KSW97] <author> S. Khanna, M. Sudan, and D.P. Williamson. </author> <title> A complete classification of the approx-imability of maximization problems derived from boolean constraint satisfaction. </title> <booktitle> In Proceedings of the 29th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 11-20, </pages> <year> 1997. </year>
Reference-contexts: Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [PY91, KMSV94] and the computation of PCP verifiers [ALM + 92, Tre96]; complete classifications of their approximability properties, for the case of boolean variables, appear in <ref> [Cre95, KSW97] </ref>. We call Max kCSP the boolean constraint satisfaction problem where every constraint involves at most k variables. In this paper we consider the following restriction of the problem of r-approximating Max SAT and Max kCSP: given a satisfiable instance of Max SAT (resp. <p> Petrank observed that Max SAT remains MAX SNP-complete when restricted to satisfiable instances, and proved that the same is true for other problems, such as Max 3-Colorable Subgraph and Max 3-Dimensional Matching. More recently, Khanna, Sudan and Williamson <ref> [KSW97] </ref> proved that for any MAX SNP-complete constraint satisfaction problem for which deciding satisfiability is NP-hard, the restriction to satisfiable instances remains MAX SNP-complete. <p> : : ; x k ) = x 1 : : : x k or f (x 1 ; : : : ; x k ) = 1x 1 : : : x k . (Note that linear functions are also, more appropriately, called affine in other papers, e.g. in <ref> [KSW97] </ref>.) Definition 5 (Constraint satisfaction problems) For a function family F, Max F is the optimization problem whose instances consist of m weighted constraints from F, on n variables, and whose objective is to find an assignment to the variables which maximizes the total weight of satisfied constraints.
Reference: [KZ97] <author> B. Karloff and U. </author> <title> Zwick. </title> <booktitle> A (7=8 ")-approximation algorithm for MAX 3SAT? In Proceedings of the 38th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Source of our improvement. We adapt the previously described reductions and algorithms. 4 Independent and Subsequent Results. In an independent and simultaneous research, Karloff and Zwick <ref> [KZ97] </ref> found a new semidefinite relaxation of the Max 3SAT problem, and a new way of analysing the randomized rounding of solutions of the relaxation. As a consequence of their new technique, they were able to present a (7=8 ")-approximate algorithm for Max 3SAT, for any " &gt; 0. <p> Such an algorithm is the best possible, since we recall that (7=8 + ")-approximating Max 3SAT is NP-hard [H-as97]. Very recently, Zwick [Zwi97] applied the techniques of <ref> [KZ97] </ref> to the study of Max 3CSP, and came up with a 1=2-approximate algorihtm, which is again the best possible. Using ideas from the present paper, Zwick [Zwi97] also improved our approximation of satisfiable instances of Max 3CSP, developing a 5=8-approximate algorithm for this restricted problem.
Reference: [OHA96] <author> T. Ono, T. Hirata, and T. Asano. </author> <title> Approximation algorithms for the maximum sat-isfiability problem. </title> <booktitle> In Proceedings of Scandinavian Workshop on Algorithmic Theory. </booktitle> <publisher> LNCS, Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 <ref> [OHA96] </ref> (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using <ref> [Yan94, GW94, GW95, FG95, OHA96] </ref>) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT.
Reference: [Pet94] <author> E. Petrank. </author> <title> The hardness of approximations : Gap location. </title> <journal> Computational Complexity, </journal> <volume> 4 </volume> <pages> 133-157, </pages> <year> 1994. </year> <note> Preliminary version in Proc. of ISTCS'93. </note>
Reference-contexts: The issue of approximating constraint satisfaction problems restricted to satisfiable instances has been considered by Petrank <ref> [Pet94] </ref>, and called approximation problem at gap location one. Petrank observed that Max SAT remains MAX SNP-complete when restricted to satisfiable instances, and proved that the same is true for other problems, such as Max 3-Colorable Subgraph and Max 3-Dimensional Matching. <p> exists a polynomial-time algorithm that, for any instance, finds a solution whose cost is at least r times the optimum (such a solution is said to be r-approximate). 2.2 Gadgets We also need the definition of gadgets. 2 gl1 stands for "Gap Location 1", which is the terminology of Petrank <ref> [Pet94] </ref>. 6 Definition 6 (Gadget [BGS96]) For ff 2 R, a function f : f0; 1g k ! f0; 1g, and a constraint family F: an ff-gadget reducing f to F is a finite collection of constraints C j from F over primary variables x 1 ; : : : ;
Reference: [PY91] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year> <note> Preliminary version in Proc. of STOC'88. </note>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP <ref> [PY91, KMSV94] </ref> and the computation of PCP verifiers [ALM + 92, Tre96]; complete classifications of their approximability properties, for the case of boolean variables, appear in [Cre95, KSW97]. We call Max kCSP the boolean constraint satisfaction problem where every constraint involves at most k variables. <p> present a polynomial-time algorithm that, given a satisfiable Max SAT instance, satisfies a fraction :8 of the total weight of clauses, and an algorithm that, given a satisfiable Max 3SAT instance, satisfies a fraction :826 of the total weight of clauses. 2 Satisfiable instances Arbitrary instances Due to :125 :125 <ref> [PY91] </ref> :25 [Tre96] :367 :367 [TSSW96] :514 This paper Table 2: Evolution of the approximation factors for Max 3CSP with and without the satisfiability promise. Source of our improvement. In both cases, we show how to reduce the given instance to an instance without unit clauses.
Reference: [SS97] <author> G.B. Sorkin and M. </author> <title> Sudan. </title> <type> Personal communication, </type> <month> February </month> <year> 1997. </year>
Reference-contexts: 3:5-gadget for the third: weight 0:5 : (x 2 _ x 3 ); (x 1 _ :x 3 ); (x 1 _ :x 2 ); (:x 1 _ x 2 ); (:x 1 _ x 3 ) weight 1:5 : (:x 2 _ :x 3 ) The 8:25-gadget is optimal <ref> [SS97] </ref>. 2 Lemma 50 For any f 2 3CSP 6 with a 2-independent satisfying table, there is a 5:5-gadget reducing f to 2SAT. This is optimal for some of the functions. Proof: In this case there are again three basic cases.
Reference: [Tre96] <author> L. Trevisan. </author> <title> Positive linear programming, parallel approximation, </title> <booktitle> and PCP's. In Proceedings of the 4th European Symposium on Algorithms, </booktitle> <pages> pages 62-75. </pages> <publisher> LNCS 1136, Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [PY91, KMSV94] and the computation of PCP verifiers <ref> [ALM + 92, Tre96] </ref>; complete classifications of their approximability properties, for the case of boolean variables, appear in [Cre95, KSW97]. We call Max kCSP the boolean constraint satisfaction problem where every constraint involves at most k variables. <p> polynomial-time algorithm that, given a satisfiable Max SAT instance, satisfies a fraction :8 of the total weight of clauses, and an algorithm that, given a satisfiable Max 3SAT instance, satisfies a fraction :826 of the total weight of clauses. 2 Satisfiable instances Arbitrary instances Due to :125 :125 [PY91] :25 <ref> [Tre96] </ref> :367 :367 [TSSW96] :514 This paper Table 2: Evolution of the approximation factors for Max 3CSP with and without the satisfiability promise. Source of our improvement. In both cases, we show how to reduce the given instance to an instance without unit clauses. <p> The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [BGS96]. The best known approximation for Max kCSP, for general k, is 2 1k <ref> [Tre96] </ref>. Our results. We improve the approximation to (k + 1)2 k for satisfiable instances. Source of our improvement. We use again substitutions (but of a more general kind) as a preprocessing step.
Reference: [Tre97] <author> L. Trevisan. </author> <title> Reductions and (Non-)Approximability. </title> <type> PhD thesis, </type> <institution> University of Rome "La Sapienza", </institution> <year> 1997. </year> <note> Also available at ECCC. </note>
Reference-contexts: We refer the reader to the paper for details about the method (a full version is forthcoming and will be available from the authors. See also the presentation in <ref> [Tre97] </ref>.) In short, [TSSW96] show that the problem of finding the best possible gadget reducing a function to 2SAT (in general, the target can be any hereditary family, that is, any family that is closed under substitutions) can be reduced to a linear program. <p> Alternatively, it is possible to reduce the size of the linear programs at the cost of possibly producing unfeasible gadgets of super-optimal cost. When the two approaches produce gadgets of the same cost, then we have a guarantee of optimality. The reader is again referred to <ref> [TSSW96, Tre97] </ref> for more details. The generated LP is solved using a public domain LP solver, lp solve version 2, written by Michel Berkelaar (with some additions by Jeroen Dirks), available at the URL ftp://ftp.zib.de/pub/mathprog/lp-berkelaar/lp-solve/ Once the LP is solved, the solution is reported in L a T E X.
Reference: [TSSW96] <author> L. Trevisan, G.B. Sorkin, M. Sudan, and D.P. Williamson. Gadgets, </author> <title> approximation, and linear programming. </title> <booktitle> In Proceedings of the 37th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 617-626, </pages> <year> 1996. </year>
Reference-contexts: Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 <ref> [TSSW96] </ref> (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> given a satisfiable Max SAT instance, satisfies a fraction :8 of the total weight of clauses, and an algorithm that, given a satisfiable Max 3SAT instance, satisfies a fraction :826 of the total weight of clauses. 2 Satisfiable instances Arbitrary instances Due to :125 :125 [PY91] :25 [Tre96] :367 :367 <ref> [TSSW96] </ref> :514 This paper Table 2: Evolution of the approximation factors for Max 3CSP with and without the satisfiability promise. Source of our improvement. In both cases, we show how to reduce the given instance to an instance without unit clauses. <p> Source of our improvement. In both cases, we show how to reduce the given instance to an instance without unit clauses. The reduction sequentially applies a series of substitutions of values to variables. The :826 approximation for Max 3SAT then follows by adapting the analysis of <ref> [TSSW96] </ref> to the case of no unit clauses. The :8 approximation for Max SAT involves the use of known algorithms, with a couple of small changes. <p> The challenging question arises of determining which is the best soundness achievable with three bits and perfect completeness. The state of the art for this question is that NP can be checked with soundness :75 + " [H-as97], while this is impossible with soundness :367 <ref> [TSSW96] </ref>, unless P = NP. Furthermore, it is possible to check NP with three queries, soundness :5 + " and completeness 1 " for any " &gt; 0 [H-as97]. <p> We then apply two algorithms and take the best solution. In one algorithm, we reduce all the constraints to 2SAT using gadgets, extending an idea of <ref> [TSSW96] </ref>. <p> ; : : : ; y n , the following are satisfied: (8a : f (a) = 1) (8b) : j (8a : f (a) = 1) (9b) : j (8a : f (a) = 0) (8b) : j Gadgets can be used in approximation algorithms in the following way <ref> [TSSW96] </ref>. Assume we have a satisfiable instance of a constraint satisfaction problem, with constraints of total weight m, and there is ff-gadget reducing each such constraint to 2SAT. <p> Each new clause receives weight w= k We then apply a fi-approximate algorithm to the resulting instance of Max 2SAT. The number of clauses in the original formula that are satisfied in this way is at least fi (m 1 + m 2 ) + k k TSSW Technique <ref> [TSSW96] </ref>. This technique has been already described in Section 2.2. <p> More details are available in Section 8. Using the FGW algorithm with the TSSW method and the gadgets of Table 3, we have an algorithm that satisfies constraints of total weight 15 Source Target ff Due to Constraint Constraint 3SAT 2SAT 3:5 <ref> [TSSW96] </ref> 4SAT 2SAT 6 This paper 3CSP 3 2SAT 5:5 This paper 3CSP 4 2SAT 5:5 This paper not linear 3CSP 4 2SAT 11 [BGS96] linear 3CSP 5 2SAT 8:25 This paper 3CSP 6 2SAT 5:5 This paper Table 3: Gadgets used. <p> In particular, it may be the case that FPCP 1;s [log; f ] P when s &lt; 2 2 2 f . 8 Gadget Construction 8.1 Methodology All the new gadgets used in this paper are computer-constructed using the methodology of <ref> [TSSW96] </ref>. We refer the reader to the paper for details about the method (a full version is forthcoming and will be available from the authors. See also the presentation in [Tre97].) In short, [TSSW96] show that the problem of finding the best possible gadget reducing a function to 2SAT (in general, <p> Construction 8.1 Methodology All the new gadgets used in this paper are computer-constructed using the methodology of <ref> [TSSW96] </ref>. We refer the reader to the paper for details about the method (a full version is forthcoming and will be available from the authors. See also the presentation in [Tre97].) In short, [TSSW96] show that the problem of finding the best possible gadget reducing a function to 2SAT (in general, the target can be any hereditary family, that is, any family that is closed under substitutions) can be reduced to a linear program. This method has been implemented by Greg Sorkin. <p> His implementation consists in an APL2 program that given the description of the source family and of the target family generates the appropriate linear program and then solves it using OSL (the IBM Optimization Subroutine Library, a commercial package for mathematical programming.) Almost all the gadgets reported in <ref> [TSSW96] </ref> have been found with Greg's program. In order to deal with the computing environment of the University of Geneva we had to develop a different implementation. Our implementation is much more rudimentary but only requires public domain resources. In our implementation, the LP is generated by a C program. <p> There were 34 cases to be considered (see Lemma 48), so we modified the program in order to have it generate itself all the cases, solve all of them, and then report the 34 solutions. Finally, we remark that a straightforward application of the technique of <ref> [TSSW96] </ref> would lead to exceedingly too big linear programs in some cases. For example, in order to find the best gadget reducing 4SAT to 2SAT we would have to solve a linear program with 2 63 constraints. To deal with such cases, we used a method already employed in [TSSW96] that <p> of <ref> [TSSW96] </ref> would lead to exceedingly too big linear programs in some cases. For example, in order to find the best gadget reducing 4SAT to 2SAT we would have to solve a linear program with 2 63 constraints. To deal with such cases, we used a method already employed in [TSSW96] that reduces the sized of the linear program at the cost of possibly producing non-optimal gadgets. Alternatively, it is possible to reduce the size of the linear programs at the cost of possibly producing unfeasible gadgets of super-optimal cost. <p> Alternatively, it is possible to reduce the size of the linear programs at the cost of possibly producing unfeasible gadgets of super-optimal cost. When the two approaches produce gadgets of the same cost, then we have a guarantee of optimality. The reader is again referred to <ref> [TSSW96, Tre97] </ref> for more details. The generated LP is solved using a public domain LP solver, lp solve version 2, written by Michel Berkelaar (with some additions by Jeroen Dirks), available at the URL ftp://ftp.zib.de/pub/mathprog/lp-berkelaar/lp-solve/ Once the LP is solved, the solution is reported in L a T E X.
Reference: [Yan94] <author> M. Yannakakis. </author> <title> On the approximation of maximum satisfiability. </title> <journal> Journal of Algorithms, </journal> <volume> 17 </volume> <pages> 475-502, </pages> <year> 1994. </year> <note> Preliminary version in Proc. of SODA'92. </note>
Reference-contexts: Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using <ref> [Yan94, GW94, GW95] </ref>) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using [Yan94, GW94, GW95, FG95, OHA96]) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT. <p> Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. 1 Max SAT Max 3SAT Due to :75 :75 [GW94] :758 :765 fl [GW95] (using [GW94]) :762 fl :77 fl [FG95] (using [GW94, GW95]) :765 :769 [OHA96] (using [Yan94, GW94, GW95]) :801 [TSSW96] (using [FG95]) :77 [Asa97] (using <ref> [Yan94, GW94, GW95, FG95, OHA96] </ref>) :8 :826 This paper for satisfiable instances Table 1: Evolution of the approximation factors for Max SAT and Max 3SAT.
Reference: [Zwi97] <author> U. Zwick. </author> <title> Approximation algorithms for constraint satisfaction problems involving at most three variables per constraint. </title> <type> Manuscript, </type> <month> July </month> <year> 1997. </year> <month> 26 </month>
Reference-contexts: As a consequence of their new technique, they were able to present a (7=8 ")-approximate algorithm for Max 3SAT, for any " &gt; 0. Such an algorithm is the best possible, since we recall that (7=8 + ")-approximating Max 3SAT is NP-hard [H-as97]. Very recently, Zwick <ref> [Zwi97] </ref> applied the techniques of [KZ97] to the study of Max 3CSP, and came up with a 1=2-approximate algorihtm, which is again the best possible. Using ideas from the present paper, Zwick [Zwi97] also improved our approximation of satisfiable instances of Max 3CSP, developing a 5=8-approximate algorithm for this restricted problem. <p> Very recently, Zwick <ref> [Zwi97] </ref> applied the techniques of [KZ97] to the study of Max 3CSP, and came up with a 1=2-approximate algorihtm, which is again the best possible. Using ideas from the present paper, Zwick [Zwi97] also improved our approximation of satisfiable instances of Max 3CSP, developing a 5=8-approximate algorithm for this restricted problem. Our results for satisfiable instances of Max kCSP are still the best known for k 4. Organization of the Paper.
References-found: 32

