URL: ftp://ftp.cis.udel.edu/pub/people/wood/workshop.pre.ps
Refering-URL: http://www.cis.udel.edu/~dna3/DNA/udel.html
Root-URL: http://www.cis.udel.edu
Email: bobw@nadc.navy.mil  wood@cis.udel.edu  
Title: Exascale Computer Algebra Problems Interconnect with Molecular Reactions and Complexity Theory  
Author: Robert M. Williams David H. Wood 
Address: PA 18974, USA  19716, USA  
Affiliation: Warminster  Department of Computer and Information Sciences University of Delaware Newark, DE  
Note: Naval Air Warfare Center AD,  
Abstract: In discussing exascale (exa = 10 18 ) computer algebra problems we interconnect three themes. First, DNA is an attractive medium for computation because of its density and parallelism. Second, computer algebra is similar to DNA laboratory reactions. Both rearrange identical subunits. Third, determinant and/or permanent expansions exemplify many levels of complexity. These three issues are combined in a planned experiment using a DNA algorithm to evaluate or approximate the permanent of a matrix of zeros and ones, a well-known problem in the class #P-Complete. Such problems are harder than those previously addressed by DNA techniques in the pioneering articles of Adleman and Lipton. This points the way to DNA methods for expanding a symbolic determinant given its zero pattern, which is of still higher complexity. We begin to approach interesting problem sizes because we reduce scale-up difficulties by alternating intermediate steps of building and filtering. The example algorithm suggests directions toward the general problem of expanding symbolic determinants and permanents given their zero entries.
Abstract-found: 1
Intro-found: 1
Reference: [Adl] <author> L. M. Adleman. </author> <title> On constructing a molecular computer. </title> <institution> University of Southern California Department of Computer Science Draft. </institution>
Reference-contexts: Next, we consider the question: "What class of dynamic computational processes or algorithms could correspond to DNA reactions?" Some standard laboratory processes have natural counterparts in computing. These are shown in Table 2. These identifications have been used by several researchers <ref> [Adl] </ref> [Adl94] [Bea95] [BDL95] [Lip95]. Of course, there are also many other laboratory processes [SFM89] that are not included here, some of which have also been proposed for DNA Computing. Table 1: Some standard laboratory processes have natural counterparts in computing.
Reference: [Adl94] <author> L. M. Adleman. </author> <title> Molecular computation of solutions to combinatorial problems. </title> <journal> Science, </journal> <volume> 266 </volume> <pages> 1021-1024, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: A comprehensive 90 page survey [Con90] appeared in 1990. In November 1992, a special issue of Computer [Com92] was devoted to molecular computing. Two years after this special issue, molecular computing was no longer hypothetical. In a major breakthrough, Adleman <ref> [Adl94] </ref> was able to say, "This experiment demonstrates the feasibility of carrying out computations at the molecular level." Out of the fantastic range of biological and non-biological molecular reactions, Adleman choose to exploit DNA and its attendant laboratory technology. <p> Next, we consider the question: "What class of dynamic computational processes or algorithms could correspond to DNA reactions?" Some standard laboratory processes have natural counterparts in computing. These are shown in Table 2. These identifications have been used by several researchers [Adl] <ref> [Adl94] </ref> [Bea95] [BDL95] [Lip95]. Of course, there are also many other laboratory processes [SFM89] that are not included here, some of which have also been proposed for DNA Computing. Table 1: Some standard laboratory processes have natural counterparts in computing.
Reference: [BB] <author> Eric B. Baum and Dan Boneh. </author> <title> Running dynamic programming algorithms on a DNA computer. </title> <address> http://www.neci.nj.nec.com/homepages/eric/eric.html. </address>
Reference-contexts: A successful algorithm must be efficient and must also suit the means of computation. DNA computation seems to require algorithms that are quite different from those used on conventional computers (one notable exception is found in <ref> [BB] </ref>). Clearly, much is yet to be learned about DNA algorithms. Furthermore, we need not limit ourselves to DNA among the possible biological computing media [Con90][SS95][Bra95].
Reference: [BDL95] <author> Dan Boneh, Christopher Dunworth, and Richard J. Lipton. </author> <title> Breaking DES using a molecular computer. </title> <type> Technical Report CS-TR-489-95, </type> <institution> Princeton University, </institution> <year> 1995. </year>
Reference-contexts: Next, we consider the question: "What class of dynamic computational processes or algorithms could correspond to DNA reactions?" Some standard laboratory processes have natural counterparts in computing. These are shown in Table 2. These identifications have been used by several researchers [Adl] [Adl94] [Bea95] <ref> [BDL95] </ref> [Lip95]. Of course, there are also many other laboratory processes [SFM89] that are not included here, some of which have also been proposed for DNA Computing. Table 1: Some standard laboratory processes have natural counterparts in computing.
Reference: [Bea95] <author> Donald Beaver. </author> <title> Factoring: The DNA solution. </title> <journal> J. of Computational Biology, </journal> <volume> 1, </volume> <year> 1995. </year>
Reference-contexts: Next, we consider the question: "What class of dynamic computational processes or algorithms could correspond to DNA reactions?" Some standard laboratory processes have natural counterparts in computing. These are shown in Table 2. These identifications have been used by several researchers [Adl] [Adl94] <ref> [Bea95] </ref> [BDL95] [Lip95]. Of course, there are also many other laboratory processes [SFM89] that are not included here, some of which have also been proposed for DNA Computing. Table 1: Some standard laboratory processes have natural counterparts in computing.
Reference: [BP94] <author> D. Bini and V. Pan. </author> <title> Polynomial and Matrix Computations. </title> <publisher> Birkhauser Verlag, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: O (n 6 ) n ESD0 det ( N 3 Arrow) Linear programming by ellipsoids [?] O (n 6 ) 1 ESD0 have nonzero terms? () Full bipartite network flow? [HK73] O (n 5=2 ) O (n 2 ) n ESD0 det (BrGi) Matrix-vector multiply <ref> [BP94] </ref> O (n 2 ) O (n) n ESD0 for det (Arrow) Search n unordered data O (n) O (1) n ESD0 det (Triangular) Select one datum from a set O (1) 3.1 Facts about Permanents Here we treat permanents (and determinants) from the point of view of permutations.
Reference: [BR91] <author> Richard A. Brualdi and Herbert J. Ryser. </author> <title> Combinatorial Matrix Theory. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1991. </year> <title> Encyclopedia of Mathematics and Its Applications, Volume 39, Edited by G.-C. </title> <publisher> Rota. </publisher>
Reference-contexts: f3; 2; 1g : (3) A different pattern having two zeros, but in different locations, happens to give fewer terms, per B a 1;1 0 a 1;3 a 3;1 0 a 3;3 C Here the desired set permutations is f1; 2; 3g ; f3; 2; 1g : (5) The following <ref> [BR91] </ref> is easily observed in examples such as Eqs 2 and 4. Fact 1 Let A have independent symbols for entries, aside from a given zero pattern.
Reference: [Bra95] <author> Dennis Bray. </author> <title> Protein molecules as computational elements in living cells. </title> <journal> Nature, </journal> <volume> 376 </volume> <pages> 307-312, </pages> <month> July 27 </month> <year> 1995. </year>
Reference: [Com92] <editor> Special issue on molecular computer paradigms. In Michael Conrad, editor, </editor> <publisher> Computer. IEEE Computer Society, Los Alamitos, </publisher> <address> CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: A comprehensive 90 page survey [Con90] appeared in 1990. In November 1992, a special issue of Computer <ref> [Com92] </ref> was devoted to molecular computing. Two years after this special issue, molecular computing was no longer hypothetical.
Reference: [Con90] <author> Michael Conrad. </author> <title> Molecular Computing. </title> <editor> In Marshall C. Yovits, editor, </editor> <booktitle> Advances in Computers, </booktitle> <volume> Volume 31, </volume> <pages> pages 235-324. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: A comprehensive 90 page survey <ref> [Con90] </ref> appeared in 1990. In November 1992, a special issue of Computer [Com92] was devoted to molecular computing. Two years after this special issue, molecular computing was no longer hypothetical.
Reference: [GJ79] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The solution of ESD0, given a pattern of zeros, is a set of permutations, as in Eqs 3, and 5. Fact 1 tells us that to merely find the size of this set is equivalent to the evaluation of an 0-1 permanent. This evaluation is known <ref> [GJ79] </ref> to be an intractable problem. Fact 2 The problem P0-1, computing the permanent of an n fi n matrix of zeros and ones, is in the complexity class #P-Complete. <p> The problems in the class #P-Complete can be thought of as decision problems (often from the complexity class NP-Complete) with the additional requirement of determining not just the existence of solutions, but determining the exact number of solutions. For the full details, see <ref> [GJ79] </ref>. We know [NW75] an algorithm for P0-1.
Reference: [HK73] <author> John E. Hopcroft and Richard M. Karp. </author> <title> An n 5=2 algorithm for maximum matchings in bipartite graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 2(4) </volume> <pages> 225-231, </pages> <year> 1973. </year>
Reference-contexts: O (n 6 ) n ESD0 det ( N 3 Arrow) Linear programming by ellipsoids [?] O (n 6 ) 1 ESD0 have nonzero terms? () Full bipartite network flow? <ref> [HK73] </ref> O (n 5=2 ) O (n 2 ) n ESD0 det (BrGi) Matrix-vector multiply [BP94] O (n 2 ) O (n) n ESD0 for det (Arrow) Search n unordered data O (n) O (1) n ESD0 det (Triangular) Select one datum from a set O (1) 3.1 Facts about Permanents <p> There is also an easy test for t = 0 using a O (n 5=2 ) algorithm <ref> [HK73] </ref>. The main disadvantage of our algorithm is that it is impractical for matrices larger than about 20 fi 20. This is simply because the universal mixture would have to contain all 20! 10 18 permutations of length 20. This would require roughly a liter of DNA solution.
Reference: [Lip95] <author> Richard J. Lipton. </author> <title> Using DNA to solve NP-complete problems. </title> <journal> Science, </journal> <volume> 268 </volume> <pages> 542-545, </pages> <month> April 28 </month> <year> 1995. </year>
Reference-contexts: Within a few months, a landmark paper <ref> [Lip95] </ref> by Lipton showed how DNA laboratory techniques could be use to solve the versatile 3SAT problem in NP-Complete. This was particularly intriguing because so many NP-Complete problems can be reduced to 3SAT in a natural way. Shortly thereafter, the first Workshop on DNA Based Computers was held [Lipar]. <p> Next, we consider the question: "What class of dynamic computational processes or algorithms could correspond to DNA reactions?" Some standard laboratory processes have natural counterparts in computing. These are shown in Table 2. These identifications have been used by several researchers [Adl] [Adl94] [Bea95] [BDL95] <ref> [Lip95] </ref>. Of course, there are also many other laboratory processes [SFM89] that are not included here, some of which have also been proposed for DNA Computing. Table 1: Some standard laboratory processes have natural counterparts in computing.
Reference: [Lipar] <editor> Richard J. Lipton, editor. </editor> <booktitle> Proceedings of the First Workshop on DNA Based Computers, </booktitle> <month> April 4, </month> <year> 1995, </year> <note> to appear. </note>
Reference-contexts: This was particularly intriguing because so many NP-Complete problems can be reduced to 3SAT in a natural way. Shortly thereafter, the first Workshop on DNA Based Computers was held <ref> [Lipar] </ref>. The topics included NP-Complete problems, integer factoring, universal and reprogrammable DNA computers including various Turing machines, the necessity of annealing and ligation, and biological paradigms. However, Adleman and Lipton and other researchers generally use techniques that extract a (small) answer from the set of all conceivable answers.
Reference: [LSW + ] <author> Thomas H. Leete, Matthew D. Schwartz, Robert M. Williams, David H. Wood, Jerome S. Salem, and Harvey Rubin. </author> <title> Massively parallel DNA computation: Expansion of symbolic determinants. In review process at Nature. </title>
Reference-contexts: Our computations of permanents are of low cost because they exploit a once-and-for-all laboratory construction that suffices for even the worst case problem output size. (Which makes these computations somewhat wasteful in their use of DNA.) In a related companion paper <ref> [LSW + ] </ref> algorithms are given for expanding symbolic determinants and permanents given their patterns of zero entries. <p> In a companion paper <ref> [LSW + ] </ref> the ESD0 algorithms are less restricted: only enough DNA is needed to represent the answer. 2 Computer Algebra The computer algebra subfield of computer science produces exact symbolic results by finite computations on exact symbolic inputs. <p> Ideally this would be done by another DNA algorithm that accepts input in the form of the output produced by our algorithm. Otherwise, step 4 has to become "Output: Decode the remaining permutations." This is likely to be a formidable job. A companion paper <ref> [LSW + ] </ref> gives a readout algorithm. Also, algorithms for ESD0 are given there that are restricted only by the size of the output, not by the size of the input matrix.
Reference: [NW75] <author> Albert Nijenhuis and Herbert S. Wilf. </author> <title> Combinatorial Algorithms. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: The problems in the class #P-Complete can be thought of as decision problems (often from the complexity class NP-Complete) with the additional requirement of determining not just the existence of solutions, but determining the exact number of solutions. For the full details, see [GJ79]. We know <ref> [NW75] </ref> an algorithm for P0-1. Fact 3 A 0-1 permanent of size n fi n can be computed with O (n 2 n ) arithmetic operations. 4 DNA Realizations of 0-1 Permanent Evaluation In the first subsection, we give a very simple algorithm for evaluating or approximating a 0-1 permanent.
Reference: [SFM89] <author> J. Sambrook, E. F. Fritsch, and T. Maniatis. </author> <note> Molecular Cloning, A Laboratory Manual. Cold Spring Harbor Laboratory Press, second edition, </note> <year> 1989. </year>
Reference-contexts: These are shown in Table 2. These identifications have been used by several researchers [Adl] [Adl94] [Bea95] [BDL95] [Lip95]. Of course, there are also many other laboratory processes <ref> [SFM89] </ref> that are not included here, some of which have also been proposed for DNA Computing. Table 1: Some standard laboratory processes have natural counterparts in computing.
Reference: [SS95] <author> Warren D. Smith and Allan Schweitzer. </author> <title> DNA computers in vitro and vivo. </title> <type> Technical report, </type> <institution> NEC Research Institute, </institution> <address> 4 Independence Way, Princeton, NJ 08544, </address> <month> March </month> <year> 1995. </year>
Reference: [Val79] <author> Leslie G. Valiant. </author> <title> The complexity of enumeration and reliability problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 8(3) </volume> <pages> 410-421, </pages> <year> 1979. </year>
Reference-contexts: Recall that the value of an n fi n permanent having zeros and ones for elements is an integer between 0 and n!. The most interesting cases are when the value of the permanent is not small. This is because it is known <ref> [Val79] </ref> from rather general considerations that if the value of the permanent is t, then it is possible to find the value in time proportional to a polynomial in t|which could be an efficient method for conventional computers when t is small.
References-found: 19

