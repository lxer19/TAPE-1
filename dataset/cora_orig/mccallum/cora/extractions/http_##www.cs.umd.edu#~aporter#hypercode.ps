URL: http://www.cs.umd.edu/~aporter/hypercode.ps
Refering-URL: http://www.cs.umd.edu/~aporter/html/references.html
Root-URL: 
Email: perpich@lucent.com dep@bell-labs.com aporter@cs.umd.edu  votta@bell-labs.com michaelwwade@lucent.com  
Title: Anywhere, Anytime Code Inspections: Using the Web to Remove Inspection Bottlenecks in Large-Scale Software Development  
Author: J. M. Perpich D. E. Perry A. A. Porter L. G. Votta M. W. Wade 
Keyword: Code inspections: web-based, meetingless, asynchronous; Natural occurring inspection experiment; Automated support for inspections.  
Address: IL 60566 Murray Hill NJ 07974 College Park, MD 20742  IL 60566 Naperville, IL 60566  
Affiliation: Computer Science Dept Lucent Technologies Inc Bell Laboratories University of Maryland Naperville,  Software Production Research Quality Management Group Bell Laboratories Lucent Technologies Inc Naperville,  
Note: Line Access SW Development Software Production Research  The acceptance of the inspection tool has been excellent. The cost savings just from the reduction in paper work This work is supported in part by a National Science Foundation Faculty Early Career Development Award, CCR-9501354.  
Abstract: The dissemination of critical information and the synchronization of coordinated activities are critical problems in geographically separated, large-scale, software development. While these problems are not insurmountable, their solutions have varying trade-offs in terms of time, cost and effectiveness. Our previous studies have shown that the inspection interval is typically lengthened because of schedule conflicts among inspectors which delay the (usually) required inspection collection meeting. We present and justify a solution using an intranet web that is both timely in its dissemination of information and effective in its coordination of distributed inspectors. First, exploiting a naturally occurring experiment (reported here), we conclude that the asynchronous collection of inspection results is at least as effective as the synchronous collection of those results. Second, exploiting the information dissemination qualities and the on-demand nature of information retrieval of the web, and the platform independence of browsers, we built an inexpensive tool that integrates seamlessly into the current development process. By seamless we mean an identical paper flow that results in an almost identical inspection process. and the time savings from the reduction in distribution interval of the inspection package (sometimes involving international mailings) have been substantial. These savings together with the seamless integration into the existing environment are the major factors for this acceptance. From our viewpoint as experimentalists, the acceptance came too readily. Therefore we lost our opportunity to explore this tool using a series of controlled experiments to isolate the underlying factors or its effectiveness. Nevertheless, by using historical data we can show that the new process is less expensive in terms of cost and at least as effective in terms of quality (defect detection effectiveness). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. M. Baecker. </author> <title> Readings in Groupware and Computer-Supported Cooperative Work. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: .185 &lt; .01 (Faults) Average Code Size/Inspection 26.0 59.4 28.8 &lt; .01 (NCSL) Average Fault Density/Inspection .0031 .0037 .0031 .03 (Faults/NCSL) Average Repair Interval 1.2 3.3 1.3 &lt; .01 (Days) Table 2: Comparison of Desk and Meeting Inspection Detection Effectiveness for Repaired Code. support for synchronous meetings (see for example <ref> [4, 1] </ref> ). But as we have shown above, asynchronous code inspections are more cost effective and at least as quality effective as synchronous inspections. Moreover, the cost of asynchronous automated support is significantly less than that of synchronous.
Reference: [2] <author> K. Ballman and L. G. Votta. </author> <title> Organizational congestion in large scale software development. </title> <booktitle> In Third International Conference on Software Process, </booktitle> <pages> pages 123-134, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: However, work hours in Denver are disjoint from those in Sydney, Australia. Because of these two forms of separation there are often bottlenecks introduced into the project schedules. For example, our previous studies <ref> [2] </ref> have shown that inspection interval is typically lengthened because of schedule conflicts among inspectors which delay the (usually) required inspection collection meeting. The problems of geographical and temporal separation exacerbate the scheduling problems and result in even greater bottlenecks. <p> The primary effort in prior automation is in the application of CSCW support for inspection collection meetings | that is, in the 1 Porter et al. <ref> [2] </ref> describes several approaches for measuring and estimating defect detection ratio. We use the observed defect density estimate they recommended.
Reference: [3] <author> G. E. P. Box, W. G. Hunter, and J. S. Hunter. </author> <title> Statistics for Experimenters. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: We compare the results from these two classes of inspections: new code (Table 1 1) and repaired code (Table 2). The significance is calculated using the Wilcoxon-Mann and Whitney Rank Order Test <ref> [3] </ref> , a two-sided test assessing whether the fault densities observed for each inspection when taken from a desk or meeting are drawn from the same distribution. The smaller the value, the more significant.
Reference: [4] <author> R. E. Kraut and L. A. Streeter. </author> <title> Coordination in software development. </title> <journal> Communications of the ACM, </journal> <volume> 38:3:69-81, </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: .185 &lt; .01 (Faults) Average Code Size/Inspection 26.0 59.4 28.8 &lt; .01 (NCSL) Average Fault Density/Inspection .0031 .0037 .0031 .03 (Faults/NCSL) Average Repair Interval 1.2 3.3 1.3 &lt; .01 (Days) Table 2: Comparison of Desk and Meeting Inspection Detection Effectiveness for Repaired Code. support for synchronous meetings (see for example <ref> [4, 1] </ref> ). But as we have shown above, asynchronous code inspections are more cost effective and at least as quality effective as synchronous inspections. Moreover, the cost of asynchronous automated support is significantly less than that of synchronous.
Reference: [5] <author> P. McCarthy, A. Porter, H. Siy, and L. G. Votta. </author> <title> An experiment to assess cost-benefits of inspection meetings and their alternatives. </title> <booktitle> In Proceedings of the International Metrics Symposium, </booktitle> <address> Berlin, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Perry, Staudenmeyer and Votta [7] point out the importance of understanding the existing process before making improvements and discuss a set of related studies aimed at gaining that understanding. Bradac, Perry and Votta <ref> [5] </ref> report a study to find out how developers spend their time | that is, what they actually do as opposed to what they are thought to do. Only by understanding the current process can one find out where the problems are and which of those are important.
Reference: [6] <author> D. E. Perry, A. A. Porter, L. G. Votta, and M. M. Wade. </author> <title> Evaluating workflow and process automation in wide-area software development. </title> <booktitle> In Software Process Technology, Fifth European Workshop - EWSPT'96. </booktitle> <publisher> Springer Verlag, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: From our viewpoint as experimentalists, the acceptance has come too readily and easily: we have lost our opportunity to control the important empirical variables and adequately assess the impact of the tool experimentally (see <ref> [6] </ref> for a description of our desired experimental structure). Because of its immediate acceptance at the grass roots level, the prototype has become a de facto product.
Reference: [7] <author> D. E. Perry, N. Staudenmayer, and L. G. Votta. </author> <title> People, organizations, and process improvement. </title> <journal> IEEE Software, </journal> <pages> pages 36-45, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: While it is certainly necessary to assess the impact of any process change, these improvements are most often done without understanding thoroughly the existing process, where the important problems are, and what the tradeoffs are among the various alternative solutions. Perry, Staudenmeyer and Votta <ref> [7] </ref> point out the importance of understanding the existing process before making improvements and discuss a set of related studies aimed at gaining that understanding.
Reference: [8] <author> D. E. Perry, N. A. Staudenmayer, and L. G. Votta. </author> <title> Understanding and improving time usage in software development. </title> <editor> In A. Wolf and A. Fuggetta, editors, </editor> <booktitle> Software Process, volume 5 of Trends in Software: Software Process. </booktitle> <publisher> John Wiley & Sons., </publisher> <year> 1995. </year>
Reference-contexts: If on-line inspections are better than manual inspections, then it must be possible to eliminate meetings without decreasing effectiveness. Previous work <ref> [9, 8, 10] </ref> suggests that this is indeed the case, but until now there has been no direct evidence from an industrial environment.
Reference: [9] <author> A. Porter, L. G. Votta, and V. Basili. </author> <title> Comparing detection methods for software requirement inspections: A replicated experiment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(6) </volume> <pages> 563-575, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: For example, Ballman and Votta [11] report that scheduling bottlenecks caused by inspection meetings lengthen the development interval and that meetingless inspections avoid this problem without loss of the important characteristics associated with inspection meetings. To deepen our understanding of inspections, Porter, Votta and Basili <ref> [9] </ref> empirically (and repli-catably) compare and evaluate detection methods for software requirements' inspections. Siy's thesis [10] has the seminal result of showing that the structural changes commonly-proposed to inspection processes do not alter the effectiveness of those processes. <p> If on-line inspections are better than manual inspections, then it must be possible to eliminate meetings without decreasing effectiveness. Previous work <ref> [9, 8, 10] </ref> suggests that this is indeed the case, but until now there has been no direct evidence from an industrial environment.
Reference: [10] <author> H. P. Siy. </author> <title> Identifying the Mechanisms Driving Code Inspection Costs and Benefits. </title> <type> PhD thesis, </type> <institution> University of Maryland, College Park, MD, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: To deepen our understanding of inspections, Porter, Votta and Basili [9] empirically (and repli-catably) compare and evaluate detection methods for software requirements' inspections. Siy's thesis <ref> [10] </ref> has the seminal result of showing that the structural changes commonly-proposed to inspection processes do not alter the effectiveness of those processes. We present and justify a solution using an intranet web that is both timely in its dissemination of information and effective in its coordination of distributed inspectors. <p> If on-line inspections are better than manual inspections, then it must be possible to eliminate meetings without decreasing effectiveness. Previous work <ref> [9, 8, 10] </ref> suggests that this is indeed the case, but until now there has been no direct evidence from an industrial environment.
Reference: [11] <author> L. G. Votta. </author> <booktitle> Does every inspection need a meeting? In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> volume 18, </volume> <pages> pages 107-114, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Critical to making well-founded improvements is understanding the range of alternative changes and assessing their various strengths and weaknesses. Empirical studies are fundamental to determining the characteristics of these changes. For example, Ballman and Votta <ref> [11] </ref> report that scheduling bottlenecks caused by inspection meetings lengthen the development interval and that meetingless inspections avoid this problem without loss of the important characteristics associated with inspection meetings.
Reference: [12] <author> L. G. Votta and M. L. Zajac. </author> <title> Design process improvement case study using process waiver data. </title> <booktitle> In Proceedings of the Fifth European Conference in Software Engineering, volume 989 of Lecture Notes in Computer Science, </booktitle> <pages> pages 44-58. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: Thus we are fortunate to have data available from one of these existing experiments that enables us to compare the effectiveness of synchronous vs. asynchronous inspections (see <ref> [12] </ref> for a similar example). The advantage of this approach is that the empirical infrastructure is already in place that is, the software development organization was already measuring the effects of two different inspection processes (desk-based collection ver sus meeting-based collection) and recording critical data for the two processes.
References-found: 12

