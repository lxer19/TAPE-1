URL: http://www.cs.berkeley.edu/~elan/pubs/papers/as1-sigcomm98.ps
Refering-URL: http://www-mash.cs.berkeley.edu/mash/pubs/index.html
Root-URL: 
Email: felan,mccanne,randyg@EECS.Berkeley.EDU  
Title: An Active Service Framework and its Application to Real-time Multimedia Transcoding  
Author: Elan Amir, Steven McCanne, and Randy Katz 
Address: Berkeley  
Affiliation: University of California,  
Abstract: Several recent proposals for an active networks architecture advocate the placement of user-defined computation within the network as a key mechanism to enable a wide range of new applications and protocols, including reliable multicast transports, mechanisms to foil denial of service attacks, intra-network real-time signal transcoding, and so forth. This laudable goal, however, creates a number of very difficult research problems, and although a number of pioneering research efforts in active networks have solved some of the preliminary small-scale problems, a large number of wide open problems remain. In this paper, we propose an alternative to active networks that addresses a restricted and more tractable subset of the active-networks design space. Our approach, which we (and others) call active services, advocates the placement of user-defined computation within the network as with active networks, but unlike active networks preserves all of the routing and forwarding semantics of current Internet architecture by restricting the computation environment to the application layer. Because active services do not require changes to the Internet architecture, they can be deployed incrementally in today's Internet. We believe that many of the applications and protocols targeted by the active networks initiative can be solved with active services and, toward this end, we propose herein a specific architecture for an active service and develop one such service in detail the Media Gateway (MeGa) service that exploits this architecture. In defining our active service, we encountered six key problems service location, service control, service management, service attachment, service composition, and the definition of the service environment and have crafted solutions for these problems in the context of the MeGa service. To verify our design, we implemented and fielded MeGa on the UC Berkeley campus, where it has been used regularly for several months by real users who connect via ISDN to an on-line classroom. Our initial experience indicates that our active services prototype provides a very flexible and programmable platform for intra-network computation that strikes a good balance between the flexibility of the active networks architecture and the practical constraints of incremental deployment in the current Internet. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ALEXANDER, D. S., SHAW, M., NETTLES, S. M., AND SMITH, J. M. </author> <title> Active bridging. </title> <booktitle> In Proceedings of SIG-COMM'97 (Cannes, </booktitle> <address> France, </address> <month> Sep </month> <year> 1997), </year> <note> ACM. </note>
Reference-contexts: SwitchWare takes a language-based approach towards exploring the most extreme version of active networks where each packet executes a program. In addition to active packets, the SwitchWare architecture defines middle-ware switchlets that provide support for relatively simple and lightweight packets to embody complex functionality. Alexander et al. <ref> [1] </ref> describe an implementation of an active bridge implemented entirely by switchlets running within the SwitchWare architecture. A related effort is the BBN smart packets and active router projects [20] Bhattacharjee et al. [9] describe an active networks architecture for dealing with congestion in the network.
Reference: [2] <author> AMIR, E., MCCANNE, S., AND KATZ, R. </author> <title> Receiver-driven bandwidth adaptation for light-weight sessions. </title> <booktitle> In Proceedings of ACM Multimedia '97 (Nov. 1997), ACM. </booktitle>
Reference-contexts: within the network infrastructure, they are actually created, configured, and controlled dynamically by the user application on the end-system at the edge of the network, for instance, by employing application-specific protocols to convey receiver interest into the network to best configure the agent for the receiving user's preferences and capabilities <ref> [2] </ref>. Unfortunately, the Internet service model has no native support for deploying agents within the network in this fashion. <p> After a number of years of experimentation with techniques for deploying and configuring video gateways and drawing upon emerging ideas in active networks and the success of Java's platform-independent computing model <ref> [2, 3] </ref>, we refined our creation and control protocols into a programmable infrastructure that became the active services prototype presented herein. <p> Since video streams dominate bandwidth consumption on the link, we focus on a control protocol for video gateways. In the MeGa architecture, this control is carried out by the Scalable Consensus-based Bandwidth Allocation (SCUBA) protocol. Reference <ref> [2] </ref> provides a comprehensive description of the protocol. In this section, we briefly describe its operation and focus on how it relates to gateway 9 cally adjust their transmission rate in response to receiver interest. control in MeGa.
Reference: [3] <author> AMIR, E., MCCANNE, S., AND ZHANG, H. </author> <title> An application-level video gateway. </title> <booktitle> In Proceedings of ACM Multimedia '95 (Nov. 1995), ACM. </booktitle>
Reference-contexts: One application class that is constrained in this way are so-called video gateways <ref> [3] </ref>, which are computational elements that adjust the bit rate of video stream or collection of video streams to accommodate the constrained capacity of communication links at strategic locations within the network. <p> Section 4 presents implementation details. In Section 5 we present a brief survey of related work and then conclude. 2 An Active Service Framework A video gateway mitigates bandwidth heterogeneity by adjusting each video flow's bit-rate in a controlled fashion to meet each link's available capacity <ref> [3, 32] </ref>. While mechanisms to accomplish such rate adaptation are well understood, companion mechanisms for instantiating the transcoding agents at the appropriate places in the network and for flexibly configuring and controlling them once running are comparatively underdeveloped. <p> After a number of years of experimentation with techniques for deploying and configuring video gateways and drawing upon emerging ideas in active networks and the success of Java's platform-independent computing model <ref> [2, 3] </ref>, we refined our creation and control protocols into a programmable infrastructure that became the active services prototype presented herein. <p> Despite the fact that the SSG offers the appearance of a centralized control model, its soft-state structure enables trivial regeneration and replication, thereby avoiding a single point of failure design, and maintaining the overall robustness of the AS1 architecture. 3 The MeGa Active Service Media gateways <ref> [3] </ref> are application-level agents that transparently bridge two MBone RTP sessions and process the media streams between the sessions. Having defined the AS1 re-usable framework, we now describe how this framework is specialized to the de 8 ployment of media gateways in the Media Gateway active service (MeGa). <p> In its current form the MeGa architecture contains four clients and four matching gateways for each of the following media: video, audio, whiteboard and SDP. The audio and video gateways are implemented using the RTP gateway architecture described in <ref> [3] </ref>. The SDP gateway is implemented as a reflector. The requirements of whiteboard gateways differ significantly from the other three due to the fact that whiteboard data must be transmitted reliably, as opposed to the unreliable transmission requirements of audio, video and SDP data.
Reference: [4] <author> ANDERSON, T. E., CULLER, D. E., PATTERSON, D. A., </author> <title> AND THE NOW TEAM. A case for networks of workstations: NOW. </title> <journal> IEEE Micro (Feb. </journal> <year> 1995). </year>
Reference-contexts: The service is deployed on the Berkeley Network of Workstations (NOW) <ref> [4] </ref> using the host manager deployment algorithm described in Section 2.3.3. The only unimplemented portion of the design described above is service composition and the use of an automatic service location mechanism as detailed in Section 2.2.
Reference: [5] <author> ARNOLD, K., AND GOSLING, J. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <month> 11 </month>
Reference-contexts: While we have not included a solution to this problem in our current design, nothing in our service environment model precludes the use of type-safe languages such as Safe-Tcl [10], Java <ref> [5] </ref>, or Python [28] and as such we view this problem as important, yet orthogonal to our current endeavor.
Reference: [6] <institution> ARPANET WORKING GROUP REQUESTS FOR COMMENT, DDN NETWORK INFORMATION CENTER. Dynamic Host Configuration Protocol (DHCP). SRI International, </institution> <address> Menlo Park, CA, </address> <month> October </month> <year> 1993. </year> <month> RFC-1541. </month>
Reference-contexts: We have identified two basic approaches to this problem. The first relies on a centralized server at a well-known location that provides the necessary bootstrap. In this approach, the client obtains necessary rendezvous information from a server, e.g., using the Dynamic Host Configuration Protocol (DHCP) <ref> [6] </ref>. In contrast to this approach where a client pulls down service location information from a well-known point, multicast communication can be exploited to push service location information out to multicast listeners.
Reference: [7] <institution> ARPANET WORKING GROUP REQUESTS FOR COMMENT, DDN NETWORK INFORMATION CENTER. Service Location Protocol. SRI International, </institution> <address> Menlo Park, CA, </address> <month> June </month> <year> 1997. </year> <month> RFC-2165. </month>
Reference-contexts: In this model, a client listens on a well-known multicast address over which the required configuration information is periodically transmitted. Hodes et al. [19] describe a generalized scheme for service location using this approach based on the Service Location Protocol (SLP) <ref> [7] </ref>. In AS1, we decouple the physical location of the active service from the control communication channel by leveraging the level of indirection offered by multicast communication. This greatly simplifies the service location problem.
Reference: [8] <author> BALAKRISHNAN, H., SESHAN, S., AMIR, E., AND KATZ, R. H. </author> <title> Improving TCP/IP performance over wireless networks. </title> <booktitle> In Proceedings of 1st ACM Conf. on Mobile Computing and Networking (MOBICOM) (Berkeley, </booktitle> <address> CA, </address> <month> November </month> <year> 1995), </year> <note> ACM. </note>
Reference-contexts: The ability to quickly re-program and deploy new protocols at any level in the network architecture is not possible in nor is it the goal of active services, and applications like nomadic routing [22], localized TCP optimizations (e.g., snoop <ref> [8] </ref>), SYN-flooding avoidance, etc. are not naturally amenable to our framework.
Reference: [9] <author> BHATTACHARJEE, S., CALVERT, K. L., AND ZEGURA, E. </author> <title> On active networking and congestion. </title> <type> Technical Report GUT-CC-96/02, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <address> Atlanta GA, </address> <year> 1996. </year>
Reference-contexts: Alexander et al. [1] describe an implementation of an active bridge implemented entirely by switchlets running within the SwitchWare architecture. A related effort is the BBN smart packets and active router projects [20] Bhattacharjee et al. <ref> [9] </ref> describe an active networks architecture for dealing with congestion in the network. They detail the use of active processors software modules that implement application specific processing on a packet-level basis.
Reference: [10] <author> BORENSTEIN, N. </author> <title> E-mail with a mind of its own: The Safe-Tcl language for enabled mail. </title> <booktitle> In Proceedings of IFIP International Conference (Barcelona, </booktitle> <address> Spain, </address> <year> 1994). </year>
Reference-contexts: While we have not included a solution to this problem in our current design, nothing in our service environment model precludes the use of type-safe languages such as Safe-Tcl <ref> [10] </ref>, Java [5], or Python [28] and as such we view this problem as important, yet orthogonal to our current endeavor.
Reference: [11] <author> CHAWATHE, Y., FINK, S., MCCANNE, S., AND BREWER, E. </author> <title> A proxy architecture for reliable multicast in heterogeneous environments. </title> <booktitle> In Proceedings of ACM Multimedia '98 (Sept. </booktitle> <year> 1998), </year> <note> ACM. To appear. </note>
Reference-contexts: In our current prototype we focussed only on the design and implementation on stateless audio and video media gateways. As a result, our whiteboard gateway is implemented a simple reflector. However, in the future we intend to leverage the initial efforts by Chawathe et al. <ref> [11] </ref> to develop an architecture for reliable real-time multicast gateways as a component of our service. ASCP is as a string-based protocol. Our choice of a string format over a binary format was motivated by several factors. String-based protocols offer a much greater degree of flexibility in message construction.
Reference: [12] <author> CHESSON, G. </author> <title> XTP/protocol engine design. </title> <booktitle> In Proceedings of the IFIP WG6.1/6.4 Workshop (Ruschlikon, </booktitle> <month> May </month> <year> 1989). </year>
Reference-contexts: These implosion effects have been combated in a number of network protocols through a technique called multicast damping, first introduced in the IGMP [14] protocol and later used in the multicast version of XTP <ref> [12] </ref> and the SRM reliable multicast protocol [15]. The key to multicast damping is that responders wait a random time interval before acting. After the random wait, the responder multi-casts its message to the group.
Reference: [13] <author> CLARK, D. D. </author> <title> The design philosophy of the DARPA Internet protocols. </title> <booktitle> In Proceedings of SIGCOMM '88 (Stanford, </booktitle> <address> CA, </address> <month> Aug. </month> <year> 1988), </year> <note> ACM. </note>
Reference-contexts: Because state retained at each member site in the announce-listen eventually expires but is continuously refreshed it is often called soft state <ref> [13] </ref>. The simplicity and robustness of the announce-listen metaphor make it ideally suited to serve as the bedrock of the ASCP protocol. is exploited in ASCP. In this example, the AS1 cluster consists of two hosts and each host runs an agent called a host manager (HM).
Reference: [14] <author> FENNER, W. </author> <title> Internet Group Management Protocol, </title> <type> Version 2. </type> <institution> Internet Engineering Task Force, Inter-Domain Multicast Routing Working Group, </institution> <month> Feb </month> <year> 1996. </year> <title> Internet Draft (work in progress). </title>
Reference-contexts: More generally, any sort of control actions taken synchronously across a multicast group can result in implosion. These implosion effects have been combated in a number of network protocols through a technique called multicast damping, first introduced in the IGMP <ref> [14] </ref> protocol and later used in the multicast version of XTP [12] and the SRM reliable multicast protocol [15]. The key to multicast damping is that responders wait a random time interval before acting. After the random wait, the responder multi-casts its message to the group.
Reference: [15] <author> FLOYD, S., JACOBSON, V., MCCANNE, S., LIU, C.-G., AND ZHANG, L. </author> <title> A reliable multicast framework for lightweight sessions and application level framing. </title> <booktitle> In Proceedings of SIGCOMM '95 (Boston, </booktitle> <address> MA, </address> <month> Sept. </month> <year> 1995), </year> <note> ACM. </note>
Reference-contexts: These implosion effects have been combated in a number of network protocols through a technique called multicast damping, first introduced in the IGMP [14] protocol and later used in the multicast version of XTP [12] and the SRM reliable multicast protocol <ref> [15] </ref>. The key to multicast damping is that responders wait a random time interval before acting. After the random wait, the responder multi-casts its message to the group. If a responder sees an equivalent message from another member of the group, that responder suppresses its redundant response. <p> The problem of minimizing the number of duplicate servents is equivalent to the problem of minimizing the number of duplicate feedback messages in a multicast damping protocol; fortunately, this problem has been extensively studied <ref> [15, 29, 25] </ref>. In our case, we want to choose the launch timer distribution that minimizes the number of duplicate servents while maintaining acceptable bounds on the mean time until a servent is created.
Reference: [16] <author> GOVINDAN, R., ALAETTINO GLO, C., AND ESTRIN, D. </author> <title> A framework for active distributed services. </title> <type> Technical Report 98-669, </type> <institution> Information Sciences Institute, University of Southern California, </institution> <address> Los Angeles CA, </address> <year> 1998. </year>
Reference-contexts: We and others call this programmable network infrastruc-ture active services because we restrict the design to application-level services yet we inherit the novelty of the active networks programmability <ref> [16] </ref>. While we believe that the active services framework holds the promise to enable many active networks-like applications, we do not propose this framework as an outright replacement for active networks because it cannot possibly meet all of the goals and support all of the applications targeted by active networks. <p> To this end, we follow the lead of other projects in this area <ref> [16, 17, 34] </ref> by implementing an environment that consists of a programmable substrate that the servents program to implement complex computation. But we diverge from the active networks approach by constraining our environment to the application layer. <p> In this section we present current research in active networks and describe how it relates to active services. Govindan et al. <ref> [16] </ref> give a high level description of a framework for application-level active services. The report outlines an architecture for the active nodes in their network and discusses some of the research issues involved, including service deployment and the design of the service platform.
Reference: [17] <author> GUNTER, C. A., NETTLES, S. M., AND SMITH, J. M. </author> <title> The SwitchWare active network architecture, </title> <month> Nov </month> <year> 1997. </year> <note> White paper available at http://www.cis.upenn.edu/ switchware. </note>
Reference-contexts: To this end, we follow the lead of other projects in this area <ref> [16, 17, 34] </ref> by implementing an environment that consists of a programmable substrate that the servents program to implement complex computation. But we diverge from the active networks approach by constraining our environment to the application layer. <p> In contrast to our focus on application-level deployment and fault tolerance, most research on active networks addresses support for the more ambitious goal of enabling efficient and safe computation on arbitrary nodes at the network layer. The SwitchWare project <ref> [17] </ref> is developing an architecture for programmable switches and routers. SwitchWare takes a language-based approach towards exploring the most extreme version of active networks where each packet executes a program.
Reference: [18] <author> HANDLEY, M., AND JACOBSON, V. SDP: </author> <title> Session Directory Protocol. </title> <type> Internet Draft, </type> <month> Mar 26, </month> <year> 1997. </year>
Reference-contexts: While our architecture admits such configurations, we have not yet worked out all the details of service composition, how clients and/or servents would interact with the session directory service <ref> [18] </ref> to allocate multicast address, and so forth; these problems are topics of future work. <p> This leads to the following specification of the SID in MeGa. For multicast requests, the SID is: sspec:media while for unicast requests the SID is sspec:media:localaddr/rport where sspec is the unique session name given by the session creator (e.g., the o= field in an SDP <ref> [18] </ref> announcement), media is the type of media, localaddr is the local IP address of the client host, and rport is the port on which it will receive the data.
Reference: [19] <author> HODES, T. D., KATZ, R. H., SERVAN-SCHREIBER, E., AND ROWE, L. A. </author> <title> Composable ad-hoc mobile services for universal interaction. </title> <booktitle> In Proceedings of The Third ACM/IEEE Interattional Conference on Mobile Computing (MOBICOM) (Budapest, </booktitle> <address> Hungary, </address> <month> Septmber </month> <year> 1997). </year>
Reference-contexts: In this model, a client listens on a well-known multicast address over which the required configuration information is periodically transmitted. Hodes et al. <ref> [19] </ref> describe a generalized scheme for service location using this approach based on the Service Location Protocol (SLP) [7]. In AS1, we decouple the physical location of the active service from the control communication channel by leveraging the level of indirection offered by multicast communication.
Reference: [20] <author> JACKSON, A. W., AND PARTRIDGE, C. Smart packets, </author> <month> March </month> <year> 1997. </year> <note> Slides from 2nd Active Nets Workshop 1 . 1 available at http://www.net-tech.bbn.com/smtpkts/baltimore/index.htm </note>
Reference-contexts: Alexander et al. [1] describe an implementation of an active bridge implemented entirely by switchlets running within the SwitchWare architecture. A related effort is the BBN smart packets and active router projects <ref> [20] </ref> Bhattacharjee et al. [9] describe an active networks architecture for dealing with congestion in the network. They detail the use of active processors software modules that implement application specific processing on a packet-level basis.
Reference: [21] <author> JACOBSON, V. </author> <title> SIGCOMM '94 Tutorial: Multimedia conferencing on the Internet, </title> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: These multicast applications assume a communication model where parties in the collaboration session simply tune-in to or tune-out of the multicast group without any explicit group notification operation. This loosely coupled, light-weight, real-time multimedia communication model is known as the light-weight sessions architecture <ref> [21] </ref>. Announce-listen communication serves as the primary protocol building block for light-weight session applications. The model is characterized by several properties: a shared (multicast) communication channel over which all parties communicate; periodic, self-descriptive (i.e., temporally independent) protocol messages; timer-based aging of state; and reconfigurable components.
Reference: [22] <author> KLEINROCK, L. Nomadic computing, </author> <month> Nov </month> <year> 1995. </year> <title> Keynote Address: </title> <booktitle> International Conf. on Mobile Computing and Networking (MOBICOM). </booktitle>
Reference-contexts: The ability to quickly re-program and deploy new protocols at any level in the network architecture is not possible in nor is it the goal of active services, and applications like nomadic routing <ref> [22] </ref>, localized TCP optimizations (e.g., snoop [8]), SYN-flooding avoidance, etc. are not naturally amenable to our framework.
Reference: [23] <author> MCCANNE, S., BREWER, E. A., KATZ, R. H., ROWE, L., AMIR, E., ET AL. </author> <title> Toward a common infrastructure for multimedia-networking middleware. </title> <booktitle> In Proceedings of the Fifth International Workshop on Network and OS Support for Digital Audio and Video (NOSSDAV) (St. </booktitle> <address> Louis, Missouri, </address> <month> May </month> <year> 1997). </year>
Reference-contexts: Because our principal research efforts revolve around real-time multimedia networking applications, we implemented our AS1 programmable substrate using the MASH platform <ref> [23] </ref>. MASH is a Tcl [26] interpreter extended with real-time multimedia and networking related capabilities.
Reference: [24] <author> MCCANNE, S., AND FLOYD, S. </author> <title> The UCB/LBNL Network Simulator. </title> <institution> University of California, Berkeley. </institution> <note> Software online 2 </note> . 
Reference-contexts: For example, a launch overhead factor of 1.5 implies that 2.5N HMs were created before the algorithm stabilized at N HMs. Figure 6 plots the relationship between the ratio of the adaptation to announcement intervals and the launch overhead factor obtained in an ns <ref> [24] </ref> simulation of the HM deployment algorithm on a cluster of 40 machines with a target population size of 10. The error bars designate the standard deviation of our simulations. As the ratio of adaptation to announcement intervals decreases, the number of redundant launches increases.
Reference: [25] <author> NONNENMACHER, J., AND BIERSACK, E. </author> <title> Optimal multi-cast feedback. </title> <booktitle> In Proceedings of IEEE INFOCOMM 98 (April 1998). </booktitle>
Reference-contexts: The problem of minimizing the number of duplicate servents is equivalent to the problem of minimizing the number of duplicate feedback messages in a multicast damping protocol; fortunately, this problem has been extensively studied <ref> [15, 29, 25] </ref>. In our case, we want to choose the launch timer distribution that minimizes the number of duplicate servents while maintaining acceptable bounds on the mean time until a servent is created.
Reference: [26] <author> OUSTERHOUT, J. K. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Because our principal research efforts revolve around real-time multimedia networking applications, we implemented our AS1 programmable substrate using the MASH platform [23]. MASH is a Tcl <ref> [26] </ref> interpreter extended with real-time multimedia and networking related capabilities.
Reference: [27] <author> OUSTERHOUT, J. K. </author> <title> Scripting: </title> <booktitle> Higher level programming for the 21st century. IEEE Computer (Mar. </booktitle> <year> 1998). </year>
Reference-contexts: The use of a scripting language for plumbing together components in our programmable substrate strikes a good balance between the power of low-level system languages such as C++, and the flexibility and ease of use of high-level scripted languages such as Tcl/OTcl <ref> [27] </ref>. Our experiences with MASH have led us to conclude that a fully general active service programming environment would unduly burden the active service developer and lead to unavoidable performance constraints.
Reference: [28] <author> ROSSUM, G. V. </author> <title> Python tutorial. </title>
Reference-contexts: While we have not included a solution to this problem in our current design, nothing in our service environment model precludes the use of type-safe languages such as Safe-Tcl [10], Java [5], or Python <ref> [28] </ref> and as such we view this problem as important, yet orthogonal to our current endeavor.
Reference: [29] <author> SHARMA, P., ESTRIN, D., FLOYD, S., AND JACOBSON, V. </author> <title> Scalable timers for soft state protocol. </title> <booktitle> In Proceedings of IEEE INFOCOMM 97 (April 1997). </booktitle>
Reference-contexts: The problem of minimizing the number of duplicate servents is equivalent to the problem of minimizing the number of duplicate feedback messages in a multicast damping protocol; fortunately, this problem has been extensively studied <ref> [15, 29, 25] </ref>. In our case, we want to choose the launch timer distribution that minimizes the number of duplicate servents while maintaining acceptable bounds on the mean time until a servent is created. <p> In our current design, we statically allocate 75% of the output rate to background refreshes and 25% to new state announcements. However, in the future we plan to leverage the schemes developed by Sharma et al. <ref> [29] </ref>, which adapt the update timers in soft-state protocols based on channel topology models, to explore methods for dynamically varying the update and refresh rate allocation.
Reference: [30] <author> TENNENHOUSE, D. L., SMITH, J. M., SINCOSKIE, W. D., WETHERALL, D. J., AND MINDEN, G. J. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine 35 (Jan 1997), </journal> <pages> 80-86. </pages>
Reference-contexts: Unfortunately, the Internet service model has no native support for deploying agents within the network in this fashion. To overcome this limitation, the Active Networks initiative <ref> [30] </ref> proposes that the Internet service model be replaced with a new architecture in which the network as a whole becomes a fully programmable computational environment.
Reference: [31] <author> TENNENHOUSE, D. L., AND WETHERALL, D. J. </author> <title> Towards an active network architecture. </title> <journal> Computer Communication Review 26, </journal> <month> 2 (Apr. </month> <year> 1996), </year> <pages> 5-18. </pages>
Reference-contexts: Finally, Wetherall and Tennenhouse describe a mechanism for deploying computation in the network using an new option in the IP header: the ACTIVE IP option [34] in conjunction with embedding the actual code, or capsules <ref> [31] </ref>, in the network-level packet header. Similar to our goals, this approach is motivated in part by the goal of compatibility with today's Internet. 6 Summary In this paper we described Active Services, an architecture for deployment of application-level computation within the network.
Reference: [32] <author> TURLETTI, T., AND BOLOT, J.-C. </author> <title> Issues with multicast video distribution in heterogeneous packet networks. </title> <booktitle> In Proceedings of the Sixth International Workshop on Packet Video (Portland, </booktitle> <address> OR, </address> <month> Sept. </month> <year> 1994). </year>
Reference-contexts: Section 4 presents implementation details. In Section 5 we present a brief survey of related work and then conclude. 2 An Active Service Framework A video gateway mitigates bandwidth heterogeneity by adjusting each video flow's bit-rate in a controlled fashion to meet each link's available capacity <ref> [3, 32] </ref>. While mechanisms to accomplish such rate adaptation are well understood, companion mechanisms for instantiating the transcoding agents at the appropriate places in the network and for flexibly configuring and controlling them once running are comparatively underdeveloped.
Reference: [33] <author> WETHERALL, D., AND LINDBLAD, C. J. </author> <title> Extending Tcl for dynamic object-oriented programming. </title> <booktitle> In Proceedings of the Tcl/Tk Workshop (Ontario, </booktitle> <address> Canada, </address> <month> July </month> <year> 1995). </year>
Reference-contexts: MASH is a Tcl [26] interpreter extended with real-time multimedia and networking related capabilities. Tcl provides a simple, flexible and easy-to-use programming model based on scripting, while the interface to the AS1 resources consists of a method API to a set of Object Tcl classes <ref> [33] </ref> that can be invoked from the servent's Tcl program. Under this model, servents are simply Object Tcl scripts interpreted by MASH, which we call mashlets.
Reference: [34] <author> WETHERALL, D. J., AND TENNENHOUSE, D. L. </author> <title> The ACTIVE IP option. </title> <booktitle> In Proceedings of the 7th ACM SIGOPS Eu-ropean Workshop (Connemara, </booktitle> <address> Ireland, </address> <month> Sep </month> <year> 1996), </year> <note> ACM. </note>
Reference-contexts: To this end, we follow the lead of other projects in this area <ref> [16, 17, 34] </ref> by implementing an environment that consists of a programmable substrate that the servents program to implement complex computation. But we diverge from the active networks approach by constraining our environment to the application layer. <p> Finally, Wetherall and Tennenhouse describe a mechanism for deploying computation in the network using an new option in the IP header: the ACTIVE IP option <ref> [34] </ref> in conjunction with embedding the actual code, or capsules [31], in the network-level packet header.
Reference: [35] <author> YEMINI, Y., AND DA SILVA, S. </author> <title> Towards programmable networks. </title> <booktitle> In Proceedings of IFIP/IEEE International Workshop on Distributed Systems, Operation and Management (L'Aquila, </booktitle> <address> Italy, </address> <month> Oct </month> <year> 1996), </year> <note> IEEE. 2 http://www-mash.cs.berkeley.edu/ns/ 12 </note>
Reference-contexts: The main difference is that this approach comes from the net work up, while MeGa addresses the problem from the application-level down. While the former achieves increased generality, it does so by sacrificing the ability to leverage useful information from higher-level protocols such as SCUBA. The NetScript <ref> [35] </ref> project's goal is the design of a common language and execution environment to provide a universal abstraction of a programmable networking environment. NetScript is orthogonal to and complementary to our work and we foresee a possibility of leveraging it in our active service framework when it becomes more refined.
References-found: 35

