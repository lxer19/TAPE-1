URL: http://www.isi.edu/~valente/papers/benjamins-96a.ps.gz
Refering-URL: http://www.isi.edu/~valente/papers/benjamins-96a.html
Root-URL: http://www.isi.edu
Email: richard@swi.psy.uva.nl  leliane@cs.umd.edu  valente@isi.edu  
Phone: 2  3  
Title: Constructing Planners Through Problem-Solving Methods  
Author: V. Richard Benjamins Leliane Nunes de Barros and Andre Valente 
Address: Roetersstraat 15, NL-1018 WB Amsterdam, The Netherlands,  College Park, MD 20742, USA,  4676 Admiralty Way, Marina del Rey, CA 90292, USA,  
Affiliation: 1 University of Amsterdam, Social Science Informatics (SWI),  University of Maryland, Department of Computer Science,  University of Southern California, Information Sciences Institute,  
Abstract: Constructing a planner for a particular application is a difficult job, for which little concrete support is currently available. The literature on planning is overwhelming and there is no clear synthesis of the various planning methods which could be used by knowledge engineers. In this paper, we show how a general, knowledge-level framework for conceptually specifying knowledge-based systems, can be of concrete use to support knowledge acquisition for planning systems. The framework encompasses three interrelated components: (1) problem-solving methods, (2) their assumptions and (3) domain knowledge. The presented analysis of planning performed in the framework can be considered as a library with reusable components, based on which planners can be configured. Two experiments are presented that illustrate the use of the library in knowledge engineering.
Abstract-found: 1
Intro-found: 1
Reference: <author> Barret, A. & Weld, D. S. </author> <year> (1994). </year> <title> Partial-order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67. </volume>
Reference-contexts: In the case of adding a step, the different insertion points in the plan can be considered as another backtrack point (e.g., tocl <ref> (Barret & Weld, 1994) </ref>). 6 When we write mtc-based or causal-link based, we mean mtc or causal-link like. Thus they do not have to be pure mtc or causal-link. Test for unachieved goals This task checks the current plan for unachieved goals, and records them in the dynamic role goal.
Reference: <author> Benjamins, V. R. </author> <year> (1994). </year> <title> On a role of problem solving methods in knowledge acquisition: experiments with diagnostic strategies. </title> <editor> In Steels, L., Schreiber, A. T., & van de Velde, W., (Eds.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, 867, 8th European Knowledge Acquisition Workshop, EKAW-94, </booktitle> <pages> pages 137-157, </pages> <address> Berlin, Germany. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Because dcg allows for normal Prolog code within the grammar, we can easily include the assumptions. Figure 3 depicts two alternative psms for planning, which belong to the psm-family 9 , and three psms for the test for 8 see <ref> (Benjamins, 1994) </ref> for a discussion on the relation between TinA and other `grammar' approaches such as gdms (van Heijst et al., 1992). 9 Note that the second grammar rule for planning represents a `degenerated' member of the pcm family. % Methods for planning belonging to the PCM family. planning ! assumptions
Reference: <author> Benjamins, V. R. </author> <year> (1995). </year> <title> Problem-solving methods for diagnosis and their role in knowledge acquisition. </title> <journal> International Journal of Expert Systems: Research and Applications, </journal> <volume> 8(2) </volume> <pages> 93-120. </pages>
Reference: <author> Benjamins, V. R., Fensel, D., & Straatman, R. </author> <year> (1996). </year> <title> Assumptions of problem-solving methods and their role in knowledge engineering. </title> <editor> In Wahlster, W., (Ed.), </editor> <booktitle> Proc. ECAI-96, </booktitle> <pages> pages 408-412. </pages> <editor> J. </editor> <publisher> Wiley & Sons, Ltd. </publisher>
Reference-contexts: In the context of this paper, we will use assumptions to specify the requirements of a psm on domain knowledge, which corresponds to the ontological assumptions of <ref> (Benjamins et al., 1996) </ref> and the epistemological 4 assumptions of (Benjamins & Pierret-Golbreich, 1996). <p> In the context of this paper, we will use assumptions to specify the requirements of a psm on domain knowledge, which corresponds to the ontological assumptions of (Benjamins et al., 1996) and the epistemological 4 assumptions of <ref> (Benjamins & Pierret-Golbreich, 1996) </ref>. Epistemological assumptions are further divided into availability assumptions, which refer to the availability of domain knowledge, such as the availability of a causal model in diagnosis; and property assumptions, which refer to properties of the domain knowledge, for instance, that a causal model is non-cyclic. <p> This type of requirement has not been investigated in this paper, and will be subject of further research. The first corresponds to availability epistemological assumptions, whereas the second and third correspond to property epistemological assumptions <ref> (Benjamins & Pierret-Golbreich, 1996) </ref>. There are several important issues with respect to these assumptions in using them to select a psm or in characterizing domains. First, it must be kept in mind that in some cases they are `soft' requirements.
Reference: <author> Benjamins, V. R. & Pierret-Golbreich, C. </author> <year> (1996). </year> <title> Assumptions of problem-solving methods. </title> <editor> In Shadbolt, N., O'Hara, K., & Schreiber, G., (Eds.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, 1076, 9th European Knowledge Acquisition Workshop, EKAW-96, </booktitle> <pages> pages 1-16. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In the context of this paper, we will use assumptions to specify the requirements of a psm on domain knowledge, which corresponds to the ontological assumptions of <ref> (Benjamins et al., 1996) </ref> and the epistemological 4 assumptions of (Benjamins & Pierret-Golbreich, 1996). <p> In the context of this paper, we will use assumptions to specify the requirements of a psm on domain knowledge, which corresponds to the ontological assumptions of (Benjamins et al., 1996) and the epistemological 4 assumptions of <ref> (Benjamins & Pierret-Golbreich, 1996) </ref>. Epistemological assumptions are further divided into availability assumptions, which refer to the availability of domain knowledge, such as the availability of a causal model in diagnosis; and property assumptions, which refer to properties of the domain knowledge, for instance, that a causal model is non-cyclic. <p> This type of requirement has not been investigated in this paper, and will be subject of further research. The first corresponds to availability epistemological assumptions, whereas the second and third correspond to property epistemological assumptions <ref> (Benjamins & Pierret-Golbreich, 1996) </ref>. There are several important issues with respect to these assumptions in using them to select a psm or in characterizing domains. First, it must be kept in mind that in some cases they are `soft' requirements.
Reference: <author> Carbonell, J. </author> & <title> the PRODIGY Research Group (1992). PRODIGY4.0: The manual and tutorial. </title> <type> Technical Report CMU-CS-92-150, </type> <institution> School of Computer Science, </institution> <address> CMU. </address>
Reference-contexts: When there is already a step in the plan that achieves the goal, only the ordering constraint is added to the plan. This method is used by snlp and refinement search (Kambhampati, 1995) planning algorithms. The smart propose method is applied by strips and prodigy <ref> (Carbonell & the PRODIGY Research Group, 1992) </ref> which are implemented by means-end analysis (Newell & Simon, 1963), and exploits the difference between the goal state and the current state to select an operator. <p> Partly as a consequence, such plans are formulated in a hierarchical fashion, in which more specific actions are devised to execute the action-goal, up to the level of primitive actions. Domains where goals are only expressed in terms of states, allow for strips-like planners such as prodigy <ref> (Carbonell & the PRODIGY Research Group, 1992) </ref> or snlp (McAllester & Rosenblitt, 1991). An example of a type of domain with this characteristic is information gathering.
Reference: <author> Chandrasekaran, B. </author> <year> (1986). </year> <title> Generic tasks in knowledge based reasoning: High level building blocks for expert system design. </title> <journal> IEEE Expert, </journal> <volume> 1(3) </volume> <pages> 23-30. </pages>
Reference: <author> Chandrasekaran, B. </author> <year> (1990). </year> <title> Design problem solving: A task analysis. </title> <journal> AI Magazine, </journal> <volume> 11 </volume> <pages> 59-71. </pages>
Reference-contexts: In <ref> (Chandrasekaran, 1990) </ref>, a similar method is proposed, also called propose-critique-modify, to solve design problems. FIGURE 2: A task-method decomposition structure for planning. select. nonlin (Tate, 1977) randomly selects any goal that has not yet been accomplished. snlp (McAllester & Rosenblitt, 1991) randomly selects goals from the set of pending goals.
Reference: <author> Chapman, D. </author> <year> (1987). </year> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-377. </pages>
Reference-contexts: Based on this knowledge, a plan can be modified or criticized. An example of hard plan assessment knowledge is the truth-criterion, which is used to find out if a condition is true at some point in the plan. tweak <ref> (Chapman, 1987) </ref> uses a modal truth criterion (mtc) which defines when a particular condition in a plan is necessarily or possibly true by formally stating all possible interaction problems. Another example of a domain model for hard plan assessment knowledge is causal-link knowledge used in snlp (McAllester & Rosenblitt, 1991). <p> For each of the subtasks, the possible methods have been checked for applicability by evaluating their assumptions. The generation process has bottomed out in the primitive methods (ending in `PM'). Actually, the presented strategy is that of tweak <ref> (Chapman, 1987) </ref>. tweak randomly selects a goal to be achieved and proposes an expansion that has the goal condition as an effect. It uses mtc-based methods to check for unachieved goals and interactions, and to modify the plan.
Reference: <author> Cottam, H. & Shadbolt, N. </author> <year> (1996). </year> <title> Domain and system influences in problem solving models for planning. </title>
Reference-contexts: One may also integrate these two approaches by starting with a domain-driven approach and then comparing the resulting model with a selected system-driven planning model (e.g., one of the models presented in this paper). An approach along these lines has been proposed in <ref> (Cottam & Shadbolt, 1996) </ref>. It is important to notice, however, that the library presented here can always be extended with new psms generated by any of those approaches. Of course, for each psm added to the library, the respective domain requirements (assumptions) for its selection must also be included.
Reference: <editor> In Shadbolt, N., O'Hara, K., & Schreiber, G., (Eds.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, 1076, 9th European Knowledge Acquisition Workshop, EKAW-96, </booktitle> <pages> pages 354-369. </pages> <publisher> Springer-Verlag. </publisher> <editor> de Barros, L. N., Valente, A., & Benjamins, V. R. </editor> <year> (1996). </year> <title> Modeling planning tasks. </title> <booktitle> In Third International Conference on Artificial Intelligence Planning Systems, AIPS-96, </booktitle> <pages> pages 11-18. </pages>
Reference-contexts: Clearly, something is necessary to "make sense" of the methods available and help in the knowledge engineering and acquisition process. A first and essential step towards developing tools to automate knowledge acquisition for planners is to have a model of what existing planning methods do and how they work <ref> (Kingston et al., 1996) </ref>. In this paper, we present a knowledge-level framework for representing and analyzing planning methods that can help knowledge engineers in constructing planning applications. <p> In the context of this paper, we will use assumptions to specify the requirements of a psm on domain knowledge, which corresponds to the ontological assumptions of <ref> (Benjamins et al., 1996) </ref> and the epistemological 4 assumptions of (Benjamins & Pierret-Golbreich, 1996). <p> In the context of this paper, we will use assumptions to specify the requirements of a psm on domain knowledge, which corresponds to the ontological assumptions of (Benjamins et al., 1996) and the epistemological 4 assumptions of <ref> (Benjamins & Pierret-Golbreich, 1996) </ref>. Epistemological assumptions are further divided into availability assumptions, which refer to the availability of domain knowledge, such as the availability of a causal model in diagnosis; and property assumptions, which refer to properties of the domain knowledge, for instance, that a causal model is non-cyclic. <p> This type of requirement has not been investigated in this paper, and will be subject of further research. The first corresponds to availability epistemological assumptions, whereas the second and third correspond to property epistemological assumptions <ref> (Benjamins & Pierret-Golbreich, 1996) </ref>. There are several important issues with respect to these assumptions in using them to select a psm or in characterizing domains. First, it must be kept in mind that in some cases they are `soft' requirements.
Reference: <author> Doyle, J. </author> <year> (1979). </year> <title> A thruth maintenance system. </title> <journal> Artificial Intelligence, </journal> <volume> 12 </volume> <pages> 231-272. </pages>
Reference-contexts: We can also see the use of causal links as an important factor related to memory management of a planner. Causal links are some kind of bookkeeping mechanism that keeps track of which action contributed to specific situations (cf. truth maintenance systems <ref> (Doyle, 1979) </ref>). Typically, such mechanisms require a lot of static memory. On the other hand, mtc-like planners do not keep track of such dependencies, but generate them on the fly when needed.
Reference: <author> Drummond, M. & Currie, K. </author> <year> (1989). </year> <title> Goal ordering in partially ordered plans. </title> <booktitle> In Proc. of the 11 th IJCAI, </booktitle> <pages> pages 960-965, </pages> <address> Detroit, MI. </address>
Reference-contexts: It is also possible to select a goal in a more intelligent manner which minimizes possible future modifications (smart select) <ref> (Drummond & Currie, 1989) </ref>. In this case, the method uses the static role plan assessment knowledge to select a goal.
Reference: <author> Erol, K., Hendler, J., & Nau, D. S. </author> <year> (1994). </year> <title> UMCP: a sound and complete procedure for hierarchical task-network planning. </title> <booktitle> In The Second International Conference on Artificial Intelligence Planning Systems (AIPS-94). </booktitle>
Reference-contexts: Whenever a condition is unexpectedly false, a conflict is detected. The conflict role can point directly to a plan-step that violates some interval of the truth value of a condition, or just point to a set of inconsistent constraints (like in umcp <ref> (Erol et al., 1994) </ref>). 3.2 Static Roles in Planning tree means that every planning method must use as a static role either the root or one of the logical ands of its constituting decompositions. FIGURE 1: Part-of tree of static roles in planning. <p> The relevant static role here is world description, and the two most common types of domain models are htn and adl. Domains where goals can be expressed either as actions or states, lead to htn-like planners such as umcp <ref> (Erol et al., 1994) </ref>. An example of a type of domain with this characteristic is air campaign planning. Air campaign plans (as studied under the darpa-Rome Planning Initiative (Tate, 1996)) have their goals typically formulated as actions.
Reference: <author> Fikes, R. E. & Nilsson, N. J. </author> <year> (1971). </year> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2. </volume>
Reference-contexts: This is also the specification of the elements a plan is composed of (but not how they are composed, see plan composition below). Examples of domain models to play this role in planning systems are: the add-delete lists (adl) used in strips <ref> (Fikes & Nilsson, 1971) </ref>; or the hierarchical task networks (htns) (Tate, 1977; Erol et al., 1994) which are, in fact, descriptions of sub-plans; or skeletal plans (Friedland & Iwasaki, 1985) which are abstract descriptions of previously generated plans. In case of htns, the sub-plans may come fully or partially specified.
Reference: <author> Friedland, P. & Iwasaki, Y. </author> <year> (1985). </year> <title> The concept and implementation of skeletal plans. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 1. </volume>
Reference-contexts: Examples of domain models to play this role in planning systems are: the add-delete lists (adl) used in strips (Fikes & Nilsson, 1971); or the hierarchical task networks (htns) (Tate, 1977; Erol et al., 1994) which are, in fact, descriptions of sub-plans; or skeletal plans <ref> (Friedland & Iwasaki, 1985) </ref> which are abstract descriptions of previously generated plans. In case of htns, the sub-plans may come fully or partially specified. Fully specified means that the sub-plans contain all the auxiliary constraints necessary for continuing the planning process (e.g., ordering constraints or truth constraints such as causal-links).
Reference: <author> Kambhampati, S. </author> <year> (1994). </year> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> In Proc. Principles of Knowledge Representation and Reasoning (KRR). Proceedings of Knowledge Representation and Reasoning (KRR). </booktitle>
Reference-contexts: Another example of an auxiliary constraint is point truth constraint, which requires that some condition be true before a certain plan-step can occur <ref> (Kambhampati, 1994) </ref>. Conflict The role conflict contains the result of checking the plan for inconsistencies with respect to its conditions. Whenever a condition is unexpectedly false, a conflict is detected.
Reference: <author> Kambhampati, S. </author> <year> (1995). </year> <title> Planning as refinement search: a unified framework for evaluating design tradeoffs in partial-order planning. </title> <journal> Artificial Intelligence, 76. Special issue on planning and scheduling. </journal>
Reference-contexts: It is also possible to select a goal in a more intelligent manner which minimizes possible future modifications (smart select) (Drummond & Currie, 1989). In this case, the method uses the static role plan assessment knowledge to select a goal. An example of smart select was proposed by <ref> (Kambhampati, 1995) </ref>, where a goal-selection strategy is described called mtc-based 6 goal selection, which selects a goal state only when it is not necessarily true according to the modal truth criterion. Propose expansion This task takes the selected goal, and proposes a way to accomplish it using state changes. <p> When a new operator is added to the plan, its preconditions are added to the set of goals. When there is already a step in the plan that achieves the goal, only the ordering constraint is added to the plan. This method is used by snlp and refinement search <ref> (Kambhampati, 1995) </ref> planning algorithms. The smart propose method is applied by strips and prodigy (Carbonell & the PRODIGY Research Group, 1992) which are implemented by means-end analysis (Newell & Simon, 1963), and exploits the difference between the goal state and the current state to select an operator.
Reference: <author> Kingston, J. K. C., Shadbolt, N., & Tate, A. </author> <year> (1996). </year> <title> CommonKADS models for knowledge based planning. </title> <booktitle> In AAAI-96. </booktitle>
Reference-contexts: Clearly, something is necessary to "make sense" of the methods available and help in the knowledge engineering and acquisition process. A first and essential step towards developing tools to automate knowledge acquisition for planners is to have a model of what existing planning methods do and how they work <ref> (Kingston et al., 1996) </ref>. In this paper, we present a knowledge-level framework for representing and analyzing planning methods that can help knowledge engineers in constructing planning applications.
Reference: <author> Klinker, G., Bhola, C., Dallemagne, G., Marques, D., & McDermott, J. </author> <year> (1991). </year> <title> Usable and reusable programming constructs. </title> <journal> Knowledge Acquisition, </journal> <volume> 3 </volume> <pages> 117-136. </pages>
Reference-contexts: Moreover, the separation does not restrict the knowledge engineer to use a fixed programming language, operational system or graphics toolkit that may be inappropriate in a given application's setting. On the other hand, authors like <ref> (Klinker et al., 1991) </ref> have argued that conceptual models hide too many details that have to be decided at design time, and that these design decisions may render the conceptual model inadequate later on.
Reference: <author> Knoblock, C. </author> <year> (1996). </year> <title> Building a planner for information gathering: a report from the trenches. </title> <booktitle> In 3rd Internation Conference on AI Planning Systems, AIPS-96, </booktitle> <pages> pages 134-141. </pages> <publisher> AAAI Press. </publisher>
Reference-contexts: The planning problem is to devise a series of information retrieval and manipulation steps to obtain the desired information (for an interesting discussion on the challenges of this type of domain, see <ref> (Knoblock, 1996) </ref>). This raises the question, why to use strips-like planners at all, since htn planners can work with both state and action goals. The reason is efficiency. htn planners are rather complex and heavy systems compared to strips-like systems.
Reference: <author> MacGregor, R. </author> <year> (1991). </year> <title> Inside the LOOM classifier. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3) </volume> <pages> 70-76. </pages>
Reference-contexts: done in the following steps: (1) construct a set of expect primitive methods corresponding to the lower-level methods that are not decomposed in our library, (2) specify the domain models and domain features used in our library in terms of the domain modeling language used in expect | namely Loom <ref> (MacGregor, 1991) </ref>, and (3) translate our function structures and control structures into expect methods.
Reference: <author> McAllester, D. & Rosenblitt, D. </author> <year> (1991). </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. of AAAI-91, </booktitle> <pages> pages 634-639, </pages> <address> Anaheim, CA. </address>
Reference-contexts: Another example of a domain model for hard plan assessment knowledge is causal-link knowledge used in snlp <ref> (McAllester & Rosenblitt, 1991) </ref>. Knowledge for testing the consistency of the auxiliary constraints is also an example of hard plan assessment knowledge. An example of soft knowledge would be that plans with smaller number of plan-steps are preferred. This paper only deals with hard assessment knowledge. <p> In (Chandrasekaran, 1990), a similar method is proposed, also called propose-critique-modify, to solve design problems. FIGURE 2: A task-method decomposition structure for planning. select. nonlin (Tate, 1977) randomly selects any goal that has not yet been accomplished. snlp <ref> (McAllester & Rosenblitt, 1991) </ref> randomly selects goals from the set of pending goals. It is also possible to select a goal in a more intelligent manner which minimizes possible future modifications (smart select) (Drummond & Currie, 1989). <p> Domains where goals are only expressed in terms of states, allow for strips-like planners such as prodigy (Carbonell & the PRODIGY Research Group, 1992) or snlp <ref> (McAllester & Rosenblitt, 1991) </ref>. An example of a type of domain with this characteristic is information gathering. In this type of domains (of which the Web is an increasingly important and well-known instance), the goal is to have a specified information with certain constraints, expressed in a query.
Reference: <author> McCarthy, J. & Hayes, P. J. </author> <year> (1969). </year> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <booktitle> In Machine Intelligence 4. </booktitle>
Reference-contexts: The state description contains the knowledge necessary to represent or describe the state of the world. Examples of domain models to play this role in planning systems are a set of first-order predicates (strips-like) or a set of fluents from the Situation Calculus <ref> (McCarthy & Hayes, 1969) </ref>. The state changes role comprehends all the information connected to the specification of changes in the state of the world. This is also the specification of the elements a plan is composed of (but not how they are composed, see plan composition below).
Reference: <author> Newell, A. & Simon, H. </author> <year> (1963). </year> <title> Gps: A program that simulates human thought. </title> <editor> In Feigenbaum, E. & Feldman, J., (Eds.), </editor> <booktitle> Computers and Thought, </booktitle> <pages> pages 279-293. </pages> <address> New York, </address> <publisher> McGraw-Hill. </publisher>
Reference-contexts: This method is used by snlp and refinement search (Kambhampati, 1995) planning algorithms. The smart propose method is applied by strips and prodigy (Carbonell & the PRODIGY Research Group, 1992) which are implemented by means-end analysis <ref> (Newell & Simon, 1963) </ref>, and exploits the difference between the goal state and the current state to select an operator. <p> It uses the smart-propose expansion method (implemented by means-end-analysis <ref> (Newell & Simon, 1963) </ref>). Unachieved goals are found by checking whether all the goal states are logically implied by the current state. If prodigy fails to generate a plan, it backtracks to another goal and continues from there.
Reference: <author> Orsvarn, K. </author> <year> (1996). </year> <title> Principles for libraries of task decomposition methods conclusions from a case-study. </title>
Reference-contexts: They can be organized into a task-method decomposition structure <ref> (Orsvarn, 1996) </ref> (see Figure 2), where a method consists of (solid lines) subtasks and a (sub)task can be realized by alternative (dashed lines) methods. Ellipses represent tasks and rectangles methods.
Reference: <editor> In Shadbolt, N., O'Hara, K., & Schreiber, G., (Eds.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, 1076, 9th European Knowledge Acquisition Workshop, EKAW-96, </booktitle> <pages> pages 48-65. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Puerta, A., Egar, J., Tu, S., & Musen, M. </author> <year> (1992). </year> <title> A multiple-method shell for the automatic generation of knowledge acquisition tools. </title> <journal> Knowledge Acquisition, </journal> <volume> 4 </volume> <pages> 171-196. </pages>
Reference-contexts: Indeed, an assumption such as world description=HTN presupposes that there is knowledge available in the domain to fill the role of world description. Notice however that, in this paper, we are not concerned with how this domain knowledge is actually extracted (but see work on Prot eg e <ref> (Puerta et al., 1992) </ref>). * Second, the method assumptions may specify particular requirements about the specific domain models that will fill the static roles.
Reference: <author> Sacerdoti, E. D. </author> <year> (1974). </year> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5 </volume> <pages> 115-135. </pages>
Reference-contexts: The static role in question here is plan composition, and the possible fillings are partial order and total order. Much research has been performed concerning the appropriateness of total- and partial-order planners for domains with interacting and independent actions. In general, the conclusions are that total-order planners (strips, abstrips <ref> (Sacerdoti, 1974) </ref>, prodigy) are suitable for domains with independent actions and goals, whereas partial-order planners (tweak, snlp, nonlin, noah) are better for domains where actions and goals interact.
Reference: <author> Schreiber, A. T., Wielinga, B. J., de Hoog, R., Akkermans, J. M., & Van de Velde, W. </author> <year> (1994). </year> <title> Com-monKADS: A comprehensive methodology for KBS development. </title> <journal> IEEE Expert, </journal> <volume> 9(6) </volume> <pages> 28-37. </pages>
Reference-contexts: The library specifies reusable components to configure problem solvers rather than to build them from scratch. These components are represented, based on the knowledge-level framework of the CommonKADS methodology <ref> (Schreiber et al., 1994) </ref>. The library is based on three interconnected groups of building blocks.
Reference: <author> Stone, P., Veloso, M., & Blythe, J. </author> <year> (1994). </year> <title> The need for different domain-independent heuristics. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems. </booktitle>
Reference-contexts: In general, the conclusions are that total-order planners (strips, abstrips (Sacerdoti, 1974), prodigy) are suitable for domains with independent actions and goals, whereas partial-order planners (tweak, snlp, nonlin, noah) are better for domains where actions and goals interact. However, in <ref> (Stone et al., 1994) </ref> is shown that there exist `interacting' domains where total-order planners (in particular, prodigy) do better than partial-order ones.
Reference: <author> Sussman, G. J. </author> <year> (1975). </year> <title> A Computer Model of Skill Acquisition, </title> <booktitle> volume 1 of Artificial Intelligence Series. </booktitle> <address> New York, </address> <publisher> American Elsevier. </publisher>
Reference-contexts: So, whenever a planning problem can be solved by a strips-like planner, it seems wise to use that option. Interacting actions | independent actions Sussman illustrated the problem of planning with interacting goals and actions (the so-called "Sussman anomaly") <ref> (Sussman, 1975) </ref>. Goals are interacting when the effect of an action possibly deletes the precondition of another action. The static role in question here is plan composition, and the possible fillings are partial order and total order.
Reference: <author> Swartout, W. & Gil, Y. </author> <year> (1995). </year> <title> Expect: Explicit representations for flexible acquisition. </title> <booktitle> In Proceedings of the Ninth Knowledge Acquisition for Knowledge-Based Systems Workshop. </booktitle>
Reference-contexts: Whenever a model has been specified, a number of program modules or routines are provided (or must be programmed) that can immediately operationalize the model into a working system. For example, in the expect architecture <ref> (Swartout & Gil, 1995) </ref>, a method is expressed in terms of goal decompositions up to the point where a level of `primitive' methods, implemented as CommonLisp functions, is reached. By using this strategy, expect can compile a method specified in abstract, knowledge-level, terms into a CommonLisp program.
Reference: <author> Tate, A. </author> <year> (1977). </year> <title> Generating project networks. </title> <booktitle> In Proceedings IJCAI-77, Paris, </booktitle> <pages> pages 888-893. </pages>
Reference-contexts: In (Chandrasekaran, 1990), a similar method is proposed, also called propose-critique-modify, to solve design problems. FIGURE 2: A task-method decomposition structure for planning. select. nonlin <ref> (Tate, 1977) </ref> randomly selects any goal that has not yet been accomplished. snlp (McAllester & Rosenblitt, 1991) randomly selects goals from the set of pending goals. It is also possible to select a goal in a more intelligent manner which minimizes possible future modifications (smart select) (Drummond & Currie, 1989).
Reference: <editor> Tate, A., (Ed.) </editor> <year> (1996). </year> <title> Advanced planning technology technological achievements of the ARPA/Rome Planning Initiative. </title> <publisher> AAAI Press. </publisher>
Reference-contexts: Domains where goals can be expressed either as actions or states, lead to htn-like planners such as umcp (Erol et al., 1994). An example of a type of domain with this characteristic is air campaign planning. Air campaign plans (as studied under the darpa-Rome Planning Initiative <ref> (Tate, 1996) </ref>) have their goals typically formulated as actions. Partly as a consequence, such plans are formulated in a hierarchical fashion, in which more specific actions are devised to execute the action-goal, up to the level of primitive actions.
Reference: <editor> Tate, A., Hendler, J., & Drummond, M. </editor> <year> (1990). </year> <title> A review of ai planning techniques. </title> <editor> In Allen, J., Hendler, J., & Tate, A., (Eds.), </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 26-49. </pages> <address> San Mateo, CA, </address> <publisher> Kaufmann. </publisher>
Reference-contexts: In summary, the main difference between strips and prodigy resides in how they backtrack. strips backtracks chronologically on the proposed operator/action and variable bindings. It cannot backtrack on "select goal" since it uses the linear select goal method which leaves no alternative choices (this accounts for the `linear' <ref> (Tate et al., 1990) </ref> characteristic of strips). prodigy uses the random select goal method which leaves choice points. Backtracking can thus be performed on the goals selected (which makes prodigy a `nonlinear' planner).
Reference: <author> Valente, A. </author> <year> (1995). </year> <title> Knowledge level analysis of planning. </title> <journal> SIGART Bulletin, </journal> <volume> 6(1) </volume> <pages> 33-41. </pages> <editor> van Heijst, G., Terpstra, P., Wielinga, B. J., & Shadbolt, N. </editor> <year> (1992). </year> <title> Using generalised directive models in knowledge acquisition. </title> <editor> In Wetter, T., Althoff, K. D., Boose, J., Gaines, B., Linster, M., & Schmalhofer, F., (Eds.), </editor> <booktitle> Current Developments in Knowledge Acquisition: </booktitle> <address> EKAW-92, Berlin, Germany. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Earlier versions of (parts of) the library presented in this paper were discussed in (de Barros et al., 1996; Valente, 1995). In <ref> (Valente, 1995) </ref>, we discussed in detail the knowledge roles and domain models. In (de Barros et al., 1996) we concentrated on the basic methods and the task-method decomposition structure. <p> In this section, we will present (i) a set of four general dynamic roles in planning tasks, and (ii) a part-of organization of static roles, originally defined in <ref> (Valente, 1995) </ref>.
References-found: 37

