URL: http://ebbets.poly.edu/SCHED/final.ps
Refering-URL: http://ebbets.poly.edu/PDC-lab/wein.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: An Experimental Study of LP-Based Approximation Algorithms for Scheduling Problems  
Author: Martin W. P. Savelsbergh R. N. Uma Joel Wein 
Address: Atlanta, GA  NY, 11201.  
Affiliation: School of Industrial and Systems Engineering, Georgia Institute of Technology,  Department of Computer Science, Polytechnic University, Brooklyn,  
Note: AG, Germany. mwps@isye.gatech.edu.  30332-0205. Research partially supported by NSF Grant DMI-9410102. ruma@tiger.poly.edu. Research partially supported by NSF Grant CCR-9626831.  
Abstract: In this paper we demonstrate that this progress in the design and analysis of approximation algorithms for these problems also yields techniques with improved computational efficacy. Specifically, we give a comprehensive experimental study of a number of these approximation algorithms for 1jr j j w j C j , the problem of scheduling jobs with release dates on one machine so as to minimize the average weighted completion time of the jobs scheduled. We study both the quality of lower bounds given for this problem by two different linear-programming relaxations, and the quality of upper bounds delivered by a number of approximation algorithms based on them. The best algorithms, on almost all instances, come within a few percent of the optimal average weighted completion time. Furthermore, we show that this can usually be achieved with O(n log n) computation. We also consider the performance of the algorithms for the average weighted flow time criterion, which, although equivalent to average weighted completion time at optimality, is provably much harder to approximate. Nonetheless, we demonstrate that for most instances we consider the algorithms give very good results for this criterion as well. Finally, we extend the techniques to a rather different and more complex problem that arises from an actual manufacturing application: Resource-Constrained Project Scheduling. In this setting as well, the techniques yield algorithms with improved performance; we give the best-known solutions for a set of instances provided by BASF z wein@mem.poly.edu. Department of Computer Science, Polytechnic University, Brooklyn, NY, 11201. Research partially supported by NSF Grant CCR-9626831 and a grant from the New York State Science and Technology Foundation, through its Center for Advanced Technology in Telecommunications. Some of this work was done while visiting the IBM T.J. Watson Research Center. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Belouadah, M. E. Posner, and C. N. Potts. </author> <title> Scheduling with release dates on a single machine to minimize total weighted completion time. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 36 </volume> <pages> 213-231, </pages> <year> 1992. </year>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> All the instances had w j generated uniformly in <ref> [1; 10] </ref>. Twenty instances had p j generated uniformly in [1; 5] and forty in [1; 10]; the release dates were generated uniformly in [0; 1 P n The Synthetic set is a large collection of instances generated according to four parameters: problem size (n), distribution for random generation of the <p> All the instances had w j generated uniformly in [1; 10]. Twenty instances had p j generated uniformly in <ref> [1; 5] </ref> and forty in [1; 10]; the release dates were generated uniformly in [0; 1 P n The Synthetic set is a large collection of instances generated according to four parameters: problem size (n), distribution for random generation of the weights w j , distribution for the random generation of <p> All the instances had w j generated uniformly in <ref> [1; 10] </ref>. Twenty instances had p j generated uniformly in [1; 5] and forty in [1; 10]; the release dates were generated uniformly in [0; 1 P n The Synthetic set is a large collection of instances generated according to four parameters: problem size (n), distribution for random generation of the weights w j , distribution for the random generation of the p j , and <p> Three distributions were used for the generation of each of the w j and p j : (i) uniform in <ref> [1; 10] </ref> (ii) normal with a mean of 5 and a standard deviation of 2:5, (iii) a two hump distribution, where, with probability 0:5 the number is chosen from a normal distribution with mean 2:5 and standard deviation 0:5, 5 and with probability 0:5 the number is chosen from a normal <p> To generate difficult instances of this form we need processing times in a larger range than <ref> [1; 10] </ref> and thus we experimented with instances with p j generated in [1; 100]. We generated job sizes in a two-hump distribution, with the humps at 5 and 85; the size 5 jobs were generated on average 9 times more frequently. <p> To generate difficult instances of this form we need processing times in a larger range than [1; 10] and thus we experimented with instances with p j generated in <ref> [1; 100] </ref>. We generated job sizes in a two-hump distribution, with the humps at 5 and 85; the size 5 jobs were generated on average 9 times more frequently. <p> We note that these particular instances were very similar in spirit to the instances given by Queyranne and Wang that demonstrate a lower bound of e=(e 1) on the worst-case ratio of (Optimal Schedule)/(Value of C j -based relaxation). Unfortunately instances with p j 2 <ref> [1; 100] </ref> are well beyond our ability to solve the time-indexed formulation. <p> Therefore, in an attempt to understand the relative performance of the lower bound given by the x jt - relaxation for such hard instances we created data sets with p j 2 <ref> [1; 20] </ref> and [1; 30], with processing times 1 and 20 or 30. For these we could solve the x jt formulation (except for the 100 job instances with p j 2 [1; 30]). <p> Therefore, in an attempt to understand the relative performance of the lower bound given by the x jt - relaxation for such hard instances we created data sets with p j 2 [1; 20] and <ref> [1; 30] </ref>, with processing times 1 and 20 or 30. For these we could solve the x jt formulation (except for the 100 job instances with p j 2 [1; 30]). <p> by the x jt - relaxation for such hard instances we created data sets with p j 2 [1; 20] and <ref> [1; 30] </ref>, with processing times 1 and 20 or 30. For these we could solve the x jt formulation (except for the 100 job instances with p j 2 [1; 30]). On these instances the x jt -relaxation lower bound was on average a factor of 1:24 stronger than the C j -based relaxation. We discuss the algorithms' performance later in this section. <p> In a similar spirit, perhaps we need not check all ff, as does Best-ff; maybe checking just a few will be suf 8 ficient. We thus introduce three additional algorithms. k-Best-ff divides <ref> [0; 1] </ref> into k equal subintervals and tries each of the resulting endpoints as candidate ff, returning the best answer. Goemans has shown that this is a (2 + 1 k )-approximation algorithm [7]. k-Random-ff and k-Random-ff j run the respective randomized algorithms k times. <p> Our goal was not to attempt to develop the best possible heuristics or to compare our work with all previous computational work on the problem. To date the most successful branch-and-bound algorithm for 1jr j j P w j C j is due to Belouadah, Posner and Potts <ref> [1] </ref>. They give two lower bounds for the problem, and a simple greedy heuristic.
Reference: [2] <author> L. Bianco and S. Ricciardelli. </author> <title> Scheduling of a single machine to minimize total weighted completion time subject to release dates. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 29 </volume> <pages> 151-167, </pages> <year> 1982. </year>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>.
Reference: [3] <author> S. Chakrabarti, C. Phillips, A. S. Schulz, D.B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved approximation algorithms for minsum criteria. </title> <booktitle> In Proceedings of the 1996 International Colloquium on Automata, Languages and Programming, Lecture Notes in Computer Science 1099, </booktitle> <pages> pages 646-657, </pages> <address> Berlin, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: These two formulations have been the basis of a number of recent small-constant-factor approximation algorithms for 1jr j j P w j C j and a variety of related problems <ref> [11, 3, 7, 23, 22, 30] </ref>. In this paper we demonstrate the impact that progress in the approximation approach can have on enumerative/computational approaches. <p> In the development of approximation algorithms their hope has been borne out, as techniques developed for the one machine problem led to the design of approximation algorithms for a wide variety of problems <ref> [11, 3, 4, 23, 22] </ref>. We view the experimental results in this paper as further evidence towards the validation of their thesis.
Reference: [4] <author> C. Chekuri, R. Motwani, B. Natarajan, and C. Stein. </author> <title> Approximation techniques for average completion time scheduling. </title> <booktitle> In Proceedings of the 8th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 609-618, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: Subsequently several papers appeared that gave more ingenious variants of the algorithms in [11] with improved performance guarantees <ref> [7, 4, 23, 30] </ref>. In this paper we demonstrate experimentally that these improved approximation algorithms yield improved empirical performance as well. We also generalize the techniques to yield improved algorithms for a more complex scheduling problem that arises in an actual manufacturing application from BASF AG, Germany. <p> In the development of approximation algorithms their hope has been borne out, as techniques developed for the one machine problem led to the design of approximation algorithms for a wide variety of problems <ref> [11, 3, 4, 23, 22] </ref>. We view the experimental results in this paper as further evidence towards the validation of their thesis. <p> However, it requires extra computation, as one must check n different values of ff, and thus is an O (n 2 log n) algorithm. Note that Best-ff actually arose as a derandomization of the Schedule-by-Random-ff algorithm <ref> [7, 4] </ref>.
Reference: [5] <author> M.E. Dyer and L.A. Wolsey. </author> <title> Formulating the single machine sequencing problem with release dates as a mixed integer program. </title> <journal> Discrete Applied Mathematics, </journal> (26):255-270, 1990. 
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t. <p> We hope that ultimately this approach will allow us to tackle and solve problems including many machines and other types of constraints including deadlines, precedence constraints and order dependent processing times <ref> [5] </ref>. In the development of approximation algorithms their hope has been borne out, as techniques developed for the one machine problem led to the design of approximation algorithms for a wide variety of problems [11, 3, 4, 23, 22]. <p> The planning horizon is denoted by T , which means that we consider the time-periods 1; 2; : : :; T . Time-indexed formulations for scheduling problems were introduced by Dyer and Wolsey <ref> [5] </ref> and have been studied extensively [26, 27, 28, 29, 20]. <p> Although the bound provided by the solution to the LP relaxation of a time-indexed formulation is very strong, stronger than the bounds provided by the LP relaxations of many other integer programming formulations <ref> [5, 20] </ref> and it is therefore a natural candidate to be used in optimization as well as approximation algorithms, there is one catch. Time-indexed formulations can be huge. <p> `(S) = r min (S)p (S) + 2 Although this formulation has an exponential number of constraints, Goemans [6] has shown that its solution can be calculated in O (n log n) time and that it is equivalent to a different sort of time-indexed formulation proposed by Dyer and Wolsey <ref> [5] </ref> with variables y jt , where y jt = 1 if job j is being processed in the time period [t 1; t] and y jt = 0 otherwise. <p> All the instances had w j generated uniformly in [1; 10]. Twenty instances had p j generated uniformly in <ref> [1; 5] </ref> and forty in [1; 10]; the release dates were generated uniformly in [0; 1 P n The Synthetic set is a large collection of instances generated according to four parameters: problem size (n), distribution for random generation of the weights w j , distribution for the random generation of
Reference: [6] <author> M. Goemans. </author> <title> A supermodular relaxation for scheduling with release dates. </title> <booktitle> In Proceedings of the 5th MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 288-300, </pages> <month> June </month> <year> 1996. </year> <note> Published as Lecture Notes in Computer Science 1084, Springer-Verlag. </note>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t. <p> but do not completely characterize the set of feasible schedules. 4 minimize n X w j C j subject to X p j C j `(S); for each S N ,(2.3) where `(S) = r min (S)p (S) + 2 Although this formulation has an exponential number of constraints, Goemans <ref> [6] </ref> has shown that its solution can be calculated in O (n log n) time and that it is equivalent to a different sort of time-indexed formulation proposed by Dyer and Wolsey [5] with variables y jt , where y jt = 1 if job j is being processed in the
Reference: [7] <author> M. Goemans. </author> <title> Improved approximation algorithms for scheduling with release dates. </title> <booktitle> In Proceedings of the 8th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 591-598, </pages> <year> 1997. </year>
Reference-contexts: Subsequently several papers appeared that gave more ingenious variants of the algorithms in [11] with improved performance guarantees <ref> [7, 4, 23, 30] </ref>. In this paper we demonstrate experimentally that these improved approximation algorithms yield improved empirical performance as well. We also generalize the techniques to yield improved algorithms for a more complex scheduling problem that arises in an actual manufacturing application from BASF AG, Germany. <p> These two formulations have been the basis of a number of recent small-constant-factor approximation algorithms for 1jr j j P w j C j and a variety of related problems <ref> [11, 3, 7, 23, 22, 30] </ref>. In this paper we demonstrate the impact that progress in the approximation approach can have on enumerative/computational approaches. <p> We define the algorithm Schedule-by-Fixed-ff, that can be applied to the solution of either relaxation, as ordering the jobs by their ff-points and scheduling in that order. Goemans <ref> [7] </ref> has shown that for appropriate choice of ff this is a ( p 2 + 1)-approximation algorithm. Goemans also showed that by choosing ff randomly according to a uniform distribution and then scheduling in this order, one obtains a randomized 2-approximation algorithm [7] and if one chooses using a different <p> Goemans <ref> [7] </ref> has shown that for appropriate choice of ff this is a ( p 2 + 1)-approximation algorithm. Goemans also showed that by choosing ff randomly according to a uniform distribution and then scheduling in this order, one obtains a randomized 2-approximation algorithm [7] and if one chooses using a different distribution, a 1:7451-approximation algorithm [8]. Either randomized algorithm can be derandomized by considering n different values of ff, scheduling according to each of them, and then choosing the best. We call these two algorithms Schedule-by-Random-ff and Best-ff. <p> However, it requires extra computation, as one must check n different values of ff, and thus is an O (n 2 log n) algorithm. Note that Best-ff actually arose as a derandomization of the Schedule-by-Random-ff algorithm <ref> [7, 4] </ref>. <p> We thus introduce three additional algorithms. k-Best-ff divides [0; 1] into k equal subintervals and tries each of the resulting endpoints as candidate ff, returning the best answer. Goemans has shown that this is a (2 + 1 k )-approximation algorithm <ref> [7] </ref>. k-Random-ff and k-Random-ff j run the respective randomized algorithms k times. We conclude that it is necessary to test relatively few values of ff to achieve performance very close to Best-ff.
Reference: [8] <author> M. Goemans, M. Queyranne, A. Schulz, M. Skutella, and Y. Wang. </author> <title> Single machine scheduling with release dates. </title> <type> Preprint, </type> <year> 1997. </year>
Reference-contexts: Goemans also showed that by choosing ff randomly according to a uniform distribution and then scheduling in this order, one obtains a randomized 2-approximation algorithm [7] and if one chooses using a different distribution, a 1:7451-approximation algorithm <ref> [8] </ref>. Either randomized algorithm can be derandomized by considering n different values of ff, scheduling according to each of them, and then choosing the best. We call these two algorithms Schedule-by-Random-ff and Best-ff. <p> We call these two algorithms Schedule-by-Random-ff and Best-ff. Finally, Schulz and Skutella introduced the idea of randomly choosing n ff, one for each job, and ordering the jobs according to these ff-points [24]; this has been proven to be a 1:6853-approximation algorithm <ref> [8] </ref>; We call this algorithm Schedule-by-Random-ff j . 3 Experiments 3.1 Experimental Design Our goals were to understand the quality of lower bounds delivered by the two relaxations, to understand the quality of performance of the algorithms, and to understand which ideas that led to improved worst-case performance guarantees have an <p> Note that the ordering of average performance corresponds to the respective quality of their current worst-case performance guarantees, which are, respectively, 3 [11], ( p and 1:745 <ref> [8] </ref>. Thus the ideas that yielded improved worst-case analysis yield significantly improved empirical performance. To gain a sense of the distribution of the various performance factors achieved by these algorithms, we histogrammed this information in Figure 1.
Reference: [9] <author> R.L. Graham, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Optimization and approximation in deterministic sequencing and scheduling: a survey. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction A basic problem in scheduling theory is 1jr j j P <ref> [9] </ref>, the problem of scheduling jobs with release dates on one machine so as to minimize the average weighted completion time of the jobs.
Reference: [10] <author> L. A. Hall. </author> <title> Approximation algorithms for scheduling. </title> <editor> In D. S. Hochbaum, editor, </editor> <booktitle> Approximation Algorithms for NP-hard Problems, </booktitle> <pages> pages 1-43. </pages> <publisher> PWS Publishing Company, </publisher> <year> 1997. </year>
Reference-contexts: We define a -approximation algorithm as an algorithm that runs in polynomial time and always delivers a schedule of value at most times optimal. Surveys of these different approaches are given by Queyranne and Schulz [20] and Hall <ref> [10] </ref>. We note that often out of enumerative/computational approaches arise heuristics that run in polynomial time and give approximately optimal solutions. Typically these heuristics come with no performance guarantee, and are justified by their performance in practice. <p> All the instances had w j generated uniformly in <ref> [1; 10] </ref>. Twenty instances had p j generated uniformly in [1; 5] and forty in [1; 10]; the release dates were generated uniformly in [0; 1 P n The Synthetic set is a large collection of instances generated according to four parameters: problem size (n), distribution for random generation of the <p> All the instances had w j generated uniformly in <ref> [1; 10] </ref>. Twenty instances had p j generated uniformly in [1; 5] and forty in [1; 10]; the release dates were generated uniformly in [0; 1 P n The Synthetic set is a large collection of instances generated according to four parameters: problem size (n), distribution for random generation of the weights w j , distribution for the random generation of the p j , and <p> Three distributions were used for the generation of each of the w j and p j : (i) uniform in <ref> [1; 10] </ref> (ii) normal with a mean of 5 and a standard deviation of 2:5, (iii) a two hump distribution, where, with probability 0:5 the number is chosen from a normal distribution with mean 2:5 and standard deviation 0:5, 5 and with probability 0:5 the number is chosen from a normal <p> To generate difficult instances of this form we need processing times in a larger range than <ref> [1; 10] </ref> and thus we experimented with instances with p j generated in [1; 100]. We generated job sizes in a two-hump distribution, with the humps at 5 and 85; the size 5 jobs were generated on average 9 times more frequently.
Reference: [11] <author> L. A. Hall, A. S. Schulz, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Offline and on-line approximation algorithms. </title> <institution> Mathematics of Operations Research, </institution> <month> August </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Recently work on polyhedral formulations of scheduling problems has inspired a number of results on approximation algorithms; one interesting consequence of this work was that a heuristic that yielded excellent performance in empirical experiments was established to be a small-constant-factor approximation algorithm for 1jr j j w j C j <ref> [11] </ref>; thus results from the enumerative "community" have had a direct impact on the approximation community. Subsequently several papers appeared that gave more ingenious variants of the algorithms in [11] with improved performance guarantees [7, 4, 23, 30]. <p> excellent performance in empirical experiments was established to be a small-constant-factor approximation algorithm for 1jr j j w j C j <ref> [11] </ref>; thus results from the enumerative "community" have had a direct impact on the approximation community. Subsequently several papers appeared that gave more ingenious variants of the algorithms in [11] with improved performance guarantees [7, 4, 23, 30]. In this paper we demonstrate experimentally that these improved approximation algorithms yield improved empirical performance as well. <p> These two formulations have been the basis of a number of recent small-constant-factor approximation algorithms for 1jr j j P w j C j and a variety of related problems <ref> [11, 3, 7, 23, 22, 30] </ref>. In this paper we demonstrate the impact that progress in the approximation approach can have on enumerative/computational approaches. <p> In the development of approximation algorithms their hope has been borne out, as techniques developed for the one machine problem led to the design of approximation algorithms for a wide variety of problems <ref> [11, 3, 4, 23, 22] </ref>. We view the experimental results in this paper as further evidence towards the validation of their thesis. <p> For example, let the solution to the C j -based formulation be C j ; j = 1; : : : ; n. We sort the jobs by nondecreasing C j and schedule in that order, respecting release-date constraints <ref> [25, 11] </ref>. <p> In the case of the x jt -based formulation, we again order the jobs by their suggested completion times P T t=p j tx jt : This algorithm, applied to either formulation, is known to be a 3-approximation algorithm <ref> [11] </ref> and we will refer to it as Schedule-by- C j ; when applied to the solution of x jt -based formulations, it was demonstrated empirically to be very effective in practice [28]. <p> Note that the ordering of average performance corresponds to the respective quality of their current worst-case performance guarantees, which are, respectively, 3 <ref> [11] </ref>, ( p and 1:745 [8]. Thus the ideas that yielded improved worst-case analysis yield significantly improved empirical performance. To gain a sense of the distribution of the various performance factors achieved by these algorithms, we histogrammed this information in Figure 1. <p> Harder Instances: In this section we discuss the Hard data set, on which these techniques were expected to exhibit lower-quality performance. All of these instances attempt to exploit the fact that the C j -based relaxation is also a valid relaxation of the optimal preemptive schedule <ref> [11] </ref>, and that therefore on instances for which the optimal preemptive schedule is much better than the optimal nonpreemptive schedule, the C j - based relaxation should perform poorly.

Reference: [13] <author> A. M. A. Hariri and C. N. Potts. </author> <title> An algorithm for single machine sequencing with release dates to minimize total weighted completion time. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5 </volume> <pages> 99-109, </pages> <year> 1983. </year>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>.
Reference: [14] <author> Kallrath and Wilson. </author> <title> Business Optimisation Using Mathematical Programming. </title> <publisher> Macmillan Press, </publisher> <year> 1997. </year>
Reference-contexts: The problem is a resource constrained project scheduling problem and is described, together with methods that have been proposed for its solution, in Kallrath and Wilson <ref> [14] </ref>. A number of orders have to be scheduled. Each order is broken down and produced in several identical pieces. Each piece in turn consists of several tasks, representing processing steps. Each task is characterized by a specific personnel requirement and a specific duration.
Reference: [15] <author> H. Kellerer, T. Tautenhahn, and G. J. Woeginger. </author> <title> Approximability and nonapproximability results for minimizing total flow time on a single machine. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: These two criteria are equivalent at optimality, but from the perspective of approximation they are very different there is no - approximation algorithm for the nonpreemptive minimization of average flow time of jobs with release dates on one machine with = o ( p n) unless P = N P <ref> [15] </ref>. Nonetheless, we demonstrate that for many of the instances that we considered, the approximation algorithms perform very well for the average weighted flow time criterion as well. <p> Motivated by this and by <ref> [15] </ref> we constructed instances with one or several very large jobs, and a large number of tiny jobs that are released regularly at small intervals.
Reference: [16] <author> J.K. Lenstra, A.H.G. Rinnooy Kan, and P. Brucker. </author> <title> Complexity of machine scheduling problems. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 1 </volume> <pages> 343-362, </pages> <year> 1977. </year>
Reference-contexts: Let C j denote the completion time of job j in a specified schedule; the goal is to minimize P j w j C j , or equivalently, ( P 1jr j j w j C j is an NP-hard problem, even if w j = 1 for all j <ref> [16] </ref>. Traditionally, one of two approaches have been adopted in the face of NP-hardness.
Reference: [17] <author> I. M. Ovacik and R. Uzsoy. </author> <title> Decomposition Methods for Complex Factory Scheduling Problems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference-contexts: In addition, Uzsoy and co-authors have done a number of experimental studies for the special case of the problem in which w j = 1 for all jobs <ref> [17] </ref>, and it would be of interest to understand the relationship with their approaches as well. A journal version of this paper is in preparation that will also explore additional issues along these lines.
Reference: [18] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Scheduling jobs that arrive over time. </title> <booktitle> In Proceedings of Fourth Workshop on Algorithms and Data Structures, Lecture Notes in Computer Science, </booktitle> <volume> 955, </volume> <pages> pages 86-97, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag. Journal version to appear in Mathematical Programming B. </note>
Reference-contexts: Approximation Algorithms: Progress on approximation algorithms for 1jr j j P w j C j began with the special case of w j = 1 for all j, for which Phillips, Stein and Wein <ref> [18] </ref> introduced the idea of taking a relaxation of the problem and inferring an ordering from that relaxation. Progress on the case of general w j arose from the use of one of the two linear programs discussed earlier as a relaxation from which to infer an ordering. <p> A different approach to constructing an ordering is to make use of the notion of an ff-point <ref> [18, 12] </ref>. We define the ff-point of job j, 0 ff 1, to be the first point in time, in the solution to a time-indexed relaxation, at which an ff fraction of job j has been completed.
Reference: [19] <author> M. Queyranne. </author> <title> Structure of a simple scheduling polyhedron. </title> <journal> Mathematical Programming, </journal> (58):263-285, 1993. 
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t.
Reference: [20] <author> M. Queyranne and A.S. Schulz. </author> <title> Polyhedral approaches to machine scheduling. </title> <type> Technical Report 408/1994, </type> <institution> Technical University of Berlin, </institution> <year> 1994. </year>
Reference-contexts: We define a -approximation algorithm as an algorithm that runs in polynomial time and always delivers a schedule of value at most times optimal. Surveys of these different approaches are given by Queyranne and Schulz <ref> [20] </ref> and Hall [10]. We note that often out of enumerative/computational approaches arise heuristics that run in polynomial time and give approximately optimal solutions. Typically these heuristics come with no performance guarantee, and are justified by their performance in practice. <p> The planning horizon is denoted by T , which means that we consider the time-periods 1; 2; : : :; T . Time-indexed formulations for scheduling problems were introduced by Dyer and Wolsey [5] and have been studied extensively <ref> [26, 27, 28, 29, 20] </ref>. <p> Although the bound provided by the solution to the LP relaxation of a time-indexed formulation is very strong, stronger than the bounds provided by the LP relaxations of many other integer programming formulations <ref> [5, 20] </ref> and it is therefore a natural candidate to be used in optimization as well as approximation algorithms, there is one catch. Time-indexed formulations can be huge. <p> Therefore, in an attempt to understand the relative performance of the lower bound given by the x jt - relaxation for such hard instances we created data sets with p j 2 <ref> [1; 20] </ref> and [1; 30], with processing times 1 and 20 or 30. For these we could solve the x jt formulation (except for the 100 job instances with p j 2 [1; 30]).
Reference: [21] <author> M.W.P. Savelsbergh, Y. Wang, and L.A. Wolsey. </author> <title> Computational experiments with a large-scale resource constrained project scheduling problem. </title> <note> in preparation, </note> <year> 1996. </year>
Reference-contexts: We have used the so-called block formulation, which aggregates certain jobs into composite jobs, for all our computational experiments. The block formulation also formed the basis for an LP based branch-and-bound algorithm developed by Savelsbergh, Wang, and Wolsey <ref> [21] </ref>. The algorithm employs the Schedule-by- C j and the Schedule-by-Fixed-ff (with ff = 0:5) heuristics as well as some local improvement techniques to obtain feasible schedules at each node of the search tree.
Reference: [22] <author> A. S. Schulz and M. Skutella. </author> <title> Random-based scheduling: New approximations and LP lower bounds. </title> <editor> In J. Rolim, editor, </editor> <booktitle> Randomization and Approximation Techniques in Computer Science, volume 1269 of LNCS, </booktitle> <pages> pages 119 - 133. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1997. </year> <booktitle> Proceedings of the International Workshop RANDOM'97. </booktitle>
Reference-contexts: These two formulations have been the basis of a number of recent small-constant-factor approximation algorithms for 1jr j j P w j C j and a variety of related problems <ref> [11, 3, 7, 23, 22, 30] </ref>. In this paper we demonstrate the impact that progress in the approximation approach can have on enumerative/computational approaches. <p> In the development of approximation algorithms their hope has been borne out, as techniques developed for the one machine problem led to the design of approximation algorithms for a wide variety of problems <ref> [11, 3, 4, 23, 22] </ref>. We view the experimental results in this paper as further evidence towards the validation of their thesis.
Reference: [23] <author> A. S. Schulz and M. Skutella. </author> <title> Scheduling-LPs bear probabilities: Randomized approximations for min-sum criteria. </title> <editor> In R. Burkard and G. Woeginger, editors, </editor> <booktitle> Algorithms - ESA'97, volume 1284 of LNCS, </booktitle> <pages> pages 416 - 429. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1997. </year> <booktitle> Proceedings of the 5th Annual European Symposium on Algorithms. </booktitle>
Reference-contexts: Subsequently several papers appeared that gave more ingenious variants of the algorithms in [11] with improved performance guarantees <ref> [7, 4, 23, 30] </ref>. In this paper we demonstrate experimentally that these improved approximation algorithms yield improved empirical performance as well. We also generalize the techniques to yield improved algorithms for a more complex scheduling problem that arises in an actual manufacturing application from BASF AG, Germany. <p> These two formulations have been the basis of a number of recent small-constant-factor approximation algorithms for 1jr j j P w j C j and a variety of related problems <ref> [11, 3, 7, 23, 22, 30] </ref>. In this paper we demonstrate the impact that progress in the approximation approach can have on enumerative/computational approaches. <p> In the development of approximation algorithms their hope has been borne out, as techniques developed for the one machine problem led to the design of approximation algorithms for a wide variety of problems <ref> [11, 3, 4, 23, 22] </ref>. We view the experimental results in this paper as further evidence towards the validation of their thesis.
Reference: [24] <author> A. S. Schulz and M. Skutella. </author> <title> Scheduling-LPs bear probabilities: Randomized approximations for min-sum criteria. </title> <type> Preprint 533/1996, </type> <institution> Department of Mathematics, Technical University of Berlin, </institution> <address> Berlin, Ger-many, </address> <month> November </month> <year> 1996; </year> <month> revised March </month> <year> 1997. </year>
Reference-contexts: We call these two algorithms Schedule-by-Random-ff and Best-ff. Finally, Schulz and Skutella introduced the idea of randomly choosing n ff, one for each job, and ordering the jobs according to these ff-points <ref> [24] </ref>; this has been proven to be a 1:6853-approximation algorithm [8]; We call this algorithm Schedule-by-Random-ff j . 3 Experiments 3.1 Experimental Design Our goals were to understand the quality of lower bounds delivered by the two relaxations, to understand the quality of performance of the algorithms, and to understand which
Reference: [25] <author> A.S. Schulz. </author> <title> Scheduling to minimize total weighted completion time: performance guarantees of lp based heuristics and lower bounds. </title> <booktitle> In Proceedings of the 5th MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 301-315, </pages> <month> June </month> <year> 1996. </year> <note> Published as LNCS 1084, Springer-Verlag. </note>
Reference-contexts: For example, let the solution to the C j -based formulation be C j ; j = 1; : : : ; n. We sort the jobs by nondecreasing C j and schedule in that order, respecting release-date constraints <ref> [25, 11] </ref>.
Reference: [26] <author> J.P. De Sousa and L.A. Wolsey. </author> <title> A time-indexed formulation of non-preemptive single-machine scheduling problems. </title> <journal> Mathematical Programming, </journal> (54):353-367, 1992. 
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t. <p> The planning horizon is denoted by T , which means that we consider the time-periods 1; 2; : : :; T . Time-indexed formulations for scheduling problems were introduced by Dyer and Wolsey [5] and have been studied extensively <ref> [26, 27, 28, 29, 20] </ref>.
Reference: [27] <author> M. Van den Akker, C. P. M. Van Hoesel, and M. W. P. Savelsbergh. </author> <title> A polyhedral approach to single machine scheduling. </title> <booktitle> Mathematical Programming, </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t. <p> The planning horizon is denoted by T , which means that we consider the time-periods 1; 2; : : :; T . Time-indexed formulations for scheduling problems were introduced by Dyer and Wolsey [5] and have been studied extensively <ref> [26, 27, 28, 29, 20] </ref>. <p> Therefore, for time-indexed formulations to be useful, ways are needed to reduce the memory requirements and the solution times of the LP relaxation. Van den Akker et al. <ref> [27] </ref> show that Danzig-Wolfe decomposition techniques, also referred to as column generation techniques, can be used to partly alleviate the difficulties associated with the size of time-indexed formulations. <p> The Optimal set is a set of 60 instances with n = 30 jobs; for all of these instances we know the exact optimal solutions, computed by the branch-and-cut code of Van den Akker, Hurkens and Savelsbergh <ref> [27] </ref>; these instances represent the limits of what they were able to solve optimally with their code. All the instances had w j generated uniformly in [1; 10].
Reference: [28] <author> M. Van den Akker, C. A. J. Hurkens, and M. W. P. Savelsbergh. </author> <title> A time-indexed formulation for single-machine scheduling problems: Column generation. </title> <note> Submitted for publication, </note> <year> 1996. </year>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t. <p> The planning horizon is denoted by T , which means that we consider the time-periods 1; 2; : : :; T . Time-indexed formulations for scheduling problems were introduced by Dyer and Wolsey [5] and have been studied extensively <ref> [26, 27, 28, 29, 20] </ref>. <p> t=p j tx jt : This algorithm, applied to either formulation, is known to be a 3-approximation algorithm [11] and we will refer to it as Schedule-by- C j ; when applied to the solution of x jt -based formulations, it was demonstrated empirically to be very effective in practice <ref> [28] </ref>. A different approach to constructing an ordering is to make use of the notion of an ff-point [18, 12].
Reference: [29] <author> Marjan Van den Akker. </author> <title> LP-based solution methods for single-machine scheduling problems. </title> <type> PhD thesis, </type> <institution> Eind-hoven University of Technology, Eindhoven, Nether-lands, </institution> <year> 1994. </year>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t. <p> The planning horizon is denoted by T , which means that we consider the time-periods 1; 2; : : :; T . Time-indexed formulations for scheduling problems were introduced by Dyer and Wolsey [5] and have been studied extensively <ref> [26, 27, 28, 29, 20] </ref>.
Reference: [30] <author> Y. Wang. </author> <title> Bicriteria job scheduling with release dates. </title> <type> Technical report, </type> <institution> Max-Planck-Institut fur Informatik, Saarbrucken, Germany, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: Subsequently several papers appeared that gave more ingenious variants of the algorithms in [11] with improved performance guarantees <ref> [7, 4, 23, 30] </ref>. In this paper we demonstrate experimentally that these improved approximation algorithms yield improved empirical performance as well. We also generalize the techniques to yield improved algorithms for a more complex scheduling problem that arises in an actual manufacturing application from BASF AG, Germany. <p> These two formulations have been the basis of a number of recent small-constant-factor approximation algorithms for 1jr j j P w j C j and a variety of related problems <ref> [11, 3, 7, 23, 22, 30] </ref>. In this paper we demonstrate the impact that progress in the approximation approach can have on enumerative/computational approaches. <p> Therefore, in an attempt to understand the relative performance of the lower bound given by the x jt - relaxation for such hard instances we created data sets with p j 2 [1; 20] and <ref> [1; 30] </ref>, with processing times 1 and 20 or 30. For these we could solve the x jt formulation (except for the 100 job instances with p j 2 [1; 30]). <p> by the x jt - relaxation for such hard instances we created data sets with p j 2 [1; 20] and <ref> [1; 30] </ref>, with processing times 1 and 20 or 30. For these we could solve the x jt formulation (except for the 100 job instances with p j 2 [1; 30]). On these instances the x jt -relaxation lower bound was on average a factor of 1:24 stronger than the C j -based relaxation. We discuss the algorithms' performance later in this section.
Reference: [31] <author> J. Wein and R.N. Uma. </author> <title> On the relationship between different lower bounds for scheduling problems. </title> <type> Unpublished Manuscript, </type> <year> 1997. </year>
Reference-contexts: To date the most successful branch-and-bound algorithm for 1jr j j P w j C j is due to Belouadah, Posner and Potts [1]. They give two lower bounds for the problem, and a simple greedy heuristic. In very recent work Uma and Wein <ref> [31] </ref> have shown that the weaker of their lower bounds is actually equivalent to the bound provided by the C j formulation, and that the stronger of their lower bounds neither dominates or is dominated by that of x jt -based formulation.
Reference: [32] <author> L.A. Wolsey. </author> <title> Mixed integer programming formulations for production planning and scheduling problems. </title> <booktitle> Invited talk at the 12th International Symposium on Mathematical Programming, </booktitle> <publisher> MIT, </publisher> <address> Cambridge, </address> <year> 1985. </year>
Reference-contexts: We will use the word heuristic to refer to these sorts of algorithms, in contrast to approximation algorithms. 1 2 Over the last fifteen years 1jr j j P w j C j has received significant attention from the enumerative/polyhedral community <ref> [2, 13, 1, 5, 26, 32, 19, 6, 29, 27, 28] </ref>. <p> paper are based on the work of a number of authors who studied polyhedral formulations of NP-hard scheduling problems, with the goal of developing linear programming relaxations that can be used to give lower bounds in branch-and bound algorithms that can then be used to solve small instances to optimality <ref> [5, 26, 32, 19, 6, 29, 27, 28] </ref>. Many formulations have been proposed; in the strongest formulation the one that yields the best lower bounds- f0; 1g-variables x jt model whether or not job j completes at time t.
References-found: 31

