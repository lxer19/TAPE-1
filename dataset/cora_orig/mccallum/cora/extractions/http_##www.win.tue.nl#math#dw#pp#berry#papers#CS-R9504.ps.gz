URL: http://www.win.tue.nl/math/dw/pp/berry/papers/CS-R9504.ps.gz
Refering-URL: http://www.win.tue.nl/math/dw/pp/berry/papers.html
Root-URL: http://www.win.tue.nl
Title: new algorithm for the recognition of series parallel graphs  
Author: L.A.M. Schoenmakers 
Date: 1995  
Affiliation: Computer Science/Department of Algorithmics and  
Note: A  
Pubnum: Architecture CS-R9504  
Abstract: Centrum voor Wiskunde en Informatica REPORTRAPPORT 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Aho A.V., Hopcroft J.E., Ullman J.D.: </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley (1974). </publisher>
Reference-contexts: Given any reasonable representation for G, however, we can build its adjacency matrix in time proportional to the number of arcs in G. For this we use a well-known trick from <ref> [1, Exercise 2.12] </ref> to avoid the initialization of a bit vector (see also [7, pp.289-290],[8, Chapter 7]). The above method thus requires linear time and quadratic space. The program is easily extended to detect that G is cyclic by checking whether pred [x] 6= suc [x] when 4.
Reference: 2. <author> Bodlaender H.L.: </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth, </title> <booktitle> Proceedings of the 25th Annual ACM Symposium on Theory of Computing (1993) 226-234. </booktitle>
Reference-contexts: In other words, an O (n) solution is not excluded, certainly given the fact that a linear time algorithm for finding|not necessarily optimal|tree-decompositions of a graph exists <ref> [2] </ref>. We leave this as an open problem. 9. Conclusion We have shown how an efficient and relatively simple algorithm for the recognition of series parallel graphs can be obtained using the technique of breadth-first traversal.
Reference: 3. <author> Duffin R.J.: </author> <title> Topology of series-parallel networks, </title> <journal> J. Math. Anal. Appl. </journal> <month> 10 </month> <year> (1965) </year> <month> 303-318. </month>
Reference-contexts: 1. Introduction The class of series parallel graphs forms a subset of the class of directed multigraphs with a single source and sink. A common definition of this class is as follows (see, e.g., <ref> [3, 4, 10] </ref>). The graph consisting of two vertices s and t, say, connected by an arc (s; t) is the basic series parallel graph; vertex s is the source and vertex t is the sink.
Reference: 4. <author> Eppstein D.: </author> <title> Parallel recognition of series-parallel graphs, </title> <journal> Inform. and Comput. </journal> <month> 98 </month> <year> (1992) </year> <month> 41-55. </month>
Reference-contexts: 1. Introduction The class of series parallel graphs forms a subset of the class of directed multigraphs with a single source and sink. A common definition of this class is as follows (see, e.g., <ref> [3, 4, 10] </ref>). The graph consisting of two vertices s and t, say, connected by an arc (s; t) is the basic series parallel graph; vertex s is the source and vertex t is the sink. <p> This problem has received quite some attention and several E-mail address: berry@cwi.nl Report CS-R9504 ISSN 0169-118X CWI P.O. Box 94079, 1090 GB Amsterdam, The Netherlands 2. Preliminaries 2 linear-time solutions are known (see, e.g., [9, 10, 11]). Also some parallel recognition algorithms have been presented <ref> [5, 4] </ref>. Our algorithm compares favourably in simplicity with these known algorithms. For instance, compared to [9, 10], the use of pointers is less pronounced. The algorithm is based on a succinct representation of series parallel graphs for which the presence of an arc can be tested in constant time.
Reference: 5. <author> He X., Yesha Y.: </author> <title> Parallel recognition and decomposition of two-terminal series parallel graphs, </title> <journal> Inform. and Comput. </journal> <month> 75 </month> <year> (1987) </year> <month> 15-38. </month>
Reference-contexts: This problem has received quite some attention and several E-mail address: berry@cwi.nl Report CS-R9504 ISSN 0169-118X CWI P.O. Box 94079, 1090 GB Amsterdam, The Netherlands 2. Preliminaries 2 linear-time solutions are known (see, e.g., [9, 10, 11]). Also some parallel recognition algorithms have been presented <ref> [5, 4] </ref>. Our algorithm compares favourably in simplicity with these known algorithms. For instance, compared to [9, 10], the use of pointers is less pronounced. The algorithm is based on a succinct representation of series parallel graphs for which the presence of an arc can be tested in constant time.
Reference: 6. <author> Hopcroft J.E., Karp R.M.: </author> <title> An n 5=2 algorithm for maximum matchings in bipartite graphs, </title> <journal> SIAM J. Comput. </journal> <month> 2 </month> <year> (1973) </year> <month> 225-231. </month>
Reference-contexts: to improve this to O (n n) by reducing the problem to the computation of a maximum matching for a certain bipartite graph with O (n) edges. (A maximum matching can be computed in O ((m + n) n) time for bipartite graphs of n vertices and m edges, see <ref> [6] </ref>.) Given a graph G, the bipartite (undirected) graph G 0 = (V 0 ; E 0 ) is constructed as follows.
Reference: 7. <author> Mehlhorn K.: </author> <title> Data Structures and Algorithms 1: Sorting and Searching, </title> <publisher> Springer-Verlag (1984). </publisher>
Reference-contexts: Given any reasonable representation for G, however, we can build its adjacency matrix in time proportional to the number of arcs in G. For this we use a well-known trick from [1, Exercise 2.12] to avoid the initialization of a bit vector (see also <ref> [7, pp.289-290] </ref>,[8, Chapter 7]). The above method thus requires linear time and quadratic space. The program is easily extended to detect that G is cyclic by checking whether pred [x] 6= suc [x] when 4. Succinct Representation of Series Parallel Graphs 5 vertices are added to X.
Reference: 8. <author> Schoenmakers B.: </author> <title> Data Structures and Amortized Complexity in a Functional Setting, </title> <type> Ph.D. thesis, </type> <institution> Eindhoven University of Technology, </institution> <address> The Netherlands (1992). </address>
Reference: 9. <author> Valdes J.: </author> <title> Parsing Flowcharts and Series-Parallel Graphs, </title> <type> Technical report STAN-CS-78-682, </type> <institution> Stanford University, California (1978). </institution>
Reference-contexts: This problem has received quite some attention and several E-mail address: berry@cwi.nl Report CS-R9504 ISSN 0169-118X CWI P.O. Box 94079, 1090 GB Amsterdam, The Netherlands 2. Preliminaries 2 linear-time solutions are known (see, e.g., <ref> [9, 10, 11] </ref>). Also some parallel recognition algorithms have been presented [5, 4]. Our algorithm compares favourably in simplicity with these known algorithms. For instance, compared to [9, 10], the use of pointers is less pronounced. <p> Box 94079, 1090 GB Amsterdam, The Netherlands 2. Preliminaries 2 linear-time solutions are known (see, e.g., [9, 10, 11]). Also some parallel recognition algorithms have been presented [5, 4]. Our algorithm compares favourably in simplicity with these known algorithms. For instance, compared to <ref> [9, 10] </ref>, the use of pointers is less pronounced. The algorithm is based on a succinct representation of series parallel graphs for which the presence of an arc can be tested in constant time. We show how to compute such a representation in linear time from a breadth-first spanning tree.
Reference: 10. <author> Valdes J., Tarjan R.E., Lawler E.L.: </author> <title> The recognition of series parallel digraphs., </title> <journal> SIAM J. Comput. </journal> <month> 11 </month> <year> (1982) </year> <month> 298-313. </month>
Reference-contexts: 1. Introduction The class of series parallel graphs forms a subset of the class of directed multigraphs with a single source and sink. A common definition of this class is as follows (see, e.g., <ref> [3, 4, 10] </ref>). The graph consisting of two vertices s and t, say, connected by an arc (s; t) is the basic series parallel graph; vertex s is the source and vertex t is the sink. <p> This problem has received quite some attention and several E-mail address: berry@cwi.nl Report CS-R9504 ISSN 0169-118X CWI P.O. Box 94079, 1090 GB Amsterdam, The Netherlands 2. Preliminaries 2 linear-time solutions are known (see, e.g., <ref> [9, 10, 11] </ref>). Also some parallel recognition algorithms have been presented [5, 4]. Our algorithm compares favourably in simplicity with these known algorithms. For instance, compared to [9, 10], the use of pointers is less pronounced. <p> Box 94079, 1090 GB Amsterdam, The Netherlands 2. Preliminaries 2 linear-time solutions are known (see, e.g., [9, 10, 11]). Also some parallel recognition algorithms have been presented [5, 4]. Our algorithm compares favourably in simplicity with these known algorithms. For instance, compared to <ref> [9, 10] </ref>, the use of pointers is less pronounced. The algorithm is based on a succinct representation of series parallel graphs for which the presence of an arc can be tested in constant time. We show how to compute such a representation in linear time from a breadth-first spanning tree. <p> We have shown that the space utilization is limited, and also that it is advantageous that the input graph is topologically sorted. If so desired, the algorithm can be extended to compute the so-called decomposition tree (in case the graph is indeed series parallel), see e.g. <ref> [10] </ref>. Theorem 1 of the previous section indicates a way to generalize our approach. We are quite pleased with this theorem, since its statement as well as its proof do not refer to any boundary cases. A possible application would be a recognition algorithm for planar graphs.
Reference: 11. <author> Wagner D.K.: </author> <title> Forbidden subgraphs and graph decomposition, </title> <booktitle> Networks 17 (1987) 105-110. </booktitle>
Reference-contexts: This problem has received quite some attention and several E-mail address: berry@cwi.nl Report CS-R9504 ISSN 0169-118X CWI P.O. Box 94079, 1090 GB Amsterdam, The Netherlands 2. Preliminaries 2 linear-time solutions are known (see, e.g., <ref> [9, 10, 11] </ref>). Also some parallel recognition algorithms have been presented [5, 4]. Our algorithm compares favourably in simplicity with these known algorithms. For instance, compared to [9, 10], the use of pointers is less pronounced.
Reference: 12. <author> White N., Whiteley W.: </author> <title> The algebraic geometry of motions of bar-and-body frameworks, </title> <journal> SIAM J. Alg. Disc. Meth. </journal> <month> 8 </month> <year> (1987) </year> <month> 1-32. </month>
Reference-contexts: Considering c as a constant, we first note that the proof of Theorem 1 implies an O (n 2 ) algorithm for this problem: the initial surplus is O (n) and each transformation takes O (n) time. Inspired by <ref> [12, p.12] </ref>, we are able to improve this to O (n n) by reducing the problem to the computation of a maximum matching for a certain bipartite graph with O (n) edges. (A maximum matching can be computed in O ((m + n) n) time for bipartite graphs of n vertices
References-found: 12

