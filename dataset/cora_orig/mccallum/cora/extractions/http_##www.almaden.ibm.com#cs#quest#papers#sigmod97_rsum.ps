URL: http://www.almaden.ibm.com/cs/quest/papers/sigmod97_rsum.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fho,ragrawal,megiddo,srikantg@almaden.ibm.com  
Title: Range Queries in OLAP Data Cubes  
Author: Ching-Tien Ho Rakesh Agrawal Nimrod Megiddo Ramakrishnan Srikant 
Address: 650 Harry Road, San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Abstract: A range query applies an aggregation operation over all selected cells of an OLAP data cube where the selection is specified by providing ranges of values for numeric dimensions. We present fast algorithms for range queries for two types of aggregation operations: SUM and MAX. These two operations cover techniques required for most popular aggregation operations, such as those supported by SQL. For range-sum queries, the essential idea is to precom-pute some auxiliary information (prefix sums) that is used to answer ad hoc queries at run-time. By maintaining auxiliary information which is of the same size as the data cube, all range queries for a given cube can be answered in constant time, irrespective of the size of the sub-cube circumscribed by a query. Alternatively, one can keep auxiliary information which is 1/b d of the size of the d-dimensional data cube. Response to a range query may now require access to some cells of the data cube in addition to the access to the auxiliary information, but the overall time complexity is typically reduced significantly. We also discuss how the precomputed information is incrementally updated by batching updates to the data cube. Finally, we present algorithms for choosing the subset of the data cube dimensions for which the auxiliary information is computed and the blocking factor to use for each such subset. Our approach to answering range-max queries is based on precomputed max over balanced hierarchical tree structures. We use a branch-and-bound-like procedure to speed up the finding of max in a region. We also show that with a branch-and-bound procedure, the average-case complexity is much smaller than the worst-case complexity. 
Abstract-found: 1
Intro-found: 1
Reference: [AAD + 96] <author> S. Agarwal, R. Agrawal, P.M. Deshpande, A. Gupta, J.F. Naughton, R. Ramakrishnan, and S. Sarawagi. </author> <title> On the computation of multidimensional aggregates. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <pages> pages 506-521, </pages> <address> Mumbai (Bombay), India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Techniques for MAX straightforwardly apply to MIN operation. Thus, we have covered most popular aggregation operations supported by SQL [IBM95]. Related Work Following the introduction of the data cube model in [GBLP96], there has been considerable research in the database community on developing algorithms for computing the data cube <ref> [AAD + 96] </ref>, for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96]. <p> Given a cube on d dimensions, a cuboid on k dimensions fd i 1 ; d i 2 ; :::; d i k g is defined as a group-by on the dimensions d i 1 ; d i 2 ; :::; d i k <ref> [AAD + 96] </ref>. The cuboid corresponds to the slice of the cube where the remaining d k dimensions have the value all. 1. Choosing Dimensions.
Reference: [AGS97] <author> Rakesh Agrawal, Ashish Gupta, and Sunita Sarawagi. </author> <title> Modeling multidimensional databases. </title> <booktitle> In Proc. of the 13th Int'l Conference on Data Engineering, </booktitle> <address> Birmingham, U.K., </address> <month> April </month> <year> 1997. </year>
Reference-contexts: 1 Introduction On-Line Analytical Processing (OLAP) [Cod93] allows companies to analyze aggregate databases built from their data warehouses. An increasingly popular data model for OLAP applications is the multidimensional database (MDDB) [OLA96] <ref> [AGS97] </ref>, also known as data cube [GBLP96]. To build an MDDB from a data warehouse, certain attributes (typically 5 to 10) are selected. Thus, each data record contains a value for each of these attributes.
Reference: [Ben80] <author> J.L. Bentley. </author> <title> Multidimensional divide and conquer. </title> <journal> Comm. ACM, </journal> <volume> 23(4) </volume> <pages> 214-229, </pages> <year> 1980. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] <ref> [Ben80] </ref> [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [BF79] <author> J. L. Bentley and J. H. Friedman. </author> <title> Data structures for range searching. </title> <journal> Computing Surveys, </journal> <volume> 11(4), </volume> <year> 1979. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., <ref> [BF79] </ref> [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [BKSS90] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R fl -tree: an efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 322-331, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This lets the classifier avoid materializing the full data cube. Once the dense regions have been found, we compute the prefix sum (or a blocked prefix sum) for each dense region. The boundary of each dense region is added to an R* tree <ref> [BKSS90] </ref>, along with a pointer to the dense region. All points not in a dense region are also added to the R* tree. Given a range-sum query, we find all dense regions that intersect the query by searching the R* tree. <p> In the tree, a rectangular region, represented by a tree node, may be split into a number of intersecting regions, each represented by a child node. Thus, the R* tree <ref> [BKSS90] </ref> is a good data structure in the sparse data cube.
Reference: [BR91] <author> M. Berger and I. Regoutsos. </author> <title> An algorithm for point clustering and grid generation. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 21(5) </volume> <pages> 1278-86, </pages> <year> 1991. </year>
Reference-contexts: One approach to finding these regions would be to use clustering (e.g. [JD88].) However, clustering algorithms typically generate centers of clusters and require post-processing to generate rectangular regions. Some clustering algorithms in image analysis (e.g. <ref> [BR91] </ref> [SB95]) find rectangular dense regions, but are designed for two-dimensional datasets. Hence we use a modified decision-tree classifier [SAM96] to find dense regions (non-empty cells are considered one class and empty cells another).
Reference: [Cha90] <author> Bernard Chazelle. </author> <title> Lower bounds for orthogonal range searching: Ii. the arithmetic model. </title> <journal> J. ACM, </journal> <volume> 37(3) </volume> <pages> 439-463, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] <ref> [Cha90] </ref> [Meh84] [Vai85] [WL85] [Yao85]). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [CLS86] <author> G.D. Cohen, A.C. Lobstein, and N.J.A. Sloane. </author> <title> Further results on the covering radius of codes. </title> <journal> IEEE Trans. Information Theory, </journal> <volume> IT-32(5):680-694, </volume> <month> September </month> <year> 1986. </year>
Reference-contexts: In an accompanying paper [HBA97], we discuss efficient techniques for partial-sum queries where queries are on arbitrary subsets (not necessarily contiguous) of the categorical attributes. We map the partial-sum problem to the covering problem in the theory of error-correcting codes <ref> [CLS86] </ref>, apply some known covering codes to the problem, and devise a new covering code tailored for this application that offers the best space and time trade-off.
Reference: [CM89] <author> M.C. Chen and L.P. McNamee. </author> <title> The data model and access method of summary data management. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(4) </volume> <pages> 519-29, </pages> <year> 1989. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases <ref> [CM89] </ref> on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [Cod93] <author> E. F. Codd. </author> <title> Providing OLAP (on-line analytical processing) to user-analysts: An IT mandate. </title> <note> Technical report, </note> <author> E. F. Codd and Associates, </author> <year> 1993. </year> <month> 15 </month>
Reference-contexts: 1 Introduction On-Line Analytical Processing (OLAP) <ref> [Cod93] </ref> allows companies to analyze aggregate databases built from their data warehouses. An increasingly popular data model for OLAP applications is the multidimensional database (MDDB) [OLA96] [AGS97], also known as data cube [GBLP96]. To build an MDDB from a data warehouse, certain attributes (typically 5 to 10) are selected.
Reference: [Col96] <author> George Colliat. </author> <title> OLAP, relational, and mul-tidimensional database systems. </title> <booktitle> SIGMOD RECORD, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Finally, our techniques for range-sum queries take advantage of the existence of the inverse operation for SUM. There are also pragmatic differences for typical "data cubes" arising out of the computational geometry domain versus the OLAP domain. A canonical sparsity of the OLAP data cube is about 20% <ref> [Col96] </ref> and dense sub-clusters typically exist, while the computational geometry data cubes can be much sparser even after placing upper bounds on each index domain. In an accompanying paper [HBA97], we discuss efficient techniques for partial-sum queries where queries are on arbitrary subsets (not necessarily contiguous) of the categorical attributes.
Reference: [Com79] <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys, </journal> <volume> 11(2) </volume> <pages> 121-138, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: Given a range (` : h), we only need to find out the first non-zero P [ ^ `] where ^ ` ` and the first non-zero P [ ^ h] where ^ h h. We can build a B-tree index <ref> [Com79] </ref> on P to find ^ h and ^ l. A similar solution applies to the case where b &gt; 1. 10.2 The d-Dimensional Case for Range-Sum Queries We first find a set of non-intersecting rectangular dense regions.
Reference: [CR89] <author> Bernard Chazelle and Burton Rosenberg. </author> <title> Computing partial sums in multidimensional arrays. </title> <booktitle> In Proc. of the ACM Symp. on Computational Geometry, </booktitle> <pages> pages 131-139, </pages> <year> 1989. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] <ref> [CR89] </ref> [Cha90] [Meh84] [Vai85] [WL85] [Yao85]). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [CS94] <author> S. Chaudhuri and K. Shim. </author> <title> Including group-by in query optimization. </title> <booktitle> In Proc. of the 20th Int'l Conference on Very Large Databases, </booktitle> <pages> pages 354-366, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries <ref> [CS94] </ref> [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]).
Reference: [GBLP96] <author> J. Gray, A. Bosworth, A. Layman, and H. Pira-hesh. </author> <title> Data cube: A relational aggregation operator generalizing group-by, </title> <booktitle> cross-tabs and subtotals. In Proc. of the 12th Int'l Conference on Data Engineering, </booktitle> <pages> pages 152-159, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction On-Line Analytical Processing (OLAP) [Cod93] allows companies to analyze aggregate databases built from their data warehouses. An increasingly popular data model for OLAP applications is the multidimensional database (MDDB) [OLA96] [AGS97], also known as data cube <ref> [GBLP96] </ref>. To build an MDDB from a data warehouse, certain attributes (typically 5 to 10) are selected. Thus, each data record contains a value for each of these attributes. Some of these attributes are chosen as metrics of interest and are referred to as the measure attributes. <p> The data cube will have 100 fi 10 fi 50 fi 3 cells, with each cell containing the total revenue (the measure attribute) for the corresponding combination of age, year, state, and type. Recently, <ref> [GBLP96] </ref> proposed that the domain of each functional attribute be augmented with an additional value for each aggregation operation, denoted by "all", to store aggregated values of the measure attributes in all of the cells along that functional attribute. <p> Techniques for MAX straightforwardly apply to MIN operation. Thus, we have covered most popular aggregation operations supported by SQL [IBM95]. Related Work Following the introduction of the data cube model in <ref> [GBLP96] </ref>, there has been considerable research in the database community on developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96].
Reference: [GHQ95] <author> A. Gupta, V. Harinarayan, and D. Quass. </author> <title> Aggregate-query processing in data warehousing environments. </title> <booktitle> In Proceedings of the Eighth International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 358-369, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] <ref> [GHQ95] </ref> [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]).
Reference: [GHRU97] <author> Himanshu Gupta, Venky Harinarayan, Anand Rajaraman, and Jeffrey D. Ullman. </author> <title> Index selection for OLAP. </title> <booktitle> In Proc. of the 13th Int'l Conference on Data Engineering, </booktitle> <address> Birmingham, U.K., </address> <month> April </month> <year> 1997. </year>
Reference-contexts: Related Work Following the introduction of the data cube model in [GBLP96], there has been considerable research in the database community on developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] <ref> [GHRU97] </ref>, for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92].
Reference: [HBA97] <author> Ching-Tien Ho, Jehoshua Bruck, and Rakesh Agrawal. </author> <title> Partial-sum queries in OLAP data cubes using covering codes. </title> <booktitle> In Proc. of the 16th ACM Symposium on Principles of Database Systems, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: A canonical sparsity of the OLAP data cube is about 20% [Col96] and dense sub-clusters typically exist, while the computational geometry data cubes can be much sparser even after placing upper bounds on each index domain. In an accompanying paper <ref> [HBA97] </ref>, we discuss efficient techniques for partial-sum queries where queries are on arbitrary subsets (not necessarily contiguous) of the categorical attributes.
Reference: [HRU96] <author> V. Harinarayan, A. Rajaraman, and J.D. Ull-man. </author> <title> Implementing data cubes efficiently. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Related Work Following the introduction of the data cube model in [GBLP96], there has been considerable research in the database community on developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute <ref> [HRU96] </ref> [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. <p> Since this problem is NP-complete (reduction from Set-Cover), we use heuristics to get approximate solutions. This problem is similar to the problem of deciding which cuboids to materialize considered in <ref> [HRU96] </ref>. However, the latter problem is somewhat simpler since the choice for each cuboid is whether or not to materialize. <p> Add cuboid that resulted in the best benefit/space ratio to V . end until no improvement. We present a greedy algorithm for choosing cuboids and block sizes in Figure 13. The first half of the algorithm is a simple greedy search, similar to the algorithm in <ref> [HRU96] </ref>. We illustrate the intuition behind the rest of the algorithm with an example. Assume the greedy search first computed prefix sum with block sizes b for the cuboid hd 1 , d 2 i.
Reference: [IBM95] <author> IBM. </author> <title> DB2 SQL Reference for Common Servers Version 2, </title> <year> 1995. </year>
Reference-contexts: Note also that ROLLING SUM and ROLLING AVERAGE, two other frequently used operations in OLAP, are special cases of range-sum and range-average, respectively. Techniques for MAX straightforwardly apply to MIN operation. Thus, we have covered most popular aggregation operations supported by SQL <ref> [IBM95] </ref>.
Reference: [JD88] <author> A. K. Jain and R. C. Dubes. </author> <title> Algorithms for Clustering Data. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: A similar solution applies to the case where b &gt; 1. 10.2 The d-Dimensional Case for Range-Sum Queries We first find a set of non-intersecting rectangular dense regions. One approach to finding these regions would be to use clustering (e.g. <ref> [JD88] </ref>.) However, clustering algorithms typically generate centers of clusters and require post-processing to generate rectangular regions. Some clustering algorithms in image analysis (e.g. [BR91] [SB95]) find rectangular dense regions, but are designed for two-dimensional datasets.
Reference: [JS96] <author> T. Johnson and D. Shasha. </author> <title> Hierarchically split cube forests for decision support: </title> <booktitle> description and tuned design, </booktitle> <year> 1996. </year> <note> Working Paper. </note>
Reference-contexts: cube model in [GBLP96], there has been considerable research in the database community on developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] <ref> [JS96] </ref>. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [Lom95] <author> D. Lomet, </author> <title> editor. Special Issue on Materialized Views and Data Warehousing. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 18(2), </volume> <month> June </month> <year> 1995. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views <ref> [Lom95] </ref> and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]).
Reference: [Meh84] <author> Kurt Mehlhorn. </author> <title> Data Structure and Algorithm 3: Multi-dimensional Searching and Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] <ref> [Meh84] </ref> [Vai85] [WL85] [Yao85]). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [Mic92] <author> Z. Michalewicz. </author> <title> Statistical and Scientific Databases. </title> <publisher> Ellis Horwood, </publisher> <year> 1992. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them <ref> [Mic92] </ref>. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]).
Reference: [Mit70] <author> L. Mitten. </author> <title> Branch and bound methods: General formulation and properties. </title> <journal> Operations Research, </journal> <volume> 18 </volume> <pages> 24-34, </pages> <year> 1970. </year>
Reference-contexts: The condition at line (5) is used to improve the running time. The idea here is similar to that used in a branch-and-bound algorithm <ref> [Mit70] </ref>. <p> For range-max queries, we construct a generalized quad-tree on the data cube and store in each tree node the index of the maximum value in the region covered by that node. We then use a branch-and-bound <ref> [Mit70 ] </ref>-like procedure to speed up the queries. We show that with a branch-and-bound procedure, the average-case complexity is much smaller than the worst-case complexity. We also give a simple incremental algorithm to handle the data cube update.
Reference: [OLA96] <author> The OLAP Council. </author> <title> MD-API the OLAP Application Program Interface Version 0.5 Specification, </title> <month> September </month> <year> 1996. </year>
Reference-contexts: 1 Introduction On-Line Analytical Processing (OLAP) [Cod93] allows companies to analyze aggregate databases built from their data warehouses. An increasingly popular data model for OLAP applications is the multidimensional database (MDDB) <ref> [OLA96] </ref> [AGS97], also known as data cube [GBLP96]. To build an MDDB from a data warehouse, certain attributes (typically 5 to 10) are selected. Thus, each data record contains a value for each of these attributes.
Reference: [RND77] <author> E.M. Reingold, J. Nievergelt, and N. Deo. </author> <title> Combinatorial Algorithms. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs. NJ, </address> <year> 1977. </year>
Reference-contexts: It is possible to arrange the cost evaluations of the 2 d choices of X 0 in an order such that any two adjacent choices only differ in one attribute. (Such an ordering can be easily derived from the binary-reflected Gray code <ref> [RND77] </ref>.) With such an ordering, the cost evaluation of each choice can be derived from its preceding choice in O (m) steps, with the exception of the first choice whose cost can be derived in O (md) steps.
Reference: [Sam89] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The data structure we propose for storing the precomputed information can be viewed as a generalized quad-tree <ref> [Sam89] </ref>. Each non-leaf node x "covers" a b = 3. d-dimensional region (a hyper-cube), denoted C (x), containing all the leaf nodes of the subtree rooted at x. We will precompute the index of the maximum value in region C (x) and store it at node x.
Reference: [SAM96] <author> John Shafer, Rakesh Agrawal, and Manish Mehta. SPRINT: </author> <title> A scalable parallel classifier for data mining. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <address> Bombay, India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Some clustering algorithms in image analysis (e.g. [BR91] [SB95]) find rectangular dense regions, but are designed for two-dimensional datasets. Hence we use a modified decision-tree classifier <ref> [SAM96] </ref> to find dense regions (non-empty cells are considered one class and empty cells another). The modification to the classifier is that the number of empty cells in a region are counted by subtracting the number of non-empty cells from the volume of the region.
Reference: [SB95] <author> P. Schroeter and J. Bigun. </author> <title> Hierarchical image segmentation by multi-dimensional clustering and orientation-adaptive boundary refinement. </title> <journal> Pattern Recognition, </journal> <volume> 25(5) </volume> <pages> 695-709, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: One approach to finding these regions would be to use clustering (e.g. [JD88].) However, clustering algorithms typically generate centers of clusters and require post-processing to generate rectangular regions. Some clustering algorithms in image analysis (e.g. [BR91] <ref> [SB95] </ref>) find rectangular dense regions, but are designed for two-dimensional datasets. Hence we use a modified decision-tree classifier [SAM96] to find dense regions (non-empty cells are considered one class and empty cells another).
Reference: [SDNR96] <author> A. Shukla, P.M. Deshpande, J.F. Naughton, and K. Ramasamy. </author> <title> Storage estimation for multidimensional aggregates in the presence of hierarchies. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <pages> pages 522-531, </pages> <address> Mumbai (Bombay), India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Work Following the introduction of the data cube model in [GBLP96], there has been considerable research in the database community on developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates <ref> [SDNR96] </ref>, and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [SR96] <author> B. Salzberg and A. Reuter. </author> <title> Indexing for aggregation, </title> <note> 1996. Working Paper. </note>
Reference-contexts: data cube model in [GBLP96], there has been considerable research in the database community on developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries <ref> [SR96] </ref> [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [STL89] <author> J. Srivastava, J.S.E. Tan, and V.Y. Lum. TB-SAM: </author> <title> An access method for efficient processing of statistical queries. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(4), </volume> <year> 1989. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates <ref> [STL89] </ref> and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [Vai85] <author> P.M. Vaidya. </author> <title> Space-time tradeoffs for orthogonal range queries. </title> <booktitle> In Proc. 17th Annual ACM Symp. on Theory of Comput., </booktitle> <pages> pages 169-174, </pages> <year> 1985. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] <ref> [Vai85] </ref> [WL85] [Yao85]). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [WL85] <author> D.E. Willard and G.S. Lueker. </author> <title> Adding range restriction capability to dynamic data structures. </title> <journal> J. ACM, </journal> <volume> 32(3) </volume> <pages> 597-617, </pages> <year> 1985. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] <ref> [WL85] </ref> [Yao85]). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [Yao85] <author> Andrew Yao. </author> <title> On the complexity of maintaining partial sums. </title> <journal> SIAM J. Computing, </journal> <volume> 14(2) </volume> <pages> 277-288, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] <ref> [Yao85] </ref>). The range queries are typically defined as follows: given m weighted points in an unbounded d-dimensional integer domain, and a query q represented by a d-dimensional rectangle, apply some aggregation operator to all weighted points contained in q.
Reference: [YL95] <author> W. P. Yan and P. Larson. </author> <title> Eager aggregation and lazy aggregation. </title> <booktitle> In Proceedings of the Eighth International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 345-357, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] <ref> [YL95] </ref>. In the field of computational geometry, there is extensive literature on efficient algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]).
References-found: 38

