URL: http://www.cs.ucdavis.edu/~rogaway/papers/seal.ps.gz
Refering-URL: http://www.cs.ucdavis.edu/~rogaway/papers/
Root-URL: http://www.cs.ucdavis.edu
Email: rogaway@cs.ucdavis.edu  copper@watson.ibm.com  
Phone: 2  
Title: A Software-Optimized Encryption Algorithm  
Author: Phillip Rogaway and Don Coppersmith 
Keyword: Key words. Cryptography, Encryption, Fast encryption, Pseudoran dom function family, Software encryption, Stream cipher.  
Date: revised September 18, 1997.  
Note: Full version of [16]. Last  
Address: Davis, CA 95616, U.S.A.  PO Box 218, Yorktown Heights, NY 10598, U.S.A.  
Affiliation: 1 Department of Computer Science, Engineering II Building, University of California,  IBM T.J. Watson Research Center,  
Abstract: We describe a software-efficient encryption algorithm named SEAL 3.0. Computational cost on a modern 32-bit processor is about 4 clock cycles per byte of text. The cipher is a pseudorandom function family: under control of a key (first pre-processed into an internal table) it stretches a 32-bit position index into a long, pseudorandom string. This string can be used as the keystream of a Vernam cipher. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. Biham and A. Shamir, </author> <title> Differential Cryptanalysis of the Data Encryption Standard, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 13 </month>
Reference-contexts: One of them, called "Khufu," is a block cipher which is similar in spirit to SEAL. An earlier software-oriented block cipher than Khufu is FEAL [18]. But this algorithm and its variants have not proven to be particularly secure (see <ref> [1] </ref> for history and attacks). Nor is it all that fast. RC4 is a popular, software-efficient stream cipher designed by Rivest [13]. It is fast, though less fast than SEAL. RC5 is a software-efficient block cipher. It too was designed by Rivest [14]. <p> We didn't care about the syntactic flavor of the cipher we would produce| even whether it was a block cipher or something else seemed irrelevant, except insofar as this might influence the cipher's speed. The first suggestion <ref> (March 1993) </ref> was for a block cipher, but soon we developed a basic "structure" for a pseudorandom function family which was going to be faster.
Reference: 2. <author> A. </author> <title> Bosselaers, </title> <type> personal communications, </type> <month> September </month> <year> 1997. </year> <note> Article to appear. </note>
Reference-contexts: By way of comparison, a software DES implementation typically uses 16 table lookups per byte. Bosselaers has recently provided us with experimental results on the performance of various cryptographic algorithms <ref> [2] </ref>. We reproduce some of his data in Figure 4, quoting his figures for the ciphers SEAL, RC4, RC5, and DES, as well as the hash function MD5. For each of these algorithms Bosselaers wrote a highly optimized assembly language implementation for the Pentium processor. <p> The last column in the table gives the speed of SEAL divided by the speed of the indicated algorithm. Algorithm Mbit/s Relative speed SEAL 198 1.0 RC4 110 1.8 DES 16.9 11.7 Fig. 4. Timing figures reported by Bosselaers <ref> [2] </ref>. The platform is a 90 MHz Intel Pen-tium processor, and the implementations are in optimized assembly language. Bosselaers reports that his SEAL implementation uses 3727 clock cycles to encrypt 1024 bytes. This comes to 3.64 cycles/byte, or 198 Mbit/s with a 90 MHz processor. <p> In his experiments 12 on a DEC Alpha, SEAL 1.0 ran 7.6, 15.2, 62.9, and 1.95 times faster than RC4, RC5-32/12, DES, and MD5, respectively. The data indicates a greater speed advantage for SEAL 1.0 than does the data reported by <ref> [2] </ref>. Probably Roe's "C" code was not uniformly optimized for all of the algorithms. 8 Concluding Remarks It should be emphasized that using SEAL in the expected way does nothing to provide for data authenticity. Many applications which require data privacy also require data authenticity.
Reference: 3. <author> A. Bosselaers, R. Govaerts and J. Vandewalle, </author> <title> Fast hashing on the Pentium, </title> <booktitle> Advances in Cryptology | CRYPTO '96, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 1109, </volume> <publisher> Springer-Verlag, </publisher> <year> 1996, </year> <pages> pp. 298-312. </pages>
Reference-contexts: Key-setup in SEAL has a cost comparable to computing SHA-1 on about 13 KBytes of data; this is estimated to be 2.5-5 msec on a 90 MHz Pentium <ref> [3] </ref>. In the design of SEAL no attention was paid to minimizing key-setup time. If this is at issue in a target application for SEAL one should select a different method for generating SEAL's tables (e.g., using RC4 or RC5 [13, 14]), or abandon the use of SEAL entirely.
Reference: 4. <author> O. Goldreich, S. Goldwasser, and S. Micali, </author> <title> How to construct random functions, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 33, No. 4, </volume> <year> 1986, </year> <pages> pp. 210-217. </pages>
Reference-contexts: Our cipher has this characteristic. As such, SEAL is an inappropriate choice for applications which require rapid key-setup. Length-Increasing Pseudorandom Function Variable Output And Key Lengths. The function SEAL is a type of cryptographic object called a pseudorandom function family (PRF). Such objects were first defined in <ref> [4] </ref>. SEAL is a length-increasing PRF: under control of a 160-bit key a, SEAL maps a 32-bit string n to an L-bit string SEAL (a; n; L).
Reference: 5. <author> H. Handschuh and H. Gilbert, </author> <title> 2 cryptanalysis of the SEAL encryption algorithm, Fast Software Encryption, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 1267, </volume> <publisher> Springer-Verlag, </publisher> <year> 1997, </year> <pages> pp. 1-12. </pages>
Reference-contexts: While SEAL 3.0 retains that change, the more significant adjustment is responsive to an attack by Handschuh and Gilbert <ref> [5] </ref>. See Section 5 for further information on their attack and the differences between SEAL 3.0 and SEAL 1.0. In this paper the name SEAL, by itself, always refers to SEAL 3.0. 2 Characteristics of the Cipher Key characteristics and design choices of SEAL are explained below. Preprocessing The Key. <p> The design progressed entirely on paper. No statistical tests or other experiments were performed during the design of the cipher. Our proposal, SEAL 1.0, was first described in December 1993 [16]. SEAL 3.0. In 1996 Handschuh and Gilbert <ref> [5] </ref> described an attack on a simplified version of SEAL 1.0, and an attack on SEAL 1.0 itself. They require about 2 30 "samples," each 4-words long, to distinguish SEAL 1.0 from a random function. Their attack is responsible for the main change between SEAL 1.0 and SEAL 3.0. <p> Without the change there is a useful property on (D; C 0 ; D 0 ), say, which does not depend on any of n 1 ; n 2 ; n 3 ; n 4 ; see <ref> [5] </ref>. Unpublished predecessors of SEAL 1.0 resembled SEAL 3.0 in modifying each of (A; B; C; D) at the end of an iteration; removing the modifications to B and D was a poorly-chosen optimization. <p> For concreteness, let us now fix our attention on the change that register B undergoes during the second iteration (i = 2) of the algorithm. This change in B is manifest (apart from S [0] and S <ref> [5] </ref>) in y 0 and y 4 . In particular, it is easy to verify by tracing through the definition of WEAK that for some P 1 ; P 5 2 f0; : : : ; 511g. <p> This moves the bit in question into position (D) 18 . On line 7 register D is XORed with a table value which depends on C. But this value of C is manifest in the output stream after it has been shifted and masked by the constant S <ref> [5] </ref>. Thus if the 18-th bit of T [i] is correlated with the most significant bit of i, the change to bit 18 of D which line 7 causes will be correlated to bit 10 (due to the right shift of C in line 7) of y 5 .
Reference: 6. <author> G. Marsaglia, </author> <title> The Marsaglia random number CDROM with the DIEHARD battery of tests of randomness. Distributed by the author (geo@stat.fsu.edu) from Florida State University, </title> <year> 1996. </year>
Reference-contexts: The other difference between SEAL 3.0 and SEAL 1.0 is that in SEAL 3.0 (and SEAL 2.0) table generation uses SHA-1 in lieu of the older SHA. Statistical Tests. In response to a referee's request we subjected SEAL to a 8 battery of statistical tests developed by Marsaglia <ref> [6] </ref>. We computed the 10 MByte string y = SEAL (a; 0; L)kSEAL (a; 1; L)k kSEAL (a; 156249; L) for a fixed key a and L = 64 8 (i.e., 64 bytes). None of the 15 tests in [8] revealed statistical anomalies in y.
Reference: 7. <editor> A. Menezes, P. van Oorschot, and S. Vanstone, </editor> <booktitle> Handbook of Applied Cryptography, </booktitle> <publisher> CRC Press, </publisher> <year> 1997. </year>
Reference-contexts: An earlier version of this cipher was described in 1993 [16] and denoted SEAL 1.0. Though SEAL 3.0 is the first modification to SEAL 1.0 which the authors have described, a variant known as SEAL 2.0 had already appeared in the literature <ref> [7] </ref>: it was identical to SEAL 1.0 apart from using NIST's revised Secure Hash Algorithm (SHA-1) instead of the original one (SHA) [10]. While SEAL 3.0 retains that change, the more significant adjustment is responsive to an attack by Handschuh and Gilbert [5].
Reference: 8. <author> R. Merkle, </author> <title> Fast software encryption functions, </title> <booktitle> Advances in Cryptology | CRYPTO '90, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 537, </volume> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 476-501. </pages>
Reference-contexts: Even a Cyclic Redundancy Code (CRC) is more costly. Related Work. We are not the first to realize the value of software-optimized cryptography. In 1991 Merkle described the utility of software-oriented cryptography and he proposed a suite of three software-efficient algorithms <ref> [8] </ref>. One of them, called "Khufu," is a block cipher which is similar in spirit to SEAL. An earlier software-oriented block cipher than Khufu is FEAL [18]. But this algorithm and its variants have not proven to be particularly secure (see [1] for history and attacks). <p> We computed the 10 MByte string y = SEAL (a; 0; L)kSEAL (a; 1; L)k kSEAL (a; 156249; L) for a fixed key a and L = 64 8 (i.e., 64 bytes). None of the 15 tests in <ref> [8] </ref> revealed statistical anomalies in y. In a second experiment we computed the 10.03 MByte string z = SEAL (a; 0; L)kSEAL (a; 1; L)k kSEAL (a; 152; L), where L = 64 1024 8 (i.e., 64 KBytes).
Reference: 9. <institution> National Bureau of Standards, Federal Information Processing Standards Publication 46, Data encryption standard. </institution> <month> January </month> <year> 1977. </year>
Reference: 10. <institution> National Institute of Standards, U.S. Department of Commerce, </institution> <note> FIPS Publication 180-1, Secure hash standard. April 17, 1995 (supersedes FIPS PUB 180). </note>
Reference-contexts: Though SEAL 3.0 is the first modification to SEAL 1.0 which the authors have described, a variant known as SEAL 2.0 had already appeared in the literature [7]: it was identical to SEAL 1.0 apart from using NIST's revised Secure Hash Algorithm (SHA-1) instead of the original one (SHA) <ref> [10] </ref>. While SEAL 3.0 retains that change, the more significant adjustment is responsive to an attack by Handschuh and Gilbert [5]. See Section 5 for further information on their attack and the differences between SEAL 3.0 and SEAL 1.0. <p> It was not a design goal for the cipher to exhibit an instruction dependency structure which would allow us to always fill both pipes. Table-Driven Cipher. One early decision was whether to make the cipher a straight-line program of logical operations (like MD5 [12] or SHA-1 <ref> [10] </ref>) or to drive it instead by the use of a large table (like Khufu or a software DES), instead. The table-driven approach was selected because we felt that it would lead to a faster and easier-to-design cipher. <p> We specify the tables using a function G. For a a 160-bit string and i an integer, 0 i &lt; 2 32 , G a (i) is a 160-bit value. The function G is just the compression function of the Secure Hash Algorithm SHA-1 <ref> [10] </ref>. For completeness, its definition is given in Appendix A. Let us re-index G to construct a function whose images are 32-bit words instead of 160-bit ones.
Reference: 11. <author> A. Pfitzmann and R. Amann, </author> <title> Efficient software implementation of (generalized) DES, </title> <booktitle> SECURICOM 90: 8-th Worldwide Conference on Computer and Communications Security and Protection, </booktitle> <month> March </month> <year> 1990. </year>
Reference: 12. <author> R. Rivest, </author> <title> The MD5 message digest algorithm, RFC 1321 (Internet Request for Comments), </title> <month> April </month> <year> 1992. </year>
Reference-contexts: It was not a design goal for the cipher to exhibit an instruction dependency structure which would allow us to always fill both pipes. Table-Driven Cipher. One early decision was whether to make the cipher a straight-line program of logical operations (like MD5 <ref> [12] </ref> or SHA-1 [10]) or to drive it instead by the use of a large table (like Khufu or a software DES), instead. The table-driven approach was selected because we felt that it would lead to a faster and easier-to-design cipher.
Reference: 13. <author> R. Rivest, </author> <title> unpublished work. (A description of RC4 appears in B. Schneier, Applied Cryptography, Second Edition: Protocols, Algorithms, and Source Code in C, </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1996.) </year>
Reference-contexts: An earlier software-oriented block cipher than Khufu is FEAL [18]. But this algorithm and its variants have not proven to be particularly secure (see [1] for history and attacks). Nor is it all that fast. RC4 is a popular, software-efficient stream cipher designed by Rivest <ref> [13] </ref>. It is fast, though less fast than SEAL. RC5 is a software-efficient block cipher. It too was designed by Rivest [14]. Some other software-efficient ciphers include Blowfish [17] and WAKE [19]. History And Naming. The full name of the cipher described in this paper is SEAL 3.0. <p> In the design of SEAL no attention was paid to minimizing key-setup time. If this is at issue in a target application for SEAL one should select a different method for generating SEAL's tables (e.g., using RC4 or RC5 <ref> [13, 14] </ref>), or abandon the use of SEAL entirely. Roe [15] did timing studies of "C" implementations of various cryptographic algorithms, including SEAL 1.0. He used a SUN Sparc and a DEC Alpha.
Reference: 14. <author> R. Rivest, </author> <title> The RC5 encryption algorithm, Fast Software Encryption, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 1008, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 86-96. </pages>
Reference-contexts: Nor is it all that fast. RC4 is a popular, software-efficient stream cipher designed by Rivest [13]. It is fast, though less fast than SEAL. RC5 is a software-efficient block cipher. It too was designed by Rivest <ref> [14] </ref>. Some other software-efficient ciphers include Blowfish [17] and WAKE [19]. History And Naming. The full name of the cipher described in this paper is SEAL 3.0. An earlier version of this cipher was described in 1993 [16] and denoted SEAL 1.0. <p> In the design of SEAL no attention was paid to minimizing key-setup time. If this is at issue in a target application for SEAL one should select a different method for generating SEAL's tables (e.g., using RC4 or RC5 <ref> [13, 14] </ref>), or abandon the use of SEAL entirely. Roe [15] did timing studies of "C" implementations of various cryptographic algorithms, including SEAL 1.0. He used a SUN Sparc and a DEC Alpha.
Reference: 15. <author> M. Roe, </author> <title> Performance of block ciphers and hash functions | one year later, Fast Software Encryption, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 809, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 359-362. </pages>
Reference-contexts: In the design of SEAL no attention was paid to minimizing key-setup time. If this is at issue in a target application for SEAL one should select a different method for generating SEAL's tables (e.g., using RC4 or RC5 [13, 14]), or abandon the use of SEAL entirely. Roe <ref> [15] </ref> did timing studies of "C" implementations of various cryptographic algorithms, including SEAL 1.0. He used a SUN Sparc and a DEC Alpha. In his experiments on a Sun Sparc, SEAL 1.0 ran 5.4, 11.7, 56.6, and 2.3 times faster than RC4, RC5-32/12, DES, and MD5, respectively.
Reference: 16. <author> P. Rogaway and D. Coppersmith, </author> <title> A software-optimized encryption algorithm, Fast Software Encryption, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 809, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 56-63. </pages> <note> (Earlier version of this paper.) </note>
Reference-contexts: RC5 is a software-efficient block cipher. It too was designed by Rivest [14]. Some other software-efficient ciphers include Blowfish [17] and WAKE [19]. History And Naming. The full name of the cipher described in this paper is SEAL 3.0. An earlier version of this cipher was described in 1993 <ref> [16] </ref> and denoted SEAL 1.0. <p> Very little attention was paid to Initialize (Figure 1) or to the table generation method. The design progressed entirely on paper. No statistical tests or other experiments were performed during the design of the cipher. Our proposal, SEAL 1.0, was first described in December 1993 <ref> [16] </ref>. SEAL 3.0. In 1996 Handschuh and Gilbert [5] described an attack on a simplified version of SEAL 1.0, and an attack on SEAL 1.0 itself. They require about 2 30 "samples," each 4-words long, to distinguish SEAL 1.0 from a random function.
Reference: 17. <author> B. Schneier, </author> <title> Description of a new variable-length key, 64-bit block cipher (Blowfish), Fast Software Encryption, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 809, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 191-204. </pages>
Reference-contexts: Nor is it all that fast. RC4 is a popular, software-efficient stream cipher designed by Rivest [13]. It is fast, though less fast than SEAL. RC5 is a software-efficient block cipher. It too was designed by Rivest [14]. Some other software-efficient ciphers include Blowfish <ref> [17] </ref> and WAKE [19]. History And Naming. The full name of the cipher described in this paper is SEAL 3.0. An earlier version of this cipher was described in 1993 [16] and denoted SEAL 1.0.
Reference: 18. <author> A. Shimizu and S. Miyaguchi, </author> <title> Fast data encryption algorithm FEAL, </title> <booktitle> Advances in Cryptology | Eurocrypt '87, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 304, </volume> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: In 1991 Merkle described the utility of software-oriented cryptography and he proposed a suite of three software-efficient algorithms [8]. One of them, called "Khufu," is a block cipher which is similar in spirit to SEAL. An earlier software-oriented block cipher than Khufu is FEAL <ref> [18] </ref>. But this algorithm and its variants have not proven to be particularly secure (see [1] for history and attacks). Nor is it all that fast. RC4 is a popular, software-efficient stream cipher designed by Rivest [13]. It is fast, though less fast than SEAL.
Reference: 19. <author> D. Wheeler, </author> <title> A bulk data encryption algorithm, Fast Software Encryption, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 809, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 127-134. 14 </pages>
Reference-contexts: Nor is it all that fast. RC4 is a popular, software-efficient stream cipher designed by Rivest [13]. It is fast, though less fast than SEAL. RC5 is a software-efficient block cipher. It too was designed by Rivest [14]. Some other software-efficient ciphers include Blowfish [17] and WAKE <ref> [19] </ref>. History And Naming. The full name of the cipher described in this paper is SEAL 3.0. An earlier version of this cipher was described in 1993 [16] and denoted SEAL 1.0.
References-found: 19

