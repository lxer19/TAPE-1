URL: http://www-ee.technion.ac.il/~issy/papers/cds94.ps.gz
Refering-URL: http://www-ee.technion.ac.il/~issy/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Configuration Process for a Distributed Software Development Environment  
Author: Israel Z. Ben-Shaul Gail E. Kaiser 
Date: March 1994.  
Note: To appear in 2nd International Workshop on Configurable Distributed Systems,  
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: This paper describes work-in-progress on a configuration facility for a multi-site software development environment. The environment supports collaboration among geographically-dispersed teams of software developers. Addition and deletion of local subenviron-ment sites to a global environment is performed interactively inside any one of the existing local subenvi-ronments, with the same user interface normally employed for invoking software development tools. This registration process is defined and executed using the same notation and mechanisms, respectively, as for the software development process. Everything described in this paper has been implemented and is working, but since we are in the midst of experimentation, we do not expect that the "final" system will be exactly as described here. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <month> February </month> <year> 1992. </year> <month> CUCS-001-92. </month>
Reference-contexts: The external view is illustrated in Figure 2. Additional details about multi-user issues, primarily concurrency control policies specified by the process engineer in the coordination model, are given in <ref> [2, 1] </ref>. Marvel's support for schema and process evolution while a long-term project is in progress is described in [14]. We completed Marvel 3.0, the first multi-user version, in Fall 1991. 3.0.1 was developed using the C/Marvel environment instance of the Marvel 3.0 kernel, and released in Spring 1992.
Reference: [2] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: The external view is illustrated in Figure 2. Additional details about multi-user issues, primarily concurrency control policies specified by the process engineer in the coordination model, are given in <ref> [2, 1] </ref>. Marvel's support for schema and process evolution while a long-term project is in progress is described in [14]. We completed Marvel 3.0, the first multi-user version, in Fall 1991. 3.0.1 was developed using the C/Marvel environment instance of the Marvel 3.0 kernel, and released in Spring 1992.
Reference: [3] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling concurrency in rule-based development environments. </title> <journal> IEEE Expert, </journal> <volume> 5(6) </volume> <pages> 15-27, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: enters a command with the name and actual parameters of the step, and then Marvel selects the "closest" matching rules (there may be more than one) and evaluates each of these rules in turn until it finds one whose condition is already satisfied or can be satisfied by backward chaining <ref> [3] </ref>. The activity, if any, of this rule is then executed. Afterwards, one of the effects is selected according to a status code returned by the activity, and Marvel forward chains to any other rules that are implications of this effect.
Reference: [4] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling up rule-based development environments. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 59-78, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Chaining is prohibited into or out of the compile rule from another instance of the compile rule, to avoid undesirable cycles, due to the "no chain" directive (there is also a "no backward" directive). Additional details about the rule formalism and its chaining engine are given in <ref> [4, 13] </ref>. Conventional file-oriented tools are integrated into a Marvel process without source modifications or recompilation through an enveloping language [9].
Reference: [5] <author> Israel Z. Ben-Shaul. </author> <title> Oz: A decentralized process centered environment. </title> <type> Technical Report CUCS-011-93, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> April </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: We do not consider the latter (system) criterion, where distinct environment systems might interoperate [10]. Our approach to multi-site process definition and execution is outside the scope of this workshop, and is described in <ref> [5, 6] </ref>. The focus of this paper is on the configuration of a global environment, and its reconfiguration over time while the long-term software development project is in progress.
Reference: [6] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year> <note> In press. </note>
Reference-contexts: We do not consider the latter (system) criterion, where distinct environment systems might interoperate [10]. Our approach to multi-site process definition and execution is outside the scope of this workshop, and is described in <ref> [5, 6] </ref>. The focus of this paper is on the configuration of a global environment, and its reconfiguration over time while the long-term software development project is in progress.
Reference: [7] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Existing software can be immigrated from the file system into a Marvel objectbase using the Marvelizer utility [25]. Multiple users of the same environment instance are supported by a client/server architecture <ref> [7] </ref>. A client provides the user interface, checks the arguments of commands, and forks the tool envelope when an activity is executed, while the process engine, synchronization management and objectbase reside in the central Marvel server.
Reference: [8] <author> David R. Pugh Chris W. Loftus and Edel M. Sherratt. </author> <title> Arise: Operating PCTE over a wide-area network. </title> <journal> IEEE Software, </journal> <volume> 10(6) </volume> <pages> 60-62, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: ?lse.Name - (delete [?se ?empty]); 5 Related Work The concept of geographical distribution was discussed at a recent workshop on process-centered environments [19], but as of that workshop no such systems had been constructed | although a wide-area version of the Portable Common Tool Environment (PCTE) standard has been simulated <ref> [8] </ref>. There has been little, if any, practical consideration of the configuration problem in the environments field prior to the work reported in this paper.
Reference: [9] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Additional details about the rule formalism and its chaining engine are given in [4, 13]. Conventional file-oriented tools are integrated into a Marvel process without source modifications or recompilation through an enveloping language <ref> [9] </ref>. The rule activity indicates the tool and envelope name, with input literals and attributes to be supplied as arguments as well as output variables bound to any returned results; an implicit status code selects the actual effect from among those given in the rule.
Reference: [10] <author> Dennis Heimbigner. </author> <title> The ProcessWall: A process state server approach to process programming. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 159-168, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: A geographically distributed PCE would permit each site to specify its own process, including the desired collaboration with other sites. We do not consider the latter (system) criterion, where distinct environment systems might interoperate <ref> [10] </ref>. Our approach to multi-site process definition and execution is outside the scope of this workshop, and is described in [5, 6]. The focus of this paper is on the configuration of a global environment, and its reconfiguration over time while the long-term software development project is in progress.
Reference: [11] <author> Dennis Heimbigner and Marc Kellner. </author> <title> Software process example for ISPW-7, </title> <month> August </month> <year> 1991. </year> <note> /pub/cs/techreports/ISPW7/ispw7.ex.ps.Z available by anonymous ftp from ftp.cs.colorado.edu. </note>
Reference-contexts: Our main example environments are included as part of the distribution: C/Marvel, for Marvel's own development and testing; P/Marvel, to assist process engineers in installation and evolution of environment definitions; and our solution to the benchmark problem developed for the 7th International Software Process Workshop <ref> [11] </ref>. The Marvel 3.x series has been licensed to a total of about 35 institutions to date. We are currently using a new environment instance of Marvel 3.1, called Oz/Marvel, to develop the Oz distributed software development environment and configuration process described in this paper.
Reference: [12] <author> George T. Heineman. </author> <title> A transaction manager component for cooperative transaction models. </title> <type> Technical Report CUCS-017-93, </type> <institution> Columbia University Department of Computer Science, </institution> <month> July </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: We are developing an extended transaction facility suitable for long duration, interactive, and cooperative applications <ref> [12] </ref>, which at present is implemented only with respect to a single server and does not properly handle sub-transactions implemented by batch clients (explained below).
Reference: [13] <author> George T. Heineman, Gail E. Kaiser, Naser S. Bargh-outi, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Chaining is prohibited into or out of the compile rule from another instance of the compile rule, to avoid undesirable cycles, due to the "no chain" directive (there is also a "no backward" directive). Additional details about the rule formalism and its chaining engine are given in <ref> [4, 13] </ref>. Conventional file-oriented tools are integrated into a Marvel process without source modifications or recompilation through an enveloping language [9].
Reference: [14] <author> Gail E. Kaiser, Israel Z. Ben-Shaul, George T. Heine-man, and Wilfredo Marrero. </author> <title> Process evolution for the marvel environment. </title> <type> Technical Report CUCS-047-92, </type> <institution> Columbia University Department of Computer Science, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: The external view is illustrated in Figure 2. Additional details about multi-user issues, primarily concurrency control policies specified by the process engineer in the coordination model, are given in [2, 1]. Marvel's support for schema and process evolution while a long-term project is in progress is described in <ref> [14] </ref>. We completed Marvel 3.0, the first multi-user version, in Fall 1991. 3.0.1 was developed using the C/Marvel environment instance of the Marvel 3.0 kernel, and released in Spring 1992.
Reference: [15] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: The X11 windows user interface supports graphical browsing and ad hoc queries; there is also a command line interface for terminals and batch scripts. The process (or workflow) is written by the process engineer in a process modeling language <ref> [15] </ref>. A process step corresponds to an individual software development task. Each step is encapsulated in a rule with a name and typed parameters.
Reference: [16] <author> Barbara Liskov, Toby Bloom, David Gifford, Robert Scheifler, and William Weihl. </author> <title> Communication in the Mercury system. </title> <editor> In Bruce D. Shriver, editor, </editor> <booktitle> 21st Annual Hawaii International Conference on System Sciences, volume II Software Track, </booktitle> <pages> pages 178-187, </pages> <address> Kona HI, January 1988. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Wei and Endler [27] describe another port-based facility similar to Conic, where change scripts consisting of condition/action rules can, for example, delete components and place components on hosts. Mercury <ref> [16] </ref> provides a general interprocess com munication mechanism for heterogeneous systems. Servers are written independently of whether their application clients choose communication protocols to provide low latency or high throughput.
Reference: [17] <author> Jeff Magee, Jeff Kramer, and Morris Sloman. </author> <title> Constructing distributed systems in Conic. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6) </volume> <pages> 663-675, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: This approach seems analogous to our integration of the registration process with conventional software development processes, although it is considerably more limited since it is not possible to add new Hermes processes that were not anticipated in the original program. Conic <ref> [17] </ref> is also port-based. Task modules contain code, data, entry ports and exit ports; task modules are configuration-independent: there is no direct naming of other modules, just sends and receives to ports. Group modules collect together task modules in a way analogous to Oz global environments incorporating local subenvironments.
Reference: [18] <author> Richard F. Rashid Michael B. Jones and Mary R. Thompson. Matchmaker: </author> <title> An interface specification language for distributed processing. </title> <booktitle> In 12th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 225-235, </pages> <address> New Orleans LA, </address> <month> January </month> <year> 1985. </year>
Reference-contexts: Dynamic reconfiguration is supported to a minimal extent through server ports, which are reestablished after network failures and permit binding of new clients to servers during program execution. Matchmaker <ref> [18] </ref> is similar to Mercury. It provides an interface specification language for heterogeneous distributed systems. Mercury's and Matchmaker's facilities seem orthogonal to those of Oz, since they operate at a lower level.
Reference: [19] <author> Maria H. Penedo and William Riddle. </author> <title> Process-sensitive SEE architecture (PSEEA) workshop summary. </title> <booktitle> SIGSOFT Software Engineering Notes, </booktitle> <address> 18(3):A-78-A-94, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: = false)) (forall GROUP ?empty suchthat (?empty.Name = bogus))) : no_chain (?lse.local = true) # this envelope removes the subenv object from remote subenvs REGISTER deregister_subenv ?se.Name ?se.subenv_name ?lse.Name - (delete [?se ?empty]); 5 Related Work The concept of geographical distribution was discussed at a recent workshop on process-centered environments <ref> [19] </ref>, but as of that workshop no such systems had been constructed | although a wide-area version of the Portable Common Tool Environment (PCTE) standard has been simulated [8].
Reference: [20] <author> James M. Purtilo and Christine R. Hofmeister. </author> <title> Dynamic reconfiguration of distributed programs. </title> <booktitle> In 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 560-571, </pages> <address> Arlington TX, </address> <month> May </month> <year> 1991. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Matchmaker [18] is similar to Mercury. It provides an interface specification language for heterogeneous distributed systems. Mercury's and Matchmaker's facilities seem orthogonal to those of Oz, since they operate at a lower level. The Polylith distributed programming system <ref> [20] </ref> is another facility that supports configuration of internal program components as opposed to external system components.
Reference: [21] <editor> Sudha Ram, editor. </editor> <booktitle> Special Issue on Heterogeneous Distributed Database Systems, volume 24:12 of Computer. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1991. </year>
Reference-contexts: This end of the spectrum is analogous to a distributed database system, while the other end is comparable to a set of independent databases. The database community has delineated a practical intermediate point, often termed federated databases, which permits a high degree of site autonomy <ref> [21] </ref>.
Reference: [22] <author> Wilhelm Schafer, </author> <title> editor. </title> <booktitle> 8th International Software Process Workshop: State of the Practice in Process Technology, </booktitle> <address> Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <booktitle> IEEE Computer Society Press. [23] 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: software development process for that instance of the environment; an instance assists the users in carrying out the defined process, by guiding them from one step to another, enforcing the constraints and implications of process steps as well as any ordering or synchronization requirements, and/or automating portions of the process <ref> [23, 22] </ref>. A geographically distributed PCE would permit each site to specify its own process, including the desired collaboration with other sites. We do not consider the latter (system) criterion, where distinct environment systems might interoperate [10].
Reference: [24] <author> Marc Shapiro, Philippe Gautron, and Laurence Mosseri. </author> <title> Persistence and migration for C++ objects. </title> <editor> In Stephen Cook, editor, </editor> <booktitle> 3rd European Conference on Object-Oriented Programming, British Computer Society Workshop Series, </booktitle> <pages> pages 191-204, </pages> <address> Nottingham, UK, July 1989. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: There has been little, if any, practical consideration of the configuration problem in the environments field prior to the work reported in this paper. The SOS operating system <ref> [24] </ref> is organized into objects and provides support for combining multiple objects into a group, with easy communication among the objects in the group even though the objects reside in multiple contexts. A local proxy provides access to the service collectively provided by the group.
Reference: [25] <author> Michael H. Sokolsky and Gail E. Kaiser. </author> <title> A framework for immigrating existing software into new software development environments. </title> <journal> Software Engineering Journal, </journal> <volume> 6(6) </volume> <pages> 435-453, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: The body of an envelope is a shell script, written in any one of the conventional Unix shell languages. Existing software can be immigrated from the file system into a Marvel objectbase using the Marvelizer utility <ref> [25] </ref>. Multiple users of the same environment instance are supported by a client/server architecture [7]. A client provides the user interface, checks the arguments of commands, and forks the tool envelope when an activity is executed, while the process engine, synchronization management and objectbase reside in the central Marvel server.
Reference: [26] <author> Robert E. Strom, David F. Bacon, Arthur P. Goldberg, Andy Lowry, Daniel M. Yellin, and Shaula Alexander Yemini. </author> <title> Hermes A Language for Distributed Computing. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs NJ, </address> <year> 1991. </year>
Reference-contexts: SOS provides a mechanism for certain cases of dynamic reconfiguration in the form of dynamic classes, where all member functions of an object are called via a dynamic table; this approach requires dynamic linking capabilities, which are unnecessary for Oz. Hermes <ref> [26] </ref> also supports distributed programs with well-defined interfaces between processes (akin to operating system processes, not software process models). New ports can be added to an executing process and existing port connections can be changed, by statements executed from within the existing Her-mes code.
Reference: [27] <author> Jiawang Wei and Markus Endler. </author> <title> A configuration model for dynamically configurable distributed systems. </title> <editor> In Bruce D. Shriver, editor, </editor> <booktitle> 24th Hawaii International Conference on System Sciences, </booktitle> <volume> volume 2, </volume> <pages> pages 265-274, </pages> <address> Kauai HI, </address> <month> January </month> <year> 1991. </year> <journal> IEEE Com--puter Society. </journal>
Reference-contexts: These operations seem analogous to the process steps (rules) of our registration process, although in our case any local suben-vironment can play the role of the Configuration Manager. Wei and Endler <ref> [27] </ref> describe another port-based facility similar to Conic, where change scripts consisting of condition/action rules can, for example, delete components and place components on hosts. Mercury [16] provides a general interprocess com munication mechanism for heterogeneous systems.
References-found: 26

