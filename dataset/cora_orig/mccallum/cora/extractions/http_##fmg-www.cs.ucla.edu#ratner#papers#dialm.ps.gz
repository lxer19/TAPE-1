URL: http://fmg-www.cs.ucla.edu/ratner/papers/dialm.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/geoff/pubs.html
Root-URL: http://www.cs.ucla.edu
Title: Replication Requirements in Mobile Environments  
Author: David Ratner Peter Reiher Gerald J. Popek Geoffrey H. Kuenning 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract: Replication is extremely important in mobile environments because nomadic users require local copies of important data. However, today's replication systems are not "mobile-ready." Instead of improving the mobile user's environment, the replication system actually hinders mobility and complicates mobile operation. Designed for stationary environments, the replication services do not and cannot provide mobile users with the capabilities they require. Replication in mobile environments requires fundamentally different solutions than those previously proposed, because nomadicity presents a fundamentally new and different computing paradigm. Here we outline the requirements that mobility places on the replication service, and briefly describe Roam, a system designed to meet those requirements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. G. Guy, J. S. Heidemann, W. Mak, T. W. Page, Jr., G. J. Popek, and D. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <institution> University of California, Los Angeles, USENIX, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: Additionally, mobile users have difficulty inter-operating with other mobile users, because communication patterns and topologies are typically predefined according to the underlying infrastructure. Often, direct synchronization between mobile users is simply not permitted. Other systems <ref> [1, 12, 16] </ref> have simply traded the above communication problem for another one: scaling. They provide the ability for any-to-any synchronization, but their model suffers from inherent scaling problems, limiting its usability in real environments. Good scaling behavior is very important in the mobile scenario. <p> Here we discuss some of the requirements that are particular to mobile use: any-to-any communication, larger replication factors, detailed controls over replication behavior, and the lack of pre-motion actions. We omit discussion of well-understood ideas, such as the case for optimistic replication, discussed in <ref> [1, 2, 4, 15] </ref>. 2.1 Any-to-any communication By definition, mobile users change their geographic location. As such, it cannot be predicted a priori what machines will be geographically co-located at any given time.
Reference: [2] <author> J. S. Heidemann, T. W. Page, Jr., R. G. Guy, and G. J. Popek. </author> <title> Primarily disconnected operation: Experiences with Ficus. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data, </booktitle> <pages> pages 2-5. </pages> <institution> University of California, Los Angeles, IEEE, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Here we discuss some of the requirements that are particular to mobile use: any-to-any communication, larger replication factors, detailed controls over replication behavior, and the lack of pre-motion actions. We omit discussion of well-understood ideas, such as the case for optimistic replication, discussed in <ref> [1, 2, 4, 15] </ref>. 2.1 Any-to-any communication By definition, mobile users change their geographic location. As such, it cannot be predicted a priori what machines will be geographically co-located at any given time.
Reference: [3] <author> P. Honeyman, L. Huston, J. Rees, and D. Bachmann. </author> <title> The Little Work project. </title> <booktitle> In Proceedings of the Third Workshop on Workstation Operating Systems, </booktitle> <pages> pages 11-14. </pages> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: In the case of shared data, between multiple mobile users or between mobile and stationary machines, replication is often the best and sometimes the only viable approach. Many replication solutions <ref> [3, 14] </ref> assume a static infrastructure; that is, the connections themselves may be transient but the connection location and the set of possible synchronization partners always remain the same. <p> efficient to communicate with a local partner rather than a remote one, mobile users want the ability to directly communicate and synchronize with whomever is "nearby." Consistency can be correctly maintained even if two machines cannot directly synchronize with each other, as demonstrated by systems based on the client-server model <ref> [3, 14] </ref>, but local synchronization increases usability and the level of functionality while decreasing the inherent synchronization cost. Users who are geographically co-located don't want updates to eventually propagate through a long-distance, sub-optimal path; the two machines are next to each other, and the synchronization should be instantaneous.
Reference: [4] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: Here we discuss some of the requirements that are particular to mobile use: any-to-any communication, larger replication factors, detailed controls over replication behavior, and the lack of pre-motion actions. We omit discussion of well-understood ideas, such as the case for optimistic replication, discussed in <ref> [1, 2, 4, 15] </ref>. 2.1 Any-to-any communication By definition, mobile users change their geographic location. As such, it cannot be predicted a priori what machines will be geographically co-located at any given time. <p> Such replication flexibility, called selective replication [9] provides improved efficiency and resource utilization: ward members locally store only those objects that they actively require. Replication decisions can be made manually or with automated tools <ref> [4, 6] </ref>. Since the ward set varies dynamically, different wards might store different sets: not all ward sets will be equivalent. In essence, the model provides selective replication between wards themselves. The reconciliation topologies and algorithms [9] apply equally well within a single ward and between ward masters.
Reference: [5] <author> L. </author> <type> Kleinrock. </type> <institution> Nomadicity. Presentation at the GloMo PI Meeting (February 4) at the University of California at Los Angeles, </institution> <year> 1997. </year>
Reference-contexts: That is, the model must allow any machine to communicate with any other machine; there can be no second-class clients in the system. Any-to-any communication is also required in other mobile arenas, such as in appliance mobility <ref> [5] </ref>, the motion from device to device or system to system.
Reference: [6] <author> G. H. Kuenning. </author> <title> The design of the SEER predictive caching system. </title> <booktitle> In Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Such replication flexibility, called selective replication [9] provides improved efficiency and resource utilization: ward members locally store only those objects that they actively require. Replication decisions can be made manually or with automated tools <ref> [4, 6] </ref>. Since the ward set varies dynamically, different wards might store different sets: not all ward sets will be equivalent. In essence, the model provides selective replication between wards themselves. The reconciliation topologies and algorithms [9] apply equally well within a single ward and between ward masters.
Reference: [7] <author> G. H. Kuenning. Seer: </author> <title> Predictive File Hoarding for Disconnected Mobile Operation. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> Los Angeles, Los Angeles, CA, </address> <month> May </month> <year> 1997. </year> <note> Also available as UCLA CSD Technical Report UCLA-CSD-970015. </note>
Reference-contexts: Unimportant data occupies otherwise usable disk space, which cannot be used for more critical objects. In the mobile context, where network disconnections are commonplace, important data that cannot be stored locally causes problems ranging from minor inconveniences to complete stoppages of work and productivity, as described by Kuenning <ref> [7] </ref>. Kuenning's studies of user behavior indicate that the set of required data can in fact be completely stored locally, but only if the underlying replication service provides the appropriate flexibility to individually select objects for replication.
Reference: [8] <author> P. Queinnec and G. Padiou. </author> <title> Flight plan management in distributed air traffic control system. </title> <booktitle> In Proceedings of the International Symposium on Autonomous Decentralized Systems, </booktitle> <address> Kawasaki, Japan, </address> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: Finally, some have argued the need for larger replication factors independent of the mobile scenario, such as in the case of air traffic control <ref> [8] </ref>. Other scenarios possibly requiring larger replication factors include stock exchanges, network routing, airline reservation systems, and military command and control. Read-only strategies and other class-based techniques cannot adequately solve the scaling problem, at least in the mobile scenario.
Reference: [9] <author> D. Ratner, G. J. Popek, and P. Reiher. </author> <title> Peer replication with selective control. </title> <type> Technical Report CSD-960031, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: Providing any-to-any communication is equivalent to utilizing a peer-to-peer replication model <ref> [9, 12, 16] </ref>; if anyone can directly synchronize with anyone else, then everyone must by definition be equals, at least with respect to update-generation abilities. Some, however, have argued against peer models in mobile environments because of the relative insecurity regarding the physical devices themselves|for example, laptops are often stolen. <p> Such replication flexibility, called selective replication <ref> [9] </ref> provides improved efficiency and resource utilization: ward members locally store only those objects that they actively require. Replication decisions can be made manually or with automated tools [4, 6]. Since the ward set varies dynamically, different wards might store different sets: not all ward sets will be equivalent. <p> Replication decisions can be made manually or with automated tools [4, 6]. Since the ward set varies dynamically, different wards might store different sets: not all ward sets will be equivalent. In essence, the model provides selective replication between wards themselves. The reconciliation topologies and algorithms <ref> [9] </ref> apply equally well within a single ward and between ward masters. Briefly, the algorithms provide that machines communicate with multiple partners to ensure that each data object is synchronized directly with another replica.
Reference: [10] <author> D. Ratner, G. J. Popek, and P. Reiher. </author> <title> The ward model: A scalable replication architecture for mobility. </title> <booktitle> In Workshop on Object Replication and Mobile Computing, </booktitle> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: This paper outlines the requirements of a replication service designed for the mobile context. We conclude with a description of Roam, a replication solution redesigned especially for mobile computing. Built using the Ward architecture <ref> [10] </ref>, it enables rather than hinders mobility, and provides a replication environment truly suited to mobile environments. 2 Replication Requirements Mobile users have special requirements above and beyond those of simple replication required by anyone wishing to share data. <p> Any real solution must provide the type of "get-up and go" functionality required by people for everyday use. 3 Roam Roam is a system designed to meet the above set of requirements. It is based on the Ward model <ref> [10] </ref> and is currently being implemented and tested at the University of California at Los Angeles. 3.1 Ward model The Ward model combines classical elements of both the traditional peer-to-peer and client-server models, yielding a solution that scales well and provides replication flexibility, allowing dynamic reconfiguration of the synchronization topology.
Reference: [11] <author> P. Reiher, T. Page, S. Crocker, J. Cook, and G. Popek. </author> <title> Tru*es|a secure service for widespread file sharing. </title> <booktitle> In Proceedings of the The Privacy and Security Research Group Workshop on Network and Distributed System Security, </booktitle> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: The argument is based on the assumption that security features must be encapsulated within the peer model, and therefore unauthorized access to any peer thwarts all security barriers and mechanisms. However, systems such as Truffles <ref> [11] </ref> have demonstrated that security policies can be modularized and logically situated around a peer replication framework while still remaining independent of the replication system.
Reference: [12] <author> P. Reiher, J. Popek, M. Gunter, J. Salomone, and D. Ratner. </author> <title> Peer-to-peer reconciliation based replication for mobile computers. </title> <booktitle> In Proceedings of the ECOOP Workshop on Mobility and Replication, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Additionally, mobile users have difficulty inter-operating with other mobile users, because communication patterns and topologies are typically predefined according to the underlying infrastructure. Often, direct synchronization between mobile users is simply not permitted. Other systems <ref> [1, 12, 16] </ref> have simply traded the above communication problem for another one: scaling. They provide the ability for any-to-any synchronization, but their model suffers from inherent scaling problems, limiting its usability in real environments. Good scaling behavior is very important in the mobile scenario. <p> Providing any-to-any communication is equivalent to utilizing a peer-to-peer replication model <ref> [9, 12, 16] </ref>; if anyone can directly synchronize with anyone else, then everyone must by definition be equals, at least with respect to update-generation abilities. Some, however, have argued against peer models in mobile environments because of the relative insecurity regarding the physical devices themselves|for example, laptops are often stolen.
Reference: [13] <author> M. Satyanarayanan. </author> <title> The influence of scale on distributed file system design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-18(1):1-8, </volume> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: The argument is that since mobile computers are physically less secure, they should be "second-class" citizens with respect to the highly secure servers located behind locked doors <ref> [13] </ref>. The class-based distinction supposedly provides improved security by limiting the potential security breach to only a second-class object. The argument is based on the assumption that security features must be encapsulated within the peer model, and therefore unauthorized access to any peer thwarts all security barriers and mechanisms. <p> Additionally, peer algorithms have never traditionally scaled well. Finally, some have argued that peer solutions simply by their nature cannot scale well <ref> [13] </ref>. However, while mobile environments seem to require a peer-based solution (described above), they also seem to negate the assumption that a handful of replicas is enough.
Reference: [14] <author> M. Satyanarayanan, J. J. Kistler, P. Kumar, M. E. Okasaki, E. H. Siegel, and D. C. Steere. Coda: </author> <title> A highly available file system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 447-459, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: In the case of shared data, between multiple mobile users or between mobile and stationary machines, replication is often the best and sometimes the only viable approach. Many replication solutions <ref> [3, 14] </ref> assume a static infrastructure; that is, the connections themselves may be transient but the connection location and the set of possible synchronization partners always remain the same. <p> efficient to communicate with a local partner rather than a remote one, mobile users want the ability to directly communicate and synchronize with whomever is "nearby." Consistency can be correctly maintained even if two machines cannot directly synchronize with each other, as demonstrated by systems based on the client-server model <ref> [3, 14] </ref>, but local synchronization increases usability and the level of functionality while decreasing the inherent synchronization cost. Users who are geographically co-located don't want updates to eventually propagate through a long-distance, sub-optimal path; the two machines are next to each other, and the synchronization should be instantaneous.
Reference: [15] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu. </author> <title> Experience with disconnected operation in a mobile computing environment. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, Aug. 1993. </address> <publisher> USENIX. </publisher>
Reference-contexts: Here we discuss some of the requirements that are particular to mobile use: any-to-any communication, larger replication factors, detailed controls over replication behavior, and the lack of pre-motion actions. We omit discussion of well-understood ideas, such as the case for optimistic replication, discussed in <ref> [1, 2, 4, 15] </ref>. 2.1 Any-to-any communication By definition, mobile users change their geographic location. As such, it cannot be predicted a priori what machines will be geographically co-located at any given time.
Reference: [16] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. </author> <title> Managing update conflicts in Bayou, a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> Dec. </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: Additionally, mobile users have difficulty inter-operating with other mobile users, because communication patterns and topologies are typically predefined according to the underlying infrastructure. Often, direct synchronization between mobile users is simply not permitted. Other systems <ref> [1, 12, 16] </ref> have simply traded the above communication problem for another one: scaling. They provide the ability for any-to-any synchronization, but their model suffers from inherent scaling problems, limiting its usability in real environments. Good scaling behavior is very important in the mobile scenario. <p> Providing any-to-any communication is equivalent to utilizing a peer-to-peer replication model <ref> [9, 12, 16] </ref>; if anyone can directly synchronize with anyone else, then everyone must by definition be equals, at least with respect to update-generation abilities. Some, however, have argued against peer models in mobile environments because of the relative insecurity regarding the physical devices themselves|for example, laptops are often stolen.
Reference: [17] <author> R. Want, B. N. Schilit, N. I. Adams, R. Gold, K. Petersen, D. Goldberg, J. R. Ellis, and M. Weiser. </author> <title> An overview of the ParcTab ubiquitous computing experiment. </title> <journal> IEEE Personal Communications Magazine, </journal> <volume> 2(6) </volume> <pages> 28-43, </pages> <month> Dec. </month> <year> 1995. </year> <month> 8 </month>
Reference-contexts: The future will see the use of many more "smart" devices capable of storing replicated data. Palmtop computers are becoming more common, and there is even a wristwatch that can download calendar data from another machine. Researchers <ref> [17] </ref> have built systems that allow laptop and palmtop machines to share data dynamically and opportunistically. It is not difficult to imagine other devices in the near future having the capability to store and conceivably update replicated data; such devices potentially increase replication factors dramatically.
References-found: 17

