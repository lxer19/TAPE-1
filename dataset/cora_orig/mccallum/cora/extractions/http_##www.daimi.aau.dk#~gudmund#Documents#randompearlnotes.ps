URL: http://www.daimi.aau.dk/~gudmund/Documents/randompearlnotes.ps
Refering-URL: http://www.daimi.aau.dk/~gudmund/
Root-URL: http://www.daimi.aau.dk
Title: Randomised Algorithms a simple technique for bounding the expected running time of randomised algorithms, namely
Author: by Gudmund S. Frandsen 
Date: March 2, 1998.  
Note: This lecture note was written for the course Pearls of Theory at University of Aarhus. Most recent revision,  This note describes  
Abstract: The technique is applied to quicksort, to randomised dictionaries and to two selected geometric algorithms: construction of a binary planar autopartition and construction of a convex hull in the plane. All algorithms are simple, but without the proper technique the analysis could be quite messy. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> This note draws partly on material from some of the following sources. These sources are also recommended for further studies. </institution>
Reference: 1. <author> Mark de Berg, Marc van Kreveld, Mark Overmars and Otfried Schwarzkopf, </author> <title> Computational geometry. Algorithms and applications. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1997 </year>
Reference-contexts: The combined tree with root e, left subtree T 1 and right subtree T 2 is unique. In the dictionary problem we assume that the elements already have (distinct) keys, and for each element, we select a random priority from the uniform distribution on the real interval <ref> [0; 1] </ref>, and represent the dictionary by the resulting treap. The treap will be unique, since all selected priorities are distinct with probability 1. It is not practical to represent a priority by its entire (infinite) binary expansion (such as :111000011101011100001101010 : : :). <p> In this case we need to let the number of random bits used be a random variable itself! Assume that the real number r is selected from the uniform distribution on the interval <ref> [0; 1] </ref>. r determines a unique k such that k r &lt; m Let the corresponding a k be our random selection. Clearly, all a 2 fa 0 ; a 1 ; : : : ; a m1 g have equal probability of being selected.
Reference: 2. <author> Rajeev Motwani and Prabhakar Raghavan, </author> <title> Randomized Algorithms. </title> <publisher> Cam-bridge University Press, </publisher> <year> 1995. </year>
Reference: 3. <author> Ketan Mulmuley, </author> <title> Computational Geometry. An Introduction through Randomized Algorithms. </title> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference: 4. <author> Jeffrey Shallit, </author> <title> Randomised Algorithms in "Primitive" Cultures or What is the Oracle Complexity of a Dead Chicken. </title> <type> SIGACT News 23 (4), </type> <year> 1992, </year> <title> and update in SIGACT News 24 (1), </title> <year> 1993. </year>
Reference: 5. <author> Aravind Srinivasan, </author> <title> The Role of Randomness in Computation. </title> <booktitle> BRICS NS-95-6. </booktitle>
References-found: 6

