URL: http://swarm.cs.wustl.edu/csg/papers/1998-5.ps.Z
Refering-URL: http://swarm.cs.wustl.edu/cgi-bin/pubs/papers/
Root-URL: http://www.cs.wustl.edu
Title: Balancing Consistency and Lag in Transaction-Based Computational Steering  
Author: Eileen Kraemer Delbert Hart Gruia-Catalin Roman 
Date: June 2, 1997  
Address: IN ST LOUIS  Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: WASHINGTON UNIVERSITY  Washington School of Engineering Applied Science  Department of Computer Science Washington University  
Pubnum: WUCS-97-27  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Kraemer and J. Wallis, </author> <title> "Interactive steering of simulated annealing," </title> <booktitle> in Proceedings of the SPDP'96 Workshop on Program Visualization and Instrumention, </booktitle> <address> (New Orleans), </address> <month> Oct. </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: configurations to consider at each iteration, the temperature, a factor used to calculate the probability of accepting a neighbor configuration as the new current configuration, the cooling rate, a factor used to reduce the current temperature from one iteration to the next, and the values that define the configuration itself <ref> [1] </ref>.
Reference: [2] <author> J. Vetter and K. Schwan, </author> <title> "Models for computational steering," </title> <booktitle> in Proceedings of the International Conference on Configurable Distributed Systems, </booktitle> <year> 1996. </year>
Reference: [3] <author> V. E. Taylor, J. Chen, T. L. Disz, M. E. Papka, and R. Stevens, </author> <title> "Interactive virtual reality in simulations: Exploring lag time," </title> <journal> Computational Science and Engineering, </journal> <volume> vol. 3, no. 4, </volume> <year> 1996. </year>
Reference: [4] <author> D. Hart, E. Kraemer, and G.-C. Roman, </author> <title> "Query-based visualization of distributed computations," </title> <booktitle> in Proceedings of the 11th International Parallel Processing Symposium, </booktitle> <address> (Geneva, Switzerland), </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: process exists * computation processes interact only via message-passing * every send event has a corresponding receive at some other process 5 * transactions are equivalence classes over the events in the computation * the send and receive events of a communication belong to the same transaction As described in <ref> [4] </ref>, computations that satisfy the above properties permit the calculation of equivalence classes, reflecting an ordering of the transactions in the computation such that a transaction a happened-before a transaction b if and only if there is an event in a that occurred before some event in b. <p> In our work, we address the issues of consistency, latency and feedback in the visualization component. Due to space considerations, we have not included this component in our discussion. Descriptions of this component may be found in <ref> [18, 19, 4, 20] </ref>. We are currently developing algorithms for the steering component. Most current steering systems either apply steering updates on a strictly local basis, or force the processes to synchronize. Between these two alternatives are many unexplored options for using steering actions in a distributed environment.
Reference: [5] <author> K. Chandy and L. Lamport, </author> <title> "Distributed snapshots: determining global states of distributed systems," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 3, no. 1, </volume> <pages> pp. 63-75, </pages> <year> 1985. </year>
Reference-contexts: Classes of queries include one-time queries, evaluated once, and persistent queries, evaluated after each logical change in the system state. Snapshot algorithms examine collections of local snapshot histories and transaction information to produce consistent global snapshots <ref> [5] </ref>. The queries are then evaluated against these consistent global snapshots. Efficient snapshot algorithms are central to the success of this approach. The ability to minimize the number of processes required to participate in the construction of the snapshots helps to minimize perturbation.
Reference: [6] <author> D. Hart, E. Kraemer, and G.-C. Roman, </author> <title> "Query-based visualization," </title> <type> Tech. Rep. </type> <institution> WUCS-96-23, Washington University, Department of Computer Science, </institution> <address> St. Louis, MO, </address> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: To annotate applications without a known communication pattern one must exploit the specifics of the particular application. In the remainder of this subsection, we provide a characterization of the computational model we employ, and show its relation to global snapshots. A more formal treatment may be found in <ref> [6] </ref>. 2.1.1 Transactions A distributed computation consists of a set of processes that work together to achieve a common goal. Each process exports a set of attributes that reflect the state of the process. The process's state changes when an event occurs at the process. <p> Note however, that the application is not required to wait at any process, as the transaction protocol runs on its own logical thread, independent of the application. A more thorough discussion of this algorithm can be found in <ref> [6] </ref>. This algorithm guarantees consistent global snapshots. However, an increase in lag and perturbation as compared to the naive selective algorithm is the price of the consistency. Greater lag times result from the time required for the transaction labeling information to reach the snapshot manager.
Reference: [7] <author> Y. Jean, T. Kindler, and et al., </author> <title> "Case study: An integrated approach for steering, visualization, and analysis of atmospheric simulations," </title> <booktitle> in Proceedings, Visualization '95, </booktitle> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: In the following section we present an overview of approaches employed in related tools and systems. 4 Related Work A number of application-specific steering systems have been designed to address the needs of researchers in atmospheric modeling <ref> [7] </ref>, fluid flow [8] and seismic tomography [9], among others. Although these systems must also address the problems of lag, consistency, scalability, and perturbation, they may do so in an application-specific manner.
Reference: [8] <author> P. Woodward, </author> <title> "Interactive scientific visualization of fluid flow," </title> <journal> Computer, </journal> <volume> vol. 26, no. 10, </volume> <pages> pp. 13-25, </pages> <year> 1993. </year>
Reference-contexts: In the following section we present an overview of approaches employed in related tools and systems. 4 Related Work A number of application-specific steering systems have been designed to address the needs of researchers in atmospheric modeling [7], fluid flow <ref> [8] </ref> and seismic tomography [9], among others. Although these systems must also address the problems of lag, consistency, scalability, and perturbation, they may do so in an application-specific manner.
Reference: [9] <author> J. Cuny, R. Dunn, and et al., </author> <title> "Building domain-specific environments for computational science: a case study in seismic tomography," </title> <booktitle> in Proceedings, Workshop on Environments and Tools for Parallel Scientific Computing, </booktitle> <year> 1996. </year>
Reference-contexts: In the following section we present an overview of approaches employed in related tools and systems. 4 Related Work A number of application-specific steering systems have been designed to address the needs of researchers in atmospheric modeling [7], fluid flow [8] and seismic tomography <ref> [9] </ref>, among others. Although these systems must also address the problems of lag, consistency, scalability, and perturbation, they may do so in an application-specific manner.
Reference: [10] <author> G. A. Geist, J. A. Kohl, and P. M. Papadopoulos, </author> <title> "CUMULVS: Providing fault-tolerance, visualization, and steering of parallel applications," </title> <publisher> SIAM, </publisher> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: Thus, we discuss below several general tools that have been designed to facilitate the steering process, and describe their approaches to solving these problems. The CUMULVS system <ref> [10] </ref> for the steering of PVM programs assumes that the application is structured around a main simulation loop. A data transfer routine is placed in this loop. When this routine is executed, the equivalent of a local snapshot is collected, and marked with an iteration number.
Reference: [11] <author> W. Gu, G. Eisenhauer, E. Kraemer, K. Schwan, J. Stasko, J. Vetter, and N. Mallavarupu, </author> <title> "Falcon: on-line monitoring and steering of large-scale parallel programs," </title> <booktitle> in Proceedings of the Fifth Symposium on the Frontiers of Massively Parallel Computation, (McClean, VA), </booktitle> <pages> pp. 422-429, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Local snapshots may then be combined into global snapshots on the basis of the iteration number. For steering, users may specify a range of iteration numbers during which the desired steering operation may be applied. The Falcon system for interactive program steering <ref> [11] </ref> relies on the existence of an ordering filter placed at the point at which the streams are merged to ensure a valid ordering of events collected by the monitoring system. This causality filter [12], is based on the causal relationships between the events in the program.
Reference: [12] <author> E. Kraemer, </author> <title> "Causality filters: A tool for the online visualization and steering of parallel and distributed programs," </title> <booktitle> in Proceedings of the 11th International Parallel Processing Symposium, </booktitle> <address> (Geneva, Switzerland), </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: The Falcon system for interactive program steering [11] relies on the existence of an ordering filter placed at the point at which the streams are merged to ensure a valid ordering of events collected by the monitoring system. This causality filter <ref> [12] </ref>, is based on the causal relationships between the events in the program. The Falcon implementation attempts to minimize program perturbation through the use of per-thread event buffers, emptied by a local monitoring agent.
Reference: [13] <author> G. Eisenhauer, W. Gu, E. Kraemer, K. Schwan, and J. Stasko, </author> <title> "Online display of parallel programs: Problems and solutions," </title> <booktitle> in Proceedings, International Conference on Parallel and Distributed Processing Techniques and Applications, </booktitle> <address> (Las Vegas, NV), </address> <month> July </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: The Falcon implementation attempts to minimize program perturbation through the use of per-thread event buffers, emptied by a local monitoring agent. In this system, perturbation events are maintained, that permit users to be aware of and evaluate the effects of perturbation on the visualizations of the program's execution <ref> [13] </ref>. Later work by the same group has produced Progress (PROGram and REsource Steering System), which supports the addition of steering functionality to multithreaded C programs executing on multiprocessors, through the use of a steering toolkit that provides sensors, probes, and actuators.
Reference: [14] <author> J. Vetter and K. Schwan, </author> <title> "High performance computational steering of physical simulations," </title> <booktitle> in Proceedings of the 11th International Parallel Processing Symposium, </booktitle> <address> (Geneva, Switzerland), </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: Unconstrained steering updates may be applied through write probes, while actuators ensure that steering operations are applied at "safe points" in a particular process. No facility for coordination of updates across processes has yet been implemented. The Magellan steering system <ref> [14] </ref>, also from Georgia Tech, applies a language-based 13 approach to control multithreaded, asynchronous steering servers that cooperatively steer applications, and addresses many of the issues presented in this paper, but in the context of event-based monitoring.
Reference: [15] <author> R. Sosic, </author> <title> "A procedural interface for program directing," </title> <journal> Software: Practice and Experience, </journal> <volume> vol. 25, no. 7, </volume> <pages> pp. 767-787, </pages> <year> 1995. </year>
Reference-contexts: Debuggers may used to provide some of the same functionality as computational steering tools, as in Dynascope <ref> [15] </ref> However, the level of perturbation associated with debuggers is typically quite high, and consistency of update is left entirely to the user. Also of interest are shared-memory and dataflow models for computational steering. The VASE system [16] was developed for the steering of SIMD computers.
Reference: [16] <author> D. Jablonowski, J. Bruner, B. Bliss, and R. Haber, "VASE: </author> <title> The Visualization and Application Steering Environment," </title> <booktitle> in Proceedings of Sumpercomputing '93, </booktitle> <address> (Port-land, OR), </address> <pages> pp. 560-569, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Also of interest are shared-memory and dataflow models for computational steering. The VASE system <ref> [16] </ref> was developed for the steering of SIMD computers. Shared global state simplifies the consistency issue in particular, as consistent global snapshots and steering actions may be achieved by momentarily blocking all processes except the steering or monitoring process.
Reference: [17] <author> S. Parker and C. Johnson, "Scirun: </author> <title> A scientific programming environment for computational steering," </title> <booktitle> in Supercomputing '95, </booktitle> <year> 1995. </year> <month> 18 </month>
Reference-contexts: Shared global state simplifies the consistency issue in particular, as consistent global snapshots and steering actions may be achieved by momentarily blocking all processes except the steering or monitoring process. Systems such as SCIRun use dataflow architectures for steering and visualization <ref> [17] </ref>, characterized by large-grain steering control. 5 Summary and Future Work Tools for computational steering must provide a monitoring function, some type of display and user interface, and a mechanism for propagating steering actions back to the executing program.
Reference: [18] <author> G.-C. Roman, K. C. Cox, D. Wilcox, and J. Y. Plun, "Pavane: </author> <title> a system for declar-ative visualization of concurrent computations," </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> vol. 3, </volume> <pages> pp. 161-193, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In our work, we address the issues of consistency, latency and feedback in the visualization component. Due to space considerations, we have not included this component in our discussion. Descriptions of this component may be found in <ref> [18, 19, 4, 20] </ref>. We are currently developing algorithms for the steering component. Most current steering systems either apply steering updates on a strictly local basis, or force the processes to synchronize. Between these two alternatives are many unexplored options for using steering actions in a distributed environment.
Reference: [19] <author> J. T. Stasko and E. Kraemer, </author> <title> "A methodology for building application-specific visualizations of parallel programs," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 18, </volume> <pages> pp. 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: In our work, we address the issues of consistency, latency and feedback in the visualization component. Due to space considerations, we have not included this component in our discussion. Descriptions of this component may be found in <ref> [18, 19, 4, 20] </ref>. We are currently developing algorithms for the steering component. Most current steering systems either apply steering updates on a strictly local basis, or force the processes to synchronize. Between these two alternatives are many unexplored options for using steering actions in a distributed environment.
Reference: [20] <author> E. T. Kraemer and J. T. Stasko, </author> <title> "Accurate and informative portrayal of concurrent executions," Concurrency, </title> <booktitle> 1997. In submission. </booktitle> <pages> 19 </pages>
Reference-contexts: In our work, we address the issues of consistency, latency and feedback in the visualization component. Due to space considerations, we have not included this component in our discussion. Descriptions of this component may be found in <ref> [18, 19, 4, 20] </ref>. We are currently developing algorithms for the steering component. Most current steering systems either apply steering updates on a strictly local basis, or force the processes to synchronize. Between these two alternatives are many unexplored options for using steering actions in a distributed environment.
References-found: 20

