URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/TM195.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts95.htm
Root-URL: http://www.mcs.anl.gov
Title: Using ADIFOR 1.0 to Compute Hessians  
Author: by Paul Hovland 
Date: April 1995  
Web: ANL/MCS-TM-195  
Address: 9700 South Cass Avenue Argonne, IL 60439  
Affiliation: ARGONNE NATIONAL LABORATORY  Mathematics and Computer Science Division  
Pubnum: Technical Memorandum No. 195  
Abstract: This work was supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38; through NSF Cooperative Agreement No. CCR-8809615; by a U.S. Department of Defense NDSEG Fellowship; and by NASA Purchase Order L25935D. fl Current address: Dept. of Computer Science, University of Illinois at Urbana-Champaign, 2412 Digital Computer Lab, 1304 W. Springfield Ave., Urbana, IL 61801 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland. ADIFOR: </author> <title> Generating derivative codes from Fortran programs. </title> <journal> Scientific Programming, </journal> <volume> 1(1) </volume> <pages> 11-29, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction When a scientist wishes to compute the gradient of a function for optimization or sensitivity analysis, ADIFOR provides a simple means to produce derivative code via automatic differentiation <ref> [1] </ref>. However, many optimization methods require the Hessian of the objective function. Currently, ADIFOR does not produce code for second derivatives. But, by applying ADIFOR twice, it is possible to produce code for the Hessian. The next section outlines a procedure for creating code for second derivatives.
Reference: [2] <author> Christian Bischof, George Corliss, and Andreas Griewank. </author> <title> ADIFOR exception handling. </title> <type> Technical Report ANL/MCS-TM-159, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: However, when ADIFOR is applied twice, the subroutine names from the first application contain the separator character. Thus, the separator character for the first application of ADIFOR must be something other than $. For this reason, we suggest a separator character of in Step 1. The exception-handling routines <ref> [2] </ref> provide an impediment to applying ADIFOR a second time because these routines are implemented as functions, but ADIFOR currently deals only with subroutines. Steps 8-10 describe how the ADIFOR preprocessor, Adpre, can be used to overcome this problem.
Reference: [3] <author> Christian Bischof and Paul Hovland. </author> <title> Using ADIFOR to compute dense and sparse Jacobians. </title> <type> Technical Report ANL/MCS-TM-158, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: it easier to distinguish between the gradient objects of the first pass and the gradient objects of the second pass, and also to prevent name conflicts, a different separator character (such as $) should be used. 2 4 Initialization The initialization of seed matrices is nontrivial even for first-derivative programs <ref> [3] </ref>. In the case of second derivatives, the situation can become even more complex. The code produced by the method outlined above is capable of computing the matrix product S 1 fi H fi S T 2 , where H is the Hessian.
Reference: [4] <author> Christian H. Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland. </author> <title> Getting started with ADIFOR. </title> <type> Technical Report ANL/MCS-TM-164, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1992. </year> <month> 12 </month>
Reference-contexts: Steps 8-10 describe how the ADIFOR preprocessor, Adpre, can be used to overcome this problem. However, if the exception-handling routines, found in the file intrinsic.f, are not needed these steps can be omitted, as mentioned in Step 7. The ADIFOR preprocessor is described in <ref> [4] </ref>, but its use can be summarized by three steps: 1. Set the RN HOME environment variable using setenv RN HOME /anydir. 2. Create a composition file, as with ADIFOR. 3. Execute Adpre, specifying the composition file name, as for example, adpre -P g func.comp.
References-found: 4

