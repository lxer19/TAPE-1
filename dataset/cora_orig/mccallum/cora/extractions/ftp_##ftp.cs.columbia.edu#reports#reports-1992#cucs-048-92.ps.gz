URL: ftp://ftp.cs.columbia.edu/reports/reports-1992/cucs-048-92.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1992.html
Root-URL: http://www.cs.columbia.edu
Email: calton@cs.columbia.edu  system@cuhhca.hhmi.columbia.edu  
Title: PDBTool: A Prototype Object Oriented Toolkit for Protein Structure Verification  
Author: C. Pu K. P. Sheka, J. Ong, L. Chang, A. Chang, and E. Alessio I.N. Shindyalov, W. Chang, and P.E. Bourne 
Note: 1 partially supported by the National Science Foundation under grant IRI 9116798.  
Address: New York, NY 10027  New York, NY 10032  
Affiliation: Department of Computer Science Columbia University  Department of Biochemistry and Molecular Biophysics Columbia University  
Abstract: Technical Report Number CUCS-048-92 Department of Computer Science Columbia University Abstract The Protein Data Bank (PDB) is a large and rapidly growing standard repository of complex biological macromolecules. Existing software tools for the PDB, including storage management, are quite inflexible and work in isolation. We are using object-oriented design and object-oriented database techniques in the construction of a toolbox for the PDB. The main components of the object-oriented toolbox include: (1) a uniform graphical user interface for fast, intuitive, and interactive access to the PDB; (2) several interoperable storage managers, compatible with present and future PDB formats; (3) a new set of efficient, modular, and flexible software tools. The toolbox is being implemented in C ++ . We describe our experience in the the implementation and use of the first prototype, PDBTool, to display, manipulate, and verify the structure of proteins. This project is a successful collaboration of a Biophysics and a Computer Science research and development team. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F.C. Bernstein, T.F. Koetzle, G.J.B. Williams, E.F. Mayer Jr., M.D. Bryce, J.R. Rodgers, O. Ken-nard, T. Simanouchi, and M. Tasumi. </author> <title> The protein data bank. </title> <journal> J. Mol. Biol. </journal> <volume> 122 </volume> <month> 535-542 </month> <year> (1977). </year>
Reference-contexts: 1 Introduction The Protein Data Bank (PDB) <ref> [1] </ref> is the international repository for 3-dimensional structural information on biological macromolecules. PDB includes data derived from X-ray crystallography, Nuclear Magnetic Resonance, and theoretical simulation. The PDB is maintained and distributed by the Chemistry Department at the Brookhaven National Laboratory (BNL).
Reference: [2] <author> H. Berman NDB: </author> <title> The nucleic acid database. </title> <note> unpublished. </note>
Reference-contexts: This collaboration is the only funded project between these two departments at this time. 2 2 Related Work Several efforts are in progress to better manage PDB data to assist in scientific query. SESAM [8] and NDB <ref> [2] </ref> are based on relational data model, using the Sybase commercial database system. NDB includes exclusively DNA and RNA structures (no complex proteins). Idisis [10] is also relational and originally used the ORACLE commercial database system. Idisis now has its own proprietary storage manager.
Reference: [3] <author> P.E. Bourne and P.L. </author> <title> Marquess The crystallographic workbench. Insight and Innovation in Data Visualization. </title> <editor> Ed. J.E. Bowie, </editor> <publisher> Manning Pub., </publisher> <year> 1992. </year>
Reference-contexts: At this time there are no object-based verification tools for testing the reliability of a macromolecular structure, although a number of individual FORTRAN programs exist. A subset of these FORTRAN programs are available in the Crystallographic Workbench (CW) <ref> [3] </ref> and are used to validate the new methods developed for PDBTool. 3 Internal Structure and Interface 3.1 User Requirements One advantage in our collaboration is the presence of biologists in the definition of user requirements for the project.
Reference: [4] <author> S.H. Bryant. PKB: </author> <title> A program system and data base for the analysis of protein structure. </title> <booktitle> Proteins 5 </booktitle> <pages> 233-247, </pages> <year> 1989. </year>
Reference-contexts: NDB includes exclusively DNA and RNA structures (no complex proteins). Idisis [10] is also relational and originally used the ORACLE commercial database system. Idisis now has its own proprietary storage manager. An alternative approach is used by PKB <ref> [4] </ref> which although relational in structure is coded in S, a language for statistical analysis. These relational models differ in their database schema, as well as the number and type of derived variables and how those variables are organized.
Reference: [5] <editor> R.G.G. </editor> <booktitle> Cattell Next-Generation Database Systems Communications of the ACM, </booktitle> <month> Oct </month> <year> 1991. </year> <note> Vol 34 Num 10 </note>
Reference-contexts: To overcome these difficulties, we are building the Object Oriented Protein Data Bank (OOPDB) <ref> [5] </ref> toolbox, which will provide structure query capability and operate in a distributed environment over heterogeneous and interoperable databases. <p> This report describes the architecture, initial implementation, and features of PDBTool, a prototype structure verification tool. PDBTool illustrates many of the features in terms of data structures, query methods, GUI, and standard interfaces that we anticipate to include in OOPDB <ref> [5] </ref>; persistence and methods for managing persistence objects are being included in the adoption of ObjectStore, a commercial object-oriented database management system (OODBMS) supplied by Object Design, Inc. This prototype results from a joint effort between the departments of Computer Science and Biochemistry and Molecular Biophysics at Columbia University.
Reference: [6] <author> M.J. Conway. </author> <note> The SUIT Version 2.2 Reference Manual. </note> <institution> Computer Science, GUI The University of Virginia 1991, </institution> <year> 1992 </year>
Reference-contexts: These are all publicly accessible software packages. The toolkit itself was divided into components and modules in order to simplify its implementation and incite future code reusability. The modules are: * [The Graphical User Interface] For the GUI we used the Simple User Interface Tool (SUIT) <ref> [6] </ref> software developed at the University of Virginia. SUIT provides a set of graphical widgets to represent data under the X Window System environment. <p> Integrating the code was quite smooth due to the coding approach we followed. Programmers were able to use each others' function prototypes without actually having to compile each others code. The main problem during integration was due to the packages we were working with: The SUIT <ref> [6] </ref> code was written to work under C, not C ++ [7]. <p> Boundary testing was also used to test for unusual cases. For the GUI we used visual testing to see the proper arrangements of the SUIT <ref> [6] </ref> widgets on the PDBTool window. Once all modules were integrated into a single executable unit, system testing was conducted to iron out the interface incompatibilities and system bugs. From a practical viewpoint testing involved a review by crystallographers at the summer 1992 meeting of the American Crystallography Association (ACA).
Reference: [7] <author> S. C. Dewhurst and K. T. </author> <note> Stark Programming in C ++ Computer Science Prentice Hall 1989. </note>
Reference-contexts: The Ramachandran plotting tool was broken up into two parts: calculation and display. Calculation involves deriving the and angle of each residue by traversing through the protein. The functions necessary to find these dihedral angles were translated by hand from FORTRAN IV to C ++ <ref> [7] </ref>. The FORTRAN IV code was taken from the program PHIPSI written at BNL. During development, the calculation code could not be tested, because it could not access the protein information. <p> Programmers were able to use each others' function prototypes without actually having to compile each others code. The main problem during integration was due to the packages we were working with: The SUIT [6] code was written to work under C, not C ++ <ref> [7] </ref>.
Reference: [8] <author> M. Huysmans, J. Richelle, and S.J. Wodak SESAM: </author> <title> A relational database for structure and sequence of macromolecules. </title> <booktitle> Proteins 11 </booktitle> <pages> 59-76, </pages> <year> 1991. </year>
Reference-contexts: This collaboration is the only funded project between these two departments at this time. 2 2 Related Work Several efforts are in progress to better manage PDB data to assist in scientific query. SESAM <ref> [8] </ref> and NDB [2] are based on relational data model, using the Sybase commercial database system. NDB includes exclusively DNA and RNA structures (no complex proteins). Idisis [10] is also relational and originally used the ORACLE commercial database system. Idisis now has its own proprietary storage manager.
Reference: [9] <author> P.M.D. Grey, N.W. Paton, G.J.L. Kemp and J.E. </author> <title> Fothergill An object-oriented database for protein structure analysis. </title> <booktitle> Protein Engineering 3 </booktitle> <pages> 235-243, </pages> <year> 1990. </year>
Reference-contexts: None of these relational databases effectively addresses the impedance mismatch problem between the flat relational tables and complex protein structures. None of these database efforts uses a GUI at this time. To alleviate the difficulties of writing SQL queries, SESAM uses ALI. The only object-based effort is P/FDM <ref> [9] </ref>. P/FDM is implemented in Prolog and supports DAPLEX, a functional language for queries into the database. The main purpose of P/FDM is to investigate schema definition and rigorous modeling of protein structures. <p> Object identities, object and data encapsulation, data abstraction, as well as inheritance for its hierarchical structure, have helped us manage and understand protein structures in a much simpler way. Our PDB schema definition (Figure 1) is derived from our experience in manipulating PDB data and previous work, notably P/FDM <ref> [9] </ref>. We start with the definition of a separate class for each corresponding abstraction level of proteins: protein, chain, secondary structure (derived classes: helix, strand, turn), residue, atom. The relationships between these basic data classes are captured in operational classes that manipulate data classes.
Reference: [10] <author> S. Islam, and M. Sternberg. </author> <title> A relational database of protein structures designed for flexible inquiries about conformation. </title> <booktitle> Protein Engineering 2 </booktitle> <pages> 431-432, </pages> <year> 1989. </year>
Reference-contexts: SESAM [8] and NDB [2] are based on relational data model, using the Sybase commercial database system. NDB includes exclusively DNA and RNA structures (no complex proteins). Idisis <ref> [10] </ref> is also relational and originally used the ORACLE commercial database system. Idisis now has its own proprietary storage manager. An alternative approach is used by PKB [4] which although relational in structure is coded in S, a language for statistical analysis.
Reference: [11] <author> R. Pausch, M. Conway, R. </author> <title> Deline Lessons Learned from SUIT, the Simple User Interface Toolkit Volume 10, Number 4, </title> <month> October </month> <year> 1992, </year> <pages> pages 320-344. </pages>
Reference-contexts: version 3.2 as well as an SGI Elan workstation under Irix version 4.0.1 as X servers. (SUNOS, AIX, and Irix are compatible variants of the UNIX operating system.) On top of the hardware and operating system, the libraries and utilities used by PDBTool include: SUIT v2.2 (Simple User Interface Toolkit) <ref> [11] </ref>, X Windows V11R5, and Cfg math library. These are all publicly accessible software packages. The toolkit itself was divided into components and modules in order to simplify its implementation and incite future code reusability. <p> We simply found it to be useful in structuring our application, reliable in compiling our code, and helpful in the modular construction and testing of the system. (See next section.) Our experience with the SUIT user interface builder is largely positive, corroborating the SUIT implementors' experience <ref> [11] </ref>.
Reference: [12] <author> I. </author> <booktitle> Sommerville Software Engineering Software Engineering Addison Wesley 1990. </booktitle> <pages> 14 </pages>
Reference-contexts: Most modules were independently tested in a bottom-up modular approach 10 <ref> [12] </ref>, in order to check its correct functionality with independent tests run on each, and to check for correct mathematical and geometrical calculations. For example, the file importer was exhaustively tested with already existing PDB files.
References-found: 12

