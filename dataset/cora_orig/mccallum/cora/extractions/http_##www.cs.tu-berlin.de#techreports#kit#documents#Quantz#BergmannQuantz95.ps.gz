URL: http://www.cs.tu-berlin.de/techreports/kit/documents/Quantz/BergmannQuantz95.ps.gz
Refering-URL: http://www.cs.tu-berlin.de/techreports/
Root-URL: 
Title: Parallelizing Description Logics  
Author: Frank W. Bergmann J. Joachim Quantz, 
Keyword: Parallel Algorithms, Knowledge Representation, Description Logics, Distributed AI, Transputer  
Address: KIT-VM11, FR 5-12, Technische Universitt Berlin, Franklinstr. 28/29, D-10857 Berlin, Germany  fr Elektrotechnik, RWTH-Aachen, Germany  KIT-VM11, FR 5-12, Technische Universitt Berlin, Franklinstr. 28/29, D-10857 Berlin, Germany  
Affiliation: Projekt  Rogowski Institut  Projekt  
Note: Submitted for Publication  
Email: email:fraber@cs.tu-berlin.de  email:jjq@cs.tu-berlin.de  
Phone: phone:+49 30 314 254 94 fax:+49 30 314 249 29  phone:+49 30 314 254 94 fax:+49 30 314 249 29  
Abstract: Description Logics (DL), one of the major paradigms in Knowledge Representation, face efficiency problems due to large-scale applications, expressive dialects, or complete inference algorithms. In this paper we investigate the potential of parallelizing DL algorithms to meet this challenge. Instead of relying on a parallelism inherent in logic programming languages, we propose to exploit the applicationspecific potentials of DL and to use a more data-oriented parallelization strategy that is also applicable to imperative programming languages. We argue that object-level propagation is the most promising inference component for such a parallelization, as opposed to normalization, comparison, or classification. We present two alternative PROLOG implementations of parallelized propagation on a loosely coupled MIMD (Multiple Instruction, Multiple Data) system, one based on a farm strategy, the other based on distributed objects. Whereas the farm strategy yields only poor results, the implementation based on distributed objects achieves a considerable speedup, in particular for large-size applications. 
Abstract-found: 1
Intro-found: 1
Reference: [BAP 93] <author> F. W. Bergmann, M. Ostermann, G. von Walter, </author> <title> 'Brain Aid Prolog Language Reference', Brain Aid Systems, </title> <year> 1993 </year>
Reference: [Bergmann 94] <author> F.W. Bergmann, </author> <title> 'Data Parallelism in Description Logics', </title> <booktitle> TAT'94, </booktitle> <pages> 12-14 </pages>
Reference: [Bergmann 95] <author> F.W. Bergmann, </author> <note> Parallelisierung eines Wissensreprsentationssystems, (in preparation) </note>
Reference-contexts: In the remainder of this section we briefly present these two alternatives. Theoretical considerations and numerical calculations towards efficiency and scalability can be found in the detailed analysis in <ref> [Bergmann 95] </ref>. Master Worker 1 Worker 2 Worker 3 Worker N time Parallelizing DL 7 Farm Parallelism The farm communication structure shown in Figure 3 is widely used in industrial applications such as image processing [Burkhard Et Al 94] and finite element simulation [Diekmann Et Al 94]. <p> This is the reason why we omitted the speedup figures in all but the first 4 benchmarks. The table shows high speedups (efficiencies &gt;80%) for all benchmarks, if the number of objects exceeds the number of processors by a certain factor (between 5 and 10). This 3 <ref> [Bergmann 95] </ref> analyzes quantitatively the influence of the avalance exponent on the applicabilityof parallel execution Parallelizing DL 11 result can be interpreted by the perspective of Section 3, where we saw that network efficiently is dependent on the number of pending propagations in the network. <p> If this number is too low, few processing nodes are busy, resulting in a bad network efficiency. Within <ref> [Bergmann 95] </ref> the quantitative analysis shows that the propagation/processor ratio is more relevant to system performance than the overhead caused by message passing. 4 It also indicates how these problems can be overcome, allowing for even larger networks. <p> The efficiency of execution rises mainly with the propagation/processor ratio and thus with the application size. This is an important result because especially large applications are to be considered candidates for a parallel implementation. Theoretical considerations <ref> [Bergmann 95] </ref> show that there are only few technical limits to the scalability of the distributed objects implementation. We have to state that the Transputer system under consideration here is not applicable to real world problems due to its memory restrictions.
Reference: [Bond, Gasser 88] <editor> A. Bond, L. Gasser, </editor> <booktitle> 'Readings in Distributed Artificial Intelligence', </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Angeles, CA, </address> <year> 1988 </year>
Reference: [Brachman Et Al. 91] <author> R. Brachman, D.L. McGuiness, P.F. Patel-Schneider, L. Alperin Resnick, A. Borgida, </author> <title> 'Living with CLASSIC: When and How to Use a KL-ONE -like Language', </title> <editor> in J. Sowa (Ed.), </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge, </booktitle> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1991, </year> <pages> 401-456 </pages>
Reference: [Burkhard Et Al 94] <author> H. Burkhard, A. Bienick, R. Klaus, M. Nlle, G. Schreiber, H. </author> <title> Schulz-Mirbach 'The Parallel Image Processing Sytem PIPS' in R. </title> <editor> Flieger, R. Grebe (eds), </editor> <title> Parallelrechner Grundlagen und Anwendung, </title> <publisher> IOS Press, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1994, </year> <pages> 288-293 </pages>
Reference-contexts: Master Worker 1 Worker 2 Worker 3 Worker N time Parallelizing DL 7 Farm Parallelism The farm communication structure shown in Figure 3 is widely used in industrial applications such as image processing <ref> [Burkhard Et Al 94] </ref> and finite element simulation [Diekmann Et Al 94]. It is theoretically well known and there exists a variety of strategies to distribute workload evenly across a network.
Reference: [Clark, Gregory 87] <author> K. Clark, S, Gregory, </author> <title> 'PARLOG: Parallel Programming in Logic' in E. </title> <editor> Shapiro (ed), </editor> <publisher> Concurrent PrologThe MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987, </year> <pages> 84 - 139 </pages>
Reference: [Clocksin, Mellish 84] <author> W.F. Clocksin, C.S. Mellish, </author> <title> 'Programming in Prolog', </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1984 </year>
Reference: [Diekmann Et Al 94] <editor> R. Diekmann, D. Meyer, B. Monien, 'Parallele Partitionierung unstrukturierter Finite Elemente Netze auf Transputernetzwerken' in R. Flieger, R. Grebe (eds), </editor> <title> Parallelrechner Grundlagen und Anwendung, </title> <publisher> IOS Press, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1994, </year> <pages> 317-326 </pages>
Reference-contexts: Master Worker 1 Worker 2 Worker 3 Worker N time Parallelizing DL 7 Farm Parallelism The farm communication structure shown in Figure 3 is widely used in industrial applications such as image processing [Burkhard Et Al 94] and finite element simulation <ref> [Diekmann Et Al 94] </ref>. It is theoretically well known and there exists a variety of strategies to distribute workload evenly across a network.
Reference: [Donini Et Al. 91a] <author> F.M. Donini, M. Lenzerini, D. Nardi, W. Nutt, </author> <title> 'The Complexity of Concept Languages', </title> <type> KR'91, 151-162 Parallelizing DL 13 </type>
Reference: [Donini Et Al. 91b] <author> F.M. Donini, M. Lenzerini, D. Nardi, W. Nutt, </author> <title> 'Tractable Concept Languages', </title> <booktitle> IJCAI-91, </booktitle> <pages> 458-463 </pages>
Reference: [Dossier 91] <author> A.C. </author> <title> Dossier, </title> <journal> 'Intelligence Artificielle Distribuee', Bulletin de l'AFIA 6, </journal> <year> 1991 </year>
Reference-contexts: The general difference between a farm and a network of communicating objects is the different perspective of parallelism: Within a farm, tasks are distributed; within the distributed objects scheme, objects are distributed. This approach appears to be similar to the agent-based paradigm developed by distributed AI research <ref> [Dossier 91] </ref>. In contrast to this approach, objects within FLEX have to be considered elements of a distribution strategy rather then independently interacting entities. With respect to the definition given in [Bond Gasser 88] we have to subsume our efforts here under the field of distributed problem solving.
Reference: [Hoare 85] <author> C. A. R. Hoare, </author> <title> 'Communicating Sequential Processes', </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., USA, </address> <year> 1985 </year>
Reference-contexts: Parallelizing DL 9 The language used to implement Distributed FLEX is a Prolog dialect called Brain Aid Prolog (BAP). It represents a 'standard' Clocksin & Mellish [Clocksin Mellish 84] Prolog with parallel library extensions, implementing a scheme similar to CSP <ref> [Hoare 85] </ref>. Parallelism and synchronization is expressed explicitly using the notion of 'processes' and 'messages'. A process in BAP is a single and independent Prolog instance with a private database. A message is any Prolog term that becomes exchanged between two processes.
Reference: [Kindermann 95] <author> C. Kindermann, 'Verwaltung assertorischer Inferenzen in terminologischen Wissensbanksystemen', </author> <type> PhD Thesis (submitted), </type> <institution> TU Berlin, </institution> <year> 1995 </year>
Reference-contexts: This corresponds more closely to Natural Deduction or Sequent Calculi, two deduction systems also developed in the context of FOL. A third alternative, 1 We use "Objterm todesignate both concepts and roles. 2 See [Schaerf 94] for tableaux-based algorithms for object-level reasoning and <ref> [Kindermann 95] </ref> for a discussion ofefficiency problems Parallelizing DL 4 combining advantages of the normalize-compare approach and tableaux-based methods has therefore been proposed in [Royer Quantz 92]. The basic idea is to use Sequent Calculi instead of tableaux-based methods for the characterization of the deduction rules.
Reference: [Owsnicki-Klewe 88] <author> B. Owsnicki-Klewe, </author> <title> 'Configuration as a Consistency Maintenance Task', </title> <editor> in W. Hoeppner (Ed.), </editor> <booktitle> Proceedings of GWAI'88, </booktitle> <address> Berlin: </address> <publisher> Springer, </publisher> <year> 1988, </year> <pages> 77-87 </pages>
Reference-contexts: In addition to this standard classification we also have to apply DL rules when processing objects. This is achieved by applying all rules whose left-hand sides subsume the object's normal form. After this application the normal form is again normalized and classified until no new rules are applicable <ref> [Owsnicki-Klewe 88] </ref>. In the non local phase we have to propagate information to other objects.
Reference: [Pontelli, Gupta 94] <author> E. Pontelli, G. Gupta, </author> <booktitle> 'Design and Implementation of Parallel Logic Programming Systems', Proceedings of ILPS'94 Post Converence Workshop, </booktitle> <year> 1994 </year>
Reference: [Quantz 93] <author> J.J. Quantz, </author> <title> 'Interpretation as Exception Minimization', </title> <booktitle> IJCAI-93, </booktitle> <pages> 1310-1315 </pages>
Reference-contexts: The main area of FLEX applications within the KIT research group is Natural Language Processing (NLP) <ref> [Quantz 93, Quantz Schmitz 94] </ref>. Unfortunately memory limitations kept us from using these applications as benchmarks. Instead we imitate the structure of our NLP applications leading to benchmarks with similar behaviour but much lower memory requirements.
Reference: [Quantz, Schmitz 94] <author> J.J. Quantz, B. Schmitz, </author> <title> 'Knowledge-Based Disambiguation for Machine Translation', </title> <booktitle> Minds and Machines 4, </booktitle> <pages> 39-57, </pages> <year> 1994 </year>
Reference: [Royer, Quantz 94] <author> V. Royer, J.J. Quantz, </author> <title> 'On Intuitionistic Query Answering in Description Bases', </title> <editor> in A. Bundy (Ed.), CADE-94, </editor> <publisher> Berlin: Springer, </publisher> <year> 1994, </year> <pages> 326-340 </pages>
Reference: [Royer, Quantz 92] <author> V. Royer, J.J. Quantz, </author> <title> 'Deriving Inference Rules for Terminological Logics', </title> <editor> in D. Pearce, G. Wagner (eds), </editor> <booktitle> Logics in AI, Proceedings of JELIA'92, </booktitle> <address> Berlin: </address> <publisher> Springer, </publisher> <year> 1992, </year> <pages> 84-105 </pages>
Reference-contexts: Like tableaux methods, sequent calculi provide a sound logical framework, but whereas tableaux-based methods are refutation based, i.e. suitable for theorem checking, sequent calculi are constructive, i.e. suitable for theorem proving. Based on the ideas presented in <ref> [Royer, Quantz 92, Royer Quantz 94] </ref> the DL system FLEX has been developed at the Technische Universitt Berlin. The parallelization described in the following has been performed for the FLEX system.
Reference: [Schaerf 94] <author> A. Schaerf, </author> <title> 'Query Answering in Concept-Based Knowledge Representation Systems: Algorithms, Complexity, and Semantic Issues', </title> <type> Dissertation Thesis, </type> <institution> Dipartimento di Informatica e Sistemistica, Universit di Roma 'La Sapienza', </institution> <note> 1994 [Strietzel 94] 'Large Eddy Simulation turbulenter Strmungen auf MIMD-Systemen', </note> <editor> in R. Flieger, R. Grebe (eds), </editor> <title> Parallelrechner Grundlagen und Anwendung, </title> <publisher> IOS Press, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1994, </year> <pages> 357 - 366 </pages>
Reference-contexts: This corresponds more closely to Natural Deduction or Sequent Calculi, two deduction systems also developed in the context of FOL. A third alternative, 1 We use "Objterm todesignate both concepts and roles. 2 See <ref> [Schaerf 94] </ref> for tableaux-based algorithms for object-level reasoning and [Kindermann 95] for a discussion ofefficiency problems Parallelizing DL 4 combining advantages of the normalize-compare approach and tableaux-based methods has therefore been proposed in [Royer Quantz 92].
References-found: 21

