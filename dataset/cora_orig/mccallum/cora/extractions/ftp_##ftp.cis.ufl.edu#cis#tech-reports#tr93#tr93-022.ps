URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-022.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: An Object-Oriented Multimodel Approach to Integrate Planning, Intelligent Control and Simulation  
Author: Jin Joo Lee William Dean Norris II Paul A. Fishwick 
Address: Gainesville, FL 32611  
Affiliation: Department of Computer and Information Sciences University of Florida  
Abstract: The areas of planning, intelligent control and simulation have each spawned their own representational structures. Deliberative planning approaches found within AI are often rule based and simulation is often function based. Intelligent control approaches and the perceived need to integrate reactive control with deliberative planning has suggested an integration of modeling techniques; however, well-formed integration techniques are scarce. We propose using the multi-model method for large scale systems containing intelligent and non-intelligent objects. Our initial results with planning and control within a truck depot show that, with multimodeling, current deliberative planning methods are extended to include a richer set of model types besides production rule systems. Moreover, reactive control is modulated by deliberative planning model structures so that the entire model is well-formed and easy to comprehend. [Key Words: Autonomy, Intelligent Control, Multimodeling, Planning, Object Oriented Simulation] 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Booch. </author> <title> Object Oriented Design. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: Within computer simulation, the system entity structure (SES) [20] (an extension of DEVS [17, 16]) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions. Within the object oriented design literature <ref> [18, 1] </ref>, the effort is very similar in that object oriented simulation is ac complished by building 1) a class model and 2) dynamic models for each object containing state information.
Reference: [2] <author> R. A. Brooks. </author> <title> A robot layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 2:14 - 23, </volume> <year> 1986. </year>
Reference-contexts: Dean [3] provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner <ref> [12, 2, 9] </ref>. Due to the divided research between deliberative and reactive planners, the technology of the two fields has also been divided. We believe the major difficulty in trying to build a combined planner is integrating the different methods of each area. <p> Fig. 3 shows the control system of our simulation. 4 Intelligent Objects Because the arrival of the trucks is dynamic and there is no determined number of trucks a priori, no type of o*ine planning is possible. As illustrated in Fig. 4, we have adopted Brook's subsumption architecture <ref> [2] </ref> to integrate the different level modules. Because our simulation is discrete, we will allow the output to be suppressed by a higher level for one time step until the next event arrives and causes another output. <p> However, the output command may be suppressed by the higher level, therefore never reaching the basin model. This may also be the case for the Exception Control module. For more detailed explanation of the suppressor function, refer to <ref> [2] </ref>. 4.3 Optimal Height Control Finally, the Optimal Height Control module controls the height in order to maximize the profit. Because this module is less reactive and involves more symbolic knowledge and reasoning (heuristics) than the other lower level modules, rule-based reasoning is best suited for the task.
Reference: [3] <author> T. L. Dean and M. P. Wellman. </author> <title> Planning and Control. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Taking the other extreme, other researchers developed purely reactive planners that can react to the environment by executing actions without extensive reasoning. The next logical step is to combine planning and control to produce a planner that is both deliberative and reactive. Dean <ref> [3] </ref> provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner [12, 2, 9]. <p> From the planning perspective, testing, evaluation and modification can be done without connecting the planner to an actual physical device or object. The Truck Depot problem was originally taken from <ref> [3] </ref>.
Reference: [4] <author> P. A. Fishwick. </author> <title> Heterogeneous Decomposition and Coupling for Combined Modeling. </title> <booktitle> In 1991 Winter Simulation Conference, </booktitle> <pages> pages 1199 - 1208, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimod-els <ref> [8, 4, 5, 6, 13] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. <p> Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. Due CIS TR93-022 TBP: Conf. on AI Simulation and Planning in High-Autonomoy Systems 2 to the hierarchical structure of the multimodel <ref> [4, 5] </ref> approach, the object oriented paradigm is natural for implementation. Each of the model types are executed using the same methods, Initialize (), Input (), Output (), State () and Update (). <p> V gt represents the total volume of good trucks and V i represents the total volume of input. 5 Simulating Multimodels 5.1 What are Multimodels? Models that are composed of other models, in a network or graph, are called multimodels <ref> [4, 5, 7, 6, 8] </ref>. Multimodels allow the modeling of large scale systems at varying levels of abstraction.
Reference: [5] <author> P. A. Fishwick. </author> <title> An Integrated Approach to System Modelling using a Synthesis of Artificial Intelligence, </title> <booktitle> Software Engineering and Simulation Methodologies. ACM Transactions on Modeling and Computer Simulation, </booktitle> <volume> 2(4):307 - 330, </volume> <year> 1992. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimod-els <ref> [8, 4, 5, 6, 13] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. <p> Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. Due CIS TR93-022 TBP: Conf. on AI Simulation and Planning in High-Autonomoy Systems 2 to the hierarchical structure of the multimodel <ref> [4, 5] </ref> approach, the object oriented paradigm is natural for implementation. Each of the model types are executed using the same methods, Initialize (), Input (), Output (), State () and Update (). <p> V gt represents the total volume of good trucks and V i represents the total volume of input. 5 Simulating Multimodels 5.1 What are Multimodels? Models that are composed of other models, in a network or graph, are called multimodels <ref> [4, 5, 7, 6, 8] </ref>. Multimodels allow the modeling of large scale systems at varying levels of abstraction.
Reference: [6] <author> P. A. Fishwick. </author> <title> A Simulation Environment for Multimodeling. </title> <note> (accepted for publication), </note> <year> 1993. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimod-els <ref> [8, 4, 5, 6, 13] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. <p> V gt represents the total volume of good trucks and V i represents the total volume of input. 5 Simulating Multimodels 5.1 What are Multimodels? Models that are composed of other models, in a network or graph, are called multimodels <ref> [4, 5, 7, 6, 8] </ref>. Multimodels allow the modeling of large scale systems at varying levels of abstraction.
Reference: [7] <author> P. A. Fishwick. </author> <title> Computer Simulation Model Design & Execution. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <note> (to be published as a textbook). </note>
Reference-contexts: V gt represents the total volume of good trucks and V i represents the total volume of input. 5 Simulating Multimodels 5.1 What are Multimodels? Models that are composed of other models, in a network or graph, are called multimodels <ref> [4, 5, 7, 6, 8] </ref>. Multimodels allow the modeling of large scale systems at varying levels of abstraction.
Reference: [8] <author> P. A. Fishwick and B. P. Zeigler. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 1(2):52 - 81, </volume> <year> 1992. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimod-els <ref> [8, 4, 5, 6, 13] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. <p> V gt represents the total volume of good trucks and V i represents the total volume of input. 5 Simulating Multimodels 5.1 What are Multimodels? Models that are composed of other models, in a network or graph, are called multimodels <ref> [4, 5, 7, 6, 8] </ref>. Multimodels allow the modeling of large scale systems at varying levels of abstraction.
Reference: [9] <author> I. Futo and T. </author> <title> Gergely. </title> <booktitle> Artificial Intelligence in Simulation. </booktitle> <publisher> Ellis Horwood Limited/John Wiley and Sons, </publisher> <year> 1990. </year> <title> CIS TR93-022 TBP: </title> <booktitle> Conf. on AI Simulation and Planning in High-Autonomoy Systems 8 </booktitle>
Reference-contexts: Dean [3] provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner <ref> [12, 2, 9] </ref>. Due to the divided research between deliberative and reactive planners, the technology of the two fields has also been divided. We believe the major difficulty in trying to build a combined planner is integrating the different methods of each area.
Reference: [10] <author> D. Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5):514 - 530, </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: Within the object oriented design literature [18, 1], the effort is very similar in that object oriented simulation is ac complished by building 1) a class model and 2) dynamic models for each object containing state information. Harel <ref> [10, 11] </ref> defines useful visual modeling methods in the form of "state charts" so that the dynamics may be seen in the form of finite state machines. From our perspective the object oriented approach provides an excellent starting point when deciding how to organize information about dynamical systems: 1.
Reference: [11] <author> D. Harel. </author> <title> Biting the Silver Bullet: Toward a Brighter Future for System Development. </title> <journal> IEEE Computer, </journal> <volume> 25(1):8 - 20, </volume> <month> January </month> <year> 1992. </year>
Reference-contexts: Within the object oriented design literature [18, 1], the effort is very similar in that object oriented simulation is ac complished by building 1) a class model and 2) dynamic models for each object containing state information. Harel <ref> [10, 11] </ref> defines useful visual modeling methods in the form of "state charts" so that the dynamics may be seen in the form of finite state machines. From our perspective the object oriented approach provides an excellent starting point when deciding how to organize information about dynamical systems: 1.
Reference: [12] <author> L. P. Kaelbling. </author> <title> An architecture for intelligent reactive systems. </title> <booktitle> In Reasoning About Actions and Plans, </booktitle> <pages> pages 395 - 410. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1987. </year>
Reference-contexts: Dean [3] provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner <ref> [12, 2, 9] </ref>. Due to the divided research between deliberative and reactive planners, the technology of the two fields has also been divided. We believe the major difficulty in trying to build a combined planner is integrating the different methods of each area.
Reference: [13] <author> V. T. Miller. </author> <title> Heterogeneous Hierarchical Mod-elling for Knowledge-Based Autonomous Systems. </title> <type> PhD thesis, </type> <institution> University of Florida, </institution> <year> 1993. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimod-els <ref> [8, 4, 5, 6, 13] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels.
Reference: [14] <author> N. R. Nielsen. </author> <title> Applications of AI Techniques to Simulation. </title> <editor> In P. Fishwick and R. Modjeski, editors, </editor> <title> Knowledge Based Simulation: </title> <booktitle> Methodology and Application, </booktitle> <pages> pages 1 - 19. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Thus, multimodeling allows the integration of these different techniques as submodels. With planning and control combined, we now want to integrate the different modeling types that exist in AI and simulation. Some previous work <ref> [14, 15] </ref> has been done in the integration of AI and Simulation. The integration has two major advantages. Because both the intelligent and non-intelligent objects are being modeled and simulated under one simulation, we are able to test and evaluate the performance of the overall system.
Reference: [15] <author> R. M. O'Keefe. </author> <title> The Role of Artificial Intelligence in Discrete Event Simulation. </title> <editor> In L. E. Widman, K. A. Loparo, and N. R. Nielsen, editors, </editor> <booktitle> Artificial Intelligence, Simulation & Modeling, </booktitle> <pages> pages 359 - 379. </pages> <publisher> John Wiley and Sons, </publisher> <year> 1989. </year>
Reference-contexts: Thus, multimodeling allows the integration of these different techniques as submodels. With planning and control combined, we now want to integrate the different modeling types that exist in AI and simulation. Some previous work <ref> [14, 15] </ref> has been done in the integration of AI and Simulation. The integration has two major advantages. Because both the intelligent and non-intelligent objects are being modeled and simulated under one simulation, we are able to test and evaluate the performance of the overall system.
Reference: [16] <author> H. Praehofer. </author> <title> Theoretic Foundations for Combined Discrete Continuous System Simulation. </title> <type> PhD thesis, </type> <institution> University Linz, Austria, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction The object oriented approach to simulation is discussed in different literature camps. Within computer simulation, the system entity structure (SES) [20] (an extension of DEVS <ref> [17, 16] </ref>) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions.
Reference: [17] <author> H. Praehofer, G. Auernig, and Reisinger G. </author> <title> An Environment for DEVS-Based Modeling in Common Lisp/CLOSS. </title> <note> (accepted for publication), </note> <year> 1993. </year>
Reference-contexts: 1 Introduction The object oriented approach to simulation is discussed in different literature camps. Within computer simulation, the system entity structure (SES) [20] (an extension of DEVS <ref> [17, 16] </ref>) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions.
Reference: [18] <author> J. Rumbaugh, M. Blaha, W. Premerlani, E. Fred-erick, and W Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Within computer simulation, the system entity structure (SES) [20] (an extension of DEVS [17, 16]) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions. Within the object oriented design literature <ref> [18, 1] </ref>, the effort is very similar in that object oriented simulation is ac complished by building 1) a class model and 2) dynamic models for each object containing state information. <p> From our perspective the object oriented approach provides an excellent starting point when deciding how to organize information about dynamical systems: 1. Start with a concept model of the system. 2. Create a class model using a visual approach such as OMT <ref> [18] </ref>. This phase should involve creating all relationships among classes. 3. Specify the dynamics for each class instance where state transition is a factor. Note that some classes will not contain state information and some relations may not be of a dynamic na ture. 4.
Reference: [19] <author> L. A. Zadeh. </author> <title> Fuzzy Logic. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 83 - 93, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: The Exception Control takes the state of the basin as input, which is the volume of the mixture in the basin, B vol and the volume of the mixture in the truck, T vol . With B vol , fuzzy logic <ref> [19] </ref> is used to infer whether the basin is in an OVERFLOW or EMPTY state. With T vol , fuzzy logic is used to decide if the truck is in an OVERFLOW state.
Reference: [20] <author> B. P. Zeigler. </author> <title> Object Oriented Simulation with Hierarchical, Modular Models: Intelligent Agents and Endomorphic Systems. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction The object oriented approach to simulation is discussed in different literature camps. Within computer simulation, the system entity structure (SES) <ref> [20] </ref> (an extension of DEVS [17, 16]) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions.
References-found: 20

