URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/dynamic_planar_mst.ps.Z
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/
Root-URL: http://www.cs.yale.edu
Title: Maintenance of a Minimum Spanning Forest in a Dynamic Plane Graph changes in the edge
Author: David Eppstein Giuseppe F. Italiano Roberto Tamassia Robert E. Tarjan Jeffery Westbrook k Moti Yung flfl k 
Address: CA  New York, NY 10027.  New York, NY 10027 and  Rome, Italy.  Box 1910, Providence, RI 02912-1910.  Princeton, NJ 08544, and  Princeton, NJ 08540.  New Haven, CT  Yorktown Heights, NY 10598.  
Affiliation: Department of Information and Computer Science, University of California, Irvine,  Department of Computer Science, Columbia University,  Department of Computer Science, Columbia University,  Dipartimento di Informatica e Sistemistica, Universita di Roma,  Department of Computer Science, Brown University,  Department of Computer Science, Princeton University,  NEC Research Institute,  Department of Computer Science, Yale University,  Department of Computer Science, Princeton University. flfl IBM Research Division, T. J. Watson Research Center,  
Note: cations supported include  92715. This work was done while the author was at the  Partially supported by an IBM Graduate Fellowship.  06520. This work done while the author was at the  
Date: November 11, 1991  
Abstract: We give an efficient algorithm for maintaining a minimum spanning fl Research supported in part by NSF grant CCR-88-14977, NSF grant DCR-86-05962, NSF grant CCR-90-09753, ONR Contract N00014-87-K-0467, DIMACS (Center for Discrete Mathematics and Theoretical Computer Science) a National Science Foundation Science and Technology Center, grant NSF-STC88-09648, and Esprit II Basic Research Actions Program of the European Communities Contract No. 3075. A preliminary version of this article appeared in the Proceedings of the 1st ACM-SIAM Symposium on Discrete Algorithms, held in San Francisco, CA, January 1990. forest of a plane graph subject to on-line modifications. The modifi
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Ausiello, G. F. Italiano, A. M. Spaccamela, and U. Nanni. </author> <title> Incremental algorithms for minimal length paths. </title> <booktitle> In Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 12-21, </pages> <year> 1990. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths <ref> [1, 8, 25, 28, 34] </ref>. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3].
Reference: [2] <author> G. D. Battista and R. Tamassia. </author> <title> Incremental planarity testing. </title> <booktitle> In Proc. 30th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 436-441, </pages> <year> 1989. </year>
Reference-contexts: Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing <ref> [2, 3] </ref>. The dynamic minimum spanning tree problem has been considered by Spira and Pan [28], Chin and Houck [7], Frederickson [10], and Gabow and Stall-mann [11]. <p> The edge-ordered tree also finds use in the on-line planarity testing algorithm of Di Battista and Tamassia <ref> [2, 3] </ref>. Thus our data structure is fairly general and powerful. The algorithms can be made to run in worst-case time O (log m) with the biased tree implementation of dynamic trees [26]. <p> If such an algorithm were based on the primal/dual spanning tree relationship, however, then it would need to move quickly (i.e., in O (log n) amortized time) between topologically distinct embeddings. In recent work Di Battista and Tamassia <ref> [2, 3] </ref> give data structures and algorithms that can do this in O (log n) time in the restricted case that only edge insertions are allowed.
Reference: [3] <author> G. D. Battista and R. Tamassia. </author> <title> On-line planarity testing. </title> <type> Technical Report CS-89-31, </type> <institution> Department of Computer Science, Brown University, </institution> <year> 1989. </year>
Reference-contexts: Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing <ref> [2, 3] </ref>. The dynamic minimum spanning tree problem has been considered by Spira and Pan [28], Chin and Houck [7], Frederickson [10], and Gabow and Stall-mann [11]. <p> The edge-ordered tree also finds use in the on-line planarity testing algorithm of Di Battista and Tamassia <ref> [2, 3] </ref>. Thus our data structure is fairly general and powerful. The algorithms can be made to run in worst-case time O (log m) with the biased tree implementation of dynamic trees [26]. <p> If such an algorithm were based on the primal/dual spanning tree relationship, however, then it would need to move quickly (i.e., in O (log n) amortized time) between topologically distinct embeddings. In recent work Di Battista and Tamassia <ref> [2, 3] </ref> give data structures and algorithms that can do this in O (log n) time in the restricted case that only edge insertions are allowed.
Reference: [4] <author> K. Booth and G. Lueker. </author> <title> Testing for the consecutive ones property, interval graphs, and graph planarity using PQ-tree algorithms. </title> <journal> J. Comput. System Sci., </journal> <volume> 13 </volume> <pages> 335-379, </pages> <year> 1976. </year>
Reference-contexts: Let G be a plane graph of n vertices (and hence O (n) edges) undergoing changes in edge weight. Note that the planar embedding can be generated in O (n) time using one of the algorithms of Hopcroft and Tarjan [16] or Booth and Lueker <ref> [4] </ref> (see Chiba, Nishizeki, Abe, and Ozawa [6]). Each connected component gives rise to a planar subdivision. The initial spanning trees can be found in O (n) time with the algorithm of Cheriton and Tarjan [5].
Reference: [5] <author> D. Cheriton and R. E. Tarjan. </author> <title> Finding minimum spanning trees. </title> <journal> SIAM J. Comput., </journal> <volume> 5 </volume> <pages> 724-742, </pages> <year> 1976. </year>
Reference-contexts: Each connected component gives rise to a planar subdivision. The initial spanning trees can be found in O (n) time with the algorithm of Cheriton and Tarjan <ref> [5] </ref>. Thus, given O (n) preprocessing time, one can maintain the minimum spanning forest of G in O (log n) amortized time per operation and O (n) space. 3 Edge-ordered Trees and a Fully Dynamic Algorithm In this section we present our main result, the fully dynamic algorithm.
Reference: [6] <author> N. Chiba, T. Nishizeki, S. Abe, and T. Ozawa. </author> <title> A linear algorithm for embedding planar graphs using PQ-trees. </title> <journal> J. Comput. System Sci., </journal> <volume> 30 </volume> <pages> 54-76, </pages> <year> 1985. </year>
Reference-contexts: Note that the planar embedding can be generated in O (n) time using one of the algorithms of Hopcroft and Tarjan [16] or Booth and Lueker [4] (see Chiba, Nishizeki, Abe, and Ozawa <ref> [6] </ref>). Each connected component gives rise to a planar subdivision. The initial spanning trees can be found in O (n) time with the algorithm of Cheriton and Tarjan [5].
Reference: [7] <author> F. Chin and D. Houck. </author> <title> Algorithms for updating minimum spanning trees. </title> <journal> J. Comput. System Sci., </journal> <volume> 16 </volume> <pages> 333-344, </pages> <year> 1978. </year>
Reference-contexts: Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3]. The dynamic minimum spanning tree problem has been considered by Spira and Pan [28], Chin and Houck <ref> [7] </ref>, Frederickson [10], and Gabow and Stall-mann [11]. Frederickson gives an algorithm based on "topology trees" that runs in O ( p m) time per operation on general graphs, and O ((log n) 2 ) time on plane graphs.
Reference: [8] <author> S. Even and H. Gazit. </author> <title> Updating distances in dynamic graphs. </title> <journal> Methods of Operations Research, </journal> <volume> 49 </volume> <pages> 371-387, </pages> <year> 1985. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths <ref> [1, 8, 25, 28, 34] </ref>. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3].
Reference: [9] <author> S. Even and Y. Shiloach. </author> <title> An on-line edge deletion problem. </title> <journal> J. ACM, </journal> <volume> 28 </volume> <pages> 1-4, </pages> <year> 1981. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity <ref> [9, 10, 15, 24, 26] </ref>, transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [10] <author> G. N. Frederickson. </author> <title> Data structures for on-line updating of minimum spanning trees, with applications. </title> <journal> SIAM J. Comput., </journal> <volume> 14 </volume> <pages> 781-798, </pages> <year> 1985. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity <ref> [9, 10, 15, 24, 26] </ref>, transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. <p> Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3]. The dynamic minimum spanning tree problem has been considered by Spira and Pan [28], Chin and Houck [7], Frederickson <ref> [10] </ref>, and Gabow and Stall-mann [11]. Frederickson gives an algorithm based on "topology trees" that runs in O ( p m) time per operation on general graphs, and O ((log n) 2 ) time on plane graphs. <p> Clearly, Cases 1 and 2 have no effect on the spanning trees. Now consider Case 3. It is well-known (e.g. see <ref> [10, 30] </ref>) that in this case T is no longer minimum if the weight of e is less than the weight of the maximum-cost edge d in the cycle formed by adding e to T .
Reference: [11] <author> H. N. Gabow and M. Stallmann. </author> <title> Efficient algorithms for graphic matroid intersection and parity (extended abstract). </title> <booktitle> In Automata, Languages, and Programming, 12 th Colloquium, Lecture Notes in Computer Science, </booktitle> <volume> vol. 194, </volume> <pages> pages 210-220. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3]. The dynamic minimum spanning tree problem has been considered by Spira and Pan [28], Chin and Houck [7], Frederickson [10], and Gabow and Stall-mann <ref> [11] </ref>. Frederickson gives an algorithm based on "topology trees" that runs in O ( p m) time per operation on general graphs, and O ((log n) 2 ) time on plane graphs. <p> As Frederickson notes, the minimum spanning tree for a general graph being modified on-line by edge additions alone can be main 2 tained in O (log n) amortized 1 or worst-case time per operation, using the dynamic tree data structure of Sleator and Tarjan [26]. Gabow and Stall-mann <ref> [11] </ref> improve Frederickson's bound for planar graphs to O (log n) time per operation for the case of a fixed graph with changing edge weights. Their method also uses the dynamic tree data structure. <p> Our algorithm extends the approach of Gabow and Stallmann <ref> [11] </ref>. The subdivision is allowed to contain loop edges or multiple edges. Our algorithm runs in O (m) space and O (log m) amortized time per operation, where m is the number of edges in the subdivision. <p> The approach used and the result obtained are due to Gabow and Stallmann <ref> [11, Corollary 3.1] </ref>. We present them here using our notation and in a more detailed fashion; this will help in the description of our own results. The algorithm uses both S and its dual S fl . For each dual edge we define w (e fl ) = w (e). <p> The same processing as in Case 3 can be applied, interchanging the role 11 of dual and primal tree, and using find min rather than find max. Thus Case 4 can also be handled in amortized time O (log m). Thus, the result from <ref> [11] </ref> is that when given S, a subdivision of the plane undergoing on-line changes in edge weight, a minimum spanning tree of S can be maintained in O (log m) amortized time per operation and O (m) space, where m is the number of edges.
Reference: [12] <author> A. V. Goldberg, M. D. Grigoriadis, and R. E. Tarjan. </author> <title> Use of dynamic trees in a network simplex algorithm for the maximum flow problem. </title> <journal> Math. Prog., </journal> <note> to appear. </note>
Reference-contexts: If T has n nodes and hence n 1 edges, then T 0 has 2n 2 nodes. Note that every node in T 0 has degree at most three. A similar idea has been used by Goldberg, Grigoriadis and Tarjan <ref> [12] </ref> in a different extension of dynamic trees that supports computing minima and maxima over subtrees. (Our extension requires some additional ideas.) Figure 4 gives an example of an edge-ordered tree. The transformed tree T 0 is maintained with a standard Sleator-Tarjan dynamic tree.
Reference: [13] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of voronoi diagrams. </title> <journal> ACM Trans. on Graphics, </journal> <volume> 4 </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: This paper addresses two questions: first, what is the correct framework to use in describing a dynamic plane graph, and second, how does one implement the desired operations? To describe and manipulate the dynamic plane graph, we use the subdivision representation scheme of Guibas and Stolfi <ref> [13] </ref>, which we describe in more detail in Section 2. This scheme provides a pair of simple, powerful primitives from which more complicated operations such as the insertion or deletion of edges can be built. Our spanning tree algorithm is built on top of this framework. <p> This embedding is called the dual subdivision S fl . Figure 1 gives an example of a subdivision and its dual. Guibas and Stolfi <ref> [13] </ref> propose the following notation (and corresponding data structure) for describing a subdivision S. Each undirected edge e = fu; vg of the S can be directed in two ways. <p> On the other hand, for a loop edge e both e and sym (e) belong to the edge ring of vertex orig (e). Next, we discuss the implementation of dynamic operations that affect the structure of planar subdivisions. Guibas and Stolfi <ref> [13] </ref> introduce two modification primitives, make edge, which increases the complexity of the structure by adding new unconnected vertices and edges, and splice, which changes the topology of the structure but does not increase its complexity.
Reference: [14] <author> F. Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA., </address> <year> 1972. </year>
Reference-contexts: Let G be a planar graph. An embedding of G generates a collection of subdivisions, one for each connected component of the graph. If G is triconnected then the topological structure of its embedding is unique up to mirror image <ref> [14, pp. 105] </ref>, but in general there are multiple embeddings possible for a given planar graph. Using the topological incidence relationship between edges and faces of S, we define the dual graph G fl = (F; E fl ) [14]. <p> Using the topological incidence relationship between edges and faces of S, we define the dual graph G fl = (F; E fl ) <ref> [14] </ref>. Each face of S gives rise to a vertex in F . Dual vertices f 1 and f 2 are connected by a dual edge e fl whenever primal edge e is adjacent to the faces of S corresponding to f 1 and f 2 .
Reference: [15] <author> D. Harel. </author> <title> On-line maintenance of the connected components of dynamic graphs. </title> <type> Unpublished manuscript, </type> <year> 1982. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity <ref> [9, 10, 15, 24, 26] </ref>, transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [16] <author> J. Hopcroft and R. E. Tarjan. </author> <title> Efficient planarity testing. </title> <journal> J. ACM, </journal> <volume> 21 </volume> <pages> 549-568, </pages> <year> 1974. </year>
Reference-contexts: Let G be a plane graph of n vertices (and hence O (n) edges) undergoing changes in edge weight. Note that the planar embedding can be generated in O (n) time using one of the algorithms of Hopcroft and Tarjan <ref> [16] </ref> or Booth and Lueker [4] (see Chiba, Nishizeki, Abe, and Ozawa [6]). Each connected component gives rise to a planar subdivision. The initial spanning trees can be found in O (n) time with the algorithm of Cheriton and Tarjan [5].
Reference: [17] <author> T. Ibaraki and N. Katoh. </author> <title> On-line computation of transitive closure for graphs. </title> <journal> Inf. Process. Lett., </journal> <volume> 16 </volume> <pages> 95-97, </pages> <year> 1983. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure <ref> [17, 18, 19, 20, 21, 34, 23] </ref>, and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [18] <author> G. F. </author> <title> Italiano. Amortized efficiency of a path retrieval data structure. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 48 </volume> <pages> 273-281, </pages> <year> 1986. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure <ref> [17, 18, 19, 20, 21, 34, 23] </ref>, and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [19] <author> G. F. </author> <title> Italiano. Finding paths and deleting edges in directed acyclic graphs. </title> <journal> Inf. Process. Lett., </journal> <volume> 28 </volume> <pages> 5-11, </pages> <year> 1988. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure <ref> [17, 18, 19, 20, 21, 34, 23] </ref>, and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [20] <author> G. F. Italiano, A. M. Spaccamela, and U. Nanni. </author> <title> Dynamic data structures for series parallel digraphs. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, (WADS 89), Lecture Notes in Computer Science, </booktitle> <volume> vol. 382, </volume> <pages> pages 352-372. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure <ref> [17, 18, 19, 20, 21, 34, 23] </ref>, and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [21] <author> J. A. La Poutre and J. van Leeuwen. </author> <title> Maintenance of transitive closure and transitive reduction of graphs. </title> <booktitle> In Proc. International Workshop on Graph-Theoretic Concepts in Computer Science, (WG 87), Lecture Notes in Computer Science, </booktitle> <volume> vol. 314, </volume> <pages> pages 106-120. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure <ref> [17, 18, 19, 20, 21, 34, 23] </ref>, and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [22] <author> J. Paul and W. Simon. </author> <title> Decision trees and random access machines. </title> <booktitle> In Symposium uber Logik und Algolrithmik, </booktitle> <year> 1980. </year> <note> Also in K. </note> <editor> Mehlhorn, </editor> <booktitle> Sorting and Searching, </booktitle> <pages> pages 85-97, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: Decrease the weight of e 0 to 1. Whichever edge leaves the tree is the edge of largest weight. Repeatedly lowering the weight of the remaining edge of largest weight gives the numbers sorted in reverse order. Paul and Simon <ref> [22] </ref> have shown that any unit-cost random access sorting algorithm whose operations include addition, subtraction, multiplication, and comparison with 0, but not division or bit-wise Boolean operations, takes (n log n) worst-case time to sort n numbers.
Reference: [23] <author> F. P. Preparata and R. Tamassia. </author> <title> Fully dynamic techniques for point location and transitive closure in planar structures. </title> <booktitle> In Proc. 29th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 558-567, </pages> <year> 1988. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure <ref> [17, 18, 19, 20, 21, 34, 23] </ref>, and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [24] <author> J. H. Reif. </author> <title> A topological approach to dynamic graph connectivity. </title> <journal> Inf. Process. Lett., </journal> <volume> 25 </volume> <pages> 65-70, </pages> <year> 1987. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity <ref> [9, 10, 15, 24, 26] </ref>, transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams.
Reference: [25] <author> H. Rohnert. </author> <title> A dynamization of the all pairs least cost path problem. </title> <booktitle> In Proc. 2nd Annual Symp. on Theoretical Aspects of Computer Science, (STACS 85), Lecture Notes in Computer Science, </booktitle> <volume> vol. 182, </volume> <pages> pages 279-286. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths <ref> [1, 8, 25, 28, 34] </ref>. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3].
Reference: [26] <author> D. D. Sleator and R. E. Tarjan. </author> <title> A data structure for dynamic trees. </title> <journal> J. Comput. System Sci., </journal> <volume> 26 </volume> <pages> 362-391, </pages> <year> 1983. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity <ref> [9, 10, 15, 24, 26] </ref>, transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. <p> As Frederickson notes, the minimum spanning tree for a general graph being modified on-line by edge additions alone can be main 2 tained in O (log n) amortized 1 or worst-case time per operation, using the dynamic tree data structure of Sleator and Tarjan <ref> [26] </ref>. Gabow and Stall-mann [11] improve Frederickson's bound for planar graphs to O (log n) time per operation for the case of a fixed graph with changing edge weights. Their method also uses the dynamic tree data structure. <p> To extend this scheme to dynamic subdivisions, each minimum spanning tree is maintained with a variant of the dynamic tree data structure of Sleator and Tarjan <ref> [26, 27] </ref> called an edge-ordered dynamic tree. This data structure is used to represent free trees in which for each vertex there is a total ordering of the incident edges. <p> The edge-ordered tree also finds use in the on-line planarity testing algorithm of Di Battista and Tamassia [2, 3]. Thus our data structure is fairly general and powerful. The algorithms can be made to run in worst-case time O (log m) with the biased tree implementation of dynamic trees <ref> [26] </ref>. We also argue that in our machine model, any algorithm must spend (log n) amortized time per operation; we do this by reduction to sorting. <p> Lemma 1 implies that after a change in edge weight, correct updating of the primal spanning tree automatically results in correct updating of the dual, and vice versa. To perform the updates efficiently, the dynamic tree data structure of Sleator and Tarjan <ref> [26, 27] </ref> is used. <p> The above time bound can be made worst-case with the biased tree implementation of the dynamic tree data structure <ref> [26] </ref>. Let G be a plane graph of n vertices (and hence O (n) edges) undergoing changes in edge weight. <p> The initial ordered list ffefi becomes fiffe. Add cost (v; x): Add real value x to cost (v). Note that this differs from the definition of add cost in <ref> [26, 27] </ref>, since only node v is affected by the operation. The edge-ordered tree data structure also supports Evert (v), Cut (v), Find cost (v), Find root (v), Find min (v) (Find max (v)), Find parent (v), and Find lca (u; v). <p> Again, the time bound can be made worst-case by using the biased-tree implementation of dynamic trees <ref> [26] </ref>. <p> The entire range of dynamic tree operations described above and in references <ref> [26, 27] </ref> is available for use with the spanning trees, making the overall data structure quite powerful and flexible. 20 4 A Lower Bound Let A be an algorithm for maintaining a minimum spanning tree of an arbitrary edge-weighted (multi)graph G.
Reference: [27] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Self-adjusting binary search trees. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 652-686, </pages> <year> 1985. </year>
Reference-contexts: To extend this scheme to dynamic subdivisions, each minimum spanning tree is maintained with a variant of the dynamic tree data structure of Sleator and Tarjan <ref> [26, 27] </ref> called an edge-ordered dynamic tree. This data structure is used to represent free trees in which for each vertex there is a total ordering of the incident edges. <p> Lemma 1 implies that after a change in edge weight, correct updating of the primal spanning tree automatically results in correct updating of the dual, and vice versa. To perform the updates efficiently, the dynamic tree data structure of Sleator and Tarjan <ref> [26, 27] </ref> is used. <p> The initial ordered list ffefi becomes fiffe. Add cost (v; x): Add real value x to cost (v). Note that this differs from the definition of add cost in <ref> [26, 27] </ref>, since only node v is affected by the operation. The edge-ordered tree data structure also supports Evert (v), Cut (v), Find cost (v), Find root (v), Find min (v) (Find max (v)), Find parent (v), and Find lca (u; v). <p> The entire range of dynamic tree operations described above and in references <ref> [26, 27] </ref> is available for use with the spanning trees, making the overall data structure quite powerful and flexible. 20 4 A Lower Bound Let A be an algorithm for maintaining a minimum spanning tree of an arbitrary edge-weighted (multi)graph G.
Reference: [28] <author> P. M. Spira and A. Pan. </author> <title> On finding and updating spanning trees and shortest paths. </title> <journal> SIAM J. Comput., </journal> <volume> 4 </volume> <pages> 375-380, </pages> <year> 1975. </year> <month> 24 </month>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths <ref> [1, 8, 25, 28, 34] </ref>. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3]. <p> Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3]. The dynamic minimum spanning tree problem has been considered by Spira and Pan <ref> [28] </ref>, Chin and Houck [7], Frederickson [10], and Gabow and Stall-mann [11]. Frederickson gives an algorithm based on "topology trees" that runs in O ( p m) time per operation on general graphs, and O ((log n) 2 ) time on plane graphs.
Reference: [29] <author> R. Tamassia. </author> <title> A dynamic data structure for planar graph embedding. </title> <booktitle> In Proc. 15th Int. Conf. on Automata, Languages, and Programming, (ICALP 1988), Lecture Notes in Computer Science, </booktitle> <volume> vol. 317, </volume> <pages> pages 576-590. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph <ref> [29] </ref> and for incremental planarity testing [2, 3]. The dynamic minimum spanning tree problem has been considered by Spira and Pan [28], Chin and Houck [7], Frederickson [10], and Gabow and Stall-mann [11]. <p> We can similarly implement other standard operations such as delete edge, expand, and contract (see <ref> [29] </ref>). Let G denote the planar multigraph induced by the vertices and edges of a collection of subdivisions. Each subdivision induces a connected component of G. <p> This suggests that it may be possible to combine the auxiliary functions into the primary dynamic tree and eliminate the auxiliary data structures entirely. We are currently unable to do so, however. In our approach to the dynamic spanning tree problem, modification operations are specified by edges. Tamassia <ref> [29] </ref> gives a data structure for maintaining a dynamic embedding of a biconnected planar graph that can test in O (log n) time whether two vertices u and v lie on a common face.
Reference: [30] <author> R. E. Tarjan. </author> <title> Sensitivity analysis of minimum spanning trees and shortest path trees. </title> <journal> Inf. Process. Lett., </journal> <volume> 14 </volume> <pages> 30-33, </pages> <year> 1982. </year>
Reference-contexts: Clearly, Cases 1 and 2 have no effect on the spanning trees. Now consider Case 3. It is well-known (e.g. see <ref> [10, 30] </ref>) that in this case T is no longer minimum if the weight of e is less than the weight of the maximum-cost edge d in the cycle formed by adding e to T .
Reference: [31] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms. </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, PA., </address> <year> 1983. </year>
Reference-contexts: By maintaining each node path in an auxiliary balanced binary 16 tree such as a red-black tree or splay tree (see <ref> [31, pp. 45-53] </ref>), Find node (s) can be performed in O (log n) time, either worst-case or amortized, depending on the choice of data structure.
Reference: [32] <author> R. E. Tarjan. </author> <title> Amortized computational complexity. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 6 </volume> <pages> 306-318, </pages> <year> 1985. </year>
Reference-contexts: Depending upon the needs of the application, this repertoire of operations can be used to test membership of an edge in the spanning 1 The amortized cost of an operation is the cost of a worst-case sequence of operations divided by the number of operations in the sequence. See <ref> [32] </ref> for a general discussion of amortization. 3 forest in O (1) time, and to determine the spanning tree containing a given vertex, or find the edge of maximum or minimum weight on the tree path between two vertices, in O (log m) time.
Reference: [33] <author> W. T. Tutte. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, CA., </address> <year> 1984. </year>
Reference-contexts: The algorithm uses both S and its dual S fl . For each dual edge we define w (e fl ) = w (e). The following lemma (theorem XI.6 of <ref> [33] </ref>) is the basis for 8 the algorithm. Lemma 1 [33, pp. 289] Given a spanning tree T for S, let T fl be the set of dual edges fe fl j e is not in T g. Then T fl is a spanning tree for S fl . <p> The algorithm uses both S and its dual S fl . For each dual edge we define w (e fl ) = w (e). The following lemma (theorem XI.6 of [33]) is the basis for 8 the algorithm. Lemma 1 <ref> [33, pp. 289] </ref> Given a spanning tree T for S, let T fl be the set of dual edges fe fl j e is not in T g. Then T fl is a spanning tree for S fl .
Reference: [34] <author> D. Yellin. </author> <title> A dynamic transitive closure algorithm. </title> <type> Technical report, </type> <institution> IBM Research Division, T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <year> 1988. </year>
Reference-contexts: Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure <ref> [17, 18, 19, 20, 21, 34, 23] </ref>, and shortest paths [1, 8, 25, 28, 34]. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. <p> Dynamic problems on graphs have been extensively studied. Several algorithms have been proposed for maintaining fundamental structural information about dynamic graphs, such as connectivity [9, 10, 15, 24, 26], transitive closure [17, 18, 19, 20, 21, 34, 23], and shortest paths <ref> [1, 8, 25, 28, 34] </ref>. Dynamic planar graphs arise in communication networks, graphics, and VLSI design, and they occur in algorithms that build planar subdivisions such as Voronoi diagrams. Algorithms have been proposed for maintaining the embedding of a planar graph [29] and for incremental planarity testing [2, 3].
References-found: 34

