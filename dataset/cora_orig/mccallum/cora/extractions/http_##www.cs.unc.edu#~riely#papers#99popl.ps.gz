URL: http://www.cs.unc.edu/~riely/papers/99popl.ps.gz
Refering-URL: http://www.cs.unc.edu/~riely/papers.html
Root-URL: http://www.cs.unc.edu
Title: Trust and Partial Typing in Open Systems of Mobile Agents (Extended Abstract)  
Author: James Riely Matthew Hennessy 
Abstract: We present a partially-typed semantics for Dp, a distributed p-calculus. The semantics is designed for mobile agents in open distributed systems in which some sites may harbor malicious intentions. Nonetheless, the semantics guarantees traditional type-safety properties at good locations by using a mixture of static and dynamic type-checking. We show how the semantics can be extended to allow trust between sites, improving performance and expressiveness without compromising type-safety. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi. </author> <title> Secrecy by typing in security protocols. </title> <booktitle> In Proceedings of TACS97, volume 1218 of Lecture Notes in Computer Science, </booktitle> <pages> pages 611637. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Another area of related work has to do with static methods for analyzing the security of information flow <ref> [9, 1, 8, 26, 11] </ref>. Although this area of research share our general aims there is very little technical overlap with our approach to resource protection in open systems. Acknowledgments We wish to thank Alan Jeffrey for many interesting conversations and the referees for their close reading of the text.
Reference: [2] <author> M. Abadi and A. D. Gordon. </author> <title> A calculus for cryptographic protocols: The spi calculus. </title> <journal> Information and Computation, </journal> <note> To appear. Available as SRC Research Report 149 (1998). </note>
Reference-contexts: Any treatment of open systems must assume some underlying security mechanisms for communication between sites, or locations. One approach would be to add security features directly in the language, as in Abadi and Gordon's Spi calculus <ref> [2] </ref>. In such languages code signatures and nonces are directly manipulable as program objects. Here we take a more abstract approach, presenting a secure semantics for a language without explicit security features.
Reference: [3] <author> R. Amadio and S. Prasad. </author> <title> Localities and failures. </title> <booktitle> In Proc. 14th Foundations of Software Technology and Theoretical Computer Science, volume 880 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Several other distributed variants of the p-calculus have been defined, and it is informative to see how partial typing might be added to these languages. Syntactically, Dp is most similar to the language of Amadio and Prasad <ref> [3, 4] </ref>, which also uses a goto operator for thread movement, written spawn (`; P). However, in Amadio and Prasad's language, the set of resources available to a thread does not vary as the thread moves about the network.
Reference: [4] <author> Roberto Amadio. </author> <title> An asynchronous model of locality, failure, and process mobility. In COORDINATION '97, </title> <booktitle> volume 1282 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: For example locfputi:reshinti; geti:reshinti; putl:reshloci; getl:reshlocig is the type of a location with four resources, two for manipulating integers and two for manipulating location names. A feature which distinguishes Dp from related languages <ref> [10, 4, 25] </ref> is that resource names have only local significance, i.e. resource names are unique locally, but not globally across the network. To formalize the notion of bad sites in Dp, we add a new location type, lbad, to the language. <p> Several other distributed variants of the p-calculus have been defined, and it is informative to see how partial typing might be added to these languages. Syntactically, Dp is most similar to the language of Amadio and Prasad <ref> [3, 4] </ref>, which also uses a goto operator for thread movement, written spawn (`; P). However, in Amadio and Prasad's language, the set of resources available to a thread does not vary as the thread moves about the network. <p> The fact that resource names are allowed to occur at multiple locations is crucial to the success of our strategy for dynamic typechecking. It would be difficult to formulate our approach under the assumption that each name has a unique location (as, for example, in <ref> [4] </ref>). For example, suppose that the resource a was uniquely located at k. Then the agent mJgo `: b!hm [a]iK at the bad site m could hijack a using (t-self 2 ), convincing ` that a was uniquely located at m, rather than some good location k.
Reference: [5] <author> L. Cardelli and A. D. Gordon. </author> <title> Mobile ambients. </title> <editor> In Maurice Nivat, editor, </editor> <booktitle> Proc. FOSSACS'98, International Conference on Foundations of Software Science and Computation Structures, volume 1378 of Lecture Notes in Computer Science, </booktitle> <pages> pages 140155. </pages> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: In Dp, the type system ensures that the extent of resource names in subject position is local, i.e. resources may be referenced at remote sites, but may only be used locally. Cardelli and Gordon's ambient calculus <ref> [5] </ref>, on the other hand, appears to be amenable to partial typing since ambient movement is a local operation; thus the problem of universal extent does not arise.
Reference: [6] <author> Luca Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> Computing Systems, </booktitle> <address> 8(1):2759, </address> <month> January </month> <year> 1995. </year> <note> A preliminary version appeared in Proceedings of the 22nd ACM Symposium on Principles of Programming. </note>
Reference-contexts: The former would be similar to our locations, the later, our resources. This discipline would open the possibility of typing code during in and out operations, rather than open. Several studies have addressed the issue of static typing for languages with remote resources; some recent papers are <ref> [20, 6, 24] </ref>. Perhaps the work closest to ours is that of Knabe [14], who has implemented an extension of Facile which supports mobile agents. The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however.
Reference: [7] <author> Luca Cardelli and Andrew Gordon. </author> <title> Types for mobile ambients. </title> <type> Draft, </type> <year> 1998. </year> <note> Available from http://www.luca.demon.co.uk/. </note>
Reference-contexts: The typing system of Dp is based on the original sorting system of the p-calculus [16], and this sorting system has recently been extended to the ambient calculus <ref> [7] </ref>. Whereas locations in Dp have a straightforward analog in implementations they correspond to address spaces the notion of ambient is more general, adding expressiveness while blurring the distinction between agent movement and agent interaction.
Reference: [8] <author> Mads Dam. </author> <title> Proving trust in systems of second-order processes. </title> <booktitle> In Hawaii International Conference on Systems Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1998. </year>
Reference-contexts: Another area of related work has to do with static methods for analyzing the security of information flow <ref> [9, 1, 8, 26, 11] </ref>. Although this area of research share our general aims there is very little technical overlap with our approach to resource protection in open systems. Acknowledgments We wish to thank Alan Jeffrey for many interesting conversations and the referees for their close reading of the text.
Reference: [9] <author> D. Denning. </author> <title> Certification of programs for secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 20:504513, </volume> <year> 1977. </year>
Reference-contexts: Another area of related work has to do with static methods for analyzing the security of information flow <ref> [9, 1, 8, 26, 11] </ref>. Although this area of research share our general aims there is very little technical overlap with our approach to resource protection in open systems. Acknowledgments We wish to thank Alan Jeffrey for many interesting conversations and the referees for their close reading of the text.
Reference: [10] <author> C. Fournet, G. Gonthier, J.J. Levy, L. Marganget, and D. Remy. </author> <title> A calculus of mobile agents. </title> <editor> In U. Montanari and V. Sassone, editors, </editor> <booktitle> CONCUR: Proceedings of the International Conference on Concurrency Theory, volume 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 406421, </pages> <address> Pisa, </address> <month> August </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: For example locfputi:reshinti; geti:reshinti; putl:reshloci; getl:reshlocig is the type of a location with four resources, two for manipulating integers and two for manipulating location names. A feature which distinguishes Dp from related languages <ref> [10, 4, 25] </ref> is that resource names have only local significance, i.e. resource names are unique locally, but not globally across the network. To formalize the notion of bad sites in Dp, we add a new location type, lbad, to the language. <p> In particular entry to ` by an agent from k may subsequently be blocked because ` mistakenly believes that the unique location of a is m. The join calculus of Fournet, Gonthier, Levy, Marganget and Remy <ref> [10] </ref> shares many of these properties. Whereas Amadio's language adds thread movement to message movement, however, the join calculus adds location movement. Unfortunately this does not help combat the problems outlined above, which result from the universal extent of resource names in both subject and object position.
Reference: [11] <author> Nevin Heintz and Jon G. Riecke. </author> <title> The SLam calculus: Programming with secrecy and integrity. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: Another area of related work has to do with static methods for analyzing the security of information flow <ref> [9, 1, 8, 26, 11] </ref>. Although this area of research share our general aims there is very little technical overlap with our approach to resource protection in open systems. Acknowledgments We wish to thank Alan Jeffrey for many interesting conversations and the referees for their close reading of the text.
Reference: [12] <author> Matthew Hennessy and James Riely. </author> <title> Resource access control in systems of mobile agents. </title> <institution> Computer Science Technical Report 2/98, University of Sussex, </institution> <year> 1998. </year> <note> Extended abstract in HLCL '98. Available from http://www.elsevier.nl/locate/entcs/ volume16.3.html. </note>
Reference-contexts: 1 Introduction In <ref> [12] </ref> we presented a type system for controlling the use of resources in a distributed system, or network. In particular it guarantees that resource access is always safe, e.g. integer resources are always accessed with integers and string resources are always accessed with strings. <p> We study these issues in the formal setting of Dp, a distributed variant of the p-calculus [17]. The calculus was introduced in [23], but here we use the more recent formulation given in <ref> [12] </ref>. In Dp resources reside at locations and mobile agents may move from site to site, interacting via local resources to affect computations. The typing system of Dp is based on location types which describe the resources available at a site. <p> For a full treatment of the language, including many examples, see <ref> [12] </ref>. 2.1 Syntax The syntax is given in Table 1, although discussion of types, T, is postponed to Section 2.3. <p> In this paper we use the simple type language from <ref> [12, x5] </ref>. <p> This is convenient for typing, but in the syntax of threads and networks, given in Table 1, we restrict all types to be closed, i.e. no variables can appear in location types in terms. The subtyping preorder (T &lt; : S) is discussed at length in <ref> [12] </ref>. On base types and channel types there is no nontrivial subtyping; for example, reshTi &lt; : reshT 0 i if and only if T = T 0 . <p> Further examples are given in <ref> [12] </ref> where we argue that the more general rule is crucial for typing many practical applications. The typing system satisfies several standard properties such as type specialization, weakening and a substitution lemma, as described in [12]. The following result establishes the fact that well-typedness is preserved by reduction. <p> Further examples are given in <ref> [12] </ref> where we argue that the more general rule is crucial for typing many practical applications. The typing system satisfies several standard properties such as type specialization, weakening and a substitution lemma, as described in [12]. The following result establishes the fact that well-typedness is preserved by reduction. Together with a Type Safety theorem, again described in [12], this ensures that well typed terms are free of runtime errors throughout their execution. Theorem 3 (Subject Reduction for the Standard Semantics). <p> The typing system satisfies several standard properties such as type specialization, weakening and a substitution lemma, as described in <ref> [12] </ref>. The following result establishes the fact that well-typedness is preserved by reduction. Together with a Type Safety theorem, again described in [12], this ensures that well typed terms are free of runtime errors throughout their execution. Theorem 3 (Subject Reduction for the Standard Semantics). <p> Here we describe the runtime errors captured by our system, which can be informally described as misuse of resources at good sites. Often the formulation of runtime errors is quite cumbersome as it involves the invention of a tagged version of the language, see <ref> [12, 21] </ref>. However in this case the presence of filters makes it straightforward. In Table 6 we define, for each location ` a unary predicate err ` ! over networks. <p> Finally, we added webs of trust to the language, reducing the need for dynamic typechecking while retaining type safety at good sites. The presentation of Dp given here is very different from that in [23] but is only a minor variant on that in <ref> [12] </ref>; for example, we have added base types and moved some of the semantic rules from the structural equivalence to the reduction relation. Most of the changes are stylistic rather than substantive. Two of the changes, however, are essential for the treatment of partial typing.
Reference: [13] <author> Matthew Hennessy and James Riely. </author> <title> Type-safe execution of mobile agents in anonymous networks. </title> <institution> Computer Science Technical Report 3/98, University of Sussex, </institution> <year> 1998. </year> <note> Available from http://www. cogs.susx.ac.uk/. </note>
Reference-contexts: The full development is given in Section 4, where we prove Subject Reduction and Type Safety theorems for this semantics, ensuring that resource access at good locations is always type-safe. This approach should be contrasted with that of <ref> [13] </ref>, which gives an adequate semantics for networks in which the authority of incoming agents cannot reliably be determined. One drawback of this framework is that every agent must be dynamically typechecked when moving from a site to another. <p> In each of these sections, the main results are Subject Reduction (for the partial typing relation) and Type Safety. It is worth contrasting this approach with the purely local approach adopted for anonymous networks in <ref> [13] </ref>. In anonymous networks, the authority of incoming threads is not known. The semantics of [13] uses a weaker typing system requiring consistency only of local resource types. Thus, in that work, (2) is taken to be well-typed, with subject reduction failing only in the move from (3) to (4). <p> It is worth contrasting this approach with the purely local approach adopted for anonymous networks in <ref> [13] </ref>. In anonymous networks, the authority of incoming threads is not known. The semantics of [13] uses a weaker typing system requiring consistency only of local resource types. Thus, in that work, (2) is taken to be well-typed, with subject reduction failing only in the move from (3) to (4).
Reference: [14] <author> Frederick Coleville Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1995. </year>
Reference-contexts: This discipline would open the possibility of typing code during in and out operations, rather than open. Several studies have addressed the issue of static typing for languages with remote resources; some recent papers are [20, 6, 24]. Perhaps the work closest to ours is that of Knabe <ref> [14] </ref>, who has implemented an extension of Facile which supports mobile agents. The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however.
Reference: [15] <author> Dexter Kozen. </author> <title> Efficient code certification. </title> <type> Technical Report 98-1661, </type> <institution> Cornell University, Department of Computer Science, </institution> <year> 1988. </year> <note> Available from http://www.cs.cornell.edu/kozen/secure. </note>
Reference-contexts: The object of this paper is to formalize a protection policy for good sites against such malicious attacks. As in <ref> [27, 19, 15, 18] </ref>, the basic idea is to require that code be verified before it is loaded locally. <p> The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however. On the other hand, Necula's proof carrying code [19] and related techniques <ref> [27, 15, 18] </ref> address the problem of dynamic typechecking in open systems, but do not consider the subject of remote resources. Another area of related work has to do with static methods for analyzing the security of information flow [9, 1, 8, 26, 11].
Reference: [16] <author> Robin Milner. </author> <title> The polyadic p-calculus: a tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, UK, </institution> <month> October </month> <year> 1991. </year> <title> Also in Logic and Algebra of Specification, </title> <editor> ed. F. L. Bauer, W. Brauer and H. Schwichtenberg, </editor> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The main syntactic categories of the language are as follows: * Threads, PR, are terms of the ordinary polyadic p-calculus <ref> [16] </ref> with additional constructs for agent movement and restriction of locations. * Agents, kJPK, are located threads. * Networks, MN, are collections of agents combined using the static combinators of composition and restriction. <p> Cardelli and Gordon's ambient calculus [5], on the other hand, appears to be amenable to partial typing since ambient movement is a local operation; thus the problem of universal extent does not arise. The typing system of Dp is based on the original sorting system of the p-calculus <ref> [16] </ref>, and this sorting system has recently been extended to the ambient calculus [7]. Whereas locations in Dp have a straightforward analog in implementations they correspond to address spaces the notion of ambient is more general, adding expressiveness while blurring the distinction between agent movement and agent interaction.
Reference: [17] <author> Robin Milner, Joachim Parrow, and David Walker. </author> <title> A calculus of mobile processes, Parts I and II. Information and Computation, </title> <address> 100:177, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Such type violations may lead to core dumps, information leakage or the spread of viruses and other virtual pestilence. We study these issues in the formal setting of Dp, a distributed variant of the p-calculus <ref> [17] </ref>. The calculus was introduced in [23], but here we use the more recent formulation given in [12]. In Dp resources reside at locations and mobile agents may move from site to site, interacting via local resources to affect computations. <p> A term with no free variables is closed. We write Pfj u =Xjg for the capture-avoiding substitution of u for X in P. We adopt standard abbreviations from the p-calculus <ref> [17] </ref>, e.g. dropping final occurrences of stop, writing u 1 ; ::; u n as eu, and identifying terms up to renaming of bound names and variables.
Reference: [18] <author> Greg Morrisett, David Walker, Karl Crary, and Neal Glew. </author> <title> From System F to typed assembly language. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 8597, </pages> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: The object of this paper is to formalize a protection policy for good sites against such malicious attacks. As in <ref> [27, 19, 15, 18] </ref>, the basic idea is to require that code be verified before it is loaded locally. <p> The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however. On the other hand, Necula's proof carrying code [19] and related techniques <ref> [27, 15, 18] </ref> address the problem of dynamic typechecking in open systems, but do not consider the subject of remote resources. Another area of related work has to do with static methods for analyzing the security of information flow [9, 1, 8, 26, 11].
Reference: [19] <author> George Necula. </author> <title> Proof-carrying code. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: The object of this paper is to formalize a protection policy for good sites against such malicious attacks. As in <ref> [27, 19, 15, 18] </ref>, the basic idea is to require that code be verified before it is loaded locally. <p> The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however. On the other hand, Necula's proof carrying code <ref> [19] </ref> and related techniques [27, 15, 18] address the problem of dynamic typechecking in open systems, but do not consider the subject of remote resources. Another area of related work has to do with static methods for analyzing the security of information flow [9, 1, 8, 26, 11].
Reference: [20] <author> Atsuhi Ohori and Kazuhiko Kato. </author> <title> Semantics for communication primitives in a polymorphic language. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charleston, </address> <month> January </month> <year> 1993. </year> <note> ACM Press. </note>
Reference-contexts: The former would be similar to our locations, the later, our resources. This discipline would open the possibility of typing code during in and out operations, rather than open. Several studies have addressed the issue of static typing for languages with remote resources; some recent papers are <ref> [20, 6, 24] </ref>. Perhaps the work closest to ours is that of Knabe [14], who has implemented an extension of Facile which supports mobile agents. The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however.
Reference: [21] <author> Benjamin Pierce and Davide Sangiorgi. </author> <title> Typing and subtyping for mobile processes. </title> <note> Mathematical Structures in Computer Science, 6(5):409454, 1996. Extended abstract in LICS '93. </note>
Reference-contexts: Here we describe the runtime errors captured by our system, which can be informally described as misuse of resources at good sites. Often the formulation of runtime errors is quite cumbersome as it involves the invention of a tagged version of the language, see <ref> [12, 21] </ref>. However in this case the presence of filters makes it straightforward. In Table 6 we define, for each location ` a unary predicate err ` ! over networks.
Reference: [22] <author> James Riely and Matthew Hennessy. </author> <title> Trust and partial typing in open systems of mobile agents. </title> <institution> Computer Science Technical Report 4/98, University of Sussex, </institution> <year> 1998. </year> <note> Available from http://www.cogs. susx.ac.uk/. </note>
Reference-contexts: In Section 5 this framework is extended to include trust. The paper ends with a brief discussion of related work. In this extended abstract all proofs are omitted, as is much of the discussion. The full version <ref> [22] </ref> is available at ftp://ftp. cogs.susx.ac.uk/pub/reports/compsci/cs0498.ps.Z.
Reference: [23] <author> James Riely and Matthew Hennessy. </author> <title> A typed language for distributed mobile processes. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: Such type violations may lead to core dumps, information leakage or the spread of viruses and other virtual pestilence. We study these issues in the formal setting of Dp, a distributed variant of the p-calculus [17]. The calculus was introduced in <ref> [23] </ref>, but here we use the more recent formulation given in [12]. In Dp resources reside at locations and mobile agents may move from site to site, interacting via local resources to affect computations. <p> Finally, we added webs of trust to the language, reducing the need for dynamic typechecking while retaining type safety at good sites. The presentation of Dp given here is very different from that in <ref> [23] </ref> but is only a minor variant on that in [12]; for example, we have added base types and moved some of the semantic rules from the structural equivalence to the reduction relation. Most of the changes are stylistic rather than substantive.
Reference: [24] <author> Tatsurou Sekiguchi and Akinori Yonezawa. </author> <title> A calculus with code mobility. </title> <booktitle> In FMOODS '97, </booktitle> <address> Canterbury, July 1997. </address> <publisher> Chapman and Hall. </publisher>
Reference-contexts: The former would be similar to our locations, the later, our resources. This discipline would open the possibility of typing code during in and out operations, rather than open. Several studies have addressed the issue of static typing for languages with remote resources; some recent papers are <ref> [20, 6, 24] </ref>. Perhaps the work closest to ours is that of Knabe [14], who has implemented an extension of Facile which supports mobile agents. The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however.
Reference: [25] <author> Peter Sewell. </author> <title> Global/local subtyping and capability inference for a distributed p-calculus. </title> <booktitle> In Proceedings of ICALP '98: International Colloquium on Automata, Languages and Programming (Aarhus), number 1443 in LNCS, </booktitle> <pages> pages 695706. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1998. </year>
Reference-contexts: For example locfputi:reshinti; geti:reshinti; putl:reshloci; getl:reshlocig is the type of a location with four resources, two for manipulating integers and two for manipulating location names. A feature which distinguishes Dp from related languages <ref> [10, 4, 25] </ref> is that resource names have only local significance, i.e. resource names are unique locally, but not globally across the network. To formalize the notion of bad sites in Dp, we add a new location type, lbad, to the language.
Reference: [26] <author> Geoffrey Smith and Dennis Volpano. </author> <title> Secure information flow in a multi-threaded imperative language. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: Another area of related work has to do with static methods for analyzing the security of information flow <ref> [9, 1, 8, 26, 11] </ref>. Although this area of research share our general aims there is very little technical overlap with our approach to resource protection in open systems. Acknowledgments We wish to thank Alan Jeffrey for many interesting conversations and the referees for their close reading of the text.
Reference: [27] <author> Frank Yellin. </author> <title> Low-level security in Java. </title> <note> In WWW4 Conference, 1995. Available from http://www.javasoft.com/ sfaq/verifier.html. </note>
Reference-contexts: The object of this paper is to formalize a protection policy for good sites against such malicious attacks. As in <ref> [27, 19, 15, 18] </ref>, the basic idea is to require that code be verified before it is loaded locally. <p> The main extensions are remote signatures and proxy structures, which are somewhat related to our location types. None of these works address open systems, however. On the other hand, Necula's proof carrying code [19] and related techniques <ref> [27, 15, 18] </ref> address the problem of dynamic typechecking in open systems, but do not consider the subject of remote resources. Another area of related work has to do with static methods for analyzing the security of information flow [9, 1, 8, 26, 11].
References-found: 27

