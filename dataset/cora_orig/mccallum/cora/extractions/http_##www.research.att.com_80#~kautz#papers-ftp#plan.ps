URL: http://www.research.att.com:80/~kautz/papers-ftp/plan.ps
Refering-URL: 
Root-URL: 
Email: fkautz, selmang@research.att.com  
Title: Pushing the Envelope: Planning, Propositional Logic, and Stochastic Search  
Author: Henry Kautz and Bart Selman 
Web: http://www.research.att.com/~fkautz, selmang  
Address: 600 Mountain Avenue Murray Hill, NJ 07974  
Affiliation: AT&T Laboratories  
Abstract: Planning is a notoriously hard combinatorial search problem. In many interesting domains, current planning algorithms fail to scale up gracefully. By combining a general, stochastic search algorithm and appropriate problem encodings based on propositional logic, we are able to solve hard planning problems many times faster than the best current planning systems. Although stochastic methods have been shown to be very effective on a wide range of scheduling problems, this is the first demonstration of its power on truly challenging classical planning instances. This work also provides a new perspective on representational issues in planning.
Abstract-found: 1
Intro-found: 1
Reference: <author> Adorf, H.M., Johnston, M.D. </author> <year> (1990). </year> <title> A discrete stochas tic neural network algorithm for constraint satisfaction problems. </title> <booktitle> Proc. of the Int. Joint Conf. on Neural Networks, </booktitle> <address> San Diego, CA, </address> <year> 1990. </year>
Reference-contexts: As we will see, it was often the case that Walksat dramatically outperformed both the general and specialized systematic search engines. The success of stochastic local search for planning may come as a surprise. Although local search has been successfully applied to scheduling problems <ref> (Adorf and Johnston 1990, Minton et al. 1990, 1992) </ref>, it has seen little use for planning.
Reference: <author> Allen, J. </author> <year> (1991). </year> <title> Planning as temporal reasoning. </title> <booktitle> Proc. KR-89, </booktitle> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference: <author> Bacchus, F. and Kabanza, F. </author> <year> (1995). </year> <title> Using temporal logic to control search in a forward chaining planner. </title> <booktitle> Proc. EWSP-95, </booktitle> <pages> 157-169. </pages>
Reference: <author> Backstrom, C. </author> <year> (1992). </year> <title> Computational complexity of rea soning about plans, </title> <type> Ph.D. thesis, </type> <institution> Linkoping University, Linkoping, Sweden. </institution>
Reference: <author> Barrett, A. and Weld, D. </author> <year> (1994). </year> <title> Partial-order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 71-112, </pages> <year> 1994. </year>
Reference: <author> Blum, A. and Furst, </author> <title> M.L. (1995). Fast planning through planning graph analysis. </title> <booktitle> Proc. IJCAI-95, </booktitle> <address> Montreal, Canada. </address>
Reference-contexts: These interactions complicate the order in which the goals and subgoals should be established, and make it difficult to select the right operator for establishing a goal. Real-world domains often contain both sources of computational difficulties. In our experiments, we focussed on two natural domains: the "rocket" domain <ref> (Blum and Furst 1995) </ref> and the "logistics" domain (Veloso 1992). Blum and Furst showed that Graphplan outperforms Prodigy and UCPOP on the rocket problems. We extended this problem somewhat to make it more challenging for Graphplan. <p> We will describe several ways this can be done: (i) encodings derived from the planning graphs of Graphplan <ref> (Blum and Furst 1995) </ref>; (ii) the linear encodings of Kautz and Selman (1992); and (iii) general state-based encodings, which incorporate the best features of the previous two. We refer to the both the linear and state-based encodings as "direct" encodings. <p> of Graphplan <ref> (Blum and Furst 1995) </ref>; (ii) the linear encodings of Kautz and Selman (1992); and (iii) general state-based encodings, which incorporate the best features of the previous two. We refer to the both the linear and state-based encodings as "direct" encodings. Graphplan-based Encodings As mentioned above, the Graphplan system (Blum and Furst 1995) works by converting a STRIPS-style specification into a planning graph. This is an ordered graph, where alternating layers of nodes correspond to grounds facts (indexed by the time step for that layer) and fully-instantiated operators (again indexed by the time step). <p> For our SAT encodings, we give both the timings for the systematic tableau method and for the stochastic Walksat procedure. We compare our results to those of the Graph-plan system. As mentioned in the preview of results, we considered hard instances from the rocket and the logistics domains <ref> (Blum and Furst 1995, Veloso 1992) </ref>, as well as the blocks world. We noted that Graphplan has been shown to outperform Prodigy and UCPOP on the rocket problems.
Reference: <author> Bylander, T. </author> <year> (1991). </year> <title> Complexity results for planning. </title> <booktitle> Proc. IJCAI-91, Sidney, Australia, </booktitle> <pages> 274-279. </pages>
Reference-contexts: Planning is a notoriously hard problem. In fact, the general plan-existence problem for STRIPS-style operators is PSPACE-complete <ref> (Bylander 1991, Erol et al. 1992, Backstrom 1992) </ref>. How, then, is it possible to formulate planning as only an NP-complete problem? This difficulty disappears when we realize that the PSPACE-hardness result only holds when the potential solutions can be of exponential length.
Reference: <author> Carbonell, J. , Blythe J., Etzioni, O., Gil, Y., Joseph, R., Kahn, D., Knoblock, C., Minton, S., Perez, A., Reilly, S., Veloso, M., Wang, </author> <title> X (1992). Prodigy 4.0: the manual and tutorial. </title> <type> CMU, CS Tech. Report CMU-CS-92-150. </type>
Reference-contexts: We then present experimental results drawn from several domains, including logistics problems, the "rocket" domain, and the blocks world. We compare the performance of both systematic and stochastic algorithms on different kinds of SAT encodings to the performance of Graphplan, and cite comparisons of Graphplan with the well-known Prodigy <ref> (Carbonell et al. 1992, Stone et al. 1994) </ref> and UCPOP (Penberthy and Weld 1992) systems. Preview of Results Before we describe our approach in detail, we will first highlight some of our main experimental results.
Reference: <editor> Chenoweth, </editor> <publisher> S.V. </publisher> <year> (1991). </year> <title> On the NP-hardness of the blocks world. </title> <booktitle> Proc. AAAI-91, </booktitle> <address> Anaheim, CA, </address> <pages> 623-628. </pages>
Reference: <author> Crawford, J.M. and Auton, L.D. </author> <title> (1993) Experimental Re sults on the Cross-Over Point in Satisfiability Problems. </title> <booktitle> Proc. AAAI-93, </booktitle> <address> Washington, DC, </address> <pages> 21-27. </pages>

Reference: <author> Dechter, R. and Rish, I. </author> <year> (1994). </year> <title> Directional resolution: the Davis-Putnam procedure, revisited. </title> <booktitle> Proc. </booktitle> <address> KR-94, Bonn, Germany. </address>
Reference: <author> Dubois, O. , Andre, P., Boufkhad, Y., and Carlier, J. </author> <year> (1996). </year> <note> A-SAT and C-SAT. Dimacs Series in Discrete Mathematics and Theoretical Computer Science. (to appear) Erol, </note> <author> K., Nau, D.S., and Subrahmanian, </author> <title> V.S. (1992). On the complexity of domain-independent planning. </title> <booktitle> Proc. AAAI-92, </booktitle> <pages> 381-386. </pages>
Reference: <author> Etzioni, O. and Weld, D. S. </author> <year> (1994). </year> <title> A softbot-based inter face to the internet. </title> <journal> Comm. ACM, </journal> <month> July </month> <year> 1994. </year>
Reference-contexts: the blocks world domain is somewhat artificial, we are encouraged by our results because we believe that the rich interactions between operator and sub-goal sequencing, which makes the domain relatively hard, is also quite likely to be found in more practical domains, such as, for example, the softbot planning domain <ref> (Etzioni and Weld 1994) </ref>. (Indeed, in the next phase of this project, we hope to apply our methods to the softbot domain.) Finally, from the columns that give the number of nodes and number of variables, we see that direct encodings (and in particular, the state-based encodings) result in a significant
Reference: <author> Fikes, R.E. and Nilsson, N.J. </author> <year> (1971). </year> <title> STRIPS: A new ap proach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <pages> 189-208. </pages>
Reference-contexts: The origin of this belief can be traced to the early 1970's, when work on plan generation using first-order, resolution theorem-proving (Green 1969) failed to scale up to realistically-sized problems. The relative success of the STRIPS system <ref> (Fikes and Nils-son 1971) </ref> established the basic paradigm for practically all subsequent work in planning. Planning is viewed as a systematic search through either a state-space or through a space of partial plans. Different representations are used for actions and for states or fluents.
Reference: <author> Friedman, M. </author> <year> (1996). </year> <type> Personal communication. </type>
Reference-contexts: We created a state-based encoding for rocket and logistics problems, and for the blocks world used the original 2 Preliminary data indicate that Graphplan, and thus our algorithms, outperform UCPOP on the logistics domain, as expected <ref> (Friedman 1996) </ref>. However, it is important to note that UCPOP is a regression planner, and certain state-based notions are inaccessible or obscure to it. UCPOP may well prove superior on other domains, in which reasoning is more causal, and less related to topological notions.
Reference: <author> Green, C. </author> <year> (1969). </year> <title> Application of Theorem Proving to Problem Solving. </title> <booktitle> In Proc. </booktitle> <address> IJCAI-69, Washington, D.C., </address> <year> 1969, </year> <pages> 219-239. </pages>
Reference-contexts: Introduction There is a widespread belief in the AI community that planning is not amenable to general theorem-proving techniques. The origin of this belief can be traced to the early 1970's, when work on plan generation using first-order, resolution theorem-proving <ref> (Green 1969) </ref> failed to scale up to realistically-sized problems. The relative success of the STRIPS system (Fikes and Nils-son 1971) established the basic paradigm for practically all subsequent work in planning. Planning is viewed as a systematic search through either a state-space or through a space of partial plans. <p> Interestingly, although tableau is able to show that there is no shorter solution, it cannot actually find the solution itself! This show how stochastic and the systematic methods can complement one another. Planning as Satisfiability While planning has traditionally been formulated as deduction in first-order logic <ref> (Green 1969, McCarthy and Hayes 1969, Pednault 1988, Allen 1991) </ref>, Kautz 1 Walksat and Graphplan are implemented in C and ran on an SGI Challenge with a 150 MHz MIPS R4400 processor. We thank Avrim Blum for providing us with his code. Tableau ran on a SPARC-10 processor.
Reference: <author> Gupta and Nau (1991). </author> <title> Complexity results for blocks world planning. </title> <booktitle> Proc. AAAI-91, </booktitle> <address> Anaheim, CA, </address> <pages> 629-633. </pages>
Reference: <author> Gupta and Nau (1992). </author> <title> On the complexity of blocks-world planning. </title> <journal> Artificial Intelligence, </journal> <volume> 56, </volume> <pages> 139-403. </pages>
Reference: <author> Haas, A. </author> <year> (1987). </year> <title> The case for domain-specific frame ax ioms. </title> <booktitle> In The Frame Problem in Artificial Intelligence, Proceedings of the 1987 Workshop, F.M. </booktitle> <publisher> Brown, ed., Lawrence, </publisher> <address> KS, 1987. </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Los Altos, CA. </address>
Reference: <author> Joslin, D. and Pollack, M. </author> <year> (1995). </year> <title> Passive and Active De cision Postponement in Plan Generation. </title> <booktitle> In the Euro-pean Workshop on Planning (EWSP), </booktitle> <address> Assisi, Italy, </address> <month> Sept. </month> <year> 1995. </year>
Reference: <author> Kautz, H. and Selman, B. </author> <title> (1992) Planning as Satisfiability. </title> <booktitle> Proc. ECAI-92, </booktitle> <address> Vienna, Austria, </address> <year> 1992, </year> <pages> 359-363. </pages>
Reference: <author> Kautz, H., McAllester, D., and Selman, B. </author> <year> (1996). </year> <title> Encod ing Plans in Propositional Logic. </title> <note> In preparation. </note>
Reference-contexts: The encodings we used in our experiments were created by hand, based on our understanding of the semantics of the various benchmark domains (which were, indeed, described by STRIPS operators). A separate paper <ref> (Kautz et al. 1996) </ref> describes our initial results on automating the process of compiling away the operators for a given domain. However, one could equally well take a state-based description of a domain as primary, and then add actions to the axioms through meaning postulates.
Reference: <author> Kirkpatrick, S., Gelatt, </author> <title> C.D., and Vecchi, </title> <publisher> M.P. </publisher> <year> (1983). </year> <title> Optimization by simulated annealing. </title> <booktitle> Science, </booktitle> <month> 220 </month> <year> (1983) </year> <month> 671-680. </month>
Reference-contexts: The procedure keeps flipping truth values until a satisfying assignment is found or until some predefined maximum number of flips is reached. In Sel-man et al. (1994, 1996), it was shown that this method significantly outperforms basic GSAT, and other local search methods such as such as simulated annealing <ref> (Kirkpatrick et al. 1983) </ref>. Finding Plans Table 2 gives the computational cost of solving several hard planning problems. We consider two SAT encodings for each instance, one Graphplan-based and the other direct (linear or state-based).
Reference: <author> McCarthy, J. and Hayes, P. </author> <year> (1969). </year> <title> Some philosophical problems from the standpoint of artificial intelligence. </title>
Reference-contexts: Interestingly, although tableau is able to show that there is no shorter solution, it cannot actually find the solution itself! This show how stochastic and the systematic methods can complement one another. Planning as Satisfiability While planning has traditionally been formulated as deduction in first-order logic <ref> (Green 1969, McCarthy and Hayes 1969, Pednault 1988, Allen 1991) </ref>, Kautz 1 Walksat and Graphplan are implemented in C and ran on an SGI Challenge with a 150 MHz MIPS R4400 processor. We thank Avrim Blum for providing us with his code. Tableau ran on a SPARC-10 processor.
Reference: <editor> In Machine Intelligence 4, D. Michie, ed., </editor> <publisher> Ellis Horwood, </publisher> <address> Chichester, England, </address> <year> 1969, </year> <note> page 463ff. </note>
Reference: <author> McAllester, D. and Rosenblitt, D. </author> <year> (1991). </year> <title> Systematic non linear planning. </title> <booktitle> Proc. AAAI-91, </booktitle> <address> Anaheim, CA. </address>
Reference: <author> Minton, S., Johnston, M.D., Philips, A.B., and Laird, P. </author> <title> (1990) Solving large-scale constraint satisfaction an scheduling problems using a heuristic repair method. </title> <booktitle> Proc. AAAI-90, </booktitle> <year> 1990, </year> <pages> 17-24. </pages>
Reference-contexts: As we will see, it was often the case that Walksat dramatically outperformed both the general and specialized systematic search engines. The success of stochastic local search for planning may come as a surprise. Although local search has been successfully applied to scheduling problems <ref> (Adorf and Johnston 1990, Minton et al. 1990, 1992) </ref>, it has seen little use for planning.
Reference: <author> Minton, S., Johnston, M.D., Philips, A.B., and Laird, P. </author> <title> (1992) Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <booktitle> Ar tificial Intelligence, </booktitle> <pages> (58)1-3, </pages> <year> 1992, </year> <pages> 161-205. </pages>
Reference: <author> Pednault, E. </author> <year> (1988). </year> <title> Synthesizing plans that contain ac tions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference: <author> Penberthy, J. and Weld, D. </author> <year> (1992). </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In the Proc. </booktitle> <address> KR-92, Boston, MA, </address> <pages> 103-114. </pages>
Reference-contexts: We compare the performance of both systematic and stochastic algorithms on different kinds of SAT encodings to the performance of Graphplan, and cite comparisons of Graphplan with the well-known Prodigy (Carbonell et al. 1992, Stone et al. 1994) and UCPOP <ref> (Penberthy and Weld 1992) </ref> systems. Preview of Results Before we describe our approach in detail, we will first highlight some of our main experimental results. In order to evaluate our method, we considered planning domains that lead to serious computational difficulties in traditional planners.
Reference: <author> Davis, M., Logemann, G., and Loveland, D. </author> <year> (1962). </year> <title> A machine program for theorem proving. </title> <journal> Comm. ACM, </journal> <volume> 5, </volume> <year> 1962, </year> <pages> 394-397. </pages>
Reference: <author> Schubert, L. </author> <year> (1989). </year> <title> Monotonic Solution of the Frame Problem in the Situation Calculus: an Efficient Method for Worlds with Fully Specified Actions. In Knowledge Representation and Defeasible Reasoning, </title> <editor> H. Kyburg, </editor> <publisher> R. </publisher>
Reference: <author> Loui, and G. Carlson, </author> <title> eds. </title>
Reference: <author> Selman, B. </author> <year> (1994). </year> <title> Near-Optimal Plans, Tractability, and Reactivity. </title> <booktitle> Proc. </booktitle> <address> KR-94, Bonn, Germany, </address> <year> 1994, </year> <pages> 521-529. </pages>
Reference: <author> Selman, B. </author> <year> (1995). </year> <title> Stochastic Search and Phase Transi tions: AI Meets Physics. </title> <booktitle> Proc. IJCAI-95, </booktitle> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: In general, our results suggests that it's harder to show the non-existence of a plan up to a certain length than it is to find such a plan if it exists. This kind of asymmetry has also been observed in several other problem domains <ref> (Selman 1995) </ref>. The issue is closely related to the practical difference between solving NP and co-NP complete problems. Tableau can show the infeasibility of a 17 time slot (34 stack/unstack) solution for "bw large.d", while Walksat can find a 18 time slot (36 stack/unstack) plan (Table 2).
Reference: <author> Selman, B. , Kautz, H., and Cohen, B. </author> <year> (1994). </year> <title> Noise Strategies for Local Search. </title> <booktitle> Proc. AAAI-94, </booktitle> <address> Seattle, WA, </address> <year> 1994, </year> <pages> 337-343. </pages>
Reference: <author> Selman, B., Kautz, H., and Cohen, B. </author> <title> (1996) Local Search Strategies for Satisfiability Testing. </title> <journal> Dimacs Series in Discrete Mathematics and Theoretical Computer Science. </journal> <note> (to appear) Selman, </note> <author> B., Levesque, H., and Mitchell, D. </author> <year> (1992). </year> <title> A New Method For Solving Hard Satisfiability Problems. </title> <booktitle> Proc. AAAI-92, </booktitle> <address> San Jose, CA, </address> <year> 1992, </year> <pages> 440-446. </pages>
Reference: <author> Stone, P., Veloso, V., and Blythe, J. </author> <year> (1994). </year> <title> The need for different domain-independent heuristics. </title> <booktitle> In AIPS94, </booktitle> <pages> pages 164-169, </pages> <address> Chicago, </address> <year> 1994. </year>
Reference: <editor> Trick, M. and Johnson, D. (Eds.) </editor> <booktitle> (1993) Proc. DIMACS Challenge on Satisfiability Testing. </booktitle> <address> Piscataway, NJ, </address> <year> 1993. </year> <journal> (DIMACS Series on Discr. </journal> <note> Math.) </note> <author> Veloso, M. </author> <year> (1992). </year> <title> Learning by analogical reasoning in general problem solving. </title> <type> Ph.D. Thesis, CMU, CS Techn. Report CMU-CS-92-174. </type>
Reference-contexts: By contrast, the past few years have seen dramatic progress in the size of problems that can be handled by propositional satisfiabil-ity testing programs <ref> (Trick and Johnson 1993, Selman 1995) </ref>. In particular, new algorithms based on randomized local search (Selman et al. 1992) can solve certain classes of hard problems that are an order of magnitude larger than those that can be solved by older ap proaches.
References-found: 39

