URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-92-11.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Email: e-mail: rundenst@eecs.umich.edu  
Phone: phone: 313-936-2971  
Title: DESIGN VIEWS FOR SYNTHESIS Providing Both Uniform Data Integration and Diverse Data Customization  
Author: Elke A. Rundensteiner 
Address: Ann Arbor  Ann Arbor, MI 48109-2122  
Affiliation: University of Michigan,  Dept. of Elect. Eng. and Computer Science  
Abstract: Synthesis is a complex task spanning many levels of abstractions and information domains. Hence, CAD systems utilize a global design database to achieve the much needed integration of this diverse design information into one central data model. Such a central database represents a serious bottleneck for the CAD system. First, it prevents the extensibility of the CAD system over time, since a change of the global data model requires an (often prohibitively expensive) modification of all current design tools using the database. Second, it forces all design tools to work on the same (comprehensive and hence extremely complex) data model. In this paper, we introduce a solution to this problem. We propose to utilize the object-oriented view methodology, called MultiView, for specifying customized tool interfaces (design views) on the CAD database. A design view contains a subset of relevant information from the global database organized in a fashion most suitable to the needs of a particular design tool. MultiView automatically maintains the mapping between the global data model and local design views, thus freeing individual design tools from this burden. Our approach thus results in a flexible CAD environment that assures the consistent integration of design data from different tools, while providing each tool with a customized view of the integrated data. This paper gives numerous examples that demonstrate MultiView and its advantages for typical tasks in high-level synthesis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abiteboul, S., and Bonner, A., </author> <title> "Objects and Views," </title> <booktitle> in Proc. SIGMOD, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 238 - 247. </pages>
Reference-contexts: Recently, there have been several proposals for defining views for OODBs <ref> [18, 28, 1, 25] </ref>. Most of them use the query language defined for their respective object model as view specification language, namely, for deriving a virtual class. They generally do not discuss the integration of derived classes into the global schema nor do they generate complete view schemata.
Reference: [2] <author> Afsarmanesh, H., Brotoatmodjo, E., Ryeon, K. J., Parker, A. C., </author> <title> The EVE VLSI Information Management Environment, </title> <booktitle> IEEE Int. Conf. on CAD, </booktitle> <pages> pp. 384 - 387, </pages> <year> 1989. </year> <title> 2 GemStone is a register trademark of the Servio Corporation. </title> <type> 24 </type>
Reference-contexts: An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>. <p> design views specified in this section are defined on the behavioral design object model (composed of an extended control-flow/data-flow graph augmented with state transition graph information and structural binding and of an extended component graph augmented with behavioral binding and floorplan information), a typical design representation for high-level synthesis systems <ref> [2] </ref>. Due to space limitations, we refer the reader to [26] for a definition of this underlying global CAD schema. 4.2 A Design View For Component Binding In this section, we discuss the construction of a design view for the (operator) binding design task.
Reference: [3] <author> Allen, W., Rosenthal, D., and Fiduk, K., </author> <title> "The MCC CAD Framework Methodology Management System," </title> <booktitle> DAC'91, </booktitle> <pages> pp. 694 - 698. </pages>
Reference-contexts: An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>.
Reference: [4] <author> Bancilhon and W. Kim, </author> <title> "Object-Oriented Database Systems: In Transition," </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> Vol. 19, No. 4, </volume> <month> Dec. </month> <year> 1990, </year> <pages> pp. 49 - 53. </pages>
Reference-contexts: Other systems can therefore not quickly construct new design views nor easily modify existing ones. 2.3 On Object-Oriented View Mechanisms View mechanisms for object-oriented databases have been identified as one of the few open problems in object-oriented database research in <ref> [4] </ref>. Recently, there have been several proposals for defining views for OODBs [18, 28, 1, 25]. Most of them use the query language defined for their respective object model as view specification language, namely, for deriving a virtual class.
Reference: [5] <author> Baer, J. L., Liem, M. C., et al., </author> <title> A Notation for Describing Multiple Views of VLSI Circuits, </title> <booktitle> DAC'88, </booktitle> <pages> pp. 102 - 107. </pages>
Reference: [6] <author> Bingley, P., and P. Van der Wolf, </author> <title> A Design Platform for the NELSIS CAD Framework, </title> <journal> DAC'90, </journal> <volume> 146 - 149. </volume>
Reference-contexts: An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>.
Reference: [7] <author> Blackburn, R. L., Thomas, D. E., and Koenig, </author> <title> P.M., Linking the Behavioral and Structural Domains of Representation for Digital System Design, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. CAD-6, No. 1, </volume> <month> Jan. </month> <year> 1987. </year>
Reference: [8] <author> Cattell, R. G. G., </author> <title> Object Data Management, </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: chosen view classes are interconnected into one view schema (Figure 3.e) by the view completion algorithm. 3.2 Basic Terminology On Object-Oriented Views Since MultiView is based on a fairly typical object model, the reader is referred to a standard book on object-oriented databases for a thorough coverage of this subject <ref> [8] </ref>. Only the terminology needed for the remainder of the paper is introduced below. A class C i 2 C has a unique class name, a type description and a set membership. The type associated with a class, type (C), consists of a number of property functions, properties (C).
Reference: [9] <author> CAD Framework Initiative, </author> <title> Panel Discussion, </title> <booktitle> 29th ACM/IEEE Design Automation Conf. </booktitle> <address> (DAC'92), Anaheim, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 INTRODUCTION As pointed out in [13], up to 40 percent of a group's engineering resources are expended on tool integration, which is often more than the capital spent on acquiring the tools themselves. For this reason, the CAD Framework Initiative <ref> [13, 9] </ref> focuses on issues such as standard data exchange formats, reference data models, and standard tool programming interfaces. While the development of standards in data exchange is an important task, universally accepted standards are the exception rather than the rule [11].
Reference: [10] <author> Chiueh, T.-C., and Katz, </author> <title> R.H., Intelligent VLSI Design Object Management, </title> <journal> EDAC'92, pp. </journal> <volume> 410 - 414, </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>.
Reference: [11] <author> Daniell, J. and Director, S., </author> <title> An Object Oriented Approach to CAD Tool Control, </title> <booktitle> Proc. 26th Design Automation Conference, </booktitle> <pages> pp. 197 - 202, </pages> <year> 1989. </year>
Reference-contexts: For this reason, the CAD Framework Initiative [13, 9] focuses on issues such as standard data exchange formats, reference data models, and standard tool programming interfaces. While the development of standards in data exchange is an important task, universally accepted standards are the exception rather than the rule <ref> [11] </ref>. Also, they are always being made obsolete by the fast pace of change in IC technology and the type of design tools. <p> An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>.
Reference: [12] <author> Gajski, D. D., Dutt, D. N., Wu, A. C.-H., and Lin, S. Y.-L., </author> <title> High-Level Synthesis: Introduction to Chip and System Design, </title> <publisher> Kluwer Academic Press, </publisher> <year> 1992. </year>
Reference: [13] <author> Graham, A., </author> <title> "The CAD Framework Initiative Standards Progress Towards First Publication at Year End", </title> <journal> IEEE DATC Newsl. on Design Automation, Sp. </journal> <year> 1992, </year> <pages> pp. 13-21. </pages>
Reference-contexts: 1 INTRODUCTION As pointed out in <ref> [13] </ref>, up to 40 percent of a group's engineering resources are expended on tool integration, which is often more than the capital spent on acquiring the tools themselves. <p> 1 INTRODUCTION As pointed out in [13], up to 40 percent of a group's engineering resources are expended on tool integration, which is often more than the capital spent on acquiring the tools themselves. For this reason, the CAD Framework Initiative <ref> [13, 9] </ref> focuses on issues such as standard data exchange formats, reference data models, and standard tool programming interfaces. While the development of standards in data exchange is an important task, universally accepted standards are the exception rather than the rule [11].
Reference: [14] <author> Gupta, R., Cheng, W. H., Gupta R., Hardonag, I. and Breuer, M. A.. </author> <title> An Object-Oriented VLSI CAD Framework, </title> <journal> IEEE Computer, </journal> <volume> vol. 22, no. 5, 28 - 37, </volume> <month> May </month> <year> 1989. </year>
Reference-contexts: An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>.
Reference: [15] <author> Hamer, P. and Treffers, M., </author> <title> A Data Flow Based Architecture for CAD Frameworks, </title> <booktitle> Proc. IEEE Internat. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 482 - 485, </pages> <year> 1990. </year>
Reference-contexts: An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>.
Reference: [16] <author> Harrison, D. S., Moore, P., Spickelmier, R. L., and Newton, A. R., </author> <title> Data Management and Graphics Editing in the Berkeley Design Environment, </title> <journal> pp. </journal> <volume> 24 - 27, </volume> <month> ICCAD'86. </month>
Reference-contexts: Hence, given a behavioral view of a design, the database would and should not be powerful enough to construct a structural view rather the generation of these different (information models) views is what the "process of design" is all about. In OCT <ref> [16] </ref>, the term view is used to refer to different facets of a frame, each storing independent pieces of information about the design like the physical characteristics, the behavior, etc.
Reference: [17] <author> Heijenga, W., Jasnoch, U., and Radeke, E., "DaDaMo: </author> <title> A Conceptual Data Model for Electronic Design Applications", </title> <booktitle> EDAC'92, </booktitle> <pages> pp. 394 - 398. </pages>
Reference: [18] <author> Heiler, S., and Zdonik, S. B., </author> <title> "Object views: Extending the vision", </title> <booktitle> in Proc. IEEE Data Eng. Conf., </booktitle> <month> Feb. </month> <year> 1990, </year> <pages> pp. 86 - 93. </pages>
Reference-contexts: Recently, there have been several proposals for defining views for OODBs <ref> [18, 28, 1, 25] </ref>. Most of them use the query language defined for their respective object model as view specification language, namely, for deriving a virtual class. They generally do not discuss the integration of derived classes into the global schema nor do they generate complete view schemata. <p> They generally do not discuss the integration of derived classes into the global schema nor do they generate complete view schemata. Instead, the derived classes 3 4 are treated as `stand-alone' objects <ref> [18] </ref> or they are attached directly as subclasses of the schema root. MultiView is one of the only view methodologies that generates complete view schemata. Secondly, algorithms for automating the more tedious parts of view specification have been developed for MultiView.
Reference: [19] <author> Knapp, D. W., and A. C. Parker, </author> <title> A unified representation for design information, </title> <booktitle> In Proc. </booktitle> <address> CHDL-85, Elsvier, </address> <year> 1985. </year>
Reference-contexts: that database view mechanisms have been explored to be applied to CAD. 2.2 Design views in CAD There is some work in the CAD literature that uses the term 'views', however, the associated meaning and with it the usage of the view concept is different than proposed in this paper <ref> [20, 19] </ref>. Sometimes the different information domains of an application, such as the behavioral domain and the structural domain in behavioral synthesis, are referred to as views of the design [19]. <p> Sometimes the different information domains of an application, such as the behavioral domain and the structural domain in behavioral synthesis, are referred to as views of the design <ref> [19] </ref>. Note, however, that these two information domains are two different parts of the global schema, each captured by different data structures. The behavioral-graph and the structural-graph thus are trivial views in MultiView; they both correspond to simple subsets of the complete information model.
Reference: [20] <author> Lanneer, D., et al., </author> <title> An Object-oriented framework supporting the full high-level synthesis trajectory, </title> <journal> CHDL'91, pp. </journal> <volume> 281 - 300, </volume> <year> 1991. </year> <month> 25 </month>
Reference-contexts: that database view mechanisms have been explored to be applied to CAD. 2.2 Design views in CAD There is some work in the CAD literature that uses the term 'views', however, the associated meaning and with it the usage of the view concept is different than proposed in this paper <ref> [20, 19] </ref>. Sometimes the different information domains of an application, such as the behavioral domain and the structural domain in behavioral synthesis, are referred to as views of the design [19].
Reference: [21] <author> Miller, J., Strauss, J., and Rammig, F., </author> <title> "Integration of a CHDL into an Engineering Environment," </title> <booktitle> CHDL'90, </booktitle> <pages> pp. 157 - 166. </pages>
Reference-contexts: An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 PREVIOUS WORK 2.1 Design databases and CAD Frameworks Over the last years, many different data models and design databases have been introduced to support the process of design <ref> [10, 11, 14, 15, 2, 3, 6, 21] </ref>.
Reference: [22] <author> Mueller, W, and Rammig, F., "ODICE: </author> <title> Object-Oriented Hardware Description in CAD Environment," </title> <booktitle> CHDL'90, </booktitle> <pages> pp. 19 - 34. </pages>
Reference-contexts: As discussed in the previous section, view support would enhance the power of any of the existing CAD database systems. In general, design databases have become a fundamental component of a typical CAD framework <ref> [23, 22] </ref>. However, all of the existing CAD databases leave the burden of mapping between the tool's local data structures and the database's global data model with the individual design tools.
Reference: [23] <editor> Rammig, F., (editor), </editor> <booktitle> IFIP WG 10.2, Workshop on Electronic Design Automation Frameworks, </booktitle> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: As discussed in the previous section, view support would enhance the power of any of the existing CAD database systems. In general, design databases have become a fundamental component of a typical CAD framework <ref> [23, 22] </ref>. However, all of the existing CAD databases leave the burden of mapping between the tool's local data structures and the database's global data model with the individual design tools. <p> The CAD framework builder is in charge of constructing the software components that compose a CAD framework. This includes the development of a user interface, a design process manager, and a design database <ref> [23] </ref>. We propose that a view support system should be a component of such a CAD framework.
Reference: [24] <author> Rundensteiner, E. A., </author> <title> "MultiView: A Methodology for Supporting Multiple Views in Object-Oriented Databases", </title> <booktitle> Int. Conf. on Very Large Data Bases, </booktitle> <year> 1992, </year> <pages> pp. 187-198. </pages>
Reference: [25] <author> Rundensteiner, E. A., and Bic, L., </author> <title> "Set Operations in Object-Based Data Models", </title> <journal> in IEEE Transaction on Data and Knowledge Eng., </journal> <volume> vol. 4, issue 4, </volume> <month> August </month> <year> 1992, </year> <pages> pp. 382 - 398. </pages>
Reference-contexts: A design view generally contains a subset of relevant information from the global database reorganized in a fashion most suitable to 1 the needs of particular users. The proposed mechanism, the object-oriented view method-ology called MultiView <ref> [26, 25] </ref>, establishes a consistent mapping between the database and the tool interfaces, such that updates through the tool interface are consistently reflected in the underlying database. <p> Recently, there have been several proposals for defining views for OODBs <ref> [18, 28, 1, 25] </ref>. Most of them use the query language defined for their respective object model as view specification language, namely, for deriving a virtual class. They generally do not discuss the integration of derived classes into the global schema nor do they generate complete view schemata. <p> Emphasis of this paper is on the potential exploitation of this database view technology for addressing the tool integration problem in CAD systems. Therefore, this 5 section gives a general introduction to of MultiView, while a more detailed description can be found elsewhere <ref> [25, 26] </ref>. For clarity sake, we distinguish between three groups of humans involved in a CAD system: the design tool builder, the CAD framework maintainer, and the CAD framework builder. The CAD framework builder is in charge of constructing the software components that compose a CAD framework. <p> For the third task, MultiView provides a view definition language and an associated view completion algorithm. A detailed presentation of these languages and algorithms can be found in <ref> [25] </ref>, while a brief introduction to each will be given in the remainder of this section. The example given next presents an overview of the different steps of view specification in MultiView. Example 1.
Reference: [26] <author> Rundensteiner, E. A., </author> <title> "Object-Oriented Views: A Novel Approach to Tool Integration in Design Environments," </title> <type> Dissertation, </type> <institution> Info. and Computer Science Dept., Univ. of California, Irvine, </institution> <month> Fall </month> <year> 1992. </year>
Reference-contexts: A design view generally contains a subset of relevant information from the global database reorganized in a fashion most suitable to 1 the needs of particular users. The proposed mechanism, the object-oriented view method-ology called MultiView <ref> [26, 25] </ref>, establishes a consistent mapping between the database and the tool interfaces, such that updates through the tool interface are consistently reflected in the underlying database. <p> updates can be handled better due to the following: (1) object identity; the concept of maintaining the unique identity of an object even if its external characteristics are modified and/or hidden (in a view), and (2) abstract data types; the ability to associate type-specific (update) operations with the encapsulated object <ref> [26] </ref>. 2.5 Summary In summary, there has been no consistent and systematic scheme for generating and maintaining customized design views on a central database. <p> Emphasis of this paper is on the potential exploitation of this database view technology for addressing the tool integration problem in CAD systems. Therefore, this 5 section gives a general introduction to of MultiView, while a more detailed description can be found elsewhere <ref> [25, 26] </ref>. For clarity sake, we distinguish between three groups of humans involved in a CAD system: the design tool builder, the CAD framework maintainer, and the CAD framework builder. The CAD framework builder is in charge of constructing the software components that compose a CAD framework. <p> This phase also involves automatic view generation, where view generation algorithms are run to complete the view description, if necessary <ref> [26] </ref>. For instance, if the view definer determines that the modify-component-type function must be deleted from the floorplanning view, then the system will automatically generate a new Component class with the modified functions. <p> For this reason, we will concentrate in the remainder of this section on this view specification process. Information on the other parts of MultiView can be found in <ref> [26] </ref>. 3.1 View Specification in MultiView MultiView is a methodology for supporting multiple view schemata in OODBs. <p> Example 2. Figure 3.a shows the base schema BS, Figure 3.c the global schema GS, and 3.3 Task 1: Object Algebra for the Virtual Class Derivation The first task of view specification in MultiView uses an object algebra <ref> [26] </ref>. The object algebra provides basic operators that can be used to define new virtual classes based on existing information in the database. These operators can be nested to form arbitrarily complex class derivations. The object algebra consists of six basic operators that are briefly described below. <p> In this section we sketch an overall approach for the class integration problem. A detailed treatment of this topic is beyond the scope of this paper and can be found elsewhere <ref> [26] </ref>. Class integration is concerned with finding the most `appropriate' location in the schema graph G for a virtual class VC in terms of property inheritance and subset relationships between classes. <p> For the second subtask, it provides algorithms that will automatically generate a generalization hierarchy from a given set of view classes <ref> [26] </ref>. This automatic generation of view is-a arcs is preferable over their manual entry since it simplifies the task of the view designer and guarantees the consistency of the resulting view schema [26]. <p> subtask, it provides algorithms that will automatically generate a generalization hierarchy from a given set of view classes <ref> [26] </ref>. This automatic generation of view is-a arcs is preferable over their manual entry since it simplifies the task of the view designer and guarantees the consistency of the resulting view schema [26]. The view definition language consists of two groups of operators: the first group initiates or terminates a transaction on a view schema while the second group discussed in the next paragraph modifies a given view schema. <p> The view definers conclude the view definition phase by issuing the SAVE-VIEW command. MultiView then automatically augments the set of classes by the necessary view is-a arcs <ref> [26] </ref>. The second group of commands modifies the view VS by adding or deleting view classes. The "ADD-CLASS (&lt;class-name&gt;)" command adds a class &lt;class-name&gt; to VS. The "ADD-CLASS-DAG (&lt;class-name&gt;)" command adds all classes to VS that are classes in the subschema of GS rooted at the class &lt;class-name&gt;. <p> Due to space limitations, we refer the reader to <ref> [26] </ref> for a definition of this underlying global CAD schema. 4.2 A Design View For Component Binding In this section, we discuss the construction of a design view for the (operator) binding design task. <p> While the algorithm for class integration is outlined in Section 3.4, the reason for creating these intermediate classes is beyond the scope of this paper <ref> [26] </ref>. 15 16 Finally, the appropriate classes must be selected from the global schema to be included in the design view. This is accomplished using the view definition language described in Section 3.5, in this case using the commands ADD-CLASS (DfopB) and ADD-CLASS (CompB). <p> Clearly, the Binding view protects the design information from being changed in an illegal manner during the binding design task. 4.3 A Design View For Simplying the Data Flow Graph Some tools, such as the graph compiler and the graph critic, arbitrarily restructure the control/data flow graph <ref> [26] </ref>. Therefore, an appropriate design view for these tools would simply be the complete set of all behavioral object classes shown Figure 9.a. The allocation tool, on the other hand traverses the data flow graph to determine the number and type of operators. <p> Therefore, the two functions inports () and outports () have to be removed from all three classes. In MultiView, this can be achieved by a macro-operator that works on a complete subgraph of the schema rather than on an individual class (see <ref> [26] </ref>). For this purpose, we use the hide macro-operator as follows: class Dfobject2* := hide* [inports (),outports ()] from Dfobject*; This query generates three virtual classes Dfobject2, Dfnode2, and Dfnet2, namely, one for each of the classes in the subschema graph rooted at the Dfobject class. <p> for the example graph presented in Figure 8, the design views DFG1, DFG2 and DFG3 represent the design data using the data flow graph model on the left-hand side, in the middle, on the right-hand side of the figure, respectively. 21 Due to space limitations, the reader is referred to <ref> [26] </ref> for the specification of design views for other design tasks, such as scheduling, allocation, and floorplanning. 5 EVALUATION OF THE DESIGN VIEW APPROACH The view-based database approach offers all the advantages of a centralized database approach, like, for instance, the integration of diverse design information into one model, integrity control, <p> Additional advantages of tool integration using design views have been demonstrated by the design view examples discussed in the previous section and elsewhere <ref> [26] </ref>.
Reference: [27] <institution> Sangiovanni-Vincentelli, A., Univ. of Michigan, Ann Arbor, </institution> <type> Private Communication, </type> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: It is a challenging open problem whether a view-based approach could be used to automatically maintain the mapping between drastically different representation paradigms, e.g., between the graph structures used in high-level synthesis versus the special-purpose hash-based matrix representations of a netlist used for simulation <ref> [27] </ref>. Acknowledgements. I want to thank Lubomir Bic and Daniel D. Gajski for providing me with advice and encouragement during earlier stages of this work.
Reference: [28] <author> Scholl, M. H., Laasch, C. and Tresch, M., </author> <title> "Updatable Views in Object-Oriented Databases," </title> <booktitle> in Proc. 2nd DOOD Conf., </booktitle> <address> Germany, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Recently, there have been several proposals for defining views for OODBs <ref> [18, 28, 1, 25] </ref>. Most of them use the query language defined for their respective object model as view specification language, namely, for deriving a virtual class. They generally do not discuss the integration of derived classes into the global schema nor do they generate complete view schemata.
Reference: [29] <author> VanEijndhoven, J. T. J., and Stok, </author> <title> L, "A Data Flow Graph Exchange Standard," </title> <journal> EDAC'92, pp. </journal> <volume> 193 - 199, </volume> <year> 1992. </year>
Reference: [30] <author> Wu, A. C. H., Hadley, T. S., and Gajski, D. D., </author> <title> An Efficient Multi-View Design Model for Real-Time Interactive Synthesis, </title> <journal> ICCAD'92, pp. </journal> <volume> 328 - 331. </volume> <pages> 26 </pages>
References-found: 30

