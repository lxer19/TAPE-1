URL: http://www.cis.ohio-state.edu/~paolo/research/publications/ipps94.ps
Refering-URL: http://www.cis.ohio-state.edu/~paolo/research/
Root-URL: http://www.cis.ohio-state.edu
Email: paolo@vlsi.cs.caltech.edu  
Title: A Verified Integration of Parallel Programming Paradigms in CC  
Author: Paolo A.G. Sivilotti 
Address: Pasadena, California, 91125, USA  
Affiliation: Computer Science Department California Institute of Technology  
Abstract: CC ++ is an object-oriented parallel programming language that uses parallel composition, atomic functions, and single-assignment variables to express con-currency. We show that this programming paradigm is equivalent to several traditional imperative communication and synchronization models, namely monitors and asynchronous channels. Furthermore, the object-oriented nature of CC ++ provides an ideal framework for integrating these paradigms. We specify, implement, and formally verify a collection of libraries that integrates these traditional models with CC ++ . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory R. Andrews. </author> <title> Concurrent Programming: </title> <booktitle> Principles and Practice. </booktitle> <address> Benjamin/Cummings, Redwood City, CA, </address> <year> 1991. </year>
Reference-contexts: Section 5 contains a similar description of an asynchronous channel library. Section 6 concludes and summarizes the results. 2 Related Work The integration of communication and synchronization paradigms has been explored in many contexts. The SR language (Synchronizing Resources) developed by Andrews <ref> [1, Section 10.4] </ref> permits concurrent processes to communicate and synchronize using shared variables, semaphores, asynchronous message passing, RPC, and rendezvous, as does StarMod [5].
Reference: [2] <author> Per Brinch Hansen. </author> <title> Operating System Principles. </title> <publisher> Prentice Hall, </publisher> <year> 1973. </year>
Reference-contexts: The block terminates only when all its statements have terminated. parfor: a loop whose iterations are executed in par allel. The loop terminates only when all its iterations have terminated. For a complete description of these constructs, refer to [3] and [8]. 4 Monitor Library 4.1 Specification A monitor <ref> [2, 6] </ref> is a collection of data and functions that manipulate this data.
Reference: [3] <author> P. A. Carlin, K. M. Chandy, and C. Kesselman. </author> <title> The Compositional C++ language definition. </title> <type> Technical Report CS-TR-92-02, </type> <institution> Computer Science Department, California Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: If a process attempts to read a single-assignment variable that has not yet been defined, that process suspends until the variable becomes defined [4, Section 2.1]. We demonstrate that this single-assignment paradigm is consistent with traditional imperative communication and synchronization schemes, and furthermore that CC ++ <ref> [3, 8] </ref> | an object-oriented language based on C ++ that incorporates single-assignment variables, atomic functions, and parallel composition | can support and seamlessly integrate these schemes with object-orientation. This support and integration is demonstrated by providing a collection of generic libraries whose correctness is formally verified. <p> The block terminates only when all its statements have terminated. parfor: a loop whose iterations are executed in par allel. The loop terminates only when all its iterations have terminated. For a complete description of these constructs, refer to <ref> [3] </ref> and [8]. 4 Monitor Library 4.1 Specification A monitor [2, 6] is a collection of data and functions that manipulate this data.
Reference: [4] <author> K. Mani Chandy and Stephen Taylor. </author> <title> An Introduction to Parallel Programming. </title> <publisher> Jones and Bartlett Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: A subsequent attempt to write to the variable is a run-time error. If a process attempts to read a single-assignment variable that has not yet been defined, that process suspends until the variable becomes defined <ref> [4, Section 2.1] </ref>.
Reference: [5] <author> R. P. Cook. </author> <title> Starmod| a language for distributed programming. </title> <journal> IEEE Transactions on Software Engineering SE-6, </journal> <volume> 6 </volume> <pages> 563-571, </pages> <month> Nov </month> <year> 1980. </year>
Reference-contexts: The SR language (Synchronizing Resources) developed by Andrews [1, Section 10.4] permits concurrent processes to communicate and synchronize using shared variables, semaphores, asynchronous message passing, RPC, and rendezvous, as does StarMod <ref> [5] </ref>. The unique aspects of our work are the integration of these paradigms within the framework of object-orientation, and the assertional verification of the implementation at the level of the code itself. 3 The CC ++ Language CC ++ is a parallel object-oriented programming language based on C ++ .
Reference: [6] <author> C.A.R. Hoare. </author> <title> Monitors: An operating system structuring concept. </title> <journal> Comm.ACM, </journal> <volume> 17(10) </volume> <pages> 549-557, </pages> <month> Oct </month> <year> 1974. </year>
Reference-contexts: The block terminates only when all its statements have terminated. parfor: a loop whose iterations are executed in par allel. The loop terminates only when all its iterations have terminated. For a complete description of these constructs, refer to [3] and [8]. 4 Monitor Library 4.1 Specification A monitor <ref> [2, 6] </ref> is a collection of data and functions that manipulate this data.
Reference: [7] <author> P. A. G. Sivilotti. </author> <title> A verified integration of imperative parallel programming paradigms in an object-oriented language. </title> <type> Technical Report CS-TR-93-21, </type> <institution> Computer Science Dept., California Institute of Technology, </institution> <year> 1993. </year>
Reference-contexts: will be allowed to enter the monitor, subject to the constraints of mutual exclusion and of the num ber that became ready. busy _ (#enter = #became ready) (11) 4.3.3 Correctness By annotating the implementation with assertions and ghost variables, the assertions (4)-(11) can be shown to be invariantly true <ref> [7] </ref>. Note that the assertions need not hold inside of atomic actions, but only at the beginning and end of such actions. <p> 1) , f property of min g (#enter min (#became ready; #leave + 1)) ^ (#enter min (#became ready; #leave + 1)) , f antisymmetry of g #enter = min (#became ready; #leave + 1) Similarly, (1) follows directly from (4) and (5), and (3) follows from (7) - (10) <ref> [7] </ref>. 4.4 Example Program Problem Description Producer processes deposit messages into a finite buffer, and consumer processes remove them. A producer may deposit a message if there is at least one empty slot. A consumer may remove a message if there is at least one full slot. <p> The conjunction of the specifications (12) and (13) follows from the conjunction of these invariants. <ref> [7] </ref> 5.4 Example Program Problem Description Each process in a mesh begins with an initial value. At each iteration, every process calculates its new value as a weighted average of its old value and the values of its neighbors. <p> Each construct has been specified formally, im plemented, and rigorously verified. Example programs have been given to illustrate the ease with which these concepts can be used in CC ++ . A similar approach has also been used to integrate semaphores and ported channels in CC ++ <ref> [7] </ref>. It is interesting to note the brevity and simplicity of the proofs of correctness for these libraries. Only predicate logic was required in each case, since the specifications were given entirely in terms of safety properties. This was possible because of the concept of atomicity in CC ++ .
Reference: [8] <author> P. A. G. Sivilotti and P. A. Carlin. </author> <title> A tutorial for CC++. </title> <type> Technical Report CS-TR-94-02, </type> <institution> Computer Science Dept., California Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: If a process attempts to read a single-assignment variable that has not yet been defined, that process suspends until the variable becomes defined [4, Section 2.1]. We demonstrate that this single-assignment paradigm is consistent with traditional imperative communication and synchronization schemes, and furthermore that CC ++ <ref> [3, 8] </ref> | an object-oriented language based on C ++ that incorporates single-assignment variables, atomic functions, and parallel composition | can support and seamlessly integrate these schemes with object-orientation. This support and integration is demonstrated by providing a collection of generic libraries whose correctness is formally verified. <p> The block terminates only when all its statements have terminated. parfor: a loop whose iterations are executed in par allel. The loop terminates only when all its iterations have terminated. For a complete description of these constructs, refer to [3] and <ref> [8] </ref>. 4 Monitor Library 4.1 Specification A monitor [2, 6] is a collection of data and functions that manipulate this data.
References-found: 8

