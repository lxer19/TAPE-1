URL: http://www.cs.bu.edu/techreports/96-002-rtdbs-admission-control.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (best@cs.bu.edu)  (nagy@cs.bu.edu)  
Title: An Admission Control Paradigm for Real-Time Databases  
Author: Azer Bestavros Sue Nagy 
Keyword: Admission control; real-time databases; concurrency control; scheduling; and resource management.  
Note: This work has been partially supported by NSF (grant CCR-9308344).  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: We propose and evaluate an admission control paradigm for RTDBS, in which a transaction is submitted to the system as a pair of processes: a primary task, and a recovery block. The execution requirements of the primary task are not known a priori, whereas those of the recovery block are known a priori. Upon the submission of a transaction, an Admission Control Mechanism is employed to decide whether to admit or reject that transaction. Once admitted, a transaction is guaranteed to finish executing before its deadline. A transaction is considered to have finished executing if exactly one of two things occur: Either its primary task is completed (successful commitment), or its recovery block is completed (safe termination). Committed transactions bring a profit to the system, whereas a terminated transaction brings no profit. The goal of the admission control and scheduling protocols (e.g., concurrency control, I/O scheduling, memory management) employed in the system is to maximize system profit. We describe a number of admission control strategies and contrast (through simulations) their relative performance. 
Abstract-found: 1
Intro-found: 1
Reference: [Abbo88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> "Scheduling real-time transactions." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 71-81, </pages> <year> 1988. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions [Jens85, Lock86] have been utilized in both general real-time systems [Biya88, Butt95] as well as in RTDMBS <ref> [Abbo88, Huan89, Stan88] </ref>. In [Biya88, Butt95], the value of a task is evaluated during the admission control process. The 13 decision to reject a task or remove a previously guaranteed task is based upon tasks' values.
Reference: [Best94] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> "Timeliness via speculation for real-time databases." </title> <booktitle> In Proceedings of RTSS'94: The 14 th IEEE Real-Time System Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The WACM is responsible for ensuring that admitted transactions do not overburden the system by requiring computing resources (e.g., CPU time) that are not sustainable. In this paper we assume that an Optimistic Concurrency Control Algorithm with forward validation (such as OCC-BC [Mena82] or SCC-nS <ref> [Best94] </ref>) is used to ensure serializability. OCC techniques are better suited for systems with controllable utilization [Hari90], which is the case in a system with admission control like ours. 3 We adopt a 2-level priority scheme to schedule system resources (e.g., CPU). <p> The novelty of this approach is that it allows a single transaction processing protocol to be carried uniformly on all types of transactions. The efficacy of this approach has been demonstrated by applying it to the concurrency control problem in RTDBS. In particular, speculative concurrency control algorithms <ref> [Best94] </ref> were extended to work under this framework and were shown|in detailed simulation studies|to yield superior performance. The notion of value functions is a generalization of the earlier work of Biyabani et al. [Biya88], Huang et al. [Huan89], and Chakravarthy et al. [Chak94]. <p> Such a generalized admission control manager is under development. 10 In particular, the read/write sets of recovery blocks could be used by an SCC-nS <ref> [Best94] </ref> algorithm to determine when shadow transactions are to be created. 17
Reference: [Best95] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> "Value-cognizant speculative concurrency control." </title> <booktitle> In Proceedings of VLDB'95: The International Conference on Very Large Databases, </booktitle> <address> Zurich, Switzerland, </address> <month> Spetember </month> <year> 1995. </year>
Reference-contexts: This is similar to our work in <ref> [Best95] </ref>. 3 Our choice of an OCC-based algorithm is not crucial for the purpose of this paper. <p> Huang et al. [Huan89] use transaction values to schedule system resources (e.g., CPU) and in conflict resolution protocols in a soft real-time environment. Bestavros and Braoudakis <ref> [Best95] </ref> also employs value functions in a soft real-time system to determine whether it is more advantageous (i.e. adds more value to the system) to commit a transaction or to delay that commitment for a period of time. <p> A simulation study shows that higher guarantee levels require more system resources and therefore cost more than non-guaranteed transactions. In <ref> [Brao94, Best95] </ref>, Braoudakis takes a different approach, whereby transactions are associated with value functions that identify the nature of their timing constraints, as well as their overall importance to the system's mission.
Reference: [Biya88] <author> Sara Biyabani, John Stankovic, and Krithi Ramamritham. </author> <title> "The integration of deadline and criticalness in hard real-time scheduling." </title> <booktitle> In Proceedings of the 9th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions [Jens85, Lock86] have been utilized in both general real-time systems <ref> [Biya88, Butt95] </ref> as well as in RTDMBS [Abbo88, Huan89, Stan88]. In [Biya88, Butt95], the value of a task is evaluated during the admission control process. The 13 decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions [Jens85, Lock86] have been utilized in both general real-time systems <ref> [Biya88, Butt95] </ref> as well as in RTDMBS [Abbo88, Huan89, Stan88]. In [Biya88, Butt95], the value of a task is evaluated during the admission control process. The 13 decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> In particular, speculative concurrency control algorithms [Best94] were extended to work under this framework and were shown|in detailed simulation studies|to yield superior performance. The notion of value functions is a generalization of the earlier work of Biyabani et al. <ref> [Biya88] </ref>, Huang et al. [Huan89], and Chakravarthy et al. [Chak94]. Our work differs from previous research in that our system model incorporates not only primary tasks, with unknown WCET, but also recovery blocks.
Reference: [Brao94] <author> Spyridon Braoudakis. </author> <title> Concurrency Control Protocols for Real-Time Databases. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA 02215, expected June 1994. </address>
Reference-contexts: A simulation study shows that higher guarantee levels require more system resources and therefore cost more than non-guaranteed transactions. In <ref> [Brao94, Best95] </ref>, Braoudakis takes a different approach, whereby transactions are associated with value functions that identify the nature of their timing constraints, as well as their overall importance to the system's mission.
Reference: [Butt95] <author> G. Buttazzo, M. Spuri, and F. Sensini. </author> <title> "Value vs. deadline scheduling in overload conditions." </title> <booktitle> In Proceedings of the 16th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions [Jens85, Lock86] have been utilized in both general real-time systems <ref> [Biya88, Butt95] </ref> as well as in RTDMBS [Abbo88, Huan89, Stan88]. In [Biya88, Butt95], the value of a task is evaluated during the admission control process. The 13 decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions [Jens85, Lock86] have been utilized in both general real-time systems <ref> [Biya88, Butt95] </ref> as well as in RTDMBS [Abbo88, Huan89, Stan88]. In [Biya88, Butt95], the value of a task is evaluated during the admission control process. The 13 decision to reject a task or remove a previously guaranteed task is based upon tasks' values.
Reference: [Chak94] <author> S. Chakravarthy, D. Hong, and T. Johnson. </author> <title> "Incorporating load factor into the scheduling of soft real-time transactions." </title> <type> Technical Report TR94-024, </type> <institution> University of Florida, Department of Computer and Information Science, </institution> <year> 1994. </year>
Reference-contexts: In all cases, the WCET of the tasks is assumed to be known a priori. This notion of "cost consciousness" is similar to that investigated by Chakravarthy, Hong, and Johnson in <ref> [Chak94] </ref>, where a Cost Conscious Approach with Average Load Factor (CCA 9 This is in contrast to an absolute guarantee, which specifies that once admitted to a system, the task will complete its execution by its deadline. 14 ALF) is proposed and evaluated. <p> In particular, speculative concurrency control algorithms [Best94] were extended to work under this framework and were shown|in detailed simulation studies|to yield superior performance. The notion of value functions is a generalization of the earlier work of Biyabani et al. [Biya88], Huang et al. [Huan89], and Chakravarthy et al. <ref> [Chak94] </ref>. Our work differs from previous research in that our system model incorporates not only primary tasks, with unknown WCET, but also recovery blocks.
Reference: [Dert74] <author> M. L. Dertouzos. </author> <title> "Control robotics: The procedural control of physical processes." </title> <booktitle> In Proceedings IFIP Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: Since all tasks in the PTQ are ready to execute, a scheduling algorithm must be used to apportion the CPU time amongst these tasks. We use the Earliest Deadline First algorithm (EDF) [Liu73], which is optimal for a uniprocessor system with independent, preemptible tasks having arbitrary deadlines <ref> [Dert74] </ref>. 2.4 Concurrency Control Manager As each transaction finishes its execution, either by the commitment of its primary task or by the safe termination of its recovery block, the CCM must ensure that all other active transactions (i.e. primary tasks admitted to the system) that have data conflicts with the finished
Reference: [Goya95] <author> B. Goyal, J. Haritsa, S. Seshadri, and V. Srinivasan. </author> <title> "Index concurrency control in firm real-time dbms." </title> <booktitle> In Proceedings of the 21st VLDB Conference, </booktitle> <pages> pages 146-157, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Haritsa et al. [Hari91] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) scheduling strategy for transactions in a firm deadline environment. Goyal et al. <ref> [Goya95] </ref> describe an approach that allows transactions to be rejected as part of an optimization of the Load Adaptive B-link algorithm (LAB-link), a real-time version of index (B-tree) concurrency control algorithms in firm-deadline RTDBS.
Reference: [Hari90] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "On being optimistic about real-time constraints." </title> <booktitle> In Proceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year> <month> 18 </month>
Reference-contexts: In this paper we assume that an Optimistic Concurrency Control Algorithm with forward validation (such as OCC-BC [Mena82] or SCC-nS [Best94]) is used to ensure serializability. OCC techniques are better suited for systems with controllable utilization <ref> [Hari90] </ref>, which is the case in a system with admission control like ours. 3 We adopt a 2-level priority scheme to schedule system resources (e.g., CPU). In particular, all recovery blocks are assumed to have a higher priority than primary tasks.
Reference: [Hari91] <author> Jayant R. Haritsa, Miron Linvy, and Michael J. Carey. </author> <title> "Earliest deadline schedul-ing for real-time database systems." </title> <booktitle> In Proceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Also, this flexibility allows the system to ration its resources in the most profitable way, by only admitting high-value transactions when the system is overloaded, while being less choosy when the system is underloaded. Haritsa et al. <ref> [Hari91] </ref> incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) scheduling strategy for transactions in a firm deadline environment.
Reference: [Huan89] <author> J. Huang, J. A. Stankovic, D. Towsley, and K. Ramamritham. </author> <title> "Experimental evaluation of real-time transaction processing." </title> <booktitle> In Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions [Jens85, Lock86] have been utilized in both general real-time systems [Biya88, Butt95] as well as in RTDMBS <ref> [Abbo88, Huan89, Stan88] </ref>. In [Biya88, Butt95], the value of a task is evaluated during the admission control process. The 13 decision to reject a task or remove a previously guaranteed task is based upon tasks' values. <p> CCA-ALF is a best-effort scheduling strategy (i.e. no guarantees are given) that takes into account the dynamic aspects of transaction execution (e.g., system load) in addition to its static aspects (e.g., soft/firm deadlines) when making scheduling decisions. Huang et al. <ref> [Huan89] </ref> use transaction values to schedule system resources (e.g., CPU) and in conflict resolution protocols in a soft real-time environment. <p> In particular, speculative concurrency control algorithms [Best94] were extended to work under this framework and were shown|in detailed simulation studies|to yield superior performance. The notion of value functions is a generalization of the earlier work of Biyabani et al. [Biya88], Huang et al. <ref> [Huan89] </ref>, and Chakravarthy et al. [Chak94]. Our work differs from previous research in that our system model incorporates not only primary tasks, with unknown WCET, but also recovery blocks.
Reference: [Jens85] <author> E.D. Jensen, C.D. Locke, and J. Tokuda. </author> <title> "A time-driven scheduling model for real-time operating systems." </title> <booktitle> In Proceedings of the 6th Real-Time Systems Symposium, </booktitle> <pages> pages 112-122, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: In many systems, this assumption is not valid, making it necessary to consider the worth of a transaction, when making resource allocation and conflict resolution decisions. In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions <ref> [Jens85, Lock86] </ref> have been utilized in both general real-time systems [Biya88, Butt95] as well as in RTDMBS [Abbo88, Huan89, Stan88]. In [Biya88, Butt95], the value of a task is evaluated during the admission control process.
Reference: [Kim93] <author> Y. Kim and S. H. Son. </author> <title> "An approach towards predictable real-time transaction processing." </title> <booktitle> In Proceedings of the 5th Euromicro Workshop on Real-Time Systems, </booktitle> <pages> pages 70-75, </pages> <address> Oulu, Finland, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Two recent PhD theses have proposed novel transaction processing frameworks that allow RTDBS to apportion their resources in a value-cognizant fashion. In <ref> [Kim95, Kim93] </ref>, Kim establishes a RTDBS model which includes both hard and soft real-time transactions, maintains temporal and logical consistency of data [Rama93], and supports multiple guarantee levels.
Reference: [Kim95] <author> Young-Kuk Kim. </author> <title> Predictability and Consistency in Real-Time Transaction Processing. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Virginia, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Two recent PhD theses have proposed novel transaction processing frameworks that allow RTDBS to apportion their resources in a value-cognizant fashion. In <ref> [Kim95, Kim93] </ref>, Kim establishes a RTDBS model which includes both hard and soft real-time transactions, maintains temporal and logical consistency of data [Rama93], and supports multiple guarantee levels.
Reference: [Liu73] <author> C. L. Liu and J. Layland. </author> <title> "Scheduling algorithms for multiprogramming in hard real-time environments." </title> <journal> Journal of the Assocation of Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Since all tasks in the PTQ are ready to execute, a scheduling algorithm must be used to apportion the CPU time amongst these tasks. We use the Earliest Deadline First algorithm (EDF) <ref> [Liu73] </ref>, which is optimal for a uniprocessor system with independent, preemptible tasks having arbitrary deadlines [Dert74]. 2.4 Concurrency Control Manager As each transaction finishes its execution, either by the commitment of its primary task or by the safe termination of its recovery block, the CCM must ensure that all other active
Reference: [Lock86] <author> C. Locke. </author> <title> Best Effort Decision Making for Real-Time Scheduling. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Department of Computer Science, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: In many systems, this assumption is not valid, making it necessary to consider the worth of a transaction, when making resource allocation and conflict resolution decisions. In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions <ref> [Jens85, Lock86] </ref> have been utilized in both general real-time systems [Biya88, Butt95] as well as in RTDMBS [Abbo88, Huan89, Stan88]. In [Biya88, Butt95], the value of a task is evaluated during the admission control process.
Reference: [Mena82] <author> D. Menasce and T. Nakanishi. </author> <title> "Optimistic versus pessimistic concurrency control mechanisms in database management systems." </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: The WACM is responsible for ensuring that admitted transactions do not overburden the system by requiring computing resources (e.g., CPU time) that are not sustainable. In this paper we assume that an Optimistic Concurrency Control Algorithm with forward validation (such as OCC-BC <ref> [Mena82] </ref> or SCC-nS [Best94]) is used to ensure serializability. OCC techniques are better suited for systems with controllable utilization [Hari90], which is the case in a system with admission control like ours. 3 We adopt a 2-level priority scheme to schedule system resources (e.g., CPU).
Reference: [Rama93] <author> Krithi Ramamritham. </author> <title> "Real-time databases." </title> <journal> International journal of Distributed and Parallel Databases, </journal> <volume> 1(2), </volume> <year> 1993. </year>
Reference-contexts: Two recent PhD theses have proposed novel transaction processing frameworks that allow RTDBS to apportion their resources in a value-cognizant fashion. In [Kim95, Kim93], Kim establishes a RTDBS model which includes both hard and soft real-time transactions, maintains temporal and logical consistency of data <ref> [Rama93] </ref>, and supports multiple guarantee levels. Under this model, an integrated transaction processing scheme is devised, providing both predictability and consistency for RTDBS such that every application in the system is assured to achieve its own performance goal (the guarantee level) and maintain consistency requirement.
Reference: [Stan88] <author> John Stankovic and Wei Zhao. </author> <title> "On real-time transactions." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notion of transaction values and value functions [Jens85, Lock86] have been utilized in both general real-time systems [Biya88, Butt95] as well as in RTDMBS <ref> [Abbo88, Huan89, Stan88] </ref>. In [Biya88, Butt95], the value of a task is evaluated during the admission control process. The 13 decision to reject a task or remove a previously guaranteed task is based upon tasks' values.
References-found: 20

