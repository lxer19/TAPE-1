URL: ftp://ftp.cse.ogi.edu/pub/esr/reports/hpts-91.ps.gz
Refering-URL: http://www.cse.ogi.edu/~calton/publication.html
Root-URL: http://www.cse.ogi.edu
Email: Internet: calton@cs.columbia.edu  
Title: Generalized Transaction Processing with Epsilon-Serializability 1  
Author: Calton Pu 
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: We summarize the progress on epsilon-serializability (ESR), which is a generalization of serial-izability. ESR is the foundation of a generalized transaction processing system, allowing the application designers a fine-grained control in the trade-off between limited inconsistency and increased performance and availability. The paper outlines ESR as correctness criterion, the algorithms supporting it, and some applications that may benefit from it. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> first edition, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Serializability (SR) is the standard notion of correctness <ref> [1, 4] </ref> in transaction processing (TP). SR maintains database consistency: when a database only runs SR transactions, then (if the database starts out in a consistent state) the database is guaranteed to remain in a consistent state.
Reference: [2] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings of SIGMOD Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Similarly, a report generator (read-only) may import some inconsistency if it reads some uncommitted data. Besides this example where inconsistency is introduced by violating the commit-dependencies in the ACTA model <ref> [2] </ref>, there are other sources of inconsistency, some of them described in Section 3. Finally, we note that each ET specifies its own limits on inconsistency imported (called ImpLimit) and inconsistency exported (ExpLimit).
Reference: [3] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Traditionally, the queries that took the inconsistent value are considered OK by application semantics, even though the amount of inconsistency is potentially unbounded. (A proposal based on this reasoning is the work on Sagas <ref> [3] </ref>.) In GTP, we can check the amount of inconsistency taken in by each query and rerun them if necessary. 4.2 Independent Update Consistency Restoration In independent update consistency restoration methods, some "magic" is used to restore database consistency.
Reference: [4] <author> C.H. Papadimitriou. </author> <title> Serializability of concurrent updates. </title> <journal> Journal of ACM, </journal> <volume> 26(4) </volume> <pages> 631-653, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: 1 Introduction Serializability (SR) is the standard notion of correctness <ref> [1, 4] </ref> in transaction processing (TP). SR maintains database consistency: when a database only runs SR transactions, then (if the database starts out in a consistent state) the database is guaranteed to remain in a consistent state.
Reference: [5] <author> C. Pu and S.W. Chen. </author> <title> Implementation of a prototype superdatabase. </title> <booktitle> In Proceedings of the Workshop on Experimental Distributed Systems, </booktitle> <address> Huntsville, Alabama, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Beyond the R/W model, we will use semantics in ESR for consistency restoration. Another active area of research is the combination of these consistency restoration methods with the many methods of divergence control. Finally, we are designing the support of ESR in some prototype implementation such as Supernova <ref> [5] </ref> or Exodus. Since divergence control methods extend existing concurrency control methods and consistency restoration methods extend existing crash recovery methods, our design is simplified and implementation within a short period of time feasible.
Reference: [6] <author> C. Pu and A. Leff. Epsilon-serializability. </author> <type> Technical Report CUCS-054-90, </type> <institution> Department of Computer Science, Columbia University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: From the point of view of autonomy, sites may not wish to support this kind of tight coupling. We introduce the notion of epsilon-serializability (ESR) as a generalization of SR. The purpose of ESR <ref> [6] </ref> is to explicitly allow some limited amount of inconsistency, denoted by *. TP systems based on ESR are called generalized transaction processing (GTP) systems. GTP increases system throughput by alleviating data contention. For distributed TP systems, ESR allows asynchronous processing and therefore higher availability and autonomy.
Reference: [7] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: In addition, we are evaluating the benefits of ESR over SR. For example, how much concurrency is added for a given amount of inconsistency allowed? Also, how much availability is added when we use asynchronous replication based on ESR <ref> [7] </ref>? Other divergence control methods for semantics-based inconsistency specifications include commutativity and autonomous transaction processing. At the fourth level, we are developing consistency restoration methods for the R/W model, including distributed consistency restoration. Beyond the R/W model, we will use semantics in ESR for consistency restoration.
Reference: [8] <author> Calton Pu. </author> <title> Superdatabases for composition of heterogeneous databases. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Integration of Information Systems: Bridging Heterogeneous Databases, </booktitle> <pages> pages 150-157. </pages> <publisher> IEEE Press, </publisher> <year> 1989. </year> <booktitle> Also appeared in Proceedings of Fourth International Conference on Data Engineering, 1988, </booktitle> <address> Los Angeles. </address>
Reference-contexts: These complications may add to the cost of accumulating inconsistency in conflicts, but do not change the basic algorithm. Another design of distributed DC integrates different kinds of local concurrency control algorithms. This is based on the Superdatabase architecture <ref> [8] </ref>. The idea is that each component database will perform local DC and there will be a coordinator to validate the global serialization order. The coordinator in distributed DC would validate both the global ordering and the total amount of inconsistency.
Reference: [9] <author> K.L. Wu, P. S. Yu, and C. Pu. </author> <title> Divergence control for epsilon-serializability. </title> <type> Technical Report CUCS-002-91, </type> <institution> Department of Computer Science, Columbia University, </institution> <month> February </month> <year> 1991. </year> <note> Also available as IBM Tech Report No. RC16598. 8 </note>
Reference-contexts: Section 4 outlines the consistency restoration algorithms that bring the database back to a consistent state. 3 Divergence Control In another paper <ref> [9] </ref> we have described in detail a methodology to extend classic conflict-based concurrency control methods such as two-phase locking into a divergence control algorithm that guarantees ESR. Here we outline the methodology for the banking example. <p> There are some other DC methods, such as those based on timestamps and optimistic validation algorithms. The same extension/relaxation methodology transforms all conflict-based concurrency control methods into corresponding DC methods. We omit their description here and the interested reader is referred to <ref> [9] </ref>. Semantics-based concurrency control can be seen as optimizations of DC 4 methods. The way they improve transaction concurrency in classic concurrency control is to specify all kinds of conflicts and their resolution, for example, commutativity. This can be used the same way in DC methods as an optimization, too.
References-found: 9

