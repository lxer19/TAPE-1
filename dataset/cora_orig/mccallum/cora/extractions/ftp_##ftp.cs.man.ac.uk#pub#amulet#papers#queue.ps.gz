URL: ftp://ftp.cs.man.ac.uk/pub/amulet/papers/queue.ps.gz
Refering-URL: http://www.cs.man.ac.uk/amulet/publications/papers/async97_queue.html
Root-URL: http://www.cs.man.ac.uk
Email: -gilbertd, jgarside-@cs.man.ac.uk  
Author: D.A. Gilbert, J.D. Garside 
Address: Oxford Road, Manchester, M13 9PL, U.K.  
Affiliation: Department of Computer Science, The University of Manchester,  
Abstract: A Result Forwarding Mechanism for Asynchronous Pipelined Systems Abstract Modern, fast microprocessors are deeply pipelined to enhance their performance. Thus they cannot afford to wait for each instruction to complete before starting the next. When inter-instruction dependencies are encountered it is essential that data are forwarded from their point of production to where they are needed as rapidly as possible. This has been a problem in asynchronous processors because of the lack of synchronisation between the units producing and consuming the data. This paper presents a solution to this problem. The mechanism described allows the depth of speculative execution to be increased, improving memory efficiency by hiding the load latency yet still allowing precise exceptions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ARM Ltd., </author> <title> ARM Architecture Reference, </title> <month> July </month> <year> 1995. </year> <title> [2] van Berkel, K. Handshake Circuits An asynchronous archi tecture for VLSI programming, </title> <booktitle> International Series on Parallel Computation 5, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1993 </year>
Reference-contexts: Dependency hazards are avoided without recourse to register locking and in consequence the resulting latency of the circuits implementation is expected to be reduced significantly. The resultant structure will form a key part of the AMULET3; a third generation asynchronous implementation of the ARM processor <ref> [1] </ref>. 2. Asynchronous register forwarding 2.1: Earlier asynchronous dependency avoidance techniques In AMULET1 [5] operations are issued in order and dependencies resolved by waiting for register updates using register locking [9]. Although functional this is slow producing frequent dependency stalls and the locking mechanism increases the register read cycle time.
Reference: [3] <author> Elston, C.J., Christianson, </author> <title> D.B., Findlay, P.A., Steven, G.B., Hades Towards the design of an Asynchronous Superscalar Processor, </title> <booktitle> Proceedings 2nd Working Conference on Asynchronous Design Methodologies, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: If the instruction decoder detects that an operation reuses the result from the immediately preceding instruction the register read is bypassed; this provides some performance gain but is limited and only useful for unconditional results. A similar mechanism is employed in the Hades processor <ref> [3] </ref> although this benefits from last result registers in each of several functional units. AMULET2 also supports a load forwarding register which gives a similar benefit for loaded data. A radically different mechanism is used in the counter-ow pipeline architecture [11].
Reference: [4] <author> Endecott, P.B., SCALP: </author> <title> A Superscalar Asynchronous Low-Power Processor, </title> <type> PhD Thesis, </type> <institution> Department of Computer Science, University of Manchester, </institution> <note> 1996 http://www.cs.man.ac.uk/amulet/publications/thesis/ endecott96_phd.html </note>
Reference-contexts: The size of this structure renders it unsuitable for small, low power processor implementations such as AMULET3. Attempts have also been made to exploit the asynchronous, pipelined environment to avoid register storage and only forward results. An example is the SCALP architecture <ref> [4] </ref>. However this relies on a purpose designed instruction set and is thus not appropriate for implementing a currently existing commercial architecture. 2.2. Asynchronous FIFOs To date, most asynchronous processors have been engineered using Micropipeline [12] style FIFOs which pass data from latch to latch (fig. 2).
Reference: [5] <editor> Furber S.B., Day P., Garside J.D., </editor> <address> Paver N.C., Woods J.V., </address>
Reference-contexts: The resultant structure will form a key part of the AMULET3; a third generation asynchronous implementation of the ARM processor [1]. 2. Asynchronous register forwarding 2.1: Earlier asynchronous dependency avoidance techniques In AMULET1 <ref> [5] </ref> operations are issued in order and dependencies resolved by waiting for register updates using register locking [9]. Although functional this is slow producing frequent dependency stalls and the locking mechanism increases the register read cycle time.
References-found: 4

