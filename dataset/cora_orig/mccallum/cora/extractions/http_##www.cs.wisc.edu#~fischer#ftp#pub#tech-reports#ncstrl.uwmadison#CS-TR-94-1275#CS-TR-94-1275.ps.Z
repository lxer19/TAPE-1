URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-94-1275/CS-TR-94-1275.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-94-1275/
Root-URL: http://www.cs.wisc.edu
Note: Page 1 Abstract  
Abstract: Many commer cial micr oprocessor ar chitectures have added translation lookaside buffer (TLB) support for super-pages. Superpages dif fer from segments because their size must be a power of two multiple of the base page size and they must be aligned in both virtual and physical addr ess spaces. Very large superpages (e.g., 1MB) are clearly useful for mapping special str uctures, such as kernel data or frame buf fers. This paper considers the ar chitectural and operating system support r equired to exploit medium-sized superpages ( e.g., 64KB, i.e., sixteen times a 4KB base page size). First, we show that superpages impr ove TLB performance only after invasive operating system modifications that introduce considerable overhead. We then pr opose two subblock TLB designs as alternate ways to improve TLB performance. Analogous to a subblock cache, a completesubblock TLB associates a tag with a superpage-sized r egion but has valid bits, physical page number, attributes, etc., for each possible base page mapping. A partialsubblock TLB entry is much smaller than a completesubblock TLB entry , because it shar es physical page number and attribute fields acr oss base page mappings. A drawback of a partialsubblock TLB is that base page mappings can share a TLB entry only if they map to consecutive physical pages and have the same attributes. We propose a physical memory allocation algorithm, page reservation, that makes this sharing more likely. When page reservation is used, experimental r esults show partial-subblock TLBs perform better than superpage TLBs, while requiring simpler operating system changes. If operating system changes ar e inappr opriate, however , complete-subblock TLBs perform best. 
Abstract-found: 1
Intro-found: 1
Reference: [Appe91] <author> Andrew W. Appel and David B. MacQueen. </author> <title> Standard ML of New Jersey. </title> <booktitle> In Proc. Third International Symposium on Programming Language Implementation and Logic Programming, </booktitle> <pages> pages 113, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: compress, wave5, spice, and gcc ar e fr om the SPEC92 suite [SPEC91]; f ftpde is a NAS benchmark [Bail91] and operates on a 64X64X64 matrix; mp3d and pthor are uniprocessor versions from the SPLASH benchmark suite [Sing92]; coral [Rama93] is a deductive database executing a nested loop join; ML <ref> [Appe91] </ref> is executing a pr ogram that does a str ess test on the garbage collector [Repp94]. Table 5 displays benchmark data, with the benchmarks sorted fr om most to least per cent of user time spent on TLB miss handling.
Reference: [Bail91] <author> David Bailey, John Barton, Thomas Lasinski, and Horst Simon. </author> <title> The NAS Parallel Benchmarks. </title> <type> Report RNR-91-002 Revision 2, </type> <institution> Ames Research Center, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: W e concentrate on benchmarks where TLB miss handling is a significant part of the execution time, because we expect it to be tr ue for future workloads. Nasa7, compress, wave5, spice, and gcc ar e fr om the SPEC92 suite [SPEC91]; f ftpde is a NAS benchmark <ref> [Bail91] </ref> and operates on a 64X64X64 matrix; mp3d and pthor are uniprocessor versions from the SPLASH benchmark suite [Sing92]; coral [Rama93] is a deductive database executing a nested loop join; ML [Appe91] is executing a pr ogram that does a str ess test on the garbage collector [Repp94].
Reference: [Chen92] <author> J. Bradley Chen, Anita Borg, and Norman P. Jouppi. </author> <title> A Simulation Based Study of TLB Performance. </title> <booktitle> In Proc. of the 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 114123, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: While many commer cial ar chitectures support mediumsized superpages in their TLBs, ther e ar e few published studies on their impact on TLBs or operating systems. Kagimasa et al . [Kagi91] describe a system using two page sizes in a partitioned addr ess space. Chen et al. <ref> [Chen92] </ref> and T alluri et al. [T all92] pr esent data that supports the use of superpages. Khalidi et al. [Khal93] and Mogul [Mogu93] raise some operating system issues r esearchers should addr ess to support superpages. 2.
Reference: [Denn70] <author> Peter J. Denning. </author> <title> Virtual Memory. </title> <journal> Computing Surveys, </journal> <volume> 2(3):153189, </volume> <month> September </month> <year> 1970. </year>
Reference-contexts: 1. Introduction Most ar chitectures that support paged virtual memory <ref> [Denn70] </ref> accelerate addr ess translation with a Surpassing the TLB Performance of Superpages with Less Operating System Support Madhusudhan Talluri and Mark D. Hill. <p> Khalidi et al. [Khal93] and Mogul [Mogu93] raise some operating system issues r esearchers should addr ess to support superpages. 2. Operating System Support for Superpages Effective paged virtual memory <ref> [Denn70] </ref> r equires coordinated support fr om a computer s operating system and har dware ar chitecture. Operating system support for virtual memory with a single fixed page size is substantial but well-understood ( e.g., UNIX, VMS, NT , MACH).
Reference: [Devi92] <author> Yannick Deville and Jean Gobert. </author> <title> A class of replacement policies for medium and high associativity structures. Computer Architecture News, </title> <address> 20(1):5564, </address> <month> March </month> <year> 1992. </year> <title> Table 8: Key Results (Oversimplified) TLB Type Additiona l OS support TLB performance with fixed # of entries chip area Single-page-size None Worst Worst Complete-subblock None Best Medium Partial-subblock Best effort Almost Best Best Superpage Invasive Good Good </title>
Reference-contexts: In Table 5, we also include the cache miss counts, obtained from profiling counters on the machine. 5.4. TLB replacement algorithm We use a pseudo-LRU TLB r eplacement algorithm for fully-associative TLBs. The algorithm is similar to the Go Down Stack (GODS) algorithm described by Deville et al . <ref> [Devi92] </ref>. W e associate an used bit with every TLB entry that is set on hits to that entry .
Reference: [Good83] <author> James R. Goodman. </author> <title> Using Cache Memory to Reduce Processor-Memory Traffic. </title> <booktitle> In Proc. of the Tenth Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 124131, </pages> <address> Stockholm Sweden, </address> <month> June </month> <year> 1983. </year>
Reference-contexts: Second, completesubblock entries can map multiple base pages in situations where superpages cannot be used, such as, for unaligned 2. Subblocking [Hill84] is also called sectoring [Lipt68] and address/transfer blocks <ref> [Good83] </ref>. segments, small objects, nonuniform attributes. Thir d, set-associative subblock TLBs ar e straightforwar d, while superpage ones are not. Fourth, subblocking does not incr ease internal fragmentation or r equire additional I/O as superpages do (subblock caches, similarly, r educe bus bandwidth usage).
Reference: [Henn90] <author> John L Hennessy and David A Patterson. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <year> 1990. </year>
Reference-contexts: A TLB is a cache whose tags ar e virtual page numbers (VPN) and data are physical page numbers (PPN), page attributes ( e.g., protection, cacheability), and optional r eference and modified bits <ref> [Mile90, Henn90, Smit82] </ref>. TLBs must be studied again, because of curr ent workload and processor trends. Future workloads will demand gr eater TLB r each the maximum size of memory mapped by a TLBthan today.
Reference: [Hill84] <author> Mark D. Hill and Alan Jay Smith. </author> <title> Experimental Evaluation of On-Chip Microprocessor Cache Memories. </title> <booktitle> In Proc. of the 11th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 158166, </pages> <address> Ann Arbor MI, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: First, completesubblock TLBs allow applications to get all the benefits of using superpages with no operating system modifications beyond the TLB management code. Second, completesubblock entries can map multiple base pages in situations where superpages cannot be used, such as, for unaligned 2. Subblocking <ref> [Hill84] </ref> is also called sectoring [Lipt68] and address/transfer blocks [Good83]. segments, small objects, nonuniform attributes. Thir d, set-associative subblock TLBs ar e straightforwar d, while superpage ones are not.
Reference: [Joup94] <author> Norman P. Jouppi and Steven J. E. Wilson. </author> <title> Tradeoffs in Two-Level On-Chip Caching. </title> <booktitle> In Proc. of the 21st Annual International Symposium on Computer Architecture, </booktitle> <month> April </month> <year> 1994. </year> <note> (Also as) WRL Research Report 93/3. </note>
Reference-contexts: Here we size TLBs to get comparable number of TLB misses to see which TLB minimizes chip ar ea <ref> [Joup94, Nagl94] </ref>. We estimate the chip ar ea required to implement a single-ported TLB using the on-chip cache area model proposed by Mulder et al. [Muld91] with the assumptions given in Appendix A.
Reference: [Kagi91] <author> Toyohiko Kagimasa, Kikuo Takahashi, and Toshiaki Mori. </author> <title> Adaptive Storage Management for Very Large Virtual/Real Storage Systems. </title> <booktitle> In Proc. of the 18th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 372379, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: When operating system changes ar e inappropriate, complete-subblock TLBs perform best. While many commer cial ar chitectures support mediumsized superpages in their TLBs, ther e ar e few published studies on their impact on TLBs or operating systems. Kagimasa et al . <ref> [Kagi91] </ref> describe a system using two page sizes in a partitioned addr ess space. Chen et al. [Chen92] and T alluri et al. [T all92] pr esent data that supports the use of superpages.
Reference: [Kane92] <author> Gerry Kane and Joe Heinrich. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Ar chitectures that support superpages include MIPS R4x00, DEC Alpha, SP ARC, PowerPC, Intel, ARM, Motor ola 68K and HP P A-RISC. The MIPS R4000 <ref> [Kane92] </ref>, for example, supports a 4KB base page size and superpages of 16KB, 64KB, 256KB, 1MB, 4MB and 16MB. The clear motivation for supporting superpages is that using them appears to incr ease TLB r each for fr ee. <p> A completesubblock TLB entry with a subblock factor n has an n times lar ger data portion but a log 2 (n) bits smaller tag than a non-subblocked TLB entry . The MIPS R4x00 has, for example, a completesubblock TLB with a subblock factor of 2 <ref> [Kane92] </ref>. On a TLB miss, before attempting a replacement, the tags and valid bits are checked to see if an empty subblock can hold the mapping. Alternatively, all subblocks can be loaded on a TLB miss.
Reference: [Kess92] <author> R. E. Kessler and Mark D. Hill. </author> <title> Page Placement Algorithms for Large Real-Index Caches. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4):338359, </volume> <month> November </month> <year> 1992. </year>
Reference-contexts: W ith superpage size 64KB, for example, a page fault to addr ess 0x41034 allocates sixteen base pages: the object pages corr esponding to virtual addresses 0x40000, 0x41000, 0x42000,..., 0x4f000. 4. Page coloring <ref> [Tayl90, Kess92] </ref> also carefully selects physical pages for virtual addresses but for a different purpose and in a different way than page reservation.
Reference: [Khal93] <author> Yousef A. Khalidi, Madhusudhan Talluri, Michael N. Nelson, and Dock Williams. </author> <title> Virtual Memory Support for Multiple Page Sizes. </title> <booktitle> In Proc. of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 104109, </pages> <address> Napa CA, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Kagimasa et al . [Kagi91] describe a system using two page sizes in a partitioned addr ess space. Chen et al. [Chen92] and T alluri et al. [T all92] pr esent data that supports the use of superpages. Khalidi et al. <ref> [Khal93] </ref> and Mogul [Mogu93] raise some operating system issues r esearchers should addr ess to support superpages. 2. Operating System Support for Superpages Effective paged virtual memory [Denn70] r equires coordinated support fr om a computer s operating system and har dware ar chitecture.
Reference: [Knut68] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Volume 1. </volume> <publisher> Addison Wesley, </publisher> <year> 1968. </year> <note> Second Printing. </note>
Reference-contexts: Second, the changes required for efficient superpage support ar e invasive and af fect lar ge portions of existing operating systems. Physical memory management, for example, must be over hauled to handle variable sizes and external fragmentation <ref> [Knut68, Pete77] </ref>. Many key data str uctures ( e.g., page tables) and interfaces need to be r edesigned. Use of superpages often conicts with file system r ead-ahead and r equires coor dination on what would otherwise have been local policy decisions. <p> Page Fault Handling Superpages increase pagefault latency and program execution time. Operating sys tems would otherwise overlap some of the I/O with execution. Physical Memory Management & Page promotion: Allocate Physical memory cannot be treated as equal-sized pages. Requires an algorithm to efficiently allocate memory in variable-sized chunks <ref> [Knut68] </ref>. Physical Memory Management During periods of high memory demand, external fragmentation prevents use of superpages. Many of the operating system modifications for superpages continue to add overhead, even though there is no further TLB benefit. <p> Memory management techniques for variablesized objects have been studied extensively . There ar e well-known techniques to minimize external fragmentation <ref> [Knut68, Pete77] </ref>. Some file systems also use similar techniques to reserve disk space [McKu84]. Page r eservation significantly impr oves the performance of partialsubblock TLBs and reduces page promotion cost if using superpages. However , we did not study the ef fect of page r eservation on cache behavior. 5.
Reference: [Lipt68] <author> J. S. Liptay. </author> <title> Structural aspects of the System/360 Model 85, Part II: the cache. </title> <journal> IBM Systems Journal, </journal> <volume> 7(1):1521, </volume> <year> 1968. </year>
Reference-contexts: First, completesubblock TLBs allow applications to get all the benefits of using superpages with no operating system modifications beyond the TLB management code. Second, completesubblock entries can map multiple base pages in situations where superpages cannot be used, such as, for unaligned 2. Subblocking [Hill84] is also called sectoring <ref> [Lipt68] </ref> and address/transfer blocks [Good83]. segments, small objects, nonuniform attributes. Thir d, set-associative subblock TLBs ar e straightforwar d, while superpage ones are not. Fourth, subblocking does not incr ease internal fragmentation or r equire additional I/O as superpages do (subblock caches, similarly, r educe bus bandwidth usage).
Reference: [McKu84] <author> M. K. McKusick, W. N. Joy, S. J. Leffler, and R. S. </author> <note> Fabry. </note>
Reference-contexts: Memory management techniques for variablesized objects have been studied extensively . There ar e well-known techniques to minimize external fragmentation [Knut68, Pete77]. Some file systems also use similar techniques to reserve disk space <ref> [McKu84] </ref>. Page r eservation significantly impr oves the performance of partialsubblock TLBs and reduces page promotion cost if using superpages. However , we did not study the ef fect of page r eservation on cache behavior. 5.
References-found: 16

