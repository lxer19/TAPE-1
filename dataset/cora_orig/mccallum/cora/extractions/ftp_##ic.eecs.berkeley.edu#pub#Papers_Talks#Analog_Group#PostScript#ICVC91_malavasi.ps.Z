URL: ftp://ic.eecs.berkeley.edu/pub/Papers_Talks/Analog_Group/PostScript/ICVC91_malavasi.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/murgai/publications/my_publications.html
Root-URL: 
Title: VIRTUAL SYMMETRY AXES FOR THE LAYOUT OF ANALOG IC'S  
Author: Enrico Malavasi Edoardo Charbon Gani Jusuf Roberto Totaro Alberto Sangiovanni-Vincentelli 
Address: Berkeley CA 94720  I- 35151 Padova ITALY  
Affiliation: Dept. of EECS University of California, Berkeley  DEI, Universita di Padova  
Abstract: A new approach to the layout of integrated circuits with multiple symmetry axes is presented in this paper. When more than one symmetry is present, the usual approach to placement and compaction makes extensive use of hierarchy, which requires fixed positions for symmetry axes. As a result, wiring and area optimizations are poor. The position of a virtual symmetry axis is variable, and dynamically defined by the center of a group of symmetric modules and wires called cluster. Virtual symmetry axes have been implemented in a placement tool using the Simulated Annealing algorithm and in a compaction tool based on the constraint-graph longest-path algorithm. Results are shown proving the suitability of this approach.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. M. Pelgrom, A. C. J. Duinmaijer, and A. P. G. Welbers, </author> <title> "Match ing Properties of MOS Transistors", </title> <journal> IEEE JSSC, </journal> <volume> vol. 24, </volume> <pages> pp. 1433-1440, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: An effective way to meet tight matching requirements is to implement a geometrically symmetric layout. Symmetric interconnections have similar geometries and therefore their parasitics are well matched. Symmetric devices have the same size and mirrored orientation, which yields well matched characteristics <ref> [1] </ref> provided the distance between them is not too large. 1 In complex circuits, it is important to keep certain groups of devices clustered. The reason is not only to achieve better matching, but also to improve routability. Each cluster may have its own symmetry requirements.
Reference: [2] <editor> J. Rijmenants et al., "ILAC: </editor> <title> An Automated Layout Tool for Analog CMOS Circuits", </title> <booktitle> in Proc. IEEE CICC, </booktitle> <pages> pp. 761-764, </pages> <month> May </month> <year> 1988. </year> <month> 6 </month>
Reference-contexts: The reason is not only to achieve better matching, but also to improve routability. Each cluster may have its own symmetry requirements. Different groups of devices and interconnections may be symmetric with respect to independent symmetry axes. A few CAD frameworks address this issue. In ILAC <ref> [2] </ref>, symmetries are considered during placement but not during compaction. In ACACIA, [3], provision is made for one symmetry axis at a time. The only way to take into account more than one axis is by extensive use of hierarchy. This helps in simplifying the design of complex objects.
Reference: [3] <author> J.M.Cohn, D.J.Garrod, R.A.Rutenbar, and L.R.Carley, </author> <title> "New Algo rithms for Placement and Routing of Custom Analog Cells in ACACIA", </title> <booktitle> in CICC, </booktitle> <pages> pp. 2761-2765, </pages> <year> 1990. </year>
Reference-contexts: Each cluster may have its own symmetry requirements. Different groups of devices and interconnections may be symmetric with respect to independent symmetry axes. A few CAD frameworks address this issue. In ILAC [2], symmetries are considered during placement but not during compaction. In ACACIA, <ref> [3] </ref>, provision is made for one symmetry axis at a time. The only way to take into account more than one axis is by extensive use of hierarchy. This helps in simplifying the design of complex objects.
Reference: [4] <author> R.Okuda, T.Sato, H.Onodera, and K.Tamaru, </author> <title> "An Efficient Algorithm for Layout Compaction Problem with Symmetry Constraints", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 148-151, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The only way to take into account more than one axis is by extensive use of hierarchy. This helps in simplifying the design of complex objects. However, it also makes area optimization in the layout poorer, since it introduces stylization and restrictions on geometries and wiring. In <ref> [4] </ref> symmetric compaction is solved as a linear programming problem with a number of additional symmetry constraints. However this approach is computationally acceptable only where the number of symmetry requirements is fairly small compared with the number of elements in the circuit.
Reference: [5] <author> Andrea Casotto, Fabio Romeo, and Alberto Sangiovanni-Vincentel li, </author> <title> "A Parallel Simulated Annealing Algorithm for the Placement of Macro-Cells", </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. CAD-6(5), </volume> <month> September </month> <year> 1987. </year>
Reference-contexts: At the same time, the goal of area optimization is not contrasted by fixed user-defined axis positions. 3 Placement Virtual symmetry axes have been introduced into a placement tool called puppy <ref> [5] </ref>, based on the Simulated Annealing (S.A.) algorithm [6]. S.A. is a non-deterministic, iterative minimization algorithm. At each iteration, the variation of the objective function, or cost function, deriving from random modifications of the configuration is evaluated. State transitions leading to smaller cost function values are always accepted.
Reference: [6] <author> E. H. L. Aarts and P. J. M. van Laarhoven, </author> <title> Simulated Annealing: Theory and Applications, </title> <address> D. </address> <publisher> Reidel Publishing, </publisher> <year> 1987. </year>
Reference-contexts: At the same time, the goal of area optimization is not contrasted by fixed user-defined axis positions. 3 Placement Virtual symmetry axes have been introduced into a placement tool called puppy [5], based on the Simulated Annealing (S.A.) algorithm <ref> [6] </ref>. S.A. is a non-deterministic, iterative minimization algorithm. At each iteration, the variation of the objective function, or cost function, deriving from random modifications of the configuration is evaluated. State transitions leading to smaller cost function values are always accepted.
Reference: [7] <author> J.R.Burns and A.R.Newton, "SPARCS: </author> <title> A New Constraint-Based IC Symbolic Layout Spacer", </title> <booktitle> in Proc. of IEEE CICC, </booktitle> <pages> pp. 534-539, </pages> <year> 1986. </year>
Reference-contexts: We calculate axis positions after each temperature decrement. The principle of virtual symmetry axes still holds and convergence of S.A. is preserved. 4 Compaction An algorithm for analog compaction using virtual symmetry axes has been implemented in a tool called sparcs <ref> [7] </ref>, based on the mono-dimensional longest-path search compaction algorithm [8]. The algorithm is alternatively repeated in orthogonal directions in an iterative approach. Sparcs is a constraint-based symbolic layout spacer.
Reference: [8] <author> A. Mlynsky and C.-H. Sung, </author> <title> "Layout Compaction", in Layout De sign and Verification, </title> <journal> ch. </journal> <volume> 6, </volume> <pages> pp. 199-235. </pages> <address> T.Ohtsuki Ed.,North Holland, </address> <year> 1986. </year>
Reference-contexts: The principle of virtual symmetry axes still holds and convergence of S.A. is preserved. 4 Compaction An algorithm for analog compaction using virtual symmetry axes has been implemented in a tool called sparcs [7], based on the mono-dimensional longest-path search compaction algorithm <ref> [8] </ref>. The algorithm is alternatively repeated in orthogonal directions in an iterative approach. Sparcs is a constraint-based symbolic layout spacer. Hence it can deal with one symmetry axis by means of a set of constraints that can be specified to require symmetries between modules and wire segments.
Reference: [9] <author> Y. Z. Liao and C. K. Wong, </author> <title> "An Algorithm to Compact a VLSI Sym bolic Layout with Mixed Constraints", </title> <journal> IEEE Trans. on CAD, </journal> <volume> CAD-2, </volume> <pages> pp. 62-69, </pages> <month> April </month> <year> 1983. </year>
Reference-contexts: During the i-th step, the shape of the cluster of axis ~ i may change, but the position of ~ i is fixed. The other axes are dynamically defined by their clusters, since they are all virtual. Longest-path worst-case running time performance is O (LU ) per iteration <ref> [9] </ref>, where L and U are the numbers of the lower- and upper-bound branches respectively in the constraint graph. Each symmetry constraint introduces at most two branches, a lower-bound and an upper-bound.
Reference: [10] <author> E. Malavasi, M. Chilanti, and R. Guerrieri, </author> <title> ""A General Router for Analog Layout"", </title> <booktitle> in Proc. COMPEURO '89, Hamburg, </booktitle> <pages> pp. 549-551, </pages> <month> May </month> <year> 1989. </year> <pages> 7 8 9 10 </pages>
Reference-contexts: In figure 2, the two op-amps have been placed non-hierarchically, with virtual symmetry axes, in the same area. Symmetry has been preserved for each op-amp. Slight differences are present between the two devices. Interconnections between the op-amps were taken into account during placement. The layout was routed with road <ref> [10] </ref>, an analog router able to control symmetries and parasitics. In figure 3 the circuit is shown with the same area, but different aspect ratio. The axes were aligned during placement and the two devices merged in a configuration defined mainly on the ground of aspect ratio and routability considerations.
References-found: 10

