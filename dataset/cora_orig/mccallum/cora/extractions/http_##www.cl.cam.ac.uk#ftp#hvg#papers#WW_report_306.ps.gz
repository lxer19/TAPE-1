URL: http://www.cl.cam.ac.uk/ftp/hvg/papers/WW_report_306.ps.gz
Refering-URL: http://www.cl.cam.ac.uk/Research/HVG/FTP/FTP.html
Root-URL: 
Title: Recording hol Proofs  
Author: Wai Wong 
Note: Contents  
Date: 30 July 1993  
Abstract: This paper describes a text file format for recording hol proofs. It is intended to become an interface between hol and proof checkers. Modification to hol88 has been carried out to incorporate a proof recorder to generate a proof file in this format. The usage of this new feature is explained by a simple example. A more substantial proof has been recorded, and benchmark data is presented here.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. J. Boulton. </author> <title> On efficiency in theorem provers which fully expand proofs into primitive inferences. </title> <type> Technical Report 248, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1992. </year>
Reference-contexts: Derived rules are also represented by ML functions. Many of them are implemented in terms of the primitive rules, i.e., calling the ML functions representing the primitive rules. A theorem prover in which all proofs are fully expanded into primitive inferences is known as fully-expansive <ref> [1] </ref>. The advantage of this type of theorem prover is that the soundness of the proof is guaranteed since every primitive inference step is actually performed. However, this is very expensive in terms of both time and space for any sizable proof.
Reference: [2] <author> M. J. C. Gordon. </author> <title> LCF LSM, a system for specifying and verifying hardware. </title> <type> Technical Report 41, </type> <institution> University of Cambridge Computer Laborartory, </institution> <year> 1983. </year>
Reference-contexts: These lower level output functions are organised in recursive descend fashion. 8 Benchmarking A proof of correctness of a simple multiplier described in <ref> [2] </ref> is often used as a hol benchmark. This is a small to medium size proof which generates 14500 intermediate theorems. We recorded and saved this proof in proof files. The hol source of this proof is divided into four files, each contains a number of sub-proofs.
Reference: [3] <editor> M.J.C. Gordon and T.F. Melham, editors. </editor> <title> Introduction to HOL|a theorem proving environment for higher order logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Section 7 describes the modification to hol88 for recording proofs and generating proof files. Section 8 shows a non-trivial example proof as a benchmark. 2 Proofs in hol A detailed description of the hol logic and several tutorial examples of using the hol system can be found in <ref> [3] </ref>. For the benefit of readers who are not familiar with hol, an overview of the hol deductive system and the theorem-proofing infrastructure is given in this section. A proof is a finite sequence of inferences in a deductive system. <p> The derivations of the remaining 17 rules use the derived Recording HOL Proofs 20 rules listed above in addition to the primitive rules, thus, they are less tedious. Some of these derivations can be found in Section 22.3 of <ref> [3] </ref>. * Adding an assumption ADDASSUM term NUMBER ` t ADD_ASSUM : term -&gt; thm -&gt; thm The term is the new assumption t 0 to be added to the theorem. 1. t 0 ` t 0 [ASSUME] 2. ` t [Hypothesis] 3. ` t 0 t [DISCH 2] 4. ;
Reference: [4] <institution> Ministry of Defence. Requirements for the procurment of safety-critical software in defence equipment. </institution> <type> Interim Standard 00-55 (Part 2), </type> <month> April </month> <year> 1991. </year> <title> Recording HOL Proofs 50 </title>
Reference-contexts: A proof checker can be a relatively simple program and thus can itself be verified by Formal Proof", quoted from Part 2, 32.1.3 of <ref> [4] </ref>.
Reference: [5] <author> J. von Wright. </author> <title> Representing higher-order logic proofs in HOL. </title> <type> Draft report, </type> <month> May </month> <year> 1993. </year>
Reference-contexts: Currently, research is being carried out to formalise the notion of higher-order logic proofs in hol <ref> [5] </ref>. This will provide a theoretical foundation for a proof checker. This report describes a proof file format prf, which acts as an interface between hol and a proof checker, and an enhancement to hol88 to record proofs and to generate proof files in this format.
Reference: [6] <author> J. Ziv and A. Lempel. </author> <title> A universal algorithm for sequential data compression. </title> <journal> IEEE Transaction on Information Theory, </journal> <volume> 23(3) </volume> <pages> 337-343, </pages> <month> May </month> <year> 1977. </year>
Reference-contexts: The size of the compressed files is much smaller. It amounts to less than 2% of the raw size. The compress program used is gzip, a public domain program which implements the well-known Lempel-Ziv coding (LZ77) algorithm <ref> [6] </ref>. As the compression is done automatically, this does not pose too much burden to the user. It should also be emphasized that the user is not restricted to use only basic inference rules described above.
References-found: 6

