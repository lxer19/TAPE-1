URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-36.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Remco.Veltkamp@cs.ruu.nl  Farhad.Arbab@cwi.nl  
Title: Interactive Geometric Constraint Satisfaction  
Author: Remco C. Veltkamp Farhad Arbab 
Keyword: I.3 [Computer Graphics] Graphics utilities, Computational geometry and object modeling. J.6 [Computer Aided Engineering] Computer aided design. Key Words and Phrases: geometric constraints, incremental constraint satisfaction, computer aided design.  
Note: 1991 Computing Reviews Classification: I.2 [Artificial Intelligence] Problem solving.  
Address: Padualaan 14, 3584 CH Utrecht, The Netherlands  Kruislaan 413, 1098 SJ Amsterdam, The Netherlands  
Affiliation: Utrecht University, Department of Computing Science  CWI, Department of Interactive Systems  
Abstract: This paper presents a new incremental approach to geometric constraint satisfaction that is tailored to interactive applications. Our approach categorizes solutions into geometric primitives representing a range of solutions with uniform geometric characteristics. This scheme keeps intermediate solutions in the geometric domain, providing geometrically meaningful feedback to the user and the ability to interlace the interpretation of previous and new geometric constraints on the same high level of abstraction. This approach preserves the declarative semantics of constraints and leads to a number of advantages, including graceful handling of underconstrained specifications, the natural processing of expressions of both conjunctive and disjunctive constraints, the ability to perform satisfaction locally and incrementally, and support for constraint inference and geometric reasoning.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Sannella. </author> <title> Constraint satisfaction and debugging for Interactive User Interfaces. </title> <type> (Ph.D. dissertation), Technical Report 94-09-10, </type> <institution> Dept. Computer Science and Engineering, University of Washington, </institution> <address> Washington, </address> <year> 1993. </year>
Reference-contexts: 1. Introduction Constraints specify dependency relations between objects which must be satisfied and maintained by some constraint management system. Constraint systems are used in a wide range of applications, including user interface design <ref> [1] </ref>, animation [2], geometric modeling [3], and artificial intelligence [4]. Geometric constraints can fix one or more degrees of freedom for positioning, orientation and dimensioning of the constraint variables. <p> Constraints may be multi-directional, i.e. each of the involved variables constrains the others, again depending on the constraint type. Multi-directional constraints provide a natural way to impose certain relations <ref> [1] </ref>. <p> It uses both propagation of degrees of freedom and propagation of known states. Both systems provide a single solution to constraints. The work on ThingLab evolved into the SkyBlue constraint solver <ref> [1] </ref>, which makes an analysis of the constraint network and identifies loops, before performing local propagation. In the constraint-based geometric modeler Converge [26] the constraint network is partitioned, and the parts are solved numerically.
Reference: [2] <author> J.-F. Balaguer and E. Gobetti. </author> <title> Supporting Interactive Animation Using Multi-way Constraints. </title> <booktitle> In [37], </booktitle> <volume> 49 - 66. </volume>
Reference-contexts: 1. Introduction Constraints specify dependency relations between objects which must be satisfied and maintained by some constraint management system. Constraint systems are used in a wide range of applications, including user interface design [1], animation <ref> [2] </ref>, geometric modeling [3], and artificial intelligence [4]. Geometric constraints can fix one or more degrees of freedom for positioning, orientation and dimensioning of the constraint variables.
Reference: [3] <author> M. Dohmen. </author> <title> A survey of constraint satisfaction techniques for geometric modeling. </title> <journal> Computers & Graphics, </journal> <volume> 19(6), </volume> <year> 1995, </year> <pages> 831-845. </pages>
Reference-contexts: 1. Introduction Constraints specify dependency relations between objects which must be satisfied and maintained by some constraint management system. Constraint systems are used in a wide range of applications, including user interface design [1], animation [2], geometric modeling <ref> [3] </ref>, and artificial intelligence [4]. Geometric constraints can fix one or more degrees of freedom for positioning, orientation and dimensioning of the constraint variables. <p> Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular [13] [14] [15] [10] [11] [16] [17] <ref> [3] </ref>. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations.
Reference: [4] <author> E. Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press, </publisher> <year> 1993. </year>
Reference-contexts: 1. Introduction Constraints specify dependency relations between objects which must be satisfied and maintained by some constraint management system. Constraint systems are used in a wide range of applications, including user interface design [1], animation [2], geometric modeling [3], and artificial intelligence <ref> [4] </ref>. Geometric constraints can fix one or more degrees of freedom for positioning, orientation and dimensioning of the constraint variables. <p> Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] <ref> [4] </ref>, and constraint satisfaction in the geometric domain in particular [13] [14] [15] [10] [11] [16] [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations.
Reference: [5] <author> S. Baase. </author> <title> Computer Algorithms: Introduction to Design and Analysis. </title> <publisher> Addison-Wesley, </publisher> <year> 1978. </year>
Reference-contexts: This can be deduced from the fact that the CNF-satisfiability problem can be converted to it in polynomial time, and the CNF-satisfiability problem is NP-complete <ref> [5] </ref>. The CNF-satisfiability problem is to determine if there is a truth assignment (a way to assign the values true and false) for the variables in a logical expression in conjunctive normal form (CNF) such that the value of the expression is true.
Reference: [6] <author> J. H. Davenport, Y. Siret, and E. Tournier. </author> <title> Computer Algebra | systems and algorithms for algebraic computation. </title> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: Moreover, which root is found depends on the initial value of the variable. This makes the solution unpredictable in underconstrained situations. Numerical relaxation is also computationally expensive, and can be used only in continuous numeric domains. Other unstructured methods include algebraic manipulation <ref> [6] </ref> and augmented term rewriting [7]. Structured methods impose a structure on the set of constraints by grouping them into sets of dependent constraints. A set of dependent constraints can be represented as a network of constraints. These groups are satisfied independently.
Reference: [7] <author> W. Leler. </author> <title> Constraint Programming Languages, Their Specification and Generation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Moreover, which root is found depends on the initial value of the variable. This makes the solution unpredictable in underconstrained situations. Numerical relaxation is also computationally expensive, and can be used only in continuous numeric domains. Other unstructured methods include algebraic manipulation [6] and augmented term rewriting <ref> [7] </ref>. Structured methods impose a structure on the set of constraints by grouping them into sets of dependent constraints. A set of dependent constraints can be represented as a network of constraints. These groups are satisfied independently. Numerical computation of a group of constraints is often done by relaxation. <p> Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general <ref> [7] </ref> [4], and constraint satisfaction in the geometric domain in particular [13] [14] [15] [10] [11] [16] [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations.
Reference: [8] <author> A. K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8, </volume> <year> 1977, </year> <pages> 99 - 118. </pages>
Reference-contexts: We distinguish the following types of information to be inferred and propagated: a whole solution set, a single solution, algebraic expressions, and constraints. * Solution set inference makes deductions on the set of possible solutions, which are restricted by the constraints. Traditionally this is a finite domain <ref> [8] </ref>, but also continuous intervals of numerical values have been studied [9]. In single solution inference, constraint variables get assigned a single value, often numeric. * The operational approach [10], [11] performs single geometric solution inference. <p> That is, the solution is made locally consistent. When Tolerate (c) terminates (see next section), and an overconstrained case has not been detected, the solution sets of all variables are locally consistent (this is equivalent to arc consistency in <ref> [8] </ref>). When only conjunctive constraints are added to a network, Tolerate (c) amounts to the filtering algorithm of [19] for the labeling of edges in an image, the paradigm example of an arc consistency algorithm. <p> A propagation scheme is called complete if the solution it assigns to a variable represents accurately the set of values it can attain given the constraints, i.e. after propagation the network is arc consistent in the sense of <ref> [8] </ref>. In a constraint system whose propagation scheme is complete, we can consistently assign to any variable any value within its solution, and pick values for all the other variables so that all constraints are satisfied.
Reference: [9] <author> E. Davis. </author> <title> Constraint propagation with interval labels. </title> <journal> Artificial Intelligence, </journal> <volume> 32, </volume> <year> 1987, </year> <pages> 281 - 331. </pages>
Reference-contexts: Traditionally this is a finite domain [8], but also continuous intervals of numerical values have been studied <ref> [9] </ref>. In single solution inference, constraint variables get assigned a single value, often numeric. * The operational approach [10], [11] performs single geometric solution inference. It satisfies constraints sequentially by performing operations (translation, rotation, 6 etc.) on the geometric objects involved.
Reference: [10] <author> J. R. Rossignac. </author> <title> Constraints in constructive solid geometry. </title> <editor> In F. Crow and S. M. Pizer (editors), </editor> <booktitle> Proceedings of the 1986 ACM Workshop on Interactive 3D Graphics, </booktitle> <publisher> ACM Press, </publisher> <year> 1986, </year> <pages> 93 - 110. </pages>
Reference-contexts: Traditionally this is a finite domain [8], but also continuous intervals of numerical values have been studied [9]. In single solution inference, constraint variables get assigned a single value, often numeric. * The operational approach <ref> [10] </ref>, [11] performs single geometric solution inference. It satisfies constraints sequentially by performing operations (translation, rotation, 6 etc.) on the geometric objects involved. An already satisfied constraint either toler-ates an operation on one of its operands, or must propose a transformation to satisfy the constraint again. <p> Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular [13] [14] [15] <ref> [10] </ref> [11] [16] [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations. <p> However, in a geometric context we prefer a geometrical form for the solution. A possible geometric approach is the planning of transformations of the variables so as to satisfy constraints <ref> [10] </ref> [11] [17]. This may give rise to two problems: * The proposed solution is as intended, but the user is not aware of the ambiguity of the specification. The existence of alternative solutions may cause problems for post-processing. * The solution is not as intended. <p> In the constraint-based geometric modeler Converge [26] the constraint network is partitioned, and the parts are solved numerically. In Converge, a locus can be specified to define a constraint, whereas our loci (geometric primitives) result from constraints. <ref> [10] </ref> presents an operational interpretation of constraints in CSG modeling. Constraints are specified by users in terms of relations between boundary features, and are transformed by the system into rigid motions of parts of the CSG tree. An underconstrained situation can simply not occur.
Reference: [11] <author> F. Arbab and B. Wang. </author> <title> A geometric constraint management system in Oar. </title> <editor> In P. J. W. ten Hagen and P. Veerkamp (editors), </editor> <title> Intelligent CAD Systems III Practical Experience and Evaluation, </title> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> 231 - 252. </pages>
Reference-contexts: Traditionally this is a finite domain [8], but also continuous intervals of numerical values have been studied [9]. In single solution inference, constraint variables get assigned a single value, often numeric. * The operational approach [10], <ref> [11] </ref> performs single geometric solution inference. It satisfies constraints sequentially by performing operations (translation, rotation, 6 etc.) on the geometric objects involved. An already satisfied constraint either toler-ates an operation on one of its operands, or must propose a transformation to satisfy the constraint again. <p> Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular [13] [14] [15] [10] <ref> [11] </ref> [16] [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations. <p> However, in a geometric context we prefer a geometrical form for the solution. A possible geometric approach is the planning of transformations of the variables so as to satisfy constraints [10] <ref> [11] </ref> [17]. This may give rise to two problems: * The proposed solution is as intended, but the user is not aware of the ambiguity of the specification. The existence of alternative solutions may cause problems for post-processing. * The solution is not as intended. <p> An underconstrained situation can simply not occur. Users must specify the order of evaluation, and are responsible for solving conflicts. OTP (Operational Transformation Planning) <ref> [11] </ref> also provides an operational interpretation of constraints. It infers a single solution to the constraints.
Reference: [12] <author> G. L. Steele Jr. and G. J. Sussman. </author> <title> CONSTRAINTS A Language for Expressing Almost-Hierarchical Descriptions. </title> <journal> Artificial Intelligence, </journal> <note> 1980, 1 -39. </note>
Reference-contexts: In this way operations can be propagated through a constraint network until all operations are tolerated. * In constraint inference, implied constraints are derived and explicitly added to the network. Implied constraints can be recognized by a unification mechanism or by the use of multiple redundant views <ref> [12] </ref>. Finding implied constraints can be used to avoid extensive manipulations in cases where local propagation does not suffice.
Reference: [13] <author> I. E. Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <publisher> AFIPS Press, </publisher> <year> 1963, </year> <pages> 329 - 345. 22 </pages>
Reference-contexts: Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular <ref> [13] </ref> [14] [15] [10] [11] [16] [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations. <p> Juno is a simple system based on one geometric primitive: the point. It uses a Newton-Raphson iteration technique to solve constraints. The 19 user must supply an initial value to start the iteration. All these systems yield a single numerical solution. Sketchpad <ref> [13] </ref> was the first constraint-based drawing system. It satisfies constraints using propagation of degrees of freedom. When this fails, it resorts to relaxation. ThingLab [14] enlarges the possibilities of Sketchpad with extensibility and object-oriented techniques, so that new classes of objects and constraints can be defined.
Reference: [14] <author> A. Borning. </author> <title> The programming language aspects of ThingLab, a constraint-oriented simulation laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4), </volume> <year> 1981, </year> <pages> 353 - 387. </pages>
Reference-contexts: Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular [13] <ref> [14] </ref> [15] [10] [11] [16] [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations. <p> The 19 user must supply an initial value to start the iteration. All these systems yield a single numerical solution. Sketchpad [13] was the first constraint-based drawing system. It satisfies constraints using propagation of degrees of freedom. When this fails, it resorts to relaxation. ThingLab <ref> [14] </ref> enlarges the possibilities of Sketchpad with extensibility and object-oriented techniques, so that new classes of objects and constraints can be defined. It uses both propagation of degrees of freedom and propagation of known states. Both systems provide a single solution to constraints.
Reference: [15] <author> G. Nelson. Juno, </author> <title> a constraint-based graphics system. </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <year> 1985, </year> <pages> 235 - 243. </pages>
Reference-contexts: Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular [13] [14] <ref> [15] </ref> [10] [11] [16] [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations. <p> The dimensional constraints are defined by equations on coordinates of characteristic points. Each time a dimensional value is changed, the whole system of equations must be solved. Another system that turns all constraints into numerical equations is Juno <ref> [15] </ref>. Juno is a simple system based on one geometric primitive: the point. It uses a Newton-Raphson iteration technique to solve constraints. The 19 user must supply an initial value to start the iteration. All these systems yield a single numerical solution. Sketchpad [13] was the first constraint-based drawing system.
Reference: [16] <author> M. J. G. M. v. Emmerik. </author> <title> A system for interactive graphical modeling with 3D constraints. </title> <editor> In T. Chua and T. Kunii (editors), </editor> <booktitle> CG International '90, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> 361 - 376. </pages>
Reference-contexts: Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular [13] [14] [15] [10] [11] <ref> [16] </ref> [17] [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations. <p> Coupled degrees of freedom, however, cannot be neatly divided into translational and rotational degrees of freedom. A branch variable must choose from multiple discrete solutions. The value of each branch variable must be set by users, affecting the rest of the solution derivation. In <ref> [16] </ref> constraints relate coordinate systems. Constraints between degrees of freedom (for example between the x- and y-coordinate because of a distance constraint) are evaluated after lower-order constraints (for example one that uniquely determines the x-coordinate). This is a form of delayed satisfaction.
Reference: [17] <author> G. A. Kramer. </author> <title> Solving Geometric Constraint Systems. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Motivation Incremental satisfaction of geometric constraints arises naturally in many interactive applications in graphics and geometric modeling. A good deal of work has already been done on constraint satisfaction in general [7] [4], and constraint satisfaction in the geometric domain in particular [13] [14] [15] [10] [11] [16] <ref> [17] </ref> [3]. Many systems detect overconstrained situations, but cannot satisfactory handle un-derconstrained cases. For example, many numerical methods behave unpredictably when changes are made to an underconstraint set of constraint equations. <p> However, in a geometric context we prefer a geometrical form for the solution. A possible geometric approach is the planning of transformations of the variables so as to satisfy constraints [10] [11] <ref> [17] </ref>. This may give rise to two problems: * The proposed solution is as intended, but the user is not aware of the ambiguity of the specification. The existence of alternative solutions may cause problems for post-processing. * The solution is not as intended. <p> OTP (Operational Transformation Planning) [11] also provides an operational interpretation of constraints. It infers a single solution to the constraints. The satisfaction process is planned through symbolic reasoning on the geometric level, that is, by geometric reasoning [18]. <ref> [17] </ref> performs a degrees of freedom analysis on markers (local coordinate frames) on a geometric object, determining its translational and rotational degrees of freedom. If needed, a locus analysis is done akin to, but simpler than, our locus unit approach. Transformations are then generated so as to satisfy constraints.
Reference: [18] <author> F. Arbab and J. M. Wing. </author> <title> Geometric reasoning: A new paradigm for processing geometric information. </title> <editor> In H. Yoshikawa and E. A. Warman (editors), </editor> <title> Design Theory for CAD, </title> <publisher> Elsevier Science Publishers, </publisher> <year> 1985, </year> <pages> 145 - 165. </pages>
Reference-contexts: Note that not all combinations of types of constraints and variables need be geometrically meaningful; G may be defined only for a limited number of combinations. The generation of the locus units can involve geometric reasoning <ref> [18] </ref>, taking into account the nature of the constraint and the current locus units of the variables. For instance, consider again the example in the introduction. <p> In this example the intersection is clearly computable, but a particular implementation may not be able to perform this intersection. The locus unit generating function may use geometric reasoning <ref> [18] </ref>. Geometric reasoning can also facilitate constraint inferencing, the derivation of implied constraints. For example, given the constraints parallel (line1, line2) and parallel (line2, line3), the implied constraint parallel (line1, line3) can be derived. Constraints can also be restated, which can sometimes help the locus unit generating function. <p> OTP (Operational Transformation Planning) [11] also provides an operational interpretation of constraints. It infers a single solution to the constraints. The satisfaction process is planned through symbolic reasoning on the geometric level, that is, by geometric reasoning <ref> [18] </ref>. [17] performs a degrees of freedom analysis on markers (local coordinate frames) on a geometric object, determining its translational and rotational degrees of freedom. If needed, a locus analysis is done akin to, but simpler than, our locus unit approach. Transformations are then generated so as to satisfy constraints.
Reference: [19] <author> D. L. Waltz. </author> <title> Generating Semantic Descriptions from Drawings of Scenes with Shadows. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1972. </year>
Reference-contexts: When Tolerate (c) terminates (see next section), and an overconstrained case has not been detected, the solution sets of all variables are locally consistent (this is equivalent to arc consistency in [8]). When only conjunctive constraints are added to a network, Tolerate (c) amounts to the filtering algorithm of <ref> [19] </ref> for the labeling of edges in an image, the paradigm example of an arc consistency algorithm.
Reference: [20] <author> H.-W. Gusgen and J. Hertzberg. </author> <title> Some fundamental properties of local constraint propagation. </title> <journal> Artificial Intelligence, </journal> <volume> 36, </volume> <year> 1988, </year> <pages> 237 - 247. </pages>
Reference-contexts: Because constraints that have variables with changed locus units are placed in a first-in-first-out queue (as opposed to an unordered list), they are guaranteed to be revised again, whether the propagation is finite or infinite. This is called a fair propagation in <ref> [20] </ref>. 12 This algorithm performs incremental satisfaction of a new constraint c. <p> Because of the monotonicity of Evaluate (v i ; G (c; v i )), and the fairness of propagation in Tolerate (c), the following holds (see <ref> [20] </ref>): if there exists some terminating propagation resulting in a locally consistent solution, then Tolerate (c) will find it. Moreover, the solution is unique (though its representation in terms of locus units is not necessarily unique). Still, the propagation in Tolerate (c) need not terminate.
Reference: [21] <author> B. N. Freeman-Benson, J. Maloney, and A. Borning. </author> <title> An incremental constraint solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1), </volume> <year> 1990, </year> <pages> 54 - 63. </pages>
Reference-contexts: In our implementation we have chosen the first option, which is still better than many graphics systems can provide, see e.g. <ref> [21] </ref>. 4.2.2. Disjunctive constraint If a disjunctive constraint is added to the network, the solution sets of variables may get larger. This can more easily lead to an infinite loop than when the solution is restricted.
Reference: [22] <author> E. C. Freuder. </author> <title> Synthesizing constraint expressions. </title> <journal> Communications of the ACM, </journal> <volume> 21(11), </volume> <year> 1978, </year> <pages> 958 - 966. </pages>
Reference-contexts: However, all these whole solution sets do not necessarily satisfy all constraints simultaneously. All constraints together constitute a global constraint which does specify solution sets for each variable that wholy satisfy all constraints simultaneously. Derivation of these solution sets is done, for example, by <ref> [22] </ref>. Operations on a variable, such as translate, scale, mirror, and project, can be handled by performing proper corresponding operations on its locus units. The resulting new solution must then be propagated through the network. This is precisely what constraint maintenance is about: maintaining satisfied constraints when the variables change.
Reference: [23] <author> R. C. Veltkamp. </author> <title> Geometric constraint management with quanta. </title> <editor> In D. C. Brown, M. B. Waldron, and H. Yoshikawa (editors), </editor> <booktitle> Intelligent Computer Aided Design, </booktitle> <publisher> North-Holland, </publisher> <year> 1992, </year> <pages> 409 - 423. </pages>
Reference-contexts: So far we have seen zero and one-dimensional locus units. A two-dimensional unit (region) results from a constraint like inside (point, circle), yielding a disc. The same approach to geometric constraint satisfaction works in three-dimensional space <ref> [23] </ref>. However, it becomes more likely that a solution cannot be represented as the union of geometric primitives and must be represented as an unevaluated intersection of locus units, in which case the locus unit expressions are akin to CSG-trees. 6.
Reference: [24] <editor> GoPATH 1.2.0 | A Path To Object Oriented Graphics, </editor> <title> a public domain environment for graphical and interactive application development. Bull Imaging and Office Solutions, </title> <year> 1993. </year>
Reference-contexts: Implementation We have implemented our constraint satisfaction method and incorporated it into a drawing editor using GoPATH <ref> [24] </ref> [25]. All figures in this paper were made by this prototype 16 system. Apart from the constraints anchor, on, and distance which were used in section 1, we implemented constraints tangent and angle.
Reference: [25] <author> J. Davy. </author> <title> Go, a graphical and interactive C++ toolkit for application data presentation and editing. </title> <booktitle> In Proceedings 5th Annual Technical Conference on the X Window System, </booktitle> <year> 1991. </year>
Reference-contexts: Implementation We have implemented our constraint satisfaction method and incorporated it into a drawing editor using GoPATH [24] <ref> [25] </ref>. All figures in this paper were made by this prototype 16 system. Apart from the constraints anchor, on, and distance which were used in section 1, we implemented constraints tangent and angle.
Reference: [26] <author> S. Sistare. </author> <title> Graphical interaction techniques in constraint-based geometric modeling. </title> <booktitle> In Proceedings of Graphics Interface'91, 1991, </booktitle> <volume> 85 - 92. </volume>
Reference-contexts: Users can select a number of display modes. One option is displaying the whole network. Another choice is to display a simplified network showing only variables and constraints but no locus units (see figure 8). Using constraint icons like in <ref> [26] </ref> would be still better. A user can also choose to display all variables and only the locus units of selected variables, as done in figures 1-6. <p> Both systems provide a single solution to constraints. The work on ThingLab evolved into the SkyBlue constraint solver [1], which makes an analysis of the constraint network and identifies loops, before performing local propagation. In the constraint-based geometric modeler Converge <ref> [26] </ref> the constraint network is partitioned, and the parts are solved numerically. In Converge, a locus can be specified to define a constraint, whereas our loci (geometric primitives) result from constraints. [10] presents an operational interpretation of constraints in CSG modeling.
Reference: [27] <author> D. L. Goines. </author> <title> A Constructed Roman alphabet: a geometric analysis of the Greek and Roman capitals and of the Arabic numerals. </title> <editor> David R. Gordine, </editor> <address> Boston, </address> <year> 1982. </year>
Reference-contexts: Our locus unit approach provides an alternative way to make drawings: not the constraint operands but the primitives representing the locus units constitute the drawing. An example is given in figure 10, showing Roman letters constructed after <ref> [27] </ref>, using all constraint types implemented in our prototype system. For interactive CAD purposes, a constraint must also be removable.
Reference: [28] <author> J. Cohen. </author> <title> Constraint logic programming languages. </title> <journal> Communications of the ACM, </journal> <volume> 33(7), </volume> <year> 1990, </year> <pages> 52 - 68. </pages>
Reference-contexts: Comparison Real general purpose languages for constraint logic programming (CLP) can be used in a wide range of applications, but are usually limited in their satisfaction power in each specific domain. Most constraint languages are biased to a more specific domain ID: CLP (ID) <ref> [28] </ref>. For numeric constraints this yields CLP (IR) over the domain of real numbers [29]. CLP is often described as logic programming with unification (pattern matching) replaced by constraint solving over a computation domain (e.g. Booleans or reals).
Reference: [29] <author> N. C. Heintze, S. Michaylov, and P. J. Stuckey. </author> <title> CLP(IR) and some problems in electrical engineering. </title> <editor> In J.-L. Lassez (editor), </editor> <booktitle> Proceedings of the 4th International Conference on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Most constraint languages are biased to a more specific domain ID: CLP (ID) [28]. For numeric constraints this yields CLP (IR) over the domain of real numbers <ref> [29] </ref>. CLP is often described as logic programming with unification (pattern matching) replaced by constraint solving over a computation domain (e.g. Booleans or reals). When a CSP is embedded into logic programming, a constraint can be defined in the program as a set of facts and rules.
Reference: [30] <author> T. L. Provost and M. Wallace. </author> <title> Generalized constraint propagation over the CLP scheme. </title> <journal> The Journal of Logic Programming, </journal> <volume> 16, </volume> <year> 1993, </year> <pages> 319 - 359. </pages>
Reference-contexts: To solve CSP in traditional logic programming, backtrack search is used and the constraints are used passively as posteriori tests. However, propagation techniques can have a dramatic effect in cutting down the size of the search space <ref> [30] </ref>. A general purpose language for constraint imperative programming is Kaleidoscope [31]. In the rest of this section we specifically consider geometric constraint systems.
Reference: [31] <author> B. N. Freeman-Benson. </author> <title> Kaleidoscope: Mixing objects, constraints, and imperative programming. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(10), </volume> <year> 1990, </year> <pages> 77 - 88. </pages>
Reference-contexts: To solve CSP in traditional logic programming, backtrack search is used and the constraints are used passively as posteriori tests. However, propagation techniques can have a dramatic effect in cutting down the size of the search space [30]. A general purpose language for constraint imperative programming is Kaleidoscope <ref> [31] </ref>. In the rest of this section we specifically consider geometric constraint systems. Obvious drawbacks of unstructured techniques are their computational complexity and their potential inefficiency for interactive applications: each single change leads to re-solving the whole set of constraints.
Reference: [32] <author> V. C. Lin, D. C. Gossard, and R. A. </author> <title> Light. Variational geometry in computer-aided design. </title> <journal> Computer Graphics, </journal> <volume> 15(3), 1981, 171 - 177. </volume> <pages> 23 </pages>
Reference-contexts: In the rest of this section we specifically consider geometric constraint systems. Obvious drawbacks of unstructured techniques are their computational complexity and their potential inefficiency for interactive applications: each single change leads to re-solving the whole set of constraints. An example is variational geometry <ref> [32] </ref> which translates dimensional constraints into an overall system of equations, which is solved numerically by the Newton-Raphson method. The dimensional constraints are defined by equations on coordinates of characteristic points. Each time a dimensional value is changed, the whole system of equations must be solved.
Reference: [33] <author> J. C. Owen. </author> <title> Algebraic solution for geometry from dimensional constraints. </title> <booktitle> In Pro--ceedings of the ACM Conference on Solid Modeling, </booktitle> <publisher> ACM Press, </publisher> <year> 1991, </year> <pages> 397 - 407. </pages>
Reference-contexts: This is a form of delayed satisfaction. Selection among alternative solutions to constraints (single solution inference) is based on `minimal resulting disturbance'. <ref> [33] </ref> presents a system with single numeric solution inference, in which the numerical solutions are derived by algebraic methods. The propagation mechanism employed is propagation of degrees of freedom.
Reference: [34] <author> R. Zerbst. Antoni Gaud. Taschen, </author> <year> 1987. </year>
Reference-contexts: In many underconstrained cases, all solutions are derived (see section 4.2.2). The geometrical representation of the solution also avoids time complexity problems, since a single locus unit can represent a range of infinitely many solutions. 20 lodge of Park Guell, Barcelona, Spain, by Antoni Gaud <ref> [34] </ref>. 8. Conclusions In this paper we have presented a new incremental approach to geometric constraint satisfaction, representing solutions in terms of locus units, which are geometric primitives.
Reference: [35] <author> M. Gleicher and A. Witkin. </author> <title> Creating and manipulating constrained models. </title> <type> Technical Report CMU-CS-91-125, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: Some useful enhancements to the interface of our system include the ability to infer constraints, like in <ref> [35] </ref> and [36], the ability to copy parts of the current constraint network, and to define macros of constraint expressions, such as middle (M ,A,B) on (M , linesegment (A,B)) AND distance (M , A, kABk/2). Acknowledgements This work was supported by NWO (Dutch Organization for Scientific Research) under Grant NF-51/62-514.
Reference: [36] <author> S. R. Alpert. </author> <title> Graceful interaction with graphical constraints. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 13(2), </volume> <year> 1993, </year> <pages> 82 - 91. </pages>
Reference-contexts: Some useful enhancements to the interface of our system include the ability to infer constraints, like in [35] and <ref> [36] </ref>, the ability to copy parts of the current constraint network, and to define macros of constraint expressions, such as middle (M ,A,B) on (M , linesegment (A,B)) AND distance (M , A, kABk/2). Acknowledgements This work was supported by NWO (Dutch Organization for Scientific Research) under Grant NF-51/62-514.
Reference: [37] <editor> R. C. Veltkamp and E. H. Blake (editors). </editor> <booktitle> Programming Paradigms in Graphics, </booktitle> <publisher> Springer-Verlag, </publisher> <address> ISBN 3-211-82788-9, </address> <year> 1995. </year> <month> 24 </month>
References-found: 37

