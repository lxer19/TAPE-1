URL: ftp://ftp.cs.ucsb.edu/pub/faculty/su/pods96.ps
Refering-URL: ftp://ftp.cs.ucsb.edu/pub/faculty/su/index.html
Root-URL: http://www.cs.ucsb.edu
Email: stephane.grumbach@inria.fr  su@cs.ucsb.edu  
Title: Towards Practical Constraint Databases (Extended Abstract)  
Author: St ephane Grumbach Jianwen Su flfl 
Address: Rocquencourt BP 105 78153 Le Chesnay, France  Santa Barbara, California 93106, USA  
Affiliation: I.N.R.I.A.  Computer Science Department University of California  
Abstract: We develop a framework for (real) constraint databases based on finite precision arithmetic which fulfills the main requirements of practical constraint databases. First, it allows the manipulation of approximate values, standard in scientific applications. More importantly, it permits the extension of the relational calculus with aggregate functions, while preserving the fundamental property of closed form evaluation with PTIME data complexity. This is an important step since the initial model of [KKR90] cannot be extended to aggregate functions. Moreover, finite precision computation plays a central role in efficient query processing. We introduce the finite precision semantics of queries and prove expressive power results concerning it. We then present a new constraint query language, CALC F , which includes aggregate and analytical functions, and show that it admits a closed form evaluation in PTIME. 
Abstract-found: 1
Intro-found: 1
Reference: [ACGK94] <author> F. Afrati, S. Cosmadakis, S. Grum-bach, and G. Kuper. </author> <title> Expressiveness of linear vs. polynomial constraints in database query languages. </title> <booktitle> In Second Workshop on the Principles and Practice of Constraint Programming, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models [KKR90, PVV94, GS95a], and the expressive power and complexity analysis of the corresponding query languages <ref> [ACGK94, GST94, GS95b, PVV95, BDLW95] </ref>. Some fundamental aspects have been insufficiently addressed, such as (i) implementation issues, and (ii) adequacy of the constraint data models and query languages to fl Work supported in part by an NSERC Fellowship in Canada. <p> Lemma 4.5 The relations of the structure Z l=u are first-order definable in Z l=u Also, the well known hierarchy <ref> [ACGK94] </ref> induced by the arithmetic operators carries over in the case of the finite precision semantics. Proposition 4.6 FO F QE (; +) FO F Datalog with finite precision semantics The use of the finite precision semantics allows a natural tractable extension of first-order with recursion.
Reference: [ACM88] <author> D. Arnon, G. Collins, and S. McCallum. </author> <title> Cylindrical algebraic decomposition. </title> <journal> SIAM J. computing, </journal> <volume> 13(4) </volume> <pages> 865-889, </pages> <year> 1988. </year>
Reference: [Arn88] <author> D. Arnon. </author> <title> A bibliography of quantifier elimination for real closed fields. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 267-274, </pages> <year> 1988. </year>
Reference-contexts: This very fortunate situation (tractable quantifier elimination) has lead to the success of the constraint database model. In practice, things are not so simple. Indeed, query evaluation procedures must rely on very sophisticated algorithms developed in the area of real algebraic geometry <ref> [Arn88] </ref>. We distinguish three fundamental phases in the evaluation process: (i) solution of systems of polynomial inequalities, (ii) cylindrical algebraic decomposition, and finally (iii) quantifier elimination. (The main technical aspects of each phase are described in Appendix I.) Let ' be a first-order sentence.
Reference: [BDLW95] <author> M. Benedikt, G. Dong, L. Libkin, and L. Wong. </author> <title> Relational expressive power of constraint query languages. In manuscript, </title> <year> 1995. </year>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models [KKR90, PVV94, GS95a], and the expressive power and complexity analysis of the corresponding query languages <ref> [ACGK94, GST94, GS95b, PVV95, BDLW95] </ref>. Some fundamental aspects have been insufficiently addressed, such as (i) implementation issues, and (ii) adequacy of the constraint data models and query languages to fl Work supported in part by an NSERC Fellowship in Canada.
Reference: [BF85] <author> R.L. Burden and J.D. </author> <title> Faires Numerical Analysis (3rd edition). </title> <address> PWS-Kent, Boston, MA, </address> <year> 1985. </year>
Reference-contexts: The complexity of each approximation call is however independent of the database size. Aggregate evaluation calls can also be very expensive for complex aggregate functions. However, the aggregate functions included in CALC F can be implemented by known numerical methods <ref> [BF85, PTVF92] </ref>. Therefore, Corollary 5.6 Every CALC F query can be answered in PTIME w.r.t. the database size. Finally, we discuss the error margins. Seemingly errors can be caused by any numerical computation calls.
Reference: [BKR86] <author> M. Ben-Or, D. Kozen, and J. Reif. </author> <title> The complexity of elementary algebra and geometry. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 32 </volume> <pages> 251-264, </pages> <year> 1986. </year>
Reference-contexts: Query evaluation is performed by quantifier elimination; its tractability follows from the tractability of quantifier elimination (with a fixed number of variables) in the theory of real closed fields <ref> [Tar51, Col75, BKR86, Ren92a] </ref>. The constraint database paradigm has a promising potential to be a fundamental basis for new database models, but extensions are necessary to fulfill the needs of applications. There are essential shortcomings. First, quantifier elimination is not a sufficient means to evaluate queries.
Reference: [CK73] <author> C.C. Chang and H.J. Keisler. </author> <title> Model Theory, </title> <booktitle> volume 73 of Studies in Logic. </booktitle> <publisher> North-Holland, </publisher> <year> 1973. </year>
Reference-contexts: The work reported here is, to the best of our knowledge, the first attempt towards these goals. 3 Constraint Databases We briefly recall the main concepts of constraint databases as they are exposed in [KKR90, GS94]. We consider the first-order language L of the real closed field <ref> [CK73] </ref>, with equality, =, order, , addition, +, and multiplication, fi. Let = fR 1 ; :::; R n g be a signature (database schema), where R 1 ; :::; R n are relation symbols.
Reference: [CK95] <author> J. Chomicki and G. Kuper. </author> <title> Measuring infinite relations. </title> <booktitle> In Proceedings 14th ACM Symposium on Principles of Database Systems. </booktitle> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: It may sometimes be a finite relation. The existing constraint database approaches handle steps 1 and 2 based on the well known quantifier elimination techniques. However, they do not carry out the numerical and aggregation steps. A recent proposal was made to deal with aggregate functions <ref> [CK95] </ref>, but it cannot express the function SURFACE of the above example for instance. The work reported here is, to the best of our knowledge, the first attempt towards these goals. 3 Constraint Databases We briefly recall the main concepts of constraint databases as they are exposed in [KKR90, GS94].
Reference: [CL82] <author> G.E. Collins and R. Loos. </author> <title> Real zeros of polynomials. </title> <booktitle> Computing, </booktitle> <year> 1982. </year>
Reference: [Col75] <author> G.E. Collins. </author> <title> Quantifier elimination for real closed fields by cylindric decompositions. </title> <booktitle> In Proc. 2nd GI Conf. Automata Theory and Formal Languages, volume 35 of Lecture Notes in Computer Science, </booktitle> <pages> pages 134-83. </pages> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference-contexts: Query evaluation is performed by quantifier elimination; its tractability follows from the tractability of quantifier elimination (with a fixed number of variables) in the theory of real closed fields <ref> [Tar51, Col75, BKR86, Ren92a] </ref>. The constraint database paradigm has a promising potential to be a fundamental basis for new database models, but extensions are necessary to fulfill the needs of applications. There are essential shortcomings. First, quantifier elimination is not a sufficient means to evaluate queries. <p> The quantifier elimination algorithm is complete, so any sentence is reduced to either the tautology 0 = 0 or its negation 0 6= 0. We write j= R QE ', if ' is reduced by the quantifier elimination algorithm to the tautology. Collins' first result <ref> [Col75] </ref> can be rephrased as follows. For each first-order sentence ', j= R ' iff j= R QE ': We denote by FO R the set of queries defined by first-order formulas.
Reference: [Dr82] <author> L. Van den Dries. </author> <title> Remarks on Tarski's problem concerning (R; +; fi; exp). </title> <booktitle> In Logic Colloquium. </booktitle> <publisher> Elsevier, North-Holland, </publisher> <year> 1982. </year>
Reference-contexts: This is a significant difference from relational database implementations where symbolic computation is sufficient. Another limitation of the initial approach is that extensions of the relational calculus with new functions (such as aggregate functions) do not satisfy the quantifier elimination property <ref> [Dr82] </ref>, and therefore there is no procedure to evaluate queries in closed form, as already observed in [Kup93]. On the other hand, without aggregate functions, the applicability of the constraint database approach is drastically reduced. <p> Theorem 3.1 [KKR90] Queries in FO R on constraint databases have PTIME data complexity. Remark The quantifier elimination property is of a very rare nature. It was shown by Van den Dries <ref> [Dr82] </ref> that any proper finite extension of the real field with real analytic but not semi-algebraic functions, doesn't admit quantifier elimination. In other words, for sentences with, say, the exponentiation function, there is no quantifier elimination algorithm to decide validity. <p> Both kinds of new functions are essential in most of the potential constraint database applications. The finite precision semantics, associated with an approximation mechanism, makes this extension possible, although the classical quantifier elimination doesn't hold <ref> [Dr82] </ref>. Instead of excluding these fundamental functions and letting the user handle the interactions between queries and numerical computations, we propose a sound general query processing system (algorithm) that consults external numerical computation modules and performs bottom-up query evaluation in closed form with PTIME data complexity.
Reference: [FK94] <author> C. Faloutsos and I. Kamel. </author> <title> Beyond uniformity and independence: Analysis of r-trees using the concept of fractal dimension. </title> <booktitle> In Proc. 13th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 4-13, </pages> <address> Minneapolis, </address> <year> 1994. </year>
Reference-contexts: Implementation of constraint databases is a challenge, and very little has been done yet. Indexing techniques for constraint data [KRVV93], and more general techniques for real-world data (in the application range of constraint models) <ref> [FK94] </ref> have been studied. Constraint solving is a large and interdisciplinary field, with efficient methods developed for specific tasks in constraint logic programming, operation research, graphics and visualization, etc. Large sets of constraints in databases will require specific algorithms.
Reference: [GS94] <author> S. Grumbach and J. Su. </author> <title> Finitely representable databases. </title> <booktitle> In 13th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 289-300, </pages> <address> Minneapolis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The work reported here is, to the best of our knowledge, the first attempt towards these goals. 3 Constraint Databases We briefly recall the main concepts of constraint databases as they are exposed in <ref> [KKR90, GS94] </ref>. We consider the first-order language L of the real closed field [CK73], with equality, =, order, , addition, +, and multiplication, fi. Let = fR 1 ; :::; R n g be a signature (database schema), where R 1 ; :::; R n are relation symbols. <p> Moreover, there are tractable algorithms to perform quantifier elimination for a fixed number of distinct variables. These properties were cleverly used in [KKR90] to design the constraint database framework, and shown necessary in <ref> [GS94] </ref>. This very fortunate situation (tractable quantifier elimination) has lead to the success of the constraint database model. In practice, things are not so simple. Indeed, query evaluation procedures must rely on very sophisticated algorithms developed in the area of real algebraic geometry [Arn88]. <p> It is easy to see that total-FO F QE () = FO R The proof follows from the fact that queries with the order relation only are insensitive to exact values <ref> [GS94, GS95a] </ref>, but only to their respective order. The result extends to the case of queries with linear constraints (proof in Appendix II).
Reference: [GS95a] <author> S. Grumbach and J. Su. </author> <title> Dense order constraint databases. </title> <booktitle> In 14th ACM Symp. on Principles of Database Systems, </booktitle> <address> San Jose, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models <ref> [KKR90, PVV94, GS95a] </ref>, and the expressive power and complexity analysis of the corresponding query languages [ACGK94, GST94, GS95b, PVV95, BDLW95]. <p> It is easy to see that total-FO F QE () = FO R The proof follows from the fact that queries with the order relation only are insensitive to exact values <ref> [GS94, GS95a] </ref>, but only to their respective order. The result extends to the case of queries with linear constraints (proof in Appendix II). <p> We consider the class, DO, of dense-order inputs (defined without the symbols + and fi). Theorem 4.8 PTIME j DO Datalog :F QE j DO . The proof is in the spirit of a similar char acterization of PTIME for dense order constraint databases <ref> [GS95a] </ref>. The inherent difficulty of this result relies in the encoding of a constraint database into finite relations. <p> The proof is in the spirit of a similar char acterization of PTIME for dense order constraint databases [GS95a]. The inherent difficulty of this result relies in the encoding of a constraint database into finite relations. This is easily achieved for dense-order constraint databases <ref> [KG94, GS95a] </ref>, but much more complex for more general constraint databases. 5 Towards Practical Constraint Queries In this section, we develop a framework for the implementation of constraint databases for practical applications.
Reference: [GS95b] <author> S. Grumbach and J. Su. </author> <title> First-order definability over constraint databases. </title> <booktitle> In Proc. First Int. Conf. on Principles and Practice of Constraint Programming, </booktitle> <address> Cassis, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models [KKR90, PVV94, GS95a], and the expressive power and complexity analysis of the corresponding query languages <ref> [ACGK94, GST94, GS95b, PVV95, BDLW95] </ref>. Some fundamental aspects have been insufficiently addressed, such as (i) implementation issues, and (ii) adequacy of the constraint data models and query languages to fl Work supported in part by an NSERC Fellowship in Canada.
Reference: [GST94] <author> S. Grumbach, J. Su, and C. Tollu. </author> <title> Linear constraint query languages: Expressive power and complexity. </title> <editor> In D. Leivant, editor, </editor> <booktitle> Logic and Computational Complexity Workshop, In-dianapolis, 1994. </booktitle> <address> Springer Verlag. </address> <note> to appear in LNCS. </note>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models [KKR90, PVV94, GS95a], and the expressive power and complexity analysis of the corresponding query languages <ref> [ACGK94, GST94, GS95b, PVV95, BDLW95] </ref>. Some fundamental aspects have been insufficiently addressed, such as (i) implementation issues, and (ii) adequacy of the constraint data models and query languages to fl Work supported in part by an NSERC Fellowship in Canada.
Reference: [GV88] <author> D.Yu. Gridor'ev and N.N. Vorobjov. </author> <title> Solving systems of polynomial inequalities in subexponential time. </title> <journal> Journal of Symbolic Computation, </journal> <year> 1988. </year>
Reference: [KG94] <author> P. Kanellakis and D. Goldin. </author> <title> Constraint programming and database query languages. </title> <booktitle> In Proc. 2nd Conference on Theoretical Aspects of Computer Software (TACS), </booktitle> <year> 1994. </year>
Reference-contexts: The proof is in the spirit of a similar char acterization of PTIME for dense order constraint databases [GS95a]. The inherent difficulty of this result relies in the encoding of a constraint database into finite relations. This is easily achieved for dense-order constraint databases <ref> [KG94, GS95a] </ref>, but much more complex for more general constraint databases. 5 Towards Practical Constraint Queries In this section, we develop a framework for the implementation of constraint databases for practical applications.
Reference: [KKR90] <author> P. Kanellakis, G. Kuper, and P. Revesz. </author> <title> Constraint query languages. </title> <booktitle> In Proc. 9th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 299-313, </pages> <address> Nashville, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz <ref> [KKR90] </ref>, constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models [KKR90, PVV94, GS95a], and the expressive power and complexity analysis of the corresponding query languages [ACGK94, GST94, GS95b, PVV95, BDLW95]. <p> 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models <ref> [KKR90, PVV94, GS95a] </ref>, and the expressive power and complexity analysis of the corresponding query languages [ACGK94, GST94, GS95b, PVV95, BDLW95]. <p> Constraint solving is a large and interdisciplinary field, with efficient methods developed for specific tasks in constraint logic programming, operation research, graphics and visualization, etc. Large sets of constraints in databases will require specific algorithms. Following the paradigm of <ref> [KKR90] </ref>, a constraint relation is represented by a quantifier-free formula over some arithmetical domain. We consider in this paper constraints over real numbers. The seminal argument exploited in [KKR90] was to show that relational calculus queries over constraint databases could be evaluated in closed form (i.e., the output of a query <p> Large sets of constraints in databases will require specific algorithms. Following the paradigm of <ref> [KKR90] </ref>, a constraint relation is represented by a quantifier-free formula over some arithmetical domain. We consider in this paper constraints over real numbers. The seminal argument exploited in [KKR90] was to show that relational calculus queries over constraint databases could be evaluated in closed form (i.e., the output of a query is also represented by a quantifier-free formula) with PTIME data complexity. <p> The work reported here is, to the best of our knowledge, the first attempt towards these goals. 3 Constraint Databases We briefly recall the main concepts of constraint databases as they are exposed in <ref> [KKR90, GS94] </ref>. We consider the first-order language L of the real closed field [CK73], with equality, =, order, , addition, +, and multiplication, fi. Let = fR 1 ; :::; R n g be a signature (database schema), where R 1 ; :::; R n are relation symbols. <p> We consider the first-order language L of the real closed field [CK73], with equality, =, order, , addition, +, and multiplication, fi. Let = fR 1 ; :::; R n g be a signature (database schema), where R 1 ; :::; R n are relation symbols. Introduced in <ref> [KKR90] </ref>, a k-ary generalized tuple is a conjunction of atomic formulas in L over k variables. For instance, (xy ^ x0 ^ y10) is a binary generalized tuple representing a filled triangle. <p> A query is a partial mapping from constraint databases to finitely representable relations. We do not assume any notion of genericity here. Moreover, throughout the paper, we will only consider queries computable in polynomial time. It was shown in <ref> [KKR90] </ref> that the relational calculus constitutes a query language in the context of polynomial constraints over the real numbers. <p> The fact that the theory of real closed fields admits quantifier elimination was discovered by Tarski [Tar51]. Moreover, there are tractable algorithms to perform quantifier elimination for a fixed number of distinct variables. These properties were cleverly used in <ref> [KKR90] </ref> to design the constraint database framework, and shown necessary in [GS94]. This very fortunate situation (tractable quantifier elimination) has lead to the success of the constraint database model. In practice, things are not so simple. <p> Collins' first result [Col75] can be rephrased as follows. For each first-order sentence ', j= R ' iff j= R QE ': We denote by FO R the set of queries defined by first-order formulas. These techniques lead to the fundamental result of <ref> [KKR90] </ref>, pointing out the tractability of the constraint framework in the database context at a theoretical level. Theorem 3.1 [KKR90] Queries in FO R on constraint databases have PTIME data complexity. Remark The quantifier elimination property is of a very rare nature. <p> These techniques lead to the fundamental result of <ref> [KKR90] </ref>, pointing out the tractability of the constraint framework in the database context at a theoretical level. Theorem 3.1 [KKR90] Queries in FO R on constraint databases have PTIME data complexity. Remark The quantifier elimination property is of a very rare nature. <p> It is easy to see that most of the aggregate functions mentioned in the previous section are not semi-algebraic. It follows that formulas containing aggregate functions cannot always be evaluated in closed form, as was already observed in [Kup93]. Any proper extension of the constraint database model of <ref> [KKR90] </ref> is therefore impossible. In Section 5, we propose a solution based on approximations, and provide in particular a tractable algorithm for the AGGREGATE EVALUATION. Kanellakis, Kuper and Revesz proved that the QUANTIFIER ELIMINATION, step 2 of our query evaluation framework, had PTIME data complexity. <p> Indeed, the NUMERICAL EVALUATION (up to *-approximation) can be done in NC. The result follows from [Nef90]. The same parallel complexity bound was shown for the data complexity of the QUANTIFIER ELIMINATION step of the evaluation of queries in FO R <ref> [KKR90] </ref>. Despite the positive essence of the previous results, they are of little use in practice. <p> We compare its expressive power with FO R (or equivalently FO R QE ) (with the general semantics, as introduced in <ref> [KKR90] </ref>). FO F QE is a set of partial queries, while FO R contains only total queries. Consider a query Q in FO F QE expressible by some formula ', and let D Q be its domain (set of databases on which Q is defined).
Reference: [Knu69] <author> D.E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. 2, </volume> <booktitle> Seminumerical Algorithms. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1969. </year>
Reference-contexts: We distinguish floating numbers of various size, and define a k-floating number with a mantissa n over k digits, and an exponent e over log (k) digits. Let F k be the set of k-floating point numbers. Arithmetic operations over elements of F k are defined as usual <ref> [Knu69] </ref>. We consider the finite structure 1 of k-floating 1 Note that arithmetic operations are only partially defined in F k .
Reference: [KRVV93] <author> P. Kanellakis, S. Ramaswamy, D. Ven-groff, and J. Vitter. </author> <title> Indexing for data models with constraints and classes. </title> <booktitle> In Proc. 12th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 233-243, </pages> <year> 1993. </year> <month> 9 </month>
Reference-contexts: Constraint databases integrate database technology with constraint solving to deal with new applications such as spatial or geographical applications and those requiring arithmetic computations. Implementation of constraint databases is a challenge, and very little has been done yet. Indexing techniques for constraint data <ref> [KRVV93] </ref>, and more general techniques for real-world data (in the application range of constraint models) [FK94] have been studied. Constraint solving is a large and interdisciplinary field, with efficient methods developed for specific tasks in constraint logic programming, operation research, graphics and visualization, etc.
Reference: [Kup93] <author> G. Kuper. </author> <title> Aggregation in constraint databases. </title> <booktitle> In Proc. First Workshop on Principles and Practice of Constraint Programming, </booktitle> <year> 1993. </year>
Reference-contexts: Another limitation of the initial approach is that extensions of the relational calculus with new functions (such as aggregate functions) do not satisfy the quantifier elimination property [Dr82], and therefore there is no procedure to evaluate queries in closed form, as already observed in <ref> [Kup93] </ref>. On the other hand, without aggregate functions, the applicability of the constraint database approach is drastically reduced. In this paper, we introduce a new framework based on a semantics with finite precision arithmetic. <p> It is easy to see that most of the aggregate functions mentioned in the previous section are not semi-algebraic. It follows that formulas containing aggregate functions cannot always be evaluated in closed form, as was already observed in <ref> [Kup93] </ref>. Any proper extension of the constraint database model of [KKR90] is therefore impossible. In Section 5, we propose a solution based on approximations, and provide in particular a tractable algorithm for the AGGREGATE EVALUATION.
Reference: [Moo66] <author> R.E. Moore. </author> <title> Interval Analysis. </title> <publisher> Prentice-Hall, </publisher> <year> 1966. </year>
Reference-contexts: caused by overflow of exponent (number too large or too small) or mantissa (insufficient precision). 3 Moreover, we assume that the set of variables is ordered, and that the cylindrical algebraic decomposition is always performed following this pre-established 2 This holds for all finite precision arithmetics such as interval arithmetic <ref> [Moo66] </ref>, etc. 3 In most practical cases, machine precision is sufficiently high. order. However, arithmetic operations are still carried out in exact values. We call the semantics associated to the QE algorithm the finite precision semantics, and investigate the expressive power of first-order queries under this semantics.
Reference: [Nef90] <author> C. Neff. </author> <title> Specified precision polynomial root isolation is in NC. </title> <booktitle> In Proc IEEE Foundations of Computer Science, </booktitle> <year> 1990. </year>
Reference-contexts: A sketch of the proof can be found in Appendix II. We can actually prove a better parallel complexity bound. Indeed, the NUMERICAL EVALUATION (up to *-approximation) can be done in NC. The result follows from <ref> [Nef90] </ref>. The same parallel complexity bound was shown for the data complexity of the QUANTIFIER ELIMINATION step of the evaluation of queries in FO R [KKR90]. Despite the positive essence of the previous results, they are of little use in practice.
Reference: [Pan92] <author> V. Pan. </author> <title> Complexity of computations with matrices and polynomials. </title> <journal> SIAM Review, </journal> <volume> 34(2) </volume> <pages> 225-62, </pages> <year> 1992. </year>
Reference: [PVV94] <author> J. Paredaens, J. Van den Bussche, and D. Van Gucht. </author> <title> Towards a theory of spatial database queries. </title> <booktitle> In Proc. 13th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 279-288, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models <ref> [KKR90, PVV94, GS95a] </ref>, and the expressive power and complexity analysis of the corresponding query languages [ACGK94, GST94, GS95b, PVV95, BDLW95].
Reference: [PVV95] <author> J. Paredaens, J. Van den Bussche, and D. Van Gucht. </author> <title> First-order queries on finite structures over the reals. </title> <booktitle> In Proceedings 10th IEEE Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Since their introduction by Kanellakis, Kuper and Revesz [KKR90], constraint databases have generated a rapidly growing interest in the research community. Until now, the primary focus has been on constraint database models [KKR90, PVV94, GS95a], and the expressive power and complexity analysis of the corresponding query languages <ref> [ACGK94, GST94, GS95b, PVV95, BDLW95] </ref>. Some fundamental aspects have been insufficiently addressed, such as (i) implementation issues, and (ii) adequacy of the constraint data models and query languages to fl Work supported in part by an NSERC Fellowship in Canada.
Reference: [PTVF92] <author> W.H. Press, S.A. Teukolsky, W.T. Vet-terling, and B.P. Flannery. </author> <title> Numerical Recipes in C (Second Edition). </title> <publisher> Cambridge University Press, </publisher> <year> 1992 </year>
Reference-contexts: The complexity of each approximation call is however independent of the database size. Aggregate evaluation calls can also be very expensive for complex aggregate functions. However, the aggregate functions included in CALC F can be implemented by known numerical methods <ref> [BF85, PTVF92] </ref>. Therefore, Corollary 5.6 Every CALC F query can be answered in PTIME w.r.t. the database size. Finally, we discuss the error margins. Seemingly errors can be caused by any numerical computation calls.
Reference: [Ren92a] <author> J. Renegar. </author> <title> On the computational complexity and geometry of the first-order theory of the reals. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 13 </volume> <pages> 255-352, </pages> <year> 1992. </year>
Reference-contexts: Query evaluation is performed by quantifier elimination; its tractability follows from the tractability of quantifier elimination (with a fixed number of variables) in the theory of real closed fields <ref> [Tar51, Col75, BKR86, Ren92a] </ref>. The constraint database paradigm has a promising potential to be a fundamental basis for new database models, but extensions are necessary to fulfill the needs of applications. There are essential shortcomings. First, quantifier elimination is not a sufficient means to evaluate queries. <p> A natural candidate to achieve this goal is to use a slightly modified version (described in the full paper) of a quantifier elimination method for the real closed field (we choose the version of Renegar <ref> [Ren92a] </ref>), denoted the QE algorithm in the following. It follows the steps described in Appendix I.
Reference: [Ren92b] <author> J. Renegar. </author> <title> On the computational complexity of approximating solutions for real algebraic fromulae. </title> <journal> SIAM Journal of Computing, </journal> <volume> 21 </volume> <pages> 1008-1025, </pages> <year> 1992. </year>
Reference: [SA94] <author> B. Sendov and A. Andreev. </author> <title> Approximation and interpolation theory. </title> <editor> In P. G. Ciarlet and J. L. Lions, editors, </editor> <booktitle> Handbook of Numerical Analysis, volume III, </booktitle> <pages> pages 223-464. </pages> <publisher> North-Holland, </publisher> <year> 1994. </year>
Reference-contexts: The above definition does not involve error factors. Although any analytical function continuous on an interval (hypercube) [ff; fi] can be approximated by a polynomial within any given error margin (Weierstrass Approximation Theorem [Wei85], see also <ref> [SA94] </ref>), the a-base has to be appropriately chosen to bound the error margin. (Theoretically, if numerical modules have bounded errors, the global error margin of the query answer can potentially be bounded too.
Reference: [Tar51] <author> A. Tarski. </author> <title> A Decision method for elementary algebra and geometry. </title> <institution> Univ. of California Press, Berkeley, California, </institution> <year> 1951. </year>
Reference-contexts: Query evaluation is performed by quantifier elimination; its tractability follows from the tractability of quantifier elimination (with a fixed number of variables) in the theory of real closed fields <ref> [Tar51, Col75, BKR86, Ren92a] </ref>. The constraint database paradigm has a promising potential to be a fundamental basis for new database models, but extensions are necessary to fulfill the needs of applications. There are essential shortcomings. First, quantifier elimination is not a sufficient means to evaluate queries. <p> This follows from the fundamental quantifier elimination property of the first-order theory of real closed fields. A logical theory admits quantifier elimination if every formula is equivalent to a quantifier-free formula. The fact that the theory of real closed fields admits quantifier elimination was discovered by Tarski <ref> [Tar51] </ref>. Moreover, there are tractable algorithms to perform quantifier elimination for a fixed number of distinct variables. These properties were cleverly used in [KKR90] to design the constraint database framework, and shown necessary in [GS94].
Reference: [Wei85] <author> K. </author> <title> Weierstrass. Uber die analytische Darstellung sogenannter willkurlicher Funk-tionen einer reelen Veranderlichen. </title> <publisher> Sitzungs-ber. der Akad. zu Berlin, </publisher> <pages> pages 633-9, 1885. </pages>
Reference-contexts: The above definition does not involve error factors. Although any analytical function continuous on an interval (hypercube) [ff; fi] can be approximated by a polynomial within any given error margin (Weierstrass Approximation Theorem <ref> [Wei85] </ref>, see also [SA94]), the a-base has to be appropriately chosen to bound the error margin. (Theoretically, if numerical modules have bounded errors, the global error margin of the query answer can potentially be bounded too.
Reference: [Yap94] <author> C.K. Yap. </author> <title> Fundamental Problems in Algorithmic Algebra. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
References-found: 34

