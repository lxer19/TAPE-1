URL: ftp://ftp.cs.washington.edu/tr/1992/03/UW-CSE-92-03-10.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/levy/opal/opalpapers.html
Root-URL: 
Title: Architectural Support for Single Address Space Operating Systems  
Author: Eric J. Koldinger, Jeffrey S. Chase, and Susan J. Eggers 
Abstract: Department of Computer Science and Engineering University of Washington Seattle, WA 98195 Technical Report 92-03-10 March 1992 Revised July 1992 
Abstract-found: 1
Intro-found: 1
Reference: [Anderson et al. 91] <author> T. Anderson, H. Levy, B. Ber-shad, and E. Lazowska. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In Proc. of the 4th Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 108-121, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: Since protection operations are becoming more frequent and expensive (i.e., they involve trapping to the kernel and possibly invalidating useful cache entries), these choices can have a substantial effect on performance <ref> [Anderson et al. 91, Appel & Li 91] </ref>. The paper is organized as follows. The next section discusses the advantages of single address space operating systems and their architectural implications. <p> This is impor 2 tant, because the communication mechanisms popular today (e.g., RPC) are based on data copying and protection domain switches, both of which have increased in cost relative to integer performance on recent processors <ref> [Anderson et al. 91, Ousterhout 90] </ref>. At the same time, software systems are growing in complexity, encouraging decomposition into multiple protection domains.
Reference: [Appel & Li 91] <author> A. Appel and K. Li. </author> <title> Virtual memory primitives for user programs. </title> <booktitle> In Proc. of the 4th Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 96-108, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: Since protection operations are becoming more frequent and expensive (i.e., they involve trapping to the kernel and possibly invalidating useful cache entries), these choices can have a substantial effect on performance <ref> [Anderson et al. 91, Appel & Li 91] </ref>. The paper is organized as follows. The next section discusses the advantages of single address space operating systems and their architectural implications. <p> For example, virtual page protection may be used to support recoverable virtual memory (e.g., Camelot [Eppinger 89]), distributed shared memory [Li 86, Carter et al. 91], concurrent check-pointing [Li et al. 90] or transactional shared memory systems (as on the IBM 801) [Chang & Mergen 88], among other applications <ref> [Appel & Li 91] </ref>. Some of these applications involve changing the page permissions for all protection domains, whereas others require that page protections be maintained on a per-domain, per-page basis. <p> Make the page read-write for the application. Once per page, during the checkpoint operation Write the page to disk. In the PLB mark it as read-write for the application. Write the page to disk. Move it to a new read-write group in the TLB. Compression Paging <ref> [Appel & Li 91] </ref> Page-out: Make the page inaccessible to the application, compress the data on the page, write it to disk and unmap the page Every time a page is deallocated Mark the page inaccessible to the client in the PLB.
Reference: [Appel et al. 88] <author> A. Appel, J. Ellis, and K. Li. </author> <title> Real-time concurrent garbage collection on stock multiprocessors. </title> <booktitle> In Proc. of the 1988 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 11-20, </pages> <year> 1988. </year>
Reference: [Bensoussan et al. 72] <author> A. Bensoussan, C. Clingen, and R. Daley. </author> <title> The Multics virtual memory: Concepts and design. </title> <journal> Communications of the ACM, </journal> <volume> 15(5) </volume> <pages> 308-318, </pages> <month> May </month> <year> 1972. </year>
Reference-contexts: These were dedicated-application or single-user systems that relied completely on language protection for safety. New hardware allows us to generalize this model to multiple protection domains, as in Psyche [Scott et al. 90]. Segmented systems (e.g., Multics <ref> [Bensoussan et al. 72] </ref> and the IBM 801 [Chang & Mergen 88]) support uniform sharing to some degree.
Reference: [Bershad et al. 89] <author> B. Bershad, T. Anderson, E. La-zowska, and H. Levy. </author> <title> Lightweight remote procedure call. </title> <booktitle> In Proc. of the 12th ACM 11 Symposium on Operating System Principles, </booktitle> <pages> pages 102-113, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: Virtual segments are the basic unit of sharing; they are used to represent many types of objects, such as code, shared libraries, private and shared data regions (heaps and stacks), mapped files and RPC communication channels <ref> [Bershad et al. 89, Bershad et al. 90] </ref>. Before a program can access the pages that make up a virtual segment, it must attach the segment to its domain. <p> Domain switches are becoming more frequent, since many operating system services are now provided by application-level servers accessed with RPC calls <ref> [Bershad et al. 89] </ref>. A protection domain switch on a PLB-based system requires changing only a single register, the PD-ID register in the processor.
Reference: [Bershad et al. 90] <author> B. Bershad, T. Anderson, E. La-zowska, and H. Levy. </author> <title> User-level interprocess communication for shared memory multiprocessors. </title> <type> Technical Report 90-05-07, </type> <institution> Univ. of Washington, Department of Computer Science and Engineering, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: Virtual segments are the basic unit of sharing; they are used to represent many types of objects, such as code, shared libraries, private and shared data regions (heaps and stacks), mapped files and RPC communication channels <ref> [Bershad et al. 89, Bershad et al. 90] </ref>. Before a program can access the pages that make up a virtual segment, it must attach the segment to its domain.
Reference: [Carter et al. 91] <author> J. Carter, J. Bennett, and W.Zwaenepoel. </author> <title> Implementation and performance of Munin. </title> <booktitle> In Proc. of the 13th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 152-164, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: For example, virtual page protection may be used to support recoverable virtual memory (e.g., Camelot [Eppinger 89]), distributed shared memory <ref> [Li 86, Carter et al. 91] </ref>, concurrent check-pointing [Li et al. 90] or transactional shared memory systems (as on the IBM 801) [Chang & Mergen 88], among other applications [Appel & Li 91]. <p> Once per page touched Garbage collect the page. Mark it as read-write for the application domain. Garbage collect the page. Place in to-space page-group for the applica tion domain. Distributed VM <ref> [Carter et al. 91, Li 86] </ref> Get Readable: Trap the access, get a readable copy of the page and make it read-only. Once per access of the remote page Check to see if the copy in memory is valid, and retrieve it from the remote host if it's not.
Reference: [Carter et al. 92] <author> J. Carter, A. Cox, D. Johnson, and W. Zwaenepoel. </author> <title> Distributed operating systems based on a protected global virtual address space. </title> <institution> Technical Report Rice COMP TR92-186, Rice Univ., Department of Computer Science, </institution> <month> Apr. </month> <year> 1992. </year> <note> Also appeared in the 3rd IEEE Workshop on Workstation Operating Systems, </note> <month> Apr. </month> <year> 1992. </year>
Reference: [Chang & Mergen 88] <author> A. Chang and M. Mergen. </author> <title> 801 storage: Architecture and programming. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 28-50, </pages> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: Many solutions to this problem have been devised, such as allocation restrictions (as in Sun OS [Cheng 87]), sharing on segment boundaries only (SPUR [Wood et al. 87] and the IBM RISC processors <ref> [Chang & Mergen 88, Groves & Oehler 90] </ref>), flushing the cache on process switches (as required by the i860 [Int 89]), lazily flushing aliased pages from the cache [Wheeler & Bershad 92], or hardware support for synonyms [Goodman 87, Wang et al. 89]. <p> For example, virtual page protection may be used to support recoverable virtual memory (e.g., Camelot [Eppinger 89]), distributed shared memory [Li 86, Carter et al. 91], concurrent check-pointing [Li et al. 90] or transactional shared memory systems (as on the IBM 801) <ref> [Chang & Mergen 88] </ref>, among other applications [Appel & Li 91]. Some of these applications involve changing the page permissions for all protection domains, whereas others require that page protections be maintained on a per-domain, per-page basis. <p> Invalidate: A remote machine invalidates the page. Make it inaccessible on this node. Once per remote access to the local page Set access rights to none in the PLB. Set access rights to none in the TLB. Transactional VM <ref> [Chang & Mergen 88, Ep-pinger 89] </ref> Lock (read): Allow shared, read-only access Once per page touched, per transaction Determine if the page can be locked; if so, mark it as locked and set the read bit in the PLB entry for transaction's domain. <p> Large page sizes would cause a similar problem with transactional locking; for this reason, the IBM 801 processor supports lock bits for every 128 bytes of memory to support database concurrency control <ref> [Chang & Mergen 88] </ref>. In a PLB-oriented system, protection and translation utilize different hardware structures; the PLB could be organized to provide protection control on sub-page units. Protection pages that are larger than a single translation page are also useful. <p> These were dedicated-application or single-user systems that relied completely on language protection for safety. New hardware allows us to generalize this model to multiple protection domains, as in Psyche [Scott et al. 90]. Segmented systems (e.g., Multics [Bensoussan et al. 72] and the IBM 801 <ref> [Chang & Mergen 88] </ref>) support uniform sharing to some degree.
Reference: [Chase et al. 92a] <author> J. Chase, H. Levy, M. Baker-Harvey, and E. Lazowska. </author> <title> How to use a 64-bit virtual address space. </title> <type> Technical Report 92-03-02, </type> <institution> Univ. of Washington, Department of Computer Science and Engineering, </institution> <month> Mar. </month> <year> 1992. </year> <title> Shorter version appeared as Opal: A Single Address Space System for 64-Bit Architectures, </title> <booktitle> 3rd IEEE Workshop on Workstation Operating Systems, </booktitle> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: Thus, the single virtual address space separates the concepts of translation and protection. We call a system with this addressing model a single address space operating system. We are currently building one, called Opal <ref> [Chase et al. 92a, Chase et al. 92b] </ref>. Examples in this paper use Opal terminology, although many of the concepts (such as protection domains) will be common to other single address space systems. <p> each address space has a different translation of the same virtual address; for example, every address space can have its own 2 The software implications of single address space systems, including incompatibilities for programs written under the multiple address space model, are discussed in more detail in Chase, et al. <ref> [Chase et al. 92a] </ref>. 3 Organizations in which a physically indexed cache is accessed in parallel with address translation are comparable in speed, but suffer from restrictions in cache size or memory mapping flexibility. address 100, but each instance of that address refers to a different physical location.
Reference: [Chase et al. 92b] <author> J. Chase, H. Levy, E. Lazowska, and M. Baker-Harvey. </author> <title> Lightweight shared objects in a 64-bit operating system. </title> <booktitle> In Proc. of the Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Thus, the single virtual address space separates the concepts of translation and protection. We call a system with this addressing model a single address space operating system. We are currently building one, called Opal <ref> [Chase et al. 92a, Chase et al. 92b] </ref>. Examples in this paper use Opal terminology, although many of the concepts (such as protection domains) will be common to other single address space systems.
Reference: [Cheng 87] <author> R. Cheng. </author> <title> Virtual address caches in UNIX. </title> <booktitle> In Proc. of the Summer 1987 USENIX Technical Conference and Exhibition, </booktitle> <pages> pages 217-224, </pages> <year> 1987. </year>
Reference-contexts: Reference to an item through different virtual addresses causes that item to appear simultaneously in multiple cache lines, creating a coherency problem on writes. Many solutions to this problem have been devised, such as allocation restrictions (as in Sun OS <ref> [Cheng 87] </ref>), sharing on segment boundaries only (SPUR [Wood et al. 87] and the IBM RISC processors [Chang & Mergen 88, Groves & Oehler 90]), flushing the cache on process switches (as required by the i860 [Int 89]), lazily flushing aliased pages from the cache [Wheeler & Bershad 92], or hardware
Reference: [Cyp 90] <institution> Cypress Semiconductor, </institution> <address> San Jose, CA. </address> <note> SPARC RISC User's Guide, 2nd edition, </note> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: For example, the VAX [Dig 81] and SPARC <ref> [Cyp 90] </ref> store virtual-to-physical mappings in linear page tables maintained separately for each protection domain. This organization causes two problems for single address space systems. <p> See section 3.2.2. 9 The segment would have to be aligned to a power of two sized page, but this is a relatively minor problem. Supporting multiple protection page sizes requires changes to the PLB. Currently, several commercial processors support multiple sized pages <ref> [Cyp 90, Dig 92, Hew 90, MIP 91] </ref>; the issues in designing a PLB that supports multiple protection page sizes are similar [Tal-luri et al. 92]. 5 Related Work The two models presented in this paper are representative of protection organizations for single address space systems, but they are by no
Reference: [Dig 81] <institution> Digital Equipment Corporation, Maynard, </institution> <address> MA. </address> <booktitle> VAX Architecture Handbook, </booktitle> <year> 1981. </year>
Reference-contexts: For example, the VAX <ref> [Dig 81] </ref> and SPARC [Cyp 90] store virtual-to-physical mappings in linear page tables maintained separately for each protection domain. This organization causes two problems for single address space systems.
Reference: [Dig 92] <institution> Digital Equipment Corporation, Maynard, MA. Alpha Architecture Handbook, </institution> <year> 1992. </year>
Reference-contexts: This trend can be seen, for example, in the segmented architectures of the HP PA-RISC [Lee 89] and the IBM RS/6000 [Groves & Oehler 90] and ESA/370 [Scalzi et al. 89], and the flat architectures of the MIPS R4000 [MIP 91], SPARC Version 9 [SPA 92], and Digital's Alpha family <ref> [Dig 92] </ref>. Unlike the move from 16- to 32-bit addressing, a 64-bit address space will be revolutionary instead of evolutionary with respect to the way operating systems and applications can use virtual memory. <p> Second, translation mappings for shared pages must be duplicated in the page tables for each domain; this wastes space and forces the kernel to keep the duplicated mappings consistent. Architectures with software-loaded TLBs, such as the MIPS processors [Kane & Heinrich 92] or the DEC Alpha <ref> [Dig 92] </ref>, are better suited to supporting single address space systems. <p> See section 3.2.2. 9 The segment would have to be aligned to a power of two sized page, but this is a relatively minor problem. Supporting multiple protection page sizes requires changes to the PLB. Currently, several commercial processors support multiple sized pages <ref> [Cyp 90, Dig 92, Hew 90, MIP 91] </ref>; the issues in designing a PLB that supports multiple protection page sizes are similar [Tal-luri et al. 92]. 5 Related Work The two models presented in this paper are representative of protection organizations for single address space systems, but they are by no
Reference: [Eppinger 89] <author> J. Eppinger. </author> <title> Virtual Memory Management for Transaction Processing Systems. </title> <type> PhD dissertation, </type> <institution> Carnegie Mellon Univ., </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: For example, virtual page protection may be used to support recoverable virtual memory (e.g., Camelot <ref> [Eppinger 89] </ref>), distributed shared memory [Li 86, Carter et al. 91], concurrent check-pointing [Li et al. 90] or transactional shared memory systems (as on the IBM 801) [Chang & Mergen 88], among other applications [Appel & Li 91].
Reference: [Fabry 74] <author> R. Fabry. </author> <title> Capability-based addressing. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 403-412, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: Other protection architectures for single address space systems have ranged from no protection at all (as on the Xerox Dorado processors [Lampson & Pier 81]) to capability-based architectures <ref> [Fabry 74, Levy 84, Pin-now et al. 82] </ref>. Much of the groundwork for single address space operating systems was explored in earlier single address space systems, such as Pilot and Cedar [Redell et al. 80, Swinehart et al. 86].
Reference: [Golub et al. 90] <author> D. Golub, R. Dean, A. Forin, and R. Rashid. </author> <title> UNIX as an application program. </title> <booktitle> In Proc. of the Summer USENIX, </booktitle> <pages> pages 87-96, </pages> <year> 1990. </year>
Reference-contexts: At the same time, software systems are growing in complexity, encouraging decomposition into multiple protection domains. The recent move toward server-structured, kernelized operating systems (e.g., Mach <ref> [Golub et al. 90] </ref>, Chorus [Rozier et al. 92], Amoeba [Mullender & Tanenbaum 86] and Windows NT) is one example of this trend. 2 2.2 Virtually Indexed Caches Virtually indexed caches typically provide faster effective access than physically indexed caches, because they do not require address translation before the access [Knapp
Reference: [Goodman 87] <author> J. Goodman. </author> <title> Coherency for multiprocessor virtual address caches. </title> <booktitle> In Proc. of the 2nd Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 72-81, </pages> <month> Apr. </month> <year> 1987. </year>
Reference-contexts: segment boundaries only (SPUR [Wood et al. 87] and the IBM RISC processors [Chang & Mergen 88, Groves & Oehler 90]), flushing the cache on process switches (as required by the i860 [Int 89]), lazily flushing aliased pages from the cache [Wheeler & Bershad 92], or hardware support for synonyms <ref> [Goodman 87, Wang et al. 89] </ref>. The first two solutions restrict the generality of the system, the third discards potentially useful cache state and adds to the cost of process switches, the fourth complicates the operating system, and the fifth complicates the hardware.
Reference: [Groves & Oehler 90] <author> R. Groves and R. Oehler. </author> <title> RISC system/6000 processor architecture. </title> <editor> In M. Misra, editor, </editor> <booktitle> IBM RISC System/6000 Technology, </booktitle> <pages> pages 16-23. </pages> <booktitle> International Business Machines, </booktitle> <year> 1990. </year>
Reference-contexts: This trend can be seen, for example, in the segmented architectures of the HP PA-RISC [Lee 89] and the IBM RS/6000 <ref> [Groves & Oehler 90] </ref> and ESA/370 [Scalzi et al. 89], and the flat architectures of the MIPS R4000 [MIP 91], SPARC Version 9 [SPA 92], and Digital's Alpha family [Dig 92]. <p> Many solutions to this problem have been devised, such as allocation restrictions (as in Sun OS [Cheng 87]), sharing on segment boundaries only (SPUR [Wood et al. 87] and the IBM RISC processors <ref> [Chang & Mergen 88, Groves & Oehler 90] </ref>), flushing the cache on process switches (as required by the i860 [Int 89]), lazily flushing aliased pages from the cache [Wheeler & Bershad 92], or hardware support for synonyms [Goodman 87, Wang et al. 89].
Reference: [Hew 90] <author> Hewlett-Packard, </author> <title> Cupertino, CA. PA-RISC 1.1 Architecture and Instruction Set Reference Manual, </title> <booktitle> 1st edition, </booktitle> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: The PLB is a natural counterpart to a virtually indexed, virtually tagged cache in single address space systems, and permits relocation of the translation buffer to a second level, off the critical path. The second alternative is a slight variation of the Hewlett-Packard PA-RISC architecture <ref> [Hew 90] </ref>, in which each executing protection domain has access to one or more page-groups. (A page-group is a set of pages treated as a unit for the purpose of access control.) Section 4 evaluates the two model implementations with respect to the needs of single address space operating systems, focusing <p> See section 3.2.2. 9 The segment would have to be aligned to a power of two sized page, but this is a relatively minor problem. Supporting multiple protection page sizes requires changes to the PLB. Currently, several commercial processors support multiple sized pages <ref> [Cyp 90, Dig 92, Hew 90, MIP 91] </ref>; the issues in designing a PLB that supports multiple protection page sizes are similar [Tal-luri et al. 92]. 5 Related Work The two models presented in this paper are representative of protection organizations for single address space systems, but they are by no
Reference: [Int 89] <institution> Intel Corp., </institution> <address> Santa Clara, CA. </address> <note> i860 Microprocessor Programmer's Reference Manual, </note> <year> 1989. </year>
Reference-contexts: to this problem have been devised, such as allocation restrictions (as in Sun OS [Cheng 87]), sharing on segment boundaries only (SPUR [Wood et al. 87] and the IBM RISC processors [Chang & Mergen 88, Groves & Oehler 90]), flushing the cache on process switches (as required by the i860 <ref> [Int 89] </ref>), lazily flushing aliased pages from the cache [Wheeler & Bershad 92], or hardware support for synonyms [Goodman 87, Wang et al. 89].
Reference: [Kane & Heinrich 92] <author> G. Kane and J. Heinrich. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1992. </year>
Reference-contexts: Linear page tables cannot represent such sparse sets of mappings compactly. Second, translation mappings for shared pages must be duplicated in the page tables for each domain; this wastes space and forces the kernel to keep the duplicated mappings consistent. Architectures with software-loaded TLBs, such as the MIPS processors <ref> [Kane & Heinrich 92] </ref> or the DEC Alpha [Dig 92], are better suited to supporting single address space systems. <p> If the TLB is tagged with an address space identifier <ref> [Kane & Heinrich 92] </ref>, it can function as a protection domain identifier. Sharing of a page by multiple domains causes replication of TLB protection entries, even though each replicated entry has the same translation information. The duplication reduces the effectiveness of the TLB as sharing increases.
Reference: [Knapp 85] <author> V. Knapp. </author> <title> Virtually Addressed Caches for Multiprogramming and Multiprocessing Environments. </title> <type> PhD dissertation, </type> <institution> Univ. of Washington, Department of Computer Science, </institution> <month> June </month> <year> 1985. </year>
Reference-contexts: [Golub et al. 90], Chorus [Rozier et al. 92], Amoeba [Mullender & Tanenbaum 86] and Windows NT) is one example of this trend. 2 2.2 Virtually Indexed Caches Virtually indexed caches typically provide faster effective access than physically indexed caches, because they do not require address translation before the access <ref> [Knapp 85, Smith 82, Wood 90] </ref>. 3 Furthermore, compilers can predict and control data placement in the cache, which is difficult or impossible in physically indexed caches in which placement depends on dynamically determined virtual-to-physical mappings [Lam et al. 91].
Reference: [Koldinger et al. 91] <author> E. Koldinger, H. Levy, J. Chase, and S. Eggers. </author> <title> The protection lookaside buffer: Efficient protection for single-address space computers. </title> <type> Technical Report 91-11-05, </type> <institution> Univ. of Washington, Department of Computer Science and Engineering, </institution> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: On a memory reference, the TLB is indexed with the virtual page number, returning the physical address translation and the AID for the page. The processor must then determine if access to the page-group specified in the AID is permitted to the 6 See Koldinger et al. <ref> [Koldinger et al. 91] </ref> for a discussion of their management. 5 currently executing protection domain (process). The set of page-groups accessible to the current domain is stored in a set of four page-group registers (called PIDs). In addition, there is a page-group that is global to all domains (group 0).
Reference: [Lam et al. 91] <author> M. Lam, E. Rothberg, and M. Wolf. </author> <title> The cache performance and optimizations of blocked algorithms. </title> <booktitle> In Proc. of the 4th Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 63-74, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: than physically indexed caches, because they do not require address translation before the access [Knapp 85, Smith 82, Wood 90]. 3 Furthermore, compilers can predict and control data placement in the cache, which is difficult or impossible in physically indexed caches in which placement depends on dynamically determined virtual-to-physical mappings <ref> [Lam et al. 91] </ref>. There are two principal problems with using virtually indexed caches in systems with multiple address spaces: synonyms (also called aliases) and homonyms. The synonym problem occurs when a physical page is mapped into two or more different virtual pages.
Reference: [Lampson & Pier 81] <author> B. Lampson and K. Pier. </author> <title> A processor for a high-performance personal computer. </title> <type> Technical report, </type> <institution> Xerox Palo Alto Research Center, </institution> <month> Jan. </month> <year> 1981. </year>
Reference-contexts: Other protection architectures for single address space systems have ranged from no protection at all (as on the Xerox Dorado processors <ref> [Lampson & Pier 81] </ref>) to capability-based architectures [Fabry 74, Levy 84, Pin-now et al. 82]. Much of the groundwork for single address space operating systems was explored in earlier single address space systems, such as Pilot and Cedar [Redell et al. 80, Swinehart et al. 86].
Reference: [Lee 89] <author> R. Lee. </author> <title> Precision architecture. </title> <journal> IEEE Computer, </journal> <volume> 22(1) </volume> <pages> 78-91, </pages> <month> Jan. </month> <year> 1989. </year> <month> 12 </month>
Reference-contexts: This trend can be seen, for example, in the segmented architectures of the HP PA-RISC <ref> [Lee 89] </ref> and the IBM RS/6000 [Groves & Oehler 90] and ESA/370 [Scalzi et al. 89], and the flat architectures of the MIPS R4000 [MIP 91], SPARC Version 9 [SPA 92], and Digital's Alpha family [Dig 92].
Reference: [Levy 84] <author> H. Levy. </author> <title> Capability-Based Computer Sys--tems. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: Other protection architectures for single address space systems have ranged from no protection at all (as on the Xerox Dorado processors [Lampson & Pier 81]) to capability-based architectures <ref> [Fabry 74, Levy 84, Pin-now et al. 82] </ref>. Much of the groundwork for single address space operating systems was explored in earlier single address space systems, such as Pilot and Cedar [Redell et al. 80, Swinehart et al. 86].
Reference: [Li 86] <author> K. Li. </author> <title> Shared Virtual memory on Loosely Coupled Multiprocessors. </title> <type> PhD dissertation, </type> <institution> Yale Univ., </institution> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: For example, virtual page protection may be used to support recoverable virtual memory (e.g., Camelot [Eppinger 89]), distributed shared memory <ref> [Li 86, Carter et al. 91] </ref>, concurrent check-pointing [Li et al. 90] or transactional shared memory systems (as on the IBM 801) [Chang & Mergen 88], among other applications [Appel & Li 91]. <p> Once per page touched Garbage collect the page. Mark it as read-write for the application domain. Garbage collect the page. Place in to-space page-group for the applica tion domain. Distributed VM <ref> [Carter et al. 91, Li 86] </ref> Get Readable: Trap the access, get a readable copy of the page and make it read-only. Once per access of the remote page Check to see if the copy in memory is valid, and retrieve it from the remote host if it's not.
Reference: [Li et al. 90] <author> K. Li, J. Naughton, and J. Plank. </author> <title> Real-time, concurrent checkpoint for parallel programs. </title> <booktitle> In Proc. of the 2nd Conference on the Principles and Practice of Parallel Programming, </booktitle> <pages> pages 79-88, </pages> <month> Mar. </month> <year> 1990. </year>
Reference-contexts: For example, virtual page protection may be used to support recoverable virtual memory (e.g., Camelot [Eppinger 89]), distributed shared memory [Li 86, Carter et al. 91], concurrent check-pointing <ref> [Li et al. 90] </ref> or transactional shared memory systems (as on the IBM 801) [Chang & Mergen 88], among other applications [Appel & Li 91]. <p> Remove all the locks held by this transaction. For each page that was locked, look up in the TLB and move to inaccessible page-group; or remove lock groups from the page-group cache and allocate new groups for the next transaction's locks. Concurrent Checkpoint <ref> [Li et al. 90] </ref> Restrict Access: Remove clients' access rights to all pages in the segment. Once per checkpoint taken Inspect each entry in the PLB and mark the pages as read-only for the application. Mark the page-group for this segment as read-only to the application.
Reference: [MIP 91] <institution> MIPS Computer Systems, Inc., Sunnyvale, CA. </institution> <note> MIPS R4000 Microprocessor User's Manual, 1st edition, 1991. </note> <author> [Mullender & Tanenbaum 86] S. Mullender and A. Tanenbaum. </author> <title> The design of a capability-based operating system. </title> <journal> The Computer Journal, </journal> <volume> 29(4) </volume> <pages> 289-299, </pages> <year> 1986. </year>
Reference-contexts: This trend can be seen, for example, in the segmented architectures of the HP PA-RISC [Lee 89] and the IBM RS/6000 [Groves & Oehler 90] and ESA/370 [Scalzi et al. 89], and the flat architectures of the MIPS R4000 <ref> [MIP 91] </ref>, SPARC Version 9 [SPA 92], and Digital's Alpha family [Dig 92]. Unlike the move from 16- to 32-bit addressing, a 64-bit address space will be revolutionary instead of evolutionary with respect to the way operating systems and applications can use virtual memory. <p> See section 3.2.2. 9 The segment would have to be aligned to a power of two sized page, but this is a relatively minor problem. Supporting multiple protection page sizes requires changes to the PLB. Currently, several commercial processors support multiple sized pages <ref> [Cyp 90, Dig 92, Hew 90, MIP 91] </ref>; the issues in designing a PLB that supports multiple protection page sizes are similar [Tal-luri et al. 92]. 5 Related Work The two models presented in this paper are representative of protection organizations for single address space systems, but they are by no
Reference: [Okamoto et al. 92] <author> T. Okamoto, H. Segawa, S. Shin, H. Nozue, K. Maeda, and M. Saito. </author> <title> A micro-kernel architecture for next generation processors. </title> <booktitle> In USENIX Workshop on Microker-nels and Other Kernel Architectures, </booktitle> <pages> pages 83-94, </pages> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: Okamoto et al. <ref> [Okamoto et al. 92] </ref> extend the domain-page model by mapping access to a page either by protection domain 11 or by the address where the program is currently executing; that is, page A can be marked so that it has read-only access by any thread that is currently executing code from
Reference: [Ousterhout 90] <author> J. Ousterhout. </author> <title> Why aren't operating systems getting faster as fast as hardware. </title> <booktitle> In Proc. of the Summer 1990 USENIX, </booktitle> <pages> pages 247-256, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This is impor 2 tant, because the communication mechanisms popular today (e.g., RPC) are based on data copying and protection domain switches, both of which have increased in cost relative to integer performance on recent processors <ref> [Anderson et al. 91, Ousterhout 90] </ref>. At the same time, software systems are growing in complexity, encouraging decomposition into multiple protection domains.
Reference: [Pinnow et al. 82] <author> K. Pinnow, J. Ranweiler, and J. Miller. </author> <title> The IBM System/38: Object-oriented architecture. </title> <editor> In D. Siewiorek, C. Bell, and A. Newell, editors, </editor> <booktitle> Computer Structures: Principles and Examples, </booktitle> <pages> pages 537-540. </pages> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1982. </year>
Reference: [Redell et al. 80] <author> D. Redell, Y. Dalal, T. Horsley, H. Lauer, W. Lynch, P. McJones, H. Murray, and S. Purcell. </author> <title> Pilot: An operating system for a personal computer. </title> <journal> Communications of the ACM, </journal> <volume> 23(2) </volume> <pages> 81-92, </pages> <month> Feb. </month> <year> 1980. </year>
Reference-contexts: Much of the groundwork for single address space operating systems was explored in earlier single address space systems, such as Pilot and Cedar <ref> [Redell et al. 80, Swinehart et al. 86] </ref>. These systems benefited from the use of a common address space, but they had a single protection domain as well as a single name space. These were dedicated-application or single-user systems that relied completely on language protection for safety.
Reference: [Rozier et al. 92] <author> M. Rozier, V. Abrossimov, F. Ar-mand, I. Boule, M. Gien, M. Guille-mont, F. Herrman, C. Kaiser, S. Langlois, P. Leonard, and W. Neuhauser. </author> <title> Overview of the Chorus distributed operating system. </title> <booktitle> In USENIX Workshop on Microkernels and Other Kernel Architectures, </booktitle> <pages> pages 39-69, </pages> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: At the same time, software systems are growing in complexity, encouraging decomposition into multiple protection domains. The recent move toward server-structured, kernelized operating systems (e.g., Mach [Golub et al. 90], Chorus <ref> [Rozier et al. 92] </ref>, Amoeba [Mullender & Tanenbaum 86] and Windows NT) is one example of this trend. 2 2.2 Virtually Indexed Caches Virtually indexed caches typically provide faster effective access than physically indexed caches, because they do not require address translation before the access [Knapp 85, Smith 82, Wood 90].
Reference: [Scalzi et al. 89] <author> C. Scalzi, A. Ganex, and R. Schmalz. </author> <title> Enterprise Systems Architecture/370: An architecture for multiple virtual space access and authorization. </title> <journal> IBM Systems Journal, </journal> <volume> 28(1) </volume> <pages> 15-37, </pages> <year> 1989. </year>
Reference-contexts: This trend can be seen, for example, in the segmented architectures of the HP PA-RISC [Lee 89] and the IBM RS/6000 [Groves & Oehler 90] and ESA/370 <ref> [Scalzi et al. 89] </ref>, and the flat architectures of the MIPS R4000 [MIP 91], SPARC Version 9 [SPA 92], and Digital's Alpha family [Dig 92].
Reference: [Scott et al. 90] <author> M. Scott, T. LeBlanc, and B. Marsh. </author> <booktitle> Multi-model parallel programming in Psyche. In Proc. of the 2nd Conference on the Principles and Practice of Parallel Programming, </booktitle> <pages> pages 70-78, </pages> <month> Mar. </month> <year> 1990. </year>
Reference-contexts: These were dedicated-application or single-user systems that relied completely on language protection for safety. New hardware allows us to generalize this model to multiple protection domains, as in Psyche <ref> [Scott et al. 90] </ref>. Segmented systems (e.g., Multics [Bensoussan et al. 72] and the IBM 801 [Chang & Mergen 88]) support uniform sharing to some degree.
Reference: [Smith 82] <author> A. Smith. </author> <title> Cache memories. </title> <journal> ACM Computing Surveys, </journal> <volume> 14(3) </volume> <pages> 473-530, </pages> <month> Sept. </month> <year> 1982. </year>
Reference-contexts: [Golub et al. 90], Chorus [Rozier et al. 92], Amoeba [Mullender & Tanenbaum 86] and Windows NT) is one example of this trend. 2 2.2 Virtually Indexed Caches Virtually indexed caches typically provide faster effective access than physically indexed caches, because they do not require address translation before the access <ref> [Knapp 85, Smith 82, Wood 90] </ref>. 3 Furthermore, compilers can predict and control data placement in the cache, which is difficult or impossible in physically indexed caches in which placement depends on dynamically determined virtual-to-physical mappings [Lam et al. 91]. <p> All techniques have drawbacks: flushing exacerbates the cold-start problem when returning from a process switch; address extension requires additional bits in each cache line, and introduces the synonym problem when different address spaces use the same virtual address to refer to the same location <ref> [Smith 82] </ref>; virtually indexed, physically tagged caches are also vulnerable to the synonym problem, because the same physical address can still reside in multiple locations in the cache [Wheeler & Bershad 92]. Neither synonyms nor homonyms need exist on a single address space system.
Reference: [SPA 92] <author> SPARC International, </author> <title> Mountain View, CA. SPARC Architecture Manual, </title> <note> Version 9, 1992. </note> <author> [Swinehart et al. 86] D. Swinehart, P. Zellweger, R. Beach, and R. Hagmann. </author> <title> A structural view of the Cedar programming environment. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(4) </volume> <pages> 419-490, </pages> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: This trend can be seen, for example, in the segmented architectures of the HP PA-RISC [Lee 89] and the IBM RS/6000 [Groves & Oehler 90] and ESA/370 [Scalzi et al. 89], and the flat architectures of the MIPS R4000 [MIP 91], SPARC Version 9 <ref> [SPA 92] </ref>, and Digital's Alpha family [Dig 92]. Unlike the move from 16- to 32-bit addressing, a 64-bit address space will be revolutionary instead of evolutionary with respect to the way operating systems and applications can use virtual memory.
Reference: [Talluri et al. 92] <author> M. Talluri, S. Kong, M. Hill, and D. Patterson. </author> <title> Tradeoffs in supporting two page sizes. </title> <booktitle> In Proc. of the 19th International Symposium on Computer Architecture, </booktitle> <pages> pages 415-424, </pages> <month> May </month> <year> 1992. </year>
Reference: [Wang et al. 89] <author> W.-H. Wang, J.-L. Baer, and H. Levy. </author> <title> Organization and performance of a two-level virtual-real cache hierarchy. </title> <booktitle> In Proc. of the 16th International Symposium on Computer Architecture, </booktitle> <pages> pages 140-148, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: segment boundaries only (SPUR [Wood et al. 87] and the IBM RISC processors [Chang & Mergen 88, Groves & Oehler 90]), flushing the cache on process switches (as required by the i860 [Int 89]), lazily flushing aliased pages from the cache [Wheeler & Bershad 92], or hardware support for synonyms <ref> [Goodman 87, Wang et al. 89] </ref>. The first two solutions restrict the generality of the system, the third discards potentially useful cache state and adds to the cost of process switches, the fourth complicates the operating system, and the fifth complicates the hardware. <p> The TLB can therefore be moved out of the critical path of the processor, and even off the processor chip; an obvious organization would place the TLB along with the cache controller for the second-level cache (similar to the design in Wang et al. <ref> [Wang et al. 89] </ref>). An advantage of moving the TLB off-chip is that it permits a larger TLB than that typically found in microprocessors. The PLB would still reside on the microprocessor chip, but with different configuration constraints than the TLB it replaces.
Reference: [Wheeler & Bershad 92] <author> B. Wheeler and B. Bershad. </author> <title> Consistency management for virtually indexed caches. </title> <booktitle> In Proc. of the 5th Conference on Architectural Support for Programming Languages and Operating Systems, Oct. 1992. these proceedings. </booktitle>
Reference-contexts: restrictions (as in Sun OS [Cheng 87]), sharing on segment boundaries only (SPUR [Wood et al. 87] and the IBM RISC processors [Chang & Mergen 88, Groves & Oehler 90]), flushing the cache on process switches (as required by the i860 [Int 89]), lazily flushing aliased pages from the cache <ref> [Wheeler & Bershad 92] </ref>, or hardware support for synonyms [Goodman 87, Wang et al. 89]. <p> cache line, and introduces the synonym problem when different address spaces use the same virtual address to refer to the same location [Smith 82]; virtually indexed, physically tagged caches are also vulnerable to the synonym problem, because the same physical address can still reside in multiple locations in the cache <ref> [Wheeler & Bershad 92] </ref>. Neither synonyms nor homonyms need exist on a single address space system.
Reference: [Wilkes & Sears 92] <author> J. Wilkes and B. Sears. </author> <title> A comparison of protection lookaside buffers and the PA-RISC protection architecture. </title> <type> Technical Report HPL-92-55, </type> <institution> Hewlett-Packard Laboratories, </institution> <address> Palo Alto, CA, </address> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Thus, for the purposes of our discussion in the next section, we replace the PA-RISC's page-group registers with a cache of permitted page-groups, with support for LRU replacement (suggested by Wilkes and Sears <ref> [Wilkes & Sears 92] </ref>). Because the page-group model requires only one set of access rights per page (and therefore one entry in the protection cache), protection and translation information can be combined in a TLB without duplicating translation data.
Reference: [Wood 90] <author> D. Wood. </author> <title> The Design and Evaluation of In-Cache Address Translation. </title> <type> PhD dissertation, </type> <institution> Univ. of CA, Berkeley, </institution> <month> Mar. </month> <year> 1990. </year>
Reference-contexts: [Golub et al. 90], Chorus [Rozier et al. 92], Amoeba [Mullender & Tanenbaum 86] and Windows NT) is one example of this trend. 2 2.2 Virtually Indexed Caches Virtually indexed caches typically provide faster effective access than physically indexed caches, because they do not require address translation before the access <ref> [Knapp 85, Smith 82, Wood 90] </ref>. 3 Furthermore, compilers can predict and control data placement in the cache, which is difficult or impossible in physically indexed caches in which placement depends on dynamically determined virtual-to-physical mappings [Lam et al. 91].
Reference: [Wood et al. 87] <author> D. Wood, S. Eggers, and G. Gibson. </author> <title> SPUR memory system architecture. </title> <type> Technical Report UCB/CSD 87/394, </type> <institution> Univ. of CA, Berkeley, Computer Science Division, </institution> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Reference to an item through different virtual addresses causes that item to appear simultaneously in multiple cache lines, creating a coherency problem on writes. Many solutions to this problem have been devised, such as allocation restrictions (as in Sun OS [Cheng 87]), sharing on segment boundaries only (SPUR <ref> [Wood et al. 87] </ref> and the IBM RISC processors [Chang & Mergen 88, Groves & Oehler 90]), flushing the cache on process switches (as required by the i860 [Int 89]), lazily flushing aliased pages from the cache [Wheeler & Bershad 92], or hardware support for synonyms [Goodman 87, Wang et al.
Reference: [Young et al. 87] <author> M. Young, A. Tevanian, R. Rashid, D. Golub, J. Eppinger, J. Chew, W. Bolosky, D. Black, and R. Baron. </author> <title> The duality of memory and communication in the implementation of a multiprocessor operating system. </title> <booktitle> In Proc. of the 11th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 63-76, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: If these operations are implemented by user-level paging servers <ref> [Young et al. 87] </ref> that read and write the pages directly, then the paging server's protection domain must have exclusive access to the page during the operation.
References-found: 48

