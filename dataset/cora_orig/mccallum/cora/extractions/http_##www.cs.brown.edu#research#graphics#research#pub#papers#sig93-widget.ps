URL: http://www.cs.brown.edu/research/graphics/research/pub/papers/sig93-widget.ps
Refering-URL: http://www.cs.brown.edu/research/graphics/research/pub/
Root-URL: http://www.cs.brown.edu
Email: fbcz,kph,dcr,nth,twm,nfp,jfhg@cs.brown.edu  
Phone: (401) 863-7693;  
Title: An Interactive 3D Toolkit for Constructing 3D Widgets  
Author: Robert C. Zeleznik, Kenneth P. Herndon, Daniel C. Robbins, Nate Huang, Tom Meyer, Noah Parker and John F. Hughes 
Keyword: CR Categories I.3.6 [Computer Graphics]: Methodology and Techniques; Interaction Techniques D.1.7 [Programming Languages]: Programming Techniques; Visual Programming D.2.2 [Software Engineering]: Tools and Techniques; User Interfaces  
Address: Providence, RI 02912  
Affiliation: Brown University Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> AVS, Inc. </author> <title> AVS Developer's Guide, </title> <editor> v. 3.0, </editor> <year> 1991. </year>
Reference-contexts: Although this approach is extremely powerful, exploring the full potential requires that programmers be able to visualize complex relationships among software objects (e.g., constraint 1 That is, encapsulations of geometry and behavior. networks, data- and control-flow graphs). A second paradigm, based on graphically manipulating function networks <ref> [1; 8; 10] </ref>, is more accessible to the non-programmer, but still suffers because inherently geometric relationships must be specified by wiring 2D boxes together. Our toolkit uses direct manipulation of 3D widgets to model the construction of widgets and application objects whose geometric components are affinely constrained.
Reference: [2] <author> A. H. Barr. </author> <title> Global and local deformations of solid primitives. </title> <booktitle> Computer Graphics (SIGGRAPH '84 Proceedings), </booktitle> <volume> 18(3) </volume> <pages> 21-30, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Ports on black-boxes are geometrically represented as labeled buttons. The accompanying video shows two Black-boxes: an interface to Barr's nonlinear deformation functions <ref> [2] </ref> and a PHIGS camera specification [6]. Finally, all the geometric objects in 3D modeling environments (cubes, spheres, CSGs, etc.) are considered collectively as a single primitive class called Geometries.
Reference: [3] <author> Eric A. Bier. </author> <title> Snap-dragging in three dimensions. </title> <booktitle> Computer Graphics (1990 Symposium on Interactive 3D Graphics), </booktitle> <volume> 24(2) </volume> <pages> 193-204, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Today's user interfaces for most 3D graphics applications still depend heavily on 2D GUIs and keyboard input. There have been several recent attempts both to extend these user interfaces into 3D and to describe intermediary 3D widgets 1 that control application objects <ref> [3; 4; 5; 7; 13; 15] </ref>. Even though this style of interaction is a straightforward extension of interaction through intermediary 2D widgets such as dials or sliders, we know of no efforts to develop interactive 3D toolkits akin to UIMX or Garnet [11]. <p> The fact that the interface and application objects exist in the same underlying system, UGA, allows us to blur the distinction between them. We feel that such blurring is natural for 3D applications in general, and especially for virtual reality applications. Linking is related to snapping <ref> [3] </ref>, but differs in requiring explicit interactive selection of source and destination objects, followed by explicit user confirmation. This protocol reduces clutter by eliminating alignment objects.
Reference: [4] <author> Stuart K. Card, George G. Robertson, and Jock D. Mackinlay. </author> <title> The information visualizer, an information workspace. </title> <booktitle> In Proceedings of ACM CHI'91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 181-188, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Today's user interfaces for most 3D graphics applications still depend heavily on 2D GUIs and keyboard input. There have been several recent attempts both to extend these user interfaces into 3D and to describe intermediary 3D widgets 1 that control application objects <ref> [3; 4; 5; 7; 13; 15] </ref>. Even though this style of interaction is a straightforward extension of interaction through intermediary 2D widgets such as dials or sliders, we know of no efforts to develop interactive 3D toolkits akin to UIMX or Garnet [11].
Reference: [5] <author> D. Brookshire Conner, Scott S. Snibbe, Kenneth P. Herndon, Daniel C. Robbins, Robert C. Zeleznik, and Andries van Dam. </author> <title> Three-dimensional widgets. </title> <booktitle> Computer Graphics (1992 Symposium on Interactive 3D Graphics), </booktitle> <volume> 25(2) </volume> <pages> 183-188, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Today's user interfaces for most 3D graphics applications still depend heavily on 2D GUIs and keyboard input. There have been several recent attempts both to extend these user interfaces into 3D and to describe intermediary 3D widgets 1 that control application objects <ref> [3; 4; 5; 7; 13; 15] </ref>. Even though this style of interaction is a straightforward extension of interaction through intermediary 2D widgets such as dials or sliders, we know of no efforts to develop interactive 3D toolkits akin to UIMX or Garnet [11]. <p> Each primitive visually represents a 0D, 1D, 2D, or 3D coordinate system and each can be constrained by affine transformations to the coordinate systems of other primitives. This metaphor can be used to express a wide variety of user interactions, including those of our previous 3D widgets <ref> [5; 14; 9] </ref>. However, the coordinate-system metaphor is only a framework for conceptualizing the primitives, not a strict definition of them.
Reference: [6] <author> James D. Foley, Andries van Dam, Steven Feiner, and John F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1990. </year>
Reference-contexts: Ports on black-boxes are geometrically represented as labeled buttons. The accompanying video shows two Black-boxes: an interface to Barr's nonlinear deformation functions [2] and a PHIGS camera specification <ref> [6] </ref>. Finally, all the geometric objects in 3D modeling environments (cubes, spheres, CSGs, etc.) are considered collectively as a single primitive class called Geometries.
Reference: [7] <author> Michael Gleicher and Andrew Witkin. </author> <title> Through-the-lens camera control. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 331-340, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Today's user interfaces for most 3D graphics applications still depend heavily on 2D GUIs and keyboard input. There have been several recent attempts both to extend these user interfaces into 3D and to describe intermediary 3D widgets 1 that control application objects <ref> [3; 4; 5; 7; 13; 15] </ref>. Even though this style of interaction is a straightforward extension of interaction through intermediary 2D widgets such as dials or sliders, we know of no efforts to develop interactive 3D toolkits akin to UIMX or Garnet [11].
Reference: [8] <author> Paul E. Haeberli. Conman: </author> <title> A visual programming language for interactive graphics. </title> <booktitle> Computer Graphics (SIGGRAPH '88 Proceedings), </booktitle> <volume> 22(4) </volume> <pages> 103-111, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Although this approach is extremely powerful, exploring the full potential requires that programmers be able to visualize complex relationships among software objects (e.g., constraint 1 That is, encapsulations of geometry and behavior. networks, data- and control-flow graphs). A second paradigm, based on graphically manipulating function networks <ref> [1; 8; 10] </ref>, is more accessible to the non-programmer, but still suffers because inherently geometric relationships must be specified by wiring 2D boxes together. Our toolkit uses direct manipulation of 3D widgets to model the construction of widgets and application objects whose geometric components are affinely constrained.
Reference: [9] <author> Kenneth P. Herndon, Robert C. Zeleznik, Daniel C. Robbins, D. Brookshire Conner, Scott S. Snibbe, and Andries van Dam. </author> <title> Interactive shadows. </title> <booktitle> 1992 UIST Proceedings, </booktitle> <pages> pages 1-6, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The Brown Graphics Group has had considerable experience using its Unified Graphics Architecture (UGA) system [16] to script 3D widgets such as deformation racks [14], interactive shadows <ref> [9] </ref>, parameterized models, and other constrained 3D geometries. Using this experience, we have developed an interactive toolkit to facilitate the visual programming of the geometry and behavior of such interactive models. <p> Each primitive visually represents a 0D, 1D, 2D, or 3D coordinate system and each can be constrained by affine transformations to the coordinate systems of other primitives. This metaphor can be used to express a wide variety of user interactions, including those of our previous 3D widgets <ref> [5; 14; 9] </ref>. However, the coordinate-system metaphor is only a framework for conceptualizing the primitives, not a strict definition of them.
Reference: [10] <author> Michael Kass. </author> <title> CONDOR: Constraint-based dataflow. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 321-330, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Although this approach is extremely powerful, exploring the full potential requires that programmers be able to visualize complex relationships among software objects (e.g., constraint 1 That is, encapsulations of geometry and behavior. networks, data- and control-flow graphs). A second paradigm, based on graphically manipulating function networks <ref> [1; 8; 10] </ref>, is more accessible to the non-programmer, but still suffers because inherently geometric relationships must be specified by wiring 2D boxes together. Our toolkit uses direct manipulation of 3D widgets to model the construction of widgets and application objects whose geometric components are affinely constrained.
Reference: [11] <author> Brad A. Myers, Dario A. Guise, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie, Edward Pervin, An-drew Mickish, and Philippe Marchal. </author> <title> GARNET comprehensive support for graphical, highly interactive user interfaces. </title> <journal> IEEE COMPUTER magazine, </journal> <pages> pages 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Even though this style of interaction is a straightforward extension of interaction through intermediary 2D widgets such as dials or sliders, we know of no efforts to develop interactive 3D toolkits akin to UIMX or Garnet <ref> [11] </ref>. The Brown Graphics Group has had considerable experience using its Unified Graphics Architecture (UGA) system [16] to script 3D widgets such as deformation racks [14], interactive shadows [9], parameterized models, and other constrained 3D geometries.
Reference: [12] <institution> Open Software Foundation. </institution> <note> OSF/Motif Reference Guide. </note>
Reference-contexts: us construct a wide range of interactive 3D objects, and (iii) the constraint relationships among the primitives. 2 Overview of our 3D Toolkit The traditional approach to designing user interface toolkits is to create a library of software objects and customize them through instantiation and specialization within standard programming languages <ref> [12; 15] </ref>. Although this approach is extremely powerful, exploring the full potential requires that programmers be able to visualize complex relationships among software objects (e.g., constraint 1 That is, encapsulations of geometry and behavior. networks, data- and control-flow graphs).
Reference: [13] <author> Steve Sistare. </author> <title> Graphical interaction techniques in constraint-based geometric modeling. </title> <editor> In Steve MacKay and Evelyn M. Kidd, editors, </editor> <booktitle> Graphics Interface '91 Proceedings, </booktitle> <pages> pages 161-164. </pages> <booktitle> Canadian Man-Computer Communications Society, </booktitle> <month> March </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Today's user interfaces for most 3D graphics applications still depend heavily on 2D GUIs and keyboard input. There have been several recent attempts both to extend these user interfaces into 3D and to describe intermediary 3D widgets 1 that control application objects <ref> [3; 4; 5; 7; 13; 15] </ref>. Even though this style of interaction is a straightforward extension of interaction through intermediary 2D widgets such as dials or sliders, we know of no efforts to develop interactive 3D toolkits akin to UIMX or Garnet [11].
Reference: [14] <author> Scott S. Snibbe, Kenneth P. Herndon, Daniel C. Robbins, D. Brookshire Conner, and Andries van Dam. </author> <title> Using deformations to explore 3d widget design. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 351-352, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The Brown Graphics Group has had considerable experience using its Unified Graphics Architecture (UGA) system [16] to script 3D widgets such as deformation racks <ref> [14] </ref>, interactive shadows [9], parameterized models, and other constrained 3D geometries. Using this experience, we have developed an interactive toolkit to facilitate the visual programming of the geometry and behavior of such interactive models. <p> Each primitive visually represents a 0D, 1D, 2D, or 3D coordinate system and each can be constrained by affine transformations to the coordinate systems of other primitives. This metaphor can be used to express a wide variety of user interactions, including those of our previous 3D widgets <ref> [5; 14; 9] </ref>. However, the coordinate-system metaphor is only a framework for conceptualizing the primitives, not a strict definition of them.
Reference: [15] <author> Paul S. Strauss and Rikk Carey. </author> <title> An object-oriented 3d graphics toolkit. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 341-349, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Today's user interfaces for most 3D graphics applications still depend heavily on 2D GUIs and keyboard input. There have been several recent attempts both to extend these user interfaces into 3D and to describe intermediary 3D widgets 1 that control application objects <ref> [3; 4; 5; 7; 13; 15] </ref>. Even though this style of interaction is a straightforward extension of interaction through intermediary 2D widgets such as dials or sliders, we know of no efforts to develop interactive 3D toolkits akin to UIMX or Garnet [11]. <p> us construct a wide range of interactive 3D objects, and (iii) the constraint relationships among the primitives. 2 Overview of our 3D Toolkit The traditional approach to designing user interface toolkits is to create a library of software objects and customize them through instantiation and specialization within standard programming languages <ref> [12; 15] </ref>. Although this approach is extremely powerful, exploring the full potential requires that programmers be able to visualize complex relationships among software objects (e.g., constraint 1 That is, encapsulations of geometry and behavior. networks, data- and control-flow graphs).
Reference: [16] <author> Robert C. Zeleznik, D. Brookshire Conner, Matthias M. Wloka, Daniel G. Aliaga, Nathan T. Huang, Philip M. Hub-bard, Brian Knep, Henry Kaufman, John F. Hughes, and An-dries van Dam. </author> <title> An object-oriented framework for the integration of interactive animation techniques. </title> <booktitle> Computer Graphics (SIGGRAPH '91 Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 105-112, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The Brown Graphics Group has had considerable experience using its Unified Graphics Architecture (UGA) system <ref> [16] </ref> to script 3D widgets such as deformation racks [14], interactive shadows [9], parameterized models, and other constrained 3D geometries. Using this experience, we have developed an interactive toolkit to facilitate the visual programming of the geometry and behavior of such interactive models.
References-found: 16

