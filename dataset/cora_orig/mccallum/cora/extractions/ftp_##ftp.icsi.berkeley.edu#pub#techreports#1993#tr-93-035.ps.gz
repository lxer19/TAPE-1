URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1993/tr-93-035.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1993.html
Root-URL: http://www.icsi.berkeley.edu
Title: Perturbation: An Efficient Technique for the Solution of Very Large Instances of the Euclidean TSP  
Author: B. Codenotti G. Manzini L. Margara and G. Resta 
Address: Street, Suite 600, Berkeley, CA 94704-1105 IEI-CNR, Via S.Maria, 46 56100-Pisa (Italy)  -IEI-CNR, Via S.Maria, 46 56100-Pisa (Italy)  
Affiliation: Sistemi Informatici e Calcolo  Center  Dipartimento di Informatica, Universita degli studi di Pisa (Italy)  
Note: This work has been partially supported by the CNR through the "Progetto Finalizzato  Parallelo. Sottoprogetto 2". G. Manzini and G. Resta have been partially supported by an INDAM postdoc fellowship. ICSI, 1947  
Date: July 1993  
Pubnum: TR-93-035  
Abstract: In this paper we introduce a technique for building efficient iterated local search procedures. This technique, that we call perturbation, uses global information on TSP instances to speed-up and improve the quality of the tours found by heuristic methods. The main idea is to escape from local optima by introducing perturbations in the problem instance rather than in the solution. The performance of our techniques has been tested and compared with known methods. To this end, we performed a number of experiments both on test instances, for which the optimal tour length is known, and on uniformly distributed instances, for which the comparison is done with the Held-Karp lower bound. The experimental results, done on up to 100,000 cities, show that our techniques outperform the known methods for iterating local search for very large instances. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. L. Bentley. </author> <title> Experiments on traveling salesman heuristics. </title> <booktitle> Proc. 1st Symp. on Discrete Algorithms, </booktitle> <pages> 91-99, </pages> <year> 1990. </year>
Reference-contexts: The solution of very large instances of the TSP has challenged several authors over the last few years <ref> [1, 2, 5, 7, 10] </ref>. The results have been quite satisfactory. In fact, by using, e.g., the Lin-Kernighan method | LK from now | it is possible to face TSP instances with thousands of cities and obtain, within a reasonable time, tours which are very close to the optimal one.
Reference: [2] <author> J. L. Bentley. </author> <title> Fast algorithms for geometric traveling salesman problems. </title> <journal> ORSA. J. Comput., </journal> (4):387-411, 1992. 
Reference-contexts: The solution of very large instances of the TSP has challenged several authors over the last few years <ref> [1, 2, 5, 7, 10] </ref>. The results have been quite satisfactory. In fact, by using, e.g., the Lin-Kernighan method | LK from now | it is possible to face TSP instances with thousands of cities and obtain, within a reasonable time, tours which are very close to the optimal one. <p> Experimental results confirm the intuitive fact that the quality of w strongly depends on the quality of s. As an example, local search applied to an initial solution obtained by a direct method, e.g., multiple fragment heuristic <ref> [2] </ref>, finds solutions which are better than those obtained by applying the same local search procedure to random initial tours. ILS takes advantage of this experimental evidence by applying local search to solutions which are obtained by perturbing a previously found local optimum. <p> However, by using appropriate data structures and by taking advantage of certain geometric properties of the tours, it is possible to reduce substantially the running time of these algorithms <ref> [2] </ref>. Further significant reductions of the time complexity are possible by implementing "approximate" algorithms that find slightly longer tours but are much faster than the original versions. <p> This is particularly true for ILS algorithms where local search is repeated many times. In order to substantially reduce the running time of local search procedures we use the don't-look bit technique described in <ref> [2, Sec. 4] </ref>. Our LK algorithm always uses this technique, while 2-Opt and 3-Opt algorithms use don't-look bits only when applied to perturbed problems.
Reference: [3] <author> J. L. Bentley, D. S. Johnson, L. A. McGeoch, E. E. Rothberg. </author> <title> Near-optimal solutions to very large traveling salesman problems. </title> <note> In preparation. </note>
Reference-contexts: For some preliminary results, see [8]. The main contributions in the field of experimental solution of large TSP instances come from David Johnson and several coauthors <ref> [3, 7] </ref>. To the best of our knowledge, there are no other significant results for instances with more than 1,000 cities. This paper provides a new framework for implementing iterated local search so that it becomes feasible to find almost optimal solutions to TSP instances with more than 100,000 cities.
Reference: [4] <author> B. Codenotti, G. Manzini, L. Margara, and G.Resta. </author> <title> Global strategies for augmenting the efficiency of TSP heuristics Proc. </title> <booktitle> of the 3rd Workshop on Algorithms and Data Structures, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: The problem of gathering some global information on an instance of the TSP seems to be central; in fact all the methods which avoid this are characterized by either a significant loss of precision or a running time penalty. In this paper, we continue the work started in <ref> [4] </ref> and develop an adaptive framework based on a global parameter, the problem sensitivity, whose evaluation suggests a number of strategies to improve over existing methods. More precisely, we implement iterated local search by transforming the instance at hand into a different one.
Reference: [5] <author> B. L. Golden, L. D. Doyle, W. Stewart JR. </author> <title> Approximate traveling salesman algorithm. </title> <journal> Oper. Res., </journal> (28):694-711, 1980. 
Reference-contexts: The solution of very large instances of the TSP has challenged several authors over the last few years <ref> [1, 2, 5, 7, 10] </ref>. The results have been quite satisfactory. In fact, by using, e.g., the Lin-Kernighan method | LK from now | it is possible to face TSP instances with thousands of cities and obtain, within a reasonable time, tours which are very close to the optimal one.
Reference: [6] <author> M. Held and R. Karp. </author> <title> The traveling salesman problem and minimum spanning trees. </title> <journal> Oper. Res. </journal> <volume> 18 </volume> <pages> 1138-1162, </pages> <year> 1970. </year>
Reference-contexts: In order to perform efficiently this near neighbor search, our algorithms execute a preprocessing stage in which the following data structures are created: 1 Held and Karp <ref> [6] </ref> have proposed an iterative technique based on minimum spanning trees which produces sharp lower bounds on the optimal tour length. 5 1. a bidimensional array near [ ][ ] such that near [i][] is the list of the 20 cities closer to city i, sorted by increasing distance; 2. a
Reference: [7] <author> D. S. Johnson. </author> <title> Local optimization and the traveling salesman problem. </title> <booktitle> Proc. 17th Colloq. on Automata, Languages, and Programming, Lecture Notes in Computer Science 443. </booktitle> , <pages> 446-461, </pages> <year> 1990. </year> <month> 11 </month>
Reference-contexts: The solution of very large instances of the TSP has challenged several authors over the last few years <ref> [1, 2, 5, 7, 10] </ref>. The results have been quite satisfactory. In fact, by using, e.g., the Lin-Kernighan method | LK from now | it is possible to face TSP instances with thousands of cities and obtain, within a reasonable time, tours which are very close to the optimal one. <p> For some preliminary results, see [8]. The main contributions in the field of experimental solution of large TSP instances come from David Johnson and several coauthors <ref> [3, 7] </ref>. To the best of our knowledge, there are no other significant results for instances with more than 1,000 cities. This paper provides a new framework for implementing iterated local search so that it becomes feasible to find almost optimal solutions to TSP instances with more than 100,000 cities. <p> Johnson <ref> [7] </ref> has investigated the improvement of ILS when 3-Opt local search is replaced by the more powerful LK heuristic in Step 2:2. Local search heuristics take a solution s as input and yield a local optimum w which is shorter than s.
Reference: [8] <author> D. S. Johnson, C. H. Papadimitriou, and M. Yannakakis. </author> <title> How easy is local search ? J. </title> <journal> Comput. System Sci. </journal> <volume> 37(1) </volume> <pages> 79-100, </pages> <year> 1988. </year>
Reference-contexts: On the other hand we are still far from solving the general problem of evaluating the performance of local search heuristics and capturing the mathematical properties of the correspondent local optima. For some preliminary results, see <ref> [8] </ref>. The main contributions in the field of experimental solution of large TSP instances come from David Johnson and several coauthors [3, 7]. To the best of our knowledge, there are no other significant results for instances with more than 1,000 cities. <p> More precisely, we implement iterated local search by transforming the instance at hand into a different one. There have been several attempts to formalize some intuitions on the structure of the local optima found by local search procedures (see e.g. <ref> [8] </ref>). We use the notion of problem sensitivity as the theoretical background for devising a perturbation strategy to be used in the iteration of local search procedures. Sensitivity has been widely recognized as one important parameter in the analysis of computational problems.
Reference: [9] <author> S. Lin and W. Kernighan. </author> <title> An effective heuristic algorithm for traveling salesman problem. </title> <journal> Oper. Res., </journal> (21):493-515, 1973. 
Reference: [10] <author> E. Lawler, J. Lenstra, A. Rinnoy Kan, and D. Shmoys. </author> <title> The traveling salesman problem. </title> <publisher> John Wiley and Sons, </publisher> <year> 1985. </year>
Reference-contexts: The solution of very large instances of the TSP has challenged several authors over the last few years <ref> [1, 2, 5, 7, 10] </ref>. The results have been quite satisfactory. In fact, by using, e.g., the Lin-Kernighan method | LK from now | it is possible to face TSP instances with thousands of cities and obtain, within a reasonable time, tours which are very close to the optimal one.
Reference: [11] <author> O. Martin, S. W. Otto, and W. Felten. </author> <title> Large-step markov chains for the TSP incorporating local search heuristics. </title> <journal> Oper. Res. Lett., </journal> (11):219-224, 1992. 
Reference-contexts: In practice, ILS finds solutions much shorter than those found by repeated local search, which consists of running the local search procedure for a certain number of times, starting from independently chosen initial tours. ILS has been introduced by Martin, Otto, and Felten <ref> [11] </ref>. They initially tested this technique on the euclidean TSP by using 3-Opt local search procedure in Step 2:2. To perturb the solution s Step 2:1 they remove 4 arcs from s and replace them in order to obtain a non-sequential move. <p> More precisely, they first replace two arcs belonging to s by the two arcs which disconnect the tour. Then they repeat the same operation in order to reconnect the tour (see <ref> [11] </ref>).
Reference: [12] <author> G. Reinelt. </author> <title> TSPLIB | A traveling salesman problem library. </title> <journal> ORSA. J. Comput., </journal> (3):376-384, 1991. 
Reference-contexts: This makes iterated local search | which already is more accurate | also much faster than repeated local search. Table 6 gives the results | for DB-ILS, *-move, k-remove | on some instances (taken from TSPLIB <ref> [12] </ref>) for which the optimal tour length is known. The local search procedure used is LK. Fig. 2 gives the performance of these algorithms as a function of the actual running time for a 100,000 city instance.
References-found: 12

