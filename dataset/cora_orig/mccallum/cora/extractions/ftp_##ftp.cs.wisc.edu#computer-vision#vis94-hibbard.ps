URL: ftp://ftp.cs.wisc.edu/computer-vision/vis94-hibbard.ps
Refering-URL: http://www.cs.wisc.edu/computer-vision/pubs.html
Root-URL: 
Title: A Lattice Model for Data Display  
Author: William L. Hibbard & Charles R. Dyer and Brian E. Paul 
Address: Wisconsin Madison  
Affiliation: 1 Space Science and Engineering Center 2 Computer Sciences Department University of  
Abstract: We will try to address the need for a formal foundation for visualization by taking an analytic approach to defining D. Since an arbitrary function D: U fi V will not produce displays D(u) that effectively communicate the information content of data objects u U, we seek to define conditions on D to ensure that it does. For example, we may require that D be injective (i.e., one-to-one), so that no two data objects have the same display. However, this is clearly not enough. If we let U and V both be the set of images of 512 by 512 pixels with 24 bits of color per pixel, then any permutation of U can be interpreted as an injective function D from U to V. But an arbitrary permutation of images will not effectively communicate information. Thus we need to define stronger conditions on the function D. Our investigation depends on some complex mathematics, although we will only present the conclusions in this paper. The details are available in [7]. In order to develop a foundation for visualization, we develop lattice models for data objects and displays that focus on the fact that data objects are approximations to mathematical objects and real displays are approximations to ideal displays. These lattice models give us a way to quantize the information content of data and displays and to define conditions on the visualization mappings from data to displays. Mappings satisfy these conditions if and only if they are lattice isomorphisms. We show how to apply this result to scientific data and display models, and discuss how it might be applied to recursively defined data types appropriate for complex information processing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bertin, J., </author> <title> 1983; Semiology of Graphics. </title> <editor> W. J. </editor> <title> Berg, </title> <type> Tr. </type> <institution> University of Wisconsin Press. </institution>
Reference-contexts: Models can be developed for data (e.g., the fiber bundle data model [4] describes the data objects that computational scientists use to approximate functions between differentiable manifolds), displays (e.g., Bertin's detailed analysis of static 2-D displays <ref> [1] </ref>), users (i.e., their tasks and capabilities), computations (i.e., how computations are expressed and executed), and hardware devices (i.e., their capabilities). The purpose of data visualization is to communicate the information content of data objects in displays. <p> embed complex data types, defined as hierarchies of tuples and arrays, in data lattices (see [7] for details). (the empty set) -(^, ^, ^)- -(A, ^, ^), (^, B, ^)- f 5 A scientific display model For our scientific display model, we start with Bertin's analysis of static 2-D displays <ref> [1] </ref>. He modeled displays as sets of graphical marks, where each mark was described by an 8-tuple of graphical primitive values (i.e., two screen coordinates, size, value, texture, color, orientation and shape).
Reference: [2] <author> Davey, B. A. and H. A. Priestly, </author> <title> 1990; Introduction to Lattices and Order. </title> <publisher> Cambridge University Press. </publisher>
Reference-contexts: We define a data model U as a lattice of data objects, ordered by how precisely they approximate mathematical objects. To say that U is a lattice <ref> [2] </ref> means that there is a partial order on U (i.e., a binary relation such that, for all u , u , u U, u u , u u & u u fi u = u and u u & u u fi u u ) and that any pair u
Reference: [3] <author> Gunter, C. A. and Scott, D. S., </author> <title> 1990; Semantic domains. </title> <booktitle> In the Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B., J. van Leeuwen ed., </editor> <publisher> The MIT Press/Elsevier, </publisher> <pages> 633-674. </pages>
Reference-contexts: Several techniques have been developed to model such data using lattices. In the current context, the most promising is called universal domains <ref> [3, 17] </ref>. Just as we embedded data objects of many different types in the domain U in Section 4, data objects of many different recursively defined data types are embedded in a universal domain (which we also denote by U).
Reference: [4] <author> Haber, R. B., B. Lucas and N. Collins, </author> <title> 1991; A data model for scientific visualization with provisions for regular and irregular grids. </title> <booktitle> Proc. Visualization 91. IEEE. </booktitle> <pages> 298-305. </pages>
Reference-contexts: 1 Introduction 2 Lattices as data and display models Robertson et.al. have described the need for formal models that can serve as a foundation for visualization techniques and systems [13]. Models can be developed for data (e.g., the fiber bundle data model <ref> [4] </ref> describes the data objects that computational scientists use to approximate functions between differentiable manifolds), displays (e.g., Bertin's detailed analysis of static 2-D displays [1]), users (i.e., their tasks and capabilities), computations (i.e., how computations are expressed and executed), and hardware devices (i.e., their capabilities).
Reference: [5] <author> Haberli, P., </author> <year> 1988; </year> <month> ConMan: </month> <title> A visual programming language for interactive graphics; Computer Graphics 22(4), </title> <type> 103-111. </type>
Reference-contexts: The usual approach to visualization is synthetic, constructing the function D from simpler functions. The function may be synthesized using rendering pipelines <ref> [5, 11, 12] </ref>, defining different pipelines appropriate for different types of data objects within U.
Reference: [6] <author> Hibbard, W., C. Dyer and B. Paul, </author> <title> 1992; Display of scientific data structures for algorithm visualization. Visualization '92, </title> <address> Boston, </address> <publisher> IEEE, </publisher> <pages> 139-146. </pages>
Reference-contexts: into universal domains must be developed. continuous scalar interpreted in terms of the behavior of functions h' s and g' s . 7 Implementation The data and display models described in Sections 4 and 5, and the scalar mapping functions described in Section 6, are implemented in our VISAD system <ref> [6, 8] </ref>. This system is intended to help scientists experiment with their algorithms and steer their computations. It includes a programming language that allows users to define scalar and complex data types and to express scientific algorithms.
Reference: [7] <author> Hibbard, W. L., and C. R. Dyer, </author> <title> 1994; A lattice theory of data display. </title> <type> Tech. Rep. # 1226, </type> <institution> Computer Sciences Department, University of Wisconsin-Madison. </institution> <note> Also available as compressed postscript files by anonymous ftp from iris.ssec.wisc.edu (144.92.108.63) in the pub/lattice directory. </note>
Reference-contexts: Figure 2 illustrates the order relation on a discrete scalar type. Definition. A function D: U fi V is a display function if it satisfies Conditions 1 and 2'. In <ref> [7] </ref> we prove the following result about display functions: ^ Proposition 1. <p> That is, a set A X belongs to the lattice U if a &lt; b is not true for any pair a, b A. The members of U are ordered by (1), as illustrated in Fig. 6, and form a complete lattice (see <ref> [7] </ref> for more details). [time] of temperature;). A data object of this type consists of a set of pairs of (time, temp). This array data object can be embedded in U as a set of tuples of the form (time, temp, ^ ). Figure 8 illustrates this embedding. <p> Figure 8 illustrates this embedding. The basic ideas presented in Figs. 7 and 8 can be combined to embed complex data types, defined as hierarchies of tuples and arrays, in data lattices (see <ref> [7] </ref> for details). (the empty set) -(^, ^, ^)- -(A, ^, ^), (^, B, ^)- f 5 A scientific display model For our scientific display model, we start with Bertin's analysis of static 2-D displays [1]. <p> Similarly, given a display scalar type d DS, define V d V as the set of embeddings of objects of type d in V. In <ref> [7] </ref> we prove the following result: In [7] we present a precise definition (the details are complex) of scalar mapping functions and show that D: U fi V is a display function if and only if it is a scalar mapping function. <p> Similarly, given a display scalar type d DS, define V d V as the set of embeddings of objects of type d in V. In <ref> [7] </ref> we prove the following result: In [7] we present a precise definition (the details are complex) of scalar mapping functions and show that D: U fi V is a display function if and only if it is a scalar mapping function. Here we will just describe the behavior of display functions on continuous scalars. <p> Although the complete lattices U and V include members containing infinite numbers of tuples (these are mathematical objects and ideal displays) in <ref> [7] </ref> we prove the following: (c) If s s' then MAP D (s) MAP D (s') = f . This tells us that display functions map scalars, which represent primitive variables like time and temperature, to display scalars, which represent graphical primitives like screen axes and color components.
Reference: [8] <author> Hibbard, W. L., B. E. Paul, D. A. Santek, C. R. Dyer, A. L. Battaiola, and M-F. Voidrot-Martinez, </author> <title> 1994; Interactive visualization of Earth and space science computations. </title> <note> IEEE Computer special July issue on visualization. </note>
Reference-contexts: into universal domains must be developed. continuous scalar interpreted in terms of the behavior of functions h' s and g' s . 7 Implementation The data and display models described in Sections 4 and 5, and the scalar mapping functions described in Section 6, are implemented in our VISAD system <ref> [6, 8] </ref>. This system is intended to help scientists experiment with their algorithms and steer their computations. It includes a programming language that allows users to define scalar and complex data types and to express scientific algorithms.
Reference: [9] <author> Hultquist, J. P. M., and E. L. Raible, </author> <year> 1992; </year> <month> SuperGlue: </month> <title> A programming environment for scientific visualization. </title> <booktitle> Proc. Visualization '92, </booktitle> <pages> 243-250. </pages>
Reference-contexts: The usual approach to visualization is synthetic, constructing the function D from simpler functions. The function may be synthesized using rendering pipelines [5, 11, 12], defining different pipelines appropriate for different types of data objects within U. Object oriented programming may be used to synthesize a polymorphic function D <ref> [9, 15] </ref> that applies to multiple data types within U. developed an elegant lattice theory for the meanings of programs [16]. objects and real displays are restricted to countable subsets of U and V.
Reference: [10] <author> Mackinlay, J., </author> <title> 1986; Automating the design of graphical presentations of relational information; ACM Transactions on Graphics, </title> <booktitle> 5(2), </booktitle> <pages> 110-141. </pages>
Reference-contexts: In order to define these conditions we draw on the work of Mackinlay <ref> [10] </ref>. He studied the problem of automatically generating displays of relational information and defined expressiveness conditions on the mapping from relational data to displays.
References-found: 10

