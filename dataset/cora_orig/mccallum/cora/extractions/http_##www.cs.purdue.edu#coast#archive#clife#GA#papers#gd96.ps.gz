URL: http://www.cs.purdue.edu/coast/archive/clife/GA/papers/gd96.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/clife/GA/papers/
Root-URL: http://www.cs.purdue.edu
Title: Combination and Integration of Declarative Approaches (Full Paper and System Demonstration)  
Author: Arne Frick Can Keskin Volker Vogelmann 
Date: June 3, 1996  
Abstract: This paper explores techniques to improve the quality of drawings produced by spring embedder algorithms for undirected graphs. Although producing quite acceptable results in general, the spring embedder model only optimizes global aesthetics criteria. The main idea is to combine global and local criteria to produce better results. First, we consider a two-stage approach that uses a spring embedder algorithm to initially produce a reasonable drawing, which may be subsequently improved by interactively specifying and solving graphical constraints. Experiments conducted with this approach shows that both phases may interfere with each other when executed sequentially. An obvious solution to overcome this difficulty is to integrate both phases. This is similar to the proposed integration of declarative and algorithmic approaches in [17]. Here, we use the genetic algorithm paradigm for this purpose. Unlike the similar technique of simulated annealing, our approach is reasonable fast. To our knowledge, this is the first declarative approach based on the genetic algorithm paradigm that aims at arbitrary undirected graphs. The methods described in this paper have been implemented and explored using a flexible, extensible object-oriented software architecture.
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Franz Brandenburg, editor. </editor> <booktitle> Proceedings of Graph Drawing'95, volume 1027 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Also, every edge e = (u; v) 2 E with u; v 2 V is mapped onto a parameterized continuous curve e (t) : t 7! R n ; n 2 f2; 3g; t 2 <ref> [0; 1] </ref> with e (0) = (u); e (1) = (v). The mapping function = S e2E e defines a routing of E.
Reference: [2] <author> Ingo Bru and Arne Frick. </author> <title> Fast interactive 3-D graph visualization. </title> <booktitle> In Brandenburg [1], </booktitle> <pages> pages 99110. </pages>
Reference-contexts: The goal is to compute a layout that satisfies both global aesthetics criteria and local, user-specified constraints. The main idea in this section is to use a two-stage approach to compute 3-D embeddings of undirected graphs. In the first stage, fast spring embedder algorithm as described in <ref> [2] </ref> is used to produce a globally pleasing drawing, which is then fine-tuned in the second phase by solving local constraints on the resulting drawing. The remainder of this section focuses on the second phase and show how to solve a user-specified set of constraints. <p> From the list of criteria given in Sect. 2, we select the following subset suitable for creating expressive 3D layouts, as been shown for the spring embedder paradigm elsewhere <ref> [2] </ref>. 1. The nodes should be even distributed. 2. Edges should have even lengths. 3. The distance between non-adjacent nodes should be bigger than a constant value.
Reference: [3] <author> R. Davidson and David Harel. </author> <title> Drawing graphs nicely using simulated annealing. </title> <type> Technical Report CS89-13, </type> <institution> Department of Applied Mathematics and Computer Science, The Weiz-mann Institute of Science, Rehovot, Israel, </institution> <year> 1989. </year> <note> revised July 1993, to appear in Communications of the ACM. </note>
Reference-contexts: To accept the GEM output, l magic is now defined as the average length of edges created by GEM. The second component is the sum over all pairs of nodes of a function that is inverse-proportional to the distance between nodes (cf. <ref> [3] </ref>). This procedure has the following advantages: * The user has an initial structured graph layout in short time for contributing local constraints. * It is expected that local constraints now are easier to handle for the GA.
Reference: [4] <author> G. D uck and T. Scheuer. </author> <title> Threshold accepting: A general purpose optimization appearing superior to simulated annealing. </title> <journal> Journal of Computational Physics, </journal> <volume> 90:161175, </volume> <year> 1990. </year>
Reference-contexts: Hybridization can be carried out in various ways. The idea of seeding a population with the results of applying a problem-specific heuristic can be viewed as a minimal-level hybridization. Local neighborhood search and extensions such as simulated annealing or threshold accepting (TA) <ref> [4] </ref> can be formulated as a GA in order to enhance performance. The schematic form of the TA method is as follows: One approach is to use a GA to find regions of the solution space which are good candidates for locating the optimum [24].
Reference: [5] <author> P. Eades. </author> <title> A heuristic for graph drawing. </title> <journal> Congressus Numerantium, </journal> <volume> 42:149160, </volume> <year> 1984. </year>
Reference-contexts: A common solution to overcome this difficulty and find solutions that simultaneously satisfy these criteria to some reasonable extent is to use heuristics. A well-known and frequently used technique for drawing arbitrary undirected graphs is the spring embedder paradigm due to EADES <ref> [5] </ref>. It has been observed that although the paradigm declaratively seeks to satisfy the first three criteria, the solutions often satisfy one or both of the remaining two as well. <p> As the spring embedder approach is well-known by now, we shall not go into more detail, but refer the interested reader to the original paper of Eades <ref> [5] </ref> and its subsequent improvements [13, 7]. In our work, we have found the GEM algorithm [6] with additional speedup heuristics very helpful to create online interactive drawings in the GOLDSPEC environment (cf. Appendix).
Reference: [6] <author> Arne K. Frick, Andreas Ludwig, and Heiko Mehldau. </author> <title> A fast adaptive layout algorithm for undirected graphs. </title> <booktitle> In Tamassia and Tollis [26], </booktitle> <pages> pages 388403. </pages>
Reference-contexts: As the spring embedder approach is well-known by now, we shall not go into more detail, but refer the interested reader to the original paper of Eades [5] and its subsequent improvements [13, 7]. In our work, we have found the GEM algorithm <ref> [6] </ref> with additional speedup heuristics very helpful to create online interactive drawings in the GOLDSPEC environment (cf. Appendix). Two other declarative approaches will be outlined in the following subsections, constraint satisfaction and genetic algorithms (GA). A third paradigm, simulated annealing (SA), will not be considered in detail for several reasons. <p> The authors of [14] formulated constraints as additional spring-forces of a spring embedder algorithm. However, they only add angle forces to the usual vertex-repulsion forces and the oscillation heuristic of <ref> [6] </ref>. The integration of algorithmic and declarative approaches was first proposed by [17]. They introduced so-called customizable methods using declarative mechanisms to specify further restrictions on the output of an algorithmic method. Our method is customizable in this sense and can be easily enhanced by algorithmic approaches.
Reference: [7] <author> T. M. J. Fruchterman and E. M. Reingold. </author> <title> Graph drawing by force-directed placement. </title> <journal> Software Practic and Experience, </journal> <volume> 21, </volume> <year> 1991. </year>
Reference-contexts: As the spring embedder approach is well-known by now, we shall not go into more detail, but refer the interested reader to the original paper of Eades [5] and its subsequent improvements <ref> [13, 7] </ref>. In our work, we have found the GEM algorithm [6] with additional speedup heuristics very helpful to create online interactive drawings in the GOLDSPEC environment (cf. Appendix). Two other declarative approaches will be outlined in the following subsections, constraint satisfaction and genetic algorithms (GA).
Reference: [8] <author> H.W. Gellersen, C. Zeidler, W. Gerteis, B. Achauer, V. Vogelmann, and M. Staudenmaier. </author> <title> Objekte in verteilten systemen. </title> <type> Technical report, </type> <institution> University of Karlsruhe, </institution> <year> 1993. </year>
Reference-contexts: GA's are known to be slow in practice, which is not really a surprise, since they are used to solve hard optimization problems. Naturally, many modifications and heuristics to improve their performance have been proposed. An obvious approach is to use parallelism <ref> [8, 15] </ref>, since the paradigm is parallel by nature. The runtime behavior of the algorithm is influenced by its parameters.
Reference: [9] <author> Allan Heydon and Greg Nelson. </author> <title> The juno-2 constraint-based drawing editor. </title> <type> DEC SRC Technical Report 131a, </type> <institution> Digital Systems Research Center, Digital Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, California 94301, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The resulting equations may become quite large and may not even be linear. The approach was extensively studied in <ref> [9] </ref>. 2.2 Genetic Algorithms In this section, we briefly introduce how genetic algorithms work, and show how they can be applied to graphic layout problems. 2.2.1 Overview Genetic Algorithms (GA) [10] belong to a optimization techniques known as evolution strategies imitating the principles of natural evolution for parameter optimization problems [25].
Reference: [10] <author> J. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> University of Michigan Press, </publisher> <year> 1975. </year>
Reference-contexts: The resulting equations may become quite large and may not even be linear. The approach was extensively studied in [9]. 2.2 Genetic Algorithms In this section, we briefly introduce how genetic algorithms work, and show how they can be applied to graphic layout problems. 2.2.1 Overview Genetic Algorithms (GA) <ref> [10] </ref> belong to a optimization techniques known as evolution strategies imitating the principles of natural evolution for parameter optimization problems [25].
Reference: [11] <author> E. Hyv onen. </author> <title> Constraint reasoning based on interval arithmetic: the tolerance propagation approach. </title> <journal> Artificial Intelligence, </journal> <volume> 58:71112, </volume> <year> 1992. </year>
Reference-contexts: The runtime behavior of the algorithm is influenced by its parameters. The fitness function itself plays a crucial role in the calculation and does not only 1 The case of inequations can be reduced to this case and the application of interval arithmetic <ref> [11, 12] </ref>. 4 influence the quality of the results, but also the overall performance of the algorithm to a great extent.
Reference: [12] <author> F. </author> <title> Benhamou J.Older. Applying interval arithmetic to real integer and boolean constraints. </title> <journal> Logic Programming: The Alp Newsletter, </journal> <volume> 6(2), </volume> <year> 1993. </year>
Reference-contexts: The runtime behavior of the algorithm is influenced by its parameters. The fitness function itself plays a crucial role in the calculation and does not only 1 The case of inequations can be reduced to this case and the application of interval arithmetic <ref> [11, 12] </ref>. 4 influence the quality of the results, but also the overall performance of the algorithm to a great extent.
Reference: [13] <author> T. Kamada and S. Kawai. </author> <title> An algorithm for drawing general undirected graphs. </title> <journal> Information Processing Letters, </journal> <volume> 31, </volume> <year> 1989. </year>
Reference-contexts: As the spring embedder approach is well-known by now, we shall not go into more detail, but refer the interested reader to the original paper of Eades [5] and its subsequent improvements <ref> [13, 7] </ref>. In our work, we have found the GEM algorithm [6] with additional speedup heuristics very helpful to create online interactive drawings in the GOLDSPEC environment (cf. Appendix). Two other declarative approaches will be outlined in the following subsections, constraint satisfaction and genetic algorithms (GA).
Reference: [14] <author> Thomas Kamps and Jorg Kleinz. </author> <title> Constraint-based spring model algorithm for graph layout. </title> <booktitle> In Brandenburg [1], </booktitle> <pages> pages 349360. </pages>
Reference-contexts: The authors of <ref> [14] </ref> formulated constraints as additional spring-forces of a spring embedder algorithm. However, they only add angle forces to the usual vertex-repulsion forces and the oscillation heuristic of [6]. The integration of algorithmic and declarative approaches was first proposed by [17].
Reference: [15] <author> C. Kosak and J. Marks. </author> <title> A parallel genetic algorithm for network-diagram layout. </title> <booktitle> In Proc. 4th Int. Conf. on Genetic Algorithms (ICGA91), </booktitle> <year> 1991. </year>
Reference-contexts: GA's are known to be slow in practice, which is not really a surprise, since they are used to solve hard optimization problems. Naturally, many modifications and heuristics to improve their performance have been proposed. An obvious approach is to use parallelism <ref> [8, 15] </ref>, since the paradigm is parallel by nature. The runtime behavior of the algorithm is influenced by its parameters. <p> Previous research in this area includes <ref> [15, 18, 19] </ref> and [21]. [15] presents a parallel GA for network-diagram layout, where perceptual organization is preferred over aesthetic layout. For a directed graphs with 12 nodes, it took about 2 minutes to create a 2-D layout on 4096-processor machine. <p> Previous research in this area includes [15, 18, 19] and [21]. <ref> [15] </ref> presents a parallel GA for network-diagram layout, where perceptual organization is preferred over aesthetic layout. For a directed graphs with 12 nodes, it took about 2 minutes to create a 2-D layout on 4096-processor machine. In [18], a GA is used for interactive two dimensional directed graph layout. <p> Edges should enclose a specified angle. 2. Nodes should lie in a plane. 3. Nodes should lie on a line. 4. Desired edge length. 5. Even length of a set of edges. 4.2 Implementation of the GA Several improvements are proposed for enhancing the effectiveness of a GA <ref> [15] </ref>. The following strategies are investigated for improving the performance: * Refinement of the parameters. 11 * The use of a gradient-descent method to achieve convergence to locally optimal points in the search space. * The initial seeding of the population.
Reference: [16] <author> Wm Leler. </author> <title> Constraint Progamming Languages Their Specification and Generation. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1988. </year> <month> 16 </month>
Reference-contexts: Fig. 1). For instance, a constraint 2 AlignX (v,w) on two vertices v and w requires that the coordinates of two vertices v and w should have the same x positions. A simple constraint-satisfaction technique is the local propagation of known states <ref> [16] </ref>, or shorter local propagation. This mechanism is best illustrated using so-called constraint graphs (cf. Fig. 2). The square nodes represent variables, and the round nodes represent operators. The arguments to an operator are attached on its left side, and the result is attached on its right side. <p> These new values then propagate along the arcs, causing new nodes to fire, and so on (cf. Another constraint-satisfaction technique is relaxation <ref> [16] </ref>, an iterative numerical approximation technique. Relaxation makes an initial guess at the values of unknown objects, and then estimates the error that would be caused by assigning these values to the objects.
Reference: [17] <author> T. Lin and P. Eades. </author> <title> Integration of declarative and algorithmic approaches for layout creation. </title> <booktitle> In Tamassia and Tollis [26], </booktitle> <pages> pages 376387. </pages>
Reference-contexts: The authors of [14] formulated constraints as additional spring-forces of a spring embedder algorithm. However, they only add angle forces to the usual vertex-repulsion forces and the oscillation heuristic of [6]. The integration of algorithmic and declarative approaches was first proposed by <ref> [17] </ref>. They introduced so-called customizable methods using declarative mechanisms to specify further restrictions on the output of an algorithmic method. Our method is customizable in this sense and can be easily enhanced by algorithmic approaches. The authors of [17] noted two limitations on their approach. <p> The integration of algorithmic and declarative approaches was first proposed by <ref> [17] </ref>. They introduced so-called customizable methods using declarative mechanisms to specify further restrictions on the output of an algorithmic method. Our method is customizable in this sense and can be easily enhanced by algorithmic approaches. The authors of [17] noted two limitations on their approach. First, they found it to be difficult to specify constraints based on textual descriptions. Second, they remark that each customizable method can only satisfy a limited number of requirements. Our approach overcomes both limitations.
Reference: [18] <author> T. Masui. </author> <title> Graphic object layout with interactive genetic algorithms. </title> <booktitle> In Proceedings of the 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 7487, </pages> <address> Seattle, Washington, </address> <year> 1992. </year>
Reference-contexts: Previous research in this area includes <ref> [15, 18, 19] </ref> and [21]. [15] presents a parallel GA for network-diagram layout, where perceptual organization is preferred over aesthetic layout. For a directed graphs with 12 nodes, it took about 2 minutes to create a 2-D layout on 4096-processor machine. <p> Previous research in this area includes [15, 18, 19] and [21]. [15] presents a parallel GA for network-diagram layout, where perceptual organization is preferred over aesthetic layout. For a directed graphs with 12 nodes, it took about 2 minutes to create a 2-D layout on 4096-processor machine. In <ref> [18] </ref>, a GA is used for interactive two dimensional directed graph layout. The user can modify constraints like two specified nodes should have the same x coordinate. They reveal their parameter choices on population, crossover rate and mutation rate, but do not comment on computation time.
Reference: [19] <author> Z. Michalewicz. </author> <title> Genetic algorithms + data structures = evolution programs. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Previous research in this area includes <ref> [15, 18, 19] </ref> and [21]. [15] presents a parallel GA for network-diagram layout, where perceptual organization is preferred over aesthetic layout. For a directed graphs with 12 nodes, it took about 2 minutes to create a 2-D layout on 4096-processor machine.
Reference: [20] <author> Z. Michalewicz and C. Janikow. </author> <title> Handling constraints in genetic algorithms. </title> <editor> In R. Belew and L. Booker, editors, </editor> <booktitle> Genetic Algorithms, </booktitle> <pages> pages 151157, </pages> <year> 1991. </year>
Reference-contexts: We shall come back to the topic of performance improvement below. 2.2.2 Handling Constraints in Genetic Algorithms Three different approaches to the constraint-solving problem in GAs have been proposed in <ref> [20] </ref>. One way of dealing with candidate solutions violating the constraints is to generate potential solutions without considering the constraints and then penalizing them by decreasing the fitness of the fitness function.
Reference: [21] <author> Erkki Makinen and Mika Sieranta. </author> <title> Genetic algorithms for drawing bipartite graphs. </title> <type> Report A-1994-1, </type> <institution> University of Tampere, </institution> <year> 1994. </year>
Reference-contexts: Previous research in this area includes [15, 18, 19] and <ref> [21] </ref>. [15] presents a parallel GA for network-diagram layout, where perceptual organization is preferred over aesthetic layout. For a directed graphs with 12 nodes, it took about 2 minutes to create a 2-D layout on 4096-processor machine. In [18], a GA is used for interactive two dimensional directed graph layout.
Reference: [22] <author> John Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Publishing, Inc., </publisher> <year> 1994. </year>
Reference: [23] <author> Phillips, Levy, and Munzner. Geomview: </author> <title> An interactive geometry viewer. </title> <journal> Notices of the American Mathematical Society, </journal> <volume> 40, </volume> <year> 1993. </year>
Reference: [24] <author> C.R. Reeves. </author> <title> Modern Heuristic Techniques for Combinatorial Problems. </title> <publisher> McGraw-Hill, </publisher> <year> 1995. </year>
Reference-contexts: The schematic form of the TA method is as follows: One approach is to use a GA to find regions of the solution space which are good candidates for locating the optimum <ref> [24] </ref>.
Reference: [25] <editor> H.P. Schwefel. </editor> <title> Evolution strategies. </title> <journal> In Annals of Operations Research, </journal> <volume> volume 1, </volume> <pages> pages 165167, </pages> <year> 1984. </year>
Reference-contexts: [9]. 2.2 Genetic Algorithms In this section, we briefly introduce how genetic algorithms work, and show how they can be applied to graphic layout problems. 2.2.1 Overview Genetic Algorithms (GA) [10] belong to a optimization techniques known as evolution strategies imitating the principles of natural evolution for parameter optimization problems <ref> [25] </ref>. Evolution strategies maintain a population of potential solutions and base the selection of candidate solutions on a from the population have some selection process based on the fitness of individuals, and some recombination operators. In the GA paradigm (cf.
Reference: [26] <author> Roberto Tamassia and Ioannis Tollis, </author> <title> editors. </title> <booktitle> Proceedings of Graph Drawing'94, volume 894 of Lecture Notes in Computer Science. DIMACS Workshop on Graph Drawing, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
References-found: 26

