URL: http://www.cs.jhu.edu/~shavitt/pub/LogTimeFlow.ps
Refering-URL: http://www.cs.jhu.edu/~shavitt/pub.html
Root-URL: http://www.cs.jhu.edu
Email: fbaruch, shavittg@cs.jhu.edu  
Title: Converging to Approximated Max-Min Flow Fairness in Logarithmic Time  
Author: Baruch Awerbuch Yuval Shavitt 
Note: Corresponding author  
Date: June 26, 1997  
Address: Baltimore, MD 21218  
Affiliation: Department of Computer Science Johns Hopkins University  
Abstract: Max-min is a frequently praised criterion for flow control although its limitations. In practice, the fast rate of changes in the connection lay-out in modern networks makes it hard for any flow control algorithm to converge to an optimal point. It such an environment, it might be better to trade accuracy with speed. We present algorithms that relax the optimality criterion of the max-min flow fairness but achieve a fast convergence time that is logarithmic in the link bandwidth and not a function of the number of active connections (or sessions). The relaxation we use requires rates to be increased or decreased by a certain factor, 1 + ", or in other words, assigned rates can only be a natural power of some basic bandwidth 1 +". Under this criterion, the quiescence time of our flow control algorithms is log 1+" B, where B is the maximum link bandwidth in minimum allocation units. This is a great improvement over the super-linear quiescence time of known algorithms both exact and approximated. keyword: flow control, ABR, max-min fairness
Abstract-found: 1
Intro-found: 1
Reference: [AMO96a] <author> Yehuda Afek, Yishay Mansour, and Zvi Ostfeld. </author> <title> Convergence complexity of otimistic rate based flow control algorithms. </title> <booktitle> In 28th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 89 - 98, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Flow control algorithms [GK80, Jaf81, Kes91] are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control <ref> [BF95, AMO96a, AMO96b, CRL96, FMS97] </ref> and the control of TCP streams [Jac88, BP95]. A common criterion to assign bandwidth called max-min flow fairness [Jaf81]. <p> Under this criterion, the quiescence time of our flow control algorithms is log 1+" B, where B is the maximum link bandwidth in minimum allocation units. This is a great improvement over the super-linear quiescence time of most known algorithms both exact and approximated <ref> [AMO96a, FMS97] </ref>. We show in the appendix that when the number of sessions is sufficiently large (more than " 1 in each link) not more than one change in allocation per session is needed, and thus the quiescence time is constant in a highly loaded network. <p> We assume no other means of communication unless otherwise specified. A change of a session rate is called an update. Unlike <ref> [AMO96a, FMS97] </ref> updates are not required to be atomic, and can be done concurrently for several sessions. We approximate max-min flow allocation by requiring all the components of the max-min vector to be non-negative integer powers of 1+".
Reference: [AMO96b] <author> Yehuda Afek, Yishay Mansour, and Zvi Ostfeld. Phantom: </author> <title> A simple and effective flow control scheme. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 169 - 182, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Flow control algorithms [GK80, Jaf81, Kes91] are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control <ref> [BF95, AMO96a, AMO96b, CRL96, FMS97] </ref> and the control of TCP streams [Jac88, BP95]. A common criterion to assign bandwidth called max-min flow fairness [Jaf81].
Reference: [BF95] <author> Flavio Bonomi and Kerry W. Fendick. </author> <title> The rate-based flow control framework for the available bit rate ATM service. </title> <journal> IEEE Network, </journal> <volume> 9(2):25 - 39, </volume> <month> March/April </month> <year> 1995. </year>
Reference-contexts: Flow control algorithms [GK80, Jaf81, Kes91] are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control <ref> [BF95, AMO96a, AMO96b, CRL96, FMS97] </ref> and the control of TCP streams [Jac88, BP95]. A common criterion to assign bandwidth called max-min flow fairness [Jaf81].
Reference: [BG92] <author> Dimitri Bertsekas and Robert Gallager. </author> <title> Data Networks. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1992. </year>
Reference-contexts: Next we describe how a centralized algorithm for computing accurate max-min fairness can be modified to achieve the approximated allocation. A centralized algorithm to achieve an accurate max-min vector contains the following steps <ref> [BG92, section 6.5.2] </ref>: C.1 Calculate the fare share on all non-saturated links. C.2 Select the most congested link and assign a fare share to the sessions sharing this link.
Reference: [BP95] <author> Lawrence S. Brakmo and Larry Peterson. </author> <title> TCP Vegas: end to end congestion aviodance on a global Internet. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 13(8):1465 - 1480, </volume> <month> October </month> <year> 1995. </year> <month> 25 </month>
Reference-contexts: Flow control algorithms [GK80, Jaf81, Kes91] are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control [BF95, AMO96a, AMO96b, CRL96, FMS97] and the control of TCP streams <ref> [Jac88, BP95] </ref>. A common criterion to assign bandwidth called max-min flow fairness [Jaf81]. The criterion allows a rate increase for a session providing this increase does not cause a decrease in the rate of a session with lower or equal rate.
Reference: [Com96] <institution> The ATM Forum Technical Committee. Traffic management specification version 4.0, </institution> <month> April </month> <year> 1996. </year> <month> af-tm-0056.000. </month>
Reference-contexts: Applying this result to theorem 5.2 implies that the quiescence time is constant in a highly loaded network. 6 Applicability for ATM signaling In this section, we examine the applicability of our algorithms to the current ATM traffic management specification <ref> [Com96] </ref>. We assume that switches do not support explicit rate signaling, as for this case the implementation is trivial. <p> Similar change to M SG should be applied to the code in figure 7. Let us first assume that the MCR parameter is zero for all connections. We show that by using several fields in the RM cell <ref> [Com96, section 5.10] </ref> in a way coherent with the standard, our algorithm can be implemented in a heterogeneous environment where not all switches implement the suggested algorithm. The CCR (Current Cell rate) field is set by the source to indicate the current ACR (Allowed Cell rate). <p> Any mapping should consider the option that some of the switches along the route may not be programmed to use our algorithm and are only capable of setting the NI and CI bits (according to relative rate marking <ref> [Com96, sec. 5.10.6] </ref>). If such a switch on the way is setting the NI bit, the setting must be understood as "the session is blocked", or otherwise the algorithm may livelock by waiting to a synchronization that cannot occur. <p> If MCR is greater than zero, our scheme can be easily used to achieve the "MCR plus equal share" as suggested in <ref> [Com96, sec. I.3] </ref>. 7 Simulation Results We simulated the logarithmic algorithm both for the version that appears in figures 6 and 7, and for the version that appears on page 16.
Reference: [CRL96] <author> Anna Charny, K. K. Ramakrishnan, and Anthony G. Lauck. </author> <title> Scalability issues for distributed explicit rate allocation in ATM networks. </title> <booktitle> In INFOCOM96, </booktitle> <pages> pages 1198 - 1205, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Flow control algorithms [GK80, Jaf81, Kes91] are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control <ref> [BF95, AMO96a, AMO96b, CRL96, FMS97] </ref> and the control of TCP streams [Jac88, BP95]. A common criterion to assign bandwidth called max-min flow fairness [Jaf81]. <p> This is several orders of magnitude less than an algorithm with quiescence time that is linear in the number of connections, that is measured in millions and more. A similar approach was presented by Charny et al. <ref> [CRL96] </ref> for explicit rate schemes in ATM. 1 However, our approach is simpler as the protocol works in a pure asynchronous fashion and the switches synchronize through the protocol messages. To the contrary, fine tuning of calculation cycles should be made to achieve good convergence time in [CRL96]. <p> Charny et al. <ref> [CRL96] </ref> for explicit rate schemes in ATM. 1 However, our approach is simpler as the protocol works in a pure asynchronous fashion and the switches synchronize through the protocol messages. To the contrary, fine tuning of calculation cycles should be made to achieve good convergence time in [CRL96]. The general approach we took make our algorithm implementable in both explicit rate schemes, e.g., ATM explicit rate, and in networks where the only signaling is congestion indication such as control of TCP connections or ATM relative rate marking. <p> Figures 13 and 14 show the simulation results for the network simulated in <ref> [CRL96] </ref>. The link delay is set to 6sec to match the switching and the propagation delay in [CRL96]. <p> Figures 13 and 14 show the simulation results for the network simulated in <ref> [CRL96] </ref>. The link delay is set to 6sec to match the switching and the propagation delay in [CRL96]. Note that the once the allocation level of the sessions with long RTD is set, the rest of the sessions can increase their allocation level at a higher rate since the synchronization is required only among the pending sessions.
Reference: [FMS97] <author> Panagiota Fatourou, Marios Mavronicolas, and Paul Spirakis. </author> <title> Efficiency of oblivious versus non-oblivious schedulers for optimistic rate-based flow control. </title> <booktitle> In PODC, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: Flow control algorithms [GK80, Jaf81, Kes91] are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control <ref> [BF95, AMO96a, AMO96b, CRL96, FMS97] </ref> and the control of TCP streams [Jac88, BP95]. A common criterion to assign bandwidth called max-min flow fairness [Jaf81]. <p> Under this criterion, the quiescence time of our flow control algorithms is log 1+" B, where B is the maximum link bandwidth in minimum allocation units. This is a great improvement over the super-linear quiescence time of most known algorithms both exact and approximated <ref> [AMO96a, FMS97] </ref>. We show in the appendix that when the number of sessions is sufficiently large (more than " 1 in each link) not more than one change in allocation per session is needed, and thus the quiescence time is constant in a highly loaded network. <p> We assume no other means of communication unless otherwise specified. A change of a session rate is called an update. Unlike <ref> [AMO96a, FMS97] </ref> updates are not required to be atomic, and can be done concurrently for several sessions. We approximate max-min flow allocation by requiring all the components of the max-min vector to be non-negative integer powers of 1+".
Reference: [GK80] <author> Mario Gerla and Leonard Kleinrock. </author> <title> Flow control: A comparative survey. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-28(4):553 - 574, </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: However, when many sessions are routed through the same links their bandwidth allocation should be controlled to prevent over utilization of the link which cause buffer overflow and data-packet loss. Flow control algorithms <ref> [GK80, Jaf81, Kes91] </ref> are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control [BF95, AMO96a, AMO96b, CRL96, FMS97] and the control of TCP streams [Jac88, BP95].
Reference: [Jac88] <author> Van Jacobson. </author> <title> Congestion aviodance and control. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 314 - 329, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Flow control algorithms [GK80, Jaf81, Kes91] are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control [BF95, AMO96a, AMO96b, CRL96, FMS97] and the control of TCP streams <ref> [Jac88, BP95] </ref>. A common criterion to assign bandwidth called max-min flow fairness [Jaf81]. The criterion allows a rate increase for a session providing this increase does not cause a decrease in the rate of a session with lower or equal rate. <p> Note that if a session starts a little later than others, it blocks all synchronization of sessions in its cluster until it reaches their level. This is an improvement over TCP where if two sessions start sharing a link with different bandwidth, they may never equalize their bandwidth allocation <ref> [Jac88] </ref>. However, if a session starts too late some sessions may receive an inappropriate allocation before the late session had a chance to stop the over-allocation. To identify this situation a warning field can be added to the periodic message.
Reference: [Jaf81] <author> Jeffrey M. Jaffe. </author> <title> Bottleneck flow control. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-29(7):954 - 962, </volume> <month> July </month> <year> 1981. </year>
Reference-contexts: However, when many sessions are routed through the same links their bandwidth allocation should be controlled to prevent over utilization of the link which cause buffer overflow and data-packet loss. Flow control algorithms <ref> [GK80, Jaf81, Kes91] </ref> are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control [BF95, AMO96a, AMO96b, CRL96, FMS97] and the control of TCP streams [Jac88, BP95]. <p> Two main technologies where flow control is in great need are ATM ABR traffic flow control [BF95, AMO96a, AMO96b, CRL96, FMS97] and the control of TCP streams [Jac88, BP95]. A common criterion to assign bandwidth called max-min flow fairness <ref> [Jaf81] </ref>. The criterion allows a rate increase for a session providing this increase does not cause a decrease in the rate of a session with lower or equal rate.
Reference: [Kes91] <author> Srinivasan Keshav. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 3 - 16, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: However, when many sessions are routed through the same links their bandwidth allocation should be controlled to prevent over utilization of the link which cause buffer overflow and data-packet loss. Flow control algorithms <ref> [GK80, Jaf81, Kes91] </ref> are designed to prevent congestion from occurring by assigning bandwidth to sessions on a timely basis. Two main technologies where flow control is in great need are ATM ABR traffic flow control [BF95, AMO96a, AMO96b, CRL96, FMS97] and the control of TCP streams [Jac88, BP95].
References-found: 12

