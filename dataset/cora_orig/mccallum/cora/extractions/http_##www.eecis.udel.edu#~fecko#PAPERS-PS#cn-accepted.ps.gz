URL: http://www.eecis.udel.edu/~fecko/PAPERS-PS/cn-accepted.ps.gz
Refering-URL: http://www.eecis.udel.edu/~fecko/mf-research.html
Root-URL: http://www.eecis.udel.edu
Title: Testing Protocols Modeled as FSMs with Timing Parameters  
Author: M. Umit Uyar Mariusz A. Fecko, Adarshpal S. Sethi, Paul D. Amer 
Keyword: conformance testing, test case generation, timing constraints, rural Chinese postman problem, protocol specification and testing.  
Date: 1999)  
Note: Networks, accepted,  
Address: New York, New York, NY  
Affiliation: Department of Electrical Engineering City College of the City University of  Computer and Information Science Department University of Delaware, Newark, DE (Computer  
Abstract: An optimization method is introduced for generating minimum-length test sequences taking into account timing constraints for FSM models of communication protocols. Due to active timers in many of today's protocols, the number of consecutive self-loops that can be traversed in a given state before a timeout occurs is limited. A test sequence that does not consider timing constraints will likely be unrealizable in a test laboratory, thereby potentially resulting in the incorrect failing of valid implementations (or, vice versa). The solution uses a series of augmentations for a protocol's directed graph representation. The resulting test sequence is proven to be of minimum-length while not exceeding the tolerable limit of consecutive self-loops at each state. Although UIO sequences are used for state verification method, the results also are applicable to test generation that uses distinguishing or characterizing sequences. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Ural, </author> <title> "Formal methods for test sequence generation," </title> <journal> Computer Communications, </journal> <volume> vol. 15, </volume> <pages> pp. 311-325, </pages> <month> Jun </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Due to interoperability requirements of heterogeneous devices in a complex communications network, each component of such a network must be tested for conformance against its specification. Automated generation of conformance tests based on the formal descriptions of communication protocols has been an active research area <ref> [1] </ref> - [16]. These techniques, using a deterministic finite-state machine (FSM) model of a protocol specification, focus on the optimization of the test sequence length. <p> by an IUT, which typically defines the edges representing them as self-loops with a null or warning output. 2 BOTH- TIMERS-OFF BOTH TIMERS-ON TOP-UPDATE TIMER-ON TOP-UPDATE REQ-TIMER INACTIVE T [ 7,8,12,13,15,20, ON 30,32,34,35] 25,30,32,35] 15,17,19,20,28,29, T [ 2-6,7,8,25,26,32,35] T [ 9,11,16,18,22,27,29,33] T [23] T [24] T [29] T [31] T <ref> [1] </ref> T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services [22], MIL-STD 188-220B [23] for Combat Net Radio
Reference: [2] <author> E. Brinksma, </author> <title> "A theory for the derivation of tests," in Proc. IFIP Protocol Specification, Testing, and Verification (PSTV), </title> <address> Amsterdam:North-Holland, </address> <year> 1988. </year>
Reference: [3] <author> J. Tretmans, </author> <title> "Conformance testing with labelled transitions systems: Implementation relations and test generation," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 29, no. 1, </volume> <pages> pp. 49-79, </pages> <year> 1996. </year>
Reference-contexts: Other examples of timers in Q.931 are: timer T304 running in state Overlap Sending , and timer T310 in state Outgoing Call Proceeding . 3 Preliminaries and practical restrictions on test sequences A protocol can be specified as a deterministic FSM <ref> [3, 10, 20] </ref>, which can be represented by a directed graph G = (V; E). The set V = fv 1 ; : : : ; v n g of vertices correspond to the set of states S of the FSM.
Reference: [4] <author> R. E. Miller and S. Paul, </author> <title> "On the generation of minimal-length conformance tests for communication protocols," </title> <journal> IEEE/ACM Trans. on Networking, </journal> <volume> vol. 2, </volume> <pages> pp. 116-129, </pages> <month> Feb </month> <year> 1993. </year>
Reference-contexts: By taking advantage of repeated edge subsequences in a test sequence, heuristics to overlap the subsequences and further shorten the final test sequence are proposed by Chen et al. [14, 15], Yang and Ural [9], and Miller and Paul <ref> [4, 5] </ref>. All of these methods emphasize optimizing the test sequence length and its cost, without considering 5 any restrictions on the order in which the tests can be applied to an IUT. One important restriction is due to timers that may be active in a given state.
Reference: [5] <author> R. E. Miller and S. Paul, </author> <title> "Structural analysis of protocol specifications and generation of maximal fault coverage conformance test sequences," </title> <journal> IEEE/ACM Trans. on Networking, </journal> <volume> vol. 2, </volume> <pages> pp. 457-470, </pages> <month> Oct </month> <year> 1994. </year> <month> 25 </month>
Reference-contexts: By taking advantage of repeated edge subsequences in a test sequence, heuristics to overlap the subsequences and further shorten the final test sequence are proposed by Chen et al. [14, 15], Yang and Ural [9], and Miller and Paul <ref> [4, 5] </ref>. All of these methods emphasize optimizing the test sequence length and its cost, without considering 5 any restrictions on the order in which the tests can be applied to an IUT. One important restriction is due to timers that may be active in a given state.
Reference: [6] <author> G. Luo, G. von Bochmann, and A. Petrenko, </author> <title> "Test selection based on communicating nondeterministic finite state machines using a generalized Wp-method," </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. 20, no. 2, </volume> <pages> pp. 149-162, </pages> <year> 1994. </year>
Reference-contexts: In the final test sequence generated, the number of consecutive self-loops never exceeds any state's specified limit. UIO sequences [18] are used for state verification throughout the paper. However, the results presented also applicable to test generation that uses the distinguishing or characterizing sequences <ref> [6, 19, 20] </ref> as discussed in Section 6.1. Earlier results of this study, limited to verification sequences that are self-loops, are presented in [21]. This paper generalizes these earlier results to both self-loop and non-self-loop verification sequences. <p> In addition to the original self-loops of a specification model, extra self-loops are typically created when the test sequences use state verification techniques such as unique input/output (UIO) sequences [18], distinguishing sequences [19, 20], or characterizing sequences <ref> [6, 19, 20] </ref>. Example 1: Timing constraints in MIL-STD 188-220B The University of Delaware's Protocol Engineering Laboratory is developing test scripts to be used by the U.S. Army CECOM MIL-STD 188-220B Conformance Tester. Tests are being generated for both the Data Link and Intranet Layers. <p> UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs [29, 30]. Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences [19, 20] and characterizing (or W) sequences <ref> [6, 19, 20] </ref> for the results presented here. Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences [16]. Shen et al. [10], Ural and Lu [13] presented optimization methods using multiple UIO sequences for a given state. <p> In addition to the UIO sequences [18], the most well-known ones include the distinguishing sequences [19, 20], and the characterizing (or W) sequences <ref> [6, 19, 20] </ref>. The results presented in this paper are based on using the UIO sequences as the state verification technique. However, these results are also applicable to distinguishing and characterizing sequences.
Reference: [7] <author> B. Sarikaya, G. von Bochmann, and E. Cerny, </author> <title> "A test design methodology for protocol testing," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 13, </volume> <pages> pp. 518-531, </pages> <month> May </month> <year> 1987. </year>
Reference: [8] <author> R. J. Linn, </author> <title> "Conformance testing for OSI protocols," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 18, no. 3, </volume> <pages> pp. 203-219, </pages> <year> 1990. </year>
Reference-contexts: Clearly, this is not the goal of testing. Therefore, a properly generated test sequence must consider a protocol's timer constraints. In general, the majority of tests defined for an IUT are classified into two categories: valid and inopportune tests <ref> [8, 24] </ref>. Valid tests correspond to the "normal" or expected behavior of a protocol entity. Inopportune tests have inputs that are semantically and syntactically correct, but arrive at unexpected states (or, out of sequence).
Reference: [9] <author> B. Yang and H. Ural, </author> <title> "Protocol conformance test generation using multiple UIO sequences with overlapping," </title> <booktitle> in Proc. ACM SIGCOMM, </booktitle> <pages> pp. 118-125, </pages> <year> 1990. </year>
Reference-contexts: By taking advantage of repeated edge subsequences in a test sequence, heuristics to overlap the subsequences and further shorten the final test sequence are proposed by Chen et al. [14, 15], Yang and Ural <ref> [9] </ref>, and Miller and Paul [4, 5]. All of these methods emphasize optimizing the test sequence length and its cost, without considering 5 any restrictions on the order in which the tests can be applied to an IUT.
Reference: [10] <author> Y. N. Shen, F. Lombardi, and A. T. Dahbura, </author> <title> "Protocol conformance testing using multiple UIO sequences," </title> <journal> IEEE Trans. on Communications, </journal> <volume> vol. 40, </volume> <pages> pp. 1282-1287, </pages> <month> Aug </month> <year> 1992. </year>
Reference-contexts: Other examples of timers in Q.931 are: timer T304 running in state Overlap Sending , and timer T310 in state Outgoing Call Proceeding . 3 Preliminaries and practical restrictions on test sequences A protocol can be specified as a deterministic FSM <ref> [3, 10, 20] </ref>, which can be represented by a directed graph G = (V; E). The set V = fv 1 ; : : : ; v n g of vertices correspond to the set of states S of the FSM. <p> Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences [16]. Shen et al. <ref> [10] </ref>, Ural and Lu [13] presented optimization methods using multiple UIO sequences for a given state.
Reference: [11] <author> R. J. Linn and M. U. Uyar, </author> <title> Conformance Testing Methodologies and Architectures for OSI Protocols. </title> <publisher> Los Alamitos, </publisher> <address> CA: </address> <publisher> IEEE Comp. Soc. Press, </publisher> <year> 1994. </year>
Reference: [12] <author> W. Y. Chan and S. T. Vuong, </author> <title> "An improved protocol test generation procedure based on UIOs," </title> <booktitle> in Proc. ACM SIGCOMM, </booktitle> <month> Sep </month> <year> 1989. </year>
Reference: [13] <author> H. Ural and Y. Lu, </author> <title> "An improved method for test sequence generation," </title> <type> Tech. Rep. TR-90-12, </type> <institution> Dept. of CSI, University of Ottawa, </institution> <month> Mar </month> <year> 1990. </year>
Reference-contexts: Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences [16]. Shen et al. [10], Ural and Lu <ref> [13] </ref> presented optimization methods using multiple UIO sequences for a given state.
Reference: [14] <author> M. S. Chen, Y. Choi, and A. Kershenbaum, </author> <title> "Minimal length test sequences for protocol conformance," </title> <booktitle> in Proc. First Network Management and Control Workshop, </booktitle> <address> (New York, NY), </address> <year> 1989. </year>
Reference-contexts: Shen et al. [10], Ural and Lu [13] presented optimization methods using multiple UIO sequences for a given state. By taking advantage of repeated edge subsequences in a test sequence, heuristics to overlap the subsequences and further shorten the final test sequence are proposed by Chen et al. <ref> [14, 15] </ref>, Yang and Ural [9], and Miller and Paul [4, 5]. All of these methods emphasize optimizing the test sequence length and its cost, without considering 5 any restrictions on the order in which the tests can be applied to an IUT.
Reference: [15] <author> M. S. Chen, Y. Choi, and A. Kershenbaum, </author> <title> "Approaches utilizing segment overlap to minimize test sequences," </title> <booktitle> in Proc. IFIP Protocol Specification, Testing, and Verification (PSTV), </booktitle> <pages> pp. 85-98, </pages> <year> 1990. </year>
Reference-contexts: Shen et al. [10], Ural and Lu [13] presented optimization methods using multiple UIO sequences for a given state. By taking advantage of repeated edge subsequences in a test sequence, heuristics to overlap the subsequences and further shorten the final test sequence are proposed by Chen et al. <ref> [14, 15] </ref>, Yang and Ural [9], and Miller and Paul [4, 5]. All of these methods emphasize optimizing the test sequence length and its cost, without considering 5 any restrictions on the order in which the tests can be applied to an IUT.
Reference: [16] <author> A. V. Aho, A. T. Dahbura, D. Lee, and M. U. Uyar, </author> <title> "An optimization technique for protocol conformance test generation based on UIO sequences and rural Chinese postman tours," </title> <journal> IEEE Trans. on Communications, </journal> <volume> vol. 39, </volume> <pages> pp. 1604-1615, </pages> <month> Nov </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Due to interoperability requirements of heterogeneous devices in a complex communications network, each component of such a network must be tested for conformance against its specification. Automated generation of conformance tests based on the formal descriptions of communication protocols has been an active research area [1] - <ref> [16] </ref>. These techniques, using a deterministic finite-state machine (FSM) model of a protocol specification, focus on the optimization of the test sequence length. <p> Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences [19, 20] and characterizing (or W) sequences [6, 19, 20] for the results presented here. Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences <ref> [16] </ref>. Shen et al. [10], Ural and Lu [13] presented optimization methods using multiple UIO sequences for a given state. <p> Aho et al. <ref> [16] </ref> presented an efficient solution to this problem for FSMs with either a self-loop property or a reset capability. <p> Therefore, T 00 will not be disrupted by timeouts when implemented as a test sequence. For G fl s to have an Euler tour, G fl s must be strongly-connected. Aho et al. <ref> [16] </ref> showed that the sufficient condition for strong-connectivity of G fl s , where G fl s includes all edges in E fl test [ E fl 1 , is that the edge-induced subgraph G [E fl test [ E fl 1 ] should be a weakly-connected spanning subgraph of G <p> Since all UIO sequences are self-loops, the starting and ending state of a ghost edge and the corresponding test edge are the same, as shown in Figure 6 and Table 1. The rural Chinese postman method <ref> [16] </ref>, when applied to the graph without self-loop repetition constraint, results in the test sequence t0 e0; e0; z -| - t2 e2; e2; z -| - t9 e9; e9; z -| - t3 e3; e2; z -| - t6 e6; e6; e7; z -| - t7 e7; e6; e7; z <p> The same restriction also applies to t9; t10, and t11. The following test sequence is obtained by applying the rural Chinese postman method <ref> [16] </ref> to the graph without self-loop repetition constraint: t0 e0; e1; e5; z -| - t7 e7; e13; z -| - t8 e8; e0; e2; z -| - t9 e9; e0; e2; z -| - t10 e10; e0; e2; z -| - t11 e11; e0; e2; z -| - t5 e5; <p> The fault coverage of the test generation technique presented in this paper is expected to be the same as the fault coverage 24 provided by the rural Chinese postman tours combined with the UIO sequences <ref> [16] </ref>. The fault coverage for the UIO sequences method is reported by Sidhu and Leung [36], and Sabnani and Dahbura [37]. They presented fault models based on the Monte Carlo simulation technique, where a given specification is randomly altered and checked by a test sequence.
Reference: [17] <author> J. K. Lenstra and A. H. G. R. Kan, </author> <title> "On general routing problems," </title> <journal> Networks, </journal> <volume> vol. 6, </volume> <pages> pp. 273-280, </pages> <year> 1976. </year>
Reference-contexts: The solution augments original graph representation of the protocol FSM model and formulates a Rural Chinese Postman Problem solution <ref> [17] </ref> to generate a minimum-length tour. In the final test sequence generated, the number of consecutive self-loops never exceeds any state's specified limit. UIO sequences [18] are used for state verification throughout the paper. <p> The so-called Chinese Postman Problem is defined as finding a minimum-cost tour of G that traverses every edge at least once [28]. The Rural (Chinese) Postman Problem is finding a (minimum-cost) tour for a subset of edges in G <ref> [17] </ref>. During conformance testing of a protocol implementation, the IUT is viewed as a black box, where only the inputs applied to the IUT and the outputs generated by the IUT can be observed, respectively.
Reference: [18] <author> K. K. Sabnani and A. T. Dahbura, </author> <title> "A protocol test generation procedure," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 15, </volume> <pages> pp. 285-297, </pages> <year> 1988. </year>
Reference-contexts: The solution augments original graph representation of the protocol FSM model and formulates a Rural Chinese Postman Problem solution [17] to generate a minimum-length tour. In the final test sequence generated, the number of consecutive self-loops never exceeds any state's specified limit. UIO sequences <ref> [18] </ref> are used for state verification throughout the paper. However, the results presented also applicable to test generation that uses the distinguishing or characterizing sequences [6, 19, 20] as discussed in Section 6.1. Earlier results of this study, limited to verification sequences that are self-loops, are presented in [21]. <p> In addition to the original self-loops of a specification model, extra self-loops are typically created when the test sequences use state verification techniques such as unique input/output (UIO) sequences <ref> [18] </ref>, distinguishing sequences [19, 20], or characterizing sequences [6, 19, 20]. Example 1: Timing constraints in MIL-STD 188-220B The University of Delaware's Protocol Engineering Laboratory is developing test scripts to be used by the U.S. Army CECOM MIL-STD 188-220B Conformance Tester. <p> As the last step of the above single transition test, the unique input-output (UIO) sequences <ref> [18] </ref> technique (see Section 4) is used throughout the paper. <p> UIO sequence of a state s i , denoted U IO (s i ), is a specified input/output sequence with the originating state s i such that there is no s j 6= s i for which U IO (s i ) is a specified input/output sequence for s i <ref> [18] </ref>. UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs [29, 30]. <p> Also, note that it is relatively simple to add the timing constraints into the UIO generation algorithms given in <ref> [18] </ref>. When any UIO sequence is considering the self-loops of a state v i , the number of consecutive self-loops should be bounded by max self (v i ). <p> In addition to the UIO sequences <ref> [18] </ref>, the most well-known ones include the distinguishing sequences [19, 20], and the characterizing (or W) sequences [6, 19, 20]. The results presented in this paper are based on using the UIO sequences as the state verification technique. However, these results are also applicable to distinguishing and characterizing sequences.
Reference: [19] <author> A. Bhattacharyya, </author> <title> Checking Experiments in Sequential Machines. </title> <address> New York, N.Y.: </address> <publisher> John Wiley & Sons, </publisher> <year> 1989. </year>
Reference-contexts: In the final test sequence generated, the number of consecutive self-loops never exceeds any state's specified limit. UIO sequences [18] are used for state verification throughout the paper. However, the results presented also applicable to test generation that uses the distinguishing or characterizing sequences <ref> [6, 19, 20] </ref> as discussed in Section 6.1. Earlier results of this study, limited to verification sequences that are self-loops, are presented in [21]. This paper generalizes these earlier results to both self-loop and non-self-loop verification sequences. <p> In addition to the original self-loops of a specification model, extra self-loops are typically created when the test sequences use state verification techniques such as unique input/output (UIO) sequences [18], distinguishing sequences <ref> [19, 20] </ref>, or characterizing sequences [6, 19, 20]. Example 1: Timing constraints in MIL-STD 188-220B The University of Delaware's Protocol Engineering Laboratory is developing test scripts to be used by the U.S. Army CECOM MIL-STD 188-220B Conformance Tester. Tests are being generated for both the Data Link and Intranet Layers. <p> In addition to the original self-loops of a specification model, extra self-loops are typically created when the test sequences use state verification techniques such as unique input/output (UIO) sequences [18], distinguishing sequences [19, 20], or characterizing sequences <ref> [6, 19, 20] </ref>. Example 1: Timing constraints in MIL-STD 188-220B The University of Delaware's Protocol Engineering Laboratory is developing test scripts to be used by the U.S. Army CECOM MIL-STD 188-220B Conformance Tester. Tests are being generated for both the Data Link and Intranet Layers. <p> UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs [29, 30]. Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences <ref> [19, 20] </ref> and characterizing (or W) sequences [6, 19, 20] for the results presented here. Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences [16]. <p> UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs [29, 30]. Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences [19, 20] and characterizing (or W) sequences <ref> [6, 19, 20] </ref> for the results presented here. Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences [16]. Shen et al. [10], Ural and Lu [13] presented optimization methods using multiple UIO sequences for a given state. <p> In addition to the UIO sequences [18], the most well-known ones include the distinguishing sequences <ref> [19, 20] </ref>, and the characterizing (or W) sequences [6, 19, 20]. The results presented in this paper are based on using the UIO sequences as the state verification technique. However, these results are also applicable to distinguishing and characterizing sequences. <p> In addition to the UIO sequences [18], the most well-known ones include the distinguishing sequences [19, 20], and the characterizing (or W) sequences <ref> [6, 19, 20] </ref>. The results presented in this paper are based on using the UIO sequences as the state verification technique. However, these results are also applicable to distinguishing and characterizing sequences.
Reference: [20] <author> Z. Kohavi, </author> <title> Switching and Finite Automata Theory. </title> <address> New York, N.Y.: McGraw Hill, </address> <year> 1978. </year>
Reference-contexts: In the final test sequence generated, the number of consecutive self-loops never exceeds any state's specified limit. UIO sequences [18] are used for state verification throughout the paper. However, the results presented also applicable to test generation that uses the distinguishing or characterizing sequences <ref> [6, 19, 20] </ref> as discussed in Section 6.1. Earlier results of this study, limited to verification sequences that are self-loops, are presented in [21]. This paper generalizes these earlier results to both self-loop and non-self-loop verification sequences. <p> In addition to the original self-loops of a specification model, extra self-loops are typically created when the test sequences use state verification techniques such as unique input/output (UIO) sequences [18], distinguishing sequences <ref> [19, 20] </ref>, or characterizing sequences [6, 19, 20]. Example 1: Timing constraints in MIL-STD 188-220B The University of Delaware's Protocol Engineering Laboratory is developing test scripts to be used by the U.S. Army CECOM MIL-STD 188-220B Conformance Tester. Tests are being generated for both the Data Link and Intranet Layers. <p> In addition to the original self-loops of a specification model, extra self-loops are typically created when the test sequences use state verification techniques such as unique input/output (UIO) sequences [18], distinguishing sequences [19, 20], or characterizing sequences <ref> [6, 19, 20] </ref>. Example 1: Timing constraints in MIL-STD 188-220B The University of Delaware's Protocol Engineering Laboratory is developing test scripts to be used by the U.S. Army CECOM MIL-STD 188-220B Conformance Tester. Tests are being generated for both the Data Link and Intranet Layers. <p> Other examples of timers in Q.931 are: timer T304 running in state Overlap Sending , and timer T310 in state Outgoing Call Proceeding . 3 Preliminaries and practical restrictions on test sequences A protocol can be specified as a deterministic FSM <ref> [3, 10, 20] </ref>, which can be represented by a directed graph G = (V; E). The set V = fv 1 ; : : : ; v n g of vertices correspond to the set of states S of the FSM. <p> UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs [29, 30]. Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences <ref> [19, 20] </ref> and characterizing (or W) sequences [6, 19, 20] for the results presented here. Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences [16]. <p> UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs [29, 30]. Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences [19, 20] and characterizing (or W) sequences <ref> [6, 19, 20] </ref> for the results presented here. Aho et al. introduced an optimization for the test sequence length (and cost) using UIO sequences [16]. Shen et al. [10], Ural and Lu [13] presented optimization methods using multiple UIO sequences for a given state. <p> In addition to the UIO sequences [18], the most well-known ones include the distinguishing sequences <ref> [19, 20] </ref>, and the characterizing (or W) sequences [6, 19, 20]. The results presented in this paper are based on using the UIO sequences as the state verification technique. However, these results are also applicable to distinguishing and characterizing sequences. <p> In addition to the UIO sequences [18], the most well-known ones include the distinguishing sequences [19, 20], and the characterizing (or W) sequences <ref> [6, 19, 20] </ref>. The results presented in this paper are based on using the UIO sequences as the state verification technique. However, these results are also applicable to distinguishing and characterizing sequences.
Reference: [21] <author> M. U. Uyar, M. A. Fecko, A. S. Sethi, and P. D. Amer, </author> <title> "Minimum-cost solutions for testing protocols with timers," </title> <booktitle> in Proc. IEEE Int'l Performance, Computing, and Comm. Conf., </booktitle> <address> (Phoenix, AZ), </address> <pages> pp. 346-354, </pages> <month> Feb </month> <year> 1998. </year>
Reference-contexts: However, the results presented also applicable to test generation that uses the distinguishing or characterizing sequences [6, 19, 20] as discussed in Section 6.1. Earlier results of this study, limited to verification sequences that are self-loops, are presented in <ref> [21] </ref>. This paper generalizes these earlier results to both self-loop and non-self-loop verification sequences. Section 2 presents some practical motivation behind the optimization problem formulated in the paper. Two real protocols, Q.931 [22] and MIL-STD 188-220B [23], demonstrate real examples of protocols with self-loop timing constraints. <p> If all UIO sequences belong to Class 1, the test sequence (i.e., Chinese Postman tour) can be found in polynomial-time as described in <ref> [21] </ref>. Class 2.
Reference: [22] <institution> AT&T 5E4 Generic Program, AT&T 5ESS T M Switch - ISDN Basic Rate Interface Specification, </institution> <month> Sep </month> <year> 1985. </year>
Reference-contexts: Earlier results of this study, limited to verification sequences that are self-loops, are presented in [21]. This paper generalizes these earlier results to both self-loop and non-self-loop verification sequences. Section 2 presents some practical motivation behind the optimization problem formulated in the paper. Two real protocols, Q.931 <ref> [22] </ref> and MIL-STD 188-220B [23], demonstrate real examples of protocols with self-loop timing constraints. Section 3 provides the background information for FSM models and test generation. It also discusses the practical restrictions imposed on test sequences due to the timers. <p> T [24] T [29] T [31] T [1] T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services <ref> [22] </ref>, MIL-STD 188-220B [23] for Combat Net Radio communication, and LAPD [25], the data link protocol for the ISDN's D channel.
Reference: [23] <institution> Military Standard Interoperability Standard for Digital Message Device Subsystems (MIL-STD 188-220B), </institution> <month> Jan </month> <year> 1998. </year>
Reference-contexts: This paper generalizes these earlier results to both self-loop and non-self-loop verification sequences. Section 2 presents some practical motivation behind the optimization problem formulated in the paper. Two real protocols, Q.931 [22] and MIL-STD 188-220B <ref> [23] </ref>, demonstrate real examples of protocols with self-loop timing constraints. Section 3 provides the background information for FSM models and test generation. It also discusses the practical restrictions imposed on test sequences due to the timers. <p> most inopportune messages are expected to be ignored by an IUT, which typically defines the edges representing them as self-loops with a null or warning output. 2 BOTH- TIMERS-OFF BOTH TIMERS-ON TOP-UPDATE TIMER-ON TOP-UPDATE REQ-TIMER INACTIVE T [ 7,8,12,13,15,20, ON 30,32,34,35] 25,30,32,35] 15,17,19,20,28,29, T [ 2-6,7,8,25,26,32,35] T [ 9,11,16,18,22,27,29,33] T <ref> [23] </ref> T [24] T [29] T [31] T [1] T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services <p> [29] T [31] T [1] T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services [22], MIL-STD 188-220B <ref> [23] </ref> for Combat Net Radio communication, and LAPD [25], the data link protocol for the ISDN's D channel. <p> In addition to the UIO sequences method, the solution derived in this paper is also applicable to test sequences that use other state identification methods such as distinguishing sequences, and characterizing sequences. Currently, this method is being implemented as a software tool to be applied to MIL-STD 188-220B <ref> [23] </ref>.
Reference: [24] <author> ISO, </author> <title> Information Technology - OSI, Geneva, Switzerland, ISO International Standard 9646: Conformance Testing Methodology and Framework, </title> <year> 1991. </year>
Reference-contexts: Clearly, this is not the goal of testing. Therefore, a properly generated test sequence must consider a protocol's timer constraints. In general, the majority of tests defined for an IUT are classified into two categories: valid and inopportune tests <ref> [8, 24] </ref>. Valid tests correspond to the "normal" or expected behavior of a protocol entity. Inopportune tests have inputs that are semantically and syntactically correct, but arrive at unexpected states (or, out of sequence). <p> messages are expected to be ignored by an IUT, which typically defines the edges representing them as self-loops with a null or warning output. 2 BOTH- TIMERS-OFF BOTH TIMERS-ON TOP-UPDATE TIMER-ON TOP-UPDATE REQ-TIMER INACTIVE T [ 7,8,12,13,15,20, ON 30,32,34,35] 25,30,32,35] 15,17,19,20,28,29, T [ 2-6,7,8,25,26,32,35] T [ 9,11,16,18,22,27,29,33] T [23] T <ref> [24] </ref> T [29] T [31] T [1] T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services [22], MIL-STD <p> typically defines the edges representing them as self-loops with a null or warning output. 2 BOTH- TIMERS-OFF BOTH TIMERS-ON TOP-UPDATE TIMER-ON TOP-UPDATE REQ-TIMER INACTIVE T [ 7,8,12,13,15,20, ON 30,32,34,35] 25,30,32,35] 15,17,19,20,28,29, T [ 2-6,7,8,25,26,32,35] T [ 9,11,16,18,22,27,29,33] T [23] T <ref> [24] </ref> T [29] T [31] T [1] T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services [22], MIL-STD 188-220B [23] for Combat Net Radio communication, and LAPD [25],
Reference: [25] <author> M. U. Uyar and M. H. Sherif, </author> <title> "Protocol modeling for conformance testing: Case study for the ISDN LAPD protocol," </title> <journal> AT&T Technical Journal, </journal> <volume> vol. 69, </volume> <month> Jan </month> <year> 1990. </year>
Reference-contexts: [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services [22], MIL-STD 188-220B [23] for Combat Net Radio communication, and LAPD <ref> [25] </ref>, the data link protocol for the ISDN's D channel. In addition to the original self-loops of a specification model, extra self-loops are typically created when the test sequences use state verification techniques such as unique input/output (UIO) sequences [18], distinguishing sequences [19, 20], or characterizing sequences [6, 19, 20].
Reference: [26] <author> M. A. Fecko, P. D. Amer, A. S. Sethi, M. U. Uyar, T. Dzik, R. Menell, and M. McMahon, </author> <title> "Formal design and testing of MIL-STD 188-220A based on Estelle," </title> <booktitle> in Proc. IEEE Military Comm. Conf. </booktitle> <address> (MILCOM), (Monterey, CA), </address> <month> Nov </month> <year> 1997. </year>
Reference-contexts: Tests are being generated for both the Data Link and Intranet Layers. The tests are derived from an Estelle specification of the protocol. An extended FSM (i.e., FSM with memory) representing a portion of the Intranet Layer of 188-220B, called the Topology Update (TU), is shown in Figure 1 <ref> [26] </ref>. The equivalent FSM model of Topology Update has 10 states and 345 state transitions. In 8 of these states at least one timer is running in the implementation. A timer's status (i.e., on or off) determines the behavior of the implementation.
Reference: [27] <author> L. R. Ford and D. R. Fulkerson, </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year> <month> 26 </month>
Reference-contexts: A cost usually corresponds to the difficulty to exercise the corresponding state transition. Also, a non-negative integer representing an edge's capacity can be associated with each edge. The capacity is the maximum number of units of network flow that can be put on the edge <ref> [27] </ref> (i.e., the maximum number of times that this edge can be replicated, as discussed in Section 5.1). A tour is a sequence of consecutive edges that starts and ends at the same vertex. An Euler tour is a tour that contains every edge of G exactly once. <p> non-self-loop edge Suppose that: 0 0 (part (a)) to v fl (1) fl (2) i in G fl (part (b)). 16 satisfying this condition exists iff X i 2V fl fs;tg i ) = v fl fi (v fl which holds true for capacity assignments defined by (21) and (22) <ref> [27] </ref>. Let O be an integer function whose value O (v i ; v j ) is the number of times an edge (v i ; v j ) is included in G .
Reference: [28] <author> M. U. Uyar and A. T. Dahbura, </author> <title> "Optimal test sequence generation for protocols: the Chinese postman algorithm applied to Q.931," </title> <booktitle> in Proc. IEEE GLOBECOM, </booktitle> <pages> pp. 68-72, </pages> <month> Dec </month> <year> 1986. </year>
Reference-contexts: An Euler tour is a tour that contains every edge of G exactly once. The so-called Chinese Postman Problem is defined as finding a minimum-cost tour of G that traverses every edge at least once <ref> [28] </ref>. The Rural (Chinese) Postman Problem is finding a (minimum-cost) tour for a subset of edges in G [17].
Reference: [29] <author> B. S. Bosik and M. U. Uyar, </author> <title> "FSM-based formal methods in protocol conformance testing: from theory to implementation," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 22, </volume> <pages> pp. 7-34, </pages> <month> Sep </month> <year> 1991. </year>
Reference-contexts: expected to be ignored by an IUT, which typically defines the edges representing them as self-loops with a null or warning output. 2 BOTH- TIMERS-OFF BOTH TIMERS-ON TOP-UPDATE TIMER-ON TOP-UPDATE REQ-TIMER INACTIVE T [ 7,8,12,13,15,20, ON 30,32,34,35] 25,30,32,35] 15,17,19,20,28,29, T [ 2-6,7,8,25,26,32,35] T [ 9,11,16,18,22,27,29,33] T [23] T [24] T <ref> [29] </ref> T [31] T [1] T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services [22], MIL-STD 188-220B [23] <p> UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs <ref> [29, 30] </ref>. Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences [19, 20] and characterizing (or W) sequences [6, 19, 20] for the results presented here. <p> See Section 5.2.2 for an illustration. Although finding UIO sequences is NP-hard for the general case, many researchers and practitioners report that the UIO sequences for most real-life protocols are short enough to be found in polynomial time <ref> [29, 30] </ref>.
Reference: [30] <author> H. V. Bertine, W. B. Elsner, P. K. Verma, and K. T. Tewani, </author> <title> "Overview of protocol testing, methodologies, and standards," </title> <journal> AT&T Technical Journal, </journal> <month> Jan </month> <year> 1990. </year>
Reference-contexts: UIO sequences have been widely used in practice in testing communications protocols and devices, for example, ISDN systems and PBXs <ref> [29, 30] </ref>. Section 6.1 presents a discussion on how to utilize other state verification techniques such as the distinguishing sequences [19, 20] and characterizing (or W) sequences [6, 19, 20] for the results presented here. <p> See Section 5.2.2 for an illustration. Although finding UIO sequences is NP-hard for the general case, many researchers and practitioners report that the UIO sequences for most real-life protocols are short enough to be found in polynomial time <ref> [29, 30] </ref>.
Reference: [31] <author> R. Alur and D. L. Dill, </author> <title> "A theory of timed automata," </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 126, </volume> <pages> pp. 183-235, </pages> <year> 1994. </year>
Reference-contexts: be ignored by an IUT, which typically defines the edges representing them as self-loops with a null or warning output. 2 BOTH- TIMERS-OFF BOTH TIMERS-ON TOP-UPDATE TIMER-ON TOP-UPDATE REQ-TIMER INACTIVE T [ 7,8,12,13,15,20, ON 30,32,34,35] 25,30,32,35] 15,17,19,20,28,29, T [ 2-6,7,8,25,26,32,35] T [ 9,11,16,18,22,27,29,33] T [23] T [24] T [29] T <ref> [31] </ref> T [1] T [21,29] T [24] (Although in the protocol specification only valid transitions are defined explicitly, the set of inopportune transitions can be derived.) Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services [22], MIL-STD 188-220B [23] for Combat <p> In the test suite considered in this paper, valid and inopportune tests are handled together. This implies that the generated test sequence will test all self-loops of the protocol along with valid non-self-loop transitions. Another choice for modeling the specifications with timing constraints could be timed automata <ref> [31, 32] </ref>. However, the research on timed automata mainly concentrates on model checking rather than test generation. Hence, the existing literature on timed automata does not provide any extra help to obtain an efficient solution for the timing constraint problem investigated in this paper.
Reference: [32] <author> J. Springintveld, F. Vaandrager, and P. R. D'Argenio, </author> <title> "Testing timed automata," </title> <type> Tech. Rep. </type> <institution> CTIT-97-17, University of Twente, </institution> <address> the Netherlands, </address> <year> 1997. </year>
Reference-contexts: In the test suite considered in this paper, valid and inopportune tests are handled together. This implies that the generated test sequence will test all self-loops of the protocol along with valid non-self-loop transitions. Another choice for modeling the specifications with timing constraints could be timed automata <ref> [31, 32] </ref>. However, the research on timed automata mainly concentrates on model checking rather than test generation. Hence, the existing literature on timed automata does not provide any extra help to obtain an efficient solution for the timing constraint problem investigated in this paper.
Reference: [33] <author> M. U. Uyar, M. A. Fecko, A. S. Sethi, and P. D. Amer, </author> <title> "Test generation for protocols with timing constraints," </title> <type> Tech. Rep. </type> <institution> TR-98-07, CIS Dept., University of Delaware, Newark, DE, </institution> <year> 1997. </year>
Reference-contexts: It can be proven that, if the FSM has a reset capability or a self-loop property, G [E fl test [ E fl 1 ] is a weakly-connected spanning subgraph of G fl (a detailed proof is given in <ref> [33] </ref>). Example 3: Consider an FSM whose all UIO sequences belong to Class 1, as shown in Figure 6. Suppose that vertices v 0 ; v 2 and v 3 of the FSM can tolerate at most three, and vertex v 1 at most two self-loop transitions during each visit.
Reference: [34] <author> H. Ural and K. Zhu, </author> <title> "Optimal length test sequence generation using distinguishing sequences," </title> <journal> IEEE/ACM Trans. on Networking, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 358-371, </pages> <year> 1993. </year>
Reference-contexts: An example of applying the distinguishing and characterizing sequences to the rural Chinese postman problem formulation is presented in <ref> [34, 35] </ref>. 6.2 Fault coverage issues A tradeoff exists between the length of test sequences and their fault coverage.
Reference: [35] <author> A. Rezaki and H. Ural, </author> <title> "Construction of checking sequences based on characterization sets," </title> <journal> Computer Communications, </journal> <volume> vol. 18, no. 12, </volume> <pages> pp. 911-920, </pages> <year> 1995. </year>
Reference-contexts: An example of applying the distinguishing and characterizing sequences to the rural Chinese postman problem formulation is presented in <ref> [34, 35] </ref>. 6.2 Fault coverage issues A tradeoff exists between the length of test sequences and their fault coverage.
Reference: [36] <author> D. P. Sidhu and T. K. Leung, </author> <title> "Fault coverage of protocol test methods," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <pages> pp. 80-85, </pages> <year> 1988. </year>
Reference-contexts: The fault coverage for the UIO sequences method is reported by Sidhu and Leung <ref> [36] </ref>, and Sabnani and Dahbura [37]. They presented fault models based on the Monte Carlo simulation technique, where a given specification is randomly altered and checked by a test sequence. These studies concluded that test sequences generated by using the UIO sequences have a "high" fault detection capability. <p> These studies concluded that test sequences generated by using the UIO sequences have a "high" fault detection capability. In addition to the fault types studied in <ref> [36] </ref> and [37], this paper considers faults due to timers, as shown in the examples given in Section 6. <p> Such events correspond to the errors where an IUT has incorrectly implemented a next state function or an output. The test steps shown in Section 3 combined with the UIO sequences are expected to detect such faults with the coverage estimated by <ref> [36, 37] </ref>. 7 Conclusion An optimization method based on the Rural Chinese Postman Problem is introduced to generate test sequences with timing constraints. Due to the active timers, the number of consecutive self-loops that can be traversed in a given state before a timeout occurs is limited.
Reference: [37] <author> A. T. Dahbura and K. K. Sabnani, </author> <title> "An experience in estimating fault coverage of a protocol test," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <pages> pp. 71-79, </pages> <year> 1988. </year> <month> 27 </month>
Reference-contexts: The fault coverage for the UIO sequences method is reported by Sidhu and Leung [36], and Sabnani and Dahbura <ref> [37] </ref>. They presented fault models based on the Monte Carlo simulation technique, where a given specification is randomly altered and checked by a test sequence. These studies concluded that test sequences generated by using the UIO sequences have a "high" fault detection capability. <p> These studies concluded that test sequences generated by using the UIO sequences have a "high" fault detection capability. In addition to the fault types studied in [36] and <ref> [37] </ref>, this paper considers faults due to timers, as shown in the examples given in Section 6. <p> Such events correspond to the errors where an IUT has incorrectly implemented a next state function or an output. The test steps shown in Section 3 combined with the UIO sequences are expected to detect such faults with the coverage estimated by <ref> [36, 37] </ref>. 7 Conclusion An optimization method based on the Rural Chinese Postman Problem is introduced to generate test sequences with timing constraints. Due to the active timers, the number of consecutive self-loops that can be traversed in a given state before a timeout occurs is limited.
References-found: 37

