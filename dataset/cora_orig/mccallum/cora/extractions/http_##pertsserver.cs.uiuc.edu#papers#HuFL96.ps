URL: http://pertsserver.cs.uiuc.edu/papers/HuFL96.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/members/wfeng/paper/paper.html
Root-URL: http://www.cs.uiuc.edu
Email: g@cs.uiuc.edu  
Title: Operating System Support for Imprecise Computation  
Author: David Hull, Wu-chun Feng, and Jane W. S. Liu f hull feng janeliu 
Address: 1304 West Springfield Avenue Urbana, Illinois 61801 USA  
Affiliation: University of Illinois at Urbana-Champaign  
Date: November 9-11, 1996,  
Note: To appear in AAAI Fall Symposium on Flexible Computation,  Cambridge, Massachusetts.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Y. Chung, J. W. S. Liu, and K. J. Lin. </author> <title> Scheduling periodic jobs that allow imprecise results. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9):1156 1174, </volume> <month> September </month> <year> 1990. </year>
Reference: [2] <author> W. Feng and J. W.-S. Liu. </author> <title> Algorithms for scheduling tasks with input error and end-to-end deadlines. </title> <type> Technical Report UIUCDCS-R-94-1888, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: The second pass then distributes the time budgeted for each composite task across its n component tasks so as to minimize the output error of each composite task. The heuristic algorithms for this distribution <ref> [2, 4] </ref> are greedy in that they try to distribute processor time to the component tasks which will reduce the output error of the task the most. They all have time complexity O (n).
Reference: [3] <author> W. Feng and J. W.-S. Liu. </author> <title> Performance of a congestion control scheme on an ATM switch. </title> <booktitle> In Proceedings of the International Conference on Networks, </booktitle> <pages> pages 225228, </pages> <address> Orlando, Florida, Jan-uary 1996. </address> <publisher> IASTED. </publisher>
Reference-contexts: Examples include video and graphics for animation. We experimented with image processing and graphics techniques that allow us to trade quality for time [4]. We have also evaluated the effectiveness of a scheme based on the imprecise computation technique for congestion control in ATM networks <ref> [3, 10] </ref>. Our simulation results show that our scheme is effective for controlling congestion of video traffic.
Reference: [4] <author> Wu-Chun Feng. </author> <title> Applications and Extensions of the Imprecise-Computation Model. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: The second pass then distributes the time budgeted for each composite task across its n component tasks so as to minimize the output error of each composite task. The heuristic algorithms for this distribution <ref> [2, 4] </ref> are greedy in that they try to distribute processor time to the component tasks which will reduce the output error of the task the most. They all have time complexity O (n). <p> For some applications, the effects of imprecision are subjective, and they need to be measured empirically. Examples include video and graphics for animation. We experimented with image processing and graphics techniques that allow us to trade quality for time <ref> [4] </ref>. We have also evaluated the effectiveness of a scheme based on the imprecise computation technique for congestion control in ATM networks [3, 10]. Our simulation results show that our scheme is effective for controlling congestion of video traffic.
Reference: [5] <author> D. L. Hull, W. Feng, and J. W.-S. Liu. </author> <title> Enhancing the performance and dependability of real-time systems. </title> <booktitle> In IEEE International Computer Performance and Dependability Symposium, </booktitle> <address> Er-langen, Germany, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: An Imprecise Computation Environment The Imprecise Computation Environment (ICE) is an environment for implementing imprecise real-time systems <ref> [5] </ref>. We use a modification of the standard client/server architecture that adds support for imprecise servers; this architecture is shown in Figure 1. We are implementing ICE on top of real-time Mach [14]. We have modified the standard Mach interface generator, MIG, to allow for the construction of imprecise servers.
Reference: [6] <author> Changwen Liu and Jane W. S. Liu. </author> <title> Effects of imprecise computation in time-invariant control systems. </title> <booktitle> In Proceedings of the Twenty-Ninth Annual Conference on Information Sciences and Systems, </booktitle> <pages> pages 297302, </pages> <address> Baltimore, Maryland, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: Specifically, we studied the behavior of digital controllers in the presence of input and control-law-computation errors. We have found the conditions under which a control system is tracking convergent and e-bounded tracking convergent <ref> [6] </ref>. Both are concerned with whether values of the state variables of the system will eventually approach their precise values after an occurrence of input or control-law-computation error and at what rate the erroneous state variables will approach their precise values.
Reference: [7] <author> Jane W. S. Liu, Kwei-Jay Lin, Riccardo Bettati, David Hull, and Albert Yu. </author> <title> Use of imprecise computation to enhance dependability of real-time systems. </title> <editor> In Gary M. Koob and Clifford G. Lau, editors, </editor> <booktitle> Foundations of Dependable Computing: Paradigms for Dependable Applications, chapter 3.1, </booktitle> <pages> pages 157182. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: The scheduling algorithms and imprecise-computation environment resulting from this work enable the use of imprecise computation as a means to provide scheduling flexibility in real-time systems and to enhance their fault tolerance and allow graceful degradation <ref> [7, 9] </ref>. A real-time system is one in which tasks have deadlines. A hard real-time system fails if any task does not produce its result by its deadline. Here, the term task loosely refers to a unit of work that is executed by the system to provide some service.
Reference: [8] <author> Jane W. S. Liu, Kwei-Jay Lin, Wei-Kuan Shih, Albert Chuang-shi Yu, Jen-Yao Chung, and Wei Zhao. </author> <title> Algorithms for scheduling imprecise computations. </title> <journal> IEEE Computer, </journal> <volume> 24(5):5868, </volume> <month> May </month> <year> 1991. </year>
Reference: [9] <author> Jane W. S. Liu, Wei-Kuan Shih, Kwei-Jay Lin, Riccardo Bettati, and Jen-Yao Chung. </author> <title> Imprecise computations. </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 82(1):8394, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: The scheduling algorithms and imprecise-computation environment resulting from this work enable the use of imprecise computation as a means to provide scheduling flexibility in real-time systems and to enhance their fault tolerance and allow graceful degradation <ref> [7, 9] </ref>. A real-time system is one in which tasks have deadlines. A hard real-time system fails if any task does not produce its result by its deadline. Here, the term task loosely refers to a unit of work that is executed by the system to provide some service.
Reference: [10] <author> V. Lopez-Millan, W. Feng, and J. W.-S. Liu. </author> <title> Using the imprecise-computation technique for congestion control on a real-time traffic switching element. </title> <booktitle> In Proceedings, International Conference on Parallel and Distributed Systems, </booktitle> <address> Tai-wan, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Examples include video and graphics for animation. We experimented with image processing and graphics techniques that allow us to trade quality for time [4]. We have also evaluated the effectiveness of a scheme based on the imprecise computation technique for congestion control in ATM networks <ref> [3, 10] </ref>. Our simulation results show that our scheme is effective for controlling congestion of video traffic.
Reference: [11] <author> Wei-Kuan Shih and Jane W. S. Liu. </author> <title> On-line scheduling of imprecise computations to minimize error. </title> <booktitle> In Proceedings, Real-Time Systems Symposium, </booktitle> <pages> pages 280289, </pages> <address> Phoenix, Arizona, </address> <month> December </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: These automatically-generated parts of the client and server are called the handler and the su pervisor, respectively. 1 We are modifying the kernel to add the NORA scheduling algorithm <ref> [11] </ref> to schedule imprecise tasks. When a client calls an imprecise server, it specifies the maximum imprecision it can tolerate. The supervisor creates an imprecise task for each request, and the operating system schedules it with the other real-time tasks in the system.
Reference: [12] <author> Wei-Kuan Shih and Jane W. S. Liu. </author> <title> Algorithms for scheduling imprecise computations with timing constraints to minimize maximum error. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 44(3):466 471, </volume> <month> March </month> <year> 1995. </year>
Reference: [13] <author> Wei-Kuan Shih, Jane W. S. Liu, and Jen-Yao Chung. </author> <title> Algorithms for scheduling imprecise computations with timing constraints. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(3):537552, </volume> <month> June </month> <year> 1991. </year>
Reference: [14] <author> Hideyuki Tokuda, Tatsuo Nakajima, and Prithvi Rao. </author> <title> Real-time Mach: Towards a predictable real-time system. </title> <booktitle> In Proceedings of USENIX 1990 Mach Workshop, </booktitle> <pages> pages 7382, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: An Imprecise Computation Environment The Imprecise Computation Environment (ICE) is an environment for implementing imprecise real-time systems [5]. We use a modification of the standard client/server architecture that adds support for imprecise servers; this architecture is shown in Figure 1. We are implementing ICE on top of real-time Mach <ref> [14] </ref>. We have modified the standard Mach interface generator, MIG, to allow for the construction of imprecise servers. This modified MIG automatically generates much of the support code for an imprecise task, thus greatly simplifying the construction of an imprecise system.
References-found: 14

