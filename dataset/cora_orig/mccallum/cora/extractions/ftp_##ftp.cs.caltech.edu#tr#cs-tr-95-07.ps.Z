URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-95-07.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: A General Approach to Performance Analysis and Optimization of Asynchronous Circuits  
Author: Tak Kwan Lee 
Degree: Thesis by  In Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy  
Date: 1995 (Submitted May 18, 1995)  
Address: Pasadena, California  
Affiliation: California Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: A channel connects two processes and the two ends of a channel are referred to as ports 1 . Example 2.1: Figure 2.1 shows a set of three processes. Each process contains an L port and an R port. Process p [0] communicates with p <ref> [1] </ref> through the channel hp [0]:R; p [1]:Li and so forth. 2 The operations performed by a process are described in the following notation. <p> In order to maintain correctness, the two ends of a channel need to obey some given protocol . The two most 7 l i r o l i r o l i r o p <ref> [1] </ref> p [2]p [0] common protocols are two-phase handshaking and four-phase handshaking . Due to space limitation, only the latter will be discussed. For the four-phase handshaking protocol, one communication action on a channel is chosen to be active and the corresponding one passive. <p> o " q i ^ x 0 ! qF o # :q i ! qF o " 16 CONTROL l o r i ireg x 0x 1 pT i p o ireg x 0x 1 pT i p o ireg x 0x 1 pT i p o pletion tree p <ref> [1] </ref> p [n 1] oreg x 0x 1 qF o oreg x 0x 1 qF o oreg x 0x 1 qF o q [1] q [n 1] 2.5.2 Completion Trees In ireg , a completion signal p o is generated after the bit has been stored. <p> ireg x 0x 1 pT i p o ireg x 0x 1 pT i p o ireg x 0x 1 pT i p o pletion tree p <ref> [1] </ref> p [n 1] oreg x 0x 1 qF o oreg x 0x 1 qF o oreg x 0x 1 qF o q [1] q [n 1] 2.5.2 Completion Trees In ireg , a completion signal p o is generated after the bit has been stored. <p> figure, where data are sent using a passive output communication on port R, the output signal of the control part, r o , is used to cause 17 ireg ireg ireg b0 b0 b1 oreg oreg oreg a1 a1 a0 Function block for f yT o [m 1] yT o <ref> [1] </ref> yT o [0] xT i [n 1] xT i [1] xT i [0] the registers to send out their values in dual-rail form. <p> on port R, the output signal of the control part, r o , is used to cause 17 ireg ireg ireg b0 b0 b1 oreg oreg oreg a1 a1 a0 Function block for f yT o [m 1] yT o <ref> [1] </ref> yT o [0] xT i [n 1] xT i [1] xT i [0] the registers to send out their values in dual-rail form. <p> Lemma 6.19 The following two predicates are loop invariants of the repeat loop in Algorithm 1: S [0] ! S <ref> [1] </ref> ! ! S [n]; (6.22) 8i; j : 0 i; j n : bool (S [i]) = bool (S [j]) ) i = j: (6.23) Proof: First, consider the procedure find cycle (). <p> Next, suppose that (6.22) and (6.23) hold when find cycle () is called. Then, by (6.24), enb (A [n]; S [n]). So, by (6.21), S [0] ! S <ref> [1] </ref> ! ! S [n] ! s (6.25) holds just before the if-statement. If the condition in the if-statement is false, then 8~- : 0 ~- n : bool (S [~-]) 6= bool (s). <p> As it turns out, 1211 ! . However, the guard for tran (hx 1 ; 2i) is also true in and <ref> [1] </ref> = 2. But, there is not a state t such that t hx 1 ; 2i To fully describe the procedure for backtracking, we have the following definition. <p> Some preliminary work on using only triggers, as defined in Sub-section 6.3.1, as causes has already been done and has shown promising results. 158 Appendix A Algorithms The following algorithms are written in a language that is a slight variation to Pidgin ALGOL of <ref> [1] </ref>. For clarity, we have adopted the following conventions: names for storage variables and types are in typewriter font, words reserved by the language are in sans serif font, procedure names are in slanted font, and theoretical expressions and descriptive proses are written in their standard formats.
Reference: [2] <author> J.M. Berger. </author> <title> A note on error detection codes for asymmetric channels. </title> <booktitle> Information and Control , 4 </booktitle> <pages> 68-73, </pages> <year> 1961. </year>
Reference-contexts: A dual-rail port is said to have a valid value if exactly one of the two data signals is high; it has a a neutral value if both signals are low [24]. For other encoding schemes, see <ref> [2, 46] </ref>. As written above, ireg cannot be implemented without adding an inverter on an isochronic branch. <p> Example 5.2: In the above example, since <ref> [2] </ref> = 1 and the value of :x 0 ^ :x 1 , the guard for x 2 #, is true at , enb (hx 2 ; 2i; ). 2 Definition: A state a changes to b , denoted a ! b , if there exists an event ff = hx <p> Example 5.6: Continuing with the previous example where a = 1010 and b = 0110. Then, = 0000 is the only common ancestor of the two states and is therefore their c.c.a. However, <ref> [2] </ref> 6= minf a [2]; b [2]g. 2 Lemma 5.10 Let be a c.c.a. of a and b with A B enb (fl; ), then fl =2 (A " B). Proof: Assume, toward a contradiction, that enb (fl; ) and fl 2 (A " B). <p> Example 5.6: Continuing with the previous example where a = 1010 and b = 0110. Then, = 0000 is the only common ancestor of the two states and is therefore their c.c.a. However, <ref> [2] </ref> 6= minf a [2]; b [2]g. 2 Lemma 5.10 Let be a c.c.a. of a and b with A B enb (fl; ), then fl =2 (A " B). Proof: Assume, toward a contradiction, that enb (fl; ) and fl 2 (A " B).
Reference: [3] <author> G. Birkhoff. </author> <title> Lattice Theory. </title> <publisher> American Mathematical Society, </publisher> <address> Providence, RI, </address> <year> 1940. </year>
Reference-contexts: As an aside, it should be pointed out that stability in a state graph is analogous to semi-modularity in a lattice <ref> [3] </ref>. However, since some of the later results 78 fi ff a c b d apply only to state graphs and not to lattices in general, we have decided not to employ any lattice theory and, instead, start from first principles as given above.
Reference: [4] <author> S.S. Bizzan, G.A. Jullien and W.C. Miller. </author> <title> Analytical approach to sizing nFET chains. </title> <journal> Electronics Letters, </journal> <volume> 28(14) </volume> <pages> 1334-1335, </pages> <year> 1992. </year>
Reference-contexts: Some schemes for computing these delays are given in <ref> [13, 21, 7, 4, 9, 8] </ref>. 2.5 Datapaths In contrast to the control part, the datapath of a process can usually be implemented efficiently by combining members from a standard set of components such as registers, adders, completion trees, etc.
Reference: [5] <author> S.M. Burns. </author> <title> Automated Compilation of Concurrent Programs into Self-timed Circuits. M.S. </title> <type> thesis, </type> <institution> CS-TR-88-2, California Institute of Technology, </institution> <year> 1988. </year>
Reference-contexts: Interested readers should refer to [30] for more details. Also, it should be pointed out that the transformation steps described below can be bypassed by using a syntax-directed compiler <ref> [5] </ref>, though the results are usually too large for practical use. 2.1 CSP At the top-most level, the specification of the circuit to be synthesized is written as a concurrent program, using a language that is based on Hoare's model of Communicating Sequential Processes (CSP) [17].
Reference: [6] <author> S.M. Burns. </author> <title> Performance Analysis and Optimization of Asynchronous Circuits. </title> <type> Ph.D. thesis, </type> <institution> California Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: Instead, in general, it is necessary to determine the causality and delay relationships between all signal transitions in an asynchronous circuit and its environment. The first successful attempt to address this problem is by Burns in <ref> [6] </ref>. There, he develops the concept of Event-Rule Systems (ER-systems) where "events" represents occurrences of signal transitions and "rules" are used to describe their causality and delay relationships. <p> Such a procedure is known as reshu*ing . How--ever, care must be taken so that no deadlock ensues and data integrity is maintained (see Chapter 6 in <ref> [6] </ref>). Example 2.5: In the one-place buffer, there is no need to wait for l i to become false before starting the R communication. Hence, we can postpone the wait [:l i ] so that it occurs as late as possible, i.e., just before l o ". <p> Hence, we can postpone the wait [:l i ] so that it occurs as late as possible, i.e., just before l o ". The resulting protocol for L becomes [:l i ]; l o "; [l i ]; l o # and is called the lazy-active protocol <ref> [6] </ref>. <p> So, zeroQ serves as another example of a useful PR set containing a guard with disjuncts (namely, aQ i and bQ i ) that are not mutex. 21 Chapter 3 Event-Rule Systems We begin this chapter by describing the Event-Rule Systems (ER-systems) invented by Burns <ref> [6] </ref> and showing how they can be used to model simple systems. We then point out some of the difficulties involved when ER-systems are used to model data-dependent systems or ones with multiple-occurrences. <p> Here, an event has more than one set of causes and, consequently, cannot be modeled by an ER-system. Such a system is said to be inherently disjunctive <ref> [6] </ref>. The generalization of ER-systems to describe such a system is the topic of the next chapter. 3.7 Arbiters and Synchronizers As mentioned before, program parts dealing with arbitration and synchronization of negated probes cannot be described by stable PR's. <p> Most of the definitions and results for XER-systems have counterparts in ER-systems. Moreover, most of the proofs in this chapter, with the notable exception of those in Section 4.4 and Section 4.7, are extensions to those given in <ref> [6] </ref>. 4.1 General Extended Event-Rule Systems The source of a rule in an XER-system is a set of events. Furthermore, having more than one rule with f as target specifies that f has more than one possible set of causes. <p> To avoid these pathological situations that do not correspond to realistic systems, only XER-systems whose constraint graphs contain no vertices with infinite in-degrees are considered . Cyclic Constraint Graphs In <ref> [6] </ref>, Burns shows the analog of the fact that if an XER-system is conjunctive and feasible, then the sum of the weights along the arcs in any cycle in its constraint graph is zero. <p> The period of the timing function is p. Note that this definition differs slightly from the one given in <ref> [6] </ref> where a linear timing function has the form: t (u; i) = h (u) + p u i: (4.23) Burns then shows that if u and v belong to the same strongly connected component of the corresponding collapsed-constraint graph G 0 , then p u and p v are identical. <p> The minimum period of X 0 , denoted period (X 0 ), is the period of its MPLTF. The following lemma is a rephrasing of one of the main results of <ref> [6] </ref>. <p> Then, see Section 2.4 of <ref> [6] </ref> for the rest of the proof. Below, a brief outline of that proof is given to illustrate the approach used and to present some intermediate results which will be needed in the sequel. <p> Then, the constraints expressed in (4.27) are equivalent to (4.29) below and, therefore, finding the MPLTF for Y 0 is equivalent to solving z = min p (4.28) " p ff (4.29) The fact that this solution exists and is related to the cycles by (4.26) is given in <ref> [6] </ref>. Q.E.D. Note that p in (4.26) is well-defined because of the following reasons. Let u be a transition in a cycle 0 . <p> Furthermore, if the delays between transitions in the circuit are specified as functions of transistor sizes, then the performance of circuit can be optimized by finding sizes that minimize the period of the corresponding repetitive XER-system. To compute this period, one can use the methods described in <ref> [6] </ref> to find the periods of the scenarios and then select the minimum. Since, in practice, the number of transitions with more than one set of causes and the number of alternative sets of causes for a particular transition are both relatively small, this approach is usually acceptable.
Reference: [7] <author> J.-P. Caisso, E. Cerny, </author> <title> and N.C. Rumin. A recursive technique for computing delays in series-parallel MOS transistor circuits. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(5) </volume> <pages> 589-595, </pages> <year> 1991. </year>
Reference-contexts: Some schemes for computing these delays are given in <ref> [13, 21, 7, 4, 9, 8] </ref>. 2.5 Datapaths In contrast to the control part, the datapath of a process can usually be implemented efficiently by combining members from a standard set of components such as registers, adders, completion trees, etc.
Reference: [8] <author> P.K. Chan and K. Karplus. </author> <title> Computing signal delay in general RC networks by tree/link partitioning. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 9(8) </volume> <pages> 898-902, </pages> <year> 1990. </year>
Reference-contexts: Some schemes for computing these delays are given in <ref> [13, 21, 7, 4, 9, 8] </ref>. 2.5 Datapaths In contrast to the control part, the datapath of a process can usually be implemented efficiently by combining members from a standard set of components such as registers, adders, completion trees, etc.
Reference: [9] <author> C.-Y. Chu and M.A. Horowitz. </author> <title> Charge-sharing models for switch-level simulation. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> CAD-6(6):1053-1061, </volume> <year> 1987. </year>
Reference-contexts: Some schemes for computing these delays are given in <ref> [13, 21, 7, 4, 9, 8] </ref>. 2.5 Datapaths In contrast to the control part, the datapath of a process can usually be implemented efficiently by combining members from a standard set of components such as registers, adders, completion trees, etc.
Reference: [10] <author> T.A. Chu. </author> <title> Synthesis of Self-Timed VLSI Circuits from Graph-Theoretic Specifications. </title> <type> Ph.D. Thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44]. Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, <ref> [10, 35, 12, 45, 39] </ref>). In particular, the Caltech approach, invented by A. J.
Reference: [11] <author> E.W. Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1976. </year>
Reference-contexts: A selection statement is of the form "[G 0 ! S 0 [] : : : [] G n ! S n ]." Each G j ! S j is a guarded command <ref> [11] </ref> where G j is a Boolean expression (the guard of the command) and S j is a program part.
Reference: [12] <author> J.C. Ebergen. </author> <title> Translating Programs into Delay-Insensitive Circuits, </title> <type> Ph.D. thesis, </type> <institution> Technische Universiteit Eindhoven, </institution> <year> 1987. </year>
Reference-contexts: However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44]. Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, <ref> [10, 35, 12, 45, 39] </ref>). In particular, the Caltech approach, invented by A. J.
Reference: [13] <author> W.C. </author> <title> Elmore. The transient response of damped linear networks with particular regard to wideband amplifiers. </title> <journal> Journal of Applied Physics, </journal> <volume> 19(1) </volume> <pages> 55-63, </pages> <month> January </month> <year> 1948. </year>
Reference-contexts: Some schemes for computing these delays are given in <ref> [13, 21, 7, 4, 9, 8] </ref>. 2.5 Datapaths In contrast to the control part, the datapath of a process can usually be implemented efficiently by combining members from a standard set of components such as registers, adders, completion trees, etc.
Reference: [14] <author> J. Franklin. </author> <title> Methods of Mathematical Economics. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1980. </year>
Reference-contexts: Moreover, for any w 2 C (X 0 ), h ? (w) = h (w) h ( ^w) + B B by the minimality of h ( ^w). Hence, a feasible solution exists for the linear program above. Furthermore, since c T x is non-negative, by the Duality Theorem <ref> [14] </ref>, an optimal solution exists. Therefore, there exists a MPLOF h ? such that (4.52) and (4.53) are satisfied.
Reference: [15] <author> J. Gunawardena. </author> <title> Timing analysis of digital circuits and the theory of min-max functions. </title> <booktitle> In TAU'93, ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <year> 1993. </year>
Reference-contexts: Q.E.D. Note that (4.75) may not hold if a critical scenario X 0 is not strongly connected. In <ref> [15] </ref>, there is no requirement of strongly connected scenarios and Gunawardena is able to give necessary and sufficient criteria for a condition that would imply (4.75); however, the results are valid only if there are at most two initial events.
Reference: [16] <author> P.J. Hazewindus. </author> <title> Testing Delay-Insensitive Circuits. </title> <type> Ph.D. thesis, </type> <institution> Cal-ifornia Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: Due to the weak assumption on delays, QDI circuits are very robust; of the designs mentioned above, those that were fabricated functioned correctly on "first silicon" and could be operated over wide ranges of supply voltages and temperatures. QDI circuits are also relatively easy to test as demonstrated in <ref> [16] </ref>. 1.2 Performance of Asynchronous Circuits Though the delays of the elements in a QDI circuit do not affect its functionality, they do have a direct bearing on the speed at which it operates.
Reference: [17] <author> C.A.R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM , 21(8) </journal> <pages> 666-677, </pages> <year> 1978. </year>
Reference-contexts: by using a syntax-directed compiler [5], though the results are usually too large for practical use. 2.1 CSP At the top-most level, the specification of the circuit to be synthesized is written as a concurrent program, using a language that is based on Hoare's model of Communicating Sequential Processes (CSP) <ref> [17] </ref>. A CSP program consists of one or more processes which operate in parallel and communicate with each other through channels. A channel connects two processes and the two ends of a channel are referred to as ports 1 . Example 2.1: Figure 2.1 shows a set of three processes.
Reference: [18] <author> W. Keister, A.E. Ritchie, and S.H. Washburn. </author> <title> The Design of Switching Circuits, </title> <address> D. </address> <publisher> Van Nostrand, </publisher> <address> Princeton, NJ, </address> <year> 1951. </year>
Reference-contexts: The concept of asynchronous circuits has been around since the fifties <ref> [18] </ref>. However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44]. Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, [10, 35, 12, 45, 39]).
Reference: [19] <author> J.C. Lagarias. </author> <title> The 3x+1 problem and its generalizations. </title> <journal> The American Mathematical Monthly 92 </journal> <pages> 3-23, </pages> <year> 1985. </year>
Reference-contexts: In particular, the Caltech approach, invented by A. J. Martin [30], has produced many successful CMOS circuits such as stacks, arbiters [27], routers, a 3x + 1 special-purpose processor <ref> [19] </ref>, a multiply-accumulator [40], a memory management unit [38], and, in 1988, the first asynchronous microprocessor [32].
Reference: [20] <author> C.E. Leiserson, F.M. Rose, and J.B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <editor> In R. Bryant, editor, </editor> <booktitle> Third Caltech Conference on Very Large Scale Integration, </booktitle> <pages> pp. 87-116, </pages> <publisher> Computer Science Press, </publisher> <address> Rockville, MD 1983. </address>
Reference-contexts: Consequently, optimization of synchronous systems is achieved by selecting an appropriate placement of the registers <ref> [20] </ref> and limiting the delays needed to transfer and manipulate data from one register to the next [23]. The analysis is further simplified by the fact that most of these stages are purely combinational and that there is no feedback [22].
Reference: [21] <author> T.-M. Lin and C.A. Mead. </author> <title> Signal delay in general RC networks. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> CAD-3(4):331-349, </volume> <year> 1984. </year> <month> 168 </month>
Reference-contexts: Some schemes for computing these delays are given in <ref> [13, 21, 7, 4, 9, 8] </ref>. 2.5 Datapaths In contrast to the control part, the datapath of a process can usually be implemented efficiently by combining members from a standard set of components such as registers, adders, completion trees, etc.
Reference: [22] <author> P.C. McGeer and R.K. Brayton. </author> <title> Provably correct critical paths. </title> <editor> In C.L. Seitz, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the Decennial Caltech Conference on VLSI, </booktitle> <pages> pp. 119-142, </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: The analysis is further simplified by the fact that most of these stages are purely combinational and that there is no feedback <ref> [22] </ref>. In a QDI circuit, however, the occurrences of signal transitions are not regulated by a clock.
Reference: [23] <author> D.P. Marple and A. El Gamal. </author> <title> Optimal selection of transistor sizes in digital VLSI circuits. </title> <editor> In P. Losleben, editor, </editor> <booktitle> Advanced Research in VLSI, Proceedings of the 1987 Stanford Conference, </booktitle> <pages> pp. 151-172. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: Consequently, optimization of synchronous systems is achieved by selecting an appropriate placement of the registers [20] and limiting the delays needed to transfer and manipulate data from one register to the next <ref> [23] </ref>. The analysis is further simplified by the fact that most of these stages are purely combinational and that there is no feedback [22]. In a QDI circuit, however, the occurrences of signal transitions are not regulated by a clock.
Reference: [24] <author> A.J. Martin. </author> <title> Asynchronous datapaths and the design of an asynchronous adder. In Formal Methods in System Design, </title> <publisher> Kluwer, </publisher> <year> 1992. </year>
Reference-contexts: Besides the elimination of the clock skew and synchronization failure problems [34], asynchronous circuits also are more tolerant to variations in physical parameters, can be more easily synthesized using systematic and modular approaches [31], have a higher potential for low-energy computation [42], and yield average-case instead of worst-case performance <ref> [24] </ref>. The concept of asynchronous circuits has been around since the fifties [18]. However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44]. <p> The raised signal is then lowered during the second half of the handshaking protocol. A dual-rail port is said to have a valid value if exactly one of the two data signals is high; it has a a neutral value if both signals are low <ref> [24] </ref>. For other encoding schemes, see [2, 46]. As written above, ireg cannot be implemented without adding an inverter on an isochronic branch. <p> A 3 At times, performance may be improved if the function block is combined with some of the registers; to simplify the presentation, no such optimization is applied. 18 possible protocol <ref> [24] </ref> for a function block is *[ [v (X )]; Y *; [n (X )]; Y + ] where v (X ) means that input port X has a valid value, n (X ) means that X has a neutral value, Y * means that output port Y is set to <p> Using dual-rail encoding, a non-binary port has a valid (or, alternatively, neutral) value when all the ports for communicating the constituent bits have valid (neutral) values. For the implementation of an adder function block, the reader is referred to <ref> [24] </ref>. 2.5.5 Zero-Checkers The zero-checker is an interesting function block in that it illustrates the use of guards with disjuncts that are not mutex. Its input is an n-bit integer X and its output is a Boolean variable Y that is false if and only if X is identically zero. <p> Using bit-wise exclusive-or (_) as the comparison operator, a cache miss occurs if (base +offset )_tag is non-zero. If the adder of <ref> [24] </ref> is used, then there is a variance in the times at which the bits of the above expression become valid, due to the rippling effect of the carry-chains.
Reference: [25] <author> A.J. Martin. </author> <title> An axiomatic definition of synchronization primitives. </title> <journal> Acta Informatica 16 </journal> <pages> 219-235, </pages> <year> 1981. </year>
Reference-contexts: Thus, the combined effect of the two statements is to assign to the variable x in q the value of e in p. Note that channels in CSP have no slack <ref> [25] </ref>: R!e in p cannot complete and the process suspends unless q executes the corresponding L?x , and vice versa. Thus, dataless channels can be used to enforce synchronization between processes. A communication action on such a channel is expressed by naming the corresponding port.
Reference: [26] <author> A.J. Martin. </author> <title> The design of a delay-insensitive microprocessor: An example of circuit synthesis by program transformation. </title> <editor> In M. Leeser and G. Brown, editors, </editor> <title> Hardware Specification, Verification and Synthesis: </title> <journal> Mathematical Aspects, </journal> <volume> vol. </volume> <booktitle> 408 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 244-259, </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The one-place buffer is already simple enough so that no process decomposition is necessary; see <ref> [26] </ref> for a larger example where this procedure is applied. 2.1.2 Separation of Control and Datapath As we shall see, the datapath of a process can be implemented in a fairly standard way. In contrast, its control needs to be systematically transformed from one level of description to the next.
Reference: [27] <author> A.J. Martin. </author> <title> The design of a self-timed circuit for distributed mutual exclusion. </title> <editor> In H. Fuchs, editor, </editor> <booktitle> 1985 Chapel Hill Conference on VLSI , pp. </booktitle> <pages> 247-260, </pages> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1985. </year>
Reference-contexts: Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, [10, 35, 12, 45, 39]). In particular, the Caltech approach, invented by A. J. Martin [30], has produced many successful CMOS circuits such as stacks, arbiters <ref> [27] </ref>, routers, a 3x + 1 special-purpose processor [19], a multiply-accumulator [40], a memory management unit [38], and, in 1988, the first asynchronous microprocessor [32].
Reference: [28] <author> A.J. Martin. </author> <title> The limitation to delay-insensitivity in asynchronous circuits. </title> <editor> In W.J. Dally, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the Sixth MIT Conference, </booktitle> <pages> pp. 263-278, </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: By construction, the circuits produced by the method are hazard-free and operate correctly regardless of the delays in the elements and wires, provided delays along different branches of certain forks, known as isochronic forks, are negligible. Such a circuit is said to be quasi-delay-insensitive (QDI) <ref> [28] </ref>. As we shall see, if each branch of a non-isochronic fork is explicitly modeled by a "wire operator" with arbitrary delay, then a QDI circuit is equivalent to a speed-independent circuit [37], where the delays on elements are arbitrary and those on wires are negligible.
Reference: [29] <author> A.J. Martin. </author> <title> The probe | an addition to communication primitives. </title> <journal> Information Processing Letters, </journal> <volume> 20(3) </volume> <pages> 125-130, </pages> <year> 1985. </year>
Reference-contexts: A communication action on such a channel is expressed by naming the corresponding port. Also, the probe of a port L, denoted L, is a Boolean value that is true only if the communication action L can be completed without suspension <ref> [29] </ref>.
Reference: [30] <author> A.J. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. In C.A.R. Hoare, editor, </title> <booktitle> UT Year of Programming Institute on Concurrent Programming, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA 1990. </address>
Reference-contexts: Introduction 1.1 Asynchronous VLSI Circuits Asynchronous VLSI circuits are those that do not use global clocks. Instead, synchronization among components is achieved through the generation and detection of request and acknowledgement signals. Asynchronous circuits have many advantages over traditional synchronous systems <ref> [41, 30] </ref>. <p> Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, [10, 35, 12, 45, 39]). In particular, the Caltech approach, invented by A. J. Martin <ref> [30] </ref>, has produced many successful CMOS circuits such as stacks, arbiters [27], routers, a 3x + 1 special-purpose processor [19], a multiply-accumulator [40], a memory management unit [38], and, in 1988, the first asynchronous microprocessor [32]. <p> Interested readers should refer to <ref> [30] </ref> for more details. <p> For any variable x , a PR for x " and a PR for x # are complementary and two complementary PR's are non-interfering if they are never both enabled. Many of the later results rely on the following observation made by Martin <ref> [30] </ref>: Under the stability of each PR and non-interference among complementary PR's, the concurrent execution of the PR's of a set is equivalent to the following sequential execution: *[ select a PR with a true guard; fire the PR ] where the selection is weakly fair.
Reference: [31] <author> A.J. Martin. </author> <title> Tomorrow's digital hardware will be asynchronous and ver-ified. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Algorithms, Software, Architecture, Information Processing 92, </booktitle> <volume> Vol. </volume> <publisher> I , Elsevier Science Publishers B.V., North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Asynchronous circuits have many advantages over traditional synchronous systems [41, 30]. Besides the elimination of the clock skew and synchronization failure problems [34], asynchronous circuits also are more tolerant to variations in physical parameters, can be more easily synthesized using systematic and modular approaches <ref> [31] </ref>, have a higher potential for low-energy computation [42], and yield average-case instead of worst-case performance [24]. The concept of asynchronous circuits has been around since the fifties [18]. However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44].
Reference: [32] <author> A.J. Martin, S.M. Burns, T.K. Lee, D. Borkovic, and P.J. Hazewindus. </author> <title> The design of an asynchronous microprocessor. </title> <editor> In C.L. Seitz, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the Decennial Caltech Conference on VLSI , pp. </booktitle> <pages> 351-373, </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: In particular, the Caltech approach, invented by A. J. Martin [30], has produced many successful CMOS circuits such as stacks, arbiters [27], routers, a 3x + 1 special-purpose processor [19], a multiply-accumulator [40], a memory management unit [38], and, in 1988, the first asynchronous microprocessor <ref> [32] </ref>. <p> and concurrent composition | which is weakly fair, i.e., every non-terminating component is executed infinitely often | is represented by "k." In addition, if A and B are two communication actions, then A * B is their coincident execution which 6 means that A and B are to complete together <ref> [32] </ref>.
Reference: [33] <author> A.J. Martin, S.M. Burns, T.K. Lee, D. Borkovic, and P.J. Hazewin-dus. </author> <title> The first asynchronous microprocessor: The test results. </title> <type> Technical Report, </type> <institution> CS-TR-86-6, California Institute of Technology, </institution> <year> 1989. </year>
Reference-contexts: J. Martin [30], has produced many successful CMOS circuits such as stacks, arbiters [27], routers, a 3x + 1 special-purpose processor [19], a multiply-accumulator [40], a memory management unit [38], and, in 1988, the first asynchronous microprocessor [32]. The favorable statistics of the microprocessor <ref> [33] </ref> and its portability to gallium arsenide technology [43] have contributed to the renewed interest in asynchronous designs. 1 The Martin synthesis method (which will be outlined in Chapter 2) systematically transforms a high-level specification, through a series of semantics-preserving steps, into a network of circuit elements.
Reference: [34] <author> C. Mead and L. Conway. </author> <title> Introduction to VLSI Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1980. </year>
Reference-contexts: Instead, synchronization among components is achieved through the generation and detection of request and acknowledgement signals. Asynchronous circuits have many advantages over traditional synchronous systems [41, 30]. Besides the elimination of the clock skew and synchronization failure problems <ref> [34] </ref>, asynchronous circuits also are more tolerant to variations in physical parameters, can be more easily synthesized using systematic and modular approaches [31], have a higher potential for low-energy computation [42], and yield average-case instead of worst-case performance [24].
Reference: [35] <author> T.H.-Y. Meng, R.W. Brodersen, and D.G. Messerschmitt. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 8(11) </volume> <pages> 1185-1205, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44]. Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, <ref> [10, 35, 12, 45, 39] </ref>). In particular, the Caltech approach, invented by A. J.
Reference: [36] <author> R.E. Miller. </author> <title> Switching Theory, Vol. </title> <publisher> 2 . Wiley, </publisher> <address> New York, NY, </address> <year> 1965. </year>
Reference-contexts: Occasionally, it is possible to change some of the guards to yield standard operators such as OR-gates and Muller C-elements <ref> [36] </ref> | this process is known as symmetrization.
Reference: [37] <author> D.E. Muller and W.S. Bartky. </author> <title> A theory of asynchronous circuits. </title> <booktitle> In The Annals of the Computation Laboratory of Harvard University. Volume XXIX: Proceedings of an International Symposium on the Theory of Switching, Part I ., pp. </booktitle> <pages> 204-243, </pages> <year> 1959. </year>
Reference-contexts: Such a circuit is said to be quasi-delay-insensitive (QDI) [28]. As we shall see, if each branch of a non-isochronic fork is explicitly modeled by a "wire operator" with arbitrary delay, then a QDI circuit is equivalent to a speed-independent circuit <ref> [37] </ref>, where the delays on elements are arbitrary and those on wires are negligible. <p> These notions will be formally defined below. The concept of cumulative states (but not indexed events) has been used in <ref> [37] </ref> whose authors, using more abstract techniques, have established results similar to some of those given in this chapter. However, developing these results under our approach corresponds more closely to the operational nature of PR sets and allows for extensions that will be presented in the subsequent chapters. <p> So, the set of variables that occur in the path is a function of and not of . Thus, for reference, we borrow the following definition from <ref> [37] </ref>. Definition: For a state offset , the spanning set of is span () = fk : [k] 6= 0 : x k g. Note that in (5.23), span () is determined by the events in A. <p> These observations mean that the 4 In <ref> [37] </ref>, it has only been shown that the sets of variables spanned by the periods of cycles starting from a given state are disjoint. 95 original PR set contains two or more sub-components which operate indepen-dently of each other, except, perhaps, for some initial transient interactions.
Reference: [38] <author> C.J. Myers and A.J. Martin. </author> <title> The design of an asynchronous memory management unit. </title> <type> Technical Report, </type> <institution> CS-TR-93-30, California Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: In particular, the Caltech approach, invented by A. J. Martin [30], has produced many successful CMOS circuits such as stacks, arbiters [27], routers, a 3x + 1 special-purpose processor [19], a multiply-accumulator [40], a memory management unit <ref> [38] </ref>, and, in 1988, the first asynchronous microprocessor [32].
Reference: [39] <author> C.J. Myers and T. H.-Y. Meng. </author> <title> Synthesis of timed asynchronous circuits. </title> <booktitle> IEEE International Conference on Computer Design, </booktitle> <year> ICCD-1992 </year> <month> , </month> <year> 1992. </year>
Reference-contexts: However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44]. Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, <ref> [10, 35, 12, 45, 39] </ref>). In particular, the Caltech approach, invented by A. J.
Reference: [40] <author> C.D. Nielsen and A.J. Martin. </author> <title> Design of a delay-insensitive multiply-accumulate unit. </title> <journal> Integration | The VLSI Journal , 15(3) </journal> <pages> 291-311, </pages> <year> 1993. </year> <month> 170 </month>
Reference-contexts: In particular, the Caltech approach, invented by A. J. Martin [30], has produced many successful CMOS circuits such as stacks, arbiters [27], routers, a 3x + 1 special-purpose processor [19], a multiply-accumulator <ref> [40] </ref>, a memory management unit [38], and, in 1988, the first asynchronous microprocessor [32].
Reference: [41] <author> C.L. Seitz. </author> <title> System Timing. Chapter 7 in Carver Mead and Lynn Conway, Introduction to VLSI Systems, </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1980. </year>
Reference-contexts: Introduction 1.1 Asynchronous VLSI Circuits Asynchronous VLSI circuits are those that do not use global clocks. Instead, synchronization among components is achieved through the generation and detection of request and acknowledgement signals. Asynchronous circuits have many advantages over traditional synchronous systems <ref> [41, 30] </ref>.
Reference: [42] <author> J.A. Tierno. </author> <title> An Energy Complexity Model for VLSI Computations. </title> <type> Ph.D. thesis, </type> <institution> California Institute of Technology, </institution> <year> 1995. </year>
Reference-contexts: Besides the elimination of the clock skew and synchronization failure problems [34], asynchronous circuits also are more tolerant to variations in physical parameters, can be more easily synthesized using systematic and modular approaches [31], have a higher potential for low-energy computation <ref> [42] </ref>, and yield average-case instead of worst-case performance [24]. The concept of asynchronous circuits has been around since the fifties [18]. However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44].
Reference: [43] <author> J.A. Tierno, A.J. Martin, D. Borkovic, and T.K. Lee. </author> <title> A 100-MIPS GaAs asynchronous microprocessor. </title> <journal> IEEE Design & Test of Computers, </journal> <volume> 11(2) </volume> <pages> 43-49, </pages> <year> 1994. </year>
Reference-contexts: The favorable statistics of the microprocessor [33] and its portability to gallium arsenide technology <ref> [43] </ref> have contributed to the renewed interest in asynchronous designs. 1 The Martin synthesis method (which will be outlined in Chapter 2) systematically transforms a high-level specification, through a series of semantics-preserving steps, into a network of circuit elements.
Reference: [44] <author> S.H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, </publisher> <address> New York, NY, </address> <year> 1969. </year>
Reference-contexts: The concept of asynchronous circuits has been around since the fifties [18]. However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs <ref> [44] </ref>. Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, [10, 35, 12, 45, 39]). In particular, the Caltech approach, invented by A. J.
Reference: [45] <author> K. van Berkel. </author> <title> Handshake Circuits: An Asynchronous Architecture for VLSI Programming. </title> <booktitle> International Series on Parallel Computation 5, </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1993. </year>
Reference-contexts: However, it has not gained popularity until recently because of the difficulties involved in removing hazards from early designs [44]. Since then, several methodologies that generate functional asynchronous circuits under various timing assumptions have been developed (for example, <ref> [10, 35, 12, 45, 39] </ref>). In particular, the Caltech approach, invented by A. J.
Reference: [46] <author> T. Verhoeff. </author> <title> Delay-insensitive codes: An overview. </title> <type> Technical Report 87/04, </type> <institution> Department of Mathematics and Computing Science, Eindhoven Institute of Technology, </institution> <year> 1987. </year> <month> 171 </month>
Reference-contexts: A dual-rail port is said to have a valid value if exactly one of the two data signals is high; it has a a neutral value if both signals are low [24]. For other encoding schemes, see <ref> [2, 46] </ref>. As written above, ireg cannot be implemented without adding an inverter on an isochronic branch.
References-found: 46

