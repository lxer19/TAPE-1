URL: http://www.cse.psu.edu/~vaidya/papers/tech-rep-ftcs.ps
Refering-URL: http://www.cse.psu.edu/~vaidya/publications.html
Root-URL: http://www.cse.psu.edu
Email: E-mail: fvaidya, das, anandg@cse.psu.edu  
Title: A Testbed for Evaluation of Fault-Tolerant Routing in Multiprocessor Interconnection Networks 1  
Author: Aniruddha S. Vaidya Chita R. Das Anand Sivasubramaniam 
Keyword: Fault-Tolerant Routing, Interconnection Network, Network Simulation, Path-Selection Heuristics, Router Design  
Address: Park, PA 16802  
Affiliation: Department of Computer Science and Engineering The Pennsylvania State University 220 Pond Laboratory University  
Pubnum: Technical Report No: CSE98001  
Abstract: With parallel machines increasingly taking on critical and complex applications, it is important to make them dependable to ensure their commercial success. Fault-tolerance in the network to accommodate link and node failures is an important step towards this goal. This can be achieved by employing cost-effective fault-tolerant algorithms. However, despite substantial efforts on the theoretical front in developing fault-tolerant routing techniques and architectures, these ideas have not manifested themselves in many commercial platforms. The ramifications of providing fault-tolerant routing in terms of cost and performance is still not clear to the computer architect. Such an insight can only be gained through detailed analysis of a design with realistic workloads. Since no current evaluation platform supports this, previous research on fault-tolerant routing has used synthetic workloads for analyzing performance. This paper presents a comprehensive evaluation testbed for the interconnection network and the routing algorithm using real applications. The testbed is flexible enough to implement numerous fault tolerant algorithms, and allows the system architect to study the cost versus performance tradeoffs for a range of network parameters. We illustrate its use with one fault-tolerant algorithm and analyze the performance of four shared memory applications with different fault conditions. We also show how the testbed can be used to drive future research in fault-tolerant routing algorithms and architectures, by proposing and evaluating a novel architectural enhancement to the network router called path selection heuristics (PSH). The proposed Least Recently Used (LRU) PSH is shown to give the best performance in the presence of faults. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. J. Dally, </author> <title> Virtual-Channel Flow Control, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. </pages> <address> 194205, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Most machines use a direct network topology, especially a low-dimensional network from scalability standpoint. Faster wormhole switching and multiplexing of the physical channel bandwidth with virtual channels (VCs) <ref> [1] </ref> are implemented in current routers to improve network performance [2, 3, 4]. To enhance the performance further, adaptivity in message routing is also supported in the Cray T3E router [3]. These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. <p> In a more complex router that supports virtual channels, a virtual channel de-multiplexor unit precedes the input flit buffers and a virtual channel multiplexor precedes the output port of the router <ref> [1, 23] </ref>. In an adaptive router, the routing decision block may have a choice of crossbar output ports to route a message. A path selection function is used in the routing decision block to select one of multiple candidate output ports.
Reference: [2] <author> M. Galles, </author> <title> Scalable Pipelined Interconnect for Distributed Endpoint Routing : The SGI SPIDER Chip, </title> <booktitle> in Proc. Symp. High Performance Interconnects (Hot Interconnects 4), </booktitle> <pages> pp. 141146, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Most machines use a direct network topology, especially a low-dimensional network from scalability standpoint. Faster wormhole switching and multiplexing of the physical channel bandwidth with virtual channels (VCs) [1] are implemented in current routers to improve network performance <ref> [2, 3, 4] </ref>. To enhance the performance further, adaptivity in message routing is also supported in the Cray T3E router [3]. These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. <p> The last section summarizes the research contributions. 2 Network Architecture 2.1 Router Architecture In this paper our discussion focuses on wormhole-switched routers. Such routers are widely used in several interconnection networks. Examples of recent routers belonging to this class are the SGI SPIDER <ref> [2] </ref>, Intel Cavallino [4], and Cray T3E [3] routers. The discussion below assumes familiarity with wormhole routing terminology [22]. Crossbar Routing Decision Block Arbiter Flit Decoder Flit Buffer Sync. <p> The cumulative delay through the router that is experienced by a message flit is determined by the individual delays of the functional units within the router. However, in order to increase the throughput of the router, modern routers use a pipelined architecture <ref> [2, 3, 15] </ref>. Tail/Middle Flit Bypass Path Table Lookup Selection, Arbitration Xbar Route, Buffering VC Mux, Sync Header Flit Path Sync, DeMux, Buffer, Decode The pipelined router model used in this study is given in Fig. 2. <p> Contention for resources between the parallel pipes can occur only in the crossbar arbitration and virtual channel multiplexing stages. 2.2 Programmable Routing Tables To support flexibility in network designs and routing algorithms, some recent routers use table-based routing <ref> [2, 3] </ref>. The routing decision block in these routers is implemented as a programmable lookup-table as shown in Fig. 3. The table is indexed by the input port and destination node address and the corresponding table entry determines the crossbar output port to route the message on.
Reference: [3] <author> S. L. Scott and G. M. Thorson, </author> <title> The Cray T3E Network: Adaptive Routing in a High Performance 3D Torus, </title> <booktitle> in Proc. Symp. High Performance Interconnects (Hot Interconnects 4), </booktitle> <pages> pp. 147156, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Most machines use a direct network topology, especially a low-dimensional network from scalability standpoint. Faster wormhole switching and multiplexing of the physical channel bandwidth with virtual channels (VCs) [1] are implemented in current routers to improve network performance <ref> [2, 3, 4] </ref>. To enhance the performance further, adaptivity in message routing is also supported in the Cray T3E router [3]. These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. <p> Faster wormhole switching and multiplexing of the physical channel bandwidth with virtual channels (VCs) [1] are implemented in current routers to improve network performance [2, 3, 4]. To enhance the performance further, adaptivity in message routing is also supported in the Cray T3E router <ref> [3] </ref>. These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]. <p> Such routers are widely used in several interconnection networks. Examples of recent routers belonging to this class are the SGI SPIDER [2], Intel Cavallino [4], and Cray T3E <ref> [3] </ref> routers. The discussion below assumes familiarity with wormhole routing terminology [22]. Crossbar Routing Decision Block Arbiter Flit Decoder Flit Buffer Sync. <p> The cumulative delay through the router that is experienced by a message flit is determined by the individual delays of the functional units within the router. However, in order to increase the throughput of the router, modern routers use a pipelined architecture <ref> [2, 3, 15] </ref>. Tail/Middle Flit Bypass Path Table Lookup Selection, Arbitration Xbar Route, Buffering VC Mux, Sync Header Flit Path Sync, DeMux, Buffer, Decode The pipelined router model used in this study is given in Fig. 2. <p> Contention for resources between the parallel pipes can occur only in the crossbar arbitration and virtual channel multiplexing stages. 2.2 Programmable Routing Tables To support flexibility in network designs and routing algorithms, some recent routers use table-based routing <ref> [2, 3] </ref>. The routing decision block in these routers is implemented as a programmable lookup-table as shown in Fig. 3. The table is indexed by the input port and destination node address and the corresponding table entry determines the crossbar output port to route the message on.
Reference: [4] <author> J. Carbonaro and F. Verhoorn, Cavallino: </author> <title> The Teraflops Router and NIC, </title> <booktitle> in Proc. Symp. High Performance Interconnects (Hot Interconnects 4), </booktitle> <pages> pp. 157160, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Most machines use a direct network topology, especially a low-dimensional network from scalability standpoint. Faster wormhole switching and multiplexing of the physical channel bandwidth with virtual channels (VCs) [1] are implemented in current routers to improve network performance <ref> [2, 3, 4] </ref>. To enhance the performance further, adaptivity in message routing is also supported in the Cray T3E router [3]. These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. <p> The last section summarizes the research contributions. 2 Network Architecture 2.1 Router Architecture In this paper our discussion focuses on wormhole-switched routers. Such routers are widely used in several interconnection networks. Examples of recent routers belonging to this class are the SGI SPIDER [2], Intel Cavallino <ref> [4] </ref>, and Cray T3E [3] routers. The discussion below assumes familiarity with wormhole routing terminology [22]. Crossbar Routing Decision Block Arbiter Flit Decoder Flit Buffer Sync.
Reference: [5] <author> D. H. Linder and J. C. Harden, </author> <title> An Adaptive and Fault-Tolerant Wormhole Routing Strategy for k-ary n-cubes, </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 40, </volume> <pages> pp. 212, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 .
Reference: [6] <author> T. C. Lee and J. P. Hayes, </author> <title> A Fault-Tolerant Communication Scheme for Hypercube Computers, </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 41, </volume> <pages> pp. 725737, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 . <p> Adding other fault-tolerant routing schemes is part of our planned future work. Configuration of the routing table itself needs the routing algorithm and the location of faults for links or nodes that is used to mark regions of the network as required by the algorithm <ref> [6, 9] </ref>. Both the number and the location of these faults for links or nodes can be specified.
Reference: [7] <author> C. J. Glass and L. M. Ni, </author> <title> Fault-Tolerant Wormhole Routing in Meshes, </title> <booktitle> in Proc. Intl. Symp. on Fault-Tolerant Computing, </booktitle> <pages> pp. 240249, </pages> <year> 1993. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 . <p> This study spawns several related problems which can help in making more conclusive design statements about fault-tolerant routing algorithms. First, there is a need to evaluate and compare different classes of fault-tolerant routing algorithms (oblivious [8], partially adaptive <ref> [7] </ref> and fully adaptive [9]) with real workloads. The efficiency of implementing them using a routing table as well as that of their virtual channel usage needs investigation. Further, it would be interesting to study the impact of the presence of prioritized messages in a network with fault-tolerant routing.
Reference: [8] <author> R. V. Boppana and S. Chalasani, </author> <title> Fault-Tolerant Wormhole Routing for Mesh Networks, </title> <journal> IEEE Trans. on Computers, </journal> <pages> pp. 848864, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 . <p> This scheme can be implemented on a router without affecting its cycle time. This study spawns several related problems which can help in making more conclusive design statements about fault-tolerant routing algorithms. First, there is a need to evaluate and compare different classes of fault-tolerant routing algorithms (oblivious <ref> [8] </ref>, partially adaptive [7] and fully adaptive [9]) with real workloads. The efficiency of implementing them using a routing table as well as that of their virtual channel usage needs investigation.
Reference: [9] <author> Y. M. Boura and C. R. Das, </author> <title> Fault-Tolerant Routing in Mesh Networks, </title> <booktitle> in Proc. Intl. Conference on Parallel Processing, </booktitle> <volume> vol. I, </volume> <pages> pp. 106117, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 . <p> A third scheme, MIN-MUX (Minimal VC Multiplexing) [20] chooses the physical channel that has the least number of virtual channels in use at that time. We compare the performance of these three dynamic path selection heuristics with that of a commonly used static path selection function (STATIC-XY) <ref> [21, 9] </ref> using applications and synthetic workloads. Performance results show that the proposed LRU scheme consistently improves network performance, with increased gains at moderate to high loads. <p> A path selection function is used to select one of multiple valid and non-busy crossbar outputs. 2.3 Path Selection Heuristics Various criteria can be used to select amongst multiple non-busy candidate output ports provided by the routing table. Amongst the commonly used path selection functions are dimension-order selection <ref> [21, 9] </ref> and random [24]. These criteria are static in the sense that they do not make use of current network conditions to select a path which is likely to experience the lowest contention. <p> Adding other fault-tolerant routing schemes is part of our planned future work. Configuration of the routing table itself needs the routing algorithm and the location of faults for links or nodes that is used to mark regions of the network as required by the algorithm <ref> [6, 9] </ref>. Both the number and the location of these faults for links or nodes can be specified. <p> This study spawns several related problems which can help in making more conclusive design statements about fault-tolerant routing algorithms. First, there is a need to evaluate and compare different classes of fault-tolerant routing algorithms (oblivious [8], partially adaptive [7] and fully adaptive <ref> [9] </ref>) with real workloads. The efficiency of implementing them using a routing table as well as that of their virtual channel usage needs investigation. Further, it would be interesting to study the impact of the presence of prioritized messages in a network with fault-tolerant routing.
Reference: [10] <author> A. A. Chien and J. H. Kim, </author> <title> Planar-Adaptive Routing: Low-cost Adaptive Networks for Multiprocessors, </title> <journal> Journal of the ACM, </journal> <volume> vol. 40, </volume> <pages> pp. 91123, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 .
Reference: [11] <author> J. Duato, </author> <title> A Theory of Fault-Tolerant Routing in Wormhole Networks, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 8, </volume> <pages> pp. 790802, </pages> <month> August </month> <year> 1997. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 . <p> While the proposed platform can be used to study any fault-tolerant routing algorithm, in this paper we implement Duato's Double East-Last West-Last (DELWL) fault-tolerant routing algorithm <ref> [11] </ref> on a 2-D mesh architecture and analyze the performance of this algorithm under a spectrum of faulty conditions. <p> These routing schemes use deterministic or adaptive paths and may guarantee deadlock-freedom with additional virtual channels. However, all fault-tolerant routing schemes require mis-routing capability <ref> [11] </ref>. A good fault-tolerant routing algorithm should be simple (have low implementation cost), use few virtual channels, support maximum adaptivity in routing and use minimal paths when possible. <p> All proposed fault-tolerant routing schemes exhibit a trade-off between the degree of adaptivity, degree of fault-tolerance and the number of VCs required to guarantee deadlock-freedom <ref> [11] </ref>. Since it is not feasible to study a spectrum of algorithms in this paper, we selected a scheme based on some criteria. <p> For dealing with certain special cases (faults at the edges of the mesh), two extra West-Last and East-Last virtual networks are added to derive the final fault-tolerant routing scheme. Details of this algorithm are discussed in <ref> [11] </ref>. <p> It could be deterministic, adaptive or fault-tolerant. Thus, it is rather straightforward to vary the routing algorithm in our testbed. Currently, the PROUD simulator supports deterministic XY, Duato's fully adaptive [20] and Duato's fault-tolerant <ref> [11] </ref> routing algorithms. Adding other fault-tolerant routing schemes is part of our planned future work. Configuration of the routing table itself needs the routing algorithm and the location of faults for links or nodes that is used to mark regions of the network as required by the algorithm [6, 9].
Reference: [12] <author> M.-S. Chen and K. G. Shin, </author> <title> Adaptive Fault-Tolerant Routing in Hypercube Mutlicomputers, </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 39, </volume> <pages> pp. 14061416, </pages> <month> December </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 .
Reference: [13] <author> P. T. Gaughan and S. Yalamanchili, </author> <title> A Family of Fault Tolerant Routing Protocols for Direct Multiprocessor Networks, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <pages> pp. 482497, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 .
Reference: [14] <author> W. J. Dally and H. Aoki, </author> <title> Deadlock-Free Adaptive Routing in Multicomputer Network using Virtual Channels, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 466475, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: These mechanisms supplement each other in enhancing performance, but do not directly contribute towards fault-tolerance. In order to circumvent router (node) and link faults, a plethora of fault-tolerant routing algorithms have been proposed for direct networks <ref> [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] </ref>. However, despite substantial efforts on the theoretical front, these ideas have not manifested themselves in many commercial platforms 2 .
Reference: [15] <author> W. J. Dally, L. R. Dennison, D. Harris, K. Kan, and T. Xanthopoulos, </author> <title> Arhitecture and Implementation of the Reliable Router, </title> <booktitle> in Proc. of Hot Interconnects II, </booktitle> <address> (Stanford University, Palo Alto, CA), </address> <month> August </month> <year> 1994. </year>
Reference-contexts: The effect of a fault-tolerant routing algorithm on the latency of messages generated by an appli 2 Although the Intel Cavallino, SGI Spider and Cray T3E routers have some fault-tolerance features they do not implement fault-tolerant routing. The MIT Reliable Router <ref> [15] </ref>, which does implement fault-tolerant routing is a noncommercial router. cation, and its resulting impact on the overall execution time is not intuitively clear. <p> The cumulative delay through the router that is experienced by a message flit is determined by the individual delays of the functional units within the router. However, in order to increase the throughput of the router, modern routers use a pipelined architecture <ref> [2, 3, 15] </ref>. Tail/Middle Flit Bypass Path Table Lookup Selection, Arbitration Xbar Route, Buffering VC Mux, Sync Header Flit Path Sync, DeMux, Buffer, Decode The pipelined router model used in this study is given in Fig. 2.
Reference: [16] <author> A. Sivasubramaniam, A. Singla, U. Ramachandran, and H. Venkateswaran, </author> <title> An Approach to Scalability Study of Shared Memory Parallel Systems, </title> <booktitle> in Proceedings of the ACM SIGMET-RICS 1994 Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pp. 171180, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The processor and memory subsystems have been evaluated in detail not just with synthetic workloads but also with several real world applications. Execution-driven simulation has been a popular technique for evaluating architectural designs for these two hardware components with application workloads <ref> [16] </ref>. Interconnection network design and evaluation has not enjoyed this luxury until recently, as studying the network with applications also requires the detailed simulation of the processor and memory hierarchy components, slowing down the simulation tremendously. A few recent studies [17, 18, 19] have evaluated interconnection networks with application workloads. <p> We use four shared memory applications with diverse communication characteristics for the evaluations. The network simulator (PROUD) works in conjunction with an execution-driven simulator (SPASM <ref> [16] </ref>) to analyze the shared memory applications. The performance results indicate that the application execution time increases as the number of node faults increases. However, the increase is minimal for a smaller number of faulty nodes. <p> Even though nothing precludes the variation of the network topology for the PROUD simulator (as long as the routing algorithm and the mapping is given for an alternate topology), we have used a 2-D mesh for all the studies in this paper. 3.1 SPASM SPASM <ref> [16] </ref> is an execution-driven simulator developed to study parallel applications and architectures. SPASM has been used as a front-end in this testbed to simulate the execution of applications on shared memory platforms and generate network messages. <p> The applications are 1-D Fast Fourier Transform (FFT), Integer Sort (IS), Cholesky Factorization (Cholesky), and Hierarchical N-Body Simulation (NBody). We do not discuss the characteristics of these applications due to space limitations and the details can be found in <ref> [16] </ref>. The mesh size used in the experiment is an 8 fi 5 (40-node) system. All four applications actually require 32-nodes (8 fi 4 mesh) in a fault-free case. These logical nodes are mapped to physical nodes using the mapping functions shown in Fig. 5.
Reference: [17] <author> A. S. Vaidya, A. Sivasubramaniam, and C. R. Das, </author> <title> Performance Benefits of Virtual Channels and Adaptive Routing: An Application-Driven Study, </title> <booktitle> in Proc. 11th ACM Intl. Conf. on Supercomputing, </booktitle> <address> (Vienna, Austria), </address> <month> July </month> <year> 1997. </year>
Reference-contexts: Interconnection network design and evaluation has not enjoyed this luxury until recently, as studying the network with applications also requires the detailed simulation of the processor and memory hierarchy components, slowing down the simulation tremendously. A few recent studies <ref> [17, 18, 19] </ref> have evaluated interconnection networks with application workloads. However, none of the studies have analyzed the impact of network faults on application performance and for that matter the behavior of fault-tolerant routing algorithms in a realistic setup.
Reference: [18] <author> A. Kumar and L. N. Bhuyan, </author> <title> Evaluating Virtual Channels for Cache-Coherent Shared-Memory Multiprocessors, </title> <booktitle> in Proc. 10th ACM Intl. Conf. on Supercomputing, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Interconnection network design and evaluation has not enjoyed this luxury until recently, as studying the network with applications also requires the detailed simulation of the processor and memory hierarchy components, slowing down the simulation tremendously. A few recent studies <ref> [17, 18, 19] </ref> have evaluated interconnection networks with application workloads. However, none of the studies have analyzed the impact of network faults on application performance and for that matter the behavior of fault-tolerant routing algorithms in a realistic setup.
Reference: [19] <author> D. Dai and D. K. Panda, </author> <title> How Much Does Network Contention Affect Distributed Shared Memory Performance?, </title> <booktitle> in Proceedings of the 1997 International Conference for Parallel Processing (ICPP '97), </booktitle> <address> (Bloomingdale, IL), </address> <pages> pp. 454461, </pages> <month> August </month> <year> 1997. </year>
Reference-contexts: Interconnection network design and evaluation has not enjoyed this luxury until recently, as studying the network with applications also requires the detailed simulation of the processor and memory hierarchy components, slowing down the simulation tremendously. A few recent studies <ref> [17, 18, 19] </ref> have evaluated interconnection networks with application workloads. However, none of the studies have analyzed the impact of network faults on application performance and for that matter the behavior of fault-tolerant routing algorithms in a realistic setup.
Reference: [20] <author> J. Duato, </author> <title> A New Theory of Deadlock-Free Adaptive Routing in Wormhole Networks, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 13201331, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: We evaluate four schemes that can be used for designing the predictors. The first two that we propose, LFU and LRU, utilize channel usage history to route messages. A third scheme, MIN-MUX (Minimal VC Multiplexing) <ref> [20] </ref> chooses the physical channel that has the least number of virtual channels in use at that time. We compare the performance of these three dynamic path selection heuristics with that of a commonly used static path selection function (STATIC-XY) [21, 9] using applications and synthetic workloads. <p> We propose two such dynamic path selection heuristics, called LRU and LFU and compare them against STATIC-XY and another dynamic scheme referred to as MIN-MUX in this paper, which uses the physical channel with the minimum degree of VC-multiplexing <ref> [20] </ref>. Least Frequently Used (LFU) PSH: This PSH selects the output port (among the candidates) with the lowest usage count until that time. It works on the premise that if link utilizations are balanced, it will result in improved network performance. <p> It could be deterministic, adaptive or fault-tolerant. Thus, it is rather straightforward to vary the routing algorithm in our testbed. Currently, the PROUD simulator supports deterministic XY, Duato's fully adaptive <ref> [20] </ref> and Duato's fault-tolerant [11] routing algorithms. Adding other fault-tolerant routing schemes is part of our planned future work.
Reference: [21] <author> Y. M. Boura and C. R. Das, </author> <title> Efficient Fully Adaptive Wormhole Routing in n-dimensional Meshes, </title> <booktitle> in Proc. Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 589596, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: A third scheme, MIN-MUX (Minimal VC Multiplexing) [20] chooses the physical channel that has the least number of virtual channels in use at that time. We compare the performance of these three dynamic path selection heuristics with that of a commonly used static path selection function (STATIC-XY) <ref> [21, 9] </ref> using applications and synthetic workloads. Performance results show that the proposed LRU scheme consistently improves network performance, with increased gains at moderate to high loads. <p> A path selection function is used to select one of multiple valid and non-busy crossbar outputs. 2.3 Path Selection Heuristics Various criteria can be used to select amongst multiple non-busy candidate output ports provided by the routing table. Amongst the commonly used path selection functions are dimension-order selection <ref> [21, 9] </ref> and random [24]. These criteria are static in the sense that they do not make use of current network conditions to select a path which is likely to experience the lowest contention.
Reference: [22] <author> L. M. Ni and P. K. McKinley, </author> <title> A Survey of Wormhole Routing Techniques in Direct Networks, </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 6276, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Such routers are widely used in several interconnection networks. Examples of recent routers belonging to this class are the SGI SPIDER [2], Intel Cavallino [4], and Cray T3E [3] routers. The discussion below assumes familiarity with wormhole routing terminology <ref> [22] </ref>. Crossbar Routing Decision Block Arbiter Flit Decoder Flit Buffer Sync.
Reference: [23] <author> A. S. Vaidya, A. Sivasubramaniam, and C. R. Das, </author> <title> The PROUD Pipelined Router Architectures for High Performance Networks, </title> <type> Tech. Rep. </type> <institution> CSE97007, Department of Computer Science and Engineering, The Pennsylvania State University, 220 Pond Lab, University Park, </institution> <address> PA, </address> <year> 1997. </year>
Reference-contexts: In a more complex router that supports virtual channels, a virtual channel de-multiplexor unit precedes the input flit buffers and a virtual channel multiplexor precedes the output port of the router <ref> [1, 23] </ref>. In an adaptive router, the routing decision block may have a choice of crossbar output ports to route a message. A path selection function is used in the routing decision block to select one of multiple candidate output ports.
Reference: [24] <author> S. Konstantinidou and L. Snyder, </author> <title> The Chaos Router, </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 43, </volume> <pages> pp. 13861397, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Amongst the commonly used path selection functions are dimension-order selection [21, 9] and random <ref> [24] </ref>. These criteria are static in the sense that they do not make use of current network conditions to select a path which is likely to experience the lowest contention. In this paper, the dimension-order selection is referred to as STATIC-XY since it prefers the X-dimension first.
Reference: [25] <author> C. J. Glass and L. M. Ni, </author> <title> A Turn Model for Adaptive Routing, </title> <booktitle> in Proc. Intl. Symp. on Computer Architecture, </booktitle> <pages> pp. 278287, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: DELWL uses four VCs for deadlock-free fault-tolerant routing in n-dimensional meshes. The algorithm combines two partially adaptive routing algorithms, the West-Last and East-Last algorithms derived from the Turn Model <ref> [25] </ref> to provide fully adaptive routing with two VCs. This algorithm is then augmented to allow for non-minimal paths and 180 o turns to provide fault-tolerance.
Reference: [26] <author> E. A. Brewer, C. N. Dellarocas, A. Colbrook, and W. E. Weihl, </author> <title> PROTEUS : A High-Performance Parallel-Architecture Simulator, </title> <type> Tech. Rep. </type> <institution> MIT-LCS-TR-516, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: SPASM has been used as a front-end in this testbed to simulate the execution of applications on shared memory platforms and generate network messages. As with several recent simulators <ref> [26, 27] </ref>, SPASM does not simulate the details of instruction execution. Instead, it only simulates instructions that may potentially involve network access such as LOADs/STOREs, and synchronization calls. The rest of the instructions execute at the speed of the native processor.
Reference: [27] <author> H. Davis, S. R. Goldschmidt, and J. L. Hennessy, </author> <title> Multiprocessor Simulation and Tracing Using Tango, </title> <booktitle> in Proceedings of the 1991 International Conference on Parallel Processing, pp. </booktitle> <volume> II 99 107, </volume> <year> 1991. </year>
Reference-contexts: SPASM has been used as a front-end in this testbed to simulate the execution of applications on shared memory platforms and generate network messages. As with several recent simulators <ref> [26, 27] </ref>, SPASM does not simulate the details of instruction execution. Instead, it only simulates instructions that may potentially involve network access such as LOADs/STOREs, and synchronization calls. The rest of the instructions execute at the speed of the native processor.
References-found: 27

