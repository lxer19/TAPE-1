URL: http://www.cs.washington.edu/research/projects/safety/www/papers/re97.ps
Refering-URL: http://www.cs.washington.edu/research/projects/safety/www/papers.html
Root-URL: 
Title: Integrated Safety Analysis of Requirements Specifications  
Author: Francesmary Modugno, Nancy G. Leveson, Jon D. Reese Kurt Partridge, and Sean D. Sandys 
Keyword: software safety, software safety analysis, software requirements specification.  
Address: Seattle, WA 98195-2350  
Affiliation: Computer Science and Engineering University of Washington  
Abstract: This paper describes an integrated approach to safety analysis of software requirements and demonstrates the feasibility and utility of applying the individual techniques and the integrated approach on the requirements specification of a guidance system for a high-speed civil transport being developed at NASA Ames. Each analysis found different types of errors in the specification; thus together the techniques provided a more comprehensive safety analysis than any individual technique. We also discovered that the more the analyst knew about the application and the model, the more successful they were in finding errors. Our findings imply that the most effective safety-analysis tools will assist rather than replace the analyst. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.K. Andow, </author> <title> F.P. Lees, and C.P. Murphy. The Propagation of Faults in Process Plants: A State of the Art Review. </title> <booktitle> 7th International Symposium on Chemical Process Hazards, </booktitle> <institution> University of Manchester, </institution> <year> 1980. </year>
Reference-contexts: She found the process to be labor intensive and required in-depth understanding of the model. In addition, the trees grew quickly and the presentation quickly became unwieldy. This same problem has been noted with other types of automated analysis applied to hardware models <ref> [1] </ref>. As an example, consider the hazard of the landing gear not deploying during a minimum-time approach landing. The top node of the generated tree thus represents the case in which the system is in the minimum-time landing mode and the gears are up.
Reference: [2] <author> M.P.E. Heimdahl and N.G. Leveson. </author> <title> Completeness and Consistency Checking of Software Requirements. </title> <journal> In IEEE Transactions on Software Engineering, </journal> <volume> vol. 22, no. 6, </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: Leveson and colleagues have been developing a series of techniques and tools to analyze safety-critical software <ref> [2, 8, 9, 10, 12] </ref>. We have demonstrated the techniques and shown that each can be effective individually for the analysis of safety-critical systems. <p> Leveson and colleagues have been developing a series of techniques and tools to analyze safety-critical software [2, 8, 9, 10, 12]. We have demonstrated the techniques and shown that each can be effective individually for the analysis of safety-critical systems. For example, Heimdahl <ref> [2] </ref> found several sources of dangerous incompleteness and nondeterminism in the specification of TCAS II (Traffic Alert and Collision Avoidance System), an airborne collision avoidance system required on all U.W. aircraft carrying more than 30 passengers. <p> In some cases the criteria can be enforced by the syntax of the specification language, while in other cases, the criteria can be checked by manual inspection or with the assistance of automated tools. For example, Heimdahl <ref> [2] </ref> has automated the checking of RSML specifications for two of the 47 criteria, i.e., those to ensure robustness and nondeterminism.
Reference: [3] <author> C.L. Heitmeyer, B.L. Labaw, and K. Kiskis. </author> <title> Consistency checking of SCR-style requirements specifications. </title> <booktitle> In Proceedings of the International Symposium on Requirements Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: For example, Heimdahl [2] has automated the checking of RSML specifications for two of the 47 criteria, i.e., those to ensure robustness and nondeterminism. Heitmeyer and colleagues <ref> [3] </ref> provide tools similar to Heimdahl's to check for the internal consistency of specifications in SCR [4], a state-based specification language that uses an assortment of tabular notations to define state transitions.
Reference: [4] <author> K.L. Heninger. </author> <title> Specifying software for complex systems: New techniques and their application. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 6(1) </volume> <pages> 2-13, </pages> <month> January </month> <year> 1980. </year>
Reference-contexts: For example, Heimdahl [2] has automated the checking of RSML specifications for two of the 47 criteria, i.e., those to ensure robustness and nondeterminism. Heitmeyer and colleagues [3] provide tools similar to Heimdahl's to check for the internal consistency of specifications in SCR <ref> [4] </ref>, a state-based specification language that uses an assortment of tabular notations to define state transitions. Without realizing it, Modugno had begun to do some of these checks informally when constructing the model and later when examining the completed model.
Reference: [5] <author> C. </author> <title> Hynes. An example guidance mode specification. </title> <type> Technical report, </type> <institution> NASA Ames, </institution> <year> 1995. </year>
Reference-contexts: Moreover, there is little information on the analysis process itself. In this paper, we explore the feasibility of such a comprehensive safety analysis on a specification of a guidance system for a high-speed civil transport being developed at NASA Ames <ref> [5] </ref>. The goal of this case study was to determine the feasibility of performing such analyses and to evaluate the techniques and their contribution to the safety-analysis process. <p> The main body of the paper presents an overview of software-safety analysis and the results of the analyses. We conclude with a discussion of our results and experiences along with planned future work. The Guidance System being developed at NASA Ames <ref> [5] </ref>. The VMS assists the pilot with tasks such as on-board flight planning, navigation, guidance and flight control.
Reference: [6] <author> M.A. Jackson. </author> <title> Principles of Program Design. </title> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: The specification was developed using three different documents provided by the NASA Ames re searchers: 1) a description of the overall goals of the guidance system design along with a description of the vertical operation modes using a combination of English, Laplace diagrams and state machines; 2) a Jackson Charts <ref> [6] </ref> specification of the vertical operation modes; and 3) pseudo-code used to create a program to control a vertical motion simulator for pilot testing of the guidance system. In the process of constructing the model, we found errors in the original guidance system specification.
Reference: [7] <author> M.S. Jaffe. </author> <title> Completeness, Robustness, and Safety of Real-Time Requirements Specification. </title> <type> Ph.D. Dissertation, </type> <institution> UCI, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: A goal of software-safety analysis is to ensure that the model of the controlled process (i.e., the requirements specification) is sufficiently complete that it specifies safe behavior in all circumstances in which the system will operate. Jaffe <ref> [7, 8, 9] </ref> has defined general criteria for determining whether such models satisfy this goal. The results of applying these criteria to our specification are described below. The specification (model) can also be analyzed with respect to specific, known hazards.
Reference: [8] <author> M.S. Jaffe, N.G. Leveson, </author> <title> M.P.E. Heimdahl, and B.E. Melhart. Software requirements analysis for real-time process-control systems. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 241-258, </pages> <year> 1991. </year>
Reference-contexts: Leveson and colleagues have been developing a series of techniques and tools to analyze safety-critical software <ref> [2, 8, 9, 10, 12] </ref>. We have demonstrated the techniques and shown that each can be effective individually for the analysis of safety-critical systems. <p> A goal of software-safety analysis is to ensure that the model of the controlled process (i.e., the requirements specification) is sufficiently complete that it specifies safe behavior in all circumstances in which the system will operate. Jaffe <ref> [7, 8, 9] </ref> has defined general criteria for determining whether such models satisfy this goal. The results of applying these criteria to our specification are described below. The specification (model) can also be analyzed with respect to specific, known hazards. <p> Completeness and Consistency Checks Jaffe and colleagues <ref> [8, 9] </ref> have defined a set of formal criteria to identify missing, incorrect, and ambiguous requirements for process-control systems.
Reference: [9] <author> N.G. Leveson. Safeware: </author> <title> System Safety and Computers. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Leveson and colleagues have been developing a series of techniques and tools to analyze safety-critical software <ref> [2, 8, 9, 10, 12] </ref>. We have demonstrated the techniques and shown that each can be effective individually for the analysis of safety-critical systems. <p> Using this information, it computes the desired flight control commands, which include the com manded flight path angle and the commanded thrust. The guidance system specification is described briefly in the appendix. Types of Safety Analyses A safe system is one that is free from accidents or unacceptable losses <ref> [9] </ref>. The heart of analyzing a system from a safety perspective is identifying and analyzing the system for hazards, which are states or conditions of the system that combined with some environmental conditions can lead to an accident or loss event [9]. <p> one that is free from accidents or unacceptable losses <ref> [9] </ref>. The heart of analyzing a system from a safety perspective is identifying and analyzing the system for hazards, which are states or conditions of the system that combined with some environmental conditions can lead to an accident or loss event [9]. Once the hazards are identified, steps can be taken to eliminate them, reduce the likelihood of their occurring, or mitigate their effects on the system. In addition, some hazard causes can be identified and eliminated or controlled. <p> A goal of software-safety analysis is to ensure that the model of the controlled process (i.e., the requirements specification) is sufficiently complete that it specifies safe behavior in all circumstances in which the system will operate. Jaffe <ref> [7, 8, 9] </ref> has defined general criteria for determining whether such models satisfy this goal. The results of applying these criteria to our specification are described below. The specification (model) can also be analyzed with respect to specific, known hazards. <p> The results of applying these criteria to our specification are described below. The specification (model) can also be analyzed with respect to specific, known hazards. We accomplish this goal using what we call State Machine Hazard Analysis (SHMA) <ref> [9] </ref>. SMHA, like most safety analyses, involves some type of search. How that search is performed depends on the structure of the model and the goal of the search. One classification for such search techniques is forward or backward [9]. <p> this goal using what we call State Machine Hazard Analysis (SHMA) <ref> [9] </ref>. SMHA, like most safety analyses, involves some type of search. How that search is performed depends on the structure of the model and the goal of the search. One classification for such search techniques is forward or backward [9]. A forward (sometimes called inductive) search takes an initiating event (or condition) and traces it forward in time. The result is a set of states or conditions that represent the effects of the initiating event. <p> Completeness and Consistency Checks Jaffe and colleagues <ref> [8, 9] </ref> have defined a set of formal criteria to identify missing, incorrect, and ambiguous requirements for process-control systems.
Reference: [10] <author> N. Leveson, S. Cha, and T. Shimeall. </author> <title> Safety verification of ada programs using software fault trees. </title> <journal> IEEE Software, </journal> <volume> 8(7) </volume> <pages> 48-59, </pages> <year> 1991. </year>
Reference-contexts: Leveson and colleagues have been developing a series of techniques and tools to analyze safety-critical software <ref> [2, 8, 9, 10, 12] </ref>. We have demonstrated the techniques and shown that each can be effective individually for the analysis of safety-critical systems.
Reference: [11] <author> N.G. Leveson, M.P.E. Heimdahl, H. Hildreth, and J.D. Reese. </author> <title> Requirements Specification for Process-Control Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(9) </volume> <pages> 684-707, </pages> <year> 1994. </year>
Reference: [12] <author> N.G. Leveson and J.L. Stolzy. </author> <title> Safety analysis using Petri nets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(3):386-397, </volume> <year> 1987. </year>
Reference-contexts: Leveson and colleagues have been developing a series of techniques and tools to analyze safety-critical software <ref> [2, 8, 9, 10, 12] </ref>. We have demonstrated the techniques and shown that each can be effective individually for the analysis of safety-critical systems.
Reference: [13] <author> R. Lutz. </author> <title> Targeting safety-related errors during software requirements analysis. </title> <booktitle> In Proceedings of the First ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: For the system evaluated in this paper, we use a state-machine model of the system's required black-box behavior. We model the requirements instead of an actual software design because many accidents involving software systems can be traced to requirements flaws <ref> [13] </ref>. In addition, by modeling and analyzing the requirements, we can find problems early in the development cycle when they are more easily and effectively addressed. A fundamental tenet of linear control theory is that every controller is or contains a model of the controlled process. <p> For example, Lutz found that the Jaffe completeness criteria covered most of the 192 requirements errors identified as safety-critical that were not detected until system integration testing of the Galileo and Voyager spacecraft <ref> [13] </ref>. We found manual checking of the criteria to be helpful in finding important specification omissions and believe that automated tools to assist the analyst in checking the criteria might detect errors not found by our manual process. Forward Simulation Forward simulation was performed by Modugno and Sandys.
Reference: [14] <author> V. Ratan, K. Partridge, J.D. Reese, and N.G. Leveson. </author> <title> Safety analysis tools for requirements specifications. </title> <type> Compass 96, </type> <address> Gaithersburg, Mary-land, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: To explore the feasibility of automated analysis, we also applied some prototype tools to an automated highway system model <ref> [14] </ref>. We did not, however, study the interaction between the analysis results nor did we study the analysis process itself.
Reference: [15] <author> J.D. Reese. </author> <title> Software Deviation Analysis. </title> <type> Ph.D. Dissertation, </type> <institution> UCI, </institution> <year> 1996. </year>
Reference-contexts: Within computer science, her background is human-computer interaction and only recently has she begun to work in software safety. Reese is trained as a computer scientist and created one of the forward analysis methods <ref> [15] </ref>. Sandys and Partridge are Ph.D. students in computer science, studying software safety. In addition, Sandys holds a bachelor's degree in physics and helped construct the parts of the model that required physics knowledge. Finally, Leveson has been working in the area of safety for 15 years. <p> It can also help identify potential system hazards resulting from deviations in system inputs. To assist the analyst, Reese <ref> [15] </ref> has developed a tool for performing a deviation analysis on an RSML specification. The analyst first selects one or more inputs to deviate and describes how to deviate them (high, low, very high, very low, and so on).
References-found: 15

