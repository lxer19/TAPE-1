URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-93-17.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Non-interfering GVT Computation via Asynchronous Global Reductions  
Author: Sudhir Srinivasan Paul F. Reynolds, Jr. 
Abstract: Computer Science Report No. TR-93-17 April 1, 1993 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> BAUER, H., AND SPORRER, C., </author> <title> Distributed logic simulation and an approach to asynchronous GVT-calculation. </title> <booktitle> Proceedings of the sixth workshop on parallel and distributed simulation (January 1992), </booktitle> <pages> 205-208. </pages>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> Concepcion and Kelly [3] proposed an algorithm in which dedicated processors are used to compute GVT but which requires acknowledgments as well as two messages for every Time Warp message. Bauer and Non-interfering GVT Computation via Asynchronous Global Reductions 2 Sporrer <ref> [1] </ref> eliminate acknowledgments but the accuracy of their algorithm depends on how often processors report their state to a central GVT calculator. Matterns algorithm [9] accounts for messages in transit by waiting until they are all received.
Reference: 2. <author> BELLENOT, S., </author> <title> Global virtual time algorithms. </title> <booktitle> Proceedings of the 1990 SCS Multiconference on Distributed Simulation (January 1990), </booktitle> <pages> 122-127. </pages>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms <ref> [2, 11, 16] </ref> require each message to be acknowledged. While Lin and Lazowska [7] eliminate acknowledgments, they introduce a worst case of O (n 2 ) control messages.
Reference: 3. <author> CONCEPCION, A.I., AND KELLY, S.G., </author> <title> Computing global virtual time using the Multiple-Level Token Passing algorithm. </title> <booktitle> Proceedings of the SCS Multiconference on Advances in Parallel and Distributed Simulation (January 1991), </booktitle> <pages> 63-68. </pages>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. While Lin and Lazowska [7] eliminate acknowledgments, they introduce a worst case of O (n 2 ) control messages. Concepcion and Kelly <ref> [3] </ref> proposed an algorithm in which dedicated processors are used to compute GVT but which requires acknowledgments as well as two messages for every Time Warp message.
Reference: 4. <author> FILLOQUE, J.M., GAUTRIN, E., and POTTIER, B., </author> <title> Efficient global computations on a processor network with programmable logic. </title> <type> Research Report number 1374, </type> <institution> Institut National de Recherche en Informatique et en Automatique (January 1991). </institution>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> In addition, all of the above algorithms use the host network to disseminate the computed GVT to the processors. Tomlinson and Garg [19] describe a method to detect when GVT has exceeded a bound rather than approximate a value of GVT. Filloque, Gautrin and Pottier <ref> [4] </ref> and Livny and Manber [8] use special hardware to compute GVT. However, they use the host network to acknowledge messages. <p> Acknowledgments This work was supported in part by the National Science Foundation <ref> (grant CCR-9108448, Aug. 91, number 48) </ref>, MITRE Corporation (Academic Affiliates Program) and Mystech, Inc. (Academic Affiliates Program). Non-interfering GVT Computation via Asynchronous Global Reductions 13
Reference: 5. <author> FUJIMOTO, </author> <title> R.M., Parallel discrete event simulation, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 33, No. </volume> <month> 10 (October </month> <year> 1990), </year> <pages> 30-53. </pages>
Reference-contexts: The common approach to PDES is to partition the simulated system into multiple components each of which is simulated by a separate discrete-event simulator called a logical process (LP). These LPs are synchronized using a PDES protocol. Several protocols have been proposed in the literature <ref> [5] </ref> each having its advantages and drawbacks. Time Warp [6] is a protocol in which the LPs simulate events aggressively (i.e. which allows for causality errors). Consequently, they must periodically save state so that they may roll back to a correct state upon a causality error.
Reference: 6. <author> JEFFERSON, </author> <title> D.R., Virtual time, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 7, No. 3, </volume> <month> (July </month> <year> 1985), </year> <pages> 404-425. </pages>
Reference-contexts: 1 Introduction Since the introduction of Virtual Time and the Time Warp protocol <ref> [6] </ref>, several issues have arisen regarding the performance of this protocol. One of these is the computation of global virtual time (GVT). GVT is an important value required by the Time Warp protocol. The method used to compute GVT can significantly impact the completion time of the simulation. <p> These LPs are synchronized using a PDES protocol. Several protocols have been proposed in the literature [5] each having its advantages and drawbacks. Time Warp <ref> [6] </ref> is a protocol in which the LPs simulate events aggressively (i.e. which allows for causality errors). Consequently, they must periodically save state so that they may roll back to a correct state upon a causality error.
Reference: 7. <author> LIN, Y-B., AND LAZOWSKA, E.D., </author> <title> Determining the global virtual time in a distributed simulation. </title> <type> Technical Report number 90-01-02, </type> <institution> Department of Computer Science and Engineering, University of Washington (December 1989). </institution>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. While Lin and Lazowska <ref> [7] </ref> eliminate acknowledgments, they introduce a worst case of O (n 2 ) control messages. Concepcion and Kelly [3] proposed an algorithm in which dedicated processors are used to compute GVT but which requires acknowledgments as well as two messages for every Time Warp message. <p> RCVD_MSG: If the AP is not acknowledging a message currently, it starts acknowledging the message in the labelled communication. Otherwise, it inserts the message into the unacknowledged message list for acknowledging later. 3.3 Correctness The two problems faced by any GVT computation scheme <ref> [7] </ref> are solved in our method as follows: (i) the simultaneous reporting problem is solved by the hardware design which takes an atomic snapshot of the global state as presented by the APs using the state vectors (ii) the transient message problem is solved by acknowledging every message through the PRN.
Reference: 8. <author> LIVNY, M., AND MANBER, U., </author> <title> Distributed computation via active messages, </title> <journal> IEEE Transactions on Computers Vol. </journal> <volume> C-34, No. </volume> <month> 12 (December </month> <year> 1985), </year> <pages> 1185-1190. </pages>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> Tomlinson and Garg [19] describe a method to detect when GVT has exceeded a bound rather than approximate a value of GVT. Filloque, Gautrin and Pottier [4] and Livny and Manber <ref> [8] </ref> use special hardware to compute GVT. However, they use the host network to acknowledge messages.
Reference: 9. <author> MATTERN, F., </author> <title> Efficient algorithms for distributed snapshots and global virtual time approximation. </title> <note> To appear in the special issue of Journal of Parallel and Distributed Computing on parallel and distributed simulation, </note> <month> August </month> <year> 1993. </year>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> Bauer and Non-interfering GVT Computation via Asynchronous Global Reductions 2 Sporrer [1] eliminate acknowledgments but the accuracy of their algorithm depends on how often processors report their state to a central GVT calculator. Matterns algorithm <ref> [9] </ref> accounts for messages in transit by waiting until they are all received. In addition, all of the above algorithms use the host network to disseminate the computed GVT to the processors.
Reference: 10. <author> PANCERELLA, </author> <title> C.M., Improving the efficiency of a framework for parallel simulations, </title> <booktitle> Proceedings of the 6th Workshop on Parallel and Distributed Simulation (January 1992), </booktitle> <pages> 22-27. </pages>
Reference-contexts: The detailed operation of these register interfaces is described in [15]. For illustrations of the use of the hardware for computing synchronization values, the reader is referred to the original framework synchronization algorithms proposed in [14] and the double handshake acknowledgment protocol described in <ref> [10] </ref>. 3 GVT algorithm We assume familiarity with the Time Warp protocol and associated terminology. By definition, GVT is the minimum of two values: the smallest of the logical clocks of all of the LPs and the smallest unreceived message time among all of the LPs. <p> All of these lists are sorted in ascending order of the sequence counter value field of the message identifier. This organization makes it possible to perform batched acknowledgments as discussed below. We now describe the two-phase acknowledgment protocol presented in <ref> [10] </ref>. One of the novelties of this protocol is that it acknowledges multiple messages with a single physical acknowledgment. This is referred to as batched acknowledgments - each physical acknowledgment corresponds to a batch of messages.
Reference: 11. <author> PREISS, B., </author> <title> The Yaddes distributed discrete event simulation specification language and execution environments. </title> <booktitle> Proceedings of the SCS Multiconference on Distributed Simulation (January 1989), </booktitle> <pages> 139-144. </pages>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms <ref> [2, 11, 16] </ref> require each message to be acknowledged. While Lin and Lazowska [7] eliminate acknowledgments, they introduce a worst case of O (n 2 ) control messages.
Reference: 12. <author> PREISS, B.R., MACINTYRE, I.D., AND LOUCKS, W.M., </author> <title> On the trade-off between time and space in optimistic parallel discrete-event simulation. </title> <booktitle> Proceedings of 6th Workshop on Parallel and Distributed Simulation (January 1992), </booktitle> <pages> 33-42. </pages>
Reference-contexts: As a result, LPs generally have to roll back farther than required and rebuild state, which increases the rollback overhead and therefore the completion time <ref> [12] </ref>. The main focus of research in this area has been to minimize the number of messages used to compute a value of GVT while keeping the computed value of GVT as close to the actual value of GVT as possible.
Reference: 13. <author> REIHER, P., FUJIMOTO, R., BELLENOT, S., AND JEFFERSON, D., </author> <title> Cancellation strategies in optimistic execution systems. </title> <booktitle> Proceedings of the 1990 SCS Multiconference on Distributed Simulation (January 1990), </booktitle> <pages> 112-121. </pages>
Reference-contexts: Whenever its actions affect GVT, it communicates with its AP by enqueueing a labelled communication in its FIFO. The algorithm consists of a main procedure called HOST_PROC and three subroutines: SEND_MSG, ROLLBACK and RCV_MSG. In this algorithm, we adopt aggressive cancellation <ref> [13] </ref> and also assume that messages do not preempt the execution of events. However, we have indicated elsewhere [18] how to accommodate lazy cancellation and event preemption by messages into this GVT computation algorithm. HOST_PROC The main program is simply an event execution loop.
Reference: 14. <author> REYNOLDS, P.F., JR., </author> <title> An efficient framework for parallel simulations. </title> <journal> International Journal in Computer Simulation, </journal> <volume> Vol. 3, No. 4, </volume> <year> 1992. </year>
Reference-contexts: A detailed description of the hardware may be found in [15]. The hardware was designed as a part of a universal framework proposed in <ref> [14] </ref> to support all PDESs. Henceforth, we will refer to this hardware Non-interfering GVT Computation via Asynchronous Global Reductions 3 as the framework hardware or simply the hardware. <p> The detailed operation of these register interfaces is described in [15]. For illustrations of the use of the hardware for computing synchronization values, the reader is referred to the original framework synchronization algorithms proposed in <ref> [14] </ref> and the double handshake acknowledgment protocol described in [10]. 3 GVT algorithm We assume familiarity with the Time Warp protocol and associated terminology.
Reference: 15. <author> REYNOLDS, P.F. JR., PANCERELLA, C.M. AND SRINIVASAN, S., </author> <title> Design and performance analysis of hardware support for parallel simulations. </title> <type> Technical Report number TR-92-20, </type> <institution> Computer Science Department, University of Virginia, </institution> <month> June </month> <year> 1992. </year> <note> To appear in the special issue of the Journal of Parallel and Distributed Computing on Parallel and Distributed Simulation, </note> <month> August </month> <year> 1993. </year>
Reference-contexts: In section 4 we discuss the performance of the algorithm. Section 5 concludes the paper. 2 Hardware support for PDES In this section, we describe briey the design and operation of the hardware used by our GVT algorithm. A detailed description of the hardware may be found in <ref> [15] </ref>. The hardware was designed as a part of a universal framework proposed in [14] to support all PDESs. Henceforth, we will refer to this hardware Non-interfering GVT Computation via Asynchronous Global Reductions 3 as the framework hardware or simply the hardware. <p> The reductions are performed in parallel across all of the ALUs. The PRN interfaces with each processor through the IN and OUT registers. In order to satisfy certain correctness criteria established in <ref> [15] </ref>, the basic unit of data transfer between the processors and the PRN is a state vector. A state vector consists of m elements, each of which has two components: a value and a tag. <p> Since speed of reduction is the primary design goal of this hardware, it is important that c be small. In the prototype hardware described in <ref> [15] </ref>, c is 150 nanoseconds, giving a reduction cycle time of 1.2 microseconds for 32 processors with 4-element state vectors. As mentioned earlier, tags simply accompany the values. At each ALU, the tags of the two operands are brought to a selector switch. <p> The IN and OUT registers are comprised of three sets of registers each which provide the isolation between the AP and the PRN. The detailed operation of these register interfaces is described in <ref> [15] </ref>. For illustrations of the use of the hardware for computing synchronization values, the reader is referred to the original framework synchronization algorithms proposed in [14] and the double handshake acknowledgment protocol described in [10]. 3 GVT algorithm We assume familiarity with the Time Warp protocol and associated terminology.
Reference: 16. <author> SAMADI, B., </author> <title> Distributed simulation: algorithms and performance analysis. </title> <booktitle> In Distributed Processing (IFIP), </booktitle> <editor> ed. M. H. Barton, E.L. Dagless and G. L. Reijns, </editor> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <pages> 19-34. </pages>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms <ref> [2, 11, 16] </ref> require each message to be acknowledged. While Lin and Lazowska [7] eliminate acknowledgments, they introduce a worst case of O (n 2 ) control messages.
Reference: 17. <author> SRINIVASAN, S., </author> <title> Modeling a framework for parallel simulations. </title> <institution> Master of Science Thesis, Computer Science Department, University of Virginia (May 1992). </institution>
Reference-contexts: Computation via Asynchronous Global Reductions 11 algorithm commences after enough time has elapsed to ensure that the output of the PRN contains the results of reductions on the initialized state vectors. 4 Performance We present the results of preliminary studies of the performance of our GVT algorithm. 4.1 Speed In <ref> [17] </ref>, we have described an experiment which simulated eight LPs performing a busy-work application using Time Warp. The LPs used the GVT algorithm presented here to compute GVT. The framework hardware and the GVT algorithm were simulated in significant detail.
Reference: 18. <author> SRINIVASAN, S., AND REYNOLDS, P.F. JR., </author> <title> Hardware support for aggressive parallel discrete event simulations. </title> <type> Technical Report number TR-93-07, </type> <institution> Computer Science Department, University of Virginia, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: The algorithm consists of a main procedure called HOST_PROC and three subroutines: SEND_MSG, ROLLBACK and RCV_MSG. In this algorithm, we adopt aggressive cancellation [13] and also assume that messages do not preempt the execution of events. However, we have indicated elsewhere <ref> [18] </ref> how to accommodate lazy cancellation and event preemption by messages into this GVT computation algorithm. HOST_PROC The main program is simply an event execution loop. As a result of executing an event, an LP may send out messages. Sending of messages is done using the SEND_MSG procedure. <p> At any time during these two phases, a new acknowledgment with a timestamp smaller than may be submitted. In such a case, the protocol preempts the current acknowledgment, completes the new one and then restarts the preempted acknowledgment. We have shown in <ref> [18] </ref> that this protocol correctly acknowledges all messages in a finite amount of time AUX_PROC The AP begins by reading the output state vector of the PRN. <p> A detailed proof of correctness of this algorithm which is too elaborate to include in this paper is presented in <ref> [18] </ref>.
Reference: 19. <author> TOMLINSON, A.I., AND GARG V.K., </author> <title> An algorithm for minimally latent global virtual time. </title> <booktitle> Proceedings of the Seventh Workshop on Parallel and Distributed Simulation (May 1993), </booktitle> <pages> 35-42. </pages>
Reference-contexts: Other uses of GVT include termination detection and gathering statistics. Since computing GVT corresponds to obtaining a distributed global snapshot of the system, it is a non-trivial problem. 1.2 Previous GVT algorithms In the past, several algorithms have been proposed to compute GVT in a message passing system <ref> [1, 2, 3, 4, 7, 8, 9, 11, 16, 19] </ref>. All of these algorithms use the host communication network in some way to compute GVT. The earlier algorithms [2, 11, 16] require each message to be acknowledged. <p> Matterns algorithm [9] accounts for messages in transit by waiting until they are all received. In addition, all of the above algorithms use the host network to disseminate the computed GVT to the processors. Tomlinson and Garg <ref> [19] </ref> describe a method to detect when GVT has exceeded a bound rather than approximate a value of GVT. Filloque, Gautrin and Pottier [4] and Livny and Manber [8] use special hardware to compute GVT. However, they use the host network to acknowledge messages.
References-found: 19

