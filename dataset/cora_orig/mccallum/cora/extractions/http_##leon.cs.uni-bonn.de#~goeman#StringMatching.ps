URL: http://leon.cs.uni-bonn.de/~goeman/StringMatching.ps
Refering-URL: http://leon.cs.uni-bonn.de/~goeman/
Root-URL: http://cs.uni-bonn.de
Email: Email: goeman@cs.uni-bonn.de  
Title: Karp-Rabin String-Matching Revisited  
Author: Heiko Goeman 
Web: WWW: http://leon.cs.uni-bonn.de/goeman  
Address: Romerstrae 164, 53117 Bonn, Germany  
Affiliation: University of Bonn, Computer Science Department V,  
Abstract: Karp and Rabin have presented an very simple and efficient randomized pattern-matching algorithm that can be used for matching a string x of n symbols in some text y with m n symbols in O(m) time [1]. Their algorithm calculates a fingerprint of x which is a special value influenced by some prime p that is taken at random from the interval [1; nm 2 ]. Apart from some slight refinements, we show that the upper bound for p can be improved to n 2 without loosing the expected linear time complexity. In particular, the new bound does not depend on the size of the text. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. M. Karp, M. O. Rabin: </author> <title> Efficient randomized pattern-matching algorithms. </title> <journal> In IBM J. Res. Develop. </journal> <volume> 31, </volume> <pages> S. 249-260, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Karp and Rabin have presented an efficient randomized algorithm for general pattern-matching problems <ref> [1] </ref>, among them the familiar string-matching problem which can be described as follows. There are two strings over some alphabet , a pattern x = x 1 : : : x n and a text y = y 1 : : : y m , where m n. <p> use the following fingerprint function F p that generates a hash number from the n symbols of a string a = a 1 : : : a n 2 f0; 1g n : F p (a) := i=1 j where p is a prime taken at random from the interval <ref> [1; M ] </ref>, where M is some definite upper bound. The idea now is to always compare F p (x) with F p (y (i)) before comparing x with y (i). <p> We begin in Section 2 with an algorithm that efficiently determines all fingerprint values F p (x); F p (y (1)); : : : ; F p (y (m n + 1)) and explain its necessity. Section 3 then recalls and simplifies some number theoretical theorems found in <ref> [1] </ref>.
Reference: [2] <author> J. B. Rosser, L. Schoenfeld: </author> <title> Approximate Formulas for Some Functions of Prime Numbers. </title> <journal> In Illinois J. Math. </journal> <volume> 6, </volume> <pages> S. 64-94, </pages> <year> 1962. </year>
Reference-contexts: Theorem 1: Let u 29 be some natural number. Then the product of all primes that are less than or equal to u, denoted by pp (u), is greater than 2 u . Proof. Theorem 18 of <ref> [2] </ref> states that pp (u) &gt; e u2:05282 u = 2 log 2 e (u2:05282 u) . <p> Hence, any number a 2 u can only have at most (u) different prime divisors. 2 We finally recall the following important theorem. Theorem 4: (u) = (u= ln u). Proof. For a proof, we refer to <ref> [2] </ref>. In fact, it is even true that lim (u) ln u = 1 . Note that this sequence quickly converges. For example, it is shown in [2] that the following inequalities hold for all u 17: c 1 ln u u , where c 1 = 1 and c 2 <p> Theorem 4: (u) = (u= ln u). Proof. For a proof, we refer to <ref> [2] </ref>. In fact, it is even true that lim (u) ln u = 1 . Note that this sequence quickly converges. For example, it is shown in [2] that the following inequalities hold for all u 17: c 1 ln u u , where c 1 = 1 and c 2 = 1:25506 .
References-found: 2

