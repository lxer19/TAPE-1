URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3032/3032.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Hilbert R-tree: An improved R-tree using fractals  
Author: Ibrahim Kamel and Christos Faloutsos 
Date: February 22, 1994  
Address: College Park, MD 20742  
Affiliation: Department of Computer Science and Institute for Systems Research (ISR) University of Maryland  
Abstract: We propose a new R-tree structure that outperforms all the older ones. The heart of the idea is to facilitate the deferred splitting approach in R-trees. This is done by proposing an ordering on the R-tree nodes. This ordering has to be 'good', in the sense that it should group 'similar' data rectangles together, to minimize the area and perimeter of the resulting minimum bounding rectangles (MBRs). Following [19] we have chosen the so-called '2D-c' method, which sorts rectangles according to the Hilbert value of the center of the rectangles. Given the ordering, every node has a well-defined set of sibling nodes; thus, we can use deferred splitting. By adjusting the split policy, the Hilbert R-tree can achieve as high utilization as desired. To the contrary, the R fl -tree has no control over the space utilization, typically achieving up to 70%. We designed the manipulation algorithms in detail, and we did a full implementation of the Hilbert R-tree. Our experiments show that the '2-to-3' split policy provides a compromise between the insertion complexity and the search cost, giving up to 28% savings over the R fl tree [3] on real data.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Walid G. Aref and Hanan Samet. </author> <title> Optimization strategies for spatial query processing. </title> <booktitle> Proc. of VLDB (Very Large Data Bases), </booktitle> <pages> pages 81-90, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: A recent survey can be found in [26]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] <ref> [1] </ref> or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work
Reference: [2] <author> D. Ballard and C. Brown. </author> <title> Computer Vision. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data [28]. Spatial data arise in many applications, including: Car tography [29]; Computer-Aided Design (CAD) [24] [14]; computer vision and robotics <ref> [2] </ref>; tradi tional databases, where a record with k attributes corresponds to a point in a k-d space; temporal fl This research was partially funded by the Institute for Systems Research (ISR), by the National Science Foundation under Grants IRI-9205273 and IRI-8958546 (PYI), with matching funds from EMPRESS Software Inc. and
Reference: [3] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The r*-tree: an efficient and robust access method for points and rectangles. </title> <booktitle> ACM SIGMOD, </booktitle> <pages> pages 322-331, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The most successful variant of R-trees seems to be the R fl -tree <ref> [3] </ref>. One of its main contributions is the idea of 'forced-reinsert' by deleting some rectangles from the overflowing node, and reinserting them. The main idea in the present paper is to impose an ordering on the data rectangles. <p> Subsequent work on R-trees includes the work by Greene [11], the R + -tree [27], R-trees using Minimum Bounding Polygons [17], and finally, the R fl -tree <ref> [3] </ref>, which seems to have the best performance among the R-tree variants. The main idea in the R fl -tree is the concept of forced re-insert.
Reference: [4] <author> J.L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> CACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <month> September </month> <year> 1975. </year> <month> 16 </month>
Reference-contexts: These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees <ref> [4] </ref>, k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the linear quadtrees, the R-trees do not need to divide the spatial
Reference: [5] <author> T. Bially. </author> <title> Space-filling curves: Their generation and their application to bandwidth reduction. </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> IT-15(6):658-664, </volume> <month> November </month> <year> 1969. </year>
Reference-contexts: The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [12], [18]. An algorithm for higher dimensionalities is in <ref> [5] </ref>. The path of a space filling curve imposes a linear ordering on the grid points. Figure 1 shows 3 one such ordering for a 4 fi 4 grid (see curve H 2 ).
Reference: [6] <author> C. Faloutsos. </author> <title> Gray codes for partial match and range queries. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14(10) </volume> <pages> 1381-1393, </pages> <month> October </month> <year> 1988. </year> <note> early version available as UMIACS-TR-87-4, also CS-TR-1796. </note>
Reference-contexts: A space filling curve visits all the points in a k-dimensional grid exactly once and never crosses itself. The Z-order (or Morton key order, or bit-interleaving, or Peano curve), the Hilbert curve, and the Gray-code curve <ref> [6] </ref> are examples of space filling curves. In [7], it was shown experimentally that the Hilbert curve achieves the best clustering among the three above methods.
Reference: [7] <author> C. Faloutsos and S. Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 247-252, </pages> <month> March </month> <year> 1989. </year> <note> also available as UMIACS-TR-89-47 and CS-TR-2242. </note>
Reference-contexts: A recent survey can be found in [26]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves <ref> [7] </ref> [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the <p> A space filling curve visits all the points in a k-dimensional grid exactly once and never crosses itself. The Z-order (or Morton key order, or bit-interleaving, or Peano curve), the Hilbert curve, and the Gray-code curve [6] are examples of space filling curves. In <ref> [7] </ref>, it was shown experimentally that the Hilbert curve achieves the best clustering among the three above methods. Next we provide a brief introduction to the Hilbert curve: The basic Hilbert curve on a 2x2 grid, denoted by H 1 , is shown in Figure 1.
Reference: [8] <author> Michael Freeston. </author> <title> The bang file: a new kind of grid file. </title> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 260-269, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Section 5 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in [26]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space <ref> [16, 8] </ref>; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree
Reference: [9] <author> I. </author> <title> Gargantini. An effective way to represent quadtrees. </title> <journal> Comm. of ACM (CACM), </journal> <volume> 25(12) </volume> <pages> 905-910, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: A recent survey can be found in [26]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees <ref> [9] </ref> [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees
Reference: [10] <author> Grand challenges: </author> <title> High performance computing and communications, </title> <booktitle> 1992. The FY 1992 U.S. Research and Development Program. </booktitle>
Reference-contexts: Research (ISR), by the National Science Foundation under Grants IRI-9205273 and IRI-8958546 (PYI), with matching funds from EMPRESS Software Inc. and Thinking Machines Inc. 1 databases, where time can be considered as one more dimension [20]; scientific databases with spatial-temporal data, such as the ones in the `Grand Challenge' applications <ref> [10] </ref>, etc. In the above applications, one of the most typical queries is the range query: Given a rectangle, retrieve all the elements that intersect it. A special case of the range query is the point query or stabbing query, where the query rectangle degenerates to a point.
Reference: [11] <author> D. Greene. </author> <title> An implementation and performance analysis of spatial data access methods. </title> <booktitle> Proc. of Data Engineering, </booktitle> <pages> pages 606-615, </pages> <year> 1989. </year>
Reference-contexts: Their names come from their complexity; among the three, the quadratic split algorithm is the one that achieves the best trade-off between splitting time and search performance. Subsequent work on R-trees includes the work by Greene <ref> [11] </ref>, the R + -tree [27], R-trees using Minimum Bounding Polygons [17], and finally, the R fl -tree [3], which seems to have the best performance among the R-tree variants. The main idea in the R fl -tree is the concept of forced re-insert.
Reference: [12] <author> J.G. Griffiths. </author> <title> An algorithm for displaying a class of space-filling curves. </title> <journal> Software-Practice and Experience, </journal> <volume> 16(5) </volume> <pages> 403-411, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in <ref> [12] </ref>, [18]. An algorithm for higher dimensionalities is in [5]. The path of a space filling curve imposes a linear ordering on the grid points. Figure 1 shows 3 one such ordering for a 4 fi 4 grid (see curve H 2 ).
Reference: [13] <author> O. Gunther. </author> <title> The cell tree: an index for geometric data. </title> <note> Memorandum No. </note> <institution> UCB/ERL M86/89, Univ. of California, Berkeley, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees <ref> [13] </ref> e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the linear quadtrees, the R-trees do not need to divide the spatial objects into (several) 2 pieces (quadtree
Reference: [14] <author> A. Guttman. </author> <title> New Features for Relational Database Systems to Support CAD Applications. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data [28]. Spatial data arise in many applications, including: Car tography [29]; Computer-Aided Design (CAD) [24] <ref> [14] </ref>; computer vision and robotics [2]; tradi tional databases, where a record with k attributes corresponds to a point in a k-d space; temporal fl This research was partially funded by the Institute for Systems Research (ISR), by the National Science Foundation under Grants IRI-9205273 and IRI-8958546 (PYI), with matching funds
Reference: [15] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: A special case of the range query is the point query or stabbing query, where the query rectangle degenerates to a point. We focus on the R-tree <ref> [15] </ref> family of methods, which contains some of the most efficient methods that support range queries. <p> These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree <ref> [15] </ref>, k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the linear quadtrees, the R-trees do not need to divide <p> 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree <ref> [15] </ref>, k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the linear quadtrees, the R-trees do not need to divide the spatial objects into (several) 2 pieces (quadtree blocks). The R-tree is the extension of the B-tree for multidimensional objects.
Reference: [16] <author> K. Hinrichs and J. Nievergelt. </author> <title> The grid file: a data structure to support proximity queries on spatial objects. </title> <booktitle> Proc. of the WG'83 (Intern. Workshop on Graph Theoretic Concepts in Computer Science), </booktitle> <pages> pages 100-113, </pages> <year> 1983. </year>
Reference-contexts: Section 5 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in [26]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space <ref> [16, 8] </ref>; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree
Reference: [17] <author> H. V. Jagadish. </author> <title> Spatial search with polyhedra. </title> <booktitle> Proc. Sixth IEEE Int'l Conf. on Data Engineering, </booktitle> <month> February </month> <year> 1990. </year> <month> 17 </month>
Reference-contexts: Their names come from their complexity; among the three, the quadratic split algorithm is the one that achieves the best trade-off between splitting time and search performance. Subsequent work on R-trees includes the work by Greene [11], the R + -tree [27], R-trees using Minimum Bounding Polygons <ref> [17] </ref>, and finally, the R fl -tree [3], which seems to have the best performance among the R-tree variants. The main idea in the R fl -tree is the concept of forced re-insert.
Reference: [18] <author> H.V. Jagadish. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <pages> pages 332-342, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: A recent survey can be found in [26]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] <ref> [18] </ref>; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the linear <p> The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [12], <ref> [18] </ref>. An algorithm for higher dimensionalities is in [5]. The path of a space filling curve imposes a linear ordering on the grid points. Figure 1 shows 3 one such ordering for a 4 fi 4 grid (see curve H 2 ).
Reference: [19] <author> I. Kamel and C. Faloutsos. </author> <title> On packing r-trees. </title> <booktitle> In Proc. 2nd International Conference on Information and Knowledge Management(CIKM-93), </booktitle> <pages> pages 490-499, </pages> <address> Arlington, VA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: For example the point (0,0) on the H 2 curve has a Hilbert value of 0, while the point (1,1) has a Hilbert value of 2. The Hilbert value of a rectangle needs to be defined. Following the experiments in <ref> [19] </ref>, a good choice is the following: Definition 1 : The Hilbert value of a rectangle is defined as the Hilbert value of its center.
Reference: [20] <author> Curtis P. Kolovson and Michael Stonebraker. </author> <title> Segment indexes: Dynamic indexing techniques for multi-dimensional interval data. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 138-147, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: a k-d space; temporal fl This research was partially funded by the Institute for Systems Research (ISR), by the National Science Foundation under Grants IRI-9205273 and IRI-8958546 (PYI), with matching funds from EMPRESS Software Inc. and Thinking Machines Inc. 1 databases, where time can be considered as one more dimension <ref> [20] </ref>; scientific databases with spatial-temporal data, such as the ones in the `Grand Challenge' applications [10], etc. In the above applications, one of the most typical queries is the range query: Given a rectangle, retrieve all the elements that intersect it.
Reference: [21] <author> David B. Lomet and Betty Salzberg. </author> <title> The hb-tree: a multiattribute indexing method with good guaranteed performance. </title> <journal> ACM TODS, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees <ref> [21] </ref>, cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the linear quadtrees, the R-trees do not need to divide the spatial objects into (several) 2
Reference: [22] <author> B. Mandelbrot. </author> <title> Fractal Geometry of Nature. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: To derive a curve of order i, each vertex of the basic curve is replaced by the curve of order i 1, which may be appropriately rotated and/or reflected. infinity, the resulting curve is a fractal, with a fractal dimension of 2 <ref> [22] </ref>. The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [12], [18]. An algorithm for higher dimensionalities is in [5]. The path of a space filling curve imposes a linear ordering on the grid points.
Reference: [23] <author> J. Orenstein. </author> <title> Spatial query processing in an object-oriented database system. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 326-336, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: A recent survey can be found in [26]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering <ref> [23] </ref> or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees [25], hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which
Reference: [24] <author> J. K. Ousterhout, G. T. Hamachi, R. N. Mayo, W. S. Scott, and G. S. Taylor. </author> <title> Magic: a vlsi layout system. </title> <booktitle> In 21st Design Automation Conference, </booktitle> <pages> pages 152 - 159, </pages> <address> Alburquerque, NM, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data [28]. Spatial data arise in many applications, including: Car tography [29]; Computer-Aided Design (CAD) <ref> [24] </ref> [14]; computer vision and robotics [2]; tradi tional databases, where a record with k attributes corresponds to a point in a k-d space; temporal fl This research was partially funded by the Institute for Systems Research (ISR), by the National Science Foundation under Grants IRI-9205273 and IRI-8958546 (PYI), with matching
Reference: [25] <author> J.T. Robinson. </author> <title> The k-d-b-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 10-18, </pages> <year> 1981. </year>
Reference-contexts: methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [16, 8]; methods that use linear quadtrees [9] [1] or, equivalently, the z-ordering [23] or other space filling curves [7] [18]; and finally, methods based on trees (R-tree [15], k-d-trees [4], k-d-B-trees <ref> [25] </ref>, hB-trees [21], cell-trees [13] e.t.c.) One of the most promising approaches in the last class is the R-tree [15]: Compared to the transformation methods, R-trees work on the native space, which has lower dimensionality; compared to the linear quadtrees, the R-trees do not need to divide the spatial objects into
Reference: [26] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Section 3 describes the Hilbert R-tree. Section 4 presents our experimental results that compare the Hilbert R-tree with other R-tree variants. Section 5 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in <ref> [26] </ref>.
Reference: [27] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The r+ tree: a dynamic index for multidimensional objects. </title> <booktitle> In Proc. 13th International Conference on VLDB, </booktitle> <pages> pages 507-518, </pages> <address> Eng-land,, </address> <month> September </month> <year> 1987. </year> <note> also available as SRC-TR-87-32, UMIACS-TR-87-3, CS-TR-1795. </note>
Reference-contexts: Their names come from their complexity; among the three, the quadratic split algorithm is the one that achieves the best trade-off between splitting time and search performance. Subsequent work on R-trees includes the work by Greene [11], the R + -tree <ref> [27] </ref>, R-trees using Minimum Bounding Polygons [17], and finally, the R fl -tree [3], which seems to have the best performance among the R-tree variants. The main idea in the R fl -tree is the concept of forced re-insert.
Reference: [28] <author> Avi Silberschatz, Michael Stonebraker, and Jeff Ullman. </author> <title> Database systems: Achievements and opportunities. </title> <journal> Comm. of ACM (CACM), </journal> <volume> 34(10) </volume> <pages> 110-120, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data <ref> [28] </ref>.
Reference: [29] <author> M. White. N-Trees: </author> <title> Large Ordered Indexes for Multi-Dimensional Space. Application Mathematics Research Staff, Statistical Research Division, </title> <type> U.S. </type> <institution> Bureau of the Census, </institution> <month> December </month> <year> 1981. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data [28]. Spatial data arise in many applications, including: Car tography <ref> [29] </ref>; Computer-Aided Design (CAD) [24] [14]; computer vision and robotics [2]; tradi tional databases, where a record with k attributes corresponds to a point in a k-d space; temporal fl This research was partially funded by the Institute for Systems Research (ISR), by the National Science Foundation under Grants IRI-9205273 and
References-found: 29

