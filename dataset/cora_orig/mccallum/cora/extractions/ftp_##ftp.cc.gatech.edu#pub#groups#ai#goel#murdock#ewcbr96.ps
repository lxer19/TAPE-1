URL: ftp://ftp.cc.gatech.edu/pub/groups/ai/goel/murdock/ewcbr96.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/mcox/Public/Www/Personal/introspect.html
Root-URL: 
Title: Meta-Cases: Explaining Case-Based Reasoning  
Author: Ashok K. Goel and J. William Murdock 
Date: 1996.  
Note: Source: Third European Workshop on Case-Based Reasoning, EWCBR '96, Lausanne, Switzerland, November 14 16, 1996. Published as Advances in Case-Based Reasoning, Lecture Notes in Computer Science 1168. Ian Smith, Boi Faltings, eds., New York: Springer,  
Affiliation: Artificial Intelligence Group College of Computing Georgia Institute of Technology  
Abstract: AI research on case-based reasoning has led to the development of many laboratory case-based systems. As we move towards introducing these systems into work environments, explaining the processes of case-based reasoning is becoming an increasingly important issue. In this paper we describe the notion of a meta-case for illustrating, explaining and justifying case-based reasoning. A meta-case contains a trace of the processing in a problem-solving episode, and provides an explanation of the problem-solving decisions and a (partial) justification for the solution. The language for representing the problem-solving trace depends on the model of problem solving. We describe a task-method-knowledge (TMK) model of problem-solving and describe the representation of meta-cases in the TMK language. We illustrate this explanatory scheme with examples from Interactive Kritik, a computer-based de sign and learning environment presently under development.
Abstract-found: 1
Intro-found: 1
Reference: <author> Arcos, L. and Plaza, E. </author> <title> A Reflective Architecture for Integrated Memory-Based Learning and Reasoning. </title> <booktitle> In Lecture Notes in Artificial Intelligence - 837, </booktitle> <pages> pp. 289-300, </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In particular, our use of the TMK model for explaining case-based reasoning is an extension of Chandrasekaran, Tanner and Josephson's (1989) use of Task Structures for explanation of control strategies. The literature on the use of task models of problem solving for explanation and reflection is vast (e.g. <ref> (Arcos and Plaza 1994) </ref>), and we will not cover it here in its full generality. Instead, we focus on the relationship of our work with other interactive case-based problem-solving and design environments. AI research has led to the development of several paradigms of case-based reasoning and numerous laboratory case-based systems.
Reference: <author> Barber, J., Jacobson, M., Penberthy, L., Simpson, R., Bhatta, S., Goel, A., Pearce, M., Shankar, M., and Stroulia, E. </author> <title> Integrating Artificial Intelligence and Multimedia Technologies for Interface Design Advising. </title> <journal> NCR Journal of Research and Development,6(1):75-85, </journal> <month> October </month> <year> 1992. </year>
Reference-contexts: None of these interactive design environments provide any kind of explanatory interface. This is also true of our own earlier work on interactive case-based design aiding systems such as Archie (Pearce et al 1992), AskJef <ref> (Barber et al 1992) </ref> and ArchieTutor (Goel et al 1993). These systems pro-vided human designers with access to design case libraries in different domains.
Reference: <author> Carbonell, J. </author> <title> Learning by Analogy: Formulating and Generalizing Plans from Past Experience. Machine Learning: An Artificial Intelligence Approach, </title> <editor> R. Michalski, J. Carbonell, and T. Mitchell (editors). </editor> <address> Palo Alto, CA: </address> <publisher> Tioga, </publisher> <year> 1983. </year>
Reference: <author> Carbonell, J. </author> <title> Derivational Analogy: A Theory of Reconstructive Problem Solving and Expertise Acquisition. Machine Learning: An Artificial Intelligence Approach, Volume II, </title> <editor> R. Michalski, J. Carbonell, and T. Mitchell (editors). </editor> <address> San Mateo, CA: </address> <publisher> Morgan Kauffman, </publisher> <year> 1986. </year>
Reference: <author> Chandrasekaran, B. </author> <title> Generic Tasks as Building Blocks for Knowledge-Based Systems: The Diagnosis and Routine Design Examples. </title> <journal> Knowledge Engineering Review, </journal> <volume> 3(3) </volume> <pages> 183-219, </pages> <year> 1988. </year>
Reference-contexts: This task-level model in turn led to the development of a new system called NEOMYCIN, and to an new explanatory interface called GUIDON-WATCH. In parallel, other AI researchers developed general task-oriented theories of knowledge-based problem-solving, for example, Chandrasekaran's theories of Generic Tasks <ref> (Chandrasekaran 1988) </ref> and Task Structures (Chandrasekaran 1989). Chandrasekaran, Tanner and Joseph-son (1989) in particular argued that explanations in interactive knowledge-based systems need to capture the functional and strategic content of problem solving at the task level.
Reference: <author> Chandrasekaran, B. </author> <title> Task Structures, </title> <journal> Knowledge Acquisition and Machine Learning. Machine Learning, </journal> <volume> 4 </volume> <pages> 341-347. </pages>
Reference: <author> Chandrasekaran, B. </author> <title> Design Problem Solving: A Task Analysis. </title> <journal> AI Magazine, </journal> <pages> 59-71. </pages>
Reference: <institution> Winter 1990. </institution>
Reference: <author> Chandrasekaran, B., Tanner, M., and Josephson, J. </author> <title> Explaining Control Strategies in Problem Solving. </title> <journal> IEEE Expert, </journal> <volume> 4(1) </volume> <pages> 9-24, </pages> <year> 1989. </year>
Reference-contexts: This task-level model in turn led to the development of a new system called NEOMYCIN, and to an new explanatory interface called GUIDON-WATCH. In parallel, other AI researchers developed general task-oriented theories of knowledge-based problem-solving, for example, Chandrasekaran's theories of Generic Tasks (Chandrasekaran 1988) and Task Structures <ref> (Chandrasekaran 1989) </ref>. Chandrasekaran, Tanner and Joseph-son (1989) in particular argued that explanations in interactive knowledge-based systems need to capture the functional and strategic content of problem solving at the task level. Before we go further with this discussion, it may be useful to make some key distinctions.
Reference: <author> Clancey, W. </author> <title> Heuristic Classification. </title> <journal> Artificial Intelligence, </journal> <volume> 27(3): </volume> <pages> 289-350, </pages> <year> 1985. </year>
Reference-contexts: Explanations in GUIDON initially were expressed in the language of goals, production rules, and rule activation and selection. But the need for generating useful and usable ex-planations soon led to the theory of heuristic classification <ref> (Clancey 1985) </ref> that provided a task-level account of MYCIN's reasoning. This task-level model in turn led to the development of a new system called NEOMYCIN, and to an new explanatory interface called GUIDON-WATCH.
Reference: <author> Clancey, W. </author> <title> Knowledge-Based Tutoring: The Guidon Program. </title> <address> Cambridge. MA: </address> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Starting with MYCIN (Shortliffe 1976), which probably was the first useful and usable knowledge system, explanation became an increasingly important issue. In the context of MYCIN, for example, AI researchers first built an explanatory interface called GUIDON for tutoring medical students <ref> (Clancey 1987) </ref>. Explanations in GUIDON initially were expressed in the language of goals, production rules, and rule activation and selection. But the need for generating useful and usable ex-planations soon led to the theory of heuristic classification (Clancey 1985) that provided a task-level account of MYCIN's reasoning.
Reference: <author> Fischer, G., Grudin, J., Lemke, A., McCall, R., Ostwald, J., Reeves, B. and Shipman, F. </author> <title> Supporting Indirect Collaborative Design with Integrated Knowledge-Based Design Environment. Human-Computer Interactions, </title> <booktitle> 7(3) </booktitle> <pages> 281-314, </pages> <year> 1992. </year>
Reference: <author> Goel, A. </author> <title> A Model-based Approach to Case Adaptation. </title> <booktitle> Proc. Thirteenth Annual Conference of the Cognitive Science Society, </booktitle> <publisher> Lawrence Erlbaum Associates, </publisher> <pages> pp. 143-148, </pages> <month> August </month> <year> 1991. </year>
Reference: <author> Goel, A. </author> <title> Representation of Design Functions in Experience-Based Design. Intelligent Computer Aided Design, </title> <editor> D. Brown, M. Waldron, and H. Yoshikawa (editors), </editor> <publisher> North-Holland, </publisher> <pages> pp. 283-308, </pages> <year> 1992. </year>
Reference: <author> Goel, A. and Chandrasekaran, B. </author> <title> Functional Representation of Designs and Redesign Problem Solving. </title> <booktitle> Proc. Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <pages> pp. 1388-1394, </pages> <year> 1989. </year>
Reference: <author> Goel, A. and Chandrasekaran, B. </author> <title> Case-Based Design: A Task Analysis. </title> <booktitle> In Artificial Intelligence Approaches to Engineering Design, Volume II: Innovative Design, </booktitle> <editor> Tong and D. Sriram (editors), </editor> <publisher> Academic Press, </publisher> <pages> pp. 165-184, </pages> <year> 1992. </year>
Reference: <author> Goel, A., Pearce, M., Malkawi, A. and Liu, K. </author> <title> A Cross-Domain Experiment in Case-Based Design Support: </title> <booktitle> ArchieTutor. Proc. AAAI Workshop on Case-Based Reasoning, </booktitle> <pages> pp. 111-117, </pages> <year> 1993. </year>
Reference-contexts: None of these interactive design environments provide any kind of explanatory interface. This is also true of our own earlier work on interactive case-based design aiding systems such as Archie (Pearce et al 1992), AskJef (Barber et al 1992) and ArchieTutor <ref> (Goel et al 1993) </ref>. These systems pro-vided human designers with access to design case libraries in different domains. AskJef, for example, used multi-media (text, graphics, animation and sound) for enabling the navigation and browsing of a library of annotated design cases in the domain of software interface design.
Reference: <author> Goel, A., Gomez, A., Grue, N., Murdock, J. W., Recker, M., and Govindaraj, T. </author> <title> Design Explanations in Interactive Design Environments. </title> <booktitle> In Proc. Fourth International Conference on AI in Design, </booktitle> <address> Palo Alto, </address> <month> June </month> <year> 1996. </year> <title> Gru, N.e. Illustration, Explanation and Navigation of Physical Devices and Design Processes. </title> <institution> M.Thesis, S., College of Computing, Georgia Institute of Technology, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: In this section, we describe only how Interactive Kritik explains the case-based reasoning in Kritik3, not the device designs the system generates. 1 1 Interactive Kritik's explanation of devices is described in <ref> (Goel et al 1996) </ref>. 4.1 Explanation of Case-Based Reasoning in Interactive Kritik Interactive Kritik's architecture consists of two agents: a case-based design agent in the form of Kritik3 and an user interface agent 2 .
Reference: <author> Hua, K. and Faltings, B. </author> <title> Exploring Case-Based Building Design CADRE. </title> <journal> AI(EDAM), </journal> <volume> 7(2) </volume> <pages> 135-143, </pages> <year> 1993. </year>
Reference: <author> Kolodner, J. </author> <title> Case-Based Reasoning, </title> <address> Sam Mateo, CA: </address> <publisher> Morgan Kauffman, </publisher> <year> 1993. </year>
Reference: <author> McDermott, J. </author> <title> Preliminary Steps Towards a Taxonomy of Problem Solving Methods. Automating Knowledge Acquisition for Expert Systems, </title> <editor> S. Marcus (editor), </editor> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1988. </year>
Reference: <author> Maher, M. L., Balachandran, M. B., and Zhang, D. </author> <title> Case-Based Reasoning in Design, </title> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1995. </year>
Reference: <author> Mostow, J. </author> <title> Design by Derivational Analogy: Issues in the Automated Replay of Design Plans. </title> <journal> Artificial Intelligence. </journal> <year> 1989. </year>
Reference: <author> Myers, B. and Zanden, B. </author> <title> Environment for rapidly creating interactive design tools. </title> <journal> Visual Computer, </journal> <volume> 8 </volume> <pages> 94-116, </pages> <year> 1992. </year>
Reference-contexts: For example, Adaptation method used for the design adaptation task. It illustrates a deeper level of Kritik3's task-method decomposition. 2 The interface is built using the Garnet tool <ref> (Myers and Zanden 1992) </ref>. Fig. 3. The Overall Design Task Fig. 4. The Design Adaptation Task 4.2 Reflection on Case-Based Reasoning in Interactive Kritik Interactive Kritik makes available its reasoning traces in the form of meta-cases.
Reference: <author> Pearce, M., Goel, A., Kolodner, J., Zimring, C., Sentosa, L. and Billington, R. </author> <title> Case-Based Design Support: A Case Study in Architectural Design. </title> <journal> IEEE Expert. </journal> <volume> 7(5) </volume> <pages> 14-20, </pages> <year> 1992. </year>
Reference-contexts: None of these interactive design environments provide any kind of explanatory interface. This is also true of our own earlier work on interactive case-based design aiding systems such as Archie <ref> (Pearce et al 1992) </ref>, AskJef (Barber et al 1992) and ArchieTutor (Goel et al 1993). These systems pro-vided human designers with access to design case libraries in different domains.
Reference: <author> Rittel, H. </author> <title> On the Planning Crisis: System Analysis of the First and Second Generations. </title> <journal> Bedriftsokonomen, </journal> <volume> 8 </volume> <pages> 390-396, </pages> <year> 1972. </year>
Reference-contexts: Fischer et al have advocated that interactive design environments should provide access not just to a catalog of past designs but also to the reasoning that led to the specific designs in the catalog. Their JANUS system adopts the issue-based view of group problem solving <ref> (Rittel 1972) </ref>, and provides a user with a trace of the issues that arose in a past design problem-solving episode, the arguments made for and against various design choices, and the justifications for the design decisions.
Reference: <author> Shortliffe, E. </author> <title> Computer-Based Medical Consultation: MYCIN, </title> <address> New York: </address> <publisher> American Elsevier, </publisher> <year> 1976. </year>
Reference-contexts: This issue is especially important in moving laboratory case-based systems into real work environments. Explanation of reasoning is a recurrent theme in AI research. Consider, for example, the history of AI research on knowledge systems. Starting with MYCIN <ref> (Shortliffe 1976) </ref>, which probably was the first useful and usable knowledge system, explanation became an increasingly important issue. In the context of MYCIN, for example, AI researchers first built an explanatory interface called GUIDON for tutoring medical students (Clancey 1987).
Reference: <author> Steels, L. </author> <title> Components of Expertise. </title> <journal> AI Magazine, </journal> <volume> 11(2) </volume> <pages> 29-49, </pages> <year> 1988. </year>
Reference: <author> Stroulia, E. and Goel, A. </author> <title> A Model-Based Approach to Reflective Learning. </title> <booktitle> In Proc. 1994 European Conference on Machine Learning, Catania, </booktitle> <address> Italy, </address> <month> April </month> <year> 1994, </year> <pages> pp. </pages> <note> 287-306; available as Lecture Notes in Artificial Intelligence 784 Machine Learning, </note> <editor> F. Bergadano and L. De Raedt (editors), </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1994. </year>
Reference: <author> Stroulia, E. and Goel, A. </author> <title> Reflective Self-Adaptive Problem Solvers. </title> <booktitle> In Proc. 1994 Eu-ropean Conference on Knowledge Acquisition, </booktitle> <address> Germany, </address> <note> September 1994; available as Lecture Notes in Artificial Intelligence A Future for Knowledge Acquisition, L. </note>
Reference: <editor> Steels, G. Schreiber, and W. Van de Velde (editors), </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1994. </year>
Reference: <author> Voss, A., Coulon, C-H, Grather, W., Linowski, B., Schaaf, J., Barstsch, Sporl, B., Borner, K., Tammer, E., Durscke, H., and Knauff, M. </author> <title> Retrieval of Similar Layouts About a Very Hybrid Approach in FABEL. </title> <booktitle> Proc. Third International Conference on AI in Design, Lausanne, </booktitle> <pages> pp 625-640, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: Maher, Balachandran and Zhang (1995) provide a recent summary of major case-based design systems, such as their own CADSYN and CASECAD systems, CADET (Sycara et al 1991), CADRE (Hua and Faltings), and FABEL <ref> (Voss et al 1994) </ref>. None of these interactive design environments provide any kind of explanatory interface. This is also true of our own earlier work on interactive case-based design aiding systems such as Archie (Pearce et al 1992), AskJef (Barber et al 1992) and ArchieTutor (Goel et al 1993).
Reference: <author> Wielinga, B., Schreiber, G. and Breuker, J. KADS: </author> <title> A Modelling Approach to Knowledge Acquisition. </title> <journal> Knowledge Engineering, </journal> <volume> 4 </volume> <pages> 5-53, </pages> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 33

