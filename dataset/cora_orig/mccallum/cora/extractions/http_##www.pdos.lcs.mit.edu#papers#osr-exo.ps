URL: http://www.pdos.lcs.mit.edu/papers/osr-exo.ps
Refering-URL: http://www.pdos.lcs.mit.edu/PDOS-papers.html
Root-URL: 
Title: The Operating System Kernel as a Secure Programmable Machine  
Author: Dawson R. Engler M. Frans Kaashoek James W. O'Toole Jr. 
Address: 545 Technology Square Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: To provide modularity and performance, operating system kernels should have only minimal embedded functionality. Today's operating systems are large, inefficient and, most importantly, inflexible. In our view, most operating system performance and flexibility problems can be eliminated simply by pushing the operating system interface lower. Our goal is to put abstractions traditionally implemented by the kernel out into user-space, where user-level libraries and servers abstract the exposed hardware resources. To achieve this goal, we have defined a new operating system structure, exokernel, that safely exports the resources defined by the underlying hardware. To enable applications to benefit from full hardware functionality and performance, they are allowed to download additions to the supervisor-mode execution environment. To guarantee that these extensions are safe, techniques such as code inspection, inlined cross-domain procedure calls, and secure languages are used. To test and evaluate exokernels and their customization techniques a prototype exokernel, Aegis, is being developed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: a new kernel foundation for UNIX development. </title> <booktitle> Proc. Summer 1986 USENIX Conference, </booktitle> <pages> pages 93-112, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [16, 26, 1, 28, 30, 10] </ref>. Anderson [2] and Kiczales et al. [18] also recently argued for minimalism and customization.
Reference: [2] <author> T.E. Anderson. </author> <title> The case for application-specific operating systems. </title> <booktitle> In Third Workshop on Workstation Operating Systems, </booktitle> <pages> pages 92-94, </pages> <year> 1992. </year>
Reference-contexts: Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility [16, 26, 1, 28, 30, 10]. Anderson <ref> [2] </ref> and Kiczales et al. [18] also recently argued for minimalism and customization.
Reference: [3] <author> T.E. Anderson, H.M. Levy, B.N. Bershad, and E.D. La-zowska. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In Proc. Fourth International Conference on ASPLOS, </booktitle> <year> 1991. </year>
Reference-contexts: Additionally, in these mi-crokernels the supervisor mode still defines a high-level, fixed interface among the kernel, user-level services, and applications. Therefore, applications suffer from a large number of protection domain crossings. These crossings are typically expensive, as they in volve entering supervisor mode and changing address spaces <ref> [3, 7, 25] </ref>. The disadvantages of fixed operating system policies are made worse by the growing diversity in hardware platforms and rapid advances of technology. For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk.
Reference: [4] <author> A.W. Appel and K. Li. </author> <title> Virtual memory primitives for user programs. </title> <booktitle> In Proc. Fourth International Conference on ASPLOS, </booktitle> <pages> pages 96-107, </pages> <address> Santa Clara, CA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. tions are inadequate, their implementation slow, or both <ref> [4, 5, 14, 15, 22, 29, 31] </ref>.
Reference: [5] <author> B.N. Bershad, C. Chambers, S. Eggers, C. Maeda, D. Mc--Namee, P. Pardyak, S. Savage, and E. Sirer. </author> <title> Spin an extensible microkernel for application-specific operating system services. </title> <type> TR 94-03-03, </type> <institution> Univ. of Washington, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. tions are inadequate, their implementation slow, or both <ref> [4, 5, 14, 15, 22, 29, 31] </ref>. <p> Furthermore, the Aegis system will use runtime code generation to efficiently execute application kernel extensions. Concurrently with our work the SPIN <ref> [5] </ref> and Cache Kernel [8] projects are also investigating adaptable kernels that allow applications to make policy decisions efficiently. The SPIN system encapsulates policies in spindles that can be dynamically loaded into the kernel.
Reference: [6] <author> M.A. Blumrich, K. Li, R. Alpert, C. Dubnicki, E.W. Fel-ten, and J. Sandberg. </author> <title> Virtual memory mapped network interface for the SHRIMP multicomputer. </title> <booktitle> The 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 142-153, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk. As an example of rapid advances in technology, new architectures support protected user-level communication that requires little involvement of the operating system <ref> [6, 19] </ref>. By fixing policies operating system software prevents applications from evolving with the hardware. By moving management of resources out of the operating system kernel, an exokernel allows aggressive customization.
Reference: [7] <author> J. Bradley Chen and Brian N. Bershad. </author> <title> The impact of operating system structure on memory system performance. </title> <booktitle> Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <year> 1993. </year>
Reference-contexts: Additionally, in these mi-crokernels the supervisor mode still defines a high-level, fixed interface among the kernel, user-level services, and applications. Therefore, applications suffer from a large number of protection domain crossings. These crossings are typically expensive, as they in volve entering supervisor mode and changing address spaces <ref> [3, 7, 25] </ref>. The disadvantages of fixed operating system policies are made worse by the growing diversity in hardware platforms and rapid advances of technology. For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk.
Reference: [8] <author> D. Cheriton and K. Duda. </author> <title> A caching model of operating system kernel functionality. </title> <booktitle> Proceedings of the Sixth SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Furthermore, the Aegis system will use runtime code generation to efficiently execute application kernel extensions. Concurrently with our work the SPIN [5] and Cache Kernel <ref> [8] </ref> projects are also investigating adaptable kernels that allow applications to make policy decisions efficiently. The SPIN system encapsulates policies in spindles that can be dynamically loaded into the kernel. To ensure safety, spindles will be written in a pointer-secure language and will be translated by a trusted compiler. <p> Additionally, the Cache Kernel has an alarmist view about downloading application code into the kernel <ref> [8] </ref>; this restricts the efficiency and flexibility of their approach. Techniques for certifying the safety of code include inspection and sandboxing. Deutsch showed how to safely introduce user-written instrumentation code into a running kernel by bounding loads, stores, jumps and runtime [11].
Reference: [9] <author> R. J. Creasy. </author> <title> The origin of the VM/370 time-sharing system. </title> <journal> IBM J. Research and Development, </journal> <volume> 25(5) </volume> <pages> 483-490, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: The interface provided by the VM/370 operating system <ref> [9] </ref> is very similar to what would be provided by an ideal exokernel, namely the raw hardware. However, the important difference is that VM/370 provides this interface by virtualizing the entire base-machine.
Reference: [10] <author> H. Custer. </author> <title> Inside Windows/NT. </title> <publisher> Microsoft Press, </publisher> <address> Red-mond, WA, </address> <year> 1993. </year>
Reference-contexts: Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [16, 26, 1, 28, 30, 10] </ref>. Anderson [2] and Kiczales et al. [18] also recently argued for minimalism and customization.
Reference: [11] <author> P. Deutsch and C.A. Grant. </author> <title> A flexible measurement tool for software systems. </title> <booktitle> Information Processing 71, </booktitle> <year> 1971. </year>
Reference-contexts: These techniques ensure that application code will not access privileged instructions or protected data in uncontrolled ways: 1. Code Inspection. Code introduced into the secure programmable machine must be free of privileged instructions. As shown by Deutsch <ref> [11] </ref>, machine code can be inspected to guard against wild loads, stores, and jumps. Execution time can also be controlled by bounding loop iteration counts. <p> Techniques for certifying the safety of code include inspection and sandboxing. Deutsch showed how to safely introduce user-written instrumentation code into a running kernel by bounding loads, stores, jumps and runtime <ref> [11] </ref>. Making existing binaries safe has been done by Wahbe [32]. Although this technique will be useful for controlling entry points, we expect that loads and stores can be constrained more efficiently by changing the address context quickly within supervisor mode.
Reference: [12] <author> D.R. Engler and T.A. Proebsting. </author> <title> DCG: An efficient, retargetable dynamic code generation system. </title> <booktitle> Proceedings of ASPLOS-VI, </booktitle> <pages> pages 263-272, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Using a type-safe language and a trusted compiler might enable closer integration of application and kernel code, while simultaneously increasing portability. An example of this is our packet-filter engine, which uses dynamic code generation <ref> [12] </ref> to directly compile packet-filter predicates specified in a declarative, type-safe language. We expect each of these techniques to be useful for some kinds of exokernel extensions, depending on the tradeoffs involved. 4 Related Work Many early operating systems papers discussed the need for extensible kernels [34, 17, 21, 33]. <p> Synthesis is an innovative operating system that has inspired some of our work [22]; for example, the use of runtime code generation. The Aegis system, however, uses a portable runtime code generation system <ref> [12] </ref>, while the synthesis kernel is written in assembly, and uses ad-hoc runtime code generation macros to specialize system calls. Furthermore, the Aegis system will use runtime code generation to efficiently execute application kernel extensions.
Reference: [13] <author> Per Brinch Hansen. </author> <title> The nucleus of a multiprogramming system. </title> <journal> Communications of the ACM, </journal> <volume> 13(4) </volume> <pages> 238-241, </pages> <month> April </month> <year> 1970. </year>
Reference-contexts: We expect each of these techniques to be useful for some kinds of exokernel extensions, depending on the tradeoffs involved. 4 Related Work Many early operating systems papers discussed the need for extensible kernels [34, 17, 21, 33]. Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper <ref> [13] </ref> are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility [16, 26, 1, 28, 30, 10].
Reference: [14] <author> J.H. Hartman, A.B. Montz, David Mosberger, S.W. O'Malley, L.L. Peterson, and T.A. Proebsting. </author> <title> Scout: A communication-oriented operating system. </title> <type> Technical Report TR 94-20, </type> <institution> University of Arizona, </institution> <address> Tucson, AZ, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. tions are inadequate, their implementation slow, or both <ref> [4, 5, 14, 15, 22, 29, 31] </ref>.
Reference: [15] <author> Kieran Harty and David R. Cheriton. </author> <title> Application-controlled physical memory using external page-cache management. </title> <booktitle> Proc. of the Fifth Conf. on Architectural Support for Programming languages and Operating Systems, </booktitle> <pages> pages 187-199, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. tions are inadequate, their implementation slow, or both <ref> [4, 5, 14, 15, 22, 29, 31] </ref>. <p> For example, file system and relational database applications often have different storage access patterns and therefore benefit from different buffer and disk management policies. Similar policy conflicts arise in almost every area of resource management (for example, in virtual memory management <ref> [15] </ref>). Microker-nels have pushed some policy decisions out of the kernel into user-level servers. However, these policies cannot, generally, be altered or replaced by non-privileged applications. Additionally, in these mi-crokernels the supervisor mode still defines a high-level, fixed interface among the kernel, user-level services, and applications.
Reference: [16] <author> D. Hildebrand. </author> <title> An architectural overview of QNX. </title> <booktitle> Proc. Usenix Workshop on Micro-kernels and Other Kernel Architectures, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [16, 26, 1, 28, 30, 10] </ref>. Anderson [2] and Kiczales et al. [18] also recently argued for minimalism and customization.
Reference: [17] <author> D.H.R. </author> <title> Huxtable and M.T. Warwick. Dynamic supervisors | their design and construction. </title> <booktitle> Proceedings of the First ACM Symposium on Operating Systems Principles, </booktitle> <year> 1967. </year>
Reference-contexts: We expect each of these techniques to be useful for some kinds of exokernel extensions, depending on the tradeoffs involved. 4 Related Work Many early operating systems papers discussed the need for extensible kernels <ref> [34, 17, 21, 33] </ref>. Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34].
Reference: [18] <author> G. Kiczales, J. Lamping, C. Maeda, D. Keppel, and D. McNamee. </author> <title> The need for customizable operating systems. </title> <booktitle> In Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 165-170, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility [16, 26, 1, 28, 30, 10]. Anderson [2] and Kiczales et al. <ref> [18] </ref> also recently argued for minimalism and customization.
Reference: [19] <author> J. Kuskin et al. </author> <title> The Stanford FLASH multiprocessor. </title> <booktitle> The 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 302-313, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk. As an example of rapid advances in technology, new architectures support protected user-level communication that requires little involvement of the operating system <ref> [6, 19] </ref>. By fixing policies operating system software prevents applications from evolving with the hardware. By moving management of resources out of the operating system kernel, an exokernel allows aggressive customization.
Reference: [20] <author> B.W. Lampson. </author> <title> On reliable and extendable operating systems. State of the Art Report, </title> <type> 1, </type> <year> 1971. </year>
Reference-contexts: We expect each of these techniques to be useful for some kinds of exokernel extensions, depending on the tradeoffs involved. 4 Related Work Many early operating systems papers discussed the need for extensible kernels [34, 17, 21, 33]. Lamp-son's description of the CAL-TSS <ref> [20] </ref> and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility [16, 26, 1, 28, 30, 10].
Reference: [21] <author> B.W. Lampson and H.E. Sturgis. </author> <title> Reflections on an operating system design. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 251-265, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: We expect each of these techniques to be useful for some kinds of exokernel extensions, depending on the tradeoffs involved. 4 Related Work Many early operating systems papers discussed the need for extensible kernels <ref> [34, 17, 21, 33] </ref>. Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34].
Reference: [22] <author> H. Massalin. </author> <title> Synthesis: an efficient implementation of fundamental operating system services. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <year> 1992. </year>
Reference-contexts: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. tions are inadequate, their implementation slow, or both <ref> [4, 5, 14, 15, 22, 29, 31] </ref>. <p> In contrast, the exokernel exports hardware resources rather than emulating them, allowing an efficient and fast implementation. Synthesis is an innovative operating system that has inspired some of our work <ref> [22] </ref>; for example, the use of runtime code generation. The Aegis system, however, uses a portable runtime code generation system [12], while the synthesis kernel is written in assembly, and uses ad-hoc runtime code generation macros to specialize system calls.
Reference: [23] <author> S.J. Mullender, G. van Rossum, A.S. Tanenbaum, R. van Renesse, and H. van Staveren. </author> <title> Amoeba: a distributed operating system for the 1990s. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 44-53, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The resources exported by the exokernel include physical memory (divided into pages), the CPU (divided into time-slices), the TLB, context-identifiers, and disk memory (divided into blocks). Access to physical resources is controlled through 64-bit capabilities that rely on "security though obscurity" <ref> [23] </ref>. 1 The operational view of access control is that each resource (e.g., time-slices, pages) is associated with a capability. Every point the resource could be used is protected by a guard. When an application wishes to use a resource it presents the capability to the guard.
Reference: [24] <author> A.C. Myers. </author> <title> Resolving the integrity/performance conflict. </title> <booktitle> In Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 156-160, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: The use of a typesafe language to allow user applications to augment the operating system has been explored in a personal workstation environment [27]. Myers argued for using a type safe language to load application code into the object manager in a persistent object system <ref> [24] </ref>. 5 Conclusions Operating systems must shed the burden of their traditional policy-laden services. We suggest exokernels as an new minimal operating system design.
Reference: [25] <author> David Nagle, Richard Uhlig, Tim Stanley, Stuart Sechrest, Trevor Mudge, and Richard Brown. </author> <title> Design tradeoffs for software-managed TLBs. </title> <booktitle> 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 27-38, </pages> <year> 1993. </year>
Reference-contexts: Additionally, in these mi-crokernels the supervisor mode still defines a high-level, fixed interface among the kernel, user-level services, and applications. Therefore, applications suffer from a large number of protection domain crossings. These crossings are typically expensive, as they in volve entering supervisor mode and changing address spaces <ref> [3, 7, 25] </ref>. The disadvantages of fixed operating system policies are made worse by the growing diversity in hardware platforms and rapid advances of technology. For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk.
Reference: [26] <author> R.F. Rashid and G. Robertson. </author> <title> Accent: A communication oriented network operating system kernel. </title> <booktitle> Proceedings of the Eighth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 64-75, </pages> <month> December </month> <year> 1981. </year>
Reference-contexts: Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [16, 26, 1, 28, 30, 10] </ref>. Anderson [2] and Kiczales et al. [18] also recently argued for minimalism and customization.
Reference: [27] <author> D.D. Redell, Y.K. Dalal, T.R. Horsley, H.C. Lauer, W.C. Lynch, P.R. McJones, H.G. Murray, </author> <title> and S.C. Purcell. Pilot: An operating system for a personal computer. </title> <journal> Communications of the ACM, </journal> <volume> 23(2) </volume> <pages> 81-92, </pages> <month> February </month> <year> 1980. </year>
Reference-contexts: The use of a typesafe language to allow user applications to augment the operating system has been explored in a personal workstation environment <ref> [27] </ref>. Myers argued for using a type safe language to load application code into the object manager in a persistent object system [24]. 5 Conclusions Operating systems must shed the burden of their traditional policy-laden services. We suggest exokernels as an new minimal operating system design.
Reference: [28] <author> M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrmann, C. Kaiser, S. Langlois, P. Leonard, and W. Neuhauser. </author> <title> Chorus distributed operating system. </title> <journal> Computing Systems, </journal> <volume> 1(4) </volume> <pages> 305-370, </pages> <year> 1988. </year>
Reference-contexts: Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [16, 26, 1, 28, 30, 10] </ref>. Anderson [2] and Kiczales et al. [18] also recently argued for minimalism and customization.
Reference: [29] <author> M. Stonebraker. </author> <title> Operating system support for database management. </title> <journal> CACM, </journal> <volume> 24(7) </volume> <pages> 412-418, </pages> <month> July </month> <year> 1981. </year>
Reference-contexts: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. tions are inadequate, their implementation slow, or both <ref> [4, 5, 14, 15, 22, 29, 31] </ref>.
Reference: [30] <author> A.S. Tanenbaum, R. van Renesse, H. van Staveren, G. Sharp, S.J. Mullender, A. Jansen, and G. van Rossum. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12) </volume> <pages> 46-63, </pages> <month> Decem-ber </month> <year> 1990. </year>
Reference-contexts: Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [16, 26, 1, 28, 30, 10] </ref>. Anderson [2] and Kiczales et al. [18] also recently argued for minimalism and customization.
Reference: [31] <author> Chandramohan A. Thekkath and Henry M. Levy. </author> <title> Hardware and software support for efficient exception handling. </title> <booktitle> In Sixth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-VI), </booktitle> <year> 1994. </year>
Reference-contexts: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. tions are inadequate, their implementation slow, or both <ref> [4, 5, 14, 15, 22, 29, 31] </ref>.
Reference: [32] <author> R. Wahbe, S. Lucco, T. Anderson, and S. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 203-216, </pages> <year> 1993. </year>
Reference-contexts: As another example, the exokernel allows applications to directly manipulate context-identifiers, enabling efficient protection domain switching, an action important to many applications <ref> [32] </ref>. 3 A Secure Programmable Machine We expect the operating system kernel to provide a programmable machine that permits applications to safely and efficiently manage system resources. The secure machine executes in supervisor mode because it uses privileged instructions. <p> Inlined cross-domain calls. Code inspection that prohibits indirect loads and stores will be too restrictive for many application purposes. Wahbe <ref> [32] </ref> shows that sandboxing can be used to restrict the domain of indirect memory operations, but with an overhead of several instructions per guarded operation. The motivation of sandboxing is to simulate address-space protection domains when cross-domain calls are expensive. <p> Techniques for certifying the safety of code include inspection and sandboxing. Deutsch showed how to safely introduce user-written instrumentation code into a running kernel by bounding loads, stores, jumps and runtime [11]. Making existing binaries safe has been done by Wahbe <ref> [32] </ref>. Although this technique will be useful for controlling entry points, we expect that loads and stores can be constrained more efficiently by changing the address context quickly within supervisor mode.
Reference: [33] <author> B.A. Wichmann. </author> <title> A modular operating system. </title> <booktitle> Proc. IFIP Cong. </booktitle> <year> 1968, 1968. </year>
Reference-contexts: We expect each of these techniques to be useful for some kinds of exokernel extensions, depending on the tradeoffs involved. 4 Related Work Many early operating systems papers discussed the need for extensible kernels <ref> [34, 17, 21, 33] </ref>. Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34].
Reference: [34] <author> W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack. HYDRA: </author> <title> The kernel of a multiprocessing operating system. </title> <journal> Communications of the ACM, </journal> <volume> 17(6) </volume> <pages> 337-345, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: We expect each of these techniques to be useful for some kinds of exokernel extensions, depending on the tradeoffs involved. 4 Related Work Many early operating systems papers discussed the need for extensible kernels <ref> [34, 17, 21, 33] </ref>. Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [34]. <p> Lamp-son's description of the CAL-TSS [20] and Brinch Hansen's microkernel paper [13] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets <ref> [34] </ref>. Modern revisitations of microkernels have also argued for kernel extensibility [16, 26, 1, 28, 30, 10]. Anderson [2] and Kiczales et al. [18] also recently argued for minimalism and customization.
References-found: 34

