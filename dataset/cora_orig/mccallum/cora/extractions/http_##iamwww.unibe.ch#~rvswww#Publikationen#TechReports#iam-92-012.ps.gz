URL: http://iamwww.unibe.ch/~rvswww/Publikationen/TechReports/iam-92-012.ps.gz
Refering-URL: http://iamwww.unibe.ch/~rvswww/Publikationen/index.html
Root-URL: 
Email: ladkin@iam.unibe.ch, leue@iam.unibe.ch  
Title: An Automaton Interpretation of Message Sequence Charts  
Author: Peter B. Ladkin Stefan Leue 
Date: June 1992  
Address: Langgassstrasse 51 CH-3012 Bern, Switzerland  
Affiliation: University of Berne Institute for Informatics and Applied Mathematics  
Pubnum: IAM 92-012  
Abstract-found: 0
Intro-found: 1
Reference: [AS87] <author> B. Alpern and F.B. Schneider. </author> <title> Recognizing safety and liveness. </title> <journal> Distributed Computing, </journal> <volume> 2 </volume> <pages> 117-126, </pages> <year> 1987. </year>
Reference-contexts: This versatility is evidence that they represent a natural syntactical abstraction useful for many different forms of protocol specification. * Buchi automata methods have already been shown useful in distributed system specification [VW86b], [VW86a], <ref> [AS87] </ref>, [AS89].
Reference: [AS89] <author> B. Alpern and F.B. Schneider. </author> <title> Verifying temporal properties without temporal logic. </title> <journal> ACM Transactions on Programming Languages, </journal> <volume> 11(1) </volume> <pages> 147-167, </pages> <month> jan </month> <year> 1989. </year>
Reference-contexts: This versatility is evidence that they represent a natural syntactical abstraction useful for many different forms of protocol specification. * Buchi automata methods have already been shown useful in distributed system specification [VW86b], [VW86a], [AS87], <ref> [AS89] </ref>. Use may therefore be made of the established connections between reliability properties and Buchi automata [AS89] to make explicit the reliability of communication in MSC specifications. * By factoring the semantic definition into the transition graph definition and the 2 acceptance criterion definition, we separate the reliability properties of the <p> versatility is evidence that they represent a natural syntactical abstraction useful for many different forms of protocol specification. * Buchi automata methods have already been shown useful in distributed system specification [VW86b], [VW86a], [AS87], <ref> [AS89] </ref>. Use may therefore be made of the established connections between reliability properties and Buchi automata [AS89] to make explicit the reliability of communication in MSC specifications. * By factoring the semantic definition into the transition graph definition and the 2 acceptance criterion definition, we separate the reliability properties of the commu-nication, which are not explicit in the MSC specification, from the set of global states of
Reference: [GHL + 92] <author> J. Grabowski, D. Hogrefe, P. Ladkin, S. Leue, and R. Nahm. </author> <title> Conformance testing a tool for the generation of test cases. Project Report, project contract no. </title> <type> 233, </type> <institution> funded by Swiss PTT, University of Berne, </institution> <month> may </month> <year> 1992. </year>
Reference-contexts: Different reliability assumptions yield different automata, all with the same underlying transition graph. The advantages of this approach are: * Ne/sig graphs have also been used to give an abstract syntax for other message-passing specification methods such as simple SDL (sSDL) <ref> [GHL + 92] </ref> and loop processes [LS91]. This versatility is evidence that they represent a natural syntactical abstraction useful for many different forms of protocol specification. * Buchi automata methods have already been shown useful in distributed system specification [VW86b], [VW86a], [AS87], [AS89].
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1985. </year>
Reference-contexts: Thus, we consider events as atomic (i.e. indivisible). It is beyond the scope of this paper to debate interleaving vs. partial-order semantics, so we merely note that interleaving semantics is appropriate for many important specification styles, including TLA [Lam91], and CSP <ref> [Hoa85] </ref>. We identify the set of system traces specified by the MSC with the set of accepted traces of the Buchi automaton we define. 3 Chapter 2 The ne=sig graph We define general ne/sig graphs.
Reference: [Lam91] <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <type> Technical Report 79, </type> <institution> Digital Equipment Corporation, </institution> <month> dec </month> <year> 1991. </year>
Reference-contexts: Thus, we consider events as atomic (i.e. indivisible). It is beyond the scope of this paper to debate interleaving vs. partial-order semantics, so we merely note that interleaving semantics is appropriate for many important specification styles, including TLA <ref> [Lam91] </ref>, and CSP [Hoa85]. We identify the set of system traces specified by the MSC with the set of accepted traces of the Buchi automaton we define. 3 Chapter 2 The ne=sig graph We define general ne/sig graphs.
Reference: [LS91] <author> P.B. Ladkin and B.B. Simons. </author> <title> Compile time analysis of communicating loop processes. </title> <type> Technical report, </type> <institution> IBM Almaden RJ 8488, </institution> <month> nov </month> <year> 1991. </year>
Reference-contexts: Different reliability assumptions yield different automata, all with the same underlying transition graph. The advantages of this approach are: * Ne/sig graphs have also been used to give an abstract syntax for other message-passing specification methods such as simple SDL (sSDL) [GHL + 92] and loop processes <ref> [LS91] </ref>. This versatility is evidence that they represent a natural syntactical abstraction useful for many different forms of protocol specification. * Buchi automata methods have already been shown useful in distributed system specification [VW86b], [VW86a], [AS87], [AS89]. <p> Consider a system whose unfolded ne/sig graph contains precisely one cycle per process, and assume no branching. Then the cycles are terminal, i.e. there are no outgoing edges from the cycles (which would violate branching). Then the processes are loop processes as defined in <ref> [LS91] </ref>. Let a i 2 P i be some node in P i 's cycle, for i n, chosen such that G = fa i j i ng 2 Q is a gss (we omit the easy proof that there is some such G). Let F = fGg.
Reference: [MP90] <author> Z. Manna and A. Pnueli. </author> <title> A hierarchy of temporal properties. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 377-408. </pages> <publisher> ACM Press, </publisher> <month> aug </month> <year> 1990. </year>
Reference-contexts: Clarifying different assumptions about the inherent properties of MSCs may therefore be approached by formal description techniques such as temporal logic. The connections between reliability properties of systems and temporal logic is shown in <ref> [MP90] </ref>. The connections between various end-state definitions and reliability properties of the communications in an MSC specification are the subject of continuing research. Acknowledgements Development of the ne/sig graph concept benefitted from discussions with Robert Nahm.
Reference: [Tho90] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <booktitle> In Handbook of Theoretical Computer Science, chapter 4, </booktitle> <pages> pages 132-191. </pages> <publisher> Elsevier Science Publisher, </publisher> <year> 1990. </year>
Reference-contexts: We show that a single such graph may be used to represent an MSC specification. From this graph, we obtain the transition graph of a Buchi automaton <ref> [Tho90] </ref> of global system states. Buchi automata may be defined with different acceptance criteria which we show are related to various reliability assumptions for signal transmission that may be made by the specification. <p> A global state automaton for GST G M = (Q; q 0 ; T M ) is A M 4 where F Q is a set of final states. Acceptance is Buchi acceptance <ref> [Tho90] </ref>, namely an infinite word is accepted iff the automata cycles through some state in F infinitely often on the word (the alphabet is the set of events, e.g. ?a; !b, and a word is thus a possibly infinite sequence of events, i.e. a possible trace).
Reference: [VW86a] <author> M. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 332-344, </pages> <year> 1986. </year>
Reference-contexts: This versatility is evidence that they represent a natural syntactical abstraction useful for many different forms of protocol specification. * Buchi automata methods have already been shown useful in distributed system specification [VW86b], <ref> [VW86a] </ref>, [AS87], [AS89].
Reference: [VW86b] <author> M. Vardi and P. Wolper. </author> <title> Automata theoretic techniques for modal logics of programs. </title> <journal> Journal of Comput. Systems. Sci., </journal> <volume> 32 </volume> <pages> 183-221, </pages> <year> 1986. </year>
Reference-contexts: This versatility is evidence that they represent a natural syntactical abstraction useful for many different forms of protocol specification. * Buchi automata methods have already been shown useful in distributed system specification <ref> [VW86b] </ref>, [VW86a], [AS87], [AS89].
Reference: [X92] <author> CCITT SG X. </author> <title> Draft recommendation Z.120: Message sequence chart. </title> <note> Submitted to CCITT, </note> <month> mar </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: Message Sequence Charts or MSCs (also called Time Sequence Charts) are a form of system specification often used in specification of telecommunications systems. They are the subject of an international standardisation effort by CCITT <ref> [X92] </ref>. Although the syntax definition is quite well developed, the semantics is still in its early stages. Our purpose in this paper is to propose a precise mathematical semantics for MSCs. <p> We call vertical lines in the graphical representation instance axes. Each instance axis yields a total ordering of some communication events and represents the control flow of exactly one process 1 . Arrows between instance axes denote the sending and consumption of messages. According to <ref> [X92] </ref> the tail of an arrow is a message output symbol and the head is an message input symbol. <p> For simple MSCs, the ne/sig graph is so close to the MSC that it 1 We only consider static systems without process generation and termination, therefore we do not distinguish between process type and process instance. 2 The proposed standard does not include self-sending, except for the timer symbol <ref> [X92] </ref>. Though the timer symbol is an arrow with tail and head at the same instance axis, we suppose that its currently undefined semantics will not be equivalent to a self-sending. 8 may be regarded as just syntactic sugar. <p> The proposed MSC standard allows crossing of signals to occur <ref> [X92] </ref>. The two ne/sig graphs of Figure 3.1 derived from two simple MSCs represent different system behaviours. In both cases an identical type of signal is transmitted twice. The second case differs from the first in that a `cross-over' of the messages is specified.
References-found: 11

