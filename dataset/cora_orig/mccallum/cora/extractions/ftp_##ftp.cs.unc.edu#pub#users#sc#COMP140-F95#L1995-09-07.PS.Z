URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP140-F95/L1995-09-07.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP140-F1995/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP 140: Introduction to Translator Systems Lexical Analysis (Lecture 2 of 3) 1 From pattern
Author: Siddhartha Chatterjee shortcuts. 
Note: after  
Date: 7 September 1995  
Abstract: Let us try to build up a regular expression for a pattern described textually. Here is the textual description. A floating point constant is a nonempty string of digits followed by a decimal point and an op tional string of digits. We will build the regexp for this pattern in stages. What this means is that we will give names to intermediate regexps and use these names to build up more complex regexps. Technically, this is called a regular definition, but you can see that this does not add any expressive power over normal regular expressions. First, we define digits. digit ! 0j1j2j3j4j5j6j7j8j9 (1) Next, the definition calls for a nonempty string of digits before the decimal point. The word nonempty suggests that we need the positive closure operation. before ! digit + (2) Next, we have an optional string of digits after the decimal point. The word optional tells us that we need Kleene closure here rather than positive closure. after ! digit fl (3) Now we can put together a regexp that defines floating point constants. float ! before.later (4) For this simple pattern, we could have written this out directly as follows. 
Abstract-found: 1
Intro-found: 1
References-found: 0

