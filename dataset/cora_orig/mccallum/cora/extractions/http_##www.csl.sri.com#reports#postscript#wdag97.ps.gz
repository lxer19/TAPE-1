URL: http://www.csl.sri.com/reports/postscript/wdag97.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Title: Low-overhead Time-Triggered Group Membership  
Author: Shmuel Katz ; Pat Lincoln and John Rushby 
Keyword: time-triggered protocol, group membership, synchronous algo rithms, fault tolerance, formal modeling  
Address: Menlo Park, CA 94025 USA  Israel  
Affiliation: 1 Computer Science Laboratory, SRI International,  Computer Science Department, The Technion, Haifa,  
Note: Corrected and slightly expanded version of a paper presented at 11th International Workshop on Distributed Algorithms (WDAG '97), Saarbrucken Germany, September 1997. Springer-Verlag Lecture Notes in Computer Science Vol. 1320, pp. 155-169.  
Email: email: flincoln, rushbyg@csl.sri.com  email: katz@cs.technion.ac.il  
Phone: 2  
Abstract: A group membership protocol is presented and proven correct for a synchronous time-triggered model of computation with processors in a ring that broadcast in turn. The protocol, derived from one used for critical control functions in automobiles, accepts a very restrictive fault model to achieve low overhead and requires only one bit of membership information piggybacked on regular broadcasts. Given its strong fault model, the protocol guarantees that a faulty processor will be promptly diagnosed and removed from the agreed group of processors, and will also diagnose itself as faulty. The protocol is correct under a fault-arrival assumption that new faults arrive at least n + 1 time units apart, when there are n processors. Exploiting this assumption leads to unusual real-time reasoning in the correctness proof.
Abstract-found: 1
Intro-found: 1
Reference: <institution> Papers by SRI authors are generally available from http://www.csl.sri.com/fm.html. </institution>
Reference: 1. <institution> ARINC Specification 659: Backplane Data Bus. Aeronautical Radio, Inc, Annapo-lis, MD, </institution> <month> December </month> <year> 1993. </year> <title> Prepared by the Airlines Electronic Engineering Committee. </title>
Reference-contexts: For these reasons, TTP (and protocols for similar applications, such as ARINC 659 which provides the safety-critical backplane for the top-level avionics functions of the Boeing 777 <ref> [1] </ref>) are highly integrated, and services such as clock-synchronization, reliable broadcast, group membership, and primary-backup shadowing are combined with the basic data-communication service rather than layered.
Reference: 2. <author> Flaviu Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Systems, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction and Motivation Group membership has become an important abstraction in providing fault-tolerant services for distributed systems <ref> [2] </ref>. As in any protocol for group membership, the one presented here allows nonfaulty processors to agree on the membership, and to exclude apparently faulty ones.
Reference: 3. <author> David L. Dill. </author> <title> The Mur verification system. </title> <editor> In Rajeev Alur and Thomas A. Henzinger, editors, </editor> <booktitle> Computer-Aided Verification, CAV '96, volume 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pages 390-393, </pages> <address> New Brunswick, NJ, July/August 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: We found determination of an adequately strong (and true!) invariant, and development of the corresponding proof, to be quite challenging, and turned to formal techniques for assistance. We used the Mur state-exploration system <ref> [3] </ref> to examine instances of the protocol for the purposes of debugging the protocol, its fault model and its assumptions, and also to check candidate invariants. Using Mur, we were able to exhaustively check the behaviors of a ring of six processors with up to three faults.
Reference: 4. <author> Li Gong, Patrick Lincoln, and John Rushby. </author> <title> Byzantine agreement with authentication: Observations and applications in tolerating hybrid and link faults. </title> <editor> In Ravishankar K. Iyer, Michele Morganti, W. Kent Fuchs, and Virgil Gligor, editors, </editor> <title> Dependable Computing for Critical Applications|5, </title> <booktitle> volume 10 of Dependable Computing and Fault Tolerant Systems, </booktitle> <pages> pages 139-157, </pages> <address> Champaign, IL, </address> <month> September </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: This leads, for example, to "hybrid" fault models and associated algorithms that permit finer distinctions among faults than purely Byzantine fault models and provide strictly superior fault tolerance <ref> [4, 10, 12, 14, 17] </ref>. The starting point for the algorithm considered here is the time-triggered protocol (TTP) of Kopetz and Grunsteidl [9].
Reference: 5. <institution> Fault Tolerant Computing Symposium 25: </institution> <note> Highlights from 25 Years, </note> <institution> Pasadena, </institution> <address> CA, June 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference: 6. <author> Johan Karlsson, Peter Folkesson, Jean Arlat, Yves Crouzet, and Guther Leber. </author> <title> Integration and comparison of three physical fault injection techniques. </title> <editor> In Brian Randell, Jean-Claude Laprie, Hermann Kopetz, and Bev Littlewood, editors, </editor> <booktitle> Predictably Dependable Computing Systems, Basic Research Series, </booktitle> <pages> pages 309-327. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: The possibility of such catastrophic or insidious faults is the price paid for the low overhead of our group membership protocol. Experiments with an architecture similar to TTP <ref> [6] </ref> show that the incidence of such fail-silence violations is sufficiently rare that they present an acceptably low risk to the system (given the other mechanisms present in the total suite of protocols). 5.2 Formal Analysis, and Future Work We have described and proved correct a protocol for synchronous group membership
Reference: 7. <author> H. Kopetz. </author> <title> Automotive electronics|present state and future prospects. In Fault Tolerant Computing Symposium 25: </title> <journal> Special Issue, </journal> <pages> pages 66-75, </pages> <address> Pasadena, CA, June 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: This protocol is intended for the control of critical functions in automobiles, where communications bandwidth is severely limited, some functions (e.g., ignition timing) require service at very high rates and with great temporal precision, and many functions (e.g., brake-by-wire, steer-by-wire) are safety critical <ref> [7] </ref>.
Reference: 8. <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <editor> In A. Avizienis and J. C. Laprie, editors, </editor> <title> Dependable Computing for Critical Applications, </title> <booktitle> volume 4 of Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pages 411-429, </pages> <address> Santa Barbara, CA, </address> <month> August </month> <year> 1989. </year> <institution> Springer-Verlag, Vienna, Austria. </institution>
Reference-contexts: One way to do this is for each processor to append its assessment of the current membership to each packet that it sends. Under suitable assumptions, a protocol can be based on this approach <ref> [8] </ref>, but it is clearly expensive|requiring n bits of membership data appended to each broadcast, for an n processor system (n is 10-20 for these applications).
Reference: 9. <author> Hermann Kopetz and Gunter Grunsteidl. </author> <title> TTP|a protocol for fault-tolerant real-time systems. </title> <journal> IEEE Computer, </journal> <volume> 27(1) </volume> <pages> 14-23, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: This work was supported by Arpa through USAF Electronic Systems Center Contract F19628-96-C-0006, by the Air Force Office of Scientific Research, Air Force Materiel Command, USAF, under contract F49620-95-C0044, and by the National Science Foundation under contract CCR-9509931. 1 from one in a tightly integrated protocol architecture for automobile control <ref> [9] </ref>. Our contribution is to isolate this group membership protocol (which has not been described explicitly in previous papers), to abstract it from other elements of the integrated protocol, to give a precise formulation of its fault model, and to provide a systematic proof of its correctness. <p> The starting point for the algorithm considered here is the time-triggered protocol (TTP) of Kopetz and Grunsteidl <ref> [9] </ref>. This protocol is intended for the control of critical functions in automobiles, where communications bandwidth is severely limited, some functions (e.g., ignition timing) require service at very high rates and with great temporal precision, and many functions (e.g., brake-by-wire, steer-by-wire) are safety critical [7]. <p> Empirical data supports these design decisions <ref> [9] </ref>. Bandwidth is a precious commodity in applications of the family of protocols we study here. Practical considerations such as cost of copper wire, likelihood of failures of interconnects, and lack of skilled maintenance drive designers to focus on simple and cheap hardware interconnect technology such as twisted pair. <p> Later descriptions of TTP show only two bits being used for this purpose (actually, they show four, but that appears to be due to the fact that the buses are paired) <ref> [9] </ref>, but the membership protocol is not described. In the following sections, we present a protocol that satisfies these constraints, using only one bit per broadcast, and analyze its properties. In the following section the model, including its fault assumptions, is first described independently of the group membership problem.
Reference: 10. <author> Patrick Lincoln and John Rushby. </author> <title> A formally verified algorithm for interactive consistency under a hybrid fault model. </title> <booktitle> In Fault Tolerant Computing Symposium 23, </booktitle> <pages> pages 402-411, </pages> <address> Toulouse, France, </address> <month> June </month> <year> 1993. </year> <booktitle> IEEE Computer Society. Reprinted in [5, </booktitle> <pages> pp. 438-447]. </pages>
Reference-contexts: This leads, for example, to "hybrid" fault models and associated algorithms that permit finer distinctions among faults than purely Byzantine fault models and provide strictly superior fault tolerance <ref> [4, 10, 12, 14, 17] </ref>. The starting point for the algorithm considered here is the time-triggered protocol (TTP) of Kopetz and Grunsteidl [9].
Reference: 11. <author> Z. Manna and A. Pnueli. </author> <title> Temporal Verification of Reactive Systems: Safety. </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: or receive-faulty, it succeeds; if send-faulty, it does not, but is unaware of the fault.) The broadcast includes one bit of state information defined below: the ack bit 3 Technically, the real-time requirement seen here is a safety property and not a progress (or liveness) property in the sense of <ref> [11] </ref>. However, it does serve to guarantee that needed steps occur and so we refer to it informally as a progress property. 5 of the broadcaster. <p> For the future, we are interested in systematic techniques for deriving strengthened invariants of the kind needed here, and for generating the proof of correctness. Some of the reasoning resembles that seen in the backward reasoning of precedence properties in temporal logic <ref> [11] </ref>. The group membership protocol presented here has no provision for readmitting previously-faulty processors that now appear to be working correctly again.
Reference: 12. <author> Fred J. Meyer and Dhiraj K. Pradhan. </author> <title> Consensus with dual failure modes. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(2) </volume> <pages> 214-222, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: This leads, for example, to "hybrid" fault models and associated algorithms that permit finer distinctions among faults than purely Byzantine fault models and provide strictly superior fault tolerance <ref> [4, 10, 12, 14, 17] </ref>. The starting point for the algorithm considered here is the time-triggered protocol (TTP) of Kopetz and Grunsteidl [9].
Reference: 13. <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: This required some tens of minutes (on a Sparc 20) and 100 MB of memory and entailed exploration of almost two million states. We are currently formalizing the general case and subjecting our proof of correctness to mechanical checking using the PVS verification system <ref> [13] </ref>. For the future, we are interested in systematic techniques for deriving strengthened invariants of the kind needed here, and for generating the proof of correctness. Some of the reasoning resembles that seen in the backward reasoning of precedence properties in temporal logic [11].
Reference: 14. <author> John Rushby. </author> <title> A formally verified algorithm for clock synchronization under a hybrid fault model. </title> <booktitle> In Thirteenth ACM Symposium on Principles of Distributed 16 Computing, </booktitle> <pages> pages 304-313, </pages> <address> Los Angeles, CA, </address> <month> August </month> <year> 1994. </year> <institution> Association for Com--puting Machinery. </institution>
Reference-contexts: This leads, for example, to "hybrid" fault models and associated algorithms that permit finer distinctions among faults than purely Byzantine fault models and provide strictly superior fault tolerance <ref> [4, 10, 12, 14, 17] </ref>. The starting point for the algorithm considered here is the time-triggered protocol (TTP) of Kopetz and Grunsteidl [9].
Reference: 15. <author> John Rushby. </author> <title> Reconfiguration and transient recovery in state-machine architectures. </title> <booktitle> In Fault Tolerant Computing Symposium 26, </booktitle> <pages> pages 6-15, </pages> <address> Sendai, Japan, June 1996. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Computation faults are likewise detected by pairwise comparison, or masked by voting, and higher-level diagnosis and recovery algorithms then isolate or reboot the a*icted processor <ref> [15, 18-20] </ref>. In these cases, the failure mode is reduced to fail-silence, which manifests itself to our group membership protocol as a combination of long-duration send and receive faults for the processor concerned.
Reference: 16. <author> Fred B. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Clock synchronization ensures that all nonfaulty processors share a common notion of time, and "bus guardians" with independent knowledge of the broadcast schedule prevent faulty processors from speaking out of turn. State-machine replication <ref> [16] </ref> or pairwise comparison is used to mask or to detect processor faults. These considerations (and empirical measurements) justify considering only two types of faults in the context assumed here. Send fault: a processor fails to broadcast when its slot is reached.
Reference: 17. <author> Philip Thambidurai and You-Keun Park. </author> <title> Interactive consistency with multiple failure modes. </title> <booktitle> In 7th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 93-100, </pages> <address> Columbus, OH, </address> <month> October </month> <year> 1988. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: This leads, for example, to "hybrid" fault models and associated algorithms that permit finer distinctions among faults than purely Byzantine fault models and provide strictly superior fault tolerance <ref> [4, 10, 12, 14, 17] </ref>. The starting point for the algorithm considered here is the time-triggered protocol (TTP) of Kopetz and Grunsteidl [9].
Reference: 18. <author> C. J. Walter, N. Suri, and M. M. Hugue. </author> <title> Continual on-line diagnosis of hybrid faults. </title> <editor> In F. Cristian, G. Le Lann, and T. Lunt, editors, </editor> <title> Dependable Computing for Critical Applications|4, </title> <booktitle> volume 9 of Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pages 233-249. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, Austria, </address> <month> January </month> <year> 1994. </year>
Reference: 19. <author> Chris J. Walter. </author> <title> Identifying the cause of detected errors. </title> <booktitle> In Fault Tolerant Computing Symposium 20, </booktitle> <pages> pages 48-55, </pages> <institution> Newcastle upon Tyne, </institution> <address> UK, June 1990. </address> <publisher> IEEE Computer Society. </publisher>
Reference: 20. <author> Chris J. Walter, Patrick Lincoln, and Neeraj Suri. </author> <title> Formally verified on-line diagnosis. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 23(11) </volume> <pages> 684-721, </pages> <month> November </month> <year> 1997. </year> <title> The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Air Force Office of Scientific Research or the U.S. Government. This article was processed using the L a T E X macro package with LLNCS style 17 </title>
References-found: 21

