URL: http://www.eecs.umich.edu/UMichMP/Publications/oopsla96.ps
Refering-URL: http://www.eecs.umich.edu/UMichMP/abstracts.html
Root-URL: http://www.eecs.umich.edu
Email: -blj,tnm-@eecs.umich.edu  
Title: Support for Nomadism in a Global Environment  
Author: Bruce Jacob and Trevor Mudge 
Address: Ann Arbor  
Affiliation: Advanced Computer Architecture Lab Department of Electrical Engineering and Computer Science University of Michigan,  
Date: August 26, 1996 10:14 am  
Note: Nomadic.abstract.doc  
Abstract: The goal of nomadic computing transcends simply making ones environment portable; mobile users require the ability to communicate with local servers despite location and to obtain local services despite statically defined service interfaces. To this end, we expect the portable computer or PDA to perform as a universal interactor [Theimer93]. The current paradigm for distributed computing, RPC, inhibits such freeform interaction. RPC requires static knowledge of the service and its interface; a programmer must know the interface and explicitly write code to use it. It is impossible, using present RPC implementations such as DCE or Sun RPC, to discover and use new services unless they conform exactly to the interfaces expected by the client. We propose a new standard to define a fundamental level of support for nomadismthat of service discovery. It is the ability for a client to discover services based on descriptive names, bind dynamically to the servers that offer them, and communicate intelligently with the servers. In the full paper, we describe an implementation of service discovery that uses descriptive lookup and dynamic interfaces. 
Abstract-found: 1
Intro-found: 1
Reference: [Birrell82] <author> Andrew D Birrell, Ro y Le vin, Roger M Needham, and Michael D Schroeder . Grape vine: </author> <title> An Ex ercise in Distrib uted Computing. </title> <journal> Communications of the ACM, </journal> <volume> 25(4):260274, </volume> <month> April </month> <year> 1982. </year>
Reference-contexts: Nomadic.abstract.doc 3 August 26, 1996 10:14 am broker or directory, similar to the Interface Repository of CORBA [Group93a], the portmapper in Sun RPC [Microsystems], or resource location in Grapevine <ref> [Birrell82] </ref>. The client should be able to find whatever services it needs by querying the local directory with a descriptive name or set of attributes. Second, a client must learn the service interfaces dynamically.
Reference: [Birrell84] <author> Andrew D Birrell and Bruce Jay Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1):3959, </volume> <month> February </month> <year> 1984. </year>
Reference-contexts: Motivation: a perceived weakness in the state of the art. What is wrong with this picture, besides the ease with which you connect to the airports LAN and the omission of payment for the long-distance fax call? Using the prevalent paradigm of distributed computing, RPC (remote procedure call, <ref> [Birrell84] </ref>), this scenario cannot happen 1 .
Reference: [BL92] <author> Tim Berners-Lee, Robert Cailliau, and Jean-Francois Grof f. </author> <title> The WorldWide Web. </title> <booktitle> Computer Networks and ISDN Systems , 25(4-5), </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met. We have already witnessed the arrival of diverse user-level applications, from information services <ref> [BL92] </ref> to ordering pizza [Hut]. The de facto standard of distributed information services is the WorldWide Web [WebConf94], primarily because of the ease with which anyone can publish information. In an environment where anyone can simply hang a shingle on the net and begin offering services, everyone will.
Reference: [CCITT92] <author> CCITT. </author> <title> Draft Recommendation X.903: Basic Refer ence Model of Open Distrib uted Processing. International Telegraph and Telephone Consultative Committee, </title> <year> 1992. </year>
Reference-contexts: However, half of the problem remainsthat of implicitly binding clients to service interfaces. This is a real issue, recognized by the OMG and the ITU. Their CORBA and ODP standards <ref> [Group93a, CCITT92] </ref> address the issue, but since they are proposed standards they suggest functionality and say nothing about implementation. The CORBA standard advocates an intermediary between objects, called the Object Request Broker, that can translate between protocols.
Reference: [Chang90] <author> Rong Nickle Chang. </author> <title> A Network Service Acquisition Mechanism for the Client/Service Model. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <year> 1990. </year>
Reference-contexts: However, RPC does not provide for attribute-based service lookup or the use of dynamic interfaces, both fundamental to mobile computing. This section describes environments that do support those facilities. Related work and proposed standards. Ravishankar describes the problem in <ref> [Chang90] </ref>. He states that the client/ server model is a dominant system structuring paradigm due in part to its support for system scalability. However, systems have largely tended to use the server interface that implements a service as a representation of the service itself. <p> To use a service, the client program must have an explicit reference to a function call providing the desired service, and often an explicit reference to a remote server. Systems like Prospero [Neuman93] and Cygnus <ref> [Ravishankar88, Chang90, Chang91] </ref> address this problem: they provide attribute-based lookup of services. They recognize that binding servers to services and their interfaces undercuts the exibility of distributed systems, and instead allow clients to search for services using descriptions of the services.
Reference: [Chang91] <author> Rong N Chang and Chinya V Ravishankar. </author> <title> A service acquisition mechanism for the client/service model in Cygnus. </title> <type> Technical Report CSE-TR-84-91, </type> <institution> University of Michigan, </institution> <year> 1991. </year>
Reference-contexts: To use a service, the client program must have an explicit reference to a function call providing the desired service, and often an explicit reference to a remote server. Systems like Prospero [Neuman93] and Cygnus <ref> [Ravishankar88, Chang90, Chang91] </ref> address this problem: they provide attribute-based lookup of services. They recognize that binding servers to services and their interfaces undercuts the exibility of distributed systems, and instead allow clients to search for services using descriptions of the services.
Reference: [Draves89] <author> Richard P Draves, Michael B Jones, and Mary R Thompson. </author> <title> MIGThe Mach Interface Generator. </title> <type> Technical Report (CMU unpublished report), </type> <institution> Carnegie Mellon University, </institution> <month> July </month> <year> 1989. </year> <month> URL=ftp://mach.cs.cmu.edu/usr/mach/public/doc/unpublished/mig.ps. </month>
Reference-contexts: How RPC supports distributed computing. RPC mechanisms, as found in DCE [Foundation91], NCS RPC [Kong90], Sun RPC [Microsystems], and the Mach system call interface <ref> [Draves89] </ref>, generally require interface description files at the creation time of client and server binaries. These files represent shared knowledge between the client and server and specify the structures of the different message types to be passed between the two.
Reference: [Foundation91] <author> Open Software Foundation. </author> <title> DCE Application Development Guide. </title> <year> 1991. </year>
Reference-contexts: A client should therefore be able to acquire and use service interfaces dynamically, and a server should be prepared to send out descriptions of its interfaces to inquiring clients. How RPC supports distributed computing. RPC mechanisms, as found in DCE <ref> [Foundation91] </ref>, NCS RPC [Kong90], Sun RPC [Microsystems], and the Mach system call interface [Draves89], generally require interface description files at the creation time of client and server binaries.
Reference: [Group93] <author> Object Management Group. </author> <title> The Common Object Request Br oker: Ar chitecture and Specification, Re v 1.2 . December 1993. OMG Document Number 93-12-43. </title>
Reference: [Hut] <author> Pizza Hut. </author> <month> URL=http://www.pizzahut.com. </month>
Reference-contexts: Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met. We have already witnessed the arrival of diverse user-level applications, from information services [BL92] to ordering pizza <ref> [Hut] </ref>. The de facto standard of distributed information services is the WorldWide Web [WebConf94], primarily because of the ease with which anyone can publish information. In an environment where anyone can simply hang a shingle on the net and begin offering services, everyone will.
Reference: [Kong90] <author> M Kong, T H Dineen, P J Leach, E A Martin, N W Mishkin, J N Pato, and G L Wyant. </author> <title> Network Computing System Refer ence Manual. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: A client should therefore be able to acquire and use service interfaces dynamically, and a server should be prepared to send out descriptions of its interfaces to inquiring clients. How RPC supports distributed computing. RPC mechanisms, as found in DCE [Foundation91], NCS RPC <ref> [Kong90] </ref>, Sun RPC [Microsystems], and the Mach system call interface [Draves89], generally require interface description files at the creation time of client and server binaries. These files represent shared knowledge between the client and server and specify the structures of the different message types to be passed between the two.
Reference: [Microsystems] <author> Sun Microsystems. </author> <title> Sun RPC man pages rpc, </title> <address> rpcinfo, rpcgen, portmap. </address>
Reference-contexts: Nomadic.abstract.doc 3 August 26, 1996 10:14 am broker or directory, similar to the Interface Repository of CORBA [Group93a], the portmapper in Sun RPC <ref> [Microsystems] </ref>, or resource location in Grapevine [Birrell82]. The client should be able to find whatever services it needs by querying the local directory with a descriptive name or set of attributes. Second, a client must learn the service interfaces dynamically. <p> A client should therefore be able to acquire and use service interfaces dynamically, and a server should be prepared to send out descriptions of its interfaces to inquiring clients. How RPC supports distributed computing. RPC mechanisms, as found in DCE [Foundation91], NCS RPC [Kong90], Sun RPC <ref> [Microsystems] </ref>, and the Mach system call interface [Draves89], generally require interface description files at the creation time of client and server binaries. These files represent shared knowledge between the client and server and specify the structures of the different message types to be passed between the two.
Reference: [Neuman93] <author> B Clifford Neuman, Ste ven Seger Aug art, and Shantaprasad Upasani. </author> <title> Using Prospero to support inte grated location-independent computing. </title> <booktitle> In Proceedings of the USENIX Mobile & Location-Independent Computing Symposium, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: To use a service, the client program must have an explicit reference to a function call providing the desired service, and often an explicit reference to a remote server. Systems like Prospero <ref> [Neuman93] </ref> and Cygnus [Ravishankar88, Chang90, Chang91] address this problem: they provide attribute-based lookup of services. They recognize that binding servers to services and their interfaces undercuts the exibility of distributed systems, and instead allow clients to search for services using descriptions of the services.
Reference: [Pitoura94] <author> Evaggelia Pitoura and Bharat Bhargava. </author> <title> Revising transaction concepts for mobile computing. </title> <booktitle> In Proceedings of the 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <address> URL=http://snapple.cs.washington.edu:600/mobile/mcsa94.html, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: However, there are more complicated scenarios which involve many clientserver interactions. It would be cumbersome to involve the user in every instance of message-passing. A complex example demonstrating such a scenario, as in any sort of multi-phase reliable transaction <ref> [Pitoura94] </ref>, group membership negotiation, or quality of service arbitration, would only serve to confuse at this point. Nomadic.abstract.doc 3 August 26, 1996 10:14 am broker or directory, similar to the Interface Repository of CORBA [Group93a], the portmapper in Sun RPC [Microsystems], or resource location in Grapevine [Birrell82].
Reference: [Press94] <author> Larry Press. </author> <title> Commercialization of the Internet. </title> <journal> Communications of the ACM, </journal> <volume> 37(11):1721, </volume> <month> November </month> <year> 1994. </year>
Reference-contexts: It will become a problem. The rapid commercialization of the Internet and the National Information Infrastructure [Vernon94] imply that the future of general-purpose computing combines heterogeneity and ubiquitous computing services <ref> [Press94] </ref>. Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met. We have already witnessed the arrival of diverse user-level applications, from information services [BL92] to ordering pizza [Hut].
Reference: [Ravishankar88] <author> Chinya V Ra vishankar and Rong N Chang. </author> <title> An attrib ute-based service-request mechanism for heterogeneous distrib uted systems. </title> <type> Technical Report CSE-TR-08-88, </type> <institution> University of Michigan, </institution> <year> 1988. </year>
Reference-contexts: To use a service, the client program must have an explicit reference to a function call providing the desired service, and often an explicit reference to a remote server. Systems like Prospero [Neuman93] and Cygnus <ref> [Ravishankar88, Chang90, Chang91] </ref> address this problem: they provide attribute-based lookup of services. They recognize that binding servers to services and their interfaces undercuts the exibility of distributed systems, and instead allow clients to search for services using descriptions of the services.
Reference: [Theimer93] <author> Marvin Theimer , Alan Demers, and Brent W elch. </author> <title> Operating system issues for PD As. </title> <booktitle> In Proceedings of the F ourth Workshop on Workstation Operating Systems, </booktitle> <month> October </month> <year> 1993. </year>
Reference: [Vernon94] <author> Mark K V ernon, Edw ard D Lazo wska, and Ste wart D Personick, </author> <title> editors. R&D for the NII: </title> <institution> T echnical Challeng es. Interuni versity Communications Council, Inc., </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: This paradigm of computing fails to support service discovery: the act of finding new offered services with unknown interfaces, and using those services immediately. It will become a problem. The rapid commercialization of the Internet and the National Information Infrastructure <ref> [Vernon94] </ref> imply that the future of general-purpose computing combines heterogeneity and ubiquitous computing services [Press94]. Future systems must not only support but expect a distributed environment similar to a shopping mall, where virtually all computing needs can be met.
Reference: [WebConf94] <author> WebConf. </author> <title> Special issue: </title> <booktitle> Selected papers of the first W orld-Wide Web conference. Computer Networks and ISDN Systems , 27(2), </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: We have already witnessed the arrival of diverse user-level applications, from information services [BL92] to ordering pizza [Hut]. The de facto standard of distributed information services is the WorldWide Web <ref> [WebConf94] </ref>, primarily because of the ease with which anyone can publish information. In an environment where anyone can simply hang a shingle on the net and begin offering services, everyone will. Anything one can imagine and far more that one cannot will be available.
References-found: 19

