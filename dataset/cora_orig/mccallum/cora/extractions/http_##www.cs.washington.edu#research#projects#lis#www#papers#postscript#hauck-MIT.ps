URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/hauck-MIT.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: http://www.cs.washington.edu
Title: TRIPTYCH: An FPGA Architecture with Integrated Logic and Routing  
Author: Scott Hauck, Gaetano Borriello, Carl Ebeling 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Date: 26-43, March, 1992.  
Note: Advanced Research in VLSI and Parallel Systems: Proceedings of the 1992 Brown/MIT Conference, pp.  
Abstract: We describe Triptych, a new FPGA architecture, that blends logic and routing resources to achieve efficient implementation of a wide range of circuits in both area and speed. The physical structure of Triptych attempts to match the structure of factored logic functions, thus providing an efficient substrate in which to implement these circuits. This approach both requires and takes advantage of an integrated approach to the mapping, placement and routing process. We first describe the Triptych architecture in detail. This is followed by the development of a new method for architectural comparison of FPGAs that is free of irrelevant implementation effects. Then the Triptych, Xilinx, Algotronix, and Concurrent Logic architectures are compared using this method to obtain normalized area and performance figures for a wide range of circuits, including both datapath elements and control logic. Our results indicate that Triptych is more area-efficient (Xilinx mappings average 3.5 times larger than Triptych mappings) and has at least comparable delay characteristics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Actel Corporation, </author> <title> ACT Family Field Programmable Gate Array Data Book, </title> <year> 1991. </year>
Reference-contexts: We have not included Actel in this study because it uses an anti-fuse technology, which makes architectural comparison difficult <ref> [1, 6] </ref>.
Reference: [2] <author> Algotronix Limited, </author> <note> CAL1024 Preliminary Datasheet, </note> <year> 1991. </year>
Reference-contexts: Even so, it is well known that the largest Xilinx FPGA (3090) seldom achieves more than 50% logic block utilization for random logic. A lack of interconnect resources also leads to decreased performance as critical paths are forced into more indirect routes. Domainspecific FPGAs like the Algotronix CAL1024 <ref> [2] </ref> and the Concurrent Logic CFA6000 [5] increase the chip area devoted to logic by reducing the routing to nearest-neighbor communication (this categorization is not completely accurate since Xilinx FPGAs have some nearest-neighbor connections and the CFA 6000 has introduced local busses).
Reference: [3] <author> J. F. Beetem, </author> <title> Simultaneous Placement and Routing of the Labyrinth Reconfigurable Logic Array, </title> <booktitle> International Workshop on Field-Programmable Logic and Applications, </booktitle> <address> Oxford, </address> <year> 1991. </year>
Reference-contexts: Some research has been done on integrating placement and routing, but this work is very preliminary <ref> [3] </ref>. It is clear that domainspecific FPGAs can benefit greatly from an integrated approach to mapping, placement and routing. It is also the case that general-purpose FPGAs can take advantage of the increased flexibility offered by this approach.
Reference: [4] <author> W. Carter et al., </author> <title> A User Programmable Reconfigurable Gate Array, </title> <booktitle> Proceedings of the IEEE Custom Integrated Circuits Conference, </booktitle> <month> May </month> <year> 1986. </year>
Reference-contexts: This clear separation between the logic and interconnection resources is attractive because the mapping, placement and routing decisions are decoupled. The price for this separation is the large area and delay costs incurred for the flexible interconnection needed to support arbitrary routing requirements. This leads to architectures like Xilinx <ref> [4] </ref>, where the routing resources consume more than 90% of the chip area . Even so, it is well known that the largest Xilinx FPGA (3090) seldom achieves more than 50% logic block utilization for random logic.
Reference: [5] <institution> Concurrent Logic, Inc., CFA6006 Field Programmable Gate Array, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: A lack of interconnect resources also leads to decreased performance as critical paths are forced into more indirect routes. Domainspecific FPGAs like the Algotronix CAL1024 [2] and the Concurrent Logic CFA6000 <ref> [5] </ref> increase the chip area devoted to logic by reducing the routing to nearest-neighbor communication (this categorization is not completely accurate since Xilinx FPGAs have some nearest-neighbor connections and the CFA 6000 has introduced local busses).
Reference: [6] <author> K. A. El-Ayat, A. El-Gamal, R. Guo, J. Chang, R. K. H. Mak, F. Chiu, and E. Z. Hamdy, </author> <title> A CMOS Electrically Configurable Gate Array, </title> <journal> IEEE Journal of SolidState Circuits, </journal> <volume> Vol. 24, No. 3, </volume> <month> June </month> <year> 1989, </year> <pages> pp. 752-761. </pages>
Reference-contexts: We have not included Actel in this study because it uses an anti-fuse technology, which makes architectural comparison difficult <ref> [1, 6] </ref>.
Reference: [7] <author> F. Furtek, </author> <type> Personal communication, </type> <month> October </month> <year> 1991. </year>
Reference-contexts: Area normalization figures calculated by applying equation 4, and the data used to obtain them. Triptych is used as the baseline. The numbers for CFA, CAL, and Xilinx were obtained from <ref> [7, 10, 14] </ref> respectively. Normalization is also necessary for speed comparisons. In this case, we use the delay values provided by the manufacturers (Xilinx values are for the 3020-50 [12]), and scale them based on the feature sizes of the processes used.
Reference: [8] <author> L. J. Guibas and F. M. Liang, </author> <title> Systolic Stacks, Queues, and Counters, </title> <booktitle> Second MIT Conference on Advanced Research in VLSI, </booktitle> <year> 1982. </year>
Reference-contexts: The systolic circuits are two versions of a string comparison circuit that computes the edit distance of two strings [11], the two versions differing on whether both strings move or if one is fixed in place, as well as a FIFO <ref> [8] </ref>. The arithmetic circuits chosen are a counter with a 4-stage carry look-ahead and an adder with a 2-stage carry look-ahead.
Reference: [9] <author> T. Kean, </author> <title> Configurable Logic: A Dynamically Programmable Cellular Logic Architecture and its VLSI Implementation, </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, University of Edinburgh, </institution> <year> 1989. </year>
Reference-contexts: Implementing circuits with these FPGAs requires close attention to routing during placement, which is generally accomplished by manual placement and routing of regular structures, or using specialized tools optimized to specific circuit domains <ref> [9] </ref>. Some research has been done on integrating placement and routing, but this work is very preliminary [3]. It is clear that domainspecific FPGAs can benefit greatly from an integrated approach to mapping, placement and routing.
Reference: [10] <author> T. </author> <title> Kean, </title> <type> Personal communication, </type> <month> October </month> <year> 1991. </year>
Reference-contexts: Area normalization figures calculated by applying equation 4, and the data used to obtain them. Triptych is used as the baseline. The numbers for CFA, CAL, and Xilinx were obtained from <ref> [7, 10, 14] </ref> respectively. Normalization is also necessary for speed comparisons. In this case, we use the delay values provided by the manufacturers (Xilinx values are for the 3020-50 [12]), and scale them based on the feature sizes of the processes used.
Reference: [11] <author> R. J. Lipton and D. Lopresti, </author> <title> A Systolic Array for Rapid String Comparison, </title> <booktitle> Chapel Hill Conference on VLSI, </booktitle> <year> 1985. </year>
Reference-contexts: They are collected into the following general categories: systolic, arithmetic, linear-growth bit-parallel, exponential-growth bit-parallel, and finite state machines (random logic). The systolic circuits are two versions of a string comparison circuit that computes the edit distance of two strings <ref> [11] </ref>, the two versions differing on whether both strings move or if one is fixed in place, as well as a FIFO [8]. The arithmetic circuits chosen are a counter with a 4-stage carry look-ahead and an adder with a 2-stage carry look-ahead.
Reference: [12] <author> M. Schlag, P. K. Chan, and J. Kong, </author> <title> Empirical Evaluation of Multilevel Logic Minimization Tools for a Field Programmable Gate Array Technology, </title> <booktitle> International Workshop on Field-Programmable Logic and Applications, </booktitle> <address> Oxford, </address> <year> 1991. </year>
Reference-contexts: Triptych is used as the baseline. The numbers for CFA, CAL, and Xilinx were obtained from [7, 10, 14] respectively. Normalization is also necessary for speed comparisons. In this case, we use the delay values provided by the manufacturers (Xilinx values are for the 3020-50 <ref> [12] </ref>), and scale them based on the feature sizes of the processes used. As shown in [15], FPGA logic speed scales linearly with process size, while routing delay scales quadratically. <p> Thus, the area numbers for Xilinx should be considered as a lower bound, and the mappings may actually require significantly more space. Since we did not do routing, we have no direct method for measuring the speed of Xilinx circuits. However, by using a routing delay model for Xilinx <ref> [12] </ref>, we were able to compute estimated routing delay, and these numbers were presented in Table 5. Second, since all the circuits were mapped by hand, we were only able to use small examples. No comparisons of large, complex random logic circuits is presented.
Reference: [13] <author> S. Singh, J. Rose, D. Lewis, K. Chung, and P. Chow, </author> <title> Optimization of Field-Programmable Gate Array Logic Block Architecture for Speed, </title> <booktitle> Proceedings of the IEEE Custom Integrated Circuits Conference, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: These DAGs are then mapped to the physical structure, with the inputs taken on one side and the outputs generated at the other. The nodes of the DAGs are placed such that input signals are available from the neighbor nodes or along a vertical connection. As suggested in <ref> [13] </ref>, delay can be minimized by using mostly direct, hardwired connections for the critical path. It is not the goal of Triptych implementations to achieve 100% logic utilization. Many RLBs are used to provide routing, either to fanout a signal or to pass it forward to the next level.
Reference: [14] <author> S. Trimberger, </author> <type> Personal communication, </type> <month> October </month> <year> 1991. </year>
Reference-contexts: Area normalization figures calculated by applying equation 4, and the data used to obtain them. Triptych is used as the baseline. The numbers for CFA, CAL, and Xilinx were obtained from <ref> [7, 10, 14] </ref> respectively. Normalization is also necessary for speed comparisons. In this case, we use the delay values provided by the manufacturers (Xilinx values are for the 3020-50 [12]), and scale them based on the feature sizes of the processes used.
Reference: [15] <author> J. Vuillamy, Z. G. Vranesic, and J. Rose, </author> <title> Performance Evaluation and Enhancement of FPGAs, </title> <booktitle> International Workshop on Field-Programmable Logic and Applications, </booktitle> <address> Oxford, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Normalization is also necessary for speed comparisons. In this case, we use the delay values provided by the manufacturers (Xilinx values are for the 3020-50 [12]), and scale them based on the feature sizes of the processes used. As shown in <ref> [15] </ref>, FPGA logic speed scales linearly with process size, while routing delay scales quadratically.
References-found: 15

