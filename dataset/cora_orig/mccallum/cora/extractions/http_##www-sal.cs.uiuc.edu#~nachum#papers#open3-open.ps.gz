URL: http://www-sal.cs.uiuc.edu/~nachum/papers/open3-open.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Email: nachum@cs.uiuc.edu  jouannau@lri.lri.fr  jwk@cwi.nl  
Phone: 2  
Title: Problems in Rewriting III  
Author: Nachum Dershowitz Jean-Pierre Jouannaud and Jan Willem Klop 
Address: 1304 West Springfield Avenue, Urbana, IL 61801, U.S.A,  91405 Orsay, France,  3 CWI, Kruislaan 413, 1098 SJ Amsterdam, The Netherlands  Boelelaan 1081, 1081 HV Amsterdam, The Netherlands,  
Affiliation: 1 Department of Computer Science, University of Illinois,  Laboratoire de Recherche en Informatique, Bat. 490, Universite de Paris Sud,  Department of Mathematics and Computer Science, Free University, de  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> A. Aiken, D. Kozen, and E. Wimmers. </author> <title> Decidability of systems of set constraints with negative constraints. </title> <type> Technical Report 93-1362, </type> <institution> Computer Science Department, Cornell University, </institution> <year> 1993. </year>
Reference-contexts: Variables are interpreted as subsets of the Herbrand Universe. With the obvious interpretation of these symbols, is satisfiability of such formul decidable? Special cases have been solved in [ 44; 2; 6; 42 ] . This has been solved positively <ref> [ 43; 20; 1 ] </ref> . 3 New Problems Problem 78 (P. Lescanne).
Reference: 2. <author> A. Aiken and E. Wimmers. </author> <title> Solving systems of set constraints. </title> <booktitle> In Proceedings of the Seventh Symposium on Logic in Computer Science, </booktitle> <pages> pages 329-340, </pages> <address> Santa Cruz, CA, </address> <month> June </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: Variables are interpreted as subsets of the Herbrand Universe. With the obvious interpretation of these symbols, is satisfiability of such formul decidable? Special cases have been solved in <ref> [ 44; 2; 6; 42 ] </ref> . This has been solved positively [ 43; 20; 1 ] . 3 New Problems Problem 78 (P. Lescanne).
Reference: 3. <author> F. Baader. </author> <title> Rewrite systems for varieties of semigroups. </title> <editor> In M. Stickel, editor, </editor> <booktitle> Proceed--ings of the Tenth International Conference on Automated Deduction (Kaiserslautern, West Germany), volume 449 of Lecture Notes in Computer Science, </booktitle> <pages> pages 381-395, </pages> <address> Berlin, July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: It is now known to hold for countable systems [ 68 ] , [ 85, Cor. 2.3.30 ] . Rephrased Problem 57 (F. Baader <ref> [ 3 ] </ref> ). Does there exist a semigroup theory (without constants in the equations) for which there is a reduced canonical term-rewriting system (with the right-hand side and subterms of the left in normal form) that is not length decreasing? Problem 58 (M. Oyamaguchi).
Reference: 4. <author> F. Baader and K. Schulz. </author> <title> Unification in the union of disjoint equational theories: Combining decision procedures. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the Eleventh International Conference on Automated Deduction (Saratoga Springs, NY), volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <address> Berlin, June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Although many more cases are described in [ 28; 30 ] , the general case remains open. This theory is decidable [ 95; 94 ] . Problem 43. Design a framework for combining constraint solving algo-rithms. Some particular cases have been attacked: In <ref> [ 4 ] </ref> it was shown how decision procedures for solvability of unification problems can be combined. In [ 5 ] a similar technique is applied to (unquantified) systems of equations and disequations.
Reference: 5. <author> F. Baader and K. Schulz. </author> <title> Combination techniques and decision problems for disuni-fication. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Rewriting Techniques and Applications (Montreal, Canada), volume 690 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This theory is decidable [ 95; 94 ] . Problem 43. Design a framework for combining constraint solving algo-rithms. Some particular cases have been attacked: In [ 4 ] it was shown how decision procedures for solvability of unification problems can be combined. In <ref> [ 5 ] </ref> a similar technique is applied to (unquantified) systems of equations and disequations. In [ 90 ] the combination of unification algorithms is extended to the case where alphabets share constants.
Reference: 6. <author> L. Bachmair, H. Ganzinger, and U. Waldmann. </author> <title> Set constraints are the monadic class. </title> <booktitle> In Proceedings of the Symposium on Logic in Computer Science (Montreal, Canada), </booktitle> <pages> pages 75-83. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: Variables are interpreted as subsets of the Herbrand Universe. With the obvious interpretation of these symbols, is satisfiability of such formul decidable? Special cases have been solved in <ref> [ 44; 2; 6; 42 ] </ref> . This has been solved positively [ 43; 20; 1 ] . 3 New Problems Problem 78 (P. Lescanne).
Reference: 7. <author> F. Barbanera. </author> <title> Combining term rewriting and type assignment systems. </title> <journal> IJFCS, </journal> <volume> 1 </volume> <pages> 165-184, </pages> <year> 1990. </year>
Reference-contexts: Progress has been made in [ 63 ] , where it is proven that ground reducibility remains undecidable when a single non-constant function symbol is associative. Problem 50. Combinations of typed -calculi with term-rewriting systems have been studied extensively in the past few years <ref> [ 7; 15; 38; 39 ] </ref> . The strongest termination result allows first-order rules as well as higher-order rules defined by a generalization of primitive recursion.
Reference: 8. <author> F. Barbanera and M. Fernandez. </author> <title> Combining first and higher order rewrite systems with type assignment systems. </title> <booktitle> In Proceedings of the International Conference on Typed Lambda Calculi and Applications, </booktitle> <address> Utrecht, Holland, </address> <year> 1993. </year>
Reference-contexts: These results have been extended to combinations with more expressive type systems <ref> [ 9; 8 ] </ref> . An extension to the Calculus of Constructions has been reported in [ 10 ] .
Reference: 9. <author> F. Barbanera and M. Fernandez. </author> <booktitle> Modularity of termination and confluence in combinations of rewrite systems with ! . In Proceedings of the 20th International Colloquium on Automata, Languages, and Programming, </booktitle> <year> 1993. </year>
Reference-contexts: These results have been extended to combinations with more expressive type systems <ref> [ 9; 8 ] </ref> . An extension to the Calculus of Constructions has been reported in [ 10 ] .
Reference: 10. <author> F. Barbanera, M. Fernandez, and H. </author> <title> Geuvers. Modularity of strong normalization and confluence in the -algebraic-cube. </title> <booktitle> In lics94, </booktitle> <year> 1994. </year>
Reference-contexts: These results have been extended to combinations with more expressive type systems [ 9; 8 ] . An extension to the Calculus of Constructions has been reported in <ref> [ 10 ] </ref> . One can also allow the use of lexicographic and other "statuses" for the higher-order constants when comparing the subterms of F in left and right hand sides [Jouannaud and Okada, unpublished].
Reference: 11. <author> H. P. Barendregt. </author> <title> Lambda calculi with types. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science. </booktitle> <publisher> Oxford University Press, Oxford, </publisher> <year> 1991. </year> <note> To appear. </note>
Reference-contexts: Problem 4. One of the outstanding open problems in typed lambda calculi is the following: Given a term in ordinary untyped lambda calculus, is it decidable whether it can be typed in the second-order 2 calculus? See <ref> [ 11; 48 ] </ref> . This question has been solved in the negative. In [ 105 ] J.B. Wells proves that given a closed, type-free lambda term, the question whether it is typable in second-order 2 calculus, is undecidable.
Reference: 12. <author> A. Boudet. </author> <title> Unification in order-sorted algebras with overloading. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the Eleventh International Conference on Automated Deduction (Saratoga Springs, NY), volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <address> Berlin, June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In [ 5 ] a similar technique is applied to (unquantified) systems of equations and disequations. In [ 90 ] the combination of unification algorithms is extended to the case where alphabets share constants. In related work <ref> [ 12 ] </ref> , unification is performed in the combination of an equational theory and membership constraints. Some progress is in [ 91 ] . Problem 44 (H. Comon). "Syntactic" theories enjoy the property that a (semi) unification algorithm can be derived from the axioms [ 53; 61 ] .
Reference: 13. <author> A. Boudet and H. Comon. </author> <title> About the theory of tree embedding. </title> <editor> In J.-P. Jouannaud, editor, </editor> <booktitle> Proceedings of the Colloquium on Trees in Algebra and Programming (Orsay, France), Lecture Notes in Computer Science, </booktitle> <address> Berlin, April 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Is the existential fragment decidable for partial precedences? The 4 (9 fl 8 fl 9 fl 8 fl ) fragment is undecidable, in general [ 101 ] . The positive existential fragment for the empty precedence (that is, for homeomorphic tree embedding) is decidable <ref> [ 13 ] </ref> . One might also ask whether the first-order theory of total recursive path orderings is decidable. Related results include the following: The existential fragment of the sub-term ordering is decidable, but its 3 (9 fl 8 fl 9 fl ) fragment is not [ 102 ] .
Reference: 14. <author> A. Boudet and E. Contejean. </author> <title> "Syntactic" AC-unification. </title> <editor> In J.-P. Jouannaud, editor, </editor> <booktitle> Proc. CCL, </booktitle> <pages> pages 136-151, </pages> <address> Munich, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: The problem is to design such pruning rules so as to compute a finite derivation tree (hence, a finite complete set of unifiers) for every finitary unification problem of a syntactic equational theory. The core of this problem has been solved <ref> [ 14 ] </ref> . Problem 46 (D. Kapur). Ground reducibility of extended rewrite systems, modulo congruences like associativity and commutativity (AC), is undecidable [ 59 ] . For left-linear AC systems, on the other hand, it is decidable [ 55 ] .
Reference: 15. <author> V. Breazu-Tannen and J. Gallier. </author> <title> Polymorphic rewriting conserves algebraic strong normalization. </title> <booktitle> In Proceedings of the Sixteenth International Colloquium on Automata, Languages and Programming (Stresa, Italy), volume 372 of Lecture Notes in Computer Science, </booktitle> <pages> pages 137-150, </pages> <address> Berlin, </address> <month> July </month> <year> 1989. </year> <booktitle> European Association of Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Progress has been made in [ 63 ] , where it is proven that ground reducibility remains undecidable when a single non-constant function symbol is associative. Problem 50. Combinations of typed -calculi with term-rewriting systems have been studied extensively in the past few years <ref> [ 7; 15; 38; 39 ] </ref> . The strongest termination result allows first-order rules as well as higher-order rules defined by a generalization of primitive recursion.
Reference: 16. <author> F. Bronsard. </author> <title> Using Term Orders to Control Deductions. </title> <type> PhD thesis, </type> <institution> University of Illinois, </institution> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: Bronsard and Reddy have gone on to solve this [ 18 ] by using a more restricted, decidable mechanism. A completeness proof, incorporating equational inference with complete systems, is given in <ref> [ 16 ] </ref> . Problem 38 (J. Siekmann).
Reference: 17. <author> F. Bronsard and U. S. Reddy. </author> <title> Conditional rewriting in Focus. </title> <editor> In M. Okada, editor, </editor> <booktitle> Proceedings of the Second International Workshop on Conditional and Typed Rewriting Systems (Montreal, Canada), volume 516 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Is there an example showing that completion is then incomplete (the persisting rules are not confluent)? The answer is yes, even when completion terminates with finitely many rules [ 93 ] . Problem 37 (U. Reddy, F. Bronsard). In <ref> [ 17 ] </ref> a rewriting-like mechanism for clausal reasoning called "contextual deduction" was proposed. It specializes "ordered resolution" by using pattern matching in place of unification, only instantiating clauses to match existing clauses. Does contextual deduction always terminate? (In [ 17 ] it was taken to be obvious, but that is <p> Problem 37 (U. Reddy, F. Bronsard). In <ref> [ 17 ] </ref> a rewriting-like mechanism for clausal reasoning called "contextual deduction" was proposed. It specializes "ordered resolution" by using pattern matching in place of unification, only instantiating clauses to match existing clauses. Does contextual deduction always terminate? (In [ 17 ] it was taken to be obvious, but that is not clear; see also [ 79 ] .) It was shown in [ 17 ] that the mechanism is complete for refuting ground clauses using a theory that contains all its "strong-ordered" resolvents. <p> It specializes "ordered resolution" by using pattern matching in place of unification, only instantiating clauses to match existing clauses. Does contextual deduction always terminate? (In <ref> [ 17 ] </ref> it was taken to be obvious, but that is not clear; see also [ 79 ] .) It was shown in [ 17 ] that the mechanism is complete for refuting ground clauses using a theory that contains all its "strong-ordered" resolvents. <p> Is there a notion of "complete theory" (like containing all strong-ordered resolvents not provable by contextual refutation) for which contex tual deduction is complete for refutation of ground clauses? Contextual deduction as defined in <ref> [ 17 ] </ref> does not terminate. Bronsard and Reddy have gone on to solve this [ 18 ] by using a more restricted, decidable mechanism. A completeness proof, incorporating equational inference with complete systems, is given in [ 16 ] . Problem 38 (J. Siekmann).
Reference: 18. <author> F. Bronsard and U. S. Reddy. </author> <title> Reduction techniques for first-order reasoning. </title> <editor> In M. Rusinowitch and J. L. Remy, editors, </editor> <booktitle> Proceedings of the Third International Workshop on Conditional Rewriting Systems (Pont-a-Mousson, </booktitle> <address> France, </address> <month> July </month> <year> 1992), </year> <booktitle> volume 656 of Lecture Notes in Computer Science, </booktitle> <pages> pages 242-256. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Is there a notion of "complete theory" (like containing all strong-ordered resolvents not provable by contextual refutation) for which contex tual deduction is complete for refutation of ground clauses? Contextual deduction as defined in [ 17 ] does not terminate. Bronsard and Reddy have gone on to solve this <ref> [ 18 ] </ref> by using a more restricted, decidable mechanism. A completeness proof, incorporating equational inference with complete systems, is given in [ 16 ] . Problem 38 (J. Siekmann).
Reference: 19. <author> A.-C. Caron, J.-L. Coquide, and M. Dauchet. </author> <title> Encompassment properties and automata with constraints. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Rewriting Techniques and Applications (Montreal, Canada), volume 690 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Related results include the following: The existential fragment of the sub-term ordering is decidable, but its 3 (9 fl 8 fl 9 fl ) fragment is not [ 102 ] . The first-order theory of encompassment (the instance-of-subterm relation) is decidable <ref> [ 19 ] </ref> . Once we're at it, we might as well ask what the complexity of the satisfiability test for the existential fragment is|in the total case. Though the first-order theory of encompassment is decidable [ 19 ] , the first-order ( 2 ) theory of the recursive (lexicographic status) <p> The first-order theory of encompassment (the instance-of-subterm relation) is decidable <ref> [ 19 ] </ref> . Once we're at it, we might as well ask what the complexity of the satisfiability test for the existential fragment is|in the total case. Though the first-order theory of encompassment is decidable [ 19 ] , the first-order ( 2 ) theory of the recursive (lexicographic status) path ordering, assuming certain simple conditions on the precedence, is not [ 27 ] . Rephrased Problem 25 (R. Treinen [ 100 ] ). <p> Rephrased Problem 51 (H. Comon, M. Dauchet). Given an arbitrary finite term rewriting system R, is the first order theory of one-step rewriting (! R ) decidable? Decidability would imply the decidability of the first-order theory of encompassment (that is, being an instance of a subterm) <ref> [ 19 ] </ref> , as well as several known decidability results in rewriting. (It is well known that the theory of ! fl R is in general undecid able.) Problem 56 (V. van Oostrom).
Reference: 20. <author> W. Charatonik and L. Pacholski. </author> <title> Negative set constraints with equality. </title> <booktitle> In Proceedings of 9th IEEE Symposium on Logic in Computer Science, </booktitle> <address> Paris, </address> <year> 1994. </year> <note> in press. </note>
Reference-contexts: Variables are interpreted as subsets of the Herbrand Universe. With the obvious interpretation of these symbols, is satisfiability of such formul decidable? Special cases have been solved in [ 44; 2; 6; 42 ] . This has been solved positively <ref> [ 43; 20; 1 ] </ref> . 3 New Problems Problem 78 (P. Lescanne).
Reference: 21. <author> P. Chew. </author> <title> Unique normal forms in term rewriting systems with repeated variables. </title> <booktitle> In Proceedings of the Thirteenth Annual Symposium on Theory of Computing, </booktitle> <pages> pages 7-18. </pages> <publisher> ACM, </publisher> <year> 1981. </year>
Reference-contexts: Oyamaguchi). Is any "strongly" non-overlapping right-linear term-rewriting system confluent? ("Strong" in the sense that left-hand sides are non-overlapping even when the occurrences of variables have been renamed apart <ref> [ 21 ] </ref> .) On the one hand, strongly non-overlapping systems need not be confluent [ 46 ] ; on the other hand, strongly non-overlapping right-ground systems are [ 88 ] . <p> Ogawa). Does a system that is nonoverlapping under unification with infinite terms (unification without "occur-check" [ 71 ] ) have unique normal forms? This conjecture was originally proposed in [ 81 ] with an incomplete proof, as an extension of the result on strongly nonoverlapping systems <ref> [ 62; 21 ] </ref> . Related results appear in [ 88; 99; 69 ] , but the original conjecture is still open. This is related to Problem 2. This problem is also related with modularity of con fluence of systems sharing constructors, see [ 82 ] . Problem 80 (H.
Reference: 22. <author> J. Christian. </author> <title> Problem corner: An experiment with Grau's ternary Boolean algebra. </title> <note> Submitted. </note>
Reference-contexts: Zhang). Is there a convergent extended rewrite system for ternary boolean algebra, for which the following permutative equations hold: f (x; y; z) = f (x; z; y) = f (y; x; z) = f (y; z; x) = f (z; x; y) = f (z; y; x) See <ref> [ 107; 110; 22; 66 ] </ref> . Problem 83. A collection of rewrite orderings operating on disjoint signatures can be extended to an ordering operating on the union of the signatures, while still preserving part of the properties [ 92 ] .
Reference: 23. <author> E. A. Cichon. </author> <title> Bounds on derivation lengths from termination proofs. </title> <type> Technical Report CSD-TR-622, </type> <institution> Department of Computer Science, University of London, Surrey, </institution> <address> England, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: For non-left-linear systems, this property is not modular. The question remains: Is U N ! a modular property of left-linear term-rewriting systems? A positive solution is given in [ 70 ] . Problem 23 (E. A. Cichon <ref> [ 23 ] </ref> ). <p> Must any termination ordering have the Howard ordinal as its order type, as conjec tured in <ref> [ 23 ] </ref> ? If the notion of termination ordering is formalized by using ordinal notations with variables, then a termination proof using such orderings yields a slow growing bound on the lengths of derivations.
Reference: 24. <author> D. Cohen and P. Watson. </author> <title> An efficient representation of arithmetic for term rewriting. </title> <editor> In R. Book, editor, </editor> <booktitle> Proceedings of the Fourth International Conference on Rewriting Techniques and Applications (Como, Italy), volume 488 of Lecture Notes in Computer Science, </booktitle> <pages> pages 240-251, </pages> <address> Berlin, April 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare [ 87; 33; 34; 88 ] . Related is [ 76 ] . Problem 65 (D. Cohen, P. Watson <ref> [ 24 ] </ref> ). An interesting system for doing arithmetic by rewriting was presented in [ 24 ] . Unfortunately, its termination has not been proved. Termination of a related system is proved in [ 103 ] . Problem 68 (H. Comon). <p> Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare [ 87; 33; 34; 88 ] . Related is [ 76 ] . Problem 65 (D. Cohen, P. Watson <ref> [ 24 ] </ref> ). An interesting system for doing arithmetic by rewriting was presented in [ 24 ] . Unfortunately, its termination has not been proved. Termination of a related system is proved in [ 103 ] . Problem 68 (H. Comon).
Reference: 25. <author> H. Comon. </author> <title> Solving inequations in term algebras (Preliminary version). </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 62-69, </pages> <address> Philadelphia, PA, </address> <month> June </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: Weiermann, personal communication]. Problem 24. The existential fragment of the first-order theory of the "recursive path ordering" (with multiset and lexicographic "status") is decidable when the precedence on function symbols is total <ref> [ 25; 57 ] </ref> , but is undecidable for arbitrary formulas. Is the existential fragment decidable for partial precedences? The 4 (9 fl 8 fl 9 fl 8 fl ) fragment is undecidable, in general [ 101 ] .
Reference: 26. <author> H. Comon. </author> <title> Complete axiomatizations of some quotient term algebras. </title> <journal> Theoretical Computer Science, </journal> <volume> 118(2), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: When F only contains an AC symbol and constants, the theory reduces to Presburger's arithmetic and is hence decidable. On the other hand the 1 fragment of T is always decidable <ref> [ 26 ] </ref> . The decidability of the 2 fragment of the theory of T remains open.
Reference: 27. <author> H. Comon and R. Treinen. </author> <title> The first-order theory of lexicographic path orderings is undecidable. </title> <institution> Rapport de Recherche 867, Laboratoire de Recherche en Informatique, Universite de Paris-Sud, Orsay, France, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: Though the first-order theory of encompassment is decidable [ 19 ] , the first-order ( 2 ) theory of the recursive (lexicographic status) path ordering, assuming certain simple conditions on the precedence, is not <ref> [ 27 ] </ref> . Rephrased Problem 25 (R. Treinen [ 100 ] ). Consider a finite set of function sym-bols containing at least one AC (associative-commutative) function symbol. Let T be the corresponding set of terms (modulo the AC properties).
Reference: 28. <author> E. Contejean. </author> <title> Elements pour la Decidabilite de l'Unification modulo la Distributivite. </title> <type> PhD thesis, </type> <institution> Univ. Paris-Sud, Orsay, France, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Although many more cases are described in <ref> [ 28; 30 ] </ref> , the general case remains open. This theory is decidable [ 95; 94 ] . Problem 43. Design a framework for combining constraint solving algo-rithms.
Reference: 29. <author> E. Contejean. </author> <title> A partial solution for D-unification based on a reduction to AC1-unification. </title> <booktitle> In Proceedings of the EATCS International Conference on Automata, Languages and Programming, </booktitle> <pages> pages 621-632, </pages> <address> Lund, Sweden, July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Problem 38 (J. Siekmann). Is satisfiability of equations in the theory of distributivity (unification modulo modulo one right- and one left-distributivity axiom) decidable? (With just one of these, the problem had already been solved in [ 97 ] .) A partial positive solution is given in <ref> [ 29 ] </ref> , based on a striking result on the structure of certain proofs modulo distributivity. Although many more cases are described in [ 28; 30 ] , the general case remains open. This theory is decidable [ 95; 94 ] . Problem 43.
Reference: 30. <author> E. Contejean. </author> <title> Solving linear Diophantine constraints incrementally. </title> <editor> In D. S. Warren, editor, </editor> <booktitle> Proc. of the Tenth Int. Conf. on Logic Programming, Logic Programming, </booktitle> <pages> pages 532-549, </pages> <address> Budapest, Hungary, June 1993. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Although many more cases are described in <ref> [ 28; 30 ] </ref> , the general case remains open. This theory is decidable [ 95; 94 ] . Problem 43. Design a framework for combining constraint solving algo-rithms.
Reference: 31. <author> P.-L. Curien, T. Hardin, and J.-J. Levy. </author> <title> Confluence properties of weak and strong calculi of explicit substitutions. </title> <type> RR 1617, </type> <institution> Institut National de Rechereche en Infor-matique et en Automatique, Rocquencourt, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: This has been solved positively [ 43; 20; 1 ] . 3 New Problems Problem 78 (P. Lescanne). There are confluent calculi of explicit substitutions, but these do not preserve termination (strong normalization) <ref> [ 31; 72 ] </ref> , and there are calculi that are not confluent on open terms, but which do preserve termination [ 65 ] . Is there a calculus of explicit substitution that is both confluent and preserves ter mination? Problem 79 (M. Ogawa).
Reference: 32. <author> M. Dauchet. </author> <title> Simulation of Turing machines by a regular rewrite rule. </title> <journal> Theoretical Computer Science, </journal> <volume> 103(2) </volume> <pages> 409-420, </pages> <year> 1992. </year>
Reference-contexts: What if variables are duplicated? Problem 87 (H. Zantema). Termination of string-rewriting systems is known to be undecidable [ 49 ] . Termination of a single term-rewriting rule was proved undecidable in <ref> [ 32; 64 ] </ref> . It is also undecidable whether there exists a simplification ordering that proves termination of a single term rewriting rule [ 74 ] (cf. [ 54 ] ).
Reference: 33. <author> M. Dauchet, T. Heuillard, P. Lescanne, and S. Tison. </author> <title> Decidability of the confluence of finite ground term rewriting systems and of other related term rewriting systems. </title> <journal> Information and Computation, </journal> <volume> 88(2) </volume> <pages> 187-201, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare <ref> [ 87; 33; 34; 88 ] </ref> . Related is [ 76 ] . Problem 65 (D. Cohen, P. Watson [ 24 ] ). An interesting system for doing arithmetic by rewriting was presented in [ 24 ] . Unfortunately, its termination has not been proved.
Reference: 34. <author> M. Dauchet and S. Tison. </author> <title> The theory of ground rewrite systems is decidable. </title> <booktitle> In Proceedings of the Fifth Symposium on Logic in Computer Science, </booktitle> <pages> pages 242-248, </pages> <address> Philadelphia, PA, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare <ref> [ 87; 33; 34; 88 ] </ref> . Related is [ 76 ] . Problem 65 (D. Cohen, P. Watson [ 24 ] ). An interesting system for doing arithmetic by rewriting was presented in [ 24 ] . Unfortunately, its termination has not been proved.
Reference: 35. <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: For non-left-linear systems, this property is not modular. The question remains: Is U N ! a modular property of left-linear term-rewriting systems? A positive solution is given in [ 70 ] . Problem 23 (E. A. Cichon [ 23 ] ). The following system <ref> [ 35 ] </ref> , based on the "Battle of Hydra and Hercules" in [ 60 ] , is terminating, but not provably so in Peano Arithmetic: h (z; e (x)) ! h (c (z); d (z; x)) d (z; g (x; y)) ! g (e (x); d (z; y)) g (e
Reference: 36. <author> N. Dershowitz, J.-P. Jouannaud, and J. W. Klop. </author> <title> Open problems in rewriting. </title> <editor> In R. Book, editor, </editor> <booktitle> Proceedings of the Fourth International Conference on Rewriting Techniques and Applications (Como, Italy), volume 488 of Lecture Notes in Computer Science, </booktitle> <pages> pages 445-456, </pages> <address> Berlin, April 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction We presented lists of open problems in the theory of rewriting in the proceedings of the previous two conferences <ref> [ 36; 37 ] </ref> . We continue with that tradition this year.
Reference: 37. <author> N. Dershowitz, J.-P. Jouannaud, and J. W. Klop. </author> <title> More problems in rewriting. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Rewriting Techniques and Applications (Montreal, Canada), volume 690 of Lecture Notes in Computer Science, </booktitle> <pages> pages 468-487, </pages> <address> Berlin, June 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction We presented lists of open problems in the theory of rewriting in the proceedings of the previous two conferences <ref> [ 36; 37 ] </ref> . We continue with that tradition this year.
Reference: 38. <author> N. Dershowitz and M. Okada. </author> <title> A rationale for conditional equational programming. </title> <journal> Theoretical Computer Science, </journal> <volume> 75 </volume> <pages> 111-138, </pages> <year> 1990. </year>
Reference-contexts: Progress has been made in [ 63 ] , where it is proven that ground reducibility remains undecidable when a single non-constant function symbol is associative. Problem 50. Combinations of typed -calculi with term-rewriting systems have been studied extensively in the past few years <ref> [ 7; 15; 38; 39 ] </ref> . The strongest termination result allows first-order rules as well as higher-order rules defined by a generalization of primitive recursion.
Reference: 39. <author> D. Dougherty. </author> <title> Adding algebraic rewriting to the untyped lambda calculus (extended abstract). </title> <editor> In R. Book, editor, </editor> <booktitle> Proceedings of the Fourth International Conference on Rewriting Techniques and Applications (Como, Italy), volume 488 of Lecture Notes in Computer Science, </booktitle> <pages> pages 37-48, </pages> <address> Berlin, April 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Progress has been made in [ 63 ] , where it is proven that ground reducibility remains undecidable when a single non-constant function symbol is associative. Problem 50. Combinations of typed -calculi with term-rewriting systems have been studied extensively in the past few years <ref> [ 7; 15; 38; 39 ] </ref> . The strongest termination result allows first-order rules as well as higher-order rules defined by a generalization of primitive recursion.
Reference: 40. <author> M. Fernandez. </author> <title> AC-complement problems: Validity and negation elimination. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Rewriting Techniques and Applications (Montreal, Canada), volume 690 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Several special cases have been solved <ref> [ 40; 67 ] </ref> , and in unpublished work in progress. Problem 35. Huet's proof [ 47 ] of the "completeness" of completion is predicated on the assumption that the ordering supplied to completion does not change during the process.
Reference: 41. <author> M. C. F. Ferreira and H. Zantema. </author> <title> Total termination of term rewriting. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Proceedings of the Fifth Conference on Rewriting Techniques and Applications, volume 690 of Lecture Notes in Computer Science, </booktitle> <pages> pages 213-227. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: rewrite system, the system is called "totally terminating." The union of two totally terminating rewrite systems which do not share any symbols is totally terminating if at least one of them does not contain a rule that has more occurrences of some variable on the right than on the left <ref> [ 41 ] </ref> . What if variables are duplicated? Problem 87 (H. Zantema). Termination of string-rewriting systems is known to be undecidable [ 49 ] . Termination of a single term-rewriting rule was proved undecidable in [ 32; 64 ] .
Reference: 42. <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints using tree automata. </title> <booktitle> In Proceedings of the Symposium on Theoretical Aspects of Computer Science (Wurzburg, Germany), Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Variables are interpreted as subsets of the Herbrand Universe. With the obvious interpretation of these symbols, is satisfiability of such formul decidable? Special cases have been solved in <ref> [ 44; 2; 6; 42 ] </ref> . This has been solved positively [ 43; 20; 1 ] . 3 New Problems Problem 78 (P. Lescanne).
Reference: 43. <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints with negated subset relationships. </title> <booktitle> In Proc. 34th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 372-380, </pages> <address> Palo Alto, CA, November 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Variables are interpreted as subsets of the Herbrand Universe. With the obvious interpretation of these symbols, is satisfiability of such formul decidable? Special cases have been solved in [ 44; 2; 6; 42 ] . This has been solved positively <ref> [ 43; 20; 1 ] </ref> . 3 New Problems Problem 78 (P. Lescanne).
Reference: 44. <author> N. Heintze and J. Jaffar. </author> <title> A decision procedure for a class of set constraints. </title> <booktitle> In Proceedings of the Fifth Symposium on Logic in Computer Science (Philadelphia, PA), </booktitle> <pages> pages 42-51. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Variables are interpreted as subsets of the Herbrand Universe. With the obvious interpretation of these symbols, is satisfiability of such formul decidable? Special cases have been solved in <ref> [ 44; 2; 6; 42 ] </ref> . This has been solved positively [ 43; 20; 1 ] . 3 New Problems Problem 78 (P. Lescanne).
Reference: 45. <author> J. Hsiang and M. Rusinowitch. </author> <title> A new method for establishing refutational completeness in theorem proving. </title> <editor> In J. H. Siekmann, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Automated Deduction (Oxford, England), volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 141-152, </pages> <address> Berlin, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Does it extend to equational theories whose axioms have the same set of variables on left and right hand side? Problem 85 (M. Rusinowitch). Ordered paramodulation is known to be complete for simplification orderings that are total on ground terms <ref> [ 45 ] </ref> . Other theorem proving strategies are similarly restricted. How can these restrictions be relaxed? Problem 86 (H. Zantema).
Reference: 46. <author> G. Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: Oyamaguchi). Is any "strongly" non-overlapping right-linear term-rewriting system confluent? ("Strong" in the sense that left-hand sides are non-overlapping even when the occurrences of variables have been renamed apart [ 21 ] .) On the one hand, strongly non-overlapping systems need not be confluent <ref> [ 46 ] </ref> ; on the other hand, strongly non-overlapping right-ground systems are [ 88 ] .
Reference: 47. <author> G. Huet. </author> <title> A complete proof of correctness of the Knuth-Bendix completion algorithm. </title> <journal> J. Computer and System Sciences, </journal> <volume> 23(1) </volume> <pages> 11-21, </pages> <year> 1981. </year>
Reference-contexts: Several special cases have been solved [ 40; 67 ] , and in unpublished work in progress. Problem 35. Huet's proof <ref> [ 47 ] </ref> of the "completeness" of completion is predicated on the assumption that the ordering supplied to completion does not change during the process.
Reference: 48. <editor> G. Huet, editor. </editor> <booktitle> Logical Foundations of Functional Programming. University of Texas at Austin Year of Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Problem 4. One of the outstanding open problems in typed lambda calculi is the following: Given a term in ordinary untyped lambda calculus, is it decidable whether it can be typed in the second-order 2 calculus? See <ref> [ 11; 48 ] </ref> . This question has been solved in the negative. In [ 105 ] J.B. Wells proves that given a closed, type-free lambda term, the question whether it is typable in second-order 2 calculus, is undecidable.
Reference: 49. <author> G. Huet and D. S. Lankford. </author> <title> On the uniform halting problem for term rewriting systems. </title> <institution> Rapport laboria 283, Institut de Recherche en Informatique et en Automatique, Le Chesnay, France, </institution> <month> March </month> <year> 1978. </year>
Reference-contexts: This is related to Problem 2. This problem is also related with modularity of con fluence of systems sharing constructors, see [ 82 ] . Problem 80 (H. Comon). Strong sequentiality is a property of rewrite systems introduced in <ref> [ 49 ] </ref> (see [ 51 ] ), which ensures the existence of optimal reduction strategies. <p> What if variables are duplicated? Problem 87 (H. Zantema). Termination of string-rewriting systems is known to be undecidable <ref> [ 49 ] </ref> . Termination of a single term-rewriting rule was proved undecidable in [ 32; 64 ] . It is also undecidable whether there exists a simplification ordering that proves termination of a single term rewriting rule [ 74 ] (cf. [ 54 ] ).
Reference: 50. <author> G. Huet and J.-J. Levy. </author> <title> Call by need computations in non-ambiguous linear term rewriting systems. </title> <institution> Rapport Laboria 359, Institut National de Recherche en Informa-tique et en Automatique, Le Chesnay, France, </institution> <month> August </month> <year> 1979. </year>
Reference: 51. <author> G. Huet and J.-J. Levy. </author> <title> Computations in orthogonal rewriting systems, I and II. </title> <editor> In J.-L. Lassez and G. Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson, </booktitle> <pages> pages 395-443. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year> <note> This is a revision of [ 50 </note> ] . 
Reference-contexts: This is related to Problem 2. This problem is also related with modularity of con fluence of systems sharing constructors, see [ 82 ] . Problem 80 (H. Comon). Strong sequentiality is a property of rewrite systems introduced in [ 49 ] (see <ref> [ 51 ] </ref> ), which ensures the existence of optimal reduction strategies.
Reference: 52. <author> G. Huet and J.-J. Levy. </author> <title> Computations in orthogonal rewriting systems, II. </title> <editor> In J.- L. Lassez and G. Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson, chapter 12, </booktitle> <pages> pages 415-443. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Is strong sequentiality decidable for arbitrary rewrite systems? What is the complexity of strong sequentiality in the linear case? in the orthogonal case? Decidability results for particular rewrite systems are given in <ref> [ 52; 98; 58 ] </ref> , among others. Problem 81 (A. Weiermann).
Reference: 53. <author> J.-P. Jouannaud and C. Kirchner. </author> <title> Solving equations in abstract algebras: A rule-based survey of unification. </title> <editor> In J.-L. Lassez and G. Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson. </booktitle> <publisher> MIT-Press, </publisher> <year> 1991. </year>
Reference-contexts: In related work [ 12 ] , unification is performed in the combination of an equational theory and membership constraints. Some progress is in [ 91 ] . Problem 44 (H. Comon). "Syntactic" theories enjoy the property that a (semi) unification algorithm can be derived from the axioms <ref> [ 53; 61 ] </ref> . This algorithm terminates for some particular cases (for instance, if all variable occurrences in the axioms are at depth at most one, and cycles have no solution) but does not in general. <p> For the case of associativity and com-mutativity (AC), with a seven-axiom syntactic presentation, the derivation tree obtained by the non-deterministic application of the syntactic unification rules (Decompose, Mutate, Merge, Coalesce, Check*, Delete) in <ref> [ 53 ] </ref> can be pruned so as to become finite in most cases. The basic idea is that one unification problem (up to renaming) must appear infinitely times on every infinite branch of the tree (since there are finitely many axioms in the syntactic presentation).
Reference: 54. <author> J.-P. Jouannaud and H. Kirchner. </author> <title> Construction d'un plus petit ordre de simplification. </title> <journal> RAIRO Theoretical Informatics, </journal> <volume> 18(3) </volume> <pages> 191-207, </pages> <year> 1984. </year>
Reference-contexts: Termination of a single term-rewriting rule was proved undecidable in [ 32; 64 ] . It is also undecidable whether there exists a simplification ordering that proves termination of a single term rewriting rule [ 74 ] (cf. <ref> [ 54 ] </ref> ).
Reference: 55. <author> J.-P. Jouannaud and E. Kounalis. </author> <title> Automatic proofs by induction in equational theories without constructors. </title> <journal> Information and Computation, </journal> <volume> 81(1) </volume> <pages> 1-33, </pages> <year> 1989. </year>
Reference-contexts: The core of this problem has been solved [ 14 ] . Problem 46 (D. Kapur). Ground reducibility of extended rewrite systems, modulo congruences like associativity and commutativity (AC), is undecidable [ 59 ] . For left-linear AC systems, on the other hand, it is decidable <ref> [ 55 ] </ref> . What can be said more generally about restrictions on extended rewriting that give decidability? This problem is related to number 2.
Reference: 56. <author> J.-P. Jouannaud and M. Okada. </author> <title> Executable higher-order algebraic specification languages. </title> <booktitle> In Proceedings of the Sixth Symposium on Logic in Computer Science, </booktitle> <pages> pages 350-361, </pages> <address> Amsterdam, The Netherlands, 1991. </address> <publisher> IEEE. </publisher>
Reference-contexts: If T (F ; X ) is the term-algebra which includes only previously defined functional constants| forbidding the use of mutually recursive functional constants|termination is ensured <ref> [ 56 ] </ref> . Does termination also hold when there are mutually recursive definitions? Does this also hold when the subterm assumption is unfulfilled? (In [ 56 ] an alternative schema is proposed, with the subterm assumption weakened at the price of having only first-order variables in X.) Questions of confluence <p> T (F ; X ) is the term-algebra which includes only previously defined functional constants| forbidding the use of mutually recursive functional constants|termination is ensured <ref> [ 56 ] </ref> . Does termination also hold when there are mutually recursive definitions? Does this also hold when the subterm assumption is unfulfilled? (In [ 56 ] an alternative schema is proposed, with the subterm assumption weakened at the price of having only first-order variables in X.) Questions of confluence of combinations of typed -calculi and higher-order systems also merit investigation.
Reference: 57. <author> J.-P. Jouannaud and M. Okada. </author> <title> Satisfiability of systems of ordinal notations with the subterm property is decidable. </title> <editor> In J. L. Albert, B. Monien, and M. R. Artalejo, editors, </editor> <booktitle> Proceedings of the Eighteenth EATCS Colloquium on Automata, Languages and Programming (Madrid, Spain), volume 510 of Lecture Notes in Computer Science, </booktitle> <pages> pages 455-468, </pages> <address> Berlin, July 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Weiermann, personal communication]. Problem 24. The existential fragment of the first-order theory of the "recursive path ordering" (with multiset and lexicographic "status") is decidable when the precedence on function symbols is total <ref> [ 25; 57 ] </ref> , but is undecidable for arbitrary formulas. Is the existential fragment decidable for partial precedences? The 4 (9 fl 8 fl 9 fl 8 fl ) fragment is undecidable, in general [ 101 ] .
Reference: 58. <author> J.-P. Jouannaud and W. Sadfi. </author> <title> Strong sequentiality of left-linear overlapping rewrite systems. </title> <editor> In N. Dershowitz and N. Lindenstrauss, editors, </editor> <booktitle> Proceedings of the Fourth International Workshop on Conditional Rewriting Systems (Jerusalem, </booktitle> <address> Israel, </address> <month> July </month> <year> 1994), </year> <note> Berlin, 1995. Springer-Verlag. To appear. </note>
Reference-contexts: Is strong sequentiality decidable for arbitrary rewrite systems? What is the complexity of strong sequentiality in the linear case? in the orthogonal case? Decidability results for particular rewrite systems are given in <ref> [ 52; 98; 58 ] </ref> , among others. Problem 81 (A. Weiermann).
Reference: 59. <author> D. Kapur, P. Narendran, and H. Zhang. </author> <title> On sufficient completeness and related properties of term rewriting systems. </title> <journal> Acta Informatica, </journal> <volume> 24(4) </volume> <pages> 395-415, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: The core of this problem has been solved [ 14 ] . Problem 46 (D. Kapur). Ground reducibility of extended rewrite systems, modulo congruences like associativity and commutativity (AC), is undecidable <ref> [ 59 ] </ref> . For left-linear AC systems, on the other hand, it is decidable [ 55 ] . What can be said more generally about restrictions on extended rewriting that give decidability? This problem is related to number 2.
Reference: 60. <author> L. Kirby and J. Paris. </author> <title> Accessible independence results for Peano arithmetic. </title> <journal> Bulletin London Mathematical Society, </journal> <volume> 14 </volume> <pages> 285-293, </pages> <year> 1982. </year>
Reference-contexts: The question remains: Is U N ! a modular property of left-linear term-rewriting systems? A positive solution is given in [ 70 ] . Problem 23 (E. A. Cichon [ 23 ] ). The following system [ 35 ] , based on the "Battle of Hydra and Hercules" in <ref> [ 60 ] </ref> , is terminating, but not provably so in Peano Arithmetic: h (z; e (x)) ! h (c (z); d (z; x)) d (z; g (x; y)) ! g (e (x); d (z; y)) g (e (x); e (y)) ! e (g (x; y)) Transfinite (* 0 -) induction
Reference: 61. <editor> C. Kirchner. </editor> <booktitle> Computing unification algorithms. In Proceedings of the First Symposium on Logic in Computer Science, </booktitle> <pages> pages 206-216, </pages> <address> Cambridge, Massachussets, </address> <month> June </month> <year> 1986. </year> <note> IEEE. </note>
Reference-contexts: In related work [ 12 ] , unification is performed in the combination of an equational theory and membership constraints. Some progress is in [ 91 ] . Problem 44 (H. Comon). "Syntactic" theories enjoy the property that a (semi) unification algorithm can be derived from the axioms <ref> [ 53; 61 ] </ref> . This algorithm terminates for some particular cases (for instance, if all variable occurrences in the axioms are at depth at most one, and cycles have no solution) but does not in general.
Reference: 62. <author> J. W. Klop. </author> <title> Combinatory Reduction Systems, volume 127 of Mathematical Centre Tracts. </title> <publisher> Mathematisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1980. </year>
Reference-contexts: A positive solution has recently been claimed [M. Marchiori, personal communica tion]. Problem 61 (T. Nipkow, M. Takahashi). For higher-order rewrite formats as given by combinatory reduction systems <ref> [ 62 ] </ref> and higher-order rewrite systems [ 80; 96 ] , confluence has been proved in the restricted case of orthogonal systems. <p> Ogawa). Does a system that is nonoverlapping under unification with infinite terms (unification without "occur-check" [ 71 ] ) have unique normal forms? This conjecture was originally proposed in [ 81 ] with an incomplete proof, as an extension of the result on strongly nonoverlapping systems <ref> [ 62; 21 ] </ref> . Related results appear in [ 88; 99; 69 ] , but the original conjecture is still open. This is related to Problem 2. This problem is also related with modularity of con fluence of systems sharing constructors, see [ 82 ] . Problem 80 (H.
Reference: 63. <author> G. Kucherov and M. Rusinowitch. </author> <title> On the ground reducibility problem for word rewriting systems with variables. </title> <journal> Information Processing Letters, </journal> <note> 1994. To appear. Earlier version appeared in the Proceedings of 1994 ACM/SIGAPP Symposium on Applied Computing, Phoenix, AZ. </note>
Reference-contexts: For left-linear AC systems, on the other hand, it is decidable [ 55 ] . What can be said more generally about restrictions on extended rewriting that give decidability? This problem is related to number 2. Progress has been made in <ref> [ 63 ] </ref> , where it is proven that ground reducibility remains undecidable when a single non-constant function symbol is associative. Problem 50. Combinations of typed -calculi with term-rewriting systems have been studied extensively in the past few years [ 7; 15; 38; 39 ] .
Reference: 64. <author> P. Lescanne. </author> <title> On termination of one rule rewrite systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 132 </volume> <pages> 395-401, </pages> <year> 1994. </year>
Reference-contexts: What if variables are duplicated? Problem 87 (H. Zantema). Termination of string-rewriting systems is known to be undecidable [ 49 ] . Termination of a single term-rewriting rule was proved undecidable in <ref> [ 32; 64 ] </ref> . It is also undecidable whether there exists a simplification ordering that proves termination of a single term rewriting rule [ 74 ] (cf. [ 54 ] ).
Reference: 65. <author> P. Lescanne and J. Rouyer-Degli. </author> <title> The calculus of explicit substitutions . Technical Report RR-2222, </title> <address> INRIA-Lorraine, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Lescanne). There are confluent calculi of explicit substitutions, but these do not preserve termination (strong normalization) [ 31; 72 ] , and there are calculi that are not confluent on open terms, but which do preserve termination <ref> [ 65 ] </ref> . Is there a calculus of explicit substitution that is both confluent and preserves ter mination? Problem 79 (M. Ogawa).
Reference: 66. <author> L.Fribourg. </author> <title> A superposition oriented theorem prover. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 35:161, </address> <year> 1985. </year>
Reference-contexts: Zhang). Is there a convergent extended rewrite system for ternary boolean algebra, for which the following permutative equations hold: f (x; y; z) = f (x; z; y) = f (y; x; z) = f (y; z; x) = f (z; x; y) = f (z; y; x) See <ref> [ 107; 110; 22; 66 ] </ref> . Problem 83. A collection of rewrite orderings operating on disjoint signatures can be extended to an ordering operating on the union of the signatures, while still preserving part of the properties [ 92 ] .
Reference: 67. <author> D. Lugiez and J.-L. Moysset. </author> <title> Complement problems and tree automata in AC-like theories. </title> <booktitle> In Proceedings of the Symposium on Theoretical Aspects of Computer Science (Wurzburg, Germany), Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Several special cases have been solved <ref> [ 40; 67 ] </ref> , and in unpublished work in progress. Problem 35. Huet's proof [ 47 ] of the "completeness" of completion is predicated on the assumption that the ordering supplied to completion does not change during the process.
Reference: 68. <author> K. Mano, </author> <month> September </month> <year> 1993. </year> <type> Personal communication. </type>
Reference-contexts: Does the Church-Rosser property imply decreasing Church-Rosser? That is, is it always possible to localize the Church-Rosser property? This is known to be the case for (weakly) normalizing and finite systems. It is now known to hold for countable systems <ref> [ 68 ] </ref> , [ 85, Cor. 2.3.30 ] . Rephrased Problem 57 (F. Baader [ 3 ] ).
Reference: 69. <author> K. Mano and M. Ogawa. </author> <title> A new proof of Chew's theorem. </title> <type> Technical report, </type> <institution> IPSJ PRG94-19-7, </institution> <year> 1994. </year>
Reference-contexts: Related results appear in <ref> [ 88; 99; 69 ] </ref> , but the original conjecture is still open. This is related to Problem 2. This problem is also related with modularity of con fluence of systems sharing constructors, see [ 82 ] . Problem 80 (H. Comon).
Reference: 70. <author> M. Marchiori. </author> <title> Modularity of UN ! for left-linear term rewriting systems. </title> <type> Technical report, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: For non-left-linear systems, this property is not modular. The question remains: Is U N ! a modular property of left-linear term-rewriting systems? A positive solution is given in <ref> [ 70 ] </ref> . Problem 23 (E. A. Cichon [ 23 ] ).
Reference: 71. <author> A. Martelli and G. Rossi. </author> <title> Efficient unification with infinite terms in logic programming. </title> <booktitle> In International conference on fifth generation computer systems, </booktitle> <pages> pages 202-209, </pages> <year> 1984. </year>
Reference-contexts: Is there a calculus of explicit substitution that is both confluent and preserves ter mination? Problem 79 (M. Ogawa). Does a system that is nonoverlapping under unification with infinite terms (unification without "occur-check" <ref> [ 71 ] </ref> ) have unique normal forms? This conjecture was originally proposed in [ 81 ] with an incomplete proof, as an extension of the result on strongly nonoverlapping systems [ 62; 21 ] .
Reference: 72. <author> P.-A. Mellies. </author> <title> Typed -calculi with explicit substitutions may not terminate, </title> <note> 1995. To appear. </note>
Reference-contexts: This has been solved positively [ 43; 20; 1 ] . 3 New Problems Problem 78 (P. Lescanne). There are confluent calculi of explicit substitutions, but these do not preserve termination (strong normalization) <ref> [ 31; 72 ] </ref> , and there are calculi that are not confluent on open terms, but which do preserve termination [ 65 ] . Is there a calculus of explicit substitution that is both confluent and preserves ter mination? Problem 79 (M. Ogawa).
Reference: 73. <author> A. Middeldorp. </author> <title> Modular aspects of properties of term rewriting systems related to normal forms. </title> <editor> In N. Dershowitz, editor, </editor> <booktitle> Proceedings of the Third International Conference on Rewriting Techniques and Applications (Chapel Hill, NC), volume 355 of Lecture Notes in Computer Science, </booktitle> <pages> pages 263-277, </pages> <address> Berlin, April 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Moreover, given a closed type-free lambda term M and a type , then it is also undecidable in second-order 2 calculus whether M has type . Problem 6 (A. Middeldorp <ref> [ 73 ] </ref> ). If R and S are two term-rewriting systems with disjoint vocabularies, such that for each of R and S any two convertible normal forms must be identical, then their union R [ S also enjoys this property [ 73 ] . <p> Problem 6 (A. Middeldorp <ref> [ 73 ] </ref> ). If R and S are two term-rewriting systems with disjoint vocabularies, such that for each of R and S any two convertible normal forms must be identical, then their union R [ S also enjoys this property [ 73 ] .
Reference: 74. <author> A. Middeldorp and B. Gramlich. </author> <title> Simple termination is difficult. Applicable Algebra in Engineering, </title> <journal> Communication and Computing, </journal> <volume> 6(2) </volume> <pages> 115-128, </pages> <year> 1995. </year>
Reference-contexts: Zantema). Termination of string-rewriting systems is known to be undecidable [ 49 ] . Termination of a single term-rewriting rule was proved undecidable in [ 32; 64 ] . It is also undecidable whether there exists a simplification ordering that proves termination of a single term rewriting rule <ref> [ 74 ] </ref> (cf. [ 54 ] ).
Reference: 75. <author> D. Miller. </author> <title> A logic programming language with lambda-abstraction, function variables, and simple unification. </title> <editor> In P. Schroeder-Heister, editor, </editor> <booktitle> Extensions of Logic Programming, volume 690 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Such constructions can be used for proving modular termination properties of rewrite systems. Do they extend to the case where one of the starting orderings is given by fi reductions on typed lambda terms? Problem 84. Unification of patterns (a la <ref> [ 75 ] </ref> ) modulo associativity and commu-tativity has been shown decidable [ 89 ] . Does it extend to equational theories whose axioms have the same set of variables on left and right hand side? Problem 85 (M. Rusinowitch).
Reference: 76. <author> M.Oyamaguchi. </author> <title> On the word problem for right-ground term-rewriting systems. </title> <journal> In Trans. IEICE, </journal> <volume> volume E73-5, </volume> <pages> pages 718-723, </pages> <year> 1990. </year>
Reference-contexts: Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare [ 87; 33; 34; 88 ] . Related is <ref> [ 76 ] </ref> . Problem 65 (D. Cohen, P. Watson [ 24 ] ). An interesting system for doing arithmetic by rewriting was presented in [ 24 ] . Unfortunately, its termination has not been proved. Termination of a related system is proved in [ 103 ] .
Reference: 77. <author> F. Muller. </author> <title> Confluence of the lambda calculus with left-linear algebraic rewriting. </title> <journal> Information Processing Letters, </journal> <volume> 41 </volume> <pages> 293-299, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Suppose the rules of R do not overlap the rules of S. Is R [ S confluent? This is true for the restricted case when R is a term-rewriting system (an easy generalization of a result by F. Muller <ref> [ 77 ] </ref> ), or if neither system has critical pairs. (The restriction to the same alphabet is essential, since confluence is in general not preserved under the addition of function symbols, not even for left-linear systems.) The answer is yes [ 86, Thm. 3.13 ] . Problem 63 (M.
Reference: 78. <editor> A. Nerode and Y. V. Matiyasevich, editors. </editor> <booktitle> Logical Foundations of Computer Science, Third International Symposium, </booktitle> <address> LFCS'94, St. Petersburg, Russia, </address> <month> July </month> <year> 1994, </year> <booktitle> Proceedings, volume 813 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: 79. <author> R. Nieuwenhuis and F. Orejas. </author> <title> Clausal rewriting. </title> <editor> In S. Kaplan and M. Okada, editors, </editor> <booktitle> Extended Abstracts of the Second International Workshop on Conditional and Typed Rewriting Systems, </booktitle> <pages> pages 81-88, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1990. </year> <institution> Concordia University. </institution> <note> Revised version to appear in Lecture Notes in Computer Science, Springer-Verlag, Berlin. </note>
Reference-contexts: It specializes "ordered resolution" by using pattern matching in place of unification, only instantiating clauses to match existing clauses. Does contextual deduction always terminate? (In [ 17 ] it was taken to be obvious, but that is not clear; see also <ref> [ 79 ] </ref> .) It was shown in [ 17 ] that the mechanism is complete for refuting ground clauses using a theory that contains all its "strong-ordered" resolvents.
Reference: 80. <author> T. Nipkow. </author> <title> Higher-order critical pairs. </title> <booktitle> In Proceedings of the Sixth Symposium on Logic in Computer Science, </booktitle> <pages> pages 342-349, </pages> <address> Amsterdam, The Netherlands, 1991. </address> <publisher> IEEE. </publisher>
Reference-contexts: A positive solution has recently been claimed [M. Marchiori, personal communica tion]. Problem 61 (T. Nipkow, M. Takahashi). For higher-order rewrite formats as given by combinatory reduction systems [ 62 ] and higher-order rewrite systems <ref> [ 80; 96 ] </ref> , confluence has been proved in the restricted case of orthogonal systems. Can confluence be extended to such systems when they are weakly orthogonal (all critical pairs are trivial)? When critical pairs arise only at the root, confluence is known to hold.
Reference: 81. <author> M. Ogawa and S. Ono. </author> <title> On the uniquely converging property of nonlinear term rewriting systems. </title> <type> Technical report, </type> <institution> IEICE COMP89-7, </institution> <year> 1989. </year>
Reference-contexts: Is there a calculus of explicit substitution that is both confluent and preserves ter mination? Problem 79 (M. Ogawa). Does a system that is nonoverlapping under unification with infinite terms (unification without "occur-check" [ 71 ] ) have unique normal forms? This conjecture was originally proposed in <ref> [ 81 ] </ref> with an incomplete proof, as an extension of the result on strongly nonoverlapping systems [ 62; 21 ] . Related results appear in [ 88; 99; 69 ] , but the original conjecture is still open. This is related to Problem 2.
Reference: 82. <author> E. Ohlebusch. </author> <title> On the modularity of confluence of constructor-sharing term rewriting systems. </title> <booktitle> In Proceedings of the Colloquium on Trees in Algebra and Programming, </booktitle> <year> 1994. </year>
Reference-contexts: Related results appear in [ 88; 99; 69 ] , but the original conjecture is still open. This is related to Problem 2. This problem is also related with modularity of con fluence of systems sharing constructors, see <ref> [ 82 ] </ref> . Problem 80 (H. Comon). Strong sequentiality is a property of rewrite systems introduced in [ 49 ] (see [ 51 ] ), which ensures the existence of optimal reduction strategies.
Reference: 83. <author> Y. Ohta, M. Oyamaguchi, and Y. Toyama. </author> <title> On the Church-Rosser property of simple-right-linear term rewriting systems. </title> <journal> Trans. IEICE, </journal> <note> to appear. </note>
Reference-contexts: A partial positive solution is given in <ref> [ 83; 99 ] </ref> , namely, any strongly non-overlapping right-linear term-rewriting system is confluent if it satisfies the condition that for any rewrite rule, no variables occurring more than once in the left-hand-side occur in the right-hand-side. Problem 60 (H. Zantema).
Reference: 84. <author> V. v. Oostrom. </author> <title> Confluence by decreasing diagrams. </title> <type> IR 298, </type> <institution> Vrije Universiteit, </institution> <address> Ams-terdam, The Netherlands, </address> <month> August </month> <year> 1992. </year> <note> To appear in Theoretical Computer Science. </note>
Reference-contexts: An abstract reduction system is "decreasing Church-Rosser", if there exists a labelling of the reduction relation by a well-founded set of labels, such that all local divergences can be completed to form a "decreasing diagram" (see <ref> [ 84 ] </ref> for precise definitions). Does the Church-Rosser property imply decreasing Church-Rosser? That is, is it always possible to localize the Church-Rosser property? This is known to be the case for (weakly) normalizing and finite systems.
Reference: 85. <author> V. v. Oostrom. </author> <title> Confluence for Abstract and Higher-Order Rewriting. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Does the Church-Rosser property imply decreasing Church-Rosser? That is, is it always possible to localize the Church-Rosser property? This is known to be the case for (weakly) normalizing and finite systems. It is now known to hold for countable systems [ 68 ] , <ref> [ 85, Cor. 2.3.30 ] </ref> . Rephrased Problem 57 (F. Baader [ 3 ] ).
Reference: 86. <author> V. v. Oostrom and F. v. Raamsdonk. </author> <title> Weak orthogonality implies confluence: the higher-order case. </title> <booktitle> In [ 78, </booktitle> <pages> pp. </pages> <month> 379-392 ] , </month> <year> 1994. </year>
Reference-contexts: Weakly orthogonal higher-order rewriting systems are confluent. This has been shown both via the Tait-Martin-Lof method and via finite developments <ref> [ 86, Sec. 3 ] </ref> . Problem 62 (V. van Oostrom). Let R and S be two left-linear, confluent combinatory reduction systems with the same alphabet. Suppose the rules of R do not overlap the rules of S. <p> Muller [ 77 ] ), or if neither system has critical pairs. (The restriction to the same alphabet is essential, since confluence is in general not preserved under the addition of function symbols, not even for left-linear systems.) The answer is yes <ref> [ 86, Thm. 3.13 ] </ref> . Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare [ 87; 33; 34; 88 ] . Related is [ 76 ] . Problem 65 (D. Cohen, P. Watson [ 24 ] ).
Reference: 87. <author> M. Oyamaguchi. </author> <title> The Church-Rosser property for ground term rewriting systems is decidable. </title> <journal> Theoretical Computer Science, </journal> <volume> 49(1) </volume> <pages> 43-79, </pages> <year> 1987. </year>
Reference-contexts: Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare <ref> [ 87; 33; 34; 88 ] </ref> . Related is [ 76 ] . Problem 65 (D. Cohen, P. Watson [ 24 ] ). An interesting system for doing arithmetic by rewriting was presented in [ 24 ] . Unfortunately, its termination has not been proved.
Reference: 88. <author> M. Oyamaguchi and Y. Ohta. </author> <title> On the confluent property of right-ground term rewriting systems. </title> <journal> Trans. IEICE, </journal> <volume> J76-D-I:39-45, </volume> <year> 1993. </year>
Reference-contexts: term-rewriting system confluent? ("Strong" in the sense that left-hand sides are non-overlapping even when the occurrences of variables have been renamed apart [ 21 ] .) On the one hand, strongly non-overlapping systems need not be confluent [ 46 ] ; on the other hand, strongly non-overlapping right-ground systems are <ref> [ 88 ] </ref> . A partial positive solution is given in [ 83; 99 ] , namely, any strongly non-overlapping right-linear term-rewriting system is confluent if it satisfies the condition that for any rewrite rule, no variables occurring more than once in the left-hand-side occur in the right-hand-side. <p> Problem 63 (M. Oyamaguchi). Is confluence of right-ground term-rewriting systems decidable? Compare <ref> [ 87; 33; 34; 88 ] </ref> . Related is [ 76 ] . Problem 65 (D. Cohen, P. Watson [ 24 ] ). An interesting system for doing arithmetic by rewriting was presented in [ 24 ] . Unfortunately, its termination has not been proved. <p> Related results appear in <ref> [ 88; 99; 69 ] </ref> , but the original conjecture is still open. This is related to Problem 2. This problem is also related with modularity of con fluence of systems sharing constructors, see [ 82 ] . Problem 80 (H. Comon).
Reference: 89. <author> Z. Quian and K. Wang. </author> <title> Modular ac-unification of higher-order patterns. </title> <editor> In J.-P. Jouannaud, editor, </editor> <booktitle> CCL94, </booktitle> <pages> pages 105-120, </pages> <address> Munich, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: Do they extend to the case where one of the starting orderings is given by fi reductions on typed lambda terms? Problem 84. Unification of patterns (a la [ 75 ] ) modulo associativity and commu-tativity has been shown decidable <ref> [ 89 ] </ref> . Does it extend to equational theories whose axioms have the same set of variables on left and right hand side? Problem 85 (M. Rusinowitch). Ordered paramodulation is known to be complete for simplification orderings that are total on ground terms [ 45 ] .
Reference: 90. <author> C. Ringeissen. </author> <title> Unification in a combination of equational theories with shared con-stants and its application to primal algebras. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Proceedings of the Conference on Logic Programming and Automated Reasoning (St. Petersburg, Russia), volume 624 of Lecture Notes in Artificial Intelligence, </booktitle> <address> Berlin, July 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Design a framework for combining constraint solving algo-rithms. Some particular cases have been attacked: In [ 4 ] it was shown how decision procedures for solvability of unification problems can be combined. In [ 5 ] a similar technique is applied to (unquantified) systems of equations and disequations. In <ref> [ 90 ] </ref> the combination of unification algorithms is extended to the case where alphabets share constants. In related work [ 12 ] , unification is performed in the combination of an equational theory and membership constraints. Some progress is in [ 91 ] . Problem 44 (H.
Reference: 91. <author> C. Ringeissen. Combinaison de resolutions de contraintes. </author> <type> Master's thesis, </type> <institution> Nancy, </institution> <month> December </month> <year> 1993. </year> <month> These. </month>
Reference-contexts: In [ 90 ] the combination of unification algorithms is extended to the case where alphabets share constants. In related work [ 12 ] , unification is performed in the combination of an equational theory and membership constraints. Some progress is in <ref> [ 91 ] </ref> . Problem 44 (H. Comon). "Syntactic" theories enjoy the property that a (semi) unification algorithm can be derived from the axioms [ 53; 61 ] .
Reference: 92. <author> A. Rubio. </author> <title> Automated deduction with constrained clauses. </title> <type> PhD thesis, </type> <institution> Univ. de Catalunya, </institution> <year> 1994. </year>
Reference-contexts: Problem 83. A collection of rewrite orderings operating on disjoint signatures can be extended to an ordering operating on the union of the signatures, while still preserving part of the properties <ref> [ 92 ] </ref> . Such constructions can be used for proving modular termination properties of rewrite systems. Do they extend to the case where one of the starting orderings is given by fi reductions on typed lambda terms? Problem 84.
Reference: 93. <author> A. Sattler-Klein. </author> <title> About changing the ordering during Knuth-Bendix completion. </title> <booktitle> In Proceedings of the Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 175-186, </pages> <year> 1994. </year>
Reference-contexts: Is there an example showing that completion is then incomplete (the persisting rules are not confluent)? The answer is yes, even when completion terminates with finitely many rules <ref> [ 93 ] </ref> . Problem 37 (U. Reddy, F. Bronsard). In [ 17 ] a rewriting-like mechanism for clausal reasoning called "contextual deduction" was proposed. It specializes "ordered resolution" by using pattern matching in place of unification, only instantiating clauses to match existing clauses.
Reference: 94. <author> M. Schmidt-Shau. </author> <title> An algorithm for distributive unification. </title> <type> Research report 13/94, </type> <institution> Fachbereich Informatik, Universitat Franckfurt, Germany, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Although many more cases are described in [ 28; 30 ] , the general case remains open. This theory is decidable <ref> [ 95; 94 ] </ref> . Problem 43. Design a framework for combining constraint solving algo-rithms. Some particular cases have been attacked: In [ 4 ] it was shown how decision procedures for solvability of unification problems can be combined.
Reference: 95. <author> M. Schmidt-Shau. </author> <title> Unification of stratified second-order terms. </title> <type> Research report 12/94, </type> <institution> Fachbereich Informatik, Universitat Franckfurt, Germany, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Although many more cases are described in [ 28; 30 ] , the general case remains open. This theory is decidable <ref> [ 95; 94 ] </ref> . Problem 43. Design a framework for combining constraint solving algo-rithms. Some particular cases have been attacked: In [ 4 ] it was shown how decision procedures for solvability of unification problems can be combined.
Reference: 96. <author> M. Takahashi. </author> <title> -calculi with conditional rules. </title> <editor> In M. Bezem and J. F. Groote, editors, </editor> <booktitle> Proceedings of the International Conference on Typed Lambda Calculi and Applications (Utrecht, The Netherlands), volume 664 of Lecture Notes in Computer Science, </booktitle> <pages> pages 406-417, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A positive solution has recently been claimed [M. Marchiori, personal communica tion]. Problem 61 (T. Nipkow, M. Takahashi). For higher-order rewrite formats as given by combinatory reduction systems [ 62 ] and higher-order rewrite systems <ref> [ 80; 96 ] </ref> , confluence has been proved in the restricted case of orthogonal systems. Can confluence be extended to such systems when they are weakly orthogonal (all critical pairs are trivial)? When critical pairs arise only at the root, confluence is known to hold.
Reference: 97. <author> E. Tiden and S. Arnborg. </author> <title> Unification problems with one-sided distributivity. </title> <journal> J. Symbolic Computation, </journal> <volume> 3 </volume> <pages> 183-202, </pages> <year> 1987. </year>
Reference-contexts: Problem 38 (J. Siekmann). Is satisfiability of equations in the theory of distributivity (unification modulo modulo one right- and one left-distributivity axiom) decidable? (With just one of these, the problem had already been solved in <ref> [ 97 ] </ref> .) A partial positive solution is given in [ 29 ] , based on a striking result on the structure of certain proofs modulo distributivity. Although many more cases are described in [ 28; 30 ] , the general case remains open.
Reference: 98. <author> Y. Toyama. </author> <title> Strong sequentiality of left linear overlapping term rewriting systems. </title> <booktitle> In Proc. 7th IEEE Symp. on Logic in Computer Science, </booktitle> <address> Santa Cruz, CA, </address> <year> 1992. </year>
Reference-contexts: Is strong sequentiality decidable for arbitrary rewrite systems? What is the complexity of strong sequentiality in the linear case? in the orthogonal case? Decidability results for particular rewrite systems are given in <ref> [ 52; 98; 58 ] </ref> , among others. Problem 81 (A. Weiermann).

References-found: 98

