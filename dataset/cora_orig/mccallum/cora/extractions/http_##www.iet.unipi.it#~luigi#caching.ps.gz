URL: http://www.iet.unipi.it/~luigi/caching.ps.gz
Refering-URL: 
Root-URL: 
Title: Replacement policies for a proxy cache  
Author: Paolo Lorenzetti Luigi Rizzo Lorenzo Vicisano 
Keyword: communication networks, Web, caching, replacement algorithms  
Note: Draft please take the updated version from  
Address: Pisa via Diotisalvi 2 56126 PISA  
Affiliation: Dipartimento di Ingegneria dell'Informazione Universita di  
Email: email: l.rizzo, l.vicisano@iet.unipi.it  
Web: http://www.iet.unipi.it/~luigi/caching.ps.gz  
Abstract: In this paper we analyze access traces to a Web proxy, looking at statistical parameters to be used in the design of a replacement policy for documents held in the cache. We first present a number of interesting properties on the lifetime and statistics of access to documents, which show why LRU works reasonably well but can be improved. We then propose an alternative replacement policy, called LRV, which selects for replacement the document with the Lowest Relative Value among those in cache. The value of a document is computed basing on information readily available to the proxy server, and the computations associated with the replacement policy requires only a small constant time. We show how LRV outperforms LRU and other policies, and can significantly improve the performance of the cache, especially for small ones. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.F.Arlitt, C.L.Williamson, </author> <title> "Web Server Workload Characterization: The Search for Invariants", </title> <booktitle> Proc. of SIGMETRICS 96, </booktitle> <address> May 1996, Philadelphia, PA, USA </address>
Reference: [2] <author> T.Berners-Lee, R.Fielding and H.Frystyk, </author> <title> "Hypertext Transfer Protocol - HTTP/1.0", RFC 1945, </title> <month> May </month> <year> 1996. </year>
Reference: [3] <author> A.Chankhunthod, P.Danzig, C.Neerdaels, M.Schwartz and K.Worrell, </author> <title> "A Hierarchical Internet Object Cache", </title> <booktitle> Proc. of the 1996 USENIX Technical Conference, January 1996, </booktitle> <address> San Diego, CA, USA. </address>
Reference: [4] <author> R.Karedla, J.S.Love, B.G.Wherry, </author> <title> "Caching Strategies to Improve Disk System Performance", </title> <publisher> IEEE Computer, </publisher> <address> pp.38-46, v.27, n.3, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: introduction. Some useful hints can be derived from similar works issued in the field of file-system caching. Commonly used policies include Least Recently Used (LRU), Least Frequently Used (LFU or NREF), policies based on the SIZE of objects, or combinations of them. In <ref> [4] </ref> Karedla et. al. pointed out one of the main weaknesses of LRU, namely the fact that the cache can be flooded by documents that are referenced only once, flushing out documents with higher probability of being reused. <p> This situation is very likely to occur in Web caches, where, as we observed, references to object accessed only once make up 2=3 of the total references. As we did in the case of Web caching, the authors of <ref> [4] </ref> observed that the probability of an object being referenced again quickly grows after the second reference. That accounts for a good behavior of NREF policy. Nevertheless NREF prevents `dead' document, with large reference counts from being purged. <p> That accounts for a good behavior of NREF policy. Nevertheless NREF prevents `dead' document, with large reference counts from being purged. This causes the so called cache pollution phenomenon and yields a reduction of the effective cache size. An aging policy is often used to cope with this problem. <ref> [4] </ref> also presents a number of frequency-based variants of LRU, devised to cope with LRU weakness. These are hybrid LRU-LFU policies that allows to exploit better than LRU the object access history. The problem of determining an efficient replacement algorithm for a proxy cache has been studied in [9].
Reference: [5] <author> J.Gwertzman, M.Seltzer, </author> <title> "World Wide Web Cache Consistency ", Proc. </title> <booktitle> of the 1996 USENIX Technical Conference, January 1996, </booktitle> <address> San Diego, CA, USA. </address>
Reference: [6] <author> A.Luotonen, H.Frystyk, T.Berners-Lee, </author> <note> "W3C httpd," http://www.w3.org/hypertext/WWW/Daemon/Status.html. </note>
Reference: [7] <author> V.N.Padmanabhan, J.C.Mogul, </author> <title> "Using Predictive Prefetching to improve World Wide Web Latency", </title> <journal> ACM Computer Communication Review, pp.22-36, v.27, </journal> <volume> n3, </volume> <month> July </month> <year> 1996. </year> <title> [8] "Squid Internet Object Cache", </title> <address> http://www.nlanr.net/Squid/. </address>
Reference: [9] <author> S.Williams, M.Abrams, C.R.Standridge, G.Abdulla, and E.A.Fox, </author> <title> "Removal Policies in Network Caches for World-Wide Web Documents", </title> <booktitle> Proc. of ACM Sigcomm96, </booktitle> <month> August </month> <year> 1996, </year> <institution> Stanford University, </institution> <address> CA, USA. </address>
Reference-contexts: These are hybrid LRU-LFU policies that allows to exploit better than LRU the object access history. The problem of determining an efficient replacement algorithm for a proxy cache has been studied in <ref> [9] </ref>. The authors present a taxonomy of removal policies, basing on the observation of traces corresponding to five different workloads. They analyse the use of hierarchical keys to keep documents sorted in the cache, and conclude that document size outperforms all other possible keys. <p> The phenomenon is only visible when such garbage brings the useful space in the cache well below the size of live documents, while the parameters used in <ref> [9] </ref> cannot evidence this phenomenon. As a consequence, the results presented in [9] need validation with more significant experiments. <p> The phenomenon is only visible when such garbage brings the useful space in the cache well below the size of live documents, while the parameters used in <ref> [9] </ref> cannot evidence this phenomenon. As a consequence, the results presented in [9] need validation with more significant experiments. As also noted by the authors, a problem with hierarchical keys is that it is difficult to sort the keys by importance, and a key can be effectively used only if all the previous ones give rise to frequent ties.
Reference: [10] <institution> P.Lorenzetti "Simulatore per cluster di proxy", </institution> <type> Degree Thesis, </type> <institution> University of Pisa, </institution> <note> 1996 (In Italian) 13 </note>
Reference-contexts: Initial evaluations have been done using a general purpose simulator for networks of cooperative proxies <ref> [10] </ref>. Subsequent experiments have been done with specialized C programs, much more efficient although less flexible. One of these programs contains a full implementation of LRV and all the other policies that have been evaluated. The various programs process sanitized traces where strings (e.g.
References-found: 9

