URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/ucsc-crl-95-38.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/projects/FAST.html
Root-URL: http://www.cse.ucsc.edu
Title: Latency-Rate Servers: A General Model for Analysis of Traffic Scheduling Algorithms  
Author: Dimitrios Stiliadis Anujan Varma 
Keyword: Traffic scheduling, ATM switch scheduling, fair queueing, end-to-end delay bounds, fairness.  
Note: This research is supported by the NSF Young Investigator Award No. MIP-9257103  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: July 18, 1995  
Pubnum: UCSC-CRL-95-38  
Abstract: In this paper, we develop a general model, called Latency-Rate servers (LR-servers), for the analysis of traffic scheduling algorithms in broadband packet networks. The behavior of an LR scheduler is determined by two parameters | the latency and the allocated rate. We show that several well-known scheduling algorithms, such as Weighted Fair Queueing, VirtualClock, Self-Clocked Fair Queueing, Weighted Round Robin, and Deficit Round Robin, belong to the class of LR-servers. We derive tight upper bounds on the end-to-end delay, internal burstiness, and buffer requirements of individual sessions in an arbitrary network of LR-servers in terms of the latencies of the individual schedulers in the network, when the session traffic is shaped by a leaky bucket. Thus, the theory of LR-servers enables computation of tight upper-bounds on end-to-end delay and buffer requirements in a network of servers in which the servers on a path may not all use the same scheduling algorithm. We also define a self-contained approach to evaluate the fairness of LR-servers and use it to compare the fairness of many well-known scheduling algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. D. Clark, S. Shenker, and L. Zhang, </author> <title> "Supporting real-time applications in an integrated services packet network: Architecture and mechanism," </title> <booktitle> in Proceedings of ACM SIGCOMM '92, </booktitle> <pages> pp. 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Broadband packet networks are currently enabling the integration of traffic with a wide range of characteristics within a single communication network. Different types of traffic have significantly different quality-of-service (QoS) requirements <ref> [1] </ref>. Rigid real-time applications require a guaranteed portion of the link bandwidth, as well as bounded end-to-end delay, low delay jitter, and low packet loss rate.
Reference: [2] <author> L. Zhang, "VirtualClock: </author> <title> a new traffic control algorithm for packet switching networks," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Nonwork-conserving algorithms are also used to control delay jitter by delaying packets that arrive early [11]. Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock <ref> [2] </ref>, Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12].
Reference: [3] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> "Analysis and simulation of a fair queueing algorithm," Internetworking: </title> <journal> Research and Experience, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 3-26, </pages> <year> 1990. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Nonwork-conserving algorithms are also used to control delay jitter by delaying packets that arrive early [11]. Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing <ref> [3] </ref>, VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12].
Reference: [4] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A generalized processor sharing approach to flow control - the single node case," </title> <booktitle> in Proceedings of INFOCOM '92, </booktitle> <volume> vol. 2, </volume> <pages> pp. 915-924, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Nonwork-conserving algorithms are also used to control delay jitter by delaying packets that arrive early [11]. Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) <ref> [4] </ref>, Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12]. <p> Our approach in modeling the worst-case behavior of scheduling algorithms with respect to an end-to-end session is related to the work of Cruz [13, 14], Zhang [15], and Parekh and Gallager <ref> [4, 16] </ref>. Cruz [13, 14] analyzed the end-to-end delay, buffer requirements, and internal network burstiness of sessions in an arbitrary topology network where all sources are leaky-bucket controlled. <p> Third, we estimate the latency parameters for the individual schedulers tightly, taking into account their internal structure. Thus, our approach, in general, provides much tighter end-to-end delay bounds for individual sessions. Parekh and Gallager analyzed the worst-case behavior of sessions in a network of GPS schedulers <ref> [4, 16] </ref> and derived upper bounds on end-to-end delay and internal burstiness of sessions. However, the analysis applies to a homogeneous network consisting of only GPS schedulers. Our analysis accommodates a broad range of scheduling algorithms and the ability to combine the schedulers in arbitrary ways in a network. <p> The most common approach for bounding the burstiness of input traffic is by shaping through a leaky bucket [19]. Several previous studies have used this traffic model <ref> [4, 13, 14, 16] </ref>. <p> Based only on the end-to-end delay bounds and fairness properties, Generalized-Processor-Sharing (GPS) is an ideal scheduling discipline <ref> [4] </ref>. GPS multiplexing is defined with respect to a fluid-model, where packets are considered to be infinitely divisible. The share of bandwidth reserved by session i is represented by a real number i .
Reference: [5] <author> S. Golestani, </author> <title> "A self-clocked fair queueing scheme for broadband applications," </title> <booktitle> in Proceedings of INFOCOM '94, </booktitle> <pages> pp. 636-646, </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> However, this analysis does not apply to unfair algorithms like VirtualClock. In addition to the delay analysis, we also study the fairness characteristics of LR-schedulers. The fairness analysis was motivated by Golestani's work <ref> [5] </ref>, where a self-contained approach for fairness was defined. This approach is based on comparing the normalized service offered to any two connections that are continuously backlogged over an interval of time. We will analyze many well-known scheduling algorithms belonging to the LR class using this approach. <p> In addition, sessions should not be penalized for excess bandwidth they received while other sessions were idle. Following Golestani's work <ref> [5] </ref>, we define the fairness parameter of a scheduling algorithm as the maximum difference between the normalized service received by two backlogged connections over an interval in which both are continuously backlogged. Based only on the end-to-end delay bounds and fairness properties, Generalized-Processor-Sharing (GPS) is an ideal scheduling discipline [4]. <p> In this section we analyze the fairness characteristics of several well-known LR servers and compare them. The fairness parameter that we use is based on the definition presented by Golestani <ref> [5] </ref> for analysis of self-clocked fair queueing. Let us assume that W S i (t; t) is the service offered to connection i in the interval (t; t] by server S. <p> However, this condition cannot be met by any packet-by-packet algorithm since packets must be serviced exclusively. Therefore, in a packet by packet server, we can only require that the difference in normalized service received by the connections be bounded by a constant. Golestani <ref> [5] </ref> suggested use of the difference in normalized service offered to any two connections as the measure of fairness for the algorithm [5]. <p> Therefore, in a packet by packet server, we can only require that the difference in normalized service received by the connections be bounded by a constant. Golestani <ref> [5] </ref> suggested use of the difference in normalized service offered to any two connections as the measure of fairness for the algorithm [5]. <p> that a session may receive in a PGPS server in excess of that in the GPS server, given by C i = min (V 1) Lmax i 1nV L n ) : It can be shown that the above bound is tight. 28 6.2 Fairness of Self-Clocked Fair Queueing Golestani <ref> [5] </ref> proved the following bound for SCFQ: F S = i L j : We now prove that this bound is tight by presenting an example where the bound is actually reached.
Reference: [6] <author> D. Ferrari and D. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 8, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Nonwork-conserving algorithms are also used to control delay jitter by delaying packets that arrive early [11]. Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) <ref> [6] </ref>, Weighted Round Robin [7], and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [7] <author> M. Katevenis, S. Sidiropoulos, and C. Courcoubetis, </author> <title> "Weighted round-robin cell multiplexing in a general-purpose ATM switch chip," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1265-79, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Nonwork-conserving algorithms are also used to control delay jitter by delaying packets that arrive early [11]. Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin <ref> [7] </ref>, and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12]. According to this classification there are two main architectures: sorted-priority and frame-based. <p> Deficit Round Robin is a generalization of the Weighted-Round-Robin algorithm that was proposed in the context of ATM networks <ref> [7] </ref>. The latter assumes that packets from all connections have the same size and connections are serviced in a round-robin order. The time is split into frames of maximum size F and a connection is not allowed to send more than i packets during a frame period.
Reference: [8] <author> M. Shreedhar and G. Varghese, </author> <title> "Efficient Fair Queueing using Deficit Round Robin," </title> <booktitle> in Proc. </booktitle> <address> SIGCOMM'95, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin <ref> [8] </ref>. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12]. According to this classification there are two main architectures: sorted-priority and frame-based. <p> Let t 2 be time at which the packets of j finish service. Then, W j (t 1 ; t 2 ) i 1 (L j + i = i L j : 6.3 Fairness of a Round-Robin Scheduler Deficit Round Robin was proposed by Sreedhar and Varghese <ref> [8] </ref> as an O (1) algorithm for providing bandwidth guarantees in an output-buffered switch. Deficit Round Robin is a generalization of the Weighted-Round-Robin algorithm that was proposed in the context of ATM networks [7]. <p> It has been shown that, in the Deficit Round Robin algorithm, the difference in service offered to any two connections that have the same bandwidth reservation is bounded by 3 i , where i is the number of bytes allocated to these connections in each frame <ref> [8] </ref>. Here we extend the result to the case of two connections with arbitrary bandwidth allocations.
Reference: [9] <author> C. Kalmanek, H. Kanakia, and S. Keshav, </author> <title> "Rate controlled servers for very high-speed networks," </title> <booktitle> in IEEE Global Telecommunications Conferece, </booktitle> <pages> pp. </pages> <address> 300.3.1-300.3.9, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) <ref> [9] </ref>, Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [10] <author> S. Golestani, </author> <title> "A framing strategy for congestion management," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1064-1077, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: FIFO scheduling is perhaps the simplest to implement, but does not provide any isolation between individual sessions that is necessary to achieve deterministic bandwidth guarantees. Several service disciplines are known in the literature for providing bandwidth guarantees to individual sessions in output-buffered switches <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. Many of these algorithms are also capable of providing deterministic delay guarantees when the burstiness of the session traffic is bounded (for example, shaped by a leaky bucket). In general, schedulers can be characterized as work-conserving or non-work-conserving. <p> Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing <ref> [10] </ref>, and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [11] <author> D. Verma, D. Ferrari, and H. Zhang, </author> <title> "Guaranteeing delay jitter bounds in packet switching networks," </title> <booktitle> in Tricomm 91, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: When the transmission time of a packet is short, as is typically the case in an ATM network, however, such a policy is seldom justified. Nonwork-conserving algorithms are also used to control delay jitter by delaying packets that arrive early <ref> [11] </ref>. Work-conserving servers always have lower average delays than non-work-conserving servers. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin [8]. <p> Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [4], Weighted Fair Queueing [3], VirtualClock [2], Delay-Earliest-Due-Date (Delay-EDD) [6], Weighted Round Robin [7], and Deficit Round Robin [8]. On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date <ref> [11] </ref> are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [12]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [12] <author> H. Zhang and S. Keshav, </author> <title> "Comparison of rate based service disciplines," </title> <booktitle> in Proceedings of ACM SIGCOMM '91, </booktitle> <pages> pp. 113-122, </pages> <year> 1991. </year>
Reference-contexts: On the other hand, Hierarchical-Round-Robin (HRR) [9], Stop-and-Go queueing [10], and Jitter-Earliest-Due-Date [11] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure <ref> [12] </ref>. According to this classification there are two main architectures: sorted-priority and frame-based. In a sorted-priority scheduler, there is a global variable | usually referred to as the virtual time | associated 1 with each outgoing link of the switch. <p> If V is the maximum number of connections that may share an output link, the implementation of a scheduler based on the sorted-priority architecture involves three main steps for processing each cell <ref> [12] </ref>: 1. Calculation of the timestamp: The PGPS scheduler has the highest complexity in this respect, since a GPS scheduler must be simulated in parallel in order to update the virtual time. This simulation may result in a process overhead of O (V ) per packet transmission in the worst-case.
Reference: [13] <author> R. Cruz, </author> <title> "A calculus for network delay. I. Network elements in isolation.," </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> vol. 37, </volume> <pages> pp. 114-131, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: We also show how the latency parameter can be computed for a given scheduling algorithm by deriving the latencies of several well-known schedulers. Our approach in modeling the worst-case behavior of scheduling algorithms with respect to an end-to-end session is related to the work of Cruz <ref> [13, 14] </ref>, Zhang [15], and Parekh and Gallager [4, 16]. Cruz [13, 14] analyzed the end-to-end delay, buffer requirements, and internal network burstiness of sessions in an arbitrary topology network where all sources are leaky-bucket controlled. <p> Our approach in modeling the worst-case behavior of scheduling algorithms with respect to an end-to-end session is related to the work of Cruz <ref> [13, 14] </ref>, Zhang [15], and Parekh and Gallager [4, 16]. Cruz [13, 14] analyzed the end-to-end delay, buffer requirements, and internal network burstiness of sessions in an arbitrary topology network where all sources are leaky-bucket controlled. <p> The most common approach for bounding the burstiness of input traffic is by shaping through a leaky bucket [19]. Several previous studies have used this traffic model <ref> [4, 13, 14, 16] </ref>.
Reference: [14] <author> R. Cruz, </author> <title> "A calculus for network delay. II. Network elements in isolation.," </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> vol. 37, </volume> <pages> pp. 132-141, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: We also show how the latency parameter can be computed for a given scheduling algorithm by deriving the latencies of several well-known schedulers. Our approach in modeling the worst-case behavior of scheduling algorithms with respect to an end-to-end session is related to the work of Cruz <ref> [13, 14] </ref>, Zhang [15], and Parekh and Gallager [4, 16]. Cruz [13, 14] analyzed the end-to-end delay, buffer requirements, and internal network burstiness of sessions in an arbitrary topology network where all sources are leaky-bucket controlled. <p> Our approach in modeling the worst-case behavior of scheduling algorithms with respect to an end-to-end session is related to the work of Cruz <ref> [13, 14] </ref>, Zhang [15], and Parekh and Gallager [4, 16]. Cruz [13, 14] analyzed the end-to-end delay, buffer requirements, and internal network burstiness of sessions in an arbitrary topology network where all sources are leaky-bucket controlled. <p> The most common approach for bounding the burstiness of input traffic is by shaping through a leaky bucket [19]. Several previous studies have used this traffic model <ref> [4, 13, 14, 16] </ref>. <p> We will now proceed to prove bounds on backlog and delay over multiple nodes. The straightforward approach would be to accumulate the maximum delays over each node. This approach was used by Cruz <ref> [14] </ref>. However, this method ignores the correlation between arrivals at two servers in series, and therefore results in very loose bounds.
Reference: [15] <author> H. Zhang, </author> <title> Service Disciplines for Packet-Switching Integrated-Services Networks. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <year> 1992. </year>
Reference-contexts: We also show how the latency parameter can be computed for a given scheduling algorithm by deriving the latencies of several well-known schedulers. Our approach in modeling the worst-case behavior of scheduling algorithms with respect to an end-to-end session is related to the work of Cruz [13, 14], Zhang <ref> [15] </ref>, and Parekh and Gallager [4, 16]. Cruz [13, 14] analyzed the end-to-end delay, buffer requirements, and internal network burstiness of sessions in an arbitrary topology network where all sources are leaky-bucket controlled. <p> However, the analysis applies to a homogeneous network consisting of only GPS schedulers. Our analysis accommodates a broad range of scheduling algorithms and the ability to combine the schedulers in arbitrary ways in a network. Zhang <ref> [15] </ref> derived end-to-end delay bounds for a class of non-work-conserving scheduling algorithms when traffic is re-shaped at each node of the network. This allows the delays of individual schedulers on the path to be accumulated in a simple manner.
Reference: [16] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A generalized processor sharing approach to flow control in integrated services networks: the multiple node case," </title> <booktitle> in Proceedings of INFOCOM '93, </booktitle> <volume> vol. 2, </volume> <pages> pp. 521-530, </pages> <month> March </month> <year> 1993. </year> <month> 33 </month>
Reference-contexts: Our approach in modeling the worst-case behavior of scheduling algorithms with respect to an end-to-end session is related to the work of Cruz [13, 14], Zhang [15], and Parekh and Gallager <ref> [4, 16] </ref>. Cruz [13, 14] analyzed the end-to-end delay, buffer requirements, and internal network burstiness of sessions in an arbitrary topology network where all sources are leaky-bucket controlled. <p> Third, we estimate the latency parameters for the individual schedulers tightly, taking into account their internal structure. Thus, our approach, in general, provides much tighter end-to-end delay bounds for individual sessions. Parekh and Gallager analyzed the worst-case behavior of sessions in a network of GPS schedulers <ref> [4, 16] </ref> and derived upper bounds on end-to-end delay and internal burstiness of sessions. However, the analysis applies to a homogeneous network consisting of only GPS schedulers. Our analysis accommodates a broad range of scheduling algorithms and the ability to combine the schedulers in arbitrary ways in a network. <p> The most common approach for bounding the burstiness of input traffic is by shaping through a leaky bucket [19]. Several previous studies have used this traffic model <ref> [4, 13, 14, 16] </ref>. <p> This approach was used by Cruz [14]. However, this method ignores the correlation between arrivals at two servers in series, and therefore results in very loose bounds. Tighter bounds can be provided by following the approach used by Parekh and Gallager <ref> [16] </ref> that tries to capture the behavior of a session over multiple nodes at the same time. <p> Since we assumed only that each of the servers in the network belongs to the LR class, these results are more general than the delay bounds due to Parekh and Gallager <ref> [16] </ref>. In the next section, we will show that all well-known work-conserving schedulers are in fact LR servers. Thus, our delay bound applies to almost any network of schedulers. <p> i i If we substitute the latency obtained for PGPS from eq. (A.1) in this expression, that is, fi i = L i = i + L max =r, we get i + (k 1) i L max ; (5.2) which agrees with the bound obtained by Parekh and Gallager <ref> [16] </ref> for a network of PGPS servers. Since the latencies of PGPS and VirtualClock are identical, the bound of (5.2) applies to Virtual-Clock as well; this is also in agreement with the results of Lam and Xie [24].
Reference: [17] <author> P. Goyal, S. Lam, and H. Vin, </author> <title> "Determining end-to-end delay bounds in heterogeneous net-works," </title> <booktitle> in Proceedings of the 5th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pp. 287-298, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Our approach differs from this work in that we consider the broader class of work-conserving schedulers in our analysis, and we do not assume any traffic re-shaping mechanisms within the network. Another model for delay-analysis based on a class of guaranteed-rate servers was presented in <ref> [17] </ref>. The main problem of this model, however, is that it is closely coupled with time-stamp based algorithms; the analysis of scheduling algorithms based on a different architecture is not straightforward.
Reference: [18] <author> S. Golestani, </author> <title> "Network delay analysis of a class of fair queueuing algorithms," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 13, </volume> <pages> pp. 1057-70, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The LR-class provides a more natural approach for analyzing the worst-case behavior of traffic-scheduling algorithms, independent of the scheduler architecture. Finally, Golestani recently presented a delay analysis of a class of fair-queueing algorithms including Self-Clocked Fair Queueing <ref> [18] </ref>. However, this analysis does not apply to unfair algorithms like VirtualClock. In addition to the delay analysis, we also study the fairness characteristics of LR-schedulers. The fairness analysis was motivated by Golestani's work [5], where a self-contained approach for fairness was defined.
Reference: [19] <author> J. Turner, </author> <title> "New directions in communications (or which way to the information age?)," </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 24, </volume> <pages> pp. 8-15, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: In order to provide a deterministic delay bound, it is necessary to bound the burstiness of the session at the input of the network. The most common approach for bounding the burstiness of input traffic is by shaping through a leaky bucket <ref> [19] </ref>. Several previous studies have used this traffic model [4, 13, 14, 16].
Reference: [20] <author> T. Cormen, C. Leiserson, and R. Rivest, </author> <title> Introduction to Algorithms. </title> <address> New York: McGraw Hill, </address> <year> 1989. </year>
Reference-contexts: Selection of the cell with the minimum timestamp for transmission: Since the cells are stored in a sorted-priority structure, the cell with the highest priority may be retrieved in O (log V ) time <ref> [20] </ref>. The last two operations are identical for any sorted-priority architecture. A parallel implementation of these operations with O (1) time complexity by using a set of O (V ) simple processing elements has been shown [21, 22].
Reference: [21] <author> R. Brown, </author> <title> "Calendar queues: a fast 0(1) priority queue implementation for the simulation event set problem," </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, </volume> <pages> pp. 1220-1227, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The last two operations are identical for any sorted-priority architecture. A parallel implementation of these operations with O (1) time complexity by using a set of O (V ) simple processing elements has been shown <ref> [21, 22] </ref>. Frame-based algorithms such as Weighted Round Robin and Deficit Round Robin can be implemented in O (1) time, without any timestamp calculations. Unfortunately, these algorithms yield delay bounds that may grow linearly with the number of sessions sharing the outgoing link.
Reference: [22] <author> H. Chao and N. Uzun, </author> <title> "A VLSI sequencer chip for ATM traffic shaper and queue manager," </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> vol. 27, </volume> <pages> pp. 1634-1643, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The last two operations are identical for any sorted-priority architecture. A parallel implementation of these operations with O (1) time complexity by using a set of O (V ) simple processing elements has been shown <ref> [21, 22] </ref>. Frame-based algorithms such as Weighted Round Robin and Deficit Round Robin can be implemented in O (1) time, without any timestamp calculations. Unfortunately, these algorithms yield delay bounds that may grow linearly with the number of sessions sharing the outgoing link.
Reference: [23] <author> R. Cruz, </author> <title> "Quality of service guarantees in virtual circuit switched networks," </title> <journal> IEEE Journal on Selected Areas In Communications, </journal> <volume> vol. 13, </volume> <pages> pp. 1048-1056, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The bound on the service offered by an LR-server is based on the busy period. This is a more general approach than bounding the service offered by the server based on the concept of the backlogged period. An approach based on the latter was proposed in <ref> [23] </ref> for providing QoS guarantees. This model bounds the service offered to a connection during one or more backlogged periods, thus providing a means to design a class of scheduling algorithms that can provide specific end-to-end delay guarantees.
Reference: [24] <author> S. Lam and G. Xie, </author> <title> "Burst scheduling: Architecture and algorithm for switching packet video," </title> <booktitle> in INFOCOM'95, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Since the latencies of PGPS and VirtualClock are identical, the bound of (5.2) applies to Virtual-Clock as well; this is also in agreement with the results of Lam and Xie <ref> [24] </ref>. While we have verified that this improvement of L i = i in the delay bound is valid for all the LR servers analyzed in this paper, whether this is true for all LR servers remains an open question.
Reference: [25] <author> D. Stiliadis and A. Varma, </author> <title> "Frame-based fair queueing: A new traffic scheduling algorithm for packet-switched networks," </title> <type> Tech. Rep. </type> <institution> UCSC-CRL-95-39, U.C. Santa Cruz, </institution> <note> http://www.cse.ucsc.edu/research/hsnlab/publications/, July 1995. </note>
Reference-contexts: A detailed proof of the lemma can be found in <ref> [25] </ref>. <p> Our comparison of schedulers along the three dimensions leaves open the question whether a scheduling algorithm can be designed that has the same low latency as that of PGPS, bounded unfairness, and an efficient implementation. In <ref> [25] </ref>, we extend this work by presenting such a scheduling discipline that we call Frame-based Fair Queueing (FFQ). FFQ is a sorted-priority algorithm in which the calculation of timestamps can be performed in O (1) time. <p> max ; max ( n O (V ) SCFQ L i i + L max i + j O (log V ) VirtualClock L i i + L max Deficit Round Robin (3F 2 i ) 3F Weighted Round Robin (F i +L c ) F Frame-Based Fair Queueing (FFQ) <ref> [25] </ref> L i + L max max ( 2F i i ; 2F i L j L max i ; L max L j O (log V ) Table 7.1: Latency, fairness and implementation complexity of several work-conserving servers.
Reference: [26] <author> H. Adiseshu, G. Parulkar, and G. Varghese, </author> <title> "Reliable FIFO load balancing over multiple fifo channels," </title> <type> tech. rep., </type> <institution> Washington University, St. Louis, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: This deficit is then added to i in the next round while servicing traffic from connection i. Another variation of the round-robin service disciplines is the Surplus Round Robin (SRR) <ref> [26, 27] </ref>.
Reference: [27] <author> S. Floyd, </author> <title> "Notes on guaranteed service in resource management." </title> <booktitle> Unpublished notes, </booktitle> <year> 1993. </year>
Reference-contexts: This deficit is then added to i in the next round while servicing traffic from connection i. Another variation of the round-robin service disciplines is the Surplus Round Robin (SRR) <ref> [26, 27] </ref>.
Reference: [28] <author> O. Yaron and M. Sidi, </author> <title> "Performance and stability of communication networks via robust exponential bounds," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, </volume> <pages> pp. 372-385, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Although the bounds derived in this paper for the end-to-end delays and buffer requirements hold only when the input traffic is leaky-bucket shaped, the same model can be used for analysis with other input-traffic models. For example the Exponentially-Bounded-Burstiness (EBB) model was used in <ref> [28, 29] </ref> for analyzing the behavior of a GPS multiplexer. Future work will include the use of other traffic models for providing end-to-end delay guarantees in a network of LR servers.
Reference: [29] <author> Z. Zhang, D. Towsley, and J. Kurose, </author> <title> "Statistical analysis of generalized processor sharing scheduling discipline," </title> <booktitle> in Proceedings of ACM SIGCOMM '94, </booktitle> <pages> pp. 68-77, </pages> <month> September </month> <year> 1994. </year> <month> 34 </month>
Reference-contexts: Although the bounds derived in this paper for the end-to-end delays and buffer requirements hold only when the input traffic is leaky-bucket shaped, the same model can be used for analysis with other input-traffic models. For example the Exponentially-Bounded-Burstiness (EBB) model was used in <ref> [28, 29] </ref> for analyzing the behavior of a GPS multiplexer. Future work will include the use of other traffic models for providing end-to-end delay guarantees in a network of LR servers.
References-found: 29

