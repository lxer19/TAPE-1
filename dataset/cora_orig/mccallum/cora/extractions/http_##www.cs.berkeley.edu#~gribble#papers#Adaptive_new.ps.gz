URL: http://www.cs.berkeley.edu/~gribble/papers/Adaptive_new.ps.gz
Refering-URL: http://daedalus.cs.berkeley.edu/
Root-URL: http://www.cs.berkeley.edu
Title: Adapting to Network and Client Variability via On-Demand Dynamic Distillation  
Author: Armando Fox Steven D. Gribble Eric A. Brewer Elan Amir 
Address: Berkeley  
Affiliation: University of California at  
Abstract: The explosive growth of the Internet and the proliferation of smart cellular phones and handheld wireless devices is widening an already large gap between Internet clients. Clients vary in their hardware resources, software sophistication, and quality of connectivity, yet server support for client variation ranges from relatively poor to none at all. In this paper we introduce some design principles that we believe are fundamental to providing meaningful Internet access for the entire range of clients. In particular, we show how to perform on-demand datatype-specific lossy compression on semantically typed data, tailoring content to the specific constraints of the client. We instantiate our design principles in a proxy architecture that further exploits typed data to enable application-level management of scarce network resources. Our proxy architecture generalizes previous work addressing all three aspects of client variation by applying well-understood techniques in a novel way, resulting in quantitatively better end-to-end performance, higher quality display output, and new capabilities for low-end clients. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> 0 </institution>
Reference: [1] <author> M. Abrams et al. </author> <title> Caching Proxies: Limitations and Potentials. </title> <booktitle> In Proceedings of the Fourth International World Wide Web Conference, </booktitle> <address> Boston, MA, USA, </address> <month> Dec </month> <year> 1995. </year>
Reference: [2] <author> E. Amir, S. McCanne, and H. Zhang. </author> <title> An Application Level Video Gateway. </title> <booktitle> Proceedings of ACM Multimedia 1995 , San Francisco, </booktitle> <address> CA, USA, </address> <month> Nov </month> <year> 1995. </year>
Reference-contexts: The gateway controls the output rate of the resulting stream by applying any of the above mentioned techniques. Section 4.5 gives some implementation details; for a complete description, the reader is referred to <ref> [2] </ref>. Fig ure 7 illustrates the relationship between the output frame rate and output quality, as measured by the peak signal-to-noise ration (PSNR) of the resulting frames. The figure plots several sizes of images at a given bit-rate, showing a four way tradeoff between quality, framerate, spatial decimation, and bit-rate.
Reference: [3] <author> T. E. Anderson et al. </author> <title> The Case for NOW (Networks of Workstations). </title> <journal> IEEE Micro, </journal> <volume> 15(1):5464, </volume> <month> Feb </month> <year> 1995. </year>
Reference-contexts: In our architecture, multiple distillation operations can be serviced in parallel by a single pool of computing resources <ref> [3] </ref> on behalf of a potentially large set of clients. To explore how well our architecture scales to large numbers of clients, we simulated the load placed on a WWW proxy by a parameterizable number of users. <p> GloMop is also designed to be scalable to large numbers of users by exploiting the observations that we reported in Section 3.4. The actual work of distillation can be offloaded to other nodes in a network of workstations <ref> [3] </ref>. We are actively investigating how to do load balancing for such a system. GloMop also provides authentication and secure channels using Charon, a lightweight indirect authentication protocol based on Kerberos IV.
Reference: [4] <author> B. R. Badrinath and G. Welling. </author> <title> Event Delivery Abstractions for Mobile Computing. </title> <institution> Rutgers Univ. </institution> <note> TR #LCSR-TR-242. </note>
Reference: [5] <author> H. Balakrishnan et al. </author> <title> A Comparison of Mechanisms for Improving TCP Performance over Wireless Links. To appear, </title> <booktitle> Proceedings of the 1996 ACM SIGCOMM Conference , Stanford, </booktitle> <address> CA, USA, </address> <month> Aug </month> <year> 1996. </year>
Reference-contexts: Network Variations include the bandwidth, latency, and error behavior of the network. Much work has been done to optimize network-level protocols for wireless and similar media <ref> [5] </ref>. In contrast, we focus on reducing bandwidth requirements at the application level. Table 2 shows typical variations in bandwidth seen today. Hardware Variations include screen size and resolution, color or grayscale bit depth, memory, and CPU power. <p> Various network and transport-level optimizations have also been used to address the wireless case <ref> [5] </ref>, which has propagation and error characteristics quite different from those of most wired networks.
Reference: [6] <author> T. Berners-Lee et al. </author> <title> Hypertext Transfer Protocol - HTTP/ 1.0. </title> <booktitle> RFC 1945, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: In this section we discuss work in the three areas our architecture spans: content transcoding, adapting to poor networks, and shifting application complexity away from small clients. 5.1 Transcoding Proxies The idea of placing an intermediary between a client and a server is not new. The original HTTP specification <ref> [6] </ref> explicitly 10 provides a proxy mechanism. Though it was originally intended for users behind security firewalls, it has been put to a number of novel uses, including Kanji format transcoding [34], Kanji-to-GIF conversion [39], and rendering equations from markup [40].
Reference: [7] <author> E. A. Brewer. </author> <title> High-Level Optimization via Automated Statistical Modeling. </title> <booktitle> Proceedings of Principles and Practice of Parallel Processing (PPoPP 95) , Santa Barbara, </booktitle> <address> CA, USA, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: We do not currently have such a general mechanism, but it is a major subject of continuing work. We are exploring both automated statistical modeling <ref> [7] </ref> and neural networks as tools for tackling this problem. 4.5 vgw Video Stream Distiller As initially described in Section 3.3, the basic vgw model involves transcoding from some set of supported input formats to a (possibly different) set of output formats.
Reference: [8] <author> B. Brodersen et al. Infopad: </author> <title> A System Design for Portable Multimedia Access. </title> <booktitle> Proceedings of Calgary Wireless 94 Conference, </booktitle> <address> Calgary, Canada, </address> <year> 1994. </year>
Reference-contexts: Vgw can also accommodate devices with high bandwidth but limited CPU rendering speed by throttling the frame rate. Software Variation : Vgw converts among NV, MJPEG, H.261, and an error-tolerant form of VQ used by the Berkeley InfoPad <ref> [8] </ref>, and it appears to clients as a video source. This enables the InfoPad to participate in MBONE broadcasts, even though it employs a proprietary video format, and it does not support IP multicast. <p> Vgw has been in service in production mode at CERN, as their transatlantic MBONE gateway. It is also in use by the Berke-ley InfoPad <ref> [8] </ref>, transcoding MBONE video to InfoPad VQ format, thus allowing the MBONE video broadcasts to be viewed on the InfoPad. 4.6 Other Applications The proxy architecture may be appealing for service providers that would like to enable their subscribers to use low-cost clients.
Reference: [9] <author> C. Brooks et al. </author> <title> Applicationspecific Proxy Servers as HTTP Stream Transducers. </title> <booktitle> Proceedings of the Fourth International World Wide Web Conference, </booktitle> <address> Boston, MA, USA, </address> <month> Dec </month> <year> 1995. </year>
Reference-contexts: Though it was originally intended for users behind security firewalls, it has been put to a number of novel uses, including Kanji format transcoding [34], Kanji-to-GIF conversion [39], and rendering equations from markup [40]. The Distributed Clients Project [13] is also exploiting application-level stream transducers <ref> [9] </ref> as one of several mechanisms for facilitating Web browsing with intermittent connectivity. 5.2 Shielding Clients From Effects of Slow Networks On-the-y compression, especially for protocol metadata at the network level, has long been used to mitigate the effects of slow networks [21,16].
Reference: [10] <author> C. M. Bowman et al. </author> <title> The Harvest Information Discovery and Access System. </title> <booktitle> Proceedings of the Second International World Wide Web Conference, </booktitle> <address> Chicago, IL, USA, </address> <month> Oct </month> <year> 1994. </year>
Reference: [11] <author> M. E. Crovella and A. Bestavros. </author> <title> Explaining World Wide Web Traffic Self-Similarity. </title> <institution> Boston University Technical Report TR-95-015. </institution>
Reference: [12] <author> S. Deering. </author> <title> Host Extensions for IP Multicasting. </title> <type> RFC 1112, </type> <month> Aug </month> <year> 1989. </year>
Reference-contexts: (bits/s) Round-Trip Time Local Ethernet 10 M 0.5 - 2.0 ms ISDN 128 K 10 -20 ms Wireline Modem 14.4 28.8 K 350 ms (PPP gateway) Cellular or CDPD 9.6 - 19.2 K 0.1 - 0.5 s 2 nonstandard HTML extensions), and also protocol extensions such as IP multicast support <ref> [12] </ref>. Although we expect clients to improve over time, there will always be older systems still in use that represent relatively obsolete clients, and the high end will advance roughly in parallel with the low end, effectively maintaining a gap between the two.
Reference: [13] <institution> The Distributed Clients Project. </institution> <address> http://www.osf.org/www/ dist_client. </address>
Reference-contexts: The original HTTP specification [6] explicitly 10 provides a proxy mechanism. Though it was originally intended for users behind security firewalls, it has been put to a number of novel uses, including Kanji format transcoding [34], Kanji-to-GIF conversion [39], and rendering equations from markup [40]. The Distributed Clients Project <ref> [13] </ref> is also exploiting application-level stream transducers [9] as one of several mechanisms for facilitating Web browsing with intermittent connectivity. 5.2 Shielding Clients From Effects of Slow Networks On-the-y compression, especially for protocol metadata at the network level, has long been used to mitigate the effects of slow networks [21,16].
Reference: [14] <author> A. Fox and E. A. Brewer. </author> <title> Reducing WWW Latency and Bandwidth Requirements by Real-time Distillation. </title> <booktitle> Proceedings of the Sixth International World Wide Web Conference, </booktitle> <address> Paris, France, </address> <year> 1996. </year>
Reference-contexts: section we describe our experiences to date in implementing various pieces of our architecture, what lessons we have already learned along the way, and what we see as areas of continuing work. 4.1 Pythia HTTP Proxy We began with a distillation World Wide Web proxy, which we reported on in <ref> [14] </ref>. It demonstrated the feasibility of our design principles, and is useful despite the fact that much of the code is naive.
Reference: [15] <author> A. Fox and S. Gribble. </author> <title> Security on the Move: Indirect Authentication Using Kerberos. To appear, </title> <booktitle> Proceedings of the ACM MobiCom 96 Conference , White Plains, </booktitle> <address> NY, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: The actual work of distillation can be offloaded to other nodes in a network of workstations [3]. We are actively investigating how to do load balancing for such a system. GloMop also provides authentication and secure channels using Charon, a lightweight indirect authentication protocol based on Kerberos IV. In <ref> [15] </ref> we show that Charon requires little trust to be surrendered to the proxy and is amenable to implementation even on very small PDA-class devices. 1: From Global Mobile Computing By Proxy. simultaneous users on one proxy. u u u u u u u u u u u u u u
Reference: [16] <author> J. Fulton and C. Kantarjiev. </author> <title> An Update on Low Bandwidth X (LBX). The X Resource, </title> <booktitle> 1(5) </booktitle> <pages> 251-266, </pages> <month> Jan </month> <year> 1993. </year>
Reference: [17] <author> S. Glassman. </author> <title> A Caching Relay for the World Wide Web. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 27(2), </volume> <month> Nov </month> <year> 1994. </year>
Reference: [18] <institution> Graphics Interchange Format Version 89a (GIF). CompuServe Incorporated, Columbus, Ohio, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: that the time to produce a useful distilled object is small enough to be more than made up for by the savings in transmission time for the distilled object relative to the original. 3.1 Images We have implemented an image distiller called gifmunch, which implements distillation and refinement for GIF <ref> [18] </ref> images, and consists largely of source code from the NetPBM Toolkit [33]. As described in Section 4.4, gifmunch makes simple predictions about the size of its output by measuring the achieved bits per pixel compression of the original image relative to a raw bitmap.
Reference: [19] <author> T. R. Halfhill. </author> <title> Inside the Web PC. </title> <journal> Byte Magazine, </journal> <pages> pp. 4456, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Hardware Variations include screen size and resolution, color or grayscale bit depth, memory, and CPU power. For example, according to proponents of the Network Computer, NCs will ride the trailing edge of the price/ performance curve, where they can reap the benefits of plunging prices <ref> [19] </ref>, which implies that their hardware capabilities will be more modest than those of a typical desktop PC. As Table 1 illustrates, physical variation across current clients spans an order of magnitude. <p> VQ, MPEG Resolution, frame rate, color depth, progression limit (for progressive encodings) 3 can be generalized into a common framework, which we discuss in Section 4.2. 1.5 Pushing Complexity Into the Infrastructure There is growing sentiment that the next wave of successful Internet client devices will be inexpensive and simple <ref> [19] </ref>. On the other hand, the amount of variation even among existing clients has led to substantial complexity in servers. Fortunately, we can push the complexity away from both clients and servers by relocating it into the network infrastructure. <p> It has been said that the ultimate fate of Network Computers may depend on the adoption rate of technologies such as... ATM and cable data modems <ref> [19] </ref>. A proxied NC architecture mitigates this limitation, however, since the existing telephone and wireless infrastructure can be used to provide much better service via a proxy than could be obtained from the raw network.
Reference: [20] <institution> ISO DIS 10918-1 Digital Compression and Coding of Continuous-Tone Still Images (JPEG). CCITT Recommendation T.81. </institution>
Reference-contexts: In practice, constraints may be imposed by specific encodings that admit efficient implementation of specific operations; for example, in the JPEG <ref> [20] </ref> image encoding, scaling the image by a power of 2 is exceptionally inexpensive. Nonetheless, in general the distillation technique depends on the data type and not the encoding. <p> Instead, multiple intermediate formats are allowed. The choice of intermediate format is a function of the encoder/decoder pair, determined by the lowest complexity decoder/encoder data path. In this way, encoder/ decoder pairs can optimize their interaction by choosing an appropriate intermediate format. For example, DCT-based coding schemes like JPEG <ref> [20] </ref> and H.261 [35] can be more efficiently transcoded using DCT coefficients, which avoids the slow conversion to the pixel domain.
Reference: [21] <author> V. Jacobson. </author> <title> Compressing TCP/IP Headers for LowSpeed Serial Links. </title> <type> RFC 1144, </type> <month> Feb </month> <year> 1990. </year>
Reference: [22] <author> A. D. Joseph et al. </author> <title> Rover: A Toolkit for Mobile Information Access. </title> <booktitle> Proceedings of the 15th ACM Symposium on Operating Systems Principles , Copper Mountain Resort, </booktitle> <publisher> CO, </publisher> <month> Dec </month> <year> 1995. </year>
Reference-contexts: high-level filters can use applicationspecific semantics to filter data before it is sent to a client, but the filter is part of the application rather than a middleware component, which complicates its reuse by other applications and makes it awkward to support legacy applications. 5.4 Partitioning of Application Complexity Rover <ref> [22] </ref> provides a rich distributed-object system that gives a uniform view of objects at the OS level, and a queued RPC system that provides the substrate for invoking on objects. Together these abstractions allow disconnection and object migration (including code) to be handled largely implicitly by the OS.
Reference: [23] <author> J. Kaplan. </author> <title> Buffer Management Policies in a Database System. M.S. </title> <type> Thesis, </type> <institution> The Univ. of Calif., Berkeley, Calif., </institution> <year> 1989. </year>
Reference-contexts: This allows fine control over both endpoints of the slow network connecting the client to the proxy. In effect, it allows the client to manage bandwidth at the application level, just as databases manage memory at the application level <ref> [23] </ref>. Distillation and refinement can be offered as a value-added service by a service provider.
Reference: [24] <author> R. H. Katz and E. A. Brewer. </author> <title> The Case For Wireless Overlay Networks. </title> <booktitle> SPIE Multimedia and Networking Conference (MMNC96), </booktitle> <address> San Jose, CA, USA, </address> <month> Jan </month> <year> 1996. </year>
Reference: [25] <author> R. H. Katz and E. A. Brewer et al. </author> <title> The Bay Area Research Wireless Access Network (BARWAN). </title> <booktitle> Proceedings Spring COMPCON Conference 1996, </booktitle> <year> 1996. </year>
Reference: [26] <author> M. Liljeberg et al. </author> <title> Enhanced Services for World Wide Web in Mobile WAN Environment. </title> <institution> University of Helsinki CS Technical Report No. C-1996-28, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: MOWGLI <ref> [26] </ref> provides both a proxy and a clientside agent, which cooperate to manage the wireless link using an efficient datagram protocol, hide disconnection from higher network layers, and tokenize application level protocols and data formats such as HTTP and HTML to reduce bandwidth requirements.
Reference: [27] <author> P. MacJones, </author> <title> Dec SRC. </title> <type> Personal Communication. </type>
Reference-contexts: PICT offers less efficient bitmap encoding than GIF and is not supported by most servers, conversion to PICT is useful for clients such as the Newton, where PICT is the only graphic format that can be rendered efficiently (design principle #3). 3.2 Rich-Text We have also implemented a rich-text distiller <ref> [27] </ref>, which performs lossy compression of PostScript-encoded text. The distiller replaces PostScript formatting information with HTML markup tags or with a custom rich-text format that preserves the position information of the words.
Reference: [28] <author> R. Malpani, J. Lorch, and D. Berger. </author> <title> Making World Wide Web Caching Servers Cooperate. </title> <booktitle> Proceedings of the Fourth International World Wide Web Conference, </booktitle> <month> Dec </month> <year> 1995. </year>
Reference: [29] <author> B. D. Noble, M. Price, and M. Satyanarayanan. </author> <title> A Programming Interface for Application-aware Adaptation in Mobile Computing. </title> <booktitle> Proceedings of the Second USENIX Symposium on Mobile and Location-Independent Computing , Ann Arbor, </booktitle> <address> MI, USA, </address> <month> Apr </month> <year> 1995. </year>
Reference-contexts: Various network and transport-level optimizations have also been used to address the wireless case [5], which has propagation and error characteristics quite different from those of most wired networks. The Odyssey system <ref> [29] </ref>, on the other hand, supports a form of end-to-end bandwidth management by providing a fixed number of representations of data objects on a server, and specifying an API by which clients track their environment (including, e.g., network characteristics) and negotiate for a representation that is appropriate for their current connectivity.
Reference: [30] <institution> Nokia Communicator 9000 Press Release. </institution> <note> Available at http:// www.club.nokia.com/support/9000/press.html. </note>
Reference-contexts: 1 Introduction The current Internet infrastructure includes an extensive range and number of clients and servers. Clients vary along many axes, including screen size, color depth, effective bandwidth, processing power, and ability to handle specific data encodings, e.g., GIF, PostScript, or MPEG. High-volume devices such as smart phones <ref> [30] </ref> and smart two-way pagers will soon constitute an increasing fraction of Internet clients, making the variation even more pronounced. These conditions make it difficult for servers to provide a level of service that is appropriate for every client.
Reference: [31] <author> J. K. Ousterhout. </author> <title> Tcl and the Tk Toolkit . Addison-Wesley, </title> <year> 1994. </year>
Reference-contexts: Because of the librarys rich API, the task of implementing client applications that support our refinement and distillation mechanisms is greatly simplified. Since all communication with the proxy is handled by the support library, applications automatically reap the benefits of an efficient, tokenized transport protocol. We describe a Tcl/Tk <ref> [31] </ref> implementation of the library in Section 4.3. Unfortunately, legacy applications must be modified if they are to take advantage of our support library. Our architecture does support unmodified legacy applications with the help of an clientside agent.
Reference: [32] <author> V. Paxson and S. Floyd. </author> <title> Wide-area Traffic: The Failure of Poisson Modeling. </title> <booktitle> ACM SIGCOMM 94 Conference on Communications Architectures, Protocols and Applications , London, </booktitle> <address> UK, </address> <month> aug </month> <year> 1994. </year>
Reference: [33] <author> J. Poskanzer. </author> <note> NetPBM Release 7. ftp://wuarchive.wustl.edu/ graphics/graphics/packages/NetPBM, </note> <year> 1993. </year>
Reference-contexts: to be more than made up for by the savings in transmission time for the distilled object relative to the original. 3.1 Images We have implemented an image distiller called gifmunch, which implements distillation and refinement for GIF [18] images, and consists largely of source code from the NetPBM Toolkit <ref> [33] </ref>. As described in Section 4.4, gifmunch makes simple predictions about the size of its output by measuring the achieved bits per pixel compression of the original image relative to a raw bitmap. <p> For example, a Web page is a document typically consisting of one or more text/html and image/* chunks. The modular proxy can convert each semantic type (only text and images so far) to a common intermediate representation (a subset of HTML for text, and PPM <ref> [33] </ref> for images), distill the intermediate representation, and convert it to a different target representation for the client if desired. Distillation of images adheres to userspecified constraints to the extent they are supported by our image muncher (Section 4.4). <p> We are designing a lightweight version of the application support library that has the smallest useful subset of the full functionality for small clients. 4.4 Image Distiller The image distiller we use is constructed largely from source code in NetPBM <ref> [33] </ref>. Currently the distiller picks a color palette based on the known capabilities of the client (which identifies itself when it first connects to the proxy and establishes a session), and optimizes for a particular target size in bytes of the distilled representation by predicting compression.
Reference: [34] <author> Y. Sato. </author> <title> DeleGate Server. </title> <note> Documentation available at http:// www.aubg.edu:8080/cii/src/delegate3.0.17/doc/Manual.txt. </note>
Reference-contexts: The original HTTP specification [6] explicitly 10 provides a proxy mechanism. Though it was originally intended for users behind security firewalls, it has been put to a number of novel uses, including Kanji format transcoding <ref> [34] </ref>, Kanji-to-GIF conversion [39], and rendering equations from markup [40].
Reference: [35] <institution> Video Codec for Audiovisual Services at p*64kb/s, </institution> <year> 1993. </year> <note> ITU-T Recommendation H.261. </note>
Reference-contexts: The choice of intermediate format is a function of the encoder/decoder pair, determined by the lowest complexity decoder/encoder data path. In this way, encoder/ decoder pairs can optimize their interaction by choosing an appropriate intermediate format. For example, DCT-based coding schemes like JPEG [20] and H.261 <ref> [35] </ref> can be more efficiently transcoded using DCT coefficients, which avoids the slow conversion to the pixel domain.
Reference: [36] <author> T. Watson. Wit: </author> <title> An Infrastructure for Wireless Palmtop Computing. </title> <institution> Technical Report CSE-94-11-08 , University of Washington, </institution> <month> Nov </month> <year> 1994. </year>
Reference-contexts: Rovers goals and functionality are complementary to our own, and nothing precludes the composition of queued RPC and RDOs with the functionality of our proxy architecture. Wit <ref> [36] </ref> partitions mobile applications between a client running threaded Tcl on an HP palmtop, and a workstation-based proxy process.
Reference: [37] <author> T. Watson, B. Bershad, and H. Levy. </author> <title> Using Application Data Semantics to Guide System Network Policies. </title> <booktitle> SOSP 95 WIP Session, </booktitle> <year> 1995. </year>
Reference-contexts: However, Wit 1 did not emphasize bandwidth man agement (though nothing in the Wit architecture precludes its use on a per-application basis), nor did it specify a uniform architecture for application partitioning. Wit version 2 <ref> [37] </ref> adds a uniform architecture in which client data is treated as a graph of objects constructed by the proxy, where graph edges connect related data objects (e.g., sequential or threaded messages in a mail queue).
Reference: [38] <institution> Wink Communications, Inc. </institution> <note> http://www.wink.com. </note>
Reference-contexts: This design requirement leads to severe hardware and software constraints, which our proxy architecture is uniquely positioned to address. We are working with Wink Communications, Inc. <ref> [38] </ref> to build and deploy such a system, allowing users of properly equipped cable converter boxes to access Internet content using their TV and remote control. 5 Related Work None of the techniques discussed in this paper is fundamentally new on its own.
Reference: [39] <author> K.-P. Yee. </author> <title> Shoduoka Mediator Service. </title> <address> http://www.lfw.org/ shodouka. </address>
Reference-contexts: The original HTTP specification [6] explicitly 10 provides a proxy mechanism. Though it was originally intended for users behind security firewalls, it has been put to a number of novel uses, including Kanji format transcoding [34], Kanji-to-GIF conversion <ref> [39] </ref>, and rendering equations from markup [40].
Reference: [40] <author> K.-P. Yee. MINSE. </author> <note> http://www.lfw.org/math. </note>
Reference-contexts: The original HTTP specification [6] explicitly 10 provides a proxy mechanism. Though it was originally intended for users behind security firewalls, it has been put to a number of novel uses, including Kanji format transcoding [34], Kanji-to-GIF conversion [39], and rendering equations from markup <ref> [40] </ref>.
Reference: [41] <author> B. Zenel. </author> <title> A Proxy Based Filtering Mechanism for the Mobile Environment. </title> <type> Ph.D. </type> <institution> Thesis Proposal , Department of Computer Science, Columbia University, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: However, MOWGLIs protocol-level lossless compression stands in contrast to our document models semantic lossy compression, and MOWGLI cannot dynamically adapt its behavior to changing network conditions. Bruce Zenels dual proxy architecture <ref> [41] </ref> also features separate low-level and high-level filters, which can be demand-loaded by applications. The low-level filters operate at the socket API level and require modifications to the mobile devices network stack.
References-found: 42

