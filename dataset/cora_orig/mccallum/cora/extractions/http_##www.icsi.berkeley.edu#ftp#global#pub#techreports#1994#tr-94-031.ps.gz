URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/tr-94-031.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/
Root-URL: http://www.icsi.berkeley.edu
Title: Massively Parallel Real-Time Reasoning with Very Large Knowledge Bases: An Interim Report some new insights
Author: D. R. Mani Lokendra Shastri 
Note: This work provides  systems.  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  
Pubnum: TR-94-031  
Email: E-Mail: mani@icsi.berkeley.edu E-Mail: shastri@icsi.berkeley.edu  
Phone: (510) 643-9153 FAX (510) 643-7684  
Date: August 1994  
Abstract: We map structured connectionist models of knowledge representation and reasoning onto existing general purpose massively parallel architectures with the objective of developing and implementing practical, real-time reasoning systems. Shruti, a connectionist knowledge representation and reasoning system which attempts to model reflexive reasoning, serves as our representative connectionist model. Realizations of shruti are developed on the Connection Machine CM-2|an SIMD architecture|and on the Connection Machine CM-5|an MIMD architecture. Though SIMD implementations on the CM-2 are reasonably fast|requiring a few seconds to tens of seconds for answering queries|experiments indicate that SPMD message passing systems are vastly superior to SIMD systems and offer hundred-fold speedups. The CM-5 implementation can encode large knowledge bases with several hundred thousand (randomly generated) rules and facts, and respond in under 500 milliseconds to a range of queries requiring inference depths of up to eight. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ajjanagadde, V. and Shastri, L. </author> <year> (1991). </year> <title> Rules and variables in neural nets. </title> <journal> Neural Computation, </journal> <volume> 3 </volume> <pages> 121-134. </pages>
Reference: <author> Barnden, J. A. and Pollack, J. B., </author> <title> editor (1991). </title> <booktitle> Advances in Connectionist and Neural Computation Theory, </booktitle> <volume> Volume 1. </volume> <publisher> Ablex Publishing Corporation, </publisher> <address> Norwood, NJ. </address>
Reference: <author> Barnden, J. A. and Srinivas, K. </author> <year> (1991). </year> <title> Encoding techniques for complex information structures in connectionist systems. </title> <journal> Connection Science, </journal> <volume> 3(3) </volume> <pages> 269-315. </pages>
Reference: <author> Carpenter, P. A. and Just, M. A. </author> <year> (1977). </year> <title> Reading comprehension as eyes see it. In Just, </title> <editor> M. A. and Carpenter, P. A., editor, </editor> <booktitle> Cognitive Processes in Comprehension. </booktitle> <publisher> Erlbaum. </publisher>
Reference: <author> Charniak, E. </author> <year> (1983). </year> <title> Passing markers: A theory of contextual inference in language comprehension. </title> <journal> Cognitive Science, </journal> <volume> 7(3) </volume> <pages> 171-190. </pages>
Reference: <author> Dietz, P., Krizanc, D., Rajasekaran, S., and Shastri, L. </author> <year> (1993). </year> <title> A lower bound result for the common element problem and its implication for reflexive reasoning. </title> <type> Technical Report MS-CIS-93-73, </type> <institution> Department of Computer and Information Science, University of Pennsylvania. </institution>
Reference: <author> Evett, M. P., Andersen, W. A., and Hendler, J. A. </author> <year> (1993). </year> <title> Massively parallel support for efficient knowledge representation. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1325-1330. </pages>
Reference-contexts: However, only very few researchers have tried to implement knowledge base systems on existing parallel platforms. A salient example of such work is the parka system <ref> (Evett et al., 1993) </ref> implemented on the CM-2. Parka encodes frame-based knowledge (analogous to a semantic network) and supports efficient computation of inheritance, recognition, and structure retrieval which is a generalization of recognition.
Reference: <author> Fahlman, S. E. </author> <year> (1979). </year> <title> NETL: A System for Representing and Using Real World Knowledge. </title> <publisher> MIT Press, </publisher> <address> Cambridge MA. </address>
Reference: <author> Feldman, J. A. and Ballard, D. H. </author> <year> (1982). </year> <title> Connectionist models and their properties. </title> <journal> Cognitive Science, </journal> <volume> 6(3) </volume> <pages> 205-254. </pages>
Reference: <author> Hillis, W. D. </author> <year> (1985). </year> <title> The Connection Machine. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: Semantic Networks on Special Purpose Hardware Fahlman (1979) proposed the design of netl, a massively parallel machine that could execute marker passing algorithms for computing inheritance and recognition in parallel. Although this machine was never built, it influenced the design of the CM-2 <ref> (Hillis, 1985) </ref>. Researchers such as Moldavan (1993) have also proposed and built special purpose hardware for realizing semantic networks and production systems. The Semantic Network Array Processor (SNAP) developed at the University of Southern California is described in (Moldovan et al., 1992).
Reference: <author> Jurafsky, D., Wooters, C., Tajchman, G., Segal, J., Stolcke, A., Fosler, E., and Morgan, N. </author> <year> (1994a). </year> <title> The Berkeley restaurant project. </title> <booktitle> In Proceedings of the International Conference on Speech and Language Processing, </booktitle> <address> Yokohama, Japan. </address> <note> To appear. </note>
Reference: <author> Jurafsky, D., Wooters, C., Tajchman, G., Segal, J., Stolcke, A., and Morgan, N. </author> <year> (1994b). </year> <title> Integrating advanced models of syntax, phonology, and accent/dialect with a speech recognizer. </title> <booktitle> In AAAI Workshop on Integrating Speech and Natural Language Processing, </booktitle> <address> Seattle. </address> <note> To appear. </note>
Reference: <author> Lakoff, G. and Johnson, M. </author> <year> (1980). </year> <title> Metaphors We Live By. </title> <publisher> University of Chicago Press, Chicago. </publisher>
Reference-contexts: Note that the server (processor number 31) is not shown. by the notion that knowledge about complex domains are learned and grounded in metaphorical mappings from certain basic, perceptually grounded domains <ref> (Lakoff and Johnson, 1980) </ref>. However, the "knowledge" in each domain is currently being generated at random. The knowledge base generator takes several parameters as input.
Reference: <author> Lange, T. E. and Dyer, M. G. </author> <year> (1989). </year> <title> High-level inferencing in a connectionist network. </title> <journal> Connection Science, </journal> <volume> 1(2) </volume> <pages> 181-217. </pages>
Reference: <author> Lenat, D. B., Guha, R. V., et al. </author> <year> (1990). </year> <title> CYC: Towards programs with common sense. </title> <journal> Communications of the ACM, </journal> <volume> 33(8) </volume> <pages> 30-49. </pages>
Reference-contexts: The mapping of this knowledge base to our system is very similar to that of WordNet. We are also trying to acquire a subset of the CYC knowledge base <ref> (Lenat et al., 1990) </ref>. A planned application of our knowledge base system is to couple it to the Berkeley Restaurant Project (BeRP) speech understanding system being developed at the International Computer Science Institute (Ju-rafsky et al., 1994a; Jurafsky et al., 1994b).
Reference: <author> Mani, D. R. </author> <year> (1994). </year> <title> A mathematical analysis of message passing (MIMD) shruti simulation systems. </title> <type> Technical report, </type> <institution> University of Pennsylvania. Forthcoming. </institution>
Reference-contexts: In view of its greatly improved performance, we plan to expend our effort in improving and extending the asynchronous (SPMD) message passing system on the CM-5. The SPMD rapid reasoning system on the CM-5 is also being mathematically analyzed <ref> (Mani, 1994) </ref> with the objective of obtaining quantitative measures which can be used to further improve performance. Shruti-cm5 8 currently supports only backward reasoning. Future work on the CM-5 will involve developing a forward reasoning system and an integration of the forward and backward reasoners.
Reference: <author> Mani, D. R. and Shastri, L. </author> <year> (1993). </year> <title> Reflexive reasoning with multiple instantiation in a connectionist reasoning system with a type hierarchy. </title> <journal> Connection Science, </journal> <volume> 5(3 </volume> & 4):205-242. 
Reference-contexts: Queries result in the activation of the relevant predicate and concepts as described in (Shastri and Ajjanagadde, 1993) and <ref> (Mani and Shastri, 1993) </ref>. The activation propagation loop is shown in Figure 8. As noted in Section 5.3, markers are used to represent shruti phases. The system runs asynchronously in that each processor continues with its processing irrespective of the progress made by other processors. <p> Enough information is maintained when an instantiation is received so that collector activation can be propagated back to the predicate bank which originated the activation. Note that multiple instantiation is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>; the above protocol is functionally equivalent to these switches and ensures that (i) any predicate or concept represents at most a bounded number of instantiations (the number being decided by the multiple instantiation constants K1 and K2) and (ii) a given instantiation is represented at most once <p> Every predicate and rule-slot is housed on a processor. Arrows indicate links which are implemented using interprocessor communication. description in (Shastri and Ajjanagadde, 1993) and <ref> (Mani and Shastri, 1993) </ref>. The reasoning episode can then be run, either step-wise or to completion. We now describe the mechanics of spreading activation and matching facts in the system. The gross structure of the activation propagation loop is indicated in Figure 8. <p> The is-a link gets activation from the subconcept (superconcept) and sends it to the superconcept (subconcept). Again, in order to minimize communication, we ensure that any new activation traverses corresponding is-a links exactly once. Multiple Instantiation Multiple instantiation in shruti-cm2 is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>. Predicates and concepts can accommodate K2 and K1 instances respectively. When spreading activation in the network, predicate and concept banks are considered one at a time. <p> C Multiple Instantiation|Some Technical Details Multiple instantiation in both shruti-cm2 and shruti-cm5 is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>. When spreading activation in the network, predicate and concept banks are considered one at a time. In other words, in a given iteration of the activation propagation loop (see Figure 8) only one active bank of a predicate or concept will be considered.
Reference: <author> Miller, G. A., Beckwith, R., Fellbaum, C., Gross, D., Miller, K., and Tengi, R. </author> <year> (1990). </year> <title> Five papers on WordNet. </title> <type> Technical Report CSL-43, </type> <institution> Princeton University. </institution> <note> Revised March 1993. 40 Moldovan, </note> <author> D. I. </author> <year> (1989). </year> <title> RUBIC: A multiprocessor for rule-based systems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 19(4) </volume> <pages> 699-706. </pages>
Reference-contexts: intra-special-domain rules: 1.00 21 Fraction of inter-special-domain rules: 0.00 Fraction of intra-target-domain rules: 0.96 Fraction of inter-target-domain rules: 0.01 Number of type hierarchies: 10 Maximum depth of type hierarchies: 5 Fraction of shared leaves in type hiers.: 0.05 5.8 Proposed Experiments with Real-World Knowledge Bases Recently we have obtained WordNet <ref> (Miller et al., 1990) </ref> and plan to map it to our system.
Reference: <author> Moldovan, D. I. </author> <year> (1993). </year> <title> Parallel Processing: From Applications to Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference: <author> Moldovan, D. I., Lee, W., Lin, C., and Chung, M. </author> <year> (1992). </year> <title> SNAP: Parallel processing applied to AI. </title> <journal> Computer, </journal> <volume> 25(5) </volume> <pages> 39-50. </pages>
Reference-contexts: Researchers such as Moldavan (1993) have also proposed and built special purpose hardware for realizing semantic networks and production systems. The Semantic Network Array Processor (SNAP) developed at the University of Southern California is described in <ref> (Moldovan et al., 1992) </ref>. The conceptual design of the SNAP is based on associative memory and marker passing, and is optimized for representing and reasoning with semantic networks. The SNAP provides a special instruction set for network creation and maintenance, marker creation and propagation, logic operations and search/retrieval. <p> The SNAP provides a special instruction set for network creation and maintenance, marker creation and propagation, logic operations and search/retrieval. A SNAP prototype has been built with off-the-shelf components and used to implement a parallel, memory-based parser <ref> (Moldovan et al., 1992) </ref>. The parser is capable of processing sentences in 1-10 seconds depending on the sentence length and the size of the knowledge base used. The largest knowledge base used consisted of about 2,000 nodes. 24 Unlike shruti and parka, SNAP-based knowledge representation systems use special purpose hardware.
Reference: <author> Newell, A. </author> <year> (1992). </year> <title> Unified theories of cognition and the role of Soar. </title> <editor> In Michon, J. A. and Akyurek, A., editor, </editor> <booktitle> Soar: A Cognitive Architecture in Perspective, </booktitle> <pages> pages 25-79. </pages> <publisher> Kluwer Academic, </publisher> <address> Netherlands. </address>
Reference: <author> Porter, B., Lester, J., Murray, K., Pittman, K., Souther, A., Acker, L., and Jones, T. </author> <year> (1988). </year> <title> AI research in the context of a multifunctional knowledge base: The botany knowledge base project. </title> <type> Technical Report AI88-88, </type> <institution> University of Texas. </institution>
Reference-contexts: We have also obtained a large knowledge base consisting of over 14,000 frames and 170,000 attribute-value pairs about plant anatomy and physiology from Bruce Porter of the University of Texas at Austin <ref> (Porter et al., 1988) </ref>. The mapping of this knowledge base to our system is very similar to that of WordNet. We are also trying to acquire a subset of the CYC knowledge base (Lenat et al., 1990).
Reference: <author> Shastri, L. </author> <year> (1991). </year> <title> Why semantic networks? In Sowa, </title> <editor> J. F., editors, </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference: <author> Shastri, L. </author> <year> (1993). </year> <title> A computational model of tractable reasoning|taking inspiration from cognition. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Introduction of multiple dynamic instantiation of predicates relies on the assumption that, during an episode of reflexive reasoning, any given predicate need only be instantiated a bounded number of times. In <ref> (Shastri and Ajjanagadde, 1993) </ref>, it is argued that a reasonable value for this bound is around three. We shall refer to this bound as the multiple instantiation constant for predicates, k 2 . 2 Predicate representations are augmented so that each predicate can represent up to k 2 dynamic instanti-ations. <p> This constrains the spread of activation in the network and therefore directly affects time and resource usage. The motivation for these constraints and their impact are discussed in <ref> (Shastri and Ajjanagadde, 1993) </ref>. <p> Queries result in the activation of the relevant predicate and concepts as described in <ref> (Shastri and Ajjanagadde, 1993) </ref> and (Mani and Shastri, 1993). The activation propagation loop is shown in Figure 8. As noted in Section 5.3, markers are used to represent shruti phases. The system runs asynchronously in that each processor continues with its processing irrespective of the progress made by other processors. <p> Queries result in the activation of the relevant predicate and concepts as described in (Shastri and Ajjanagadde, 1993) and <ref> (Mani and Shastri, 1993) </ref>. The activation propagation loop is shown in Figure 8. As noted in Section 5.3, markers are used to represent shruti phases. The system runs asynchronously in that each processor continues with its processing irrespective of the progress made by other processors. <p> Enough information is maintained when an instantiation is received so that collector activation can be propagated back to the predicate bank which originated the activation. Note that multiple instantiation is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>; the above protocol is functionally equivalent to these switches and ensures that (i) any predicate or concept represents at most a bounded number of instantiations (the number being decided by the multiple instantiation constants K1 and K2) and (ii) a given instantiation is represented at most once <p> Every predicate and rule-slot is housed on a processor. Arrows indicate links which are implemented using interprocessor communication. description in <ref> (Shastri and Ajjanagadde, 1993) </ref> and (Mani and Shastri, 1993). The reasoning episode can then be run, either step-wise or to completion. We now describe the mechanics of spreading activation and matching facts in the system. The gross structure of the activation propagation loop is indicated in Figure 8. <p> Every predicate and rule-slot is housed on a processor. Arrows indicate links which are implemented using interprocessor communication. description in (Shastri and Ajjanagadde, 1993) and <ref> (Mani and Shastri, 1993) </ref>. The reasoning episode can then be run, either step-wise or to completion. We now describe the mechanics of spreading activation and matching facts in the system. The gross structure of the activation propagation loop is indicated in Figure 8. <p> The is-a link gets activation from the subconcept (superconcept) and sends it to the superconcept (subconcept). Again, in order to minimize communication, we ensure that any new activation traverses corresponding is-a links exactly once. Multiple Instantiation Multiple instantiation in shruti-cm2 is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>. Predicates and concepts can accommodate K2 and K1 instances respectively. When spreading activation in the network, predicate and concept banks are considered one at a time. <p> C Multiple Instantiation|Some Technical Details Multiple instantiation in both shruti-cm2 and shruti-cm5 is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>. When spreading activation in the network, predicate and concept banks are considered one at a time. In other words, in a given iteration of the activation propagation loop (see Figure 8) only one active bank of a predicate or concept will be considered.
Reference: <author> Shastri, L. and Ajjanagadde, V. </author> <year> (1993). </year> <title> From simple associations to systematic reasoning: A connectionist representation of rules, variables and dynamic bindings using temporal synchrony. </title> <journal> Behavioral and Brain Sciences, </journal> <volume> 16(3) </volume> <pages> 417-494. </pages>
Reference-contexts: Introduction of multiple dynamic instantiation of predicates relies on the assumption that, during an episode of reflexive reasoning, any given predicate need only be instantiated a bounded number of times. In <ref> (Shastri and Ajjanagadde, 1993) </ref>, it is argued that a reasonable value for this bound is around three. We shall refer to this bound as the multiple instantiation constant for predicates, k 2 . 2 Predicate representations are augmented so that each predicate can represent up to k 2 dynamic instanti-ations. <p> This constrains the spread of activation in the network and therefore directly affects time and resource usage. The motivation for these constraints and their impact are discussed in <ref> (Shastri and Ajjanagadde, 1993) </ref>. <p> Queries result in the activation of the relevant predicate and concepts as described in <ref> (Shastri and Ajjanagadde, 1993) </ref> and (Mani and Shastri, 1993). The activation propagation loop is shown in Figure 8. As noted in Section 5.3, markers are used to represent shruti phases. The system runs asynchronously in that each processor continues with its processing irrespective of the progress made by other processors. <p> Queries result in the activation of the relevant predicate and concepts as described in (Shastri and Ajjanagadde, 1993) and <ref> (Mani and Shastri, 1993) </ref>. The activation propagation loop is shown in Figure 8. As noted in Section 5.3, markers are used to represent shruti phases. The system runs asynchronously in that each processor continues with its processing irrespective of the progress made by other processors. <p> Enough information is maintained when an instantiation is received so that collector activation can be propagated back to the predicate bank which originated the activation. Note that multiple instantiation is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>; the above protocol is functionally equivalent to these switches and ensures that (i) any predicate or concept represents at most a bounded number of instantiations (the number being decided by the multiple instantiation constants K1 and K2) and (ii) a given instantiation is represented at most once <p> Every predicate and rule-slot is housed on a processor. Arrows indicate links which are implemented using interprocessor communication. description in <ref> (Shastri and Ajjanagadde, 1993) </ref> and (Mani and Shastri, 1993). The reasoning episode can then be run, either step-wise or to completion. We now describe the mechanics of spreading activation and matching facts in the system. The gross structure of the activation propagation loop is indicated in Figure 8. <p> Every predicate and rule-slot is housed on a processor. Arrows indicate links which are implemented using interprocessor communication. description in (Shastri and Ajjanagadde, 1993) and <ref> (Mani and Shastri, 1993) </ref>. The reasoning episode can then be run, either step-wise or to completion. We now describe the mechanics of spreading activation and matching facts in the system. The gross structure of the activation propagation loop is indicated in Figure 8. <p> The is-a link gets activation from the subconcept (superconcept) and sends it to the superconcept (subconcept). Again, in order to minimize communication, we ensure that any new activation traverses corresponding is-a links exactly once. Multiple Instantiation Multiple instantiation in shruti-cm2 is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>. Predicates and concepts can accommodate K2 and K1 instances respectively. When spreading activation in the network, predicate and concept banks are considered one at a time. <p> C Multiple Instantiation|Some Technical Details Multiple instantiation in both shruti-cm2 and shruti-cm5 is handled without the use of switches <ref> (Mani and Shastri, 1993) </ref>. When spreading activation in the network, predicate and concept banks are considered one at a time. In other words, in a given iteration of the activation propagation loop (see Figure 8) only one active bank of a predicate or concept will be considered.

Reference: <author> Waltz, D. L. and Pollack, J. B. </author> <year> (1985). </year> <title> Massively parallel parsing: A strongly interactive model of natural language interpretation. </title> <journal> Cognitive Science, </journal> <volume> 9(1) </volume> <pages> 51-74. 41 </pages>
References-found: 26

