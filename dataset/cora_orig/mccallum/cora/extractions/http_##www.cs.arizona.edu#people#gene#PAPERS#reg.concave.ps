URL: http://www.cs.arizona.edu/people/gene/PAPERS/reg.concave.ps
Refering-URL: http://www.cs.arizona.edu/people/gene/vita.html
Root-URL: http://www.cs.arizona.edu
Title: Approximate Regular Expression Pattern Matching with Concave Gap Penalties  
Author: James R. Knight Eugene W. Myers 
Date: May 17, 1995  
Abstract: Given a sequence A of length M and a regular expression R of length P , an approximate regular expression pattern matching algorithm computes the score of the optimal alignment between A and one of the sequences B exactly matched by R. An alignment between sequences A = a 1 a 2 : : : a M and B = b 1 b 2 : : : b N is a list of ordered pairs, &lt;(i 1 ; j 1 ); (i 2 ; j 2 ); : : : (i t ; j t )&gt; such that i k &lt; i k+1 and j k &lt; j k+1 . In this case, the alignment aligns symbols a i k and b j k , and leaves blocks of unaligned symbols, or gaps, between them. A scoring scheme S associates costs for each aligned symbol pair and each gap. The alignment's score is the sum of the associated costs, and an optimal alignment is one of minimal score. There are a variety of schemes for scoring alignments. In a concave gap-penalty scoring scheme S = fffi; wg, a function ffi(a; b) gives the score of each aligned pair of symbols a and b, and a concave function w(k) gives the score of a gap of length k. A function w is concave if and only if it has the property that for all k &gt; 1, w(k + 1) w(k) w(k) w(k 1). In this paper we present an O(M P (log M + log 2 P )) algorithm for approximate regular expression matching for an arbitrary ffi and any concave w.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aggarwal, A., Klawe, M., Moran, S., Shor, P. and Wilber, R. </author> <title> "Geometric Applications of A Matrix-Searching Algorithm." </title> <booktitle> Algorithmica 2 (1987), </booktitle> <pages> 195-208. </pages>
Reference-contexts: 1 b 2 : : : b N , over alphabet , is a list of ordered pairs of indices &lt;(i 1 ; j 1 ); (i 2 ; j 2 ); : : : (i t ; j t )&gt;, called a trace, such that (1) i k 2 <ref> [1; M ] </ref>, (2) j k 2 [1; N ], and (3) i k &lt; i k+1 and j k &lt; j k+1 . Each pair of symbols a i k and b j k is said to be aligned. <p> N , over alphabet , is a list of ordered pairs of indices &lt;(i 1 ; j 1 ); (i 2 ; j 2 ); : : : (i t ; j t )&gt;, called a trace, such that (1) i k 2 [1; M ], (2) j k 2 <ref> [1; N ] </ref>, and (3) i k &lt; i k+1 and j k &lt; j k+1 . Each pair of symbols a i k and b j k is said to be aligned. <p> More recently than these minimum envelope algorithms, a series of papers [3, 4, 6, 10, 20] use a matrix searching technique originally presented in <ref> [1] </ref> to improve the worst case complexity for this problem and for a similar one-dimensional variation where w is a convex function, i.e. one whose forward differences are nondecreasing instead of nonincreasing. <p> e (x) &lt; f (x). (5) Offset (E; ): returns E 0 such that, for all i, E 0 i :fi = E i :fi + and E 0 Findmin and Findmax are used to perform searches over a candidate list E, and as such the index k ranges over <ref> [1; Len (E)] </ref>. All the predicates P (k) that occur in the calls to F indmin below are nondecreasing in that P (k) P (k + 1) for all k, where false is considered to be less than true. Similarly, all the predicates used in calls to Findmax are nonincreasing. <p> Thus, it suffices to find the left and right points x l 2 [0; rp] (or x l = lp if RE (m) is false) and x h 2 <ref> [lp; 1] </ref> (or x h = rp if LE (m + 1) is false) where the new candidate intersects the envelope for E. The call to Findmax finds the rightmost candidate, l, which is less than the candidate at the left endpoint of l's interval.
Reference: [2] <author> Allen, F. E. </author> <title> "Control Flow Analysis." </title> <booktitle> SIGPLAN Notices 5 (1970), </booktitle> <pages> 1-19. </pages>
Reference-contexts: Note that the graph restricted to the set of DAG edges is acyclic. Moreover, it can be shown that any cycle-free path in F has at most one back edge. Graphs with this property are commonly referred to as being reducible <ref> [2] </ref> or as having a loop connectedness parameter of 1 [7]. In summary, the key observations are that for any regular expression R there is an NFA whose graph is reducible and whose size, measured in either vertices or edges, is linear in the length of R.
Reference: [3] <author> Eppstein, D. </author> <title> "Sequence Comparison with Mixed Convex and Concave Costs." </title> <editor> J. </editor> <booktitle> Algorithms 11 (1990), </booktitle> <pages> 85-101. </pages>
Reference-contexts: More recently than these minimum envelope algorithms, a series of papers <ref> [3, 4, 6, 10, 20] </ref> use a matrix searching technique originally presented in [1] to improve the worst case complexity for this problem and for a similar one-dimensional variation where w is a convex function, i.e. one whose forward differences are nondecreasing instead of nonincreasing.
Reference: [4] <author> Eppstein, D., Galil, Z., Giancarlo, R. and Italiano, G. </author> <title> "Sparse Dynamic Programming II: Convex and Concave Cost Functions." </title> <editor> J. </editor> <booktitle> ACM 39,3 (1992), </booktitle> <pages> 546-567. </pages>
Reference-contexts: More recently than these minimum envelope algorithms, a series of papers <ref> [3, 4, 6, 10, 20] </ref> use a matrix searching technique originally presented in [1] to improve the worst case complexity for this problem and for a similar one-dimensional variation where w is a convex function, i.e. one whose forward differences are nondecreasing instead of nonincreasing.
Reference: [5] <author> Galil, Z. and Giancarlo, R. </author> <title> "Speeding Up Dynamic Programming with Applications to Molecular Biology." </title> <booktitle> Theoretical Computer Science 64 (1989), </booktitle> <pages> 107-118. </pages>
Reference-contexts: In 1984, Waterman [19] generalized this classic problem by considering concave gap penalties, or equivalently the problem SEQ (A, B, fffi; wg) where w is concave. A few years a later, a number of authors arrived at an O (M N (log M + log N )) algorithm <ref> [8, 12, 5] </ref> using the concept of a minimum envelope. In an orthogonal direction of generality, Myers and Miller [14] considered the problem of approximate matching of regular expressions under symbol-dependent scoring schemes, RE (A, R, fffig). <p> The value of each C i;s is the minimum of the two computations at i and s. 3 Minimum Envelopes and Generalized Candidate Lists From this point forward, all comparison problems are assumed to be with respect to a gap penalty model where w is concave. The algorithms of <ref> [8, 12, 5] </ref> employ the concept of a minimum envelope and its candidate list implementation to solve the sequence comparison problem SEQ (A, B, fffi; wg) in less than O (N M (N + M )) time. <p> This section describes the required generalization, beginning in Section 3.1 with a brief review of minimum envelopes and candidate lists as presented in <ref> [8, 12, 5] </ref>. Section 3.2 then illustrates the complications which arise from the introduction of regular expressions and specifies the more general candidate lists needed by the algorithms of Section 4.
Reference: [6] <author> Galil, Z. and Park, K. </author> <title> "A Linear-Time Algorithm for Concave One-Dimensional Dynamic Programming." </title> <journal> Info. Proc. Letters 33 (1989/90), </journal> <pages> 309-311. </pages>
Reference-contexts: More recently than these minimum envelope algorithms, a series of papers <ref> [3, 4, 6, 10, 20] </ref> use a matrix searching technique originally presented in [1] to improve the worst case complexity for this problem and for a similar one-dimensional variation where w is a convex function, i.e. one whose forward differences are nondecreasing instead of nonincreasing.
Reference: [7] <author> Hecht, M. S. and Ullman, J. D. </author> <title> "A Simple Algorithm for Global Dataflow Analysis Programs." </title> <journal> SIAM J. of Computing 4,4 (1975), </journal> <pages> 519-532. </pages>
Reference-contexts: Moreover, it can be shown that any cycle-free path in F has at most one back edge. Graphs with this property are commonly referred to as being reducible [2] or as having a loop connectedness parameter of 1 <ref> [7] </ref>. In summary, the key observations are that for any regular expression R there is an NFA whose graph is reducible and whose size, measured in either vertices or edges, is linear in the length of R.
Reference: [8] <author> Hirschberg, D. S. and Larmore, L. L. </author> <title> "The Least Weight Subsequence Problem." </title> <journal> SIAM J. of Computing 16,4 (1987), </journal> <pages> 628-638. </pages>
Reference-contexts: In 1984, Waterman [19] generalized this classic problem by considering concave gap penalties, or equivalently the problem SEQ (A, B, fffi; wg) where w is concave. A few years a later, a number of authors arrived at an O (M N (log M + log N )) algorithm <ref> [8, 12, 5] </ref> using the concept of a minimum envelope. In an orthogonal direction of generality, Myers and Miller [14] considered the problem of approximate matching of regular expressions under symbol-dependent scoring schemes, RE (A, R, fffig). <p> The value of each C i;s is the minimum of the two computations at i and s. 3 Minimum Envelopes and Generalized Candidate Lists From this point forward, all comparison problems are assumed to be with respect to a gap penalty model where w is concave. The algorithms of <ref> [8, 12, 5] </ref> employ the concept of a minimum envelope and its candidate list implementation to solve the sequence comparison problem SEQ (A, B, fffi; wg) in less than O (N M (N + M )) time. <p> This section describes the required generalization, beginning in Section 3.1 with a brief review of minimum envelopes and candidate lists as presented in <ref> [8, 12, 5] </ref>. Section 3.2 then illustrates the complications which arise from the introduction of regular expressions and specifies the more general candidate lists needed by the algorithms of Section 4.
Reference: [9] <author> Hopcroft, J. E. and Ullman, J. D. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address> <year> (1979), </year> <note> Chapter 2. </note>
Reference-contexts: Regular expressions are convenient for the textual specification of regular languages, but the graph-theoretic finite automaton is better suited to the purpose of constructing an alignment graph. There are several different such automaton models, see <ref> [9] </ref> for more details. We use the nondeterministic, state-labeled finite automaton model, hereafter referred to as an NFA, employed by Myers and Miller [14] for the symbol-based regular expression matching problem.
Reference: [10] <author> Klawe, M. and Kleitman, D. </author> <title> "An Almost Linear Algorithm for Generalized Matrix Searching." </title> <journal> SIAM J. Disc. Math. </journal> <volume> 3 (1990), </volume> <pages> 81-97. </pages>
Reference-contexts: More recently than these minimum envelope algorithms, a series of papers <ref> [3, 4, 6, 10, 20] </ref> use a matrix searching technique originally presented in [1] to improve the worst case complexity for this problem and for a similar one-dimensional variation where w is a convex function, i.e. one whose forward differences are nondecreasing instead of nonincreasing.
Reference: [11] <author> Knuth, D. </author> <title> Sorting and Searching: </title> <booktitle> The Art of Computer Programming (Vol. </booktitle> <volume> 3). </volume> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address> <year> (1973), </year> <pages> 463-468. </pages>
Reference-contexts: Attention is now turned to the efficient implementation of the candidate list data structure. Each candidate list is implemented as a height-balanced tree of candidate records such that the list is given by an inorder traversal of the tree. This well-known representation for a linear list <ref> [11] </ref> permits all of the typical list operations, plus the binary search used by Findmax and Findmin, in either constant or logarithmic time of the length of the list.
Reference: [12] <author> Miller, W. and Myers, E. W. </author> <title> "Sequence Comparison with Concave Weighting Functions." </title> <journal> Bull. Math. Biology 50,2 (1988), </journal> <pages> 97-120. </pages>
Reference-contexts: In 1984, Waterman [19] generalized this classic problem by considering concave gap penalties, or equivalently the problem SEQ (A, B, fffi; wg) where w is concave. A few years a later, a number of authors arrived at an O (M N (log M + log N )) algorithm <ref> [8, 12, 5] </ref> using the concept of a minimum envelope. In an orthogonal direction of generality, Myers and Miller [14] considered the problem of approximate matching of regular expressions under symbol-dependent scoring schemes, RE (A, R, fffig). <p> Section 2 reviews aspects of algorithms for previous problems 2 concentrating on the concepts of an alignment graph and dynamic programming recurrence. Section 3 introduces the concept of a minimum envelope in the form needed for our result, along with a brief digression to show how it generalizes <ref> [12] </ref> and why the regular expression algorithm requires this generalization. <p> The value of each C i;s is the minimum of the two computations at i and s. 3 Minimum Envelopes and Generalized Candidate Lists From this point forward, all comparison problems are assumed to be with respect to a gap penalty model where w is concave. The algorithms of <ref> [8, 12, 5] </ref> employ the concept of a minimum envelope and its candidate list implementation to solve the sequence comparison problem SEQ (A, B, fffi; wg) in less than O (N M (N + M )) time. <p> This section describes the required generalization, beginning in Section 3.1 with a brief review of minimum envelopes and candidate lists as presented in <ref> [8, 12, 5] </ref>. Section 3.2 then illustrates the complications which arise from the introduction of regular expressions and specifies the more general candidate lists needed by the algorithms of Section 4.
Reference: [13] <author> Myers, E. W. </author> <title> "Efficient Applicative Data Types." </title> <booktitle> Proc. 11th Symp. on the Princ. of Prog. Languages (1984), </booktitle> <pages> 66-75. </pages>
Reference-contexts: The best previous algorithm [14] required O (M P (M + P )) or cubic time. Our sub-cubic result builds on the earlier results above by combining the minimum envelope and two-sweep node-listing ideas. However, the extension is not straightforward, requiring the use of persistent data structures <ref> [13] </ref> and collections of envelopes, some of which are organized as stacks. The paper is organized as follows. Section 2 reviews aspects of algorithms for previous problems 2 concentrating on the concepts of an alignment graph and dynamic programming recurrence. <p> This well-known representation for a linear list [11] permits all of the typical list operations, plus the binary search used by Findmax and Findmin, in either constant or logarithmic time of the length of the list. In addition, Myers <ref> [13] </ref> presents an 1 P suffices for the sequence vs. regular expression problem as longer gap distances will not be encountered. Similarly M and N suffice for the one-dimensional column and row problems posed by sequences. 14 implementation for applicatively manipulating height-balanced trees at no additional time overhead.
Reference: [14] <author> Myers, E. W. and Miller, W. </author> <title> "Approximate Matching of Regular Expressions." </title> <journal> Bull. Math. Biology 51,1 (1989), </journal> <pages> 5-37. </pages>
Reference-contexts: A few years a later, a number of authors arrived at an O (M N (log M + log N )) algorithm [8, 12, 5] using the concept of a minimum envelope. In an orthogonal direction of generality, Myers and Miller <ref> [14] </ref> considered the problem of approximate matching of regular expressions under symbol-dependent scoring schemes, RE (A, R, fffig). By observing that an automaton for R is a reducible graph, they devised a two-sweep node-listing algorithm requiring O (M P ) time, where P is the size of R. <p> This paper presents an O (M P (log M + log 2 P )) algorithm for RE (A, R, fffi; wg), the problem of approximately matching A to regular expression R under a concave gap penalty scheme S = fffi; wg. The best previous algorithm <ref> [14] </ref> required O (M P (M + P )) or cubic time. Our sub-cubic result builds on the earlier results above by combining the minimum envelope and two-sweep node-listing ideas. <p> Regular Expression Comparison We now turn our attention to problems that involve generalizing B to a regular expression R, such as the problem RE (A, R, fffig) treated in <ref> [14] </ref>. The discussion here is basically a summary of the results in that paper. Recall that a regular expression over alphabet is any expression built from symbols in [ f"g using the operations of concatenation (juxtaposition), alternation (j), and Kleene closure (*). The symbol " matches the empty string. <p> There are several different such automaton models, see [9] for more details. We use the nondeterministic, state-labeled finite automaton model, hereafter referred to as an NFA, employed by Myers and Miller <ref> [14] </ref> for the symbol-based regular expression matching problem. <p> Thus the problem of comparing A and R reduces to finding a least cost path between source vertex (0; ) and sink vertex (M; ). It is further shown in <ref> [14] </ref> that all substitution and deletion edges entering "-labeled vertices except can be removed without destroying the property that there is a path corresponding to every possible alignment. These edges are removed in the example in Figure 4 to avoid a cluttered graph. <p> Myers and Miller <ref> [14] </ref> show that the two sweep approach of the previous section correctly computes the shortest paths in this cyclic alignment graph if w is sub-additive, i.e. for all m and 7 n, w (m + n) w (m) + w (n).
Reference: [15] <author> Needleman, S. B. and Wunsch, C. D. </author> <title> "A General Method Applicable to the Search for Similarities in the Amino Acid Sequence of Two Proteins." </title> <editor> J. </editor> <booktitle> Molecular Biology 48 (1970), </booktitle> <pages> 443-453. </pages>
Reference-contexts: The problem considered in this paper is a generalization of several earlier results. The traditional sequence comparison problem, SEQ (A, B, fffig), finds the optimal alignment between A and B under symbol-dependent scoring scheme S = fffig. Several authors <ref> [15, 16, 18] </ref> independently discovered an O (M N ) algorithm for this problem, where M and N are the lengths of A and B.
Reference: [16] <author> Sankoff, D. </author> <title> "Matching Sequences Under Deletion/Insertion Constraints." </title> <booktitle> Proc. </booktitle> <institution> Nat. Acad. </institution> <note> Sci. </note> <author> U. S. A. </author> <month> 69 </month> <year> (1972), </year> <pages> 4-6. </pages>
Reference-contexts: The problem considered in this paper is a generalization of several earlier results. The traditional sequence comparison problem, SEQ (A, B, fffig), finds the optimal alignment between A and B under symbol-dependent scoring scheme S = fffig. Several authors <ref> [15, 16, 18] </ref> independently discovered an O (M N ) algorithm for this problem, where M and N are the lengths of A and B.
Reference: [17] <author> Sleator, D. D. and Tarjan, R. E. </author> <title> "Self-Adjusting Binary Search Trees." </title> <editor> J. </editor> <booktitle> ACM 32,3 (1985), </booktitle> <pages> 652-686. </pages>
Reference-contexts: Thus an O (log P ) binary search over this range implements Intersect. Operation Offset (E; ), primitive operation (5), can be realized in O (1) time over a height-balanced tree as noted for link-cut trees <ref> [17] </ref>. The "trick" is to store the fi and x values for a candidate record as offsets relative to the fi and x values at the parent of the candidate in the tree. <p> These changes are made during the rotation at no additional asymptotic overhead. Such value-preserving transforms are available for the other necessary rotation operations. A complete description of one such schema is given in <ref> [17] </ref>. The final consideration is the extension of candidate lists to include candidates whose fi-value is zero.
Reference: [18] <author> Wagner, R. A. and Fischer, M. J. </author> <title> "The String-to-String Correction Problem." </title> <editor> J. </editor> <booktitle> ACM 21,1 (1974), </booktitle> <pages> 168-173. </pages>
Reference-contexts: The problem considered in this paper is a generalization of several earlier results. The traditional sequence comparison problem, SEQ (A, B, fffig), finds the optimal alignment between A and B under symbol-dependent scoring scheme S = fffig. Several authors <ref> [15, 16, 18] </ref> independently discovered an O (M N ) algorithm for this problem, where M and N are the lengths of A and B.
Reference: [19] <author> Waterman, M. S. </author> <title> "General Methods of Sequence Comparison." </title> <journal> Bull. Math. Biology 46 (1984), </journal> <pages> 473-501. </pages>
Reference-contexts: Several authors [15, 16, 18] independently discovered an O (M N ) algorithm for this problem, where M and N are the lengths of A and B. In 1984, Waterman <ref> [19] </ref> generalized this classic problem by considering concave gap penalties, or equivalently the problem SEQ (A, B, fffi; wg) where w is concave.
Reference: [20] <author> Wilber, R. </author> <title> "The Concave Least-Weight Subsequence Problem Revisited." </title> <editor> J. </editor> <booktitle> Algorithms 9 (1988), </booktitle> <pages> 418-425. </pages>
Reference-contexts: More recently than these minimum envelope algorithms, a series of papers <ref> [3, 4, 6, 10, 20] </ref> use a matrix searching technique originally presented in [1] to improve the worst case complexity for this problem and for a similar one-dimensional variation where w is a convex function, i.e. one whose forward differences are nondecreasing instead of nonincreasing.
References-found: 20

