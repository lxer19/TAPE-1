URL: http://www.isse.gmu.edu:80/~csis/publications/radc90p.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Title: RESTRICTED POLYINSTANTIATION or How to Close Signaling Channels Without Duplicity  
Author: Ravi Sandhu and Sushil Jajodia 
Date: June 1990, pages 7-12.  
Address: Castille, New York,  Fairfax, VA 22030-4444  
Affiliation: Security,  Department of Information Systems and Systems Engineering George Mason University  
Note: Proc. 3rd RADC Workshop on Multilevel Database  
Abstract: We dispel the mistaken notion that polyinstantiation in multilevel secure databases amounts to lying and/or instilling confusion about the "true" values of data. On the contrary we show it is easy to polyin- stantiate and be truthful, provided one is disciplined and sensible about it. Our conclusion is that polyinstantiation is effective if properly used, but it can be terribly misused if so desired. In this respect polyinstan- tiation is no different than most other useful mechanisms in computer systems. We also point out that the necessary discipline can be enforced using standard integrity concepts such as well-formed transactions, least privilege and strong discretionary access controls.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Burns, R.K. </author> <title> "Referential Secrecy." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1990, </year> <pages> 133-142. </pages>
Reference-contexts: This caveat is inescapable and absolute. We must reject outright "solutions" which tolerate signaling channels. Solutions with signaling channels, such as proposed in <ref> [1, 16] </ref>, may well be acceptable as an engineering compromise in particular situations. But they are clearly not acceptable as general-purpose solutions. This point needs to be emphasized because security is usually the one to take the first hit in engineering trade-offs.
Reference: [2] <author> Denning, D.E., Lunt, T.F., Schell, R.R., Heckman, M., and Shockley, W.R. </author> <title> "A Multilevel Relational Data Model." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <month> 220-234 </month> <year> (1987). </year>
Reference-contexts: The one additional concept we need is polyinstantiation. Let us therefore begin by reviewing this concept. We assume the reader is familiar with basic relational notions and terminology. 2 POLYINSTANTIATION The concept of polyinstantiation was explicitly introduced by Denning et al <ref> [2] </ref>, although the roots of the idea can be traced back to Hinke-Schaefer [10] and perhaps earlier. Unfortunately SeaView researchers, in their formal articulation of this concept [2, 3, 4, 11], bundled in some unnecessary baggage [5] which has obscured the fundamental simplicity of this concept. <p> Unfortunately SeaView researchers, in their formal articulation of this concept <ref> [2, 3, 4, 11] </ref>, bundled in some unnecessary baggage [5] which has obscured the fundamental simplicity of this concept. Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12].
Reference: [3] <author> Denning, D.E., Lunt, T.F., Schell, R.R., Shockley, W.R. and Heckman, M. </author> <title> "The SeaView Security Model." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <month> 218-233 </month> <year> (1988). </year>
Reference-contexts: Unfortunately SeaView researchers, in their formal articulation of this concept <ref> [2, 3, 4, 11] </ref>, bundled in some unnecessary baggage [5] which has obscured the fundamental simplicity of this concept. Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12].
Reference: [4] <author> Denning D.E. </author> <title> "Lessons Learned from Modeling a Secure Multilevel Relational Database System." In Database Security: Status and Prospects, (Landwehr, </title> <editor> C.E., editor), </editor> <publisher> North-Holland, </publisher> <month> 35-43 </month> <year> (1988). </year>
Reference-contexts: Unfortunately SeaView researchers, in their formal articulation of this concept <ref> [2, 3, 4, 11] </ref>, bundled in some unnecessary baggage [5] which has obscured the fundamental simplicity of this concept. Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12].
Reference: [5] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "Polyinstantiation Integrity in Multilevel Relations." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1990, </year> <pages> 104-115. </pages>
Reference-contexts: Unfortunately SeaView researchers, in their formal articulation of this concept [2, 3, 4, 11], bundled in some unnecessary baggage <ref> [5] </ref> which has obscured the fundamental simplicity of this concept. Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12]. This has led to identification of some bizarre scenarios which have mistakenly been taken to be intrinsic to polyinstantiation [16, 17]. <p> This has led to identification of some bizarre scenarios which have mistakenly been taken to be intrinsic to polyinstantiation [16, 17]. Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in <ref> [5] </ref>. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in [5, 6, 7, 8, 14]. <p> Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in <ref> [5, 6, 7, 8, 14] </ref>. The main points of these papers are briefly summarized below. * The unnecessary baggage in SeaView's definition of polyinstantiation, viz. the multivalued dependency (mvd) component of polyinstantiation integrity (PI), should be dropped because it results in spurious tuples [5]. <p> The main points of these papers are briefly summarized below. * The unnecessary baggage in SeaView's definition of polyinstantiation, viz. the multivalued dependency (mvd) component of polyinstantiation integrity (PI), should be dropped because it results in spurious tuples <ref> [5] </ref>. Instead PI should be defined to consist only of the functional dependency (fd) component.
Reference: [6] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "A Formal Framework for Single Level Decomposition of Multilevel Relations." </title> <booktitle> IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, New Hampshire, </address> <month> June </month> <year> 1990, </year> <pages> 152-158. </pages>
Reference-contexts: Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in <ref> [5, 6, 7, 8, 14] </ref>. The main points of these papers are briefly summarized below. * The unnecessary baggage in SeaView's definition of polyinstantiation, viz. the multivalued dependency (mvd) component of polyinstantiation integrity (PI), should be dropped because it results in spurious tuples [5].
Reference: [7] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "Polyinstantiation Integrity in Multilevel Relations Revisited." IFIP WG11.3 Workshop on Database Security (1990). To be pub-lished as Database Security IV: Status and Prospects, </title> <editor> (Jajodia, S. and Landwehr, C.E., editors), </editor> <publisher> North-Holland. </publisher>
Reference-contexts: Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in <ref> [5, 6, 7, 8, 14] </ref>. The main points of these papers are briefly summarized below. * The unnecessary baggage in SeaView's definition of polyinstantiation, viz. the multivalued dependency (mvd) component of polyinstantiation integrity (PI), should be dropped because it results in spurious tuples [5].
Reference: [8] <author> Jajodia, S., Sandhu, R.S. and Sibley, E. </author> <title> "Update Semantics for Multilevel Relations." </title> <booktitle> Sixth Annual Computer Security Applications Conference, </booktitle> <address> Tucson, Arizona, </address> <month> December </month> <year> 1990, </year> <note> to appear. </note>
Reference-contexts: Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in <ref> [5, 6, 7, 8, 14] </ref>. The main points of these papers are briefly summarized below. * The unnecessary baggage in SeaView's definition of polyinstantiation, viz. the multivalued dependency (mvd) component of polyinstantiation integrity (PI), should be dropped because it results in spurious tuples [5]. <p> These additional constraints might include the one tuple per tuple-class concept of [9, 14], the interpreted propagation notion of <ref> [8] </ref>, the original SeaView mvd-PI [11], the more recent dynamic mvd-PI of [12], and so on. These should not however be embedded in the data model and imposed uniformly on every application. <p> Moreover, an update should result in polyinstantiation only when absolutely required for closing downward signaling channels (or optionally for deliberately establishing cover stories) and the fewest possible tuples should be introduced in such cases. The minimal propagation semantics given in <ref> [8] </ref> achieves these objectives. Other update semantics such as the interpreted propagation semantics of [8], one tuple per tuple-class of [9, 14], the original SeaView mvd-PI [11] and the dynamic mvd-PI of [12] should be made available as options to be used by the Database Administrator; but should certainly not be <p> The minimal propagation semantics given in <ref> [8] </ref> achieves these objectives. Other update semantics such as the interpreted propagation semantics of [8], one tuple per tuple-class of [9, 14], the original SeaView mvd-PI [11] and the dynamic mvd-PI of [12] should be made available as options to be used by the Database Administrator; but should certainly not be embedded as a fundamental property of a data model.
Reference: [9] <author> Haigh, J.T., O'Brien, </author> <title> R.C. and Thomsen, D.J. "The LDV Secure Relational DBMS Model." IFIP WG11.3 Workshop on Database Security (1990). To be pub-lished as Database Security IV: Status and Prospects, </title> <editor> (Jajodia, S. and Landwehr, C.E., editors), </editor> <publisher> North-Holland. </publisher>
Reference-contexts: These additional constraints might include the one tuple per tuple-class concept of <ref> [9, 14] </ref>, the interpreted propagation notion of [8], the original SeaView mvd-PI [11], the more recent dynamic mvd-PI of [12], and so on. These should not however be embedded in the data model and imposed uniformly on every application. <p> The minimal propagation semantics given in [8] achieves these objectives. Other update semantics such as the interpreted propagation semantics of [8], one tuple per tuple-class of <ref> [9, 14] </ref>, the original SeaView mvd-PI [11] and the dynamic mvd-PI of [12] should be made available as options to be used by the Database Administrator; but should certainly not be embedded as a fundamental property of a data model.
Reference: [10] <author> Hinke T.H. and Schaefer M. </author> <title> "Secure Data Management System." </title> <type> Technical Report RADC-TR-75-266, </type> <institution> System Development Corporation (1975). </institution>
Reference-contexts: Let us therefore begin by reviewing this concept. We assume the reader is familiar with basic relational notions and terminology. 2 POLYINSTANTIATION The concept of polyinstantiation was explicitly introduced by Denning et al [2], although the roots of the idea can be traced back to Hinke-Schaefer <ref> [10] </ref> and perhaps earlier. Unfortunately SeaView researchers, in their formal articulation of this concept [2, 3, 4, 11], bundled in some unnecessary baggage [5] which has obscured the fundamental simplicity of this concept. Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12].
Reference: [11] <author> Lunt, T.F., Denning, D.E., Schell, R.R., Heckman, M. and Shockley, W.R. </author> <title> "The SeaView Security Model." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(6) </volume> <month> 593-607 </month> <year> (1990). </year>
Reference-contexts: Unfortunately SeaView researchers, in their formal articulation of this concept <ref> [2, 3, 4, 11] </ref>, bundled in some unnecessary baggage [5] which has obscured the fundamental simplicity of this concept. Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12]. <p> These additional constraints might include the one tuple per tuple-class concept of [9, 14], the interpreted propagation notion of [8], the original SeaView mvd-PI <ref> [11] </ref>, the more recent dynamic mvd-PI of [12], and so on. These should not however be embedded in the data model and imposed uniformly on every application. <p> The minimal propagation semantics given in [8] achieves these objectives. Other update semantics such as the interpreted propagation semantics of [8], one tuple per tuple-class of [9, 14], the original SeaView mvd-PI <ref> [11] </ref> and the dynamic mvd-PI of [12] should be made available as options to be used by the Database Administrator; but should certainly not be embedded as a fundamental property of a data model.
Reference: [12] <author> Lunt, T. and Hsieh, D. </author> <title> "Update Semantics for a Multilevel Relational Database." IFIP WG11.3 Workshop on Database Security (1990). To be published as Database Security IV: Status and Prospects, </title> <editor> (Jajodia, S. and Landwehr, C.E., editors), </editor> <publisher> North-Holland. </publisher>
Reference-contexts: Unfortunately SeaView researchers, in their formal articulation of this concept [2, 3, 4, 11], bundled in some unnecessary baggage [5] which has obscured the fundamental simplicity of this concept. Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding <ref> [12] </ref>. This has led to identification of some bizarre scenarios which have mistakenly been taken to be intrinsic to polyinstantiation [16, 17]. Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. <p> These additional constraints might include the one tuple per tuple-class concept of [9, 14], the interpreted propagation notion of [8], the original SeaView mvd-PI [11], the more recent dynamic mvd-PI of <ref> [12] </ref>, and so on. These should not however be embedded in the data model and imposed uniformly on every application. <p> The minimal propagation semantics given in [8] achieves these objectives. Other update semantics such as the interpreted propagation semantics of [8], one tuple per tuple-class of [9, 14], the original SeaView mvd-PI [11] and the dynamic mvd-PI of <ref> [12] </ref> should be made available as options to be used by the Database Administrator; but should certainly not be embedded as a fundamental property of a data model.
Reference: [13] <author> Sandhu, </author> <title> R.S. "Mandatory Controls for Database Integrity." </title> <booktitle> Proceedings of the Third IFIP WG 11.3 Workshop on Database Security, </booktitle> <address> Monterey, California, </address> <month> September </month> <year> 1989. </year> <title> Published as Database Security III: Status and Prospects, (Spooner, D.L. </title> <editor> and Landwehr, C.E., editors), </editor> <publisher> North-Holland, </publisher> <pages> pages 143-150. </pages>
Reference-contexts: Conventional single-level DBMSs have addressed the integrity problem using concepts such as well-formed transactions, least privilege and strong discretionary access controls. Although existing systems have major shortcomings <ref> [13, 15] </ref> they nevertheless have a number of mechanisms which are used to build integrity into one's applications. Our use of restricted does however have a special characteristic which deserves mention. Once a field has become restricted there must be some way it can be made unrestricted in future.
Reference: [14] <author> Sandhu, R.S., Jajodia, S. and Lunt, T. </author> <title> "A New Polyinstantiation Integrity Constraint for Multilevel Relations." </title> <booktitle> IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, New Hampshire, </address> <month> June </month> <year> 1990, </year> <pages> 159-165. </pages>
Reference-contexts: Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in <ref> [5, 6, 7, 8, 14] </ref>. The main points of these papers are briefly summarized below. * The unnecessary baggage in SeaView's definition of polyinstantiation, viz. the multivalued dependency (mvd) component of polyinstantiation integrity (PI), should be dropped because it results in spurious tuples [5]. <p> These additional constraints might include the one tuple per tuple-class concept of <ref> [9, 14] </ref>, the interpreted propagation notion of [8], the original SeaView mvd-PI [11], the more recent dynamic mvd-PI of [12], and so on. These should not however be embedded in the data model and imposed uniformly on every application. <p> The minimal propagation semantics given in [8] achieves these objectives. Other update semantics such as the interpreted propagation semantics of [8], one tuple per tuple-class of <ref> [9, 14] </ref>, the original SeaView mvd-PI [11] and the dynamic mvd-PI of [12] should be made available as options to be used by the Database Administrator; but should certainly not be embedded as a fundamental property of a data model.
Reference: [15] <author> Sandhu, R.S. and Jajodia, S. </author> <title> "Integrity Mechanisms in Database Management Systems." </title> <booktitle> 13th NIST-NCSC National Computer Security Conference, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1990, </year> <pages> 526-540. </pages>
Reference-contexts: Conventional single-level DBMSs have addressed the integrity problem using concepts such as well-formed transactions, least privilege and strong discretionary access controls. Although existing systems have major shortcomings <ref> [13, 15] </ref> they nevertheless have a number of mechanisms which are used to build integrity into one's applications. Our use of restricted does however have a special characteristic which deserves mention. Once a field has become restricted there must be some way it can be made unrestricted in future.
Reference: [16] <author> Wiseman, </author> <title> S.R. "On the Problem of Security in Data Bases." In Database Security III: Status and Prospects, (Spooner, D.L. </title> <editor> and Landwehr, C.E., editors), </editor> <publisher> North-Holland, </publisher> <pages> pages 143-150 (1990). </pages> <note> Also available as Royal Signal and Radar Establishment, U.K., Memo 4263. </note>
Reference-contexts: This caveat is inescapable and absolute. We must reject outright "solutions" which tolerate signaling channels. Solutions with signaling channels, such as proposed in <ref> [1, 16] </ref>, may well be acceptable as an engineering compromise in particular situations. But they are clearly not acceptable as general-purpose solutions. This point needs to be emphasized because security is usually the one to take the first hit in engineering trade-offs. <p> Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12]. This has led to identification of some bizarre scenarios which have mistakenly been taken to be intrinsic to polyinstantiation <ref> [16, 17] </ref>. Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in [5, 6, 7, 8, 14].
Reference: [17] <author> Wood, A.W. </author> <title> "The SWORD Model of Multilevel Secure Databases." Royal Signal and Radar Establishment, U.K., </title> <type> Report 90008, </type> <month> June </month> <year> 1990. </year>
Reference-contexts: Another unfortunate aspect of SeaView is the lack of a formal update semantics, recent attempts notwithstanding [12]. This has led to identification of some bizarre scenarios which have mistakenly been taken to be intrinsic to polyinstantiation <ref> [16, 17] </ref>. Fortunately the security community's understanding of polyinstantiation has advanced dramatically since our initial identification of the shortcomings of SeaView's formal definitions in [5]. Our contributions to this progress have been described at considerable length and with the utmost formalism and rigor in [5, 6, 7, 8, 14].
References-found: 17

