URL: http://www.cs.utexas.edu/users/ashis/NOSDAV96.ps
Refering-URL: http://www.cs.utexas.edu/users/ashis/papers.html
Root-URL: 
Email: E-mail: fsriram,vin,ashisg@cs.utexas.edu,  
Phone: Telephone: (512) 471-9732, Fax: (512) 471-8885  
Title: Comparative Evaluation of Server-push and Client-pull Architectures for Multimedia Servers  
Author: Sriram S. Rao Harrick M. Vin Ashis Tarafdar 
Web: URL: http://www.cs.utexas.edu/users/dmcl  
Address: Taylor Hall 2.124, Austin, Texas 78712-1188, USA  
Affiliation: Distributed Multimedia Computing Laboratory Department of Computer Sciences, University of Texas at Austin  
Abstract: Realizing a wide range of multimedia services will require the development of high performance, integrated multimedia servers (or file systems) which can efficiently manage the storage, access, and transmission of audio, video, and textual objects. Traditionally storage servers have employed fundamentally different mechanisms for managing the storage and access of each of these objects. Whereas most conventional text file systems employ a client-pull architecture, most video servers proposed in the literature employ a server-push architecture. Hence, the most fundamental question is: what is an appropriate architecture for integrated multimedia servers? In this paper, we take a step towards addressing this question by outlining the qualitative and quantitative differences between the server-push and client-pull architectures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Anderson, Y. Osawa, and R. Govindan. </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: On the other hand, due to the sequential and periodic nature of digital video playback, most video servers proposed in the literature service client requests by proceeding in terms of periodic rounds <ref> [1, 2, 5, 8] </ref>. During each round, the server retrieves and transmits a fixed number of media units (i.e., frames) for each client. The retrieval and transmission proceeds continuously, without any explicit requests from the clients, until a request to terminate the playback is received by the server.
Reference: [2] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of Delay Sensitive Multimedia Data Storage and Retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: On the other hand, due to the sequential and periodic nature of digital video playback, most video servers proposed in the literature service client requests by proceeding in terms of periodic rounds <ref> [1, 2, 5, 8] </ref>. During each round, the server retrieves and transmits a fixed number of media units (i.e., frames) for each client. The retrieval and transmission proceeds continuously, without any explicit requests from the clients, until a request to terminate the playback is received by the server.
Reference: [3] <author> P. Goyal and H.M. Vin. </author> <title> Network Algorithms and Protocol for Multimedia Servers. </title> <booktitle> In Proceedings of IEEE INFOCOM96, </booktitle> <address> San Francicso, CA, </address> <pages> pages 1371-1379, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: it possible for the server to take corrective actions (e.g., read-ahead blocks from the bottleneck disks in prior rounds, reduce the resolution level of each object being accessed, etc.) to eliminate the transient overload, while ensuring that the QoS requirements of the none of the clients being serviced are violated <ref> [3, 10] </ref>.
Reference: [4] <author> M. K. McKusick, W. N. Joy, S. J. Leffler, and R. S. Fabry. </author> <title> A Fast File System for UNIX. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 181-197, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: server retrieves information from disks fl This research was supported in part by IBM, Intel, the National Science Foundation (Research Initiation Award CCR-9409666), NASA, Mitsubishi Electric Research Laboratories (MERL), Sun Microsystems Inc., and the University of Texas at Austin. only in response to an explicit read request from a client <ref> [4] </ref>. Observe that, although such servers generally employ some prefetching and caching techniques to improve the performance of retrieval, due to the aperiodic nature of accesses, requests for retrieving information from the disk subsystem are triggered only in response to explicit access requests from the client.
Reference: [5] <author> P. Venkat Rangan and H.M. Vin. </author> <title> Designing File Systems for Digital Video and Audio. </title> <booktitle> In Proceedings of the 13th Symposium on Operating Systems Principles (SOSP'91), Operating Systems Review, </booktitle> <volume> Vol. 25, No. 5, </volume> <pages> pages 81-94, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: On the other hand, due to the sequential and periodic nature of digital video playback, most video servers proposed in the literature service client requests by proceeding in terms of periodic rounds <ref> [1, 2, 5, 8] </ref>. During each round, the server retrieves and transmits a fixed number of media units (i.e., frames) for each client. The retrieval and transmission proceeds continuously, without any explicit requests from the clients, until a request to terminate the playback is received by the server.
Reference: [6] <author> A.L. Narasimha Reddy and J. Wyllie. </author> <title> Disk Scheduling in Multimedia I/O System. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 225-234, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: On the contrary, a server employing the client-pull architecture services client requests in the order received, and hence, incurs high seek time and rotational latency overhead. Such a server can improve the throughput by employing disk scheduling techniques such as SCAN-EDF <ref> [6] </ref>.
Reference: [7] <author> S.S.Rao, H.M.Vin, and A. Tarafdar. </author> <title> Comparative Evaluation of Server-push and Client-pull Architectures for Multimedia Servers. </title> <type> Technical report, </type> <institution> Department of Computer Sciences, University of Texas, Austin, </institution> <year> 1996. </year>
Reference-contexts: However, our experiments have demonstrated that, even in such a scenario, the number of clients that can be supported by the client-pull architecture were 5% to 20% (for block sizes of 256KB and 32KB, respectively) lower as compared to the corresponding server-push architecture <ref> [7] </ref>. * Initiation latency: We define initiation latency to be the difference between the time at which playback is initiated and the time at which the request is trans-mitted by the client. <p> In fact, our experiments have demonstrated that, by employing such a scheme, the initiation latency of a server-push architecture can be brought within 10ms of the client-pull architecture <ref> [7] </ref>. * Buffer space requirement: Since round-based scheduling synchronizes the accesses of blocks from each disk, and hence requires simultaneous buffer allocations, the server-push architecture imposes higher buffer space requirements at the server as compared to its client-pull counterpart. <p> Assuming the same network transmission protocol is used in either architecture, while servicing 110 clients, the difference in buffer requirement at the server end between the two architectures was about 2MB which, given the current memory prices, is insignificant <ref> [7] </ref>. The buffer space requirement at the client site, on the other hand, is a function of the amount of information read-ahead by the client prior to initiating playback. Our experiments have demonstrated that, given similar load conditions, the buffer space requirement of the server-push architecture is higher by 500KB [7]. <p> <ref> [7] </ref>. The buffer space requirement at the client site, on the other hand, is a function of the amount of information read-ahead by the client prior to initiating playback. Our experiments have demonstrated that, given similar load conditions, the buffer space requirement of the server-push architecture is higher by 500KB [7]. 5 Concluding Remarks Realizing a wide range of multimedia services will require the development of high performance, integrated multimedia servers (or file systems) which can efficiently manage the storage, access, and transmission of audio, video, and textual objects.
Reference: [8] <author> F.A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming RAID: A Disk Storage System for Video and Audio Files. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 393-400, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: On the other hand, due to the sequential and periodic nature of digital video playback, most video servers proposed in the literature service client requests by proceeding in terms of periodic rounds <ref> [1, 2, 5, 8] </ref>. During each round, the server retrieves and transmits a fixed number of media units (i.e., frames) for each client. The retrieval and transmission proceeds continuously, without any explicit requests from the clients, until a request to terminate the playback is received by the server.
Reference: [9] <author> H. M. Vin, A. Goyal, and P. Goyal. </author> <title> Algorithms for Designing Large-Scale Multimedia Servers. </title> <journal> Computer Communications, </journal> <volume> 18(3) </volume> <pages> 192-203, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: on disk in terms of media blocks (each containing several media units), the server can: (1) exploit the sequentiality of video playback to determine the set of media blocks to be accessed in a round; (2) batch all of these requests; and (3) employ disk scheduling algorithms (e.g., SCAN, greedy <ref> [9] </ref>) to minimize the seek time and rotational latency incurred during the retrieval. Determination of the round duration R is governed by the following tradeoffs. Increasing the duration of the round increases the number of media units, and hence the number of media blocks, accessed during a round.
Reference: [10] <author> H.M. Vin, S.S. Rao, and P. Goyal. </author> <title> Optimizing the Placement of Multimedia Objects on Disk Arrays. </title> <booktitle> In Proceedings of the Second IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Washington, D.C., </address> <pages> pages 158-165, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: it possible for the server to take corrective actions (e.g., read-ahead blocks from the bottleneck disks in prior rounds, reduce the resolution level of each object being accessed, etc.) to eliminate the transient overload, while ensuring that the QoS requirements of the none of the clients being serviced are violated <ref> [3, 10] </ref>.
References-found: 10

