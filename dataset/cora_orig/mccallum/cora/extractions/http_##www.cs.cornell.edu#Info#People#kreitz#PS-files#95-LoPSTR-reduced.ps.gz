URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/95-LoPSTR-reduced.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/95-LoPSTR.html
Root-URL: 
Email: fkreitz,jeotten,stephg@intellektik.informatik.th-darmstadt.de  
Title: Guiding Program Development Systems by a Connection Based Proof Strategy  
Author: Christoph Kreitz Jens Otten Stephan Schmitt 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: Fachgebiet Intellektik, Fachbereich Informatik Technische Hochschule Darmstadt  
Note: M. Proietti, ed., Proc. Fifth International Workshop on Logic Program Synthesis and Transformation, LNCS1048, pp. 137-151, Springer Verlag, 1996.  
Abstract: We present an automated proof method for constructive logic based on Wallen's matrix characterization for intuitionistic validity. The proof search strategy extends Bibel's connection method for classical predicate logic. It generates a matrix proof which will then be transformed into a proof within a standard sequent calculus. Thus we can use an efficient proof method to guide the development of constructive proofs in interactive proof/program development systems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> E. W. Beth. </editor> <booktitle> The foundations of mathematics. </booktitle> <publisher> North-Holland, </publisher> <year> 1959. </year>
Reference-contexts: In figure 2 we have marked fi-nodes by circles and labels fi 1 ; : : : fi 4 . Nodes of other types remain unmarked. 3 The assignment of types to nodes follows the laws of the tableaux calculus <ref> [1] </ref>. 140 3 The Connection Method for Constructive Logics After constructing the augmented formula tree a proof search will focus on `connections' between atomic formulae which can be shown to be `complementary'. According to the characterization of validity all `paths' through the formula tree must contain such a connection.
Reference: 2. <author> W. Bibel, S. Br uning, U. Egly, T. Rath. Komet. </author> <booktitle> In Proceedings of the 12 th CADE, LNAI 814, </booktitle> <pages> pp. 783-787. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A formal proof, however, turns out to be rather tedious since existing tactics dealing with predicate logic are far from being complete. On the other hand, theorem provers like Setheo [9], Otter [20], or KoMeT <ref> [2] </ref> have demonstrated that formal reasoning in classical predicate logic can be automated sufficiently well. It would therefore be desirable to integrate techniques from automated theorem proving into already existing program synthesis tools. <p> As a starting point we have used a proof procedure called the connection method [3, 4] which has successfully been realized in theorem provers for classical predicate logic like Setheo [9] and KoMeT <ref> [2] </ref>. It is based on a characterization for the classical validity of logical formulae which recently has been extended by Wallen [19] into a matrix characterization of intuitionistic validity. <p> Besides exploring these possibilities our future work will focus on techniques for improving the efficiency of the proof search like the preprocessing steps used in Setheo [9] and KoMeT <ref> [2] </ref> and the use of typing information during unification. Furthermore we shall investigate how inductive proof methods can be integrated into program synthesis systems by the same technology.
Reference: 3. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Jour. of the ACM, </journal> <volume> 28, </volume> <pages> p. 633-645, </pages> <year> 1981. </year>
Reference-contexts: We have developed a complete proof procedure for constructive first-order logic and a technique for integrating it into a program development system based on a sequent calculus. As a starting point we have used a proof procedure called the connection method <ref> [3, 4] </ref> which has successfully been realized in theorem provers for classical predicate logic like Setheo [9] and KoMeT [2]. It is based on a characterization for the classical validity of logical formulae which recently has been extended by Wallen [19] into a matrix characterization of intuitionistic validity. <p> and only if there is a multiplicity , an admissible combined substitution := ( Q ; J ), a set of connections which are complementary under such that every path through the formula F contains a connection from this set. 3.2 Connection Based Proof Search In Bibel's classical connection method <ref> [3, 4] </ref> the search for a matrix proof of a given formula proceeds by considering connections between atomic formulae whose sub-terms can be unified. The selection of appropriate connections is guided by the active path and the set of open goals. <p> The resulting LJ ? -proof 12 5 Conclusion We have developed an automated proof procedure for intuitionistic logic and a technique for integrating it into proof/program development systems based on the sequent calculus. For this purpose we have extended Bibel's connection method for classical predicate logic <ref> [3, 4] </ref> into a procedure operating on formulae in non-normal form which is complete for first-order intuitionistic logic and developed an efficient algorithm for the unification of prefix-strings.
Reference: 4. <author> W. Bibel. </author> <title> Automated Theorem Proving. </title> <publisher> Vieweg Verlag, </publisher> <year> 1987. </year>
Reference-contexts: We have developed a complete proof procedure for constructive first-order logic and a technique for integrating it into a program development system based on a sequent calculus. As a starting point we have used a proof procedure called the connection method <ref> [3, 4] </ref> which has successfully been realized in theorem provers for classical predicate logic like Setheo [9] and KoMeT [2]. It is based on a characterization for the classical validity of logical formulae which recently has been extended by Wallen [19] into a matrix characterization of intuitionistic validity. <p> and only if there is a multiplicity , an admissible combined substitution := ( Q ; J ), a set of connections which are complementary under such that every path through the formula F contains a connection from this set. 3.2 Connection Based Proof Search In Bibel's classical connection method <ref> [3, 4] </ref> the search for a matrix proof of a given formula proceeds by considering connections between atomic formulae whose sub-terms can be unified. The selection of appropriate connections is guided by the active path and the set of open goals. <p> The resulting LJ ? -proof 12 5 Conclusion We have developed an automated proof procedure for intuitionistic logic and a technique for integrating it into proof/program development systems based on the sequent calculus. For this purpose we have extended Bibel's connection method for classical predicate logic <ref> [3, 4] </ref> into a procedure operating on formulae in non-normal form which is complete for first-order intuitionistic logic and developed an efficient algorithm for the unification of prefix-strings.
Reference: 5. <author> A. Bundy, F. van Harmelen, C. Horn, A. Smaill. </author> <title> The Oyster-Clam system. </title> <booktitle> In Proceedings of the 10 th CADE, </booktitle> <volume> LNCS 449, </volume> <pages> pp. 647-648. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Therefore computer systems which support the development of constructive proofs and the extraction of programs from proofs are very important for program synthesis. Such systems (e.g. NuPRL [6], Oyster <ref> [5] </ref>, Isabelle [14], LEGO [15]) are usually designed as interactive proof editors supported by a tactic mechanism for programming proofs on the meta-level. Most of them are based on a very expressive constructive theory.
Reference: 6. <author> R. L. Constable et. al. </author> <title> Implementing Mathematics with the NuPRL proof development system. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: Therefore computer systems which support the development of constructive proofs and the extraction of programs from proofs are very important for program synthesis. Such systems (e.g. NuPRL <ref> [6] </ref>, Oyster [5], Isabelle [14], LEGO [15]) are usually designed as interactive proof editors supported by a tactic mechanism for programming proofs on the meta-level. Most of them are based on a very expressive constructive theory. <p> We have considerably extended the connection method according to this characterization and developed a method for converting matrix proofs into sequent proofs. The combined procedure, whose structure is depicted in figure 1, is currently being implemented as a proof tactic of the NuPRL proof development system <ref> [6] </ref> and will thus support the efficient construction of proofs and verified routine programs within a rich constructive theory. It proceeds in three steps. NuPRL Sequent LJ (+ :: : ) Formula tree position-labels, polarities, ... <p> Each rule of LJ ? can be simulated by applying a fixed set of LJ-rules (including the cut). Using the proof of theorem 3 we have embedded the calculus LJ ? into the NuPRL proof development system <ref> [6] </ref> by simulating its rules via proof tactics guiding the application of LJ-rules. Furthermore we have implemented a procedure transforming LJ NS -proofs into LJ ? -proofs which is comparably simple (in contrast to the one presented in [18]) and keeps the size of the resulting proof small. <p> supported proof development systems (i.e. safety, flexibility, and expressivity of the underlying theory) and thus extends the deductive power of these systems in a safe and efficient way. 12 For better overview we omit the axiom rules 150 Although we have based our implementation on the NuPRL proof development system <ref> [6] </ref> our methodology can also be used to guide other systems based on natural deduction or sequent calculi. Due to the similarity of intuitionistic logic and modal logics it could also be extended to automate reasoning in these logics.
Reference: 7. <author> M. C. </author> <title> Fitting. Intuitionistic logic, model theory and forcing. </title> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: While originally we were interested only in constructing a matrix proof which should be translated into a sequent proof afterwards our investigations have shown that it is helpful to exploit the close relation between a matrix proof and a proof in Fitting's <ref> [7] </ref> sequent calculus LJ NS 1 and to consider the structure of the corresponding sequent proof already during the proof search and design our proof procedure as a hybrid method combining the connection method with the sequent calculus. <p> This characterization also applies to predicate logic if the connected formulae can be shown to be complementary, i.e. if all the terms contained in connected formulae can be made identical by some (first-order /quantifier) substitution Q . In sequent calculi like Gentzen's LK and LJ [8] or Fitting's calculi <ref> [7] </ref> the difference between classical and intuitionistic reasoning is expressed by certain restrictions on the intuitionistic rules. If rules are applied in a top down fashion these restrictions cause formulae to be deleted from a sequent. <p> Fortunately, our proof search procedure described in the previous section already constructs a sequent proof in Fitting's <ref> [7] </ref> non-standard sequent calculus LJ NS . In contrast to standard sequent calculi like Gentzen's LJ [8] which are used in program development systems it allows the occurrence of more than one formula in the succedent of a sequent.
Reference: 8. <author> G. </author> <title> Gentzen. Untersuchungen uber das logische Schlieen. </title> <journal> Mathematische Zeitschrift, </journal> <volume> 39 </volume> <pages> 176-210, 405-431, </pages> <year> 1935. </year>
Reference-contexts: Most of them are based on a very expressive constructive theory. To allow a proper interaction between the system and its users this theory is usually formulated as natural deduction or sequent calculus and includes a calculus for predicate logic similar to Gentzen's <ref> [8] </ref> calculi for intuitionistic logic. It has been demonstrated that these systems can be used quite successfully, if properly guided, but the degree of automatic support is very weak. A user often has to deal with subproblems which appear trivial to him since they depend solely on predicate logic. <p> This characterization also applies to predicate logic if the connected formulae can be shown to be complementary, i.e. if all the terms contained in connected formulae can be made identical by some (first-order /quantifier) substitution Q . In sequent calculi like Gentzen's LK and LJ <ref> [8] </ref> or Fitting's calculi [7] the difference between classical and intuitionistic reasoning is expressed by certain restrictions on the intuitionistic rules. If rules are applied in a top down fashion these restrictions cause formulae to be deleted from a sequent. <p> Fortunately, our proof search procedure described in the previous section already constructs a sequent proof in Fitting's [7] non-standard sequent calculus LJ NS . In contrast to standard sequent calculi like Gentzen's LJ <ref> [8] </ref> which are used in program development systems it allows the occurrence of more than one formula in the succedent of a sequent. Thus for integrating our procedure into an program development system we only have to convert this LJ NS -proof into a proof within a standard sequent calculus.
Reference: 9. <author> R. Letz, J. Schumann, S. Bayerl, W. Bibel. </author> <title> Setheo: A high-performance theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8 </volume> <pages> 183-212, </pages> <year> 1992. </year>
Reference-contexts: A formal proof, however, turns out to be rather tedious since existing tactics dealing with predicate logic are far from being complete. On the other hand, theorem provers like Setheo <ref> [9] </ref>, Otter [20], or KoMeT [2] have demonstrated that formal reasoning in classical predicate logic can be automated sufficiently well. It would therefore be desirable to integrate techniques from automated theorem proving into already existing program synthesis tools. <p> As a starting point we have used a proof procedure called the connection method [3, 4] which has successfully been realized in theorem provers for classical predicate logic like Setheo <ref> [9] </ref> and KoMeT [2]. It is based on a characterization for the classical validity of logical formulae which recently has been extended by Wallen [19] into a matrix characterization of intuitionistic validity. <p> Besides exploring these possibilities our future work will focus on techniques for improving the efficiency of the proof search like the preprocessing steps used in Setheo <ref> [9] </ref> and KoMeT [2] and the use of typing information during unification. Furthermore we shall investigate how inductive proof methods can be integrated into program synthesis systems by the same technology.
Reference: 10. <author> H. J. Ohlbach. </author> <title> A resolution calculus for modal logics. </title> <type> Ph.D. Thesis (SEKI Report SR-88-08), </type> <institution> Universitat Kaiserslautern, </institution> <year> 1988. </year>
Reference-contexts: fA 2 na 8 a 17 D; BnDa 3 A 4 F; A 6 nF a 13 a 15 g The simple procedure illustrated above does in fact compute all the most general unifiers for two prefix-strings in a way which is considerably more efficient than the one presented in <ref> [10] </ref>.
Reference: 11. <author> J. Otten, C. </author> <title> Kreitz. A connection based proof method for intuitionistic logic. </title> <booktitle> In Proceedings of the 4 th Workshop on Theorem Proving with Analytic Tableaux and Related Methods, LNAI 918, </booktitle> <pages> pp. 122-137, </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Both the first-order and the intuitionistic substitution can be computed by unification algorithms (see section 3.3) and put restrictions on the order of rule-applications (see [19] or <ref> [11] </ref>). J (B) = b 1 :::b n for instance, means that all the special positions b 1 :::b n must have been reduced before position B and after its predecessor. Otherwise certain sub-formulae which are necessary assumptions for applying the sequent rule corresponding to B would not be available. <p> This structure provides valuable informations about the reduction ordering to be constructed and helps selecting appropriate connections guiding the search process. Furthermore, it allows to consider local substitutions (see <ref> [11, section 5] </ref>) instead of global ones, i.e. substitutions which can be applied independently within sub-proofs of a sequent proof.
Reference: 12. <author> J. Otten, C. </author> <title> Kreitz. T-String-Unification: Unifying Prefixes in Non-Classical Proof Methods. </title> <type> Report AIDA-95-09, </type> <institution> FG Intellektik, TH Darmstadt, </institution> <year> 1995. </year>
Reference-contexts: A complete description of the unification algorithm and its properties can be found in <ref> [12, 13] </ref>. 4 Conversion into Standard Sequent Proofs While the connection method is very efficient for finding proofs according to the matrix characterization of validity its results cannot directly be used for the construction of programs from the proof.
Reference: 13. <author> J. Otten. </author> <title> Ein konnektionenorientiertes Beweisverfahren fur intuitionistische Logik. </title> <type> Master's thesis, </type> <institution> TH Darmstadt, </institution> <year> 1995. </year>
Reference-contexts: The search is guided by the active fi-path and the set of open subgoals in the partial sequent proof. These notions extend the original concepts mentioned above and are roughly defined as follows (see <ref> [13] </ref> for precise definitions). Definition 2. 1. The fi-prefix of an atom A is the set of all (labels of) fi-branches that dominate A in the formula tree. 2. <p> The resulting sequent proof is presented in figure 6. A full description of the complete proof search strategy for first-order intuitionistic logic which we just have illustrated is rather complex and shall therefore not be presented in this paper. Details can be found in <ref> [13] </ref>. 144 g h * * * ) -intro (a 0 ) ) -intro (a 8 ) ^ -elim (unmarked) ^ -intro (fi 4 ) :-intro (a 17 ) axiom (A 1 ; a 16 ): S 1 ` S 0 * ) -elim (fi 1 ) * :-intro (a 3 <p> A complete description of the unification algorithm and its properties can be found in <ref> [12, 13] </ref>. 4 Conversion into Standard Sequent Proofs While the connection method is very efficient for finding proofs according to the matrix characterization of validity its results cannot directly be used for the construction of programs from the proof.
Reference: 14. <author> L. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <editor> In Piergiorgio Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pp. 361-386. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Therefore computer systems which support the development of constructive proofs and the extraction of programs from proofs are very important for program synthesis. Such systems (e.g. NuPRL [6], Oyster [5], Isabelle <ref> [14] </ref>, LEGO [15]) are usually designed as interactive proof editors supported by a tactic mechanism for programming proofs on the meta-level. Most of them are based on a very expressive constructive theory.
Reference: 15. <author> R. Pollack. </author> <title> The theory of LEGO a proof checker for the extendend calculus of constructions. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1994. </year>
Reference-contexts: Therefore computer systems which support the development of constructive proofs and the extraction of programs from proofs are very important for program synthesis. Such systems (e.g. NuPRL [6], Oyster [5], Isabelle [14], LEGO <ref> [15] </ref>) are usually designed as interactive proof editors supported by a tactic mechanism for programming proofs on the meta-level. Most of them are based on a very expressive constructive theory.
Reference: 16. <author> S. Schmitt, C. </author> <title> Kreitz. On transforming intuitionistic matrix proofs into standard-sequent proofs. </title> <booktitle> In Proceedings of the 4 th Workshop on Theorem Proving with Analytic Tableaux and Related Methods, LNAI 918, </booktitle> <pages> pp. 106-121, </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Therefore it is necessary to convert matrix proofs back into sequent proofs which are closer to 'natural' mathematical reasoning. This is comparably easy for classical propositional logic but becomes rather difficult for predicate or intuitionistic logic (see e.g. <ref> [16, section 3] </ref>) since the reduction ordering induced by Q and J has to be taken into account. Fortunately, our proof search procedure described in the previous section already constructs a sequent proof in Fitting's [7] non-standard sequent calculus LJ NS . <p> Consider, for instance, the following application of the ) -elim rule in LJ NS : 8x:A (x) _ B (x) ` 9y:A (y); 9x:B (x) 8x:A (x) _ B (x); 9z::A (z) ` 9x:B (x) In the left subgoal two succedent formulae were generated. We have shown in <ref> [16] </ref> that these two succedent formulae cannot be simulated within an LJ-proof. Consequently we will have fundamental differences in the resulting proof structures.
Reference: 17. <author> S. Schmitt. </author> <title> Ein erweiterter intuitionistischer Sequenzenkalkul und dessen Anwendung im intuitionistischen Konnektionsbeweisen. </title> <type> Master's thesis, </type> <institution> TH Darmstadt, </institution> <year> 1994. </year>
Reference-contexts: Example rules of LJ and LJ NS and the simulation of LJ NS -rules in LJ ? . In <ref> [17, chapter 2] </ref> we have shown that because of the strong differences between the rules of the calculi LJ NS and LJ it is not possible to transform every LJ NS - proof into a corresponding LJ-proof without changing the structural information contained in the proof. <p> The only structural rule _-change A i ensures that it is sufficient to reduce only the leftmost formula of the succedent disjunction S . For detailed presentation of the development of these rules and its correctness we refer again to <ref> [17] </ref>. ` A i _ ( S nnA i ) _-change A i ; :A ` A _ ( S ) :(_)-elim ; A ) B ` A _ ( S ) ; B ` S ) (_)-elim ` A _ ( S ) ` B _ ( S ) ^(_)-intro <p> The transformation procedure LJ NS 7! LJ ? . The concept of proof structure, the calculus LJ ? , and the transformation of LJ NS -proofs into LJ ? -proofs have been investigated in detail in <ref> [17, chapter 2] </ref>. Altogether we have proven the following properties. Theorem 3. 1. The calculus LJ ? is a standard calculus which is sound and complete. 2. Each LJ NS -proof can be represented in LJ ? in a structure-preserving way. 3.
Reference: 18. <author> G. Takeuti. </author> <title> Proof Theory. </title> <publisher> North-Holland, </publisher> <year> 1975. </year>
Reference-contexts: Furthermore we have implemented a procedure transforming LJ NS -proofs into LJ ? -proofs which is comparably simple (in contrast to the one presented in <ref> [18] </ref>) and keeps the size of the resulting proof small.
Reference: 19. <author> L. Wallen. </author> <title> Automated deduction in nonclassical logic. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: It is based on a characterization for the classical validity of logical formulae which recently has been extended by Wallen <ref> [19] </ref> into a matrix characterization of intuitionistic validity. We have considerably extended the connection method according to this characterization and developed a method for converting matrix proofs into sequent proofs. <p> In addition to that it is associated with a polarity, a position label, and a type label. These informations are necessary for guiding the proof search and can be computed while constructing the formula tree. 1 When developing his matrix characterization for intuitionistic validity Wallen <ref> [19] </ref> has used Fitting's formulation of the sequent calculus as theoretical framework to prove his characterization theorems. 2 Some of the assumptions declare the type of certain variables or the wellformedness of certain expressions and may simply be ignored. 139 y : k 3 ) 1 P 1 : 0 I <p> The prefix of the atom R 0 in figure 2, for instance, is a 0 a 8 A 9 a 13 a 15 . Both the first-order and the intuitionistic substitution can be computed by unification algorithms (see section 3.3) and put restrictions on the order of rule-applications (see <ref> [19] </ref> or [11]). J (B) = b 1 :::b n for instance, means that all the special positions b 1 :::b n must have been reduced before position B and after its predecessor. <p> The number of copies generated to complete the proof is 4 A path through F is a subset of the atoms of F which corresponds to a horizontal path through the (nested) matrix representation of F . See <ref> [19, p. 215] </ref> for a complete definition. 141 called multiplicity . Again, a multiplicity may be due to a quantifier or specific to intuitionistic reasoning. Altogether, the following theorem has been proven in [19]. Theorem 1 Matrix characterization of intuitionistic validity. <p> See [19, p. 215] for a complete definition. 141 called multiplicity . Again, a multiplicity may be due to a quantifier or specific to intuitionistic reasoning. Altogether, the following theorem has been proven in <ref> [19] </ref>. Theorem 1 Matrix characterization of intuitionistic validity.
Reference: 20. <author> L. Wos et. al. </author> <title> Automated reasoning contributes to mathematics and logic. </title> <booktitle> In Proceedings of the 10 th CADE, LNCS 449, p. </booktitle> <pages> 485-499. </pages> <publisher> Springer Verlag 1990. </publisher> <pages> 151 </pages>
Reference-contexts: A formal proof, however, turns out to be rather tedious since existing tactics dealing with predicate logic are far from being complete. On the other hand, theorem provers like Setheo [9], Otter <ref> [20] </ref>, or KoMeT [2] have demonstrated that formal reasoning in classical predicate logic can be automated sufficiently well. It would therefore be desirable to integrate techniques from automated theorem proving into already existing program synthesis tools.
References-found: 20

