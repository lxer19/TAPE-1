URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1996/96-23.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1996.html
Root-URL: http://www.cs.rutgers.edu
Title: by  
Author: Stephen Bloch 
Address: Adelphi University Garden City, NY 11415  
Affiliation: Math/Computer Science Dept.  
Note: Integer N C 1 is equal to Boolean N C 1  DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 96-23 July 1996 
Abstract-found: 1
Intro-found: 1
Reference: [All96] <author> Eric Allender. </author> <type> Personal communication, </type> <month> June </month> <year> 1996. </year>
Reference-contexts: Formul and circuits therefore differ only in size, not in depth. Jung [Jun85] gives an algorithm to simulate any log-depth arithmetic circuit family over the integers 1 with a Boolean circuit of depth O (log (n) log fl (n)). Eric Allender <ref> [All96] </ref> showed me a simplified version of this algorithm, using the more recent result [BOC92] that multiplication of n 3 fi 3 matrices is complete for poly-size formula evaluation over arbitrary rings, and asked whether the depth bound could be improved to O (log (n)).
Reference: [BOC92] <author> Michael Ben-Or and Richard Cleve. </author> <title> Computing algebraic formulas using a constant number of registers. </title> <journal> SIAM Journal on Computing, </journal> <volume> 22(1) </volume> <pages> 54-58, </pages> <month> February </month> <year> 1992. </year> <month> - 9 </month> - 
Reference-contexts: Jung [Jun85] gives an algorithm to simulate any log-depth arithmetic circuit family over the integers 1 with a Boolean circuit of depth O (log (n) log fl (n)). Eric Allender [All96] showed me a simplified version of this algorithm, using the more recent result <ref> [BOC92] </ref> that multiplication of n 3 fi 3 matrices is complete for poly-size formula evaluation over arbitrary rings, and asked whether the depth bound could be improved to O (log (n)). <p> Theorem 1 The problem of evaluating an O (log (n))-depth arithmetic circuit family over n-bit integers is in P -uniform F N C 1 . Proof: By <ref> [BOC92] </ref>, the problem is reducible by p-projections (a fortiori in F NC 1 ) to finding the product of n 3 fi 3 matrices of n-bit integers. By Lemma 2, this is in P -uniform F N C 1 . <p> Another intriguing open question is extending the result to a broader class of rings or semirings, e.g. rationals (with n-bit numerators and denominators), polynomials (with n-bit-integer coefficients), or families of finite (semi)rings with at most 2 n elements. The results of <ref> [GLPG82, BOC92] </ref> apply to an arbitrary ring. [Jun85] claims that the related technique there is applicable to Q and Z [x], and comments on the implications of extending its results to the ring of integer matrices (such as probabilistic logspace = N C 1 !) It would likewise be very interesting
Reference: [CMTV96] <author> Herve Caussinus, Pierre McKenzie, Denis Therien, and Heribert Vollmer. </author> <title> Nondeterministic N C 1 computation. </title> <booktitle> In Proceedings of the Eleventh Annual Computational Complexity Conference, </booktitle> <pages> pages 12-21. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: X O (log log (N i1 )) i=1 )) = i=1 2 i1 In other words, inserting reduce, restore, and mod into the multiplication tree multiplies its depth by only a constant, and thus the depth of the entire algorithm is O (log M ). 3 Applications and Open Questions <ref> [CMTV96] </ref> defines counting classes #N C 1 , GapN C 1 , P NC 1 , and C = N C 1 over N C 1 and shows that these classes have equivalent formulations over Boolean circuits, algebraic circuits, and several other models of parallel computation. (More precisely, #N C 1
Reference: [GLPG82] <author> Albert C. Greenberg, Richard E. Ladner, Michael S. Paterson, and Zvi Galil. </author> <title> Efficient parallel algorithms for linear recurrence computation. </title> <journal> Information Processing Letters, </journal> <volume> 15(1), </volume> <month> August </month> <year> 1982. </year>
Reference-contexts: Thus at least in the P -uniform case, #N C 1 = GapN C 1 = F N C 1 , and P N C 1 = C = NC 1 = NC 1 . <ref> [GLPG82] </ref> studies the problem of computing the first N terms of an M-order linear recurrence, and gives O ((log M)(log N ))-depth arithmetic circuits to do the job. <p> increases linearly with c, which is O (log log (N 2 )), for a total depth of O ((log T )(log log T )(log N )); perhaps O ((log T )(log N)) could be achieved with more tweaking and tighter analysis, thus (among other things) improving the arithmetic results of <ref> [GLPG82] </ref> to work on Boolean circuits. Another intriguing open question is extending the result to a broader class of rings or semirings, e.g. rationals (with n-bit numerators and denominators), polynomials (with n-bit-integer coefficients), or families of finite (semi)rings with at most 2 n elements. <p> Another intriguing open question is extending the result to a broader class of rings or semirings, e.g. rationals (with n-bit numerators and denominators), polynomials (with n-bit-integer coefficients), or families of finite (semi)rings with at most 2 n elements. The results of <ref> [GLPG82, BOC92] </ref> apply to an arbitrary ring. [Jun85] claims that the related technique there is applicable to Q and Z [x], and comments on the implications of extending its results to the ring of integer matrices (such as probabilistic logspace = N C 1 !) It would likewise be very interesting
Reference: [Jun85] <author> Hermann Jung. </author> <title> Depth efficient transformations of arithmetic into Boolean circuits. </title> <editor> In Lothar Budach, editor, </editor> <booktitle> Proceedings of 1985 Conference on Fundamentals of Computation Theory, number 199 in Lecture Notes in Computer Science, </booktitle> <pages> pages 167-174. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: An "arithmetic formula" or "algebraic formula" is defined as one would expect, and is clearly equivalent to an arithmetic circuit with fan-out 1. Formul and circuits therefore differ only in size, not in depth. Jung <ref> [Jun85] </ref> gives an algorithm to simulate any log-depth arithmetic circuit family over the integers 1 with a Boolean circuit of depth O (log (n) log fl (n)). <p> Another intriguing open question is extending the result to a broader class of rings or semirings, e.g. rationals (with n-bit numerators and denominators), polynomials (with n-bit-integer coefficients), or families of finite (semi)rings with at most 2 n elements. The results of [GLPG82, BOC92] apply to an arbitrary ring. <ref> [Jun85] </ref> claims that the related technique there is applicable to Q and Z [x], and comments on the implications of extending its results to the ring of integer matrices (such as probabilistic logspace = N C 1 !) It would likewise be very interesting to weaken the uniformity requirement in the <p> The obvious way to do this is to weaken the uniformity requirement on F NC 1 algorithms for division, which would be a major result in itself. Another approach, as pointed out in <ref> [Jun85] </ref>, would be to replace the moduli "all the primes N i + 1" in the algorithm with a more uniformly constructible sequence of numbers fb j g such that (3N i+1 ) M i+1 &lt; 3 LCMfb j g b j N i +1 and (3N ) M r &lt;
References-found: 5

