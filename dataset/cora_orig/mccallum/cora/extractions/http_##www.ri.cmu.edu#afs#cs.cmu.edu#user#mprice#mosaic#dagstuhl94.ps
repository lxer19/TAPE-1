URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/mprice/mosaic/dagstuhl94.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/mprice/mosaic/index.htm
Root-URL: 
Title: Application-Aware Adaptation for Mobile Computing  
Author: M. Satyanarayanan, Brian Noble, Puneet Kumar, Morgan Price 
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: This paper identifies application-aware adaptation as an essential capability of mobile clients, and provides an overview of Odyssey, an architecture that supports this capability. Functionality that has hitherto been implemented monolithically must now be split between the operating system and individual applications. The role of the operating system is to sense external events, and to monitor and allocate scarce resources. In contrast, the role of individual applications is to adapt to changing conditions by using the information and resources provided by the operating system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., [4] Saltzer, J.H., Reed, D.P., Clark, D.D. Satyanarayanan, M., Sidebotham, R.N., West, M.J. </author> <title> End-To-End Arguments in System Design. Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems 2(4), </journal> <month> November, </month> <year> 1984. </year> <journal> ACM Transactions on Computer Systems 6(1), </journal> <month> February, </month> <year> 1988. </year>
Reference-contexts: There are three components of Odyssey at each client: the Odyssey API, a set of new system calls; the viceroy, which provides type-independent functionality and resource management; and, multiple wardens, which handle type-specific functionality and resource management. 4.1. Tomes Tomes are conceptually similar to volumes <ref> [1] </ref> in AFS and Coda. They are the unit of system administration functions such as backup and disk quota enforcement. But they differ from volumes in that they carry with them the notion of type.
Reference: [5] <author> Satyanarayanan, M., Kistler, J.J., Kumar, P., Okasaki, </author> <title> M.E., </title>
Reference-contexts: The vehicle for our work is Odyssey, a set of Unix extensions for mobility. The extensions are both at the system call level and internal to the operating system. The Odyssey architecture is a generalization of the Coda architecture <ref> [5] </ref>. Data is stored in a shared, hierarchical name space made up of typed volumes called tomes.
Reference: [2] <author> Kumar, P., Satyanarayanan, M. Siegel, </author> <title> E.H., Steere, D.C. Supporting Application-Specific Resolution in an Optimistically Coda: A Highly Available File System for a Distributed Replicated File System. Workstation Environment. </title> <booktitle> In Proceedings of the 4th IEEE Workshop on Workstation IEEE Transactions on Computers 39(4), </booktitle> <month> April, </month> <year> 1990. </year> <title> Operating Systems. </title> <address> Napa, CA, </address> <month> October, </month> <year> 1993. </year>
Reference-contexts: For example, it is inappropriate to require the user to use a different video display program when bandwidth drops. 3. Example: Application-Specific Conflict Resolution A simple instance of this collaborative paradigm is already operational in the Coda File System <ref> [2, 3] </ref>. Coda uses an optimistic replica control strategy to allow updates to cached data while disconnected. Responsibility for monitoring connectivity, resynchronizing cache state upon reconnection with servers, and detecting update conflicts is vested in the Coda cache manager, Venus.
Reference: [6] <institution> Steere, D.C., Satyanarayanan, M. </institution>
Reference-contexts: Odyssey API The Odyssey API consists of two classes of extensions to the 4.4 BSD Unix system call interface. One class, pertinent to this paper, is for resource negotiation and change notification. The other class, not discussed here, supports an abstraction called dynamic sets <ref> [6] </ref>. Resources in Odyssey are divided into two classes: generic and codex-specific. Examples of generic resources include disk space, network bandwidth and battery power.
Reference: [3] <author> Kumar, P., Satyanarayanan, M. </author> <title> A Case for Dynamic Sets in Operating Systems. Flexible and Safe Resolution of File Conflicts. November, </title> <booktitle> 1994. In Proceedings of the 1995 Usenix Conference. </booktitle> <address> New Orleans, </address> <note> In preparation. </note> <institution> LA, </institution> <month> January, </month> <year> 1995. </year>
Reference-contexts: For example, it is inappropriate to require the user to use a different video display program when bandwidth drops. 3. Example: Application-Specific Conflict Resolution A simple instance of this collaborative paradigm is already operational in the Coda File System <ref> [2, 3] </ref>. Coda uses an optimistic replica control strategy to allow updates to cached data while disconnected. Responsibility for monitoring connectivity, resynchronizing cache state upon reconnection with servers, and detecting update conflicts is vested in the Coda cache manager, Venus.
References-found: 5

