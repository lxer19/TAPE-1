URL: http://www.ai.univie.ac.at/%7Epaolo/lva/vu-sa/ps/ieee-agents96.ps.gz
Refering-URL: http://www.ai.univie.ac.at/%7Epaolo/lva/vu-sa/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: Voice: (412) 268-8825 Fax: (412) 268-5569  
Title: Distributed Intelligent Agents  
Author: Katia Sycara Keith Decker Anandeep Pannu Mike Williamson Dajun Zeng 
Web: URL: http://www.cs.cmu.edu/ softagents/  
Address: Pittsburgh, PA 15213, U.S.A.  
Affiliation: The Robotics Institute Carnegie Mellon University  
Abstract: We are investigating techniques for developing distributed and adaptive collections of agents that coordinate to retrieve, filter and fuse information relevant to the user, task and situation, as well as anticipate a user's information needs. In our system of agents, information gathering is seamlessly integrated with decision support. The task for which particular information is requested of the agents does not remain in the user's head but it is explicitly represented and supported through agent collaboration. In this paper we present the distributed system architecture, agent collaboration interactions, and a reusable set of software components for constructing agents. We call this reusable multi-agent computational infrastructure RETSINA (Reusable Task Structure-based Intelligent Network Agents). It has three types of agents. Interface agents interact with the user receiving user specifications and delivering results. They acquire, model, and utilize user preferences to guide system coordination in support of the user's tasks. Task agents help users perform tasks by formulating problem solving plans and carrying out these plans through querying and exchanging information with other software agents. Information agents provide intelligent access to a heterogeneous collection of information sources. We have implemented this system framework and are 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. R. Cohen and H. J. Levesque. </author> <title> Intention=choice + commitment. </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <pages> pages 410-415, </pages> <address> Seattle, WA., 1987. </address> <publisher> AAAI. </publisher>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [1, 19, 20, 25, 13, 22] </ref>) has been proposed to address this challenge.
Reference: [2] <author> K. Decker, K. Sycara, and M. Williamson. </author> <title> Modeling information agents: Advertisements, organizational roles, and dynamic behavior. </title> <booktitle> In Proceedings of the AAAI-96 Workshop on Agent Modeling, </booktitle> <address> Portland, Oregon, </address> <month> August </month> <year> 1996. </year> <note> AAAI. </note>
Reference-contexts: In this paper, we report on our work on developing distributed collections of intelligent software agents that cooperate asynchronously to perform goal-directed information retrieval and information integration in support of performing a variety of decision making tasks <ref> [23, 2] </ref>. We have been developing RETSINA, an open society of reusable agents that self organize and cooperate in response to task requirements. <p> For information agents, the local data base is a major part of their reusable architecture. It is this local database that allows all information agents to present a consistent interface to other agents, and re-use behaviors, even in very different information environments <ref> [2] </ref>. An agent architecture may also contain components that are not reusable. For example, the architecture of information agents contains a small amount 17 of site-specific external query interface code. The external query interface is responsible for actually retrieving data from some external source or sources.
Reference: [3] <author> K. Decker, M. Williamson, and K. Sycara. </author> <title> Matchmaking and brokering. </title> <booktitle> In Proceedings of the Second International Conference in Multi-Agent Systems (ICMAS'96), </booktitle> <address> Kyoto, Japan, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: This necessi 13 tates mechanisms for agent locating. This is a challenging task, especially in environments that include large numbers of agents, and where information sources, communication links and/or agents may be appearing and disappearing. We have made initial progress in implementing matchmaker agents <ref> [12, 3] </ref> that act as yellow pages [9]. When an agent is instantiated, it advertises its capabilities to a matchmaker. An agent that is looking to find another that possesses a particular capability (e.g. can supply particular information, or achieve a problem solving goal) can query a matchmaker.
Reference: [4] <author> Keith Decker. </author> <title> Environment Centered Analysis and Design of Coordination Mechanisms. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: As our point of departure in structuring an agent, we use the Task Control Architecture [21] and TAEMS <ref> [4] </ref>, which we extend and specialize for real-time user interaction, information gathering, and decision support. 14 15 The planning module takes as input a set of goals and produces a plan that satisfies the goals. The agent planning process is based on a hierarchical task network (HTN) planning formalism.
Reference: [5] <author> Lisa Dent, Jesus Boticario, John McDermott, Tom Mitchell, and David Zabowski. </author> <title> A personal learning apprentice. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence. AAAI, </booktitle> <year> 1992. </year>
Reference-contexts: Delegating some of the information processing to Intelligent Agents could increase human productivity and reduce cognitive load. To this end, recent research has produced agents for e-mail filtering, [15], calendar management <ref> [5] </ref>, and filtering news [13]. These tasks involve a single user interacting with a single software agent. There are tasks, however, which have more complex information requirements and possible interaction among many users. A distributed, multi-agent collection of Intelligent Agents is then appropriate and necessary.
Reference: [6] <author> Oren Etzioni and Daniel Weld. </author> <title> A softbot-based interface to the internet. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference: [7] <author> Tim Finin, Rich Fritzson, and Don McKay. </author> <title> A language and protocol to support intelligent agent interoperability. </title> <booktitle> In Proceedings of the CE and CALS Washington 92 Conference, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Obviously, one of the major issues involved in multi-agent systems is the problem of interoperability and communication between the agents. In our framework, we use the KQML language <ref> [7] </ref> for inter-agent communication. In order to incorporate and utilize pre-existing software agents or information services that have been developed by others, we adopt the following strategy: If the agent is under our control, it will be built using KQML as a communication language.
Reference: [8] <author> Leonardo Garrido and Katia Sycara. </author> <title> Multi-agent meeting scheduling: Preliminary experimental results. </title> <booktitle> In Proceedings of the Second International Conference in Multi-Agent Systems (ICMAS'96), </booktitle> <address> Kyoto, Japan, </address> <month> December </month> <year> 1996. </year> <month> 30 </month>
Reference-contexts: A distributed, multi-agent collection of Intelligent Agents is then appropriate and necessary. Within the context of our PLEIADES project, we have applied the distributed RETSINA framework to multi user tasks of increased complexity, such as 18 * distributed, collaborative meeting scheduling among multiple human attendees <ref> [14, 8] </ref> * finding people information on the Internet * hosting a visitor to Carnegie Mellon University [22] * accessing and filtering information about conference announcements and requests for proposals (RFPs) from funding organizations and no tifying Computer Science faculty of RFPs that suit their research in terests [18]. 5.1.1 An <p> It interacts with the user, getting user input, confirmation or dis-confirmation of suggestions, 2 For details on the distributed meeting scheduling algorithm, see <ref> [14, 8] </ref>. 22 23 asking for user advice and advising the user of the state of the system and its progress. 5.2 Financial Portfolio Management The second domain of applying the RETSINA framework is financial portfolio management (the WARREN system 3 ).
Reference: [9] <author> M. R. Genesereth and S. P. Katchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) 48-53,147, </volume> <year> 1994. </year>
Reference-contexts: This is a challenging task, especially in environments that include large numbers of agents, and where information sources, communication links and/or agents may be appearing and disappearing. We have made initial progress in implementing matchmaker agents [12, 3] that act as yellow pages <ref> [9] </ref>. When an agent is instantiated, it advertises its capabilities to a matchmaker. An agent that is looking to find another that possesses a particular capability (e.g. can supply particular information, or achieve a problem solving goal) can query a matchmaker.
Reference: [10] <author> Henry A. Kautz, Bart Selman, and Michael Coen. </author> <title> Bottom-up design of software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: Hosting a visitor involves arranging the visitor's schedule with faculty whose research interests match the interests that the visitor has expressed in his/her visit request. A different variation of the hosting visitor task has also been explored in <ref> [10] </ref>. For expository purposes, we refer to the collection of agents that are involved in the visitor hosting task as the V isitor Hosting system. The Visitor Hosting system takes as input a visit request, the tentative requested days for the meeting and the research interests of the visitor.
Reference: [11] <author> Craig K. Knoblock. </author> <title> Integrating planning and execution for information gathering. </title> <editor> In Craig Knoblock and Alon Levy, editors, </editor> <booktitle> Working Notes of the AAAI Spring Symposium Series on Information Gathering from Distributed, Heterogeneous Environments, </booktitle> <address> Stanford, CA, March 1995. </address> <publisher> AAAI. </publisher>
Reference-contexts: If the chosen information sources fail to provide a useful answer, the information agent should seek and try other sources to re-do the data query. Because of these complexities, we view information retrieval as a planning task itself <ref> [11] </ref>. The plans that task-specific agents have (see 4) include information gathering goals, which, in turn are satisfied through relevant plans for information retrieval. This type of intelligent agent differs from traditional AI systems since information-seeking during problem solving is an inherent part of the system.
Reference: [12] <author> D. Kuokka and L. Harada. </author> <title> On using KQML for matchmaking. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 239-245, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: learning techniques to adapt to new situations and improve their performance [18, 26, 16]. 3.2 Agent Organization and Coordination In RETSINA, agents are distributed across different machines and are directly activated based on the top-down elaboration of the current situation (as opposed to indirect activation via manager or matchmaker agents <ref> [12] </ref>, 10 11 or self-directed activation) 1 . These agent activations dynamically form an organizational structure "on-demand" that fits in with the task, the user's information needs and resulting decomposed information requests from related software agents. <p> This necessi 13 tates mechanisms for agent locating. This is a challenging task, especially in environments that include large numbers of agents, and where information sources, communication links and/or agents may be appearing and disappearing. We have made initial progress in implementing matchmaker agents <ref> [12, 3] </ref> that act as yellow pages [9]. When an agent is instantiated, it advertises its capabilities to a matchmaker. An agent that is looking to find another that possesses a particular capability (e.g. can supply particular information, or achieve a problem solving goal) can query a matchmaker.
Reference: [13] <author> Kan Lang. Newsweeder: </author> <title> Learning to filter netnews. </title> <booktitle> In Proceedings of Machine Learning Conference, </booktitle> <year> 1995. </year>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [1, 19, 20, 25, 13, 22] </ref>) has been proposed to address this challenge. <p> Delegating some of the information processing to Intelligent Agents could increase human productivity and reduce cognitive load. To this end, recent research has produced agents for e-mail filtering, [15], calendar management [5], and filtering news <ref> [13] </ref>. These tasks involve a single user interacting with a single software agent. There are tasks, however, which have more complex information requirements and possible interaction among many users. A distributed, multi-agent collection of Intelligent Agents is then appropriate and necessary.
Reference: [14] <author> JyiShane Liu and Katia Sycara. </author> <title> Distributed meeting scheduling. </title> <booktitle> In Proceedings of the Sixteenth Annual Conference of the Cognitive Science Society, </booktitle> <address> Atlanta, Georgia, </address> <month> August 13-16 </month> <year> 1994. </year>
Reference-contexts: A distributed, multi-agent collection of Intelligent Agents is then appropriate and necessary. Within the context of our PLEIADES project, we have applied the distributed RETSINA framework to multi user tasks of increased complexity, such as 18 * distributed, collaborative meeting scheduling among multiple human attendees <ref> [14, 8] </ref> * finding people information on the Internet * hosting a visitor to Carnegie Mellon University [22] * accessing and filtering information about conference announcements and requests for proposals (RFPs) from funding organizations and no tifying Computer Science faculty of RFPs that suit their research in terests [18]. 5.1.1 An <p> It interacts with the user, getting user input, confirmation or dis-confirmation of suggestions, 2 For details on the distributed meeting scheduling algorithm, see <ref> [14, 8] </ref>. 22 23 asking for user advice and advising the user of the state of the system and its progress. 5.2 Financial Portfolio Management The second domain of applying the RETSINA framework is financial portfolio management (the WARREN system 3 ).
Reference: [15] <editor> Pattie Maes. </editor> <title> Agents that reduce work and information overload. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: Most current agent-oriented approaches have focussed on what we call interface agents|a single agent with simple knowledge and problem solving capabilities whose main task is information filtering to alleviate the user's cognitive overload (e.g., <ref> [15, 16] </ref>). Another type of agent is the Softbot ([6]), a single agent with general knowledge that performs a wide range of user-delegated information-finding tasks. 2 We believe that such centralized approaches have several limitations. <p> Delegating some of the information processing to Intelligent Agents could increase human productivity and reduce cognitive load. To this end, recent research has produced agents for e-mail filtering, <ref> [15] </ref>, calendar management [5], and filtering news [13]. These tasks involve a single user interacting with a single software agent. There are tasks, however, which have more complex information requirements and possible interaction among many users. A distributed, multi-agent collection of Intelligent Agents is then appropriate and necessary.
Reference: [16] <author> Tom Mitchell, Rich Caruana, Dayne Freitag, John McDermott, and David Zabowski. </author> <title> Experience with a learning personal assistant. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: Most current agent-oriented approaches have focussed on what we call interface agents|a single agent with simple knowledge and problem solving capabilities whose main task is information filtering to alleviate the user's cognitive overload (e.g., <ref> [15, 16] </ref>). Another type of agent is the Softbot ([6]), a single agent with general knowledge that performs a wide range of user-delegated information-finding tasks. 2 We believe that such centralized approaches have several limitations. <p> A useful capability that can be added to all types of agents is learning. The agents can retain useful information from their interactions as training examples and utilize various machine learning techniques to adapt to new situations and improve their performance <ref> [18, 26, 16] </ref>. 3.2 Agent Organization and Coordination In RETSINA, agents are distributed across different machines and are directly activated based on the top-down elaboration of the current situation (as opposed to indirect activation via manager or matchmaker agents [12], 10 11 or self-directed activation) 1 . <p> The visitor information is used by faculty calendar software agents, such as CAP (see <ref> [16] </ref>), to decide level of interest of a faculty member to meet with the visitor. * Meanwhile, the Interests agent queries the faculty interests data base and returns names of CMU faculty whose research matches the request.
Reference: [17] <author> Tim Oates, M. V. Nagendra Prasad, and Victor R. Lesser. </author> <title> Cooperative information gathering: A distributed problem solving approach. </title> <type> Technical Report 94-66, </type> <institution> Department of Computer Science, University of Massachusetts, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: Finally, because of the complexity of the information finding and filtering task, and the large amount of information, the required processing would overwhelm a single agent. Another proposed solution is to address the problem by using multi-agent systems to access, filter, evaluate, and integrate this information <ref> [23, 17] </ref>. Such multi-agent systems can compartmentalize specialized task knowledge, organize themselves to avoid processing bottlenecks, and can be built expressly to deal with dynamic changes in the agent and information-source landscape.
Reference: [18] <author> Anandeep Pannu and Katia Sycara. </author> <title> Learning text filtering preferences. </title> <booktitle> In 1996 AAAI Symposium on Machine Learning and Information Access, </booktitle> <year> 1996. </year> <month> 31 </month>
Reference-contexts: A useful capability that can be added to all types of agents is learning. The agents can retain useful information from their interactions as training examples and utilize various machine learning techniques to adapt to new situations and improve their performance <ref> [18, 26, 16] </ref>. 3.2 Agent Organization and Coordination In RETSINA, agents are distributed across different machines and are directly activated based on the top-down elaboration of the current situation (as opposed to indirect activation via manager or matchmaker agents [12], 10 11 or self-directed activation) 1 . <p> human attendees [14, 8] * finding people information on the Internet * hosting a visitor to Carnegie Mellon University [22] * accessing and filtering information about conference announcements and requests for proposals (RFPs) from funding organizations and no tifying Computer Science faculty of RFPs that suit their research in terests <ref> [18] </ref>. 5.1.1 An Extended Example: The Visitor Hosting Task We will use the task of hosting a visitor to Carnegie Mellon University (CMU) as an illustrative example of system operation.
Reference: [19] <author> Anand S. Rao and Michael P. Georgeff. </author> <title> A model-theoretic approach to the verification of situated reasoning systems. </title> <booktitle> In Proceedings of IJCAI-93, </booktitle> <pages> pages 318-324, </pages> <address> Chambery, France, </address> <month> 28 August - 3 September </month> <year> 1993. </year> <pages> IJCAI. </pages>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [1, 19, 20, 25, 13, 22] </ref>) has been proposed to address this challenge.
Reference: [20] <author> Y. Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [1, 19, 20, 25, 13, 22] </ref>) has been proposed to address this challenge.
Reference: [21] <author> Reid Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <year> 1994. </year>
Reference-contexts: As our point of departure in structuring an agent, we use the Task Control Architecture <ref> [21] </ref> and TAEMS [4], which we extend and specialize for real-time user interaction, information gathering, and decision support. 14 15 The planning module takes as input a set of goals and produces a plan that satisfies the goals.
Reference: [22] <author> Katia Sycara and Dajun Zeng. </author> <title> Towards an intelligent electronic secretary. </title> <booktitle> In Proceedings of the CIKM-94 (International Conference on Information and Knowledge Management) Workshop on Intelligent Information Agents, </booktitle> <institution> National Institute of Standards and Technology, Gaithers-burg, Maryland, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [1, 19, 20, 25, 13, 22] </ref>) has been proposed to address this challenge. <p> Within the context of our PLEIADES project, we have applied the distributed RETSINA framework to multi user tasks of increased complexity, such as 18 * distributed, collaborative meeting scheduling among multiple human attendees [14, 8] * finding people information on the Internet * hosting a visitor to Carnegie Mellon University <ref> [22] </ref> * accessing and filtering information about conference announcements and requests for proposals (RFPs) from funding organizations and no tifying Computer Science faculty of RFPs that suit their research in terests [18]. 5.1.1 An Extended Example: The Visitor Hosting Task We will use the task of hosting a visitor to Carnegie
Reference: [23] <author> Katia Sycara and Dajun Zeng. </author> <title> Coordination of multiple intelligent software agents. </title> <journal> International Journal of Cooperative Information Systems, </journal> <note> To Appear, </note> <year> 1996. </year>
Reference-contexts: Finally, because of the complexity of the information finding and filtering task, and the large amount of information, the required processing would overwhelm a single agent. Another proposed solution is to address the problem by using multi-agent systems to access, filter, evaluate, and integrate this information <ref> [23, 17] </ref>. Such multi-agent systems can compartmentalize specialized task knowledge, organize themselves to avoid processing bottlenecks, and can be built expressly to deal with dynamic changes in the agent and information-source landscape. <p> In this paper, we report on our work on developing distributed collections of intelligent software agents that cooperate asynchronously to perform goal-directed information retrieval and information integration in support of performing a variety of decision making tasks <ref> [23, 2] </ref>. We have been developing RETSINA, an open society of reusable agents that self organize and cooperate in response to task requirements.
Reference: [24] <author> M. Williamson, K. Decker, and K. Sycara. </author> <title> Unified information and control flow. </title> <booktitle> In Proceedings of the AAAI-96 Workshop on Theories of Action, Planning and Control: Bridging the Gap, </booktitle> <address> Portland, Oregon, </address> <month> August </month> <year> 1996. </year> <note> AAAI. </note>
Reference-contexts: An action is enabled when all the required inputs have been provided. (See <ref> [24] </ref> for a complete description of our task network representation.) The communication and coordination module accepts and interprets messages from other agents in KQML. In addition, interface agents also accept and interpret e-mail messages.
Reference: [25] <author> M. Wooldridge and N. R. Jennings. </author> <title> Intelligent agents: </title> <journal> Theory and practice. The Knowledge Engineering Review, </journal> <volume> 10(2) </volume> <pages> 115-152, </pages> <year> 1995. </year>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [1, 19, 20, 25, 13, 22] </ref>) has been proposed to address this challenge.
Reference: [26] <author> Dajun Zeng and Katia Sycara. </author> <title> Bayesian learning in negotiation. </title> <booktitle> In 1996 AAAI Symposium on Adaptation, Co-evolution and Learning in Multiagent Systems, </booktitle> <year> 1996. </year> <month> 32 </month>
Reference-contexts: A useful capability that can be added to all types of agents is learning. The agents can retain useful information from their interactions as training examples and utilize various machine learning techniques to adapt to new situations and improve their performance <ref> [18, 26, 16] </ref>. 3.2 Agent Organization and Coordination In RETSINA, agents are distributed across different machines and are directly activated based on the top-down elaboration of the current situation (as opposed to indirect activation via manager or matchmaker agents [12], 10 11 or self-directed activation) 1 .
References-found: 26

