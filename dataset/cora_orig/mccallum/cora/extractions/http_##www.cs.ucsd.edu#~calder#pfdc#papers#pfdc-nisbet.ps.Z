URL: http://www.cs.ucsd.edu/~calder/pfdc/papers/pfdc-nisbet.ps.Z
Refering-URL: http://www.cs.ucsd.edu/~calder/pfdc/program.html
Root-URL: http://www.cs.ucsd.edu
Title: GAPS: Iterative Feedback Directed Parallelisation Using Genetic Algorithms  
Author: Andy Nisbet 
Address: Oxford Road, Manchester M13 9PL, U.K.  
Affiliation: Department of Computer Science, University of Manchester,  
Abstract: The compilation of FORTRAN programs for SPMD execution on parallel architectures often requires the application of program restructuring transformations such as loop interchange, loop distribution, loop fusion, loop skewing and statement reordering. Determining the optimal transformation sequence that minimises execution time for a given program is an NP-complete problem. The hypothesis of the research described here is that genetic algorithm (GA) techniques can be used to determine the sequence of restructuring transformations which are better, or, as good as, those produced by more conventional compiler search techniques. The Genetic Algorithm Parallelisation System (GAPS) compiler framework is presented. GAPS uses a novel iterative feedback directed approach to auto-parallelisation that is based upon genetic algorithm optimisation. Traditional restructuring transformations are represented as mappings that are applied to each statement and its associated iteration space. The hypothesis of GAPS is tested with a comparison of the performance of SPMD code produced by PFA, petit from the Omega Project at the University of Maryland and GAPS for an ADI 1024 fi 1024 benchmark on an SGI Origin 2000. Encouraging initial results show that GAPS delivers performance improvements of up to 44% when the execution times of code produced by GAPS, PFA, PETIT from the Omega Project are compared for an ADI 1024 fi 1024 benchmark on an SGI Origin2000. On this benchmark, GAPS produces code having 21 25% improvements in parallel execution time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> The SUIF Compiler System, </institution> <note> http://suif.stanford.edu/ </note>
Reference-contexts: (t) = c (t) + d (t) enddo T 1 : [i] ! [0; i; 0] I 1 : f [i] : 1 i 1024g g 0 2 = 0 1 = 0; g 2 do j = 1,1024 enddo do i = 1,1024 enddo T 1 : [i] ! <ref> [1; i; 0] </ref> I 1 : f [i] : 1 i 1024g g 0 2 = 0 (x 1 ; : : : ; x n ) (y 1 ; : : : ; y n ) , 9m : (8i 1 i m ) x i = y i ) <p> ^ 1 j 2048g g 0 2 = 0 1 = 0; g 4 do i = 1,1024 2: a (j,i) = c (j) + d (j) enddo enddo do j = 1,2048 1: b (i,j) = c (i) + d (i) enddo enddo T 1 : [i; j] ! <ref> [1; j; 0; i; 0] </ref> I 1 : f [i; j] : 1 i 1024 ^ 1 j 2048g g 0 2 = 0 Legality of Time-mappings The iteration reordering program transformations specified by time-mappings are only legal if the original program semantics are preserved. <p> It is intended that degenerate grouping information may be activated through interactions between group-based crossover and mutation operators. do i = 1,1024 1: a (i) = c (i) + d (i) enddo T 1 : [i] ! <ref> [0; i; 1] </ref> do i = 1,1024 enddo do j = 1,1024 enddo T 1 : [i] ! [1; i; 0] 3.4 Method and Results The initial GAPS configuration is concerned purely with optimisation of restructuring transformations. <p> grouping information may be activated through interactions between group-based crossover and mutation operators. do i = 1,1024 1: a (i) = c (i) + d (i) enddo T 1 : [i] ! [0; i; 1] do i = 1,1024 enddo do j = 1,1024 enddo T 1 : [i] ! <ref> [1; i; 0] </ref> 3.4 Method and Results The initial GAPS configuration is concerned purely with optimisation of restructuring transformations. GAPS currently optimises the application of loop-distribution, loop-fusion and statement reordering trans formations whilst loop-permutation 4 and iteration-partitioning decision are determined during a preprocessing step which invokes petit 5 [3].
Reference: [2] <author> Polaris, </author> <title> Automatic Parallelization of Conventional Fortran Programs, </title> <address> http://polaris.cs.uiuc.edu/polaris/polaris.html. </address>
Reference: [3] <author> The Omega Project, </author> <title> Frameworks and Algorithms for the Analysis and Transformation of Scientific Programs, </title> <address> http://www.cs.umd.edu/projects/omega/ </address>
Reference-contexts: Hybrid techniques can guarantee that the best solution generated is no worse than the conventional techniques used to hybridise the GA. 3.1 GAPS Infrastructure GAPS uses the Unified Transformation Framework (UTF) [4] from the Omega Project <ref> [3] </ref>. The UTF provides two simple mathematical abstractions: time-mappings and space-mappings which respectively and concisely specify i) the restructuring transformations applied, and ii), the partition of computation for parallel execution. <p> GAPS currently optimises the application of loop-distribution, loop-fusion and statement reordering trans formations whilst loop-permutation 4 and iteration-partitioning decision are determined during a preprocessing step which invokes petit 5 <ref> [3] </ref>. GAPS seeds one member of the population of 20 with encodings of restructuring transformations generated by petit whilst the remaining 19 members are randomly initialised. Note that illegal time-mapping encodings which do not preserve program semantics are allowed into the population.
Reference: [4] <author> W.A. </author> <title> Kelly (1996), Optimization within a Unified Transformation Framework, </title> <type> PhD. Thesis, </type> <institution> University of Mary-land, USA. </institution>
Reference-contexts: Hybrid techniques can guarantee that the best solution generated is no worse than the conventional techniques used to hybridise the GA. 3.1 GAPS Infrastructure GAPS uses the Unified Transformation Framework (UTF) <ref> [4] </ref> from the Omega Project [3]. The UTF provides two simple mathematical abstractions: time-mappings and space-mappings which respectively and concisely specify i) the restructuring transformations applied, and ii), the partition of computation for parallel execution.
Reference: [5] <author> Edited by L. </author> <title> Davis (1991), Handbook of Genetic Algorithms, </title> <publisher> Van Nostrand Reinhold, </publisher> <address> ISBN 0-442-00173-8 A.P. Nisbet 8 </address>
Reference-contexts: Compiler technology requires a strategy which can apply transformations in order to globally minimise all sources of overhead. Such a strategy is possible with the use of genetic algorithm techniques. 2 Genetic Algorithm (GA) Optimisation GAs <ref> [5] </ref> iteratively seek better solutions to problems in the same way that evolution has optimised populations of living organisms for their habitat and environment. The process of reproduction creates new child organisms through the application of recombination and mutation operators to encodings of parent organisms.
References-found: 5

