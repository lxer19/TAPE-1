URL: http://www.cs.ucsd.edu/users/pasquale/Papers/sched97.ps
Refering-URL: http://www.cs.ucsd.edu/users/pasquale/Pub.html
Root-URL: http://www.cs.ucsd.edu
Title: The Schedulability of Deadline-Ordered Service Disciplines  
Author: Norival R. Figueira and Joseph Pasquale, Member, IEEE 
Abstract: In a deadline-ordered service discipline, packets are assigned transmission deadlines and are transmitted in increasing order of deadlines. Different deadline-ordered service disciplines are distinguished by how they define deadlines. One of the more difficult analytical problems one faces when designing a new deadline-ordered service discipline is to prove that one can bound the end of transmission times of packets relative to their assigned deadlines, which we call schedulability. We show that, no matter how one defines deadlines, there is a simple schedulability condition for deadline-ordered service disciplines. This schedu-lability condition is necessary and sufficient for preemptive deadline-ordered service disciplines and, for a server that allows the presence of non real-time packets (i.e., packets with no deadlines), it is also necessary and sufficient for non-preemptive deadline-ordered service disciplines. We also address the schedulability problem of arbitrary scheduling policies and show the optimality of deadline-ordered scheduling. To show how our results simplify schedulability determination, we use them to prove the known schedula-bility conditions of VirtualClock, PGPS, Stop-and-Go, and Delay-EDD, and to prove the necessary schedulability condition of VirtualClock. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Ferrari and D. Verma, </author> <title> "A Scheme for Real-Time Channel Establishment in Wide-Area Networks," </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 8, No. 4, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: In order to provide quality of service (QoS) guarantees for real-time traffic, several service disciplines have been proposed: Delay Earliest-Due-Date (Delay-EDD) <ref> [1] </ref>, Jitter Earliest-Due-Date (Jitter-EDD) [12], Rate-Controlled Static-Priority Queueing (RCSP) [13], VirtualClock [14], Packet-by-Packet Generalized Processor Sharing (PGPS) [10]-[11], Stop-and-Go [5]-[7], Hierarchical Round Robin (HRR) [8], and more recently, Leave-in-Time [3]. <p> Thus, by schedulable we simply mean 0-schedulable. Schedulability determination generally involves intricate and long proofs (e.g., Delay-EDD <ref> [1] </ref> and VirtualClock [2]). In this paper we show that, no matter how one assigns deadlines, there is a simple schedulability condition for deadline-ordered servers. This schedulability condition is necessary and sufficient for preemptive deadline-ordered scheduling. <p> However, they also address the schedu-lability problem of arbitrary scheduling policies. We show that preemptive deadline-ordered scheduling is optimal in sum of the arrival time of the packet and the fixed delay bound of the session (as is Delay-EDD <ref> [1] </ref>). In this paper, we make no assumption about how one calculates deadlines. 1 the sense that if a set of real-time sessions (i.e., sessions composed of packets that have finite deadlines) is schedula-ble under any (preemptive or non-preemptive) scheduling policy, then it is schedulable using preemptive deadline-ordered scheduling. <p> Their result for non-preemptive servers (which assumes the presence of non real-time sessions sharing the server) shows that the schedulability condition presented for Delay-EDD in <ref> [1] </ref> is restrictive because it is only a sufficient condition. Their result for preemptive servers subsumes the results of Liu and Layland [9] for task scheduling in a real-time environment, since the former relaxes some of the suppositions of the latter. <p> The schedulability condition that is proved in [15] for non-preemptive servers applies to Delay-EDD <ref> [1] </ref>, and assumes the presence of non real-time traffic. Our results subsume those in [15] because we do not assume that deadlines are calculated by a fixed delay from the arrival time of packets. In fact, we make no assumptions about the calculation of deadlines.
Reference: [2] <author> N. R. Figueira and J. Pasquale, </author> <title> "An Upper Bound on Delay for the VirtualClock Service Discipline," </title> <journal> In IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 3, No. 4, </volume> <pages> pp. 399-408, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Thus, by schedulable we simply mean 0-schedulable. Schedulability determination generally involves intricate and long proofs (e.g., Delay-EDD [1] and VirtualClock <ref> [2] </ref>). In this paper we show that, no matter how one assigns deadlines, there is a simple schedulability condition for deadline-ordered servers. This schedulability condition is necessary and sufficient for preemptive deadline-ordered scheduling. <p> We also discuss the applicability of our results to preemptive servers in the analysis of scheduling algorithms for multiprogramming in a real-time environment. VirtualClock In <ref> [2] </ref>, it was proved that VirtualClock [14] is able to provide an upper bound on delay for some types of sessions if s2 where C is the capacity of the outgoing link of the server, r s is the reserved rate of session s (the reserved rate of a non real-time <p> Given this constraint, it was proved in <ref> [2] </ref> that ^ F l; s &lt; F l; s + C for all real-time sessions s sharing the server. The proof of this result in [2] is long and intricate. We now show how the same result can be easily proved with the result of Theorem 1. <p> Given this constraint, it was proved in <ref> [2] </ref> that ^ F l; s &lt; F l; s + C for all real-time sessions s sharing the server. The proof of this result in [2] is long and intricate. We now show how the same result can be easily proved with the result of Theorem 1. We also prove a new result, that (31) is also a necessary condition to (32). <p> Proof of Theorem 10: In VirtualClock, the eligibility time of a packet is equal to the arrival time of the packet. We divide the proof in two cases. Proof of the sufficient condition: In VirtualClock, the deadline of the ith packet of a session s is (see <ref> [2] </ref>) F i; s = max ft i; s ; F i1; s g + r s 10 Consider an interval of time [a, b], b &gt; a, where Z s (a; b) &gt; 0.
Reference: [3] <author> N. R. Figueira and J. Pasquale, "Leave-in-Time: </author> <title> A New Service Discipline for Control of Real-Time Communications in a Packet-Switching Network," </title> <booktitle> In Proceedings of ACM SIGCOMM `95, </booktitle> <pages> pp. 207-218, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: In order to provide quality of service (QoS) guarantees for real-time traffic, several service disciplines have been proposed: Delay Earliest-Due-Date (Delay-EDD) [1], Jitter Earliest-Due-Date (Jitter-EDD) [12], Rate-Controlled Static-Priority Queueing (RCSP) [13], VirtualClock [14], Packet-by-Packet Generalized Processor Sharing (PGPS) [10]-[11], Stop-and-Go [5]-[7], Hierarchical Round Robin (HRR) [8], and more recently, Leave-in-Time <ref> [3] </ref>. Most of these service disciplines use deadline-ordered scheduling: 1 packets are assigned (transmission) deadlines Manuscript received November 1, 1995; revised May 19, 1996 and November 7, 1996; approved by IEEE/ACM Transactions on Networking Editor L. Zhang. This research was supported in part by NASA grant NASA-NAGW-4260.
Reference: [4] <author> L. Georgiadis, R. Guerin, and A. Parekh, </author> <title> "Optimal Multiplexing on a Single Link: Delay and Buffer re quirements," </title> <booktitle> In Proceedings of IEEE INFOCOM `94, </booktitle> <volume> Vol. 2, </volume> <pages> pp. 524-532, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: These results for tracking service disciplines agree with the results developed in <ref> [4] </ref>.
Reference: [5] <author> S. J. Golestani, </author> <title> "A Stop-and-Go Queueing Framework for Congestion Management," </title> <booktitle> In Proceedings of ACM SIGCOMM `90, </booktitle> <pages> pp. 8-18, </pages> <month> September </month> <year> 1990. </year>
Reference: [6] <author> S. J. Golestani, </author> <title> "Congestion-Free Transmission of Real-Time Traffic in Packet Networks," </title> <booktitle> In Proceed ings of IEEE INFOCOM `90, </booktitle> <pages> pp. 527-536, </pages> <month> June </month> <year> 1990. </year>
Reference: [7] <author> S. J. Golestani, </author> <title> "Duration-Limited Statistical Multi plexing of Delay-Sensitive Traffic in Packet Networks," </title> <booktitle> In Proceedings of IEEE INFOCOM `91, </booktitle> <pages> pp. 323-332, </pages> <month> April </month> <year> 1991. </year>
Reference: [8] <author> C. Kalmanek, H. Kanakia, and S. Keshav, </author> <title> "Rate Controlled Servers for Very High-Speed Networks," </title> <booktitle> In Proceedings of IEEE GlobeCom `90, </booktitle> <pages> pp. </pages> <address> 300.3.1 300.3.9, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: In order to provide quality of service (QoS) guarantees for real-time traffic, several service disciplines have been proposed: Delay Earliest-Due-Date (Delay-EDD) [1], Jitter Earliest-Due-Date (Jitter-EDD) [12], Rate-Controlled Static-Priority Queueing (RCSP) [13], VirtualClock [14], Packet-by-Packet Generalized Processor Sharing (PGPS) [10]-[11], Stop-and-Go [5]-[7], Hierarchical Round Robin (HRR) <ref> [8] </ref>, and more recently, Leave-in-Time [3]. Most of these service disciplines use deadline-ordered scheduling: 1 packets are assigned (transmission) deadlines Manuscript received November 1, 1995; revised May 19, 1996 and November 7, 1996; approved by IEEE/ACM Transactions on Networking Editor L. Zhang.
Reference: [9] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environ ment," </title> <journal> In Journal of the ACM, </journal> <volume> Vol. 20, No. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: This optimality result was first shown in <ref> [9] </ref>, but only for sessions with periodic arrivals. <p> Their result for non-preemptive servers (which assumes the presence of non real-time sessions sharing the server) shows that the schedulability condition presented for Delay-EDD in [1] is restrictive because it is only a sufficient condition. Their result for preemptive servers subsumes the results of Liu and Layland <ref> [9] </ref> for task scheduling in a real-time environment, since the former relaxes some of the suppositions of the latter. Our results generalize those in [15] because we make no assumptions regarding how one defines deadlines, and we also present results for both preemptive and non-preemptive deadline-ordered servers. <p> Note that, in [15], C i = L max; s i =C and C p = L MAX; =C. Real-Time Task Scheduling Real-time task scheduling was studied in <ref> [9] </ref> for the case of tasks with constant inter-request time and execution deadline equal to the next request time. The results that we present here for preemptive servers can be used for the general task scheduling problem, i.e., not restricted to the assumptions in [9]. <p> Real-time task scheduling was studied in <ref> [9] </ref> for the case of tasks with constant inter-request time and execution deadline equal to the next request time. The results that we present here for preemptive servers can be used for the general task scheduling problem, i.e., not restricted to the assumptions in [9]. We demonstrated that our results subsume those in [15], which in turn showed that its results for preemptive servers subsume the ones in [9]. We now translate our results to meaningful terms in the task scheduling realm. The server and its capacity represent the processor and its rate, respectively. <p> The results that we present here for preemptive servers can be used for the general task scheduling problem, i.e., not restricted to the assumptions in <ref> [9] </ref>. We demonstrated that our results subsume those in [15], which in turn showed that its results for preemptive servers subsume the ones in [9]. We now translate our results to meaningful terms in the task scheduling realm. The server and its capacity represent the processor and its rate, respectively. A packet represents a task. A session represents a process, which generates tasks.
Reference: [10] <author> A. K. Parekh, </author> <title> "A Generalized Processor Sharing Ap proach to Flow Control in Integrated Services Net works," </title> <type> Ph.D. Dissertation, </type> <institution> Massachusetts Institute of Technology, LIDS-TH-2089, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: This is a problem for the implementation of PGPS since, by its definition, PGPS needs to transmit packets in increasing order of their end of transmission times in the simulated GPS server. In <ref> [10] </ref>, an implementation was proposed for PGPS in which packets are stamped with virtual finish times instead of the deadlines in units of actual time.
Reference: [11] <author> A. K. Parekh, and G. Gallager, </author> <title> "A Generalized Pro cessor Sharing Approach to Flow Control in Inte grated Services Networks: The Single-Node Case," </title> <journal> In IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 1, No. 3, </volume> <pages> pp. 344-357, </pages> <month> June </month> <year> 1993. </year>
Reference: [12] <author> D. Verma, H. Zhang, and D. Ferrari, </author> <title> "Delay Jitter Control for Real-Time Communication in a Packet Switching Network," </title> <booktitle> In Proceedings of IEEE TriCom `91, </booktitle> <pages> pp. 35-43, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: In order to provide quality of service (QoS) guarantees for real-time traffic, several service disciplines have been proposed: Delay Earliest-Due-Date (Delay-EDD) [1], Jitter Earliest-Due-Date (Jitter-EDD) <ref> [12] </ref>, Rate-Controlled Static-Priority Queueing (RCSP) [13], VirtualClock [14], Packet-by-Packet Generalized Processor Sharing (PGPS) [10]-[11], Stop-and-Go [5]-[7], Hierarchical Round Robin (HRR) [8], and more recently, Leave-in-Time [3].
Reference: [13] <author> H. Zhang and D. Ferrari, </author> <title> "Rate-Controlled Static Priority Queueing," </title> <booktitle> In Proceedings of IEEE INFO COM `93, </booktitle> <pages> pp. 227-236, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: In order to provide quality of service (QoS) guarantees for real-time traffic, several service disciplines have been proposed: Delay Earliest-Due-Date (Delay-EDD) [1], Jitter Earliest-Due-Date (Jitter-EDD) [12], Rate-Controlled Static-Priority Queueing (RCSP) <ref> [13] </ref>, VirtualClock [14], Packet-by-Packet Generalized Processor Sharing (PGPS) [10]-[11], Stop-and-Go [5]-[7], Hierarchical Round Robin (HRR) [8], and more recently, Leave-in-Time [3].
Reference: [14] <author> L. Zhang, "VirtualClock: </author> <title> A New Traffic Control Al gorithm for Packet Switching Networks," </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> Vol. 9, No. 2, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In order to provide quality of service (QoS) guarantees for real-time traffic, several service disciplines have been proposed: Delay Earliest-Due-Date (Delay-EDD) [1], Jitter Earliest-Due-Date (Jitter-EDD) [12], Rate-Controlled Static-Priority Queueing (RCSP) [13], VirtualClock <ref> [14] </ref>, Packet-by-Packet Generalized Processor Sharing (PGPS) [10]-[11], Stop-and-Go [5]-[7], Hierarchical Round Robin (HRR) [8], and more recently, Leave-in-Time [3]. <p> More precisely, L max; s = max fL max; s 0 : s 0 6= s and s 0 shares the serverg. This alternative result is important for service disciplines such as VirtualClock <ref> [14] </ref> where all sessions satisfy the ordering property. Proof of Theorem 1: Consider the ith transmitted packet of a server busy period beginning at time t. We consider two cases. <p> We also discuss the applicability of our results to preemptive servers in the analysis of scheduling algorithms for multiprogramming in a real-time environment. VirtualClock In [2], it was proved that VirtualClock <ref> [14] </ref> is able to provide an upper bound on delay for some types of sessions if s2 where C is the capacity of the outgoing link of the server, r s is the reserved rate of session s (the reserved rate of a non real-time session is equal to zero), and

References-found: 14

