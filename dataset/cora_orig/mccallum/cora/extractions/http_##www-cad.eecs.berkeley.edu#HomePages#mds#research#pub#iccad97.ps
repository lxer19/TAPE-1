URL: http://www-cad.eecs.berkeley.edu/HomePages/mds/research/pub/iccad97.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/mds/research/index.html
Root-URL: http://www.cs.berkeley.edu
Title: EDA and the Network  
Author: Mark D. Spiller and A. Richard Newton 
Address: Berkeley  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California at  
Abstract: Digital computer networks are playing an increasingly important role in the evaluation, distribution, integration, and management of EDA systems. Tools, libraries, design data, and a variety of both design and manufacturing services are accessible today via networks. Networks are also playing a central role in the integration of system design teams, teams that involve a variety of both business and technical disciplines as well as widely distributed geographical locations. Throughout the history of EDA, the architectures used to integrate and distribute computation and interaction have played a central role in the overall design methodology and so have had a major, indirect impact on the choice of the most effective tools, algorithms, and data structures. In this paper, a number of the factors involved in the choice of a suitable architecture for EDA integration are reviewed and a number of ongoing developments and challenges are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. W. Nagel and D. O. Pederson, </author> <title> "Simulation Program with Integrated Circuit Emphasis," </title> <booktitle> Proc. 16th Midwest Symp. Circ. Theory , Waterloo, </booktitle> <address> Canada, </address> <month> April </month> <year> 1973. </year>
Reference-contexts: Computer-Aided Design (CAD) programs were originally designed for batch-input, line printer output (e.g. Spice <ref> [1] </ref>), and formed the basis of the CAD tool industry. With the advent of multitasking operating systems and direct inter-program communication (e.g.
Reference: [2] <author> F. J. Corbato and V. A. Vyssotsky, </author> <title> "Introduction and Overview of the Multics System," </title> <booktitle> AFIPS Conference Proceedings , No. 27, pp.185-195, Fall Joint Computer Conf., </booktitle> <year> 1965. </year> <note> (At http://www.lilli.com/fjcc1.html.) </note>
Reference-contexts: Computer-Aided Design (CAD) programs were originally designed for batch-input, line printer output (e.g. Spice [1]), and formed the basis of the CAD tool industry. With the advent of multitasking operating systems and direct inter-program communication (e.g. Multics <ref> [2] </ref>, Unix [3]), along with "personal minicomputers" (i.e. workstations), the concept of the software tool was introduced to electronic system design and the EDA industry was established in the early 1980s. We have seen the impact of similar changes in user interaction technologies. <p> Network Services As mentioned earlier, many of the basic ideas behind the transformation of a traditional operating system to an infrastructure of computing services were introduced in the Multics project <ref> [2] </ref>, an inspiration for the later Unix developments at Bell laboratories. Unfortunately, that project was hampered significantly by the lack of a reliable high-speed networking infrastructure.
Reference: [3] <institution> The Bell System Technical Journal, </institution> <note> Special Issue on UNIX , Vol.57, No.6, Jul-Aug., </note> <year> 1978, </year> <title> contains a collection of papers describing UNIX. </title>
Reference-contexts: Computer-Aided Design (CAD) programs were originally designed for batch-input, line printer output (e.g. Spice [1]), and formed the basis of the CAD tool industry. With the advent of multitasking operating systems and direct inter-program communication (e.g. Multics [2], Unix <ref> [3] </ref>), along with "personal minicomputers" (i.e. workstations), the concept of the software tool was introduced to electronic system design and the EDA industry was established in the early 1980s. We have seen the impact of similar changes in user interaction technologies.
Reference: [4] <author> D. Gibson and S. </author> <title> Nance, </title> <booktitle> "SLIC - Symbolic Layout of Integrated Circuits ," Proc. 13 th ACM/IEEE Design Automation Conference , pp.434-440, </booktitle> <month> June </month> <year> 1976. </year>
Reference-contexts: We have seen the impact of similar changes in user interaction technologies. For example, symbolic layout entry moved from character-based CRT approaches <ref> [4] </ref>, to stick diagrams on vector displays [5], to today's raster fill abstractions (e.g. [6,7]). In each case, the layout methodology that could be expressed by the display hardware and associated software ultimately determined the layout data structure and most suitable compaction algorithm.
Reference: [5] <author> J. D. Williams, </author> <title> "STICKS - A Graphical Compiler for High Level LSI Design," </title> <booktitle> AFIPS Conference Proceedings , Vol.47, </booktitle> <address> pp.289-295, </address> <month> June </month> <year> 1978. </year>
Reference-contexts: We have seen the impact of similar changes in user interaction technologies. For example, symbolic layout entry moved from character-based CRT approaches [4], to stick diagrams on vector displays <ref> [5] </ref>, to today's raster fill abstractions (e.g. [6,7]). In each case, the layout methodology that could be expressed by the display hardware and associated software ultimately determined the layout data structure and most suitable compaction algorithm.
Reference: [6] <author> N. Weste, </author> <title> "Virtual Grid Symbolic Layout " Proc. </title> <booktitle> 18th ACM/IEEE Design Automation Conf., </booktitle> <address> pp.225-233, </address> <year> 1981. </year>
Reference: [7] <author> J. Ousterhout, et al., </author> <title> "Magic: A VLSI Layout System ," Proc. </title> <booktitle> 21 st ACM/IEEE Design Automation Conf. </booktitle> , <address> pp.152-159, </address> <month> June </month> <year> 1984. </year>
Reference: [8] <author> T. R. Halfhill, </author> <title> Inside the Web PC, </title> <journal> Byte Magazine , pp. </journal> <pages> 22-36, </pages> <month> March </month> <year> 1996 </year>
Reference-contexts: These arguments are part of the thrust for the adoption of Network Computers <ref> [8] </ref>. Unfortunately, network-based services remain very difficult to deploy and maintain.
Reference: [9] <author> J. Gray, </author> <title> "The Transaction Concept: Virtues and Limitations, </title> " <booktitle> Proc. VLDB , pp.144-154, </booktitle> <address> Cannes, France, </address> <month> Sept. </month> <year> 1981 </year>
Reference: [10] <author> A. Fox, et al., </author> <title> "Extensible Cluster-Based Scalable Network Services," </title> <booktitle> Proc. 16th ACM Symposium on Operating Systems Principles (SOSP-16), </booktitle> <address> St. Malo, France, </address> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: As pointed out in <ref> [10] </ref>, ACID makes no guarantee regarding availability and an ACID service would rather be unavailable than relax the ACID constraints. <p> The semantics resulting from these requirements have been referred to as BASE <ref> [10] </ref>-- Basically Available, Soft State, Eventual Consistency, and we will use this definition here. <p> While not yet capable of handling practical EDA tasks, much of the architecture and technology needed to implement such a model has been developed (e.g. [24]). One interesting architectural approach to these issues is the use of clusters of commodity workstations interconnected by a very high-speed local network <ref> [10] </ref>. In this approach, service-independent software architectures for managing partial failures and administering large clusters of machines remains a challenge.
Reference: [11] <author> A. Demers, et al., </author> <title> "The Bayou Architecture: Support for Data Sharing Among Mobile Users," </title> <note> available at www.parc.xerox.com/csl/projects/bayou/pubs/ba-mcw 94/www/MobileWorkshop_1.html </note>
Reference-contexts: On the other hand, at a number of points in the design process, it is more important to maintain high availability and low latency access to information than to ensure strong consistency or durability of the data. Approximate answers, based on stale information <ref> [11] </ref> or incomplete soft state [12], that are delivered quickly may be more valuable than precise data delivered more slowly or requiring some form of transitive closure across the entire design state.
Reference: [12] <author> D. Clark, </author> <title> "Policy Routing in Internet protocols," Internet Request for Comments No.1102 , May 1989. </title>
Reference-contexts: On the other hand, at a number of points in the design process, it is more important to maintain high availability and low latency access to information than to ensure strong consistency or durability of the data. Approximate answers, based on stale information [11] or incomplete soft state <ref> [12] </ref>, that are delivered quickly may be more valuable than precise data delivered more slowly or requiring some form of transitive closure across the entire design state.
Reference: [13] <author> A. D. Birrell, et al., "Grapevine: </author> <title> An Exercise in Distributed Computing," </title> <journal> Comm. of the ACM , 25(4), </journal> <month> Feb. </month> <year> 1984 </year>
Reference: [14] <institution> See Infoscape , at http://www.infoscape.com </institution>
Reference: [15] <institution> See NetDynamics , at http://www.netdynamics.com </institution>
Reference: [16] <institution> See ObjectStore , at http://www.odi.com. </institution>
Reference: [17] <institution> See Objectivity Version 5 at http://www.objectivity.com. </institution>
Reference: [18] <author> A. Fox, et al., </author> <title> "Adapting to Network and Client Variability via On-Demand Dynamic Distillation," </title> <booktitle> Proc. ACM 7 th International Conf. on Architectural support for Programming Languages and Operating Systems , Cambridge, </booktitle> <address> MA, </address> <month> Oct. </month> <pages> 1-5, </pages> <year> 1996. </year>
Reference-contexts: They can play the role of the conventional legacy tool "wrapper"[34] by hiding a custom interface for a particular tool or class of tools on the client side, presenting instead the generic system interface. They can also be used for data distillation <ref> [18] </ref> or datatype transcoding to provide a better match between the needs of a particular client (a user on a low-speed mobile link, for example) and the virtual server infrastructure the client is using.
Reference: [19] <institution> The Distributed Clients Project , can be found at http://www.osf.org/www/dist_client. </institution>
Reference: [20] <author> A. D. Joseph, et al., </author> <title> "Rover: A Toolkit for Mobile Information Access," </title> <booktitle> Proc. 15 th ACM Symposium on Operating Systems Principles , Copper Mountain, </booktitle> <publisher> CO., </publisher> <month> Dec. </month> <year> 1995 </year>
Reference: [21] <author> M. Abrams, et al., </author> <title> "Caching Proxies: Limitations and Potentials," </title> <booktitle> Proc. 4 th International World Wide Web Conf ., Boston, </booktitle> <address> MA, </address> <month> Dec. </month> <year> 1995 </year>
Reference: [22] <author> H.Lavana, et al., </author> <title> "Executable Workflows, "A Paradigm for Collaborative Design on the Internet," </title> <journal> Proc. 34th ACM/IEEE Design Automation Conference , June 1997. </journal> <note> Also available at http://www.cbl.ncsu.edu/publications/ </note>
Reference-contexts: Much of the distributed tool flow and collaboration work to date has been implemented under the X-Windows architecture or, more recently, using Tcl/Tk [37]. An excellent review of these projects and extensive references can be found in <ref> [22] </ref>. More recent developments utilize the Java programming environment and JavaBeans [44] and a number of efforts are investigating the application of CORBA [46] as well. <p> Cache Profiles (control state) Abstract Datatype Transcoders Network API Robust Adaptive Encoded Client API Human Tool/Server Service From an EDA on the network perspective, the REUBEN system <ref> [22] </ref> features user-defined and reconfigurable execution sequences by creating dependency edges between program nodes (application icons) and file nodes (data icons), data-dependent execution sequences by dynamic scheduling of path as well as loop executions, and host-transparency as to the location of applications and data (both can reside on any host with
Reference: [23] <institution> Javaworld online magazine contains many useful Java references at http://www.javaworld.com </institution>
Reference: [24] <institution> See Marimba, Inc . at http://www.marimba.com </institution>
Reference-contexts: While not yet capable of handling practical EDA tasks, much of the architecture and technology needed to implement such a model has been developed (e.g. <ref> [24] </ref>). One interesting architectural approach to these issues is the use of clusters of commodity workstations interconnected by a very high-speed local network [10]. In this approach, service-independent software architectures for managing partial failures and administering large clusters of machines remains a challenge.
Reference: [25] <author> M. Spiller, </author> <title> "Architecture and Infrastructure for a Distributed Design Environment--A Server Perspective", </title> <type> MS Report, </type> <institution> University of California at Berkeley, </institution> <month> August </month> <year> 1997 </year>
Reference-contexts: Some experimental systems have been implemented which register the client for interaction with other clients in the network and which implement a "heartbeat" scheme for periodically checking the reliability of communication links <ref> [25] </ref>. These schemes could be extended to provide an adaptable network fabric that adjusts automatically to problems with computer or network reliability issues. 4.
Reference: [26] <author> F. Chan, </author> <title> "Architecture and Infrastructure for a Distributed Design Environment--A Client Perspective," </title> <type> MS Report, </type> <institution> University of California at Berkeley, </institution> <month> May, </month> <year> 1997 </year>
Reference: [27] <institution> See Runtime Design Automation , at http://www.rtda.com </institution>
Reference: [28] <institution> See Synchronicity at http://www.syncinc.com </institution>
Reference: [29] <institution> See Electronic Design and Technology Network (EDTN) at http://www.edtn.com </institution>
Reference: [30] <institution> See Aspect Development, Inc ., at http://www.aspectonline.com </institution>
Reference: [31] <author> See CREW, </author> <title> The Collaboratory for Research on Electronic Work at www.crew.umich.edu, </title>
Reference-contexts: There are a number of commercial systems available that already tackle specific aspects of the distributed workflow management task for EDA (e.g.[27-30]). CREW, The Collaboratory for Research on Electronic Work at the University of Michigan <ref> [31] </ref>, focuses on the design of new organizations and the technologies of voice, data, and video communication that make them possible. The site contains an comprehensive set of on-line references to work on collaboration at many different levels.
Reference: [32] <institution> See DARPA's Intelligent Collaboration & Visualization program (IC&V) at http://www.ito.darpa.mil/ResearchAreas96/IntellCollabVi sual.html </institution>
Reference-contexts: The site contains an comprehensive set of on-line references to work on collaboration at many different levels. Another major project that involves the application of visualization technologies to collaboration is DARPA's Intelligent Collaboration & Visualization (IC&V) program <ref> [32] </ref> is chartered to enable teams, consisting of individuals with specific roles, and teams of teams to collaborate more effectively through distributed information systems that encode relevant knowledge, expertise, and semantics and that permit multiple, shareable views of common collaborative information spaces.
Reference: [33] <author> William J. Bolosky, et al., </author> <title> "Operating System Directions for the Next Millennium," </title> <note> Position Paper , available at http://www.research.microsoft.com/research/os/Millenniu m/mgoals.html </note>
Reference: [34] <author> D. S. Harrison, et al., </author> <title> "Electronic CAD Frameworks, </title> ". <booktitle> Proceedings of the IEEE , Vol.78, No.2, </booktitle> <address> pp.1062-1081, </address> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: In the early part of this decade, EDA systems were built upon a framework model that could be characterized as shown in Figure 2 <ref> [34] </ref>. Fig. 2: EDA Framework Model [34] Operating system services were abstracted as supporting user interaction, process services , local storage , or network services. <p> In the early part of this decade, EDA systems were built upon a framework model that could be characterized as shown in Figure 2 <ref> [34] </ref>. Fig. 2: EDA Framework Model [34] Operating system services were abstracted as supporting user interaction, process services , local storage , or network services. These facilities were then grouped into those that supported process management and those that supported physical data management , including distributed data management on a network.
Reference: [35] <author> J.Daniell and S.W. </author> <title> Director, "An Object Oriented Approach to CAD Tool Control Within a Design Framework," </title> <journal> IEEE Transactions on Computer-Aided Design , Vol.10, No.6, </journal> <volume> pp.98-713, </volume> <month> Jun. </month> <year> 1991. </year>
Reference: [36] <author> A. Casotto and A. L. Sangiovanni-Vincentelli, </author> <title> "Automated Design Management Using Traces," </title> <journal> IEEE Trans on Computer-Aided Design , Vol.12, No.8, </journal> <volume> pp.1077-1095, </volume> <month> Aug. </month> <year> 1993. </year>
Reference: [37] <author> J. K. Ousterhout. </author> <title> Tcl and the Tk Toolkit , Addison-Wesley, </title> <year> 1994. </year>
Reference-contexts: Much of the distributed tool flow and collaboration work to date has been implemented under the X-Windows architecture or, more recently, using Tcl/Tk <ref> [37] </ref>. An excellent review of these projects and extensive references can be found in [22]. More recent developments utilize the Java programming environment and JavaBeans [44] and a number of efforts are investigating the application of CORBA [46] as well.
Reference: [38] <author> Amin Vahdat, et al. </author> <title> "Turning the Web Into a Computer," </title> <note> available at http://now.cs.berkeley.edu/WebOS/webos.ps, 1996. </note>
Reference: [39] <author> Kistler & Satya 92] J. J. Kistler and M. Satyanarayanan. </author> <title> "Disconnected Operation in the Coda File System." </title> <journal> ACM Trans. on Computer Systems , Vol. </journal> <volume> 10, No.1, pp.325, </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: Recent advances in operating systems and networking both demonstrate this trend and provide the technical underpinnings for another step forward. In particular, work in distributed file systems (e.g. <ref> [39] </ref>) has succeeded in providing efficient location-transparent access to data. For a glimpse into one possible future here, see [33,38]. No matter what direction we head, it is clear that electronic system design is poised to benefit early from these revolutionary developments in the use of distributed computing infrastructure.
Reference: [40] <editor> Special Issue on Bayesian Networks: </editor> <booktitle> Comm. of the ACM ., vol. </booktitle> <volume> 38, no. 3,.March, </volume> <year> 1995, </year>
Reference-contexts: This is also an area under active research and one which lends itself to many modern innovations. For example, in the WELD project [42], we are exploring the use of probabilistic learning, based on Bayesian reasoning <ref> [40] </ref> as an approach to managing aspects of the adaptability and robustness concerns. The implementation of an efficient BASE technology would suggest the use of caching techniques to improve overall system performance.
Reference: [41] <author> P. van der Wolf, </author> <title> CAD Frameworks: </title> <publisher> Principles and Architecture , Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1994 </year>
Reference: [42] <author> WELD: </author> <title> Web Based Electronic Design can be found under www-cad.eecs.Berkeley.edu/Respep/Research/weld, March, </title> <year> 1996. </year>
Reference-contexts: It is via the network interface that the system must meet its goals of scalability, availability, robustness, and adaptability. This is also an area under active research and one which lends itself to many modern innovations. For example, in the WELD project <ref> [42] </ref>, we are exploring the use of probabilistic learning, based on Bayesian reasoning [40] as an approach to managing aspects of the adaptability and robustness concerns. The implementation of an efficient BASE technology would suggest the use of caching techniques to improve overall system performance.
Reference: [43] <author> E. </author> <type> Brewer, </type> <institution> University of California at Berkeley, </institution> <type> Private Communication. </type>
Reference-contexts: In one approach, the use of a broadcast mechanism, such as the MBONE [45] has been suggested for control-state management (e.g. "who has the master copy of a dataset?") while data-sets or programs themselves are shipped around via unicast point-to-point mechanisms <ref> [43] </ref>. Modern VLSI designs consist of working sets approaching 4 gigabytes of data today and designs in the future will require considerably larger working sets, unless the EDA industry finds truly effective ways of implementing partitioned design (via the exploitation of regularity or hierarchy).
Reference: [44] <institution> A number of excellent references for JavaBeans can be found at http://splash.javasoft.com/beans/. </institution>
Reference-contexts: Much of the distributed tool flow and collaboration work to date has been implemented under the X-Windows architecture or, more recently, using Tcl/Tk [37]. An excellent review of these projects and extensive references can be found in [22]. More recent developments utilize the Java programming environment and JavaBeans <ref> [44] </ref> and a number of efforts are investigating the application of CORBA [46] as well.
Reference: [45] <institution> An excellent introduction to the MBONE, "MBONE (Multicast Backbone)" by Jean Bunn, Geneva University, </institution> <note> is available at http://www.unige.ch/seinf/mbone.html </note>
Reference-contexts: This is a topic of active research as well. Some approaches that have been suggested for maintaining consistency in the distributed data network include the use of separate "control" and "data" distribution. In one approach, the use of a broadcast mechanism, such as the MBONE <ref> [45] </ref> has been suggested for control-state management (e.g. "who has the master copy of a dataset?") while data-sets or programs themselves are shipped around via unicast point-to-point mechanisms [43].
Reference: [46] <institution> See "The Object Management Group's Common Object Request Broker Architecture (OMG/CORBA)" at http://www.acl.lanl.gov/CORBA/ for more details and an extensive list of references. </institution>
Reference-contexts: An excellent review of these projects and extensive references can be found in [22]. More recent developments utilize the Java programming environment and JavaBeans [44] and a number of efforts are investigating the application of CORBA <ref> [46] </ref> as well.
References-found: 46

