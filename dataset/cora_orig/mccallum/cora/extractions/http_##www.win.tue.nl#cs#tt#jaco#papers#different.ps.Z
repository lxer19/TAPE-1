URL: http://www.win.tue.nl/cs/tt/jaco/papers/different.ps.Z
Refering-URL: http://www.win.tue.nl/cs/tt/jaco/papers/
Root-URL: http://www.win.tue.nl
Title: Two Different Strong Normalization Proofs? computability versus functionals of finite type  
Author: Jaco van de Pol 
Date: October 5, 1995  
Abstract: A proof of 8t9nSN(t; n) (term t performs at most n reduction steps) is given, based on strong computability predicates. Using modified realizability, a bound on reduction lengths is extracted from it. This upper bound is compared with the one Gandy defines, using strictly monotonic functionals. This reveals a remarkable connection between his proof and Tait's. We show the details for simply typed -calculus and Godel's T. For the latter system, program extraction yields considerably sharper upper bounds. 
Abstract-found: 1
Intro-found: 1
Reference: [Ber93] <author> Ulrich Berger. </author> <title> Program extraction from normalization proofs. </title> <editor> In M. Bezem and J.F. Groote, editors, </editor> <booktitle> Proc. of TLCA '93, Utrecht, volume 664 of LNCS, </booktitle> <pages> pages 91-106. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Finally, the same project is carried out for Godel's T in Section 6, after which a conclusion follows (Section 7). The idea of using a realizability interpretation to extract functionals from a normalization proof already occurs in <ref> [Ber93] </ref>. A difference is that he uses the same machinery to compute the normal form of a term. The contribution of this paper is that we compute numerical upper bounds for the length of reduction sequences, thus enabling a comparison with Gandy's proof. <p> To this end we use modified realizability, introduced by Kreisel [Kre59]. In [Tro73, x 3.4] modified realizability is presented as a translation of HA ! into itself. This interpretation eliminates existential quantifiers, at the cost of introducing functions of finite type (functionals), represented by lambda terms. Following Berger <ref> [Ber93] </ref>, we present modified realizability as an interpretation of a first order fragment (MF) into a higher-order, negative (i.e. 9-free) fragment (NH). We will work in the setting of minimal predicate logic (i.e. negation plays no special role), formalized by means of natural deduction. <p> Both can be easily verified by induction on d. Because of the second fact, the correctness formula ep (d) mr ' is well defined, and will be a formula of NH. The whole theory comes together in the following Theorem 4.7. Soundness theorem <ref> [Ber93] </ref>. If d ' is an MF-derivation, then an NH-derivation (d) can be given of ep (d) mr '. More over, FA ((d)) fu ~x u mr' ju ' 2 FA (d)g. <p> Induction is needed to deal with Godel's T in Section 6. This is well known theory, apart from the axioms under (2), which explore the special nature of the 8-quantifier. Axioms as under (1) are exploited in <ref> [Ber93] </ref>. Case (3) and (4) can be found in [Tro73]. 4.3.1 9-free Axioms and Harrop Formulae Consider a 9-free MF formula '. We have o (') = *, so the only potential realizer is the empty sequence. Let ' 0 be the formula obtained from ' by deleting all underlinings. <p> After substituting r [~x := ~ t ] for t, and using the abovementioned equation (thus avoiding that variables in ~ t become bound), we get Axiom 4. 1 Strictly speaking, <ref> [Ber93] </ref> erroneously ignores this subtlety. 16 5.2 Proof Terms and Extracted Programs As in the informal proof, we define formulae SC ae (t) by induction on the type ae.
Reference: [dV87] <author> Roel de Vrijer. </author> <title> Exactly estimating functionals and strong normalization. </title> <journal> Proc. of the Koninklijke Nederlandse Akademie van Wetenschappen, </journal> <volume> 90(4) </volume> <pages> 479-493, </pages> <month> Dec </month> <year> 1987. </year>
Reference-contexts: The number is an upper bound for the length of reduction sequences starting from a certain term. This method was invented by Gandy [Gan80]. De Vrijer <ref> [dV87] </ref> used a variant to compute the exact length of the longest reduction sequence. Van de Pol [vdP94] adapted the notion of strict monotonicity to the general case of higher-order rewrite systems. <p> The proof using functionals seems to be more transparent and economizes on proof theoretical complexity. On the other hand, seeing the two proofs one gets the feeling that "somehow, the same thing is going on". Indeed De Vrijer <ref> [dV87, x 0.1] </ref> remarks that a proof using strong computability can be seen as abstracting from concrete information in the functionals that is not strictly needed in a termination proof, but which provides for an estimate of reduction lengths. In this paper we will substantiate this feeling. <p> This formula is equivalent to 8p8m:SN (p; m) ! 9nSN (rp; n). So we can bound the reduction length of rp uniformly in the upper bound for p. More precisely, if SN (p; m) then SN (rp; [[r]](m)). A stronger version of this uniformity principle appears in <ref> [dV87, x 2.3.4] </ref>). Note that the uniformity principle doesn't hold if we substitute R o st for r: Although SN (S k 0; 0) holds for each k, Rst (S k 0) can perform k reduction steps. So SC (Rst) cannot hold.
Reference: [Gan80] <author> R.O. </author> <title> Gandy. Proofs of strong normalization. </title> <editor> In J.R. Hindley and J.P. Seldin, editors, </editor> <booktitle> To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 457-477. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1980. </year>
Reference-contexts: In order to achieve that a rewrite step gives rise to a decrease of the associated number, the notion strictly monotonic functional is developed. The number is an upper bound for the length of reduction sequences starting from a certain term. This method was invented by Gandy <ref> [Gan80] </ref>. De Vrijer [dV87] used a variant to compute the exact length of the longest reduction sequence. Van de Pol [vdP94] adapted the notion of strict monotonicity to the general case of higher-order rewrite systems. <p> ( s ) : nat, ep ( s ) = ep ( oe )(ep ( s;~x )(ep ( o 1 )0) (ep ( o n )0)) 5.3 Comparison with Gandy's Proof In order to compare the extracted programs from the formalized proofs with the strictly monotonic functionals used by Gandy <ref> [Gan80] </ref>, we recapitulate these programs and introduce a readable notation for them. <p> This expression can be compared with the functionals in the proof of Gandy. First of all, the ingredients are the same. In <ref> [Gan80] </ref> a functional (say G) is defined playing the role of both S and M (and indeed, S oe!nat = M oe ). S is a special strictly monotonic functional and M serves as a measure on functionals. <p> For simply typed lambda calculus this result follows smoothly. For Godel's T some effort was involved in discovering and proving the right axioms, expressing the basic combinatorics. This effort has paid off, because we found sharper upper bounds than in <ref> [Gan80, vdPS95] </ref>. Moreover, the new upper bound puts a bound on the sum of the length and numerical value of reduction sequences. This information helps to improve the proof that uses strictly monotonic functionals. This research aims at a convenient method to prove termination of higher-order rewrite systems. <p> This information helps to improve the proof that uses strictly monotonic functionals. This research aims at a convenient method to prove termination of higher-order rewrite systems. There are a number of examples where theory about strictly monotonic functionals has been applied successfully <ref> [Gan80, vdP94, vdPS95] </ref>. The connection found in this paper helps to find appropriate functionals by inspecting proofs using computability predicates. These functionals can be used to give upper bounds for reduction lengths and also to deal with extensions of the initial system in a flexible way.
Reference: [Gir72] <author> J.-Y. Girard. </author> <title> Interpretation fonctionelle et elimination des coupures dans l'arithetique d'ordre superieur. </title> <type> PhD thesis, </type> <institution> Universite Paris VII, </institution> <year> 1972. </year>
Reference-contexts: The first method uses the notion of strong computability predicates. This method is attributed to Tait [Tai67], who used convertibility predicates to prove a normal form theorem for various systems. Prawitz [Pra71] and Girard <ref> [Gir72] </ref> introduced stronger variants, to deal with permutative conversions (arising from natural deduction for first order predicate logic) and the impredicative system F, respectively.
Reference: [Gir87] <author> J.-Y. Girard. </author> <title> Proof theory and Logical Complexity, volume I. Studies in Proof Theory. </title> <type> Bibliopolis, </type> <institution> Napoli, </institution> <year> 1987. </year>
Reference-contexts: In the literature, these two methods are often put in contrast ([Gan80, x 6.3] and <ref> [Gir87, annex 2.C.1] </ref>). The proof using functionals seems to be more transparent and economizes on proof theoretical complexity. On the other hand, seeing the two proofs one gets the feeling that "somehow, the same thing is going on".
Reference: [Kre59] <author> G. Kreisel. </author> <title> Interpretation of analysis by means of constructive functionals of finite types. </title> <editor> In A. Heyting, editor, </editor> <booktitle> Constructivity in Mathematics, </booktitle> <pages> pages 101-128. </pages> <publisher> North-Holland, </publisher> <year> 1959. </year>
Reference-contexts: We prefer to use a general method for extracting a program from it. This guarantees the objectivity of the claimed connection between the SN proofs using strong computability and those using strictly monotonic functionals. To this end we use modified realizability, introduced by Kreisel <ref> [Kre59] </ref>. In [Tro73, x 3.4] modified realizability is presented as a translation of HA ! into itself. This interpretation eliminates existential quantifiers, at the cost of introducing functions of finite type (functionals), represented by lambda terms.
Reference: [Pra71] <author> D. Prawitz. </author> <title> Ideas and results in proof theory. </title> <editor> In Jens Erik Fenstad, editor, </editor> <booktitle> Proc. of the Second Scandinavian Logic Symposium, </booktitle> <pages> pages 235-307, </pages> <address> Amsterdam, 1971. </address> <publisher> North-Holland. </publisher>
Reference-contexts: 1 Introduction The purpose of this paper is to compare two different methods to prove strong normalization. The first method uses the notion of strong computability predicates. This method is attributed to Tait [Tai67], who used convertibility predicates to prove a normal form theorem for various systems. Prawitz <ref> [Pra71] </ref> and Girard [Gir72] introduced stronger variants, to deal with permutative conversions (arising from natural deduction for first order predicate logic) and the impredicative system F, respectively.
Reference: [Tai67] <author> W.W. Tait. </author> <title> Intensional interpretation of functionals of finite types I. </title> <journal> JSL, </journal> <volume> 32 </volume> <pages> 198-212, </pages> <year> 1967. </year>
Reference-contexts: 1 Introduction The purpose of this paper is to compare two different methods to prove strong normalization. The first method uses the notion of strong computability predicates. This method is attributed to Tait <ref> [Tai67] </ref>, who used convertibility predicates to prove a normal form theorem for various systems. Prawitz [Pra71] and Girard [Gir72] introduced stronger variants, to deal with permutative conversions (arising from natural deduction for first order predicate logic) and the impredicative system F, respectively.
Reference: [Tro73] <author> A.S. Troelstra. </author> <title> Metamathematical Investigation of Intuitionistic Arithmetic and Analysis. Number 344 in LNM. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <note> second, corrected edition, 1973. appeared as ILLC X-93-05, </note> <institution> University of Amsterdam. </institution>
Reference-contexts: We prefer to use a general method for extracting a program from it. This guarantees the objectivity of the claimed connection between the SN proofs using strong computability and those using strictly monotonic functionals. To this end we use modified realizability, introduced by Kreisel [Kre59]. In <ref> [Tro73, x 3.4] </ref> modified realizability is presented as a translation of HA ! into itself. This interpretation eliminates existential quantifiers, at the cost of introducing functions of finite type (functionals), represented by lambda terms. <p> Induction is needed to deal with Godel's T in Section 6. This is well known theory, apart from the axioms under (2), which explore the special nature of the 8-quantifier. Axioms as under (1) are exploited in [Ber93]. Case (3) and (4) can be found in <ref> [Tro73] </ref>. 4.3.1 9-free Axioms and Harrop Formulae Consider a 9-free MF formula '. We have o (') = *, so the only potential realizer is the empty sequence. Let ' 0 be the formula obtained from ' by deleting all underlinings. We have * mr ' j ' 0 . <p> If d ' is the MF-derivation, ~ t can be obtained from ep (d) by deleting all free variables introduced by the axioms IP, IU and intro. We will not address the question whether the inverse of this soundness result also holds. In <ref> [Tro73, x 3.4.8] </ref> it is proved that HA ! +IP+AC, axiomatizes modified realizability. <p> Induction can be postulated by introducing axioms ind ' : '(0) ! (8n'(n) ! '(Sn)) ! 8n'(n): In the general case, induction can be realized by simultaneous primitive recursion operators (See <ref> [Tro73, x 1.6.16, x 3.4.5] </ref>). We will only deal with the special case that o (') j oe, so the induction formula is realized by exactly one term. We only need this special case, for which the usual recursion operator is a potential realizer. <p> So here we lose a kind of uniformity. It is well known that the absence of a uniform first-order proof is essential, because the computability predicate is not arithmetizable <ref> [Tro73, x 2.3.11] </ref>. Another incompleteness arises, because some combinatorial results are plugged in as axioms. This second incompleteness is harmless for our purpose, because all these axioms are formulated without using existential quantifiers. <p> All these axioms are realized by the identity, which we left out. Remark: In <ref> [Tro73, x 2.2.18] </ref> Konig's Lemma (or intuitionistically the Fan Theorem) is used to prove that in the reduction tree of a strongly normalizing term, the maximal value is bounded.
Reference: [vdP94] <author> Jaco van de Pol. </author> <title> Termination proofs for higher-order rewrite systems. </title> <editor> In J. Heering et al., editor, </editor> <booktitle> Proc. of HOA '93, volume 816 of LNCS, </booktitle> <pages> pages 305-325. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The number is an upper bound for the length of reduction sequences starting from a certain term. This method was invented by Gandy [Gan80]. De Vrijer [dV87] used a variant to compute the exact length of the longest reduction sequence. Van de Pol <ref> [vdP94] </ref> adapted the notion of strict monotonicity to the general case of higher-order rewrite systems. <p> This information helps to improve the proof that uses strictly monotonic functionals. This research aims at a convenient method to prove termination of higher-order rewrite systems. There are a number of examples where theory about strictly monotonic functionals has been applied successfully <ref> [Gan80, vdP94, vdPS95] </ref>. The connection found in this paper helps to find appropriate functionals by inspecting proofs using computability predicates. These functionals can be used to give upper bounds for reduction lengths and also to deal with extensions of the initial system in a flexible way.
Reference: [vdPS95] <author> Jaco van de Pol and Helmut Schwichtenberg. </author> <title> Strict functionals for termination proofs. </title> <editor> In M. Dezani-Ciancaglini and G. Plotkin, editors, </editor> <booktitle> Proc. of TLCA'95, volume 902 of LNCS, </booktitle> <pages> pages 350-364. </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year> <month> 29 </month>
Reference-contexts: De Vrijer [dV87] used a variant to compute the exact length of the longest reduction sequence. Van de Pol [vdP94] adapted the notion of strict monotonicity to the general case of higher-order rewrite systems. Schwichtenberg and fl Department of Philosophy, Utrecht University. e-mail: jaco@phil.ruu.nl 1 Van de Pol <ref> [vdPS95] </ref> applied the adapted notion to simply typed lambda calculus, Godel's T and natural deduction with permutative conversions for the existential quantifier. In the literature, these two methods are often put in contrast ([Gan80, x 6.3] and [Gir87, annex 2.C.1]). <p> For simply typed lambda calculus this result follows smoothly. For Godel's T some effort was involved in discovering and proving the right axioms, expressing the basic combinatorics. This effort has paid off, because we found sharper upper bounds than in <ref> [Gan80, vdPS95] </ref>. Moreover, the new upper bound puts a bound on the sum of the length and numerical value of reduction sequences. This information helps to improve the proof that uses strictly monotonic functionals. This research aims at a convenient method to prove termination of higher-order rewrite systems. <p> This information helps to improve the proof that uses strictly monotonic functionals. This research aims at a convenient method to prove termination of higher-order rewrite systems. There are a number of examples where theory about strictly monotonic functionals has been applied successfully <ref> [Gan80, vdP94, vdPS95] </ref>. The connection found in this paper helps to find appropriate functionals by inspecting proofs using computability predicates. These functionals can be used to give upper bounds for reduction lengths and also to deal with extensions of the initial system in a flexible way. <p> The connection found in this paper helps to find appropriate functionals by inspecting proofs using computability predicates. These functionals can be used to give upper bounds for reduction lengths and also to deal with extensions of the initial system in a flexible way. In <ref> [vdPS95] </ref>, upper bounds for a reduction relation including permutative reductions are given. It seems impossible to extract such functionals from Prawitz's proof, because his notion of strong validity requires a more general form of inductive definitions.
References-found: 11

