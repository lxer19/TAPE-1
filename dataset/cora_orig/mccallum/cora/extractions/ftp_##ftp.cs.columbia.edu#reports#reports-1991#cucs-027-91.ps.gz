URL: ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-027-91.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1991.html
Root-URL: http://www.cs.columbia.edu
Title: Implementing Activity Structures Process Modeling On Top Of The MARVEL Environment Kernel Final Report for
Author: Gail E. Kaiser, Israel Z. Ben-Shaul and Steven S. Popovich Gail E. Kaiser, Israel Z. Ben-Shaul and Steven S. Popovich 
Note: Copyright 1991  
Date: 13 September 1991  
Address: New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Pubnum: CUCS-027-91  
Abstract: Our goal was to implement the activity structures model defined by Software Design & Analysis on top of the MARVEL environment kernel. This involved further design of the activity structures process definition language and enaction model as well as translation and run-time support in terms of facilities provided by MARVEL. The result is an elegant declarative control language for multi-user software processes, with data and activities defined as classes and rules in the previously existing MARVEL Strategy Language. Semantics-based concurrency control is provided by a combination of the MARVEL kernel's lock and transaction managers and the send/receive synchronization primitives of the activity structures model. This research was funded in part through a consulting contract with Software Design & Analysis. The Programming Systems Laboratory is supported by National Science Foundation grants CCR-9106368, CCR-9000930 and CCR-8858029, by grants from AT&T, BNR, DEC and SRA, by the New York State Center for Advanced Technology in Computers and Information Systems and by the NSF Engineering Research Center for Telecommunications Research. Popovich is supported in part by NASA grant NGT 50583. 
Abstract-found: 1
Intro-found: 1
Reference: [Avrunin 86] <author> George S. Avrunin, Laura K. Dillon, Jack C. Wileden and William E. Riddle. </author> <title> Constrained Expressions: Adding Analysis Capabilities to Design Methods for Concurrent Software Systems. </title> <journal> IEEE Transactions on Software Engineering SE-12(2):278-292, </journal> <month> February, </month> <year> 1986. </year> <month> 39 </month>
Reference-contexts: An activity structure might be defined by either a single string or by multiple strings. The latter might follow the approach described by Avrunin et al. <ref> [Avrunin 86] </ref>, where there is a main system structure plus additional constraint structures, and the constraints refine the set of activities traces that are consistent with the intended process. We did not investigate the feasibility of translating and executing single activity structures specified by multiple strings.
Reference: [Barghouti 90] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling Concurrency in Rule-Based Development Environments. </title> <booktitle> IEEE Expert 5(6) </booktitle> <pages> 15-27, </pages> <month> December, </month> <year> 1990. </year>
Reference-contexts: Read locks are obtained during the evaluation of the condition, as needed. (This behavior may in MARVEL version 3.1, which is planned to incorporate many of Naser Barghouti's thesis results <ref> [Barghouti 90, Barghouti 9x] </ref>.) In contrast, MARVEL permits any concurrency relationship among edit (X) and proof (Y), assuming there is no containment relation between X and Y (MARVEL automatically places intention locks on enclosing objects), so that they could in fact overlap in time and are thus non-atomic.
Reference: [Barghouti 91] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling Up Rule-Based Development Environments. </title> <booktitle> In 3rd European Software Engineering Conference. </booktitle> <address> Milano, Italy, </address> <month> October, </month> <year> 1991. </year> <note> In press. </note> <institution> Available as Columbia University Department of Computer Science, CUCS-047-90, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: after the environment has been in real use, and then evolving the environment on or off-line. (A small ``test'' objectbase is used in debugging the specifications, which are typically modified significantly during debugging.) We are studying the feasibility of off-line evolution 2 for MSL rules, and have made some progress <ref> [Barghouti 91] </ref>, but evolution for in-use objectbases is outside the scope of this project. An activity structure might be defined by either a single string or by multiple strings.
Reference: [Barghouti 9x] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, 199x. </institution>
Reference-contexts: Read locks are obtained during the evaluation of the condition, as needed. (This behavior may in MARVEL version 3.1, which is planned to incorporate many of Naser Barghouti's thesis results <ref> [Barghouti 90, Barghouti 9x] </ref>.) In contrast, MARVEL permits any concurrency relationship among edit (X) and proof (Y), assuming there is no containment relation between X and Y (MARVEL automatically places intention locks on enclosing objects), so that they could in fact overlap in time and are thus non-atomic.
Reference: [Ben-Shaul 91] <author> Israel Z. Ben-Shaul. </author> <title> An Object Management System for Multi-User Programming Environments. </title> <type> Master's thesis, </type> <institution> Columbia University, </institution> <month> April, </month> <year> 1991. </year>
Reference-contexts: July 31: Second design document. August 1-2: Meeting. August 6: Preliminary version available by ftp. August 12: Third design document. August 23: Fourth design document. Contract ends. September 16-17: Final report, installation and presentation. 7 2. MARVEL Concepts The multi-user MARVEL system is based on a client/server architecture <ref> [Ben-Shaul 91] </ref>, where the clients communicate with the server via tcp/ip sockets. A MARVEL server can support zero or more clients sharing access to the same objectbase.
Reference: [Gaede 91] <author> Steven L. Gaede, Brian Nejmeh and William E. Riddle. </author> <title> Interim Report Process Management: Infrastructure Exploration Project. </title> <type> Technical Report 7-48-5, </type> <institution> Software Design & Analysis, </institution> <month> March, </month> <year> 1991. </year>
Reference-contexts: Graphical presentation in the style of Steve Gaede's environment <ref> [Gaede 91] </ref>, presenting activity structures only, with no conceptual or visible links to data. Graphical presentation of instantiated activity structures, including user-visible links to actual data instances employed in activities.
Reference: [Gisi 91] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending A Tool Integration Language. </title> <booktitle> In 1st International Conference on the Software Process. </booktitle> <address> Los Angeles CA, </address> <month> October, </month> <year> 1991. </year> <note> In press. </note> <institution> Available as Columbia University Department of Computer Science CUCS-014-91, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: activity consists of the name of a tool, the name of an envelope corresponding to a particular option or switch of that tool, and a collection of arguments to be provided to the envelope from among the attributes of formal and derived parameters. (The envelope language is the subject of <ref> [Gisi 91] </ref>.) One important restriction is that the effects of a rule can only assign the attributes of formal parameters, not derived parameters. Therefore, forward chaining to another rule with the desired formal parameter (s) is often employed to undertake the desired side-effects of a command.
Reference: [Heineman 91] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti and Israel Z. Ben-Shaul. </author> <title> Rule Chaining in MARVEL: Dynamic Binding of Parameters. </title> <booktitle> In 6th Knowledge-Based Software Engineering Conference. </booktitle> <address> Syracuse NY, </address> <month> September, </month> <year> 1991. </year> <note> In press. </note> <institution> Available as Columbia University Department of Computer Science CUCS-022-91, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The corresponding actual parameters must be supplied explicitly by the user as arguments to a command, or determined by a complex parameter passing process during chaining (this is the subject of <ref> [Heineman 91] </ref>). Derived parameters are determined in the optional bindings portion of each rule (also known as the "characteristic function", and not to be confused with data bindings for the Activity Structure Language (ASL), discussed in section 9).
Reference: [Kaiser 88] <author> Gail E. Kaiser, Peter H. Feiler and Steven S. Popovich. </author> <title> Intelligent Assistance for Software Development and Maintenance. </title> <booktitle> IEEE Software 5(3) </booktitle> <pages> 40-49, </pages> <month> May, </month> <year> 1988. </year>
Reference-contexts: Popovich is supported in part by NASA grant NGT 50583. 1 1. Overview 1.1. Introduction The basic goal is to implement activities structures [Riddle 91] on top of MARVEL <ref> [Kaiser 88, Kaiser 90] </ref>, as one approach to supporting a high-level software process control layer for MARVEL.
Reference: [Kaiser 90] <author> Gail E. Kaiser, Naser S. Barghouti and Michael H. Sokolsky. </author> <title> Experience with Process Modeling in the Marvel Software Development Environment Kernel. </title> <editor> In Bruce Shriver (editor), </editor> <booktitle> 23rd Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 131-140. </pages> <address> Kona HI, </address> <month> January, </month> <year> 1990. </year>
Reference-contexts: Popovich is supported in part by NASA grant NGT 50583. 1 1. Overview 1.1. Introduction The basic goal is to implement activities structures [Riddle 91] on top of MARVEL <ref> [Kaiser 88, Kaiser 90] </ref>, as one approach to supporting a high-level software process control layer for MARVEL.
Reference: [Riddle 91] <author> William E. Riddle. </author> <title> Activity Structure Definitions. </title> <type> Technical Report 7-52-3, </type> <institution> Software Design & Analysis, </institution> <month> March, </month> <year> 1991. </year>
Reference-contexts: Popovich is supported in part by NASA grant NGT 50583. 1 1. Overview 1.1. Introduction The basic goal is to implement activities structures <ref> [Riddle 91] </ref> on top of MARVEL [Kaiser 88, Kaiser 90], as one approach to supporting a high-level software process control layer for MARVEL.
Reference: [Sokolsky 91] <author> Michael H. Sokolsky and Gail E. </author> <note> Kaiser. </note>
Reference-contexts: The messages might indicate either a new command (either built-in or a rule) or the completion of an activity. The server takes a message from the queue. If it is a built-in, it executes the command atomically even if it is an extremely long duration command, notably Marvelizer <ref> [Sokolsky 91] </ref>. If the command is a rule, then any chaining among inference rules happens atomically in the server. An inference rule has a null activity, and is used to derive values of attributes from related attributes.
References-found: 12

