URL: ftp://mancos.cs.utah.edu/papers/metaos-hotos5.ps.Z
Refering-URL: ftp://mancos.cs.utah.edu/papers/metaos-hotos5.html
Root-URL: 
Email: E-mail: dbo@cs.utah.edu  
Title: Application of Meta-Protocols to Improve OS Services  
Author: Douglas B. Orr 
Address: Salt Lake City, Ut. 84112  
Affiliation: University of Utah  
Abstract: User control of the implementation of OS services is the target of many current OS research efforts. The majority of these efforts require the OS to be substantially modified to expose its previously internal interfaces, with applications modified to reference these interfaces. Recent work in languages has centered on the use of meta-protocols to improve application implementations. Meta-protocols are application protocols that specify how an application works, as opposed to what the application does. Meta-protocols permit application implementations to be specialized to their expected operating conditions, eliminating OS provisions for uncommon or impossible cases. We believe these specializations will result in significant performance improvements, transparent to the application. We present a set of tools for realizing this per-application specialization. 1 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 86] <author> Mike Accetta, Robert Baron, William Bolosky, David Golub, Richard Rashid, Avadis Tevanian, and Michael Young. </author> <title> Mach: A new kernel foundation for UNIX development. </title> <booktitle> In Proc. of the Summer 1986 USENIX Conference, </booktitle> <pages> pages 93-112, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: The system is used to optimize the execution of applications that access Unix facilities via a Unix server executing on top of the Mach <ref> [ABB + 86] </ref> microkernel. 2 Meta-protocol Architecture In this system, applications are constructed from modules. A module is a collection of interfaces and the corresponding program code that implements them.
Reference: [BCE + 94] <author> Brian Bershad, Craig Chambers, Susan Eggers, Chris Maeda, Dylan McNamee, Przemyslaw Pardyak, Stefan Savage, and Emin Gun Sirer. </author> <title> SPIN an extensible mi-crokernel for application-specific operating system services. </title> <institution> Department of Computer Science and Engineering TR-94-03-03, University of Washington, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: A great deal of work has gone into understanding meta-protocols in the LISP community [KdRB91]. Much work is currently underway in the operating system community to provide more complete descriptions of the service requested to service providers <ref> [BCE + 94, DPH92] </ref>. We have presented a system for implementing meta-protocols in an extended Unix system, using link-time, exec-time, and run-time support. We have demonstrated how this system could be applied to problems specific to several Unix services.
Reference: [BL92] <author> Gilad Bracha and Gary Lindstrom. </author> <title> Modularity meets inheritance. </title> <booktitle> In Proc. International Conference on Computer Languages, </booktitle> <pages> pages 282-290, </pages> <address> San Francisco, CA, </address> <month> April 20-23 </month> <year> 1992. </year> <journal> IEEE Computer Society. </journal> <note> Also available as Technical Report UUCS-91-017. </note>
Reference-contexts: Stk has been extended with datatypes that represent OMOS module specifications and program fragments. The primitive operations in this extension language include a set of operations designed to manipulate object file symbols and interfaces. These operations are based on a formal model described in <ref> [Bra92, BL92] </ref>, that provides a basis for relating modularity and inheritance. Operands to module operations may be executable fragments or the results of executing other module operations.
Reference: [Bra92] <author> Gilad Bracha. </author> <title> The Programming Language Jigsaw : Mixins, Modularity and Multiple Inheritance. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <month> March </month> <year> 1992. </year> <pages> 143 pp. </pages>
Reference-contexts: Stk has been extended with datatypes that represent OMOS module specifications and program fragments. The primitive operations in this extension language include a set of operations designed to manipulate object file symbols and interfaces. These operations are based on a formal model described in <ref> [Bra92, BL92] </ref>, that provides a basis for relating modularity and inheritance. Operands to module operations may be executable fragments or the results of executing other module operations.
Reference: [Bus94] <author> Michael I. Bushnell. </author> <title> Towards a new strategy of OS design. </title> <booktitle> In GNU's Bulletin, </booktitle> <address> Cambridge, MA, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: The Apollo Domain system used user-space implementations for I/O objects [LLD + 83, ROS87]; it used a complicated protocol to marshal and unmarshal file descriptor state before and after fork operations. The GNU Hurd <ref> [Bus94] </ref> project is following a similar path. The Mach Multiserver [JCS + 91] project experienced simi-lar issues in the domain of Mach ports. Related work was done by [Jon90] exploit the use of different implementations of system calls as a way of specializing or extending system behavior.
Reference: [DPH92] <author> Peter Druschel, Larry L. Peterson, and Norman C. Hutchinson. </author> <title> Beyond micro-kernel design: Decoupling modularity and protection in Lipto. </title> <booktitle> In Proc. of the 12th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 512-520, </pages> <address> Yoko-hama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: A great deal of work has gone into understanding meta-protocols in the LISP community [KdRB91]. Much work is currently underway in the operating system community to provide more complete descriptions of the service requested to service providers <ref> [BCE + 94, DPH92] </ref>. We have presented a system for implementing meta-protocols in an extended Unix system, using link-time, exec-time, and run-time support. We have demonstrated how this system could be applied to problems specific to several Unix services.
Reference: [Gal93] <author> E. Gallesio. </author> <title> Embedding a Scheme interpreter in the Tk toolkit. </title> <editor> In Lawrence A. Rowe, editor, </editor> <booktitle> First Tcl/Tk Workshop, Berkeley, </booktitle> <pages> pages 103-109, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Although OMOS may cache these executable fragments for speed, in general, invocation of a module could result in the execution of an arbitrary series of operations to generate that module. OMOS uses the Stk <ref> [Gal93] </ref> subset of Scheme [Ste78] as its extension language. Stk has been extended with datatypes that represent OMOS module specifications and program fragments. The primitive operations in this extension language include a set of operations designed to manipulate object file symbols and interfaces.
Reference: [JCS + 91] <author> Daniel P. Julin, Jonathan J. Chew, J. Mark Stevenson, Paulo Guedes, Paul Neves, and Paul Roy. </author> <title> Generalized emulation services for Mach 3.0 | Overview, experiences and current status. </title> <booktitle> In Proc. of the Second USENIX Mach Symposium, </booktitle> <pages> pages 13-26, </pages> <year> 1991. </year>
Reference-contexts: The Apollo Domain system used user-space implementations for I/O objects [LLD + 83, ROS87]; it used a complicated protocol to marshal and unmarshal file descriptor state before and after fork operations. The GNU Hurd [Bus94] project is following a similar path. The Mach Multiserver <ref> [JCS + 91] </ref> project experienced simi-lar issues in the domain of Mach ports. Related work was done by [Jon90] exploit the use of different implementations of system calls as a way of specializing or extending system behavior.
Reference: [Jon90] <author> Michael B. Jones. </author> <title> A toolkit for interposing user code at the system interface, </title> <month> May </month> <year> 1990. </year> <institution> Thesis Proposal - Carnegie Mellon University. </institution>
Reference-contexts: The GNU Hurd [Bus94] project is following a similar path. The Mach Multiserver [JCS + 91] project experienced simi-lar issues in the domain of Mach ports. Related work was done by <ref> [Jon90] </ref> exploit the use of different implementations of system calls as a way of specializing or extending system behavior. A great deal of work has gone into understanding meta-protocols in the LISP community [KdRB91].
Reference: [KdRB91] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaob-ject Protocol. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Meta-protocols <ref> [KdRB91] </ref> describe how a system feature works, rather than what it does. <p> Related work was done by [Jon90] exploit the use of different implementations of system calls as a way of specializing or extending system behavior. A great deal of work has gone into understanding meta-protocols in the LISP community <ref> [KdRB91] </ref>. Much work is currently underway in the operating system community to provide more complete descriptions of the service requested to service providers [BCE + 94, DPH92]. We have presented a system for implementing meta-protocols in an extended Unix system, using link-time, exec-time, and run-time support.
Reference: [LLD + 83] <author> P.J. Leach, P.H. Levine, B.P. Douros, J.A. Hamilton, D.L. Nelson, and B.L. Stumpf. </author> <title> The architecture of an integrated local network. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> SAC-1(5):842-857, </volume> <month> November </month> <year> 1983. </year>
Reference-contexts: Meta-protocols provide a valuable mechanism for describing and acting upon these characteristics. 6 Related Work A number of Unix emulation projects could benefit from the use of meta-protocols to restrict the problem domain of their implementations. The Apollo Domain system used user-space implementations for I/O objects <ref> [LLD + 83, ROS87] </ref>; it used a complicated protocol to marshal and unmarshal file descriptor state before and after fork operations. The GNU Hurd [Bus94] project is following a similar path. The Mach Multiserver [JCS + 91] project experienced simi-lar issues in the domain of Mach ports.
Reference: [OBLM93] <author> Douglas Orr, John Bonn, Jay Lepreau, and Robert Mecklenburg. </author> <title> Fast and flexible shared libraries. </title> <booktitle> In Proc. USENIX Summer Conference, </booktitle> <pages> pages 237-251, </pages> <address> Cincin-nati, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: A given meta-protocol may be implemented using one or all of these strategies. None of these specializations reflect a change in the application interface. 3 Meta-protocols and OMOS A key component for the meta-protocol system is the OMOS programmable linker/loader <ref> [OMHL93, OM92, OBLM93] </ref> which the system uses to provide our system loading facility. OMOS is used by the Unix server in our system to load programs and shared libraries. OMOS provides a level of indirection between a module name and its implementation.
Reference: [OM92] <author> Douglas B. Orr and Robert W. Mecklen-burg. </author> <title> OMOS | An object server for program execution. </title> <booktitle> In Proc. International Workshop on Object Oriented Operating Systems, </booktitle> <pages> pages 200-209, </pages> <address> Paris, </address> <month> September </month> <year> 1992. </year> <journal> IEEE Computer Society. </journal> <note> Also available as technical report UUCS-92-033. </note>
Reference-contexts: A given meta-protocol may be implemented using one or all of these strategies. None of these specializations reflect a change in the application interface. 3 Meta-protocols and OMOS A key component for the meta-protocol system is the OMOS programmable linker/loader <ref> [OMHL93, OM92, OBLM93] </ref> which the system uses to provide our system loading facility. OMOS is used by the Unix server in our system to load programs and shared libraries. OMOS provides a level of indirection between a module name and its implementation.
Reference: [OMHL93] <author> Douglas B. Orr, Robert W. Mecklenburg, Peter J. Hoogenboom, and Jay Lepreau. </author> <title> Dynamic program monitoring and transformation using the OMOS object server. </title> <booktitle> In Proceedings of the 26th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 232-241, </pages> <month> January </month> <year> 1993. </year> <note> Also available as technical report UUCS-92-034. </note>
Reference-contexts: A given meta-protocol may be implemented using one or all of these strategies. None of these specializations reflect a change in the application interface. 3 Meta-protocols and OMOS A key component for the meta-protocol system is the OMOS programmable linker/loader <ref> [OMHL93, OM92, OBLM93] </ref> which the system uses to provide our system loading facility. OMOS is used by the Unix server in our system to load programs and shared libraries. OMOS provides a level of indirection between a module name and its implementation.
Reference: [ROS87] <author> Jim Rees, Margaret Olson, and J. Sasid-har. </author> <title> A dynamically extensible streams implementation. </title> <booktitle> In Proc. of the Summer 1987 USENIX Conference, </booktitle> <pages> pages 199-207, </pages> <address> Phoenix, AZ, </address> <month> June </month> <year> 1987. </year>
Reference-contexts: Meta-protocols provide a valuable mechanism for describing and acting upon these characteristics. 6 Related Work A number of Unix emulation projects could benefit from the use of meta-protocols to restrict the problem domain of their implementations. The Apollo Domain system used user-space implementations for I/O objects <ref> [LLD + 83, ROS87] </ref>; it used a complicated protocol to marshal and unmarshal file descriptor state before and after fork operations. The GNU Hurd [Bus94] project is following a similar path. The Mach Multiserver [JCS + 91] project experienced simi-lar issues in the domain of Mach ports.
Reference: [RT78] <author> D. M. Ritchie and K. Thompson. </author> <title> The UNIX time-sharing system. </title> <journal> The Bell System Technical Journal, </journal> <volume> 57(6) </volume> <pages> 1905-1930, </pages> <month> July/August </month> <year> 1978. </year>
Reference-contexts: These mechanisms hide unnecessary specifics from application developers. These mechanisms may also inhibit the developer from taking advantage of specific system features that could improve an implementation. For example, the use of Unix file descriptors <ref> [RT78] </ref> allows an application to manipulate I/O objects in an abstract fashion; the client need know little about the object it manipulates.
Reference: [Ste78] <author> G.J. Steele, G.L.; Sussman. </author> <title> The revised report on scheme, a dialect of lisp. </title> <type> AI Memo 452, </type> <institution> MIT AI Lab, </institution> <address> Cambridge MA, </address> <month> January </month> <year> 1978. </year>
Reference-contexts: Although OMOS may cache these executable fragments for speed, in general, invocation of a module could result in the execution of an arbitrary series of operations to generate that module. OMOS uses the Stk [Gal93] subset of Scheme <ref> [Ste78] </ref> as its extension language. Stk has been extended with datatypes that represent OMOS module specifications and program fragments. The primitive operations in this extension language include a set of operations designed to manipulate object file symbols and interfaces.
References-found: 17

