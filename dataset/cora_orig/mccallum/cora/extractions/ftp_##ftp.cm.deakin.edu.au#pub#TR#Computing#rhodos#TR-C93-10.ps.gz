URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C93-10.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: ying@deakin.edu.au, ang@deakin.edu.au  
Title: Trading of Objects in a Heterogenous Large Distributed System*  
Author: Y. Ni and A. Goscinski 
Note: This work was partly supported by Australian Research Council under Grant A48831034 and the Deakin University Research Grant 0504054151.  
Address: Geelong, Victoria 3217  
Affiliation: School of Computing and Mathematics Deakin University  
Date: May 6, 1993  
Pubnum: RHODOS  
Abstract: Object sharing in a heterogeneous distributed computer system is an important issue in the design and implementation of an open operating system. This paper describes a new class of name and object management facility a trading service which allows users of a heterogeneous large distributed system to share objects which are not available in their local systems. A distributed implementation of a trading service which provides name and location transparency to users is presented. This trading service is based on both attribute names and mutual cooperation of a number of independent trading servers (traders). We demonstrate that object sharing among heterogeneous local systems can be achieved by introducing the concepts of export and import objects to/from different local systems, and that a trading service based on attribute names can easily deal with name heterogeneity problems resulting from the different name schemes used by underlying local operating systems. We also show that the use of attributes has the potential to make object sharing effective in an open operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [CCITT 1988a] <author> CCITT - X.500, </author> <year> 1988. </year>
Reference-contexts: A Unix path-name is an example of a partitioned name. It is structured as a series of at names and delimiters, and reects the hierarchical structure of the Unix file system. An attributed name, e.g., an X.500 attributed name <ref> [CCITT 1988a, CCITT 1988b] </ref> or a RHODOS attributed name [Goscinski and Haddock 1993], is a set of attributes that uniquely identify an object in a system in which it is administrated. It differs from partitioned names (e.g., Unix path-name) in the sense of the meaning that they give.
Reference: [CCITT 1988b] <author> CCITT - X.501, </author> <year> 1988. </year>
Reference-contexts: A Unix path-name is an example of a partitioned name. It is structured as a series of at names and delimiters, and reects the hierarchical structure of the Unix file system. An attributed name, e.g., an X.500 attributed name <ref> [CCITT 1988a, CCITT 1988b] </ref> or a RHODOS attributed name [Goscinski and Haddock 1993], is a set of attributes that uniquely identify an object in a system in which it is administrated. It differs from partitioned names (e.g., Unix path-name) in the sense of the meaning that they give.
Reference: [Gerrity et al. 1991] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey, and W. Zhu. </author> <title> Can We Study Design Issues of Distributed Operating Systems in a Generalized Way? - RHODOS. </title> <booktitle> Proceedings of the 2nd Symposium on Experiences with Distributed and Multiprocessor Systems (SEDMS II), </booktitle> <address> Atlanta, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: The aim of the paper is to present the design and the implementation of a prototype of a trading facility for RHODOS May 6, 1993 2 a heterogeneous large distributed system. This prototype has been built in a heterogeneous environment consisting of a group of RHODOS distributed systems <ref> [Gerrity et al. 1991] </ref> supported by an attribute naming facility, and a Unix system supported by a partitioned naming facility. The paper also discusses the results of initial runs of the prototype. This paper is organized in the following way. Section 2 deals with trading and heterogeneous large distributed systems.
Reference: [Goscinski 1990] <author> A. Goscinski. </author> <title> Design Issues of Operating Systems for Open Distributed Processing. </title> <booktitle> Proceedings of the ACUS and BASSER Workshop on Open Distributed Processing, </booktitle> <address> Sydney, </address> <month> January </month> <year> 1990. </year>
Reference: [Goscinski and Bearman 1990] <author> A. Goscinski and M. Bearman. </author> <title> Resource Management in Large Distributed Systems. Operating System Review, </title> <month> October </month> <year> 1990. </year>
Reference-contexts: Thus, the main concern here is how to resolve all these contradictory management problems. As suggested in <ref> [Goscinski and Bearman 1990] </ref>, [van der Linden 1990] and [van der Linden and Sventek 1992], these problems can be solved by providing a new class of name services and object managers known as traders.
Reference: [Goscinski 1991] <author> A. Goscinski, </author> <title> Distributed Operating Systems: The Logical Design. </title> <publisher> Addition-Wesley. </publisher>
Reference-contexts: The naming of objects suggested in literatures falls into two categories: partitioned and attributed <ref> [Goscinski 1991] </ref>. Partitioned name schemes have been used in most existing operating systems. A Unix path-name is an example of a partitioned name. It is structured as a series of at names and delimiters, and reects the hierarchical structure of the Unix file system. <p> import part of database Trading database communication and name manager conversion user process user process user process RHODOS May 6, 1993 16 the trader resolution, the purpose of which is to locate the remote trader managing the object of interest to the importer, is carried out in an iterative way <ref> [Goscinski 1991] </ref>. The local trader calls each remote trader while retaining control over the resolution process; each remote trader does it best to evaluate a given name locally, as illustrated in Figure 14. An example of cooperation between the RHODOS trader and the Unix trader is shown in Figure 15.
Reference: [Goscinski 1993] <author> A. Goscinski. </author> <title> Supporting User Autonomy and Object Sharing in Distributed Systems: The RHODOS Trading Service. </title> <booktitle> Proceedings of the International Symposium on Autonomous Decentralized Systems ISADS93. </booktitle>
Reference-contexts: A prototype of such a trader, which provides the maximum possible autonomy and exibility to users, yet at the same time allows them to share accessible objects, has been developed for a distributed system supported by an attribute naming facility <ref> [Goscinski 1993] </ref>. This trader is based on the concepts of user and system domains, the concept of a context, and the operations of object export, withdrawal, and import.
Reference: [Goscinski and Haddock 1993] <author> A. Goscinski and A. Haddock, </author> <title> The Development of a Prototype Attributed Naming Facility Supporting User Autonomy and Object Sharing, </title> <note> Submitted to Software Practice and Experience. </note>
Reference-contexts: A Unix path-name is an example of a partitioned name. It is structured as a series of at names and delimiters, and reects the hierarchical structure of the Unix file system. An attributed name, e.g., an X.500 attributed name [CCITT 1988a, CCITT 1988b] or a RHODOS attributed name <ref> [Goscinski and Haddock 1993] </ref>, is a set of attributes that uniquely identify an object in a system in which it is administrated. It differs from partitioned names (e.g., Unix path-name) in the sense of the meaning that they give. <p> A detailed discussion and definition of the attribute name supported by RHODOS traders is given in <ref> [Goscinski and Haddock 1993] </ref>. Even though both the RHODOS trader and the Unix trader denominate objects with attribute names, a difference between RHODOS attribute names and Unix attribute names exists.
Reference: [Goscinski and Indulska 1992] <author> A. Goscinski and J. Indulska, </author> <title> The RHODOS Naming Facility, </title> <journal> IEEE Distributed Processing Technical Committee Newsletter, </journal> <volume> Vol. 14, No. </volume> <pages> 1. </pages>
Reference: [Haddock and Goscinski, 1991] <author> A. Haddock and A. Goscinski, </author> <title> The Development and Experiences with the RHODOS Naming Facility, </title> <type> Technical Report CS37/91, </type> <institution> Department of Computer Science, University College, ADFA, UNSW, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: Each local RHODOS naming and trading facility which trades objects within a local RHODOS system <ref> [Haddock and Goscinski, 1991, 1993] </ref> consists of two servers which perform two distinctive sets of functions: a name server which provides the conventional naming operations, such as creating an object, changing an object name, deleting an object, changing an object attribute, etc., and a trader which provides trading operations, i.e., exporting, <p> The search algorithm used in the RHODOS trader uses the search function implemented in the initial RHODOS trading facility prototype. The search algorithm performs an exhaustive search based on the hierarchical structure of the RHODOS naming contexts. The detail of the search function is presented in <ref> [Haddock and Goscinski, 1991] </ref>. The search algorithm used in the Unix trader is based on the linear search technique, since all entries in the Unix trading database are organized in the form of a linear list.
Reference: [Haddock, 1991] <author> A. N. Haddock, </author> <title> Selected Aspects of the Development of the RHODOS Naming Facility, </title> <type> MInfSc Thesis, </type> <institution> Department of Computer Science, University College, ADFA, UNSW, </institution> <month> November </month> <year> 1991. </year>
Reference: [Ni and Goscinski 1993] <author> Y. Ni and A. Goscinski, </author> <title> Trader Cooperation to Enable Objects Sharing among Users of Homogenous Distributed Systems, </title> <note> Submitted to the Special Issue of Computer Communications. </note>
Reference-contexts: The original concept of a trader providing user autonomy and object sharing has been extended in order to allow users to access objects which are not available in their local distributed systems, but are in use in other local distributed systems <ref> [Ni and Goscinski 1993] </ref>. These connected distributed systems are homogeneous and form a homogeneous large distributed system. The extended trader consists of a set of cooperating traders, each of which works within a local distributed system. <p> These traders have been extended in order to share objects among homogeneous distributed systems <ref> [Ni and Goscinski 1993] </ref>. Furthermore, they can cooperate with each other to allow users to access objects which are managed by other RHODOS distributed operating systems. These traders have been extended again in order to support sharing in heterogeneous large distributed system.
Reference: [van der Linden 1990] <author> R. van der Linden, </author> <title> ISA Project. Federated Naming Model. Advanced Network System Architecture. Architecture Projects Management Limited, </title> <year> 1990. </year>
Reference-contexts: Thus, the main concern here is how to resolve all these contradictory management problems. As suggested in [Goscinski and Bearman 1990], <ref> [van der Linden 1990] </ref> and [van der Linden and Sventek 1992], these problems can be solved by providing a new class of name services and object managers known as traders.
Reference: [van der Linden and Sventek 1992] <author> R. van der Linden and J. Sventek, </author> <title> The ANSA Trading Service. </title> <journal> IEEE Distributed Processing Technical Committee Newsletter, </journal> <volume> Vol. 14, </volume> <month> No.1. </month>
Reference-contexts: Thus, the main concern here is how to resolve all these contradictory management problems. As suggested in [Goscinski and Bearman 1990], [van der Linden 1990] and <ref> [van der Linden and Sventek 1992] </ref>, these problems can be solved by providing a new class of name services and object managers known as traders.
References-found: 14

