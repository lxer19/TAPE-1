URL: http://www.research.microsoft.com/~ymwang/papers/TCOS-1995.ps
Refering-URL: http://www.research.microsoft.com/~ymwang/papers/TCOS95CR.htm
Root-URL: http://www.research.microsoft.com
Title: Software Tools and Libraries for Fault Tolerance  
Author: Yennun Huang, Chandra Kintala and Yi-Min Wang 
Address: Murray Hill, NJ 07974  
Affiliation: AT&T Bell Laboratories,  
Abstract-found: 0
Intro-found: 1
Reference: [BS92] <author> M. Baker and M. Sullivan. </author> <title> "The Recovery Box: Using Fast Recovery to Provide High Availability in the UNIX environment", </title> <booktitle> Proceedings of Summer USENIX Conference, </booktitle> <pages> pp. 31-43, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: When an application does a checkpoint, its critical data is saved on the primary node and/or backup nodes. This idea of saving only critical data in an application is analogous to the Recovery Box concept in Sprite <ref> [BS92] </ref>. Data structure checkpointing, recovery, fault-tolerant network communication and file operations are done using the following functions in libft. * ft start () reserves a block of critical memory.
Reference: [FHK93] <author> G. S. Fowler, Y. Huang, D. G. Korn and H. Rao. </author> <title> "A User-Level Replicated File System", </title> <booktitle> Proceedings of Summer USENIX Conference, </booktitle> <pages> pp. 279-290, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: They can be used to implement fault tolerance mechanisms such as recovery blocks [RX94] and memory rejuvenation [WHV94]. 5 REPL REPL <ref> [HK93, FHK93] </ref> provides services for on-line replication of critical files onto one or more backup machines. It consists of a library which intercepts file system calls and a set of forward and replay processes which regenerate the same file updates on all backup machines in a file replication group.
Reference: [GS91] <author> J. Gray and D. P. Siewiorek, </author> <title> "High Availability Computer Systems", </title> <journal> IEEE Computer, </journal> <volume> Vol. 24, No. 9, </volume> <pages> pp. 39-48, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Tandem also has a second set of license agreements to use that software on their Windows NT platforms. 7 Concluding Remarks Nowadays, the proportion of failures due to faults in application software is increasing due to increased size and complexity of software being deployed <ref> [GS91] </ref>. We assume that software systems are thoroughly verified and validated (V&V) before they are deployed in the field. <p> Thus, the resulting failure behavior is transient. Gray calls the faults that give rise to such transient failures Heisenbugs <ref> [GS91] </ref>. The fault tolerance tools and libraries described in this paper will be useful for recovering from such transient software failures also. We would also like to point out an analogy with handling deadlocks in operating systems.
Reference: [HK93] <author> Y. Huang and C. M. R. Kintala, </author> <title> "Software Implemented Fault Tolerance: Technologies and Experience", </title> <booktitle> Proceedings of 23rd Intl. Symposium on Fault-Tolerant Computing (FTCS-23), Toulouse, France, </booktitle> <pages> pp. 2-9, </pages> <note> June 1993; Also appeared as Chapter 10 in the book Software Fault Tolerance, </note> <editor> M. Lyu (Ed.), </editor> <publisher> John Wiley & Sons, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: In some other applications, if all the aforementioned fault tolerance tasks are needed then they can be provided using all the above components. A summary of telecommunication applications using these software fault tolerance components is in Section 6. 2 Watchd Watchd <ref> [HK93] </ref> is used to detect failures of processes and processors and recover applications from these failures. The failures that watchd can detect and recover from are hang and crash failures of processes and processors. Watchd facilitates restarting a failed process, restoring the saved values and reexecut-ing the logged events. <p> At the same time, it spawns another backup watchd to watch itself (the new primary watchd). If the backup watchd fails, the primary watchd gets a signal from operating system since the backup watchd is a child process of the primary watchd. 3 Libft Libft <ref> [HK93] </ref> is a user-level library of C functions and macros that can be used in application programs to specify and checkpoint critical data, recover the checkpointed data, log events, locate and reconnect to a server, do exception handling, do N-version programming, and use recovery block techniques. <p> They can be used to implement fault tolerance mechanisms such as recovery blocks [RX94] and memory rejuvenation [WHV94]. 5 REPL REPL <ref> [HK93, FHK93] </ref> provides services for on-line replication of critical files onto one or more backup machines. It consists of a library which intercepts file system calls and a set of forward and replay processes which regenerate the same file updates on all backup machines in a file replication group.
Reference: [HKKF95] <author> Y. Huang, C. M. R. Kintala, N. Kolettis and N. D. Fulton, </author> <title> "Software Rejuvenation: Analysis, Module and Applications", </title> <booktitle> Proceedings of 25th Intl. Symposium on Fault-Tolerant Computing, Pasadena, Calif., </booktitle> <pages> pp. 381-390, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Deadlock handling methods [T92] are (i) prevention, (ii) avoidance, and (iii) tolerance, i.e., detection and recovery. Similarly, failure handling methods include (i) prevention as done by V&V tools and procedures, (ii) avoidance as provided recently through software rejuvenation <ref> [HKKF95] </ref>, and (iii) detection and recovery as done by the software fault tolerance components described in this paper. Acknowledgements The authors thank Dave Korn, Glenn Flower and Herman Rao for their help in the design and development of REPL and Phong Vo and Emerald Chung for their contributions to libckp.
Reference: [LS92] <author> M. Litzkow and M. Solomon, </author> <title> "Supporting checkpointing and process migration outside UNIX", </title> <booktitle> Proceedings of Winter USENIX Conference, </booktitle> <address> San Francisco, Calif., </address> <month> January </month> <year> 1992. </year>
Reference-contexts: The saved program state typically includes the program counter, program stack, stack pointer, open file descriptors, malloc arena, and the global and static variables of the program and the software libraries linked with the program. Comparing with other existing UNIX check-pointing libraries <ref> [LS92, PBK95] </ref>, libckp has the following two unique features: it allows a user to include files as part of the process state to be checkpointed and recovered, and it also supports a non-transparent mode for flexible execution control.
Reference: [PBK95] <author> J. S. Plank, M. Beck, G. Kingsley and K. Li, "Libckpt: </author> <title> Transparent Checkpointing under UNIX", </title> <booktitle> Proceedings of Winter USENIX Conference, </booktitle> <pages> pp. 213-224, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: The saved program state typically includes the program counter, program stack, stack pointer, open file descriptors, malloc arena, and the global and static variables of the program and the software libraries linked with the program. Comparing with other existing UNIX check-pointing libraries <ref> [LS92, PBK95] </ref>, libckp has the following two unique features: it allows a user to include files as part of the process state to be checkpointed and recovered, and it also supports a non-transparent mode for flexible execution control.
Reference: [RX94] <author> B. Randell and J. Xu, </author> <title> "The evolution of the recovery block concept", Chapter 1 in Software Fault Tolerance, Edited by M. </title> <editor> R. Lyu, </editor> <publisher> John Wiley & Sons, </publisher> <pages> pp. 1-21, </pages> <year> 1995. </year>
Reference-contexts: These two function calls can be considered as a generalization of the standard C functions setjmp () and longjmp () to include the restoration of global/static variables, malloc arena, and user files. They can be used to implement fault tolerance mechanisms such as recovery blocks <ref> [RX94] </ref> and memory rejuvenation [WHV94]. 5 REPL REPL [HK93, FHK93] provides services for on-line replication of critical files onto one or more backup machines.
Reference: [T92] <author> A. S. Tanenbaum, </author> <title> "Modern Operating Systems", </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1992. </year>
Reference-contexts: The fault tolerance tools and libraries described in this paper will be useful for recovering from such transient software failures also. We would also like to point out an analogy with handling deadlocks in operating systems. Deadlock handling methods <ref> [T92] </ref> are (i) prevention, (ii) avoidance, and (iii) tolerance, i.e., detection and recovery.
Reference: [WHF93] <author> Y. M. Wang, Y. Huang, and W.K. Fuchs. </author> <title> "Progressive retry for software error recovery", </title> <booktitle> Proceedings of 23rd Intl. Symposium on Fault-Tolerant Computing (FTCS-23), Toulouse, France, </booktitle> <pages> pp. 138-144, </pages> <month> June </month> <year> 1993; </year>
Reference-contexts: It provides facilities for remote execution, error reporting, remote copy, distributed election, and status report production. Watchd also provides a progressive retry mechanism which gradually increases the scope of rollback for recovering failed applications from latent software errors <ref> [WHF93] </ref>. Watchd detects a process crash by either polling the process (using kill (pid,0)) or receiving a SIGCHLD signal. Watchd detects a hung process by using one of the following two methods.
Reference: [WHV94] <author> Y. M. Wang, Y. Huang, K. P. Vo, P. Y. Chung and C. M. R. Kintala, </author> <title> "Checkpoint-ing and Its Applications", </title> <booktitle> Proceedings of 25th Intl. Symposium on Fault-Tolerant Computing (FTCS-25), Pasadena, Calif., </booktitle> <pages> pp. 22-31, </pages> <month> June </month> <year> 1995. </year> <month> 5 </month>
Reference-contexts: These two function calls can be considered as a generalization of the standard C functions setjmp () and longjmp () to include the restoration of global/static variables, malloc arena, and user files. They can be used to implement fault tolerance mechanisms such as recovery blocks [RX94] and memory rejuvenation <ref> [WHV94] </ref>. 5 REPL REPL [HK93, FHK93] provides services for on-line replication of critical files onto one or more backup machines.
References-found: 11

