URL: http://www.cs.cornell.edu/Info/People/praveen/papers/seq.de95.ps.Z
Refering-URL: http://www.cs.cornell.edu/Info/People/praveen/papers.html
Root-URL: http://www.cs.brown.edu/
Email: praveen,miron,raghu@cs.wisc.edu  
Title: SEQ A Model for Sequence Databases  
Author: Praveen Seshadri Miron Livny Raghu Ramakrishnan 
Address: Wisconsin, Madison, WI 53706, USA  
Affiliation: Computer Sciences Department University of  
Abstract: This paper presents the SEQ model which is the basis for a system to manage various kinds of sequence data. The model separates the data from the ordering information, and includes operators based on two distinct abstractions of a sequence. The main contributions of the SEQ model are: (a) it can deal with different types of sequence data, (b) it supports an expressive range of sequence queries, (c) it draws from many of the diverse existing approaches to modeling sequence data. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, C. Faloutsos, and A. Swami. </author> <title> Efficient Similarity Search In Sequence Databases. </title> <booktitle> In Proceedings of the Fourth International Conference on Foundations of Data Organization and Algorithms, </booktitle> <pages> pages 69-84. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> October </month> <year> 1993. </year> <note> Lecture Notes in Computer Science, V303. </note>
Reference-contexts: The sequence groups must have the same record and label schemas. If two sequences have identical labels, their union (difference) appears in the output. As an example of a query requiring sequence groups, consider an example from <ref> [1] </ref> which performs a similarity search on a database of sequences with identical schemas. <p> An expression recognition system on event sequences has been implemented as part of the ODE project [7]. In [15] we show that some of the same functionality can be provided by SEQ , but with potentially increased efficiency of evaluation for large sequences. <ref> [1] </ref> describes an efficient technique for similarity searches over sequence databases; the problem was used as an example query in Section 3.2.
Reference: [2] <author> Rakesh Chandra and Arie Segev. </author> <title> Managing Temporal Financial Data in an Extensible Database. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases(VLDB), </booktitle> <pages> pages 238-249, </pages> <year> 1992. </year>
Reference-contexts: Our approach instead uses high level algebraic operators to query sequences. The concepts of collapse and expansion of ordering domains are similar to the in-tervallic partitions of [4] and the time units of [20]. There has also been closely related work on calendric systems by <ref> [2] </ref> and [17]. We discuss the similarities and differences in greater detail in [15]. An expression recognition system on event sequences has been implemented as part of the ODE project [7].
Reference: [3] <author> James Clifford, Albert Croker, and Alexander Tuzhilin. </author> <title> Grouped and Ungrouped Historical Data Models: Expressive Power and Completeness. </title> <editor> In Richard Snodgrass, editor, </editor> <booktitle> Proceedings of the International Workshop on an Infrastructure for Temporal Databases, pages H1-H18, </booktitle> <address> Arlington, Texas, </address> <year> 1993. </year>
Reference-contexts: A sequence group containing a set of such labelled sequences models a temporal relation. We study the properties of SEQ -Rel in [15], and show that by extending a sequence group to be a multiset, it is a temporally grouped model <ref> [3] </ref>. We also present some results on the expressiveness of the model. One important result is that relations can be modeled as a special case of sequence groups. In the degenerate case where the sequence record schema has no attributes, each element of the sequence group is essentially a tuple.
Reference: [4] <author> James Clifford and Ahobala Rao. </author> <title> A Simple, General Structure for Temporal Domains. </title> <type> CRIS 154, </type> <institution> Center for Research on Information Systems, Stern School of Business, </institution> <address> New York University, </address> <month> October </month> <year> 1986. </year>
Reference-contexts: Our approach instead uses high level algebraic operators to query sequences. The concepts of collapse and expansion of ordering domains are similar to the in-tervallic partitions of <ref> [4] </ref> and the time units of [20]. There has also been closely related work on calendric systems by [2] and [17]. We discuss the similarities and differences in greater detail in [15]. An expression recognition system on event sequences has been implemented as part of the ODE project [7].
Reference: [5] <institution> TSQL2 Language Design Committee. </institution> <note> TSQL2 Language Specification. Draft in preparation, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: In this sense, SE Q is a unifying sequence data model. We now provide brief pointers to interesting related work. There has been considerable research on temporal data models [8], algebras and semantics [18]. We merely cite references to articles that survey the extensive work in these areas. TSQL2 <ref> [5] </ref> represents the ongoing efforts of a portion of the temporal database research community to specify an extension to the SQL-92 language standard. TSQL2 is based on a temporal relational model, and we have discussed the relationship of SEQ with such models earlier in the paper.
Reference: [6] <author> Umeshwar Dayal and Gene Wuu. </author> <title> A Uniform Approach to Processing Temporal Queries. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases(VLDB), </booktitle> <pages> pages 407-418, </pages> <year> 1992. </year>
Reference-contexts: The Time Sequence model [13] views a database as being composed of collections of time-varying objects, with query operators over these collections. We show in [15] that the Positional operators of the SEQ model with minor extensions to the Expand operator can represent all Time Sequence queries. <ref> [6] </ref> presents an object-oriented approach to providing lower level operators on temporal objects. Our approach instead uses high level algebraic operators to query sequences. The concepts of collapse and expansion of ordering domains are similar to the in-tervallic partitions of [4] and the time units of [20].
Reference: [7] <author> N.H Gehani, H.V. Jagadish, and O. Shmueli. </author> <title> Composite Event Specification in Active Databases: Model and Implementation. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases(VLDB), </booktitle> <pages> pages 327-338, </pages> <year> 1992. </year>
Reference-contexts: There has also been closely related work on calendric systems by [2] and [17]. We discuss the similarities and differences in greater detail in [15]. An expression recognition system on event sequences has been implemented as part of the ODE project <ref> [7] </ref>. In [15] we show that some of the same functionality can be provided by SEQ , but with potentially increased efficiency of evaluation for large sequences. [1] describes an efficient technique for similarity searches over sequence databases; the problem was used as an example query in Section 3.2.
Reference: [8] <author> C.S. Jensen, M.D. Soo, and R.T. Snodgrass. </author> <title> Unification of Temporal Relations. </title> <type> Technical Report 92-15, </type> <institution> Computer Sciences Department, University of Arizona, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: In this sense, SE Q is a unifying sequence data model. We now provide brief pointers to interesting related work. There has been considerable research on temporal data models <ref> [8] </ref>, algebras and semantics [18]. We merely cite references to articles that survey the extensive work in these areas. TSQL2 [5] represents the ongoing efforts of a portion of the temporal database research community to specify an extension to the SQL-92 language standard.
Reference: [9] <author> C.S. Jensen(editor). </author> <title> A Consensus Test Suite of Temporal Queries. Consensus document collectively drafted by temporal database researchers, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: Further, there is the ability to ask queries over sets of sequences (like many of the queries in the consensus test-suite of temporal queries <ref> [9] </ref>), or complex queries over individual sequences (like the queries that are described in [14]). 3.4 Nested Queries Consider an example of a nested query (from [14]): Find each Volcano eruption and the most recent Earthquake in the same region.
Reference: [10] <author> Wolfgang K afer. </author> <title> Temporal Selection, Temporal Projection and Temporal Join Revised. </title> <editor> In Richard Snodgrass, editor, </editor> <booktitle> Proceedings of the International Workshop on an Infrastructure for Temporal Databases, pages U1-U20, </booktitle> <address> Arlington, Texas, </address> <year> 1993. </year>
Reference-contexts: Typically, a timestamp (which is a collection of time points) is associated either with each tuple, or with each attribute of a tuple. An observation made by <ref> [10] </ref> was that temporal relations should be modeled not as sets of tuples, but as sets of Time Sequences, with basic operations like selections and projections on the Time Sequences. This is the natural way to represent temporal relations in SE Q , which we shall call SEQ -Rel.
Reference: [11] <author> Cliff T.Y. Leung and Richard R. Muntz. </author> <title> Query Processing for Temporal Databases. </title> <booktitle> In Proceedings of the 6th International Conference on Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: For instance, if F n pos is an intersection of the sets of positions of the two records, the resulting binary operator is an Overlap Join. If F n pos checks for containment of one of the position sets in the other, we get different variants of the Contain-Join <ref> [11] </ref>. Similarly, the Make-Interval operator is a sequence join where F n pos gives the minimal interval that includes all the positions of both the input records. Aggregate Operators: M [agg func,agg rec]: The Groupby Aggregate operators are unary operators defined by two functions.
Reference: [12] <author> Joel Richardson. </author> <title> Supporting Lists in a Data Model. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases(VLDB), </booktitle> <pages> pages 127-138, </pages> <year> 1992. </year>
Reference-contexts: TSQL2 is based on a temporal relational model, and we have discussed the relationship of SEQ with such models earlier in the paper. A more specific comparison with TSQL2 is presented in the expanded version of this paper [15]. <ref> [12] </ref> describes operators based on temporal logic for supporting lists in a data model, while [19] provides a model based on logic programing for stream oriented data and processing. Much of this work is similar to our Positional operators on individual sequences.
Reference: [13] <author> Arie Segev and Arie Shoshani. </author> <title> Logical Modelling of Temporal Data. </title> <booktitle> In Proceedings of ACM SIGMOD '87 International Conference on Management of Data, </booktitle> <address> San Francisco, CA, </address> <pages> pages 454-466, </pages> <year> 1987. </year>
Reference-contexts: Much of this work is similar to our Positional operators on individual sequences. The Time Sequence model <ref> [13] </ref> views a database as being composed of collections of time-varying objects, with query operators over these collections.
Reference: [14] <author> Praveen Seshadri, Miron Livny, and Raghu Ramakrishnan. </author> <title> Sequence Query Processing. </title> <booktitle> In Proceedings of ACM SIGMOD '94 International Conference on Management of Data, </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Secondly, few other models have been carried through to a concrete implementation. Our research is part of a larger ongoing effort to build a sequence database system. In <ref> [14] </ref>, we presented query optimization techniques based on a limited model of sequences. The constructs in our model have therefore been constrained by practical considerations of efficiency and ease of implementation. 2 Model of Sequences We begin with definitions of data records, and operations on them. <p> Further, there is the ability to ask queries over sets of sequences (like many of the queries in the consensus test-suite of temporal queries [9]), or complex queries over individual sequences (like the queries that are described in <ref> [14] </ref>). 3.4 Nested Queries Consider an example of a nested query (from [14]): Find each Volcano eruption and the most recent Earthquake in the same region. <p> Further, there is the ability to ask queries over sets of sequences (like many of the queries in the consensus test-suite of temporal queries [9]), or complex queries over individual sequences (like the queries that are described in <ref> [14] </ref>). 3.4 Nested Queries Consider an example of a nested query (from [14]): Find each Volcano eruption and the most recent Earthquake in the same region. For each Volcano record X at position p, the previous earthquake record in the same region as X needs to be determined and composed with X.
Reference: [15] <author> Praveen Seshadri, Miron Livny, and Raghu Ramakrishnan. </author> <month> SEQ: </month>
Reference-contexts: The time varying values of each real-world entity are represented as a sequence, labelled by the non-varying attributes of the entity. A sequence group containing a set of such labelled sequences models a temporal relation. We study the properties of SEQ -Rel in <ref> [15] </ref>, and show that by extending a sequence group to be a multiset, it is a temporally grouped model [3]. We also present some results on the expressiveness of the model. One important result is that relations can be modeled as a special case of sequence groups. <p> TSQL2 is based on a temporal relational model, and we have discussed the relationship of SEQ with such models earlier in the paper. A more specific comparison with TSQL2 is presented in the expanded version of this paper <ref> [15] </ref>. [12] describes operators based on temporal logic for supporting lists in a data model, while [19] provides a model based on logic programing for stream oriented data and processing. Much of this work is similar to our Positional operators on individual sequences. <p> Much of this work is similar to our Positional operators on individual sequences. The Time Sequence model [13] views a database as being composed of collections of time-varying objects, with query operators over these collections. We show in <ref> [15] </ref> that the Positional operators of the SEQ model with minor extensions to the Expand operator can represent all Time Sequence queries. [6] presents an object-oriented approach to providing lower level operators on temporal objects. Our approach instead uses high level algebraic operators to query sequences. <p> The concepts of collapse and expansion of ordering domains are similar to the in-tervallic partitions of [4] and the time units of [20]. There has also been closely related work on calendric systems by [2] and [17]. We discuss the similarities and differences in greater detail in <ref> [15] </ref>. An expression recognition system on event sequences has been implemented as part of the ODE project [7]. In [15] we show that some of the same functionality can be provided by SEQ , but with potentially increased efficiency of evaluation for large sequences. [1] describes an efficient technique for similarity <p> There has also been closely related work on calendric systems by [2] and [17]. We discuss the similarities and differences in greater detail in <ref> [15] </ref>. An expression recognition system on event sequences has been implemented as part of the ODE project [7]. In [15] we show that some of the same functionality can be provided by SEQ , but with potentially increased efficiency of evaluation for large sequences. [1] describes an efficient technique for similarity searches over sequence databases; the problem was used as an example query in Section 3.2.
References-found: 15

