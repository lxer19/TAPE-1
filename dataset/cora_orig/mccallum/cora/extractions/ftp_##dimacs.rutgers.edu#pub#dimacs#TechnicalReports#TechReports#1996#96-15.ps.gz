URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1996/96-15.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1996.html
Root-URL: http://www.cs.rutgers.edu
Email: brayton@ic.eecs.berkeley.edu  emerson@cs.utexas.edu  jf@research.att.com  
Title: Issues in Automated Verification  
Author: by Robert Brayton Allen Emerson Joan Feigenbaum 
Address: Berkeley, CA 94720  Austin, TX 78712  600 Mountain Avenue Murray Hill, NJ 07974  
Affiliation: EECS Department University of California  Computer Science Department University of Texas  AT&T Laboratories  
Note: Workshop Summary: Computational and Complexity  DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Laboratories, Bell Laboratories, and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 96-15 June, 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ar, M. Blum, B. Codenotti, and P. </author> <title> Gemmell, "Checking Approximate Computations over the Reals," </title> <booktitle> in Proc. of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> 786-795, </pages> <year> 1993. </year>
Reference-contexts: A sequel to [3], the current talk will give an informal narrative of our recent work on this problem. The talk may include: 1. A review of the real-number Fourier Transform checker we introduced in [3]. 2. Comparison with the real-number matrix-multiplication checker of <ref> [1] </ref>. 3. Our struggle with a seemingly trivial probability question which caused difficulties in both [3] and [1]. Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. The recent implementation of our checker by David Shreve at Hughes Aircraft. <p> The talk may include: 1. A review of the real-number Fourier Transform checker we introduced in [3]. 2. Comparison with the real-number matrix-multiplication checker of <ref> [1] </ref>. 3. Our struggle with a seemingly trivial probability question which caused difficulties in both [3] and [1]. Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. The recent implementation of our checker by David Shreve at Hughes Aircraft. This is joint work with Manuel Blum. <p> Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. The recent implementation of our checker by David Shreve at Hughes Aircraft. This is joint work with Manuel Blum. For more information, see <ref> [1, 3, 4] </ref>. 2.32 Pierre Wolper, University of Liege Partial-Order Methods or How Independence Defeats Complexity Partial-Order approaches make it possible to check meaningful properties of a state space while only considering a limited number of interleavings of independent concurrent actions, and hence avoiding much of the wastefulness of representing concurrency
Reference: [2] <author> A. Aziz, R. K. Brayton, F. Balarin and A. L. Sangiovanni-Vincentelli, </author> <title> "Sequential Synthesis Using S1S," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <address> Santa Clara CA, </address> <month> November </month> <year> 1995. </year> <month> - 24 </month> - 
Reference-contexts: However, in practise such an automaton may be prohibitively large to construct. We suggest an approach that alleviates this problem by defining simpler automata that capture only a subset of possible implementations. The complete version of this paper is <ref> [2] </ref>. More information about the speaker's work in general can be found on the Web page http://www-cad.eecs.berkeley.edu/~adnan. 2.3 Gerard Berry, Ecole des Mines and Inria Automatic Verification of Esterel Programs Esterel is a synchronous language dedicated to reactive systems: software or hardware controllers, embedded systems, communication protocols, etc.
Reference: [3] <author> M. Blum and H. Wasserman, </author> <title> "Program Result-Checking: a Theory of Testing Meets a Test of Theory," </title> <booktitle> in Proc. of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> 382-392, </pages> <year> 1994. </year> <note> Revised version: "Software Reliability via Runtime Result-Checking," http://http.cs.berkeley.edu/ halw/. </note>
Reference-contexts: These checkers can then serve as extremely reliable testing oracles and may have other uses as well. A central problem in this research has been that of checking the Fourier Transform. A sequel to <ref> [3] </ref>, the current talk will give an informal narrative of our recent work on this problem. The talk may include: 1. A review of the real-number Fourier Transform checker we introduced in [3]. 2. Comparison with the real-number matrix-multiplication checker of [1]. 3. <p> A central problem in this research has been that of checking the Fourier Transform. A sequel to <ref> [3] </ref>, the current talk will give an informal narrative of our recent work on this problem. The talk may include: 1. A review of the real-number Fourier Transform checker we introduced in [3]. 2. Comparison with the real-number matrix-multiplication checker of [1]. 3. Our struggle with a seemingly trivial probability question which caused difficulties in both [3] and [1]. Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. <p> The talk may include: 1. A review of the real-number Fourier Transform checker we introduced in <ref> [3] </ref>. 2. Comparison with the real-number matrix-multiplication checker of [1]. 3. Our struggle with a seemingly trivial probability question which caused difficulties in both [3] and [1]. Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. The recent implementation of our checker by David Shreve at Hughes Aircraft. This is joint work with Manuel Blum. <p> real-number Fourier Transform checker we introduced in <ref> [3] </ref>. 2. Comparison with the real-number matrix-multiplication checker of [1]. 3. Our struggle with a seemingly trivial probability question which caused difficulties in both [3] and [1]. Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. The recent implementation of our checker by David Shreve at Hughes Aircraft. This is joint work with Manuel Blum. <p> Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. The recent implementation of our checker by David Shreve at Hughes Aircraft. This is joint work with Manuel Blum. For more information, see <ref> [1, 3, 4] </ref>. 2.32 Pierre Wolper, University of Liege Partial-Order Methods or How Independence Defeats Complexity Partial-Order approaches make it possible to check meaningful properties of a state space while only considering a limited number of interleavings of independent concurrent actions, and hence avoiding much of the wastefulness of representing concurrency
Reference: [4] <author> M. Blum and H. Wasserman, </author> <title> "Reflections on the Pentium Division Bug," </title> <note> http://http.cs.berkeley.edu/ halw/. To appear in IEEE Transactions on Computers. </note>
Reference-contexts: Including: a solution proposed by Joel Spencer; an alternative approach developed in our revised version of [3]. 4. The recent implementation of our checker by David Shreve at Hughes Aircraft. This is joint work with Manuel Blum. For more information, see <ref> [1, 3, 4] </ref>. 2.32 Pierre Wolper, University of Liege Partial-Order Methods or How Independence Defeats Complexity Partial-Order approaches make it possible to check meaningful properties of a state space while only considering a limited number of interleavings of independent concurrent actions, and hence avoiding much of the wastefulness of representing concurrency
Reference: [5] <author> R. Gerth, R. Kuiper, D. Peled, and W. Penczek, </author> <title> "A Partial Order Approach to Branching Time Logic Model Checking," </title> <booktitle> in Proc. of the 3rd Israel Symposium on Theory on Computing and Systems, </booktitle> <pages> 130-139, </pages> <publisher> IEEE, </publisher> <year> 1995, </year> <institution> Tel Aviv, Israel. </institution>
Reference-contexts: Applying the reduction constructs a reduced state-space that generates at least one representative for each equivalence class. The reduction approach is also extended to branching specifications. Partial order reduction techniques are used to alleviate the state-space explosion in automatically verifying concurrent programs <ref> [9, 6, 19, 13, 14, 8, 5] </ref>. The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected. <p> The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected. Selecting such a subset is based on simple which can differ according to the specification language, e.g., for linear temporal logic [14] or for branching temporal logic <ref> [5] </ref>. Using the partial order reduction techniques, it has become possible to analyze problems of larger size, which did not lend themselves to automatic verification before. The simplicity of the principles behind these methods suggest that they can be integrated into any state-based automatic verification tool.
Reference: [6] <author> P. Godefroid and P. Wolper, </author> <title> "A partial approach to model checking," </title> <booktitle> in Proc. of the 6th Annual IEEE symposium on Logic in Computer Science, Amsterdam, </booktitle> <pages> 406-414. </pages>
Reference-contexts: Applying the reduction constructs a reduced state-space that generates at least one representative for each equivalence class. The reduction approach is also extended to branching specifications. Partial order reduction techniques are used to alleviate the state-space explosion in automatically verifying concurrent programs <ref> [9, 6, 19, 13, 14, 8, 5] </ref>. The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected.
Reference: [7] <author> K. Havelund and N. Shankar, </author> <title> "Experiments in theorem proving and model checking for protocol verification," </title> <booktitle> in Proc. of the 1996 Formal Methods Europe conference, </booktitle> <publisher> LNCS 1051, Springer-Verlag, </publisher> <pages> 662-681, </pages> <address> 1996, Oxford, UK. </address>
Reference-contexts: A second example demonstrates the application of abstraction and model checking in the verification of a communication protocol, where theorem proving is used to ensure that the abstraction preserves the correctness property <ref> [7] </ref>. This is joint work with S. Rajan, M. Srivas, and K. Havelund.
Reference: [8] <author> G. Holzmann and D. Peled, </author> <title> "An Improvement in Formal Verification," FORTE'94, Formal Description Techniques 1994, </title> <publisher> Chapman & Hall, </publisher> <pages> 197-211, </pages> <address> 1994, Bern, Switzerland. </address>
Reference-contexts: Applying the reduction constructs a reduced state-space that generates at least one representative for each equivalence class. The reduction approach is also extended to branching specifications. Partial order reduction techniques are used to alleviate the state-space explosion in automatically verifying concurrent programs <ref> [9, 6, 19, 13, 14, 8, 5] </ref>. The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected. <p> The simplicity of the principles behind these methods suggest that they can be integrated into any state-based automatic verification tool. The SPIN model-checking tool already employs partial order reduction <ref> [8] </ref>. - 15 - 2.20 Carl Pixley, Motorola Case Studies in Formal Verification of Design Equivalence Deciding design equivalence continues to be an important problem in industry. In a recent microprocessor design, fourteen "custom cells" required comparison.
Reference: [9] <author> S. Katz and D. Peled, </author> <title> "Verification of Distributed Programs Using Representative Interleaving Sequences," </title> <booktitle> Distributed Computing, 6 (1992), </booktitle> <pages> 107-120. </pages>
Reference-contexts: Applying the reduction constructs a reduced state-space that generates at least one representative for each equivalence class. The reduction approach is also extended to branching specifications. Partial order reduction techniques are used to alleviate the state-space explosion in automatically verifying concurrent programs <ref> [9, 6, 19, 13, 14, 8, 5] </ref>. The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected.
Reference: [10] <author> R. P. Kurshan, </author> <title> "The Complexity of Verification," </title> <booktitle> in Proc. of the 26th ACM Symposium on Theory of Computing, </booktitle> <pages> 365-371, </pages> <year> 1994. </year>
Reference-contexts: Conventional methods for solving this problem are doomed to fail, as the size of the product P 1 fi P 2 fi fi P n is very big (at least exponential in n). Kurshan has suggested the method of Reduction Hierarchies as a heuristic for solving this problem <ref> [10] </ref>. In the reduction-hierarchy method, as demonstrated in the figure on the right, we place the processes P 1 ; P 2 ; : : : ; P n at the bottom of the hierarchy, place the task T at its top, and try "to bridge the gap".
Reference: [11] <author> R. P. Kurshan, </author> <title> Computer-Aided Verification of Coordinating Processes: The Automata-Theoretic Approach, </title> <publisher> Princeton University Press, </publisher> <address> Princeton NJ, </address> <year> 1994. </year>
Reference-contexts: Lacking this, the objective is to decompose T into a parallel composition, each of whose components is local. The next talk discusses this decomposition problem in the more general framework of reduction hierarchies. A thorough discussion of the speaker's approach to verification can be found in <ref> [11] </ref>. 2.18 Ken McMillan, Cadence Berkeley Labs Design-by-refinement Using the SMV System SMV is a tool for automatic formal hardware verification.
Reference: [12] <author> S. Panda and F. Somenzi, </author> <title> "Who are the variables in your neighborhood," </title> <booktitle> in Proc. of the 1995 International Conference on Computer-Aided Design, </booktitle> <pages> 74-77, </pages> <address> 1995, San Jose, CA. </address>
Reference-contexts: Though the experimental results reported so far are not conclusive, the new method has several attractive features, including the ability to perform in-place manipulation of BDDs, and the ability to combine several operations into one. For more information, see <ref> [12, 18] </ref>. - 22 - 2.30 Moshe Vardi, Rice University Verification = Logic + Algorithmics We describe an automata-theoretic approach to the automatic verification of finite-state programs.
Reference: [13] <author> D. Peled, </author> <title> "All from One, One from All: on Model Checking using representatives, </title> " <booktitle> in Proc. of the 1993 CAV conference, </booktitle> <publisher> LNCS 697, Springer-Verlag, </publisher> <pages> 409-423, </pages> <address> 1993, Elounda Crete, Greece. </address>
Reference-contexts: Applying the reduction constructs a reduced state-space that generates at least one representative for each equivalence class. The reduction approach is also extended to branching specifications. Partial order reduction techniques are used to alleviate the state-space explosion in automatically verifying concurrent programs <ref> [9, 6, 19, 13, 14, 8, 5] </ref>. The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected.
Reference: [14] <author> D. Peled, </author> <title> "Combining Partial Order Reductions with On-the-fly Model-Checking," Journal of Formal Methods in Systems Design, </title> <booktitle> 8 (1996), </booktitle> <pages> pp. 39-64. </pages>
Reference-contexts: Applying the reduction constructs a reduced state-space that generates at least one representative for each equivalence class. The reduction approach is also extended to branching specifications. Partial order reduction techniques are used to alleviate the state-space explosion in automatically verifying concurrent programs <ref> [9, 6, 19, 13, 14, 8, 5] </ref>. The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected. <p> The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected. Selecting such a subset is based on simple which can differ according to the specification language, e.g., for linear temporal logic <ref> [14] </ref> or for branching temporal logic [5]. Using the partial order reduction techniques, it has become possible to analyze problems of larger size, which did not lend themselves to automatic verification before.
Reference: [15] <author> C. Pixley, </author> <title> "A Computational Theory and Implementation of Sequential Hardware Equivalence," </title> <booktitle> in Proc. of the 1990 CAV conference, DIMACS Series on Discrete Mathematics and Theoretical Computer Science, </booktitle> <publisher> American Mathematical Society, </publisher> <pages> 293-320, </pages> <address> 1990, New Brunswick, NJ. </address>
Reference-contexts: Verdict is similar to Berkeley's VIS program. Verdict takes Verilog input, has waveform output display, handles transparent latches, and multiphase clocks. Verdict was used to check Sequential Hardware Equivalence (SHE). SHE was reported in 1990 at the CAV workshop held at DIMACS <ref> [15, 16] </ref>. An implementation of CTL using Binary Decision Diagrams (BDDs) to represent transition relations and reachable sets and to compute fixed point algorithms was presented in this DIMACS paper. Verdict, SMV and VIS implicitly evaluate CTL properties with respect to all initial states. <p> If the two designs have equivalent states, the proposition (EF AG (outputs RT L = outputs Gate)) is then checked. If the EF-AG property is true then both design are resettable, if not, then at least one design cannot be reset <ref> [15] </ref>. When a design pair does not compare favorably with SHE, an initialization sequence (in 1 ; in 2 ; :::; in k ) is provided by the design team. A very significant implementation enhancement was observed. There are two ways of checking initialization.
Reference: [16] <author> C. Pixley, </author> <title> "A Theory and Implementation of Sequential Hardware Equivalence," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> 1469-1478. </pages>
Reference-contexts: Verdict is similar to Berkeley's VIS program. Verdict takes Verilog input, has waveform output display, handles transparent latches, and multiphase clocks. Verdict was used to check Sequential Hardware Equivalence (SHE). SHE was reported in 1990 at the CAV workshop held at DIMACS <ref> [15, 16] </ref>. An implementation of CTL using Binary Decision Diagrams (BDDs) to represent transition relations and reachable sets and to compute fixed point algorithms was presented in this DIMACS paper. Verdict, SMV and VIS implicitly evaluate CTL properties with respect to all initial states.
Reference: [17] <author> S. Rajan, N. Shankar, </author> <title> and M.K. Srivas, "An integration of model-checking with automated proof checking," </title> <booktitle> in Proc. of the 1995 CAV conference, </booktitle> <publisher> LNCS 939, Springer-Verlag, </publisher> <pages> 84-97, </pages> <year> 1995, </year> <institution> Liege, Belgium. </institution>
Reference-contexts: We describe an approach for such an integration where a BDD-based checker for Park's -calculus has been used as a decision procedure within the framework of the PVS proof checker <ref> [17] </ref>. We argue that our approach fits in nicely with the design philosophy of PVS where highly efficient decision procedures are used as the workhorses of an interactive proof checker.
Reference: [18] <author> R. Rudell, </author> <title> "Dynamic variable ordering for ordered binary decision diagrams," </title> <booktitle> in Proc. of the 1993 International Conference on Computer-Aided Design, </booktitle> <pages> 42-47, </pages> <address> 1993, Santa Clara, CA. </address>
Reference-contexts: Though the experimental results reported so far are not conclusive, the new method has several attractive features, including the ability to perform in-place manipulation of BDDs, and the ability to combine several operations into one. For more information, see <ref> [12, 18] </ref>. - 22 - 2.30 Moshe Vardi, Rice University Verification = Logic + Algorithmics We describe an automata-theoretic approach to the automatic verification of finite-state programs.
Reference: [19] <author> A. Valmari, </author> <title> "A stubborn attack on state explosion," Journal of Formal Methods in System Design, </title> <booktitle> 1 (1992), </booktitle> <pages> 297-322. </pages>
Reference-contexts: Applying the reduction constructs a reduced state-space that generates at least one representative for each equivalence class. The reduction approach is also extended to branching specifications. Partial order reduction techniques are used to alleviate the state-space explosion in automatically verifying concurrent programs <ref> [9, 6, 19, 13, 14, 8, 5] </ref>. The reduction is based on a modified depth-first-search, where at each searched state only a subset of the enabled transitions is selected.
References-found: 19

