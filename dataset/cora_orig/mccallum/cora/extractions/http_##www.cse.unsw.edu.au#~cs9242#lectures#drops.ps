URL: http://www.cse.unsw.edu.au/~cs9242/lectures/drops.ps
Refering-URL: http://www.cse.unsw.edu.au/~cs9242/lectures/
Root-URL: http://www.cse.unsw.edu.au
Email: email: haertig@os.inf.tu-dresden.de  
Title: DROPS OS Support for Distributed Multimedia Applications  
Author: Hermann Hartig Robert Baumgartl Martin Borriss Claude-Joachim Hamann Michael Hohmuth Frank Mehnert Lars Reuther Sebastian Schonberg Jean Wolter 
Address: D-01062 Dresden, Germany  
Affiliation: Dresden University of Technology Department of Computer Science  
Abstract: The characterising new requirement for distributed multimedia applications is the coexistence of dynamic real-time and non-real-time applications on hosts and networks. While some networks (e.g., ATM) in principle have the capability to reserve bandwidth on shared links, host systems usually do not. DROPS (Dresden Real-time OPerating System) is being built to remedy that situation by providing resource managers that allow the reservation of resources in advance and enforce that reservations. It allows the coexistence of timesharing applications (with no reservations) and real-time applications (with reservations). By outlining the principle architecture, some design decisions, and first results, the paper demonstrates how these objectives can be met using straightforward OS technology. It argues that middleware for diverse platforms cannot meet these objectives efficiently without proper core operating system support. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> AIM Technology. AIM Multiuser Benchmark, Suite VII, </institution> <year> 1996. </year>
Reference-contexts: To measure the effect of running Linux as a user level process and using explicit syncronisation we used the commercial AIM Multiuser Benchmark Suite VII. It uses Load Mix Modeling to test how well multiuser systems perform under different application loads <ref> [1] </ref>. (The AIM benchmark results presented in this paper are not certified by AIM Technology.) For macrobenchmarks like AIM, the introduction of soft interrupts doesn't seem to have much effect. <p> For example, maximum achievable throughput dropped from 130.7 Mbps (traffic management disabled) to 128.5 Mbps (traffic management in effect). Next, we looked at performance degradation imposed by a high bandwidth ATM connection on the AIM multiuser benchmark suite VII <ref> [1] </ref> running under L4Linux. Figure 7 shows the results. System performance degrades pretty close to the prediction using the crude resource estimation algorithm. Using its knowledge about CPU time needed for the 40 Mbps ATM connection, remaining system performance is estimated to be about 69 %.
Reference: [2] <author> Werner Almesberger. </author> <title> Linux ATM API (Draft v. 0.4). </title> <type> Technical report, </type> <institution> LRC Lausanne, </institution> <year> 1996. </year>
Reference-contexts: The protocol provides an API which is aligned to Linux' ATM implementation <ref> [2] </ref> and work of the ATM Forum. Implementation of the protocol server runs stable and is transparently being used by the time-sharing subsystem for all standard services (e.g., TCP/IP over ATM) .
Reference: [3] <author> Martin Borriss and Hermann Hartig. </author> <title> Design and implementation of a real-time ATM-based protocol server. </title> <type> Technical Report SFB-G2-02/98, </type> <institution> Sonderforschungsbereich der Deutschen Forschungsge-meinschaft 358, TU Dresden, </institution> <month> June </month> <year> 1998. </year> <note> Available from URL: http://os.inf.tu-dresden.de/pubs/#pub-rtatm. </note>
Reference-contexts: To the best of our knowledge, this yields the first end fully functional end system implementation of a predictable ATM-based protocol stack. A detailed description of design and implementation of the DROPS ATM component is contained in <ref> [3] </ref>. 4.3 The SCSI and File-System Compo nents The file system component offers three principle interfaces: * a real-time interface as briefly described in section 2.2 to access a real-time file in real-time; * a time-sharing interface to access a non-real-time file in a non-real-time fashion, i.e., without any known prop
Reference: [4] <author> F. B. des Places, N. Stephen, and F. D. Reynolds. </author> <title> Linux on the OSF Mach3 microkernel. </title> <booktitle> In Conference on Freely Distributable Software, </booktitle> <address> Boston, MA, </address> <month> February </month> <year> 1996. </year> <title> Free Software Foundation, </title> <type> 59 Temple Place, Suite 330, </type> <address> Boston, MA 02111. </address> <note> Available from URL: http://www.gr.osf.org/~stephen/fsf96.ps. </note>
Reference-contexts: Linux RT-Linux L4Linux, not tame L4Linux, tame L4Linux, colored per minute depending on AIM load units. at Carnegie Mellon University [6] and at OSF <ref> [4] </ref>: System call traps are reflected to the calling process using a trampoline mechanism. The exception handler calls the Linux server process using IPC. Interrupts are mapped to IPC to top halves of device drivers running as threads. Driver threads are subject to standard L4 scheduling.
Reference: [5] <author> Peter Druschel and Larry L. Peterson. Fbufs: </author> <title> A high-bandwidth cross-domain transfer facility. </title> <booktitle> In 14th ACM Symposium on Operating System Principles (SOSP), </booktitle> <pages> pages 189202, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Hence, DROPS uses virtual memory management techniques similar to fbufs <ref> [5] </ref>, extended however by time-interval-stamps for the validity of memory regions. thread send flexpage flush region organised by producer valid from time for duration address space consumerproducer An application producing a data stream for a consumer application organises a region of the consumer's address space.
Reference: [6] <author> D. Golub, R. Dean, A. Forin, and R. Rashid. </author> <title> Unix as an application program. </title> <booktitle> In USENIX 1990 Summer Conference, </booktitle> <pages> pages 8795, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Linux RT-Linux L4Linux, not tame L4Linux, tame L4Linux, colored per minute depending on AIM load units. at Carnegie Mellon University <ref> [6] </ref> and at OSF [4]: System call traps are reflected to the calling process using a trampoline mechanism. The exception handler calls the Linux server process using IPC. Interrupts are mapped to IPC to top halves of device drivers running as threads. Driver threads are subject to standard L4 scheduling.
Reference: [7] <author> Cl.-J. Hamann. </author> <title> On the quantitative specification of jitter constrained periodic streams. </title> <booktitle> In MASCOTS, </booktitle> <address> Haifa, Israel, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: D t t 0 allowed interval for event E i t 0 t i =iT Based on a formal definition Hamann <ref> [7] </ref> proved the equivalence of numerous sets of parameters that are used to specify the jitter of streams and provided formulas to compute the duration parameters needed, mainly the maximum burst size L and the lower bound P of buffer size to avoid loss of data: L = 1 + t
Reference: [8] <author> H. Hartig, M. Hohmuth, J. Liedtke, S. Schonberg, and J. Wolter. </author> <title> The performance of -kernel-based systems. </title> <booktitle> In 16th ACM Symposium on Operating System Principles (SOSP), </booktitle> <pages> pages 6677, </pages> <address> Saint-Malo, France, </address> <month> October </month> <year> 1997. </year> <note> Paper and slides available from URL: http://os.inf.tu-dresden.de/L4/. </note>
Reference-contexts: A proper discussion of related work is omitted due to lack of space. 2 The DROPS Architecture DROPS borrows from the (almost ancient) principle to provide multiple OS personalities based on virtual machines or microkernels. It runs a time-sharing personality (a modified Linux kernel <ref> [8] </ref>) as a user level program side-by-side with a real-time personality. It has a manager for basic resources to provide CPU time, second-level cache and main memory to real-time and time-sharing system components and applications. <p> Processes need to be notified when nice to have cycles become available or unavailable to allow adaptation. Static reservation of CPU time for a given process and time interval as employed in the MARS system [11] or in principle in <ref> [8] </ref> or EDF based scheduling is much to inflexible due to the impossibility to precisely predict I/O interrupts. Classic priority based systems do not offer enough flexibility to allow programmers to influence scheduling. Capacity Reserves [13] provide a notion to reserve processor shares for tasks subject to time constraints. <p> The average slowdown of L 4 Linux compared to monolithic Linux is 3.8 % while for a tame L 4 Linux server it is 3.9 %. Earlier measurements <ref> [8] </ref> showed a penalty of 8.3 %. While analyzing the exact penalties involved with L 4 Linux we found a missing wakeup in our low-level interrupt handler leading to unnecessary idle times within the system. After fixing the bug the performance penalty went down to 2 %4 %.
Reference: [9] <editor> H. Hartig, J. Wolter, and J. Liedtke. Flexible-sized page-objects. </editor> <booktitle> In 5th International Workshop on Object Orientation in Operating Systems (IWOOOS), </booktitle> <pages> pages 102106, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: The real starting time and the duration parameters are used to calculate the time-interval-stamp for each unit of the stream. Units are provided to the consumer before their time interval and flushed thereafter. The implementation is based on sending, receiving, and flushing flexpages <ref> [9] </ref>. Flexpages are roughly similar but much more efficient then Mach's out-of-line messages. A producer acts as an external pager for its consumer.
Reference: [10] <author> Hermann Hartig, Michael Hohmuth, and Jean Wolter. </author> <title> Taming linux. </title> <booktitle> In Proceedings of the 5th Annual Australasian Conference on Parallel And Real-Time Systems (PART '98), </booktitle> <address> Adelaide, Australia, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: The exception handler calls the Linux server process using IPC. Interrupts are mapped to IPC to top halves of device drivers running as threads. Driver threads are subject to standard L4 scheduling. Synchronisation of critical regions is done explicitly rather than by disabling interrupts <ref> [10] </ref>. Memory resources are divided between the L 4 Linux subsystem and the real-time side. To measure the effect of running Linux as a user level process and using explicit syncronisation we used the commercial AIM Multiuser Benchmark Suite VII. <p> After fixing the bug the performance penalty went down to 2 %4 %. Tamed Linux reduces worst case interrupt latencies to about 20 s on the Intel architecture <ref> [10] </ref>. 4.2 ATM Subsystem A prime example of a DROPS component is its native ATM protocol implementation. While ATM has been developed with strong emphasis on deterministic high-speed communication, current operating systems and networking protocols cannot yet fully utilize its potential. <p> For instance, when using only one half of the cache, L 4 Linux runs a simple compilation application at 9.8 % penalty. More details can be found in <ref> [10] </ref>. 5 Conclusion The essential techniques as described in the former sections are resource reservation that includes CPU cycles, memory management and the driver level. It has been demonstrated that realtime components can be effectively shielded from one another and from non realtime load.
Reference: [11] <author> Hermann Kopetz, Andreas Damm, Christian Koza, Marco Mulaz-zani, Wolfgang Schwabl, Christoph Senft, and Ralph Zainlinger. </author> <title> Distributed fault-tolerant real-time systems: the Mars approach. </title> <journal> IEEE Micro, </journal> <volume> 9(1):2540, </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: Processes need to be notified when nice to have cycles become available or unavailable to allow adaptation. Static reservation of CPU time for a given process and time interval as employed in the MARS system <ref> [11] </ref> or in principle in [8] or EDF based scheduling is much to inflexible due to the impossibility to precisely predict I/O interrupts. Classic priority based systems do not offer enough flexibility to allow programmers to influence scheduling.
Reference: [12] <author> J. Liedtke, H. Hartig, and M. Hohmuth. </author> <title> OS-controlled cache predictability for real-time systems. </title> <booktitle> In Third IEEE Real-time Technology and Applications Symposium (RTAS), </booktitle> <pages> pages 213223, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: This allows the worst-case execution times of real-time programs to be bound to a significantly lower level. The cache partitioning is accomplished by coloring the main memory pages and controlling which colors of pages can be allocated by a given task set. <ref> [12, 14] </ref> This leads to a significantly better predictable worst case behaviour for some applications. <p> In one of our experiments, a 64 fi 64 matrix multiplication, the slowdown induced by introducing a cache-intensive secondary workload could be reduced by 74 % when partitioning the 2nd-level cache. <ref> [12] </ref> The L 4 Linux server running with a partitioned cache suffers a performance degradation. For instance, when using only one half of the cache, L 4 Linux runs a simple compilation application at 9.8 % penalty.
Reference: [13] <author> C. W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor capacity reserves: Operating systems support for multimedia applications. </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 9099, </pages> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Classic priority based systems do not offer enough flexibility to allow programmers to influence scheduling. Capacity Reserves <ref> [13] </ref> provide a notion to reserve processor shares for tasks subject to time constraints. Tasks with reservations are given priority over other tasks within the limits of their reservation. Capacity reserves don't provide a feedback mechanism allowing to allow applications to adjust to the current system load.
Reference: [14] <author> A. Wolfe. </author> <title> Software-based cache partitioning for real-time applications. </title> <booktitle> In Third International Workshop on Responsive Computer Systems, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: This allows the worst-case execution times of real-time programs to be bound to a significantly lower level. The cache partitioning is accomplished by coloring the main memory pages and controlling which colors of pages can be allocated by a given task set. <ref> [12, 14] </ref> This leads to a significantly better predictable worst case behaviour for some applications.
References-found: 14

