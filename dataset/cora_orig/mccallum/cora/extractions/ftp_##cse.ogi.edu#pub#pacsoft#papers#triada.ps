URL: ftp://cse.ogi.edu/pub/pacsoft/papers/triada.ps
Refering-URL: http://www.cse.ogi.edu/~walton/pub.html
Root-URL: http://www.cse.ogi.edu
Title: Software Design for Reliability and Reuse A Proof-of-Concept Demonstration  
Author: J. Bell, F. Bellegarde, J. Hook, R. B. Kieburtz, A. Kotov, J. Lewis, L. McKinney, D. P. Oliva, T. Sheard, L. Tong, L. Walton, and T. Zhou 
Affiliation: Pacific Software Research Center Oregon Graduate Institute of Science Technology  
Abstract: The Pacific Software Research Center is developing a new method to support reuse and introduce reliability into software. The method is based on design capture in domain specific design languages and automatic program generation using a reusable suite of program transformation tools. The transformation tools, and a domain specific component generator incorporating them, are being implemented as part of a major project underway at the Oregon Graduate Institute of Science and Technology. The processes used in tool development and application of the method are being captured. Once completed, an experiment will be performed on the generator to assess its usability and flexibility. This paper describes the Software Design for Reliability and Reuse method and illustrates its application to the Message Translation and Validation domain, a problem identified by our sponsors so that our method can be compared directly to a previously existing state-of-the-art solution based on code templates produced by the Software Engineering Institute (SEI) [14]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jeffrey M. Bell. </author> <title> An implementation of Reynold's defunctionalization method for a modern functional language. </title> <type> Master's thesis, </type> <institution> Oregon Graduate Institute, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: The transformation tools include: HOT, which applies higher-order transformations [16, 17]; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin [5]; Firstify, an implementation of Reynold's algorithm for defunctionalization <ref> [15, 1, 2] </ref>; and, Astre, a first-order transformation tool based on term-rewriting techniques [3, 4]. When an SDRR-designed program generator is applied to a DSDL specification, it automatically applies the necessary transformations.
Reference: [2] <author> Jeffrey M. Bell and James Hook. </author> <title> Defunctional-ization of typed programs. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: The transformation tools include: HOT, which applies higher-order transformations [16, 17]; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin [5]; Firstify, an implementation of Reynold's algorithm for defunctionalization <ref> [15, 1, 2] </ref>; and, Astre, a first-order transformation tool based on term-rewriting techniques [3, 4]. When an SDRR-designed program generator is applied to a DSDL specification, it automatically applies the necessary transformations.
Reference: [3] <author> Fran~coise Bellegarde. </author> <title> Program transformation and rewriting. </title> <booktitle> In Proceedings of the fourth conference on Rewriting Techniques and Applications, volume 488 of LNCS, </booktitle> <pages> pages 226-239, </pages> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The transformation tools include: HOT, which applies higher-order transformations [16, 17]; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin [5]; Firstify, an implementation of Reynold's algorithm for defunctionalization [15, 1, 2]; and, Astre, a first-order transformation tool based on term-rewriting techniques <ref> [3, 4] </ref>. When an SDRR-designed program generator is applied to a DSDL specification, it automatically applies the necessary transformations. The pipeline of transformation tools constitutes a very advanced optimizing compiler that takes ADL as input and generates a conventional, imperative target language as output.
Reference: [4] <author> Fran~coise Bellegarde and James Hook. Mon-ads, </author> <title> indexes, and transformations. </title> <booktitle> In TAP-SOFT '93: Theory and Practice of Software Development, volume 668 of LNCS, </booktitle> <pages> pages 314-327. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> A page was omitted from the proceedings, it may be obtained via ftp from ftp.cse.ogi.edu in the file pub/pacsoft/papers/tapsoft.dvi. </note>
Reference-contexts: The transformation tools include: HOT, which applies higher-order transformations [16, 17]; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin [5]; Firstify, an implementation of Reynold's algorithm for defunctionalization [15, 1, 2]; and, Astre, a first-order transformation tool based on term-rewriting techniques <ref> [3, 4] </ref>. When an SDRR-designed program generator is applied to a DSDL specification, it automatically applies the necessary transformations. The pipeline of transformation tools constitutes a very advanced optimizing compiler that takes ADL as input and generates a conventional, imperative target language as output.
Reference: [5] <author> Wei-Ngan Chin and John Darlington. </author> <title> Higher-order removal: A modular approach. Unpublished work, </title> <year> 1993. </year>
Reference-contexts: The transformations are mathematically based and are guaranteed to preserve the computational meaning of the ADL-specified semantics. The transformation tools include: HOT, which applies higher-order transformations [16, 17]; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin <ref> [5] </ref>; Firstify, an implementation of Reynold's algorithm for defunctionalization [15, 1, 2]; and, Astre, a first-order transformation tool based on term-rewriting techniques [3, 4]. When an SDRR-designed program generator is applied to a DSDL specification, it automatically applies the necessary transformations.
Reference: [6] <author> J. R. B. Cockett and D. Spencer. </author> <title> Strong categorical datatypes. </title> <editor> In R. A. G. Seely, editor, </editor> <booktitle> International Meeting on Category Theory, 1991. AMS, </booktitle> <year> 1992. </year>
Reference-contexts: The semantics of a term constructed with a given data constructor will be composed from the semantics of the subterms given as arguments to the data constructor. ADL is a new, higher-order algebraic design language incorporating concepts from categorical and functional programming <ref> [8, 6] </ref>. It is not Ada specific and bears little resemblance to other work on formal design of Ada software systems such as [13] or current Ada Program Definition Language (Ada PDL) [7].
Reference: [7] <author> S. J. Goldsack. </author> <title> Ada for Specification: Possibilities and Limitations. </title> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: ADL is a new, higher-order algebraic design language incorporating concepts from categorical and functional programming [8, 6]. It is not Ada specific and bears little resemblance to other work on formal design of Ada software systems such as [13] or current Ada Program Definition Language (Ada PDL) <ref> [7] </ref>. In particular, the mathematically pure functional structure of the design, found only at the design level in the above approaches, is preserved in ADL programs. This mathematical structure enables automated analysis and manipulation. The control structure of an ADL program is specified through families of high level combinators.
Reference: [8] <author> T. Hagino. </author> <title> A Categorical Programming Language. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1987. </year>
Reference-contexts: The semantics of a term constructed with a given data constructor will be composed from the semantics of the subterms given as arguments to the data constructor. ADL is a new, higher-order algebraic design language incorporating concepts from categorical and functional programming <ref> [8, 6] </ref>. It is not Ada specific and bears little resemblance to other work on formal design of Ada software systems such as [13] or current Ada Program Definition Language (Ada PDL) [7].
Reference: [9] <author> Richard B. Kieburtz. </author> <title> Software design for reliability and reuse (preliminary method definition). </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> October </month> <year> 1993. </year> <month> 8 </month>
Reference-contexts: assigned tasks. * The domain experts who have overall responsibility for the software design, its validation and documentation. * The SDRR method experts, who have knowl-edge of the principles of language design and are familiar with the transformation tools. (In the method definition report, these roles are sig nificantly refined <ref> [9] </ref>.) The design of an SDRR component generator proceeds in a series of steps. The first step requires the attention of the domain experts. In this step, domain analysis is performed to determine the requirements of the intended application which is common to all software development.
Reference: [10] <author> Richard B. Kieburtz and Jeffrey Lewis. </author> <title> Pro--gramming with algebras. </title> <note> Technical Report (submitted for publication), </note> <institution> Oregon Graduate Institute, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Method experts must: * Formulate the domain-specific design language (DSDL) in which to express the parameters, operations and constraints necessary to meet the requirements of the domain application. * Formalize the computational semantics of the DSDL in terms of ADL, the algebraic design language used in SDRR <ref> [11, 10] </ref>. This task requires a computer scientist with advanced training in formal aspects of programming languages and software design. * Design an implementation template characterizing the execution environment. SDRR implementations are stereotyped. <p> A GUI, however, may allow the environment to evolve to include less-skilled workers. 2.2 Formalizing the semantics of a DSDL The formal semantics of a DSDL is defined in terms of PacSoft's algebraic design language (ADL) <ref> [10, 11] </ref>. This semantics gives the DSDL a computational interpretation in which the relations between the principal concepts of a design abstraction are formalized. The first step in the formal specification of a semantics is to specify a datatype that corresponds to the abstract syntax of the DSDL.
Reference: [11] <author> Richard B. Kieburtz and Jeffrey Lewis. </author> <title> Algebraic design language (preliminary definition). </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Method experts must: * Formulate the domain-specific design language (DSDL) in which to express the parameters, operations and constraints necessary to meet the requirements of the domain application. * Formalize the computational semantics of the DSDL in terms of ADL, the algebraic design language used in SDRR <ref> [11, 10] </ref>. This task requires a computer scientist with advanced training in formal aspects of programming languages and software design. * Design an implementation template characterizing the execution environment. SDRR implementations are stereotyped. <p> A GUI, however, may allow the environment to evolve to include less-skilled workers. 2.2 Formalizing the semantics of a DSDL The formal semantics of a DSDL is defined in terms of PacSoft's algebraic design language (ADL) <ref> [10, 11] </ref>. This semantics gives the DSDL a computational interpretation in which the relations between the principal concepts of a design abstraction are formalized. The first step in the formal specification of a semantics is to specify a datatype that corresponds to the abstract syntax of the DSDL.
Reference: [12] <author> Jeffrey R. Lewis. </author> <title> A specification for an MTV generator. </title> <type> Technical Report 94-003, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: The computational content of this description will later be elaborated by giving a formal semantics to the DSDL. In MTV, two documents generated at this stage of design have been delivered. The first is a specification document summarizing our domain analysis, including the identification of the principal abstractions <ref> [12] </ref>. The second is the preliminary definition and informal semantics of the DSDL [20]. Documents giving the revised language definition and its formal definition in ADL will follow. Often, a graphical user interface (GUI) can be used to help an application designer formulate a design in the DSDL. <p> A "solution" consists of six functions: translation functions between external and internal, between user and internal, and check functions on user and external messages. In the specification, Jeffrey Lewis introduced a "logical" representation that is essentially the internal representation without intrafield constraints <ref> [12] </ref>. This provides a representation that can be tested for compliance to the constraints. In the Message Specification Language (MSL), the DSDL for MTV, a user specifies the logical structure of the message as the logical type.
Reference: [13] <author> S. D. Livintchouk and A. S. Matsumoto. </author> <title> An algebraic approach to reusable ada components. Ada Letters, </title> <booktitle> III, </booktitle> <year> 1983. </year>
Reference-contexts: ADL is a new, higher-order algebraic design language incorporating concepts from categorical and functional programming [8, 6]. It is not Ada specific and bears little resemblance to other work on formal design of Ada software systems such as <ref> [13] </ref> or current Ada Program Definition Language (Ada PDL) [7]. In particular, the mathematically pure functional structure of the design, found only at the design level in the above approaches, is preserved in ADL programs. This mathematical structure enables automated analysis and manipulation.
Reference: [14] <author> Charles Plinta, Kenneth Lee, and Michael Riss-man. </author> <title> A model solution for C 3 I message translation and validation. </title> <type> Technical Report CMU/SEI-89-TR-12 ESD-89-TR-20, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: Below we will focus exclusively on the external to logical translation; we will not consider the logical to user translation. A typical problem specification is given in Figure 2. Study of the domain analysis in the SEI Model Solution <ref> [14] </ref> and analysis of messages led Lewis to specify that the basic types in messages are integers, integer subranges, strings, string subranges, booleans and enumeration types. These types may be arranged in records (labeled products), variant records (labeled sums), lists of arbitrary length, or arrays. This analy 5 No.
Reference: [15] <author> John C. Reynolds. </author> <title> Definitional interpreters for higher-order programming languages. </title> <booktitle> In ACM National Conference, </booktitle> <pages> pages 717-740. </pages> <publisher> ACM, </publisher> <year> 1972. </year>
Reference-contexts: The transformation tools include: HOT, which applies higher-order transformations [16, 17]; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin [5]; Firstify, an implementation of Reynold's algorithm for defunctionalization <ref> [15, 1, 2] </ref>; and, Astre, a first-order transformation tool based on term-rewriting techniques [3, 4]. When an SDRR-designed program generator is applied to a DSDL specification, it automatically applies the necessary transformations.
Reference: [16] <author> Tim Sheard. </author> <title> Type parametric programming. </title> <type> Technical Report 93-018, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: Performance improvement is obtained through the use of automated program transformations that are applied during the course of program generation. The transformations are mathematically based and are guaranteed to preserve the computational meaning of the ADL-specified semantics. The transformation tools include: HOT, which applies higher-order transformations <ref> [16, 17] </ref>; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin [5]; Firstify, an implementation of Reynold's algorithm for defunctionalization [15, 1, 2]; and, Astre, a first-order transformation tool based on term-rewriting techniques [3, 4].
Reference: [17] <author> Tim Sheard and Leonidas Fegaras. </author> <title> A fold for all seasons. </title> <booktitle> In Proceedings of the conference on Functional Programming and Computer Architecture, </booktitle> <address> Copenhagen, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Performance improvement is obtained through the use of automated program transformations that are applied during the course of program generation. The transformations are mathematically based and are guaranteed to preserve the computational meaning of the ADL-specified semantics. The transformation tools include: HOT, which applies higher-order transformations <ref> [16, 17] </ref>; PEP, which performs lambda-lifting and specialization using an algorithm based on the work of Chin [5]; Firstify, an implementation of Reynold's algorithm for defunctionalization [15, 1, 2]; and, Astre, a first-order transformation tool based on term-rewriting techniques [3, 4].
Reference: [18] <author> Dennis Volpano and Richard B. Kieburtz. </author> <title> Software templates. </title> <booktitle> In Proceedings Eighth International Conference on Software Engineering, </booktitle> <pages> pages 55-60. </pages> <publisher> IEEE Computer Society, </publisher> <month> August </month> <year> 1985. </year>
Reference-contexts: The program instan-tiator compiles this functional program into the target language, Ada. The translation introduces the use of assignable variables and binds imperative implementations of the abstract data types assumed in the ADL program. This binding is specified by a set of implementation templates. In addition an interface specification <ref> [18, 19] </ref> describes the (typed) system interface that will be seen by the software component that is the object of the design. The interface functionality can be specified at whatever level of formalism is used in the overall software architecture.
Reference: [19] <author> Dennis Volpano and Richard B. Kieburtz. </author> <title> The templates approach to software reuse. </title> <editor> In Ted J. Biggersstaff and Alan J. Perlis, editors, </editor> <booktitle> Software Reusability, </booktitle> <pages> pages 247-255. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: The program instan-tiator compiles this functional program into the target language, Ada. The translation introduces the use of assignable variables and binds imperative implementations of the abstract data types assumed in the ADL program. This binding is specified by a set of implementation templates. In addition an interface specification <ref> [18, 19] </ref> describes the (typed) system interface that will be seen by the software component that is the object of the design. The interface functionality can be specified at whatever level of formalism is used in the overall software architecture.
Reference: [20] <author> Lisa Walton and James Hook. </author> <title> A preliminary definition of a domain specific design language for message translation and valiation. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: In MTV, two documents generated at this stage of design have been delivered. The first is a specification document summarizing our domain analysis, including the identification of the principal abstractions [12]. The second is the preliminary definition and informal semantics of the DSDL <ref> [20] </ref>. Documents giving the revised language definition and its formal definition in ADL will follow. Often, a graphical user interface (GUI) can be used to help an application designer formulate a design in the DSDL.
References-found: 20

