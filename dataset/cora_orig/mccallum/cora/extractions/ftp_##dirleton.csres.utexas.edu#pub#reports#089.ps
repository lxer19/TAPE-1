URL: ftp://dirleton.csres.utexas.edu/pub/reports/089.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Mathematical Model of the Mach Kernel: Atomic Actions and Locks  
Author: William R. Bevier and Lawrence M. Smith 
Note: The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc. Copyright c 1994 Computational Logic, Inc.  
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Pubnum: Technical Report  
Email: EMAIL: bevier@cli.com, lsmith@cli.com  
Phone: TEL: +1 512 322 9951  
Date: 89 November 18, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [BM88] <author> Robert S. Boyer and J Strother Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: The interests of the authors go beyond documentation. We wish to apply tools to the analysis of the model. We use a theorem proving tool called Nqthm <ref> [BM88] </ref> (also known as the Boyer-Moore prover) to state and analyze 2 the model. We have proved consistency of a part of the model with the theorem prover. <p> In the examples of the previous section, we have made some choices. Utility in coding kernel calls is the test for reasonableness of these choices. In our current work, we are applying this method to build an executable model of the kernel in the Nqthm logic <ref> [BM88] </ref>. This model will allow us to analyze both sequential and concurrent interpretations of kernel call implementations. 4.4 A Program that Uses Atomic Actions In this section we display a pseudo code implementation of the kernel call thread create in terms of atomic actions.
Reference: [BS93] <author> William R. Bevier and Lawrence M. Smith. </author> <title> A mathematical model of the mach kernel: Entities and relations. </title> <type> Technical Report 88, </type> <institution> Computational Logic, Inc., </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: We also discuss an important related subject: the meaning of locks. The identification of atomic actions is based on a model of a Mach kernel state in which relations on Mach entities are axiomatically introduced <ref> [BS93] </ref>. In this view, the logical form of a datum that is manipulated by the Mach kernel resembles a tuple in a relational database. The atomic action and locking interfaces present this logical view to the programmer, and hide the data structures that implement this view. <p> We are investigating ways to model execution of kernel calls and prove theorems about these executions. 3 A Model of a Mach Kernel State 3.1 An Axiomatic Model A kernel state consists of entities from several classes such as tasks, threads, ports, messages, pages, and memory objects. In <ref> [BS93] </ref> we identify relations in which entities may participate. For example, a port right is a relation involving a task and a port that characterizes a task's capability on a port. <p> Alternatively, one may think of the model in terms of a relational database 1 . Each Mach relation introduced in <ref> [BS93] </ref> corresponds to a relation in the database. For example, if task t owns thread th, the tuple [t,th] is an element of the task thread relation. <p> One can methodically examine all the relations given in <ref> [BS93] </ref> and identify the atomic actions in each class which can be derived from that relation. <p> It may prove to be more convenient to identify three separate interfaces. Signature 13 port right read: (t; n; ) ! (rc; n; R; i) 10 4.3 Summary We have attempted to make the identification of Mach entities and relations given in <ref> [BS93] </ref> the only activity that requires "art". Given this model, there are several obvious classes of atomic actions. Pragmatic decisions are required to derive interface functions for atomic actions within each class for each relation.
Reference: [EGLT76] <author> K. P. Eswaren, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> CACM, </journal> 19(11) 624-633, November 1976. 
Reference-contexts: We seek an interface to locks at the same level of abstraction as the atomic transitions. The interface should have the following properties. 1. Each interface function locks a well-defined set of tuples. 2. Lock granularity provides reasonable concurrency. 3. Resolution of conflicting locks is efficient. <ref> [EGLT76] </ref> proposes the notion of predicate locks, which allows one to lock arbitrary sets of tuples. This generality entails a potentially high cost in determining when two locking requests conflict. A less general interface that is more efficient in determining conflicts is desirable.
Reference: [GLP75] <author> J.N. Gray, R.A. Lorie, and G.R. Putzolu. </author> <title> Granularity of locks in a shared data base. </title> <booktitle> In Proc. of the Intl. Conf. on Very Large Data Bases, </booktitle> <month> September </month> <year> 1975. </year>
Reference-contexts: Partitioning raises the issues of a hierarchy of lockable structures. Does locking a task imply a lock on its IPC space, or is the space to be considered an independently locked set of tuples? If a hierarchy is intended, then the techniques for locking hierarchies outlined in <ref> [GLP75] </ref> can be used. 4 This should be taken as a comment on the ignorance of the authors. 19 6 Performance Issues In this section we discuss locks and return codes and how they impact performance. 6.1 Locks A straightforward implementation of an atomic action begins with a request for one
Reference: [KS86] <author> Henry F. Korth and Abraham Silberschatz. </author> <title> Database System Concepts. </title> <publisher> McGraw-Hill, </publisher> <year> 1986. </year>
Reference-contexts: Using our previous example, in a consistent state we don't allow tuples [t 1 ,th] and [t 2 ,th] in the task thread relation if t 1 6= t 2 . 1 See <ref> [KS86] </ref> for background on relational databases. 5 The relational database analogy provides an appealing logical view of a kernel state. The logical form of a datum that is manipulated by the Mach kernel is a tuple in some relation.
References-found: 5

