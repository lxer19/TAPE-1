URL: http://www.eecis.udel.edu:80/~chavey/Doc/netbal.ps
Refering-URL: http://www.eecis.udel.edu:80/~chavey/
Root-URL: http://www.cis.udel.edu
Title: DISTRIBUTED MEAN COMPUTATION  
Author: by Laurent Chavey 
Degree: A thesis submitted to the Faculty of the University of Delaware in partial fulfillment of the requirements for the degree of Master of Science in Computer and  c 1996 Laurent Chavey All Rights Reserved  
Date: Spring 1996  
Affiliation: Information Sciences  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> William Hoys and Robert Winkler. </author> <title> Statistics, volume 1. Probability, inference and decision, </title> <year> 1970. </year>
Reference-contexts: Such a solution can be implemented using Distributed Shared Memory <ref> [1] </ref>, which is an abstraction used for sharing data between processes that do not share any physical memory. A process accesses the shared memory by issuing reads and writes through what appears to be ordinary memory within its address space. <p> nDiameter = 0; int nPrint = 0; int main (int argc, char **argv) - int nDone = 1; int nSlot = 0; int nIndex; int nWaitTurn = 0; int nExit; /* Initialize graph */ if (argc &lt;= 1) - fprintf (stderr,"Enter simul [filename] "n"); exit (0); - if (initgraph (argv <ref> [1] </ref>) == -1) - fprintf (stderr,"Error opening file %s "n",argv [1]); exit (-1); - /* print initial network */ printstat (0,nSlot); while (nDone) - /* assume all the nodes are done */ nDone = 0; nSlot ++; 69 /* iterate */ for (nIndex = 0; nIndex &lt; MAX_NODES; nIndex++) - /* <p> argc, char **argv) - int nDone = 1; int nSlot = 0; int nIndex; int nWaitTurn = 0; int nExit; /* Initialize graph */ if (argc &lt;= 1) - fprintf (stderr,"Enter simul [filename] "n"); exit (0); - if (initgraph (argv <ref> [1] </ref>) == -1) - fprintf (stderr,"Error opening file %s "n",argv [1]); exit (-1); - /* print initial network */ printstat (0,nSlot); while (nDone) - /* assume all the nodes are done */ nDone = 0; nSlot ++; 69 /* iterate */ for (nIndex = 0; nIndex &lt; MAX_NODES; nIndex++) - /* look if a node is done we are not done
Reference: [2] <author> Bernard Carre. </author> <title> Graphs and networks, </title> <year> 1979. </year>
Reference: [3] <author> Sape Mullender. </author> <title> Distributed systems, Second Edition, </title> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference: [4] <author> George Coulouris, Jean Dollimore and Tim Kindberg. </author> <title> Distributed systems, concepts and design, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The nodes build their respective list using a distributed node discovery algorithm similar to the ones found in Link State Routing algorithms [13]. Once all the nodes have built their participant list, a distributed election algorithm, such as the Bully algorithm <ref> [4] </ref> or a Token Based Election algorithm [10], is used to elect a leader. Some alternate algorithms can be used for the leader election. These algorithms, based on a Consensus principle [8], require synchronized clocks with some form of broadcasting [9]. <p> An underlying run-time system, which we call a Distributed Memory Manager, ensures that a process can access any portion of the shared memory transparently. For the following solution to the Distributed Mean Computation, we use a Distributed Memory Manager supporting Distributed Shared Objects <ref> [4] </ref>. All the shared objects are referenced using an object name. A given object name may only be assigned to one shared object across the entire shared memory space. <p> that it becomes a fully distributed algorithm, and that it does not need a Distributed Memory Manager, thus making it more scalable, lower its resource utilization, and allows it to support heterogeneous systems. 9 1.2.3 Transaction processing system Another solution to the Distributed Mean Computation uses a Transaction Processing System <ref> [4] </ref>. A Transaction Processing System uses one or more servers to encapsulate all the shared resources, and to execute a sequence of operations called a transaction. A transaction is initiated by a client issuing a transaction request with the Transaction Processing System.
Reference: [5] <author> O. Carvalho and G. Roucairol, </author> <title> "Mutual exclusion in computer networks", </title> <journal> Communication of the ACM, </journal> <volume> 26(2), </volume> <pages> 146-148, </pages> <year> 1983. </year>
Reference-contexts: CODE AND DATA FILES B.1 Simulation source code #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;math.h&gt; #define MAX_NODES 20 #define MAX_LINKS MAX_NODES /* nState */ #define NOT_USED 0 #define IN_USE 1 #define UPDATED 2 /* link state */ #define LINK_NOTOWNED 1 #define LINK_BOUNDARY 2 #define LINK_NEIGHBOR 3 typedef struct - char szName <ref> [5] </ref>; int nState; int nIterate; int nWaitTurn; float fValue; int Links [MAX_LINKS]; NODE; int isowner (int); 67 68 int iterate (int); int releaseownership (int); int printstat (int, int); int initgraph (char *); int gettoken (FILE *, char *); NODE Nodes [MAX_NODES]; float fEpsilon = 0; int nDiameter = 0; int nPrint
Reference: [6] <author> L. Lamport, </author> <title> "The mutual exclusion problem", </title> <journal> Journal of the ACM, </journal> <volume> 33(2), </volume> <pages> 313-348, </pages> <year> 1986. </year>
Reference: [7] <author> E. Chang and R. Roberts, </author> <title> "An improved algorithm for decentralized extrema-finding in circular configurations of processes", </title> <journal> Communications of the ACM, </journal> <volume> 22(5), </volume> <pages> 181-183, </pages> <month> May </month> <year> 1979. </year>
Reference: [8] <author> M. Raynal. </author> <title> Distributed Algorithms and Protocols, </title> <publisher> Wiley, </publisher> <year> 1988. </year>
Reference-contexts: Once all the nodes have built their participant list, a distributed election algorithm, such as the Bully algorithm [4] or a Token Based Election algorithm [10], is used to elect a leader. Some alternate algorithms can be used for the leader election. These algorithms, based on a Consensus principle <ref> [8] </ref>, require synchronized clocks with some form of broadcasting [9]. Consensus based election algorithms are very sensitive to single node failure and can not support very large networks.
Reference: [9] <author> D. Dolev, C. Dwork, and L. Stockmeyer, </author> <title> "On the minimal synchronism needed for distributed consensus", </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <year> 1987. </year>
Reference-contexts: Some alternate algorithms can be used for the leader election. These algorithms, based on a Consensus principle [8], require synchronized clocks with some form of broadcasting <ref> [9] </ref>. Consensus based election algorithms are very sensitive to single node failure and can not support very large networks. As such, Consensus bases algorithms do not provide a good enough solution for the election of a leader, and can not be used for the leader based Distributed Mean Computation.
Reference: [10] <author> G. Frederickson and N. Lynch, </author> <title> "Electing a leader in a synchronous ring", </title> <journal> Journal of the Acm, </journal> <volume> 34(1), </volume> <pages> 98-115, </pages> <month> january </month> <year> 1987. </year>
Reference-contexts: The nodes build their respective list using a distributed node discovery algorithm similar to the ones found in Link State Routing algorithms [13]. Once all the nodes have built their participant list, a distributed election algorithm, such as the Bully algorithm [4] or a Token Based Election algorithm <ref> [10] </ref>, is used to elect a leader. Some alternate algorithms can be used for the leader election. These algorithms, based on a Consensus principle [8], require synchronized clocks with some form of broadcasting [9].
Reference: [11] <author> R. Bisiani and M. Ravishankar, </author> <title> "Plus. A distributed shared memory system", </title> <booktitle> Proc 17th Int Sym on Computer Architecture, 1990. </booktitle> <volume> 80 81 </volume>
Reference: [12] <author> K.P. Birman, </author> <title> "The process group approach to reliable distributed computing", </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 36-53, </pages> <year> 1993. </year>
Reference: [13] <author> R. Perlman. </author> <title> Interconnections, Bridges and Routers. </title> <booktitle> Addisson-Wesley Professional Computing Series, </booktitle> <year> 1992. </year>
Reference-contexts: The nodes build their respective list using a distributed node discovery algorithm similar to the ones found in Link State Routing algorithms <ref> [13] </ref>. Once all the nodes have built their participant list, a distributed election algorithm, such as the Bully algorithm [4] or a Token Based Election algorithm [10], is used to elect a leader. Some alternate algorithms can be used for the leader election.
References-found: 13

