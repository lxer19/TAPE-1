URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-57.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-57.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [Bor81] <author> Alan Borning. </author> <title> The Programming Language Aspects of ThingLab, a Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Visual approaches include GVL [GC90] for the display of data structures (e.g., lists) that are created during the execution of a program, and ThingLab <ref> [Bor81] </ref>. ThingLab has an object-oriented approach, and the constraints are integrated with the visual classes that specify the pictures. <p> The fact that the language has a visual syntax distinguishes it from other approaches such as IDEAL [Wyk82]. IDEAL, ThingLab, and the U-term language are the only proposals that deal with polar as well as Cartesian coordinates. In ways, our work is closer to (and also drew from) ThingLab <ref> [Bor81] </ref>, in that the user can define visual classes by example, and the language is constraint-based and object-oriented. However, ThingLab is a visual programming language while the U-term language is a language to specify pictures that represent data.
Reference: [CNI93] <author> B. Chandrasekaran, N. Hari Narayanan, and Yumi Iwasaki. </author> <title> Reasoning with Diagrammatic Representations: A Report on the Spring Symposium. </title> <journal> AI Magazine, </journal> <volume> 14(2), </volume> <month> Summer </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Mappings between the data domain and the visual domain have been used for extracting information from the data, by reasoning in the visual domain <ref> [Gre83, CNI93] </ref>. For example, Venn diagrams are visual representations of abstract sets and of their inclusion relationships. Other diagrams are close to the concrete entities that they represent, such as transportation and communication networks.
Reference: [Cru92] <author> Isabel F. Cruz. DOODLE: </author> <title> A Visual Language for Object-Oriented Databases. </title> <booktitle> In ACM-SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 71-80, </pages> <year> 1992. </year>
Reference-contexts: The database language is called doodle (Draw an Object-Oriented Database LanguagE ). doodle as a visual query language is presented in <ref> [Cru92] </ref>. In this section we give an overview of doodle. A doodle visual program is a set of visual rules, which can be read in any order. Visual rules are vertically divided by a double bar. <p> However, ThingLab is a visual programming language while the U-term language is a language to specify pictures that represent data. Computational power can be given to the U-term language by embedding it in doodle <ref> [Cru92, Cru93] </ref>. Constraint satisfaction is an important part of ThingLab, which we have not yet tackled. This could be the subject for future research. Other topics of future research include: Language design. <p> Temporal constraints. Another intriguing subject is the use of the U-term language to express temporal constraints. These could use 3D display, where the third dimension is used for time. Simple temporal reasonings can already be expressed by doodle, using a 2D display of temporal charts <ref> [Cru92] </ref>. Constraint query languages. Constraint query languages such as [KKR90] have a textual syntax. The U-term language could provide a visual syntax for such languages. Graph drawing.
Reference: [Cru93] <author> Isabel F. Cruz. </author> <title> Querying Object-Oriented Databases with User-Defined Visualizations. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1993. </year>
Reference-contexts: However, ThingLab is a visual programming language while the U-term language is a language to specify pictures that represent data. Computational power can be given to the U-term language by embedding it in doodle <ref> [Cru92, Cru93] </ref>. Constraint satisfaction is an important part of ThingLab, which we have not yet tackled. This could be the subject for future research. Other topics of future research include: Language design.
Reference: [CTV93] <author> Isabel F. Cruz, Roberto Tamassia, and Pascal Van Hentenryck. </author> <title> A Visual Approach to Graph Drawing. In Graph Drawing'93, </title> <address> Sevres, France, </address> <month> September </month> <year> 1993. </year> <note> The abstracts of the papers are available via anonymous ftp from wilma.cs.brown.edu (128.148.33.66), in file gd93-v2.tex.Z in the directory /pub/papers/compgeo. </note>
Reference-contexts: Graph drawing. Further work in graph drawing should address more complex problems, such as the identification of the kinds of graph layouts that can be specified by the U-term language, and characterization of the graph properties (e.g., planarity) that can be expressed (see also <ref> [CTV93] </ref>). Design of the interface. The level of the detail of the U-terms suggest a sophisticated interface, to assist the user in the visual specification of constraints. Different levels of detail as in Figures 1 (i) and 13 should also be supported. Expressive power of doodle as a picture generator.
Reference: [DETT93] <author> G. Di Battista, P. Eades, R. Tamassia, and I.G. Tollis. </author> <title> Algorithms for Drawing Graphs: an Annotated Bibliography. </title> <type> Technical report, </type> <institution> Department of Computer Science, Brown University, </institution> <month> March </month> <year> 1993. </year> <note> To appear in Computational Geometry: Theory and Applications. </note>
Reference-contexts: ! 5; by ! 15:5; rx ! 13; ty ! 15:5]; arrow [lx ! 14; by ! 14; rx ! 14; ty ! 15]; arrow [lx ! 16; by ! 15:5; rx ! 15; ty ! 15:5]g gridon 6 Examples The examples in this section are applications of graph drawing <ref> [DETT93] </ref> to the U-term language.
Reference: [GC90] <author> T. C. Nicholas Graham and J. R. Cordy. GVL: </author> <title> A Graphical, </title> <booktitle> Functional Language for the Specification of Output in Programming Languages. In Proc. IEEE Intl. Conference on Computer Languages, </booktitle> <pages> pages 11-22, </pages> <year> 1990. </year>
Reference-contexts: Previous work on data display specification includes constraint-based languages that have a textual syntax, such as TRIP [Kam89], which uses Prolog terms and functors to specify pictures, and IDEAL [Wyk82], where textual programs instantiate abstract data types. Visual approaches include GVL <ref> [GC90] </ref> for the display of data structures (e.g., lists) that are created during the execution of a program, and ThingLab [Bor81]. ThingLab has an object-oriented approach, and the constraints are integrated with the visual classes that specify the pictures.
Reference: [GR90] <author> Eric J. Golin and Steve P. Reiss. </author> <title> The Specification of Visual Language Syntax. </title> <journal> Journal of Visual Languages and Computing, </journal> (1):141-157, 1990. 
Reference-contexts: Related research has focused on grammars for visual languages, with either a textual syntax (e.g., <ref> [GR90] </ref>) or a visual syntax (e.g.,[Lak87]). This paper is organized as follows. In Section 2, we present an overview of the database language doodle that is based on the U-term language. <p> The objects are described by their shape and by their extent. For example, the extent of objects such as boxes, and lines, is the minimum box that contains the object. The extent is described by the coordinates of two points in that box (as in <ref> [GR90] </ref>). The extent of circles is defined by the coordinates of the center, and the radius. Examples of the extents of two objects are given in 12 rotation GRID ON PREVIOUS NEXT NEXT T PREVIOUS T MN ANY than one well-formed U-term that is mapped to the same abstract U-term. <p> The example of Figure 1 (i) is relatively simple: for instance we have no recursion in the rules. An interesting topic for future research includes the precise comparison of the expressive power of doodle with the expressive power of visual grammars, such as the multiset grammars in <ref> [GR90] </ref>. 18 GRID ON LEFT LEFT L R RIGHT 1 [H] RIGHT RIGHT 1 [H] LEFT 1 [H] 19 Acknowledgements Thanks to Theo Norvell for fruitful discussions that led to the definition of the visual constraint objects and to the refinement of the abstract syntax.
Reference: [Gre83] <author> James G. Greeno. </author> <title> Conceptual Entities. </title> <editor> In Derdre Gentner and Albert L. Stevens, editors, </editor> <booktitle> Mental Models, </booktitle> <pages> pages 227-252. </pages> <publisher> Lawrence Erlbaum Associates, Publishers, </publisher> <address> Hillsdale, N.J., </address> <year> 1983. </year>
Reference-contexts: 1 Introduction Mappings between the data domain and the visual domain have been used for extracting information from the data, by reasoning in the visual domain <ref> [Gre83, CNI93] </ref>. For example, Venn diagrams are visual representations of abstract sets and of their inclusion relationships. Other diagrams are close to the concrete entities that they represent, such as transportation and communication networks.
Reference: [Kam89] <author> Tomihisa Kamada. </author> <title> Visualizing Abstract Objects and Relations A Constraint-Based Approach. </title> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1989. </year>
Reference-contexts: Previous work on data display specification includes constraint-based languages that have a textual syntax, such as TRIP <ref> [Kam89] </ref>, which uses Prolog terms and functors to specify pictures, and IDEAL [Wyk82], where textual programs instantiate abstract data types. Visual approaches include GVL [GC90] for the display of data structures (e.g., lists) that are created during the execution of a program, and ThingLab [Bor81].
Reference: [KKR90] <author> Paris C. Kanellakis, Gabriel M. Kuper, and Peter Z. Revesz. </author> <title> Contraint Query Languages. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 299-313, </pages> <year> 1990. </year>
Reference-contexts: These could use 3D display, where the third dimension is used for time. Simple temporal reasonings can already be expressed by doodle, using a 2D display of temporal charts [Cru92]. Constraint query languages. Constraint query languages such as <ref> [KKR90] </ref> have a textual syntax. The U-term language could provide a visual syntax for such languages. Graph drawing.
Reference: [KLW90] <author> Michael Kifer, Georg Lausen, and James Wu. </author> <title> Logic Foundations of Object-Oriented and Frame-Based Languages. </title> <type> Technical Report 90/14 (2-nd revision), </type> <institution> Department of Computer Science, SUNY Stony Brook, </institution> <year> 1990. </year> <note> To appear in JACM. </note>
Reference-contexts: The doodle program of Figure 1 (i) relates to a software engineering application: the graph visualization of the components of a program. In Figure 1 (i) there are two kinds of D-terms: F-terms. These are terms from F-logic <ref> [KLW90] </ref>. F-terms are depicted as strings of characters. U-terms. These are user-defined terms. A U-term is a picture, which is a sentence of the U-term language. In this program all the terms to the right of the double bar are F-terms, hence the box f-language . <p> A visual constraint between two points, one in each visual object, expresses a spatial relationship between two objects. We define two classes: lengthConstraint and overlapConstraint and describe their types with signature F-logic terms <ref> [KLW90] </ref>. Length constraint.
Reference: [KS86] <author> Henry F. Korth and Abraham Silberschatz. </author> <title> Database System Concepts. </title> <publisher> McGraw-Hill Book Company, </publisher> <address> New York, NY, </address> <year> 1986. </year>
Reference: [Lak87] <author> Fred Lakin. </author> <title> Visual Grammars for Visual Languages. </title> <booktitle> In Proc. AAAI, </booktitle> <year> 1987. </year>
Reference: [Tuf83] <author> Edward R. Tufte. </author> <title> The Visual Display of Quantitative Information. </title> <publisher> Graphics Press., </publisher> <address> Cheshire, Conn., </address> <year> 1983. </year>
Reference-contexts: Other diagrams are close to the concrete entities that they represent, such as transportation and communication networks. Also, bar charts, pie charts, and plot charts can facilitate the comprehension of large amounts of quantitative data <ref> [Tuf83] </ref>. Pictures (as displayed on a computer screen) are sets of graphical objects. Syntactically, a picture is a well-formed sentence in a visual language.
Reference: [Wyk82] <author> Christopher J. Van Wyk. </author> <title> A High-Level Language for Specifying Pictures. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 1(2) </volume> <pages> 163-182, </pages> <month> April </month> <year> 1982. </year> <month> 20 </month>
Reference-contexts: Previous work on data display specification includes constraint-based languages that have a textual syntax, such as TRIP [Kam89], which uses Prolog terms and functors to specify pictures, and IDEAL <ref> [Wyk82] </ref>, where textual programs instantiate abstract data types. Visual approaches include GVL [GC90] for the display of data structures (e.g., lists) that are created during the execution of a program, and ThingLab [Bor81]. <p> This language is declarative and visual. The U-term language is geared to the display of database objects, and to fit in an object-oriented framework. The fact that the language has a visual syntax distinguishes it from other approaches such as IDEAL <ref> [Wyk82] </ref>. IDEAL, ThingLab, and the U-term language are the only proposals that deal with polar as well as Cartesian coordinates. In ways, our work is closer to (and also drew from) ThingLab [Bor81], in that the user can define visual classes by example, and the language is constraint-based and object-oriented.
References-found: 16

