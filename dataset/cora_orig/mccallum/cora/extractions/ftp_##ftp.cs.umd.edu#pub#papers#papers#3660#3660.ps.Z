URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3660/3660.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Approximation Algorithms for Connected Dominating Sets  
Author: Sudipto Guha Samir Khuller 
Address: Maryland,College Park, MD 20742  Maryland,College Park, MD 20742  
Affiliation: Dept. of Computer Science University of  Dept. of Computer Science and UMIACS University of  
Abstract: The dominating set problem in graphs asks for a minimum size subset of vertices with the following property: each vertex is required to either be in the dominating set, or adjacent to some node in the dominating set. We focus on the question of finding a connected dominating set of minimum size, where the graph induced by vertices in the dominating set is required to be connected as well. This problem arises in network testing, as well as in wireless communication. Two polynomial time algorithms that achieve approximation factors of O(H()) are presented, where is the maximum degree, and H is the harmonic function. This question also arises in relation to the traveling tourist problem, where one is looking for the shortest tour such that each vertex is either visited, or has at least one of its neighbors visited. We study a generalization of the problem when the vertices have weights, and give an algorithm which achieves a performance ratio of 3 ln n. We also consider the more general problem of finding a connected dominating set of a specified subset of vertices and provide an O(H()) approximation factor. To prove the bound we also develop an optimal approximation algorithm for the unit node weighted Steiner tree problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Arkin, M. Halldorsson and R. Hassin, </author> <title> "Approximating the tree and tour covers of a graph", </title> <journal> Information Processing Letters, </journal> <volume> 47: </volume> <pages> 275-282, </pages> <year> (1993). </year>
Reference-contexts: They also consider the related question of finding a tour that visits each edge of the graph (connected vertex cover). This is needed when one requires testing the links as well as the nodes. Approximation algorithms for the latter problem were given by Arkin, Halldorsson and Hassin <ref> [1] </ref>. We observe that there is a simple algorithm for the unweighted connected vertex cover problem that gives a factor 2 approximation (the one given in [1] is more complicated). Do a Depth First Search, and take all the non-leaf vertices as the nodes in the vertex cover. <p> Approximation algorithms for the latter problem were given by Arkin, Halldorsson and Hassin <ref> [1] </ref>. We observe that there is a simple algorithm for the unweighted connected vertex cover problem that gives a factor 2 approximation (the one given in [1] is more complicated). Do a Depth First Search, and take all the non-leaf vertices as the nodes in the vertex cover. This clearly induces a connected graph, and the approximation ratio is 2, as shown by Savage [16].
Reference: [2] <author> P. Berman, </author> <type> personal communication, </type> <month> May </month> <year> (1996). </year>
Reference-contexts: By applying a simple greedy strategy to connect the vertices in the dominating set, we proved a bound of H () + H (H ()) [8]. Here we present a modification of the above algorithm, as suggested by Berman <ref> [2] </ref>, and are able to prove a performance guarantee of ln + 3. (Berman has an alternate proof for a performance ratio of H () + 2.) 7 The algorithm runs in two phases. At the start of the first phase all nodes are colored white. <p> at most jOP T j ln a 0 jOP T j + jOP T j + a f + 2 (jOP T j a f ), and since jOP T j a 0 , the solution found has at most jOP T j (ln + 3) nodes. 2 Remark: Berman, <ref> [2] </ref>, has an alternate proof of H () + 2 of the same algorithm. However, since ln H () 0:7, the difference is very small. 4 Generalizations 4.1 Vertex Weighted Graphs An approximation factor of 3 ln n is possible when the vertices have weights.
Reference: [3] <author> P. Berman and M. Furer, </author> <type> personal communication, </type> <month> May </month> <year> (1996). </year>
Reference-contexts: For the special case when the required vertices form a dominating set in a graph and all edges have unit weight, Berman and Furer <ref> [3] </ref> have announced a new algorithm with c = 4 3 . Thus we can improve the performance ratio to 4 3 (1 + H ()).
Reference: [4] <author> P. Berman and V. Ramaiyer, </author> <title> "Improved approximation algorithms for the Steiner tree problem", </title> <journal> J. Algorithms, </journal> <volume> 17 </volume> <pages> 381-408, </pages> <year> (1994). </year>
Reference-contexts: However the first algorithms is simpler and faster. Most of the approximation algorithms that reduce the Steiner ratio below 2, have a high running time <ref> [4, 12] </ref>. 5 Lower Bounds 5.1 Hardness result for Connected Dominating Set We can prove that the set-cover problem can be reduced to the connected dominating set problem by an approximation preserving reduction, thus showing that the approximation factor H () will be hard to improve.
Reference: [5] <author> T. Cormen, C. Leiserson, and R. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Let u k = 0. Adding up all the charges we get 2 (u 0 u 1 ) + j=1 u j 2 + 2 j=1 u j (With some algebraic manipulation (see <ref> [5, page 977] </ref>), one can show that this is at most 2 (1 + H ()). 2 Remark: We could modify the algorithm and at each step scan either one or two vertices, whichever results in a smaller charge to each vertex. In practice, this should give better solutions. <p> We define ffi as the size of the largest subset of S, adjacent to a node in the graph (ffi min (; k)). Proof: By a slight modification to the proof given in <ref> [5, page 977] </ref> we can prove, jBj (H (ffi) 1) jOP T j. (Since the first step reduces to finding a set cover with the size of the largest set being ffi).
Reference: [6] <author> U. Feige, </author> <title> "A threshold of ln n for approximating set-cover", </title> <booktitle> 28th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 314-318, </pages> <year> (1996). </year>
Reference-contexts: We also show an approximation preserving reduction from the set-cover problem to the connected dominating set problem, showing that it is hard to improve the approximation guarantee unless N P DT IM E [n O (loglog n) ] <ref> [13, 6] </ref>. We give a 3 ln n approximation for the version when the vertices have weights. We also show that the upper bound of 2 ln k for approximating node weighted Steiner trees [10], can be improved to ln k, when all Steiner vertices have unit weight. <p> This is based on the hardness results for set cover proven by Lund and Yannakakis [13] and Feige <ref> [6] </ref>. <p> Thus approximating the connected dominating set with a factor of (1*)H () would mean approximating minimum set cover within the same factor. This would imply that N P DT IM E [n O (loglog n) ] <ref> [6] </ref>. 5.2 Hardness results for Generalizations We show two simple reductions, that demonstrate that other generalizations of the CDS problem may be as hard to approximate as the "set TSP" problem for which no approximation algorithms are known. (For the Euclidean case, Mata and Mitchell [14] have given approximation algorithms for
Reference: [7] <author> M. R. Garey and D. S. Johnson, </author> <title> "Computers and Intractability: A guide to the theory of NP-completeness", </title> <publisher> Freeman, </publisher> <address> San Francisco (1978). </address>
Reference-contexts: 1 Introduction The connected dominating set problem is defined as follows. Find a minimum size subset S of vertices, such that the subgraph induced by S is connected and S forms a dominating set. This problem is known to be N P -hard <ref> [7] </ref>.
Reference: [8] <author> S. Guha and S. Khuller, </author> <title> "Approximation algorithms for connected dominating sets", </title> <booktitle> Proc. of 4th Annual European Symposium on Algorithms, </booktitle> <year> (1996). </year>
Reference-contexts: We also provide a very efficient implementation of this algorithm. The second algorithm is an improvement of the first algorithm. The algorithm finds a dominating set in the first phase, and in the second phase connects the dominating set. In an earlier version of this paper <ref> [8] </ref> we established a bound of H () + H (H ()). Using Slav ik's greedy set-cover bound [17], we were able to show that the approximation factor is ln n + O (1). <p> Thus we can improve the performance ratio to 4 3 (1 + H ()). By applying a simple greedy strategy to connect the vertices in the dominating set, we proved a bound of H () + H (H ()) <ref> [8] </ref>. Here we present a modification of the above algorithm, as suggested by Berman [2], and are able to prove a performance guarantee of ln + 3. (Berman has an alternate proof for a performance ratio of H () + 2.) 7 The algorithm runs in two phases.
Reference: [9] <author> A. Kothari and V. Bharghavan, </author> <title> "Algorithms for unicast and multicast routing in ad-hoc networks", </title> <type> manuscript. </type>
Reference-contexts: The broadcast is done to the vertices in the connected dominating set. The nodes in the connected dominating set are responsible for relaying messages. Each node not in the dominating set, is not responsible for relaying any messages <ref> [9] </ref>.
Reference: [10] <author> P. N. Klein and R. Ravi, </author> <title> "A nearly best-possible approximation algorithm for node-weighted Steiner trees", </title> <journal> J. Algorithms, </journal> <volume> 19(1) </volume> <pages> 104-114, </pages> <year> (1995). </year>
Reference-contexts: We give a 3 ln n approximation for the version when the vertices have weights. We also show that the upper bound of 2 ln k for approximating node weighted Steiner trees <ref> [10] </ref>, can be improved to ln k, when all Steiner vertices have unit weight. We then use this result to give a 3 ln k approximation for finding a connected dominating set for a specified subset of vertices. <p> The greedy algorithm picks sets based on the ratio of their weight to the number of new elements they cover.) Step 2. To connect the vertices in DS we use a node-weighted Steiner tree approximation algorithm due to Klein and Ravi <ref> [10] </ref> to find a Steiner tree that includes all the vertices in DS, after making the weights of all vertices in DS equal to zero. This yields a connected dominating set CDS. <p> Proof: The weight of the vertices in DS is at most ln jOP T j. We now run the algorithm by Klein and Ravi <ref> [10] </ref> for the node-weighted Steiner tree case. The approximation factor of the algorithm is 2 ln k, where k is the number of Steiner vertices. Consider the vertices in OP T ; these together with the vertices in DS induce a connected subgraph. <p> required bound. 2 Before looking at other generalizations, we first consider a problem closely related to our discussion. 9 4.2 Unit Node Weighted Steiner Trees The best known algorithm for node weighted Steiner trees, has a performance ratio of 2 ln k, where k is the number of required vertices <ref> [10] </ref>. However, if the nodes have unit weight, there is a simpler algorithm, which gives a better performance ratio. We have k required vertices in a graph G = (V; E), which we want to connect using the least number of non-required vertices. <p> Putting = 2c + 1 gives at most ln k jOP T j vertices in our solution (when jOP T j c e 2c+1 . 2 The optimality of this approximation ratio was established by Berman (see <ref> [10] </ref>). We can modify the above algorithm, to run until no further merging is possible. Algorithm B Step 1. In each iteration choose a vertex that merges the largest number of required vertices (at least two). Step 2.
Reference: [11] <author> D. Kleitman and D. West, </author> <title> "Spanning trees with many leaves", </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 4(1) </volume> <pages> 99-106, </pages> <year> (1991). </year>
Reference-contexts: The entire algorithm runs in O (m) steps. This implementation is useful because it leads to a heuristic for the maximum leaf spanning tree problem as well <ref> [11] </ref>. Modified Greedy Algorithm: We now modify the scanning rule to prove a good approximation ratio for this class of algorithms (that grow a connected dominating set). We define a new operation of scanning a pair of adjacent vertices u and v. Let u be gray and v be white.
Reference: [12] <author> M. Karpinsky and A. Zelikovsky, </author> <title> "New approximation algorithms for the Steiner tree problem", Technical Report, </title> <booktitle> Electronic Colloquium on Computational Complexity (ECCC): </booktitle> <address> TR95-030, </address> <year> (1995). </year>
Reference-contexts: We also outline a second algorithm that gives an approximation factor of (1 + c)H (min (; k)) + O (1), where c is the best approximation ratio for the Steiner 2 tree problem (currently c = 1:644 <ref> [12] </ref>). <p> members of the optimum connected dominating set along with the members of the dominating set we found, form a spanning tree, we can prove a performance guarantee of c (1 + H ()), where c is the best approximation ratio for the unweighted Steiner tree problem (currently c = 1:644 <ref> [12] </ref>). For the special case when the required vertices form a dominating set in a graph and all edges have unit weight, Berman and Furer [3] have announced a new algorithm with c = 4 3 . <p> Apply an (edge weighted) Steiner tree approximation, with all edges having unit weight, and find a tree of size c (jR (B)j + jB 0 j + jOP T j), where c is the Steiner ratio <ref> [12] </ref>. Since this tree is edge weighted, it has essentially the same number of nodes, including those of R (B) [ B 0 . Since we have to add the vertices of B as well, we get an upper bound of c (jR (B)j+jB 0 j+jOP T j)+jBj. <p> However the first algorithms is simpler and faster. Most of the approximation algorithms that reduce the Steiner ratio below 2, have a high running time <ref> [4, 12] </ref>. 5 Lower Bounds 5.1 Hardness result for Connected Dominating Set We can prove that the set-cover problem can be reduced to the connected dominating set problem by an approximation preserving reduction, thus showing that the approximation factor H () will be hard to improve.
Reference: [13] <author> C. Lund and M. Yannakakis, </author> <title> "On the hardness of approximating minimization problems", </title> <journal> Journal of the ACM, </journal> <volume> 41(5): </volume> <pages> 960-981, </pages> <year> (1994). </year>
Reference-contexts: We also show an approximation preserving reduction from the set-cover problem to the connected dominating set problem, showing that it is hard to improve the approximation guarantee unless N P DT IM E [n O (loglog n) ] <ref> [13, 6] </ref>. We give a 3 ln n approximation for the version when the vertices have weights. We also show that the upper bound of 2 ln k for approximating node weighted Steiner trees [10], can be improved to ln k, when all Steiner vertices have unit weight. <p> This is based on the hardness results for set cover proven by Lund and Yannakakis <ref> [13] </ref> and Feige [6].
Reference: [14] <author> C. S. Mata and J. S. B. </author> <title> Mitchell "Approximation algorithms for geometric tour and network design problems", </title> <booktitle> Proc. of the 11th Annual Symp. on Computational Geometry, </booktitle> <pages> pages 360-369, </pages> <year> (1995). </year>
Reference-contexts: [n O (loglog n) ] [6]. 5.2 Hardness results for Generalizations We show two simple reductions, that demonstrate that other generalizations of the CDS problem may be as hard to approximate as the "set TSP" problem for which no approximation algorithms are known. (For the Euclidean case, Mata and Mitchell <ref> [14] </ref> have given approximation algorithms for this problem.) c j Theorem 5.1 A polynomial approximation algorithm for the edge weighted connected dominating set problem with factor f (n) would imply a polynomial approximation algorithm for the set TSP problem with factor 2f (n).
Reference: [15] <author> S. Paul and R. Miller, </author> <title> "Locating faults in a systematic manner in a large heterogeneous network", </title> <booktitle> IEEE INFOCOM, </booktitle> <pages> pages 522-529, </pages> <year> (1995). </year>
Reference-contexts: We use n and m to denote the number of vertices and edges in G. We use N (v) to denote the set of neighbors of a vertex v. 1.3 Applications The paper by Paul and Miller <ref> [15] </ref> discusses applications related to testing nodes in a computer network using a short "traveling tourist tour". They also consider the related question of finding a tour that visits each edge of the graph (connected vertex cover).
Reference: [16] <author> C. Savage, </author> <title> "Depth-First search and the vertex cover problem", </title> <journal> Information Processing Letters, </journal> <volume> 14(5): </volume> <pages> 233-235, </pages> <year> (1982). </year>
Reference-contexts: Do a Depth First Search, and take all the non-leaf vertices as the nodes in the vertex cover. This clearly induces a connected graph, and the approximation ratio is 2, as shown by Savage <ref> [16] </ref>. In practice, however this method will probably give large connected vertex covers. Other applications for the connected dominating set problem are in doing broadcasts for wireless computers in digital battlefields. The broadcast is done to the vertices in the connected dominating set.
Reference: [17] <author> P. </author> <title> Slav ik "A tight analysis of the greedy algorithm for set cover" 28th ACM Symposium on Theory of Computing, </title> <address> pages 435-441, </address> <year> (1996). </year> <month> 16 </month>
Reference-contexts: The algorithm finds a dominating set in the first phase, and in the second phase connects the dominating set. In an earlier version of this paper [8] we established a bound of H () + H (H ()). Using Slav ik's greedy set-cover bound <ref> [17] </ref>, we were able to show that the approximation factor is ln n + O (1). Recently, Berman suggested a modification to the algorithm, which improves the approximation factor to H () + 2.
References-found: 17

