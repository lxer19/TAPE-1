URL: ftp://ftp.cs.utexas.edu/pub/lam/main.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/NRL/network_security.html
Root-URL: 
Title: Applying a Theory of Modules and Interfaces to Security Verification  
Author: Simon S. Lam A. Udaya Shankar Thomas Y.C. Woo 
Address: Austin, Texas 78712 University of Maryland Austin, Texas 78712 College Park, Maryland 20742  
Affiliation: Department of Computer Sciences Department of Computer Science and Department of Computer Sciences The University of Texas at Austin Institute for Advanced Computer Studies The University of Texas at Austin  
Abstract: We present an overview of a theory of modules and interfaces applicable to the specification and verification of systems with a layered architecture. At the heart of this theory is a module composition theorem. The theory is applied to the specification of a distributed system consisting of subjects and objects in different hosts (computers). Formal specifications of a user interface and a network interface are given. Access to objects, both local and remote, offered by the distributed system is proved to be multilevel secure. 
Abstract-found: 1
Intro-found: 1
Reference: [2] <author> M. Abadi and L. Lamport, </author> <title> "The existence of refinement mappings," Digital Systems Research Center, </title> <type> Research Report 29, </type> <address> Palo Alto, CA 94301, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: For a module M and an interface I, the meaning of M offers I is defined in [11]. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M <ref> [2, 5, 7, 9, 10, 13, 14, 15] </ref>. Most definitions of M satisfies S have this informal meaning: M satisfies S if every possible observation of M is described by S.
Reference: [3] <author> J.P. Anderson, </author> <title> "A Unification of Computer and Network Security Concepts," </title> <booktitle> Proceedings of the Symposium on Research in Security and Privacy, </booktitle> <pages> pp. 77-87, </pages> <year> 1985. </year>
Reference-contexts: In the distributed system of user interface may include access control and secure information flow; security concerns at the network interface may include confidentiality, au thenticity, integrity, as well as access control. In the security literature, network and distributed system security has been studied in <ref> [3, 19, 20, 22, 23, 24] </ref>. The security of a composition of modules was investigated by McCullough [16, 17, 18]. McCullough's work is on a particular definition of security that is preserved by composition.
Reference: [4] <author> D.E. Bell and L.J. LaPadula, </author> <title> "Secure Computer System: Unified Exposition and Multics Interpretation," </title> <type> Technical Report Mitre Corporation, </type> <institution> ESD-TR-75-306, </institution> <month> March </month> <year> 1976. </year>
Reference-contexts: One level of security concern is at the user interface between subjects and the system. Here, we require access control security in the sense of Bell-LaPadula <ref> [4] </ref>. Another level of security concern is at the interface between the system module and the network module. Here, channels are established between pairs of hosts along which access requests and object contents are transferred.
Reference: [5] <author> K.M. Chandy and J. Misra, </author> <title> A Foundation of Parallel Program Design, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas sachusetts, </address> <year> 1988. </year>
Reference-contexts: For a module M and an interface I, the meaning of M offers I is defined in [11]. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M <ref> [2, 5, 7, 9, 10, 13, 14, 15] </ref>. Most definitions of M satisfies S have this informal meaning: M satisfies S if every possible observation of M is described by S.
Reference: [6] <author> Morrie Gasser, </author> <title> Building a Secure Computer System, </title> <publisher> Van Nostrand Reinhold Company, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: An obvious problem in the security area to apply this theorem is the specification and verification of trusted computer systems with a layered architecture <ref> [6, 8] </ref>. In this paper, we illustrate another application of the theory to the security area. Consider Figure 1 where two modules (layers) are shown, referred to as system and network.

Reference: [8] <author> P.A. Karger, M.E. Zurko, D.W. Bonin, A.H. Mason and C.E. Kahn, </author> <title> "A VMM Security Kernel for the VAX Architecture," </title> <booktitle> Proceedings of the Symposium on Research in Security and Privacy, </booktitle> <pages> pp. 2-19, </pages> <year> 1990. </year>
Reference-contexts: An obvious problem in the security area to apply this theorem is the specification and verification of trusted computer systems with a layered architecture <ref> [6, 8] </ref>. In this paper, we illustrate another application of the theory to the security area. Consider Figure 1 where two modules (layers) are shown, referred to as system and network.
Reference: [9] <author> S.S. Lam and A.U. Shankar, </author> <title> "Protocol Verification via Projections," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-10, No. 4, </volume> <pages> pp. 325-342, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: For a module M and an interface I, the meaning of M offers I is defined in [11]. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M <ref> [2, 5, 7, 9, 10, 13, 14, 15] </ref>. Most definitions of M satisfies S have this informal meaning: M satisfies S if every possible observation of M is described by S. <p> Note that there is a projection mapping from States (A) to States (B) defined as follows: state s 2 States (A) is mapped to state t 2 States (B) where t is defined by the values of V ariables (B) in s <ref> [9, 10] </ref>.
Reference: [10] <author> S.S. Lam and A.U. Shankar, </author> <title> "A Relational Notation for State Transition Systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-16, No. 7, </volume> <pages> pp. 755-775, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: The balance of this paper is organized as follows. In Section 1, we present an overview of the theory of modules and interfaces, including a specification notation designed for application of the theory to nontrivial examples. This section is taken from the work of Lam and Shankar <ref> [10, 11, 12] </ref>. In Section 3, we present specifications of a user interface U , and a network interface L. Then we present the specification of a system module M , together with a proof that the module satisfies M using L offers U . <p> For a module M and an interface I, the meaning of M offers I is defined in [11]. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M <ref> [2, 5, 7, 9, 10, 13, 14, 15] </ref>. Most definitions of M satisfies S have this informal meaning: M satisfies S if every possible observation of M is described by S. <p> For nontrivial applications, they were recast in the relational notation, a specification formalism with two basic constructs: state formulas that represent sets of states, and event formulas that represent sets of state transitions <ref> [10, 11] </ref>. In what follows, we present how state transition systems, modules and interfaces are specified in the relational notation. Conditions sufficient for the satisfaction of M offers I and M using L offers U , expressed in the relational notation, are then presented. <p> (A), there is at most one state s 0 such that (s; s 0 ) satisfies f ormula A (e). 2 This condition is easy to satisfy because events in the Lam-Shankar theory can be regarded as names or labels. (Moreover, event names can be parameterized in the relational notation <ref> [10] </ref>.) Note that an event sequence represents at most one behavior of A because event occurrences have deterministic effects. Behaviors of A, however, are nondeterministic because more than one event can be enabled in a state. <p> Note that there is a projection mapping from States (A) to States (B) defined as follows: state s 2 States (A) is mapped to state t 2 States (B) where t is defined by the values of V ariables (B) in s <ref> [9, 10] </ref>. <p> (B) : Inv A ^ f ormula A (e) ) [8v 2 V ariables (B) : v = v 0 ] 2 If A is a refinement of B assuming Inv A and, moreover, A satisfies invariant Inv A , then A is a refinement of B as defined in <ref> [10] </ref>. <p> The roles of both T U and T L are replaced by access (u), and hence they become 15 auxiliary variables in M . (For a formal treatment of auxiliary variables, see <ref> [10] </ref>.) * tolower (u) : f (u; disconn-req; D) : D Hg [f (u; c; o) : c 2 fread; write; get-fl; rel-flgg When an input event of U naming a remote object o is submitted by a subject u, and it cannot be handled locally, the request is encoded in
Reference: [11] <author> S.S. Lam and A.U. Shankar, </author> <title> "Specifying Modules to Satisfy Interfaces: A State Transition System Approach," </title> <type> Technical Report TR 88-30, </type> <institution> Department of Computer Sciences, University of Texas at Austin, </institution> <note> revised January 1991; to appear in Distributed Computing. </note>
Reference-contexts: In designing a complex system, structured as a hierarchy of layers or as a collection of interacting modules, well-defined interfaces are indispensable. In this paper, we first present an overview of a theory of modules and interfaces developed recently by Lam and Shankar <ref> [11, 12] </ref>. In this theory, the meanings of interface and module are rigorously defined, as well as the meaning of M offers I , where M denotes a module and I an interface. <p> The balance of this paper is organized as follows. In Section 1, we present an overview of the theory of modules and interfaces, including a specification notation designed for application of the theory to nontrivial examples. This section is taken from the work of Lam and Shankar <ref> [10, 11, 12] </ref>. In Section 3, we present specifications of a user interface U , and a network interface L. Then we present the specification of a system module M , together with a proof that the module satisfies M using L offers U . <p> A module is specified by a state transition system and a set of fairness requirements (see Section 2.2). For a module M and an interface I, the meaning of M offers I is defined in <ref> [11] </ref>. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M [2, 5, 7, 9, 10, 13, 14, 15]. <p> (I), a set of output events. * AllowedEventSeqs (I ), a set of sequences over Events (I), each of which is referred to as an al lowed event sequence of I. 2 2.2 Relational specifications The semantic definitions of M offers I and M using L offers U given in <ref> [11, 12] </ref> are not easy to apply directly. For nontrivial applications, they were recast in the relational notation, a specification formalism with two basic constructs: state formulas that represent sets of states, and event formulas that represent sets of state transitions [10, 11]. <p> For nontrivial applications, they were recast in the relational notation, a specification formalism with two basic constructs: state formulas that represent sets of states, and event formulas that represent sets of state transitions <ref> [10, 11] </ref>. In what follows, we present how state transition systems, modules and interfaces are specified in the relational notation. Conditions sufficient for the satisfaction of M offers I and M using L offers U , expressed in the relational notation, are then presented. <p> Conditions sufficient for the satisfaction of M offers I and M using L offers U , expressed in the relational notation, are then presented. For a more detailed presentation of the theory, the reader is referred to <ref> [11] </ref>; proofs can be found in [12]. To specify a state transition system, its state space is defined by a set of variables, called state variables. For system A, its set of state variables is denoted by V ariables (A). <p> InvGuar L ) ) invariant Inv M ) C9 M satisfies ((invariant (InvAssum U ^ InvGuar L ) ^ P rogReqs L ) ) P rogReqs U ) Let us point out an interesting feature in the semantic definitions of M offers I and M using L offers U , <ref> [11, 12] </ref>. Whenever the environment of M initiates an interface event whose occurrence would violate some interface safety requirement of M , module M can either block the event's occurrence or let the event occur. <p> * Internals (M ) " Internals (N ) = ; * M using L offers U * N offers L Then, M and N are compatible and their composition offers U . 2 For a more detailed treatment of the theory of modules and interfaces, the reader is referred to <ref> [11] </ref>. A proof of Theorem 1 can be found in [12]. 3 Case Study: A Secure Dis tributed System Consider a distributed system where there is a collection of hosts, interconnected by a communication network. Denote the set of hosts by H. <p> Such undesirable functional behaviors can be avoided by appropriately strenght-ening the user interface specification. This illustrates the flexibility of the theory of modules and interfaces. For a formal specification of a seriablizable database interface given in the relational notation, the reader is referred to <ref> [11] </ref>. 3.1 Notation We specify an event as a tuple, with subject name, object name, host name and some event-specific parameters as typical components. <p> To satisfy the finer-grain atomicity requirements of a practical programming language, each interface event may have to be refined into a sequence of module events. For a discussion on how to accomplish this, the reader is referred to Section 7 of <ref> [11] </ref>. <p> We propose a formula Inv M that is a conjunction of state formulas. Those conjuncts that are sufficient for proving satisfaction of conditions C1-C7 are shown in Figure 9. To prove C8 by applying an invariance proof rule <ref> [11] </ref>, other state formulas in addition to the ones shown in Figure 9 are needed. <p> Furthermore, functional requirements and security requirements of an interface can be specified separately. For example, serializabil-ity of interface U in this paper can be specified and satisfied separately from the requirement that interface U is multilevel secure. The definition of safety in the theory of modules and interfaces <ref> [11, 12] </ref> is general, and can accommodate notions of secure information flow other than Bell-LaPadula (e.g., deducibility, noninterference).
Reference: [12] <author> S.S. Lam and A.U. Shankar, </author> <title> "A Theory of Modules and Interfaces," </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Maryland, </institution> <note> in preparation, </note> <year> 1991. </year>
Reference-contexts: In designing a complex system, structured as a hierarchy of layers or as a collection of interacting modules, well-defined interfaces are indispensable. In this paper, we first present an overview of a theory of modules and interfaces developed recently by Lam and Shankar <ref> [11, 12] </ref>. In this theory, the meanings of interface and module are rigorously defined, as well as the meaning of M offers I , where M denotes a module and I an interface. <p> The balance of this paper is organized as follows. In Section 1, we present an overview of the theory of modules and interfaces, including a specification notation designed for application of the theory to nontrivial examples. This section is taken from the work of Lam and Shankar <ref> [10, 11, 12] </ref>. In Section 3, we present specifications of a user interface U , and a network interface L. Then we present the specification of a system module M , together with a proof that the module satisfies M using L offers U . <p> In the Lam-Shankar theory, a basic composition theorem is proved for the configuration in Figure 2. Composition theorems are also proved for an arbitrary number of modules organized in a linear hierarchy and as nodes of a rooted tree <ref> [12] </ref>. We note that many practical systems have a hierarchical structure. In fact, almost all computer networks have layered protocol architectures. <p> (I), a set of output events. * AllowedEventSeqs (I ), a set of sequences over Events (I), each of which is referred to as an al lowed event sequence of I. 2 2.2 Relational specifications The semantic definitions of M offers I and M using L offers U given in <ref> [11, 12] </ref> are not easy to apply directly. For nontrivial applications, they were recast in the relational notation, a specification formalism with two basic constructs: state formulas that represent sets of states, and event formulas that represent sets of state transitions [10, 11]. <p> Conditions sufficient for the satisfaction of M offers I and M using L offers U , expressed in the relational notation, are then presented. For a more detailed presentation of the theory, the reader is referred to [11]; proofs can be found in <ref> [12] </ref>. To specify a state transition system, its state space is defined by a set of variables, called state variables. For system A, its set of state variables is denoted by V ariables (A). For each variable v, there is a set domain (v) of allowed values. <p> InvGuar L ) ) invariant Inv M ) C9 M satisfies ((invariant (InvAssum U ^ InvGuar L ) ^ P rogReqs L ) ) P rogReqs U ) Let us point out an interesting feature in the semantic definitions of M offers I and M using L offers U , <ref> [11, 12] </ref>. Whenever the environment of M initiates an interface event whose occurrence would violate some interface safety requirement of M , module M can either block the event's occurrence or let the event occur. <p> A proof of Theorem 1 can be found in <ref> [12] </ref>. 3 Case Study: A Secure Dis tributed System Consider a distributed system where there is a collection of hosts, interconnected by a communication network. Denote the set of hosts by H. <p> Furthermore, functional requirements and security requirements of an interface can be specified separately. For example, serializabil-ity of interface U in this paper can be specified and satisfied separately from the requirement that interface U is multilevel secure. The definition of safety in the theory of modules and interfaces <ref> [11, 12] </ref> is general, and can accommodate notions of secure information flow other than Bell-LaPadula (e.g., deducibility, noninterference).
Reference: [13] <author> L. Lamport, </author> <title> "What it means for a concurrent program to satisfy a specification: Why no one has specified priority," </title> <booktitle> Proceedings of ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. </pages> <month> 78-83 </month> <year> 1985. </year>
Reference-contexts: For a module M and an interface I, the meaning of M offers I is defined in [11]. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M <ref> [2, 5, 7, 9, 10, 13, 14, 15] </ref>. Most definitions of M satisfies S have this informal meaning: M satisfies S if every possible observation of M is described by S.
Reference: [14] <author> L. Lamport, </author> <title> "A simple approach to specifying concurrent systems," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 32, No. 1, </volume> <month> January </month> <year> 1989. </year>
Reference-contexts: For a module M and an interface I, the meaning of M offers I is defined in [11]. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M <ref> [2, 5, 7, 9, 10, 13, 14, 15] </ref>. Most definitions of M satisfies S have this informal meaning: M satisfies S if every possible observation of M is described by S. <p> In fact, almost all computer networks have layered protocol architectures. Each protocol layer|e.g., transport, data link|can be specified as a module in a linear hierarchy. 2.1 Interfaces Consider models in which observations of a module are sequences of interface events <ref> [7, 14, 15] </ref>. We identify three requirements that characterize interface interactions. First, the occurrence of an interface event involves simultaneous participation by a module and its environment; moreover, such occurrence is observable by both the module and its environment. <p> In particular, the set of interface events is partitioned into a set of input events controlled by the environment and a set of output events controlled by the module <ref> [14, 15] </ref>. The side (module or environment) with control of an interface event is the only one that can initiate the event's occurrence. The requirement of unilateral control restricts the class of interface specifications.
Reference: [15] <author> N. Lynch and M. Tuttle, </author> <title> "Hierarchical correctness proofs for distributed algorithms," </title> <booktitle> Proceedings of the ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pp. 137-151, </pages> <year> 1987. </year>
Reference-contexts: For a module M and an interface I, the meaning of M offers I is defined in [11]. The definition is similar to|but not quite the same as|various definitions of M satisfies S in the literature, where S is a specification of M <ref> [2, 5, 7, 9, 10, 13, 14, 15] </ref>. Most definitions of M satisfies S have this informal meaning: M satisfies S if every possible observation of M is described by S. <p> Two modules interacting across an interface are composed to become a single module by hiding the interface between them. In this respect, the composition of two modules is defined in a manner not unlike the approaches of CSP [7] and I/O automata <ref> [15] </ref>. The theory of modules and interfaces, however, differs from the theories of CSP and I/O automata in two respects. First, the interaction method at an interface between a module and its environment is different (see Section 2.1). <p> In fact, almost all computer networks have layered protocol architectures. Each protocol layer|e.g., transport, data link|can be specified as a module in a linear hierarchy. 2.1 Interfaces Consider models in which observations of a module are sequences of interface events <ref> [7, 14, 15] </ref>. We identify three requirements that characterize interface interactions. First, the occurrence of an interface event involves simultaneous participation by a module and its environment; moreover, such occurrence is observable by both the module and its environment. <p> In particular, the set of interface events is partitioned into a set of input events controlled by the environment and a set of output events controlled by the module <ref> [14, 15] </ref>. The side (module or environment) with control of an interface event is the only one that can initiate the event's occurrence. The requirement of unilateral control restricts the class of interface specifications. <p> Note that while an interface event is initiated to occur by one side of an interface, its occurrence is impossible without participation by the other side. A third requirement, introduced in the model of I/O automata <ref> [15] </ref>, is the following: each automaton is input-enabled, i.e., every input event is enabled in every state of the automaton. With this requirement, the class of interface specifications is further restricted.
Reference: [16] <author> D. McCullough, </author> <title> "Specifications for Multi-Level Security and a Hook-Up Property," </title> <booktitle> Proceedings of the Symposium on Research in Security and Privacy, </booktitle> <pages> pp. 161-166, </pages> <year> 1987. </year>
Reference-contexts: In the security literature, network and distributed system security has been studied in [3, 19, 20, 22, 23, 24]. The security of a composition of modules was investigated by McCullough <ref> [16, 17, 18] </ref>. McCullough's work is on a particular definition of security that is preserved by composition. In our approach, notions of security that can be specified as interface requirements are not restricted (because the notion of safety in the theory of modules and interfaces is general).
Reference: [17] <author> D. McCullough, </author> <title> "Noninterference and the Compos-ability of Security Properties," </title> <booktitle> Proceedings of the Symposium on Research in Security and Privacy, </booktitle> <pages> pp. 177-186, </pages> <year> 1988. </year>
Reference-contexts: In the security literature, network and distributed system security has been studied in [3, 19, 20, 22, 23, 24]. The security of a composition of modules was investigated by McCullough <ref> [16, 17, 18] </ref>. McCullough's work is on a particular definition of security that is preserved by composition. In our approach, notions of security that can be specified as interface requirements are not restricted (because the notion of safety in the theory of modules and interfaces is general).
Reference: [18] <author> D. McCullough, </author> <title> "A Hookup Theorem for Multilevel Security," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-16, No. 6, </volume> <pages> pp. 563-568, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: In the security literature, network and distributed system security has been studied in [3, 19, 20, 22, 23, 24]. The security of a composition of modules was investigated by McCullough <ref> [16, 17, 18] </ref>. McCullough's work is on a particular definition of security that is preserved by composition. In our approach, notions of security that can be specified as interface requirements are not restricted (because the notion of safety in the theory of modules and interfaces is general).
Reference: [19] <author> J.K. Millen, </author> <title> "A Network Security Perspective," </title> <booktitle> Proceedings of National Computer Security Conference, </booktitle> <pages> pp. 7-15, </pages> <year> 1986 </year>
Reference-contexts: In the distributed system of user interface may include access control and secure information flow; security concerns at the network interface may include confidentiality, au thenticity, integrity, as well as access control. In the security literature, network and distributed system security has been studied in <ref> [3, 19, 20, 22, 23, 24] </ref>. The security of a composition of modules was investigated by McCullough [16, 17, 18]. McCullough's work is on a particular definition of security that is preserved by composition.
Reference: [20] <author> D. Nessett, </author> <title> "Factors Affecting Distributed System Security," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-13 No. 2, </volume> <pages> pp. 233-248, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: In the distributed system of user interface may include access control and secure information flow; security concerns at the network interface may include confidentiality, au thenticity, integrity, as well as access control. In the security literature, network and distributed system security has been studied in <ref> [3, 19, 20, 22, 23, 24] </ref>. The security of a composition of modules was investigated by McCullough [16, 17, 18]. McCullough's work is on a particular definition of security that is preserved by composition.
Reference: [21] <author> J.M. Rushby, </author> <title> "The Bell and La Padula Security Model," </title> <note> Working Draft, June 20, </note> <year> 1986. </year>
Reference-contexts: We denote the fixed clearance of a subject u by clearance (u), and the fixed classification of an object o by classif ication (o). 4 It is known that potential security problems (covert channels) can arise if subject clearance and object classification can be dynamically varied <ref> [21] </ref>. Note that not all subjects and/or objects resident on a host possess the same clearance or classification.
Reference: [22] <author> V. Varadharajan, </author> <title> "A Multilevel Security Policy Model for Networks," </title> <booktitle> Proceedings of INFOCOM '90, </booktitle> <pages> pp. 710-718, </pages> <year> 1990. </year>
Reference-contexts: In the distributed system of user interface may include access control and secure information flow; security concerns at the network interface may include confidentiality, au thenticity, integrity, as well as access control. In the security literature, network and distributed system security has been studied in <ref> [3, 19, 20, 22, 23, 24] </ref>. The security of a composition of modules was investigated by McCullough [16, 17, 18]. McCullough's work is on a particular definition of security that is preserved by composition.
Reference: [23] <author> V.L. Voydock and S.T. Kent, </author> <title> "Security Mechanisms in High-Level Network Protocols," </title> <journal> Computing Surveys, </journal> <volume> Vol. 15, No. 2, </volume> <pages> pp. 135-171, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: In the distributed system of user interface may include access control and secure information flow; security concerns at the network interface may include confidentiality, au thenticity, integrity, as well as access control. In the security literature, network and distributed system security has been studied in <ref> [3, 19, 20, 22, 23, 24] </ref>. The security of a composition of modules was investigated by McCullough [16, 17, 18]. McCullough's work is on a particular definition of security that is preserved by composition.
Reference: [24] <author> S.T. Walker, </author> <title> "Network Security Overview," </title> <booktitle> Proceedings of the Symposium on Research in Security and Privacy, </booktitle> <pages> pp. 62-76, </pages> <year> 1985. </year> <month> 19 </month>
Reference-contexts: In the distributed system of user interface may include access control and secure information flow; security concerns at the network interface may include confidentiality, au thenticity, integrity, as well as access control. In the security literature, network and distributed system security has been studied in <ref> [3, 19, 20, 22, 23, 24] </ref>. The security of a composition of modules was investigated by McCullough [16, 17, 18]. McCullough's work is on a particular definition of security that is preserved by composition.
References-found: 22

