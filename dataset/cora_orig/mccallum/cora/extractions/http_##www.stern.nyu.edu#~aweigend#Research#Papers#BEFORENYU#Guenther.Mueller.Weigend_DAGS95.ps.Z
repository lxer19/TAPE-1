URL: http://www.stern.nyu.edu/~aweigend/Research/Papers/BEFORENYU/Guenther.Mueller.Weigend_DAGS95.ps.Z
Refering-URL: http://www.stern.nyu.edu/~aweigend/Research/Papers/BEFORENYU/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fguenther,rmuellerg@wiwi.hu-berlin.de  andreas@cs.colorado.edu  
Title: The Design of MMM: A Model ManageMent System for Time Series Analysis  
Author: Oliver Gunther and Rudolf Muller Andreas S. Weigend 
Address: Spandauer Str. 1, D-10178 Berlin, Germany  Boulder, CO 80309-0430, USA  
Affiliation: Institut fur Wirtschaftsinformatik Humboldt-Universitat zu Berlin  Department of Computer Science and Institute of Cognitive Science University of Colorado  
Abstract: Time series analysis and prediction is turning into an interdisciplinary subject where data and methods are being contributed from a broad variety of disciplines, including economics, physics, computer science, and statistics. Model management systems were originally designed for operations research applications. With thousands of methods and gigabytes of data now available on the Internet, however, such systems may become a crucial component for the efficient organization and exchange of any computer-based work in these areas. This paper introduces the model management system MMM that combines model management with the World Wide Web (WWW) to provide an infrastructure for interdisciplinary, worldwide distributed research on time series analysis. In particular, MMM will provide a platform to make related research results applicable and verifiable. 
Abstract-found: 1
Intro-found: 1
Reference: [Bar80] <author> H. Barth. </author> <title> Grundlegende Konzepte von Methoden- und Modellbanksystemen. </title> <journal> Ange-wandte Informatik, </journal> <volume> 8 </volume> <pages> 301-309, </pages> <year> 1980. </year>
Reference-contexts: The application of the method (s) has to be preceded by the design of an appropriate model and succeeded by its validation. 2 FOUR APPLICATION SCENARIOS 3 After some papers in the late 70s and early 80s [DHL79] [MB79] <ref> [Bar80] </ref>, Dolk [Dol86] presented a model management system for mathematical programming in 1986. Two years later, Jarke and Radermacher [JR88] published a paper on the role of model management in decision support. In the late 80s, several tools for algorithmic discrete mathematics were developed; see [DS94] for an overview.
Reference: [BDH + 94] <author> C. Mic Bowman, Peter B. Danzig, Darren R. Hardy, Udi Manber, and Michael F. Schwartz. </author> <title> The Harvest information discovery and access system. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <pages> pages 763-771, </pages> <address> Chicago, Illinois, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Contributing data sets, papers, algorithms and annotations is easy: All it takes is filling out a short form (http://www.cs.colorado.edu/Time-Series/Submit.html). That time series site also serves as a testbed for the Harvest Information Discovery and Access System <ref> [BDH + 94] </ref>, which efficiently gathers and indexes the Santa Fe data using corpus-specific customizations.
Reference: [Bec94] <author> P. Becker. </author> <title> M An object-oriented model and method base system for discrete optimization. </title> <booktitle> In Proceedings of the International Conference on Object Oriented Information Systems (OOIS'94), </booktitle> <address> London, UK, </address> <year> 1994. </year>
Reference-contexts: Fourth-generation languages like Mathematica [Wol88] or Maple [CGG + 88] follow a similar goal. A more recent approach was presented by Becker <ref> [Bec94] </ref>, who is also the first author mentioning a possible interface of his system M to the World Wide Web. This approach heads for what could be called large scale model management, where the aim is high level integration of a heterogeneous world of model implementations.
Reference: [BMR89] <author> M. Bartusch, R. H. Mohring, and F. J. Radermacher. </author> <title> Design aspects of an advanced DSS for scheduling problems in civil engineering. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 5 </volume> <pages> 312-344, </pages> <year> 1989. </year>
Reference-contexts: The abstraction allows to implement meta algorithms on objects of function classes that are independent of the specific type of the functions. For example, the current version of Ypsilon comes with the realization of various Eigenmodels <ref> [BMR89, MMR94] </ref>, i.e., special models that represent the structure of parts of the system. The realized Eigenmodels are variations of data flow diagrams, in which the user is provided a graphical tool to express interoperability. They implement an initial set of meta models of MMM functionalities.
Reference: [BW94] <author> B. V. Bonnlander and A. S. Weigend. </author> <title> Selecting input variables using kernel density estimation. </title> <booktitle> In Proceedings of the 1994 International Symposium on Artificial Neural Networks (ISANN '94). </booktitle> <address> Tainan, Taiwan, </address> <year> 1994. </year>
Reference-contexts: When confronted with a new set of data, one of the first questions is: Which of the variables that could potentially serve as inputs contain information about 3 MMM AND TIME SERIES ANALYSIS 8 the output? We have implemented the method by Bonnlander and Weigend <ref> [BW94] </ref> to find the subset of variables (or input features) that has maximal mutual information with the output (i.e., the value to be predicted). * Redundancy.
Reference: [CGG + 88] <author> B. W. Char, K. O. Geddes, G. H. Gonnet, M. B. Monagan, and S. M. Watt. </author> <title> Maple Reference Manual. </title> <publisher> WATCOM Press, </publisher> <year> 1988. </year>
Reference-contexts: These and other tools can be viewed as small scale model management where, based on a specific language and interface technology, researchers are supported in the rapid prototyping of their algorithmic research. Fourth-generation languages like Mathematica [Wol88] or Maple <ref> [CGG + 88] </ref> follow a similar goal. A more recent approach was presented by Becker [Bec94], who is also the first author mentioning a possible interface of his system M to the World Wide Web.
Reference: [DHL79] <author> K. R. Dittrich, R. Hubner, and P. C. Lockemann. Methodenbanksysteme: </author> <title> Ein Werkzeug zum Maschneidern von Anwendersoftware. </title> <journal> Informatik-Spektrum, </journal> <volume> 2 </volume> <pages> 194-203, </pages> <year> 1979. </year>
Reference-contexts: The application of the method (s) has to be preceded by the design of an appropriate model and succeeded by its validation. 2 FOUR APPLICATION SCENARIOS 3 After some papers in the late 70s and early 80s <ref> [DHL79] </ref> [MB79] [Bar80], Dolk [Dol86] presented a model management system for mathematical programming in 1986. Two years later, Jarke and Radermacher [JR88] published a paper on the role of model management in decision support.
Reference: [Dol86] <author> D. R. Dolk. </author> <title> A generalized model management system for mathematical programming. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 12(2) </volume> <pages> 92-126, </pages> <year> 1986. </year>
Reference-contexts: The application of the method (s) has to be preceded by the design of an appropriate model and succeeded by its validation. 2 FOUR APPLICATION SCENARIOS 3 After some papers in the late 70s and early 80s [DHL79] [MB79] [Bar80], Dolk <ref> [Dol86] </ref> presented a model management system for mathematical programming in 1986. Two years later, Jarke and Radermacher [JR88] published a paper on the role of model management in decision support. In the late 80s, several tools for algorithmic discrete mathematics were developed; see [DS94] for an overview.
Reference: [DS94] <editor> N. Dean and G. Shannon, editors. </editor> <booktitle> Computational Support for Discrete Mathematics - DIMACS Workshop, </booktitle> <address> March 12-14, 1992. </address> <publisher> American Mathematical Society, </publisher> <year> 1994. </year>
Reference-contexts: Two years later, Jarke and Radermacher [JR88] published a paper on the role of model management in decision support. In the late 80s, several tools for algorithmic discrete mathematics were developed; see <ref> [DS94] </ref> for an overview. Mehlhorn and Naher, for example, presented their system LEDA, a portable library of data types and algorithms for computational geometry and combinatorial optimization [MN90]. Nievergelt and Schorn followed with their XYZ system in 1991 [NSA + 91, Sch91].
Reference: [GT94] <author> A. R. Gallant and G. Tauchen. SNP: </author> <title> a program for nonparametric time series analysis, Version 8.3, Users Guide. </title> <type> Technical report, </type> <institution> Department of Economics, University of North Carolina, </institution> <year> 1994. </year> <note> REFERENCES 14 </note>
Reference-contexts: We adopted the code used by Gershenfeld and Weigend [WG94]. * SNP. SNP by Gallant and Tauchen <ref> [GT94] </ref> is a method for non-parametric time series analysis that employs a polynomial series expansion to approximate the conditional density of a multivariate process. 3.2 The Role of Technology We see several levels of impact that technology has made on the times series analysis and prediction domain.
Reference: [HLC + 92] <author> K. Haase, H. Lutkepohl, H. Clausen, M. Moryson, and W. Schneider. </author> <title> MulTi a menu-driven GAUSS program for multiple time series analysis. </title> <type> Technical report, </type> <institution> Institut fur Statistik und Okonometrie, Univerisitat Kiel, </institution> <year> 1992. </year>
Reference-contexts: Typical user interfaces in such cases are hierarchically organized collections of forms (or menus) where one can navigate at random, setting parameters and applying submethods until one obtains a result. An example is the system MulTi for multivariate time series analysis <ref> [HLC + 92] </ref>. One problem in this scenario is that of keeping a history of parameter settings, i.e., of the exact way a particular experiment has been performed.
Reference: [JR88] <author> M. Jarke and F. J. Radermacher. </author> <title> The AI potential of model management and its central role in decision support. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 4 </volume> <pages> 387-404, </pages> <year> 1988. </year>
Reference-contexts: Two years later, Jarke and Radermacher <ref> [JR88] </ref> published a paper on the role of model management in decision support. In the late 80s, several tools for algorithmic discrete mathematics were developed; see [DS94] for an overview.
Reference: [KLMM94] <author> D. Kuhl, A. Ludwig, R. H. Mohring, and R. Muller. Ypsilon User Manual, </author> <year> 1994. </year>
Reference-contexts: We have chosen the C++ code generator of the Ypsilon system <ref> [KLMM94] </ref> to generate the container classes. Ypsilon generates safe data structures (in the sense of [MM94]). Such data structures implement the structure of a model as well as the constraints that define feasible initializations of the model.
Reference: [KMS94] <author> R. Krishnan, R. Muller, and P. Schmidt. </author> <title> Model management on the internet. </title> <type> Working paper, </type> <institution> Humboldt Universitat zu Berlin, </institution> <year> 1994. </year>
Reference-contexts: The realized Eigenmodels are variations of data flow diagrams, in which the user is provided a graphical tool to express interoperability. They implement an initial set of meta models of MMM functionalities. The MMM system is designed as a client/server architecture, consisting of method servers, a method agent <ref> [KMS94] </ref> and clients that communicate with the method agent in order to access a 4 THE ARCHITECTURE OF MMM 10 method server (see Figure 1).
Reference: [MB79] <author> P. Mertens and F. </author> <month> Bodendorf. </month> <institution> Interaktiv nutzbare Methodenbanken Entwurfkri-terien und Stand der Verwirklichung. Angewandte Informatik, </institution> <month> 7 </month> <pages> 533-541, </pages> <year> 1979. </year>
Reference-contexts: The application of the method (s) has to be preceded by the design of an appropriate model and succeeded by its validation. 2 FOUR APPLICATION SCENARIOS 3 After some papers in the late 70s and early 80s [DHL79] <ref> [MB79] </ref> [Bar80], Dolk [Dol86] presented a model management system for mathematical programming in 1986. Two years later, Jarke and Radermacher [JR88] published a paper on the role of model management in decision support. In the late 80s, several tools for algorithmic discrete mathematics were developed; see [DS94] for an overview.
Reference: [McC94] <author> Rob McCool. </author> <title> The Common Gateway Interface. </title> <note> URL http://hoohoo.ncsa.uiuc.edu/cgi/overview.html, 1994. </note>
Reference-contexts: This server is a simple pipe that reads Ypsilon objects, initializes an object of the function class, invokes evaluate, and returns the result via standard output. The server is invoked by a CGI program <ref> [McC94] </ref> that can be accessed via the Internet by sending HTML forms to an http daemon. Figure 3 shows the architecture of an Ypsilon method server. The descriptions are propagated to the method agent, which stores them as part of its metadata.
Reference: [MM94] <author> D. Moller and R. Muller. </author> <title> A concept for the representation of data and algorithms. </title> <editor> In N. Dean and G. Shannon, editors, </editor> <booktitle> Computational Support for Discrete Mathematics, DIMACS Workshop March 12-14, </booktitle> <year> 1992, 1994. </year>
Reference-contexts: We have chosen the C++ code generator of the Ypsilon system [KLMM94] to generate the container classes. Ypsilon generates safe data structures (in the sense of <ref> [MM94] </ref>). Such data structures implement the structure of a model as well as the constraints that define feasible initializations of the model. Classes generated by Ypsilon have a normalized set of methods for basic functionalities such as create, delete, edit, evaluate, read, and write.
Reference: [MMR94] <author> R. H. Mohring, R. Muller, and F. J. Radermacher. </author> <title> Advanced DSS for scheduling: Software engineering aspects and the role of Eigenmodels. </title> <editor> In J. F. Nunamaker and R. H. Sprague, editors, </editor> <booktitle> Proceedings of the 27th Annual Hawaii International Conference on System Sciences, volume III, </booktitle> <year> 1994. </year>
Reference-contexts: The abstraction allows to implement meta algorithms on objects of function classes that are independent of the specific type of the functions. For example, the current version of Ypsilon comes with the realization of various Eigenmodels <ref> [BMR89, MMR94] </ref>, i.e., special models that represent the structure of parts of the system. The realized Eigenmodels are variations of data flow diagrams, in which the user is provided a graphical tool to express interoperability. They implement an initial set of meta models of MMM functionalities.
Reference: [MN90] <author> K. Mehlhorn and S. Naher. LEDA, </author> <title> a library of efficient data types and algorithms. </title> <publisher> LNCS, </publisher> <pages> 411 88-106, </pages> <year> 1990. </year>
Reference-contexts: In the late 80s, several tools for algorithmic discrete mathematics were developed; see [DS94] for an overview. Mehlhorn and Naher, for example, presented their system LEDA, a portable library of data types and algorithms for computational geometry and combinatorial optimization <ref> [MN90] </ref>. Nievergelt and Schorn followed with their XYZ system in 1991 [NSA + 91, Sch91]. These and other tools can be viewed as small scale model management where, based on a specific language and interface technology, researchers are supported in the rapid prototyping of their algorithmic research.
Reference: [MRS94] <author> R. Muller, W. B. Rubenstein, and P. Schmidt. </author> <title> A Simple Method Server for the Web. Discussion paper, </title> <address> Sonderforschungsbereich 373, </address> <year> 1994. </year>
Reference-contexts: A particularly important goal of MMM is to make algorithmic research results available to a larger audience and thus thoroughly verifiable by the research community. A simple first prototype with the time series methods listed in Section 3 has recently been implemented <ref> [MRS94] </ref> and can be tested through the World Wide Web under URL http://ischtar.wiwi.hu-berlin.de/many mmi/many mmi.html. For the next phase, we intend to extend the method agent to act as a relay and conversion point for data.
Reference: [MS94] <author> R. Muller and D. Solte. </author> <title> How to make OR results available: a proposal for project scheduling. </title> <editor> In W. Gaul, F. J. Radermacher, and D. Solte, editors, </editor> <title> Data, Expert Knowledge and Decisions, </title> <journal> Annals of Operations Research. </journal> <volume> J.C. </volume> <publisher> Baltzer Science Publishers, </publisher> <year> 1994. </year>
Reference-contexts: Ypsilon encapsulates methods in function classes, which each have an input field, an output field, and a method called evaluate to call the routine for computing the output from the input. This design is similar to what is called operational programming in <ref> [MS94, Sol87] </ref> or megaprogramming in [WWC92]. The abstraction allows to implement meta algorithms on objects of function classes that are independent of the specific type of the functions.
Reference: [Muh92] <author> W. A. Muhanna. </author> <title> On the organization of large shared model bases. </title> <journal> Annals of Operations Research, </journal> <volume> 38 </volume> <pages> 359-396, </pages> <year> 1992. </year>
Reference-contexts: This approach heads for what could be called large scale model management, where the aim is high level integration of a heterogeneous world of model implementations. A similar goal is apparent in the work of Muhanna <ref> [Muh92] </ref>. The proposals for a megaprogramming language [WWC92] go into the same direction, although they focus more on the related database and software engineering aspects. In the sequel, we will present MMM, a distributed model management system for time series analysis and prediction. <p> A model management system is a software system that helps users to define, evaluate, combine and compare such models <ref> [Muh92] </ref>. 2 FOUR APPLICATION SCENARIOS 4 Scenario 1: Software Integration and Maintenance After reading a paper about an interesting algorithm to invert symmetric matrices, a professor asks one of her students to implement the algorithm as a term project.
Reference: [NIP95] <institution> Advances in Neural Information Processing Systems 7 (NIPS '94). </institution> <address> Morgan Kauf-mann, San Francisco, CA, </address> <year> 1995. </year>
Reference-contexts: that can adaptively explore a large space of potential models. 1 1 There is a great amount of literature on this topic; a good recent volume is edited by Smolensky, Mozer and Rumelhart (1995)[SMR94], as well as the annual conference proceedings of Advances in Neural Information Processing Systems, e.g., 1995 <ref> [NIP95] </ref>. 3 MMM AND TIME SERIES ANALYSIS 7 A recent example where a number of methods was simultaneously applied to a number of data sets was the Santa Fe Time Series Prediction and Analysis Competition, carried out in 1991 and followed up by a NATO workshop in 1992 [WG94].
Reference: [NSA + 91] <author> J. Nievergelt, P. Schorn, C. Ammann, A. Brunger, and M. De Lorenzi. </author> <title> XYZ : A project in experimental geometric computation. </title> <publisher> LNCS, </publisher> <pages> 553 171-186, </pages> <year> 1991. </year>
Reference-contexts: Mehlhorn and Naher, for example, presented their system LEDA, a portable library of data types and algorithms for computational geometry and combinatorial optimization [MN90]. Nievergelt and Schorn followed with their XYZ system in 1991 <ref> [NSA + 91, Sch91] </ref>. These and other tools can be viewed as small scale model management where, based on a specific language and interface technology, researchers are supported in the rapid prototyping of their algorithmic research. Fourth-generation languages like Mathematica [Wol88] or Maple [CGG + 88] follow a similar goal.
Reference: [SCB92] <author> D. F. Swayne, D. Cook, and A. Buja. </author> <title> User's Manual for XGobi, a Dynamic Program for Data Analysis Implemented in the X Window System (release 2). </title> <type> Technical memorandum, </type> <institution> Bellcore, </institution> <year> 1992. </year> <note> REFERENCES 15 </note>
Reference-contexts: In the present prototype version of MMM the following methods have been included. * Visualization. We embedded XGobi, a tool developed at AT&T Bell Labs for the visu alization of three (or more) dimensional data <ref> [SCB92] </ref>. * Subset Selection.
Reference: [Sch91] <author> P. Schorn. </author> <title> Implementing the XYZ GeoBench: A programming environment for geometric algorithms. </title> <publisher> LNCS, </publisher> <pages> 553 187-202, </pages> <year> 1991. </year>
Reference-contexts: Mehlhorn and Naher, for example, presented their system LEDA, a portable library of data types and algorithms for computational geometry and combinatorial optimization [MN90]. Nievergelt and Schorn followed with their XYZ system in 1991 <ref> [NSA + 91, Sch91] </ref>. These and other tools can be viewed as small scale model management where, based on a specific language and interface technology, researchers are supported in the rapid prototyping of their algorithmic research. Fourth-generation languages like Mathematica [Wol88] or Maple [CGG + 88] follow a similar goal.
Reference: [SMR94] <author> P. Smolensky, M. C. Mozer, and D. E. Rumelhart, </author> <title> editors. Mathematical Perspectives on Neural Networks. </title> <publisher> Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1994. </year>
Reference: [Sol87] <author> D. Solte. </author> <title> Open Systems - Ein lernendes Verwaltungssystem fur die rechnerun-terstutzte Methodenkonstruktion im Bereich des Operations Research, </title> <booktitle> volume 38 of VDI-Forschungsberichte, </booktitle> <address> Reihe 16. VDI-Verlag, </address> <year> 1987. </year>
Reference-contexts: Ypsilon encapsulates methods in function classes, which each have an input field, an output field, and a method called evaluate to call the routine for computing the output from the input. This design is similar to what is called operational programming in <ref> [MS94, Sol87] </ref> or megaprogramming in [WWC92]. The abstraction allows to implement meta algorithms on objects of function classes that are independent of the specific type of the functions.
Reference: [SYC91] <author> T. Sauer, J. A. Yorke, and M. Casdagli. </author> <title> Embedology. </title> <journal> Journal of Statistical Physics, </journal> <volume> 65 </volume> <pages> 579-616, </pages> <year> 1991. </year>
Reference-contexts: The first development, state-space reconstruction by time-delay embedding, drew on ideas from differential topology and dynamical systems to provide a technique for recognizing when a time series has been generated by deterministic governing equations and, if so, for understanding the geometrical structure underlying the observed behavior <ref> [SYC91] </ref>.
Reference: [Wei94] <author> A. S. Weigend. </author> <title> Paradigm change in prediction. </title> <journal> Philosophical Transactions of the Royal Society (Physical Sciences), </journal> <pages> page 348, </pages> <year> 1994. </year>
Reference-contexts: Due to the dramatic expansion of the capability for automatic data acquisition and processing, it is increasingly feasible to venture into the theory-poor and data-rich domain. Two crucial developments occurred in the last decade <ref> [Wei94] </ref>; both were aided by the general availability of powerful computers that permitted much longer time series to be recorded, more complex algorithms to be applied to them, and the data and results of these algorithms to be visualized interactively.
Reference: [WG94] <author> A. S. Weigend and N. Gershenfeld, </author> <title> editors. Time Series Prediction. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Collecting data and comparing methods from different disciplines has started only recently; the Santa Fe Time Series Prediction and Analysis Competition carried out in 1991 is one of the first examples <ref> [WG94] </ref>. The following section describes several scenarios where a tool like MMM could be useful. Section 3 explains why (and how) somebody working with time series should use MMM. In Section 4 we describe the architecture of MMM. <p> e.g., 1995 [NIP95]. 3 MMM AND TIME SERIES ANALYSIS 7 A recent example where a number of methods was simultaneously applied to a number of data sets was the Santa Fe Time Series Prediction and Analysis Competition, carried out in 1991 and followed up by a NATO workshop in 1992 <ref> [WG94] </ref>. The competition focused on six data sets, ranging from 1,000 to 100,000 points. <p> We adopted the code used by Gershenfeld and Weigend <ref> [WG94] </ref>. * SNP.
Reference: [Wol88] <author> S. Wolfram. </author> <title> Mathematica A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: These and other tools can be viewed as small scale model management where, based on a specific language and interface technology, researchers are supported in the rapid prototyping of their algorithmic research. Fourth-generation languages like Mathematica <ref> [Wol88] </ref> or Maple [CGG + 88] follow a similar goal. A more recent approach was presented by Becker [Bec94], who is also the first author mentioning a possible interface of his system M to the World Wide Web.
Reference: [WWC92] <author> G. Wiederhold, P. Wegner, and S. Ceri. </author> <title> Toward megaprogramming. </title> <journal> Communications of the ACM, </journal> <volume> 35(11) </volume> <pages> 89-99, </pages> <year> 1992. </year>
Reference-contexts: This approach heads for what could be called large scale model management, where the aim is high level integration of a heterogeneous world of model implementations. A similar goal is apparent in the work of Muhanna [Muh92]. The proposals for a megaprogramming language <ref> [WWC92] </ref> go into the same direction, although they focus more on the related database and software engineering aspects. In the sequel, we will present MMM, a distributed model management system for time series analysis and prediction. <p> Ypsilon encapsulates methods in function classes, which each have an input field, an output field, and a method called evaluate to call the routine for computing the output from the input. This design is similar to what is called operational programming in [MS94, Sol87] or megaprogramming in <ref> [WWC92] </ref>. The abstraction allows to implement meta algorithms on objects of function classes that are independent of the specific type of the functions.
References-found: 33

