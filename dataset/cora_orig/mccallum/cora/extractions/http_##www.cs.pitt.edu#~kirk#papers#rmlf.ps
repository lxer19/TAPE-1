URL: http://www.cs.pitt.edu/~kirk/papers/rmlf.ps
Refering-URL: http://www.cs.pitt.edu/~kirk/papers/index.html
Root-URL: 
Title: Minimizing Flow Time Nonclairvoyantly  
Author: Bala Kalyanasundaram Kirk R. Pruhs 
Keyword: P  
Address: Pittsburgh Pittsburgh, PA 15260. Pittsburgh, PA 15260.  
Affiliation: Department of Computer Science Department of Computer Science University of Pittsburgh University of  
Abstract: We consider the problem of scheduling a collection of dynamically arriving jobs with unknown execution times so as to minimize the average response/flow time. This the classic CPU scheduling problem faced by time-sharing operating systems. In the standard 3-field scheduling notation this is the nonclairvoyant version of 1 j pmtn; r j j F j . Its easy to see that every algorithm that doesn't unnecessarily idle the processor is at worst n-competitive, where n is the number of jobs. Yet there is no known nonclairvoyant algorithm, deterministic or randomized, with a competitive ratio provably o(n). In this paper with give a randomized nonclairvoyant algorithm, RMLF, that has competitive ratio fi(log n log log n) against an adaptive adversary. RMLF is a slight variation of the multi-level feedback (MLF) algorithm used by the Unix operating system, further justifying the adoption of this algorithm. Motwani, Phillips, and Torng [12] showed that every randomized nonclairvoyant algorithm is (log n)- competitive, and that every deterministic nonclairvoy-ant algorithm is (n 1=3 )-competitive. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bach, </author> <title> The Design of the Unix Operating System, </title> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: The MLF scheduling algorithm seems to have been initially implemented in the Compatible Time-Sharing System (CTSS) [10], one of the first time-sharing systems, and is used by the Unix operating system <ref> [1] </ref>. Our results provide further justification for the adoption of MLF as the scheduling strategy. Another perhaps interesting aspect of these results is that we allow the adversary to be adaptive.
Reference: [2] <editor> L. Bic, and A. Shaw, </editor> <booktitle> The Logical Design of Operating Systems, </booktitle> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction We consider the problem of scheduling a collection of dynamically arriving jobs with unknown execution times so as to minimize the average response/flow time. This the classic CPU scheduling problem faced by time-sharing operating systems <ref> [2, 6] </ref>. In the standard 3-field scheduling notation [8] this is the non-clairvoyant version of 1 j pmtn; r j j P F j . Its easy to see that every algorithm that doesn't unnecessarily idle the processor is at worst n-competitive, where n is the number of jobs.
Reference: [3] <author> P. Brucker, </author> <title> Scheduling Algorithms, </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: It is well known that the optimal scheduling algorithm is Shortest Remaining Processing Time (SRPT), which always runs the job with the least amount of remaining processing time <ref> [3] </ref>. An online scheduler becomes aware of J j at time r j . A clairvoyant online scheduler learns x j at time r j .
Reference: [4] <author> T. Cormen, C. Leiserson, and R. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: The following Chernoff tail bound for a geometrically distributed variable S, with mean and variance 2 , is well known, Prob [S x] e x 2 =4 2 <ref> [4] </ref>. Thus in our case, one can see that by letting x = c u p log n one can make this tail bound less than 1=n 2 for sufficiently large c u . <p> Using Stirling's approximation k! p e ) k <ref> [4] </ref>, we get Prob [S 2 i k=c] et ln n k k Hence, to show Prob [S 2 i k=c] 1=n 6 it is sufficient to show c k n 6 . <p> The second is valid by our choice of where to split the sum and a translation of the summa tion index. The last inequality is uses the fact that P b i=1 i = ln b + O (1) <ref> [4] </ref>. Hence for sufficiently large n we get i=s +O (log n) &lt; 26t log n ln ln n This is a contradiction to the definition of P h .
Reference: [5] <author> M. Evan, N. Hastings, B. Peacock, </author> <title> Statistical Distributions, </title> <publisher> John Wiley, </publisher> <year> 1993. </year>
Reference-contexts: We now intro duce some basic facts needed to further analyze the distributions on the y j 's. 1. The expected value of an exponentially distributed random variable fi, with probability distribution function Prob [fi x] = 1 e x=b , is b <ref> [5] </ref>. Hence, E [fi i;j ] = 2 i =(t ln ff (i; j)). 2. It is well known that exponential distributions are memoryless in that Prob [fi i;j + given fi i;j -] = Prob [fi i;j ]. 3. <p> The sum S of k random variables, each with probability distribution function e x=b , has the Erlang form of the gamma distribution with probability distribution function Prob [S x] = 1e x=b ( h=0 h! ) <ref> [5] </ref>. In our case, S = P k and b = 2 i t ln n . Notice that the sum P k1 (x=b) h first k terms of the Taylor series for e x=b .
Reference: [6] <author> P. Galvin, and A. Silverschatz, </author> <title> Operating System Concepts, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction We consider the problem of scheduling a collection of dynamically arriving jobs with unknown execution times so as to minimize the average response/flow time. This the classic CPU scheduling problem faced by time-sharing operating systems <ref> [2, 6] </ref>. In the standard 3-field scheduling notation [8] this is the non-clairvoyant version of 1 j pmtn; r j j P F j . Its easy to see that every algorithm that doesn't unnecessarily idle the processor is at worst n-competitive, where n is the number of jobs.
Reference: [7] <author> B. Kalyanasundaram, and K. Pruhs, </author> <title> "Speed is as powerful as clairvoyance", </title> <booktitle> IEEE Foundations of Computation, </booktitle> <year> 1995. </year>
Reference-contexts: Note that the number of jobs used this lower bound construction is exponential in P . Run-to-completion is P -competitive [12]. The competitive ratio for the Round Robin algorithm is (n= log n) [11, 12]. Kalyanasundaram and Pruhs <ref> [7] </ref> show that the shortest elapsed time first algorithm, which always runs the job that has been run the least, is constant competitive if the online scheduler is equipped with a faster processor than the adversary. By combining the results in this paper with those in [7], one can see that <p> Kalyanasundaram and Pruhs <ref> [7] </ref> show that the shortest elapsed time first algorithm, which always runs the job that has been run the least, is constant competitive if the online scheduler is equipped with a faster processor than the adversary. By combining the results in this paper with those in [7], one can see that the same can be said of MLF.
Reference: [8] <author> E. Lawler, J.K. Lenstra, A. Rinnooy Kan, and D. Shmoys, </author> <title> "Sequencing and Scheduling: Algorithms and Complexity", </title> <editor> in S. Graves, A. Rinnooy Kan, and P. Zipkin (eds.), </editor> <title> Logistics of Production and Inventory, Handbooks in OR & MS 4, </title> <publisher> Elsevier Science, </publisher> <pages> Chapter 9, 445-522, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction We consider the problem of scheduling a collection of dynamically arriving jobs with unknown execution times so as to minimize the average response/flow time. This the classic CPU scheduling problem faced by time-sharing operating systems [2, 6]. In the standard 3-field scheduling notation <ref> [8] </ref> this is the non-clairvoyant version of 1 j pmtn; r j j P F j . Its easy to see that every algorithm that doesn't unnecessarily idle the processor is at worst n-competitive, where n is the number of jobs.
Reference: [9] <author> S. Leonardi, and D. Raz, </author> <title> "Approximating total flow time on parallel machines", </title> <booktitle> ACM Symposium on Theory of Computing, </booktitle> <year> 1997. </year>
Reference-contexts: They also determined the optimally competitive randomized version of MLF, within a certain a subschema of variations, again in the case that all release time are 0. For the problem P m j pmtn; r j j P tiple identical processors), Leonardi and Raz <ref> [9] </ref> showed that SRPT is O (log min ( n m ; P ))-competitive, and that every randomized online clairvoyant algorithm is (max (log n m ; log P ))-competitive.
Reference: [10] <author> S. Madnick, and J. Donovan, </author> <title> Operating Systems, </title> <publisher> McGraw-Hill, </publisher> <year> 1974. </year>
Reference-contexts: RMLF is identical except that the processing time that J j receives before being promoted is 2 i+1 minus an exponentially distributed random variable. The MLF scheduling algorithm seems to have been initially implemented in the Compatible Time-Sharing System (CTSS) <ref> [10] </ref>, one of the first time-sharing systems, and is used by the Unix operating system [1]. Our results provide further justification for the adoption of MLF as the scheduling strategy. Another perhaps interesting aspect of these results is that we allow the adversary to be adaptive.
Reference: [11] <author> T. Matsumoto, </author> <title> "Competitive analysis of the round robin algorithm', </title> <booktitle> International Symposium on Algorithms and Computation, </booktitle> <volume> 71 - 77, </volume> <year> 1992. </year>
Reference-contexts: Note that the number of jobs used this lower bound construction is exponential in P . Run-to-completion is P -competitive [12]. The competitive ratio for the Round Robin algorithm is (n= log n) <ref> [11, 12] </ref>. Kalyanasundaram and Pruhs [7] show that the shortest elapsed time first algorithm, which always runs the job that has been run the least, is constant competitive if the online scheduler is equipped with a faster processor than the adversary.
Reference: [12] <author> R. Motwani, S. Phillips, and E. Torng, </author> <title> "Non-clairvoyant scheduling", </title> <journal> Theoretical Computer Science, </journal> <volume> 130, 17 - 47, </volume> <year> 1994. </year>
Reference-contexts: Yet there is no known nonclair-voyant algorithm, deterministic or randomized, with a competitive ratio provably o (n). In this paper with give a randomized nonclairvoy-ant algorithm, RMLF, that has a competitive ratio of fi (log n log log n). Motwani, Phillips, and Torng <ref> [12] </ref> showed that every randomized nonclairvoyant scheduling algorithm is (log n)-competitive, and that every deterministic nonclairvoyant scheduling algorithm is (n 1=3 )-competitive. <p> interpret the competitive ratio is as the payoff to a game played between an online algorithm and an all-powerful malevolent adversary that specifies the input I, and schedules I optimally. 1.2 Related Results For the problem 1 j pmtn; r j j P F j , Motwani, Phillips and Torng <ref> [12] </ref> showed that every deterministic nonclairvoyant algorithm is (n 1=3 )-competitive, and that every randomized nonclairvoyant algorithm is (log n)-competitive. The randomized lower bound in [12] holds even if the online algorithm knows the distribution on the jobs lengths. <p> I, and schedules I optimally. 1.2 Related Results For the problem 1 j pmtn; r j j P F j , Motwani, Phillips and Torng <ref> [12] </ref> showed that every deterministic nonclairvoyant algorithm is (n 1=3 )-competitive, and that every randomized nonclairvoyant algorithm is (log n)-competitive. The randomized lower bound in [12] holds even if the online algorithm knows the distribution on the jobs lengths. Thus, one might argue that our results show that knowing the distribution of the job lengths does not buy the online scheduler much. A variant of the randomized lower bound construction in [12] shows that every randomized <p> randomized lower bound in <ref> [12] </ref> holds even if the online algorithm knows the distribution on the jobs lengths. Thus, one might argue that our results show that knowing the distribution of the job lengths does not buy the online scheduler much. A variant of the randomized lower bound construction in [12] shows that every randomized non-clairvoyant algorithm is (P )-competitive, where P is the ratio of the length of the longest job to the length of the shortest job. Note that the number of jobs used this lower bound construction is exponential in P . Run-to-completion is P -competitive [12]. <p> in <ref> [12] </ref> shows that every randomized non-clairvoyant algorithm is (P )-competitive, where P is the ratio of the length of the longest job to the length of the shortest job. Note that the number of jobs used this lower bound construction is exponential in P . Run-to-completion is P -competitive [12]. The competitive ratio for the Round Robin algorithm is (n= log n) [11, 12]. <p> Note that the number of jobs used this lower bound construction is exponential in P . Run-to-completion is P -competitive [12]. The competitive ratio for the Round Robin algorithm is (n= log n) <ref> [11, 12] </ref>. Kalyanasundaram and Pruhs [7] show that the shortest elapsed time first algorithm, which always runs the job that has been run the least, is constant competitive if the online scheduler is equipped with a faster processor than the adversary. <p> By combining the results in this paper with those in [7], one can see that the same can be said of MLF. For the problem of 1 j pmtn j P F j (all release times are 0), Motwani, Phillips and Torng <ref> [12] </ref> showed that Round Robin has a competitive ratio approaching 2 as n grows, and this is optimal among nonclair-voyant algorithms even allowing randomization. <p> be the case that E [ jU RMLF (t)j ] = (log n log log n) jU Adv (t)j The adversary can then punish RMLF by bringing in one job of length 1=n c every 1=n c time units (for some sufficiently large c) as in the lower bounds in <ref> [12] </ref>. Acknowledgments Part of this research was conducted by the second author was visiting the Combinatorial Optimization Group in the Department of Mathematics at the Eindhoven University of Technology. In particular, the second author would like to thank Arjen Vestjens and Gerhard Woeginger for many helpful conversations and suggestions.
Reference: [13] <author> C. Phillips, C. Stein, E. Torng, and J. </author> <title> Wein "Optimal time-critical scheduling via resource augmentation", </title> <booktitle> ACM Symposium on Theory of Computing, </booktitle> <year> 1997. </year>
Reference-contexts: Phillips, Stein, Torng, and Wein <ref> [13] </ref> show that SRPT is 1 competitive if equipped with processors twice as fast as the adversary's processors. 1.3 Preliminaries Throughout this paper we use time dependent variables. If is time dependent variable, we use -(t) to denote the value of at time t.
References-found: 13

