URL: http://www.cis.ohio-state.edu/~clam/papers/lcpc96.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~clam/
Root-URL: http://www.cis.ohio-state.edu
Email: e-mail: -clam, saday, wenger-@cis.ohio-state.edu  
Title: Optimal Reordering and Mapping of a Class of Nested Loops for Parallel Execution  
Author: Chi-Chung Lam*, P. Sadayappan*, and Rephael Wenger 
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Note: Supported in part by NSF grant DMR-9520319.  
Abstract: This paper addresses the compile-time optimization of a class of nested-loop computations that arise in some computational physics applications. The computations involve summations over products of array terms in order to compute multi-dimensional surface and volume integrals. Reordering additions and multiplications and applying the distributive law can significantly reduce the number of operations required in evaluating these summations. In a multiprocessor environment, proper distribution of the arrays among processors will reduce the inter-processor communication time. We present a formal description of the operation minimization problem, a proof of its NP-completeness, and a pruning strategy for finding the optimal solution in small cases. We also give an algorithm for determining the optimal distribution of the arrays among processors in a multiprocessor environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. N. Fischer and R. J. Leblanc Jr. </author> <title> Crafting a Compiler. </title> <address> Menlo Park, CA: </address> <publisher> Benjamin/ Cummings, </publisher> <year> 1991. </year>
Reference: [2] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <address> New York: </address> <publisher> W. H. Freeman, </publisher> <year> 1979. </year>
Reference-contexts: This problem is known to be NP-complete <ref> [2] </ref>. The Product Partition problem is similar. Given a finite set B and a size s (b) Z + for each , the Product Partition problem asks whether there exists a subset such that . Let x equal where &lt;A, s, y&gt; is an instance of the Subset Product problem.
Reference: [3] <author> Ken Kennedy and Kathryn S. McKinley. </author> <title> Maximizing Loop Parallelism and Improving Data Locality via Loop Fusion and Distribution. </title> <booktitle> In Languages and Compilers for Parallel Computing, </booktitle> <month> August </month> <year> 1993, </year> <pages> 301-320. </pages>
Reference: [4] <author> Ken Kennedy and Kathryn S. McKinley. </author> <title> Optimizing for Parallelism and Data Locality. </title> <booktitle> In Proceedings of the 1992 ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1992, </year> <pages> 323-334. </pages>
Reference: [5] <author> V. Kumar, A. Grama, A. Gupta, and G. Karypis. </author> <title> Introduction to Parallel Computing: Design and Analysis of Algorithms. </title> <address> RedWood City, CA: Benjamin/Cummings, </address> <year> 1994. </year>
Reference-contexts: For most processor topologies, T redist (s) can be expressed as <ref> [5] </ref>, where C s and C w are topology-dependent functions of n p , t s is the start-up time for a message, and t w is the per-word transfer time. <p> Let T replicate (s) be the communication time needed to replicate an array of size s by all-to-all broadcast, in which the size of each message is . For most processor topologies, T replicate (s) can be expressed as <ref> [5] </ref>, where C s and C w are again topology-dependent functions of n p . For a given parallel computer with a fixed number of processors, C s , C w , C s , C w , t s and t w become constants.
Reference: [6] <author> C. C. Lu and W. C. Chew. </author> <title> Fast Algorithm for Solving Hybrid Integral Equations. </title> <booktitle> In IEE Proceedings-H, </booktitle> <volume> 140(6): </volume> <pages> 455-460, </pages> <month> December </month> <year> 1993. </year>
Reference: [7] <author> Edmund K. Miller. </author> <title> Solving Bigger Problems By Decreasing the Operation Count and Increasing the Computation Bandwidth. </title> <booktitle> In Proceedings of the IEEE, </booktitle> <volume> 79(10) </volume> <pages> 1493-1504, </pages> <month> October </month> <year> 1991. </year>
Reference: [8] <author> M. Potkonjak, M. B. Srivastava, and A. P. Chandrakasan. </author> <title> Multiple Constant Multiplications: Efficient and Versatile Framework and Algorithms for Exploring Common Subexpression Elimination. </title> <journal> IEEE Transactions on Computer-aided Design of Integrated Circuits and Systems, </journal> <volume> 15(2): </volume> <pages> 151-164, </pages> <month> February </month> <year> 1996. </year>
Reference: [9] <author> S. Winograd. </author> <title> Arithmetic complexity of computations. </title> <institution> Philadelphia: Society for Industrial and Applied Mathematics, </institution> <year> 1980. </year>
Reference-contexts: We wish to reduce the number of arithmetic operations in evaluating nested loops by reordering operations and applying the distributive law. However, we do not consider more complicated strategies such as the transformation of the standard matrix multiplication into Strassens algorithm <ref> [9] </ref>. Hence we first have to define more precisely the space of equivalent programs that are to be searched amongst. We formalize this space as a set of function sequences.
Reference: [10] <author> M. Wolfe. </author> <title> High Performance Compilers for Parallel Computing. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: It computes the discrete function (for simplicity, we use to denote ): If the above loop were input to an optimizing compiler, it would perform dependence analysis <ref> [10] </ref> on the loop and determine that the innermost (t-loop) was an independent loop and that the other three loops involved dependences due to reductions. Although the loop could be parallelized, no attempt would be made by the compiler to reduce the number of arithmetic operations involved.
Reference: [11] <author> Michael E. Wolf and Monica S. Lam. </author> <title> A Data Locality Algorithm. </title> <booktitle> In Proceedings of the SIGPLAN 91 Conference on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1991, </year> <pages> 30-44. </pages>
References-found: 11

