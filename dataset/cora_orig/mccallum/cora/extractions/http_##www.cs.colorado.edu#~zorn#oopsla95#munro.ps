URL: http://www.cs.colorado.edu/~zorn/oopsla95/munro.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/oopsla95/papers.html
Root-URL: http://www.cs.colorado.edu
Title: Validating the MaStA I/O Cost Model for DB Crash Recovery Mechanisms based upon a probabilistic
Author: D.S. Munro R.C.H. Connor R. Morrison J.E.B. Moss S.J.G. Scheuerl 
Note: Cost is  
Address: North Haugh, St Andrews, Fife, KY16 9SS, Scotland  Amherst, Massachusetts, MA 01003, U.S.A.  
Affiliation: School of Mathematical and Computational Sciences, University of StAndrews,  Department of Computer Science, University of Massachusetts,  
Abstract: The design of database crash recovery mechanisms on modern computer systems must take account of the relative speed of processors over disks. In these systems disk I/O activity is the dominant expense and the disk transfer time relative to seek time makes patterns of disk access significant. The MaStA (Massachusetts St Andrews) cost model for database crash recovery mechanisms, designed by the authors, provides finer grained distinctions of I/O costs than previous work by being structured independently of machine architectures and application workloads and refining costs in terms of I/O categories, access patterns and application workload parameters. The main features of the model are: The MaStA model is based on the assertion that four basic assumptions hold true. This paper briefly describes the MaStA model and outlines the validation strategy undertaken to confirm these assumptions.
Abstract-found: 1
Intro-found: 1
Reference: [ABJ+92] <author> Atkinson, M.P., Birnie, A., Jackson, N. & Philbrow, </author> <title> P.C. </title> <booktitle> Measuring Persistent Object Systems In Proc. 5th International Workshop on Persistent Object Systems, </booktitle> <address> San Miniato, Italy (1992). </address> <booktitle> In Persistent Object Systems (Eds. A.Albano & R.Morrison). </booktitle> <pages> Springer-Verlag pp 63-85. </pages>
Reference-contexts: Once the MaStA model has been calibrated there is a final assumption that is used in estimating the cost of any system. The assumption is that there are no significant phase changes in the performance of the system <ref> [ABJ+92] </ref>. 2 . 1 Validation Strategy The strategy for validation of the MaStA model is outlined in Figure 2. A main feature of this approach is that results from simulations are compared alongside experimental measurements from real systems at the transaction workload, database and device levels.
Reference: [BDM+90] <author> Brown, A.L., Dearle, A., Morrison, R., Munro, D.S. & Rosenberg, J. </author> <title> "A Layered Persistent Architecture for Napier88". </title> <booktitle> International Workshop on Computer Architectures to Support Security and Persistence of Information, </booktitle> <address> Universitt Bremen, West Germany, </address> <month> (May </month> <year> 1990). </year> <title> In Security and Persistence. </title> <editor> (Eds. J.Rosenberg & L.Keedy). </editor> <publisher> Springer-Verlag, </publisher> <pages> 155-172. </pages>
Reference-contexts: An I/O access stream is produced from these systems tagged by I/O cost category. These traces are then run across a number of real and simulated devices to produce an overall cost. The Napier88 systems [MBC+89] are supported by object stores <ref> [BDM+90, MCM+94] </ref> which utilise a before-image and an afterimage shadow-paging scheme whilst Mneme [MS88] and Exodus [CDF+86] use page and object-based logging respectively.
Reference: [CDF+86] <author> Carey, M.J., DeWitt, D.J., Frank, D., Graefe, G., Muralikrishna, M., Richardson, J.E. & Shekita, E.J. </author> <title> The Architecture of the EXODUS Extensible DBMS. </title> <booktitle> In Twelfth International Conference on Very Large Data Bases, </booktitle> <pages> 1986 pp 52-65. </pages>
Reference-contexts: These traces are then run across a number of real and simulated devices to produce an overall cost. The Napier88 systems [MBC+89] are supported by object stores [BDM+90, MCM+94] which utilise a before-image and an afterimage shadow-paging scheme whilst Mneme [MS88] and Exodus <ref> [CDF+86] </ref> use page and object-based logging respectively.
Reference: [CDN93] <author> Carey, M.J., DeWitt, D.J. & Naughton, J.F. </author> <title> The OO7 Benchmark. </title> <booktitle> In SIGMOD Conference on the Management of Data, </booktitle> <year> 1993. </year>
Reference-contexts: Real Device Device Simulation Time commit, abortreads, writes MaStA Time 007 Benchmarks 001 Benchmarks Synthetic Workloads Mneme Exodus Database Simulator Napier88 Trace Generators Trace Consumers Trace Analyser I/O access trace Applications A trace of database accesses generated from synthetic workloads and the standard 001 [CS92] and 007 <ref> [CDN93] </ref> benchmark suites or other applications are fed into a number of database systems and simulators reflecting different recovery methods and buffer models. An I/O access stream is produced from these systems tagged by I/O cost category.
Reference: [Cha78] <author> Challis, M.F. </author> <title> Database Consistency and Integrity in a Multiuser Environment. Databases: </title> <note> Improving Useability and Responsiveness (1978) pp 245-270. </note>
Reference-contexts: The trace identifies the sequence of blocks read and written from a particular application tagged by its cost category. I/O tracing has been incorporated into Napier88 systems running Datasafe [SCM+95d], a hybrid of the DBCache [EB84] recovery scheme and Flask [MCM+94], an afterimage shadow paging <ref> [Lor77, Cha78] </ref> mechanism. Traces generated so far record the I/O activity from the OO1 benchmark suites as well as real workloads. 5 A number of these traces have been run over real disks and an in-house disk simulator.
Reference: [CS92] <author> Cattell, R.G.G. & Skeen, J. </author> <note> Object Operations Benchmark. ACM Transactions on Database Systems 17,1 (1992) pp 1-31 6 </note>
Reference-contexts: Real Device Device Simulation Time commit, abortreads, writes MaStA Time 007 Benchmarks 001 Benchmarks Synthetic Workloads Mneme Exodus Database Simulator Napier88 Trace Generators Trace Consumers Trace Analyser I/O access trace Applications A trace of database accesses generated from synthetic workloads and the standard 001 <ref> [CS92] </ref> and 007 [CDN93] benchmark suites or other applications are fed into a number of database systems and simulators reflecting different recovery methods and buffer models. An I/O access stream is produced from these systems tagged by I/O cost category.
Reference: [EB84] <author> Elhardt, K. & Bayer, R. </author> <title> "A Database Cache for High Performance and Fast Restart in Database Systems". </title> <journal> ACM Transactions on Database Systems, </journal> <note> 9,4 (1984) pp 503-525. </note>
Reference-contexts: These factors change the engineering tradeoffs upon which recovery mechanisms are based, and recently designed mechanisms tend to favour extra processor activity to reduce disk I/O, and more asynchronous (scheduled) I/O as opposed to synchronous access <ref> [EB84, OS94] </ref>. In addition, one type of I/O access can be significantly faster than other types of access depending on the disk and operating system factors. <p> The trace identifies the sequence of blocks read and written from a particular application tagged by its cost category. I/O tracing has been incorporated into Napier88 systems running Datasafe [SCM+95d], a hybrid of the DBCache <ref> [EB84] </ref> recovery scheme and Flask [MCM+94], an afterimage shadow paging [Lor77, Cha78] mechanism. Traces generated so far record the I/O activity from the OO1 benchmark suites as well as real workloads. 5 A number of these traces have been run over real disks and an in-house disk simulator.
Reference: [HR83] <author> Haerder, T. & Reuter, A. </author> <title> Principles of Transaction-Oriented Database Systems. </title> <journal> ACM Computing Surveys, </journal> <note> 15,4 (1983) pp 287-318. </note>
Reference-contexts: 1 The MaStA Cost Model The cost of recovery mechanisms can be critical to the overall performance of data-intensive applications with I/O bandwidth being a limiting factor. Hence many recovery mechanisms have been invented, each with different performance tradeoffs <ref> [HR83] </ref>. Each technique's cost involves not only the overhead of restoring data after failures but also the time and space overhead required to maintain sufficient recovery information during normal operation to ensure recovery.
Reference: [Lor77] <author> Lorie, A.L. </author> <title> Physical Integrity in a Large Segmented Database. </title> <journal> ACM Transactions on Database Systems, </journal> <note> 2,1 (1977) pp 91-104. </note>
Reference-contexts: The trace identifies the sequence of blocks read and written from a particular application tagged by its cost category. I/O tracing has been incorporated into Napier88 systems running Datasafe [SCM+95d], a hybrid of the DBCache [EB84] recovery scheme and Flask [MCM+94], an afterimage shadow paging <ref> [Lor77, Cha78] </ref> mechanism. Traces generated so far record the I/O activity from the OO1 benchmark suites as well as real workloads. 5 A number of these traces have been run over real disks and an in-house disk simulator.
Reference: [MBC+89] <author> Morrison, R., Brown, A.L., Connor, R.C.H. & Dearle, A. </author> <title> The Napier88 Reference Manual. </title> <institution> University of St Andrews Technical Report PPRR-77-89 (1989). </institution>
Reference-contexts: An I/O access stream is produced from these systems tagged by I/O cost category. These traces are then run across a number of real and simulated devices to produce an overall cost. The Napier88 systems <ref> [MBC+89] </ref> are supported by object stores [BDM+90, MCM+94] which utilise a before-image and an afterimage shadow-paging scheme whilst Mneme [MS88] and Exodus [CDF+86] use page and object-based logging respectively.
Reference: [MCM+94] <author> Munro, D.S., Connor R.C.H., Morrison, R., Scheuerl, S. & Stemple, D.W. </author> <title> "Flask - A Flexible Layered Architecture for Supporting Concurrency Control Schemes". </title> <booktitle> To appear in proceedings of the 6th International Workshop on Persistent Object Systems, </booktitle> <address> Tarascon, France (September 1994 </address> ) 
Reference-contexts: An I/O access stream is produced from these systems tagged by I/O cost category. These traces are then run across a number of real and simulated devices to produce an overall cost. The Napier88 systems [MBC+89] are supported by object stores <ref> [BDM+90, MCM+94] </ref> which utilise a before-image and an afterimage shadow-paging scheme whilst Mneme [MS88] and Exodus [CDF+86] use page and object-based logging respectively. <p> The trace identifies the sequence of blocks read and written from a particular application tagged by its cost category. I/O tracing has been incorporated into Napier88 systems running Datasafe [SCM+95d], a hybrid of the DBCache [EB84] recovery scheme and Flask <ref> [MCM+94] </ref>, an afterimage shadow paging [Lor77, Cha78] mechanism. Traces generated so far record the I/O activity from the OO1 benchmark suites as well as real workloads. 5 A number of these traces have been run over real disks and an in-house disk simulator.
Reference: [MS88] <author> Moss, J.E.B. & Sinofsky, S. </author> <title> Managing persistent data with Mneme: Designing a reliable shared object interface. </title> <editor> In Dittrich, K.R. (ed.) </editor> <booktitle> Advances in ObjectOriented Database Systems: Second International Workshop on ObjectOriented Database Systems, </booktitle> <publisher> LNCS 334, Springer-Verlag, </publisher> <pages> 1988 pp 298-316. </pages>
Reference-contexts: These traces are then run across a number of real and simulated devices to produce an overall cost. The Napier88 systems [MBC+89] are supported by object stores [BDM+90, MCM+94] which utilise a before-image and an afterimage shadow-paging scheme whilst Mneme <ref> [MS88] </ref> and Exodus [CDF+86] use page and object-based logging respectively.
Reference: [OS94] <author> O'Toole, J. & Shrira, L. </author> <title> "Opportunistic Log: Efficient Installation Reads in a Reliable Object Server". </title> <type> Technical Report MIT/LCS-TM-506, </type> <month> March </month> <year> 1994. </year> <booktitle> To appear in 1st International Symposium on Operating Systems Design and Implementation, </booktitle> <address> Monterey, CA (1994). </address>
Reference-contexts: These factors change the engineering tradeoffs upon which recovery mechanisms are based, and recently designed mechanisms tend to favour extra processor activity to reduce disk I/O, and more asynchronous (scheduled) I/O as opposed to synchronous access <ref> [EB84, OS94] </ref>. In addition, one type of I/O access can be significantly faster than other types of access depending on the disk and operating system factors.
Reference: [SCM+95a] <author> Scheuerl, S., Connor R.C.H., Morrison, R., Moss, J.E.B. & Munro, </author> <title> D.S. MaStA - An I/O Cost Model for Database Crash Recovery Mechanisms Technical Report CS/95/1 (1995), </title> <institution> University of St Andrews. </institution>
Reference-contexts: In addition, one type of I/O access can be significantly faster than other types of access depending on the disk and operating system factors. In <ref> [SCM+95a] </ref> the ratio of the cost of unclustered synchronous writes to sequential reads was observed to be a factor of six in a measured system. <p> The workload: measuring and choosing values for the workload parameters which determine the number of I/Os in each category. The identification of these three categories allows the MaStA model to encompass the patterns of usage in both traditional and modern database systems. In <ref> [SCM+95a, SCM+95b] </ref> the MaStA model is described in greater depth together with an analysis and comparison of four recovery mechanisms under differing workloads. 2 Validation Three major abstractions are made to simplify the process of making a cost estimate, based upon the following critical underlying assumptions: Recovery mechanism abstraction Each recovery
Reference: [SCM+95b] <author> Scheuerl, S.J.G., Connor, R.C.H., Morrison, R., Moss, J.E.B. & Munro, </author> <title> D.S. "The MaStA I/O Cost Model and its Validation Strategy". </title> <booktitle> In the Proceedings of the Second International Workshop on Advances in Databases and Information Systems (ADBIS'95), </booktitle> <address> Moscow, </address> <month> June 27-30 </month> <year> 1995, </year> <booktitle> Volume 1, </booktitle> <pages> pp 165-175. </pages>
Reference-contexts: The workload: measuring and choosing values for the workload parameters which determine the number of I/Os in each category. The identification of these three categories allows the MaStA model to encompass the patterns of usage in both traditional and modern database systems. In <ref> [SCM+95a, SCM+95b] </ref> the MaStA model is described in greater depth together with an analysis and comparison of four recovery mechanisms under differing workloads. 2 Validation Three major abstractions are made to simplify the process of making a cost estimate, based upon the following critical underlying assumptions: Recovery mechanism abstraction Each recovery
Reference: [SCM+95c] <author> Scheuerl, S.J.G., Connor, R.C.H., Morrison, R., Moss, J.E.B. & Munro, </author> <title> D.S. "The MaStA I/O trace Format". </title> <type> Technical Report CS/95/4 (1995), </type> <institution> University of St Andrews. </institution>
Reference-contexts: systems representative samples of applications, a range of performance of recovery methods is obtained. 2 . 2 Validation Status At the time of writing, test runs and analysis of experimental data are at an early stage with the main effort concentrated on the definition of a suitable I/O trace format <ref> [SCM+95c] </ref> and on the validation of assumptions 2 and 3. The trace identifies the sequence of blocks read and written from a particular application tagged by its cost category.
Reference: [SCM+95d] <author> Scheuerl, S.J.G., Connor, R.C.H., Morrison, R., Munro, D.S. & Moss, J.E.B. </author> <title> "The DataSafe Failure Recovery Mechanism in the Flask Architecture". </title> <note> Submitted to ACSC'96 (Melbourne). </note>
Reference-contexts: The trace identifies the sequence of blocks read and written from a particular application tagged by its cost category. I/O tracing has been incorporated into Napier88 systems running Datasafe <ref> [SCM+95d] </ref>, a hybrid of the DBCache [EB84] recovery scheme and Flask [MCM+94], an afterimage shadow paging [Lor77, Cha78] mechanism.
References-found: 17

