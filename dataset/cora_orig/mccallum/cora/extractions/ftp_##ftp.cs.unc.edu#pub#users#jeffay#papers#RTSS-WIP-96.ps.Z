URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTSS-WIP-96.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/real-time.html
Root-URL: http://www.cs.unc.edu
Title: Distributed Real-Time Dataflow: An Execution Paradigm for Image Processing and Anti-Submarine Warfare Applications combined with
Author: S. Goddard K. Jeffay 
Keyword: real-time scheduling theory  
Note: can be  processing applications, such as those found in anti-submarine warfare and image processing.  
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: The central thesis of this project is that To this end, we propose a new real-time dataflow paradigm that is based on the Navy's Processing Graph Method (PGM) [5], which is similar to the dataflow methodology employed by Ptolemy [1, 4] of the University of California at Berkeley and the Rapid Prototyp-ing of Application Specific Signal Processors (RASSP) project, funded by the Advanced Research Projects Agency (ARPA). While our dataflow methodology itself is not novel, our application of real-time scheduling theory to the model is. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Buck, J., Ha, S., Lee, E.A., Messerschmitt, D.G., "Ptolemy: </author> <title> A Framework For Simulating and Proto-typing Heterogeneous Systems", </title> <journal> International Journal of computer Simulation, special issue on Simulation Software Development , Vol. </journal> <volume> 4, </volume> <year> 1994. </year>
Reference-contexts: To this end, we propose a new real-time dataflow paradigm that is based on the Navy's Processing Graph Method (PGM) [5], which is similar to the dataflow methodology employed by Ptolemy <ref> [1, 4] </ref> (of the University of California at Berkeley) and RASSP. While our dataflow methodology itself is not novel, our application of real-time scheduling theory to the model is.
Reference: [2] <author> Berry, G., Cosserat, L., </author> <title> "The ESTEREL Synchronous Programming Language and its Mathematical Semantics", </title> <booktitle> Lecture Notes in Computer Science, Vol. 197 Seminar on Concurrency, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: Hence, the second execution of N i enables 4 executions of N i+1 . After 2 executions of N i and the resulting 7 executions of N i+1 , Q i is left in its original state: containing 0 tokens. 2 We assume the synchrony hypothesis of <ref> [2] </ref> to introduce the concept of node execution rates. Under the synchrony hypothesis, we assume the graph executes on an infinitely fast machine. Hence, each node takes no time to execute and data passes from source to sink node instantaneously. <p> Definition 3.2. Let t be the beginning of the first execution interval for node N . The execution rate for N is specified as (x; y); (Assuming the strong synchrony hypothesis of <ref> [2] </ref>) N will execute exactly x times in all time intervals of [t + y (j 1); t + y j); 8j &gt; 0.
Reference: [3] <author> Goddard, S., Jeffay, K., </author> <title> "A Temporal Semantics for Real-Time Dataflow" , University of North Carolina, </title> <institution> Department of Computer Science, </institution> <type> Technical Report, </type> <note> in progress. </note>
Reference-contexts: We are currently working on completing the single processor execution model and extending it to a distributed paradigm. This section briefly covers some of our results. A much more thorough and rigorous treatise of our real-time dataflow execution model is provided in <ref> [3] </ref>. In addition to the two theorems presented without proof in this section, we have established (or a working to establish): * schedulability tests, * bounds on end-to-end latency, and * bounds on the memory requirements of a graph. Example 3.1.
Reference: [4] <author> Lee, E.A., Messerschmitt, D.G., </author> <title> "Static Scheduling of Synchronous Data Flow Programs for Digital Signal Processing", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-36, No. 1, </volume> <month> January </month> <year> 1987, </year> <pages> pp. 24-35. </pages>
Reference-contexts: 1 Introduction Signal processing algorithms are often defined in the literature using large grain dataflow graphs <ref> [4] </ref>: directed graphs in which a collection of sequential work that executes from start to finish without synchronization is called a node or vertex, and the graph edges (arcs) depict the asynchronous flow of data from one node to the next. <p> To this end, we propose a new real-time dataflow paradigm that is based on the Navy's Processing Graph Method (PGM) [5], which is similar to the dataflow methodology employed by Ptolemy <ref> [1, 4] </ref> (of the University of California at Berkeley) and RASSP. While our dataflow methodology itself is not novel, our application of real-time scheduling theory to the model is.
Reference: [5] <editor> Processing Graph Method Specification: </editor> <title> Version 1.0 , prepared by the NRL for use by the Navy Standard Signal Processing Program Office (PMS-428), </title> <month> Decem-ber </month> <year> 1987. </year>
Reference-contexts: To this end, we propose a new real-time dataflow paradigm that is based on the Navy's Processing Graph Method (PGM) <ref> [5] </ref>, which is similar to the dataflow methodology employed by Ptolemy [1, 4] (of the University of California at Berkeley) and RASSP. While our dataflow methodology itself is not novel, our application of real-time scheduling theory to the model is.
References-found: 5

