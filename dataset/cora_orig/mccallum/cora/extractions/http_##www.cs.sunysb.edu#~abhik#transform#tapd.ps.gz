URL: http://www.cs.sunysb.edu/~abhik/transform/tapd.ps.gz
Refering-URL: http://www.cs.sunysb.edu/~abhik/transform/papers.html
Root-URL: http://www.cs.sunysb.edu
Title: Tabulation-based Induction Proofs with Application to Automated Verification  
Author: Abhik Roychoudhury C.R. Ramakrishnan I.V. Ramakrishnan S. A. Smolka 
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> R. Alur and T. A. Henzinger, editors. </editor> <booktitle> Computer Aided Verification (CAV '96), volume 1102 of Lecture Notes in Computer Science, </booktitle> <address> New Brunswick, New Jersey, July 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference: [2] <author> W. Chen and D. S. Warren. </author> <title> Tabled evaluation with delaying for general logic programs. </title> <journal> JACM, </journal> <volume> 43(1), </volume> <year> 1996. </year>
Reference-contexts: For these terminating programs XSB efficiently computes the least model, which is the least fixed point of the program rules understood as equations over sets of atoms. More precisely, XSB is based on SLG resolution <ref> [2] </ref>, which computes queries to normal logic programs (containing default negation) according to the well-founded semantics. Tabled resolution methods introduce a new level of declarativeness over traditional (Prolog-like) logic programming systems.
Reference: [3] <author> E. M. Clarke and E. A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <editor> In D. Kozen, editor, </editor> <booktitle> Proceedings of the Workshop on Logic of Programs, </booktitle> <address> Yorktown Heights, </address> <booktitle> volume 131 of Lecture Notes in Computer Science, </booktitle> <pages> pages 5271. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Tabled resolution methods introduce a new level of declarativeness over traditional (Prolog-like) logic programming systems. Availability of tabled LP systems makes it feasible to develop a larger class of efficient declarative solutions to complex applications. One such application is model checking <ref> [3, 11, 4] </ref> which is a verification technique aimed at determining whether a system specification possesses a certain property expressed as a temporal logic formula. From a computational viewpoint, algorithmic model checking can be formulated in terms of fixed-point computations.
Reference: [4] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM TOPLAS, </journal> <volume> 8(2), </volume> <year> 1986. </year>
Reference-contexts: Tabled resolution methods introduce a new level of declarativeness over traditional (Prolog-like) logic programming systems. Availability of tabled LP systems makes it feasible to develop a larger class of efficient declarative solutions to complex applications. One such application is model checking <ref> [3, 11, 4] </ref> which is a verification technique aimed at determining whether a system specification possesses a certain property expressed as a temporal logic formula. From a computational viewpoint, algorithmic model checking can be formulated in terms of fixed-point computations.
Reference: [5] <author> R. Cleaveland, P. M. Lewis, S. A. Smolka, and O. Sokolsky. </author> <title> The Concurrency Factory: A development environment for concurrent systems. </title> <booktitle> In Alur and Henzinger [1], </booktitle> <pages> pages 398401. </pages>
Reference-contexts: In its current state, XMC can verify finite-state systems specified using value-passing CCS [9] and formulas expressed in modal mu-calculus [8]. XMC's space and time performance is competitive with hand-coded (in C/C++) model checkers such as the Concurrency Factory <ref> [5] </ref> and SPIN [6] from Bell Labs. In this abstract we illustrate how tabled resolution, as realized in XSB, can be exploited to construct induction proofs. Our motivation for using tabulation-based induction stems from our desire to perform model checking on infinite-state systems.
Reference: [6] <author> G. J. Holzmann and D. Peled. </author> <title> The state of SPIN. </title> <booktitle> In Alur and Henzinger [1], </booktitle> <pages> pages 385389. </pages>
Reference-contexts: In its current state, XMC can verify finite-state systems specified using value-passing CCS [9] and formulas expressed in modal mu-calculus [8]. XMC's space and time performance is competitive with hand-coded (in C/C++) model checkers such as the Concurrency Factory [5] and SPIN <ref> [6] </ref> from Bell Labs. In this abstract we illustrate how tabled resolution, as realized in XSB, can be exploited to construct induction proofs. Our motivation for using tabulation-based induction stems from our desire to perform model checking on infinite-state systems.
Reference: [7] <author> J. Hsiang and M. Srivas. </author> <title> Automatic inductive theorem proving using prolog. </title> <journal> TCS, </journal> <volume> 54:328, </volume> <year> 1987. </year>
Reference-contexts: Moreover, it should be noted that the transformations applied to the residual program are simple fold/specialize transformations that can be readily implemented in a tabling system. The above program is equivalent to the lemmas generated by induction proof strategy for Prolog suggested in <ref> [7] </ref>. While in [7] the lemmas are considered simple enough to be proved by inspection, and hence the final step of the induction proof, we can in fact go one step further. Note that for every induction proof, there is a specific domain over which the induction variables range. <p> Moreover, it should be noted that the transformations applied to the residual program are simple fold/specialize transformations that can be readily implemented in a tabling system. The above program is equivalent to the lemmas generated by induction proof strategy for Prolog suggested in <ref> [7] </ref>. While in [7] the lemmas are considered simple enough to be proved by inspection, and hence the final step of the induction proof, we can in fact go one step further. Note that for every induction proof, there is a specific domain over which the induction variables range.
Reference: [8] <author> D. Kozen. </author> <title> Results on the propositional -calculus. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 27:333354, </address> <year> 1983. </year>
Reference-contexts: Our XMC system [12] aims to achieve such an integration. XMC is an XSB-based model checker written in less than 200 lines of tabled Prolog code. In its current state, XMC can verify finite-state systems specified using value-passing CCS [9] and formulas expressed in modal mu-calculus <ref> [8] </ref>. XMC's space and time performance is competitive with hand-coded (in C/C++) model checkers such as the Concurrency Factory [5] and SPIN [6] from Bell Labs. In this abstract we illustrate how tabled resolution, as realized in XSB, can be exploited to construct induction proofs.
Reference: [9] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Our XMC system [12] aims to achieve such an integration. XMC is an XSB-based model checker written in less than 200 lines of tabled Prolog code. In its current state, XMC can verify finite-state systems specified using value-passing CCS <ref> [9] </ref> and formulas expressed in modal mu-calculus [8]. XMC's space and time performance is competitive with hand-coded (in C/C++) model checkers such as the Concurrency Factory [5] and SPIN [6] from Bell Labs.
Reference: [10] <author> S. Owre, S. Rajan, J. M. Rushby, N. Shankar, and M. Srivas. PVS: </author> <title> Combining Specification, Proof checking and Model checking. </title> <booktitle> In Proceedings of the Seventh International Conference on Computer Aided Verification (CAV '96), Vol. 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pages 411414. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: On the other hand, if the counterexample program finitely succeeds, not only do we have a disproof, but an exact scenario when the formula is false: an invaluable tool for debugging safety-critical systems. Moreover, tabulation-based induction is completely automatic, in contrast to systems such as PVS <ref> [10] </ref> which supply a suite of tools to assist the user derive induction proofs.
Reference: [11] <author> J. P. Queille and J. Sifakis. </author> <title> Specification and verification of concurrent systems in Cesar. </title> <booktitle> In Proceedings of the International Symposium in Programming, volume 137 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1982. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Tabled resolution methods introduce a new level of declarativeness over traditional (Prolog-like) logic programming systems. Availability of tabled LP systems makes it feasible to develop a larger class of efficient declarative solutions to complex applications. One such application is model checking <ref> [3, 11, 4] </ref> which is a verification technique aimed at determining whether a system specification possesses a certain property expressed as a temporal logic formula. From a computational viewpoint, algorithmic model checking can be formulated in terms of fixed-point computations.
Reference: [12] <author> Y.S. Ramakrishna, C.R. Ramakrishnan, I.V. Ramakrishnan, Terrance Swift, S.A. Smolka, and D.S. Warren. </author> <title> Effficient model-checking using tabled resolution. </title> <booktitle> Proceedings of CAV '97, </booktitle> <year> 1997. </year>
Reference-contexts: By using metaprogramming facilities of logic programming, one can implement deductive techniques and thereby integrate them tightly with algorithmic model checking. Our XMC system <ref> [12] </ref> aims to achieve such an integration. XMC is an XSB-based model checker written in less than 200 lines of tabled Prolog code. In its current state, XMC can verify finite-state systems specified using value-passing CCS [9] and formulas expressed in modal mu-calculus [8]. <p> The predicate trans/3 is used in the definition of models/2. The following is a fragment of the encoding of trans/3 and models/2 (see <ref> [12] </ref> for details): :- table trans/3. % Evaluate 'trans' relation using tabled resolution. % Prefix: trans (Act o P, Act, P). % Choice: trans (P + Q, Act, R) :- trans (P, Act, R). trans (P + Q, Act, R) :- trans (Q, Act, R). % .. and so on for
Reference: [13] <author> Abhik Roychoudhury, C. R. Ramakrishnan, I. V. Ramakrishnan, and S. A. Smolka. </author> <title> Automated verification of parametrized families using tabled logic programming. </title> <type> Technical report, </type> <institution> Dept. of Computer Sc., State university of New York at Stony Brook, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: A detailed description of our technique appears in <ref> [13] </ref>. 2.1 An Example We now illustrate our approach by proving the associativity of append/3 predicate using tabulation-based induction. <p> For instance, we have been able to verify the correctness of parameterized hardware circuits such as an n-bit carry-lookahead adder directly using tabulation-based induction. A detailed description of the verification problems as well as our solutions appear in <ref> [13] </ref>.
Reference: [14] <editor> XSB. </editor> <booktitle> The XSB logic programming system v1.7, </booktitle> <year> 1997. </year> <note> Available by anonymous ftp from ftp.cs.sunysb.edu. </note>
Reference-contexts: 1 Introduction XSB <ref> [14] </ref> is a tabled logic programming system designed to address shortcomings in Prolog's SLD evaluation mechanism for Horn programs. SLD's poor termination and complexity properties have rendered Prolog unsuitable for deductive database (DDB) and non-monotonic reasoning (NMR) applications.
References-found: 14

