URL: http://www.research.digital.com/SRC/personal/monika/papers/monika-icalp96.ps.gz
Refering-URL: http://www.research.digital.com/SRC/personal/monika/papers.html
Root-URL: http://www.research.digital.com
Title: Sampling to Provide or to Bound: With Applications to Fully Dynamic Graph Algorithms algorithm improves
Author: Monika R. Henzinger Mikkel Thorup 
Note: This  from O(log 3 n) to O(log 2 n).  
Abstract: In dynamic graph algorithms the following provide-or-bound problem has to be solved quickly: Given a set S containing a subset R and a way of generating random elements from S testing for membership in R, either (i) provide an element of R or (ii) give a (small) upper bound on the size of R that holds with high probability. We give an optimal algorithm for this problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Angluin, L. G. Valiant, </author> <title> Fast probabilistic algorithms for Hamiltonian circuits and matchings. </title> <journal> J. Comput. System Sci. </journal> <volume> (18), </volume> <year> 1979, </year> <pages> 155-193. </pages>
Reference-contexts: In Section 3.2 we use log fl s rounds to prove the sampling lemma. In this section, we make repeated use of the following Chernoff bounds (see <ref> [1] </ref>, for example): Let B (n; p) be a random variable that has a binomial distribution with parameters n and p.
Reference: [2] <author> D. Eppstein, Z. Galil, G. F. </author> <title> Italiano, Improved Sparsification. </title> <type> Tech. Report 93-20, </type> <institution> Department of Information and Computer Science, University of California, </institution> <address> Irvine, CA 92717. </address>
Reference-contexts: In the literature, fully dynamic graph algorithms are compared using the cost per insert, delete, and query operation. The best deterministic algorithms for fully dynamic graph connectivity take time O ( p n) per update operation and O (1) per query <ref> [2, 3, 5] </ref>. Recently, Henzinger and King gave a fully dynamic connectivity algorithm with O (log 3 n) expected amortized time per operation using Las-Vegas randomization [6]. This should be compared with a lower bound of (log n= log log n) in the cell probe model [4, 8].
Reference: [3] <author> D. Eppstein, Z. Galil, G. F. Italiano, A. Nissenzweig, </author> <title> Sparsification ATechnique for Speeding up Dynamic Graph Algorithms. </title> <booktitle> Proc. 33rd Symp. on Foundations of Computer Science, </booktitle> <year> 1992, </year> <pages> 60-69. </pages>
Reference-contexts: In the literature, fully dynamic graph algorithms are compared using the cost per insert, delete, and query operation. The best deterministic algorithms for fully dynamic graph connectivity take time O ( p n) per update operation and O (1) per query <ref> [2, 3, 5] </ref>. Recently, Henzinger and King gave a fully dynamic connectivity algorithm with O (log 3 n) expected amortized time per operation using Las-Vegas randomization [6]. This should be compared with a lower bound of (log n= log log n) in the cell probe model [4, 8].
Reference: [4] <author> M. L. Fredman and M. R. Henzinger. </author> <title> Lower Bounds for Fully Dynamic Connectivity Problems in Graphs. </title> <note> To appear in Algorithmica. </note>
Reference-contexts: Recently, Henzinger and King gave a fully dynamic connectivity algorithm with O (log 3 n) expected amortized time per operation using Las-Vegas randomization [6]. This should be compared with a lower bound of (log n= log log n) in the cell probe model <ref> [4, 8] </ref>. In this papter, we prove a sampling lemma and use it to reduce the bound above to O (log 2 n). Henzinger and King show that their approach applies to several other fully dynamic graph problems, for which we also get improved running times.
Reference: [5] <author> G. N. Fredrickson. </author> <title> Data Structures for On-line Updating of Minimum Spanning Trees. </title> <journal> SIAM J. Comput. </journal> <volume> (14), </volume> <year> 1985, </year> <pages> 781-798. </pages>
Reference-contexts: In the literature, fully dynamic graph algorithms are compared using the cost per insert, delete, and query operation. The best deterministic algorithms for fully dynamic graph connectivity take time O ( p n) per update operation and O (1) per query <ref> [2, 3, 5] </ref>. Recently, Henzinger and King gave a fully dynamic connectivity algorithm with O (log 3 n) expected amortized time per operation using Las-Vegas randomization [6]. This should be compared with a lower bound of (log n= log log n) in the cell probe model [4, 8].
Reference: [6] <author> M. R. Henzinger and V. King. </author> <title> Randomized Dynamic Graph Algorithms with Poly-logarithmic Time per Operation. </title> <booktitle> Proc. 27th ACM Symp. on Theory of Computing, </booktitle> <year> 1995, </year> <pages> 519-527. </pages>
Reference-contexts: This problem arises in the currently fastest fully dynamic graph algorithms for various problems on graphs, such as connectivity, two-edge connectivity, k-weight minimum spanning tree, (1 + *)-approximate minimum spanning tree, and bipartiteness-testing <ref> [6] </ref>. The connection is made specific in Section 2. fl A preliminary version of this paper was presented at ICALP'96. y Digital System Research Center, 130 Lytton Ave, Palo Alto, CA (monika@pa.dec.com, http://www.research.digital.com/SRC/staff/monika). On leave from: Department of Computer Science, Cornell University, Ithaca, NY. <p> On leave from: Department of Computer Science, Cornell University, Ithaca, NY. This research was supported by an NSF CAREER Award, Grant No. CCR-9501712. z Department of Computer Science, University of Copenhagen, Universitetsparken 1, 2100 Kbh. O, Den-mark (mthorup@diku.dk, http://www.diku.dk/mthorup). 1 In <ref> [6] </ref>, Henzinger and King solve the problem by sampling O ( log jSj) elements from S, returning any element found from R. This gives an Monte-Carlo algorithm whose type (ii) answer is false with probability 1=jSj fi (1) . <p> We prove the sampling lemma in Section 3, in which we first prove a simpler lemma achieving an expected cost of O (log log jSj ) for case (i). This is already a substantial improvement over the O (log jSj ) obtained in <ref> [6] </ref>. We then bootstrap the technique, giving the desired cost of O (). 1.1 Applications The prime application of our sampling lemma is to speed up fully dynamic graph connectivity, which is the problem of maintaining a graph under edge insertions and deletions. <p> The best deterministic algorithms for fully dynamic graph connectivity take time O ( p n) per update operation and O (1) per query [2, 3, 5]. Recently, Henzinger and King gave a fully dynamic connectivity algorithm with O (log 3 n) expected amortized time per operation using Las-Vegas randomization <ref> [6] </ref>. This should be compared with a lower bound of (log n= log log n) in the cell probe model [4, 8]. In this papter, we prove a sampling lemma and use it to reduce the bound above to O (log 2 n). <p> the graph is bipartite, and * O (log 2 n) to test if whether two edges are cycle-equivalent. 2 Improved sampling in fully dynamic graph connec tivity Our results for fully dynamic graph algorithms are achieved by locally improving a certain sampling bottleneck in the approach by Henzinger and King <ref> [6] </ref>, henceforth referred to as the HK-approach. Rather than repeating their whole construction, we will confine ourselves to a self-contained description of this bottleneck, focussing on connectivity. Our technique for the bottleneck is of a general flavor and we expect it to be applicable in other contexts.
Reference: [7] <author> K. Mehlhorn. </author> <title> Data Structures and Algorithms 1: Sorting and Searching. </title> <booktitle> EATCS Monographs on Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference: [8] <author> P.B. Miltersen, S. Subramanian, J.S. Vitter, and R. Tamassia. </author> <title> Complexity models for incremental computation. </title> <journal> Theoretical Computer Science, </journal> <volume> 130, </volume> <year> 1994, </year> <pages> 203-236. 10 </pages>
Reference-contexts: Recently, Henzinger and King gave a fully dynamic connectivity algorithm with O (log 3 n) expected amortized time per operation using Las-Vegas randomization [6]. This should be compared with a lower bound of (log n= log log n) in the cell probe model <ref> [4, 8] </ref>. In this papter, we prove a sampling lemma and use it to reduce the bound above to O (log 2 n). Henzinger and King show that their approach applies to several other fully dynamic graph problems, for which we also get improved running times.
Reference: [9] <author> R.E. Tarjan and U. Vishkin. </author> <title> Finding biconnected components and computing tree functions in logarithmic parallel time. </title> <journal> SIAM J. Computing, </journal> <volume> 14(4): </volume> <pages> 862-874, </pages> <year> 1985. </year> <month> 11 </month>
References-found: 9

