URL: ftp://ftp.cs.washington.edu/tr/1993/10/UW-CSE-93-10-02.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/ladner/papers.html
Root-URL: 
Title: Complexity of Sub-Bus Mesh Computations  
Author: Anne Condon Richard E. Ladner Jordan Lampe Rakesh Sinha 
Note: MINIMUM in two dimensions is fi(log log p)  
Date: September 20, 1994  [21, 31].  
Address: Madison, WI 53706  Seattle, WA 98195  
Affiliation: Department of Computer Science University of Wisconsin  Department of Comp. Sci. and Eng. University of Washington  
Abstract: We investigate the time complexity of several fundamental problems on the sub-bus mesh parallel computer with p processors. The problems include computing the PARITY and MAJORITY of p bits, the SUM of p numbers of length O(log p) and the MINIMUM of p numbers. It is shown that in one dimension the time to compute any of these problems is fi(log p). In two dimensions the time to compute any of PARITY, MAJORITY, and SUM is fi( log p log log p ). It was previously shown that the time to compute fl This is a revision of University of Washington Technical Report No. 93-10-02. This paper will appear in SIAM Journal on Computing. Condon's research was supported by NSF, grant numbers CCR-9100886 and CCR-9257241. Ladner's and Lampe's research was supported by NSF, grant number CCR-9108314. Part of Ladner's research was done while visiting Victoria University of Wellington, New Zealand. Sinha's research was supported by NSF/DARPA grant number CCR-8907960 and NSF grant number CCR-8858799.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> An O(n log n) sorting network. </title> <booktitle> Proceedings of Fifteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 1-9, </pages> <year> 1983. </year> <month> 22 </month>
Reference-contexts: To see this, note that computing the OR of p bits requires (log p) time on a CREW PRAM [9], whereas the sub-bus mesh can compute OR in constant time. By contrast, p integers can be sorted in O (log p) time on an EREW PRAM with p processors <ref> [1, 7, 16] </ref>, but, by a simple bisection bandwidth argument, this task requires time (p ff ) on mesh computers [30]. 1.3 Organization of the Paper In section 2 we present our model of the sub-bus mesh computer.
Reference: [2] <author> A. Bar-Noy and D. Peleg. </author> <title> Square meshes are not always optimal. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 40, </volume> <pages> pp. 138-147, </pages> <year> 1991. </year>
Reference-contexts: The MPP of Goodyear and NASA is an example of a full-bus two-dimensional mesh computer [3]. Full-bus meshes are generally less powerful than sub-bus meshes. Both PARITY and MINIMUM require (p ff ) time for some ff &gt; 0 on full-bus meshes <ref> [2, 25] </ref>. Second, there is the reconfigurable mesh, which allows the topology of the mesh to be changed by the executing program [18]. Several prototype, but no commercial, reconfigurable mesh computers have been built. PARITY can be computed in constant time on the reconfigurable, two-dimensional mesh [18].
Reference: [3] <author> K.E. Batcher. </author> <title> Design of a massively parallel processor. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-29, pp.836-840, </volume> <year> 1980. </year>
Reference-contexts: First, there is the full-bus mesh where processors can broadcast vertically or horizontally, but on a vertical (horizontal) broadcast at most one processor per column (row) can be active. The MPP of Goodyear and NASA is an example of a full-bus two-dimensional mesh computer <ref> [3] </ref>. Full-bus meshes are generally less powerful than sub-bus meshes. Both PARITY and MINIMUM require (p ff ) time for some ff &gt; 0 on full-bus meshes [2, 25]. Second, there is the reconfigurable mesh, which allows the topology of the mesh to be changed by the executing program [18].
Reference: [4] <author> P. Beame and J. Hastad. </author> <title> Optimal bounds for decision problems on the CRCW PRAM. </title> <journal> Journal of the ACM, </journal> <volume> Vol. 36, </volume> <pages> pp. 643-670, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The lower bounds follow from the fact that a CRCW PRAM can simulate a sub-bus mesh computer to within a constant factor of the time and within a polynomial number of processors. Thus, the CRCW PRAM lower bounds on PARITY and MAJORITY <ref> [4] </ref> apply to the sub-bus mesh computer. The upper bounds follow from an algorithm for SUM, the sum of p numbers of length O (log p), which runs in time O ( log p log log p ). <p> We then apply lower bound results for PARITY on the PRAM model. We begin this section by describing the PRAM results. Then we describe our lower bound model and describe the simulation in detail. Beame and Hastad <ref> [4] </ref> considered lower bounds for the following "ideal" CRCW PRAM model. There are p (n) numbered processors which share c (n) numbered memory cells, where p (n) and c (n) are polynomially bounded. There is no bound on the possible contents of a memory cell. <p> This model is called the priority CRCW PRAM. Beame and Hastad have shown that the time to compute any of PARITY, MAJORITY, and SUM on the ideal CRCW PRAM is (log n= log log n) <ref> [4] </ref>. In our lower bound model of the two-dimensional sub-bus there are p processors, numbered 0; 1; : : : ; p 1, connected in a p p p mesh as in the two-dimensional upper bound model. Processor 0 is the front-end.
Reference: [5] <author> T. Blank. </author> <title> The MasPar MP-1 architecture. </title> <booktitle> Proceedings of COMPCON Spring 90 The Thirty-Fifth IEEE Computer Society International Conference, </booktitle> <pages> pp. 20-24, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Each active processor can broadcast on the bus to all processors up to the next active processor. Thus, all the intervening inactive processors receive the data that has been broadcast. The sub-bus mesh computer architecture has been implemented on the commercially available MasPar MP-1 <ref> [5] </ref>. Typically, there are p processors in a p p p two-dimensional array, where p power of two. We will also consider one-dimensional meshes. For each of the problems we will consider, we assume there are p inputs, distributed one per processor. <p> For some of these problems, such as 21 PARITY, MINIMUM and SUM, the running times on a sub-bus mesh computer match (to within constant factors) the running times on a general PRAM. Moreover, machines based on the sub-bus mesh architecture are commercially available <ref> [5] </ref>. For these reasons, we believe that the sub-bus mesh architecture deserves further study. Our algorithms for PARITY and SUM are probably not practical for any reasonable size p for two reasons.
Reference: [6] <author> G.E. Blelloch. </author> <title> Vector Models for Data-Parallel Computing. </title> <publisher> The MIT Press. </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference: [7] <author> R. Cole. </author> <title> Parallel merge sort. </title> <journal> SIAM Journal on Computing, </journal> <volume> vol. 17, </volume> <pages> pp. 770-785, </pages> <year> 1988. </year>
Reference-contexts: To see this, note that computing the OR of p bits requires (log p) time on a CREW PRAM [9], whereas the sub-bus mesh can compute OR in constant time. By contrast, p integers can be sorted in O (log p) time on an EREW PRAM with p processors <ref> [1, 7, 16] </ref>, but, by a simple bisection bandwidth argument, this task requires time (p ff ) on mesh computers [30]. 1.3 Organization of the Paper In section 2 we present our model of the sub-bus mesh computer.
Reference: [8] <author> S. A. Cook. </author> <title> A taxonomy of problems with fast parallel algorithms, </title> <journal> Information and Control, </journal> <volume> Vol. 64, </volume> <pages> pp. 2-22, </pages> <year> 1985. </year>
Reference-contexts: As mentioned earlier, the RAM instructions include the usual direct and indirect Boolean operations, arithmetic operations, shifts, and comparison. In addition, we permit any fixed finite set of RAM instructions for our processors, provided each instruction can be implemented in uniform NC <ref> [8, 28] </ref>, that is, each instruction can be built from log O (1) p hardware and runs in time log O (1) log p. The set of RAM operations is independent of p.
Reference: [9] <author> S. A. Cook, C. Dwork and R. Reischuk. </author> <title> Upper and lower time bounds for parallel random access machines without simultaneous writes, </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol 15, No. 1, </volume> <pages> pp. 87-97, </pages> <month> February </month> <year> 1986. </year>
Reference-contexts: The sub-bus model is also incomparable with the EREW (exclusive read, exclusive write) PRAM model. To see this, note that computing the OR of p bits requires (log p) time on a CREW PRAM <ref> [9] </ref>, whereas the sub-bus mesh can compute OR in constant time.
Reference: [10] <author> F. Fich, P. Radge, and A. Wigderson. </author> <title> Relations between concurrent write models of parallel computation. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol 17, </volume> <pages> pp. 606-627, </pages> <year> 1988. </year>
Reference-contexts: For example, the constant time OR algorithm and Valiant's MINIMUM algorithm can be implemented on the sub-bus mesh. By contrast, some CRCW PRAM algorithms, such as the constant time CRCW PRAM MINIMUM algorithm of Fich, Radge, and Wigderson <ref> [10] </ref>, appear to be impossible to implement on the sub-bus mesh. More generally, the CRCW PRAM is strictly more powerful than the sub-bus mesh regardless of the number of dimensions.
Reference: [11] <editor> F. E. Fich, F. Meyer auf der Heide, P. Ragde and A. </editor> <title> Wigderson. Lower bounds for parallel random access machines with unbounded shared memory. </title> <booktitle> Advances in Computing Research, </booktitle> <volume> Vol. 4, </volume> <pages> pp. 1-15, </pages> <year> 1987. </year>
Reference-contexts: From the work of Hao, MacKenzie and Stout [12], a lower bound of (log log p) is obtained for computing MINIMUM on a two-dimensional sub-bus mesh. Their proof is based on a PRAM simulation of the mesh model, and applies a result of Fich et al <ref> [11] </ref> in which an equivalent lower bound is proved for the CRCW PRAM. However, this proof requires that the inputs be very large.
Reference: [12] <author> E. Hao, P. D. MacKenzie and Q. F. Stout. </author> <title> Selection on the reconfigurable mesh. </title> <booktitle> Frontiers of Massively Parallel Computing, </booktitle> <pages> pp. 38-45, </pages> <year> 1992. </year>
Reference-contexts: MINIMUM has also been previously studied on the two-dimensional reconfigurable mesh, and the techniques used can be applied directly to show that MINIMUM can be computed in fi (log log p) time on the two-dimensional sub-bus mesh. From the work of Hao, MacKenzie and Stout <ref> [12] </ref>, a lower bound of (log log p) is obtained for computing MINIMUM on a two-dimensional sub-bus mesh.
Reference: [13] <author> W.D. Hillis and G.L. Steele, Jr. </author> <title> Data parallel algorithms. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 29, </volume> <pages> pp. 1170-1183, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: The two-dimensional bound of ( log p log log p ) for SUM on the CRCW PRAM follows from the lower bound on PARITY. 1 1.2 Related Results The mesh or array parallel computer architecture has been investigated for a number of years, with numerous articles on its many variants <ref> [13, 17, 18, 22, 21, 26, 29] </ref>.
Reference: [14] <author> J. Ja'Ja'. </author> <title> An Introduction to Parallel Algorithms. </title> <publisher> Addison Wesley, </publisher> <year> 1992. </year>
Reference-contexts: There are a number of variants of the PRAM depending on whether reads or writes to the same memory location can be done concurrently. The variant most closely related to the sub-bus mesh is the CRCW PRAM (concurrent read/concurrent write PRAM) (see <ref> [14] </ref> for an introduction to the PRAM model). In this 2 version more than one processor can read or write the same memory location at the same time. A simultaneous write can be resolved in a number of ways.
Reference: [15] <author> R.E. Ladner and M.J. Fischer. </author> <title> Parallel prefix computation. </title> <journal> Journal of the ACM, </journal> <volume> Vol. 27, </volume> <pages> pp. 831-838, </pages> <year> 1980. </year>
Reference: [16] <author> T. Leighton. </author> <title> Tight bounds on the complexity of parallel sorting. </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-34, </volume> <pages> pp. 344-354, </pages> <year> 1985. </year>
Reference-contexts: To see this, note that computing the OR of p bits requires (log p) time on a CREW PRAM [9], whereas the sub-bus mesh can compute OR in constant time. By contrast, p integers can be sorted in O (log p) time on an EREW PRAM with p processors <ref> [1, 7, 16] </ref>, but, by a simple bisection bandwidth argument, this task requires time (p ff ) on mesh computers [30]. 1.3 Organization of the Paper In section 2 we present our model of the sub-bus mesh computer.
Reference: [17] <author> T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: </title> <publisher> Arrays,Trees, Hy-percubes. Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1992. </year> <month> 23 </month>
Reference-contexts: The two-dimensional bound of ( log p log log p ) for SUM on the CRCW PRAM follows from the lower bound on PARITY. 1 1.2 Related Results The mesh or array parallel computer architecture has been investigated for a number of years, with numerous articles on its many variants <ref> [13, 17, 18, 22, 21, 26, 29] </ref>.
Reference: [18] <editor> H. Li and Q.F. Stout, Editors. </editor> <title> Reconfigurable Massively Parallel Computers. </title> <publisher> Prentice--Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: The two-dimensional bound of ( log p log log p ) for SUM on the CRCW PRAM follows from the lower bound on PARITY. 1 1.2 Related Results The mesh or array parallel computer architecture has been investigated for a number of years, with numerous articles on its many variants <ref> [13, 17, 18, 22, 21, 26, 29] </ref>. <p> Full-bus meshes are generally less powerful than sub-bus meshes. Both PARITY and MINIMUM require (p ff ) time for some ff &gt; 0 on full-bus meshes [2, 25]. Second, there is the reconfigurable mesh, which allows the topology of the mesh to be changed by the executing program <ref> [18] </ref>. Several prototype, but no commercial, reconfigurable mesh computers have been built. PARITY can be computed in constant time on the reconfigurable, two-dimensional mesh [18]. <p> Second, there is the reconfigurable mesh, which allows the topology of the mesh to be changed by the executing program <ref> [18] </ref>. Several prototype, but no commercial, reconfigurable mesh computers have been built. PARITY can be computed in constant time on the reconfigurable, two-dimensional mesh [18]. Thus, our results demonstrate that the sub-bus mesh computer architecture is strictly more powerful than the full-bus mesh computer architecture, but strictly less powerful than the reconfigurable mesh computer.
Reference: [19] <author> P. D. MacKenzie. </author> <title> A separation between reconfigurable mesh models. </title> <booktitle> Proceedings of the 7th International Parallel Processing Symposium, </booktitle> <pages> pp. 84-88, </pages> <year> 1993. </year>
Reference-contexts: Thus, our results demonstrate that the sub-bus mesh computer architecture is strictly more powerful than the full-bus mesh computer architecture, but strictly less powerful than the reconfigurable mesh computer. In other work on the PARITY function, MacKenzie <ref> [19] </ref> independently obtained a lower bound of (log p=k) for computing PARITY on a restricted p fi k reconfigurable mesh model, which is exactly our one-dimensional sub-bus mesh model for k = 1. However, he did not extend this to other symmetric functions.
Reference: [20] <author> Y. Matias and A. Schuster. </author> <title> On the power of the 2xn reconfigurable mesh. </title> <institution> Manuscript from ATT Bell Labs, </institution> <month> June </month> <year> 1993. </year>
Reference: [21] <author> R. Miller, V. K. Prasanna-Kumar, D. I. Reisis and Q. F. Stout. </author> <title> Parallel computations on reconfigurable meshes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 42, No. 6, </volume> <pages> pp. 678-692, </pages> <year> 1993. </year>
Reference-contexts: The two-dimensional bound of ( log p log log p ) for SUM on the CRCW PRAM follows from the lower bound on PARITY. 1 1.2 Related Results The mesh or array parallel computer architecture has been investigated for a number of years, with numerous articles on its many variants <ref> [13, 17, 18, 22, 21, 26, 29] </ref>. <p> Another lower bound of (log log p) for computing MINIMUM on the two-dimensional sub-bus mesh follows from the general lower bound for the parallel comparison model of Valiant [31] and applies to comparison-based algorithms. A matching upper bound is due to Miller et al <ref> [21] </ref>, and is basically an implementation of the parallel MINIMUM algorithm of Valiant [31]. The parallel random access machine (PRAM) is probably the most well studied theoretical model of parallel computation. <p> Previous work for the reconfigurable mesh shows that the time to compute MINIMUM on the two-dimensional mesh is fi (log log p). For completeness, we include the algorithm, adapted to the sub-bus model. Theorem 6.1 <ref> [21, 31] </ref> In the comparison model of a two-dimensional sub-bus mesh computer with p processors the time to compute MINIMUM is fi (log log p). Proof: Recall, that in the comparison model we assume the only operations allowed on input values are comparison, copy, and broadcast. <p> In the same paper [31], Valiant gave an algorithm for the minimum which runs in O (log log p) time. The Valiant algorithm can be realized on the reconfigurable mesh computer as shown by Miller et al <ref> [21] </ref>. In fact, their work also applies to the two-dimensional sub-bus mesh computer. In the Valiant algorithm, assume there are p processors where 19 p = 2 2 k for some k. With one parallel comparison the number of possible minima to consider is reduced to p=2.
Reference: [22] <author> R. Miller and Q. Stout. </author> <title> Mesh computer algorithms for computational geometry. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 38, </volume> <pages> pp. 321-340, </pages> <year> 1989. </year>
Reference-contexts: The two-dimensional bound of ( log p log log p ) for SUM on the CRCW PRAM follows from the lower bound on PARITY. 1 1.2 Related Results The mesh or array parallel computer architecture has been investigated for a number of years, with numerous articles on its many variants <ref> [13, 17, 18, 22, 21, 26, 29] </ref>.
Reference: [23] <author> K. Nakano. </author> <title> An efficient algorithm for summing up binary values on a reconfigurable mesh. Research Report N0. </title> <type> 93-003, </type> <institution> Advanced Research Laboratory, </institution> <address> Hatoyama, Saitama 350-03, Japan. </address>
Reference-contexts: However, he did not extend this to other symmetric functions. The SUM function has also been previously studied on the reconfigurable mesh. Nakano <ref> [23] </ref> and Nakano, Masuzawa and Tokura [24] developed algorithms for SUM on the reconfigurable mesh that also use Chinese remaindering. Their results do not apply directly to the sub-bus mesh architecture.
Reference: [24] <author> K. Nakano, T. Masuzawa and N. Tokura. </author> <title> A sub-logarithmic time sorting algorithm on a reconfigurable array. </title> <journal> IEICE Transactions, </journal> <volume> Vol. E74, No. 11, </volume> <pages> pp. 3894-3901, </pages> <year> 1991. </year>
Reference-contexts: However, he did not extend this to other symmetric functions. The SUM function has also been previously studied on the reconfigurable mesh. Nakano [23] and Nakano, Masuzawa and Tokura <ref> [24] </ref> developed algorithms for SUM on the reconfigurable mesh that also use Chinese remaindering. Their results do not apply directly to the sub-bus mesh architecture.
Reference: [25] <author> V.K. Prasanna Kumar and C.S. Raghavendra. </author> <title> Array processor with multiple broadcasting. </title> <journal> Parallel and Distributed Computing, </journal> <volume> Vol. 4, </volume> <pages> pp. 173-190, </pages> <year> 1987. </year>
Reference-contexts: The MPP of Goodyear and NASA is an example of a full-bus two-dimensional mesh computer [3]. Full-bus meshes are generally less powerful than sub-bus meshes. Both PARITY and MINIMUM require (p ff ) time for some ff &gt; 0 on full-bus meshes <ref> [2, 25] </ref>. Second, there is the reconfigurable mesh, which allows the topology of the mesh to be changed by the executing program [18]. Several prototype, but no commercial, reconfigurable mesh computers have been built. PARITY can be computed in constant time on the reconfigurable, two-dimensional mesh [18].
Reference: [26] <author> D. Reisis and V.K. Prasanna Kumar. </author> <title> VLSI arrays with reconfigurable buses. </title> <booktitle> Supercomputing, 1st International Conference, </booktitle> <address> Athens, Greece, </address> <month> June 8-12, </month> <year> 1987, </year> <booktitle> Proceedings. Lecture Notes in Computer Science, </booktitle> <volume> vol. 297, </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. 732-743, </pages> <year> 1988. </year>
Reference-contexts: Reisis and Prasanna Kumar appear to be the first to consider efficient algorithms for the sub-bus mesh architecture <ref> [26] </ref>. To our knowledge this is the first paper to prove extensive results on the power and limitations of the sub-bus computer architecture. 1.1 Results There are simple algorithms for computing the Boolean OR and AND in constant time on a one- or two-dimensional sub-bus mesh computer [26]. <p> sub-bus mesh architecture <ref> [26] </ref>. To our knowledge this is the first paper to prove extensive results on the power and limitations of the sub-bus computer architecture. 1.1 Results There are simple algorithms for computing the Boolean OR and AND in constant time on a one- or two-dimensional sub-bus mesh computer [26]. Two other natural Boolean functions are PARITY and MAJORITY. We show that PARITY and MAJORITY are computable in time fi (log p) on a one-dimensional sub-bus mesh. <p> The two-dimensional bound of ( log p log log p ) for SUM on the CRCW PRAM follows from the lower bound on PARITY. 1 1.2 Related Results The mesh or array parallel computer architecture has been investigated for a number of years, with numerous articles on its many variants <ref> [13, 17, 18, 22, 21, 26, 29] </ref>. <p> The sub-bus mesh architecture was first investigated by Reisis and Prasanna Kumar where they gave constant time algorithms for the OR of p bits and the MINIMUM of p p numbers (all on one row), and an O (log p) algorithm for combining p data items with an associative operator <ref> [26] </ref>. Two variants of the mesh computer are closely related to the sub-bus mesh. First, there is the full-bus mesh where processors can broadcast vertically or horizontally, but on a vertical (horizontal) broadcast at most one processor per column (row) can be active. <p> Both examples can be found in the paper by Reisis and Prasanna Kumar <ref> [26] </ref>. In our terminology if x is a plural variable then we indicate its value at processor i by x i or at processor (i; j) by x i;j . Our first program computes the OR in constant time. <p> the first row of the mesh. 3 One-Dimensional Bounds In this section we give precise upper and lower bounds on the parallel time to compute PARITY, MINIMUM, MAJORITY and SUM on the one-dimensional sub-bus mesh com puter. 3.1 Upper Bounds in One Dimension As observed by Reisis and Prasanna Kumar <ref> [26] </ref>, all our problems can be computed by a one-dimensional algorithm which works for any associative binary operator and runs in O (log p) time. Let be any binary associative operation. The value REDUCE (x) is x 0 x 1 ::: x p1 stored in processor 0. <p> PARITY and MAJORITY are easily computable in constant time from SUM. Thus we have: Theorem 3.1 <ref> [26] </ref> On a one-dimensional sub-bus mesh with p processors, PARITY, MAJORITY, SUM, and MINIMUM can be computed in time O (log p). 3.2 Lower Bounds in One Dimension Our lower bounds for the one-dimensional sub-bus mesh computer are based on the limited communication bandwidth of this architecture.
Reference: [27] <author> J.B. Rosser and L. Schoenfeld. </author> <title> Approximate formulas for some functions of prime numbers. </title> <journal> Illinois Journal of Mathematics, </journal> <volume> Vol. 6. </volume> <pages> pp. 64-74, </pages> <year> 1962. </year>
Reference-contexts: Proof: Think of the n fi tn array as t sub-arrays, each of size n fi n, one on top of the other. Let M be the product of all primes less than t. If t 41 then M 2 t <ref> [27, Corollary to Theorem 4, page 70] </ref>. Hence, if the sum of the input integers is less than 2 t then it is enough to compute the sum modulo M . We already know how to compute the sum modulo small primes.
Reference: [28] <author> W. L. Ruzzo, </author> <title> On uniform circuit complexity, </title> <journal> Journal on Computer and System Sciences, </journal> <volume> Vol. 22, </volume> <pages> pp. 365-383, </pages> <year> 1981. </year>
Reference-contexts: As mentioned earlier, the RAM instructions include the usual direct and indirect Boolean operations, arithmetic operations, shifts, and comparison. In addition, we permit any fixed finite set of RAM instructions for our processors, provided each instruction can be implemented in uniform NC <ref> [8, 28] </ref>, that is, each instruction can be built from log O (1) p hardware and runs in time log O (1) log p. The set of RAM operations is independent of p.
Reference: [29] <author> Q.F. Stout. </author> <title> Meshes with multiple buses. </title> <booktitle> 27th Annual IEEE Symposium on Foundations of Computer Science. </booktitle> <pages> pp. 264-273, </pages> <year> 1986. </year>
Reference-contexts: The two-dimensional bound of ( log p log log p ) for SUM on the CRCW PRAM follows from the lower bound on PARITY. 1 1.2 Related Results The mesh or array parallel computer architecture has been investigated for a number of years, with numerous articles on its many variants <ref> [13, 17, 18, 22, 21, 26, 29] </ref>.
Reference: [30] <author> C. Thompson. </author> <title> Area-time complexity for VLSI. </title> <booktitle> Proceedings of Eleventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 81-88, </pages> <year> 1979. </year>
Reference-contexts: By contrast, p integers can be sorted in O (log p) time on an EREW PRAM with p processors [1, 7, 16], but, by a simple bisection bandwidth argument, this task requires time (p ff ) on mesh computers <ref> [30] </ref>. 1.3 Organization of the Paper In section 2 we present our model of the sub-bus mesh computer. In section 3 we prove our upper and lower bounds for the one-dimensional sub-bus mesh computer. In section 4 we give two-dimensional algorithms for PARITY and SUM.
Reference: [31] <author> L. Valiant. </author> <title> Parallelism in comparison problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 4, </volume> <pages> pp. 348-355, </pages> <year> 1975. </year>
Reference-contexts: However, this proof requires that the inputs be very large. Another lower bound of (log log p) for computing MINIMUM on the two-dimensional sub-bus mesh follows from the general lower bound for the parallel comparison model of Valiant <ref> [31] </ref> and applies to comparison-based algorithms. A matching upper bound is due to Miller et al [21], and is basically an implementation of the parallel MINIMUM algorithm of Valiant [31]. The parallel random access machine (PRAM) is probably the most well studied theoretical model of parallel computation. <p> for computing MINIMUM on the two-dimensional sub-bus mesh follows from the general lower bound for the parallel comparison model of Valiant <ref> [31] </ref> and applies to comparison-based algorithms. A matching upper bound is due to Miller et al [21], and is basically an implementation of the parallel MINIMUM algorithm of Valiant [31]. The parallel random access machine (PRAM) is probably the most well studied theoretical model of parallel computation. There are a number of variants of the PRAM depending on whether reads or writes to the same memory location can be done concurrently. <p> Previous work for the reconfigurable mesh shows that the time to compute MINIMUM on the two-dimensional mesh is fi (log log p). For completeness, we include the algorithm, adapted to the sub-bus model. Theorem 6.1 <ref> [21, 31] </ref> In the comparison model of a two-dimensional sub-bus mesh computer with p processors the time to compute MINIMUM is fi (log log p). Proof: Recall, that in the comparison model we assume the only operations allowed on input values are comparison, copy, and broadcast. <p> Proof: Recall, that in the comparison model we assume the only operations allowed on input values are comparison, copy, and broadcast. With this restriction any sub-bus mesh algorithm for MINIMUM can be thought of as a "parallel comparison tree" as defined by Valiant <ref> [31] </ref>. In this model, any p comparisons of arbitrary input values can be made in one step. Depending on the outcome of these comparisons one of 2 p branches to the next step can be made. <p> Depending on the outcome of these comparisons one of 2 p branches to the next step can be made. Valiant showed that in the parallel comparison tree model with p processors, (log log p) steps are necessary to determine the minimum of p inputs. In the same paper <ref> [31] </ref>, Valiant gave an algorithm for the minimum which runs in O (log log p) time. The Valiant algorithm can be realized on the reconfigurable mesh computer as shown by Miller et al [21]. In fact, their work also applies to the two-dimensional sub-bus mesh computer.
References-found: 31

