URL: http://www.cs.colorado.edu/~sbrandt/papers/TKDE.ps.Z
Refering-URL: http://www.cs.colorado.edu/~sbrandt/personal/Publications.html
Root-URL: http://www.cs.colorado.edu
Title: Dynamically Negotiated Resource Management for Data Intensive Application Suites  
Author: Gary Nutt Scott Brandt, Adam Griff, and Sam Siewert Marty Humphrey Toby Berk 
Note: Authors Nutt, Brandt, and Griff were partially supported by NSF Grant No. IRI-9307619  
Address: Boulder, CO 80309-0430  Denver, CO 80217  Miami, FL 33159  
Affiliation: Department of Computer Science, CB 430 University of Colorado  Department of Computer Science and Engineering University of Colorado at Denver  School of Computer Science Florida International University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Neil C. Audsley, Alan Burns, Mike F. Richardson, and Andy J. Wellings. </author> <title> Hard real-time scheduling: The deadline monotonic approach. </title> <booktitle> In 8th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: min , and optimal, R opt , time for output response * Release period (expected minimum interarrival time for aperiodics) and I/O periods 4.2 EPA-DM Approach to Thread Scheduling The approach for scheduling RT-PCIP thread execution is based on a branch of hard real-time scheduling theory called Deadline Monotonic (DM) <ref> [1] </ref>. DM consists of fixed-priority scheduling in which threads are periodic in nature and are assigned priorities in inverse relation to their deadlines. For example, the thread with the smallest deadline is assigned the highest priority.
Reference: [2] <author> Cristina Aurrecoechea, Andrew Campbell, and Linda Hauw. </author> <title> A survey of QoS architectures. </title> <booktitle> In Proceedings of the 4th IFIP International Workshop on Quality of Service, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Applications are able to trade off individual performance for overall user satisfaction, cooperating to maximize user satisfaction by selectively reducing or increasing resource consumption as available resources and requirements change. A Quality of Service (QoS) <ref> [2] </ref> approach can be applied to scheduling to provide operating system support for soft real-time application execution.
Reference: [3] <author> Brian N. Bershad, Stefan Savage, Przemyslaw Pardyak, Emin Gun Sirer, Marc E. Fiuczynski, David Becker, Craig Chambers, and Susan Eggers. </author> <title> Extensibility, safety and performance in the spin operating system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267284, </pages> <year> 1995. </year>
Reference-contexts: The RT-PCIP architecture uses existing techniques for creating modules to be embedded in kernel space as extensions of device drivers (c.f. <ref> [3, 7] </ref>). Each device has an interface module that can be connected to an arbitrary pipe-stage filter; a pipeline is dynamically configured by inserting filters between a source and sink device interface.
Reference: [4] <author> Scott Brandt, Gary Nutt, Toby Berk, and Marty Humphrey. </author> <title> Soft real-time application execution with dyanamic quality of service assurance. </title> <booktitle> In Sixth IEEE International Workshop on Quality of Service, </booktitle> <pages> pages 154163, </pages> <month> May </month> <year> 1998. </year>
Reference-contexts: Four DQM decision policies demonstrate the range possibilities inherent in this model. In <ref> [4] </ref> the DQM is extended to support more extensive use of execution levels. 6 Summary and Conclusion Next-generation multimedia applications require the timely delivery of complex data across and within nodes in dynamic computing environments.
Reference: [5] <author> A. Burns. </author> <title> Scheduling hard real-time systems: A review. </title> <journal> Software Engineering Journal, </journal> <month> May </month> <year> 1991. </year>
Reference-contexts: In addition, the concept of EPA-DM thread scheduling for pipeline stages is based on a definition of soft and termination deadlines in terms of utility and potential damage to the system controlled by the application (see Figure 4 and <ref> [5] </ref>). Figure 4 shows response time utility and damage in relation to soft and termination deadlines as well as early responses. The EPA signals the controlling application when either deadline is missed, and specifically will abort any thread not completed by its termination deadline.
Reference: [6] <author> Geoff Coulson, Andrew Campbell, Philippe Robin, Gordon Blair, Michael Papathomas, and David Hutchinson. </author> <title> The design of a QoS controlled ATM based communication system. IEEE JSAC Special Issue on ATM Local Area Networks, </title> <year> 1994. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> Several studies have shown how to embed application-specific code in a kernel so that it can perform operations specific to the data stream (e.g., see <ref> [6, 7, 9] </ref>). However, these approaches do not allow the application to influence the way resources are allocated to the components to address application-specific tradeoffs.
Reference: [7] <author> Kevin Fall and Joseph Pasquale. </author> <title> Exploiting in-kernel data paths to improve I/O throughput and CPU availability. </title> <booktitle> In Proceedings of the Winter 1993 USENIX Conference, </booktitle> <pages> pages 327333, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> Several studies have shown how to embed application-specific code in a kernel so that it can perform operations specific to the data stream (e.g., see <ref> [6, 7, 9] </ref>). However, these approaches do not allow the application to influence the way resources are allocated to the components to address application-specific tradeoffs. <p> The RT-PCIP architecture uses existing techniques for creating modules to be embedded in kernel space as extensions of device drivers (c.f. <ref> [3, 7] </ref>). Each device has an interface module that can be connected to an arbitrary pipe-stage filter; a pipeline is dynamically configured by inserting filters between a source and sink device interface.
Reference: [8] <author> Changpeng Fan. </author> <title> Evalutions of soft real-time handling methods in a soft real-time framework. </title> <booktitle> In Proceedings of the 3rd International Conference on Multimedia Modeling, </booktitle> <address> Toulous, France, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> These new operating systems interfaces allow a process to either (1) negotiate with the operating system for a specific amount of resources as in RT Mach [17] and Rialto [14]; (2) specify a range of resource allocations as in MMOSS <ref> [8] </ref>; or (3) specify a measure of application importance that can be used to compute a fair resource allocation as in SMART [19]. These systems all provide a mechanism that can be used to reduce the resource allotment granted to the running applications.
Reference: [9] <author> Ramesh Govindan and David P. Anderson. </author> <title> Scheduling and IPC mechanisms for continuous media. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 6880, </pages> <year> 1991. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> Several studies have shown how to embed application-specific code in a kernel so that it can perform operations specific to the data stream (e.g., see <ref> [6, 7, 9] </ref>). However, these approaches do not allow the application to influence the way resources are allocated to the components to address application-specific tradeoffs.
Reference: [10] <author> Adam Jonathan Griff and Gary J. Nutt. </author> <title> Tailorable location policies for dis-tributed object systems, </title> <month> March </month> <year> 1998. </year> <note> Submitted for publication. Available at http://www.cs.colorado.edu/ nutt/Home.html. </note>
Reference-contexts: Object management policies are crucial to the overall data movement performance. The Gryphon distributed object system provides a means by which applications can influence the system's object placement, caching, and consistency policies <ref> [10] </ref>. Gryphon uses execution levels to tradeoff shared object consistency versus network bandwidth. <p> caching 5 Location Best location App directed caching App directed caching 6-N Location Best location Caching App directed caching Different algorithms Table 3: Execution Levels for Scenario C 3.2 Performance Analysis To analyze the performance of a Gryphon system implementation, models based on the scenarios (and others not discussed here <ref> [10] </ref>) were used to characterize traffic patterns resulting from different object managers. In the VPR, object state changes when the object moves (it may also change due to other behaviors, though this simplification is sufficient for this analysis). <p> This work illustrates how object policies can be cast as execution levels to support the principles, and also shows the relative performance at the different levels. Further experiments and results are reported in <ref> [10] </ref>. 4 In-Kernel Pipeline Module Thread Control This aspect of the work focuses on support for continuous media flow between devices. Several studies have shown how to embed application-specific code in a kernel so that it can perform operations specific to the data stream (e.g., see [6, 7, 9]).
Reference: [11] <author> Marty Humphrey, Toby Berk, Scott Brandt, and Gary Nutt. </author> <title> Dynamic quality of service resource management for multimedia applications on general purpose operating systems. </title> <booktitle> In 1997 IEEE Workshop on Middleware for Distributed Real-Time Systems and Services, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: The table shows frames per second generated and CPU time used as a percentage of the highest level. The OpenGL Performance Characterization Organization [24] has similar performance measurements showing applications that exhibit 10 different execution levels with CPU requirements varying by as much as a factor of 10. See <ref> [11] </ref> for further justification for using execution levels in applications. Execution levels define a total order over a resource vector for all system resource types. While this is the underlying theory for the approach, none of the projects described in this paper currently address more than one resource type.
Reference: [12] <author> E. Douglas Jensen, C. Douglass Locke, and Hideyuki Toduda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 112122. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> As a result, a second option was implemented that restricts the change in level to at most 1. This policy is similar to the value-based approach proposed for the Alpha kernel <ref> [12] </ref>. Hybrid. This policy uses Optimal to specify the initial QoS allocations, and then uses different algorithms to decide which levels to modify dynamically as resource availability changes.
Reference: [13] <author> M. B. Jones, P. Leach, R. Draves, and J. Barbera III. </author> <title> Support for user-centric modular real-time resource management in the Rialto operating system. </title> <booktitle> In Proceedings of the NOSSDAV'95, </booktitle> <year> 1995. </year>
Reference-contexts: Resource management policies that support such applications are sometimes called user-centric <ref> [13] </ref>. These types of policies stress that when the system cannot satisfy all of the resource requests of all running processes, the resources should be allocated to best satisfy the desires of the user.
Reference: [14] <author> Michael B. Jones, Daniela Rosu, and Marcel-Catalin Rosu. </author> <title> CPU reservations and time constraints: Efficient, predictable scheduling of independent activities. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating System Principles, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> The additional requirement on the application is to provide execution time estimates with a range and a confidence; this is only a slightly more complex approach than is described in the use of Rialto <ref> [14] </ref>. <p> Several operating systems designers have created designs and interfaces to support some form of soft real-time operation. These new operating systems interfaces allow a process to either (1) negotiate with the operating system for a specific amount of resources as in RT Mach [17] and Rialto <ref> [14] </ref>; (2) specify a range of resource allocations as in MMOSS [8]; or (3) specify a measure of application importance that can be used to compute a fair resource allocation as in SMART [19].
Reference: [15] <author> R. Kordale, M. Ahamad, and M. Devarakonda. </author> <title> Object caching in a CORBA compliant system. </title> <journal> USENIX Computing Systems Journal, </journal> <volume> 9(4), </volume> <year> 1996. </year>
Reference-contexts: For object oriented systems, it is natural to study distributed object managers as a means of addressing network bandwidth performance (e.g., see <ref> [15, 16, 18, 26] </ref>). The Gryphon is an enhancement to a conventional distributed object manager (such as a CORBA ORB). The purpose of the Gryphon is to support dynamic negotiation of object placement policies according to the needs of the application and the state of the system resources.
Reference: [16] <author> Silvano Maffeis and Douglas C. Schmidt. </author> <title> Constructing reliable distibuted communication systems with corba. </title> <journal> IEEE Communications, </journal> <volume> 14(2), </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: For object oriented systems, it is natural to study distributed object managers as a means of addressing network bandwidth performance (e.g., see <ref> [15, 16, 18, 26] </ref>). The Gryphon is an enhancement to a conventional distributed object manager (such as a CORBA ORB). The purpose of the Gryphon is to support dynamic negotiation of object placement policies according to the needs of the application and the state of the system resources.
Reference: [17] <author> Cliff Mercer, Stephan Savage, and Hideyuki Tokuda. </author> <title> Processor capacity reserves: Operating system support for multimedia applications. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 9099, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> Several operating systems designers have created designs and interfaces to support some form of soft real-time operation. These new operating systems interfaces allow a process to either (1) negotiate with the operating system for a specific amount of resources as in RT Mach <ref> [17] </ref> and Rialto [14]; (2) specify a range of resource allocations as in MMOSS [8]; or (3) specify a measure of application importance that can be used to compute a fair resource allocation as in SMART [19]. <p> In the extreme, the applications may be forced to dynamically adapt to a strategy in which the resource allocation is less than that required for average-case execution. Mercer, et al. suggest that a dynamic resource manager could be created to deal with situation of processor overload <ref> [17] </ref>. In Rialto, the researchers have used the mechanism to develop an application repertoire (though there was apparently no attempt to define a general model for its use).
Reference: [18] <author> Michael N. Nelson, Mark Linton, and Susan Owicki. </author> <title> A highly available, scalable ITV system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 5467, </pages> <year> 1995. </year>
Reference-contexts: For object oriented systems, it is natural to study distributed object managers as a means of addressing network bandwidth performance (e.g., see <ref> [15, 16, 18, 26] </ref>). The Gryphon is an enhancement to a conventional distributed object manager (such as a CORBA ORB). The purpose of the Gryphon is to support dynamic negotiation of object placement policies according to the needs of the application and the state of the system resources.
Reference: [19] <author> Jason Nieh and Monica S. Lam. </author> <title> The design, implementation and evaluation of SMART: A sched-uler for multimedia applications. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1997. </year> <month> 38 </month>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> with the operating system for a specific amount of resources as in RT Mach [17] and Rialto [14]; (2) specify a range of resource allocations as in MMOSS [8]; or (3) specify a measure of application importance that can be used to compute a fair resource allocation as in SMART <ref> [19] </ref>. These systems all provide a mechanism that can be used to reduce the resource allotment granted to the running applications. Even though the system is able to allocate resources more aggressively, the hypothesis is that soft real-time applications will still perform acceptably.
Reference: [20] <author> Brian D. Noble, M. Sayanarayanan, Dushyanth Narayanan, James Eric Tilton, Jason Flinn, and Kevin R. Walker. </author> <title> Agile applications-aware adaptation for mobility. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: This requires that the nature of the application-system programming interface be enhanced to address the principles. Others have also recognized that this kind of shift in the interface could substantially improve overall system performance for single-application, multiprogrammed domains e.g., see <ref> [20, 23, 25] </ref>. Principle 3 suggests that there is a framework in which applications and resource managers can pose resource allocation scenarios to one another. This can be accomplished by providing a language for interaction, then ensuring that the two parties are prepared to interact with one another.
Reference: [21] <author> Gary Nutt, Toby Berk, Scott Brandt, Marty Humphrey, and Sam Siewert. </author> <title> Resource management for a virtual planning room. </title> <booktitle> In Proceedings of the Third International Workshop on Multimedia Information Systems, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: Therefore, the effort was focused on defining and experimenting with ways for the system to provide more effective support for these applications (as originally reported in the conference paper from which this paper is derived <ref> [21] </ref>). There are two primary contributions in this paper. The first is the identification of a set of three principles to guide the development of soft real-time applications, along with the explanation of a mechanism execution levels to implement the three principles.
Reference: [22] <author> Gary J. Nutt, Joe Antell, Scott Brandt, Chris Gantz, Adam Griff, and Jim Mankovich. </author> <title> Software support for a virtual planning room. </title> <type> Technical Report CU-CS-800-95, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Based on this information, the relative importance of the units can be changed dynamically to reflect the best interests of the users. As a representative of the target class of applications, we built a prototype virtual planning room (VPR) <ref> [22] </ref>. The VPR is a multiperson DVE supporting free-form communication in a manner similar to electronic meeting rooms and other distributed virtual environments. A VPR world is a collection of objects, with VRML representations and behaviors of varying complexity.
Reference: [23] <author> Shuichi Oikawa and Ragunathan Rajkumar. </author> <title> A resource centric approach to multimedia operating systems. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium Workshop on Resource Allocation Problems in Multimedia Systems. IEEE, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> This requires that the nature of the application-system programming interface be enhanced to address the principles. Others have also recognized that this kind of shift in the interface could substantially improve overall system performance for single-application, multiprogrammed domains e.g., see <ref> [20, 23, 25] </ref>. Principle 3 suggests that there is a framework in which applications and resource managers can pose resource allocation scenarios to one another. This can be accomplished by providing a language for interaction, then ensuring that the two parties are prepared to interact with one another.
Reference: [24] <institution> OpenGL performance benchmarks. </institution> <note> WWW page at http://www.specbench.org/gpc/opc.static, 1997. </note>
Reference-contexts: The table shows frames per second generated and CPU time used as a percentage of the highest level. The OpenGL Performance Characterization Organization <ref> [24] </ref> has similar performance measurements showing applications that exhibit 10 different execution levels with CPU requirements varying by as much as a factor of 10. See [11] for further justification for using execution levels in applications.
Reference: [25] <author> Ragunathan Rajkumar, Chen Lee, John Leboczky, and Dan Siewiorek. </author> <title> A resource allocation model for QoS management. </title> <booktitle> In Proceedings of the 1997 IEEE Real-Time Systems and Services Symposium, </booktitle> <year> 1997. </year>
Reference-contexts: Section 5 explains how the DQM mechanism uses execution levels, then discusses several aspects of its behavior. Section 6 is the summary and conclusion. 4 2 Design Principles Various researchers have addressed different aspects of soft real-time support (e.g., see <ref> [6, 7, 8, 9, 12, 14, 17, 19, 23, 25] </ref>). <p> This requires that the nature of the application-system programming interface be enhanced to address the principles. Others have also recognized that this kind of shift in the interface could substantially improve overall system performance for single-application, multiprogrammed domains e.g., see <ref> [20, 23, 25] </ref>. Principle 3 suggests that there is a framework in which applications and resource managers can pose resource allocation scenarios to one another. This can be accomplished by providing a language for interaction, then ensuring that the two parties are prepared to interact with one another.
Reference: [26] <author> M. Van Steen, P. Homburg, </author> <title> and A.S. Tanenbaum. The architectural design of globe: A wide-area distributed system, </title> <booktitle> 1997. </booktitle> <pages> 39 </pages>
Reference-contexts: For object oriented systems, it is natural to study distributed object managers as a means of addressing network bandwidth performance (e.g., see <ref> [15, 16, 18, 26] </ref>). The Gryphon is an enhancement to a conventional distributed object manager (such as a CORBA ORB). The purpose of the Gryphon is to support dynamic negotiation of object placement policies according to the needs of the application and the state of the system resources.
References-found: 26

