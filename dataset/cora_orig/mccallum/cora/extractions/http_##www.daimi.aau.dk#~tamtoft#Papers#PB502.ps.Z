URL: http://www.daimi.aau.dk/~tamtoft/Papers/PB502.ps.Z
Refering-URL: http://www.daimi.aau.dk/~tamtoft/papers.html
Root-URL: http://www.daimi.aau.dk
Email: e-mail: -tamtoft,fnielson,hrnielson,jammann-@daimi.aau.dk  
Title: Polymorphic Subtyping for Eoeect Analysis: the Semantics  
Author: T.Amtoft F.Nielson H.R.Nielson J.Ammann 
Date: April 17, 1996  
Address: Denmark  
Affiliation: Computer Science Department, Aarhus University,  
Abstract: We study an annotated type and eoeect system that integrates let-poly-morphism, eoeects, and subtyping into an annotated type and eoeect system for a fragment of Concurrent ML. First a small step operational semantics is deoned for Concurrent ML and next the annotated type and eoeect system is proved semantically sound. This provides insights into the rule for generalisation in the annotated type and eoeect system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.Felleisen, D.P.Friedman: </author> <title> Control Operators, the SECD-Machine, and the -calculus. Formal Descriptions of Programming Concepts III, </title> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: This is highlighted in the present paper. First we deone a small step operational semantics [4] for Concurrent ML. It employs one system for the sequential 1 components and another for the concurrent components and as in [5, 2] we use evaluation contexts <ref> [1] </ref>. Next we extend the repertoire of techniques [3] for nor-malising and manipulating the inference trees of the annotated type and eoeect system.
Reference: [2] <author> H.R. Nielson and F. Nielson. </author> <title> Higher-order Concurrent Programs with Finite Communication Topology. </title> <booktitle> In Proc. POPL'94, </booktitle> <pages> pages 8497. </pages> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference-contexts: This is highlighted in the present paper. First we deone a small step operational semantics [4] for Concurrent ML. It employs one system for the sequential 1 components and another for the concurrent components and as in <ref> [5, 2] </ref> we use evaluation contexts [1]. Next we extend the repertoire of techniques [3] for nor-malising and manipulating the inference trees of the annotated type and eoeect system.
Reference: [3] <author> H.R.Nielson, F.Nielson, T.Amtoft: </author> <title> Polymorphic Subtypes for Eoeect Analysis: the Integration, </title> <year> 1996. </year>
Reference-contexts: 1 Introduction In a recent paper <ref> [3] </ref> we developed an annotated type and eoeect system for a fragment of Concurrent ML. This system allowed the integration of ML-style polymorphism (the let-construct), subtyping (with the usual contravariant ordering for function space), and eoeects (for the set of idangerous variablesj). <p> This system allowed the integration of ML-style polymorphism (the let-construct), subtyping (with the usual contravariant ordering for function space), and eoeects (for the set of idangerous variablesj). One key idea in the design of the annotated type and eoeect system was the following <ref> [3] </ref>: * Carefully taking eoeects into account when deciding the set of variables over which to generalise in the rule for let in the inference system; this involves taking upwards closure with respect to a constraint set and is essential for maintaining semantic soundness and a number of substitution properties. <p> First we deone a small step operational semantics [4] for Concurrent ML. It employs one system for the sequential 1 components and another for the concurrent components and as in [5, 2] we use evaluation contexts [1]. Next we extend the repertoire of techniques <ref> [3] </ref> for nor-malising and manipulating the inference trees of the annotated type and eoeect system. Finally, we show that the system is indeed semantically sound with respect to the operational semantics. 2 Inference System and Semantics We orst brieAEy recapitulate the inference system presented in [3]. <p> extend the repertoire of techniques <ref> [3] </ref> for nor-malising and manipulating the inference trees of the annotated type and eoeect system. Finally, we show that the system is indeed semantically sound with respect to the operational semantics. 2 Inference System and Semantics We orst brieAEy recapitulate the inference system presented in [3]. <p> g 1 g 2 in C 0 and we say that the type scheme 8 (~ff ~ fi : C 0 ): t 0 is solvable from C by S 0 if Dom (S 0 ) f~ff ~ fig and if C ` S 0 C 0 . 1 Following <ref> [3] </ref> we use g to stand for t or b and we use fl to stand for ff or fi and we use oe to stand for t or ts. 3 Ordering on behaviours (axiom) C ` b 1 b 2 if (b 1 b 2 ) 2 C (reAE) C <p> & b if 8 (~ff ~ fi : C 0 ): t 0 is both well-formed, solvable from C, and satisoes f~ff ~ fig " FV (C; A; b) = ; 5 2.1 Properties of the Inference System In this paper we shall use a number of technical results from <ref> [3] </ref>; to be self-contained we repeat their statements here. Fact 2.2 Suppose C [ C 0 ` fl 1 fl 2 with fl 1 =2 FV (C). Then C 0 ` fl 1 fl 2 . <p> Fact 2.8 Let x be an identioer not occurring in e and let t be an arbitrary type. If C; A ` e : oe & b then C; A [x : t] ` e : oe & b (and has the same shape). Recall from <ref> [3] </ref> that an inference tree is contraint-saturated whenever all occurrences of the rules (app), (let), and (if) have the same constraints in their premises. <p> the rule (ins) is only allowed immediately after a (con) or (id), the rule (gen) is only allowed immediately before a let (and only in the left branch), and the rule (sub) is never allowed after a (gen) or (sub) and is required after all other rules; we refer to <ref> [3] </ref> for the precise deonition. Fact 2.9 Enforcing Constraint-Saturation Given an inference tree for C; A ` e : oe & b there exists a constraint-saturated inference tree C; A ` c e : oe & b (that has the same shape). <p> when communicated. (It is possible for the sender to think that an even larger type was communicated, but this causes no harm.) 25 4 Conclusion We have given a formal justiocation of the semantic soundness of a previously developed annotated type and eoeect system that integrates polymorphism, sub-typing and eoeects <ref> [3] </ref>. Although the development was performed for a fragment of Concurrent ML we believe it equally possible for Standard ML with references.
Reference: [4] <author> G.D.Plotkin: </author> <title> A Structural Approach to Operational Semantics, </title> <type> Report DAIMI FN-19, </type> <institution> Aarhus University, Denmark, </institution> <year> 1981. </year>
Reference-contexts: This is highlighted in the present paper. First we deone a small step operational semantics <ref> [4] </ref> for Concurrent ML. It employs one system for the sequential 1 components and another for the concurrent components and as in [5, 2] we use evaluation contexts [1].
Reference: [5] <author> J. H. Reppy. </author> <title> Concurrent ML: Design, Application and Semantics. </title> <booktitle> In Proc. Functional Programming, Concurrency, Simulation and Automated Reasoning, </booktitle> <pages> pages 165198. </pages> <address> SLNCS 693, </address> <year> 1993. </year> <month> 26 </month>
Reference-contexts: This is highlighted in the present paper. First we deone a small step operational semantics [4] for Concurrent ML. It employs one system for the sequential 1 components and another for the concurrent components and as in <ref> [5, 2] </ref> we use evaluation contexts [1]. Next we extend the repertoire of techniques [3] for nor-malising and manipulating the inference trees of the annotated type and eoeect system.
References-found: 5

