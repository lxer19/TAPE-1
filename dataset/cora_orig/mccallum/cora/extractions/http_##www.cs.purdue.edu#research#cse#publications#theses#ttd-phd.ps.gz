URL: http://www.cs.purdue.edu/research/cse/publications/theses/ttd-phd.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/ttd/resume.html
Root-URL: http://www.cs.purdue.edu
Title: AN AGENT-BASED APPROACH TO BUILDING MULTIDISCIPLINARY PROBLEM SOLVING ENVIRONMENTS  
Degree: A Thesis Submitted to the Faculty of Purdue University by Tzvetan Todorov Drashansky In Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy  
Date: December 1996  
Abstract-found: 0
Intro-found: 1
Reference: <institution> 120 BIBLIOGRAPHY </institution>
Reference: [AAA95] <editor> AAAI. </editor> <booktitle> Proc. First Intl. Conf. on Multiagent Systems, </booktitle> <address> San Francisco, California, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: There are some general principles that help the systems to cope with this uncertainty <ref> [OJ95, AAA95, Les95] </ref> that include: * design goals to produce the solution with minimal use of communication and computational resources | i.e., achieving an "acceptable" answer with the avail able amount of resources; * incremental resolution of uncertainty through negotiation; * reasonable access to resource information and quality of service information;
Reference: [AB94] <author> V. Anupam and C. Bajaj. Shastra: </author> <title> Multimedia Collaborative Design Environment. </title> <booktitle> IEEE Multimedia, </booktitle> <pages> pages 39-49, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: Sullivan has applied his method to the design of a system for planning radiation treatments for cancer patients. 12 The importance of the computer-aided user collaboration and cooperation (commonly called CACW | computer-aided collaborative work) has led to the development of environments like Shastra <ref> [AB94] </ref> which is a distributed, extensible environment for multimedia collaborative design. Through Shastra, multiple users distributed over heterogeneous platforms can create, share, manipulate, and visualize complex 3D geometric designs. Shastra contains many interacting tools and software for communication and collaboration in real time between the participating users.
Reference: [AD96] <author> C. Arias and B. Daltrini. </author> <title> A Multi-Agent Environment for User Interface Design. </title> <booktitle> In Proc. EUROMICRO'96, </booktitle> <pages> pages 242-247, </pages> <address> Los Alamitos, California, </address> <month> September </month> <year> 1996. </year> <journal> IEEE, IEEE Comp. Soc. </journal> <note> Press. </note>
Reference-contexts: An effort to integrate software of multidisciplinary nature into a single system whose goals are similar to the goals of our MPSEs is described in <ref> [AD96] </ref>. The problem domain of this project is designing user interfaces. The resulting environment assists developers with designing user interface templates and is constructed as a multi-agent system, which allows additional incorporation of tools from different disciplines as new agents are added. <p> others. 2.2.3 Multiagent Systems There are many agent-based systems developed [WJ95, Sho93, Vet al.94, SH93] for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design <ref> [AD96] </ref>, and to robot control [OAI + 94], which demonstrate the capabilities of the agent technology. An important aspect of these systems is their modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [Ago90] <author> V. I. Agoshkov. </author> <title> Poincare-Steklov's Operators and Domain Decomposition Methods in Finite Dimensional Spaces. </title> <editor> In R. Glowinski, G. Golub, G. Meurant, and J. Periaux, editors, </editor> <title> Domain Decomposition Methods for Partial Differential Equations, </title> <address> pages 73-112. </address> <publisher> SIAM, </publisher> <year> 1990. </year>
Reference-contexts: Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the solution) [Lai92]; * Steklov-Poincare operator method (alternate Dirichlet on the PDEs and Neu-mann on dual PDEs originated from Steklov-Poincare operator) <ref> [LTDRV91, Ago90, Nat95] </ref>. The details of their derivations or analysis are not discussed here. We now formulate the interface relaxation technique mathematically as follows.
Reference: [AWYe93] <editor> G. Agha, P. Wegner, and A. Yonezawa (eds). </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: It provides services to such applications through relocatable dynamic objects and remote procedure calls. 2.2 Agent-Based Computing and Multiagent Systems The trend of increased abstraction, encapsulation, and modularization in software technology has brought in the recent years the concept of an agent. The agent-based paradigm is considered <ref> [WJ95, AWYe93] </ref> a step beyond the object-oriented computing. This paradigm started in the area of the computational intelligence but has spread to other areas in computer science.
Reference: [BSS94a] <author> R. Balling and J. Sobieszczanski-Sobieski. </author> <title> An Algorithm for Solving the System-Level Problem in Multilevel Optimization. </title> <type> Technical Report 94-96, </type> <institution> Institute for Computer Applications in Science and Engineering, NASA Langley Research Center, </institution> <year> 1994. </year>
Reference-contexts: A software system along with corresponding algorithms and methods for design optimization of multidisciplinary coupled physical systems are presented in <ref> [BSS94b, BSS94a] </ref>. It is used for the optimization of aircraft designs. Electronic commerce and finance is another area where multidisciplinary systems are being built or expected in near future [Gre96].
Reference: [BSS94b] <author> R. Balling and J. Sobieszczanski-Sobieski. </author> <title> Optimization of Coupled Systems: A Critical Overview of Approaches. </title> <type> Technical Report 94-100, </type> <institution> Institute for Computer Applications in Science and Engineering, NASA Langley Research Center, </institution> <year> 1994. </year>
Reference-contexts: A software system along with corresponding algorithms and methods for design optimization of multidisciplinary coupled physical systems are presented in <ref> [BSS94b, BSS94a] </ref>. It is used for the optimization of aircraft designs. Electronic commerce and finance is another area where multidisciplinary systems are being built or expected in near future [Gre96].
Reference: [BW89] <author> P. Bjorstad and O. Widlund. </author> <title> To Overlap or Not to Overlap: A Note on a Domain Decomposition Method for Elliptic Problems. </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> 10(2) </volume> <pages> 1053-1061, </pages> <year> 1989. </year>
Reference-contexts: However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently <ref> [DR94b, MR95b, BW89, KG87] </ref>. Besides, we often need to use different discretization methods (or different density of the grids) and different linear solvers in the different subdomains depending on the characteristics of the local problem.
Reference: [CCC + 94] <author> A. Catlin, C. Chui, C. Crabill, E. Houstis, S. Markus, J. Rice, and S. Weerawarana. </author> <title> An Object Oriented Framework for Building Problem Solving Environments for PDE Based Applications. </title> <booktitle> In Proc. Second Object-Oriented Numerics Conf., </booktitle> <pages> pages 79-92, </pages> <address> Corvalis, Oregon, </address> <year> 1994. </year> <note> RogueWare Software. 121 </note>
Reference-contexts: This mapping can be displayed and modified interactively. All three systems can collect, visualize, and analyze performance data. Other systems that can be included in this category are Vecfem, PDE2D, De-qsol, Alpal, etc. PDELab <ref> [CCC + 94] </ref> is an object-oriented framework for building PSEs for PDE-based applications. The user is provided with means to select components (tools) from different PDE solvers and to integrate them into a new PSE 8 to solve his/her specific problem. <p> Finally, we mention the software bus integration and communication system developed at Purdue [Wee94] which is aimed at solving the integration problem for components of scientific computing application and is used in the PDELab project <ref> [CCC + 94] </ref>. Such systems may help in resolving some of the integration problems that are faced in developing an MPSE, but many of the problems we have mentioned remain and need to be addressed separately.
Reference: [Cet al.88] <author> S. Cammarata et al. </author> <title> Strategies of Cooperation in Distributed Problem Solving. </title> <editor> In Bond and Gasser, editors, </editor> <booktitle> Readings in Distributed Artificial Intelligence, </booktitle> <pages> pages 102-105. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: They reported results using both a hierarchical organization, as well as an "anarchic committee" organization, and found that the latter was as good as, and sometimes better than the former. Cammarata et al. <ref> [Cet al.88] </ref> espouse strategies for cooperation. They analyze the problems faced by the groups of agents involved in distributed problem solving, and infer a set of requirements on information distribution and organizational policies.
Reference: [CGPW90] <editor> T. Chan, R. Glowinski, J. Periaux, and D Widlund, editors. </editor> <booktitle> Proc. Third Intl. Symp. on Domain Decomposition Methods for Partial Differential Equations, </booktitle> <address> Philadelphia, Pennsylvania, </address> <year> 1990. </year> <note> SIAM. </note>
Reference-contexts: In order for this approach to be practical, the computations must be as independent from each other in different subdomains as possible. There exist a class of numerical methods, called domain decomposition methods <ref> [CGPW90, FQZ88, GGMP88, Xu92, KCM + 92] </ref> that address this issue in different ways. However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently [DR94b, MR95b, BW89, KG87].
Reference: [CHL91] <author> T. Chan, T. Hou, and P. Lions. </author> <title> Geometry Related Convergence Results for Domain Decomposition Algorithms. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 28(2) </volume> <pages> 378-391, </pages> <year> 1991. </year>
Reference-contexts: More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. Some material concerning these questions can be found in <ref> [MR95b, RVY93, QV91, DH96, CHL91, CR88] </ref>. 2.3.2 Interface Relaxation This method is based on the physical world relations among the parts of the model and follows the natural way the modeled event or process evolves.
Reference: [CR88] <author> T. Chan and D. Resasco. </author> <title> A Survey of Preconditioners for Domain Decomposition. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 25(3) </volume> <pages> 235-248, </pages> <year> 1988. </year>
Reference-contexts: More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. Some material concerning these questions can be found in <ref> [MR95b, RVY93, QV91, DH96, CHL91, CR88] </ref>. 2.3.2 Interface Relaxation This method is based on the physical world relations among the parts of the model and follows the natural way the modeled event or process evolves.
Reference: [CT96] <author> D. Carlier and P. Trane. </author> <title> Designing Secure Agents with OO Technologies for User's Mobility. </title> <booktitle> In Proc. 1996 World Conf. on Mobile Communications, </booktitle> <pages> pages 78-85, </pages> <address> Canberra, Australia, September 1996. </address> <publisher> Chapman & Hall. </publisher>
Reference-contexts: Some security features for KQML-communicating agents (agent identity verification, message encryption, key management) and architectures for their implementation are proposed in <ref> [TFM95, CT96] </ref>. The semantics of KQML messages depends on the underlying agent-based system. In other words, the messages do not have universal meaning or format of their contents | their interpretation may be different in different systems.
Reference: [CTG96] <author> M. Cutkosky, J. Tenenbaum, and J. Glicksman. Madefast: </author> <title> Collaborative Engineering over the Internet. </title> <journal> Comm. ACM, </journal> <volume> 39(9) </volume> <pages> 78-87, </pages> <month> Septem-ber </month> <year> 1996. </year>
Reference-contexts: Shastra contains many interacting tools and software for communication and collaboration in real time between the participating users. It provides services like animation and talk services which allow users to see and communicate with the other participants of a given Shastra session. Another example for such environments is Madefast <ref> [CTG96] </ref> which uses the World-Wide Web extensively for collaborating and archiving results. Chandy et al. [MCRS + 96] have also developed a system for remote wide-area collaboration, component integration, and communication between agents (people and software processes) that uses the Internet and is based on Java.
Reference: [dB94] <author> C. de Boor. </author> <title> Polynomial Interpolation in Several Variables. </title> <editor> In J. R. Rice and R. A. DeMillo, editors, </editor> <booktitle> Studies in Computer Science, </booktitle> <pages> pages 87-109. </pages> <publisher> Plenum Press, </publisher> <year> 1994. </year>
Reference-contexts: There are, however, problems with that approach. First, polynomial interpolation at M points in two variables is not always a well-posed problem <ref> [dB94, dBR92] </ref>. Second, we would like to obtain a general method that can be applied regardless of the relative positions of the points supplied by the solver and that still gives the best possible accuracy in most cases. <p> + cx 2 + dy + ey 2 and first order accuracy is obtained. (C) Three points determine a + dy + ey 2 and only zero order accuracy is obtained. 53 approximation algorithms [DR96] described below use variations and extensions of the interpolation scheme for multidimensional spaces described in <ref> [dB94] </ref>. 4.2.1 The Interpolation Problem Let us first state formally the interpolation problem we are trying to solve. It is formulated as follows. <p> I is the M fi M unit matrix. 4.2.2 The First Method If the linear system (4.5) is non-singular and well conditioned then one merely solves it directly. The discussion and examples in <ref> [DR94b, dB94] </ref> show that there can be combinations of basis functions and point configurations where (4.5) is singular or nearly so. <p> The discussion and examples in [DR94b, dB94] show that there can be combinations of basis functions and point configurations where (4.5) is singular or nearly so. To handle this difficulty we consider using more than M basis functions and applying the techniques of <ref> [dB94] </ref> to assure always a solution of the interpolations equations (4.2) and (4.3). We calculate a "wider" matrix K 0 = (k ij ), i = 1; : : : ; M , j = 1; : : : ; N where N &gt; M .
Reference: [dBR92] <author> C. de Boor and A. Ron. </author> <title> Computational Aspects of Polynomial Interpolation in Several Variables. </title> <journal> Math. Comp., </journal> <volume> 58 </volume> <pages> 705-727, </pages> <year> 1992. </year>
Reference-contexts: There are, however, problems with that approach. First, polynomial interpolation at M points in two variables is not always a well-posed problem <ref> [dB94, dBR92] </ref>. Second, we would like to obtain a general method that can be applied regardless of the relative positions of the points supplied by the solver and that still gives the best possible accuracy in most cases.
Reference: [Dew92] <author> P. Dewan. </author> <title> Principles of Designing Multi-User User Interface Development Environments Languages. </title> <booktitle> In Proc. of the IFIP TC2/WG 2.7 Working Conference on Engineering for Human-Computer Interaction, </booktitle> <address> Ellivuori, Finland, Aug 1992. </address> <publisher> IFIP, IFIP Publications. </publisher>
Reference-contexts: It is the first layer to which the users have direct access. To facilitate extensive use of 43 the virtual computing [WHR + 96b] model, and to allow collaboration between more than one users, the user interface of an agent must be separate from its functional core <ref> [Dew92] </ref>. The top layer in our MPSE architecture consists of the global user interface or global controller (we use these terms interchangeably throughout the thesis depending on which aspect of this layer we emphasize on).
Reference: [DH96] <author> J. Douglas and C.-S. Huang. </author> <title> An Accelerated Domain Decomposition Procedure Based on Robin Transmission Conditions. </title> <type> Technical Report TR-289, </type> <institution> Center for Applied Mathematics, Purdue University, </institution> <year> 1996. </year>
Reference-contexts: More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. Some material concerning these questions can be found in <ref> [MR95b, RVY93, QV91, DH96, CHL91, CR88] </ref>. 2.3.2 Interface Relaxation This method is based on the physical world relations among the parts of the model and follows the natural way the modeled event or process evolves. <p> least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; * simplification of the least squares method by McFaddin [MR92b]; * discrete Newton's method for the interface problem [Ric89]; * Robin interface conditions (use a convex combination of Dirichlet and Neumann data as Robin interface conditions) <ref> [Lio90, DH96] </ref>; * Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the solution) [Lai92]; * Steklov-Poincare operator method (alternate Dirichlet on the PDEs and Neu-mann on dual PDEs originated from
Reference: [DJR95] <author> T. Drashansky, A. Joshi, and J.R. Rice. </author> <title> SciAgents An Agent Based Environment for Distributed, </title> <booktitle> Cooperative Scientific Computing. In Proc. Seventh Intl. Conf. Tools with Artificial Intelligence, </booktitle> <pages> pages 452-459, </pages> <address> Los Alamitos, California, 1995. </address> <publisher> IEEE Computer Soc. </publisher>
Reference-contexts: Most physical systems and manufactured artifacts can be modeled as a mathematical network whose nodes represent the physical components in a system or artifact. Each node has a mathematical model of the physics of the component it represents and a solver agent <ref> [DJR95] </ref> for its analysis. Individual components are chosen so that each node corresponds to a simple mathematical problem defined on a regular geometry. There exist many standard, reliable solver systems that can be applied to these local node problems. <p> To solve the global problem, we let these local solvers collaborate with each other to relax (i.e., resolve) the interface conditions. An interface controller or mediator agent <ref> [DJR95] </ref> collects boundary values, dynamic and shape coordinates, and parameters/constraints from neighboring subdomains and adjusts boundary values and dynamic/shape coordinates to better satisfy the interface conditions.
Reference: [DL92] <author> K. Decker and V. Lesser. </author> <title> Generalizing the Partial Global Planning Algorithm. </title> <journal> Intl. J. Intelligent Cooperative Systems, </journal> <volume> 1(2) </volume> <pages> 319-346, </pages> <year> 1992. </year> <month> 122 </month>
Reference-contexts: Lesser et al. [Les91] describes the FA/C (functionally accurate, cooperative) architecture in which agents exchange partial and tentative results in order to converge to a solution. Decker and Lesser <ref> [DL92] </ref> propose to use the generalized partial global planning algorithm as an approach to distributed coordination. This algorithm introduces non-local concerns and constraints into the local scheduling of the agents' activities.
Reference: [DR94a] <author> E. D'Azevedo and C. Romine. DOLIB: </author> <title> Distributed Object Library. </title> <type> Technical Report TM-12744, </type> <institution> Oak Ridge National Laboratory, </institution> <year> 1994. </year>
Reference-contexts: The proposed protocol is based 10 on remote procedure calls and it is recursive, where the recursion can be terminated at any point, trading off simplicity and performance against completeness. A similar approach to communication is given in <ref> [DR94a] </ref> where the distributed object library DOLIB simulates global virtual shared memory on a multiprocessor. Goldman et al. [GAS94] explore I/O abstraction as a new high-level approach to interprocess communication in heterogeneous distributed systems.
Reference: [DR94b] <author> T. T. Drashansky and J. R. Rice. </author> <title> Processing PDE Interface Conditions II. </title> <type> Technical Report TR-94-066, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1994. </year>
Reference-contexts: These discussions are based on the information and reasoning presented in <ref> [Ric94, DR94b] </ref>. 20 2.3.1 Solving PDE Problems 2.3.1.1 Solvers for Simple PDE Problems Many important physical world phenomena in the natural sciences are modeled mathematically by partial differential equations (PDEs) which are then solved numerically employing the methods of scientific computing. <p> However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently <ref> [DR94b, MR95b, BW89, KG87] </ref>. Besides, we often need to use different discretization methods (or different density of the grids) and different linear solvers in the different subdomains depending on the characteristics of the local problem. <p> The change is small compared to the other domain decomposition methods but still larger than that required by the next method and 25 the solvers are still too dependent on each other. A parallel variant of this algorithm proposed in <ref> [DR94b] </ref> is given in Chapter 4. A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. <p> One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. Similar ideas and methods in various contexts are presented in [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94]. Our description follows closely the one in <ref> [DR94b] </ref>. More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. <p> The interface relaxation method iteratively solves the PDE problems (2.1) independently and then adjusts values along the interfaces to satisfy better the interface conditions (2.2). The procedure used to adjust values along the interfaces is called a relaxation formula. Examples of commonly used relaxation formulas <ref> [DR94b, MR95b] </ref> are: * average solution and normal derivatives (alternating Dirichlet and Neumann boundary conditions in time and average the solution values and the derivatives on the interfaces) [RVY93]; * least squares for interface conditions (use least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; * <p> Figures 4.1 and 4.2 illustrate possible inaccuracies caused by the relative positions of the provided points and the point of interest. More discussion of this issue can be found in <ref> [DR94b] </ref>. Therefore, we decided to investigate different approximation methods from the ordinary polynomial interpolation, in particular the Hodie methods [Lyn90]. <p> I is the M fi M unit matrix. 4.2.2 The First Method If the linear system (4.5) is non-singular and well conditioned then one merely solves it directly. The discussion and examples in <ref> [DR94b, dB94] </ref> show that there can be combinations of basis functions and point configurations where (4.5) is singular or nearly so.
Reference: [DR96] <author> T. T. Drashansky and J. R. Rice. </author> <title> SciAgents Solving Complex Heterogeneous PDE Models Using Networks of Interacting Problem Solvers. </title> <journal> Mathematical Modeling and Scientific Computing, </journal> <volume> 6, </volume> <month> Apr </month> <year> 1996. </year> <note> (to appear). </note>
Reference-contexts: 2 and second order accuracy is obtained at X. (B) Five points determine a + bx + cx 2 + dy + ey 2 and first order accuracy is obtained. (C) Three points determine a + dy + ey 2 and only zero order accuracy is obtained. 53 approximation algorithms <ref> [DR96] </ref> described below use variations and extensions of the interpolation scheme for multidimensional spaces described in [dB94]. 4.2.1 The Interpolation Problem Let us first state formally the interpolation problem we are trying to solve. It is formulated as follows.
Reference: [DWJ + 96] <author> T. Drashansky, S. Weerawarana, A. Joshi, R. Weerasinghe, and E. Houstis. </author> <title> Software Architecture of Ubiquitous Scientific Computing Environments. </title> <journal> ACM-Baltzer Journal of Mobile Networks and Nomadic Applications, </journal> <note> 1996. (to appear). </note>
Reference-contexts: This task has been started and a number of results have been obtained <ref> [DWJ + 96] </ref>. * In order to enable wider distribution of the computing agents and user cooperation, there is need to experiment with other commercial and/or standard communication and integration mechanisms and tools (like CORBA-compliant tools, the PDELab software bus, or Java-based software). * Techniques for load balancing the hardware system
Reference: [Fet al.93] <author> T. Finin et al. </author> <title> Draft Specification of the KQML Agent-Communication Language. DARPA Knowledge Sharing Initiative, External Interfaces Working Group, </title> <year> 1993. </year>
Reference-contexts: Moreover, in order to add new agents, one has to study the particular communication design of that system. These are some of the reasons for the development of a draft standard for a inter-agent communication language called KQML (Knowledge Query and Manipulation Language) <ref> [Fet al.93, Fet al.94a, Fet al.94b] </ref>. It can be considered complimentary to other domain content representation schemes as KIF (Knowledge Interchange Format) [GF92].
Reference: [Fet al.94a] <author> T. Finin et al. </author> <title> KQML as an Agent Communication Language. </title> <booktitle> In Proc. Third Intl. Conf. on Information and Knowledge Management, </booktitle> <pages> pages 204-221. </pages> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference-contexts: Moreover, in order to add new agents, one has to study the particular communication design of that system. These are some of the reasons for the development of a draft standard for a inter-agent communication language called KQML (Knowledge Query and Manipulation Language) <ref> [Fet al.93, Fet al.94a, Fet al.94b] </ref>. It can be considered complimentary to other domain content representation schemes as KIF (Knowledge Interchange Format) [GF92].
Reference: [Fet al.94b] <editor> R. Fritzson et al. </editor> <title> KQML- A Language and Protocol for Knowledge and Information Exchange. </title> <booktitle> In Proc. 13th Intl. Distributed Artificial Intelligence Workshop, </booktitle> <pages> pages 134-143. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Moreover, in order to add new agents, one has to study the particular communication design of that system. These are some of the reasons for the development of a draft standard for a inter-agent communication language called KQML (Knowledge Query and Manipulation Language) <ref> [Fet al.93, Fet al.94a, Fet al.94b] </ref>. It can be considered complimentary to other domain content representation schemes as KIF (Knowledge Interchange Format) [GF92]. <p> A significant part of this software already exists. An MPSE needs a communication medium which is accessible to all agents and components. Various existing network and transport level protocols and software can be used but they need to be coupled with an agent messaging system (like a KQML <ref> [Fet al.94b] </ref> implementation) and an global controller in order to successfully instantiate and run the agents, and permit inter-agent cooperation.
Reference: [FKT95] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> Portable Mechanisms for Mul-tithreaded Distributed Computations. </title> <type> Technical report, </type> <institution> Argonne National Laboratory, </institution> <year> 1995. </year>
Reference-contexts: The motivation for their research comes from 13 distributed simulation. Similar mechanisms are described in <ref> [FKT95] </ref>. An implementation of process migration in Message Passing Interface (MPI) based applications is given in [RRFH96]. This problem can be approached also from the point of view of mobile, or "roaming" applications, as is done in [JdT + 95] where the Rover toolkit is presented.
Reference: [FPS96] <author> I. Foster, M. Papka, and R. Stevens. </author> <title> Tools for Distributed Collaborative Environments: A Research Agenda. </title> <booktitle> In Proc. Fifth IEEE Intl. Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 23-28, </pages> <address> Los Alamitos, California, </address> <month> August </month> <year> 1996. </year> <journal> IEEE, IEEE Comp. Soc. </journal> <note> Press. </note>
Reference-contexts: Their system allows flexibility in the composition of the software components, systematic reasoning about the components, and providing services to them, and it is capable of maintaining persistent state across multiple temporary (design) sessions. An outline of the research directions in the future collaborative environments can be found in <ref> [FPS96] </ref>. A software infrastructure Cumulvs is described in [GKP96] which, in addition to assisting the development of collaborative environments, supports interactive visualization and remote collaborative steering of distributed applications.
Reference: [FQZ88] <author> D. Funaro, A. Quarteroni, and P. Zanolli. </author> <title> An Iterative Procedure with Interface Relaxation for Domain Decomposition Methods. </title> <journal> SIAM J. Num. Anal., </journal> <volume> 25 </volume> <pages> 1213-1236, </pages> <year> 1988. </year>
Reference-contexts: In order for this approach to be practical, the computations must be as independent from each other in different subdomains as possible. There exist a class of numerical methods, called domain decomposition methods <ref> [CGPW90, FQZ88, GGMP88, Xu92, KCM + 92] </ref> that address this issue in different ways. However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently [DR94b, MR95b, BW89, KG87]. <p> A parallel variant of this algorithm proposed in [DR94b] is given in Chapter 4. A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in <ref> [FQZ88] </ref>. Similar ideas and methods in various contexts are presented in [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94]. Our description follows closely the one in [DR94b]. More details can be found in [MR95b, MR92b, Ric89]. <p> values) [RVY93]; * simplification of the least squares method by McFaddin [MR92b]; * discrete Newton's method for the interface problem [Ric89]; * Robin interface conditions (use a convex combination of Dirichlet and Neumann data as Robin interface conditions) [Lio90, DH96]; * Schur complement (alternate Dirichlet and Neumann data in space) <ref> [FQZ88] </ref>; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the solution) [Lai92]; * Steklov-Poincare operator method (alternate Dirichlet on the PDEs and Neu-mann on dual PDEs originated from Steklov-Poincare operator) [LTDRV91, Ago90, Nat95].
Reference: [Fro95] <author> R. Frost. </author> <title> High-Performance Visual Programming Environments. </title> <booktitle> ACM SIGGRAPH, </booktitle> <pages> pages 13-21, </pages> <month> February </month> <year> 1995. </year> <type> (invited article). </type>
Reference-contexts: The system Q (developed in conjunction with the Arcadia project) provides the communication, translation, and invocation support for inter-language remote procedure calls among software components written in different programming languages. An interesting approach to component integration using visual programming environments is being pursued by several groups and companies. Frost <ref> [Fro95] </ref> overviews such environments that currently exist and outlines the system characteristics and design considerations for similar future software. Some examples of component integration environments with visual programming are AVS [Kya] and Khoros [Res] which have evolved from scientific visualization environments.
Reference: [FT96] <author> I. Foster and S. Tuecke. </author> <title> Enabling Technologies for Web-Based Ubiquitous Supercomputing. </title> <booktitle> In Proc. Fifth IEEE Intl. Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 112-119, </pages> <address> Los Alamitos, California, </address> <month> August </month> <year> 1996. </year> <journal> IEEE, IEEE Comp. Soc. </journal> <note> Press. 123 </note>
Reference-contexts: CORBA [Gro95] is a specification of object-oriented communication and component integration software that is becoming a standard in the industry | more and more CORBA-compliant systems are becoming available. Such systems are remote procedure call based and usually have multiple language interfaces (APIs). Nexus <ref> [FT96] </ref> is another integration library from Argonne National Laboratory that is remote procedure call based. It offers facilities for remote service requests, heterogeneous communication and computation, and structures the resulting system hierarchically providing different levels of access to the contexts (address spaces) of the participating processes.
Reference: [GAS94] <author> K. Goldman, M. Anderson, and B. Swaminathan. </author> <title> The Programmer's Playground: I/O Abstraction for Heterogeneous Distributed Systems. </title> <type> Technical Report WUCS-93-29, </type> <institution> Department of Computer Science, Washington University, </institution> <address> St. Louis, MO, </address> <year> 1994. </year>
Reference-contexts: A similar approach to communication is given in [DR94a] where the distributed object library DOLIB simulates global virtual shared memory on a multiprocessor. Goldman et al. <ref> [GAS94] </ref> explore I/O abstraction as a new high-level approach to interprocess communication in heterogeneous distributed systems. The participating modules (written in multiple programming languages) publish data structures through which they will communicate, and the relationships between the modules are specified by logic connections between the published data structures.
Reference: [GF92] <author> M. R. Genesereth and R. E. Fikes. </author> <title> Knowledge Interchange Format, Ver. 3.0 Reference Manual. </title> <institution> Computer Science Department, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: These are some of the reasons for the development of a draft standard for a inter-agent communication language called KQML (Knowledge Query and Manipulation Language) [Fet al.93, Fet al.94a, Fet al.94b]. It can be considered complimentary to other domain content representation schemes as KIF (Knowledge Interchange Format) <ref> [GF92] </ref>. KQML is a language for transmitting object-oriented types of data, and it can be used to communicate attitudes about information, such as querying, stating, believing, achieving, subscribing, and offering. KQML supports communication between asynchronous and autonomous software objects (usually agents).
Reference: [GGMP88] <editor> R. Glowinski, G. Golub, G. Meurant, and J. Periaux, editors. </editor> <booktitle> Proc. First Intl. Symp. on Domain Decomposition Methods for Partial Differential Equations, </booktitle> <address> Philadelphia, Pennsylvania, </address> <year> 1988. </year> <note> SIAM. </note>
Reference-contexts: In order for this approach to be practical, the computations must be as independent from each other in different subdomains as possible. There exist a class of numerical methods, called domain decomposition methods <ref> [CGPW90, FQZ88, GGMP88, Xu92, KCM + 92] </ref> that address this issue in different ways. However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently [DR94b, MR95b, BW89, KG87].
Reference: [GHR94] <author> E. Gallopoulos, E. Houstis, and J.R. Rice. </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science. </title> <journal> IEEE Computational Science and Enginerring, </journal> <volume> 1(2) </volume> <pages> 11-23, </pages> <year> 1994. </year>
Reference-contexts: The Multidisciplinary Problem Solving Environment (MPSE) is the software implementation of this framework. It is assumed that its elements are discipline-specific problem solving environments (PSEs) <ref> [GHR94] </ref>. <p> At the core of PDELab is the Purdue PSE kernel [WHR + 96a] which provides a component communication / integration mechanism, object repository, and a notebook-like user interface. For a detailed overview of PSEs, their history, current research directions we refer the readers to <ref> [GHR94, RB96] </ref>. 2.1.2 Distributed Software Integration | Methods, Tools, Systems Some attempts to combine several scientific computing applications in a (more or less) single environment have recently been reported in the literature.
Reference: [Gir95] <author> M. Girard. </author> <title> An Easy Way to Construct Distributed Software. </title> <booktitle> In Proc. of KBUP'95 First Intl. Workshop Knowledge-Based Systems for the (Re)Use of Program Libraries, </booktitle> <pages> pages 65-74. </pages> <institution> INRIA, Sophia Antipolis, </institution> <year> 1995. </year>
Reference-contexts: The user interactions with the Central Control produce a script in its command language which may invoke the tools and other available programs to convert the output of a tool to the input to another tool. Another similar system has been developed by Girard <ref> [Gir95] </ref> in which the user selects a set of applications (from a list of available ones), the input and the output of the computations (usually a file), and the system provides a program (based on the type of the I/O each application expects, with the user resolving the ambiguities) to invoke
Reference: [GK94] <author> M.R. Genesereth and S.P. Ketchpel. </author> <title> Software Agents. </title> <journal> Comm. ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <year> 1994. </year>
Reference-contexts: An agent-based system usually makes extensive use of the concurrency | agents can be viewed as concurrently executed software processes, communicating with their peers <ref> [GK94] </ref>. Agents can migrate from one computing unit to another without changing their goals and behavior; an agent should never execute an action that is in conflict with its goals. <p> In addition, the agent can use a traditional graphical user interface when communicating with users. Some authors attach additional properties to the agents that might be interpreted as concepts or features usually applicable to or exhibited by humans (such as knowledge, belief, trust, intention, obligation, emotion, etc.) <ref> [KO95, GK94, WJ95] </ref>. This leads to what is called a "stronger" notion of an agent, but we restrict our discussion to the weaker notion above since it is sufficient for our purposes.
Reference: [GKP96] <author> G. Geist, J. Kohl, and P. Papadopoulos. </author> <title> CUMULVS: Providing Fault-Tolerance, Visualization, and Steering of Parallel Applications. </title> <type> Technical report, </type> <institution> Oak Ridge National Laboratory, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: An outline of the research directions in the future collaborative environments can be found in [FPS96]. A software infrastructure Cumulvs is described in <ref> [GKP96] </ref> which, in addition to assisting the development of collaborative environments, supports interactive visualization and remote collaborative steering of distributed applications.
Reference: [Gre96] <author> N. Greenfeld. </author> <title> Electronic Commerce. </title> <booktitle> UNIX Review, </booktitle> <pages> pages 15-20, </pages> <month> Febru-ary </month> <year> 1996. </year>
Reference-contexts: A software system along with corresponding algorithms and methods for design optimization of multidisciplinary coupled physical systems are presented in [BSS94b, BSS94a]. It is used for the optimization of aircraft designs. Electronic commerce and finance is another area where multidisciplinary systems are being built or expected in near future <ref> [Gre96] </ref>. Another project in this multidisciplinary software integration area is the Legion project at University of Virginia [GW96] which provides a transparent interface to geographically distributed heterogeneous resources by effectively integrating them into a multidisciplinary application. Their architecture uses object wrappers to encapsulate legacy components.
Reference: [groa] <institution> Infosphere group. California Institute of Technology Infospheres Project. </institution> <note> http://www.infospheres.caltech.edu/. </note>
Reference-contexts: The Open Software Foundation Distributed Computing Environments (DCE) | an implementation of which is described in [Tra] | offers a range of services for developing distributed applications. The communication and integration facility developed at Caltech <ref> [MCRS + 96, groa] </ref> is built around the concept of mailboxes for messages. Each communicating process possesses a number of inboxes and outboxes (essentially, message queues) and an outbox may be connected (statically) to an arbitrary inbox (presumably of a different process).
Reference: [grob] <author> PSEware group. </author> <title> The MetaPSE Project. </title> <address> http://www.cs.indiana.edu/ hyplan/dviswana/MetaPSE.html. </address>
Reference-contexts: Their architecture uses object wrappers to encapsulate legacy components. The MetaPSE project at Indiana University <ref> [grob] </ref> looks into ways of automating the interface definitions and implementations between the software components of a MPSE-like system. In his Ph.D. thesis, Sullivan [Sul94] presents theoretical arguments and practical evidence for using specifically designed modules called mediators for tightly-coupled integration of pre-existing software systems.
Reference: [Gro95] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification (CORBA), </title> <booktitle> 1995. Revision 2.0. </booktitle>
Reference-contexts: CORBA <ref> [Gro95] </ref> is a specification of object-oriented communication and component integration software that is becoming a standard in the industry | more and more CORBA-compliant systems are becoming available. Such systems are remote procedure call based and usually have multiple language interfaces (APIs).
Reference: [GW96] <author> A. Grimshaw and W. Wulf. </author> <title> Legion A View From 50,000 Feet. </title> <booktitle> In Proc. Fifth IEEE Intl. Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 89-99, </pages> <address> Los Alamitos, California, </address> <month> August </month> <year> 1996. </year> <journal> IEEE, IEEE Comp. Soc. </journal> <note> Press. </note>
Reference-contexts: It is used for the optimization of aircraft designs. Electronic commerce and finance is another area where multidisciplinary systems are being built or expected in near future [Gre96]. Another project in this multidisciplinary software integration area is the Legion project at University of Virginia <ref> [GW96] </ref> which provides a transparent interface to geographically distributed heterogeneous resources by effectively integrating them into a multidisciplinary application. Their architecture uses object wrappers to encapsulate legacy components.
Reference: [Hei93] <author> W. Heinrichs. </author> <title> Domain Decomposition for Fourth-Order Problems. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 30(2) </volume> <pages> 435-453, </pages> <year> 1993. </year> <month> 124 </month>
Reference-contexts: A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. Similar ideas and methods in various contexts are presented in <ref> [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94] </ref>. Our description follows closely the one in [DR94b]. More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc.
Reference: [HR92] <author> E. N. Houstis and J. R. Rice. </author> <title> Parallel ELLPACK: A Development and Problem Solving Environment for High Performance Computing Machines. </title> <editor> In P. Gaffney and E. Houstis, editors, </editor> <booktitle> Programming Environments for High Level Scientific Problem Solving, </booktitle> <pages> pages 229-243. </pages> <publisher> North Holland, </publisher> <year> 1992. </year>
Reference-contexts: XEllpack provides graphical input for constructing grids, pop-up menus for selecting solution techniques, and color graphics output for analyzing solutions. A user can interface with XEllpack from an X Windows workstation while an XEllpack client solves an elliptic problem on any machine (s) on the network. Parallel Ellpack <ref> [HR92] </ref> is an interface to various libraries of parallel elliptic-PDE solvers. It allows the user to specify linear and nonlinear, time-dependent as well as elliptic, PDE problems interactively, and it automatically maps the underlying computation onto parallel machines. This mapping can be displayed and modified interactively. <p> They also make use of the high performance computing (HPC) hardware. A good example of such solvers is //ELLPACK <ref> [HR92, RB85] </ref> which has tools for defining the problem (domain, PDE, boundary conditions), offers 21 a set of discretization methods for various problems, contains a set of linear solvers, and has a set of routines for visualization of the solution. <p> The graphical and symbol user interfaces allow quick definition of the problem and the entire solution process takes considerably less time and expert knowledge than needed for developing software for the particular problem. The computational intelligence available in //ELLPACK <ref> [HR92] </ref> through systems like PYTHIA [JWH + 96] further transfers the burden of the expert decisions from the user to the solver. To conclude, there are general purpose solvers available for solving PDE problems on a single domain with efficiency and accuracy close to the optimal.
Reference: [HRet al.92] <editor> B. Hayes-Roth et al. Guardian. </editor> <title> A Prototype Intelligent Agent for Intensive-care Monitoring. </title> <journal> Artif. Intell. Med, </journal> <volume> 4(2) </volume> <pages> 165-185, </pages> <year> 1992. </year>
Reference-contexts: environment ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed [WJ95, Sho93, Vet al.94, SH93] for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring <ref> [HRet al.92] </ref>, to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the capabilities of the agent technology. An important aspect of these systems is their modularity and flexibility.
Reference: [Ima96] <author> I. F. Imam. </author> <title> A Proposed Framework for Automating Software Testing. </title> <booktitle> In Proc. FLAIRS'96, </booktitle> <pages> pages 478-481, </pages> <address> St. Petersburg, Florida, </address> <month> May </month> <year> 1996. </year> <institution> Eckerd Coll. </institution>
Reference-contexts: inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed [WJ95, Sho93, Vet al.94, SH93] for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing <ref> [Ima96] </ref>, to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the capabilities of the agent technology. An important aspect of these systems is their modularity and flexibility.
Reference: [INR] <institution> INRIA. Description of Project EDiCA. </institution> <address> http://zenon.inria.fr/ safir/SAM/Edica/edica.html#Description. </address>
Reference-contexts: The project EDiCA <ref> [INR] </ref> developed in INRIA, France, incorporates tools like Maple, Macaulay, Alpi, and other by using an integration component called Central Control, equipped with a GUI.
Reference: [Jav] <author> JavaSoft. </author> <title> JavaBeans | Component API for Java. </title> <address> http:// splash.javasoft.com/beans/. </address>
Reference-contexts: It offers facilities for remote service requests, heterogeneous communication and computation, and structures the resulting system hierarchically providing different levels of access to the contexts (address spaces) of the participating processes. The JavaBeans API <ref> [Jav] </ref> can also be considered an integration facility as it sets a standard for interoperability for the Java platform. The Open Software Foundation Distributed Computing Environments (DCE) | an implementation of which is described in [Tra] | offers a range of services for developing distributed applications.
Reference: [JdT + 95] <author> A. Joseph, A. deLespinasse, J. Tauber, D. Gifford, and M. Kaashoek. </author> <title> Rover: A Toolkit for Mobile Information Access. </title> <booktitle> In Proc. 15th Symp. on Operating Systems Principles, </booktitle> <pages> pages 231-246. </pages> <publisher> IEEE Comp. Soc. Press, </publisher> <month> December </month> <year> 1995. </year>
Reference-contexts: Similar mechanisms are described in [FKT95]. An implementation of process migration in Message Passing Interface (MPI) based applications is given in [RRFH96]. This problem can be approached also from the point of view of mobile, or "roaming" applications, as is done in <ref> [JdT + 95] </ref> where the Rover toolkit is presented.
Reference: [Jos96] <author> A. Joshi. </author> <title> To Learn or Not to Learn ... In G. </title> <editor> Weiss and S. Sin, editors, </editor> <booktitle> Adaptation and Learning in Multiagent Systems, volume 1042 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 127-139. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Osaki et al. [OAI + 94] describe a complex cooperative multiagent system designed 19 to coordinate a team of cooperating autonomous robots. They design a negotiating and learning mechanism which allows the robots to self-organize into groups with a "leader" and "followers" and discuss its implementation. Joshi <ref> [Jos96] </ref> proposes an epistemic utility based approach which allows each agent to dynamically learn about the capabilities of other agents, and respond to the changes in these capabilities. This scheme uses a combination of learning as well as a priori rules relating to scalability of parallel computations [MR94]. Joshi [Jos96] also <p> Joshi <ref> [Jos96] </ref> proposes an epistemic utility based approach which allows each agent to dynamically learn about the capabilities of other agents, and respond to the changes in these capabilities. This scheme uses a combination of learning as well as a priori rules relating to scalability of parallel computations [MR94]. Joshi [Jos96] also presents a learning technique which enhances the effectiveness of such coordination. It combines neuro-fuzzy techniques with epistemic utility criterion. There have been attempts to formalize some aspects of the design of multiagent systems.
Reference: [JWH + 96] <author> A. Joshi, S. Weerawarana, E. N. Houstis, J. R. Rice, and N. Ramakrish-nan. </author> <title> Neuro-Fuzzy Support for Problem Solving Environments. </title> <journal> IEEE Computational Science and Engineering, </journal> <volume> 3 </volume> <pages> 44-56, </pages> <year> 1996. </year>
Reference-contexts: The graphical and symbol user interfaces allow quick definition of the problem and the entire solution process takes considerably less time and expert knowledge than needed for developing software for the particular problem. The computational intelligence available in //ELLPACK [HR92] through systems like PYTHIA <ref> [JWH + 96] </ref> further transfers the burden of the expert decisions from the user to the solver. To conclude, there are general purpose solvers available for solving PDE problems on a single domain with efficiency and accuracy close to the optimal. <p> There exist software systems which are capable of selecting some of the above parameters in specific problem areas. They use computational intelligence techniques and knowledge bases to deduct (close to) optimal values of various parameters. An example of such system is PYTHIA <ref> [JWH + 96] </ref> whose objective is to advise the user of the "right," or at least "good," selections of various solvers, their parameters and the computational resources for solving a particular single-domain partial differential equations problem.
Reference: [KCM + 92] <author> D. Keyes, T. Chan, G. Meurant, J. </author> <title> Scroggs, </title> <editor> and K. Voigt, editors. </editor> <booktitle> Proceedings of the Fifth Intl. Symp. on Domain Decomposition Methods for Partial Differential Equations, </booktitle> <address> Philadelphia, Pennsylvania, </address> <year> 1992. </year> <note> SIAM. </note>
Reference-contexts: In order for this approach to be practical, the computations must be as independent from each other in different subdomains as possible. There exist a class of numerical methods, called domain decomposition methods <ref> [CGPW90, FQZ88, GGMP88, Xu92, KCM + 92] </ref> that address this issue in different ways. However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently [DR94b, MR95b, BW89, KG87].
Reference: [KG87] <author> D. Keyes and W. Gropp. </author> <title> A Comparison of Domain Decomposition Techniques for Elliptic Partial Differential Equations and Their Parllel Implementation. </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> 8 </volume> <pages> 166-202, </pages> <year> 1987. </year>
Reference-contexts: However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently <ref> [DR94b, MR95b, BW89, KG87] </ref>. Besides, we often need to use different discretization methods (or different density of the grids) and different linear solvers in the different subdomains depending on the characteristics of the local problem.
Reference: [KO95] <author> W. King and J. Ohya. </author> <title> The Representation of Agents: a Study of Phenomena in Virtual Environments. </title> <booktitle> In Proc. Fourth Intl. IEEE Workshop on Robot and Human Communication, </booktitle> <pages> pages 199-204. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1995. </year>
Reference-contexts: In addition, the agent can use a traditional graphical user interface when communicating with users. Some authors attach additional properties to the agents that might be interpreted as concepts or features usually applicable to or exhibited by humans (such as knowledge, belief, trust, intention, obligation, emotion, etc.) <ref> [KO95, GK94, WJ95] </ref>. This leads to what is called a "stronger" notion of an agent, but we restrict our discussion to the weaker notion above since it is sufficient for our purposes.
Reference: [Kra96] <author> D. Kramer. </author> <title> The Java Platform. </title> <type> JavaSoft, </type> <month> May </month> <year> 1996. </year> <note> A White Paper. </note>
Reference-contexts: Therefore, this architecture abstracts successfully from the user the location of the main computations (the location of the solvers and the mediators) and allows for great flexibility in this direction, including running the MPSE over the net. Current network technologies and languages like Java <ref> [Kra96] </ref> allow exporting an application interface in the form of downloadable executable code over the net reducing greatly the latency of the interface's reaction to the user's actions and the amount of communication between the interface and the rest of the application. 3.1.4 Intelligent Completion of the Problem Specification We now
Reference: [Kya] <author> J. Kyaak. </author> <title> AVS Application Visualization System. </title> <address> http://www.rug.nl/ hpc/vc/vis iavs.html. </address> <month> 125 </month>
Reference-contexts: An interesting approach to component integration using visual programming environments is being pursued by several groups and companies. Frost [Fro95] overviews such environments that currently exist and outlines the system characteristics and design considerations for similar future software. Some examples of component integration environments with visual programming are AVS <ref> [Kya] </ref> and Khoros [Res] which have evolved from scientific visualization environments.
Reference: [Lai92] <author> C.-H. Lai. </author> <title> An Iteration Scheme for Non-symmetric Interface Operator. </title> <editor> In A. Quarteroni, A. Periaux, Y. Kuznetsov, and O. Widlind, editors, </editor> <title> Domain Decomposition Methods for Partial Differential Equations, </title> <address> pages 135-161. </address> <publisher> SIAM, </publisher> <year> 1992. </year>
Reference-contexts: A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. Similar ideas and methods in various contexts are presented in <ref> [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94] </ref>. Our description follows closely the one in [DR94b]. More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. <p> Robin interface conditions (use a convex combination of Dirichlet and Neumann data as Robin interface conditions) [Lio90, DH96]; * Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the solution) <ref> [Lai92] </ref>; * Steklov-Poincare operator method (alternate Dirichlet on the PDEs and Neu-mann on dual PDEs originated from Steklov-Poincare operator) [LTDRV91, Ago90, Nat95]. The details of their derivations or analysis are not discussed here. We now formulate the interface relaxation technique mathematically as follows.
Reference: [Les91] <author> V. R. Lesser. </author> <title> A Retrospective View of FA/C Distributed Problem Solving. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1347-1363, </pages> <year> 1991. </year>
Reference-contexts: They point out that in a distributed problem solving scenario, different agents may have different capabilities, limited knowledge and resources, and thus differing appropriateness in solving the problem at hand. Lesser et al. <ref> [Les91] </ref> describes the FA/C (functionally accurate, cooperative) architecture in which agents exchange partial and tentative results in order to converge to a solution. Decker and Lesser [DL92] propose to use the generalized partial global planning algorithm as an approach to distributed coordination.
Reference: [Les95] <author> V. Lesser. </author> <title> Multiagent Systems: An Emerging Subdiscipline of AI. </title> <journal> ACM Comp. Surveys, </journal> <volume> 27(3) </volume> <pages> 340-342, </pages> <year> 1995. </year>
Reference-contexts: The agent paradigm allows distributed problem solving [OPL94] which is distinct from merely using distributed computing. The ability of the agents to autonomously pursue their 17 goals can resolve the problems during the solution process without user intervention. This allows seamless derivation of the global solution. According to Lesser <ref> [Les95] </ref>, the issues to be resolved in the design and the imple mentation of multiagent systems are: * coordination strategies that enable groups of agents to solve problems effec tively; * negotiation mechanisms that are used to bring a collection of agents to an acceptable state; * techniques for conflict detection <p> There are some general principles that help the systems to cope with this uncertainty <ref> [OJ95, AAA95, Les95] </ref> that include: * design goals to produce the solution with minimal use of communication and computational resources | i.e., achieving an "acceptable" answer with the avail able amount of resources; * incremental resolution of uncertainty through negotiation; * reasonable access to resource information and quality of service information;
Reference: [Lio90] <author> P. L. Lions. </author> <title> On the Schwartz Alternating Method: A Variant for Nonoverlapping Subdomains. </title> <editor> In R. Glowiinski, G. Golub, G. Meurant, and J. Periaux, editors, </editor> <title> Domain Decomposition Methods for Partial Differential Equations, </title> <address> pages 202-223. </address> <publisher> SIAM, </publisher> <year> 1990. </year>
Reference-contexts: least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; * simplification of the least squares method by McFaddin [MR92b]; * discrete Newton's method for the interface problem [Ric89]; * Robin interface conditions (use a convex combination of Dirichlet and Neumann data as Robin interface conditions) <ref> [Lio90, DH96] </ref>; * Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the solution) [Lai92]; * Steklov-Poincare operator method (alternate Dirichlet on the PDEs and Neu-mann on dual PDEs originated from
Reference: [LTDRV91] <author> P. Le-Tallec, Y. De-Roecl, and M. Vidrascu. </author> <title> Domain Decomposition Methods for Large Linearly Elliptic 3-dimentional Problems. </title> <journal> J. Comput. Appl. Math., </journal> <volume> 34(1) </volume> <pages> 93-117, </pages> <year> 1991. </year>
Reference-contexts: A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. Similar ideas and methods in various contexts are presented in <ref> [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94] </ref>. Our description follows closely the one in [DR94b]. More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. <p> Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the solution) [Lai92]; * Steklov-Poincare operator method (alternate Dirichlet on the PDEs and Neu-mann on dual PDEs originated from Steklov-Poincare operator) <ref> [LTDRV91, Ago90, Nat95] </ref>. The details of their derivations or analysis are not discussed here. We now formulate the interface relaxation technique mathematically as follows.
Reference: [Lyn90] <author> R. E. Lynch. </author> <title> Hodie Approximation of Boundary Conditions. </title> <editor> In D. Kin-caid and L. Hayes, editors, </editor> <booktitle> Iterative Methods for Large Linear Systems, </booktitle> <pages> pages 135-147. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Figures 4.1 and 4.2 illustrate possible inaccuracies caused by the relative positions of the provided points and the point of interest. More discussion of this issue can be found in [DR94b]. Therefore, we decided to investigate different approximation methods from the ordinary polynomial interpolation, in particular the Hodie methods <ref> [Lyn90] </ref>.
Reference: [MB95] <author> B. Moulin and M. Brassard. </author> <title> A Scenario-Based Design Method and an Environment for the Development of Multiagent Systems. </title> <editor> In C. Zhang and D. Lucose, editors, </editor> <booktitle> Proc. Intl. Conf. on Distributed Artificial Intelligence, </booktitle> <pages> pages 216-232, </pages> <address> Berlin, Germany, </address> <month> November </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: Joshi [Jos96] also presents a learning technique which enhances the effectiveness of such coordination. It combines neuro-fuzzy techniques with epistemic utility criterion. There have been attempts to formalize some aspects of the design of multiagent systems. Moulin and Brassard <ref> [MB95] </ref> describe a scenario-based design method and an environment for the development of multiagent systems.
Reference: [MCRS + 96] <author> K. Many Chandy, A. Rifkin, P. Sivilotti, J. Mandelson, M. Richardson, W. Tanaka, and L. Weisman. </author> <title> A World-Wide Distributed System Using Java. </title> <booktitle> In Proc. Fifth IEEE Intl. Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 11-18, </pages> <address> Los Alamitos, California, </address> <month> August </month> <year> 1996. </year> <journal> IEEE, IEEE Comp. Soc. </journal> <note> Press. </note>
Reference-contexts: The Open Software Foundation Distributed Computing Environments (DCE) | an implementation of which is described in [Tra] | offers a range of services for developing distributed applications. The communication and integration facility developed at Caltech <ref> [MCRS + 96, groa] </ref> is built around the concept of mailboxes for messages. Each communicating process possesses a number of inboxes and outboxes (essentially, message queues) and an outbox may be connected (statically) to an arbitrary inbox (presumably of a different process). <p> It provides services like animation and talk services which allow users to see and communicate with the other participants of a given Shastra session. Another example for such environments is Madefast [CTG96] which uses the World-Wide Web extensively for collaborating and archiving results. Chandy et al. <ref> [MCRS + 96] </ref> have also developed a system for remote wide-area collaboration, component integration, and communication between agents (people and software processes) that uses the Internet and is based on Java.
Reference: [MHO95] <author> M. Maybee, D. Heimbigner, and L. Osterweil. </author> <title> Multilanguage Interoperability in Distributed Systems: </title> <type> Experience Report. Technical Report CU-CS-779-95, </type> <institution> Department of Computer Science, University of Col-orado at Boulder, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Updating published data implicitly triggers I/O and communication. Their software library and run-time system is called The Programmers' Playground and is motivated by the development of a distributed multimedia application. Interoperability support for multilingual, heterogeneous component-based software systems is presented in <ref> [MHO95] </ref>. The system Q (developed in conjunction with the Arcadia project) provides the communication, translation, and invocation support for inter-language remote procedure calls among software components written in different programming languages. An interesting approach to component integration using visual programming environments is being pursued by several groups and companies.
Reference: [MKR95] <author> E. Mascarenhas, F. Knop, and V. Rego. ParaSol: </author> <title> A Multi-threaded System for Parallel Simulation Based on Mobile Threads. </title> <editor> In J. Tew, S. Manivannan, D. Sadowski, and A. Seila, editors, </editor> <booktitle> Proc. Winter Simulation Conf., </booktitle> <pages> pages 690-697. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1995. </year> <month> 126 </month>
Reference-contexts: Several projects address the need for process or thread migration between different computing units. Rego et al. <ref> [MR96, MR95a, MKR95] </ref> have explored this issue in their systems ParaSol, Ariadne, and Arahne, which provide various programmer and runtime facilities for process and thread migration among homogeneous and heterogeneous computing environments. The motivation for their research comes from 13 distributed simulation. Similar mechanisms are described in [FKT95]. <p> The main issue is then the correct distribution of the solver agents to balance the load. This can be done by the global execution interface in several ways. One is to reassign agents <ref> [MR96, MR95a, MKR95, Ret al.93] </ref> to appropriate computing units; another is to split some subdomains further and distribute them to separate computing units. <p> the computing agents and user cooperation, there is need to experiment with other commercial and/or standard communication and integration mechanisms and tools (like CORBA-compliant tools, the PDELab software bus, or Java-based software). * Techniques for load balancing the hardware system by using migrating threads should be explored (e.g., as in <ref> [MR96, MR95a, MKR95] </ref>), by enabling the solver wrappers to decompose a domain into smaller subdomains. This requires developing algorithms and metrics for global estimation of the load of the computing units. * Implementation of the MPSE architecture for other problem domains in scien tific computing.
Reference: [MR92a] <author> S. McFaddin and J. R. Rice. </author> <title> Collaborating PDE Solvers. </title> <journal> Appl. Num. Math, </journal> <volume> 10 </volume> <pages> 279-295, </pages> <year> 1992. </year>
Reference-contexts: Therefore, the network abstraction of a physical system or artifact allows 3 us to build a software system which is a network of collaborating well defined numerical objects along with a set of interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [MR95b, QPV92, MR92a] </ref> for the case of collaborating PDE models. The results obtained so far verify the feasibility and potential of network-based prototyping.
Reference: [MR92b] <author> S. McFaddin and J. R. Rice. RELAX: </author> <title> A Platform for Software Relaxation. </title> <editor> In Houstis, Rice, and Vichnevetsky, editors, </editor> <booktitle> Expert Systems for Scientific Computing, </booktitle> <pages> pages 175-194. </pages> <publisher> North Holland, </publisher> <year> 1992. </year>
Reference-contexts: Similar ideas and methods in various contexts are presented in [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94]. Our description follows closely the one in [DR94b]. More details can be found in <ref> [MR95b, MR92b, Ric89] </ref>. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. <p> (alternating Dirichlet and Neumann boundary conditions in time and average the solution values and the derivatives on the interfaces) [RVY93]; * least squares for interface conditions (use least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; * simplification of the least squares method by McFaddin <ref> [MR92b] </ref>; * discrete Newton's method for the interface problem [Ric89]; * Robin interface conditions (use a convex combination of Dirichlet and Neumann data as Robin interface conditions) [Lio90, DH96]; * Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation
Reference: [MR94] <author> D. Marinescu and J.R. Rice. </author> <title> On the scalability of Asynchronous Parallel Computations. </title> <journal> J. Parallel and Distributed Computing, </journal> <volume> 22 </volume> <pages> 538-546, </pages> <year> 1994. </year>
Reference-contexts: Joshi [Jos96] proposes an epistemic utility based approach which allows each agent to dynamically learn about the capabilities of other agents, and respond to the changes in these capabilities. This scheme uses a combination of learning as well as a priori rules relating to scalability of parallel computations <ref> [MR94] </ref>. Joshi [Jos96] also presents a learning technique which enhances the effectiveness of such coordination. It combines neuro-fuzzy techniques with epistemic utility criterion. There have been attempts to formalize some aspects of the design of multiagent systems.
Reference: [MR95a] <author> E. Mascarenhas and V. Rego. </author> <title> Migrant Threads on Process Farms: Parallel Programming with Ariadne. </title> <type> Technical Report TR 95-081, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Several projects address the need for process or thread migration between different computing units. Rego et al. <ref> [MR96, MR95a, MKR95] </ref> have explored this issue in their systems ParaSol, Ariadne, and Arahne, which provide various programmer and runtime facilities for process and thread migration among homogeneous and heterogeneous computing environments. The motivation for their research comes from 13 distributed simulation. Similar mechanisms are described in [FKT95]. <p> The main issue is then the correct distribution of the solver agents to balance the load. This can be done by the global execution interface in several ways. One is to reassign agents <ref> [MR96, MR95a, MKR95, Ret al.93] </ref> to appropriate computing units; another is to split some subdomains further and distribute them to separate computing units. <p> the computing agents and user cooperation, there is need to experiment with other commercial and/or standard communication and integration mechanisms and tools (like CORBA-compliant tools, the PDELab software bus, or Java-based software). * Techniques for load balancing the hardware system by using migrating threads should be explored (e.g., as in <ref> [MR96, MR95a, MKR95] </ref>), by enabling the solver wrappers to decompose a domain into smaller subdomains. This requires developing algorithms and metrics for global estimation of the load of the computing units. * Implementation of the MPSE architecture for other problem domains in scien tific computing.
Reference: [MR95b] <author> Mo Mu and J. R. Rice. </author> <title> Modeling with Collaborating PDE Solvers | Theory and Practice. </title> <journal> Computing Systems in Engineering, </journal> <volume> 6 </volume> <pages> 87-95, </pages> <year> 1995. </year>
Reference-contexts: Therefore, the network abstraction of a physical system or artifact allows 3 us to build a software system which is a network of collaborating well defined numerical objects along with a set of interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [MR95b, QPV92, MR92a] </ref> for the case of collaborating PDE models. The results obtained so far verify the feasibility and potential of network-based prototyping. <p> For example, the engine simulation shown in Figure 2.1 is estimated to require 100 million variables and the answer (the data set allowing the display of the accurate solution at any point) is about 20 gigabytes in size. The problem contains about 10,000 subdomains with 35,000 interfaces <ref> [MR95b] </ref>. Therefore, we need specific software for solving each multiple-domain PDE problem and it is not feasible to build it with the traditional software development technologies. <p> However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently <ref> [DR94b, MR95b, BW89, KG87] </ref>. Besides, we often need to use different discretization methods (or different density of the grids) and different linear solvers in the different subdomains depending on the characteristics of the local problem. <p> Similar ideas and methods in various contexts are presented in [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94]. Our description follows closely the one in [DR94b]. More details can be found in <ref> [MR95b, MR92b, Ric89] </ref>. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. <p> More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. Some material concerning these questions can be found in <ref> [MR95b, RVY93, QV91, DH96, CHL91, CR88] </ref>. 2.3.2 Interface Relaxation This method is based on the physical world relations among the parts of the model and follows the natural way the modeled event or process evolves. <p> The interface relaxation method iteratively solves the PDE problems (2.1) independently and then adjusts values along the interfaces to satisfy better the interface conditions (2.2). The procedure used to adjust values along the interfaces is called a relaxation formula. Examples of commonly used relaxation formulas <ref> [DR94b, MR95b] </ref> are: * average solution and normal derivatives (alternating Dirichlet and Neumann boundary conditions in time and average the solution values and the derivatives on the interfaces) [RVY93]; * least squares for interface conditions (use least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; *
Reference: [MR96] <author> E. Mascarenhas and V. Rego. Ariadne: </author> <title> Architecture of a Portable Threads System Supporting Thread Migration. </title> <journal> Software Practice and Experience, </journal> <volume> 26(3) </volume> <pages> 327-357, </pages> <year> 1996. </year>
Reference-contexts: Several projects address the need for process or thread migration between different computing units. Rego et al. <ref> [MR96, MR95a, MKR95] </ref> have explored this issue in their systems ParaSol, Ariadne, and Arahne, which provide various programmer and runtime facilities for process and thread migration among homogeneous and heterogeneous computing environments. The motivation for their research comes from 13 distributed simulation. Similar mechanisms are described in [FKT95]. <p> The main issue is then the correct distribution of the solver agents to balance the load. This can be done by the global execution interface in several ways. One is to reassign agents <ref> [MR96, MR95a, MKR95, Ret al.93] </ref> to appropriate computing units; another is to split some subdomains further and distribute them to separate computing units. <p> the computing agents and user cooperation, there is need to experiment with other commercial and/or standard communication and integration mechanisms and tools (like CORBA-compliant tools, the PDELab software bus, or Java-based software). * Techniques for load balancing the hardware system by using migrating threads should be explored (e.g., as in <ref> [MR96, MR95a, MKR95] </ref>), by enabling the solver wrappers to decompose a domain into smaller subdomains. This requires developing algorithms and metrics for global estimation of the load of the computing units. * Implementation of the MPSE architecture for other problem domains in scien tific computing.
Reference: [Nat95] <author> R. Natarajan. </author> <title> Domain Decomposition Using Spectral Expansions of Steklov-Poincare Operators. </title> <journal> SIAM J. Sci. Comput., </journal> <volume> 16(2) </volume> <pages> 470-485, </pages> <year> 1995. </year>
Reference-contexts: Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the solution) [Lai92]; * Steklov-Poincare operator method (alternate Dirichlet on the PDEs and Neu-mann on dual PDEs originated from Steklov-Poincare operator) <ref> [LTDRV91, Ago90, Nat95] </ref>. The details of their derivations or analysis are not discussed here. We now formulate the interface relaxation technique mathematically as follows.
Reference: [OAI + 94] <author> K. Osaki, H. Asama, Y. Ishida, K. Yokota, A. Matsumoto, H. Kaetsu, and I. endo. </author> <title> Negotiation Method for Collaborating Team Organization among Multiple Robots. </title> <booktitle> In Proc. Second Intl. Symp. on Distributed Autonomous Robotic Systems, </booktitle> <pages> pages 199-210, </pages> <address> Tokyo, Japan, July 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: are many agent-based systems developed [WJ95, Sho93, Vet al.94, SH93] for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control <ref> [OAI + 94] </ref>, which demonstrate the capabilities of the agent technology. An important aspect of these systems is their modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface. <p> In [XY96] Xiangdong and Yung consider the problem of rendezvous ("meeting" to exchange information or coordinate activities) in the context of high dynamics of the multiagent system and propose an algorithm that iteratively converges to a "commonly known place" for the "meeting". Osaki et al. <ref> [OAI + 94] </ref> describe a complex cooperative multiagent system designed 19 to coordinate a team of cooperating autonomous robots. They design a negotiating and learning mechanism which allows the robots to self-organize into groups with a "leader" and "followers" and discuss its implementation.
Reference: [OJ95] <editor> G. O'Hare and N. Jennings, editors. </editor> <booktitle> Foundations of Distributed Artificial Intelligence, </booktitle> <address> New York, 1995. </address> <publisher> Wiley Inter-Science. </publisher>
Reference-contexts: There are some general principles that help the systems to cope with this uncertainty <ref> [OJ95, AAA95, Les95] </ref> that include: * design goals to produce the solution with minimal use of communication and computational resources | i.e., achieving an "acceptable" answer with the avail able amount of resources; * incremental resolution of uncertainty through negotiation; * reasonable access to resource information and quality of service information;
Reference: [OPL94] <author> T. Oates, M. Prasad, and V. Lesser. </author> <title> Cooperative Information Gathering: A Distributed Problem Solving Approach. </title> <type> Technical Report TR-94-66, </type> <institution> University of Massachusetts, </institution> <year> 1994. </year>
Reference-contexts: Using KQML for the interagent communication in our programming environment ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed [WJ95, Sho93, Vet al.94, SH93] for very diverse problem domains ranging from cooperative information gathering <ref> [RCJ + 92, OPL94] </ref>, to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the capabilities of the agent technology. <p> Agent-based systems can minimize centralized control. We believe that using such systems to handle complex mathematical models is natural and direct. The agent paradigm allows distributed problem solving <ref> [OPL94] </ref> which is distinct from merely using distributed computing. The ability of the agents to autonomously pursue their 17 goals can resolve the problems during the solution process without user intervention. This allows seamless derivation of the global solution.
Reference: [Pur94] <author> J. Purtilo. </author> <title> The POLYLITH Software Bus. </title> <journal> ACM Trans. Prog. Lang. Systems, </journal> <volume> 16(1) </volume> <pages> 151-174, </pages> <year> 1994. </year>
Reference-contexts: OpenMath is an attempt to define a standard for communicating mathematical objects, processable by computers between applications. 9 There exist component-integration systems like the POLYLITH software bus <ref> [Pur94] </ref> which are oriented toward distributed systems developers and provide decoupling facilities to the programmers in order to successfully interface relatively independent software entities.
Reference: [QPV92] <author> A. Quarteroni, F. Pasquarelli, and A. Valli. </author> <title> Heterogeneous Domain Decomposition: Principles, Algorithms, Applications. </title> <editor> In D. Keyes et al., editor, </editor> <booktitle> Proc. of Fifth Intl. Symp. Domain Decomposition Methods for PDEs, </booktitle> <pages> pages 129-150, </pages> <address> Philadelphia, Pennsylvania, 1992. </address> <publisher> SIAM Publications. </publisher> <pages> 127 </pages>
Reference-contexts: Therefore, the network abstraction of a physical system or artifact allows 3 us to build a software system which is a network of collaborating well defined numerical objects along with a set of interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [MR95b, QPV92, MR92a] </ref> for the case of collaborating PDE models. The results obtained so far verify the feasibility and potential of network-based prototyping.
Reference: [QV91] <author> A. Quarteroni and A. Valli. </author> <title> Theory and Apllication of Steklov-Poincare Operators for Boundary Value Problems: The Heterogenous Operator Case. </title> <editor> In R. Glowinski et al., editor, </editor> <booktitle> Fourth Intl. Symp. on Domain Decomposition Methods for Partial Differential Equations, </booktitle> <pages> pages 58-81, </pages> <address> Philadelphia, PA, </address> <year> 1991. </year> <note> SIAM. </note>
Reference-contexts: More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. Some material concerning these questions can be found in <ref> [MR95b, RVY93, QV91, DH96, CHL91, CR88] </ref>. 2.3.2 Interface Relaxation This method is based on the physical world relations among the parts of the model and follows the natural way the modeled event or process evolves.
Reference: [RB85] <author> J. R. Rice and R. F. Boisvert. </author> <title> Solving Elliptic Problems Using ELL-PACK. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: For example, the mathematical software package RPI adaptively solves parabolic PDEs in one and two space dimensions using finite-element procedures that can automatically select and vary both the mesh and the elements. Temporal integration, within a method-of-lines framework, automatically chooses between backward-difference and Runge-Kutta methods. Ellpack <ref> [RB85] </ref> was designed to solve second-order elliptic PDEs in 2D and 3D and to evaluate software for such computations. It is a modular system with a domain-specific PDE language and a variety of elliptic PDE solvers. XEllpack and Parallel Ellpack are recent extensions. <p> They also make use of the high performance computing (HPC) hardware. A good example of such solvers is //ELLPACK <ref> [HR92, RB85] </ref> which has tools for defining the problem (domain, PDE, boundary conditions), offers 21 a set of discretization methods for various problems, contains a set of linear solvers, and has a set of routines for visualization of the solution. <p> After the problem is defined, an //ELLPACK program <ref> [RB85] </ref> is generated which is then translated into a Fortran program containing the information where (on which hardware platform) the resulting executable will be run. //ELLPACK is able to use a variety of hardware platforms, including several parallel and distributed computer architectures.
Reference: [RB96] <author> J. R. Rice and R. F. Boisvert. </author> <title> From Scientific Software Libraries to Problem-Solving Environments. </title> <journal> IEEE Computational Science & Engineering, </journal> <volume> 3(3) </volume> <pages> 44-53, </pages> <month> Fall </month> <year> 1996. </year>
Reference-contexts: At the core of PDELab is the Purdue PSE kernel [WHR + 96a] which provides a component communication / integration mechanism, object repository, and a notebook-like user interface. For a detailed overview of PSEs, their history, current research directions we refer the readers to <ref> [GHR94, RB96] </ref>. 2.1.2 Distributed Software Integration | Methods, Tools, Systems Some attempts to combine several scientific computing applications in a (more or less) single environment have recently been reported in the literature.
Reference: [RCJ + 92] <author> R. Rao, S. Card, H. Jellinek, J. Mackinlay, and G. Robertson. </author> <title> The Information Grid: A Framework for Information Retrieval and Retrieval-Centered Applications. </title> <booktitle> In Proc. ACM UIST'92, </booktitle> <pages> pages 23-32. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: Using KQML for the interagent communication in our programming environment ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed [WJ95, Sho93, Vet al.94, SH93] for very diverse problem domains ranging from cooperative information gathering <ref> [RCJ + 92, OPL94] </ref>, to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the capabilities of the agent technology.
Reference: [Res] <institution> Khoros Research. </institution> <note> What is Khoros? http://www.khoros.unm.edu/ khoros/khoros2/home.html. </note>
Reference-contexts: Frost [Fro95] overviews such environments that currently exist and outlines the system characteristics and design considerations for similar future software. Some examples of component integration environments with visual programming are AVS [Kya] and Khoros <ref> [Res] </ref> which have evolved from scientific visualization environments. These environments provide very useful assistance and services to the non-expert in computing user via their visual programming interfaces, and present the only promising route in our view at this time to GUIs for building MPSEs to be used by non-experts.
Reference: [Ret al.93] <author> V. Rego et al. </author> <title> Process Mobility in Distributed Memory Simulation Systems. </title> <booktitle> In Proc. Winter Simulation Conference, </booktitle> <pages> pages 722-730. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: The main issue is then the correct distribution of the solver agents to balance the load. This can be done by the global execution interface in several ways. One is to reassign agents <ref> [MR96, MR95a, MKR95, Ret al.93] </ref> to appropriate computing units; another is to split some subdomains further and distribute them to separate computing units.
Reference: [Ric89] <author> J. R. Rice. </author> <title> Modeling with Collaborating PDE Solving Modules. </title> <booktitle> In Seventh Intl. Conf on Mathematical and Computer Modeling, </booktitle> <pages> page n.a., </pages> <year> 1989. </year> <type> (manuscript). </type>
Reference-contexts: Similar ideas and methods in various contexts are presented in [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94]. Our description follows closely the one in [DR94b]. More details can be found in <ref> [MR95b, MR92b, Ric89] </ref>. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. <p> average the solution values and the derivatives on the interfaces) [RVY93]; * least squares for interface conditions (use least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; * simplification of the least squares method by McFaddin [MR92b]; * discrete Newton's method for the interface problem <ref> [Ric89] </ref>; * Robin interface conditions (use a convex combination of Dirichlet and Neumann data as Robin interface conditions) [Lio90, DH96]; * Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28 * shooting method for solving ODEs (solve a "defect" equation on the interface using Picard iteration to obtain the
Reference: [Ric94] <author> J. R. Rice. </author> <title> Processing PDE Interface Conditons. </title> <type> Technical Report TR-94-041, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1994. </year>
Reference-contexts: These discussions are based on the information and reasoning presented in <ref> [Ric94, DR94b] </ref>. 20 2.3.1 Solving PDE Problems 2.3.1.1 Solvers for Simple PDE Problems Many important physical world phenomena in the natural sciences are modeled mathematically by partial differential equations (PDEs) which are then solved numerically employing the methods of scientific computing. <p> The main issue to address is how to obtain a global solution out of the local solutions. One possible approach to satisfy the interface conditions is described in <ref> [Ric94] </ref>. We first discretize the subdomains independently and form a local linear system. Since we use the interface conditions for grid points close to the interface, the linear system contains unknowns from the neighboring domain. <p> Since we may want to apply also the direct method discussed in <ref> [Ric94] </ref> and, for added flexibility and reusability of the calculations, we would like to find the polynomial P (x; y) in a form that does not depend on the specific data (U i = U (x i ; y i ) and G i ) of the interpolation (problem) points. <p> We describe a parallel version of the algorithm for this method below. The solution algorithm for direct solvers described in <ref> [Ric94] </ref> is a straightforward implementation of the main idea which does not allow extensive use of the inherent parallelism. <p> To explain our approach, we use the same problem and the same approximation and discretization schemes as in <ref> [Ric94] </ref>. The main difference is that now we assume that both solvers 59 have the correspondence between the row indices of the shared terms in the two domains (as opposed to the case before, when only the right-hand side domain solver was required to have them). <p> One can easily alter the discretization algorithms to achieve that by adding the mirror image of the steps performed in <ref> [Ric94] </ref> in order to supply the right domain solver with the correspondence of the row indices. <p> Figure 4.3 presents schematically the solvers' configurations and the mathematical structures after the discretization has been performed. u PDE v PDE M 1 u = m 1 = M 2 v + m 2 (4.7) Bv = g (4.9) As is pointed out in <ref> [Ric94] </ref>, the v solver for the right-hand side domain can not use those terms in M 2 and N 2 whose corresponding terms in M 1 and N 1 have been used to eliminate some equations in the left domain (i.e., have contained pivot elements). <p> Note that the terms used as pivots by the other solver must not be eliminated (so that the factorization process in the other domain is not affected), much like the approach in <ref> [Ric94] </ref> when we could not eliminate in the right domain the terms used as pivots by the left domain. The messages of the type eliminate q,r,m can be grouped in a large message which is sent after the elimination is done. <p> The pseudocode describes the actions of either of the two solvers; the actions which are identical or very similar to the original algorithm presented in <ref> [Ric94] </ref> are not given in detail. 62 INITIALIZATION Do the initialization described in [Ric94] and also P = fg R = f1 : : : Jg Determine who changes the pivot in case of collision FACTORIZATION For k = 1 to I Choose a pivot p from R If the other <p> The pseudocode describes the actions of either of the two solvers; the actions which are identical or very similar to the original algorithm presented in <ref> [Ric94] </ref> are not given in detail. 62 INITIALIZATION Do the initialization described in [Ric94] and also P = fg R = f1 : : : Jg Determine who changes the pivot in case of collision FACTORIZATION For k = 1 to I Choose a pivot p from R If the other solver has not finished yet Receive p other (the index corresponding to the
Reference: [RRFH96] <author> J. Robinson, S. Russ, B. Flachs, and B. Heckel. </author> <title> A Task Migration Implementation of the Message-Passing Interface. </title> <booktitle> In Proc. Fifth IEEE Intl. Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 61-68, </pages> <address> Los Alamitos, California, </address> <month> August </month> <year> 1996. </year> <journal> IEEE, IEEE Comp. Soc. </journal> <note> Press. </note>
Reference-contexts: The motivation for their research comes from 13 distributed simulation. Similar mechanisms are described in [FKT95]. An implementation of process migration in Message Passing Interface (MPI) based applications is given in <ref> [RRFH96] </ref>. This problem can be approached also from the point of view of mobile, or "roaming" applications, as is done in [JdT + 95] where the Rover toolkit is presented.
Reference: [RVY93] <author> J. R. Rice, E. A. Vavalis, and D. Yang. </author> <title> Convergence Analysis of a Nonoverlapping Domain Decomposition Method for Elliptic PDEs. </title> <type> Technical Report CSD-TR-93-048, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1993. </year>
Reference-contexts: More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc. Some material concerning these questions can be found in <ref> [MR95b, RVY93, QV91, DH96, CHL91, CR88] </ref>. 2.3.2 Interface Relaxation This method is based on the physical world relations among the parts of the model and follows the natural way the modeled event or process evolves. <p> The procedure used to adjust values along the interfaces is called a relaxation formula. Examples of commonly used relaxation formulas [DR94b, MR95b] are: * average solution and normal derivatives (alternating Dirichlet and Neumann boundary conditions in time and average the solution values and the derivatives on the interfaces) <ref> [RVY93] </ref>; * least squares for interface conditions (use least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; * simplification of the least squares method by McFaddin [MR92b]; * discrete Newton's method for the interface problem [Ric89]; * Robin interface conditions (use a convex combination of Dirichlet <p> formulas [DR94b, MR95b] are: * average solution and normal derivatives (alternating Dirichlet and Neumann boundary conditions in time and average the solution values and the derivatives on the interfaces) <ref> [RVY93] </ref>; * least squares for interface conditions (use least squares fit on over-determined conditions at interface to find new interface values) [RVY93]; * simplification of the least squares method by McFaddin [MR92b]; * discrete Newton's method for the interface problem [Ric89]; * Robin interface conditions (use a convex combination of Dirichlet and Neumann data as Robin interface conditions) [Lio90, DH96]; * Schur complement (alternate Dirichlet and Neumann data in space) [FQZ88]; 28
Reference: [SD88] <author> R. G. Smith and R. Davis. </author> <title> Frameworks for Cooperation in Distributed Problem Solving. </title> <editor> In Bond and Gasser, editors, </editor> <booktitle> Readings in Distributed Artificial Intelligence, </booktitle> <pages> pages 61-70. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: Several researchers have addressed the issue of coordinating multiagent systems. For instance, Smith and Davis <ref> [SD88] </ref> propose two forms of multiagent cooperation, task sharing and result sharing. Task sharing essentially involves creating subtasks, and then farming them off to other agents. In this sense, it is closer to pure distributed computation. Result sharing is more data directed.
Reference: [SD93] <author> C. Schneidesch and M. Deville. </author> <title> Chebyshev Collocation Methods and Multi-Domain Decomposition for Navier-Stokes Equations in Complex Curved Geometries. </title> <journal> J. Comp. Physics, </journal> <volume> 106 </volume> <pages> 234-257, </pages> <year> 1993. </year> <month> 128 </month>
Reference-contexts: A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. Similar ideas and methods in various contexts are presented in <ref> [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94] </ref>. Our description follows closely the one in [DR94b]. More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc.
Reference: [SH93] <author> J. C. Schlimmer and L. A. Hermens. </author> <title> Software Agents: Completing Patternsand Constructing User Interfaces. </title> <journal> J. Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 61-89, </pages> <year> 1993. </year>
Reference-contexts: Using KQML for the interagent communication in our programming environment ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed <ref> [WJ95, Sho93, Vet al.94, SH93] </ref> for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the
Reference: [Sha94] <author> M. Shapiro. </author> <title> A Binding Protocol for Distributed Shared Objects. </title> <booktitle> In Proc. 14th Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 132-153. </pages> <publisher> ACM Press, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: The issue of binding protocol for objects (preparing a reference for invocation of some software target, locating the target, type-checking, installing a proxy, etc.) that can be tailored for object-specific semantics for the management of distribution, replication, or persistence, is addressed in <ref> [Sha94] </ref>. The proposed protocol is based 10 on remote procedure calls and it is recursive, where the recursion can be terminated at any point, trading off simplicity and performance against completeness.
Reference: [Sho93] <author> Y. Shoham. </author> <title> Agent-Oriented Programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: The agent-based paradigm is considered [WJ95, AWYe93] a step beyond the object-oriented computing. This paradigm started in the area of the computational intelligence but has spread to other areas in computer science. There is no universally accepted definition of an agent and the corresponding paradigm; some authors <ref> [WJ95, Sho93] </ref> distinguish between a "weak" and a "strong" notion of agents. <p> Using KQML for the interagent communication in our programming environment ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed <ref> [WJ95, Sho93, Vet al.94, SH93] </ref> for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the
Reference: [Smi93] <author> B. F. Smith. </author> <title> A Parallel Implementation of an Iterative Substructuring Algorithm for Problems in Three Dimensions. </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> 14(2) </volume> <pages> 67-82, </pages> <year> 1993. </year>
Reference-contexts: A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. Similar ideas and methods in various contexts are presented in <ref> [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94] </ref>. Our description follows closely the one in [DR94b]. More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc.
Reference: [Sul94] <author> K. J. Sullivan. Mediators: </author> <title> Easing the Design and Evolution of Integrated Systems. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1994. </year>
Reference-contexts: Their architecture uses object wrappers to encapsulate legacy components. The MetaPSE project at Indiana University [grob] looks into ways of automating the interface definitions and implementations between the software components of a MPSE-like system. In his Ph.D. thesis, Sullivan <ref> [Sul94] </ref> presents theoretical arguments and practical evidence for using specifically designed modules called mediators for tightly-coupled integration of pre-existing software systems. He bases his theoretical argument on the behavioral entity-relationship modeling which he claims successfully organize both the static and the dynamic structures of integrated systems.
Reference: [Sut] <author> R. Sutor. </author> <note> The OpenMath Consortium. http://wizkids.matematik.su.se/ users/leifj/wshop/openmath.html. </note>
Reference-contexts: The development of standards in communicating application-level data in scientific computing, such as OpenMath <ref> [Sut] </ref>, can be of significant help to developers of MPSEs.
Reference: [TFM95] <author> C. Thirunavukkarasu, T. Finin, and J. Mayfield. </author> <title> Secret Agents A Security Architecture for the KQML Agent Communication Language. </title> <booktitle> In Proc. Intelligent Information Agents Workshop, </booktitle> <pages> pages 176-184. </pages> <publisher> IEEE Comp. Soc. Press, </publisher> <month> December </month> <year> 1995. </year>
Reference-contexts: Some security features for KQML-communicating agents (agent identity verification, message encryption, key management) and architectures for their implementation are proposed in <ref> [TFM95, CT96] </ref>. The semantics of KQML messages depends on the underlying agent-based system. In other words, the messages do not have universal meaning or format of their contents | their interpretation may be different in different systems.
Reference: [TLKH94] <author> F. Tsung, J. Loellbach, O. Kwon, and C. Hah. </author> <title> A Three-Dimensional Structured / Unstructured Hybrid Navier-Stokes Method for Turbine Blade Rows. </title> <type> Technical Report ICOMP-94-31, </type> <institution> NASA, </institution> <year> 1994. </year>
Reference-contexts: A (potentially) more useful approach is outlined below. One of first procedures in the recent wave of interest in domain decomposition methods that implements this approach is outlined in [FQZ88]. Similar ideas and methods in various contexts are presented in <ref> [Lai92, Hei93, LTDRV91, SD93, Smi93, TLKH94] </ref>. Our description follows closely the one in [DR94b]. More details can be found in [MR95b, MR92b, Ric89]. We do not discuss here the important mathematical questions of the convergence of the method, the behavior of the solution in crosspoints of the interfaces, etc.
Reference: [Tra] <author> Transarc. </author> <title> Distributed Computing Environment (DCE) Product Overview. </title> <address> http://www.transarc.com/afs/transarc.com/public/www/ Public/ProdServ/Product/ DCE/dceoverview.html. </address>
Reference-contexts: The JavaBeans API [Jav] can also be considered an integration facility as it sets a standard for interoperability for the Java platform. The Open Software Foundation Distributed Computing Environments (DCE) | an implementation of which is described in <ref> [Tra] </ref> | offers a range of services for developing distributed applications. The communication and integration facility developed at Caltech [MCRS + 96, groa] is built around the concept of mailboxes for messages.
Reference: [Vet al.94] <author> L. Z. Varga et al. </author> <title> Integrating Intelligent Systems into a Cooperating Community for Electricity Distribution Management. </title> <journal> Intl. J. Expert Systems with Applications, </journal> <volume> 7(4) </volume> <pages> 42-49, </pages> <year> 1994. </year>
Reference-contexts: Using KQML for the interagent communication in our programming environment ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed <ref> [WJ95, Sho93, Vet al.94, SH93] </ref> for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the
Reference: [Wee94] <author> S. Weerawarana. </author> <title> Problem Solving Environments for Partial Differential Equation Based Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1994. </year>
Reference-contexts: Each communicating process possesses a number of inboxes and outboxes (essentially, message queues) and an outbox may be connected (statically) to an arbitrary inbox (presumably of a different process). Finally, we mention the software bus integration and communication system developed at Purdue <ref> [Wee94] </ref> which is aimed at solving the integration problem for components of scientific computing application and is used in the PDELab project [CCC + 94]. <p> The user's high-level view of the MPSE architecture is shown in Figure 3.3. The global communication medium used by all entities in the MPSE is called a software bus <ref> [Wee94] </ref>. The MPSE constructor communicates with the user through the user interface builder and uses the software bus to communicate with the templates in order to instantiate various agents. Agents communicate with each other through the software bus and have their own local user interfaces to interact with the user. <p> In addition to this, we adhere to the declarative approach in the agent interaction due to the heterogeneous environment of SciAgents. The contents of the messages is in the high-level language S-KIF for scientific computing. This is based on a language we developed for PDE data called PDESpec <ref> [Wee94] </ref>.
Reference: [Wei93] <author> M. Weiser. </author> <title> Some Computer Science Issues in Ubiquitous Computing. </title> <journal> Comm. ACM, </journal> <volume> 36(7) </volume> <pages> 74-83, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Here unresolved problems are the handling of the different time steps in the different subdomains, as well as the appropriate iteration algorithm for the interface relaxation. * In view of the growing importance of networked, mobile, and ubiquitous computing <ref> [Wei93] </ref>, we should consider architectural, algorithmic, and communication issues related to the presence of hardware, software, and administrative constraints associated with these computational scenarios.
Reference: [Wet al.88] <author> R. Wesson et al. </author> <title> Network Structures for Distributed Situation Assessment. </title> <editor> In Bond and Gasser, editors, </editor> <booktitle> Readings in Distributed Artificial Intelligence, </booktitle> <pages> pages 71-89. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year> <month> 129 </month>
Reference-contexts: In this sense, it is closer to pure distributed computation. Result sharing is more data directed. Different agents are solving different tasks, and keep on exchanging partial results to cooperate. They also proposed using "contract nets", to distribute tasks. Wes-son et al. showed <ref> [Wet al.88] </ref> how many intelligent sensor devices could pool their knowledge to obtain an accurate overall assessment of the situation. The specific task presented in their work involved detecting moving entities, even though each "sensor agent" saw only a part of the environment.
Reference: [WHR + 96a] <author> S. Weerawarana, E. Houstis, J. Rice, A. Catlin, M. Gaitatzes, S. Markus, and T. Drashansky. </author> <title> The Purdue PSE Kernel. </title> <booktitle> In Proc. Fourth Annual Object-Oriented Numerics Conf., </booktitle> <pages> pages 35-47, </pages> <year> 1996. </year> <note> (to appear). </note>
Reference-contexts: The user is provided with means to select components (tools) from different PDE solvers and to integrate them into a new PSE 8 to solve his/her specific problem. At the core of PDELab is the Purdue PSE kernel <ref> [WHR + 96a] </ref> which provides a component communication / integration mechanism, object repository, and a notebook-like user interface.
Reference: [WHR + 96b] <author> S. Weerawarana, E. Houstis, J. Rice, M. Gaitatzes, S. Markus, and A. Joshi. Web//ELLPACK: </author> <title> A Networked Computing Service on the World Wide Web. </title> <type> Technical Report TR 96-011, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1996. </year>
Reference-contexts: Each computing and consulting agent, as well as the MPSE agent instantiator, has its own user interface. All such interfaces are grouped in the local user interfaces layer. It is the first layer to which the users have direct access. To facilitate extensive use of 43 the virtual computing <ref> [WHR + 96b] </ref> model, and to allow collaboration between more than one users, the user interface of an agent must be separate from its functional core [Dew92].
Reference: [WJ95] <author> M. Wooldridge and N. Jennings. </author> <title> Intelligent Agents: </title> <journal> Theory and Practice. Knowledge Engineering Review, </journal> <volume> 10(2) </volume> <pages> 96-123, </pages> <year> 1995. </year>
Reference-contexts: It provides services to such applications through relocatable dynamic objects and remote procedure calls. 2.2 Agent-Based Computing and Multiagent Systems The trend of increased abstraction, encapsulation, and modularization in software technology has brought in the recent years the concept of an agent. The agent-based paradigm is considered <ref> [WJ95, AWYe93] </ref> a step beyond the object-oriented computing. This paradigm started in the area of the computational intelligence but has spread to other areas in computer science. <p> The agent-based paradigm is considered [WJ95, AWYe93] a step beyond the object-oriented computing. This paradigm started in the area of the computational intelligence but has spread to other areas in computer science. There is no universally accepted definition of an agent and the corresponding paradigm; some authors <ref> [WJ95, Sho93] </ref> distinguish between a "weak" and a "strong" notion of agents. <p> There is no universally accepted definition of an agent and the corresponding paradigm; some authors [WJ95, Sho93] distinguish between a "weak" and a "strong" notion of agents. Our discussion here is close to the weak notion of the concept in <ref> [WJ95] </ref>. 2.2.1 The Concept of an Agent An agent usually denotes a computer system that possesses the following properties [WJ95]. * Autonomy: Agents operate without the direct intervention of humans or others, and have some kind of control over their actions and internal state. * Social ability: Agents interact with other <p> Our discussion here is close to the weak notion of the concept in <ref> [WJ95] </ref>. 2.2.1 The Concept of an Agent An agent usually denotes a computer system that possesses the following properties [WJ95]. * Autonomy: Agents operate without the direct intervention of humans or others, and have some kind of control over their actions and internal state. * Social ability: Agents interact with other agents (and possibly humans) via some kind of agent-communication language. * Reactivity: Agents perceive their environment (which may be <p> In addition, the agent can use a traditional graphical user interface when communicating with users. Some authors attach additional properties to the agents that might be interpreted as concepts or features usually applicable to or exhibited by humans (such as knowledge, belief, trust, intention, obligation, emotion, etc.) <ref> [KO95, GK94, WJ95] </ref>. This leads to what is called a "stronger" notion of an agent, but we restrict our discussion to the weaker notion above since it is sufficient for our purposes. <p> Using KQML for the interagent communication in our programming environment ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed <ref> [WJ95, Sho93, Vet al.94, SH93] </ref> for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification [YME + 96], to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the <p> An important aspect of these systems is their modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface. In general, an agent architecture <ref> [WJ95] </ref> consists of the particular methodology for building agents, the communication system for the agents, and the rules for placing and executing agents.
Reference: [WJHC95] <author> S. Weerawarana, A. Joshi, E. N. Houstis, and A. C. Catlin. </author> <title> Using NCSA Mosaic to build notebook interfaces for CS&E applications. </title> <type> Technical Report CSD-TR-95-006, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: Finally, the functionality of the user interface requires a number 40 of tools and editors | a "notebook"-like interface <ref> [WJHC95] </ref>, tools for monitoring and browsing the computations, and tools for visualizing the different parts or the global solution. Consider now an MPSE built to solve a specific problem. We can group the software components integrated into it into five layers (see Figure 3.5).
Reference: [Xu92] <author> J. Xu. </author> <title> Iteration Methods by Space Decomposition and Subspace Correction. </title> <journal> SIAM Rev., </journal> <volume> 34 </volume> <pages> 581-613, </pages> <year> 1992. </year>
Reference-contexts: In order for this approach to be practical, the computations must be as independent from each other in different subdomains as possible. There exist a class of numerical methods, called domain decomposition methods <ref> [CGPW90, FQZ88, GGMP88, Xu92, KCM + 92] </ref> that address this issue in different ways. However, many domain decomposition methods that require overlapping of subdomains for various purposes cannot be used since the single-domain problems become closely related and cannot be solved independently [DR94b, MR95b, BW89, KG87].
Reference: [XY96] <author> Y. Xiangdong and M. Yung. </author> <title> Agent Rendesvous: a Dynamic Symmetry-Breaking Problem. </title> <booktitle> In Proc. ICALP'96, </booktitle> <pages> pages 610-621, </pages> <address> Berlin, Germany, July 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Decker and Lesser [DL92] propose to use the generalized partial global planning algorithm as an approach to distributed coordination. This algorithm introduces non-local concerns and constraints into the local scheduling of the agents' activities. In <ref> [XY96] </ref> Xiangdong and Yung consider the problem of rendezvous ("meeting" to exchange information or coordinate activities) in the context of high dynamics of the multiagent system and propose an algorithm that iteratively converges to a "commonly known place" for the "meeting".
Reference: [YME + 96] <author> X. Ying, R. Mural, J. Einstein, M. Shah, and E. Uberbacher. </author> <title> GRAIL: A Multi-Agent Neural Network System for Gene Identification. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 84(10) </volume> <pages> 1544-1552, </pages> <month> October </month> <year> 1996. </year> <note> APPENDICES 130 </note>
Reference-contexts: better opportunities for extensions and the inclusion of agents built by others. 2.2.3 Multiagent Systems There are many agent-based systems developed [WJ95, Sho93, Vet al.94, SH93] for very diverse problem domains ranging from cooperative information gathering [RCJ + 92, OPL94], to medical diagnostics and monitoring [HRet al.92], to gene identification <ref> [YME + 96] </ref>, to software testing [Ima96], to user interface design [AD96], and to robot control [OAI + 94], which demonstrate the capabilities of the agent technology. An important aspect of these systems is their modularity and flexibility.
References-found: 114

