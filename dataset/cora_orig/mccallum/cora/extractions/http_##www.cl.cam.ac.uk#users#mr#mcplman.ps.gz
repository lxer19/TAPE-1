URL: http://www.cl.cam.ac.uk/users/mr/mcplman.ps.gz
Refering-URL: http://www.cl.cam.ac.uk/users/mr/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The MCPL Programming Manual and User Guide  
Author: by Martin Richards 
Keyword: Systems programming language, Typeless language, MCPL, BCPL, Mintcode, Coroutines.  
Note: Notable features of MCPL are its pattern matching facilities and the simple way in which data structures are handled. This document gives the definition of the language, its library and how to obtain and install the system.  
Address: Cambridge  
Affiliation: Computer Laboratory University of  
Email: mr@uk.ac.cam.cl  
Web: http://www.cl.cam.ac.uk/users/mr/  
Date: October 1, 1997  
Abstract: MCPL is a programming language that has been derived from BCPL by the inclusion of features found in ML, C and Prolog. Like BCPL, it is typeless, uses a contiguous runtime stack and has no builtin garbage collector, but it does make extensive use of ML-like pattern matching. The low level aspects of the language resemble those of BCPL and C. MCPL uses its own function calling sequence, however it is designed to allow MCPL and C functions to call each other. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [CM81] <author> W.F. Clocksin and C.S. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: 1 Introduction The concepts underlying MCPL originates from my experience of using BCPL [RWS80] for the past 30 years and from lessons learnt using and teaching languages such as ML [Pau91], C [HS87] and Prolog <ref> [CM81] </ref> . Indeed, the name MCPL incorporates the letters ML, C and P in recognition of these languages. It is designed to be easy to learn and use, and easy to combine with C programs.
Reference: [HS87] <author> S.P. Harbison and G.L. Steele. </author> <title> C A Reference Manual. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction The concepts underlying MCPL originates from my experience of using BCPL [RWS80] for the past 30 years and from lessons learnt using and teaching languages such as ML [Pau91], C <ref> [HS87] </ref> and Prolog [CM81] . Indeed, the name MCPL incorporates the letters ML, C and P in recognition of these languages. It is designed to be easy to learn and use, and easy to combine with C programs.
Reference: [Pau91] <author> L.C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction The concepts underlying MCPL originates from my experience of using BCPL [RWS80] for the past 30 years and from lessons learnt using and teaching languages such as ML <ref> [Pau91] </ref>, C [HS87] and Prolog [CM81] . Indeed, the name MCPL incorporates the letters ML, C and P in recognition of these languages. It is designed to be easy to learn and use, and easy to combine with C programs.
Reference: [RWS80] <author> M. Richards and C. Whitby-Strevens. </author> <title> BCPL the language and its compiler. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1980. </year>
Reference-contexts: 1 Introduction The concepts underlying MCPL originates from my experience of using BCPL <ref> [RWS80] </ref> for the past 30 years and from lessons learnt using and teaching languages such as ML [Pau91], C [HS87] and Prolog [CM81] . Indeed, the name MCPL incorporates the letters ML, C and P in recognition of these languages.
References-found: 5

