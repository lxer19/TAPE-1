URL: ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-012-91b.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1991.html
Root-URL: http://www.cs.columbia.edu
Email: kaiser@cs.columbia.edu,  calton@cs.columbia.edu, 212-854-8110  
Phone: 212-854-3856  Fax: 212-666-0140  
Title: Dynamic Restructuring of Transactions  
Author: Gail E. Kaiser and Calton Pu 
Date: August 21, 1991  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Abstract: Open-ended activities are characterized by uncertain duration, unpredictable developments, and interactions with other concurrent activities. Like other database applications, they require consistent concurrent access and fault-tolerance, but their unconventional characteristics are incompatible with the conventional database mechanisms of concurrency and failure atomicity. We present the split-transaction and join-transaction operations for restructuring in-progress transactions, as an approach to consistent concurrent access and fault-tolerance for open-ended activities. Split-transaction divides an on-going transaction into two or more transactions that are serializable with respect to each other and all other transactions, and each of the new transactions is later committed or aborted independently of the others. Join-transaction merges two or more transactions that are serializable with respect to each other into a single transaction as if they had always been part of the same transaction, and all their work is now committed or aborted together. Split-transaction is useful for committing some work early or dividing on-going work among several co-workers. Join-transaction allows to hand over results to a co-worker to integrate into his or her own ongoing task. The transaction manager enforces that the new transaction(s) will in fact be serializable, and does not permit the split or join otherwise. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Evan W. Adams, Masahiro Honda, and Terrence C. Miller. </author> <title> Object management in a CASE environment. </title> <booktitle> In 11th International Conference on Software Engineering, </booktitle> <pages> pages 154-163, </pages> <address> Pittsburgh PA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: The user would definitely oppose deleting all of his work (by rolling back the transaction). He might, however, be able to perform some operations explicitly to restore consistency, such as manually merging multiple updates to data <ref> [1] </ref>. Thus, there is a need to support user control over transaction management as well as transaction execution. For instance, suppose a programmer Charlie is developing two modules, F and G, to be released together in a transaction. Module F has been coded and tested before module G is finished. <p> Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge <ref> [1] </ref> NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes
Reference: [2] <author> Malcolm Atkinson, Francois Bancilhon, David DeWitt, Klaus Dittrich, David Maier, and Stanley Zdonik. </author> <title> The Object-Oriented Database System Manifesto. </title> <publisher> Elsevier Science, </publisher> <year> 1990. </year>
Reference-contexts: These activities have become an important application area for which the next generation of databases are aiming <ref> [40, 2] </ref>. The common requirements of these activities include the ability to support consistent concurrent access and fault-tolerance when the activities are of uncertain duration, may include unpredictable developments, and often require interaction with other concurrent activities.
Reference: [3] <author> Francois Bancilhon, Won Kim, and Henry Korth. </author> <title> A model of CAD transactions. </title> <booktitle> In 11th International Conference on Very Large Databases, </booktitle> <pages> pages 25-33, </pages> <address> Stockholm, Sweden, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions <ref> [3] </ref> Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes Participation Domains [19] N/A Yes Limited Yes Transaction Restructuring N/A Yes Yes Limited Table 1: Comparison Table of Mechanisms 21 multilevel transactions, long transactions and cooperative transactions were discussed by Davies in 1973 [9]! Our work was influenced
Reference: [4] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, 199x. </institution>
Reference-contexts: A limited form of participation domains is currently being implemented for the multi-user Marvel environment <ref> [5, 4] </ref>, and we are investigating the integration of participation domains with transaction restructuring operations. It is interesting to note that many of the ideas implemented in the mechanisms surveyed were actually discussed earlier in other contexts.
Reference: [5] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling concurrency in rule-based development environments. </title> <journal> IEEE Expert, </journal> <volume> 5(6) </volume> <pages> 15-27, </pages> <month> December </month> <year> 1990. </year> <month> 23 </month>
Reference-contexts: A limited form of participation domains is currently being implemented for the multi-user Marvel environment <ref> [5, 4] </ref>, and we are investigating the integration of participation domains with transaction restructuring operations. It is interesting to note that many of the ideas implemented in the mechanisms surveyed were actually discussed earlier in other contexts.
Reference: [6] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Concurrency control in advanced database ap-plications. </title> <journal> ACM Computing Surveys, </journal> <note> 1991. In press. Available as Columbia University Department of Computer Science CUCS-425-89, revised March 1991. </note>
Reference-contexts: One of the authors has developed a survey of extended transaction models proposed in the literature and/or evident in existing systems <ref> [6] </ref>. The survey concentrates on concurrency control issues, and does not directly address recovery. have been implemented, and their capabilities for supporting uncertain duration, unpredictable developments, and interaction with other concurrent activities.
Reference: [7] <author> Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1987. </year>
Reference-contexts: B need not be aborted, however, if BWriteLast is non-empty but ShareSet is empty. One special case of the serial case is when we divide T into two consecutive subsequences, A and B. We then call A a prefix of T relative to B <ref> [7] </ref>. A prefix can be split and committed, saving its results and releasing its resources. The more general case of the serial case is when the operations in A and B interleave, but for each data item, A's accesses constitute a prefix of T relative to B.
Reference: [8] <author> Panayiotis K. Chrysanthis and Krithi Ramamritham. </author> <title> ACTA: A framework for specifying and reasoning about transaction structure and behavior. </title> <editor> In Hector Garcia-Molina and H.V. Jagadish, editors, </editor> <booktitle> 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <address> Atlantic City NJ, </address> <month> May </month> <year> 1990. </year> <journal> Special issue of SIGMOD Record, </journal> <volume> 19(2), </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: Chrysanthis and Ramamritham have defined the ACTA formalism for specifying the semantics of various transaction models in terms of commit-dependencies and abort-dependencies among transactions <ref> [8] </ref>. They have used this formalism to model several extended transaction schemes, including our transaction restructuring operations.
Reference: [9] <author> Charles T. Davies, Jr. </author> <title> Recovery semantics for a DB/DC system. </title> <booktitle> In 28th ACM National Conference, </booktitle> <pages> pages 136-141, </pages> <address> Atlanta GA, </address> <month> August </month> <year> 1973. </year>
Reference-contexts: Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes Participation Domains [19] N/A Yes Limited Yes Transaction Restructuring N/A Yes Yes Limited Table 1: Comparison Table of Mechanisms 21 multilevel transactions, long transactions and cooperative transactions were discussed by Davies in 1973 <ref> [9] </ref>! Our work was influenced by the brief mention of the terms split and join in conjunction with transactions in a technical report by Jessop et al. [18] discussing the Eden Transactional File System.
Reference: [10] <author> Mark Dowson and Brian Nejmeh. </author> <title> Nested transactions and visibility domains. </title> <booktitle> In 1989 ACM SIGMOD Workshop on Software CAD Databases, </booktitle> <pages> pages 36-38, </pages> <address> Napa CA, </address> <month> February </month> <year> 1989. </year> <note> Position paper. </note>
Reference-contexts: RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains <ref> [10] </ref> N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes Participation Domains [19] N/A Yes Limited Yes Transaction Restructuring N/A Yes Yes Limited Table 1: Comparison Table of Mechanisms 21 multilevel transactions,
Reference: [11] <author> Aral Ege and Clarence A. Ellis. </author> <title> Design and implementation of Gordion, an object base management system. </title> <booktitle> In 3rd International Conference on Data Engineering, </booktitle> <pages> pages 226-234, </pages> <address> Los Angeles CA, </address> <month> February </month> <year> 1987. </year>
Reference-contexts: [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification <ref> [11] </ref> Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes Participation Domains [19] N/A Yes Limited Yes Transaction Restructuring N/A Yes Yes Limited Table 1:
Reference: [12] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> 19(11) 624-632, November 1976. 
Reference-contexts: precise regarding the notion of "safe"; this kind of issue, however, is treated more carefully when we later examine user-controlled transactions. 3.2 Nested Transactions The previous section assumed the simple transaction model where each transaction is composed of a sequence of operations that can be abstracted into Reads and Writes <ref> [12] </ref>, starting with 9 Begin and ending with either Commit or Abort. This sequential model has been extended to include parallelism. Rather than a general concurrent model, where the transaction constitutes a partially ordered set of database operations, some form of nesting is employed [31, 34].
Reference: [13] <author> S.I. Feldman. </author> <title> Make | a program for maintaining computer programs. </title> <journal> Software | Practice & Experience, </journal> <volume> 9(4) </volume> <pages> 255-265, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: This applies to make <ref> [13] </ref> as well, where the appropriate split points are the distinct command lines. However, an individual linking or compilation job can run very long, and reasonable split points are not so obvious | and in fact only (2) applies to most instances of these tools.
Reference: [14] <author> Mary F. Fernandez and Stanley B. Zdonik. </author> <title> Transaction groups: A model for controlling cooperative work. </title> <booktitle> In 3rd International Workshop on Persistent Object Systems: Their Design, Implementation and Use, </booktitle> <pages> pages 128-138, </pages> <address> Queensland, Australia, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: is also possible to extend the notion of nested supertransactions to allow interaction between Bob and Alice by treating their work on F, G, and the other modules as all transactions of the same supertransaction, and in fact such transaction grouping is the basis of many approaches to open-ended activities <ref> [39, 14] </ref>. But both nested transactions and transaction groups presume that the structure of the set of (sub)transactions is known in advance, when the code is written. <p> Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups <ref> [14] </ref> ObServer II Limited Limited Yes Participation Domains [19] N/A Yes Limited Yes Transaction Restructuring N/A Yes Yes Limited Table 1: Comparison Table of Mechanisms 21 multilevel transactions, long transactions and cooperative transactions were discussed by Davies in 1973 [9]! Our work was influenced by the brief mention of the terms
Reference: [15] <author> Hector Garcia-Molina. </author> <title> Using semantic knowledge for transaction processing in a distributed database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(2) </volume> <pages> 186-213, </pages> <month> June </month> <year> 1983. </year> <month> 24 </month>
Reference-contexts: For instance, some of the ideas related to 20 Mechanism System Duration Unpredictable Interaction Altruistic Locking [37] N/A Yes No Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity <ref> [15] </ref> N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos
Reference: [16] <author> Hector Garcia-Molina and Kenneth Salem. </author> <title> Sagas. </title> <editor> In Umeshwar Dayal and Irv Traiger, editors, </editor> <booktitle> ACM SIGMOD 1987 Annual Conference, </booktitle> <pages> pages 249-259, </pages> <address> San Francisco CA, </address> <month> May </month> <year> 1987. </year> <journal> Special issue of SIGMOD Record, </journal> <volume> 16(3), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: to 20 Mechanism System Duration Unpredictable Interaction Altruistic Locking [37] N/A Yes No Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas <ref> [16] </ref> N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43]
Reference: [17] <author> Irene Greif, </author> <title> editor. Computer-Supported Cooperative Work: A Book of Readings. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo CA, </address> <year> 1988. </year>
Reference-contexts: The same issues come up in office automation systems and other computer-supported cooperative work <ref> [17] </ref>. A simple example of cooperation among multiple users is when a programmer has finished a hash-table package that she is going to use in some larger program. Somebody else discovers her package and wants to use it.
Reference: [18] <author> W.H. Jessop, J.D. Noe, D.M. Jacobson, J-L. Baer, and C. Pu. </author> <title> An introduction to the Eden transactional file system. </title> <type> Technical Report 82-02-05, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> February </month> <year> 1982. </year>
Reference-contexts: Yes Yes Limited Table 1: Comparison Table of Mechanisms 21 multilevel transactions, long transactions and cooperative transactions were discussed by Davies in 1973 [9]! Our work was influenced by the brief mention of the terms split and join in conjunction with transactions in a technical report by Jessop et al. <ref> [18] </ref> discussing the Eden Transactional File System. Chrysanthis and Ramamritham have defined the ACTA formalism for specifying the semantics of various transaction models in terms of commit-dependencies and abort-dependencies among transactions [8]. They have used this formalism to model several extended transaction schemes, including our transaction restructuring operations.
Reference: [19] <author> Gail E. Kaiser. </author> <title> A flexible transaction model for software engineering. </title> <booktitle> In 6th International Conference on Data Engineering, </booktitle> <pages> pages 560-567, </pages> <address> Los Angeles CA, </address> <month> February </month> <year> 1990. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes Participation Domains <ref> [19] </ref> N/A Yes Limited Yes Transaction Restructuring N/A Yes Yes Limited Table 1: Comparison Table of Mechanisms 21 multilevel transactions, long transactions and cooperative transactions were discussed by Davies in 1973 [9]! Our work was influenced by the brief mention of the terms split and join in conjunction with transactions in
Reference: [20] <author> Gail E. Kaiser. </author> <title> Interfacing cooperative transactions to software development environments. </title> <journal> Office Knowledge Engineering, </journal> <volume> 4(1) </volume> <pages> 56-78, </pages> <month> February </month> <year> 1991. </year> <type> Invited paper. </type>
Reference-contexts: Perhaps a catalog of active and suspended transactions could be maintained by the design environment, with each associated with a human-intelligible description of the task being undertaken in that transaction. Further discussion of user interface issues is outside the scope of this paper; see <ref> [20] </ref>. The Join command on some transaction T dissolves T, making its results part of the target transaction S. The user provides one argument, the name of the ongoing transaction to join.
Reference: [21] <author> Gail E. Kaiser and Dewayne E. Perry. </author> <title> Workspaces and experimental databases: Automated support for software maintenance and evolution. </title> <booktitle> In Conference on Software Maintenance, </booktitle> <pages> pages 108-114, </pages> <address> Austin TX, September 1987. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This problem can be solved by dividing the programmers into groups whose modules most closely depend on each other <ref> [21] </ref>. Only programmers within the same group see the new version of a module, while others initially use the old version; only the members of the same group must split their transactions at the same time. <p> Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination <ref> [21] </ref> Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD
Reference: [22] <author> Gail E. Kaiser and Dewayne E. Perry. </author> <title> Making progress in cooperative transaction models. </title> <journal> Data Engineering, </journal> <volume> 14(1), </volume> <month> March </month> <year> 1991. </year> <type> Invited paper. </type>
Reference-contexts: If the project can be separated into two serializable parts, then a split operation would define the responsibilities clearly. In such cases, it may be desirable for a managerial user to be able to execute transaction restructuring operations externally, to affect in-progress transactions controlled by subordinate users <ref> [22] </ref>. Join-transactions are useful when two open-ended activities turn out to relate to each other through some consistency constraints, after the activities have started.
Reference: [23] <author> Randy H. Katz. </author> <title> Toward a unified framework for version modeling in engineering databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: To insist on concurrency atomicity in multi-user environments might thus decrease concurrency or, more significantly, actually disallow desirable forms of cooperation among users. The first example problem above could be solved by maintaining multiple versions of modules <ref> [23] </ref>. Then Alice could use the object code for an old version of F together with the new version of G in order to build the system executable.
Reference: [24] <author> P. Klahold, G. Schlageter, R. Unland, and W. Wilkes. </author> <title> A transaction model supporting complex applications in integrated information systems. </title> <booktitle> In ACM-SIGMOD 1985 International Conference on Management of Data, </booktitle> <pages> pages 388-401, </pages> <address> Austin TX, </address> <month> May </month> <year> 1985. </year> <note> ACM. </note>
Reference-contexts: R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions <ref> [24] </ref> N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes Participation Domains [19] N/A Yes Limited Yes Transaction Restructuring N/A Yes Yes Limited Table 1: Comparison Table of Mechanisms 21 multilevel transactions, long transactions and cooperative transactions were discussed by
Reference: [25] <author> Henry F. Korth and Gregory D. Speegle. </author> <title> Formal model of correctness without serializability. </title> <booktitle> In SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 379-386, </pages> <address> Chicago IL, June 1988. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Altruistic Locking [37] N/A Yes No Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability <ref> [25] </ref> N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11]
Reference: [26] <author> H. T. Kung and John Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2) </volume> <pages> 213-226, </pages> <month> June </month> <year> 1981. </year> <month> 25 </month>
Reference-contexts: Thus mechanisms based on static analysis are not applicable. Optimistic concurrency control <ref> [26] </ref> also should not be used, since this might lead to situations in which the user might have invested many hours running a transaction, only to find out later when he wants to commit his work that some of the operations he performed within the transaction violated some consistency constraints. <p> Join-transaction can group a particular subset of modules that have been tested together and release them to the utility programmers. 6 Implementation Issues When the split-transaction operation is called, the transaction manager checks the external operations on data using an optimistic concurrency control algorithm <ref> [26] </ref> to certify the serializ-ability between A and B. This certification sweeps the external operations recorded on the log or versions to verify the three properties enumerated in section 3.1, for programmed transactions, or in section 4 for user-controlled transactions, to ensure serializability.
Reference: [27] <author> Ali R. Kutay and Charles M. Eastman. </author> <title> Transaction management in engineering databases. </title> <booktitle> In Engineering Design Applications, Annual Meeting Database Week, </booktitle> <pages> pages 73-80, </pages> <address> San Jose CA, May 1983. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: For instance, some of the ideas related to 20 Mechanism System Duration Unpredictable Interaction Altruistic Locking [37] N/A Yes No Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions <ref> [27] </ref> N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes
Reference: [28] <author> P.J. Leu and B. Bhargava. </author> <title> Multidimensional timestamp protocols for concurrency control. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(12):1238-1253, </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: For two-phase locking, the transaction manager simply changes the ownership of the locks in BRead-Set and BWriteSet to the new transaction. For timestamps, it needs to assign a new timestamp to B, preferably immediately after A's timestamp. Multidimensional timestamps <ref> [28] </ref> is one of the techniques that provides this capability. From the crash recovery point of view, the transfer is also simple. For recovery systems based on versions (which is what we have assumed in this discussion), the system simply makes B the creator of the versions in BWriteSet.
Reference: [29] <author> Raymond Lorie and Wilfred Plouffe. </author> <title> Complex objects and their use in design transactions. </title> <booktitle> In Engineering Design Applications, Annual Meeting Database Week, </booktitle> <pages> pages 115-121, </pages> <address> San Jose CA, </address> <month> May </month> <year> 1983. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions <ref> [29] </ref> System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD
Reference: [30] <author> Nancy A. Lynch. </author> <title> Multilevel atomicity | a new correctness criterion for database concur-rency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(4) </volume> <pages> 484-502, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: In particular, blocking a transaction until another commits is rarely acceptable for long transactions. The problem of long transactions has also been addressed in traditional data processing applications, bank audit transactions, for example, where most proposed solutions rely on a priori static analysis of the transaction code <ref> [30, 37] </ref>. Consider the following example scenario. Say that a programmer Bob edits and recompiles module F, and then works for several days on other modules. <p> instance, some of the ideas related to 20 Mechanism System Duration Unpredictable Interaction Altruistic Locking [37] N/A Yes No Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity <ref> [30] </ref> N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes
Reference: [31] <author> J. Eliot B. Moss. </author> <title> Nested transactions and reliable distributed computing. </title> <booktitle> In 2nd Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 33-39, </pages> <address> Pittsburgh PA, </address> <month> July </month> <year> 1982. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: This sequential model has been extended to include parallelism. Rather than a general concurrent model, where the transaction constitutes a partially ordered set of database operations, some form of nesting is employed <ref> [31, 34] </ref>. In the nested transactions model, there is a set of top-level transactions, which may be executed concurrently with respect to each other. A top-level transaction consists of a sequence of steps, where each step is either a primitive operation (Read or Write) or the initiation of a subtransaction.
Reference: [32] <editor> Erich Neuhold and Michael Stonebraker (editors). </editor> <booktitle> Future directions in DBMS research. SIGMOD Record, </booktitle> <volume> 18(1) </volume> <pages> 17-26, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Adaptive recovery, committing resources that will not change; 2. Added concurrency, releasing the committed resources or transferring ownership of un committed resources; and 3. Serializable access to resources by all activities. We do not intend to address the debate of whether serializability is too restrictive for open-ended activities <ref> [32, 36] </ref>. Powerful serializable access is useful even in a system that admits non-serializable operations, and therefore we restrict our discussion to serializable access.
Reference: [33] <author> U. Pradel, G. Schlageter, and R. Unland. </author> <title> Redesign of optimistic methods: Improving performance and availability. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <pages> pages 466-473, </pages> <address> Los Angeles CA, </address> <month> February </month> <year> 1986. </year>
Reference-contexts: It is interesting to note that many of the ideas implemented in the mechanisms surveyed were actually discussed earlier in other contexts. For instance, some of the ideas related to 20 Mechanism System Duration Unpredictable Interaction Altruistic Locking [37] N/A Yes No Limited Snapshot Validation <ref> [33] </ref> N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No
Reference: [34] <author> Calton Pu. </author> <title> Replication and Nested Transactions in the Eden Distributed System. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Washington, </institution> <year> 1986. </year>
Reference-contexts: This sequential model has been extended to include parallelism. Rather than a general concurrent model, where the transaction constitutes a partially ordered set of database operations, some form of nesting is employed <ref> [31, 34] </ref>. In the nested transactions model, there is a set of top-level transactions, which may be executed concurrently with respect to each other. A top-level transaction consists of a sequence of steps, where each step is either a primitive operation (Read or Write) or the initiation of a subtransaction.
Reference: [35] <author> Calton Pu. Supertransactions. </author> <booktitle> In 2nd Workshop on Large Grained Parallelism, </booktitle> <address> Hidden Valley PA, </address> <month> October </month> <year> 1987. </year>
Reference-contexts: A subtransaction may execute concurrently with further steps in the top-level transaction as well as its sibling subtransactions. The subtransactions may themselves be nested. The nested transactions model has been extended to include supertransactions <ref> [35] </ref>. A su-pertransaction encloses two or more independent transactions and makes them appear atomic to transactions outside the supertransaction. The same properties of split-transaction described in section 3.1, relating the data sets in A and B, hold for the concurrent model.
Reference: [36] <author> Lawrence A. Rowe. </author> <title> Report on the 1989 Software CAD Databases Workshop. </title> <editor> In Gerhard Ritter, editor, </editor> <booktitle> 11th World Computer Conference IFIP Congress '89, </booktitle> <pages> pages 719-725, </pages> <address> San Francisco CA, August 1989. </address> <publisher> Elsevier Science Publishers B.V. </publisher>
Reference-contexts: Adaptive recovery, committing resources that will not change; 2. Added concurrency, releasing the committed resources or transferring ownership of un committed resources; and 3. Serializable access to resources by all activities. We do not intend to address the debate of whether serializability is too restrictive for open-ended activities <ref> [32, 36] </ref>. Powerful serializable access is useful even in a system that admits non-serializable operations, and therefore we restrict our discussion to serializable access.
Reference: [37] <author> Kenneth Salem, Hector Garcia-Molina, and Rafael Alonso. </author> <title> Altruistic locking: A strategy for coping with long lived transactions. </title> <booktitle> In 2nd International Workshop on High Performance Transaction Systems, </booktitle> <address> Pacific Grove CA, </address> <month> September </month> <year> 1987. </year> <month> 26 </month>
Reference-contexts: In particular, blocking a transaction until another commits is rarely acceptable for long transactions. The problem of long transactions has also been addressed in traditional data processing applications, bank audit transactions, for example, where most proposed solutions rely on a priori static analysis of the transaction code <ref> [30, 37] </ref>. Consider the following example scenario. Say that a programmer Bob edits and recompiles module F, and then works for several days on other modules. <p> It is interesting to note that many of the ideas implemented in the mechanisms surveyed were actually discussed earlier in other contexts. For instance, some of the ideas related to 20 Mechanism System Duration Unpredictable Interaction Altruistic Locking <ref> [37] </ref> N/A Yes No Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes
Reference: [38] <author> Mary Shaw. </author> <title> Abstraction techniques in modern programming languages. </title> <journal> IEEE Software, </journal> <volume> 1(4) </volume> <pages> 10-26, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: However, most modern programming languages provide language constructs for separating the specification portion of a module from its implementation, and enforce the constraint that one module can depend only on the specification part of another and can in no way depend on the details hidden in another module's implementation part <ref> [38] </ref>. This works well using transaction restructuring operations: Bob and Alice can modify their specifications at the same time; the transactions are then split making the new specifications public; finally, Bob and Alice can modify their implementations using the new specifications.
Reference: [39] <author> Andrea H. Skarra and Stanley B. Zdonik. </author> <booktitle> Concurrency Control and Object-Oriented Databases, </booktitle> <pages> pages 395-421. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: is also possible to extend the notion of nested supertransactions to allow interaction between Bob and Alice by treating their work on F, G, and the other modules as all transactions of the same supertransaction, and in fact such transaction grouping is the basis of many approaches to open-ended activities <ref> [39, 14] </ref>. But both nested transactions and transaction groups presume that the structure of the set of (sub)transactions is known in advance, when the code is written.
Reference: [40] <author> Michael Stonebraker, Lawrence A. Rowe, Bruce Lindsay, James Gray, Michael Carey, Michael Brodie, Philip Bernstein, and David Beech. </author> <title> Third-generation database system manifesto. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 19(3) </volume> <pages> 31-44, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: These activities have become an important application area for which the next generation of databases are aiming <ref> [40, 2] </ref>. The common requirements of these activities include the ability to support consistent concurrent access and fault-tolerance when the activities are of uncertain duration, may include unpredictable developments, and often require interaction with other concurrent activities.
Reference: [41] <author> Walter F. Tichy. </author> <title> RCS | a system for version control. </title> <journal> Software | Practice & Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions [45] DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout <ref> [41] </ref> RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains
Reference: [42] <author> J. Walpole, G.S. Blair, J. Malik, and J.R. Nicol. </author> <title> A unifying model for consistent distributed software development environments. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> ACM SIG-SOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 183-190, </pages> <address> Boston MA, </address> <month> November </month> <year> 1988. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 24(2), </volume> <booktitle> February 1989 and of Software Engineering Notes, </booktitle> <volume> 13(5), </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing <ref> [42] </ref> Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points [43] N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups
Reference: [43] <author> B. Walter. </author> <title> Nested transactions with multiple commit points: An approach to the structuring of advanced database applications. </title> <editor> In Umeshwar Dayal, G. Schlageter, and Lim Huat Seng, editors, </editor> <booktitle> 10th International Conference on Very Large Data Bases, </booktitle> <pages> pages 161-171, </pages> <address> Singapore, August 1984. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: It is possible to solve Charlie's problem posed in section 2, of losing F when his long transaction aborts, by treating the work on F and the work on G as two subtransactions of Charlie's top-level transaction, and making subtransactions rather than top-level transactions the unit of failure atomicity (recovery) <ref> [43] </ref>. <p> [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited Limited No Multilevel Coordination [21] Infuse Yes Yes Limited Domain Relative Addressing [42] Cosmos Yes No Limited Copy/Modify/Merge [1] NSE Yes Yes Limited Multiple Commit Points <ref> [43] </ref> N/A Yes Yes Limited Interactive Notification [11] Gordion No Limited Limited Visibility Domains [10] N/A Yes Limited Yes Group-Oriented CAD Transactions [24] N/A Yes Limited Yes Cooperating CAD Transactions [3] Orion Yes Limited Yes Transaction Groups [14] ObServer II Limited Limited Yes Participation Domains [19] N/A Yes Limited Yes Transaction
Reference: [44] <author> Show way Yeh, Clarence Ellis, Aral Ege, and Henry Korth. </author> <title> Performance analysis of two concurrency control schemas for design environments. </title> <type> Technical Report STP-036-87, </type> <institution> MCC, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: In this case, they might need to look at each others' work to make sure that they are not modifying the two parts in a way that would make 5 their integration difficult. This kind of sharing and exchanging data was termed synergistic interaction by Yeh et al. <ref> [44] </ref>. To insist on concurrency atomicity in multi-user environments might thus decrease concurrency or, more significantly, actually disallow desirable forms of cooperation among users. The first example problem above could be solved by maintaining multiple versions of modules [23].
Reference: [45] <author> Gerhard Weikum and Hans-Jorg Schek. </author> <title> Architectural issues of transaction management in multi-level systems. </title> <editor> In Umeshwar Dayal, G. Schlageter, and Lim Huat Seng, editors, </editor> <booktitle> 10th International Conference on Very Large Data Bases, </booktitle> <pages> pages 454-465, </pages> <address> Singapore, </address> <month> August </month> <year> 1984. </year> <note> Morgan Kaufmann. 27 </note>
Reference-contexts: For instance, some of the ideas related to 20 Mechanism System Duration Unpredictable Interaction Altruistic Locking [37] N/A Yes No Limited Snapshot Validation [33] N/A Yes No Limited Order-Preserving Transactions <ref> [45] </ref> DASDBS Yes No Limited Entity-State Transactions [27] N/A Yes No Limited Semantic Atomicity [15] N/A Yes No Limited Multilevel Atomicity [30] N/A Yes No Yes Sagas [16] N/A Yes No Limited Conflict-Based Serializability [25] N/A Yes No Limited Checkout [41] RCS No No Limited Conversational Transactions [29] System R Limited
References-found: 45

