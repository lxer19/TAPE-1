URL: http://choices.cs.uiuc.edu/liao/javakernel.ps
Refering-URL: http://choices.cs.uiuc.edu/liao/home.html
Root-URL: http://www.cs.uiuc.edu
Email: fliao,stan,royg@cs.uiuc.edu  
Title: Fine-grained, Dynamic User Customization of Operating Systems  
Author: Willy S. Liao See-Mong Tan Roy H. Campbell 
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign Digital Computer Laboratory  
Abstract: Application performance can be improved by customizing the operating system kernel at run time. Inserting application code directly into the kernel avoids the costly protection-domain switches required in traditional interprocess communications. Our design for a customizable operating system structures the kernel as a set of object-oriented frameworks. The user can then perform fine-grained customization by subclassing kernel classes and inserting objects into the kernel. User code is written in a safe, object-oriented language (Sun's Java), which is interpreted or dynamically compiled in the kernel. Objects in the kernel, regardless of their origin, interact with each other seamlessly through ordinary object invocation. This extension technique has the advantage that a user can build directly on top of kernel frameworks using object invocation just as if the user were a system implementor, without compromising system safety. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fiuczynski, D. Becker, C.Chambers, and S. Eggers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Another method is to require the user to write all kernel extensions in a safe language whose compiler will guarantee correctness and safety. The SPIN <ref> [1] </ref> operating system allows user code written in a safe language (Modula-3 [7]) to be inserted into the kernel. Since kernel-user interaction is not needed on every event of interest, performance is improved. For example, SPIN's performance with user-supplied kernel extensions is superior to Mach kernel-user IPC for customization.
Reference: [2] <author> R. H. Campbell and S.-M. Tan. </author> <title> Choices: An object-oriented multimedia operating system. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washing-ton, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Architecturally, user code represents additional object components for use within the object-oriented frameworks that make up the kernel. Our operating system platform is the object-oriented microkernel operating system Choices <ref> [2] </ref>. 2.1. The Java language Sun's Java language [5] is the kernel extension language in this design, for two reasons: it is object-oriented and it is safe. Java is an object-oriented language that strongly resembles C++ [10], and it possesses the necessary language attributes for building object-oriented frameworks.
Reference: [3] <author> H. Chou and D. Dewitt. </author> <title> An evaluation of buffer management strategies for relational database systems. </title> <booktitle> In Proceedings of VLDB 85, </booktitle> <pages> pages 127-141, </pages> <year> 1985. </year>
Reference-contexts: However, studies have shown that database applications consistently access files in a manner that LRU is very poor at caching <ref> [3, 9] </ref>. There has thus been a recent trend towards dynamically customizable operating systems, in which system services can be customized by the user in an application-specific manner at runtime. In such a system, the database application could install a customized filesystem caching policy and improve performance.
Reference: [4] <author> L. P. Deutsch. </author> <title> Design Reuse and Frameworks in the Smalltalk-80 Programming System. </title> <editor> In T. J. Biggerstaff and A. J. Perlis, editors, </editor> <booktitle> Software Reusability, </booktitle> <volume> volume II, </volume> <pages> pages 55-71. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: Building an OS with frameworks The object-oriented framework-based design of Choices is vital to our design. A framework is the specification of the interactions that are permitted between components and their relationships to each other <ref> [4] </ref>. The Choices OS is implemented as a collection of C++ frameworks, one for each major subsystem, such as process management, virtual memory and so forth.
Reference: [5] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment: A white paper. Sun Microsystems. </title> <address> Mountain View, CA. </address> <note> http://www.sun.com, May 1995. </note>
Reference-contexts: Architecturally, user code represents additional object components for use within the object-oriented frameworks that make up the kernel. Our operating system platform is the object-oriented microkernel operating system Choices [2]. 2.1. The Java language Sun's Java language <ref> [5] </ref> is the kernel extension language in this design, for two reasons: it is object-oriented and it is safe. Java is an object-oriented language that strongly resembles C++ [10], and it possesses the necessary language attributes for building object-oriented frameworks.
Reference: [6] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An archtecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-75, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: There is no requirement for a separate application interface, since the interface can be the frameworks themselves. An extensible subsystem built on this principle is the Choices network protocol subsystem, which is based on the x-Kernel <ref> [6] </ref>. NetworkProtocol objects are stacked together to form protocol stacks. NetworkSession objects encapsulate communication endpoints or open connections. Applications use NetworkSessions to send and receive NetworkMessage objects. Users can insert new subclasses of these three classes into the kernel at runtime.
Reference: [7] <author> G. Nelson. </author> <title> System Programming in Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Another method is to require the user to write all kernel extensions in a safe language whose compiler will guarantee correctness and safety. The SPIN [1] operating system allows user code written in a safe language (Modula-3 <ref> [7] </ref>) to be inserted into the kernel. Since kernel-user interaction is not needed on every event of interest, performance is improved. For example, SPIN's performance with user-supplied kernel extensions is superior to Mach kernel-user IPC for customization.
Reference: [8] <author> R. Rashid. </author> <title> Threads of a New System. UNIX Review, </title> <year> 1986. </year>
Reference-contexts: In such a system, the database application could install a customized filesystem caching policy and improve performance. The traditional mechanism for dynamic kernel customization is kernel-user interprocess communications (IPC). An example is user-level virtual-memory pagers in Mach <ref> [8] </ref>. The disadvantage of this approach is the cost of cross-domain interaction, either in synchronization of multiple processes or in process movement across domain boundaries. An alternate approach that offers better performance is direct insertion of user code into the kernel domain, but safety then becomes a concern.
Reference: [9] <author> M. Stonebraker. </author> <title> Operating system support for database management. </title> <journal> Communications of the ACM, </journal> <volume> 24(7) </volume> <pages> 412-418, </pages> <month> July </month> <year> 1981. </year>
Reference-contexts: However, studies have shown that database applications consistently access files in a manner that LRU is very poor at caching <ref> [3, 9] </ref>. There has thus been a recent trend towards dynamically customizable operating systems, in which system services can be customized by the user in an application-specific manner at runtime. In such a system, the database application could install a customized filesystem caching policy and improve performance.
Reference: [10] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: Our operating system platform is the object-oriented microkernel operating system Choices [2]. 2.1. The Java language Sun's Java language [5] is the kernel extension language in this design, for two reasons: it is object-oriented and it is safe. Java is an object-oriented language that strongly resembles C++ <ref> [10] </ref>, and it possesses the necessary language attributes for building object-oriented frameworks. Java is also designed as a safe language, unlike C++, since it was envisioned that hosts would download Java code from untrusted sites for local execution.
Reference: [11] <author> Sun Microsystems, Inc. </author> <title> The Java virtual machine specification. </title> <note> http://java.sun.com/doc/vmspec/html/vmspec-1.html, 1995. </note>
Reference-contexts: There is one implementation detail of the Java language worth noting here. Unlike many other languages, the Java language is implemented on top of a precisely specified virtual machine <ref> [11] </ref>. The machine-independent bytecode described above is actually a sequence of instructions for this virtual machine. The virtual machine possesses primitive instructions for object manipulation and invocation. It was also designed with security considerations in mind so that incorrect or malicious bytecode can be detected and prevented from doing harm.
Reference: [12] <author> R. Wahbe, S. Lucco, T. Anderson, and S. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems, </booktitle> <pages> pages 203-216, </pages> <address> Asheville, NC, </address> <year> 1993. </year>
Reference-contexts: An alternate approach that offers better performance is direct insertion of user code into the kernel domain, but safety then becomes a concern. Sandboxing, introduced by the Bridge OS <ref> [12] </ref>, is a mechanism where user-supplied binary code is modified at load-time to restrict memory references by that code to certain regions. Another method is to require the user to write all kernel extensions in a safe language whose compiler will guarantee correctness and safety.
Reference: [13] <author> F. Yellin. </author> <title> Low level security in Java. </title> <note> http://java.sun.com/sfaq/verifier.html, 1995. </note>
Reference-contexts: For example, certain invariants must hold for each instruction of a bytecode sequence and static analyses to verify these invariants can be performed before running the bytecode. The Sun interpreter used in our design verifies the bytecode to protect against malicious or incorrect bytecode <ref> [13] </ref>. It must also be pointed out that one can treat the the Java language and the virtual machine as two separate layers; it is possible to change the Java language somewhat without even having to add instructions to the virtual machine. 2.2.
References-found: 13

