URL: ftp://ftp.eecs.umich.edu/groups/Ealgebras/pvmifip.ps
Refering-URL: http://www.eecs.umich.edu/gasm/new1995.html
Root-URL: http://www.cs.umich.edu
Email: boerger@di.unipi.it  glaesser@uni-paderborn.de  
Title: A Formal Specification of the PVM Architecture  
Author: Egon Borger a and Uwe Glasser b 
Keyword: Keyword Codes: D.3.1 Keywords: Programming Languages, Formal Definitions and Theory; Distributed Systems  
Address: Pisa, Corso Italia, 40, 56125 Pisa, Italy,  Warburgerstr. 100, 33098 Paderborn, Germany,  
Affiliation: a Dipartimento di Informatica, Universita di  b FB Mathematik-Informatik, Universitat-GH Paderborn,  
Abstract: We develop a mathematically precise yet transparent definition of the Parallel Virtual Machine PVM. Our model, based upon Gurevich's notion of concurrent evolving algebras, directly supports the basic intuitions of heterogeneous distributed computing. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> G. A. Geist and V. S. Sunderam. </author> <title> Network-based concurrent computing on the PVM system. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 4(4) </volume> <pages> 293-311, </pages> <month> June </month> <year> 1992. </year>
Reference: 2. <author> C. C. Douglas, T. G. Mattson, and M. H. Schultz. </author> <title> Parallel Programming Systems for Workstation Clusters. </title> <type> Technical Report YALEU/DCS/TR-975, </type> <institution> Dept of Computer Science, Yale University, </institution> <month> August </month> <year> 1993. </year>
Reference: 3. <author> Y. Gurevich. </author> <title> Evolving algebras a tutorial introduction. </title> <journal> Bulletin of the EATCS, </journal> (43):264-284, February 1991. 
Reference: 4. <author> Y. Gurevich. </author> <title> Evolving Algebra 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <institution> Oxford University Press, </institution> <note> 1994 (to appear). 9 </note>
Reference-contexts: To selectively receive messages, a task invokes one of various receive functions determined by a specified receive context. The basic message-passing routines of PVM apply a simple communication model 9 6 Such a function, as explained in <ref> [4] </ref>, is not updated by rules of the system to which it is considered to be external, but it nevertheless might change its values dynamically, due to actions which are external to the rule system. 7 We use the notion of runs of concurrently working sequential evolving algebras, defined in [4]. <p> <ref> [4] </ref>, is not updated by rules of the system to which it is considered to be external, but it nevertheless might change its values dynamically, due to actions which are external to the rule system. 7 We use the notion of runs of concurrently working sequential evolving algebras, defined in [4]. 8 Our specification could easily incorporate conditions which reflect constraints coming from physical limitations of the underlying hardware and software components. 9 For more sophisticated communication mechanisms additional routines and options, not discussed here, allow to tailor the basic model to individual application requirements, for example direct task-to-task 4 that
Reference: 5. <author> A. Geist et al. </author> <title> PVM 3 User's Guide and Reference Manual. </title> <type> Technical Report ORNL/TM-12187, </type> <institution> Oak Ridge National Laboratory, Oak Ridge, Tennessee 37831, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: This method allows to avoid formal overhead, enabling the reader to follow a precise definition without any specific previous formal training. For details and the background of sequential and concurrent evolving algebras see [3,4]. The present definition is based on PVM Version 3, the current system release <ref> [5] </ref>. Due to space limitations we treat here only a few|but typical|routines for message passing and task creation. For a full treatment see [6]. fl In: B. Pehrson and I. <p> This analogy does not apply to the case of a host itself being a multiprocessor system. 4 Plato (see Timaeus, 40c.) describes demiurge as creative force that shaped the material world. 5 ARCH consists of the predefined architecture names to be used with PVM 3 as specified in <ref> [5] </ref>. 3 each other. A task identifier is supposed to encode also the unique daemon under control of which the task is operating, using a function pvmd : TID ! DAEMON . <p> BUFID ! ENCODING = fPvmDataDefault; PvmDataRaw; PvmDataInPlaceg, associated to send buffers, specifies the method used for packing messages: PvmDataDefault refers to External Data Representation (XDR); PvmDataRaw to the original data format; PvmDataInPlace means that the data items have to be copied directly out of the user's memory (for details cf. <ref> [5] </ref>). Two injective functions sendbuf ; recvbuf from TASK into BUFID yield the send and receive buffers of tasks. <p> In assigning tasks to hosts upon spawning, PVM's in principle non-deterministic choice depends in particular upon the environment (e.g. the operating system) and the internal 13 This feature is not yet implemented, cf. <ref> [5] </ref>. 7 load balancing scheme (which is transparent to the user). We abstract from details of this complex selection procedure by using a dynamic external function hostselect which we assume, as integrity constraint, to be consistent with the options set by the user (through Flag, Where, Ntask).
Reference: 6. <author> E. Borger and U. Glasser. </author> <title> A formal specification of the PVM architecture. </title> <type> Technical Report, </type> <note> 1994 (to appear). </note>
Reference-contexts: For details and the background of sequential and concurrent evolving algebras see [3,4]. The present definition is based on PVM Version 3, the current system release [5]. Due to space limitations we treat here only a few|but typical|routines for message passing and task creation. For a full treatment see <ref> [6] </ref>. fl In: B. Pehrson and I.
References-found: 6

