URL: http://www.cs.ucl.ac.uk/external/Z.Wang/papers/window.ps.Z
Refering-URL: http://www.cs.ucl.ac.uk/external/Z.Wang/pub.html
Root-URL: http://www.cs.ucl.ac.uk
Email: zwang@cs.ucl.ac.uk jon@cs.ucl.ac.uk  
Title: A Dual-Window Model for Flow and Congestion Control  
Author: Zheng Wang Jon Crowcroft 
Address: Gower Street, London WC1E 6BT, United Kingdom  
Affiliation: Department of Computer Science, University College London  
Abstract: This paper examines in detail the window mechanism which has been widely used for flow and congestion control. The analysis shows that the mono-window model, which combines flow control and congestion control in a single window, can cause pipe breakdown after packet losses. A dual-window model is presented, in which flow control and congestion control are decoupled. The dual-window model allows the traffic flow to be sustained while retransmission is being carried out. The dual-window model is particularly suitable for high-speed and long-delay network where the pipelining of the packets is more crucial. The estimation of the window sizes, advance of the window edges, and acknowledgement and retransmission are discussed in detail. Finally the performance of the dual-window model is examined with illustrated examples and by simulation. 
Abstract-found: 1
Intro-found: 1
Reference: [Ahuj79] <author> V. Ahuja, </author> <title> Design and Analysis of Computer Communication Networks, </title> <publisher> McGraw-Hill, </publisher> <year> 1979. </year>
Reference-contexts: 1. Introduction Window control is one of the most common mechanism for flow and congestion control in computer networks [Gerl80, Bert87]. It have been used in many transport protocols of major network architectures, including TCP/IP [Jaco88], ISO/TP4 [Rama88], DNA [Jain86] and SNA <ref> [Ahuj79] </ref>. With the window mechanism, the number of data units that the sender is allowed to transmit is controlled by a so-called window. Originally, the window mechanism was used for end-to-end flow control, ie. for preventing buffer overflow at the receiver [Gerl80].
Reference: [Bert87] <author> D. Bertsekas and R. Gallager, </author> <title> Data Networks, </title> <publisher> Prentice Hall, </publisher> <year> 1987. </year>
Reference-contexts: 1. Introduction Window control is one of the most common mechanism for flow and congestion control in computer networks <ref> [Gerl80, Bert87] </ref>. It have been used in many transport protocols of major network architectures, including TCP/IP [Jaco88], ISO/TP4 [Rama88], DNA [Jain86] and SNA [Ahuj79]. With the window mechanism, the number of data units that the sender is allowed to transmit is controlled by a so-called window.
Reference: [BSD88] <author> BSD, </author> <title> ``Unix Networking Software,'' </title> <address> Release 4.3 Tahoe, </address> <year> 1988. </year>
Reference-contexts: The problem is , however, that a self-clocking system is hard to start, as there are no acknowledgements when the pipe is empty. To avoid overwhelming the bottleneck of the pipe with back-to-back packet bursts, it is necessary to fill the pipe gradually. For example, in TCP Tahoe release <ref> [Jaco88, BSD88] </ref>, the slow-start mechanism is introduced to open the sending window exponentially from its minimum size whenever the pipe has been empty. However, it usually takes several round trip times for the slow-start to open the window to full size, so the throughput can suffer during the slow-start period. <p> Links between any two switches have a capacity of 500 Kbps with 10 ms propagation delay. All packets have the same size of 512 bytes. The receiving buffer is 100 Kbytes. The TCP module is based on TCP Tahoe release <ref> [BSD88] </ref>. Since a single packet loss can cause pipe breakdown with TCP Tahoe release (we should explain this in detail in the next section), we need only to show the traces of the simulation before and after a single packet loss.
Reference: [BSD90] <author> BSD, </author> <title> ``Unix Networking Software,'' Release 4.3 Reno, </title> <year> 1990. </year>
Reference-contexts: c c c c c c c c c c c c c c c c c c hhhhh hhhhh hhhhh hhhhh 12 14 10 timetime destinationsource N p 6 6 5 3 1 8 6 4 2 86428642 pktspkts time 10 12 13 17 15 In TCP Reno release <ref> [Jaco90b, BSD90] </ref>, Jacobson introduced fast retransmission and fast recovery which can prevent pipe breakdown in case of a single packet loss per round trip time.
Reference: [Chiu89] <author> D. M. Chiu and R. Jain, </author> <title> ``Analysis of Increase and Decrease Algorithms for Congestion Avoidance in Computer networks,'' </title> <journal> Comp. Networks and ISDN System, </journal> <volume> vol. 17, </volume> <pages> pp. 1-14, </pages> <year> 1989. </year>
Reference: [Come90] <author> D. Comer, </author> <title> Internetworking with TCP/IP: Vol I, </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network. In many transport protocols, the window mechanism is often combined with error control such as sequencing, acknowledgement and retransmission <ref> [Gerl80, Come90] </ref>. This paper examines the window mechanism in detail. We show that the mono-window model, which combines flow control and congestion control in a single window, can cause pipe breakdown after packet losses.
Reference: [Deme89] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> ``Analysis and Simulation of a Fair Queueing Algorithm,'' </title> <booktitle> Proc. of ACM SIGCOMM'89, </booktitle> <pages> pp. 1-12, </pages> <address> Austin USA, </address> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: Nevertheless, such self-clocking systems are very easy to implement. Rate-based schemes can provide much finer grade control but they require a rate clock to drive the transmission. We believe that the isolation and protection provided by fair sharing algorithms such as FQ <ref> [Deme89] </ref> and VC [Zhan90] can substantially reduce the clustering and the interruption to the acknowledgement packets by data packets. We will examine this with simulation.
Reference: [Gerl80] <author> M. Gerla and L. Kleinrock, </author> <title> ``Flow Control: A Comparative Survey,'' </title> <journal> IEEE Transactions on Communications, </journal> <volume> vol. COM-28, no. 4, </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: 1. Introduction Window control is one of the most common mechanism for flow and congestion control in computer networks <ref> [Gerl80, Bert87] </ref>. It have been used in many transport protocols of major network architectures, including TCP/IP [Jaco88], ISO/TP4 [Rama88], DNA [Jain86] and SNA [Ahuj79]. With the window mechanism, the number of data units that the sender is allowed to transmit is controlled by a so-called window. <p> With the window mechanism, the number of data units that the sender is allowed to transmit is controlled by a so-called window. Originally, the window mechanism was used for end-to-end flow control, ie. for preventing buffer overflow at the receiver <ref> [Gerl80] </ref>. The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. <p> The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network. In many transport protocols, the window mechanism is often combined with error control such as sequencing, acknowledgement and retransmission <ref> [Gerl80, Come90] </ref>. This paper examines the window mechanism in detail. We show that the mono-window model, which combines flow control and congestion control in a single window, can cause pipe breakdown after packet losses.
Reference: [Jaco88] <author> V. Jacobson, </author> <title> ``Congestion Avoidance and Control,'' </title> <booktitle> Proc. of ACM SIGCOMM'88, </booktitle> <pages> pp. 314-329, </pages> <address> Stanford, USA, </address> <month> Aug. </month> <year> 1988. </year> <month> - 18 </month> - 
Reference-contexts: 1. Introduction Window control is one of the most common mechanism for flow and congestion control in computer networks [Gerl80, Bert87]. It have been used in many transport protocols of major network architectures, including TCP/IP <ref> [Jaco88] </ref>, ISO/TP4 [Rama88], DNA [Jain86] and SNA [Ahuj79]. With the window mechanism, the number of data units that the sender is allowed to transmit is controlled by a so-called window. Originally, the window mechanism was used for end-to-end flow control, ie. for preventing buffer overflow at the receiver [Gerl80]. <p> The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network. <p> The problem is , however, that a self-clocking system is hard to start, as there are no acknowledgements when the pipe is empty. To avoid overwhelming the bottleneck of the pipe with back-to-back packet bursts, it is necessary to fill the pipe gradually. For example, in TCP Tahoe release <ref> [Jaco88, BSD88] </ref>, the slow-start mechanism is introduced to open the sending window exponentially from its minimum size whenever the pipe has been empty. However, it usually takes several round trip times for the slow-start to open the window to full size, so the throughput can suffer during the slow-start period. <p> . . . . . . . . . . . . . . . . . . . kbytes Before the packet loss occurs, the sender is in the additive increase phase of congestion control, ie. the window is increased by one packet size for each round trip time <ref> [Jaco88] </ref>. The difference between S s and S r represents the packets in flight between the sender and the receiver. The packet loss occurs around t=8.8 seconds 1 . <p> In the next section, we examine in detail the cause of pipe breakdown in the mono-window model. 3. Mono-Window Model In many window-based schemes, for instance, the one in TCP Tahoe release <ref> [Jaco88, |BSD88] </ref>, the sender maintains a single sending window both for flow control and for congestion control. The window size is determined based on both the update from the receiver on its buffer availability and the estimation of network traffic conditions. win=min (snd_wnd, snd_cwnd)). <p> So only selective acknowledgements are shown in the examples. The threshold for fast retransmission is 2. S p is adjusted based TCP Tahoe <ref> [Jaco88] </ref>, ie. it is reduced to half of previous value after packet losses. Other parameters are the same as the examples in the previous sections, except the two numbers n:m in the rectangle boxes are the sequence number and block length of the selective acknowledgements. that packets seq=7,8 were lost.
Reference: [Jaco90a] <author> V. Jacobson, </author> <title> ``Modified TCP congestion control,'' message to end2end-interest mailing list, </title> <month> April </month> <year> 1990. </year>
Reference-contexts: The fast recovery works well in case of a single packet loss per round trip time. However, it can not prevent pipe breakdown when there are more than one packet loss within a round trip time or when the retransmitted packet is lost <ref> [Jaco90a] </ref>. fast retransmission (the BSD equivalent of tcprexmtthresh) is 2. When the duplicate acknowledgement count (the BSD equivalent of t_dupacks) exceeds 2, the sender immediately retransmits the packet seq=7, it also inflates the window W by one for each duplicate acknowledgement received.
Reference: [Jaco90b] <author> V. Jacobson, </author> <title> ``Berkeley TCP Evolution from 4.3-tahoe to 4.3-reno,'' </title> <booktitle> Proc. of 18th Internet Engineering Task Force, </booktitle> <address> Vancouver, Canada, </address> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: c c c c c c c c c c c c c c c c c c hhhhh hhhhh hhhhh hhhhh 12 14 10 timetime destinationsource N p 6 6 5 3 1 8 6 4 2 86428642 pktspkts time 10 12 13 17 15 In TCP Reno release <ref> [Jaco90b, BSD90] </ref>, Jacobson introduced fast retransmission and fast recovery which can prevent pipe breakdown in case of a single packet loss per round trip time.
Reference: [Jaco90c] <author> V. Jacobson, R. Braden, and L. Zhang, </author> <title> ``TCP extension for high-speed paths,'' </title> <type> RFC 1185, </type> <year> 1990. </year>
Reference-contexts: The dual-window model is particularly suitable for high-speed and long-delay network where the pipelining of the packets is more crucial. The acknowledgement and retransmission strategies required by the - 2 - dual-window also fit well with the recent extension to the TCP <ref> [Jaco90c] </ref>. The rest of the paper is organized as follows. Section 2 looks at the phenomenon of pipe breakdown. Section 3 investigates the cause of pipe breakdown in the mono-window model. Section 4 introduces the dual-window model. Section 5 details the operation of the dual-window model. <p> With selective acknowledgement, the receiver - 12 - returns a sequence number A ss and a block length A sb , acknowledging that a continuous data block of length A sb starting with sequence number A ss has been received <ref> [Jaco90c] </ref>. With consecutive selective acknowledgements, the sender is able to derive 1) the amount of data that has arrived at the destination, 2) the amount of data that the receiver can now reassemble, and 3) the gaps in the receiving buffer that have to be retransmitted.
Reference: [Jain86] <author> R. Jain, </author> <title> ``A Timeout-Based Congestion Control Scheme for Window Flow-Controlled Networks,'' </title> <journal> IEEE Journal on Selected Areas of Communications, </journal> <volume> vol. SAC-4, no. 7, </volume> <pages> pp. 1162-1167, </pages> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: 1. Introduction Window control is one of the most common mechanism for flow and congestion control in computer networks [Gerl80, Bert87]. It have been used in many transport protocols of major network architectures, including TCP/IP [Jaco88], ISO/TP4 [Rama88], DNA <ref> [Jain86] </ref> and SNA [Ahuj79]. With the window mechanism, the number of data units that the sender is allowed to transmit is controlled by a so-called window. Originally, the window mechanism was used for end-to-end flow control, ie. for preventing buffer overflow at the receiver [Gerl80]. <p> The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network.
Reference: [Jain89] <author> R. Jain, </author> <title> ``A Delay-Based Approach for Congestion Avoidance in Interconnected Heterogeneous Computer Networks,'' </title> <journal> Computer Communication Review, </journal> <volume> vol. 19, no. 5, </volume> <pages> pp. 56-71, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network.
Reference: [Kesh91a] <author> S. Keshav, </author> <title> ``Congestion Control in Computer Networks,'' </title> <type> PhD Thesis, </type> <institution> University of California at Berkeley, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Note that in the dual-window scheme described in the previous section, W pl is advanced by acknowledgements. We may advance W pl with a rate clock to achieve a rate-controlled pipe window. With rate-based schemes, the queue at the bottleneck may grow unlimited sometimes <ref> [Kesh91a] </ref>, thus window control may be still necessary to control the amount of data inside the network. We will investigate this in our future work.
Reference: [Kesh91b] <author> S. Keshav, </author> <title> ``A Control-Theoretic Approach to Flow Control,'' </title> <booktitle> Proc. of ACM SIGCOMM'91, </booktitle> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Although the particular example above we use to illustrate the pipe breakdown is based on TCP Tahoe, most feedback control systems, either window-based or even rate-based schemes <ref> [Kesh91b] </ref>, require a phase for establishing the network conditions and searching for a proper working point when starting or re-starting.
Reference: [Mitr90] <author> D. Mitra and J. Seery, </author> <title> ``Dynamic Adaptive Window for High Speed Data Networks: Theory and Simulations,'' </title> <booktitle> Proc. of ACM SIGCOMM'90, </booktitle> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network.
Reference: [Post81] <author> J. Postel, </author> <title> ``Transmission Control Protocol,'' </title> <type> RFC 793, </type> <year> 1981. </year>
Reference-contexts: When the data channel is blocked for various reasons, the control channel should remain open if possible. A good example of maintaining exchanging of control information when data channel is blocked is the "zero window probing" in TCP <ref> [Post81] </ref>. When the sending window is zero, the sender is allowed to send a probe packet with one octet of data outside the window to probe the opening of the window, avoiding the possible deadlock in the window updating.
Reference: [Rama88] <author> K. K. Ramakrishnan and R. Jain, </author> <title> ``An Explicit Binary Feedback Scheme for Congestion Avoidance in Computer Networks with a Connectionless Network Layer,'' </title> <booktitle> Proc. of ACM SIGCOMM'88, </booktitle> <pages> pp. 303-313, </pages> <address> Stanford, USA, </address> <month> Aug. </month> <year> 1988. </year> <title> Control Algorithm </title>
Reference-contexts: 1. Introduction Window control is one of the most common mechanism for flow and congestion control in computer networks [Gerl80, Bert87]. It have been used in many transport protocols of major network architectures, including TCP/IP [Jaco88], ISO/TP4 <ref> [Rama88] </ref>, DNA [Jain86] and SNA [Ahuj79]. With the window mechanism, the number of data units that the sender is allowed to transmit is controlled by a so-called window. Originally, the window mechanism was used for end-to-end flow control, ie. for preventing buffer overflow at the receiver [Gerl80]. <p> The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network.
Reference: [Shen90] <author> S. Shenker, L. Zhang, and D. Clark, </author> <title> ``Some Observations on the Dynamics of a Congestion,'' </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 20, no. 5, </volume> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Finally, we presented illustrated examples and simulation results. There are a number of issues related to the dual-window model which require further investigation. Recent studies have revealed some problems with window-based congestion control such as clustering and ack-compression <ref> [Shen90, Zhan91] </ref>, and rate-based schemes are often considered as a better alternative. We believe that there is a tradeoff between optimality and cost.
Reference: [Wang91] <author> Z. Wang and J. Crowcroft, </author> <title> ``A New Congestion Control Scheme: Slow Start and Search (Tri-S),'' </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 21, no. 1, </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network.
Reference: [Wang92a] <author> Z. Wang and J. Crowcroft, </author> <title> ``A Fluid Model Approximation to Quantitative Information Feedback in Congestion Control,'' </title> <booktitle> Proc. of IEEE 7th International Phoenix Conference on Computers and Communications, </booktitle> <address> Arizona, USA, </address> <year> 1992. </year>
Reference: [Wang92b] <author> Z. Wang and J. Crowcroft, </author> <title> ``Eliminating Periodic Packet Losses in the 4.3-Tahoe BSD TCP Congestion Control Algorithm,'' </title> <journal> ACM Computer Communication Review, </journal> <month> April </month> <year> 1992. </year>
Reference-contexts: The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network.
Reference: [Wang92c] <author> Z. Wang, </author> <title> ``Routing and Congestion Control in Datagram Networks,'' </title> <type> PhD Thesis, </type> <institution> University College London, UK, </institution> <year> 1992. </year> <note> Switching Netwo </note>
Reference-contexts: The receiver sends a window size update indicating how much it is able to accept. Upon receiving a window update, the sender transmits the packets authorised by the receiver. Recently, the window mechanism is also used for congestion control, ie. for preventing buffer overflow at the routers <ref> [Jaco88, Rama88, Jain86, Jain89, Mitr90, Wang91, Wang92b, Wang92c] </ref>. The window size is used here to reflect the amount of data that the network pipe can hold, based on the feedback information from the network. <p> Such an operating point allows the maximum amount of free buffer to be reserved for traffic bursts while a minimum number of packets are stored in the router to fill the gaps in the flows <ref> [Wang92c] </ref>. The feedback can be collected explicitly from the network or derived implicitly from the ack-nowledgements.
Reference: [Zhan90] <author> L. Zhang, ``VirtualClock: </author> <title> A New Traffic Control Algorithm for Packet,'' </title> <booktitle> Proc. of ACM SIGCOMM'90, </booktitle> <address> Philadelphia, USA, </address> <month> Sept. </month> <year> 1990. </year> <title> Algorithm: </title> <booktitle> the effec </booktitle>
Reference-contexts: Nevertheless, such self-clocking systems are very easy to implement. Rate-based schemes can provide much finer grade control but they require a rate clock to drive the transmission. We believe that the isolation and protection provided by fair sharing algorithms such as FQ [Deme89] and VC <ref> [Zhan90] </ref> can substantially reduce the clustering and the interruption to the acknowledgement packets by data packets. We will examine this with simulation.
Reference: [Zhan91] <author> L. Zhang, S. Shenker, and D. Clark, </author> <title> ``Observation on the Dynamics of a Congestion Control,'' </title> <booktitle> Proc. of ACM SIGCOMM'91, </booktitle> <year> 1991. </year>
Reference-contexts: Finally, we presented illustrated examples and simulation results. There are a number of issues related to the dual-window model which require further investigation. Recent studies have revealed some problems with window-based congestion control such as clustering and ack-compression <ref> [Shen90, Zhan91] </ref>, and rate-based schemes are often considered as a better alternative. We believe that there is a tradeoff between optimality and cost.
References-found: 26

