URL: http://vlsicad.cs.ucla.edu/~abk/papers/conference/c40.ps
Refering-URL: http://vlsicad.cs.ucla.edu/~abk/publications.html
Root-URL: http://www.cs.ucla.edu
Email: jenhsin@cs.ucla.edu, abk@cs.ucla.edu  
Title: Multi-Way System Partitioning into a Single Type or Multiple Types of FPGAs  
Author: Dennis J.-H. Huang and Andrew B. Kahng 
Address: Los Angeles, CA 90024-1596 USA  
Affiliation: UCLA Computer Science Department,  
Abstract: This paper considers the problem of partitioning a circuit into a collection of subcircuits, such that each subcircuit is feasible for some device from an FPGA library, and the total cost of devices is minimized. We propose a three-phase heuristic that uses ordering, clustering, and dynamic programming to achieve good solutions. Experimental comparisons are made with the previous methods of [4][9]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Alpert and A. B. Kahng, </author> <title> "Multi-Way Partitioning Via Spacefilling Curves and Dynamic Programming", </title> <booktitle> 31st ACM/IEEE Design Automation Conference, </booktitle> <year> 1994, </year> <pages> pp. 652-657. </pages>
Reference-contexts: Second, for large circuits we optionally use a clustering scheme to reduce the problem size. Third, we apply dynamic programming over the ordering to get an optimal restricted partitioning, i.e., subject to all clusters being contiguous in the ordering. This approach is similar to that of Alpert and Kahng <ref> [1] </ref>. We also use techniques from [2], which constructs an ordering by iteratively adding the node with highest attraction to the existing ordering. 3.1 Node Ordering The first phase of our algorithm is node ordering. <p> The complexity of this algorithm is O (U n 2 ). Note that Alpert and Kahng's DP-RP algorithm <ref> [1] </ref> used a different dynamic programming recurrence, i.e., they derived a k-way partitioning from the best (k 1)-way partitioning solutions for all contiguous clusters. 3.4 Experimental Results All algorithms and experiments were implemented in the UNIX/C environment using a Sun SPARCstation 10.
Reference: [2] <author> C. J. Alpert and A. B. Kahng, </author> <title> "A General Framework for Vertex Orderings, With Applications to netlist Clustering", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 63-67. </pages>
Reference-contexts: Third, we apply dynamic programming over the ordering to get an optimal restricted partitioning, i.e., subject to all clusters being contiguous in the ordering. This approach is similar to that of Alpert and Kahng [1]. We also use techniques from <ref> [2] </ref>, which constructs an ordering by iteratively adding the node with highest attraction to the existing ordering. 3.1 Node Ordering The first phase of our algorithm is node ordering. <p> Node v i is the j th node in the ordering if (j) = i. <ref> [2] </ref> presented various orderings, such as max-adjacency ordering, min-perimeter ordering, max absorption [11], and min scaled cost [3], each of which may be achieved by defining some "attraction" from unordered nodes to the set of all previously ordered nodes. <p> Update: Increment index. Set (index) = x, and S = S [ v x . Update Attract (i) for each v i 2 V S and go to step 2. The WINDOW algorithm in <ref> [2] </ref> used the scaled cost metric, with corresponding attraction function defined as follows : Attract SC (i) = X e2Nets (i) jS " ej The scaled cost attraction leads to reasonable ordering decisions in most cases. <p> For specific multi-FPGA system designs, other objectives may prevail, e.g., reflecting inter-FPGA routing architecture. In such cases, different attraction functions may be preferable, along with use of the window size and tail size parameters in <ref> [2] </ref>. choose node v to be added next into the ordered set S, thus leading to more cut nets. 3.2 Clustering To partition large circuits, the use of clustering to reduce problem complexity is a widely adopted technique.
Reference: [3] <author> P. K. Chan, M. D. F. Schlag and J. Y. Zien, </author> <title> "Spectral K-Way Ratio-Cut Partitioning and Clustering", </title> <journal> IEEE Trans. on CAD 13(9), </journal> <month> Sept. </month> <year> 1994, </year> <pages> pp. 1088-1096. </pages>
Reference-contexts: Node v i is the j th node in the ordering if (j) = i. [2] presented various orderings, such as max-adjacency ordering, min-perimeter ordering, max absorption [11], and min scaled cost <ref> [3] </ref>, each of which may be achieved by defining some "attraction" from unordered nodes to the set of all previously ordered nodes.
Reference: [4] <author> N.-C. Chou, L.-T. Liu, C.-K. Cheng, W.-J. Dai, and R. Lindelof, </author> <title> "Circuit Partitioning for Huge Logic Emulation Systems", </title> <booktitle> 31st ACM/IEEE Design Automation Conference, </booktitle> <year> 1994, </year> <pages> pp. 244-249. </pages>
Reference-contexts: Their method recursively applies a variant of FM bipartitioning which allows some uphill moves. In subsequent work, Kuznar et al. [10] allow CLBs to be duplicated, i.e., they introduce functional replication to minimize the total cost of devices and inter-device interconnect. Finally, Chou <ref> [4] </ref> et al. have proposed an algorithm to partition a circuit into instances of a single FPGA type, such that the number of FPGAs is minimized. <p> Experimental results show that our heuristic can give substantial improvement over previous methods with comparable CPU costs, particularly for large problem instances. A related result shows that our formulation, which seeks a disjoint cover of the circuit by FPGAs, is general. Specifically, we extend a result stated in <ref> [4] </ref> and prove that an overlapping partitioning solution does not reduce total device cost or interconnect, i.e., given an overlapping solution we can always construct a non-overlapping solution (i.e., having disjoint partitions) with the same cost and the same or less I/O utilization. 2 Problem Formulation A digital circuit can be <p> Chou et al. <ref> [4] </ref> used local ratio cut clustering for such a pre-processing step. They iteratively extract a subcircuit C with desired cluster size from the original circuit G, and apply ratio cut partitioning to all nodes in C and all nodes in G n C which have connections to nodes in C. <p> All benchmarks were obtained from MCNC under the directory /pub/benchmark/Partitioning93. We also obtained three large industrial benchmarks from the authors of <ref> [4] </ref>. We omitted the clustering phase for the small benchmarks. For all experiments, we set ff = 0:3 in the WINDOW ordering phase. For the four relatively small benchmarks in [9], the FPGA constraint is based on the Xilinx XC2064 (i.e., 64 CLBs and 58 IOBs). <p> For the four relatively small benchmarks in [9], the FPGA constraint is based on the Xilinx XC2064 (i.e., 64 CLBs and 58 IOBs). Table 2 shows that our algorithm (denoted by WCDP) achieves comparable results with [9] and <ref> [4] </ref>. WCDP also performs very well in larger test cases. For the four larger benchmarks (s-series), the FPGA constraints are set to 320 CLBs and 144 IOBs. Table 3 shows that WCDP outperforms recursive FM and SC [4]. <p> shows that our algorithm (denoted by WCDP) achieves comparable results with [9] and <ref> [4] </ref>. WCDP also performs very well in larger test cases. For the four larger benchmarks (s-series), the FPGA constraints are set to 320 CLBs and 144 IOBs. Table 3 shows that WCDP outperforms recursive FM and SC [4]. We also tested WCDP on three huge industrial benchmarks with up to 160K gates and 90K nets. WCDP achieves an average of 18% improvement over SC with reasonable (but longer) running time, as shown in Table 4. <p> For the Single Type FPGA partitioning problem, Chou et al. <ref> [4] </ref> proposed the "FPGA complementary theorem", which states that k disjoint feasible FPGAs can be obtained from k overlapping feasible FPGAs. <p> KBK93 is the modified FM algorithm in [9], and SC is the Set Covering algorithm in <ref> [4] </ref>. <p> and pin constraint are 64 and 58 respectively, reflecting the XILINX XC2064 part. ckt (CLBs, IOBs, nets, pins) RFM SC WCDP s15850 ( 842, 102, 1265, 4977) 4 3 3 s38417 (2221, 156, 3216, 13257) 12 10 8 Table 3: Comparison of the WCDP, recursive FM (RFM), and Set Covering <ref> [4] </ref> algorithms. The FPGA size constraint and pin constraint are 320 and 144 respectively. give a formal proof for the k-way result. We now provide an analogous complementarity result for the k-way Multiple Type FPGA partitioning problem. Theorem 1 : k-Way Single Type FPGA Complementary Theorem (Chou et al. [4]). <p> Covering <ref> [4] </ref> algorithms. The FPGA size constraint and pin constraint are 320 and 144 respectively. give a formal proof for the k-way result. We now provide an analogous complementarity result for the k-way Multiple Type FPGA partitioning problem. Theorem 1 : k-Way Single Type FPGA Complementary Theorem (Chou et al. [4]). Let C 1 ; C 2 ; : : : ; C k be k feasible FPGA candidates. Then there exists a permutation function (i); i 2 1; 2; : : :; k, such that 1. C (1) , 3. <p> are disjoint feasible FPGAs. ckt gates pins I/Os nodes nets 38K 38039 30043 120 7259 10102 160K 159054 245311 1885 89288 90029 LRSC WCDP ckt #FPGAs (min.) #FPGAs (min.) % improv. 38K 37 (9) 33 (14) 10.81% 160K 186 (383) 128 (589) 31.38% Table 4: Comparison of WCDP and SC <ref> [4] </ref> algorithms based on three huge industrial benchmarks. Top: Benchmark parameters. Bottom: partitioning results. The FPGA size constraint is 2; 700 CLBs and the pin constraint is 184 IOBs. <p> Our algorithm outperforms SC by 18% on huge benchmarks, and outperforms KBK93 by 5% for Multiple Type FPGA partitioning. Of supplementary interest is our extension of the FPGA complementary theorems in <ref> [4] </ref> to multiple-type FPGA partitioning. According to this result, and within our given problem formulation, we can always obtain a disjoint partitioning solution from an overlapping solution. 6 Acknowledgments We are grateful to Dr. L. T. Liu for his valuable discussion and providing the translator of benchmarks [9] from MCNC.
Reference: [5] <author> C. M. Fiduccia and R. M. Mattheyses, </author> <title> "A Linear Time Heuristic for Improving Network Partitions", </title> <booktitle> 19th ACM/IEEE Design Automation Conference, </booktitle> <year> 1982, </year> <pages> pp. 175-181. </pages>
Reference-contexts: Recent research in multiple-FPGA systems has addressed objectives which minimize the net cut between partitions subject to size constraints (#CLBs) and pin constraints (#IOBs or incident signal nets) on each partition. Woo and Kim [12] proposed a modification of the Fiduccia-Mattheyses (FM) <ref> [5] </ref> method to perform k-way partitioning, with k given, which tries to minimize the total number of pins of all partitions while satisfying given size and pin constraints.
Reference: [6] <author> L. Hagen and A. B. Kahng, </author> <title> "New Spectral Methods for Ratio Cut Partitioning and Clustering", </title> <journal> IEEE Trans. on CAD 11(9), </journal> <month> Sept. </month> <year> 1992, </year> <pages> pp. 1074-1085. </pages>
Reference: [7] <author> J. Hwang and A. El Gamal, </author> <title> "Optimal Replication for Min-Cut Partitioning", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 432-435. </pages>
Reference-contexts: C 2 is reduced by 1.) However, we will show that node overlapping cannot reduce the cost of an FPGA partitioning. (This is a consequence of both the undirected formulation and the satisficing pin constraints.) Note that node overlapping is fundamentally different from the concept of node replication discussed in <ref> [8, 7] </ref>: node replication uses directional information and only duplicates incoming edges incident to the replicated nodes. For the Single Type FPGA partitioning problem, Chou et al. [4] proposed the "FPGA complementary theorem", which states that k disjoint feasible FPGAs can be obtained from k overlapping feasible FPGAs.
Reference: [8] <author> C. Kring and A. R. </author> <title> Newton, "A Cell-Replication Ap-praoch to Mincut-Based Circuit Partitioning", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1991, </year> <pages> pp. 2-5. </pages>
Reference-contexts: C 2 is reduced by 1.) However, we will show that node overlapping cannot reduce the cost of an FPGA partitioning. (This is a consequence of both the undirected formulation and the satisficing pin constraints.) Note that node overlapping is fundamentally different from the concept of node replication discussed in <ref> [8, 7] </ref>: node replication uses directional information and only duplicates incoming edges incident to the replicated nodes. For the Single Type FPGA partitioning problem, Chou et al. [4] proposed the "FPGA complementary theorem", which states that k disjoint feasible FPGAs can be obtained from k overlapping feasible FPGAs.
Reference: [9] <author> R. Kuznar, F. Brglez, and K. Kozminski, </author> <title> "Cost Minimization of Partitions into Multiple Devices, </title> <booktitle> 30th ACM/IEEE Design Automation Conference, </booktitle> <year> 1993, </year> <pages> pp. 315-320. </pages>
Reference-contexts: Woo and Kim [12] proposed a modification of the Fiduccia-Mattheyses (FM) [5] method to perform k-way partitioning, with k given, which tries to minimize the total number of pins of all partitions while satisfying given size and pin constraints. Kuznar et al. <ref> [9] </ref> proposed an algorithm to partition a given CLB-level netlist into multiple device types to minimize total device cost, where each device type in a given library can have distinct price, size, and pin capacity. Their method recursively applies a variant of FM bipartitioning which allows some uphill moves. <p> The simplest version of this problem is to partition a circuit into instances of a single type of FPGA device. Single Type FPGA Partitioning: Given a circuit G, find a minimum number of disjoint feasible FPGAs to cover G. The generalization of this problem <ref> [9] </ref> is to cover Device CLBs (s) IOBs (p) cost LB (l) UB (u) XC3020x-x 64 64 1.00 0.8 0.9 XC3042x-x 144 96 1.84 0.8 0.9 XC3090x-x 320 144 4.83 0.8 0.9 Table 1: Xilinx XC3000 device library [9]. <p> The generalization of this problem <ref> [9] </ref> is to cover Device CLBs (s) IOBs (p) cost LB (l) UB (u) XC3020x-x 64 64 1.00 0.8 0.9 XC3042x-x 144 96 1.84 0.8 0.9 XC3090x-x 320 144 4.83 0.8 0.9 Table 1: Xilinx XC3000 device library [9]. G with feasible devices from an FPGA library, such that total device cost is minimized. Table 1 depicts an FPGA library corresponding to a specific device family (Xilinx XC3000), as summarized in [9]. <p> 144 96 1.84 0.8 0.9 XC3090x-x 320 144 4.83 0.8 0.9 Table 1: Xilinx XC3000 device library <ref> [9] </ref>. G with feasible devices from an FPGA library, such that total device cost is minimized. Table 1 depicts an FPGA library corresponding to a specific device family (Xilinx XC3000), as summarized in [9]. Each device type D j in the FPGA library has pin capacity p j (IOBs), node capacity s j (CLBs), and price c j . <p> We also obtained three large industrial benchmarks from the authors of [4]. We omitted the clustering phase for the small benchmarks. For all experiments, we set ff = 0:3 in the WINDOW ordering phase. For the four relatively small benchmarks in <ref> [9] </ref>, the FPGA constraint is based on the Xilinx XC2064 (i.e., 64 CLBs and 58 IOBs). Table 2 shows that our algorithm (denoted by WCDP) achieves comparable results with [9] and [4]. WCDP also performs very well in larger test cases. <p> For all experiments, we set ff = 0:3 in the WINDOW ordering phase. For the four relatively small benchmarks in <ref> [9] </ref>, the FPGA constraint is based on the Xilinx XC2064 (i.e., 64 CLBs and 58 IOBs). Table 2 shows that our algorithm (denoted by WCDP) achieves comparable results with [9] and [4]. WCDP also performs very well in larger test cases. For the four larger benchmarks (s-series), the FPGA constraints are set to 320 CLBs and 144 IOBs. Table 3 shows that WCDP outperforms recursive FM and SC [4]. <p> We also tested WCDP on three huge industrial benchmarks with up to 160K gates and 90K nets. WCDP achieves an average of 18% improvement over SC with reasonable (but longer) running time, as shown in Table 4. For Multiple Type FPGA Partitioning, we tested all nine benchmarks studied in <ref> [9] </ref>, using the same library. Our WCDP heuristic outperforms [9] by an average of 5:08%, as shown in Table 5. In [10], Kuznar et al. allow node replication during the partitioning; WCDP still obtains better results without using replication. <p> WCDP achieves an average of 18% improvement over SC with reasonable (but longer) running time, as shown in Table 4. For Multiple Type FPGA Partitioning, we tested all nine benchmarks studied in <ref> [9] </ref>, using the same library. Our WCDP heuristic outperforms [9] by an average of 5:08%, as shown in Table 5. In [10], Kuznar et al. allow node replication during the partitioning; WCDP still obtains better results without using replication. <p> KBK93 is the modified FM algorithm in <ref> [9] </ref>, and SC is the Set Covering algorithm in [4]. <p> WCDP outperforms KBK93 <ref> [9] </ref> by 5:08%. LB = lower bound on solution cost obtained by integer programming in [9]. node v 1 and v 2 are overlapped (dotted line), the num ber of pins in C 2 is reduced by 1. <p> WCDP outperforms KBK93 <ref> [9] </ref> by 5:08%. LB = lower bound on solution cost obtained by integer programming in [9]. node v 1 and v 2 are overlapped (dotted line), the num ber of pins in C 2 is reduced by 1. This theorem suggests that for Single Type FPGA partitioning, a solution without overlapping can be obtained from an overlapping solution. <p> According to this result, and within our given problem formulation, we can always obtain a disjoint partitioning solution from an overlapping solution. 6 Acknowledgments We are grateful to Dr. L. T. Liu for his valuable discussion and providing the translator of benchmarks <ref> [9] </ref> from MCNC.
Reference: [10] <author> R. Kuznar, F. Brglez, and B. Zajc, </author> <title> "Multi-way Netlist Partitioning into Heterogeneous FPGAs and Minimization of Total Device Cost and Interconnect", </title> <booktitle> 31st ACM/IEEE Design Automation Conference, </booktitle> <year> 1994, </year> <pages> pp. 238-243. </pages>
Reference-contexts: Their method recursively applies a variant of FM bipartitioning which allows some uphill moves. In subsequent work, Kuznar et al. <ref> [10] </ref> allow CLBs to be duplicated, i.e., they introduce functional replication to minimize the total cost of devices and inter-device interconnect. Finally, Chou [4] et al. have proposed an algorithm to partition a circuit into instances of a single FPGA type, such that the number of FPGAs is minimized. <p> For Multiple Type FPGA Partitioning, we tested all nine benchmarks studied in [9], using the same library. Our WCDP heuristic outperforms [9] by an average of 5:08%, as shown in Table 5. In <ref> [10] </ref>, Kuznar et al. allow node replication during the partitioning; WCDP still obtains better results without using replication.
Reference: [11] <author> W. Sun and C. Sechen, </author> <title> "Efficient and Effective Placements for Very Large Circuits" Proc. </title> <booktitle> IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <address> Santa Clara, </address> <month> Nov. </month> <year> 1993, </year> <pages> pp. 170-177. </pages>
Reference-contexts: Node v i is the j th node in the ordering if (j) = i. [2] presented various orderings, such as max-adjacency ordering, min-perimeter ordering, max absorption <ref> [11] </ref>, and min scaled cost [3], each of which may be achieved by defining some "attraction" from unordered nodes to the set of all previously ordered nodes.
Reference: [12] <author> N.-S. Woo and J. Kim, </author> <title> "An Efficient Method of Partitioning Circuits for Multiple- FPGA Implementation", </title> <booktitle> 30th ACM/IEEE Design Automation Conference, </booktitle> <year> 1993, </year> <pages> pp. 202-207. </pages>
Reference-contexts: 1 Introduction Multi-way circuit partitioning has been studied extensively in VLSI CAD. Recent research in multiple-FPGA systems has addressed objectives which minimize the net cut between partitions subject to size constraints (#CLBs) and pin constraints (#IOBs or incident signal nets) on each partition. Woo and Kim <ref> [12] </ref> proposed a modification of the Fiduccia-Mattheyses (FM) [5] method to perform k-way partitioning, with k given, which tries to minimize the total number of pins of all partitions while satisfying given size and pin constraints.
References-found: 12

