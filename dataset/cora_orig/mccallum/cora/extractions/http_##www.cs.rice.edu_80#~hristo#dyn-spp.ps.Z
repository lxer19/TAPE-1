URL: http://www.cs.rice.edu:80/~hristo/dyn-spp.ps.Z
Refering-URL: http://www.cs.rice.edu:80/~hristo/publications.html
Root-URL: 
Title: Improved Algorithms for Dynamic Shortest Paths  
Author: Hristo N. Djidjev Grammati E. Pantziou Christos D. Zaroliagis 
Keyword: Shortest path, dynamic algorithm, planar digraph, outerplanar digraph.  
Note: This work was partially supported by the NSF grant No. CCR-9409191 and by the EU ESPRIT LTR Project No. 20244 (ALCOM-IT).  
Address: P.O. Box 1892, Houston, TX 77251, USA  P.O. Box 1122, 26110 Patras, Greece  Im Stadtwald, 66123 Saarbrucken, Germany  
Affiliation: Department of Computer Science, Rice University,  Computer Technology Institute,  Max-Planck-Institut fur Informatik,  
Email: Email: hristo@cs.rice.edu  Email: pantziou@cti.gr  Email:  
Web: zaro@mpi-sb.mpg.de  
Date: November 9, 1996  
Abstract: We describe algorithms for finding shortest paths and distances in outerplanar and planar digraphs that exploit the particular topology of the input graph. An important feature of our algorithms is that they can work in a dynamic environment, where the cost of any edge can be changed or the edge can be deleted. In the case of outerplanar digraphs, our data structures can be updated after any such change in only logarithmic time and a distance query is answered also in logarithmic time. In the case of planar digraphs, we give an interesting trade-off between preprocessing, query and update times depending on the value of a certain topological parameter of the graph. Our results can be extended to n-vertex digraphs of genus O(n 1" ) for any " &gt; 0. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, A. Borgida, and H.V. Jagadish, </author> <title> Efficient management of transitive relationships in large data and knowledge bases, </title> <booktitle> in Proc. ACM-SIGMOD Int'l Conf. on Management of Data, </booktitle> <year> 1989. </year>
Reference-contexts: Such an approach has immediate applications to a variety of problem domains which are of both theoretical and practical value, including (among others) communication networks, high level languages for incremental computations [38], incremental data flow analysis [5], database and knowledge base systems <ref> [1, 37] </ref>, and programming environments [25]. Finding shortest path information in graphs is an important and intensively studied problem with many applications.
Reference: [2] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: Finally, in Section 5 we describe the extensions and generalizations of our results. Preliminary portions of this work have been appeared in [13]. 2 Preliminaries We assume that the reader is familiar with standard graph-theoretic terminology as contained e.g., in <ref> [2, 23] </ref>. A graph is called outerplanar if it can be embedded in the plane 5 such that all of its vertices lie on one face. Let G = (V (G); E (G)) be a connected digraph.
Reference: [3] <author> L. Aleksandrov and H. Djidjev, </author> <title> Linear Algorithms for Partitioning Embedded Graphs of Bounded Genus, </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 9 (1996), </volume> <pages> 129-150. </pages>
Reference-contexts: Such a separator can be found in linear time and an embedding of the graph does not need to be provided by the input [9, 10]. If such an embedding is provided as an input, then one can find also an o (n)-decomposition for G in O (n) time <ref> [3] </ref>; otherwise, this division is computed in O (n log n) time.
Reference: [4] <editor> G. Ausiello, G.F. Italiano, A.M. Spaccamela, U. </editor> <title> Nanni, Incremental algorithms for minimal length paths, </title> <editor> J. </editor> <booktitle> of Algorithms, 12 (1991), </booktitle> <pages> 615-638. </pages>
Reference-contexts: Note that the update time after an edge deletion or edge cost increase is equal to the time required to recompute all pairs shortest paths from scratch [22]. Improvements on these algorithms have been achieved in <ref> [4] </ref> with respect to the worst-case complexity of a sequence of edge insertions or edge cost decreases (thus providing a better bound per update in the amortized sense), in the special case where the edge costs are nonnegative integers. More specifically, the data structure in [4] can be updated in O <p> algorithms have been achieved in <ref> [4] </ref> with respect to the worst-case complexity of a sequence of edge insertions or edge cost decreases (thus providing a better bound per update in the amortized sense), in the special case where the edge costs are nonnegative integers. More specifically, the data structure in [4] can be updated in O (Cn 3 log (nC)) time after a sequence of at most O (n 2 ) edge insertions or at most O (Cn 2 ) edge cost decreases, where C is the largest value of an edge cost. (Edge deletions or edge cost increases are not <p> updated in O (Cn 3 log (nC)) time after a sequence of at most O (n 2 ) edge insertions or at most O (Cn 2 ) edge cost decreases, where C is the largest value of an edge cost. (Edge deletions or edge cost increases are not considered in <ref> [4] </ref>.) For the important case of planar digraphs with nonnegative real edge costs, dynamic algorithms for the shortest path problem are given in [16].
Reference: [5] <author> M. Carroll and B. Ryder, </author> <title> Incremental Data Flow Analysis via Dominator and Attribute Grammars, </title> <booktitle> in Proc. 15th ACM SIGACT-SIGPLAN Symp. on Principles of Programming Languages, </booktitle> <year> 1988. </year>
Reference-contexts: Such an approach has immediate applications to a variety of problem domains which are of both theoretical and practical value, including (among others) communication networks, high level languages for incremental computations [38], incremental data flow analysis <ref> [5] </ref>, database and knowledge base systems [1, 37], and programming environments [25]. Finding shortest path information in graphs is an important and intensively studied problem with many applications.
Reference: [6] <author> S. Chaudhuri and C. Zaroliagis, </author> <title> Shortest Path Queries in Digraphs of Small Treewidth, </title> <booktitle> in Proc. 22nd ICALP'95, Lecture Notes in Computer Science, </booktitle> <publisher> 944 (Springer-Verlag, </publisher> <year> 1995), </year> <pages> 244-255. </pages>
Reference-contexts: This time bound is worst-case for queries as well as for edge cost modifications and edge deletions, while for edge insertions it is amortized. Other dynamic algorithms for the shortest path problem are known for special classes of digraphs <ref> [6] </ref>.
Reference: [7] <author> B. Chazelle, </author> <title> A Theorem on Polygon Cutting with Applications, </title> <booktitle> in Proc. 23rd IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1982, </year> <month> pp.339-349. </month>
Reference-contexts: An ff-separator of G is a set S V (G) whose removal leaves no connected component with more than ffjV (G)j vertices. It is well known that if G is outerplanar, then there exists a 2=3-separator of G which is a single separation pair <ref> [7] </ref>. Such a separation pair can be found by triangulating all internal faces of G and finding a separator edge in the dual graph of the resulting embedding, excluding the outer face, which is a tree.
Reference: [8] <author> E. Cohen, </author> <title> Efficient Parallel Shortest-paths in Digraphs with a Separator Decomposition, </title> <booktitle> Proc. 5th ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1993, </year> <month> pp.57-67. </month>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> In the case of planar digraphs we need a parallel algorithm to build the data structures in G q (recall Section 4). We will make use of the following result <ref> [8] </ref>: In any n-vertex planar digraph H the single-source shortest path problem can be solved in O (log 4 n) time with O (n 3=2 ) work on a CREW PRAM.
Reference: [9] <author> H. Djidjev, </author> <title> A Separator Theorem for Graphs of Fixed Genus, </title> <journal> SERDICA, </journal> <volume> 11 (1985), </volume> <pages> 319-329. </pages>
Reference-contexts: For any n-vertex digraph G of genus fl &gt; 0, a 2=3-separator of size O ( p fln) exists. Such a separator can be found in linear time and an embedding of the graph does not need to be provided by the input <ref> [9, 10] </ref>. If such an embedding is provided as an input, then one can find also an o (n)-decomposition for G in O (n) time [3]; otherwise, this division is computed in O (n log n) time.
Reference: [10] <author> H. Djidjev, </author> <title> A Linear Algorithm for Partitioning Graphs of Fixed Genus, </title> <journal> SERDICA, </journal> <volume> 11 (1985), </volume> <pages> 369-387. </pages>
Reference-contexts: For any n-vertex digraph G of genus fl &gt; 0, a 2=3-separator of size O ( p fln) exists. Such a separator can be found in linear time and an embedding of the graph does not need to be provided by the input <ref> [9, 10] </ref>. If such an embedding is provided as an input, then one can find also an o (n)-decomposition for G in O (n) time [3]; otherwise, this division is computed in O (n log n) time.
Reference: [11] <author> H. Djidjev, </author> <title> On-Line Algorithms for Shortest Path Problems on Planar Digraphs, </title> <booktitle> in Proc. 22nd WG '96, Lecture Notes in Computer Science, </booktitle> <publisher> (Springer-Verlag, </publisher> <year> 1996), </year> <note> to appear. </note>
Reference-contexts: composition of O (log n) of the predefined paths and that any edge of the digraph belongs to O (log n) of those paths (n being the size of the outerplanar digraph). 4 Our second result for planar digraphs is based on the above ideas and on the recent paper <ref> [11] </ref>, which studies tradeoffs between the preprocessing time and space and the query time for the shortest path problem in planar (non-dynamic) digraphs. <p> We propose two types of algorithms for planar digraphs depending on which algorithm we use for computing the shortest path information in G q : the algorithm of [29] which leads to a dynamic algorithm with smaller update time, or the algorithm of <ref> [11] </ref> which leads to a class of dynamic algorithms with improved query times. <p> The algorithm is based on the following result from <ref> [11] </ref>. Theorem 3 [11] Any n-vertex planar digraph G can be preprocessed using O (n 3=2 ) time and space so that any single-pair distance query can be answered in O (n 1=2 ) time. We make the following simple modifications to the algorithms from the previous subsection. <p> The algorithm is based on the following result from <ref> [11] </ref>. Theorem 3 [11] Any n-vertex planar digraph G can be preprocessed using O (n 3=2 ) time and space so that any single-pair distance query can be answered in O (n 1=2 ) time. We make the following simple modifications to the algorithms from the previous subsection.
Reference: [12] <author> H. Djidjev, G. Pantziou and C. Zaroliagis, </author> <title> Computing Shortest Paths and Distances in Planar Graphs, </title> <booktitle> in Proc. 18th ICALP'91, Lecture Notes in Computer Science, </booktitle> <publisher> 510 (Springer-Verlag, </publisher> <year> 1991), </year> <pages> 327-339. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> Other dynamic algorithms for the shortest path problem are known for special classes of digraphs [6]. On the other hand, efficient data structures for answering very fast on-line shortest path or distance queries in planar digraphs with real edge costs have been proposed in <ref> [12, 19] </ref>, but they do not support dynamization. 1.3 Our results In this paper, we give efficient algorithms for solving the dynamic shortest path problem in outerplanar and planar digraphs.
Reference: [13] <author> H. Djidjev, G. Pantziou and C. Zaroliagis, </author> <title> On-line and Dynamic Algorithms for Shortest Path Problems, </title> <booktitle> in Proc. 12th STACS'95, Lecture Notes in Computer Science, </booktitle> <publisher> 900 (Springer-Verlag, </publisher> <year> 1995), </year> <type> 193-204; also Tech. Rep. </type> <institution> MPI-I-94-114, Max-Planck-Institut fur Informatik, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: In Section 3 we present our algorithms for outerplanar digraphs. Our results for planar digraphs are given in Section 4. Finally, in Section 5 we describe the extensions and generalizations of our results. Preliminary portions of this work have been appeared in <ref> [13] </ref>. 2 Preliminaries We assume that the reader is familiar with standard graph-theoretic terminology as contained e.g., in [2, 23]. A graph is called outerplanar if it can be embedded in the plane 5 such that all of its vertices lie on one face.
Reference: [14] <author> S. Even and H. Gazit, </author> <title> Updating distances in dynamic graphs, </title> <journal> Methods of Operations Research, </journal> <volume> 49 (1985), </volume> <pages> 371-387. </pages>
Reference-contexts: For general digraphs with real edge costs, the best previous algorithms, in the case of edge insertions, edge deletions and edge cost updates, are given in <ref> [14, 34] </ref>. The data structure in [14, 34] is updated in O (n 2 ) time after an edge insertion or edge cost decrease, and in O (nm + n 2 log n) time after an edge deletion or edge cost increase (m being the current number of edges in the <p> For general digraphs with real edge costs, the best previous algorithms, in the case of edge insertions, edge deletions and edge cost updates, are given in <ref> [14, 34] </ref>. The data structure in [14, 34] is updated in O (n 2 ) time after an edge insertion or edge cost decrease, and in O (nm + n 2 log n) time after an edge deletion or edge cost increase (m being the current number of edges in the graph).
Reference: [15] <author> P. Erd-os and J. Spencer, </author> <title> Probabilistic Methods in Combinatorics, </title> <publisher> Academic Press, </publisher> <year> 1974. </year>
Reference-contexts: Typically such graphs can be represented as a tree plus a small number of non-tree edges and thus have a small value of q. Also, our algorithms seem to be very efficient for the class of all appropriately sparse graphs. As it has been established in <ref> [15, 28] </ref> random G n;p graphs with threshold function 1=n are planar with probability one and have expected value for q equal to O (1).
Reference: [16] <author> E. Feuerstein and A. Marchetti-Spaccamela, </author> <title> Dynamic Algorithms for Shortest Paths in Planar Graphs, </title> <institution> Theor. Computer Science, </institution> <month> 116 </month> <year> (1993), </year> <pages> 359-371. 21 </pages>
Reference-contexts: O (Cn 2 ) edge cost decreases, where C is the largest value of an edge cost. (Edge deletions or edge cost increases are not considered in [4].) For the important case of planar digraphs with nonnegative real edge costs, dynamic algorithms for the shortest path problem are given in <ref> [16] </ref>. The preprocessing time and space is O (n log n). (The space can be reduced to O (n), if the computation is restricted to finding distances only.) A shortest path or distance query can be answered in O (n) time.
Reference: [17] <author> G.N. Frederickson, </author> <title> Fast algorithms for shortest paths in planar graphs, with applications, </title> <journal> SIAM Journal on Computing, </journal> <volume> 16 (1987), </volume> <pages> 1004-1022. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> This algorithm solves the problem in a directed digraph G in O (jV (G)j) time, if G has an 2=3-separator of size O (n 1fi ), for any fi &gt; 0, and if a corresponding division of G, called ffi (n)-division <ref> [17] </ref>, into edge disjoint subgraphs of size ffi (n) = o (n) can be constructed in linear time. Both assumptions are satisfied in the case of planar digraphs.
Reference: [18] <author> G.N. Frederickson, </author> <title> Planar Graph Decomposition and All Pairs Shortest Paths, </title> <journal> Journal of the ACM, </journal> <month> 38:1 </month> <year> (1991), </year> <pages> 162-204. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> Based on the above result for outerplanar digraphs and using the hammock decomposition approach pioneered by Frederickson <ref> [18, 20] </ref>, we give two algorithms for planar digraphs that are parameterized in terms of a topological measure q of the input digraph. Informally, q represents the minimum number of outerplanar subgraphs (called hammocks), satisfying certain separation properties, into which a planar graph can be decomposed. <p> Our solution is based on the following ideas: (a) The input planar digraph is decomposed into a minimum number, q, of outerplanar subgraphs (hammocks) satisfying certain separator conditions <ref> [18, 20] </ref>. (b) A decomposition strategy based on graph separators is employed for the efficient solution of the problem in the case of outerplanar digraphs (Section 2). (c) A data structure is constructed during the decomposition of the outerplanar digraph and is updated after each edge cost modification or edge deletion <p> easy to overcome this restriction: if G op is not biconnected, then we can add an appropriate number of edges to make it biconnected and assign to these edges a very large cost such that they will not be used by any shortest path in G op ; see e.g., <ref> [18] </ref>.) Let M V (G op ) be a set of vertices in G op . <p> Such a compression was first considered in <ref> [18] </ref> for the case jM j = 4 and can be found in O (n) time. The method described in that paper can be easily generalized for any bounded value of jM j. For the rest of the paper the size of M will be O (1). <p> Let q 0 be the minimum number of such faces (among all embeddings of G in the plane). It has been proved that a planar digraph G can be decomposed into q = O (q 0 ) hammocks either in O (n) sequential time <ref> [18] </ref>, or in O (log n log fl n) parallel time and O (n log n log fl n) work on a CREW PRAM [32]. <p> Compress each hammock H with respect to its attachment vertices. This results into a planar digraph G q , which is of size O (q). End. Lemma 4.1 Algorithm Pre Planar runs in O (n) time and uses O (n) space. Proof: Step 1 runs in O (n) time <ref> [18] </ref>. Step 2 runs, overall hammocks, in O (n) time by Theorem 1.
Reference: [19] <author> G.N. Frederickson, </author> <title> "Searching among Intervals and Compact Routing Tables", </title> <booktitle> in Proc. 20th ICALP'93, Lecture Notes in Computer Science, </booktitle> <publisher> 700 (Springer-Verlag, </publisher> <year> 1993), </year> <pages> 28-39. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> Other dynamic algorithms for the shortest path problem are known for special classes of digraphs [6]. On the other hand, efficient data structures for answering very fast on-line shortest path or distance queries in planar digraphs with real edge costs have been proposed in <ref> [12, 19] </ref>, but they do not support dynamization. 1.3 Our results In this paper, we give efficient algorithms for solving the dynamic shortest path problem in outerplanar and planar digraphs.
Reference: [20] <author> G.N. Frederickson, </author> <title> Using Cellular Graph Embeddings in Solving All Pairs Shortest Path Problems, </title> <journal> Journal of Algorithms, </journal> <volume> 19 (1995), </volume> <pages> 45-85. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> Based on the above result for outerplanar digraphs and using the hammock decomposition approach pioneered by Frederickson <ref> [18, 20] </ref>, we give two algorithms for planar digraphs that are parameterized in terms of a topological measure q of the input digraph. Informally, q represents the minimum number of outerplanar subgraphs (called hammocks), satisfying certain separation properties, into which a planar graph can be decomposed. <p> Our solution is based on the following ideas: (a) The input planar digraph is decomposed into a minimum number, q, of outerplanar subgraphs (hammocks) satisfying certain separator conditions <ref> [18, 20] </ref>. (b) A decomposition strategy based on graph separators is employed for the efficient solution of the problem in the case of outerplanar digraphs (Section 2). (c) A data structure is constructed during the decomposition of the outerplanar digraph and is updated after each edge cost modification or edge deletion <p> Moreover, our data structures allow us to solve in linear time the single-source shortest path problem in outerplanar digraphs with real edge costs (but no negative cycles). (iii) Using the ideas in <ref> [20] </ref>, our results can be extended to hold for any digraph whose genus is O (n 1" ) for any " &gt; 0. (iv) Although our algorithms do not directly support edge insertion, they are efficient enough so that even if the preprocessing algorithm is run from scratch after any edge <p> We make use of the fact <ref> [20] </ref> that, in this case, the minimum number q of hammocks is at most a constant factor times fl + q 0 , where q 0 is the minimum number of faces among all cellular embeddings of G on a surface of genus fl that cover all vertices of G. <p> Note that the method in <ref> [20] </ref> does not require such an embedding to be provided by the input in order to produce the hammock decomposition. The decomposition can be found in linear time [20]. <p> Note that the method in <ref> [20] </ref> does not require such an embedding to be provided by the input in order to produce the hammock decomposition. The decomposition can be found in linear time [20].
Reference: [21] <author> G.N. Frederickson and R. Janardan, </author> <title> Designing Networks with Compact Routing Tables, </title> <journal> Algo-rithmica, </journal> <volume> 3 (1988), </volume> <pages> 171-190. </pages>
Reference-contexts: The parameter q ranges from 1 up to fi (n), depending on how complex the topological properties of the input graph become, and defines a natural hierarchy of planar graphs <ref> [21] </ref> that appears to be very important since it generalizes outerplanar graphs (for which q = 1) and has been proved crucial in the design of space-efficient methods for message routing in communication networks [21]. <p> the topological properties of the input graph become, and defines a natural hierarchy of planar graphs <ref> [21] </ref> that appears to be very important since it generalizes outerplanar graphs (for which q = 1) and has been proved crucial in the design of space-efficient methods for message routing in communication networks [21]. Hence, our result is always competitive with the best previous ones, and it is better in all cases where q = o (n). Classes of graphs with a small value of q are the planar graphs which satisfy the o (n)-interval property as they are defined in [21]. <p> communication networks <ref> [21] </ref>. Hence, our result is always competitive with the best previous ones, and it is better in all cases where q = o (n). Classes of graphs with a small value of q are the planar graphs which satisfy the o (n)-interval property as they are defined in [21]. Yet another class of graphs are the graphs describing global area networks. Typically such graphs can be represented as a tree plus a small number of non-tree edges and thus have a small value of q.
Reference: [22] <author> M. Fredman and R. Tarjan, </author> <title> Fibonacci heaps and their uses in improved network optimization algorithms, </title> <journal> Journal of the ACM, </journal> <volume> 34 (1987), </volume> <pages> 596-615. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> Note that the update time after an edge deletion or edge cost increase is equal to the time required to recompute all pairs shortest paths from scratch <ref> [22] </ref>. Improvements on these algorithms have been achieved in [4] with respect to the worst-case complexity of a sequence of edge insertions or edge cost decreases (thus providing a better bound per update in the amortized sense), in the special case where the edge costs are nonnegative integers.
Reference: [23] <author> F. Harary, </author> <title> Graph Theory, </title> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference-contexts: Finally, in Section 5 we describe the extensions and generalizations of our results. Preliminary portions of this work have been appeared in [13]. 2 Preliminaries We assume that the reader is familiar with standard graph-theoretic terminology as contained e.g., in <ref> [2, 23] </ref>. A graph is called outerplanar if it can be embedded in the plane 5 such that all of its vertices lie on one face. Let G = (V (G); E (G)) be a connected digraph.
Reference: [24] <author> R. Hassin, </author> <title> Maximum flow in (s; t)-planar networks, </title> <journal> Inform. Process. Lett., </journal> <volume> 13 (1981), </volume> <pages> 107. </pages>
Reference-contexts: Note that the problem must be solved in an on-line fashion, i.e., each operation (query or update) must be performed before the next one is known. The dynamic version of the shortest path problem has several applications including dynamic maintenance of a maximum s-t flow in a planar network <ref> [24] </ref>, computing a feasible flow between multiple sources and sinks [31], as well as finding a perfect matching in bipartite planar graphs [31].
Reference: [25] <author> N. Horspool, </author> <title> Incremental Generation of LR Parsers, </title> <type> Tech. Report, </type> <institution> Dept of Computer Science, University of Victoria, </institution> <year> 1988. </year>
Reference-contexts: Such an approach has immediate applications to a variety of problem domains which are of both theoretical and practical value, including (among others) communication networks, high level languages for incremental computations [38], incremental data flow analysis [5], database and knowledge base systems [1, 37], and programming environments <ref> [25] </ref>. Finding shortest path information in graphs is an important and intensively studied problem with many applications.
Reference: [26] <author> J. JaJa, </author> <title> An Introduction to Parallel Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Then, compute for each node v of T the number w (v) equal to the sum of the weights of all descendants of v (including v itself). This can be easily done in O (log n) time and O (n) work (see e.g., <ref> [26, Chapter 3] </ref>). Using the numbers w (v), find in constant time and O (n) work an edge e of T whose removal divides T into two subtrees T 1 and T 2 each of total weight on its vertices at most 2/3 of the total weight of T . <p> All that is required is to perform a (breadth-first) traversal of the appropriate trail tree which has at most L leaves and size O (L). Using standard parallel techniques (see e.g., <ref> [26] </ref>), we can perform this traversal (and thus output the path) in O (log n) time and O (L) work. We summarize the above discussion as follows.
Reference: [27] <author> D. Kavvadias, G. Pantziou, P. Spirakis and C. Zaroliagis, </author> <title> Hammock-on-Ears Decomposition: A Technique for the Efficient Parallel Solution of Shortest Paths and Other Problems, </title> <booktitle> Theoretical Computer Science, </booktitle> <year> (1996), </year> <note> in print. </note>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> Clearly, this does not change the time bound of Lemma 3.5. 3.4 Handling of negative cycles and summary of the results The initial digraph G op can be tested for the existence of a negative cycle in O (n) time by <ref> [27] </ref>. Assume now that G op does not contain a negative cycle and that the cost c (v; w) of an edge hv; wi in G op has to be changed to c 0 (v; w). We must check if this change does not create a negative cycle.
Reference: [28] <author> D. Kavvadias, G. Pantziou, P. Spirakis and C. Zaroliagis, </author> <title> "Efficient Sequential and Parallel Algorithms for the Negative Cycle Problem", </title> <booktitle> in Proc. 5th ISAAC'94, Lecture Notes in Computer Science, </booktitle> <publisher> 834 (Springer-Verlag, </publisher> <year> 1994), </year> <pages> 270-278. </pages>
Reference-contexts: Typically such graphs can be represented as a tree plus a small number of non-tree edges and thus have a small value of q. Also, our algorithms seem to be very efficient for the class of all appropriately sparse graphs. As it has been established in <ref> [15, 28] </ref> random G n;p graphs with threshold function 1=n are planar with probability one and have expected value for q equal to O (1). <p> Let G op be an n-vertex outerplanar digraph with real edge costs. Since G op can be tested for a negative cycle in O (n) time <ref> [28] </ref>, we can assume w.l.o.g. that G op does not have such a cycle. Preprocess G op using algorithm Pre Outerplanar (Section 3.1). Let U V be a subset of O (1) vertices of G op with a weight d 0 (u) on any u 2 U .
Reference: [29] <author> P. Klein, S. Rao, M. Rauch and S. Subramanian, </author> <title> Faster shortest-path algorithms for planar graphs, </title> <booktitle> in Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <year> 1994, </year> <month> pp.27-37. </month>
Reference-contexts: An update operation to this data structure, after an edge cost modification or edge deletion, can be performed in O (log 3 n) time. This result, however, has been superseded by the O (n) time single-source shortest path algorithm for planar digraphs with nonnegative real edge costs given in <ref> [29] </ref>. Also in that paper [29] a dynamic algorithm is given for shortest paths in planar digraphs with integral edge costs (which may be negative). More precisely, the algorithm initializes an O (n)-size data structure in O (n 10=7 ) time. <p> This result, however, has been superseded by the O (n) time single-source shortest path algorithm for planar digraphs with nonnegative real edge costs given in <ref> [29] </ref>. Also in that paper [29] a dynamic algorithm is given for shortest paths in planar digraphs with integral edge costs (which may be negative). More precisely, the algorithm initializes an O (n)-size data structure in O (n 10=7 ) time. <p> We propose two types of algorithms for planar digraphs depending on which algorithm we use for computing the shortest path information in G q : the algorithm of <ref> [29] </ref> which leads to a dynamic algorithm with smaller update time, or the algorithm of [11] which leads to a class of dynamic algorithms with improved query times. <p> In the query algorithm we just run on G q the single-source shortest path algorithm from <ref> [29] </ref>. Details are given below. The preprocessing algorithm for G is the following. ALGORITHM Pre Planar (G) Begin 1. Find a hammock decomposition of G into q hammocks. 2. Run the algorithm Pre Outerplanar (H) in each hammock H. 3. Compress each hammock H with respect to its attachment vertices. <p> For the query algorithm we will make use of the recent linear-time algorithm for the single source shortest path problem given in <ref> [29] </ref>. <p> Proof: Let us analyze the time complexity of the above algorithm. We need O (q) time for queries in G q using the single source shortest path algorithm of <ref> [29] </ref> (for computing a distance or a compressed shortest path) and O (log jHj) or O (L H +log jHj) time respectively for distance and shortest path queries in each hammock H (Theorem 1), where jHj is the size of H and L H is the portion (in number of edges) <p> Finally, the query algorithm is the same, only we use Theorem 3 instead the algorithm from <ref> [29] </ref> for computing distances between vertices of G q . Hence we have the following result. Theorem 4 Let G be an n-vertex planar digraph with nonnegative edge costs and let q be the minimum cardinality of a hammock decomposition of G. <p> We first give an O (n) time algorithm for the single-source shortest 17 path problem in an n-vertex outerplanar digraph with real edge costs but no negative cycles. (Note that this result is not superseded by the linear-time algorithm for planar digraphs in <ref> [29] </ref>, since that algorithm does not handle negative real edge costs.) Then, we present an efficient parallel implementation of our algorithms on the CREW PRAM model of computation. <p> The decomposition can be found in linear time [20]. The only other property of planar graphs that is relevant to our shortest path algorithms (as well as to the algorithm from <ref> [29] </ref>) is the existence of a 2=3-separator of size O (n 1fi ) for any n-vertex graph G, where fi &gt; 0, and that a ffi (n)-division for G can be constructed in linear time for any ffi (n) = o (n).
Reference: [30] <author> A. Lingas, </author> <title> Efficient Parallel Algorithms for Path Problems in Planar Directed Graphs, </title> <booktitle> in Proc. SIGAL'90, Lecture Notes in Computer Science, </booktitle> <publisher> 450 (Springer-Verlag, </publisher> <year> 1990), </year> <pages> 447-457. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation.
Reference: [31] <author> G. Miller and J. Naor, </author> <title> Flows in planar graphs with multiple sources and sinks, </title> <booktitle> in Proc. 30th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1991, </year> <month> pp.112-117. </month>
Reference-contexts: The dynamic version of the shortest path problem has several applications including dynamic maintenance of a maximum s-t flow in a planar network [24], computing a feasible flow between multiple sources and sinks <ref> [31] </ref>, as well as finding a perfect matching in bipartite planar graphs [31]. <p> The dynamic version of the shortest path problem has several applications including dynamic maintenance of a maximum s-t flow in a planar network [24], computing a feasible flow between multiple sources and sinks <ref> [31] </ref>, as well as finding a perfect matching in bipartite planar graphs [31]. Dynamic algorithms for shortest paths appear also to be fundamental procedures in incremental computations for data flow analysis and interactive systems design [33, 38]. 2 1.2 Previous results There are a few previously known algorithms for the dynamic shortest path problem.
Reference: [32] <author> G. Pantziou, P. Spirakis and C. Zaroliagis, </author> <title> Efficient Parallel Algorithms for Shortest Paths in Planar Digraphs, </title> <booktitle> BIT 32 (1992), </booktitle> <pages> 215-236. </pages>
Reference-contexts: Recent papers <ref> [8, 12, 17, 18, 19, 20, 22, 27, 30, 32] </ref> investigate the shortest path problem for different classes of input graphs and models of computation. <p> It has been proved that a planar digraph G can be decomposed into q = O (q 0 ) hammocks either in O (n) sequential time [18], or in O (log n log fl n) parallel time and O (n log n log fl n) work on a CREW PRAM <ref> [32] </ref>. <p> Furthermore, finding a hammock decomposition (Step 1 of algorithm Pre Planar) takes O (log n log fl n) time and O (n log n log fl n) work by <ref> [32] </ref>. Combining these results with Theorem 5 and using the construction from Section 4 we have the following.
Reference: [33] <author> G. Ramalingan and T. Reps, </author> <title> On the Computational Complexity of Incremental Algorithms, </title> <type> Technical Report, </type> <institution> University of Wisconsin-Madison, </institution> <year> 1991. </year>
Reference-contexts: Dynamic algorithms for shortest paths appear also to be fundamental procedures in incremental computations for data flow analysis and interactive systems design <ref> [33, 38] </ref>. 2 1.2 Previous results There are a few previously known algorithms for the dynamic shortest path problem. For general digraphs with real edge costs, the best previous algorithms, in the case of edge insertions, edge deletions and edge cost updates, are given in [14, 34].
Reference: [34] <author> H. Rohnert, </author> <title> A dynamization of the all pairs least cost path problem, </title> <booktitle> in Proc. 2nd STACS'85, Lecture Notes in Computer Science, </booktitle> <publisher> 182 (Springer-Verlag, </publisher> <year> 1985), </year> <pages> 279-286. </pages>
Reference-contexts: For general digraphs with real edge costs, the best previous algorithms, in the case of edge insertions, edge deletions and edge cost updates, are given in <ref> [14, 34] </ref>. The data structure in [14, 34] is updated in O (n 2 ) time after an edge insertion or edge cost decrease, and in O (nm + n 2 log n) time after an edge deletion or edge cost increase (m being the current number of edges in the <p> For general digraphs with real edge costs, the best previous algorithms, in the case of edge insertions, edge deletions and edge cost updates, are given in <ref> [14, 34] </ref>. The data structure in [14, 34] is updated in O (n 2 ) time after an edge insertion or edge cost decrease, and in O (nm + n 2 log n) time after an edge deletion or edge cost increase (m being the current number of edges in the graph).
Reference: [35] <author> B. Schieber and U. Vishkin, </author> <title> On Finding Lowest Common Ancestors: Simplification and Par-allelization, </title> <journal> SIAM Journal on Computing, </journal> <month> 17:6 </month> <year> (1988), </year> <pages> 1253-1262. </pages>
Reference-contexts: Step 3 can be easily implemented in O (n) time (since a vertex belongs only to a O (1) number of leaf subgraphs). Step 4 also needs O (n) time by <ref> [35] </ref>. The space required is proportional to the size of ST (G op ) since each sparse representative has O (1) size. Therefore the space needed for the above data structures is O (jST (G op )j) = O (n). <p> Step 3 can be easily implemented in O (log n) time and O (n) work. The same bounds hold for Step 4 by <ref> [35] </ref>. Hence, the data structures described in Section 3.1 can be constructed in O (log n) time and O (n log n) work.
Reference: [36] <author> D. Sleator and R. Tarjan, </author> <title> A Data Structure for Dynamic Trees, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 26 (1983), </volume> <pages> 362-391. </pages>
Reference-contexts: Therefore we need to show that the time required to find all separation pairs p from Step 1.1 is linear. We construct the dual graph of G op (excluding the outer face), which is a tree. By using the data structure of <ref> [36] </ref> for dynamic trees we can find one separation pair in O (log n) time.
Reference: [37] <author> M. Yannakakis, </author> <title> Graph Theoretic Methods in Database Theory, </title> <booktitle> in Proc. ACM conference on Principles of Database Systems, </booktitle> <year> 1990. </year>
Reference-contexts: Such an approach has immediate applications to a variety of problem domains which are of both theoretical and practical value, including (among others) communication networks, high level languages for incremental computations [38], incremental data flow analysis [5], database and knowledge base systems <ref> [1, 37] </ref>, and programming environments [25]. Finding shortest path information in graphs is an important and intensively studied problem with many applications.
Reference: [38] <author> D. Yellin and R. Strom, "INC: </author> <title> A language for incremental computations", </title> <journal> ACM Trans. Prog. Lang. Systems, </journal> <month> 13:2 </month> <year> (1991), </year> <pages> 211-236. 22 </pages>
Reference-contexts: Such an approach has immediate applications to a variety of problem domains which are of both theoretical and practical value, including (among others) communication networks, high level languages for incremental computations <ref> [38] </ref>, incremental data flow analysis [5], database and knowledge base systems [1, 37], and programming environments [25]. Finding shortest path information in graphs is an important and intensively studied problem with many applications. <p> Dynamic algorithms for shortest paths appear also to be fundamental procedures in incremental computations for data flow analysis and interactive systems design <ref> [33, 38] </ref>. 2 1.2 Previous results There are a few previously known algorithms for the dynamic shortest path problem. For general digraphs with real edge costs, the best previous algorithms, in the case of edge insertions, edge deletions and edge cost updates, are given in [14, 34].
References-found: 38

