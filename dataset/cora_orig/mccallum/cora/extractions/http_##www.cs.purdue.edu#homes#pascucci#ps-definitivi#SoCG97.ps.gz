URL: http://www.cs.purdue.edu/homes/pascucci/ps-definitivi/SoCG97.ps.gz
Refering-URL: 
Root-URL: 
Email: marc@cs.ruu.nl  rene@cs.ruu.nl  bajaj@cs.purdue.edu  pascucci@cs.purdue.edu  drs@cs.purdue.edu  
Title: Contour Trees and Small Seed Sets for Isosurface Traversal  
Author: Marc van Kreveld Rene van Oostrum Chandrajit Bajaj Valerio Pascucci Dan Schikore 
Abstract: For 2D or 3D meshes that represent a continuous function to the reals, the contours|or isosurfaces|of a specified value are an important way to visualize it. To find such contours, a seed set can be used for the starting points from which the traversal of the contours can start. This paper gives the first methods to obtain seed sets that are provably small in size. They are based on a variant of the contour tree (or topographic change tree). We give a new, simple algorithm to compute such a tree in regular and irregular meshes that requires O(n log n) time in 2D for meshes with n elements, and in O(n 2 ) time in higher dimensions. The additional storage overhead is proportial to the maximum size of any contour (linear in the worst case, but typically less). Given the contour tree, a minimum size seed set can be computed in polynomial time and storage. Since in practice at most linear storage is allowed, we develop a simple approximation algorithm giving a seed set of size at most twice the size of the minimum. It requires O(n log 2 n) time in 2D and O(n 2 ) time otherwise, and requires linear storage. We also give experimental results, showing the size of the seed sets and supporting the claim that sublinear storage is used. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. </author> <title> Network Flows: Theory, Algorithms, and Applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: Also, the higher-dimensional algorithm requires subquadratic time in typical cases. * We show that the contour tree is the appropriate structure to use when selecting seed sets. We give a polynomial time and storage algorithm for minimum size seed sets by using min-cost flow in a DAG <ref> [1] </ref>. * In practice one can use at most linear storage when computing seed sets. We give a simple approximation algorithm that requires O (n log 2 n) time and linear storage, and gives at most twice as many seeds as the minimum size seed set.
Reference: [2] <author> E. Artzy, G. Frieder, and G. T. Herman. </author> <title> The theory, design, implementation, and evaluation of 3-d surface detection algorithms. Comput. Graph. </title> <journal> Image Process., </journal> <volume> 15 </volume> <pages> 1-24, </pages> <year> 1981. </year>
Reference-contexts: There are a few papers that take this approach [3, 13, 23]. The tracing algorithms to extract a contour have been developed before, and they require time linear in the size of the output <ref> [2, 12, 13] </ref>. The objective of this paper is to present new methods for seed set computation. Of a seed set, we require that any possible connected component of any contour in the mesh pass through at least one seed. Otherwise we could miss a (portion of a) contour.
Reference: [3] <author> C.L. Bajaj, V. Pascucci, and D.R. Schikore. </author> <title> Fast isocontour-ing for improved interactivity. </title> <booktitle> In Proc. 1996 IEEE Symposium on Volume Visualization, </booktitle> <pages> pages 39-46, </pages> <address> San Francisco, Oct 7-8, </address> <year> 1996. </year>
Reference-contexts: For example, octrees have been used this way for regular 3D meshes [25]. The second approach is to store the scalar range, also called span, of all the mesh elements in a search structure. Kd-trees [15], segment trees <ref> [3] </ref>, and interval trees [5, 23] have been suggested as the search structure, leading to a contour retrieval time of O ( p n + k) or O (log n + k), where n is the number of mesh elements and k is the size of the output. <p> Instead of storing the scalar range of all mesh elements, we need only store the scalar range of the seeds as intervals in the tree, and a pointer into the mesh. There are a few papers that take this approach <ref> [3, 13, 23] </ref>. The tracing algorithms to extract a contour have been developed before, and they require time linear in the size of the output [2, 12, 13]. The objective of this paper is to present new methods for seed set computation. <p> In d-space, the algorithm takes O (n 2 ) time. * The approximation algorithm has been implementated, and we supply test results of various kind. Previous methods to find small size seed sets didn't give any guarantee on their size <ref> [3, 13, 23] </ref>. 2 Preliminaries on scalar functions and the contour tree On a function F from d-space to the reals, the criticali-ties can be identified. These are the local maxima, the local minima, and the saddles (or passes). <p> The methods presented here, shown to be within a factor of 2 of optimal, represent an improvement of 2 to 20 times over the method of <ref> [3] </ref>, which had no claim on the seed set size. The presented storage statistics account only for the number of stored items, and not the size of each storage item (a constant). <p> The bullet data is courtesy Lawrence Livermore National Laboratory. The terrain data is a triangulated irregular network from USGS DEM data. Data total #seeds storage time (s) #seeds by storage time (s) cells method of <ref> [3] </ref> req of [3] Heart 65025 5631 30651 32.68 12214 255 0.87 Function 3969 80 664 1.23 230 63 0.15 Bullet 20000 8 964 2.74 47 1000 0.30 LAMP 3d 19040 172 9267 6.82 576 1360 0.33 LAMP 2d 2720 73 473 0.69 n/a n/a n/a Terrain 95911 188 2078 13.67 <p> The bullet data is courtesy Lawrence Livermore National Laboratory. The terrain data is a triangulated irregular network from USGS DEM data. Data total #seeds storage time (s) #seeds by storage time (s) cells method of <ref> [3] </ref> req of [3] Heart 65025 5631 30651 32.68 12214 255 0.87 Function 3969 80 664 1.23 230 63 0.15 Bullet 20000 8 964 2.74 47 1000 0.30 LAMP 3d 19040 172 9267 6.82 576 1360 0.33 LAMP 2d 2720 73 473 0.69 n/a n/a n/a Terrain 95911 188 2078 13.67 n/a n/a n/a
Reference: [4] <author> A. Brandstadt, V. D. Chepoi, and F. F. Dragan. </author> <title> The algorithmic use of hypertree structure and maximum neighbour-hood orderings. </title> <booktitle> In 20th International Workshop "Graph-Theoretic Concepts in Computer Science"(WG'94), volume 903 of Lecture Notes in Computer Science, </booktitle> <pages> pages 65-80. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: We can augment B by turning U into a clique; B remains strongly chordal. A minimum dominating clique on strongly chordal graphs can be computed in linear time, because the same result holds for the superclass of dually chordal graphs <ref> [4, 8] </ref>. This gives a minimum seed set.
Reference: [5] <author> P. Cignoni, C. Montani, E. Puppo, and R. Scopigno. </author> <title> Optimal isosurface extraction from irregular volume data. </title> <booktitle> In Proc. IEEE Volume Visualization, </booktitle> <year> 1996. </year>
Reference-contexts: For example, octrees have been used this way for regular 3D meshes [25]. The second approach is to store the scalar range, also called span, of all the mesh elements in a search structure. Kd-trees [15], segment trees [3], and interval trees <ref> [5, 23] </ref> have been suggested as the search structure, leading to a contour retrieval time of O ( p n + k) or O (log n + k), where n is the number of mesh elements and k is the size of the output.
Reference: [6] <author> Mark de Berg and Marc van Kreveld. </author> <title> Trekking in the alps without freezing or getting tired. </title> <booktitle> In 1st Annual European Symposium on Algorithms (ESA '93), volume 726 of Lecture Notes in Computer Science, </booktitle> <pages> pages 121-132. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory [18, 19, 20, 22]. It can be computed in O (n log n) time for piecewise linear functions over 2D <ref> [6] </ref>. This paper includes the following results. * We give a new, simple algorithm that constructs the contour tree. For 2D meshes with n elements, it runs in O (n log n) time like a previous algorithm [6], but the new method is much simpler and needs less additional storage. <p> computed in O (n log n) time for piecewise linear functions over 2D <ref> [6] </ref>. This paper includes the following results. * We give a new, simple algorithm that constructs the contour tree. For 2D meshes with n elements, it runs in O (n log n) time like a previous algorithm [6], but the new method is much simpler and needs less additional storage. For meshes with n faces in d-space, it runs in O (n 2 ) time. In typical cases, less than linear temporary storage is needed during the construction, which is important in practice. <p> This graph is a tree, which is easy to show <ref> [6, 23] </ref>, and it is called the contour tree. All nodes in the tree have degree 1 (corresponding to local extrema), degree 2 (normal vertices), or at least 3 (saddles). In other words, every contour of a saddle vertex splits the domain into at least three regions. <p> If one would take the approach outlined above to construct the contour tree, (n 2 ) time may be necessary in the worst case, because the total complexity of all contours through saddles may be quadratic <ref> [6] </ref>. An O (n log n) time divide-and-conquer algorithm exists, however [6]. In a general framework, we define the contour tree without assumptions on the type of mesh, interpolant, and dimension of the space over which function F is defined. <p> If one would take the approach outlined above to construct the contour tree, (n 2 ) time may be necessary in the worst case, because the total complexity of all contours through saddles may be quadratic <ref> [6] </ref>. An O (n log n) time divide-and-conquer algorithm exists, however [6]. In a general framework, we define the contour tree without assumptions on the type of mesh, interpolant, and dimension of the space over which function F is defined.
Reference: [7] <author> F. F. Dragan and A. Brandstadt. </author> <title> Dominating cliques in graphs with hypertree structure. </title> <booktitle> In International Symposium on Theoretical Aspects of Computer Science (STACS'94), Lecture Notes in Computer Science number 775 , pages 735-746. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [8] <author> F. F. Dragan and A. Brandstadt. </author> <title> Dominating cliques in graphs with hypertree structure. </title> <booktitle> In International Symposium on Theoretical Aspects of Computer Science (STACS'94), volume 775 of Lecture Notes in Computer Science, </booktitle> <pages> pages 735-746, </pages> <address> Berlin, 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: We can augment B by turning U into a clique; B remains strongly chordal. A minimum dominating clique on strongly chordal graphs can be computed in linear time, because the same result holds for the superclass of dually chordal graphs <ref> [4, 8] </ref>. This gives a minimum seed set.
Reference: [9] <author> H. Freeman and S.P. Morse. </author> <title> On searching a contour map for a given terrain profile. </title> <journal> Journal of the Franklin Institute, </journal> <volume> 248 </volume> <pages> 1-25, </pages> <year> 1967. </year>
Reference-contexts: To construct such a small size seed set, we use a variation of the contour tree, a tree that captures the contour topology of the function represented by the mesh. It has been used before in image processing and GIS research <ref> [9, 10, 14, 21, 22] </ref>. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory [18, 19, 20, 22]. It can be computed in O (n log n) time for piecewise linear functions over 2D [6].
Reference: [10] <author> C. Gold and S. Cormack. </author> <title> Spatially ordered networks and topographic reconstructions. </title> <booktitle> In Proc. 2nd Int. Sympos. Spatial Data Handling, </booktitle> <pages> pages 74-85, </pages> <year> 1986. </year>
Reference-contexts: To construct such a small size seed set, we use a variation of the contour tree, a tree that captures the contour topology of the function represented by the mesh. It has been used before in image processing and GIS research <ref> [9, 10, 14, 21, 22] </ref>. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory [18, 19, 20, 22]. It can be computed in O (n log n) time for piecewise linear functions over 2D [6].
Reference: [11] <author> M.W. Hirsch. </author> <title> Differential Topology, volume 33 of Graduate Texts in Mathematics. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1976. </year>
Reference-contexts: The changes that can occur have been documented well in texts on Morse theory or differential topology <ref> [11, 16] </ref>. They can be described by a structure called the contour tree, which we describe shortly. For example, consider 2D triangular meshes with linear interpolation and note how the contour tree relates to such meshes. For simplicity, we assume that all vertices have a distinct function value.
Reference: [12] <author> C.T. Howie and E.H. Blake. </author> <title> The mesh propagation algorithm for isosurface construction. </title> <journal> Computer Graphics Forum, </journal> <volume> 13 </volume> <pages> 65-74, </pages> <year> 1994. </year>
Reference-contexts: There are a few papers that take this approach [3, 13, 23]. The tracing algorithms to extract a contour have been developed before, and they require time linear in the size of the output <ref> [2, 12, 13] </ref>. The objective of this paper is to present new methods for seed set computation. Of a seed set, we require that any possible connected component of any contour in the mesh pass through at least one seed. Otherwise we could miss a (portion of a) contour.
Reference: [13] <author> T. Itoh and K. Koyamada. </author> <title> Automatic isosurface propagation using an extrema graph and sorted boundary cell lists. </title> <journal> IEEE Trans. on Visualization and Computer Graphics, </journal> <volume> 1 </volume> <pages> 319-327, </pages> <year> 1995. </year>
Reference-contexts: Instead of storing the scalar range of all mesh elements, we need only store the scalar range of the seeds as intervals in the tree, and a pointer into the mesh. There are a few papers that take this approach <ref> [3, 13, 23] </ref>. The tracing algorithms to extract a contour have been developed before, and they require time linear in the size of the output [2, 12, 13]. The objective of this paper is to present new methods for seed set computation. <p> There are a few papers that take this approach [3, 13, 23]. The tracing algorithms to extract a contour have been developed before, and they require time linear in the size of the output <ref> [2, 12, 13] </ref>. The objective of this paper is to present new methods for seed set computation. Of a seed set, we require that any possible connected component of any contour in the mesh pass through at least one seed. Otherwise we could miss a (portion of a) contour. <p> In d-space, the algorithm takes O (n 2 ) time. * The approximation algorithm has been implementated, and we supply test results of various kind. Previous methods to find small size seed sets didn't give any guarantee on their size <ref> [3, 13, 23] </ref>. 2 Preliminaries on scalar functions and the contour tree On a function F from d-space to the reals, the criticali-ties can be identified. These are the local maxima, the local minima, and the saddles (or passes).
Reference: [14] <author> I.S. Kweon and T. Kanade. </author> <title> Extracting topographic terrain features from elevation maps. CVGIP: </title> <booktitle> Image Understanding, </booktitle> <volume> 59 </volume> <pages> 171-182, </pages> <year> 1994. </year>
Reference-contexts: To construct such a small size seed set, we use a variation of the contour tree, a tree that captures the contour topology of the function represented by the mesh. It has been used before in image processing and GIS research <ref> [9, 10, 14, 21, 22] </ref>. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory [18, 19, 20, 22]. It can be computed in O (n log n) time for piecewise linear functions over 2D [6].
Reference: [15] <author> Y. Livnat, H.-W. Shen, and C.R. Johnson. </author> <title> A near optimal isosurface extraction algorithm using the span space. </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> 2 </volume> <pages> 73-84, </pages> <year> 1996. </year>
Reference-contexts: One can expect that the complexity of the contours with a single function value in a mesh with n elements is roughly proportional to p n in the 2D case and to n 2=3 in the 3D case <ref> [15] </ref>. Therefore, it is worthwhile to have a search structure to find the mesh elements through which the contours pass. This will be more efficient than retrieving the contours of a single function value by inspecting all mesh elements. There are basically two approaches to find the contours more efficiently. <p> For example, octrees have been used this way for regular 3D meshes [25]. The second approach is to store the scalar range, also called span, of all the mesh elements in a search structure. Kd-trees <ref> [15] </ref>, segment trees [3], and interval trees [5, 23] have been suggested as the search structure, leading to a contour retrieval time of O ( p n + k) or O (log n + k), where n is the number of mesh elements and k is the size of the output.
Reference: [16] <author> J. Milnor. </author> <title> Morse Theory, </title> <booktitle> volume 51 of Annals of Mathematics Studies. </booktitle> <publisher> Princeton University Press, </publisher> <year> 1963. </year>
Reference-contexts: The changes that can occur have been documented well in texts on Morse theory or differential topology <ref> [11, 16] </ref>. They can be described by a structure called the contour tree, which we describe shortly. For example, consider 2D triangular meshes with linear interpolation and note how the contour tree relates to such meshes. For simplicity, we assume that all vertices have a distinct function value.
Reference: [17] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: The greedily chosen segments are stored as such rectangles in the data structure D. A query with a node of T asks if the point is contained in some rectangle; this corresponds to some chosen segment passing the node. D is an interval tree with associated structures <ref> [17] </ref>. The main tree is defined on the intervals of the first coordinate. Each node stores a vertical split line and two segment trees, one for query points to the left of the split line and one for query points to the right.
Reference: [18] <author> G. Reeb. </author> <title> Sur les points singuliers d'une forme de pfaff com-pletement integrable ou d'une fonction numerique. </title> <journal> Comptes Rendus Acad. Sciences Paris, </journal> <volume> 222 </volume> <pages> 847-849, </pages> <year> 1946. </year>
Reference-contexts: It has been used before in image processing and GIS research [9, 10, 14, 21, 22]. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory <ref> [18, 19, 20, 22] </ref>. It can be computed in O (n log n) time for piecewise linear functions over 2D [6]. This paper includes the following results. * We give a new, simple algorithm that constructs the contour tree. <p> In fact, it is easy to see that the contour tree is a special case of the more general Reeb graph in the (d + 1)-dimensional space obtained from the domain (the mesh) extended with the function image space <ref> [18, 19, 20, 22] </ref>. Furthermore, one can show that the contour tree is indeed a tree. For 2D meshes, all criticalities correspond to supernodes of degree 1, or degree 3 or higher. For higher-dimensional meshes there are also criticalities that correspond to a super-node of degree 2.
Reference: [19] <author> Y. </author> <title> Shinagawa and T.L. Kunii. Constructing a Reeb graph automatically from cross sections. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 11 </volume> <pages> 44-51, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: It has been used before in image processing and GIS research [9, 10, 14, 21, 22]. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory <ref> [18, 19, 20, 22] </ref>. It can be computed in O (n log n) time for piecewise linear functions over 2D [6]. This paper includes the following results. * We give a new, simple algorithm that constructs the contour tree. <p> In fact, it is easy to see that the contour tree is a special case of the more general Reeb graph in the (d + 1)-dimensional space obtained from the domain (the mesh) extended with the function image space <ref> [18, 19, 20, 22] </ref>. Furthermore, one can show that the contour tree is indeed a tree. For 2D meshes, all criticalities correspond to supernodes of degree 1, or degree 3 or higher. For higher-dimensional meshes there are also criticalities that correspond to a super-node of degree 2.
Reference: [20] <editor> Y. Shinagawa, T.L. Kunii, and Y.L. Kergosien. </editor> <title> Surface coding based on morse theory. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 11 </volume> <pages> 66-78, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: It has been used before in image processing and GIS research [9, 10, 14, 21, 22]. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory <ref> [18, 19, 20, 22] </ref>. It can be computed in O (n log n) time for piecewise linear functions over 2D [6]. This paper includes the following results. * We give a new, simple algorithm that constructs the contour tree. <p> In fact, it is easy to see that the contour tree is a special case of the more general Reeb graph in the (d + 1)-dimensional space obtained from the domain (the mesh) extended with the function image space <ref> [18, 19, 20, 22] </ref>. Furthermore, one can show that the contour tree is indeed a tree. For 2D meshes, all criticalities correspond to supernodes of degree 1, or degree 3 or higher. For higher-dimensional meshes there are also criticalities that correspond to a super-node of degree 2.
Reference: [21] <author> J.K. Sircar and J.A. Cerbrian. </author> <title> Application of image processing techniques to the automated labelling of raster digitized contours. </title> <booktitle> In Proc. 2nd Int. Symp. on Spatial Data Handling, </booktitle> <pages> pages 171-184, </pages> <year> 1986. </year>
Reference-contexts: To construct such a small size seed set, we use a variation of the contour tree, a tree that captures the contour topology of the function represented by the mesh. It has been used before in image processing and GIS research <ref> [9, 10, 14, 21, 22] </ref>. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory [18, 19, 20, 22]. It can be computed in O (n log n) time for piecewise linear functions over 2D [6].
Reference: [22] <author> S. Takahashi, T. Ikeda, Y. </author> <title> Shinagawa, T.L. </title> <editor> Kunii, and M. Ueda. </editor> <title> Algorithms for extracting correct critical points and constructing topological graphs from discrete geographical elevation data. </title> <type> Eurographics '95, </type> <institution> 14:C-181-C-192, </institution> <year> 1995. </year>
Reference-contexts: To construct such a small size seed set, we use a variation of the contour tree, a tree that captures the contour topology of the function represented by the mesh. It has been used before in image processing and GIS research <ref> [9, 10, 14, 21, 22] </ref>. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory [18, 19, 20, 22]. It can be computed in O (n log n) time for piecewise linear functions over 2D [6]. <p> It has been used before in image processing and GIS research [9, 10, 14, 21, 22]. Another name in use is the topographic change tree, and it is related to the Reeb graph used in Morse Theory <ref> [18, 19, 20, 22] </ref>. It can be computed in O (n log n) time for piecewise linear functions over 2D [6]. This paper includes the following results. * We give a new, simple algorithm that constructs the contour tree. <p> In fact, it is easy to see that the contour tree is a special case of the more general Reeb graph in the (d + 1)-dimensional space obtained from the domain (the mesh) extended with the function image space <ref> [18, 19, 20, 22] </ref>. Furthermore, one can show that the contour tree is indeed a tree. For 2D meshes, all criticalities correspond to supernodes of degree 1, or degree 3 or higher. For higher-dimensional meshes there are also criticalities that correspond to a super-node of degree 2.
Reference: [23] <author> M. van Kreveld. </author> <title> Efficient methods for isoline extraction from a TIN. </title> <journal> Int. J. of GIS, </journal> <volume> 10 </volume> <pages> 523-540, </pages> <year> 1996. </year>
Reference-contexts: For example, octrees have been used this way for regular 3D meshes [25]. The second approach is to store the scalar range, also called span, of all the mesh elements in a search structure. Kd-trees [15], segment trees [3], and interval trees <ref> [5, 23] </ref> have been suggested as the search structure, leading to a contour retrieval time of O ( p n + k) or O (log n + k), where n is the number of mesh elements and k is the size of the output. <p> Instead of storing the scalar range of all mesh elements, we need only store the scalar range of the seeds as intervals in the tree, and a pointer into the mesh. There are a few papers that take this approach <ref> [3, 13, 23] </ref>. The tracing algorithms to extract a contour have been developed before, and they require time linear in the size of the output [2, 12, 13]. The objective of this paper is to present new methods for seed set computation. <p> In d-space, the algorithm takes O (n 2 ) time. * The approximation algorithm has been implementated, and we supply test results of various kind. Previous methods to find small size seed sets didn't give any guarantee on their size <ref> [3, 13, 23] </ref>. 2 Preliminaries on scalar functions and the contour tree On a function F from d-space to the reals, the criticali-ties can be identified. These are the local maxima, the local minima, and the saddles (or passes). <p> This graph is a tree, which is easy to show <ref> [6, 23] </ref>, and it is called the contour tree. All nodes in the tree have degree 1 (corresponding to local extrema), degree 2 (normal vertices), or at least 3 (saddles). In other words, every contour of a saddle vertex splits the domain into at least three regions.
Reference: [24] <author> David F. Watson. Contouring: </author> <title> A Guide to the Analysis and Display of Spatial Data. </title> <publisher> Pergamon, </publisher> <year> 1992. </year>
Reference-contexts: More on interpolation of spatial data and references to the literature can be found in the book by Watson <ref> [24] </ref>. One can expect that the complexity of the contours with a single function value in a mesh with n elements is roughly proportional to p n in the 2D case and to n 2=3 in the 3D case [15].
Reference: [25] <author> J. Wilhelms and A. Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11 </volume> <pages> 201-227, </pages> <year> 1992. </year>
Reference-contexts: Firstly, one could store the 2D or 3D domain of the mesh in a hierarchical structure and associate the minimum and maximum occurring scalar values at the subdomains to prune the search. For example, octrees have been used this way for regular 3D meshes <ref> [25] </ref>. The second approach is to store the scalar range, also called span, of all the mesh elements in a search structure.
References-found: 25

