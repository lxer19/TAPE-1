URL: http://www-ccs.cs.umass.edu/~kamath/UM-CS-1995-050.ps
Refering-URL: http://www-ccs.cs.umass.edu/~kamath/publications.html
Root-URL: 
Title: Modeling, Correctness Systems Issues in Supporting Advanced Database Applications Using Workflow Management Systems  
Keyword: Advanced Transaction Models, Workflow Management, Cooperation, Office Automation, CAD/CAM, Software Engineering, Correctness, CSCW  
Note: Supported by the National Science Foundation under grant IRI 9314376.  
Abstract: Mohan Kamath and Krithi Ramamritham Computer Science Technical Report 95-50 Department of Computer Science University of Massachusetts Amherst MA 01003 fkamath,krithig@cs.umass.edu Abstract Advanced database applications like office automation, CAD/CAM and Software Engineering are characterized by the presence of long-duration, cooperative or multidatabase tasks. These applications can be data-centric or process-centric or both. Extended transaction models designed to address the requirements of these applications use a data-centric approach and they do not have adequate implementation support. On the other hand, workflow management as promoted by industry uses a process-centric approach. However, due to lack of concrete guidelines, they contain customized features for modeling and executing applications. While they certainly have many practical features that extended transaction models do not provide, they do not have adequate support to satisfy the modeling & correctness requirements of advanced applications. To date, no systematic studies have been undertaken to design proper support for these applications. This paper attempts to fill the lacuna by unifying the workflow and extended transaction model based approaches in an effort to meet the needs of these applications. By studying the requirements of different applications and the features provided by current workflow systems as well as advanced transaction models we identify the modeling features essential for supporting advanced database applications. We then provide an implementation architecture and discuss mechanisms for adequately supporting the identified modeling features. 
Abstract-found: 1
Intro-found: 1
Reference: [ANRS92] <author> M. Ansari, L. Ness, M. Rusinkiewicz, and A. Sheth. </author> <title> Using flexible transactions to support multi-system telecommunication applications. </title> <booktitle> In Proc. Int'l. Conf. on Very Large Data Bases, </booktitle> <pages> page 65, </pages> <address> Vancouver, BC, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: During travel planning [WR92], only certain combinations of plane-car-hotel reservations are permitted. To achieve this, a set of activities are grouped into an atomic-unit. The telecommunication applications for service order provisioning <ref> [ANRS92] </ref> mostly contain activities which are transactions that in turn can contain subtransactions with execution dependencies. The loan approval application considered in [BDS + 93] exemplifies inter-task data dependencies. Among other activities, a task contains a risk-evaluation and a risk-update activity. <p> Advanced transactions models have been used to support workflow applications <ref> [ANRS92] </ref>, where flexible transactions have been developed to integrate multiple independently developed applications. In summary, extended transactions provide features to handle multi-system, hierarchical and cooperation tasks.
Reference: [ASSR93] <author> P. C. Attie, M. P. Singh, A. Sheth, and M. Rusinkiewicz. </author> <title> Specifying and enforcing intertask dependencies. </title> <booktitle> In Proc. Intl' Conf. on Very Large Data Bases, </booktitle> <pages> page 134, </pages> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: By referring to the appropriate results and the task definition in the WDB, the WNM schedules the qualifying activities and notes this fact in the WDB. The STM handles the state and temporal-state dependencies. Scheduling strategies developed in <ref> [Kle91, ASSR93, G 93, GHKM94, MLTA94] </ref> can be used for this purpose. Task control can be passed between WNM and STM if for example there are value and state based dependencies in the same task.
Reference: [BDG + 94] <author> A. Biliris, S. Dar, N. Gehani, H.V. Jagadish, and K. Ramamritham. </author> <title> ASSET: A System for Supporting Extended Transactions. </title> <booktitle> In Proc. 1994 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 44-54, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: By exploiting the semantics of the applications and using relaxed correctness criteria, these advanced models provide special features to handle concurrency control and recovery. But only recently have initiatives been taken to implement these models <ref> [GHKM94, BDG + 94] </ref>. Adopting a process-centric approach, industry has been promoting workflow management as a technique for modeling, executing and monitoring such applications 1 . Aided by advances in client-server computing and distributed database techniques, early office information systems evolved into work-flow management systems. <p> Workflows that use features of advanced transaction models (structure and correctness requirements) are categorized as transactional workflows [SR93]. Advantages and disadvantages of using some of these models to develop advanced applications 8 are presented in [Moh94]. 4.2 Environments to Implement Advanced Models ASSET <ref> [BDG + 94] </ref> provides linguistic primitives to program extended transaction models. Other than the traditional primitives like begin, commit, abort and wait, it provides primitives based on the ACTA model such as delegate and permit that can be used to relax isolation requirements between tasks.
Reference: [BDS + 93] <author> Y. Breitbart, A. Deacon, H.J. Schek, A. Sheth, and Weikum. G. </author> <title> Merging application-centric and data-centric approaches to support transaction-oriented multi-system workflows. </title> <journal> ACM SIGMOD Record, </journal> <volume> 22(3), </volume> <year> 1993. </year>
Reference-contexts: To achieve this, a set of activities are grouped into an atomic-unit. The telecommunication applications for service order provisioning [ANRS92] mostly contain activities which are transactions that in turn can contain subtransactions with execution dependencies. The loan approval application considered in <ref> [BDS + 93] </ref> exemplifies inter-task data dependencies. Among other activities, a task contains a risk-evaluation and a risk-update activity. To maintain correctness of execution, while a pair of tasks are executing concurrently, the risk-evaluation activity of a second task can execute only after the risk-update activity of the first task. <p> Other approaches to implement advanced transaction models have also been suggested in [US92, ST94]. A preliminary approach to integrate a semantic transaction manager and workflow manager has been suggested in <ref> [BDS + 93] </ref> where the former treats an entire workflow as a single transaction whose semantic properties are to be exploited whereas the latter treats each task as an independent transaction and satisfies the dependencies between the transactions. <p> Applications using semantic primitives do not directly communicate with resource managers, instead the requests pass through the STM. Though preliminary ideas towards this approach have been presented in <ref> [BDS + 93] </ref>, there are several other important issues which we discuss in this section. To facilitate forward recovery and ensure consistency of task definition and process instance data (status and results of activities/tasks) at 12 all times, a workflow database (WDB) is necessary to store the meta-information.
Reference: [BK91] <author> N. S. Barghouti and G. E. Kaiser. </author> <title> Concurrency control in advanced database applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3):269, </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: following additional features (apart from those identified earlier) needed to support CAD/CAM & CASE tasks: * hierarchy of activities * controlling the interleaving of object accesses * facility to perform controlled backtracking * facility to propagate changes Additional discussion on correctness issues related to long-lived activities can be found in <ref> [MP90, KS90, BK91, KP92] </ref>. 3 Workflow Management Systems In this section we will enumerate some of the salient features provided by current workflow management systems for task modeling and managing task execution. This study will help us identify some of the limitation of these systems.
Reference: [BKK85] <author> F. Bancilhon, W. Kim, and H. Korth. </author> <title> A model of CAD transactions. </title> <booktitle> In Proc. Int'l. Conf. on Very Large Data Bases, </booktitle> <pages> page 25, </pages> <address> Stockholm, Sweden, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions <ref> [BKK85] </ref>, Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
Reference: [BST92] <author> Y. Breitbart, A. Silberschatz, and G. R. Thompson. </author> <title> An approach to recovery management in a multidatabase system. </title> <journal> The VLDB Journal, </journal> <volume> 1(1):1, </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: To handle the autonomy requirements of multidatabase systems, newer transaction models have been proposed like the polytransactions model. Though sagas was originally designed for long-duration transactions it can be used for multidatabase applications <ref> [BST92] </ref>. Hence we have established another class for these models called transaction models for multidatabases (Class A). Nested Sagas is a hybrid model that was developed by combining sagas and nested transactions.
Reference: [BSW88] <author> C Beeri, H Schek, and G. Weikum. </author> <booktitle> Multi-level transaction management theoretical art or practical need? volume 303 of Lecture Notes in CS, </booktitle> <pages> pages 135-154. </pages> <publisher> Springer, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions <ref> [BSW88] </ref>, Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90]
Reference: [CR90] <author> P. K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proc. ACM SIGMOD Conf., </booktitle> <pages> page 194, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year> <month> 19 </month>
Reference: [CR94] <author> Panos Chrysanthis and Krithi Ramamritham. </author> <title> Synthesis of Extended Transaction Models Using ACTA. </title> <journal> ACM Trans. on Database Sys., </journal> <volume> 19(3) </volume> <pages> 450-491, </pages> <year> 1994. </year>
Reference-contexts: Using basic primitives from models in the different classes, it is possible to build complex applications. A discussion on this is beyond the scope of the paper but details of achieving this using the ACTA framework can be found in <ref> [CR94] </ref>. Workflows that use features of advanced transaction models (structure and correctness requirements) are categorized as transactional workflows [SR93].
Reference: [CR95] <author> Pedregal-Martin C. and K. Ramamritham. ARIES/RH: </author> <title> Robust Support for Delegation by Rewriting History. </title> <type> Technical Report TR 95-51, </type> <institution> University of Massachusetts, Computer Science Dept., </institution> <year> 1995. </year>
Reference-contexts: Since efforts are currently underway <ref> [CR95] </ref> to provide ACTA/ASSET based primitives in industrial strength systems, we assume that the local resource managers can provide such primitives. 6.2 Supporting Coordinated Tasks * data flow: If explicit routing or implicit-read is specified, WNM retrieves the objects from the WDB and supplies it to the application agent which in
Reference: [DE89] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializability; a correctness criterion for global concurrency control in interbase. </title> <booktitle> In Proc. Intl' Conf. on Very Large Data Bases, </booktitle> <month> August </month> <year> 1989. </year>
Reference-contexts: Activities access resources from multiple sites and hence heterogeneity and interoperability are important issues. Some of the activities themselves contain a task, resulting in nested tasks. As shown in the figure, there are conditional executions based on the outcome of activities (termed value dependencies <ref> [DE89] </ref>). During travel planning [WR92], only certain combinations of plane-car-hotel reservations are permitted. To achieve this, a set of activities are grouped into an atomic-unit. The telecommunication applications for service order provisioning [ANRS92] mostly contain activities which are transactions that in turn can contain subtransactions with execution dependencies.
Reference: [DGMH + 93] <author> U. Dayal, H. Garcia-Molina, M. Hsu, B. Kao, and M.C. Shan. </author> <title> Third Generation TP Monitors: A Database Challenge. </title> <booktitle> In Proc. of 1993 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 393-398, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Thus our work also tries to address some of the concerns raised in <ref> [DGMH + 93] </ref>. In our discussion we 1 A procedural description of how and what is to be performed to achieve work in termed as a workflow or a task. The individual steps that comprise a workflow are termed activities.
Reference: [DHL90] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing Long-running Activities with Triggers and Transactions. </title> <booktitle> In Proceedings of ACM SIGMOD 1990 International Conference on Management of Data, </booktitle> <pages> pages 204-214, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Forward recovery and dynamic workflow modification 5 are also supported. Other models and approaches for coordinating activities to handle workflow type applications have been proposed in <ref> [DHL90, DHL91, GMGK + 90] </ref>. Turning our attention to commercial workflow systems like FlowMark 4 [FD94], InConcert 5 [MS93] and others [Hsu93, Hsu95], the following is a list of features provided by them.
Reference: [DHL91] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A Transaction Model for Long-running Activities. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Databases, </booktitle> <pages> pages 113-122, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Forward recovery and dynamic workflow modification 5 are also supported. Other models and approaches for coordinating activities to handle workflow type applications have been proposed in <ref> [DHL90, DHL91, GMGK + 90] </ref>. Turning our attention to commercial workflow systems like FlowMark 4 [FD94], InConcert 5 [MS93] and others [Hsu93, Hsu95], the following is a list of features provided by them.
Reference: [DHM + 95] <author> U. Dayal, M. Hsu, C. Mohan, M Rusinkiewicz, and F Schwenkreis. </author> <title> Workflow Automation, </title> <booktitle> 1995. Panel Session at 11th International Conference on Data Engineering, </booktitle> <address> Taiwan. </address>
Reference-contexts: Some of these limitations have also been stressed in [Geo95]. A recent panel on workflow automation <ref> [DHM + 95] </ref> concluded that modeling requirements for long-running processes are complex and additional efforts are needed to address them. 4 Advanced Transaction Management In this section we analyze some of the extended transaction models and execution environments.
Reference: [ELLR90] <author> A. K. Elmagarmid, Y. Leu, W. Litwin, and M. Rusinkiewicz. </author> <title> A multidatabase transaction model for interbase. </title> <booktitle> In Proc. Int'l. Conf. on Very Large Data Bases, </booktitle> <pages> page 507, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions <ref> [ELLR90, MRB + 92, ZNBB94] </ref>, Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
Reference: [Elm92] <editor> A. Elmagarmid, editor. </editor> <title> Transaction Models for Advanced Database Applications. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: These applications are characterized by the presence of long-duration, cooperative or multidatabase tasks. Two approaches have emerged to tackle the needs of such applications. Adopting a data-centric approach, several advanced transaction models have been proposed <ref> [Elm92] </ref> that relax the ACID (Atomicity, Modeling, Isolation and Durability) properties of traditional transactions. By exploiting the semantics of the applications and using relaxed correctness criteria, these advanced models provide special features to handle concurrency control and recovery.
Reference: [FaBK87] <author> J.C. Freytag and F. Cristian abd B. Kaehler. </author> <title> Masking system crashes in database application programs. </title> <booktitle> In Proc. of 13th Int'l. Conf. on Very Large Data Bases, </booktitle> <address> Brighton, England, </address> <year> 1987. </year>
Reference-contexts: Numerous issues must to be considered to restore the consistency of the data accessed by the application. Such a discussion is beyond the scope of this paper and techniques described in <ref> [FaBK87] </ref> can be used. Logical failures in applications should be handled by applying the appropriate compensating actions.
Reference: [FD94] <author> Leymann F. and Roller D. </author> <title> Business Process Management With FlowMark. </title> <booktitle> In Proceedings of IEEE CompCon, </booktitle> <pages> pages 230-234, </pages> <year> 1994. </year>
Reference-contexts: Forward recovery and dynamic workflow modification 5 are also supported. Other models and approaches for coordinating activities to handle workflow type applications have been proposed in [DHL90, DHL91, GMGK + 90]. Turning our attention to commercial workflow systems like FlowMark 4 <ref> [FD94] </ref>, InConcert 5 [MS93] and others [Hsu93, Hsu95], the following is a list of features provided by them.
Reference: [FZ88] <author> M. F. Fernandez and S. B. Zdonik. </author> <title> Transaction groups: A model for controlling co-operative transactions. </title> <booktitle> In Proc. Workshop on Persistent Object Sys.: Their Design, Implementation, and Use, </booktitle> <pages> page 128, </pages> <address> Newcastle, Australia, </address> <month> January </month> <year> 1988. </year>
Reference-contexts: transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions <ref> [FZ88, Ska89, NZ90] </ref>, Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
Reference: [G 93] <author> R. Gunthor. </author> <title> Extended transaction processing based on dependency rules. </title> <booktitle> In Proc. of the RIDE-IMS Workshop, </booktitle> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: By referring to the appropriate results and the task definition in the WDB, the WNM schedules the qualifying activities and notes this fact in the WDB. The STM handles the state and temporal-state dependencies. Scheduling strategies developed in <ref> [Kle91, ASSR93, G 93, GHKM94, MLTA94] </ref> can be used for this purpose. Task control can be passed between WNM and STM if for example there are value and state based dependencies in the same task.
Reference: [Geo95] <author> Georgakopolous D. and Hornick M. and Sheth A. </author> <title> An Overview of Workflow Management: From Process Modelling to Workflow Automation Infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 119-152, </pages> <year> 1995. </year>
Reference-contexts: This paper attempts to close the gap between the two approaches and provide guidelines essential for the development of flexible and better workflow management systems. Recently, the authors of <ref> [Geo95] </ref> have provided a broad overview of the state-of-the-art in workflow management. They have also discussed at a high-level how some of the limitations may be overcome by the use of extended transactions. <p> From our discussions thus far, it should be clear that workflow systems lack support for maintaining data consistency in the case of concurrent coordinated tasks and provide very minimal support for modeling and executing cooperative tasks. Some of these limitations have also been stressed in <ref> [Geo95] </ref>. A recent panel on workflow automation [DHM + 95] concluded that modeling requirements for long-running processes are complex and additional efforts are needed to address them. 4 Advanced Transaction Management In this section we analyze some of the extended transaction models and execution environments. <p> have object requests from applications to be trapped by the application agent, which can store a before-image and restore it if compensation is required. 6.5 Discussion A high level discussion on how advanced (customized) transaction models can be used to improve the capabilities of current workflow systems is provided in <ref> [Geo95] </ref>. Our work complements this by providing a fairly detailed description of an implementation architecture and mechanisms to support the essential modeling primitives we have identified. Specifically we focused on correctness and consistency problems in a variety of situations and provided schemes to handle them.
Reference: [GHKM94] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> page 462, </pages> <address> Houston, TX, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: By exploiting the semantics of the applications and using relaxed correctness criteria, these advanced models provide special features to handle concurrency control and recovery. But only recently have initiatives been taken to implement these models <ref> [GHKM94, BDG + 94] </ref>. Adopting a process-centric approach, industry has been promoting workflow management as a technique for modeling, executing and monitoring such applications 1 . Aided by advances in client-server computing and distributed database techniques, early office information systems evolved into work-flow management systems. <p> Other than the traditional primitives like begin, commit, abort and wait, it provides primitives based on the ACTA model such as delegate and permit that can be used to relax isolation requirements between tasks. In contrast, TSME <ref> [GHKM94] </ref> uses a toolkit based approach to specify & construct application specific extended transaction models. Transaction model designers provide new models and application programmers can write applications that use the models that are defined and supported. Other approaches to implement advanced transaction models have also been suggested in [US92, ST94]. <p> By referring to the appropriate results and the task definition in the WDB, the WNM schedules the qualifying activities and notes this fact in the WDB. The STM handles the state and temporal-state dependencies. Scheduling strategies developed in <ref> [Kle91, ASSR93, G 93, GHKM94, MLTA94] </ref> can be used for this purpose. Task control can be passed between WNM and STM if for example there are value and state based dependencies in the same task.
Reference: [GMGK + 90] <author> H. Garcia-Molina, G. Gawlick, J. Klein, K. Kleissner, and K. Salem. </author> <title> Coordinating Multi-Transaction Activities. </title> <type> Technical Report CS-TR-247-90, </type> <institution> Princeton University, </institution> <year> 1990. </year>
Reference-contexts: Forward recovery and dynamic workflow modification 5 are also supported. Other models and approaches for coordinating activities to handle workflow type applications have been proposed in <ref> [DHL90, DHL91, GMGK + 90] </ref>. Turning our attention to commercial workflow systems like FlowMark 4 [FD94], InConcert 5 [MS93] and others [Hsu93, Hsu95], the following is a list of features provided by them.
Reference: [GMGK + 91] <author> H. Garcia-Molina, G. Gawlick, J. Klein, K. Kleissner, and K. Salem. </author> <title> Modeling Long-Running Activities as Nested Sagas. </title> <journal> Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 14(1), </volume> <year> 1991. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas <ref> [GMGK + 91] </ref>, Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed
Reference: [GMS87] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proc. 1987 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas <ref> [GMS87] </ref>, Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models
Reference: [GR91] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year> <month> 20 </month>
Reference-contexts: The test specification check can be performed automatically or manually. * managing concurrent object accesses: Compatibility matrices, checkin/checkout schemes and its extensions [KLMP84, RRD90], version based schemes and notif y locks <ref> [GR91] </ref> are insufficient for cooperative tasks since large environments have flexible concurrency and ordering (controlled interleaving of object accesses) requirements to ensure global consistency of objects.
Reference: [GRS94] <author> D. Georgakopoulos, M. Rusinkiewicz, and A. Sheth. </author> <title> Using tickets to enforce the serializability of multidatabase transactions. </title> <journal> IEEE Trans. on Knowledge and Data Eng., </journal> <volume> 6(1):166, </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: Activities are scheduled for execution based on the order determined by the first set of dependent activities of tasks involved in the dependency. In the case of transactional activities, ticket-based strategies described in <ref> [GRS94] </ref> can be used. * correct execution of task: Here we will mainly discuss proper termination of tasks. Other correctness issues (like system failures) are discussed wherever appropriate in the context of the rest of the primitives.
Reference: [Hsu93] <author> M. Hsu. </author> <title> Special Issue on Workflow and Extended Transaction Systems. </title> <journal> Bulletin of the Technical Committee on Data Engineering, IEEE, </journal> <volume> 16(2), </volume> <year> 1993. </year>
Reference-contexts: Forward recovery and dynamic workflow modification 5 are also supported. Other models and approaches for coordinating activities to handle workflow type applications have been proposed in [DHL90, DHL91, GMGK + 90]. Turning our attention to commercial workflow systems like FlowMark 4 [FD94], InConcert 5 [MS93] and others <ref> [Hsu93, Hsu95] </ref>, the following is a list of features provided by them.
Reference: [Hsu95] <author> M. </author> <title> Hsu. </title> <journal> Special Issue on Workflow Systems. Bulletin of the Technical Committee on Data Engineering, IEEE, </journal> <volume> 18(1), </volume> <year> 1995. </year>
Reference-contexts: Forward recovery and dynamic workflow modification 5 are also supported. Other models and approaches for coordinating activities to handle workflow type applications have been proposed in [DHL90, DHL91, GMGK + 90]. Turning our attention to commercial workflow systems like FlowMark 4 [FD94], InConcert 5 [MS93] and others <ref> [Hsu93, Hsu95] </ref>, the following is a list of features provided by them.
Reference: [KAGM95] <author> M Kamath, G. Alonso, R. Gunthor, and C. Mohan. </author> <title> Providing High Availability in Workflow Management Systems. </title> <type> Technical report, </type> <institution> IBM Almaden Research Center, </institution> <year> 1995. </year>
Reference-contexts: Data belonging to completed tasks are deleted from this database and archived periodically. Reliability of this database is critical to the functioning of the system and these issue are discussed in <ref> [KAGM95] </ref>. To promote interoperability between workflow systems, our proposed architecture based on the WfMC reference model is shown in figure 5. Based on this architecture we discuss implementation support for all the features we discussed in the previous section.
Reference: [Kai90] <author> G. E. Kaiser. </author> <title> A flexible transaction model for software engineering. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> page 560, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions <ref> [Kai90] </ref> Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions. This hierarchical structuring concept has been used later in many models like multilevel transactions and open nested transactions for exploiting semantics of applications and improving concurrency.
Reference: [Kle91] <author> J. Klein. </author> <title> Advanced Rule Driven Transaction Management. </title> <booktitle> In Proceedings IEEE Spring Com-pcon, </booktitle> <year> 1991. </year>
Reference-contexts: By referring to the appropriate results and the task definition in the WDB, the WNM schedules the qualifying activities and notes this fact in the WDB. The STM handles the state and temporal-state dependencies. Scheduling strategies developed in <ref> [Kle91, ASSR93, G 93, GHKM94, MLTA94] </ref> can be used for this purpose. Task control can be passed between WNM and STM if for example there are value and state based dependencies in the same task.
Reference: [KLMP84] <author> W. Kim, R. Lorie, D. McNabb, and W. Plouffe. </author> <title> A transaction mechanism for engineering design databases. </title> <booktitle> In Proc. Int'l. Conf. on Very Large Data Bases, </booktitle> <pages> page 355, </pages> <address> Singapore, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: The test specification check can be performed automatically or manually. * managing concurrent object accesses: Compatibility matrices, checkin/checkout schemes and its extensions <ref> [KLMP84, RRD90] </ref>, version based schemes and notif y locks [GR91] are insufficient for cooperative tasks since large environments have flexible concurrency and ordering (controlled interleaving of object accesses) requirements to ensure global consistency of objects.
Reference: [KP92] <author> Ramamritham K. and Chrysanthis P.K. </author> <title> In Search of Acceptability Criteria: Database Consistency Requirements and Transaction Correctness Properties. In Distributed Object Management, </title> <editor> Ozsu, Dayal, Valduriez, Ed., </editor> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: following additional features (apart from those identified earlier) needed to support CAD/CAM & CASE tasks: * hierarchy of activities * controlling the interleaving of object accesses * facility to perform controlled backtracking * facility to propagate changes Additional discussion on correctness issues related to long-lived activities can be found in <ref> [MP90, KS90, BK91, KP92] </ref>. 3 Workflow Management Systems In this section we will enumerate some of the salient features provided by current workflow management systems for task modeling and managing task execution. This study will help us identify some of the limitation of these systems.
Reference: [KR95] <author> M. Kamath and K. Ramamritham. </author> <title> Modeling, Correctness & Systems Issues in Supporting Advanced Database Applications using Workflow Management Systems. </title> <type> Technical Report TR 95-50, </type> <institution> University of Massachusetts, Computer Science Dept., </institution> <year> 1995. </year>
Reference: [Kri95] <author> Krishnakumar N. and Sheth A. </author> <title> Managing Heterogeneous Multi-system Tasks to Support Enterprise-wide Operations. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 119-152, </pages> <year> 1995. </year>
Reference-contexts: Suspend, resume, activate, compensate and restart functions are provided. Concurrent access of global data from different tasks is controlled using invariants (predicates that check constraints). Forward recovery is provided via check-pointing of blocks. The METEOR project <ref> [Kri95] </ref> has built a system for specifying and executing multi-system workflows that may consist of both transactional and non-transactional tasks.
Reference: [KS90] <author> H. F. Korth and G. D. Speegle. </author> <title> Long duration transactions in software design projects. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> page 568, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: following additional features (apart from those identified earlier) needed to support CAD/CAM & CASE tasks: * hierarchy of activities * controlling the interleaving of object accesses * facility to perform controlled backtracking * facility to propagate changes Additional discussion on correctness issues related to long-lived activities can be found in <ref> [MP90, KS90, BK91, KP92] </ref>. 3 Workflow Management Systems In this section we will enumerate some of the salient features provided by current workflow management systems for task modeling and managing task execution. This study will help us identify some of the limitation of these systems.
Reference: [KSUW85] <author> P. Klahold, G. Schlageter, R. Unland, and W. Wilkes. </author> <title> A transaction model supporting complex applications in integrated information systems. </title> <booktitle> In Proc. ACM SIGMOD Conf., </booktitle> <pages> page 388, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions <ref> [KSUW85] </ref>, Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions. This hierarchical structuring concept has been used later in many models like multilevel transactions and open nested transactions for exploiting semantics of applications and improving concurrency.
Reference: [MAGK95] <author> C. Mohan, G. Alonso, R. Gunther, and M. Kamath. Exotica: </author> <title> A research perspective on workflow management systems. </title> <journal> Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 18(1), </volume> <month> March </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Wherever appropriate, we also discussed problems that arise in implementing these schemes. Other areas which current workflow systems fail to address like performance and availability have not been discussed here. These issues are discussed in <ref> [MAGK95] </ref>. 7 Conclusions Workflow management is emerging as a powerful tool to improve productivity of organizations. However in its current state, it still lacks certain features that are essential for their functionality; especially support for cooperative activities, ensuring consistency of data and correctness of execution.
Reference: [McC92] <author> S. McCready. </author> <title> There is more than one kind of Work-flow Software. </title> <type> ComputerWorld, </type> <month> November </month> <year> 1992. </year>
Reference-contexts: This study will help us identify some of the limitation of these systems. We will focus only on systems that handle production workflows <ref> [McC92] </ref> since they provide better modeling and execution support than the rest. 3.1 Modeling and Execution Support We first review prototype systems.
Reference: [Mem94] <author> WfMC Members. </author> <title> Workflow Management Reference Model, 1994. The Workflow Management Coalition, </title> <note> Accessible via: http://www.aiai.ed.ac.uk/WfMC/. </note>
Reference-contexts: client/agents to interact with entity responsible for performing activity fl system & logical failures 2 forward recovery 2 dynamic modification of task (exception handling) 3.2 Standardization & Interoperability In an attempt to standardize the features provided by workflow management systems, the workflow management coalition (WfMC) has developed a reference model <ref> [Mem94] </ref>. Its objective is to provide interoperability between different workflow products and hence the main focus is on (i) describing a common task definition model and (ii) describing components and interfaces for interoperability. The task modeling features resembles the list of features we just enumerated.
Reference: [MLTA94] <author> M.P.Singh, L.G.Meredith, C. Tomlison, </author> <title> and P.C. Attie. An Algebraic Approach for Workflow Scheduling. </title> <type> Technical Report Carnot-049-94, </type> <institution> MCC, </institution> <year> 1994. </year>
Reference-contexts: By referring to the appropriate results and the task definition in the WDB, the WNM schedules the qualifying activities and notes this fact in the WDB. The STM handles the state and temporal-state dependencies. Scheduling strategies developed in <ref> [Kle91, ASSR93, G 93, GHKM94, MLTA94] </ref> can be used for this purpose. Task control can be passed between WNM and STM if for example there are value and state based dependencies in the same task.
Reference: [Moh94] <author> C. Mohan. </author> <title> Advanced Transaction Models Survey and Critique, </title> <booktitle> 1994. Tutorial presented at ACM SIGMOD International Conference on Management of Data. </booktitle>
Reference-contexts: Workflows that use features of advanced transaction models (structure and correctness requirements) are categorized as transactional workflows [SR93]. Advantages and disadvantages of using some of these models to develop advanced applications 8 are presented in <ref> [Moh94] </ref>. 4.2 Environments to Implement Advanced Models ASSET [BDG + 94] provides linguistic primitives to program extended transaction models.
Reference: [Mos81] <author> J. E. B. Moss. </author> <title> Nested transactions: An approach to reliable distributed computing. </title> <type> Technical report, PhD Thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions <ref> [Mos81] </ref>, Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85],
Reference: [MP90] <author> B. Martin and C. Pedersen. </author> <title> Long-Lived Concurrent Activities. </title> <type> Technical Report HPL-90-178, </type> <institution> Hewlett-Packard Labs, </institution> <year> 1990. </year>
Reference-contexts: following additional features (apart from those identified earlier) needed to support CAD/CAM & CASE tasks: * hierarchy of activities * controlling the interleaving of object accesses * facility to perform controlled backtracking * facility to propagate changes Additional discussion on correctness issues related to long-lived activities can be found in <ref> [MP90, KS90, BK91, KP92] </ref>. 3 Workflow Management Systems In this section we will enumerate some of the salient features provided by current workflow management systems for task modeling and managing task execution. This study will help us identify some of the limitation of these systems.
Reference: [MRB + 92] <author> S. Mehrotra, R. Rastogi, Y. Breitbart, H. Korth, and A. Silberschatz. </author> <title> Ensuring transaction atom-icity in multidatabase systems. </title> <booktitle> In Proc. ACM SIGACT-SIGMOD-SIGART Symp. on Principles of Database Sys., </booktitle> <pages> page 164, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions <ref> [ELLR90, MRB + 92, ZNBB94] </ref>, Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
Reference: [MS93] <author> D.R. McCarthy and S.K. </author> <title> Sarin. </title> <journal> Workflow and Transactions in InConcert. Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year> <journal> IEEE Computer Society. </journal> <volume> 21 </volume>
Reference-contexts: Forward recovery and dynamic workflow modification 5 are also supported. Other models and approaches for coordinating activities to handle workflow type applications have been proposed in [DHL90, DHL91, GMGK + 90]. Turning our attention to commercial workflow systems like FlowMark 4 [FD94], InConcert 5 <ref> [MS93] </ref> and others [Hsu93, Hsu95], the following is a list of features provided by them.
Reference: [NZ90] <author> M. H. Nodine and S. B. Zdonik. </author> <title> Cooperative transaction hierarchies: A transaction model to support design applications. </title> <booktitle> In Proc. Int'l. Conf. on Very Large Data Bases, </booktitle> <pages> page 83, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions <ref> [FZ88, Ska89, NZ90] </ref>, Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions. <p> * correct execution of activity by defining a test-specification that is to be satisfied. * managing concurrent object accesses: Options are provided to use one of: fl protocols: using information about state of object access and role responsible for creating that state. (similar to automata that govern object accesses in <ref> [NZ90] </ref>) fl semantic primitives: like f orm dependency & permit, as described in ASSET. * selective backtracking on errors (handling logical failures). This is essential if protocols are used to control object accesses. (handling logical failures). <p> We briefly discuss how two schemes, one based on protocols (similar to automata based control as described in <ref> [NZ90] </ref>) and the other based on ACTA/ASSET primitives work. fl protocols: At task definition time, protocols specify rules that govern object accesses at run time. They allow task structures to be defined dynamically. Roles constantly read, modify and certify that the objects meet certain specifications.
Reference: [PKH88] <author> C. Pu, G. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proc. Int'l. Conf. on Very Large Data Bases, </booktitle> <pages> page 26, </pages> <address> Los Angeles, CA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions <ref> [PKH88] </ref> , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
Reference: [RRD90] <author> M.A. Ranft, S. Rehm, and K.R. Dittrich. </author> <title> How to Share Work on Shared Objects in Design Databases. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <year> 1990. </year>
Reference-contexts: The test specification check can be performed automatically or manually. * managing concurrent object accesses: Compatibility matrices, checkin/checkout schemes and its extensions <ref> [KLMP84, RRD90] </ref>, version based schemes and notif y locks [GR91] are insufficient for cooperative tasks since large environments have flexible concurrency and ordering (controlled interleaving of object accesses) requirements to ensure global consistency of objects.
Reference: [Sch93] <author> F. Schwenjreis. </author> <title> APRICOTS A Prototype Implementation of a ConTract System Management of Control Flow and the Communication System. </title> <booktitle> In Proc. of the 12th Symposium on Reliable Distributed Systems, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Princeton(NJ), </address> <year> 1993. </year>
Reference-contexts: This study will help us identify some of the limitation of these systems. We will focus only on systems that handle production workflows [McC92] since they provide better modeling and execution support than the rest. 3.1 Modeling and Execution Support We first review prototype systems. APRICOTS <ref> [Sch93] </ref> is a prototype implementation of ConTracts where a task/process (ConTract) is defined using sequential, parallel, branched or nested blocks (set of steps) that can be enclosed in a transaction. Suspend, resume, activate, compensate and restart functions are provided.
Reference: [Ska89] <author> A. H. Skarra. </author> <title> Concurrency control for cooperating transactions in an object-oriented database. </title> <booktitle> In Proc. ACM SIGPLAN Workshop on Object-Based Concurrent Programming, ACM SIGPLAN Notices, </booktitle> <pages> page 145, </pages> <month> April </month> <year> 1989. </year> <booktitle> Published as Proc. ACM SIGPLAN Workshop on Object-Based Concurrent Programming, ACM SIGPLAN Notices, </booktitle> <volume> volume 24, number 4. </volume>
Reference-contexts: transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions <ref> [FZ88, Ska89, NZ90] </ref>, Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
Reference: [SR93] <author> A. Sheth and M. Rusinkiewicz. </author> <title> On transactional workflows. </title> <journal> Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: A discussion on this is beyond the scope of the paper but details of achieving this using the ACTA framework can be found in [CR94]. Workflows that use features of advanced transaction models (structure and correctness requirements) are categorized as transactional workflows <ref> [SR93] </ref>. Advantages and disadvantages of using some of these models to develop advanced applications 8 are presented in [Moh94]. 4.2 Environments to Implement Advanced Models ASSET [BDG + 94] provides linguistic primitives to program extended transaction models.
Reference: [SRK92] <author> A. Sheth, M. Rusinkiewicz, and G. Karabatis. </author> <title> Using Polytransactions to Manage Interdependent Data. </title> <editor> In Ahmed K. Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <booktitle> chapter 14, </booktitle> <pages> pages 555-582. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions <ref> [SRK92] </ref> * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
Reference: [ST94] <author> B. Salzberg and D. Tombroff. </author> <title> A Programming Tool to Support Long-Running Activities. </title> <type> Technical Report NU-CCS-94-10, </type> <institution> College of Computer Science, Northeastern University, </institution> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: Transaction model designers provide new models and application programmers can write applications that use the models that are defined and supported. Other approaches to implement advanced transaction models have also been suggested in <ref> [US92, ST94] </ref>.
Reference: [US92] <author> R. Unland and G. </author> <title> Schlageter. A Transaction Manager Development Facility for Non Standard Database Systems. </title> <editor> In Ahmed K. Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <booktitle> chapter 11, </booktitle> <pages> pages 399-466. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: Transaction model designers provide new models and application programmers can write applications that use the models that are defined and supported. Other approaches to implement advanced transaction models have also been suggested in <ref> [US92, ST94] </ref>.
Reference: [WR92] <author> H. Waechter and A. Reuter. </author> <title> The ConTract Model. </title> <editor> In Ahmed K. Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <booktitle> chapter 7, </booktitle> <pages> pages 219-263. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: Activities access resources from multiple sites and hence heterogeneity and interoperability are important issues. Some of the activities themselves contain a task, resulting in nested tasks. As shown in the figure, there are conditional executions based on the outcome of activities (termed value dependencies [DE89]). During travel planning <ref> [WR92] </ref>, only certain combinations of plane-car-hotel reservations are permitted. To achieve this, a set of activities are grouped into an atomic-unit. The telecommunication applications for service order provisioning [ANRS92] mostly contain activities which are transactions that in turn can contain subtransactions with execution dependencies.
Reference: [WS92] <author> G. Weikum and Hans-J. Schek. </author> <title> Concepts and Applications of Multilevel and Open Nested Transactions. </title> <editor> In Ahmed K. Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <booktitle> chapter 13, </booktitle> <pages> pages 515-554. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions <ref> [WS92] </ref> * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions [ELLR90, MRB + 92, ZNBB94], Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one
Reference: [X/O92] <author> X/Open, </author> <title> editor. Distributed Transaction Processing: The XA Specification. </title> <publisher> X/Open Company Limited, </publisher> <address> UK, </address> <year> 1992. </year>
Reference-contexts: The first problem is that not all local resource managers provide the two-phase commit interface and even if they do, most do not yet conform with the XA interface standard proposed by X/Open <ref> [X/O92] </ref>. The second problem exists because of legacy applications. Since transactions are bundled somewhere in the legacy code, it is not clear how many transactions each of these applications contain and what is the status of each when a failure occurs.
Reference: [ZNBB94] <author> A. Zhang, M. Nodine, B. Bhargava, and O. Bukhres. </author> <title> Ensuring Relaxed Atomicity for Flexible Transactions in Multidatabase Systems. </title> <booktitle> In Proc. 1994 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 67-78, </pages> <year> 1994. </year> <month> 22 </month>
Reference-contexts: Before we get into the details of our approach to classify these models, we list some of the advanced transaction models: * Extended Models: Nested Transactions [Mos81], Multi-Level Transactions [BSW88], Open nested transactions [WS92] * Relaxed Models: Sagas [GMS87], Nested Sagas [GMGK + 91], Flexible Transactions <ref> [ELLR90, MRB + 92, ZNBB94] </ref>, Split-Join Transactions [PKH88] , Poly Transactions [SRK92] * Cooperative Models: Cooperative CAD Transactions [BKK85], Transaction Groups & extensions [FZ88, Ska89, NZ90], Group Oriented CAD Transactions [KSUW85], Participant Transactions [Kai90] Nested transactions was one of the first advanced models and it proposed hierarchical structuring of transactions.
References-found: 62

