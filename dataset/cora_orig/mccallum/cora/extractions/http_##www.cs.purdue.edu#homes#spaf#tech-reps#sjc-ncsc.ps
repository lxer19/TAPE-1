URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/sjc-ncsc.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: sjc@cs.kent.edu spaf@cs.purdue.edu  
Title: SUPPORT FOR SECURITY IN DISTRIBUTED SYSTEMS USING MESSIAHS a set of mechanisms that ties together
Author: Steve J. Chapin Eugene H. Spafford 
Keyword: heterogeneous distributed systems. Keywords: distributed systems, scheduling, security, autonomy, availabil ity, visibility  
Note: messiahs is  for  
Address: OH 44242-0001 West Lafayette, IN 47907-1398  
Affiliation: Department of Mathematics COAST Laboratory and Computer Science Department of Computer Sciences Kent State University Purdue University Kent,  
Abstract: The messiahs project is investigating the construction of a set of mechanisms to support task placement in autonomous, heterogeneous, distributed systems. In this paper we explore aspects of the messiahs system that support security in distributed systems. In particular, we will concentrate on aspects of messiahs that defeat denial of service attacks, provide firewalls, protect private system description information, and support matching of tasks and systems based on security ratings. Development of these features will allow tasks to be scheduled in a heterogeneous distributed system, while protecting data and system integrity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. A. Blake. </author> <title> Assignment of Independent Tasks to Minimize Completion Time. </title> <journal> Software-Practice and Experience, </journal> <volume> 22(9) </volume> <pages> 723-734, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Second, many researchers have concentrated on scheduling and load-balancing algorithms while assuming the existence of the mechanisms necessary to support them (see, for example, Sarkar and Hennessy [13], Lo [12], or Blake <ref> [1] </ref>). They have either designed ad-hoc mechanisms to support particular algorithms, or limited their research to theoretical analysis of the scheduling algorithms. Third, users of computer systems may require resources that are not available locally, such as specialized processors or remote databases.
Reference: [2] <author> A. Bricker, M. Litzkow, and M. Livny. </author> <title> Condor Technical Summary. </title> <type> Technical Re--port 1069, </type> <institution> Department of Computer Science, University of Wisconsin-Madison, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: In particular, a local system can run in a manner counterproductive to a global optimum. In the usual case, scheduling modules will cooperate, but administrators must be free to set their local policies or they are unlikely to participate in the distributed system <ref> [2, 8] </ref>. The next four sections examine the behavior of the module and show how the autonomy support within messiahs facilitates security in distributed systems. 3 Denial of Service Attacks Communication, administrative, and execution autonomy form a basis to thwart denial of service attacks.
Reference: [3] <author> S. Chapin and E. Spafford. </author> <title> Implementing Scheduling Algorithms Using MESSIAHS. Scientific Programming, 1994. to appear in a special issue on Operating System Support for Massively Parallel Computer Architectures. </title>
Reference-contexts: The first, called the MESSIAHS toolkit, is a library of function calls that can be used with a high-level language such as C <ref> [3] </ref>. The second, the MESSIAHS Interface Language, or MIL, is an interpreted language that is especially tailored to the task of scheduling [5]. Either of these interface layers can be used to implement scheduling filters.
Reference: [4] <author> S. J. Chapin. </author> <title> Scheduling Support Mechanisms for Autonomous, Heterogeneous, Distributed Systems. </title> <type> Ph.D. Dissertation, </type> <institution> Purdue University, </institution> <year> 1993. </year>
Reference-contexts: Such large-scale distributed systems can achieve performance surpassing that of the largest parallel supercomputers [11], and increase utilization of underutilized computing power [8]. As part of this work, we have developed a set of mechanisms and a prototype implementa-tion called messiahs: Mechanisms Effecting Scheduling Support In Autonomous, Heterogeneous Systems <ref> [5, 4] </ref>. Our research is motivated by three factors. First, decentralization of computing systems has introduced administrative domains as a barrier to distributed computing. To overcome this, some method must be found to unite systems from incompatible administrative domains while respecting the autonomy of the individual systems. <p> Based on the scheduling policy, the module chooses one of the systems and attempts to schedule the task there. messiahs attempts to sacrifice the least autonomy for participating systems. There are four types of autonomy in distributed systems, as defined in [9, 6, 7], and refined in <ref> [4] </ref>: execution autonomy, communication autonomy, design autonomy, and administrative autonomy. Execution autonomy means that each system decides whether it will honor a request to execute a task; each system also has the right to revoke a task that it had previously accepted.
Reference: [5] <author> S. J. Chapin and E. H. Spafford. </author> <title> Constructing Distributed Schedulers with the MESSIAHS Interface Language. </title> <booktitle> In 27th Hawaii International Conference on Systems Sciences, </booktitle> <volume> volume 2, </volume> <pages> pages 425-434, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Such large-scale distributed systems can achieve performance surpassing that of the largest parallel supercomputers [11], and increase utilization of underutilized computing power [8]. As part of this work, we have developed a set of mechanisms and a prototype implementa-tion called messiahs: Mechanisms Effecting Scheduling Support In Autonomous, Heterogeneous Systems <ref> [5, 4] </ref>. Our research is motivated by three factors. First, decentralization of computing systems has introduced administrative domains as a barrier to distributed computing. To overcome this, some method must be found to unite systems from incompatible administrative domains while respecting the autonomy of the individual systems. <p> The first, called the MESSIAHS toolkit, is a library of function calls that can be used with a high-level language such as C [3]. The second, the MESSIAHS Interface Language, or MIL, is an interpreted language that is especially tailored to the task of scheduling <ref> [5] </ref>. Either of these interface layers can be used to implement scheduling filters. A filter takes two description vectors and returns a numerical result indicating how well they match. A task filter compares an incoming task description vector to a system description vector and returns an integer.
Reference: [6] <author> W. Du, A. K. Elmagarmid, Y. Leu, and S. D. Ostermann. </author> <title> Effects of Local Autonomy on Global Concurrency Control in Heterogeneous Distributed Database Systems. </title> <booktitle> In Second International Conference on Data and Knowledge Systems for Manufacturing and Engineering, </booktitle> <pages> pages 113-120. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: Based on the scheduling policy, the module chooses one of the systems and attempts to schedule the task there. messiahs attempts to sacrifice the least autonomy for participating systems. There are four types of autonomy in distributed systems, as defined in <ref> [9, 6, 7] </ref>, and refined in [4]: execution autonomy, communication autonomy, design autonomy, and administrative autonomy. Execution autonomy means that each system decides whether it will honor a request to execute a task; each system also has the right to revoke a task that it had previously accepted.
Reference: [7] <author> F. Eliassen and J. Veijalainen. </author> <title> Language Support for Multidatabase Transactions in a Cooperative, Autonomous Environment. </title> <booktitle> In TENCON '87, </booktitle> <pages> pages 277-281, </pages> <address> Seoul, </address> <year> 1987. </year> <booktitle> IEEE Regional Conference. </booktitle>
Reference-contexts: Based on the scheduling policy, the module chooses one of the systems and attempts to schedule the task there. messiahs attempts to sacrifice the least autonomy for participating systems. There are four types of autonomy in distributed systems, as defined in <ref> [9, 6, 7] </ref>, and refined in [4]: execution autonomy, communication autonomy, design autonomy, and administrative autonomy. Execution autonomy means that each system decides whether it will honor a request to execute a task; each system also has the right to revoke a task that it had previously accepted.
Reference: [8] <author> C. A. Gantz, R. D. Silverman, and S. J. Stuart. </author> <title> A Distributed Batching System for Parallel Processing. </title> <journal> Software-Practice and Experience, </journal> <volume> 19, </volume> <year> 1989. </year>
Reference-contexts: Our goal is to develop mechanisms that allow scheduling algorithms to be implemented for large-scale distributed systems using heterogeneous hardware and software, across administrative boundaries. Such large-scale distributed systems can achieve performance surpassing that of the largest parallel supercomputers [11], and increase utilization of underutilized computing power <ref> [8] </ref>. As part of this work, we have developed a set of mechanisms and a prototype implementa-tion called messiahs: Mechanisms Effecting Scheduling Support In Autonomous, Heterogeneous Systems [5, 4]. Our research is motivated by three factors. <p> In particular, a local system can run in a manner counterproductive to a global optimum. In the usual case, scheduling modules will cooperate, but administrators must be free to set their local policies or they are unlikely to participate in the distributed system <ref> [2, 8] </ref>. The next four sections examine the behavior of the module and show how the autonomy support within messiahs facilitates security in distributed systems. 3 Denial of Service Attacks Communication, administrative, and execution autonomy form a basis to thwart denial of service attacks.
Reference: [9] <author> H. Garcia-Molina and B. Kogan. </author> <title> Node Autonomy in Distributed Systems. </title> <booktitle> In ACM International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 158-166, </pages> <address> Austin, TX, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: Based on the scheduling policy, the module chooses one of the systems and attempts to schedule the task there. messiahs attempts to sacrifice the least autonomy for participating systems. There are four types of autonomy in distributed systems, as defined in <ref> [9, 6, 7] </ref>, and refined in [4]: execution autonomy, communication autonomy, design autonomy, and administrative autonomy. Execution autonomy means that each system decides whether it will honor a request to execute a task; each system also has the right to revoke a task that it had previously accepted.
Reference: [10] <author> S. Garfinkel and E. Spafford. </author> <title> Practical UNIX Security. </title> <publisher> O'Reilly and Associates, </publisher> <year> 1991. </year> <note> ISBN 0-937175-72-2. </note>
Reference-contexts: This is commonly done for electronic mail systems, and is usually implemented through the use of a firewall <ref> [10] </ref>. All attempts to access a resource pass through the firewall, and the outside agent accessing the resource cannot tell the exact location of the resource. For example, in figure 1, the OSR node can act as a firewall to hide the presence of Vetch, Ogion, and Jasper.
Reference: [11] <author> A. H. Karp, K. Miura, and H. Simon. </author> <title> 1992 Gordon Bell Prize Winners. </title> <journal> IEEE Computer, </journal> <volume> 26(1) </volume> <pages> 77-82, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Our goal is to develop mechanisms that allow scheduling algorithms to be implemented for large-scale distributed systems using heterogeneous hardware and software, across administrative boundaries. Such large-scale distributed systems can achieve performance surpassing that of the largest parallel supercomputers <ref> [11] </ref>, and increase utilization of underutilized computing power [8]. As part of this work, we have developed a set of mechanisms and a prototype implementa-tion called messiahs: Mechanisms Effecting Scheduling Support In Autonomous, Heterogeneous Systems [5, 4]. Our research is motivated by three factors.
Reference: [12] <author> V. M. Lo. </author> <title> Task Assignment to Minimize Completion Time. </title> <booktitle> In Distributed Computing Systems, </booktitle> <pages> pages 329-336. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: Second, many researchers have concentrated on scheduling and load-balancing algorithms while assuming the existence of the mechanisms necessary to support them (see, for example, Sarkar and Hennessy [13], Lo <ref> [12] </ref>, or Blake [1]). They have either designed ad-hoc mechanisms to support particular algorithms, or limited their research to theoretical analysis of the scheduling algorithms. Third, users of computer systems may require resources that are not available locally, such as specialized processors or remote databases.
Reference: [13] <author> V. Sarkar and J. Hennessy. </author> <title> Partitioning Parallel Programs for Macro-Dataflow. </title> <booktitle> In ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pages 202-211, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Second, many researchers have concentrated on scheduling and load-balancing algorithms while assuming the existence of the mechanisms necessary to support them (see, for example, Sarkar and Hennessy <ref> [13] </ref>, Lo [12], or Blake [1]). They have either designed ad-hoc mechanisms to support particular algorithms, or limited their research to theoretical analysis of the scheduling algorithms. Third, users of computer systems may require resources that are not available locally, such as specialized processors or remote databases.
Reference: [14] <author> A J. G. Steiner, B. C. Neuman, and J. I. Schiller. </author> <title> Kerberos: An Authentication Service for Open Network Systems. </title> <booktitle> In Usenix Conference Proceedings, </booktitle> <pages> pages 191-202, </pages> <address> Dallas, TX, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: In the absence of a distributed secure network, we are left to devise software solutions to these problems. We can use well-known authentication techniques such as those found in Kerboros <ref> [14] </ref> to ensure the validity of labels. A possible solution to the second problem is to encrypt private data within the extended portion of the task description vector so that only trusted hosts can view the secret data.
References-found: 14

