URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP140-F95/L1995-11-30.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP140-F1995/lectures.html
Root-URL: http://www.cs.unc.edu
Email: 2a  
Title: COMP 140: Introduction to Translator Systems Miscellaneous Topics 1 Issues in floating-point computations the perils
Author: Siddhartha Chatterjee r p a r p 
Web: illustrate  
Note: Here is a collection of examples of numerical computations taken from Goldberg's paper [4] that  r 1 b b 2 4ac r 2 b b 2 4ac Now, if b 2 AE 4ac and b &gt; 0, use the second formula for r 1 and the first for r 2 If b &lt; 0, use the first formula for r 1 and the second for r 2 2  fi 10 and p 3, suppose that a 9:0, and b c 4:53. Then the correct value  
Date: 30 November 1995  
Abstract: Today we discuss the implications of floating-point numbers on numerical algorithms, programming languages, and compilers. When b 2 AE 4ac, then computing b 2 4ac does not involve cancellation and p b 2 4ac jbj. However, we are now adding or subtracting two quantities very close in magnitude, and this could lead to catastrophic cancellation. To avoid this, we can rewrite r 1 and r 2 as follows: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference: [2] <author> W. D. Clinger. </author> <title> How to read floating-point numbers accurately. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(6) </volume> <pages> 92-101, </pages> <month> June </month> <year> 1990. </year> <booktitle> Proceedings of the ACM SIGPLAN'90 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: A language definition must honor parentheses in order to be useful for FP calculations. Input and output of FP numbers is a complicated thing to get right. Clinger <ref> [2] </ref> discusses the issues in reading FP numbers; Steele and White [5] discuss the issues in writing FP numbers. 2.
Reference: [3] <author> C. Farnum. </author> <title> Compiler support for floating-point computation. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 18(7) </volume> <pages> 701-709, </pages> <month> July </month> <year> 1988. </year> <note> Copyright c fl Siddhartha Chatterjee 1995 Page 9 </note>
Reference-contexts: Without the use of denorms, it gives 0.4, which is an error of 100 ulps. 2 1.2 Programming languages and compilers The following discussion is based on Farnum <ref> [3] </ref>. As I said in the previous class, IEEE 754 is a good standard, but whether an end user can use its full power depends on how accessible the standard is from the programming language, and whether the operating system supports the exception handling interface defined in the standard.
Reference: [4] <author> D. Goldberg. </author> <title> What every computer scientist should know about floating-point arithmetic. </title> <journal> ACM Comput. Surv., </journal> <volume> 23(1) </volume> <pages> 5-48, </pages> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: 1 Issues in floating-point computations Today we discuss the implications of floating-point numbers on numerical algorithms, programming languages, and compilers. 1.1 Numerical algorithms Here is a collection of examples of numerical computations taken from Goldberg's paper <ref> [4] </ref> that illustrate the perils and pitfalls of floating-point arithmetic. There are no general lessons here beyond the obvious one that floating-point computations must be handled with great care.
Reference: [5] <author> G. L. Steele, Jr. and J. L. White. </author> <title> How to print floating-point numbers accurately. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(6) </volume> <pages> 112-126, </pages> <month> June </month> <year> 1990. </year> <booktitle> Proceedings of the ACM SIGPLAN'90 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: A language definition must honor parentheses in order to be useful for FP calculations. Input and output of FP numbers is a complicated thing to get right. Clinger [2] discusses the issues in reading FP numbers; Steele and White <ref> [5] </ref> discuss the issues in writing FP numbers. 2.
Reference: [6] <author> K. Thompson. </author> <title> Reflections on trusting trust. </title> <booktitle> In ACM Turing Award Lectures: The First Twenty Years 1966-1985, </booktitle> <pages> pages 171-177. </pages> <publisher> ACM Press, </publisher> <year> 1987. </year> <note> Reprint of 1983 Turing Award Lecture. </note>
Reference-contexts: Now let's take a more nuts-and-bolts view of what's going on, and see exactly how this works. This example is based on Ken Thompson's Turing Award Lecture <ref> [6] </ref>. Let's say we have a native compiler for a subset of C that recognizes only some of the escape sequences for nonprinting characters, and we want to extend our language definition to have the escape sequence "v stand for vertical tab.
References-found: 6

