URL: http://www.cs.utexas.edu/users/plaxton/ps/1994/spdp.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Title: An Optimal Hypercube Algorithm for the All Nearest Smaller Values Problem  
Author: Dina Kravets C. Greg Plaxton 
Abstract: Given a sequence of n elements, the All Nearest Smaller Values (ANSV) problem is to find, for each element in the sequence, the nearest element to the left (right) that is smaller, or to report that no such element exists. Berkman, Schieber, and Vishkin [4] give an ANSV algorithm that runs in O(lg n) time on an (n= lg n)-processor CREW PRAM. In this paper, we present an O(lg n)-time n-processor normal hypercube algorithm for the ANSV problem. Furthermore, we prove that any normal hypercube algorithm requires (n) processors to solve the ANSV problem in O(lg n) time. We use our ANSV algorithm to give the first O(lg n)-time n-processor normal hypercube algorithms for triangulating a monotone polygon and for constructing a Cartesian tree. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, B. Chazelle, L. Guibas, C. O'Dunlaing, and C. K. Yap. </author> <title> Parallel computational geometry. </title> <journal> Algorithmica, </journal> <volume> 3(3) </volume> <pages> 293-327, </pages> <year> 1988. </year>
Reference-contexts: A monotone polygon is one-sided if either its upper or lower chain consists of a single edge, called the distinguished edge. Our algorithm for triangulating a monotone polygon follows the approach of Berkman et al. [4], Ag-garwal et al. <ref> [1] </ref>, and Goodrich [7]. The algorithm consists of two stages. In the first stage, we decompose the monotone polygon into one-sided monotone polygons. In the second stage, we triangulate the one-sided monotone polygons. We assume a d-dimensional hypercube containing 2 d = n processors, d 1.
Reference: [2] <author> A. Aggarwal, D. Kravets, J. K. Park, and S. Sen. </author> <title> Parallel searching in generalized Monge arrays with applications. </title> <booktitle> In Proceedings of the 2nd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 259-268, </pages> <year> 1990. </year>
Reference-contexts: Email: plaxton@cs.utexas.edu. Supported by the Texas Advanced Research Program under Grant No. 003658-461. parallel algorithms. In particular, a subroutine for the ANSV problem is used by Aggarwal et al. <ref> [2] </ref> in parallel searching of staircase-Monge arrays, and by Berkman et al. [4] in finding a triangulation of a monotone polygon, preprocessing for answering range minimum queries in constant time, reconstructing a binary tree from its inorder and either preorder or postorder labelings, and matching parenthesis.
Reference: [3] <author> M. J. Atallah and D. Z. Chen. </author> <title> Optimal parallel hypercube algorithms for polygon problems. </title> <booktitle> In Proceedings of the 5th IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 208-215, </pages> <year> 1993. </year>
Reference-contexts: A recent result of Atallah and Chen <ref> [3] </ref> gives an optimal hypercube algorithm for determining the line with respect to which a given polygon is monotone, if such a line exists.
Reference: [4] <author> O. Berkman, B. Schieber, and U. Vishkin. </author> <title> Optimal doubly logarithmic parallel algorithms based on finding nearest smaller values. </title> <journal> Journal of Algorithms, </journal> <volume> 14(3) </volume> <pages> 344-370, </pages> <year> 1993. </year>
Reference-contexts: Email: plaxton@cs.utexas.edu. Supported by the Texas Advanced Research Program under Grant No. 003658-461. parallel algorithms. In particular, a subroutine for the ANSV problem is used by Aggarwal et al. [2] in parallel searching of staircase-Monge arrays, and by Berkman et al. <ref> [4] </ref> in finding a triangulation of a monotone polygon, preprocessing for answering range minimum queries in constant time, reconstructing a binary tree from its inorder and either preorder or postorder labelings, and matching parenthesis. <p> Furthermore, two fundamental problems can be reduced to ANSV: (i) merging two sorted lists [5, 8], and (ii) finding the maximum of n elements [11]. The ANSV problem is easy to solve sequentially in O (n) time using a stack. Berkman, Schieber, and Vishkin <ref> [4] </ref> give the following PRAM algorithms for the ANSV problem: (i) an O (lg n)-time (n= lg n)- processor CREW PRAM algorithm, and (ii) an O (lg lg n)-time (n= lg lg n)-processor CRCW PRAM algorithm. Chen [6] gives an EREW PRAM algorithm that matches the CREW PRAM bounds of [4]. <p> <ref> [4] </ref> give the following PRAM algorithms for the ANSV problem: (i) an O (lg n)-time (n= lg n)- processor CREW PRAM algorithm, and (ii) an O (lg lg n)-time (n= lg lg n)-processor CRCW PRAM algorithm. Chen [6] gives an EREW PRAM algorithm that matches the CREW PRAM bounds of [4]. In this paper, we extend the results of Berkman et al. [4] to develop the first O (lg n)-time hypercube algorithm for the ANSV problem. <p> Chen [6] gives an EREW PRAM algorithm that matches the CREW PRAM bounds of <ref> [4] </ref>. In this paper, we extend the results of Berkman et al. [4] to develop the first O (lg n)-time hypercube algorithm for the ANSV problem. <p> The triangulation of a simple polygon has numerous applications in computational geometry [13]. The triangulation of a monotone polygon is a subroutine used in all of the known parallel algorithms for triangulating simple polygons. Berkman et al. <ref> [4] </ref> give CREW and CRCW PRAM algorithms for triangulating a monotone polygon. We give the first O (lg n)- time n-processor normal hypercube algorithm for this problem. * Building a Cartesian tree. <p> The Cartesian tree is used in preprocessing algorithms for answering range minimum queries. Berkman et al. <ref> [4] </ref> show how to find the Cartesian tree in O (lg n) time using an (n= lg n)-processor CREW PRAM. We obtain the first O (lg n)-time n-processor normal hypercube algorithm for this problem. The remainder of this paper is organized as follows. Section 2 defines the model of computation. <p> Perform the following operations within each subcube C ff;fi . First, merge the sorted sequences S ff;fi and T ff;fi . Then, use prefix operations to de termine the right match of each element in S ff;fi . (As proven in <ref> [4] </ref>, the right match of every element of S ff;fi is an element of T ff;fi .) Use additional prefix operations to count, for each element y of T ff;fi , the number of elements x in S ff;fi such that y is the right match of x. (a) At each <p> The algorithm presented is conceptually simpler and more suitable for hypercube implementation than the algorithm of <ref> [4] </ref>. Much of the simplification that we achieve may be attributed to our use of Lemma 3.1, which is stated at the end of this section. We assume a d-dimensional hypercube containing 2 d = n processors, d 1. <p> A monotone polygon is one-sided if either its upper or lower chain consists of a single edge, called the distinguished edge. Our algorithm for triangulating a monotone polygon follows the approach of Berkman et al. <ref> [4] </ref>, Ag-garwal et al. [1], and Goodrich [7]. The algorithm consists of two stages. In the first stage, we decompose the monotone polygon into one-sided monotone polygons. In the second stage, we triangulate the one-sided monotone polygons. We assume a d-dimensional hypercube containing 2 d = n processors, d 1. <p> Implementation: Algorithm ANSV run on variable y and segmented according to the variable i 0 . Running time: O (d). Algorithm Triangulate runs in O (lg n) time on an n-processor hypercube. The correctness of the algorithm follows from the work of Berkman et al. <ref> [4] </ref>. Furthermore, Berkman et al. [4] show how to reduce the problem of merging two sorted lists of length n to the problem of triangulating a monotone polygon of size n. <p> Running time: O (d). Algorithm Triangulate runs in O (lg n) time on an n-processor hypercube. The correctness of the algorithm follows from the work of Berkman et al. <ref> [4] </ref>. Furthermore, Berkman et al. [4] show how to reduce the problem of merging two sorted lists of length n to the problem of triangulating a monotone polygon of size n. <p> Thus, our normal hypercube algorithm is processor-optimal as well as time-optimal. 6 Building a Cartesian Tree Let the Cartesian tree of a sequence W = hw i : 0 i &lt; ni be defined as in Section 1. Berkman et al. <ref> [4] </ref> prove that the parent of any element w i in the Cartesian tree is the larger of w i 's left and right matches. Thus, a straightforward application of the ANSV algorithm yields an O (lg n)-time n-processor normal hypercube algorithm for constructing a Cartesian tree.
Reference: [5] <author> A. Borodin and J. E. Hopcroft. </author> <title> Routing, merging, and sorting on parallel models of computation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30 </volume> <pages> 130-145, </pages> <year> 1985. </year>
Reference-contexts: Furthermore, two fundamental problems can be reduced to ANSV: (i) merging two sorted lists <ref> [5, 8] </ref>, and (ii) finding the maximum of n elements [11]. The ANSV problem is easy to solve sequentially in O (n) time using a stack.
Reference: [6] <author> D. Z. Chen. </author> <title> Efficient geometric algorithms in the erew-pram. </title> <booktitle> In Proceedings of the 28th Annual Aller-ton Conference on Communication, Control, and Computing, </booktitle> <pages> pages 818-827, </pages> <year> 1990. </year>
Reference-contexts: Berkman, Schieber, and Vishkin [4] give the following PRAM algorithms for the ANSV problem: (i) an O (lg n)-time (n= lg n)- processor CREW PRAM algorithm, and (ii) an O (lg lg n)-time (n= lg lg n)-processor CRCW PRAM algorithm. Chen <ref> [6] </ref> gives an EREW PRAM algorithm that matches the CREW PRAM bounds of [4]. In this paper, we extend the results of Berkman et al. [4] to develop the first O (lg n)-time hypercube algorithm for the ANSV problem.
Reference: [7] <author> M. T. Goodrich. </author> <title> Triangulating a polygon in parallel. </title> <journal> Journal of Algorithms, </journal> <volume> 10 </volume> <pages> 327-351, </pages> <year> 1989. </year>
Reference-contexts: A monotone polygon is one-sided if either its upper or lower chain consists of a single edge, called the distinguished edge. Our algorithm for triangulating a monotone polygon follows the approach of Berkman et al. [4], Ag-garwal et al. [1], and Goodrich <ref> [7] </ref>. The algorithm consists of two stages. In the first stage, we decompose the monotone polygon into one-sided monotone polygons. In the second stage, we triangulate the one-sided monotone polygons. We assume a d-dimensional hypercube containing 2 d = n processors, d 1.
Reference: [8] <author> C. P. Kruskal. </author> <title> Searching, merging, and sorting. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(10):942-946, </volume> <year> 1983. </year>
Reference-contexts: Furthermore, two fundamental problems can be reduced to ANSV: (i) merging two sorted lists <ref> [5, 8] </ref>, and (ii) finding the maximum of n elements [11]. The ANSV problem is easy to solve sequentially in O (n) time using a stack.
Reference: [9] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, </title> <booktitle> Hypercubes, </booktitle> <volume> volume 1. </volume> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: Algorithms satisfying conditions (i) and (ii) are often referred to as normal hypercube algorithms <ref> [9, Section 3.1.3] </ref>. Normal algorithms are widely regarded as the most interesting class of hypercube algorithms, since they can be executed with constant-factor slowdown on any of the bounded-degree variants of the hypercube (e.g., butterfly, shu*e-exchange, cube-connected cycles).
Reference: [10] <author> E. W. Mayr and R. Werchner. </author> <title> Optimal routing of parentheses on the hypercube. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 109-117, </pages> <year> 1992. </year>
Reference-contexts: We can efficiently exchange information between all pairs of match ing subcubes in parallel by making use of the parenthesis routing operation of Mayr and Wer-chner <ref> [10] </ref>.
Reference: [11] <author> L. G. Valiant. </author> <title> Parallelism in comparison problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4 </volume> <pages> 348-355, </pages> <year> 1975. </year>
Reference-contexts: Furthermore, two fundamental problems can be reduced to ANSV: (i) merging two sorted lists [5, 8], and (ii) finding the maximum of n elements <ref> [11] </ref>. The ANSV problem is easy to solve sequentially in O (n) time using a stack.
Reference: [12] <author> J. Vuillemin. </author> <title> A unified look at data structures. </title> <journal> Communications of the ACM, </journal> <volume> 23 </volume> <pages> 229-239, </pages> <year> 1980. </year>
Reference-contexts: a binary tree where the root corresponds to the element w k = min 0i&lt;n w i , the left child is the Cartesian tree of hw i : 0 i &lt; ki, and the right child is the Cartesian tree of hw i : k &lt; i &lt; ni <ref> [12] </ref>. The Cartesian tree is used in preprocessing algorithms for answering range minimum queries. Berkman et al. [4] show how to find the Cartesian tree in O (lg n) time using an (n= lg n)-processor CREW PRAM.
Reference: [13] <author> C. Yap. </author> <title> Parallel triangulation of a polygon in two calls to the trapezoidal map. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 279-288, </pages> <year> 1988. </year>
Reference-contexts: A simple polygon is monotone with respect to a line ` if any line orthogonal to ` intersects the polygon in at most two points. The triangulation of a simple polygon has numerous applications in computational geometry <ref> [13] </ref>. The triangulation of a monotone polygon is a subroutine used in all of the known parallel algorithms for triangulating simple polygons. Berkman et al. [4] give CREW and CRCW PRAM algorithms for triangulating a monotone polygon.
References-found: 13

