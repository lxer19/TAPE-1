URL: http://www.isi.edu/sims/minton/papers/aaai96.ps
Refering-URL: http://www.isi.edu/sims/minton/homepage.html
Root-URL: 
Email: minton@isi.edu  
Title: Is There Any Need for Domain-Dependent Control Information? A Reply  
Author: Steven Minton 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: USC Information Sciences Institute  
Abstract: In this paper, we consider the role that domain-dependent control knowledge plays in problem solving systems. Ginsberg and Geddis (Gins-berg & Geddis 1991) have claimed that domain-dependent control information has no place in declarative systems; instead, they say, such information should be derived from declarative facts about the domain plus domain-independent principles. We dispute their conclusion, arguing that it is impractical to generate control knowledge solely on the basis of logical derivations. We propose that simplifying abstractions are crucial for deriving control knowledge, and, as a result, empirical utility evaluation of the resulting rules will frequently be necessary to validate the utility of derived control knowledge. We illustrate our arguments with examples from two implemented systems. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bhatnagar, N., and Mostow, J. </author> <year> 1994. </year> <title> On-line learning from search failures. </title> <booktitle> Machine Learning 15(1). </booktitle>
Reference-contexts: In this section we have argued that simplifying abstractions can be essential for making the reasoning process efficient. 2 Many varieties of simplifying abstractions can be found in analytic learning systems that derive control knowledge. 3 Some examples include: the "preservability" assumption used by Bhat-nagar and Mostow's Failsafe <ref> (Bhatnagar & Mostow 1994) </ref>, the focus on non-recursive explanations in Et-zioni's Static (Etzioni 1993), the "plausible" domain theory used to identify chronic resource bottlenecks in Eskey and Zweben's constraint-based payload sched-uler (Eskey & Zweben 1990), and the use of depth-limits, domain-axioms and np-conditions by Katukam and Kambhampati (1994).
Reference: <author> Crawford, J., and Auton, L. </author> <year> 1993. </year> <title> Experimental results on the crossover point in satisfiability problems. </title> <booktitle> In AAAI-93 Proceedings. </booktitle>
Reference-contexts: It is possible that if one picked a good pre-existing domain-independent algorithm and tried it on mmm, it might perform much better than both the handcoded programs and Multi-tac's programs. To address this, we recently compared Multi-tac's programs (synthesized in the original study) to some well-known generic algorithms: Tableau <ref> (Crawford & Auton 1993) </ref>, gsat (Selman, Levesque, & Mitchell 1992), and fc-d (forward checking + minimum domain ordering, a standard CSP algorithm).
Reference: <author> Eskey, M., and Zweben, M. </author> <year> 1990. </year> <title> Learning search control for constraint-based scheduling. </title> <booktitle> In AAAI-90 Proceedings. </booktitle>
Reference-contexts: learning systems that derive control knowledge. 3 Some examples include: the "preservability" assumption used by Bhat-nagar and Mostow's Failsafe (Bhatnagar & Mostow 1994), the focus on non-recursive explanations in Et-zioni's Static (Etzioni 1993), the "plausible" domain theory used to identify chronic resource bottlenecks in Eskey and Zweben's constraint-based payload sched-uler <ref> (Eskey & Zweben 1990) </ref>, and the use of depth-limits, domain-axioms and np-conditions by Katukam and Kambhampati (1994).
Reference: <author> Etzioni, O., and Minton, S. </author> <year> 1992. </year> <title> Why ebl produces overly-specific knowledge: A critique of the prodigy approaches. </title> <booktitle> In Proceedings of the Ninth International Machine Learning Conference. </booktitle>
Reference: <author> Etzioni, O. </author> <year> 1993. </year> <title> Acquiring search control knowledge via static analysis. </title> <booktitle> Artificial Intelligence 62(1). </booktitle>
Reference-contexts: be essential for making the reasoning process efficient. 2 Many varieties of simplifying abstractions can be found in analytic learning systems that derive control knowledge. 3 Some examples include: the "preservability" assumption used by Bhat-nagar and Mostow's Failsafe (Bhatnagar & Mostow 1994), the focus on non-recursive explanations in Et-zioni's Static <ref> (Etzioni 1993) </ref>, the "plausible" domain theory used to identify chronic resource bottlenecks in Eskey and Zweben's constraint-based payload sched-uler (Eskey & Zweben 1990), and the use of depth-limits, domain-axioms and np-conditions by Katukam and Kambhampati (1994).
Reference: <author> Garey, M., and Johnson, D. </author> <year> 1979. </year> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co. </publisher>
Reference-contexts: Multi-tac synthesizes control rules for these decision points. The results that describe here were produced as a part of an in depth study with a problem called Minimum Maximal Matching (mmm). mmm is an NP-complete problem described in <ref> (Garey & John-son 1979) </ref>. An instance of mmm consists of a graph G = (V; E) and an integer K.
Reference: <author> Ginsberg, M., and Geddis, D. </author> <year> 1991. </year> <title> Is there any need for domain-dependent control information? In AAAI-91 Proceedings. </title>
Reference: <author> Gratch, J. </author> <year> 1995. </year> <title> On efficient approaches to the utility problem in adaptive problem solving. </title> <type> Technical Report 1916, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, Illi-nois. </institution>
Reference: <author> Katukam, S., and Kambhampati, S. </author> <year> 1994. </year> <title> Learning explanation-based search control rules for partial order planning. </title> <booktitle> In AAAI-94 Proceedings. </booktitle>
Reference: <author> Minton, S., and Underwood, I. </author> <year> 1994. </year> <title> Small is beautiful: A brute-force approach to learning first-order formulas. </title> <booktitle> In AAAI-94 Proceedings. </booktitle>
Reference: <author> Minton, S.; Carbonell, J.; Knoblock, C.; Kuokka, D.; Etzioni, O.; and Gil, Y. </author> <year> 1989. </year> <title> Explanation-based learning: A problem solving perspective. </title> <booktitle> Artificial Intelligence 40 </booktitle> <pages> 63-118. </pages>
Reference: <author> Minton, S. </author> <year> 1988. </year> <title> Learning Search Control Knowledge: An Explanation-based Approach. </title> <address> Boston, Mas-sachusetts: </address> <note> Kluwer Academic Publishers. Also available as Carnegie-Mellon CS Tech. Report CMU-CS-88-133. </note>
Reference-contexts: Nevertheless, they leave the reader with an over-simplified view of the world. In order to show this, we consider some concrete examples that illustrate the complexities involved in acquiring control knowledge. We begin by reviewing the learning process used by Prodigy-ebl <ref> (Minton 1988) </ref>, and then turn our attention to some recent experiments with Multi-tac (Minton 1996). Ginsberg and Geddis' Argument Ginsberg and Geddis (G&G) begin by introducing the following distinction. <p> The concept of a goal-interaction provides a simplifying abstraction, so that we can ignore the complexities mentioned above, i.e., we assume that avoiding goal interactions is preferable. Avoiding goal interactions isn't necessarily preferable <ref> (as discussed by Minton, 1988) </ref>. For instance, it may turn out that all paths leading to a solution, or the shortest paths to the solution, involve one or more goal-interactions.
Reference: <author> Minton, S. </author> <year> 1993. </year> <title> Integrating heuristics for constraint satisfaction problems: A case study. </title> <booktitle> In AAAI-93 Proceedings. </booktitle>
Reference-contexts: The cardinality of the set of edges that are assigned 1 must be less than or equal to K. In Multi-tac each of these three constraints is represented by a sentence in a form of first-order logic. In the original experiments with this problem <ref> (Minton 1993) </ref>, we created three different instance distributions for mmm and for each distribution, we compared programs synthesized by computer scientists for that distribution to programs synthesized by Multi-tac for the same distribution. Multi-tac's programs were generally competitive with the hand-coded programs, and in some cases, superior. <p> Since the programs did not necessarily solve each instance within the time bound, the second column shows the number of solved instances. 5 We did not include the time necessary forMulti-tac to synthesize its programs in the comparison, since as discussed in <ref> (Minton 1993) </ref>, we assume that Multi-tac will only be used in applications where compile time is not a critical factor. <p> However, other than establishing this fact, the performance results are tangential to this discussion. The interesting part is why Multi-tac outperformed Tableau. (Out of necessity, we can only summarize the detailed results described in (Minton 1996).) The first two distributions were relatively easy, as described in the original study <ref> (Minton 1993) </ref>, and Multi-tac synthesized essentially the same program for both distributions. Tableau did not perform as well as Multi-tac on these distributions, but a closer analysis shows that Tableau was partly handicapped by the clause form representation that it employs. <p> experimental results illustrate that the distributions can be critical for determining what types of control rules are appropriate. (This can be even more dramatically demonstrated by running the program derived for the third distributions on the second distribution, or vice versa; In either case, the performance suffers, as shown in <ref> (Minton 1993) </ref>.) The Role of Simplifying Abstractions G&G raise the possibility that probabilistic knowledge about the domain can be used to derive control rules. For instance, in one of their examples, they suggest that a problem solver could derive control knowledge by reasoning about how tightly constrained different subproblems are.
Reference: <author> Minton, S. </author> <year> 1996. </year> <title> Automatically configuring constraint satisfaction programs: A case study. Constraints 1(1). </title>
Reference-contexts: In order to show this, we consider some concrete examples that illustrate the complexities involved in acquiring control knowledge. We begin by reviewing the learning process used by Prodigy-ebl (Minton 1988), and then turn our attention to some recent experiments with Multi-tac <ref> (Minton 1996) </ref>. Ginsberg and Geddis' Argument Ginsberg and Geddis (G&G) begin by introducing the following distinction. <p> To address this, we recently compared Multi-tac's programs (synthesized in the original study) to some well-known generic algorithms: Tableau (Crawford & Auton 1993), gsat (Selman, Levesque, & Mitchell 1992), and fc-d (forward checking + minimum domain ordering, a standard CSP algorithm). We found that Multi-tac outperformed these programs <ref> (Minton 1996) </ref>, and we will briefly summarize some of the results of the comparison between Multi-tac and Tableau, the "second-place" finisher, simply to illustrate the utility of the control knowledge produced by Multi-tac. We will then consider why this knowledge would be difficult to derive solely through domain-independent logical analysis. <p> However, other than establishing this fact, the performance results are tangential to this discussion. The interesting part is why Multi-tac outperformed Tableau. (Out of necessity, we can only summarize the detailed results described in <ref> (Minton 1996) </ref>.) The first two distributions were relatively easy, as described in the original study (Minton 1993), and Multi-tac synthesized essentially the same program for both distributions. <p> is necessary to determine which rules really are sensible. (Of course, even if the recommendations made by the control rules were guaranteed to be correct, utility evaluation would still be required to deal with the considerations outlined in the 7 Multi-tac includes two different learning components for producing control rules <ref> (Minton 1996) </ref>, but for pedagogical purposes we focus on only one of them here, the analytic mechanism.
Reference: <author> Selman, B.; Levesque, H.; and Mitchell, D. </author> <year> 1992. </year> <title> A new method for solving hard satisfiability problems. </title> <booktitle> In AAAI-92 Proceedings. </booktitle>
Reference-contexts: To address this, we recently compared Multi-tac's programs (synthesized in the original study) to some well-known generic algorithms: Tableau (Crawford & Auton 1993), gsat <ref> (Selman, Levesque, & Mitchell 1992) </ref>, and fc-d (forward checking + minimum domain ordering, a standard CSP algorithm).
Reference: <author> Smith, D. </author> <year> 1985. </year> <title> Controlling Inference. </title> <type> Ph.D. Dissertation, </type> <institution> Computer Science Dept., Stanford University. </institution>
Reference-contexts: Here, a similar control rule, this time involving acute vs. equilateral, is valid: Delay (equilateral) The intuition that control knowledge only depends on the form of the base-level theory is the basis for G&G's claims. Explaining their view, they quote David Smith's thesis <ref> (Smith 1985) </ref>: Good control decisions are not arbitrary; there is always a reason why they work. Once these reasons are uncovered and recorded, specific control decisions will follow logically from the domain-independent rationale, and simple facts about the domain. G&G's paper is divided into two parts.
References-found: 16

