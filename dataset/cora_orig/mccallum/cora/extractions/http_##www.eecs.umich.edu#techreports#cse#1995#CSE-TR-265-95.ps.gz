URL: http://www.eecs.umich.edu/techreports/cse/1995/CSE-TR-265-95.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse95.html
Root-URL: http://www.eecs.umich.edu
Email: fpjensen,soparkarg@eecs.umich.edu  
Title: Real-Time Concurrency Control in Groupware  
Author: Paul Jensen Nandit Soparkar 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Electrical Engineering Computer Science The University of Michigan  
Abstract: Concurrency control has been identified as an important issue for groupware systems in which several users may access shared data resources. The unique real-time responsiveness and consistency requirements in groupware environments suggest that traditional approaches (e.g., from transaction-processing) need to be modified in order to be deployed. We describe how recently developed techniques from real-time transaction systems may be applied to groupware. In doing so, we provide novel ways to partition data and concurrency control to permit weaker consistency constraints in order to facilitate meeting of the responsiveness requirements. Our research addresses these issues as pertinent to both the local as well as the distributed environments in the context of groupware. 
Abstract-found: 1
Intro-found: 1
Reference: [BHG87] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: It has been pointed-out by researchers in groupware (e.g., see [EG89, GM94, PK94]) that traditional distributed databases and transaction processing (e.g., see <ref> [BHG87] </ref>) are not suitable for such collaborative environments. Furthermore, as some of the examples in this paper exhibit, traditional distributed computing techniques (e.g., see [ea90, CS93]) are not entirely appropriate either. <p> We use the criterion of conflict serializability (CSR) as the logical correctness criterion for a schedule with concurrently executing transactions; more liberal criteria (e.g., see <ref> [BHG87, KS94] </ref>) may also be considered without affecting the development of our ideas significantly. We develop the use of more liberal criteria in the descriptions within this paper. <p> to be transactions with single operations (and locks etc. would be unnecessary for them). 6 S C TCTM Module data T 1 T 2 : : : T n Underlying System Transactions For a given site we assume the software architecture illustrated in Figure 1 to manage CC (e.g., see <ref> [BHG87] </ref>) and scheduling. Transactions are submitted to the CC module which resides above the underlying system that stores the data. The CC module must handle both, the logical correctness as well as the RTR for the executions. <p> common CC protocols such as two-phase locking (2PL), time-stamp ordering (TO) etc.; in the case of a certification protocol, the only difference is that the check to ensure that an acceptable execution is being generated is done at the end of a transaction rather than at each operation (e.g., see <ref> [BHG87] </ref>). This characterization includes CC developed using semantics-based approaches. No-delay schedulers have several inadequacies when considered in the context of groupware: * In practice, delays may be encountered for operations that arrive in an input sequence that is logically correct even in CC techniques potentially characterized as being no-delay schedulers. <p> The standard approach to distributed atomic commitment is to use the two-phase commit (2PC) protocol (e.g., see <ref> [BHG87] </ref>), where a transaction is executed under the control of a centralized coordinator. <p> While it is advisable to use the standard CR where possible in order to accrue their obvious advantages <ref> [GR93, BHG87] </ref>, the problems noted above cannot be tolerated in groupware applications. Therefore, in order to use the transaction paradigm in a groupware environment, some of the stringent CR must be relaxed (e.g., see [Sin88, Sta88]). <p> have no inter-dependencies, share no global information, and to not need the use of a commit protocol (i.e., local sites run the compensations autonomously). 5.3 Relaxing the CR Our CR is stated in terms of a serialization graph (SG) that are an extended version of the standard SGs (e.g., see <ref> [BHG87] </ref>). We model an aborted subtransaction as a committed subtransaction followed immediately by the corresponding compensating transaction that simply undoes the committed subtransaction (i.e., simply as a syntactic device for uniformity of presentation). Let T be a set of global transactions. <p> Aside from the compensating subtransactions used to model an aborted subtransaction, not all elements of T p need necessarily have a corresponding element in CT p . The local serialization graph at site C p for a complete local history H p (e.g., see <ref> [BHG87] </ref>) is a directed graph SG p (H)=(V p ; E p ). The set of nodes V p consists of a subset of transactions in T p [ CT p . <p> Its use in conjunction with strict 2PL effectively synchronizes all the subtransactions according to a distributed 2PL policy (e.g., see <ref> [BHG87, SKS91] </ref>). The above protocol suffers from the following shortcomings. First, once a participant indicates its preparedness to commit in 2PC, it cannot allow the subtransaction in question to relinquish the locks held by committing or aborting until such time that the final decision is obtained from the coordinator.
Reference: [CS93] <author> D.R. Cheriton and D. Skeen. </author> <title> Understanding the limitations of causally and totally ordered communication. </title> <booktitle> Operating System Review, </booktitle> <pages> pages 44-57, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: It has been pointed-out by researchers in groupware (e.g., see [EG89, GM94, PK94]) that traditional distributed databases and transaction processing (e.g., see [BHG87]) are not suitable for such collaborative environments. Furthermore, as some of the examples in this paper exhibit, traditional distributed computing techniques (e.g., see <ref> [ea90, CS93] </ref>) are not entirely appropriate either. The reasons are essentially that the high responsiveness necessary in terms of performance, and human-computer interaction considerations, are paramount | which are not handled well by the traditional techniques.
Reference: [ea90] <author> K. Birman et al. </author> <title> The isis system manual, </title> <note> version 2.0, </note> <year> 1990. </year>
Reference-contexts: It has been pointed-out by researchers in groupware (e.g., see [EG89, GM94, PK94]) that traditional distributed databases and transaction processing (e.g., see [BHG87]) are not suitable for such collaborative environments. Furthermore, as some of the examples in this paper exhibit, traditional distributed computing techniques (e.g., see <ref> [ea90, CS93] </ref>) are not entirely appropriate either. The reasons are essentially that the high responsiveness necessary in terms of performance, and human-computer interaction considerations, are paramount | which are not handled well by the traditional techniques.
Reference: [ea93a] <author> C.R. Clauer et al. Uarc: </author> <title> A prototype upper atmospheric research collaboratory. </title> <journal> EOS Trans. American Geophysical Union, </journal> <pages> pages 267-274, </pages> <year> 1993. </year>
Reference-contexts: In groupware, these constitute very important considerations for the usability of a system. Example 2. Consider an application where several scientists are studying a geophysical terrain together, and the image is provided on their computers (e.g., see <ref> [ea93a] </ref>). A single pointer on the screen may be used to draw the attention of the entire team to particular points of interest. Since the team may be involved in discussions on what they observe, the pointer manipulations would need to be effected in real-time, and in order. <p> In our approach, we indicate how several existing traditional and newly developed techniques may be used to provide the characteristics desired in groupware systems. Experiences of others using several experimental systems (e.g., see <ref> [ea93a, Wu95] </ref>) suggest that our approach may be profitably used in managing concurrent executions in groupware environments. There are several issues regarding concurrency control for groupware, and we consider only a few of them here.
Reference: [ea93b] <editor> Ed. Reddy et al. </editor> <title> Computer support for concurrent engineering. </title> <journal> IEEE Computer, </journal> <volume> 26(1), </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Groupware systems are becoming increasingly important in organizations to facilitate the collaborative efforts of team projects (e.g., see <ref> [ea93b, EGR91, KP90, KBL93, GM94, GSW92, Wu95] </ref>). Users, often geographically distributed, coordinate on accessing shared data, and some means for concurrency control (CC) is necessary to facilitate their inter-dependent, and sometimes conflicting, manipulation of shared data.
Reference: [EG89] <author> C.A. Ellis and S.J. Gibbs. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings of ACM-SIGMOD 1989 International Conference on Management of Data, Portland, Oregon, </booktitle> <pages> pages 399-407, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Such shared data represents not only the particular documents or designs used by the team, but also the presentation environments such as the views, pointers etc., that are made available to the users. It has been pointed-out by researchers in groupware (e.g., see <ref> [EG89, GM94, PK94] </ref>) that traditional distributed databases and transaction processing (e.g., see [BHG87]) are not suitable for such collaborative environments. Furthermore, as some of the examples in this paper exhibit, traditional distributed computing techniques (e.g., see [ea90, CS93]) are not entirely appropriate either. <p> Furthermore, conflicts arising due to the simultaneous access of the pointer may be resolved in a simple manner (e.g., by restoring the pointer to its original position, by giving one movement preference over others, or by combining the movements by using T op -style transformations as described in <ref> [EG89] </ref>). 2 Example 3. Consider a flight-simulation environment where different controls are handled by separate user (e.g., there may be separate controls for motion in the vertical and horizontal directions). The resulting view should be depicted on every user's computer screen in real-time during the simulation.
Reference: [EGR91] <author> C.A. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <volume> 34(1), </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Groupware systems are becoming increasingly important in organizations to facilitate the collaborative efforts of team projects (e.g., see <ref> [ea93b, EGR91, KP90, KBL93, GM94, GSW92, Wu95] </ref>). Users, often geographically distributed, coordinate on accessing shared data, and some means for concurrency control (CC) is necessary to facilitate their inter-dependent, and sometimes conflicting, manipulation of shared data.
Reference: [GM94] <author> S. Greenberg and D. Marwood. </author> <title> Real time groupware as a distributed system: Concurrency control and its effect on the interface. </title> <booktitle> CSCW '94, </booktitle> <pages> pages 207-217, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Groupware systems are becoming increasingly important in organizations to facilitate the collaborative efforts of team projects (e.g., see <ref> [ea93b, EGR91, KP90, KBL93, GM94, GSW92, Wu95] </ref>). Users, often geographically distributed, coordinate on accessing shared data, and some means for concurrency control (CC) is necessary to facilitate their inter-dependent, and sometimes conflicting, manipulation of shared data. <p> Such shared data represents not only the particular documents or designs used by the team, but also the presentation environments such as the views, pointers etc., that are made available to the users. It has been pointed-out by researchers in groupware (e.g., see <ref> [EG89, GM94, PK94] </ref>) that traditional distributed databases and transaction processing (e.g., see [BHG87]) are not suitable for such collaborative environments. Furthermore, as some of the examples in this paper exhibit, traditional distributed computing techniques (e.g., see [ea90, CS93]) are not entirely appropriate either.
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference-contexts: While it is advisable to use the standard CR where possible in order to accrue their obvious advantages <ref> [GR93, BHG87] </ref>, the problems noted above cannot be tolerated in groupware applications. Therefore, in order to use the transaction paradigm in a groupware environment, some of the stringent CR must be relaxed (e.g., see [Sin88, Sta88]).
Reference: [GSW92] <author> I. Greif, R. Seliger, and W. Weihl. </author> <title> A case study of CES: A distributed collaborative editing system implemented in Argus, </title> <year> 1992. </year>
Reference-contexts: 1 Introduction Groupware systems are becoming increasingly important in organizations to facilitate the collaborative efforts of team projects (e.g., see <ref> [ea93b, EGR91, KP90, KBL93, GM94, GSW92, Wu95] </ref>). Users, often geographically distributed, coordinate on accessing shared data, and some means for concurrency control (CC) is necessary to facilitate their inter-dependent, and sometimes conflicting, manipulation of shared data.
Reference: [KBL93] <author> Alain Karsenty and Michel Beaudouin-Lafon. </author> <title> An algorithm for distributed groupware applications, </title> <year> 1993. </year>
Reference-contexts: 1 Introduction Groupware systems are becoming increasingly important in organizations to facilitate the collaborative efforts of team projects (e.g., see <ref> [ea93b, EGR91, KP90, KBL93, GM94, GSW92, Wu95] </ref>). Users, often geographically distributed, coordinate on accessing shared data, and some means for concurrency control (CC) is necessary to facilitate their inter-dependent, and sometimes conflicting, manipulation of shared data.
Reference: [KKB88] <author> H. F. Korth, W. Kim, and F. Bancilhon. </author> <title> On long duration CAD transactions. </title> <journal> Information Sciences, </journal> <volume> 46 </volume> <pages> 73-107, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The reason that separate CC is possible is that the levels may be regarded as separate, independent databases. Such approaches have been considered in other transaction processing contexts with respect to distributed databases as well (e.g., see <ref> [KKB88, SLJ88] </ref>). In all cases, the CC strategies should ensure that eventually the data at various sites become mutually consistent. 3 Responsiveness and Consistency In general, providing better RTR performance entails using relaxed CR | since "optimistic" approaches need to be used (e.g., see [KR81]).
Reference: [KLS90] <author> H. F. Korth, E. Levy, and A. Silberschatz. </author> <title> Compensating transactions: A new recovery paradigm. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Databases, Brisbane, </booktitle> <pages> pages 95-106, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The key idea in our approach lies in the idea of compensation. If a transaction T commits "erroneously" (i.e., it is discovered ex post facto that T should actually have been aborted), a compensating transaction CT for T is used to perform a "semantic undo" of T (e.g., see <ref> [KLS90] </ref>). This undo returns the database to a consistent state that is equivalent, in an application-specific semantic sense, to a state resulting from an execution in which T never executed. Compensation is accomplished without resorting to cascaded aborts. <p> Compensation guarantees that a consistent state is established based on semantic information. The state of the database after compensation takes place may only approximate the state that would have been reached, had the forward transaction never been executed (e.g., see <ref> [KLS90, Lev91] </ref>). Regard a transaction to be a function from one database state to another. An execution imposes a serialization order among a set of concurrently executing transactions.
Reference: [KP90] <author> M.J. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Groupware systems are becoming increasingly important in organizations to facilitate the collaborative efforts of team projects (e.g., see <ref> [ea93b, EGR91, KP90, KBL93, GM94, GSW92, Wu95] </ref>). Users, often geographically distributed, coordinate on accessing shared data, and some means for concurrency control (CC) is necessary to facilitate their inter-dependent, and sometimes conflicting, manipulation of shared data.
Reference: [KR81] <author> H. Kung and J. Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <month> June </month> <year> 1981. </year>
Reference-contexts: In all cases, the CC strategies should ensure that eventually the data at various sites become mutually consistent. 3 Responsiveness and Consistency In general, providing better RTR performance entails using relaxed CR | since "optimistic" approaches need to be used (e.g., see <ref> [KR81] </ref>). However, in most cases, the effectiveness of various forms of optimism depend on factors such as the degree of conflicts etc., and therefore, it is not very simple to provide a general approach suited to all situations.
Reference: [Kri82] <author> R. Krishnamurthy. </author> <title> Concurrency control and transaction processing in a parallel database machine environment. </title> <type> Ph.D. dissertation. </type> <institution> Department of Computer Sciences, University of Texas at Austin, </institution> <month> December </month> <year> 1982. </year>
Reference-contexts: The set of operations can be precedence ordered to ensure logical correctness by means described in other research (e.g., see <ref> [Kri82] </ref>). Thereafter, a separate scheduler that handles precedence ordering may be used to achieve the desired performance. The approach would be to regard each operation as a task for scheduling purposes. * Addressing performance first. A CC module may optimize performance criteria prior to imposing logical correctness.
Reference: [KS94] <author> H. F. Korth and G. Speegle. </author> <title> Formal aspects of concurrency control in long-duration transaction systems using the NT/PV model. </title> <journal> ACM Transactions on Database Systems, </journal> <year> 1994. </year>
Reference-contexts: We use the criterion of conflict serializability (CSR) as the logical correctness criterion for a schedule with concurrently executing transactions; more liberal criteria (e.g., see <ref> [BHG87, KS94] </ref>) may also be considered without affecting the development of our ideas significantly. We develop the use of more liberal criteria in the descriptions within this paper.
Reference: [KSS90] <author> H. F. Korth, N. R. Soparkar, and A. Silberschatz. </author> <title> Triggered real-time databases with consistency constraints. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Databases, </booktitle> <address> Brisbane, </address> <month> August </month> <year> 1990. </year> <booktitle> Also included in Readings in Advances in Real-Time Systems, </booktitle> <publisher> IEEE Comp.Soc. Press, </publisher> <year> 1993. </year>
Reference-contexts: For instance, cameras may be activated to take photographs of a particular object from several angles at a particular time, to be then provided to the groupware users. 7 We assume that at each site, local transactions update the local track data (e.g., see external-input transactions of <ref> [KSS90] </ref>). Also, we assume that the collection and correlation of the local track data from the different sites, and the dissemination of the global track data, together constitute one type of global transaction.
Reference: [Lev91] <author> E. Levy. </author> <title> Semantics-based recovery in transaction management systems. </title> <type> Ph.D. dissertation. </type> <institution> Department of Computer Sciences, University of Texas at Austin, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Examples for such situations are available in the literature, and the approaches that appear suitable involve some form of compensatory actions derived from the applications (e.g., see <ref> [PK94, SLKS94, Lev91] </ref>). In terms of a transaction-oriented approach, this could even mean the undoing of committed actions based on "compensating" transactions (e.g., see [Lev91]). Example 6. Consider an observation system in scientific domains for mobile objects (adapted from [SLKS94]). <p> In terms of a transaction-oriented approach, this could even mean the undoing of committed actions based on "compensating" transactions (e.g., see <ref> [Lev91] </ref>). Example 6. Consider an observation system in scientific domains for mobile objects (adapted from [SLKS94]). The system consists of several tracking stations (i.e., "sites"), each of which has its own computing and scheduling resources. <p> Furthermore, we require that any conflicts that occur at a site w.r.t. the changes invoked are resolved by mechanisms that operate locally at each site (e.g., see <ref> [SLKS94, Lev91] </ref>). This is to ensure that time-consuming negotiations with other sites (thereby exacerbating problems by degrading RTR) are avoided. <p> The use of semantics to improve the performance of concurrent systems, especially in the context of new and advanced applications, has been the subject of study in related disciplines (e.g., see <ref> [Sop93, SLKS94, Lev91] </ref>), and below, one of the techniques is detailed in the context of groupware systems. 5.1 Difficulties in Distributed Synchronization Consider the issue of ensuring the correct execution of a multi-site global transaction. <p> Compensation guarantees that a consistent state is established based on semantic information. The state of the database after compensation takes place may only approximate the state that would have been reached, had the forward transaction never been executed (e.g., see <ref> [KLS90, Lev91] </ref>). Regard a transaction to be a function from one database state to another. An execution imposes a serialization order among a set of concurrently executing transactions. <p> The subtransactions are selected from a well-defined library of routines at each site. For global transactions that can be compensated-for, each forward subtransaction is associated with a predefined compensating subtransaction. Compensating for a global transaction need not be coordinated as a global activity (e.g., see <ref> [LKS91a, Lev91, LKS91b] </ref>).
Reference: [LKS91a] <author> E. Levy, H. F. Korth, and A. Silberschatz. </author> <title> An optimistic commit protocol for distributed transaction management. </title> <booktitle> In Proceedings of ACM-SIGMOD 1991 International Conference on Management of Data, </booktitle> <address> Denver, Colorado, </address> <pages> pages 88-97, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The subtransactions are selected from a well-defined library of routines at each site. For global transactions that can be compensated-for, each forward subtransaction is associated with a predefined compensating subtransaction. Compensating for a global transaction need not be coordinated as a global activity (e.g., see <ref> [LKS91a, Lev91, LKS91b] </ref>). <p> This may be a time-consuming activity, and thus, there is an additional delay before the participant may notify its preparedness. To alleviate the above problems, a protocol based on an optimistic 2PC protocol (e.g., see <ref> [LKS91a] </ref>) may be used adaptively under conditions requiring improved RTR. This protocol is similar to the traditional 2PC up to the point that the request for the state of preparedness is received by the participating sites. <p> Thus, the non-compensatable subtransactions are informed of a final decision to commit only after the coordinator ascertains that all the compensatable subtransactions also commit. This is achieved by using a complete version of the optimistic 2PC protocol <ref> [LKS91a] </ref> where each participant informs the coordinator after it commits its corresponding subtransaction. 6 Conclusions We have considered the concurrency control issues for groupware systems, and have exhibited that recent developments in real-time transaction processing may be appropriate approaches.
Reference: [LKS91b] <author> E. Levy, H. F. Korth, and A. Silberschatz. </author> <title> A theory of relaxed atomicity. </title> <booktitle> In Proceedings of the ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: The subtransactions are selected from a well-defined library of routines at each site. For global transactions that can be compensated-for, each forward subtransaction is associated with a predefined compensating subtransaction. Compensating for a global transaction need not be coordinated as a global activity (e.g., see <ref> [LKS91a, Lev91, LKS91b] </ref>).
Reference: [Pap86] <author> C. Papadimitriou. </author> <title> The Theory of Database Concurrency Control. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1986. </year>
Reference-contexts: The traditional approach has the goal of certifying as large a number of schedules as possible to be logically correct (e.g., see <ref> [Pap86] </ref>). The expectation is that this would enable the CC module to adversely affect the performance minimally. Therefore, every logically correct schedule is regarded as being equally desirable (e.g., either of the two logically correct schedules, a and b in Example 8).
Reference: [PK94] <author> A. Prakash and M.J. Knister. </author> <title> A framework for undoing actions in collaborative systems. Transactions on Computer Human Interactions, </title> <note> 1994. Also available as Tech.Rep. </note> <institution> CSE-TR-196-94 from The University of Michigan, Ann Arbor, EECS department. </institution>
Reference-contexts: Such shared data represents not only the particular documents or designs used by the team, but also the presentation environments such as the views, pointers etc., that are made available to the users. It has been pointed-out by researchers in groupware (e.g., see <ref> [EG89, GM94, PK94] </ref>) that traditional distributed databases and transaction processing (e.g., see [BHG87]) are not suitable for such collaborative environments. Furthermore, as some of the examples in this paper exhibit, traditional distributed computing techniques (e.g., see [ea90, CS93]) are not entirely appropriate either. <p> In such situations, the exclusive access would be obtained first (via the CC), and subsequently, RTR may be provided. 2 Attempts to satisfy RTR and CR requirements simultaneously may entail undoing (by utilizing application semantics) a user's actions that were effected at some sites (e.g., see <ref> [PK94] </ref>). Since several other actions may have occurred that were dependent on the changes made by the action to be undone, an undo may prove difficult. <p> Examples for such situations are available in the literature, and the approaches that appear suitable involve some form of compensatory actions derived from the applications (e.g., see <ref> [PK94, SLKS94, Lev91] </ref>). In terms of a transaction-oriented approach, this could even mean the undoing of committed actions based on "compensating" transactions (e.g., see [Lev91]). Example 6. Consider an observation system in scientific domains for mobile objects (adapted from [SLKS94]). <p> Approaches based on undo/redo, compensation, semantics etc. (e.g., 12 communications network user programs global subtransactions local transactions and MGS n MGS i MGS 2 MGS 1 LCC i MGS i see <ref> [PK94] </ref>), may all be regarded as attempts to achieve these essentially incompatible goals.
Reference: [Ram93] <author> K. Ramamritham. </author> <title> Real-time databases. </title> <journal> International Journal on Parallel and Distributed Databases, </journal> <volume> 1(2), </volume> <year> 1993. </year>
Reference-contexts: The approach would be to regard each operation as a task for scheduling purposes. * Addressing performance first. A CC module may optimize performance criteria prior to imposing logical correctness. In practice, this approach corresponds to techniques such as prioritizing the input queue to the CC (e.g., see <ref> [Ram93] </ref>). A simple example would be to effect the "earliest deadline first" heuristic on deadline-constrained operations by maintaining an input queue sorted in the order of the deadlines.
Reference: [Sin88] <author> M. Singhal. </author> <title> Issues and approaches to design of real-time database systems. </title> <journal> ACM SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 19-33, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Therefore, in order to use the transaction paradigm in a groupware environment, some of the stringent CR must be relaxed (e.g., see <ref> [Sin88, Sta88] </ref>). We adapt the concept of relaxed atomicity from [SLKS94] and apply them to groupware CC. The key idea in our approach lies in the idea of compensation.
Reference: [SKS91] <author> N. R. Soparkar, H.F. Korth, and A. Silberschatz. </author> <title> Failure-resilient transaction management in multi-databases. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Its use in conjunction with strict 2PL effectively synchronizes all the subtransactions according to a distributed 2PL policy (e.g., see <ref> [BHG87, SKS91] </ref>). The above protocol suffers from the following shortcomings. First, once a participant indicates its preparedness to commit in 2PC, it cannot allow the subtransaction in question to relinquish the locks held by committing or aborting until such time that the final decision is obtained from the coordinator. <p> Although the above scheme uses strict 2PL to guarantee serializability, similar mechanisms could be devised for other CC techniques by using careful synchronization (e.g., see <ref> [SKS91] </ref>). Also, we note that in the techniques described above, concurrent global transactions may each use a different criterion of atomicity. Furthermore, even for the same global transaction, the constituent subtransactions may actually be engaged in different commit protocols. This is important because not all subtransactions may be compensatable.
Reference: [SLJ88] <author> L. Sha, J.P. Lehoczky, and E.D. Jensen. </author> <title> Modular concurrency control and failure recovery. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(2) </volume> <pages> 146-159, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The reason that separate CC is possible is that the levels may be regarded as separate, independent databases. Such approaches have been considered in other transaction processing contexts with respect to distributed databases as well (e.g., see <ref> [KKB88, SLJ88] </ref>). In all cases, the CC strategies should ensure that eventually the data at various sites become mutually consistent. 3 Responsiveness and Consistency In general, providing better RTR performance entails using relaxed CR | since "optimistic" approaches need to be used (e.g., see [KR81]).
Reference: [SLKS94] <author> N. R. Soparkar, E. Levy, H. F. Korth, and A. Silberschatz. </author> <title> Adaptive commitment for real-time distributed transactions. </title> <booktitle> In Third International Conference on Information and Knowledge Management, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: This example illustrates how RTR may adversely affect CR considerations, and vice versa (discussed further in Section 3). This fundamental incompatibility between the two requirements has been also identified in environments such as transaction-processing and real-time systems (e.g., see <ref> [Sop93, SLKS94] </ref>). On the other hand, the shared data resources in a groupware system may exhibit characteristics which permit greater RTR because their CR considerations are less crucial (e.g., as compared to a database environment). <p> Examples for such situations are available in the literature, and the approaches that appear suitable involve some form of compensatory actions derived from the applications (e.g., see <ref> [PK94, SLKS94, Lev91] </ref>). In terms of a transaction-oriented approach, this could even mean the undoing of committed actions based on "compensating" transactions (e.g., see [Lev91]). Example 6. Consider an observation system in scientific domains for mobile objects (adapted from [SLKS94]). <p> In terms of a transaction-oriented approach, this could even mean the undoing of committed actions based on "compensating" transactions (e.g., see [Lev91]). Example 6. Consider an observation system in scientific domains for mobile objects (adapted from <ref> [SLKS94] </ref>). The system consists of several tracking stations (i.e., "sites"), each of which has its own computing and scheduling resources. That is, there are several processing sites that manage object-sensors, cameras, and store data pertaining to the readings, positions, etc. locally. <p> Furthermore, we require that any conflicts that occur at a site w.r.t. the changes invoked are resolved by mechanisms that operate locally at each site (e.g., see <ref> [SLKS94, Lev91] </ref>). This is to ensure that time-consuming negotiations with other sites (thereby exacerbating problems by degrading RTR) are avoided. <p> The use of semantics to improve the performance of concurrent systems, especially in the context of new and advanced applications, has been the subject of study in related disciplines (e.g., see <ref> [Sop93, SLKS94, Lev91] </ref>), and below, one of the techniques is detailed in the context of groupware systems. 5.1 Difficulties in Distributed Synchronization Consider the issue of ensuring the correct execution of a multi-site global transaction. <p> Therefore, in order to use the transaction paradigm in a groupware environment, some of the stringent CR must be relaxed (e.g., see [Sin88, Sta88]). We adapt the concept of relaxed atomicity from <ref> [SLKS94] </ref> and apply them to groupware CC. The key idea in our approach lies in the idea of compensation.
Reference: [Sop93] <author> N. R. Soparkar. </author> <title> Time-constrained transaction management. </title> <type> Ph.D. dissertation. </type> <institution> Department of Computer Sciences, University of Texas at Austin, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: This example illustrates how RTR may adversely affect CR considerations, and vice versa (discussed further in Section 3). This fundamental incompatibility between the two requirements has been also identified in environments such as transaction-processing and real-time systems (e.g., see <ref> [Sop93, SLKS94] </ref>). On the other hand, the shared data resources in a groupware system may exhibit characteristics which permit greater RTR because their CR considerations are less crucial (e.g., as compared to a database environment). <p> Third, since we are dealing with soft deadlines, the aim is to try and meet these time constraints, without necessarily being able to guarantee them. 2 4.1 Traditional Concurrency Control We re-examine traditional transaction CC since the limitations in merely improving concurrency become apparent (e.g., see <ref> [Sop93] </ref>), and the options available to the CC module get clarified. The traditional approach has the goal of certifying as large a number of schedules as possible to be logically correct (e.g., see [Pap86]). The expectation is that this would enable the CC module to adversely affect the performance minimally. <p> That is, the logical correctness phase would be best achieved by a no-delay scheduler which attempts to minimize the changes made to a given input sequence of operations. * Handling both criteria simultaneously. The scheduling problem in this context is unresolved w.r.t. complexity. The interested reader is referred to <ref> [Sop93] </ref>. Regardless of which of the above approaches is used, the scheduling would be essentially a static scheduler executed repeatedly to achieve dynamic scheduling. The question arises as to how often the static scheduler would need to be executed. <p> The use of semantics to improve the performance of concurrent systems, especially in the context of new and advanced applications, has been the subject of study in related disciplines (e.g., see <ref> [Sop93, SLKS94, Lev91] </ref>), and below, one of the techniques is detailed in the context of groupware systems. 5.1 Difficulties in Distributed Synchronization Consider the issue of ensuring the correct execution of a multi-site global transaction.
Reference: [Sta88] <author> J. A. Stankovic. </author> <title> Misconceptions about real-time computing. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 10-19, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Therefore, in order to use the transaction paradigm in a groupware environment, some of the stringent CR must be relaxed (e.g., see <ref> [Sin88, Sta88] </ref>). We adapt the concept of relaxed atomicity from [SLKS94] and apply them to groupware CC. The key idea in our approach lies in the idea of compensation.
Reference: [Wu95] <author> Gwobaw A. Wu. </author> <title> Concurrency control issues in collaborative systems (a thesis proposal), </title> <month> June </month> <year> 1995. </year> <month> 21 </month>
Reference-contexts: 1 Introduction Groupware systems are becoming increasingly important in organizations to facilitate the collaborative efforts of team projects (e.g., see <ref> [ea93b, EGR91, KP90, KBL93, GM94, GSW92, Wu95] </ref>). Users, often geographically distributed, coordinate on accessing shared data, and some means for concurrency control (CC) is necessary to facilitate their inter-dependent, and sometimes conflicting, manipulation of shared data. <p> In our approach, we indicate how several existing traditional and newly developed techniques may be used to provide the characteristics desired in groupware systems. Experiences of others using several experimental systems (e.g., see <ref> [ea93a, Wu95] </ref>) suggest that our approach may be profitably used in managing concurrent executions in groupware environments. There are several issues regarding concurrency control for groupware, and we consider only a few of them here.
References-found: 31

