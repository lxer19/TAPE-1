URL: http://www.cs.colorado.edu/~zorn/oopsla95/agarwal.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/oopsla95/papers.html
Root-URL: http://www.cs.colorado.edu
Title: High Performance Object/Relational business object mapping: tune the mapping the between business objects and relational
Author: applica 
Date: August 10, 1995 1  
Note: Applications  Optimize  technology has matured and has been widely adopted  tions. These two trends are motivating the need  
Abstract: 1.0 Abstract This paper presents an approach for architect ing OO applications for high performance with relational databases. The key ideas of this approach are: 
Abstract-found: 1
Intro-found: 1
Reference: [Barsalou91] <author> Barsalou, T., Siambela, N., Keller, A. M., and Wiederhold, G., </author> <title> Updating Relational Databases through Object-Based Views, </title> <booktitle> ACM SIGMOD Proceedings , Denver, </booktitle> <publisher> CO, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: This allows developers to take full advantage of relational algebra to hide the physical data model from the object application <ref> [Barsalou91] </ref>. 5.2 Mapping Relationships Relationships between objects map to foreign keys between rows. How each mapping is implemented, however, has a significant impact on the performance and exibility of High Performance Object/Relational Applications August 10, 1995 4 the resulting application.
Reference: [Cattell94] <author> Cattell, R., </author> <title> Object Data Management: Object-Oriented and Extended Relational Database Systems , Addison-Wesley, </title> <address> Menlo Park, California, </address> <note> revised edition, </note> <year> 1994. </year>
Reference-contexts: This section discusses how to enhance performance by using a smart cache on the client side. Intelligent caching of data on the client can signifi cantly reduce the database traffic for an application and provide orders of magnitude performance enhancements <ref> [Cattell94] </ref>. The basic approach to optimizing client object management is to reduce number of database accesses by using the client side cache as much as possible.
Reference: [Gray93] <author> Gray, J., and Reuter, A., </author> <title> Transaction Processing: Concepts And Techniques gan Kaufman, </title> <address> San Mateo, California, </address> <year> 1993. </year>
Reference-contexts: There is however an issue of how to tell if a query can be satisfied fully from cache data. This is related to the High Performance Object/Relational Applications August 10, 1995 7 well-known problem of phantoms <ref> [Gray93] </ref> in databases. There are no simple solutions to the problem in the general case. However, often for specific applications it is possible to assert that the cache contains all the data necessary for the query.
Reference: [Keller85] <author> Keller, A. M., </author> <title> Updating Relational Databases through Views, </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> February, </month> <year> 1985. </year>
Reference-contexts: A more complex mapping can lead to performance penalties. Classes which represent a join between several tables will be expensive to construct and potentially impossible to update <ref> [Keller85] </ref>. Hence, in general, developers should map each class to a single table; more complex objects can always be built up out of simple, table-based classes. Two exceptions to this rule include creating projection objects to minimize network traffic and view objects for decision support.
Reference: [Keller93] <author> Keller, A. M., Agarwal, S. and Jensen, R., </author> <title> Enabling The Integration of Object Applications With Relational Data bases, </title> <booktitle> ACM SIGMOD Proceedings </booktitle>
Reference-contexts: Each of these problems present several interesting issues worthy of discussion (see for example <ref> [Keller93] </ref>). However, this paper focuses primarily on the performance issues for such object-relational applications and presents our experiences with architecting high performance object-rela tional applications. 3.0 Object-Relational Mediators An object-relational application provides an object-oriented interface to relational data. <p> This prevents sending multiple updates for the same object to the database. In the case that the transaction is aborted, no changes need to be sent to the database at all. Client-side caching is also critical for ensuring object data integrity <ref> [Keller93] </ref>. 6.2 Optimizing object navigation Using such an in-memory network, queries which follow foreign key pointers (navigations queries) can be performed fully in the cache once the basic object model information has been retrieved [Keller95].
Reference: [Keller95] <author> Keller, A. M., and Basu, J., </author> <title> A Predicate-based Caching Scheme for Client-Server Database Architectures, </title> <note> to appear in VLDB Journal </note>
Reference-contexts: Client-side caching is also critical for ensuring object data integrity [Keller93]. 6.2 Optimizing object navigation Using such an in-memory network, queries which follow foreign key pointers (navigations queries) can be performed fully in the cache once the basic object model information has been retrieved <ref> [Keller95] </ref>. There is however an issue of how to tell if a query can be satisfied fully from cache data. This is related to the High Performance Object/Relational Applications August 10, 1995 7 well-known problem of phantoms [Gray93] in databases.
Reference: [Nag95] <author> Nag, B., and Zhao, Y., </author> <title> Implementing the 007 Benchmark on Persistence, </title> <type> Masters Thesis, </type> <institution> Computer Sciences Department, University of Wisconsin-Madison, </institution> <year> 1995. </year>
Reference-contexts: The actual performance is greatly dependent on the degree to which the application can take advantage of data stored in the object cache. As <ref> [Nag95] </ref> reported, Persistence offers many of the performance benefits of an OODBMS while retaining the reliability and portability of the underlying relational database. 8.0 Conclusions Developers can achieve high performance building object systems linked to relational databases, provided they make the appropriate trade-offs.
Reference: [Wiederhold92] <author> Wiederhold, G., </author> <booktitle> Mediators in the Architecture of Future Information Systems, IEEE Computer , March 1992. </booktitle>
Reference-contexts: In such applications the application object model is mapped to a relational schema in the underlying database. Typically such applications build or use a mediator for transforming object operations to relational database calls and vice-versa <ref> [Wiederhold92] </ref>. FIGURE 1. Object/relational mediator Architecting Object Applications for High Performance with Relational Databases Shailesh Agarwal Christopher Keene Arthur M.
References-found: 8

