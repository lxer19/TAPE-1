URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/survey-tr.ps.gz
Refering-URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/survey.html
Root-URL: http://www.cs.uiuc.edu
Email: fpankaj, jeffeg@cs.duke.edu  
Title: Geometric Range Searching and Its Relatives  
Author: Pankaj K. Agarwal Jeff Erickson 
Date: September 2, 1997  
Web: http://www.cs.duke.edu/ fpankaj, jeffeg  
Address: Box 90129 Durham, NC 27708-0129  
Affiliation: Center for Geometric Computing Department of Computer Science Duke University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. J. Abel and D. Mark, </author> <title> A comparative analysis of some two-dimensional orderings, </title> <journal> Intl. J. Geographic Informations Systems, </journal> <volume> 4 (1990), </volume> <pages> 21-31. </pages>
Reference-contexts: His results in the plane, under various models of computation, are summarized in Table 1; the preprocessing time of each data structure is O (n log n). If the query rectangles are "three-sided rectangles" of the form [a 1 ; b 1 ] fi <ref> [a 2 ; 1] </ref>, then one can use a priority search tree of size O (n) to answer a planar range-reporting query in time O (log n + k) [208]. <p> Let d; n; m be positive integers with m n. If only m units of storage are available, then the expected query time for a random orthogonal range query in a random set of n points in the unit hypercube <ref> [0; 1] </ref> d is ((log n= log (2m=n)) d1 ) in the semigroup arithmetic model. <p> In general, space-filling curves 5 can be used to define a linear ordering on input points; Hilbert and Morton curves, shown in Figure 2, are the some of the space-filling curves commonly used for this purpose. See <ref> [1, 30, 126, 175] </ref> for a comparison of the performance of various space-filling curves in the context of range searching. <p> The performance of any method that maps higher-dimensional points to a set of points in 5 Formally speaking, a curve R ! <ref> [0; 1] </ref> d is called a space-filling curve if it visits each point of the unit hypercube exactly once. However, the same term often refers to approximations of space-filling curves that visit every point in a cubical lattice, such as the curves drawn in Figure 2. <p> The following theorem is perhaps the most interesting result on lower bounds. Theorem 9 (Chazelle [59]). Let n; m be positive integers such that n m n d , and let S be a random set of points in <ref> [0; 1] </ref> d . If only m units of storage are available, then with high probability, the worst-case query time for a simplex range query in S is (n= p d = 2, or (n=(m 1=d log n)) for d 3, in the semigroup model.
Reference: [2] <author> P. K. Agarwal, </author> <title> Geometric partitioning and its applications, </title> <note> in: Computational Geometry: Papers from the DIMACS special year (J. </note> <editor> E. Goodman, R. Pollack, and W. Steiger, eds.), </editor> <publisher> American Mathematical Society, </publisher> <year> 1991. </year>
Reference-contexts: Moreover, ffi 1 ; : : : ; ffi k can be computed in time O (nr d1 ). This theorem has been successfully applied to many geometric divide-and-conquer algorithms; see <ref> [2, 62, 99, 239] </ref> for a few such instances. Returning to halfspace range searching, suppose that the query halfspace always lies below its bounding hyperplane.
Reference: [3] <author> P. K. Agarwal, </author> <title> Ray shooting and other applications of spanning trees with low stabbing number, </title> <journal> SIAM J. Comput., </journal> <volume> 21 (1992), </volume> <pages> 540-570. </pages>
Reference-contexts: Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K. Agarwal and Jeff Erickson to solve a number of other algorithmic as well as combinatorial problems; see, for example, <ref> [3, 85, 109, 207, 234, 281] </ref>. Matousek and Welzl [206] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [116]. <p> In some cases, by using a more direct approach, we can improve the query time by a polylogarithmic factor. For example, by exploiting some additional properties of input objects and of partition trees, we can modify a segment intersection-searching data structure in some cases to answer ray shooting queries <ref> [3, 85, 149] </ref>. Another approach for answering ray-shooting queries is based on visibility maps. A ray in R d can be represented as a point in R d fi S d1 .
Reference: [4] <author> P. K. Agarwal, B. Aronov, and M. Sharir, </author> <title> Computing envelopes in four dimensions with applications, </title> <booktitle> Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> pp. 348-358. </pages>
Reference-contexts: For example, a segment intersection-detection query for a set of balls in R d , where d 3, can be answered in O (log n) time using O (n d+" ) storage <ref> [4] </ref>. d Objects Problem Size Query Time Source Simple polygons Reporting n (k + 1) log n [164] Lines Reporting m n= p d = 2 Segments Counting m n= p Circles Counting n 2+" log n [15] Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 [7] <p> 2+" log n [15] Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 [7] Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 [8] Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n <ref> [4] </ref> Hyperplanes Counting m n=m 1=d [7] Table 8. Asymptotic upper bounds for segment intersection searching, with polylogarithmic factors omitted. A special case of segment intersection searching, in which the objects are horizontal segments in the plane and query ranges are vertical segments, has been widely studied. <p> Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n <ref> [4] </ref> Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c log n [205] Table 9. Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time.
Reference: [5] <author> P. K. Agarwal, B. Aronov, and S. Suri, </author> <title> Line stabbing bounds in three dimensions, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 267-276. </pages>
Reference-contexts: Hershberger and Suri [164] showed that if S is the boundary of a simple polygon, then a triangulation (using Steiner points) with O (log n) crossing number can be constructed in O (n log n) time. See <ref> [5, 216, 105, 197, 283] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [5] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect. <p> See [5, 216, 105, 197, 283] and the references therein for other ray-shooting results using this approach. Agarwal et al. <ref> [5] </ref> proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [6] <author> P. K. Agarwal, A. Efrat, and M. Sharir, </author> <title> Vertical decomposition of shallow levels in 3-dimensional arrangements and its applications, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 39-50. </pages>
Reference-contexts: Disks Reporting n log n log n + k [16] d = 2 Triangles Counting m n m Fat triangles Reporting n log 2 n log 3 n + k [182] Tarski cells Counting n 2+" log n [71] d = 3 Functions Reporting n 1+" log n + k <ref> [6] </ref> Fat tetrahedra Reporting m n 1+" m Simplices Counting m n d 3 Balls Counting n d+" log n [8] Balls Reporting m n m 1=dd=2e polylog n + k [199] Tarski cells Counting n 2d3+" log n [71] n fl+" log n [8] Table 7. <p> Asymptotic upper bounds for point intersection searching. Agarwal et al. <ref> [6] </ref> extended the approach for dynamic halfspace range searching to answer point-intersection queries amid the graphs of bivariate algebraic functions, each of bounded degree.
Reference: [7] <author> P. K. Agarwal and J. Matousek, </author> <title> Ray shooting and parametric search, </title> <journal> SIAM J. Comput., </journal> <volume> 22 (1993), </volume> <pages> 794-806. </pages>
Reference-contexts: [4]. d Objects Problem Size Query Time Source Simple polygons Reporting n (k + 1) log n [164] Lines Reporting m n= p d = 2 Segments Counting m n= p Circles Counting n 2+" log n [15] Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 <ref> [7] </ref> Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 [8] Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n [4] Hyperplanes Counting m n=m 1=d [7] Table 8. <p> Simple polygons Reporting n (k + 1) log n [164] Lines Reporting m n= p d = 2 Segments Counting m n= p Circles Counting n 2+" log n [15] Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 <ref> [7] </ref> Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 [8] Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n [4] Hyperplanes Counting m n=m 1=d [7] Table 8. Asymptotic upper bounds for segment intersection searching, with polylogarithmic factors omitted. <p> Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 <ref> [7] </ref> Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 [8] Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n [4] Hyperplanes Counting m n=m 1=d [7] Table 8. Asymptotic upper bounds for segment intersection searching, with polylogarithmic factors omitted. A special case of segment intersection searching, in which the objects are horizontal segments in the plane and query ranges are vertical segments, has been widely studied. <p> Recently, efficient solutions to many other geometric problems have also been developed using ray-shooting data structures. A general approach to the ray-shooting problem, using segment intersection-detection structures and Megiddo's parametric searching technique [210], was proposed by Agarwal and Matousek <ref> [7] </ref>. Suppose we have a segment intersection-detection data structure for S. Let be a query ray. Their algorithm maintains a segment ab such that the first intersection point of ab with S is the same as that of . If a lies on an object of S, it returns a. <p> s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 <ref> [7] </ref> Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c log n [205] Table 9. <p> polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 <ref> [7] </ref> Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c log n [205] Table 9. Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time. <p> n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c <ref> [7, 205] </ref> Convex polytope n bd=2c log n [205] Table 9. Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time. Goodrich and Tamassia [143] have developed a dynamic ray-shooting data structure for connected planar subdivisions, with O (log 2 n) query and update time. <p> In general, if we have an efficient data structure for answering disk-emptiness queries for disks under a given metric , we can apply parametric searching to answer nearest-neighbor queries under the -metric, provided the data structure satisfies certain mild assumptions <ref> [7] </ref>. Note that the query time of the above approach is exponential in d, so it is impractical even for moderate values of d (say d 10).
Reference: [8] <author> P. K. Agarwal and J. Matousek, </author> <title> On range searching with semialgebraic sets, </title> <journal> Discrete Comput. Geom., </journal> <volume> 11 (1994), </volume> <pages> 393-418. </pages>
Reference-contexts: If the points in S lie on a k-dimensional algebraic surface of constant degree, the crossing number in Theorem 3 can be improved to O (r 11=fl ), where fl = 1=b (d + k)=2c <ref> [8] </ref>, which implies that in this case a simplex range query can be answered in time O (n 11=fl+" ) using linear space. Finally, we note that better bounds can be obtained for the halfspace range-reporting problem, using the so-called filtering search technique introduced by Chazelle [55]. <p> The constant ` is called the dimension of the linearization. The following algorithm, based on an algorithm of Agarwal and Matousek <ref> [8] </ref>, computes a linearization of smallest dimension. 7 Write the polynomial f (a; x) as the sum of monomials f (a; x) = 2M -2N where M N b and N N d are finite sets of exponent vectors, c ;- are real coefficients, and a and x are shorthand for <p> Using results of Aronov et al. [23] on the size of the zone of an algebraic variety in a k-dimensional hyperplane arrangement, Agarwal and Matousek <ref> [8] </ref> show that the query time for a linear-space data structure can be reduced to O (n 11=b (d+`)=2c+" ). <p> In cases where the linearization dimension is very large, semialgebraic queries can also be answered using the following more direct approach proposed by Agarwal and Matousek <ref> [8] </ref>. Let S be a set of n points in R d . For each point p i , we can define a b-variate polynomial g i (a) f (p i ; a). <p> Using Theorem 11, Agarwal and Matousek <ref> [8] </ref> also extended Theorem 3 to Tarski cells and showed how to construct partition trees using this extension, obtaining a linear-size data structure with query time O (n 11=fl+" ), where fl = 2 if d = 2 and fl = 2d 3 if d 3. <p> Once again, we can obtain a space-time tradeoff, similar to Theorem 12. Table 7 gives some of the specific bounds that can be attained using this general scheme. d Objects Problem Size Query Time Source Disks Counting m (n 4=3 =m 2=3 ) log (m=n) <ref> [8] </ref> Disks Reporting n log n log n + k [16] d = 2 Triangles Counting m n m Fat triangles Reporting n log 2 n log 3 n + k [182] Tarski cells Counting n 2+" log n [71] d = 3 Functions Reporting n 1+" log n + k <p> Reporting n log 2 n log 3 n + k [182] Tarski cells Counting n 2+" log n [71] d = 3 Functions Reporting n 1+" log n + k [6] Fat tetrahedra Reporting m n 1+" m Simplices Counting m n d 3 Balls Counting n d+" log n <ref> [8] </ref> Balls Reporting m n m 1=dd=2e polylog n + k [199] Tarski cells Counting n 2d3+" log n [71] n fl+" log n [8] Table 7. Asymptotic upper bounds for point intersection searching. <p> n 1+" log n + k [6] Fat tetrahedra Reporting m n 1+" m Simplices Counting m n d 3 Balls Counting n d+" log n <ref> [8] </ref> Balls Reporting m n m 1=dd=2e polylog n + k [199] Tarski cells Counting n 2d3+" log n [71] n fl+" log n [8] Table 7. Asymptotic upper bounds for point intersection searching. Agarwal et al. [6] extended the approach for dynamic halfspace range searching to answer point-intersection queries amid the graphs of bivariate algebraic functions, each of bounded degree. <p> [164] Lines Reporting m n= p d = 2 Segments Counting m n= p Circles Counting n 2+" log n [15] Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 [7] Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 <ref> [8] </ref> Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n [4] Hyperplanes Counting m n=m 1=d [7] Table 8. Asymptotic upper bounds for segment intersection searching, with polylogarithmic factors omitted. <p> d = 2 Segments Counting m n= p Circles Counting n 2+" log n [15] Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 [7] Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 <ref> [8] </ref> Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n [4] Hyperplanes Counting m n=m 1=d [7] Table 8. Asymptotic upper bounds for segment intersection searching, with polylogarithmic factors omitted. <p> p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 <ref> [8] </ref> Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c log n [205] Table 9.
Reference: [9] <author> P. K. Agarwal and J. Matousek, </author> <title> Dynamic half-space range reporting and its applications, </title> <journal> Algorithmica, </journal> <volume> 13 (1995), </volume> <pages> 325-345. </pages>
Reference-contexts: Asymptotic upper bounds for dynamic 2D orthogonal range-searching. and Matousek <ref> [9] </ref> developed a rather sophisticated data structure that can insert or delete a point in time O (n bd=2c1+" ) time and can answer a query in O (log n + k) time.
Reference: [10] <author> P. K. Agarwal and M. Sharir, </author> <title> Applications of a new space partitioning technique, </title> <journal> Discrete Comput. Geom., </journal> <month> 9 </month> <year> (1993), </year> <month> 11-38. </month> <title> Geometric Range Searching and Its Relatives 49 </title>
Reference-contexts: By combining these two types of data structures, a tradeoff between the size and the query time can be obtained <ref> [10, 82, 203] </ref>. Actually, the approach described in these papers is very general and works for any geometric-searching data structure that can be viewed as a decomposition scheme (described in Section 2), provided it satisfies certain assumptions. <p> The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries. Since their result, several papers have exploited and extended this property to solve numerous geometric-searching problems; see <ref> [10, 149, 274, 203, 238] </ref>. In this subsection we briefly sketch the general cascading scheme, as described in [203]. Let S be a set of weighted objects. Recall that a geometric-searching problem P, with underlying relation , requires computing P pfl w (p) for a query range fl. <p> Although the above technique does not handle deletions, many range-searching data structures, such as orthogonal and simplex range-searching structures, can handle deletions at polylogarithmic or n " overhead in query and update time, by exploiting the fact that a point is stored at roughly S (n)=n nodes <ref> [10] </ref>. Table 6 summarizes the known results on dynamic 2D orthogonal range-searching data structures; these results can be extended to higher dimensions at a cost of an additional log d2 n factor in the storage, query time, and update time.
Reference: [11] <author> P. K. Agarwal and M. Sharir, </author> <title> Ray shooting amidst convex polygons in 2D, </title> <journal> J. Algorithms, </journal> <volume> 21 (1996), </volume> <pages> 508-519. </pages>
Reference-contexts: Geometric Range Searching and Its Relatives 45 d Objects Size Query Time Source Simple polygon n log n [164] s disjoint simple polygons n p s disjoint simple polygons (s 2 + n) log s log s log n <ref> [11] </ref> d = 2 s disjoint convex polygons s 2 + n log n [241] s convex polygons sn log s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n <p> polygon n log n [164] s disjoint simple polygons n p s disjoint simple polygons (s 2 + n) log s log s log n <ref> [11] </ref> d = 2 s disjoint convex polygons s 2 + n log n [241] s convex polygons sn log s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles
Reference: [12] <author> P. K. Agarwal and M. Sharir, </author> <title> Ray shooting amidst convex polyhedra and polyhedral terrains in three dimensions, </title> <journal> SIAM J. Comput., </journal> <volume> 25 (1996), </volume> <pages> 100-116. </pages>
Reference-contexts: log n [241] s convex polygons sn log s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n <ref> [12] </ref> d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c
Reference: [13] <author> P. K. Agarwal, M. Sharir, and S. Toledo, </author> <title> Applications of parametric searching in geometric optimization, </title> <journal> J. Algorithms, </journal> <volume> 17 (1994), </volume> <pages> 292-318. </pages>
Reference-contexts: Besides the motion-planning application discussed above, point location in an arrangement of surfaces, especially determining whether a query point lies above a given set of regions of the form x d+1 f (x 1 ; : : : ; x d ), has many other applications in computational geometry; see <ref> [13, 71, 72] </ref> for examples.
Reference: [14] <author> P. K. Agarwal and M. van Kreveld, </author> <title> Polygon and connected component intersection searching, </title> <journal> Algorithmica, </journal> <volume> 15 (1996), </volume> <pages> 626-660. </pages>
Reference-contexts: Thus, logarithmic query-time intersection-searching data structures can easily be modified for colored intersection reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [14, 50, 153, 154, 155, 176] </ref>. Gupta et al. [153] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Gupta et al. [153] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. Agarwal and van Kreveld <ref> [14] </ref> presented a linear-size data structure with O (n 1=2+" + k) query time for colored segment intersection-reporting queries amid a set of segments in the plane, assuming that the segments of the same color form a connected planar graph, or if they form the boundary of a simple polygon; these
Reference: [15] <author> P. K. Agarwal, M. van Kreveld, and M. Overmars, </author> <title> Intersection queries in curved objects, </title> <journal> J. Algorithms, </journal> <volume> 15 (1993), </volume> <pages> 229-266. </pages>
Reference-contexts: This observation not only simplifies the data structure but also gives better bounds in many cases, including halfspace range reporting. See <ref> [15, 55, 66, 79] </ref> for some applications of filtering search. An optimal halfspace reporting data structure in the plane was proposed by Chazelle et al. [78]. <p> be answered in O (log n) time using O (n d+" ) storage [4]. d Objects Problem Size Query Time Source Simple polygons Reporting n (k + 1) log n [164] Lines Reporting m n= p d = 2 Segments Counting m n= p Circles Counting n 2+" log n <ref> [15] </ref> Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 [7] Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 [8] Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n [4] Hyperplanes Counting m <p> using O (n d+" ) storage [4]. d Objects Problem Size Query Time Source Simple polygons Reporting n (k + 1) log n [164] Lines Reporting m n= p d = 2 Segments Counting m n= p Circles Counting n 2+" log n <ref> [15] </ref> Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 [7] Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 [8] Spheres Counting m n=m 1=4 [8] Spheres Reporting n 3+" (k + 1) log 2 n [4] Hyperplanes Counting m n=m 1=d [7] Table 8. <p> p s disjoint simple polygons (s 2 + n) log s log s log n [11] d = 2 s disjoint convex polygons s 2 + n log n [241] s convex polygons sn log s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 <ref> [15] </ref> Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n
Reference: [16] <author> A. Aggarwal, M. Hansen, and T. Leighton, </author> <title> Solving query-retrieval problems by compacting Voronoi diagrams, </title> <booktitle> Proc. 22nd Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1990, </year> <pages> pp. 331-340. </pages>
Reference-contexts: Their technique does not extend to three dimensions. After a few initial attempts <ref> [79, 16] </ref>, Matousek developed a data structure that answers a halfspace reporting query in R d in time O (n 11=bd=2c polylog n+k). His structure is based on the following two observations. <p> Problem d Size Query Time Source Reporting d = 2 n log n + k [78] Emptiness n log n [242] Reporting d = 3 n log n log n + k <ref> [16] </ref> Emptiness n log n [103] Reporting d &gt; 3 n log log n n 11=bd=2c polylog n + k [199] Emptiness n n 11=bd=2c 2 O (log fl n) [199] Table 3. Asymptotic upper bounds for halfspace range searching in near-linear space. <p> Table 7 gives some of the specific bounds that can be attained using this general scheme. d Objects Problem Size Query Time Source Disks Counting m (n 4=3 =m 2=3 ) log (m=n) [8] Disks Reporting n log n log n + k <ref> [16] </ref> d = 2 Triangles Counting m n m Fat triangles Reporting n log 2 n log 3 n + k [182] Tarski cells Counting n 2+" log n [71] d = 3 Functions Reporting n 1+" log n + k [6] Fat tetrahedra Reporting m n 1+" m Simplices Counting
Reference: [17] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: Finally, we review data structures for intersection searching and optimization queries in Sections 6 and 7, respectively. 2 Models of Computation Most algorithms and data structures in computational geometry are implicitly described in the familiar random access machine (RAM) model, described in <ref> [17] </ref>, or the real RAM model described by Preparata and Shamos [242]. In the traditional RAM model, memory cells can contain arbitrary (log n)-bit integers, which can be added, multiplied, subtracted, divided (computing bx=yc), compared, and used as pointers to other memory cells in constant time.
Reference: [18] <author> A. Andersson and K. Swanson, </author> <title> On the difficulty of range searching, </title> <booktitle> Proc. 4th Workshop Algorithms Data Struct., Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 955, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 473-481. </pages>
Reference-contexts: A rather surprising result of Chazelle [60] shows that any data structure on a basic pointer machine that answers a d-dimensional range-reporting query in O (polylog n + k) time must have size (n (log n= log log n) d1 ); see also <ref> [18] </ref>. Notice that this lower bound is greater than the O (n log d2+" n) upper bound in the RAM model (see Table 1).
Reference: [19] <author> M. Anthony and N. Biggs, </author> <title> Computational Learning Theory, </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1992. </year>
Reference-contexts: Theorem 2 and some other similar results [88, 92] have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan [218], Mulmuley [223], and Anthony and Biggs <ref> [19] </ref> and the survey papers [90, 200, 256]. The first linear-size data structure with near-optimal query time for simplex range queries in the plane was developed by Welzl [280]. His algorithm is based on the following idea.
Reference: [20] <author> L. Arge, </author> <title> The Buffer Tree: A new technique for optimal I/O-algorithms, </title> <booktitle> Proc. 4th Workshop Algorithms Data Struct., number 955 in Lecture Notes Comput. Sci., </booktitle> <year> 1995, </year> <pages> pp. 334-345. </pages>
Reference-contexts: The main idea underlying these structures is to construct high-degree trees instead of binary trees. For example, variants of B-trees are used to answer 1-dimensional range-searching queries [35, 96]. A number of additional tricks are developed to optimize the size and the query time. See <ref> [20, 21, 232] </ref> for I/O efficient data structures that have been used for answering range searching and related queries. Table 2 summarizes the known results on secondary-memory structures for orthogonal range searching.
Reference: [21] <author> L. Arge and J. S. Vitter, </author> <title> Optimal interval management in external memory, </title> <booktitle> Proc. 37th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <month> October </month> <year> 1996, </year> <pages> pp. 560-569. </pages>
Reference-contexts: The main idea underlying these structures is to construct high-degree trees instead of binary trees. For example, variants of B-trees are used to answer 1-dimensional range-searching queries [35, 96]. A number of additional tricks are developed to optimize the size and the query time. See <ref> [20, 21, 232] </ref> for I/O efficient data structures that have been used for answering range searching and related queries. Table 2 summarizes the known results on secondary-memory structures for orthogonal range searching.
Reference: [22] <author> B. Aronov and S. Fortune, </author> <title> Average-case ray shooting and minimum weight triangulation, </title> <booktitle> Proc. 23th Annu. Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1997, </year> <pages> pp. 203-211. </pages>
Reference-contexts: For example, they show that the crossing number for a set of k disjoint convex polyhedra in R 3 is (k + log n), and they present an algorithm that constructs a triangulation of size O (nk log n) with stabbing number O (k log n). Aronov and Fortune <ref> [22] </ref> prove a bound on the average crossing number of set of disjoint triangles in R 3 , and present a polynomial-time algorithm to construct a triangulation that achieves this bound. In practice, however, very simple decompositions, such as oct-trees and binary 46 Pankaj K.
Reference: [23] <author> B. Aronov, M. Pellegrini, and M. Sharir, </author> <title> On the zone of a surface in a hyperplane arrangement, </title> <journal> Discrete Comput. Geom., </journal> <volume> 9 (1993), </volume> <pages> 177-186. </pages>
Reference-contexts: When d &lt; `, the performance of the linear-size data structures can be improved by exploiting the fact that the points '(x) have only d degrees of freedom. Using results of Aronov et al. <ref> [23] </ref> on the size of the zone of an algebraic variety in a k-dimensional hyperplane arrangement, Agarwal and Matousek [8] show that the query time for a linear-space data structure can be reduced to O (n 11=b (d+`)=2c+" ).
Reference: [24] <author> S. Arya, D. Mount, and O. Narayan, </author> <title> Accounting for boundary effects in nearest neighbor searching, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 336-344. </pages>
Reference-contexts: For large input sets, one desires an algorithm that minimizes the number of disk accesses. Many of the heuristics mentioned above try to optimize the I/O efficiency, though none of them gives any performance guarantee. A few recent papers <ref> [24, 46, 236, 93] </ref> analyze the efficiency of some of the heuristics, under certain assumptions on the input. 7.3 Linear programming queries Let S be a set of n halfspaces in R d .
Reference: [25] <author> S. Arya and D. M. Mount, </author> <title> Algorithms for fast vector quantization, Data Compression Conference, </title> <publisher> IEEE Press, </publisher> <year> 1993, </year> <pages> pp. 381-390. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression <ref> [25, 243] </ref>, information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions.
Reference: [26] <author> S. Arya and D. M. Mount, </author> <title> Approximate nearest neighbor queries in fixed dimensions, </title> <booktitle> Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1993, </year> <pages> pp. 271-280. </pages>
Reference-contexts: Note that the query time of the above approach is exponential in d, so it is impractical even for moderate values of d (say d 10). This has lead to the development of algorithms for finding approximate nearest neighbors <ref> [26, 28, 29, 91, 185, 188] </ref> or for special cases, such as when the distribution of query points is known in advance [87, 296]. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions.
Reference: [27] <author> S. Arya and D. M. Mount, </author> <title> Approximate range searching, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 172-181. </pages> <note> 50 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: Since the query time of a linear-size simplex range-searching data structure is only a n 1=d factor better than the nave method, researchers have developed practical data structures that work well most of the time. For example, Arya and Mount <ref> [27] </ref> have developed a linear-size data structure for answering approximate range-counting queries, in the sense that the points lying within distance ffi diam () distance of the boundary of the query simplex may or may not be counted. Its query time is O (log n + 1=ffi d1 ).
Reference: [28] <author> S. Arya, D. M. Mount, and O. Narayan, </author> <title> Accounting for boundary effects in nearest-neighbor searching, </title> <journal> Discrete Comput. Geom., </journal> <volume> 16 (1996), </volume> <pages> 155-176. </pages>
Reference-contexts: Note that the query time of the above approach is exponential in d, so it is impractical even for moderate values of d (say d 10). This has lead to the development of algorithms for finding approximate nearest neighbors <ref> [26, 28, 29, 91, 185, 188] </ref> or for special cases, such as when the distribution of query points is known in advance [87, 296]. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions.
Reference: [29] <author> S. Arya, D. M. Mount, N. S. Netanyahu, R. Silverman, and A. Wu, </author> <title> An optimal algorithm for approximate nearest neighbor searching, </title> <booktitle> Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 573-582. </pages>
Reference-contexts: Note that the query time of the above approach is exponential in d, so it is impractical even for moderate values of d (say d 10). This has lead to the development of algorithms for finding approximate nearest neighbors <ref> [26, 28, 29, 91, 185, 188] </ref> or for special cases, such as when the distribution of query points is known in advance [87, 296]. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions.
Reference: [30] <author> T. Asano, T. Roos, P. Widmayer, and E. Welzl, </author> <title> Space filling curves and their use in the design of geometric data structures, </title> <booktitle> Proc. 2nd Latin Amer. Sympos. Theoret. Informatics, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 911, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 36-48. </pages>
Reference-contexts: In general, space-filling curves 5 can be used to define a linear ordering on input points; Hilbert and Morton curves, shown in Figure 2, are the some of the space-filling curves commonly used for this purpose. See <ref> [1, 30, 126, 175] </ref> for a comparison of the performance of various space-filling curves in the context of range searching.
Reference: [31] <author> D. Avis, </author> <title> Non-partitionable point sets, </title> <journal> Inform. Process. Lett., </journal> <volume> 19 (1984), </volume> <pages> 125-129. </pages>
Reference-contexts: Using the Borsuk-Ulam theorem, Yao et al. [295] showed that, given a set S of n points in R 3 , one can find three planes so that each of the eight (open) octants determined by them contains at most bn=8c points of S. Avis <ref> [31] </ref> proved that such a partition of R d by d hyperplanes is not always possible for d 5; the problem is still open for d = 4. Weaker partitioning schemes were proposed in [94, 293].
Reference: [32] <author> D. H. Ballard, </author> <title> Strip trees: A hierarchical representation for curves, </title> <journal> Commun. ACM, </journal> <volume> 24 (1981), </volume> <pages> 310-321. </pages>
Reference-contexts: If the polygons in S are large, then this scheme is not efficient, especially if we want to clip the query output within the query rectangle. A few data structures, for example, strip trees <ref> [32] </ref> and V-trees [209], have been proposed that store each polygon hierarchically. We can use these data structures to store each polygon and then construct an R-tree or any other orthogonal range-searching data structure on the smallest enclosing rectangles of the polygons.
Reference: [33] <author> R. Bar-Yehuda and S. Fogel, </author> <title> Partitioning a sequence into few monotone subsequences, </title> <type> Technical Report 640, </type> <institution> Technion IIT, Haifa, Israel, </institution> <year> 1990. </year>
Reference-contexts: The existence of such a partition of X follows from the result by Erd-os and Szekeres, but the best known algorithm for computing such a partition runs in time O (n 3=2 ) <ref> [33] </ref>. However, a longest monotonically increasing subsequence of X can be computed in O (n log n) time. The technique by Matousek and Welzl has also been applied to solve some other geometric-searching problems, including ray shooting and intersection searching [34].
Reference: [34] <author> R. Bar-Yehuda and S. Fogel, </author> <title> Variations on ray shooting, </title> <journal> Algorithmica, </journal> <volume> 11 (1994), </volume> <pages> 133-145. </pages>
Reference-contexts: However, a longest monotonically increasing subsequence of X can be computed in O (n log n) time. The technique by Matousek and Welzl has also been applied to solve some other geometric-searching problems, including ray shooting and intersection searching <ref> [34] </ref>. The first data structure with roughly n 11=d query time and near-linear space, for d &gt; 3, was obtained by Chazelle et al. [82].
Reference: [35] <author> R. Bayer and McCreight, </author> <title> Organization of large ordered indexes, </title> <journal> Acta Inform., </journal> <volume> 1 (1972), </volume> <pages> 173-189. </pages>
Reference-contexts: I/O-efficient orthogonal range-searching structures have received much attention recently, but most of the results are known only for the planar case. The main idea underlying these structures is to construct high-degree trees instead of binary trees. For example, variants of B-trees are used to answer 1-dimensional range-searching queries <ref> [35, 96] </ref>. A number of additional tricks are developed to optimize the size and the query time. See [20, 21, 232] for I/O efficient data structures that have been used for answering range searching and related queries. Table 2 summarizes the known results on secondary-memory structures for orthogonal range searching. <p> applications, its size should be at most cn, where c is a very small constant, the time to answer a typical query should be small | the lower Geometric Range Searching and Its Relatives 13 d Range Size Query Time Source d = 1 Interval N Log n + k=B <ref> [35, 96] </ref> Quadrant N log log B Log n + k=B [244] 3-sided rectangle N Log n + k=B + log fl B [270] d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B <p> The book by Samet [251] is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers [145, 156, 169, 226, 227]. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants <ref> [35, 96] </ref>. Since a B-tree requires a linear order on the input elements, one needs to define such an ordering on points in higher dimensions in order to store them into a B-tree.
Reference: [36] <author> B. Becker, H. Six, and P. Widmayer, </author> <title> Spatial priority search: An access technique for scaleless maps, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1991, </year> <pages> pp. 128-138. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120].
Reference: [37] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger, </author> <title> The R fl -tree: An efficient and robust access method for points and rectangles, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1990, </year> <pages> pp. 322-331. </pages>
Reference-contexts: Although allowing rectangles to overlap helps reduce the size of the data structure, answering a query becomes more expensive. Guttman suggests some heuristics to construct a R-tree so that the overlap is minimized. Better heuristics for minimizing the overlap were developed by Beckmann et al. <ref> [37] </ref>, Green [145], and Kamal and Faloutsos [177, 178, 179]. There are many variants of R-tree, depending on the application: an R fl -tree [37] uses more sophisticated techniques to minimize the overlap; a Hilbert-R-tree [179] defines a linear ordering on the rectangles, by sorting their centers along the Hilbert space-filling <p> Better heuristics for minimizing the overlap were developed by Beckmann et al. <ref> [37] </ref>, Green [145], and Kamal and Faloutsos [177, 178, 179]. There are many variants of R-tree, depending on the application: an R fl -tree [37] uses more sophisticated techniques to minimize the overlap; a Hilbert-R-tree [179] defines a linear ordering on the rectangles, by sorting their centers along the Hilbert space-filling curve, and constructs a B Geometric Range Searching and Its Relatives 19 tree based on this ordering of rectangles; and an R + -tree
Reference: [38] <author> A. M. Ben-Amram, </author> <title> Lower bounds on algebraic random access machines, </title> <booktitle> Proc. 22nd Internat. Colloq. Automata Lang. Prog., Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 944, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 360-371. </pages>
Reference-contexts: ffi; p requires (log n) time to answer any reasonable range query, or (n log n) time to solve any reasonable o*ine range searching problem, since such a circuit can be modeled as an algebraic computation tree with no branches [40] or as a straight-line program on a real RAM <ref> [38] </ref>. (Computation trees with more general functions are considered in [147].) Almost all geometric range-searching data structures are constructed by subdividing space into several regions with nice properties and recursively constructing a data structure for each region.
Reference: [39] <author> A. M. Ben-Amram, </author> <title> What is a "pointer machine"?, </title> <journal> SIGACT News, </journal> <volume> 26 (1995), </volume> <pages> 88-95. </pages>
Reference-contexts: The query time ignores the cost of various auxiliary operations, including the cost 3 Several very different models of computation with the name "pointer machine" have been proposed; these are surveyed by Ben-Amram <ref> [39] </ref>, who suggests the less ambiguous term pointer algorithm for the model we describe. Geometric Range Searching and Its Relatives 5 of determining which of the precomputed sums should be added to answer a query.
Reference: [40] <author> M. Ben-Or, </author> <title> Lower bounds for algebraic computation trees, </title> <booktitle> Proc. 15th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1983, </year> <pages> pp. 80-86. </pages>
Reference-contexts: result is that any circuit with operations +; ; fi; ffi; p requires (log n) time to answer any reasonable range query, or (n log n) time to solve any reasonable o*ine range searching problem, since such a circuit can be modeled as an algebraic computation tree with no branches <ref> [40] </ref> or as a straight-line program on a real RAM [38]. (Computation trees with more general functions are considered in [147].) Almost all geometric range-searching data structures are constructed by subdividing space into several regions with nice properties and recursively constructing a data structure for each region. <p> Agarwal and Jeff Erickson (n (log n= log log n) d1 ) time in the semigroup model, and (n log log n) time in the group model. An (n log n) lower bound also holds in the algebraic decision tree and algebraic computation tree models <ref> [267, 40] </ref>. 3.3 Secondary memory structures If the input point set is rather large and does not fit into main memory, then the data structure must be stored in secondary memory | on disk, for example | and portions of it must moved into main memory when needed to answer a <p> Asymptotic lower bounds for online simplex range searching using O (m) space. Range Problem Model Time Source Halfspace Emptiness Algebraic computation tree n log n <ref> [40] </ref> Partition graph (d 4) n log n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, <p> Time Source Halfspace Emptiness Algebraic computation tree n log n <ref> [40] </ref> Partition graph (d 4) n log n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, 118] Simplex Semigroup Semigroup n 22=(d1) [65] Table 5. Asymptotic lower bounds for o*ine simplex range searching.
Reference: [41] <author> J. L. Bentley, </author> <title> Multidimensional binary search trees used for associative searching, </title> <journal> Commun. ACM, </journal> <volume> 18 (1975), </volume> <pages> 509-517. </pages>
Reference-contexts: One can instead partition the enclosing rectangle into two rectangles by drawing a horizontal or a vertical line and partitioning each of the two rectangles independently. This is the idea behind the so called kd-tree due to Bentley <ref> [41] </ref>. In particular, a kd-tree is a binary tree, each of whose nodes v is associated with a rectangle B v . If B v does not contain any point in its interior, v is a leaf.
Reference: [42] <author> J. L. Bentley, </author> <title> Multidimensional divide-and-conquer, </title> <journal> Commun. ACM, </journal> <volume> 23 (1980), </volume> <pages> 214-229. </pages>
Reference-contexts: In this section we review more recent data structures and lower bounds. 3.1 Upper bounds Most of the recent orthogonal range-searching data structures are based on range trees, introduced by Bentley <ref> [42] </ref>. For d = 1, the range tree of S is either a minimum-height binary search tree on S or an array storing S in sorted order.
Reference: [43] <author> J. L. Bentley and J. H. Friedman, </author> <title> Data structures for range searching, </title> <journal> ACM Comput. Surv., </journal> <volume> 11 (1979), </volume> <pages> 397-409. </pages>
Reference-contexts: This is an abstraction of multi-key searching <ref> [43, 289] </ref>, which is a central problem in statistical and commercial databases. For example, the points of S may correspond to employees of a company, each coordinate corresponding to a key such as age, salary, or experience.
Reference: [44] <author> J. L. Bentley and J. B. Saxe, </author> <title> Decomposable searching problems I: Static-to-dynamic transformation, </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <month> 1 </month> <year> (1980), </year> <month> 301-358. </month> <title> Geometric Range Searching and Its Relatives 51 </title>
Reference-contexts: If we allow only insertions (i.e., a point cannot be deleted from the structure), static data structures can be modified using standard techniques <ref> [44, 211, 230] </ref>, so that a point can be inserted in time O (P (n) log n=n) and a query can be answered in time O (Q (n) log n), where Q (n) is the query time of the original static data structure. Roughly speaking, these techniques proceed as follows.
Reference: [45] <author> S. Berchtold, C. Bohm, B. Barunmuller, D. A. Keim, and H.-P. Kriegel, </author> <title> Fast parallel similarity search in multimedia databases, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1997, </year> <pages> pp. 1-12. </pages>
Reference-contexts: White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181]. Berchtold et al. <ref> [45] </ref> present a parallel algorithm for nearest-neighbor searching. For large input sets, one desires an algorithm that minimizes the number of disk accesses. Many of the heuristics mentioned above try to optimize the I/O efficiency, though none of them gives any performance guarantee.
Reference: [46] <author> S. Berchtold, C. Bohm, D. A. Keim, and H.-P. Kriegel, </author> <title> A cost model for nearest neighbor search in high-dimensional data space, </title> <booktitle> Proc. ACM Sympos. Principles of Database Systems, </booktitle> <year> 1997, </year> <pages> pp. 78-86. </pages>
Reference-contexts: For large input sets, one desires an algorithm that minimizes the number of disk accesses. Many of the heuristics mentioned above try to optimize the I/O efficiency, though none of them gives any performance guarantee. A few recent papers <ref> [24, 46, 236, 93] </ref> analyze the efficiency of some of the heuristics, under certain assumptions on the input. 7.3 Linear programming queries Let S be a set of n halfspaces in R d .
Reference: [47] <author> S. Berchtold, D. A. Keim, and H.-P. Kriegel, </author> <title> The X-tree: An index structure for higher dimensional data, </title> <booktitle> Proc. 22th VLDB Conference, </booktitle> <year> 1996, </year> <pages> pp. 28-39. </pages>
Reference-contexts: Additional variants are suggested to avoid overlap in higher dimensions. Berchtold et al. <ref> [47] </ref> define the X-tree, in which the interior nodes are allowed to be arbitrarily large; Lin et al. [194] project rectangles onto a lower dimensional space and construct an R-tree (or some variant thereof) on these projections.
Reference: [48] <author> T. Bially, </author> <title> Space-filling curves: Ttheir generation and their application to bandwidth reduction, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 15 (1969), </volume> <pages> 658-664. </pages>
Reference-contexts: However, the same term often refers to approximations of space-filling curves that visit every point in a cubical lattice, such as the curves drawn in Figure 2. See the book by Sagan [248] for a detailed discussion on space-filling curves and <ref> [48] </ref> for some other applications of these curves. 14 Pankaj K.
Reference: [49] <author> A. Blumer, A. Ehrenfeucht, D. Haussler, and M. Warmuth, </author> <title> Classifying learnable geometric concepts with the Vapnik-Chervonenkis dimension, </title> <journal> J. ACM, </journal> <volume> 36 (1989), </volume> <pages> 929-965. </pages>
Reference-contexts: The bound on the size of "-nets was improved by Blumer et al. <ref> [49] </ref> and Komlos et al. [187]. Theorem 2 (Komlos et al. [187]).
Reference: [50] <author> P. Bozanis, N. Ktsios, C. Makris, and A. Tsakalidis, </author> <title> New upper bounds for generalized intersection searching problems, </title> <booktitle> Proc. 22nd Inter. Colloq. Auto. Lang. Program., Lecture Notes in Computer Science, </booktitle> <volume> Vol. 944, </volume> <year> 1995, </year> <pages> pp. 464-475. </pages>
Reference-contexts: Thus, logarithmic query-time intersection-searching data structures can easily be modified for colored intersection reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [14, 50, 153, 154, 155, 176] </ref>. Gupta et al. [153] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space.
Reference: [51] <author> P. Bozanis, N. Ktsios, C. Makris, and A. Tsakalidis, </author> <title> New results on intersection query problems, </title> <type> unpublished manuscript, </type> <year> 1996. </year>
Reference-contexts: For d 3, Subramanian and Ramaswamy [270] have proposed a data structure that can answer a range-reporting query in time O (log d2 n log fl n + k) using O (n log d1 n) space, and Bozanis et al. <ref> [51] </ref> have proposed an a data structure with O (n log d n) size and O (log d2 n+k) query time.
Reference: [52] <author> H. Bronnimann, B. Chazelle, and J. Pach, </author> <title> How hard is halfspace range searching, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 143-155. </pages>
Reference-contexts: Chazelle and Rosenberg [81] proved a lower bound of (n 1" =m + k) for simplex range reporting under the pointer-machine model. These lower bounds do not hold for halfspace range searching. A somewhat weaker lower bound for halfspace queries was proved by Bronnimannet al. <ref> [52] </ref>. As we saw earlier, faster data structures are known for halfspace emptiness queries. A recent series of papers by Erickson established the first nontrivial lower bounds for online and o*ine emptiness query problems, in the partition-graph model of computation.
Reference: [53] <author> P. Burgisser, M. Clausen, and M. A. Shokrollahi, </author> <title> Algebraic Complexity Theory, </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Of course it is natural to consider arithmetic circuits which also allow multiplication ("the ring model"), division ("the field model"), or even more general functions such as square roots or exponentiation. There is a substantial body of literature on the complexity of various types of arithmetic circuits <ref> [278, 269, 53] </ref>, but almost nothing is known about the complexity of geometric range searching in these models.
Reference: [54] <author> T. M. Chan, </author> <title> Fixed-dimensional linear programming queries made easy, </title> <booktitle> Proc. 12th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1996, </year> <pages> pp. 284-290. </pages>
Reference-contexts: For higher dimensions, Matousek [201] showed that, using multidimensional parametric searching and a data structure for answering halfspace emptiness queries, a linear-programming query can be answered in O ((n=m 1=bd=2c ) polylog n) with O (m) storage. Recently Chan <ref> [54] </ref> has described a randomized procedure whose expected query time is n 11=bd=2c 2 O (log fl n) , using linear space. 7.4 Segment dragging queries Preprocess a set S of objects in the plane so that for a query segment e and a ray , the first position at which
Reference: [55] <author> B. Chazelle, </author> <title> Filtering search: A new approach to query-answering, </title> <journal> SIAM J. Comput., </journal> <volume> 15 (1986), </volume> <pages> 703-724. </pages>
Reference-contexts: A range tree can also answer a range-counting query in time O (log d1 n). Range trees are an example of a multi-level data structure, which we will discuss in more detail in Section 5.1. The best-known data structures for orthogonal range searching are by Chazelle <ref> [55, 58] </ref>, who used compressed range trees and other techniques to improve the storage and query time. His results in the plane, under various models of computation, are summarized in Table 1; the preprocessing time of each data structure is O (n log n). <p> Asymptotic upper bounds for planar orthogonal range searching, due to Chazelle <ref> [55, 58] </ref>, in the random access machine (RAM), arithmetic pointer machine (APM), elementary pointer machine (EPM), and semigroup arithmetic models. <p> Finally, we note that better bounds can be obtained for the halfspace range-reporting problem, using the so-called filtering search technique introduced by Chazelle <ref> [55] </ref>. All the data structured mentioned above answer a range-reporting query in two stages. The first stage "identifies" the k points of a query output, in time f (n) that is independent of the output size, and the second stage explicitly reports these points in O (k) time. <p> This observation not only simplifies the data structure but also gives better bounds in many cases, including halfspace range reporting. See <ref> [15, 55, 66, 79] </ref> for some applications of filtering search. An optimal halfspace reporting data structure in the plane was proposed by Chazelle et al. [78].
Reference: [56] <author> B. Chazelle, </author> <title> Computing on a free tree via complexity-preserving mappings, </title> <journal> Algorithmica, </journal> <volume> 2 (1987), </volume> <pages> 337-361. </pages>
Reference-contexts: If points are allowed to insert into S, the query time is (log n= log log n) [130, 292] for the one-dimensional case; the bounds were extended by Chazelle [61] to ((log n= log log n) d ), for any fixed dimension d. Chazelle <ref> [56] </ref> extended the data structure by Yao to the following variant of the partial-sum problem: Let T be a rooted tree with n nodes, each of whose node is associated with an element of a commutative semigroup.
Reference: [57] <author> B. Chazelle, </author> <title> An algorithm for segment-dragging and its implementation, </title> <journal> Algorithmica, </journal> <volume> 3 (1988), </volume> <pages> 205-221. </pages>
Reference-contexts: This query can be answered in O ((n= p m) polylog n) time, with O (m) storage, using segment intersection-searching structures and parametric searching. Chazelle <ref> [57] </ref> gave a linear-size, O (log n) query-time data structure for the special case in which S is a set of points, e is a horizontal segment, and is the vertical direction.
Reference: [58] <author> B. Chazelle, </author> <title> A functional approach to data structures and its use in multidimensional searching, </title> <journal> SIAM J. Comput., </journal> <volume> 17 (1988), </volume> <pages> 427-462. </pages>
Reference-contexts: The query time ignores the cost of other operations, including the cost of deciding which edges to traverse. There is no notion of preprocessing or update time in this model. Note that the model accommodates both static and self-adjusting data structures. Chazelle <ref> [58] </ref> defines several generalizations of the pointer-machine model that are more appropriate for answering counting and semigroup queries. In Chazelle's generalized pointer-machine models, nodes are labeled with arbitrary O (log n)-bit integers. <p> A range tree can also answer a range-counting query in time O (log d1 n). Range trees are an example of a multi-level data structure, which we will discuss in more detail in Section 5.1. The best-known data structures for orthogonal range searching are by Chazelle <ref> [55, 58] </ref>, who used compressed range trees and other techniques to improve the storage and query time. His results in the plane, under various models of computation, are summarized in Table 1; the preprocessing time of each data structure is O (n log n). <p> Asymptotic upper bounds for planar orthogonal range searching, due to Chazelle <ref> [55, 58] </ref>, in the random access machine (RAM), arithmetic pointer machine (APM), elementary pointer machine (EPM), and semigroup arithmetic models. <p> Rectangle-rectangle searching is central to many applications because, in practice, polygonal objects are approximated by rectangles. Chazelle <ref> [58] </ref> has shown that the bounds mentioned in Table 1 also hold for this problem. In practice, two general approaches are used to answer a query. <p> Agarwal 38 Pankaj K. Agarwal and Jeff Erickson Problem Size Query Time Update Time Source Counting n log 2 n log 2 n <ref> [58] </ref> n k log 2 (2n=k) log 2 n [58] Reporting n log n log n log log n + k log n log log n [212] n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [58] Table 6. <p> Agarwal 38 Pankaj K. Agarwal and Jeff Erickson Problem Size Query Time Update Time Source Counting n log 2 n log 2 n <ref> [58] </ref> n k log 2 (2n=k) log 2 n [58] Reporting n log n log n log log n + k log n log log n [212] n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [58] Table 6. <p> n log 2 n <ref> [58] </ref> n k log 2 (2n=k) log 2 n [58] Reporting n log n log n log log n + k log n log log n [212] n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [58] Table 6. Asymptotic upper bounds for dynamic 2D orthogonal range-searching. and Matousek [9] developed a rather sophisticated data structure that can insert or delete a point in time O (n bd=2c1+" ) time and can answer a query in O (log n + k) time.
Reference: [59] <author> B. Chazelle, </author> <title> Lower bounds on the complexity of polytope range searching, </title> <journal> J. Amer. Math. Soc., </journal> <volume> 2 (1989), </volume> <pages> 637-666. </pages>
Reference-contexts: His technique, however, does not extend to static data structures. In a series of papers, Chazelle has proved nontrivial lower bounds on the complexity of online simplex range searching, using various elegant mathematical techniques. The following theorem is perhaps the most interesting result on lower bounds. Theorem 9 (Chazelle <ref> [59] </ref>). Let n; m be positive integers such that n m n d , and let S be a random set of points in [0; 1] d . <p> Agarwal and Jeff Erickson Range Problem Model Query Time Source Simplex Semigroup Semigroup (d = 2) n m Semigroup Semigroup (d &gt; 2) n <ref> [59] </ref> Reporting Pointer machine n 1" Hyperplane Semigroup Semigroup n 2=(d+1) Emptiness Partition graph log n d 2 +d 1 Halfspace Semigroup Semigroup log n d 2 +d 1 Emptiness Partition graph log n ffi 2 +ffi 1 m 1=ffi , where d ffi (ffi + 3)=2 [119] Table 4.
Reference: [60] <author> B. Chazelle, </author> <title> Lower bounds for orthogonal range searching, I: The reporting case, </title> <journal> J. ACM, </journal> <volume> 37 (1990), </volume> <pages> 200-212. </pages>
Reference-contexts: A rather surprising result of Chazelle <ref> [60] </ref> shows that any data structure on a basic pointer machine that answers a d-dimensional range-reporting query in O (polylog n + k) time must have size (n (log n= log log n) d1 ); see also [18]. <p> Table 2 summarizes the known results on secondary-memory structures for orthogonal range searching. The data structure by Subramanian and Ramaswamy [270] for 3-sided queries supports insertion/deletion of a point in time O (Log n + (Log 2 n)=B). Using the argument by Chazelle <ref> [60] </ref>, they proved that any secondary-memory data structure that answers a range-reporting query using O (polyLog n + k=B) I/O operations requires (N log N= log Log n) storage.
Reference: [61] <author> B. Chazelle, </author> <title> Lower bounds for orthogonal range searching, II: The arithmetic model, </title> <journal> J. ACM, </journal> <volume> 37 (1990), </volume> <pages> 439-463. </pages> <note> 52 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: In the semigroup arithmetic model, a query can be answered in time O ((log n= log (m=n)) d1 ) using a data structure of size m, for any m = (n log d1+" n) <ref> [61] </ref>. Geometric Range Searching and Its Relatives 11 Willard [288] proposed a data structure of size O (n log d1 n= log log n), based on fusion trees, that can answer an orthogonal range-reporting query in time O (log d1 n= log log n + k). <p> He showed that if only m units of storage is available, a query takes (log n= log ((m=n) log n)) in the worst case. Vaidya [272] proved lower bounds for orthogonal range searching in higher dimensions, which were later improved by Chazelle <ref> [61] </ref>. In particular, Chazelle proved the following strong result about the average-case complexity of orthogonal range searching: Theorem 1 (Chazelle [61]). Let d; n; m be positive integers with m n. <p> Vaidya [272] proved lower bounds for orthogonal range searching in higher dimensions, which were later improved by Chazelle <ref> [61] </ref>. In particular, Chazelle proved the following strong result about the average-case complexity of orthogonal range searching: Theorem 1 (Chazelle [61]). Let d; n; m be positive integers with m n. <p> They also showed that the o*ine version takes (n + mff (m; n)) time for any fixed d 1. If points are allowed to insert into S, the query time is (log n= log log n) [130, 292] for the one-dimensional case; the bounds were extended by Chazelle <ref> [61] </ref> to ((log n= log log n) d ), for any fixed dimension d.
Reference: [62] <author> B. Chazelle, </author> <title> Cutting hyperplanes for divide-and-conquer, </title> <journal> Discrete Comput. Geom., </journal> <volume> 9 (1993), </volume> <pages> 145-158. </pages>
Reference-contexts: Chazelle and Friedman [74] improved the size bound to O (r d ), which is optimal in the worst case. Several efficient algorithms are developed for computing a (1=r)-cutting. The best algorithm known for computing a (1=r)-cutting was discovered by Chazelle <ref> [62] </ref>; his result is summarized in the following theorem. Theorem 5 (Chazelle [62]). Let H be a set of n hyperplanes and r n a parameter. Set k = dlog 2 re. <p> Several efficient algorithms are developed for computing a (1=r)-cutting. The best algorithm known for computing a (1=r)-cutting was discovered by Chazelle <ref> [62] </ref>; his result is summarized in the following theorem. Theorem 5 (Chazelle [62]). Let H be a set of n hyperplanes and r n a parameter. Set k = dlog 2 re. <p> Moreover, ffi 1 ; : : : ; ffi k can be computed in time O (nr d1 ). This theorem has been successfully applied to many geometric divide-and-conquer algorithms; see <ref> [2, 62, 99, 239] </ref> for a few such instances. Returning to halfspace range searching, suppose that the query halfspace always lies below its bounding hyperplane. <p> Thus, for counting queries, we immediately obtain a linear-size data structure with query time O (n 11=` ) [203], or a data structure of size O (n ` = log ` n) with logarithmic query time <ref> [62] </ref>. When d &lt; `, the performance of the linear-size data structures can be improved by exploiting the fact that the points '(x) have only d degrees of freedom.
Reference: [63] <author> B. Chazelle, </author> <title> Computational geometry: A retrospective, </title> <booktitle> Proc. 26th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1994, </year> <pages> pp. 75-94. </pages>
Reference-contexts: Lower bounds for emptiness problems apply to counting and reporting problems as well. No nontrivial lower bound was known for any o*ine range searching problem under the group model until Chazelle's result [64]. See the survey papers <ref> [63, 204] </ref> for a more detailed discussion on lower bounds. 5 Variants and Extensions In this section we review some extensions of range-searching data structures, including multi-level data structures, semialgebraic range searching, and dynamization. <p> We therefore chose a few of these techniques that we thought were most interesting. For further details, we refer the interested reader to the books by Mulmuley [223], Preparata and Shamos [242], and Samet [251], and the survey papers by Chazelle <ref> [63] </ref>, Guting [156], Matousek [200, 204], and Nievergelt and Widmayer [226].
Reference: [64] <author> B. Chazelle, </author> <title> A spectral approach to lower bounds, </title> <booktitle> Proc. 35th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1994, </year> <pages> pp. 674-682. </pages>
Reference-contexts: will also consider the group model, Geometric Range Searching and Its Relatives 7 fl 1 fl 4 fl 3 fl 2 fl 1 fl 4 p 3 p 7 p 5 p 1 the total weight of the points in each disk. in which both additions and subtractions are allowed <ref> [287, 64, 65] </ref>. Chazelle [65] considers an extension of the o*ine group model in which circuits are allowed a limited number of help gates, which can compute arbitrary binary functions. <p> Lower bounds for emptiness problems apply to counting and reporting problems as well. No nontrivial lower bound was known for any o*ine range searching problem under the group model until Chazelle's result <ref> [64] </ref>. See the survey papers [63, 204] for a more detailed discussion on lower bounds. 5 Variants and Extensions In this section we review some extensions of range-searching data structures, including multi-level data structures, semialgebraic range searching, and dynamization. <p> Range Problem Model Time Source Halfspace Emptiness Algebraic computation tree n log n [40] Partition graph (d 4) n log n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n <ref> [64] </ref> Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, 118] Simplex Semigroup Semigroup n 22=(d1) [65] Table 5. Asymptotic lower bounds for o*ine simplex range searching.
Reference: [65] <author> B. Chazelle, </author> <title> Lower bounds for off-line range searching, </title> <booktitle> Proc. 27th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1995, </year> <pages> pp. 733-740. </pages>
Reference-contexts: This is equivalent to computing the product Aw, where A is the incidence matrix of the points and ranges, and w is the vector of weights. In the o*ine semigroup model, introduced by Chazelle <ref> [65] </ref>, an algorithm can be described as a circuit (or straight-line program) with one input for every point and one output for every query range, where every gate (respectively, statement) performs a binary semigroup addition. The running time of the algorithm is the total number of gates (respectively, statements). <p> will also consider the group model, Geometric Range Searching and Its Relatives 7 fl 1 fl 4 fl 3 fl 2 fl 1 fl 4 p 3 p 7 p 5 p 1 the total weight of the points in each disk. in which both additions and subtractions are allowed <ref> [287, 64, 65] </ref>. Chazelle [65] considers an extension of the o*ine group model in which circuits are allowed a limited number of help gates, which can compute arbitrary binary functions. <p> Chazelle <ref> [65] </ref> considers an extension of the o*ine group model in which circuits are allowed a limited number of help gates, which can compute arbitrary binary functions. <p> These lower bounds do not hold for o*ine orthogonal range searching, where given a set of n weighted points in R d and a set of n rectangles, one wants to compute the weight of the points in each rectangle. Recently, Chazelle <ref> [65] </ref> proved that the o*ine version takes 12 Pankaj K. Agarwal and Jeff Erickson (n (log n= log log n) d1 ) time in the semigroup model, and (n log log n) time in the group model. <p> [40] Partition graph (d 4) n log n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 <ref> [65, 118] </ref> Simplex Semigroup Semigroup n 22=(d1) [65] Table 5. Asymptotic lower bounds for o*ine simplex range searching. <p> n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, 118] Simplex Semigroup Semigroup n 22=(d1) <ref> [65] </ref> Table 5. Asymptotic lower bounds for o*ine simplex range searching.
Reference: [66] <author> B. Chazelle, R. Cole, F. P. Preparata, and C. K. Yap, </author> <title> New upper bounds for neighbor searching, </title> <journal> Inform. Control, </journal> <volume> 68 (1986), </volume> <pages> 105-124. </pages>
Reference-contexts: This observation not only simplifies the data structure but also gives better bounds in many cases, including halfspace range reporting. See <ref> [15, 55, 66, 79] </ref> for some applications of filtering search. An optimal halfspace reporting data structure in the plane was proposed by Chazelle et al. [78].
Reference: [67] <author> B. Chazelle and H. Edelsbrunner, </author> <title> Optimal solutions for a class of point retrieval problems, </title> <journal> J. Symbolic Comput., </journal> <volume> 1 (1985), </volume> <pages> 47-56. </pages>
Reference-contexts: If the ranges are homothets of a given triangle, or translates of a convex polygon with constant number of edges, a two-dimensional range-reporting query can be answered in O (log n + k) time using linear space <ref> [67, 68] </ref>.
Reference: [68] <author> B. Chazelle and H. Edelsbrunner, </author> <title> Linear space data structures for two types of range search, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 (1987), </volume> <pages> 113-126. </pages>
Reference-contexts: If the ranges are homothets of a given triangle, or translates of a convex polygon with constant number of edges, a two-dimensional range-reporting query can be answered in O (log n + k) time using linear space <ref> [67, 68] </ref>. <p> If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space <ref> [68] </ref>. 3.2 Lower bounds Fredman [131, 132, 133, 135] was the first to prove nontrivial lower bounds on orthogonal range searching, in a version of semigroup arithmetic model in which the points can be inserted and deleted dynamically.
Reference: [69] <author> B. Chazelle, H. Edelsbrunner, M. Grigni, L. Guibas, J. Hershberger, M. Sharir, and J. Snoeyink, </author> <title> Ray shooting in polygons using geodesic triangulations, </title> <journal> Algorithmica, </journal> <volume> 12 (1994), </volume> <pages> 54-68. </pages>
Reference-contexts: Using this approach and some other techniques, Chazelle and Guibas [77] showed that a ray-shooting query in a simple polygon can be answered in O (log n) time using O (n) space. Simpler data structures were subsequently proposed by Chazelle et al. <ref> [69] </ref> and Hershberger and Suri [164].
Reference: [70] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir, </author> <title> A singly-exponential stratification scheme for real semi-algebraic varieties and its applications, </title> <booktitle> Proc. 16th Internat. Colloq. Automata Lang. Program., Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 372, </volume> <publisher> Springer-Verlag, </publisher> <year> 1989, </year> <pages> pp. 179-192. </pages>
Reference-contexts: Hence, the problem reduces to point location in the arrangement of algebraic surfaces g i = 0 in R b . Let G be the set of resulting surfaces. The following result of Chazelle et al. <ref> [70, 71] </ref> leads to a point-location data structure. Theorem 11 (Chazelle et al. [70]). Let F = ff 1 ; : : : ; f n g be a set of n d-variate polynomials, with d 3, where each f i has maximum degree ffi in any variable. <p> Hence, the problem reduces to point location in the arrangement of algebraic surfaces g i = 0 in R b . Let G be the set of resulting surfaces. The following result of Chazelle et al. [70, 71] leads to a point-location data structure. Theorem 11 (Chazelle et al. <ref> [70] </ref>). Let F = ff 1 ; : : : ; f n g be a set of n d-variate polynomials, with d 3, where each f i has maximum degree ffi in any variable.
Reference: [71] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir, </author> <title> A singly-exponential stratification scheme for real semi-algebraic varieties and its applications, </title> <type> Theoret. </type> <institution> Comput. Sci., </institution> <month> 84 </month> <year> (1991), </year> <pages> 77-105. </pages>
Reference-contexts: Hence, the problem reduces to point location in the arrangement of algebraic surfaces g i = 0 in R b . Let G be the set of resulting surfaces. The following result of Chazelle et al. <ref> [70, 71] </ref> leads to a point-location data structure. Theorem 11 (Chazelle et al. [70]). Let F = ff 1 ; : : : ; f n g be a set of n d-variate polynomials, with d 3, where each f i has maximum degree ffi in any variable. <p> Source Disks Counting m (n 4=3 =m 2=3 ) log (m=n) [8] Disks Reporting n log n log n + k [16] d = 2 Triangles Counting m n m Fat triangles Reporting n log 2 n log 3 n + k [182] Tarski cells Counting n 2+" log n <ref> [71] </ref> d = 3 Functions Reporting n 1+" log n + k [6] Fat tetrahedra Reporting m n 1+" m Simplices Counting m n d 3 Balls Counting n d+" log n [8] Balls Reporting m n m 1=dd=2e polylog n + k [199] Tarski cells Counting n 2d3+" log n <p> d = 3 Functions Reporting n 1+" log n + k [6] Fat tetrahedra Reporting m n 1+" m Simplices Counting m n d 3 Balls Counting n d+" log n [8] Balls Reporting m n m 1=dd=2e polylog n + k [199] Tarski cells Counting n 2d3+" log n <ref> [71] </ref> n fl+" log n [8] Table 7. Asymptotic upper bounds for point intersection searching. Agarwal et al. [6] extended the approach for dynamic halfspace range searching to answer point-intersection queries amid the graphs of bivariate algebraic functions, each of bounded degree. <p> Besides the motion-planning application discussed above, point location in an arrangement of surfaces, especially determining whether a query point lies above a given set of regions of the form x d+1 f (x 1 ; : : : ; x d ), has many other applications in computational geometry; see <ref> [13, 71, 72] </ref> for examples.
Reference: [72] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir, </author> <title> Diameter, width, closest line pair and parametric searching, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 183-196. </pages>
Reference-contexts: Besides the motion-planning application discussed above, point location in an arrangement of surfaces, especially determining whether a query point lies above a given set of regions of the form x d+1 f (x 1 ; : : : ; x d ), has many other applications in computational geometry; see <ref> [13, 71, 72] </ref> for examples.
Reference: [73] <author> B. Chazelle, H. Edelsbrunner, L. J. Guibas, M. Sharir, and J. Stolfi, </author> <title> Lines in space: Combinatorics and algorithms, </title> <journal> Algorithmica, </journal> <volume> 15 (1996), </volume> <pages> 428-447. </pages>
Reference-contexts: One of the most widely used linearizations in computational geometry uses the so-called Plucker coordinates, which map a line in R 3 to a point in R 5 ; see <ref> [73, 265, 268] </ref> for more details on Plucker coordinates. A f -range query can now be answered using a `-dimensional halfspace range-searching data structure.
Reference: [74] <author> B. Chazelle and J. Friedman, </author> <title> A deterministic view of random sampling and its use in geometry, </title> <journal> Combinatorica, </journal> <volume> 10 (1990), </volume> <pages> 229-249. </pages>
Reference-contexts: Clarkson [88] and Haussler and Welzl [161] were the first to show the existence of a (1=r)-cutting of H of size O (r d log d r). Chazelle and Friedman <ref> [74] </ref> improved the size bound to O (r d ), which is optimal in the worst case. Several efficient algorithms are developed for computing a (1=r)-cutting. The best algorithm known for computing a (1=r)-cutting was discovered by Chazelle [62]; his result is summarized in the following theorem.
Reference: [75] <author> B. Chazelle and J. Friedman, </author> <title> Point location among hyperplanes and unidirectional ray-shooting, </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 4 (1994), </volume> <pages> 53-62. </pages>
Reference-contexts: n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n <ref> [75, 202] </ref> Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c log n [205] Table 9. Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time.
Reference: [76] <author> B. Chazelle and L. J. Guibas, Fractional cascading: I. </author> <title> A data structuring technique, </title> <journal> Algorith-mica, </journal> <volume> 1 (1986), </volume> <pages> 133-162. </pages>
Reference-contexts: Otherwise, we recursively visit both children of v. The query time of this procedure is O (log d n + k), which can be improved to O (log d1 n + k) using the fractional-cascading technique <ref> [76, 196] </ref>. A range tree can also answer a range-counting query in time O (log d1 n). Range trees are an example of a multi-level data structure, which we will discuss in more detail in Section 5.1.
Reference: [77] <author> B. Chazelle and L. J. Guibas, </author> <title> Visibility and intersection problems in plane geometry, </title> <journal> Discrete Comput. Geom., </journal> <month> 4 </month> <year> (1989), </year> <month> 551-581. </month> <title> Geometric Range Searching and Its Relatives 53 </title>
Reference-contexts: Using this approach and some other techniques, Chazelle and Guibas <ref> [77] </ref> showed that a ray-shooting query in a simple polygon can be answered in O (log n) time using O (n) space. Simpler data structures were subsequently proposed by Chazelle et al. [69] and Hershberger and Suri [164].
Reference: [78] <author> B. Chazelle, L. J. Guibas, and D. T. Lee, </author> <title> The power of geometric duality, </title> <journal> BIT, </journal> <volume> 25 (1985), </volume> <pages> 76-90. </pages>
Reference-contexts: This observation not only simplifies the data structure but also gives better bounds in many cases, including halfspace range reporting. See [15, 55, 66, 79] for some applications of filtering search. An optimal halfspace reporting data structure in the plane was proposed by Chazelle et al. <ref> [78] </ref>. <p> Consequently, the query time and the size of the data structure can be improved slightly; see Table 3 for a summary of results. Problem d Size Query Time Source Reporting d = 2 n log n + k <ref> [78] </ref> Emptiness n log n [242] Reporting d = 3 n log n log n + k [16] Emptiness n log n [103] Reporting d &gt; 3 n log log n n 11=bd=2c polylog n + k [199] Emptiness n n 11=bd=2c 2 O (log fl n) [199] Table 3.
Reference: [79] <author> B. Chazelle and F. P. Preparata, </author> <title> Halfspace range search: An algorithmic application of k-sets, </title> <journal> Discrete Comput. Geom., </journal> <volume> 1 (1986), </volume> <pages> 83-93. </pages>
Reference-contexts: This observation not only simplifies the data structure but also gives better bounds in many cases, including halfspace range reporting. See <ref> [15, 55, 66, 79] </ref> for some applications of filtering search. An optimal halfspace reporting data structure in the plane was proposed by Chazelle et al. [78]. <p> Their technique does not extend to three dimensions. After a few initial attempts <ref> [79, 16] </ref>, Matousek developed a data structure that answers a halfspace reporting query in R d in time O (n 11=bd=2c polylog n+k). His structure is based on the following two observations.
Reference: [80] <author> B. Chazelle and B. Rosenberg, </author> <title> Computing partial sums in multidimensional arrays, </title> <booktitle> Proc. 5th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1989, </year> <pages> pp. 131-139. </pages>
Reference-contexts: For d &gt; 1, Chazelle and Rosenberg <ref> [80] </ref> gave a data structure of size O (n log d1 n) that can answer a partial-sum query in time O (ff (n) log d2 n). They also showed that the o*ine version takes (n + mff (m; n)) time for any fixed d 1.
Reference: [81] <author> B. Chazelle and B. Rosenberg, </author> <title> Simplex range reporting on a pointer machine, </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 5 (1996), </volume> <pages> 237-247. </pages>
Reference-contexts: Geometric Range Searching and Its Relatives 31 It should be pointed out that this theorem holds even if the query ranges are wedges or strips, but not if the ranges are hyperplanes. Chazelle and Rosenberg <ref> [81] </ref> proved a lower bound of (n 1" =m + k) for simplex range reporting under the pointer-machine model. These lower bounds do not hold for halfspace range searching. A somewhat weaker lower bound for halfspace queries was proved by Bronnimannet al. [52].
Reference: [82] <author> B. Chazelle, M. Sharir, and E. Welzl, </author> <title> Quasi-optimal upper bounds for simplex range searching and new zone theorems, </title> <journal> Algorithmica, </journal> <volume> 8 (1992), </volume> <pages> 407-429. </pages>
Reference-contexts: The technique by Matousek and Welzl has also been applied to solve some other geometric-searching problems, including ray shooting and intersection searching [34]. The first data structure with roughly n 11=d query time and near-linear space, for d &gt; 3, was obtained by Chazelle et al. <ref> [82] </ref>. Given a set S of n points in R d , they construct a family F = fffi 1 ; : : : ; ffi k g of triangulations of R d , each of size O (r d ). <p> Another consequence of maintaining a family of partitions is that, unlike partition trees, this data structure cannot be used directly to answering simplex range queries. Instead, Chazelle et al. <ref> [82] </ref> construct a multi-level data structure (which we describe in Section 5.1) to answer simplex range queries. Matousek [203] developed a simpler, slightly faster data structure for simplex range queries, by returning to the theme of constructing a single partition, as in the earlier partition-tree papers. <p> For d = 3, their approach gives a data structure of size O (n 7+" ) that can answer a tetrahedron range-counting query in time O (log n). Chazelle et al. <ref> [82] </ref> describe a multi-level data structure (see Section 5.1) of size O (n d+" ) that can answer a simplex range-counting query in time O (log n). The space bound can be reduced to O (n d ) by increasing the query time to O (log d+1 n) [203]. <p> By combining these two types of data structures, a tradeoff between the size and the query time can be obtained <ref> [10, 82, 203] </ref>. Actually, the approach described in these papers is very general and works for any geometric-searching data structure that can be viewed as a decomposition scheme (described in Section 2), provided it satisfies certain assumptions. <p> Asymptotic upper bounds for dynamic 2D orthogonal range-searching. and Matousek [9] developed a rather sophisticated data structure that can insert or delete a point in time O (n bd=2c1+" ) time and can answer a query in O (log n + k) time. As in <ref> [82] </ref>, at each node of the tree, this structure computes a family of partitions (instead of a single partition), each of size O (r bd=2c ) for some parameter r.
Reference: [83] <author> B. Chazelle and E. Welzl, </author> <title> Quasi-optimal range searching in spaces of finite VC-dimension, </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 (1989), </volume> <pages> 467-489. </pages>
Reference-contexts: Using Theorem 2, Welzl constructs a spanning path = (S) of any set S of n points in R d whose crossing number is O (n 11=d log n). The bound on the crossing number was improved by Chazelle and Welzl <ref> [83] </ref> to O (n 11=d ), which is tight in the worst case. Let p 1 ; p 2 ; : : : ; p n be the vertices of . <p> Chazelle and Welzl <ref> [83] </ref> produced such a data structure for d 3, but no such structure is known for higher dimensions. Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K.
Reference: [84] <author> S. W. Cheng and R. Janardan, </author> <title> Efficient dynamic algorithms for some geometric intersection problems, </title> <journal> Inform. Process. Lett., </journal> <volume> 36 (1990), </volume> <pages> 251-258. </pages>
Reference-contexts: If we also allow insertions and deletions, the query and update time are respectively O (log n log log n + k) and O (log n log log n) [212], or O (log 2 n + k) and O (log n) using only linear space <ref> [84] </ref>; if we allow only insertions, the query and update time become O (log n + k) and O (log n) [173]. A problem related to segment intersection searching is the stabbing problem.
Reference: [85] <author> S. W. Cheng and R. Janardan, </author> <title> Algorithms for ray-shooting and intersection searching, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 670-692. </pages>
Reference-contexts: Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K. Agarwal and Jeff Erickson to solve a number of other algorithmic as well as combinatorial problems; see, for example, <ref> [3, 85, 109, 207, 234, 281] </ref>. Matousek and Welzl [206] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [116]. <p> In some cases, by using a more direct approach, we can improve the query time by a polylogarithmic factor. For example, by exploiting some additional properties of input objects and of partition trees, we can modify a segment intersection-searching data structure in some cases to answer ray shooting queries <ref> [3, 85, 149] </ref>. Another approach for answering ray-shooting queries is based on visibility maps. A ray in R d can be represented as a point in R d fi S d1 .
Reference: [86] <author> Y.-J. Chiang and R. Tamassia, </author> <title> Dynamic algorithms in computational geometry, </title> <booktitle> Proc. IEEE, 80 (1992), </booktitle> <pages> 1412-1434. </pages>
Reference-contexts: These techniques work even if the sequence of insertions and queries is not known in advance, but the deletion time of a point is known when it is inserted [106]; see also [263]. See the survey paper by Chiang and Tamassia <ref> [86] </ref> for a more detailed review of dynamic geometric data structures. Geometric Range Searching and Its Relatives 39 6 Intersection Searching A general intersection-searching problem can be formulated as follows.
Reference: [87] <author> K. Clarkson, </author> <title> Nearest neighbor queries in metric spaces, </title> <booktitle> Proc. 29th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1997, </year> <pages> pp. 609-617. </pages>
Reference-contexts: This has lead to the development of algorithms for finding approximate nearest neighbors [26, 28, 29, 91, 185, 188] or for special cases, such as when the distribution of query points is known in advance <ref> [87, 296] </ref>. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions.
Reference: [88] <author> K. L. Clarkson, </author> <title> New applications of random sampling in computational geometry, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 (1987), </volume> <pages> 195-222. </pages>
Reference-contexts: 1 Introduction About ten years ago, the field of range searching, especially simplex range searching, was wide open. At that time, neither efficient algorithms nor nontrivial lower bounds were known for most range-searching problems. A series of papers by Haussler and Welzl [161], Clarkson <ref> [88, 89] </ref>, and Clarkson and Shor [92] not only marked the beginning of a new chapter in geometric searching, but also revitalized computational geometry as a whole. <p> The major contribution of their paper is the abstract framework and the notion of "-nets. A somewhat different abstract framework for randomized algorithms was proposed by Clarkson <ref> [88, 92] </ref> around the same time; see also [220]. These abstract frameworks and the general results attained under these frameworks popularized randomized algorithms in computational geometry [223]. We briefly describe the framework and the main result by Haussler and Welzl because they are most pertinent to range searching. <p> Theorem 2 and some other similar results <ref> [88, 92] </ref> have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan [218], Mulmuley [223], and Anthony and Biggs [19] and the survey papers [90, 200, 256]. <p> Let A k (H) denote the (closure of the) set of points with level at most k. A (1=r)-cutting of H is a set ffi of (relatively open) disjoint simplices covering R d so that each simplex intersects at most n=r hyperplanes of H. Clarkson <ref> [88] </ref> and Haussler and Welzl [161] were the first to show the existence of a (1=r)-cutting of H of size O (r d log d r). Chazelle and Friedman [74] improved the size bound to O (r d ), which is optimal in the worst case. <p> Both data structures can answer simplex range-reporting queries by spending an additional O (k) time. The size of a data structure can be significantly improved if we want to answer halfspace range-reporting queries. Using random sampling, Clarkson <ref> [88] </ref> showed that a halfspace-emptiness query can be answered in O (log n) time using O (n bd=2c+" ) space. In order to extend his algorithm to halfspace range-reporting queries, we need the following additional idea. Let H be a set of hyperplanes in R d .
Reference: [89] <author> K. L. Clarkson, </author> <title> A randomized algorithm for closest-point queries, </title> <journal> SIAM J. Comput., </journal> <volume> 17 (1988), </volume> <pages> 830-847. </pages>
Reference-contexts: 1 Introduction About ten years ago, the field of range searching, especially simplex range searching, was wide open. At that time, neither efficient algorithms nor nontrivial lower bounds were known for most range-searching problems. A series of papers by Haussler and Welzl [161], Clarkson <ref> [88, 89] </ref>, and Clarkson and Shor [92] not only marked the beginning of a new chapter in geometric searching, but also revitalized computational geometry as a whole. <p> For d = 2, one can construct the Voronoi diagram of S and preprocess it for point-location queries in O (n log n) time [242]. For higher dimensions, Clarkson <ref> [89] </ref> presented a data structure of size O (n dd=2e+" ) that can answer a query in 2 O (d) log n time. The query time can be improved to O (d 3 log n), using a technique of Meiser [214].
Reference: [90] <author> K. L. Clarkson, </author> <title> Randomized geometric algorithms, in: Computing in Euclidean Geometry (D.-Z. </title> <editor> Du and F. K. Hwang, eds.), </editor> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1992, </year> <pages> pp. 117-162. </pages>
Reference-contexts: Theorem 2 and some other similar results [88, 92] have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan [218], Mulmuley [223], and Anthony and Biggs [19] and the survey papers <ref> [90, 200, 256] </ref>. The first linear-size data structure with near-optimal query time for simplex range queries in the plane was developed by Welzl [280]. His algorithm is based on the following idea.
Reference: [91] <author> K. L. Clarkson, </author> <title> An algorithm for approximate closest-point queries, </title> <booktitle> Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> pp. 160-164. </pages>
Reference-contexts: Note that the query time of the above approach is exponential in d, so it is impractical even for moderate values of d (say d 10). This has lead to the development of algorithms for finding approximate nearest neighbors <ref> [26, 28, 29, 91, 185, 188] </ref> or for special cases, such as when the distribution of query points is known in advance [87, 296]. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions.
Reference: [92] <author> K. L. Clarkson and P. W. Shor, </author> <title> Applications of random sampling in computational geometry, II, </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 (1989), </volume> <pages> 387-421. </pages>
Reference-contexts: 1 Introduction About ten years ago, the field of range searching, especially simplex range searching, was wide open. At that time, neither efficient algorithms nor nontrivial lower bounds were known for most range-searching problems. A series of papers by Haussler and Welzl [161], Clarkson [88, 89], and Clarkson and Shor <ref> [92] </ref> not only marked the beginning of a new chapter in geometric searching, but also revitalized computational geometry as a whole. <p> The major contribution of their paper is the abstract framework and the notion of "-nets. A somewhat different abstract framework for randomized algorithms was proposed by Clarkson <ref> [88, 92] </ref> around the same time; see also [220]. These abstract frameworks and the general results attained under these frameworks popularized randomized algorithms in computational geometry [223]. We briefly describe the framework and the main result by Haussler and Welzl because they are most pertinent to range searching. <p> Theorem 2 and some other similar results <ref> [88, 92] </ref> have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan [218], Mulmuley [223], and Anthony and Biggs [19] and the survey papers [90, 200, 256].
Reference: [93] <author> J. G. Cleary, </author> <title> Analysis of an algorithm for finding nearest neighbors in Euclidean space, </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 5 (1979), </volume> <pages> 183-192. </pages>
Reference-contexts: For large input sets, one desires an algorithm that minimizes the number of disk accesses. Many of the heuristics mentioned above try to optimize the I/O efficiency, though none of them gives any performance guarantee. A few recent papers <ref> [24, 46, 236, 93] </ref> analyze the efficiency of some of the heuristics, under certain assumptions on the input. 7.3 Linear programming queries Let S be a set of n halfspaces in R d .
Reference: [94] <author> R. Cole, </author> <title> Partitioning point sets in 4 dimensions, </title> <booktitle> Proc. 12th Internat. Colloq. Automata Lang. Program., Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 194, </volume> <publisher> Springer-Verlag, </publisher> <year> 1985, </year> <pages> pp. 111-119. </pages>
Reference-contexts: Avis [31] proved that such a partition of R d by d hyperplanes is not always possible for d 5; the problem is still open for d = 4. Weaker partitioning schemes were proposed in <ref> [94, 293] </ref>. After the initial improvements and extensions on Willard's partition tree, a major breakthrough was made by Haussler and Welzl [161].
Reference: [95] <author> R. Cole and C. K. Yap, </author> <title> Geometric retrieval problems, </title> <journal> Inform. Control, </journal> <volume> 63 (1985), </volume> <pages> 39-57. </pages> <note> 54 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: That is, store the solution of every combinatorially distinct simplex (two simplices are combinatorially distinct if they do not contain the same subset of S). Since there are fi (n d (d+1) ) combinatorially distinct simplices, such an approach will require (n d (d+1) ) storage; see <ref> [95, 111] </ref>. Cole and Yap [95] were the first to present a near-quadratic size data structure that could answer a triangle range-counting query in the plane in O (log n) time. <p> Since there are fi (n d (d+1) ) combinatorially distinct simplices, such an approach will require (n d (d+1) ) storage; see [95, 111]. Cole and Yap <ref> [95] </ref> were the first to present a near-quadratic size data structure that could answer a triangle range-counting query in the plane in O (log n) time.
Reference: [96] <author> D. Comer, </author> <title> The ubiquitous B-tree, </title> <journal> ACM Comput. Surv., </journal> <volume> 11 (1979), </volume> <pages> 121-137. </pages>
Reference-contexts: I/O-efficient orthogonal range-searching structures have received much attention recently, but most of the results are known only for the planar case. The main idea underlying these structures is to construct high-degree trees instead of binary trees. For example, variants of B-trees are used to answer 1-dimensional range-searching queries <ref> [35, 96] </ref>. A number of additional tricks are developed to optimize the size and the query time. See [20, 21, 232] for I/O efficient data structures that have been used for answering range searching and related queries. Table 2 summarizes the known results on secondary-memory structures for orthogonal range searching. <p> applications, its size should be at most cn, where c is a very small constant, the time to answer a typical query should be small | the lower Geometric Range Searching and Its Relatives 13 d Range Size Query Time Source d = 1 Interval N Log n + k=B <ref> [35, 96] </ref> Quadrant N log log B Log n + k=B [244] 3-sided rectangle N Log n + k=B + log fl B [270] d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B <p> The book by Samet [251] is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers [145, 156, 169, 226, 227]. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants <ref> [35, 96] </ref>. Since a B-tree requires a linear order on the input elements, one needs to define such an ordering on points in higher dimensions in order to store them into a B-tree.
Reference: [97] <author> S. Cost and S. Salzberg, </author> <title> A weighted nearest neighbor algorithm for learning with symbolic features, </title> <booktitle> Machine Learning, 10 (1993), </booktitle> <pages> 57-67. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning <ref> [97] </ref>, and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors.
Reference: [98] <author> T. Cover and P. Hart, </author> <title> Nearest neighbor pattern classification, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 13 (1967), </volume> <pages> 21-27. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition <ref> [98, 107] </ref>, data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions.
Reference: [99] <author> M. de Berg, L. J. Guibas, and D. Halperin, </author> <title> Vertical decompositions for triangles in 3-space, </title> <journal> Discrete Comput. Geom., </journal> <volume> 15 (1996), </volume> <pages> 35-61. </pages>
Reference-contexts: Moreover, ffi 1 ; : : : ; ffi k can be computed in time O (nr d1 ). This theorem has been successfully applied to many geometric divide-and-conquer algorithms; see <ref> [2, 62, 99, 239] </ref> for a few such instances. Returning to halfspace range searching, suppose that the query halfspace always lies below its bounding hyperplane.
Reference: [100] <author> M. de Berg and M. Overmars, </author> <title> Hidden surface removal for c-oriented polyhedra, </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 1 (1992), </volume> <pages> 247-268. </pages>
Reference-contexts: d = 2 s disjoint convex polygons s 2 + n log n [241] s convex polygons sn log s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n <ref> [100] </ref> s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202]
Reference: [101] <author> D. P. Dobkin and H. Edelsbrunner, </author> <title> Organizing point sets in two and three dimensions, </title> <type> Tech. Report F130, </type> <institution> Inst. Informationsverarb., Tech. Univ. Graz, Graz, Austria, </institution> <year> 1984. </year>
Reference-contexts: This bound was improved slightly in subsequent papers <ref> [101, 110, 295] </ref>. Using the Borsuk-Ulam theorem, Yao et al. [295] showed that, given a set S of n points in R 3 , one can find three planes so that each of the eight (open) octants determined by them contains at most bn=8c points of S.
Reference: [102] <author> D. P. Dobkin and H. Edelsbrunner, </author> <title> Space searching for intersecting objects, </title> <journal> J. Algorithms, </journal> <volume> 8 (1987), </volume> <pages> 348-361. </pages>
Reference-contexts: This property has been implicitly used for a long time; see, for example, [112, 192, 196, 290, 252]. The real power of the cascading property was first observed by Dobkin and Edelsbrunner <ref> [102] </ref>, who used this property to answer several complex geometric queries. Since their result, several papers have exploited and extended this property to solve numerous geometric-searching problems; see [10, 149, 274, 203, 238]. In this subsection we briefly sketch the general cascading scheme, as described in [203].
Reference: [103] <author> D. P. Dobkin, J. Hershberger, D. Kirkpatrick, and S. Suri, </author> <title> Implicitly searching convolutions and computing depth of collision, </title> <booktitle> Proc. 1st Annu. SIGAL Internat. Sympos. Algorithms, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 450, </volume> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 165-180. </pages>
Reference-contexts: Problem d Size Query Time Source Reporting d = 2 n log n + k [78] Emptiness n log n [242] Reporting d = 3 n log n log n + k [16] Emptiness n log n <ref> [103] </ref> Reporting d &gt; 3 n log log n n 11=bd=2c polylog n + k [199] Emptiness n n 11=bd=2c 2 O (log fl n) [199] Table 3. Asymptotic upper bounds for halfspace range searching in near-linear space.
Reference: [104] <author> D. P. Dobkin and D. G. Kirkpatrick, </author> <title> A linear algorithm for determining the separation of convex polyhedra, </title> <journal> J. Algorithms, </journal> <volume> 6 (1985), </volume> <pages> 381-392. </pages>
Reference-contexts: s log s log n [11] d = 2 s disjoint convex polygons s 2 + n log n [241] s convex polygons sn log s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n <ref> [104] </ref> c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes
Reference: [105] <author> D. P. Dobkin and D. G. Kirkpatrick, </author> <title> Determining the separation of preprocessed polyhedra A unified approach, </title> <booktitle> Proc. 17th Internat. Colloq. Automata Lang. Program., Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 443, </volume> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 400-413. </pages>
Reference-contexts: Hershberger and Suri [164] showed that if S is the boundary of a simple polygon, then a triangulation (using Steiner points) with O (log n) crossing number can be constructed in O (n log n) time. See <ref> [5, 216, 105, 197, 283] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [5] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [106] <author> D. P. Dobkin and S. Suri, </author> <title> Maintenance of geometric extrema, </title> <journal> J. ACM, </journal> <volume> 38 (1991), </volume> <pages> 275-298. </pages>
Reference-contexts: These techniques work even if the sequence of insertions and queries is not known in advance, but the deletion time of a point is known when it is inserted <ref> [106] </ref>; see also [263]. See the survey paper by Chiang and Tamassia [86] for a more detailed review of dynamic geometric data structures. Geometric Range Searching and Its Relatives 39 6 Intersection Searching A general intersection-searching problem can be formulated as follows.
Reference: [107] <author> R. O. Duda and P. E. Hart, </author> <title> Pattern Classification and Scene Analysis, </title> <publisher> Wiley Interscience, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition <ref> [98, 107] </ref>, data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions.
Reference: [108] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1987. </year>
Reference-contexts: If k = 0, the tree consists of a single node that stores the coordinates of the only point in S. Otherwise, using the ham-sandwich 20 Pankaj K. Agarwal and Jeff Erickson theorem <ref> [108] </ref>, find two lines ` 1 ; ` 2 so that each quadrant Q i , for 1 i 4, induced by ` 1 ; ` 2 contains exactly n=4 points. The root stores the equations of ` 1 ; ` 2 and the value of n.
Reference: [109] <author> H. Edelsbrunner, L. Guibas, J. Hershberger, R. Seidel, M. Sharir, J. Snoeyink, and E. Welzl, </author> <title> Implicitly representing arrangements of lines or segments, </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 (1989), </volume> <pages> 433-466. </pages>
Reference-contexts: Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K. Agarwal and Jeff Erickson to solve a number of other algorithmic as well as combinatorial problems; see, for example, <ref> [3, 85, 109, 207, 234, 281] </ref>. Matousek and Welzl [206] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [116].
Reference: [110] <author> H. Edelsbrunner and F. Huber, </author> <title> Dissecting sets of points in two and three dimensions, </title> <type> Report F138, </type> <institution> Inst. Informationsverarb., Tech. Univ. Graz, Graz, Austria, </institution> <year> 1984. </year>
Reference-contexts: This bound was improved slightly in subsequent papers <ref> [101, 110, 295] </ref>. Using the Borsuk-Ulam theorem, Yao et al. [295] showed that, given a set S of n points in R 3 , one can find three planes so that each of the eight (open) octants determined by them contains at most bn=8c points of S.
Reference: [111] <author> H. Edelsbrunner, D. G. Kirkpatrick, and H. A. Maurer, </author> <title> Polygonal intersection searching, </title> <journal> Inform. Process. Lett., </journal> <volume> 14 (1982), </volume> <pages> 74-79. </pages>
Reference-contexts: That is, store the solution of every combinatorially distinct simplex (two simplices are combinatorially distinct if they do not contain the same subset of S). Since there are fi (n d (d+1) ) combinatorially distinct simplices, such an approach will require (n d (d+1) ) storage; see <ref> [95, 111] </ref>. Cole and Yap [95] were the first to present a near-quadratic size data structure that could answer a triangle range-counting query in the plane in O (log n) time.
Reference: [112] <author> H. Edelsbrunner and H. A. Maurer, </author> <title> A space-optimal solution of general region location, </title> <type> Theoret. </type> <institution> Comput. Sci., </institution> <month> 16 </month> <year> (1981), </year> <pages> 329-336. </pages>
Reference-contexts: This property has been implicitly used for a long time; see, for example, <ref> [112, 192, 196, 290, 252] </ref>. The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries.
Reference: [113] <author> H. Edelsbrunner and M. H. Overmars, </author> <title> Batched dynamic solutions to decomposable searching problems, </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <month> 6 </month> <year> (1985), </year> <month> 515-542. </month> <title> Geometric Range Searching and Its Relatives 55 </title>
Reference-contexts: If the sequence of insertions, deletions, and queries is known in advance, the corresponding static data structures can be modified to handle such a sequence of operations by paying a logarithmic overhead in the query time <ref> [113] </ref>. These techniques work even if the sequence of insertions and queries is not known in advance, but the deletion time of a point is known when it is inserted [106]; see also [263].
Reference: [114] <author> H. Edelsbrunner and E. Welzl, </author> <title> Halfplanar range search in linear space and O(n 0:695 ) query time, </title> <journal> Inform. Process. Lett., </journal> <volume> 23 (1986), </volume> <pages> 289-293. </pages>
Reference-contexts: Hence, the query time of this procedure is O (n ff ), where ff = log 3 4 0:7925. A similar procedure can answer a simplex range-counting query within the same time bound, and a simplex range-reporting query in time O (n ff + k). Edelsbrunner and Welzl <ref> [114] </ref> described a simple variant of Willard's partition tree that improves the exponent in the query-search time to log 2 (1 + p A partition tree for points in R 3 was first proposed by Yao [294], which can answer a query in time O (n 0:98 ).
Reference: [115] <author> A. Efrat, M. Katz, F. Nielsen, and M. Sharir, </author> <title> Dynamic data structures for fat objects and their applications, </title> <booktitle> Proc. 5th Workshop Algorithms Data Struct., </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference: [116] <author> P. Erd-os and G. Szekeres, </author> <title> A combinatorial problem in geometry, </title> <journal> Compositio Math., </journal> <volume> 2 (1935), </volume> <pages> 463-470. </pages>
Reference-contexts: Matousek and Welzl [206] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres <ref> [116] </ref>. The query time of their data structure is O ( p n log n), and it uses O (n) space and O (n 3=2 ) preprocessing time. If subtractions are allowed, their algorithm can be extended to the triangle range-counting problem.
Reference: [117] <author> J. Erickson, </author> <title> New lower bounds for halfspace emptiness, </title> <type> 37th Annu. </type> <institution> ACM Sympos. Found. Comput. Sci., </institution> <year> 1996, </year> <pages> pp. 472-481. </pages>
Reference-contexts: Range queries are answered with such a data structure by performing a depth-first search through the resulting recursive space partition. The partition graph model, recently introduced by Erickson <ref> [117, 118, 119] </ref>, formalizes this divide-and-conquer approach, at least for hyperplane and halfspace range searching data structures. The partition graph model can be used to study the complexity of emptiness queries, unlike the semigroup arithmetic and pointer machine models, in which such queries are trivial. <p> Slightly better lower bounds are known for higher-dimensional versions of Hopcroft's problem <ref> [118, 117] </ref>, but for the special case n = m, the best known lower bound is still only (n 4=3 ), which is quite far from the best known upper bound O (n 2d=(d+1) 2 O (log fl n) ). <p> Asymptotic lower bounds for online simplex range searching using O (m) space. Range Problem Model Time Source Halfspace Emptiness Algebraic computation tree n log n [40] Partition graph (d 4) n log n <ref> [117] </ref> Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, 118] Simplex Semigroup Semigroup n 22=(d1) [65] Table <p> Asymptotic lower bounds for online simplex range searching using O (m) space. Range Problem Model Time Source Halfspace Emptiness Algebraic computation tree n log n [40] Partition graph (d 4) n log n <ref> [117] </ref> Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, 118] Simplex Semigroup Semigroup n 22=(d1) [65] Table 5.
Reference: [118] <author> J. Erickson, </author> <title> New lower bounds for Hopcroft's problem, </title> <journal> Discrete Comput. Geom., </journal> <volume> 16 (1996), </volume> <pages> 389-418. </pages>
Reference-contexts: Range queries are answered with such a data structure by performing a depth-first search through the resulting recursive space partition. The partition graph model, recently introduced by Erickson <ref> [117, 118, 119] </ref>, formalizes this divide-and-conquer approach, at least for hyperplane and halfspace range searching data structures. The partition graph model can be used to study the complexity of emptiness queries, unlike the semigroup arithmetic and pointer machine models, in which such queries are trivial. <p> His techniques were first applied to Hopcroft's problem | Given a set of n points and m lines, does any point lie on a line? | for which he obtained a lower bound of (n log m + n 2=3 m 2=3 + m log n) <ref> [118] </ref>, almost matching the best known upper bound O (n log m + n 2=3 m 2=3 2 O (log fl (n+m)) + m log n), due to Matousek [203]. <p> Slightly better lower bounds are known for higher-dimensional versions of Hopcroft's problem <ref> [118, 117] </ref>, but for the special case n = m, the best known lower bound is still only (n 4=3 ), which is quite far from the best known upper bound O (n 2d=(d+1) 2 O (log fl n) ). <p> Asymptotic lower bounds for online simplex range searching using O (m) space. Range Problem Model Time Source Halfspace Emptiness Algebraic computation tree n log n [40] Partition graph (d 4) n log n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 <ref> [118] </ref> Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, 118] Simplex Semigroup Semigroup n 22=(d1) [65] Table 5. Asymptotic lower bounds for o*ine simplex range searching. <p> computation tree n log n [40] Partition graph (d 4) n log n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 <ref> [118] </ref> Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 [65, 118] Simplex Semigroup Semigroup n 22=(d1) [65] Table 5. Asymptotic lower bounds for o*ine simplex range searching. <p> [40] Partition graph (d 4) n log n [117] Partition graph (d 5) n 4=3 [117] Counting Partition graph n 4=3 [118] Group Group (with n=2 help gates) n log n [64] Hyperplane Emptiness Algebraic computation tree n log n [40] Partition graph n 4=3 [118] Semigroup Semigroup n 4=3 <ref> [65, 118] </ref> Simplex Semigroup Semigroup n 22=(d1) [65] Table 5. Asymptotic lower bounds for o*ine simplex range searching.
Reference: [119] <author> J. Erickson, </author> <title> Space-time tradeoffs for emptiness queries, </title> <booktitle> Proc. 13th Annu. ACM Sympos. Com-put. Geom., </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Range queries are answered with such a data structure by performing a depth-first search through the resulting recursive space partition. The partition graph model, recently introduced by Erickson <ref> [117, 118, 119] </ref>, formalizes this divide-and-conquer approach, at least for hyperplane and halfspace range searching data structures. The partition graph model can be used to study the complexity of emptiness queries, unlike the semigroup arithmetic and pointer machine models, in which such queries are trivial. <p> More recently, Erickson established tradeoff lower bounds between space and query time, or preprocessing and query time, for online hyperplane emptiness queries <ref> [119] </ref>. The space-time tradeoffs are established by showing that a partition graph that supports hyperplane emptiness queries also (implicitly) supports halfspace semigroup queries, and then applying the lower bounds of Bronnimann et al.[52]. <p> &gt; 2) n [59] Reporting Pointer machine n 1" Hyperplane Semigroup Semigroup n 2=(d+1) Emptiness Partition graph log n d 2 +d 1 Halfspace Semigroup Semigroup log n d 2 +d 1 Emptiness Partition graph log n ffi 2 +ffi 1 m 1=ffi , where d ffi (ffi + 3)=2 <ref> [119] </ref> Table 4. Asymptotic lower bounds for online simplex range searching using O (m) space.
Reference: [120] <author> G. Evangelidis, D. Lomet, and B. Salzberg, </author> <title> The hB -tree: A multi-attribute index supporting concurrency, recovery and node consolidation, </title> <journal> VLDB Journal, </journal> <volume> 6 (1997), </volume> <pages> 1-25. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120]. <p> Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time [195, 137, 120, 36, 257, 163, 258, 255, 260]. We mention only two of the variants here: Buddy trees [257] and hB-trees <ref> [195, 120] </ref>. A buddy tree is a combination of a quad tree and kd-B-tree in the sense that rectangles are split into sub-rectangles only at some specific locations, which simplifies the split procedure; see [257] for details. <p> A more refined version of this data structure, known as hB -tree, is presented in <ref> [120] </ref>. A D A D 1 D 2 C V W Z B C FD E A BA E ` Z W and Z; the subtrees rooted at D and E are split recursively.
Reference: [121] <author> C. Faloutsos, </author> <title> Gray codes for partial match and range queries, </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> 44 (1988), </volume> <pages> 1381-1393. </pages>
Reference-contexts: A B-tree storing points based on the bit-interleaving ordering is referred to as an N-tree [285] or a zkd-tree [228] in the literature. See [251] for a more detailed discussion on the applications of bit interleaving in spatial data structures. Faloutsos <ref> [121] </ref> suggested using Gray codes to define a linear order on points. In general, space-filling curves 5 can be used to define a linear ordering on input points; Hilbert and Morton curves, shown in Figure 2, are the some of the space-filling curves commonly used for this purpose.
Reference: [122] <author> C. Faloutsos and V. </author> <title> Gaede, Analysis of n-dimensional quadtrees using the Hausdorff fractal dimension, </title> <booktitle> Proc. 22nd VLDB Conference, </booktitle> <year> 1996, </year> <pages> pp. 40-50. </pages>
Reference-contexts: Typically the point is chosen so that the height of the tree is O (log n). A recent paper by Faloutsos and Gaede <ref> [122] </ref> analyzes the performance of quad trees using Hausdorff fractal dimension. See also [138, 170] for other data structures based on quad trees.
Reference: [123] <author> C. Faloutsos and K.-I. Lin, </author> <title> FastMap: A fast algorithm for indexing, data-mining and visualization of traditional and multimedia databases, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1995, </year> <pages> pp. 163-173. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining <ref> [123, 160] </ref>, machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors. <p> Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [124] <author> C. Faloutsos, M. Ranganathan, and Y. Manolopoulos, </author> <title> Fast subsequence matching in time-series databases, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1994, </year> <pages> pp. 86-93. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval <ref> [124, 249] </ref>, CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions.
Reference: [125] <author> C. Faloutsos and Y. Rong, </author> <title> DOT: A spatial access method using fractals, </title> <booktitle> Proc. 7th IEEE Internat. Conf. on Data Engineering, </booktitle> <year> 1991, </year> <pages> pp. 152-158. </pages>
Reference-contexts: Many heuristic data structures based on this scheme have been proposed; see <ref> [125, 235, 257] </ref> for a sample of such results. The second approach is to construct a data structure on S directly in R d . The most popular data structure based on this approach is the R-tree, originally introduced by Guttman [157].
Reference: [126] <author> C. Faloutsos and S. Roseman, </author> <title> Fractals for secondary key retrieval, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1989, </year> <pages> pp. 247-252. </pages>
Reference-contexts: In general, space-filling curves 5 can be used to define a linear ordering on input points; Hilbert and Morton curves, shown in Figure 2, are the some of the space-filling curves commonly used for this purpose. See <ref> [1, 30, 126, 175] </ref> for a comparison of the performance of various space-filling curves in the context of range searching.
Reference: [127] <author> R. A. Finkel and J. L. Bentley, </author> <title> Quad trees: a data structure for retrieval on composite keys, </title> <journal> Acta Inform., </journal> <volume> 4 (1974), </volume> <pages> 1-9. </pages>
Reference-contexts: See the book by Samet [250, 251] for a detailed discussion on quad trees and their applications. One disadvantage to quad trees is that arbitrarily many levels of partitioning may be required to separate tightly clustered points. Finkel and Bentley <ref> [127] </ref> described a variant of the quad tree for range searching, called a point quad-tree, in which each node is associated Geometric Range Searching and Its Relatives 15 with a rectangle and the rectangle is partitioned into four rectangles by choosing a point in the interior and drawing horizontal and vertical
Reference: [128] <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes, </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Like range searching, many practical data structures have been proposed that, despite having bad worst-case performance, work well in practice. The books by Foley et al. <ref> [128] </ref> and Glassner [140] describe several practical data structures for ray tracing that are used in computer graphics. One common approach is to construct a subdivision of R d into constant-size cells so that the interior of each cell does not intersect any object of S.
Reference: [129] <author> F. W. Fredman and D. E. Willard, </author> <title> Surpassing the information theoretic bound with fusion trees, </title> <institution> J. Comput. Syst. Sci., </institution> <month> 48 </month> <year> (1993), </year> <pages> 424-436. </pages>
Reference-contexts: A few algorithms rely on a variant of the RAM model, proposed by Fredman and Willard <ref> [129] </ref>, that allows memory cells to contain w-bit integers, for some parameter w log n, and permits both arithmetic and bitwise logical operations in constant time. In a real RAM, we also allow memory cells to store arbitrary real numbers (such as coordinates of points). <p> Fusion trees were introduced by Fredman and Willard <ref> [129] </ref> for an O (n p log n) sorting algorithm in a RAM model that allows bitwise logical operations.
Reference: [130] <author> M. L. Fredman, </author> <title> The complexity of maintaining an array and computing its partial sums, </title> <journal> J. ACM, </journal> <volume> 29 (1979), </volume> <pages> 250-260. </pages> <note> 56 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: They also showed that the o*ine version takes (n + mff (m; n)) time for any fixed d 1. If points are allowed to insert into S, the query time is (log n= log log n) <ref> [130, 292] </ref> for the one-dimensional case; the bounds were extended by Chazelle [61] to ((log n= log log n) d ), for any fixed dimension d.
Reference: [131] <author> M. L. Fredman, </author> <title> Inherent complexity of range query problems, </title> <booktitle> Proc. 17th Allerton Conf. </booktitle> <institution> Commun. Control Comput., </institution> <year> 1979, </year> <pages> pp. 231-240. </pages>
Reference-contexts: If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [68]. 3.2 Lower bounds Fredman <ref> [131, 132, 133, 135] </ref> was the first to prove nontrivial lower bounds on orthogonal range searching, in a version of semigroup arithmetic model in which the points can be inserted and deleted dynamically.
Reference: [132] <author> M. L. Fredman, </author> <title> The inherent complexity of dynamic data structures which accommodate range queries, </title> <booktitle> Proc. 21st Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1980, </year> <pages> pp. 191-199. </pages>
Reference-contexts: If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [68]. 3.2 Lower bounds Fredman <ref> [131, 132, 133, 135] </ref> was the first to prove nontrivial lower bounds on orthogonal range searching, in a version of semigroup arithmetic model in which the points can be inserted and deleted dynamically.
Reference: [133] <author> M. L. Fredman, </author> <title> A lower bound on the complexity of orthogonal range queries, </title> <journal> J. ACM, </journal> <volume> 28 (1981), </volume> <pages> 696-705. </pages>
Reference-contexts: Most lower bounds, and a few upper bounds, are described in the so-called semigroup arithmetic model, which was originally introduced by Fredman <ref> [133] </ref> and refined by Yao [292]. In the semigroup arithmetic model, a data structure can be informally regarded as a set of precomputed partial sums in the underlying semigroup. <p> If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [68]. 3.2 Lower bounds Fredman <ref> [131, 132, 133, 135] </ref> was the first to prove nontrivial lower bounds on orthogonal range searching, in a version of semigroup arithmetic model in which the points can be inserted and deleted dynamically.
Reference: [134] <author> M. L. Fredman, </author> <title> Lower bounds on the complexity of some optimal data structures, </title> <journal> SIAM J. Comput., </journal> <volume> 10 (1981), </volume> <pages> 1-10. </pages>
Reference-contexts: It is sufficient to have an efficient, r-convergent decomposition scheme with a partial order on the canonical subsets, where each canonical subset satisfies a property similar to (P1). 4.4 Lower bounds Fredman <ref> [134] </ref> showed that a sequence of n insertions, deletions, and halfplane queries on a set of points in the plane requires (n 4=3 ) time, in the semigroup model. His technique, however, does not extend to static data structures.
Reference: [135] <author> M. L. Fredman and D. J. Volper, </author> <title> The complexity of partial match retrieval in a dynamic setting, </title> <journal> J. Algorithms, </journal> <volume> 3 (1982), </volume> <pages> 68-78. </pages>
Reference-contexts: If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [68]. 3.2 Lower bounds Fredman <ref> [131, 132, 133, 135] </ref> was the first to prove nontrivial lower bounds on orthogonal range searching, in a version of semigroup arithmetic model in which the points can be inserted and deleted dynamically.
Reference: [136] <author> H. Freeston, </author> <title> The BANG file: a new kind of grid file, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1987, </year> <pages> pp. 260-269. </pages>
Reference-contexts: This notion of a hierarchical grid file was proposed by Hinrichs [165] and Krishnamurthy and Wang [190]. A related data structure, known as the BANG file, was proposed by Freestone <ref> [136] </ref>; other variants of grid files are proposed in [165, 172, 229]. Quad trees, grid files, and their variants construct a grid on a rectangle containing all the input points.
Reference: [137] <author> M. Freestone, </author> <title> A general solution of the n-dimensional B-tree problem, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1995, </year> <pages> pp. 80-91. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120].
Reference: [138] <author> J. H. Friedman, J. L. Bentley, and R. A. Finkel, </author> <title> An algorithm for finding best matches in logarithmic expected time, </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 3 (1977), </volume> <pages> 209-226. </pages>
Reference-contexts: Typically the point is chosen so that the height of the tree is O (log n). A recent paper by Faloutsos and Gaede [122] analyzes the performance of quad trees using Hausdorff fractal dimension. See also <ref> [138, 170] </ref> for other data structures based on quad trees. In order to minimize the number of disk accesses, one can partition the square into many squares (instead of four) by a drawing either a uniform or a nonuniform grid. <p> Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [139] <author> H. Fuchs, Z. M. Kedem, and B. Naylor, </author> <title> On visible surface generation by a priori tree structures, Comput. Graph., </title> <booktitle> 14 (1980), </booktitle> <pages> 124-133. </pages> <note> Proc. SIGGRAPH '80. </note>
Reference-contexts: One can instead associate a convex polygon B v with each node v of the tree, use an arbitrary line to partition B v into two convex polygons, and associate the two polygons with the children of v. This idea is the same as in binary space partition trees <ref> [139, 237] </ref>. Again, one can construct a B-tree on this recursive partitioning scheme to reduce the number of disk accesses. The resulting structure called cell trees is studied in [150, 151]. <p> In practice, however, very simple decompositions, such as oct-trees and binary 46 Pankaj K. Agarwal and Jeff Erickson space partitions <ref> [139] </ref> are used to trace a ray. 7.2 Nearest-neighbor queries The nearest-neighbor query problem is defined as follows: Preprocess a set S of points in R d into a data structure so that a point in S closest to a query point ~ can be reported quickly.
Reference: [140] <author> A. S. Glassner, </author> <title> Ray Tracing, </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: Like range searching, many practical data structures have been proposed that, despite having bad worst-case performance, work well in practice. The books by Foley et al. [128] and Glassner <ref> [140] </ref> describe several practical data structures for ray tracing that are used in computer graphics. One common approach is to construct a subdivision of R d into constant-size cells so that the interior of each cell does not intersect any object of S.
Reference: [141] <author> J. Goldstein, R. Ramakrishnan, U. Shaft, and J.-B. Yu, </author> <title> Processing queries by linear constraints, </title> <booktitle> Proc. ACM Sympos. Principles of Database Systems, </booktitle> <year> 1997, </year> <pages> pp. 257-267. </pages>
Reference-contexts: Overmars and van der Stappen [233] developed fast data structures for the special case in which the ranges are "fat" and have bounded size. In practice, the data structures described in Section 3.4 are used even for simplex range searching. Recently, Goldstein et al. <ref> [141] </ref> presented an algorithm for simplex range searching using R-trees. Although these data structures do not work well in the worst case, they perform reasonably well in practice, for example, when the points are close to uniformly distributed.
Reference: [142] <author> J. E. Goodman, R. Pollack, and R. Wenger, </author> <title> Geometric transversal theory, in: New Trends in Discrete and Computational Geometry (J. Pach, </title> <editor> ed.), </editor> <publisher> Springer-Verlag, </publisher> <address> Heidelberg-New York-Berlin, </address> <year> 1993, </year> <pages> pp. 163-198. </pages>
Reference-contexts: Such queries can also be answered efficiently using semialgebraic range-searching data structures. A line-stabbing query amid a set of triangles in R 3 can be answered in O (log n) time using O (n 2+" ) storage [240]. The paper by Goodman et al. <ref> [142] </ref> is an excellent survey of this topic. 6.3 Rectangle intersection searching Given a set S of polygons in the plane, preprocess them into a data structure so that all objects intersecting a query rectangle can be reported efficiently.
Reference: [143] <author> M. T. Goodrich and R. Tamassia, </author> <title> Dynamic ray shooting and shortest paths via balanced geodesic triangulations, </title> <booktitle> Proc. 9th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1993, </year> <pages> pp. 318-327. </pages>
Reference-contexts: Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time. Goodrich and Tamassia <ref> [143] </ref> have developed a dynamic ray-shooting data structure for connected planar subdivisions, with O (log 2 n) query and update time. Like range searching, many practical data structures have been proposed that, despite having bad worst-case performance, work well in practice.
Reference: [144] <author> J. Gray, A. Bosworth, A. Layman, and H. Patel, </author> <title> Data cube: A relational aggregation operator generalizing group-by, </title> <booktitle> cross-tab, and sub-totals, Proc. 12th IEEE Internat. Conf. on Data Engineering, </booktitle> <year> 1996, </year> <pages> pp. 152-159. </pages>
Reference-contexts: Partial-sum queries are widely used for on-line analytical processing (OLAP) of commercial databases. OLAP allows companies to analyze aggregate databases built from their data warehouses. A popular data model for OLAP applications is the multidimensional database, known as data cube <ref> [144] </ref>, which represents the data as d-dimensional array. Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes [152, 159, 168, 262, 167, 247].
Reference: [145] <author> D. Greene, </author> <title> An implementation and performance analysis of spatial data access methods, </title> <booktitle> Proc. 5th IEEE Internat. Conf. on Data Engineering, </booktitle> <year> 1989, </year> <pages> pp. 606-615. </pages>
Reference-contexts: For the sake of simplicity, we will present most of the data structures in two dimensions. The book by Samet [251] is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers <ref> [145, 156, 169, 226, 227] </ref>. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants [35, 96]. <p> Although allowing rectangles to overlap helps reduce the size of the data structure, answering a query becomes more expensive. Guttman suggests some heuristics to construct a R-tree so that the overlap is minimized. Better heuristics for minimizing the overlap were developed by Beckmann et al. [37], Green <ref> [145] </ref>, and Kamal and Faloutsos [177, 178, 179].
Reference: [146] <author> L. Greengard, </author> <title> The Rapid Evaluation of Potential Fields in Particle Systems, </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1988. </year>
Reference-contexts: For example, they were used as early as in 1920's, by Weyl [282] for computing the complex roots of a univariate polynomial approximately; Greengard used them for the so-called n-body problem <ref> [146] </ref>. See the book by Samet [250, 251] for a detailed discussion on quad trees and their applications. One disadvantage to quad trees is that arbitrarily many levels of partitioning may be required to separate tightly clustered points.
Reference: [147] <author> D. Grigoriev and N. Vorobjov, </author> <title> Complexity lower bounds for computation trees with elementary transcendental function gates, </title> <type> Theoret. </type> <institution> Comput. Sci., </institution> <month> 157 </month> <year> (1996), </year> <month> 185-214. </month> <title> Geometric Range Searching and Its Relatives 57 </title>
Reference-contexts: range query, or (n log n) time to solve any reasonable o*ine range searching problem, since such a circuit can be modeled as an algebraic computation tree with no branches [40] or as a straight-line program on a real RAM [38]. (Computation trees with more general functions are considered in <ref> [147] </ref>.) Almost all geometric range-searching data structures are constructed by subdividing space into several regions with nice properties and recursively constructing a data structure for each region. Range queries are answered with such a data structure by performing a depth-first search through the resulting recursive space partition.
Reference: [148] <author> R. Grossi and G. F. </author> <title> Italiano, Efficient splitting and merging algorithms for order decomposable problems, </title> <booktitle> Proc. 24th Internat. Colloq. Automata, Lang. Prog., </booktitle> <year> 1997, </year> <note> to appear. </note>
Reference-contexts: For every shallow hyperplane h, there is at least one partition so that h intersects O (r bd=2c1 ) simplices of the partition. Grossi and Italiano <ref> [148] </ref>, generalizing and improving earlier results of van Kreveld and Overmars [275, 276], describe dynamic d-dimensional orthogonal range searching data structures that also support split and merge operations, defined as follows.
Reference: [149] <author> L. Guibas, M. Overmars, and M. Sharir, </author> <title> Ray shooting, implicit point location, and related queries in arrangements of segments, </title> <type> Report 433, </type> <institution> Dept. Comput. Sci., </institution> <address> New York Univ., New York, NY, </address> <month> March </month> <year> 1989. </year>
Reference-contexts: The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries. Since their result, several papers have exploited and extended this property to solve numerous geometric-searching problems; see <ref> [10, 149, 274, 203, 238] </ref>. In this subsection we briefly sketch the general cascading scheme, as described in [203]. Let S be a set of weighted objects. Recall that a geometric-searching problem P, with underlying relation , requires computing P pfl w (p) for a query range fl. <p> In some cases, by using a more direct approach, we can improve the query time by a polylogarithmic factor. For example, by exploiting some additional properties of input objects and of partition trees, we can modify a segment intersection-searching data structure in some cases to answer ray shooting queries <ref> [3, 85, 149] </ref>. Another approach for answering ray-shooting queries is based on visibility maps. A ray in R d can be represented as a point in R d fi S d1 .
Reference: [150] <author> O. Gunther, </author> <title> The design of the cell tree: An object oriented index structure for geometric data bases, </title> <booktitle> Proc. 5th IEEE Internat. Conf. on Data Engineering, </booktitle> <year> 1989, </year> <pages> pp. 598-605. </pages>
Reference-contexts: This idea is the same as in binary space partition trees [139, 237]. Again, one can construct a B-tree on this recursive partitioning scheme to reduce the number of disk accesses. The resulting structure called cell trees is studied in <ref> [150, 151] </ref>. Geometric Range Searching and Its Relatives 17 All the data structures described in this section construct a recursive partition of the space. There are other data structures (of which the R-tree is perhaps the most famous example) that construct a hierarchical cover of the space.
Reference: [151] <author> O. Gunther and J. Bilmes, </author> <title> Tree based access methods for spatial databases: Implementation and performance evaluation, </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> 3 (1991), </volume> <pages> 342-356. </pages>
Reference-contexts: This idea is the same as in binary space partition trees [139, 237]. Again, one can construct a B-tree on this recursive partitioning scheme to reduce the number of disk accesses. The resulting structure called cell trees is studied in <ref> [150, 151] </ref>. Geometric Range Searching and Its Relatives 17 All the data structures described in this section construct a recursive partition of the space. There are other data structures (of which the R-tree is perhaps the most famous example) that construct a hierarchical cover of the space.
Reference: [152] <author> H. Gupta, V. Harinarayan, A. Rajaraman, and J. D. Ullman, </author> <title> Index selection for OLAP, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1996, </year> <pages> pp. 205-216. </pages>
Reference-contexts: Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes <ref> [152, 159, 168, 262, 167, 247] </ref>.
Reference: [153] <author> P. Gupta, R. Janardan, and M. Smid, </author> <title> Efficient algorithms for generalized intersection searching on non-iso-oriented objects, </title> <booktitle> Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> pp. 369-378. </pages>
Reference-contexts: Thus, logarithmic query-time intersection-searching data structures can easily be modified for colored intersection reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [14, 50, 153, 154, 155, 176] </ref>. Gupta et al. [153] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Thus, logarithmic query-time intersection-searching data structures can easily be modified for colored intersection reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases [14, 50, 153, 154, 155, 176]. Gupta et al. <ref> [153] </ref> have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Gupta et al. <ref> [153, 155] </ref> present segment intersection-reporting structures for many other special cases. 7 Optimization Queries The goal of an optimization query is to return an object that satisfies a certain condition with respect to a query range. Ray-shooting queries are perhaps the most common example 44 Pankaj K.
Reference: [154] <author> P. Gupta, R. Janardan, and M. Smid, </author> <title> On intersection searching problems involving curved objects, </title> <booktitle> Proc. 4th Scand. Workshop Algorithm Theory, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 824, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 183-194. </pages>
Reference-contexts: Thus, logarithmic query-time intersection-searching data structures can easily be modified for colored intersection reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [14, 50, 153, 154, 155, 176] </ref>. Gupta et al. [153] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space.
Reference: [155] <author> P. Gupta, R. Janardan, and M. Smid, </author> <title> Further results on generalized intersection searching problems: counting, </title> <editor> reporting and dynamization, J. </editor> <booktitle> Algorithms, 19 (1995), </booktitle> <pages> 282-317. </pages>
Reference-contexts: Thus, logarithmic query-time intersection-searching data structures can easily be modified for colored intersection reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [14, 50, 153, 154, 155, 176] </ref>. Gupta et al. [153] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Gupta et al. <ref> [153, 155] </ref> present segment intersection-reporting structures for many other special cases. 7 Optimization Queries The goal of an optimization query is to return an object that satisfies a certain condition with respect to a query range. Ray-shooting queries are perhaps the most common example 44 Pankaj K.
Reference: [156] <author> R. Guting, </author> <title> An introduction to spatial database systems, </title> <journal> VLDB Journal, </journal> <volume> 4 (1994), </volume> <pages> 357-399. </pages>
Reference-contexts: For the sake of simplicity, we will present most of the data structures in two dimensions. The book by Samet [251] is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers <ref> [145, 156, 169, 226, 227] </ref>. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants [35, 96]. <p> We therefore chose a few of these techniques that we thought were most interesting. For further details, we refer the interested reader to the books by Mulmuley [223], Preparata and Shamos [242], and Samet [251], and the survey papers by Chazelle [63], Guting <ref> [156] </ref>, Matousek [200, 204], and Nievergelt and Widmayer [226].
Reference: [157] <author> A. Guttman, R-trees: </author> <title> a dynamic index structure for spatial searching, </title> <booktitle> Proc. ACM SIGACT-SIGMOD Conf. Principles Database Systems, </booktitle> <year> 1984, </year> <pages> pp. 569-592. </pages>
Reference-contexts: The second approach is to construct a data structure on S directly in R d . The most popular data structure based on this approach is the R-tree, originally introduced by Guttman <ref> [157] </ref>. R 1 R 3 R 5 B D F H R 1 R 2 A B C D E F G H I An R-tree is a multiway tree (like a B-tree), each of whose nodes stores a set of rectangles.
Reference: [158] <author> D. Harel and R. E. Tarjan, </author> <title> Fast algorithms for finding nearest common ancestors, </title> <journal> SIAM J. Comput., </journal> <volume> 13 (1984), </volume> <pages> 338-355. </pages>
Reference-contexts: answered in O (ff (n)) time using O (n) space. 6 If the additive operator is max or min, then a partial-sum query can be answered in O (1) time under the RAM model using a Cartesian tree, developed by Vuillemin [279], and the nearest-common-ancestor algorithm of Harel and Tarjan <ref> [158] </ref>. For d &gt; 1, Chazelle and Rosenberg [80] gave a data structure of size O (n log d1 n) that can answer a partial-sum query in time O (ff (n) log d2 n).
Reference: [159] <author> V. Harinarayan, A. Rajaraman, and J. D. Ullman, </author> <title> Implementing data cubes efficiently, </title> <booktitle> Proc. 13th IEEE Internat. Conf. on Data Engineering, </booktitle> <year> 1997, </year> <pages> pp. 208-219. </pages>
Reference-contexts: Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes <ref> [152, 159, 168, 262, 167, 247] </ref>.
Reference: [160] <author> T. Hastie and R. Tibshirani, </author> <title> Discriminant adaptive nearest neighbor classification, </title> <journal> IEEE Trans. Pattern Anal. Mach. Intell., </journal> <volume> 18 (1996), </volume> <pages> 607-616. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining <ref> [123, 160] </ref>, machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors. <p> Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [161] <author> D. Haussler and E. Welzl, </author> <title> Epsilon-nets and simplex range queries, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 (1987), </volume> <pages> 127-151. </pages>
Reference-contexts: 1 Introduction About ten years ago, the field of range searching, especially simplex range searching, was wide open. At that time, neither efficient algorithms nor nontrivial lower bounds were known for most range-searching problems. A series of papers by Haussler and Welzl <ref> [161] </ref>, Clarkson [88, 89], and Clarkson and Shor [92] not only marked the beginning of a new chapter in geometric searching, but also revitalized computational geometry as a whole. <p> Weaker partitioning schemes were proposed in [94, 293]. After the initial improvements and extensions on Willard's partition tree, a major breakthrough was made by Haussler and Welzl <ref> [161] </ref>. They formulated range searching in an abstract setting and, using elegant probabilistic methods, gave a randomized algorithm to construct a linear-size partition tree with O (n ff ) query time, where ff = 1 1 d (d1)+1 + " for any " &gt; 0. <p> A (1=r)-cutting of H is a set ffi of (relatively open) disjoint simplices covering R d so that each simplex intersects at most n=r hyperplanes of H. Clarkson [88] and Haussler and Welzl <ref> [161] </ref> were the first to show the existence of a (1=r)-cutting of H of size O (r d log d r). Chazelle and Friedman [74] improved the size bound to O (r d ), which is optimal in the worst case. Several efficient algorithms are developed for computing a (1=r)-cutting.
Reference: [162] <author> J. H. Hellerstein, E. Koustsoupias, and C. H. Papadimtriou, </author> <title> On the analysis of indexing schemes, </title> <booktitle> Proc. ACM Sympos. Principles of Database Systems, </booktitle> <year> 1997, </year> <pages> pp. 249-256. </pages>
Reference-contexts: Using the argument by Chazelle [60], they proved that any secondary-memory data structure that answers a range-reporting query using O (polyLog n + k=B) I/O operations requires (N log N= log Log n) storage. Hellerstein et al. <ref> [162] </ref> have shown that if a data structure for two-dimensional range query uses at most O (N ) disk blocks for a constant r 1, then a query requires at least ((k=B) p log B= log log B) disk accesses; this extends an earlier lower bound by Kanellakis et al. [180].
Reference: [163] <author> A. Henrich, </author> <title> Improving the performance of multi-dimensional access structures based on kd-trees, </title> <booktitle> Proc. 12th IEEE Intl. Conf. on Data Engineering, </booktitle> <year> 1996, </year> <pages> pp. 68-74. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120].
Reference: [164] <author> J. Hershberger and S. Suri, </author> <title> A pedestrian approach to ray shooting: Shoot a ray, take a walk, </title> <journal> J. Algorithms, </journal> <volume> 18 (1995), </volume> <pages> 403-431. </pages> <note> 58 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: For example, a segment intersection-detection query for a set of balls in R d , where d 3, can be answered in O (log n) time using O (n d+" ) storage [4]. d Objects Problem Size Query Time Source Simple polygons Reporting n (k + 1) log n <ref> [164] </ref> Lines Reporting m n= p d = 2 Segments Counting m n= p Circles Counting n 2+" log n [15] Circular arcs Counting m n=m 1=3 [15] Planes Counting m n=m 1=3 [7] Halfplanes Reporting m n=m 1=3 + k [7] d = 3 Triangles Counting m n=m 1=4 [8] <p> Using this approach and some other techniques, Chazelle and Guibas [77] showed that a ray-shooting query in a simple polygon can be answered in O (log n) time using O (n) space. Simpler data structures were subsequently proposed by Chazelle et al. [69] and Hershberger and Suri <ref> [164] </ref>. <p> Geometric Range Searching and Its Relatives 45 d Objects Size Query Time Source Simple polygon n log n <ref> [164] </ref> s disjoint simple polygons n p s disjoint simple polygons (s 2 + n) log s log s log n [11] d = 2 s disjoint convex polygons s 2 + n log n [241] s convex polygons sn log s log s log n [11] Segments m n= p <p> The worst-case query time is proportional to the maximum number of cells intersected by a segment that does not intersect any object in S; we refer to this quantity as the crossing number of the triangulation. Hershberger and Suri <ref> [164] </ref> showed that if S is the boundary of a simple polygon, then a triangulation (using Steiner points) with O (log n) crossing number can be constructed in O (n log n) time. See [5, 216, 105, 197, 283] and the references therein for other ray-shooting results using this approach.
Reference: [165] <author> K. H. Hinrichs, </author> <title> The grid file system: implementation and case studies of applications, </title> <type> Report Diss. ETH 7734, </type> <institution> Swiss Federal Inst. Tech. </institution> <address> Zurich, Zurich, Switzerland, </address> <year> 1985. </year>
Reference-contexts: Note that a range query reduces to another range query on the grid directory, so one can store the grid directory itself as a grid file. This notion of a hierarchical grid file was proposed by Hinrichs <ref> [165] </ref> and Krishnamurthy and Wang [190]. A related data structure, known as the BANG file, was proposed by Freestone [136]; other variants of grid files are proposed in [165, 172, 229]. Quad trees, grid files, and their variants construct a grid on a rectangle containing all the input points. <p> This notion of a hierarchical grid file was proposed by Hinrichs [165] and Krishnamurthy and Wang [190]. A related data structure, known as the BANG file, was proposed by Freestone [136]; other variants of grid files are proposed in <ref> [165, 172, 229] </ref>. Quad trees, grid files, and their variants construct a grid on a rectangle containing all the input points. One can instead partition the enclosing rectangle into two rectangles by drawing a horizontal or a vertical line and partitioning each of the two rectangles independently.
Reference: [166] <author> G. R. Hjaltason and H. Samet, </author> <title> Ranking in spatial databases, </title> <booktitle> Advances in Spatial Databases Fourth International Symposium (M. </booktitle> <editor> J. Egenhofer and J. R. Herring, eds.), </editor> <booktitle> number 951 in Lecture Notes Comput. Sci., </booktitle> <month> August </month> <year> 1995, </year> <pages> pp. 83-95. </pages>
Reference-contexts: Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [167] <author> C.-T. Ho, R. Agrawal, N. Megiddo, and R. Srikant, </author> <title> Range queries in OLAP data cubes, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1997, </year> <pages> pp. 73-88. </pages>
Reference-contexts: Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes <ref> [152, 159, 168, 262, 167, 247] </ref>.
Reference: [168] <author> C.-T. Ho, J. Bruck, and R. Agrawal, </author> <title> Partial-sum queries in OLAP data cubes using covering codes, </title> <booktitle> Proc. ACM Sympos. Principles of Database Systems, </booktitle> <year> 1997, </year> <pages> pp. 228-237. </pages>
Reference-contexts: Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes <ref> [152, 159, 168, 262, 167, 247] </ref>.
Reference: [169] <author> E. G. Hoel and H. Samet, </author> <title> A qualitative comparison study of data structures for large line segment databases, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1992, </year> <pages> pp. 205-214. </pages>
Reference-contexts: For the sake of simplicity, we will present most of the data structures in two dimensions. The book by Samet [251] is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers <ref> [145, 156, 169, 226, 227] </ref>. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants [35, 96].
Reference: [170] <author> P. Houthuys, </author> <title> Box sort, a multidimensional binary sorting method for rectangular boxes, used for quick range searching, </title> <journal> Visual Comput., </journal> <volume> 3 (1987), </volume> <pages> 236-249. </pages>
Reference-contexts: Typically the point is chosen so that the height of the tree is O (log n). A recent paper by Faloutsos and Gaede [122] analyzes the performance of quad trees using Hausdorff fractal dimension. See also <ref> [138, 170] </ref> for other data structures based on quad trees. In order to minimize the number of disk accesses, one can partition the square into many squares (instead of four) by a drawing either a uniform or a nonuniform grid.
Reference: [171] <author> A. Hutflesz, H.-W. Six, and P. Widmayer, </author> <title> Globally order preserving multidimensional linear hashing, </title> <booktitle> Proc. 4th Intl. Conf. on Data Engineering, </booktitle> <year> 1988, </year> <pages> pp. 572-579. </pages>
Reference-contexts: See [1, 30, 126, 175] for a comparison of the performance of various space-filling curves in the context of range searching. Since B-trees require extra space to store pointers, several hashing schemes, including linear hashing [189], dynamic z-hashing <ref> [171] </ref> and spiral hashing schemes [219] are proposed to minimize the size of the data structure.
Reference: [172] <author> A. Hutflesz, H.-W. Six, and P. Widmayer, </author> <title> Twin grid files: Space optimizing access schemes, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1988, </year> <pages> pp. 183-190. </pages>
Reference-contexts: This notion of a hierarchical grid file was proposed by Hinrichs [165] and Krishnamurthy and Wang [190]. A related data structure, known as the BANG file, was proposed by Freestone [136]; other variants of grid files are proposed in <ref> [165, 172, 229] </ref>. Quad trees, grid files, and their variants construct a grid on a rectangle containing all the input points. One can instead partition the enclosing rectangle into two rectangles by drawing a horizontal or a vertical line and partitioning each of the two rectangles independently.
Reference: [173] <author> H. Imai and T. Asano, </author> <title> Dynamic orthogonal segment intersection search, </title> <journal> J. Algorithms, </journal> <volume> 8 (1987), </volume> <pages> 1-18. </pages>
Reference-contexts: n log log n + k) and O (log n log log n) [212], or O (log 2 n + k) and O (log n) using only linear space [84]; if we allow only insertions, the query and update time become O (log n + k) and O (log n) <ref> [173] </ref>. A problem related to segment intersection searching is the stabbing problem. Given a set S of objects in R d , determine whether a query k-flat (0 &lt; k &lt; d) intersects all objects of S. Such queries can also be answered efficiently using semialgebraic range-searching data structures.
Reference: [174] <author> P. Indyk, R. Motwani, P. Raghavan, and S. Vempala, </author> <title> Locality-preserving hashing in multidimensional space, </title> <booktitle> Proc. 29th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1997, </year> <pages> pp. 618-625. </pages>
Reference-contexts: Agarwal and Jeff Erickson one dimension deteriorates rapidly with the dimension because such a mapping does not preserve neighborhoods, though there has been some recent work on locality preserving hashing schemes <ref> [174] </ref>. (i) (ii) A more efficient approach to answer range queries is to construct a recursive partition of space, typically into rectangles, and to construct a tree induced by this partition. The simplest example of this type of data structure is the quad tree in the plane.
Reference: [175] <author> H. V. </author> <title> Jagdish, Linear clustering of objects with multiple attributes, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1990, </year> <pages> pp. 332-342. </pages>
Reference-contexts: In general, space-filling curves 5 can be used to define a linear ordering on input points; Hilbert and Morton curves, shown in Figure 2, are the some of the space-filling curves commonly used for this purpose. See <ref> [1, 30, 126, 175] </ref> for a comparison of the performance of various space-filling curves in the context of range searching.
Reference: [176] <author> R. Janardan and M. Lopez, </author> <title> Generalized intersection searching problems, </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 3 (1993), </volume> <pages> 39-69. </pages>
Reference-contexts: Thus, logarithmic query-time intersection-searching data structures can easily be modified for colored intersection reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [14, 50, 153, 154, 155, 176] </ref>. Gupta et al. [153] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space.
Reference: [177] <author> I. Kamel and C. Faloutsos, </author> <title> Parallel R-trees, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1992, </year> <pages> pp. 195-204. </pages>
Reference-contexts: Guttman suggests some heuristics to construct a R-tree so that the overlap is minimized. Better heuristics for minimizing the overlap were developed by Beckmann et al. [37], Green [145], and Kamal and Faloutsos <ref> [177, 178, 179] </ref>.
Reference: [178] <author> I. Kamel and C. Faloutsos, </author> <title> On packing R-trees, </title> <booktitle> Proc. 2nd Internat. Conf. on Information and Knowledge Management, </booktitle> <year> 1993, </year> <pages> pp. 490-499. </pages>
Reference-contexts: Guttman suggests some heuristics to construct a R-tree so that the overlap is minimized. Better heuristics for minimizing the overlap were developed by Beckmann et al. [37], Green [145], and Kamal and Faloutsos <ref> [177, 178, 179] </ref>.
Reference: [179] <author> I. Kamel and C. Faloutsos, Hilbert R-tree: </author> <title> An improved R-tree using fractals, </title> <booktitle> Proc. 20th VLDB Conference, </booktitle> <year> 1994, </year> <pages> pp. 500-510. </pages>
Reference-contexts: Guttman suggests some heuristics to construct a R-tree so that the overlap is minimized. Better heuristics for minimizing the overlap were developed by Beckmann et al. [37], Green [145], and Kamal and Faloutsos <ref> [177, 178, 179] </ref>. <p> Better heuristics for minimizing the overlap were developed by Beckmann et al. [37], Green [145], and Kamal and Faloutsos [177, 178, 179]. There are many variants of R-tree, depending on the application: an R fl -tree [37] uses more sophisticated techniques to minimize the overlap; a Hilbert-R-tree <ref> [179] </ref> defines a linear ordering on the rectangles, by sorting their centers along the Hilbert space-filling curve, and constructs a B Geometric Range Searching and Its Relatives 19 tree based on this ordering of rectangles; and an R + -tree avoids overlapping directory cells by clipping rectangles [257].
Reference: [180] <author> P. C. Kanellakis, S. Ramaswamy, D. E. Vengroff, and J. S. Vitter, </author> <title> Indexing for data models with constraints and classes, </title> <booktitle> Proc. 12th ACM SIGACT-SIGMOD-SIGART Conf. Princ. Database Sys., </booktitle> <year> 1993, </year> <pages> pp. 233-243. </pages>
Reference-contexts: [162] have shown that if a data structure for two-dimensional range query uses at most O (N ) disk blocks for a constant r 1, then a query requires at least ((k=B) p log B= log log B) disk accesses; this extends an earlier lower bound by Kanellakis et al. <ref> [180] </ref>. 3.4 Practical data structures None of the data structures described in Section 3.1 are used in practice, even in two dimensions, because of the polylogarithmic overhead in the size and the query time.
Reference: [181] <author> N. Katayama and S. Satoh, </author> <title> The SR-tree: An index structure for high-dimensional nearest-neighbor queries, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1997, </year> <pages> pp. </pages> <month> 369-380. </month> <title> Geometric Range Searching and Its Relatives 59 </title>
Reference-contexts: White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh <ref> [181] </ref>. Berchtold et al. [45] present a parallel algorithm for nearest-neighbor searching. For large input sets, one desires an algorithm that minimizes the number of disk accesses. Many of the heuristics mentioned above try to optimize the I/O efficiency, though none of them gives any performance guarantee.
Reference: [182] <author> M. Katz, </author> <title> 3-D vertical ray shooting and 2-D point enclosure, range searching, and arc shooting amidst convex fat objects, </title> <type> Research Report 2583, </type> <institution> INRIA, BP93, 06902 Sophia-Antipolis, France, </institution> <year> 1995. </year>
Reference-contexts: general scheme. d Objects Problem Size Query Time Source Disks Counting m (n 4=3 =m 2=3 ) log (m=n) [8] Disks Reporting n log n log n + k [16] d = 2 Triangles Counting m n m Fat triangles Reporting n log 2 n log 3 n + k <ref> [182] </ref> Tarski cells Counting n 2+" log n [71] d = 3 Functions Reporting n 1+" log n + k [6] Fat tetrahedra Reporting m n 1+" m Simplices Counting m n d 3 Balls Counting n d+" log n [8] Balls Reporting m n m 1=dd=2e polylog n + k
Reference: [183] <author> M. D. Katz and D. J. Volper, </author> <title> Data structures for retrieval on square grids, </title> <journal> SIAM J. Comput., </journal> <volume> 15 (1986), </volume> <pages> 919-931. </pages>
Reference-contexts: See <ref> [183] </ref> for some other results on range-searching for points on integer grids. Orthogonal range-searching data structures based on range tress can be extended to handle c-oriented ranges in a straightforward manner. The performance of such a data structure is the same as that of a c-dimensional orthogonal range-searching structure.
Reference: [184] <author> R. Klein, O. Nurmi, T. Ottmann, and D. Wood, </author> <title> A dynamic fixed windowing problem, </title> <journal> Algo-rithmica, </journal> <volume> 4 (1989), </volume> <pages> 535-550. </pages>
Reference-contexts: Table 6 summarizes the known results on dynamic 2D orthogonal range-searching data structures; these results can be extended to higher dimensions at a cost of an additional log d2 n factor in the storage, query time, and update time. Klein et al. <ref> [184] </ref> have described an optimal data structure for a special case of 2D range-reporting in which the query ranges are translates of a polygon.
Reference: [185] <author> J. Kleinberg, </author> <title> Two algorithms for nearest-neighbor search in high dimension, </title> <booktitle> Proc. 29th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1997, </year> <pages> pp. 599-608. </pages>
Reference-contexts: Note that the query time of the above approach is exponential in d, so it is impractical even for moderate values of d (say d 10). This has lead to the development of algorithms for finding approximate nearest neighbors <ref> [26, 28, 29, 91, 185, 188] </ref> or for special cases, such as when the distribution of query points is known in advance [87, 296]. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions.
Reference: [186] <author> V. Koivune and S. Kassam, </author> <title> Nearest neighbor filters for multivariate data, </title> <booktitle> IEEE Workshop on Nonlinear Signal and Image Processing, </booktitle> <year> 1995. </year>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis <ref> [186, 188] </ref>, data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors. <p> Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [187] <author> J. Komlos, J. Pach, and G. Woeginger, </author> <title> Almost tight bounds for *-nets, </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 (1992), </volume> <pages> 163-173. </pages>
Reference-contexts: The bound on the size of "-nets was improved by Blumer et al. [49] and Komlos et al. <ref> [187] </ref>. Theorem 2 (Komlos et al. [187]). <p> The bound on the size of "-nets was improved by Blumer et al. [49] and Komlos et al. <ref> [187] </ref>. Theorem 2 (Komlos et al. [187]).
Reference: [188] <author> F. Korn, N. Sidiropoulos, C. Faloutsos, E. Siegel, and Z. Protopapa, </author> <title> Fast nearest neighbor search in medical image database, </title> <booktitle> Proc. 22nd VLDB Conference, </booktitle> <year> 1996, </year> <pages> pp. 215-226. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis <ref> [186, 188] </ref>, data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors. <p> Note that the query time of the above approach is exponential in d, so it is impractical even for moderate values of d (say d 10). This has lead to the development of algorithms for finding approximate nearest neighbors <ref> [26, 28, 29, 91, 185, 188] </ref> or for special cases, such as when the distribution of query points is known in advance [87, 296]. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. <p> Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [189] <author> H.-P. Kriegel and B. Seeger, </author> <title> Multidimensional order preserving linear hashing with partial expansions, </title> <booktitle> in: Proc. Intl. Conf. on Database Theory, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 243, </volume> <publisher> Springer-Verlag, </publisher> <year> 1986, </year> <pages> pp. 203-220. </pages>
Reference-contexts: See [1, 30, 126, 175] for a comparison of the performance of various space-filling curves in the context of range searching. Since B-trees require extra space to store pointers, several hashing schemes, including linear hashing <ref> [189] </ref>, dynamic z-hashing [171] and spiral hashing schemes [219] are proposed to minimize the size of the data structure.
Reference: [190] <author> R. Krishnamurthy and K.-Y. Wang, </author> <title> Multilevel grid files, </title> <type> Tech. report, </type> <institution> IBM T. J. Watson Center, </institution> <address> Yorktown Heights, NY, </address> <year> 1985. </year>
Reference-contexts: Note that a range query reduces to another range query on the grid directory, so one can store the grid directory itself as a grid file. This notion of a hierarchical grid file was proposed by Hinrichs [165] and Krishnamurthy and Wang <ref> [190] </ref>. A related data structure, known as the BANG file, was proposed by Freestone [136]; other variants of grid files are proposed in [165, 172, 229]. Quad trees, grid files, and their variants construct a grid on a rectangle containing all the input points.
Reference: [191] <author> J.-C. Latombe, </author> <title> Robot Motion Planning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: If B and the obstacles are semialgebraic sets, then each K i is also a semialgebraic set. A placement p of B is free if and only if p does not intersect any of K i 's. See <ref> [191] </ref> for a survey of known results on the collision-detection problem. Another intersection searching problem that arises quite frequently is the clipping problem: Preprocess a given set of polygons into a data structure so that all polygons intersecting a query rectangle can be reported efficiently.
Reference: [192] <author> D. T. Lee and C. K. Wong, </author> <title> Finding intersections of rectangles by range search, </title> <journal> J. Algorithms, </journal> <volume> 2 (1981), </volume> <pages> 337-347. </pages>
Reference-contexts: This property has been implicitly used for a long time; see, for example, <ref> [112, 192, 196, 290, 252] </ref>. The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries.
Reference: [193] <author> S. Leutenegger, M. A. Lopez, and J. Edington, STR: </author> <title> A simple and efficient algorithm for R-tree packing, </title> <booktitle> Proc. 13th IEEE Internat. Conf. on Data Engineering, </booktitle> <year> 1997, </year> <pages> pp. 497-506. </pages>
Reference-contexts: Berchtold et al. [47] define the X-tree, in which the interior nodes are allowed to be arbitrarily large; Lin et al. [194] project rectangles onto a lower dimensional space and construct an R-tree (or some variant thereof) on these projections. Leutenegger et al. <ref> [193] </ref> compare different variants of R-trees and discuss advantages of different heuristics used to minimize the overlap of rectangles.
Reference: [194] <author> K. Lin, H. Jagdish, and C. Faloutsos, </author> <title> The TV-tree: An index structure for higher dimensional data, </title> <journal> VLDB Journal, </journal> <volume> 4 (1994), </volume> <pages> 517-542. </pages>
Reference-contexts: Additional variants are suggested to avoid overlap in higher dimensions. Berchtold et al. [47] define the X-tree, in which the interior nodes are allowed to be arbitrarily large; Lin et al. <ref> [194] </ref> project rectangles onto a lower dimensional space and construct an R-tree (or some variant thereof) on these projections. Leutenegger et al. [193] compare different variants of R-trees and discuss advantages of different heuristics used to minimize the overlap of rectangles.
Reference: [195] <author> D. Lomet and B. Salzberg, </author> <title> The hB-tree: A multiattribute indexing method with good guaranteed performance, </title> <journal> ACM Trans. Database systems, </journal> <volume> 15 (1990), </volume> <pages> 625-658. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120]. <p> Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time [195, 137, 120, 36, 257, 163, 258, 255, 260]. We mention only two of the variants here: Buddy trees [257] and hB-trees <ref> [195, 120] </ref>. A buddy tree is a combination of a quad tree and kd-B-tree in the sense that rectangles are split into sub-rectangles only at some specific locations, which simplifies the split procedure; see [257] for details. <p> If points are in degenerate position, then it may not be possible to split them into two halves by a line. Lomen and Salzberg <ref> [195] </ref> circumvent this problem by introducing a new data structure, called hB-tree, in which the region associated with a node is allowed to be R 1 n R 2 where R 1 and R 2 are rectangles.
Reference: [196] <author> G. S. Lueker, </author> <title> A data structure for orthogonal range queries, </title> <booktitle> Proc. 19th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1978, </year> <pages> pp. 28-34. </pages>
Reference-contexts: Otherwise, we recursively visit both children of v. The query time of this procedure is O (log d n + k), which can be improved to O (log d1 n + k) using the fractional-cascading technique <ref> [76, 196] </ref>. A range tree can also answer a range-counting query in time O (log d1 n). Range trees are an example of a multi-level data structure, which we will discuss in more detail in Section 5.1. <p> This property has been implicitly used for a long time; see, for example, <ref> [112, 192, 196, 290, 252] </ref>. The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries.
Reference: [197] <author> J. MacDanold and K. Booth, </author> <title> Heuristics for ray tracing using space subdivision, Visual Com-put., </title> <booktitle> 6 (1990), </booktitle> <pages> 153-166. </pages>
Reference-contexts: Hershberger and Suri [164] showed that if S is the boundary of a simple polygon, then a triangulation (using Steiner points) with O (log n) crossing number can be constructed in O (n log n) time. See <ref> [5, 216, 105, 197, 283] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [5] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [198] <author> J. Matousek, </author> <title> Efficient partition trees, </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 (1992), </volume> <pages> 315-334. </pages>
Reference-contexts: His algorithm is based on the following partition theorem, which can be regarded as an extension of the result by Chazelle and Welzl. Theorem 3 (Matousek <ref> [198] </ref>). Let S be a set of n points in R d , and let 1 &lt; r n=2 be a given parameter.
Reference: [199] <author> J. Matousek, </author> <title> Reporting points in halfspaces, </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 2 (1992), </volume> <pages> 169-186. </pages> <note> 60 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: For shallow hyperplanes, Matousek proves the following theorem, which is an analog of 24 Pankaj K. Agarwal and Jeff Erickson Theorem 3. Theorem 4 (Matousek <ref> [199] </ref>). Let S be a set of n points in R d (d 4) and let 1 r &lt; n be a given parameter. <p> Size Query Time Source Reporting d = 2 n log n + k [78] Emptiness n log n [242] Reporting d = 3 n log n log n + k [16] Emptiness n log n [103] Reporting d &gt; 3 n log log n n 11=bd=2c polylog n + k <ref> [199] </ref> Emptiness n n 11=bd=2c 2 O (log fl n) [199] Table 3. Asymptotic upper bounds for halfspace range searching in near-linear space. <p> n + k [78] Emptiness n log n [242] Reporting d = 3 n log n log n + k [16] Emptiness n log n [103] Reporting d &gt; 3 n log log n n 11=bd=2c polylog n + k <ref> [199] </ref> Emptiness n n 11=bd=2c 2 O (log fl n) [199] Table 3. Asymptotic upper bounds for halfspace range searching in near-linear space. Since the query time of a linear-size simplex range-searching data structure is only a n 1=d factor better than the nave method, researchers have developed practical data structures that work well most of the time. <p> For a parameter 1 r &lt; n, we define a (1=r)- cutting for A l (H) to be a collection ffi of (relatively open) disjoint simplices that cover A l (H) and each simplex intersects at most n=r hyperplanes of H. The following theorem by Matousek <ref> [199] </ref> leads to a better data structure for answering halfspace range-reporting queries. Theorem 6 (Matousek [199]). Let H be a collection of n hyperplanes in R d , let 1 l; r &lt; n be parameters, and let q = lr=n + 1. <p> The following theorem by Matousek <ref> [199] </ref> leads to a better data structure for answering halfspace range-reporting queries. Theorem 6 (Matousek [199]). Let H be a collection of n hyperplanes in R d , let 1 l; r &lt; n be parameters, and let q = lr=n + 1. Then there exists a (1=r)-cutting for A l (H), consisting of O (r bd=2c q dd=2e ) simplices. <p> Klein et al. [184] have described an optimal data structure for a special case of 2D range-reporting in which the query ranges are translates of a polygon. Although Matousek's O (n log n)-size data structure for d-dimensional halfspace range reporting <ref> [199] </ref> can be dynamized, the logarithmic query time data structure is not easy to dynamize because some of the points may be stored at (n bd=2c ) nodes of the tree. Agarwal 38 Pankaj K. <p> Tarski cells Counting n 2+" log n [71] d = 3 Functions Reporting n 1+" log n + k [6] Fat tetrahedra Reporting m n 1+" m Simplices Counting m n d 3 Balls Counting n d+" log n [8] Balls Reporting m n m 1=dd=2e polylog n + k <ref> [199] </ref> Tarski cells Counting n 2d3+" log n [71] n fl+" log n [8] Table 7. Asymptotic upper bounds for point intersection searching. Agarwal et al. [6] extended the approach for dynamic halfspace range searching to answer point-intersection queries amid the graphs of bivariate algebraic functions, each of bounded degree.
Reference: [200] <author> J. Matousek, </author> <title> Epsilon-nets and computational geometry, in: New Trends in Discrete and Computational Geometry (J. Pach, </title> <editor> ed.), </editor> <booktitle> Algorithms and Combinatorics, </booktitle> <volume> Vol. 10, </volume> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 69-89. </pages>
Reference-contexts: Theorem 2 and some other similar results [88, 92] have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan [218], Mulmuley [223], and Anthony and Biggs [19] and the survey papers <ref> [90, 200, 256] </ref>. The first linear-size data structure with near-optimal query time for simplex range queries in the plane was developed by Welzl [280]. His algorithm is based on the following idea. <p> We therefore chose a few of these techniques that we thought were most interesting. For further details, we refer the interested reader to the books by Mulmuley [223], Preparata and Shamos [242], and Samet [251], and the survey papers by Chazelle [63], Guting [156], Matousek <ref> [200, 204] </ref>, and Nievergelt and Widmayer [226].
Reference: [201] <author> J. Matousek, </author> <title> Linear optimization queries, </title> <journal> J. Algorithms, </journal> <volume> 14 (1993), </volume> <pages> 432-448. </pages>
Reference-contexts: For d 3, such a query can be answered in O (log n) time using O (n) storage, by constructing the normal diagram of the convex polytope T h2S h and preprocessing it for point-location queries. For higher dimensions, Matousek <ref> [201] </ref> showed that, using multidimensional parametric searching and a data structure for answering halfspace emptiness queries, a linear-programming query can be answered in O ((n=m 1=bd=2c ) polylog n) with O (m) storage.
Reference: [202] <author> J. Matousek, </author> <title> On vertical ray shooting in arrangements, </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 2 (1993), </volume> <pages> 279-285. </pages>
Reference-contexts: n [100] s convex polytopes s 2 n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n <ref> [75, 202] </ref> Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c log n [205] Table 9. Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time.
Reference: [203] <author> J. Matousek, </author> <title> Range searching with efficient hierarchical cuttings, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 157-182. </pages>
Reference-contexts: For a query range fl, they determine a partition C fl = C (S; fl) F of S"fl and add the weights of the subsets in C fl to compute w (S"fl). Borrowing terminology from <ref> [203] </ref>, we will refer to such a data structure as a decomposition scheme. There is a close connection between decomposition schemes and storage schemes in the semigroup arithmetic model described earlier. <p> Another consequence of maintaining a family of partitions is that, unlike partition trees, this data structure cannot be used directly to answering simplex range queries. Instead, Chazelle et al. [82] construct a multi-level data structure (which we describe in Section 5.1) to answer simplex range queries. Matousek <ref> [203] </ref> developed a simpler, slightly faster data structure for simplex range queries, by returning to the theme of constructing a single partition, as in the earlier partition-tree papers. <p> The query time can be improved to O (n 11=d polylog n) by choosing r = n " . In a subsequent paper Matousek <ref> [203] </ref> proved a stronger version of Theorem 3, using some additional sophisticated techniques (including Theorem 5 described below), that gives a linear-size partition tree with O (n 11=d ) query time. <p> The space bound can be reduced to O (n d ) by increasing the query time to O (log d+1 n) <ref> [203] </ref>. Both data structures can answer simplex range-reporting queries by spending an additional O (k) time. The size of a data structure can be significantly improved if we want to answer halfspace range-reporting queries. <p> By combining these two types of data structures, a tradeoff between the size and the query time can be obtained <ref> [10, 82, 203] </ref>. Actually, the approach described in these papers is very general and works for any geometric-searching data structure that can be viewed as a decomposition scheme (described in Section 2), provided it satisfies certain assumptions. <p> For example, if the size of D 1 is O (n ff polylog n) and rest of the parameters are the same as in the theorem, then the query time of the new data structure is O n ff fi=(ff1) polylog m : Using a similar argument, Matousek <ref> [203] </ref> showed that a simplex range-counting query can be answered in time O ((n=m 1=d ) log d+1 (m=n)), which improves Corollary 8 when ever m = O (n d ). (ii) Theorem 7 is quite general and holds for any decomposable geometric searching problem as long as there exists an <p> | for which he obtained a lower bound of (n log m + n 2=3 m 2=3 + m log n) [118], almost matching the best known upper bound O (n log m + n 2=3 m 2=3 2 O (log fl (n+m)) + m log n), due to Matousek <ref> [203] </ref>. <p> The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries. Since their result, several papers have exploited and extended this property to solve numerous geometric-searching problems; see <ref> [10, 149, 274, 203, 238] </ref>. In this subsection we briefly sketch the general cascading scheme, as described in [203]. Let S be a set of weighted objects. Recall that a geometric-searching problem P, with underlying relation , requires computing P pfl w (p) for a query range fl. <p> Since their result, several papers have exploited and extended this property to solve numerous geometric-searching problems; see [10, 149, 274, 203, 238]. In this subsection we briefly sketch the general cascading scheme, as described in <ref> [203] </ref>. Let S be a set of weighted objects. Recall that a geometric-searching problem P, with underlying relation , requires computing P pfl w (p) for a query range fl. Let P 1 and P 2 be two geometric-searching problems, and let 1 and 2 be the corresponding relations. <p> A f -range query can now be answered using a `-dimensional halfspace range-searching data structure. Thus, for counting queries, we immediately obtain a linear-size data structure with query time O (n 11=` ) <ref> [203] </ref>, or a data structure of size O (n ` = log ` n) with logarithmic query time [62]. When d &lt; `, the performance of the linear-size data structures can be improved by exploiting the fact that the points '(x) have only d degrees of freedom.
Reference: [204] <author> J. Matousek, </author> <title> Geometric range searching, </title> <journal> ACM Comput. Surv., </journal> <volume> 26 (1994), </volume> <pages> 421-461. </pages>
Reference-contexts: Besides its direct applications, simplex range-searching data structures have provided fast algorithms for numerous other geometric problems. See the survey paper by Matousek <ref> [204] </ref> for an excellent review of techniques developed for simplex range searching. Unlike orthogonal range searching, no simplex range-searching data structure is known that can answer a query in polylogarithmic time using near-linear storage. <p> Lower bounds for emptiness problems apply to counting and reporting problems as well. No nontrivial lower bound was known for any o*ine range searching problem under the group model until Chazelle's result [64]. See the survey papers <ref> [63, 204] </ref> for a more detailed discussion on lower bounds. 5 Variants and Extensions In this section we review some extensions of range-searching data structures, including multi-level data structures, semialgebraic range searching, and dynamization. <p> We therefore chose a few of these techniques that we thought were most interesting. For further details, we refer the interested reader to the books by Mulmuley [223], Preparata and Shamos [242], and Samet [251], and the survey papers by Chazelle [63], Guting [156], Matousek <ref> [200, 204] </ref>, and Nievergelt and Widmayer [226].
Reference: [205] <author> J. Matousek and O. Schwarzkopf, </author> <title> On ray shooting in convex polytopes, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 215-232. </pages>
Reference-contexts: For the sake of clarity, we have omitted polylogarithmic factors from query times of the form n=m ff . The ray-shooting structures for d-dimensional convex polyhedra by Matousek and Schwarzkopf <ref> [205] </ref> assume that the source point of the query ray lies inside the polytope. All the ray-shooting data structures mentioned in Table 9 can be dynamized at a cost of polylogarithmic or n " factor 8 The vertices of the visibility graph are the vertices of the polygons. <p> n 2+" log 2 n [12] d = 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c <ref> [7, 205] </ref> Convex polytope n bd=2c log n [205] Table 9. Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time. Goodrich and Tamassia [143] have developed a dynamic ray-shooting data structure for connected planar subdivisions, with O (log 2 n) query and update time. <p> 3 Halfplanes m n=m 1=3 [7] Terrain m n= p Triangles m n=m 1=4 [8] Spheres n 3+" log 2 n [4] Hyperplanes m n=m 1=d [7] d &gt; 3 Hyperplanes n d log n [75, 202] Convex polytope m n=m 1=bd=2c [7, 205] Convex polytope n bd=2c log n <ref> [205] </ref> Table 9. Asymptotic upper bounds for ray shooting queries, with polylogarithmic factors omitted. in the query time. Goodrich and Tamassia [143] have developed a dynamic ray-shooting data structure for connected planar subdivisions, with O (log 2 n) query and update time.
Reference: [206] <author> J. Matousek and E. Welzl, </author> <title> Good splitters for counting points in triangles, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 307-319. </pages>
Reference-contexts: Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K. Agarwal and Jeff Erickson to solve a number of other algorithmic as well as combinatorial problems; see, for example, [3, 85, 109, 207, 234, 281]. Matousek and Welzl <ref> [206] </ref> gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [116]. The query time of their data structure is O ( p n log n), and it uses O (n) space and O (n 3=2 ) preprocessing time.
Reference: [207] <author> J. Matousek, E. Welzl, and L. Wernisch, </author> <title> Discrepancy and "-approximations for bounded VC-dimension, </title> <journal> Combinatorica, </journal> <volume> 13 (1993), </volume> <pages> 455-466. </pages>
Reference-contexts: Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K. Agarwal and Jeff Erickson to solve a number of other algorithmic as well as combinatorial problems; see, for example, <ref> [3, 85, 109, 207, 234, 281] </ref>. Matousek and Welzl [206] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [116].
Reference: [208] <author> E. M. McCreight, </author> <title> Priority search trees, </title> <journal> SIAM J. Comput., </journal> <volume> 14 (1985), </volume> <pages> 257-276. </pages>
Reference-contexts: If the query rectangles are "three-sided rectangles" of the form [a 1 ; b 1 ] fi [a 2 ; 1], then one can use a priority search tree of size O (n) to answer a planar range-reporting query in time O (log n + k) <ref> [208] </ref>.
Reference: [209] <author> M. R. Mediano, M. A. Casanova, and M. Dreux, V-trees: </author> <title> A storage method for long vector data, </title> <booktitle> Proc. 20th VLDB Conference, </booktitle> <year> 1994, </year> <pages> pp. 321-329. </pages>
Reference-contexts: If the polygons in S are large, then this scheme is not efficient, especially if we want to clip the query output within the query rectangle. A few data structures, for example, strip trees [32] and V-trees <ref> [209] </ref>, have been proposed that store each polygon hierarchically. We can use these data structures to store each polygon and then construct an R-tree or any other orthogonal range-searching data structure on the smallest enclosing rectangles of the polygons.
Reference: [210] <author> N. Megiddo, </author> <title> Applying parallel computation algorithms in the design of serial algorithms, </title> <journal> J. ACM, </journal> <volume> 30 (1983), </volume> <pages> 852-865. </pages>
Reference-contexts: This problem arises in ray tracing, hidden-surface removal, radiosity, and other graphics problems. Recently, efficient solutions to many other geometric problems have also been developed using ray-shooting data structures. A general approach to the ray-shooting problem, using segment intersection-detection structures and Megiddo's parametric searching technique <ref> [210] </ref>, was proposed by Agarwal and Matousek [7]. Suppose we have a segment intersection-detection data structure for S. Let be a query ray. Their algorithm maintains a segment ab such that the first intersection point of ab with S is the same as that of .
Reference: [211] <author> K. Mehlhorn, </author> <title> Multi-dimensional Searching and Computational Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: Because of its numerous applications, orthogonal range searching has been studied extensively for the last 25 years. A survey of earlier results can be found in the books by Mehlhorn <ref> [211] </ref> and Preparata and Shamos [242]. In this section we review more recent data structures and lower bounds. 3.1 Upper bounds Most of the recent orthogonal range-searching data structures are based on range trees, introduced by Bentley [42]. <p> If we allow only insertions (i.e., a point cannot be deleted from the structure), static data structures can be modified using standard techniques <ref> [44, 211, 230] </ref>, so that a point can be inserted in time O (P (n) log n=n) and a query can be answered in time O (Q (n) log n), where Q (n) is the query time of the original static data structure. Roughly speaking, these techniques proceed as follows.
Reference: [212] <author> K. Mehlhorn and S. Naher, </author> <title> Dynamic fractional cascading, </title> <journal> Algorithmica, </journal> <volume> 5 (1990), </volume> <pages> 215-241. </pages>
Reference-contexts: Agarwal 38 Pankaj K. Agarwal and Jeff Erickson Problem Size Query Time Update Time Source Counting n log 2 n log 2 n [58] n k log 2 (2n=k) log 2 n [58] Reporting n log n log n log log n + k log n log log n <ref> [212] </ref> n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [58] Table 6. <p> If we also allow insertions and deletions, the query and update time are respectively O (log n log log n + k) and O (log n log log n) <ref> [212] </ref>, or O (log 2 n + k) and O (log n) using only linear space [84]; if we allow only insertions, the query and update time become O (log n + k) and O (log n) [173]. A problem related to segment intersection searching is the stabbing problem.
Reference: [213] <author> H. Mehrotra and J. E. Gary, </author> <title> Feature-based retrieval of similar shapes, </title> <booktitle> Proc. 9th IEEE Intl. Conf. on Data Engineering, </booktitle> <year> 1996, </year> <pages> pp. 108-115. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD <ref> [213] </ref>, molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions.
Reference: [214] <author> S. Meiser, </author> <title> Point location in arrangements of hyperplanes, </title> <journal> Inform. Comput., </journal> <volume> 106 (1993), </volume> <pages> 286-303. </pages>
Reference-contexts: For higher dimensions, Clarkson [89] presented a data structure of size O (n dd=2e+" ) that can answer a query in 2 O (d) log n time. The query time can be improved to O (d 3 log n), using a technique of Meiser <ref> [214] </ref>. A nearest-neighbor query for a set of points under the Euclidean metric can be formulated as an instance of the ray-shooting problem in a convex polyhedron in R d+1 , as follows.
Reference: [215] <author> J. S. B. Mitchell, </author> <title> Shortest paths among obstacles in the plane, </title> <booktitle> Proc. 9th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1993, </year> <pages> pp. 308-317. </pages>
Reference-contexts: Instead of dragging a segment along a ray, one can ask the same question for dragging along a more complex trajectory (along a curve and allowing both translation and rotation). These problems arise quite often in motion planning and manufacturing. See <ref> [215, 253] </ref> for a few such examples. 8 Concluding Remarks In this survey paper we reviewed both theoretical and practical data structures for range searching. Theoretically optimal or near-optimal data structures are known for most range searching problems.
Reference: [216] <author> J. S. B. Mitchell, D. M. Mount, and S. Suri, </author> <title> Query-sensitive ray shooting, </title> <booktitle> Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> pp. 359-368. </pages>
Reference-contexts: Hershberger and Suri [164] showed that if S is the boundary of a simple polygon, then a triangulation (using Steiner points) with O (log n) crossing number can be constructed in O (n log n) time. See <ref> [5, 216, 105, 197, 283] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [5] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [217] <author> G. Morton, </author> <title> A computer oriented geodetic data base and a new technique in file sequencing, </title> <type> Tech. Rep., </type> <institution> IBM Ltd., </institution> <address> Ottawa, Canada, </address> <year> 1966. </year>
Reference-contexts: A better scheme for ordering the points is the bit-interleaving method, proposed by Morton <ref> [217] </ref>.
Reference: [218] <author> R. Motwani and P. Raghavan, </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1995. </year> <title> Geometric Range Searching and Its Relatives 61 </title>
Reference-contexts: Theorem 2 and some other similar results [88, 92] have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan <ref> [218] </ref>, Mulmuley [223], and Anthony and Biggs [19] and the survey papers [90, 200, 256]. The first linear-size data structure with near-optimal query time for simplex range queries in the plane was developed by Welzl [280]. His algorithm is based on the following idea.
Reference: [219] <author> J. Mullin, </author> <title> Spiral storage: Efficient dynamic hashing with constant-performance, </title> <journal> The Computer Journal, </journal> <volume> 28 (1985), </volume> <pages> 330-334. </pages>
Reference-contexts: See [1, 30, 126, 175] for a comparison of the performance of various space-filling curves in the context of range searching. Since B-trees require extra space to store pointers, several hashing schemes, including linear hashing [189], dynamic z-hashing [171] and spiral hashing schemes <ref> [219] </ref> are proposed to minimize the size of the data structure.
Reference: [220] <author> K. Mulmuley, </author> <title> A fast planar partition algorithm, I, </title> <journal> J. Symbolic Comput., </journal> <volume> 10 (1990), </volume> <pages> 253-280. </pages>
Reference-contexts: The major contribution of their paper is the abstract framework and the notion of "-nets. A somewhat different abstract framework for randomized algorithms was proposed by Clarkson [88, 92] around the same time; see also <ref> [220] </ref>. These abstract frameworks and the general results attained under these frameworks popularized randomized algorithms in computational geometry [223]. We briefly describe the framework and the main result by Haussler and Welzl because they are most pertinent to range searching.
Reference: [221] <author> K. Mulmuley, </author> <title> Randomized multidimensional search trees: Dynamic sampling, </title> <booktitle> Proc. 7th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1991, </year> <pages> pp. 121-131. </pages>
Reference-contexts: Their technique gives efficient solutions to many other order-decomposable problems involving split and merge operations, including external-memory range searching. Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see <ref> [221, 222, 254] </ref>. Mulmuley [221] proposed a reasonably simple data structure for halfspace range reporting that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a query in time O (k log n). <p> Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see [221, 222, 254]. Mulmuley <ref> [221] </ref> proposed a reasonably simple data structure for halfspace range reporting that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a query in time O (k log n).
Reference: [222] <author> K. Mulmuley, </author> <title> Randomized multidimensional search trees: Further results in dynamic sampling, </title> <booktitle> Proc. 32nd Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1991, </year> <pages> pp. 216-227. </pages>
Reference-contexts: Their technique gives efficient solutions to many other order-decomposable problems involving split and merge operations, including external-memory range searching. Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see <ref> [221, 222, 254] </ref>. Mulmuley [221] proposed a reasonably simple data structure for halfspace range reporting that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a query in time O (k log n).
Reference: [223] <author> K. Mulmuley, </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference-contexts: A somewhat different abstract framework for randomized algorithms was proposed by Clarkson [88, 92] around the same time; see also [220]. These abstract frameworks and the general results attained under these frameworks popularized randomized algorithms in computational geometry <ref> [223] </ref>. We briefly describe the framework and the main result by Haussler and Welzl because they are most pertinent to range searching. A range space is a set system = (X; R) where X is a set of objects and R is a family of subsets of X. <p> Theorem 2 and some other similar results [88, 92] have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan [218], Mulmuley <ref> [223] </ref>, and Anthony and Biggs [19] and the survey papers [90, 200, 256]. The first linear-size data structure with near-optimal query time for simplex range queries in the plane was developed by Welzl [280]. His algorithm is based on the following idea. <p> We therefore chose a few of these techniques that we thought were most interesting. For further details, we refer the interested reader to the books by Mulmuley <ref> [223] </ref>, Preparata and Shamos [242], and Samet [251], and the survey papers by Chazelle [63], Guting [156], Matousek [200, 204], and Nievergelt and Widmayer [226].
Reference: [224] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik, </author> <title> The grid file: An adaptable, symmetric multi-key file structure, </title> <journal> ACM Trans. Database Systems, </journal> <volume> 9 (1984), </volume> <pages> 38-71. </pages>
Reference-contexts: In order to minimize the number of disk accesses, one can partition the square into many squares (instead of four) by a drawing either a uniform or a nonuniform grid. The grid file, introduced by Nievergelt et al. <ref> [224] </ref> is based on this idea. Since grid files are used frequently in geographic information systems, we describe them briefly. A grid file partitions the plane into a nonuniform grid by drawing horizontal and vertical lines.
Reference: [225] <author> J. Nievergelt and P. Widmayer, </author> <title> Guard files: Stabbing and intersection queries on fat spatial objects, </title> <journal> The Computer Journal, </journal> <volume> 36 (1993), </volume> <pages> 107-116. </pages>
Reference-contexts: We can use these data structures to store each polygon and then construct an R-tree or any other orthogonal range-searching data structure on the smallest enclosing rectangles of the polygons. Nievergelt and Widmayer <ref> [225] </ref> describe another data structure, called a guard file, which is suitable if the polygons are fat (have bounded aspect ratio). They place a set of well-chosen points, called guards, and associate a subset of polygons with each guard that either contain the guard or lie "near" the guard.
Reference: [226] <author> J. Nievergelt and P. Widmayer, </author> <title> Spatial data structures: Concepts and design choices, </title> <type> unpublished manuscript, </type> <year> 1996. </year>
Reference-contexts: For the sake of simplicity, we will present most of the data structures in two dimensions. The book by Samet [251] is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers <ref> [145, 156, 169, 226, 227] </ref>. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants [35, 96]. <p> For further details, we refer the interested reader to the books by Mulmuley [223], Preparata and Shamos [242], and Samet [251], and the survey papers by Chazelle [63], Guting [156], Matousek [200, 204], and Nievergelt and Widmayer <ref> [226] </ref>.
Reference: [227] <author> J. Orenstein, </author> <title> A comparison of spatial query processing techniques for native and parameter spaces, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1990, </year> <pages> pp. 343-352. </pages>
Reference-contexts: For the sake of simplicity, we will present most of the data structures in two dimensions. The book by Samet [251] is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers <ref> [145, 156, 169, 226, 227] </ref>. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants [35, 96].
Reference: [228] <author> J. Orenstein and T. Merrett, </author> <title> A class of data structures for associative searching, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1984, </year> <pages> pp. 181-190. </pages>
Reference-contexts: A B-tree storing points based on the bit-interleaving ordering is referred to as an N-tree [285] or a zkd-tree <ref> [228] </ref> in the literature. See [251] for a more detailed discussion on the applications of bit interleaving in spatial data structures. Faloutsos [121] suggested using Gray codes to define a linear order on points.
Reference: [229] <author> M. Ouksel, </author> <title> The interpolation-based grid file, </title> <booktitle> Proc. ACM Sympos. Principles of Database Systems, </booktitle> <year> 1985, </year> <pages> pp. 20-27. </pages>
Reference-contexts: This notion of a hierarchical grid file was proposed by Hinrichs [165] and Krishnamurthy and Wang [190]. A related data structure, known as the BANG file, was proposed by Freestone [136]; other variants of grid files are proposed in <ref> [165, 172, 229] </ref>. Quad trees, grid files, and their variants construct a grid on a rectangle containing all the input points. One can instead partition the enclosing rectangle into two rectangles by drawing a horizontal or a vertical line and partitioning each of the two rectangles independently.
Reference: [230] <author> M. H. Overmars, </author> <title> The Design of Dynamic Data Structures, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1983. </year>
Reference-contexts: If we allow only insertions (i.e., a point cannot be deleted from the structure), static data structures can be modified using standard techniques <ref> [44, 211, 230] </ref>, so that a point can be inserted in time O (P (n) log n=n) and a query can be answered in time O (Q (n) log n), where Q (n) is the query time of the original static data structure. Roughly speaking, these techniques proceed as follows.
Reference: [231] <author> M. H. Overmars, </author> <title> Efficient data structures for range searching on a grid, </title> <journal> J. Algorithms, </journal> <volume> 9 (1988), </volume> <pages> 254-275. </pages>
Reference-contexts: Fusion trees were introduced by Fredman and Willard [129] for an O (n p log n) sorting algorithm in a RAM model that allows bitwise logical operations. Overmars <ref> [231] </ref> showed that if S is a subset of a ufiu grid U in the plane and the vertices of query rectangles are also a subset of U , then a range-reporting query can be answered in time O ( p log u + k), using O (n log n) storage
Reference: [232] <author> M. H. Overmars, M. H. M. Smid, M. T. de Berg, and M. J. van Kreveld, </author> <title> Maintaining range trees in secondary memory, part I: Partitions, </title> <journal> Acta Inform., </journal> <volume> 27 (1990), </volume> <pages> 423-452. </pages>
Reference-contexts: The main idea underlying these structures is to construct high-degree trees instead of binary trees. For example, variants of B-trees are used to answer 1-dimensional range-searching queries [35, 96]. A number of additional tricks are developed to optimize the size and the query time. See <ref> [20, 21, 232] </ref> for I/O efficient data structures that have been used for answering range searching and related queries. Table 2 summarizes the known results on secondary-memory structures for orthogonal range searching.
Reference: [233] <author> M. H. Overmars and A. F. van der Stappen, </author> <title> Range searching and point location among fat objects, </title> <editor> Algorithms - ESA'94 (J. van Leeuwen, ed.), </editor> <booktitle> Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 855, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 240-253. </pages>
Reference-contexts: Its query time is O (log n + 1=ffi d1 ). Overmars and van der Stappen <ref> [233] </ref> developed fast data structures for the special case in which the ranges are "fat" and have bounded size. In practice, the data structures described in Section 3.4 are used even for simplex range searching. Recently, Goldstein et al. [141] presented an algorithm for simplex range searching using R-trees.
Reference: [234] <author> J. Pach, </author> <title> Notes on geometric graph theory, </title> <note> in: Discrete and Computational Geometry: Papers from the DIMACS Special Year (J. </note> <editor> E. Goodman, R. Pollack, and W. Steiger, eds.), </editor> <publisher> American Mathematical Society, </publisher> <year> 1991, </year> <pages> pp. 273-285. </pages>
Reference-contexts: Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K. Agarwal and Jeff Erickson to solve a number of other algorithmic as well as combinatorial problems; see, for example, <ref> [3, 85, 109, 207, 234, 281] </ref>. Matousek and Welzl [206] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [116].
Reference: [235] <author> B.-U. Pagel, H.-W. Six, and H. Toben, </author> <title> The transformation technique for spatial objects revisited, </title> <booktitle> in: Proc. 3rd Intl. Symp. on Large Spatial Databases, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 692, </volume> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 73-88. </pages> <note> 62 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: Many heuristic data structures based on this scheme have been proposed; see <ref> [125, 235, 257] </ref> for a sample of such results. The second approach is to construct a data structure on S directly in R d . The most popular data structure based on this approach is the R-tree, originally introduced by Guttman [157].
Reference: [236] <author> A. Papadpoulos and Y. Manolopoulos, </author> <title> Performance of nearest neighbor queries in R-trees, </title> <booktitle> in: Proc. 6th Intl. Conf. Database Theory, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 1186, </volume> <year> 1997, </year> <pages> pp. 394-408. </pages>
Reference-contexts: For large input sets, one desires an algorithm that minimizes the number of disk accesses. Many of the heuristics mentioned above try to optimize the I/O efficiency, though none of them gives any performance guarantee. A few recent papers <ref> [24, 46, 236, 93] </ref> analyze the efficiency of some of the heuristics, under certain assumptions on the input. 7.3 Linear programming queries Let S be a set of n halfspaces in R d .
Reference: [237] <author> M. S. Paterson and F. F. Yao, </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling, </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> 485-503. </pages>
Reference-contexts: One can instead associate a convex polygon B v with each node v of the tree, use an arbitrary line to partition B v into two convex polygons, and associate the two polygons with the children of v. This idea is the same as in binary space partition trees <ref> [139, 237] </ref>. Again, one can construct a B-tree on this recursive partitioning scheme to reduce the number of disk accesses. The resulting structure called cell trees is studied in [150, 151].
Reference: [238] <author> M. Pellegrini, </author> <title> Ray shooting on triangles in 3-space, </title> <journal> Algorithmica, </journal> <volume> 9 (1993), </volume> <pages> 471-494. </pages>
Reference-contexts: The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries. Since their result, several papers have exploited and extended this property to solve numerous geometric-searching problems; see <ref> [10, 149, 274, 203, 238] </ref>. In this subsection we briefly sketch the general cascading scheme, as described in [203]. Let S be a set of weighted objects. Recall that a geometric-searching problem P, with underlying relation , requires computing P pfl w (p) for a query range fl.
Reference: [239] <author> M. Pellegrini, </author> <title> On point location and motion planning among simplices, </title> <booktitle> Proc. 25th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1994, </year> <pages> pp. 95-104. </pages>
Reference-contexts: Moreover, ffi 1 ; : : : ; ffi k can be computed in time O (nr d1 ). This theorem has been successfully applied to many geometric divide-and-conquer algorithms; see <ref> [2, 62, 99, 239] </ref> for a few such instances. Returning to halfspace range searching, suppose that the query halfspace always lies below its bounding hyperplane.
Reference: [240] <author> M. Pellegrini and P. Shor, </author> <title> Finding stabbing lines in 3-space, </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 (1992), </volume> <pages> 191-208. </pages>
Reference-contexts: Such queries can also be answered efficiently using semialgebraic range-searching data structures. A line-stabbing query amid a set of triangles in R 3 can be answered in O (log n) time using O (n 2+" ) storage <ref> [240] </ref>. The paper by Goodman et al. [142] is an excellent survey of this topic. 6.3 Rectangle intersection searching Given a set S of polygons in the plane, preprocess them into a data structure so that all objects intersecting a query rectangle can be reported efficiently.
Reference: [241] <author> M. Pocchiola and G. Vegter, Pseudo-triangulations: </author> <title> Theory and applications, </title> <booktitle> Proc. 12th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1996, </year> <pages> pp. 291-300. </pages>
Reference-contexts: Simpler data structures were subsequently proposed by Chazelle et al. [69] and Hershberger and Suri [164]. Following a similar approach, Pocchiola and Vegter <ref> [241] </ref> showed that a ray-shooting query amid a set P of s disjoint convex polygons, with a total of n vertices, can be answered in O (log n) time, using O (n + m) space, where m = O (s 2 ) is the size of the visibility graph of P. <p> and Its Relatives 45 d Objects Size Query Time Source Simple polygon n log n [164] s disjoint simple polygons n p s disjoint simple polygons (s 2 + n) log s log s log n [11] d = 2 s disjoint convex polygons s 2 + n log n <ref> [241] </ref> s convex polygons sn log s log s log n [11] Segments m n= p Circular arcs m n=m 1=3 [15] Disjoint arcs n p Convex polytope n log n [104] c-oriented polytopes n log n [100] s convex polytopes s 2 n 2+" log 2 n [12] d =
Reference: [242] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: data structures for intersection searching and optimization queries in Sections 6 and 7, respectively. 2 Models of Computation Most algorithms and data structures in computational geometry are implicitly described in the familiar random access machine (RAM) model, described in [17], or the real RAM model described by Preparata and Shamos <ref> [242] </ref>. In the traditional RAM model, memory cells can contain arbitrary (log n)-bit integers, which can be added, multiplied, subtracted, divided (computing bx=yc), compared, and used as pointers to other memory cells in constant time. <p> Because of its numerous applications, orthogonal range searching has been studied extensively for the last 25 years. A survey of earlier results can be found in the books by Mehlhorn [211] and Preparata and Shamos <ref> [242] </ref>. In this section we review more recent data structures and lower bounds. 3.1 Upper bounds Most of the recent orthogonal range-searching data structures are based on range trees, introduced by Bentley [42]. <p> Consequently, the query time and the size of the data structure can be improved slightly; see Table 3 for a summary of results. Problem d Size Query Time Source Reporting d = 2 n log n + k [78] Emptiness n log n <ref> [242] </ref> Reporting d = 3 n log n log n + k [16] Emptiness n log n [103] Reporting d &gt; 3 n log log n n 11=bd=2c polylog n + k [199] Emptiness n n 11=bd=2c 2 O (log fl n) [199] Table 3. <p> For d = 2, one can construct the Voronoi diagram of S and preprocess it for point-location queries in O (n log n) time <ref> [242] </ref>. For higher dimensions, Clarkson [89] presented a data structure of size O (n dd=2e+" ) that can answer a query in 2 O (d) log n time. The query time can be improved to O (d 3 log n), using a technique of Meiser [214]. <p> We therefore chose a few of these techniques that we thought were most interesting. For further details, we refer the interested reader to the books by Mulmuley [223], Preparata and Shamos <ref> [242] </ref>, and Samet [251], and the survey papers by Chazelle [63], Guting [156], Matousek [200, 204], and Nievergelt and Widmayer [226].
Reference: [243] <author> V. Ramasubramanian and K. K. Paliwal, </author> <title> Fast k-dimensional tree algorithms for nearest neighbor search with applications to vector quantization encoding, </title> <journal> IEEE Trans. Signal Processing, </journal> <volume> 40 (1992), </volume> <pages> 518-531. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression <ref> [25, 243] </ref>, information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions.
Reference: [244] <author> S. Ramaswamy and S. Subramanian, </author> <title> Path caching: A technique for optimal external searching, </title> <booktitle> Proc. 13th Annu. ACM Sympos. Principles Database Syst., </booktitle> <year> 1994, </year> <pages> pp. 25-35. </pages>
Reference-contexts: a very small constant, the time to answer a typical query should be small | the lower Geometric Range Searching and Its Relatives 13 d Range Size Query Time Source d = 1 Interval N Log n + k=B [35, 96] Quadrant N log log B Log n + k=B <ref> [244] </ref> 3-sided rectangle N Log n + k=B + log fl B [270] d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B + log fl B [270] Rectangle cN k=B 11=2c [270] d <p> Time Source d = 1 Interval N Log n + k=B [35, 96] Quadrant N log log B Log n + k=B <ref> [244] </ref> 3-sided rectangle N Log n + k=B + log fl B [270] d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B + log fl B [270] Rectangle cN k=B 11=2c [270] d = 3 Octant N log N fi (n) Log n + k=B [277] Rectangle N log 4 N fi (n) Log n + k=B [277] Table 2.
Reference: [245] <author> J. T. Robinson, </author> <title> The k-d-b-tree: a search structure for large multidimensional dynamic indexes, </title> <booktitle> Proc. ACM SIGACT-SIGMOD Conf. Principles Database Systems, </booktitle> <year> 1981, </year> <pages> pp. 10-18. </pages>
Reference-contexts: A kd-tree can be extended to higher dimensions in an obvious manner. In order to minimize the number of disk accesses, Robinson <ref> [245] </ref> suggested the following generalization of a kd-tree, which is known as a kd-B-tree. One can construct a B-tree 16 Pankaj K.
Reference: [246] <author> N. Roussopoulos, S. Kelley, and F. Vincent, </author> <title> Nearest neighbor queries, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1995, </year> <pages> pp. 71-79. </pages>
Reference-contexts: of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems <ref> [246, 266] </ref>. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors. <p> Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [247] <author> N. Roussopoulos, Y. Kotidis, and M. Roussopoulos, Cubetree: </author> <title> Organization of and bulk incremental updates on the data cube, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1997, </year> <pages> pp. 89-99. </pages>
Reference-contexts: Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes <ref> [152, 159, 168, 262, 167, 247] </ref>.
Reference: [248] <author> H. Sagan, </author> <title> Space-Filling Curves, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: However, the same term often refers to approximations of space-filling curves that visit every point in a cubical lattice, such as the curves drawn in Figure 2. See the book by Sagan <ref> [248] </ref> for a detailed discussion on space-filling curves and [48] for some other applications of these curves. 14 Pankaj K.
Reference: [249] <author> G. Salton, </author> <title> Automatic Text Processing, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval <ref> [124, 249] </ref>, CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions.
Reference: [250] <author> H. Samet, </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: For example, they were used as early as in 1920's, by Weyl [282] for computing the complex roots of a univariate polynomial approximately; Greengard used them for the so-called n-body problem [146]. See the book by Samet <ref> [250, 251] </ref> for a detailed discussion on quad trees and their applications. One disadvantage to quad trees is that arbitrarily many levels of partitioning may be required to separate tightly clustered points.
Reference: [251] <author> H. Samet, </author> <title> The Design and Analysis of Spatial Data Structures, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: We will sketch the general ideas and mention some of the data structures in a little detail. For the sake of simplicity, we will present most of the data structures in two dimensions. The book by Samet <ref> [251] </ref> is an excellent survey of data structures developed in 1970's and 80's; more recent results are described in the survey papers [145, 156, 169, 226, 227]. The most widely used data structures for answering 1-dimensional range queries are B-trees and their variants [35, 96]. <p> A B-tree storing points based on the bit-interleaving ordering is referred to as an N-tree [285] or a zkd-tree [228] in the literature. See <ref> [251] </ref> for a more detailed discussion on the applications of bit interleaving in spatial data structures. Faloutsos [121] suggested using Gray codes to define a linear order on points. <p> For example, they were used as early as in 1920's, by Weyl [282] for computing the complex roots of a univariate polynomial approximately; Greengard used them for the so-called n-body problem [146]. See the book by Samet <ref> [250, 251] </ref> for a detailed discussion on quad trees and their applications. One disadvantage to quad trees is that arbitrarily many levels of partitioning may be required to separate tightly clustered points. <p> We therefore chose a few of these techniques that we thought were most interesting. For further details, we refer the interested reader to the books by Mulmuley [223], Preparata and Shamos [242], and Samet <ref> [251] </ref>, and the survey papers by Chazelle [63], Guting [156], Matousek [200, 204], and Nievergelt and Widmayer [226].
Reference: [252] <author> H. W. Scholten and M. H. Overmars, </author> <title> General methods for adding range restrictions to decomposable searching problems, </title> <journal> J. Symbolic Comput., </journal> <volume> 7 (1989), </volume> <pages> 1-10. </pages>
Reference-contexts: This property has been implicitly used for a long time; see, for example, <ref> [112, 192, 196, 290, 252] </ref>. The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries. <p> Multi-level data structures were also proposed for range restriction, introduced by Willard 34 Pankaj K. Agarwal and Jeff Erickson and Lueker [290] and Scholten and Overmars <ref> [252] </ref>. The following theorem, whose straightforward proof we omit, states a general result for multi-level data structures. Theorem 10. Let S; P 1 ; P 2 ; D 1 ; D 2 be as defined above, and let r be a constant.
Reference: [253] <author> E. Schomer and C. Thiel, </author> <title> Efficient collision detection for moving polyhedra, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. </pages> <month> 51-60. </month> <title> Geometric Range Searching and Its Relatives 63 </title>
Reference-contexts: Instead of dragging a segment along a ray, one can ask the same question for dragging along a more complex trajectory (along a curve and allowing both translation and rotation). These problems arise quite often in motion planning and manufacturing. See <ref> [215, 253] </ref> for a few such examples. 8 Concluding Remarks In this survey paper we reviewed both theoretical and practical data structures for range searching. Theoretically optimal or near-optimal data structures are known for most range searching problems.
Reference: [254] <author> O. Schwarzkopf, </author> <title> Dynamic maintenance of geometric structures made easy, </title> <booktitle> Proc. 32nd Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1991, </year> <pages> pp. 197-206. </pages>
Reference-contexts: Their technique gives efficient solutions to many other order-decomposable problems involving split and merge operations, including external-memory range searching. Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see <ref> [221, 222, 254] </ref>. Mulmuley [221] proposed a reasonably simple data structure for halfspace range reporting that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a query in time O (k log n).
Reference: [255] <author> B. Seeger and H.-P. Kriegel, </author> <title> The buddy-tree: An efficient and robust access method for spatial data base systems, </title> <booktitle> Proc. 16th VLDB Conference, </booktitle> <year> 1990, </year> <pages> pp. 590-601. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120].
Reference: [256] <author> R. Seidel, </author> <title> Backwards analysis of randomized geometric algorithms, in: New Trends in Discrete and Computational Geometry (J. Pach, </title> <editor> ed.), </editor> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, Germany, </address> <year> 1993, </year> <pages> pp. 37-68. </pages>
Reference-contexts: Theorem 2 and some other similar results [88, 92] have been used extensively in computational geometry and learning theory; see the books by Motwani and Raghavan [218], Mulmuley [223], and Anthony and Biggs [19] and the survey papers <ref> [90, 200, 256] </ref>. The first linear-size data structure with near-optimal query time for simplex range queries in the plane was developed by Welzl [280]. His algorithm is based on the following idea.
Reference: [257] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos, </author> <title> The R + -tree: A dynamic index for multidimensional objects, </title> <booktitle> Proc. 13th VLDB Conference, </booktitle> <year> 1987, </year> <pages> pp. 507-517. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120]. <p> Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time [195, 137, 120, 36, 257, 163, 258, 255, 260]. We mention only two of the variants here: Buddy trees <ref> [257] </ref> and hB-trees [195, 120]. A buddy tree is a combination of a quad tree and kd-B-tree in the sense that rectangles are split into sub-rectangles only at some specific locations, which simplifies the split procedure; see [257] for details. <p> We mention only two of the variants here: Buddy trees <ref> [257] </ref> and hB-trees [195, 120]. A buddy tree is a combination of a quad tree and kd-B-tree in the sense that rectangles are split into sub-rectangles only at some specific locations, which simplifies the split procedure; see [257] for details. If points are in degenerate position, then it may not be possible to split them into two halves by a line. <p> Many heuristic data structures based on this scheme have been proposed; see <ref> [125, 235, 257] </ref> for a sample of such results. The second approach is to construct a data structure on S directly in R d . The most popular data structure based on this approach is the R-tree, originally introduced by Guttman [157]. <p> overlap; a Hilbert-R-tree [179] defines a linear ordering on the rectangles, by sorting their centers along the Hilbert space-filling curve, and constructs a B Geometric Range Searching and Its Relatives 19 tree based on this ordering of rectangles; and an R + -tree avoids overlapping directory cells by clipping rectangles <ref> [257] </ref>. Additional variants are suggested to avoid overlap in higher dimensions.
Reference: [258] <author> K. Sevcik and N. Koudas, </author> <title> Filter trees for managing spatial data over a range of size granu-larities, </title> <booktitle> Proc. 22nd VLDB Conference, </booktitle> <year> 1996, </year> <pages> pp. 16-27. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120].
Reference: [259] <author> M. Sharir and P. K. Agarwal, </author> <title> Davenport-Schinzel Sequences and Their Geometric Applications, </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: These functions go extremely slowly; for example, ff (n) 4 for all n 2 " (2 " (2 " 2)) = 2 " 2 16 , where for any positive integer k, 2 " k = 2 2"(k1) denotes an exponential tower of k twos. For formal definitions, see <ref> [259] </ref>. 18 Pankaj K. Agarwal and Jeff Erickson 3.6 Rectangle-Rectangle Searching Preprocess a set S of n rectangles in R d so that for a query rectangle q, the rectangles of S that intersect q can be reported (or counted) efficiently.
Reference: [260] <author> K. Shim, R. Srikant, and R. Agrawarl, </author> <title> High-dimensional similarity joins, </title> <booktitle> Proc. 13th IEEE Internat. Conf. on Data Engineering, </booktitle> <year> 1997, </year> <pages> pp. 301-311. </pages>
Reference-contexts: Several variants of kd-B-trees have been proposed to minimize the number of splits, to optimize the space, and to improve the query time <ref> [195, 137, 120, 36, 257, 163, 258, 255, 260] </ref>. We mention only two of the variants here: Buddy trees [257] and hB-trees [195, 120].
Reference: [261] <author> B. K. Shoichet, D. L. Bodian, and I. D. Kuntz, </author> <title> Molecular docking using shape descriptors, </title> <journal> J. Computational Chemistry, </journal> <volume> 13 (1992), </volume> <pages> 380-397. </pages>
Reference-contexts: This is one of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology <ref> [261] </ref>, image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems [246, 266]. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors.
Reference: [262] <author> A. Shoshani, </author> <title> OLAP and statistical databases: Similarities and differences, </title> <booktitle> Proc. ACM Sym-pos. Principles of Database Systems, </booktitle> <year> 1997, </year> <pages> pp. 185-196. </pages>
Reference-contexts: Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes <ref> [152, 159, 168, 262, 167, 247] </ref>.
Reference: [263] <author> M. Smid, </author> <title> Algorithms for semi-online updates on decomposable problems, </title> <booktitle> Proc. 2nd Canad. Conf. </booktitle> <institution> Comput. Geom., </institution> <year> 1990, </year> <pages> pp. 347-350. </pages>
Reference-contexts: The amortized insertion time is O ( P t1 i=0 P (r i )=r i ). We can convert this amortized behavior into a worst-case performance using known techniques <ref> [263] </ref>. In some cases the logarithmic overheard in the query or update time can be avoided. <p> These techniques work even if the sequence of insertions and queries is not known in advance, but the deletion time of a point is known when it is inserted [106]; see also <ref> [263] </ref>. See the survey paper by Chiang and Tamassia [86] for a more detailed review of dynamic geometric data structures. Geometric Range Searching and Its Relatives 39 6 Intersection Searching A general intersection-searching problem can be formulated as follows.
Reference: [264] <author> M. Smid, </author> <title> Maintaining the minimal distance of a point set in less than linear time, </title> <journal> Algorithms Rev., </journal> <volume> 2 (1991), </volume> <pages> 33-44. </pages>
Reference: [265] <author> D. M. H. Sommerville, </author> <title> Analytical Geometry in Three Dimensions, </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1951. </year>
Reference-contexts: One of the most widely used linearizations in computational geometry uses the so-called Plucker coordinates, which map a line in R 3 to a point in R 5 ; see <ref> [73, 265, 268] </ref> for more details on Plucker coordinates. A f -range query can now be answered using a `-dimensional halfspace range-searching data structure.
Reference: [266] <author> R. F. Sproull, </author> <title> Refinements to nearest-neighbor searching, </title> <journal> Algorithmica, </journal> <volume> 6 (1991), </volume> <pages> 579-589. </pages>
Reference-contexts: of the most widely studied problems in computational geometry because it arises in so many different areas, including pattern recognition [98, 107], data compression [25, 243], information retrieval [124, 249], CAD [213], molecular biology [261], image analysis [186, 188], data mining [123, 160], machine learning [97], and geographic information systems <ref> [246, 266] </ref>. Most applications use so-called feature vectors to map a complex object to a point in high dimensions. Examples of feature vectors include color histograms, shape descriptors, Fourier vectors, and text descriptors. <p> Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions. These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. <ref> [138, 166, 188, 186, 123, 160, 246, 266] </ref>. White and Jain [284] described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181].
Reference: [267] <author> J. M. Steele and A. C. Yao, </author> <title> Lower bounds for algebraic decision trees, </title> <journal> J. Algorithms, </journal> <volume> 3 (1982), </volume> <pages> 1-8. </pages>
Reference-contexts: Agarwal and Jeff Erickson (n (log n= log log n) d1 ) time in the semigroup model, and (n log log n) time in the group model. An (n log n) lower bound also holds in the algebraic decision tree and algebraic computation tree models <ref> [267, 40] </ref>. 3.3 Secondary memory structures If the input point set is rather large and does not fit into main memory, then the data structure must be stored in secondary memory | on disk, for example | and portions of it must moved into main memory when needed to answer a
Reference: [268] <author> J. Stolfi, </author> <title> Oriented Projective Geometry: A Framework for Geometric Computations, </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: One of the most widely used linearizations in computational geometry uses the so-called Plucker coordinates, which map a line in R 3 to a point in R 5 ; see <ref> [73, 265, 268] </ref> for more details on Plucker coordinates. A f -range query can now be answered using a `-dimensional halfspace range-searching data structure.
Reference: [269] <author> V. Strassen, </author> <title> Algebraic complexity theory, in: Algorithms and Complexity (J. </title> <editor> van Leeuwen, ed.), </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <publisher> A, MIT Press, </publisher> <year> 1990, </year> <pages> chapter 11, pp. 633-672. </pages>
Reference-contexts: Of course it is natural to consider arithmetic circuits which also allow multiplication ("the ring model"), division ("the field model"), or even more general functions such as square roots or exponentiation. There is a substantial body of literature on the complexity of various types of arithmetic circuits <ref> [278, 269, 53] </ref>, but almost nothing is known about the complexity of geometric range searching in these models.
Reference: [270] <author> S. Subramanian and S. Ramaswamy, </author> <title> The P -range tree: A new data structure for range searching in secondary memory, </title> <booktitle> Proc. 6th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 378-387. </pages> <note> 64 Pankaj K. Agarwal and Jeff Erickson </note>
Reference-contexts: Each of the two-dimensional results in Table 1 can be extended to queries in R d at a cost of an additional log d2 n factor in the preprocessing time, storage, and query-search time. For d 3, Subramanian and Ramaswamy <ref> [270] </ref> have proposed a data structure that can answer a range-reporting query in time O (log d2 n log fl n + k) using O (n log d1 n) space, and Bozanis et al. [51] have proposed an a data structure with O (n log d n) size and O (log <p> See [20, 21, 232] for I/O efficient data structures that have been used for answering range searching and related queries. Table 2 summarizes the known results on secondary-memory structures for orthogonal range searching. The data structure by Subramanian and Ramaswamy <ref> [270] </ref> for 3-sided queries supports insertion/deletion of a point in time O (Log n + (Log 2 n)=B). <p> be small | the lower Geometric Range Searching and Its Relatives 13 d Range Size Query Time Source d = 1 Interval N Log n + k=B [35, 96] Quadrant N log log B Log n + k=B [244] 3-sided rectangle N Log n + k=B + log fl B <ref> [270] </ref> d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B + log fl B [270] Rectangle cN k=B 11=2c [270] d = 3 Octant N log N fi (n) Log n + k=B <p> log B Log n + k=B [244] 3-sided rectangle N Log n + k=B + log fl B <ref> [270] </ref> d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B + log fl B [270] Rectangle cN k=B 11=2c [270] d = 3 Octant N log N fi (n) Log n + k=B [277] Rectangle N log 4 N fi (n) Log n + k=B [277] Table 2. <p> k=B [244] 3-sided rectangle N Log n + k=B + log fl B <ref> [270] </ref> d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B + log fl B [270] Rectangle cN k=B 11=2c [270] d = 3 Octant N log N fi (n) Log n + k=B [277] Rectangle N log 4 N fi (n) Log n + k=B [277] Table 2.
Reference: [271] <author> R. E. Tarjan, </author> <title> Data Structures and Network Algorithms, </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, PA, </address> <year> 1987. </year>
Reference-contexts: Agarwal and Jeff Erickson semigroup, but these values can only be added (using the semigroup's addition operator, of course). Almost all known range-searching data structures can be described in the more restrictive pointer machine model, originally developed by Tarjan <ref> [271] </ref>. 3 The main difference between the two models is that on a pointer machine, a memory cell can be accessed only through a series of pointers, while in the RAM model, any memory cell can be accessed in constant time.
Reference: [272] <author> P. M. Vaidya, </author> <title> Space-time tradeoffs for orthogonal range queries, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> 748-758. </pages>
Reference-contexts: Yao [292] proved a lower bound for two-dimensional static data structures in the semi-group arithmetic model. He showed that if only m units of storage is available, a query takes (log n= log ((m=n) log n)) in the worst case. Vaidya <ref> [272] </ref> proved lower bounds for orthogonal range searching in higher dimensions, which were later improved by Chazelle [61]. In particular, Chazelle proved the following strong result about the average-case complexity of orthogonal range searching: Theorem 1 (Chazelle [61]). Let d; n; m be positive integers with m n.
Reference: [273] <author> V. K. Vaishnavi and D. Wood, </author> <title> Rectilinear line segment intersection, layered segment trees and dynamization, </title> <journal> J. Algorithms, </journal> <volume> 3 (1982), </volume> <pages> 160-176. </pages>
Reference-contexts: In this case a query can be answered in time O (log n + k) using O (n log n) space and preprocessing <ref> [273] </ref>.
Reference: [274] <author> M. J. van Kreveld, </author> <title> New Results on Data Structures in Computational Geometry, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, Netherlands, </address> <year> 1992. </year>
Reference-contexts: The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries. Since their result, several papers have exploited and extended this property to solve numerous geometric-searching problems; see <ref> [10, 149, 274, 203, 238] </ref>. In this subsection we briefly sketch the general cascading scheme, as described in [203]. Let S be a set of weighted objects. Recall that a geometric-searching problem P, with underlying relation , requires computing P pfl w (p) for a query range fl.
Reference: [275] <author> M. J. van Kreveld and M. H. Overmars, </author> <title> Divided k-d trees, </title> <journal> Algorithmica, </journal> <volume> 6 (1991), </volume> <pages> 840-858. </pages>
Reference-contexts: For every shallow hyperplane h, there is at least one partition so that h intersects O (r bd=2c1 ) simplices of the partition. Grossi and Italiano [148], generalizing and improving earlier results of van Kreveld and Overmars <ref> [275, 276] </ref>, describe dynamic d-dimensional orthogonal range searching data structures that also support split and merge operations, defined as follows.
Reference: [276] <author> M. J. van Kreveld and M. H. Overmars, </author> <title> Concatenable structures for decomposable problems, </title> <journal> Inform. Comput., </journal> <volume> 110 (1994), </volume> <pages> 130-148. </pages>
Reference-contexts: For every shallow hyperplane h, there is at least one partition so that h intersects O (r bd=2c1 ) simplices of the partition. Grossi and Italiano [148], generalizing and improving earlier results of van Kreveld and Overmars <ref> [275, 276] </ref>, describe dynamic d-dimensional orthogonal range searching data structures that also support split and merge operations, defined as follows.
Reference: [277] <author> J. S. Vitter and D. E. Vengroff, </author> <title> Efficient 3-d range searching in external memory, </title> <booktitle> Proc. 28th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1996, </year> <pages> pp. 192-201. </pages>
Reference-contexts: d = 2 3-sided rectangle N log B log log B Log n + k=B [244] Rectangle N log N= log Log n Log n + k=B + log fl B [270] Rectangle cN k=B 11=2c [270] d = 3 Octant N log N fi (n) Log n + k=B <ref> [277] </ref> Rectangle N log 4 N fi (n) Log n + k=B [277] Table 2. <p> n + k=B [244] Rectangle N log N= log Log n Log n + k=B + log fl B [270] Rectangle cN k=B 11=2c [270] d = 3 Octant N log N fi (n) Log n + k=B <ref> [277] </ref> Rectangle N log 4 N fi (n) Log n + k=B [277] Table 2.
Reference: [278] <author> J. von zur Gathen, </author> <title> Algebraic complexity theory, </title> <booktitle> in: Annual Review of Computer Science, </booktitle> <volume> Vol. 3, </volume> <publisher> Annual Reviews, </publisher> <address> Palo Alto, CA, </address> <year> 1988, </year> <pages> pp. 317-347. </pages>
Reference-contexts: Of course it is natural to consider arithmetic circuits which also allow multiplication ("the ring model"), division ("the field model"), or even more general functions such as square roots or exponentiation. There is a substantial body of literature on the complexity of various types of arithmetic circuits <ref> [278, 269, 53] </ref>, but almost nothing is known about the complexity of geometric range searching in these models.
Reference: [279] <author> J. Vuillemin, </author> <title> A unifying look at data structures, </title> <journal> Commun. ACM, </journal> <volume> 23 (1980), </volume> <pages> 229-239. </pages>
Reference-contexts: for d = 1, a partial-sum query can be answered in O (ff (n)) time using O (n) space. 6 If the additive operator is max or min, then a partial-sum query can be answered in O (1) time under the RAM model using a Cartesian tree, developed by Vuillemin <ref> [279] </ref>, and the nearest-common-ancestor algorithm of Harel and Tarjan [158]. For d &gt; 1, Chazelle and Rosenberg [80] gave a data structure of size O (n log d1 n) that can answer a partial-sum query in time O (ff (n) log d2 n).
Reference: [280] <author> E. Welzl, </author> <title> Partition trees for triangle counting and other range searching problems, </title> <booktitle> Proc. 4th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1988, </year> <pages> pp. 23-33. </pages>
Reference-contexts: The first linear-size data structure with near-optimal query time for simplex range queries in the plane was developed by Welzl <ref> [280] </ref>. His algorithm is based on the following idea. A spanning path of a set S of points is a polygonal chain whose vertices are the points of S. The crossing number of a polygonal path is the maximum number of its edges that can be crossed by a hyperplane.
Reference: [281] <author> E. Welzl, </author> <title> On spanning trees with low crossing numbers, in: Data Structures and Efficient Algorithms, </title> <booktitle> Final Report on the DFG Special Joint Initiative, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 594, </volume> <publisher> Springer-Verlag, </publisher> <year> 1992, </year> <pages> pp. 233-249. </pages>
Reference-contexts: Although spanning paths were originally introduced for simplex range searching, they have been successfully applied 22 Pankaj K. Agarwal and Jeff Erickson to solve a number of other algorithmic as well as combinatorial problems; see, for example, <ref> [3, 85, 109, 207, 234, 281] </ref>. Matousek and Welzl [206] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [116].
Reference: [282] <author> H. </author> <title> Weyl, Randbemerkungen zu Hauptproblemen der Mathematik, II, </title> <journal> Fundamentalsatz der Alegbra und Grundlagen der Mathematik, Math. Z., </journal> <volume> 20 (1924), </volume> <pages> 131-151. </pages>
Reference-contexts: A range-search query can be answered by traversing the quad tree in a top-down fashion. Because of their simplicity, quad trees are one of the most widely used data structures for a variety of problems. For example, they were used as early as in 1920's, by Weyl <ref> [282] </ref> for computing the complex roots of a univariate polynomial approximately; Greengard used them for the so-called n-body problem [146]. See the book by Samet [250, 251] for a detailed discussion on quad trees and their applications.
Reference: [283] <author> K. Y. Whang, J. W. Song, J. W. Chang, J. Y. Kim, W. S. Cho, C. M. Park, and I. Y. Song, Octree-R: </author> <title> An adaptible octree for efficient ray tracing, </title> <journal> IEEE Trans. Visual. and Comp. Graphics, </journal> <volume> 1 (1995), </volume> <pages> 343-349. </pages>
Reference-contexts: Hershberger and Suri [164] showed that if S is the boundary of a simple polygon, then a triangulation (using Steiner points) with O (log n) crossing number can be constructed in O (n log n) time. See <ref> [5, 216, 105, 197, 283] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [5] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [284] <author> D. A. White and R. Jain, </author> <title> Similarity indexing with the SS-tree, </title> <booktitle> Proc. 12th IEEE Intl. Conf. on Data Engineering, </booktitle> <year> 1996, </year> <pages> pp. 516-523. </pages>
Reference-contexts: These algorithms use practical data structures described in Section 3, including kd-trees, R-trees, R fl -trees, and Hilbert R-trees; see e.g. [138, 166, 188, 186, 123, 160, 246, 266]. White and Jain <ref> [284] </ref> described a variant of R-tree for answering nearest-neighbor queries in which they use spheres instead of rectangles as enclosing regions. This approach was further extended by Katayama and Satoh [181]. Berchtold et al. [45] present a parallel algorithm for nearest-neighbor searching.
Reference: [285] <author> M. White, N-trees: </author> <title> Large ordered indexes for multidimensional space, </title> <type> Tech. report, </type> <institution> US Bureau of the Census, Statistical Research Division, </institution> <address> Washington, DC, </address> <year> 1982. </year>
Reference-contexts: A B-tree storing points based on the bit-interleaving ordering is referred to as an N-tree <ref> [285] </ref> or a zkd-tree [228] in the literature. See [251] for a more detailed discussion on the applications of bit interleaving in spatial data structures. Faloutsos [121] suggested using Gray codes to define a linear order on points.
Reference: [286] <author> D. E. Willard, </author> <title> Polygon retrieval, </title> <journal> SIAM J. Comput., </journal> <volume> 11 (1982), </volume> <pages> 149-165. </pages>
Reference-contexts: the data structures we describe in this section can be constructed in time that is only a polylogarithmic or n " factor larger than its size. 4.1 Linear-size data structures Most of the linear-size data structures for simplex range searching are based on so-called partition trees, originally introduced by Willard <ref> [286] </ref>.
Reference: [287] <author> D. E. Willard, </author> <title> Lower bounds for the addition-subtraction operations in orthogonal range queries and related problems, </title> <journal> Inform. Comput., </journal> <volume> 82 (1989), </volume> <pages> 45-64. </pages>
Reference-contexts: will also consider the group model, Geometric Range Searching and Its Relatives 7 fl 1 fl 4 fl 3 fl 2 fl 1 fl 4 p 3 p 7 p 5 p 1 the total weight of the points in each disk. in which both additions and subtractions are allowed <ref> [287, 64, 65] </ref>. Chazelle [65] considers an extension of the o*ine group model in which circuits are allowed a limited number of help gates, which can compute arbitrary binary functions. <p> He showed that a mixed sequence of n insertions, deletions, and queries requires (n log d n) time. These bounds were extended by Willard <ref> [287] </ref> to the group model, under some fairly restrictive assumptions. Yao [292] proved a lower bound for two-dimensional static data structures in the semi-group arithmetic model. He showed that if only m units of storage is available, a query takes (log n= log ((m=n) log n)) in the worst case.
Reference: [288] <author> D. E. Willard, </author> <title> Applications of the fusion tree method to computational geometry and searching, </title> <booktitle> Proc. 3rd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. </pages> <month> 286-296. </month> <title> Geometric Range Searching and Its Relatives 65 </title>
Reference-contexts: In the semigroup arithmetic model, a query can be answered in time O ((log n= log (m=n)) d1 ) using a data structure of size m, for any m = (n log d1+" n) [61]. Geometric Range Searching and Its Relatives 11 Willard <ref> [288] </ref> proposed a data structure of size O (n log d1 n= log log n), based on fusion trees, that can answer an orthogonal range-reporting query in time O (log d1 n= log log n + k).
Reference: [289] <author> D. E. Willard, </author> <title> Applications of range query theory to relational data base join and selection operations, </title> <institution> J. Comput. Syst. Sci., </institution> <month> 52 </month> <year> (1996), </year> <pages> 157-169. </pages>
Reference-contexts: This is an abstraction of multi-key searching <ref> [43, 289] </ref>, which is a central problem in statistical and commercial databases. For example, the points of S may correspond to employees of a company, each coordinate corresponding to a key such as age, salary, or experience.
Reference: [290] <author> D. E. Willard and G. S. Lueker, </author> <title> Adding range restriction capability to dynamic data structures, </title> <journal> J. ACM, </journal> <volume> 32 (1985), </volume> <pages> 597-617. </pages>
Reference-contexts: This property has been implicitly used for a long time; see, for example, <ref> [112, 192, 196, 290, 252] </ref>. The real power of the cascading property was first observed by Dobkin and Edelsbrunner [102], who used this property to answer several complex geometric queries. <p> Multi-level data structures were also proposed for range restriction, introduced by Willard 34 Pankaj K. Agarwal and Jeff Erickson and Lueker <ref> [290] </ref> and Scholten and Overmars [252]. The following theorem, whose straightforward proof we omit, states a general result for multi-level data structures. Theorem 10. Let S; P 1 ; P 2 ; D 1 ; D 2 be as defined above, and let r be a constant.
Reference: [291] <author> A. C. Yao, </author> <title> Space-time trade-off for answering range queries, </title> <booktitle> Proc. 14th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1982, </year> <pages> pp. 128-136. </pages>
Reference-contexts: Thus, an aggregate query can be formulated as a partial-sum query. Driven by this application, several heuristics have been proposed to answer partial-sum queries on data cubes [152, 159, 168, 262, 167, 247]. Yao <ref> [291] </ref> showed that, for d = 1, a partial-sum query can be answered in O (ff (n)) time using O (n) space. 6 If the additive operator is max or min, then a partial-sum query can be answered in O (1) time under the RAM model using a Cartesian tree, developed
Reference: [292] <author> A. C. Yao, </author> <title> On the complexity of maintaining partial sums, </title> <journal> SIAM J. Comput., </journal> <volume> 14 (1985), </volume> <pages> 277-288. </pages>
Reference-contexts: Most lower bounds, and a few upper bounds, are described in the so-called semigroup arithmetic model, which was originally introduced by Fredman [133] and refined by Yao <ref> [292] </ref>. In the semigroup arithmetic model, a data structure can be informally regarded as a set of precomputed partial sums in the underlying semigroup. <p> He showed that a mixed sequence of n insertions, deletions, and queries requires (n log d n) time. These bounds were extended by Willard [287] to the group model, under some fairly restrictive assumptions. Yao <ref> [292] </ref> proved a lower bound for two-dimensional static data structures in the semi-group arithmetic model. He showed that if only m units of storage is available, a query takes (log n= log ((m=n) log n)) in the worst case. <p> They also showed that the o*ine version takes (n + mff (m; n)) time for any fixed d 1. If points are allowed to insert into S, the query time is (log n= log log n) <ref> [130, 292] </ref> for the one-dimensional case; the bounds were extended by Chazelle [61] to ((log n= log log n) d ), for any fixed dimension d.
Reference: [293] <author> A. C. Yao and F. F. Yao, </author> <title> A general approach to d-dimensional geometric queries, </title> <booktitle> Proc. 17th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1985, </year> <pages> pp. 163-168. </pages>
Reference-contexts: Avis [31] proved that such a partition of R d by d hyperplanes is not always possible for d 5; the problem is still open for d = 4. Weaker partitioning schemes were proposed in <ref> [94, 293] </ref>. After the initial improvements and extensions on Willard's partition tree, a major breakthrough was made by Haussler and Welzl [161]. <p> We will refer to the range-searching problem in which the ranges are from the set f as the f -range searching. One approach to answer f -range queries is to use linearization, originally proposed by Yao and Yao <ref> [293] </ref>.
Reference: [294] <author> F. F. Yao, </author> <title> A 3-space partition and its applications, </title> <booktitle> Proc. 15th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1983, </year> <pages> pp. 258-263. </pages>
Reference-contexts: Edelsbrunner and Welzl [114] described a simple variant of Willard's partition tree that improves the exponent in the query-search time to log 2 (1 + p A partition tree for points in R 3 was first proposed by Yao <ref> [294] </ref>, which can answer a query in time O (n 0:98 ). This bound was improved slightly in subsequent papers [101, 110, 295].
Reference: [295] <author> F. F. Yao, D. P. Dobkin, H. Edelsbrunner, and M. S. Paterson, </author> <title> Partitioning space for range queries, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> 371-384. </pages>
Reference-contexts: This bound was improved slightly in subsequent papers <ref> [101, 110, 295] </ref>. Using the Borsuk-Ulam theorem, Yao et al. [295] showed that, given a set S of n points in R 3 , one can find three planes so that each of the eight (open) octants determined by them contains at most bn=8c points of S. <p> This bound was improved slightly in subsequent papers [101, 110, 295]. Using the Borsuk-Ulam theorem, Yao et al. <ref> [295] </ref> showed that, given a set S of n points in R 3 , one can find three planes so that each of the eight (open) octants determined by them contains at most bn=8c points of S.
Reference: [296] <author> P. N. Yianilos, </author> <title> Data structures and algorithms for nearest neighbor search in general metric spaces, </title> <booktitle> Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1993, </year> <pages> pp. 311-321. </pages>
Reference-contexts: This has lead to the development of algorithms for finding approximate nearest neighbors [26, 28, 29, 91, 185, 188] or for special cases, such as when the distribution of query points is known in advance <ref> [87, 296] </ref>. Geometric Range Searching and Its Relatives 47 Because of wide applications of nearest-neighbor searching, many heuristics have been developed, especially in higher dimensions.
References-found: 296

