URL: http://www.cs.rpi.edu/~flatland/pspapers/cccg96.ps.Z
Refering-URL: http://www.cs.rpi.edu/~flatland/research.html
Root-URL: http://www.cs.rpi.edu
Email: rflatland@siena.edu  
Author: Y. Flatland Charles V. Stewart 
Keyword: Query Sensitive Analysis  
Date: January 4, 1998  
Address: 515 Loudon Road Loudonville, NY 12211-1462  Troy, NY 12180-3590  
Affiliation: Siena College  Department of Computer Science Rensselaer Polytechnic Institute  
Note: Robin  
Abstract: Extending Rectangular Range Reporting with 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arya and D. M. Mount. </author> <title> Approximate range searching. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 172-181, </pages> <year> 1995. </year>
Reference-contexts: Therefore, these pessimistic lower bound results apply to the problem considered here as well. In response to these lower bound results, there has been work on approximate range searching algorithms <ref> [1] </ref> and on range searching in restricted environments [14],[16]. Here we take a different approach by considering that in many applications, the hard point sets and queries causing these pessimistic lower bounds may seldom 3 if ever arise. <p> It was first introduced in [5] and has since appeared in many different forms [2]. The version of the BD tree reviewed here is notable for the fact that its construction ensures that it is balanced <ref> [1] </ref>. The BD tree is a 2 d -ary tree associated with a hierarchical subdivision of space. WLOG, assume all data points are contained within an axis-aligned, d-dimensional, unit hypercube. The basic building blocks of the BD tree are called boxes. <p> The analysis is similar to the analysis of Arya and Mount's <ref> [1] </ref> approximate range searching algorithm and depends on subdivision properties [P2], [P3], [P4], and [P5] of Section 2. Lemma 3.2 The number of BD subdivision cells intersecting any d-dimensional rectangular region Q characterized by k, a and l is C = O (k + (l=a) d1 ). <p> The implementation is a version of the 3D extending rectangular range reporting algorithm presented in Section 3.4, with some modifications that improve its running time in practice. The main modification is that instead of using the smoothed box decomposition, the implementation uses Arya and Mount's <ref> [1] </ref> balanced box decomposition tree and subdivision (described in Section 2). This structure has the advantage of smaller constant factors in its preprocessing and storage requirements. It possesses properties [P1]-[P6] of Section 2, although it cannot guarantee the bounded adjacency property [P7].
Reference: [2] <author> S. Arya, D. M. Mount, N. S. Netanyahu, R. Silverman, and A. Wu. </author> <title> An optimal algorithm for approximate nearest neighbor searching. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 573-582, </pages> <year> 1994. </year> <note> In revised form at ftp://ftp.cs.umd.edu/pub/faculty/mount/Papers/dist.ps.gz. </note>
Reference-contexts: The box decomposition (BD) tree is a linear space variant of the quadtree data structure [15]. It was first introduced in [5] and has since appeared in many different forms <ref> [2] </ref>. The version of the BD tree reviewed here is notable for the fact that its construction ensures that it is balanced [1]. The BD tree is a 2 d -ary tree associated with a hierarchical subdivision of space. <p> Although details will not be given here, the BD tree can be built in O (N log N) time assuming exclusive-or, integer floor, powers of two, and integer logarithm can be computed on point coordinates in constant time. Another version of the BD tree described in <ref> [2] </ref> has the same construction time but does not require that these operations take constant time. Here we are not only interested in the tree, but also in the subdivision determined by the tree's leaves. The leaves of the BD tree subdivide the unit square into box and doughnut cells. <p> Here we are not only interested in the tree, but also in the subdivision determined by the tree's leaves. The leaves of the BD tree subdivide the unit square into box and doughnut cells. For fixed d, this subdivision has the following six properties (see <ref> [2] </ref> or [6] for proofs). These properties are common to many BD subdivisions with the only differences being in the constant factors. They are there 8 fore expressed more generally than necessary for this subdivision so that they may be attributed to other BD subdivisions as well.
Reference: [3] <author> Russell V. Benson. </author> <title> Euclidean Geometry and Convexity. </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1966. </year>
Reference-contexts: the lengths of Q's two sides, then k &gt; l=a as long as k is at least 5 p To see this, the area A (d) outside Q within d of Q's boundary is of size jA (d)j = pd 2 + 2 (h 1 + h 2 )d (see <ref> [3] </ref>, page 97).
Reference: [4] <author> Bernard Chazelle and Burton Rosenberg. </author> <title> Simplex range reporting on a pointer machine. Computational Geometry: </title> <journal> Theory and Applications, </journal> <volume> 5 </volume> <pages> 237-247, </pages> <year> 1996. </year>
Reference-contexts: Unfortunately, asymptotically efficient linear (or near linear) space solutions to the extending rectangular range reporting problem are unlikely due to Chazelle and Rosenberg's <ref> [4] </ref> lower bound results for the simplex range reporting problem. In their lower bound proof, they construct a data set of N points and a set of queries for which reporting the points in these queries either requires a large data structure or large worst case query times.
Reference: [5] <author> K. L. Clarkson. </author> <title> Fast algorithms for the all nearest neighbors problem. </title> <booktitle> In Proc. 24th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 226-232, </pages> <year> 1983. </year>
Reference-contexts: The box decomposition (BD) tree is a linear space variant of the quadtree data structure [15]. It was first introduced in <ref> [5] </ref> and has since appeared in many different forms [2]. The version of the BD tree reviewed here is notable for the fact that its construction ensures that it is balanced [1]. The BD tree is a 2 d -ary tree associated with a hierarchical subdivision of space.
Reference: [6] <author> R. Y. Flatland. </author> <type> PhD dissertation. </type> <institution> Department of Computer Science, Rensse-laer Polytechnic Institute. </institution> <month> August, </month> <year> 1997. </year>
Reference-contexts: Here we are not only interested in the tree, but also in the subdivision determined by the tree's leaves. The leaves of the BD tree subdivide the unit square into box and doughnut cells. For fixed d, this subdivision has the following six properties (see [2] or <ref> [6] </ref> for proofs). These properties are common to many BD subdivisions with the only differences being in the constant factors. They are there 8 fore expressed more generally than necessary for this subdivision so that they may be attributed to other BD subdivisions as well. <p> For the asymptotic analysis in Section 3.2, the additional bounded adjacency property below is required but is not guaranteed for the balanced BD subdivision described above. It is, however, guaranteed for the more sophisticated, smoothed versions of the subdivision found in <ref> [6] </ref> and [12]: P7 Every cell is adjacent to at most a constant number of other cells. Complete proofs of properties [P1]-[P7] for a smoothed subdivision are provided in [6] along with an alternative, more straightforward, construction than that described in [12]. <p> It is, however, guaranteed for the more sophisticated, smoothed versions of the subdivision found in <ref> [6] </ref> and [12]: P7 Every cell is adjacent to at most a constant number of other cells. Complete proofs of properties [P1]-[P7] for a smoothed subdivision are provided in [6] along with an alternative, more straightforward, construction than that described in [12]. In practice, one would probably prefer the balanced version of the BD tree and its subdivision presented here as opposed to either of the two smoothed BD subdivisions. <p> For fixed d, it and its subdivision satisfy properties [P1]-[P6] above and can be built in O (N log N). Although it does not satisfy property [P7], the average number of adjacent cells is bounded by a constant <ref> [6] </ref>. 3 Extending Rectangular Range Reporting The new extending rectangular range reporting algorithm presented here performs partially ordered searches of a box decomposition subdivision, examining only those subdivision cells intersecting the final query in a sequence. For clarity, Section 3.1 describes the algorithm in two dimensions. <p> This structure has the advantage of smaller constant factors in its preprocessing and storage requirements. It possesses properties [P1]-[P6] of Section 2, although it cannot guarantee the bounded adjacency property [P7]. The average number of adjacent cells is, however, bounded by a constant <ref> [6] </ref>. Not only is this important in bounding the time to process extensions, but it also implies that the subdivision's adjacency graph is of size O (N), whereas adjacency graphs of arbitrary subdivisions of O (N) regions can be as large as Q (N 2 ).
Reference: [7] <author> R. Y. Flatland and C. V. Stewart. </author> <title> Extending range queries and nearest neighbors. </title> <note> To appear in Computational Geometry: Theory and Applications. </note>
Reference-contexts: The problem is to efficiently report just the new points included by each larger region. Previous work on these problems includes asymptotically efficient algorithms for extending sequences of axis-aligned rectangular neighborhoods and algorithms for extending by nearest neighbors using polytope distance functions <ref> [7] </ref>. Here we consider the extending rectangular range reporting problem.
Reference: [8] <author> P. Fua and P. Sander. </author> <title> Reconstructing surfaces from unstructured 3D points. </title> <booktitle> In Proceedings DARPA IUW, </booktitle> <pages> pages 615-625, </pages> <year> 1992. </year> <month> 34 </month>
Reference-contexts: An important early stage of many automated visual systems, surface reconstruction techniques extract surface descriptions from three dimensional scene data. Extending neighborhood problems arise when reconstruction techniques incrementally grow surfaces in range data <ref> [11, 8, 10] </ref>. (Figures 7 and 8 show example range data from four scenes.) Starting with an initial surface fit to a small set of proximate points, these surface growing techniques incrementally incorporate neighboring points into the fit until some stopping criteria is satisfied, e.g. it is determined that the surface
Reference: [9] <author> Adam Hoover, Gillian Jean-Baptiste, Xiaoyi Jiang, Patrick J. Flynn, Horst Bunke, Dmitry B. Goldgof, Kevin Bowyer, David W. Eggert, Andrew Fitzgibbon, and Robert B. Fisher. </author> <title> An experimental comparison of range image segmentation algorithms. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 18:7:673-689, </volume> <year> 1996. </year>
Reference-contexts: The remaining ten range images, called USFi for i 2 f0; 3; 6; 9; 12; 15; 18; 21; 24; 27g, are a sampling of the images in a benchmark surface reconstruction test suite <ref> [9] </ref>. The images were taken using a laser range finder, and each scene is a collection of polyhedral objects. As representative examples, Figure 8 shows the intensity images and views of the three dimensional range data for USF6 and USF27.
Reference: [10] <author> H. Hoppe, T. DeRose, T. Duchamp, J. McDonald, and W. Stuetzle. </author> <title> Surface reconstruction from unorganized points. </title> <journal> Computer Graphics, </journal> <volume> 26:2:71-78, </volume> <year> 1992. </year>
Reference-contexts: An important early stage of many automated visual systems, surface reconstruction techniques extract surface descriptions from three dimensional scene data. Extending neighborhood problems arise when reconstruction techniques incrementally grow surfaces in range data <ref> [11, 8, 10] </ref>. (Figures 7 and 8 show example range data from four scenes.) Starting with an initial surface fit to a small set of proximate points, these surface growing techniques incrementally incorporate neighboring points into the fit until some stopping criteria is satisfied, e.g. it is determined that the surface
Reference: [11] <author> James V. Miller and Charles V. Stewart. </author> <title> Prediction intervals for surface growing range segmentation. </title> <booktitle> In Conference on Computer Vision and Pattern Recognition, </booktitle> <pages> pages 1027-1033, </pages> <year> 1997. </year>
Reference-contexts: An important early stage of many automated visual systems, surface reconstruction techniques extract surface descriptions from three dimensional scene data. Extending neighborhood problems arise when reconstruction techniques incrementally grow surfaces in range data <ref> [11, 8, 10] </ref>. (Figures 7 and 8 show example range data from four scenes.) Starting with an initial surface fit to a small set of proximate points, these surface growing techniques incrementally incorporate neighboring points into the fit until some stopping criteria is satisfied, e.g. it is determined that the surface <p> As representative examples, Figure 8 shows the intensity images and views of the three dimensional range data for USF6 and USF27. The sequences of extending rectangular queries used as input to the experiments were generated by the region growing surface reconstruction system called Simultaneous Prediction Intervals (SPI) <ref> [11] </ref> as it reconstructed each of the twelve scenes. SPI is currently designed to grow neighborhoods defined in terms of the image plane instead of in full three dimensions. Therefore, as an approximation, its image plane neighborhoods were converted into representative 3D rectangular neighborhoods in the following way.
Reference: [12] <author> J. S. B. Mitchell, D. M. Mount, and S. Suri. Query-sensitive ray shooting. </author> <note> To appear in Intl. Journal of Comp. Geom. and App. </note>
Reference-contexts: Another alternative used here is a query sensitive analysis where the running time is expressed in terms of parameters capturing the local geometric complexity of the query. Query sensitive analysis have been successfully applied to other hard problems such as ray shooting <ref> [12] </ref> and high dimensional nearest neighbor queries [13]. <p> For the asymptotic analysis in Section 3.2, the additional bounded adjacency property below is required but is not guaranteed for the balanced BD subdivision described above. It is, however, guaranteed for the more sophisticated, smoothed versions of the subdivision found in [6] and <ref> [12] </ref>: P7 Every cell is adjacent to at most a constant number of other cells. Complete proofs of properties [P1]-[P7] for a smoothed subdivision are provided in [6] along with an alternative, more straightforward, construction than that described in [12]. <p> more sophisticated, smoothed versions of the subdivision found in [6] and <ref> [12] </ref>: P7 Every cell is adjacent to at most a constant number of other cells. Complete proofs of properties [P1]-[P7] for a smoothed subdivision are provided in [6] along with an alternative, more straightforward, construction than that described in [12]. In practice, one would probably prefer the balanced version of the BD tree and its subdivision presented here as opposed to either of the two smoothed BD subdivisions. For fixed d, it and its subdivision satisfy properties [P1]-[P6] above and can be built in O (N log N).
Reference: [13] <author> D. M. Mount, N. S. Netanyahu, R. Silverman, and A. Wu. </author> <title> Chromatic nearest neighbour searching: a query sensitive approach. </title> <booktitle> In Proc. 7th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 261-266, </pages> <year> 1995. </year>
Reference-contexts: Another alternative used here is a query sensitive analysis where the running time is expressed in terms of parameters capturing the local geometric complexity of the query. Query sensitive analysis have been successfully applied to other hard problems such as ray shooting [12] and high dimensional nearest neighbor queries <ref> [13] </ref>. For our query sensitive analysis, we characterize a query Q by three parameters k, a, and l: k is the number of data points inside Q, a is the distance to the point outside Q that is k (th) farthest from Q's boundary, and l is Q's diameter.
Reference: [14] <author> M. H. Overmars and A. F. van der Stappen. </author> <title> Range searching and point location among fat objects. </title> <type> Technical report, </type> <institution> Utrecht University, </institution> <year> 1994. </year>
Reference: [15] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: The box decomposition (BD) tree is a linear space variant of the quadtree data structure <ref> [15] </ref>. It was first introduced in [5] and has since appeared in many different forms [2]. The version of the BD tree reviewed here is notable for the fact that its construction ensures that it is balanced [1].
Reference: [16] <author> O. Schwarzkopf and J. Vleugels. </author> <title> Range searching in low-density environments. </title> <journal> Information Processing Letters, </journal> <volume> 60 </volume> <pages> 121-128, </pages> <year> 1996. </year> <editor> 35 (a) (b) (a and b) and Sports Equipment (c and d). 36 (a) (b) (a and b) and USF27 (c and d). </editor> <volume> 37 </volume>
References-found: 16

