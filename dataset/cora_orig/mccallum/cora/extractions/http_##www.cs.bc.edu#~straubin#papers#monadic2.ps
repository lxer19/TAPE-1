URL: http://www.cs.bc.edu/~straubin/papers/monadic2.ps
Refering-URL: http://www.cs.bc.edu/techreps.html
Root-URL: http://www.cs.bc.edu
Title: Circuit Complexity and the Expressive Power of Generalized First-Order Formulas  
Author: Howard Straubing* 
Address: Chestnut Hill, Massachusetts, USA 02167  
Affiliation: Department of Computer Science, Boston College  
Abstract: The circuit complexity classes AC 0 ; ACC; and CC (also called pure-ACC) can be characterized as the classes of languages definable in certain extensions of first-order logic. All of the known and conjectured inclusions among these classes have been shown to be equivalent to a single conjecture concerning the form of the formulas required to define the regular languages they contain. (The conjecture states, roughly, that when a formula defines a regular language, predicates representing numerical relations on the positions in a string can be replaced by predicates computed by finite state automata.) Here this conjecture is established in a special case: It is shown that the conjecture holds for the subclasses of AC 0 ; ACC; and CC defined by restricting all the numerical predicates occurring in the logical formulas to be either unary relations, or the order relation &lt; : 
Abstract-found: 1
Intro-found: 1
Reference: [A] <author> M. Ajtai, </author> <title> 1 1 formulae on finite structures, </title> <booktitle> Annals of Pure and Applied Logic 24 (1983), </booktitle> <pages> 1-48. </pages>
Reference-contexts: R denote the class of regular languages over A: The characterization of the regular languages in AC 0 given in [BCST] shows f9g [N ] " R = f9g [P]: Remarkably enough, this result, which is equivalent to the circuit lower bounds of Furst, Saxe and Sipser [FSS] and Ajtai <ref> [A] </ref> was conjectured twenty years ago by McNaughton and Papert [MP], before the connection with circuit complexity was appreciated.
Reference: [B] <author> D. Barrington, </author> <title> Bounded-width polynomial-size branching programs recognize exactly those languages in N C 1 , J. </title> <institution> Comp. Syst. Sci., </institution> <month> 38 </month> <year> (1989), </year> <pages> 150-164. </pages>
Reference-contexts: Programs over finite monoids were defined by Barrington and Therien [BT] and, implicitly, by Barrington <ref> [B] </ref>. Here we will only consider single-scan programs.
Reference: [Bu] <author> J. Buchi, </author> <title> Weak second-order arithmetic and finite automata, </title> <journal> Z. Math. Math. Logik Grundlagen Math. </journal> <volume> 6, </volume> <year> (1960), </year> <pages> 66-92. </pages>
Reference-contexts: He showed, among other results, that the nonuniform circuit complexity class AC 0 ; defined by constant-depth, polynomial-size boolean circuits with unbounded fan-in, consists of exactly those languages defined by first-order sentences with arbitrary numerical predicates. The second use has been in the classification of finite automata: Buchi <ref> [Bu] </ref> showed that the regular languages are precisely those defined by second-order sentences with the numerical predicate x &lt; y on first-order variables and with monadic second-order variables.
Reference: [BCST] <author> D. Barrington, K. Compton, H. Straubing, and D. Therien, </author> <note> Regular lan guages in N C 1 ; to appear in J. Comp. </note> <institution> Syst. Sci. </institution>
Reference-contexts: allows both the M ODq gates and unbounded fan-in boolean gates.) These programs can be viewed as generalizations of ordinary finite automata, so that, in a sense, the classification of regular languages according to the structure of the associated syntactic monoid extends to languages within N C 1 : In <ref> [BCST] </ref> these results on programs, together with McNaughton's theorem on regular languages defined with first-order sentences, are used to give a new proof of Immerman's logical characterization of the circuit complexity class AC 0 : In [BCST] and [CDPC], the results of Straubing, Therien and Thomas on modular quantifiers are used <p> of the associated syntactic monoid extends to languages within N C 1 : In <ref> [BCST] </ref> these results on programs, together with McNaughton's theorem on regular languages defined with first-order sentences, are used to give a new proof of Immerman's logical characterization of the circuit complexity class AC 0 : In [BCST] and [CDPC], the results of Straubing, Therien and Thomas on modular quantifiers are used to give analogous characterizations of the classes ACC and CC: At this point an interesting fact emerges: Let A be a finite alphabet. <p> Let P denote the set of numerical predicates that can be obtained by first-order quantification over predicates of the form x j 0 (mod r) and x &lt; y: Let R denote the class of regular languages over A: The characterization of the regular languages in AC 0 given in <ref> [BCST] </ref> shows f9g [N ] " R = f9g [P]: Remarkably enough, this result, which is equivalent to the circuit lower bounds of Furst, Saxe and Sipser [FSS] and Ajtai [A] was conjectured twenty years ago by McNaughton and Papert [MP], before the connection with circuit complexity was appreciated. <p> computed in CC; and that ACC is properly contained in N C 1 : Thus one approach to these open problems of circuit complexity is to study the question of the kind of sentences needed to define regular languages, in the hope of directly establishing the conjecture. (See [CDPC] and <ref> [BCST] </ref>.) In the present paper the conjecture is shown to hold for formulas in which each numerical predicate is either a monadic predicate or the order relation &lt; : More precisely, let M be the class of all monadic numerical predicates. <p> The equivalence of the circuit definitions with these logical formulations is proved in [I] for AC 0 ; in <ref> [BCST] </ref> for ACC (q); and in [CDPC] for CC (q): Let mAC 0 ; mACC (q); mCC (q) denote the families obtained by restricting to sentences in which the only numerical predicates are the order relation &lt;; and 0-ary or unary (i.e., monadic) predicates, that is, predicates with no more than <p> If M (L) contains a nonsolvable group, then by a result in <ref> [BCST] </ref>, there is some t &gt; 0 such that j L (A t ) contains a nonsolvable group. <p> The theorem now follows from arguments given in <ref> [BCST] </ref> and [CDPC]. In Theorem 7 of [BCST] it is shown that if L is a regular language containing no nonsolvable groups, and such that every group in j L (A t ) has order dividing a power of q; then L 2 (f9g [ M OD fqg )[P]: In the <p> The theorem now follows from arguments given in <ref> [BCST] </ref> and [CDPC]. In Theorem 7 of [BCST] it is shown that if L is a regular language containing no nonsolvable groups, and such that every group in j L (A t ) has order dividing a power of q; then L 2 (f9g [ M OD fqg )[P]: In the proof of Theorem 6.3.1 of [CDPC] it
Reference: [BIS] <author> D. Barrington, N. Immerman and H. Straubing, </author> <title> On uniformity in N C 1 , J. </title> <institution> Comp. Syst. Sci., </institution> <month> 41 </month> <year> (1990), </year> <pages> 274-306. </pages>
Reference-contexts: done for dyadic numerical predicates the result will be quite significant: The natural uniform versions of the classes ACC (q) and CC (q) are defined using the single numerical predicate BIT (x; y); which is interpreted to mean the x th bit of the binary representation of y is on <ref> [BIS] </ref>. Thus an extension of Theorem 2.1 to the dyadic case would resolve most of the open questions about the relations among AC 0 ; CC and ACC in the uniform setting.
Reference: [BS] <author> D. Barrington and H. Straubing, </author> <title> Superlinear lower bounds for bounded-width branching programs, </title> <note> in Proc. 6th IEEE Structure in Complexity Theory Conference (1991) 305-314; to appear in J. Comp. </note> <institution> Syst. Sci. </institution>
Reference-contexts: Then for any Q = M OD T ; or Q = f9g [ M OD T ; The proof of this theorem relies on semigroup-theoretic constructions and previous work of Barrington and Straubing <ref> [BS] </ref> on the power of linear-size programs over finite monoids. In Section 2 I give formal definitions of the underlying logical apparatus and a precise statement of the main theorem. <p> I will then apply the results of Barrington and Straubing <ref> [BS] </ref> concerning the behavior of linear-size programs over finite monoids. It should be noted that the class mCC (1) is somewhat anomalous, since application of a modular quantifier of modulus 1 gives a formula that is satisfied by all word structures with the right set of free variables. <p> that accepts the language fu : xuy 2 Lg: If n is a multiple of t; then the composition of n with the embedding of C into A t gives a family of single-scan programs fae m g over M with input alphabet C: It follows from Theorem 2.2 of <ref> [BS] </ref> that if G 62 G q ; then there exist strings v; w 2 C m such that (v) = e; (w) = g; but ae m emits the same value on v and w: It thus follows that there exist v 0 ; w 0 2 A mt such <p> for some t &gt; 0; j L (A t ) contains a copy of U 1 : (Take v; w 2 A + mapping onto U 1 and consider v jwj and w jvj :) The proof now proceeds exactly as above, making the same appeal to the results of <ref> [BS] </ref>. The theorem now follows from arguments given in [BCST] and [CDPC]. <p> In fact, these corollaries follow directly from Proposition 4.1 and the results of <ref> [BS] </ref>; the additional work done in Proposition 4.2 to characterize all the regular languages in these classes is not needed.
Reference: [BT] <author> D. Barrington and D. Therien, </author> <title> Finite monoids and the fine structure of N C 1 , JACM 35, </title> <booktitle> (1988), </booktitle> <pages> 941-952. </pages>
Reference-contexts: These two applications of the logical characterization of language classes turn out to be closely related. Barrington and Therien <ref> [BT] </ref> have shown that many circuit complexity classes within N C 1 ; including N C 1 itself, can be characterized as the behavior of polynomial-length families of programs over finite monoids, where different classes of monoids yield different circuit complexity classes. (N C 1 consists of those languages accepted by <p> Programs over finite monoids were defined by Barrington and Therien <ref> [BT] </ref> and, implicitly, by Barrington [B]. Here we will only consider single-scan programs.
Reference: [CDPC] <author> H. Straubing, </author> <title> Constant-depth periodic circuits, </title> <journal> International J. Algebra and Computation, </journal> <volume> 1 (1991), </volume> <pages> 49-87. </pages>
Reference-contexts: associated syntactic monoid extends to languages within N C 1 : In [BCST] these results on programs, together with McNaughton's theorem on regular languages defined with first-order sentences, are used to give a new proof of Immerman's logical characterization of the circuit complexity class AC 0 : In [BCST] and <ref> [CDPC] </ref>, the results of Straubing, Therien and Thomas on modular quantifiers are used to give analogous characterizations of the classes ACC and CC: At this point an interesting fact emerges: Let A be a finite alphabet. <p> cannot be computed in CC; and that ACC is properly contained in N C 1 : Thus one approach to these open problems of circuit complexity is to study the question of the kind of sentences needed to define regular languages, in the hope of directly establishing the conjecture. (See <ref> [CDPC] </ref> and [BCST].) In the present paper the conjecture is shown to hold for formulas in which each numerical predicate is either a monadic predicate or the order relation &lt; : More precisely, let M be the class of all monadic numerical predicates. <p> The equivalence of the circuit definitions with these logical formulations is proved in [I] for AC 0 ; in [BCST] for ACC (q); and in <ref> [CDPC] </ref> for CC (q): Let mAC 0 ; mACC (q); mCC (q) denote the families obtained by restricting to sentences in which the only numerical predicates are the order relation &lt;; and 0-ary or unary (i.e., monadic) predicates, that is, predicates with no more than one free variable. <p> The theorem now follows from arguments given in [BCST] and <ref> [CDPC] </ref>. <p> of [BCST] it is shown that if L is a regular language containing no nonsolvable groups, and such that every group in j L (A t ) has order dividing a power of q; then L 2 (f9g [ M OD fqg )[P]: In the proof of Theorem 6.3.1 of <ref> [CDPC] </ref> it is shown that if, additionally, j L (A + ) contains no copy of U 1 ; then L 2 M OD fqg [P]: 5 Additional Remarks The results here imply that mACC (the union of the mACC (q) over all q &gt; 0) is properly contained in N
Reference: [E] <author> S. Eilenberg, </author> <title> Automata, Languages and Machines, vol. B, </title> <publisher> Academic Press, </publisher> <address> New York (1976). </address>
Reference-contexts: Observe that j 1 L (j L (L)) = L: If L A + (the set of nonempty words over A) it is sometimes more convenient to deal with the syntactic semigroup S (L) of L; this is simply the image of A + under j L : (See Eilenberg <ref> [E] </ref> or Pin [P] for a detailed account of the matters discussed in this paragraph.) Now let M be a finite monoid and K a finite set. <p> Thus (M; K) is a monoid. (M; K) and q (M; K); defined below, are closely related to the Schutzenberger product and related constructions, and share many of the properties of these products. (see <ref> [E] </ref>, [W]). <p> set is M M fi M; with multiplication given by (f 1 ; m 1 )(f 2 ; m 2 ) = (F; m 1 m 2 ); where, for m 2 M; F (m) = f 1 (m)f 2 (mm 1 ): As is well known (see, for example, <ref> [E] </ref>) M ffi M is in M q (respectively G q ) if M is.
Reference: [F] <author> R. Fagin, </author> <title> Generalized first-order spectral and polynomial-time recognizable sets, </title> <booktitle> SIAM-AMS Proceedings, </booktitle> <volume> vol. 7, </volume> <publisher> American Mathematical Society, </publisher> <address> Providence (1974). </address>
Reference-contexts: For example, Fagin <ref> [F] </ref>, showed that existential second-order sentences define precisely the languages in N P; and Immerman [I] characterized a large number of complexity classes within P in terms of logic.
Reference: [FSS] <author> M. Furst, J. Saxe and M. Sipser, </author> <title> Parity, circuits, and the polynomial time hierarchy, </title> <journal> J. Math Systems Theory 17, </journal> <year> (1984), </year> <pages> 13-27. </pages>
Reference-contexts: &lt; y: Let R denote the class of regular languages over A: The characterization of the regular languages in AC 0 given in [BCST] shows f9g [N ] " R = f9g [P]: Remarkably enough, this result, which is equivalent to the circuit lower bounds of Furst, Saxe and Sipser <ref> [FSS] </ref> and Ajtai [A] was conjectured twenty years ago by McNaughton and Papert [MP], before the connection with circuit complexity was appreciated.
Reference: [I] <author> N. Immerman, </author> <title> Languages that capture complexity classes, </title> <journal> SIAM J. Computing 16, </journal> <year> (1987), </year> <pages> 760-778. </pages>
Reference-contexts: For example, Fagin [F], showed that existential second-order sentences define precisely the languages in N P; and Immerman <ref> [I] </ref> characterized a large number of complexity classes within P in terms of logic. He showed, among other results, that the nonuniform circuit complexity class AC 0 ; defined by constant-depth, polynomial-size boolean circuits with unbounded fan-in, consists of exactly those languages defined by first-order sentences with arbitrary numerical predicates. <p> The equivalence of the circuit definitions with these logical formulations is proved in <ref> [I] </ref> for AC 0 ; in [BCST] for ACC (q); and in [CDPC] for CC (q): Let mAC 0 ; mACC (q); mCC (q) denote the families obtained by restricting to sentences in which the only numerical predicates are the order relation &lt;; and 0-ary or unary (i.e., monadic) predicates, that
Reference: [MP] <author> R. McNaughton and S. Papert, </author> <title> Counter-free Automata, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts (1971). </address>
Reference-contexts: The second use has been in the classification of finite automata: Buchi [Bu] showed that the regular languages are precisely those defined by second-order sentences with the numerical predicate x &lt; y on first-order variables and with monadic second-order variables. McNaughton <ref> [MP] </ref> showed that the first-order sentences with the numerical * Supported by NSF Grant CCR-8902369 predicate x &lt; y define exactly the `star-free' regular languages: These can be char-acterized as those languages represented by an extended regular expression without the use of the fl operator, or alternatively as the class of <p> characterization of the regular languages in AC 0 given in [BCST] shows f9g [N ] " R = f9g [P]: Remarkably enough, this result, which is equivalent to the circuit lower bounds of Furst, Saxe and Sipser [FSS] and Ajtai [A] was conjectured twenty years ago by McNaughton and Papert <ref> [MP] </ref>, before the connection with circuit complexity was appreciated.
Reference: [P] <author> J. E. Pin, </author> <title> Varieties of Formal Languages, </title> <publisher> Plenum, </publisher> <address> New York (1986). </address>
Reference-contexts: can be obtained by first-order quantification over predicates of the form x j 0 (mod r) and x &lt; y: Let R denote the class of regular languages over A: The characterization of the regular languages in AC 0 given in [BCST] shows f9g [N ] " R = f9g <ref> [P] </ref>: Remarkably enough, this result, which is equivalent to the circuit lower bounds of Furst, Saxe and Sipser [FSS] and Ajtai [A] was conjectured twenty years ago by McNaughton and Papert [MP], before the connection with circuit complexity was appreciated. <p> Let T be a set of integers, and let M OD T be the set of modular quantifiers with moduli in T: It is conjectured that for any Q = M OD T ; or Q = f9g [ M OD T ; Q [N ] " R = Q <ref> [P] </ref>: This conjecture is equivalent to most of the conjectured properties of the complexity classes AC 0 ; ACC and CC: For instance, it implies, among other things, that the AN D fucntion of n input bits cannot be computed in CC; and that ACC is properly contained in N C <p> 1 L (j L (L)) = L: If L A + (the set of nonempty words over A) it is sometimes more convenient to deal with the syntactic semigroup S (L) of L; this is simply the image of A + under j L : (See Eilenberg [E] or Pin <ref> [P] </ref> for a detailed account of the matters discussed in this paragraph.) Now let M be a finite monoid and K a finite set. <p> t ) has order dividing a power of q; then L 2 (f9g [ M OD fqg )<ref> [P] </ref>: In the proof of Theorem 6.3.1 of [CDPC] it is shown that if, additionally, j L (A + ) contains no copy of U 1 ; then L 2 M OD fqg [P]: 5 Additional Remarks The results here imply that mACC (the union of the mACC (q) over all q &gt; 0) is properly contained in N C 1 ; and that mCC (the union of the mCC (q)) does not contain the AN D function.
Reference: [STT] <author> H. Straubing, D. Therien and W. Thomas, </author> <title> Regular languages defined with generalized quantifiers, </title> <booktitle> Proc. 15th ICALP, Lecture Notes in Computer Science, </booktitle> <volume> 317, </volume> <month> 561-575 </month> <year> (1988). </year>
Reference-contexts: Straubing, Therien and Thomas <ref> [STT] </ref> introduced modular quantifiers, and showed that using these alone or in combination with the ordinary first-order quantifiers and the numerical predicate x &lt; y; one defines classes of regular languages that can also be characterized in terms of their associated syntactic monoids.
Reference: [W] <author> P. Weil, </author> <title> Products of languages with counter, </title> <booktitle> Theoretical Computer Science, </booktitle> <month> 76 </month> <year> (1990). </year>
Reference-contexts: Thus (M; K) is a monoid. (M; K) and q (M; K); defined below, are closely related to the Schutzenberger product and related constructions, and share many of the properties of these products. (see [E], <ref> [W] </ref>).
References-found: 16

