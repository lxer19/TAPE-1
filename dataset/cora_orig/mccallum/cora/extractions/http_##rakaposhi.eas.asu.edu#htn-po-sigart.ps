URL: http://rakaposhi.eas.asu.edu/htn-po-sigart.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: rao@asu.edu  
Title: A Comparative analysis of Partial Order Planning and Task Reduction Planning  
Author: Subbarao Kambhampati 
Address: Tempe AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: Although task reduction (HTN) planning historically preceded partial order (PO) planning, and is believed to be more general than the latter, very little comparative analysis of the two planning formalisms has been done. Part of the reason for this has been the lack of systematic understanding of the functionalities provided by HTN planning over and above that of partial order planning. In this paper I will describe a generalized algorithm template for partial order planning based on refinement search, and extend it to cover HTN planning. I will use this framework as a basis to (i) discuss the similarities and differences between the HTN and the partial order planning methods, (ii) critically examine the claims regarding the efficiency and expressiveness of HTN planning, and (iii) shed light on several of the less understood features of HTN planning. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 67, No. 1, </volume> <year> 1994. </year>
Reference-contexts: 1 Introduction Of late, there has been an increased interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types. Many recent research efforts have attempted comparative empirical analyses of planning algorithms <ref> [22, 1, 15, 13, 14] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [28, 27]. <p> This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. Subsequently, Pednault [23] and McAllester [20], provided simpler formalizations of partial order planning without recourse to modal truth criteria, and sound and complete planners based on their formalizations have been implemented <ref> [1, 24, 12] </ref>. 1. There has been very little formalization of HTN planning algorithms, with the result that for the uninitiated, it is very difficult to differentiate essential features from ``bells and whistles'' of HTN planning. 2. <p> Selection Bookkeeping Tractability Refinements Tweak [3] MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA [22] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [27] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL <ref> [1] </ref> Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [18] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [20] Protection based Arbitrary Contributor protection Conflict resolution UCPOP [24] O (1) O (1) MP, MP-I [12] Protection based Arbitrary (Multi) contributor protection Conflict resolution
Reference: [2] <author> A. Barrett and D. Weld. </author> <title> Schema Parsing: Hierarchical Planning for Expressive Languages. </title> <booktitle> In Proc. AAAI-94. </booktitle>
Reference-contexts: To deal with the first problem, recently Erol et. al. [6, 7, 8] have developed a coherent formalization and complexity analysis of HTN planning. At the same time, Barrett and Weld <ref> [2] </ref> and Young et. al. [32] have developed simpler implementations of HTN planners. Barrett and Weld's work has also taken some important first steps towards the development of sound and complete HTN planning for expressive action representations. <p> Specifically, a ground operator sequence S that solves the problem is generated as a solution if and only if there is a way of reducing the initial null plan to S in terms of the reduction schemas provided to the planner. In <ref> [2] </ref>, Barrett explains this in terms of the ``parseability'' of potential solutions in terms of the reduction schemas. <p> One question that still needs to be addressed is whether the ``task reduction'' approach is required to achieve this efficiency. Recently, Barrett and Weld <ref> [2] </ref> experimented with an interesting alternative approach. This approach uses HTN schemas to do incremental bottom-up parsing of the partial plans generated by a partial-order planner (UCPOP [24]), and prunes plans which do not have any parse.
Reference: [3] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: After all, the first big shift from state-space planning used in STRIPS [10] was not to partial-order planning, but rather to HTN planning, as used in NOAH [26]. Indeed, partial order planning, as it is understood today, is an off-shoot of Chapman's work on nonlinear planning <ref> [3] </ref> (which, ironically enough, was initially intended to be a formalization of task reduction planners such as NOAH, SIPE and NONLIN). 1 There are at least two general problems that lead to this state of affairs: fl This research is supported in part by NSF research initiation award (RIA) IRI-9210997, NSF <p> and NONLIN). 1 There are at least two general problems that lead to this state of affairs: fl This research is supported in part by NSF research initiation award (RIA) IRI-9210997, NSF young investigator award (NYI) IRI-9457634 and ARPA/Rome Laboratory planning initiative grant F30602-93-C-0039. 1 As a historical note, Chapman <ref> [3] </ref> intended to ``clean'' up NOAH/NONLIN, and came up with the modal truth criterion which essentially extends the NONLIN Q&A criterion to deal with partial plans with variables. This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. <p> Planning Agents SIGART Bulletin, Vol. 6, No. 1 Planner Soln. Constructor Goal Selection Bookkeeping Tractability Refinements Tweak <ref> [3] </ref> MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA [22] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [27] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary
Reference: [4] <author> M. Drummond. </author> <title> On precondition achievement and the computational economics of automatic planning. </title> <booktitle> In Proc. European Workshop on Planning Systems, </booktitle> <year> 1994. </year>
Reference-contexts: In <ref> [4] </ref>, Drummond makes the argument that this is not a coincidence and that the planning task as well as the available knowledge in most realistic problems are such that they are best modeled in the HTN planning framework rather than the partial order planning framework.
Reference: [5] <author> G. Collins and L. Pryor. </author> <title> Achieving the functionality of filter conditions in partial order planner. </title> <booktitle> In Proc. 10th AAAI, </booktitle> <year> 1992. </year>
Reference-contexts: tiny pieces of plan.'' 5 Clarifying features of HTN Planning One of the important advantages of the representation and candidate set semantics of the partial plans developed in Section 2 is that it allows us to put in perspective many of the less-understood features of HTN planning, including filter conditions <ref> [5] </ref>, abstraction vs. task reduction [17] and why plans with unresolvable protection conflicts cannot in general be pruned in HTN planning [31]. <p> Filter conditions are the applicability conditions of the operators that should never be explicitly considered for establishment. Most previous work has characterized filter conditions as filtering out particular operators or task-reduction schemas from consideration. As has been pointed out by Pryor and Collins <ref> [5] </ref>, using filter conditions this way will lead to loss of completeness. In my view, the loss of completeness is a ramification of the erroneous interpretation (and implementation) of filter conditions.
Reference: [6] <author> K. Erol, D. Nau and J. Hendler. </author> <title> Toward a general framework for hierarchical task-network planning. </title> <booktitle> In Proc. of AAAI Spring Symp. on Foundations of Automatic Planning. </booktitle> <year> 1993. </year>
Reference-contexts: Some argue that HTN planners have substantial formal as well as practical advantages over partial order planners, while others have vtaken the position that HTN planning is an ``efficiency hack'' over partial order planning. To deal with the first problem, recently Erol et. al. <ref> [6, 7, 8] </ref> have developed a coherent formalization and complexity analysis of HTN planning. At the same time, Barrett and Weld [2] and Young et. al. [32] have developed simpler implementations of HTN planners. <p> Since the initial and final location of the agent is Phoenix, this goal cannot be modeled as a goal of attainment, i.e., a precondition of t 1 (unless time is modeled explicitly in the action representation [25]). It has been mentioned in the literature (c.f. <ref> [6] </ref>) that such goals cannot be be modeled in classical planning without hierarchical task reduction. This claim needs to be qualified to some extent.
Reference: [7] <author> K. Erol, J. Hendler and D. Nau. </author> <title> HTN Planning: </title> <booktitle> Complexity and Expressivity In Proc. AAAI-94. </booktitle>
Reference-contexts: Some argue that HTN planners have substantial formal as well as practical advantages over partial order planners, while others have vtaken the position that HTN planning is an ``efficiency hack'' over partial order planning. To deal with the first problem, recently Erol et. al. <ref> [6, 7, 8] </ref> have developed a coherent formalization and complexity analysis of HTN planning. At the same time, Barrett and Weld [2] and Young et. al. [32] have developed simpler implementations of HTN planners. <p> The terminal symbols in each of the grammars G i are drawn from A. An action sequence S is a solution to the HTN planning problem if and only if it solves the problem, and S is a valid sentence in each of the grammars in G <ref> [21, 7] </ref>. Since task reduction and partial order planners are solving different problems, the completeness criteria for these methods will naturally be different. <p> This problem-based characterization also explains the complexity difference between planning in STRIPS and HTN formalisms. Propositional STRIPS planning is known to be PSPACE-complete [20], whereas HTN planning is known to be undecidable in all but most restrictive cases <ref> [7] </ref>. <p> The solution language of partial order planners is a regular language, while HTN planners also allow higher order solution languages (such as context free languages as well as their intersections) <ref> [7] </ref>. 4 In particular, suppose the domain contains three actions a1; a2; a3. <p> the task reduction schemas (this is what Erol et. al. [8] do in their formalization of HTN 4 The analogy between HTN task reduction schemas and operators in partial order planning on the one hand, and regular languages and Context Free Grammars on the other is first made by Erol <ref> [7] </ref>. Planning Agents SIGART Bulletin, Vol. 6, No. 1 planning).
Reference: [8] <author> K. Erol, J. Hendler and D. Nau. UMCP: </author> <title> A sound and complete procedure for Hierarchical Task-network planning. </title> <booktitle> In Proc. </booktitle> <address> AIPS-94. </address>
Reference-contexts: Some argue that HTN planners have substantial formal as well as practical advantages over partial order planners, while others have vtaken the position that HTN planning is an ``efficiency hack'' over partial order planning. To deal with the first problem, recently Erol et. al. <ref> [6, 7, 8] </ref> have developed a coherent formalization and complexity analysis of HTN planning. At the same time, Barrett and Weld [2] and Young et. al. [32] have developed simpler implementations of HTN planners. <p> To begin with, the completeness of an HTN planners has to be defined with respect to both the domain actions, as well as the set of non-primitive tasks and the task reduction schemas (this is what Erol et. al. <ref> [8] </ref> do in their formalization of HTN 4 The analogy between HTN task reduction schemas and operators in partial order planning on the one hand, and regular languages and Context Free Grammars on the other is first made by Erol [7]. Planning Agents SIGART Bulletin, Vol. 6, No. 1 planning).
Reference: [9] <author> K. Golden O. Etzioni and D. Weld. </author> <title> Omnipotence without Omniscience: Efficient sensor management for planning. </title> <booktitle> In Proc. AAAI-94. </booktitle>
Reference-contexts: While UCPOP itself uses the static universe assumption and splits this goal into a large conjunctive goal, more recent partial order planners such as XII <ref> [9] </ref> also provide the capability to handle quantified effects in non-static universes (e.g., when the number of objects in the truck changes dynamically during plan execution).
Reference: [10] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. In Readings in Planning. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-Network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. After all, the first big shift from state-space planning used in STRIPS <ref> [10] </ref> was not to partial-order planning, but rather to HTN planning, as used in NOAH [26].
Reference: [11] <author> J.H. Hopcroft and J.D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation Addison-Wesley Publishing, </title> <year> 1979. </year>
Reference-contexts: As McAllester points out [21], this complexity difference can be understood on the basis of the fact that intersection of context free grammars (which is part of HTN planning problem) is an undecidable problem <ref> [11] </ref>. checks, while condition typing can be accommodated through the auxiliary constraints mechanism (see Section 5). Finally, some implementations of HTN planners, such as O-Plan [28] allow for both precondition establishment and task reduction refinements within the same algorithm.
Reference: [12] <author> S. Kambhampati. </author> <title> Multi-Contributor Causal Structures for Planning: A Formalization and Evaluation. </title> <institution> Arizona State University Technical Report, CS TR-92-019, </institution> <month> July </month> <year> 1992. </year> <journal> Artificial Intelligence, </journal> <volume> Vol. 69, </volume> <year> 1994. </year>
Reference-contexts: This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. Subsequently, Pednault [23] and McAllester [20], provided simpler formalizations of partial order planning without recourse to modal truth criteria, and sound and complete planners based on their formalizations have been implemented <ref> [1, 24, 12] </ref>. 1. There has been very little formalization of HTN planning algorithms, with the result that for the uninitiated, it is very difficult to differentiate essential features from ``bells and whistles'' of HTN planning. 2. <p> & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [18] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [20] Protection based Arbitrary Contributor protection Conflict resolution UCPOP [24] O (1) O (1) MP, MP-I <ref> [12] </ref> Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection Unambiguous Ordering SNLP-MTC MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection conflict resolution McNONLIN-MTC MTC based O (n 4 ) MTC <p> Thus contributor protection can be modeled by adding of the twin interval preservation constraints ht 0 ; p; ti and ht 0 ; :p; ti. Finally, multi-contributor protections, such as those described in <ref> [12] </ref> can be modeled by adding a disjunction of IPCs.
Reference: [13] <author> S. Kambhampati. </author> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> In Proc. 4th Intl. Conf. on Principles of Knowledge Representation and Reasoning (KR-94), </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Of late, there has been an increased interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types. Many recent research efforts have attempted comparative empirical analyses of planning algorithms <ref> [22, 1, 15, 13, 14] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [28, 27]. <p> I will base my comparison on two generalized algorithm templates for partial order planning and HTN planning based on the idea of refinement search. Specifically, in my recent work <ref> [15, 13, 14] </ref>, I have developed a generalized algorithm template for partial order refinement planning, the instantiations of which cover most existing PO planners. <p> Given a planning problem, a planner attempts to generate an action sequence that solves the problem. Partial order planners do this by searching in the space of partial plans. 2 Partial plans are best seen as implicit representations for sets of ground operator sequences (potential solutions) <ref> [15, 13, 14] </ref>. In particular, a partial plan corresponds to a set of ground operator sequences that are consistent with the ordering, binding and auxiliary constraints on the plan. <p> We will see that IPCs can be used to model bookkeeping (protection) constraints while PTCs can be used to model filter conditions and phantomization constraints (Section 5). 2 For a more formal development of the refinement search semantics of partial plans, see <ref> [13, 15] </ref> Algorithm Refine-Plan-PO (P) /*Returns refinements of P */ Parameters: sol: the routine for picking solution candidates from the candidate set of the partial plan pick-open: the routine for picking open conditions. pre-order: the routine which adds orderings to the plan to make conflict resolution tractable. conflict-resolve:the routine which resolves <p> For example, from Table 1, we see that two of the important dimensions of variation among existing planners are the type and strength of protection strategies and tractability refinements employed by the individual planners. In <ref> [14, 13, 15] </ref>, we developed qualitative models for the search space size and per-invocation cost of Refine-Plan-PO. According to this model, both tractability refinements and bookkeeping strategies can be seen as transferring complexity between search space size and per-invocation cost of Refine-Plan-PO.
Reference: [14] <author> S. Kambhampati. </author> <title> Design Tradeoffs in Partial Order (Plan Space) Planning. </title> <booktitle> In Proc. 2nd Intl. Conf. on AI Planning Systems (AIPS-94), </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Of late, there has been an increased interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types. Many recent research efforts have attempted comparative empirical analyses of planning algorithms <ref> [22, 1, 15, 13, 14] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [28, 27]. <p> I will base my comparison on two generalized algorithm templates for partial order planning and HTN planning based on the idea of refinement search. Specifically, in my recent work <ref> [15, 13, 14] </ref>, I have developed a generalized algorithm template for partial order refinement planning, the instantiations of which cover most existing PO planners. <p> Given a planning problem, a planner attempts to generate an action sequence that solves the problem. Partial order planners do this by searching in the space of partial plans. 2 Partial plans are best seen as implicit representations for sets of ground operator sequences (potential solutions) <ref> [15, 13, 14] </ref>. In particular, a partial plan corresponds to a set of ground operator sequences that are consistent with the ordering, binding and auxiliary constraints on the plan. <p> For example, from Table 1, we see that two of the important dimensions of variation among existing planners are the type and strength of protection strategies and tractability refinements employed by the individual planners. In <ref> [14, 13, 15] </ref>, we developed qualitative models for the search space size and per-invocation cost of Refine-Plan-PO. According to this model, both tractability refinements and bookkeeping strategies can be seen as transferring complexity between search space size and per-invocation cost of Refine-Plan-PO. <p> The critical question instead becomes ``What are the characteristics of the domains where specific types of protection strategies/tractability refinements provide superior performance?'' To answer these questions, we conducted empirical studies with instantiations of Refine-Plan-PO that vary along the dimensions of tractability refinements and protection strategies <ref> [14, 15] </ref>. Our experiments show that the differences in tractability refinements cause greater performance differentials than the differences in bookkeeping strategies. Protection strategies affect performance only when the solution density is low, forcing the planner to explore a significant part of its overall search space. <p> However, this paper does constitute a first step towards that latter goal. In particular, the understanding of the connections between HTN planning and partial order planning will mean that any insights regarding performance tradeoffs in partial order planning (e.g. <ref> [14, 22] </ref>) can be exploited in HTN planning. For example, the understanding of the effect of tractability refinements and protection strategies on performance, gained in the context of partial order planning (see Figure 2) can also be applicable in the context of HTN planning.
Reference: [15] <author> S. Kambhampati, C. Knoblock and Q. Yang. </author> <title> Planning as Refinement Search: A Unified framework for evaluating design tradeoffs in partial order planning. </title> <note> ASU-CSE-TR 94-002. To appear in Artificial Intelligence special issue on Planning and Scheduling. </note> <year> 1995. </year>
Reference-contexts: 1 Introduction Of late, there has been an increased interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types. Many recent research efforts have attempted comparative empirical analyses of planning algorithms <ref> [22, 1, 15, 13, 14] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [28, 27]. <p> I will base my comparison on two generalized algorithm templates for partial order planning and HTN planning based on the idea of refinement search. Specifically, in my recent work <ref> [15, 13, 14] </ref>, I have developed a generalized algorithm template for partial order refinement planning, the instantiations of which cover most existing PO planners. <p> Given a planning problem, a planner attempts to generate an action sequence that solves the problem. Partial order planners do this by searching in the space of partial plans. 2 Partial plans are best seen as implicit representations for sets of ground operator sequences (potential solutions) <ref> [15, 13, 14] </ref>. In particular, a partial plan corresponds to a set of ground operator sequences that are consistent with the ordering, binding and auxiliary constraints on the plan. <p> We will see that IPCs can be used to model bookkeeping (protection) constraints while PTCs can be used to model filter conditions and phantomization constraints (Section 5). 2 For a more formal development of the refinement search semantics of partial plans, see <ref> [13, 15] </ref> Algorithm Refine-Plan-PO (P) /*Returns refinements of P */ Parameters: sol: the routine for picking solution candidates from the candidate set of the partial plan pick-open: the routine for picking open conditions. pre-order: the routine which adds orderings to the plan to make conflict resolution tractable. conflict-resolve:the routine which resolves <p> For example, from Table 1, we see that two of the important dimensions of variation among existing planners are the type and strength of protection strategies and tractability refinements employed by the individual planners. In <ref> [14, 13, 15] </ref>, we developed qualitative models for the search space size and per-invocation cost of Refine-Plan-PO. According to this model, both tractability refinements and bookkeeping strategies can be seen as transferring complexity between search space size and per-invocation cost of Refine-Plan-PO. <p> The critical question instead becomes ``What are the characteristics of the domains where specific types of protection strategies/tractability refinements provide superior performance?'' To answer these questions, we conducted empirical studies with instantiations of Refine-Plan-PO that vary along the dimensions of tractability refinements and protection strategies <ref> [14, 15] </ref>. Our experiments show that the differences in tractability refinements cause greater performance differentials than the differences in bookkeeping strategies. Protection strategies affect performance only when the solution density is low, forcing the planner to explore a significant part of its overall search space.
Reference: [16] <author> C. Knoblock and Q. Yang. </author> <title> A Comparison of the SNLP and TWEAK planning algorithms. </title> <booktitle> In Proc. of AAAI Spring Symp. on Foundations of Automatic Planning. </booktitle> <month> March, </month> <year> 1993. </year>
Reference: [17] <author> D. Wilkins. </author> <title> Practical Planning: Extending the classical AI Planning Paradigm Morgan Kaufmann Publishers, </title> <address> San Mateo, CA (1988). </address>
Reference-contexts: One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE <ref> [17] </ref> and O-Plan [28, 27]. These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-Network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. <p> Observe that except for the main refinement step (which changes from precondition establishment to task reduction), the algorithms for PO and HTN planners are remarkably similar. It is interesting to note that many of the features of HTN planners, such as critics, and condition typing <ref> [17] </ref> can be accommodated without any major changes to Refine-Plan-HTN. In particular, critics can be accommodated as specialized tractability refinements and consistency Planning Agents SIGART Bulletin, Vol. 6, No. 1 HTN Planning as a ``Problem'' Historically, HTN planning has been seen as a ``method'' rather than as a ``problem''. <p> Clarifying features of HTN Planning One of the important advantages of the representation and candidate set semantics of the partial plans developed in Section 2 is that it allows us to put in perspective many of the less-understood features of HTN planning, including filter conditions [5], abstraction vs. task reduction <ref> [17] </ref> and why plans with unresolvable protection conflicts cannot in general be pruned in HTN planning [31]. <p> I will elaborate on this in the following three sections. 5.1 PTCs, Filter Conditions and Phantomization An aspect of HTN planning that has been much misunderstood is the role of filter conditions (also called reduction assumptions) in planning. The implementors of HTN planners, including O-Plan [28] and SIPE <ref> [17] </ref> swear by them, while some other researchers have dismissed them as efficiency hacks that lead to incompleteness in partial order planners. Filter conditions are the applicability conditions of the operators that should never be explicitly considered for establishment.
Reference: [18] <author> D. McDermott. </author> <title> Regression Planning. </title> <journal> Intl. Jour. Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference-contexts: (n 4 ) None None UA [22] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [27] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal <ref> [18] </ref> Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [20] Protection based Arbitrary Contributor protection Conflict resolution UCPOP [24] O (1) O (1) MP, MP-I [12] Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA MTC based O (n 4 ) MTC based O (n 4 ) <p> It is interesting to note McDermott's observations (made in the context of his comparison of regression planners and task reduction planners 6 ) <ref> [18] </ref>: `` The truth is that [regression] and [reduction] planners are not competing. The spaces searched by [reduction] planners are quite different from those searched by [regression] ones. A [reduction] planner pastes together big canned plans, postponing decisions about how those plans will interact.
Reference: [19] <author> D. McDermott. </author> <title> Planning and Acting. In Readings in Planning, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo (1990) </address>
Reference-contexts: This can be modeled by having a non-primitive task called Empty-truck, and a reduction method: Empty-truck ) [ take-out-widget ! Empty-truck]. Although task reduction schemas provide a natural way of modeling such looping <ref> [19] </ref>, this claim needs to be qualified in two important aspects: (i) many types of problems involving looping can in fact be handled by partial order planners such as UCPOP [24] with the help of quantified goals, and (ii) very few implemented HTN planners actually are capable of dealing with non-trivial
Reference: [20] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. Subsequently, Pednault [23] and McAllester <ref> [20] </ref>, provided simpler formalizations of partial order planning without recourse to modal truth criteria, and sound and complete planners based on their formalizations have been implemented [1, 24, 12]. 1. <p> O (n 4 ) None Unambiguous ordering Nonlin [27] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [18] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP <ref> [20] </ref> Protection based Arbitrary Contributor protection Conflict resolution UCPOP [24] O (1) O (1) MP, MP-I [12] Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection Unambiguous Ordering SNLP-MTC MTC based O (n 4 ) MTC based <p> This problem-based characterization also explains the complexity difference between planning in STRIPS and HTN formalisms. Propositional STRIPS planning is known to be PSPACE-complete <ref> [20] </ref>, whereas HTN planning is known to be undecidable in all but most restrictive cases [7].
Reference: [21] <author> D. McAllester. </author> <title> Private Communication. </title> <month> August </month> <year> 1994. </year>
Reference-contexts: The terminal symbols in each of the grammars G i are drawn from A. An action sequence S is a solution to the HTN planning problem if and only if it solves the problem, and S is a valid sentence in each of the grammars in G <ref> [21, 7] </ref>. Since task reduction and partial order planners are solving different problems, the completeness criteria for these methods will naturally be different. <p> This problem-based characterization also explains the complexity difference between planning in STRIPS and HTN formalisms. Propositional STRIPS planning is known to be PSPACE-complete [20], whereas HTN planning is known to be undecidable in all but most restrictive cases [7]. As McAllester points out <ref> [21] </ref>, this complexity difference can be understood on the basis of the fact that intersection of context free grammars (which is part of HTN planning problem) is an undecidable problem [11]. checks, while condition typing can be accommodated through the auxiliary constraints mechanism (see Section 5).
Reference: [22] <author> S. Minton, M. Drummond, J. Bresina and A. Philips. </author> <title> Total Order vs. Partial Order Planning: </title> <booktitle> Factors Influencing Performance In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Of late, there has been an increased interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types. Many recent research efforts have attempted comparative empirical analyses of planning algorithms <ref> [22, 1, 15, 13, 14] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [28, 27]. <p> Planning Agents SIGART Bulletin, Vol. 6, No. 1 Planner Soln. Constructor Goal Selection Bookkeeping Tractability Refinements Tweak [3] MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA <ref> [22] </ref> MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [27] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [18] Protection based O (1) Arbitrary O <p> However, this paper does constitute a first step towards that latter goal. In particular, the understanding of the connections between HTN planning and partial order planning will mean that any insights regarding performance tradeoffs in partial order planning (e.g. <ref> [14, 22] </ref>) can be exploited in HTN planning. For example, the understanding of the effect of tractability refinements and protection strategies on performance, gained in the context of partial order planning (see Figure 2) can also be applicable in the context of HTN planning.
Reference: [23] <author> E.P.D. Pednault. </author> <title> Synthesizing Plans that contain actions with Context-Dependent Effects. </title> <journal> Computational Intelligence, </journal> <volume> Vol. 4, </volume> <month> 356-372 </month> <year> (1988). </year>
Reference-contexts: This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. Subsequently, Pednault <ref> [23] </ref> and McAllester [20], provided simpler formalizations of partial order planning without recourse to modal truth criteria, and sound and complete planners based on their formalizations have been implemented [1, 24, 12]. 1. <p> It selects a precondition hC; si of the plan (where C is a precondition of a step s), and refines (i.e., adds constraints to) the partial plan such that different steps act as contributors of C to s in different refinements. Pednault <ref> [23] </ref> provides a general theory of establishment refinement for plans containing actions with conditional and quantified effects. Syntactically, each refinement corresponds to adding different sets of new step, ordering and binding constraints (as well as additional secondary preconditions, in the case of ADL actions [23]) to the parent plan. <p> Pednault <ref> [23] </ref> provides a general theory of establishment refinement for plans containing actions with conditional and quantified effects. Syntactically, each refinement corresponds to adding different sets of new step, ordering and binding constraints (as well as additional secondary preconditions, in the case of ADL actions [23]) to the parent plan. Bookkeeping/Protection: Once a goal is established, many partial order planners employ bookkeeping strategies for remembering the specific establishment decision and protecting it during latter refinements. Bookkeeping strategies can be modeled in terms of adding auxiliary constraints to the partial plan.
Reference: [24] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A Sound, Complete, Partial Order Planner for ADL. </title> <booktitle> In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. Subsequently, Pednault [23] and McAllester [20], provided simpler formalizations of partial order planning without recourse to modal truth criteria, and sound and complete planners based on their formalizations have been implemented <ref> [1, 24, 12] </ref>. 1. There has been very little formalization of HTN planning algorithms, with the result that for the uninitiated, it is very difficult to differentiate essential features from ``bells and whistles'' of HTN planning. 2. <p> MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [18] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [20] Protection based Arbitrary Contributor protection Conflict resolution UCPOP <ref> [24] </ref> O (1) O (1) MP, MP-I [12] Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection Unambiguous Ordering SNLP-MTC MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection conflict resolution McNONLIN-MTC <p> Recently, Barrett and Weld [2] experimented with an interesting alternative approach. This approach uses HTN schemas to do incremental bottom-up parsing of the partial plans generated by a partial-order planner (UCPOP <ref> [24] </ref>), and prunes plans which do not have any parse. <p> Although task reduction schemas provide a natural way of modeling such looping [19], this claim needs to be qualified in two important aspects: (i) many types of problems involving looping can in fact be handled by partial order planners such as UCPOP <ref> [24] </ref> with the help of quantified goals, and (ii) very few implemented HTN planners actually are capable of dealing with non-trivial forms of looping.
Reference: [25] <author> J.S. Penberthy. </author> <title> Planning with continuous change. </title> <type> Ph.D. Thesis. </type> <institution> CS-TR 93-12-01. University of Washington. </institution> <year> 1993. </year>
Reference-contexts: Since the initial and final location of the agent is Phoenix, this goal cannot be modeled as a goal of attainment, i.e., a precondition of t 1 (unless time is modeled explicitly in the action representation <ref> [25] </ref>). It has been mentioned in the literature (c.f. [6]) that such goals cannot be be modeled in classical planning without hierarchical task reduction. This claim needs to be qualified to some extent.
Reference: [26] <author> E. Sacerdoti. </author> <title> A structure for Plans and Behavior Elsevier, </title> <publisher> North-Holland, </publisher> <address> New York (1977). </address>
Reference-contexts: From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. After all, the first big shift from state-space planning used in STRIPS [10] was not to partial-order planning, but rather to HTN planning, as used in NOAH <ref> [26] </ref>.
Reference: [27] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, pages 888--893, </booktitle> <address> Boston, MA, </address> <year> 1977. </year>
Reference-contexts: One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan <ref> [28, 27] </ref>. These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-Network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. <p> Planning Agents SIGART Bulletin, Vol. 6, No. 1 Planner Soln. Constructor Goal Selection Bookkeeping Tractability Refinements Tweak [3] MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA [22] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin <ref> [27] </ref> MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [18] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [20] Protection based Arbitrary Contributor protection Conflict resolution UCPOP <p> Further, macro operators and stored plans are always used along with primitive operators. In contrast, task reduction schemas are typically used in lieu of the primitive operators. 5 Critics, Resources and Time Windows: Several other features, such as condition typing <ref> [27] </ref>, time-windows [29] and resource based 5 Although it is theoretically possible to make reduction schemas correspond to primitive operators, it is more likely that reduction schemas in realistic domains correspond to large plan fragments. reasoning [28, 30] have been claimed to be sources of efficiency for task reduction planning. <p> The preceding discussion about modeling filter conditions also has implications to the phantomization step in HTN planning (see Section 3). In planners like NONLIN <ref> [27] </ref>, phantomization of a task t : achieve (c) is accomplished by treating it as a simple establishment, and finding existing tasks t 00 in the plan that can provide c.
Reference: [28] <author> K. Currie and A. Tate. O-Plan: </author> <title> The Open Planning Architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1), </volume> <year> 1991. </year>
Reference-contexts: One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan <ref> [28, 27] </ref>. These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-Network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. <p> Finally, some implementations of HTN planners, such as O-Plan <ref> [28] </ref> allow for both precondition establishment and task reduction refinements within the same algorithm. In this paper, I will concentrate on ``pure'' task reduction planners, and leave the issue of utility of combining both refinement strategies for future investigation. <p> operators. 5 Critics, Resources and Time Windows: Several other features, such as condition typing [27], time-windows [29] and resource based 5 Although it is theoretically possible to make reduction schemas correspond to primitive operators, it is more likely that reduction schemas in realistic domains correspond to large plan fragments. reasoning <ref> [28, 30] </ref> have been claimed to be sources of efficiency for task reduction planning. Although these ideas originated with HTN planners, they can also be used effectively in partial order planning. <p> I will elaborate on this in the following three sections. 5.1 PTCs, Filter Conditions and Phantomization An aspect of HTN planning that has been much misunderstood is the role of filter conditions (also called reduction assumptions) in planning. The implementors of HTN planners, including O-Plan <ref> [28] </ref> and SIPE [17] swear by them, while some other researchers have dismissed them as efficiency hacks that lead to incompleteness in partial order planners. Filter conditions are the applicability conditions of the operators that should never be explicitly considered for establishment.
Reference: [29] <author> S. Vere. </author> <title> Planning in Time: Windows and Durations for Activities and Goals. </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intell.. </journal> <volume> Vol 5., </volume> <pages> pp 246-267 (1983). </pages>
Reference-contexts: Further, macro operators and stored plans are always used along with primitive operators. In contrast, task reduction schemas are typically used in lieu of the primitive operators. 5 Critics, Resources and Time Windows: Several other features, such as condition typing [27], time-windows <ref> [29] </ref> and resource based 5 Although it is theoretically possible to make reduction schemas correspond to primitive operators, it is more likely that reduction schemas in realistic domains correspond to large plan fragments. reasoning [28, 30] have been claimed to be sources of efficiency for task reduction planning.
Reference: [30] <author> D. Wilkins. </author> <title> Practical Planning. </title> <publisher> Morgan Kaufmann (1988). </publisher>
Reference-contexts: operators. 5 Critics, Resources and Time Windows: Several other features, such as condition typing [27], time-windows [29] and resource based 5 Although it is theoretically possible to make reduction schemas correspond to primitive operators, it is more likely that reduction schemas in realistic domains correspond to large plan fragments. reasoning <ref> [28, 30] </ref> have been claimed to be sources of efficiency for task reduction planning. Although these ideas originated with HTN planners, they can also be used effectively in partial order planning.
Reference: [31] <author> Q. Yang. </author> <title> Formalizing Planning Knowledge for hierarchical planning. </title> <journal> Computational Intelligence, </journal> <volume> Vol 6, </volume> <pages> pp. </pages> <month> 12-24 </month> <year> (1990). </year>
Reference-contexts: put any restrictions on how this redirection needs to be achieved, we will see in Section 5.3 that some properties of the planner (such as the ability to prune plans that are inconsistent with respect to the protection constraints, without losing completeness) depend on specific types of merging strategies (c.f. <ref> [31] </ref>). A special type of non-primitive tasks are the so called achievement tasks. An achievement task t : achieve (c) aims to make condition c true in the output situation of the task t. <p> semantics of the partial plans developed in Section 2 is that it allows us to put in perspective many of the less-understood features of HTN planning, including filter conditions [5], abstraction vs. task reduction [17] and why plans with unresolvable protection conflicts cannot in general be pruned in HTN planning <ref> [31] </ref>. I will elaborate on this in the following three sections. 5.1 PTCs, Filter Conditions and Phantomization An aspect of HTN planning that has been much misunderstood is the role of filter conditions (also called reduction assumptions) in planning. <p> This is illustrated by the example in Figure 5. Specifically, a partial plan that is inconsistent with respect to its auxiliary constraints might become consistent after further task reduction. Thus, partial plans with unresolvable conflicts between their protection constraints cannot be pruned. This phenomenon was first noticed by Yang <ref> [31] </ref>. Given our reconstruction of HTN planning in terms of refinement search, this phenomenon can be explained easily. Since monotonic-ity of a constraint depends upon the types of refinements allowed by task reduction refinements are allowed. <p> It is equally possible to regain monotonicity by placing restrictions on the refinement operations. Indeed, Yang <ref> [31] </ref> suggests a restriction called ``unique main subaction'' restriction, which effectively redirects all the auxiliary constraints involving a step t to a unique step t 0 in its reduction.
Reference: [32] <author> R.M. Young, M.E. Pollack and J.D. Moore. </author> <title> Decomposition and Causality in Partial-Order Planning. </title> <booktitle> In Proc. 2nd Intl. Conf. on AI Planning Systems, </booktitle> <year> 1994. </year> <journal> Planning Agents SIGART Bulletin, </journal> <volume> Vol. 6, No. </volume> <pages> 1 </pages>
Reference-contexts: To deal with the first problem, recently Erol et. al. [6, 7, 8] have developed a coherent formalization and complexity analysis of HTN planning. At the same time, Barrett and Weld [2] and Young et. al. <ref> [32] </ref> have developed simpler implementations of HTN planners. Barrett and Weld's work has also taken some important first steps towards the development of sound and complete HTN planning for expressive action representations.
References-found: 32

