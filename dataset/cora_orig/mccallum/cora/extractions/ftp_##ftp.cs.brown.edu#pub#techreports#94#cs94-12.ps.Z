URL: ftp://ftp.cs.brown.edu/pub/techreports/94/cs94-12.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-94-12.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Ahuja, K. Mehlhorn, J. Orlin, and R. E. Tarjan, </author> <title> "Faster algorithms for the shortest path problem," </title> <journal> Journal of the Association for Computing Machinery 37 (1990), </journal> <pages> 213-223. </pages>
Reference: [2] <author> N. Alon, P. Seymour, and R. Thomas, </author> <title> "A separator theorem for graphs with an excluded minor and its applications," </title> <booktitle> Proc. 22nd Annual ACM Symposium on Theory of Computing (1990), </booktitle> <pages> 293-299. </pages>
Reference-contexts: Examples of classes for which such theorems have been proved are planar graphs [23], bounded-genus graphs [13], two-dimensional overlap graphs [22], and graphs excluding a fixed graph as a minor <ref> [2] </ref>. Separators can be used to find a division [6] of a graph, a partition of the edge-set into subsets, called regions. A node is said to be contained in a region if some edge of the region is incident to the node.
Reference: [3] <author> M.J. Atallah, R. Cole, </author> <title> and M.T. Goodrich, "Cascading Divide-and Conquer: A Technique for Designing Parallel Algorithms," </title> <booktitle> Proc. 28th IEEE Symp. on Foundations of Computer Science (1987), </booktitle> <pages> 151-160. </pages>
Reference-contexts: Now we address planar graphs specifically. Goodrich <ref> [3] </ref> has given a linear-time algorithm to find a region decomposition of a planar graph using p n-separators. His method can be used to obtain a (g; n)-recursive division.in linear time.
Reference: [4] <author> E. Cohen, </author> <title> "Efficient parallel shortest-paths in digraphs with a separator decomposition," </title> <booktitle> Proc. 5th Annual Symposium on Parallel Algorithms and Architectures (1993), </booktitle> <pages> 57-67. 10 </pages>
Reference-contexts: For undirected planar graphs, Pan and Reif [25,26] showed how to achieve O (n 3=2 ) time using separators. Cohen <ref> [4] </ref> showed how to achieve the same bound for directed planar graphs. Previously no algorithm handling negative lengths was known that ran faster than O (n 3=2 ). <p> Note that other problems such as bottleneck shortest path that can be solved using slight variants of Dijkstra's algorithm can also be solved in linear time using our approach. The algorithm for arbitrary lengths first applies the algorithm of Cohen <ref> [4] </ref> to each region, obtaining (1) shortest-path distances between each pair of boundary nodes of the region and (2) an augmented version of the region that facilitates computing shortest-paths in the region.
Reference: [5] <author> E. Cohen, </author> <title> "Parallel algorithms with improved work for shortest-paths from multiple sources," </title> <booktitle> Proc. 2nd Israel Symposium on Theory of Computing and Systems (1993), </booktitle> <pages> 57-67. </pages>
Reference-contexts: We then compute shortest paths in G 0 R using the Bellman-Ford shortest-path algorithm. Because of property (2) above, we only need O (log n) iterations of that algorithm (as observed, e.g., by Co-hen <ref> [5] </ref>). It is easy to verify that the distances computed in Phase III are the correct shortest-path distances. Now we analyze the algorithm. As remarked earlier, the first phase can be done in O (r 3=2 ) time for each region in the division [4,25,26].
Reference: [6] <author> G.N. Frederickson, </author> <title> "Data Structures for On-Line Updating of Minimum Spanning Trees," </title> <booktitle> Proc. 15th ACM Symp. on Theory of Computing (1983), </booktitle> <pages> 252-257. </pages>
Reference-contexts: To obtain a dynamic algorithm, we use an approach 2 used previously for dynamically approximating short-est paths in planar undirected graphs [20], an approach based in turn on that used in dynamic algorithms for a variety of problems in planar graphs <ref> [6, 10,11,27] </ref>. To compute the shortest path from a given source to a given sink, one operates on the union of complete graphs with two of the complete graphs replaced by the regions they represent, one for the source and one for the sink. <p> Examples of classes for which such theorems have been proved are planar graphs [23], bounded-genus graphs [13], two-dimensional overlap graphs [22], and graphs excluding a fixed graph as a minor [2]. Separators can be used to find a division <ref> [6] </ref> of a graph, a partition of the edge-set into subsets, called regions. A node is said to be contained in a region if some edge of the region is incident to the node. <p> Dynamic maintenance of shortest paths These partitioning techniques can also be used to derive efficient dynamic algorithms for shortest paths and other related problems. The ideas are similar to a number of other fully dynamic algorithms for graph problems <ref> [6, 10,11,20,27] </ref>. The basic idea is to divide G into suitable sized pieces and precompute all-boundary pair shortest paths in each piece. These precomputed answers are used to answer any given query quickly.
Reference: [7] <author> G.N. Frederickson, </author> <title> "Fast algorithms for shortest paths in planar graphs, with applications," </title> <journal> SIAM Journal on Computing 16 (1987), </journal> <pages> 1004-1022. </pages>
Reference-contexts: Additional support provided by ARPA contract N00014-91-J-4052 ARPA Order No. 8225. y Research supported by ONR/DARPA grant N00014-92-J-1989 Automatic Generation of Engineering Analysis bit-manipulation of the lengths, is O (m+n log n) time, due to Fredman and Tarjan [9]. 1 For planar graphs, Frederickson <ref> [7] </ref> pioneered the use of separators to obtain faster shortest-path algorithms. His algorithm, the best known previously, runs in O (n p log n) time on planar graphs. It depends on the fact that planar graphs have size-O ( p n) separators. <p> Lip-ton and Tarjan showed [23] that given an n-node planar graph one can in linear time find a set of nodes of size O ( p n) whose removal breaks the graph into pieces each of size at most 2 3 n. Based on this result, Fred-erickson <ref> [7] </ref> developed the notion of an r-division of a graph, a division of the graph into regions of size fi (r) with boundaries of size O ( p r).
Reference: [8] <author> M. L. Fredman and D. E. Willard, </author> <title> "Trans-dichotomous algorithms for minimum spanning trees and shortest paths," </title> <booktitle> Proc. 31st Annual IEEE Symposium on Foundations of Computer Science (1990), </booktitle> <pages> 719-725. </pages>
Reference: [9] <author> M.L. Fredman and R.E. Tarjan, </author> <title> "Fibonacci heaps and their uses in improved network optimization algorithms," </title> <journal> Journal of the Association for Computing Machinery 34 (1987), </journal> <pages> 596-615. </pages>
Reference-contexts: Additional support provided by ARPA contract N00014-91-J-4052 ARPA Order No. 8225. y Research supported by ONR/DARPA grant N00014-92-J-1989 Automatic Generation of Engineering Analysis bit-manipulation of the lengths, is O (m+n log n) time, due to Fredman and Tarjan <ref> [9] </ref>. 1 For planar graphs, Frederickson [7] pioneered the use of separators to obtain faster shortest-path algorithms. His algorithm, the best known previously, runs in O (n p log n) time on planar graphs. It depends on the fact that planar graphs have size-O ( p n) separators.
Reference: [10] <author> Z. Galil and G. F. </author> <title> Italiano, "Maintaining biconnected components of dynamic planar graphs," </title> <booktitle> Proc. 18th Int. Colloquium on Automata, Languages, and Programming. </booktitle> <year> (1991), </year> <pages> 339-350. </pages>
Reference: [11] <author> Z. Galil, G.F. Italiano, and N. Sarnak, </author> <title> "Fully Dynamic Planarity Testing," </title> <booktitle> Proc. 24th Annual ACM Symposium on Theory of Computing (1992), </booktitle> <pages> 495-506. </pages>
Reference: [12] <author> H. Gazit and G. L. Miller, </author> <title> "A parallel algorithm for finding a separator in planar graphs," </title> <booktitle> Proc. 28th Annual IEEE Symposium on Foundations of Computer Science (1987), </booktitle> <pages> 238-248. </pages>
Reference-contexts: To obtain a parallel algorithm, we simply use a parallel algorithm to carry out each step. Finding the r-division can be done by repeated application of the parallel planar-separator algorithm of Gazit and Miller <ref> [12] </ref>. Cohen gives a parallel version of her algorithm.
Reference: [13] <author> J. R. Gilbert, J. P. Hutchinson, and R. E. Tarjan, </author> <title> "A separation theorem for graphs of bounded genus," </title> <journal> Journal of Algorithms, </journal> <year> 1984. </year>
Reference-contexts: The size of the separator is the number of nodes it contains. A class of graphs has an f -separator theorem if any k-node member of the class has a size-f (k) separator. Examples of classes for which such theorems have been proved are planar graphs [23], bounded-genus graphs <ref> [13] </ref>, two-dimensional overlap graphs [22], and graphs excluding a fixed graph as a minor [2]. Separators can be used to find a division [6] of a graph, a partition of the edge-set into subsets, called regions.
Reference: [14] <author> A.V. Goldberg, </author> <title> "Scaling Algorithms for the Shortest Path Problem," </title> <booktitle> SIAM Symposium on Discrete Algorithms. </booktitle> <year> (1993). </year>
Reference-contexts: The second algorithm handles negative edge-lengths. We obtain an algorithm that takes time O (n 4=3 log nL), where the lengths are integers greater than L. For general graphs, the best bound known is O (n 1=2 m log L) time, due to Goldberg <ref> [14] </ref> which yields O (n 3=2 log L) time on sparse (e.g. planar) graphs. For undirected planar graphs, Pan and Reif [25,26] showed how to achieve O (n 3=2 ) time using separators. Cohen [4] showed how to achieve the same bound for directed planar graphs. <p> A simple induction proof shows that this construction has the desired properties. Phase II: Let H be the union of the H R 's for all the regions R of the division. We use the single-source shortest path algorithm due to Goldberg <ref> [14] </ref> in H to compute shortest paths from s to all the boundary nodes of the regions.
Reference: [15] <author> M. Goodrich, </author> <title> "Planar Separators and Parallel Polygon Triangulation," </title> <booktitle> Proc. 24th Annual ACM Symposium on Theory of Computing (1992), </booktitle> <pages> 507-516. </pages>
Reference-contexts: Frederickson showed that an r-division could be found in O (n log n) time by recursive application of the separator-algorithm of Lipton and Tarjan. Goodrich <ref> [15] </ref> has recently given a linear-time algorithm to find a separator decomposition in a planar graph. His method yields a linear-time algorithm to find an r-division.
Reference: [16] <author> T. H. Cormen, C. E. Leiserson, and R. E. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Therefore running Goldberg's algorithm on H requires O ( n 3=2 r 1=4 log D) time. The time required to run a Bellman-Ford computation on one region for O (log r) iterations is O (r log r) (see for instance <ref> [16] </ref>). Thus, the time required to run the third phase on all the regions is O (n log r). Choosing r equal to n 2=3 log 4=3 D, we see that the entire algorithm requires O (n 4=3 log 2=3 D) time. We thus get the bounds of Theorem 4.1.
Reference: [17] <author> R. Hassin, </author> <title> "Maximum flow in (s; t) planar networks," </title> <note> Information Processing Letters 13 (1981), 107. </note>
Reference-contexts: Here m is the num ber of edges, n is the number of nodes, and C is the maximum magnitude of an edge-length assuming edge-lengths are integers. 1 too large in magnitude. For planar graphs, shortest-path computation is closely related to network flow. Hassin <ref> [17] </ref> has shown that if a source s and a sink t are located on the same face of a planar graph, then a maximum st-flow can be found by computing single-source shortest-paths in the planar dual.
Reference: [18] <author> D.B. Johnson, </author> <title> "Parallel algorithms for minimum cuts and maximum flows in planar networks," </title> <journal> Journal of the Association for Computing Machinery 34 (1987), </journal> <pages> 950-967. </pages>
Reference: [19] <author> D.B. Johnson and S.M. Venkatesan, </author> <title> "Using divide and conquer to find flows in directed planar networks in O(n 1:5 log n) time," </title> <booktitle> Proc. 20th Annual Allerton Conf. on Communication, Control, and Computing (1982), </booktitle> <pages> 898-905. </pages>
Reference-contexts: Thus using our linear-time algorithm, one obtains a linear-time algorithm for maximum st-flow in this case. In the case when s and t are not on the same face and the graph is directed, Miller and Naor [21] (see also Johnson and Venkatesan <ref> [19] </ref>) show how to solve max-flow by computing single-source shortest-path computation with negative lengths. They use this approach to find a maximum flow.
Reference: [20] <author> P. N. Klein and S. Subramanian, </author> <title> "A fully dynamic approximation scheme for all-pairs shortest paths in planar graphs," </title> <booktitle> Proc. 1993 Workshop on Algorithms and Data Structures (1993 ), 442-451. </booktitle>
Reference-contexts: The same bounds hold for perfect matching; the bounds are higher by a logarithmic factor for max flow. To obtain a dynamic algorithm, we use an approach 2 used previously for dynamically approximating short-est paths in planar undirected graphs <ref> [20] </ref>, an approach based in turn on that used in dynamic algorithms for a variety of problems in planar graphs [6, 10,11,27].
Reference: [21] <author> G. L. Miller and J. Naor, </author> <title> "Flows in planar graphs with multiple sources and sinks," </title> <booktitle> Proc. 30th IEEE Symposium on Foundations of Computer Science (1989), </booktitle> <pages> 112-117. </pages>
Reference-contexts: Thus using our linear-time algorithm, one obtains a linear-time algorithm for maximum st-flow in this case. In the case when s and t are not on the same face and the graph is directed, Miller and Naor <ref> [21] </ref> (see also Johnson and Venkatesan [19]) show how to solve max-flow by computing single-source shortest-path computation with negative lengths. They use this approach to find a maximum flow. <p> Our task is to compute a feasible flow assignment to the edges of the network (if one exists) such that the sum of the flow into any node is equal to the demand at that node. Miller and Naor <ref> [21] </ref> show that a legal-circulation can be computed in a planar graph G by doing a single-source shortest-path computation in the dual graph. The circulation problem 9 is also related to the problem of computing perfect matchings in planar bipartite graph.
Reference: [22] <author> G. L. Miller, S. Teng, and S. Vavasis, </author> <title> "A unified geometric approach to graph separators," </title> <booktitle> Proc. 31st Annual IEEE Symposium on Foundations of Computer Science (1991), </booktitle> <pages> 538-547. </pages>
Reference-contexts: A class of graphs has an f -separator theorem if any k-node member of the class has a size-f (k) separator. Examples of classes for which such theorems have been proved are planar graphs [23], bounded-genus graphs [13], two-dimensional overlap graphs <ref> [22] </ref>, and graphs excluding a fixed graph as a minor [2]. Separators can be used to find a division [6] of a graph, a partition of the edge-set into subsets, called regions.
Reference: [23] <author> R.J. Lipton and R.E. Tarjan, </author> <title> "A separator theorem for planar graphs," </title> <journal> SIAM Journal of Applied Mathematics 36 (1979), </journal> <pages> 177-189. </pages>
Reference-contexts: The approach used in obtaining the shortest-path algorithm for arbitrary lengths also enables us to obtain parallel and dynamic algorithms for this problem and for max-flow and matching. The key to both our shortest-path algorithms is our use of graph-decompositions based on separators. Lip-ton and Tarjan showed <ref> [23] </ref> that given an n-node planar graph one can in linear time find a set of nodes of size O ( p n) whose removal breaks the graph into pieces each of size at most 2 3 n. <p> The size of the separator is the number of nodes it contains. A class of graphs has an f -separator theorem if any k-node member of the class has a size-f (k) separator. Examples of classes for which such theorems have been proved are planar graphs <ref> [23] </ref>, bounded-genus graphs [13], two-dimensional overlap graphs [22], and graphs excluding a fixed graph as a minor [2]. Separators can be used to find a division [6] of a graph, a partition of the edge-set into subsets, called regions.
Reference: [24] <author> H. N. Gabow and R. E. Tarjan, </author> <title> "Almost-optimum speed-ups of algorithms for bipartite matching and related problems," </title> <booktitle> Proc. 20th Annual ACM Sym-posim on Theory of Computing (1988), </booktitle> <pages> 514-527. </pages>
Reference-contexts: Computing shortest paths in parallel To get an efficient parallel algorithm we follow the same three-phase strategy but instead of using Golberg's algorithm in the second phase we use an algorithm due to Gabow and Tarjan <ref> [24] </ref>. Given an x-node e-edge graph H with integral edge-lengths that are at most N in magnitude, the algorithm in [24] can compute single-source shortest-paths in H in time O ( xe log (xN )(log 2p)=p) using p e=( p processors. <p> get an efficient parallel algorithm we follow the same three-phase strategy but instead of using Golberg's algorithm in the second phase we use an algorithm due to Gabow and Tarjan <ref> [24] </ref>. Given an x-node e-edge graph H with integral edge-lengths that are at most N in magnitude, the algorithm in [24] can compute single-source shortest-paths in H in time O ( xe log (xN )(log 2p)=p) using p e=( p processors.
Reference: [25] <author> V. Pan and J. H. Reif, </author> <title> "Fast and efficient solution of path algebra problems," </title> <journal> Journal of Computer and System Sciences 38 (1989), </journal> <pages> 494-510. </pages>
Reference-contexts: Define the splitting set of each region to be the set of boundary nodes of the region. We also use a separator decomposition for each region, as explained below. The algorithm consists of three phases. Phase I: We apply a nested-dissection algorithm <ref> [25] </ref> to compute, for each region R of the division, two auxiliary graphs H R and G R . The nodes of H R are the splitting nodes, and for every pair of nodes there is an edge whose length is the shortest-path distance in R.
Reference: [26] <author> V. Pan and J. H. Reif, </author> <title> "The parallel computation of minimum cost paths in graphs by stream contraction," </title> <booktitle> Information Processing Letters 40 (1991), </booktitle> <pages> 79-83. </pages>
Reference: [27] <author> S. Subramanian, </author> <title> "A Fully Dynamic Data Structure For Reachability in Planar Digraphs," </title> <booktitle> Proc. 1993 Eu-ropean Symposium on Algorithms (1993). </booktitle> <pages> 11 </pages>
References-found: 27

