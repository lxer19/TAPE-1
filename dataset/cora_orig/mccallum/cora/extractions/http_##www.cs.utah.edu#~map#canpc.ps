URL: http://www.cs.utah.edu/~map/canpc.ps
Refering-URL: http://www.cs.utah.edu/~map/
Root-URL: 
Email: ald@cs.utah.edu, swanson@cs.utah.edu, map@cs.utah.edu  
Title: Efficient Communication Mechanisms for Cluster Based Parallel Computing  
Author: Al Davis, Mark Swanson, Mike Parker 
Keyword: communication latency, protocols, network interface, cluster of workstations, mes sage passing) Abstract  
Address: Salt Lake City, UT 84112, USA  
Affiliation: Department of Computer Science University of Utah  
Abstract: The key to crafting an effective scalable parallel computing system lies in minimizing the delays imposed by the system. Parallel algorithms must communicate frequently. The communication delay between sender and receiver is a system-imposed latency. The existence of relatively inexpensive high performance workstations and the emerging availability of high performance interconnect options provide compelling economic motivation to investigate NOW/COW (network/cluster of workstation) architectures. However, these basic components have been designed for generality. The nodes in NOW/COW workstations are connected by longer physical wire paths than found in special-purpose supercomputer systems. Both effects tend to impose intractable latencies on communication. Another system-imposed delay arises from the overhead of sending and receiving messages. This overhead can come in several forms, including CPU occupancy by protocol and device code as well as interference with CPU access to various levels of the memory hierarchy. Access contention becomes even more onerous when the nodes in the system are themselves symmetric multiprocessors. Additional delays are incurred if the communication mechanism requires processes to run concurrently in order to communicate with acceptable efficiency. This paper presents the systems approach taken by the Utah Avalanche project which spans user level code, operating system support, and network interface hardware. The result minimizes the constraining effects of latency, overhead, and loosely coupled scheduling that are common characteristics in NOW-based architectures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Basu, A., Buch, V., Vogels, W., and von Eicken, T. U-Net: </author> <title> A User-Level Network Interface for Parallel and Distributed Computing. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles (December 1995). </booktitle>
Reference-contexts: Their protocol uses a more traditional buffering approach, and this, together with their use of the Lanai interface and position on an I/O bus result in a small message latency of 32 microseconds. U-Net <ref> [1] </ref> attempts to achieve many of the same goals as Avalanche, though with a constraint of using completely off-the-shelf hardware. They arrive at many of the same conclusions, such as the retention of system call interface for message transmission. They also report interesting performance effects resulting from fabric interface design.
Reference: [2] <author> Boden, N., Cohen, D., Felderman, R., Kulawik, A., Seitz, C., Seizovic, J., and Su, W.- K. </author> <title> Myrinet A Gigabit-per-second Local-Area Network. </title> <booktitle> IEEE MICRO 15, </booktitle> <month> February (February </month> <year> 1995), </year> <pages> 29-36. </pages>
Reference-contexts: For HP7200 based systems the clock speed is 120 MHz with a maximum sustainable bandwidth of 768 megabytes/second in 4-way systems. The results presented in this paper are based on the HP7200 and the additional performance possibilities of the PA-8000 platform are ignored. 3 Myricom's Myrinet-II <ref> [2] </ref> fabric runs at 160 MHz and uses bidirectional, byte-wide, data paths in each link to provide a source routed wormhole point to point interconnect fabric. Switching is done using 8 or 16 link crossbar switches which have a fall-through time of 110 ns.
Reference: [3] <author> Bryg, W., Chan, K., and Fiduccia, N. </author> <title> A High-Performance, Low-Cost Multiprocessor Bus for Workstations and Midrange Servers. </title> <journal> Hewlett-Packard Journal 47, </journal> <month> 1 (February </month> <year> 1996), </year> <pages> 18-24. 9 </pages>
Reference-contexts: These are then coupled by a custom network interface called the Widget. Hewlett-Packard provides one to four processor workstation platforms based on their HP-7200 or PA-8000 microprocessors [5, 7]. While these processors vary significantly in their internal architecture, they both use the Runway <ref> [3] </ref> bus as their main memory bus. The Runway bus is a 64-bit, split transaction bus which supports cache coherence in the multiple processor SMP configurations. For HP7200 based systems the clock speed is 120 MHz with a maximum sustainable bandwidth of 768 megabytes/second in 4-way systems.
Reference: [4] <author> Buzzard, G., D.Jacobson, Mackey, M., Marovich, S., and Wilkes, J. </author> <title> An implementation of the Hamlyn sender-managed interface architecture. </title> <booktitle> In Proceedings of the Second Symposium on Operating System Design and Implementation (October 1996). </booktitle>
Reference-contexts: The Hamlyn <ref> [4] </ref> effort at Hewlett-Packard Labs is similar in many respects to the Avalanche approach. It utilizes a sender-based protocol, HP Runway-based workstations, and the Myrinet interconnect. As their interface, however, they use a LaNai positioned on an I/O bus rather than the system bus.
Reference: [5] <author> Chan, K., Hay, C., Keller, J., Kurpanek, G., Schumacher, F., and J.Zheng. </author> <title> Design of the HP PA 7200 CPU. </title> <journal> Hewlett-Packard Journal 47, </journal> <month> 1 (February </month> <year> 1996), </year> <pages> 25-33. </pages>
Reference-contexts: The specific Avalanche approach is based on the use of Hewlett-Packard's symmetric multiprocessor (SMP) workstation and Myricom's high performance interconnect technologies. These are then coupled by a custom network interface called the Widget. Hewlett-Packard provides one to four processor workstation platforms based on their HP-7200 or PA-8000 microprocessors <ref> [5, 7] </ref>. While these processors vary significantly in their internal architecture, they both use the Runway [3] bus as their main memory bus. The Runway bus is a 64-bit, split transaction bus which supports cache coherence in the multiple processor SMP configurations.
Reference: [6] <author> Hewlett-Packard Co. </author> <title> PA-RISC 1.1 Architecture and Instruction Set Reference Manual, </title> <month> Febru-ary </month> <year> 1994. </year>
Reference-contexts: Whole-program results are available, but space does not permit reporting them here 3 . 6.1 Simulation Environment and Methodology All of the results reported in this paper were obtained from execution-driven simulations using the Paint simulator [9]. Paint simulates the HP PA RISC 1.1 <ref> [6] </ref> architecture and includes an instruction set interpreter and detailed cycle-level models of a first level cache, system bus, and memory system similar to those found in HP J-class systems.
Reference: [7] <author> Hunt, D. </author> <title> Advanced Performance Features of the 64-bit PA-8000. </title> <booktitle> In COMPCON '95 (1995), </booktitle> <pages> pp. 123-128. </pages>
Reference-contexts: The specific Avalanche approach is based on the use of Hewlett-Packard's symmetric multiprocessor (SMP) workstation and Myricom's high performance interconnect technologies. These are then coupled by a custom network interface called the Widget. Hewlett-Packard provides one to four processor workstation platforms based on their HP-7200 or PA-8000 microprocessors <ref> [5, 7] </ref>. While these processors vary significantly in their internal architecture, they both use the Runway [3] bus as their main memory bus. The Runway bus is a 64-bit, split transaction bus which supports cache coherence in the multiple processor SMP configurations.
Reference: [8] <author> Paikin, S., Lauria, and Chien, A. </author> <title> High Performance Messaging on Workstations: Illinois Fast Messages (FM) for Myrinet. </title> <booktitle> In Proceedings of Supercomputing '88 (1995). </booktitle>
Reference-contexts: As their interface, however, they use a LaNai positioned on an I/O bus rather than the system bus. They report a one-way message latency of 12.7 microseconds with a large portion of the time spent in the interface processor and in high-latency bus translation hardware. Illinois Fast Messages <ref> [8] </ref> is another I/O-bus resident system, in this case using SPARCstations and Myrinet. Their protocol uses a more traditional buffering approach, and this, together with their use of the Lanai interface and position on an I/O bus result in a small message latency of 32 microseconds.
Reference: [9] <author> Stoller, L., Kuramkote, R., and Swanson, M. </author> <title> PAINT- PA Instruction Set Interpreter. </title> <type> Tech. rep., </type> <institution> University of Utah Computer Science Department, </institution> <month> March </month> <year> 1996. </year> <note> Also available via WWW under http://www.cs.utah.edu/projects/avalanche/paint.ps. </note>
Reference-contexts: Whole-program results are available, but space does not permit reporting them here 3 . 6.1 Simulation Environment and Methodology All of the results reported in this paper were obtained from execution-driven simulations using the Paint simulator <ref> [9] </ref>. Paint simulates the HP PA RISC 1.1 [6] architecture and includes an instruction set interpreter and detailed cycle-level models of a first level cache, system bus, and memory system similar to those found in HP J-class systems.
Reference: [10] <author> Stoller, L., and Swanson, M. </author> <title> Direct Deposit: A Basic User-Level Protocol for Carpet Clusters. </title> <type> Tech. Rep. </type> <institution> UUCS-95-003, University of Utah Computer Science Department, </institution> <month> March </month> <year> 1995. </year> <note> Also available via WWW under http://www.cs.utah.edu/projects/avalanche. </note>
Reference-contexts: This means that, given a reliable network, a message that is successfully sent will be received, since neither the network or the receiving processor/interface will drop the message. The Avalanche implementation of SBPs is called Direct Deposit <ref> [10] </ref> (DD); it provides system call-based connection establishment and message transmission. Much of the security and safety overhead is isolated to connection setup time and is provided by going through the kernel.
Reference: [11] <author> Swanson, M., and Stoller, L. </author> <title> Low Latency Workstation Cluster Communications Using Sender-Based Protocols Computer Science Department. </title> <type> Tech. Rep. </type> <institution> UUCS-96-001, University of Utah, </institution> <month> March </month> <year> 1996. </year> <note> Also available via WWW under http://www.cs.utah.edu/projects/avalanche. </note>
Reference-contexts: Additional latency and overhead improvement is achieved by connecting the network interface directly to the memory bus rather than via an I/O adapter. 5.1 Sender-Based Protocols The key concept of sender-based protocols <ref> [11] </ref> (SBPs) is that the sender manages a reserved buffer in the receiver's memory and directs placement of messages within that buffer. The sender can rely on an arriving message being placed within the buffer at the location the sender has specified.
Reference: [12] <author> Thekkath, A., and Levy, H. </author> <title> Limits to Low-Latency Communications on High-Speed Networks. </title> <journal> acm Transactions on Computer Systems 11, </journal> <month> 2 (May </month> <year> 1993), </year> <pages> 179-203. </pages>
Reference-contexts: This precludes coherent fabric transactions and does not efficiently support the improved protocols described in this paper. The design of the fabric interface can have a dramatic effect on both latency and overhead <ref> [12] </ref>. The overhead incurred by the CPU interactions to send or receive a message are usually difficult or impossible to eliminate from the basic latency. The Avalanche choice has therefore been to create a custom network interface capable of directly coupling the Myrinet to the Runway bus.
Reference: [13] <author> Wilkes, J. </author> <title> Hamlyn an interface for sender-based communication. </title> <type> Tech. Rep. </type> <institution> HPL-OSR-92-13, Hewlett-Packard Research Laboratory, </institution> <month> Nov. </month> <year> 1992. </year> <month> 10 </month>
Reference-contexts: Lightweight, sender-based protocols <ref> [13] </ref> are used to reduce the software components of latency and overhead, and to allow simple hardware acceleration of common operations. Operating system involvement is retained in connection establishment and in message transmission. This permits protected use of the fabric by multiple processes.
References-found: 13

