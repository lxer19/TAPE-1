URL: http://www.cs.washington.edu/homes/juanito/acm.ps
Refering-URL: http://www.cs.washington.edu/homes/juanito/pub.html
Root-URL: 
Email: fjuanito,jayramg@cs.washington.edu  
Title: Random Striping for News on Demand Servers  
Author: Juan Alemany and Jayram S. Thathachar 
Address: Box 352350 Seattle, Washington 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: We address the problem of assigning blocks of video streams to disks in News on Demand video servers. Specifically, given the common assumption that video streams are striped across the disks, we consider how to map successive blocks to disks to maximize performance. Our work begins by noting that the commonly proposed round-robin assignment, in which successive blocks of every stream are mapped to successive disks, provides the guarantee that once a video stream starts playing it will never miss a deadline, but that the latency to start a stream may be high. Furthermore, other operations such as fast-forward and rewind might suffer high latency and miss deadlines. We propose and analyze an alternative scheme, the replication and random mapping of successive blocks to disks. Our scheme minimizes latency but may miss deadlines. Using both analytic and simulation techniques, we show that the number of missed deadlines is negligible. In addition, our scheme supports with minimal latency other VCR operations such as stop and re-start, fast-forward, rewind and jump. We prove that with enough copies, any set of VCR operations will have minimal latency and will not miss any deadlines, for loads that are a significant fraction of the maximum load supported by the hardware. 
Abstract-found: 1
Intro-found: 1
Reference: [AKT] <author> Juan Alemany, Richard M. Karp, Jayram S. Thathachar, </author> <title> "Probabilistic Analysis of Video on Demand Service" (Work in Progress) </title>
Reference-contexts: However, this formula is overtly conservative and should only be used to find an upper bound on d. Our simulations show that for all practical purposes d = 3 is sufficient for eliminating hiccups at all loads. In another paper <ref> [AKT] </ref> we provide a tighter bound for d for a specific block distribution. 3.2 Data Layout Once d is fixed, we make d copies of each block and randomly assign all the copies to D = dF N c disks as follows: we number the copies (there are dF of them
Reference: [BMG + 94] <author> Berson S., Muntz R., Ghandeharizadeh S., Xiangyu Ju, </author> <booktitle> "Staggered Striping in multimedia information systems" SIGMOD Record, </booktitle> <volume> Vol. 23, Number 2, </volume> <pages> pp. </pages> <month> 79-90 June </month> <year> 1994. </year>
Reference-contexts: There are many variations on striping and we only consider the following one: the blocks of each video clip are placed across multiple disks in some order (usually round robin). Striping for video servers is discussed in many papers (e.g. <ref> [BMG + 94] </ref>,[Che94] and [BBD + 96]). In a News on Demand server, it might be necessary to use both techniques because clips have so few blocks that it might be impossible to place blocks across all disks. <p> We believe these values are disappointingly low due to the conservative analysis. 7 Related Work Video servers have received a lot of attention in the last few years and several studies have touched on the performance of round robin striping for video servers ( <ref> [BMG + 94] </ref>, [ORS96], [TDM + 95],[Che94], [CPK95], Several authors have identified and proposed schemes to address high latency in round robin striping.
Reference: [BMW94] <author> Berson S., Muntz R., Wong, W. R. </author> <title> "Randomized Data Allocation for Real-Time Disk I/O" Compcon Conference, </title> <address> San Francisco, California, </address> <month> Feb. </month> <year> 1996 </year>
Reference-contexts: Tewari informed us that the report is not publicly available. From the brief discussion of that report in [TMD + 95] it does not appear that it considered random striping with replication. Matching is only necessary if there are multiple copies of each block. Berson et al. <ref> [BMW94] </ref> also independently explored random data layouts. Their target application is 3D interactive systems where the user dynamically selects the next video. They propose to decluster each block into G parity sub-blocks which are placed randomly through the disk array.
Reference: [BKV + 81] <author> M. Blum, R.M. Karp, O. Vornberger, C.H. Papdimitriou, and M. </author> <title> Yannakakis "The Complexity of Testing Whether a Graph is a Superconcentrator" Information Processing Letters, </title> <booktitle> 13 </booktitle> <pages> 164-167, </pages> <year> 1981. </year>
Reference-contexts: It follows that with probability 1 O (1=F ), the layout will be able to satisfy all possible requests. 2 Once the layout is chosen, it never changes. Although we can not efficiently verify that our layout is good (this is co-NP hard <ref> [BKV + 81] </ref>), we will know it is not good if a set of requests cannot be assigned to disks without creating a bottleneck. If this happens we can choose another random layout.
Reference: [BBD + 96] <author> William J. Bolosky, Joseph S. Barrera, III, Richard P. Draves, Robert P. Fitzger-ald, Garth A. Gibson, Michael B. Jones, Steven P. Levi, Nathan P. Myhrvold, Richard F. Rashid. </author> <title> "The Tiger Video Fileserver", </title> <booktitle> Proceedings of the Sixth International Workshop on Network and Operating System Support for Digital Audio and Video. IEEE Computer Society, </booktitle> <address> Zushi, Japan, </address> <month> April, </month> <year> 1996. </year>
Reference-contexts: There are many variations on striping and we only consider the following one: the blocks of each video clip are placed across multiple disks in some order (usually round robin). Striping for video servers is discussed in many papers (e.g. [BMG + 94],[Che94] and <ref> [BBD + 96] </ref>). In a News on Demand server, it might be necessary to use both techniques because clips have so few blocks that it might be impossible to place blocks across all disks. <p> Their solution depends on a priori knowledge of an unchanging request distribution. Ghandeharizadeh et al. [GK95b] developed an analytical model to estimate the expected startup latency of a request as a function of load and server configuration. They propose replication and request migration to reduce latency. Bolosky et al. <ref> [BBD + 96] </ref> describe an implementation of a server using round robin striping and mention that latency in striped servers is analogous to insertion in a open hash table with sequential chaining. <p> Most of these techniques are dynamic, such as replicating popular items to adapt to high demand, moving requests to lightly loaded devices during playback, and caching popular items in memory. Several studies ([Mou96], <ref> [BBD + 96] </ref>) have stated that striping makes video servers more susceptible to disk failures and have considered replication for fault tolerance.
Reference: [BP95] <editor> Buddhikot M.M. Parulkar G.M. </editor> <title> "Efficient data layout, </title> <booktitle> scheduling and playout control in MARS" Proceedings of the 5th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, NH, USA. </address> <pages> pp. 339-50. </pages> <month> 18-22 April </month> <year> 1995. </year>
Reference: [CKY94] <author> M. S. Chen, D. D. Kandlur and P. S. Yu, </author> <title> "Support for Fully Interactive Playout in a Disk-Array-Based Video Server"IBM T.J. </title> <note> Watson Research Report RC 19534 - April 25, </note> <year> 1994 </year>
Reference-contexts: These operations show the user every k-th block at "normal" speed, and the user regulates the number of blocks skipped between blocks it sees. This model for fast-forward and rewind is similar to the one described in <ref> [CKY94] </ref>. 2.3 Characteristics of the News on De mand Workload While both Movie on Demand (MoD) servers and News on Demand (NoD) servers are essentially video servers, we expect that NoD server will differ significantly from MoD servers in content, access pattern, usage, and expectations of quality of service.
Reference: [CHLY] <author> Ming-Syan Chen, Hui-I Hsiao, Chung-Sheng Li, Philip S. </author> <title> Yu "Using Rotational Mirrored Declustering for Replica Placement in a Disk-Array-Based Video Server" Proceedings of ACM Multimedia 95, </title> <address> San Francisco, CA, </address> <year> 1995. </year>
Reference-contexts: If the server fails to retrieve a block before the end of the round, the viewer will perceive a playback discontinuity. We assume that each block is stored contiguously on disk; therefore, in each round, a block is read from exactly one disk. Other authors ([GK95a], <ref> [CHLY] </ref>) assume that blocks are declustered among multiple disks for load balance; we avoid this approach because it does not scale to an arbitrary number of disks: parallel retrieval reduces disk utilization as seek time and rotational latency are amortized over shorter transfer times.
Reference: [Che94] <author> Ann L. Chervenak, </author> <title> "Tertiary Storage: An Evaluation of New Applications" PhD Thesis, </title> <institution> University of California at Berke-ley Technical Report UDB/CSD 94/847, </institution> <month> December, </month> <year> 1994. </year>
Reference-contexts: There are few studies about News on Demand work-loads <ref> [Che94] </ref> (this remains an area of active research) but we will make the following assumption about this application workload: video content: NoD servers will store hundreds of very short clips, ranging from 20 second sound-bites to clips lasting at most a few minutes. <p> For example, a 20 second clip may be divided into fewer than a hundred blocks, and may only be striped across a hundred disks. Replication in combination with striping is discussed in <ref> [Che94] </ref>. The key problem we address is the following: suppose the server must store some number of clips (not necessarily of equal length), where F is the total number of blocks of all clips. <p> It is not clear how well these policies will fare under a NoD workload, with unpredictable access pattern and possibly frequent VCR operations. In the next section we briefly discuss round robin striping, a well known data layout and scheduling policy for MoD servers <ref> [Che94] </ref>. 4.1 Round Robin Striping Most movie server prototypes use a variant of round robin striping to lay out video data on disks and 5 serve requests. This section describes how round robin striping lays out data and assigns requests to disks.
Reference: [CPK95] <author> Ann L. Chervenak, David A. Patterson, and Randy H. Katz, </author> <booktitle> "Storage Systems for Movies-on-Demand Video Servers" Proceedings of the Fourteenth IEEE Symposium on Mass Storage Systems, </booktitle> <address> Monterey, CA, USA. </address> <pages> pp. 246-56. </pages> <institution> IEEE Comput. Soc. Tech. Committee on Mass Storage Syst. </institution> <month> 11-14 Sept. </month> <year> 1995. </year>
Reference-contexts: believe these values are disappointingly low due to the conservative analysis. 7 Related Work Video servers have received a lot of attention in the last few years and several studies have touched on the performance of round robin striping for video servers ( [BMG + 94], [ORS96], [TDM + 95],[Che94], <ref> [CPK95] </ref>, Several authors have identified and proposed schemes to address high latency in round robin striping. Chervenak et al. ([Che94],[CPK95]) studied 9 round robin striping on disks with a Zipf workload and found that for large disks arrays a significant fraction of requests experienced high latency.
Reference: [ADM + 95] <author> Asit Dan, Daniel M. Dias, Rajat Mukherjee, Dinkar Sitaram, Renu Tewari, </author> <title> "Buffering and Caching in Large-Scale Video Servers" Proceedings of Comp-Con'95, </title> <address> San Francisco, </address> <month> March </month> <year> 1995. </year>
Reference: [DKS95] <author> Asit Dan, Martin Kienzle, Dinkar Sitaram, </author> <title> "A dynamic policy of segment replication for load-balancing in video-on-demand servers" Multimedia Systems, </title> <journal> Vol.3, </journal> <volume> Number 3. </volume> <pages> pp. 93-103. </pages> <month> July </month> <year> 1995 </year>
Reference: [GK95a] <author> Shahram Ghandeharizadeh, Seon Ho Kim, </author> <title> "Striping in multi-disk video servers." </title> <booktitle> Proceedings of the SPIE The International Society for Optical Engineering. vol.2604. </booktitle> <pages> pp. 88-102. </pages> <year> 1996. </year> <booktitle> Conference on High-Density Data Recording and Retrieval Technologies, </booktitle> <address> Philadelphia, PA, USA. SPIE. 23-24 Oct. </address> <year> 1995. </year>
Reference: [GK95b] <institution> Shahram Ghandeharizadeh and Seon Ho Kim "An Analysis of Striping in Scalable Multi-Disk Video Servers", University of Southern California Technical Report 95-623, </institution> <year> 1995. </year>
Reference-contexts: They showed that striping 2 copies of each movie reduced latency but that replication in proportion to movie popularity was essential to almost eliminate latency. Their solution depends on a priori knowledge of an unchanging request distribution. Ghandeharizadeh et al. <ref> [GK95b] </ref> developed an analytical model to estimate the expected startup latency of a request as a function of load and server configuration. They propose replication and request migration to reduce latency.
Reference: [Knu73] <author> Donald E. Knuth, </author> <booktitle> "The Art of Computer Programming Vol. </booktitle> <publisher> III" Addison Wesley Publishing Company, </publisher> <year> 1973 </year> <month> 11 </month>
Reference-contexts: We assumed that each disk can serve 5 seconds of video in a 1 second round. These values roughly correspond to the transfer rate of a current disk drive and a display rate of 6.0 Mbs. Each clip lasts 30 seconds, and the request pattern obeys a Zipf <ref> [Knu73] </ref> distribution. In both striping schemes, we divided each clip into blocks of one second of video. Thus S c = 5, F = 3000, d varies between 1 and 4 copies, and N c is sufficiently large to accommodate all blocks.
Reference: [Gou88] <author> R. Gould, </author> <title> "Graph Theory" The Ben--jamin/Cummings Publishing Company, </title> <publisher> Inc. </publisher>
Reference-contexts: Proof: Consider the bad event that some fixed set X of at most S requests cannot be satisfied. This implies that there is no complete matching of X in the request graph H. By Hall's theorem <ref> [Gou88] </ref>, for some set X 0 X, the size of the neighborhood set N (X 0 ) Y of X in H must be less than than jX 0 j.
Reference: [Mou96] <author> Antoine Mourad, </author> <title> "Doubly-Striped Disk Mirroring: Reliable Storage for Video Servers" Multimedia Tools and Applications 2, </title> <address> 273-297 (1996), </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference: [OBRS] <author> Ozden, B., A. Biliris, R. Rastogi, and A. Silberschatz, </author> <title> "A Disk-based Storage Architecture for Movie on Demand Servers," </title> <journal> Special Issue on Multimedia Information, Information Systems Journal 20, </journal> <volume> 6 (1995), </volume> <pages> 465-482. </pages>
Reference: [ORS96] <author> Ozden B., Rastogi R., and Silberschatz A., </author> <title> "Disk striping in video server environments", </title> <booktitle> Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <publisher> IEEE Comput. Soc. Press. Los Alamitos, </publisher> <address> CA, USA. </address> <year> 1996. </year>
Reference-contexts: We believe these values are disappointingly low due to the conservative analysis. 7 Related Work Video servers have received a lot of attention in the last few years and several studies have touched on the performance of round robin striping for video servers ( [BMG + 94], <ref> [ORS96] </ref>, [TDM + 95],[Che94], [CPK95], Several authors have identified and proposed schemes to address high latency in round robin striping. Chervenak et al. ([Che94],[CPK95]) studied 9 round robin striping on disks with a Zipf workload and found that for large disks arrays a significant fraction of requests experienced high latency.
Reference: [Set92] <author> J. C. </author> <title> Setubal "New Experimental Results For Bipartite Matching" and "Sequential and Parallel Experimental Results with Bipartite Matching Algorithms" University of Campinas Technical Report 92-07 and 96-09 Campinas, S.P., </title> <address> Brazil. </address>
Reference-contexts: Hiccups only occur when H does not have a complete matching of X. In summary, at each round we assign blocks to disks by running an efficient matching algorithm <ref> [Set92] </ref> on H to find a maximal matching of X. We satisfy all the block requests that are matched, causing hiccups only when a complete matching of X does not exist.
Reference: [TDM + 95] <author> Renu Tewari, Dan Dias, Rajat Mukher-jee, and Harrick Vin, </author> <title> "High Availability in Clustered Video Servers" IBM Research Report RC-20108 , June 1995. </title>
Reference-contexts: We believe these values are disappointingly low due to the conservative analysis. 7 Related Work Video servers have received a lot of attention in the last few years and several studies have touched on the performance of round robin striping for video servers ( [BMG + 94], [ORS96], <ref> [TDM + 95] </ref>,[Che94], [CPK95], Several authors have identified and proposed schemes to address high latency in round robin striping. Chervenak et al. ([Che94],[CPK95]) studied 9 round robin striping on disks with a Zipf workload and found that for large disks arrays a significant fraction of requests experienced high latency. <p> They propose using bounds on hashing to determine the maximum load a server can handle before exceeding a threshold average latency. We are not aware of previous work using random layouts and bipartite matching to assign requests to servers. Tewari et al. mention in [TMD + 95] and <ref> [TDM + 95] </ref> an IBM Research report that compares the performance of random striping to round robin striping. Tewari informed us that the report is not publicly available. From the brief discussion of that report in [TMD + 95] it does not appear that it considered random striping with replication.
Reference: [TMD + 95] <author> Renu Tewari, Rajat Mukherjee, Dan Dias, </author> <title> and Harrick Vin "Design and Performance Tradeoffs in Clustered Multimedia Servers" Proceedings of IEEE-ICMCS,Tokyo, </title> <month> June </month> <year> 1996. </year> <month> 12 </month>
Reference-contexts: They propose using bounds on hashing to determine the maximum load a server can handle before exceeding a threshold average latency. We are not aware of previous work using random layouts and bipartite matching to assign requests to servers. Tewari et al. mention in <ref> [TMD + 95] </ref> and [TDM + 95] an IBM Research report that compares the performance of random striping to round robin striping. Tewari informed us that the report is not publicly available. From the brief discussion of that report in [TMD + 95] it does not appear that it considered random <p> Tewari et al. mention in <ref> [TMD + 95] </ref> and [TDM + 95] an IBM Research report that compares the performance of random striping to round robin striping. Tewari informed us that the report is not publicly available. From the brief discussion of that report in [TMD + 95] it does not appear that it considered random striping with replication. Matching is only necessary if there are multiple copies of each block. Berson et al. [BMW94] also independently explored random data layouts.
References-found: 22

