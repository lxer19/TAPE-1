URL: http://www.cs.washington.edu/homes/alon/site/files/ijcai97.ps
Refering-URL: http://www.cs.washington.edu/homes/alon/site/PaperAbstractPresentation_bib22.html
Root-URL: 
Title: Recursive Plans for Information Gathering  
Author: Oliver M. Duschka Alon Y. Levy 
Address: Stanford, California 94305 U.S.A.  600 Mountain Avenue Murray Hill, New Jersey 07974 U.S.A.  
Affiliation: Department of Computer Science Stanford University  AT&T Laboratories  
Date: August 1997.  
Note: To appear in the Proceedings of the Fifteenth International Joint Confer- ence on Artificial Intelligence, IJCAI-97. Nagoya, Japan,  
Abstract: Generating query-answering plans for information gathering agents requires to translate a user query, formulated in terms of a set of virtual relations, to a query that uses relations that are actually stored in information sources. Previous solutions to the translation problem produced sets of conjunctive plans, and were therefore limited in their ability to handle information sources with binding-pattern limitations, and to exploit functional dependencies in the domain model. As a result, these plans were incomplete w.r.t. sources encountered in practice (i.e., produced only a subset of the possible answers). We describe the novel class of recursive information gathering plans, which enables us to settle two open problems. First, we describe an algorithm for finding a query plan that produces the maximal set of answers from the sources in the presence of functional dependencies. Second, we describe an analogous algorithm in the presence of binding-pattern restrictions in the sources, which was not possible without recursive plans.
Abstract-found: 1
Intro-found: 1
Reference: [ Aho et al., 1979 ] <author> Alfred V. Aho, Yehoshua Sagiv, and Jeffrey D. Ullman. </author> <title> Equivalences among relational expressions. </title> <journal> SIAM Journal on Computing, </journal> <volume> 8(3) </volume> <pages> 218-246, </pages> <month> May </month> <year> 1979. </year>
Reference-contexts: In order to decide containment of conjunctive queries in the presence of functional dependencies, Aho et al. <ref> [ Aho et al., 1979 ] </ref> show that it suffices to precede the 2 containment algorithm by applying the chase algorithm to the contained query. A step in applying the chase to the body of a conjunctive query q is the following.
Reference: [ Arens et al., 1996 ] <author> Yigal Arens, Craig A. Knoblock, and Wei-Min Shen. </author> <title> Query reformulation for dynamic information integration. </title> <journal> International Journal on Intelligent and Cooperative Information Systems, </journal> 6(2/3):99-130, June 1996. 
Reference-contexts: 1 Introduction The problem of information integration (a.k.a. information gathering agents) has recently received considerable attention due to the growing number of structured information sources available online. Information integration systems (e.g., the Internet Softbot [ Etzioni and Weld, 1994 ] , SIMS <ref> [ Arens et al., 1996 ] </ref> , TSIMMIS [ Chawathe et al., 1994 ] , the Information Manifold [ Levy et al., 1996 ] , Occam [ Kwok and Weld, 1996 ] , Infomaster [ Duschka and Genesereth, 1997b ] ) provide a uniform query interface to the multiple information sources,
Reference: [ Chandra and Merlin, 1977 ] <author> Ashok K. Chandra and Philip M. Merlin. </author> <title> Optimal implementation of conjunctive queries in relational data bases. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 77-90, </pages> <year> 1977. </year>
Reference-contexts: Then e k1 contains two subgoals of p, g 1 and g 2 , with the same values/variables for the attributes in A, and g 1 contains a variable X for attribute B that is replaced by some value/variable in e k . Let h be the containment mapping <ref> [ Chandra and Merlin, 1977 ] </ref> that shows that q contains e k .
Reference: [ Chaudhuri et al., 1995 ] <author> Surajit Chaudhuri, Ravi Krish-namurthy, Spyros Potamianos, and Kyuseak Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering, </booktitle> <publisher> IEEE Comput. Soc. Press, </publisher> <pages> pages 190-200, </pages> <address> Los Alamitos, CA, </address> <year> 1995. </year>
Reference: [ Chawathe et al., 1994 ] <author> Sudarshan Chawathe, Hector Garcia-Molina, Joachim Hammer, Kelly Ireland, Yan-nis Papakonstantinou, Jeffrey Ullman, and Jennifer Widom. </author> <title> The TSIMMIS project: Integration of heterogeneous information sources. </title> <booktitle> In Proceedings of the 100th Anniversary Meeting, </booktitle> <pages> pages 7-18, </pages> <address> Tokyo, Japan, </address> <month> October </month> <year> 1994. </year> <journal> Information Processing Society of Japan. </journal>
Reference-contexts: 1 Introduction The problem of information integration (a.k.a. information gathering agents) has recently received considerable attention due to the growing number of structured information sources available online. Information integration systems (e.g., the Internet Softbot [ Etzioni and Weld, 1994 ] , SIMS [ Arens et al., 1996 ] , TSIMMIS <ref> [ Chawathe et al., 1994 ] </ref> , the Information Manifold [ Levy et al., 1996 ] , Occam [ Kwok and Weld, 1996 ] , Infomaster [ Duschka and Genesereth, 1997b ] ) provide a uniform query interface to the multiple information sources, thereby freeing the user from having to locate
Reference: [ Duschka and Genesereth, 1997a ] <author> Oliver M. Duschka and Michael R. Genesereth. </author> <title> Answering recursive queries using views. </title> <booktitle> In Proceedings of the Sixteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, PODS '97, </booktitle> <address> Tuc-son, AZ, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Existentially quantified variables in a source description are replaced by fresh variables in the expansion. 2 Our results apply also to the case in which user queries are recursive <ref> [ Duschka and Genesereth, 1997a ] </ref> . 3 Several authors have distinguished the case in which the source contains all the tuples that satisfy the query from the case in which some tuples may be missing from the source [ Et-zioni et al., 1994; Levy, 1996 ] . <p> These function symbols 3 can later be removed from the query plan 4 <ref> [ Duschka and Genesereth, 1997a ] </ref> . Definition 3.1 : (inverse rules) Let v be a source description v ( X ) : p 1 ( X 1 ); : : : ; p n ( X n ). <p> This would prove that q [ R is maximally-contained in q relative to . For k = 1, P exp is contained in q. As shown in <ref> [ Duschka and Genesereth, 1997a ] </ref> , this implies that P exp is contained in (q [ V 1 ) exp . It follows that P exp is contained in (q [ R) exp relative to .
Reference: [ Duschka and Genesereth, 1997b ] <author> Oliver M. Duschka and Michael R. Genesereth. </author> <title> Query planning in Info-master. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on Applied Computing, </booktitle> <address> San Jose, CA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: Information integration systems (e.g., the Internet Softbot [ Etzioni and Weld, 1994 ] , SIMS [ Arens et al., 1996 ] , TSIMMIS [ Chawathe et al., 1994 ] , the Information Manifold [ Levy et al., 1996 ] , Occam [ Kwok and Weld, 1996 ] , Infomaster <ref> [ Duschka and Genesereth, 1997b ] </ref> ) provide a uniform query interface to the multiple information sources, thereby freeing the user from having to locate the relevant sources, query each one in isolation, and combine manually the information from the different sources.
Reference: [ Duschka, 1997 ] <author> Oliver M. Duschka. </author> <title> Query optimization using local completeness. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <address> AAAI-97, Providence, RI, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: Query plans can be constructed by describing a set of inferences that the information agent needs to make in order to obtain data from its sources. We are currently extending our algorithms to deal with order predicates (e.g., ; &lt;; 6=) and with local completeness information about the sources <ref> [ Etzioni et al., 1994; Duschka, 1997 ] </ref> .
Reference: [ Etzioni and Weld, 1994 ] <author> Oren Etzioni and Daniel S. Weld. </author> <title> A softbot-based interface to the internet. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 72-76, </pages> <year> 1994. </year> <month> 6 </month>
Reference-contexts: 1 Introduction The problem of information integration (a.k.a. information gathering agents) has recently received considerable attention due to the growing number of structured information sources available online. Information integration systems (e.g., the Internet Softbot <ref> [ Etzioni and Weld, 1994 ] </ref> , SIMS [ Arens et al., 1996 ] , TSIMMIS [ Chawathe et al., 1994 ] , the Information Manifold [ Levy et al., 1996 ] , Occam [ Kwok and Weld, 1996 ] , Infomaster [ Duschka and Genesereth, 1997b ] ) provide a
Reference: [ Etzioni et al., 1994 ] <author> Oren Etzioni, Keith Golden, and Daniel Weld. </author> <title> Tractable closed world reasoning with updates. </title> <booktitle> In Proceedings of the 4th International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 178-189, </pages> <address> San Francisco, CA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Query plans can be constructed by describing a set of inferences that the information agent needs to make in order to obtain data from its sources. We are currently extending our algorithms to deal with order predicates (e.g., ; &lt;; 6=) and with local completeness information about the sources <ref> [ Etzioni et al., 1994; Duschka, 1997 ] </ref> .
Reference: [ Kwok and Weld, 1996 ] <author> Chung T. Kwok and Daniel S. Weld. </author> <title> Planning to gather information. </title> <booktitle> In Proceedings of the AAAI Thirteenth National Conference on Artificial Intelligence, </booktitle> <year> 1996. </year>
Reference-contexts: Information integration systems (e.g., the Internet Softbot [ Etzioni and Weld, 1994 ] , SIMS [ Arens et al., 1996 ] , TSIMMIS [ Chawathe et al., 1994 ] , the Information Manifold [ Levy et al., 1996 ] , Occam <ref> [ Kwok and Weld, 1996 ] </ref> , Infomaster [ Duschka and Genesereth, 1997b ] ) provide a uniform query interface to the multiple information sources, thereby freeing the user from having to locate the relevant sources, query each one in isolation, and combine manually the information from the different sources. <p> Instead, it will provide the address for a given name. In the case of equivalent rewritings, Ra-jaraman et al. [ Rajaraman et al., 1995 ] describe a bound on the size of the query plans that need to be considered. However, Kwok and Weld <ref> [ Kwok and Weld, 1996 ] </ref> show that if we restrict our plans to be sets of conjunctive queries, then there may not be a finite maximally-contained rewriting. As an example of a functional dependency, the year of a conference functionally determines its location. <p> Our algorithms generate the rewriting in time that is polynomial in the size of the query. In contrast, previous methods [ Levy et al., 1995; Rajaraman et al., 1995 ] describe the space of possible candidate rewritings, and propose heuristics for searching this space <ref> [ Kwok and Weld, 1996; Levy et al., 1996 ] </ref> . 1 These methods combine the process of finding a rewriting with the process of checking whether it is equivalent to the original query (which is NP-hard). <p> In 1 The algorithm in [ Levy et al., 1996 ] checks whether the plans can be executed given the binding-pattern restrictions, but is not guaranteed to produce the maximally-contained rewriting when these restrictions are present. The algorithm in <ref> [ Kwok and Weld, 1996 ] </ref> produces only conjunctive plans that are guaranteed to adhere to the limitations on binding patterns, but is not guaranteed to compute the maximally-contained plan. contrast, our method isolates the process of generating the maximally-contained rewriting, which can be done much more efficiently. 2 Preliminaries Relations <p> A query plan P is executable if for every rule r 2 P, r is executable. When sources have limitations on binding patterns, it turns out that there may not be a finite maximally contained plan, if we restrict ourselves to plans without recursion. The following example, adapted from <ref> [ Kwok and Weld, 1996 ] </ref> , illustrates the point. Example 4.1: Consider the following sources: v 1 (X) : ijcaiP apers (X) v 2 (X; Y ) : cites (X; Y ) v b 3 (X) : awardP aper (X).
Reference: [ Levy et al., 1995 ] <author> Alon Y. Levy, Alberto O. Mendelzon, Divesh Srivastava, and Yehoshua Sagiv. </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the 14th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Previous results on the rewriting problem are of limited practical use for several reasons. First, they have concentrated on showing a bound on the size of the resulting query plan <ref> [ Levy et al., 1995; Rajaraman et al., 1995 ] </ref> . These results establish the complexity of the rewriting problem, but yield only non-deterministic algorithms for its solution. Second, they considered only the problem of finding an equivalent rewriting of the query using the source relations. <p> Another significant advantage of our method is that it is generative, rather than descriptive. Our algorithms generate the rewriting in time that is polynomial in the size of the query. In contrast, previous methods <ref> [ Levy et al., 1995; Rajaraman et al., 1995 ] </ref> describe the space of possible candidate rewritings, and propose heuristics for searching this space [ Kwok and Weld, 1996; Levy et al., 1996 ] . 1 These methods combine the process of finding a rewriting with the process of checking whether <p> Without functional dependencies, only views that contain predicates appearing in the user query need to be considered <ref> [ Levy et al., 1995 ] </ref> . In the following we are going to give a construction of query plans that are guaranteed to be maximally-contained in the given queries, even in the presence of functional dependencies.
Reference: [ Levy et al., 1996 ] <author> Alon Y. Levy, Anand Rajaraman, and Joann J. Ordille. </author> <title> Query-answering algorithms for information agents. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, AAAI-96, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Information integration systems (e.g., the Internet Softbot [ Etzioni and Weld, 1994 ] , SIMS [ Arens et al., 1996 ] , TSIMMIS [ Chawathe et al., 1994 ] , the Information Manifold <ref> [ Levy et al., 1996 ] </ref> , Occam [ Kwok and Weld, 1996 ] , Infomaster [ Duschka and Genesereth, 1997b ] ) provide a uniform query interface to the multiple information sources, thereby freeing the user from having to locate the relevant sources, query each one in isolation, and combine <p> Our algorithms generate the rewriting in time that is polynomial in the size of the query. In contrast, previous methods [ Levy et al., 1995; Rajaraman et al., 1995 ] describe the space of possible candidate rewritings, and propose heuristics for searching this space <ref> [ Kwok and Weld, 1996; Levy et al., 1996 ] </ref> . 1 These methods combine the process of finding a rewriting with the process of checking whether it is equivalent to the original query (which is NP-hard). <p> In 1 The algorithm in <ref> [ Levy et al., 1996 ] </ref> checks whether the plans can be executed given the binding-pattern restrictions, but is not guaranteed to produce the maximally-contained rewriting when these restrictions are present.
Reference: [ Levy, 1996 ] <author> Alon Y. Levy. </author> <title> Obtaining complete answers from incomplete databases. </title> <booktitle> In Proceedings of the 22nd International Conference on Very Large Databases, </booktitle> <pages> pages 402-412, </pages> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: apply also to the case in which user queries are recursive [ Duschka and Genesereth, 1997a ] . 3 Several authors have distinguished the case in which the source contains all the tuples that satisfy the query from the case in which some tuples may be missing from the source <ref> [ Et-zioni et al., 1994; Levy, 1996 ] </ref> . For our discussion this distinction does not matter.
Reference: [ Qian, 1996 ] <author> Xiaolei Qian. </author> <title> Query folding. </title> <booktitle> In Proceedings of the 12th International Conference on Data Engineering, </booktitle> <pages> pages 48-55, </pages> <address> New Orleans, LA, </address> <month> February </month> <year> 1996. </year>
Reference: [ Rajaraman et al., 1995 ] <author> Anand Rajaraman, Yehoshua Sagiv, and Jeffrey D. Ullman. </author> <title> Answering queries using templates with binding patterns. </title> <booktitle> In Proceedings of the 14th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Previous results on the rewriting problem are of limited practical use for several reasons. First, they have concentrated on showing a bound on the size of the resulting query plan <ref> [ Levy et al., 1995; Rajaraman et al., 1995 ] </ref> . These results establish the complexity of the rewriting problem, but yield only non-deterministic algorithms for its solution. Second, they considered only the problem of finding an equivalent rewriting of the query using the source relations. <p> As an example of binding-pattern restrictions, a name server of an institution, holding the addresses of its employees, will not provide the list of all employees and their addresses. Instead, it will provide the address for a given name. In the case of equivalent rewritings, Ra-jaraman et al. <ref> [ Rajaraman et al., 1995 ] </ref> describe a bound on the size of the query plans that need to be considered. <p> Another significant advantage of our method is that it is generative, rather than descriptive. Our algorithms generate the rewriting in time that is polynomial in the size of the query. In contrast, previous methods <ref> [ Levy et al., 1995; Rajaraman et al., 1995 ] </ref> describe the space of possible candidate rewritings, and propose heuristics for searching this space [ Kwok and Weld, 1996; Levy et al., 1996 ] . 1 These methods combine the process of finding a rewriting with the process of checking whether
Reference: [ Sagiv and Yannakakis, 1980 ] <author> Yehoshua Sagiv and Mi-halis Yannakakis. </author> <title> Equivalence among relational expressions with the union and difference operators. </title> <journal> J. ACM, </journal> <volume> 27(4) </volume> <pages> 633-655, </pages> <year> 1980. </year>
Reference: [ Shmueli, 1993 ] <author> Oded Shmueli. </author> <title> Equivalence of datalog queries is undecidable. </title> <journal> Journal of Logic Programming, </journal> <volume> 15 </volume> <pages> 231-241, </pages> <year> 1993. </year>
Reference: [ Yang and Larson, 1987 ] <author> H. Z. Yang and P. A. Larson. </author> <title> Query transformation for PSJ-queries. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 245-254, </pages> <address> Los Altos, CA, </address> <year> 1987. </year>
References-found: 19

