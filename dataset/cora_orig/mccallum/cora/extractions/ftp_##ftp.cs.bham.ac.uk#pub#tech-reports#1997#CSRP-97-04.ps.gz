URL: ftp://ftp.cs.bham.ac.uk/pub/tech-reports/1997/CSRP-97-04.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~rmp/eebic/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Price's Theorem and the MAX Problem  
Author: W. B. Langdon and R. Poli 
Address: Birmingham B15 2TT, UK  
Affiliation: School of Computer Science, The University of Birmingham,  
Pubnum: Technical Report: CSRP-97-4  
Email: Email: fW.B.Langdon,R.Polig@cs.bham.ac.uk  
Phone: Tel: +44 (0) 121 414 4791, Fax: +44 (0) 121 414 4281  
Date: 13 January 1997  
Web: www: http://www.cs.bham.ac.uk/  
Abstract: We present a detailed analysis of the evolution of GP populations using the problem of finding a program which returns the maximum possible value for a given terminal and function set and a depth limit on the program tree (known as the MAX problem). We confirm the basic message of [ Gathercole and Ross, 1996 ] that crossover together with program size restrictions can be responsible for premature convergence to a sub-optimal solution. We show that this can happen even when the population retains a high level of variety and show that in many cases evolution from the sub-optimal solution to the solution is possible if sufficient time is allowed. In both cases theoretical models are presented and compared with actual runs. Experimental evidence is presented that Price's Covariance and Selection Theorem can be applied to GP populations and the practical effect of program size restrictions are noted. Finally we show that covariance between gene frequency and fitness in the first few generations can be used to predict the course of GP runs.
Abstract-found: 1
Intro-found: 1
Reference: [ Altenberg, 1994 ] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 3, </booktitle> <pages> pages 47-74. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: In particular it applies to genetic algorithms (GAs) <ref> [ Altenberg, 1994; Langdon, 1996 ] </ref> . 8 dividing by 16). q = z q = Frequency of gene z = Number of offspring z = Mean number of children Cov = covariance In our GP the size of the population does not change so z = 1 and the expected
Reference: [ Altenberg, 1995 ] <author> Lee Altenberg. </author> <title> The Schema Theorem and Price's Theorem. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 23-49, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Royal Trees [ Punch et al., 1996 ] ) and applying population genetics to GP <ref> [ Al-tenberg, 1994; Altenberg, 1995 ] </ref> .
Reference: [ Blickle and Thiele, 1995 ] <author> Tobias Blickle and Lothar Thiele. </author> <title> A mathematical analysis of tournament selection. </title> <editor> In Larry J. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference, </booktitle> <pages> pages 9-16, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The chance of an individual i being selected by a tournament is given by its rank r i within the population of size p and the tournament size t by the formula <ref> [ Blickle and Thiele, 1995; Langdon, 1996 ] </ref> (r i =p) t (r i1 =p) t In a large and diverse population this can be approximated by t (r i =p) t1 2 to 8 The expected number of children produced by individuals of rank R or less is approximately p
Reference: [ Bohm and Geyer-Schulz, 1996 ] <author> Walter Bohm and Andreas Geyer-Schulz. </author> <title> Exact uniform initialization for genetic programming. </title> <editor> In Richard K. Belew and Michael Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms IV, </booktitle> <address> University of San Diego, CA, USA, </address> <month> 3-5 August </month> <year> 1996. </year>
Reference-contexts: Half are created as full trees of this maximum depth and half are created using a grow method which creates trees of different shapes. ( [ Iba, 1996 ] and <ref> [ Bohm and Geyer-Schulz, 1996 ] </ref> discuss alternative means of generating random trees for use as the initial population in GP runs). With D = 8 about 1 8 of trees will be created with a maximum depth of 1 and therefore 6 will contain a single function.
Reference: [ Gathercole and Ross, 1996 ] <author> Chris Gathercole and Peter Ross. </author> <title> An adverse interaction between crossover and restricted tree depth in genetic programming. </title> <editor> In John R. Koza, David E. Gold-berg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 291-296, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Royal Trees [ Punch et al., 1996 ] ) and applying population genetics to GP [ Al-tenberg, 1994; Altenberg, 1995 ] . In this paper we combine the later two approaches by applying Price's Theorem from theoretical biology to the MAX problem. <ref> [ Gathercole and Ross, 1996 ] </ref> introduce the MAX problem to GP to highlight deficiencies in the standard GP crossover operator which result from the practical requirement to limit the size of evolved programs. <p> In the MAX problem "the task is to find the program which returns the largest value for a given terminal and function set and with a depth limit, D, where the root node counts as depth 0" <ref> [ Gathercole and Ross, 1996, page 291 ] </ref> . In this paper we use the function set f +, fi g and there is one terminal 0.5. <p> Finally the rest of the tree needs to be composed only of fi nodes to yield the maximum value of 4 2 D3 . Section 2 describes the GP used in our experiments, Section 3 gives the results obtained and provides a detailed analysis and comparison with <ref> [ Gathercole and Ross, 1996 ] </ref> . Section 4 shows typically the population retains a high level of diversity and presents models of the variety in the initial population and its subsequent evolution. <p> Some benchmarks for the GP system used in these experiments are contained in Appendix A. 2 GP Parameters Our GP system was set up to be the same as given in <ref> [ Gathercole and Ross, 1996 ] </ref> . The details are given in Table 1, parameters not shown are as [ Koza, 1994, page 655 ] . On each version of the problem 50 independent runs were conducted. [ Gathercole and Ross, 1996 ] do not describe how the initial population was <p> Our GP system was set up to be the same as given in <ref> [ Gathercole and Ross, 1996 ] </ref> . The details are given in Table 1, parameters not shown are as [ Koza, 1994, page 655 ] . On each version of the problem 50 independent runs were conducted. [ Gathercole and Ross, 1996 ] do not describe how the initial population was created. In this paper two sets of experiments are presented. In the first the usual ramped half-and-half method [ Koza, 1992, page 93 ] which creates random trees with a depths between 2 and 6 (i.e. <p> The percentage of unsuccessful runs is given in Figure 2. These results are similar to those in <ref> [ Gathercole and Ross, 1996 ] </ref> except [ Gathercole and Ross, 1996, Figures 3 and 4 ] do not contain data for depths of 7 or 8. 2 standard deviation. 3 3.1 Analysis of the Crossover Operator The size of programs within the population grows quickly until almost all individuals are <p> The percentage of unsuccessful runs is given in Figure 2. These results are similar to those in [ Gathercole and Ross, 1996 ] except <ref> [ Gathercole and Ross, 1996, Figures 3 and 4 ] </ref> do not contain data for depths of 7 or 8. 2 standard deviation. 3 3.1 Analysis of the Crossover Operator The size of programs within the population grows quickly until almost all individuals are full trees. <p> Only 0.74% of crossovers resulted in a taller subtree replacing a shorter one. These occur throughout most of the run, half occurring by generation 85 and the last in generation 441 (The mean generation is 105 and the standard deviation is 75). <ref> [ Gathercole and Ross, 1996, page 295 ] </ref> suggest the reason why GP finds the MAX problem hard is that the population quickly finds suboptimal solutions which contain + nodes near the root of the tree. To improve on such solutions crossover must replace them with fi nodes. <p> In contrast a crossover that moved subtrees at the same level is likely to produce an offspring with same fitness as its parent and thus is likely to have children itself. Thus high selection pressure and the problem representation conspire with the depth restriction to preserve sub-optimal programs. <ref> [ Gathercole and Ross, 1996, page 295 ] </ref> says "if there are no fi nodes in any tree at a particular high level, it [is] now impossible for crossover to introduce a fi node to this level; the population has converged to being duplicates of a sub-optimal tree, and no further <p> We suspect this is common to many GP problems. In the case of the MAX problem early high fitness individuals may use + functions to form comparatively large values. Later generations can then yield still larger values by joining subtrees composed of + nodes with fi functions. However, as <ref> [ Gathercole and Ross, 1996 ] </ref> point out, the depth restriction and the mechanics of the crossover operator make the insertion of fi nodes near the root of large trees difficult. <p> NB the eventual outcome of these three runs 500 generations later can be predicted from the covariance of gene frequency with (rank based) fitness in generations two and three. 6 Conclusions We have extended the analysis of the difficulties crossover experiences presented in <ref> [ Gathercole and Ross, 1996 ] </ref> to include a quantitative model of the later evolution of MAX problem populations. Comparison with experimental results indicate the model gives an indication of the likely rate of improvement but numerical values are not as close as we would like. <p> experiences presented in <ref> [ Gathercole and Ross, 1996 ] </ref> to include a quantitative model of the later evolution of MAX problem populations. Comparison with experimental results indicate the model gives an indication of the likely rate of improvement but numerical values are not as close as we would like. While [ Gathercole and Ross, 1996 ] suggest that MAX problem populations converge, measurements indicate after many generations two thirds of the population are unique. A model based on the interaction between crossover and the depth restriction has been presented which correctly predicts this and the variety in the early generations.
Reference: [ Holland, 1992 ] <author> John H. Holland. </author> <title> Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year> <note> First Published by University of Michigan Press 1975. </note>
Reference-contexts: However such a theory is of great importance to the field as a whole. Work so far has been principly split between extending the Schema Theorem <ref> [ Holland, 1992 ] </ref> from Genetic Algorithms to GP [ Koza, 1992; O'Reilly and Oppacher, 1995; Whigham, 1995; Poli and Langdon, 1997 ] , studying benchmark problems (e.g. Royal Trees [ Punch et al., 1996 ] ) and applying population genetics to GP [ Al-tenberg, 1994; Altenberg, 1995 ] .
Reference: [ Iba, 1996 ] <editor> Hitoshi Iba. </editor> <title> Random tree generation of genetic programming. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechenberg, and Hans-Paul Schwefel, editors, </editor> <booktitle> Parallel Problem Solving from Nature IV, Proceedings of the International Conference on Evolutionary Computation, volume 1141 of LNCS, </booktitle> <pages> pages 144-153, </pages> <address> Berlin, Germany, 22-26 September 1996. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Half are created as full trees of this maximum depth and half are created using a grow method which creates trees of different shapes. ( <ref> [ Iba, 1996 ] </ref> and [ Bohm and Geyer-Schulz, 1996 ] discuss alternative means of generating random trees for use as the initial population in GP runs).
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: On each version of the problem 50 independent runs were conducted. [ Gathercole and Ross, 1996 ] do not describe how the initial population was created. In this paper two sets of experiments are presented. In the first the usual ramped half-and-half method <ref> [ Koza, 1992, page 93 ] </ref> which creates random trees with a depths between 2 and 6 (i.e. D = 1 : : : 5) was used. (However the initial trees obeyed the problem specific height restriction).
Reference: [ Koza, 1994 ] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <month> May </month> <year> 1994. </year> <month> 12 </month>
Reference-contexts: The details are given in Table 1, parameters not shown are as <ref> [ Koza, 1994, page 655 ] </ref> . On each version of the problem 50 independent runs were conducted. [ Gathercole and Ross, 1996 ] do not describe how the initial population was created. In this paper two sets of experiments are presented.
Reference: [ Langdon, 1996 ] <author> W. B. Langdon. </author> <title> Data Structures and Genetic Programming. </title> <type> PhD thesis, </type> <institution> University College, </institution> <address> London, </address> <month> 27 September </month> <year> 1996. </year>
Reference-contexts: The chance of an individual i being selected by a tournament is given by its rank r i within the population of size p and the tournament size t by the formula <ref> [ Blickle and Thiele, 1995; Langdon, 1996 ] </ref> (r i =p) t (r i1 =p) t In a large and diverse population this can be approximated by t (r i =p) t1 2 to 8 The expected number of children produced by individuals of rank R or less is approximately p <p> In particular it applies to genetic algorithms (GAs) <ref> [ Altenberg, 1994; Langdon, 1996 ] </ref> . 8 dividing by 16). q = z q = Frequency of gene z = Number of offspring z = Mean number of children Cov = covariance In our GP the size of the population does not change so z = 1 and the expected
Reference: [ O'Reilly and Oppacher, 1995 ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> The troubling aspects of a building block hypothesis for genetic programming. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 73-88, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Poli and Langdon, 1997 ] <author> Riccardo Poli and W. B. Langdon. </author> <title> A new schema theory for genetic programming with one-point crossover and point mutation. </title> <type> Technical Report CSRP-97-3, </type> <institution> School of Computer Science, The University of Birmingham, </institution> <address> B15 2TT, UK, </address> <month> January </month> <year> 1997. </year> <note> Submitted to GP-97. </note>
Reference: [ Price, 1970 ] <author> George R. Price. </author> <title> Selection and covariance. </title> <journal> Nature, </journal> <volume> 227, August 1 </volume> <pages> 520-521, </pages> <year> 1970. </year>
Reference-contexts: impossible for (all but the very best of them) to pass on identical copies of themselves to later generations. (The GP remains elitist and so passes on one copy of the best individual to the next generation without crossover). 5 Price's Covariance and Selection Theorem Price's Covariance and Selection Theorem <ref> [ Price, 1970 ] </ref> from population genetics relates the change in frequency of a gene in a population from one generation to the next, to the covariance of the gene's frequency in the original population with the number of offspring produced by individuals in that population (see Equation 1). <p> or for any linear combination of genes at any number of loci, holds for any sort of dominance or epistasis (non-linear interaction between genes), for sexual or asexual reproduction, for random or non-random mating, for diploid, haploid or polyploid species, and even for imaginary species with more than two sexes" <ref> [ Price, 1970 ] </ref> .
Reference: [ Punch et al., 1996 ] <author> William F. Punch, Douglas Zongker, and Erik D. Goodman. </author> <title> The royal tree problem, a benchmark for single and multiple population genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 15, </booktitle> <pages> pages 299-316. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Work so far has been principly split between extending the Schema Theorem [ Holland, 1992 ] from Genetic Algorithms to GP [ Koza, 1992; O'Reilly and Oppacher, 1995; Whigham, 1995; Poli and Langdon, 1997 ] , studying benchmark problems (e.g. Royal Trees <ref> [ Punch et al., 1996 ] </ref> ) and applying population genetics to GP [ Al-tenberg, 1994; Altenberg, 1995 ] .
Reference: [ Whigham, 1995 ] <author> P. A. Whigham. </author> <title> A schema theorem for context-free grammars. </title> <booktitle> In 1995 IEEE Conference on Evolutionary Computation, </booktitle> <volume> volume 1, </volume> <pages> pages 178-181, </pages> <address> Perth, Australia, </address> <month> 29 November - 1 December </month> <year> 1995. </year> <note> IEEE Press. 13 </note>
References-found: 15

