URL: ftp://ps-ftp.dfki.uni-sb.de/pub/papers/ProgrammingSysLab/alliclp.ps.Z
Refering-URL: http://www.informatik.uni-trier.de/~ley/db/conf/iclp/iclp94-w2.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: wuertz@dfki.uni-sb.de  
Title: Towards the Verification of Concurrent Constraint Programs in Finite Domain Reasoning  
Author: F.S. de Boer and M. Gabbrielli, Jorg Wurtz 
Address: Stuhlsatzenhausweg 3 D-66123 Saarbrucken Germany  
Affiliation: German Research Center for Artificial Intelligence (DFKI)  
Note: Appeared in the Proceedings of the Post-conference workshop at ICLP: Verification and analaysis of (concurrent) logic languages, June 1994, eds.  pp. 87-107  
Abstract: Combinatorial problems occur quite often in many application areas, e.g. scheduling or cutting stock problems, and may be specified as problems over finite domains, i.e., the variables range over a finite subset of the integers. Our approach taken in the concurrent constraint language Oz is to support an efficiently implementable constraint system for constraints x _ 2D . Using this constraint system, the programmer can add his own functionality by so called virtual constraints (e.g. x y ). Because the problem of satisfiability of these more complex constraints is NP-complete, most of them are implemented incompletely by using reflecting operators returning the current minimum and maximum of a variable's domain. For these programs serving as the core of finite domain reasoning, the question of verification arises. Verification is complicated by the operators reflecting the current known information about variables. In our approach we translate the computation states into first order formulas by giving virtual constraints their intended semantics (the semantics of the corresponding logic constraint). We prove that for a reduction of computation states fl ! fl 0 the corresponding first order formulas are equivalent with respect to the intended model. Our approach, which seems to be very natural in the setting of constraint languages, succeeds in proving virtual constraints to be correct, terminating and complete (in the shown example) with respect to an intended semantics.
Abstract-found: 1
Intro-found: 1
Reference: [dBGMP94] <author> F.S. de Boer, M. Gabbrielli, E. Marchori, and C. Palamidessi. </author> <title> Proving concurrent constraint programs correct. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1994. </year>
Reference-contexts: Whereas much work is done in the field of verification in the setting of imperative concurrent languages (e.g. [MP92]), this work has just begun in the field of concurrent logic languages (see for example <ref> [dBGMP94] </ref>). The implementation of virtual constraints in Oz is based on a constraint solver for basic constraints x _ 2D , the suspension mechanism of the language (ask-clauses in the CC framework [SR90]) and reflecting operators (to the sake of efficiency).
Reference: [DC93] <author> D. Diaz and P. Codognet. </author> <title> A minimal extension of the WAM for clp(FD). </title> <booktitle> In Pro--ceedings of the International Conference on Logic Programming, </booktitle> <pages> pages 774-790, </pages> <address> Budapest, Hungary, 1993. </address> <publisher> MIT Press. </publisher>
Reference-contexts: The equality symbol : = is a binary predicate that is always interpreted as identity. A basic 1 Languages like clp (FD) <ref> [DC93] </ref> using the concept of indexicals do not use virtual constraints in our sense but the question for verification also arises there. constraint is defined as follows: ; ::= &gt; j ? j x = y j x _ 2D j 9x j ^ : It is possible to transform a
Reference: [DVS + 88] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The constraint logic programming language CHIP. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems FGCS-88, </booktitle> <pages> pages 693-702, </pages> <address> Tokyo, Japan, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: Hence, we have the possibility to analyze and test our algorithms on a high level before implementing them (e.g. as builtins). A variety of algorithms may be designed and tested with small effort. Since algorithms for virtual constraints are at the core of languages like CHIP <ref> [DVS + 88] </ref> or cc (FD) [VSD93] the question arises whether these algorithms are correct, terminating and complete. 1 In the sequential setting general algorithms achieving arc-consistency (e.g. [Mac77, VDT92]) are proved to be correct.
Reference: [HMM + 94] <author> M. Henz, M. Mehl, M. Muller, T. Muller, J. Niehren, R. Scheidhauer, C. Schulte, G. Smolka, R. Treinen, and J. Wurtz. </author> <title> The Oz Handbook. </title> <institution> Research Report RR-94-09, Deutsches Forschungszentrum fur Kunstliche Intelligenz, Stuhlsatzenhausweg 3, D-66123 Saarbrucken, Germany, </institution> <year> 1994. </year> <note> Available through anonymous ftp from duck.dfki.uni-sb.de. </note>
Reference-contexts: Because of the complexity of solving these constraints (NP-complete), they are usually implemented by incomplete algorithms. The language considered in this paper is a subset of Oz <ref> [HSW93, SHW93, Smo94, HMM + 94] </ref>. Oz is an attempt to create a high-level concurrent programming language providing the problem solving capabilities of logic programming. We have implemented virtual constraints by Oz programs [SSW94].
Reference: [HSW93] <author> M. Henz, G. Smolka, and J. Wurtz. </author> <title> Oz A programming language for multi-agent systems. </title> <booktitle> In Proceedings of the 13th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 404-409, </pages> <address> Chambery, France, August 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Because of the complexity of solving these constraints (NP-complete), they are usually implemented by incomplete algorithms. The language considered in this paper is a subset of Oz <ref> [HSW93, SHW93, Smo94, HMM + 94] </ref>. Oz is an attempt to create a high-level concurrent programming language providing the problem solving capabilities of logic programming. We have implemented virtual constraints by Oz programs [SSW94].
Reference: [Mac77] <author> A. K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Since algorithms for virtual constraints are at the core of languages like CHIP [DVS + 88] or cc (FD) [VSD93] the question arises whether these algorithms are correct, terminating and complete. 1 In the sequential setting general algorithms achieving arc-consistency (e.g. <ref> [Mac77, VDT92] </ref>) are proved to be correct. Nevertheless, the concurrent logic setting is the more natural one for solving constraint problems because of the possibility to deal with incomplete information in a reactive system.
Reference: [Mil91] <author> R. Milner. </author> <title> The polyadic -calculus: A tutorial. </title> <type> ECS-LFCS Report Series 91-180, </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, Edin-burgh EH9 3JZ, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: 1; y 7! 2g is a solution of the left-hand side but not of the right-hand side. 2.2 The Computation Model In [Smo94] a formal model of computation in Oz is given, consisting of a calculus rewriting expressions modulo a structural congruence relation, similar to the setup of the -calculus <ref> [Mil91] </ref>. The usual distinction between program and query is alleviated. For the purposes of this paper, we simplify the calculus by not considering deep guards, higher-order programming and state. The following is adopted from [SSW94]. A computation space consists of a number of actors connected to a blackboard.
Reference: [MP92] <author> Z. Manna and A. Pnueli. </author> <title> The temporal logic of reactive and concurrent systems. </title> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Nevertheless, the concurrent logic setting is the more natural one for solving constraint problems because of the possibility to deal with incomplete information in a reactive system. Whereas much work is done in the field of verification in the setting of imperative concurrent languages (e.g. <ref> [MP92] </ref>), this work has just begun in the field of concurrent logic languages (see for example [dBGMP94]). <p> The logic must account computational contexts of Oz expressions, which can be seen as the counterpart of invariants in the setting of concurrent reduction systems. Modal logic seems to be a natural candidate for such a logic (see for example <ref> [MP92] </ref>). For the future, we want to design a calculus for this logic allowing to prove in a formal system operational properties of Oz expressions. Acknowledgement: I would like to thank Ralf Treinen and Gert Smolka for valuable discussions.
Reference: [SHW93] <author> G. Smolka, M. Henz, and J. Wurtz. </author> <title> Object-oriented concurrent constraint programming in Oz. </title> <note> Research Report RR-93-16, DFKI, Stuhlsatzenhausweg 3, D-66123 Saar-brucken, Germany, April 1993. Will appear in: </note> <editor> P. van Hentenryck and V. Saraswat (eds.), </editor> <booktitle> Principles and Practice of Constraint Programming, </booktitle> <publisher> The MIT Press, </publisher> <address> Cam-bridge, Mass. </address>
Reference-contexts: Because of the complexity of solving these constraints (NP-complete), they are usually implemented by incomplete algorithms. The language considered in this paper is a subset of Oz <ref> [HSW93, SHW93, Smo94, HMM + 94] </ref>. Oz is an attempt to create a high-level concurrent programming language providing the problem solving capabilities of logic programming. We have implemented virtual constraints by Oz programs [SSW94].
Reference: [Smo94] <author> G. Smolka. </author> <title> A calculus for higher-order concurrent constraint programming with deep guards. </title> <institution> Research Report RR-94-03, Deutsches Forschungszentrum fur Kunstliche Intelligenz, Stuhlsatzenhausweg 3, D-66123 Saarbrucken, Germany, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Because of the complexity of solving these constraints (NP-complete), they are usually implemented by incomplete algorithms. The language considered in this paper is a subset of Oz <ref> [HSW93, SHW93, Smo94, HMM + 94] </ref>. Oz is an attempt to create a high-level concurrent programming language providing the problem solving capabilities of logic programming. We have implemented virtual constraints by Oz programs [SSW94]. <p> of the right-hand side and x _ 2f1; 2; 3g ^ y _ 2f1; 2; 3g 6j= A x : = y since e.g. the valuation fx 7! 1; y 7! 2g is a solution of the left-hand side but not of the right-hand side. 2.2 The Computation Model In <ref> [Smo94] </ref> a formal model of computation in Oz is given, consisting of a calculus rewriting expressions modulo a structural congruence relation, similar to the setup of the -calculus [Mil91]. The usual distinction between program and query is alleviated.
Reference: [SR90] <author> V.A. Saraswat and M. Rinard. </author> <title> Concurrent constraint programming. </title> <booktitle> In Proceedings of the 7th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 232-245, </pages> <address> San Francisco, CA, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: The implementation of virtual constraints in Oz is based on a constraint solver for basic constraints x _ 2D , the suspension mechanism of the language (ask-clauses in the CC framework <ref> [SR90] </ref>) and reflecting operators (to the sake of efficiency). The reflecting operators reflect the actual constraints for a variable, e.g. the actual minimal value a finite domain variable can take consistently. <p> Elaboration of a constraint checks whether is consistent with the blackboard. If this is the case, is conjoined to the constraint on the blackboard; otherwise,the computation space is marked failed and all its actors are cancelled. Elaboration of a constraint corresponds to the eventual tell operation of CC <ref> [SR90] </ref>. Elaboration of a concurrent composition 1 2 creates two separate elaborators for 1 and 2 . Elaboration of a variable declaration local x in end creates a new variable and an elaborator for the expression . Within the expression the new variable is referred to by x .
Reference: [SSW94] <author> C. Schulte, G. Smolka, and J. Wurtz. </author> <title> Encapsulated search and constraint programming in Oz. </title> <booktitle> In Second Workshop on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 116-129, </pages> <address> Orcas Island, Washington, USA, </address> <month> 2-4 May </month> <year> 1994. </year>
Reference-contexts: The language considered in this paper is a subset of Oz [HSW93, SHW93, Smo94, HMM + 94]. Oz is an attempt to create a high-level concurrent programming language providing the problem solving capabilities of logic programming. We have implemented virtual constraints by Oz programs <ref> [SSW94] </ref>. Hence, we have the possibility to analyze and test our algorithms on a high level before implementing them (e.g. as builtins). A variety of algorithms may be designed and tested with small effort. <p> The usual distinction between program and query is alleviated. For the purposes of this paper, we simplify the calculus by not considering deep guards, higher-order programming and state. The following is adopted from <ref> [SSW94] </ref>. A computation space consists of a number of actors connected to a blackboard. The actors read the blackboard and reduce once the blackboard contains sufficient information. The information on the blackboard increases monotonically. When an actor reduces, it may put new information on the blackboard and create new actors.
Reference: [VDT92] <author> P. Van Hentenryck, Y. Deville, </author> <title> and C.M. Teng. A generic arc-consistency algorithm and its specializations. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 291-321, </pages> <year> 1992. </year>
Reference-contexts: Since algorithms for virtual constraints are at the core of languages like CHIP [DVS + 88] or cc (FD) [VSD93] the question arises whether these algorithms are correct, terminating and complete. 1 In the sequential setting general algorithms achieving arc-consistency (e.g. <ref> [Mac77, VDT92] </ref>) are proved to be correct. Nevertheless, the concurrent logic setting is the more natural one for solving constraint problems because of the possibility to deal with incomplete information in a reactive system.
Reference: [VSD93] <author> P. Van Hentenryck, V. Saraswat, and Y. Deville. </author> <title> Design, implementation and evaluation of the constraint language cc(FD). </title> <type> Report CS-93-02, </type> <institution> Brown University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: A variety of algorithms may be designed and tested with small effort. Since algorithms for virtual constraints are at the core of languages like CHIP [DVS + 88] or cc (FD) <ref> [VSD93] </ref> the question arises whether these algorithms are correct, terminating and complete. 1 In the sequential setting general algorithms achieving arc-consistency (e.g. [Mac77, VDT92]) are proved to be correct.
References-found: 14

