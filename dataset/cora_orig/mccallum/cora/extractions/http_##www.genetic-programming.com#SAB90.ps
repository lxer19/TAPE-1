URL: http://www.genetic-programming.com/SAB90.ps
Refering-URL: http://www.genetic-programming.com/jkpubs72to93.html
Root-URL: http://www.genetic-programming.com/jkpubs72to93.html
Title: EVOLUTION AND COEVOLUTION OF COMPUTER PROGRAMS TO CONTROL INDEPENDENTLY-ACTING AGENTS  2 BACKGROUND ON GENETIC ALGORITHMS  
Author: John R. Koza 
Keyword: PROGRAMMING PARADIGM  
Note: 1 INTRODUCTION AND OVERVIEW  3 BACKGROUND ON GENETIC  
Address: Stanford, CA 94305 USA  
Affiliation: Computer Science Department Stanford University  
Email: Koza@Sunburn.Stanford.Edu  
Date: 415-941-0336  
Abstract: This paper describes the recently developed "genetic programming" paradigm which genetically breeds populations of computer programs to solve problems. In genetic programming, the individuals in the population are hierarchical computer programs of various sizes and shapes. This paper also extends the genetic programming paradigm to a "co-evolution" algorithm which operates simultaneously on two populations of independently-acting hierarchical computer programs of various sizes and shapes. This paper describes the recently developed "genetic programming" paradigm which genetically breeds populations of computer programs to solve problems. In genetic programming, the individuals in the population are hierarchical compositions of functions and arguments of various sizes and shapes. Each of these individual computer programs is evaluated for its fitness in handling the problem environment and a simulated evolutionary process is driven by this measure of fitness. This paper also extends the genetic programming paradigm to a "co-evolution" algorithm which operates simultaneously on two (or more) populations of independently-acting hierarchical computer programs of various sizes and shapes. In coevolution, each population acts as the environment for the other population. In particular, each individual of the first population is evaluated for relative fitness by testing it against each individual in the second population, and, simultaneously, each individual in the second population is evaluated for relative fitness by testing it against each individual in the first population. Over a period of many generations, individuals with high "absolute fitness" tend to evolve as the two populations mutually bootstrap each other to increasingly high levels of fitness. In this paper, the genetic programming paradigm is illustrated with three problems. The first problem involves genetically breeding a population of computer programs to allow an "artificial ant" to traverse an irregular trail. The second problem involves genetically breeding a minimax control strategy in a differential game with an independently-acting pursuer and evader. The third problem illustrates the "co-evolution" and involves genetically breeding an optimal strategy for a player of a simple discrete two-person game represented by a game tree in extensive form. Genetic algorithms are highly parallel mathematical algorithms that transform populations of individual mathematical objects (typically fixed-length binary character strings) into new populations using operations patterned after (1) natural genetic operations such as sexual recombination (crossover) and (2) fitness proportionate reproduction (Darwinian survival of the fittest). Genetic algorithms begin with an initial population of individuals (typically randomly generated) and then iteratively (1) evaluate the individuals in the population for fitness with respect to the problem environment and (2) perform genetic operations on various individuals in the population to produce a new population. John Holland of the University of Michigan presented the pioneering formulation of genetic algorithms for fixed-length character strings in Adaptation in Natural and Artificial Systems (Holland 1975). Holland established, among other things, that the genetic algorithm is a mathematically near optimal approach to adaptation in that it maximizes expected overall average payoff when the adaptive process is viewed as a multi-armed slot machine problem requiring an optimal allocation of future trials given currently available information. Recent work in genetic algorithms and genetic classifier systems can be surveyed in Goldberg (1989), Davis (1987), and Schaffer (1989). Representation is a key issue in genetic algorithm work because genetic algorithms directly manipulate the coded representation of the problem and because the representation scheme can severely limit the window by which the system observes its world. Fixed length character strings present difficulties for some problems particularly problems in artificial intelligence where the desired solution is hierarchical and where the size and shape of the solution is unknown in advance. The need for more powerful representations has been recognized for some time (De Jong 1985, 1988). The structure of the individual mathematical objects that are manipulated by the genetic algorithm can be more complex than the fixed length character strings. Smith (1980) departed from the early fixed-length character strings by introducing variable length strings, including strings whose elements were if-then rules (rather than single characters). Holland's introduction of the classifier system (1986) continued the trend towards increasing the complexity of the 
Abstract-found: 1
Intro-found: 0
Reference: <author> Axelrod, R. </author> <title> "The evolution of strategies in the iterated prisoners dilemma." In Genetic Algorithms and Simulated Annealing , edited by L. </title> <address> Davis. London: </address> <publisher> Pittman l987. </publisher>
Reference: <author> Davis, L. </author> <title> (editor) Genetic Algorithms and Simulated Annealing London: </title> <publisher> Pittman l987. </publisher>
Reference: <author> De Jong, Kenneth A. </author> <title> Genetic algorithms: A l0 year perspective. </title> <booktitle> Proceedings of an International Conference on Genetic Algorithms and Their Applications. </booktitle> <address> Hillsdale, NJ: </address> <publisher> Lawrence Erlbaum Associates l985. </publisher>
Reference: <author> De Jong, Kenneth A. </author> <title> Learning with genetic algorithms: an overview. </title> <journal> Machine Learning, </journal> <volume> 3(2), </volume> <pages> 121-138, </pages> <year> 1988. </year>
Reference: <author> Goldberg, D. E. </author> <title> Genetic Algorithms in Search, Optimization, </title> <booktitle> and Machine Learning. </booktitle> <address> Reading, MA: </address> <publisher> Addison-Wesley l989. </publisher>
Reference: <author> Hillis, W. Daniel. </author> <title> "Co-Evolving Parasites Improve Simulated Evolution as an Optimization Procedure." In Emergent Computation: Self-organizing, Collective, and Cooperative Computing Networks. edited by S. </title> <editor> Forrest. </editor> <address> Cambridge, MA: </address> <note> MIT Press 1990 (to appear). </note>
Reference: <author> Holland, J. H. </author> <booktitle> Adaptation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press 1975. </publisher>
Reference-contexts: John Holland of the University of Michigan presented the pioneering formulation of genetic algorithms for fixed-length character strings in Adaptation in Natural and Artificial Systems <ref> (Holland 1975) </ref>. Holland established, among other things, that the genetic algorithm is a mathematically near optimal approach to adaptation in that it maximizes expected overall average payoff when the adaptive process is viewed as a multi-armed slot machine problem requiring an optimal allocation of future trials given currently available information.
Reference: <author> Holland, John H. </author> <title> Escaping brittleness: The possibilities of general-purpose learning algorithms applied to parallel rule-based systems. </title> <editor> In Michalski, Ryszard S., Carbonell, Jaime G. and Mitchell, Tom M. </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, Volume II. P. </booktitle> <pages> 593-623. </pages> <address> Los Altos, CA: </address> <publisher> Morgan Kaufman l986. </publisher>
Reference: <author> Holland, J. H. </author> <title> "ECHO: Explorations of Evolution in a Minature World." </title> <booktitle> In Proceedings of the Second Conference on Artificial Life. </booktitle> <editor> edited by C. G. Langton, and J. D. Farmer, J. Doyne. </editor> <address> Redwood City, </address> <publisher> CA; Addison-Wesley 1990. In press. </publisher>
Reference: <author> Isaacs, Rufus.. </author> <title> Differential Games. </title> <address> New York: </address> <publisher> John Wiley 1965. </publisher>
Reference-contexts: The players choose their respective control variable simultaneously. (0, 0) X (X, Y) Y The analysis of this game can be simplified by reducing the number of state variables from four to two <ref> (Isaacs 1965) </ref>. This state reduction is accomplished by simply viewing the pursuer P as being at the origin point (0,0) of a new coordinate system at all times and then viewing the evader E as being at position (x, y) in this new coordinate system.
Reference: <author> Jefferson, David, Collins, Rob, et. al. </author> <title> "The Genesys System: Evolution as a Theme in Artificial Life." </title> <booktitle> In Proceedings of Second Conference on Artificial Life, </booktitle> <editor> edited by C. G. Langton and D Farmer. </editor> <address> Redwood City, CA: </address> <publisher> Addison-Wesley. </publisher> <year> 1990. </year> <note> In Press. </note>
Reference: <author> Koza, John R. </author> <title> "Hierarchical Genetic Algorithms Operating on Populations of Computer Programs." </title> <booktitle> In Proceedings of the 11th International Joint Conference on Artificial Intelligence (IJCAI). </booktitle> <address> San Mateo: </address> <publisher> Morgan Kaufman 1989. </publisher>
Reference-contexts: Applications of classifier systems are discussed in Wilson (1987a, 1987b, 1988). In addition, we have recently shown that entire computer programs can be genetically bred to solve problems in a variety of different areas of artificial intelligence, machine learning, and symbolic processing <ref> (Koza 1989, 1990a) </ref>. In this recently developed "genetic programming" paradigm, the individuals in the population are compositions of functions and terminals appropriate to the particular problem domain. The set of functions used typically includes arithmetic operations, mathematical functions, conditional logical operations, and domainspecific functions. <p> Details on this algorithm can be found in Koza (1990a). This new genetic algorithm paradigm has been successfully applied <ref> (Koza 1989, 1990a) </ref> to example problems in several different areas, including (1) machine learning of functions (e.g. learning the Boolean 11-multiplexer function, (2) planning (e.g. developing a robotic action sequence that can stack an arbitrary initial configuration of blocks into a specified order), (3) automatic programming (e.g. discovering a computational procedure
Reference: <author> Koza, John R. </author> <title> Genetic Programming: A Paradigm for Genetically Breeding Populations of Computer Programs to Solve Problems. </title> <institution> Stanford University Computer Science Department Technical Report STAN-CS-90-1314. </institution> <month> June </month> <year> 1990. 1990a. </year>
Reference: <author> Koza, John R. </author> <title> "A Genetic Approach to Econometric Modeling." </title> <booktitle> Sixth World Congress of the Econometric Society. </booktitle> <address> Barcelona, Spain. </address> <month> August 27, </month> <year> 1990. 1990b. </year>
Reference: <author> Koza, John R. and Keane, Martin A. </author> <title> "Cart Centering and Broom Balancing by Genetically Breeding Populations of Control Strategy Programs." </title> <booktitle> In Proceedings of International Joint Conference on Neural Networks, </booktitle> <address> Washington, </address> <month> January 15-19, </month> <year> 1990. </year> <title> Volume I. </title> <address> Hillsdale, NJ: </address> <publisher> Lawrence Erlbaum 1990. </publisher>
Reference: <author> Koza, John R. and Keane, Martin A. </author> <title> "Genetic Breeding of NonLinear Optimal Control Strategies for Broom Balancing." </title> <booktitle> In Proceedings of the Ninth International Conference on Analysis and Optimization of Systems. Antibes, </booktitle> <address> June, 1990. Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: <author> Miller, J. H. </author> <title> "The Evolution of Automata in the Repeated Prisoners Dilemma." In Two Essays on the Economics of Imperfect Information. </title> <type> PhD dissertation, </type> <institution> Department of Economics, University of Michigan, </institution> <year> 1988. </year>
Reference: <author> Miller, J. H. </author> <title> The Coevolution of Automata in the Repeated Prisoners Dilemma. </title> <institution> Sante Fe Institute Report 89-003. </institution> <year> 1989. </year>
Reference: <editor> Schaffer , J. D. </editor> <booktitle> (editor) Proceedings of the Third International Conference on Genetic Algorithms. </booktitle> <address> San Mateo, Ca: </address> <publisher> Morgan Kaufmann Publishers Inc. </publisher> <year> 1989. </year>
Reference: <author> Smith, Steven F. </author> <title> A Learning System Based on Genetic Adaptive Algorithms. </title> <type> PhD dissertation. </type> <institution> Pittsburgh: University of Pittsburgh 1980. </institution>
Reference: <author> Wilson, Stewart. W. </author> <title> Classifier Systems and the animat problem. </title> <journal> Machine Learning, </journal> <volume> 3(2), </volume> <pages> 199-228, </pages> <year> 1987a. </year>
Reference: <author> Wilson, Stewart. W. </author> <title> Hierarchical credit allocation in a classifier system. </title> <booktitle> Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 217-220, </pages> <year> 1987b. </year>
Reference: <author> Wilson, Stewart W. </author> <title> Bid competition and specificity reconsidered. </title> <journal> Journal of Complex Systems. </journal> <volume> 2(6), </volume> <pages> 705-723, </pages> <year> 1988. </year>
References-found: 23

