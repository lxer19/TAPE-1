URL: ftp://ftp.cs.colorado.edu/users/ghiasi/papers/vpc/vpc-jvlc.ps.gz
Refering-URL: http://www.cs.colorado.edu/~ghiasi/
Root-URL: http://www.cs.colorado.edu
Title: VIPR and the Visual Programming Challenge  
Author: Wayne Citrin Soraya Ghiasi and Benjamin Zorn 
Note: This work was supported in part by a grant from the National Science Foundation: NSF CISE-IRI-9616242.  
Date: February 22, 1998  
Address: Campus Box 425  Boulder, CO 80309-0425 USA  Campus Box 430  Boulder, CO 80309-0430 USA  
Affiliation: Department of Electrical and Computer Engineering  University of Colorado  Department of Computer Science  University of Colorado  
Abstract: The Visual Programming Challenge (VPC) provides a framework for exploring visual programming language issues in a quasi-real-time environment and for comparing competing languages. VIPR is an attempt to bring the traditional strengths of textual imperative languages to a visual programming language. It leverages these strengths to make use of well understood design and abstraction methodologies while providing additional visual features, such as explicit representations, contextual information, and execution animation. VIPR uses these strengths and features to address the quasi-real-time problem posed by the VPC, whose requirements include interaction with the low-level vehicle manipulation code, map exploration and display, as well as additional requirements such as flexibility of solution and performance demands. Our solution does not directly address pedagogical issues or the value of VIPR's simple graphical semantics. It did point out weaknesses with VIPR's approach to solving the scalability problem in visual programming languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Allen L. Ambler, Thomas Green, Takayuki Dan Kumura, Alexander Repenning, and Trevor Smedley. </author> <title> 1997 visual programming challenge summary. </title> <booktitle> In Proceedings of the 1997 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 11-18, </pages> <address> Capri, Italy, </address> <month> September </month> <year> 1997. </year> <month> 13 </month>
Reference-contexts: It is intended to help focus visual language research on a single problem for easier cross comparison between languages. The VPC analyzes competing languages based primarily upon pedagogical issues, but also examines the utility of the languages <ref> [1] </ref>. VIPR was selected as one of the participants in the 1997 Visual Programming Challenge. VIPR is a containment-based visual imperative language. It attempts to extend Kahn's idea of a completely visual language [11] to an imperative programming language [4]. <p> In the VIPR solution, we chose to implement all the code that handles this decision process directly in VIPR. A criteria that is mentioned in the VPC requirements, but not given equal weighting with pedagogy, is that the solution be flexible <ref> [1] </ref>. This requirement implies that the solution, and the language, support code reuse or that the solutions be trivial to construct. The VIPR solution has substantial flexibility due to abstraction and procedure reuse.
Reference: [2] <author> Margaret M. Burnett, Marla J. Baker, Carisa Bohus, Paul Carlson, Sherry Yang, and Pieter van Zee. </author> <title> Scaling up visual programming languages. </title> <booktitle> Computer, </booktitle> <pages> pages 45-54, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: These strengths include support for abstraction, familiarity, and flexibility. Weaknesses of textual imperative languages include the lack of explicit representations and the inability to simultaneously maintain both a local and global view of the program (e.g., detail in context <ref> [2] </ref>). Imperative languages have been very successful in the textual programming arena. Can they be similarly successful in the visual arena? VIPR is an attempt to bring the traditional strengths of imperative programming to a visual language. <p> The 1 remainder of the paper looks at the requirements of the VPC and how VIPR addresses them. Section 7 summarizes our conclusions. 2 VIPR VIPR is a graphical transformation language developed to avoid the problems of scalability and detail in context encountered by some other visual languages <ref> [2, 6, 7, 12] </ref>. It is an imperative language that uses the Tcl scripting language for statements and expressions, and visual constructs for its control, including procedures [4, 5].
Reference: [3] <author> M. Sheelagh T. Carpendale, David J. Cowpertwaite, and F. David Fracchia. </author> <title> Making distortions comprehensible. </title> <booktitle> In Proceedings of the 1997 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 36-47, </pages> <address> Capri, Italy, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Fish-eyeing is somewhat better than simple zooming because it allows the focus to be moved without zooming in and out, but currently distorts more along the edge of the sphere than is necessary <ref> [3] </ref>. The selection of a different projection may lessen this distortion. 7 Summary VIPR's traditional imperative language approach coupled with additional visual features can be used to address needs ranging from the initial design to the final debugging and displaying of a solution.
Reference: [4] <author> Wayne Citrin, Michael Doherty, and Benjamin Zorn. </author> <title> Formal semantics of control in a completely visual language. </title> <booktitle> In Proceedings of the 1994 IEEE Symposium on Visual Languages, </booktitle> <address> St. Louis, MO, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: VIPR was selected as one of the participants in the 1997 Visual Programming Challenge. VIPR is a containment-based visual imperative language. It attempts to extend Kahn's idea of a completely visual language [11] to an imperative programming language <ref> [4] </ref>. VIPR programs are composed of a small number of visual components [9]. These visual components are supplemented by the use of the Tcl scripting language for expressions and statements. We chose to enter VIPR in the VPC precisely because of the strengths of textual imperative languages. <p> It is an imperative language that uses the Tcl scripting language for statements and expressions, and visual constructs for its control, including procedures <ref> [4, 5] </ref>. VIPR combines the ease of programming a simple, but flexible, scripting language with understandable visual semantics and the extensibility of a procedural language. Typing and scoping in VIPR are determined by the underlying Tcl interpreter and are beyond the scope of this paper.
Reference: [5] <author> Wayne Citrin, Michael Doherty, and Benjamin Zorn. </author> <title> A graphical semantics for graphical transformation languages. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 8(2) </volume> <pages> 147-173, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: It is an imperative language that uses the Tcl scripting language for statements and expressions, and visual constructs for its control, including procedures <ref> [4, 5] </ref>. VIPR combines the ease of programming a simple, but flexible, scripting language with understandable visual semantics and the extensibility of a procedural language. Typing and scoping in VIPR are determined by the underlying Tcl interpreter and are beyond the scope of this paper.
Reference: [6] <author> Wayne Citrin, Richard Hall, and Benjamin Zorn. </author> <title> Addressing the scalability problem in visual programming. </title> <institution> Computer Science Technical Report CU-CS-768-95, University of Colorado, </institution> <address> Campus Box 430, Boulder, CO 80309, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: The VIPR programming environment supports a number of functions to ease the process of writing and debugging VIPR programs. VIPR's environment supports animated execution. VIPR attempts to address the issue of scalability in visual languages through the use of zooming and fish-eyeing <ref> [6, 7] </ref>. These features were added with the goal of enabling rapid construction of solutions. In this paper, Section 2 discusses VIPR in more depth, focusing on its syntax and semantics. Section 3 examines the VIPR environment and how it provides additional support for visual programming. <p> The 1 remainder of the paper looks at the requirements of the VPC and how VIPR addresses them. Section 7 summarizes our conclusions. 2 VIPR VIPR is a graphical transformation language developed to avoid the problems of scalability and detail in context encountered by some other visual languages <ref> [2, 6, 7, 12] </ref>. It is an imperative language that uses the Tcl scripting language for statements and expressions, and visual constructs for its control, including procedures [4, 5]. <p> As a VIPR program executes, each ring is successively merged into the outermost ring. This containment-based approach can be summed up as "Follow the rings deeper into the nest". Containment, or nesting, is used to build programs that do no suffer from the graph edge problem <ref> [6, 7] </ref>. 2 Guarded execution is VIPR's method for allowing conditional execution. Each ring may have a guard (upper left portion of ring) and a statement for execution (upper right portion of the ring). Each guard has a boolean value. <p> For situations where the user prefers to maintain the context in which the code occurs, VIPR's environment provides the ability to use a fish-eye view based on a spherical projection <ref> [6, 7] </ref>. The distortion causes one section of the code to be enlarged while maintaining enough additional contextual information for the user to still identify where the procedure was called. VIPR's environment also allows full run-time animation of the program code as it executes.
Reference: [7] <author> Wayne Citrin, Carlos Santiago, and Benjamin Zorn. </author> <title> Scalable interfaces to support program comprehension. </title> <booktitle> In International Workshop on Program Comprehension, </booktitle> <address> Berlin, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: The VIPR programming environment supports a number of functions to ease the process of writing and debugging VIPR programs. VIPR's environment supports animated execution. VIPR attempts to address the issue of scalability in visual languages through the use of zooming and fish-eyeing <ref> [6, 7] </ref>. These features were added with the goal of enabling rapid construction of solutions. In this paper, Section 2 discusses VIPR in more depth, focusing on its syntax and semantics. Section 3 examines the VIPR environment and how it provides additional support for visual programming. <p> The 1 remainder of the paper looks at the requirements of the VPC and how VIPR addresses them. Section 7 summarizes our conclusions. 2 VIPR VIPR is a graphical transformation language developed to avoid the problems of scalability and detail in context encountered by some other visual languages <ref> [2, 6, 7, 12] </ref>. It is an imperative language that uses the Tcl scripting language for statements and expressions, and visual constructs for its control, including procedures [4, 5]. <p> As a VIPR program executes, each ring is successively merged into the outermost ring. This containment-based approach can be summed up as "Follow the rings deeper into the nest". Containment, or nesting, is used to build programs that do no suffer from the graph edge problem <ref> [6, 7] </ref>. 2 Guarded execution is VIPR's method for allowing conditional execution. Each ring may have a guard (upper left portion of ring) and a statement for execution (upper right portion of the ring). Each guard has a boolean value. <p> For situations where the user prefers to maintain the context in which the code occurs, VIPR's environment provides the ability to use a fish-eye view based on a spherical projection <ref> [6, 7] </ref>. The distortion causes one section of the code to be enlarged while maintaining enough additional contextual information for the user to still identify where the procedure was called. VIPR's environment also allows full run-time animation of the program code as it executes.
Reference: [8] <author> Wayne Citrin and Benjamin Zorn. </author> <title> VIPR Reference Manual. </title> <address> Campus Box 430, Boulder, CO 80309, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: The pedagogy of the simple graphical semantics of VIPR was not tested by the VPC. In addition to the features mentioned previously, VIPR also supports the notion that any program snapshot is also a program that can modified and later have its execution continued <ref> [8] </ref>. The VIPR programming environment supports a number of functions to ease the process of writing and debugging VIPR programs. VIPR's environment supports animated execution. VIPR attempts to address the issue of scalability in visual languages through the use of zooming and fish-eyeing [6, 7].
Reference: [9] <author> Wayne Citrin and Benjamin Zorn. </author> <title> VIPR Users Manual. </title> <address> Campus Box 430, Boulder, CO 80309, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: VIPR is a containment-based visual imperative language. It attempts to extend Kahn's idea of a completely visual language [11] to an imperative programming language [4]. VIPR programs are composed of a small number of visual components <ref> [9] </ref>. These visual components are supplemented by the use of the Tcl scripting language for expressions and statements. We chose to enter VIPR in the VPC precisely because of the strengths of textual imperative languages. VIPR has many of the strengths and weaknesses associated with its related textual languages.
Reference: [10] <author> Thomas Green and M. Petre. </author> <title> Usability analysis of visual programming environments: A `cognitive dimensions' framework. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 7(2) </volume> <pages> 131-174, </pages> <year> 1996. </year>
Reference-contexts: It supports top-down design, integrates well with existing code, and can be used to construct reusable abstractions to support functional composition. The goal of explicit representation of relationships used by VIPR is to make programs easy to understand and to minimize the number of hidden dependencies <ref> [10] </ref>. The pedagogy of the simple graphical semantics of VIPR was not tested by the VPC. In addition to the features mentioned previously, VIPR also supports the notion that any program snapshot is also a program that can modified and later have its execution continued [8].
Reference: [11] <author> Kenneth M. Kahn and Vijay A. Saraswat. </author> <title> Complete visualizations of concurrent programs and their executions. </title> <booktitle> In Proceedings of the 1990 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 7-15, </pages> <address> Skokie, IL, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: VIPR was selected as one of the participants in the 1997 Visual Programming Challenge. VIPR is a containment-based visual imperative language. It attempts to extend Kahn's idea of a completely visual language <ref> [11] </ref> to an imperative programming language [4]. VIPR programs are composed of a small number of visual components [9]. These visual components are supplemented by the use of the Tcl scripting language for expressions and statements.
Reference: [12] <author> E. Howard Kiper and C. Ames. </author> <title> Criteria for evaluation of visual programming languages. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 8(2) </volume> <pages> 175-192, </pages> <year> 1997. </year>
Reference-contexts: The 1 remainder of the paper looks at the requirements of the VPC and how VIPR addresses them. Section 7 summarizes our conclusions. 2 VIPR VIPR is a graphical transformation language developed to avoid the problems of scalability and detail in context encountered by some other visual languages <ref> [2, 6, 7, 12] </ref>. It is an imperative language that uses the Tcl scripting language for statements and expressions, and visual constructs for its control, including procedures [4, 5].
Reference: [13] <author> John K. Osterhout. </author> <title> Tcl and the Tk Toolkit, </title> <booktitle> chapter 30, </booktitle> <pages> pages 293-303. </pages> <booktitle> Addision-Wesley Professional Computing Series. </booktitle> <publisher> Addison Wesley, </publisher> <address> Reading, MA, 1st edition, </address> <year> 1994. </year> <month> 14 </month>
Reference-contexts: VIPR exploits the ability of Tcl to be modified through Tcl extensions. Tcl provides a simple framework for making quick extensions to the language. These extensions are written in C and then called as Tcl functions. The simple Tcl API used is described by Ousterhout <ref> [13] </ref>. All interactions are done between VIPR and Tcl or between Tcl and C. VIPR calls a Tcl extension that relies on the underlying C code to execute the command. The ability to quickly add Tcl extensions provides VIPR with an extremely flexible boundary between support code and VIPR code.
References-found: 13

