URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/bmonroe/www/tr_cmu_cs_95_114.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/bmonroe/www/dist-www-abstract.html
Root-URL: 
Title: Implementing Distributed Server Groups for the World Wide Web  
Author: Michael Garland, Sebastian Grassia, Robert Monroe, Siddhartha Puri 
Address: Pittsburgh, Pennsylvania 15213-3890  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: 25 January 1995  
Pubnum: CMU-CS-95-114  
Abstract: The World Wide Web (WWW) has recently become a very popular facility for the dissemination of information. As a result of this popularity, it is experiencing rapidly increasing traffic load. Single machine servers cannot keep pace with the ever greater load being placed upon them. To alleviate this problem, we have implemented a distributed Web server group. The server group can effectively balance request load amongst its members (within about 10% of optimal), and client response time is no worse than in the single server case. Client response time was not improved because the measured client traffic consumed all available network throughput. The distributed operation of the server groups is This research is sponsored in part by the Wright Laboratory, Aeronautical SystemsCenter, Air Force Materiel Command, USAF, and the Advanced Research Projects Agency (ARPA) under grant F33615-93-1-1330. The US Government is authorized to reproduce and distribute reprints for Government purposes, notwithstanding any copyright notation thereon. Support also came from the Air Force Materiel Command under contract number F19628-93-C-0171. Views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of Wright Laboratory or the United States Government. completely transparent to standard Web clients.
Abstract-found: 1
Intro-found: 1
Reference: <institution> Process groups: </institution>
Reference: [BIR91] <author> Birman, </author> <title> Kenneth; The Process Group Approach to Reliable Distributed Computing; Communications of the ACM, </title> <month> December </month> <year> 1993, </year> <pages> pp. 36-53. </pages>
Reference-contexts: Obviously, the page 8 30 msec. delay is very sensitive to network distance travelled, but the results paint a very encouraging picture of the general cost of dispatching. 5. Related Work Distributed process groups have been explored in the ISIS system <ref> [BIR91] </ref> and the V system [CHE85]. These two systems implement slightly different forms of process groups, neither of which are sufficient to completely solve our problem. However, they do establish the basic concepts of distributed process groups, and hence distributed server groups.
Reference: [CHE85] <author> Cheriton, David R., and Zwaenepoel, </author> <title> Willy; Distributed Process Groups in the V Kernel; ACM Transactions on Computer Systems, </title> <month> May </month> <year> 1985, </year> <pages> pp 77-107. </pages> <address> Load Balancing: </address>
Reference-contexts: Obviously, the page 8 30 msec. delay is very sensitive to network distance travelled, but the results paint a very encouraging picture of the general cost of dispatching. 5. Related Work Distributed process groups have been explored in the ISIS system [BIR91] and the V system <ref> [CHE85] </ref>. These two systems implement slightly different forms of process groups, neither of which are sufficient to completely solve our problem. However, they do establish the basic concepts of distributed process groups, and hence distributed server groups.
Reference: [ALO87] <author> Alonso, </author> <title> Rafael; An Experimental Evaluation of Load Balancing Strategies; Technical Report CS-TR112-87, </title> <institution> Department of Computer Science, Princeton University. </institution>
Reference-contexts: The critical difference for our purposes is that in this scheme the servers whose loads we are trying to balance need to communicate only with the dispatcher. Schemes for dynamically scheduling requests to balance load have proven successful in several application areas similar to our own <ref> [ALO87, WIK91, HSU86, PAR92] </ref>. The NCSA has also implemented a distributed Web server mechanism [NCSA]. Their server, which is probably the most heavily loaded server on the Web, was beginning to experience actual system failures due to extreme load.
Reference: [CHE91] <author> Cheng, William C., Muntz, Richard R.; </author> <title> Optimal routing for closed queueing networks. Performance page 10 Evaluation, </title> <note> vol. 13, no.1; Sept. 1991 pp. 3-15. </note>
Reference-contexts: This has the following consequence: when first contacting a server group, a client will be dispatched to a particular member. Subsequently, all relative links will be resolved by going directly to that member. This property actually has the desirable effect of helping to balance the load <ref> [CHE91] </ref>. In addition, since each client connection is for a single request, there is no way of predicting how long a particular client will continue making requests of the server.
Reference: [HSU86] <author> Hsu, Chi-Yin Huang, Liu, </author> <title> Jane W.S.; Dynamic Load Balancing Algorithms in Homogenous Distributed Systems; Technical Report UIUCDCS-R-86-1261, </title> <institution> Department of Computer Science, U of Illinois, Urbana-Champaign. </institution>
Reference-contexts: However, they do establish the basic concepts of distributed process groups, and hence distributed server groups. Load balancing methods can be broken down into two main categories: those based on communication and those based on dispatching patterns <ref> [HSU86] </ref>. In the first category, a group of equal servers dispatches jobs to its members, trying to optimize (or at least improve) some performance criteria. This requires that each server be kept informed of the load on every other server. <p> The critical difference for our purposes is that in this scheme the servers whose loads we are trying to balance need to communicate only with the dispatcher. Schemes for dynamically scheduling requests to balance load have proven successful in several application areas similar to our own <ref> [ALO87, WIK91, HSU86, PAR92] </ref>. The NCSA has also implemented a distributed Web server mechanism [NCSA]. Their server, which is probably the most heavily loaded server on the Web, was beginning to experience actual system failures due to extreme load.
Reference: [LIN91] <author> Lin, H.-C., Raghavendra, C.S.; </author> <title> A dynamic load balancing policy with a central job dispatcher. </title> <booktitle> Proceedings of 11th Intl. Conf. on Distributed Computing Systems; May 1991; pp. </booktitle> <pages> 264-271. </pages>
Reference: [PAR92] <author> Parris, Colin, Zhang, Hui, Ferrari, </author> <title> Domenico; A Mechanism for Dynamic Re-routing of Real-time Channels; Technical TR-92-053, </title> <institution> Computer Science Division, UC Berkeley. </institution>
Reference-contexts: The critical difference for our purposes is that in this scheme the servers whose loads we are trying to balance need to communicate only with the dispatcher. Schemes for dynamically scheduling requests to balance load have proven successful in several application areas similar to our own <ref> [ALO87, WIK91, HSU86, PAR92] </ref>. The NCSA has also implemented a distributed Web server mechanism [NCSA]. Their server, which is probably the most heavily loaded server on the Web, was beginning to experience actual system failures due to extreme load.
Reference: [WIK91] <author> Wikstrom, Milton C. </author> <title> et al; A Meta-Balancer for Dynamic Load Balancers; Technical Report TR#91-04, </title> <institution> Department of Comuter Science, Iowa State University. </institution> <note> HTTP and Distributed Web Servers: </note>
Reference-contexts: The critical difference for our purposes is that in this scheme the servers whose loads we are trying to balance need to communicate only with the dispatcher. Schemes for dynamically scheduling requests to balance load have proven successful in several application areas similar to our own <ref> [ALO87, WIK91, HSU86, PAR92] </ref>. The NCSA has also implemented a distributed Web server mechanism [NCSA]. Their server, which is probably the most heavily loaded server on the Web, was beginning to experience actual system failures due to extreme load.
Reference: [CERN] <institution> HTTP specification -- working document specifying the hypertext transfer protocol (HTTP) 1.0, </institution> <note> available on the WWW at the URL http://info.cern.ch/. </note>
Reference-contexts: The World Wide Web 2.1. The HTTP Protocol The fundamental mechanism underlying the Web is the HTTP protocol. The protocol is stateless, object-oriented, and textual. A complete description of the current protocol can be found on-line at <ref> [CERN] </ref>. For our purposes, we are only interested in the basic structure of the protocol. HTTP is an RPC-like protocol; clients make requests of servers and receive responses. The general format of a request is: This figure needs some explanation.
Reference: [KBM94] <author> Katz, Butler, McGrath: </author> <title> A Scalable HTTP Server: The NCSA Prototype - working document from NCSA. </title> <note> Available on the WWW at the URL http://www.elsevier.nl/cgi-bin/query/WWW94/FinalPro-gramme.html?katz. </note>
Reference-contexts: The need for this is indeed real; NCSA has implemented a similar scheme for their server after a single server machine was no longer able to cope with the heavy load <ref> [KBM94] </ref>. In order for a Web server group to be useful it must operate transparently within the existing Web.
References-found: 11

