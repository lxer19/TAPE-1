URL: http://www.research.digital.com/SRC/personal/monika/papers/monika-focs95-2.ps.gz
Refering-URL: http://www.research.digital.com/SRC/personal/monika/papers.html
Root-URL: http://www.research.digital.com
Email: fmhr,tah,pkpkg@cs.cornell.edu  
Title: Computing Simulations on Finite and Infinite Graphs  
Author: Monika R. Henzinger Thomas A. Henzinger Peter W. Kopke 
Affiliation: Computer Science Department, Cornell University  
Abstract: We present algorithms for computing similarity relations of labeled graphs. Similarity relations have applications for the refinement and verification of reactive systems. For finite graphs, we present an O(mn) algorithm for computing the similarity relation of a graph with n vertices and m edges (assuming m n). For effectively presented infinite graphs, we present a symbolic similarity-checking procedure that terminates if a finite similarity relation exists. We show that 2D rectangular automata, which model discrete reactive systems with continuous environments, define effectively presented infinite graphs with finite similarity relations. It follows that the refinement problem and the 8CTL fl model-checking problem are decidable for 2D rectangular automata. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi, L. Lamport. </author> <title> The existence of refinement mappings. </title> <booktitle> 3rd LICS, IEEE, </booktitle> <pages> 165-175, </pages> <year> 1988. </year>
Reference-contexts: Simulations arise in two situations of formal system design and analysis|system refinement and system abstraction. First, a system G 1 refines (or implements) a specification G 2 if every start state of G 1 is simulated by a start state of G 2 <ref> [1] </ref>. <p> In Section 3, we show that all 2D rectangular automata have finite similarity relations. 2 Related work. The model theory and the proof theory of similarity are studied extensively in process algebra [21, 26, 35], and in deductive approaches to the refinement of reactive systems <ref> [1, 29, 30] </ref>. Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )). <p> Symbolic procedures apply to infinite graphs also. For example, for the infinite graph with the vertex set R, the symbolic constraint 1 u 2 represents the infinite set <ref> [1; 2] </ref> R of vertices, and the symbolic constraint 1 u 2 ^ u 0 = u + 1 represents an infinite set of edges, one from each vertex u 2 [1; 2] to the vertex u + 1. A region is a (possibly infinite) set of vertices. <p> for the infinite graph with the vertex set R, the symbolic constraint 1 u 2 represents the infinite set <ref> [1; 2] </ref> R of vertices, and the symbolic constraint 1 u 2 ^ u 0 = u + 1 represents an infinite set of edges, one from each vertex u 2 [1; 2] to the vertex u + 1. A region is a (possibly infinite) set of vertices. Symbolic procedures operate on regions, rather than vertices. Instead of computing simulator sets for individual vertices, we compute simulator sets for entire regions. Note the following two facts. <p> By gluing together opposite sides of the closed unit square <ref> [0; 1] </ref> 2 , we obtain the torus T 2 . Define the equivalence relation j on [0; 1] 2 by x j y iff frac (x) = frac (y). Then T 2 = [0; 1] 2 = j . <p> By gluing together opposite sides of the closed unit square <ref> [0; 1] </ref> 2 , we obtain the torus T 2 . Define the equivalence relation j on [0; 1] 2 by x j y iff frac (x) = frac (y). Then T 2 = [0; 1] 2 = j . We use the points in the half-open unit square (0; 1] 2 to represent the elements of T 2 . <p> By gluing together opposite sides of the closed unit square <ref> [0; 1] </ref> 2 , we obtain the torus T 2 . Define the equivalence relation j on [0; 1] 2 by x j y iff frac (x) = frac (y). Then T 2 = [0; 1] 2 = j . We use the points in the half-open unit square (0; 1] 2 to represent the elements of T 2 . Let a and b be positive rationals with a b. <p> ((0; 1] 2 ; E time [ E trans 1 [ E trans 2 ; A; hhii Time steps Continuous evolution is represented by edges of the type E time : define (x; y) 2 E time iff 8 , and their intersection there is a point x 0 2 <ref> [0; 1] </ref> 2 such that x 0 j x and y 2 cone a;b (x 0 ). <p> The similarity quotient of R 0 fi R consists of a strip that is infinite in one dimension, and tessellated by the torus similarity quotient on each unit square of the strip. This is illustrated in the final pane of Figure 3 for an automaton with I act = <ref> [1; 2] </ref> and c = 3.
Reference: [2] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. Hybrid Systems, </title> <publisher> Springer LNCS 736, </publisher> <pages> 209-229, </pages> <year> 1993. </year>
Reference-contexts: Hence the similarity quotient is adequate for checking, say, all formulas of the branching temporal logic 8CTL fl , which contain only universal path quantifiers [20]. Third, infinite labeled graphs may be presented effectively using the formalism of hybrid automata for modeling reactive systems with discrete and continuous components <ref> [2] </ref>. Within hybrid automata, a maximal subclass with a decidable graph reachability problem are rectangular automata [25]. We show that 2D rectangular automata define infinite-state systems with infinite bisimilarity quotients, yet finite similarity quotients. <p> Symbolic procedures apply to infinite graphs also. For example, for the infinite graph with the vertex set R, the symbolic constraint 1 u 2 represents the infinite set <ref> [1; 2] </ref> R of vertices, and the symbolic constraint 1 u 2 ^ u 0 = u + 1 represents an infinite set of edges, one from each vertex u 2 [1; 2] to the vertex u + 1. A region is a (possibly infinite) set of vertices. <p> for the infinite graph with the vertex set R, the symbolic constraint 1 u 2 represents the infinite set <ref> [1; 2] </ref> R of vertices, and the symbolic constraint 1 u 2 ^ u 0 = u + 1 represents an infinite set of edges, one from each vertex u 2 [1; 2] to the vertex u + 1. A region is a (possibly infinite) set of vertices. Symbolic procedures operate on regions, rather than vertices. Instead of computing simulator sets for individual vertices, we compute simulator sets for entire regions. Note the following two facts. <p> The next section gives an example for a class of systems that define effective labeled graphs with finite similarity relations. 3 Hybrid Automata with Finite Similarity Relations A hybrid automaton is a finite automaton in tandem with a dynamical system <ref> [2] </ref>. Hybrid automata are useful for the algorithmic analysis of discrete programs that interact with a continuous environment [4, 23]. Each hybrid automaton defines an infinite labeled graph. Verification must either proceed symbolically on the infinite state space, or otherwise reduce the state space to a finite quotient. <p> If a = b, then the labeled graph G a;b has the finite region bisimulation = a <ref> [2, 3] </ref>, which is defined by the line on the torus T 2 that begins at the origin and moves at slope a until it meets the origin once again. Then horizontal and vertical lines are drawn from each intersection with the coordinate axes. <p> The similarity quotient of R 0 fi R consists of a strip that is infinite in one dimension, and tessellated by the torus similarity quotient on each unit square of the strip. This is illustrated in the final pane of Figure 3 for an automaton with I act = <ref> [1; 2] </ref> and c = 3.
Reference: [3] <author> R. Alur, D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: Verification must either proceed symbolically on the infinite state space, or otherwise reduce the state space to a finite quotient. Such a reduction is possible for timed (hybrid) automata, where all continuous variables are accurate clocks, because all timed automata have finite bisimilarity relations <ref> [3] </ref>. However, finite bisimilarity relations no longer exist for simple extensions of timed automata, such as rectangular (hybrid) automata, where all continuous variables are clocks with bounded drift [22]. Yet the reach-ability problem is known to be decidable for rectangular automata [25]. <p> If a = b, then the labeled graph G a;b has the finite region bisimulation = a <ref> [2, 3] </ref>, which is defined by the line on the torus T 2 that begins at the origin and moves at slope a until it meets the origin once again. Then horizontal and vertical lines are drawn from each intersection with the coordinate axes.
Reference: [4] <author> R. Alur, T.A. Henzinger, P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> 14th RTSS, ACM, </booktitle> <pages> 2-11, </pages> <year> 1993. </year>
Reference-contexts: Hybrid automata are useful for the algorithmic analysis of discrete programs that interact with a continuous environment <ref> [4, 23] </ref>. Each hybrid automaton defines an infinite labeled graph. Verification must either proceed symbolically on the infinite state space, or otherwise reduce the state space to a finite quotient. <p> The theory (R; +; ) is decidable, closed under boolean operations, and closed under the pre-operation for rectangular automata, which corresponds to quantifier elimination <ref> [4] </ref>. Similarity relations of 2D rectangular automata. We show that for every 2D rectangular automaton H, the infinite labeled graph G H has a finite similarity relation. In the following, we assume that the activity rectangle act is closed, and no component of act contains 0. <p> Corollary 3 The algorithm SymbolicSimilarity ter minates when applied to a 2D rectangular automaton. By contrast, 2D rectangular automata generally do not have finite bisimilarity relations [22], and symbolic CTL model-checking procedures <ref> [4] </ref> may not terminate when applied to a 2D rectangular automaton. We conjecture that rectangular automata of arbitrary dimension have finite similarity relations. 8CTL fl model checking. Let H be a rectangular automaton with the location set Loc and the invariant function inv .
Reference: [5] <author> S. Bensalem, A. Bouajjani, C. Loiseaux, J. Sifakis. </author> <title> Property-preserving simulations. </title> <booktitle> 4th CAV, </booktitle> <publisher> Springer LNCS 663, </publisher> <pages> 260-273, </pages> <year> 1992. </year>
Reference-contexts: The resulting quotient graph, which represents an abstraction of the system, may be much smaller than the full system graph, and may even be finite for infinite system graphs. The notion of "state equivalence" depends, of course, on the class of system properties that are considered <ref> [5, 13, 18] </ref>. In verification, two particularly important state equivalences are trace equivalence and bisimilarity. Trace equivalence.
Reference: [6] <author> B. Bloom. </author> <title> Ready simulation, bisimulation, and the semantics of CCS-like languages. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1989. </year>
Reference-contexts: The model theory and the proof theory of similarity are studied extensively in process algebra [21, 26, 35], and in deductive approaches to the refinement of reactive systems [1, 29, 30]. Polynomial-time algorithms for computing similarity quotients are presented in <ref> [6] </ref> (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )).
Reference: [7] <author> B. Bloom, S. Istrail, A.R. Meyer. </author> <title> Bisimulation can't be traced. </title> <booktitle> 15th POPL, ACM, </booktitle> <pages> 229-239, </pages> <year> 1988. </year>
Reference-contexts: Similarity. We argue that in many cases, neither trace equivalence nor bisimilarity, but similarity is the appropriate abstraction for computer-aided verification. (Process algebra, which studies the behavior of state equivalences under various operations on reactive systems, provides additional justification for using equivalences that are closely related to similarity <ref> [7] </ref>.) First, for finite-state systems, the similarity quotient can be computed in polynomial time, and for effectively presented infinite-state systems, the similarity quotient can be computed symbolically.
Reference: [8] <author> B. Bloom, R. Paige. </author> <title> Transformational design and implementation of a new efficient solution to the ready simulation problem. </title> <journal> Science of Computer Programming, </journal> <note> to appear. </note>
Reference-contexts: Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )). Recently it has come to our attention that an O (mn) algorithm was found independently by Bloom and Paige <ref> [8] </ref>. (All of these algorithms are set in somewhat different contexts, and solve somewhat different problems, but can be translated into our framework.) A symbolic procedure for model-checking 8CTL fl formulas is given in [17]. <p> Theorem 4 The LTL model-checking problem is de-cidable for generalized 2D rectangular automata. Acknowledgment. The authors thank Rance Cleaveland for providing many valuable pointers to the literature, in particular to <ref> [8] </ref> and to [12], which presents an O (n 3 ) algorithm for computing more general preorders than simulations on finite graphs.
Reference: [9] <author> A. Bouajjani, J.-C. Fernandez, N. Halbwachs. </author> <title> Minimal model generation. </title> <booktitle> 2nd CAV, </booktitle> <publisher> Springer LNCS 531, </publisher> <pages> 197-203, </pages> <year> 1990. </year>
Reference-contexts: Symbolic procedures are essential for the success of computer-aided verification, which typically deals with infinite state spaces, or with state spaces that are too large to be enumerated [11]. Our symbolic similarity-checking procedure uses the same primitives as symbolic minimization procedures for computing bisimilarity quotients <ref> [9, 28] </ref>, and the procedure terminates if the input graph has a finite similarity quotient. Second, since similarity lies strictly between trace equivalence and bisimilarity, it provides a better state-space reduction than bisimilarity, and the similarity quotient is still adequate for checking all linear temporal formulas.
Reference: [10] <author> A. Bouajjani, R. Robbana. </author> <title> Verifying !-regular properties for subclasses of linear hybrid systems. </title> <booktitle> 7th CAV, </booktitle> <publisher> Springer LNCS 939, </publisher> <pages> 437-450, </pages> <year> 1995. </year>
Reference-contexts: The similarity quotient of G H is infinite, but can be encoded by a pushdown !-automaton whose stack represents the absolute value of the integer part for the second coordinate. (This technique is used in <ref> [10] </ref> for a similar purpose.) It remains to consider the case in which both coordinates may take on both positive and negative derivatives; that is, inf act 1 &lt; 0 &lt; sup act 1 , and inf act 2 &lt; 0 &lt; sup act 2 .
Reference: [11] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill, L.J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98 </volume> <pages> 142-170, </pages> <year> 1992. </year>
Reference-contexts: Symbolic procedures are essential for the success of computer-aided verification, which typically deals with infinite state spaces, or with state spaces that are too large to be enumerated <ref> [11] </ref>. Our symbolic similarity-checking procedure uses the same primitives as symbolic minimization procedures for computing bisimilarity quotients [9, 28], and the procedure terminates if the input graph has a finite similarity quotient.
Reference: [12] <author> U. Celikkan, R. Cleaveland. </author> <title> Generating diagnostic information for behavioral preorders. </title> <journal> Distributed Computing, </journal> <note> to appear. </note>
Reference-contexts: Theorem 4 The LTL model-checking problem is de-cidable for generalized 2D rectangular automata. Acknowledgment. The authors thank Rance Cleaveland for providing many valuable pointers to the literature, in particular to [8] and to <ref> [12] </ref>, which presents an O (n 3 ) algorithm for computing more general preorders than simulations on finite graphs.
Reference: [13] <author> E.M. Clarke, O. Grumberg, D.E. </author> <title> Long. Model checking and abstraction. </title> <booktitle> 19th POPL, ACM, </booktitle> <pages> 343-354, </pages> <year> 1992. </year>
Reference-contexts: The resulting quotient graph, which represents an abstraction of the system, may be much smaller than the full system graph, and may even be finite for infinite system graphs. The notion of "state equivalence" depends, of course, on the class of system properties that are considered <ref> [5, 13, 18] </ref>. In verification, two particularly important state equivalences are trace equivalence and bisimilarity. Trace equivalence.
Reference: [14] <author> R.J. Cleaveland, J. Parrow, B. Steffen. </author> <title> The Concur-rency Workbench: a semantics-based tool for the verification of finite-state systems. </title> <journal> ACM TOPLAS, </journal> <volume> 15 </volume> <pages> 36-72, </pages> <year> 1993. </year>
Reference-contexts: The model theory and the proof theory of similarity are studied extensively in process algebra [21, 26, 35], and in deductive approaches to the refinement of reactive systems [1, 29, 30]. Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), <ref> [14] </ref> (O (mn 4 )), and [15] (O (m 2 )).
Reference: [15] <author> R.J. Cleaveland, B. Steffen. </author> <title> A linear-time model-checking algorithm for the alternation-free modal - calculus. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 2 </volume> <pages> 121-147, </pages> <year> 1993. </year>
Reference-contexts: Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and <ref> [15] </ref> (O (m 2 )).
Reference: [16] <author> R.S. Cohen, </author> <title> A.Y. Gold. Theory of !-languages I: characterizations of !-context-free languages. </title> <journal> JCSS, </journal> <volume> 15 </volume> <pages> 169-184, </pages> <year> 1977. </year>
Reference-contexts: From our characterization of the similarity relation of G H , it follows that the LTL model-checking problem for generalized 2D rectangular automata can be reduced to the language inclusion problem between a pushdown !-automaton and a finite !-automaton, which is known to be decidable <ref> [16] </ref>. Theorem 4 The LTL model-checking problem is de-cidable for generalized 2D rectangular automata. Acknowledgment.
Reference: [17] <author> D.R. Dams, O. Grumberg, R. Gerth. </author> <title> Generation of reduced models for checking fragments of CTL. </title> <booktitle> 5th CAV, </booktitle> <publisher> Springer LNCS 697, </publisher> <pages> 479-490, </pages> <year> 1993. </year>
Reference-contexts: Second, since similarity lies strictly between trace equivalence and bisimilarity, it provides a better state-space reduction than bisimilarity, and the similarity quotient is still adequate for checking all linear temporal formulas. Indeed, two vertices are similar iff they satisfy the same formulas of branching temporal logic without quantifier switches <ref> [17] </ref>. Hence the similarity quotient is adequate for checking, say, all formulas of the branching temporal logic 8CTL fl , which contain only universal path quantifiers [20]. <p> come to our attention that an O (mn) algorithm was found independently by Bloom and Paige [8]. (All of these algorithms are set in somewhat different contexts, and solve somewhat different problems, but can be translated into our framework.) A symbolic procedure for model-checking 8CTL fl formulas is given in <ref> [17] </ref>. While that procedure can be used for computing similarity quotients symbolically, by evaluating increasingly larger 8CTL fl formulas, this approach does not seem practical. 2 Similarity Checking 2.1 Finite graphs We compute for each vertex v the simulator set sim (v) of vertices that simulate v.
Reference: [18] <author> D.R. Dams, O. Grumberg, R. Gerth. </author> <title> Abstract interpretation of reactive systems: </title> <booktitle> abstractions preserving 8CTL fl , 9CTL fl , and CTL fl . IFIP Working Conference on Programming Concepts, Methods, and Calculi, </booktitle> <address> Else-vier, </address> <year> 1994. </year>
Reference-contexts: The resulting quotient graph, which represents an abstraction of the system, may be much smaller than the full system graph, and may even be finite for infinite system graphs. The notion of "state equivalence" depends, of course, on the class of system properties that are considered <ref> [5, 13, 18] </ref>. In verification, two particularly important state equivalences are trace equivalence and bisimilarity. Trace equivalence.
Reference: [19] <author> E.A. Emerson. </author> <title> Temporal and modal logic. </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <editor> B, </editor> <publisher> Elsevier, </publisher> <pages> 995-1072, </pages> <year> 1990. </year>
Reference-contexts: In this case, I act = R; that is, each point in R 2 may evolve into any direction. Then G H has a finite bisimilarity relation [22]. Consider the linear temporal logic LTL <ref> [19] </ref> whose atomic formulas are the locations of H and the rectangles in R 2 .
Reference: [20] <author> O. Grumberg, D.E. </author> <title> Long. Model checking and modular verification. </title> <booktitle> 2nd CONCUR, </booktitle> <publisher> Springer LNCS 527, </publisher> <pages> 250-265, </pages> <year> 1991. </year>
Reference-contexts: Indeed, two vertices are similar iff they satisfy the same formulas of branching temporal logic without quantifier switches [17]. Hence the similarity quotient is adequate for checking, say, all formulas of the branching temporal logic 8CTL fl , which contain only universal path quantifiers <ref> [20] </ref>. Third, infinite labeled graphs may be presented effectively using the formalism of hybrid automata for modeling reactive systems with discrete and continuous components [2]. Within hybrid automata, a maximal subclass with a decidable graph reachability problem are rectangular automata [25]. <p> We conjecture that rectangular automata of arbitrary dimension have finite similarity relations. 8CTL fl model checking. Let H be a rectangular automaton with the location set Loc and the invariant function inv . Consider the branching temporal logic 8CTL fl <ref> [20] </ref> whose atomic formulas are the locations in Loc (for more generous atomic formulas, see [24]). Then every formula OE defines a region [[OE]] H of the infinite labeled graph G H (the atomic formula ` defines the region [[`]] H = f (`; x) j x 2 inv (`)g).
Reference: [21] <author> M.C.B. Hennessy, R. Milner. </author> <title> Algebraic laws for non-determinism and concurrency. </title> <journal> JACM, </journal> <volume> 32 </volume> <pages> 137-161, </pages> <year> 1985. </year>
Reference-contexts: In Section 3, we show that all 2D rectangular automata have finite similarity relations. 2 Related work. The model theory and the proof theory of similarity are studied extensively in process algebra <ref> [21, 26, 35] </ref>, and in deductive approaches to the refinement of reactive systems [1, 29, 30]. Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )).
Reference: [22] <author> T.A. Henzinger. </author> <title> Hybrid automata with finite bisim-ulations. </title> <booktitle> 22nd ICALP, </booktitle> <publisher> Springer LNCS 944, </publisher> <pages> 324-335, </pages> <year> 1995. </year>
Reference-contexts: However, finite bisimilarity relations no longer exist for simple extensions of timed automata, such as rectangular (hybrid) automata, where all continuous variables are clocks with bounded drift <ref> [22] </ref>. Yet the reach-ability problem is known to be decidable for rectangular automata [25]. <p> Thus only the discrete state is observable. (In [24], we handle, in addition to observations of the discrete state, also rectangular observations of the continuous state.) Effectiveness of rectangular automata <ref> [22] </ref>. The infinite labeled graph G H is effective for every rectangular automaton H. To see this, consider the class of regions that are definable by boolean combinations of (1) locations in Loc and (2) quantifier-free formulas of the theory (R; +; ) of the reals with addition. <p> The labeled graph G H has a finite similarity relation with O (kc 4 ) many equivalence classes. Corollary 3 The algorithm SymbolicSimilarity ter minates when applied to a 2D rectangular automaton. By contrast, 2D rectangular automata generally do not have finite bisimilarity relations <ref> [22] </ref>, and symbolic CTL model-checking procedures [4] may not terminate when applied to a 2D rectangular automaton. We conjecture that rectangular automata of arbitrary dimension have finite similarity relations. 8CTL fl model checking. Let H be a rectangular automaton with the location set Loc and the invariant function inv . <p> In this case, I act = R; that is, each point in R 2 may evolve into any direction. Then G H has a finite bisimilarity relation <ref> [22] </ref>. Consider the linear temporal logic LTL [19] whose atomic formulas are the locations of H and the rectangles in R 2 .
Reference: [23] <author> T.A. Henzinger, P.-H. Ho, H. Wong-Toi. HyTech: </author> <title> The next generation. </title> <booktitle> 16th RTSS, IEEE, </booktitle> <year> 1995. </year>
Reference-contexts: Our work suggests that similarity is the natural state equivalence for the analysis and abstract interpretation of rectangular automata. We therefore plan to implement our symbolic procedure for computing similarity quotients within HyTech, an automatic tool for the verification of hybrid automata <ref> [23] </ref>. Outline. This paper consists of two parts. In Section 2, we present an O (mn) similarity-checking algorithm for finite graphs, and a symbolic similarity-checking algorithm for effectively presented infinite graphs. In Section 3, we show that all 2D rectangular automata have finite similarity relations. 2 Related work. <p> Hybrid automata are useful for the algorithmic analysis of discrete programs that interact with a continuous environment <ref> [4, 23] </ref>. Each hybrid automaton defines an infinite labeled graph. Verification must either proceed symbolically on the infinite state space, or otherwise reduce the state space to a finite quotient.
Reference: [24] <author> T.A. Henzinger, P.W. Kopke. </author> <title> Hybrid automata with finite mutual simulations. </title> <institution> CSD-TR-95-1497, Cornell Univ., </institution> <year> 1995. </year>
Reference-contexts: Finally, the label of a vertex is its location: for each (`; x) 2 V H , hh (`; x)ii = `. Thus only the discrete state is observable. (In <ref> [24] </ref>, we handle, in addition to observations of the discrete state, also rectangular observations of the continuous state.) Effectiveness of rectangular automata [22]. The infinite labeled graph G H is effective for every rectangular automaton H. <p> We also assume that for all transitions e 2 Trans, if i 2 update (e), then the ith component of the rectangle postguard (e) is a singleton. This has the effect of making all discontinuous jumps deterministic. Open and unbounded phase slope intervals and nondeterministic jumps are handled in <ref> [24] </ref>. We begin by considering only the continuous part R 2 0 of the state space. We first divide the plane into unit squares, and find a finite similarity quotient of each unit square considered as the torus T 2 . <p> It follows that boundary points of the unit square can move "around" the torus T 2 once. (A continuous evolution that moves around the torus multiple times is reducible to a sequence of E time edges <ref> [24] </ref>.) Transition steps Discontinuous jumps of the ith coordinate are represented by edges of the type E trans i , for i = 1; 2: define (x; y) 2 E trans i iff (1) y i = 1, and (2) for j 6= i, y j = x j . (A <p> trans i , for i = 1; 2: define (x; y) 2 E trans i iff (1) y i = 1, and (2) for j 6= i, y j = x j . (A discon tinuous jump in both coordinates is reducible to a sequence of two E trans edges <ref> [24] </ref>.) The labels of two points are equal iff they have the same status with respect to being on the boundaries of the unit square: let A be any set with four elements, and define hhxii = hhyii iff (1) x 1 = 1 iff y 1 = 1, and (2) <p> The two vertices x and y of the labeled graph G a;b are similar iff x = a y and x = b y. Proof. We argue only that x = a y and x = b y implies that x and y are similar; for the converse see <ref> [24] </ref>. Consider simulation as an infinite two-player game between an evader and a pursuer playing on the torus T 2 . The evader begins at the point x, and the pursuer begins at y. <p> We now return to pursuit game terminology. The pursuer begins at y, and attempts to match the moves of the evader, who begins at x. We sketch a winning strategy for the pursuer when x y (see <ref> [24] </ref> for details). First we consider jump edges from E trans i . Suppose that the evader moves to x 0 such that (x; x 0 ) 2 E trans i . Then the pursuer moves to y 0 such that (y; y 0 ) 2 E trans i . <p> Let H be a rectangular automaton with the location set Loc and the invariant function inv . Consider the branching temporal logic 8CTL fl [20] whose atomic formulas are the locations in Loc (for more generous atomic formulas, see <ref> [24] </ref>). Then every formula OE defines a region [[OE]] H of the infinite labeled graph G H (the atomic formula ` defines the region [[`]] H = f (`; x) j x 2 inv (`)g). <p> In particular, the activity rectangle act = act 1 fi act 2 of H is a product of two arbitrary intervals act 1 ; act 2 R of the real line. For a detailed treatment of generalized rectangular automata, we refer to <ref> [24] </ref>; here we only sketch our results. First consider the case in which only one of the coordinates may take on negative derivatives; that is, 0 &lt; inf act 1 sup act 1 and inf act 2 &lt; 0 &lt; sup act 2 .
Reference: [25] <author> T.A. Henzinger, P.W. Kopke, A. Puri, P. Varaiya. </author> <title> What's decidable about hybrid automata? 27th STOC, </title> <booktitle> ACM, </booktitle> <pages> 373-382, </pages> <year> 1995. </year>
Reference-contexts: Third, infinite labeled graphs may be presented effectively using the formalism of hybrid automata for modeling reactive systems with discrete and continuous components [2]. Within hybrid automata, a maximal subclass with a decidable graph reachability problem are rectangular automata <ref> [25] </ref>. We show that 2D rectangular automata define infinite-state systems with infinite bisimilarity quotients, yet finite similarity quotients. This result gives a structural explanation for the decidability of reachability for rectangular automata, and shows that also refinement and 8CTL fl model-checking are decidable for 2D rectangular automata. <p> However, finite bisimilarity relations no longer exist for simple extensions of timed automata, such as rectangular (hybrid) automata, where all continuous variables are clocks with bounded drift [22]. Yet the reach-ability problem is known to be decidable for rectangular automata <ref> [25] </ref>. We explain this fact by showing that every 2D rectangular automaton has a finite similarity relation, which is the intersection of the two finite bisimilarity relations obtained by looking at the extremal slopes of both drifting clocks. <p> We show that every 2D generalized rectangular automaton has a similarity quotient that, though infinite, tiles the plane in a regular manner. We conclude that linear temporal properties of 2D rectangular automata can be decided using pushdown automata. 3.1 Rectangular automata Definition of rectangular automata <ref> [25] </ref>. An n-dimensional rectangle is a product of n nonempty intervals over R 0 (open, half-open, or closed; bounded or unbounded), all of whose finite endpoints are integers. Let B n be the set of n-dimensional rectangles.
Reference: [26] <author> B. Jonsson. </author> <title> Simulations between specifications of distributed systems. </title> <booktitle> 2nd CONCUR, </booktitle> <publisher> Springer LNCS 527, </publisher> <pages> 346-360, </pages> <year> 1991. </year>
Reference-contexts: In Section 3, we show that all 2D rectangular automata have finite similarity relations. 2 Related work. The model theory and the proof theory of similarity are studied extensively in process algebra <ref> [21, 26, 35] </ref>, and in deductive approaches to the refinement of reactive systems [1, 29, 30]. Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )).
Reference: [27] <author> O. Kupferman. </author> <title> Model Checking for Branching-time Temporal Logics. </title> <type> PhD thesis, </type> <institution> The Technion, </institution> <year> 1995. </year>
Reference-contexts: Since two similar vertices cannot be distinguished by 8CTL fl formulas, it follows from Theorem 3 that the 8CTL fl model-checking problem for 2D rectangular automata can be reduced to model-checking on finite labeled graphs. From the model-checking complexity of CTL fl <ref> [27] </ref>, it follows that the 8CTL fl model-checking problem for 2D rectangular automata can be solved in PSPACE. 3.2 Generalized rectangular automata The rectangles of a generalized 2D rectangular automaton H are not restricted to the positive portion R 2 0 of the plane.
Reference: [28] <author> D. Lee, M. Yannakakis. </author> <title> Online minimization of transition systems. </title> <booktitle> 24th STOC, ACM, </booktitle> <pages> 264-274, </pages> <year> 1992. </year>
Reference-contexts: Symbolic procedures are essential for the success of computer-aided verification, which typically deals with infinite state spaces, or with state spaces that are too large to be enumerated [11]. Our symbolic similarity-checking procedure uses the same primitives as symbolic minimization procedures for computing bisimilarity quotients <ref> [9, 28] </ref>, and the procedure terminates if the input graph has a finite similarity quotient. Second, since similarity lies strictly between trace equivalence and bisimilarity, it provides a better state-space reduction than bisimilarity, and the similarity quotient is still adequate for checking all linear temporal formulas.
Reference: [29] <author> N.A. Lynch, </author> <title> M.R. Tuttle. Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> 6th PODC, ACM, </booktitle> <pages> 137-151, </pages> <year> 1987. </year>
Reference-contexts: In Section 3, we show that all 2D rectangular automata have finite similarity relations. 2 Related work. The model theory and the proof theory of similarity are studied extensively in process algebra [21, 26, 35], and in deductive approaches to the refinement of reactive systems <ref> [1, 29, 30] </ref>. Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )).
Reference: [30] <author> N.A. Lynch, F. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. Real Time: Theory in Practice, </title> <publisher> Springer LNCS 600, </publisher> <pages> 397-446, </pages> <year> 1992. </year>
Reference-contexts: In Section 3, we show that all 2D rectangular automata have finite similarity relations. 2 Related work. The model theory and the proof theory of similarity are studied extensively in process algebra [21, 26, 35], and in deductive approaches to the refinement of reactive systems <ref> [1, 29, 30] </ref>. Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )).
Reference: [31] <author> R. Milner. </author> <title> An algebraic definition of simulation between programs. </title> <booktitle> 2nd IJCAI, British Computer Society, </booktitle> <pages> 481-489, </pages> <year> 1971. </year>
Reference-contexts: The vertex v simulates the vertex u if there is a simulation such that u v <ref> [31] </ref>. The vertices u and v are similar, written u S v, if u simulates v and v simulates u. The similarity relation S V 2 is an equivalence relation. We consider the problem of computing the similarity relation S . Motivation.
Reference: [32] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <address> Pren-tice-Hall, </address> <year> 1989. </year>
Reference-contexts: The vertices u and v are bisimilar, written u B v, if there is a bisimulation = such that u = v <ref> [32] </ref>. Bisimilarity is an equivalence relation that is finer than similarity; that is, u B v implies u S v, but not vice versa.
Reference: [33] <author> R. Paige, R.E. Tarjan. </author> <title> Three partition-refinement algorithms. </title> <journal> SIAM J. Computing, </journal> <volume> 16 </volume> <pages> 973-989, </pages> <year> 1987. </year>
Reference-contexts: algo 1 Let hhu 1 u 2 : : : u n ii = hhu 1 iihhu 2 ii hhu n ii. rithm checks in time O (m log n) if two vertices of a finite labeled graph G with n vertices and m edges are bisimilar (assuming m n) <ref> [33] </ref>. However, since most interesting system properties can be expressed in linear temporal logic, bisimilarity usually provides an unnecessarily weak reduction of the state space. Similarity.
Reference: [34] <author> L.J. Stockmeyer, A.R. Meyer. </author> <title> Word problems requiring exponential time. </title> <booktitle> 5th STOC, ACM, </booktitle> <pages> 1-9, </pages> <year> 1973. </year>
Reference-contexts: Trace equivalence, however, is difficult to compute: the problem of checking if two vertices of a finite labeled graph are trace equivalent is PSPACE-complete <ref> [34] </ref>. Bisimilarity.
Reference: [35] <author> R.J. van Glabbeek. </author> <title> Comparative Concurrency Semantics and Refinement of Actions. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit te Amsterdam, </institution> <year> 1990. </year>
Reference-contexts: In Section 3, we show that all 2D rectangular automata have finite similarity relations. 2 Related work. The model theory and the proof theory of similarity are studied extensively in process algebra <ref> [21, 26, 35] </ref>, and in deductive approaches to the refinement of reactive systems [1, 29, 30]. Polynomial-time algorithms for computing similarity quotients are presented in [6] (O (mn 6 )), [14] (O (mn 4 )), and [15] (O (m 2 )).
References-found: 35

