URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-98-02.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: nr@cs.virginia.edu jwd@cs.virginia.edu  
Title: Machine Descriptions to Build Tools for Embedded Systems  
Author: Norman Ramsey and Jack W. Davidson 
Keyword: Machine Descriptions for Machine-Level Tools  
Note: CSDL should support a variety of machine-level tools while remaining inde pendent of any one in particular.  
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Abstract: Because of poor tools, developing embedded systems can be unnecessarily hard. Machine descriptions based on register-transfer lists (RTLs) have proven useful in building retargetable compilers, but not in building other retargetable tools. Simulators, assemblers, linkers, debuggers, and profilers are built by hand if at all|previous machine descriptions have lacked the detail and precision needed to generate them. This paper presents detailed and precise machine-description techniques that are based on a new formalization of RTLs. Unlike previous notations, these RTLs have a detailed, unambiguous, and machine-independent semantics, which makes them ideal for supporting automatic generation of retargetable tools. The paper also gives examples of -RTL, a notation that makes it possible for human beings to read and write RTLs without Developers for embedded systems often work without the benefit of the best software tools. Embedded systems can have unusual architectural features, and new processors can be introduced rapidly. Development is typically done on stock processors, and cross-development can make it hard to get basic compilers, assemblers, linkers, and debuggers, let alone profilers, tracers, test-coverage analyzers, or general code-modification tools. One reason such tools are seldom available is that machine-dependent detail makes it hard to build them. This paper describes work in progress on Computer Systems Description Languages (CSDL). CSDL descriptions are intended not only to provide precise, formal notations for describing machine-dependent detail, but also to support automatic generation of useful tools. Moreover, CSDL descriptions are intended to be reusable, so we can build up a body of descriptions, e.g., of popular embedded processors, that will be useful for building future as well as current tools. The design goals for CSDL are becoming overwhelmed by machine-dependent detail.
Abstract-found: 1
Intro-found: 1
Reference: <author> Bailey, Mark W. and Jack W. Davidson. </author> <year> 1995 </year> <month> (January). </month> <title> A formal model and specification language for procedure calling conventions. </title> <booktitle> In Conference Record of the 22nd Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 298-310, </pages> <address> San Francisco, CA. </address>
Reference: <author> Benitez, Manuel E. and Jack W. Davidson. </author> <year> 1988 </year> <month> (July). </month> <title> A portable global optimizer and linker. </title> <booktitle> Proceedings of the ACM SIGPLAN '88 Conference on Programming Language Design and Implementation, in SIGPLAN Notices, </booktitle> <volume> 23(7) </volume> <pages> 329-338. </pages>
Reference-contexts: We believe that a formal description of this information will enable us to build many different kinds of tools, including control-flow analyzers, code-editing tools like EEL (Larus and Schnarr 1995) and ATOM (Srivastava and Eustace 1994), code improvers in the style of PO (Davidson and Fraser 1980), vpo <ref> (Benitez and Davidson 1988) </ref>, and gcc (Stallman 1992), and even emulators like SPIM (Larus 1990) and EASE (Davidson and Whalley 1990). In -RTL, we specify the effect of each instruction as a register-transfer list (RTL), which describes a way of modifying storage cells.
Reference: <author> Cook, Todd and Ed Harcourt. </author> <year> 1994 </year> <month> (May). </month> <title> A functional specification language for instruction set architectures. </title> <booktitle> In Proceedings of the 1994 International Conference on Computer Languages, </booktitle> <pages> pages 11-19. </pages>
Reference: <author> Davidson, Jack W. and Christopher W. Fraser. </author> <year> 1980 </year> <month> (April). </month> <title> The design and application of a retargetable peephole optimizer. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 2(2) </volume> <pages> 191-202. </pages>
Reference-contexts: We believe that a formal description of this information will enable us to build many different kinds of tools, including control-flow analyzers, code-editing tools like EEL (Larus and Schnarr 1995) and ATOM (Srivastava and Eustace 1994), code improvers in the style of PO <ref> (Davidson and Fraser 1980) </ref>, vpo (Benitez and Davidson 1988), and gcc (Stallman 1992), and even emulators like SPIM (Larus 1990) and EASE (Davidson and Whalley 1990). In -RTL, we specify the effect of each instruction as a register-transfer list (RTL), which describes a way of modifying storage cells.
Reference: <author> Davidson, Jack W. and David B. Whalley. </author> <year> 1990 </year> <month> (May). </month> <title> Ease: An environment for architecture study and experimentation. </title> <booktitle> In Proceedings of the 1990 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 259-260, </pages> <address> Boulder, </address> <publisher> CO. </publisher>
Reference-contexts: different kinds of tools, including control-flow analyzers, code-editing tools like EEL (Larus and Schnarr 1995) and ATOM (Srivastava and Eustace 1994), code improvers in the style of PO (Davidson and Fraser 1980), vpo (Benitez and Davidson 1988), and gcc (Stallman 1992), and even emulators like SPIM (Larus 1990) and EASE <ref> (Davidson and Whalley 1990) </ref>. In -RTL, we specify the effect of each instruction as a register-transfer list (RTL), which describes a way of modifying storage cells. Like other properties of instructions, the RTL is a synthesized attribute.
Reference: <author> Emmelmann, Helmut, Friedrich-Wilhelm Schroer, and Rudolf Landwehr. </author> <year> 1989 </year> <month> (July). </month> <title> BEG | a generator for efficient back ends. </title> <booktitle> Proceedings of the ACM SIGPLAN '89 Conference on Programming Language Design and Implementation, in SIGPLAN Notices, </booktitle> <volume> 24(7) </volume> <pages> 227-237. </pages>
Reference: <author> Fauth, Andreas, Johan Van Praet, and Markus Freericks. </author> <year> 1995 </year> <month> (March). </month> <title> Describing instruction set processors using nML. </title> <booktitle> In The European Design and Test Conference, </booktitle> <pages> pages 503-507. </pages>
Reference: <author> Fernandez, Mary F. </author> <year> 1995 </year> <month> (November). </month> <title> A Retargetable Optimizing Linker. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, Princeton University. </institution>
Reference: <author> Fraser, Christopher W., Robert R. Henry, and Todd A. Proebsting. </author> <year> 1992 </year> <month> (April). </month> <title> BURG|fast optimal instruction selection and tree parsing. </title> <journal> SIGPLAN Notices, </journal> <volume> 27(4) </volume> <pages> 68-76. </pages> <publisher> Intel Corporation. </publisher> <year> 1993. </year> <title> Architecture and Programming Manual. Vol. 3 of Pentium Processor User's Manual. </title> <type> Mount Prospect, </type> <institution> IL. </institution> <note> 16 Larus, </note> <author> James R. and Eric Schnarr. </author> <year> 1995 </year> <month> (June). </month> <title> EEL: machine-independent executable editing. </title> <booktitle> Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, in SIGPLAN Notices, </booktitle> 30(6):291-300. 
Reference: <author> Larus, James R. </author> <year> 1990 </year> <month> (September). </month> <title> SPIM S20: A MIPS R2000 simulator. </title> <type> Technical Report 966, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, WI. </institution>
Reference-contexts: us to build many different kinds of tools, including control-flow analyzers, code-editing tools like EEL (Larus and Schnarr 1995) and ATOM (Srivastava and Eustace 1994), code improvers in the style of PO (Davidson and Fraser 1980), vpo (Benitez and Davidson 1988), and gcc (Stallman 1992), and even emulators like SPIM <ref> (Larus 1990) </ref> and EASE (Davidson and Whalley 1990). In -RTL, we specify the effect of each instruction as a register-transfer list (RTL), which describes a way of modifying storage cells. Like other properties of instructions, the RTL is a synthesized attribute.
Reference: <author> Lipsett, R., C. Schaefer, and C. Ussery. </author> <year> 1993. </year> <title> VHDL: Hardware Description and Design. 12 edition. </title> <publisher> Kluwer Academic Publishers. </publisher>
Reference: <author> Milner, Robin, Mads Tofte, and Robert W. Harper. </author> <year> 1990. </year> <title> The Definition of Standard ML. </title> <address> Cambridge, Massachusetts: </address> <publisher> MIT Press. </publisher>
Reference-contexts: The -RTL translator bridges the gap. -RTL is a higher-order, strongly typed, polymorphic, pure functional language based on Standard ML <ref> (Milner, Tofte, and Harper 1990) </ref>. -RTL descriptions are easier to write than bare RTLs; higher-order functions help eliminate repetition, and the type system infers sizes of operands.
Reference: <author> Milner, Robin. </author> <year> 1978 </year> <month> (December). </month> <title> A theory of type polymorphism in programming. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17 </volume> <pages> 348-375. </pages>
Reference-contexts: Such constants fit into a generalization of the Hindley-Milner type system <ref> (Milner 1978) </ref>. The left child of the STORE is a subtree representing the location consisting of the single register i0, which is register 24.
Reference: <author> Morrisett, Greg. </author> <year> 1995 </year> <month> (December). </month> <title> Compiling with Types. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon. </institution> <note> Published as technical report CMU-CS-95-226. </note>
Reference-contexts: CSDL RTLs are typed. Tools like compilers and analyzers may work directly with RTLs, and because optimizations and other semantics-preserving transformations should also preserve well-typedness, type-checking RTLs can help find bugs <ref> (Morrisett 1995) </ref>. Figure 3 shows the types used in the -RTL type system. We have extended Milner's type inference to this system; -RTL specifications omit types and widths. Unlike in ML, type inference alone does not always guarantee that terms make sense; in general, there are additional constraints.
Reference: <author> Proebsting, Todd A. and Christopher W. Fraser. </author> <year> 1994 </year> <month> (January). </month> <title> Detecting pipeline structural hazards quickly. </title> <booktitle> In Conference Record of the 21st Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 280-286, </pages> <address> Portland, OR. </address>
Reference: <author> Ramsey, Norman and Jack W. Davidson. </author> <year> 1997 </year> <month> (November). </month> <title> Specifying instructions' semantics using CSDL (preliminary report). </title> <type> Technical Report CS-97-31, </type> <institution> Department of Computer Science, University of Virginia. </institution> <note> Revised, </note> <month> May </month> <year> 1998. </year>
Reference-contexts: Most users won't define new RTL operators; they will use the 57 operators defined in our basic RTL library <ref> (Ramsey and Davidson 1997) </ref>. This library includes integer arithmetic and comparison, bitwise operations, and IEEE floating-point operations and rounding modes. RTL aggregations, written in Fig. 1 as aggregation, specify byte order. <p> For example, we could use fetch and store methods to describe the true implementation of 11 SPARC registers, in which "registers" 8 through 31 denote locations accessed indirectly through the register-window pointer (CWP). For our current specification, however, we have chosen a more abstract view of register windows <ref> (Ramsey and Davidson 1997, Chap. 5) </ref>. Slices. Many machine instructions manipulate fragments of words stored in mutable cells. For example, some machines represent condition codes as individual bits within a program status word, and user instructions may change only those bits. <p> The descriptions, as well as more lengthy expositions of RTLs and -RTL, are available in a technical report <ref> (Ramsey and Davidson 1997) </ref>. Acknowledgements This work has been supported by NSF Grant ASC-9612756 and by DARPA Contract MDA904-97-C-0247. Members of the program committee provided useful suggestions about presentation. Appendix: Excerpts from the SPARC description This appendix presents a few more excerpts from our SPARC description. <p> With these omissions restored, the excerpts (as extracted from the source of this paper) compile with our prototype translator. The complete description, with commentary, is available as part of a technical report <ref> (Ramsey and Davidson 1997) </ref>. 14 The excerpts begin with more storage spaces and locations. storage 'i' is 6 cells of 32 bits called "control/status registers" locations [PSR WIM TBR Y PC nPC] is $i [[0..5]] structure icc is struct locations [N Z V C] is PSR@loc [1 bit at [23 22
Reference: <author> Ramsey, Norman and Mary F. Fernandez. </author> <year> 1997 </year> <month> (May). </month> <title> Specifying representations of machine instructions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 19(3) </volume> <pages> 492-524. </pages>
Reference-contexts: Most users won't define new RTL operators; they will use the 57 operators defined in our basic RTL library <ref> (Ramsey and Davidson 1997) </ref>. This library includes integer arithmetic and comparison, bitwise operations, and IEEE floating-point operations and rounding modes. RTL aggregations, written in Fig. 1 as aggregation, specify byte order. <p> For example, we could use fetch and store methods to describe the true implementation of 11 SPARC registers, in which "registers" 8 through 31 denote locations accessed indirectly through the register-window pointer (CWP). For our current specification, however, we have chosen a more abstract view of register windows <ref> (Ramsey and Davidson 1997, Chap. 5) </ref>. Slices. Many machine instructions manipulate fragments of words stored in mutable cells. For example, some machines represent condition codes as individual bits within a program status word, and user instructions may change only those bits. <p> The descriptions, as well as more lengthy expositions of RTLs and -RTL, are available in a technical report <ref> (Ramsey and Davidson 1997) </ref>. Acknowledgements This work has been supported by NSF Grant ASC-9612756 and by DARPA Contract MDA904-97-C-0247. Members of the program committee provided useful suggestions about presentation. Appendix: Excerpts from the SPARC description This appendix presents a few more excerpts from our SPARC description. <p> With these omissions restored, the excerpts (as extracted from the source of this paper) compile with our prototype translator. The complete description, with commentary, is available as part of a technical report <ref> (Ramsey and Davidson 1997) </ref>. 14 The excerpts begin with more storage spaces and locations. storage 'i' is 6 cells of 32 bits called "control/status registers" locations [PSR WIM TBR Y PC nPC] is $i [[0..5]] structure icc is struct locations [N Z V C] is PSR@loc [1 bit at [23 22
Reference: <author> Ramsey, Norman and David R. Hanson. </author> <year> 1992 </year> <month> (July). </month> <title> A retargetable debugger. </title> <booktitle> ACM SIGPLAN '92 Conference on Programming Language Design and Implementation, in SIGPLAN Notices, </booktitle> <volume> 27(7) </volume> <pages> 22-31. </pages>
Reference: <author> Ramsey, Norman. </author> <year> 1996 </year> <month> (April). </month> <title> A simple solver for linear equations containing nonlinear operators. </title> <journal> Software|Practice & Experience, </journal> <volume> 26(4) </volume> <pages> 467-487. </pages>
Reference: <author> Srivastava, Amitabh and Alan Eustace. </author> <year> 1994 </year> <month> (June). </month> <title> ATOM: A system for building customized program analysis tools. </title> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation, in SIGPLAN Notices, </booktitle> <volume> 29(6) </volume> <pages> 196-205. </pages>
Reference-contexts: We believe that a formal description of this information will enable us to build many different kinds of tools, including control-flow analyzers, code-editing tools like EEL (Larus and Schnarr 1995) and ATOM <ref> (Srivastava and Eustace 1994) </ref>, code improvers in the style of PO (Davidson and Fraser 1980), vpo (Benitez and Davidson 1988), and gcc (Stallman 1992), and even emulators like SPIM (Larus 1990) and EASE (Davidson and Whalley 1990).
Reference: <author> Stallman, Richard M. </author> <year> 1992 </year> <month> (February). </month> <title> Using and Porting GNU CC (Version 2.0). Free Software Foundation. </title>
Reference-contexts: formal description of this information will enable us to build many different kinds of tools, including control-flow analyzers, code-editing tools like EEL (Larus and Schnarr 1995) and ATOM (Srivastava and Eustace 1994), code improvers in the style of PO (Davidson and Fraser 1980), vpo (Benitez and Davidson 1988), and gcc <ref> (Stallman 1992) </ref>, and even emulators like SPIM (Larus 1990) and EASE (Davidson and Whalley 1990). In -RTL, we specify the effect of each instruction as a register-transfer list (RTL), which describes a way of modifying storage cells. Like other properties of instructions, the RTL is a synthesized attribute.
Reference: <author> Thomas, Donald and Philip Moorby. </author> <year> 1995. </year> <title> The Verilog Hardware Description Language. 2nd edition. </title> <publisher> Norwell, </publisher> <address> USA: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference: <author> Wang, Daniel C., Andrew W. Appel, Jeff L. Korn, and Christopher S. Serra. </author> <year> 1997 </year> <month> (Oc-tober). </month> <title> The Zephyr abstract syntax description language. </title> <booktitle> In Proceedings of the 2nd USENIX Conference on Domain-Specific Languages, </booktitle> <pages> pages 213-227, </pages> <address> Santa Barbara, CA. </address> <month> 17 </month>
References-found: 23

