URL: ftp://hpsl.cs.umd.edu/pub/papers/usenix97.ps.Z
Refering-URL: http://www.cs.umd.edu/projects/hpsl/papers.brandnew/LocalResources/tech-10-23.htm
Root-URL: 
Email: franga,acha,shamik,saltzg@cs.umd.edu  
Title: Network-aware Mobile Programs  
Author: M.Ranganathan, Anurag Acharya, Shamik Sharma and Joel Saltz 
Address: College Park 20742  
Affiliation: Department of Computer Science University of Maryland,  
Abstract: In this paper, we investigate network-aware mobile programs, programs that can use mobility as a tool to adapt to variations in network characteristics. We present infrastructural support for mobility and network monitoring and show how adaptalk, a Java-based mobile Internet chat application can take advantage of this support to dynamically place the chat server so as to minimize response time. Our conclusion was that on-line network monitoring and adaptive placement of shared data-structures can significantly improve performance of distributed applications on the Internet. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Java object serialization specification. </institution> <note> http://chatsubo.javasoft.com/current/serial/index.html. </note>
Reference-contexts: Application-transparent or system level adaptation to wide variations in network bandwidth has been used successfully by the designers of the CODA file system [10] to improve the performance of applications. Sun has recently released an Object Serialization and Remote Method invocation API for Java <ref> [2, 1] </ref>. This allows objects to be serialized or flattened and shipped over the network and for methods to be invoked on remote objects.
Reference: [2] <institution> Java remote method invocation. </institution> <note> http://chatsubo.javasoft.com/current/rmi/index.html. </note>
Reference-contexts: Application-transparent or system level adaptation to wide variations in network bandwidth has been used successfully by the designers of the CODA file system [10] to improve the performance of applications. Sun has recently released an Object Serialization and Remote Method invocation API for Java <ref> [2, 1] </ref>. This allows objects to be serialized or flattened and shipped over the network and for methods to be invoked on remote objects.
Reference: [3] <author> L. Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> In 22 nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <month> Jan. </month> <year> 1995. </year> <note> http://www.research.digital.com/SRC/Obliq/Obliq.html. </note>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 4, 6, 7] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation. <p> The important issues here are guaranteeing the integrity of the server while the shipped function is being evaluated. Much of the design of Sumatra has been based on earlier systems which incorporated mobility into object systems. Notable among these are Emerald [4] and Obliq <ref> [3] </ref> from which we borrowed several features to incorporate into our system. The Emerald system was one of the earlier mobile object systems which served as a model for several subsequent systems. Emerald incorporated process mobility via active objects, object groupings, distributed stack and distributed garbage collection.
Reference: [4] <author> E.Jul, H.Levy, N.Hutchinson, and A.Black. </author> <title> Fine-grained mobility in the emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(2) </volume> <pages> 109-133, </pages> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 4, 6, 7] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation. <p> The important issues here are guaranteeing the integrity of the server while the shipped function is being evaluated. Much of the design of Sumatra has been based on earlier systems which incorporated mobility into object systems. Notable among these are Emerald <ref> [4] </ref> and Obliq [3] from which we borrowed several features to incorporate into our system. The Emerald system was one of the earlier mobile object systems which served as a model for several subsequent systems. Emerald incorporated process mobility via active objects, object groupings, distributed stack and distributed garbage collection.
Reference: [5] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment white paper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <year> 1995. </year> <note> http://www.java.sun.com. </note>
Reference-contexts: We investigate these issues in the context of Sumatra, an extension of the J ava 1 programming environment <ref> [5] </ref> that provides a flexible substrate for adaptive mobile programs. Since, mobile programs are scarce, we developed our own mobile internet chat server. This application, called adaptalk, monitors the latencies between all participants and locates the chat server so as to minimize the maximum response time.
Reference: [6] <author> R. S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop - Monterey CA, </booktitle> <year> 1996. </year> <note> http://www.cs.dartmouth.edu/ agent/papers.html. </note>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 4, 6, 7] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation. <p> TeleScript [7] is a commercially available system that supports program mobility. Rus et. al. [11] describe an adaptive mobile application which does intelligent information gathering. They use a modified version of TCL called AgentTCL <ref> [6] </ref> as an agent language. AgentTCL does not, however, provide support for mobile distributed objects. Our system combines both distributed objects and agent hopping while providing application level control over all policy decisions thus making it more flexible and efficient.
Reference: [7] <author> G. M. Inc. </author> <title> Telescript Language Language Reference and Users Guide, </title> <note> 1995. http://cnn.genmagic.com/Telescript/TDE. </note>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 4, 6, 7] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation. <p> Emerald incorporated process mobility via active objects, object groupings, distributed stack and distributed garbage collection. Emerald was designed for local area networks. Obliq is a distributed object system that provides facilities for object mobility and state mobility while providing static scope. TeleScript <ref> [7] </ref> is a commercially available system that supports program mobility. Rus et. al. [11] describe an adaptive mobile application which does intelligent information gathering. They use a modified version of TCL called AgentTCL [6] as an agent language. AgentTCL does not, however, provide support for mobile distributed objects.
Reference: [8] <author> D. Johansen, R. van Renesse, and F. B.Schnieder. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proceedings of 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <month> Nov. </month> <year> 1994. </year> <note> http://www.cs.uit.no/DOS/Tacoma/tacoma.webpages. </note>
Reference-contexts: AgentTCL does not, however, provide support for mobile distributed objects. Our system combines both distributed objects and agent hopping while providing application level control over all policy decisions thus making it more flexible and efficient. Dag Johansen et. al. <ref> [8] </ref> describe a system called TACOMA which incorporates mobility and selective transmission of objects with mobile programs.
Reference: [9] <author> J.W.Stamos and D.K.Glifford. </author> <title> Implementing remote evaluation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(7) </volume> <pages> 710-722, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Process migration suffers from a few drawbacks when implemented in its full generality. For example, it is difficult to deal with IO file descriptors. Further, such systems have generally been geared towards homogeneous networks of workstations. Another motivation for mobility is remote evaluation <ref> [9] </ref>. Remote evaluation usually means only code transport and no state transport. The important issues here are guaranteeing the integrity of the server while the shipped function is being evaluated. Much of the design of Sumatra has been based on earlier systems which incorporated mobility into object systems.
Reference: [10] <author> L.B.Mummert, M.R.Ebling, and M.Satyanarayanan. </author> <title> Exploiting Weak Connectivity for Mobile File Access. </title> <booktitle> In Proceedings of the 15th. A.C.M Symposium on Operating Systems Principles, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Application-transparent or system level adaptation to wide variations in network bandwidth has been used successfully by the designers of the CODA file system <ref> [10] </ref> to improve the performance of applications. Sun has recently released an Object Serialization and Remote Method invocation API for Java [2, 1]. This allows objects to be serialized or flattened and shipped over the network and for methods to be invoked on remote objects.
Reference: [11] <author> D. Rus, R. Gray, and D. Kotz. </author> <title> Adaptive and autonomous agents. </title> <type> Technical report, </type> <year> 1996. </year> <note> http://www.cs.dartmouth.edu/ agent/papers.html. </note>
Reference-contexts: Emerald was designed for local area networks. Obliq is a distributed object system that provides facilities for object mobility and state mobility while providing static scope. TeleScript [7] is a commercially available system that supports program mobility. Rus et. al. <ref> [11] </ref> describe an adaptive mobile application which does intelligent information gathering. They use a modified version of TCL called AgentTCL [6] as an agent language. AgentTCL does not, however, provide support for mobile distributed objects.
Reference: [12] <author> J. M. Smith. </author> <title> A survey of process migration mechanisms. </title> <booktitle> In Operating Systems Review, </booktitle> <month> May </month> <year> 1988. </year> <month> 12 </month>
Reference-contexts: This is facilitated by the fact that mobility-based strategies can automatically determine and utilize suitable server locations. 7 Related work The notion of moving programs around to achieve better overall performance is a well studied topic <ref> [12] </ref>. Process migration has been used successfully for load balancing, failure recovery and improved resource utilization on networks of workstations. Process migration suffers from a few drawbacks when implemented in its full generality. For example, it is difficult to deal with IO file descriptors.
References-found: 12

