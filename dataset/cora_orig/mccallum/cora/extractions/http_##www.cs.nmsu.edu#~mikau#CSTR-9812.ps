URL: http://www.cs.nmsu.edu/~mikau/CSTR-9812.ps
Refering-URL: http://www.cs.nmsu.edu/~mikau/
Root-URL: http://www.cs.nmsu.edu
Title: allel execution of threads within the diagram. This approach to Visual Programming Language design has
Keyword: 3 Diagram collapsing algorithm  
Date: [7], [8].  
Note: see e.g. [3],[5],  
Pubnum: 1 VL98.doc  
Abstract: The diagram corresponds to the notion of procedure in common programming languages. An instance of a diagram is activated when all input values are delivered to its input ports and all output values produced during the previous call are consumed by the input ports of the connected nodes downstream. A diagram does not retain any data items from the previous calls on its data ow. The aim of the diagram collapsing algorithm is to transform a two-dimensional data ow diagram into a set of function definitions with a main function which represents the diagram execution result and a number of auxiliary functions. In general, a diagram may have several input ports and several output ports. The Sisal function also can return multiple values. Diagram collapsing algorithm is based on token propagation along the diagram paths. A token represents a symbolic value in a certain place of the diagram resulting from the execution of the preceding diagram nodes. Initially tokens are placed at the diagrams input ports and symbolic values associated with the tokens are formal parameter names. Well call a diagram with tokens associated with some node ports within it a configuration. The token propagation is complete when a token is associated with each output port. The symbolic value of this token yields the expression for the main function, i.e. the result of the diagram collapsing. Diagram collapsing is performed as a sequence of steps. A node in the diagram fires when all input ports of this node have tokens attached. As a result the input tokens are discarded and a resulting tokens are attached Abstract We suggest a method for compiling an arbitrary visual language V data ow diagrams with loops into a parallel functional language Sisal functions based on token propagation over the diagram and loop collapsing into a system of (mutually) recursive functions. This compilation algorithm preserves a concurrence potentially present in the data ow graph. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Auguston, A. Delgado, </author> <title> "Iterative Constructs in the Visual Data Flow Language", </title> <booktitle> in Proceedings of the 13th International Symposium on Visual Languages, </booktitle> <address> VL97, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1997, </year> <pages> pp. 152-159. </pages>
Reference-contexts: 1 Introduction The V visual data ow language <ref> [1] </ref> is an experiment with a visual representation of dependencies between data and processes and demonstrates how iterative control constructs could be visualized and adapted into a data-ow paradigm. <p> Since only a finite number of different token configurations is possible for the given diagram this loop collapsing process terminates after introducing a finite number of auxiliary functions. Example. A diagram that computes a factorial with an attempt to parallelize some threads <ref> [1] </ref>. The constant 1 value in the left lower corner is injected in the ow only once, at the beginning of the diagram execution. The initial configuration to start the diagram collapsing is the following.
Reference: [2] <author> M. Auguston, </author> <title> Programming language RIGAL as a compiler writing tool, </title> <journal> ACM SIGPLAN Notices, </journal> <month> December </month> <year> 1990, </year> <note> vol.25, #12, pp.61-69 </note>
Reference-contexts: The first version of a graphical editor and a simple interpreter supports only integer data type. The prototype core V to Sisal compiler was implemented using the Rigal <ref> [2] </ref> compiler writing language.
Reference: [3] <author> E. Baroth, C. Hartsough, </author> <title> "Visual Programming in the Real World", in Visual Object-Oriented Programming, Concepts and Environments (ed. </title> <editor> M. Burnett, A. Goldberg, T. Lewis), </editor> <booktitle> Manning 1995, </booktitle> <address> pp.21-42. </address>
Reference: [4] <author> R. Bird, P.Wadler, </author> <title> Introduction to Functional programming, </title> <publisher> Prentice Hall, </publisher> <address> NY, </address> <year> 1988. </year>
Reference-contexts: The value of the second synchronized aggregate is constructed from the value of the first aggregate. Example. Select all odd numbers from a vector. This diagram is an analog of the list comprehension operation in functional languages like Miranda <ref> [4] </ref>.
Reference: [5] <author> P.T. Cox, F.R. Gilles, T. Pietrzykowski, "Prograph", </author> <title> in Visual Object-Oriented Programming, Concepts and Environments (ed. </title> <editor> M. Burnett, A. Goldberg, T. Lewis), </editor> <booktitle> Manning 1995, </booktitle> <address> pp.45-66. </address>
Reference: [6] <author> J.-L.Gaudiot, W.Bohm, T. DeBoni, J.Feo, P.Miller, </author> <title> "The Sisal Model of Functional Programming and its Implementation", </title> <booktitle> in Proceedings of pAs97, Aizu-Wakamatsu, </booktitle> <address> Japan, </address> <month> March </month> <year> 1997. </year>
Reference-contexts: The V language allows combinations of iteration and recursion. Data ow languages are closely related to functional paradigm. The aim of this paper is to present the methods for mapping a two-dimensional data ow diagram into a Sisal <ref> [6] </ref>, [10], [11] parallel functional program. We have implemented a prototype compiler from V to Sisal.
Reference: [7] <author> Glaser H., Smedley T., </author> <title> "PSH - the next generation of command line interface", </title> <booktitle> in Proceedings of the 11th International Symposium on Visual Languages, </booktitle> <address> VL95, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1995, </year> <pages> pp. 29-36. </pages>
Reference: [8] <author> T. D. Kimura, </author> <title> "Object-Oriented Dataow", </title> <booktitle> in Proceedings of the 11th International Symposium on Visual Languages, </booktitle> <address> VL95, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1995, </year> <month> pp.180-186. </month>
Reference: [9] <author> J.Peterson, </author> <title> Petri net theory and the modeling of systems, </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: The fork node fires when its input port receives a value and all output values from the previous cycle are consumed by input ports downstream. To certain degree the fork notion may be considered as an analog of a transition in Petri net <ref> [9] </ref>. The merge node may present a nondeterministic F y F ( x, y) x behavior when more than one token arrives on the input. <p> The fairness property guarantees that each input value will be processed. This implies that the merge node maintains a queue no longer that the number of input ports. To certain degree the merge notion may be considered as an analog of a place in Petri net <ref> [9] </ref>. Since the target language (i.e. Sisal in our case) is a deterministic one, the choice of a token to propagate will eliminate the nondeterminism. In this sense the function resulting from the diagram collapsing will not be equivalent to the original diagram.
Reference: [10] <author> S.Skedzielewski, </author> <title> "Sisal", in Parallel Functional Languages and Compilers, </title> <editor> (ed. B.Szymanski), </editor> <publisher> Addison-Wesley, </publisher> <year> 1991, </year> <month> pp.105-158. </month>
Reference-contexts: The V language allows combinations of iteration and recursion. Data ow languages are closely related to functional paradigm. The aim of this paper is to present the methods for mapping a two-dimensional data ow diagram into a Sisal [6], <ref> [10] </ref>, [11] parallel functional program. We have implemented a prototype compiler from V to Sisal. <p> The Boolean Expression is evaluated and the ow of input values is switched either to the True or to the False side. Conditional node requires to collapse independently "True" and "False" paths and then to merge the results into a single if expression <ref> [10] </ref>. Well demonstrate it on the example of Maximum diagram. Note that not all output ports in conditional node may be used. After the propagation along the "True" path and reaching the output port of the diagram the token has a symbolic expression x attached to it.
Reference: [11] <author> S.Skedzielewski, J.Feo, P.Miller, S.Denton, </author> <title> "Sisal 90 Users Guide", </title> <month> June </month> <year> 1995, </year> <note> Draft 0.95 </note>
Reference-contexts: The V language allows combinations of iteration and recursion. Data ow languages are closely related to functional paradigm. The aim of this paper is to present the methods for mapping a two-dimensional data ow diagram into a Sisal [6], [10], <ref> [11] </ref> parallel functional program. We have implemented a prototype compiler from V to Sisal. <p> Although the Sisal target language has a number of iterative constructs for vector and matrix processing (loop expressions and array operations <ref> [11] </ref>) it appears that V iterative constructs are more general, and not all of them could be translated directly into Sisal loop expressions. We are much obliged to Daniel Cooke and Joe Pfe-iffer for their kind support and suggestions during this work.
References-found: 11

