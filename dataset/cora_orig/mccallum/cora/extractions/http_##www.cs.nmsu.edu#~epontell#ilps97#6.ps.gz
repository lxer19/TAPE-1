URL: http://www.cs.nmsu.edu/~epontell/ilps97/6.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/ilps97/programme.html
Root-URL: http://www.cs.nmsu.edu
Email: fFrederic.Goualard,Laurent.Granvilliersg@lifo.univ-orleans.fr  
Phone: Tel.: +33 2 38 41 72 95  
Title: An Extension of the WAM for Cooperative Interval Solvers  
Author: Frederic Goualard and Laurent Granvilliers 
Keyword: Constraint Logic Programming, CLP(Intervals) language, local consistency, cooperative solvers, WAM extension.  
Address: B.P. 6759, 45067 ORLEANS Cedex 2, France  
Affiliation: LIFO, Universite d'Orleans,  
Abstract: We present in this paper the implementation of DecLIC, a new CLP language achieving the cooperation of two different local consistencies, viz. hull-consistency [1] and box-consistency [3]. DecLIC is based on clp(fd) [8], a solver over Finite Domains compiling CLP programs into C via the Warren Abstract Machine (WAM) [15]. The extension of the WAM instruction set necessary to support DecLIC new features is described along with the new internal structures. A prototype has been implemented and is shown to be efficient on benchmarks from various domains. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. </author> <title> Benhamou. Interval Constraint Logic Programming. </title> <editor> In A. Podelski, editor, </editor> <booktitle> Constraint Programming: Basics and Trends, </booktitle> <volume> LNCS 10, </volume> <pages> pages 1-21. </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year> <booktitle> 16 Workshop on Parallelism and Implementation Technology </booktitle>
Reference-contexts: Preliminary Notions Due to lack of space, we will restrict ourselves in this section to the presentation of the notions we specifically need. Refer to <ref> [1, 2] </ref> for an introduction to the general framework. Let I denote the set of (closed/opened) floating-point intervals, viz. all the compact sets included in R whose lowest and greatest elements are floating-point numbers (referred in the following simply as intervals). <p> Informally, given a real constraint c (x 1 ; : : : ; x n ), a constraint solver aims at reducing the domains of x 1 ; : : : ; x n . This reduction process for c is described by Constraint Narrowing Operators <ref> [1] </ref> (CNO for short) which are contracting monotonic functions taking as input a box and returning a box from which have been discarded (some of) the elements which do not belong to ae c . <p> The key instruction is the application of any CNO N i on X, which enforces some consistency for the associated constraint c i . The main consistencies used in DecLIC are hull-consistency <ref> [1] </ref> and box-consistency [3], whose definitions are given below.
Reference: [2] <author> F. </author> <title> Benhamou. Heterogeneous Constraint Solving. </title> <booktitle> In Proceedings of the fifth International Conference on Algebraic and Logic Programming (ALP'96), </booktitle> <volume> LNCS 1139, </volume> <pages> pages 62-76, </pages> <address> Aachen, Germany, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Preliminary Notions Due to lack of space, we will restrict ourselves in this section to the presentation of the notions we specifically need. Refer to <ref> [1, 2] </ref> for an introduction to the general framework. Let I denote the set of (closed/opened) floating-point intervals, viz. all the compact sets included in R whose lowest and greatest elements are floating-point numbers (referred in the following simply as intervals). <p> As this "narrowing" cannot always be achieved perfectly when dealing with relations over reals, all the work is done over an approximate domain <ref> [2] </ref> of R (that is a subset of the power set of R with some properties |see op. cit.). For DecLIC, the approximate domain is I.
Reference: [3] <author> F. Benhamou, D. McAllester, and P. van Hentenryck. </author> <title> CLP(Intervals) Revisited. </title> <booktitle> In Proceedings of International Logic Programming Symposium (ILPS'94), </booktitle> <address> Ithaca, NY, USA, </address> <year> 1994. </year>
Reference-contexts: This last point is a major problem when one wants to inspect the constraint store for debugging or profiling purposes. 1 2 Workshop on Parallelism and Implementation Technology Benhamou et al. have introduced in <ref> [3] </ref> a new consistency notion, called box-consistency, which allows |along with Newton-related methods| to process efficiently complex constraints without decomposing them. They have implemented their method in a CLP language called Newton, showing thus that box-consistency outperforms most of the other existing techniques on some standard benchmarks. <p> Solving a constraint system relies on the computation of the greatest common fixed-point of all the CNO of the system by using the Narrowing Algorithm described in <ref> [3] </ref>. The key instruction is the application of any CNO N i on X, which enforces some consistency for the associated constraint c i . The main consistencies used in DecLIC are hull-consistency [1] and box-consistency [3], whose definitions are given below. <p> of all the CNO of the system by using the Narrowing Algorithm described in <ref> [3] </ref>. The key instruction is the application of any CNO N i on X, which enforces some consistency for the associated constraint c i . The main consistencies used in DecLIC are hull-consistency [1] and box-consistency [3], whose definitions are given below. <p> The drawbacks are that the introduction of new variables due to the decomposition process reduces drastically the ability of tightening 4 Workshop on Parallelism and Implementation Technology the domains of the variables the user is interested in. As pointed out in <ref> [3] </ref>, this is particularly true when the same variables appear more than once in the constraints. The definition of box-consistency is based on the notion of interval extension. <p> For an initial set of constraints, a set of CNO computing box-consistency for each projection of each constraint is generated, which defines a constraint system. The resulting constraint system is handled by the Narrowing Algorithm. As said in <ref> [3] </ref>, box-consistency is far more accurate than hull-consistency when dealing with complex constraints involving the same variables many times, as it does not decompose them, avoiding thus to lose some useful information. Nevertheless, 1 that is, intervals such that there does not exist any floating-point number between the bounds. <p> Implementation In the following, we will call D-constraints the constraints decomposed into primitives, and N-constraints those handled as a whole. 4.1. Operational model Solving systems of constraints in DecLIC is done using (a variation of) the Narrowing Algorithm Nar <ref> [3] </ref>. Our version of Nar works incrementally: it is called whenever a constraint is added to the store (that is, the set of all constraints stated so far).
Reference: [4] <author> Frederic Benhamou and Touraivane. </author> <title> Prolog IV: langage et algorithmes. </title> <booktitle> In JFPL'95: IVemes Journees Francophones de Programmation en Logique, </booktitle> <pages> pages 51-65, </pages> <address> Dijon, France, </address> <year> 1995. </year> <month> Teknea. </month>
Reference-contexts: 1. Introduction Since its introduction in 1987 by Cleary [6], Relational Interval Arithmetic has been used in many CLP languages such as Prolog IV <ref> [4] </ref>, clp (BNR) [11], Unicalc [12].
Reference: [5] <author> D. Bini and B. Mourrain. </author> <title> Handbook of Polynomial Systems. </title> <month> February </month> <year> 1997. </year>
Reference-contexts: The last problems are Bifurcation (test from numerical bifurcation) and Kinematics (robot kinematics problem), extracted from <ref> [5] </ref>. 6. Conclusion In this paper, we have shown that it was possible to implement an efficient solver over several domains by extending the WAM used in clp (fd) |a solver dealing only with integers| with few new instructions, and by modifying some of the internal structures.
Reference: [6] <author> J. G. Cleary. </author> <title> Logical Arithmetic. </title> <journal> Future Generation Computing Systems, </journal> <volume> 2(2) </volume> <pages> 125-149, </pages> <year> 1987. </year>
Reference-contexts: 1. Introduction Since its introduction in 1987 by Cleary <ref> [6] </ref>, Relational Interval Arithmetic has been used in many CLP languages such as Prolog IV [4], clp (BNR) [11], Unicalc [12]. <p> These solvers handle complex constraints by decomposing each of them into conjunctions of "primitives" (e.g. `x + y = z', `x fi y = z',: : : ) as exposed in <ref> [6] </ref>, and then enforcing some consistency over all the resulting constraints through domain propagation. The drawbacks of such a method are by now well known: introduction of new fresh variables induced by the decomposition leads to a loss of reduction of the variable domains the user is interested in. <p> Hull-consistency is enforced over complex constraints by decomposing them into conjunctions of "primitives". The solver then uses Relational Interval Arithmetic <ref> [6] </ref> to enforce hull-consistency over each primitive (the overall consistency is obtained by domain propagation). The main advantage of such an approach is that computation of hull-consistency can be implemented very efficiently for the set of primitives the solver supports. <p> For example, we have: 'x*y=z'(X,Y,Z):- Y in z_div_x (Z,X), where z div y (resp. z div x and x mul y) is a C function computing the interval resulting from the quotient of the domain of Z by the domain of Y (resp. Z/X and X*Y). Refer to <ref> [6] </ref> for an example of algorithm computing the CNO of x*y=z.
Reference: [7] <author> Ph. Codognet and D. Diaz. wamcc: </author> <title> Compiling Prolog to C. </title> <booktitle> In International Conference on Logic Programming (ICLP'95), </booktitle> <pages> pages 317-331, </pages> <year> 1995. </year>
Reference-contexts: One of the main achievement of clp (fd) was the extension of the Warren Abstract Machine (WAM) [15] in order to design a compiler translating Prolog-like programs describing problems to be solved over Finite Domains into C code. We have modified and extended the WAM instruction set described in <ref> [7, 8] </ref> to take into account the new possibilities offered by DecLIC. The resulting system is a compiler/interpreter able to solve efficiently constraint systems over integers, booleans and reals.
Reference: [8] <author> Ph. Codognet and D. Diaz. </author> <title> Compiling Constraints in clp(fd). </title> <journal> Journal of Logic Programming, </journal> <volume> 27(3) </volume> <pages> 185-226, </pages> <year> 1996. </year>
Reference-contexts: We thus benefit from the effectiveness of both methods, each one handling efficiently the constraints the other does not. DecLIC has been implemented with clp (fd) <ref> [8] </ref> as a starting-point. One of the main achievement of clp (fd) was the extension of the Warren Abstract Machine (WAM) [15] in order to design a compiler translating Prolog-like programs describing problems to be solved over Finite Domains into C code. <p> One of the main achievement of clp (fd) was the extension of the Warren Abstract Machine (WAM) [15] in order to design a compiler translating Prolog-like programs describing problems to be solved over Finite Domains into C code. We have modified and extended the WAM instruction set described in <ref> [7, 8] </ref> to take into account the new possibilities offered by DecLIC. The resulting system is a compiler/interpreter able to solve efficiently constraint systems over integers, booleans and reals. <p> Moreover, note that this must be done for every variable appearing in the constraint. It then appears that box-consistency is not the solution of choice when a complex constraint involves many different variables. 3. An overview of DecLIC DecLIC reuses all the Prolog features of clp (fd) <ref> [8] </ref> (interpreter and compiler from Prolog to C via the WAM) and has been implemented with compatibility in mind, such that all clp (fd) programs may be compiled by DecLIC with few or no modification at all. DecLIC is able to solve problems merging boolean, integer and real constraints. <p> This is a heuristic supported by experimental evidences. 4.2. Data structures We describe in this section the internal structures used by DecLIC to handle constraints. They are mainly the same as in clp (fd) <ref> [8] </ref>: a frame for each variable appearing in a constraint, a frame for each constraint, and a frame collecting all the arguments appearing in constraints for some clause. 4.2.1. Argument frame An argument frame (see figure 2) is created for each clause where at least one constraint appears in. <p> X in r compilation As said above, every primitive constraint supported by DecLIC is defined in terms of the constraint X in r. Unlike clp (fd), the use of indexicals 3 <ref> [8] </ref> is mainly restricted to dom () |which relates to compact domains only. This is due to the fact that, when dealing with floats, it is not safe to compute domains by reasoning over bounds; the only safe way is to compute domains with intervals.
Reference: [9] <author> IEEE. </author> <title> IEEE Standard for Binary Floating-Point Arithmetic. </title> <type> Technical Report IEEE Std 754-1985, </type> <year> 1985. </year> <month> Reaffirmed </month> <year> 1990. </year>
Reference-contexts: As in clp (fd), a variable frame is divided into three parts: 1. a part devoted to propagation (done by queuing range-modified variables); 2. a part containing range informations: the left and right bounds (coded as IEEE <ref> [9] </ref> doubles) of the variable domain, and an information word coding for the form of the left and right brackets along with the type of the variable (i.e. i-variable or fd-variable).
Reference: [10] <author> O. Lhomme. </author> <title> Contribution a la resolution de contraintes sur les reels par propagation d'intervalles. </title> <type> PhD thesis, </type> <institution> University of Nice-Sophia Antipolis, </institution> <month> july </month> <year> 1994. </year>
Reference-contexts: Workshop on Parallelism and Implementation Technology 15 box (w)-consistency. Yoshigahara is a puzzle extracted from [13] with integer as well as real solutions, where only integer ones are desired. Pentagon (coordinates of a regular pentagon), extracted from <ref> [10] </ref>, involves non-linear constraints approximated by box (w)-consistency and inequality constraints approximated by hull-consistency, and points out the efficiency of both methods in this case. The other problems are handled by interval Newton methods, enforcing box (w)-consistency on each constraint.
Reference: [11] <author> W. Older and A. Vellino. </author> <title> Constraint Arithmetic on Real Intervals. </title> <editor> In F. Ben-hamou and A. Colmerauer, editors, </editor> <booktitle> Constraint Logic Programming: Selected Papers. </booktitle> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: 1. Introduction Since its introduction in 1987 by Cleary [6], Relational Interval Arithmetic has been used in many CLP languages such as Prolog IV [4], clp (BNR) <ref> [11] </ref>, Unicalc [12]. These solvers handle complex constraints by decomposing each of them into conjunctions of "primitives" (e.g. `x + y = z', `x fi y = z',: : : ) as exposed in [6], and then enforcing some consistency over all the resulting constraints through domain propagation.
Reference: [12] <author> A. Semenov and A. Leshchenko. </author> <title> Interval and Symbolic Computations in the Unicalc Solver. </title> <booktitle> In Proceedings of INTERVAL'94, </booktitle> <pages> pages 206-208, </pages> <address> St-Petersburg, Russia, </address> <year> 1994. </year>
Reference-contexts: 1. Introduction Since its introduction in 1987 by Cleary [6], Relational Interval Arithmetic has been used in many CLP languages such as Prolog IV [4], clp (BNR) [11], Unicalc <ref> [12] </ref>. These solvers handle complex constraints by decomposing each of them into conjunctions of "primitives" (e.g. `x + y = z', `x fi y = z',: : : ) as exposed in [6], and then enforcing some consistency over all the resulting constraints through domain propagation.
Reference: [13] <author> D. Singmaster. </author> <title> Quelques divertissements numeriques. </title> <journal> La Recherche, </journal> (278):822-823, Juillet/Ao^ut 1995. 
Reference-contexts: Workshop on Parallelism and Implementation Technology 15 box (w)-consistency. Yoshigahara is a puzzle extracted from <ref> [13] </ref> with integer as well as real solutions, where only integer ones are desired. Pentagon (coordinates of a regular pentagon), extracted from [10], involves non-linear constraints approximated by box (w)-consistency and inequality constraints approximated by hull-consistency, and points out the efficiency of both methods in this case.
Reference: [14] <author> Pascal Van Hentenryck, Laurent Michel, and Frederic Benhamou. </author> <title> Newton - Constraint Programming over non-linear Constraints. </title> <booktitle> Science of Programming, </booktitle> <year> 1997. </year> <month> Forthcoming. </month>
Reference-contexts: ; : : : ; a n 2 I n ) f (a 1 ; : : : ; a n ) 2 F (I 1 ; : : : ; I n ) In this paper, we use a particular kind of interval extension, called natural interval extension in <ref> [14] </ref>, defined as follows: given f : R n ! R, its natural interval extension F is obtained from f by replacing in the expression of f each constant a by Hull (a), each operation by its corresponding interval operation and each variable by an interval variable. <p> However DecLIC does not implement any conditioning operator | which is pointed out as a possible improvement in the conclusion | then it does not solve very efficiently a problem like Combustion (combustion problem for a temperature of 3000 degrees) <ref> [14] </ref>. The last problems are Bifurcation (test from numerical bifurcation) and Kinematics (robot kinematics problem), extracted from [5]. 6.
Reference: [15] <author> D. H. D. Warren. </author> <title> An abstract Prolog Instruction Set. </title> <type> Technical Report 309, </type> <institution> SRI International, </institution> <month> october </month> <year> 1983. </year>
Reference-contexts: We thus benefit from the effectiveness of both methods, each one handling efficiently the constraints the other does not. DecLIC has been implemented with clp (fd) [8] as a starting-point. One of the main achievement of clp (fd) was the extension of the Warren Abstract Machine (WAM) <ref> [15] </ref> in order to design a compiler translating Prolog-like programs describing problems to be solved over Finite Domains into C code. We have modified and extended the WAM instruction set described in [7, 8] to take into account the new possibilities offered by DecLIC.
References-found: 15

