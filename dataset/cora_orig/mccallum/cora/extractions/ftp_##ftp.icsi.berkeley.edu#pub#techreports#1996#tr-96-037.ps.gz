URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1996/tr-96-037.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1996.html
Root-URL: http://www.icsi.berkeley.edu
Title: An Analysis of the Divergence of Two Sather Dialects  
Phone: (510) 643-9153 FAX (510) 643-7684  
Author: David Stoutamire, Wolf Zimmermann, and Martin Trapp 
Date: August 1996  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  
Pubnum: TR-96-037  
Abstract: Sather is an object oriented language designed to be simple, efficient, safe, and nonproprietary. It was originally envisioned as a "cleaned-up" version of Eiffel, addressing perceived failures in simplicity and efficiency. The first public implementation (Sather 0) was first released to the public by ICSI in 1991. Shortly after, a compiler group at the University of Karlsruhe created the first native code compiler. A major effort then began to redesign the language to correct shortcomings in Sather 0 and to make Sather suitable for general-purpose, large scale programming. In part because each compiler group was building a compiler for a moving design target, the two parallel efforts resulted in two dialects, Sather 1 and Sather K. This report analyzes the essential causes of the differences, which result from differences in each group's goals. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Goos, Sather-K, </author> <title> The Language, </title> <institution> TR-95-8, University of Karlsruhe, Falkulty of Infor-matics, </institution> <year> 1995. </year>
Reference: [2] <author> G. Goos, </author> <title> Vorlesungen uber Informatik II, </title> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: One wants to be able to expose language constructs in a clean order, without forward references in the language to concepts students are not prepared for. The language is used in undergraduate as well as graduate courses. It is used for teaching both imperative and object-oriented programming <ref> [2] </ref>. Choice: Some SK constructs differ from S1. For example, break ! in S1 is break in SK, which avoids explaining about iterator notation when loops are first introduced.
Reference: [3] <author> S. Murer, S. Omohundro, D. Stoutamire, C. Szyperski, </author> <title> "Iteration abstraction in Sather", </title> <journal> Transactions on Programming Languages and Systems, </journal> <volume> Vol. 18, No. 1, </volume> <pages> p. 1-15, </pages> <year> 1996. </year>
Reference-contexts: This compiler was used in undergraduate programming courses. After Sather 0, ICSI began a major effort to redesign the language to make Sather suitable for general-purpose, large scale programming outside of the language community. Sather 1 greatly expanded the language, introducing bound routines, iterator abstraction <ref> [3] </ref>, proper separation of typing and code inclusion, contravariant typing, strongly typed parameterization [7], exceptions, stronger optional runtime checks and a new library design. The first Sather 1 compiler was released by ICSI in 1994. The Karlsruhe group also extended the language. <p> Inside the square brackets the sizes of the single dimensions are given. These are required in type constructors, elsewhere they can be given as '*'. For the type, only ROW [] distinguishes the value of those constants. E.g. ROW <ref> [3 ] </ref> and ROW [4 ] are different types, while ARR [3 ] and ARR [4 ] are equal types. 8 Iterators/Streams Where S1 has iterators, SK has streams. In both languages these can be bound like routines and are then called iterator closures or bound streams respectively. <p> These are required in type constructors, elsewhere they can be given as '*'. For the type, only ROW [] distinguishes the value of those constants. E.g. ROW <ref> [3 ] </ref> and ROW [4 ] are different types, while ARR [3 ] and ARR [4 ] are equal types. 8 Iterators/Streams Where S1 has iterators, SK has streams. In both languages these can be bound like routines and are then called iterator closures or bound streams respectively. Besides direct stream calls SK has stream objects, too.
Reference: [4] <author> S. Omohundro, </author> <title> The Sather Language, </title> <booktitle> International Computer Science Institute, </booktitle> <year> 1991. </year>
Reference-contexts: Inside the square brackets the sizes of the single dimensions are given. These are required in type constructors, elsewhere they can be given as '*'. For the type, only ROW [] distinguishes the value of those constants. E.g. ROW [3 ] and ROW <ref> [4 ] </ref> are different types, while ARR [3 ] and ARR [4 ] are equal types. 8 Iterators/Streams Where S1 has iterators, SK has streams. In both languages these can be bound like routines and are then called iterator closures or bound streams respectively. <p> These are required in type constructors, elsewhere they can be given as '*'. For the type, only ROW [] distinguishes the value of those constants. E.g. ROW [3 ] and ROW <ref> [4 ] </ref> are different types, while ARR [3 ] and ARR [4 ] are equal types. 8 Iterators/Streams Where S1 has iterators, SK has streams. In both languages these can be bound like routines and are then called iterator closures or bound streams respectively. Besides direct stream calls SK has stream objects, too. The former behaves like S1 iterators.
Reference: [5] <author> S. Omohundro and C. Lim, </author> <title> The Sather Language and Libraries, </title> <booktitle> TR-92-017, International Computer Science Institute, </booktitle> <year> 1992. </year>
Reference: [6] <author> D. Stoutamire and S. Omohundro, </author> <title> The Sather 1.1 Specification, </title> <booktitle> TR-96-012, International Computer Science Institute, </booktitle> <year> 1995. </year>
Reference: [7] <author> C. Szyperski, S. Omohundro, S. Murer. </author> <title> "Engineering a programming language: The type and class system of Sather", </title> <editor> In Jurg Gutknecht, ed., </editor> <booktitle> Programming Languages and System Architectures, p. </booktitle> <pages> 208-227. </pages> <publisher> Springer Verlag, Lecture Notes in Computer Science 782, </publisher> <year> 1993. </year>
Reference-contexts: Sather 1 greatly expanded the language, introducing bound routines, iterator abstraction [3], proper separation of typing and code inclusion, contravariant typing, strongly typed parameterization <ref> [7] </ref>, exceptions, stronger optional runtime checks and a new library design. The first Sather 1 compiler was released by ICSI in 1994. The Karlsruhe group also extended the language.
References-found: 7

