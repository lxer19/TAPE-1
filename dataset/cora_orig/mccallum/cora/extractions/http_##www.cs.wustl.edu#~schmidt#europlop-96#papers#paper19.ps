URL: http://www.cs.wustl.edu/~schmidt/europlop-96/papers/paper19.ps
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-96/ww2-papers.html
Root-URL: 
Email: Email: -cschryst, george-@turing.cs.ucy.ac.cy  
Title: Multimedia Data Exchange Agent an Object Behavioral Pattern for Multimedia Programming  
Author: Chrystalla C. Alexandrou and George A. Papadopoulos 
Keyword: Name Multimedia Data Exchange Agent.  
Note: components that are decoupled.  
Address: 75 Kallipoleos Str., P.O. Box 537 CY-1678 Nicosia, Cyprus  
Affiliation: Multimedia Research and Development Lab (MRDL Department of Computer Science University of Cyprus  
Abstract: This paper describes the Multimedia Data Exchange (MDE) Agent Pattern, which itself describes the decoupling of the communication mechanisms from the actual implementation of two multimedia components. The general model of Producer (Source), Filter, Consumer (Sink) that is used for the modeling of temporal media types as components is enhanced by this decoupling. The components must have the ability to connect to each other. This connection could be modeled as a simple relationship between the two components but this solution would require that the implementation of this relationship is the responsibility of either or both of the components and would also be visible by the application. This pattern proposes the separation and isolation of the implementation of this relationship into a different class and also proposes customization via a hierarchy that will produce different in usage and characteristics MDE Agents. Indent: Represents a directed channel connecting two directed ports of (multi)media 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides, </author> <title> Design Patterns Elements of Reusable ObjectOriented Software . Addison-Wesley, </title> <booktitle> 1994. </booktitle> <pages> 12 </pages>
Reference-contexts: MDE Agents connect two components that speak the same language (communication protocol). In the case that there is incompatibility, the designer has to use an adapter pattern <ref> [1] </ref> to create compatible interface. 5. The creation of the communication channel as a separate part at runtime generates the risk of inability to create a communication channel due to the lack of resources since creating separate entities is more resource demanding.
Reference: [2] <author> Lavender, Schmidt. </author> <title> Active Object an Object Behavioral Pattern for Concurrent Programming. </title> <booktitle> In proceedings of PLOP 1995. </booktitle>
Reference-contexts: The allocation of the buffer is better to be done in the constructor of the BufferMDE Agent. 6. The MDE Agents are active objects. For the creation of the base mechanism of the MDE Agent we suggest the use of the Active Object <ref> [2] </ref>, an Object Behavioral Pattern for Concurrent Programming created by R. Greg Lavender and Douglas C. Schmidt. 10 Sample code The following C++ code shows the definition of the MDE Agent.
Reference: [3] <author> Simon J Gibbs, Dionyssios C. Tsichritzis. </author> <title> Multimedia Programming Objects, Environments and Frameworks . Addison-Wesley, </title> <year> 1994. </year>
Reference-contexts: Known Uses The whole development of the MDE Agent pattern was inspired from the Gibbs and Tsichritzis model <ref> [3] </ref> where the MDE Agents are defined as Connectors. 11 Related Patterns Mediator is a similar pattern. The main difference is that Mediator deals with passive objects. The MDE Agent is an active object with the Connect method to create a separate thread of control.
References-found: 3

