URL: http://www.icsi.berkeley.edu/~bilmes/pfpvm-spec.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/~bilmes/
Root-URL: http://www.icsi.berkeley.edu
Email: &lt;bilmes@icsi.berkeley.edu&gt;  
Title: The pSather Fat Parallel Virtual Machine (PFPVM) Interface Evolving Draft Document 1 Revision  
Author: Jeff Bilmes 
Note: Implementation details are not described herein.  
Address: 1947 Center St. Berkeley CA, 94704  
Affiliation: International Computer Science Institute  
Date: October 4, 1994  
Pubnum: 1:15  
Abstract: A critical part of the plan for portable pSather is the definition of a run-time interface that can be efficiently implemented on the wide range of platforms targeted by the project. This document describes in detail the runtime interface assumed to exist by the pSather compiler. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Steve Omohundro, </author> <title> The Sather 1.0 Language Specification http://www.icsi.berkeley.edu/Sather/ps/manual.ps </title>
Reference-contexts: Particular implementation details are not described herein, yet language semantics, where appropriate, are included. It is assumed that the reader is familiar with Sather and pSather. For semantic descriptions of these languages, see the Sather <ref> [1] </ref> and pSather [2] language specifications. We choose the fat C approach: the runtime's parallel functionality is implemented in C on the native machine (thus, fat). We found this approach to have several advantages. 1. It is more efficient. * Compilers of today are poor relative to hand optimized code.
Reference: [2] <author> David Stoutamire, </author> <title> The pSather Language Specification http://www.icsi.berkeley.edu/Sather/ps/psather.ps 12 </title>
Reference-contexts: Particular implementation details are not described herein, yet language semantics, where appropriate, are included. It is assumed that the reader is familiar with Sather and pSather. For semantic descriptions of these languages, see the Sather [1] and pSather <ref> [2] </ref> language specifications. We choose the fat C approach: the runtime's parallel functionality is implemented in C on the native machine (thus, fat). We found this approach to have several advantages. 1. It is more efficient. * Compilers of today are poor relative to hand optimized code.
References-found: 2

