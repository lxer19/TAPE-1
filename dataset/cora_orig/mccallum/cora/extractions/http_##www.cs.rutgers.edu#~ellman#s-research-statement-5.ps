URL: http://www.cs.rutgers.edu/~ellman/s-research-statement-5.ps
Refering-URL: http://www.cs.rutgers.edu/~ellman/index.html
Root-URL: http://www.cs.rutgers.edu
Title: Problem Formulation, Program Synthesis and Program Transformation Techniques for Simulation, Optimization and Constraint Satisfaction (Research Statement)  
Author: Thomas Ellman 
Affiliation: Department of Computer Science Rutgers University  
Abstract-found: 0
Intro-found: 1
Reference: [ Bernus et al., 1996 ] <author> P. Bernus, L. Nemes, and T. Williams. </author> <title> Architectures for Enterprise Integration. </title> <publisher> Chapman and Hall, </publisher> <address> New York, New York, </address> <year> 1996. </year>
Reference-contexts: this work, I will apply and extend the techniques described in [ Ellman, 1993a ] and [ Ellman, 1993b ] to the problem of extracting and formulating descriptions of planning, resource allocation and scheduling problems, from models of manufacturing or business processes, i.e., enterprise models of the sort described in <ref> [ Bernus et al., 1996 ] </ref> .
Reference: [ Bitz and Zabusky, 1990 ] <author> F. Bitz and N. Zabusky. David and visiometrics: </author> <title> Visualizing, diagnosing and quantifying evolving amorphous objects. </title> <booktitle> Computers in Physics, </booktitle> <pages> pages 603-613, </pages> <year> 1990. </year>
Reference-contexts: I expect this work to use imagistic reasoning techniques of the sort described in [ Yip and Zhao, 1996 ] as well as visiometric and visualization techniques like the ones described in <ref> [ Bitz and Zabusky, 1990 ] </ref> . I expect the systems resulting from this research to dramatically improve the productivity of 3 computational scientists and engineers, freeing them from concern with the details of conventional programming and enabling them to focus on the concerns of their problem domains.
Reference: [ Cramer et al., 1994 ] <author> E. Cramer, J. Dennis, P. Frank, R. Lewis, and G. Shubin. </author> <title> Problem formulation for multidisciplinary optimization. </title> <journal> SIAM Journal of Optimization, </journal> <volume> 4(4), </volume> <year> 1994. </year>
Reference-contexts: The resulting tools will allow a user to easily construct and experimentally investigate programs that embody various different methods for maintaining or relaxing discipline feasibility constraints during an optimization process, as described in <ref> [ Cramer et al., 1994 ] </ref> .
Reference: [ Ellman and Murata, 1998 ] <author> T. Ellman and T. Murata. </author> <title> Deductive synthesis of numerical simulation programs from networks of algebraic and ordinary differential equations. </title> <journal> Automated Software Engineering, </journal> <volume> 5(3), </volume> <year> 1998. </year>
Reference-contexts: Simulators for such systems can often be constructed from combinations of 1 integration and root-extraction routines. In one body of work <ref> [ Ellman and Murata, 1998 ] </ref> , a stu-dent and I extended the technology of deductive program synthesis to handle problems of this type. Deductive synthesis operates by proving that for every input there exists an output satisfying the specification. <p> I expect that both of these efforts will provide an opportunity and need to extend the program synthesis techniques described in <ref> [ Ellman and Murata, 1998 ] </ref> in order to construct the specialized simulators, optimizers, constraint solvers and interfaces to legacy codes that are needed for each new problem formulation.
Reference: [ Ellman et al., 1997 ] <author> T. Ellman, J. Keane, M. Schwabacher, and K. Yao. </author> <title> Multi-level modeling for engineering design optimization. </title> <booktitle> Artificial Intelligence for Engineering Design, Analysis, and Manufacturing, </booktitle> <volume> 11(5), </volume> <year> 1997. </year>
Reference-contexts: Design engineers may nevertheless obtain reliable results on such problems by carefully formulating search spaces, objective functions and constraints. Unfortunately, current software tools provide little support for the formulation process. In a second body of work [ Ellman et al., 1998 ] , <ref> [ Ellman et al., 1997 ] </ref> , my students and I adapted the technology of transformational programming to address this problem. In particular, we developed an interactive environment that supports formulation, testing and reformulation of design optimization strategies.
Reference: [ Ellman et al., 1998 ] <author> T. Ellman, J. Keane, A. Banerjee, and G. Armhold. </author> <title> A transformation system for interactive reformulation of design optimization strategies. Fully accepted to Research in Engineering Design, </title> <year> 1998. </year>
Reference-contexts: Design engineers may nevertheless obtain reliable results on such problems by carefully formulating search spaces, objective functions and constraints. Unfortunately, current software tools provide little support for the formulation process. In a second body of work <ref> [ Ellman et al., 1998 ] </ref> , [ Ellman et al., 1997 ] , my students and I adapted the technology of transformational programming to address this problem. In particular, we developed an interactive environment that supports formulation, testing and reformulation of design optimization strategies. <p> In one portion of this work, I will apply and extend the techniques described in <ref> [ Ellman et al., 1998 ] </ref> to the problem of synthesizing problem-specific architectures for multidisciplinary design optimization.
Reference: [ Ellman, 1993a ] <author> T. </author> <title> Ellman. Abstraction via approximate symmetry. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: In the presence of global constraints, backtracking search operates like generate and test. Better performance can often be attained by formulating such problems in terms of an ab 2 straction hierarchy of solution variables and problem constraints. In a fourth body of work <ref> [ Ellman, 1993a ] </ref> , [ Ellman, 1993b ] , I developed program synthesis techniques that automatically construct such abstraction hierarchies and hierarchic problem-solving programs. The synthesis techniques take declarative representations of CSPs as inputs. <p> In another portion of this work, I will apply and extend the techniques described in <ref> [ Ellman, 1993a ] </ref> and [ Ellman, 1993b ] to the problem of extracting and formulating descriptions of planning, resource allocation and scheduling problems, from models of manufacturing or business processes, i.e., enterprise models of the sort described in [ Bernus et al., 1996 ] .
Reference: [ Ellman, 1993b ] <author> T. </author> <title> Ellman. Synthesis of abstraction hierarchies for constraint satisfaction by clustering approximately equivalent objects. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning, </booktitle> <address> Amherst, MA, </address> <year> 1993. </year>
Reference-contexts: In the presence of global constraints, backtracking search operates like generate and test. Better performance can often be attained by formulating such problems in terms of an ab 2 straction hierarchy of solution variables and problem constraints. In a fourth body of work [ Ellman, 1993a ] , <ref> [ Ellman, 1993b ] </ref> , I developed program synthesis techniques that automatically construct such abstraction hierarchies and hierarchic problem-solving programs. The synthesis techniques take declarative representations of CSPs as inputs. <p> In another portion of this work, I will apply and extend the techniques described in [ Ellman, 1993a ] and <ref> [ Ellman, 1993b ] </ref> to the problem of extracting and formulating descriptions of planning, resource allocation and scheduling problems, from models of manufacturing or business processes, i.e., enterprise models of the sort described in [ Bernus et al., 1996 ] .
Reference: [ Keane and Ellman, 1996 ] <author> J. Keane and T. </author> <title> Ellman. Knowledge-based re-engineering of legacy programs for robustness in automated design. </title> <booktitle> In Proceedings of the Eleventh Knowledge-Based Software Engineering Conference, </booktitle> <address> Syracuse, NY, </address> <year> 1996. </year>
Reference-contexts: Another part of the system is a catalog of transformations for converting one strategy into another, and a mechanism for keeping track of strategy derivations and computational experiments. Our system also includes a facility for integrating legacy codes into an automated design optimization system <ref> [ Keane and Ellman, 1996 ] </ref> . The legacy code manager automatically constructs interfaces and dynamically manages the flow of data and control in the presence of legacy code errors.
Reference: [ Schwabacher et al., 1998 ] <author> M. Schwabacher, T. Ellman, and H. Hirsh. </author> <title> Learning to set up numerical optimizations of engineering designs. </title> <booktitle> Artificial Intelligence for Engineering Design, Analysis, and Manufacturing, </booktitle> <volume> 12(2), </volume> <year> 1998. </year>
Reference-contexts: Finally, the system includes a facility for using machine learning techniques to construct rules that guide a user in selecting the best optimization strategy for a given problem instance <ref> [ Schwabacher et al., 1998 ] </ref> . We demonstrated the capabilities of our system by using it to construct and test a variety of strategies for optimizing sailing yacht and jet-engine nozzle designs.
Reference: [ Yip and Zhao, 1996 ] <author> K. Yip and F. Zhao. </author> <title> Spatial aggregation: </title> <journal> Theory and applications. Journal of Artificial Intelligence Research, </journal> <volume> 5, </volume> <year> 1996. </year> <month> 4 </month>
Reference-contexts: Yet another line of investigation will develop specialized techniques for analyzing and visually displaying the results of computational experiments in order to help users to recognize and diagnose problems in programs under development. I expect this work to use imagistic reasoning techniques of the sort described in <ref> [ Yip and Zhao, 1996 ] </ref> as well as visiometric and visualization techniques like the ones described in [ Bitz and Zabusky, 1990 ] .
References-found: 11

