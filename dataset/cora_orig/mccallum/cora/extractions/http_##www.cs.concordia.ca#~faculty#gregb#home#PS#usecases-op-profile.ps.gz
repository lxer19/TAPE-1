URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/usecases-op-profile.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Email: gregb@cs.concordia.ca  khendek@ece.concordia.ca  
Phone: Tel: +1-514-848-3000  Tel: +1-514-848-3100  
Title: Reconciling Use Cases and Operational Profiles  
Author: Greg Butler Adrian Cretu Ferhat Khendek 
Keyword: use case, operational profile, requirements engineering, reliability  
Address: Montreal H3G 1M8 Canada  Montreal H3G 1M8 Canada  Montreal H3G 1M8 Canada  
Affiliation: Dept of Computer Science Concordia University  Dept of Elec. Computer Eng. Concordia University  Dept of Elec. Computer Eng. Concordia University  
Abstract: A reconciliation of use cases and operational profiles is presented as a means for requirements engineering, prioritizing development and testing, and allowing statistical use testing and reliability estimation. We have trialed the combined application of use cases and operational profiles in an industrial setting. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert V. Binder, </author> <title> The FREE approach to testing object-oriented software: An overview, </title> <month> April </month> <year> 1996. </year> <note> http://www.rbsc.com/pages/FREE.html </note>
Reference-contexts: Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases <ref> [1] </ref>. Use cases and their scenarios allow verification of software architecture, design, and implementation [3, 8, 9]. 3 UNDERLYING FORMAL MODEL The formal model underlying use cases and scenarios is a collection of sequences of events [2].
Reference: [2] <author> G. Butler, P. Grogono, F. Khendek, </author> <title> A Z specification of use cases: A preliminary report, </title> <booktitle> Proceedings of Asia-Pacific Software Engineering Conference and International Computer Science Conference, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1997, </year> <pages> pages 505-506. </pages>
Reference-contexts: Use cases lead to test cases [1]. Use cases and their scenarios allow verification of software architecture, design, and implementation [3, 8, 9]. 3 UNDERLYING FORMAL MODEL The formal model underlying use cases and scenarios is a collection of sequences of events <ref> [2] </ref>. We use the general term message flow to denote one sequence of events associated with a scenario. There are several special kinds of flow, namely black-box message-flow, message-action flow, white-box message-flow, and execution flow, that we need to define.
Reference: [3] <editor> John Carroll (editor), </editor> <title> Scenario-Based Design, </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: Scenarios themselves are very popular within the field of requirements engineering [13, 16] and design <ref> [3] </ref>. The methodologies identify the system operations, and can transition from system requirements to subsystem specification once a system architecture is chosen. A requirements use case is a use case that describes a complete user task or activity. <p> Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1]. Use cases and their scenarios allow verification of software architecture, design, and implementation <ref> [3, 8, 9] </ref>. 3 UNDERLYING FORMAL MODEL The formal model underlying use cases and scenarios is a collection of sequences of events [2]. We use the general term message flow to denote one sequence of events associated with a scenario.
Reference: [4] <author> Alistair Cockburn, </author> <title> Goals and use cases, </title> <journal> JOOP Vol. </journal> <volume> 10, No. </volume> <month> 5 (September </month> <year> 1997). </year>
Reference-contexts: We end with a discussion of how use cases are applied throughout the software life-cycle. There are many viewpoints of use cases in the literature. Our viewpoint is drawn mainly from Cockburn <ref> [4] </ref> and Regnell [14]. Host System Environment Use cases capture the functionality of a system, called the target system, as it is meant to behave in a given environment called the host system. <p> The dialogues are cohesive in the sense that they are related to the same task, or form part of the same transaction. Cohesiveness is often determined by having a goal in common for the tasks, or by having a common respon sibility that must be fulfilled <ref> [4, 8] </ref>. where individual use cases are indicated, as are the actors involved in each use case. This is still a black-box view of the target system. Use Case # 1: Make a Call Primary Actor: Subscriber Secondary Actor: Callee, Operator Goal: To connect to Callee and talk.
Reference: [5] <author> Alistair Cockburn, </author> <title> Using goal-based use cases, </title> <journal> JOOP Vol. </journal> <volume> 10, No. </volume> <month> 7 (November/December </month> <year> 1997). </year>
Reference-contexts: Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective [8, 13, 16]. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress <ref> [5] </ref>. Use cases lead to test cases [1]. Use cases and their scenarios allow verification of software architecture, design, and implementation [3, 8, 9]. 3 UNDERLYING FORMAL MODEL The formal model underlying use cases and scenarios is a collection of sequences of events [2].
Reference: [6] <author> Adrian Cretu, </author> <title> Use Case Software Development and Testing Using Operational Profiles, </title> <institution> Master of Engineering Project Report,Concordia University, </institution> <year> 1997. </year>
Reference-contexts: The reconciliation shows how the use case model for a system can include an operational profile, thus capturing both functional specification and a quantitative usage specification. We have trialed the combined application of use cases and operational profiles in an industrial setting <ref> [6] </ref> from mobile telephony. Figure 1 gives the overall context showing the Home Location Register (HLR), which is a database of subscriber information, and the Visitor Location Register (VLR), which is the local database of information on subscribers utilizing this cell or region. <p> The work of Wohlin and Runeson [17] is just such an experiment: they calculate a reliability estimate for the target system from reliability estimates of the subsystems with an incremental amount of system testing. This situation arose in Ex2 <ref> [6] </ref> where at the system level, so called network use cases were developed, and at the subsystem level, so called node use cases were 8 developed. We had little difficulty tracing profiles at the network use case level to profiles at the node use case level.
Reference: [7] <author> M.A. Jackson, </author> <title> Software Requirements and Specifications, </title> <publisher> Addison-Wesley/ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: All actors interact, as shown by the arrows, but use cases model only the interactions with the target system (the solid arrows). Many descriptions of the target system's requirements do not model the other interactions, although they are important <ref> [7, 18] </ref>. shows Ex1, where the mobile telephony system is the target system, while the right-hand diagram illustrates Ex2 where the VLR logical node is the target system. Use Cases and Scenarios Several actors may participate in a use case.
Reference: [8] <author> Ivar Jacobson, Magnus Christorson, Patrik Jons-son, Gunnar Overgaard, </author> <title> Object-Oriented Software Engineering: A Use Case Driven Approach, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1992. </year> <month> 9 </month>
Reference-contexts: The dialogues are cohesive in the sense that they are related to the same task, or form part of the same transaction. Cohesiveness is often determined by having a goal in common for the tasks, or by having a common respon sibility that must be fulfilled <ref> [4, 8] </ref>. where individual use cases are indicated, as are the actors involved in each use case. This is still a black-box view of the target system. Use Case # 1: Make a Call Primary Actor: Subscriber Secondary Actor: Callee, Operator Goal: To connect to Callee and talk. <p> Intervention 2.1 Operator informs Subscriber of new number Episode 3: Successful Call 3.1 Subscriber dials Callee (new number) 3.2 System connects Subscriber and Callee 3.3 Subscriber talks to Callee 3.4 Subscriber disconnects Methodology Use cases, together with the range of notations for describing scenarios, supports a methodology for requirements engineering <ref> [8, 14, 15] </ref>. Scenarios themselves are very popular within the field of requirements engineering [13, 16] and design [3]. The methodologies identify the system operations, and can transition from system requirements to subsystem specification once a system architecture is chosen. <p> This modeling of internal details is a step in verifying that the use case requirements can indeed be implemented in terms of the proposed subsystems. Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective <ref> [8, 13, 16] </ref>. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1]. <p> Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective <ref> [8, 13, 16] </ref>. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1]. <p> Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1]. Use cases and their scenarios allow verification of software architecture, design, and implementation <ref> [3, 8, 9] </ref>. 3 UNDERLYING FORMAL MODEL The formal model underlying use cases and scenarios is a collection of sequences of events [2]. We use the general term message flow to denote one sequence of events associated with a scenario.
Reference: [9] <author> I. Jacobson, M. Griss and P. Jonsson, </author> <title> Software Reuse: Architecture, Process and Organization for Business Success, </title> <publisher> Addison-Wesley, </publisher> <year> 1997. </year>
Reference-contexts: Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1]. Use cases and their scenarios allow verification of software architecture, design, and implementation <ref> [3, 8, 9] </ref>. 3 UNDERLYING FORMAL MODEL The formal model underlying use cases and scenarios is a collection of sequences of events [2]. We use the general term message flow to denote one sequence of events associated with a scenario.
Reference: [10] <institution> Message Sequence Chart (MSC), ITU-T Recommendation Z.120, International Telecommunication Union, </institution> <year> 1996. </year>
Reference-contexts: Hence, an analysis use case may model a group of scenarios or a group of episodes [13, Figure 3,page 26]. Figure 13 shows the scenario of Figure 11 broken into three episodes: Failure to Connect, Operator Intervention, and Successful Call. Another view, using high-level MSCs <ref> [10, 14] </ref>, is shown in Figure 14 (where we overlay the high-level roadmap of episodes over the basic MSC in order to save space). <p> The internal structure is usually a high-level decomposition into subsystems. For example, a mobile telephony system might model the Mobile Station, Base Station, and Network of Switches as subsystems. The internal actions are often modelled using interaction di 4 agrams or using message sequence charts (MSC) <ref> [10] </ref>. This modeling of internal details is a step in verifying that the use case requirements can indeed be implemented in terms of the proposed subsystems. Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective [8, 13, 16].
Reference: [11] <author> John Musa, Gene Fuoco, Nancy Irving, Diane Kropfl, </author> <title> The operational profile, in Handbook of Software Reliability Engineering, </title> <editor> Michael R. Lyu (editor), </editor> <publisher> McGraw-Hill, </publisher> <year> 1996, </year> <pages> pp. 167-216. </pages>
Reference-contexts: In Regnell et al [14] these are called variant flows of system execution. 4 OPERATIONAL PROFILES This section presents background on operational profiles and definitions of the terminology as used in <ref> [11] </ref>. A usage specification is a quantitative description of how users employ a system. There is a distinction made between usage as described at the requirements stage, and at the operational stage. <p> For example, it might describe whether the load on a telecommunications system is normal load or heavy load. There is a five step development method for operational profiles that is described in detail in <ref> [11] </ref>. The basic steps are (1) develop the list of customer types; (2) develop the list of user types; (3) develop the list of system modes; (4) develop the functional profile; and (5) develop the operational profile. For Ex2, we focused on the normal traffic system mode.
Reference: [12] <author> Andy Pols, </author> <title> Requirements engineering: Use cases and more, </title> <booktitle> OOPSLA 97 Addendum, ACM Sigplan, </booktitle> <year> 1998, </year> <pages> 80-84. </pages>
Reference-contexts: Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective [8, 13, 16]. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort <ref> [12] </ref>. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1].
Reference: [13] <author> C. Potts, K. Takahashi, A. Anton, </author> <title> Inquiry-based requirements analysis, </title> <note> IEEE Software (March 1994) 21-32. </note>
Reference-contexts: The modeling of a use case is done in several ways: for example, by name, as in Figure 4, or by a textual synopsis as in Figure 5. One high-level approach is as a collection of scenarios. Potts <ref> [13] </ref> defines a scenario as "a description of one or more end-to-end transactions involving the required system and its environment". A use case encompasses a collection of scenarios, since there may be several ways in which an actor can (successfully or unsuccessfully) attempt a task. <p> An Agent-Action table lists Agent-Action pairs where the Agent is the sender of the message, and the Action describes the message content and the receiver. Potts <ref> [13] </ref> calls these "action tables", but this usage of the word "action" is not in conformance with ours. Scenarios represent end-to-end executions of the system (the dialogues) grouped together according to some criteria. This is a horizontal gathering of dialogues. <p> Each episode represents a subtask, or the parts of the dialogues in the scenario that perform the subtask. Hence, an analysis use case may model a group of scenarios or a group of episodes <ref> [13, Figure 3,page 26] </ref>. Figure 13 shows the scenario of Figure 11 broken into three episodes: Failure to Connect, Operator Intervention, and Successful Call. <p> Scenarios themselves are very popular within the field of requirements engineering <ref> [13, 16] </ref> and design [3]. The methodologies identify the system operations, and can transition from system requirements to subsystem specification once a system architecture is chosen. A requirements use case is a use case that describes a complete user task or activity. <p> This modeling of internal details is a step in verifying that the use case requirements can indeed be implemented in terms of the proposed subsystems. Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective <ref> [8, 13, 16] </ref>. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1]. <p> Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective <ref> [8, 13, 16] </ref>. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1].
Reference: [14] <author> B. Regnell, M. Andersson, and J. Bergstrand, </author> <title> A hierarchical use case model with graphical representation, </title> <booktitle> Proceedings of Second International Symposium on Engineering of Computer-Based Systems, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996, </year> <pages> pp. 270-277. </pages>
Reference-contexts: We end with a discussion of how use cases are applied throughout the software life-cycle. There are many viewpoints of use cases in the literature. Our viewpoint is drawn mainly from Cockburn [4] and Regnell <ref> [14] </ref>. Host System Environment Use cases capture the functionality of a system, called the target system, as it is meant to behave in a given environment called the host system. A use case describes how a group of external entities, called actors, make use of the system under consideration. <p> Hence, an analysis use case may model a group of scenarios or a group of episodes [13, Figure 3,page 26]. Figure 13 shows the scenario of Figure 11 broken into three episodes: Failure to Connect, Operator Intervention, and Successful Call. Another view, using high-level MSCs <ref> [10, 14] </ref>, is shown in Figure 14 (where we overlay the high-level roadmap of episodes over the basic MSC in order to save space). <p> Intervention 2.1 Operator informs Subscriber of new number Episode 3: Successful Call 3.1 Subscriber dials Callee (new number) 3.2 System connects Subscriber and Callee 3.3 Subscriber talks to Callee 3.4 Subscriber disconnects Methodology Use cases, together with the range of notations for describing scenarios, supports a methodology for requirements engineering <ref> [8, 14, 15] </ref>. Scenarios themselves are very popular within the field of requirements engineering [13, 16] and design [3]. The methodologies identify the system operations, and can transition from system requirements to subsystem specification once a system architecture is chosen. <p> A message-action flow may include stimuli, responses, and actions as events; while a white-box message-flow may furthermore also include internal interactions. An execution flow is a message flow at the implementation level, and details the events during the actual operation of the system. In Regnell et al <ref> [14] </ref> these are called variant flows of system execution. 4 OPERATIONAL PROFILES This section presents background on operational profiles and definitions of the terminology as used in [11]. A usage specification is a quantitative description of how users employ a system. <p> For a function, which is defined in terms of run types, a run is an end-to-end dialogue between the actors and the system. The usage profile adds quantitative information about the distribution of occurrence of use case instances. On the other hand, the use case development methods, such as <ref> [14] </ref>, provide a method to link requirements use cases (or functions) to analysis use cases, and eventually the atomic use cases. The latter may be identified with system actions or the operations of a usage specification.
Reference: [15] <author> B. Regnell, K. Kimbler, A. Wesslen, </author> <title> Improving the use case driven approach to requirements engineering, </title> <booktitle> Proceedings of Second International Symposium on Requirements Engineering, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1995, </year> <pages> pp. 40-47. </pages>
Reference-contexts: Intervention 2.1 Operator informs Subscriber of new number Episode 3: Successful Call 3.1 Subscriber dials Callee (new number) 3.2 System connects Subscriber and Callee 3.3 Subscriber talks to Callee 3.4 Subscriber disconnects Methodology Use cases, together with the range of notations for describing scenarios, supports a methodology for requirements engineering <ref> [8, 14, 15] </ref>. Scenarios themselves are very popular within the field of requirements engineering [13, 16] and design [3]. The methodologies identify the system operations, and can transition from system requirements to subsystem specification once a system architecture is chosen. <p> Indeed, an environment variable may select between alternative scenarios within a use case, or between alternative episodes within a scenario. (The flow conditions of <ref> [15] </ref> play a similar role.) 6 CONCLUSION A reconciliation of uses cases and operational profiles is presented as a means for requirements engineering, prioritizing development and testing, and allowing statistical use testing and reliability estimation.
Reference: [16] <author> K.S. Rubin and A. Goldberg, </author> <title> Object behavior analysis, </title> <type> CACM 35, </type> <month> 9 (September </month> <year> 1992) </year> <month> 48-62. </month>
Reference-contexts: Scenarios themselves are very popular within the field of requirements engineering <ref> [13, 16] </ref> and design [3]. The methodologies identify the system operations, and can transition from system requirements to subsystem specification once a system architecture is chosen. A requirements use case is a use case that describes a complete user task or activity. <p> This modeling of internal details is a step in verifying that the use case requirements can indeed be implemented in terms of the proposed subsystems. Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective <ref> [8, 13, 16] </ref>. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1]. <p> Application of Use Cases Use cases are aids to requirements elicitation since they adopt a users perspective <ref> [8, 13, 16] </ref>. Use cases capture functional requirements [8, 13, 16]. Use cases allow estimation of project effort [12]. Use cases help allocation of project effort, and monitoring of project progress [5]. Use cases lead to test cases [1].
Reference: [17] <author> Claes Wohlin and Per Runeson, </author> <title> Certification of software components, </title> <journal> IEEE TRans. Software Engineering, </journal> <volume> 20, </volume> <month> 6 </month> <year> (1994) </year> <month> 494-499. </month>
Reference-contexts: Interaction diagrams on the subsystems relate the two. With corresponding usage specifications of the target system and the subsystems, this seems sufficient detail to cheaply calculate a reliability estimate for the target system from those of the subsystems. The work of Wohlin and Runeson <ref> [17] </ref> is just such an experiment: they calculate a reliability estimate for the target system from reliability estimates of the subsystems with an incremental amount of system testing.
Reference: [18] <author> Pamela Zave and Michael Jackson, </author> <title> Four dark corners of requirements engineering, </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 6, </volume> <month> 1 </month> <year> (1997) </year> <month> 1-30. </month>
Reference-contexts: All actors interact, as shown by the arrows, but use cases model only the interactions with the target system (the solid arrows). Many descriptions of the target system's requirements do not model the other interactions, although they are important <ref> [7, 18] </ref>. shows Ex1, where the mobile telephony system is the target system, while the right-hand diagram illustrates Ex2 where the VLR logical node is the target system. Use Cases and Scenarios Several actors may participate in a use case.
References-found: 18

