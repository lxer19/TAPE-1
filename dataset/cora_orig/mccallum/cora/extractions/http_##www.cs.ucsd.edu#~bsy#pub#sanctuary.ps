URL: http://www.cs.ucsd.edu/~bsy/pub/sanctuary.ps
Refering-URL: http://www.cs.ucsd.edu/~bsy/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Sanctuary for Mobile Agents  
Author: Bennet S. Yee 
Date: April 28, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Laszlo Babai, Lance Fortnow, Leonid A. Levin, and Mario Szegedy. </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In Proceedings of the Twenty Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 21-31, </pages> <address> New Orleans, Louisiana, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: One possibility is to forward the entire execution trace to the originator, who checks it. This however is too costly. We would like to explore the use of holographic proof checking techniques <ref> [1] </ref>. This is quite a speculative idea. The current approaches are very theoretical. In principle they do help, but the cost in practice of existing solutions is prohibitive. We are considering investigating ways to use the ideas in a more practical way.
Reference: [2] <author> Mihir Bellare, Ran Canetti, and Hugo Krawczyk. </author> <title> Keying hash functions for message authentication. </title> <editor> In Neil Koblitz, editor, </editor> <booktitle> Advances in Cryptology: Crypto '96 Proceedings, volume 1109 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [3] <author> Josh Benaloh, Butler Lampson, Terence Spies, Dan Simon, and Bennet Yee. </author> <title> The PCT protocol, </title> <month> October </month> <year> 1995. </year>
Reference-contexts: In addition to the basic support for agent execution, the Sanctuary project will develop the trust framework needed for inter-server communications. This necessarily implies having some basic public key infrastructure | we should be able to leverage off of the existing work being done to support SSL [6], PCT <ref> [3] </ref>, and TLS. 5 4 Trust Models The issue of trust models is very important to agent-based computing. Agents do not just need a trusted computing base (TCB) | trust may not be so binary in nature.
Reference: [4] <author> Brian N. Bershad, Stefan Savage, Przemys law Pardyak, Emin Gun Sirer, Marc E. Fiuczynski, David Becker, Craig Chambers, and Susan Eggers. </author> <title> Extensibility, safety and performance in the spin operating system. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year> <month> 9 </month>
Reference-contexts: In agent-based computing, most researchers have been concentrating on one side of the security issue: protecting the server from potentially malicious agents. Related work in downloadable executable content (Java [7], Software Fault Isolation [19], Proof-Carrying Code [16, 17], OS extension mechanisms such as packet filters [13], type safe languages <ref> [4, 9] </ref>, etc) all focus on this problem.
Reference: [5] <author> Matt Blaze, Joan Feigenbaum, and Jack Lacy. </author> <title> Decentralized trust management. In Proceedings 1996 IEEE Symposium on Security and Privacy, </title> <note> page (to appear), </note> <month> May </month> <year> 1996. </year>
Reference-contexts: Such a protocol requires a merchant-side public key infrastructure. 8 be used. This is similar in spirit with the work of Blaze and Feigenbaum <ref> [5] </ref>, except that by unifying the agent language and the trust specification language, the programmer's work is simplified. 5 Mobile Java Other approaches to providing mobility to Java programs [18] requires modifying the interpreter.
Reference: [6] <author> Alan Freier, Philip Karlton, and Paul Kocher. </author> <note> The SSL protocol version 3, </note> <month> December </month> <year> 1995. </year>
Reference-contexts: In addition to the basic support for agent execution, the Sanctuary project will develop the trust framework needed for inter-server communications. This necessarily implies having some basic public key infrastructure | we should be able to leverage off of the existing work being done to support SSL <ref> [6] </ref>, PCT [3], and TLS. 5 4 Trust Models The issue of trust models is very important to agent-based computing. Agents do not just need a trusted computing base (TCB) | trust may not be so binary in nature.
Reference: [7] <author> J. Steven Fritzinger and Marianne Mueller. </author> <title> Java security, </title> <note> 1996. Published as http://www.- javasoft.com/security/whitepaper.ps. </note>
Reference-contexts: In agent-based computing, most researchers have been concentrating on one side of the security issue: protecting the server from potentially malicious agents. Related work in downloadable executable content (Java <ref> [7] </ref>, Software Fault Isolation [19], Proof-Carrying Code [16, 17], OS extension mechanisms such as packet filters [13], type safe languages [4, 9], etc) all focus on this problem.
Reference: [8] <author> Haber and Stornetta. </author> <title> How to time-stamp a digital document. </title> <journal> Journal of Cryptology, </journal> <volume> 3(2), </volume> <year> 1991. </year>
Reference-contexts: This contrasts with a simple digital signature, where if an attacker compromises the generating host where the signature key is stored, the authenticity of all messages signed with that key becomes questionable. The use of a digital timestamping service <ref> [8] </ref> can have similar properties, except that in that case a trusted third party (the timestamping service) is required and the granularity of the timestamps limits the maximum rate of travel for the agents | the agent must stay on a server until the next timestamping epoch before migrating to the
Reference: [9] <author> Wilson C. Hsieh, Marc E. Fiuczynski, Charles Garrett, Stefan Savage, David Becker, and Brian N. Bershad. </author> <title> Language support for extensible operating systems. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: In agent-based computing, most researchers have been concentrating on one side of the security issue: protecting the server from potentially malicious agents. Related work in downloadable executable content (Java [7], Software Fault Isolation [19], Proof-Carrying Code [16, 17], OS extension mechanisms such as packet filters [13], type safe languages <ref> [4, 9] </ref>, etc) all focus on this problem.
Reference: [10] <author> IBM Corporation. </author> <title> Common Cryptographic Architecture: Cryptographic Application Programming Interface Reference, </title> <address> SC40-1675-1 edition. </address>
Reference: [11] <author> R. R. Jueneman, S. M. Matyas, and C. H. Meyer. </author> <title> Message authentication codes. </title> <journal> IEEE Communications Magazine, </journal> <volume> 23(9) </volume> <pages> 29-40, </pages> <month> September </month> <year> 1985. </year>
Reference: [12] <author> Joe Kilian. </author> <title> A note on efficient zero-knowledge proofs and arguments. </title> <booktitle> In Proceedings of the Twenty Fourth Annual ACM Symposium on Theory of Computing, </booktitle> <address> Victoria, British Columbia, Canada, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: So there is no choice but to transmit y 0 in entirety. We will not save bandwidth. We will gain something: the verification process is faster. (The verifier receiving y 0 will perform some quick spot-checks). A better approach is to use computationally sound (CS) proofs as in <ref> [12, 14] </ref>. Having constructed the holographic proof y 0 as above, the server hashes it down via a tree hashing scheme using a collision-resistant hash function h. Only the root of the tree is sent to the originator. This is relatively short, so bandwidth is saved.
Reference: [13] <author> Steven McCanne and Van Jacobson. </author> <title> The bsd packet filter: A new architecture for user-level packet capture. </title> <booktitle> In USENIX Technical Conference Proceedings, </booktitle> <pages> pages 259-269, </pages> <address> San Diego, CA, 1993. </address> <publisher> USENIX. </publisher>
Reference-contexts: In agent-based computing, most researchers have been concentrating on one side of the security issue: protecting the server from potentially malicious agents. Related work in downloadable executable content (Java [7], Software Fault Isolation [19], Proof-Carrying Code [16, 17], OS extension mechanisms such as packet filters <ref> [13] </ref>, type safe languages [4, 9], etc) all focus on this problem.
Reference: [14] <author> Silvio Micali. </author> <title> Cs proofs. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 436-453, </pages> <address> Santa Fe, New Mexico, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: So there is no choice but to transmit y 0 in entirety. We will not save bandwidth. We will gain something: the verification process is faster. (The verifier receiving y 0 will perform some quick spot-checks). A better approach is to use computationally sound (CS) proofs as in <ref> [12, 14] </ref>. Having constructed the holographic proof y 0 as above, the server hashes it down via a tree hashing scheme using a collision-resistant hash function h. Only the root of the tree is sent to the originator. This is relatively short, so bandwidth is saved.
Reference: [15] <author> Yaron Minsky, Robbert van Renesse, Fred B. Schneider, and Scott D. Stoller. </author> <title> Cryptographic support for fault-tolerant distributed computing. </title> <type> Technical Report TR96-1600, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: Thus, only the results of computation done by those servers from the (maximal) honest suffix of the agent's route, assuming that the computation is independent of any input from previous servers, should be trusted. 3.3.2 Server Replication In <ref> [15] </ref>, Minsky et. al. developed a general method for mobile agent computation security, marrying some ideas from the fields of fault tolerance and cryptography.
Reference: [16] <author> George Necula. </author> <title> Proof carrying code. </title> <booktitle> In Proceedings of the Twenty Fourth Annual Symposium on Principles of Programming Languages, </booktitle> <year> 1997. </year> <note> To Appear. </note>
Reference-contexts: In agent-based computing, most researchers have been concentrating on one side of the security issue: protecting the server from potentially malicious agents. Related work in downloadable executable content (Java [7], Software Fault Isolation [19], Proof-Carrying Code <ref> [16, 17] </ref>, OS extension mechanisms such as packet filters [13], type safe languages [4, 9], etc) all focus on this problem.
Reference: [17] <author> George Necula and Peter Lee. </author> <title> Safe kernel extensions without run-time checks. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: In agent-based computing, most researchers have been concentrating on one side of the security issue: protecting the server from potentially malicious agents. Related work in downloadable executable content (Java [7], Software Fault Isolation [19], Proof-Carrying Code <ref> [16, 17] </ref>, OS extension mechanisms such as packet filters [13], type safe languages [4, 9], etc) all focus on this problem.
Reference: [18] <author> Mudumbai Ranganathan, Anurag Acharya, Shamik D. Sharma, and Joel Saltz. </author> <title> Network-aware mobile programs. </title> <booktitle> In Proceedings of the Usenix 1997 Annual Technical Conference. Usenix, </booktitle> <year> 1997. </year>
Reference-contexts: This is similar in spirit with the work of Blaze and Feigenbaum [5], except that by unifying the agent language and the trust specification language, the programmer's work is simplified. 5 Mobile Java Other approaches to providing mobility to Java programs <ref> [18] </ref> requires modifying the interpreter. In Sanctuary, we intend to provide a mechanism to migrate Java-based agents that can run on unmodified interpreters.
Reference: [19] <author> Robert Wahbe, Steve Lucco, T. E. Anderson, and Susan L. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> In Proceedings of the ACM SIGCOMM 96 Symposium. ACM, </booktitle> <year> 1996. </year>
Reference-contexts: In agent-based computing, most researchers have been concentrating on one side of the security issue: protecting the server from potentially malicious agents. Related work in downloadable executable content (Java [7], Software Fault Isolation <ref> [19] </ref>, Proof-Carrying Code [16, 17], OS extension mechanisms such as packet filters [13], type safe languages [4, 9], etc) all focus on this problem.
Reference: [20] <author> Bennet S. Yee. </author> <title> Using Secure Coprocessors. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1994. </year> <month> 10 </month>
Reference-contexts: The Sanctuary project will build such an environment to run within a secure coprocessor <ref> [20] </ref>, allowing Java-based agents to run securely; design and implement the agent APIs needed to support mobile Java agents; and develop the technology by which Java-based agents can migrate among unmodified Java interpreters running in an secure-coprocessor environment.
References-found: 20

