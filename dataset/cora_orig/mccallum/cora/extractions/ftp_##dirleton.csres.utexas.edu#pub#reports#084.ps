URL: ftp://dirleton.csres.utexas.edu/pub/reports/084.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: for the ATP Community  
Phone: (512) 322-9951  
Author: J Strother Moore 
Note: The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Abstract: Technical Report 84 October, 1992 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: If the normal form is T the expression is a tautology; otherwise it is not. When the normal form is not T, a counterexample can be read off any branch concluding with F. This obvious theorem relating tautologies and normalization was proved by Nqthm in 1976 <ref> [1] </ref>. IF-normal forms are not canonical: an expression may have multiple non-identical but equivalent normal forms. For example, (IF A (IF B F T) (IF B T F)) and (IF B (IF A F T) (IF A T F)) are both in IF-normal form and are equivalent.
Reference: 2. <author> K.S. Brace and R.L. Rudell and R.E. Bryant. </author> <title> Efficient Implementation of a BDD Package. </title> <booktitle> 27th ACM/IEEE Design Automation Conference, </booktitle> <year> 1990, </year> <pages> pp. 40-45. </pages>
Reference-contexts: More importantly to me, I would like to encourage the generalization of the technique so that general-purpose theorem provers can be improved. In closing this preface I would like to urge readers to read the original Bryant paper, [3], as well as <ref> [2] </ref> in which Brace, Rudell and Bryant present, quite clearly, the if-then-else perspective and the ``coding tricks'' described here. In addition, Bryant has recently written an excellent survey of current OBDD techniques and applications, [4]. 2.
Reference: 3. <author> R.E. Bryant. </author> <title> "Graph-Based Algorithms for Boolean Function Manipulation". </title> <journal> IEEE Transactions on Computers C-35, </journal> <month> 8 (August </month> <year> 1986), </year> <month> 677--691. </month>
Reference-contexts: Preface This paper explains briefly the algorithm published by Bryant in <ref> [3] </ref>. Since 1986, so-called ``OBDD'' algorithms have swept aside all other ways of deciding propositional equivalence. But despite the fact that they are often thousands of times faster than tautology checkers in automated reasoning systems the OBDD literature has been largely ignored by our community. <p> More importantly to me, I would like to encourage the generalization of the technique so that general-purpose theorem provers can be improved. In closing this preface I would like to urge readers to read the original Bryant paper, <ref> [3] </ref>, as well as [2] in which Brace, Rudell and Bryant present, quite clearly, the if-then-else perspective and the ``coding tricks'' described here. In addition, Bryant has recently written an excellent survey of current OBDD techniques and applications, [4]. 2. <p> This is in fact the same idea as the ``hash-cons'' idea, generalized to merging instead of just the construction of an individual IF. The same hash array can be used. The OBDD algorithm as described in <ref> [3] </ref> is canonicalization implemented with ``merge sort,'' ``hash cons'' and ``memo-izing.'' 6 5. A Few Experiments I have coded this implementation of the OBDD algorithm in the applicative language Acl2 (``A Computational Logic for an Applicative Core Language''), an applicative subset of Common Lisp being developed at Computational Logic, Inc.
Reference: 4. <author> R.E. Bryant. </author> <title> Symbolic Boolean Manipulation with Ordered Binary Decision Diagrams. </title> <type> Tech. </type> <institution> Rept. CMU-CS-92-160, School of Computer Science, Carnegie Mellon University, </institution> <month> July, </month> <year> 1992. </year> <title> i Table of Contents </title>
Reference-contexts: In addition, Bryant has recently written an excellent survey of current OBDD techniques and applications, <ref> [4] </ref>. 2. Logical Basis I base my description on the Nqthm (i.e., Boyer-Moore) logic because it is familiar to me. For readers unfamiliar to it, I offer the following remarks. Consider propositional calculus with function symbols and equality.
Reference: 1. <institution> Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: If the normal form is T the expression is a tautology; otherwise it is not. When the normal form is not T, a counterexample can be read off any branch concluding with F. This obvious theorem relating tautologies and normalization was proved by Nqthm in 1976 <ref> [1] </ref>. IF-normal forms are not canonical: an expression may have multiple non-identical but equivalent normal forms. For example, (IF A (IF B F T) (IF B T F)) and (IF B (IF A F T) (IF A T F)) are both in IF-normal form and are equivalent.
Reference: 2. <institution> Logical Basis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: More importantly to me, I would like to encourage the generalization of the technique so that general-purpose theorem provers can be improved. In closing this preface I would like to urge readers to read the original Bryant paper, [3], as well as <ref> [2] </ref> in which Brace, Rudell and Bryant present, quite clearly, the if-then-else perspective and the ``coding tricks'' described here. In addition, Bryant has recently written an excellent survey of current OBDD techniques and applications, [4]. 2.
Reference: 3. <institution> IF-Normal Form . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 </institution>
Reference-contexts: Preface This paper explains briefly the algorithm published by Bryant in <ref> [3] </ref>. Since 1986, so-called ``OBDD'' algorithms have swept aside all other ways of deciding propositional equivalence. But despite the fact that they are often thousands of times faster than tautology checkers in automated reasoning systems the OBDD literature has been largely ignored by our community. <p> More importantly to me, I would like to encourage the generalization of the technique so that general-purpose theorem provers can be improved. In closing this preface I would like to urge readers to read the original Bryant paper, <ref> [3] </ref>, as well as [2] in which Brace, Rudell and Bryant present, quite clearly, the if-then-else perspective and the ``coding tricks'' described here. In addition, Bryant has recently written an excellent survey of current OBDD techniques and applications, [4]. 2. <p> This is in fact the same idea as the ``hash-cons'' idea, generalized to merging instead of just the construction of an individual IF. The same hash array can be used. The OBDD algorithm as described in <ref> [3] </ref> is canonicalization implemented with ``merge sort,'' ``hash cons'' and ``memo-izing.'' 6 5. A Few Experiments I have coded this implementation of the OBDD algorithm in the applicative language Acl2 (``A Computational Logic for an Applicative Core Language''), an applicative subset of Common Lisp being developed at Computational Logic, Inc.
Reference: 4. <institution> Efficiency Considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 </institution>
Reference-contexts: In addition, Bryant has recently written an excellent survey of current OBDD techniques and applications, <ref> [4] </ref>. 2. Logical Basis I base my description on the Nqthm (i.e., Boyer-Moore) logic because it is familiar to me. For readers unfamiliar to it, I offer the following remarks. Consider propositional calculus with function symbols and equality.
Reference: 5. <institution> A Few Experiments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 </institution>
References-found: 9

