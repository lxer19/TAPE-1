URL: http://www.informatik.th-darmstadt.de/VS/Publikationen/Fuenfrocken/papers/wetice97-wasp.ps
Refering-URL: http://www.informatik.th-darmstadt.de/~fuenf/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: fuenf@informatik.th-darmstadt.de  
Title: How to Integrate Mobile Agents into Web Servers  
Author: Stefan Funfrocken 
Address: Alexanderstr. 10, D 64283 Darmstadt, Germany  
Affiliation: Department of Computer Science, Darmstadt University of Technologie,  
Abstract: Mobile agents are a new paradigm for communication and cooperation in distributed computing. To combine the new paradigm with the promising World Wide Web platfrom, we integrated mobile agents into Web Servers. In this way, mobile agents may travel from Web server to Web server to access their local data. The paper describes how we integrated mobile agents support into a Web server. We present the state of implementation, and we give an outlook on our future work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arnold K., Gosling J., </author> <title> The Java Programming Language, </title> <publisher> Addison-Wesley, </publisher> <address> 1996 (ISBN 0-201-63455-4) </address>
Reference-contexts: As an implementation language for our system and for agent-programming, we chose Sun's Web language Java <ref> [1] </ref>, which already provides code shipping by the means of applets and persistent, movable objects by the means of object serialization. Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality.
Reference: [2] <author> Baird-Smith A., </author> <title> Jigsaw Java HTTP Server, </title> <note> by WWW Consortium, http://www.w3.org/pub/WWW/Jigsaw/ </note>
Reference-contexts: In this way, the code of Web servers does not need to be changed. Of course, this implies that the server has to provide a well--defined interface like CGI, Jeeves' servelets [8], or Jigsaw's resource interface <ref> [2] </ref>, which is able to pass all relevant information to the SAE. As an implementation language for our system and for agent-programming, we chose Sun's Web language Java [1], which already provides code shipping by the means of applets and persistent, movable objects by the means of object serialization. <p> To make use of our SAE, a foreign Web server has to provide an interface which allows to hand the incoming request to the SAE and allows to hand back any response. Most existing Web servers offer the cgi-bin interface, which provides this. Java based Web servers as Jigsaw <ref> [2] </ref> or Jeeves [8] can integrate our SAE directly. We developed a Jigsaw resource object which connects our SAE to the Jigsaw resource tree and are working on a Jeeves SAE-servelet. <p> In both cases it is the server requesting the servelet. Thus servelets cannot be compared to mobile agents. Our Web server will support the servelet interface. Additionally, servelets can also be sent to the server over the network. Compared to Jigsaw <ref> [2] </ref>, our server has a more fine granular access restriction scheme which originates from the needs for Web services and is enhanced by the Web agent server module.
Reference: [3] <author> Borenstein N., Freed N., </author> <title> MIME (Multipurpose Internet Mail Extensions), Network Working Group, </title> <address> RFC1521, </address> <year> 1993 </year>
Reference-contexts: The agent programmer has to fill this method in such a way that its agent will execute the correct code depending on its internal state. Inside the post request, Web agents are transported as MIME <ref> [3] </ref> message. If the server requires any authentication to perform the post request, the agent has to provide that information at the time it is sent (i.e., when the post request is constructed).
Reference: [4] <author> Borenstein, N., </author> <title> EMail with a Mind of Its Own: The Safe-Tcl Language for Enabled Mail, </title> <publisher> ftp://ftp.fv.com/pub/code/other/safe-tc.tar </publisher>
Reference-contexts: In this way, foreign agents interact with the local system through a trusted third party. Currently, there is only one language which was designed for use as an agent language: Tele-script by General Magic [17]. There are several interpreted languages which offer a so-called `secure interpreter', like safe-tcl <ref> [4] </ref> or safe-python [13]. Most of them, however, lack agent-related language constructs and concepts (e.g., a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality.
Reference: [5] <author> Gensereth M.R, Ketchpel S.P., </author> <title> Software Agents, </title> <journal> Comm. of the ACM, Vol.37, </journal> <volume> No.7, </volume> <month> July </month> <year> 1994 </year>
Reference: [6] <author> Gray R.S., </author> <title> Agent Tcl: A flexible and secure mobile-agent system, </title> <booktitle> Proc. of the Fourth Annual Tcl/Tk Workshop, </booktitle> <address> Monteray CA, </address> <year> 1996, </year> <note> http://www.cs.dartmouth.edu/agent/papers.html </note>
Reference-contexts: Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which we plan to make use of. 5. Related Work There are several research projects that deal with the implementation of general purpose agent systems [15] [9] [11] <ref> [6] </ref>, some of them are using Java as an implementation language [7] [10] [14]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [7] <author> Hohl F., </author> <title> Konzeption eines einfachen Agentensystems und Implementation eines Prototyps, </title> <type> Diploma Thesis, </type> <institution> Univ. Stuttgart, Dept. of CS , Nr. </institution> <month> 1267 </month> <year> (1995) </year>
Reference-contexts: Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality. This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole <ref> [7] </ref>, Aglets [10], Java-to-go [16], and MOA [14]. <p> We consider this not to be a conceptual drawback, although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole <ref> [7] </ref>, Aglets [10], FFM [11], Tacoma [9]), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. <p> Related Work There are several research projects that deal with the implementation of general purpose agent systems [15] [9] [11] [6], some of them are using Java as an implementation language <ref> [7] </ref> [10] [14]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control. So far, this is of minor interest to us, although it represents a general concern in our project.
Reference: [8] <author> Jeeves Team, </author> <title> Overview of the Java Http Server Architecture, </title> <institution> Jeeves Docu, Sun, </institution> <year> 1996 </year>
Reference-contexts: In this way, the code of Web servers does not need to be changed. Of course, this implies that the server has to provide a well--defined interface like CGI, Jeeves' servelets <ref> [8] </ref>, or Jigsaw's resource interface [2], which is able to pass all relevant information to the SAE. <p> Most existing Web servers offer the cgi-bin interface, which provides this. Java based Web servers as Jigsaw [2] or Jeeves <ref> [8] </ref> can integrate our SAE directly. We developed a Jigsaw resource object which connects our SAE to the Jigsaw resource tree and are working on a Jeeves SAE-servelet. <p> We are currently investigating what type of agents that come from other Java based agent systems could be integrated in our system. Concerning our Web server implementation, there exist several other Web servers based on Java. The Jeeves <ref> [8] </ref> project developed a server-side-include interface called `servelets' which enables servers to load and execute CGI-like Java programs directly into the Java virtual machine executing the server code. Serveletts can be bound to a URL and are loaded by the server, when a user requests the URL.
Reference: [9] <author> Johanson D., van Renesse R., Schneider F., </author> <title> An Introduction to the TACOMA Distributed System, </title> <institution> Univ. of Tromso, Dept. of CS, </institution> <type> CS Tech. Report 95-23, </type> <month> June </month> <year> 1995 </year>
Reference-contexts: We consider this not to be a conceptual drawback, although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole [7], Aglets [10], FFM [11], Tacoma <ref> [9] </ref>), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. The agent programmer has to fill this method in such a way that its agent will execute the correct code depending on its internal state. <p> Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which we plan to make use of. 5. Related Work There are several research projects that deal with the implementation of general purpose agent systems [15] <ref> [9] </ref> [11] [6], some of them are using Java as an implementation language [7] [10] [14]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [10] <author> Lange D., Chang D.T., </author> <title> IBM Aglets Workbench Programming Mobile Agents in Java, </title> <type> White Paper, </type> <institution> IBM Corporation, </institution> <address> Japan, </address> <month> August </month> <year> 1996, </year>
Reference-contexts: Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality. This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole [7], Aglets <ref> [10] </ref>, Java-to-go [16], and MOA [14]. <p> So far, we only need two SAE related requests: one for agent startup and one for agent transfer. Both are normal HTTP requests, which implies that we do not need a special protocol such as ATP (Agent Transport Protocol), which is used by the aglets <ref> [10] </ref> system. Generally speaking, our scenario is divided into two phases: the agent startup and configuration phase, and the agent service phase. In the first phase, a user wants to access an agent which is located at a Web server. <p> We consider this not to be a conceptual drawback, although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole [7], Aglets <ref> [10] </ref>, FFM [11], Tacoma [9]), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. <p> Related Work There are several research projects that deal with the implementation of general purpose agent systems [15] [9] [11] [6], some of them are using Java as an implementation language [7] <ref> [10] </ref> [14]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control. So far, this is of minor interest to us, although it represents a general concern in our project.
Reference: [11] <author> Lingnau A., Drobnik O., Domel P., </author> <title> An HTTP-based Infrastructure for Mobile Agents, </title> <note> WWW Journal Fourth Inter. WWW Conference Proc., </note> <institution> Boston, </institution> <address> MA, </address> <month> Dec </month> <year> 1995 </year>
Reference-contexts: We consider this not to be a conceptual drawback, although this puts some burden on the programmer of the Web agent. As other systems that use this scheme of migration (Mole [7], Aglets [10], FFM <ref> [11] </ref>, Tacoma [9]), we provide a special method which is called by the target SAE when it restarts the flow of control for a migrated Web agent. <p> Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which we plan to make use of. 5. Related Work There are several research projects that deal with the implementation of general purpose agent systems [15] [9] <ref> [11] </ref> [6], some of them are using Java as an implementation language [7] [10] [14]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [12] <author> Magedanz T., Rothermel K., Krause S., </author> <title> Intelligent Agents: An Emerging Technology for Next Generation Telecommunications?, </title> <booktitle> IEEE INFOCOM 1996, </booktitle> <address> San Francisco, USA, </address> <month> March </month> <year> 1996 </year>
Reference-contexts: Application areas for mobile agent technology include tasks as simple as information retrieval, but is also used fl Copyright 1998 IEEE. To appear in the proceedings of the WET-ICE'97 Workshop on Collaborative Agents in Distributed Web Applications, June 18-20, 1997, Boston, MA in mobile computing [15], telecomunication applications <ref> [12] </ref>, electronic commerce [17], and other traditional areas of computer science. One special application area is the World Wide Web which is still growing at an exponential rate, and buzzwords like `Web centric computing' or `Intranet' promote traditional Internet technology everywhere.
Reference: [13] <author> Majewski S.D., </author> <title> Distributed Programming: Agentware, Component-ware, Distributed Objects, </title> <booktitle> Notes for the discussion on Safe-Python at the NIST Python Workshop, </booktitle> <year> 1994, </year>
Reference-contexts: Currently, there is only one language which was designed for use as an agent language: Tele-script by General Magic [17]. There are several interpreted languages which offer a so-called `secure interpreter', like safe-tcl [4] or safe-python <ref> [13] </ref>. Most of them, however, lack agent-related language constructs and concepts (e.g., a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality.
Reference: [14] <author> Milojicic D., Condict M., Reynolds, F., Bolinger D., Dale P., </author> <title> Mobile Objects and Agents (MOA) Project, OSF, position paper, </title> <booktitle> Distributed Object Computing on the Internet Advanced Topics Workshop, COOTS </booktitle>
Reference-contexts: This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole [7], Aglets [10], Java-to-go [16], and MOA <ref> [14] </ref>. <p> Related Work There are several research projects that deal with the implementation of general purpose agent systems [15] [9] [11] [6], some of them are using Java as an implementation language [7] [10] <ref> [14] </ref>. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control. So far, this is of minor interest to us, although it represents a general concern in our project.
Reference: [15] <author> Peine H., </author> <title> The Ara Projekt, </title> <institution> University of Kaiserslautern, </institution> <note> http://www.uni-kl.de/AG-Nehmer/Ara/ara.html </note>
Reference-contexts: Application areas for mobile agent technology include tasks as simple as information retrieval, but is also used fl Copyright 1998 IEEE. To appear in the proceedings of the WET-ICE'97 Workshop on Collaborative Agents in Distributed Web Applications, June 18-20, 1997, Boston, MA in mobile computing <ref> [15] </ref>, telecomunication applications [12], electronic commerce [17], and other traditional areas of computer science. One special application area is the World Wide Web which is still growing at an exponential rate, and buzzwords like `Web centric computing' or `Intranet' promote traditional Internet technology everywhere. <p> Since we use object serialization, the migration of Web agents is not transparent to the agent as for example in Tele-script [17] or ARA <ref> [15] </ref>: the flow of control cannot automatically be reestablished to that point in the code of the Web agent where it executed the go method. We consider this not to be a conceptual drawback, although this puts some burden on the programmer of the Web agent. <p> Interfaces to emerging electronic cash systems will be provided through Java's electronic commerce API, which we plan to make use of. 5. Related Work There are several research projects that deal with the implementation of general purpose agent systems <ref> [15] </ref> [9] [11] [6], some of them are using Java as an implementation language [7] [10] [14]. All these systems have a different focus: they aim at a platform supporting agents in general, which includes agent communication and agent control.
Reference: [16] <author> Weiyi L., Messerschmitt D., Java-To-Go, </author> <title> Itinerative Computing Us--ing Java, </title> <institution> Univ. of California at Berkeley, Department of EE and CS, </institution>
Reference-contexts: Because of this, we found that it is very easy to implement a system that provides rudimentary mobile agent functionality. This is also supported by the fact that there are several other research projects that deal with Java-based mobile agent systems like Mole [7], Aglets [10], Java-to-go <ref> [16] </ref>, and MOA [14].
Reference: [17] <author> White J.E., </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace, Whitepaper by General Magic, </title> <publisher> Inc, </publisher> <address> Sunnyvale, CA, USA </address>
Reference-contexts: In this way, foreign agents interact with the local system through a trusted third party. Currently, there is only one language which was designed for use as an agent language: Tele-script by General Magic <ref> [17] </ref>. There are several interpreted languages which offer a so-called `secure interpreter', like safe-tcl [4] or safe-python [13]. Most of them, however, lack agent-related language constructs and concepts (e.g., a language-provided command to initiate agent transportation, or security concepts) and depend on external libraries for such functionality. <p> To appear in the proceedings of the WET-ICE'97 Workshop on Collaborative Agents in Distributed Web Applications, June 18-20, 1997, Boston, MA in mobile computing [15], telecomunication applications [12], electronic commerce <ref> [17] </ref>, and other traditional areas of computer science. One special application area is the World Wide Web which is still growing at an exponential rate, and buzzwords like `Web centric computing' or `Intranet' promote traditional Internet technology everywhere. <p> Since we use object serialization, the migration of Web agents is not transparent to the agent as for example in Tele-script <ref> [17] </ref> or ARA [15]: the flow of control cannot automatically be reestablished to that point in the code of the Web agent where it executed the go method. We consider this not to be a conceptual drawback, although this puts some burden on the programmer of the Web agent.
References-found: 17

