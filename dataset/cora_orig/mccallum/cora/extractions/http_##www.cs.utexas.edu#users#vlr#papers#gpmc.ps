URL: http://www.cs.utexas.edu/users/vlr/papers/gpmc.ps
Refering-URL: http://www.cs.utexas.edu/users/vlr/pub.html
Root-URL: 
Title: AN EFFICIENT PARALLEL ALGORITHM FOR THE GENERAL PLANAR MONOTONE CIRCUIT VALUE PROBLEM  
Author: VIJAYA RAMACHANDRAN AND HONGHUA YANG 
Keyword: Key words. circuit value problem, planar monotone circuit, plane graph, dual graph, parallel algorithm, EREW PRAM  
Note: In SIAM JOURNAL ON COMPUTING, 1996. Copyright SIAM  AMS subject classifications. 68Q10, 68Q15, 68Q20, 68Q22, 68Q25, 68R10, 05C10  
Abstract: A planar monotone circuit (PMC) is a Boolean circuit that can be embedded in the plane and that contains only AND and OR gates. Goldschlager, Cook & Dymond and others have developed NC 2 algorithms to evaluate a special layered form of a PMC. These algorithms require a large number of processors ((n 6 ), where n is the size of the input circuit). Yang, and more recently, Delcher & Kosaraju have given NC algorithms for the general planar monotone circuit value problem. These algorithms use at least as many processors as the algorithms for the layered case. This paper gives an efficient parallel algorithm that evaluates a general PMC of size n in polylog time using only a linear number of processors on an EREW PRAM. This parallel algorithm is the best possible to within a polylog factor, and is a substantial improvement over the earlier algorithms for the problem. The algorithm uses several novel techniques to perform the evaluation, including the use of the dual of the plane embedding of the circuit to determine the propagation of values within the circuit. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Borodin, </author> <title> On relating time and space to size and depth, </title> <journal> SIAM J. Comput., </journal> <volume> 6 (1977), </volume> <pages> pp. 733-744. </pages>
Reference-contexts: Our results are of interest in the context of parallel complexity since all of the earlier algorithms for the PMCVP used indirect methods such as the relationship between sequential space and parallel time <ref> [1] </ref> or the parallel evaluation of straight-line code [18] to place the problem in NC. By using direct techniques, not only are we able to place the problem in NC, but we are able to obtain a very efficient algorithm for its solution.
Reference: [2] <author> R. Cole, </author> <title> Parallel merge sort, </title> <journal> SIAM J. Comput., </journal> <volume> 17 (1988), </volume> <pages> pp. 770-785. </pages>
Reference-contexts: Procedure 3 (which implements step 2.5 in Procedure 2) can be implemented in O (log n) time with a linear number of processors using the parallel merge sort of <ref> [2] </ref> and Euler-tour technique. 22 V. RAMACHANDRAN AND H. YANG Algorithm 2: Partial evaluation of a one-input-face PMC Input: A one-input-face PMC C and a partial input assignment to C. Output: Each gate in C that can be evaluated is assigned a value 0 or 1. 1.
Reference: [3] <author> A. L. Delcher and S. R. Kosaraju, </author> <title> An N C algorithm for evaluating monotone planar circuits, </title> <note> SIAM J. Comput., to appear. </note>
Reference-contexts: The first N C algorithm for the general PMCVP was given in Yang [24]; this algorithm runs in O (log 3 n) time on an EREW PRAM, and uses the straight-line code parallel evaluation technique of Miller, Ramachandran & Kaltofen [18]. Recently Delcher & Kosaraju <ref> [3] </ref> have given another N C algorithm for the general PMCVP that runs in O (log 4 n) time using a polynomial number of processors on a CREW PRAM. <p> In one sense our algorithm can be considered to be simpler than the one in [20] since our new approach allows us to eliminate some tedious case analysis used in [20]. Our algorithm uses some ideas from [20], as well as from [24] and <ref> [3] </ref>. In the highest level of our algorithm, we use an approach similar to that used in [3] to transform a general PMC into `face f induced subcircuits' (using the terminology of [24], these circuits are called `focused circuits' in [3]). <p> Our algorithm uses some ideas from [20], as well as from [24] and <ref> [3] </ref>. In the highest level of our algorithm, we use an approach similar to that used in [3] to transform a general PMC into `face f induced subcircuits' (using the terminology of [24], these circuits are called `focused circuits' in [3]). These subcircuits are then evaluated using an algorithm to evaluate a `one-input-face PMC'. <p> some ideas from [20], as well as from [24] and <ref> [3] </ref>. In the highest level of our algorithm, we use an approach similar to that used in [3] to transform a general PMC into `face f induced subcircuits' (using the terminology of [24], these circuits are called `focused circuits' in [3]). These subcircuits are then evaluated using an algorithm to evaluate a `one-input-face PMC'. The major contribution of our paper is our efficient parallel algorithm to evaluate a one-input-face PMC, which is a PMC, not necessarily layered, all of whose input nodes are on the boundary of one face. <p> The problem of partially evaluating C f given an f -partial input assignment is called the f-partial evaluation of C f . Algorithm 3 gives our method to perform an f-partial evaluation of C f . Algorithm 3 is similar to an algorithm in <ref> [3] </ref> which first layers a face induced circuit (which squares the size of the circuit) and then recursively partitions the circuit at an appropriate layer. Our algorithm performs a more efficient evaluation by working on a face induced circuit directly and partitioning the circuit according to its topological ordering. <p> The smaller PMCs are evaluated recursively while each face induced subcircuit is evaluated by Algorithm 3. We then show the correctness and complexity of Algorithm 4 in Lemma 5.1 and Theorem 5.1. A sketch of an algorithm similar to Algorithm 4 is given in <ref> [3] </ref>. Lemma 5.1. Each connected subcircuit in steps 3 & 7 is a general PMC with a complete input assignment. 26 V. RAMACHANDRAN AND H. YANG Proof.
Reference: [4] <author> P. W. Dymond and S. A. Cook, </author> <title> Hardware complexity and parallel computation, </title> <booktitle> Proc. 21th IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1980, </year> <pages> pp. 360-372. </pages>
Reference-contexts: The parallel computation model we use here is the EREW PRAM model [14]. Here is a summary of earlier results for the PMCVP. Goldschlager [7, 8], Dymond & Cook <ref> [4] </ref>, and Mayr [17] have shown that the problem of evaluating a special layered form of PMC is in N C 2 .
Reference: [5] <author> H. Gazit, </author> <title> An optimal deterministic EREW parallel algorithm for finding connected components in a low genus graph, </title> <booktitle> Proc. 5th International Parallel Processing Symp., </booktitle> <year> 1991, </year> <pages> pp. 84-90. </pages>
Reference-contexts: Lemma 3.16 shows that step 5 can be implemented in the same time complexity. Step 8 can be implemented in O (log n) time optimally by applying the algorithm in <ref> [5] </ref> for finding connected components in a planar undirected graph. By Lemma 3.15, the number of the recursive levels needed to complete the evaluation is O (log n). Therefore, the overall time needed by Algorithm 1 is bounded by O (log 2 n). <p> The connectivity of a plane undirected graph in steps 8 & 11 can be solved in O (log n) time using n= log n processors on an EREW by the algorithm in Gazit <ref> [5] </ref>. Steps 3-6 & 9-10 can be implemented in O (log n) time using n= log n processors. Step 11 takes O (log 2 n) time using n processors by Theorem 3.2. Let n 0 be the number of non-input gates in the original C f . <p> Hence the total time needed in step 1 is O (log 5 n). The connectivity of a plane undirected graph in steps 1, 3, and 7 can be solved in O (log n) time using n processors on an EREW by the algorithm in Gazit <ref> [5] </ref>. By Theorem 4.1, steps 4-6 & 8 can be implemented in O (log 4 n) time using n processors on an EREW. It is easy to see that the connected subcircuits in steps 3 & 7 are of size n=2, and the subcircuits obtained in each step are disjoint.
Reference: [6] <author> A. M. Gibbons and W. Rytter, </author> <title> An optimal parallel algorithm for dynamic expression evaluation and its applications, </title> <booktitle> Symp. on Foundations of Software Technology and Theoretical Comp. </booktitle> <publisher> Sci., Springer-Verlag, </publisher> <year> 1986, </year> <pages> pp. 453-469. </pages>
Reference: [7] <author> L. M. Goldschlager, </author> <title> A space efficient algorithm for the monotone planar circuit value problem, </title> <journal> Information Processing Letters, </journal> <volume> 10 (1980), </volume> <pages> pp. 25-27. </pages>
Reference-contexts: In this paper we give an efficient parallel algorithm for the PMCVP that runs in polylog time using a linear number of processors. The parallel computation model we use here is the EREW PRAM model [14]. Here is a summary of earlier results for the PMCVP. Goldschlager <ref> [7, 8] </ref>, Dymond & Cook [4], and Mayr [17] have shown that the problem of evaluating a special layered form of PMC is in N C 2 .
Reference: [8] <author> L. M. Goldschlager, </author> <title> A unified approach to models of synchronous parallel machines, </title> <booktitle> Proc. 10th ACM Symp. on Theory of Comput., </booktitle> <year> 1978, </year> <pages> pp. 89-94. </pages>
Reference-contexts: In this paper we give an efficient parallel algorithm for the PMCVP that runs in polylog time using a linear number of processors. The parallel computation model we use here is the EREW PRAM model [14]. Here is a summary of earlier results for the PMCVP. Goldschlager <ref> [7, 8] </ref>, Dymond & Cook [4], and Mayr [17] have shown that the problem of evaluating a special layered form of PMC is in N C 2 .
Reference: [9] <author> L. M. Goldschlager, </author> <title> The monotone and planar circuit value problems are log space complete for P ", SIGACT News, </title> <booktitle> 9 (1977), </booktitle> <pages> pp. 25-29. </pages>
Reference: [10] <author> S. Guattery and G. L. Miller, </author> <title> A contraction procedure for planar directed graphs, </title> <booktitle> Proc. 4th ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1992, </year> <pages> pp. 431-441. </pages>
Reference-contexts: Some special cases of CVP have been studied, among which the monotone circuit value problem, where the Boolean circuit has only AND and OR gates, and the planar circuit value problem, where the Boolean circuit has a plane embedding, have been shown to be P -complete by Goldschlager <ref> [10] </ref>. A planar monotone circuit (PMC) is a Boolean circuit that is both planar and monotone. One interesting special case of CVP is the planar monotone circuit value problem (PMCVP), which is the problem of evaluating a PMC. <p> Proof. The correctness of Algorithm 4 has been shown in Lemmas 5.1 & 5.2. The reachability in steps 1, 3, and 7 can be implemented in O (log 4 n) time using n processors on an EREW by the multiple-source reachability algorithm for planar digraphs in Guattery & Miller <ref> [10] </ref>. The k in step 1 can be found by a binary search. Hence the total time needed in step 1 is O (log 5 n). <p> Note that the high power in the logarithm for the running time is mainly due to the running time of the reachability algorithms in <ref> [10] </ref> and [12]. An improvement in the running time of the parallel algorithms for reachability in a plane DAG would imply an improvement in the running time of our algorithm. EFFICIENT PARALLEL PLANAR MONOTONE CIRCUIT VALUE 27
Reference: [11] <author> M. D. Hutton and A. Lubiw, </author> <title> Upward planar drawing of single source acyclic digraphs, </title> <booktitle> Proc. 2nd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1991, </year> <pages> pp. 203-211. </pages>
Reference-contexts: This property is crucial to many definitions given in this subsection. Note that not every one-input-face PMC has a downward plane drawing <ref> [11] </ref> as in Figure 1, if f I and f O are different faces. Lemma 3.1. Every face in C aug has exactly one source and one sink. Proof. Every gate in C aug is reachable from s and reachable to t.
Reference: [12] <author> M. Y. Kao and P. Klein, </author> <title> Toward overcoming the transitive-closure bottleneck: efficient parallel algorithms for planar digraphs, </title> <booktitle> Proc. 22nd ACM Symp. on Theory of Comput., </booktitle> <year> 1990, </year> <pages> pp. 181-192. </pages>
Reference-contexts: It is straightforward to see that other steps in Algorithm 3 are correct. Step 1 takes constant time. Step 2 can be implemented in O (log 3 n) time using n processors on an EREW by Theorem 4.1 in Kao & Klein <ref> [12] </ref>. The connectivity of a plane undirected graph in steps 8 & 11 can be solved in O (log n) time using n= log n processors on an EREW by the algorithm in Gazit [5]. <p> Note that the high power in the logarithm for the running time is mainly due to the running time of the reachability algorithms in [10] and <ref> [12] </ref>. An improvement in the running time of the parallel algorithms for reachability in a plane DAG would imply an improvement in the running time of our algorithm. EFFICIENT PARALLEL PLANAR MONOTONE CIRCUIT VALUE 27
Reference: [13] <author> M. Y. Kao and G. Shannon, </author> <title> Local reorientation, global order, and planar topology, </title> <booktitle> Proc. 18th ACM Symp. on Theory of Comput., </booktitle> <year> 1986, </year> <pages> pp. 160-168. </pages>
Reference-contexts: designing our efficient parallel algorithm for the PMCVP we have developed a variety of efficient parallel algorithms for processing planar DAGs, especially the technique of working on the dual of a planar DAG. (Other examples of algorithmic techniques based on the dual of a plane embedding can be found in <ref> [22, 13] </ref>.) These tools are likely to be of use in algorithms for other problems on planar directed graphs.
Reference: [14] <author> R. M. Karp and V. Ramachandran, </author> <title> Parallel algorithms for shared memory machines, </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <editor> J. Van Leeuwen, ed., </editor> <publisher> North Holland, </publisher> <year> 1990, </year> <pages> pp. 869-941. </pages>
Reference-contexts: In this paper we give an efficient parallel algorithm for the PMCVP that runs in polylog time using a linear number of processors. The parallel computation model we use here is the EREW PRAM model <ref> [14] </ref>. Here is a summary of earlier results for the PMCVP. Goldschlager [7, 8], Dymond & Cook [4], and Mayr [17] have shown that the problem of evaluating a special layered form of PMC is in N C 2 .
Reference: [15] <author> S. R. Kosaraju and A. L. Delcher, </author> <title> Optimal parallel evaluation of tree-structured computations by raking, </title> <booktitle> Proc. 3rd Aegean Workshop on Comput., </booktitle> <publisher> Springer-Verlag LNCS 319 (1988), </publisher> <pages> pp. 101-110. </pages>
Reference: [16] <author> R. E. Ladner, </author> <title> The circuit value problem is log space complete for P , SIGACT News, </title> <booktitle> 1975, </booktitle> <pages> pp. 18-20. </pages>
Reference-contexts: The problem of evaluating a Boolean circuit, given the values of its inputs, is called the circuit value problem (CVP). This is a central problem in the area of algorithms and complexity. Ladner <ref> [16] </ref> has shown that CVP is P -complete under log space reductions.
Reference: [17] <author> E. M. Mayr, </author> <title> The dynamic tree expression problem, </title> <booktitle> Proc. Princeton Workshop on Algorithms, Architecture and Technology Issues for Models of Concurrent Computation, Chap. </booktitle> <volume> 10, </volume> <year> 1987, </year> <pages> pp. 157-179. </pages>
Reference-contexts: The parallel computation model we use here is the EREW PRAM model [14]. Here is a summary of earlier results for the PMCVP. Goldschlager [7, 8], Dymond & Cook [4], and Mayr <ref> [17] </ref> have shown that the problem of evaluating a special layered form of PMC is in N C 2 .
Reference: [18] <author> G. L. Miller, V. Ramachandran and E. Kaltofen, </author> <title> Efficient parallel evaluation of straight-line code and arithmetic circuits, </title> <journal> SIAM J. Comput., </journal> <volume> 17 (1988), </volume> <pages> pp. 687-695. </pages>
Reference-contexts: The first N C algorithm for the general PMCVP was given in Yang [24]; this algorithm runs in O (log 3 n) time on an EREW PRAM, and uses the straight-line code parallel evaluation technique of Miller, Ramachandran & Kaltofen <ref> [18] </ref>. Recently Delcher & Kosaraju [3] have given another N C algorithm for the general PMCVP that runs in O (log 4 n) time using a polynomial number of processors on a CREW PRAM. <p> Our results are of interest in the context of parallel complexity since all of the earlier algorithms for the PMCVP used indirect methods such as the relationship between sequential space and parallel time [1] or the parallel evaluation of straight-line code <ref> [18] </ref> to place the problem in NC. By using direct techniques, not only are we able to place the problem in NC, but we are able to obtain a very efficient algorithm for its solution. Finally, the evaluation of circuits is a basic and important problem in computer science.
Reference: [19] <author> V. Ramachandran and J. H. Reif, </author> <title> Planarity testing in parallel Technical Report, </title> <type> TR 90-15, </type> <institution> Dept. of Computer Science, Univ. of Texas at Austin, </institution> <note> 1990; Preliminary version appears as An optimal parallel algorithm for graph planarity, Proc. 30th IEEE Symp. on Foundations of Comp. Sci., </note> <year> 1989, </year> <pages> pp. 282-287. </pages>
Reference-contexts: In the rest of the paper, whenever we use the term PMC, we should assume that the PMC is given with an embedding. In case an embedding is not given, we can use the algorithm in Ramachandran & Reif <ref> [19] </ref> to obtain one.
Reference: [20] <author> V. Ramachandran and H. Yang, </author> <title> An efficient parallel algorithm for the layered planar monotone circuit value problem, </title> <booktitle> Proc. 1st European Symp. on Algorithms, </booktitle> <publisher> Springer-Verlag, LNCS 726, </publisher> <address> Bad Honnef, Germany, </address> <year> 1993, </year> <pages> pp. 321-332. </pages>
Reference-contexts: An extended abstract of this work appears in [21]. y Department of Computer Sciences, University of Texas at Austin, Austin, Texas, 78712-1188 (vlr@cs.utexas.edu, yanghh@cs.utexas.edu). 1 2 V. RAMACHANDRAN AND H. YANG In earlier work (Ramachandran & Yang <ref> [20] </ref>) we gave an O (log 2 n) time EREW PRAM algorithm using a linear number of processors to evaluate a layered PMC. The algorithm we present in this paper, when restricted to evaluate a layered PMC, works with the same processor-time bounds as the one in [20]; however, it is <p> (Ramachandran & Yang <ref> [20] </ref>) we gave an O (log 2 n) time EREW PRAM algorithm using a linear number of processors to evaluate a layered PMC. The algorithm we present in this paper, when restricted to evaluate a layered PMC, works with the same processor-time bounds as the one in [20]; however, it is substantially different in that it works on a plane embedding of the PMC and its dual graph instead of exploiting a nice layered structure as in [20]. In one sense our algorithm can be considered to be simpler than the one in [20] since our new approach <p> in this paper, when restricted to evaluate a layered PMC, works with the same processor-time bounds as the one in <ref> [20] </ref>; however, it is substantially different in that it works on a plane embedding of the PMC and its dual graph instead of exploiting a nice layered structure as in [20]. In one sense our algorithm can be considered to be simpler than the one in [20] since our new approach allows us to eliminate some tedious case analysis used in [20]. Our algorithm uses some ideas from [20], as well as from [24] and [3]. <p> as the one in <ref> [20] </ref>; however, it is substantially different in that it works on a plane embedding of the PMC and its dual graph instead of exploiting a nice layered structure as in [20]. In one sense our algorithm can be considered to be simpler than the one in [20] since our new approach allows us to eliminate some tedious case analysis used in [20]. Our algorithm uses some ideas from [20], as well as from [24] and [3]. <p> a plane embedding of the PMC and its dual graph instead of exploiting a nice layered structure as in <ref> [20] </ref>. In one sense our algorithm can be considered to be simpler than the one in [20] since our new approach allows us to eliminate some tedious case analysis used in [20]. Our algorithm uses some ideas from [20], as well as from [24] and [3]. <p> its dual graph instead of exploiting a nice layered structure as in <ref> [20] </ref>. In one sense our algorithm can be considered to be simpler than the one in [20] since our new approach allows us to eliminate some tedious case analysis used in [20]. Our algorithm uses some ideas from [20], as well as from [24] and [3]. In the highest level of our algorithm, we use an approach similar to that used in [3] to transform a general PMC into `face f induced subcircuits' (using the terminology of [24], these circuits are called `focused circuits' in [3]). <p> The rest of this paper is organized as follows. In Section 3, we present our algorithm to evaluate a one-input-face PMC. The treatment in Section 3 is self-contained and does not depend on any result in <ref> [20] </ref>. In Section 4 we give an algorithm that runs in polylog time using n processors on an EREW PRAM for evaluating a face f induced subcircuit given a special type of an input assignment. This algorithm works by recursively applying the algorithm for evaluating a one-input-face PMC. <p> We then solve the problem of partially evaluating a one-input-face PMC in subsection 3.4. Our approach is to first find a set of gates in C that are guaranteed to have value 1, and then recursively evaluate the remaining smaller unevaluated subcircuits of C. In an earlier paper <ref> [20] </ref> we had considered a special case of a one-input-face PMC, namely, a layered PMC (as mentioned in the introduction). <p> All steps in Algorithm 1 are quite straightforward to implement except step 5, which is implemented by Procedure 2. Step 2.5 in Procedure 2 is implemented by Procedure 3, which is similar to a procedure used for the layered PMC in <ref> [20] </ref>. Lemma 3.16. Procedure 2 (i.e., step 5 in Algorithm 1) correctly finds the edges in A aug that are on the boundaries of valid bases of C aug , and it runs in O (log n) time using a linear number of processors on an EREW PRAM. Proof.
Reference: [21] <author> V. Ramachandran and H. Yang, </author> <title> An efficient parallel algorithm for the general planar monotone circuit value problem, </title> <booktitle> Proc. 5nd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 622-631. </pages>
Reference-contexts: An extended abstract of this work appears in <ref> [21] </ref>. y Department of Computer Sciences, University of Texas at Austin, Austin, Texas, 78712-1188 (vlr@cs.utexas.edu, yanghh@cs.utexas.edu). 1 2 V. RAMACHANDRAN AND H.
Reference: [22] <author> V. Ramachandran and H. Yang, </author> <title> Finding the closed partition of a planar graph, </title> <journal> Algorith-mica, </journal> <volume> 11 (1994), </volume> <pages> pp. 443-468. </pages>
Reference-contexts: designing our efficient parallel algorithm for the PMCVP we have developed a variety of efficient parallel algorithms for processing planar DAGs, especially the technique of working on the dual of a planar DAG. (Other examples of algorithmic techniques based on the dual of a plane embedding can be found in <ref> [22, 13] </ref>.) These tools are likely to be of use in algorithms for other problems on planar directed graphs.
Reference: [23] <author> R. E. Tarjan and U. Vishkin, </author> <title> An efficient parallel biconnectivity algorithm, </title> <journal> SIAM J. Com-put., </journal> <volume> 14 (1985), </volume> <pages> pp. 862-874. </pages>
Reference-contexts: BASE l (f fl ) (and hence jBASE l (f fl )j) can be easily computed using the Euler-tour technique <ref> [23] </ref> on T fl l (see Procedure 2 in subsection 3.3 for details).
Reference: [24] <author> H. Yang, </author> <title> An N C algorithm for the general planar monotone circuit value problem, </title> <booktitle> Proc. 3rd IEEE Symp. on Parallel and Distributed Processing, </booktitle> <year> 1991, </year> <pages> pp. 196-203. </pages>
Reference-contexts: Goldschlager [7, 8], Dymond & Cook [4], and Mayr [17] have shown that the problem of evaluating a special layered form of PMC is in N C 2 . The first N C algorithm for the general PMCVP was given in Yang <ref> [24] </ref>; this algorithm runs in O (log 3 n) time on an EREW PRAM, and uses the straight-line code parallel evaluation technique of Miller, Ramachandran & Kaltofen [18]. <p> In one sense our algorithm can be considered to be simpler than the one in [20] since our new approach allows us to eliminate some tedious case analysis used in [20]. Our algorithm uses some ideas from [20], as well as from <ref> [24] </ref> and [3]. In the highest level of our algorithm, we use an approach similar to that used in [3] to transform a general PMC into `face f induced subcircuits' (using the terminology of [24], these circuits are called `focused circuits' in [3]). <p> Our algorithm uses some ideas from [20], as well as from <ref> [24] </ref> and [3]. In the highest level of our algorithm, we use an approach similar to that used in [3] to transform a general PMC into `face f induced subcircuits' (using the terminology of [24], these circuits are called `focused circuits' in [3]). These subcircuits are then evaluated using an algorithm to evaluate a `one-input-face PMC'.
References-found: 24

