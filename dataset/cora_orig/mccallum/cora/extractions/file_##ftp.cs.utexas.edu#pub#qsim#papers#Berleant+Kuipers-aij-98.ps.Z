URL: file://ftp.cs.utexas.edu/pub/qsim/papers/Berleant+Kuipers-aij-98.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/qr/abstracts-qr.html
Root-URL: 
Email: djb@engr.uark.edu  kuipers@cs.utexas.edu  
Title: Qualitative and Quantitative Simulation: Bridging the Gap used for prediction, measurement interpretation, diagnosis, and even
Author: Daniel Berleant Benjamin Kuipers 
Note: Q3's techniques have been  This research was supported in part by NSF grants IRI-8905494 and IRI-8904454 and NASA grant NAG 5207, and performed in part for the Jet Propulsion Laboratory, California Institute of Technology, sponsored by the National Aeronautics and Space Administration. Reference herein to any specific commercial product, process, or service does not constitute or imply its endorsement by any organization.  
Date: August 4, 1997  
Address: 72701  Austin, TX 78712  
Affiliation: Dept. of Computer Systems Engineering University of Arkansas Fayetteville, AR  Department of Computer Sciences University of Texas  
Abstract: Shortcomings of qualitative simulation and of quantitative simulation motivate combining them to do simulations exhibiting strengths of both. The resulting class of techniques is called semi-quantitative simulation. One approach to semi-quantitative simulation is to use numeric intervals to represent incomplete quantitative information. In this research we demonstrate semi-quantitative simulation using intervals in an implemented semi-quantitative simulator called Q3. Q3 progressively refines a qualitative simulation, providing increasingly specific quantitative predictions which can converge to a numerical simulation in the limit while retaining important correctness guarantees from qualitative and interval simulation techniques. Q3's simulations are based on a technique we call step size refinement. While a pure qualitative simulation has a very coarse step size, representing the state of a system trajectory at relatively few qualitatively distinct states, Q3 interpolates newly explicit states between distinct qualitative states, thereby representing more states which instantiate new constraints, leading to improved quantitative inferences. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> H. Abelson and G. Sussman, </author> <title> Structure and Interpretation of Computer Programs (MIT Press, </title> <address> Cambridge, Massachusetts, </address> <year> 1985). </year>
Reference-contexts: Thus, target interval splitting ("TIS") is used next, to try raising T2 and lowering T1. Starting with the knowledge that T2 2 <ref> [326; 1] </ref>, Q3's implementation of target interval splitting assumed T2 2 [326; 434], let the simulation settle via constraing propagation as usual, and discovered that settling led to an inconsistency (Table 2 exemplifies detecting an inconsistency). <p> Therefore T2 62 [326; 434], so [326; 434] was trimmed from the interval for T2, giving T2 2 <ref> [434; 1] </ref>. (Before successfully ruling out [326; 434], target interval splitting unsuccessfully tried to rule out the larger [326; 651]: Subsequent to ruling out [326; 434], target interval splitting unsuccessfully tried ruling out the adjacent interval [434; 579], successfully ruled out [434; 482], unsuccessfully tried ruling out [482; 536], successfully ruled <p> For each copy, the effects of the new sub-interval for T1 propagate throughout the copy's constraint network representation (Table 1 row f). After interpolating just one more state in each behavior, the behavior for which T1 2 <ref> [10 6 ; 1] </ref> is refuted, and the one for which T1 2 [331; 10 6 ] now has a gap between T1 and T2 (Table 1 row g). The new gap satisfies Subgoal 3a, enabling step size refinement in support of Subgoal 3. <p> Abelson & Sussman 1985 p. 84-88 and Simmons 1986 Section 2.2.4). The simplest such expression is (X X): Its value is obviously 0, but nave evaluation can give a weaker answer. For example, given X 2 <ref> [1; 2] </ref> then straightforward calculation gives X X = [1; 2] [1; 2] = [1; 1]. Excess width can occur in evaluating some expressions containing subtractions or divisions in which an interval valued symbol appears more than once. Eliminating excess width in the general case is non-trivial. <p> Abelson & Sussman 1985 p. 84-88 and Simmons 1986 Section 2.2.4). The simplest such expression is (X X): Its value is obviously 0, but nave evaluation can give a weaker answer. For example, given X 2 <ref> [1; 2] </ref> then straightforward calculation gives X X = [1; 2] [1; 2] = [1; 1]. Excess width can occur in evaluating some expressions containing subtractions or divisions in which an interval valued symbol appears more than once. Eliminating excess width in the general case is non-trivial. <p> Abelson & Sussman 1985 p. 84-88 and Simmons 1986 Section 2.2.4). The simplest such expression is (X X): Its value is obviously 0, but nave evaluation can give a weaker answer. For example, given X 2 <ref> [1; 2] </ref> then straightforward calculation gives X X = [1; 2] [1; 2] = [1; 1]. Excess width can occur in evaluating some expressions containing subtractions or divisions in which an interval valued symbol appears more than once. Eliminating excess width in the general case is non-trivial. <p> The simplest such expression is (X X): Its value is obviously 0, but nave evaluation can give a weaker answer. For example, given X 2 [1; 2] then straightforward calculation gives X X = [1; 2] [1; 2] = <ref> [1; 1] </ref>. Excess width can occur in evaluating some expressions containing subtractions or divisions in which an interval valued symbol appears more than once. Eliminating excess width in the general case is non-trivial. <p> For example, as Davis (1987) points out, x 2 <ref> [1; 2] </ref> implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] [2; 3] = [ 2 3 ] = [1; 3]: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as <p> For example, as Davis (1987) points out, x 2 <ref> [1; 2] </ref> implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] [2; 3] = [ 2 3 ] = [1; 3]: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as a theoretical property (both in numerical simulation and in the present case) assumes that the step size can be made infinitesimally small. <p> For example, as Davis (1987) points out, x 2 [1; 2] implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] [2; 3] = [ 2 3 ] = <ref> [1; 3] </ref>: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as a theoretical property (both in numerical simulation and in the present case) assumes that the step size can be made infinitesimally small. <p> Example: if the region of convergence is <ref> [0; 1] </ref> successive interpolation points of 0.5, 0.75, and 0.875 would not be allowed because a time point must be interpolated in the gap (0; 0:5) before the gap (0:75; 1) if a strictly monotonic decrease in maximum step size is to be achieved. * The decrease in maximum step size <p> Example: if as before the region of convergence is <ref> [0; 1] </ref>; successive interpolation points of 0:1; 0:11; 0:111; : : : would lead to strictly decreasing maximum step size but not to convergence. * If there is no gap, as might occur when initial conditions are weak, step size refinement can be run only after a gap is created. <p> Example: step size refinement using a gap in Inside Temperature instead of TIME occurs in Figure 11. 4.3.2 Termination Constraint propagation is guaranteed to terminate when the label sets containing candidate values have a finite number of elements <ref> (Mackworth & Freuder 1985) </ref>. However, in the case of intervals or other label sets containing an infinite number of elements, settling may be asymptotic and termination may not occur. <p> These approximations are claimed to produce "very good" results (Bonissone & Decker 1986 p. 230) with "very little error" (Bonissone 1980). Exact multiplication of trapezoidal fuzzy intervals is computationally complex, typically yielding a product with curved sides <ref> (Kaufmann & Gupta 1985 Figure 1.12) </ref> which is therefore not trapezoidal. <p> Each binary constraint (op a b) may be expressed as an equation op (a) = b and each ternary constraint (op a b c) as 31 Target Interval Splitting (TIS): Outline GIVEN: * Y = X 2 X, and X 2 <ref> [0; 1] </ref> THEREFORE: * Y 2 [1; 1] by constraint propagation (shown in this Figure). OBJECTIVE: * Narrow Y (the target) further, by testing and ruling out pieces of its current interval as in Figure 14. <p> Each binary constraint (op a b) may be expressed as an equation op (a) = b and each ternary constraint (op a b c) as 31 Target Interval Splitting (TIS): Outline GIVEN: * Y = X 2 X, and X 2 [0; 1] THEREFORE: * Y 2 <ref> [1; 1] </ref> by constraint propagation (shown in this Figure). OBJECTIVE: * Narrow Y (the target) further, by testing and ruling out pieces of its current interval as in Figure 14. <p> OBJECTIVE: * Narrow Y (the target) further, by testing and ruling out pieces of its current interval as in Figure 14. H H H H H H @ H H H H H H @ H H H H H H @ $ $ $ X Y <ref> [0; 1] </ref> gation concludes Y 2 [1; 1]. This conclusion is correct, but excessively weak, and is strengthened in Figure 14. an equation a op b = c. Constraints over more than three quantities are expressed as a longer equation (as in the mean value constraint, Section 2.1.3). <p> H H H H H H @ H H H H H H @ H H H H H H @ $ $ $ X Y [0; 1] gation concludes Y 2 <ref> [1; 1] </ref>. This conclusion is correct, but excessively weak, and is strengthened in Figure 14. an equation a op b = c. Constraints over more than three quantities are expressed as a longer equation (as in the mean value constraint, Section 2.1.3). <p> by the rocket of Section 3, because a behavior split can always put an infinite endpoint in one behavior, usually making the other one Lipschitz. 14 The term natural interval extension was defined in Section 2.1.3. 32 TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 <ref> [1; 1] </ref> constraint propagation [1; 0] [0; 1] Split and test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X <p> Section 3, because a behavior split can always put an infinite endpoint in one behavior, usually making the other one Lipschitz. 14 The term natural interval extension was defined in Section 2.1.3. 32 TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 [1; 1] constraint propagation <ref> [1; 0] </ref> [0; 1] Split and test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] <p> because a behavior split can always put an infinite endpoint in one behavior, usually making the other one Lipschitz. 14 The term natural interval extension was defined in Section 2.1.3. 32 TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 [1; 1] constraint propagation [1; 0] <ref> [0; 1] </ref> Split and test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval <p> put an infinite endpoint in one behavior, usually making the other one Lipschitz. 14 The term natural interval extension was defined in Section 2.1.3. 32 TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 [1; 1] constraint propagation [1; 0] [0; 1] Split and test 2 <ref> [1; 0:5] </ref> [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split <p> infinite endpoint in one behavior, usually making the other one Lipschitz. 14 The term natural interval extension was defined in Section 2.1.3. 32 TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 [1; 1] constraint propagation [1; 0] [0; 1] Split and test 2 [1; 0:5] <ref> [0:5; 1] </ref> Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test <p> other one Lipschitz. 14 The term natural interval extension was defined in Section 2.1.3. 32 TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 [1; 1] constraint propagation [1; 0] [0; 1] Split and test 2 [1; 0:5] <ref> [0:5; 1] </ref> Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test <p> interval extension was defined in Section 2.1.3. 32 TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 [1; 1] constraint propagation [1; 0] [0; 1] Split and test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] <ref> [+0:25; 1] </ref> Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . [0:25 <p> TIS tests low bounds: : : Iteration Interval (s) Reason 1 Y 2 [1; 1] constraint propagation [1; 0] [0; 1] Split and test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] <ref> [0:125; 1] </ref> Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . [0:25 * 1 ; 1] Conclude : : :then <p> (s) Reason 1 Y 2 [1; 1] constraint propagation [1; 0] [0; 1] Split and test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] <ref> [0:3125; 1] </ref> Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . [0:25 * 1 ; 1] Conclude : : :then high bounds N [0:25 * 1 ; 1] <p> propagation [1; 0] [0; 1] Split and test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] <ref> [0:3125; 1] </ref> Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . [0:25 * 1 ; 1] Conclude : : :then high bounds N [0:25 * 1 ; 1] Given [0:25 * 1 ; +0:375 * 1 <p> test 2 [1; 0:5] [0:5; 1] Re-split and test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] <ref> [+0:3438; 1] </ref> Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . [0:25 * 1 ; 1] Conclude : : :then high bounds N [0:25 * 1 ; 1] Given [0:25 * 1 ; +0:375 * 1 2 ; 1] Split and test . <p> test X Rule out [0:5; 1] Narrowed interval 3 [0:5; +0:25] [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] <ref> [+0:0158; 1] </ref> Split and test . . . . . . [0:25 * 1 ; 1] Conclude : : :then high bounds N [0:25 * 1 ; 1] Given [0:25 * 1 ; +0:375 * 1 2 ; 1] Split and test . . . . . . [0:25 * 1 <p> [+0:25; 1] Split and test 4 [0:5; 0:125] [0:125; 1] Re-split and test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . <ref> [0:25 * 1 ; 1] </ref> Conclude : : :then high bounds N [0:25 * 1 ; 1] Given [0:25 * 1 ; +0:375 * 1 2 ; 1] Split and test . . . . . . [0:25 * 1 ; 0 + * 2 ] Conclude The constraint network for <p> test 5 [0:5; 0:3125] [0:3125; 1] Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . <ref> [0:25 * 1 ; 1] </ref> Conclude : : :then high bounds N [0:25 * 1 ; 1] Given [0:25 * 1 ; +0:375 * 1 2 ; 1] Split and test . . . . . . [0:25 * 1 ; 0 + * 2 ] Conclude The constraint network for Y = X 2 X was shown in Figure 13. <p> Re-split and test X Rule out [0:3125; 1] Narrowed interval 6 [0:3125; +0:3438] [+0:3438; 1] Split and test 7 [0:3125; +0:0158] [+0:0158; 1] Split and test . . . . . . [0:25 * 1 ; 1] Conclude : : :then high bounds N [0:25 * 1 ; 1] Given <ref> [0:25 * 1 ; +0:375 * 1 2 ; 1] </ref> Split and test . . . . . . [0:25 * 1 ; 0 + * 2 ] Conclude The constraint network for Y = X 2 X was shown in Figure 13. <p> Target interval splitting first tests the lower half of a target interval, Y 2 <ref> [1; 1] </ref> in this example, by setting Y to [1; 0], then propagating. <p> Target interval splitting first tests the lower half of a target interval, Y 2 [1; 1] in this example, by setting Y to <ref> [1; 0] </ref>, then propagating. If the network settles successfully (i.e. has a solution), then it tests the lower quarter, [1; :5] in this case, the lower eighth if necessary, etc., until a sub-interval is found for which the network has no solution. That sub-interval is therefore inconsistent, and ruled out. <p> Target interval splitting first tests the lower half of a target interval, Y 2 [1; 1] in this example, by setting Y to [1; 0], then propagating. If the network settles successfully (i.e. has a solution), then it tests the lower quarter, <ref> [1; :5] </ref> in this case, the lower eighth if necessary, etc., until a sub-interval is found for which the network has no solution. That sub-interval is therefore inconsistent, and ruled out. In the example, the lowest quarter, Y 2 [1; :5], was the first inconsistent sub-interval found. <p> successfully (i.e. has a solution), then it tests the lower quarter, <ref> [1; :5] </ref> in this case, the lower eighth if necessary, etc., until a sub-interval is found for which the network has no solution. That sub-interval is therefore inconsistent, and ruled out. In the example, the lowest quarter, Y 2 [1; :5], was the first inconsistent sub-interval found. Repeat the process for the highest half, quarter, etc. of the target. Inconsistent sub-intervals are marked with an "X" above. For Y = X 2 X, target interval splitting gradually narrows Y toward, yet never quite reaching, [:25; 0].
Reference: 2. <author> G. Alefeld and J. Herzberger, </author> <title> Introduction to Interval Computations (Academic Press, </title> <address> San Diego, </address> <year> 1983). </year>
Reference-contexts: Amount (T0) is the initial quantity of fluid in the tank. Overflow occurs at TIME=T1, when the value of Amount (T1) is the capacity of the tank. The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 <ref> [2; 5] </ref> [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other <p> Amount (T0) is the initial quantity of fluid in the tank. Overflow occurs at TIME=T1, when the value of Amount (T1) is the capacity of the tank. The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 [2; 5] <ref> [2; 3] </ref> $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so <p> The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 <ref> [2; 5] </ref> [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, <p> The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 <ref> [2; 5] </ref> [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, X Z Y and Y Z X. variables <p> The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 [2; 5] <ref> [2; 3] </ref> $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, X Z Y and Y Z X. variables concerned at particular points in time <p> Abelson & Sussman 1985 p. 84-88 and Simmons 1986 Section 2.2.4). The simplest such expression is (X X): Its value is obviously 0, but nave evaluation can give a weaker answer. For example, given X 2 <ref> [1; 2] </ref> then straightforward calculation gives X X = [1; 2] [1; 2] = [1; 1]. Excess width can occur in evaluating some expressions containing subtractions or divisions in which an interval valued symbol appears more than once. Eliminating excess width in the general case is non-trivial. <p> Abelson & Sussman 1985 p. 84-88 and Simmons 1986 Section 2.2.4). The simplest such expression is (X X): Its value is obviously 0, but nave evaluation can give a weaker answer. For example, given X 2 <ref> [1; 2] </ref> then straightforward calculation gives X X = [1; 2] [1; 2] = [1; 1]. Excess width can occur in evaluating some expressions containing subtractions or divisions in which an interval valued symbol appears more than once. Eliminating excess width in the general case is non-trivial. <p> Abelson & Sussman 1985 p. 84-88 and Simmons 1986 Section 2.2.4). The simplest such expression is (X X): Its value is obviously 0, but nave evaluation can give a weaker answer. For example, given X 2 <ref> [1; 2] </ref> then straightforward calculation gives X X = [1; 2] [1; 2] = [1; 1]. Excess width can occur in evaluating some expressions containing subtractions or divisions in which an interval valued symbol appears more than once. Eliminating excess width in the general case is non-trivial. <p> For example, as Davis (1987) points out, x 2 <ref> [1; 2] </ref> implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] [2; 3] = [ 2 3 ] = [1; 3]: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as <p> For example, as Davis (1987) points out, x 2 <ref> [1; 2] </ref> implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] [2; 3] = [ 2 3 ] = [1; 3]: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as a theoretical property (both in numerical simulation and in the present case) assumes that the step size can be made infinitesimally small. <p> For example, as Davis (1987) points out, x 2 [1; 2] implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] <ref> [2; 3] </ref> = [ 2 3 ] = [1; 3]: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as a theoretical property (both in numerical simulation and in the present case) assumes that the step size can be made infinitesimally small. <p> Values of x in the interval [104; 106] are full members of fuzzy interval Z; and those in the sloping areas are pos sible members. Subtraction would give the region of full membership in the difference Z Z as [104; 106][104; 106] = <ref> [2; 2] </ref>, the region of non-zero membership as [102; 107][102; 107] = [5; 5], and fuzzy edges of constant slope. However, Z is perfectly correlated with itself, so Z Z actually has full membership at 0 and zero membership everywhere else.
Reference: 3. <author> J. F. Allen, </author> <title> Maintaining knowledge about temporal intervals, </title> <note> Communications of the ACM 26 (11) (1983) 832-843. </note>
Reference-contexts: Amount (T0) is the initial quantity of fluid in the tank. Overflow occurs at TIME=T1, when the value of Amount (T1) is the capacity of the tank. The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 [2; 5] <ref> [2; 3] </ref> $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so <p> The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 [2; 5] [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " <ref> [0; 3] </ref> = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, X Z Y and Y Z X. variables concerned at particular <p> The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 [2; 5] <ref> [2; 3] </ref> $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, X Z Y and Y Z X. variables concerned at particular points in time <p> This reduces the step size of the simulation. Q3 by default picks values of t fl rounded to the nearest integer, to communicate better with the viewer by avoiding visual clutter in the display <ref> (Tufte 1983) </ref> (see Figure 6b). The multiple to which rounding is done is easily customizable and multiples of 200 were used in Figure 5. The values of the other model variables in this newly created state must be between their values in the two adjacent previously existing states. <p> For example, as Davis (1987) points out, x 2 [1; 2] implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] <ref> [2; 3] </ref> = [ 2 3 ] = [1; 3]: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as a theoretical property (both in numerical simulation and in the present case) assumes that the step size can be made infinitesimally small. <p> For example, as Davis (1987) points out, x 2 [1; 2] implies x + 1 2 [ 2 but straightforward calculation (e.g. by hand or in Q3), gives x + 1 2 [1; 2] [2; 3] = [ 2 3 ] = <ref> [1; 3] </ref>: Thus this example demonstrates convergence despite excess width. 4.2.1 The infinitesimal step size assumption Convergence as a theoretical property (both in numerical simulation and in the present case) assumes that the step size can be made infinitesimally small.
Reference: 4. <author> N. S. Asaithambi, S. Zuhe, and R. E. Moore, </author> <title> On computing the range of values, </title> <note> Computing 28 (1982) 225-237. </note>
Reference-contexts: The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 [2; 5] [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] <ref> [4; 6] </ref>) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, X Z Y and Y
Reference: 5. <author> D. Berleant, </author> <title> A unified representation for numerical and qualitative simulations, </title> <note> Applied Computing Review 3 (1) (Summer 1995) 23-26. </note>
Reference-contexts: Amount (T0) is the initial quantity of fluid in the tank. Overflow occurs at TIME=T1, when the value of Amount (T1) is the capacity of the tank. The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 <ref> [2; 5] </ref> [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other <p> The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 <ref> [2; 5] </ref> [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, <p> The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 <ref> [2; 5] </ref> [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] [4; 6]) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, X Z Y and Y Z X. variables <p> Example: Figure 2 illustrates a model (a) and its instantiated constraints (b). Example: A detailed, step-by-step account of how propagation through the expanded constraint network resulting from an interpolated time point led to markedly improved quantitative inferences appears in Berleant <ref> (1995) </ref>. 10 km m=s 2 . . . . . - -..... -..... [2950,7862] -..... -..... [5145,15360] -..... -..... [6851,22716] -..... -..... [8188,29995] -..... -..... [9223,37225] -..... -..... [9993,44421] -..... -..... [10525,51593] -..... -..... [10833,58745] -..... -..... [10924,65883] . . . . . -. . . . . . . . <p> Pragmatically oriented work shows that even one interpolation can lead to significantly improved quantitative bounds on model trajectories <ref> (Berleant 1995 provides a simple, detailed example) </ref>. 4.3 Stability In numerical simulation stability is, intuitively, the desirable characteristic that ": : :a change in the starting values by a fixed amount produces a bounded change in the numerical solution: : :" given a well-posed problem and sufficiently small step sizes (Gear <p> Subtraction would give the region of full membership in the difference Z Z as [104; 106][104; 106] = [2; 2], the region of non-zero membership as [102; 107][102; 107] = <ref> [5; 5] </ref>, and fuzzy edges of constant slope. However, Z is perfectly correlated with itself, so Z Z actually has full membership at 0 and zero membership everywhere else. While this particular example is trivial, such situations can be arbitrarily complex, just as with ordinary intervals.
Reference: 6. <author> Berleant, D., </author> <title> Automatically verified reasoning with both intervals and probability density functions, Interval Computations (1993 No. </title> <type> 2) 48-70. </type>
Reference-contexts: The mean value constraint (Section 2.1.3) relates six values, two each of Amount, Netflow, and TIME. 6 [2; 5] [2; 3] $ $ $ + Y + Z X := X " (Z Y ) = [2; 5] " ([6; 7] <ref> [4; 6] </ref>) = [2; 5] " [0; 3] = [2; 3] each terminal is narrowed by using the constraint to propagate the intervals currently at the other terminals, so an add constraint actually enforces three relations, one addition, Z X + Y , and two subtractions, X Z Y and Y
Reference: 7. <author> D. Berleant, </author> <title> The use of partial quantitative information with qualitative reasoning, </title> <type> Ph.D. thesis, technical report AI90-163, </type> <institution> Artificial Intelligence Laboratory, University of Texas, Austin, </institution> <address> TX (1991). </address>
Reference: 8. <author> D. Berleant, C. Chandra, K. Bogns, C. Liaw, L. Sheng, and J. Ch'ng, </author> <title> Probabilities of qualitative behaviors for dependability analysis of a fault tolerance model, </title> <booktitle> in: Conference Proceedings, 1992 Symposium on Applied Computing, </booktitle> <address> Kansas City, </address> <publisher> Missouri (ACM Press, </publisher> <address> New York, </address> <year> 1992) </year> <month> 883-889. </month> <title> Preliminary results appear in: </title> <booktitle> workshop notes, AAAI-91 Model Based Reasoning Workshop (1991). </booktitle>
Reference-contexts: Hyvonen <ref> (1992 p. 89-90) </ref>. <p> Q3, however, utilizes a constraint network. Fortunately, a network of arithmetic constraints is easily transformed into a set of equations <ref> (Hyvonen 1992 p. 81) </ref>.
Reference: 9. <author> D. Berleant and B. Kuipers, </author> <title> Qualitative-numeric simulation with Q3, </title> <note> in: Faltings & Struss (1992) 3-16. </note>
Reference-contexts: As distance increases (c), gravitation decreases. Qualitative simulation also produces another behavior in which the object falls back to Earth (not shown). This paper significantly revises and expands a preliminary account <ref> (Berleant and Kuipers 1992) </ref>, and provides a proof of convergence and stability for step size refinement. 2 Q3 and Step Size Refinement Q3 improves on pure qualitative simulation by augmenting qualitative simulation with quantitative inferences when quantitative information is available. <p> Then we can infer bottomHeight 2 [0; 200]. To illustrate arithmetic constraints, inferencing is exemplified by Figure 3 and is consistent with previous work <ref> (Hyvonen 1992) </ref>. Subtraction is modeled using the add (Figure 3), and division relations are modeled analogously with the mult constraint. <p> Hyvonen <ref> (1992 p. 89-90) </ref>. <p> Existing algorithms are either limited to linear problems and rather convoluted (Kolev et al. 1988) or computationally complex (Asaithambi et al. 1982), although progress on optimizing an apparent tradeoff between computational and conceptual complexity is reported by Cornelius and Lohner (1984) and Hyvonen <ref> (1992) </ref>. * Impossible values between possible values. Values in the middle of an interval may be impossible while values nearer to the endpoints are possible. This problem could be solved by allowing value description as disjoint sets of intervals, rather than a single interval. This strategy is central in Hyvonen (1992). <p> <ref> (1992) </ref>. * Impossible values between possible values. Values in the middle of an interval may be impossible while values nearer to the endpoints are possible. This problem could be solved by allowing value description as disjoint sets of intervals, rather than a single interval. This strategy is central in Hyvonen (1992). Q3 uses constraint propagation on interval labels, which is correct because no interval will be narrowed too much (Davis 1987). <p> Models for which all behaviors are inconsistent with observation are ruled out, ideally leaving just one remaining fault model (Kuipers and Berleant 1988; Kuipers 1994). MIMIC in its more recent version <ref> (Dvorak 1992) </ref> used time point interpolation to help diagnose fault models. 5.3 Measurement interpretation The concept of interpolating a state extends naturally to measurement interpretation, because a measurement partially specifies a new state, which can often be interpolated. <p> The effects of the measurement are then propagated, leading to better predictions for various model variables at various time points. Results of an experiment are summarized in Table 3. 5.3.2 Related work MIMIC <ref> (Dvorak 1992) </ref> does diagnosis by interpolating states containing the measured values, just as in the example above. The measured quantitative information is propagated and used to rule out alternative models. <p> Adding quantitative information can help. Q3 was part of a system that inferred probabilities for the qualitative behaviors of a fault tolerant system <ref> (Berleant et al. 1992) </ref>. Probability density functions (pdfs) were used instead of intervals to describe model input values. Pdfs are more informative than intervals. An interval represents a set of pdfs containing all pdfs with heights of zero beyond the interval endpoints, hence is a weaker description of value. <p> like QSIM addresses model switching though not as comprehensively as SIMGEN, Figure 11 showing a typical example.) 6.3 Fuzzy mathematics work Extension of qualitative simulation with fuzzy mathematics was first published by D'Ambrosio (1987), further discussed by Nordvik et al. (1988), and developed and fully implemented by Shen and Leitch <ref> (1992, 1993) </ref>. Shen and Leitch used trapezoidally shaped fuzzy intervals (Figure 12) with arithmetic operations as defined by Tong and Bonissone (1979), Bonissone (1980), Bonissone & Decker (1986), and DiCesare et al. (1990). <p> Q3, however, utilizes a constraint network. Fortunately, a network of arithmetic constraints is easily transformed into a set of equations <ref> (Hyvonen 1992 p. 81) </ref>. <p> Constraints over more than three quantities are expressed as a longer equation (as in the mean value constraint, Section 2.1.3). Transformation in the other direction, from equations to constraint networks, is also easily done <ref> (Hyvonen 1992 p. 76) </ref>. For example, the equation y 0 = x 0 (y+x 0 ) becomes the constraints (add y dxdt w), (mult dxdt w dydt), (d/dt x dxdt), and (d/dt y dydt). Unary operations are expressed as binary constraints and binary operations as ternary constraints.
Reference: 10. <author> D. G. Bobrow, ed., </author> <title> Qualitative Reasoning about Physical Systems (MIT Press, </title> <address> Cambridge, Massachusetts, </address> <year> 1985). </year> <note> Reprinted from Artificial Intelligence 24 (1984). </note>
Reference: 11. <author> G. Bohlender, C. Ullrich, J. von Gudenberg, and L. B. Rall, </author> <title> Pascal-SC: a Computer Language for Scientific Computation (Academic Press, </title> <address> San Diego, </address> <year> 1987). </year>
Reference: 12. <author> V. C. Boltyanskii, </author> <title> Envelopes (Macmillan, </title> <address> New York, </address> <year> 1964). </year> <month> 37 </month>
Reference: 13. <author> A. Bonarini and V. Maniezzo, </author> <title> Integrating qualitative and quantitative modeling, </title> <booktitle> International Journal of Expert Systems 4 (1) (1991) 51-70. Preliminary report in: Proceedings of the Second Annual Conference on AI, Simulation and Planning in High Autonomy Systems, </booktitle> <address> Cocoa Beach, </address> <publisher> Florida (IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1991) </year> <month> 290-297, </month> <title> and in: </title> <booktitle> Internal Working Proceedings, First European Workshop on Qualitative Reasoning about Physical Systems, </booktitle> <address> Genova, Italy (1991). </address>
Reference: 14. <author> P. P. Bonissone, </author> <title> A fuzzy sets based linguistic approach: theory and applications, </title> <booktitle> in: Proceedings of the 1980 Winter Simulation Conference, </booktitle> <address> Orlando, Florida (IEEE, New York, </address> <year> 1980) </year> <month> 99-111. </month> <note> Also in: </note> <author> M. M. Gupta and E. Sanchez, eds., </author> <title> Approximate Reasoning in Decision Analysis (North-Holland, </title> <address> Amsterdam, </address> <year> 1982). </year>
Reference: 15. <author> P. P. Bonissone and K. S. Decker, </author> <title> Selecting uncertainty calculi and granularity: an experiment in trading off precision and complexity, </title> <editor> in: L. N. Kanal and J. F. Lemmer, eds., </editor> <booktitle> Uncertainty in Artificial Intelligence (Elsevier Science Publishers, </booktitle> <address> Amsterdam, </address> <year> 1986) </year> <month> 217-247. </month>
Reference: 16. <author> A. Brandt, </author> <title> Multi-level adaptive solutions to boundary-value problems, </title> <note> Mathematics of Computation 31 (138) (1977) 333-390. </note>
Reference: 17. <author> W. L. Briggs, </author> <title> A Multigrid Tutorial (Society for Industrial and Applied Mathematics, </title> <address> Philadelphia, </address> <year> 1987). </year>
Reference: 18. <author> R. A. Brooks, </author> <title> Symbolic reasoning among 3-D models and 2-D images, </title> <booktitle> Artificial Intelligence 17 (1981) 285-348. </booktitle>
Reference: 19. <author> R. E. Bryant, MOSSIM: </author> <title> a switch-level simulator for MOS LSI, </title> <booktitle> in: Proceedings of the 18th Design Automation Conference (1981) 786-790. </booktitle>
Reference-contexts: Another direction would be to use an existence and convergence theorem for interval operator equations (Moore 1979 Theorem 5.7). Moore (1979 p. 94-97) also describes a Taylor series based method for interval simulation. Eijgenraam <ref> (1981) </ref> and Lohner (1987) describe other methods. Missier and Trave Massuyes (1991) demonstrate the feasibility of a Taylor series based approach in semi-quantitative simulation. 2.2 Phase II: progressive refinement A quantitatively annotated qualitative simulation was generated in Phase I, and is now progressively refined in Phase II. <p> We first discuss correctness, followed by convergence, stability and finally termination for step size refinement. 4.1 Correctness Numerical methods estimate answers, and interval methods bound them. Correctness here implies that the bounds safely contain the space of possible answers <ref> (e.g. Eijgenraam 1981 p. 65) </ref>. Bounds may also include extraneous values, which may occur for the following reasons. * Excess width. This is a well-known problem in evaluating many interval expressions (Moore 1979; see also e.g. Abelson & Sussman 1985 p. 84-88 and Simmons 1986 Section 2.2.4).
Reference: 20. <author> B. R. Chawla, H. K. Gummel, and P. Kozak, </author> <title> MOTIS | An MOS timing simulator, </title> <journal> IEEE Transactions on Circuits and Systems CAS-22 (12) (1975) 901-910. </journal>
Reference: 21. <editor> P. R. Cohen and E. A. Feigenbaum, eds., </editor> <booktitle> Handbook of Artificial Intelligence, </booktitle> <volume> Vol. </volume> <publisher> 3 (William Kaufmann Inc., </publisher> <address> Los Altos, California, </address> <year> 1982) </year> <month> 313-321. </month>
Reference: 22. <author> E. W. Coiera, </author> <title> Qualitative superposition, </title> <note> Artificial Intelligence 56 (2-3) (1992) 171-196. </note>
Reference: 23. <author> H. Cornelius and R. Lohner, </author> <title> Computing the range of values of real functions with accuracy higher than second order, </title> <note> Computing 33 (1984) 331-347. </note>
Reference: 24. <author> D. T. Dalle Molle, </author> <title> Qualitative simulation of dynamic chemical processes, </title> <type> Ph.D. thesis, </type> <institution> Chemical Engineering Dept., University of Texas, Austin, TX (1989). </institution> <note> Reprinted as technical report AI89-107, </note> <institution> Artificial Intelligence Laboratory, University of Texas, Austin, </institution> <address> TX (1989). </address>
Reference: 25. <author> D. T. Dalle Molle and T. F. Edgar, </author> <title> Qualitative modeling of chemical reaction systems, </title> <editor> in: M. L. Mavrovouniotis, ed., </editor> <booktitle> Artificial Intelligence in Process Engineering (Academic Press, </booktitle> <address> San Diego, </address> <year> 1991). </year>
Reference: 26. <author> B. D'Ambrosio, </author> <title> Extending the mathematics in qualitative process theory, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-87), </booktitle> <publisher> Seattle (MIT Press, </publisher> <address> Cambridge, </address> <year> 1987) </year> <month> 595-599. </month>
Reference: 27. <author> E. Davis, </author> <title> Constraint propagation with interval labels, </title> <booktitle> Artificial Intelligence 32 (3) (1987) 281-331. </booktitle>
Reference: 28. <author> T. Dean and M. Boddy, </author> <title> Reasoning about partially ordered events, </title> <booktitle> Artificial Intelligence 36 (3) (1988) 375-399. </booktitle>
Reference: 29. <author> D. DeCoste, </author> <title> Dynamic across-time measurement interpretation, </title> <booktitle> Artificial Intelligence 51 (1-3) (1991) 273-341. Version also in: Proceedings of the National Conference on Artificial Intelligence (AAAI-90), </booktitle> <publisher> Boston (MIT Press, </publisher> <address> Cambridge, </address> <year> 1990) </year> <month> 373-379. </month>
Reference: 30. <author> J. de Kleer, </author> <title> Qualitative and quantitative knowledge in classical mechanics, </title> <type> technical report AI-TR-352, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <address> Cambridge, Massachusetts (1975). </address>
Reference: 31. <author> W. Derrick and S. Grossman, </author> <title> Elementary Differential Equations with Applications (Addison-Wesley, </title> <address> Reading, Massachusetts, </address> <year> 1976). </year>
Reference: 32. <author> F. DiCesare, Z. Sahnoun, and P. P. Bonissone, </author> <title> Linguistic summarization of fuzzy data, </title> <note> Information Sciences 52 (1990) 141-152. </note>
Reference: 33. <author> D. Dubois and H. Prade, </author> <title> Fuzzy arithmetic in qualitative reasoning, in: </title> <type> Ensembles Flous 87: </type> <institution> Algebre, integrations, calcul d'intervalles et approximations (Rapport L.S.I. n o 302, Langages Et Systemes Informatiques, </institution> <address> ENSEEIHT, 2 rue Camichel | 31071 Toulouse CEDEX, France, </address> <year> 1988). </year>
Reference: 34. <author> D. Dubois and H. Prade, </author> <title> Operations on fuzzy numbers, </title> <note> International Journal of Systems Science 9 (6) (1978). </note>
Reference: 35. <author> D. Dvorak, </author> <title> Model-based monitoring of dynamic systems, </title> <booktitle> in: Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI-89), </booktitle> <pages> 1238-1243. </pages>
Reference: 36. <author> D. Dvorak, </author> <title> Monitoring and diagnosis of continuous dynamic systems using semiquantitative simulation, </title> <type> Ph.D. thesis, technical report AI92-170, </type> <institution> Artificial Intelligence Laboratory, University of Texas, Austin, </institution> <address> TX (1992). </address>
Reference: 37. <author> P. Eijgenraam, </author> <title> The Solution of Initial Value Problems Using Interval Arithmetic: Formulation and Analysis of an Algorithm (Mathematisch Centrum, </title> <address> Amsterdam, </address> <year> 1981). </year>
Reference: 38. <author> B. Faltings and P. Struss, </author> <title> Recent Advances in Qualitative Physics (MIT Press, </title> <address> Cambridge, Massachusetts, </address> <year> 1992). </year>
Reference: 39. <author> A. Farquhar and G. Brajnik, </author> <title> A Semi-Quantitative Physics Compiler, </title> <booktitle> 8th International Workshop on Qualitative Reasoning, </booktitle> <month> June </month> <year> 1994. </year>
Reference: 40. <author> P. A. Fishwick, </author> <title> Fuzzy simulation: specifying and identifying qualitative models, </title> <note> Int. J. General Systems 19 (1991) 295-316. </note>
Reference: 41. <author> K. Forbus, </author> <title> Qualitative process theory, </title> <note> Artificial Intelligence 24 (1984). Reprinted in Bobrow (1985). </note>
Reference: 42. <author> K. Forbus, </author> <title> Interpreting measurements of physical systems, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-86), </booktitle> <publisher> Philadelphia (MIT Press, </publisher> <address> Cambridge, </address> <year> 1986) </year> <month> 113-117. </month>
Reference: 43. <author> K. Forbus and B. Falkenhainer, </author> <title> Self-explanatory simulations: an integration of qualitative and quantitative knowledge, </title> <booktitle> in: Faltings & Struss (1992) 49-66. Also in: Proceedings of the National Conference on Artificial Intelligence (AAAI-90), </booktitle> <publisher> Boston (MIT Press, </publisher> <address> Cambridge, </address> <year> 1990) </year> <month> 380-387. </month>
Reference: 44. <author> K. Forbus and B. Falkenhainer, </author> <title> Self-explanatory simulations: scaling up to large models, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-92), </booktitle> <address> San Jose, </address> <publisher> California (MIT Press, </publisher> <address> Cambridge, </address> <year> 1992). </year>
Reference: 45. <author> J. W. </author> <title> Forrester, </title> <publisher> Industrial Dynamics (MIT Press, </publisher> <address> Cambridge, </address> <year> 1961). </year>
Reference: 46. <author> W. Gear, </author> <title> Numerical Initial Value Problems in Ordinary Differential Equations (Prentice-Hall, </title> <address> Englewood Cliffs, New Jersey, </address> <year> 1971). </year>
Reference: 47. <author> W. Hamscher, </author> <title> Modelling digital circuits for troubleshooting, </title> <note> Artificial Intelligence 51 (1-3) (1991) 223-271. </note>
Reference: 48. <author> P. Henrici, </author> <title> Discrete Variable Methods for Ordinary Differential Equations (John Wiley and Sons, </title> <address> New York, </address> <year> 1962). </year>
Reference: 49. <author> E. Hyvonen, </author> <title> Constraint reasoning based on interval arithmetic: the tolerance propagation approach, </title> <note> Artificial Intelligence 58 (1-3) (1992) 71-112. </note>
Reference: 50. <author> A. Kaufmann and M. Gupta, </author> <title> Introduction to Fuzzy Arithmetic (Van Nostrand Reinhold Co., </title> <address> New York, </address> <year> 1985). </year>
Reference: 51. <author> H. A. Kautz and P. B. Ladkin, </author> <title> Integrating metric and qualitative temporal reasoning, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-91), </booktitle> <publisher> Anaheim, California (MIT Press, </publisher> <address> Cambridge, </address> <year> 1991) </year> <month> 241-246. </month>
Reference: 52. <author> H. Kay, </author> <title> Refining imprecise models and their behaviors, </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, University of Texas, Austin, TX (Dec. </institution> <year> 1996). </year>
Reference: 53. <author> H. Kay and B. Kuipers, </author> <title> Numerical behavior envelopes for qualitative models, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-93) (MIT Press, </booktitle> <year> 1993) </year> <month> 606-613. </month>
Reference: 54. <author> G. T. Kelley, J. I. Glasgow, and R. E. Ellis, </author> <title> Extracting qualitative descriptions from quantitative models, </title> <booktitle> in: Proceedings of the Second Annual Conference on AI, Simulation and Planning in High Autonomy Systems, </booktitle> <address> Cocoa Beach, </address> <publisher> Florida (IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1991) </year> <month> 298-305. </month>
Reference: 55. <author> Y. Kiang, </author> <title> Exploration of qualitative reasoning and its applications to management, </title> <type> Ph.D. thesis, </type> <institution> University of Texas at Austin, Austin, </institution> <address> TX (1991). </address>
Reference: 56. <author> L. V. Kolev, V. M. Mladenov, and S. S. Vladov, </author> <title> Interval mathematics algorithms for tolerance analysis, </title> <journal> IEEE Transactions on Circuits and Systems 35 (8) (1988) 967-975. </journal>
Reference: 57. <author> B. Kuipers, </author> <title> Qualitative Reasoning, </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: 58. <author> B. Kuipers, </author> <title> Qualitative simulation, </title> <booktitle> Artificial Intelligence 32 (1986) 57-95. </booktitle>
Reference: 59. <author> B. Kuipers and D. Berleant, </author> <title> Using incomplete quantitative knowledge in qualitative reasoning, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-88), </booktitle> <address> St. Paul, </address> <publisher> Minnesota (MIT Press, </publisher> <address> Cambridge, </address> <year> 1988) </year> <month> 324-329. </month>
Reference: 60. <author> R. J. Lohner, </author> <title> Enclosing the solutions of ordinary initial and boundary value problems, </title> <editor> in: E. Kaucher, U. Kulisch, and C. Ullrich, eds., Computerarithmetic: </editor> <booktitle> Scientific Computation and Programming Languages (Teubner, </booktitle> <address> Stuttgart, </address> <year> 1987) </year> <month> 255-286. </month>
Reference: 61. <author> A. K. Mackworth and E. C. Freuder, </author> <title> The complexity of some polynomial network consistency algorithms for constraint satisfaction problems, </title> <booktitle> Artificial Intelligence 25 (1985) 65-74. </booktitle>
Reference: 62. <author> D. McDermott and E. Davis, </author> <title> Planning routes through uncertain territory, </title> <booktitle> Artificial Intelligence 22 (1984) 107-156. </booktitle>
Reference: 63. <author> I. Meiri, </author> <title> Combining qualitative and quantitative constraints in temporal reasoning, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-91), </booktitle> <publisher> Anaheim, California (MIT Press, </publisher> <address> Cambridge, </address> <year> 1991) </year> <month> 260-267. </month>
Reference: 64. <author> A. Missier and L. Trave-Massuyes, </author> <title> Temporal information in qualitative simulation, </title> <booktitle> in: Proceedings of the Second Annual Conference on AI, Simulation and Planning in High Autonomy Systems, </booktitle> <address> Cocoa Beach, </address> <publisher> Florida (IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1991) </year> <month> 298-305. </month>
Reference: 65. <author> J. Mohammed and R. Simmons, </author> <title> Qualitative simulation of semiconductor fabrication, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-86), </booktitle> <publisher> Philadelphia (MIT Press, </publisher> <address> Cambridge, </address> <year> 1986) </year> <month> 794-799. </month>
Reference: 66. <author> R. E. Moore, </author> <title> Methods and Applications of Interval Arithmetic (Society for Industrial and Applied Mathematics, </title> <address> Philadelphia, </address> <year> 1979). </year>
Reference: 67. <author> T. Nishida and S. Doshita, </author> <title> Reasoning about global behavior of ordinary differential equations by combining qualitative and quantitative analysis, </title> <booktitle> in: Proceedings of the Second Annual Conference on AI, Simulation and Planning in High Autonomy Systems, </booktitle> <address> Cocoa Beach, </address> <publisher> Florida (IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1991) </year> <month> 98-107. </month>
Reference: 68. <author> J-P. Nordvik, Ph. Smets, and P. Magrez, </author> <title> Fuzzy qualitative modeling, </title> <editor> in: B. Bouchon, L. Saitta, and R. R. Yager, eds., </editor> <booktitle> Uncertainty and Intelligent Systems (Springer-Verlag, </booktitle> <address> New York, </address> <year> 1988). </year>
Reference: 69. <author> W. Older and A. Vellino, </author> <title> Constraint arithmetic on real intervals, </title> <editor> in: F. Benhamou and A. Colmerauer, eds., </editor> <booktitle> Constraint Logic Programming, </booktitle> <publisher> Collected Papers (MIT Press, </publisher> <address> Cambridge, </address> <note> to appear). </note>
Reference: 70. <author> W. Press, B. Flannery, S. Teukolsky, and W. </author> <title> Vetterling, </title> <publisher> Numerical Recipes (Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1986). </year>
Reference: 71. <author> E. Sacks, </author> <title> Hierarchical reasoning about inequalities, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-87), </booktitle> <publisher> Seattle (MIT Press, </publisher> <address> Cambridge, </address> <year> 1987) </year> <month> 649-654. </month>
Reference: 72. <author> E. Sacks, </author> <title> Automatic analysis of one-parameter planar ordinary differential equations by intelligent numerical simulation, </title> <booktitle> Artificial Intelligence 48 (1991) 27-56. </booktitle>
Reference: 73. <author> E. Sacks, </author> <note> review of Yip (1991), in: SIGART Bulletin 3 (3) (1992) 18-19. </note>
Reference: 74. <author> R. A. Saleh and A. R. </author> <title> Newton, </title> <publisher> Mixed-Mode Simulation (Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1990). </year>
Reference: 75. <author> Q. Shen and R. Leitch, </author> <title> Fuzzy qualitative simulation, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 23 1038-1061, </journal> <year> 1993. </year>
Reference: 76. <author> Q. Shen and R. Leitch, </author> <title> Integrating common-sense and qualitative simulation by the use of fuzzy sets, </title> <note> in: Faltings & Struss (1992) 83-100. </note>
Reference-contexts: Constraints over more than three quantities are expressed as a longer equation (as in the mean value constraint, Section 2.1.3). Transformation in the other direction, from equations to constraint networks, is also easily done <ref> (Hyvonen 1992 p. 76) </ref>. For example, the equation y 0 = x 0 (y+x 0 ) becomes the constraints (add y dxdt w), (mult dxdt w dydt), (d/dt x dxdt), and (d/dt y dydt). Unary operations are expressed as binary constraints and binary operations as ternary constraints.
Reference: 77. <author> R. Simmons, </author> <title> The use of qualitative and quantitative simulations, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-83) (MIT Press, </booktitle> <address> Cambridge, </address> <year> 1983) </year> <month> 364-368. </month>
Reference: 78. <author> R. Simmons, </author> <title> "Commonsense" arithmetic reasoning, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-86), </booktitle> <publisher> Philadelphia (MIT Press, </publisher> <address> Cambridge, </address> <year> 1986) </year> <month> 118-124. </month>
Reference: 79. <author> R. Simmons, </author> <title> A theory of debugging plans and interpretations, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-88), </booktitle> <address> St. Paul, </address> <publisher> Minnesota (MIT Press, </publisher> <address> Cambridge, </address> <year> 1988) </year> <month> 94-99. </month>
Reference: 80. <author> R. Simmons, </author> <title> The roles of associational and causal reasoning in problem solving, </title> <note> Artificial Intelligence 53 (1-2) (1992) 159-207. </note>
Reference: 81. <author> R. Simmons and R. Davis, </author> <title> Generate, test and debug: combining associational rules and causal models, </title> <booktitle> in: Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI-87) (1987) 1071-1078. </booktitle>
Reference: 82. <author> J. M. Siskind and D. A. McAllester, </author> <title> Nondeterministic Lisp as a substrate for constraint logic programming, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-93) (MIT Press, </booktitle> <address> Cambridge, </address> <year> 1993). </year>
Reference: 83. <author> C. J. Terman, </author> <title> RSIM | A logic-level timing simulator, </title> <booktitle> in: Proceedings IEEE International Conference on Computer Design (1983) 437-440. </booktitle>
Reference-contexts: This reduces the step size of the simulation. Q3 by default picks values of t fl rounded to the nearest integer, to communicate better with the viewer by avoiding visual clutter in the display <ref> (Tufte 1983) </ref> (see Figure 6b). The multiple to which rounding is done is easily customizable and multiples of 200 were used in Figure 5. The values of the other model variables in this newly created state must be between their values in the two adjacent previously existing states.
Reference: 84. <author> R. M. Tong and P. P. Bonissone, </author> <title> Linguistic decision analysis using fuzzy sets, </title> <note> Memorandum No. </note> <institution> UCB/ERL M79/72, Electronics Research Laboratory, University of California, Berkeley (1979). </institution>
Reference: 85. <author> E. R. Tufte, </author> <title> The Visual Display of Quantitative Information (Graphics Press, </title> <address> Cheshire, Connecticut, </address> <year> 1983). </year>
Reference: 86. <author> B. Williams, </author> <title> Doing time: putting qualitative reasoning on firmer ground, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-86), </booktitle> <publisher> Philadelphia (MIT Press, </publisher> <address> Cambridge, </address> <year> 1986) </year> <month> 105-112. </month>
Reference-contexts: Somewhat better inferences might be obtained by augmenting Q2's simple constraint propagation with more sophisticated approaches, such as quantity lattices <ref> (Simmons 1986) </ref>, Q1 (Williams 1991) 1 or BOUNDER (Sacks 1987). However while such sophisticated methods would help, a critical issue would still remain. <p> In more detail: 1. Qualitative simulation. Incrementally grow a tree of qualitative behaviors. The tree of behaviors is guaranteed to include the actual behavior of any real system conforming to a given qualitative model <ref> (Kuipers 1986) </ref>. Q3 represents each behavior as a constraint network relating each model variable at the time value of each qualitative state in the simulation. <p> A strong measurement condition is shown in the last rows. Notice how predicted intervals tend to narrow as stronger measurement conditions introduce stronger quantitative information into the simulation. |||||| The interpolation method of measurement interpretation contrasts with DeCoste's DATMI system (1991) and its precursor ATMI <ref> (Forbus 1986) </ref>. A significant difference is that DATMI abstracts measurements into qualitative categories before using them, whereas MIMIC and Q3 use the actual measured quantitative information. Hence DATMI loses quantitative information retained and used by MIMIC and Q3. DATMI is intended for handling large numbers of measurements. <p> ATMI <ref> (Forbus 1986) </ref> and DATMI (DeCoste 1991) used intervals describing measurements to find the qualitative path of an evolving system, as discussed earlier. 28 NSIM (Kay and Kuipers 1993) and SQSIM (Kay 1996) were developed in part to alleviate the wide bounds that Q3's predecessor Q2 often infers. <p> Shen and Leitch used trapezoidally shaped fuzzy intervals (Figure 12) with arithmetic operations as defined by Tong and Bonissone (1979), Bonissone (1980), Bonissone & Decker <ref> (1986) </ref>, and DiCesare et al. (1990). DiCesare et al. claim without explanation that these operations are consistent with Dubois & Prade's (1978) more general and rigorously developed account. <p> If so, their multiplication (and hence division) operation is more closely related to Dubois & Prade's relatively easily computed approximation (1978 equation 3) than to the exact method (1978 p. 620). These approximations are claimed to produce "very good" results <ref> (Bonissone & Decker 1986 p. 230) </ref> with "very little error" (Bonissone 1980). Exact multiplication of trapezoidal fuzzy intervals is computationally complex, typically yielding a product with curved sides (Kaufmann & Gupta 1985 Figure 1.12) which is therefore not trapezoidal. <p> terminate (Section 4.1), with Y n = Y n1 + h [F (Y n1 )[F (Y n )]: (9) Y n will be consistent with the direction of change of Y specified by some qualitative behavior (s) because Q3 uses QSIM for behavior generation, and QSIM generates all possible behaviors <ref> (Kuipers 1986) </ref>. 3. Since F is a natural interval extension, F is inclusion monotonic, meaning F (A) F (B) if A B (Moore 1979 Section 3.2).
Reference: 87. <author> B. Williams, </author> <title> MINIMA: a symbolic approach to qualitative algebraic reasoning, </title> <booktitle> in: Proceedings of the National Conference on Artificial Intelligence (AAAI-88), </booktitle> <address> St. Paul, </address> <publisher> Minnesota (MIT Press, </publisher> <address> Cambridge, </address> <year> 1988) </year> <month> 264-269. </month>
Reference: 88. <author> B. Williams, </author> <title> A theory of interactions: unifying qualitative and quantitative algebraic reasoning, </title> <note> Artificial Intelligence 51 (1-3) (1991) 39-94. </note>
Reference: 89. <author> K. Yip, KAM, </author> <title> a System for Intelligently Guided Numerical Experimentation by Computer (MIT Press, </title> <address> Cambridge, </address> <year> 1991). </year>
Reference: 90. <author> D. M. Young, </author> <title> Stability (h ! 0 and h &gt; 0) for systems, Course notes supplement 78.6, revises Young & Gregory (1972) 566-573, Center for Numerical Analysis, </title> <institution> University of Texas at Austin (1978). </institution>
Reference: 91. <author> D. M. Young and R. T. Gregory, </author> <title> A Survey of Numerical Mathematics, vol. </title> <publisher> II (Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1972). </year>
Reference: 92. <author> F. Zhao, </author> <title> Extracting and representing qualitative behaviors of complex systems in phase spaces, Artificial Intelligence (forthcoming). Version also in: </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI-91), Sidney, </booktitle> <publisher> Australia (Morgan Kaufmann, </publisher> <address> Los Altos, California, </address> <year> 1991). </year> <month> 41 </month>
References-found: 92

