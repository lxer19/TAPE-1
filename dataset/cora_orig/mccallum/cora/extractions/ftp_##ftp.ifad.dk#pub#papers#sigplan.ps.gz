URL: ftp://ftp.ifad.dk/pub/papers/sigplan.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Email: frenejpeterjpoulg@ifad.dk  
Title: The IFAD VDM-SL Toolbox: A Practical Approach to Formal Specifications  
Author: Rene Elmstrtm, Peter Gorm Larsen and Poul Btgh Lassen 
Address: Forskerparken 10, DK-5230 Odense, Denmark  
Affiliation: IFAD The Institute of Applied Computer Science  
Abstract: The IFAD VDM-SL Toolbox is a collection of tools for formal specifications development using the latest version of the VDM-SL standard. In addition to the full language it also supports a module-based structuring mechanism for large specifications. The Toolbox features extensive semantics checking, documentation support, test coverage analysis and debugging support. We have focused on supporting real-life specifications development in industrial settings. This paper presents the Toolbox and also reports on our own experience using it for the development of large specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Borba and S. Meira. </author> <title> From VDM Specifications to Functional Prototypes. </title> <journal> Journal of Systems Software, </journal> <volume> 21 </volume> <pages> 267-278, </pages> <year> 1993. </year>
Reference-contexts: A very pragmatic approach reported is based on prototyping VDM-SL specifications using a programming language. E.g. [3] reports on the use of ABC+ to prototype VDM-SL specifications for educational purposes and <ref> [1] </ref> reports on (a prototype) semi-automatic translation system producing Lazy ML code from VDM-SL specifications. These approaches however have the drawback that another formalism (ABC+ or Lazy ML) must be introduced to cope with the semantics of the VDM-SL specifications. <p> One of the advantages of the Toolbox compared to other approaches reported to prototype VDM 4 SL specifications is the large subset of VDM-SL supported for execution. All the VDM-SL constructs supported for execution by e.g. <ref> [1] </ref> and [3] are executable directly in the Toolbox. Furthermore a number of more advanced constructs are supported by the Toolbox including: higher order functions, polymorphic functions, complex (loose) pattern matching, comprehensions (map, set, sequence), lambda expressions and exception handling.
Reference: [2] <author> J. Bicarregui, J. Fitzgerald, P. Lindsay, R. Moore and B. Ritchie. </author> <title> Proof in VDM: A Practitioner's Guide. </title> <publisher> FACIT. Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Furthermore the support provided for the prototyping process in these tools is not specially tailored for VDM-SL but rather dependent on the programming language in use. A more formal approach to the use of VDM-SL is through proof of essential properties. Many text books cover this area e.g. <ref> [2] </ref> provides a sound constructive approach to proof in VDM. A problem with using a fully formal development (discharging all proof obligations) is that the resources needed in most cases are impossible to provide for a typical development project.
Reference: [3] <author> A. Kans and C. Hayton. </author> <title> Using ABC To Prototype VDM Specifications. </title> <journal> ACM SIGPLAN Notices, </journal> <pages> pages 27-37, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The use of VDM-SL in the development of soft ware systems has been approached in various ways in the past. A very pragmatic approach reported is based on prototyping VDM-SL specifications using a programming language. E.g. <ref> [3] </ref> reports on the use of ABC+ to prototype VDM-SL specifications for educational purposes and [1] reports on (a prototype) semi-automatic translation system producing Lazy ML code from VDM-SL specifications. <p> One of the advantages of the Toolbox compared to other approaches reported to prototype VDM 4 SL specifications is the large subset of VDM-SL supported for execution. All the VDM-SL constructs supported for execution by e.g. [1] and <ref> [3] </ref> are executable directly in the Toolbox. Furthermore a number of more advanced constructs are supported by the Toolbox including: higher order functions, polymorphic functions, complex (loose) pattern matching, comprehensions (map, set, sequence), lambda expressions and exception handling.
References-found: 3

