URL: http://seclab.cs.ucdavis.edu/~samorodi/papers/Mungi/Vochteloo96-prot-dom-extensions-mungi.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~samorodi/papers/Mungi/
Root-URL: http://www.cs.ucdavis.edu
Title: Protection Domain Extensions in Mungi  
Author: Jerry Vochteloo, Kevin Elphinstone, Stephen Russell, and Gernot Heiser 
Date: 2052  
Address: Sydney, Australia  
Affiliation: School of Computer Science and Engineering The University of New South Wales,  
Abstract: The Mungi single address space operating system provides a protected procedure call mechanism named protection domain extension (PDX). The PDX call executes in a protection domain which is the union of (a subset of) the caller's domain, and a fixed domain associated with the procedure. On return, the caller's original protection domain is re-established. Extensive caching of validation data allows amortisation of setup costs over a possibly large number of invocations. The PDX mechanism forms the basis for object support in Mungi, particularly encapsulation. It is also used for accessing devices, and to implement user-level page fault handlers and other services. 
Abstract-found: 1
Intro-found: 1
Reference: [Ber80] <author> Viktors Berstis. </author> <title> Security and protection in the IBM System/38. </title> <booktitle> In Proceedings of the 7th Symposium on Computer Architecture, </booktitle> <pages> pages 245250. </pages> <address> ACM/IEEE, </address> <month> May </month> <year> 1980. </year>
Reference-contexts: This limits the number of ULP protection domains that need to be cached to one per ULP in actual use. 6. Relation to Other Work PDX is conceptually very similar to the profile adoption mechanism used on the IBM System/38 <ref> [Ber80] </ref>, and its successor, the AS/400. This mechanism allows invocation of a procedure with an amplified protection domain. 3 The caller can also restrict the part of its protection domain that is available to the callee (this is called profile propagation by IBM).
Reference: [Cha95] <author> Jeffrey S. Chase. </author> <title> An Operating System Structure for Wide-Address Architectures. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1995. </year>
Reference-contexts: The main difference to Mungi, in this context, is that System/38's implementation makes extensive use of specific hardware support, e.g. for tagging capabilities. Mungi's protection system is software based and can be implemented on standard hardware. Opal <ref> [Cha95] </ref> is also a SASOS based on password capabilities. Opal uses a different form of protected procedure mechanism: Each protection domain can have one portal, which is an entry-point for cross-domain calls. When a call is made to the portal, control is transferred to a place specified by the domain.
Reference: [DdBF + 94] <author> Alan Dearle, Rex di Bona, James Farrow, Frans Henskens, Anders Lindstr om, and Fran-cis Vaughan. Grasshopper: </author> <title> An orthogonally persistent operating system. </title> <booktitle> Computing Systems, </booktitle> <address> 7(3):289312, </address> <year> 1994. </year>
Reference-contexts: Our PDX mechanism is consistent with this approach. Angel [MSS + 93] is another SASOS. Its approach to protection is to use upcalls to a protection server, which can implement any protection model. The Grasshopper system <ref> [DdBF + 94] </ref> is not a SASOS, but presents a generalised approach to address spaces, including the ability to emulate a SASOS. In Grasshopper, a protection domain is the union of the protection domains associated with the locus (execution abstraction) and the container (storage abstraction).
Reference: [ERHL96] <author> Kevin Elphinstone, Stephen Russell, Gernot Heiser, and Jochen Liedtke. </author> <title> Supporting persistent object systems in a single address space. </title> <booktitle> In Proceedings of the 7th International Workshop on Persistent Object Systems, </booktitle> <address> Cape May, NJ, USA, </address> <month> May </month> <year> 1996. </year> <note> To be published. </note>
Reference-contexts: For example, there is no disk model; clients, such as database systems, which require explicit control over I/O, can achieve this via virtual memory operations <ref> [ERHL96] </ref>. Similarly, other devices are mapped into VM. The device driver is given capability to the appropriate memory region. Users can then safely perform operations on the device by invoking the driver via a PDX call. 5.2. <p> User-level page fault handlers User-level page fault handlers (ULPs) are essential for efficiently supporting databases and implementing persistence in Mungi <ref> [ERHL96] </ref>. A ULP is a PDX procedure which is invoked by the kernel when a page fault occurs on an object for which that ULP had been registered. ULP invocation uses an empty clist parameter, hence the ULP runs just within the protection domain which was registered for it.
Reference: [HERV94] <author> Gernot Heiser, Kevin Elphinstone, Stephen Russell, and Jerry Vochteloo. Mungi: </author> <title> A distributed single address-space operating system. </title> <booktitle> In Proceedings of the 17th Australasian Computer Science Conference, </booktitle> <pages> pages 27180, </pages> <address> Christchurch, New Zealand, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Capability systems are particularly well-suited to support extensibility [Lev84]. Safe method invocation in these systems is made possible by the provision of a protected procedure call mechanism, which allows the callee to perform operations the system would not permit the caller to do directly. Mungi <ref> [HERV94] </ref> is a 64-bit single address space operating system (SASOS) based on password capabilities. Mungi's protected procedure mechanism is called protection domain extension (PDX).
Reference: [Lev84] <author> Henry M. Levy. </author> <title> Capability-Based Computer Systems. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: Such extensibility is of particular interest if users can access methods provided by other users without compromising security. Hence, the system should efficiently support object encapsulation and safe method invocation. Capability systems are particularly well-suited to support extensibility <ref> [Lev84] </ref>. Safe method invocation in these systems is made possible by the provision of a protected procedure call mechanism, which allows the callee to perform operations the system would not permit the caller to do directly.
Reference: [Lie95] <author> Jochen Liedtke. </author> <booktitle> On -kernel construction. In Proceedings of the 15th ACM Symposium on OS Principles, </booktitle> <pages> pages 237250, </pages> <address> Copper Mountain, CO, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: The operation of creating a new thread and transferring control to it is very lightweight in Mungi, as it maps directly onto the corresponding operations of the underlying, very efficient, L4 microkernel <ref> [Lie95] </ref>. In the case of a proper protection domain extension (i.e. a null clist parameter is passed), t p can inherit t's cached validations by having t p reference t's segment list.
Reference: [MM96] <author> Ashok Malhotra and Steven J. Munroe. </author> <title> Schema evolution in persistent object systems. </title> <booktitle> In Proceedings of the 7th International Workshop on Persistent Object Systems, </booktitle> <address> Cape May, NJ, USA, </address> <month> May </month> <year> 1996. </year> <note> To be published. </note>
Reference-contexts: Supporting Objects The NOM object system on the IBM AS/400 <ref> [MM96] </ref> has demonstrated that it is possible to build an object oriented system on top of abstractions like those provided by Mungi (see Sec. 6). Here we show how Mungi can enforce encapsulation and support inheritance. 4.1.
Reference: [MSS + 93] <author> Kevin Murray, Ashley Saulsbury, Tom Stiemerling, Tim Wilkinson, Paul Kelly, and Peter Osmon. </author> <title> Design and implementation of an object-orientated 64-bit single address space microkernel. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Microkernels and other Kernel Architectures, </booktitle> <pages> pages 3143, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: In Mungi, however, capabilities are normally presented implicitly (by storing them in a clist), which makes the protection system much less intrusive. Our PDX mechanism is consistent with this approach. Angel <ref> [MSS + 93] </ref> is another SASOS. Its approach to protection is to use upcalls to a protection server, which can implement any protection model. The Grasshopper system [DdBF + 94] is not a SASOS, but presents a generalised approach to address spaces, including the ability to emulate a SASOS.
Reference: [VRH93] <author> Jerry Vochteloo, Stephen Russell, and Ger-not Heiser. </author> <title> Capability-based protection in the Mungi operating system. </title> <booktitle> In Proceedings of the 3rd International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 10815, </pages> <address> Asheville, NC, USA, </address> <month> December </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: This paper describes Mungi's PDX mechanism and its implementation. fl This work was supported by Australian Reseach Council grant A49330285. y Phone: +61-2-9385-5156, fax: +61-2-9385-5995, e-mail: disy@cse.unsw.edu.au, www: http://www.cse.unsw.edu.au/ disy 2. Protection Domains in Mungi Mungi's basic protection model has been described in <ref> [VRH93] </ref>. In short, each task (which consists of one or more threads) has associated with it a protection domain, which is the set of objects accessible to the task. The protection domain is implemented as a set of pointers to capability lists, which are arrays of capabilities.
References-found: 10

