URL: http://www.dai.ed.ac.uk:80/staff/personal_pages/bundy/drafts/rippling-hits.ps.gz
Refering-URL: http://www.dai.ed.ac.uk:80/staff/personal_pages/bundy/drafts/drafts.html
Root-URL: 
Title: Rippling: Greatest Hits  
Author: Alan Bundy 
Degree: Submitted to  
Note: c Alan Bundy  
Address: 80 South Bridge Edinburgh EH1 1HN Scotland  
Affiliation: Department of Artificial Intelligence University of Edinburgh  
Date: October 28, 1996  
Pubnum: DAI Research Paper No.  
Abstract-found: 0
Intro-found: 1
Reference: [Armando et al, 1996] <author> Armando, A., Smaill, A. and Gallagher, J. </author> <year> (1996). </year> <title> Automating the synthesis of decision procedures in a constructive metatheory. </title> <booktitle> In Proceedings of AI/MATH-96, </booktitle> <address> Florida. </address> <note> To appear. </note>
Reference-contexts: The subsequent ripple is shown in figure 7. 7 Example: Biconditional Decision Procedure The example of rippling in this section arises in the synthesis of a decision procedure for the biconditional fragment of propositional logic, <ref> [Armando et al, 1996] </ref>. This long proof contains many examples of rippling, from which we have selected the following as representative.
Reference: [Aubin, 1976] <author> Aubin, R. </author> <year> (1976). </year> <title> Mechanizing Structural Induction. </title> <type> Unpublished Ph.D. thesis, </type> <institution> University of Edinburgh. </institution> <month> 8 </month>
Reference-contexts: 1 Introduction Aubin in <ref> [Aubin, 1976] </ref> first used the term rippling-out to describe the effect of rewriting with recursive definitions in the step cases of inductive proof. In [Bundy, 1988] this observation was turned on its head; the rippling effect was used to specify the kind of inference required in step cases.
Reference: [Basin & Walsh, 1993] <author> Basin, D. and Walsh, T. </author> <year> (1993). </year> <title> Difference unification. In Proceed ings of the 13th IJCAI. </title> <journal> International Joint Conference on Artificial Intelligence. </journal> <note> Also available as Technical Report MPI-I-92-247, </note> <institution> Max-Planck-Institute fur Informatik. </institution>
Reference-contexts: The definitions of lim must first be unpacked. The limit of the sum is treated as the goal and the limits of the two summands as the targets. A difference matching algorithm, <ref> [Basin & Walsh, 1993] </ref>, is used to annotate the goal with wave-fronts.
Reference: [Basin & Walsh, 1996] <author> Basin, David and Walsh, Toby. </author> <year> (1996). </year> <title> Annotated rewriting in induct ive theorem proving. </title> <journal> Journal of Automated Reasoning, 16(1-2):147-180. </journal>
Reference-contexts: The resulting rippling heuristic has been implemented in the CL A M, [Bundy et al, 1990, Bundy et al, 1993], and the INKA, [Hutter, 1990], systems. A theoretical development can be found in <ref> [Basin & Walsh, 1996] </ref>. In the step case of an inductive proof one or more induction hypotheses are assumed and an induction conclusion must be proved. The induction conclusion and induction hypotheses are syntactically similar, but small differences prevent a match between them. <p> I would also like to thank Ian Green, Andrew Ireland and Toby Walsh for feedback on an earlier draft. The research reported in this paper was supported by EPSRC grant GR/J/80702. 1 condition severely restricts the possible rewrites. Rippling is also guaranteed to terminate, <ref> [Basin & Walsh, 1996] </ref>. A well founded, stable and monotonic measure is associated with the wave-fronts. A strict decrease in this measure is a defining characteristic of wave-rules. We claim that rippling requires very little search while maintaining a high success rate. <p> The wave-rules used in this proof are shown in figure 2. dynamically to avoid redundant storage. Some of these wave-rules orient the same equation in different directions. Unlike other uses of rewriting, this does not cause looping. In fact, termination is guaranteed, <ref> [Basin & Walsh, 1996] </ref>. For instance, the annotation required for wave-rule (1) to apply will prevent the immediate subsequent application of (4) to reverse the rewrite. Despite the potential availability of many variants of a formulae as different wave-rules, the branching rate of rippling is still typically 0 or 1.
Reference: [Bledsoe, 1990] <author> Bledsoe, W.W. </author> <year> (1990). </year> <title> Challenge problems in elementary calculus. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 6(3) </volume> <pages> 341-359. </pages>
Reference-contexts: Lim+ then became a challenge problem for uniform proof procedures without the use of the `limit heuristic', <ref> [Bledsoe, 1990] </ref>. It proved to be very challenging. Otter, for instance, can only find a proof of the simplest of the six axiomatizations in [Bledsoe, 1990], and even then it requires 6 some user guidance to limit function nesting. <p> Lim+ then became a challenge problem for uniform proof procedures without the use of the `limit heuristic', <ref> [Bledsoe, 1990] </ref>. It proved to be very challenging. Otter, for instance, can only find a proof of the simplest of the six axiomatizations in [Bledsoe, 1990], and even then it requires 6 some user guidance to limit function nesting. Totally automatic proofs of the simplest two axiomatizations have been found, for instance, by Digricoli's RUE prover. <p> RUE can also find proofs of the remaining four axiomatizations if some small amount of user interaction is allowed, [Digricoli, 1994]. A rippling proof for Lim+ is given in [Yoshida et al, 1994]. As this proof is non-clausal it is not directly comparable to any of the axiomatizations in <ref> [Bledsoe, 1990] </ref>. The idea for using rippling on this theorem is due to Woody Bledsoe. Interestingly, rippling seems to subsume some of the ideas implicit in the `limit heuristic'. The ripple uses wave-rules loosely based on the clausal axiomatization of Lim+ given in [Bledsoe, 1990] and requires no search. <p> comparable to any of the axiomatizations in <ref> [Bledsoe, 1990] </ref>. The idea for using rippling on this theorem is due to Woody Bledsoe. Interestingly, rippling seems to subsume some of the ideas implicit in the `limit heuristic'. The ripple uses wave-rules loosely based on the clausal axiomatization of Lim+ given in [Bledsoe, 1990] and requires no search. The definitions of lim must first be unpacked. The limit of the sum is treated as the goal and the limits of the two summands as the targets. A difference matching algorithm, [Basin & Walsh, 1993], is used to annotate the goal with wave-fronts.
Reference: [Bledsoe et al, 1972] <author> Bledsoe, </author> <title> W.W., Boyer, R.S. and Henneman, W.H. (1972). Computer proofs of limit theorems. </title> <journal> Artificial Intelligence, </journal> <volume> 3 </volume> <pages> 27-60. </pages>
Reference-contexts: as: 8f 1 ; f 2 : real 7! real lim X7!A X7!A X7!A where lim f (X) = L $ 8*:(0 &lt; * ! 9ffi:(0 &lt; ffi ^ 8X:(X 6= A ^ jX Aj &lt; ffi ! jf (X) Lj &lt; *))) Interest in this theorem was sparked by <ref> [Bledsoe et al, 1972] </ref>, which introduced a `limit heuristic' to guide the proofs for a number of similar theorems, of which Lim+ was the simplest. Lim+ then became a challenge problem for uniform proof procedures without the use of the `limit heuristic', [Bledsoe, 1990]. It proved to be very challenging.
Reference: [Bundy, 1988] <author> Bundy, A. </author> <year> (1988). </year> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In Lusk, R. and Overbeek, R., (eds.), </editor> <booktitle> 9th Conference on Automated Deduction, </booktitle> <pages> pages 111-120. </pages> <note> Springer-Verlag. Longer version available from Edinburgh as DAI Research Paper No. 349. </note>
Reference-contexts: 1 Introduction Aubin in [Aubin, 1976] first used the term rippling-out to describe the effect of rewriting with recursive definitions in the step cases of inductive proof. In <ref> [Bundy, 1988] </ref> this observation was turned on its head; the rippling effect was used to specify the kind of inference required in step cases. This suggested a general method to control rewriting in step cases, i.e. one that would apply to lemmas and non-recursive definitions, as well as recursive definitions.
Reference: [Bundy et al, 1990] <author> Bundy, A., van Harmelen, F., Smaill, A. and Ireland, A. </author> <year> (1990). </year> <title> Exten sions to the rippling-out tactic for guiding inductive proofs. </title> <editor> In Stickel, M.E., (ed.), </editor> <booktitle> 10th International Conference on Automated Deduction, </booktitle> <pages> pages 132-146. </pages> <note> Springer-Verlag. Lecture Notes in Artificial Intelligence No. 449. Also available from Edinburgh as DAI Research Paper 459. </note>
Reference-contexts: This suggested a general method to control rewriting in step cases, i.e. one that would apply to lemmas and non-recursive definitions, as well as recursive definitions. The resulting rippling heuristic has been implemented in the CL A M, <ref> [Bundy et al, 1990, Bundy et al, 1993] </ref>, and the INKA, [Hutter, 1990], systems. A theoretical development can be found in [Basin & Walsh, 1996]. In the step case of an inductive proof one or more induction hypotheses are assumed and an induction conclusion must be proved.
Reference: [Bundy et al, 1993] <author> Bundy, A., Stevens, A., van Harmelen, F., Ireland, A. and Smaill, A. </author> <year> (1993). </year> <title> Rippling: A heuristic for guiding inductive proofs. </title> <journal> Artificial Intelligence, </journal> <volume> 62 </volume> <pages> 185-253. </pages> <note> Also available from Edinburgh as DAI Research Paper No. 567. </note>
Reference-contexts: This suggested a general method to control rewriting in step cases, i.e. one that would apply to lemmas and non-recursive definitions, as well as recursive definitions. The resulting rippling heuristic has been implemented in the CL A M, <ref> [Bundy et al, 1990, Bundy et al, 1993] </ref>, and the INKA, [Hutter, 1990], systems. A theoretical development can be found in [Basin & Walsh, 1996]. In the step case of an inductive proof one or more induction hypotheses are assumed and an induction conclusion must be proved.
Reference: [Cleve & Hutter, 1994] <author> Cleve, J. and Hutter, D. </author> <year> (1994). </year> <title> A methodology for equational reas oning. </title> <editor> In Jay F. Nunamaker, jr. and Ralph H. Sprague, jr., (eds.), </editor> <booktitle> Proceedings Hawaii International Conference on System Sciences 27 Volume III: Information Systems : DSS/Knowledge-based Systems, </booktitle> <pages> pages 569 - 578. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California. </address>
Reference-contexts: For instance, rippling has been used for summing series, [Walsh et al, 1992], for proving limit theorems in analysis, [Yoshida et al, 1994], for reasoning in framework logics, [Negrete, 1994], and for general rewriting, <ref> [Cleve & Hutter, 1994] </ref>. Rippling works by the selective application of rewrite rules. The goal is annotated to show the similarities (called the skeleton) and the differences (called the wave-fronts) between it and the target. <p> An example from a simple propositional logic is given in figure 11. Several other examples from other logics can be found in his thesis [Negrete, 1996]. 10 SAM's Lemma Jurgen Cleve and Dieter Hutter have used rippling to prove SAM's lemma, <ref> [Cleve & Hutter, 1994] </ref>. SAM's lemma was the first open conjecture to be proved by an automated theorem prover, although user interaction was required, [Guard et al, 1969]. It is still used as a standard test problem for resolution theorem provers.
Reference: [Digricoli, 1994] <author> Digricoli, V.J. </author> <year> (1994). </year> <title> The RUE theorem-proving system: the complete set of Lim+ challenge problems. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 12(2) </volume> <pages> 241-264. </pages>
Reference-contexts: Totally automatic proofs of the simplest two axiomatizations have been found, for instance, by Digricoli's RUE prover. RUE can also find proofs of the remaining four axiomatizations if some small amount of user interaction is allowed, <ref> [Digricoli, 1994] </ref>. A rippling proof for Lim+ is given in [Yoshida et al, 1994]. As this proof is non-clausal it is not directly comparable to any of the axiomatizations in [Bledsoe, 1990]. The idea for using rippling on this theorem is due to Woody Bledsoe.
Reference: [Guard et al, 1969] <author> Guard, J., Oglesby, F., Bennett, J. and Settle, L. </author> <year> (1969). </year> <title> Semi automated mathematics. </title> <journal> Association for Computing Machinery, </journal> <volume> 16 </volume> <pages> 49-62. </pages>
Reference-contexts: SAM's lemma was the first open conjecture to be proved by an automated theorem prover, although user interaction was required, <ref> [Guard et al, 1969] </ref>. It is still used as a standard test problem for resolution theorem provers. Cleve and Hutter use nested applications of rippling within their INKA theorem prover. The axioms and hypotheses are then turned into wave-rules.
Reference: [Harper et al, 1992] <author> Harper, R., Honsell, F. and Plotkin, G. </author> <year> (1992). </year> <title> A framework for de fining logics. </title> <journal> Journal of the ACM, </journal> <volume> 40(1) </volume> <pages> 143-84. </pages> <note> Preliminary version in LICS '87. </note>
Reference-contexts: The rules of inference of an object-logic are represented as axioms in a framework or meta-logic, in his case Edinburgh LF, <ref> [Harper et al, 1992] </ref>. A theorem to be proved is first split into hypotheses and conclusion using, so called, `intro' rules. The hypotheses and conclusion are then difference unified and wave annotations inserted in both. Rippling is then used to reduce the difference between them.
Reference: [Hutter, 1990] <author> Hutter, D. </author> <year> (1990). </year> <title> Guiding inductive proofs. </title> <editor> In Stickel, M.E., (ed.), </editor> <booktitle> 10th International Conference on Automated Deduction, </booktitle> <pages> pages 147-161. </pages> <note> Springer-Verlag. Lecture Notes in Artificial Intelligence No. 449. </note>
Reference-contexts: This suggested a general method to control rewriting in step cases, i.e. one that would apply to lemmas and non-recursive definitions, as well as recursive definitions. The resulting rippling heuristic has been implemented in the CL A M, [Bundy et al, 1990, Bundy et al, 1993], and the INKA, <ref> [Hutter, 1990] </ref>, systems. A theoretical development can be found in [Basin & Walsh, 1996]. In the step case of an inductive proof one or more induction hypotheses are assumed and an induction conclusion must be proved.
Reference: [Ireland & Bundy, 1996] <author> Ireland, A. and Bundy, A. </author> <year> (1996). </year> <title> Productive use of failure in inductive proof. </title> <journal> Journal of Automated Reasoning, </journal> <note> 16(1-2):79-111. Also available as DAI Research Paper No 716, </note> <institution> Dept. of Artificial Intelligence, Edinburgh. </institution>
Reference-contexts: Similarly, analysis can suggest generalisations, unusual induction rules and case splits. This analysis is implemented via a collection of proof critics, <ref> [Ireland & Bundy, 1996] </ref>. 2 Rippling Notation Before giving the examples below we must introduce the notation of rippling. We describe this notation first with respect to goals and targets and then with respect to wave-rules. Wave-fronts: are the differences between the goal and the target (s). <p> The use of meta-variables and second-order unification adds to the branching rate, but rippling is sufficiently constrained that the extra search is manageable. The reasoning involved is illustrated in figure 5 and the technique is described in more detail in <ref> [Ireland & Bundy, 1996] </ref>. 4 Target: qrev (qrev (tl; L); [ ])=rev (L) &lt;&gt; rev (rev (tl))) Goal and Ripple: qrev (qrev ( [hdjtl] " ; l ); [ ])=rev ( l ) &lt;&gt; rev (rev ( [hdjtl] " qrev (qrev (tl; [hdjl] ); [ ])=rev ( l ) &lt;&gt; rev
Reference: [Kaufmann, 1990] <author> Kaufmann, M. </author> <year> (1990). </year> <title> An instructive example for beginning users of the boyer-moore theorem-prover. Internal Note 185, Computational Logic Inc., </title> <address> Austin. </address>
Reference-contexts: Finally, the sink on the right-hand side is simplified to make it equal to the one on the left-hand side. 5 Example: Rotate Length Theorem The theorem in x4 is a generalised version of the rotate length theorem that was first introduced in <ref> [Kaufmann, 1990] </ref>. 8K : list (t): rotate (length (K); K) = K (20) This was used as an illustration for driving PC-NQTHM, Kaufmann's interactive version of the Boyer-Moore theorem prover.
Reference: [Negrete, 1994] <author> Negrete, S. </author> <month> (June </month> <year> 1994). </year> <title> Guiding proof search in logical frameworks with rippling. </title> <editor> In Galmiche, D. and Wallen, L., (eds.), </editor> <booktitle> Workshop on Proof Search in Type-Theoretic Languages, </booktitle> <pages> pages 55-61, </pages> <address> CADE, Nancy, France. </address> <note> Also available from Edinburgh as DAI Research Paper No. 750. </note>
Reference-contexts: For instance, rippling has been used for summing series, [Walsh et al, 1992], for proving limit theorems in analysis, [Yoshida et al, 1994], for reasoning in framework logics, <ref> [Negrete, 1994] </ref>, and for general rewriting, [Cleve & Hutter, 1994]. Rippling works by the selective application of rewrite rules. The goal is annotated to show the similarities (called the skeleton) and the differences (called the wave-fronts) between it and the target. <p> After two fertilizations with the target this yields the following closed form for the sum: m + 2 + n + 1 9 Meta-Logical Reasoning Santiago Negrete has used rippling to reason in framework logics, <ref> [Negrete, 1994, Negrete, 1996] </ref>. The rules of inference of an object-logic are represented as axioms in a framework or meta-logic, in his case Edinburgh LF, [Harper et al, 1992]. A theorem to be proved is first split into hypotheses and conclusion using, so called, `intro' rules.
Reference: [Negrete, 1996] <author> Negrete, S. </author> <month> (May </month> <year> 1996). </year> <title> Proof planning with logic presentations. </title> <type> Unpublished Ph.D. thesis, </type> <institution> Department of Artificial Intelligence, University of Edinburgh. </institution>
Reference-contexts: After two fertilizations with the target this yields the following closed form for the sum: m + 2 + n + 1 9 Meta-Logical Reasoning Santiago Negrete has used rippling to reason in framework logics, <ref> [Negrete, 1994, Negrete, 1996] </ref>. The rules of inference of an object-logic are represented as axioms in a framework or meta-logic, in his case Edinburgh LF, [Harper et al, 1992]. A theorem to be proved is first split into hypotheses and conclusion using, so called, `intro' rules. <p> The hypotheses and conclusion are then difference unified and wave annotations inserted in both. Rippling is then used to reduce the difference between them. An example from a simple propositional logic is given in figure 11. Several other examples from other logics can be found in his thesis <ref> [Negrete, 1996] </ref>. 10 SAM's Lemma Jurgen Cleve and Dieter Hutter have used rippling to prove SAM's lemma, [Cleve & Hutter, 1994]. SAM's lemma was the first open conjecture to be proved by an automated theorem prover, although user interaction was required, [Guard et al, 1969].
Reference: [Walsh et al, 1992] <author> Walsh, T., Nunes, A. and Bundy, A. </author> <year> (1992). </year> <title> The use of proof plans to sum series. </title> <editor> In Kapur, D., (ed.), </editor> <booktitle> 11th Conference on Automated Deduction, </booktitle> <pages> pages 325-339. </pages> <address> Springer Verlag. </address> <note> Lecture Notes in Computer Science No. 607. Also available from Edinburgh as DAI Research Paper 563. </note>
Reference-contexts: Whenever the goal is syntactically similar to the target, rippling may be used to reduce the difference between them and, hence, assist the proof. For instance, rippling has been used for summing series, <ref> [Walsh et al, 1992] </ref>, for proving limit theorems in analysis, [Yoshida et al, 1994], for reasoning in framework logics, [Negrete, 1994], and for general rewriting, [Cleve & Hutter, 1994]. Rippling works by the selective application of rewrite rules. <p> The proof of the step case can be found in figure 9. The example illustrates that rippling is useful in a fairly large application problems requiring inductive proof. 8 Example: Summing the Binomial Series Rippling has also been used in several different ways to sum series, <ref> [Walsh et al, 1992] </ref>. For instance, the pertubate method makes a makes an incremental change to the sum, similar to an induction step, and then ripples the incremented sum against itself. The standard form method ripples the sum against one or more previously solved sums.

References-found: 19

