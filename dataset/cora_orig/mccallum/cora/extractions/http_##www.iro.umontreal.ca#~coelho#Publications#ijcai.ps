URL: http://www.iro.umontreal.ca/~coelho/Publications/ijcai.ps
Refering-URL: http://www.iro.umontreal.ca/~coelho/
Root-URL: http://www.iro.umontreal.ca
Email: email: fcoelho,lapalmeg@iro.umontreal.ca  
Title: Extending Ontolingua for Representing Control Knowledge  
Author: Eliana Coelho Guy Lapalme 
Date: June 15, 1995  
Address: Succursale Centre-Ville, Montreal, Quebec, Canada, H3C3J1  
Affiliation: Departement d'Informatique et de Recherche Operationnelle, Universite de Montreal  
Abstract: In this paper we address the problem of control knowledge reusability. We propose an extension of Ontolingua to represent declaratively problem solving methods. We use the KADS framework to model Cover&Differentiate problem solving method, defining ontologies for the domain, the domain view and the inference knowledge. Our objective is to obtain a formal description of problem solving methods and to make them portable to other representation languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Brill. </author> <note> Loom Reference Manual, Version 2.0. </note> <institution> University of Southern California, </institution> <year> 1993. </year>
Reference-contexts: In this paper, we limited ourselves to model the inference knowledge of C&D. Presently, we are implementing C&D in Loom <ref> [1] </ref>. In the future, we will extend Ontolingua to represent the task knowledge of KADS. We will also build and organize a set of pre-defined inference steps. Acknowledgments We are grateful for many helpful and fruitful discussions with Marco Ramoni and Vilma L. Patel.
Reference: [2] <author> B. Chandrasekaran. </author> <title> Towards a Taxonomy of Problem Solving. </title> <journal> AI Magazine, </journal> <volume> 4(1) </volume> <pages> 9-17, </pages> <year> 1983. </year>
Reference-contexts: In this paper, we address the problem of control knowledge reusability. A starting point to cope with the problem of reusable control knowledge is to identify problem solving methods (PSMs) <ref> [2, 3, 11] </ref>. A PSM defines the set of actions and also the structure of the domain knowledge to solve a problem. For instance, Cover&Differentiate [5] is a PSM that defines the actions to solve a diagnostic problem using a causal network that associate symptoms to disorders.
Reference: [3] <author> W. Clancey. </author> <title> Heuristic Classification. </title> <journal> Artificial Intelligence, </journal> <volume> 1(27) </volume> <pages> 289-350, </pages> <year> 1985. </year>
Reference-contexts: In this paper, we address the problem of control knowledge reusability. A starting point to cope with the problem of reusable control knowledge is to identify problem solving methods (PSMs) <ref> [2, 3, 11] </ref>. A PSM defines the set of actions and also the structure of the domain knowledge to solve a problem. For instance, Cover&Differentiate [5] is a PSM that defines the actions to solve a diagnostic problem using a causal network that associate symptoms to disorders.
Reference: [4] <author> W. Clancey. </author> <title> Model Construction Operators. </title> <journal> Artificial Intelligence, </journal> <volume> 7(53) </volume> <pages> 1-115, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction An important evolution in the design of knowledge-based systems (KBSs) is representing domain knowledge separately from control knowledge <ref> [4] </ref>. Domain knowledge is the set of concepts and relations between them that corresponds to the conceptualization of a specific domain. Control knowledge is the set of operations over the domain knowledge to accomplish a task.
Reference: [5] <author> L. Eshelman. Mole: </author> <title> A knowledge-acquisition tool for cover-and-differentiate systems. </title> <editor> In S. Marcus, editor, </editor> <title> Automating Knowledge Acquisition for Expert Systems, </title> <booktitle> chapter 3, </booktitle> <pages> pages 37-79. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year> <month> 9 </month>
Reference-contexts: A starting point to cope with the problem of reusable control knowledge is to identify problem solving methods (PSMs) [2, 3, 11]. A PSM defines the set of actions and also the structure of the domain knowledge to solve a problem. For instance, Cover&Differentiate <ref> [5] </ref> is a PSM that defines the actions to solve a diagnostic problem using a causal network that associate symptoms to disorders. Several KBSs have been implemented with various problem solving methods. These are called task specific architectures, because they are specialized for different tasks (diagnostic, conception, planning, etc). <p> inference ontology and we define a domain view ontology which interprets the domain ontology to be used by the inference ontology. 2 Cover & Differentiate in Ontolingua To illustrate the representation of both domain knowledge and control knowledge in Ontolingua, we choose the Cover & Differentiate (C&D) problem solving method <ref> [5] </ref>. Cover & Differentiate is a PSM for diagnostic tasks. C&D diagnoses a problem by first proposing explanations candidates that cover or explain the symptoms or complaints given by the user and then seeking information that differentiate the candidates.
Reference: [6] <author> D. Fensel and F. V. Harmelen. </author> <title> A Comparison of languages which operationalize and formalize KADS models of expertise. </title> <journal> Knowledge Engineering Review, </journal> <volume> 9(2) </volume> <pages> 105-146, </pages> <year> 1994. </year>
Reference-contexts: The KADS methodology [16] distinguishes between domain and control knowledge but also defines three kinds of control knowledge. These categories of knowledge are organized hierarchically in several layers, with limited interaction. Based on the KADS conceptual model, some authors developed formal languages for describing and comparing problem solving methods <ref> [15, 6] </ref>. These formal languages can model domain structure and control knowledge of various PSMs, making easier to understand and modify them for solving different problems. Another approach is the use of an interlingua as the language to build libraries of reusable knowledge bases.
Reference: [7] <author> M.R. Genesereth and R.E. Fikes. </author> <title> Knowledge Interchange Format, </title> <type> Version 3.0, </type> <institution> Computer Science Department, Stanford University edition, </institution> <year> 1992. </year>
Reference-contexts: An interlingua is intended to be an interchange format: for instance, for two systems to share knowledge bases, they translate to and from this interlingua their own representation formalism. Ontolingua [9] is a tool for defining reusable ontologies. It uses KIF (Knowledge Interchange Format) <ref> [7] </ref>, an extension version of first-order predicate calculus. Unfortunately, Ontolingua does not address the problem of representing declarative control knowledge, being restricted to the analysis and translation of domain ontologies. <p> The definitions of Ontolingua are Lisp-like forms that associate a symbol with an argument list, a documentation string and a set of KIF sentences labeled by keywords. KIF has a declarative semantics, allowing the expression of arbitrary sentences in predicate calculus. For more details about KIF and Ontolingua see <ref> [7, 8] </ref>. Ontolingua supports the decomposition into modules by specifying a set of definitions, called Ontologies. The several categories of knowledge in KADS are modeled by defining distinct ontologies.
Reference: [8] <author> T.R. Gruber. Ontolingua: </author> <title> A mechanism to support portable ontologies. </title> <type> Technical report, Technical Report KSL91-66, </type> <institution> Stanford University, Knowledge Systems Laboratory, </institution> <year> 1992. </year>
Reference-contexts: The definitions of Ontolingua are Lisp-like forms that associate a symbol with an argument list, a documentation string and a set of KIF sentences labeled by keywords. KIF has a declarative semantics, allowing the expression of arbitrary sentences in predicate calculus. For more details about KIF and Ontolingua see <ref> [7, 8] </ref>. Ontolingua supports the decomposition into modules by specifying a set of definitions, called Ontologies. The several categories of knowledge in KADS are modeled by defining distinct ontologies.
Reference: [9] <author> T.R. Gruber. </author> <title> A translation approach to portable ontology specifications. </title> <journal> Knowledge Acquisition, </journal> <volume> 2(5) </volume> <pages> 199-220, </pages> <year> 1993. </year>
Reference-contexts: An interlingua is intended to be an interchange format: for instance, for two systems to share knowledge bases, they translate to and from this interlingua their own representation formalism. Ontolingua <ref> [9] </ref> is a tool for defining reusable ontologies. It uses KIF (Knowledge Interchange Format) [7], an extension version of first-order predicate calculus. Unfortunately, Ontolingua does not address the problem of representing declarative control knowledge, being restricted to the analysis and translation of domain ontologies.
Reference: [10] <author> V. F. Harmelen and J. Balder. </author> <title> (ML) 2 : A formal language for KADS Models of Expertise. </title> <editor> In G. Schreiber, B. Wielinga, and J. Breuker, editors, </editor> <title> KADS A Principled Approach to Knowledge-Based System Development, </title> <booktitle> chapter 8, </booktitle> <pages> pages 169-202. </pages> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: Cover & Differentiate is a PSM for diagnostic tasks. C&D diagnoses a problem by first proposing explanations candidates that cover or explain the symptoms or complaints given by the user and then seeking information that differentiate the candidates. C&D was formally described in [15] with the language (ML) 2 <ref> [10] </ref>. (ML) 2 follows the conceptual model of the KADS methodology using different kinds of logic to represent each category of knowledge.
Reference: [11] <author> J. McDermott. </author> <title> Preliminary steps toward a taxonomy of problem-solving methods. </title> <editor> In S. Mar-cus, editor, </editor> <title> Automating Knowledge Acquisition for Expert Systems, </title> <booktitle> chapter 8, </booktitle> <pages> pages 225-256. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference-contexts: In this paper, we address the problem of control knowledge reusability. A starting point to cope with the problem of reusable control knowledge is to identify problem solving methods (PSMs) <ref> [2, 3, 11] </ref>. A PSM defines the set of actions and also the structure of the domain knowledge to solve a problem. For instance, Cover&Differentiate [5] is a PSM that defines the actions to solve a diagnostic problem using a causal network that associate symptoms to disorders.
Reference: [12] <author> M. Musen, J. Gennari, H. Eriksson, S. Tu, and A. Puerta. PROT EG E-II: </author> <title> Computer Support For Development of Intelligent Systems From Libraries Of Components (Tech. </title> <type> Rep. Nr. KSL-94-60). Technical report, </type> <institution> Stanford University, Knowledge Systems Laboratory, </institution> <year> 1994. </year>
Reference-contexts: Ontolingua also eases the translation of ontologies, which adds to the portability of PSMs. Therefore, we have a tool to formalize and operationalize PSMs. 8 Another work whose goal's research are similar with ours is Protege-II system <ref> [17, 12] </ref> where a complete environment for modeling KBSs from reusable components is defined. The significant advantage of Protege-II is the automatic generation of knowledge acquisition tools specific for each PSMs.
Reference: [13] <author> R. Neches, R. Fikes, Finin T., T. Gruber, R. Patil, T. Senator, and W. R. Swartout. </author> <title> Enabling technology for knowledge sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 16-36, </pages> <year> 1991. </year>
Reference-contexts: Distinguishing domain knowledge from control knowledge allows the construction of a new KBS from reusable components. Thus, instead of creating knowledge bases from scratch, which is time consuming, difficult and expensive, a knowledge engineer can build a new system adapting pre-existent domain and control knowledge bases <ref> [13] </ref>. In this paper, we address the problem of control knowledge reusability. A starting point to cope with the problem of reusable control knowledge is to identify problem solving methods (PSMs) [2, 3, 11].
Reference: [14] <author> A. Newell. </author> <title> The Knowledge Level. </title> <journal> Artificial Intelligence, </journal> <volume> 1(18) </volume> <pages> 87-127, </pages> <year> 1982. </year>
Reference-contexts: Another approach is the use of an interlingua as the language to build libraries of reusable knowledge bases. An interlingua is a language for the communication and publication of knowledge, defined at the knowledge level <ref> [14] </ref> independently of the implementation. An interlingua is intended to be an interchange format: for instance, for two systems to share knowledge bases, they translate to and from this interlingua their own representation formalism. Ontolingua [9] is a tool for defining reusable ontologies.
Reference: [15] <author> G. Schreiber, B. Wielinga, and H. Akkermans. </author> <title> Using KADS to Analyze Problem-Solving Methods. </title> <editor> In G. Schreiber, B. Wielinga, and J. Breuker, editors, </editor> <title> KADS A Principled Approach to Knowledge-Based System Development, </title> <booktitle> chapter 18, </booktitle> <pages> pages 415-429. </pages> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: The KADS methodology [16] distinguishes between domain and control knowledge but also defines three kinds of control knowledge. These categories of knowledge are organized hierarchically in several layers, with limited interaction. Based on the KADS conceptual model, some authors developed formal languages for describing and comparing problem solving methods <ref> [15, 6] </ref>. These formal languages can model domain structure and control knowledge of various PSMs, making easier to understand and modify them for solving different problems. Another approach is the use of an interlingua as the language to build libraries of reusable knowledge bases. <p> Cover & Differentiate is a PSM for diagnostic tasks. C&D diagnoses a problem by first proposing explanations candidates that cover or explain the symptoms or complaints given by the user and then seeking information that differentiate the candidates. C&D was formally described in <ref> [15] </ref> with the language (ML) 2 [10]. (ML) 2 follows the conceptual model of the KADS methodology using different kinds of logic to represent each category of knowledge. <p> primitive inferences and we present our extension of Ontolingua for representing the inference knowledge of C&D. 3 (1) (Define-Ontology Domain-Knowledge (Other-domain-ontologies)) (2) (Define-Ontology Domain-View (Domain-Knowledge)) (3) (Define-Ontology Inference-Knowledge (Domain-View)) 2.3 Domain Knowledge In this section, we codify C&D domain knowledge in Ontolingua using as reference the formal description adapted from <ref> [15] </ref> and illustrated in the figure 3. The domain knowledge of C&D is represented by a explanation network in which the nodes represent states of a system. The relations establish explanation relations between the nodes, lower-level nodes being explained by the higher-level nodes. <p> For the description of the primitive steps of C&D see <ref> [15] </ref>. The Define-Ontology "Inference-Knowledge C&D" includes the "Domain-View-C&D" (1). The cover rule is part of the cover process in which considered explanations are generated (2). The anticipate rules are part of the differentiation process, in which the considered explanations generated by Cover are pruned (3)-(4).
Reference: [16] <author> G. Schreiber, B. Wielinga, and J. Breuker. </author> <title> Modeling expertise. </title> <editor> In G. Schreiber, B. Wielinga, and J. Breuker, editors, </editor> <title> KADS A Principled Approach to Knowledge-Based System Development, </title> <booktitle> chapter 2, </booktitle> <pages> pages 21-46. </pages> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: These works are based on the notion of a conceptual model: an abstract, independent implementation description of a PSM. A conceptual model describes the control knowledge used to accomplish a task and the required domain knowledge. The KADS methodology <ref> [16] </ref> distinguishes between domain and control knowledge but also defines three kinds of control knowledge. These categories of knowledge are organized hierarchically in several layers, with limited interaction. Based on the KADS conceptual model, some authors developed formal languages for describing and comparing problem solving methods [15, 6].
Reference: [17] <author> E. Walther, H. Eriksson, and M.A. Musen. </author> <title> Plug-and-Play: Construction of task-specific expert-system shells using sharable context ontologies. </title> <booktitle> Proceedings of the AAAI Workshop on Knowledge Representation Aspects of Knowledge Acquisition, </booktitle> <year> 1992. </year> <month> 10 </month>
Reference-contexts: Ontolingua also eases the translation of ontologies, which adds to the portability of PSMs. Therefore, we have a tool to formalize and operationalize PSMs. 8 Another work whose goal's research are similar with ours is Protege-II system <ref> [17, 12] </ref> where a complete environment for modeling KBSs from reusable components is defined. The significant advantage of Protege-II is the automatic generation of knowledge acquisition tools specific for each PSMs.
References-found: 17

