URL: http://www.ececs.uc.edu/~jpenix/kbse/pub/fmcad96.ps
Refering-URL: http://www.ececs.uc.edu/~jpenix/kbse/pub/
Root-URL: 
Email: fpbaraona,alex,pawg@ece.uc.edu  
Phone: 210030  
Title: Representing Abstract Architectures with Axiomatic Specifications and Activation Conditions  
Author: Phillip Baraona, Perry Alexander and Philip A. Wilsey 
Date: April 22, 1996  
Address: PO Box  Cincinnati, OH  
Affiliation: Department of Electrical Computer Engineering and Computer Science  The University of Cincinnati  
Abstract: Evaluating architectural design decisions early in the design process is critical for cost effective design. Formal analysis can provide such evaluation if architectures are defined in a formal way. This paper describes how vspec can be used to formally define an architecture during requirements specification. vspec is a Larch interface language for vhdl that annotates vhdl entities using the axiomatic style provided by Larch interface languages. Using vhdl's structural definition support, entities described in this manner are connected to form architectural descriptions. Activation conditions over component inputs define when that component must perform its transform. In this paper, we formally define a vspec component's state and how component states interact in an architecture. A rudimentary formal semantics for component activation is presented and used to define two potential satisfaction criterion. Finally, an illustrative example definition of a simple CPU is provided.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexander, P., Baraona, P., and Penix, J. </author> <title> Using Declarative Specifications and Case-Based Planning for System Synthesis. </title> <booktitle> Concurrent Engineering: Research and Applications 2, </booktitle> <month> 4 </month> <year> (1994). </year>
Reference-contexts: Support for this work was provided in part by the Advanced Research Projects Agency and monitored by Wright Labs under the RASSP Technology Program, contract numbers F33615-93-C-1315 and F33615-93-C-1316. 1 for a completed system including design detail, formally described abstract architectures can be evaluated when architecture decisions are made. vspec <ref> [1, 5] </ref>, a Larch interface language [8, 10] for vhdl [18], is a requirements description language that includes formal architecture definition support. vspec describes the requirements of digital system components using the canonical Larch approach and interconnects component descriptions using vhdl's structural definition features.
Reference: [2] <author> Allen, R., and Garlan, D. </author> <title> Formalizing Architectural Connection. </title> <booktitle> In Proc. Sixteenth International Conference on Software Engineering (May 1994), </booktitle> <pages> pp. 71-80. </pages>
Reference-contexts: The abstract architecture representation capabilities of vspec are also fairly closely related to several architecture description languages that have been developed to describe software architectures [7]. Some of the more well known architecture description are UniCon [20], Wright <ref> [2, 3] </ref> and Rapide [15, 16]. Each of these languages allow the definition of components and connectors to define a software architecture. This is very similar to the vhdl notion of a structural architecture.
Reference: [3] <author> Allen, R., and Garlan, D. </author> <title> A Case Study in Architectural Modelling: </title> <booktitle> The AEGIS System. In Proceedings of the 8th International Workshop on Software Specification and Design (March 1996). </booktitle>
Reference-contexts: The abstract architecture representation capabilities of vspec are also fairly closely related to several architecture description languages that have been developed to describe software architectures [7]. Some of the more well known architecture description are UniCon [20], Wright <ref> [2, 3] </ref> and Rapide [15, 16]. Each of these languages allow the definition of components and connectors to define a software architecture. This is very similar to the vhdl notion of a structural architecture.
Reference: [4] <author> Augustin, L., Luckham, D., Gennart, B., Huh, Y., and Stanculescu, A. </author> <title> Hardware Design and Simulation in VAL/VHDL. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Larch/vhdl annotations are added to a specific vhdl description to represent proof obligations for the verification process. This differs from vspec's purpose of representing requirements and design decisions at high levels of abstraction. Augustin and Luckham's val <ref> [4] </ref> is another attempt to annotate vhdl. The purpose of a val annotation to a vhdl description is to document the design for verification. val provides mechanisms for mapping a behavioral description to a structural description.
Reference: [5] <author> Baraona, P., Penix, J., and Alexander, P. VSPEC: </author> <title> A Declarative Requirements Specification Language for VHDL. In High-Level System Modeling: Specification Languages, </title> <editor> J.-M. Berge, O. Levia, and J. Rouillard, Eds., </editor> <volume> vol. </volume> <booktitle> 3 of Current Issues in Electronic Modeling. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995, </year> <journal> ch. </journal> <volume> 3, </volume> <pages> pp. 51-75. </pages>
Reference-contexts: Support for this work was provided in part by the Advanced Research Projects Agency and monitored by Wright Labs under the RASSP Technology Program, contract numbers F33615-93-C-1315 and F33615-93-C-1316. 1 for a completed system including design detail, formally described abstract architectures can be evaluated when architecture decisions are made. vspec <ref> [1, 5] </ref>, a Larch interface language [8, 10] for vhdl [18], is a requirements description language that includes formal architecture definition support. vspec describes the requirements of digital system components using the canonical Larch approach and interconnects component descriptions using vhdl's structural definition features.
Reference: [6] <author> Chalin, P. </author> <title> On the Language Design and Semantic Foundation of LCL, a Larch/C Interface Specification Language. </title> <type> PhD thesis, </type> <institution> Concordia University, Department of Computer Science, </institution> <address> Montreal, Quebec, Canada, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: This is analogous to the variable 0 notation of lcl <ref> [6, 9] </ref> 2 entity sort is port (input: in integer_array; output: out integer_array); includes sort; modifies output; requires true; ensures permutation (output'post, input) and sorted (output'post); constrained by power &lt;= 5 mW and size &lt;= 3 um * 5 um and heat &lt;= 10 mW and clock &lt;= 50 MHz and <p> Most other Larch interface languages contain a modifies clause, and the definition of vspec modifies clause is very similar to the definitions found in these languages <ref> [6, 9, 14] </ref>. The includes clause is used to include Larch Shared Language definitions in a vspec description. The sorts and operators defined in the lsl trait named by the includes clause can be used in the vspec definition. <p> To define such state changes, a component state is defined along with a means for combining component states into an architecture state. The formal vspec model of the state of a component is based on Chalin's state model <ref> [6, Chapter 6] </ref> for lcl. This model partitions the computational state of an lcl description into an environment and a store [21].
Reference: [7] <author> Garlan, D., and Shaw, M. </author> <title> An Introduction to Software Architecture. In Advances in Software Eng. and Knowledge Eng., </title> <editor> V. Ambriola and G. Tortora, Eds., </editor> <volume> vol. 2. </volume> <publisher> World Scientific, </publisher> <address> New York, </address> <year> 1993, </year> <pages> pp. 1-39. 14 </pages>
Reference-contexts: This is once again slightly different than vspec's purpose of high level requirements representation. The abstract architecture representation capabilities of vspec are also fairly closely related to several architecture description languages that have been developed to describe software architectures <ref> [7] </ref>. Some of the more well known architecture description are UniCon [20], Wright [2, 3] and Rapide [15, 16]. Each of these languages allow the definition of components and connectors to define a software architecture. This is very similar to the vhdl notion of a structural architecture.
Reference: [8] <author> Guttag, J., Horning, J., and Wing, J. </author> <title> The Larch Family of Specification Languages. </title> <journal> IEEE Software 2, </journal> <volume> 5 (1985), </volume> <pages> 24-36. </pages>
Reference-contexts: in part by the Advanced Research Projects Agency and monitored by Wright Labs under the RASSP Technology Program, contract numbers F33615-93-C-1315 and F33615-93-C-1316. 1 for a completed system including design detail, formally described abstract architectures can be evaluated when architecture decisions are made. vspec [1, 5], a Larch interface language <ref> [8, 10] </ref> for vhdl [18], is a requirements description language that includes formal architecture definition support. vspec describes the requirements of digital system components using the canonical Larch approach and interconnects component descriptions using vhdl's structural definition features.
Reference: [9] <author> Guttag, J. V., and Horning, J. J. </author> <title> Introduction to LCL, A Larch/C Interface Language. </title> <type> Tech. Rep. 74, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, CA 94301, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: This is analogous to the variable 0 notation of lcl <ref> [6, 9] </ref> 2 entity sort is port (input: in integer_array; output: out integer_array); includes sort; modifies output; requires true; ensures permutation (output'post, input) and sorted (output'post); constrained by power &lt;= 5 mW and size &lt;= 3 um * 5 um and heat &lt;= 10 mW and clock &lt;= 50 MHz and <p> Most other Larch interface languages contain a modifies clause, and the definition of vspec modifies clause is very similar to the definitions found in these languages <ref> [6, 9, 14] </ref>. The includes clause is used to include Larch Shared Language definitions in a vspec description. The sorts and operators defined in the lsl trait named by the includes clause can be used in the vspec definition.
Reference: [10] <author> Guttag, J. V., and Horning, J. J. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: in part by the Advanced Research Projects Agency and monitored by Wright Labs under the RASSP Technology Program, contract numbers F33615-93-C-1315 and F33615-93-C-1316. 1 for a completed system including design detail, formally described abstract architectures can be evaluated when architecture decisions are made. vspec [1, 5], a Larch interface language <ref> [8, 10] </ref> for vhdl [18], is a requirements description language that includes formal architecture definition support. vspec describes the requirements of digital system components using the canonical Larch approach and interconnects component descriptions using vhdl's structural definition features.
Reference: [11] <author> Hoare, C. A. R. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1985. </year>
Reference-contexts: This paper describes vspec, concentrating on the language's facilities for describing abstract architectures. Section 2 provides a brief summary of the vspec language. Section 3 describes vspec abstract architectures, including a definition of the vspec state model and a description of how a process algebra (csp <ref> [11] </ref>) is used to provide a semantics for the vspec activation condition. Section 4 discusses how these semantics can be used verify that an abstract architecture satisfies the specification of the entity. <p> In the find example, both components activate when any of their input signals change. Formally, the contribution of the sensitive to clause to the transformation specified by vspec is easily represented using a traditional process algebra such as csp <ref> [11] </ref>. Components become processes and events are defined as the states a component enters. Thus, any vspec component can be described by a process that consumes states and generates a process in a new state. <p> In the csp model of a vspec process, this notion can be understood by examining the possible traces of A from Equation 6. Hoare <ref> [11] </ref> defines traces over parallel composition, traces (C 1 k C 2 ), as: traces (C 1 k C 2 ) = ft j (t j ffC 1 ) 2 traces (C 1 ) ^ (t j ffC 2 ) 2 traces (C 2 ) ^ t 2 (ffC 1 [ <p> Equation 8 is a weak bisimulation correctness obligation for showing architecture A satisfies a single abstract state change specification. Here, A is the set of concrete states where the 2 Recall that in csp <ref> [11] </ref>, t j ffP restricts the trace t to contain only events that appear in the alphabet of P . 8 Abstract State Concrete State S Component Execution S''S' .... activation condition of at least one component in A is true.
Reference: [12] <author> Jamsek, D., and Bickford, M. </author> <title> Formal Verification of VHDL Models. </title> <type> Technical Report RL-TR-94-3, </type> <institution> Rome Laboratory, Griffiss Air Force Base, </institution> <address> NY, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: jump, load, store introduces am: W ! mode addr: W ! A ins: W ! instruction rnum: W ! N change again until something (such as activating reset) outside of mm changes it. 6 Related Work Odyssey Research Associates (ORA) is developing Larch/vhdl, an alternative Larch interface language for vhdl <ref> [12] </ref>. Larch/vhdl is targeted for formal analysis of a vhdl description and ORA is defining a formal semantics for vhdl using lsl. The lsl representations are used in a traditional theorem prover to verify system correctness.
Reference: [13] <author> Lamport, L. </author> <title> A Simple Approach to Specifying Concurrent Systems. </title> <journal> Communications of the ACM 32, </journal> <month> 1 (January </month> <year> 1989), </year> <pages> 32-45. </pages>
Reference-contexts: Reducing the state sequence removes concrete state changes that are not observable in the external state. It should be noted that the component semantics thus far specifies only liveness properties (what the system must do) and largely ignores safety properties (what the system must not do) <ref> [13] </ref>. The weak bisimulation semantic specifies only characteristics of the resultant state and by definition ignores characteristics of intermediate states. This should not be viewed as a fatal flaw because this is precisely what traditional block diagrams define.
Reference: [14] <author> Leavens, G. T. </author> <note> Larch/C++ Reference Manual. Available at ftp://ftp.cs.iastate.edu/pub/larchc++/lcpp.ps.gz., </note> <year> 1995. </year>
Reference-contexts: Most other Larch interface languages contain a modifies clause, and the definition of vspec modifies clause is very similar to the definitions found in these languages <ref> [6, 9, 14] </ref>. The includes clause is used to include Larch Shared Language definitions in a vspec description. The sorts and operators defined in the lsl trait named by the includes clause can be used in the vspec definition.
Reference: [15] <author> Luckham, D., Kenney, J., Augustin, L., Vera, J., Bryan, D., and Mann, W. </author> <title> Specification and Analysis of System Architecture Using Rapide. </title> <journal> IEEE Transactions on Software Engineering 21, </journal> <month> 4 (April </month> <year> 1995), </year> <pages> 315-355. </pages>
Reference-contexts: The abstract architecture representation capabilities of vspec are also fairly closely related to several architecture description languages that have been developed to describe software architectures [7]. Some of the more well known architecture description are UniCon [20], Wright [2, 3] and Rapide <ref> [15, 16] </ref>. Each of these languages allow the definition of components and connectors to define a software architecture. This is very similar to the vhdl notion of a structural architecture.
Reference: [16] <author> Luckham, D., and Vera, J. </author> <title> An Event-Based Architecture Definition Language. </title> <journal> IEEE Transactions on Software Engineering 21, </journal> <month> 9 (September </month> <year> 1995), </year> <pages> 717-734. </pages>
Reference-contexts: The abstract architecture representation capabilities of vspec are also fairly closely related to several architecture description languages that have been developed to describe software architectures [7]. Some of the more well known architecture description are UniCon [20], Wright [2, 3] and Rapide <ref> [15, 16] </ref>. Each of these languages allow the definition of components and connectors to define a software architecture. This is very similar to the vhdl notion of a structural architecture.
Reference: [17] <author> Milner, R. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> vol. 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1980. </year>
Reference-contexts: We call this function abs and note that a concrete state c is equivalent to an abstract state a if and only if abs (c) = a. The most traditional correctness criterion used to verify an abstract architecture implements its specification is weak bisimulation <ref> [17] </ref>. A weak bisimulation (or simply bisimulation) condition holds when a sequence of states in the concrete model produces a desired single state change specified by the abstract model (see Figure 5). Only the first and last state of the concrete state sequence are significant.
Reference: [18] <author> Perry, D. </author> <title> VHDL, 1st ed. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Architectural design decisions made early in a system's design profoundly affect overall design quality. Unfortunately, architecture decisions are rarely evaluated until late in the design process. Simulation-based design languages such as vhdl <ref> [18] </ref> do not allow evaluation until complete models exist. Such models include not only architectural decisions, but also component design decisions. For large systems, simulatable models appear late in the design driving up the cost of error correction. <p> Advanced Research Projects Agency and monitored by Wright Labs under the RASSP Technology Program, contract numbers F33615-93-C-1315 and F33615-93-C-1316. 1 for a completed system including design detail, formally described abstract architectures can be evaluated when architecture decisions are made. vspec [1, 5], a Larch interface language [8, 10] for vhdl <ref> [18] </ref>, is a requirements description language that includes formal architecture definition support. vspec describes the requirements of digital system components using the canonical Larch approach and interconnects component descriptions using vhdl's structural definition features.
Reference: [19] <author> Roy, J., Kumar, N., Dutta, R., and Vemuri, R. </author> <title> DSS: A Distributed High-Level Synthesis System. </title> <journal> IEEE Design&Test of Computers (June 1992), </journal> <pages> 18-32. </pages>
Reference-contexts: Some methodologies may extend the block diagram approach to include safety properties, 9 but the traditional diagram specifies only what must happen and when it must happen. 5 vspec Example: the Move Machine This section presents a vspec description of the Move Machine <ref> [19] </ref>. The Move Machine is a simple CPU that moves data from one memory location to another. It contains four instructions: jump, load register from memory, store register to memory, and halt. There are four adressing modes: absolute, immdediate, indirect and relative.
Reference: [20] <author> Shaw, M., DeLine, R., Klein, D., Ross, T., Young, D., and Zelesnik, G. </author> <title> Abstractions for Software Architecture and Tools to Support Them. </title> <journal> IEEE Transactions on Software Engineering 21, </journal> <month> 4 (April </month> <year> 1995), </year> <pages> 314-335. </pages>
Reference-contexts: The abstract architecture representation capabilities of vspec are also fairly closely related to several architecture description languages that have been developed to describe software architectures [7]. Some of the more well known architecture description are UniCon <ref> [20] </ref>, Wright [2, 3] and Rapide [15, 16]. Each of these languages allow the definition of components and connectors to define a software architecture. This is very similar to the vhdl notion of a structural architecture.
Reference: [21] <author> Tennent, R. </author> <booktitle> Principles of Programming Languages. Computer Science Series. Prenitce-Hall International, </booktitle> <year> 1981. </year> <month> 15 </month>
Reference-contexts: The formal vspec model of the state of a component is based on Chalin's state model [6, Chapter 6] for lcl. This model partitions the computational state of an lcl description into an environment and a store <ref> [21] </ref>. The environment maps (variable) identifiers into objects and the store binds objects to the values they contain: Env == Id ! Obj (2) Store == Obj ! Value (3) Separating the environment and the store in this fashion is common among formal models of program state.
References-found: 21

