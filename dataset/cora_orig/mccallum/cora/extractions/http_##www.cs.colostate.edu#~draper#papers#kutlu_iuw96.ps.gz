URL: http://www.cs.colostate.edu/~draper/papers/kutlu_iuw96.ps.gz
Refering-URL: http://www.cs.colostate.edu/~vision/html/publications.html
Root-URL: 
Title: Persistent Data Management for Visual Applications  
Author: G okhan Kutlu, Bruce A. Draper, J. Eliot B. Moss, Edward M. Riseman, Allen R. Hanson 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: A visual application is an application that manipulates visual data as part of its processing. Visual applications need to represent, manipulate, store, and retrieve both raw and processed visual data. Existing relational and object-oriented database systems fail to offer satisfactory visual data management support because they lack the kinds of representations, storage structures, indices, access methods, and query mechanisms needed for visual data. We argue that extensible visual object stores offer feasible and effective means to address the data management needs of visual applications. ISR4 is such a visual object store under development at the University of Massachusetts for the management of persistent visual information. 
Abstract-found: 1
Intro-found: 1
Reference: [Brolio, 1989] <author> J. Brolio, B. Draper, R. Beveridge, and A. Hanson. </author> <title> ISR: A Database for Symbolic Processing in Computer Vision. </title> <journal> IEEE Computer, </journal> <volume> 22(12) </volume> <pages> 22-30, </pages> <year> 1989. </year>
Reference-contexts: As shown in Figure 1, ISR4 is the integration of an earlier visual data management and process integration tool called ISR3 1 [Draper, 1994], with Mneme [Moss, 1990], a persistent object store (also developed at the University of Massachusetts). 1 ISR (Intermediate Symbolic Representation; <ref> [Brolio, 1989] </ref>) is the name of a series of symbolic databases for visual information developed at the University of Massachusetts; ISR4 is the most recent version. Spatial and geometric representations. <p> Spatial and temporal indexing and query methods. ISR3 is equipped with a hierarchy of C++ classes that provide representations and methods for associatively and spatially organizing and accessing sets of memory-resident objects [Draper, 1994]. In particular, 2D geometric objects in images can be spatially stored into two-dimensional grids <ref> [Brolio, 1989] </ref> and retrieved according to spatial position in the image. We are currently developing persistent versions of these access methods. When manipulating persistent data, these techniques can significantly reduce data access times because only the index data structures need to be kept in-memory when indexing persistent objects.
Reference: [Draper, 1994] <author> B. A. Draper, G. Kutlu, E. Riseman, and A. Hanson. ISR3: </author> <title> Communication and Data Storage for an Unmanned Ground Vehicle. </title> <booktitle> In IEEE International Conference on Pattern Recognition, </booktitle> <pages> pages 833-836, </pages> <year> 1994. </year>
Reference-contexts: It therefore must be managed by efficient storage and access mechanisms which are geared to the nature (e.g., spatial, temporal, 3D) of the data. We addressed the management of temporary data in an earlier visual data management and process integration tool, called ISR3 <ref> [Draper, 1994] </ref>. In this paper, we first discuss the issues related to the management of persistent data in visual applications, and the shortcomings of current relational and object-oriented systems in dealing with these issues. <p> As shown in Figure 1, ISR4 is the integration of an earlier visual data management and process integration tool called ISR3 1 <ref> [Draper, 1994] </ref>, with Mneme [Moss, 1990], a persistent object store (also developed at the University of Massachusetts). 1 ISR (Intermediate Symbolic Representation; [Brolio, 1989]) is the name of a series of symbolic databases for visual information developed at the University of Massachusetts; ISR4 is the most recent version. <p> Spatial and temporal indexing and query methods. ISR3 is equipped with a hierarchy of C++ classes that provide representations and methods for associatively and spatially organizing and accessing sets of memory-resident objects <ref> [Draper, 1994] </ref>. In particular, 2D geometric objects in images can be spatially stored into two-dimensional grids [Brolio, 1989] and retrieved according to spatial position in the image. We are currently developing persistent versions of these access methods.
Reference: [Dr oge, 1993] <author> G. Dr oge and H.-J. Schek. </author> <title> Query Adaptive Data Space Partitioning Using Variable-Sized Storage Clusters. </title> <booktitle> In Advances in Spatial Databases: Proceedings of the 3rd International Symposium SSD, </booktitle> <pages> pages 337-356, </pages> <year> 1993. </year>
Reference-contexts: Traditional database systems do not provide appropriate data types or built-in support for images or similar 2D objects (e.g. maps). Adaptive clustering techniques used for clustering multidimensional data according to patterns of access are not mature, and the ones suggested depend on complex access pattern statistics <ref> [Dr oge, 1993, Stonebraker, 1994] </ref>. Associative clustering. As discussed above, many visual applications need to store not only raw images, but also symbolic data extracted from (or associated with) images. In content-based image retrieval, for example, commonly stored data include color histograms, invariants of shape moments, and texture features.
Reference: [Elmasri, 1990] <author> R. Elmasri, G. Wuu, and Y. Kim. </author> <title> The Time Index: An Access Structure for Temporal Data. </title> <booktitle> In Proceedings of the Conference on Very Large Databases, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: We are also adding 3-D access mechanisms, and spatial and temporal query languages and techniques to this framework. A temporal index based on the Time Index <ref> [Elmasri, 1990] </ref>, and optional versioning will also be provided to support historical queries. Once indices are built, query languages and techniques will also be implemented within this framework. Extensibility.
Reference: [Hoogs, 1994] <author> A. Hoogs and B. Kniffin. </author> <title> The RADIUS Testbed Database: </title> <booktitle> Issues and Design. In IUW, Mon-terey, CA, </booktitle> <volume> volume 1, </volume> <pages> pages 269-276, </pages> <month> Nov. </month> <year> 1994. </year>
Reference: [Kutlu, 1996] <author> G. Kutlu, B. A. Draper, J. E. B. Moss, and E. Riseman. </author> <title> Support Tools for Visual Information Management. </title> <note> To appear in SDAIR, </note> <year> 1996. </year>
Reference-contexts: and data clustering policies will be accessible for customization and fine tuning. * Applications will be lighter-weight since the fea tures of the visual object store will be well integrated, and only those features needed will be part of the application; unnecessary features will be turned off. 4 ISR4 ISR4 <ref> [Kutlu, 1996] </ref> is an extensible visual object store under development at the University of Massachusetts. <p> An example of customizing storage and access for visual applications is the ISR4 tile-image format, where an image is clustered on disk, and only required sub-images are brought into memory (on-demand). This ability significantly reduces the number of page swaps during common image processing operations <ref> [Kutlu, 1996] </ref>. Concurrent, Distributed Database Operations. Mneme supports concurrent database operations on arbitrarily complex objects within a distributed setting. It also provides customizable transaction and concurrency support, as well as extensible caching for use in client-server modes of operation. Spatial and temporal indexing and query methods. <p> In such cases, ISR4 provides an initial set of powerful tools, and leaves it to the database implementor to generate representations, operators, indices, and query facilities tailored to the application. As an example, ISR4 allowsand encouragesthe user to extend its initial set of representations by adding new ones <ref> [Kutlu, 1996] </ref>. Visual data types can be easily defined and integrated with the system using ISR4's data definition language (DDL).
Reference: [Lohman, 1991] <author> G. M. Lohman, B. Lindsay, H. Pira hesh, and K. B. Schiefer. </author> <title> Extensions to Starburst: Objects, types, functions, and rules. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 94-109, </pages> <year> 1991. </year>
Reference-contexts: The features, which consist of objects as complex as histograms and reduced resolution edge maps, are currently stored in an extensible relational database called Starburst <ref> [Lohman, 1991] </ref>. The images themselves, on the other hand, are stored in flat files. One can achieve better data clustering and faster data access if the images and related features are stored using the strategies of ISR4.
Reference: [Moss, 1990] <author> J. Eliot B. Moss. </author> <title> Design of the Mneme Persistent Object Store. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(2) </volume> <pages> 103-139, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: As shown in Figure 1, ISR4 is the integration of an earlier visual data management and process integration tool called ISR3 1 [Draper, 1994], with Mneme <ref> [Moss, 1990] </ref>, a persistent object store (also developed at the University of Massachusetts). 1 ISR (Intermediate Symbolic Representation; [Brolio, 1989]) is the name of a series of symbolic databases for visual information developed at the University of Massachusetts; ISR4 is the most recent version. Spatial and geometric representations.
Reference: [Mundy, 1992] <author> J. L. Mundy, R. Welty, L. Quam, T. Strat, W. Bremmer, M. Horwedel, D. Hackett, and A. Hoogs. </author> <title> The RADIUS Common Development Environment. </title> <booktitle> In IUW, </booktitle> <address> San Diego, CA, </address> <pages> pages 215-228, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: In content-based image retrieval, for example, commonly stored data include color histograms, invariants of shape moments, and texture features. Moreover, symbolic data often need to be associated with the image region they came from so that they can be retrieved with the sub-image. In the RADIUS <ref> [Mundy, 1992] </ref> program, for example, site models reconstructed from sets of aerial images need to be grouped, stored, and retrieved according to their functional areas. <p> Along with indices, query mechanisms can also be implemented. 5.2 Site Models for Photo-interpretation Intelligence gathering operations provide other applications. As an example, the RADIUS project <ref> [Mundy, 1992] </ref> is developing Image Understanding (IU) tools for image-analysts to support automated 3D cite model acquisition, model extension, and change detection. In a typical scenario, analysts build up a folder of image data and other intelligence about a site.
Reference: [Niblack, 1993] <author> W. Niblack et. al. </author> <title> The QBIC Project: Querying Images By Content Using Color, Texture, and Shape. In SPIE, Storage and Retrieval for Image and Video Databases, </title> <booktitle> volume 1908, </booktitle> <pages> pages 173-187, </pages> <year> 1993. </year>
Reference-contexts: One is content-based image retrieval, for example, the QBIC <ref> [Niblack, 1993] </ref> project. In QBIC, color, texture, shape and sketch features are computed for image areas outlined by the user, and used at query time for image retrieval.
Reference: [Stonebraker, 1994] <author> S. Sarawagi and M. Stonebraker. </author> <title> Efficient Organization of Large Multidimensional Arrays. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <volume> volume 10, </volume> <pages> pages 328-336, </pages> <year> 1994. </year>
Reference-contexts: Most applications store images in files, and leave the management of memory (page swaps, etc.) to the operating system. This approach can result in a large number of page swaps, especially when the physical clustering of the image on disk does not match the access pattern of the application <ref> [Stonebraker, 1994] </ref>. Traditional database systems do not provide appropriate data types or built-in support for images or similar 2D objects (e.g. maps). <p> Traditional database systems do not provide appropriate data types or built-in support for images or similar 2D objects (e.g. maps). Adaptive clustering techniques used for clustering multidimensional data according to patterns of access are not mature, and the ones suggested depend on complex access pattern statistics <ref> [Dr oge, 1993, Stonebraker, 1994] </ref>. Associative clustering. As discussed above, many visual applications need to store not only raw images, but also symbolic data extracted from (or associated with) images. In content-based image retrieval, for example, commonly stored data include color histograms, invariants of shape moments, and texture features.
References-found: 11

