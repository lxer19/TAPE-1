URL: http://www.cs.jhu.edu/~goodrich/pubs/ray.ps
Refering-URL: http://www.cs.jhu.edu/~goodrich/pubs/index.html
Root-URL: http://www.cs.jhu.edu
Email: goodrich@cs.jhu.edu  rt@cs.brown.edu  
Title: Dynamic Ray Shooting and Shortest Paths in Planar Subdivisions via Balanced Geodesic Triangulations  
Author: Michael T. Goodrich Roberto Tamassia 
Keyword: Computational geometry, ray shooting, shortest path, point location, planar sub division, polygon triangulation, dynamic data structure, on-line algorithm.  
Date: May 19-21, 1993.  
Note: This research was announced in preliminary form in the 9th ACM Symp. on Computational Geometry, San Diego,  Work by this author was supported in part by the National Science Foundation under grants CCR-9003299 and CCR-9300079, and by the NSF and DARPA under grant CCR-8908092. Work by this author was supported in part by the National Science Foundation under grants CCR-9007851 and CCR-9423847, by the U.S. Army Research Office under grants DAAL03-91-G-0035 and 34990-MA-MUR, and by by the Office of Naval Research and the Defense Advanced Research Projects Agency under contract N00014-91-J-4052, ARPA order 8225.  
Address: Baltimore, MD 21218  Providence, RI 02912-1910  
Affiliation: Dept. of Computer Science The Johns Hopkins University  Dept. of Computer Science Brown University  
Abstract: We give new methods for maintaining a data structure that supports ray shooting and shortest path queries in a dynamically-changing connected planar subdivision S. Our approach is based on a new dynamic method for maintaining a balanced decomposition of a simple polygon via geodesic triangles. We maintain such triangulations by viewing their dual trees as balanced trees. We show that rotations in these trees can be implemented via a simple "diagonal swapping" operation performed on the corresponding geodesic triangles, and that edge insertion and deletion can be implemented on these trees using operations akin to the standard split and splice operations. We also maintain a dynamic point location structure on the geodesic triangulation, so that we may implement ray shooting queries by first locating the ray's endpoint and then walking along the ray from geodesic triangle to geodesic triangle until we hit the boundary of some region of S. The shortest path between two points in the same region is obtained by locating the two points and then walking from geodesic triangle to geodesic triangle either following a boundary or taking a shortcut through a common tangent. Our data structure uses O(n) space and supports queries and updates in O(log 2 n) worst-case time, where n is the current size of S. It outperforms the previous best data structure for this problem by a log n factor in all the complexity measures (space, query times, and update times). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and M. Sharir. </author> <title> Applications of a new partitioning scheme. </title> <booktitle> In Proc. 2nd Workshop Algorithms Data Struct., volume 519 of Lecture Notes in Computer Science, </booktitle> <pages> pages 379-391. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries <ref> [1, 3, 4, 11, 12, 19] </ref>, even in parallel [10, 15]. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [2] <author> B. Chazelle, H. Edelsbrunner, M. Grigni, L. Guibas, J. Hershberger, M. Sharir, and J. Snoeyink. </author> <title> Ray shooting in polygons using geodesic triangulations. </title> <journal> Algorithmica, </journal> <volume> 12 </volume> <pages> 54-68, </pages> <year> 1994. </year>
Reference-contexts: In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space. More recently, Chazelle et al. <ref> [2] </ref> give an elegant scheme for building a static ray shooting data structure that uses O (n) space and answers ray shooting queries in O (log 2 n) time. <p> We refer to the inner polygonal region as the deltoid region of t , due to its resemblance to the well-known quartic curve [17], and we refer to the three chains emanating out from the deltoid region as tails. (These definitions differ somewhat from those of Chazelle et al. <ref> [2] </ref>, for their "geodesic triangle" is what we are calling a "deltoid region," and our "geodesic triangle" is something they refer to as a "kite.") Note that a geodesic triangle may actually be just a path (e.g., if (w; u) = (u; v) [ (v; w)), in which case it would <p> We say that a geodesic triangulation is balanced if the diameter of T is O (log jT j). As observed by Chazelle et al. <ref> [2] </ref>, one can efficiently perform a ray-shooting query for a ray ~r by a simple "walk-through" strategy, where one first locates the geodesic triangle whose interior contains the starting point for ~r and one then iteratively traverses geodesic triangles along the direction ~r until one hits the boundary of P .
Reference: [3] <author> B. Chazelle and L. J. Guibas. </author> <title> Visibility and intersection problems in plane geometry. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 551-581, </pages> <year> 1989. </year>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries <ref> [1, 3, 4, 11, 12, 19] </ref>, even in parallel [10, 15]. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space. <p> In particular, the data structures of Chazelle and Guibas <ref> [3] </ref> and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [4] <author> S. W. Cheng and R. Janardan. </author> <title> Algorithms for ray-shooting and intersection searching. </title> <journal> J. Algorithms, </journal> <volume> 13 </volume> <pages> 670-692, </pages> <year> 1992. </year>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries <ref> [1, 3, 4, 11, 12, 19] </ref>, even in parallel [10, 15]. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [5] <author> Y.-J. Chiang, F. P. Preparata, and R. Tamassia. </author> <title> A unified approach to dynamic point location, ray shooting, and shortest paths in planar maps. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 44-53, </pages> <year> 1993. </year>
Reference-contexts: In the dynamic setting, the best result to date for connected subdivisions is the data structure of Chiang, Preparata, and Tamassia <ref> [5] </ref>, which uses O (n log n) space and supports ray-shooting queries, shortest path queries, and insertion and deletion of vertices and edges in O (log 3 n) time (amortized for vertex updates). <p> The space requirement for our structure is O (n), and the worst-case running time for all operations (queries and updates) is O (log 2 n). Our data structure outperforms the previous best data structure <ref> [5] </ref> for this problem by a log n factor in all the complexity measures (space, query times, and update times). <p> DetachVertex (v; e): Remove a degree-one vertex v and edge e incident on v. The above repertory of operations is complete for connected subdivisions. Also, AttachVertex and DetachVertex can be simulated by a ray shooting query followed by a sequence of O (1) InsertVertex, RemoveVertex, InsertEdge, and RemoveEdge operations <ref> [5] </ref>.
Reference: [6] <author> Y.-J. Chiang and R. Tamassia. </author> <title> Dynamic algorithms in computational geometry. </title> <journal> Proc. IEEE, </journal> <volume> 80(9) </volume> <pages> 1412-1434, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction An exciting trend in algorithmic research has been to show how one can efficiently maintain various properties of a collection of geometric objects while updating that structure in a dynamic fashion (e.g., see the survey on dynamic algorithms in computational geometry given by Chiang and Tamassia <ref> [6] </ref>).
Reference: [7] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: Our approach is to maintain a geodesic triangulation of polygon P so that its dual tree T is a balanced binary tree|in particular, a red-black tree <ref> [7, 13, 20, 25] </ref>. <p> that the root of a red-black tree T actually has a parent, which is a degree-one "dummy node." In addition, we desire that our tree-modification operations be based strictly on the use of tree rotations, and not use the more general pointer changing as is used in the standard implementations <ref> [7, 13, 20, 25] </ref>. Fortunately, such implementations are easy to come by, as we show next. 6 3.2 Non-destructive tree updates In this subsection we describe how to perform all red-black tree update operations using rotations only. We begin with the splice operation. <p> We associate with this "dummy parent" node a pointer to the record in the doubly-connected edge list structure repsenting P in S. The main idea of our primary structure, then, is to maintain this rooted tree T as a red-black tree <ref> [7, 13, 20, 25] </ref>, ignoring the (dummy) leaf node associated with . 9 4.2 The secondary point location structure As a secondary data structure we maintain a dynamic point location data structure on the deltoid regions determined by the geodesic triangulations of all the faces in S. <p> In particular, for each deltoid region ffi, we maintain each of the three concave chains for ffi in a balanced tree structure (e.g., a red-black tree <ref> [7, 13, 20, 25] </ref>). Each internal node in such a tree corresponds to a subchain of a concave chain and stores the length of the associated subchain.
Reference: [8] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: Suppose further that S is a connected planar subdivision, i.e., when joined at overlapping endpoints, the segments of L form a connected planar graph, which would occur, for example, if S were a Voronoi diagram or Delaunay triangulation (e.g., see <ref> [8, 21, 22] </ref>). Note that S has at least one unbounded region, and, without loss of generality we can assume that there is just one such external region, for otherwise we can "clip" all the unbounded regions by a large-enough bounding box.
Reference: [9] <author> M. Goodrich and R. Tamassia. </author> <title> Dynamic trees and dynamic point location. </title> <booktitle> In Proc. 23rd Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 523-533, </pages> <year> 1991. </year>
Reference-contexts: In particular, we use the structure of Goodrich and Tamassia <ref> [9] </ref>, which uses O (n) space, supports point location queries in O (log 2 n) time, edge insertion and deletion in O (log n) time, and vertex insertion and deletion in O (log n) time as well. <p> Doing this for each deltoid region, then, refines S into a monotone subdivision S 0 . 2 Thus, our secondary structure consists of the dynamic point location of Goodrich and Tamassia <ref> [9] </ref> built upon the union of the deltoid regions in all the geodesic triangles in S, together with at most one edge per deltoid region so as to make each face in the resulting subdivision S 0 monotone with respect to the x-axis. 4.3 The tertiary deltoid structures The final component <p> The secondary structure requires O (n) space, since the total number of edges in the subdivision S is O (n) and we are building the data structure of Goodrich and Tamassia <ref> [9] </ref> on a subdivision that is a subgraph of a triangulation of S. <p> See Figure 6. We begin by performing a point location for the origin p of ~r using the secondary point location structure. This takes time O (log 2 n) <ref> [9] </ref> and identifies a deltoid region ffi containing p. By then following parent pointers up in a tertiary chain tree from any edge in ffi we can identify the node in T that is associated with a geodesic triangle having ffi as its deltoid region. <p> We may assume, without loss of generality, that p and q belong to the same region in S, since we can test if this is not the case in O (log 2 n) time by point location <ref> [9] </ref>. So, suppose we are given two query points p and q in a region P of S, and we wish to perform a shortest path query for the pair (p; q).
Reference: [10] <author> M. T. Goodrich, M. Ghouse, and J. </author> <title> Bright. Generalized sweep methods for parallel computational geometry. </title> <booktitle> In Proc. 2nd ACM Sympos. Parallel Algorithms Architect., </booktitle> <pages> pages 280-289, </pages> <year> 1990. </year>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries [1, 3, 4, 11, 12, 19], even in parallel <ref> [10, 15] </ref>. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [11] <author> L. J. Guibas and J. Hershberger. </author> <title> Optimal shortest path queries in a simple polygon. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39 </volume> <pages> 126-152, </pages> <year> 1989. </year> <month> 20 </month>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries <ref> [1, 3, 4, 11, 12, 19] </ref>, even in parallel [10, 15]. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space. <p> In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger <ref> [11, 14] </ref> support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [12] <author> L. J. Guibas, J. Hershberger, D. Leven, M. Sharir, and R. E. Tarjan. </author> <title> Linear-time algorithms for visibility and shortest path problems inside triangulated simple polygons. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 209-233, </pages> <year> 1987. </year>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries <ref> [1, 3, 4, 11, 12, 19] </ref>, even in parallel [10, 15]. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [13] <author> L. J. Guibas and R. Sedgewick. </author> <title> A dichromatic framework for balanced trees. </title> <booktitle> In Proc. 19th Annu. IEEE Sympos. Found. Comput. Sci., Lecture Notes in Computer Science, </booktitle> <pages> pages 8-21, </pages> <year> 1978. </year>
Reference-contexts: Our approach is to maintain a geodesic triangulation of polygon P so that its dual tree T is a balanced binary tree|in particular, a red-black tree <ref> [7, 13, 20, 25] </ref>. <p> that the root of a red-black tree T actually has a parent, which is a degree-one "dummy node." In addition, we desire that our tree-modification operations be based strictly on the use of tree rotations, and not use the more general pointer changing as is used in the standard implementations <ref> [7, 13, 20, 25] </ref>. Fortunately, such implementations are easy to come by, as we show next. 6 3.2 Non-destructive tree updates In this subsection we describe how to perform all red-black tree update operations using rotations only. We begin with the splice operation. <p> We associate with this "dummy parent" node a pointer to the record in the doubly-connected edge list structure repsenting P in S. The main idea of our primary structure, then, is to maintain this rooted tree T as a red-black tree <ref> [7, 13, 20, 25] </ref>, ignoring the (dummy) leaf node associated with . 9 4.2 The secondary point location structure As a secondary data structure we maintain a dynamic point location data structure on the deltoid regions determined by the geodesic triangulations of all the faces in S. <p> In particular, for each deltoid region ffi, we maintain each of the three concave chains for ffi in a balanced tree structure (e.g., a red-black tree <ref> [7, 13, 20, 25] </ref>). Each internal node in such a tree corresponds to a subchain of a concave chain and stores the length of the associated subchain.
Reference: [14] <author> J. Hershberger. </author> <title> A new data structure for shortest path queries in a simple polygon. </title> <journal> Inform. Process. Lett., </journal> <volume> 38 </volume> <pages> 231-235, </pages> <year> 1991. </year>
Reference-contexts: In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger <ref> [11, 14] </ref> support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [15] <author> J. Hershberger. </author> <title> Optimal parallel algorithms for triangulated simple polygons. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 33-42, </pages> <year> 1992. </year>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries [1, 3, 4, 11, 12, 19], even in parallel <ref> [10, 15] </ref>. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [16] <author> J. Hershberger and S. Suri. </author> <title> A pedestrian approach to ray shooting: Shoot a ray, take a walk. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 54-63, </pages> <year> 1993. </year>
Reference-contexts: They also show how to apply some more-sophisticated data structuring techniques to achieve an O (log n) query time using only a constant factor more space. Hershberger and Suri <ref> [16] </ref> further show how to achieve an O (log n) query time using nothing more than this walk-through strategy in an O (n)-sized triangulation of the interior P , although they may possibly introduce triangulation vertices (called Steiner points) that are not vertices of P (and this is necessary in some <p> Since we implement each rotation in O (log n) time, this results in worst-case running times of O (log 2 n) for queries and updates. Hershberger and Suri <ref> [16] </ref> have recently showed that one can triangulate the interior of a simple polygon using additional interior points so that any ray intersects O (log n) triangles.
Reference: [17] <author> J. D. Lawrence. </author> <title> A Catalog of Special Plane Curves. </title> <publisher> Dover Publications, </publisher> <address> New York, NY, </address> <year> 1972. </year>
Reference-contexts: We refer to the inner polygonal region as the deltoid region of t , due to its resemblance to the well-known quartic curve <ref> [17] </ref>, and we refer to the three chains emanating out from the deltoid region as tails. (These definitions differ somewhat from those of Chazelle et al. [2], for their "geodesic triangle" is what we are calling a "deltoid region," and our "geodesic triangle" is something they refer to as a "kite.")
Reference: [18] <author> D. T. Lee and F. P. Preparata. </author> <title> Location of a point in a planar subdivision and its applications. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: By Observation 2.1, this amounts to a simple application of a space-saving technique pioneered by Lee and Preparata <ref> [18] </ref>, where one stores shared edges at the highest node in a tree where they appear. This remains an O (n)-sized data structure, as can be established by a simple modification of the proof of Lemma 4.2.
Reference: [19] <author> D. T. Lee and F. P. Preparata. </author> <title> Euclidean shortest paths in the presence of rectilinear barriers. </title> <journal> Networks, </journal> <volume> 14 </volume> <pages> 393-410, </pages> <year> 1984. </year>
Reference-contexts: From now on, we denote with n the current size of S. 1 1.1 Previous work In the static setting, there are several optimal techniques for efficiently performing shortest-path and ray-shooting queries <ref> [1, 3, 4, 11, 12, 19] </ref>, even in parallel [10, 15]. In particular, the data structures of Chazelle and Guibas [3] and of Guibas and Hershberger [11, 14] support respectively ray-shooting and shortest path queries in simple polygons in O (log n) time using O (n) space.
Reference: [20] <author> K. Mehlhorn. </author> <title> Sorting and Searching, volume 1 of Data Structures and Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: Our approach is to maintain a geodesic triangulation of polygon P so that its dual tree T is a balanced binary tree|in particular, a red-black tree <ref> [7, 13, 20, 25] </ref>. <p> that the root of a red-black tree T actually has a parent, which is a degree-one "dummy node." In addition, we desire that our tree-modification operations be based strictly on the use of tree rotations, and not use the more general pointer changing as is used in the standard implementations <ref> [7, 13, 20, 25] </ref>. Fortunately, such implementations are easy to come by, as we show next. 6 3.2 Non-destructive tree updates In this subsection we describe how to perform all red-black tree update operations using rotations only. We begin with the splice operation. <p> We associate with this "dummy parent" node a pointer to the record in the doubly-connected edge list structure repsenting P in S. The main idea of our primary structure, then, is to maintain this rooted tree T as a red-black tree <ref> [7, 13, 20, 25] </ref>, ignoring the (dummy) leaf node associated with . 9 4.2 The secondary point location structure As a secondary data structure we maintain a dynamic point location data structure on the deltoid regions determined by the geodesic triangulations of all the faces in S. <p> In particular, for each deltoid region ffi, we maintain each of the three concave chains for ffi in a balanced tree structure (e.g., a red-black tree <ref> [7, 13, 20, 25] </ref>). Each internal node in such a tree corresponds to a subchain of a concave chain and stores the length of the associated subchain.
Reference: [21] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: Suppose further that S is a connected planar subdivision, i.e., when joined at overlapping endpoints, the segments of L form a connected planar graph, which would occur, for example, if S were a Voronoi diagram or Delaunay triangulation (e.g., see <ref> [8, 21, 22] </ref>). Note that S has at least one unbounded region, and, without loss of generality we can assume that there is just one such external region, for otherwise we can "clip" all the unbounded regions by a large-enough bounding box.
Reference: [22] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Suppose further that S is a connected planar subdivision, i.e., when joined at overlapping endpoints, the segments of L form a connected planar graph, which would occur, for example, if S were a Voronoi diagram or Delaunay triangulation (e.g., see <ref> [8, 21, 22] </ref>). Note that S has at least one unbounded region, and, without loss of generality we can assume that there is just one such external region, for otherwise we can "clip" all the unbounded regions by a large-enough bounding box. <p> Indeed, we can view S as being the union of a set of simple polygons. We assume a standard representation for the subdivision S, such as doubly-connected edge lists <ref> [22] </ref>, with this double-sided view. <p> We are now ready to describe our data structure. 4 The Ray-Shooting Data Structure Let S be a connected subdivision, represented using some dynamically-updatable representation of an embedded planar graph. This can be done, for example, by a simple modification of the doubly-connected edge lists structure <ref> [22] </ref>, where we store the edges of each face f in a red-black tree B (f ) ordered around f . <p> With this representation, it is possible to find the two tangents from a point to a convex chain and the four common tangents between two convex chains in logarithmic time <ref> [22] </ref>. We store a double-link between the root of each tertiary tree t and the node in T associated with the geodesic triangle with deltoid region ffi that has the edges of t as one of its concave chains. <p> This can easily be done in O (log n) time using a well-known 13 rotation in the dual tree: (a) before the swap; (b) after the swap. binary search approach (e.g., see Preparata and Shamos <ref> [22] </ref>). If these deltoid regions do not share an edge, then the diagonal swap simply involves identifying the deltoid regions with their new geodesic triangles.
Reference: [23] <author> J. H. Reif and S. Sen. </author> <title> An efficient output-sensitive hidden-surface removal algorithm and its parallelization. </title> <booktitle> In Proc. 4th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 193-200, </pages> <year> 1988. </year>
Reference-contexts: In addition to being useful in computer graphics applications (e.g., see <ref> [23] </ref>), ray-shooting queries are in some sense generalizations of point-location queries, for point locations can easily be implemented using ray-shooting queries. <p> We also mention that the hidden-surface removal algorithms by Reif and Sen <ref> [23] </ref> is based on a polylog-time dynamic ray-shooting technique for monotone subdivisions. 1.2 Our results In this paper we present a dynamic data structure for connected subdivisions that supports ray-shooting and shortest-path queries. The repertory of update operations includes insertion and deletion of vertices and edges.
Reference: [24] <author> D. D. Sleator, R. E. Tarjan, and W. P. Thurston. </author> <title> Rotation distance, triangulations, and hyperbolic geometry. </title> <journal> J. Amer. Math. Soc., </journal> <volume> 1 </volume> <pages> 647-682, </pages> <year> 1988. </year>
Reference-contexts: Our approach is to maintain a geodesic triangulation of polygon P so that its dual tree T is a balanced binary tree|in particular, a red-black tree [7, 13, 20, 25]. Sleator, Tarjan, and Thurston <ref> [24] </ref> observe that, given a triangulation of a convex polygon P , then any two adjacent triangles 4uvw and 4wzu in this triangulation can be replaced by the triangles 4vwz and 4zuv, and such a "diagonal swap" corresponds to a rotation in the tree dual to this triangulation.
Reference: [25] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms, </title> <booktitle> volume 44 of CBMS-NSF Regional Conference Series in Applied Mathematics. Society for Industrial Applied Mathematics, </booktitle> <year> 1983. </year> <month> 21 </month>
Reference-contexts: Our approach is to maintain a geodesic triangulation of polygon P so that its dual tree T is a balanced binary tree|in particular, a red-black tree <ref> [7, 13, 20, 25] </ref>. <p> We use the formulation of Tarjan <ref> [25] </ref>. For any node v in a rooted tree T , let p (v) denote the parent of v in T . Likewise, for any tree T , let r (T ) denote the root node of T . <p> A splice (T 1 ; v; T 2 ) operation is the inverse of a split operation. Tarjan <ref> [25] </ref> shows that red-black trees support the split and splice operations in O (rot (n) log n) time, where rot (n) denotes the time complexity of performing a rotation in T . <p> that the root of a red-black tree T actually has a parent, which is a degree-one "dummy node." In addition, we desire that our tree-modification operations be based strictly on the use of tree rotations, and not use the more general pointer changing as is used in the standard implementations <ref> [7, 13, 20, 25] </ref>. Fortunately, such implementations are easy to come by, as we show next. 6 3.2 Non-destructive tree updates In this subsection we describe how to perform all red-black tree update operations using rotations only. We begin with the splice operation. <p> Fortunately, such implementations are easy to come by, as we show next. 6 3.2 Non-destructive tree updates In this subsection we describe how to perform all red-black tree update operations using rotations only. We begin with the splice operation. Tarjan's method <ref> [25] </ref> for performing a splice of trees T 1 and T 2 depends upon the relative ranks of T 1 and T 2 . <p> We then complete the procedure as in Tarjan's implementation <ref> [25] </ref>. Clearly, the total time needed is O (rot (n)(jrank (T 1 ) rank (T 2 )j + 1)) = O (rot (n) log n). <p> This allows us to replace each splice in Tarjan's implementation <ref> [25] </ref> of split with a non-destructive splice. The analysis for our implementation of this operation follows by a simple adaptation of Tarjan's analysis. <p> We associate with this "dummy parent" node a pointer to the record in the doubly-connected edge list structure repsenting P in S. The main idea of our primary structure, then, is to maintain this rooted tree T as a red-black tree <ref> [7, 13, 20, 25] </ref>, ignoring the (dummy) leaf node associated with . 9 4.2 The secondary point location structure As a secondary data structure we maintain a dynamic point location data structure on the deltoid regions determined by the geodesic triangulations of all the faces in S. <p> In particular, for each deltoid region ffi, we maintain each of the three concave chains for ffi in a balanced tree structure (e.g., a red-black tree <ref> [7, 13, 20, 25] </ref>). Each internal node in such a tree corresponds to a subchain of a concave chain and stores the length of the associated subchain.
References-found: 25

