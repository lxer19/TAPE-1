URL: http://www.daimi.aau.dk/~thore/Papers/dtc-esa.ps.gz
Refering-URL: http://www.daimi.aau.dk/~thore/Papers/dtc.html
Root-URL: http://www.daimi.aau.dk
Title: Fully Dynamic Transitive Closure in Plane Dags with One Source and One Sink  
Author: Thore Husfeldt 
Address: Ny Munkegade, DK-8000 Arhus C, Denmark  
Affiliation: BRICS, Department of Computer Science, University of Aarhus,  
Abstract: We give an algorithm for the Dynamic Transitive Closure Problem for planar directed acyclic graphs with one source and one sink. The graph can be updated in logarithmic time under arbitrary edge insertions and deletions that preserve the embedding. Queries of the form `is there a directed path from u to v?' for arbitrary vertices u and v can be answered in logarithmic time. The size of the data structure and the initialisation time are linear in the number of edges. We also give a lower bound of (log n= log log n) on the amortised complexity of the problem in the cell probe model with logarithmic word size. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Giuseppe Di Battista and Roberto Tamassia. </author> <title> Algorithms for plane representations of acyclic digraphs. </title> <journal> Theoretical Computer Science, </journal> <volume> 61 </volume> <pages> 175-198, </pages> <year> 1988. </year>
Reference-contexts: For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14]. Other dynamic problems on planar st-graphs are studied in <ref> [1] </ref> and [19].
Reference: 2. <author> Paul Beame and Faith Fich, </author> <year> 1994. </year> <type> Personal communication, </type> <note> reported by Peter Bro Miltersen. </note>
Reference-contexts: For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from <ref> [2, 13, 23] </ref>, see also [14]. Other dynamic problems on planar st-graphs are studied in [1] and [19].
Reference: 3. <author> Hans L. Bodlaender. </author> <title> Dynamic algorithms for graphs with treewidth 2. </title> <booktitle> In 19th International Workshop on Graph Theoretic Concepts in Computer Science (WG), volume 790 of Lecture Notes in Computer Science, </booktitle> <pages> pages 112-124. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Italiano et al. [11] present a dynamic reachability algorithm for series-parallel digraphs. Papers by Bodlaender <ref> [3] </ref> and Cohen et al. [4] extend this to graphs of tree-width two and three, respectively. Apart from these and the class studied in the present paper, no other class of digraphs is known to the author that allows fully dynamic reachability algorithms within polylogarithmic time bounds. <p> It is easy to see that the (log n= log log n) lower bound applies to the problems studied in <ref> [3, 4, 11, 18] </ref>. For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14].
Reference: 4. <author> Robert F. Cohen, S. Sairam, Roberto Tamassia, and Jeffrey S. Vitter. </author> <title> Dynamic algorithms for optimization problems in bounded tree-width graphs. </title> <booktitle> In Proceedings of the 3rd Conference on Integer Programming and Combinatorial Optimization, </booktitle> <year> 1993. </year>
Reference-contexts: Italiano et al. [11] present a dynamic reachability algorithm for series-parallel digraphs. Papers by Bodlaender [3] and Cohen et al. <ref> [4] </ref> extend this to graphs of tree-width two and three, respectively. Apart from these and the class studied in the present paper, no other class of digraphs is known to the author that allows fully dynamic reachability algorithms within polylogarithmic time bounds. <p> It is easy to see that the (log n= log log n) lower bound applies to the problems studied in <ref> [3, 4, 11, 18] </ref>. For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14].
Reference: 5. <author> D. Eppstein, Z. Galil, G. F. Italiano, and A. Nissenzweig. </author> <title> Sparsification|A technique for speeding up dynamic graph algorithms. </title> <booktitle> In Proc. 33rd FOCS, </booktitle> <pages> pages 60-69, </pages> <year> 1992. </year>
Reference-contexts: The task is to answer connectivity queries in a graph while e.g. edges are inserted and deleted. Much work has gone into these problems, and for undirected graphs, these endeavours have led to impressive results: The sparsification technique by Eppstein et al. <ref> [5] </ref> yields an algorithm that runs in time O (jV j 1=2 ). Recently, Henzinger and King [10] showed that with randomisation, the problem ? A full version of this paper, including all proofs, can be found as RS-94-31 on the BRICS World Wide Web server at URL http://www.daimi.aau.dk/BRICS/.
Reference: 6. <author> David Eppstein, Zvi Galil, Giuseppe F. Italiano, and Thomas H. Spencer. </author> <title> Sepera-tor based sparsification for dynamic planar graph algorithms. </title> <booktitle> In Proc. 25th STOC, </booktitle> <pages> pages 208-217, </pages> <year> 1993. </year>
Reference-contexts: For planar, undi--rected graphs we know deterministic algorithms that run in logarithmic time per operation in the worst case [7, 9], see also <ref> [6] </ref>. In contrast, the same problem on directed graphs|where we will use reach-ability or transitive closure for connectivity|is notoriously hard.
Reference: 7. <author> David Eppstein, Giuseppe Italiano, Roberto Tamassia, Robert E. Tarjan, Jeffery Westbrook, and Moti Yung. </author> <title> Maintenance of a minimum spanning forest in a dyamic planar graph. </title> <journal> Journal of Algorithms, </journal> <volume> 13 </volume> <pages> 33-54, </pages> <year> 1992. </year>
Reference-contexts: For planar, undi--rected graphs we know deterministic algorithms that run in logarithmic time per operation in the worst case <ref> [7, 9] </ref>, see also [6]. In contrast, the same problem on directed graphs|where we will use reach-ability or transitive closure for connectivity|is notoriously hard.
Reference: 8. <author> Michael L. Fredman and Michael E. Saks. </author> <title> The cell probe complexity of dynamic data structures. </title> <booktitle> In Proc. 21st STOC, </booktitle> <pages> pages 345-354, </pages> <year> 1989. </year>
Reference-contexts: Lower bound. Our update operations are sufficiently versatile to admit a lower bound proof for the problem in the cell probe model with logarithmic word size. The proof is a reduction to the Parity Prefix Problem of <ref> [8] </ref> in the same fashion as [12] and [16]. Theorem 2.
Reference: 9. <author> Harold N. Gabow and Matthias Stallman. </author> <title> Efficient algorithms for graphic matroid intersection and parity. </title> <booktitle> In Proc. 12th ICALP, volume 194 of Lecture Notes in Computer Science, </booktitle> <pages> pages 210-220. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: For planar, undi--rected graphs we know deterministic algorithms that run in logarithmic time per operation in the worst case <ref> [7, 9] </ref>, see also [6]. In contrast, the same problem on directed graphs|where we will use reach-ability or transitive closure for connectivity|is notoriously hard.
Reference: 10. <author> Monika Rauch Henzinger and Valerie King. </author> <title> Randomized dynamic graph algorithms with polylogarithmic time per operation. </title> <booktitle> In 27th STOC, </booktitle> <pages> pages 519-527. </pages> <publisher> ACM, </publisher> <year> 1995. </year>
Reference-contexts: Much work has gone into these problems, and for undirected graphs, these endeavours have led to impressive results: The sparsification technique by Eppstein et al. [5] yields an algorithm that runs in time O (jV j 1=2 ). Recently, Henzinger and King <ref> [10] </ref> showed that with randomisation, the problem ? A full version of this paper, including all proofs, can be found as RS-94-31 on the BRICS World Wide Web server at URL http://www.daimi.aau.dk/BRICS/.
Reference: 11. <author> Giuseppe F. Italiano, Alberto Marchetti Spaccamela, and Umberto Nanni. </author> <title> Dynamic data structures for series parallel digraphs. </title> <booktitle> In Proc. First Workshop on Algorithms and Data Structures (WADS), volume 382 of Lecture Notes in Computer Science, </booktitle> <pages> pages 352-373. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Italiano et al. <ref> [11] </ref> present a dynamic reachability algorithm for series-parallel digraphs. Papers by Bodlaender [3] and Cohen et al. [4] extend this to graphs of tree-width two and three, respectively. <p> It is easy to see that the (log n= log log n) lower bound applies to the problems studied in <ref> [3, 4, 11, 18] </ref>. For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14].
Reference: 12. <author> P. B. Miltersen, S. Subramanian, J. S. Vitter, and R. Tamassia. </author> <title> Complexity models for incremental computation. </title> <journal> Theoretical Computer Science, </journal> <volume> 130 </volume> <pages> 203-236, </pages> <year> 1994. </year>
Reference-contexts: Lower bound. Our update operations are sufficiently versatile to admit a lower bound proof for the problem in the cell probe model with logarithmic word size. The proof is a reduction to the Parity Prefix Problem of [8] in the same fashion as <ref> [12] </ref> and [16]. Theorem 2.
Reference: 13. <author> Peter Bro Miltersen. </author> <title> Lower bounds for union-split-find related problems on random access machines. </title> <booktitle> In Proc. 26th STOC, </booktitle> <pages> pages 625-634. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from <ref> [2, 13, 23] </ref>, see also [14]. Other dynamic problems on planar st-graphs are studied in [1] and [19].
Reference: 14. <author> Peter Bro Miltersen, Noam Nisan, Shmuel Safra, and Avi Wigderson. </author> <title> On data structures and asymmetric communication complexity. </title> <booktitle> In Proc. 27th STOC, </booktitle> <pages> pages 103-111. </pages> <publisher> ACM, </publisher> <year> 1995. </year>
Reference-contexts: For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also <ref> [14] </ref>. Other dynamic problems on planar st-graphs are studied in [1] and [19].
Reference: 15. <author> Mark H. Overmars. </author> <title> The design of dynamic data structures, </title> <booktitle> volume 156 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1983. </year>
Reference-contexts: An edge deletion in the algorithm for worst-case time bounds. A remaining minor problem is that this results in more and more meridian cycles as we go, so we use global rebuilding <ref> [15] </ref> to construct an unpolluted data structure in the background. Theorem 10. The Dynamic Transitive Closure Problem on spherical st-graphs can be solved in time O (log n).
Reference: 16. <author> Monika Rauch. </author> <title> Improved data structures for fully dynamic biconnectivity. </title> <booktitle> In 26th STOC, </booktitle> <pages> pages 686-695. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: Lower bound. Our update operations are sufficiently versatile to admit a lower bound proof for the problem in the cell probe model with logarithmic word size. The proof is a reduction to the Parity Prefix Problem of [8] in the same fashion as [12] and <ref> [16] </ref>. Theorem 2.
Reference: 17. <author> Daniel D. Sleator and Robert Endre Tarjan. </author> <title> A data structure for dynamic trees. </title> <journal> Journal of Computer and Systems Sciences, </journal> <volume> 26 </volume> <pages> 362-391, </pages> <year> 1983. </year>
Reference-contexts: The algorithm is pleasantly simple and should be easy to implement efficiently. (The most complicated part is the dynamic tree data structure from <ref> [17] </ref>, where implementation issues are discussed.) 1.3 Outline This extended abstract is organised as follows: Below, we give some preliminary definitions and state the problem precisely. We also mention a lower bound for the problem. <p> We can used balanced search trees for this. 2. The trees S and T using the dynamic tree data structure of Sleator and Tarjan <ref> [17] </ref>. Updates. After each insertion or deletion we must reorganise our data structures. An edge can be inserted into or deleted from the edge list around a vertex in time O (log n); maintaining the two dynamic trees is a standard technique. Queries. <p> An edge can be inserted into or deleted from the edge list around a vertex in time O (log n); maintaining the two dynamic trees is a standard technique. Queries. Evert u and v in S to find their nearest common ancestor s 0 , see <ref> [17] </ref>. Evert u and v in T to find their nearest common ancestor t 0 . From the edge lists around s 0 and t 0 we see which of p u and p v appears rightmost. By Table 1, this yields the reachability information. <p> Symmetrically, we store OE l (; e), which can be derived analogously. Using (4.1) above, we can now in time O (log jEj) calculate the value of OE r (; p) and OE l (; p) for every dynamic path p of S or T ; see <ref> [17] </ref> for the details and terminology. 3. With every face, we keep a topologically ordered sequence of the edges on the two paths that bound the face. Queries.
Reference: 18. <author> Sairam Subramanian. </author> <title> A fully dynamic data structure for reachability in planar digraphs. </title> <booktitle> In Proc. 1st Ann. European Symp. on Algorithms (ESA), volume 726 of Lecture Notes in Computer Science, </booktitle> <pages> pages 372-383. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: It is easy to see that the (log n= log log n) lower bound applies to the problems studied in <ref> [3, 4, 11, 18] </ref>. For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14].
Reference: 19. <author> Roberto Tamassia. </author> <title> A dynamic data structure for planar graph embedding. </title> <booktitle> In Proc. 15th ICALP, volume 317 of Lecture Notes in Computer Science, </booktitle> <pages> pages 576-590. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: A spherical st-graph is a planar st-graph that is embedded in the plane. If in that embedding the source and the sink are on the same face, the graph is a plane st-graph. We require st-graphs to be acyclic, which agrees with [21] and disagrees with <ref> [19] </ref>. Figure 1 shows two spherical st-graphs, the left of which is also a plane st-graph. The following properties of spherical st-graphs can be shown; the last two items explain why we used spherical and plane the above definition. 1. <p> Alternatively, we could allow all insertion and deletion operations and let the data structure decide which updates violate the restrictions. To this end, we could use the planarity testing data structure of Tamassia <ref> [19] </ref> to decide if u and v are on the same face. The acyclicity condition is of course easily checked using our own data structure: edge (u; v) induces a cycle if and only if there is a path from v to u. <p> For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14]. Other dynamic problems on planar st-graphs are studied in [1] and <ref> [19] </ref>.
Reference: 20. <author> Roberto Tamassia and Franco P. Preparata. </author> <title> Dynamic maintenance of planar digraphs, with applications. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 509-527, </pages> <year> 1990. </year>
Reference-contexts: We also mention a lower bound for the problem. In Sect. 3, we derive a characterisation of the transitive closure in st-graphs and re-prove the result of <ref> [20] </ref> on a restricted version of the problem. Section 4 gives an algorithm for the general case that performs well in the amortised sense. We sketch how to remove the amortisation in Sect. 4.3 to get worst-case bounds. All proofs have been omitted due to lack of space. <p> Theorem 2. The Dynamic Transitive Closure Problem on spherical st-graphs requires amortised time (log n= log log n) in the cell probe model with logarithmic word size. 2.3 Related Work Restricted versions of the present problem have been studied by Tamassia and Preparata <ref> [20] </ref>, who consider the case where the source and the sink remain on the same face, and Tamassia and Tollis [21], who allow the source and the sink to be on different faces but modify the repertory of update operations. <p> It is easy to see that the (log n= log log n) lower bound applies to the problems studied in [3, 4, 11, 18]. For the problems in <ref> [20, 21] </ref>, no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14]. Other dynamic problems on planar st-graphs are studied in [1] and [19]. <p> For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14]. Other dynamic problems on planar st-graphs are studied in [1] and [19]. Reference <ref> [20] </ref> contains pointers to a vast number of applications of these graphs within visibility representations, graph drawing and embedding, motion planning, computational geometry, lattice theory, and VLSI design. 3 Properties of Planar Source-Sink Graphs 3.1 A Reachability Characterisation We employ an idea used in many polylog-time dynamic graph algorithms: decompose the <p> From the edge lists around s 0 and t 0 we see which of p u and p v appears rightmost. By Table 1, this yields the reachability information. In summary, we have re-proved the following theorem due to Tamassia and Preparata <ref> [20] </ref>, using a different characterisation. Theorem 5. The Dynamic Transitive Closure Problem for plane st-graphs can be solved in time O (log n), where n denotes the number of edges.
Reference: 21. <author> Roberto Tamassia and Ioannis G. Tollis. </author> <title> Dynamic reachability in planar digraphs with one source and one sink. </title> <journal> Theoretical Computer Science, </journal> <volume> 119 </volume> <pages> 331-343, </pages> <year> 1993. </year>
Reference-contexts: A spherical st-graph is a planar st-graph that is embedded in the plane. If in that embedding the source and the sink are on the same face, the graph is a plane st-graph. We require st-graphs to be acyclic, which agrees with <ref> [21] </ref> and disagrees with [19]. Figure 1 shows two spherical st-graphs, the left of which is also a plane st-graph. The following properties of spherical st-graphs can be shown; the last two items explain why we used spherical and plane the above definition. 1. <p> (log n= log log n) in the cell probe model with logarithmic word size. 2.3 Related Work Restricted versions of the present problem have been studied by Tamassia and Preparata [20], who consider the case where the source and the sink remain on the same face, and Tamassia and Tollis <ref> [21] </ref>, who allow the source and the sink to be on different faces but modify the repertory of update operations. Italiano et al. [11] present a dynamic reachability algorithm for series-parallel digraphs. <p> It is easy to see that the (log n= log log n) lower bound applies to the problems studied in [3, 4, 11, 18]. For the problems in <ref> [20, 21] </ref>, no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from [2, 13, 23], see also [14]. Other dynamic problems on planar st-graphs are studied in [1] and [19].
Reference: 22. <author> J. van Leeuwen. </author> <title> Graph algorithms. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Algorithms and complexity, volume A of Handbook of theoretical computer science, chapter 10, </booktitle> <pages> pages 525-631. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: A graph is planar if it is embeddable in the plane. Using the stereographic projection, it is easily shown that a graph is planar if and only if it is embeddable on the sphere. For a more thorough coverage of planar graphs, see any text on graph algorithms, e.g. <ref> [22] </ref>. For vertex v of a digraph we let deg + (v) and deg (v) denote its out- and indegree, respectively. A vertex v is a source if deg (v) = 0, and a sink if deg + (v) = 0.
Reference: 23. <author> B. Xiao. </author> <title> New bounds in cell probe model. </title> <type> Doctoral dissertation, </type> <institution> University of California, </institution> <address> San Diego, </address> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: For the problems in [20, 21], no better bound than (log log n= log log log n) is known to the author; this bound can be proved using techniques from <ref> [2, 13, 23] </ref>, see also [14]. Other dynamic problems on planar st-graphs are studied in [1] and [19].
References-found: 23

