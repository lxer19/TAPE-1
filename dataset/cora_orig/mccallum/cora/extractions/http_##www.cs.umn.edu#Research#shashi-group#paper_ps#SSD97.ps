URL: http://www.cs.umn.edu/Research/shashi-group/paper_ps/SSD97.ps
Refering-URL: http://www.cs.umn.edu/Research/shashi-group/paper_list.html
Root-URL: http://www.cs.umn.edu
Email: [shekharjfettererjbrajesh]@cs.umn.edu  
Title: Materialization Trade-Offs in Hierarchical Shortest Path Algorithms  
Author: Shashi Shekhar, Andrew Fetterer, and Brajesh Goyal 
Web: http://www.cs.umn.edu/research/shashi-group/  
Affiliation: University of Minnesota Department of Computer Science  
Abstract: Materialization and hierarchical routing algorithms are becoming important tools in querying databases for the shortest paths in time-critical applications like Intelligent Transportation Systems (ITS), due to the growing size of their spatial graph databases [16]. A hierarchical routing algorithm decomposes the original graph into a set of fragment graphs and a boundary graph which summarizes the fragment graphs. A fully materialized hierarchical routing algorithm pre-computes and stores the shortest-path view and the shortest-path-cost view for the graph fragments as well as for the boundary graph [9]. The storage cost of the fully materialized approach can be reduced by a virtual or a hybrid materialization approach, where few or none of the relevant views are pre-computed. This paper explores the effect of materializing individual views for the storage overhead and computation time of hierarchical routing algorithms. Our experiments with the Twin Cities metropolitan road-map show that materializing the shortest-path-cost view for the boundary graph provides the best savings in computation time, for a given amount of storage and a small number of fragments. Materializing the relevant part of the shortest-path-cost view for the fragment graphs provides the next best savings, followed by materializing the shortest-path view for the boundary graph. Virtual shortest-path-view on fragments can reduce storage costs by an order of magnitude or more for large graphs 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Agrawal. </author> <title> "Alpha: An Extension of Relational Algebra to Express a Class of Recursive Queries". </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14(7), </volume> <year> 1988. </year>
Reference-contexts: Traditional research in database query languages <ref> [1] </ref> , transitive closure [6] and recursive query processing [13] has approached single-pair path-computation as a special case of more general problems. For example, partial-transitive-closure computation [8] and transitive-closures [7] have been used for single-pair path computations.
Reference: 2. <author> W.C. Collier and R.J. Weiland. </author> <title> "Smart Cars, Smart Highways". </title> <journal> IEEE Spectrum, </journal> <pages> pages 27-33, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: The shortest-path-cost query computes the aggregate cost (e.g. distance) of the shortest-path. Materialization and hierarchical algorithms are becoming important in processing shortest-path queries in time-critical applications such as Intelligent Transportation Systems <ref> [2] </ref>. Hierarchical algorithms decompose a large spatial graph into a boundary graph and a collection of fragment graphs, each of which is smaller than the original graph.
Reference: 3. <author> Greg Frederickson. </author> <title> "Searching Among Intervals and Compact Routing Tables". </title> <journal> Algorithmica, </journal> <pages> pages 448-466, </pages> <year> 1996. </year>
Reference-contexts: Query-language-based implementations were found to be inefficient. Hierarchical path-finding has been explored in the context of computer networks in [11] and in the context of planar graphs in <ref> [3] </ref>. In ATIS, a hierarchical routing algorithm called HEPV [9] that guarantees optimal solutions has been investigated. That hierarchical routing algorithm divides the base graph into a boundary graph and a set of fragment graphs.
Reference: 4. <author> Hector Garcia-Molina and Kenneth Salem. </author> <title> Main Memory Database Systems: An Overview. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 4(6) </volume> <pages> 509-516, </pages> <year> 1992. </year>
Reference-contexts: Due to the dynamic nature of the ITS database and the frequency and nature of queries, it is necessary to explore alternatives to traditional disk-resident databases (DRDB). Main-memory databases (MMDB) <ref> [4] </ref> store most of their content permanently in main memory, resulting in high speed access to that data. Data stored in memory is hot if it is frequently accessed, while data kept on disk is cold if it is accessed less frequently.
Reference: 5. <author> R. H. Guting. GraphDB: </author> <title> Modeling and Querying Graphs in Databases. </title> <booktitle> In Proc. of Intl. Conference on Very Large Data Bases, </booktitle> <year> 1994. </year>
Reference-contexts: The sequence of boundary nodes in G:SP (s; d) is identical to that in 1 Rewrite <ref> [5] </ref> in this case drops all the interior nodes and edges in the path and keeps just the boundary nodes 2 More detailed discussion of the proofs for the theorems and lemmas may be found at http://www.cs.umn.edu/research/shashi-group/paper list.html 1 //BG = boundary graph 2 //CASE 1: Both Source s and Destination
Reference: 6. <author> Y. Ioannidis, R. Ramakrishnan, and L. Winger. </author> <title> "Transitive Closure Algorithms Based on Graph Traversal". </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 18(3), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: Traditional research in database query languages [1] , transitive closure <ref> [6] </ref> and recursive query processing [13] has approached single-pair path-computation as a special case of more general problems. For example, partial-transitive-closure computation [8] and transitive-closures [7] have been used for single-pair path computations.
Reference: 7. <author> H.V. Jagadish, R. Agrawal, and L. Ness. </author> <title> "A Study of Transitive Closure As a Recursion Mechanism". </title> <booktitle> In Proc. of SIGMOD Intl. Conference on Management of Data. ACM, </booktitle> <year> 1987. </year>
Reference-contexts: Traditional research in database query languages [1] , transitive closure [6] and recursive query processing [13] has approached single-pair path-computation as a special case of more general problems. For example, partial-transitive-closure computation [8] and transitive-closures <ref> [7] </ref> have been used for single-pair path computations. Previous evaluation of the transitive-closure algorithms examined the iterative, logarithmic, Warren's, Depth-first search (DFS), hybrid, and spanning-tree-based algorithms [14]. Previous evaluation of single-pair path-computation algorithms in a database environment examined the iterative breadth-first and best-first search algorithms [12].
Reference: 8. <author> B. Jiang. </author> <title> "I/O Efficiency of Shortest Path Algorithms: An Analysis". </title> <booktitle> In Proc. of the Intl. Conference on Data Engineering. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: Traditional research in database query languages [1] , transitive closure [6] and recursive query processing [13] has approached single-pair path-computation as a special case of more general problems. For example, partial-transitive-closure computation <ref> [8] </ref> and transitive-closures [7] have been used for single-pair path computations. Previous evaluation of the transitive-closure algorithms examined the iterative, logarithmic, Warren's, Depth-first search (DFS), hybrid, and spanning-tree-based algorithms [14]. Previous evaluation of single-pair path-computation algorithms in a database environment examined the iterative breadth-first and best-first search algorithms [12].
Reference: 9. <author> Ning Jing, Yun-Wu Huang, and Elke Rudensteiner. </author> <title> "Hierarchical Optimization of Optimal Path Finding for Transportation Applications". </title> <booktitle> In Proc. of ACM Conference on Information and Knowledge Management, </booktitle> <year> 1996. </year>
Reference-contexts: Other issues relate to the decomposition of graphs into fragments, to the choice of the number of levels in the hierarchy, and to view maintenance strategies <ref> [9] </ref>. 1.2 Related Work and Our Contributions The single-pair path-computation problem is a special case of single-source path computation and all-pair path computation. <p> Query-language-based implementations were found to be inefficient. Hierarchical path-finding has been explored in the context of computer networks in [11] and in the context of planar graphs in [3]. In ATIS, a hierarchical routing algorithm called HEPV <ref> [9] </ref> that guarantees optimal solutions has been investigated. That hierarchical routing algorithm divides the base graph into a boundary graph and a set of fragment graphs. It has materialized views for the shortest-path and shortest-path-cost for the fragments and the boundary graph. <p> The third definition of hybrid materialization is when we only materialize the tables necessary for the version of the hierarchical algorithm under consideration. Full materialization of all views for the hierarchical algorithm was researched in <ref> [9] </ref>. The hybrid materialization of the hierarchical algorithm (the focus of the remainder of the paper) will materialize a subset of the CV and CPV for the boundary graph and fragment graphs.
Reference: 10. <author> George Karypis and Vipin Kumar. </author> <title> "Analysis of Multilevel Graph Partitioning". </title> <note> Technical Report 95-037 see also http://www.cs.umn.edu/ karypis, </note> <institution> University of Minnesota, Department of Computer Science, </institution> <address> Minneapolis, MN 55455, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: For this study, we work with a hierarchical algorithm with a two level hierarchy. The issue of view maintenance in the face of updates, buffering in DRDB, etc. will be addressed in future work. Min-cut <ref> [10] </ref> partitioning is used to decompose the base graph into fragments. The shortest-path-cost view and the shortest-path view are clustered by the source-node. The design decisions made to resolve these issues are orthogonal to the issue of materialization and have been studied in the literature. <p> The second increase in IO comes from the increases length of the boundary path. Storage Costs: Storage costs were attained by creating the necessary views for the candidate hybrid materializations. The graph was fragmented using a min-cut <ref> [10] </ref> technique with values of F ranging from 10 to 400. Notations are summarized in Table 2. All candidates store the base and fragment graphs, whose storage requirements are similar to those of the base graph.
Reference: 11. <author> Leonard Kleinrock and Farouk Kamoun. </author> <title> "Hierarchical Routing for Large Networks". </title> <journal> Computer Networks, </journal> <volume> 1 </volume> <pages> 154-174, </pages> <year> 1977. </year>
Reference-contexts: Another study [15] examined A* and other estimator-based algorithms, along with the effect of path lengths and edge costs on the relative performance of search algorithms. Query-language-based implementations were found to be inefficient. Hierarchical path-finding has been explored in the context of computer networks in <ref> [11] </ref> and in the context of planar graphs in [3]. In ATIS, a hierarchical routing algorithm called HEPV [9] that guarantees optimal solutions has been investigated. That hierarchical routing algorithm divides the base graph into a boundary graph and a set of fragment graphs.
Reference: 12. <author> R. Kung, E. Hanson, and et. al. </author> <title> "Heuristic Search in Data Base Systems". </title> <booktitle> In Proc. Expert Database Systems. </booktitle> <publisher> Benjamin Cummings Publications, </publisher> <year> 1986. </year>
Reference-contexts: Previous evaluation of the transitive-closure algorithms examined the iterative, logarithmic, Warren's, Depth-first search (DFS), hybrid, and spanning-tree-based algorithms [14]. Previous evaluation of single-pair path-computation algorithms in a database environment examined the iterative breadth-first and best-first search algorithms <ref> [12] </ref>. Another study [15] examined A* and other estimator-based algorithms, along with the effect of path lengths and edge costs on the relative performance of search algorithms. Query-language-based implementations were found to be inefficient.
Reference: 13. <author> Y. Kusumi, S. Nishio, and T. Hasegawa. </author> <title> "File Access Level Optimization Using Page Access Graph on Recursive Query Evaluation". </title> <booktitle> In Proc. Conference on Extending Database Technology. </booktitle> <address> EDTB, </address> <year> 1988. </year>
Reference-contexts: Traditional research in database query languages [1] , transitive closure [6] and recursive query processing <ref> [13] </ref> has approached single-pair path-computation as a special case of more general problems. For example, partial-transitive-closure computation [8] and transitive-closures [7] have been used for single-pair path computations. Previous evaluation of the transitive-closure algorithms examined the iterative, logarithmic, Warren's, Depth-first search (DFS), hybrid, and spanning-tree-based algorithms [14].
Reference: 14. <author> H. Lu, K. Mikkilineni, and J.P. Richardson. </author> <title> "Design and Evaluation of Algo--rithms to Compute the Transitive Closure of a Database Relation". </title> <booktitle> In Proc. of Intl Conference on Data Engineering. IEEE, </booktitle> <year> 1987. </year>
Reference-contexts: For example, partial-transitive-closure computation [8] and transitive-closures [7] have been used for single-pair path computations. Previous evaluation of the transitive-closure algorithms examined the iterative, logarithmic, Warren's, Depth-first search (DFS), hybrid, and spanning-tree-based algorithms <ref> [14] </ref>. Previous evaluation of single-pair path-computation algorithms in a database environment examined the iterative breadth-first and best-first search algorithms [12]. Another study [15] examined A* and other estimator-based algorithms, along with the effect of path lengths and edge costs on the relative performance of search algorithms.
Reference: 15. <author> S. Shekhar, A. Kohli, and M. Coyle. </author> <title> Path Computation Algorithms for Advanced Traveler Information Systems. </title> <booktitle> In Proc. of the 9th Intl. Conference on Data Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: Previous evaluation of the transitive-closure algorithms examined the iterative, logarithmic, Warren's, Depth-first search (DFS), hybrid, and spanning-tree-based algorithms [14]. Previous evaluation of single-pair path-computation algorithms in a database environment examined the iterative breadth-first and best-first search algorithms [12]. Another study <ref> [15] </ref> examined A* and other estimator-based algorithms, along with the effect of path lengths and edge costs on the relative performance of search algorithms. Query-language-based implementations were found to be inefficient. <p> A grid-graph is often used in complexity analysis for transportation algorithms because of its regular structure and similarity to urban road-maps <ref> [15] </ref>. In a graph decomposed into F fragments, each fragment has approximately N=F nodes. The average number of boundary nodes for each fragment is K = 4 p N=F . The total number of boundary nodes is approximately B = N F . Table 1 shows the view storage requirements.
Reference: 16. <author> S. Shekhar and D. R. Liu. </author> <title> "A Connectivity-Clustered Access Method for Networks and Network Computation". </title> <booktitle> In Proc. Intl. Conf. on Data Engineering, </booktitle> <year> 1995. </year> <note> Complete version to appear in IEEE Transactions on Knowledge and Data Engineering. </note>
Reference-contexts: 1 Introduction Spatial graph databases <ref> [16] </ref> form the kernel of many important applications including transportation; water, electric, and gas utilities; telephone networks; urban management; sewer maintenance, and irrigation canal management. Shortest-path queries retrieve a sequence of nodes and edges forming an optimal (e.g. shortest distance or travel time) path between the given node-pair (source,destination).
Reference: 17. <author> Shashi Shekhar, Andrew Fetterer, and Brajesh Goyal. </author> <title> A Comparison of Hierarchical Algorithms for Shortest Path Computation in Advanced Travel Information Systems. </title> <type> Technical Report 96-046, </type> <institution> University of Minnesota, </institution> <year> 1996. </year>
Reference-contexts: Table 1 shows the view storage requirements. The storage formulas for the materialized views are shown first and are given in terms of N; B; K, and constants. F can be chosen to minimize the storage of the materialized views, as is studied in <ref> [17] </ref>. Setting F in terms of N , the asymptotic storage sizes for the views are computed.
Reference: 18. <author> Gang Zhou, Richard Hull, Roger King, and Jean-Claude Franhitti. </author> <title> "Data Integration and Warehousing Using H20". </title> <journal> Bulletin of the Technical Committee of Data Engineering, </journal> <volume> 18(2) </volume> <pages> 29-40, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: That work also explored performance issues such as the decomposition of graphs into fragments, the number of levels in the hierarchy, clustering of the materialized view to reduce IO, and view maintenance in the face of updates. Three types of view implementations are possible <ref> [18] </ref>. The fully materialized view stores all relevant information, i.e. all shortest paths, the cost of the shortest paths, or both are pre-computed. A virtual view relies on on-line computation and stores neither the shortest paths nor their cost.
References-found: 18

