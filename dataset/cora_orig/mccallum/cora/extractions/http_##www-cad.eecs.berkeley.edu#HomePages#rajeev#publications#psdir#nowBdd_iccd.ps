URL: http://www-cad.eecs.berkeley.edu/HomePages/rajeev/publications/psdir/nowBdd_iccd.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/rajeev/publications/publications.html
Root-URL: http://www.cs.berkeley.edu
Email: Email: frajeev,sanghavi,brayton,albertog@eecs.berkeley.edu  
Title: Binary Decision Diagrams on Network of Workstations  
Author: Rajeev K. Ranjan Jagesh V. Sanghavi Robert K. Brayton Alberto Sangiovanni-Vincentelli 
Address: Berkeley, CA 94720, USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: The success of all binary decision diagram (BDD) based synthesis and verification algorithms depend on the ability to efficiently manipulate very large BDDs. We present algorithms for manipulation of very large Binary Decision Diagrams (BDDs) on a network of workstations (NOW). A NOW provides a collection of main memories and disks which can be used effectively to create and manipulate very large BDDs. To make efficient use of memory resources of a NOW, while completing execution in a reasonable amount of wall clock time, extension of breadth-first technique is used to manipulate BDDs. BDDs are partitioned such that nodes for a set of consecutive variables are assigned to the same workstation. We present experimental results to demonstrate the capability of such an approach and point towards the potential impact for manipulating very large BDDs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. B. Akers. </author> <title> Binary Decision Diagrams. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-37:509-516, </volume> <month> June </month> <year> 1978. </year>
Reference-contexts: The efficiency of the logic function manipulations depends on the data structure used for representing boolean functions. The reduced ordered binary decision diagram (ROBDD) <ref> [1, 5] </ref> is a canonical, directed acyclic graph representation of boolean functions. ROBDD (henceforth referred to as BDD) representation is compact for many functions encountered in practice. The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing.
Reference: [2] <author> T. E. Anderson, D. E. Culler, and D. A. Patterson. </author> <title> A Case for NOW: Network of Workstations. </title> <type> Technical Report UCB/ERL M94/58, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Over the next few years, the networks are expected to become faster <ref> [2] </ref> in terms of the latency, the software overhead, and the bandwidth. However, the ratio of time to access the remote memory which involves a network transaction vs. the time to access the main memory is still expected to be the order of 1000. <p> Hence, the performance of our approach is significantly dominated by the penalty incurred during message transfers. The hope is that with the ongoing research in NOW community <ref> [2] </ref> which includes using asynchronous transfer mode, parallel file server, and active message passing will result in low network latency and overhead.
Reference: [3] <author> P. Ashar and M. Cheong. </author> <title> Efficient Breadth-First Manipulation of Binary Decision Diagrams. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 622-627, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Ochi et al. [13] have proposed the breadth-first implementation approach to regularize the memory accesses, which leads to fewer page faults. As a result, BDDs of very large size (up to 12 million nodes) 2 can be handled. Ashar et al. <ref> [3] </ref> have presented an improved breadth-first algorithm, which enables manipulation of BDDs with up to 100 million nodes. In this work, we propose a technique to manipulate BDDs on a network of workstations (NOW). A NOW provides a large amount of collective memory resources, both main memories and disks. <p> The advantage of our approach as compared to existing ones is two fold. Unlike the approaches in [10, 12], which require special computing hardware (shared multiprocessor or vector processor), a NOW is a part of the existing infrastructure. Secondly, the approaches in <ref> [3, 13] </ref> are limited by the memory available on a particular machine. When using a network of workstations, the available memory increases significantly. The rest of the paper is organized as follows. <p> Since it is very expensive to access the data across the network compared to the workstation main memory, any attempt to use depth-first manipulation algorithm on a NOW will meet limited success. The breadth-first iterative algorithm <ref> [3, 13] </ref> (see Figures 2, 3, and 4) attempts to regularize the memory access pattern by traversing the operand BDDs on a level-by-level basis and by using a customized memory allocator that allocates the BDD nodes for a specific variable id from the same page. <p> However, since the result BDD is constructed level-by-level, it is not possible to perform certain isomorphism checks while constructing the BDD. The redundant nodes created during the APPLY phase (see figure 3) in the result BDD have to be eliminated by a bottom-up REDUCE phase (see figure 4). In <ref> [3] </ref>, Ashar et al. obviate the need to access the BDD node to determine its variable id by using a lookup table that returns the variable id from the BDD node pointer.
Reference: [4] <author> A. Aziz, F. Balarin, S.-T. Cheng, R. Hojati, T. Kam, S. C. Krishnan, R. K. Ranjan, T. R. Shiple, V. Singhal, S. Tasiran, H.-Y. Wang, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. HSIS: </author> <title> A BDD-Based Environment for Formal Verification. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 454-459, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing. The application of BDD is further extended with its use in symbolic computation, which include symbolic simulation [6], reachability analysis [8, 15], and BDD based formal design verification <ref> [4, 7, 11] </ref>. However the BDD representation suffers from the drawback that the size of a BDD required to represent a complex logic circuit is very large. This results in large computation and memory requirements. These problems have been tackled on both the fronts.
Reference: [5] <author> R. Bryant. </author> <title> Graph-based Algorithms for Boolean Function Manipulation. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-35:677-691, </volume> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: The efficiency of the logic function manipulations depends on the data structure used for representing boolean functions. The reduced ordered binary decision diagram (ROBDD) <ref> [1, 5] </ref> is a canonical, directed acyclic graph representation of boolean functions. ROBDD (henceforth referred to as BDD) representation is compact for many functions encountered in practice. The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing.
Reference: [6] <author> R. Bryant. </author> <title> A methodology for hardware verification based on logic simulation. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 38(2) </volume> <pages> 299-328, </pages> <month> Apr. </month> <year> 1991. </year> <month> 17 </month>
Reference-contexts: The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing. The application of BDD is further extended with its use in symbolic computation, which include symbolic simulation <ref> [6] </ref>, reachability analysis [8, 15], and BDD based formal design verification [4, 7, 11]. However the BDD representation suffers from the drawback that the size of a BDD required to represent a complex logic circuit is very large. This results in large computation and memory requirements.
Reference: [7] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, and D. L. Dill. </author> <title> Sequential Circuit Verification Using Symbolic Model Checking. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing. The application of BDD is further extended with its use in symbolic computation, which include symbolic simulation [6], reachability analysis [8, 15], and BDD based formal design verification <ref> [4, 7, 11] </ref>. However the BDD representation suffers from the drawback that the size of a BDD required to represent a complex logic circuit is very large. This results in large computation and memory requirements. These problems have been tackled on both the fronts.
Reference: [8] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of Sequential Machines Based on Symbolic Execution. </title> <editor> In J. Sifakis, editor, </editor> <booktitle> Proc. of the Workshop on Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science, </booktitle> <pages> pages 365-373, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing. The application of BDD is further extended with its use in symbolic computation, which include symbolic simulation [6], reachability analysis <ref> [8, 15] </ref>, and BDD based formal design verification [4, 7, 11]. However the BDD representation suffers from the drawback that the size of a BDD required to represent a complex logic circuit is very large. This results in large computation and memory requirements.
Reference: [9] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM 3 User's Guide and Reference Manual. </title> <institution> Oak Ridge National Laboratory, </institution> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: This environment contains approximately 60 workstations with 64MB (about 40MB available) main memory and 256MB (about 200MB available) disk space and MIPS-R4000 processor. We have used PVM <ref> [9] </ref> (Parallel Virtual Machine) software to provide the communication between the workstations in the cluster during a BDD operation.
Reference: [10] <author> S. Kimura and E. M. Clarke. </author> <title> A Parallel Algorithm for Constructing Binary Decision Diagrams. </title> <booktitle> In Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pages 220-223, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: However the BDD representation suffers from the drawback that the size of a BDD required to represent a complex logic circuit is very large. This results in large computation and memory requirements. These problems have been tackled on both the fronts. Reducing the computation time: Kimura et al. <ref> [10] </ref> have presented a parallel algorithm to construct BDDs that uses a shared memory multiprocessor to divide the tasks that can be performed in parallel on several processors. Shared memory machine allows the use of a single global hash table to maintain canonicity. <p> A NOW provides a large amount of collective memory resources, both main memories and disks. The collective memory resources of NOW provide a potential to manipulate very large BDDs. The advantage of our approach as compared to existing ones is two fold. Unlike the approaches in <ref> [10, 12] </ref>, which require special computing hardware (shared multiprocessor or vector processor), a NOW is a part of the existing infrastructure. Secondly, the approaches in [3, 13] are limited by the memory available on a particular machine. When using a network of workstations, the available memory increases significantly.
Reference: [11] <author> K. L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing. The application of BDD is further extended with its use in symbolic computation, which include symbolic simulation [6], reachability analysis [8, 15], and BDD based formal design verification <ref> [4, 7, 11] </ref>. However the BDD representation suffers from the drawback that the size of a BDD required to represent a complex logic circuit is very large. This results in large computation and memory requirements. These problems have been tackled on both the fronts.
Reference: [12] <author> H. Ochi, N. Ishiura, and S. Yajima. </author> <title> Breadth-First Manipulation of SBDD of Boolean Functions for Vector Processing. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 413-416, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Shared memory machine allows the use of a single global hash table to maintain canonicity. Ochi et al. <ref> [12] </ref> have proposed a breadth-first manipulation approach that uses a vector processor to exploit the high vectorization ratio and long vector lengths by performing a BDD operation on a level-by-level basis. <p> A NOW provides a large amount of collective memory resources, both main memories and disks. The collective memory resources of NOW provide a potential to manipulate very large BDDs. The advantage of our approach as compared to existing ones is two fold. Unlike the approaches in <ref> [10, 12] </ref>, which require special computing hardware (shared multiprocessor or vector processor), a NOW is a part of the existing infrastructure. Secondly, the approaches in [3, 13] are limited by the memory available on a particular machine. When using a network of workstations, the available memory increases significantly.
Reference: [13] <author> H. Ochi, K. Yasuoka, and S. Yajima. </author> <title> Breadth-First Manipulation of Very Large Binary-Decision Diagrams. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 48-55, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Since a page access time is of the order of tens of milliseconds, a large number of page faults lead to impractical amount of wall clock time, even though the time spent by processor doing useful work is quite small. Ochi et al. <ref> [13] </ref> have proposed the breadth-first implementation approach to regularize the memory accesses, which leads to fewer page faults. As a result, BDDs of very large size (up to 12 million nodes) 2 can be handled. <p> The advantage of our approach as compared to existing ones is two fold. Unlike the approaches in [10, 12], which require special computing hardware (shared multiprocessor or vector processor), a NOW is a part of the existing infrastructure. Secondly, the approaches in <ref> [3, 13] </ref> are limited by the memory available on a particular machine. When using a network of workstations, the available memory increases significantly. The rest of the paper is organized as follows. <p> Since it is very expensive to access the data across the network compared to the workstation main memory, any attempt to use depth-first manipulation algorithm on a NOW will meet limited success. The breadth-first iterative algorithm <ref> [3, 13] </ref> (see Figures 2, 3, and 4) attempts to regularize the memory access pattern by traversing the operand BDDs on a level-by-level basis and by using a customized memory allocator that allocates the BDD nodes for a specific variable id from the same page.
Reference: [14] <author> E. M. Sentovich, K. J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. R. Stephan, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> SIS: A System for Sequential Circuit Synthesis. </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: This software permits a network of heterogeneous UNIX computers to be used as a single large parallel computer by providing user level routines to send and receive messages among clusters of workstations. To evaluate the performance we integrated our BDD package with SIS <ref> [14] </ref>.
Reference: [15] <author> H. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Implicit State Enumeration of Finite State Machines using BDD's. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 130-133, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: The canonicity and compactness properties of the BDD led to its widespread usage in the area of logic synthesis and testing. The application of BDD is further extended with its use in symbolic computation, which include symbolic simulation [6], reachability analysis <ref> [8, 15] </ref>, and BDD based formal design verification [4, 7, 11]. However the BDD representation suffers from the drawback that the size of a BDD required to represent a complex logic circuit is very large. This results in large computation and memory requirements.
References-found: 15

