URL: http://www.win.tue.nl/win/cs/csr/csr93/93.32.ps
Refering-URL: http://www.win.tue.nl/win/cs/csr/csr93.html
Root-URL: http://www.win.tue.nl
Email: wsinhte@win.tue.nl  wsinrik@win.tue.nl  
Title: On the Correctness of Some Algorithms to Generate Finite Automata for Regular Expressions  
Author: H.M.M ten Eikelder H.P.J. van Geldrop 
Note: Table of Contents  
Address: The Netherlands  The Netherlands  
Affiliation: Eindhoven University of Technology  Eindhoven University of Technology  
Abstract: We discuss the method given by Glushkov, McNaughton-Yamada and Berry-Sethi and a related method given by Aho, Sethi and Ullmann to generate a deterministic finite automaton accepting the language of a given regular expression. For both methods a formal description and a simple correctness proof is given. Key Words: Regular Expressions, Finite Automata Category: F.4.3, F.1.1 
Abstract-found: 1
Intro-found: 1
Reference: [Aho, Sethi and Ullman (1988)] <author> Aho, A.V., R.Sethi, and J.D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley Reading, </publisher> <address> MA, </address> <year> 1988. </year>
Reference-contexts: In this note we discuss two methods. The first method 1 is described by [Glushkov (1961)] (theorem 16), [Mc-Naughton and Yamada (1960)] (page 44) and [Berry and Sethi (1986)] (Algorithm 4.4). A strongly related method has been given by <ref> [Aho, Sethi and Ullman (1988)] </ref> (Algorithm 3.5). In this note we give a simple correctness proof for both methods. It is based on a simple property, from which the correctness of both methods can easily be derived. <p> The conversion to deterministic automata (step (ii) above) is in fact a standard construction and is described in Section 6. For automata obtained with the Aho-Sethi-Ullman mapping we show that the combination of step (i) and (ii) finally leads to the algorithm described in <ref> [Aho, Sethi and Ullman (1988)] </ref>. 2 Preliminaries In this section we give the definitions of various well-known notions in the field of regular languages. In this note we always assume that V is a (finite) alphabet. Definition 1 (RE V , regular expressions over V ). <p> is defined by M A (e) = (Q; V; ; S; f@g) where: @ 62 V S = First (e @) Qfi V fi Q is such that (p; a; q) 2 = (p; q) 2 Follow (e @) ^ a = p 2 This construction can be found in <ref> [Aho, Sethi and Ullman (1988)] </ref>. In general M A (e) will be a non-deterministic automaton 3 . Next we describe the languages accepted by these automata. Theorem 20. For all e 2 RE V : IL (M G (e)) = K (e) Proof. <p> This marking is used in <ref> [Aho, Sethi and Ullman (1988)] </ref> (Algorithm 3.5). Example 2. Consider the regular expression e = a j a fl b. As the symbol a appears twice, it does not satisfy the condition C (e). <p> [] U 2 G [ Z ! skip fi od ; D := Z ; s := fFirst (e 0 @)g ; Ac := fU 2 D j @ 2 U g where Q = S (e 0 ) [ f@g This strongly resembles algorithm 3.5 in section 3.9 of <ref> [Aho, Sethi and Ullman (1988)] </ref>. The only essential difference is the treatment of the empty set as state of the deterministic automaton. In [Aho, Sethi and Ullman (1988)] the empty set is excluded from the states of the constructed deterministic automaton, although the transition function can have the empty set as <p> := fU 2 D j @ 2 U g where Q = S (e 0 ) [ f@g This strongly resembles algorithm 3.5 in section 3.9 of <ref> [Aho, Sethi and Ullman (1988)] </ref>. The only essential difference is the treatment of the empty set as state of the deterministic automaton. In [Aho, Sethi and Ullman (1988)] the empty set is excluded from the states of the constructed deterministic automaton, although the transition function can have the empty set as an entry. <p> In our opinion that is incorrect, either the empty set is treated as a ordinary state (sometimes called the "dead state"), or it is totally excluded (in that case a partial automaton is obtained). Here we have chosen the first version. The marking used in <ref> [Aho, Sethi and Ullman (1988)] </ref> is the second one described in Section 5. The functions firstpos, lastpos and nullable, used in [Aho, Sethi and Ullman (1988)], correspond to our functions First, Last and Null. <p> Here we have chosen the first version. The marking used in <ref> [Aho, Sethi and Ullman (1988)] </ref> is the second one described in Section 5. The functions firstpos, lastpos and nullable, used in [Aho, Sethi and Ullman (1988)], correspond to our functions First, Last and Null. <p> our relation 8 Follow by: q 2 f ollowpos (p) = (p; q) 2 Follow (e 0 @). 7 Conclusions We have given a simple correctness proof of the automata constructions given in [McNaughton and Yamada (1960)], [Glushkov (1961)] and [Berry and Sethi (1986)] and a related method described in <ref> [Aho, Sethi and Ullman (1988)] </ref>. The correctness proof of both constructions relies on theorem 15, i.e. C (e) ) K (e) = L (e).
Reference: [Brzozowski (1964)] <author> Brzozowski, J.A. </author> <title> "Derivatives of regular expressions", J.ACM 11(4) 481-494,1964. 8 The regular expression under consideration is not explicitly mentioned in [Aho, Sethi and Ullman (1988)]. </title>
Reference-contexts: In this note we give a simple correctness proof for both methods. It is based on a simple property, from which the correctness of both methods can easily be derived. The proof uses neither techniques like derivatives of regular expressions (see <ref> [Brzozowski (1964)] </ref>) nor algebra's of automata as in [Watson (1993)]. This paper provides a simple alternative for two branches of the taxonomy tree of automata as given in [Watson (1995)]. 1 The methods described by Glushkov, McNaughton-Yamada and Berry-Sethi are very similar. <p> Only in [Berry and Sethi (1986)] are these two steps also separated. Most computations are done in terms of regular expressions and languages. Algebras of automata, as in [Watson (1993)], or derivatives of regular expressions, as in <ref> [Brzozowski (1964)] </ref>, are not used. Finally we remark that the condition C (e) in theorem 15 is too strong. For instance for e = (a j a b) fl the condition does not hold, but still K (e) = L (e).
Reference: [Berry and Sethi(1986)] <author> Berry, G. and R. Sethi. </author> <title> "From regular expressions to deterministic automata", </title> <journal> Theoretical Computer Science, </journal> <volume> 48: </volume> <pages> 117-126, </pages> <year> 1986. </year>
Reference: [Glushkov (1961)] <author> Glushkov, </author> <title> V.M. "The abstract theory of automata", </title> <journal> Russian Mathematical Surveys, </journal> <volume> 16: </volume> <pages> 1-53, </pages> <year> 1961. </year>
Reference-contexts: 1 Introduction There are several methods to construct a deterministic finite automaton that accepts the language described by a given regular expression. In this note we discuss two methods. The first method 1 is described by <ref> [Glushkov (1961)] </ref> (theorem 16), [Mc-Naughton and Yamada (1960)] (page 44) and [Berry and Sethi (1986)] (Algorithm 4.4). A strongly related method has been given by [Aho, Sethi and Ullman (1988)] (Algorithm 3.5). In this note we give a simple correctness proof for both methods. <p> This marking, with the second pair element written as a subscript, is used by <ref> [Glushkov (1961)] </ref> and by [Berry and Sethi (1986)]. In e 2 RE V each occurrence of an alphabet symbol, say a, is replaced by the position of this occurrence of a in e. <p> Furthermore the function followpos is related to our relation 8 Follow by: q 2 f ollowpos (p) = (p; q) 2 Follow (e 0 @). 7 Conclusions We have given a simple correctness proof of the automata constructions given in [McNaughton and Yamada (1960)], <ref> [Glushkov (1961)] </ref> and [Berry and Sethi (1986)] and a related method described in [Aho, Sethi and Ullman (1988)]. The correctness proof of both constructions relies on theorem 15, i.e. C (e) ) K (e) = L (e).
Reference: [McNaughton and Yamada (1960)] <author> McNaughton, R. and H. Yamada. </author> <title> "Regular expressions and state graphs for automata", </title> <journal> IEEE Trans. on Electronic Computers 9(1) </journal> <pages> 39-47, </pages> <year> 1960. </year>
Reference-contexts: where: @ 62 V F = Last (@ e) Qfi V fi Q is such that (p; a; q) 2 = (p; q) 2 Follow (@ e) ^ a = q 2 This method of constructing a finite automaton is part of a construction that has already been described by <ref> [McNaughton and Yamada (1960)] </ref> ,[Glushkov (1961)] and [Berry and Sethi (1986)]. Note that M G (e) is always a deterministic automaton because (p; a; q 1 ) 2 ^ (p; a; q 2 ) 2 ) q 1 = q 2 . Definition 19 (Aho-Sethi-Ullman mapping). <p> Furthermore the function followpos is related to our relation 8 Follow by: q 2 f ollowpos (p) = (p; q) 2 Follow (e 0 @). 7 Conclusions We have given a simple correctness proof of the automata constructions given in <ref> [McNaughton and Yamada (1960)] </ref>, [Glushkov (1961)] and [Berry and Sethi (1986)] and a related method described in [Aho, Sethi and Ullman (1988)]. The correctness proof of both constructions relies on theorem 15, i.e. C (e) ) K (e) = L (e).
Reference: [Watson (1993)] <author> Watson, B.W. </author> <title> "A taxonomy of finite automata transformations and con structions", Computing Science Report 93/43, </title> <type> 3 rd printing, </type> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: In this note we give a simple correctness proof for both methods. It is based on a simple property, from which the correctness of both methods can easily be derived. The proof uses neither techniques like derivatives of regular expressions (see [Brzozowski (1964)]) nor algebra's of automata as in <ref> [Watson (1993)] </ref>. This paper provides a simple alternative for two branches of the taxonomy tree of automata as given in [Watson (1995)]. 1 The methods described by Glushkov, McNaughton-Yamada and Berry-Sethi are very similar. However, the used markings (see section 5) are different. <p> w = unmark 2 (v) : v 2 IL V 0 (M )) = f definition 24 g w 2 unmark 3 (IL V 0 (M ) 2 6 The sets RE V , P (V ) and SN FA can all be given a -algebra structure, see for instance <ref> [Watson (1993)] </ref>. Then various mappings can be considered as -homomorphisms and in some proofs we could use the initiality of the algebra RE V . However, we feel that in this simple case introducing that machinery is not useful. <p> Since step (ii) is a standard construction, this greatly simplifies the correctness proofs. Only in [Berry and Sethi (1986)] are these two steps also separated. Most computations are done in terms of regular expressions and languages. Algebras of automata, as in <ref> [Watson (1993)] </ref>, or derivatives of regular expressions, as in [Brzozowski (1964)], are not used. Finally we remark that the condition C (e) in theorem 15 is too strong. For instance for e = (a j a b) fl the condition does not hold, but still K (e) = L (e).
Reference: [Watson (1995)] <author> Watson, B.W. </author> <title> Taxonomies and Toolkits of Regular Language Algorithms. </title> <publisher> Ph. </publisher> <address> D. </address> <institution> dissertation, Eindhoven University of Technology, </institution> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with JUCS style </title>
Reference-contexts: The proof uses neither techniques like derivatives of regular expressions (see [Brzozowski (1964)]) nor algebra's of automata as in [Watson (1993)]. This paper provides a simple alternative for two branches of the taxonomy tree of automata as given in <ref> [Watson (1995)] </ref>. 1 The methods described by Glushkov, McNaughton-Yamada and Berry-Sethi are very similar. However, the used markings (see section 5) are different.
References-found: 7

