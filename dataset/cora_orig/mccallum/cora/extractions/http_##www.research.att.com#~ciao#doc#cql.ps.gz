URL: http://www.research.att.com/~ciao/doc/cql.ps.gz
Refering-URL: http://www.research.att.com/~chen/web-demo/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: gsf@research.att.com  
Title: cql A Flat File Database Query Language cql data description and query language, query optimizations,
Author: Glenn Fowler 
Note: This paper describes the  
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract: cql is a UNIX system tool that applies C style query expressions to flat file databases. In some respects it is yet another addition to the toolbox of programmable file filters: grep [Hume88], sh [Bour78][BK89], awk [AKW88], and perl [Wall]. However, by restricting its problem domain, cql takes advantage of optimizations not available to these more general purpose tools. 
Abstract-found: 1
Intro-found: 1
Reference: [AKW88] <author> A. V. Aho, B. W. Kernighan, P. J. Weinberger, </author> <title> The Awk Programming Language, </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference: [BK89] <author> Morris Bolsky and David G. Korn, </author> <title> The KornShell Command and Programming Language, </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: entities rather than being a part of the matching pattern. 2.3 shell - 3 - IFS=: while read name passwd uid gid info home shell junk do if (( $uid &lt; 10 )) && [[ $passwd == "" ]] then IFS=$ifs print "$name:$passwd:$uid:$gid:$info:$home:$shell" IFS=: done &lt; /etc/passwd The shell (ksh <ref> [BK89] </ref>) version uses the field splitting effects of IFS and read to blast the input records. A nice side effect is that read also names the fields. If the database changes then only the field name arguments to read must change.
Reference: [Bour78] <author> S. R. Bourne, </author> <title> The UNIX Shell, </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> Vol. 57 No. 6 Part 2, </volume> <pages> pp. 1971-1990, </pages> <month> July-August </month> <year> 1978. </year>
Reference-contexts: A nice side effect is that read also names the fields. If the database changes then only the field name arguments to read must change. Notice, however, that the shell has different syntax for numeric and string comparisons. Also, older shells <ref> [Bour78] </ref> have no built-in expressions and would require a separate program like expr to do the record selection. 2.4 perl perl -e ' open (PASSWD, "&lt; /etc/passwd") || die "cannot open /etc/passwd: $!"; while (&lt;PASSWD&gt;) - ($name, $passwd, $uid, $gid, $info, $home, $shell) = split (":"); if ($uid &lt; 10 &&
Reference: [BSD86] <institution> The UNIX Programmer's Reference Manual: 4.3 Berkeley Software Distribution, UC Berkeley, California, </institution> <year> 1986. </year>
Reference-contexts: Besides complicating the application query implementation, partitioning also imposes complexity on database updates and backup. The perl solution (actually, one of the perl solutions - perl is the UNIX system swiss army knife) is to base the queries on dbm <ref> [BSD86] </ref> hashed files rather than flat files. Linear scans are then avoided by accessing the dbm files as associative arrays.
Reference: [CF88] <author> Steve Cichinski and Glenn S. Fowler, </author> <title> Product Administration through Sable and Nmake, </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> Vol. 67 No. 4, </volume> <pages> pp. 59-70, </pages> <month> July-August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Flat file databases are common in UNIX system environments. They consist of newline terminated records with a single character that delimits fields within each record. Well known examples are /etc/passwd and /etc/group, and more recently the sablime <ref> [CF88] </ref> MR databases and cia [Chen89] abstraction databases. There are two basic flat file database operations: update delete, add or modify records query scan for records based on field selection function For the most part UNIX system tools make a clear distinction between these operations.
Reference: [Chen89] <author> Yih-Farn Chen, </author> <title> The C Program Database and Its Applications, </title> <booktitle> Proc. of Summer 1989 USENIX Conf. </booktitle>
Reference-contexts: 1 Introduction Flat file databases are common in UNIX system environments. They consist of newline terminated records with a single character that delimits fields within each record. Well known examples are /etc/passwd and /etc/group, and more recently the sablime [CF88] MR databases and cia <ref> [Chen89] </ref> abstraction databases. There are two basic flat file database operations: update delete, add or modify records query scan for records based on field selection function For the most part UNIX system tools make a clear distinction between these operations.
Reference: [Chri92] <author> Tom Christiansen, </author> <title> private correspondence. </title>
Reference-contexts: expr to do the record selection. 2.4 perl perl -e ' open (PASSWD, "&lt; /etc/passwd") || die "cannot open /etc/passwd: $!"; while (&lt;PASSWD&gt;) - ($name, $passwd, $uid, $gid, $info, $home, $shell) = split (":"); if ($uid &lt; 10 && $passwd eq "") - print "$name:$passwd:$uid:$info:$home:$shell"; - ' The perl example <ref> [Chri92] </ref> is similar to shell, except that shell combines the record read and field split operations into a single read operation.
Reference: [Felt82] <author> S. Felts, </author> <title> The Unity DBMS, </title> <institution> AT&T Bell Laboratories Technical Memorandum, TM82-59312-1, </institution> <year> 1992. </year>
Reference-contexts: Query expressions are modeled on C, including a struct construct for defining database record schemas. 2 Background As opposed to the UNIX system database tools like unity <ref> [Felt82] </ref>, cql traces its roots to the C language and the grep and awk tools. As such cql is limited to readonly database access. An example will clarify the differences between the various tools.
Reference: [FKV89] <author> Glenn S. Fowler, David G. Korn and Kiem-Phong Vo, </author> <title> An Efficient File Hierarchy Walker, </title> <booktitle> Proc. of Summer 1989 USENIX Conf. </booktitle> - <pages> 12 </pages> - 
Reference-contexts: It is important to note that cql is not a complete C interpreter. Just enough is borrowed from C to get the query job done. The implementation is based on a C expression library that was originally written for the tw <ref> [FKV89] </ref> replacement for the find command.
Reference: [Hume88] <author> Andrew Hume, </author> <title> Grep Wars, </title> <booktitle> EUUG Conference Proceedings, </booktitle> <address> London, England, </address> <month> Spring </month> <year> 1988. </year>
Reference: [Park91] <editor> Off The shelf: B-tree data-file managers, Tim Parker, </editor> <booktitle> UNIX Review, </booktitle> <volume> Vol. 9 No. 3, </volume> <pages> pp. 55-58, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: This method also generates a separate dbm file for each hashed field, making it unacceptable for use with large databases. - 2 - Other applications, such as cia, preprocess the database by generating B-tree or hash index files <ref> [Park91] </ref> for quick random access. Specialized scanning tools are then used to process the queries. The advantage here is that no database changes are required to speed up the queries.
Reference: [Wall] <author> Larry Wall, </author> <title> The Nutshell perl Book. </title>
References-found: 12

