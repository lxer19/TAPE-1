URL: file://ftp.cis.ohio-state.edu/pub/communication/papers/shpcc94-msgord.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~panda/mapping_pub.html
Root-URL: 
Email: E-mail: fpanda,radiya-vg@cis.ohio-state.edu  
Title: Message-Ordering for Wormhole-Routed Multiport Systems with Link Contention and Routing Adaptivity In Scalable High Performance
Author: Dhabaleswar K. Panda and Vibha A. Dixit-Radiya . 
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science The Ohio State University,  
Abstract: This paper analyzes the impact of message-ordering, between outgoing messages from a sender to multiple receivers (called multicasts), on the completion time of a program for wormhole-routed distributed-memory systems. In most existing systems, messages in a multicast are generally being sent as separate unicast messages by the source processor itself. We study how best to order a set of outgoing messages by taking into account message critical-ity and architectural issues including link contention, multiple ports, and adaptivity in routing. First, the simple algorithm of Dikaiakos et al. [8] is extended to obtain a static algorithm for non-fully-connected systems. Next, a dynamic message-ordering algorithm is proposed which works for any number of ports and takes advantage of routing adaptivity. Simulation results on random task graphs show improvement in completion time by 34% for static and 44% for dynamic, over naive sequential message-ordering. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Balakrishnan and D.K. Panda, </author> <title> "Impact of Multiple Consumption Channels on Wormhole Routed k-ary n-cube Networks," </title> <booktitle> In Proceedings of the International Parallel Processing Symposium, </booktitle> <pages> pp. 163-167, </pages> <year> 1993. </year>
Reference-contexts: However, it does not get eliminated completely because the number of outgoing messages at any time may be greater than the number of available injection ports. Similar contention due to limited number of consumption channels also degrade system performance significantly. This aspect has been studied separately in <ref> [1] </ref>. In this paper we focus on contention due to injection channel and determine best ways to utilize injection ports in a system together with its routing scheme. node supporting two-port communication. 2.3 Effect of Message-Ordering Consider an example multicast pattern of Fig. 3 in a 4x4 mesh.
Reference: [2] <author> V. Chaudhary and J.K. Aggrawal, </author> <title> "A Generalized Scheme for Mapping Parallel Algorithms," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> Vol. 4, No. 3, </volume> <pages> pp. 328-346, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time <ref> [2, 6] </ref>.
Reference: [3] <author> A. A. Chien and J. H. Kim, </author> <title> "Planar-Adaptive Routing: Low-Cost Adaptive Networks for Multiprocessors," </title> <booktitle> In International Symposium on Computer Architecture, </booktitle> <pages> pp. 268-277, </pages> <year> 1992. </year>
Reference-contexts: However, it does not make effective use of all communication links in a system. Fully adaptive algorithms [9] allow a message to be routed along any of the shortest paths from the source to the destination processor Partially adaptive algorithms like planar <ref> [3] </ref> restrict routing freedom to two dimensions at a time. three routing schemes. Higher adaptivity has potential to reduce link-contention and hence is useful to reduce the overall execution time of a given program.
Reference: [4] <author> Cray Research, Inc., </author> <title> Cray T3D System Architecture Overview, </title> <year> 1993. </year>
Reference-contexts: In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports and routing schemes with varying adaptivity. Intel Paragon [10], Cray T3D <ref> [4] </ref>, and Stanford DASH [11] are some early representative systems in this trend. These sys tems provide low-latency communication when the traffic in the system is low. However, with increase in communication traffic, messages undergo severe link contention and the system starts performing poorly.
Reference: [5] <author> W.J. Dally, </author> <title> "Virtual-channel Flow Control," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> Vol. 3, </volume> <pages> pp. 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: We discuss about the operational principles of multiport wormhole systems and show the situations which lead to port-contention. Through an example, we show the significance of message-ordering by taking into account routing adaptivity and multiple ports. 2.1 Routing Adaptivity and Link Con tention In wormhole-routed systems <ref> [5] </ref>, the header flit of a message establishes the path, the intermediate flits follow the path, and the tail flit releases the path. During the message propagation, if a desired link is already being used by another message, the current message gets blocked. <p> Such a phenomena is known as link-contention. This phenomena is very much associated with the underlying routing scheme, topology of the system, and the communication traffic. To alleviate link- contention, several routing schemes with varying adaptivity have been proposed in the literature. Deterministic or e-cube routing <ref> [5] </ref> defines a single path from a source to a destination node and thus has zero adaptivity. Such routing is simple to implement and deadlock free. However, it does not make effective use of all communication links in a system. <p> The source processor P 6 sends 6 messages (m 1 -m 6 ) to 6 respective destinations. Assume ecube routing <ref> [5] </ref> is being used for determining routing paths. It can be seen that multiple outgoing messages may contend for the same outgoing link (messages m 1 , m 2 , m 4 for the westbound link from P 6 and messages m 6 and m 3 for the eastbound link).
Reference: [6] <author> V.A. Dixit-Radiya and D.K. Panda, </author> <title> "Task Assignment on Distributed-Memory Systems with Adaptive Wormhole Routing," </title> <booktitle> In Symposium on Parallel and Distributed Processing, </booktitle> <pages> pp. 674-681, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time <ref> [2, 6] </ref>. <p> Even though subprob-lems (c) and (d) also significantly affect program completion time, they have not received any attention in mapping literature. We have solved the clustering and intra-processor scheduling problems in [7] and the assignment problem in <ref> [6] </ref>. In this paper, we address the message-ordering problem. Logical communication between tasks in a parallel program can be categorized as either unicast (source sending a message to a destination) or multi-cast (source sending messages to multiple destinations at the same time). A broadcast is a special case of multicast. <p> However, this message-ordering strategy is determined by considering the system to be a fully-connected architecture. Hence, the ordering does not necessarily provide the best completion time of a program when executed on a non-fully-connected architecture. In our previous study of mapping applications onto distributed memory systems <ref> [6, 7] </ref>, we have used LST-based strategies for clustering, task assignment, and intra-processor scheduling. In this paper, we first enhance the strategy proposed by Dika-iakos et al. to non-fully-connected architecture and evaluate its performance compared to the sequential message-ordering strategy. <p> Besides increasing the utilization of ports, from an application perspective, there exists criticality in messages, i.e., some messages are more critical than others and the program completion time increases significantly <ref> [6, 8] </ref> if the critical messages get delayed. Hence, a good message-ordering algorithm should take into account criticality in messages, routing scheme, link contention, and port contention to reduce program completion time as well as increasing the utilization of ports. <p> The objective is not to reduce the latency of a single multicast communication step. We use a Temporal Communication Graph (TCG) model for representing the temporal dependencies in a distributed-memory parallel program. This model has been successfully used in our previous study of clustering and assignment problems <ref> [6, 7] </ref>. Details of the model can be found in these references. First we explain the naive sequential ordering strategy which neither takes into account of architectural nor application characteristics.
Reference: [7] <author> V.A. Dixit-Radiya and D.K. Panda, </author> <title> "Clustering and Intra-Processor Scheduling for Explicitly-Parallel Programs on Distributed-Memory Systems," </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <year> 1994, </year> <note> accepted to be presented. </note>
Reference-contexts: There has been extensive work in the literature on developing near-optimal heuristics for sub-problems (a) and (b) above. Even though subprob-lems (c) and (d) also significantly affect program completion time, they have not received any attention in mapping literature. We have solved the clustering and intra-processor scheduling problems in <ref> [7] </ref> and the assignment problem in [6]. In this paper, we address the message-ordering problem. Logical communication between tasks in a parallel program can be categorized as either unicast (source sending a message to a destination) or multi-cast (source sending messages to multiple destinations at the same time). <p> However, this message-ordering strategy is determined by considering the system to be a fully-connected architecture. Hence, the ordering does not necessarily provide the best completion time of a program when executed on a non-fully-connected architecture. In our previous study of mapping applications onto distributed memory systems <ref> [6, 7] </ref>, we have used LST-based strategies for clustering, task assignment, and intra-processor scheduling. In this paper, we first enhance the strategy proposed by Dika-iakos et al. to non-fully-connected architecture and evaluate its performance compared to the sequential message-ordering strategy. <p> The objective is not to reduce the latency of a single multicast communication step. We use a Temporal Communication Graph (TCG) model for representing the temporal dependencies in a distributed-memory parallel program. This model has been successfully used in our previous study of clustering and assignment problems <ref> [6, 7] </ref>. Details of the model can be found in these references. First we explain the naive sequential ordering strategy which neither takes into account of architectural nor application characteristics. <p> Details of the model can be found in these references. First we explain the naive sequential ordering strategy which neither takes into account of architectural nor application characteristics. Then we discuss the work done by Dikaiakos et al. [8] which presents a message-ordering scheme based on precedence graph model <ref> [7] </ref> for 1-port fully-connected system (not a realistic architecture for large-scale system) based on crit-icality in messages only. Using a Temporal Communication Graph (TCG) model, we extend their result to wormhole-routed systems with any topology.
Reference: [8] <author> M. Dikaiakos, A. Rogers, and K. Steiglitz, </author> <title> "Message Ordering in Multiprocessors with Synchronous Communication," </title> <booktitle> Int'l Conference on Parallel Processing, Vol. III, </booktitle> <address> pp.196-203, </address> <year> 1992. </year>
Reference-contexts: In this paper, we take such an approach in determining effective message-ordering strategy for adaptive wormhole systems with multiple ports. While mapping an application to a distributed-memory system, Dikaiakos et al. <ref> [8] </ref> have shown that the completion time of a program can be reduced if multi-cast messages are ordered using a Latest Start Time (LST) strategy. However, this message-ordering strategy is determined by considering the system to be a fully-connected architecture. <p> Besides increasing the utilization of ports, from an application perspective, there exists criticality in messages, i.e., some messages are more critical than others and the program completion time increases significantly <ref> [6, 8] </ref> if the critical messages get delayed. Hence, a good message-ordering algorithm should take into account criticality in messages, routing scheme, link contention, and port contention to reduce program completion time as well as increasing the utilization of ports. <p> Details of the model can be found in these references. First we explain the naive sequential ordering strategy which neither takes into account of architectural nor application characteristics. Then we discuss the work done by Dikaiakos et al. <ref> [8] </ref> which presents a message-ordering scheme based on precedence graph model [7] for 1-port fully-connected system (not a realistic architecture for large-scale system) based on crit-icality in messages only. Using a Temporal Communication Graph (TCG) model, we extend their result to wormhole-routed systems with any topology.
Reference: [9] <author> J. Duato, </author> <title> "Deadlock-Free Adaptive Routing Algorithms for Multicomputers: Evaluation of a New Algorithm," </title> <booktitle> Sym. on Parallel and Distributed Processing, </booktitle> <pages> pp. 840-847, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Deterministic or e-cube routing [5] defines a single path from a source to a destination node and thus has zero adaptivity. Such routing is simple to implement and deadlock free. However, it does not make effective use of all communication links in a system. Fully adaptive algorithms <ref> [9] </ref> allow a message to be routed along any of the shortest paths from the source to the destination processor Partially adaptive algorithms like planar [3] restrict routing freedom to two dimensions at a time. three routing schemes. <p> This is a poor utilization of ports. It can be noticed that a message-ordering of (m 1 ; m 3 ; : : :) will allow both m 1 and m 3 to propagate simultaneously by using the two ports. If the underlying routing scheme is fully-adaptive <ref> [9] </ref>, then the original message-ordering (m 1 ; m 2 ; : : :) would have allowed both messages m 1 and m 2 to move simultaneously. <p> Our study included architectures with varying degree of routing adaptivity (e-cube (least adaptive) to fully adaptive <ref> [9] </ref>), multiple number of ports, and TCGs with varying application characteristics. Experiments were performed on random TCGs using an event-driven simulator written in CSIM [14] for 16x16 and 8x8 wormhole-routed meshes.
Reference: [10] <author> Intel Corporation, </author> <title> Paragon XP/S Product Overview, </title> <year> 1991. </year>
Reference-contexts: The wormhole-routing switching technique is increasingly becoming popular in building massively parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead [13]. In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports and routing schemes with varying adaptivity. Intel Paragon <ref> [10] </ref>, Cray T3D [4], and Stanford DASH [11] are some early representative systems in this trend. These sys tems provide low-latency communication when the traffic in the system is low. However, with increase in communication traffic, messages undergo severe link contention and the system starts performing poorly.
Reference: [11] <author> D. Lenoski et. al., </author> <title> "The Stanford DASH Multiprocessor," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 63-79, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports and routing schemes with varying adaptivity. Intel Paragon [10], Cray T3D [4], and Stanford DASH <ref> [11] </ref> are some early representative systems in this trend. These sys tems provide low-latency communication when the traffic in the system is low. However, with increase in communication traffic, messages undergo severe link contention and the system starts performing poorly.
Reference: [12] <author> P. McKinley et al., </author> <title> "Unicast-Based Multicast Communication in Wormhole-Routed Networks," </title> <booktitle> Int'l Conference on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pp. 10-19, </pages> <year> 1992. </year>
Reference-contexts: A broadcast is a special case of multicast. Multicasts are further classified into personalized (different data going to others) and non-personalized (same data going to different processors). Personalized multicasts are common in scientific and numerical computations using scattering techniques. Sophisticated multicasting schemes using path-based routing [13] and unicast-based schemes <ref> [12] </ref> have been shown to be efficient for non-personalized multicast. However, personalized multicasts cannot take advantage of these schemes.
Reference: [13] <author> Lionel M. Ni and P.K. McKinley, </author> <title> "A Survey of Wormhole Routing Techniques in Direct Networks," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 62-76, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: A broadcast is a special case of multicast. Multicasts are further classified into personalized (different data going to others) and non-personalized (same data going to different processors). Personalized multicasts are common in scientific and numerical computations using scattering techniques. Sophisticated multicasting schemes using path-based routing <ref> [13] </ref> and unicast-based schemes [12] have been shown to be efficient for non-personalized multicast. However, personalized multicasts cannot take advantage of these schemes. <p> In such cases, the order in which these messages are sent from the source has direct impact on the program completion time. The wormhole-routing switching technique is increasingly becoming popular in building massively parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead <ref> [13] </ref>. In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports and routing schemes with varying adaptivity. Intel Paragon [10], Cray T3D [4], and Stanford DASH [11] are some early representative systems in this trend.
Reference: [14] <author> H. Schwetman, </author> <title> "Introduction to Process - Oriented Simulation and CSIM," </title> <booktitle> Proc. of Winter Simulation Conf., </booktitle> <year> 1990. </year>
Reference-contexts: Our study included architectures with varying degree of routing adaptivity (e-cube (least adaptive) to fully adaptive [9]), multiple number of ports, and TCGs with varying application characteristics. Experiments were performed on random TCGs using an event-driven simulator written in CSIM <ref> [14] </ref> for 16x16 and 8x8 wormhole-routed meshes. The following system parameters, representing current-generation multicomputers, were used: startup time of 1 microsecond, link propagation time of 5 ns, and router node delay of 20 ns. Four different TCG classes, representing applications with varying computation-communication ratio and degree of parallelism, were used.
References-found: 14

