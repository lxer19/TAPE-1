URL: ftp://ftp.cs.arizona.edu/reports/1991/TR91-23.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Adapting AVS to Support Scientific Applications as Heterogeneous Distributed Programs  
Author: Patrick T. Homer Richard D. Schlichting 
Address: Tucson, Arizona 85721  
Affiliation: Department of Computer Science The University of Arizona  
Note: September  This research supported in part by the National Science Foundation under grant CCR-8811923.  
Date: TR 91-23  26, 1991  
Abstract: Most scientific applications are currently structured as a series of computational steps, each of which is implemented by a separate program with files being used to transmit data between the steps. For example, a vectorized computation with graphical output may involve executing the computation on a remote supercomputer, transferring the output file over the Internet, and then viewing the results on a local workstation. Here, an alternative model is described in which the application is constructed as a heterogeneous, distributed program in order to improve facilities for user interaction. In this model, the application is structured as a collection of interacting processes (tasks) in which distribution and heterogeneity of machine architecture and programming language are handled transparently by a remote procedure call (RPC) mechanism. The specific focus here is on describing how AVS (Application Visualization System) from Stardent Computer, Inc. has been adapted to support this type of application using the Schooner RPC system. An example involving self-organizing neural nets is used to illustrate the details of this approach. 
Abstract-found: 1
Intro-found: 1
Reference: [Alme85] <author> Almes, G.T., Black, A.P., Lazowska, E.D., and Noe, J.D. </author> <title> The Eden system: A technical review. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-11, </volume> <month> 1 (Jan. </month> <year> 1985), </year> <pages> 43-59. </pages>
Reference-contexts: This last service was provided explicitly for use with AVS, although it should prove useful in other contexts as well. There are many other RPC schemes with features such as external data representations, specification languages, and stub compilers that are similar to Schooner <ref> [Alme85, Birr84, Sun88, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
Reference: [Bers87] <author> Bershad, B.N., Ching, D.T., et al. </author> <title> A remote procedure call facility for interconnecting heterogeneous computer systems. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 8 (Aug. </month> <year> 1987), </year> <pages> 880-894. </pages>
Reference-contexts: There are many other RPC schemes with features such as external data representations, specification languages, and stub compilers that are similar to Schooner [Alme85, Birr84, Sun88, Xero81]. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) <ref> [Bers87] </ref>. The primary distinction between this work and Schooner is one of orientation: the main aim of the other systems is to support interprocess communication for client/server style operating system services, whereas Schooner is intended for building user-level applications.
Reference: [Blac86] <author> Black, A., Hutchinson, N., Jul, E., and Levy, H. </author> <title> Object structure in the Emerald System. </title> <booktitle> Proc. ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <address> Portland, OR (Oct. </address> <year> 1986), </year> <pages> 78-86. </pages>
Reference-contexts: The stub handles the conversions for all values automatically except those values whose type is represented. There is one stub compiler for each supported programming language. Currently, Schooner has stub compilers for C and FORTRAN; various versions of the predecessor MLP system also supported Pascal, Icon [Gris83], and Emerald <ref> [Blac86, Blac87] </ref>. A program using Schooner is formed out of multiple components, each containing one or more procedures. A component is implemented by a process, and so is also the unit of distribution in the system.
Reference: [Blac87] <author> Black, A., Hutchinson, N., Jul, E., Levy, H., and Carter, L. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 65-76. </pages>
Reference-contexts: The stub handles the conversions for all values automatically except those values whose type is represented. There is one stub compiler for each supported programming language. Currently, Schooner has stub compilers for C and FORTRAN; various versions of the predecessor MLP system also supported Pascal, Icon [Gris83], and Emerald <ref> [Blac86, Blac87] </ref>. A program using Schooner is formed out of multiple components, each containing one or more procedures. A component is implemented by a process, and so is also the unit of distribution in the system.
Reference: [Birr84] <author> Birrell, A. D. and Nelson, B. J. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. on Computer Systems 2, </journal> <month> 1 (Feb. </month> <year> 1984), </year> <pages> 39-59. </pages>
Reference-contexts: This last service was provided explicitly for use with AVS, although it should prove useful in other contexts as well. There are many other RPC schemes with features such as external data representations, specification languages, and stub compilers that are similar to Schooner <ref> [Alme85, Birr84, Sun88, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
Reference: [Gris83] <author> Griswold, R. and Griswold, M. </author> <title> The Icon Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J. </address> <year> 1983. </year>
Reference-contexts: The stub handles the conversions for all values automatically except those values whose type is represented. There is one stub compiler for each supported programming language. Currently, Schooner has stub compilers for C and FORTRAN; various versions of the predecessor MLP system also supported Pascal, Icon <ref> [Gris83] </ref>, and Emerald [Blac86, Blac87]. A program using Schooner is formed out of multiple components, each containing one or more procedures. A component is implemented by a process, and so is also the unit of distribution in the system.
Reference: [Gibb87] <author> Gibbons, P.B. </author> <title> A stub generator for multi-language RPC in heterogeneous environments. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 77-87. </pages>
Reference-contexts: There are many other RPC schemes with features such as external data representations, specification languages, and stub compilers that are similar to Schooner [Alme85, Birr84, Sun88, Xero81]. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus <ref> [Gibb87] </ref>, and HRPC (Heterogeneous RPC) [Bers87]. The primary distinction between this work and Schooner is one of orientation: the main aim of the other systems is to support interprocess communication for client/server style operating system services, whereas Schooner is intended for building user-level applications.
Reference: [Haye87] <author> Hayes, R. and Schlichting, R.D. </author> <title> Facilitating mixed language programming in distributed systems. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <month> SE-13,12 (December </month> <year> 1987), </year> <pages> 1254-1264. </pages>
Reference-contexts: AVS provides a state-of-the-art graphics system for viewing the results of scientific computation, while Schooner implements transparent distribution and heterogeneity. Schooner is, in turn, based on a previous system called MLP <ref> [Haye87, Haye88, Haye90] </ref>. This paper is organized as follows. In Section 2, we give brief overviews of both AVS and Schooner.
Reference: [Haye88] <author> Hayes, R., Manweiler, S., and Schlichting, R.D. </author> <title> A simple system for constructing distributed, mixed-language programs. </title> <journal> SoftwarePractice and Experience 18,7 (July -13 1988), </journal> <pages> 641-660. </pages>
Reference-contexts: AVS provides a state-of-the-art graphics system for viewing the results of scientific computation, while Schooner implements transparent distribution and heterogeneity. Schooner is, in turn, based on a previous system called MLP <ref> [Haye87, Haye88, Haye90] </ref>. This paper is organized as follows. In Section 2, we give brief overviews of both AVS and Schooner.
Reference: [Haye89] <author> Hayes, R. UTS: </author> <title> A Type System for Facilitating Data Communication, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Computer Science, Univ. of Arizona, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: To accomplish this, Schooner provides three services: an external data representation, a procedure specification language and associated stub compilers, and a runtime system to implement control flow. The data representation and specification language are combined into a type language called UTS (Universal Type System) <ref> [Haye89] </ref>. The external data representation aspect of UTS allows data to be represented in a machine-and language-independent manner. It includes most common data types found in languages, plus full support for array and record types.
Reference: [Haye90] <author> Hayes, R., Hutchinson, </author> <title> N.C., and Schlichting, R.D. Integrating Emerald into a system for mixed-language programming. </title> <booktitle> Computer Languages 15,2 (1990), </booktitle> <pages> 95-108. </pages>
Reference-contexts: AVS provides a state-of-the-art graphics system for viewing the results of scientific computation, while Schooner implements transparent distribution and heterogeneity. Schooner is, in turn, based on a previous system called MLP <ref> [Haye87, Haye88, Haye90] </ref>. This paper is organized as follows. In Section 2, we give brief overviews of both AVS and Schooner.
Reference: [Jone85] <author> Jones, </author> <title> M.B., Rashid, R.F., Thompson, M.R. Matchmaker: An interface specification language for distributed processing. </title> <booktitle> Proc. 12th Symp. on Prin. of Prog. </booktitle> <address> Lang, New Orleans, </address> <month> (Jan. </month> <year> 1985), </year> <pages> 225-235. </pages>
Reference-contexts: There are many other RPC schemes with features such as external data representations, specification languages, and stub compilers that are similar to Schooner [Alme85, Birr84, Sun88, Xero81]. Several of these systems also emphasize heterogeneity, including Matchmaker <ref> [Jone85] </ref>, Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87]. The primary distinction between this work and Schooner is one of orientation: the main aim of the other systems is to support interprocess communication for client/server style operating system services, whereas Schooner is intended for building user-level applications.
Reference: [Khor91] <institution> The Khoros Group, </institution> <note> Khoros Manual (Vol. 1: User's Manual). </note> <institution> Dept. of Elec. and Comp. Eng., Univ. of New Mexico, </institution> <address> Albuquerque, NM, </address> <year> 1991. </year>
Reference-contexts: For the latter, we will look at utilizing other graphics visualization tools such as Khoros <ref> [Khor91] </ref> or apE [Vand90] in addition to AVS, as well as exploring further refinements and enhancements to Schooner. One specific category of enhancements to be investigated are techniques for optimizing the transfer of the large amounts of data that are typical in scientific applications.
Reference: [Purt91a] <author> Purtilo, J., and Jalote, P. </author> <title> An environment for prototyping distributed applications. </title> <booktitle> Computer Languages 16,3/4, </booktitle> <year> (1991), </year> <pages> 197-207. </pages>
Reference: [Purt91b] <author> Purtilo, J. </author> <title> The Polylith software bus. </title> <journal> ACM Trans. on Prog. Lang. and Sys. </journal> <note> (1991), to appear. </note>
Reference: [Sun88] <author> Sun Microsystems, Inc. </author> <title> Network Programming (Revision A), Part number 800-1779-10, </title> <institution> Sun Microsystems, Inc., Mountain View, Calif., </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: This last service was provided explicitly for use with AVS, although it should prove useful in other contexts as well. There are many other RPC schemes with features such as external data representations, specification languages, and stub compilers that are similar to Schooner <ref> [Alme85, Birr84, Sun88, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
Reference: [Star91] <author> Stardent Computer, Inc. </author> <title> AVS User's Guide (Release 3.0), Part number 340-0132-02, </title> <publisher> Stardent Computer, Inc., </publisher> <address> Concord, Mass., </address> <month> April </month> <year> 1991. </year>
Reference-contexts: An example application involving self-organizing neural nets is outlined in Section 4. Finally, Section 5 offers some conclusions and directions for future work. 2. The Individual Systems 2.1. An Overview of AVS AVS is a graphics system for displaying images generated by scientific computations <ref> [Star91] </ref>. The data model is oriented strongly toward these types of applications, with an underlying assumption that the data represents a two- or three-dimensional grid with values located at each point in the grid. The grid need not be uniform; AVS also supports rectilinear and irregular grids.
Reference: [Vand90] <author> VandeWettering, M. apE 2.0, Pixel 1,4 (Nov./Dec. </author> <year> 1990), </year> <pages> 30-35. </pages>
Reference-contexts: For the latter, we will look at utilizing other graphics visualization tools such as Khoros [Khor91] or apE <ref> [Vand90] </ref> in addition to AVS, as well as exploring further refinements and enhancements to Schooner. One specific category of enhancements to be investigated are techniques for optimizing the transfer of the large amounts of data that are typical in scientific applications.
Reference: [Xero81] <institution> Xerox Corp. </institution> <month> Courier: </month> <title> The Remote Procedure Call Protocol. Xerox System Integration Standard XSIS 038112, </title> <institution> Xerox Corp., Stamford, Conn., </institution> <month> Dec. </month> <year> 1981. </year> <month> -14 </month>
Reference-contexts: This last service was provided explicitly for use with AVS, although it should prove useful in other contexts as well. There are many other RPC schemes with features such as external data representations, specification languages, and stub compilers that are similar to Schooner <ref> [Alme85, Birr84, Sun88, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
References-found: 19

