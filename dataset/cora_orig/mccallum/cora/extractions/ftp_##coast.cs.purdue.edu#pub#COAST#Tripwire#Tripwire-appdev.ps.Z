URL: ftp://coast.cs.purdue.edu/pub/COAST/Tripwire/Tripwire-appdev.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ2.html
Root-URL: http://www.cs.purdue.edu
Title: Experiences with Tripwire: Using Integrity Checkers for Intrusion Detection  
Author: Gene H. Kim and Eugene H. Spafford 
Note: Experiences on how Tripwire has been used in intrusion detection in the field are then presented, as well as other uses of Tripwire that have been employed.  
Date: February 22, 1995  
Address: West Lafayette, IN 47907-1398  
Affiliation: COAST Laboratory Department of Computer Sciences Purdue University  
Abstract: Tripwire is an integrity checking program written for the UNIX environment that gives system administrators the ability to monitor file systems for added, deleted, and modified files. Intended to aid intrusion detection, Tripwire was officially released on November 2, 1992, and is being actively used at thousands of sites around the world. Published in volume 26 of comp.sources.unix and archived at numerous FTP sites around the world, Tripwire is widely available and widely distributed. It is recommended by various response teams, including the CERT and CIAC. This paper begins by motivating the use of an integrity checker by presenting a hypothetical situation that any system administrator could face. An overview of Tripwire is described, emphasizing the salient aspects of Tripwire configuration that allows its use in modern UNIX sites. For example, how a system administrator would configure Tripwire for use in a large, heterogeneous site is presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Vesselin Bontchev. </author> <title> Possible virus attacks against integrity programs and how to prevent them. </title> <type> Technical report, </type> <institution> Virus Test Center, University of Hamburg, </institution> <year> 1993. </year>
Reference-contexts: There has also been one reported case of a system administrator detecting a failing disk with Tripwire. All three classes of stories seem to validate the theory behind integrity checking programs. Although the foundations of integrity checkers have been discussed in <ref> [1, 2, 4] </ref>, when Tripwire design was started in May 1992, no usuable, publically available integrity tools existed undoubtedly providing one of the primary motivations for writing Tripwire. 10 5.7 Evaluating Tripwire portability Tripwire has proven to be highly portable, successfully running on over 28 UNIX platforms.
Reference: [2] <author> David A. Curry. </author> <title> UNIX System Security: A Guide for Users and System Administrators. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: Consider the problems with simple checklisting schemes: 2.2 The resulting challenges Some established techniques for monitoring file systems for potentially dangerous changes include maintaining checklists, comparison copies, checksum records, or a long history of backup tapes for this kind of contingency <ref> [4, 2] </ref>. However, these methods are costly to maintain, prone to error, and susceptible to easy spoofing by a malicious intruder. For instance, the UNIX utility find (1) is often used to generate a checklist of system files, perhaps in conjunction with ls (1). <p> There has also been one reported case of a system administrator detecting a failing disk with Tripwire. All three classes of stories seem to validate the theory behind integrity checking programs. Although the foundations of integrity checkers have been discussed in <ref> [1, 2, 4] </ref>, when Tripwire design was started in May 1992, no usuable, publically available integrity tools existed undoubtedly providing one of the primary motivations for writing Tripwire. 10 5.7 Evaluating Tripwire portability Tripwire has proven to be highly portable, successfully running on over 28 UNIX platforms.
Reference: [3] <author> Daniel Farmer and Eugene H. Spafford. </author> <title> The COPS security checker system. </title> <booktitle> In Proceedings of the Summer Conference, </booktitle> <pages> pages 165-190, </pages> <address> Berkely, CA, 1990. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: An added level of security could be added by augmenting these lists with information from sum (8) or cksum (8), as is done by the crc check program included with COPS <ref> [3] </ref>. However, numerous shortcomings in these simple checklisting schemes prevent them from being completely trustworthy and useful. First, the list of files and associated checksums may be tedious to maintain because of its size and lack of locality (files are located all over the disk).
Reference: [4] <author> Simson Garfinkel and Gene Spafford. </author> <title> Practical Unix Security. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA, </address> <year> 1991. </year>
Reference-contexts: Consider the problems with simple checklisting schemes: 2.2 The resulting challenges Some established techniques for monitoring file systems for potentially dangerous changes include maintaining checklists, comparison copies, checksum records, or a long history of backup tapes for this kind of contingency <ref> [4, 2] </ref>. However, these methods are costly to maintain, prone to error, and susceptible to easy spoofing by a malicious intruder. For instance, the UNIX utility find (1) is often used to generate a checklist of system files, perhaps in conjunction with ls (1). <p> There has also been one reported case of a system administrator detecting a failing disk with Tripwire. All three classes of stories seem to validate the theory behind integrity checking programs. Although the foundations of integrity checkers have been discussed in <ref> [1, 2, 4] </ref>, when Tripwire design was started in May 1992, no usuable, publically available integrity tools existed undoubtedly providing one of the primary motivations for writing Tripwire. 10 5.7 Evaluating Tripwire portability Tripwire has proven to be highly portable, successfully running on over 28 UNIX platforms.
Reference: [5] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The M4 Macro Processor. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1977. </year>
Reference-contexts: In interactive database update mode, Tripwire first generates a list of all changes (ala integrity checking mode). For each of these changes, Tripwire asks the system administrator whether the specified file or entry should be updated. 3.3 Scalability aids Tripwire includes an M4-like preprocessing language <ref> [5] </ref> to help system administrators maximize reuse of configuration files. By including directives such as @@include, @@ifdef, @@ifhost, and @@define, system administrators can write a core configuration file describing portions of the file system shared by many machines.
Reference: [6] <author> Gene H. Kim and Eugene H. Spafford. </author> <title> The design and implementation of tripwire: A file system integrity checker. </title> <type> Technical Report CSD-TR-93-071, </type> <institution> Purdue University, </institution> <month> nov </month> <year> 1993. </year>
Reference-contexts: It is recommended by various response teams, including the CERT and CIAC. Testing of Tripwire started in September 1992 since then, its design and code have been available for scrutiny by the public community at large. The design and implementation are described in detail in <ref> [6] </ref>. fl Gene H. Kim is now at University of Arizona. 1 An intensive beta test period resulted in Tripwire being ported to over two dozen variants of Unix, including several versions neither author had ever encountered.
Reference: [7] <author> Ralph C. Merkle. </author> <title> A fast software one-way hash function. </title> <journal> Journal of Cryptology, </journal> <volume> 3(1) </volume> <pages> 43-58, </pages> <year> 1990. </year>
Reference-contexts: The following routines are included in the latest Tripwire distribution: MD5 [9] (the RSA Data Security, Inc. MD5 Message-Digest Algorithm), MD4 [8] (the RSA Data Security, Inc. MD4 Message-Digest Algorithm), 7 MD2 (the RSA Data Security, Inc. MD2 Message-Digest Algorithm), 1 Snefru <ref> [7] </ref> (the Xerox Secure Hash Function), and SHA (the NIST proposed Secure Hash Algorithm). Tripwire also includes POSIX 1003.2 compliant CRC-32 and CCITT compliant CRC-16 signatures. Each signature may be included in the selection-mask by including its index.
Reference: [8] <author> R. L. Rivest. </author> <title> The md4 message digest algorithm. </title> <booktitle> Advances in Cryptology Crypto '90, </booktitle> <pages> pages 303-311, </pages> <year> 1991. </year>
Reference-contexts: The following routines are included in the latest Tripwire distribution: MD5 [9] (the RSA Data Security, Inc. MD5 Message-Digest Algorithm), MD4 <ref> [8] </ref> (the RSA Data Security, Inc. MD4 Message-Digest Algorithm), 7 MD2 (the RSA Data Security, Inc. MD2 Message-Digest Algorithm), 1 Snefru [7] (the Xerox Secure Hash Function), and SHA (the NIST proposed Secure Hash Algorithm). Tripwire also includes POSIX 1003.2 compliant CRC-32 and CCITT compliant CRC-16 signatures.
Reference: [9] <author> R. L. Rivest. </author> <title> RFC 1321: The md5 message-digest algorithm. </title> <type> Technical report, </type> <institution> Internet Activities Board, </institution> <month> April </month> <year> 1992. </year> <month> 12 </month>
Reference-contexts: The following routines are included in the latest Tripwire distribution: MD5 <ref> [9] </ref> (the RSA Data Security, Inc. MD5 Message-Digest Algorithm), MD4 [8] (the RSA Data Security, Inc. MD4 Message-Digest Algorithm), 7 MD2 (the RSA Data Security, Inc. MD2 Message-Digest Algorithm), 1 Snefru [7] (the Xerox Secure Hash Function), and SHA (the NIST proposed Secure Hash Algorithm).
References-found: 9

