URL: http://www.cs.ucl.ac.uk/staff/C.Harris/gpcom.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/staff/C.Harris/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: C.Harris@cs.ucl.ac.uk, B.Buxton@cs.ucl.ac.uk  
Phone: Telephone: Chris Harris +44 171 419 3679, Bernard Buxton +44 171 380 7294  
Title: 1 GP-COM: A Distributed, Component-Based Genetic Programming System in C++  
Author: Christopher Harris and Bernard Buxton 
Keyword: Category: Genetic Programming  
Address: Gower Street London WC1E 6BT United Kingdom  
Affiliation: Department of Computer Science University College, London  
Abstract: Widespread adoption of Genetic Programming techniques as a domain-independent problem solving tool depends on a good underlying software structure. A system is presented that mirrors the conceptual makeup of a GP system. Consisting of a loose collection of software components, each with strict interface definitions and roles, the system maximises flexibility and minimises effort when applied to a new problem domain. 
Abstract-found: 1
Intro-found: 1
Reference: [Harris] <author> Harris CP, </author> <title> Buxton BF. Evolving Edge Detectors. </title> <note> Submitted to GP-96. </note>
Reference-contexts: No extra configuration, recompilation or reprogramming of the rest of the system is required. This allows the system to be changed and augmented quickly and with little effort. An example problem using GP-COM We used GP-COM to apply GP to an edgedetector problem <ref> [Harris] </ref>. Two components in the system, the problem program and raw fitness calculation, needed to be written from scratch. In theory these could be combined into a single program, but GP-COM assumes two programs will be used. <p> Once all the components had been put into place, the front-end and parallelisation was - 9 - automatically available through the global software components, and required no coding effort. The GP-COM system. The problem is an edgedetector problem <ref> [Harris] </ref>, and 6 runs are being displayed. - 10 - Conclusions A generic Genetic Programming system was described. The system was split conceptually into problem-dependent and problem independent components. Based on this analysis, a compiling distributed component-based genetic programming system was presented called GP-COM.
Reference: [Haynes] <author> Haynes T, Wainright R, Sen S, Schoenfeld D. </author> <title> Strongly Typed Genetic Programming in Evolving Cooperation Strategies in Proc. </title> <booktitle> 6th International Conference on Genetic Algorithms, ICGA 95. </booktitle> <publisher> Morgan Kauffman. </publisher> <year> 1995. </year>
Reference-contexts: Although this is a novel feature, it has yet to be shown that the combination of these features is of value in practice, although both ADFs and strong typing have been shown to offer improvements when used in isolation <ref> [Koza2, Haynes] </ref>. To retain the integrity of crossover and mutation operators with strong typing and ADFs, the following constraints are employed: Each individual in the population has an identical number of ADF trees. This ensures that any operation involving two individuals can make assumptions about those trees and their makeup.
Reference: [Koza] <author> Koza JR. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press. </publisher> <year> 1992. </year>
Reference-contexts: Introduction Genetic Programming <ref> [Koza] </ref> systems play an important role in determining the usefulness of GP as a method of automatic programming. A proper software support structure is essential if GP is ever to become a viable alternative to manual methods in problem solving. This paper discusses GP-COM, a system developed by the author. <p> This allows the program trees to correspond very closely to the domain representation as this is itself a model using the same set of primitives. Parallelism in Genetic Programming <ref> [Koza] </ref> gives three levels at which the performance of GP may be increased by parallelisation. These are: By fitness case. Every individual in a population is evaluated on every processor, but only a subset of the fitness cases are evaluated on each processor. By individual.
Reference: [Koza2] <author> Koza JR. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press. </publisher> <year> 1994. </year>
Reference-contexts: Although this is a novel feature, it has yet to be shown that the combination of these features is of value in practice, although both ADFs and strong typing have been shown to offer improvements when used in isolation <ref> [Koza2, Haynes] </ref>. To retain the integrity of crossover and mutation operators with strong typing and ADFs, the following constraints are employed: Each individual in the population has an identical number of ADF trees. This ensures that any operation involving two individuals can make assumptions about those trees and their makeup.
Reference: [Montana] <author> Montana DJ. </author> <title> Strongly Typed Genetic Programming. </title> <booktitle> Evolutionary Computation 3(2), </booktitle> <year> 1995. </year>
Reference-contexts: The population manager in GP-COM is capable of storing and manipulating arbitrary program trees. It provides checks for syntactic integrity according to information specified at runtime. It supports strongly typed primitives <ref> [Montana] </ref> and hierarchical ADFs (Automatically Defined Functions). It also provides support for using both together, i.e. it is possible to have typed ADFs.
References-found: 5

