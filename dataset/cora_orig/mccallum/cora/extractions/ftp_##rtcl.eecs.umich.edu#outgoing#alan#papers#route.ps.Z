URL: ftp://rtcl.eecs.umich.edu/outgoing/alan/papers/route.ps.Z
Refering-URL: http://www.eecs.umich.edu/RTCL/harts/
Root-URL: http://www.cs.umich.edu
Title: FAULT-TOLERANT ROUTING IN MESH ARCHITECTURES  
Author: Alan Olson Kang G. Shin 
Keyword: Index Terms: Hexagonal mesh, distributed systems, routing, faulty links, cycles, incisions.  
Address: Ann Arbor, Michigan 48109-2122.  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science Computer Science and Engineering Division The University of Michigan  
Abstract: It is important for a distributed computing system to be able to route messages around whatever faulty links or nodes may be present. We developed a fault-tolerant routing algorithm which assures the delivery of every message as long as there is a path between its source and destination. The algorithm works on many common mesh architectures such as the torus and hexagonal mesh. The proposed scheme can also detect the non-existence of path between a pair of nodes in a finite amount of time. Moreover, the scheme requires each node in the system to know only the state (faulty or not) of each of its own links. The performance of the routing scheme is simulated for both square and hexagonal meshes while varying the physical distribution of faulty components. It is shown that a shortest path between the source and destination of each message is taken with a high probability, and if a path exists, is usually found very quickly. The work reported here is supported in part by the NSF under Grants MIP-9203895 and by the Office of Naval Research under Grant N00014-91-J-1115. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. S. Chen and K. G. Shin, </author> <title> "Adaptive fault-tolerant routing in hypercube multicomputers," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 39, no. 12, </volume> <pages> pp. 1406-1416, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: If other information must be consulted, the message must be buffered, and message delivery is delayed. We therefore restrict ourselves to the situation where each node knows only the state of its own links. Some work has already been done on fault-tolerant routing in the hypercube <ref> [1, 3, 5, 7] </ref>. These algorithms either take advantage of the specific mathematical properties of the hypercube and are therefore inapplicable to meshes, or use some form of global information, which we want to avoid. <p> These algorithms either take advantage of the specific mathematical properties of the hypercube and are therefore inapplicable to meshes, or use some form of global information, which we want to avoid. The authors of <ref> [1] </ref> present an algorithm which does not use global information, but relies on properties specific to hypercubes and cannot tolerate more than n faults, where n is the dimension of the hypercube. To date, we know of no other fault-tolerant routing strategy for mesh-type distributed systems systems.
Reference: [2] <author> M. S. Chen, K. G. Shin, and D. D. Kandlur, </author> <title> "Addressing, routing and broadcasting in hexagonal mesh multiprocessors," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 39, no. 1, </volume> <pages> pp. 10-18, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Each hexagon has one more node on each edge than the one immediately inside of it. The edge dimension, e, of the mesh is defined to be the number of nodes on one side of the outermost hexagon. It has been shown in <ref> [2] </ref> that the number of nodes in an e-dimensional H-mesh is 3e 2 3e + 1. Any node in an unwrapped H-mesh will have six oriented directions, one corresponding to each of the six links. <p> The remaining three links point in the x, y, and z directions, respectively. An H-mesh of edge dimension e can be wrapped using "C-type wrapping" <ref> [2] </ref>, which produces a homogeneous mesh. An example of a C-wrapped H-mesh of edge dimension 3 is given in Fig. 1. 3 A fi (1) algorithm is presented in [2] to give all shortest paths between any two nodes in a C-wrapped H-mesh. <p> An H-mesh of edge dimension e can be wrapped using "C-type wrapping" <ref> [2] </ref>, which produces a homogeneous mesh. An example of a C-wrapped H-mesh of edge dimension 3 is given in Fig. 1. 3 A fi (1) algorithm is presented in [2] to give all shortest paths between any two nodes in a C-wrapped H-mesh. It returns three integers, m x , m y , and m z , each of which represents the distance to be traveled in the corresponding direction.
Reference: [3] <author> E. Chow, H. S. Madan, J. C. Peterson, D. Grunwald, and D. Reed, </author> <title> "Hyperswitch network for the hypercube computer," </title> <booktitle> in Proc. of 15th Annual Int'l Symp. on Computer Architecture, </booktitle> <pages> pp. 90-99, </pages> <year> 1988. </year>
Reference-contexts: If other information must be consulted, the message must be buffered, and message delivery is delayed. We therefore restrict ourselves to the situation where each node knows only the state of its own links. Some work has already been done on fault-tolerant routing in the hypercube <ref> [1, 3, 5, 7] </ref>. These algorithms either take advantage of the specific mathematical properties of the hypercube and are therefore inapplicable to meshes, or use some form of global information, which we want to avoid.
Reference: [4] <author> P. Kermani and L. Kleinrock, </author> <title> "Virtual cut-through: A new computer communication switching technique," </title> <journal> Computer Networks, </journal> <volume> vol. 3, </volume> <pages> pp. 267-286, </pages> <year> 1979. </year>
Reference-contexts: Second is the overhead it induces. The standard routing algorithms of most systems allow routing decisions to be made by simple circuitry using only information on the message header. This allows optimizations like virtual cut-through <ref> [4] </ref>, which speed up message delivery by avoiding buffering at intermediate nodes. If other information must be consulted, the message must be buffered, and message delivery is delayed. We therefore restrict ourselves to the situation where each node knows only the state of its own links. <p> We assume the message system is based on a store-and-forward approach, which may employ techniques such as virtual cut-through <ref> [4] </ref> when possible in order to avoid the overhead of buffering the message at each individual node. Messages will be buffered at intermediate nodes if the outgoing links they wish to use are busy, and we assume each node has enough buffer space so that deadlock is not a problem.
Reference: [5] <author> C. K. Kim and D. A. Reed, </author> <title> "Adaptive packet routing in a hypercube," </title> <booktitle> in Proc. Third Conf. on Hypercube Concurrent Computers and Applications, </booktitle> <address> Los Angeles, </address> <month> January </month> <year> 1988. </year>
Reference-contexts: If other information must be consulted, the message must be buffered, and message delivery is delayed. We therefore restrict ourselves to the situation where each node knows only the state of its own links. Some work has already been done on fault-tolerant routing in the hypercube <ref> [1, 3, 5, 7] </ref>. These algorithms either take advantage of the specific mathematical properties of the hypercube and are therefore inapplicable to meshes, or use some form of global information, which we want to avoid.
Reference: [6] <author> J. G. Kuhl and S. M. Reddy, </author> <title> "Distributed fault tolerance for large multiprocessor systems," </title> <booktitle> in Proc. 7-th Annual Int'l Symp. on Computer Architecture, </booktitle> <pages> pp. 23-30, </pages> <year> 1980. </year>
Reference-contexts: An obvious way to handle fault-tolerant routing is for each node to keep track of all faults in the system. A node can be expected to know the state (failed or not) of its own links, and some algorithms are proposed in <ref> [6] </ref> to broadcast information about faulty components to all other nodes in the system. With this information messages can always be routed by shortest paths. There are two main problems with this approach.
Reference: [7] <author> A. Varma and C. S. Raghavendra, </author> <title> "Fault-tolerant routing of permutations in extra-stage networks," </title> <booktitle> in Proc. 6-th Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 54-61, </pages> <year> 1986. </year> <month> 16 </month>
Reference-contexts: If other information must be consulted, the message must be buffered, and message delivery is delayed. We therefore restrict ourselves to the situation where each node knows only the state of its own links. Some work has already been done on fault-tolerant routing in the hypercube <ref> [1, 3, 5, 7] </ref>. These algorithms either take advantage of the specific mathematical properties of the hypercube and are therefore inapplicable to meshes, or use some form of global information, which we want to avoid.
References-found: 7

