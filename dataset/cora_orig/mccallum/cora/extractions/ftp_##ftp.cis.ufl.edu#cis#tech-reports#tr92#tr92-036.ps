URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-036.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Performance Driven Graph Enhancement Problems*  
Author: Doowon Paik a and Sartaj Sahni b 
Date: 92-036  
Address: Murray Hill, NJ  Gainesville, FL 32611  
Affiliation: a AT&T Bell Laboratories,  b Computer and Information Sciences Department, University of Florida,  
Pubnum: TECHNICAL REPORT:  
Abstract: Graphs may be used to model systems in which performance issues are crucial. Cost effective performance enahancement of these systems can be accomplished by solving a graph enhancement problem on the associated graph. We define several graph enhancement problems. Some are shown to be NP-hard while others are polynomially solvable. 
Abstract-found: 1
Intro-found: 1
Reference: [CHAN90] <author> P. K. Chan, </author> <title> "Algorithms For Library-Specific Sizing Of Combinational Logic", </title> <booktitle> Proc. 27th DAC Conf., 1990 pp. </booktitle> <pages> 353-356. </pages>
Reference-contexts: Let DVUP (x, d) denote the dag vertex upgrade problem in which d (i) is the delay of vertex i and w (i) its weight. In an alternate modeling of signal flow in electronic circuits by dags <ref> [CHAN90, GHAN87, MCGE90] </ref>, vertices represent circuit modules and directed edges represent signal flow. In a simplistic model, each edge has a delay of one. A module can be upgraded by replacing it with a functionally equivalent one using a superior technology.
Reference: [GARE79] <author> M. R. Garey, and D. S. Johnson, </author> <title> "Computers and Intractability ", W. </title> <editor> H. </editor> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: We shall not discuss any of these results here as none of the properties considered in [KRIS79] apply to graphs with vertex and/or edge weights. In subsequent sections, we summarize the known results regarding the problems stated above. We shall make use of the following known NP-hard problems <ref> [GARE79] </ref>. 1. Partition Input: A set of n positive integers a i , 1 i n. Output: "Yes" iff there is a subset, I, of -1, 2, ..., n- such that i I i = 1 n 2.
Reference: [GAVR87] <author> F. Gavril, </author> <title> "Algorithms For Maximum k-colorings And k-coverings Of Transitive Graphs", </title> <journal> Networks, </journal> <volume> Vol. 17, </volume> <pages> pp. 465-470, </pages> <year> 1987. </year>
Reference-contexts: Note that if G is a dag then G + is a transitive dag. The unit delay unit weight DVUP for any d, d 1 can be solved in O (n 3 logn) time by using the O (n 3 logn) maximum k-coloring algorithm of <ref> [GAVR87] </ref> for transitive dags. Before showing how this can be done, we establish a relationship between the number of vertices of a given set X that can be on - any path of G and colorability of X in G + . <p> Note that when d = 1, a maximum d-coloring is just a maximum independent set and such a set can be found in O (ne) time for transitive closure graphs with n vertices and e edges <ref> [GAVR87] </ref>.
Reference: [GHAN87] <author> S. Ghanta, H. C. Yen, and H. C. Du, </author> <title> "Timing Analysis Algorithms For Large Designs", </title> <institution> University of Minnesota, </institution> <type> Technical Report, </type> <institution> 87-57,1987. </institution>
Reference-contexts: Let DVUP (x, d) denote the dag vertex upgrade problem in which d (i) is the delay of vertex i and w (i) its weight. In an alternate modeling of signal flow in electronic circuits by dags <ref> [CHAN90, GHAN87, MCGE90] </ref>, vertices represent circuit modules and directed edges represent signal flow. In a simplistic model, each edge has a delay of one. A module can be upgraded by replacing it with a functionally equivalent one using a superior technology.
Reference: [HORO78] <author> E. Horowitz, and S. Sahni, </author> <title> "Fundamentals of Computer Algorithms", </title> <publisher> Computer Science Press, </publisher> <address> Maryland, </address> <year> 1978. </year> - 
Reference-contexts: Let (l, c ) S (r) be the pair with least cost c. It is easy to see that the least weight vertex set W such that d (T W) d has weight c. We shall describe how to compute S (r). Using the backtrace strategy of <ref> [HORO78, cf. chapter on dynamic programming] </ref> we can compute the W that results in d (T W) d and S w (u) = c in less time than needed to compute S (r) (however, S (r) and some of the other S's computed while computing S (r) are needed for this). <p> Since S (v) contains only nondominated pairs, all pairs in S (v) have different l and c values. So, A S (v )A min - d, w where w = u = 1 n Using the technique of <ref> [HORO78] </ref>, S (v ) can be computed from the S (u)'s of its children in time O (min-d,w-*k v ). To compute S (r) we need to compute S (v) for all vertices v. <p> We shall show how to compute F (G) and hence (l , c , Y). The actual W may be obtained using a backtrace step as described in <ref> [HORO78] </ref>. 2.3.1 G Is A Chain Consider the case when G has only two vertices s and t.
Reference: [KRIS79] <author> M. Krishnamoorthy and N. Deo, </author> <title> "Node deletion NP-complete problems", </title> <journal> SIAM Jr on Computing, </journal> <volume> Vol 8, No 4, </volume> <year> 1979, </year> <pages> pp 619-625. </pages>
Reference-contexts: In [PAIK91a], Paik, Reddy, and Sahni used this problem to model the problem of upgrading circuit modules so as to control signal loss. Krishnamoorthy and Deo <ref> [KRIS79] </ref> have shown that for many properties, the vertex deletion problem is NP-hard. These properties include: resulting graph has no edges, resulting graph is a clique, each component of the resulting graph is a tree, each component of the remaining graph is planar, etc. <p> These properties include: resulting graph has no edges, resulting graph is a clique, each component of the resulting graph is a tree, each component of the remaining graph is planar, etc. We shall not discuss any of these results here as none of the properties considered in <ref> [KRIS79] </ref> apply to graphs with vertex and/or edge weights. In subsequent sections, we summarize the known results regarding the problems stated above. We shall make use of the following known NP-hard problems [GARE79]. 1. Partition Input: A set of n positive integers a i , 1 i n.
Reference: [LAWL78] <author> E. L. Lawler, </author> <title> "Sequencing Jobs To Minimize Total Weighted Completion Time subject to precedence constraints", </title> <journal> Annals of Discrete Math. </journal> <volume> 2, </volume> <year> 1978, </year> <pages> 75-90. </pages>
Reference-contexts: These were introduced in <ref> [LAWL78, MONM77, SIDN76] </ref>. The extension may be found in [PAIK91c]. 3 LinkDelay (x,d) When d = 0 and x &gt; 0, LinkDelay (x,d) can be solved in linear time.
Reference: [LEE90] <author> D. H. Lee and S. M. Reddy, </author> <title> "On Determining Scan Flip-flops In Partial-scan Designs", </title> <booktitle> Proc. of International Conference on Computer Aided Design, </booktitle> <month> November </month> <year> 1990. </year>
Reference: [MCGE90] <author> P. McGeer, R. Brayton, R. Rudell, and A. Sangiovanni-Vincentelli, </author> <title> "Extended Stuck-fault Testability For Combinational Networks", </title> <booktitle> Proc. of the 6th MIT Conference on Advanced Research in VLSI, </booktitle> <publisher> MIT Press, </publisher> <month> April </month> <year> 1990. </year>
Reference-contexts: Let DVUP (x, d) denote the dag vertex upgrade problem in which d (i) is the delay of vertex i and w (i) its weight. In an alternate modeling of signal flow in electronic circuits by dags <ref> [CHAN90, GHAN87, MCGE90] </ref>, vertices represent circuit modules and directed edges represent signal flow. In a simplistic model, each edge has a delay of one. A module can be upgraded by replacing it with a functionally equivalent one using a superior technology.
Reference: [MONM77] <author> C. L. Monma and J. B. Sidney, </author> <title> "A General Algorithm For Optimal Job Sequencing With Series-Parallel Constraints", </title> <type> Technical Report No. 347, </type> <institution> School of Operations Research and Industrial Engineering, Cornell University, </institution> <address> Ithaca, N.Y., </address> <month> July </month> <year> 1977. </year>
Reference-contexts: These were introduced in <ref> [LAWL78, MONM77, SIDN76] </ref>. The extension may be found in [PAIK91c]. 3 LinkDelay (x,d) When d = 0 and x &gt; 0, LinkDelay (x,d) can be solved in linear time.
Reference: [PADH92] <author> V. Padhye, </author> <title> "Upgrading vertices in trees and series-parallel graphs to bound link delays," </title> <institution> University of Florida, </institution> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: So, G has an upgrading vertex set of size k iff G has a vertex cover of size k. <ref> [PADH92] </ref> considers the link delay problem for trees and series-parallel graphs. For both cases, she develops a linear time algorithm. The case for trees is easily solved using a tree traversal algorithm. <p> The correctness of the algorithm is easily established and using appropriate data structures, it can be implemented to have complexity O (n) where n is the number of vertices in the tree. For the case of series-parallel graphs, <ref> [PADH92] </ref> proposes a dynamic programming algorithm which uses the series-parallel decomposition of the graph.
Reference: [PAIK90] <author> D. Paik, S. Reddy, and S. Sahni, </author> <title> "Vertex Splitting In Dags And Applications To Partial Scan Designs And Lossy Circuits", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <institution> 90-34,1990. </institution>
Reference-contexts: Each of the problems stated above is a simplified version of a more realistic problem. The more realistic problem has different costs associated with the upgrade of different vertices and the upgrade factor also varies from vertex to vertex. - Paik, Reddy, and Sahni <ref> [PAIK90, 93] </ref> model the optimal placement of scan registers in a partial scan design as well as the placement of signal boosters in lossy circuits as a vertex splitting problem in a dag. <p> When d = 1, the unit weight DVSP can be solved in linear time as every vertex that is not a source or sink has to be split. However, for every d 2, the problem is NP-hard <ref> [PAIK90] </ref>. To show this, for each instance F of 3SAT, we construct an instance G F of the unit weight DVSP such that from the size of the solution to G F we can determine, in polynomial time, the answer to the 3SAT problem for F. <p> As a result, the k'th literal of clause C j is true. Hence, b 1 , ... b n results in each clause having at least one true literal and F has value 1. Theorem 9: DVSP is NP-hard for unit weight multistage graphs when d 4. Proof: See <ref> [PAIK90] </ref>. - _______________________________________________________________________________ C 3 x 4 x 2 _______________________________________________________________________________ _ _ _ _ _ 7.2 Polynomially Solvable Cases When the wdag G is a rooted tree the DVSP problem can be solved in linear time by performing a pos-torder [HORO90] traversal of the tree. <p> For such graphs dynamic programming can be used to obtain a quadratic time algorithm [PAIK91a]. For general dags, a backtracking algorithm has been formulated in <ref> [PAIK90] </ref> and heuristics have been developed and evaluated in [PAIK90, 93]. 8 DVDP Let G be a wdag as in the previous section and let X be a subset of the vertices of G. <p> For such graphs dynamic programming can be used to obtain a quadratic time algorithm [PAIK91a]. For general dags, a backtracking algorithm has been formulated in [PAIK90] and heuristics have been developed and evaluated in <ref> [PAIK90, 93] </ref>. 8 DVDP Let G be a wdag as in the previous section and let X be a subset of the vertices of G. Let G-X be the wdag obtained when the vertices in X are deleted from the wdag G.
Reference: [PAIK91a] <author> D. Paik, S. Reddy, and S. Sahni, </author> <title> "Deleting Verticies To Bound Path Lengths", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <pages> 91-4, </pages> <year> 1991. </year>
Reference-contexts: The dag vertex splitting problem is denoted DVSP (d). The dag vertex deletion problem, DVDP (d), is concerned with deleting the fewest number of vertices from an edge weighted dag so that the resulting dag has no path whose length exceeds d. In <ref> [PAIK91a] </ref>, Paik, Reddy, and Sahni used this problem to model the problem of upgrading circuit modules so as to control signal loss. Krishnamoorthy and Deo [KRIS79] have shown that for many properties, the vertex deletion problem is NP-hard. <p> For such graphs dynamic programming can be used to obtain a quadratic time algorithm <ref> [PAIK91a] </ref>. For general dags, a backtracking algorithm has been formulated in [PAIK90] and heuristics have been developed and evaluated in [PAIK90, 93]. 8 DVDP Let G be a wdag as in the previous section and let X be a subset of the vertices of G. <p> Note that the source and sink vertices of a wdag never need to be split. 8.1 Complexity Results Paik, Reddy, and Sahni <ref> [PAIK91a] </ref> have shown that the DVDP problem is NP-hard for unit weight dags with d 0 as well as for unit weight multistage graphs with d 2. We shall present only the proof for the case of unit weight dags and d = 0. The interested reader is referred to [PAIK91a] <p> <ref> [PAIK91a] </ref> have shown that the DVDP problem is NP-hard for unit weight dags with d 0 as well as for unit weight multistage graphs with d 2. We shall present only the proof for the case of unit weight dags and d = 0. The interested reader is referred to [PAIK91a] for the remaining proofs. Theorem 10: Unit weight DVDP is NP-hard for d = 0. Proof: Let G be an instance of unit weight DVDP and let X be such that d (G - X) = 0. <p> The algorithms are similar to those for the corresponding DVSP cases and can be found in <ref> [PAIK91a] </ref>.
Reference: [PAIK91b] <author> D. Paik, and S. Sahni, </author> <title> "Upgrading Circuit Modules To Improve Performance", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <year> 1991. </year>
Reference-contexts: Let X be a subset of the vertices in V. G has no path with &gt; d vertices of X iff X is d colorable in G + . Proof: See <ref> [PAIK91b] </ref>. From the preceding theorem, it follows that if X is a maximum d-coloring of G + , V-X is the smallest set such that d (G (V -X)) d. <p> In this section we show that the nonunit delay unit weight DVUP can be solved in O (n 3 ) time when d. The problem is NP-hard for d 2 (see <ref> [PAIK91b] </ref> for a proof). Let X be a minimum set of vertices such that d (G X) 1. Clearly, every v V with d (v) &gt; 1 must be in X. <p> So, the overall complexity of our algorithm to compute X is O (n 3 ). Theorem 2: Non unit delay unit weight DVUP is NP-hard for every d, d 2. Proof: See <ref> [PAIK91b] </ref>. Since the construction of [PAIK91b] generates a multistage graph, DVUP is NP-hard even when the dags are restricted to be multistage graphs. - 2.2 Trees 2.2.1 Trees With Unit Weight And Unit Delay When the dag is a rooted tree T such that w (v ) = d (v) = <p> So, the overall complexity of our algorithm to compute X is O (n 3 ). Theorem 2: Non unit delay unit weight DVUP is NP-hard for every d, d 2. Proof: See <ref> [PAIK91b] </ref>. Since the construction of [PAIK91b] generates a multistage graph, DVUP is NP-hard even when the dags are restricted to be multistage graphs. - 2.2 Trees 2.2.1 Trees With Unit Weight And Unit Delay When the dag is a rooted tree T such that w (v ) = d (v) = 1 for every vertex, the
Reference: [PAIK91c] <author> D. Paik, and S. Sahni, </author> <title> "Upgrading Vertices In Trees, Series-Parallel Digraphs And General Series Parallel Digraphs", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <year> 1991. </year>
Reference-contexts: 2 ) = D (l 1 ,Y 1 ,G 1 ) D (l 2 , Y 2 , G 2 ) u D (l,Y, G 1 G 2 ) u D (l 1 ,Y 1 ,G 1 ) u D (l 2 ,Y 2 , G 2 ) Proof: See <ref> [PAIK91c] </ref>. Lemma 1 suggests the following approach to obtain F (G 1 G 2 ) from F (G 1 ) and F (G 2 ): Step1: Construct a set Z of triples such that F (G 1 G 2 ) Z. <p> These were introduced in [LAWL78, MONM77, SIDN76]. The extension may be found in <ref> [PAIK91c] </ref>. 3 LinkDelay (x,d) When d = 0 and x &gt; 0, LinkDelay (x,d) can be solved in linear time. In case G has an edge with delay &gt; 0, then the link costs cannot be made 0 by upgrading any subset of the vertices.
Reference: [PAIK91d] <author> D. Paik, and S. Sahni, </author> <title> "NP-hard Network Upgrading Problems", </title> <institution> University of Florida, </institution> <type> Technical Report, </type> <year> 1991. </year>
Reference-contexts: Since signals can travel along any of the paths of the dag, the performance of the circuit is governed by the length of the longest path in the dag. We wish to meet certain performance requirements by upgrading the fewest possible number of vertices. This is stated formally below <ref> [PAIK91d] </ref>: LongestPath (x,d) Given a dag G = (V,E) with positive edge delays upgrade the smallest number of vertices so that the longest path in the upgraded graph has delay d . <p> The total delay along the communication path is the sum of the delays on each of the edges on the path. With respect to this undirected graph model, the following problems may be defined <ref> [PAIK91d] </ref>: 1. LinkDelay (x,d) In this problem, it is possible to upgrade each of the vertices in the undirected graph. If vertex v is upgraded, then the delay of each edge incident to v reduces by a factor x, 0 x &lt; 1 . <p> If G has no edge with delay &gt; 0, then no vertex needs to be upgraded. For all other combinations of d and x, LinkDelay (x,d) is NP-hard. Theorem 4: <ref> [PAIK91d] </ref> LinkDelay (x, d) is NP-hard whenever d 0 or x = 0. Proof: Let G = (V, E) be an instance of the vertex cover problem. We obtain from G, an instance G of LinkDelay (x,d) by associating a delay with each edge of G. <p> Theorem 5 : <ref> [PAIK91d] </ref> ShortestPath (x,d) is NP-hard whenever x = 0 or d &gt; 0. Proof: We shall prove this here only for the case x = d = 0. Let X, q, C, and m be as in the definition of X3C. <p> For (b), assume that S . If N contains a vertex v that is not adjacent to at least one satellite vertex then v is at least distance two from every satellite vertex s S. Hence, CommTime (G) &gt; 1. Theorem 6: <ref> [PAIK91d] </ref> Satellite ( d) is NP-hard for d 1. Proof: We shall only present the proof for the case d = 1. The complete proof can be found in [PAIK91d]. The proof uses the max clique problem. Let G be a connected undirected graph with n vertices. <p> Hence, CommTime (G) &gt; 1. Theorem 6: <ref> [PAIK91d] </ref> Satellite ( d) is NP-hard for d 1. Proof: We shall only present the proof for the case d = 1. The complete proof can be found in [PAIK91d]. The proof uses the max clique problem. Let G be a connected undirected graph with n vertices. Let G be the graph obtained by adding to G n edges of the type (i, i) where i is a vertex of G and i is a new vertex (Figure 2). <p> One may verify that for any k, k n, G has an upgrade set of size k iff G has one of size m + k. Hence, LongestPath (x,d) is NP-hard for d &gt; 0. Theorem 7: <ref> [PAIK91d] </ref> - _______________________________________________________________________________ n chains q -1 vertices s r _______________________________________________________________________________ 1/x n chains sr _______________________________________________________________________________ (a) Longest Path (x,d) is NP-hard when x = 0 and d = 0 and also when x 0 and d &gt; 0. (b) Longest Path (x,d) is polynomially solvable when x &gt; 0 and
Reference: [PAIK93] <author> D. Paik, S. Reddy, and S. Sahni, </author> <title> "Heuristics for the placement of flip-flops in partial scan designs and the placement of signal boosters in lossy circuits", </title> <booktitle> Proc. VLSI Design '93, IEEE, </booktitle> <year> 1993. </year>
Reference: [SIDN76] <author> J. B. Sidney, </author> <title> "The Two Machine Flow Line Problem With Series-Parallel Precedence Relations", </title> <type> Working paper 76-19, </type> <institution> Faculty of Management Science, University of Ottawa, </institution> <month> November </month> <year> 1976. </year>
Reference-contexts: These were introduced in <ref> [LAWL78, MONM77, SIDN76] </ref>. The extension may be found in [PAIK91c]. 3 LinkDelay (x,d) When d = 0 and x &gt; 0, LinkDelay (x,d) can be solved in linear time.
Reference: [VALD79] <author> J. Valders, R. E. Tarjan, and E. L. Lawler, </author> <title> "The recognition of Series Parallel digraphs", </title> <journal> SIAM J. Comput., </journal> <volume> 11 (1982), </volume> <pages> pp. 298-313. </pages> - 
Reference-contexts: For compatible triples, (l, c, Y) is obtained as below: l := max -l 1 , l 2 - u Y 1 Y := Y 1 Next, (l, c, Y) is added to Z. 2.3.3 Complexity The series-parallel decomposition of an SPDAG can be determined in O (n) time <ref> [VALD79] </ref>.
References-found: 19

