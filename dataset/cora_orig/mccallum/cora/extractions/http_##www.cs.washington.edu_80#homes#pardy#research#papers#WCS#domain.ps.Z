URL: http://www.cs.washington.edu:80/homes/pardy/research/papers/WCS/domain.ps.Z
Refering-URL: http://www.cs.washington.edu:80/homes/pardy/research/papers/index.html
Root-URL: http://www.cs.washington.edu
Title: Safe Dynamic Linking in an Extensible Operating System  
Author: Emin Gun Sirer Marc E. Fiucynski Przemys law Pardyak Brian N. Bershad 
Date: February 1, 1996  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract-found: 0
Intro-found: 1
Reference: [Bro94] <author> Kraig Brockschmidt. </author> <title> Inside OLE 2. </title> <publisher> Microsoft Press, </publisher> <year> 1994. </year>
Reference-contexts: Once the caller has been linked, either statically or dynamically, the interface becomes legitimately nameable by the caller and can be encapsulated within a domain with which it can be passed to others. 3.2 Why not objects? Object-based systems <ref> [WLH81, LCJS87, JLHB88, Bro94] </ref> offer a model in which a protected object instance acts as an unforgeable capability that governs access to the methods of that object. In effect, the object reference enables an implicit form of call-time authorization.
Reference: [BSP + 95] <author> Brian N. Bershad, Stefan Savage, Przemyslaw Pardyak, Emin G n Sirer, Marc Fiuczynski, David Becker, Susan Eggers, and Craig Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: For example, a program using unsafe memory operations could force a call to a system-private function (such as HALT) by forging a pointer to a function through a cast operation. Clearly, such casts must be disallowed if dynamically linked code is to execute safely. Several projects, including our own <ref> [BSP + 95] </ref>, are now exploring the use of kernel extension technologies which preclude unsafe pointer operations [WLAG93, Luc95, VGA94, EKJ95]. With SPIN, applications define system extensions using the well-defined safe subset of Modula-3 [Nel91].
Reference: [EKJ95] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole Jr. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Clearly, such casts must be disallowed if dynamically linked code is to execute safely. Several projects, including our own [BSP + 95], are now exploring the use of kernel extension technologies which preclude unsafe pointer operations <ref> [WLAG93, Luc95, VGA94, EKJ95] </ref>. With SPIN, applications define system extensions using the well-defined safe subset of Modula-3 [Nel91]. Once an infrastructure for the safe execution of code is in place, it is necessary to consider the machinery for naming and linking that safe code into a running system.
Reference: [FMP + 95] <author> Michael J. Feeley, William E. Morgan, Frederic P. Pighin, Anna R. Karlin, Henry M. Levy, and Chandramohan A. Thekkath. </author> <title> Implementing Global Memory Management in a Workstation Cluster. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Consequently, trust relationships could be accurately and efficiently expressed through the user/kernel boundary. Operating system requirements are changing, though, and thereby changing the structure of systems. Systems are now being used to support a variety of applications, such as multimedia [Rad93], multiprocessing [WW94], and distributed memory management <ref> [FMP + 95] </ref> that were once considered "fringe" services. In response to these changing demands, systems are now being designed to support application-specific extensions that change the behavior, and commonly the interfaces, of the operating system.
Reference: [GDFR90] <author> David Golub, Randall Dean, Alessandro Forin, and Richard Rashid. </author> <title> Unix as an Application Program. </title> <booktitle> In Proceedings of the 1990 Summer USENIX Conference, </booktitle> <pages> pages 87-95, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: For example, our UNIX server is partitioned into a kernel component that provides a thread and virtual memory interface similar to the one found in the Mach kernel, and a user-level component with a structure similar to the CMU's UNIX server <ref> [GDFR90] </ref>. In the rest of this paper we describe the design and interface for our dynamic linker. We describe the interface first in terms of the linker's primitive operations used to manipulate domains at runtime. We then describe a higher level configuration interface for system and application programmers.
Reference: [HFC + 96] <author> W.C. Hsieh, M.E. Fiuczynsko, C.Garrett, S.Savage, D.Becker, and B.N. Bershad. </author> <title> Language Support for Extensible Systems. </title> <booktitle> In The First Workshop on Compiler Support for Systems Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: PROCEDURE Restore (s: T)... BEGIN d := Domain.CreateFromInterface (INTERFACE_UNIT (SPL))); ... END SPL. The builtin function INTERFACE UNIT describes the specific language-level interface named in the argument <ref> [HFC + 96] </ref>. It returns a valid value only if the caller has already been linked against an implementation of the named interface. Until a domain has been completely resolved (that is, all symbols have been assigned values by the linker), it is not eligible for execution.
Reference: [JLHB88] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Once the caller has been linked, either statically or dynamically, the interface becomes legitimately nameable by the caller and can be encapsulated within a domain with which it can be passed to others. 3.2 Why not objects? Object-based systems <ref> [WLH81, LCJS87, JLHB88, Bro94] </ref> offer a model in which a protected object instance acts as an unforgeable capability that governs access to the methods of that object. In effect, the object reference enables an implicit form of call-time authorization.
Reference: [LCJS87] <author> Barbara Liskov, Dorothy Curtis, Paul Johnson, and Robert Scheifler. </author> <title> Implementation of argus. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 111-122, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Once the caller has been linked, either statically or dynamically, the interface becomes legitimately nameable by the caller and can be encapsulated within a domain with which it can be passed to others. 3.2 Why not objects? Object-based systems <ref> [WLH81, LCJS87, JLHB88, Bro94] </ref> offer a model in which a protected object instance acts as an unforgeable capability that governs access to the methods of that object. In effect, the object reference enables an implicit form of call-time authorization.
Reference: [Luc95] <author> Steve Lucco. </author> <note> The Bridge Web Page. Technical Report http://www.cs.cmu.edu/afs/cs.cmu.edu/project/sfi/www/top.html, Carnegie Mellon University, </note> <year> 1995. </year>
Reference-contexts: Clearly, such casts must be disallowed if dynamically linked code is to execute safely. Several projects, including our own [BSP + 95], are now exploring the use of kernel extension technologies which preclude unsafe pointer operations <ref> [WLAG93, Luc95, VGA94, EKJ95] </ref>. With SPIN, applications define system extensions using the well-defined safe subset of Modula-3 [Nel91]. Once an infrastructure for the safe execution of code is in place, it is necessary to consider the machinery for naming and linking that safe code into a running system.
Reference: [MGH + 94] <author> J. Mitchell, J. Gibbons, G. Hamilton, P. Kessler, Y. Khalidi, P.Kougiouris, P. Madany, M. Nelson, M. Powell, and S. Radia. </author> <title> An overview of the spring system. </title> <booktitle> In Proceedings of Compcon Spring 1994, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: We believe that the simple mechanisms we describe for authorization could easily be provided within FLEX. The Spring system <ref> [MGH + 94] </ref> includes a versatile linker that supports sharing between applications through cross address space linking.
Reference: [Nel91] <author> Greg Nelson, </author> <title> editor. System Programming in Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Several projects, including our own [BSP + 95], are now exploring the use of kernel extension technologies which preclude unsafe pointer operations [WLAG93, Luc95, VGA94, EKJ95]. With SPIN, applications define system extensions using the well-defined safe subset of Modula-3 <ref> [Nel91] </ref>. Once an infrastructure for the safe execution of code is in place, it is necessary to consider the machinery for naming and linking that safe code into a running system.
Reference: [OBLM93] <author> Doug Orr, John Bonn, Jay Lepreau, and Robert Mecklenburg. </author> <title> Fast and Flexible Shared Libraries. </title> <booktitle> In Proceedings of the 1993 Winter USENIX Conference, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: Consequently, the right to install code into a running kernel is either limited, or the system has poor stability in the presence of extensions as is the case with either the Macintosh operating system, or Windows. The FLEX project at the University of Utah <ref> [OBLM93] </ref> provides a set of rich linking facilities based on primitives similar to those described in this paper (Create, Resolve, Combine). That system is concerned with the flexible specification of link-time constraints using a specialized linking language for composing object files.
Reference: [Rad93] <author> Steven Radecki. </author> <title> Multimedia With Quicktime. </title> <publisher> Academic Press, </publisher> <year> 1993. </year> <note> ISBN 0-12-574750-0. </note>
Reference-contexts: Consequently, trust relationships could be accurately and efficiently expressed through the user/kernel boundary. Operating system requirements are changing, though, and thereby changing the structure of systems. Systems are now being used to support a variety of applications, such as multimedia <ref> [Rad93] </ref>, multiprocessing [WW94], and distributed memory management [FMP + 95] that were once considered "fringe" services. In response to these changing demands, systems are now being designed to support application-specific extensions that change the behavior, and commonly the interfaces, of the operating system.
Reference: [VGA94] <author> Amin M. Vahdat, Douglas P. Ghormley, and Thomas E. Anderson. </author> <title> Efficient, Portable, and Robust Extension of Operating System Functionality. </title> <type> Technical Report CS-94-842, </type> <institution> University of California at Berkeley, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Clearly, such casts must be disallowed if dynamically linked code is to execute safely. Several projects, including our own [BSP + 95], are now exploring the use of kernel extension technologies which preclude unsafe pointer operations <ref> [WLAG93, Luc95, VGA94, EKJ95] </ref>. With SPIN, applications define system extensions using the well-defined safe subset of Modula-3 [Nel91]. Once an infrastructure for the safe execution of code is in place, it is necessary to consider the machinery for naming and linking that safe code into a running system.
Reference: [WLAG93] <author> Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. </author> <title> Efficient Software-Based Fault Isolation. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 203-216, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Clearly, such casts must be disallowed if dynamically linked code is to execute safely. Several projects, including our own [BSP + 95], are now exploring the use of kernel extension technologies which preclude unsafe pointer operations <ref> [WLAG93, Luc95, VGA94, EKJ95] </ref>. With SPIN, applications define system extensions using the well-defined safe subset of Modula-3 [Nel91]. Once an infrastructure for the safe execution of code is in place, it is necessary to consider the machinery for naming and linking that safe code into a running system.
Reference: [WLH81] <author> William A. Wulf, Roy Levin, and Samuel P. Harbison. Hydra/C.mmp: </author> <title> An Experimental Computer System. </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: Once the caller has been linked, either statically or dynamically, the interface becomes legitimately nameable by the caller and can be encapsulated within a domain with which it can be passed to others. 3.2 Why not objects? Object-based systems <ref> [WLH81, LCJS87, JLHB88, Bro94] </ref> offer a model in which a protected object instance acts as an unforgeable capability that governs access to the methods of that object. In effect, the object reference enables an implicit form of call-time authorization.
Reference: [WW94] <author> Carl A. Waldspurger and William E. Weihl. </author> <title> Lottery Scheduling: Flexible Proportional-Share Resource Management. </title> <booktitle> In Proceedings of the First USENIX Symposium on Operating Systems Design and Implementation (OSDI), </booktitle> <pages> pages 1-11, </pages> <address> Monterey, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Consequently, trust relationships could be accurately and efficiently expressed through the user/kernel boundary. Operating system requirements are changing, though, and thereby changing the structure of systems. Systems are now being used to support a variety of applications, such as multimedia [Rad93], multiprocessing <ref> [WW94] </ref>, and distributed memory management [FMP + 95] that were once considered "fringe" services. In response to these changing demands, systems are now being designed to support application-specific extensions that change the behavior, and commonly the interfaces, of the operating system.
References-found: 17

