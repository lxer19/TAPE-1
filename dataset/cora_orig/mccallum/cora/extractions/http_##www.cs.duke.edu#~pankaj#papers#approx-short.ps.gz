URL: http://www.cs.duke.edu/~pankaj/papers/approx-short.ps.gz
Refering-URL: http://www.cs.duke.edu/CGC/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: pankaj@cs.duke.edu  sariel@math.tau.ac.il  sharir@math.tau.ac.il  krv@cs.duke.edu  
Phone: 3  4  5  
Title: CS-1996-12 Approximating Shortest Paths on a Convex Polytope in Three Dimensions 1  
Author: Pankaj K. Agarwal Sariel Har-Peled Micha Sharir Kasturi R. Varadarajan 
Note: 1 Work by the first and the fourth authors has been supported by National Science Foundation Grant CCR-93-01259, by an Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by an NYI award, and by matching funds from Xerox Corporation. Work by the first three authors has been supported by a grant from the U.S.-Israeli Binational Science Foundation. Work by Micha Sharir has also been supported by National Science Foundation Grants CCR-94-24398 and CCR-93-11127, by a Max Planck Research Award, and by a grant from the G.I.F. the German Israeli Foundation for Scientific Research and Development. 2  
Date: August 15, 1996  
Address: 27708-0129  University,  University,  New York University,  University,  
Affiliation: Department of Computer Science Duke University Durham, North Carolina  Department of Computer Science, Duke  School of Mathematical Sciences, Tel Aviv  School of Mathematical Sciences, Tel Aviv University, and Courant Institute of Mathematical Sciences,  Department of Computer Science, Duke  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Baltsan and M. Sharir, </author> <title> On shortest paths between two convex polyhedra, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 35 (1988), </volume> <pages> 267-287. </pages>
Reference: [2] <author> J. Canny and J. H. Reif, </author> <title> New lower bound techniques for robot motion planning problems, </title> <booktitle> Proc. 28th Annu. IEEE Symp. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1987, </year> <pages> 49-60. </pages>
Reference-contexts: This problem has received considerable attention in computational geometry. It was shown to be NP-hard by Canny and Reif <ref> [2] </ref>, and the fastest available algorithms for this problem run in time that is exponential in the total number of obstacle vertices (which we denote by n) [16, 17].
Reference: [3] <author> J. Chen and Y. Han, </author> <title> Shortest paths on a polyhedron, </title> <booktitle> Proc. 6th Annu. ACM Symp. </booktitle> <institution> Comput. Geom., </institution> <year> 1990, </year> <pages> 360-369. </pages>
Reference-contexts: Mount et al. [11] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han <ref> [3] </ref> gave another algorithm with an improved running time of O (n 2 ). It is a rather long-standing and intriguing open problem whether the shortest path on a convex polytope can be computed in subquadratic time. <p> Compute Q (r) " H + s " H + Abusing notation, let Q (r) now denote this new polytope. Note that s; t 2 @Q (r). 4. Compute a shortest path between s and t on @Q (r), using the algorithm of Chen and Han <ref> [3] </ref>. If we are interested only in computing an approximate value of d P (s; t), we return jj.
Reference: [4] <author> J. Choi, J. Sellen, and C. K. Yap, </author> <title> Approximate Euclidean shortest paths in 3-space, </title> <booktitle> Proc. 10th Annu. ACM Symp. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> 41-48. 14 </pages>
Reference-contexts: A rigorous analysis of Papadimitriou's algorithm was recently given by Choi et al. <ref> [4] </ref>. A different approach was taken by Clarkson [5], whose algorithm computes an "-approximate shortest path in roughly O (n 2 log O (1) n=" 4 ) time (the complexity of Clarkson's algorithm depends also on an additional parameter).
Reference: [5] <author> K.L. Clarkson, </author> <title> Approximation algorithms for shortest path motion planning, </title> <booktitle> Proc. 19th ACM Symp. Theory Comput., </booktitle> <year> 1987, </year> <pages> 56-65. </pages>
Reference-contexts: A rigorous analysis of Papadimitriou's algorithm was recently given by Choi et al. [4]. A different approach was taken by Clarkson <ref> [5] </ref>, whose algorithm computes an "-approximate shortest path in roughly O (n 2 log O (1) n=" 4 ) time (the complexity of Clarkson's algorithm depends also on an additional parameter). <p> They present a simple algorithm that runs in O (n) time, and computes a path whose length is at most 2d P (s; t). Their method does not seem to extend to yield better approximation factors. As mentioned above, the general approximation algorithms <ref> [5, 12] </ref> have running times worse than quadratic.
Reference: [6] <author> D. Dobkin and D. Kirkpatrick, </author> <title> A linear algorithm for determining the separation of convex polyhedra, </title> <editor> J. </editor> <booktitle> Algorithms 6 (1985), </booktitle> <pages> 381-392. </pages>
Reference-contexts: Next, we construct, in O (n) time, the Dobkin-Kirkpatrick hierarchical decomposition <ref> [6, 7] </ref> of Q, so that the closest point in Q to any query point can be computed in O (log n) time. <p> The first step of our algorithm applies this procedure and obtains these crude approximations. Next we compute, in O (n) time, the Dobkin-Kirkpatrick hierarchical decomposition of the polytope P <ref> [6, 7] </ref>, using which we can compute the closest point in P to a query point in O (log n) time. To compute an approximate shortest path from s to a vertex v of P , we use the following slight variation of the algorithm Approximate-Path.
Reference: [7] <author> D. Dobkin and D. Kirkpatrick, </author> <title> Determining the separation of preprocessed polyhedra | A unified approach, </title> <booktitle> Proc. 17th Internat. Colloq. Automata Lang. Program., </booktitle> <year> 1990, </year> <pages> 400-413. </pages>
Reference-contexts: Next, we construct, in O (n) time, the Dobkin-Kirkpatrick hierarchical decomposition <ref> [6, 7] </ref> of Q, so that the closest point in Q to any query point can be computed in O (log n) time. <p> The first step of our algorithm applies this procedure and obtains these crude approximations. Next we compute, in O (n) time, the Dobkin-Kirkpatrick hierarchical decomposition of the polytope P <ref> [6, 7] </ref>, using which we can compute the closest point in P to a query point in O (log n) time. To compute an approximate shortest path from s to a vertex v of P , we use the following slight variation of the algorithm Approximate-Path. <p> If p 2 B (s; 2), we are done. Otherwise, the closest point to ~ in Q lies on the boundary of B (s; 2). More precisely, as is easily checked, this point lies on a face of the box B (s; 2). Dobkin and Kirkpatrick <ref> [7] </ref> have shown that, for a query plane h and a query point ~, the point in h " P closest to ~ can be computed in O (log n) time, using the hierarchical decomposition of P .
Reference: [8] <author> R. M. Dudley, </author> <title> Metric entropy of some classes of sets with differentiable boundaries, </title> <journal> J. Approx. Theory 10 (1974), </journal> <pages> 227-236. </pages>
Reference-contexts: (r), with O (1=" 1:5 ) vertices, that lies between Q and Q r (i.e., Q Q (r) Q r ), and such that s; t 2 @Q (r). (The existence of such a polytope Q (r) with only O (1=" 1:5 ) vertices follows from a result of Dudley <ref> [8] </ref>.) We now compute an exact shortest path along @Q (r) between s and t. A main technical contribution of this paper is to prove that the length of is at most (1 + ")d P (s; t). <p> In this section, we present an algorithm to compute a convex polytope Q (), with O (1=) vertices, such that Q Q () Q . The algorithm is a straightforward implementation of the constructive proof of Dudley <ref> [8] </ref>, which asserts the existence of a Q () with O (1=) vertices. We first outline Dudley's proof, and then describe an efficient implementation of his scheme. Let C IR 3 be a convex set. <p> We let P (S) denote the intersection of all the halfspaces corresponding to elements of S, i.e., P (S) = (p; p )2S H + (p; p ). Lemma 3.1 (Dudley <ref> [8] </ref>) Let C be a convex body in IR 3 , and let A be a ffi-dense set on C. Then P (A) C 2ffi 2 . Hence, C can be approximated by computing a `small' dense set on C. <p> Then P (A) C 2ffi 2 . Hence, C can be approximated by computing a `small' dense set on C. The existence of such a set is guaranteed by the following lemma: Lemma 3.2 (Dudley <ref> [8] </ref>) Let C be a convex set in IR 3 that is contained in a unit ball. Then there exists a ffi-dense set A on C of size O (1=ffi 2 ). Proof: We only give a sketch of the proof, and refer to [8] for full details. <p> the following lemma: Lemma 3.2 (Dudley <ref> [8] </ref>) Let C be a convex set in IR 3 that is contained in a unit ball. Then there exists a ffi-dense set A on C of size O (1=ffi 2 ). Proof: We only give a sketch of the proof, and refer to [8] for full details. Let B be a ball of radius at most 2, so that for all x 2 C and for any jyj 1, one has x + y 2 B. Clearly, C B. <p> Let A = fn (p) j p 2 A 0 g. Dudley shows (see <ref> [8] </ref>) that A is a 2ffi-dense set on C, and this implies the theorem. Theorem 3.3 Let Q be a convex polytope in R 3 contained in a unit ball, let n denote the number of its vertices, and let &gt; 0 be a real parameter.
Reference: [9] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1987. </year>
Reference: [10] <author> J. Hershberger and S. Suri, </author> <title> Practical methods for approximating shortest paths on a convex polytope in IR 3 , Proc. </title> <booktitle> 6th ACM-SIAM Symp. Discr. </booktitle> <address> Algo., </address> <year> 1995, </year> <pages> 447-456. </pages>
Reference-contexts: We want to compute a path on the surface of P between s and t whose length is at most (1 + ")d P (s; t). A recent result in this direction is by Hershberger and Suri <ref> [10] </ref>. They present a simple algorithm that runs in O (n) time, and computes a path whose length is at most 2d P (s; t). Their method does not seem to extend to yield better approximation factors. <p> this paper we present another, relatively simple algorithm that computes an "- approximate shortest path (i.e., a path whose length is at most (1 + ")d P (s; t)), for any 1 prescribed 0 &lt; " 1. (There is no point of specifying " &gt; 1, since the algorithm of <ref> [10] </ref> already solves the problem optimally for " = 1.) The running time of the algorithm is O (n log 1=" + 1=" 3 ). The algorithm follows from a sequence of easy but technical lemmas, so we begin with an informal description of our approach. <p> The algorithm follows from a sequence of easy but technical lemmas, so we begin with an informal description of our approach. We first estimate the length d = d P (s; t), using the approximation algorithm described in <ref> [10] </ref>. <p> For l &gt; 0, let B (s; l) be the cube of side 2l centered at s, i.e., B (s; l) = p fi o Algorithm Approximate-Path 1. Compute a value such that d P (s; t) 2d P (s; t), using the algorithm of Hershberger and Suri <ref> [10] </ref>. Compute Q = P " B (s; 2). 2. Set r = " 3=2 =440. Using the scheme described in Section 3, compute a polytope Q (r) such that Q Q (r) Q r . 3. Let H + s (resp. <p> Lemma 4.2 The running time of the algorithm Approximate-Path is O (n+1=" 3 ), where n is the number of faces of P . Proof: Hershberger and Suri's algorithm <ref> [10] </ref> runs in O (n) time. The polytope Q can be calculated in linear time. By Theorem 3.3, Q (r) can be computed in O (n + (1=" 1:5 ) log 1=") time. <p> That is, for each vertex v of P , the algorithm computes a real value v such that d P (s; v) v (1 + ")d P (s; v). Hershberger and Suri <ref> [10] </ref> present another algorithm that runs in O (n log n) time and computes crude approximations of the shortest path distances from s to all the vertices of P ; for each vertex v, the distance computed is between d P (s; v) and about 2:4d P (s; v).
Reference: [11] <author> J.S.B. Mitchell, D.M. Mount, and C.H. Papadimitriou, </author> <title> The discrete geodesic problem, </title> <journal> SIAM J. Comput. </journal> <volume> 16 (1987), </volume> <pages> 647-668. </pages>
Reference-contexts: Sharir and Schorr [18] gave an O (n 3 log n) algorithm for this problem, exploiting the property that a shortest path on a polyhedron unfolds into a straight line. Mount et al. <ref> [11] </ref> improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well. Chen and Han [3] gave another algorithm with an improved running time of O (n 2 ).
Reference: [12] <author> C.H. Papadimitriou, </author> <title> An algorithm for shortest-path motion in three dimensions, </title> <journal> Inform. Process. Lett. </journal> <volume> 20 (1985), </volume> <pages> 259-263. </pages>
Reference-contexts: Approximation algorithms for the three-dimensional shortest path problem were first studied by Papadimitriou <ref> [12] </ref>, who gave an O (n 4 (L + log (n=")) 2 =" 2 ) time algorithm for computing an "-approximate shortest path, where L is the number of bits of precision in the model of computation. <p> They present a simple algorithm that runs in O (n) time, and computes a path whose length is at most 2d P (s; t). Their method does not seem to extend to yield better approximation factors. As mentioned above, the general approximation algorithms <ref> [5, 12] </ref> have running times worse than quadratic.
Reference: [13] <author> J. </author> <title> Pach, </title> <type> personal communication. </type>
Reference-contexts: An extension of this problem to shortest paths on arbitrary convex surfaces is mentioned in [14]. Unfortunately, as shown recently by Pach <ref> [13] </ref>, this problem has a negative answer. For the sake of completeness, we provide in an Appendix an improved variant of Pach's analysis, constructing a family of polytopes with arbitrarily large folding angles of shortest paths along their boundaries.
Reference: [14] <author> A. V. Pogorelov, </author> <title> Extrinsic Geometry of Convex Surfaces, Volume 35 of Translations of Mathematical Monographs, </title> <publisher> American Mathematical Society, </publisher> <address> Providence, RI, </address> <year> 1973. </year>
Reference-contexts: Theorem 2.1 (see <ref> [14] </ref>) Let F be a convex surface bounding a body K, and fl a curve that 3 does not meet the interior of K and connects points s and t on F . <p> An extension of this problem to shortest paths on arbitrary convex surfaces is mentioned in <ref> [14] </ref>. Unfortunately, as shown recently by Pach [13], this problem has a negative answer. For the sake of completeness, we provide in an Appendix an improved variant of Pach's analysis, constructing a family of polytopes with arbitrarily large folding angles of shortest paths along their boundaries.
Reference: [15] <author> F.P. Preparata and M.I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1985. </address>
Reference-contexts: We next compute the polytope Q () = P (A), which is the intersection of O (1=) halfs-paces, O ((1=) log (1=)) time <ref> [15] </ref>. By Lemma 3.1, the polytope Q () satisfies the properties asserted in the theorem. <p> We compute the Gaussian diagram of Conv ( 2 ), and preprocess it into a data structure for answering point-location queries in the Gaussian diagram. The preprocessing takes O (m log m) time, and each point-location query takes O (log m) time <ref> [15] </ref>. The subpaths 1 ; 2 change as the algorithm progresses, as will be described below. Initially, 1 consists of the first b edges of (and 2 consists of all the remaining segments).
Reference: [16] <author> J. Reif and J. Storer, </author> <title> Shortest paths in Euclidean space with polyhedral obstacles, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 41 (1994), </volume> <pages> 1013-1019. </pages>
Reference-contexts: This problem has received considerable attention in computational geometry. It was shown to be NP-hard by Canny and Reif [2], and the fastest available algorithms for this problem run in time that is exponential in the total number of obstacle vertices (which we denote by n) <ref> [16, 17] </ref>. The apparent intractability of the problem has motivated researchers to develop polynomial-time algorithms for computing approximate shortest paths and for computing shortest paths in special cases.
Reference: [17] <author> M. Sharir, </author> <title> On shortest paths amidst convex polyhedra, </title> <journal> SIAM J. Comput. </journal> <volume> 16 (1987), </volume> <pages> 561-572. </pages>
Reference-contexts: This problem has received considerable attention in computational geometry. It was shown to be NP-hard by Canny and Reif [2], and the fastest available algorithms for this problem run in time that is exponential in the total number of obstacle vertices (which we denote by n) <ref> [16, 17] </ref>. The apparent intractability of the problem has motivated researchers to develop polynomial-time algorithms for computing approximate shortest paths and for computing shortest paths in special cases.
Reference: [18] <author> M. Sharir and A. Schorr, </author> <title> On shortest paths in polyhedral spaces, </title> <journal> SIAM J. Comput. </journal> <volume> 15 (1986), </volume> <pages> 193-215. </pages>
Reference-contexts: The problem of computing a shortest path between two points along the surface of a single convex polytope is an interesting special case of the three-dimensional Euclidean shortest-path problem. Sharir and Schorr <ref> [18] </ref> gave an O (n 3 log n) algorithm for this problem, exploiting the property that a shortest path on a polyhedron unfolds into a straight line. Mount et al. [11] improved the running time to O (n 2 log n); their algorithm works for non-convex polyhedra as well.
References-found: 18

