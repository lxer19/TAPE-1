URL: ftp://ftp.gmd.de/GMD/ai-research/Publications/Fabel/Fabel-36-MoMo-language.ps.gz
Refering-URL: http://nathan.gmd.de/projects/fabel/fabel-pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: AAA  MoMo: Language and Case Studies  
Author: F AAA AAA AAAA AAAA AAAA AAAA B AAA AAA L E F AB EL Friedrich Gebhardt 
Date: 36  
Note: c 1995 GMD  
Address: Reihe FABEL-Report Status: freigegeben Dokumentbezeichner: Org/Reports/nr-36 Erstellt am: 23.5.1995 Korrigiert am: 3.7.1995 ISSN 0942-413X  
Affiliation: Druck: GMD Forschungszentrum Informationstechnik GmbH, Sankt Augustin  GMD Forschungszentrum Informationstechnik GmbH  
Pubnum: FABEL-Report No.  
Abstract-found: 0
Intro-found: 1
Reference: [ Bredeweg, 1994 ] <author> B. Bredeweg. </author> <title> Model-based diagnosis and prediction of behaviour. </title> <editor> In J. Breuker and W. Van de Velde, editors, </editor> <title> CommonKADS library for expertise modelling, </title> <booktitle> chapter 6, </booktitle> <pages> pages 121-153. </pages> <publisher> IOS Press, </publisher> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: This has been modeled in Section B.3 of [ Gebhardt et al., 1994 ] . 3.4 Discussion 3.4.1 Comparison with the KADS model The book on the CommonKADS library [ Breuker and Van de Velde, 1994 ] contains a chapter on a diagnosis model <ref> [ Bredeweg, 1994 ] </ref> in various stages of reflnement. Comparing them with our model shows many difierences. <p> The flrst reflnement splits the inference into "Generate hypothesis" and "Discriminate hypothesis" with an intermediate role "Hypothesis", roughly equivalent to our place H. Figures 6.4 and 6.7 of <ref> [ Bredeweg, 1994 ] </ref> are more elaborate; they are at about the same level of detail as our diagnosis model and serve here for comparison although they will not be reprinted here. Bredeweg stresses other points than we did.
Reference: [ Breuker and Van de Velde, 1994 ] <author> J. Breuker and W. Van de Velde. </author> <title> CommonKADS Library for Expertise Modelling: Reusable Problem Solving Components. </title> <publisher> IOS, </publisher> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: This has been modeled in Section B.3 of [ Gebhardt et al., 1994 ] . 3.4 Discussion 3.4.1 Comparison with the KADS model The book on the CommonKADS library <ref> [ Breuker and Van de Velde, 1994 ] </ref> contains a chapter on a diagnosis model [ Bredeweg, 1994 ] in various stages of reflnement. Comparing them with our model shows many difierences. <p> This assures us that the idea of control by restrictions rather than by procedural prescriptions is sound. The absence of control speciflcations in most chapters of the book on the CommonKADS Library <ref> [ Breuker and Van de Velde, 1994 ] </ref> may also be seen as a hint that little control is necessary. MoMo permits complex type speciflcations such as (or type-1 type2) but they have not been needed in our examples.
Reference: [ Gebhardt et al., 1994 ] <author> F. Gebhardt, E. Gro, and H. Vo. </author> <title> Concurrency constraints as control speciflcations for the MoMo language. </title> <type> Fabel-Report 21, </type> <institution> GMD, Sankt Augustin, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: These speciflcations are in general too stringent. Therefore a more exible control structure has been developed for MoMo in the Fabel project. Its principles and rationale have been explained already in a previous report <ref> [ Gebhardt et al., 1994 ] </ref> . The present report serves two main purposes. The syntax for the task layer is formally specifled. It is assumed that it will be stable during future work. <p> Any action may occur unless its occurrence is explicitly restricted. One approach consisted of extensions to the inference net. This attempt failed for at least two reasons, see <ref> [ Gebhardt et al., 1994, Section 3.3 ] </ref> : the extensions became quite complicated and confusing already in simple cases; net extensions do not allow for alternate tasks on (part of) the same inference net. <p> All these principles for the functionality of the MoMo task layer are already documented and explained in <ref> [ Gebhardt et al., 1994, Chapter 3 ] </ref> . We now give some principles guiding the development of the task language as well as some changes to the inference language. Scarcity. The task language should contain only those constructs that are absolutely necessary. <p> For details see <ref> [ Gebhardt et al., 1994, Chapter 5 ] </ref> . As a result, a new task language has been developed. The main structure in this layer is the task itself with its substructures. <p> If the newly created priorities lead to a conict with already existing priorities (i.e. they lead to a priority cycle), the conict is removed by deleting some old priorities according to the algorithm given in <ref> [ Gebhardt et al., 1994, Section 6.3 ] </ref> . <p> A task cannot change views, not even by initiating subtasks. 22 2.8 STRATEGY LAYER Execution of tasks is accomplished by the scheduler or schedulers responsible for selecting the action to occur next, see <ref> [ Gebhardt et al., 1994, Chapter 5 ] </ref> . In a distributed inference net, each participating computer has at least one scheduler; a task and thus a restriction area cannot be distributed on several schedulers. There will in contrast probably be just one control agency for strategies. <p> It may be wise to give the strategy syntax an entirely difierent form, i.e. no Lisp functions. Chapter 3 Technical diagnosis This Chapter presents the flrst of three case studies. It is largely taken from an earlier report <ref> [ Gebhardt et al., 1994 ] </ref> . The informal syntax used there has been replaced by its present form. <p> We do not consider this problem here; an appropriately augmented inference net has been developed in <ref> [ Gebhardt et al., 1994, Appendix B.3 ] </ref> . 1 In [ Walther et al., 1992, Figure 7 ] there is e.g. no way to remove a disproved hypothesis from place Hypotheses. [ Hemmann, 1994 ] works correctly only if action "remove-non-conflrmed-hypothesis" in Figure 16 is carried out after action "remove-conflrmed-hypothesis" <p> The input places I, G, D and W have to be initiated again if the inference net is to be used for a new diagnosis. This has been modeled in Section B.3 of <ref> [ Gebhardt et al., 1994 ] </ref> . 3.4 Discussion 3.4.1 Comparison with the KADS model The book on the CommonKADS library [ Breuker and Van de Velde, 1994 ] contains a chapter on a diagnosis model [ Bredeweg, 1994 ] in various stages of reflnement.
Reference: [ Gebhardt et al., 1995 ] <author> F. Gebhardt, E. Gro, T. Hemmann, and H. Vo. </author> <title> Knowledge Engineering mit MoMo. </title> <booktitle> KI - Kunstliche Intelligenz, </booktitle> <volume> 9(1) </volume> <pages> 22-27, </pages> <year> 1995. </year>
Reference-contexts: Remark: Variable names are local to a single action. The same name occuring with another action is totally unrelated to the flrst one. Tokens from the same place may be named difierently in several actions reading that place. 2.4 Subpages The MoMo Inference Net Editor MILE ( <ref> [ Gebhardt et al., 1995, Section 3.2 ] </ref> ) provides for deflning subpages (subnets) and for identifying a (compound) action in the superordinate net (superpage) with an independently deflned subpage.
Reference: [ Hemmann, 1994 ] <author> T. Hemmann. </author> <title> The home stereo diagnosis revisited. </title> <editor> In H. Vo and R. Studer, editors, </editor> <booktitle> Proceedings 4th KADS meeting, volume 832 of Arbeitspapiere der GMD, </booktitle> <address> Sankt Augustin, </address> <month> March </month> <year> 1994. </year> <institution> GMD, Sankt Augustin. </institution>
Reference-contexts: It is largely taken from an earlier report [ Gebhardt et al., 1994 ] . The informal syntax used there has been replaced by its present form. There are several reasons for considering this example: to overcome inconsistencies in earlier versions as in <ref> [ Walther et al., 1992; Hemmann, 1994 ] </ref> 1 ; to explicitly model user interaction; to have an example where several alternative task deflnitions are meaningful. 3.1 The problem: to flnd hypotheses explaining the obser vations Given faulty technical equipment, one wants to flnd the cause of malfunctioning. <p> We do not consider this problem here; an appropriately augmented inference net has been developed in [ Gebhardt et al., 1994, Appendix B.3 ] . 1 In [ Walther et al., 1992, Figure 7 ] there is e.g. no way to remove a disproved hypothesis from place Hypotheses. <ref> [ Hemmann, 1994 ] </ref> works correctly only if action "remove-non-conflrmed-hypothesis" in Figure 16 is carried out after action "remove-conflrmed-hypothesis" using the same hypotheses; this is implied in the text, but cannot be assured by the semantics of MoMo. 23 24 3.2 THE BASIC DIAGNOSIS MODEL 3.2 The basic diagnosis model The
Reference: [ Janetzko et al., 1994 ] <author> D. Janetzko, K. Borner, O. Jaschke, and G. Strube. </author> <title> Task-oriented Knowledge Acquisition and Reasoning for Design Support Systems. </title> <booktitle> In Proceedings of the First European Conference on Cognitive Science in Industry, </booktitle> <pages> pages 153-184, </pages> <year> 1994. </year>
Reference-contexts: Chapter 5 Retrieval and adaptation 5.1 The problem: flnding and solving a design task The next model has been inspired by a sketch in <ref> [ Janetzko et al., 1994 ] </ref> . Buildings are not designed in a single step; the whole process is decomposed into lots of small design tasks. Some tasks can usually be performed only after certain other tasks have been completed.
Reference: [ Jensen, 1991 ] <author> K. Jensen. </author> <title> Coloured Petri nets: a high level language for system design and analysis. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri nets 1990, </booktitle> <pages> pages 342-435. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: The output of one computation may be input to another; thus we naturally arrive at an inference net. This net can be interpreted as a Coloured Petri Net (CPN) <ref> [ Jensen, 1991 ] </ref> . The inferences correspond to actions, input and output to typed places (`roles' in KADS terminology). <p> The subpage structure can be considered a partial implementation of net hierarchies as developed in <ref> [ Jensen, 1991 ] </ref> from where the terminology is adopted. MoMo operates on the at net, i.e. on the main inference net with all compound actions iteratively replaced by the corresponding subpages.
Reference: [ Karbach and Vo, 1993 ] <author> W. Karbach and A. Vo. </author> <title> MODEL-K for prototyping and strategic reasoning at the knowledge level. </title> <editor> In J.-M. David, J.-P. Krivine, and R. Simmons, editors, </editor> <booktitle> Second Generation Expert Systems, </booktitle> <pages> pages 721-745. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Introduction 1.1 Overview over MoMo The modelling language MoMo attempts to combine the conceptual, implementation-independent, semi-formal modelling ideas of the KADS methodology [ Schreiber et al., 1993 ] with rapid prototyping to get executable models. MoMo uses the experiences gained with two predecessor languages developed at GMD, MODEL-K <ref> [ Karbach and Vo, 1993 ] </ref> and OMOS [ Linster, 1992 ] . MoMo adopts from the KADS model of expertise the four-layer structure. The data are modelled in the domain layer.
Reference: [ Linster, 1992 ] <author> M. Linster. </author> <title> Knowledge acquisition based on explicit methods of problem-solving. </title> <institution> Diss., Universitat Kaiserslautern, </institution> <year> 1992. </year>
Reference-contexts: MoMo uses the experiences gained with two predecessor languages developed at GMD, MODEL-K [ Karbach and Vo, 1993 ] and OMOS <ref> [ Linster, 1992 ] </ref> . MoMo adopts from the KADS model of expertise the four-layer structure. The data are modelled in the domain layer. The inference layer is a collection of basic inferences or actions with their input and output roles (places with types).
Reference: [ Schreiber et al., 1993 ] <author> G. Schreiber, B. Wielinga, and J. Breuker. KADS: </author> <title> A Principled Approach to Knowledge-Based System Development. </title> <publisher> Academic Press, Harcourt, </publisher> <year> 1993. </year>
Reference-contexts: Introduction 1.1 Overview over MoMo The modelling language MoMo attempts to combine the conceptual, implementation-independent, semi-formal modelling ideas of the KADS methodology <ref> [ Schreiber et al., 1993 ] </ref> with rapid prototyping to get executable models. MoMo uses the experiences gained with two predecessor languages developed at GMD, MODEL-K [ Karbach and Vo, 1993 ] and OMOS [ Linster, 1992 ] . MoMo adopts from the KADS model of expertise the four-layer structure.
Reference: [ Walther et al., 1992 ] <author> J. Walther, A. Vo, M. Linster, T. Hemmann, H. Vo, and W. Kar-bach. </author> <month> MoMo. </month> <institution> Arbeitspapiere der GMD 658, GMD, Sankt Augustin, </institution> <month> June </month> <year> 1992. </year> <month> 59 </month>
Reference-contexts: Therefore the components of both are explained and the changes are documented; details of the unchanged constructs can be found in the original MoMo speciflcation <ref> [ Walther et al., 1992 ] </ref> . The strategy language has not yet been specifled, but its main properties have become rather clear. The present status is also explained in this report. The MoMo language and its properties are the subject of Chapter 2. <p> In order to understand the examples it is not necessary to study all the syntax details before. The reader may wish to glance through Chapter 2 and to return to selected sections when needed. 1.2 Guiding principles The design rationale for the original MoMo has been explained in <ref> [ Walther et al., 1992, Section 5 ] </ref> ; it will not repeated here. The main idea of the new MoMo was to replace the procedural control of the old MoMo by speciflcations that restrict execution of the inference net as little as possible. <p> This is not quite the flnal version. While some constructs are explicitly marked as provisional, modiflcations may occur also in other parts. However, we do not expect major changes to take place except on the strategy layer. The syntax has been developed from that of the "old" MoMo <ref> [ Walther et al., 1992 ] </ref> . Where there are few or no changes, we refer to that report which in addition contains an elaborate example (diagnosis of home stereo equipment). <p> : or Tn f T1 # : : : # Tn g terms T1 to Tn in an arbitrary order Term+ one or more occurrences of Term Term* zero, one or more occurrences of Term 5 6 2.2 DOMAIN LAYER 2.2 Domain layer The domain layer language remains as in <ref> [ Walther et al., 1992, Section 4.4 ] </ref> . It permits to deflne domain objects in an object oriented form. A hierarchy of concepts, corresponding to CLOS classes, is deflned using function def-concept. def-instance and mak-instance create a named and an anonymous instance of a concept. <p> sequence of actions occurring (no control speciflcation) except for the trivial fact that an action cannot occur unless it has su-cient input (we assume inflnite capacities of the places; flnite capacity of output places could further restrict occurrences). 2.3.1 Types The type speciflcations and the imbedded procedures remain as in <ref> [ Walther et al., 1992, Section 4.3.1 ] </ref> . Types are declared by def-type. <p> Types are declared by def-type. Methods other than accessors for a type are introduced by def-procedure, a simplifled version of the CLOS defmethod constructor. 2.3.2 Places The place speciflcations remain as in <ref> [ Walther et al., 1992, Section 4.3.3 ] </ref> using def-place except that the :init keyword is dropped. Initialization of places is achieved by place-views only (cf. Section 2.5). <p> Initialization of places is achieved by place-views only (cf. Section 2.5). Main component of a place deflnition is besides the name the type assigned to the place, either a type name or a list (or type-1 ...). 2.3.3 Actions As compared to <ref> [ Walther et al., 1992, Section 4.3.3 ] </ref> , there are two changes to the action deflnition def-action: in addition to input places and output places, one may have in-out-places; it is now possible to put more than one token on an output place 1 . 1 These features have been <p> two changes to the action deflnition def-action: in addition to input places and output places, one may have in-out-places; it is now possible to put more than one token on an output place 1 . 1 These features have been available in MoMo before, but they are not documented in <ref> [ Walther et al., 1992 ] </ref> . <p> All these constructs remain as in <ref> [ Walther et al., 1992, Section 4.5 ] </ref> except that they may be bound to a main task (or to main tasks) by an additional :task keyword. The syntax for place-views had to be changed; it is not yet fully deflned. <p> It is largely taken from an earlier report [ Gebhardt et al., 1994 ] . The informal syntax used there has been replaced by its present form. There are several reasons for considering this example: to overcome inconsistencies in earlier versions as in <ref> [ Walther et al., 1992; Hemmann, 1994 ] </ref> 1 ; to explicitly model user interaction; to have an example where several alternative task deflnitions are meaningful. 3.1 The problem: to flnd hypotheses explaining the obser vations Given faulty technical equipment, one wants to flnd the cause of malfunctioning. <p> We do not consider this problem here; an appropriately augmented inference net has been developed in [ Gebhardt et al., 1994, Appendix B.3 ] . 1 In <ref> [ Walther et al., 1992, Figure 7 ] </ref> there is e.g. no way to remove a disproved hypothesis from place Hypotheses. [ Hemmann, 1994 ] works correctly only if action "remove-non-conflrmed-hypothesis" in Figure 16 is carried out after action "remove-conflrmed-hypothesis" using the same hypotheses; this is implied in the text, but
References-found: 11

