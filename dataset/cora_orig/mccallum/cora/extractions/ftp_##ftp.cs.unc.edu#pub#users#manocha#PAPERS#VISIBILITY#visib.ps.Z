URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/VISIBILITY/visib.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Title: Global Visibility and Hidden Surface Removal Algorithms for Free Form Surfaces  
Author: Shankar Krishnan Dinesh Manocha 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science, University of North Carolina,  
Date: November 21, 1994  
Abstract: Computing the visible portions of free-form surfaces from a given viewpoint is of great interest in many applications. It is closely related to the hidden surface removal problem in computer graphics and machining applications in manufacturing. Most of the earlier work has focused on discrete methods based on polygonization or ray-tracing, hidden curve removals and local visibility computations based on Gauss maps. In this paper we present an efficient and accurate algorithm for hidden surface and global visibility computations on free form surfaces. Given a viewpoint, it decomposes the domain of each surface based on silhouettes and boundary curves. To compute the exact visibility, we introduce a notion of "visibility curves" obtained by projection of silhouette and boundary curves and decomposing the surface into non-overlapping regions. These curves are computed using marching methods and we present techniques to compute all the components. The non-overlapping and visible portions of the surface are represented as trimmed surfaces and we present an efficient representation based on polygon trapezoidation algorithms. Given the non-overlapping regions, we use randomized algorithms for visibility computations from a given viewpoint. We demonstrate the performance of the algorithm on different models. fl Supported in part by a junior faculty award, university research council grant, NSF grant CCR-9319957, ONR contract N00014-94-1-0738, ARPA contract DABT63-93-C-0048, NSF/ARPA Science and Technology Center for Computer Graphics & Scientific Visualization and NSF Prime contract No. 8920219 
Abstract-found: 1
Intro-found: 1
Reference: [Car76] <author> M.P. </author> <title> Do Carmo. Differential Geometry of Curves and Surfaces. </title> <publisher> Prentice Hall, </publisher> <year> 1976. </year>
Reference-contexts: Woo et. al. [Woo94, CCW93, GWT94] have proposed a solution to this problem based on Gauss maps and visibility maps. Gauss map for a surface is a map of normals on the unit sphere <ref> [Car76] </ref> and the visibility maps are defined as enhancement of Gauss maps as the set of directions from which the surface is completely visible [Woo94]. However, this definition of visibility maps is based on local visibility and not global visibility of surfaces.
Reference: [CCW93] <author> L. Chen, S. Chou, and T.C. Woo. </author> <title> Separating and intersecting spherical polygons: computing machinability on three, four and five axis numerically controlled machines. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(4) </volume> <pages> 305-326, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations [FDHF90, Hor84, SSS74, HG77]. Similarly, accessibility computations in manufacturing applications are based on visibility sets <ref> [Woo94, CCW93, GWT94] </ref>. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary from that viewpoint. <p> The main question relates to finding the orientations of the workpiece such that all the points of interest on the workpiece are visible to the effector. Woo et. al. <ref> [Woo94, CCW93, GWT94] </ref> have proposed a solution to this problem based on Gauss maps and visibility maps.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: If the number of intersections is 0, the surface is visible, otherwise it is not. We use some recent algorithms for these intersections based on eigenvalue computations [MD94]. Given a surface F (s; t), we compute its implicit representation using resultant methods <ref> [Dix08] </ref> and obtain a matrix formulation M (x; y; z; w). We substitute the parametrization of the curve, say G (u) = (X (u); Y (u); Z (u); W (u)) of degree d, and obtain a univariate matrix polynomial M (u).
Reference: [EC90] <author> G. Elber and E. Cohen. </author> <title> Hidden curve removal for free form surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 95-104, </pages> <year> 1990. </year>
Reference-contexts: The surfaces obtained after partitioning based on the silhouette computation need not be completely visible, as shown in Fig. 1. More recently, a hidden curve removal algorithm has been presented for NURBS primitives by Elber and Cohen <ref> [EC90] </ref>. In particular, [EC90] extract the curves of interest by considering boundary curves, silhouette curves, iso-parametric curves and curves along C 1 discontinuity based on 2D curve-curve intersections. The intersection algorithms are based on subdivision. <p> The surfaces obtained after partitioning based on the silhouette computation need not be completely visible, as shown in Fig. 1. More recently, a hidden curve removal algorithm has been presented for NURBS primitives by Elber and Cohen <ref> [EC90] </ref>. In particular, [EC90] extract the curves of interest by considering boundary curves, silhouette curves, iso-parametric curves and curves along C 1 discontinuity based on 2D curve-curve intersections. The intersection algorithms are based on subdivision. <p> Performing the loop detection test based on Gauss maps of G (s; t) can be computationally very intensive. Hence some of the previous methods to evaluate the silhouette curve rely on simple subdivision up to a given *-tolerance and piecing the silhouette curve together <ref> [EC90] </ref>. These methods could suffer from problems of slow convergence. We characterize certain special points on loops as places where two complex conjugate paths merge to form a real component [KM94].
Reference: [EC93] <author> G. Elber and E. Cohen. </author> <title> Second order surface analysis using hybrid symbolic and numeric operators. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(2) </volume> <pages> 160-178, </pages> <year> 1993. </year>
Reference: [EC94] <author> G. Elber and E. Cohen. </author> <title> Exact computation of gauss maps and visibility sets for freefrom surfaces. </title> <type> Technical report CIS #9414, </type> <institution> Computer Science Department, Technion, </institution> <year> 1994. </year>
Reference: [Far90] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1990. </year>
Reference-contexts: We present algorithms and implementations for computation of visibility curves in Section5. Finally, Section 6 describes an efficient and randomized visible surface computation algorithm for multiple non-overlapping surfaces. 2 Background Given a NURBS model, we use knot insertion to decompose them into a series of Bezier patches <ref> [Far90] </ref>. In the process, we insert the minimum number of knots as a function of the knot sequence of the original surface and its order. Closely spaced knots, with tolerance less than 2 fi 10 5 are coerced to the same value before knot insertion.
Reference: [FDHF90] <author> J. Foley, A. Van Dam, J. Hughes, and S. </author> <title> Feiner. </title> <booktitle> Computer Graphics: Principles and Practice. </booktitle> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. <p> Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary from that viewpoint. Most of the earlier algorithms in the literature are for planar and polygonal primitives and hidden lines removal <ref> [FDHF90, Mul89, SSS74] </ref>. Given a model composed of non-uniform rational B-spline (NURBS) surface primitives, it is polygonized and algorithms for polygonal models are then applied. <p> However, the accuracy of the overall algorithm is limited by the accuracy of the polygonal approximation and the complexity of the algorithm can be quadratic (worst case) in the number of polygons generated. Other techniques for visibility computations are based on ray-tracing <ref> [FDHF90] </ref>. Not only are the resulting algorithms slow but their accuracy is limited by the image-precision. These techniques are device resolution dependent and many applications in modeling and rendering desire a device-independent solution [TW93].
Reference: [Ful78] <author> W. Fulks. </author> <title> Advanced Calculus: An introduction to analysis. </title> <publisher> John Wiley & sons, </publisher> <year> 1978. </year>
Reference-contexts: We shall now introduce the notion of visibility curves and elucidate their role in determining global visibility. We now state without proof a fundamental theorem from vector calculus called the global inverse theorem which provides the basis for our method <ref> [Ful78] </ref>. Theorem 1 Let F be a continuously differentiable mapping defined on an open region D 2 &lt; 2 , with range R 2 &lt; 2 , and let its Jacobian be never zero in D.
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Baltimore, </address> <year> 1989. </year>
Reference-contexts: In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem [MD94]. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations <ref> [GL89] </ref>. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MD94]. 2.4 Power Iterations We use marching methods to trace the visibility curves.
Reference: [GLR82] <author> I. Gohberg, P. Lancaster, and L. Rodman. </author> <title> Matrix Polynomials. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: M 0 M 1 M 2 : : : M d1 7 7 5 where M i = M 1 d M i <ref> [GLR82] </ref>. In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem [MD94]. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. <p> By eliminating u from these two equations using Sylvester's resultant, we obtain a matrix polynomial in v. We can reduce it to an eigenvalue problem of an associated companion matrix <ref> [GLR82] </ref>. After obtaining all the eigenvalues (using LAPACK routines) only the solutions that lie within the intervals are taken. Using this method, all the intersection points are determined accurately and efficiently. 15 2.
Reference: [GWT94] <author> J.G. Gan, T.C. Woo, and K. Tang. </author> <title> Spherical maps: Their construction, properties, and approximation. </title> <journal> ASME Trans. J. Mech. </journal> <note> Des., 1994. To appear. </note>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations [FDHF90, Hor84, SSS74, HG77]. Similarly, accessibility computations in manufacturing applications are based on visibility sets <ref> [Woo94, CCW93, GWT94] </ref>. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary from that viewpoint. <p> The main question relates to finding the orientations of the workpiece such that all the points of interest on the workpiece are visible to the effector. Woo et. al. <ref> [Woo94, CCW93, GWT94] </ref> have proposed a solution to this problem based on Gauss maps and visibility maps.
Reference: [HG77] <author> G. Hamlin and C. W. Gear. </author> <title> Raster-scan hidden surface algorithm techniques. </title> <journal> Computer Graphics, </journal> <volume> 11 </volume> <pages> 206-213, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature.
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: Silhouettes can have loops (closed components) within the domain as well. Loop detection is a hard problem and considerable research has been done on it in the context of the surface intersection problem. However, the results known so far use the gauss maps of both the patches <ref> [PSW85, SM88, Hoh91, ZS93] </ref>. The silhouette can be computed as the intersection curve of the plane z = 0 with the patch G (s; t) such that G (s; t) is normal to the surface F at the point F (s; t).
Reference: [Hor84] <author> C. Hornung. </author> <title> A method for solving the visibility problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 26-33, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature.
Reference: [KM94] <author> S. Krishnan and D. Manocha. </author> <title> Efficient and accurate algorithms for surface intersection based on the lower dimensional formulation. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1994. </year>
Reference-contexts: Therefore, the silhouette curve corresponds to the intersection between the Gauss map of the surface and the plane z = 0. We formulate the silhouette curve as an algebraic plane curve in the domain of F (s; t) <ref> [KM94] </ref>. 3.1 Formulation of the Silhouette Curve Let F (s; t) denote the parametric surface and let 1 (s; t); 2 (s; t) and 3 (s; t) denote the mappings from the parametric space to (x; y; z) space. <p> These methods could suffer from problems of slow convergence. We characterize certain special points on loops as places where two complex conjugate paths merge to form a real component <ref> [KM94] </ref>. The complex solutions obtained earlier are used to trace the curve in the complex domain until we reach one of the points on some real component of the 9 silhouette curve. <p> Some of these points need not belong to loops within the domain, but we will not miss any of them by this method. The details of the complete algorithm are presented in <ref> [KM94] </ref>. Our algorithm evaluates the silhouette curve at discrete steps to create a piecewise linear approximation. 3.3 Surface Partitioning based on Silhouettes Fig.4 shows the silhouette curve on an example patch along with the curve on its domain. <p> Our final goal is to output trimmed patches of the scene that are visible from the given viewpoint. We shall assume for simplicity that the faces input to this algorithm are non-intersecting. If they are intersecting, we may have to compute all the pairwise surface intersections <ref> [KM94] </ref> and split them into non-intersecting faces. The input to the algorithm is a set of n faces, each of whose boundaries is represented as a collection of Bezier curves and piecewise linear chains. We also have the entire face boundary as a closed simple polygon.
Reference: [Li81] <author> L. Li. </author> <title> Hidden-line algorithm for curved surfaces. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 20(8) </volume> <pages> 466-470, </pages> <year> 1981. </year>
Reference: [MD94] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for intersecting parametric and algebraic curves i: simple intersections. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 13(1) </volume> <pages> 73-100, </pages> <year> 1994. </year>
Reference-contexts: If the number of intersections is 0, the surface is visible, otherwise it is not. We use some recent algorithms for these intersections based on eigenvalue computations <ref> [MD94] </ref>. Given a surface F (s; t), we compute its implicit representation using resultant methods [Dix08] and obtain a matrix formulation M (x; y; z; w). <p> M 0 M 1 M 2 : : : M d1 7 7 5 where M i = M 1 d M i [GLR82]. In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem <ref> [MD94] </ref>. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MD94]. 2.4 Power Iterations We use marching methods to trace the <p> the intersection problem is reduced to a generalized eigenvalue problem <ref> [MD94] </ref>. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MD94]. 2.4 Power Iterations We use marching methods to trace the visibility curves. At each iterations, we pose the problem as an eigenvalue problem and use local methods to compute points on the curve. Power iteration is a fundamental local technique used to compute eigenvalues and eigenvectors of a matrix.
Reference: [Mul89] <author> K. Mulmuley. </author> <title> An efficient algorithm for hidden surface removal. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 379-388, </pages> <year> 1989. </year>
Reference-contexts: Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary from that viewpoint. Most of the earlier algorithms in the literature are for planar and polygonal primitives and hidden lines removal <ref> [FDHF90, Mul89, SSS74] </ref>. Given a model composed of non-uniform rational B-spline (NURBS) surface primitives, it is polygonized and algorithms for polygonal models are then applied. <p> We shall, therefore, refer to each such region as a face. Recently fast randomized algorithms have been developed that can handle this problem for polygonal models <ref> [Mul89] </ref>. However, we present a simple algorithm based on the the same 19 projection idea that works well. Our final goal is to output trimmed patches of the scene that are visible from the given viewpoint. We shall assume for simplicity that the faces input to this algorithm are non-intersecting.
Reference: [PS85] <author> F.P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Therefore, we use piecewise linear approximation of all silhouette curves as the first iteration in our intersection computation. We treat the chain as a set of line segments. We use the Bentley-Ottmann algorithm <ref> [PS85] </ref> to obtain the intersection points in O ((N + k) log N ) time, where k is the number of intersection points. This algorithm is close to optimal because in our case k is very small.
Reference: [PSW85] <author> E. Klassen P. Sinha and K. K. Wang. </author> <title> Exploiting topological and geometric properties for selective subdivision. </title> <booktitle> In Proceedings of ACM symposium on Computational Geometry, </booktitle> <pages> pages 39-45, </pages> <year> 1985. </year>
Reference-contexts: Silhouettes can have loops (closed components) within the domain as well. Loop detection is a hard problem and considerable research has been done on it in the context of the surface intersection problem. However, the results known so far use the gauss maps of both the patches <ref> [PSW85, SM88, Hoh91, ZS93] </ref>. The silhouette can be computed as the intersection curve of the plane z = 0 with the patch G (s; t) such that G (s; t) is normal to the surface F at the point F (s; t).
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Computational Geometry Theory & Applications, </journal> <volume> 1(1) </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: These non-convex polygonal domains are decomposed into triangles for many geometric operations like intersections and partitioning. To decompose a simple polygon into an optimal number of triangles we use Seidel's algorithm <ref> [Sei91] </ref>. It is an incremental randomized algorithm whose expected complexity is O (N log fl N ), where N is the number of vertices. In practice, it is almost linear time. The algorithm proceeds in three steps as shown in fig. 2.
Reference: [SM88] <author> T.W. Sederberg and R.J. Meyers. </author> <title> Loop detection in surface patch intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 161-171, </pages> <year> 1988. </year>
Reference-contexts: Silhouettes can have loops (closed components) within the domain as well. Loop detection is a hard problem and considerable research has been done on it in the context of the surface intersection problem. However, the results known so far use the gauss maps of both the patches <ref> [PSW85, SM88, Hoh91, ZS93] </ref>. The silhouette can be computed as the intersection curve of the plane z = 0 with the patch G (s; t) such that G (s; t) is normal to the surface F at the point F (s; t).
Reference: [SSS74] <author> I. Sutherland, R. Sproull, and R. Schumaker. </author> <title> A characterization of ten hidden-surface algorithms. </title> <journal> Computing Surveys, </journal> <volume> 6(1) </volume> <pages> 1-55, </pages> <year> 1974. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. <p> Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary from that viewpoint. Most of the earlier algorithms in the literature are for planar and polygonal primitives and hidden lines removal <ref> [FDHF90, Mul89, SSS74] </ref>. Given a model composed of non-uniform rational B-spline (NURBS) surface primitives, it is polygonized and algorithms for polygonal models are then applied.
Reference: [TW93] <author> B. Tebbs and T. Whitted. </author> <title> Numerical Design Limited, </title> <type> Personal Communication, </type> <year> 1993. </year>
Reference-contexts: Other techniques for visibility computations are based on ray-tracing [FDHF90]. Not only are the resulting algorithms slow but their accuracy is limited by the image-precision. These techniques are device resolution dependent and many applications in modeling and rendering desire a device-independent solution <ref> [TW93] </ref>. Given a NURBS model and a viewpoint, the silhouettes on the model partition it into front facing and back facing regions (as shown in Fig. 1). The silhouettes are composed of points on surfaces where the normal vector is orthogonal to the viewing direction.
Reference: [Woo94] <author> T. Woo. </author> <title> Visibility maps and spherical algorithms. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 26(1) </volume> <pages> 6-16, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations [FDHF90, Hor84, SSS74, HG77]. Similarly, accessibility computations in manufacturing applications are based on visibility sets <ref> [Woo94, CCW93, GWT94] </ref>. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary from that viewpoint. <p> The intersection algorithms are based on subdivision. In manufacturing applications, the main application of visibility computations arises in establishing a line of sight between the workpiece and a point on the effector <ref> [Woo94] </ref>. The main question relates to finding the orientations of the workpiece such that all the points of interest on the workpiece are visible to the effector. Woo et. al. [Woo94, CCW93, GWT94] have proposed a solution to this problem based on Gauss maps and visibility maps. <p> The main question relates to finding the orientations of the workpiece such that all the points of interest on the workpiece are visible to the effector. Woo et. al. <ref> [Woo94, CCW93, GWT94] </ref> have proposed a solution to this problem based on Gauss maps and visibility maps. <p> Gauss map for a surface is a map of normals on the unit sphere [Car76] and the visibility maps are defined as enhancement of Gauss maps as the set of directions from which the surface is completely visible <ref> [Woo94] </ref>. However, this definition of visibility maps is based on local visibility and not global visibility of surfaces. We present an algorithm for hidden surface removal and global visibility computations on a NURBS model from a given viewpoint.
Reference: [ZS93] <author> A. Zundel and T. </author> <title> Sederberg. Using pyramidal surfaces to detect and isolate sur-face/surface intersections. </title> <booktitle> In SIAM Conference on Geometric Design, </booktitle> <address> Tempe, AZ, </address> <year> 1993. </year> <month> 25 </month>
Reference-contexts: Silhouettes can have loops (closed components) within the domain as well. Loop detection is a hard problem and considerable research has been done on it in the context of the surface intersection problem. However, the results known so far use the gauss maps of both the patches <ref> [PSW85, SM88, Hoh91, ZS93] </ref>. The silhouette can be computed as the intersection curve of the plane z = 0 with the patch G (s; t) such that G (s; t) is normal to the surface F at the point F (s; t).
References-found: 27

