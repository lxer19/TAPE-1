URL: http://cs.jhu.edu/~baruch/FLOW/awerbuch-azar.ps
Refering-URL: http://cs.jhu.edu/~baruch/FLOW/index.html
Root-URL: http://www.cs.jhu.edu
Title: Local Optimization of Global Objectives: Competitive Distributed Deadlock Resolution and Resource Allocation  
Author: Baruch Awerbuch Yossi Azar 
Abstract: The work is motivated by deadlock resolution and resource allocation problems, occurring in distributed server-client architectures. We consider a very general setting which includes, as special cases, distributed bandwidth management in communication networks, as well as variations of classical problems in distributed computing and communication networking such as deadlock resolution and "dining philosophers". In the current paper, we exhibit first local solutions with globally-optimum performance guarantees. An application of our method is distributed bandwidth management in communication networks. In this setting, deadlock resolution (and maximum fractional independent set) corresponds to admission control maximizing network throughput. Job scheduling (and minimum fractional coloring) corresponds to route selection that minimizes load. 
Abstract-found: 1
Intro-found: 1
Reference: [AAF + 93] <author> Jim Aspnes, Yossi Azar, Amos Fiat, Serge Plotkin, and Orli Waarts. </author> <title> On-line load balancing with applications to machine scheduling and virtual circuit routing. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 623-631, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Example: distributed bandwidth management. An important example to which our model applies includes distributed bandwidth management algorithms in high-speed networks, that so far has only been considered in online centralized setting <ref> [AAF + 93, AAP93, AAPW94] </ref>. In case in which number of route selections is polynomial, our methods yield poly-logarithmically competitive algorithms. Bandwidth management is modeled by having server's resources be bandwidth of a certain communication link, and clients be connections entering the network. <p> flow control issue, i.e. decision on how much traffic to admit into the network given a fixed path from sender to receiver, is captured by the full-access version of the prob lem. * route selection issue, i.e. decision on how to route traffic, so as to minimize maximum link load, <ref> [AAF + 93, AKP + 93, AAPW94] </ref> is captured in our setting by maximum time deadlock reso lution. We stress that the "serially-competitive" routing algorithms, say in [AAF + 93, AAP93] do not work in the concurrent setting. <p> We stress that the "serially-competitive" routing algorithms, say in <ref> [AAF + 93, AAP93] </ref> do not work in the concurrent setting. These algorithms operate by selecting the shortest weighted path for an incoming connection, where links weights grow exponentially with traffic admitted so far into the system. <p> The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as <ref> [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94] </ref>. <p> In the new algorithms, we build on techniques used in context of online resource allocation <ref> [AAF + 93, AKP + 93, AAP93, AAPW94] </ref> as well as on techniques used in field of distributed computing. Our algorithm is similar to the Luby-Nisan algorithm [LN93]. Structure of this extended abstract. Maximum-throughput problem is handled in Section 2 and Minimum-time (load) problem is handled in Section 3.
Reference: [AAP93] <author> Baruch Awerbuch, Yossi Azar, and Serge Plotkin. </author> <title> Throughput competitive on-line routing. </title> <booktitle> In Proc. 34rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 32-40. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: Example: distributed bandwidth management. An important example to which our model applies includes distributed bandwidth management algorithms in high-speed networks, that so far has only been considered in online centralized setting <ref> [AAF + 93, AAP93, AAPW94] </ref>. In case in which number of route selections is polynomial, our methods yield poly-logarithmically competitive algorithms. Bandwidth management is modeled by having server's resources be bandwidth of a certain communication link, and clients be connections entering the network. <p> The different variations of the bandwidth management problem are captured in our setting as follows. * admission control, i.e. decision on whether to admit an incoming connection, so as to maximize the total throughput, without exceeding link capacities <ref> [GGK + 93, LT94, ABFR93, AAP93] </ref>, is captured by the maximum-throughput version of the problem. <p> We stress that the "serially-competitive" routing algorithms, say in <ref> [AAF + 93, AAP93] </ref> do not work in the concurrent setting. These algorithms operate by selecting the shortest weighted path for an incoming connection, where links weights grow exponentially with traffic admitted so far into the system. <p> In the new algorithms, we build on techniques used in context of online resource allocation <ref> [AAF + 93, AKP + 93, AAP93, AAPW94] </ref> as well as on techniques used in field of distributed computing. Our algorithm is similar to the Luby-Nisan algorithm [LN93]. Structure of this extended abstract. Maximum-throughput problem is handled in Section 2 and Minimum-time (load) problem is handled in Section 3.
Reference: [AAPW94] <author> Baruch Awerbuch, Yossi Azar, Serge Plotkin, and Orli Waarts. </author> <title> Competitive routing of virtual circuits with unknown duration. </title> <booktitle> In Proc. 5'th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1994. </year> <note> to appear. </note>
Reference-contexts: Example: distributed bandwidth management. An important example to which our model applies includes distributed bandwidth management algorithms in high-speed networks, that so far has only been considered in online centralized setting <ref> [AAF + 93, AAP93, AAPW94] </ref>. In case in which number of route selections is polynomial, our methods yield poly-logarithmically competitive algorithms. Bandwidth management is modeled by having server's resources be bandwidth of a certain communication link, and clients be connections entering the network. <p> flow control issue, i.e. decision on how much traffic to admit into the network given a fixed path from sender to receiver, is captured by the full-access version of the prob lem. * route selection issue, i.e. decision on how to route traffic, so as to minimize maximum link load, <ref> [AAF + 93, AKP + 93, AAPW94] </ref> is captured in our setting by maximum time deadlock reso lution. We stress that the "serially-competitive" routing algorithms, say in [AAF + 93, AAP93] do not work in the concurrent setting. <p> In the new algorithms, we build on techniques used in context of online resource allocation <ref> [AAF + 93, AKP + 93, AAP93, AAPW94] </ref> as well as on techniques used in field of distributed computing. Our algorithm is similar to the Luby-Nisan algorithm [LN93]. Structure of this extended abstract. Maximum-throughput problem is handled in Section 2 and Minimum-time (load) problem is handled in Section 3.
Reference: [ABFR93] <author> Baruch Awerbuch, Yair Bartal, Amos Fiat, and Adi Rosen. </author> <title> Competitive non-preemptive call control. </title> <booktitle> In Proc. 5'th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1993. </year> <note> to appear. </note>
Reference-contexts: The different variations of the bandwidth management problem are captured in our setting as follows. * admission control, i.e. decision on whether to admit an incoming connection, so as to maximize the total throughput, without exceeding link capacities <ref> [GGK + 93, LT94, ABFR93, AAP93] </ref>, is captured by the maximum-throughput version of the problem.
Reference: [ABK92] <author> Yossi Azar, Andrei Broder, and Anna Karlin. </author> <title> On-line load balancing. </title> <booktitle> In Proc. 33rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 218-225, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as <ref> [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94] </ref>.
Reference: [ACS94] <author> Baruch Awerbuch, Lenore Cowen, and Mark Smith. </author> <title> Efficient asynchronous distributed symmetry breaking. </title> <booktitle> In Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The work is motivated by deadlock resolution and resource allocation problems, in distributed server-client architectures. We consider a very general setting, which includes, as special cases, distributed bandwidth management in communication networks, as well as deadlock resolution [BT87, BBG83, BC89, AM86, AKP91], and "dining philosophers" <ref> [AS90, ACS94] </ref>. fl Johns Hopkins University, Baltimore, MD 21218, and MIT Lab. for Computer Science. E-mail: baruch@blaze.cs.jhu.edu. Supported by Air Force Contract TNDGAFOSR-86-0078, ARPA/Army contract DABT63-93-C-0038, ARO contract DAAL03-86-K-0171, NSF contract 9114440-CCR, DARPA contract N00014-J-92-1799, and a special grant from IBM. y Department of Computer Science, Tel-Aviv University. Email: azar@math.tau.ac.il. <p> Observe that in the maximum-throughput version, philosophers do not wait for for each other; we only want to maximize the number of philosophers that eat immediately, since after that, the food already becomes cold and thus uneatable. In the standard formulation of "dining philosophers" <ref> [AS90, ACS94] </ref> problem, philosophers are in fact ready to wait, and thus, instead of maximizing the number of philosophers who eat immediately ("throughput"), we are interested in minimizing time it will take to feed all philosophers. <p> Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [AGLP89] <author> Baruch Awerbuch, Andrew Goldberg, Michael Luby, and Serge Plotkin. </author> <title> Network decomposition and locality in distributed computation. </title> <booktitle> In Proc. 30th IEEE Symp. on Found. of Comp. Science, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: This is in fact the disadvantage of existing techniques in the field of distributed computing, such as algorithms for maximal independent sets, + 1 coloring, and dining philosophers <ref> [Lub86b, Lub86a, Lin87, GPS87, AGLP89, AS90] </ref>. This paper in fact achieves globally-optimum solutions by local asynchronous algorithms.
Reference: [AKP91] <author> Baruch Awerbuch, Shay Kutten, and David Peleg. </author> <title> Deadlock-free routing. </title> <booktitle> In Proc. 10th ACM Symp. on Principles of Dis-trib.Computing, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction 1.1 Informal problem statement Motivation. The work is motivated by deadlock resolution and resource allocation problems, in distributed server-client architectures. We consider a very general setting, which includes, as special cases, distributed bandwidth management in communication networks, as well as deadlock resolution <ref> [BT87, BBG83, BC89, AM86, AKP91] </ref>, and "dining philosophers" [AS90, ACS94]. fl Johns Hopkins University, Baltimore, MD 21218, and MIT Lab. for Computer Science. E-mail: baruch@blaze.cs.jhu.edu. <p> Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [AKP92] <author> Baruch Awerbuch, Shay Kutten, and David Peleg. </author> <title> Online load balancing in a distributed network. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 571-580, </pages> <year> 1992. </year>
Reference-contexts: Even though our results hold for most general case, to simplify our initial discussion and to develop Page 2 intuition, we will be restricting ourselves to the spe-cial case in which job run-time is one unit, (as in <ref> [AS90, AKP92] </ref>), e.g. run-time equals communication delay between servers and clients. As in [AKP92], the efficiency is measured by the competitive ratio in total running time of the distributed algorithm, including both the time to distributively construct and execute the schedule. <p> As in <ref> [AKP92] </ref>, the efficiency is measured by the competitive ratio in total running time of the distributed algorithm, including both the time to distributively construct and execute the schedule. In contrast, o*ine algorithm does not waste any time to distributively construct the schedule.
Reference: [AKP + 93] <author> Yossi Azar, B. Kalyanasundaram, Serge Plotkin, K. Pruhs, and Orli Waarts. </author> <title> On-line load balancing of temporary tasks. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <pages> pages 119-130, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: flow control issue, i.e. decision on how much traffic to admit into the network given a fixed path from sender to receiver, is captured by the full-access version of the prob lem. * route selection issue, i.e. decision on how to route traffic, so as to minimize maximum link load, <ref> [AAF + 93, AKP + 93, AAPW94] </ref> is captured in our setting by maximum time deadlock reso lution. We stress that the "serially-competitive" routing algorithms, say in [AAF + 93, AAP93] do not work in the concurrent setting. <p> In the new algorithms, we build on techniques used in context of online resource allocation <ref> [AAF + 93, AKP + 93, AAP93, AAPW94] </ref> as well as on techniques used in field of distributed computing. Our algorithm is similar to the Luby-Nisan algorithm [LN93]. Structure of this extended abstract. Maximum-throughput problem is handled in Section 2 and Minimum-time (load) problem is handled in Section 3.
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verifiction and hardness of approximation problems. </title> <booktitle> In Proc. 33rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 14-23, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The goal of this paper is to develop local algorithms with globally-optimum performance guarantees. The problems considered are related to "fractional" versions of maximum independent set and minimum coloring in hyper-graphs. While integer versions of these problem appear to be hard to approximate, <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, the versions, that happen to be the ones that matter in practice, do not fall into this class. <p> (at least, in case of virtual circuit routing), that capacity of each resource exceeds size of each job by a logarithmic factor, i.e. min c (e) = (log n) max d s (1) We comment that the general "integer" problem, without making an assumption of such type, is provably un-approximable <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, unless P = NP. Indeed, the maximum-throughput (minimum-time) problems, are in fact, generalization of maximum independent set (mini mum coloring, resp.) problem on hyper-graphs. 2.2 Max-throughput full-access algo rithm The algorithm executed by each job s (see Figure 1) works as follows.
Reference: [AM86] <author> Baruch Awerbuch and Silvio Micali. </author> <title> Dynamic deadlock resolution protocols. </title> <booktitle> In Proc. 27th IEEE Symp. on Found. of Comp. Science, </booktitle> <month> October </month> <year> 1986. </year>
Reference-contexts: 1 Introduction 1.1 Informal problem statement Motivation. The work is motivated by deadlock resolution and resource allocation problems, in distributed server-client architectures. We consider a very general setting, which includes, as special cases, distributed bandwidth management in communication networks, as well as deadlock resolution <ref> [BT87, BBG83, BC89, AM86, AKP91] </ref>, and "dining philosophers" [AS90, ACS94]. fl Johns Hopkins University, Baltimore, MD 21218, and MIT Lab. for Computer Science. E-mail: baruch@blaze.cs.jhu.edu. <p> Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [ANR92] <author> Yossi Azar, Joseph Naor, and Raphael Rom. </author> <title> The competitiveness of on-line assignment. </title> <booktitle> In Proc. 3rd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 203-210, </pages> <year> 1992. </year>
Reference-contexts: The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as <ref> [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94] </ref>.
Reference: [AS90] <author> Baruch Awerbuch and Mike Saks. </author> <title> A dining philosophers algorithm with polynomial response time. </title> <booktitle> In Proc. 31st IEEE Symp. on Found. of Comp. Science, </booktitle> <year> 1990. </year>
Reference-contexts: The work is motivated by deadlock resolution and resource allocation problems, in distributed server-client architectures. We consider a very general setting, which includes, as special cases, distributed bandwidth management in communication networks, as well as deadlock resolution [BT87, BBG83, BC89, AM86, AKP91], and "dining philosophers" <ref> [AS90, ACS94] </ref>. fl Johns Hopkins University, Baltimore, MD 21218, and MIT Lab. for Computer Science. E-mail: baruch@blaze.cs.jhu.edu. Supported by Air Force Contract TNDGAFOSR-86-0078, ARPA/Army contract DABT63-93-C-0038, ARO contract DAAL03-86-K-0171, NSF contract 9114440-CCR, DARPA contract N00014-J-92-1799, and a special grant from IBM. y Department of Computer Science, Tel-Aviv University. Email: azar@math.tau.ac.il. <p> This is in fact the disadvantage of existing techniques in the field of distributed computing, such as algorithms for maximal independent sets, + 1 coloring, and dining philosophers <ref> [Lub86b, Lub86a, Lin87, GPS87, AGLP89, AS90] </ref>. This paper in fact achieves globally-optimum solutions by local asynchronous algorithms. <p> Observe that in the maximum-throughput version, philosophers do not wait for for each other; we only want to maximize the number of philosophers that eat immediately, since after that, the food already becomes cold and thus uneatable. In the standard formulation of "dining philosophers" <ref> [AS90, ACS94] </ref> problem, philosophers are in fact ready to wait, and thus, instead of maximizing the number of philosophers who eat immediately ("throughput"), we are interested in minimizing time it will take to feed all philosophers. <p> Even though our results hold for most general case, to simplify our initial discussion and to develop Page 2 intuition, we will be restricting ourselves to the spe-cial case in which job run-time is one unit, (as in <ref> [AS90, AKP92] </ref>), e.g. run-time equals communication delay between servers and clients. As in [AKP92], the efficiency is measured by the competitive ratio in total running time of the distributed algorithm, including both the time to distributively construct and execute the schedule. <p> Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [AS92] <author> Sanjeev Arora and Shmuel Safra. </author> <title> Probabilistic checking of proofs. </title> <booktitle> In Proc. 33rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 2-13, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The goal of this paper is to develop local algorithms with globally-optimum performance guarantees. The problems considered are related to "fractional" versions of maximum independent set and minimum coloring in hyper-graphs. While integer versions of these problem appear to be hard to approximate, <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, the versions, that happen to be the ones that matter in practice, do not fall into this class. <p> (at least, in case of virtual circuit routing), that capacity of each resource exceeds size of each job by a logarithmic factor, i.e. min c (e) = (log n) max d s (1) We comment that the general "integer" problem, without making an assumption of such type, is provably un-approximable <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, unless P = NP. Indeed, the maximum-throughput (minimum-time) problems, are in fact, generalization of maximum independent set (mini mum coloring, resp.) problem on hyper-graphs. 2.2 Max-throughput full-access algo rithm The algorithm executed by each job s (see Figure 1) works as follows.
Reference: [BBG83] <author> J. Blazewick, J. Brzezinski, and G. Gambosi. </author> <title> Time-stamp approach to store-and forward deadlock prevention. </title> <journal> In IEEE Transactions on Communications, </journal> <volume> volume 35, </volume> <pages> pages 490-495, </pages> <month> May </month> <year> 1983. </year> <title> number 5. </title>
Reference-contexts: 1 Introduction 1.1 Informal problem statement Motivation. The work is motivated by deadlock resolution and resource allocation problems, in distributed server-client architectures. We consider a very general setting, which includes, as special cases, distributed bandwidth management in communication networks, as well as deadlock resolution <ref> [BT87, BBG83, BC89, AM86, AKP91] </ref>, and "dining philosophers" [AS90, ACS94]. fl Johns Hopkins University, Baltimore, MD 21218, and MIT Lab. for Computer Science. E-mail: baruch@blaze.cs.jhu.edu. <p> Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [BC89] <author> Barry J. Brachman and Samuel T. Chanson. </author> <title> A hierarchical solution for application level store-and-forward deadlock prevention. </title> <booktitle> In Proc. of the Annual ACM SIGCOMM Symposium on Communication Architectures and Protocols, </booktitle> <address> Austin, Texas, </address> <pages> pages 25-32. </pages> <publisher> ACM SIGCOMM, ACM, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: 1 Introduction 1.1 Informal problem statement Motivation. The work is motivated by deadlock resolution and resource allocation problems, in distributed server-client architectures. We consider a very general setting, which includes, as special cases, distributed bandwidth management in communication networks, as well as deadlock resolution <ref> [BT87, BBG83, BC89, AM86, AKP91] </ref>, and "dining philosophers" [AS90, ACS94]. fl Johns Hopkins University, Baltimore, MD 21218, and MIT Lab. for Computer Science. E-mail: baruch@blaze.cs.jhu.edu. <p> Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [BFKV92] <author> Yair Bartal, Amos Fiat, Howard Karloff, and R. Vorha. </author> <title> New algorithms for an ancient scheduling problem. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <year> 1992. </year> <pages> Page 9 </pages>
Reference-contexts: The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as <ref> [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94] </ref>.
Reference: [BGLR93] <author> M. Bellare, S. Goldwasser, C. Lund, and A. Russel. </author> <title> Efficient probabilistically checkable proofs and applications to approximation. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 294-303, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The goal of this paper is to develop local algorithms with globally-optimum performance guarantees. The problems considered are related to "fractional" versions of maximum independent set and minimum coloring in hyper-graphs. While integer versions of these problem appear to be hard to approximate, <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, the versions, that happen to be the ones that matter in practice, do not fall into this class. <p> (at least, in case of virtual circuit routing), that capacity of each resource exceeds size of each job by a logarithmic factor, i.e. min c (e) = (log n) max d s (1) We comment that the general "integer" problem, without making an assumption of such type, is provably un-approximable <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, unless P = NP. Indeed, the maximum-throughput (minimum-time) problems, are in fact, generalization of maximum independent set (mini mum coloring, resp.) problem on hyper-graphs. 2.2 Max-throughput full-access algo rithm The algorithm executed by each job s (see Figure 1) works as follows.
Reference: [BT87] <author> G. Bracha and S. Toueg. </author> <title> A distributed algorithm for generalized deadlock detection. </title> <journal> Distributed Computing, </journal> <volume> 2 </volume> <pages> 127-138, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction 1.1 Informal problem statement Motivation. The work is motivated by deadlock resolution and resource allocation problems, in distributed server-client architectures. We consider a very general setting, which includes, as special cases, distributed bandwidth management in communication networks, as well as deadlock resolution <ref> [BT87, BBG83, BC89, AM86, AKP91] </ref>, and "dining philosophers" [AS90, ACS94]. fl Johns Hopkins University, Baltimore, MD 21218, and MIT Lab. for Computer Science. E-mail: baruch@blaze.cs.jhu.edu. <p> Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [CM83] <author> K.M. Chandy and J. Misra. </author> <title> A distributed algorithm for detecting resource deadlocks in distributed systems. </title> <booktitle> Proceedings of the ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 157-164, </pages> <year> 1983. </year>
Reference-contexts: Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94]. Unfortunately, there exist no "competitive" distributed deadlock resolution strategies, in the sense that all known techniques for distributed symmetry breaking and deadlock resolution <ref> [CM83, BT87, BBG83, BC89, AM86, AKP91, AS90, ACS94] </ref>, even though ensure eventual progress, have competitive ratio that may grow linearly in the number of processors involved. Results and techniques of this paper.
Reference: [FGL + 91] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost np-complete. </title> <booktitle> In Proc. 32nd IEEE Symp. on Found. of Comp. Science, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: The goal of this paper is to develop local algorithms with globally-optimum performance guarantees. The problems considered are related to "fractional" versions of maximum independent set and minimum coloring in hyper-graphs. While integer versions of these problem appear to be hard to approximate, <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, the versions, that happen to be the ones that matter in practice, do not fall into this class. <p> (at least, in case of virtual circuit routing), that capacity of each resource exceeds size of each job by a logarithmic factor, i.e. min c (e) = (log n) max d s (1) We comment that the general "integer" problem, without making an assumption of such type, is provably un-approximable <ref> [BGLR93, FGL + 91, AS92, ALM + 92] </ref>, unless P = NP. Indeed, the maximum-throughput (minimum-time) problems, are in fact, generalization of maximum independent set (mini mum coloring, resp.) problem on hyper-graphs. 2.2 Max-throughput full-access algo rithm The algorithm executed by each job s (see Figure 1) works as follows.
Reference: [GGK + 93] <author> Juan Garay, Inder Gopal, Shay Kutten, Yishay Mansour, and Moti Yung. </author> <title> Efficient on-line call control algorithms. </title> <booktitle> In Proceedings of 2'nd Annual Israel Conference on Theory of Computing and Systems, </booktitle> <year> 1993. </year>
Reference-contexts: The different variations of the bandwidth management problem are captured in our setting as follows. * admission control, i.e. decision on whether to admit an incoming connection, so as to maximize the total throughput, without exceeding link capacities <ref> [GGK + 93, LT94, ABFR93, AAP93] </ref>, is captured by the maximum-throughput version of the problem.
Reference: [GPS87] <author> A. V. Goldberg, S. Plotkin, and G. Shannon. </author> <title> Parallel symmetry breaking in sparse graphs. </title> <booktitle> In Proc. 19th ACM Symp. on Theory of Computing. ACM SIGACT, ACM, </booktitle> <month> May </month> <year> 1987. </year>
Reference-contexts: This is in fact the disadvantage of existing techniques in the field of distributed computing, such as algorithms for maximal independent sets, + 1 coloring, and dining philosophers <ref> [Lub86b, Lub86a, Lin87, GPS87, AGLP89, AS90] </ref>. This paper in fact achieves globally-optimum solutions by local asynchronous algorithms.
Reference: [Lin87] <author> Nathan Linial. </author> <title> Locality as an obstacle to distributed computing. </title> <booktitle> In 27 th Annual Symposium on Foundations of Computer Science. IEEE, </booktitle> <month> October </month> <year> 1987. </year>
Reference-contexts: This is in fact the disadvantage of existing techniques in the field of distributed computing, such as algorithms for maximal independent sets, + 1 coloring, and dining philosophers <ref> [Lub86b, Lub86a, Lin87, GPS87, AGLP89, AS90] </ref>. This paper in fact achieves globally-optimum solutions by local asynchronous algorithms.
Reference: [LMR88] <author> T. Leighton, B. Maggs, and S. Rao. </author> <title> Universal packet routing algorithms. </title> <booktitle> In Proc. 29th IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 256-271. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: Nevertheless, if we assume that min e c (e) = (log n) max d s then techniques of <ref> [LMR88] </ref> can be used to achieve a randomized algorithm for the minimum-time deadlock resolution. This increases the competitive ratio only by a constant factor. Specifically, a job chooses a random slot uniformly among the target number of time slots.
Reference: [LN93] <author> Michael Luby and Noam Nissan. </author> <title> A parallel approximation algorithm for positive linear programming. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 448-457, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Related work Centralized algorithms approximating the maximum fractional independent set and maximum fractional coloring, can be easily obtained by linear programming or incorporating the techniques in [PST91]. Our problem can be viewed as dual of positive linear programs considered by Luby and Nisan <ref> [LN93] </ref> who also provided a parallel approximation algorithm, which, however, lacks the desired locality properties. The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in [PST91] yields centralized approximations. <p> In the new algorithms, we build on techniques used in context of online resource allocation [AAF + 93, AKP + 93, AAP93, AAPW94] as well as on techniques used in field of distributed computing. Our algorithm is similar to the Luby-Nisan algorithm <ref> [LN93] </ref>. Structure of this extended abstract. Maximum-throughput problem is handled in Section 2 and Minimum-time (load) problem is handled in Section 3. We prove the minimum-time fractional algorithm in Section 4.
Reference: [LT94] <author> Richard J. Lipton and Andrew Tomkins. </author> <title> Online interval scheduling. </title> <booktitle> In Proc. 5th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 302-311, </pages> <address> Arlington, VA, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: The different variations of the bandwidth management problem are captured in our setting as follows. * admission control, i.e. decision on whether to admit an incoming connection, so as to maximize the total throughput, without exceeding link capacities <ref> [GGK + 93, LT94, ABFR93, AAP93] </ref>, is captured by the maximum-throughput version of the problem.
Reference: [Lub86a] <author> M. Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM J. on Comput., </journal> <volume> 15(4) </volume> <pages> 1036-1053, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: This is in fact the disadvantage of existing techniques in the field of distributed computing, such as algorithms for maximal independent sets, + 1 coloring, and dining philosophers <ref> [Lub86b, Lub86a, Lin87, GPS87, AGLP89, AS90] </ref>. This paper in fact achieves globally-optimum solutions by local asynchronous algorithms.
Reference: [Lub86b] <author> Michael Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM J. on Comput., </journal> <volume> 15(4) </volume> <pages> 1036-1053, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: This is in fact the disadvantage of existing techniques in the field of distributed computing, such as algorithms for maximal independent sets, + 1 coloring, and dining philosophers <ref> [Lub86b, Lub86a, Lin87, GPS87, AGLP89, AS90] </ref>. This paper in fact achieves globally-optimum solutions by local asynchronous algorithms.
Reference: [PST91] <author> S. Plotkin, D. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <booktitle> In Proc. 32nd IEEE Symp. on Found. of Comp. Science, </booktitle> <year> 1991. </year>
Reference-contexts: Related work Centralized algorithms approximating the maximum fractional independent set and maximum fractional coloring, can be easily obtained by linear programming or incorporating the techniques in <ref> [PST91] </ref>. Our problem can be viewed as dual of positive linear programs considered by Luby and Nisan [LN93] who also provided a parallel approximation algorithm, which, however, lacks the desired locality properties. <p> The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in <ref> [PST91] </ref> yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94].
Reference: [PSW94] <author> Cindy Phillips, Cliff Stein, and Joel Wein. </author> <title> Task scheduling in networks, center for advanced technology in telecommunications. </title> <type> Report 94-71, </type> <institution> Polytechnic Unviversity, Brooklyn, </institution> <address> NY, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as <ref> [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94] </ref>.
Reference: [Rag86] <author> Prabhakar Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximating packing integer programs. </title> <booktitle> In Proc. 27th IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 10-18, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in <ref> [RT85, Rag86] </ref> with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94].
Reference: [RT85] <author> P. Raghavan and C.D. Thompson. </author> <title> Provably good routing in graphs: Regular arrays. </title> <booktitle> In Proc. 17th ACM Symp. on Theory of Computing, </booktitle> <month> May </month> <year> 1985. </year>
Reference-contexts: The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in <ref> [RT85, Rag86] </ref> with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94].
Reference: [SM90] <author> F. Shahrokhi and D.W. Matula. </author> <title> The maximum concurrent flow problem. </title> <journal> J. of the ACM, </journal> <volume> 37:318 - 334, </volume> <year> 1990. </year>
Reference-contexts: Estimates h s P;e , which are the load on the servers with respect to this source, are determined according to the messages Current Load s P (h) received from servers. We should note that the weight is a measure for the usage of the whole subset (e.g. <ref> [SM90] </ref>), rather than for a specific server. We may stop increasing the load on set well before any single server over-utilized. Procedure Pump s (P; *) is used to increase the assignment of job by * factor; in this case we choose * = 1.
Reference: [SWW91] <author> D.B. Shmoys, J. Wein, and D.P. Williamson. </author> <title> Scheduling parallel machines on-line. </title> <booktitle> In Proc. 32nd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 131-140, </pages> <year> 1991. </year> <pages> Page 10 </pages>
Reference-contexts: In contrast, o*ine algorithm does not waste any time to distributively construct the schedule. Unlike in online centralized version of the somewhat simpler problem, where, as pointed out by <ref> [SWW91] </ref>, we can always achieve a factor of 2 in completion time by essentially reducing the problem to an o*ine problem, this option does not exist in the distributed version of the problems considered in this paper. <p> The deadlock resolution and job scheduling problems are analogous to fractional versions of maximum independent set and coloring problems in hyper-graphs. Combining techniques in [RT85, Rag86] with methods in [PST91] yields centralized approximations. Online centralized scheduling and load balancing algorithms were considered various of papers such as <ref> [SWW91, ANR92, ABK92, BFKV92, AAF + 93, PSW94] </ref>.
References-found: 36

