URL: http://www.cs.rice.edu/~druschel/HotOS-VI.ps
Refering-URL: http://www.cs.rice.edu/~druschel/
Root-URL: 
Email: @cs.rice.edu  
Title: Extensible Kernels are Leading OS Research Astray  
Author: Peter Druschel, Vivek S. Pai, Willy Zwaenepoel fdruschel vivek willyg 
Affiliation: Rice University Computer Science Department  
Abstract: We argue that ongoing research in extensible kernels largely fails to address the real challenges facing the OS community. Instead, these efforts have become entangled in trying to solve the safety problems that extensibility itself introduces into OS design. We propose a pragmatic approach to extensibility, where kernel extensions are used in experimental settings to evaluate and develop OS enhancements for demanding applications. Once developed and well understood, these enhancements are then migrated into the base operating system for production use. This approach obviates the need for guaranteeing safety of kernel extensions, allowing the OS research community to re-focus on the real challenges in OS design and implementation. To provide a concrete example of this approach, we analyze the techniques used in experimental HTTP servers to show how proper application design combined with generic enhancements to operating systems can provide the same benefits without requiring application-specific kernel extensions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Berners-Lee, R. Fielding, and H. Hrystyk. </author> <title> Hypertext transfer protocol - HTTP/1.0. Request for Comments 1945, </title> <institution> MIT Laboratory for Computer Science (Berners-Lee, Frystyk), UC Irvine (Fielding), </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: The next section provides a concrete example of how a set of apparently application-specific extensions can be recast in the form of enhancements that do not require general kernel extensibility. 2. Analysis of WWW Servers HTTP <ref> [1] </ref> servers (also called webservers) have been one of the benchmark applications used by supporters of extensible kernels. However, a close examination of the extensions used to support webservers suggests that most of the benefits could equally be achieved by generic enhancements to the base operating system.
Reference: [2] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fiuczynski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating System Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Projects like SPIN, Aegis, and VINO show performance improvements on a small set of benchmark applications that use kernel extensions <ref> [2, 6, 16] </ref>. Unfortunately, it is unclear to what extent the performance gains are due to extensi bility, rather than merely resulting from optimizations that could equally be applied to an operating system that is not extensible. <p> Such technologies include type-safe languages, trusted compilers, garbage-collected kernels, trusted dynamic linkers, capabilities, sandboxing, sophisticated resource management, proof-carrying executables, and even kernel-level transactional facilities <ref> [2, 6, 12, 14, 16, 18] </ref>. In addition to safety concerns, extensible kernels also raise difficult questions with respect to compatibility, interoperability, and evolution of OS implementations. In conventional systems, applications and operating system interact only through the API.
Reference: [3] <author> R. T. Braden. </author> <title> T/TCP - TCP extensions for transactions. Request for Comments 1644, </title> <address> USC-ISI, </address> <year> 1994. </year>
Reference-contexts: By allowing the application to provide this information (e.g., through socket options), the TCP implementation can exploit this and other piggy-backing opportunities, thereby reducing the number of messages required per HTTP transaction. The proposed transactional TCP implementation provides a similar approach <ref> [3] </ref>. All of these optimizations can be enabled through a parametric customization interface, which is inherently safe.
Reference: [4] <author> P. Cao, E. Felten, and K. Li. </author> <title> Implementation and performance of application-controlled file caching. </title> <booktitle> In First Symposium on Operating System Design Implementation (OSDI), </booktitle> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: It is only the latter category that concerns us, since this type of extension requires the additional, safety-related complexity in extensible kernels. For example, application-controlled file caching <ref> [4] </ref> and programmable packet filters [11] are inherently safe customizations. <p> System calls like madvise () exist, and they are inherently safe. Allowing an application to perform file prefetching and cache control has been shown to help performance, but such a system can be implemented using only parameterized interfaces <ref> [4] </ref> (i.e., by inherently safe customizations). Furthermore, the same mechanisms that allow a webserver to prefetch files after sending a hyperlinked document can be used by applications like compilers that need to read included files.
Reference: [5] <author> A. Chankhunthod, P. B. Danzig, C. Neerdaels, M. F. Schwartz, and K. J. Worrell. </author> <title> A hierarchical internet object cache. </title> <booktitle> In USENIX 1996 Annual Technical Conference, </booktitle> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: However, a close examination of the extensions used to support webservers suggests that most of the benefits could equally be achieved by generic enhancements to the base operating system. By surveying techniques used in publically-available web servers <ref> [15, 5] </ref> and in experimental designs [8], we have identified eight areas of interest where OS performance can impact webservers. They are: TCP implementation performance, TCP protocol optimizations, forking/switching overhead, filesystem performance, VM/cache control, data copying costs, double-buffering, and TCP checksum calculation. <p> To demonstrate the benefits of performance-conscious webserver design and IO-Lite, we developed a webserver called Flash, loosely based on thttpd [15]. Without using IO-Lite, Flash already outperforms Harvest <ref> [5] </ref> and thttpd. When serving small files, Flash beats thttpd by over 200% and Harvest by over 50% (670 connections/sec for Flash versus 391 for Harvest and 214 for thttpd when serving 500 byte files).
Reference: [6] <author> D. R. Engler, M. F. Kaashoek, and J. O'Toole. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating System Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Projects like SPIN, Aegis, and VINO show performance improvements on a small set of benchmark applications that use kernel extensions <ref> [2, 6, 16] </ref>. Unfortunately, it is unclear to what extent the performance gains are due to extensi bility, rather than merely resulting from optimizations that could equally be applied to an operating system that is not extensible. <p> Such technologies include type-safe languages, trusted compilers, garbage-collected kernels, trusted dynamic linkers, capabilities, sandboxing, sophisticated resource management, proof-carrying executables, and even kernel-level transactional facilities <ref> [2, 6, 12, 14, 16, 18] </ref>. In addition to safety concerns, extensible kernels also raise difficult questions with respect to compatibility, interoperability, and evolution of OS implementations. In conventional systems, applications and operating system interact only through the API.
Reference: [7] <author> G. R. Ganger and M. F. Kaashoek. </author> <title> Embedded inodes and explicit grouping: Exploiting disk bandwidth for small files. </title> <booktitle> In USENIX 1997 Annual Technical Conference, </booktitle> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: Due to current HTTP document size distributions, webservers are particularly sensitive to small file performance. Generic filesystem optimizations that improve performance for small files exist. Interestingly, one such filesystem was developed in the context of a project to support webservers through extensible kernels <ref> [7] </ref>. This confirms our point that experimentation with extensible kernels can lead to generic OS enhancements. VM/cache control Applications may know what pages of memory and what files are likely to be used. System calls like madvise () exist, and they are inherently safe.
Reference: [8] <author> M. F. Kaashoek, D. R. Engler, G. R. Ganger, and D. A. Wal-lach. </author> <title> Server operating systems. </title> <booktitle> In 1996 SIGOPS European Workshop, </booktitle> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: However, a close examination of the extensions used to support webservers suggests that most of the benefits could equally be achieved by generic enhancements to the base operating system. By surveying techniques used in publically-available web servers [15, 5] and in experimental designs <ref> [8] </ref>, we have identified eight areas of interest where OS performance can impact webservers. They are: TCP implementation performance, TCP protocol optimizations, forking/switching overhead, filesystem performance, VM/cache control, data copying costs, double-buffering, and TCP checksum calculation. <p> The webserver is not involved with this optimization at all, and once again, layer transparency is preservedthe same networking code responsible for the checksums maintains the checksum cache, rather than involving the file system or the application, like the approach used in Cheetah <ref> [8] </ref>. To demonstrate the benefits of performance-conscious webserver design and IO-Lite, we developed a webserver called Flash, loosely based on thttpd [15]. Without using IO-Lite, Flash already outperforms Harvest [5] and thttpd.
Reference: [9] <author> S. J. Leffler, M. K. McKusick, M. J. Karels, and J. S. Quarter-man. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: The basic problems have been under stood for some time, and several groups have implemented successively better solutions in regular, commercial operating systemsthe Fast Filesystem (FFS) from BSD <ref> [9] </ref>, the extent-like approach in Sun's UFS [10], and more radical re-designs like SGI's XFS [17]. Changes that broadly improve filesystem performance also improve webserver performance. Due to current HTTP document size distributions, webservers are particularly sensitive to small file performance.
Reference: [10] <author> L. McVoy and S. Kleiman. </author> <title> Extent-like performance from a unix file system. </title> <booktitle> In Proc. Winter 1991 USENIX Conf., </booktitle> <pages> pages 33-43, </pages> <address> Dallas, TX (USA), 1991. </address> <publisher> USENIX. </publisher>
Reference-contexts: The basic problems have been under stood for some time, and several groups have implemented successively better solutions in regular, commercial operating systemsthe Fast Filesystem (FFS) from BSD [9], the extent-like approach in Sun's UFS <ref> [10] </ref>, and more radical re-designs like SGI's XFS [17]. Changes that broadly improve filesystem performance also improve webserver performance. Due to current HTTP document size distributions, webservers are particularly sensitive to small file performance. Generic filesystem optimizations that improve performance for small files exist.
Reference: [11] <author> J. C. Mogul, R. F. Rashid, and M. J. Accetta. </author> <title> The packet filter: An efficient mechanism for user-level network code. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 39-51, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: It is only the latter category that concerns us, since this type of extension requires the additional, safety-related complexity in extensible kernels. For example, application-controlled file caching [4] and programmable packet filters <ref> [11] </ref> are inherently safe customizations. They are safe either by only allowing the application to select from a set of pre-defined options, or by using a constrained extension language that rules out potentially unsafe issues like looping, dynamic memory allocation, and the ability to retain state between invocations.
Reference: [12] <author> G. C. Necula and P. Lee. </author> <title> Safe kernel extensions without run-time checking. </title> <booktitle> In Proc. 2nd Symp. on Operating Systems Design and Implementation, </booktitle> <address> Seattle, WA, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Such technologies include type-safe languages, trusted compilers, garbage-collected kernels, trusted dynamic linkers, capabilities, sandboxing, sophisticated resource management, proof-carrying executables, and even kernel-level transactional facilities <ref> [2, 6, 12, 14, 16, 18] </ref>. In addition to safety concerns, extensible kernels also raise difficult questions with respect to compatibility, interoperability, and evolution of OS implementations. In conventional systems, applications and operating system interact only through the API.
Reference: [13] <author> V. Pai, P. Druschel, and W. Zwaenepoel. IO-Lite: </author> <title> A unified I/O buffering and caching system. </title> <address> http://www.cs.rice.edu/- vivek/IO-Lite.html. </address>
Reference-contexts: From the application writer's standpoint, the benefits come transparently, and within IO-Lite, the benefits come from a unified approach to data transfer, rather than webserver-centric code. A prototype system has been implemented on DEC Alpha workstations running Digital UNIX. More details can be found in Pai et al <ref> [13] </ref>. Using IO-Lite in a webserver transparently eliminates data copying and double-buffering since applications, filesystem, and networking code can all share the same buffers. More importantly, the same mechanisms apply when using CGI programs, where copying costs can be particularly significant. <p> We also ran the small file test on a 166 MHz Pentium machine running FreeBSD connected to a 100 Mbit/s Fast Ethernet, and we achieved over 1100 connections/sec. More details can be found in Pai et al. <ref> [13] </ref> 3. Summary In conclusion, the host of difficult questions raised by extensible kernels suggests that this may be an idea whose time will never come.
Reference: [14] <author> P. Pardyak and B. N. Bershad. </author> <title> Dynamic binding for an extensible system. </title> <booktitle> In Proc. 2nd Symp. on Operating Systems Design and Implementation, </booktitle> <address> Seattle, WA, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Such technologies include type-safe languages, trusted compilers, garbage-collected kernels, trusted dynamic linkers, capabilities, sandboxing, sophisticated resource management, proof-carrying executables, and even kernel-level transactional facilities <ref> [2, 6, 12, 14, 16, 18] </ref>. In addition to safety concerns, extensible kernels also raise difficult questions with respect to compatibility, interoperability, and evolution of OS implementations. In conventional systems, applications and operating system interact only through the API. <p> Efforts in building extensible kernels should focus on mechanisms that allow flexible and powerful addition and interposition of kernel extensions, such as SPIN's dynamic binding framework <ref> [14] </ref>. Once in place, such kernels should then be used to support research into generic OS enhancements and inherently safe customizations that advance the state-of-the-art in OS design and implementation.
Reference: [15] <author> J. Poskanzer. </author> <note> thttpd tiny/turbo/throttling http server. http://www.acme.com/software/thttpd/. </note>
Reference-contexts: However, a close examination of the extensions used to support webservers suggests that most of the benefits could equally be achieved by generic enhancements to the base operating system. By surveying techniques used in publically-available web servers <ref> [15, 5] </ref> and in experimental designs [8], we have identified eight areas of interest where OS performance can impact webservers. They are: TCP implementation performance, TCP protocol optimizations, forking/switching overhead, filesystem performance, VM/cache control, data copying costs, double-buffering, and TCP checksum calculation. <p> To demonstrate the benefits of performance-conscious webserver design and IO-Lite, we developed a webserver called Flash, loosely based on thttpd <ref> [15] </ref>. Without using IO-Lite, Flash already outperforms Harvest [5] and thttpd. When serving small files, Flash beats thttpd by over 200% and Harvest by over 50% (670 connections/sec for Flash versus 391 for Harvest and 214 for thttpd when serving 500 byte files).
Reference: [16] <author> M. I. Seltzer, Y. Endo, C. Small, and K. A. Smith. </author> <title> Dealing with disaster: Surviving misbehaved kernel extensions. </title> <booktitle> In Proc. 2nd Symp. on Operating Systems Design and Implementation, </booktitle> <address> Seattle, WA, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Projects like SPIN, Aegis, and VINO show performance improvements on a small set of benchmark applications that use kernel extensions <ref> [2, 6, 16] </ref>. Unfortunately, it is unclear to what extent the performance gains are due to extensi bility, rather than merely resulting from optimizations that could equally be applied to an operating system that is not extensible. <p> Such technologies include type-safe languages, trusted compilers, garbage-collected kernels, trusted dynamic linkers, capabilities, sandboxing, sophisticated resource management, proof-carrying executables, and even kernel-level transactional facilities <ref> [2, 6, 12, 14, 16, 18] </ref>. In addition to safety concerns, extensible kernels also raise difficult questions with respect to compatibility, interoperability, and evolution of OS implementations. In conventional systems, applications and operating system interact only through the API.
Reference: [17] <author> A. Sweeney, D. Doucette, W. Hu, C. Anderson, M. Nishi-moto, and G. Peck. </author> <title> Scalability in the XFS file system. </title> <booktitle> In USENIX 1996 Annual Technical Conference, </booktitle> <pages> pages 1-14, </pages> <address> San Diego, CA, </address> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: The basic problems have been under stood for some time, and several groups have implemented successively better solutions in regular, commercial operating systemsthe Fast Filesystem (FFS) from BSD [9], the extent-like approach in Sun's UFS [10], and more radical re-designs like SGI's XFS <ref> [17] </ref>. Changes that broadly improve filesystem performance also improve webserver performance. Due to current HTTP document size distributions, webservers are particularly sensitive to small file performance. Generic filesystem optimizations that improve performance for small files exist.
Reference: [18] <author> R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 203-216, </pages> <year> 1993. </year>
Reference-contexts: Such technologies include type-safe languages, trusted compilers, garbage-collected kernels, trusted dynamic linkers, capabilities, sandboxing, sophisticated resource management, proof-carrying executables, and even kernel-level transactional facilities <ref> [2, 6, 12, 14, 16, 18] </ref>. In addition to safety concerns, extensible kernels also raise difficult questions with respect to compatibility, interoperability, and evolution of OS implementations. In conventional systems, applications and operating system interact only through the API.
References-found: 18

