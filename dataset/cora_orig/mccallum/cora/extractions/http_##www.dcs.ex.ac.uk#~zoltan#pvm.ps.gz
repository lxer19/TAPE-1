URL: http://www.dcs.ex.ac.uk/~zoltan/pvm.ps.gz
Refering-URL: http://www.dcs.ex.ac.uk/~zoltan/
Root-URL: http://www.dcs.ex.ac.uk
Email: E-mail: juhasz@elod.vein.hu  
Phone: 2  
Title: A PVM Implementation of a Portable Parallel Image Processing Library  
Author: Zoltan Juhasz ? and Danny Crookes 
Address: Veszprem P.O.Box 158, H-8201 Hungary  BT7 1NN, United Kingdom  
Affiliation: 1 Department of Information Systems, University of Veszprem  Department of Computer Science, The Queen's University of Belfast Belfast  
Abstract: This paper presents a portable parallel image processing library, which provides a high-level transparent programming model for image processing application development. The library is implemented using the PVM message-passing environment in order to achieve maximum portability. The paper describes the layered software model developed to provide extensibility and to hide the details of parallelism and the idiosyncrasies of the various communication technologies. Implementation details of the image processing library and the abstract communications layer are described and we report on the performance of the library operations we achieved on Ethernet and ATM network based workstation clusters.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Crookes, P. J. Morrow and P. J. McParland, IAL: </author> <title> a parallel image processing programming language, IEE Proceedings, Part I, </title> <note> Vol 137 No 3 (June 1990) pp 176-182. </note>
Reference-contexts: Data structures include image, vector (1-D arrays, eg. histograms) and template types. The template (or mask, window, neighbourhood) is a 2-D array holding weights for neighbourhood operations such as convolution. The library operations are at the complete image level and are based on Image Algebra <ref> [5, 1] </ref> and related programming languages like Apply, Adapt [7] and Tulip [6]. The main operation classes of the library are: image I/O (eg. file input and output, image display and capture); point operations (eg.
Reference: 2. <author> Jack J. Dongarra and Tom Dunigan, </author> <title> Message-Passing Performance of Various Computers, </title> <type> Technical Report, ORNL, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: With current networks T s can typically be around 1000 times T w <ref> [2] </ref>. Thus for small message lengths, the startup time dominates communication time.
Reference: 3. <author> S. G. Dykes, X. Zhang, Y. Zhou and H. Yang, </author> <title> Computation and communication patterns of large-scale image convolutions on parallel architectures, </title> <booktitle> in Proc. 8th Int. Parallel Processing Symposium, </booktitle> <publisher> IEEE Press, </publisher> <month> April, </month> <year> 1994, </year> <pages> pp. 926-931. </pages>
Reference-contexts: For some applications, networked workstations can provide near supercomputer performance with minimal additional investment. As a result, many scientific and high-performance applications have been ported to these systems. Computer vision and image processing (CVIP) applications are one of the potential candidates that can benefit from this architecture <ref> [3] </ref>. Unfortunately, the efficient implementation or porting of CVIP programs requires parallel programming expertise, which is a drawback for image processing application developers.
Reference: 4. <author> Al Geist et al., </author> <title> PVM User's Guide and Reference Manual, </title> <month> September </month> <year> 1994. </year>
Reference: 5. <author> G. X. Ritter, J. N. Wilson and J. L. Davidson, </author> <title> Image Algebra: an overview, Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> No. </volume> <pages> 49 (1990) pp 297-331. </pages>
Reference-contexts: Data structures include image, vector (1-D arrays, eg. histograms) and template types. The template (or mask, window, neighbourhood) is a 2-D array holding weights for neighbourhood operations such as convolution. The library operations are at the complete image level and are based on Image Algebra <ref> [5, 1] </ref> and related programming languages like Apply, Adapt [7] and Tulip [6]. The main operation classes of the library are: image I/O (eg. file input and output, image display and capture); point operations (eg.
Reference: 6. <author> J. A. Steele, </author> <title> An abstract machine approach to environments for image interpretation on transputers, </title> <type> PhD Thesis, </type> <institution> The Queen's University of Belfast, </institution> <year> 1994. </year>
Reference-contexts: The template (or mask, window, neighbourhood) is a 2-D array holding weights for neighbourhood operations such as convolution. The library operations are at the complete image level and are based on Image Algebra [5, 1] and related programming languages like Apply, Adapt [7] and Tulip <ref> [6] </ref>. The main operation classes of the library are: image I/O (eg. file input and output, image display and capture); point operations (eg.
Reference: 7. <author> Jon A. Webb, </author> <title> Steps Toward Architecture-Independent Image Processing, </title> <booktitle> IEEE Computer, </booktitle> <month> February </month> <year> 1992, </year> <month> 21-31. </month> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The template (or mask, window, neighbourhood) is a 2-D array holding weights for neighbourhood operations such as convolution. The library operations are at the complete image level and are based on Image Algebra [5, 1] and related programming languages like Apply, Adapt <ref> [7] </ref> and Tulip [6]. The main operation classes of the library are: image I/O (eg. file input and output, image display and capture); point operations (eg.
References-found: 7

