URL: http://www.scms.rgu.ac.uk/staff/smc/papers/ekaw91.ps
Refering-URL: http://www.scms.rgu.ac.uk/research/kbs/krustworks/krustpub.html
Root-URL: 
Title: Machine Learning, Knowledge Base Refinement and Knowledge Acquisition: Systems which Cope with Incomplete Inconsistent Knowledge Bases  
Author: D Sleeman, Susan M Craw Ian G Ellery Sunil Sharma Peter Edwards In Marc Lister and Brian R Gaines, 
Date: 211.  
Note: editors, Proceedings of the Fifth Eu-ropean Knowledge Acquisition Workshop (EKAW91), pages 332-342, Crieff, UK, 1992. GMD Studien Nr.  
Address: King's College  Aberdeen, AB9 2UE Scotland, UK  Ab  East Anglia, Norwich, NR4 7JT.  
Affiliation: Department of Computing Science  University of Aberdeen  School of Computer and Mathematical Sciences, The Robert Gordon Institute of Technology,  Computing Centre, University of  
Pubnum: erdeen, AB1 1HG.  
Abstract: There are clearly three distinct phases in the production of a knowledge-based system, namely: knowledge acquisition, the encoding of the knowledge in a computer-based system, and its refinement. To date these phases have often been undertaken independently of each other; and the latter two phases are only now beginning to benefit from computer support. As knowledge bases (KBs) get larger and more complex, it is important that tools be developed to help detect errors and omissions, and then correct them. We need to develop a range of techniques for coping with incomplete KBs, which must be incorporated into (future) intelligent systems. Over the last three years a number of systems have been built at Aberdeen which deal with KBs which are both incomplete and inconsistent, namely: KRUST, CREATOR and REFINER. These systems are outlined, we discuss how we intend developing them further and describe their use as knowledge acquisition/knowledge refinement tools. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Boose JH, Bradshaw JM. </author> <year> (1987). </year> <title> Expertise Transfer and Complex Problems: Using AQUINAS as a Knowledge Acquisition Workbench for Knowledge-Based Systems. </title> <journal> Int J Man-Machine Studies, </journal> <pages> 3-28. </pages>
Reference-contexts: To date these phases have often been undertaken independently of each other; and the latter two phases are only now beginning to benefit from computer support. Examples of computer systems which support knowledge acquisition are ETS/AQUINAS <ref> [1] </ref>, SHELLEY [2] (based on the KADS methodology), and ProtoKEW [3]. In recent years, there have been important attempts to combine these phases within single systems; this work has been undertaken primarily by McDermott and his co-workers [4].
Reference: [2] <author> Anjewierden A. </author> <year> (1990). </year> <title> Shelley User's Guide. </title> <type> Technical Report UvA-C*-SUG-1.00, </type> <institution> University of Amsterdam. </institution>
Reference-contexts: To date these phases have often been undertaken independently of each other; and the latter two phases are only now beginning to benefit from computer support. Examples of computer systems which support knowledge acquisition are ETS/AQUINAS [1], SHELLEY <ref> [2] </ref> (based on the KADS methodology), and ProtoKEW [3]. In recent years, there have been important attempts to combine these phases within single systems; this work has been undertaken primarily by McDermott and his co-workers [4].
Reference: [3] <author> Shadbolt N, Wielinga B. </author> <year> (1990). </year> <title> Generation of Support Tools. </title> <editor> In Wielinga B. et al. </editor> <title> (eds) Current Trends in Knowledge Acquisition, </title> <publisher> IOS Press, Amsterdam, </publisher> <pages> 313-338. </pages>
Reference-contexts: To date these phases have often been undertaken independently of each other; and the latter two phases are only now beginning to benefit from computer support. Examples of computer systems which support knowledge acquisition are ETS/AQUINAS [1], SHELLEY [2] (based on the KADS methodology), and ProtoKEW <ref> [3] </ref>. In recent years, there have been important attempts to combine these phases within single systems; this work has been undertaken primarily by McDermott and his co-workers [4].
Reference: [4] <author> Marcus S. </author> <title> (1988) Automating Knowledge Acquisition for Expert Systems. </title> <publisher> Kluwer, </publisher> <address> Boston. </address>
Reference-contexts: Examples of computer systems which support knowledge acquisition are ETS/AQUINAS [1], SHELLEY [2] (based on the KADS methodology), and ProtoKEW [3]. In recent years, there have been important attempts to combine these phases within single systems; this work has been undertaken primarily by McDermott and his co-workers <ref> [4] </ref>. As knowledge bases (KBs) get larger and more complex, it is important that tools be developed to help detect errors and omissions [5], and then correct them. We need to develop a range of techniques for coping with incomplete KBs, which must be incorporated into (future) intelligent systems.
Reference: [5] <author> Suwa M. Scott AC. </author> <title> Shortliffe EH. (1984) Completeness and Consistency in a Rule-Based System. In: Buchanan BG, Shortliffe EH (eds) Rule-Based Expert Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, </address> <pages> 159-170. </pages>
Reference-contexts: In recent years, there have been important attempts to combine these phases within single systems; this work has been undertaken primarily by McDermott and his co-workers [4]. As knowledge bases (KBs) get larger and more complex, it is important that tools be developed to help detect errors and omissions <ref> [5] </ref>, and then correct them. We need to develop a range of techniques for coping with incomplete KBs, which must be incorporated into (future) intelligent systems.
Reference: [6] <author> Gentner D. </author> <year> (1983) </year> <month> Structure-mapping: </month> <title> A Theoretical Framework for Analogy. </title> <booktitle> Cognitive Science; 7 </booktitle> <pages> 155-170. </pages>
Reference-contexts: We need to develop a range of techniques for coping with incomplete KBs, which must be incorporated into (future) intelligent systems. It should be noted, in passing, that humans have a range of techniques for coping with such situations including: adding plausible assumptions, using analogies <ref> [6, 7] </ref>, and negative inferences. Over the last three years several systems have been built at Aberdeen which deal with KBs which are both incomplete and inconsistent; for a more general overview of recent work in knowledge refinement and "apprentice systems", see [8].
Reference: [7] <author> Carbonell JG. </author> <year> (1986). </year> <title> Derivational Analogy: A Theory of Reconstructive Problem Solving and Expertise Acquisition. </title> <editor> In: Michalski RS, Carbonell JG, </editor> <title> Mitchell TM (eds) Machine Learning: An Artificial Intelligence Approach, Volume II. </title> <publisher> Morgan Kaufmann, Palo Alto, </publisher> <pages> 371-392. </pages>
Reference-contexts: We need to develop a range of techniques for coping with incomplete KBs, which must be incorporated into (future) intelligent systems. It should be noted, in passing, that humans have a range of techniques for coping with such situations including: adding plausible assumptions, using analogies <ref> [6, 7] </ref>, and negative inferences. Over the last three years several systems have been built at Aberdeen which deal with KBs which are both incomplete and inconsistent; for a more general overview of recent work in knowledge refinement and "apprentice systems", see [8].
Reference: [8] <author> Wilkins DC. </author> <year> (1988). </year> <title> Knowledge Base Refinement Using Apprenticeship Learning Techniques. </title> <editor> In: Smith RG, </editor> <booktitle> Mitchell TM (eds) Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-88). </booktitle> <publisher> Morgan Kaufmann, Palo Alto, </publisher> <pages> 646-651. </pages>
Reference-contexts: Over the last three years several systems have been built at Aberdeen which deal with KBs which are both incomplete and inconsistent; for a more general overview of recent work in knowledge refinement and "apprentice systems", see <ref> [8] </ref>. The systems developed at Aberdeen are outlined in the following sections. 2 KRUST: Assists the Designer of an Expert System to Refine its Knowledge Base KRUST is an automated KB refinement system which removes the need for the expert and knowledge engineer to perform tedious refinement tasks.
Reference: [9] <author> Craw SM, Sleeman D. </author> <year> (1990). </year> <title> Automating the Refinement of Knowledge-Based Systems. </title> <booktitle> In: Aiello LC (ed) Proceedings of the Ninth European Conference on Artificial Intelligence (ECAI90). </booktitle> <publisher> Pitman, London, </publisher> <pages> 167-172. </pages>
Reference-contexts: It is novel for a refinement system to generate many refinements for the KB and postpone its choice of a suitable refinement until it has evidence of their quality. Testing has shown that KRUST is able to generate and manage these multiple refinements, <ref> [9, 10] </ref>. For a simple wine advising KB, KRUST's filtering techniques restrain the process within manageable bounds. We are able to apply coarse testing to a large number of refinements, so that finer testing is only applied to a significantly reduced number of KBs.
Reference: [10] <author> Craw SM. </author> <title> (1991) Automating the Refinement of Knowledge-Based Systems. </title> <type> PhD Thesis, </type> <institution> Computing Science Department, University of Aberdeen. </institution>
Reference-contexts: It is novel for a refinement system to generate many refinements for the KB and postpone its choice of a suitable refinement until it has evidence of their quality. Testing has shown that KRUST is able to generate and manage these multiple refinements, <ref> [9, 10] </ref>. For a simple wine advising KB, KRUST's filtering techniques restrain the process within manageable bounds. We are able to apply coarse testing to a large number of refinements, so that finer testing is only applied to a significantly reduced number of KBs.
Reference: [11] <author> Craw SM, Sleeman D. </author> <title> (1990) The Flexibility of Speculative Refinement. </title> <editor> In: Birn--baum L, Collins G. </editor> <booktitle> (eds) Machine Learning: Proceedings of the Eighth International Workshop. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: The components of KRUST are shown in Figure 1. In summary, KRUST generates many refinements, rejecting them only once blame is attributed to them. Thus, KRUST's philosophy does not pre-judge refinement quality, as many refinement systems seem to do by generating a single refinement <ref> [11] </ref>. Additional work planned with KRUST includes: * Refinement of larger KBs in more complex domains. Segmenting complex KBs into modular sub-theories to allow KRUST to refine the sub-theories individually, thus improving efficiency. * Creating artifacts given the design for an analogous device.
Reference: [12] <author> Ellery IG. </author> <title> (1991) The Creation of Missing Rules for Knowledge-Based Systems. </title> <type> PhD Thesis, </type> <institution> Computing Science Department, University of Aberdeen. </institution>
Reference-contexts: The aim of CREATOR <ref> [12] </ref> is to discover the missing rule (s), given the correct answer (that given by the domain expert) and the original inputs to the KB. Often, a selection of rules will be found and presented to the expert for analysis. <p> If, when two states are compared, there are too many facts which cannot be matched, then it is assumed that the two states are not sufficiently close, and so no rule is formed. (The exact way this is done depends on various domain specific parameters <ref> [12] </ref>.) After many new rules have been created, other heuristics are used to filter out implausible new rules. These heuristics are domain specific, and are built automatically from the initial KB by CREATOR. <p> This would require extensions to various parts of the system, for example to cope with certainty factors and multiple conclusions in rules. There are also some alterations required for efficiency purposes. These and other changes are discussed fully in <ref> [12] </ref>. 4 REFINER: Detects and Removes Inconsistencies in Cases REFINER is a system which helps the expert refine a KB consisting of a set of cases and their assigned diagnoses or, more generally, classifications. (Kolodner [14] discusses advantages of case-based reasoning over more traditional approaches to Knowledge Elicitation).
Reference: [13] <author> Sleeman D, Hirsh HB, Ellery IG, Kim I-Y. </author> <year> (1990). </year> <title> Expanding an Incomplete Domain Theory: Two Case Studies. </title> <journal> Machine Learning Journal 5 </journal> <pages> 11-37. </pages>
Reference-contexts: The idea of bidirectional search in this way was first used in the Infer* system <ref> [13] </ref>. This system was designed to discover new mal-rules for student protocols, and was restricted to the domain of high school algebra. One of the problems of Infer* was that far too many mal-rules were suggested, and so some way of filtering the set of generated rules was required.
Reference: [14] <author> Kolodner JL. </author> <year> (1983). </year> <title> Maintaining Organization in a Dynamic Long-Term Memory. </title> <booktitle> Cognitive Science; 7 </booktitle> <pages> 243-280. </pages>
Reference-contexts: These and other changes are discussed fully in [12]. 4 REFINER: Detects and Removes Inconsistencies in Cases REFINER is a system which helps the expert refine a KB consisting of a set of cases and their assigned diagnoses or, more generally, classifications. (Kolodner <ref> [14] </ref> discusses advantages of case-based reasoning over more traditional approaches to Knowledge Elicitation). Further, REFINER is told whether the expert believes each case to be a prototypical or non-prototypical example of the class.
Reference: [15] <author> Sharma S, Sleeman D. </author> <year> (1988). </year> <title> REFINER: A Case-Based Differential Diagnosis Aide for Knowledge Acquisition and Knowledge Refinement. </title> <booktitle> In: Sleeman D (ed) Proceedings of the European Working Session on Learning (EWSL-88). </booktitle> <publisher> Pitman, London, </publisher> <pages> 201-210. </pages>
Reference-contexts: Specific case (s) be reclassified. 2. Edit case (s), e.g., the values of particular attribute (s). 3. Add new descriptor (s) to all cases. 4. Shelve case (s). 5. Modify the background domain knowledge. These mechanisms are discussed in greater detail in references <ref> [15, 16] </ref>. 4.5 Summary REFINER does a great deal of processing of examples, and then presents the expert with the cases which cause the inconsistency to occur. Once confronted with highly focused information humans are often good at suggesting ways of overcoming the discrepancy.
Reference: [16] <author> Sharma S. </author> <year> (1988). </year> <title> Case-Based Knowledge Acquisition and Refinement. </title> <type> PhD Thesis, </type> <institution> Computing Science Department, University of Aberdeen. </institution>
Reference-contexts: Specific case (s) be reclassified. 2. Edit case (s), e.g., the values of particular attribute (s). 3. Add new descriptor (s) to all cases. 4. Shelve case (s). 5. Modify the background domain knowledge. These mechanisms are discussed in greater detail in references <ref> [15, 16] </ref>. 4.5 Summary REFINER does a great deal of processing of examples, and then presents the expert with the cases which cause the inconsistency to occur. Once confronted with highly focused information humans are often good at suggesting ways of overcoming the discrepancy.
Reference: [17] <editor> Sleeman D, Stacey MK, Edwards P, Gray NAB. </editor> <year> (1989). </year> <title> An Architecture for Theory-Driven Scientific Discovery. </title> <booktitle> In: Morik K (ed) Proceedings of the European Working Session on Learning (EWSL-89). </booktitle> <publisher> Pitman, London, </publisher> <pages> 11-23. </pages>
Reference-contexts: use this information directly. * Determine the effect of expanding ranges of values; use background knowledge to generalize inferred class descriptors, for example to test whether it is possible to replace apple by fruit. 5 Postscript: Machine Discovery Systems We also have a long term interest in machine discovery systems <ref> [17] </ref>, and have hypothesized that they can be profitably viewed as systems which involve the refinement of (multiple) knowledge bases.
References-found: 17

