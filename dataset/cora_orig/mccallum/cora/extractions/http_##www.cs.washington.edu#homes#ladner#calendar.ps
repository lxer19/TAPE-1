URL: http://www.cs.washington.edu/homes/ladner/calendar.ps
Refering-URL: http://www.cs.washington.edu/homes/ladner/papers.html
Root-URL: 
Title: Optimizing Static Calendar Queues ffi where b is the time to process an empty bucket,
Author: K. Bruce Erickson Richard E. Ladner Anthony LaMarca p 
Note: c d 2 b  
Date: January 12, 1998  
Address: Seattle, WA 98195  3333 Coyote Hill Road Palo Alto, CA 94304  
Affiliation: University of Washington  Xerox PARC  
Abstract: The calendar queue is an important implementation of a priority queue that is particularly useful in discrete event simulators. In this paper we present an analysis of the static calendar queue that maintains N active events. A step of the discrete event simulator removes and processes the event with the smallest associated time and inserts a new event whose associated time is the time of the removed event plus a random increment with mean . We demonstrate that for the infinite bucket calendar queue with bucket width ffi = O(1=N ) the expected time to process a event is approximately 2bc time per event. We show that choosing the number of buckets to be O(N ) yields a calendar queue with performance equal to or almost equal to the performance of the infinite bucket calendar queue. We present a method for calibrating a calendar queue implementation, that is, for determining the constants b, c, and d. fl A preliminary version of this paper appeared in the Proceedings of the 35th Annual IEEE Symposium on Foundations of Computer Science, Nov. 20-22, 1994, pp. 732-743. Erickson's address is Department of Mathematics. Ladner's address is Department of Computer Science and Engineering. Ladner's research was supported by NSF, CCR-9108314. LaMarca's research was partially supported by an A.T.&T. Fellowship. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.R. Brown. </author> <title> Implementation and analysis of binomial queue algorithms. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 7, </volume> <pages> pp. 298-319, </pages> <year> 1978. </year>
Reference-contexts: In addition, a technique is given to calibrate a specific calendar queue implementation so that the formulas can be applied in a practical setting. 1.1 Related Results There are a large number of implementations of priorities queues <ref> [1, 6, 8, 11, 12, 13] </ref>. An interesting empirical comparison of eleven popular implementations is provided by Jones [7].
Reference: [2] <author> R. Brown. </author> <title> Calendar Queues: A fast O(1) priority queue implementation for the simulation event set problem. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 31, </volume> <pages> pp. 1120-1227, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction The calendar queue data structure, as described by Brown <ref> [2] </ref>, is an important implementation of a priority queue that is useful as the event queue in a discrete event simulator. <p> In this case, each event corresponds to execution of a segment of code by one of the processors. Thus, if there are N processors, then there are exactly N active events in the priority queue. In this paper we focus on the static calendar queue. Even before Brown's paper <ref> [2] </ref> the calendar queue was used in discrete event simulators when the number of events is large. In many of these situations the calendar queue significantly outperforms traditional priority queue data structures. Brown [2] provided empirical evidence that the calendar queue, with its parameters properly set, achieves expected constant time per <p> In this paper we focus on the static calendar queue. Even before Brown's paper <ref> [2] </ref> the calendar queue was used in discrete event simulators when the number of events is large. In many of these situations the calendar queue significantly outperforms traditional priority queue data structures. Brown [2] provided empirical evidence that the calendar queue, with its parameters properly set, achieves expected constant time per event processed. <p> Most of the popular implementations have O (log N ) expected time per event performance, which can be excessive for discrete event simulation with very large N and a large number of simulation steps. As mentioned earlier Brown did an empirical study of the dynamic calendar queue <ref> [2] </ref>. In the empirical study, Brown's main emphasis was on techniques for changing the bucket width and number of buckets dynamically as N changed. He did not seek to find the optimal bucket width for a given N , just one which would give good performance.
Reference: [3] <author> DECchip 21064-AA Microprocessor, </author> <title> Hardware Reference Manual. Digital Equipment Corporation. Order Number: </title> <address> EC-N0079-72. </address> <year> 1992. </year>
Reference: [4] <author> K. Bruce Erickson. </author> <title> Calendar queue expectations. </title> <type> Technical report, </type> <institution> University of Washington. </institution> <year> 1997. </year>
Reference-contexts: Although it is possible to write down some very complicated integrals which give exact expressions for the other q j these formulas are highly unwieldy and their proof is not particularly informative. See <ref> [4] </ref>. The proof of lemma 2.2 can be found in the appendix, section A. The proof requires some knowledge of the analysis of Markov chains with a continuous state space. <p> For this reason we have not included the long proof of the exact formula. For the details see <ref> [4] </ref>. 3 Choosing the Number of Buckets Now that we have found how to select ffi so as to approximately minimize the expected time per event in the infinite bucket calendar queue our next goal is to select M , the number of buckets, so that the M bucket calendar queue <p> Finally, one computes P j q j from these formulas. For details, see <ref> [4] </ref> B Proof of Theorem 2.1 For the purposes of this proof let us write D N (ffi) = 1 D (x) = 1 H (x) = d + c + x 2 cx = d + x c D (x): Also, for this section only, we write x = x
Reference: [5] <author> W. Feller. </author> <title> An Introduction to Probability Theory and Its Applications, Vol. II. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: This stationary measure has a density equal to the normalized tail-sum 1 F . (The normalization constant is the mean .) See <ref> [5] </ref>, XI.4. One can give intuitive arguments for the above description of m 1 , but, since equation (18) leads to this result almost immediately, we will use it to give a somewhat more formal proof. <p> H satisfies H t (b) = 0 [F (t + b y) F (t y)] U fdyg; where U is the renewal measure. See <ref> [5] </ref>, page 369. (The function defined by Feller is the hitting probability of (t; t + b]; this coincides with our H on account of the density assumption.) In general U (z) U f [0; z]g [1 F (z)] 1 for distributions on [0; 1) so that P fu = 1
Reference: [6] <author> J. Francon, G Viennot, and J. Vuillemin. </author> <title> Description and Analysis of an efficient priority queue representation. </title> <booktitle> Proceedings of the 19th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 1-7, </pages> <year> 1978. </year> <month> 25 </month>
Reference-contexts: In addition, a technique is given to calibrate a specific calendar queue implementation so that the formulas can be applied in a practical setting. 1.1 Related Results There are a large number of implementations of priorities queues <ref> [1, 6, 8, 11, 12, 13] </ref>. An interesting empirical comparison of eleven popular implementations is provided by Jones [7].
Reference: [7] <author> D.S. Jones. </author> <title> An empirical comparison of priority-queue and event-set implementations. </title> <journal> Com--munications of the ACM, </journal> <volume> Vol. 29, </volume> <pages> pp. 300-310, </pages> <year> 1986. </year>
Reference-contexts: An interesting empirical comparison of eleven popular implementations is provided by Jones <ref> [7] </ref>. Most of the popular implementations have O (log N ) expected time per event performance, which can be excessive for discrete event simulation with very large N and a large number of simulation steps. As mentioned earlier Brown did an empirical study of the dynamic calendar queue [2].
Reference: [8] <author> D.E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. </volume> <month> 3, </month> <title> Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: In addition, a technique is given to calibrate a specific calendar queue implementation so that the formulas can be applied in a practical setting. 1.1 Related Results There are a large number of implementations of priorities queues <ref> [1, 6, 8, 11, 12, 13] </ref>. An interesting empirical comparison of eleven popular implementations is provided by Jones [7].
Reference: [9] <author> D. Revuz. </author> <title> Markov Chains. </title> <publisher> North-Holland, </publisher> <address> New York. </address> <year> 1984. </year>
Reference-contexts: The transition probability completely determines the trajectory space probabilities. In Revuz <ref> [9] </ref>, Chapter 1, may be found the basic theory of Markov chains. <p> The limit theory (ergodic theory, laws of large numbers) for Markov chains is comprehensive. See <ref> [9] </ref>, Chapter 6. <p> It is at least intuitively clear that the trace chain f b X (T k )g is also positive recurrent and has an invariant probability distribution m 0 , say, obtained by renormalizing the distribution m restricted to A 0 . (See <ref> [9] </ref>, Ex. 3.13, p. 27, and Prop. 2.9, p. 93 for a formal proof.) Thus for subsets B, m 0 (B) = mfA 0 g N ffi )mfB " A 0 g: (19) But because this trace chain also has independent components, it follows that m 0 is a "product measure"
Reference: [10] <author> J. Rexford, F. Bonomi, A. Greenberg, and A. Wong. </author> <title> Scalable architectures for integrated traffic shaping and link scheduling in high-speed ATM switches. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> Vol. 7, </volume> <pages> pp 938-950. </pages> <year> 1997. </year>
Reference-contexts: Brown's study verified empirically the constant time per event performance of the calendar queue. An interesting new development is the employment of a calendar queue like data structure as part of the queuing mechanism of high-speed network switches and routers <ref> [10] </ref>. In this case the calendar queue like data structue is implemented in hardware. 2 1.2 The Calendar Queue A calendar queue has M buckets numbered 0 to M 1, a current bucket i 0 , a bucket width ffi, and a current time t 0 .
Reference: [11] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Self-adjusting binary search trees. </title> <journal> Journal of the ACM, </journal> <volume> Vol. 32, </volume> <pages> pp. 652-686. </pages> <year> 1985. </year>
Reference-contexts: In addition, a technique is given to calibrate a specific calendar queue implementation so that the formulas can be applied in a practical setting. 1.1 Related Results There are a large number of implementations of priorities queues <ref> [1, 6, 8, 11, 12, 13] </ref>. An interesting empirical comparison of eleven popular implementations is provided by Jones [7].
Reference: [12] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Self-adjusting heaps. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 15, </volume> <pages> pp. 52-69, </pages> <year> 1986. </year>
Reference-contexts: In addition, a technique is given to calibrate a specific calendar queue implementation so that the formulas can be applied in a practical setting. 1.1 Related Results There are a large number of implementations of priorities queues <ref> [1, 6, 8, 11, 12, 13] </ref>. An interesting empirical comparison of eleven popular implementations is provided by Jones [7].
Reference: [13] <author> J. Vuillemin. </author> <title> A data structure for manipulating priority queues. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 21, </volume> <pages> pp. 309-315, </pages> <year> 1978. </year> <month> 26 </month>
Reference-contexts: In addition, a technique is given to calibrate a specific calendar queue implementation so that the formulas can be applied in a practical setting. 1.1 Related Results There are a large number of implementations of priorities queues <ref> [1, 6, 8, 11, 12, 13] </ref>. An interesting empirical comparison of eleven popular implementations is provided by Jones [7].
References-found: 13

