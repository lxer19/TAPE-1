URL: http://www.eecg.toronto.edu/www-stumm/papers/?clite_hotos97.ps.gz
Refering-URL: http://www.eecg.toronto.edu/~okrieg/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fmarc,franke,okriegg@watson.ibm.com  fben,stummg@eecg.toronto.edu  
Title: Customization Lite  
Author: Marc Auslander Hubertus Franke Ben Gamsa Orran Krieger Michael Stumm 
Address: Yorktown Heights, New York  Toronto, Toronto, Canada  
Affiliation: IBM T.J. Watson Research Center  Department of Electrical and Computer Engineering University of  
Abstract: There has been a great deal of interest in recent years in developing operating systems that can be customized to meet the performance and functionality needs of particular applications while being extensible to support new policies, new implementations and new interfaces. We describe a structuring technique, called building-block composition, that we are employing for this purpose. The customizability this technique provides to untrusted applications is, while large, less than that provided by some other techniques. However, it results in a more extensible and maintainable system, is easier for untrusted applications to use, and provides a better foundation for overall improved performance, particularly for multiprocessors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Bershad, S. Savage, P. Pardyak, E. Sirer, D. Becker, M. Fi-uczynski, C. Chambers, and S. Eggers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proc. 15th Symp. on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <year> 1995. </year>
Reference-contexts: 1. Introduction Conventional operating systems provide poor support for applications to customize resource management policies, implementations, and interfaces. Recognizing this, the research community has responded by developing operating systems that are customizable. Examples include SPIN <ref> [1] </ref>, VINO [15], Exokernel [4], Fluke [5], L4 [11], and the Cache Kernel [3]. <p> We believe that the performance advantages that accrue from optimizing for locality will more than make up for any overhead entailed by an object-oriented design. 4. Comparison to other approaches Recent examples of other approaches for developing customizable systems include those taken by the SPIN <ref> [1, 12] </ref>, VINO [15], Exokernel [4], Fluke [5], L4 [11], and Cache Kernel [3] projects. The SPIN and VINO operating systems allow applications to extend and customize the operating system by allowing them to down-load untrusted code into the kernel.
Reference: [2] <author> A. Chang, M. Mergen, R. Rader, J. Roberts, and S. Porter. </author> <title> Evolution of storage facilities in AIX Vers. 3 for RISC System/6000 processors. </title> <journal> IBM J. of Research and Development, </journal> <volume> 34 </volume> <pages> 105-110, </pages> <year> 1990. </year>
Reference-contexts: A good example of this is the way IBM's AIX operating system integrates the virtual memory manager and native file system <ref> [2] </ref>. The memory manager knows the structure of such as a file.
Reference: [3] <author> K. Duda and D. Cheriton. </author> <title> A caching model of operating system kernel functionality. </title> <booktitle> In Proc. 1st Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 179-193, </pages> <year> 1994. </year>
Reference-contexts: 1. Introduction Conventional operating systems provide poor support for applications to customize resource management policies, implementations, and interfaces. Recognizing this, the research community has responded by developing operating systems that are customizable. Examples include SPIN [1], VINO [15], Exokernel [4], Fluke [5], L4 [11], and the Cache Kernel <ref> [3] </ref>. All of these systems provide for customizability by allowing applications to extend operating system functionality with user code, either by having the operating system direct its requests to user code or by downloading the code into the kernel. <p> Comparison to other approaches Recent examples of other approaches for developing customizable systems include those taken by the SPIN [1, 12], VINO [15], Exokernel [4], Fluke [5], L4 [11], and Cache Kernel <ref> [3] </ref> projects. The SPIN and VINO operating systems allow applications to extend and customize the operating system by allowing them to down-load untrusted code into the kernel.
Reference: [4] <author> D. Engler, F. Kaashoek, and J. O. Jr. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proc. 15th Symp. on Operating Systems Principles, </booktitle> <pages> pages 251-267, </pages> <year> 1995. </year>
Reference-contexts: 1. Introduction Conventional operating systems provide poor support for applications to customize resource management policies, implementations, and interfaces. Recognizing this, the research community has responded by developing operating systems that are customizable. Examples include SPIN [1], VINO [15], Exokernel <ref> [4] </ref>, Fluke [5], L4 [11], and the Cache Kernel [3]. All of these systems provide for customizability by allowing applications to extend operating system functionality with user code, either by having the operating system direct its requests to user code or by downloading the code into the kernel. <p> Comparison to other approaches Recent examples of other approaches for developing customizable systems include those taken by the SPIN [1, 12], VINO [15], Exokernel <ref> [4] </ref>, Fluke [5], L4 [11], and Cache Kernel [3] projects. The SPIN and VINO operating systems allow applications to extend and customize the operating system by allowing them to down-load untrusted code into the kernel.
Reference: [5] <author> B. Ford, M. Hibler, J. Lepreau, P. Tullman, G. Back, and S. Clawson. </author> <title> Microkernels meet recursive virtual machines. </title> <booktitle> In Proc. 2nd Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 137-152, </pages> <year> 1996. </year>
Reference-contexts: 1. Introduction Conventional operating systems provide poor support for applications to customize resource management policies, implementations, and interfaces. Recognizing this, the research community has responded by developing operating systems that are customizable. Examples include SPIN [1], VINO [15], Exokernel [4], Fluke <ref> [5] </ref>, L4 [11], and the Cache Kernel [3]. All of these systems provide for customizability by allowing applications to extend operating system functionality with user code, either by having the operating system direct its requests to user code or by downloading the code into the kernel. <p> Comparison to other approaches Recent examples of other approaches for developing customizable systems include those taken by the SPIN [1, 12], VINO [15], Exokernel [4], Fluke <ref> [5] </ref>, L4 [11], and Cache Kernel [3] projects. The SPIN and VINO operating systems allow applications to extend and customize the operating system by allowing them to down-load untrusted code into the kernel.
Reference: [6] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In many ways, building-block composition is not much different from other object-oriented techniques <ref> [6] </ref> and can be viewed as a specific realization of the Framework approach [7]. These OO techniques have already successfully been applied in commercial operating systems; for example the Unix Vnode interface [8] and Streams facility [14].
Reference: [7] <author> N. Islam. </author> <title> Distributed Objects: Methodologies for Customizing Systems Software. </title> <publisher> IEEE-CS Press, </publisher> <year> 1996. </year>
Reference-contexts: In many ways, building-block composition is not much different from other object-oriented techniques [6] and can be viewed as a specific realization of the Framework approach <ref> [7] </ref>. These OO techniques have already successfully been applied in commercial operating systems; for example the Unix Vnode interface [8] and Streams facility [14].
Reference: [8] <author> S. Kleiman. Vnodes: </author> <title> An architecture for multiple file system types in Sun UNIX. </title> <booktitle> In Proc. USENIX Conference, </booktitle> <pages> pages 238-247, </pages> <year> 1986. </year>
Reference-contexts: In many ways, building-block composition is not much different from other object-oriented techniques [6] and can be viewed as a specific realization of the Framework approach [7]. These OO techniques have already successfully been applied in commercial operating systems; for example the Unix Vnode interface <ref> [8] </ref> and Streams facility [14]. We build on this previous work, taking advantage of its strengths with respect to maintainability, extending it to all components of the operating system, and, for customizability, providing a powerful mechanism for applications to control the objects used.
Reference: [9] <author> O. Krieger. </author> <title> HFS: A flexible file system for shared memory multiprocessors. </title> <type> PhD thesis, </type> <institution> Dept. of Electrical and Computer Engineering, University of Toronto, </institution> <year> 1994. </year>
Reference-contexts: The building-block composition structuring technique was first developed for the Hurricane file system <ref> [9, 10] </ref>, and is now being employed both for the Kitchawan operating system at IBM research and the Tornado operating system [13] at the University of Toronto. This paper is joint work of the Kitchawan and Tornado groups.
Reference: [10] <author> O. Krieger and M. Stumm. </author> <title> HFS: A performance-oriented flexible file system based on building-block compositions. </title> <booktitle> In Proc. 4th Workshop on Input/Output in Parallel and Distributed Systems, </booktitle> <pages> pages 95-108, </pages> <year> 1996. </year>
Reference-contexts: The building-block composition structuring technique was first developed for the Hurricane file system <ref> [9, 10] </ref>, and is now being employed both for the Kitchawan operating system at IBM research and the Tornado operating system [13] at the University of Toronto. This paper is joint work of the Kitchawan and Tornado groups. <p> However, with a proper design this overhead is typically small for a number of reasons. First, even if a resource is implemented with many layers of objects, requests are often serviced by traversing only a small number of layers. For example, in the Hurricane file system <ref> [10] </ref>, objects typically cache data, and most read and write requests can be satisfied from a cache managed by an object close to the client. Second, building-block composition naturally minimizes the number of cross address space object invocations, because the customization occurs in the server (or kernel) providing the service.
Reference: [11] <author> J. Liedtke. </author> <title> On micro-kernel construction. </title> <booktitle> In Proc. 15th ACM Symp. on Operating System Principles, </booktitle> <pages> pages 237-250, </pages> <year> 1995. </year>
Reference-contexts: 1. Introduction Conventional operating systems provide poor support for applications to customize resource management policies, implementations, and interfaces. Recognizing this, the research community has responded by developing operating systems that are customizable. Examples include SPIN [1], VINO [15], Exokernel [4], Fluke [5], L4 <ref> [11] </ref>, and the Cache Kernel [3]. All of these systems provide for customizability by allowing applications to extend operating system functionality with user code, either by having the operating system direct its requests to user code or by downloading the code into the kernel. <p> Comparison to other approaches Recent examples of other approaches for developing customizable systems include those taken by the SPIN [1, 12], VINO [15], Exokernel [4], Fluke [5], L4 <ref> [11] </ref>, and Cache Kernel [3] projects. The SPIN and VINO operating systems allow applications to extend and customize the operating system by allowing them to down-load untrusted code into the kernel.
Reference: [12] <author> P. Pardyak and B. Bershad. </author> <title> Dynamic binding for an extensible system. </title> <booktitle> In Proc. 2nd Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 201-212, </pages> <year> 1996. </year>
Reference-contexts: We believe that the performance advantages that accrue from optimizing for locality will more than make up for any overhead entailed by an object-oriented design. 4. Comparison to other approaches Recent examples of other approaches for developing customizable systems include those taken by the SPIN <ref> [1, 12] </ref>, VINO [15], Exokernel [4], Fluke [5], L4 [11], and Cache Kernel [3] projects. The SPIN and VINO operating systems allow applications to extend and customize the operating system by allowing them to down-load untrusted code into the kernel.
Reference: [13] <author> E. Parsons, B. Gamsa, O. Krieger, and M. Stumm. </author> <title> (De-)- clustering objects for multiprocessor system software. </title> <booktitle> In Proc. 4th Intl. Workshop on Object Orientation in Operating Systems 95 (IWOOOS'95), </booktitle> <pages> pages 72-81, </pages> <year> 1995. </year>
Reference-contexts: The building-block composition structuring technique was first developed for the Hurricane file system [9, 10], and is now being employed both for the Kitchawan operating system at IBM research and the Tornado operating system <ref> [13] </ref> at the University of Toronto. This paper is joint work of the Kitchawan and Tornado groups. We first describe the motivation for employing building-block composition, then describe the technique, and finally compare our technique to other techniques for making operating systems customizable. 2. <p> Also, the composition is dynamic and 2 On a large system, system data structures should be de-clustered; that is, distributed (e.g., replicated, migrated, partitioned) among the different memory modules according to the demands placed on the data <ref> [13, 16] </ref>. can, in principle, be changed repeatedly by an application (assuming interface requirements are respected). Customizability In our building-block framework, customizability can be achieved in a number of ways. <p> That is, one can only achieve locality in accessing the state of a virtual resource if that state is encapsulated by objects specific to that resource. In previous work, we described a particular technique for implementing building blocks that exploits the modularity to achieve good multiprocessor performance <ref> [13] </ref>.
Reference: [14] <author> D. Ritchie. </author> <title> A stream intput-output system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1897-1910, </pages> <year> 1984. </year>
Reference-contexts: In many ways, building-block composition is not much different from other object-oriented techniques [6] and can be viewed as a specific realization of the Framework approach [7]. These OO techniques have already successfully been applied in commercial operating systems; for example the Unix Vnode interface [8] and Streams facility <ref> [14] </ref>. We build on this previous work, taking advantage of its strengths with respect to maintainability, extending it to all components of the operating system, and, for customizability, providing a powerful mechanism for applications to control the objects used.
Reference: [15] <author> M. Seltzer, Y. Endo, C. Small, and K. Smith. </author> <title> Dealing with disaster: Surviving misbehaved kernel extensions. </title> <booktitle> In Proc. 2nd Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 213-228, </pages> <year> 1996. </year>
Reference-contexts: 1. Introduction Conventional operating systems provide poor support for applications to customize resource management policies, implementations, and interfaces. Recognizing this, the research community has responded by developing operating systems that are customizable. Examples include SPIN [1], VINO <ref> [15] </ref>, Exokernel [4], Fluke [5], L4 [11], and the Cache Kernel [3]. All of these systems provide for customizability by allowing applications to extend operating system functionality with user code, either by having the operating system direct its requests to user code or by downloading the code into the kernel. <p> We believe that the performance advantages that accrue from optimizing for locality will more than make up for any overhead entailed by an object-oriented design. 4. Comparison to other approaches Recent examples of other approaches for developing customizable systems include those taken by the SPIN [1, 12], VINO <ref> [15] </ref>, Exokernel [4], Fluke [5], L4 [11], and Cache Kernel [3] projects. The SPIN and VINO operating systems allow applications to extend and customize the operating system by allowing them to down-load untrusted code into the kernel.
Reference: [16] <author> R. Unrau, O. Krieger, B. Gamsa, and M. Stumm. </author> <title> Hierarchical clustering: A structure for scalable multiprocessor operating system design. </title> <journal> Journal of Supercomputing, </journal> 9(1/2):105-134, 1995. 
Reference-contexts: Also, the composition is dynamic and 2 On a large system, system data structures should be de-clustered; that is, distributed (e.g., replicated, migrated, partitioned) among the different memory modules according to the demands placed on the data <ref> [13, 16] </ref>. can, in principle, be changed repeatedly by an application (assuming interface requirements are respected). Customizability In our building-block framework, customizability can be achieved in a number of ways.
References-found: 16

