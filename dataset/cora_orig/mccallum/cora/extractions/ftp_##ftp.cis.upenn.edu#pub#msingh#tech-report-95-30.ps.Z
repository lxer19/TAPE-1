URL: ftp://ftp.cis.upenn.edu/pub/msingh/tech-report-95-30.ps.Z
Refering-URL: http://www.cis.upenn.edu/~msingh/frames/papers_list.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. Bessiere, </author> <title> Arc-consistency and arc-consistency again, </title> <booktitle> Artif. Intell. </booktitle> <month> 65 (1) </month> <year> (1994) </year> <month> 179-190. </month>
Reference-contexts: A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm [7], Mohr and Henderson's AC-4 algorithm [9] and Bessiere's AC-6 <ref> [1] </ref> and AC6++ [2] algorithms. The third cause for thrashing is path inconsistency. Path consistency implies that any node-value pair of labelings (i; b) (j; c) that is consistent with the direct constraint between i and j is also allowed by all paths between i and j. <p> The error I have found in Chen's PC algorithm [3, procedure PC, page 347] is that, 2 While PC-5 is based on AC-6 <ref> [1] </ref>, PC5++ can be regarded as an extension to AC6++ [2]. 3 in lines 26-31, a labeling (i; b) (k; d) can be eliminated from R ik before all values in D j have been tested (A similar error follows from lines 32-37). <p> They had used the same idea in designing PC-3, as did Han and Lee [5] in designing PC-4, the corrected version of PC-3. Bessiere's AC-6 algorithm <ref> [1] </ref> improves on AC-4 by reducing the space requirements while retaining its (optimal) worst-case time complexity. I use the same ideas as Bessiere to improve upon PC-4. 3 The PC-5 algorithm 3.1 Description of the Algorithm As pointed out in section 2, PC-4 is based on the notion of "support". <p> Whenever a labeling (i; b) (j; c) is eliminated from R ij , this information has to be propagated to the relations R ik (b; d) and R jk (c; d) where (k; d) is a member of S ibjc . As noted by Bessiere <ref> [1] </ref>, computing the number of supports for each labeling (i; b) (j; c) and recording all of them implies an average-case time complexity and space complexity both increasing with the number of allowed pairs in the relations, since the number of supports is proportional to the number of pairs allowed in <p> The procedure nextsupport (Figure 3) is used to find the first as well as the next support of each labeling (i; b) (j; c) in the domain of k. This procedure is based on the nextsupport procedure used in AC-6 <ref> [1] </ref>. During the propagation phase (Figure 4), information about the invalid labelings (recorded in the waiting list) has to be propagated to all the nodes. <p> Using PC-5 requires a total ordering on all domains; however, as pointed out by Bessiere <ref> [1] </ref>, this is not a restriction since any implementation imposes a total ordering on the domains. 3.2 Space Complexity The matrix M requires O (n 2 a 2 ) space where a is the size of the largest domain and n is the number of variables. <p> the same figure). 5 If the algorithms had been tested on problems where the constraints involved more than two variables, the time for performing a constraint check could not be regarded as constant [4]. 13 5.1 Comparison of PC-5 and PC-4 The first experiment was done on the zebra problem <ref> [4, 1] </ref> which has similarities to some problems encountered in real life. I used the same encoding of the problem as used by Dechter [4]. Table 1 shows the results of this experiment.
Reference: [2] <author> C. Bessiere and J. Regin, </author> <title> An arc-consistency algorithm optimal in the number of constraint checks, </title> <booktitle> in: Proceedings 6th IEEE Int. Conf. on Tools with AI (1994) 397-403. </booktitle>
Reference-contexts: A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm [7], Mohr and Henderson's AC-4 algorithm [9] and Bessiere's AC-6 [1] and AC6++ <ref> [2] </ref> algorithms. The third cause for thrashing is path inconsistency. Path consistency implies that any node-value pair of labelings (i; b) (j; c) that is consistent with the direct constraint between i and j is also allowed by all paths between i and j. <p> The error I have found in Chen's PC algorithm [3, procedure PC, page 347] is that, 2 While PC-5 is based on AC-6 [1], PC5++ can be regarded as an extension to AC6++ <ref> [2] </ref>. 3 in lines 26-31, a labeling (i; b) (k; d) can be eliminated from R ik before all values in D j have been tested (A similar error follows from lines 32-37). This can be seen through the following example. Consider the very simple constraint network of Figure 1.
Reference: [3] <author> Y. Chen, </author> <title> Improving Han and Lee's path consistency algorithm, </title> <booktitle> in: Proceedings 3rd IEEE Int. Conf. on Tools for AI (1991) 346-350. </booktitle>
Reference-contexts: However, Han and Lee [5] showed that PC-3 is incorrect, and presented a corrected version, PC-4, with a worst case time and space complexity of O (n 3 a 3 ). 2 Chen <ref> [3] </ref> attempted to modify PC-4 in order to improve its average case performance while retaining its worst case complexity. However, I shall show in Section 2 that this algorithm is incorrect. <p> Hence, in many problems where path consistency will not remove many values, the initialization step will be fairly time consuming. Therefore, it is desirable to reduce the complexity of the initialization phase. Chen <ref> [3] </ref> attempted to modify the PC-4 algorithm in order to improve its average-case time and space complexity, while retaining its O (n 3 a 3 ) worst-case time and space complexity. However, I have found the following error in Chen's algorithm. <p> However, a labeling (i; b)(j; c) cannot be eliminated from the corresponding relation R ij unless all values in the domain of some node k have been tested and found not to support the labeling. The error I have found in Chen's PC algorithm <ref> [3, procedure PC, page 347] </ref> is that, 2 While PC-5 is based on AC-6 [1], PC5++ can be regarded as an extension to AC6++ [2]. 3 in lines 26-31, a labeling (i; b) (k; d) can be eliminated from R ik before all values in D j have been tested (A
Reference: [4] <author> R. Dechter, </author> <title> Enhancement schemes for constraint processing: backjumping, learning, and cutset decomposition, </title> <booktitle> Artif. Intell. </booktitle> <month> 41 </month> <year> (1990) </year> <month> 273-312. </month>
Reference-contexts: improvement of PC5++ over PC-5 (which would not always be apparent if all results were shown on the same figure). 5 If the algorithms had been tested on problems where the constraints involved more than two variables, the time for performing a constraint check could not be regarded as constant <ref> [4] </ref>. 13 5.1 Comparison of PC-5 and PC-4 The first experiment was done on the zebra problem [4, 1] which has similarities to some problems encountered in real life. I used the same encoding of the problem as used by Dechter [4]. Table 1 shows the results of this experiment. <p> the same figure). 5 If the algorithms had been tested on problems where the constraints involved more than two variables, the time for performing a constraint check could not be regarded as constant [4]. 13 5.1 Comparison of PC-5 and PC-4 The first experiment was done on the zebra problem <ref> [4, 1] </ref> which has similarities to some problems encountered in real life. I used the same encoding of the problem as used by Dechter [4]. Table 1 shows the results of this experiment. <p> a constraint check could not be regarded as constant <ref> [4] </ref>. 13 5.1 Comparison of PC-5 and PC-4 The first experiment was done on the zebra problem [4, 1] which has similarities to some problems encountered in real life. I used the same encoding of the problem as used by Dechter [4]. Table 1 shows the results of this experiment. PC-5 outperformed PC-4 significantly both in terms of the number of constraint checks as well as the number of supports recorded.
Reference: [5] <author> C. Han and C. Lee, </author> <title> Comments on Mohr and Henderson's path consistency algorithm, </title> <booktitle> Artif. Intell. </booktitle> <month> 36 </month> <year> (1988) </year> <month> 125-130. </month>
Reference-contexts: Mohr and Henderson's path consistency algorithm [9], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3. However, Han and Lee <ref> [5] </ref> showed that PC-3 is incorrect, and presented a corrected version, PC-4, with a worst case time and space complexity of O (n 3 a 3 ). 2 Chen [3] attempted to modify PC-4 in order to improve its average case performance while retaining its worst case complexity. <p> The main feature of Mohr and Henderson's AC-4 algorithm [9] was that it made the "support" of a labeling (i; b) evident by storing the relevant support information in an explicit data structure. They had used the same idea in designing PC-3, as did Han and Lee <ref> [5] </ref> in designing PC-4, the corrected version of PC-3. Bessiere's AC-6 algorithm [1] improves on AC-4 by reducing the space requirements while retaining its (optimal) worst-case time complexity.
Reference: [6] <author> V. Kumar, </author> <title> Algorithms for constraint-satisfaction problems: a survey, </title> <journal> AI Magazine 13 (1992) 32-44. </journal>
Reference-contexts: The latter does not limit the applications of my results since it is possible to convert any CSP with n-ary constraints into an equivalent CSP with unary and binary constraints <ref> [6, 11] </ref>.
Reference: [7] <author> A.K. Mackworth, </author> <title> Consistency in networks of relations, </title> <booktitle> Artif. Intell. </booktitle> <month> 8 (1) </month> <year> (1977) </year> <month> 99-118. </month>
Reference-contexts: Most of the methods used to solve such problems are based on some backtracking scheme, which can be very inefficient with exponential run-time complexity for most nontrivial problems. One of the reasons for this is that backtracking suffers from "thrashing" <ref> [7] </ref> i.e. search in different parts of the space keeps failing for the same reasons. Mackworth [7] identified three main causes for thrashing node inconsistency, arc inconsistency and path inconsistency. <p> One of the reasons for this is that backtracking suffers from "thrashing" <ref> [7] </ref> i.e. search in different parts of the space keeps failing for the same reasons. Mackworth [7] identified three main causes for thrashing node inconsistency, arc inconsistency and path inconsistency. <p> Thrashing because of node inconsistency can be eliminated by simply removing those values from the domain of each variable that do not satisfy the unary predicate on that variable <ref> [7] </ref>. Arc inconsistency involves binary constraints between variables, and occurs when two variables are each instantiated to some value from their respective domains and this instantiation violates the binary constraint between the two variables. <p> Such a value can obviously never exist in a solution to the CSP, and hence can be safely removed from the domain of the variable concerned. A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm <ref> [7] </ref>, Mohr and Henderson's AC-4 algorithm [9] and Bessiere's AC-6 [1] and AC6++ [2] algorithms. The third cause for thrashing is path inconsistency. <p> Note that an incomplete graph can be trivially made complete by adding edges with the always "true" relation [9] between nodes that are not connected. Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm <ref> [7] </ref>, an improvement over Montanari's PC-1 algorithm [7, 10] has a worst case running time bounded above by O (n 3 a 5 ) [8]. <p> Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm [7], an improvement over Montanari's PC-1 algorithm <ref> [7, 10] </ref> has a worst case running time bounded above by O (n 3 a 5 ) [8]. Mohr and Henderson's path consistency algorithm [9], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3.
Reference: [8] <author> A.K. </author> <title> Mackworth and E.C. Freuder, The complexity of some polynomial network consistency algorithms for constraint satisfaction problems, </title> <address> Artif. In-tell. </address> <month> 25 </month> <year> (1985) </year> <month> 65-74. </month>
Reference-contexts: Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm [7], an improvement over Montanari's PC-1 algorithm [7, 10] has a worst case running time bounded above by O (n 3 a 5 ) <ref> [8] </ref>. Mohr and Henderson's path consistency algorithm [9], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3.
Reference: [9] <author> R. Mohr and T.C. Henderson, </author> <title> Arc and path consistency revisited, </title> <journal> Artif. In-tell. </journal> <volume> 28 (1986) 225-233. </volume> <pages> 24 </pages>
Reference-contexts: A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm [7], Mohr and Henderson's AC-4 algorithm <ref> [9] </ref> and Bessiere's AC-6 [1] and AC6++ [2] algorithms. The third cause for thrashing is path inconsistency. <p> Note that an incomplete graph can be trivially made complete by adding edges with the always "true" relation <ref> [9] </ref> between nodes that are not connected. Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. <p> Mackworth's PC-2 algorithm [7], an improvement over Montanari's PC-1 algorithm [7, 10] has a worst case running time bounded above by O (n 3 a 5 ) [8]. Mohr and Henderson's path consistency algorithm <ref> [9] </ref>, PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3. <p> As noted by Mohr and Henderson <ref> [9] </ref>, the space complexity of the PC-3 algorithm (and hence of PC-4) makes it practicable only for small problems. Hence, it would be useful to reduce the space requirements of the PC-4 algorithm while keeping the same worst-case time complexity. <p> PC-5 can be further improved to yield another algorithm, PC5++, which has an even better average-case time complexity as compared to PC-5. The main feature of Mohr and Henderson's AC-4 algorithm <ref> [9] </ref> was that it made the "support" of a labeling (i; b) evident by storing the relevant support information in an explicit data structure. They had used the same idea in designing PC-3, as did Han and Lee [5] in designing PC-4, the corrected version of PC-3.
Reference: [10] <author> U. Montanari, </author> <title> Networks of constraints: fundamental properties and applications to picture processing, </title> <institution> Inf. Sci. </institution> <month> 7 </month> <year> (1974) </year> <month> 95-132. </month>
Reference-contexts: To achieve path consistency in a constraint network, it is sufficient to make all length-2 paths consistent because it has been shown by Montanari <ref> [10] </ref> that path consistency in a complete graph is equivalent to path consistency of all length-2 paths. Note that an incomplete graph can be trivially made complete by adding edges with the always "true" relation [9] between nodes that are not connected. <p> Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm [7], an improvement over Montanari's PC-1 algorithm <ref> [7, 10] </ref> has a worst case running time bounded above by O (n 3 a 5 ) [8]. Mohr and Henderson's path consistency algorithm [9], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3.
Reference: [11] <author> F. Rossi, C. Petrie and V. Dhar, </author> <title> On the equivalence of constraint satisfaction problems, </title> <type> Tech. rep. </type> <institution> ACT-AI-222-89, MCC Corp., Austin, Texas, </institution> <note> (as referenced by Kumar [6]). 25 </note>
Reference-contexts: The latter does not limit the applications of my results since it is possible to convert any CSP with n-ary constraints into an equivalent CSP with unary and binary constraints <ref> [6, 11] </ref>.
References-found: 11

