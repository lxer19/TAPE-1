URL: http://www.cse.ogi.edu/~ashvin/publications/conflict.ps
Refering-URL: http://www.cse.ogi.edu/~ashvin/research.html
Root-URL: http://www.cse.ogi.edu
Title: Defining and Measuring Conflicts in Optimistic Replication  
Author: John Heidemann Ashvin Goel Gerald Popek 
Address: Los Angeles  
Affiliation: University of California,  
Pubnum: Technical report UCLA-CSD-950033  
Abstract: Optimistic replication is often viewed as essential for large scale systems and for supporting mobile computing. In optimistic replication, updates can be made concurrently to different file replicas, resulting in multiple versions of the file. To recover from these conflicting updates, after-the fact conflict resolution actions are required to recombine multiple versions into one. This paper defines these concepts and discusses approaches to measure them in optimistically replicated systems. Measurement of the number of conflicting updates and conflict resolution is important to judge the practicality of optimistic replication. An environment where conflicting updates are frequent will not be attractive since users cannot assume they have up-to-date data. Although many conflicts can be automatically resolved, some conflicts require user intervention; such conflicts cannot be too common. This paper shows an approach to measure the number of conflicting updates. From this measurement we derive the actual amount of work done by the user or system to resolve conflicts and the minimum amount of work required to resolve conflicts. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Blaustein, H. Garcia-Molina, D. Ries, R. Chilenskas, and C. Kaufman. </author> <title> Maintaining replicated databases even in the presence of network partitions. </title> <booktitle> In Proceedings of the IEEE EASCON Conference, </booktitle> <month> September </month> <year> 1983. </year>
Reference-contexts: Bank automatic tellers and airline reservation systems are are the best known examples of commercial systems where performance and availability take precedence over conservative consistency. Several approaches have been suggested to detect and merge divergent databases <ref> [1, 5] </ref> in these systems. 1 File replication is another example where the benefits of optimistic replication can often outweigh the costs. There is substantial existing work analyzing the cost of conflicting updates in optimistic filing from several perspectives. <p> Definition 9 Conflict domination: Given two conflicting file replicas p and q, p is declared to have the "correct" data and is made to dominate q and then updated once. 8i 2 <ref> [1; n] </ref>; vv p [i] 0 max (vv p [i]; vv q [i]) + 1 i = p 2.4 An implementation To gain a better understanding of how these operations behave in a practical system let us examine Ficus, an optimistically replicated file system developed and in use at UCLA [6]. <p> Since by Theorem 1, the dominates relation is a partial order, G 0 is a DAG and may have multiple terminal vertices. Now consider the graph G = (V; E) a transitive reduction graph of G 0 . V = fvv p j p 2 <ref> [1; n] </ref>g ^ 6 9vv R 2 V : (vv Q vv R vv P )g G is obtained by removing edges from G 0 such that the closures of G and G 0 are the same. Figure 1 shows the dominates graph G for a five replica file. <p> Since the update increases the local version vector component, vv 0 p vv p . Suppose vv 0 p is nonsignificant. Then there exists a replica q which dominates p 0 , by the inverse of Definition 10. Therefore, 8i 2 <ref> [1; n] </ref>; vv q [i] vv p [i] 0 vv p [i]. However by Lemma 1, vv p [p] vv q [p]. The update to replica p makes vv p [p] 0 &gt; vv p [p] vv q [p]. <p> input: the time range [u; v] output: CU [u;v] begin T update := all update events over [u; v] CU [u;v] := 0 foreach (t 2 T update ) begin G (t ) = G (just before t) G (t + ) = G (just after t) foreach (p 2 <ref> [1; n] </ref>) begin if (vv p is significant in G (t + ) ^ vv p is non-significant in G (t )) then CU [u;v] := CU [u;v] + 1 end return CU [u;v] end updates. G (t) is the dominates graph at time t.
Reference: [2] <author> Stefano Ceri, Maurice A. W. Houtsma, Arthur M. Keller, and Pierangela Samarati. </author> <title> The case for independent updates. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data, </booktitle> <pages> pages 17-19. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: The stale read and the conflicting update problems are potential costs of optimistic replication. This paper focuses on the second of these costs as a means of evaluating optimistic replication. Conflicting updates are an accepted and required cost of doing business in many environments <ref> [3, 2] </ref>. Bank automatic tellers and airline reservation systems are are the best known examples of commercial systems where performance and availability take precedence over conservative consistency.
Reference: [3] <author> Alan R. Downing, Ira B. Greenberg, and Jon M. Peha. OSCAR: </author> <title> a system for weak-consistency replication. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 26-30. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1990. </year>
Reference-contexts: The stale read and the conflicting update problems are potential costs of optimistic replication. This paper focuses on the second of these costs as a means of evaluating optimistic replication. Conflicting updates are an accepted and required cost of doing business in many environments <ref> [3, 2] </ref>. Bank automatic tellers and airline reservation systems are are the best known examples of commercial systems where performance and availability take precedence over conservative consistency.
Reference: [4] <author> Rick Floyd. </author> <title> Short-term file reference patterns in a UNIX environment. </title> <type> Technical Report TR-177, </type> <institution> University of Rochester, </institution> <month> March </month> <year> 1986. </year>
Reference-contexts: There is substantial existing work analyzing the cost of conflicting updates in optimistic filing from several perspectives. Analysis of file system usage <ref> [4, 9] </ref> shows that file sharing is rare, and practical experience with optimistic filing [12] suggests that in many filing environments the number of conflicting updates can be extremely low.
Reference: [5] <author> Hector Garcia-Molina, Tim Allen, Barbara Blaustein, R. Mark Chilenskas, and Daniel R. Ries. Data-patch: </author> <title> Integrating inconsistent copies of a database after a partition. </title> <booktitle> In Proceedings of the Third IEEE Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 38-44, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: Bank automatic tellers and airline reservation systems are are the best known examples of commercial systems where performance and availability take precedence over conservative consistency. Several approaches have been suggested to detect and merge divergent databases <ref> [1, 5] </ref> in these systems. 1 File replication is another example where the benefits of optimistic replication can often outweigh the costs. There is substantial existing work analyzing the cost of conflicting updates in optimistic filing from several perspectives.
Reference: [6] <author> Richard G. Guy, John S. Heidemann, Wai Mak, Thomas W. Page, Jr., Gerald J. Popek, and Dieter Rothmeier. </author> <title> Implementation of the Ficus replicated 10 file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: This section describes version vectors, their properties, and the events which change them. To illus trate these concepts, we then map these abstract events to Ficus, an existing replicated file system <ref> [6] </ref>. 2.1 File replication An optimistically-replicated file-system consists of a number of logical files each stored as n separate file replicas. Conflicting updates are a property of a single file; notation in this paper refers to that file. <p> [1; n]; vv p [i] 0 max (vv p [i]; vv q [i]) + 1 i = p 2.4 An implementation To gain a better understanding of how these operations behave in a practical system let us examine Ficus, an optimistically replicated file system developed and in use at UCLA <ref> [6] </ref>. In Ficus, there are several events that can cause ver sion vectors to change: Ficus file update At arbitrary times a user will update a file. This action results in a file replica update (Definition 6) immediately followed by Ficus update notification.
Reference: [7] <author> Richard G. Guy, Gerald J. Popek, and Thomas W. Page, Jr. </author> <title> Consistency algorithms for optimistic replication. </title> <booktitle> In Proceedings of the First International Conference on Network Protocols. IEEE, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: In addition, prior work has suggested that file system usage patterns can be exploited to minimize the chance of stale reads or conflicting updates [8], and file semantics can be employed to automatically recover from conflicting updates <ref> [12, 7, 10] </ref>. This paper augments existing empirical work by providing a theoretical framework for evaluating the cost of conflicting updates in optimistic replication. <p> This propagation will fail if the versions conflict. Ficus reconciliation To encourage files to reach quiescence we periodically compare file replica p with another file replica q. Replicas pass information indirectly through a gossip-based protocol <ref> [7] </ref> insuring that information exchanged in pairwise reconciliations eventually reaches all replicas. If vv q vv p , p invokes version propagation from q. If this is not possible because the two file replicas conflict, Ficus automatic conflict resolution is at tempted.
Reference: [8] <author> John S. Heidemann, Thomas W. Page, Jr., Rich-ard G. Guy, and Gerald J. Popek. </author> <title> Primarily disconnected operation: Experiences with Ficus. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data. IEEE, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: In addition, prior work has suggested that file system usage patterns can be exploited to minimize the chance of stale reads or conflicting updates <ref> [8] </ref>, and file semantics can be employed to automatically recover from conflicting updates [12, 7, 10]. This paper augments existing empirical work by providing a theoretical framework for evaluating the cost of conflicting updates in optimistic replication.
Reference: [9] <author> James J. Kistler and Mahadev Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: There is substantial existing work analyzing the cost of conflicting updates in optimistic filing from several perspectives. Analysis of file system usage <ref> [4, 9] </ref> shows that file sharing is rare, and practical experience with optimistic filing [12] suggests that in many filing environments the number of conflicting updates can be extremely low.
Reference: [10] <author> Puneet Kumar and Mahadev Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 66-70, </pages> <address> Napa, California, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: In addition, prior work has suggested that file system usage patterns can be exploited to minimize the chance of stale reads or conflicting updates [8], and file semantics can be employed to automatically recover from conflicting updates <ref> [12, 7, 10] </ref>. This paper augments existing empirical work by providing a theoretical framework for evaluating the cost of conflicting updates in optimistic replication.
Reference: [11] <author> D. Stott Parker, Jr., Gerald Popek, Gerard Rudisin, Allen Stoughton, Bruce J. Walker, Evelyn Walton, Johanna M. Chow, David Ed-wards, Stephen Kiser, and Charles Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 9(3) </volume> <pages> 240-247, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Conflicting updates are a property of a single file; notation in this paper refers to that file. The version of the data present in each replica is captured by a version vector which uniquely identifies the update history of that replica <ref> [11] </ref>. Each replica p of this n-replica file has an n-element version-vector vv p [1 : : : n]. In principle, version vector elements are unbounded counters and n can grow arbitrarily large. In Ficus, elements are 32-bit integers and n is typically less than 20.
Reference: [12] <author> Peter Reiher, John S. Heidemann, David Ratner, Gregory Skinner, and Gerald J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 183-195. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1994. </year> <month> 11 </month>
Reference-contexts: There is substantial existing work analyzing the cost of conflicting updates in optimistic filing from several perspectives. Analysis of file system usage [4, 9] shows that file sharing is rare, and practical experience with optimistic filing <ref> [12] </ref> suggests that in many filing environments the number of conflicting updates can be extremely low. <p> In addition, prior work has suggested that file system usage patterns can be exploited to minimize the chance of stale reads or conflicting updates [8], and file semantics can be employed to automatically recover from conflicting updates <ref> [12, 7, 10] </ref>. This paper augments existing empirical work by providing a theoretical framework for evaluating the cost of conflicting updates in optimistic replication. <p> If this is not possible because the two file replicas conflict, Ficus automatic conflict resolution is at tempted. Ficus automatic conflict resolution When two file replicas conflict, the file name and its type are used to search for an applicable conflict resolver <ref> [12] </ref>. If a resolver is found, it is invoked to merge the replicas into one version. It updates one replica with the merged data and performs conflict domination, replacing the old replica with the merged one. It then invokes Ficus update notification to distribute the new version. <p> For example, experience with Ficus suggests that the vast majority of updates do not create conflicting updates <ref> [12] </ref>. Fortunately in many cases we can determine the same information much more efficiently. We next show that there is a relationship between the number of conflicting updates and the number of conflict domination events. <p> This algorithm represents a significant improvement in practice because experience with Ficus suggests that jT conflict dominate j t jT update j. Over a nine-month period with Ficus running on approximately a dozen workstations, 14,142,241 file updates occurred, while only 489 conflict dominations were required <ref> [12] </ref>. 6 Optimality of the Global Snapshot Algorithm We have shown that the number of conflicting updates is dependent on changes to ISV (t), and how we determine CU by examining conflict domination events.
References-found: 12

