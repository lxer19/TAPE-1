URL: http://www.csc.calpoly.edu/~smeldal/CSC450/Class_Material/doc/make/make.ps
Refering-URL: http://www.csc.calpoly.edu/~smeldal/CSC450/Class_Material/doc/make/
Root-URL: http://www.csc.calpoly.edu
Title: Make A Program for Maintaining Computer Programs really defines the graph of dependencies; Make does
Author: S. I. Feldman 
Note: The basic operation of Make is to find the name of a needed target in the description, ensure that all of the files on which it depends exist and are up to date, and then create the target if it has not been modified since its generators were. The description file  
Abstract: In a programming project, it is easy to lose track of which files need to be reprocessed or recompiled after a change is made in some part of the source. Make provides a simple mechanism for maintaining up-to-date versions of programs that result from many operations on a number of files. It is possible to tell Make the sequence of commands that create certain files, and the list of files that require other files to be current before the operations can be done. Whenever a change is made in any part of the program, the Make command will create the proper files simply, correctly, and with a minimum amount of effort. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. C. Johnson, </author> <title> ``Yacc Yet Another Compiler-Compiler'', </title> <institution> Bell Laboratories Computing Science Technical Report #32, </institution> <month> July </month> <year> 1978. </year>
Reference-contexts: Introduction It is common practice to divide large programs into smaller, more manageable pieces. The pieces may require quite different treatments: some may need to be run through a macro processor, some may need to be processed by a sophisticated program generator (e.g., Yacc <ref> [1] </ref> or Lex [2]). The outputs of these generators may then have to be compiled with special options and with certain definitions and declarations. The code resulting from these transformations may then need to be loaded together with certain libraries under the control of special options.
Reference: 2. <author> M. E. Lesk, </author> <title> ``Lex A Lexical Analyzer Generator'', </title> <note> Computing Science Technical Report #39, </note> <month> October </month> <year> 1975. </year> <month> - 9 </month> - 
Reference-contexts: Introduction It is common practice to divide large programs into smaller, more manageable pieces. The pieces may require quite different treatments: some may need to be run through a macro processor, some may need to be processed by a sophisticated program generator (e.g., Yacc [1] or Lex <ref> [2] </ref>). The outputs of these generators may then have to be compiled with special options and with certain definitions and declarations. The code resulting from these transformations may then need to be loaded together with certain libraries under the control of special options.
References-found: 2

