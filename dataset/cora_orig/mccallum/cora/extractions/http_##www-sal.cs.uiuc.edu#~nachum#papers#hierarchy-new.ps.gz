URL: http://www-sal.cs.uiuc.edu/~nachum/papers/hierarchy-new.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Email: nachum@cs.uiuc.edu  
Title: Hierarchical Termination  
Author: Nachum Dershowitz 
Address: 1304 West Springfield Avenue Urbana, IL 61801, U.S.A.  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: From a practical perspective, it is important for programs to have modular correctness properties. Some (largely syntactic) sufficient conditions are given here for the union of terminating rewrite systems to be terminating, particularly in the hierarchical case, when one of the systems makes no reference to functions defined by the other.
Abstract-found: 1
Intro-found: 1
Reference: [ Avenhaus and Madlener, 1990 ] <author> Jurgen Avenhaus and Klaus Madlener. </author> <title> Term rewriting and equational reasoning. </title> <editor> In R. B. Banerji, editor, </editor> <booktitle> Formal Techniques in Artificial Intelligence: A Sourcebook, </booktitle> <pages> pages 1-41. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [ Bachmair and Dershowitz, 1986 ] <author> Leo Bachmair and Nachum Dershowitz. </author> <title> Commutation, transformation, and termination. </title> <editor> In J. H. Siekmann, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Automated Deduction (Oxford, England), volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 5-20, </pages> <address> Berlin, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Theorem 27 <ref> [ Bachmair and Dershowitz, 1986 ] </ref> . The union of a left-linear black terminating system with a right-linear white terminating system, such that white right-hand sides are separate from black left-hand sides, is terminating. Theorem 15 is a corollary. 14 System (9) is again an example. Proof. <p> Transformation methods of <ref> [ Bachmair and Dershowitz, 1986; Bellegarde and Lescanne, 1990 ] </ref> can perhaps be used to handle certain collapsing cases. 14 This theorem was claimed in [ Dershowitz, 1981 ] , but an overly weak condition of separateness was implied. (The examples in [ Bachmair and Dershowitz, 1986 ] were also wrong <p> Transformation methods of [ Bachmair and Dershowitz, 1986; Bellegarde and Lescanne, 1990 ] can perhaps be used to handle certain collapsing cases. 14 This theorem was claimed in [ Dershowitz, 1981 ] , but an overly weak condition of separateness was implied. (The examples in <ref> [ Bachmair and Dershowitz, 1986 ] </ref> were also wrong on this account.) This direction was pursued further in [ Geser, 1989 ] . This paper has only considered modularity of termination.
Reference: [ Bellegarde and Lescanne, 1990 ] <author> Fran~cois Bellegarde and Pierre Lescanne. </author> <title> Termination by completion. Applicable Algebra in Engineering, </title> <journal> Communication and Computing, </journal> <year> 1990. </year>
Reference-contexts: Transformation methods of <ref> [ Bachmair and Dershowitz, 1986; Bellegarde and Lescanne, 1990 ] </ref> can perhaps be used to handle certain collapsing cases. 14 This theorem was claimed in [ Dershowitz, 1981 ] , but an overly weak condition of separateness was implied. (The examples in [ Bachmair and Dershowitz, 1986 ] were also wrong
Reference: [ Bidoit, 1981 ] <author> Michel Bidoit. </author> <title> Une methode de presentation de types abstraits: Applications. </title> <type> PhD thesis, </type> <institution> Universite de Paris-Sud, Orsay, France, </institution> <month> June </month> <year> 1981. </year> <note> Rapport 3045. </note>
Reference-contexts: To get a better handle on the hierarchical non-right-linear case, we further restrict the form of purple rules. Theorem 16. The union of a left-linear overlay-confluent purple terminating system with an overlay-confluent bright-green terminating system is terminating. This theorem applies to System (5) and corrects the result in <ref> [ Bidoit, 1981 ] </ref> for "gracious" systems by requiring that the green system be bright. Without brightness, we could be fooled by f (a) ! f (b) b ! a (F) where a is the only constructor. 10 We've already seen the need for left-linearity in Example (D).
Reference: [ Cadiou, 1972 ] <author> J. M. Cadiou. </author> <title> Recursive Definitions of Partial Functions and their Computations. </title> <type> PhD thesis, </type> <institution> Stanford University, Stanford, </institution> <address> CA, </address> <month> March </month> <year> 1972. </year>
Reference-contexts: An overlay-confluent system is terminating for a given term if, and only if, it is by innermost rewriting. This is analogous to the well-known fact that termination of call-by-value implies termination of call-by-name <ref> [ Cadiou, 1972 ] </ref> . It includes, as a common special case, non-overlapping systems, proved in [ Geupel, 1989 ] .
Reference: [ Church, 1941 ] <author> Alonzo Church. </author> <title> The Calculi of Lambda Conversion, </title> <booktitle> volume 6 of Ann. Mathematics Studies. </booktitle> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1941. </year>
Reference: [ Dershowitz, 1981 ] <author> Nachum Dershowitz. </author> <title> Termination of linear rewriting systems. </title> <booktitle> In Proceedings of the Eighth International Colloquium on Automata, Languages and Programming (Acre, Israel), volume 115 of Lecture Notes in Computer Science, </booktitle> <pages> pages 448-458, </pages> <address> Berlin, </address> <month> July </month> <year> 1981. </year> <booktitle> European Association of Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In [ Fernandez and Jouan-naud, 1995 ] , the result is extended to allow sharing of symbols other than constructors, provided the same proof method still applies. The following non-terminating example <ref> [ Dershowitz, 1981 ] </ref> , with red f , blue 2, and yellow 0 and 1, shows the necessity of brightness (as in Theorem 10) or non-duplication (as in Theorem 11): f (0; 1; x) ! f (x; x; x) 2 ! 1 Proposition 13 [ Gramlich, 1995 ] . <p> Transformation methods of [ Bachmair and Dershowitz, 1986; Bellegarde and Lescanne, 1990 ] can perhaps be used to handle certain collapsing cases. 14 This theorem was claimed in <ref> [ Dershowitz, 1981 ] </ref> , but an overly weak condition of separateness was implied. (The examples in [ Bachmair and Dershowitz, 1986 ] were also wrong on this account.) This direction was pursued further in [ Geser, 1989 ] . This paper has only considered modularity of termination.
Reference: [ Dershowitz, 1982 ] <author> Nachum Dershowitz. </author> <title> Orderings for term-rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 17(3) </volume> <pages> 279-301, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: The question is how to ensure that the union of the two systems terminates, without having to find an independent proof for the combination. The measures used above for the individual systems cannot be combined. (Termination of the combined system could be proved instead using the methods in <ref> [ Dershowitz, 1982 ] </ref> .) This eminently practical case has received virtually no attention. 2 Section 5 mentions some results for the fully general case, when both systems can refer to all symbols, and is followed by a brief discussion of some remaining questions. 1 Some authors reserve the designation "modular"
Reference: [ Dershowitz, 1987 ] <author> Nachum Dershowitz. </author> <title> Termination of rewriting. </title> <journal> J. Symbolic Computation, </journal> 3(1&2):69-115, February/April 1987. Corrigendum: <volume> 4, </volume> 3 (December 1987), <pages> 409-410; </pages> reprinted in Rewriting Techniques and Applications, J.-P. Jouannaud, ed., pp. 69|115, Academic Press, 1987. 
Reference-contexts: In practice, one usually guarantees termination by devising a well-founded partial ordering for which a rewritten term is always smaller than the original. For a survey of methods of proving termination, see <ref> [ Dershowitz, 1987 ] </ref> ; for examples of these methods, see [ Dershowitz, 1995 ] . Rewrite systems provide a simple, intuitive, nondeterministic functional language. As such, it would be quite valuable to be able to combine systems possessing desirable properties.
Reference: [ Dershowitz, 1992 ] <author> Nachum Dershowitz. </author> <title> Hierarchical termination. </title> <type> Unpublished report, </type> <institution> Leibnitz Center for Research in Computer Science, Hebrew University, Jerusalem, Israel, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: to all symbols, and is followed by a brief discussion of some remaining questions. 1 Some authors reserve the designation "modular" for this disjoint case; we prefer, however, to use the term generically, specifying "disjoint," "shared constructors," or "hierarchical," as the case may be. 2 A draft of this paper <ref> [ Dershowitz, 1992 ] </ref> was distributed in December 1992. 2 Disjoint termination Let A and B be disjoint sets of function symbols (including constants) and X be a set of variables.
Reference: [ Dershowitz, 1995 ] <author> Nachum Dershowitz. </author> <title> 33 examples of termination. </title> <editor> In H. Comon and J.- P. Jouannaud, editors, </editor> <booktitle> French Spring School of Theoretical Computer Science Advanced Course on Term Rewriting (Font Romeux, </booktitle> <address> France, </address> <month> May </month> <year> 1993), </year> <booktitle> volume 909 of Lecture Notes in Computer Science, </booktitle> <pages> pages 16-26, </pages> <address> Berlin, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In practice, one usually guarantees termination by devising a well-founded partial ordering for which a rewritten term is always smaller than the original. For a survey of methods of proving termination, see [ Dershowitz, 1987 ] ; for examples of these methods, see <ref> [ Dershowitz, 1995 ] </ref> . Rewrite systems provide a simple, intuitive, nondeterministic functional language. As such, it would be quite valuable to be able to combine systems possessing desirable properties. In particular, we look for sufficient conditions under which the union of two terminating systems would be terminating.
Reference: [ Dershowitz and Hoot, 1995 ] <author> Nachum Dershowitz and Charles Hoot. </author> <title> Natural termination. </title> <journal> Theoretical Computer Science, </journal> <volume> 142(2) </volume> <pages> 179-207, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: We will refer to the systems as black and white. In particular, we will generalize the first two theorems of the previous section. Proposition 22 <ref> [ Dershowitz and Hoot, 1995; Gramlich, 1995 ] </ref> . A non-erasing, non-overlapping system terminates if it is normalizing (that is, if there is always some derivation leading to a normal form).
Reference: [ Dershowitz and Jouannaud, 1990 ] <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [ Dershowitz and Manna, 1979 ] <author> Nachum Dershowitz and Zohar Manna. </author> <title> Proving termination with multiset orderings. </title> <journal> Communications of the ACM, </journal> <volume> 22(8) </volume> <pages> 465-476, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: The nesting depth of these pure-red components in a term cannot increase by rewriting. Terms are compared by looking lexicographically at a tuple of multisets, the most significant element of the tuple containing the uppermost red components, and so on. Multisets are compared in the multiset ordering <ref> [ Dershowitz and Manna, 1979 ] </ref> and components in the red rewrite relation.
Reference: [ Drosten, 1989 ] <author> K. Drosten. Termersetzungssysteme. </author> <type> PhD thesis, </type> <institution> Universitat Passau, </institution> <address> Berlin, Germany, 1989. Informatik Fachberichte 210, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: + 0 ! x s (x) + y ! s (x + y) s (x) " 0 ! s (0) (4) It also extends the result in [ Middeldorp and Toyama, 1991 ] for constructor-sharing constructor-based systems. 9 The overlaying requirement is necessary, as seen in this locally confluent example <ref> [ Drosten, 1989 ] </ref> : f (0; 1; x) ! f (x; x; x) 0 ! 2 g (x; y; y) ! x (C) Local-confluence is likewise essential (cf.
Reference: [ Fernandez and Jouannaud, 1995 ] <author> Maribel Fernandez and Jean-Pierre Jouannaud. </author> <title> Modular termination of term rewriting systems revisited. </title> <booktitle> In Proceedings of the Eleventh Workshop on Specification of Abstract Data Types (Santa Margherita de Ligura, Italy), Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: a variable on the right not already on the left. 3 With apologies to some previous authors, the color scheme has been changed here for added mnemonic value. 4 These restrictions are ordered from the more severe to the less, taking a programmer's point of view. 5 Called "conservative" in <ref> [ Fernandez and Jouannaud, 1995 ] </ref> . A left-linear system has no rule with more than one occurrence of a variable on its left-hand side.
Reference: [ Geser, 1989 ] <author> Alfons Geser. </author> <title> Termination Relative. </title> <type> PhD thesis, </type> <institution> Universitat Passau, Passau, West Germany, </institution> <year> 1989. </year>
Reference-contexts: can perhaps be used to handle certain collapsing cases. 14 This theorem was claimed in [ Dershowitz, 1981 ] , but an overly weak condition of separateness was implied. (The examples in [ Bachmair and Dershowitz, 1986 ] were also wrong on this account.) This direction was pursued further in <ref> [ Geser, 1989 ] </ref> . This paper has only considered modularity of termination. The preservation of other properties, such as existence and uniqueness of normal forms, is also worth exploring for hierarchical systems.
Reference: [ Geupel, 1989 ] <author> Oliver Geupel. </author> <title> Overlap closures and termination of term rewriting systems. </title> <type> Report MIP-8922, </type> <institution> Universitat Passau, Passau, West Germany, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: An overlay-confluent system is terminating for a given term if, and only if, it is by innermost rewriting. This is analogous to the well-known fact that termination of call-by-value implies termination of call-by-name [ Cadiou, 1972 ] . It includes, as a common special case, non-overlapping systems, proved in <ref> [ Geupel, 1989 ] </ref> . Since, as it is easy to ascertain, innermost termination is preserved by unions of orange and green systems (cf. [ Kurihara and Kaji, 1990; Gramlich, 1995 ] ), it follows that 8 Theorem 14. The union of overlay-confluent orange and green terminating systems is terminating.
Reference: [ Gramlich, 1994 ] <author> Bernhard Gramlich. </author> <title> Generalized sufficient conditions for modular termination of rewriting. Applicable Algebra in Engineering, </title> <journal> Communication and Computing, </journal> <volume> 5 </volume> <pages> 131-158, </pages> <year> 1994. </year> <booktitle> A preliminary version appeared in the Proceedings of the Third Inter-nationnal Conference on Algebraic and Logic Programming, Lecture Notes in Computer Science 632, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. 53-68, </pages> <year> 1992. </year>
Reference-contexts: Generalizations of Theorems 2, 3, 4, and 7 will be proved in the sequel. A more semantic approach was developed in <ref> [ Gramlich, 1994; Ohlebusch, 1993 ] </ref> (based on the syntactic ideas in [ Kurihara and Ohuchi, 1990 ] ): Theorem 8 [ Ohlebusch, 1993 ] . <p> In this section, we investigate the case where constructors are shared by the two systems (as also considered in <ref> [ Middeldorp and Toyama, 1991; Gramlich, 1994; Ohlebusch, 1993 ] </ref> ). For our purposes, a constructor is any function symbol (in the given vocabulary) that never appears as the outermost symbol of a left-hand side (of either system), while a defined symbol is one that does. <p> The next theorem extends Theorem 2 (due to Rusinowitch [ 1987 ] ) to systems with shared constructors. Theorem 10 <ref> [ Gramlich, 1994 ] </ref> . The union of bright-orange and bright-green terminating systems is terminating. 6 In the terminology of [ Gramlich, 1994 ] , it is not "constructor-lifting." Thus, x + s (y) ! s (x) + y s (x) s (y) ! x y (3) is terminating (red +, <p> The next theorem extends Theorem 2 (due to Rusinowitch [ 1987 ] ) to systems with shared constructors. Theorem 10 <ref> [ Gramlich, 1994 ] </ref> . The union of bright-orange and bright-green terminating systems is terminating. 6 In the terminology of [ Gramlich, 1994 ] , it is not "constructor-lifting." Thus, x + s (y) ! s (x) + y s (x) s (y) ! x y (3) is terminating (red +, blue , yellow s), since each rule by itself is. Proof.
Reference: [ Gramlich, 1995 ] <author> Bernhard Gramlich. </author> <title> Abstract relations between restricted termination and confluence properties of rewrite systems. </title> <note> Fundamenta Informaticae, September 1995. Preliminary versions appeared as "Relating Innermost, </note> <editor> Weak, </editor> <title> Uniform and Modular Termination of Term Rewriting Systems" in Proceedings of the Conference on Logic Programming and Automated Reasoning (St. Petersburg, Russia), </title> <editor> A. Voronkov, ed., </editor> <booktitle> Lecture Notes in Artificial Intelligence 624, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. </pages> <note> 285-296 and as SEKI-Report SR-93-09, </note> <institution> Fachbereich Informatik, Universitat Kaiserslautern, Kaiser-slautern, Germany, </institution> <year> 1993. </year>
Reference-contexts: Theorem 6 [ Middeldorp and Toyama, 1991 ] . The union of constructor-based locally-confluent red and blue terminating systems is terminating. Let us call overlaying locally-confluent systems overlay-confluent. The conditions of the previous theorem have been weakened to include this class of systems: Theorem 7 <ref> [ Gramlich, 1995 ] </ref> . The union of overlay-confluent red and blue terminating systems is terminating. <p> The following non-terminating example [ Dershowitz, 1981 ] , with red f , blue 2, and yellow 0 and 1, shows the necessity of brightness (as in Theorem 10) or non-duplication (as in Theorem 11): f (0; 1; x) ! f (x; x; x) 2 ! 1 Proposition 13 <ref> [ Gramlich, 1995 ] </ref> . An overlay-confluent system is terminating for a given term if, and only if, it is by innermost rewriting. This is analogous to the well-known fact that termination of call-by-value implies termination of call-by-name [ Cadiou, 1972 ] . <p> It includes, as a common special case, non-overlapping systems, proved in [ Geupel, 1989 ] . Since, as it is easy to ascertain, innermost termination is preserved by unions of orange and green systems (cf. <ref> [ Kurihara and Kaji, 1990; Gramlich, 1995 ] </ref> ), it follows that 8 Theorem 14. The union of overlay-confluent orange and green terminating systems is terminating. In particular, non-overlapping systems can be combined. <p> Example (B)). 8 This result also appears in <ref> [ Gramlich, 1995 ] </ref> . 9 Middeldorp and Toyama [ 1991 ] also consider the case where certain rules are shared by both systems, also easily handled by our method. 4 Hierarchical termination Suppose one has defined some blue functions, recursively, using green rules. <p> Instead of requiring flatness, Krishna Rao [ 1993 ] forbids those nestings that seem able to lead eventually to a blue symbol that can cause an increase in the depth of red. See also <ref> [ Gramlich, 1995 ] </ref> . For System (1), the recursive rule on the right adds f (s (x); y) ! f (x; ?), where ? is an arbitrary green term (containing any combination of , +, s, and 0). The extended system is still terminating. <p> We will refer to the systems as black and white. In particular, we will generalize the first two theorems of the previous section. Proposition 22 <ref> [ Dershowitz and Hoot, 1995; Gramlich, 1995 ] </ref> . A non-erasing, non-overlapping system terminates if it is normalizing (that is, if there is always some derivation leading to a normal form).
Reference: [ Huet, 1980 ] <author> Gerard Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: terms that can be obtained each by one step of rewriting from the same term can both be rewritten in zero or more steps to the identical term. (Local confluence is decidable for finite terminating systems [ Knuth and Bendix, 1970 ] .) In particular, non-overlapping systems are locally confluent <ref> [ Huet, 1980 ] </ref> . The following results are known: Theorem 2 [ Rusinowitch, 1987 ] . The union of non-collapsing red and blue terminating systems is terminating. Theorem 3 [ Rusinowitch, 1987 ] . The union of non-duplicating red and blue terminating systems is terminating. <p> Example (B) shows the need for confluence (of the purple system at least). Proof. The union is overlaying (since the purple left sides cannot unify with non-variable green subterms, nor green left sides with the orange subterms of purple left sides) and locally-confluent (by the Critical Pair Lemma <ref> [ Knuth and Bendix, 1970; Huet, 1980 ] </ref> , since the union cannot introduce any new overlapping left-hand sides). Hence, by Proposition 13, we need only show innermost termination.
Reference: [ Klop, 1992 ] <author> Jan Willem Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, chapter 1, </volume> <pages> pages 1-117. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1992. </year>
Reference: [ Knuth and Bendix, 1970 ] <author> Donald E. Knuth and P. B. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <editor> U. K., </editor> <booktitle> 1970. Reprinted in Automation of Reasoning 2, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. </pages> <month> 342-376 </month> <year> (1983). </year>
Reference-contexts: A locally confluent system is one for which any two terms that can be obtained each by one step of rewriting from the same term can both be rewritten in zero or more steps to the identical term. (Local confluence is decidable for finite terminating systems <ref> [ Knuth and Bendix, 1970 ] </ref> .) In particular, non-overlapping systems are locally confluent [ Huet, 1980 ] . The following results are known: Theorem 2 [ Rusinowitch, 1987 ] . The union of non-collapsing red and blue terminating systems is terminating. Theorem 3 [ Rusinowitch, 1987 ] . <p> Example (B) shows the need for confluence (of the purple system at least). Proof. The union is overlaying (since the purple left sides cannot unify with non-variable green subterms, nor green left sides with the orange subterms of purple left sides) and locally-confluent (by the Critical Pair Lemma <ref> [ Knuth and Bendix, 1970; Huet, 1980 ] </ref> , since the union cannot introduce any new overlapping left-hand sides). Hence, by Proposition 13, we need only show innermost termination.
Reference: [ Krishna Rao, 1992 ] <author> M. R. K. Krishna Rao. </author> <title> Modular proofs for completeness of hierarchical systems. </title> <type> Unpublished report, </type> <month> December </month> <year> 1992. </year>
Reference-contexts: is, a purple system R is oblivious of green terms if R g = fl ! r [g] p : l ! r 2 R; rj p is bright green; g is greeng is also terminating. (Actually, we need only replace maximal green subterms.) 11 This result also appeared in <ref> [ Krishna Rao, 1992 ] </ref> . Instead of requiring flatness, Krishna Rao [ 1993 ] forbids those nestings that seem able to lead eventually to a blue symbol that can cause an increase in the depth of red. See also [ Gramlich, 1995 ] .
Reference: [ Krishna Rao, 1993 ] <author> M. R. K. Krishna Rao. </author> <title> Completeness of hierarchical combinatins of term rewriting systems. </title> <booktitle> In Proceedings of the Thirteenth Conference on Foundations of Software Technology and Theoretical Computer Science (Bombay, India), volume 761 of Lecture Notes in Computer Science, </booktitle> <pages> pages 125-138, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference: [ Kurihara and Kaji, 1990 ] <author> Masahito Kurihara and Ikuo Kaji. </author> <title> Modular term rewriting sys-tems and the termination. </title> <journal> Information Processing Letters, </journal> <volume> 34 </volume> <pages> 1-4, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: It includes, as a common special case, non-overlapping systems, proved in [ Geupel, 1989 ] . Since, as it is easy to ascertain, innermost termination is preserved by unions of orange and green systems (cf. <ref> [ Kurihara and Kaji, 1990; Gramlich, 1995 ] </ref> ), it follows that 8 Theorem 14. The union of overlay-confluent orange and green terminating systems is terminating. In particular, non-overlapping systems can be combined.
Reference: [ Kurihara and Ohuchi, 1990 ] <author> Masahito Kurihara and Azuma Ohuchi. </author> <title> Modularity of simple termination of term rewriting systems. </title> <journal> Journal of Information Processing Society, </journal> <volume> 34 </volume> <pages> 632-642, </pages> <year> 1990. </year>
Reference-contexts: Generalizations of Theorems 2, 3, 4, and 7 will be proved in the sequel. A more semantic approach was developed in [ Gramlich, 1994; Ohlebusch, 1993 ] (based on the syntactic ideas in <ref> [ Kurihara and Ohuchi, 1990 ] </ref> ): Theorem 8 [ Ohlebusch, 1993 ] .
Reference: [ Middeldorp, 1989 ] <author> Aart Middeldorp. </author> <title> A sufficient condition for the termination of the direct sum of term rewriting systems. </title> <booktitle> In Proceedings of the Fourth Symposium on Logic in Computer Science, </booktitle> <pages> pages 396-401, </pages> <address> Pacific Grove, CA, 1989. </address> <publisher> IEEE. </publisher>
Reference-contexts: The following results are known: Theorem 2 [ Rusinowitch, 1987 ] . The union of non-collapsing red and blue terminating systems is terminating. Theorem 3 [ Rusinowitch, 1987 ] . The union of non-duplicating red and blue terminating systems is terminating. Theorem 4 <ref> [ Middeldorp, 1989 ] </ref> . The union of a non-collapsing non-duplicating red terminating system with a blue terminating system is terminating. Theorem 5 [ Toyama et al., 1989 ] . The union of left-linear locally-confluent red and blue terminating systems is terminating.
Reference: [ Middeldorp, 1990 ] <author> Aart Middeldorp. </author> <title> Modular Properties of Term Rewriting Systems. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: systems is not necessarily terminating: f (0; 1; x) ! f (x; x; x) g (x; y) ! y In the next section, we review what is known about termination in this disjoint case, and present the major syntactic restrictions of interest in this regard. (For other modular properties, see <ref> [ Middeldorp, 1990 ] </ref> .) Then, in Section 3, the case where "constructor" symbols are shared by the two systems is considered. Section 4 considers the "hierarchical" case where one system is allowed to refer to symbols appearing in the other, but not vice-versa.
Reference: [ Middeldorp and Toyama, 1991 ] <author> Aart Middeldorp and Yoshihito Toyama. </author> <title> Completeness of combinations of constructor systems. </title> <editor> In R. Book, editor, </editor> <booktitle> Proceedings of the Fourth International Conference on Rewriting Techniques and Applications (Como, Italy), volume 488 of Lecture Notes in Computer Science, </booktitle> <pages> pages 174-187, </pages> <address> Berlin, April 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Theorem 4 [ Middeldorp, 1989 ] . The union of a non-collapsing non-duplicating red terminating system with a blue terminating system is terminating. Theorem 5 [ Toyama et al., 1989 ] . The union of left-linear locally-confluent red and blue terminating systems is terminating. Theorem 6 <ref> [ Middeldorp and Toyama, 1991 ] </ref> . The union of constructor-based locally-confluent red and blue terminating systems is terminating. Let us call overlaying locally-confluent systems overlay-confluent. The conditions of the previous theorem have been weakened to include this class of systems: Theorem 7 [ Gramlich, 1995 ] . <p> In this section, we investigate the case where constructors are shared by the two systems (as also considered in <ref> [ Middeldorp and Toyama, 1991; Gramlich, 1994; Ohlebusch, 1993 ] </ref> ). For our purposes, a constructor is any function symbol (in the given vocabulary) that never appears as the outermost symbol of a left-hand side (of either system), while a defined symbol is one that does. <p> In particular, non-overlapping systems can be combined. This extends Theorem 7 to systems with shared constructors, like: x + 0 ! x s (x) + y ! s (x + y) s (x) " 0 ! s (0) (4) It also extends the result in <ref> [ Middeldorp and Toyama, 1991 ] </ref> for constructor-sharing constructor-based systems. 9 The overlaying requirement is necessary, as seen in this locally confluent example [ Drosten, 1989 ] : f (0; 1; x) ! f (x; x; x) 0 ! 2 g (x; y; y) ! x (C) Local-confluence is likewise essential
Reference: [ O'Donnell, 1977 ] <author> Michael J. O'Donnell. </author> <title> Computing in systems described by equations, </title> <booktitle> volume 58 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference-contexts: Proposition 22 [ Dershowitz and Hoot, 1995; Gramlich, 1995 ] . A non-erasing, non-overlapping system terminates if it is normalizing (that is, if there is always some derivation leading to a normal form). This improves the result in <ref> [ O'Donnell, 1977 ] </ref> which requires that the system be left-linear, and which, consequently, has the same behavior as Church's [ 1941 ] -I calculus. We say that a white system preserves normal forms of a black system if the former always rewrites black normal forms to black normal forms.
Reference: [ Ohlebusch, 1993 ] <author> Enno Ohlebusch. </author> <title> On the modularity of termination of term rewriting systems. </title> <type> Report 11, </type> <institution> Abteilung Informationstechnik, Universitat Bielefeld, Bielefeld, Ger-many, </institution> <year> 1993. </year>
Reference-contexts: Generalizations of Theorems 2, 3, 4, and 7 will be proved in the sequel. A more semantic approach was developed in <ref> [ Gramlich, 1994; Ohlebusch, 1993 ] </ref> (based on the syntactic ideas in [ Kurihara and Ohuchi, 1990 ] ): Theorem 8 [ Ohlebusch, 1993 ] . <p> Generalizations of Theorems 2, 3, 4, and 7 will be proved in the sequel. A more semantic approach was developed in [ Gramlich, 1994; Ohlebusch, 1993 ] (based on the syntactic ideas in [ Kurihara and Ohuchi, 1990 ] ): Theorem 8 <ref> [ Ohlebusch, 1993 ] </ref> . <p> <ref> [ Ohlebusch, 1993 ] </ref> . The union of red and blue systems that are each terminating when joined with the system fh (x; y) ! x; h (x; y) ! yg, for new function symbol h not appearing in either system, is terminating. (This is an undecidable property.) Theorem 9 [ Ohlebusch, 1993 ] . <p> In this section, we investigate the case where constructors are shared by the two systems (as also considered in <ref> [ Middeldorp and Toyama, 1991; Gramlich, 1994; Ohlebusch, 1993 ] </ref> ). For our purposes, a constructor is any function symbol (in the given vocabulary) that never appears as the outermost symbol of a left-hand side (of either system), while a defined symbol is one that does. <p> If the top layer is red, then the argument is just as in the previous proof. If the second layer is red, then we can use the same ordering as for Theorem 10. ut 7 A similar proof was given independently in <ref> [ Ohlebusch, 1993 ] </ref> . In [ Fernandez and Jouan-naud, 1995 ] , the result is extended to allow sharing of symbols other than constructors, provided the same proof method still applies.
Reference: [ Pettorossi, 1981 ] <author> Alberto Pettorossi. </author> <title> Comparing and putting together recursive path or-derings, simplification orderings and non-ascending property for termination proofs of term rewriting systems. </title> <booktitle> In Proceedings of the Eighth EATCS International Colloquium on Automata, Languages and Programming (Acre, Israel), volume 115 of Lecture Notes in Computer Science, </booktitle> <pages> pages 432-447, </pages> <address> Berlin, July 1981. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: (9) We need the following: 12 Though the non-erasing requirement is needed for the above proposition, an example of non-termination for non-overlapping preserving systems is lacking. 13 This idea of decomposing proofs of termination by looking at overlappings between rules, but ignoring the difficulties engendered by non-left-linear rules, appeared in <ref> [ Pettorossi, 1981 ] </ref> . Lemma 26 [ Raoult and Vuillemin, 1980 ] .
Reference: [ Plaisted, 1993 ] <author> David A. Plaisted. </author> <title> Equational reasoning and term rewriting systems. </title> <editor> In D. Gabbay, C. Hogger, J. A. Robinson, and J. Siekmann, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 1, chapter 5, </volume> <pages> pages 273-364. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1993. </year>
Reference: [ Raoult and Vuillemin, 1980 ] <author> Jean-Claude Raoult and Jean Vuillemin. </author> <title> Operational and semantic equivalence between recursive programs. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 772-796, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: Lemma 26 <ref> [ Raoult and Vuillemin, 1980 ] </ref> .
Reference: [ Rusinowitch, 1987 ] <author> Michael Rusinowitch. </author> <title> On termination of the direct sum of term-rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 26 </volume> <pages> 65-70, </pages> <year> 1987. </year>
Reference-contexts: The following results are known: Theorem 2 <ref> [ Rusinowitch, 1987 ] </ref> . The union of non-collapsing red and blue terminating systems is terminating. Theorem 3 [ Rusinowitch, 1987 ] . The union of non-duplicating red and blue terminating systems is terminating. Theorem 4 [ Middeldorp, 1989 ] . <p> The following results are known: Theorem 2 <ref> [ Rusinowitch, 1987 ] </ref> . The union of non-collapsing red and blue terminating systems is terminating. Theorem 3 [ Rusinowitch, 1987 ] . The union of non-duplicating red and blue terminating systems is terminating. Theorem 4 [ Middeldorp, 1989 ] . The union of a non-collapsing non-duplicating red terminating system with a blue terminating system is terminating. Theorem 5 [ Toyama et al., 1989 ] . <p> Thus, to compare two terms, we simply compare their top layers|with one arbitrary term replacing all lower-level subterms|in the terminating rewrite relation of the top system. ut Similarly, the following theorem extends Theorem 3 <ref> [ Rusinowitch, 1987 ] </ref> for shared constructors: 7 Theorem 11. The union of orange and green non-duplicating terminating systems is terminating. Proof. Rewriting does not increase the number of levels (except to add constructors at the top, which we can safely ignore).
Reference: [ Toyama, 1987a ] <author> Yoshihito Toyama. </author> <title> Counterexamples to termination for the direct sum for the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 141-143, </pages> <year> 1987. </year>
Reference: [ Toyama, 1987b ] <author> Yoshihito Toyama. </author> <title> On the Church-Rosser property for the direct sum of term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 34(1) </volume> <pages> 128-143, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: We will have recourse to the notation sj p for the subterm at position p in term s. Various modularity properties (such as termination and uniqueness of normal forms) have been intensely studied since the appearance of <ref> [ Toyama, 1987b ] </ref> , particularly for combinations of systems that have no function symbols (or constants) in common. 1 Toyama [ 1987a ] gave the following example, showing that even in this simplest case the combination of two terminating systems is not necessarily terminating: f (0; 1; x) ! f
Reference: [ Toyama et al., 1989 ] <author> Yoshihito Toyama, Jan Willem Klop, and Hendrik Pieter Baren-dregt. </author> <title> Termination for the direct sum of left-linear term rewriting systems. </title> <editor> In Nachum Dershowitz, editor, </editor> <booktitle> Proceedings of the Third International Conference on Rewriting Techniques and Applications (Chapel Hill, NC), volume 355 of Lecture Notes in Computer Science, </booktitle> <pages> pages 477-491, </pages> <address> Berlin, </address> <month> April </month> <year> 1989. </year> <title> Springer-Verlag. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Theorem 3 [ Rusinowitch, 1987 ] . The union of non-duplicating red and blue terminating systems is terminating. Theorem 4 [ Middeldorp, 1989 ] . The union of a non-collapsing non-duplicating red terminating system with a blue terminating system is terminating. Theorem 5 <ref> [ Toyama et al., 1989 ] </ref> . The union of left-linear locally-confluent red and blue terminating systems is terminating. Theorem 6 [ Middeldorp and Toyama, 1991 ] . The union of constructor-based locally-confluent red and blue terminating systems is terminating. Let us call overlaying locally-confluent systems overlay-confluent.
References-found: 39

