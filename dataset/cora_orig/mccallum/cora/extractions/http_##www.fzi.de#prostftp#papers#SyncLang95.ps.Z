URL: http://www.fzi.de/prostftp/papers/SyncLang95.ps.Z
Refering-URL: http://www.fzi.de/prost/people/melcher.html
Root-URL: http://www.fzi.de
Email: email: melcher@fzi.de  
Title: Compiling Argos into a m-calculus Experiences with the instantiation of a model checker framework for
Author: Helmut Melcher 
Note: First, the  
Date: November 1995  
Address: 76131 Karlsruhe, Germany  
Affiliation: Forschungszentrum Informatik (FZI) Haid- und Neu-Str. 10-14  
Abstract: This paper presents an easy and direct method of compiling the synchronous language Argos to a subset of a m-calculus. This compilation algorithm allows for using Argos as a system description language for model checkers based on a m-calculus evaluator. Next, we improve the algorithm by combining its three steps to a single step. This algorithm can be viewed as a new way of defining the semantics of Argos that assigns to each correct program a Kripke structure. This structure is encoded using boolean predicates which can be evaluated by a m-calculus based model checker. Finally, we demonstrate that compiling into boolean predicates is easier to implement than compiling into state machines. Besides, compiling into boolean predicates greatly facilitates the proof of the translations correctness. 
Abstract-found: 1
Intro-found: 1
Reference: [Bier94] <author> A. Biere. </author> <title> Entwurf eines mu-Kalkl-Beweisers. </title> <type> Technical report, </type> <institution> Institut fr Logik, Komplexitt und Deduktionssysteme; Fakultt fr Informatik, Universitt Karlsruhe, Karlsruhe, </institution> <month> November </month> <year> 1994. </year>
Reference: [Bier95] <author> A. Biere. </author> <title> muecke - an evaluator of mu-calculus formulae. </title> <type> Technical report, </type> <institution> Institut fr Logik, Komplexitt und Deduktionssysteme; Fakultt fr Informatik, Universitt Karlsruhe, Karlsruhe, </institution> <year> 1995. </year> <note> to appear. </note>
Reference-contexts: The model checking kernel controls the process of model checking. Our framework for model checkers provides a specification encoder for the language CTL [Clar81], the model checking kernel and a m-Calculus evaluator which are ready-to-use. We have decided to use the m-Calculus evaluator mcke <ref> [Bier95] </ref>. The framework also provides support for implementing new model encoders and specification encoders. The framework we have made produces a model checker for a specific model description language, but leaves one final step undone.
Reference: [Brya86] <author> R.E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 35(2):677691, </volume> <month> August </month> <year> 1986. </year>
Reference: [Burc92] <author> J.R. Burch, E.M. Clarke, K.L.McMillan, </author> <title> D.L. Dill und L.J. Hwang. 10^20 States and Beyond. Information and Computation, </title> <address> 98(2):142171, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: At FZI, we decided to build a framework that eases the development of new model checkers greatly in the Spring of 1995 [Mel95]. The framework is based on the concept of a m-Calculus model checking process <ref> [Burc92] </ref>. The key idea of this concept is to translate both the model and the demanded properties of a system into so-called m-Calculus formulae [Park74]. Having done this translation, the whole process of model checking and generation of counter-examples can be performed completely independent of the model checkers input languages.
Reference: [Clar81] <author> E. M. Clarke und E. A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using Branching Time Temporal Logic. </title> <booktitle> In Proc. Workshop on Logics of Programs, Ausgabe 131 in Lecture Notes in Computer Science, S. 5271, </booktitle> <address> Berlin, 1981. </address> <publisher> Springer. </publisher>
Reference-contexts: The model checking kernel controls the process of model checking. Our framework for model checkers provides a specification encoder for the language CTL <ref> [Clar81] </ref>, the model checking kernel and a m-Calculus evaluator which are ready-to-use. We have decided to use the m-Calculus evaluator mcke [Bier95]. The framework also provides support for implementing new model encoders and specification encoders.
Reference: [Emer90] <author> E. Allen Emerson. </author> <title> Temporal and Modal Logic. </title> <editor> In J. van Leeuwen (Hrsg.), </editor> <booktitle> Handbook of Theoretical Computer Science, Kapitel 16. </booktitle> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1990. </year>
Reference: [Halb93] <author> Nicolas Halbwachs. </author> <title> Synchronous Programming Of Reactive Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, Boston, London, </address> <year> 1993. </year>
Reference: [Hare87] <author> D. Harel. Statecharts: </author> <title> A cisual approach to complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <address> 8:231275, </address> <year> 1987. </year>
Reference: [Helb94] <author> J. Helbig und P. Kelb. </author> <title> An OBDD-Representation of StateCharts. </title> <booktitle> In Proceedings the European Design Automation Conference (EDAC), </booktitle> <year> 1994. </year>
Reference: [Mara92] <author> Florence Maraninchi. </author> <title> Operational and Compositional Semantics of Synchronous Automaton Compositions. </title> <booktitle> In Proceedings of CONCUR92, </booktitle> <year> 1992. </year>
Reference: [Mara91] <author> F. Maraninchi. Argos: </author> <title> a graphical synchronous language for the description of reactive systems. </title> <type> Spectre Report 29, </type> <institution> Laboratoire de Gnie Informatique, IMAG-Campus, Grenoble, France, </institution> <month> 91. </month>
Reference-contexts: Provided with this algorithm, the framework will automatically generate a new model encoder. Then it will combine this component with the already given components into a new model checker. Organization of the paper This papers explains how a model described in the language Argos <ref> [Mara91] </ref> can be compiled into a m-Calculus. In section 2, the compilation problem is described. In section 3, a three-step compilation algorithm is presented that is based on the standard semantics of Argos. In section 4, this algorithm is improved by combining its three steps to a single step. <p> The following sections describe the input and the output of the algorithm and thus the compilation problem we have to solve. 2.1 What we have The input for our system encoder algorithm is a system model described in the language Argos <ref> [Mara91] </ref>. An example of such a model is presented in figure 3. Argos is a state-transition based, synchronous language with a graphical syntax. It allows for the description of a simple state-transition automaton as well as the parallel and hierachical composition of such automata. <p> Besides, we will try to move the generation of counter-examples from the model checking kernel to the m-Calculus evaluator. We hope that this will further improve the performance of our model checkers. Appendix Encoding of a parallel composition The encoding of a refined automaton <ref> [Mara91] </ref> is defined by specifying its characteristic sets and predicates. The encoding of the refining systems R i are assumed to be given. First, we look the simple automaton A.
Reference: [Mara92] <author> F. Maraninchi und M. Vachon. </author> <title> An experience in compiling a mixed imperative/declarative language for reactive systems. </title> <type> Spectre Report 37, </type> <institution> Laboratoire de Gnie Informatique, IMAG-Campus, Grenoble, France, </institution> <month> 92. </month>
Reference: [McMi93] <author> Kenneth L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academin Publishers, </publisher> <year> 1993. </year>
Reference-contexts: If we want to correctly encode an Argos program, we need to follow the definition of the semantics of Argos exactly. 2.2 What we want to get The output for our system encoding component is a so-called Kripke structure, because model checking is defined with respect to such a structure <ref> [McMi93] </ref>. A Kripke structure (see Figure 4) consists of: S the set of global states the transition relation a labelling function We will use this kind of structure to describe the behaviour of the Argos program to be encoded. The Kripke structure has to be encoded as m-Calculus formulae.
Reference: [Park74] <author> David Park. </author> <note> Finiteness is mu-ineffable. Theory of Computation Report 3, </note> <institution> The University of Warwick, </institution> <year> 1974. </year> <title> System P Y P 1 ,( ) Trans P P P 1 , ,( ) v O P Y ( ) Set P Y v, 1 $= System P Y P 1 ,( ) Set P Y P 1 </title> ,( ) 
Reference-contexts: The framework is based on the concept of a m-Calculus model checking process [Burc92]. The key idea of this concept is to translate both the model and the demanded properties of a system into so-called m-Calculus formulae <ref> [Park74] </ref>. Having done this translation, the whole process of model checking and generation of counter-examples can be performed completely independent of the model checkers input languages. A typical structure of a model checker where this concept has been implemented is shown in figure 2.
References-found: 14

