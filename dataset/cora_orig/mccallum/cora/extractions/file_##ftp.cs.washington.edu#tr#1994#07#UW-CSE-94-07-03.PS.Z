URL: file://ftp.cs.washington.edu/tr/1994/07/UW-CSE-94-07-03.PS.Z
Refering-URL: http://www.cs.washington.edu/research/computation/papers.html
Root-URL: 
Email: dci@cs.washington.edu;  
Title: Minimal Adaptive Routing on the Mesh with Bounded Queue Size  
Author: Donald D. Chinn Tom Leighton Martin Tompa 
Note: Department  98195. This material is based upon work supported in part by the National Science Foundation under Grant MIP-9213469. ftl@math.mit.edu;  02139. This material is based upon work supported in part by AFOSR Grant F49620-92-J-0125 and ARPA Grants N00014-91-J-1698 and N00014-92-1799. tompa@cs.washington.edu;  98195. This material is based upon work supported in part by the National Science Foundation under Grants CCR-9002891 and CCR-9301186.  
Address: Seattle, Washington, U.S.A. 98195  Seattle, WA  Cambridge, MA  Wash-ington, Seattle, WA  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  of Computer Science and Engineering, University of Washington,  Mathematics Department and Laboratory for Computer Science, Massachusetts Institute of Technology,  Department of Computer Science and Engineering, University of  
Date: July 7, 1994  
Pubnum: Technical Report #94-07-03  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Bar-Noy, P. Raghavan, B. Schieber, and H. Tamaki. </author> <title> Fast deflection routing for packets and worms. </title> <booktitle> In Proceedings of the Twelfth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 75-86, </pages> <year> 1993. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato routing <ref> [1, 5, 8, 9, 12, 22] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, packets again typically take nonminimal paths. <p> In these algorithms, packets again typically take nonminimal paths. Newman and Schuster [22] 3 give an algorithm that routes any permutation in 7n + o (n) steps, but the algorithm uses sorting. Bar-Noy et al. <ref> [1] </ref> provide a deterministic hot potato routing algorithm not based on sorting that routes any permutation in n2 O ( p log 2 n log 2 log 2 n) steps. In the same paper, they provide a simpler O (n 3=2 ) algorithm. <p> Other minimal adaptive algorithms that could be implemented with a destination-exchangeable algorithm include those of Chien and Kim [6] and Cypher and Gravano [7]. An example of a nonminimal destination-exchangeable algorithm is the O (n 3=2 ) hot potato algorithm of Bar-Noy et al. <ref> [1] </ref>. Definitions Number the columns of the mesh 1 to n from west to east and the rows 1 to n from south to north. Let c be a constant, to be determined later, so that cn = fi (n=k) is an integer. <p> This yields a bound of (n 2 =(ffi + 1) 3 k 2 ). Since the O (n 3=2 ) time hot potato algorithm of Bar-Noy et al. <ref> [1] </ref> is destination exchangeable, the restriction in Theorem 14 of minimal routing cannot be eliminated entirely. The Torus: The bound of Section 4.3 also holds asymptotically for the torus.
Reference: [2] <author> K. E. Batcher. </author> <title> Design of a massively parallel processor. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 29(9) </volume> <pages> 836-840, </pages> <month> September </month> <year> 1980. </year>
Reference-contexts: The mesh and torus topologies have attracted much attention in multiprocessor network design because of their simplicity and their efficient use of space when physically realized. Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace <ref> [2] </ref>, the MP-1 from MasPar [21], the Paragon from Intel Scientific, the J-machine from MIT [23], the Touchstone DELTA from Intel [11], the DASH from Stanford [19], and the Mosaic from Cal Tech [26].
Reference: [3] <author> A. Borodin and J. E. Hopcroft. </author> <title> Routing, merging, and sorting on parallel models of computation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30 </volume> <pages> 130-145, </pages> <year> 1985. </year>
Reference-contexts: At the very least, a good routing algorithm should be able to route permutations efficiently. This introduction concludes by surveying some of the known results for permutation routing. 1.1. Routing with Unbounded Queues Borodin and Hopcroft <ref> [3] </ref> prove an ( p N =d 3=2 ) time bound for routing the worst case permutation on any N -node, degree d network using any oblivious routing algorithm (i.e., the path a packet takes depends only on its source and destination).
Reference: [4] <author> A. Borodin, P. Raghavan, B. Schieber, and E. Upfal. </author> <booktitle> How much can hardware help routing? In Proceedings of the Twenty Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 573-582, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: When a packet reaches its destination, it is considered delivered and removed from the network. This is a multi-port model, in the terminology of Borodin et al. <ref> [4] </ref>. For consistency with the existing literature, we use the word "queue" to denote a set of waiting packets. The packets do not have to be served in a first-in first-out (FIFO) fashion.
Reference: [5] <author> J. T. Brassil and R. L. Cruz. </author> <title> Bounds on maximum delay in networks with deflection routing. </title> <booktitle> In 29th Annual Allerton Conference on Communication, Control, and Computing, </booktitle> <pages> pages 571-580, </pages> <year> 1991. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato routing <ref> [1, 5, 8, 9, 12, 22] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, packets again typically take nonminimal paths.
Reference: [6] <author> A. Chien and J. H. Kim. </author> <title> Planar-adaptive routing: Low-cost adaptive networks for multiprocessors. </title> <booktitle> In Proceedings of the 19th International Symposium on Computer Architecture, </booktitle> <pages> pages 268-277, </pages> <year> 1992. </year>
Reference-contexts: Other minimal adaptive algorithms that could be implemented with a destination-exchangeable algorithm include those of Chien and Kim <ref> [6] </ref> and Cypher and Gravano [7]. An example of a nonminimal destination-exchangeable algorithm is the O (n 3=2 ) hot potato algorithm of Bar-Noy et al. [1].
Reference: [7] <author> R. Cypher and L. Gravano. </author> <title> Adaptive, deadlock-free packet routing in torus networks with minimal storage. </title> <booktitle> In 1992 International Conference on Parallel Processing, </booktitle> <pages> pages 204-211, </pages> <year> 1992. </year>
Reference-contexts: Other minimal adaptive algorithms that could be implemented with a destination-exchangeable algorithm include those of Chien and Kim [6] and Cypher and Gravano <ref> [7] </ref>. An example of a nonminimal destination-exchangeable algorithm is the O (n 3=2 ) hot potato algorithm of Bar-Noy et al. [1]. Definitions Number the columns of the mesh 1 to n from west to east and the rows 1 to n from south to north.
Reference: [8] <author> U. Feige and P. Raghavan. </author> <title> Exact analysis of hot-potato routing. </title> <booktitle> In Proceedings 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 553-562, </pages> <address> Pittsburgh, PA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato routing <ref> [1, 5, 8, 9, 12, 22] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, packets again typically take nonminimal paths.
Reference: [9] <author> B. Hajek. </author> <title> Bounds for evacuation time for deflection routing. </title> <journal> Distributed Computing, </journal> <volume> 5 </volume> <pages> 1-6, </pages> <year> 1991. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato routing <ref> [1, 5, 8, 9, 12, 22] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, packets again typically take nonminimal paths.
Reference: [10] <author> T. Han and D. Stanat. </author> <title> "Move and smooth" routing algorithms on mesh-connected computers. </title> <booktitle> In 28th Annual Allerton Conference on Communication, Control, and Computing, </booktitle> <pages> pages 236-245, </pages> <year> 1990. </year> <month> 30 </month>
Reference-contexts: However, these algorithms may be too complicated, and too specifically tailored to static permutations and synchronous networks to be practical for general routing. Han and Stanat <ref> [10] </ref> provide routing algorithms for the mesh that are not based on sorting, but do use nonminimal paths and knowledge of full destination addresses. Their algorithms can route any permutation in O (n) time and require constant sized queues per node. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [10, 15, 16, 18, 22, 24] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. In addition to our lower bounds, we present the first minimal adaptive routing algorithm that achieves O (n) time with bounded queues.
Reference: [11] <author> Intel. </author> <title> A Touchstone DELTA system description. </title> <type> Technical report, </type> <institution> Intel, </institution> <address> Portland, OR, </address> <year> 1991. </year>
Reference-contexts: Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [2], the MP-1 from MasPar [21], the Paragon from Intel Scientific, the J-machine from MIT [23], the Touchstone DELTA from Intel <ref> [11] </ref>, the DASH from Stanford [19], and the Mosaic from Cal Tech [26].
Reference: [12] <author> C. Kaklamanis, D. Krizanc, and S. Rao. </author> <title> Hot-potato routing on processor arrays. </title> <booktitle> In Proceedings of the 1993 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 273-282, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato routing <ref> [1, 5, 8, 9, 12, 22] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, packets again typically take nonminimal paths.
Reference: [13] <author> C. Kaklamanis, D. Krizanc, and T. Tsantilas. </author> <title> Tight bounds for oblivious routing in the hypercube. </title> <booktitle> In Proceedings of the 1990 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 31-36, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Kaklamanis et al. <ref> [13] </ref> im prove the bound to ( p N =d). These results are useful for networks such as the hypercube, whose diameter and degree are log 2 N, but are no better asymptotically than the diameter lower bound of 2 p N 2 on the two-dimensional mesh.
Reference: [14] <author> D. Krizanc. </author> <title> Oblivious routing with limited buffer capacity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 317-327, </pages> <year> 1991. </year>
Reference-contexts: Routing with Bounded Queues Little is known about lower bounds that exploit the fact that nodes have bounded queues. Krizanc <ref> [14] </ref> proves such a bound for any source-oblivious routing algorithm, which is one where the path a packet takes only depends on its current location and destination.
Reference: [15] <author> M. Kunde. </author> <title> Routing and sorting on mesh-connected arrays. </title> <booktitle> In 3rd Aegean Workshop on Computing (AWOC), volume 319 of Lecture Notes in Computer Science, </booktitle> <pages> pages 423-433. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Packets in these algorithms may take paths that are nonminimal (i.e., make moves that place them farther away from their destination during the sorting phases). For the n fi n mesh, Kunde <ref> [15] </ref> shows that such a deterministic algorithm can route every permutation in 2n + O (n=k) time using queues of size k. Using Kunde's approach, Leighton, Makedon, and Tollis [18] and Rajasekaran and Overholt [24] improve the bound to 2n 2 steps using constant (albeit large) sized queues per node. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [10, 15, 16, 18, 22, 24] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. In addition to our lower bounds, we present the first minimal adaptive routing algorithm that achieves O (n) time with bounded queues. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [15, 18, 22, 24] </ref>, but those algorithms do not use minimal routes. The algorithm consists of an alternation between vertical phases, where packets move closer to their destinations in the vertical dimension, and horizontal phases, where packets move closer to their destinations in the horizontal dimension.
Reference: [16] <author> F. Thomson Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: It is well known that dimension order paths can be used to route any permutation on the n fi n mesh in 2n 2 steps, matching the diameter lower bound (see Leighton <ref> [16, pages 159-162] </ref>). <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [10, 15, 16, 18, 22, 24] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. In addition to our lower bounds, we present the first minimal adaptive routing algorithm that achieves O (n) time with bounded queues. <p> No more than one packet can be scheduled to each outlink. Examples of outqueue policies are FIFO or farthest-first <ref> [16, page 159] </ref>. The inqueue policy of a node determines which packets, of all the packets that attempt to enter a node, will be accepted. The inqueue policy must guarantee that the queue does not overflow (i.e., accept more packets than it is capable of holding). <p> Call an algorithm that fits this description a destination-exchangeable routing algorithm. Note that the restriction to profitable outlinks is similar to the definition of a nonpredic-tive algorithm, given by Ranade [25], Leighton <ref> [16, page 556] </ref>, and Maggs and Sitaraman [20]. One example of a destination-exchangeable algorithm is the dimension order algorithm with FIFO queues and round-robin inqueue policy.
Reference: [17] <author> T. Leighton. </author> <title> Average case analysis of greedy routing algorithms on arrays. </title> <booktitle> In Proceedings of the 1990 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 2-10, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: It is well known that dimension order paths can be used to route any permutation on the n fi n mesh in 2n 2 steps, matching the diameter lower bound (see Leighton [16, pages 159-162]). Unfortunately, this algorithm requires fi (n) size queues at each node. (Leighton <ref> [17] </ref> proves that if each packet has a random destination | i.e., the routing problem is not necessarily a permutation | then with high probability all packets will be delivered in 2 2n + O (log 2 n) steps and none of the queues ever contains more than four packets.
Reference: [18] <author> T. Leighton, F. Makedon, and I. Tollis. </author> <title> A 2n 2 step algorithm for routing in an n fi n array with constant size queues. </title> <booktitle> In Proceedings of the 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 328-335, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: For the n fi n mesh, Kunde [15] shows that such a deterministic algorithm can route every permutation in 2n + O (n=k) time using queues of size k. Using Kunde's approach, Leighton, Makedon, and Tollis <ref> [18] </ref> and Rajasekaran and Overholt [24] improve the bound to 2n 2 steps using constant (albeit large) sized queues per node. However, these algorithms may be too complicated, and too specifically tailored to static permutations and synchronous networks to be practical for general routing. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [10, 15, 16, 18, 22, 24] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. In addition to our lower bounds, we present the first minimal adaptive routing algorithm that achieves O (n) time with bounded queues. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [15, 18, 22, 24] </ref>, but those algorithms do not use minimal routes. The algorithm consists of an alternation between vertical phases, where packets move closer to their destinations in the vertical dimension, and horizontal phases, where packets move closer to their destinations in the horizontal dimension.
Reference: [19] <author> D. Lenoski, J. Laudon, T. Joe, D. Nakahira, L. Stevens, A. Gupta, and J. Hennessy. </author> <title> The DASH prototype: Implementation and performance. </title> <booktitle> In Proc. 19th Annual Symposium on Computer Architecture, </booktitle> <pages> pages 92-103, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [2], the MP-1 from MasPar [21], the Paragon from Intel Scientific, the J-machine from MIT [23], the Touchstone DELTA from Intel [11], the DASH from Stanford <ref> [19] </ref>, and the Mosaic from Cal Tech [26]. One of the simplest benchmarks for a router's performance is how it performs in the worst case on static one-to-one (or partial permutation) routing problems, where each processor sends at most one message and receives at most one message.
Reference: [20] <author> B. Maggs and R. Sitaraman. </author> <title> Simple algorithms for routing on butterfly networks with bounded queues. </title> <booktitle> In Proceedings of the Twenty Fourth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 150-161, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: A more realistic model would allow the node to detect the state of its neighbor and not send the packet. Maggs and Sitaraman <ref> [20] </ref> prove that for any nonpredictive routing algorithm on an N - node butterfly with queues of size k at each node, there exists a permutation that requires (N=(k log 2 N )) time to route. <p> Call an algorithm that fits this description a destination-exchangeable routing algorithm. Note that the restriction to profitable outlinks is similar to the definition of a nonpredic-tive algorithm, given by Ranade [25], Leighton [16, page 556], and Maggs and Sitaraman <ref> [20] </ref>. One example of a destination-exchangeable algorithm is the dimension order algorithm with FIFO queues and round-robin inqueue policy.
Reference: [21] <institution> MP-1 family data-parallel computers. </institution> <type> Technical report, </type> <institution> MasPar Computer Corporation, 749 North Mary Ave., </institution> <address> Sunnyvale, CA., </address> <year> 1987. </year>
Reference-contexts: The mesh and torus topologies have attracted much attention in multiprocessor network design because of their simplicity and their efficient use of space when physically realized. Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [2], the MP-1 from MasPar <ref> [21] </ref>, the Paragon from Intel Scientific, the J-machine from MIT [23], the Touchstone DELTA from Intel [11], the DASH from Stanford [19], and the Mosaic from Cal Tech [26].
Reference: [22] <author> I. Newman and A. Schuster. </author> <title> Hot-potato algorithms for permutation routing. </title> <type> Technical Report PCL Report #9201, </type> <institution> CS Department, Technion, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato routing <ref> [1, 5, 8, 9, 12, 22] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, packets again typically take nonminimal paths. <p> In these algorithms, packets again typically take nonminimal paths. Newman and Schuster <ref> [22] </ref> 3 give an algorithm that routes any permutation in 7n + o (n) steps, but the algorithm uses sorting. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [10, 15, 16, 18, 22, 24] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. In addition to our lower bounds, we present the first minimal adaptive routing algorithm that achieves O (n) time with bounded queues. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [15, 18, 22, 24] </ref>, but those algorithms do not use minimal routes. The algorithm consists of an alternation between vertical phases, where packets move closer to their destinations in the vertical dimension, and horizontal phases, where packets move closer to their destinations in the horizontal dimension.
Reference: [23] <author> M. Noakes and W. Dally. </author> <title> System design of the J-Machine. </title> <booktitle> In Proceedings of the 6th MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 179-194, </pages> <year> 1990. </year> <month> 31 </month>
Reference-contexts: Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [2], the MP-1 from MasPar [21], the Paragon from Intel Scientific, the J-machine from MIT <ref> [23] </ref>, the Touchstone DELTA from Intel [11], the DASH from Stanford [19], and the Mosaic from Cal Tech [26].
Reference: [24] <author> S. Rajasekaran and R. Overholt. </author> <title> Constant queue routing on a mesh. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 15(2) </volume> <pages> 160-166, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: For the n fi n mesh, Kunde [15] shows that such a deterministic algorithm can route every permutation in 2n + O (n=k) time using queues of size k. Using Kunde's approach, Leighton, Makedon, and Tollis [18] and Rajasekaran and Overholt <ref> [24] </ref> improve the bound to 2n 2 steps using constant (albeit large) sized queues per node. However, these algorithms may be too complicated, and too specifically tailored to static permutations and synchronous networks to be practical for general routing. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [10, 15, 16, 18, 22, 24] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. In addition to our lower bounds, we present the first minimal adaptive routing algorithm that achieves O (n) time with bounded queues. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [15, 18, 22, 24] </ref>, but those algorithms do not use minimal routes. The algorithm consists of an alternation between vertical phases, where packets move closer to their destinations in the vertical dimension, and horizontal phases, where packets move closer to their destinations in the horizontal dimension.
Reference: [25] <author> A. Ranade. </author> <title> Equivalence of message scheduling algorithms for parallel communication. </title> <type> Technical Report YALEU/DCS/TR-511, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, CT, </address> <year> 1987. </year>
Reference-contexts: Call an algorithm that fits this description a destination-exchangeable routing algorithm. Note that the restriction to profitable outlinks is similar to the definition of a nonpredic-tive algorithm, given by Ranade <ref> [25] </ref>, Leighton [16, page 556], and Maggs and Sitaraman [20]. One example of a destination-exchangeable algorithm is the dimension order algorithm with FIFO queues and round-robin inqueue policy.
Reference: [26] <author> C. Sietz, N. Boden, J. Seizovic, and W. Su. </author> <title> The design of the Caltech Mosaic C multicomputer. </title> <booktitle> In Proceedings of the Symposium on Integrated Systems, </booktitle> <pages> pages 1-22, </pages> <year> 1993. </year>
Reference-contexts: Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [2], the MP-1 from MasPar [21], the Paragon from Intel Scientific, the J-machine from MIT [23], the Touchstone DELTA from Intel [11], the DASH from Stanford [19], and the Mosaic from Cal Tech <ref> [26] </ref>. One of the simplest benchmarks for a router's performance is how it performs in the worst case on static one-to-one (or partial permutation) routing problems, where each processor sends at most one message and receives at most one message.
References-found: 26

