URL: http://www-icparc.doc.ic.ac.uk/papers/a_new_approach_on_solving_3-satisfiabili.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Title: A New Approach on Solving 3-Satisfiability  
Author: Robert Rodosek 
Address: London SW7 2AZ, England  
Affiliation: IC-Parc, Imperial College,  
Abstract: In this paper we describe and analyse an algorithm for solving the 3-satisfiability problem. If clauses are regarded as constraints of Constraint Satisfaction Problems, then every clause presents a constraint with a special property, namely subquadrangle. We show that the algorithm on subquadrangles guarantees a solution in time less than O(1:476 n ), which improves the current well-known 3-satisfiability algorithms. Tests have shown the number of steps to be significantly smaller also in the average compared with the other algorithms.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Beigel, R., Eppstein, D.: </author> <title> 3-Coloring in Time O(1:3446 n ): A No-MIS Algorithm. </title> <note> In Technical Report ECCC TR95-33 (1995) </note>
Reference-contexts: Papers on worst case analysis of algorithms represent the bounds relative to different parameters of NP-hard problems. Consider the number m of clauses in the 3-SAT problem, Beigel and Epp-stein <ref> [1] </ref> represent an algorithm which takes time O (1:381 m ). Their algorithm is based on the idea to only partially solve the problem by restricting each 3-clause to a 2-clause. <p> As the bound depends on variables, the result is incomparable with bound O (1:381 m ) derived by Beigel and Eppstein. Consider the relationship between parameters m and n (see <ref> [1] </ref>), our bound represents an improvement for 3-SAT problems in which the number of clauses is greater than 1:206n. The paper is organised as follows. In Section 2 we define the notion of sub--quadrangles and some basic operations on them.
Reference: 2. <author> Biggs, N. L.: </author> <title> Discrete Mathematics. </title> <publisher> Oxford Science Publications, </publisher> <address> New York (1994) </address>
Reference-contexts: decisions in SEARCH REST, the following recursive functions are derived: F 0 (n) = 2 fl F 2 (n 1) F 2 (n) = F 1 (n 1) + F 2 (n 4) F 1 (n) = F 0 (n 1) + F 1 (n 4) Using the recursive techniques <ref> [2] </ref> to extract the explicit formula for F 0 (n), it follows that the upper bound complexity is F 0 (n) = 1:4756 n .
Reference: 3. <author> Davis, M., Putnam, H.: </author> <title> A Computing Procedure for Quantification Theory. </title> <journal> Journal of the Association for Computing Machinery 7(3) (1960) 201-215 </journal>
Reference: 4. <author> Fikes, R. E.: REF-ARF: </author> <title> A System for Solving Problems Stated as Procedures. </title> <booktitle> Artificial Intelligence 1 (1970) 27-120 </booktitle>
Reference-contexts: constraint C is usually defined in the CSP notation as a set ft 1 ; :::; t k g of tuples where each tuple t = (d 1 ; :::; d k ) presents a combination of values for the same k-subset 1 of a finite set of variables (cf. <ref> [4] </ref>). We say that this subset of variables is the scope of constraint C. Solving the CSP with a set C of constraints implies searching for a tuple of values for all variables S C2C scope (C) satisfying these constraints.
Reference: 5. <author> Garey, M. R., Johnson, D. S.: </author> <title> Computers and Intractability. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> San Francisco (1979) </address>
Reference-contexts: 1 Introduction The NP-completeness of the 3-Satisfiability problem (3-SAT) is a strong argument that there do not exist algorithms, which solve these problems in polynomial time <ref> [5] </ref>. There has been done a lot of work studying the complexity of algorithms to solve 3-SAT (see, e.g., [6], [10], [15]). Papers on worst case analysis of algorithms represent the bounds relative to different parameters of NP-hard problems.
Reference: 6. <author> Haken, A.: </author> <title> The Intractability of Resolution. </title> <note> Theoretical Computer Science 39 (1985) 297-308 </note>
Reference-contexts: 1 Introduction The NP-completeness of the 3-Satisfiability problem (3-SAT) is a strong argument that there do not exist algorithms, which solve these problems in polynomial time [5]. There has been done a lot of work studying the complexity of algorithms to solve 3-SAT (see, e.g., <ref> [6] </ref>, [10], [15]). Papers on worst case analysis of algorithms represent the bounds relative to different parameters of NP-hard problems. Consider the number m of clauses in the 3-SAT problem, Beigel and Epp-stein [1] represent an algorithm which takes time O (1:381 m ).
Reference: 7. <author> Jeavons, P. G.: </author> <title> The Expressive Power of Constraint Networks. </title> <note> In Technical Report CSD-TR-640, </note> <institution> Royal Holloway and Bedford New College, University of London (1990) </institution>
Reference-contexts: The information the subquadrangles tell us is of particular interest. If we are given a constraint on three variables we could not have been given the same information by knowing the three derived pairwise constraints between the variables. In fact ternary constraints give us much more "expressive power" <ref> [7] </ref>. If a ternary constraint is a subquadrangle, then the derived binary constraints give us no information! Proposition 2. Every clause is a subquadrangle. Proof of proposition.
Reference: 8. <author> Lawler, E. L.: </author> <title> A Note on the Complexity of the Chromatic Number Problem. </title> <journal> Inf. Proc. Lett. </journal> <month> 5 </month> <year> (1976) </year> <month> 66-67 </month>
Reference: 9. <author> Mayer, J., Mitterreiter, I., Radermacher, F. J.: </author> <title> Running Time Experiments on some Algorithms for Solving Propositional Satisfiability Problems. </title> <type> In Technical Report, </type> <institution> Forschungsinstitut fur anwendungsorientierte Wissensverarbeitung, Ulm (1994) </institution>
Reference-contexts: Moreover, by empirical results on several satisfiability problems in <ref> [9] </ref> (also the pigeon-hole problem) the proposed algorithm gives better results than the other well-known satisfiability algorithms (see in [9]): 1. Davis/Putnam/Loveland-algorithm (DPL): the version of this algorithm was implemented by prof. John Hooker, Pittsburgh, USA. The well-known algo rithm is based on unit resolution. 2. <p> Moreover, by empirical results on several satisfiability problems in <ref> [9] </ref> (also the pigeon-hole problem) the proposed algorithm gives better results than the other well-known satisfiability algorithms (see in [9]): 1. Davis/Putnam/Loveland-algorithm (DPL): the version of this algorithm was implemented by prof. John Hooker, Pittsburgh, USA. The well-known algo rithm is based on unit resolution. 2. Jeroslow/Wang-algorithm (Jer-Wa): the version of this algorithm was implemented by prof. John Hooker.
Reference: 10. <author> Monien, B., Speckenmeyer, E.: </author> <title> Solving Satisfiability in less than 2 n Steps. </title> <journal> Discrete Appl. Math. </journal> <month> 10 </month> <year> (1985) </year> <month> 287-295 </month>
Reference-contexts: 1 Introduction The NP-completeness of the 3-Satisfiability problem (3-SAT) is a strong argument that there do not exist algorithms, which solve these problems in polynomial time [5]. There has been done a lot of work studying the complexity of algorithms to solve 3-SAT (see, e.g., [6], <ref> [10] </ref>, [15]). Papers on worst case analysis of algorithms represent the bounds relative to different parameters of NP-hard problems. Consider the number m of clauses in the 3-SAT problem, Beigel and Epp-stein [1] represent an algorithm which takes time O (1:381 m ). <p> It is tested in polynomial time if the partial solution can be extended to a complete satisfiability (e.g. as a 2-SAT instance). Consider the number n of variables in the 3-SAT problem, the worst case analysis we are aware of are by Monien and Speckenmeyer <ref> [10] </ref>, and Schiermeyer [12]. Monien and Speckenmeyer give an algorithm using autark truth assignments test and it takes time O (1:619 n ).
Reference: 11. <author> Rodosek, R.: </author> <title> Combining Heuristics for Constraint Satisfaction Problems. Proceedings of the CP'95 Workshop on Studying and Solving Really Hard Problems, </title> <month> Cassis </month> <year> (1995) </year> <month> 147-156 </month>
Reference-contexts: To solve the 3-SAT problem we consider only constraints over at most three variables. The join 2 of clauses over three variables is called a 3-SAT constraint. Using the result on subquadrangles <ref> [11] </ref>, every 3-SAT constraint can be expressed by subquadrangles with different scopes. A graphical representation of the scopes of such subquadrangles is given in Fig. 1.
Reference: 12. <author> Schiermeyer, I.: </author> <title> Solving 3-Satisfiability in less than 1:579 n Steps. </title> <booktitle> 6th Workshop Computer Science Logic, </booktitle> <month> Spring-Verlag </month> <year> (1993) </year> <month> 379-394 </month>
Reference-contexts: It is tested in polynomial time if the partial solution can be extended to a complete satisfiability (e.g. as a 2-SAT instance). Consider the number n of variables in the 3-SAT problem, the worst case analysis we are aware of are by Monien and Speckenmeyer [10], and Schiermeyer <ref> [12] </ref>. Monien and Speckenmeyer give an algorithm using autark truth assignments test and it takes time O (1:619 n ). Otherwise, Schiermeyer represents an algorithm which is based on procedures for 21 different "patterns" (i.e., specific combinations of clauses over some variables) and it takes time O (1:579 n ).
Reference: 13. <author> Schiermeyer, I.: </author> <title> Deciding 3-Colourability in less than O(1:415 n ) Steps. </title> <booktitle> 19th Int. Workshop Graph-Theoretic Concepts in Computer Science, </booktitle> <month> Spring-Verlag </month> <year> (1994) </year> <month> 177-182 </month>
Reference: 14. <author> Trumper, K., Radermacher, F. J.: </author> <title> Analyse der Leistungsfahigkeit eines neuen Systems zur Auswertung aussagenlogischer Probleme. </title> <note> In Technical Report FAW-TR-90003 (1990) </note>
Reference-contexts: 68,66 10,23 hole7 56 204 181,77 75,48 710,53 447,85 1875,48 1042,24 43,12 hole8 72 297 2.112,61 642,53 # 1518,06 # # 206,91 hole9 90 415 # 5.512,02 # 5.770,87 # # 812,03 hole10 110 561 # # # # # # 2.768,94 set of 3-satisfiability benchmarks which are suggested in <ref> [14] </ref>. These problems were recursively generated by addition of binary equalities. Surprisingly, our algorithm solved the problems without backtracking while the other algorithms needed much more search effort. For all benchmarks in [14] our algorithm does not need more time than the satisfiability algorithms which are mentioned in this section. 5 <p> hole10 110 561 # # # # # # 2.768,94 set of 3-satisfiability benchmarks which are suggested in <ref> [14] </ref>. These problems were recursively generated by addition of binary equalities. Surprisingly, our algorithm solved the problems without backtracking while the other algorithms needed much more search effort. For all benchmarks in [14] our algorithm does not need more time than the satisfiability algorithms which are mentioned in this section. 5 Conclusions The proposed algorithm for the 3-SAT problem is based on subquadrangles which allow simply to identify k variables such that their instantiation causes an instantiation of other k variables.
Reference: 15. <author> Urquhart, A.: </author> <title> Hard Examples for Resolution. </title> <note> JACM 34 (1987) 209-219 </note>
Reference-contexts: 1 Introduction The NP-completeness of the 3-Satisfiability problem (3-SAT) is a strong argument that there do not exist algorithms, which solve these problems in polynomial time [5]. There has been done a lot of work studying the complexity of algorithms to solve 3-SAT (see, e.g., [6], [10], <ref> [15] </ref>). Papers on worst case analysis of algorithms represent the bounds relative to different parameters of NP-hard problems. Consider the number m of clauses in the 3-SAT problem, Beigel and Epp-stein [1] represent an algorithm which takes time O (1:381 m ).
References-found: 15

