URL: http://www.cs.utexas.edu/users/dmcl/papers/ps/ACMMM95.ps
Refering-URL: http://www.cs.utexas.edu/users/dmcl/allpapers.html
Root-URL: 
Email: E-mail: fshenoy,ving@cs.utexas.edu,  
Phone: Phone: (512) 471-9738, Fax: (512) 471-7866  
Title: Efficient Support for Scan Operations in Video Servers  
Author: Prashant J. Shenoy and Harrick M. Vin 
Keyword: Video servers, scan operations, disk arrays  
Address: Taylor Hall 2.124, Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences, University of Texas at Austin  
Abstract: In this paper, we present an algorithm that integrates scalable compression techniques with placement algorithms for disk-arrays to provide efficient support for interactive scan operations (i.e., fast-forward and rewind) in video servers. We demonstrate that by suitably exploiting the characteristics of video streams and human perceptual tolerances, the overhead of such interactive operations can be substantially reduced. We present an analytical model for evaluating the impact of the fast-forward operation on the performance of the disk-array-based server. We validate the model through extensive simulations and analyze our results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Anderson, Y. Osawa, and R. Govindan. </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to data rate and real-time performance requirements), several research groups have investigated techniques for meeting the real-time playback requirement of video streams <ref> [1, 7, 11, 13, 15] </ref>. However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated.
Reference: [2] <author> E. Chang and A. Zakhor. </author> <title> Scalable Video Placement on Parallel Disk Arrays. </title> <booktitle> In Proceedings of IS&T/SPIE International Symposium on Electronic Imaging: Science and Technology, </booktitle> <address> San Jose, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Placement of Base and Enhancement Sub-streams A multimedia server may employ a fixed-size block placement policy, or a variable-size block placement policy to store compressed video streams on a disk-array <ref> [2, 9, 14] </ref>. In the fixed-size block placement policy, each media block consists of a fixed number of storage units (i.e., bytes). Since, each media stream stored on the array is compressed using a variable bit rate (VBR) compression algorithm, each block contains variable number of frames.
Reference: [3] <author> M. S. Chen, D. D. Kandlur, and P. S. Yu. </author> <title> Support for Fully Interactive Playout in a Disk-Array-Based Video Server. </title> <booktitle> In Proceedings of the Second International Conference on Multimedia, </booktitle> <pages> pages 391-398, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated. Relation to Previous Work In general, schemes that support fast-forward and rewind operations for video either display frames at a rate higher than normal playback [5], or skip frames <ref> [3] </ref>. In the former scheme, fast-forward at n-times the normal playback rate requires n-times as many frames to be retrieved (as compared to the normal playback), yielding an n-fold increase in the load on the server. <p> This is because, such compression techniques create inter-frame dependencies, which may prevent every n th frame to be independently decoded. To avoid this problem, Chen et al. <ref> [3] </ref> have recently proposed a fast-forward scheme in which: (1) video streams are stored on disks in terms of segments, consisting of group of frames that can be independently decoded; and (2) fast-forward at n-times the normal playback is achieved by accessing and displaying one out of every n successive segments.
Reference: [4] <author> T. Chiang and D. Anastassiou. </author> <title> Heirarchichal Coding of Digital Television. </title> <journal> IEEE Communications, </journal> <volume> 32(4) </volume> <pages> 38-45, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Since P and B frames exploit temporal redundancies, they achieve much higher compression ratios as compared to I frames. Figure 2 depicts the main steps involved in the MPEG compression algorithm. The MPEG-2 standard extends this algorithm by supporting scalability in the spatial, temporal, and chroma dimensions <ref> [4] </ref>. An important feature of the MPEG compression algorithm is that the relative frequency of occurrence of I, P , and B frames (i.e the encoding pattern) can be controlled by the application. <p> The bit rate can be reduced by partitioning the base sub-stream into low-resolution and residual components, and utilizing only the low-resolution component for fast-forward. Examples of such chroma partitioning techniques include the SNR scalability and the data partitioning modes of the MPEG-2 standard <ref> [4] </ref>. Whereas the SNR scalability mode creates the low-resolution and residual components by controlling the granularity of quantization, the data partitioning technique achieves a similar effect by explicitly dividing the frequency domain coefficients between the two components.
Reference: [5] <author> J. K. Dey-Sircar, J. D. Salehi, J. F. Kurose, and D. Towsley. </author> <title> Providing VCR Capabilities in Large-Scale Video Servers. </title> <booktitle> In Proceedings of the Second ACM International Conference on Multimedia, </booktitle> <pages> pages 25-32, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated. Relation to Previous Work In general, schemes that support fast-forward and rewind operations for video either display frames at a rate higher than normal playback <ref> [5] </ref>, or skip frames [3]. In the former scheme, fast-forward at n-times the normal playback rate requires n-times as many frames to be retrieved (as compared to the normal playback), yielding an n-fold increase in the load on the server. <p> The additional bandwidth that must be set aside is dependent on the probability of clients requesting a transition from playback to fast-forward, as well as the duration for which a client may remain in the fast-forward mode <ref> [5] </ref>. In schemes that skip frames, on the other hand, fast-forward at n-times the normal playback rate is achieved by displaying every n th frame at the normal playback rate.
Reference: [6] <author> D. Le Gall. </author> <title> MPEG: A Video Compression Standard for Multimedia Apllications. </title> <journal> Communications of the ACM, </journal> <volume> 34(4) </volume> <pages> 46-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Although conceptually elegant, such frame skipping schemes may not be directly applicable for video streams that are encoded using compression techniques that exploit temporal redundancy between successive frames (e.g., MPEG compression standard <ref> [6] </ref>). This is because, such compression techniques create inter-frame dependencies, which may prevent every n th frame to be independently decoded. <p> However, independently maintaining such a fast-forward stream may incur substantial storage space overhead. To minimize the storage space overhead, the MPEG standard has proposed the creation of a video stream containing D frames, which only contain the DC coefficients of the transform blocks <ref> [6] </ref>. However, this yields a video stream with very poor resolution, which is not acceptable for most applications. <p> In intra-frame compression algorithms (e.g., JPEG [10]), since successive frames can be decoded independently, the pre- and the post-compression partitioning techniques are logically equivalent. Moreover, they do not have any adverse effects on the compression efficiency. In inter-frame compression algorithms (e.g., MPEG <ref> [6] </ref>), on the other hand, the degree of compression is critically dependent on the correlation between successive frames of a video stream. Consequently, if the video stream is temporally partitioned prior to compression, then the resultant reduction in correlation between successive frames within each sub-stream may substantially degrade compression efficiency. <p> In what follows, we show how these techniques may be employed for the MPEG compression algorithm. Supporting Fast-Forward in MPEG The MPEG Compression Standard The MPEG compression algorithm exploits the large temporal and spatial redundancies present within an image to achieve a high degree of compression <ref> [6] </ref>.
Reference: [7] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of De--lay Sensitive Multimedia Data Storage and Retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to data rate and real-time performance requirements), several research groups have investigated techniques for meeting the real-time playback requirement of video streams <ref> [1, 7, 11, 13, 15] </ref>. However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated.
Reference: [8] <author> E.K. Lee and R.H. Katz. </author> <title> An Analytic Performance Model for Disk Arrays. </title> <booktitle> In Proceedings of the 1993 ACM SIGMETRICS, </booktitle> <pages> pages 98-109, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: are equally spaced across the C cylinders of a disk, we define t seek = t seek B exp c , where: t seek (x) = a x 1 + b (x 1) + c otherwise and a, b, and c are constants (determined using physical characteristics of a disk) <ref> [8] </ref>. The rotational latency t exp defined to be half of the maximum rotational latency.
Reference: [9] <author> S. Paek, P. Bocheck, and S. F. Chang. </author> <title> Scalable MPEG2 Video Servers with Heterogeneous QoS on Parallel Disk Arrays. </title> <booktitle> In Proceedings of the Fifth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Placement of Base and Enhancement Sub-streams A multimedia server may employ a fixed-size block placement policy, or a variable-size block placement policy to store compressed video streams on a disk-array <ref> [2, 9, 14] </ref>. In the fixed-size block placement policy, each media block consists of a fixed number of storage units (i.e., bytes). Since, each media stream stored on the array is compressed using a variable bit rate (VBR) compression algorithm, each block contains variable number of frames.
Reference: [10] <author> W. B. Pennebaker and J. L. Mitchell. </author> <title> JPEG Still Image Data Compression Standard. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1993. </year>
Reference-contexts: Observe that, such temporal partitioning can be accomplished either prior-to, or after compression (referred to as pre-compression and post-compression partitioning, respectively) (see Figure 1). The applicability of these approaches, however, is dependent on the compression algorithm. In intra-frame compression algorithms (e.g., JPEG <ref> [10] </ref>), since successive frames can be decoded independently, the pre- and the post-compression partitioning techniques are logically equivalent. Moreover, they do not have any adverse effects on the compression efficiency.
Reference: [11] <author> F.A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming RAID: A Disk Storage System for Video and Audio Files. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 393-400, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to data rate and real-time performance requirements), several research groups have investigated techniques for meeting the real-time playback requirement of video streams <ref> [1, 7, 11, 13, 15] </ref>. However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated.
Reference: [12] <author> K. S. Trivedi. </author> <title> Probability & Statistics With Reliability, Queuing, </title> <booktitle> And Computer Science Applications. </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: Let us assume that a client in the playback mode can switch to the fast-forward mode at any random instant and vice versa, and that such a behavior can be modeled using a two state Markov chain <ref> [12] </ref> (see Figure 6). In Figure 6, P i pl denotes the probability of switching from playback to fast-forward, and P i ff denotes the probability of switching from fast-forward to playback mode for client i. <p> That is, X j i 's are independent. Hence, we get: Z (B j ) = i=1 j where Z (B j ) and Z (X j i ) are the z-transforms of the random variables B j and X j i , respectively <ref> [12] </ref>.
Reference: [13] <author> H. M. Vin, P. Goyal, A. Goyal, and A. Goyal. </author> <title> A Statistical Admission Control Algorithm for Multimedia Servers. </title> <booktitle> In Proceedings of the ACM Multimedia'94, </booktitle> <address> San Francisco, </address> <pages> pages 33-40, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to data rate and real-time performance requirements), several research groups have investigated techniques for meeting the real-time playback requirement of video streams <ref> [1, 7, 11, 13, 15] </ref>. However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated. <p> Since the server services multiple clients simultaneously by proceeding in terms of periodic rounds, during each round, the server will access a fixed number of frames for each client <ref> [13] </ref>. In such a scenario, to minimize the seek time and rotational latency incurred during a round: (1) each block associated with the sub-streams should contain the number of frames needed in a round, and (2) blocks of the sub-streams must be stored contiguously on disk (See Figure 5).
Reference: [14] <author> H.M. Vin, S.S. Rao, and P. Goyal. </author> <title> Optimizing the Placement of Multimedia Objects on Disk Arrays. </title> <booktitle> In Proceedings of the Second IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Washington, D.C., </address> <pages> pages 158-165, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Placement of Base and Enhancement Sub-streams A multimedia server may employ a fixed-size block placement policy, or a variable-size block placement policy to store compressed video streams on a disk-array <ref> [2, 9, 14] </ref>. In the fixed-size block placement policy, each media block consists of a fixed number of storage units (i.e., bytes). Since, each media stream stored on the array is compressed using a variable bit rate (VBR) compression algorithm, each block contains variable number of frames. <p> On the other hand, in the variable-size block placement policy, each media block consists of a fixed number of media units (i.e., frames), and hence, the size of the media block varies from one block to another. A detailed comparison of these policies is presented in <ref> [14] </ref>. In this section, we assume that the multimedia server employs a variable-size block placement policy. The techniques presented in this section, however, can be easily extended for a fixed-size block placement policy.
Reference: [15] <author> P. Yu, M.S. Chen, and D.D. Kandlur. </author> <title> Design and Analysis of a Grouped Sweeping Scheme for Multimedia Storage Management. </title> <booktitle> Proceedings of Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, </address> <pages> pages 38-49, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to data rate and real-time performance requirements), several research groups have investigated techniques for meeting the real-time playback requirement of video streams <ref> [1, 7, 11, 13, 15] </ref>. However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated.
References-found: 15

