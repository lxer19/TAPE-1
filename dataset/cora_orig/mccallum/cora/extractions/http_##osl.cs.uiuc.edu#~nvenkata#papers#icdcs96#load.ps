URL: http://osl.cs.uiuc.edu/~nvenkata/papers/icdcs96/load.ps
Refering-URL: http://osl.cs.uiuc.edu/~nvenkata/
Root-URL: http://www.cs.uiuc.edu
Email: (nalini,srinivas)@hpl.hp.com  
Title: Load Management in Distributed Video Servers  
Author: Nalini Venkatasubramanian and Srinivas Ramanathan 
Date: October 5, 1996  
Address: 1501 Page Mill Road Palo Alto, CA 94304  
Affiliation: Broadband Information Systems Lab Hewlett-Packard Laboratories  
Abstract: In this paper, we define and formulate various policies for load management in distributed video servers. We propose a predictive placement policy that determines the degree of replication necessary for popular videos using a cost-based optimization procedure based on a priori predictions of expected subscriber requests. For scheduling requests, we propose an adaptive scheduling policy that compares the relative utilization of resources in a video server to determine an assignment of requests to replicas. To optimize storage utilization, we also devise methods for dereplication of videos based on changes in their popularities and in server usage patterns. Performance evaluations indicate that a load management procedure which uses a judicious combination of the different policies performs best for most server configurations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.P. Anderson, Y. Osawa, and R. Govindan. </author> <title> A file system for continuous media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: ability to add additional data sources to the server in order to provide increased storage capacity and transfer bandwidth. 1 1.2 Design Issues for Video Servers 1.2.1 Related Work Many of the initial efforts in designing video servers have focussed on placement of media on disk to ensure real-time retrieval <ref> [1, 17] </ref>. Admission control procedures to maximize server throughput [15] and buffer management policies to minimize memory requirements [9, 11] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [10, 13].
Reference: [2] <author> C. Bisdikian and B. V. Patel. </author> <title> Issues on movie allocation in distributed video-on-demand systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Communications, </booktitle> <volume> volume 1, </volume> <pages> pages 250-255, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The video server stores 50 MPEG-2 movies, each with an average bandwidth requirement of 3 Mbps. The average duration of the movies is assumed to vary uniformly between 30 and 120 minutes. Following the results reported in <ref> [2, 5] </ref>, we assume that the popularity of movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: Pr. (movie m i is requested) = K M i where K M = P M 1 1 Assuming that the request arrivals per hour
Reference: [3] <author> M. Buddhikot and G. Parulkar. </author> <title> Efficient data layout, scheduling and playout control in mars. </title> <booktitle> In Proceedings of NOSSDAV'95, </booktitle> <pages> pages 339-351, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: These video servers are being deployed over emerging broadband networks to deliver a variety of interactive, digital video services to thousands of residential subscribers [4]. To meet the scalability requirements in such large deployments, distributed video server architectures are being considered <ref> [3] </ref>. In this paper, we propose various methods for load management that are targeted at improving the cost-effectiveness of distributed video servers. 1.1 Architecture of a Distributed Video Server To set the context, we first consider the architecture of a typical distributed video server (see Figure 1).
Reference: [4] <author> Y.H. Chang, D. Coggins, D. Pitt, D. Skellern, and M. Thapar. </author> <title> An open-systems approach to video on demand. </title> <journal> IEEE Communications, </journal> <volume> 32(5) </volume> <pages> 68-80, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Advances in storage technologies are making high-performance video servers a reality. These video servers are being deployed over emerging broadband networks to deliver a variety of interactive, digital video services to thousands of residential subscribers <ref> [4] </ref>. To meet the scalability requirements in such large deployments, distributed video server architectures are being considered [3].
Reference: [5] <author> Y.S. Chen and P.Chong. </author> <title> Mathematical modeling of empirical laws in computer applications. </title> <journal> Com-put. Math. Appl., </journal> <pages> pages 77-87, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The video server stores 50 MPEG-2 movies, each with an average bandwidth requirement of 3 Mbps. The average duration of the movies is assumed to vary uniformly between 30 and 120 minutes. Following the results reported in <ref> [2, 5] </ref>, we assume that the popularity of movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: Pr. (movie m i is requested) = K M i where K M = P M 1 1 Assuming that the request arrivals per hour
Reference: [6] <author> A. Dan, M. Kienzle, and D. Sitaram. </author> <title> Dynamic policy of segment replication for load-balancing in video-on-demand servers. </title> <journal> ACM Multimedia Systems, </journal> <volume> 3(3) </volume> <pages> 93-103, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: The goal of the dynamic phase is the minimization of an objective function that optimally balances disk loads, again, using a graph theoretic approach. A dynamic segment replication scheme for partial replication of video objects is proposed in <ref> [6] </ref>. This mechanism permits the executing requests to be dynamically migrated to a replica on a less loaded device. The trade-offs between storage 2 space and transfer bandwidth are highlighted in [7].
Reference: [7] <author> A. Dan and D. Sitaram. </author> <title> An online video placement policy based on bandwidth to space ratio (bsr). </title> <booktitle> In SIGMOD '95, </booktitle> <pages> pages 376-385, </pages> <year> 1995. </year>
Reference-contexts: A dynamic segment replication scheme for partial replication of video objects is proposed in [6]. This mechanism permits the executing requests to be dynamically migrated to a replica on a less loaded device. The trade-offs between storage 2 space and transfer bandwidth are highlighted in <ref> [7] </ref>. <p> Since the data sources are connected via an external network and may have heterogeneous and distinct resources that are not shared with the other data sources, the tradeoffs to be considered for load management differ from those that exist in switched-storage servers <ref> [16, 7] </ref>. For instance, the application of the dynamic segment replication scheme in the context of a distributed video server requires renegotiation and reestablishment of network connections for every request migration, thereby introducing unacceptable jitter during playback. <p> the popularity of movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: Pr. (movie m i is requested) = K M i where K M = P M 1 1 Assuming that the request arrivals per hour follow a Zipf-like distribution <ref> [7] </ref>, we compute the probability of request arrival in hour j to be: p j = c=(j 1 ), for 1 j 24, where is the degree of skew and is assumed to be 0.8. The constant c = 1=( P (1=j 1 )), 1 j 24.
Reference: [8] <author> A. Dan, D. Sitaram, and P. Shahabuddin. </author> <title> Dynamic batching policies for an on-demand video server. </title> <journal> ACM Multimedia Systems, </journal> <volume> 4 </volume> <pages> 112-121, </pages> <year> 1996. </year>
Reference-contexts: Replication and striping strategies for optimizing storage across disk arrays are described in [10, 13]. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth are proposed in <ref> [8] </ref>. All of these mechanisms are applicable to the design of data sources in the distributed video server architecture depicted in Figure 1.
Reference: [9] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of delay sensitive multimedia data storage and retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Admission control procedures to maximize server throughput [15] and buffer management policies to minimize memory requirements <ref> [9, 11] </ref> have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [10, 13]. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth are proposed in [8].
Reference: [10] <author> K. Keeton and R. Katz. </author> <title> The evaluation of video layout strategies on a high-bandwidth file server. </title> <booktitle> In Proceedings of the Fourth International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, UK, </booktitle> <pages> pages 237-250, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Admission control procedures to maximize server throughput [15] and buffer management policies to minimize memory requirements [9, 11] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in <ref> [10, 13] </ref>. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth are proposed in [8]. All of these mechanisms are applicable to the design of data sources in the distributed video server architecture depicted in Figure 1.
Reference: [11] <author> P. Lougher and D. Shepherd. </author> <title> The design of a storage server for continuous media. </title> <journal> The Computer Journal Special Issue on Distributed Multimedia Systems, </journal> <volume> 36(1) </volume> <pages> 32-42, </pages> <month> February </month> <year> 1993. </year> <month> 22 </month>
Reference-contexts: Admission control procedures to maximize server throughput [15] and buffer management policies to minimize memory requirements <ref> [9, 11] </ref> have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [10, 13]. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth are proposed in [8].
Reference: [12] <author> M. Thapar and B. Koerner. </author> <title> Architecture for video servers. </title> <booktitle> In Proceedings of the 43rd Annual NCTA Convention and Exposition, </booktitle> <address> New Orleans, </address> <publisher> Louisiana, </publisher> <pages> pages 141-148, </pages> <year> 1994. </year>
Reference-contexts: The main components of the video server are a number of independent and distributed data sources, each of which includes high capacity storage devices (e.g. hard-disks), processor, buffer memory, and high-speed network interfaces for real-time video retrieval and transmission <ref> [12] </ref>. Since the number of video objects (e.g., movies, news, advertisements, etc.) that can be requested for access by subscribers far exceeds the available disk capacity, the video server also includes tertiary storage. A central distribution controller (DC) governs the operation of the data sources.
Reference: [13] <author> F.A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming raid: A disk storage system for video and audio files. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 393-400, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Admission control procedures to maximize server throughput [15] and buffer management policies to minimize memory requirements [9, 11] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in <ref> [10, 13] </ref>. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth are proposed in [8]. All of these mechanisms are applicable to the design of data sources in the distributed video server architecture depicted in Figure 1.
Reference: [14] <author> N. Venkatasubramanian and S. Ramanathan. </author> <title> Effective load management for scalable video servers. </title> <type> Technical report, </type> <institution> Hewlett-Packard Research Laboratories, </institution> <month> Feb </month> <year> 1996. </year>
Reference-contexts: ; b ( 1 LF (R 3 ;S 3 ) )c) fl r 3 LF (R 4 ;S 1 ) )c) fl r 4 min (N 4 ; b ( 1 LF (R 4 ;S 3 ) )c) fl r 4 Table 1: Placement matrix for request R i elsewhere <ref> [14] </ref>. In the ensuing discussion, we assume that the requests expected for different video objects during the next prediction period are available. We are currently investigating methods for predicting expected subscriber requests to video objects depending upon past history, classification of video objects, characteristics of subscriber communities, etc.
Reference: [15] <author> H. M. Vin and P. V. Rangan. </author> <title> Designing a multi-user hdtv storage server. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(1) </volume> <pages> 153-164, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Admission control procedures to maximize server throughput <ref> [15] </ref> and buffer management policies to minimize memory requirements [9, 11] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [10, 13].
Reference: [16] <author> J. L. Wolf Wolf, P. S. Yu Yu, and H. Shachnai. </author> <title> Dasd dancing: A disk load balancing optimization scheme for video-on-demand computer systems. </title> <booktitle> In Proceedings of ACM SIGMETRICS '95, Performance Evaluation Review, </booktitle> <pages> pages 157-166, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Load balancing and resource management have been studied mainly in the context of switched-storage video servers that comprise of processing unit (s) with shared access to a set of storage devices. Considering the storage subsystem alone, a two-stage DASD dancing scheme for load balancing is studied in <ref> [16] </ref>. In the initial static stage, a greedy assignment of videos to disk groups is obtained using a graph-theoretic approach. The dynamic phase that follows uses the static assignment to perform real-time disk scheduling effectively. <p> Since the data sources are connected via an external network and may have heterogeneous and distinct resources that are not shared with the other data sources, the tradeoffs to be considered for load management differ from those that exist in switched-storage servers <ref> [16, 7] </ref>. For instance, the application of the dynamic segment replication scheme in the context of a distributed video server requires renegotiation and reestablishment of network connections for every request migration, thereby introducing unacceptable jitter during playback.
Reference: [17] <author> P. Yu, M.S. Chen, and D.D. Kandlur. </author> <title> Design and analysis of a grouped sweeping scheme for multimedia storage management. </title> <booktitle> Proceedings of Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, </address> <pages> pages 38-49, </pages> <month> November </month> <year> 1992. </year> <month> 23 </month>
Reference-contexts: ability to add additional data sources to the server in order to provide increased storage capacity and transfer bandwidth. 1 1.2 Design Issues for Video Servers 1.2.1 Related Work Many of the initial efforts in designing video servers have focussed on placement of media on disk to ensure real-time retrieval <ref> [1, 17] </ref>. Admission control procedures to maximize server throughput [15] and buffer management policies to minimize memory requirements [9, 11] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [10, 13].
References-found: 17

