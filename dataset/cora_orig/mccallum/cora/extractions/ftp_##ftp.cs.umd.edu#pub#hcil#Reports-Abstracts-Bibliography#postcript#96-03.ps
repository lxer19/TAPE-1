URL: ftp://ftp.cs.umd.edu/pub/hcil/Reports-Abstracts-Bibliography/postcript/96-03.ps
Refering-URL: http://www.cs.umd.edu/projects/hcil/Research/tech-report-list.html
Root-URL: 
Email: e-mail: norm@cs.man.ac.uk  email: doan@cs.umd.edu  e-mail: &lt;jipdigao,jipjaela&gt;@si.ehu.es  
Title: Exploitation of Object-Oriented and Active Constructs in Database Interface Development  
Author: Norman W. Paton Khoa Doan Oscar Daz, Arturo Jaime 
Address: Oxford Road, Manchester, UK  College Park, MD 20742, Maryland, USA  San Sebastian, Spain  
Affiliation: Department of Computer Science, University of Manchester  Human-Computer Interaction Laboratory, University of Maryland  Departamento de Lenguajes Sistemas Informaticos University of the Basque Country  
Abstract: This paper presents some experiences in the exploitation of a database interface development architecture in which the interface is implemented using the facilities of the database. It is shown how novel interfaces, specifically a multi-paradigm query interface and a debugger for an active rule system, can benefit from and exploit the uniform represen tation of interface and database system concepts as database objects.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Al-Qaimari and N. W. Paton. </author> <title> Design and Evaluation of Visualisations for Advanced Data Modelling Constructs. </title> <editor> In C. Chris-ment, editor, </editor> <booktitle> Basque International Workshop on IT (BIWIT), </booktitle> <pages> pages 169-182. </pages> <publisher> Cepadues Press, </publisher> <year> 1994. </year>
Reference-contexts: To enable experimentation with a range of alternative visuali-sations of advanced data modelling constructs, the browser described in the previous section was used as a testbed for prototyping a range of visual representations of modelling features <ref> [1] </ref>.
Reference: [2] <author> G. Al-Qaimari, N. W. Paton, and A.C. Kilgour. </author> <title> Visualising Advanced Data Modelling Constructs. </title> <journal> Information and Software Technology, </journal> <volume> 36(10) </volume> <pages> 597-606, </pages> <year> 1994. </year>
Reference-contexts: Various researchers have proposed database interfaces which are targeted at specific extensions to database functionality, including composite objects and user-defined relationships <ref> [2] </ref>, versions [13], spatial data [17], persistent data types [7] and programs [11, 6]. It is clear from such work that there is an extensive design space, with many alternative ways of representing different concepts and operations applicable to them.
Reference: [3] <author> J. Almarode and T.L. Anderson. </author> <title> GemStone Visual Interface Designer: A Tool for Object-Oriented Database Design. In Object-Oriented Databases: Analysis, </title> <booktitle> Design and Construction (DS-4), </booktitle> <pages> pages 73-94. </pages> <publisher> North-Holland, </publisher> <year> 1991. </year> <institution> W. Meersman et al (Eds). </institution>
Reference-contexts: From this perspective, database interfaces can be implemented using software such as user interface management systems or widget sets, and examples of the use of such systems with databases abound <ref> [27, 3, 16] </ref>. There is also an extent to which, however, database interfaces can be held to be different from interfaces to other software systems. Such a distinction can be drawn from the observation that databases and interface management systems both include facilities for the structuring and manipulation of data.
Reference: [4] <author> T. Lougeia Anderson, E. F. Ecklund, and D. Maier. PROTEUS: </author> <title> The DBMS User Interface as an Object. </title> <booktitle> In On Object-Oriented DB Systems, </booktitle> <pages> pages 139-156. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <editor> K. R. Dittrich and U. </editor> <booktitle> Dayal (Eds). </booktitle>
Reference-contexts: For this to be practical, the database must support comprehensive mechanisms for the structuring and manipulation of interface data, but a number of approaches have been reported in the literature <ref> [19, 15, 4, 18] </ref>. The use of an integrated architecture avoids impedance mismatches between the language used to store and manipulate interface data and that associated with the database, as discussed further in [23].
Reference: [5] <author> M.L. Barja, N.W. Paton, and M.H. Williams. </author> <title> Semantics Based Implementation of a Deductive Object-Oriented Database Programming Language. </title> <journal> J. Programming Languages, </journal> <volume> 2(2) </volume> <pages> 93-108, </pages> <year> 1994. </year>
Reference-contexts: Such an approach can in turn be implemented by defining methods on each of the nodes within the internal form so that they know how to translate themselves for use in each of the visual interfaces, an organisational technique which has also been used in object-oriented compiler construction <ref> [5] </ref>.
Reference: [6] <author> R. Conner, Q. Cutts, G. Kirby, V. Moore, and R. Morrison. </author> <title> Unifying Interaction with Persistent Data and Program. </title> <editor> In P. Sawyer, editor, Prod. </editor> <booktitle> 2nd Int. Wshp. on Interfaces to Database Systems, </booktitle> <pages> pages 197-212. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Various researchers have proposed database interfaces which are targeted at specific extensions to database functionality, including composite objects and user-defined relationships [2], versions [13], spatial data [17], persistent data types [7] and programs <ref> [11, 6] </ref>. It is clear from such work that there is an extensive design space, with many alternative ways of representing different concepts and operations applicable to them.
Reference: [7] <author> A. Dearle, Q. Cutts, and G. Kirby. </author> <title> Browsing, Grazing and Nibbling Persistent Data Structure. </title> <booktitle> In Proc. 3rd Int. Workshop on Persistent Object Systems, </booktitle> <pages> pages 56-69. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Various researchers have proposed database interfaces which are targeted at specific extensions to database functionality, including composite objects and user-defined relationships [2], versions [13], spatial data [17], persistent data types <ref> [7] </ref> and programs [11, 6]. It is clear from such work that there is an extensive design space, with many alternative ways of representing different concepts and operations applicable to them.
Reference: [8] <author> O. Diaz. </author> <title> The operational semantics of user-defined relationships in object-oriented database systems. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 16 </volume> <pages> 223-240, </pages> <year> 1995. </year>
Reference-contexts: In ADAM, support for metaclasses as first class objects enabled its core data model to be extended with a range of facilities, including relationship objects <ref> [8] </ref>, active rules [10] and composite objects with versions [20].
Reference: [9] <author> O. Diaz and A. Jaime. </author> <title> EXACT: an EXtensible approach to ACTive object-oriented databases. </title> <note> Submitted for publication, </note> <year> 1994. </year>
Reference-contexts: The active behaviour which is used to monitor the displayed objects can then inform the interface of all changes to these objects, so that the display can be updated to reflect the revised state of the database <ref> [9] </ref>. In this database are used to allow monitoring of the specific objects that are on screen, rather than having events monitoring updates to all objects in the database.
Reference: [10] <author> O. Diaz, N. Paton, and P.M.D. Gray. </author> <title> Rule management in object oriented databases: a uniform approach. </title> <editor> In G.M. Lohman, A. Sernadas, and R. Camps, editors, </editor> <booktitle> 17th Intl. Conf. on Very Large Data Bases, Barcelona, </booktitle> <pages> pages 317-326. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: In ADAM, support for metaclasses as first class objects enabled its core data model to be extended with a range of facilities, including relationship objects [8], active rules <ref> [10] </ref> and composite objects with versions [20].
Reference: [11] <author> M. Gemis, J. Paredaens, and I. Thyssens. </author> <title> A Visual Database Management Interface Based on GOOD. </title> <booktitle> In The 1st International Workshop on Interfaces to Database Systems (IDS92), Glasgow, </booktitle> <pages> pages 25-31. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> R. Cooper (Ed). </note>
Reference-contexts: Various researchers have proposed database interfaces which are targeted at specific extensions to database functionality, including composite objects and user-defined relationships [2], versions [13], spatial data [17], persistent data types [7] and programs <ref> [11, 6] </ref>. It is clear from such work that there is an extensive design space, with many alternative ways of representing different concepts and operations applicable to them.
Reference: [12] <author> P.M.D. Gray, K.G. Kulkarni, and N.W. Paton. </author> <title> Object-Oriented Databases: A Semantic Data Model Approach. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year> <note> ISBN 0-13-620203-3. </note>
Reference-contexts: This enables a single representation to be used for the modelling of application, system and interface data, which it is argued is of particular value to database interface developers. The approach is illustrated using two example interfaces which have been developed for the ADAM object-oriented database (OODB) <ref> [12] </ref>. These example interfaces are both novel in terms of the functionalities they support, and thus indicate how the requirements of advanced database facilities can be supported within an integrated interface development environment. <p> For example, sending the message open to an instance of the class picture will lead to a picture window being opened on the screen. In this paper, code fragments are not presented in ADAM notation (for which see <ref> [12, 22] </ref>), but rather using a form which requires minimal introduction. All examples presented in the paper represent functionality which is fully implemented.
Reference: [13] <author> B. Gulla. </author> <title> A Browser for a Versioned Entity-Relational Database. </title> <editor> In R. Cooper, editor, </editor> <booktitle> The 1st International Workshop On Interfaces to Database Systems (IDS92), </booktitle> <pages> pages 136-152. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Various researchers have proposed database interfaces which are targeted at specific extensions to database functionality, including composite objects and user-defined relationships [2], versions <ref> [13] </ref>, spatial data [17], persistent data types [7] and programs [11, 6]. It is clear from such work that there is an extensive design space, with many alternative ways of representing different concepts and operations applicable to them.
Reference: [14] <author> R. King and M. Novak. </author> <title> Designing Database Interfaces with DBface. </title> <journal> ACM Trans. Information Systems, </journal> <volume> 11 </volume> <pages> 105-132, </pages> <year> 1993. </year>
Reference-contexts: Some systems, as well as using database constructs for modelling interface data also implement interface development facilities within the database <ref> [14] </ref>. This paper presents experience with an OODB which integrates database and interface data, where the benefit of uniformity is combined with the recognised strengths of the object-oriented paradigm for interface development.
Reference: [15] <author> E. Laenens, F. States, and D. Vermeir. </author> <title> Browsing a la carte in Object-Oriented Databases. </title> <journal> The Computer Journal, </journal> <volume> 32(4) </volume> <pages> 333-340, </pages> <year> 1989. </year> <title> Interfaces to Database Systems, 1996 13 Exploitation of Object-Oriented and Active Constructs in Database Interface Development </title>
Reference-contexts: For this to be practical, the database must support comprehensive mechanisms for the structuring and manipulation of interface data, but a number of approaches have been reported in the literature <ref> [19, 15, 4, 18] </ref>. The use of an integrated architecture avoids impedance mismatches between the language used to store and manipulate interface data and that associated with the database, as discussed further in [23].
Reference: [16] <author> R. Marin, M. Taboada, R.P. Barreiro, J. Mira, and A. Delgado. </author> <title> Rapid Prototyping of Medical Graphic Interfaces. </title> <booktitle> In Proc DEXA, </booktitle> <pages> pages 161-166, </pages> <year> 1992. </year>
Reference-contexts: From this perspective, database interfaces can be implemented using software such as user interface management systems or widget sets, and examples of the use of such systems with databases abound <ref> [27, 3, 16] </ref>. There is also an extent to which, however, database interfaces can be held to be different from interfaces to other software systems. Such a distinction can be drawn from the observation that databases and interface management systems both include facilities for the structuring and manipulation of data.
Reference: [17] <author> B. Meyer. </author> <title> Beyond Icons: Towards New Metaphors for Visual Query Languagesfor Spatial Information Systems. </title> <editor> In R. Cooper, editor, </editor> <booktitle> Proc. 1st International Workshop On Interfaces to Database Systems (IDS92), Glasgow, </booktitle> <pages> pages 113-135. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Various researchers have proposed database interfaces which are targeted at specific extensions to database functionality, including composite objects and user-defined relationships [2], versions [13], spatial data <ref> [17] </ref>, persistent data types [7] and programs [11, 6]. It is clear from such work that there is an extensive design space, with many alternative ways of representing different concepts and operations applicable to them.
Reference: [18] <author> K.J. Mitchell, J.B. Kennedy, and P.J. Barclay. </author> <title> Using a Conceptual Language to Describe a Database and its Interface. </title> <booktitle> In Proc. 13th BNCOD, </booktitle> <pages> pages 101-119. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For this to be practical, the database must support comprehensive mechanisms for the structuring and manipulation of interface data, but a number of approaches have been reported in the literature <ref> [19, 15, 4, 18] </ref>. The use of an integrated architecture avoids impedance mismatches between the language used to store and manipulate interface data and that associated with the database, as discussed further in [23].
Reference: [19] <author> R. Morrison, A. Dearle, A. L. Brown, and M. P. Atkinson. </author> <title> An Integrated Graphics Programming Environment. </title> <booktitle> Computer Graphics Forum 5(2), </booktitle> <pages> pages 147-157, </pages> <year> 1986. </year>
Reference-contexts: For this to be practical, the database must support comprehensive mechanisms for the structuring and manipulation of interface data, but a number of approaches have been reported in the literature <ref> [19, 15, 4, 18] </ref>. The use of an integrated architecture avoids impedance mismatches between the language used to store and manipulate interface data and that associated with the database, as discussed further in [23].
Reference: [20] <author> N. Paton, O. Diaz, </author> <title> and M.L. Barja. Combining active rules and metaclasses for enhanced extensibility in object-oriented systems. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 10 </volume> <pages> 45-63, </pages> <year> 1993. </year>
Reference-contexts: In ADAM, support for metaclasses as first class objects enabled its core data model to be extended with a range of facilities, including relationship objects [8], active rules [10] and composite objects with versions <ref> [20] </ref>. Where the data model can be extended with new constructs, it is necessary to be able to extend the interface to the database with vi-sualisations relevant to the extensions, otherwise users are likely to be unaware of the semantics of the objects to which they are exposed [22].
Reference: [21] <author> N. W. Paton, G. Al-Qaimari, and D.K. Doan. </author> <title> On Interface Objects In Object-Oriented Database. </title> <editor> In D. Bowers, editor, </editor> <booktitle> Proc. 12th British National Conference on Databases (BNCOD), </booktitle> <pages> pages 153-169. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This range of requirements, combined with the variety of possible solutions, suggests a need for effective tools to facilitate rapid construction of database interfaces, so that proposals can be evaluated effectively with users <ref> [21] </ref>. 2.2 Database Interface Architectures As far as interface development architectures are concerned, there is a sense in which database interfaces are nothing special. The database can be seen as an application for which an interface is required, and conventional approaches to interface development used to institute a solution. <p> By representing interface data using normal database objects, it becomes possible for graphical interfaces to be developed within this uniform context. The representation of interface data as normal database objects has been achieved in ADAM by providing a view of an existing widget set using ADAM classes <ref> [21] </ref>. The effect of this process is to make available to ADAM programmers around 60 classes which describe dialog boxes, menus, pictures, buttons, etc. Instances of these classes are created and manipulated by message-sending, in common with other database objects, but messages can have visible consequences. <p> The rapid implementation of these extensions to the browser was facilitated by the ease of access to the new modelling constructs which were also represented as database objects, and by the use of such object-oriented programming mechanisms as specialisation and overriding to tailor the default visualisations supported by the browser <ref> [21] </ref>. Interfaces to Database Systems, 1996 4 Exploitation of Object-Oriented and Active Constructs in Database Interface Development Revised visualisations were essentially implemented as follows: 1. Features common to the default visualisations and their extensions were identified for implementation as methods attached to the classes representing the default visualisations. 2.
Reference: [22] <author> N. W. Paton, G. Al-Qaimari, and A. C. Kilgour. </author> <title> An Extensible Interface To An Extensible Object-Oriented Database System. </title> <editor> In R. Cooper, editor, </editor> <booktitle> The 1st International Workshop On Interfaces to Database Systems, </booktitle> <pages> pages 265-281. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Where the data model can be extended with new constructs, it is necessary to be able to extend the interface to the database with vi-sualisations relevant to the extensions, otherwise users are likely to be unaware of the semantics of the objects to which they are exposed <ref> [22] </ref>. <p> For example, sending the message open to an instance of the class picture will lead to a picture window being opened on the screen. In this paper, code fragments are not presented in ADAM notation (for which see <ref> [12, 22] </ref>), but rather using a form which requires minimal introduction. All examples presented in the paper represent functionality which is fully implemented. <p> More detailed presentation of more recent results is given in sections 4 and 5. 3.3.1 A common data model: the database browser example The first substantial program to be implemented using the toolkit mentioned above was a database browser which allowed the examination of schemas and their associated instances <ref> [22] </ref>. The browser was itself defined as an ADAM object, with reference to the various toolkit objects which were used to display information on screen.
Reference: [23] <author> N. W. Paton, R. Cooper, D. England, G. Al-Qaimari, and A. C. Kilgour. </author> <title> Integrated Architecture For Database Interface Development. </title> <booktitle> IEE Proceedings Computers and Digital Techniques , 141(2) </booktitle> <pages> 73-78, </pages> <year> 1994. </year>
Reference-contexts: The use of an integrated architecture avoids impedance mismatches between the language used to store and manipulate interface data and that associated with the database, as discussed further in <ref> [23] </ref>. Some systems, as well as using database constructs for modelling interface data also implement interface development facilities within the database [14].
Reference: [24] <author> J. Rumbaugh. </author> <title> Modeling models and viewing views: A look at the model-view-controller framework. </title> <journal> Journal of Object-oriented programming, </journal> <volume> 7(2) </volume> <pages> 14-20, </pages> <year> 1994. </year>
Reference-contexts: This requires that the graphical user interface (GUI) be able to place relevant event detectors in the observed system to keep track of the dynamics of the system. Such an architecture for an interface debugger is shown in figure 6. The architecture closely follows the Model-View-Controller (MVC) framework <ref> [24] </ref>. The observed system is the model, the interface or way of presenting the information to a user, is the view, and finally, the debugger controller supports the interactive aspects of the problem.
Reference: [25] <author> D.W. Shipman. </author> <title> The Functional Data Model and the Data Language DAPLEX. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(1) </volume> <pages> 140-173, </pages> <year> 1981. </year> <booktitle> Also in [28], </booktitle> <pages> pages 95-111. </pages>
Reference-contexts: database and at the interface, and each monitoring mechanism would have been required to cross the database/interface boundary whenever a relevant change was detected. 4 Exploitation - Multi-Paradigm Query Interface This section describes the implementation of a multi-paradigm query interface which provides three different query interfaces paradigms, namely textual (Daplex) <ref> [25] </ref>, form-based and graph-based. Each query interface is a separate component, but the option is provided to translate between any of the above query paradigms. It has been perceived that different users or categories of user may prefer or be best suited to different query interface styles.
Reference: [26] <author> M. Stonebraker, R. Agrawal, U. Dayal, E. Neuhold, and A. Rueter. </author> <title> DBMS Research At A Crossroads: The Vienna Update. </title> <booktitle> In Proc. of the 19th VLDB, </booktitle> <pages> pages 688-692, </pages> <address> Dublin, Ireland, </address> <year> 1993. </year> <institution> R. Agrawal et al (Eds). </institution>
Reference-contexts: 1 Introduction It is clear that database interface research lags behind certain other aspects of database system development <ref> [26] </ref>. This is perhaps not surprising, as recent research in database systems has, in general, extended the facilities which a database system is expected to support. This in turn leads to increasingly sophisticated systems, with more facilities which must be accessible through the interface to different categories of user.
Reference: [27] <author> C. T. Wu. </author> <title> Benefits of Object-Oriented Programming in Implementing Visual Database Interface. </title> <booktitle> JOOP, </booktitle> <pages> pages 8-16, </pages> <month> March/April </month> <year> 1990. </year>
Reference-contexts: From this perspective, database interfaces can be implemented using software such as user interface management systems or widget sets, and examples of the use of such systems with databases abound <ref> [27, 3, 16] </ref>. There is also an extent to which, however, database interfaces can be held to be different from interfaces to other software systems. Such a distinction can be drawn from the observation that databases and interface management systems both include facilities for the structuring and manipulation of data.
Reference: [28] <editor> S.B. Zdonik and D. Maier, editors. </editor> <booktitle> Readings in Object-Oriented Database Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year> <note> ISSN 1046-1698, ISBN 1-55860-000-0. Interfaces to Database Systems, 1996 14 </note>
References-found: 28

