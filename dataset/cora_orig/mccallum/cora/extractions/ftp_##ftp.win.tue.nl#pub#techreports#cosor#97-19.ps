URL: ftp://ftp.win.tue.nl/pub/techreports/cosor/97-19.ps
Refering-URL: http://www.win.tue.nl/math/bs/cosor97.html
Root-URL: http://www.win.tue.nl
Title: A survey of optimization algorithms for job shop scheduling  
Author: Joep Aerts 
Abstract: In this survey optimization methods for the job shop problem are discussed. Most of the algorithms developed so far are branch and bound algorithms. Different ways of branching and computing lower bounds are main issues in this overview. The computational efforts done in each node are also discussed. In branch and bound algorithms finding a good balance between the computational efforts in each node and the number of nodes investigated is crucial for the efficiency of the algorithm. Results of several algorithms are compared. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Adams, E Balas, and D Zawack. </author> <title> The shifting bottleneck procedure for job shop scheduling. </title> <journal> Management Science, </journal> <volume> 34 </volume> <pages> 391-401, </pages> <year> 1988. </year>
Reference-contexts: The problems in the table are the well known 10 fi 10 problem of Fisher and Thompson [12] and two 10 fi 10 instances posed by Adams, Balas, and Zawack <ref> [1] </ref>, Problem 5 and 6 from their Table 1. In the tables the numbers in italics are computation times in seconds. For the prEDD the computation times are omitted. Applegate and Cook give a computation time of 0:1 second for the prEDD. <p> The upper bound they use is based on the work of Adams, Balas, and Zawack <ref> [1] </ref>. Branching is done on a disjunctive edge in the same way as in CP1. The rest of the algorithm is based on the conditions to direct disjunctive edges derived by Carlier and Pinson. <p> The problems are respectively the 10 fi 10 instance of Fisher and Thompson [12], Problems 16 and 17 of Lawrence [16], and Problems 5 and 6 of Table 1 of Adams, Balas, and Zawack <ref> [1] </ref>. In the table no results are reported for the first algorithm of Carlier and Pinson (CP1), because for only one of these test instances results are presented, the 10 fi 10 instance of Fisher and Thompson.
Reference: [2] <author> D. Applegate and W. Cook. </author> <title> A computational study of the job shop scheduling problem. </title> <journal> ORSA Journal on Computing, </journal> <volume> 3 </volume> <pages> 149-156, </pages> <year> 1991. </year>
Reference-contexts: We present a disjunctive programming model and a disjunctive graph representation, which have been the basis for a large group of algorithms. Also the mixed-integer programming formulation used by Applegate and Cook <ref> [2] </ref> is introduced. Other possibilities we give for modeling the job shop problem are a packing formulation [17, 18] and the use of time windows [5, 17, 18]. <p> The length of a longest path in the graph is the value of the schedule. The work of Carlier and Pinson [8, 9, 10], a part of the work of Applegate and Cook <ref> [2] </ref>, and the algorithms of Brucker et al. [5, 6] are based on this disjunctive graph model. These algorithms use one or more disjunctive edges to branch on by directing them one way or the other. <p> Applegate and Cook <ref> [2] </ref> use both the disjunctive and the mixed integer formulation for their cutting plane procedures. Martin and Shmoys [17, 18] introduce a lower bound based on a packing model. The packing formulation is a model for the job shop feasibility problem. <p> There have been numerous efforts in trying to find 5 these `better' lower bounds using other points of view. In the following sections we will discuss the use of geometric methods by Brucker and Jurisch [4], the cutting plane approach of Applegate and Cook <ref> [2] </ref>, and the packing approach of Martin and Shmoys [17, 18]. <p> In the first one they drop the disjunctive constraints (3) and in the mixed integer formulation they use the LP -relaxation on the Y ij variables. We give here some examples of the cuts they use. For a complete enumeration we refer to their article <ref> [2] </ref>. * Basic cuts The basic cuts are based on a one-machine relaxation. Take a machine m and a set S O m . <p> The lower bounds of the cutting plane approaches are better than the values of the prEDD <ref> [2] </ref>. However, the computation times are disappointing, only the results of the relaxation of the disjunctive model with the basic cuts added seems promising. The results are for some instances substantially better and the time gap is not that big. Some computational results are given in Section 3.3. <p> This is a very fast combinatorial lower bound. The gap between the prEDD and the optimal solutions turns out to be quite large. As alternatives we discussed the two-job relaxation of Brucker and Jurisch [4], a cutting plane approach of Applegate and Cook <ref> [2] </ref> and the fractional packing lower bound of Martin and Shmoys [17, 18]. <p> The easiest way to use the disjunctive edges for branching is by directing an edge one way or the other to create two new nodes (children). Carlier and Pinson [8] and Applegate and Cook <ref> [2] </ref> use this branching rule. The only problem left is finding a promising disjunctive edge to branch on. Carlier and Pinson note that it is beneficial to have sets of possible inputs or outputs (E and S) of low cardinality. <p> When the operations i and j are found, we create the children by scheduling i before j to get the first new node and j before i to get the second. Applegate and Cook <ref> [2] </ref> use the ideas of Carlier and Pinson in their algorithm. They also tested a greedy rule: try all possible choices of branching and take the edge for which the minimum of the lower bounds (prEDD) in the children achieves the maximum value. <p> They note that the implementation is quite naive, due to the fact that the global algorithm is performed once per operation at each level of the search tree in the order of decreasing processing times. 4.1.2 Applegate and Cook Although Applegate and Cook <ref> [2] </ref> gave a nice analysis for a cutting plane lower bound, they use the prEDD in their algorithm (AC ). The upper bound they use is based on the work of Adams, Balas, and Zawack [1]. Branching is done on a disjunctive edge in the same way as in CP1.
Reference: [3] <author> E Balas, J.K. Lenstra, and A. Vazacopoulos. </author> <title> The one-machine problem with delayed precedence constraints and its use in job shop scheduling. </title> <journal> Management Science, </journal> <volume> 41 </volume> <pages> 94-109, </pages> <year> 1995. </year>
Reference-contexts: Martin does not describe his algorithm in detail. For theory about scheduling with these delayed precedence constraints we refer to an article of Balas, Lenstra, and Vazacopoulos <ref> [3] </ref>, which discusses the one-machine problem with delayed precedence constraints. 3.3 Results on lower bounds In this section we give some computational results of the lower bounds we discussed. As noted, most algorithms use the prEDD as a lower bound. This is a very fast combinatorial lower bound.
Reference: [4] <author> P. Brucker and B. Jurisch. </author> <title> A new lower bond for the job-shop scheduling problem. </title> <journal> European Journal of Operational Research, </journal> <volume> 64 </volume> <pages> 156-167, </pages> <year> 1993. </year>
Reference-contexts: There have been numerous efforts in trying to find 5 these `better' lower bounds using other points of view. In the following sections we will discuss the use of geometric methods by Brucker and Jurisch <ref> [4] </ref>, the cutting plane approach of Applegate and Cook [2], and the packing approach of Martin and Shmoys [17, 18]. In this article we only mention the surrogate duality relaxation investigated by Fisher, Lageweg, Lenstra and Rinnooy Kan [13]. 3.1.3 Two-job relaxation The two-job bound of Brucker and Jurisch [4] is <p> Jurisch <ref> [4] </ref>, the cutting plane approach of Applegate and Cook [2], and the packing approach of Martin and Shmoys [17, 18]. In this article we only mention the surrogate duality relaxation investigated by Fisher, Lageweg, Lenstra and Rinnooy Kan [13]. 3.1.3 Two-job relaxation The two-job bound of Brucker and Jurisch [4] is a method for calculating lower bounds based on two-job relaxations. First we state the problem they solve to get a lower bound. <p> However, in most instances the bound produces worse values than the prEDD. Some results are given in Section 3.3 and for additional results we refer again to <ref> [4] </ref>. 3.1.4 Cutting plane lower bound In a cutting plane approach a relaxation of the original problem is solved to get the first solution. Then adding inequalities which are valid for all feasible solutions but not for the optimal solution of the relaxation makes the formulation stronger. <p> As noted, most algorithms use the prEDD as a lower bound. This is a very fast combinatorial lower bound. The gap between the prEDD and the optimal solutions turns out to be quite large. As alternatives we discussed the two-job relaxation of Brucker and Jurisch <ref> [4] </ref>, a cutting plane approach of Applegate and Cook [2] and the fractional packing lower bound of Martin and Shmoys [17, 18]. <p> The results do not support this conclusion. We refer to the results in the article of Brucker and Jurisch <ref> [4] </ref> for more specific results.
Reference: [5] <author> P. Brucker, B. Jurisch, and A. Kramer. </author> <title> The job-shop problem and immediate selection. </title> <journal> Annals of Operations Research, </journal> <volume> 50 </volume> <pages> 73-114, </pages> <year> 1994. </year>
Reference-contexts: Also the mixed-integer programming formulation used by Applegate and Cook [2] is introduced. Other possibilities we give for modeling the job shop problem are a packing formulation [17, 18] and the use of time windows <ref> [5, 17, 18] </ref>. An instance of the job shop problem consists of a set O of operations, a set M of m machines and a set J of n jobs. For the feasibility problem we also need to introduce a time T . <p> The length of a longest path in the graph is the value of the schedule. The work of Carlier and Pinson [8, 9, 10], a part of the work of Applegate and Cook [2], and the algorithms of Brucker et al. <ref> [5, 6] </ref> are based on this disjunctive graph model. These algorithms use one or more disjunctive edges to branch on by directing them one way or the other. Each node in the branching tree of these branch and bound methods can be represented by a graph. <p> The last model for the job shop problem we discuss is based on a time oriented approach, and uses time windows. Brucker, Jurisch, and Kramer <ref> [5] </ref> use the time windows to derive conditions for directing disjunctive edges and Martin and Shmoys [17, 18] develop complete algorithms based on these ideas. <p> We will give an outline of the conditions and algorithms. The basic ideas are by Carlier and Pinson [8]. They improve their work in [9] and [10]. Brucker, Jurisch, and Kramer <ref> [5] </ref> and Brucker, Jurisch and Sievers [6] extend the work of Carlier and Pinson, and several other algorithms also use the ideas and procedures. <p> Carlier and Pinson [8] derive a special result applicable to each clique C of two operations i and j: r (j) + p (j) + p (i) + q (i) U B ) select (i; j): (22) Brucker, Jurisch, and Kramer <ref> [5] </ref> use another approach to direct the disjunctive edges based on the ideas of Dewess [11]. Their first result can be derived directly from (22). We introduce some extra notation. Let d (j) be the due date of operation j, defined by d (j) := U B q (j) 1. <p> Brucker, Jurisch, and Kramer <ref> [5] </ref> improve the algorithm of Carlier and Pinson [9] to direct disjunctive edges. They describe an O (maxfn log n; f g) algorithm that results in the same directed edges, where f is the number of disjunctive edges directed in a loop. <p> Finally we will give some ideas for further investigation. These ideas are mostly based on conclusions and remarks of the authors the articles discussed in this survey. Brucker, Jurisch, and Kramer <ref> [5] </ref> discussed r-set conditions for r = 2 and r = 3. We saw a reduction of the number of nodes in the search tree. Deriving 4-set conditions and finding an efficient algorithm to use them probably leads to directing more disjunctive edges.
Reference: [6] <author> P. Brucker, B. Jurisch, and B. Sievers. </author> <title> A branch and bound algorithm for the job-shop scheduling problem. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 49 </volume> <pages> 107-127, </pages> <year> 1994. </year> <month> 25 </month>
Reference-contexts: The length of a longest path in the graph is the value of the schedule. The work of Carlier and Pinson [8, 9, 10], a part of the work of Applegate and Cook [2], and the algorithms of Brucker et al. <ref> [5, 6] </ref> are based on this disjunctive graph model. These algorithms use one or more disjunctive edges to branch on by directing them one way or the other. Each node in the branching tree of these branch and bound methods can be represented by a graph. <p> The tail corresponds to the longest path length from the vertex. So the heads and tails can be computed by applying a longest path algorithm to a directed graph. Another approach to compute the heads and tails is described by Brucker, Ju-risch, and Sievers <ref> [6] </ref>. We first note that an operation cannot start before the ending of the preceding operation in the same job. So if (i; j) 2 A, r (j) r (i) + p (i). <p> We will give an outline of the conditions and algorithms. The basic ideas are by Carlier and Pinson [8]. They improve their work in [9] and [10]. Brucker, Jurisch, and Kramer [5] and Brucker, Jurisch and Sievers <ref> [6] </ref> extend the work of Carlier and Pinson, and several other algorithms also use the ideas and procedures. <p> idea of doing a binary search between the upper bound and the lower bound to find a better lower bound was already proposed by Carlier and Pinson in 1990 [9], but the algorithm with global operations was described in 1994 [10]. 3.2.3 Shaving The approach of Brucker, Jurisch, and Sievers <ref> [6] </ref> showed that the ideas of Carlier and Pinson can be incorporated into a time window approach. The work of Martin and Shmoys [17, 18] confirms this and contains full branch and bound algorithms based on time windows. <p> This block approach was introduced by Grabowski, Nowicki, and Zdrzalka [15] for single-machine scheduling with release dates and due dates. An example of a critical path divided into blocks is given in Figure 4. Brucker, Jurisch, and Sievers <ref> [6] </ref> use the block approach for their branching scheme. <p> The branching principles are based on the following theorem (for a proof see <ref> [6] </ref>): Theorem 3.1 Let S be a schedule for a job shop instance with value v (S). Every schedule S 0 with v (S 0 ) &lt; v (S) has at least one operation of any block processed before the first or after the last operation of the corresponding block. <p> They use the improved upper bound in the procedures to direct disjunctive edges. 4.1.3 Brucker et al. Brucker, Jurisch, and Sievers <ref> [6] </ref> use the branching scheme based on the block approach in their branch and bound algorithm (BJS ). Furthermore they describe an algorithm to update heads and tails and to direct disjunctive edges based on the one described by Carlier and Pinson [9]. <p> They also present an O (n 2 ) algorithm to check the 3-set conditions. Both algorithms are tested in the branch and bound algorithm of Brucker, Jurisch, and Sievers <ref> [6] </ref> by substituting the new algorithms for the algorithm of Carlier and Pin-son.
Reference: [7] <author> J. Carlier. </author> <title> The one-machine sequencing problem. </title> <journal> European Journal of Opera--tional Research, </journal> <volume> 11 </volume> <pages> 42-47, </pages> <year> 1982. </year>
Reference-contexts: We know that the right hand side of (12) is a lower bound for the job shop problem and we can prove that the prEDD equals this lower bound. So: prEDD = max m2M max R (S) + P (S) + Q (S) : (12) Carlier <ref> [7] </ref> proves that this lower bound can be computed in O (mn log n) time. Instead of computing the preemptive schedule it is also possible to determine the non-preemptive schedule. For small instances we can solve this N P-hard problem in an acceptable amount of time.
Reference: [8] <author> J. Carlier and E. Pinson. </author> <title> An algorithm for solving the job-shop problem. </title> <journal> Management Science, </journal> <volume> 35(2) </volume> <pages> 164-176, </pages> <year> 1989. </year>
Reference-contexts: This is illustrated by the fact that a classical benchmark problem of 10 jobs and 10 machines remained unsolved for more than twenty years. It was posed in 1963 by Fisher and Thompson [12] and solved by Carlier and Pinson in 1986 <ref> [8] </ref>. The job shop problem was proven N P-hard in the strong sense by Garey, Johnson, and Sethi [14]. Some very special cases of the problem can be solved in polynomial time, but their immediate generalizations are N P-hard. <p> A solution is feasible if all the disjunctive edges are directed and the resulting directed graph contains no cycle. The length of a longest path in the graph is the value of the schedule. The work of Carlier and Pinson <ref> [8, 9, 10] </ref>, a part of the work of Applegate and Cook [2], and the algorithms of Brucker et al. [5, 6] are based on this disjunctive graph model. These algorithms use one or more disjunctive edges to branch on by directing them one way or the other. <p> machines: max 0 X p (i) A : (9) The second one is just the maximum total processing time of the jobs: max 0 X p (i) A : (10) As expected these lower bounds perform badly in most situations. 4 3.1.2 One-machine relaxation The lower bound Carlier and Pinson <ref> [8] </ref> used in their algorithm, which solved the legendary Fisher and Thompson 10 fi 10 problem, is based on Jackson's preemptive schedule for the one-machine head-body-tail problem. <p> The updates are especially useful for lower bounds based on the heads and tails like the prEDD. One way to direct disjunctive edges is by branching. The algorithms based on the disjunctive graph branch by directing one or more disjunctive edges. Carlier and Pinson <ref> [8] </ref> introduced conditions to direct disjunctive edges without branching: select (j; i), where (j; i) represents the arc from operation j to i, by proving that scheduling i before j leads to a schedule with a makespan larger than or equal to 9 the upper bound. <p> So directing disjunctive edges and updating heads and tails are strongly connected and often considered iteratively until no changes occur. We will give an outline of the conditions and algorithms. The basic ideas are by Carlier and Pinson <ref> [8] </ref>. They improve their work in [9] and [10]. Brucker, Jurisch, and Kramer [5] and Brucker, Jurisch and Sievers [6] extend the work of Carlier and Pinson, and several other algorithms also use the ideas and procedures. <p> Similarly we can select (k; j) for all j 2 Cnfkg when k has 10 been determined to be an input of C. Carlier and Pinson <ref> [8] </ref> derive a special result applicable to each clique C of two operations i and j: r (j) + p (j) + p (i) + q (i) U B ) select (i; j): (22) Brucker, Jurisch, and Kramer [5] use another approach to direct the disjunctive edges based on the ideas <p> As mentioned before, it is recommended to update the heads and tails of the operations after directing disjunctive edges. This can be done by using a longest path algorithm in the corresponding graph with all the directed disjunctive edges being arcs. Carlier and Pinson <ref> [8] </ref> use complementary results for the inputs and the outputs found by conditions (19), (20), and (21). <p> The easiest way to use the disjunctive edges for branching is by directing an edge one way or the other to create two new nodes (children). Carlier and Pinson <ref> [8] </ref> and Applegate and Cook [2] use this branching rule. The only problem left is finding a promising disjunctive edge to branch on. Carlier and Pinson note that it is beneficial to have sets of possible inputs or outputs (E and S) of low cardinality. <p> If no pair satisfies one of the conditions, the scheme takes a disjunctive edge to branch on as in Carlier and Pinson <ref> [8] </ref>. 3.4.2 Block approach We already saw that a feasible solution of a job shop instance can be represented by a directed graph. The value of the corresponding schedule can be found by determining a longest path in the graph. <p> The breakthrough in 20 this area of combinatorial optimization came in 1989 with the algorithm of Carlier and Pinson <ref> [8] </ref>, which solved the legendary 10 fi 10 instance posed by Fisher and Thompson [12]. 4.1.1 Carlier and Pinson Carlier and Pinson [8] introduce in 1989 the possibility to direct disjunctive edges without branching and this makes their algorithm very efficient. <p> The breakthrough in 20 this area of combinatorial optimization came in 1989 with the algorithm of Carlier and Pinson <ref> [8] </ref>, which solved the legendary 10 fi 10 instance posed by Fisher and Thompson [12]. 4.1.1 Carlier and Pinson Carlier and Pinson [8] introduce in 1989 the possibility to direct disjunctive edges without branching and this makes their algorithm very efficient. Most of the succeeding work is based on these results of Carlier and Pinson as discussed in Section 3.2.1. The algorithm (CP1 ) described in [8], uses the prEDD, the conditions to <p> Carlier and Pinson Carlier and Pinson <ref> [8] </ref> introduce in 1989 the possibility to direct disjunctive edges without branching and this makes their algorithm very efficient. Most of the succeeding work is based on these results of Carlier and Pinson as discussed in Section 3.2.1. The algorithm (CP1 ) described in [8], uses the prEDD, the conditions to fix disjunctive edges, the rules to update the heads and tails of inputs and outputs, and a longest path algorithm to update the other heads and tails. The upper bound is a value taken from literature. <p> In the previous section we mentioned that comparing the algorithms in a fair way is not easy. An algorithm can work well for some benchmark problems and badly for others. For this reason some authors try to divide the problems in different groups. Carlier and Pinson <ref> [8] </ref> distinguish problems with a null-gap between the prEDD and the optimal solution and problems with a strictly positive gap. <p> For the first group of problems ff-tight sets can be found easily for the machine with highest one-machine relaxation. This rule works very well for these problems. On the other hand, extreme problems of the other group, like problem LA38, are not solvable by this rule. Carlier and Pinson <ref> [8] </ref> solved the famous problem of Fisher and Thompson for the first time. This was a breaktrough in job shop scheduling. In the discussion of the algorithms we saw that the work of Carlier and Pinson has been a basis for most of the later work in the area.
Reference: [9] <author> J. Carlier and E. Pinson. </author> <title> A practical use of Jackson's preemptive schedule for solving the job shop problem. </title> <journal> Annals of Operations Research, </journal> <volume> 26 </volume> <pages> 269-287, </pages> <year> 1990. </year>
Reference-contexts: A solution is feasible if all the disjunctive edges are directed and the resulting directed graph contains no cycle. The length of a longest path in the graph is the value of the schedule. The work of Carlier and Pinson <ref> [8, 9, 10] </ref>, a part of the work of Applegate and Cook [2], and the algorithms of Brucker et al. [5, 6] are based on this disjunctive graph model. These algorithms use one or more disjunctive edges to branch on by directing them one way or the other. <p> This relation can be used to get a recursive formulation of all heads and a similar equation can be made for the tails. Later we will describe an algorithm of Carlier and Pinson <ref> [9] </ref> which finds the maximum value of (18). When no disjunctive edges are directed, both procedures the head is defined as the sum of the processing times of the preceding operations of the same job and the 8 numbers represent the processing times. <p> So directing disjunctive edges and updating heads and tails are strongly connected and often considered iteratively until no changes occur. We will give an outline of the conditions and algorithms. The basic ideas are by Carlier and Pinson [8]. They improve their work in <ref> [9] </ref> and [10]. Brucker, Jurisch, and Kramer [5] and Brucker, Jurisch and Sievers [6] extend the work of Carlier and Pinson, and several other algorithms also use the ideas and procedures. <p> If i is the output of C we can apply (18) to get: r (i) := max C 0 Cnfig 0 j2C 0 r (j) + j2C 0 1 and a similar result holds for inputs. Carlier and Pinson <ref> [9] </ref> give an O (n 2 ) algorithm to find the updates for all the operations of one machine based on the results as stated in (18), (19), (20), and (21). <p> Then we know that L + 1 is a lower bound for the problem. The idea of doing a binary search between the upper bound and the lower bound to find a better lower bound was already proposed by Carlier and Pinson in 1990 <ref> [9] </ref>, but the algorithm with global operations was described in 1994 [10]. 3.2.3 Shaving The approach of Brucker, Jurisch, and Sievers [6] showed that the ideas of Carlier and Pinson can be incorporated into a time window approach. <p> When comparing this procedure to the ascendant set algorithm of Carlier and Pinson <ref> [9] </ref> implemented in a time window approach, it can be shown that the final time windows are exactly the same in both procedures. The advantage of the algorithm based on the results of Carlier and Pinson is that it runs faster. <p> The implementation of the greedy rule gave promising results, so Applegate and Cook concluded that branching on a disjunctive edge was a good procedure and they implemented the scheme of Carlier and Pinson in their algorithm. Later Carlier and Pinson propose a new branching scheme <ref> [9] </ref>. In this new branching scheme more disjunctive edges are directed simultaneously to create a new node. An advantage is that this leads to better improvements of the heads and tails. <p> The upper bound is a value taken from literature. Branching is done by directing a disjunctive edge one way or the other, selecting the edge as described in Section 3.4.1. In 1990 Carlier and Pinson <ref> [9] </ref> describe an improved algorithm (CP2 ) which uses the ascendant sets to update heads and tails. The prEDD is used to give lower bounds and branching is done on sets of possible inputs and outputs. <p> Brucker, Jurisch, and Sievers [6] use the branching scheme based on the block approach in their branch and bound algorithm (BJS ). Furthermore they describe an algorithm to update heads and tails and to direct disjunctive edges based on the one described by Carlier and Pinson <ref> [9] </ref>. The main lower bound is the prEDD, but some other combinatorial lower bounds are used during the determination of the sets of before-candidates and after-candidates of a block and during the computation of heads and tails. <p> Brucker, Jurisch, and Kramer [5] improve the algorithm of Carlier and Pinson <ref> [9] </ref> to direct disjunctive edges. They describe an O (maxfn log n; f g) algorithm that results in the same directed edges, where f is the number of disjunctive edges directed in a loop. They also present an O (n 2 ) algorithm to check the 3-set conditions.
Reference: [10] <author> J. Carlier and E. Pinson. </author> <title> Adjustment of heads and tails for the job-shop problem. </title> <journal> European Journal of Operational Research, </journal> <volume> 78 </volume> <pages> 238-251, </pages> <year> 1994. </year>
Reference-contexts: A solution is feasible if all the disjunctive edges are directed and the resulting directed graph contains no cycle. The length of a longest path in the graph is the value of the schedule. The work of Carlier and Pinson <ref> [8, 9, 10] </ref>, a part of the work of Applegate and Cook [2], and the algorithms of Brucker et al. [5, 6] are based on this disjunctive graph model. These algorithms use one or more disjunctive edges to branch on by directing them one way or the other. <p> So directing disjunctive edges and updating heads and tails are strongly connected and often considered iteratively until no changes occur. We will give an outline of the conditions and algorithms. The basic ideas are by Carlier and Pinson [8]. They improve their work in [9] and <ref> [10] </ref>. Brucker, Jurisch, and Kramer [5] and Brucker, Jurisch and Sievers [6] extend the work of Carlier and Pinson, and several other algorithms also use the ideas and procedures. <p> Later they improve the algorithm to an O (n log n) algorithm <ref> [10] </ref>. The difference between the use of inputs and outputs and the ascendant set approach is the point of view. <p> These methods check if it is possible to update heads or tails in the one-machine subproblems and apply these updates to the complete job shop problem. In contrast to these local methods, Carlier and Pinson <ref> [10] </ref> propose to use the assumption that the tail of operation j can be updated in the entire problem. <p> The idea of doing a binary search between the upper bound and the lower bound to find a better lower bound was already proposed by Carlier and Pinson in 1990 [9], but the algorithm with global operations was described in 1994 <ref> [10] </ref>. 3.2.3 Shaving The approach of Brucker, Jurisch, and Sievers [6] showed that the ideas of Carlier and Pinson can be incorporated into a time window approach. The work of Martin and Shmoys [17, 18] confirms this and contains full branch and bound algorithms based on time windows. <p> Although known to be N P-hard this exact one-machine relaxation is solvable in an acceptable amount of computation time for most instances. In spite of the additional computation time invested, the results are not much better than those obtained using the preemptive one-machine relaxation. Carlier and Pinson <ref> [10] </ref> introduced global operations to improve their lower bounds. The same idea applied to a time window approach was proposed by Martin and Shmoys [17, 18]. This is what they call job shop shave. <p> In Tabel 3 we report the results on the 10 fi 10 problem of Fisher and Thompson [12] and on a 15 fi 15, a 10 fi 10 and a 10 fi 20 instance of Lawrence [16]. In the first two instances the algorithm of Carlier and Pinson <ref> [10] </ref> can be compared to the algorithms of Martin and Shmoys [17, 18]. A comparison shows that the results of CP shave are better than the lower bound based on the global operations implemented by Carlier and Pinson. <p> If j S j &lt; j E j use each element of S as the output of C to create the new nodes. A third branching scheme of Carlier and Pinson <ref> [10] </ref> is based on the ideas of ascendant sets. If we can find a set and an operation which satisfy one of the two conditions of ascendant sets (i.e. (26),(27)), the extra information can be used by branching on this pair. <p> The upper bound is taken from the literature and is reported in the table of results in their article. An improvement of Carlier and Pinson of their O (n 2 ) algorithm for updating heads and tails leads to an O (n log n) algorithm described in 1994 <ref> [10] </ref>. The branch and bound algorithm (CP3 ) described in the same article uses this new algorithm and the branching scheme based on ascendant sets. Carlier and Pinson describe also an algorithm (CP4 ) that uses the global procedures. <p> Deriving 4-set conditions and finding an efficient algorithm to use them probably leads to directing more disjunctive edges. For algorithms based on the disjunctive graph model new possibilities to direct disjunctive edges can be worth the effort. The results of the global algorithm of Carlier and Pinson <ref> [10] </ref> confirm this, however the algorithm presented is too slow. Ideas for improvement are heuristic rules to apply the global conditions only under special conditions and an improvement of the global algorithm. In the branch and bound algorithms heuristics play an important role.
Reference: [11] <author> G. Dewess. </author> <title> An existence theorem for packing problems with implications for the computation of optimal machine schedules. </title> <journal> Optimization, </journal> <volume> 25 </volume> <pages> 261-269, </pages> <year> 1992. </year>
Reference-contexts: special result applicable to each clique C of two operations i and j: r (j) + p (j) + p (i) + q (i) U B ) select (i; j): (22) Brucker, Jurisch, and Kramer [5] use another approach to direct the disjunctive edges based on the ideas of Dewess <ref> [11] </ref>. Their first result can be derived directly from (22). We introduce some extra notation. Let d (j) be the due date of operation j, defined by d (j) := U B q (j) 1.
Reference: [12] <author> H. Fisher and G.L. Thompson. </author> <title> Probabilistic learning combinations of local job-shop scheduling rules. </title> <editor> In J.F. Muth and G.L. Thompson, editors, </editor> <booktitle> Industrial Scheduling, </booktitle> <pages> pages 225-251. </pages> <publisher> Prentice Hall, </publisher> <year> 1963. </year>
Reference-contexts: This is illustrated by the fact that a classical benchmark problem of 10 jobs and 10 machines remained unsolved for more than twenty years. It was posed in 1963 by Fisher and Thompson <ref> [12] </ref> and solved by Carlier and Pinson in 1986 [8]. The job shop problem was proven N P-hard in the strong sense by Garey, Johnson, and Sethi [14]. Some very special cases of the problem can be solved in polynomial time, but their immediate generalizations are N P-hard. <p> The problems in the table are the well known 10 fi 10 problem of Fisher and Thompson <ref> [12] </ref> and two 10 fi 10 instances posed by Adams, Balas, and Zawack [1], Problem 5 and 6 from their Table 1. In the tables the numbers in italics are computation times in seconds. For the prEDD the computation times are omitted. <p> Here we will give some results of lower bound applications of these procedures in comparison to the prEDD. In Tabel 3 we report the results on the 10 fi 10 problem of Fisher and Thompson <ref> [12] </ref> and on a 15 fi 15, a 10 fi 10 and a 10 fi 20 instance of Lawrence [16]. In the first two instances the algorithm of Carlier and Pinson [10] can be compared to the algorithms of Martin and Shmoys [17, 18]. <p> The breakthrough in 20 this area of combinatorial optimization came in 1989 with the algorithm of Carlier and Pinson [8], which solved the legendary 10 fi 10 instance posed by Fisher and Thompson <ref> [12] </ref>. 4.1.1 Carlier and Pinson Carlier and Pinson [8] introduce in 1989 the possibility to direct disjunctive edges without branching and this makes their algorithm very efficient. Most of the succeeding work is based on these results of Carlier and Pinson as discussed in Section 3.2.1. <p> In Table 4 the algorithms based on the disjunctive graph are compared for some 10 fi 10 instances. The problems are respectively the 10 fi 10 instance of Fisher and Thompson <ref> [12] </ref>, Problems 16 and 17 of Lawrence [16], and Problems 5 and 6 of Table 1 of Adams, Balas, and Zawack [1].
Reference: [13] <author> M.L. Fisher, B.J. Lageweg, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Surrogate duality relaxations for job shop scheduling. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5 </volume> <pages> 65-75, </pages> <year> 1983. </year>
Reference-contexts: In this article we only mention the surrogate duality relaxation investigated by Fisher, Lageweg, Lenstra and Rinnooy Kan <ref> [13] </ref>. 3.1.3 Two-job relaxation The two-job bound of Brucker and Jurisch [4] is a method for calculating lower bounds based on two-job relaxations. First we state the problem they solve to get a lower bound.
Reference: [14] <author> M.R. Garey, D.S. Johnson, and R. Sethi. </author> <title> The complexity of flow shop and job shop scheduling. </title> <journal> Mathematics of Operations Research, </journal> <volume> 1 </volume> <pages> 117-129, </pages> <year> 1976. </year>
Reference-contexts: It was posed in 1963 by Fisher and Thompson [12] and solved by Carlier and Pinson in 1986 [8]. The job shop problem was proven N P-hard in the strong sense by Garey, Johnson, and Sethi <ref> [14] </ref>. Some very special cases of the problem can be solved in polynomial time, but their immediate generalizations are N P-hard.
Reference: [15] <author> J. Grabowski, E. Nowicki, and S. Zdrzalka. </author> <title> A block approach for single machine scheduling with release dates and due dates. </title> <journal> European Journal of Operational Research, </journal> <volume> 26 </volume> <pages> 278-285, </pages> <year> 1986. </year>
Reference-contexts: A sequence of operations on the critical path is called a block if it contains at least two operations and all the operations have to be processed on the same machine. This block approach was introduced by Grabowski, Nowicki, and Zdrzalka <ref> [15] </ref> for single-machine scheduling with release dates and due dates. An example of a critical path divided into blocks is given in Figure 4. Brucker, Jurisch, and Sievers [6] use the block approach for their branching scheme.
Reference: [16] <author> S. Lawrence. </author> <title> Resource constrained project scheduling: an experimental investigation of heuristic scheduling techniques (supplement). </title> <type> Technical report, </type> <institution> Graduate School of Industrial Administration, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1984. </year>
Reference-contexts: In Tabel 3 we report the results on the 10 fi 10 problem of Fisher and Thompson [12] and on a 15 fi 15, a 10 fi 10 and a 10 fi 20 instance of Lawrence <ref> [16] </ref>. In the first two instances the algorithm of Carlier and Pinson [10] can be compared to the algorithms of Martin and Shmoys [17, 18]. A comparison shows that the results of CP shave are better than the lower bound based on the global operations implemented by Carlier and Pinson. <p> In Table 4 the algorithms based on the disjunctive graph are compared for some 10 fi 10 instances. The problems are respectively the 10 fi 10 instance of Fisher and Thompson [12], Problems 16 and 17 of Lawrence <ref> [16] </ref>, and Problems 5 and 6 of Table 1 of Adams, Balas, and Zawack [1]. <p> The search tree consisted of 22021 nodes and the total computation time was 17982 seconds on a PRIME 2655. In Table 5 we give some supplementary results for larger problems, all posed by Lawrence <ref> [16] </ref>. The problems are respectively two 10 fi 15 instances, a 10 fi 20 instance, and a 15 fi 15 instance, where 10 fi 15 means 10 machines and 15 jobs. The number of nodes in the search tree reduces when more conditions to direct disjunctive edges are used.
Reference: [17] <author> P. Martin. </author> <title> A time-oriented approach to computing optimal schedules for the job-shop scheduling problem. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, N.Y., U.S.A., </address> <year> 1996. </year>
Reference-contexts: We present a disjunctive programming model and a disjunctive graph representation, which have been the basis for a large group of algorithms. Also the mixed-integer programming formulation used by Applegate and Cook [2] is introduced. Other possibilities we give for modeling the job shop problem are a packing formulation <ref> [17, 18] </ref> and the use of time windows [5, 17, 18]. An instance of the job shop problem consists of a set O of operations, a set M of m machines and a set J of n jobs. <p> Also the mixed-integer programming formulation used by Applegate and Cook [2] is introduced. Other possibilities we give for modeling the job shop problem are a packing formulation [17, 18] and the use of time windows <ref> [5, 17, 18] </ref>. An instance of the job shop problem consists of a set O of operations, a set M of m machines and a set J of n jobs. For the feasibility problem we also need to introduce a time T . <p> Applegate and Cook [2] use both the disjunctive and the mixed integer formulation for their cutting plane procedures. Martin and Shmoys <ref> [17, 18] </ref> introduce a lower bound based on a packing model. The packing formulation is a model for the job shop feasibility problem. <p> The last model for the job shop problem we discuss is based on a time oriented approach, and uses time windows. Brucker, Jurisch, and Kramer [5] use the time windows to derive conditions for directing disjunctive edges and Martin and Shmoys <ref> [17, 18] </ref> develop complete algorithms based on these ideas. A time interval is constructed for each operation in which the operation has to be processed or has to start, depending on the definitions of the bounds. <p> In the following sections we will discuss the use of geometric methods by Brucker and Jurisch [4], the cutting plane approach of Applegate and Cook [2], and the packing approach of Martin and Shmoys <ref> [17, 18] </ref>. In this article we only mention the surrogate duality relaxation investigated by Fisher, Lageweg, Lenstra and Rinnooy Kan [13]. 3.1.3 Two-job relaxation The two-job bound of Brucker and Jurisch [4] is a method for calculating lower bounds based on two-job relaxations. <p> with the remark that it remains a research challenge to find classes of valid inequalities that will close the large gap between the lower bound values and the optimal values of the scheduling problems within a reasonable amount of time. 7 3.1.5 Fractional packing lower bound Recently Martin and Shmoys <ref> [17, 18] </ref> proposed a lower bound based on a packing formulation for the job shop feasibility problem: minimize subject to (6), (7), and (8). <p> The work of Martin and Shmoys <ref> [17, 18] </ref> confirms this and contains full branch and bound algorithms based on time windows. Here we discuss the bounding procedures, and the iterative improvements of these bounds. In Section 3.4 we will discuss the branching schemes. <p> In spite of the additional computation time invested, the results are not much better than those obtained using the preemptive one-machine relaxation. Carlier and Pinson [10] introduced global operations to improve their lower bounds. The same idea applied to a time window approach was proposed by Martin and Shmoys <ref> [17, 18] </ref>. This is what they call job shop shave. They assume that an operation must start in one part of the interval and use the one-machine shaving algorithms on all the machines to show that this will not lead to a schedule finished at time T . <p> Martin <ref> [17] </ref> gives some computational results for these bounds and remarks that in a multiple machine relaxation, besides heads, tails, and precedence relations, also lags occur between two operations. These lags consist of the sum of the processing times of the operations to be processed between two operations. <p> The gap between the prEDD and the optimal solutions turns out to be quite large. As alternatives we discussed the two-job relaxation of Brucker and Jurisch [4], a cutting plane approach of Applegate and Cook [2] and the fractional packing lower bound of Martin and Shmoys <ref> [17, 18] </ref>. The problems in the table are the well known 10 fi 10 problem of Fisher and Thompson [12] and two 10 fi 10 instances posed by Adams, Balas, and Zawack [1], Problem 5 and 6 from their Table 1. <p> In the first two instances the algorithm of Carlier and Pinson [10] can be compared to the algorithms of Martin and Shmoys <ref> [17, 18] </ref>. A comparison shows that the results of CP shave are better than the lower bound based on the global operations implemented by Carlier and Pinson. <p> These rules are time-oriented and developed by Martin and Shmoys <ref> [17, 18] </ref> to be used in their time-oriented algorithms. Both branching rules 19 of Martin and Shmoys are based on starting time windows, so a window [u (j); v (j)] is defined for each operation as in Section 3.2.3. <p> A nice result is that the set U nfkg is an ff-tight set in the node where k is scheduled first. Martin <ref> [17] </ref> proves that the branches are mutually exclusive if ff is smaller than the sum of the processing times of the two shortest operations of U . 3.4.4 Comparison of the branching schemes The results of the lower bounds can be compared by the computational results. <p> We will use BJK1 and BJK2 to refer to these algorithms, where BJK2 uses the 3-set conditions. 4.1.4 Martin and Shmoys Martin and Shmoys <ref> [17, 18] </ref> introduce different algorithms based on the time window lower bounds and the time oriented branching rules. <p> The computation time is reported as well as the speed-up of the multiprocessor settings in comparison to the one processor situation. Besides the algorithms based on the disjunctive graph formulation we discussed the time-oriented algorithms of Martin and Shmoys <ref> [17, 18] </ref>. We present some of their results and compare these to the other results in Table 7. <p> For this reason some authors try to divide the problems in different groups. Carlier and Pinson [8] distinguish problems with a null-gap between the prEDD and the optimal solution and problems with a strictly positive gap. Martin <ref> [17] </ref> divides the difficult job shop problems in two classes: problems with a tight one-machine lower bound where the optimality proof is difficult and problems with a poor one-machine bound. <p> This was a breaktrough in job shop scheduling. In the discussion of the algorithms we saw that the work of Carlier and Pinson has been a basis for most of the later work in the area. Even the time oriented algorithms of Martin and Shmoys <ref> [17, 18] </ref> rely on their results. We can conclude that the breaktrough of 24 Carlier and Pinson has been (and still is) a great influence on the later work. Finally we will give some ideas for further investigation. <p> In the branch and bound algorithms heuristics play an important role. An example of the use of an heuristic is the determination of an upper bound. We have not discussed these heuristic algorithms in this survey but better heuristics will lead to more efficient branch and bound algorithms. Martin <ref> [17] </ref> concludes that his time-oriented approach was promising and suggests that further research in a combination of the purely combinatorial approaches and the time oriented approach can be worth the effort. In the introduction we mentioned the difficulty of the job shop problem.
Reference: [18] <author> P. Martin and D.B. Shmoys. </author> <title> A new approach to computing optimal schedules for the job shop scheduling problem. In W.H. </title> <editor> Curnigham, S.T. McCormick, and M. Queyranne, editors, </editor> <booktitle> Lecture Notes in Computer Science; Integer Programming and Combinatorial optimization, 1996. Proceedings fifth international IPCO conference, </booktitle> <address> Vancouver, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: We present a disjunctive programming model and a disjunctive graph representation, which have been the basis for a large group of algorithms. Also the mixed-integer programming formulation used by Applegate and Cook [2] is introduced. Other possibilities we give for modeling the job shop problem are a packing formulation <ref> [17, 18] </ref> and the use of time windows [5, 17, 18]. An instance of the job shop problem consists of a set O of operations, a set M of m machines and a set J of n jobs. <p> Also the mixed-integer programming formulation used by Applegate and Cook [2] is introduced. Other possibilities we give for modeling the job shop problem are a packing formulation [17, 18] and the use of time windows <ref> [5, 17, 18] </ref>. An instance of the job shop problem consists of a set O of operations, a set M of m machines and a set J of n jobs. For the feasibility problem we also need to introduce a time T . <p> Applegate and Cook [2] use both the disjunctive and the mixed integer formulation for their cutting plane procedures. Martin and Shmoys <ref> [17, 18] </ref> introduce a lower bound based on a packing model. The packing formulation is a model for the job shop feasibility problem. <p> The last model for the job shop problem we discuss is based on a time oriented approach, and uses time windows. Brucker, Jurisch, and Kramer [5] use the time windows to derive conditions for directing disjunctive edges and Martin and Shmoys <ref> [17, 18] </ref> develop complete algorithms based on these ideas. A time interval is constructed for each operation in which the operation has to be processed or has to start, depending on the definitions of the bounds. <p> In the following sections we will discuss the use of geometric methods by Brucker and Jurisch [4], the cutting plane approach of Applegate and Cook [2], and the packing approach of Martin and Shmoys <ref> [17, 18] </ref>. In this article we only mention the surrogate duality relaxation investigated by Fisher, Lageweg, Lenstra and Rinnooy Kan [13]. 3.1.3 Two-job relaxation The two-job bound of Brucker and Jurisch [4] is a method for calculating lower bounds based on two-job relaxations. <p> with the remark that it remains a research challenge to find classes of valid inequalities that will close the large gap between the lower bound values and the optimal values of the scheduling problems within a reasonable amount of time. 7 3.1.5 Fractional packing lower bound Recently Martin and Shmoys <ref> [17, 18] </ref> proposed a lower bound based on a packing formulation for the job shop feasibility problem: minimize subject to (6), (7), and (8). <p> The work of Martin and Shmoys <ref> [17, 18] </ref> confirms this and contains full branch and bound algorithms based on time windows. Here we discuss the bounding procedures, and the iterative improvements of these bounds. In Section 3.4 we will discuss the branching schemes. <p> In spite of the additional computation time invested, the results are not much better than those obtained using the preemptive one-machine relaxation. Carlier and Pinson [10] introduced global operations to improve their lower bounds. The same idea applied to a time window approach was proposed by Martin and Shmoys <ref> [17, 18] </ref>. This is what they call job shop shave. They assume that an operation must start in one part of the interval and use the one-machine shaving algorithms on all the machines to show that this will not lead to a schedule finished at time T . <p> The gap between the prEDD and the optimal solutions turns out to be quite large. As alternatives we discussed the two-job relaxation of Brucker and Jurisch [4], a cutting plane approach of Applegate and Cook [2] and the fractional packing lower bound of Martin and Shmoys <ref> [17, 18] </ref>. The problems in the table are the well known 10 fi 10 problem of Fisher and Thompson [12] and two 10 fi 10 instances posed by Adams, Balas, and Zawack [1], Problem 5 and 6 from their Table 1. <p> In the first two instances the algorithm of Carlier and Pinson [10] can be compared to the algorithms of Martin and Shmoys <ref> [17, 18] </ref>. A comparison shows that the results of CP shave are better than the lower bound based on the global operations implemented by Carlier and Pinson. <p> These rules are time-oriented and developed by Martin and Shmoys <ref> [17, 18] </ref> to be used in their time-oriented algorithms. Both branching rules 19 of Martin and Shmoys are based on starting time windows, so a window [u (j); v (j)] is defined for each operation as in Section 3.2.3. <p> We will use BJK1 and BJK2 to refer to these algorithms, where BJK2 uses the 3-set conditions. 4.1.4 Martin and Shmoys Martin and Shmoys <ref> [17, 18] </ref> introduce different algorithms based on the time window lower bounds and the time oriented branching rules. <p> The computation time is reported as well as the speed-up of the multiprocessor settings in comparison to the one processor situation. Besides the algorithms based on the disjunctive graph formulation we discussed the time-oriented algorithms of Martin and Shmoys <ref> [17, 18] </ref>. We present some of their results and compare these to the other results in Table 7. <p> This was a breaktrough in job shop scheduling. In the discussion of the algorithms we saw that the work of Carlier and Pinson has been a basis for most of the later work in the area. Even the time oriented algorithms of Martin and Shmoys <ref> [17, 18] </ref> rely on their results. We can conclude that the breaktrough of 24 Carlier and Pinson has been (and still is) a great influence on the later work. Finally we will give some ideas for further investigation.
Reference: [19] <author> M. Perregaard and J. Clausen. </author> <title> Parallel branch-and-bound methods for the job-shop scheduling problem. </title> <note> To appear in Annals of Operations Research. </note>
Reference-contexts: The third branch and bound algorithm (Ma3 ) also uses C-P shave as lower bounding procedure but branches on ff-tight sets. 4.1.5 Perregaard and Clausen Perregaard and Clausen <ref> [19] </ref> describe a parallel implementation of branch and bound algorithms for the job shop problem. These algorithms are based on the results of Carlier and Pinson and Brucker et al. Different branching rules and different parallel settings are tested. <p> We see for example that the global operations do not work well on the easy instances, like LA17 but very well on the harder (e.g. LA36). Perregaard and Clausen <ref> [19] </ref> note that a way to look for a better chance to solving larger job shop scheduling problems is to use faster hardware. They modify some branch and bound algorithms of Carlier and Pinson and of Brucker et al. to run in a parallel setting.
Reference: [20] <author> S.A. Plotkin, D.B. Shmoys, and E. Tardos. </author> <title> Fast approximation agorithms for fractional packing and covering problems. </title> <journal> Mathematics of Operations Research, </journal> <volume> 20 </volume> <pages> 257-301, </pages> <year> 1995. </year>
Reference-contexts: We can show that the optimal value of the LP-relaxation is greater than 1 by finding a feasible dual solution of value greater than 1. Martin and Shmoys use the packing algorithm of Plotkin, Shmoys and Tardos <ref> [20] </ref> to find such a solution. Fortunately this algorithm is insensitive to the number of variables so the exponential number of decision variables is no problem.
Reference: [21] <author> R.J.M. Vaessens, E.H.L. Aarts, and J.K. Lenstra. </author> <title> Job shop scheduling by local search. </title> <journal> INFORMS Journal on Computing, </journal> <volume> 8 </volume> <pages> 302-317, </pages> <year> 1996. </year> <month> 26 </month>
Reference-contexts: The job shop problem was proven N P-hard in the strong sense by Garey, Johnson, and Sethi [14]. Some very special cases of the problem can be solved in polynomial time, but their immediate generalizations are N P-hard. These results are summarized in Table 1 <ref> [21] </ref>, where m is the number of machines, n the number of jobs, l (j) the number of operations of job j and p (i) the processing time of operation i. The paper is structured as follows. In Section 2 several models for the job shop problem are introduced. <p> Section 3.3 compares the results of the lower bounds and Section 3.4 deals with the branching rules used by the algorithms. The branch and bound algorithms also use upper bounds. We will not discuss heuristics to get the upper bounds but refer to Vaessens, Aarts, and Lenstra <ref> [21] </ref>. In Section 4, the algorithms proposed in literature will be explained using the contents of Section 3. 3.1 Lower Bounds 3.1.1 Direct lower bounds The most straightforward lower bounds are the machine lower bound and the job lower bound.
References-found: 21

