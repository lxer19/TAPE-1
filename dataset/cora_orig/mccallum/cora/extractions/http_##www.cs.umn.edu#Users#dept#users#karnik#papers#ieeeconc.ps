URL: http://www.cs.umn.edu/Users/dept/users/karnik/papers/ieeeconc.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/karnik/papers/
Root-URL: http://www.cs.umn.edu
Title: Design Issues in Mobile Agent Programming Systems  
Author: Neeran M. Karnik Anand R. Tripathi 
Date: December 15, 1997  
Address: Minneapolis, MN 55455, USA  
Affiliation: Department of Computer Science, University of Minnesota  
Abstract: We describe the mobile agent paradigm which is becoming increasingly popular for network-centric programming, and compare it with earlier paradigms for distributed computing from which it has evolved. The design of mobile agent systems requires the resolution of several system-level issues, such as the provision of code mobility, portability and scalability on wide-area heterogeneous networks, and a host of security-related problems that go hand-in-hand with mobile code. Agent programming requires suitable languages and programming models that can support code mobility, and runtime systems that provide some fundamental primitives for the creation, migration and management of agents. We discuss these requirements and then describe six mobile agent systems which illustrate different approaches taken by designers to address the problems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.S. Banino. </author> <title> Parallelism and Fault Tolerance in Chorus. </title> <journal> Journal of Systems and Software, </journal> <pages> pages 205-211, </pages> <year> 1986. </year>
Reference-contexts: In REV, the client, instead of invoking a remote procedure, sends its fl Email: karnikjtripathi@cs.umn.edu 1 own procedure code to a server, and requests the server to execute it and return the results. Earlier systems like R2D2 [22] and Chorus <ref> [1] </ref> introduced the concept of active messages that could migrate from node to node, carrying with them program code to be executed at these nodes.
Reference: [2] <author> Lubomir F. Bic, Munehiro Fukuda, and Michael B. Dillencourt. </author> <title> Distributed Computing using Autonomous Objects. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 55-61, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: In Tacoma [13], the agent source code is stored in a "briefcase", 7 which is then submitted to an agent server using the meet primitive. In Messengers <ref> [2] </ref>, the inject primitive allows the programmer to submit a program to a server for execution. In some systems, the agent creation and dispatch operations are combined so that an agent starts executing immediately upon creation. <p> All of these require the programmer to supply a specific host name as the destination, and thus do not provide location-transparence. Telescript also has a meet primitive which requests co-location with a named agent. In Messengers <ref> [2] </ref>, the hop primitive migrates an agent along an application-level logical network. 3.2.2 Agent Communication and Synchronization In order to accomplish useful work, agents often need to communicate and/or synchronize with each other - e.g. a child agent sends results back to its parent, or a set of peer agents exchange
Reference: [3] <author> Luca Cardelli. </author> <title> A Language with Distributed Scope. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 286-297, </pages> <year> 1995. </year>
Reference-contexts: Knowbots supports a primitive called clone which exhibits this behaviour. Similarly the clone operation on an Obliq <ref> [3] </ref> object allows programmers to create passive copies of the object, which can then be dispatched to a server for activation. Agent Migration: During the course of its execution, an agent program may determine that it needs to visit another site on the network.
Reference: [4] <author> D. Chaum, A. Fiat, and M. Naor. </author> <title> Untraceable Electronic Cash. </title> <booktitle> In Advances in Cryptology Proceedings of CRYPTO '88, </booktitle> <pages> pages 319-327. </pages> <publisher> Springer LNCS 403, </publisher> <year> 1990. </year>
Reference-contexts: Operating system level support may be needed for metering of resource usage, such as the CPU time used by an agent or the amount of disk space it needed during its visit. Some electronic payment mechanisms are already in existence <ref> [4] </ref>. These include digital currency as well as secure payment using credit cards or debit cards. These protocols often assume the existence of underlying cryptographic support. Sometimes, the payment protocol itself can require more resource consumption than the money transfer it is implementing.
Reference: [5] <author> Whitfield Diffie and Martin E. Hellman. </author> <title> New Directions in Cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 22(6) </volume> <pages> 644-654, </pages> <month> November </month> <year> 1976. </year>
Reference-contexts: On the other hand, an agent's state typically needs to be updated during its journey so that it can collate its results, for example. We cannot assume that all servers visited are benign, and thus we cannot guarantee that the agent's state will not be maliciously modified. Public-key cryptography <ref> [5] </ref> is perhaps the most promising technique to address these problems. By using encryption, we can provide a secure communication facility which an agent can use to communicate with its home site or servers can use to transport agents safely across untrusted networks.
Reference: [6] <author> Whitfield Diffie, Paul C. van Oorschot, and Michael J. Weiner. </author> <title> Authentication and Authenticated Key Exchanges. In Designs, Codes and Cryptography, vol.2, </title> <journal> no.2, </journal> <pages> pages 107-125. </pages> <publisher> Kluwer Academic Publishers, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: Conversely, when an agent migrates to a server, it needs some assurance of the identity of the server itself before it reveals any of its sensitive data to the server. Cryptographic digital signature systems have been used to develop such mutual authentication schemes <ref> [6] </ref>. These need to be adapted to the mobile agent domain, and integrated into agent transport protocols. In order to verify digital signatures, agents and servers need to reliably know the signing entity's public key. This requires a public key certification infrastructure.
Reference: [7] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-785, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: If this can be captured and transmitted along with the code, the destination server can reactivate the thread at precisely the point where it requested the migration. This is sometimes referred to as transparent process migration <ref> [7] </ref>, because the point of migration is not under the programmer's control, and thus the migration is transparent to the programmer. It can be useful for implementing load-balancing schemes in distributed systems, as well as fault-tolerant applications which may be checkpointed and restarted at arbitrary points during their execution.
Reference: [8] <author> William M. Farmer, Joshua D. Guttman, and Vipin Swarup. </author> <title> Security for Mobile Agents: Issues and Requirements. </title> <booktitle> In Proceedings of the 19th National Information Systems Security Conference, </booktitle> <pages> pages 591-597, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Also, an agent may not trust all servers equally. We need a mechanism to selectively reveal different portions of the agent state to different servers. A security breach could result in the modification of the agent's code as it traverses the network. As Farmer et al. argue <ref> [8] </ref>, it is generally considered impossible to prevent such modification (especially by hostile servers), but it should be possible to detect it. Thus we need some means of verifying that an agent's code is unaltered during transit across an untrusted network or after visiting an untrusted server.
Reference: [9] <author> GeneralMagic. </author> <note> Odyssey web page. Available at URL http://www.genmagic.com/agents/odyssey.html. </note>
Reference-contexts: Despite its extensive support for agent programming, Telescript was not commercially successful, primarily because of the reluctance of programmers to learn a complete new language. General Magic has now shelved the Telescript project and embarked on a similar, Java-based system called Odyssey <ref> [9] </ref>. Odyssey has limited functionality in comparison with Telescript, but can be viewed as a derivative of the same design framework. In common with most other Java-based systems, it lacks thread-level state capture.
Reference: [10] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL '96), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: In section 4, we examine six currently available systems, which represent different points in the design space for mobile agent systems. Two of them (Aglets [15] and Voyager [18]) use Java for coding agents, but with very different programming models. Two others (Agent Tcl <ref> [10] </ref> and Tacoma [13]) use the Tcl language, but differ significantly in their mobility mechanisms. One system (Knowbots [12]) uses the Python language which combines script-based and object-oriented features. Finally, Telescript [23] illustrates the approach of designing a language expressly for agent-based computing. <p> It involves the submission of the entity to be treated as a mobile agent, to the system. This could be a single procedure to be evaluated remotely (as in REV [20]), a script (as in Agent Tcl <ref> [10] </ref>), or a language-level object (as in Telescript [23]). In object-oriented languages, agent creation usually involves the instantiation of a class which provides the agent abstraction. At creation time, the agent can be supplied with a customized itinerary of hosts to visit.
Reference: [11] <author> Colin G. Harrison, David M. Chess, and Aaron Kershenbaum. </author> <title> Mobile Agents: Are they a good idea? Technical report, </title> <institution> IBM Research Division, T.J.Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Available at URL http://www.research.ibm.com/massdist/mobag.ps. </note>
Reference-contexts: While its agents execute on various servers, the client need not remain connected to the network. This feature 2 is especially useful for mobile computers which are often switched off to save on power consumption and network connection charges. As pointed out in <ref> [11] </ref>, another advantage of agents is in real-time control applications. If the application uses RPCs to control a device, it may be difficult (if not impossible) to guarantee that it will meet the real-time deadlines associated with the device.
Reference: [12] <author> Jeremy Hylton, Ken Manheimer, Fred L. Drake Jr., Barry Warsaw, Roger Masse, and Guido van Rossum. </author> <title> Knowbot programming: System support for mobile agents. </title> <booktitle> In Proceedings of the Fifth International Workshop on Object Orientation in Operating Systems (IWOOOS '96), </booktitle> <month> October </month> <year> 1996. </year> <month> 13 </month>
Reference-contexts: Two of them (Aglets [15] and Voyager [18]) use Java for coding agents, but with very different programming models. Two others (Agent Tcl [10] and Tacoma [13]) use the Tcl language, but differ significantly in their mobility mechanisms. One system (Knowbots <ref> [12] </ref>) uses the Python language which combines script-based and object-oriented features. Finally, Telescript [23] illustrates the approach of designing a language expressly for agent-based computing. We present our conclusions in section 5. 2 System-level Issues A mobile agent system is an infrastructure that implements the agent paradigm. <p> Migration is accomplished in Telescript and Sumatra [19] using the go primitive. Agent Tcl uses the agent jump command and Knowbots <ref> [12] </ref> has a migrate primitive. All of these require the programmer to supply a specific host name as the destination, and thus do not provide location-transparence. Telescript also has a meet primitive which requests co-location with a named agent.
Reference: [13] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> An Introduction to the TACOMA Dis--tributed System. </title> <type> Technical Report 95-23, </type> <institution> Department of Computer Science, University of Tromso, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: In section 4, we examine six currently available systems, which represent different points in the design space for mobile agent systems. Two of them (Aglets [15] and Voyager [18]) use Java for coding agents, but with very different programming models. Two others (Agent Tcl [10] and Tacoma <ref> [13] </ref>) use the Tcl language, but differ significantly in their mobility mechanisms. One system (Knowbots [12]) uses the Python language which combines script-based and object-oriented features. Finally, Telescript [23] illustrates the approach of designing a language expressly for agent-based computing. <p> It then assigns a thread to execute the agent code. Agent Tcl provides an agent begin primitive for registering a new agent, and agent submit for dispatching a child agent to a server. In Tacoma <ref> [13] </ref>, the agent source code is stored in a "briefcase", 7 which is then submitted to an agent server using the meet primitive. In Messengers [2], the inject primitive allows the programmer to submit a program to a server for execution.
Reference: [14] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: A more generic concept is a mobile object, which encapsulates data along with the set of operations on that data, and which can be transported from one network node to another. An early example of a system that provided object mobility within a homogeneous local area network was Emerald <ref> [14] </ref>. The mobile agent paradigm has evolved from these antecedents. Figure 1 illustrates how it differs from RPC and REV. In RPC, data is transmitted between the client and server in both directions. In REV, executable code is sent from the client to the server, and data is returned.
Reference: [15] <author> Gunter Karjoth, Danny Lange, and Mitsuru Oshima. </author> <title> A Security Model for Aglets. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 68-77, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: Section 3 discusses programming languages, models and primitives needed for agent-based computing. In section 4, we examine six currently available systems, which represent different points in the design space for mobile agent systems. Two of them (Aglets <ref> [15] </ref> and Voyager [18]) use Java for coding agents, but with very different programming models. Two others (Agent Tcl [10] and Tacoma [13]) use the Tcl language, but differ significantly in their mobility mechanisms. One system (Knowbots [12]) uses the Python language which combines script-based and object-oriented features. <p> Suitable inter-agent communication primitives must therefore be made available. Typically, systems provide RPC (or remote method invocation in object-based systems), but other alternatives are also used. For example, Aglets <ref> [15] </ref> can pass Message objects to each other. In Agent Tcl, the primitives agent send and agent receive are used for message-passing. In Tacoma, agents can exchange "briefcases" containing data, whereas in [16], each agent server provides a tuple space which co-located agents can use for sharing data. <p> The destination is specified using the URL syntax. The AWB does not capture agent state at the thread level, thus avoiding modifications to the standard Java virtual machine. Aglets currently have limited security support; however a more comprehensive authorization framework is being developed <ref> [15] </ref>. 4.3 Agent Tcl Agent Tcl, developed at Dartmouth College, is an agent system which allows Tcl scripts to migrate between servers that provide agent execution, communication, status queries and non-volatile storage.
Reference: [16] <author> Anselm Lingnau, Oswald Drobnik, and Peter Domel. </author> <title> An HTTP-based Infrastructure for Mobile Agents. </title> <booktitle> In Proceedings of the Fall 1995 WWW Conference, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: For example, Aglets [15] can pass Message objects to each other. In Agent Tcl, the primitives agent send and agent receive are used for message-passing. In Tacoma, agents can exchange "briefcases" containing data, whereas in <ref> [16] </ref>, each agent server provides a tuple space which co-located agents can use for sharing data. Some systems allow agents to set up direct connections for communication (e.g. the connect primitive in Telescript).
Reference: [17] <author> Wenbo Mao. </author> <title> Lightweight Micro-cash for the Internet. </title> <booktitle> In ESORICS '96 4th European Symposium on Research in Computer Security, </booktitle> <pages> pages 15-32. </pages> <publisher> Springer LNCS 1146, </publisher> <month> September </month> <year> 1996. </year>
Reference: [18] <author> ObjectSpace. </author> <title> ObjectSpace Voyager Core Package Technical Overview. </title> <type> Technical report, ObjectSpace, </type> <institution> Inc., </institution> <month> July </month> <year> 1997. </year> <note> Available at http://www.objectspace.com/. </note>
Reference-contexts: Section 3 discusses programming languages, models and primitives needed for agent-based computing. In section 4, we examine six currently available systems, which represent different points in the design space for mobile agent systems. Two of them (Aglets [15] and Voyager <ref> [18] </ref>) use Java for coding agents, but with very different programming models. Two others (Agent Tcl [10] and Tacoma [13]) use the Tcl language, but differ significantly in their mobility mechanisms. One system (Knowbots [12]) uses the Python language which combines script-based and object-oriented features. <p> The system can provide primitives for this purpose. Often these need to be extended by the programmer to handle application-specific events. Sometimes it is useful to aggregate agents into groups. This can enable primitives which deliver a single message or synchronization operation to the entire group. For example, Voyager <ref> [18] </ref> uses a hierarchical object grouping mechanism to provide a multicast communication primitive. Most other systems however do not support agent grouping. 8 3.2.3 Agent Monitoring and Control An agent's parent application may need to monitor the agent's status while it executes on a remote host.
Reference: [19] <author> M. Ranganathan, Anurag Acharya, Shamik Sharma, and Joel Saltz. </author> <title> Network-aware Mobile Programs. </title> <booktitle> In Proceedings of USENIX '97, </booktitle> <month> Winter </month> <year> 1997. </year>
Reference-contexts: Migration is accomplished in Telescript and Sumatra <ref> [19] </ref> using the go primitive. Agent Tcl uses the agent jump command and Knowbots [12] has a migrate primitive. All of these require the programmer to supply a specific host name as the destination, and thus do not provide location-transparence.
Reference: [20] <author> James W. Stamos and David K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The RPC model is usually synchronous, i.e., the client suspends itself after sending a request to the server, waiting for the results of the call. An alternative architecture called Remote Evaluation (REV) was proposed by Stamos and Gifford <ref> [20] </ref> in 1990. In REV, the client, instead of invoking a remote procedure, sends its fl Email: karnikjtripathi@cs.umn.edu 1 own procedure code to a server, and requests the server to execute it and return the results. <p> It involves the submission of the entity to be treated as a mobile agent, to the system. This could be a single procedure to be evaluated remotely (as in REV <ref> [20] </ref>), a script (as in Agent Tcl [10]), or a language-level object (as in Telescript [23]). In object-oriented languages, agent creation usually involves the instantiation of a class which provides the agent abstraction. At creation time, the agent can be supplied with a customized itinerary of hosts to visit.
Reference: [21] <author> Tommy Thorn. </author> <title> Programming Languages for Mobile Code. </title> <journal> ACM Computing Surveys, </journal> <volume> 29(3) </volume> <pages> 213-239, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: State capture is often easier to implement in interpreted languages, because it does not necessitate modifications to the operating system, and thus is easier to port. 6 Existing agent systems therefore use a variety of interpreted languages for agent programming <ref> [21] </ref>. These are either executed directly by interpreters, or "compiled" into machine-independent object code, which is then executed using an abstract machine. Many mobile agent systems use scripting languages such as Tcl, Python, and Perl for coding agents.
Reference: [22] <author> John Vittal. </author> <title> Active Message Processing: Messages as Messengers. In R.P. Uhlig, editor, </title> <booktitle> Computer Message System, </booktitle> <pages> pages 175-195. </pages> <publisher> North-Holland, </publisher> <year> 1981. </year>
Reference-contexts: In REV, the client, instead of invoking a remote procedure, sends its fl Email: karnikjtripathi@cs.umn.edu 1 own procedure code to a server, and requests the server to execute it and return the results. Earlier systems like R2D2 <ref> [22] </ref> and Chorus [1] introduced the concept of active messages that could migrate from node to node, carrying with them program code to be executed at these nodes.
Reference: [23] <author> James E. White. </author> <title> Mobile Agents. </title> <type> Technical report, </type> <institution> General Magic, </institution> <note> Available at URL http://www.genmagic.com/Telescript/, October 1995. 14 </note>
Reference-contexts: Two others (Agent Tcl [10] and Tacoma [13]) use the Tcl language, but differ significantly in their mobility mechanisms. One system (Knowbots [12]) uses the Python language which combines script-based and object-oriented features. Finally, Telescript <ref> [23] </ref> illustrates the approach of designing a language expressly for agent-based computing. We present our conclusions in section 5. 2 System-level Issues A mobile agent system is an infrastructure that implements the agent paradigm. <p> It involves the submission of the entity to be treated as a mobile agent, to the system. This could be a single procedure to be evaluated remotely (as in REV [20]), a script (as in Agent Tcl [10]), or a language-level object (as in Telescript <ref> [23] </ref>). In object-oriented languages, agent creation usually involves the instantiation of a class which provides the agent abstraction. At creation time, the agent can be supplied with a customized itinerary of hosts to visit. <p> In this section, we give an overview of a representative subset of these. 4.1 Telescript and Odyssey Telescript <ref> [23] </ref>, developed by General Magic, was among the pioneering efforts in promoting the mobile agent paradigm. It comprises a full-fledged object-oriented language designed specifically for network-centric computing, along with a runtime environment which supports mobile agents. The Telescript language is type-safe and provides interface and implementation inheritance.
References-found: 23

