URL: http://www.cs.wustl.edu/~schmidt/europlop-96/papers/paper10.ps
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-96/ww2-papers.html
Root-URL: 
Title: The ClientServer Rule An Iterative Approach for Implementing an IPC for a Distributed Application (Pattern
Author: Dr. Ilir Kondo, Omer Karacan 
Note: Intent  In  The  
Address: Austria, PSE KB 424 Friedrich Hillegeist Strae 1, 1020 Vienna  
Affiliation: Siemens AG  
Pubnum: -P1, P5-, -P2,P4-, -P3,P1-,  
Email: email: ilir.kondo@siemens.at, oemer.karacan@siemens.at  
Phone: phone: +43-1-71600-266, +43-1-21122-218  
Abstract: Design pattern distributed symetric inter process communication (DSIPC) encapsulates the connect-accept asymetry by the startup stage of an application consisting of Peers. That means, the asymetric pair connect,accept reduces to only one (symetric) connect call. DSIPC provides solution for runtime broken connection and application partial recovery. DSIPC considers an application with an arbitrary point-to-point configuration of IPC, which may be distributed, as well. All processes are Peers and should be started within a given interval of time. There should be no predefined rule or prescription for the startup sequence of processes. Connection will be realised with the known connect-accept services of connection-oriented protocols, and no communication server is to be used. In case of connection fault between two processes or groups of processes repair of broken connections happens either automatically or at least it remains transparent for the other running processes. We provide a solution for these problems by introducing the ClientServer Rule (C-S Rule) and the DSIPC design pattern. Consider an application with an arbitrary point-to-point configuration of IPC which may be distributed, as well. All processes are Peers and should be started within a given interval of time. There should be no predefined rule or prescription about the startup sequence of processes. Connection will be realised with the known connect-accept services of connection-oriented protocols and no special or extra communication server is to be used. We provide a solution for these two general problems by introducing the ClientServer (C-S) Rule and the DSIPC design pattern. Before we formulate the C-S Rule we introduce the following definitions. 
Abstract-found: 1
Intro-found: 1
Reference: [GOF] <author> Gamma,E.,R.Helm,R.Johnson, and J.Vlissides. </author> <title> DESIGN PATTERNS: ELEMENTS OF REUSEABLE OBJECTORIENTED SOFTWARE, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [RAGO] <author> Rago,S. </author> <title> UNIX SYSTEM V NETWORK PROGRAMMING, </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference: [SCHMIDT] <author> Schmidt, D. </author> <title> DESIGN PATTERNS FOR INITIALISING NETWORK SERVICES. </title> <address> C++REPORT. </address> <month> November-December </month> <year> 1995. </year>
References-found: 3

