URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/cav97submit.TB.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/serdar/stari.html
Root-URL: 
Title: STARI: A Case Study in Compositional and Hierarchical Timing Verification  
Author: Serdar Ta~sran Robert K. Brayton 
Address: Berkeley.  
Affiliation: Department of Electrical Engineering and Computer Sciences, University of California at  
Abstract: In [TAKB96], we investigated techniques for checking if one real-time system correctly implements another and developed theory for hierarchical proofs and assume-guarantee style reasoning. In this study, using the techniques of [TAKB96], we verify the correctness of the timing of the communication chip STARI. 
Abstract-found: 1
Intro-found: 1
Reference: [AHV93] <author> R. Alur, T.A. Henzinger, M.Y. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 592-601, </pages> <year> 1993. </year>
Reference: [AK96] <author> R. Alur and R.P. Kurshan. </author> <title> Timing analysis in COSPAN. In Hybrid Systems III, </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [G93] <author> M. R. Greenstreet STARI: </author> <title> A Technique for High-Bandwidth Communication. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction We describe the application of the techniques and tools described in [TAKB96] to the verification of the high-bandwidth communication chip, STARI <ref> [G93] </ref>. STARI (by Greenstreet, [G93, G96]) is a self-timed FIFO that interfaces a transmitter and a receiver that operate at the same clock frequency but may have some skew between their clock signals (Figure 1). <p> 1 Introduction We describe the application of the techniques and tools described in [TAKB96] to the verification of the high-bandwidth communication chip, STARI [G93]. STARI (by Greenstreet, <ref> [G93, G96] </ref>) is a self-timed FIFO that interfaces a transmitter and a receiver that operate at the same clock frequency but may have some skew between their clock signals (Figure 1). <p> Intuitively, the longer and faster the FIFO, the more skew it can tolerate. The correctness of the properties above depend on the length of the FIFO, the clock speed, the magnitude of the skew and the speed of operation of FIFO stages. <ref> [G93, LG95] </ref> verify that if a certain relationship holds between these parameters, then properties (i) and (ii) hold.
Reference: [G96] <author> M. R. Greenstreet STARI: </author> <title> Skew Tolerant Communication. </title> <type> Unpublished manuscript. </type>
Reference-contexts: 1 Introduction We describe the application of the techniques and tools described in [TAKB96] to the verification of the high-bandwidth communication chip, STARI [G93]. STARI (by Greenstreet, <ref> [G93, G96] </ref>) is a self-timed FIFO that interfaces a transmitter and a receiver that operate at the same clock frequency but may have some skew between their clock signals (Figure 1). <p> STARI (Self-Timed At Receiver's Input) is a hybrid-scheme: it is a self-timed first-in first-out queue (FIFO) that connects a transmitter and receiver. The two communicate as though they were part of an ideal synchronous system (Fig. 1 from <ref> [G96] </ref>) despite a possibly time-varying skew. The FIFO is initialized to be roughly half-full, and during each period of the clock, one value is inserted to T ransmitter ReceiverF IF O . - data in data out ack in T ime varying delayT ime varying delay Global Clock Fig. 1.
Reference: [HBAB93] <author> H. Hulgaard, S. M. Burns, T. Amon, and G. </author> <title> Borriello Practical Applications of an Efficient Time Separation of Events Algorithm In Digest of Technical Papers of the 1993 IEEE Intl. </title> <booktitle> Conf. on Computer-Aided Design, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Num. of Memory CPU time clocks (MB) (seconds) I 3 0.02 1.3 III 3 0.02 13.4 V 7 6.33 158.6 Table 1. Comparison with previous approaches. The most important benefit of our approach is the correctness guarantee that it provides for the actual circuit, whereas [LG95] and <ref> [HBAB93] </ref> based their proofs on oversimplified abstractions of the circuit. Their tools do not provide a mechanism for checking the correctness of abstractions, therefore there is no formal guarantee that the properties they proved at a high level are satisfied by the circuit. [LG95] and [HBAB93] neglect the time taken by <p> actual circuit, whereas [LG95] and <ref> [HBAB93] </ref> based their proofs on oversimplified abstractions of the circuit. Their tools do not provide a mechanism for checking the correctness of abstractions, therefore there is no formal guarantee that the properties they proved at a high level are satisfied by the circuit. [LG95] and [HBAB93] neglect the time taken by the NOR gate (see Figure 5) to compute the acknowledgment output and, furthermore, use a delay model that is less realistic than the inertial delay model that we employ.
Reference: [LG95] <author> C. Leung, M. </author> <title> Greenstreet A Simple Proof Checker for Timing Verification. </title> <booktitle> In ACM Intl. Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <pages> pages 294-305, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Intuitively, the longer and faster the FIFO, the more skew it can tolerate. The correctness of the properties above depend on the length of the FIFO, the clock speed, the magnitude of the skew and the speed of operation of FIFO stages. <ref> [G93, LG95] </ref> verify that if a certain relationship holds between these parameters, then properties (i) and (ii) hold. <p> Num. of Memory CPU time clocks (MB) (seconds) I 3 0.02 1.3 III 3 0.02 13.4 V 7 6.33 158.6 Table 1. Comparison with previous approaches. The most important benefit of our approach is the correctness guarantee that it provides for the actual circuit, whereas <ref> [LG95] </ref> and [HBAB93] based their proofs on oversimplified abstractions of the circuit. Their tools do not provide a mechanism for checking the correctness of abstractions, therefore there is no formal guarantee that the properties they proved at a high level are satisfied by the circuit. [LG95] and [HBAB93] neglect the time <p> for the actual circuit, whereas <ref> [LG95] </ref> and [HBAB93] based their proofs on oversimplified abstractions of the circuit. Their tools do not provide a mechanism for checking the correctness of abstractions, therefore there is no formal guarantee that the properties they proved at a high level are satisfied by the circuit. [LG95] and [HBAB93] neglect the time taken by the NOR gate (see Figure 5) to compute the acknowledgment output and, furthermore, use a delay model that is less realistic than the inertial delay model that we employ. <p> Since verification of properties on the abstract model is performed automatically in our approach, we did not need to resort to such simplifications. The proof of <ref> [LG95] </ref> is for all FIFO lengths n, and makes it easier to see the trade-off between circuit parameters, whereas our approach is still limited by n. However, the proof of [LG95] is rather involved, and one needs to have an in-depth understanding of why the properties are satisfied. <p> The proof of <ref> [LG95] </ref> is for all FIFO lengths n, and makes it easier to see the trade-off between circuit parameters, whereas our approach is still limited by n. However, the proof of [LG95] is rather involved, and one needs to have an in-depth understanding of why the properties are satisfied. The abstraction proofs and environment abstractions that we used were rather straightforward and intuitive. 4 Conclusion We demonstrated the use of compositionality and hierarchy on the verification of the STARI communication circuit.
Reference: [MP95] <author> O. Maler, A. </author> <title> Pnueli Timing Analysis of Asynchronous Circuits Using Timed Automata In ACM Intl. </title> <booktitle> Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <pages> pages 249-257, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: The set of input/output waveforms that a process can exhibit constitute the language of the process. The delay model. We model the C-elements and the NOR gates used in the STARI circuit as ideal delayless elements followed by inertial delay buffers, in a fashion similar to <ref> [MP95] </ref>. The output of an inertial delay buffer follows the input with a delay in the range [d min ; d max ], i.e., input transitions are reflected at the output with a delay in the given range.
Reference: [TAKB96] <author> S. Ta~sran, R. Alur, R. P. Kurshan, and R. K. </author> <title> Brayton Verifying Abstractions of Timed Systems. </title> <booktitle> In Proc. of the 7th Intl. Conf. on Concurrency Theory, CONCUR '96, </booktitle> <volume> LNCS 1119, </volume> <pages> pages 546-562, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> [W3] http://www-cad.eecs.berkeley.edu/~serdar/stari.html </note>
Reference-contexts: 1 Introduction We describe the application of the techniques and tools described in <ref> [TAKB96] </ref> to the verification of the high-bandwidth communication chip, STARI [G93]. STARI (by Greenstreet, [G93, G96]) is a self-timed FIFO that interfaces a transmitter and a receiver that operate at the same clock frequency but may have some skew between their clock signals (Figure 1). <p> To achieve (i), we made use of the following, which we had developed in <ref> [TAKB96] </ref>: ? Supported by SRC under contract DC-324-026. An algorithm for checking if a real-time system is a correct abstraction for another: In [TAKB96] we provided a sufficient condition under which a given untimed mapping preserves timed behavior, and gave an algorithm for checking if this condition is satisfied. <p> To achieve (i), we made use of the following, which we had developed in <ref> [TAKB96] </ref>: ? Supported by SRC under contract DC-324-026. An algorithm for checking if a real-time system is a correct abstraction for another: In [TAKB96] we provided a sufficient condition under which a given untimed mapping preserves timed behavior, and gave an algorithm for checking if this condition is satisfied. <p> Stage k of the FIFO. Given this circuit description for STARI, we now proceed to verify the two timing properties mentioned earlier. 3 Verification of STARI 3.1 Background The formalism and tools used in the verification of STARI are described in detail in <ref> [TAKB96] </ref>. In this section, we review the essential facts. Modeling timed systems: Timed processes. For an example of a timed process, refer to Figure 6. A timed process has a set of locations S, where S 0 S is designated as initial. <p> Then the output can either remain unchanged (by taking the edges marked x d max from the shaded locations) or reflect both input transitions (by taking the edges marked d min x d max ). Abstractions of timed systems. In <ref> [TAKB96] </ref>, we examined three notions for a timed system being a correct abstraction (or implementation) of another: (i) timed language inclusion, (ii) timed simulation, and (iii) the existence of timed behavior preserving mappings. We write A B to denote the fact that A implements B. <p> In <ref> [TAKB96] </ref> it was shown that timed language inclusion, denoted by L is compositional and that assume-guarantee style reasoning can be used in conjunction with it correctly, provided that all timed processes are non-blocking.
References-found: 8

