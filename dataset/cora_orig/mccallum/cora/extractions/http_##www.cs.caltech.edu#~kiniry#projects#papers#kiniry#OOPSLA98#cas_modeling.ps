URL: http://www.cs.caltech.edu/~kiniry/projects/papers/kiniry/OOPSLA98/cas_modeling.ps
Refering-URL: http://www.cs.caltech.edu/~kiniry/projects/index.html
Root-URL: http://www.cs.caltech.edu
Title: A New Construct for Systems Modeling and Theory: The Kind  
Author: Joseph R. Kiniry 
Date: October 16, 1998  
Address: Mailstop 256-80 Pasadena, CA 91125  
Affiliation: Department of Computer Science California Institute of Technology  
Abstract: Our primary research goals is the development of theories and technology to facilitate the design, implementation, and management of complex systems. Complex systems, in this context, are any systems which exhibit "interesting" behavior including, but not limited to, nondeterminism, collective or emergent behavior, and adaptability. We can claim to understand a system only when we can describe how it works (e.g. provide a specification) such that, if it is a constructive system, another can build it. This notion is our constructive peer of the traditional scientific method: repeatability of results is equivalent to repeatability of construction. Abstraction is recognized as a key to understanding complex systems. While increasing our abstraction level results in a more complete meta-model (i.e. we can talk about more systems because we can talk about more complex systems), it also means a more complex metamodel. On the other hand, we don't want to create theories and systems that are only usable by experts. We need abstractions that are useful, comprehensible, and manipulable by humans (modelers, simulators, designers, developers, tool builders, etc.) and systems. In our experience, the highest-level abstractions in use today (e.g. classes, objects, types, subjects) can not model the systems we are interested in exploring. A higher-level abstraction missing: an "ubertype" of sorts | a syntactic and semantic bridge between types. We call this new abstraction a "kind ". This paper will briefly describe kinds and provide several examples of their use. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mart in Abadi and Luca Cardelli. </author> <title> A Theory of Objects. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The tools of the trade. There are many existing tools, theoretical and practical, that are used to understand complex systems. Theories come in many forms, ranging from simple type theory [2] to the extremely complex, and some would argue, unapproachable object <ref> [1] </ref> and category [38] theories. Practical tools, all of which are direct or indirect reifications of theoretical work, are either concrete (programmatic) or conceptual. Examples include: Programming, specification, logic, and modeling languages. E.g. <p> AWT, Beans, Jini). The same rules and implications hold in such an architecture. 4.1.1 Example 1: Standard Object Class Compatibility Assume we have instances of the following two components. Note that the keywords in the object specifications below are adopted from <ref> [1] </ref>. Class, Type, Fields, and Method behave as expected. Imprecisely, think of classes, interfaces, attributes, and methods, respectively, in the Java language. Dependence methods are those methods that a component needs use to work correctly. Again, imprecisely, consider JavaBeans publishers or standard Java inline references to method invocations. <p> I am working to rigorously leverage and extend existing applicable models (e.g. specification and proof models like UNITY [8]) and theories (classical type theory [2], object theory <ref> [1] </ref>, category theory [3], and knowledge representation theory [46], especially in the context of software engineering [21]) in application to the problem of distributed, collaborative, chaotic, dynamic software specification, construction, and reuse.
Reference: [2] <author> Peter Andrews. </author> <title> An Introduction to Mathematical Logic and Type Theory: To Truth Through Proof. </title> <publisher> Academic Press, </publisher> <year> 1986. </year> <month> 13 </month>
Reference-contexts: Systems that exhibit the interesting behaviors mentioned previously have been in use for decades. The tools of the trade. There are many existing tools, theoretical and practical, that are used to understand complex systems. Theories come in many forms, ranging from simple type theory <ref> [2] </ref> to the extremely complex, and some would argue, unapproachable object [1] and category [38] theories. Practical tools, all of which are direct or indirect reifications of theoretical work, are either concrete (programmatic) or conceptual. Examples include: Programming, specification, logic, and modeling languages. E.g. <p> I am working to rigorously leverage and extend existing applicable models (e.g. specification and proof models like UNITY [8]) and theories (classical type theory <ref> [2] </ref>, object theory [1], category theory [3], and knowledge representation theory [46], especially in the context of software engineering [21]) in application to the problem of distributed, collaborative, chaotic, dynamic software specification, construction, and reuse.
Reference: [3] <author> Andrea Asperti and Giuseppe Longo. </author> <title> Categories, Types, And Structures: An Introduction to Category Theory for the Working Computer Scientist. </title> <booktitle> Foundations of Computer Science. </booktitle> <publisher> The MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: 5 (which are still under development), we will motivate what kinds are and their uses through the presentation of a few examples. 3 There are several additional mathematical meta-theories above algebraic group theory and analysis: model theory [22] can describe how such theories relate to each other, and category theory <ref> [3, 38] </ref> can describe how such characterizations of theories relate to one other. 4 Three random examples of concepts: a class in the last model you designed, the relationship between you and your bank, and the first idea you had when you woke up this morning. 5 Details are forthcoming in <p> I am working to rigorously leverage and extend existing applicable models (e.g. specification and proof models like UNITY [8]) and theories (classical type theory [2], object theory [1], category theory <ref> [3] </ref>, and knowledge representation theory [46], especially in the context of software engineering [21]) in application to the problem of distributed, collaborative, chaotic, dynamic software specification, construction, and reuse.
Reference: [4] <author> Robert Axelrod. </author> <title> The Complexity of Cooperation: Agent-Based Models of Competition and Collaboration. </title> <publisher> Princeton University Press, </publisher> <year> 1997. </year>
Reference-contexts: E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models. E.g. metaob ject protocols [29], knowledge representation [10], patterns [19], compositional architectures [44], agent technology <ref> [4] </ref>, and specification and proof models like UNITY [8]. Our conceptual models, languages, and tools continue to evolve, becoming more complete and capable everyday.
Reference: [5] <author> J.C. Bicarregui, J.S. Fitzgerald, P.A. Lindsay, R. Moore, and B. Ritchie. </author> <title> Proof in VDM: A Practitioner's Guide. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Practical tools, all of which are direct or indirect reifications of theoretical work, are either concrete (programmatic) or conceptual. Examples include: Programming, specification, logic, and modeling languages. E.g. Java [24], VDM <ref> [5] </ref>, HOL [23], and UML [40], respectively, The tools that support the use and manipulation of these languages. E.g.
Reference: [6] <author> K. Biedermann. </author> <title> How triadic diagrams represent conceptual structures. Conceptual Structures: </title> <journal> Fulfilling Peirce's Dream, </journal> <volume> 1257 </volume> <pages> 304-317, </pages> <year> 1997. </year>
Reference-contexts: CKML is a specification language for the conceptual representation and analysis of networked resources. It is fully integrated with the Web and has a formal grounding in knowledge representation and theory work of many researchers (a few references include <ref> [6, 41, 45, 46] </ref>). Examples of Usage. One particularly simple but compelling motivation for the use of kind is found in the domain of what I call semantic component coupling. More examples that fall in this domain can be found in [31]. Semantic Components: Problem Summary.
Reference: [7] <author> C. Bock and J. Odell. </author> <title> A more complete model of relations and their implementation: Aggregation. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 11(5) </volume> <pages> 68-70, </pages> <year> 1998. </year>
Reference-contexts: Many existing conceptual models and systems view these two constructs as distinct. My claim is that they are not: relationships are a specialization of entities. Relationships come in several forms, inheritance [12], connectors [20, 42], and aggregation <ref> [7] </ref> being the most common. All of these constructs can be described and utilized as first-class entities. They can be formally modeled, specialized, applied to other constructs, and refined. Individual relationships also have relationships to each other, thus they are a recursive structure.
Reference: [8] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1988. </year>
Reference-contexts: E.g. metaob ject protocols [29], knowledge representation [10], patterns [19], compositional architectures [44], agent technology [4], and specification and proof models like UNITY <ref> [8] </ref>. Our conceptual models, languages, and tools continue to evolve, becoming more complete and capable everyday. Conversely, we postulate that the complexity of the systems that we are attempting to build and use is far out-pacing that which we can understand. 1 There is no magic bullet. <p> I am working to rigorously leverage and extend existing applicable models (e.g. specification and proof models like UNITY <ref> [8] </ref>) and theories (classical type theory [2], object theory [1], category theory [3], and knowledge representation theory [46], especially in the context of software engineering [21]) in application to the problem of distributed, collaborative, chaotic, dynamic software specification, construction, and reuse.
Reference: [9] <author> K. Mani Chandy, Paolo Sivilotti, and Joseph R. Kiniry. </author> <title> A cottage industry of software publishing: Implications for theories of composition. </title> <booktitle> In Proceedings, FMPPTA '98: Third International Workshop on Formal Methods for Parallel Programming: Theory and Applications, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1998. </year>
Reference-contexts: My first published thoughts on the matter can be found in my second M.S. thesis [32] as well as in a recent paper <ref> [9] </ref>. The further reification and refinement of these ideas resulted in a new conceptual construct that I call a kind. <p> and your bank, and the first idea you had when you woke up this morning. 5 Details are forthcoming in a second paper on semantic component composition [31]. 7 More details on the publication and discovery of kind, and thus types, classes, interfaces, implementations, specifications, etc. can be found in <ref> [9] </ref>. A Definition of Kind. A kind is a specification of a concept (in an arbitrary language) and a specification of metainformation about the concept in a formal specification language. Due to axiom one, kinds can define static and dynamic n-ary relationships between other kinds.
Reference: [10] <institution> Conceptual Knowledge Markup Language (CKML) DTD. </institution> <address> http://asimov. eecs.wsu.edu/WAVE/Ontologies/CKML/CKML-DTD.html. </address>
Reference-contexts: E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models. E.g. metaob ject protocols [29], knowledge representation <ref> [10] </ref>, patterns [19], compositional architectures [44], agent technology [4], and specification and proof models like UNITY [8]. Our conceptual models, languages, and tools continue to evolve, becoming more complete and capable everyday.
Reference: [11] <institution> Rational Software Corporation et al. </institution> <note> UML Semantics, version 1.1. The UML 1.1 Consortium, </note> <month> September </month> <year> 1997. </year>
Reference-contexts: Metamodeling. Metamodeling is the result of the process of analyzing and designing models about existing models. Architecturally, a metamodel of a modeling language describes the abstract concepts and operations that exist 6 within the base language. Good examples of metamodels are the UML meta--model found in <ref> [11] </ref>, the OPEN metamodel used in [18], and the COMMA meta-method discussed in [26]. Metalevel. A level is a frame of reference, or a level of abstraction, within a model. Excellent examples of metalevels are found in mathematics. For example, consider a simple system Z+, defined as addition on integers.
Reference: [12] <author> J.F. Costa, A. Sernadas, and C. Sernadas. </author> <title> Object inheritance beyond subtyping. </title> <journal> Acta Informatica, </journal> <volume> 31(1) </volume> <pages> 5-26, </pages> <year> 1994. </year>
Reference-contexts: Many existing conceptual models and systems view these two constructs as distinct. My claim is that they are not: relationships are a specialization of entities. Relationships come in several forms, inheritance <ref> [12] </ref>, connectors [20, 42], and aggregation [7] being the most common. All of these constructs can be described and utilized as first-class entities. They can be formally modeled, specialized, applied to other constructs, and refined. Individual relationships also have relationships to each other, thus they are a recursive structure.
Reference: [13] <author> Brad Cox. Superdistribution: </author> <title> Objects As Property on the Electronic Frontier. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1996. </year>
Reference-contexts: Therefore, what previously might have been an unrealistic architecture and model for solving problems that didn't yet exist, now becomes an obvious and necessary additional to our set of tools. 2 The most passionate early advocate of this problem is Cox <ref> [13] </ref>, though we would argue that alternative thinkers like Stallman also fit into the picture. 3 Four Postulates/Axioms. Before discussing kind, we will present four pos-tulates on the road to kind.
Reference: [14] <author> Brad Cox and Andrew Novabilsky. </author> <title> Object-Oriented Programming, An Evolutionary Approach. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: Conversely, we postulate that the complexity of the systems that we are attempting to build and use is far out-pacing that which we can understand. 1 There is no magic bullet. I agree with Brooks [28] and Cox <ref> [14] </ref>; there is no magic bullet that will make all of this complexity vanish.
Reference: [15] <author> Ward Cunningham. </author> <note> The wiki wiki web. WWW, 1998. http://c2.com/ cgi/wiki?WikiWikiWeb. </note>
Reference-contexts: A demonstration application, realized as an open web architecture for component specification based up the Wiki web <ref> [15] </ref> is being designed and built by the Infospheres group at this time. We will use this application as a motivating demonstration of the usefulness and applicability of kind.
Reference: [16] <author> Desmond D'Souza and Alan Wills. </author> <title> Objects, Components, and Frameworks with UML: the Catalysis Approach. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1998. </year>
Reference-contexts: Fixed frames of reference are provided by conceptual models and languages because the complexity of representational abstractions grows very quickly. (Examples of such systems include metaobject protocols and meta-aware modeling languages/systems like UML, Catalysis <ref> [16] </ref>, and OOCL [43].) These finite frame of reference boundaries are artificial constructs. Conceptual metalevels exist independent of relations; only ground concepts are idempotent. Meaning, we should be able to define as many conceptual levels as 5 necessary to completely and accurately describe a concept or relation.
Reference: [17] <author> John R. </author> <title> Durbin. Modern Algebra. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1985. </year> <month> 14 </month>
Reference-contexts: Metalevel. A level is a frame of reference, or a level of abstraction, within a model. Excellent examples of metalevels are found in mathematics. For example, consider a simple system Z+, defined as addition on integers. Several abstractions of this system exist: algebraic group theory <ref> [17] </ref> and analysis [39] being the obvious abstractions. These two theories can completely describe, in a succinct, complete, and accurate fashion, everything there is to know about Z+. They are, as universes of concepts, a metalevel above the level at which Z+ rests. 3 Examples of Meta.
Reference: [18] <author> Donald G. Firesmith, Brian Henderson-Sellers, and Ian Graham. </author> <title> OPEN Modeling Language (OML) Reference Manual. </title> <publisher> Cambridge University Press, </publisher> <year> 1998. </year>
Reference-contexts: Architecturally, a metamodel of a modeling language describes the abstract concepts and operations that exist 6 within the base language. Good examples of metamodels are the UML meta--model found in [11], the OPEN metamodel used in <ref> [18] </ref>, and the COMMA meta-method discussed in [26]. Metalevel. A level is a frame of reference, or a level of abstraction, within a model. Excellent examples of metalevels are found in mathematics. For example, consider a simple system Z+, defined as addition on integers.
Reference: [19] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference-contexts: E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models. E.g. metaob ject protocols [29], knowledge representation [10], patterns <ref> [19] </ref>, compositional architectures [44], agent technology [4], and specification and proof models like UNITY [8]. Our conceptual models, languages, and tools continue to evolve, becoming more complete and capable everyday.
Reference: [20] <author> David Garlan. </author> <title> Higher-order connectors. </title> <booktitle> In Proceedings of Workshop on Compositional Software Architectures, </booktitle> <address> Monterey, California, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: Many existing conceptual models and systems view these two constructs as distinct. My claim is that they are not: relationships are a specialization of entities. Relationships come in several forms, inheritance [12], connectors <ref> [20, 42] </ref>, and aggregation [7] being the most common. All of these constructs can be described and utilized as first-class entities. They can be formally modeled, specialized, applied to other constructs, and refined. Individual relationships also have relationships to each other, thus they are a recursive structure.
Reference: [21] <author> R. Godin, G. Mineau, R. Missaoui, M. Stgermain, and N. Faraj. </author> <title> Applying concept-formation methods to software reuse. </title> <journal> International Journal Of Software Engineering And Knowledge Engineering, </journal> <volume> 5(1) </volume> <pages> 119-142, </pages> <year> 1995. </year>
Reference-contexts: I am working to rigorously leverage and extend existing applicable models (e.g. specification and proof models like UNITY [8]) and theories (classical type theory [2], object theory [1], category theory [3], and knowledge representation theory [46], especially in the context of software engineering <ref> [21] </ref>) in application to the problem of distributed, collaborative, chaotic, dynamic software specification, construction, and reuse.
Reference: [22] <author> Martin Goldstern and Haim Judah. </author> <title> The Incompleteness Phenomenon: A New Course in Mathematical Logic. A.K. </title> <publisher> Peters, </publisher> <year> 1995. </year>
Reference-contexts: Kind Instead of providing the core mathematical axioms, theorems, and properties of kind 5 (which are still under development), we will motivate what kinds are and their uses through the presentation of a few examples. 3 There are several additional mathematical meta-theories above algebraic group theory and analysis: model theory <ref> [22] </ref> can describe how such theories relate to each other, and category theory [3, 38] can describe how such characterizations of theories relate to one other. 4 Three random examples of concepts: a class in the last model you designed, the relationship between you and your bank, and the first idea
Reference: [23] <author> M. J. C. Gordon and T. F. Melham, </author> <title> editors. Introduction To HOL: A Theorem Proving Environment For Higher Order Logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Practical tools, all of which are direct or indirect reifications of theoretical work, are either concrete (programmatic) or conceptual. Examples include: Programming, specification, logic, and modeling languages. E.g. Java [24], VDM [5], HOL <ref> [23] </ref>, and UML [40], respectively, The tools that support the use and manipulation of these languages. E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models.
Reference: [24] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1996. </year>
Reference-contexts: Practical tools, all of which are direct or indirect reifications of theoretical work, are either concrete (programmatic) or conceptual. Examples include: Programming, specification, logic, and modeling languages. E.g. Java <ref> [24] </ref>, VDM [5], HOL [23], and UML [40], respectively, The tools that support the use and manipulation of these languages. E.g.
Reference: [25] <author> IFAD Group. </author> <title> IFAD VDM tools. </title> <address> http://www.ifad.dk/products/ vdmtools.html. </address>
Reference-contexts: Examples include: Programming, specification, logic, and modeling languages. E.g. Java [24], VDM [5], HOL [23], and UML [40], respectively, The tools that support the use and manipulation of these languages. E.g. Various IDEs like JDE [33], specification checkers like IFAD <ref> [25] </ref>, theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models. E.g. metaob ject protocols [29], knowledge representation [10], patterns [19], compositional architectures [44], agent technology [4], and specification and proof models like UNITY [8].
Reference: [26] <author> B. Henderson-Sellers and A. Bulthuis. </author> <title> Object-Oriented Metamethods. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Architecturally, a metamodel of a modeling language describes the abstract concepts and operations that exist 6 within the base language. Good examples of metamodels are the UML meta--model found in [11], the OPEN metamodel used in [18], and the COMMA meta-method discussed in <ref> [26] </ref>. Metalevel. A level is a frame of reference, or a level of abstraction, within a model. Excellent examples of metalevels are found in mathematics. For example, consider a simple system Z+, defined as addition on integers.
Reference: [27] <author> Mirriam-Webster Inc. </author> <title> Webster's Ninth New Collegiate Dictionary. </title> <publisher> Mirriam-Webster Inc., </publisher> <address> first digitial edition edition, </address> <year> 1992. </year>
Reference-contexts: Simply put, meta means means "more comprehensive". It is a term that is normally used with the name of a discipline to designate a new but related discipline, designed to deal critically with the original one <ref> [27] </ref>. In our context, a concept is considered "meta" only in relation to other concept (s). A system S is meta with respect to another system S 0 only if S completely characterizes S 0 .
Reference: [28] <author> Frederick P. Brooks Jr. </author> <title> Mythical Man Month: </title> <booktitle> Essays on Software Engineering. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference-contexts: Conversely, we postulate that the complexity of the systems that we are attempting to build and use is far out-pacing that which we can understand. 1 There is no magic bullet. I agree with Brooks <ref> [28] </ref> and Cox [14]; there is no magic bullet that will make all of this complexity vanish.
Reference: [29] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> The MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models. E.g. metaob ject protocols <ref> [29] </ref>, knowledge representation [10], patterns [19], compositional architectures [44], agent technology [4], and specification and proof models like UNITY [8]. Our conceptual models, languages, and tools continue to evolve, becoming more complete and capable everyday.
Reference: [30] <author> Joseph R. Kiniry. </author> <title> On the equivalency in communication models: Messaging, rpcs, events, </title> <journal> and tuple-space operations. </journal> <note> Will be available as a Caltech technical report. Email the author for information., </note> <year> 1998. </year>
Reference-contexts: Such systems have the properly that the total system is more complicated and fragile than the sums of the original parts. Thus, the problem can be reduced to the following: Given the specification for N objects, which objects are semantically compatible? 7 6 See <ref> [30] </ref> on issues relating to this statement. 7 A further refinement is, of course, given two components, or even two methods of two components, are they semantically compatible? 8 Definitions. Our examples will make our motivational domain clear: reuse in object-oriented systems.
Reference: [31] <author> Joseph R. Kiniry. </author> <title> Semantic component composition. </title> <institution> California Institute of Technology Technical Report Caltech-CS-TR-98-13, California Institute of Technology, </institution> <month> October </month> <year> 1998. </year>
Reference-contexts: theories relate to one other. 4 Three random examples of concepts: a class in the last model you designed, the relationship between you and your bank, and the first idea you had when you woke up this morning. 5 Details are forthcoming in a second paper on semantic component composition <ref> [31] </ref>. 7 More details on the publication and discovery of kind, and thus types, classes, interfaces, implementations, specifications, etc. can be found in [9]. A Definition of Kind. <p> Examples of Usage. One particularly simple but compelling motivation for the use of kind is found in the domain of what I call semantic component coupling. More examples that fall in this domain can be found in <ref> [31] </ref>. Semantic Components: Problem Summary. Components communicate with messages which can be realized as method invocations. 6 Under most circumstances, objects implemented in different languages and objects written by independent developers can not communicate without significant work on the part of a developer. <p> These are only illustrative, not prescriptive, examples. All the following examples will use the following classes: 8 The formal definition of compatibility and the other terms herein is available in <ref> [31] </ref>. 9 ObjectType IllegalDateException var String message; method setMessage (message: String); method getMessage (): String; end; ObjectType DateType method setDate (day: Integer; month: Integer; year: Integer); method getDate (); end; Note that the "tight" coupling demonstrated below is equivalent to the more dynamic coupling (with publishers and listeners) found in the
Reference: [32] <author> Joseph R. Kiniry. </author> <title> The specification of dynamic distributed component systems. </title> <type> Master's thesis, </type> <institution> California Institute of Technology, </institution> <month> May </month> <year> 1998. </year> <month> 15 </month>
Reference-contexts: My first published thoughts on the matter can be found in my second M.S. thesis <ref> [32] </ref> as well as in a recent paper [9]. The further reification and refinement of these ideas resulted in a new conceptual construct that I call a kind.
Reference: [33] <author> Paul Kinnucan. </author> <title> Emacs JDE (Java Development Environment), </title> <year> 1998. </year>
Reference-contexts: Examples include: Programming, specification, logic, and modeling languages. E.g. Java [24], VDM [5], HOL [23], and UML [40], respectively, The tools that support the use and manipulation of these languages. E.g. Various IDEs like JDE <ref> [33] </ref>, specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models.
Reference: [34] <institution> Object International, Inc. Together/J 2.1 User Guide, </institution> <address> 2.1 edition, </address> <year> 1998. </year>
Reference-contexts: E.g. Java [24], VDM [5], HOL [23], and UML [40], respectively, The tools that support the use and manipulation of these languages. E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J <ref> [34] </ref>, and Conceptual advances in systems architecture and models. E.g. metaob ject protocols [29], knowledge representation [10], patterns [19], compositional architectures [44], agent technology [4], and specification and proof models like UNITY [8]. Our conceptual models, languages, and tools continue to evolve, becoming more complete and capable everyday.
Reference: [35] <author> J.D. Olson and R.E. Kent. </author> <title> Conceptual knowledge markup language, an XML application. Unpublished presentation, given at the XML Developers Day, August 21, </title> <booktitle> 1997, </booktitle> <address> Montreal Canada, </address> <month> August </month> <year> 1997. </year>
Reference: [36] <institution> Ontology Markup Language (OML) DTD. </institution> <address> http://asimov.eecs.wsu. edu/WAVE/Ontologies/OML/OML-DTD.html. </address>
Reference-contexts: An example of such a system is in the form of ontology markup references with the Ontology Markup Language <ref> [36] </ref> within an object description, as in CKML. Consider the following classes.
Reference: [37] <author> Lawrence C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover, </title> <booktitle> volume 828 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Examples include: Programming, specification, logic, and modeling languages. E.g. Java [24], VDM [5], HOL [23], and UML [40], respectively, The tools that support the use and manipulation of these languages. E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle <ref> [37] </ref>, and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models. E.g. metaob ject protocols [29], knowledge representation [10], patterns [19], compositional architectures [44], agent technology [4], and specification and proof models like UNITY [8].
Reference: [38] <author> Benjamin C. Pierce. </author> <title> Basic Category Theory for Computer Scientists. </title> <booktitle> Foundations of Computer Science. </booktitle> <publisher> The MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: The tools of the trade. There are many existing tools, theoretical and practical, that are used to understand complex systems. Theories come in many forms, ranging from simple type theory [2] to the extremely complex, and some would argue, unapproachable object [1] and category <ref> [38] </ref> theories. Practical tools, all of which are direct or indirect reifications of theoretical work, are either concrete (programmatic) or conceptual. Examples include: Programming, specification, logic, and modeling languages. E.g. <p> 5 (which are still under development), we will motivate what kinds are and their uses through the presentation of a few examples. 3 There are several additional mathematical meta-theories above algebraic group theory and analysis: model theory [22] can describe how such theories relate to each other, and category theory <ref> [3, 38] </ref> can describe how such characterizations of theories relate to one other. 4 Three random examples of concepts: a class in the last model you designed, the relationship between you and your bank, and the first idea you had when you woke up this morning. 5 Details are forthcoming in
Reference: [39] <author> Walter Rudin. </author> <title> Principles of Mathematical Analysis. </title> <publisher> McGraw-Hill, Inc., </publisher> <year> 1976. </year>
Reference-contexts: Metalevel. A level is a frame of reference, or a level of abstraction, within a model. Excellent examples of metalevels are found in mathematics. For example, consider a simple system Z+, defined as addition on integers. Several abstractions of this system exist: algebraic group theory [17] and analysis <ref> [39] </ref> being the obvious abstractions. These two theories can completely describe, in a succinct, complete, and accurate fashion, everything there is to know about Z+. They are, as universes of concepts, a metalevel above the level at which Z+ rests. 3 Examples of Meta.
Reference: [40] <author> Jim Rumbaugh, Ivar Jacobson, and Grady Booch. </author> <title> Unified Modeling Language Reference Manual. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1997. </year>
Reference-contexts: Practical tools, all of which are direct or indirect reifications of theoretical work, are either concrete (programmatic) or conceptual. Examples include: Programming, specification, logic, and modeling languages. E.g. Java [24], VDM [5], HOL [23], and UML <ref> [40] </ref>, respectively, The tools that support the use and manipulation of these languages. E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models.
Reference: [41] <author> J.J. Sarbo. </author> <title> Building sub-knowledge bases using concept lattices. </title> <journal> Computer Journal, </journal> <volume> 39(10) </volume> <pages> 868-875, </pages> <year> 1996. </year>
Reference-contexts: CKML is a specification language for the conceptual representation and analysis of networked resources. It is fully integrated with the Web and has a formal grounding in knowledge representation and theory work of many researchers (a few references include <ref> [6, 41, 45, 46] </ref>). Examples of Usage. One particularly simple but compelling motivation for the use of kind is found in the domain of what I call semantic component coupling. More examples that fall in this domain can be found in [31]. Semantic Components: Problem Summary.
Reference: [42] <author> Mary Shaw. </author> <title> Procedure calls are the assembly language of system interconnection: Connectors deserve first-class status. </title> <booktitle> In Proceedings of the Workshop on Studies of Software Design, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Many existing conceptual models and systems view these two constructs as distinct. My claim is that they are not: relationships are a specialization of entities. Relationships come in several forms, inheritance [12], connectors <ref> [20, 42] </ref>, and aggregation [7] being the most common. All of these constructs can be described and utilized as first-class entities. They can be formally modeled, specialized, applied to other constructs, and refined. Individual relationships also have relationships to each other, thus they are a recursive structure.
Reference: [43] <author> Edward Swanstrom. </author> <title> Creating Agile Organizations with the OOCL Method. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1998. </year>
Reference-contexts: Fixed frames of reference are provided by conceptual models and languages because the complexity of representational abstractions grows very quickly. (Examples of such systems include metaobject protocols and meta-aware modeling languages/systems like UML, Catalysis [16], and OOCL <ref> [43] </ref>.) These finite frame of reference boundaries are artificial constructs. Conceptual metalevels exist independent of relations; only ground concepts are idempotent. Meaning, we should be able to define as many conceptual levels as 5 necessary to completely and accurately describe a concept or relation.
Reference: [44] <author> Clemens Szyperski. </author> <title> Component Software: Beyond Object-Oriented Programming. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1997. </year>
Reference-contexts: E.g. Various IDEs like JDE [33], specification checkers like IFAD [25], theorem provers and proof assistants like Isabelle [37], and modeling tools like Together/J [34], and Conceptual advances in systems architecture and models. E.g. metaob ject protocols [29], knowledge representation [10], patterns [19], compositional architectures <ref> [44] </ref>, agent technology [4], and specification and proof models like UNITY [8]. Our conceptual models, languages, and tools continue to evolve, becoming more complete and capable everyday.
Reference: [45] <author> P.E. van der Vet and N.J.I. </author> <title> Mars. Bottom-up construction of ontologies. </title> <journal> IEEE Transactions On Knowledge And Data Engineering, </journal> <volume> 10(4) </volume> <pages> 513-526, </pages> <year> 1998. </year>
Reference-contexts: CKML is a specification language for the conceptual representation and analysis of networked resources. It is fully integrated with the Web and has a formal grounding in knowledge representation and theory work of many researchers (a few references include <ref> [6, 41, 45, 46] </ref>). Examples of Usage. One particularly simple but compelling motivation for the use of kind is found in the domain of what I call semantic component coupling. More examples that fall in this domain can be found in [31]. Semantic Components: Problem Summary.
Reference: [46] <author> R. Wille. </author> <title> Conceptual graphs and formal concept analysis. Conceptual Structures: </title> <journal> Fulfilling Peirce's Dream, </journal> <volume> 1257 </volume> <pages> 290-303, </pages> <year> 1997. </year>
Reference-contexts: CKML is a specification language for the conceptual representation and analysis of networked resources. It is fully integrated with the Web and has a formal grounding in knowledge representation and theory work of many researchers (a few references include <ref> [6, 41, 45, 46] </ref>). Examples of Usage. One particularly simple but compelling motivation for the use of kind is found in the domain of what I call semantic component coupling. More examples that fall in this domain can be found in [31]. Semantic Components: Problem Summary. <p> I am working to rigorously leverage and extend existing applicable models (e.g. specification and proof models like UNITY [8]) and theories (classical type theory [2], object theory [1], category theory [3], and knowledge representation theory <ref> [46] </ref>, especially in the context of software engineering [21]) in application to the problem of distributed, collaborative, chaotic, dynamic software specification, construction, and reuse.
References-found: 46

