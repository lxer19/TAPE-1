URL: http://www.cs.umd.edu/users/hjs/cmsc725/point.ps.gz
Refering-URL: http://www.cs.umd.edu/users/hjs/cmsc725/
Root-URL: http://www.cs.umd.edu
Title: Multidimensional Point Data 1  
Author: Hanan Samet 
Note: 1 Copyright c fl1998 by Hanan Samet. These notes may not be reproduced by any means (mechanical, electronic, or any other) without the express written permission of Hanan Samet.  
Address: College Park, Maryland 20742  
Affiliation: Computer Science Department University of Maryland  
Date: Summer 1998  Samet  September 10, 1998  
Pubnum: CMSC 420  
Abstract-found: 0
Intro-found: 1
Reference: <editor> Each reference is followed by a key word(s). </editor> <title> It is also followed by a list of the sections in which it is referenced. The format is D or A followed by the section number. D corresponds to this book while A correspond to [123]. D.P and A.P denote the appropriate preface and L denotes the appendix describing the pseudo-code language. All references that are cited in the solutions to the exercises are associated with the section in which the exercise is found. </title>
Reference: [1] <author> S. K. Abdali and D. S. Wise. </author> <title> Experiments with quadtree representation of matrices. </title> <booktitle> In Proceedings of the International Symposium on Symbolic and Algebraic Computation, </booktitle> <institution> page ?, Rome, </institution> <month> July </month> <year> 1988. </year> <note> (Also University of Indiana Computer Science Technical Report No. 241). [matrices] D.4.2, D.8 </note>
Reference-contexts: Assume a search space of <ref> [0; 1] </ref> 2 and a rectangular search region of sides of length x and y where x and y are in [0,1]. <p> Bentley and Stanat [15] also define the concept of overwork of a search algorithm as the difference between the number of records visited and the number of records in the search region. Assume a search space of <ref> [0; 1] </ref> 2 with N records and a square search region of side length x where x is in [0,1]. Compare 30 the amount of overwork for an inverted list (i.e., inverted file) and a perfect point quadtree. 4. <p> The MX quadtree is used in a number of applications. It can serve as the basis of a quadtree matrix manipulation system (see Exercises 6-10). The goal is to take advantage of the sparseness of matrices to achieve space and execution time efficiencies (e.g., <ref> [1, 148, 149] </ref>.
Reference: [2] <author> D. J. Abel and J. L. Smith. </author> <title> A data structure and algorithm based on a linear key for a rectangle retrieval problem. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 24(1) </volume> <pages> 1-13, </pages> <month> October </month> <year> 1983. </year> <note> [rectangles] D.6, A.2.1.1 </note>
Reference-contexts: In fact, this is the basis of a linear index into a two-dimensional spatial database developed by Morton [94] and refined later by a number of other researchers including Gar 65 gantini [51] and Abel and Smith <ref> [2] </ref>. As we can see, bit interleaving is quite a powerful an idea. In the rest of this section, we give a brief historical background of its development and mention an interesting application. It is difficult to determine the origin of the notion of bit interleaving.
Reference: [3] <author> G. M. Adel'son-Vel'ski i and E. M. Landis. </author> <title> An algorithm for the organization of information. </title> <journal> Doklady Akademii Nauk SSSR, </journal> <volume> 146 </volume> <pages> 263-266, </pages> <year> 1962. </year> <journal> (English translation in Soviet Math. </journal> <volume> Doklady </volume> 3:1259-1263, 1962). [general] D.5.1 
Reference-contexts: As such, they can not be updated efficiently and this has led Vaishnavi to propose a relaxation of the balancing criterion by generalizing the height balancing constraint for a height-balanced tree (also known as an AVL tree <ref> [3, 5] </ref>). This is done by storing data in a nested sequence of binary trees so that each nonleaf node P tests a particular key J . Each nonleaf node P has three sons.
Reference: [4] <author> C. Aggarwal, J. Wolf, P. Yu, and M. Epelman. </author> <title> The s-tree: an efficient index for multidimensional objects. </title> <editor> In M. Scholl and A. Voisard, editors, </editor> <booktitle> Advances in Spatial Databases Fifth International Symposium, SSD'97, </booktitle> <pages> pages 350-373, </pages> <address> Berlin, Germany, </address> <month> July </month> <year> 1997. </year> <note> (Also Springer-Verlag Lecture Notes in Computer Science 1262). [spatial data structures; object hierarchies; R-trees; rectangles] D.7.1 </note>
Reference-contexts: Of course, once this is done, the structure no longer satisfies the property that all leaf nodes are at the same level. Thus the result is somewhat like the S-tree <ref> [4] </ref> (see Section ?? of Chapter ??) which is a variant of the R-tree designed to deal with skewed data. Exercises 1.
Reference: [5] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year> <title> [general] D.5.1, A.P, </title> <publisher> A.4.5 </publisher>
Reference-contexts: As such, they can not be updated efficiently and this has led Vaishnavi to propose a relaxation of the balancing criterion by generalizing the height balancing constraint for a height-balanced tree (also known as an AVL tree <ref> [3, 5] </ref>). This is done by storing data in a nested sequence of binary trees so that each nonleaf node P tests a particular key J . Each nonleaf node P has three sons.
Reference: [6] <author> D. P. Anderson. </author> <title> Techniques for reducing pen plotting time. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 2(3) </volume> <pages> 197-212, </pages> <month> July </month> <year> 1983. </year> <title> [points] D.4.2, </title> <publisher> A.6.2 </publisher>
Reference-contexts: The PR quadtree is used in a number of applications. Anderson <ref> [6] </ref> makes use of a PR quadtree (termed a uniform quadtree) to store endpoints of line segments to be drawn by a plotter. The goal is to reduce pen plotting time by choosing the line segment to be output next whose endpoint is closest to the current pen position.
Reference: [7] <author> D. Avis. </author> <title> A survey of heuristics for the weighted matching problem. </title> <journal> Networks, </journal> <volume> 13(4) </volume> <pages> 475-493, </pages> <month> Winter </month> <year> 1983. </year> <title> [points] D.8 </title>
Reference: [8] <author> J. J. Bartholdi III and L. K. Platzman. </author> <title> A fast heuristic based on spacefilling curves for minimum-weight matching in the plane. </title> <journal> Information Processing Letters, </journal> <volume> 17(4) </volume> <pages> 177-180, </pages> <month> November </month> <year> 1983. </year> <title> [points; minimal weight matching; space filling curves] D.8 </title>
Reference: [9] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Communications of the ACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <month> September </month> <year> 1975. </year> <title> [points] D.1, </title> <address> D.5, D.5.1, D.6, D.8, A.1.3 </address>
Reference-contexts: They are discussed in Section 4. As the dimensionality of the space increases, each level of decomposition of the quadtree results in many new cells since the fanout value of the tree is high (i.e., 2 d ). This is alleviated by making use of a k-d tree <ref> [9] </ref>. This is a binary tree where at each level of the tree, we subdivide along just one of the attributes. This is discussed in Section 5. <p> This is alleviated by making use of variants of a k-d tree <ref> [9] </ref>. Originally, in the term k-d tree, k denotes the dimensionality of the space that is being represented. However, in many applications, the convention is to let the value of d denote the dimension, and this is the practice we have chosen to follow here. <p> In the definition of a discriminator, the problem of equality of particular key values is resolved by stipulating that records which have the same value for a particular key are in the right subtree. As an alternative, Bentley <ref> [9] </ref> defines a node in terms of a superkey. Given a node P , let K 0 (P ), K 1 (P ), etc., refer to its d keys. <p> The only difference from the binary search tree is the fact that we compare x coordinate values at the root and at even depths of the tree, and y coordinate values at odd depths of the tree. Bentley <ref> [9] </ref> shows that given N points, the average cost of inserting, as well as searching for (i.e., a point query), a node is O (log 2 N ). <p> As in the case of the point quadtree, the amount of work expended in building a k-d tree is equal to the total path length (TPL) of the tree as it reflects the cost of searching for all of the elements. Bentley <ref> [9] </ref> shows that the total path length of a k-d tree built by inserting N points in random order into an initially empty tree is O (N log 2 N ) and, thus, the average cost of inserting a node is O (log 2 N ). <p> Letting TPL (T ) denote the total path length of tree T , it can be shown that the sum of the subtree sizes of a tree is TPL (T )+N (see Exercise 4 in Section 4.1.2). Bentley <ref> [9] </ref> proves that the TPL of a k-d tree built by inserting N points in a random order is O (N log 2 N ), which means that the average cost of deleting a randomly selected node from a randomly built k-d tree has an upper bound of O (log 2 <p> Note that, unlike the point quadtree, a complete binary k-d tree can always be constructed (see the optimized k-d tree of Bentley <ref> [9] </ref> discussed in Section 5.1.1). In general, for arbitrary d, t n is O (d N 11=d ). Partial range queries can be handled in the same way as range searching. <p> Show how you would use procedure KD_REGION_SEARCH of Exercise 2 to respond to a partial match query. 6. Given a complete k-d tree of N nodes where N = 2 dh 1 and all leaf nodes appear at depth d h 1, prove Bentley's <ref> [9] </ref> result that, in the worst case, O (N (dt)=d ) nodes are visited in performing a partial match query with t out of d keys specified. 7. <p> This will reduce the TPL and thereby make subsequent searching operations faster. There are two approaches to reduce the TPL: static and dynamic. They are discussed below. The static approach assumes that all the data points are known a priori. Bentley <ref> [9] </ref> proposes an optimized k-d tree, which is constructed in the same manner as the optimized point quadtree of Section 4.1.1. In this case, the partition lines must pass through the data points and still cycle through the various axes in a fixed and constant order. <p> In the rest of this section, we give a brief historical background of its development and mention an interesting application. It is difficult to determine the origin of the notion of bit interleaving. The first mention of it was by Peano [112]. Bentley <ref> [9] </ref> attributes bit interleaving to McCreight as a way to use B-trees [22] to represent multidimensional data. The resulting B-tree is called an N-tree by White [144], while Orenstein and Merrett [105] term it a zkd Btree.
Reference: [10] <author> J. L. Bentley. </author> <title> Decomposable searching problems. </title> <journal> Information Processing Letters, </journal> <volume> 8(5) </volume> <pages> 244-251, </pages> <month> June </month> <year> 1979. </year> <title> (see 1980 article with the same name). [points] D.1, </title> <publisher> D.2 </publisher>
Reference-contexts: In essence, the endpoints of the desired range for one key can be located very efficiently by using its corresponding sorted list. For example, this could be done by using a binary search with the aid of data structures such as the range tree <ref> [10, 13] </ref> as discussed in Section 2. This resulting list is then searched by brute force. The average search has been shown in [48] to be of O (N 11=d ), under certain assumptions. <p> Prove that the average time for the range query is O (F 3 d ) where F is the number of records found and 3 d is the number of cells that must be accessed. 6 2 Range Trees The multidimensional range tree of Bentley and Maurer <ref> [10, 13] </ref> is an asymptotically faster search structure compared to the point quadtree and the k-d tree; however, it has significantly higher storage requirements. It stores points and is designed to detect all points that lie in a given range.
Reference: [11] <author> J. L. Bentley. </author> <title> Multidimensional divide-and-conquer. </title> <journal> Communications of the ACM, </journal> <volume> 23(4) </volume> <pages> 214-229, </pages> <month> April </month> <year> 1980. </year> <title> [points] D.8 </title>
Reference: [12] <author> J. L. Bentley and J. H. Friedman. </author> <title> Data structures for range searching. </title> <journal> ACM Computing Surveys, </journal> <volume> 11(4) </volume> <pages> 397-409, </pages> <month> December </month> <year> 1979. </year> <title> [points] D.1, </title> <publisher> A.1.3 </publisher>
Reference-contexts: This is analogous to a compressed bitmap representation. The compressed bitmap representation forms the basis of the fixed-grid method <ref> [12, 73] </ref>. It partitions the space from which the data is drawn into rectangular cells by overlaying it with a grid. Each grid cell c contains a pointer to another structure (e.g., a list) which contains the set of points that lie in c.
Reference: [13] <author> J. L. Bentley and H. A. Mauer. </author> <title> Efficient worst-case data structures for range searching. </title> <journal> Acta Informat-ica, </journal> <volume> 13 </volume> <pages> 155-168, </pages> <year> 1980. </year> <note> [rectangles] D.1, D.2 </note>
Reference-contexts: In essence, the endpoints of the desired range for one key can be located very efficiently by using its corresponding sorted list. For example, this could be done by using a binary search with the aid of data structures such as the range tree <ref> [10, 13] </ref> as discussed in Section 2. This resulting list is then searched by brute force. The average search has been shown in [48] to be of O (N 11=d ), under certain assumptions. <p> Prove that the average time for the range query is O (F 3 d ) where F is the number of records found and 3 d is the number of cells that must be accessed. 6 2 Range Trees The multidimensional range tree of Bentley and Maurer <ref> [10, 13] </ref> is an asymptotically faster search structure compared to the point quadtree and the k-d tree; however, it has significantly higher storage requirements. It stores points and is designed to detect all points that lie in a given range.
Reference: [14] <author> J. L. Bentley and J. B. Saxe. </author> <title> Decomposable searching problems I: static-to-dynamic transformation. </title> <journal> Journal of Algorithms, </journal> <volume> 1(4) </volume> <pages> 301-358, </pages> <month> December </month> <year> 1980. </year> <title> [points] D.8 </title>
Reference: [15] <author> J. L. Bentley and D. F. Stanat. </author> <title> Analysis of range searches in quad trees. </title> <journal> Information Processing Letters, </journal> <volume> 3(6) </volume> <pages> 170-173, </pages> <month> July </month> <year> 1975. </year> <title> [range queries; quad trees; search trees; points] D.4.1 133 </title>
Reference-contexts: Exercises 1. Write a procedure PT_REGION_SEARCH which performs a region search for a circular region in a point quadtree. Repeat for a rectangular region. 2. Bentley and Stanat <ref> [15] </ref> define a perfect point quadtree of height m as a point quadtree that (1) has 4 i nodes at level m i where the root is at level m, 0 i m 1, and (2) every node is at the centroid of the finite space spanned by its subtrees. <p> Find the expected number of nodes that are visited in a perfect point quadtree of height m when a region search procedure is applied to the above search region. 3. Bentley and Stanat <ref> [15] </ref> also define the concept of overwork of a search algorithm as the difference between the number of records visited and the number of records in the search region.
Reference: [16] <author> J. L. Bentley, D. F. Stanat, and E. Hollins Williams Jr. </author> <title> The complexity of finding fixed-radius near neighbors. </title> <journal> Information Processing Letters, </journal> <volume> 6(6) </volume> <pages> 209-212, </pages> <month> December </month> <year> 1977. </year> <title> associative searching; nearest neighbors; points D.1, </title> <publisher> D.4.1 </publisher>
Reference-contexts: When the width of each grid cell is twice the search radius for a rectangular range query 8 , then the average search time is O (F 2 d ) where F is the number of points that have been found <ref> [16] </ref>. The factor 2 d is the maximum number of cells that must be accessed when the search rectangle is permitted to overlap more than one cell. <p> Second, the total path length of the tree after deletion using Samet's method [121] decreases slightly, whereas when Finkel and Bentley's method [37] is used, the total path length increases significantly. This data is important because it correlates with the effective search time (see also <ref> [16, 84] </ref>). In other words, the smaller the total path length, the faster a node can be accessed. <p> Nearest neighbor queries as well as k-nearest neighbor queries are also feasible [59]. The cost of search in a point quadtree has been studied by Bentley, Stanat, and Williams <ref> [16] </ref> (see Exercise 2) and Lee and Wong [84]. In particular, Lee and Wong show that in the worst case, range searching in a complete two-dimensional point quadtree takes O (2 N 1=2 ) time.
Reference: [17] <author> T. Bestul. </author> <title> Parallel paradigms and practices for spatial data. </title> <type> PhD thesis, </type> <institution> University of Maryland, College Park, MD, </institution> <month> April </month> <year> 1992. </year> <title> [regions; points; lines; parallelism] D.5 </title>
Reference-contexts: Therefore, we can characterize the k-d tree as a superior serial data structure and the quadtree as a superior parallel data structure. For a discussion of the use of quadtrees in a multiprocessor environment, see Linn [86], while Hoel [60] and Bestul <ref> [17] </ref> discuss their use in a parallel environment. The idea of replacing a test of d attribute values by a sequence of d tests is applicable to both point quadtrees and trie-based quadtrees, although it is applied more often to point quadtrees.
Reference: [18] <author> W. A. Burkhard. </author> <title> Interpolation-based index maintenance. </title> <journal> BIT, </journal> <volume> 23(3) </volume> <pages> 274-294, </pages> <year> 1983. </year> <title> [points] D.7.2 </title>
Reference-contexts: However, reversed bit concatenation has the drawback of favoring some of the keys over the others, and thus we do not discuss its use further here. It is interesting to note that the use of reversed bit interleaving with linear hashing seems to have been proposed independently by Burkhard <ref> [18] </ref> (who terms it shuffle order), Orenstein [104], and Ouksel and Scheuer-mann [109] (see also [135]). This combination is applied to range searching by Burkhard [18] and Orenstein and Merrett [105], although they each used different search algorithms. <p> It is interesting to note that the use of reversed bit interleaving with linear hashing seems to have been proposed independently by Burkhard <ref> [18] </ref> (who terms it shuffle order), Orenstein [104], and Ouksel and Scheuer-mann [109] (see also [135]). This combination is applied to range searching by Burkhard [18] and Orenstein and Merrett [105], although they each used different search algorithms. Now, let us briefly review the mechanics of linear hashing and then give an example of its use with multidimensional data. Recall that a file implemented using linear hashing has both primary and overflow buckets.
Reference: [19] <author> B. Chazelle and L. J. Guibas. Fractional cascading: I. </author> <title> a data structuring technique. </title> <journal> Algorithmica, </journal> <volume> 1(2) </volume> <pages> 133-162, </pages> <year> 1986. </year> <note> (Also Systems Research Center Technical Report 12, </note> <month> June </month> <year> 1986). </year> <title> [general; binary search; B-tree; iterative search; multiple look-up; range query; dynamization of data structures] D.7.1 </title>
Reference-contexts: In fact, the guards are always associated with the directory node that corresponds to the nearest common ancestor of the directory nodes with whom they span some common portion of the underlying space. This is very similar to the notion of fractional cascading <ref> [19, 20] </ref> (see Section ?? of Chapter ??) which is used in many computational geometry applications.
Reference: [20] <author> B. Chazelle and L. J. Guibas. </author> <title> Fractional cascading: II. </title> <journal> applications. Algorithmica, </journal> <volume> 1(2) </volume> <pages> 163-191, </pages> <year> 1986. </year> <note> (Also Systems Research Center Technical Report 12, </note> <month> June </month> <year> 1986). </year> <title> [general; fractional cascading; iterative search; multiple look-up; binary search; B-tree; range query; dynamization of data structures] D.7.1 </title>
Reference-contexts: In fact, the guards are always associated with the directory node that corresponds to the nearest common ancestor of the directory nodes with whom they span some common portion of the underlying space. This is very similar to the notion of fractional cascading <ref> [19, 20] </ref> (see Section ?? of Chapter ??) which is used in many computational geometry applications.
Reference: [21] <author> Y. Cohen, M. S. Landy, and M. Pavel. </author> <title> Hierarchical coding of binary images. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 7(3) </volume> <pages> 284-298, </pages> <month> May </month> <year> 1985. </year> <title> [regions; adaptive algorithms for dynamic image sequences] D.5.2, </title> <address> A.1.3, A.2.2, A.8 </address>
Reference-contexts: The generalized k-d trie represents point data in a manner analogous to that used for region data by the AHC (Adaptive Hierarchical Coding) <ref> [21] </ref> or generalized bintree described in Section ?? of Chapter ??.
Reference: [22] <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys, </journal> <volume> 11(2) </volume> <pages> 121-137, </pages> <month> June </month> <year> 1979. </year> <title> [general; B-tree;B* -tree; B+ -tree; file organization; index] D.1, </title> <address> D.6, A.2.1, A.2.1.1, A.2.1.4, A.4.2.3 </address>
Reference-contexts: This problem is resolved in two ways. The first way is to retain the use of the tree access structure, say T , and also aggregate the internal (i.e., nonleaf) nodes of T into buckets thereby forming a multiway tree in the spirit of a B-tree <ref> [22] </ref> (see Section ?? in Chapter ??). The buckets whose contents are internal nodes of T correspond to subtrees of T and their fanout value corresponds to the sum of the number of possible branches at the deepest level of each of the subtrees. <p> It is difficult to determine the origin of the notion of bit interleaving. The first mention of it was by Peano [112]. Bentley [9] attributes bit interleaving to McCreight as a way to use B-trees <ref> [22] </ref> to represent multidimensional data. The resulting B-tree is called an N-tree by White [144], while Orenstein and Merrett [105] term it a zkd Btree. Note that the result is different from the k-d-B-tree of Robinson [116] (see Section 7.1.1).
Reference: [23] <author> S. P. Dandamudi and P. G. Sorenson. </author> <title> An empirical performance comparison of some variations of the k-d-tree and BD-tree. </title> <journal> International Journal of Computer and Information Sciences, </journal> <volume> 14(3) </volume> <pages> 135-159, </pages> <month> June </month> <year> 1985. </year> <title> [points] D.5.2 </title>
Reference-contexts: For an empirical performance comparison of the BD tree with some variations of the k-d tree, see Dandamudi and Sorenson <ref> [23] </ref>. Exercises 1. Formulate k-d tree variant of a matrix representation analogous to the MX quadtree (discussed in Section 4.2.1) and term it an MX k-d tree or an MX bintree. Give procedures MX_KD_INSERT and MX_KD_ DELETE to insert and delete data points in an MX bintree. 2.
Reference: [24] <author> S. P. Dandamudi and P. G. Sorenson. </author> <title> Algorithms for BD-trees. </title> <journal> Software Practice and Experience, </journal> <volume> 16(12) </volume> <pages> 1077-1096, </pages> <month> December </month> <year> 1986. </year> <title> [points; multidimensional data structures; file structures; databases; multikey searching; partial match query; range query] D.5.2, </title> <publisher> D.8 </publisher>
Reference-contexts: It should be clear that the BD tree can be used for data of arbitrary dimensionality. For more details on how to implement basic operations such as insertion and deletion, as well as answering exact match, partial match, 61 and range queries for BD trees, see Dandamudi and Sorenson <ref> [24] </ref>. For an empirical performance comparison of the BD tree with some variations of the k-d tree, see Dandamudi and Sorenson [23]. Exercises 1.
Reference: [25] <author> F. De Coulon and O. Johnsen. </author> <title> Adaptive block scheme for source coding of black-and-white facsimile. </title> <journal> Electronics Letters, </journal> <volume> 12(3) </volume> <pages> 61-62, </pages> <month> February </month> <year> 1976. </year> <note> (Also erratum Electronics Letters 12(6):152, </note> <month> March 18, </month> <year> 1976). </year> <title> [regions] D.4.2, </title> <publisher> A.2.2 </publisher>
Reference-contexts: The region quadtree formulation of Hunter and Steiglitz [61, 63] (see Sections ?? of Chapter ?? and ?? of Chapter ??) utilizes a three color variant of the MX quadtree to represent digitized simple polygons. De Coulon and Johnsen <ref> [25] </ref> describe the use of the MX quadtree in the coding of black and white facsimiles for efficient transmission of images. Exercises In the following exercises assume that each point in an MX quadtree is implemented as a record of type node containing five fields.
Reference: [26] <author> L. DeFloriani, P. Marzano, and E. Puppo. </author> <title> Multiresolution models for topographic surface description. </title> <journal> The Visual Computer, </journal> <volume> 12(7) </volume> <pages> 317-345, </pages> <month> August </month> <year> 1996. </year> <month> D.7.1 </month>
Reference-contexts: Notice that what is really taking place is that the search proceeds by levels in the decomposition hierarchy, even though it may appear to be backtracking in the directory hierarchy. For example, when searching for point x in the BV-tree of Figure 67a, we immediately make use 37 See <ref> [26] </ref> for a related approach to triangular decompositions of surfaces such as terrain data. 93 of the guards a 0 and a 1 in our search of region b 2 . We see that these three regions have quite a bit in common.
Reference: [27] <author> R. O. Duda and P. E. Hart. </author> <title> Pattern Classification and Scene Analysis. </title> <publisher> Wiley Interscience, </publisher> <address> New York, </address> <year> 1973. </year> <title> [general] D.5.1 </title>
Reference-contexts: O'Rourke [106, 107] also uses the bucket adaptive k-d tree, calling it a Dynamically Quantized Space (DQS), for cluster detection as well as for multidimensional histogramming to aid in focusing the Hough Transform (e.g., <ref> [27] </ref>). The DQP (denoting Dynamically Quantized Pyramid) [107, 128] is closely related to the DQS in the sense that it is also used in the same application.
Reference: [28] <author> H. Edelsbrunner. </author> <title> A note on dynamic range searching. </title> <journal> Bulletin of the EATCS, </journal> (15):34-40, October 1981. [rectangles] D.1, D.3 
Reference-contexts: This is discussed in Section 2. The priority search tree [92] forms the basis of another solution known as the range priority tree <ref> [28] </ref> which is also related to the range tree. The priority search tree makes use of a binary search tree whose leaf nodes form a range tree for one dimension while its internal nodes form a heap for the remaining dimension. Such methods are discussed in Section 3. <p> However, since there is no point associated with F, processing ceases as this means that all nodes in F's subtrees have already been examined. Thus the result is that points (60,75) and (80,65) are in the range ([35:80],[50:1]). Edelsbrunner <ref> [28] </ref> introduces a variation on the priority search tree, which we term a range priority tree, to obtain an O (log 2 N + F ) algorithm for range searching in a two-dimensional space.
Reference: [29] <author> G. Evangelidis, D. Lomet, and B. Salzberg. </author> <title> Node deletion in the hB -tree. </title> <type> Technical Report NU-CCS-94-04, </type> <institution> Northeastern University, </institution> <address> Boston, MA, </address> <year> 1994. </year> <title> [indexing; hB-tree; deletion; B-trees; multi-attribute access methods; spatial access methods; concurrency, recovery] D.7.1 </title>
Reference-contexts: The greater the number of such splits that take place, the more complicated the posting situation becomes. In fact, this complexity was later realized to cause a flaw in the original split and post algorithm for the hB-tree <ref> [29, 119] </ref> and was subsequently corrected as part of the hB -tree [30, 31]. (a) A B B x extA y BA hB-tree node and whose overflow is resolved by partitioning it thereby creating two hB-tree nodes having (c) and (d) as their generalized k + -d trees.
Reference: [30] <author> G. Evangelidis, D. Lomet, and B. Salzberg. </author> <title> The hB -tree: A modified hb-tree supporting concurrency, recovery and node consolidation. </title> <editor> In U. Dayal, P. M. D. Gray, and S. Nishio, editors, </editor> <booktitle> Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year> <title> [indexing; B-trees; multi-attribute access methods; spatial access methods; concurrency, recovery] D.7.1 </title>
Reference-contexts: Write a procedure, LSD_DELETE, to delete a point from an LSD tree. 3. Write a procedure, LSD_POINT_QUERY, to perform a point query in an LSD tree. 4. Write a procedure, LSD_RANGE_QUERY, to perform a range query in an LSD tree. 7.1.3 hB-trees The hB-tree <ref> [89, 30, 31] </ref> overcomes the low storage utilization drawback of the LSD tree by removing the requirement that the portions of the underlying space spanned by the region pages resulting from the split are hyper-rectangles. <p> In fact, this complexity was later realized to cause a flaw in the original split and post algorithm for the hB-tree [29, 119] and was subsequently corrected as part of the hB -tree <ref> [30, 31] </ref>. (a) A B B x extA y BA hB-tree node and whose overflow is resolved by partitioning it thereby creating two hB-tree nodes having (c) and (d) as their generalized k + -d trees. <p> In general, this is done by traversing the generalized k + -d tree from the root and discarding nonleaf nodes until neither of the sons are external markers. However, in the hB -tree <ref> [30, 31] </ref>, which is an adaptation of the hB-tree designed to provide better support for recovery and concurrency, such a truncation is not performed. This is because in the hB -tree the external markers are replaced by sibling pointers whose value provides useful information.
Reference: [31] <author> G. Evangelidis, D. Lomet, and B. Salzberg. </author> <title> The hB -tree: A multi-attribute index supporting concur-rency, recovery and node consolidation. </title> <journal> VLDB Journal, </journal> <volume> 6(1) </volume> <pages> 1-25, </pages> <year> 1997. </year> <title> [indexing; B-trees; multi-attribute access methods; spatial access methods; concurrency, recovery] D.7.1 </title>
Reference-contexts: Write a procedure, LSD_DELETE, to delete a point from an LSD tree. 3. Write a procedure, LSD_POINT_QUERY, to perform a point query in an LSD tree. 4. Write a procedure, LSD_RANGE_QUERY, to perform a range query in an LSD tree. 7.1.3 hB-trees The hB-tree <ref> [89, 30, 31] </ref> overcomes the low storage utilization drawback of the LSD tree by removing the requirement that the portions of the underlying space spanned by the region pages resulting from the split are hyper-rectangles. <p> In fact, this complexity was later realized to cause a flaw in the original split and post algorithm for the hB-tree [29, 119] and was subsequently corrected as part of the hB -tree <ref> [30, 31] </ref>. (a) A B B x extA y BA hB-tree node and whose overflow is resolved by partitioning it thereby creating two hB-tree nodes having (c) and (d) as their generalized k + -d trees. <p> In general, this is done by traversing the generalized k + -d tree from the root and discarding nonleaf nodes until neither of the sons are external markers. However, in the hB -tree <ref> [30, 31] </ref>, which is an adaptation of the hB-tree designed to provide better support for recovery and concurrency, such a truncation is not performed. This is because in the hB -tree the external markers are replaced by sibling pointers whose value provides useful information.
Reference: [32] <author> V. N. Faddeeva. </author> <title> Computational Methods of Linear Algebra. </title> <publisher> Dover, </publisher> <address> New York, </address> <year> 1959. </year> <note> [general] D.8 134 </note>
Reference: [33] <author> R. Fagin, J. Nievergelt, N. Pippenger, and H. R. </author> <title> Strong. Extendible hashing A fast access method for dynamic files. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(3) </volume> <pages> 315-344, </pages> <month> September </month> <year> 1979. </year> <title> [points; hashing; extendible hashing; searching; index; file organization; radix search; access method; B-tree; trie; directory; external hashing] D.4.2, </title> <publisher> D.7.2 </publisher>
Reference-contexts: (52,10) Mobile (62,77) Toronto (82,65) Buffalo (85,15) Atlanta (90,5) Miami (a) Atlanta Miami Mobile--Denver- Omaha Chicago Toronto Buffalo - (0,100) (100,100) y data of Figure 1 for bucket size 2: (a) the resulting partition of space, and (b) the tree representation. been applied by Fagin et al. to extendible hashing <ref> [33] </ref>, Flajolet and Puech [38] to tries, Regnier to the grid file (see Section 7.2.1) [113], and Tamminen to EXCELL (see Section 7.2.2) [133]. The advantage of the population model is that dependencies between various populations and the steady state can be determined with relative ease. <p> This variation is a multidimensional counterpart of the directory used in extendible hashing <ref> [33] </ref> and is the basis of EXCELL [131] (see Section 7.2.2). Its advantage is that a refinement of the grid partition will only cause a change in the structure of the directory if the shortest interval is split, in which case the grid directory will double in size. <p> In essence, use of linear hashing enables the hash table to grow by just one hash bucket instead of doubling the number of hash buckets as is the case with some hashing methods such as EXHASH <ref> [33] </ref>, the extendible hashing function that forms the basis of EXCELL [132]. Although linear hashing has been described in Section ?? of Chapter ??, we review its basic principles here so that our discussion of its adaptation to multidimensional data can be meaningful.
Reference: [34] <author> C. Faloutsos. </author> <title> Multiattribute hashing using gray codes. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 227-238, </pages> <address> Washington, DC, </address> <month> May </month> <year> 1986. </year> <title> [points] D.6 </title>
Reference-contexts: An interesting twist on bit interleaving that improves the efficiency of partial match queries, and potentially also of range queries, is reported by Faloutsos <ref> [34] </ref>. He suggests that the keys be encoded by their Gray codes (recall the definition in Section ?? of Chapter ??) prior to the application of bit interleaving.
Reference: [35] <author> C. Faloutsos. </author> <title> Gray codes for partial match and range queries. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(10) </volume> <pages> 1381-1393, </pages> <month> October </month> <year> 1988. </year> <title> [points] D.6, </title> <publisher> D.8 </publisher>
Reference-contexts: Depending on how the data is structured, a multiplicity of clusters may have a significant impact on the cost of retrieving the answer. Faloutsos <ref> [35] </ref> has shown that for a partial match query, using the Gray codes never increases the number of clusters and can reduce the number of clusters by at most 50%.
Reference: [36] <author> C. Faloutsos, T. Sellis, and N. Roussopoulos. </author> <title> Analysis of object oriented spatial access methods. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 426-439, </pages> <address> San Francisco, </address> <month> May </month> <year> 1987. </year> <note> [rectangles] D.7, D.7.1 </note>
Reference-contexts: This results in more complex searches. No such problems exist when the decomposition of the space spanned by the collections of objects in the nodes is disjoint. Examples of such methods include the R + -tree <ref> [36, 127, 129] </ref> which is really a k-d-B-tree [116] with bounding boxes around the portions of space resulting from the decomposition. <p> This decision is based purely on the k-d tree splits. Thus we see that the VAMSplit R-tree is related to the VAMSplit k-d tree in the same way that the R + -tree <ref> [36, 127, 129] </ref> is related to the k-d-B-tree (see Section ?? of Chapter ??). In fact, a more appropriate name for the VAMSplit R-tree is a VAMSplit R + -tree. Exercises 1.
Reference: [37] <author> R. A. Finkel and J. L. Bentley. </author> <title> Quad trees: a data structure for retrieval on composite keys. </title> <journal> Acta Informatica, </journal> <volume> 4(1) </volume> <pages> 1-9, </pages> <year> 1974. </year> <title> [points] D.1, </title> <address> D.4, D.4.1, D.8, A.1.3, A.1.4 </address>
Reference-contexts: Instead, we make use of a tree access structure in the form of a k-ary tree where k is usually 2 d . Thus what we have done is marry a k-ary tree with the fixed-grid. This is the basis of the point quadtree <ref> [37] </ref> as well as trie-based representations such as the MX quadtree [122] and the PR quadtree [103, 124] which are all multidimensional generalizations of binary trees. They are discussed in Section 4. <p> In essence, it is equivalent to marrying a k-ary tree, where k = 2 d , with the fixed grid. There are two types of quadtrees. The first is a point quadtree <ref> [37] </ref> where the subdivision lines are based on the values of the data points while the second is trie-based and forms a decomposition of the embedding space from which the data points are drawn. <p> In particular, Section 4.1 presents the point quadtree. Section 4.2 discusses trie-based quadtrees such as the PR and MX quadtrees. Section 4.3 contains a brief comparison of the point, PR, and MX quadtrees. 4.1 Point Quadtrees In two dimensions, the point quadtree, invented by Finkel and Bentley <ref> [37] </ref>, is just a two-dimensional binary search tree. The first point that is inserted serves as the root, while the second point is inserted into the relevant quadrant of the tree rooted at the first point. <p> The amount of work expended in building a point quadtree is equal to the total path length (TPL) [72] of the tree as it reflects the cost of searching for all of the elements. Finkel and Bentley <ref> [37] </ref> have shown empirically that the TPL of a point quadtree under random insertion is roughly proportional to N log 4 N , which yields an average cost O (log 4 N ) of inserting, as well as searching for (i.e., a point query), a point. <p> The worst case arises when each successive node is the son of the currently deepest node in the tree. Consequently, there has been some interest in reducing the TPL. Two techniques for achieving this reduction are described below. Finkel and Bentley <ref> [37] </ref> propose one approach that assumes that all the nodes are known a priori. They define an optimized point quadtree so that given a node A, no subtree of A accounts for more than one half of the nodes in the tree rooted at A. <p> Give the point quadtree analogs of the single and double rotation operators [73, p. 454]. 9. What is the worst-case cost of building a point quadtree of N nodes? 4.1.2 Deletion There are several ways of deleting nodes in two-dimensional point quadtrees. The first, suggested by Finkel and Bentley <ref> [37] </ref>, is quite simple in that we reinsert all nodes of the tree rooted at the deleted node. This is usually a very expensive process, unless the deleted node is a leaf node or its sons are leaf nodes. <p> Of course, the candidate selection process becomes considerably simpler in this case. The empirical tests led to the following interesting observations. First, the number of comparison operations is proportional to log 4 N versus a considerably larger factor when using the deletion method of Finkel and Bentley <ref> [37] </ref>. Second, the total path length of the tree after deletion using Samet's method [121] decreases slightly, whereas when Finkel and Bentley's method [37] is used, the total path length increases significantly. This data is important because it correlates with the effective search time (see also [16, 84]). <p> First, the number of comparison operations is proportional to log 4 N versus a considerably larger factor when using the deletion method of Finkel and Bentley <ref> [37] </ref>. Second, the total path length of the tree after deletion using Samet's method [121] decreases slightly, whereas when Finkel and Bentley's method [37] is used, the total path length increases significantly. This data is important because it correlates with the effective search time (see also [16, 84]). In other words, the smaller the total path length, the faster a node can be accessed. <p> Prove that as N gets large, Q (N ) is 4 log 4 4 N 4=3. Do not take the root of the subtree into account. Note that Q (N ) is the cost of deletion when the method of Finkel and Bentley <ref> [37] </ref> is used. A complete point quadtree is used because such a configuration minimizes the average cost of deletion in this case since, recalling Exer cise 4, the sum of the subtree sizes for a given tree T containing N nodes is TPL (T )+N . <p> If R is in region 7, then the search can be restricted to the NW and NE quadrants of R. Similar techniques can be used to search for data points in any connected figure. For example, Finkel and Bentley <ref> [37] </ref> give algorithms for searching within a rectangular window of arbitrary size. These algorithms are more general than the query that we examined here as they are applicable to both locational and nonlocational data.
Reference: [38] <author> P. Flajolet and C. Puech. </author> <title> Tree structures for partial match retrieval. </title> <booktitle> In Proceedings of the Twenty-fourth Annual IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 282-288, </pages> <address> Tucson, AZ, </address> <month> November </month> <year> 1983. </year> <title> [points] D.4.2, </title> <publisher> D.8 </publisher>
Reference-contexts: (82,65) Buffalo (85,15) Atlanta (90,5) Miami (a) Atlanta Miami Mobile--Denver- Omaha Chicago Toronto Buffalo - (0,100) (100,100) y data of Figure 1 for bucket size 2: (a) the resulting partition of space, and (b) the tree representation. been applied by Fagin et al. to extendible hashing [33], Flajolet and Puech <ref> [38] </ref> to tries, Regnier to the grid file (see Section 7.2.1) [113], and Tamminen to EXCELL (see Section 7.2.2) [133]. The advantage of the population model is that dependencies between various populations and the steady state can be determined with relative ease.
Reference: [39] <author> W. R. Franklin. </author> <title> Adaptive grids for geometric operations. </title> <journal> Cartographica, </journal> <volume> 21(2 </volume> & 3):160-167, Summer & Autumn 1984. [regions] D.1 
Reference-contexts: that we can determine the entry of the array access structure corresponding to the grid cell 8 This method can also be described as yielding an adaptive uniform grid where the qualifier adaptive serves to emphasize that the cell size is a function of some property of the points (e.g., <ref> [39, 40] </ref>). 4 (0,100) (100,100) y (5,45) Denver (35,42) Chicago (27,35) Omaha (52,10) Mobile (62,77) Toronto (82,65) Buffalo (85,15) Atlanta (90,5) Miami search radius of 20. associated with point p.
Reference: [40] <author> W. R. Franklin, N. Chandrasekhar, M. Kankanhalli, M. Seshan, and V. Akman. </author> <title> Efficiency of uniform grids for intersection detection on serial and parallel machines. </title> <editor> In N. Magnenat-Thalmann and D. Thal-mann, editors, </editor> <booktitle> New Trends in Computer Graphics: Proceedings of the CG International '88, </booktitle> <pages> pages 288-297, </pages> <address> Tokyo, Japan, 1988. </address> <publisher> Springer-Verlag. [regions] D.1 </publisher>
Reference-contexts: that we can determine the entry of the array access structure corresponding to the grid cell 8 This method can also be described as yielding an adaptive uniform grid where the qualifier adaptive serves to emphasize that the cell size is a function of some property of the points (e.g., <ref> [39, 40] </ref>). 4 (0,100) (100,100) y (5,45) Denver (35,42) Chicago (27,35) Omaha (52,10) Mobile (62,77) Toronto (82,65) Buffalo (85,15) Atlanta (90,5) Miami search radius of 20. associated with point p.
Reference: [41] <author> E. Fredkin. </author> <title> Trie memory. </title> <journal> Communications of the ACM, </journal> <volume> 3(9) </volume> <pages> 490-499, </pages> <month> September </month> <year> 1960. </year> <title> [general] D.0, </title> <publisher> A.1.3 </publisher>
Reference: [42] <author> H. Freeman and J. Ahn. </author> <title> On the problem of placing names in a geographic map. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 1(1) </volume> <pages> 121-140, </pages> <year> 1987. </year> <title> [name placement] D.5.2, </title> <publisher> D.7.1 </publisher>
Reference-contexts: The second approach applies test compression techniques similar to those devised by Ohsawa and Sakauchi [100, 101] in their development of the BD tree which is closely related to the BANG file <ref> [42] </ref> and to a lesser extent the hB-tree [88, 89, 118] (see Section sec-tree-directory for more details about these two structures). <p> Moreover, the use of a nonorder preserving hashing function (which can be devised to spread the hash values virtually uniformly) is a drawback for range queries. The BANG file <ref> [42, 46, 47, 43] </ref> is a variant of the k-d-B-trie which requires that the underlying space be decomposed by a sequence of partitions that cycle through the keys in a fixed order.
Reference: [43] <author> M. Freeston. </author> <title> The comparative performance of bang indexing for spatial objects. </title> <booktitle> In Proceedings of the Fifth International Symposium on Spatial Data Handling, </booktitle> <volume> volume 1, </volume> <pages> pages 190-199, </pages> <address> Charleston, SC, </address> <month> August </month> <year> 1992. </year> <title> [points; BANG file] D.7.1 </title>
Reference-contexts: Moreover, the use of a nonorder preserving hashing function (which can be devised to spread the hash values virtually uniformly) is a drawback for range queries. The BANG file <ref> [42, 46, 47, 43] </ref> is a variant of the k-d-B-trie which requires that the underlying space be decomposed by a sequence of partitions that cycle through the keys in a fixed order.
Reference: [44] <author> M. Freeston. </author> <title> A general solution of the n-dimensionla b-tree problem. </title> <institution> Computer Science Department ECRC-94-40, ECRC, Munich, Germany, </institution> <year> 1994. </year> <note> [points; BV-Tree] D.8 </note>
Reference: [45] <author> M. Freeston. </author> <title> A general solution of the n-dimensional b-tree problem. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 80-91, </pages> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year> <note> [points; k-d-b-trees; BV-tree] D.7.1, D.8 </note>
Reference-contexts: Unfortunately, the BANG file has a serious flaw <ref> [45] </ref> in that the possibility of nodes having multiple parents was not taken into account in the original design. <p> The occurrence of this problem in the BANG file is addressed by Freeston <ref> [45] </ref> by use of a clever innovation. <p> Below, we use the term BV-tree to denote the tree structure of the directory obtained from applying the technique described in <ref> [45] </ref>. The goal is for the BV-tree to have properties similar to the desirable properties of the B-tree while avoiding the problems described above. <p> These bounds are based on the assumption that each point page is at least one-third full <ref> [45] </ref>. Moreover, in spite of the fact that the BV-tree is not quite balanced, search procedures always proceed level to level in the decomposition hierarchy. <p> In our 87 example, we assume a fanout value of four for the directory nodes. When a directory node is split, the BV-tree definition <ref> [45] </ref> claims that it should be possible to distribute its entries in the newly-created directory nodes a and b so that each of a and b is at least one-third full as this is one of the properties of the BV-tree that enables it to guarantee an upper bound on the <p> Thus each region is pointed at just once in the BV-tree. The BV-tree performance guarantees are based in part on the assumption that each point page is at least one-third full <ref> [45] </ref>. This is justified by appealing to the proof given for the hB-tree's satisfaction of this property [89] (and likewise for the BANG file). <p> Interestingly, this has little effect on the overall size of the directory since so few of the directory nodes are at the maximum level <ref> [45] </ref> (see Exercise 15). <p> It can be shown that regardless of the number of guards present, given the same fanout value F for both point pages and directory nodes, the ratio of directory nodes to point pages is 1=F <ref> [45] </ref> (see Exercise 11). Assuming that the deepest directory nodes are at level 1, the maximum number of point pages in a BV-tree of height v is F v and arises when there are no guards (see Exercise 8 for a related result).
Reference: [46] <author> M. W. Freeston. </author> <title> Advances in the design of the bang file. </title> <editor> In W. Litwin and H. J. Schek, editors, </editor> <booktitle> Proceedings of the Third International Conference on Foundations of Data Organization and Algorithms, </booktitle> <pages> pages 322-338, </pages> <address> Paris, </address> <month> June </month> <year> 1989. </year> <booktitle> (Lecture Notes in Computer Science 367, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989). </year> <title> [points] D.7.1 </title>
Reference-contexts: Moreover, the use of a nonorder preserving hashing function (which can be devised to spread the hash values virtually uniformly) is a drawback for range queries. The BANG file <ref> [42, 46, 47, 43] </ref> is a variant of the k-d-B-trie which requires that the underlying space be decomposed by a sequence of partitions that cycle through the keys in a fixed order.
Reference: [47] <author> M. W. Freeston. </author> <title> A well-behaved file structure for the storage of spatial objects. </title> <editor> In A. Buch-mann, O. Gunther, T. R. Smith, and Y. F. Wang, editors, </editor> <booktitle> Design and Implementation of Large Spatial Databases First Symposium, SSD'89, </booktitle> <pages> pages 287-300, </pages> <address> Santa Barbara, CA, </address> <month> July </month> <year> 1989. </year> <note> (Also Springer-Verlag Lecture Notes in Computer Science 409). [region data; BANG file] D.7.1 </note>
Reference-contexts: Moreover, the use of a nonorder preserving hashing function (which can be devised to spread the hash values virtually uniformly) is a drawback for range queries. The BANG file <ref> [42, 46, 47, 43] </ref> is a variant of the k-d-B-trie which requires that the underlying space be decomposed by a sequence of partitions that cycle through the keys in a fixed order.
Reference: [48] <author> J. H. Friedman, F. Baskett, and L. J. Shustek. </author> <title> An algorithm for finding nearest neighbors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 24(10) </volume> <pages> 1000-1006, </pages> <month> October </month> <year> 1975. </year> <note> [points] D.1, D.8 135 </note>
Reference-contexts: For example, this could be done by using a binary search with the aid of data structures such as the range tree [10, 13] as discussed in Section 2. This resulting list is then searched by brute force. The average search has been shown in <ref> [48] </ref> to be of O (N 11=d ), under certain assumptions. It should be clear that the inverted list is not particularly useful for range searches as it can only speed up the search for one of the attributes (termed the primary attribute). A number of solutions have been proposed.
Reference: [49] <author> J. H. Friedman, J. L. Bentley, and R. A. Finkel. </author> <title> An algorithm for finding best matches in logarithmic expected time. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 3(3) </volume> <pages> 209-226, </pages> <month> September </month> <year> 1977. </year> <title> [points] D.5.1 </title>
Reference-contexts: In this case, the partition lines must pass through the data points and still cycle through the various axes in a fixed and constant order. An alternative static data structure incorporating `adaptive partitioning' is the adaptive k-d tree of Fried-man, Bentley, and Finkel <ref> [49] </ref>. Unlike the standard k-d tree, and in the spirit of the pseudo quadtree of Over-mars and van Leeuwen [111] (see Section 4.1.2), data is only stored at the leaf nodes. In other words, the partition lines need not pass through the data points.
Reference: [50] <author> H. Fuchs, Z. M. Kedem, and B. F. Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <journal> Computer Graphics, </journal> <volume> 14(3) </volume> <pages> 124-133, </pages> <month> July </month> <year> 1980. </year> <booktitle> (Also Proceedings of the SIGGRAPH'80 Conference, </booktitle> <address> Seattle, WA, </address> <month> July </month> <year> 1980). </year> <note> [volumes] D.5.1, A.1.3, A.7.1, A.7.1.5, A.7.3 </note>
Reference-contexts: Also, the ancestral relationship (i.e., the common bond) between the k-d tree and the fixed-grid is now meaningless as an array access structure to the results of the space partition is no longer possible. The BSP tree of Fuchs, Kedem, and Naylor <ref> [50] </ref> is an example of a k-d tree where the subdivision lines are not necessarily parallel to the coordinate axes, orthogonal, or pass through the data points. Each subdivision line is really a hyperplane which is a line in two dimensions and a plane in three dimensions.
Reference: [51] <author> I. </author> <title> Gargantini. An effective way to represent quadtrees. </title> <journal> Communications of the ACM, </journal> <volume> 25(12) </volume> <pages> 905-910, </pages> <month> December </month> <year> 1982. </year> <note> [regions] D.6 </note>
Reference-contexts: The result of the mapping is stored in the one-dimensional access structure along with the size information. In fact, this is the basis of a linear index into a two-dimensional spatial database developed by Morton [94] and refined later by a number of other researchers including Gar 65 gantini <ref> [51] </ref> and Abel and Smith [2]. As we can see, bit interleaving is quite a powerful an idea. In the rest of this section, we give a brief historical background of its development and mention an interesting application.
Reference: [52] <author> L. M. Goldschlager. </author> <title> Short algorithms for space-filling curves. </title> <journal> Software Practice and Experience, </journal> <volume> 11(1):99, </volume> <month> January </month> <year> 1981. </year> <title> [regions; space-filling curves; Hilbert curve; Sierpinski curve] D.8, </title> <publisher> A.1.4 </publisher>
Reference: [53] <author> M. F. Goodchild and A. W. Grandfield. </author> <title> Optimizing raster storage: an examination of four alternatives. </title> <booktitle> In Proceedings of Auto-Carto 6, </booktitle> <volume> volume 1, </volume> <pages> pages 400-407, </pages> <address> Ottawa, </address> <month> October </month> <year> 1983. </year> <title> [regions] D.8, </title> <publisher> A.1.4 </publisher>
Reference: [54] <author> L. J. Guibas and R. Sedgewick. </author> <title> A dichromatic framework for balanced trees. </title> <booktitle> In Proceedings of the Nineteenth Annual IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 8-21, </pages> <address> Ann Arbor, MI, </address> <month> October </month> <year> 1978. </year> <title> [general] D.3 </title>
Reference-contexts: requirement of being able to insert and delete points in O (log 2 N ) time, while still requiring the O (N log 2 N + F ) search behavior, causes the balanced binary search tree to be implemented using more complicated structures such as a `red-black' balanced binary tree <ref> [54] </ref> (see Section ?? of Chapter ??). Store midrange x coordinate values in the nonleaf nodes. Next, proceed from the root node towards the leaf nodes.
Reference: [55] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 47-57, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year> <note> [rectangles] D.7 </note>
Reference-contexts: Instead, they are more accurately classified as object hierarchies since they try to aggregate as many objects (points in our case) as possible into each node. When the nodes are too full, they are split at which time some of the representations (e.g., the R-tree <ref> [55] </ref>) attempt to aggregate spatially proximate objects in the nodes resulting from the split. However, there is no guarantee 67 that the space spanned by the collections of objects in the nodes (e.g., their convex hull, minimum bounding box, minimum bounding circle, etc.) is disjoint.
Reference: [56] <author> A. Henrich, H. W. Six, and P. Widmayer. </author> <title> The LSD tree: spatial access to multidimensional point and non-point data. </title> <editor> In P. M. G. Apers and G. Wiederhold, editors, </editor> <booktitle> Proceedings of the Fifteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 45-53, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Write a procedure, KDB_DELETE, to delete a point from an k-d-B-tree. 5. Write a procedure, KDB_POINT_QUERY, to perform a point query in an k-d-B-tree. 6. Write a procedure, KDB_RANGE_QUERY, to perform a range query in an k-d-B-tree. 7.1.2 LSD Trees The LSD tree <ref> [56] </ref> chooses a partition line which is not intersected by any of the regions that make up the overflowing region page in the k-d-B-tree thereby avoiding the need for a recursive invocation of the splitting process. <p> terms of the number of external directory pages that are traversed) from a particular leaf node in the internal directory to any data bucket is the same, while the lengths of the paths from different leaf nodes in the internal directory to any data bucket differ by at most one <ref> [56] </ref> (e.g., Figure 52a). The pointer structure connecting the elements of the set of external directory pages and the data buckets yields a collection of trees (we are not speaking of the generalized k + -d trees that make up each external directory page here). <p> For example, in experiments reported in <ref> [56] </ref>, the internal directory contained 1000 nodes, while the external directory pages and data buckets were 512 bytes. <p> exception that the fanout at each node of B 0 is at most 2 h , whereas in a B-tree there is a predetermined minimum fanout as well as a maximum fanout (usually related to the capacity of a page which is also usually the case in the LSD tree <ref> [56] </ref>). <p> We may think of the splitting of p to be the result of applying a sequence of halving operations on the 28 But see the discussion of distribution-dependent decompositions in LSD tree <ref> [56] </ref>. 29 Although the qualifier grid file is used in the name of the data structure, it has little connection with the grid file as described in Section 7.2.1). 30 Actually, most implementations dispense with the initial region page.
Reference: [points; rectangles] <author> D.7.1, </author> <month> D.8 </month>
Reference: [57] <author> K. Hinrichs. </author> <title> The grid file system: implementation and case studies of applications. </title> <type> PhD thesis, </type> <institution> Institut fur Informatik, </institution> <address> Zurich, Switzerland, </address> <year> 1985. </year> <note> [rectangles] D.7.2 </note>
Reference-contexts: If there are originally Q d i=1 g i grid cells with g i 1 partition positions along key i, then, without loss of generality, refining key d results in (g d + 1) Q d1 i=1 g i grid cells. This is the basis of the grid file <ref> [99, 57, 58] </ref>. We can avoid the need for the linear scales by uniformly partitioning all grid cells in the same way rather than just the cells in the (d 1)-dimensional hyperplane that passes through the overflowing grid cell. <p> This discussion also includes an explanation of how to adapt the related method of spiral hashing to multidimensional point data. Section 7.2.5 contains a brief comparison of the various bucket methods that make use of a grid directory. 7.2.1 Grid File The grid file of Nievergelt, Hinterberger, and Sevcik <ref> [99, 57, 58] </ref> is a variation of the fixed-grid method, which relaxes the requirement that grid subdivision lines be equidistant. Its goal is to retrieve records with at most two disk accesses, and to handle range queries efficiently.
Reference: [58] <author> K. Hinrichs. </author> <title> Implementation of the grid file: design concepts and experience. </title> <journal> BIT, </journal> <volume> 25(4) </volume> <pages> 569-592, </pages> <year> 1985. </year> <note> [rectangles] D.7.2 </note>
Reference-contexts: If there are originally Q d i=1 g i grid cells with g i 1 partition positions along key i, then, without loss of generality, refining key d results in (g d + 1) Q d1 i=1 g i grid cells. This is the basis of the grid file <ref> [99, 57, 58] </ref>. We can avoid the need for the linear scales by uniformly partitioning all grid cells in the same way rather than just the cells in the (d 1)-dimensional hyperplane that passes through the overflowing grid cell. <p> This discussion also includes an explanation of how to adapt the related method of spiral hashing to multidimensional point data. Section 7.2.5 contains a brief comparison of the various bucket methods that make use of a grid directory. 7.2.1 Grid File The grid file of Nievergelt, Hinterberger, and Sevcik <ref> [99, 57, 58] </ref> is a variation of the fixed-grid method, which relaxes the requirement that grid subdivision lines be equidistant. Its goal is to retrieve records with at most two disk accesses, and to handle range queries efficiently.
Reference: [59] <author> G. R. Hjaltason and H. Samet. </author> <title> Ranking in spatial databases. </title> <editor> In M. J. Egenhofer and J. R. Herring, editors, </editor> <booktitle> Advances in Spatial Databases Fourth International Symposium, SSD'95, </booktitle> <pages> pages 83-95, </pages> <address> Port-land, ME, </address> <month> August </month> <year> 1995. </year> <title> (Also Springer-Verlag Lecture Notes in Computer Science 951). [points; lines; incremental nearest neighbor searching; ranking] D.0, </title> <publisher> D.4.1 </publisher>
Reference-contexts: Range and Boolean queries are described immediately above while simple queries (e.g., what city is located at a given pair of coordinate values) are a byproduct of the point quadtree insertion process described earlier. Nearest neighbor queries as well as k-nearest neighbor queries are also feasible <ref> [59] </ref>. The cost of search in a point quadtree has been studied by Bentley, Stanat, and Williams [16] (see Exercise 2) and Lee and Wong [84].
Reference: [60] <author> E. G. Hoel. </author> <title> Spatial data structures and query performance in the sequential and data-parallel domains. </title> <type> PhD thesis, </type> <institution> University of Maryland, </institution> <month> December </month> <year> 1995. </year> <note> (Also available as Technical Report TR-3584, </note> <institution> University of Maryland, College Park, MD). </institution> <note> [spatial databases] D.5 </note>
Reference-contexts: Therefore, we can characterize the k-d tree as a superior serial data structure and the quadtree as a superior parallel data structure. For a discussion of the use of quadtrees in a multiprocessor environment, see Linn [86], while Hoel <ref> [60] </ref> and Bestul [17] discuss their use in a parallel environment. The idea of replacing a test of d attribute values by a sequence of d tests is applicable to both point quadtrees and trie-based quadtrees, although it is applied more often to point quadtrees.
Reference: [61] <author> G. M. Hunter. </author> <title> Efficient computation and data structures for graphics. </title> <type> PhD thesis, </type> <institution> Princeton University, Princeton, NJ, </institution> <year> 1978. </year> <editor> [regions] A.1.3 A.1.4 A.3.2.2 A.4.3.1 A.4.4 A.5.1.2 A.5.2 A.5.3 A.6.3 A.6.3.2 A.6.5.1 A.7.1.1 A.7.1.2 A.9.2 D.4.2, </editor> <publisher> A.1.2 </publisher>
Reference-contexts: Letelier [85] makes use of the MX quadtree to represent silhouettes of hand motions to aid in the telephonic transmission of sign language for the hearing impaired. The region quadtree formulation of Hunter and Steiglitz <ref> [61, 63] </ref> (see Sections ?? of Chapter ?? and ?? of Chapter ??) utilizes a three color variant of the MX quadtree to represent digitized simple polygons.
Reference: [62] <author> G. M. Hunter. </author> <title> Geometrees for interactive visualization of geology: an evaluation. </title> <institution> System science department, Schlumberger-Doll Research, Ridgefield, CT, </institution> <year> 1981. </year> <note> [volumes] D.4.2, A.1.3 </note>
Reference-contexts: Assume a rectangular query region. Exercises 9-16 are based on an analysis of PR quadtrees performed by Hunter <ref> [62] </ref>. 9. Assume that you are given point data that is uniformly distributed in the unit square. What is the prob ability of a node at depth k containing a particular point? 10.
Reference: [63] <author> G. M. Hunter and K. Steiglitz. </author> <title> Operations on images using quad trees. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 1(2) </volume> <pages> 145-153, </pages> <month> April </month> <year> 1979. </year> <editor> [regions] A.4.4 A.5.1.2 A.5.2 A.5.3 A.6.3 A.6.3.2 A.6.5.1 A.7.1.1 A.7.1.2 A.9.2 D.4.2, A.3.2.2, </editor> <publisher> A.4.3.1 </publisher>
Reference-contexts: Letelier [85] makes use of the MX quadtree to represent silhouettes of hand motions to aid in the telephonic transmission of sign language for the hearing impaired. The region quadtree formulation of Hunter and Steiglitz <ref> [61, 63] </ref> (see Sections ?? of Chapter ?? and ?? of Chapter ??) utilizes a three color variant of the MX quadtree to represent digitized simple polygons.
Reference: [64] <author> A. Hutflesz, H. W. Six, and P. Widmayer. </author> <title> Globally order preserving multidimensional linear hashing. </title> <booktitle> In Proceedings of the Fourth IEEE International Conference on Data Engineering, </booktitle> <pages> pages 572-579, </pages> <address> Los Angeles, </address> <month> February </month> <year> 1988. </year> <title> [points; linear hashing] D.7.2, </title> <address> D.8 136 </address>
Reference-contexts: Interestingly, the Morton order does satisfy these requirements in that it has the property that a grid cell at address c is split into two grid cells at addresses 2c and 2c + 1 (see Exercise ??). The Morton order is the basis of the z + -ordering <ref> [64] </ref>. <p> This process is continued recursively until all grid cells have been split and we have 2 L+1 grid cells at addresses 0; 1; : : : ; 2 L+1 1. This splitting method is termed dynamic z hashing <ref> [64] </ref>. As an example of dynamic z hashing, consider Figure 86c which corresponds to the mapping of grid cells and addresses when using the Morton order for the fourth expansion (i.e., L = 4). <p> The storage efficiency can be obtained by calculating the average number of gaps during a full expansion. Assuming that L full expansions have been carried out, it can be shown that the L + 1 st expansion has an average of L=2 gaps (see Exercise 9) <ref> [64] </ref>. <p> Does this property also hold for the Peano-Hilbert order? If it does not hold, can you state and prove how often it does hold? Also, if it does not hold, can you find a similar property that does hold for the Peano-Hilbert order? 11. The z + -ordering <ref> [64] </ref> was devised in order to ensure that when a grid cell is split in linear hashing, the newly created grid cells are in spatial priximity. The z + -ordering makes use of a Morton order.
Reference: [65] <author> A. Hutflesz, H. W. Six, and P. Widmayer. </author> <title> The twin grid file: a nearly space optimal index structure. </title> <booktitle> In Proceedings of the International Conference Extending Database Technology, </booktitle> <pages> pages 352-363, </pages> <address> Venice, Italy, </address> <month> March </month> <year> 1988. </year> <title> [points] D.7.2 </title>
Reference-contexts: Implement a database that uses the grid file to organize 2-dimensional data. 3. The grid file is considered to be an instance of the general bucket method of fanout 2 (which also includes the B-tree, EXCELL, and EXHASH) with 0.69 average storage utilization [99]. The twin grid file <ref> [65, 66] </ref> is a representation which makes use of two grid files which has been observed to result in improving the average storage utilization of the grid file to 90%. Give an intuitive explanation of why this is so. 4.
Reference: [66] <author> A. Hutflesz, H. W. Six, and P. Widmayer. </author> <title> Twin grid files: space optimizing access schemes. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 183-190, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year> <title> [points] D.7.2 </title>
Reference-contexts: Implement a database that uses the grid file to organize 2-dimensional data. 3. The grid file is considered to be an instance of the general bucket method of fanout 2 (which also includes the B-tree, EXCELL, and EXHASH) with 0.69 average storage utilization [99]. The twin grid file <ref> [65, 66] </ref> is a representation which makes use of two grid files which has been observed to result in improving the average storage utilization of the grid file to 90%. Give an intuitive explanation of why this is so. 4.
Reference: [67] <author> M. Iri, K. Murota, and S. Matsui. </author> <title> Linear-time approximation algorithms for finding the minimum-weight perfect matching on a plane. </title> <journal> Information Processing Letters, </journal> <volume> 12(4) </volume> <pages> 206-209, </pages> <month> August </month> <year> 1981. </year> <title> [points; approximation algorithms; minimum-weight matching; computational complexity; graphics] D.8 </title>
Reference: [68] <author> I. Kamel and C. Faloutsos. </author> <title> On packing R-trees. </title> <booktitle> In Proceedings of the Second International Conference on Information and Knowledge Management, </booktitle> <pages> pages 490-499, </pages> <address> Washington, DC, </address> <month> November </month> <year> 1993. </year> <note> [R-trees] D.7.2 </note>
Reference-contexts: The comparison should be analytic. If this is not possible, then use an experimental comparison. Do the results match the general comparison of the efficiency of the Morton and Peano-Hilbert orders described in <ref> [68] </ref>? 7.2.4 Variants of Linear Hashing Regardless of whether OPLH or MDEH are used as the hashing functions, linear hashing has the drawback that the grid cell that has been split most recently is not necessarily the one that is full.
Reference: [69] <author> M. L. Kersten and P. van Emde Boas. </author> <title> Local optimizations of QUAD trees. </title> <type> Technical Report IR-51, </type> <institution> Free University of Amsterdam, </institution> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1979. </year> <title> [points] D.8 </title>
Reference: [70] <author> G. D. Knott. </author> <title> Expandable open addressing hash table storage and retrieval. </title> <booktitle> In Proceedings of SIG-FIDET Workshop on Data Description, Acess and Control, </booktitle> <pages> pages 187-206, </pages> <address> San Diego, </address> <month> November </month> <year> 1971. </year> <title> [points] D.7.1 </title>
Reference-contexts: objects to be disjoint may be impossible to satisfy as is the case, for example, for a collection of line segments all of which meet at a particular point. 68 The use of a directory in the form of a tree to access the buckets was first proposed by Knott <ref> [70] </ref>. The nodes in a B-tree can also be used as buckets. A linear ordering on multidimensional point data can be obtained by using bit interleaving, as mentioned in Section 6, and then storing the results in a B-tree (recall the zkd Btree).
Reference: [71] <author> D. E. Knuth. </author> <title> The Art of Computer Programming: Sorting and Searching, volume 3. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year> <month> D.3 </month>
Reference-contexts: This is not surprising because a priority search tree is really a variant of a range tree in x (see Exercise 1 in Section 2) and a heap (i.e., priority queue) <ref> [71] </ref> in y. A heap (see Section ?? in Chapter ??) enables finding the maximum (minimum) value in O (1) time. More generally the largest (smallest) F out of N values can be determined in O (F ) time, but the F values are not sorted.
Reference: [72] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming vol. 1, Fundamental algorithms. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, 1973. [general] A.3.2.1.2 D.4.1, D.7.2, A.P, A.1.4, A.2.1.4 </note>
Reference-contexts: For example, in Figure 11, insertion of Memphis with coordinate values (35,20) would lead to its placement somewhere in quadrant SE of the tree rooted at Chicago (i.e., at (35,42)). The amount of work expended in building a point quadtree is equal to the total path length (TPL) <ref> [72] </ref> of the tree as it reflects the cost of searching for all of the elements. <p> It may be skipped on an initial reading. the exception of the deepest level, contains a maximum number of nodes. The deepest level is partially full but has no empty positions when using this array mapping. For more details, see Knuth <ref> [72, pp. 400-401] </ref> as well as Section ?? of Chapter ??. 22 A Ideally, we want to replace the deleted node (say A at (x A ; y A )) with a node (say B at (x B ; y B )), such that the region between the lines x = <p> Bucket merging policy is influenced by three factors. First, we must decide which bucket pairs are candidates for merging. This decision can be based on a buddy system or a neighbor system. In a buddy system <ref> [72] </ref>, each bucket, say X, can be merged with exactly one bucket, say B i , in each of the d dimensions. Ideally, the chosen bucket, say B j , should have the property that at some earlier point it was split to yield buckets X and B j .
Reference: [73] <author> D. E. Knuth. </author> <title> The Art of Computer Programming vol. 3, Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year> <institution> [general] D.2.8.2.1 D.2.8.2.2 A.P A.1.3 D.0, D.1, D.4.1, D.5.1, D.5.2, D.8 </institution>
Reference-contexts: As an example, consider the set of eight cities and their x and y coordinate values as shown in Figure 1. Another very common technique is the inverted list method <ref> [73] </ref>, in which for each key a sorted list is maintained of the records in the file. Figure 2 is the inverted list representation of the data in Figure 1. There are two sorted lists; one for the x coordinate value and one for the y coordinate value. <p> This is analogous to a compressed bitmap representation. The compressed bitmap representation forms the basis of the fixed-grid method <ref> [12, 73] </ref>. It partitions the space from which the data is drawn into rectangular cells by overlaying it with a grid. Each grid cell c contains a pointer to another structure (e.g., a list) which contains the set of points that lie in c. <p> The TPL can also be reduced by applying balancing operators analogous to those used to balance binary search trees. Give the point quadtree analogs of the single and double rotation operators <ref> [73, p. 454] </ref>. 9. What is the worst-case cost of building a point quadtree of N nodes? 4.1.2 Deletion There are several ways of deleting nodes in two-dimensional point quadtrees. <p> All root of a quadtree may reside. there are other restrictions on these lines (see Exercise 6). When J = 2, the result is a point quadtree with nonorthogonal axes. Thus, we see that quadtrees can be used to handle all three types of queries specified by Knuth <ref> [73] </ref>. Range and Boolean queries are described immediately above while simple queries (e.g., what city is located at a given pair of coordinate values) are a byproduct of the point quadtree insertion process described earlier. Nearest neighbor queries as well as k-nearest neighbor queries are also feasible [59]. <p> Prove that the TPL of a k-d tree of N nodes built by inserting the N points in a random order is O (N log 2 N ). 5. Give the k-d tree analogs of the single and double rotation operators for use in balancing a binary search tree <ref> [73, p. 454] </ref>. Make sure that you handle equal key values correctly. 5.1.2 Deletion Deletion of nodes from k-d trees is considerably more complex than for binary search trees. Observe that, unlike the binary search tree, not every subtree of a k-d tree is itself a k-d tree. <p> For an alternative derivation, see Exercise 6. As is the case for the point quadtree, the k-d tree can be used to handle all three types of queries specified by Knuth <ref> [73] </ref>. The range query is described above while simple queries are a byproduct of the k-d tree insertion process. Boolean queries are straightforward. Range queries can be facilitated by use of a bounds array B [i] of 2 d elements stored at each node. <p> In particular, the nodes are replaced by one nonleaf node that indicates the results of the comparisons performed in accessing the first node in the path that has more than one non-NIL son. This is similar to the notion of Patrician tries in digital searching <ref> [73, p. 490] </ref>. As an example of the use of test compression techniques, let us examine their application to the PR k-d tree given in Figure 44.
Reference: [74] <author> H. P. Kriegel and B. Seeger. </author> <title> Multidimensional order preserving linear hashing with partial expansions. </title> <booktitle> In Proceedings of the International Conference on Database Theory, </booktitle> <pages> pages 203-220, </pages> <address> Rome, </address> <month> September </month> <year> 1986. </year> <booktitle> (Lecture Notes in Computer Science 243, </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1986). </year> <title> [points] D.7.2, </title> <publisher> D.8 </publisher>
Reference-contexts: Using partial expansions with MDEH is a bit more tricky as the expansion unit is a slice rather than a grid cell. This means that instead of expanding groups of individual grid cells, we must expand groups of slices. Kriegel and Seeger <ref> [74] </ref> take this into consideration by proposing to split two adjacent slices into three on the first partial expansion for key k followed by a split of three adjacent slices into four on the second partial expansion for k. <p> Three approaches, quantile hashing <ref> [74, 75, 77] </ref>, PLOP (denoting piecewise linear order preserving) hashing [76], and spiral hashing [90, 80, 95] (recall Section ?? of Chapter ??), are discussed below that try to overcome this drawback by, in part, varying the range of values (i.e., in the underlying data domain) that can be associated with <p> PLOP hashing partitions a group of grid cells on the basis of which one contains the maximum number of data items. 3. Spiral hashing partitions the grid cell for which U is a maximum. Quantile hashing <ref> [74, 75, 77] </ref> is just an implementation of the MDEH hashing function where instead of partitioning each expansion slice of key k in half, we compute a partition point along key k which partitions the quantile associated with the slice so that approximately one half of the incoming values that are
Reference: [75] <author> H. P. Kriegel and B. Seeger. </author> <title> Multidimensional dynamic quantile hashing is very efficient for nonuniform record distributions. </title> <booktitle> In Proceedings of the Third IEEE International Conference on Data Engineering, </booktitle> <pages> pages 10-17, </pages> <address> Los Angeles, </address> <month> February </month> <year> 1987. </year> <title> [points] D.7.2 </title>
Reference-contexts: Three approaches, quantile hashing <ref> [74, 75, 77] </ref>, PLOP (denoting piecewise linear order preserving) hashing [76], and spiral hashing [90, 80, 95] (recall Section ?? of Chapter ??), are discussed below that try to overcome this drawback by, in part, varying the range of values (i.e., in the underlying data domain) that can be associated with <p> PLOP hashing partitions a group of grid cells on the basis of which one contains the maximum number of data items. 3. Spiral hashing partitions the grid cell for which U is a maximum. Quantile hashing <ref> [74, 75, 77] </ref> is just an implementation of the MDEH hashing function where instead of partitioning each expansion slice of key k in half, we compute a partition point along key k which partitions the quantile associated with the slice so that approximately one half of the incoming values that are
Reference: [76] <author> H. P. Kriegel and B. Seeger. PLOP-hashing: </author> <title> a grid file without directory. </title> <booktitle> In Proceedings of the Fourth IEEE International Conference on Data Engineering, </booktitle> <pages> pages 369-376, </pages> <address> Los Angeles, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: Grid cells are split whenever the storage utilization factor o exceeds a predetermined value, say ff. We use a split index (termed an expansion index <ref> [76] </ref>) in the form E = (e 1 ; e 2 ; : : : ; e d ) to indicate which grid cell c is to be split next. <p> Three approaches, quantile hashing [74, 75, 77], PLOP (denoting piecewise linear order preserving) hashing <ref> [76] </ref>, and spiral hashing [90, 80, 95] (recall Section ?? of Chapter ??), are discussed below that try to overcome this drawback by, in part, varying the range of values (i.e., in the underlying data domain) that can be associated with some 118 of the grid cells (true for all three <p> The alternative is to base the partitioning on the known data and to split the slices that contain the most data points. This is the basis of PLOP hashing <ref> [76] </ref>. PLOP hashing is similar to quantile hashing in the sense that it cycles through the keys and doubles the number of partitions along each key`s axis for each key on successive cycles 46 .
Reference: [points] <institution> D.7.2 </institution>
Reference: [77] <author> H. P. Kriegel and B. Seeger. </author> <title> Multidimensional quantile hashing is very efficient for nonuniform distributions. </title> <journal> Information Sciences, </journal> <volume> 48(2) </volume> <pages> 99-117, </pages> <month> July </month> <year> 1989. </year> <title> [points] D.7.2 </title>
Reference-contexts: Three approaches, quantile hashing <ref> [74, 75, 77] </ref>, PLOP (denoting piecewise linear order preserving) hashing [76], and spiral hashing [90, 80, 95] (recall Section ?? of Chapter ??), are discussed below that try to overcome this drawback by, in part, varying the range of values (i.e., in the underlying data domain) that can be associated with <p> PLOP hashing partitions a group of grid cells on the basis of which one contains the maximum number of data items. 3. Spiral hashing partitions the grid cell for which U is a maximum. Quantile hashing <ref> [74, 75, 77] </ref> is just an implementation of the MDEH hashing function where instead of partitioning each expansion slice of key k in half, we compute a partition point along key k which partitions the quantile associated with the slice so that approximately one half of the incoming values that are
Reference: [78] <author> R. Krishnamurthy and K. Y. Whang. </author> <title> Multilevel grid files. </title> <type> Technical report, </type> <institution> IBM T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <year> 1985. </year> <title> [points] D.7.1 </title>
Reference-contexts: The effects of clustering can be further mitigated by increasing the capacity of the buckets. Below, we discuss a number of extensions of the bucket generalized k-d trie (i.e., the multilevel grid file 29 <ref> [78] </ref> and the buddy-tree [126]) which have additional desirable characteristics. They differ from the bucket generalized k-d trie in that, as in the k-d-B-tree (and the LSD tree), they also aggregate the nonleaf nodes of the bucket generalized k-d trie. <p> For example, in Figure 60, a can be merged with b 1 , b 2 , or b 3 . There are a number of variants of the k-d-B-trie. The most notable are the multilevel grid file <ref> [78] </ref> and the buddy-tree [126]. <p> The use of bit strings to represent the various regions in the BANG file is similar to that used in the BD tree [100, 101] 35 , while quite different from the one used in the multilevel grid file <ref> [78] </ref> 36 . Nevertheless, a key difference between the BANG file and the BD tree is the fact that the BD tree does not aggregate the nonleaf nodes of the structure into buckets. In particular, in the BD tree, only the leaf nodes are aggregated into buckets.
Reference: [79] <author> P. A. Larson. </author> <title> Linear hashing with partial expansions. </title> <editor> In F. H. Lochovsky and R. W. Taylor, editors, </editor> <booktitle> Proceedings of the Sixth International Conference on Very Large Data Bases, </booktitle> <pages> pages 224-232, </pages> <address> Montreal, </address> <month> October </month> <year> 1980. </year> <title> [points] D.7.2 </title>
Reference-contexts: Thus the records are not uniformly distributed over all of the buckets thereby leading to worse query performance (e.g., search). The performance is worse because there are more overflow buckets to be searched. Larson <ref> [79] </ref> proposes a variant of linear hashing termed linear hashing with partial expansions (LHPE) to overcome this problem. The key idea is that the number of grid cells is doubled in a more gradual manner through the application of a sequence of partial expansions.
Reference: [80] <author> P. A. Larson. </author> <title> Dynamic hash tables. </title> <journal> Communications of the ACM, </journal> <volume> 31(4) </volume> <pages> 446-457, </pages> <month> April </month> <year> 1988. </year> <title> [points] D.7.2 </title>
Reference-contexts: This is quite rare. Exercises 1. Implement a database that uses EXCELL to organize 2-dimensional data. 105 A A B C EXCELL. 7.2.3 Linear Hashing Linear hashing <ref> [80, 87] </ref> is a technique for avoiding drastic growth in the size of a hash table when it becomes too full (i.e., when a hash bucket overflows). <p> Three approaches, quantile hashing [74, 75, 77], PLOP (denoting piecewise linear order preserving) hashing [76], and spiral hashing <ref> [90, 80, 95] </ref> (recall Section ?? of Chapter ??), are discussed below that try to overcome this drawback by, in part, varying the range of values (i.e., in the underlying data domain) that can be associated with some 118 of the grid cells (true for all three approaches), and by allowing
Reference: [81] <author> E. Lawler. </author> <title> Combinatorial Optimization: Networks and Matroids. </title> <publisher> Holt, Rinehart and Winston, </publisher> <address> New York, </address> <year> 1976. </year> <note> [general] D.8 137 </note>
Reference: [82] <author> D. T. Lee. </author> <title> Maximum clique problem of rectangle graphs. </title> <editor> In F. P. Preparata, editor, </editor> <booktitle> Advances in Com--puting Research, </booktitle> <volume> volume 1, </volume> <pages> pages 91-107. </pages> <publisher> JAI Press, </publisher> <address> Greenwich, CT, </address> <year> 1983. </year> <note> [rectangles] D.8 </note>
Reference: [83] <author> D. T. Lee and B. J. Shachter. </author> <title> Two algorithms for constructing a delaunay triangulation. </title> <journal> International Jounal of Computer and Information Sciences, </journal> <volume> 9(3) </volume> <pages> 219-242, </pages> <month> June </month> <year> 1980. </year> <title> [regions; Delaunay triangulation; triangulation; divide-and conquer; Voroni tessellation; computational geometry; analysis of algorithms] D.5.1 </title>
Reference-contexts: Thus, we only had to examine three nodes during our search. Similar techniques are applied when the search region is rectangular making the query meaningful for both locational and nonlocational data. In general, the search cost depends on the type of query. Given N points, Lee and Wong <ref> [83] </ref> have shown that in the worst case, the cost of a range search of a complete k-d tree is O (d N 11=d ).
Reference: [84] <author> D. T. Lee and C. K. Wong. </author> <title> Worst-case analysis for region and partial region searches in multidimensional binary search trees and balanced quad trees. </title> <journal> Acta Informatica, </journal> <volume> 9(1) </volume> <pages> 23-29, </pages> <year> 1977. </year> <title> [points] D.4.1, </title> <publisher> D.5.1, D.8 </publisher>
Reference-contexts: Second, the total path length of the tree after deletion using Samet's method [121] decreases slightly, whereas when Finkel and Bentley's method [37] is used, the total path length increases significantly. This data is important because it correlates with the effective search time (see also <ref> [16, 84] </ref>). In other words, the smaller the total path length, the faster a node can be accessed. <p> Nearest neighbor queries as well as k-nearest neighbor queries are also feasible [59]. The cost of search in a point quadtree has been studied by Bentley, Stanat, and Williams [16] (see Exercise 2) and Lee and Wong <ref> [84] </ref>. In particular, Lee and Wong show that in the worst case, range searching in a complete two-dimensional point quadtree takes O (2 N 1=2 ) time. <p> Note that complete point quadtrees are not always achievable as seen in Exercise 3 in Section 4.1.1. Partial range queries can be handled in the same way as range searching. Lee and Wong <ref> [84] </ref> show that when ranges for s out of d keys are specified, then the algorithm has a worst case running time of O (s N 11=d ). Exercises 1. Write a procedure PT_REGION_SEARCH which performs a region search for a circular region in a point quadtree. <p> In general, for arbitrary d, t n is O (d N 11=d ). Partial range queries can be handled in the same way as range searching. Lee and Wong <ref> [84] </ref> show that when ranges for s out of d keys are specified, the algorithm has a worst case running time of O (s N 11=d ). For an alternative derivation, see Exercise 6.
Reference: [85] <author> P. Letellier. </author> <title> Transmission d'images a bas debit pour un systeme de communication telephonique adatee aux sourds. </title> <type> PhD thesis, </type> <institution> Universite de Paris-Sud, Paris, </institution> <month> September </month> <year> 1983. </year> <note> [regions] D.4.2 </note>
Reference-contexts: Letelier <ref> [85] </ref> makes use of the MX quadtree to represent silhouettes of hand motions to aid in the telephonic transmission of sign language for the hearing impaired.
Reference: [86] <author> J. Linn. </author> <title> General methods for parallel searching. </title> <institution> Digital Systems Laboratory 81, Stanford University, Stanford, </institution> <address> CA, </address> <month> May </month> <year> 1973. </year> <title> [points] D.5 </title>
Reference-contexts: Therefore, we can characterize the k-d tree as a superior serial data structure and the quadtree as a superior parallel data structure. For a discussion of the use of quadtrees in a multiprocessor environment, see Linn <ref> [86] </ref>, while Hoel [60] and Bestul [17] discuss their use in a parallel environment. The idea of replacing a test of d attribute values by a sequence of d tests is applicable to both point quadtrees and trie-based quadtrees, although it is applied more often to point quadtrees.
Reference: [87] <author> W. Litwin. </author> <title> Linear hashing: A new tool for file and table addressing. </title> <editor> In F. H. Lochovsky and R. W. Taylor, editors, </editor> <booktitle> Proceedings of the Sixth International Conference on Very Large Data Bases (VLDB), </booktitle> <pages> pages 212-223, </pages> <address> Montreal, </address> <month> October </month> <year> 1980. </year> <title> [points] D.7.2 </title>
Reference-contexts: This is quite rare. Exercises 1. Implement a database that uses EXCELL to organize 2-dimensional data. 105 A A B C EXCELL. 7.2.3 Linear Hashing Linear hashing <ref> [80, 87] </ref> is a technique for avoiding drastic growth in the size of a hash table when it becomes too full (i.e., when a hash bucket overflows).
Reference: [88] <author> D. Lomet and B. Salzberg. </author> <title> A robust multi-attribute search structure. </title> <booktitle> In Proceedings of the Fifth IEEE International Conference on Data Engineering, </booktitle> <pages> pages 296-304, </pages> <address> Los Angeles, </address> <month> February </month> <year> 1989. </year> <title> [points; hB-tree] D.5.2 </title>
Reference-contexts: The second approach applies test compression techniques similar to those devised by Ohsawa and Sakauchi [100, 101] in their development of the BD tree which is closely related to the BANG file [42] and to a lesser extent the hB-tree <ref> [88, 89, 118] </ref> (see Section sec-tree-directory for more details about these two structures).
Reference: [89] <author> D. Lomet and B. Salzberg. </author> <title> The hB-tree: a multi-attribute indexing method with good guaranteed performance. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <month> December </month> <year> 1990. </year> <note> (Also Northeastern University Technical Report NU-CCS-87-24). [points] D.5.2, D.7.1, D.8 </note>
Reference-contexts: The second approach applies test compression techniques similar to those devised by Ohsawa and Sakauchi [100, 101] in their development of the BD tree which is closely related to the BANG file [42] and to a lesser extent the hB-tree <ref> [88, 89, 118] </ref> (see Section sec-tree-directory for more details about these two structures). <p> Write a procedure, LSD_DELETE, to delete a point from an LSD tree. 3. Write a procedure, LSD_POINT_QUERY, to perform a point query in an LSD tree. 4. Write a procedure, LSD_RANGE_QUERY, to perform a range query in an LSD tree. 7.1.3 hB-trees The hB-tree <ref> [89, 30, 31] </ref> overcomes the low storage utilization drawback of the LSD tree by removing the requirement that the portions of the underlying space spanned by the region pages resulting from the split are hyper-rectangles. <p> child nodes C, D, E, and F (i.e., these 23 This notion of minimum occupancy is also used in the BD tree [100, 101] (see Section 5.2). 24 Note that subsequent splits may result in region pages that span areas that are not contiguous but this is not a problem <ref> [89] </ref>). 25 We characterize the structure as a generalized k-d tree rather than a k-d tree because the partitions need not be cyclic. 76 F E y y x G x y J region page in Figure 51a. <p> The nonleaf nodes are labeled with the name of the key that serves as the discriminator. We must also propagate the result of the split to the father hB-tree node F of the node P corresponding to the overflowing region page (termed posting <ref> [89] </ref>). In our example, after the split, we post a subtree that discriminates between Q and S to the father hB-tree node F. This results in merging the generalized k + -d tree in Figure 55 into the generalized k + -d tree for F. <p> Thus each region is pointed at just once in the BV-tree. The BV-tree performance guarantees are based in part on the assumption that each point page is at least one-third full [45]. This is justified by appealing to the proof given for the hB-tree's satisfaction of this property <ref> [89] </ref> (and likewise for the BANG file). The presence of the guards complicates the use of the assumption that each directory node is at least one-third full (which holds for the hB-tree and the BANG file).
Reference: [90] <author> G. N. N. Martin. </author> <title> Spiral storage: incrementally augmentable hash addressed storage. </title> <institution> Department of Computer Science, Theory of Computation 27, University of Warwick, Coventry, Great Britain, </institution> <month> March </month> <year> 1979. </year> <title> [points] D.7.2 </title>
Reference-contexts: Three approaches, quantile hashing [74, 75, 77], PLOP (denoting piecewise linear order preserving) hashing [76], and spiral hashing <ref> [90, 80, 95] </ref> (recall Section ?? of Chapter ??), are discussed below that try to overcome this drawback by, in part, varying the range of values (i.e., in the underlying data domain) that can be associated with some 118 of the grid cells (true for all three approaches), and by allowing
Reference: [91] <author> T. Matsuyama, L. V. Hao, and M. Hagao. </author> <title> A file organization for geographic information systems based on spatial proximity. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 26(3) </volume> <pages> 303-318, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: The imbalance may be overcome by aggregating the blocks corresponding to the nodes into larger blocks termed buckets. This is achieved by varying the decomposition rule so that a block is split only if it contains more than b points where b is termed the bucket capacity <ref> [91] </ref>). We use the term bucket PR quadtree to describe this representation. <p> Matsuyama, Hao, and Nagao <ref> [91] </ref> use the bucket generalized pseudo k-d tree in a geographic information system (see also the spatial k-d tree of Ooi, McDonell, and Sacks-Davis [102], which is discussed in Section ?? of Chapter ??).
Reference: [points] <author> D.4.2, </author> <month> D.5.1 </month>
Reference: [92] <author> E. M. McCreight. </author> <title> Priority search trees. </title> <journal> SIAM Journal on Computing, </journal> <volume> 14(2) </volume> <pages> 257-276, </pages> <month> May </month> <year> 1985. </year> <note> [rectangles] D.1, D.3 </note>
Reference-contexts: This is discussed in Section 2. The priority search tree <ref> [92] </ref> forms the basis of another solution known as the range priority tree [28] which is also related to the range tree. <p> In the original presentation of the priority search tree, two variants are defined <ref> [92] </ref>. The first variant, which is the one described in the text, makes use of a range tree on the x coordinate value and stores midrange x coordinate values in the nonleaf nodes. The second variant does not store the midrange values.
Reference: [93] <author> T. H. Merrett and E. J. Otoo. </author> <title> Dynamic multipaging: a storage structure for large shared data banks. </title> <editor> In P. Scheuermann, editor, </editor> <booktitle> Improving Database Usability and Responsiveness, </booktitle> <pages> pages 237-254. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year> <title> [points; access methods; dynamic files; multiattribute storage structures; mul-tipaging; order-preserving; key-to-key address transformations; tidy functions] D.7.2, </title> <publisher> D.8 </publisher>
Reference-contexts: In other words, we can use a variant of MDEH that permits the partitions for the different keys to proceed in arbitrary order. For example, assuming three-dimensional data, one possible key partition order would be zzxyzxxxxyy : : :. Such an ordering is achieved by modifying the MDEH function <ref> [93, 108] </ref> to keep track of the order in which the keys were partitioned. This is not needed when using a cyclic order as given the partition number and the cyclic order of the keys, we know the identity of the corresponding partitioning key.
Reference: [94] <author> G. M. Morton. </author> <title> A computer oriented geodetic data base and a new technique in file sequencing. </title> <publisher> IBM Ltd., </publisher> <address> Ottawa, Canada, </address> <year> 1966. </year> <note> [regions] D.6, A.1.4, A.2.1.1, A.4.1 </note>
Reference-contexts: The result of the mapping is stored in the one-dimensional access structure along with the size information. In fact, this is the basis of a linear index into a two-dimensional spatial database developed by Morton <ref> [94] </ref> and refined later by a number of other researchers including Gar 65 gantini [51] and Abel and Smith [2]. As we can see, bit interleaving is quite a powerful an idea.
Reference: [95] <author> J. K. Mullin. </author> <title> Spiral storage: efficient dynamic hashing with constant performance. </title> <journal> Computer Journal, </journal> <volume> 28(3) </volume> <pages> 330-334, </pages> <month> August </month> <year> 1985. </year> <title> [points] D.7.2 </title>
Reference-contexts: Three approaches, quantile hashing [74, 75, 77], PLOP (denoting piecewise linear order preserving) hashing [76], and spiral hashing <ref> [90, 80, 95] </ref> (recall Section ?? of Chapter ??), are discussed below that try to overcome this drawback by, in part, varying the range of values (i.e., in the underlying data domain) that can be associated with some 118 of the grid cells (true for all three approaches), and by allowing
Reference: [96] <author> R. C. Nelson and H. Samet. </author> <title> A consistent hierarchical representation for vector data. </title> <journal> Computer Graphics, </journal> <volume> 20(4) </volume> <pages> 197-206, </pages> <month> August </month> <year> 1986. </year> <booktitle> (Also Proceedings of the SIGGRAPH'86 Conference, </booktitle> <address> Dallas, </address> <month> August </month> <year> 1986). </year> <title> [lines] D.5.2, </title> <publisher> A.1.3 </publisher>
Reference-contexts: If we permit the order in which we partition the various axes rather than cycling through them in a particular order, then the result is termed a bucket generalized k-d trie. It is referred to extensively in Section 7.1. The PMR k-d tree <ref> [96, 97, 98] </ref> for points 19 addresses the clustering problem by making use of a concept related to bucket capacity which we term a splitting threshold.
Reference: [97] <author> R. C. Nelson and H. Samet. </author> <title> A population analysis of quadtrees with variable node size. </title> <institution> Computer Science TR-1740, University of Maryland, College Park, MD, </institution> <month> December </month> <year> 1986. </year> <note> [points] D.4.2, D.5.2 138 </note>
Reference-contexts: It should be clear that increasing the number of points permitted in a block reduces the dependence of the maximum depth of the PR quadtree on the minimum Euclidean distance separation of two distinct points to that of two sets of b points. For example, Nelson and Samet <ref> [97, 98] </ref> analyze the distribution of nodes in a bucket PR quadtree in terms of their occupancies for various values of the bucket capacity 16 . <p> Moreover, the method is sufficiently flexible that it can be applied to other data structures in which the decomposition is determined adaptively by the local concentration of the data. Nelson and Samet <ref> [97, 98] </ref> computed the average bucket occupancies for a number of different bucket capacities when points were generated under a uniform distribution. They found that the theoretical occupancy predictions were consistently slightly higher than the experimental values, and that the size of the discrepancy had a cyclical structure. <p> If we permit the order in which we partition the various axes rather than cycling through them in a particular order, then the result is termed a bucket generalized k-d trie. It is referred to extensively in Section 7.1. The PMR k-d tree <ref> [96, 97, 98] </ref> for points 19 addresses the clustering problem by making use of a concept related to bucket capacity which we term a splitting threshold.
Reference: [98] <author> R. C. Nelson and H. Samet. </author> <title> A population analysis for hierarchical data structures. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 270-277, </pages> <address> San Francisco, </address> <month> May </month> <year> 1987. </year> <title> [points] D.4.2, </title> <publisher> D.5.2 </publisher>
Reference-contexts: It should be clear that increasing the number of points permitted in a block reduces the dependence of the maximum depth of the PR quadtree on the minimum Euclidean distance separation of two distinct points to that of two sets of b points. For example, Nelson and Samet <ref> [97, 98] </ref> analyze the distribution of nodes in a bucket PR quadtree in terms of their occupancies for various values of the bucket capacity 16 . <p> Moreover, the method is sufficiently flexible that it can be applied to other data structures in which the decomposition is determined adaptively by the local concentration of the data. Nelson and Samet <ref> [97, 98] </ref> computed the average bucket occupancies for a number of different bucket capacities when points were generated under a uniform distribution. They found that the theoretical occupancy predictions were consistently slightly higher than the experimental values, and that the size of the discrepancy had a cyclical structure. <p> If we permit the order in which we partition the various axes rather than cycling through them in a particular order, then the result is termed a bucket generalized k-d trie. It is referred to extensively in Section 7.1. The PMR k-d tree <ref> [96, 97, 98] </ref> for points 19 addresses the clustering problem by making use of a concept related to bucket capacity which we term a splitting threshold.
Reference: [99] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year> <title> [points; file structures; database; dynamic storage allocation; multikey searching; multidimensional data] D.1, </title> <publisher> D.7.2 </publisher>
Reference-contexts: We can either subdivide the space into equal-sized grid cells or place the subdivision lines at arbitrary positions that are dependent on the underlying data. In essence, the distinction is between organizing the data to be stored and organizing the embedding space from which the data is drawn <ref> [99] </ref>. In particular, when the grid cells are equal-sized (termed a uniform grid), use of an array access structure is quite simple and has the desirable property that the grid cell associated with point p can be determined in constant time. cell having size 20 fi 20. <p> If there are originally Q d i=1 g i grid cells with g i 1 partition positions along key i, then, without loss of generality, refining key d results in (g d + 1) Q d1 i=1 g i grid cells. This is the basis of the grid file <ref> [99, 57, 58] </ref>. We can avoid the need for the linear scales by uniformly partitioning all grid cells in the same way rather than just the cells in the (d 1)-dimensional hyperplane that passes through the overflowing grid cell. <p> This discussion also includes an explanation of how to adapt the related method of spiral hashing to multidimensional point data. Section 7.2.5 contains a brief comparison of the various bucket methods that make use of a grid directory. 7.2.1 Grid File The grid file of Nievergelt, Hinterberger, and Sevcik <ref> [99, 57, 58] </ref> is a variation of the fixed-grid method, which relaxes the requirement that grid subdivision lines be equidistant. Its goal is to retrieve records with at most two disk accesses, and to handle range queries efficiently. <p> This is the approach used in the grid file implementation <ref> [99] </ref>. An alternative splitting policy is an adaptive one favoring one key over others. This is akin to a favored key in an inverted file. It results in an increase in the precision of answers to partially specified queries where the favored key is specified. <p> Nievergelt et al. <ref> [99] </ref> conducted simulation studies showing the average bucket occupancy to be 70% and suggest that this is an appropriate merging threshold for the occupancy of the resulting bucket. <p> Implement a database that uses the grid file to organize 2-dimensional data. 3. The grid file is considered to be an instance of the general bucket method of fanout 2 (which also includes the B-tree, EXCELL, and EXHASH) with 0.69 average storage utilization <ref> [99] </ref>. The twin grid file [65, 66] is a representation which makes use of two grid files which has been observed to result in improving the average storage utilization of the grid file to 90%. Give an intuitive explanation of why this is so. 4.
Reference: [100] <author> Y. Ohsawa and M. Sakauchi. </author> <title> The BD-Tree anew n-dimensional data structure with highly efficient dynamic characteristics. </title> <booktitle> Information Processing, </booktitle> <pages> pages 539-544, </pages> <year> 1983. </year> <title> [points; new data structure; BD-Tree; suitable for geometrical database retrievals] D.5.2, </title> <publisher> D.7.1 </publisher>
Reference-contexts: Also, observe that, unlike the bucket PR k-d tree, the shape of the PMR k-d tree does depend on the order in which the points were inserted. The second approach applies test compression techniques similar to those devised by Ohsawa and Sakauchi <ref> [100, 101] </ref> in their development of the BD tree which is closely related to the BANG file [42] and to a lesser extent the hB-tree [88, 89, 118] (see Section sec-tree-directory for more details about these two structures). <p> Ohsawa and Sakauchi suggest choosing x = 2=3 <ref> [100, 101] </ref>. Third, unlike the PR quadtree and PR k-d tree, a BD tree does not result in the partitioning of space into a collection of hyper-rectangles. It should be clear that the BD tree can be used for data of arbitrary dimensionality. <p> At this point, the brick that we will extract corresponds to the subtree of P's generalized k + -d tree consisting of the child nodes C, D, E, and F (i.e., these 23 This notion of minimum occupancy is also used in the BD tree <ref> [100, 101] </ref> (see Section 5.2). 24 Note that subsequent splits may result in region pages that span areas that are not contiguous but this is not a problem [89]). 25 We characterize the structure as a generalized k-d tree rather than a k-d tree because the partitions need not be cyclic. <p> The use of bit strings to represent the various regions in the BANG file is similar to that used in the BD tree <ref> [100, 101] </ref> 35 , while quite different from the one used in the multilevel grid file [78] 36 . Nevertheless, a key difference between the BANG file and the BD tree is the fact that the BD tree does not aggregate the nonleaf nodes of the structure into buckets.
Reference: [101] <author> Y. Ohsawa and M. Sakauchi. </author> <title> Multidimensional data management structure with efficient dynamic characteristics. </title> <journal> Systems, Computers, Controls, </journal> <volume> 14(5) </volume> <pages> 77-87, </pages> <year> 1983. </year> <note> (translated from, Denshi Tsushin Gakkai Ronbunshi 66-D, 10(October 1983), 1193-1200). [points] D.5.2, D.7.1 </note>
Reference-contexts: Also, observe that, unlike the bucket PR k-d tree, the shape of the PMR k-d tree does depend on the order in which the points were inserted. The second approach applies test compression techniques similar to those devised by Ohsawa and Sakauchi <ref> [100, 101] </ref> in their development of the BD tree which is closely related to the BANG file [42] and to a lesser extent the hB-tree [88, 89, 118] (see Section sec-tree-directory for more details about these two structures). <p> First, the BD tree is not unique. Rotation operations can be applied to reformulate the tests in the nonleaf nodes so that a greater degree of balancing is achieved. Such transformations are easy to express in terms of the DZEs <ref> [101] </ref>. <p> Ohsawa and Sakauchi suggest choosing x = 2=3 <ref> [100, 101] </ref>. Third, unlike the PR quadtree and PR k-d tree, a BD tree does not result in the partitioning of space into a collection of hyper-rectangles. It should be clear that the BD tree can be used for data of arbitrary dimensionality. <p> At this point, the brick that we will extract corresponds to the subtree of P's generalized k + -d tree consisting of the child nodes C, D, E, and F (i.e., these 23 This notion of minimum occupancy is also used in the BD tree <ref> [100, 101] </ref> (see Section 5.2). 24 Note that subsequent splits may result in region pages that span areas that are not contiguous but this is not a problem [89]). 25 We characterize the structure as a generalized k-d tree rather than a k-d tree because the partitions need not be cyclic. <p> The use of bit strings to represent the various regions in the BANG file is similar to that used in the BD tree <ref> [100, 101] </ref> 35 , while quite different from the one used in the multilevel grid file [78] 36 . Nevertheless, a key difference between the BANG file and the BD tree is the fact that the BD tree does not aggregate the nonleaf nodes of the structure into buckets.
Reference: [102] <author> B. C. Ooi, K. J. McDonell, and R. Sacks-Davis. </author> <title> Spatial k-d-tree: an indexing mechanism for spatial database. </title> <booktitle> In Proceedings of the Eleventh International Computer Software and Applications Conference COMPSAC, </booktitle> <pages> pages 433-438, </pages> <address> Tokyo, </address> <month> October </month> <year> 1987. </year> <note> [rectangles] D.5.1 </note>
Reference-contexts: Matsuyama, Hao, and Nagao [91] use the bucket generalized pseudo k-d tree in a geographic information system (see also the spatial k-d tree of Ooi, McDonell, and Sacks-Davis <ref> [102] </ref>, which is discussed in Section ?? of Chapter ??). O'Rourke [106, 107] also uses the bucket adaptive k-d tree, calling it a Dynamically Quantized Space (DQS), for cluster detection as well as for multidimensional histogramming to aid in focusing the Hough Transform (e.g., [27]).
Reference: [103] <author> J. A. Orenstein. </author> <title> Multidimensional tries used for associative searching. </title> <journal> Information Processing Letters, </journal> <volume> 14(4) </volume> <pages> 150-157, </pages> <month> June </month> <year> 1982. </year> <title> [points; associative searching; partial matching query; range query; relation; tree] D.1, </title> <address> D.5.2, D.7.2, D.8, A.1.3 </address>
Reference-contexts: Thus what we have done is marry a k-ary tree with the fixed-grid. This is the basis of the point quadtree [37] as well as trie-based representations such as the MX quadtree [122] and the PR quadtree <ref> [103, 124] </ref> which are all multidimensional generalizations of binary trees. They are discussed in Section 4. As the dimensionality of the space increases, each level of decomposition of the quadtree results in many new cells since the fanout value of the tree is high (i.e., 2 d ). <p> Again, as in the point k-d tree, in our discussion, we assume two-dimensional data and we test x coordinate values at the root and at even depths (given that the root is at depth 0), and y coordinate values at odd depths. Such a tree is described by Orenstein <ref> [103] </ref> who calls it a k-d trie. Using the terminology of Section 4.2 such a data structure would be called a PR k-d tree or a PR bintree. For the purpose of consistency with Section 4.2, we shall use the term PR k-d tree. <p> This is a good solution as long as the cluster contains b or less points, as otherwise we still need to make many partitions. The result is termed a bucket PR k-d tree (also known as a hybrid k-d trie <ref> [103] </ref>) and is shown in Figure 45 for the data in Figure 1 when the bucket capacity is 2. The bucket PR k-d tree assumes a cyclic partitioning. <p> The sharing is indicated by the broken lines. Furthermore, when a bucket size of 1 is used, the partition of space induced by EXCELL is equivalent to that induced by a PR k-d tree <ref> [103] </ref>, although the two structures differ by virtue of the presence of a directory in the case of EXCELL. D C E (0,100) (100,100) y (5,45) Denver (35,42) Chicago (27,35) Omaha (52,10) Mobile (62,77) Toronto (82,65) Buffalo (85,15) Atlanta (90,5) Miami x axis is split before the y axis.
Reference: [104] <author> J. A. Orenstein. </author> <title> A dynamic hash file for random and sequential accessing. </title> <editor> In M. Schkolnick and C. Thanos, editors, </editor> <booktitle> Proceedings of the Ninth International Conference on Very Large Data Bases (VLDB), </booktitle> <pages> pages 132-141, </pages> <address> Florence, </address> <month> October </month> <year> 1983. </year> <title> [points] D.7.2 </title>
Reference-contexts: It is interesting to note that the use of reversed bit interleaving with linear hashing seems to have been proposed independently by Burkhard [18] (who terms it shuffle order), Orenstein <ref> [104] </ref>, and Ouksel and Scheuer-mann [109] (see also [135]). This combination is applied to range searching by Burkhard [18] and Orenstein and Merrett [105], although they each used different search algorithms. <p> This has the advantage that at most two hash operations are required to determine the primary bucket to be accessed (see Exercise ?? in Section ?? of Chapter ??). 126 Orenstein <ref> [104] </ref> proposes a technique he terms multi-level order preserving linear hashing (MLOPLH) to be used with OPLH to deal with these problems. In particular, MLOPLH alleviates the sparseness problem by storing parts of the file in buckets at lower levels than n. <p> Given a large set of multidimensional point data, which of the bucket methods would you use? Take the volume of the data and its distribution into account. Can you support your choice using analytic methods? 3. Explain how MLOPLH <ref> [104] </ref> looks up a value v. 4. Explain how MLOPLH splits a bucket. 5.
Reference: [105] <author> J. A. Orenstein and T. H. Merrett. </author> <title> A class of data structures for associative searching. </title> <booktitle> In Proceedings of the Third ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 181-190, </pages> <address> Waterloo, Canada, </address> <month> April </month> <year> 1984. </year> <title> [points] D.6, </title> <publisher> D.7.2, A.1.4 </publisher>
Reference-contexts: The first mention of it was by Peano [112]. Bentley [9] attributes bit interleaving to McCreight as a way to use B-trees [22] to represent multidimensional data. The resulting B-tree is called an N-tree by White [144], while Orenstein and Merrett <ref> [105] </ref> term it a zkd Btree. Note that the result is different from the k-d-B-tree of Robinson [116] (see Section 7.1.1). It was proposed by Tropf and Herzog [139] to give a linear order on multidimensional data and accessing it via a binary search tree or balanced variant thereof. <p> Note that the result is different from the k-d-B-tree of Robinson [116] (see Section 7.1.1). It was proposed by Tropf and Herzog [139] to give a linear order on multidimensional data and accessing it via a binary search tree or balanced variant thereof. Orenstein and Merrett <ref> [105] </ref> use the term Z order to denote the resulting ordering while reviewing its use in a number of data structures in the context of range searching. <p> This combination is applied to range searching by Burkhard [18] and Orenstein and Merrett <ref> [105] </ref>, although they each used different search algorithms. Now, let us briefly review the mechanics of linear hashing and then give an example of its use with multidimensional data. Recall that a file implemented using linear hashing has both primary and overflow buckets.
Reference: [106] <author> J. O'Rourke. </author> <title> Dynamically quantized spaces for focusing the hough transform. </title> <booktitle> In Proceedings of the Sixth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 737-739, </pages> <address> Vancouver, </address> <month> August </month> <year> 1981. </year> <title> [points; Hough transform; dynamically quantized space; hierarchical organization] D.5.1 </title>
Reference-contexts: Matsuyama, Hao, and Nagao [91] use the bucket generalized pseudo k-d tree in a geographic information system (see also the spatial k-d tree of Ooi, McDonell, and Sacks-Davis [102], which is discussed in Section ?? of Chapter ??). O'Rourke <ref> [106, 107] </ref> also uses the bucket adaptive k-d tree, calling it a Dynamically Quantized Space (DQS), for cluster detection as well as for multidimensional histogramming to aid in focusing the Hough Transform (e.g., [27]).
Reference: [107] <author> J. O'Rourke and K. R. Sloan Jr. </author> <title> Dynamic quantization: two adaptive data structures for multidimensional spaces. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 6(3) </volume> <pages> 266-280, </pages> <month> May </month> <year> 1984. </year> <title> [points; Accumulator arrays; dynamic data structures; dynamics quantization; hierarchical data structures; Hough transform; k-d trees; multidimensional data structures; multidimensional histograms; pyramids] D.5.1, </title> <publisher> D.8 </publisher>
Reference-contexts: Matsuyama, Hao, and Nagao [91] use the bucket generalized pseudo k-d tree in a geographic information system (see also the spatial k-d tree of Ooi, McDonell, and Sacks-Davis [102], which is discussed in Section ?? of Chapter ??). O'Rourke <ref> [106, 107] </ref> also uses the bucket adaptive k-d tree, calling it a Dynamically Quantized Space (DQS), for cluster detection as well as for multidimensional histogramming to aid in focusing the Hough Transform (e.g., [27]). <p> O'Rourke [106, 107] also uses the bucket adaptive k-d tree, calling it a Dynamically Quantized Space (DQS), for cluster detection as well as for multidimensional histogramming to aid in focusing the Hough Transform (e.g., [27]). The DQP (denoting Dynamically Quantized Pyramid) <ref> [107, 128] </ref> is closely related to the DQS in the sense that it is also used in the same application. <p> Both this and the fixed-grid methods make use of a directory in the form of an array. An alternative is to use a recursive decomposition process to generate the partition into a fixed number of cells. An example of such a representation is the Dynamically Quantized Pyramid (DQP) <ref> [128, 107] </ref> which is a recursive decomposition into 2 d hyper-rectangular cells which need not be of equal size. The DQP requires a directory in the form of a tree and would also be of type D. Depth 3 is a generalization of depth 2.
Reference: [108] <author> E. J. Otoo. </author> <title> A mapping function for the directory of multidimensional extendible hashing. </title> <editor> In U. Dayal, G. Schlageter, and L. H. Seng, editors, </editor> <booktitle> Proceedings of the Tenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 493-506, </pages> <address> Singapore, </address> <month> August </month> <year> 1984. </year> <title> [linear hashing; grid file; PLOP hashing] D.7.2, </title> <publisher> D.8 </publisher>
Reference-contexts: This correspondence can be calculated by using MDEH (denoting Multidimensional Extendible Hashing <ref> [108] </ref> 42 ) which serves as the desired hashing function f thereby obviating the need for the directory shown in Figure 83. <p> In other words, we can use a variant of MDEH that permits the partitions for the different keys to proceed in arbitrary order. For example, assuming three-dimensional data, one possible key partition order would be zzxyzxxxxyy : : :. Such an ordering is achieved by modifying the MDEH function <ref> [93, 108] </ref> to keep track of the order in which the keys were partitioned. This is not needed when using a cyclic order as given the partition number and the cyclic order of the keys, we know the identity of the corresponding partitioning key.
Reference: [109] <author> M. Ouksel and P. Scheuermann. </author> <title> Storage mappings for multidimensional linear dynamic hashing. </title> <booktitle> In Proceedings of the Second ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 90-105, </pages> <address> Atlanta, </address> <month> March </month> <year> 1983. </year> <title> [points] D.7.2 </title>
Reference-contexts: It is interesting to note that the use of reversed bit interleaving with linear hashing seems to have been proposed independently by Burkhard [18] (who terms it shuffle order), Orenstein [104], and Ouksel and Scheuer-mann <ref> [109] </ref> (see also [135]). This combination is applied to range searching by Burkhard [18] and Orenstein and Merrett [105], although they each used different search algorithms. Now, let us briefly review the mechanics of linear hashing and then give an example of its use with multidimensional data.
Reference: [110] <author> M. H. Overmars. </author> <title> Geometric data structures for computer graphics: an overview. </title> <editor> In R. A. Earnshaw, editor, </editor> <booktitle> Theoretical Foundations of Computer Graphics and CAD, </booktitle> <pages> pages 21-49. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1988. </year> <note> [rectangles] D.8 </note>
Reference: [111] <author> M. H. Overmars and J. van Leeuwen. </author> <title> Dynamic multi-dimensional data structures based on quad- and k-d trees. </title> <journal> Acta Informatica, </journal> <volume> 17(3) </volume> <pages> 267-285, </pages> <year> 1982. </year> <title> [points] D.4.1, </title> <publisher> D.5.1, D.8 </publisher>
Reference-contexts: This process stops once N is exhausted. Thus, each level of the tree, with 21 The optimized point quadtree requires that all of the data points are known a priori. Overmars and van Leeuwen <ref> [111] </ref> discuss an alternative approach which is a dynamic formulation of the above method that is, the optimized point quadtree is built as the data points are inserted into it. <p> It is interesting to observe that one of the main reasons for the complexity of deletion in point quadtrees is the fact that the data points also serve to partition the space from which they are drawn. The pseudo quadtree of Overmars and van Leeuwen <ref> [111] </ref> simplifies deletion by using arbitrary points, not in the set of data points being represented, for the partitioning process. The pseudo quadtree is constructed by repeatedly partitioning the space into quadrants, subquadrants, etc., until each subquadrant contains at most one data point of the original set. <p> An alternative static data structure incorporating `adaptive partitioning' is the adaptive k-d tree of Fried-man, Bentley, and Finkel [49]. Unlike the standard k-d tree, and in the spirit of the pseudo quadtree of Over-mars and van Leeuwen <ref> [111] </ref> (see Section 4.1.2), data is only stored at the leaf nodes. In other words, the partition lines need not pass through the data points. Each interior node contains the median of the set (along one key) as the discriminator. <p> This approach is discussed by Overmars and van Leeuwen <ref> [111] </ref> (see also Willard [145]) who present two variations: the first is analogous to the optimized point quadtree and the 55 second to the pseudo quadtree.
Reference: [112] <author> G. </author> <title> Peano. Sur une courbe qui remplit toute une aire plaine. </title> <journal> Mathematische Annalen, </journal> <volume> 36 </volume> <pages> 157-160, 1890. </pages>
Reference-contexts: In the rest of this section, we give a brief historical background of its development and mention an interesting application. It is difficult to determine the origin of the notion of bit interleaving. The first mention of it was by Peano <ref> [112] </ref>. Bentley [9] attributes bit interleaving to McCreight as a way to use B-trees [22] to represent multidimensional data. The resulting B-tree is called an N-tree by White [144], while Orenstein and Merrett [105] term it a zkd Btree.
Reference: [regions] <author> D.6, </author> <month> A.1.4 139 </month>
Reference: [113] <author> M. Regnier. </author> <title> Analysis of grid file algorithms. </title> <journal> BIT, </journal> <volume> 25(2) </volume> <pages> 335-357, </pages> <year> 1985. </year> <title> [points; grid file analysis] D.4.2, </title> <publisher> D.8 </publisher>
Reference-contexts: Chicago Toronto Buffalo - (0,100) (100,100) y data of Figure 1 for bucket size 2: (a) the resulting partition of space, and (b) the tree representation. been applied by Fagin et al. to extendible hashing [33], Flajolet and Puech [38] to tries, Regnier to the grid file (see Section 7.2.1) <ref> [113] </ref>, and Tamminen to EXCELL (see Section 7.2.2) [133]. The advantage of the population model is that dependencies between various populations and the steady state can be determined with relative ease.
Reference: [114] <author> E. M. Reingold, J. Nievergelt, and N. Deo. </author> <title> Combinatorial Algorithms: Theory and Practice. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1977. </year> <title> [general] D.6 </title>
Reference-contexts: The overhead cost incurred by using Gray codes is that of conversion from a binary representation, which is linear in the size of the codeword <ref> [114] </ref>. Exercises 1. Write an algorithm to perform bit interleaving of the x and y coordinate values of a point in an efficient 66 manner. 2.
Reference: [115] <author> E. M. Reingold and R. E. Tarjan. </author> <title> On the greedy heuristic for complete matching. </title> <journal> SIAM Journal on Computing, </journal> <volume> 10(4) </volume> <pages> 676-681, </pages> <month> November </month> <year> 1981. </year> <title> [points; graph algorithms; matching; greedy heuritic; analysis of algorithms] D.8 </title>
Reference: [116] <author> J. T. Robinson. </author> <title> The k-d-b-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 10-18, </pages> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1981. </year> <title> [points] D.6, </title> <publisher> D.7, D.7.1 </publisher>
Reference-contexts: Bentley [9] attributes bit interleaving to McCreight as a way to use B-trees [22] to represent multidimensional data. The resulting B-tree is called an N-tree by White [144], while Orenstein and Merrett [105] term it a zkd Btree. Note that the result is different from the k-d-B-tree of Robinson <ref> [116] </ref> (see Section 7.1.1). It was proposed by Tropf and Herzog [139] to give a linear order on multidimensional data and accessing it via a binary search tree or balanced variant thereof. <p> This results in more complex searches. No such problems exist when the decomposition of the space spanned by the collections of objects in the nodes is disjoint. Examples of such methods include the R + -tree [36, 127, 129] which is really a k-d-B-tree <ref> [116] </ref> with bounding boxes around the portions of space resulting from the decomposition. <p> Section 7.1.6 describes a couple of static methods based on the adaptive k-d tree. 7.1.1 K-d-B-trees A simple example of a method that makes use of a tree directory is the k-d-B-tree <ref> [116] </ref>.
Reference: [117] <author> A. Rosenfeld, H. Samet, C. Shaffer, and R. E. Webber. </author> <title> Application of hierarchical data structures' to geographical information systems: phase ii. </title> <institution> Computer Science Department TR-1327, University of Maryland, College Park, MD, </institution> <month> September </month> <year> 1983. </year> <title> [general] D.4.2, </title> <publisher> A.2.1, A.2.1.1 </publisher>
Reference-contexts: The goal is to reduce pen plotting time by choosing the line segment to be output next whose endpoint is closest to the current pen position. Rosenfeld, Samet, Shaffer, and Webber make use of the PR quadtree in a geographic information system <ref> [117] </ref> as a means of representing point data in a consistent manner with region data that is represented using region quadtrees.
Reference: [118] <author> B. Salzberg. </author> <title> File structures: An analytic approach. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year> <title> [general] D.5.2 </title>
Reference-contexts: The second approach applies test compression techniques similar to those devised by Ohsawa and Sakauchi [100, 101] in their development of the BD tree which is closely related to the BANG file [42] and to a lesser extent the hB-tree <ref> [88, 89, 118] </ref> (see Section sec-tree-directory for more details about these two structures).
Reference: [119] <author> B. Salzberg. </author> <title> On indexing spatial and temporal data. </title> <journal> Information Systems, </journal> <volume> 19(6) </volume> <pages> 447-465, </pages> <month> September </month> <year> 1994. </year> <title> [points; temporal data; overview] D.7.1 </title>
Reference-contexts: The greater the number of such splits that take place, the more complicated the posting situation becomes. In fact, this complexity was later realized to cause a flaw in the original split and post algorithm for the hB-tree <ref> [29, 119] </ref> and was subsequently corrected as part of the hB -tree [30, 31]. (a) A B B x extA y BA hB-tree node and whose overflow is resolved by partitioning it thereby creating two hB-tree nodes having (c) and (d) as their generalized k + -d trees.
Reference: [120] <author> H. Samet. </author> <note> Deletion in k-dimensional quadtrees. (unpublished), 1977. [points] D.8 </note>
Reference: [121] <author> H. Samet. </author> <title> Deletion in two-dimensional quad trees. </title> <journal> Communications of the ACM, </journal> <volume> 23(12) </volume> <pages> 703-710, </pages> <month> December </month> <year> 1980. </year> <title> [points] D.4.1, </title> <publisher> D.8, A.7.1.5 </publisher>
Reference-contexts: This is usually a very expensive process, unless the deleted node is a leaf node or its sons are leaf nodes. In the rest of this section we describe a more complex, and more efficient, process developed by Samet <ref> [121] </ref>. It may be skipped on an initial reading. the exception of the deepest level, contains a maximum number of nodes. The deepest level is partially full but has no empty positions when using this array mapping. <p> Trees rooted at D and E are reinserted in quadrants NW and SE, respectively. The tree rooted at C replaces B as the son of F in subquadrant SW. Theoretical and empirical results for the above deletion method are described by Samet <ref> [121] </ref>. It is shown theoretically that for data that is uniformly distributed, the average number of nodes requiring reinsertion is reduced by a factor of 5/6 (i.e., 83%) when the replacement node satisfies criteria 1 and 2. <p> The empirical tests led to the following interesting observations. First, the number of comparison operations is proportional to log 4 N versus a considerably larger factor when using the deletion method of Finkel and Bentley [37]. Second, the total path length of the tree after deletion using Samet's method <ref> [121] </ref> decreases slightly, whereas when Finkel and Bentley's method [37] is used, the total path length increases significantly. This data is important because it correlates with the effective search time (see also [16, 84]). In other words, the smaller the total path length, the faster a node can be accessed. <p> This quantity is at a minimum when T is a complete tree. 6. Assuming a complete point quadtree of N nodes, let r (N ) denote the proportion of nodes that do not require reinsertion when using the deletion method of Samet <ref> [121] </ref>. Let A and B be the deleted and replacement node respectively where B is a node returned by the candidate selection procedure (see procedure FIND_CANDIDATE in Exercise 1). Assume further that the nodes are partitioned uniformly throughout the partition of the two-dimensional space rooted at A. <p> Why do the resulting trees get bushier when the point quadtree node deletion algorithm given by pro cedures ADJQUAD and NEWROOT is used? 9. Extend the deletion method of Samet <ref> [121] </ref> to handle d-dimensional point quadtrees and compute r (N ). 28 10. Write an algorithm, BUILD_PSEUDO_QUADTREE, to construct a pseudo quadtree for two-dimensional data. 11.
Reference: [122] <author> H. Samet. </author> <title> The quadtree and related hierarchical data structures. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 187-260, </pages> <month> June </month> <year> 1984. </year> <title> [general] D.1, </title> <publisher> A.P </publisher>
Reference-contexts: Thus what we have done is marry a k-ary tree with the fixed-grid. This is the basis of the point quadtree [37] as well as trie-based representations such as the MX quadtree <ref> [122] </ref> and the PR quadtree [103, 124] which are all multidimensional generalizations of binary trees. They are discussed in Section 4.
Reference: [123] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year> <title> [general] D.4.2 </title>
Reference-contexts: The overlay operation is implemented by traversing the two trees in tandem and making descents only if encountering two nonleaf nodes in the same position in the tree (for more details, see <ref> [123, Chapter 6] </ref>). When the data is not uniformly distributed (e.g., when it is clustered), then the PR quadtree may contain many empty nodes, and, may become unbalanced. The imbalance may be overcome by aggregating the blocks corresponding to the nodes into larger blocks termed buckets.
Reference: [124] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Thus what we have done is marry a k-ary tree with the fixed-grid. This is the basis of the point quadtree [37] as well as trie-based representations such as the MX quadtree [122] and the PR quadtree <ref> [103, 124] </ref> which are all multidimensional generalizations of binary trees. They are discussed in Section 4. As the dimensionality of the space increases, each level of decomposition of the quadtree results in many new cells since the fanout value of the tree is high (i.e., 2 d ).
Reference: [general] <author> D.1, A.P, </author> <month> A.1 </month>
Reference: [125] <author> B. Seeger. </author> <title> Design and implementation of multidimensional access methods. </title> <type> PhD thesis, </type> <institution> University of Bremen, Bremen, Germany, </institution> <year> 1989. </year> <title> (in German). [points] D.7.1, </title> <publisher> D.8 </publisher>
Reference-contexts: This means that the maximum number of pages with which a can be merged (i.e., buddies) is even greater than d (see <ref> [125, 126] </ref>). To see why this is true, recall that the B-regions of the son pages of a region page p can be represented by a number of different generalized k-d tries (whereas there is only one way to do so with a PR k-d tree).
Reference: [126] <author> B. Seeger and H. P. Kriegel. </author> <title> The buddy-tree: an efficient and robust access method for spatial data base systems. </title> <editor> In D. McLeod, R. Sacks-Davis, and H. Schek, editors, </editor> <booktitle> Proceedings of the 16th International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 590-601, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year> <title> [points] D.7.1, </title> <publisher> D.8 </publisher>
Reference-contexts: The effects of clustering can be further mitigated by increasing the capacity of the buckets. Below, we discuss a number of extensions of the bucket generalized k-d trie (i.e., the multilevel grid file 29 [78] and the buddy-tree <ref> [126] </ref>) which have additional desirable characteristics. They differ from the bucket generalized k-d trie in that, as in the k-d-B-tree (and the LSD tree), they also aggregate the nonleaf nodes of the bucket generalized k-d trie. We use the term k-d-B-trie to refer to this general class of representations. <p> This leads to many possible different partitions of the underlying space and configurations of resulting point pages. We term the result of the application of each halving operation to U a B-rectangle <ref> [126] </ref>. Thus, we see that u 1 and u 2 are B-rectangles. Depending on the configuration of the underlying space, we often find that p i covers just a very small part of u i . <p> This problem is avoided by requiring that the B-partition that corresponds to each region page forms a generalized k-d trie 32 (such a B-partition is termed regular <ref> [126] </ref>). <p> This means that the maximum number of pages with which a can be merged (i.e., buddies) is even greater than d (see <ref> [125, 126] </ref>). To see why this is true, recall that the B-regions of the son pages of a region page p can be represented by a number of different generalized k-d tries (whereas there is only one way to do so with a PR k-d tree). <p> For example, in Figure 60, a can be merged with b 1 , b 2 , or b 3 . There are a number of variants of the k-d-B-trie. The most notable are the multilevel grid file [78] and the buddy-tree <ref> [126] </ref>. <p> Note that when the keys are clustered, methods such as the k-d-B-trie do not yield a very good partition of the underlying space. However, results of experiments with the buddy-tree <ref> [126] </ref> show that the fact that empty B-rectangles are not represented explicitly ameliorates this drawback to such an extent that it is no longer significant.
Reference: [127] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R + -tree: a dynamic index for multi-dimensional objects. </title> <editor> In P. M. Stocker and W. Kent, editors, </editor> <booktitle> Proceedings of the 13th International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 71-79, </pages> <address> Brighton, United Kingdom, </address> <month> September </month> <year> 1987. </year> <institution> (Also University of Maryland Computer Science TR-1795). D.7, D.7.1 </institution>
Reference-contexts: This results in more complex searches. No such problems exist when the decomposition of the space spanned by the collections of objects in the nodes is disjoint. Examples of such methods include the R + -tree <ref> [36, 127, 129] </ref> which is really a k-d-B-tree [116] with bounding boxes around the portions of space resulting from the decomposition. <p> This decision is based purely on the k-d tree splits. Thus we see that the VAMSplit R-tree is related to the VAMSplit k-d tree in the same way that the R + -tree <ref> [36, 127, 129] </ref> is related to the k-d-B-tree (see Section ?? of Chapter ??). In fact, a more appropriate name for the VAMSplit R-tree is a VAMSplit R + -tree. Exercises 1.
Reference: [128] <author> K. R. Sloan Jr. </author> <title> Dynamically quantized pyramids. </title> <booktitle> In Proceedings of the Sixth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 734-736, </pages> <address> Vancouver, </address> <month> August </month> <year> 1981. </year> <title> [points; pyramid; dynamically quantized pyramid; Hough transform] D.5.1, </title> <publisher> D.8 </publisher>
Reference-contexts: O'Rourke [106, 107] also uses the bucket adaptive k-d tree, calling it a Dynamically Quantized Space (DQS), for cluster detection as well as for multidimensional histogramming to aid in focusing the Hough Transform (e.g., [27]). The DQP (denoting Dynamically Quantized Pyramid) <ref> [107, 128] </ref> is closely related to the DQS in the sense that it is also used in the same application. <p> Both this and the fixed-grid methods make use of a directory in the form of an array. An alternative is to use a recursive decomposition process to generate the partition into a fixed number of cells. An example of such a representation is the Dynamically Quantized Pyramid (DQP) <ref> [128, 107] </ref> which is a recursive decomposition into 2 d hyper-rectangular cells which need not be of equal size. The DQP requires a directory in the form of a tree and would also be of type D. Depth 3 is a generalization of depth 2.
Reference: [129] <author> M. Stonebraker, T. Sellis, and E. Hanson. </author> <title> An analysis of rule indexing implementations in data base systems. </title> <booktitle> In Proceedings of the First International Conference on Expert Database Systems, </booktitle> <pages> pages 353-364, </pages> <address> Charleston, SC, </address> <month> April </month> <year> 1986. </year> <note> [rectangles] D.7, D.7.1 140 </note>
Reference-contexts: This results in more complex searches. No such problems exist when the decomposition of the space spanned by the collections of objects in the nodes is disjoint. Examples of such methods include the R + -tree <ref> [36, 127, 129] </ref> which is really a k-d-B-tree [116] with bounding boxes around the portions of space resulting from the decomposition. <p> This decision is based purely on the k-d tree splits. Thus we see that the VAMSplit R-tree is related to the VAMSplit k-d tree in the same way that the R + -tree <ref> [36, 127, 129] </ref> is related to the k-d-B-tree (see Section ?? of Chapter ??). In fact, a more appropriate name for the VAMSplit R-tree is a VAMSplit R + -tree. Exercises 1.
Reference: [130] <author> V. Strassen. </author> <title> Gaussian elimination is not optimal. </title> <journal> Numerische Mathematik, </journal> <volume> 13(4) </volume> <pages> 354-356, </pages> <month> August </month> <year> 1969. </year> <title> [matrices] D.8 </title>
Reference: [131] <author> M. Tamminen. </author> <title> The EXCELL method for efficient geometric access to data. </title> <journal> Acta Polytechnica Scan-dinavica, </journal> <note> 1981. (Mathematics and Computer Science Series No. 34). [regions] D.7.2, A.1.3 </note>
Reference-contexts: This results in doubling the total number of grid cells to yield 2 g grid cells. This is the basis of the EXCELL <ref> [131] </ref> method. An alternative approach is to order the grid cells according to one of a subset of the one-dimensional order-ings of the underlying space described in Section 6 and use linear hashing (recall Section ?? of Chapter ??) to resolve an overflowing grid cell. <p> This variation is a multidimensional counterpart of the directory used in extendible hashing [33] and is the basis of EXCELL <ref> [131] </ref> (see Section 7.2.2). Its advantage is that a refinement of the grid partition will only cause a change in the structure of the directory if the shortest interval is split, in which case the grid directory will double in size. <p> Give an intuitive explanation of why this is so. 4. How can you improve the performance of the twin grid file discussed in Exercise 3? 5. Calculate the expected size of the grid directory for uniformly distributed data. 7.2.2 EXCELL The EXCELL method of Tamminen <ref> [131] </ref> is similar in spirit to the grid file in that it also makes use of a grid directory and retrieves all records with at most two disk accesses.
Reference: [132] <author> M. Tamminen. </author> <title> Order preserving extendible hashing and bucket tries. </title> <journal> BIT, </journal> <volume> 21(4) </volume> <pages> 419-435, </pages> <year> 1981. </year>
Reference-contexts: In essence, use of linear hashing enables the hash table to grow by just one hash bucket instead of doubling the number of hash buckets as is the case with some hashing methods such as EXHASH [33], the extendible hashing function that forms the basis of EXCELL <ref> [132] </ref>. Although linear hashing has been described in Section ?? of Chapter ??, we review its basic principles here so that our discussion of its adaptation to multidimensional data can be meaningful.
Reference: [points] <institution> D.7.2 </institution>
Reference: [133] <author> M. Tamminen. </author> <title> Performance analysis of cell based geometric file organizations. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 24(2) </volume> <pages> 168-181, </pages> <month> November </month> <year> 1983. </year> <title> [regions; file organization schemes; efficient spatial access; geometric data; polygon network; fixed cell methods; address computation; extendible cell methods] D.4.2 </title>
Reference-contexts: of Figure 1 for bucket size 2: (a) the resulting partition of space, and (b) the tree representation. been applied by Fagin et al. to extendible hashing [33], Flajolet and Puech [38] to tries, Regnier to the grid file (see Section 7.2.1) [113], and Tamminen to EXCELL (see Section 7.2.2) <ref> [133] </ref>. The advantage of the population model is that dependencies between various populations and the steady state can be determined with relative ease.
Reference: [134] <author> M. </author> <title> Tamminen. </title> <journal> Comment on quad- and octtrees. Communications of the ACM, </journal> <volume> 27(3) </volume> <pages> 248-249, </pages> <month> March </month> <year> 1984. </year> <title> [regions; digital images; image encoding] D.5, </title> <publisher> A.1.3, A.2.1.2 </publisher>
Reference-contexts: In fact, we will use this term whenever we need to differentiate it from the trie-based adaptation. There is no consistent terminology for the trie-based variant although k-d trie would probably be the most appropriate. The region quadtree counterpart of the k-d tree is termed a bintree <ref> [134] </ref>. In the rest of this section we discuss a number of different variations of the k-d tree with a particular emphasis on the point k-d tree (i.e., the one that organizes the data to be stored rather than organizing the embedding space from which the data is drawn).
Reference: [135] <author> M. Tamminen. </author> <title> Efficient geometric access to a multirepresentation geo-database. </title> <journal> Geo-Processing, </journal> <volume> 2 </volume> <pages> 177-196, </pages> <year> 1984. </year> <note> [lines] D.7.2 </note>
Reference-contexts: It is interesting to note that the use of reversed bit interleaving with linear hashing seems to have been proposed independently by Burkhard [18] (who terms it shuffle order), Orenstein [104], and Ouksel and Scheuer-mann [109] (see also <ref> [135] </ref>). This combination is applied to range searching by Burkhard [18] and Orenstein and Merrett [105], although they each used different search algorithms. Now, let us briefly review the mechanics of linear hashing and then give an example of its use with multidimensional data.
Reference: [136] <author> M. Tamminen. </author> <title> On search by address computation. </title> <journal> BIT, </journal> <volume> 25(1) </volume> <pages> 135-147, </pages> <year> 1985. </year> <title> [points] D.5.2 </title>
Reference-contexts: One of the shortcomings of some trie-based representations such as the PR k-d tree (as well as the PR quadtree) is that when the data is not uniformly distributed (e.g., when the data is clustered) 18 , the tree contains 18 See <ref> [136] </ref> for an analysis of this situation. 58 (a) Atlanta Miami Mobile Toronto Buffalo Omaha Chicago Denver (0,100) (100,100) y (5,45) Denver (35,42) Chicago (27,35) Omaha (52,10) Mobile (62,77) Toronto (82,65) Buffalo (85,15) Atlanta (90,5) Miami many empty nodes and, thereby, becomes unbalanced.
Reference: [137] <author> S. Tanimoto and T. Pavlidis. </author> <title> A hierarchical data structure for picture processing. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 4(2) </volume> <pages> 104-119, </pages> <month> June </month> <year> 1975. </year> <note> [regions] D.5.1, A.1.4, A.8.3 </note>
Reference-contexts: This is especially useful if the data is dynamic. The DQP addresses the same problem as the DQS with the aid of a complete bucket pseudo quadtree which is known as a pyramid <ref> [137] </ref> (see Section ?? of Chapter ?? for more details). Thus for k attributes or dimensions it is a full balanced tree where each nonleaf node has 2 k sons. In this case, the number of buckets (i.e., parameter regions), and the relationship between fathers and sons are fixed.
Reference: [138] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1984. </year> <title> [general] D.8 </title>
Reference: [139] <author> H. Tropf and H. Herzog. </author> <title> Multidimensional range search in dynamically balanced trees. </title> <journal> Angewandte Informatik, </journal> <volume> 23(2) </volume> <pages> 71-77, </pages> <month> February </month> <year> 1981. </year> <title> [points] D.6 </title>
Reference-contexts: Range searching using a tree-based representation of the result of applying a one-dimensional ordering is fairly straightforward. Below we show how it is performed for a binary search tree by an algorithm proposed by Tropf and Herzog <ref> [139] </ref>. We use Figure 48 which is the binary search tree corresponding to the key values of Figure 1 encoded using bit interleaving as in Figure 47. The range is specified by the minimum and maximum codes in the search area. <p> Experiments reported by Tropf and Herzog <ref> [139] </ref> show that given N records, for small hypercube ranges, the average number of records inspected is O (d log 2 N + F ), where F is the number of records found. <p> The resulting B-tree is called an N-tree by White [144], while Orenstein and Merrett [105] term it a zkd Btree. Note that the result is different from the k-d-B-tree of Robinson [116] (see Section 7.1.1). It was proposed by Tropf and Herzog <ref> [139] </ref> to give a linear order on multidimensional data and accessing it via a binary search tree or balanced variant thereof.
Reference: [140] <author> P. M. Vaidya. </author> <title> Geometry helps in matching. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 422-425, </pages> <address> Chicago, IL, </address> <month> May </month> <year> 1988. </year> <title> [points] D.8 </title>
Reference: [141] <author> V. K. Vaishnavi. </author> <title> Multidimensional height-balanced trees. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 33(4) </volume> <pages> 334-343, </pages> <month> April </month> <year> 1984. </year> <title> [points] D.5.1, </title> <publisher> D.8 </publisher>
Reference-contexts: This does not have an effect on searching. However, deletion will be considerably simpler in the dynamic pseudo k-d tree than in the dynamic optimized k-d tree. Methods such as the dynamic optimized k-d tree and the dynamic pseudo k-d tree are characterized by Vaishnavi <ref> [141] </ref> as yielding `severely' balanced trees in that they are generalizations of complete binary trees for one-dimensional data.
Reference: [142] <author> J. Vuillemin. </author> <title> A data structure for manipulating priority queues. </title> <journal> Communications of the ACM, </journal> <volume> 21(4) </volume> <pages> 309-315, </pages> <month> April </month> <year> 1978. </year> <title> [data structures; priority queues] D.3 </title>
Reference-contexts: If no such point exists, then leave the node empty. For N points, this structure uses O (N ) storage (see Exercise 1), and requires O (N log 2 N ) time to build (see Exercise 6). 12 A Cartesian tree <ref> [142] </ref> is an alternative. See Exercises 17 and 18. 11 For example, Figure 7 is the priority search tree for the data of Figure 1. <p> In the text, we characterized a priority search tree as variant of a range tree in x and a heap (i.e., priority queue) in y. The priority search tree is somewhat wasteful of space as the nonleaf nodes duplicate some of the information stored in the leaf nodes. Vuillemin <ref> [142] </ref> defines a Cartesian tree which is a binary search tree in x and a heap in y. In this case, each point (a; b) is stored at just one node that is, both nonleaf and leaf nodes contain data.
Reference: [143] <author> D. A. White and R. Jain. </author> <title> Algorithms and strategies for similarity retrieval. </title> <type> Technical Report VCL-96-101, </type> <institution> Visual Computing Laboratory, University of California, </institution> <address> San Diego, </address> <year> 1996. </year> <title> http://vision.ucsd.edu/papers/simret. [points; feature points; nearest neighbor search; similarity retrieval; medium and high dimensional indexing; approximate queries; image databases] D.5.1, </title> <publisher> D.7.1, D.8 </publisher>
Reference-contexts: In particular, at each level of subdivision, the discriminator is chosen to be the key for which the spread of the values of the key is a maximum. This spread can be measured by any convenient statistic such as the variance (e.g., the VAMSplit k-d tree <ref> [143] </ref> which is described in greater detail in Section 7.1), the distance from the minimum to the maximum value (usually normalized with respect to the median value), etc. <p> Thus they are often characterized as bottom-up data structures. A pair of related data structures are the VAMSplit k-d tree (denoting variance approximate median split) <ref> [143] </ref> and the VAMSplit R-tree [143]. They differ from the LSD tree, k-d-B-tree, hB-tree, and BANG file in that they are static structures where the partitions (i.e., splits) are made in a top-down manner on the basis of knowledge of the entire data set. The VAMSplit k-d tree [143] is really <p> Thus they are often characterized as bottom-up data structures. A pair of related data structures are the VAMSplit k-d tree (denoting variance approximate median split) <ref> [143] </ref> and the VAMSplit R-tree [143]. They differ from the LSD tree, k-d-B-tree, hB-tree, and BANG file in that they are static structures where the partitions (i.e., splits) are made in a top-down manner on the basis of knowledge of the entire data set. The VAMSplit k-d tree [143] is really a bucket variant of an <p> median split) <ref> [143] </ref> and the VAMSplit R-tree [143]. They differ from the LSD tree, k-d-B-tree, hB-tree, and BANG file in that they are static structures where the partitions (i.e., splits) are made in a top-down manner on the basis of knowledge of the entire data set. The VAMSplit k-d tree [143] is really a bucket variant of an adaptive k-d tree in the sense that each leaf node corresponds to a disk bucket or block of capacity b and thus we only split a set of elements if its cardinality exceeds b. Notice that the tree need not be complete. <p> Thus 95 the partitioning position is not necessarily the median value along the partitioning axis, although it is usually within a relatively close range of the median (hence the use of the qualifier approximate median split) <ref> [143] </ref>. In particular, assuming a set of N nodes, if N 2b, then we choose the median value as the partitioning position so that the left son has bN=2c elements while the right son has N bN=2c elements. <p> The result is termed a VAMSplit R-tree <ref> [143] </ref>. However, unlike the real R-tree, minimization of overlap or coverage plays no role in deciding which internal nodes should be aggregated. This decision is based purely on the k-d tree splits.
Reference: [144] <author> M. White. N-trees: </author> <title> large ordered indexes for multi-dimensional space. </title> <institution> Statistical research division, US Bureau of the Census, </institution> <address> Washington, DC, </address> <year> 1982. </year> <title> [points] D.6, </title> <publisher> D.8, A.1.4 </publisher>
Reference-contexts: Experiments reported by Tropf and Herzog [139] show that given N records, for small hypercube ranges, the average number of records inspected is O (d log 2 N + F ), where F is the number of records found. White <ref> [144] </ref> shows how to perform the same task when using a B-tree as the underlying representation with the same order of execution time. <p> It is difficult to determine the origin of the notion of bit interleaving. The first mention of it was by Peano [112]. Bentley [9] attributes bit interleaving to McCreight as a way to use B-trees [22] to represent multidimensional data. The resulting B-tree is called an N-tree by White <ref> [144] </ref>, while Orenstein and Merrett [105] term it a zkd Btree. Note that the result is different from the k-d-B-tree of Robinson [116] (see Section 7.1.1).
Reference: [145] <author> D. E. Willard. </author> <title> Balanced forests of k-d trees as a dynamic data structure. </title> <institution> Aiken Computation Lab technical report TR-23-78, Harvard University, </institution> <address> Cambridge, </address> <year> 1978. </year> <title> [points] D.5.1 </title>
Reference-contexts: This approach is discussed by Overmars and van Leeuwen [111] (see also Willard <ref> [145] </ref>) who present two variations: the first is analogous to the optimized point quadtree and the 55 second to the pseudo quadtree.
Reference: [146] <author> D. E. Willard. </author> <title> Polygon retrieval. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(1) </volume> <pages> 149-165, </pages> <month> February </month> <year> 1982. </year> <title> [points] D.4.1, </title> <publisher> D.8 </publisher>
Reference-contexts: To handle more complex search regions such as those formed by arbitrary hyperplanes (rather than ones that are parallel to one of the attribute axes as in our examples) as well as convex polygons, Willard <ref> [146] </ref> defines a polygon tree where the x-y plane is subdivided by J lines that need not be orthogonal, although 29 A 1 2 3 13 4 876 Problem: Find all nodes within radius r of point A Solution: If the root is in region I (I=113), then continue to search <p> Perform an average case analysis for a region query in a point quadtree. 6. What are the restrictions on the choice of subdivision lines in Willard's polygon tree <ref> [146] </ref>? 4.2 Trie-based Quadtrees From Section 4.1 we saw that for the point quadtree, the points of decomposition are the data points themselves (e.g., in Figure 11, Chicago at location (35,42) subdivides the two-dimensional space into four rectangular regions).
Reference: [147] <author> D. S. Wise. </author> <title> Representing matrices as quadtrees for parallel processors. </title> <journal> Information Processing Letters, </journal> <volume> 20(4) </volume> <pages> 195-199, </pages> <month> May </month> <year> 1985. </year> <title> [matrices] D.8 </title>
Reference: [148] <author> D. S. Wise. </author> <title> Matrix algebra and applicative programming. </title> <editor> In G. Kahn, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture Theoretical Aspects of Computer Science, </booktitle> <pages> pages 134-153, </pages> <address> Portland, OR, </address> <year> 1987. </year> <note> (Also Lecture Notes in Computer Science 274, Springer-Verlag, Berlin, </note> <year> 1987). </year>
Reference-contexts: The MX quadtree is used in a number of applications. It can serve as the basis of a quadtree matrix manipulation system (see Exercises 6-10). The goal is to take advantage of the sparseness of matrices to achieve space and execution time efficiencies (e.g., <ref> [1, 148, 149] </ref>.
Reference: [matrices; algorithms] <institution> D.4.2 141 </institution>
Reference: [149] <author> D. S. Wise and J. Franco. </author> <title> Costs of quadtree representation of non-dense matrices. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9(3) </volume> <pages> 282-296, </pages> <month> July </month> <year> 1990. </year> <note> (Also Indiana University Computer Science Technical Report No. 229, Bloomington, Indiana, October 1987). [matrices] D.4.2 </note>
Reference-contexts: The MX quadtree is used in a number of applications. It can serve as the basis of a quadtree matrix manipulation system (see Exercises 6-10). The goal is to take advantage of the sparseness of matrices to achieve space and execution time efficiencies (e.g., <ref> [1, 148, 149] </ref>.
Reference: [150] <author> I. H. Witten and B. Wyvill. </author> <title> On the generation and use of space-filling curves. </title> <journal> Software Practice and Experience, </journal> <volume> 13(6) </volume> <pages> 519-525, </pages> <month> June </month> <year> 1983. </year> <note> [regions] D.8, A.1.4 142 </note>
References-found: 158

