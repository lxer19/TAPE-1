URL: http://www.cs.dartmouth.edu/~kobourov/gd.ps
Refering-URL: http://www.cs.dartmouth.edu/~kobourov/
Root-URL: http://www.cs.dartmouth.edu
Email: duncan@jhu.edu  goodrich@jhu.edu  kobourov@cs.jhu.edu  
Title: Balanced Aspect Ratio Trees and Their Use for Drawing Very Large Graphs  
Author: Christian A. Duncan Michael T. Goodrich Stephen G. Kobourov 
Affiliation: Center for Geometric Computing The Johns Hopkins University  Center for Geometric Computing The Johns Hopkins University  Center for Geometric Computing The Johns Hopkins University  
Abstract: We describe a new approach for cluster-based drawing of very large graphs, which obtains clusters by using binary space partition (BSP) trees. We also introduce a novel BSP-type decomposition, called the balanced aspect ratio (BAR) tree, which has a number of interesting properties. The BAR tree guarantees that the cells produced are convex and have bounded aspect ratios. In addition, the tree depth is O(log n), and its construction takes O(n log n) time, where n is the number of points. We show that the BAR tree can be used to recursively divide a graph into subgraphs of roughly equal size, such that the drawing of each subgraph has a balanced aspect ratio. As a result, we obtain a representation of a graph as a collection of O(log n) layers, where each succeeding layer represents the graph in an increasing level of detail. The algorithm does not rely on any specific properties of the graph, other than its ability to be initially embedded (so that we can then apply our BSP clustering technique). The overall running time of the algorithm is O(n log n + m + D 0 (G)), where n and m are the number of vertices and edges of the graph G, and D 0 (G) is the time it takes to obtain an initial embedding of G. In particular, if the graph is planar each layer is a graph drawn with straight lines and without crossings on the n fi n grid and the running time reduces to O(n log n).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arya, D. M. Mount, N. S. Netanyahu, R. Silverman, and A. Wu. </author> <title> An optimal algorithm for approximate nearest neighbor searching. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 573-582, </pages> <year> 1994. </year>
Reference-contexts: But depth is also important, for a deep hierarchy of clusterings would be computationally expensive to traverse and would not provide very balanced clusters. The balanced box-decomposition tree of Arya et al <ref> [1, 2] </ref> has O (log n) depth and has regions with good aspect ratio, but it sacrifices convexity by introducing holes into the middle of regions, which makes this data structure less attractive for use in clustering for graph drawing applications.
Reference: [2] <author> Sunil Arya and David M. Mount. </author> <title> Approximate range searching. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 172-181, </pages> <year> 1995. </year>
Reference-contexts: But depth is also important, for a deep hierarchy of clusterings would be computationally expensive to traverse and would not provide very balanced clusters. The balanced box-decomposition tree of Arya et al <ref> [1, 2] </ref> has O (log n) depth and has regions with good aspect ratio, but it sacrifices convexity by introducing holes into the middle of regions, which makes this data structure less attractive for use in clustering for graph drawing applications.
Reference: [3] <author> Juraj Bosak. </author> <title> Decomposition of Graphs. </title> <publisher> Kluwer Academic Publishers, Holland, </publisher> <year> 1990. </year>
Reference-contexts: Optimizing such properties is not always easy, as many such optimizations are related to the well-known graph partitioning problem <ref> [3] </ref>, which is NP-hard. Nevertheless, once a clustering has been determined, we can generate the layers in a hierarchical drawing of the graph, with the layer depth (i.e., number of layers) being determined by the depth of the recursive clustering hierarchy.
Reference: [4] <author> P. B. Callahan and S. R. Kosaraju. </author> <title> A decomposition of multidimensional point sets with applications to k-nearest-neighbors and n-body potential fields. </title> <journal> J. ACM, </journal> <volume> 42 </volume> <pages> 67-90, </pages> <year> 1995. </year>
Reference-contexts: For example, the standard k-d tree and its derivates (e.g., see [13, 22]), which use axis-parallel lines to recursively divide the number of points in a region in half, maintain every criteria but the balanced aspect ratio. Likewise, quad-trees and fair-split trees (e.g., see <ref> [4, 22] </ref>), which always split by a line parallel to a coordinate axis to recursively divide the area of a region more or less in half, maintain balanced aspect ratio but can have a depth that is fi (n).
Reference: [5] <author> M. Chrobak and S. Nakano. </author> <title> Minimum-width grid drawings of plane graphs. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 104-110. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross <ref> [5, 6, 10, 24, 25, 28] </ref>. Once the graph drawing is defined, we build a binary space partition tree on the vertices of this drawing.
Reference: [6] <author> H. de Fraysseix, J. Pach, and R. Pollack. </author> <title> Small sets supporting Fary embeddings of planar graphs. </title> <booktitle> In Proc. 20th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 426-433, </pages> <year> 1988. </year>
Reference-contexts: For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross <ref> [5, 6, 10, 24, 25, 28] </ref>. Once the graph drawing is defined, we build a binary space partition tree on the vertices of this drawing. <p> Moreover, C is embedded with straight lines and no crossings on the n fi n fi k grid, where k = O (log n). Proof: We begin with a planar grid embedding with straight-line edges <ref> [6, 10, 24] </ref> and then the original layer, G k , is planar. Since each successive layer is a proper subgraph of the previous layer, it too must be planar and drawn without edge crossings.
Reference: [7] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction In the past decade hundreds of graph drawing algorithms have been developed (e.g., see <ref> [7] </ref>), and research in methods for visually representing graphical information is now a thriving area with several different emphases. One general emphasis in graph drawing research is directed at algorithms that display an entire graph, with each vertex and edge explicitly depicted. <p> Given a graph G = (V; E), where n = jV j and m = jEj, we can use any existing method to embed it, provided that method places vertices at distinct points in the plane (e.g., see <ref> [7, 16, 27] </ref>). For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross [5, 6, 10, 24, 25, 28].
Reference: [8] <author> P. Eades and Q. W. Feng. </author> <title> Multilevel visualization of clustered graphs. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> 1190:101-??, </address> <year> 1997. </year>
Reference-contexts: y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by NSF under Grant CCR-9625289. 1 be given as input along with the graph itself, then several authors give various algorithms for displaying these clusters in two or three dimensions <ref> [8, 9, 11, 12, 20] </ref>. If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation [19, 21, 26]. <p> This approach allows the graph to be represented by a sequence of drawings of increasing detail. As illustrated by Eades and Feng <ref> [8] </ref>, this hierarchical approach to drawing large graphs can be very effective. Thus, our interest in this paper is to further the study of methods for producing good graph clusterings that can be used for graph drawing purposes. <p> Thus, any such BSP tree defined on the points corresponding to vertices of G naturally defines a hierarchical clustering of the nodes of G. Such a clustering could then be used, for example, with an algorithm like that of Eades and Feng <ref> [8] </ref>, who present a technique for drawing a 3-dimensional representation of a clustered graph. 1.2 Related Work on BSP Trees The main problem with using BSP trees to define clusters for a graph drawing algorithm is that previous methods for constructing BSP trees do not give rise to clustered drawings that <p> The goal of our VLGD algorithm is to produce a 3-dimensional representation C of the embedded graph G given a BSP tree T . Similar to <ref> [8] </ref> we define the clustered graph C = (G; T ) to be the graph G, and the BSP tree T , such that the vertices of G coincide with the leaves of T . <p> Alternatively, we can redefine the clusters at each level to be the connect components of vertices inside each cluster region of the BAR tree. With this definition of clusters we could then use the algorithm of Eades and Feng <ref> [8] </ref> to produce a new clustered embedding of the planar graph so as to have no edge or region crossings. 4.2 Extensions Throughout this paper we do not discuss the cut sizes produced by our algorithm, that is the number of edges intersected by a cut line in the BAR tree.
Reference: [9] <author> P. Eades, Q. W. Feng, and X. Lin. </author> <title> Straight-line drawing algorithms for hierarchical graphs and clustered graphs. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> 1190:113-??, </address> <year> 1997. </year>
Reference-contexts: y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by NSF under Grant CCR-9625289. 1 be given as input along with the graph itself, then several authors give various algorithms for displaying these clusters in two or three dimensions <ref> [8, 9, 11, 12, 20] </ref>. If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation [19, 21, 26].
Reference: [10] <author> I. Fary. </author> <title> On straight lines representation of planar graphs. </title> <journal> Acta Sci. Math. Szeged., </journal> <volume> 11 </volume> <pages> 229-233, </pages> <year> 1948. </year>
Reference-contexts: For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross <ref> [5, 6, 10, 24, 25, 28] </ref>. Once the graph drawing is defined, we build a binary space partition tree on the vertices of this drawing. <p> Moreover, C is embedded with straight lines and no crossings on the n fi n fi k grid, where k = O (log n). Proof: We begin with a planar grid embedding with straight-line edges <ref> [6, 10, 24] </ref> and then the original layer, G k , is planar. Since each successive layer is a proper subgraph of the previous layer, it too must be planar and drawn without edge crossings.
Reference: [11] <author> Q.-W. Feng, R. F. Cohen, and P. Eades. </author> <title> How to draw a planar clustered graph. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> 959:21-??, </address> <year> 1995. </year>
Reference-contexts: y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by NSF under Grant CCR-9625289. 1 be given as input along with the graph itself, then several authors give various algorithms for displaying these clusters in two or three dimensions <ref> [8, 9, 11, 12, 20] </ref>. If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation [19, 21, 26].
Reference: [12] <author> Q.-W. Feng, R. F. Cohen, and P. Eades. </author> <title> Planarity for clustered graphs. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> 979:213-??, </address> <year> 1995. </year>
Reference-contexts: y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by NSF under Grant CCR-9625289. 1 be given as input along with the graph itself, then several authors give various algorithms for displaying these clusters in two or three dimensions <ref> [8, 9, 11, 12, 20] </ref>. If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation [19, 21, 26].
Reference: [13] <author> J. H. Friedman, J. L. Bentley, and R. A. Finkel. </author> <title> An algorithm for finding best matches in logarithmic expected time. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 3 </volume> <pages> 209-226, </pages> <year> 1977. </year>
Reference-contexts: For example, the standard k-d tree and its derivates (e.g., see <ref> [13, 22] </ref>), which use axis-parallel lines to recursively divide the number of points in a region in half, maintain every criteria but the balanced aspect ratio.
Reference: [14] <author> George W. Furnas. </author> <title> Generalized fisheye views. </title> <booktitle> In Proceedings of ACM CHI'86 Conference on Human Factors in Computing Systems, Visualizing Complex Information Spaces, </booktitle> <pages> pages 16-23, </pages> <year> 1986. </year>
Reference-contexts: Such approaches would be more suitable, for instance, for displaying very large graphs, such as significant portions of the world wide web graph, where every web page is a vertex and every hyper-link is an edge. A common technique used in the scrolling viewpoint context is the fish-eye view <ref> [14, 15, 23] </ref>, which shows an area of interest quite large and detailed (such as nodes representing a user's web pages) and shows other areas successively smaller and in less detail (such as nodes representing a user's department and organization web pages).
Reference: [15] <author> K. Kaugars, J. Reinfelds, and A. Brazma. </author> <title> A simple algorithm for drawing large graphs on small screens. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 278-281. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Such approaches would be more suitable, for instance, for displaying very large graphs, such as significant portions of the world wide web graph, where every web page is a vertex and every hyper-link is an edge. A common technique used in the scrolling viewpoint context is the fish-eye view <ref> [14, 15, 23] </ref>, which shows an area of interest quite large and detailed (such as nodes representing a user's web pages) and shows other areas successively smaller and in less detail (such as nodes representing a user's department and organization web pages).
Reference: [16] <author> R. J. Lipton, S. C. North, and J. S. Sandberg. </author> <title> A method for drawing graphs. </title> <booktitle> In Proc. 1st Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 153-160, </pages> <year> 1985. </year>
Reference-contexts: Given a graph G = (V; E), where n = jV j and m = jEj, we can use any existing method to embed it, provided that method places vertices at distinct points in the plane (e.g., see <ref> [7, 16, 27] </ref>). For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross [5, 6, 10, 24, 25, 28].
Reference: [17] <author> R. J. Lipton and R. E. Tarjan. </author> <title> Applications of a planar separator theorem. </title> <journal> SIAM J. Comput., </journal> <volume> 9 </volume> <pages> 615-627, </pages> <year> 1980. </year>
Reference-contexts: It is an open question whether it is possible to determine the optimal embedding, one that yields the minimum fi-balanced cuts. Another open question is related to the separator theorems of Lipton and Tarjan <ref> [17] </ref> and Miller [18].
Reference: [18] <author> G. L. Miller. </author> <title> Finding small simple cycle separators for 2-connected planar graphs. </title> <type> Report 85-336, </type> <institution> Dept. Comput. Sci., Univ. Southern California, </institution> <address> Los Angeles, CA, </address> <year> 1985. </year>
Reference-contexts: It is an open question whether it is possible to determine the optimal embedding, one that yields the minimum fi-balanced cuts. Another open question is related to the separator theorems of Lipton and Tarjan [17] and Miller <ref> [18] </ref>.
Reference: [19] <author> Frances J. Newbery. </author> <title> Edge concentration: A method for clustering directed graphs. </title> <booktitle> In Proceedings of the 2nd International Workshop on Software Configuration Management, </booktitle> <pages> pages 76-85, </pages> <address> Princeton, New Jersey, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation <ref> [19, 21, 26] </ref>. Optimizing such properties is not always easy, as many such optimizations are related to the well-known graph partitioning problem [3], which is NP-hard.
Reference: [20] <author> S. C. </author> <title> North. Drawing ranked digraphs with recursive clusters. In Graph Drawing '93, </title> <booktitle> ALCOM International Workshop PARIS 1993 on Graph Drawing and Topological Graph Algorithms, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by NSF under Grant CCR-9625289. 1 be given as input along with the graph itself, then several authors give various algorithms for displaying these clusters in two or three dimensions <ref> [8, 9, 11, 12, 20] </ref>. If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation [19, 21, 26].
Reference: [21] <author> Sablowski and Frick. </author> <title> Automatic graph clustering. </title> <booktitle> In GDRAWING: Conference on Graph Drawing (GD), </booktitle> <year> 1996. </year>
Reference-contexts: If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation <ref> [19, 21, 26] </ref>. Optimizing such properties is not always easy, as many such optimizations are related to the well-known graph partitioning problem [3], which is NP-hard.
Reference: [22] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: For example, the standard k-d tree and its derivates (e.g., see <ref> [13, 22] </ref>), which use axis-parallel lines to recursively divide the number of points in a region in half, maintain every criteria but the balanced aspect ratio. <p> For example, the standard k-d tree and its derivates (e.g., see [13, 22]), which use axis-parallel lines to recursively divide the number of points in a region in half, maintain every criteria but the balanced aspect ratio. Likewise, quad-trees and fair-split trees (e.g., see <ref> [4, 22] </ref>), which always split by a line parallel to a coordinate axis to recursively divide the area of a region more or less in half, maintain balanced aspect ratio but can have a depth that is fi (n).
Reference: [23] <author> M. Sarkar and M. H. Brown. </author> <title> Graphical fisheye views. </title> <journal> Commun. ACM, </journal> <volume> 37(12) </volume> <pages> 73-84, </pages> <year> 1994. </year>
Reference-contexts: Such approaches would be more suitable, for instance, for displaying very large graphs, such as significant portions of the world wide web graph, where every web page is a vertex and every hyper-link is an edge. A common technique used in the scrolling viewpoint context is the fish-eye view <ref> [14, 15, 23] </ref>, which shows an area of interest quite large and detailed (such as nodes representing a user's web pages) and shows other areas successively smaller and in less detail (such as nodes representing a user's department and organization web pages).
Reference: [24] <author> W. Schnyder. </author> <title> Embedding planar graphs on the grid. </title> <booktitle> In Proc. 1st ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 138-148, </pages> <year> 1990. </year>
Reference-contexts: For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross <ref> [5, 6, 10, 24, 25, 28] </ref>. Once the graph drawing is defined, we build a binary space partition tree on the vertices of this drawing. <p> Moreover, C is embedded with straight lines and no crossings on the n fi n fi k grid, where k = O (log n). Proof: We begin with a planar grid embedding with straight-line edges <ref> [6, 10, 24] </ref> and then the original layer, G k , is planar. Since each successive layer is a proper subgraph of the previous layer, it too must be planar and drawn without edge crossings.
Reference: [25] <author> S. K. Stein. </author> <title> Convex maps. </title> <journal> Proc. Amer. Math. Soc., </journal> <volume> 2 </volume> <pages> 464-466, </pages> <year> 1951. </year>
Reference-contexts: For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross <ref> [5, 6, 10, 24, 25, 28] </ref>. Once the graph drawing is defined, we build a binary space partition tree on the vertices of this drawing.
Reference: [26] <author> K. Sugiyama and K. Misue. </author> <title> Visualization of structural information: Automatic drawing of compound digraphs. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 21(4) </volume> <pages> 876-892, </pages> <year> 1991. </year>
Reference-contexts: If, as will often be the case, clusters of a graph are not given a priori, then various heuristics can be applied for finding clusters, say, using properties such as connectivity, cluster size, geometric proximity, or statistical variation <ref> [19, 21, 26] </ref>. Optimizing such properties is not always easy, as many such optimizations are related to the well-known graph partitioning problem [3], which is NP-hard.
Reference: [27] <author> W. T. Tutte. </author> <title> How to draw a graph. </title> <journal> Proceedings London Mathematical Society, </journal> <volume> 13(3) </volume> <pages> 743-768, </pages> <year> 1963. </year>
Reference-contexts: Given a graph G = (V; E), where n = jV j and m = jEj, we can use any existing method to embed it, provided that method places vertices at distinct points in the plane (e.g., see <ref> [7, 16, 27] </ref>). For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross [5, 6, 10, 24, 25, 28].
Reference: [28] <author> K. Wagner. </author> <title> Bemerkungen zum vierfarbenproblem. </title> <journal> Jahresbericht der Deutschen Mathematiker-Vereinigung, </journal> <volume> 46 </volume> <pages> 26-32, </pages> <year> 1936. </year>
Reference-contexts: For example, if G is planar we can use any existing method for embedding G in the plane such that vertices are at grid points, and edges of the graph are straight lines that do not cross <ref> [5, 6, 10, 24, 25, 28] </ref>. Once the graph drawing is defined, we build a binary space partition tree on the vertices of this drawing.
References-found: 28

