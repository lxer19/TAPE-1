URL: http://www.eecs.berkeley.edu/~tah/Publications/real-time_system=discrete_system+clock_variables.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/real-time_system=discrete_system+clock_variables.html
Root-URL: http://www.cs.berkeley.edu
Title: Real-time System Discrete System Clock Variables  
Author: Rajeev Alur Thomas A. Henzinger 
Affiliation: CIS Department, University of Pennsylvania, and Bell Labs, Lucent Technologies. EECS Department, University of California at Berkeley.  
Note: This research was supported in part by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, by the NSF grant CCR-9504469, by the AFOSR contract F49620-93-1-0056, by the ARO MURI grant DAAH-04-96-1-0341, by the ARPA grant NAG2-892, and by the SRC contract 95-DC-324.036.  
Abstract: Programs such as device drivers and embedded controllers must explicitly refer and react to time. For this purpose, a variety of language constructs|including delays, timeouts, and watchdogs|have been put forward. We advocate an alternative proposal, namely, to designate certain program variables as clock variables. The value of a clock variable changes as time advances. Timing constraints can be expressed, then, by conditions on clock values. A single new language construct|the guarded wait statement|suffices to enforce the timely progress of a program. We illustrate the use of clock variables and guarded wait statements with real-time applications such as round-robin (timeout-driven) and priority (interrupt-driven) scheduling. Clock variables generalize naturally to variables that measure environment parameters other than time. This observation leads to a language for hybrid (mixed digital-analog) applications such as embedded process control. This paper introduces, gently but rigorously, the clock approach to real-time programming. We present with mathematical precision, assuming no prerequisites other than familiarity with logical and programming notations, the concepts that are necessary for understanding, writing, and executing clock programs. In keeping with an expository style, all references are clustered in bibliographic remarks at the end of each section. The first appendix presents proof rules for verifying temporal properties of clock programs. The second appendix points to selected literature on formal methods and tools for programming with clocks. In particular, the timed automaton, which is a finite-state machine equipped with clocks, has become a standard paradigm for real-time model checking; it underlies the tools HyTech, Kronos, and Uppaal, discussed elsewhere in this volume. fl A preliminary version of this paper appeared in the proceedings of the First AMAST Workshop on Real Time, in Theories and Experiences for Real-time System Development (T. Rus and C. Rattray, eds.), AMAST Series in Computing 2, World Scientific, 1994, pp. 1-29, and an extended version appeared in Software Tools for Technology Transfer 1 (special issue on Timed and Hybrid Systems), 1997, pp. 86-109. 
Abstract-found: 1
Intro-found: 1
Reference: [ABK + 97] <author> E. Asarin, M. Bozga, A. Kerbrat, O. Maler, A. Pnueli, and A. Rasse. </author> <title> Data structures for the verification of timed automata. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 346-360. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: For finitary real-time systems, the involved state predicates contain clock constraints (of the form x y ~ c), and difference-bounds matrices have been the data structure of choice [Dil89a] (alternative representations are being investigated, for example, in <ref> [ABK + 97] </ref>).
Reference: [ACD93] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: timed safety automata [HNSY94]. 19 In a noninitialized rectangular automaton, the drift bounds of a clock may vary. 20 In addition to finite automata and temporal logics, also process algebras have been en riched with clock variables [NS91, LV92, DB96]. 44 branching-time logic Ctl, we obtain the real-time logic Tctl <ref> [ACD93] </ref>. While we have seen, in Appendix A, that certain timing requirements of a system can be specified using references to the clocks of the system, for other requirements it may be necessary (or convenient) to introduce new clocks in the specification. <p> A summary of automata-based and logic-based real-time specification languages can be found in [AH92]. Verification algorithms We have two fundamental decidability results for the verification of timed and hybrid systems: for finitary real-time systems, Tctl specifications can be checked <ref> [ACD93] </ref>; for finitary drifting-clock systems, Ta specifications without specification clocks and Tptl specifications without specification clocks can be checked [HKPV95]. These results depend on the finitary bisimilarity relations of finitary real-time systems and on the finitary language-equivalence relations of finitary drifting-clock systems, respectively.
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: Bibliographic remarks. The bounded-drift assumption underlies the clock synchronization problem for distributed systems (see, for example, the survey by Schneider [Sch87]). The dichotomy of discrete transitions (jumps) versus continuous transitions (flows) was introduced by Manna, Maler, and Pnueli [MMP92]. The use of flow-invariants to model hybrid systems in general <ref> [ACH + 95] </ref>, and drifting clocks in particular [AHH96], was developed in the framework of hybrid automata (see, for example, the survey [Hen96]). Open hybrid systems were first discussed by Lynch, Segala, Vaandrager, and Weinberg [LSVW96].
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: Clock variables|as we use them|were first introduced in temporal logic [AH94] (in conjunction with so-called "freeze quantifiers") and in finite automata <ref> [AD94] </ref>. <p> The discrete aspect of a closed finitary real-time system can be represented by a graph whose vertices encode values for the boolean variables. The representation of a closed finitary real-time system as a graph annotated with clock constraints is called a timed automaton <ref> [AD94] </ref>. 18 Since clocks range over the nonnegative reals, every nontrivial timed automaton has infinitely many states. However, in [AD94] it is shown that for every timed automaton we can construct a bisimilar finite-state system (where bisimilarity is defined with respect to the event alphabet that consists of the edges of <p> The representation of a closed finitary real-time system as a graph annotated with clock constraints is called a timed automaton <ref> [AD94] </ref>. 18 Since clocks range over the nonnegative reals, every nontrivial timed automaton has infinitely many states. However, in [AD94] it is shown that for every timed automaton we can construct a bisimilar finite-state system (where bisimilarity is defined with respect to the event alphabet that consists of the edges of the timed automaton). This observation forms the basis of all verification algorithms for timed automata. <p> In order to specify timing constraints, these languages can be extended by adding clock variables. 20 If we judiciously add clocks to finite automata, we obtain the timed automata (Ta) discussed above <ref> [AD94] </ref>; from propositional linear temporal logic, we obtain the real-time logic Tptl [AH94]; from the propositional 18 Timed automata with a time-progress (delay-invariant) condition instead of a fairness (acceptance) condition are sometimes referred to as timed safety automata [HNSY94]. 19 In a noninitialized rectangular automaton, the drift bounds of a clock <p> Both decidability results for real-time verification are sharp: for Ta and Tptl specifications with specification clocks, the validity problem (which is equal to the verification problem over the system with all possible behaviors) is undecidable <ref> [AD94, AH94] </ref>; for several generalizations of finitary real-time and drifting-clock systems, such as timed automata with a single stopwatch, simple reachability questions are undecidable [HKPV95].
Reference: [ADS86] <author> B. Alpern, A.J. Demers, and F.B. Schneider. </author> <title> Safety without stuttering. </title> <journal> Information Processing Letters, </journal> <volume> 23(4) </volume> <pages> 177-180, </pages> <year> 1986. </year>
Reference-contexts: Stutter closure has been advocated by Lam-port [Lam83]; limit closure (safety) was formally defined by Alpern, Demers, and Schneider <ref> [ADS86] </ref>; the relationship between systems and closure properties was elucidated by Emerson [Eme83]; the executability (machine closure) of systems, by Apt, Francez, and Katz [AFK88]. <p> The two extensions that are necessary for proving properties of real-time systems concern (1) the density of the time domain, which causes passed states to be of interest, 15 and (2) the divergence of time. 16 Safety properties A safety property is a closed set of behaviors <ref> [ADS86] </ref>. 17 For instance, the property "m is always even" is a safety property; the property "m is sometimes odd" is not. Every temporal formula of the form 2, for a state predicate , describes a safety property.
Reference: [AFH94] <author> R. Alur, L. Fix, and T.A. Henzinger. </author> <title> A determinizable class of timed automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 1-13. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 46 </month>
Reference-contexts: These undecidability results have led researchers to consider several special cases: in <ref> [AFH94, RS97] </ref> the use of specification clocks is restricted to refer only to immediately preceding or succeeding occurrences of events; in [AFH96] the use of specification clocks is restricted to refer only to the approximate times of events; in [AH94, HK97] the durations of all delays are restricted to be (observed
Reference: [AFH96] <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punc-tuality. </title> <journal> Journal of the ACM, </journal> <volume> 43(1) </volume> <pages> 116-146, </pages> <year> 1996. </year>
Reference-contexts: These undecidability results have led researchers to consider several special cases: in [AFH94, RS97] the use of specification clocks is restricted to refer only to immediately preceding or succeeding occurrences of events; in <ref> [AFH96] </ref> the use of specification clocks is restricted to refer only to the approximate times of events; in [AH94, HK97] the durations of all delays are restricted to be (observed as) integers. The verification problem for finitary drifting-clock systems can be solved under any of these restrictions.
Reference: [AFK88] <author> K.R. Apt, N. Francez, and S. Katz. </author> <title> Appraising fairness in languages for distributed programming. </title> <journal> Distributed Computing, </journal> <volume> 2(4) </volume> <pages> 226-241, </pages> <year> 1988. </year>
Reference-contexts: Stutter closure has been advocated by Lam-port [Lam83]; limit closure (safety) was formally defined by Alpern, Demers, and Schneider [ADS86]; the relationship between systems and closure properties was elucidated by Emerson [Eme83]; the executability (machine closure) of systems, by Apt, Francez, and Katz <ref> [AFK88] </ref>.
Reference: [AH92] <author> R. Alur and T.A. Henzinger. </author> <title> Logics and models of real time: a survey. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 74-106. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The formula asserts that along every possible behavior of a system, each state for which 1 is true must be followed within 5 time units by a state for which 2 is true. A summary of automata-based and logic-based real-time specification languages can be found in <ref> [AH92] </ref>. Verification algorithms We have two fundamental decidability results for the verification of timed and hybrid systems: for finitary real-time systems, Tctl specifications can be checked [ACD93]; for finitary drifting-clock systems, Ta specifications without specification clocks and Tptl specifications without specification clocks can be checked [HKPV95].
Reference: [AH94] <author> R. Alur and T.A. Henzinger. </author> <title> A really temporal logic. </title> <journal> Journal of the ACM, </journal> <volume> 41(1) </volume> <pages> 181-204, </pages> <year> 1994. </year>
Reference-contexts: The resulting dichotomy of jump transitions versus delay transitions has been advocated also by various proponents of the interleaving view of concurrency (see, for example, the Timed-Transition-System approach [HMP94] and the Tla approach [AL94]). Clock variables|as we use them|were first introduced in temporal logic <ref> [AH94] </ref> (in conjunction with so-called "freeze quantifiers") and in finite automata [AD94]. <p> In order to specify timing constraints, these languages can be extended by adding clock variables. 20 If we judiciously add clocks to finite automata, we obtain the timed automata (Ta) discussed above [AD94]; from propositional linear temporal logic, we obtain the real-time logic Tptl <ref> [AH94] </ref>; from the propositional 18 Timed automata with a time-progress (delay-invariant) condition instead of a fairness (acceptance) condition are sometimes referred to as timed safety automata [HNSY94]. 19 In a noninitialized rectangular automaton, the drift bounds of a clock may vary. 20 In addition to finite automata and temporal logics, also <p> Both decidability results for real-time verification are sharp: for Ta and Tptl specifications with specification clocks, the validity problem (which is equal to the verification problem over the system with all possible behaviors) is undecidable <ref> [AD94, AH94] </ref>; for several generalizations of finitary real-time and drifting-clock systems, such as timed automata with a single stopwatch, simple reachability questions are undecidable [HKPV95]. <p> undecidability results have led researchers to consider several special cases: in [AFH94, RS97] the use of specification clocks is restricted to refer only to immediately preceding or succeeding occurrences of events; in [AFH96] the use of specification clocks is restricted to refer only to the approximate times of events; in <ref> [AH94, HK97] </ref> the durations of all delays are restricted to be (observed as) integers. The verification problem for finitary drifting-clock systems can be solved under any of these restrictions.
Reference: [AH96] <author> R. Alur and T.A. Henzinger. </author> <title> Reactive modules. </title> <booktitle> In Proceedings of the 11th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 207-218. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: There, it was also shown that receptiveness is closed under parallel composition. An "industrial-strength" version of our model for open discrete systems and open real-time systems, complete with capabilities for synchronizing concurrent transitions and for restricting read access to variables, can be found in <ref> [AH96, AH97] </ref>. The latter reference also contains an algorithm that checks whether a finitary (cf. Appendix B) open real-time system is receptive.
Reference: [AH97] <author> R. Alur and T.A. Henzinger. </author> <title> Modularity for timed and hybrid systems. </title> <editor> In A. Mazurkiewicz and J. Winkowski, editors, </editor> <booktitle> CONCUR 97: Concurrency Theory, Lecture Notes in Computer Science 1243, </booktitle> <pages> pages 74-88. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: There, it was also shown that receptiveness is closed under parallel composition. An "industrial-strength" version of our model for open discrete systems and open real-time systems, complete with capabilities for synchronizing concurrent transitions and for restricting read access to variables, can be found in <ref> [AH96, AH97] </ref>. The latter reference also contains an algorithm that checks whether a finitary (cf. Appendix B) open real-time system is receptive. <p> Open hybrid systems were first discussed by Lynch, Segala, Vaandrager, and Weinberg [LSVW96]. A detailed presentation of our model for open hybrid systems, complete with uncontrolled continuous variables and a discussion of executable differential constraints, can be found in <ref> [AH97] </ref>. Recent workshop proceedings provide an excellent overview of applications for hybrid systems [GNRR93, ANKS95, AHS96]. The thermostat example is due to Nicollin, Sifakis, and Yovine [NSY93]. 7 Conclusion We illustrated the clock paradigm for specifying timed systems.
Reference: [AHH96] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: The dichotomy of discrete transitions (jumps) versus continuous transitions (flows) was introduced by Manna, Maler, and Pnueli [MMP92]. The use of flow-invariants to model hybrid systems in general [ACH + 95], and drifting clocks in particular <ref> [AHH96] </ref>, was developed in the framework of hybrid automata (see, for example, the survey [Hen96]). Open hybrid systems were first discussed by Lynch, Segala, Vaandrager, and Weinberg [LSVW96].
Reference: [AHS96] <editor> R. Alur, T.A. Henzinger, and E.D. Sontag, editors. </editor> <title> Hybrid Systems III: Verification and Control. </title> <booktitle> Lecture Notes in Computer Science 1066. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: A detailed presentation of our model for open hybrid systems, complete with uncontrolled continuous variables and a discussion of executable differential constraints, can be found in [AH97]. Recent workshop proceedings provide an excellent overview of applications for hybrid systems <ref> [GNRR93, ANKS95, AHS96] </ref>. The thermostat example is due to Nicollin, Sifakis, and Yovine [NSY93]. 7 Conclusion We illustrated the clock paradigm for specifying timed systems.
Reference: [AIKY95] <author> R. Alur, A. Itai, R.P. Kurshan, and M. Yannakakis. </author> <title> Timing verification by successive approximation. </title> <journal> Information and Computation, </journal> <volume> 118(1) </volume> <pages> 142-157, </pages> <year> 1995. </year>
Reference-contexts: The efficiency of these tools has been improved along many dimensions, of which we mention two. First, an incremental approach is useful for coping with the high cost of analyzing a large number of clocks <ref> [AIKY95] </ref>: initially all clock constraints are ignored; then the clock constraints are added one by one, as needed to prove a given specification. Second, a symbolic approach avoids the expensive construction of the bisimilarity quotient (the so-called "region graph") of a finitary real-time system [HNSY94].
Reference: [AK96] <author> R. Alur and R.P. Kurshan. </author> <title> Timing analysis in Cospan. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 220-231. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: These results depend on the finitary bisimilarity relations of finitary real-time systems and on the finitary language-equivalence relations of finitary drifting-clock systems, respectively. Based on the decidability results, several verification algorithms for finitary real-time systems have been implemented <ref> [DW95, AK96, BLL + 96, DOTY96] </ref>. The efficiency of these tools has been improved along many dimensions, of which we mention two.
Reference: [AL93] <author> M. Abadi and L. Lamport. </author> <title> Composing specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 73-132, </pages> <year> 1993. </year>
Reference-contexts: The interleaving view of concurrency was first advocated by Dijkstra [Dij65]. Parallel composition as intersection (or conjunction) is a salient feature if systems are identified with sets of possible behaviors (see, for example, <ref> [AL93] </ref>). For untimed systems, receptiveness was first defined by Dill [Dil89b]; for timed systems, by Gawlick, Segala, Sogaard-Andersen, and Lynch [GSSAL94]. There, it was also shown that receptiveness is closed under parallel composition.
Reference: [AL94] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(5) </volume> <pages> 1543-1571, </pages> <year> 1994. </year>
Reference-contexts: The resulting dichotomy of jump transitions versus delay transitions has been advocated also by various proponents of the interleaving view of concurrency (see, for example, the Timed-Transition-System approach [HMP94] and the Tla approach <ref> [AL94] </ref>). Clock variables|as we use them|were first introduced in temporal logic [AH94] (in conjunction with so-called "freeze quantifiers") and in finite automata [AD94]. <p> Nonzenoness (timed machine closure) was defined independently by several researchers <ref> [Hen92, AL94] </ref>; Abadi and Lamport coined the phrase. An algorithm that turns a finitary (cf. Appendix B) real-time system into a nonzeno real-time system with the same set of possible behaviors can be found in [HNSY94].
Reference: [ANKS95] <author> P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, </author> <title> editors. Hybrid Systems II. </title> <booktitle> Lecture Notes in Computer Science 999. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 47 </month>
Reference-contexts: A detailed presentation of our model for open hybrid systems, complete with uncontrolled continuous variables and a discussion of executable differential constraints, can be found in [AH97]. Recent workshop proceedings provide an excellent overview of applications for hybrid systems <ref> [GNRR93, ANKS95, AHS96] </ref>. The thermostat example is due to Nicollin, Sifakis, and Yovine [NSY93]. 7 Conclusion We illustrated the clock paradigm for specifying timed systems.
Reference: [BBC + 96] <author> N. Bjtrner, A. Browne, E. Chang, M. Colon, A. Kapur, Z. Manna, H.B. Sipma, and T.E. Uribe. </author> <title> STeP: deductive-algorithmic verification of reactive and real-time systems. </title> <editor> In R. Alur and T.A. Henzinger, editors, </editor> <booktitle> CAV 96: Computer-aided Verification, Lecture Notes in Computer Science 1102, </booktitle> <pages> pages 415-418. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Appendix B: Automatic Analysis of Real-time Systems In Appendix A, we outlined a methodology for establishing properties of real-time systems using mathematical proof. Similar proof methods can be found in [dBHdRR92, MKP96] and are supported by deductive verification tools such as STeP <ref> [BBC + 96] </ref>. An alternative, more limited but more automated, approach employs algorithms for establishing properties of real-time systems. The algorithmic approach, often referred to as model checking, has proved successful for the analysis of large-scale untimed systems [CGL94], and has recently been extended to real-time systems.
Reference: [BG88] <author> G. Berry and G. Gonthier. </author> <title> The synchronous programming language Esterel: Design, semantics, implementation. </title> <type> Technical Report 842, </type> <institution> INRIA, </institution> <year> 1988. </year>
Reference-contexts: We leave it to the reader to formally define the initial condition and the next-state condition of an arbitrary clock-constrained program. Bibliographic remarks. The synchrony hypothesis is due to Berry <ref> [BG88] </ref> (for an introduction to synchronous programming languages, see the monograph by Halbwachs [Hal93]). The resulting dichotomy of jump transitions versus delay transitions has been advocated also by various proponents of the interleaving view of concurrency (see, for example, the Timed-Transition-System approach [HMP94] and the Tla approach [AL94]). <p> The wait watching macro is inspired by Esterel <ref> [BG88] </ref>. The use of control-location labels to define the transitions of a while program is standard practice in state-transition semantics (see, for example, [MP92]). 5 Timed Systems 3: Reactivity 5.1 Untimed processes The parallel composition of while programs is called a concurrent program.
Reference: [BLL + 96] <author> J. Bengtsson, K.G. Larsen, F. Larsson, P. Pettersson, and W. Yi. Up-paal: </author> <title> a tool-suite for automatic verification of real-time systems. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 232-243. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: These results depend on the finitary bisimilarity relations of finitary real-time systems and on the finitary language-equivalence relations of finitary drifting-clock systems, respectively. Based on the decidability results, several verification algorithms for finitary real-time systems have been implemented <ref> [DW95, AK96, BLL + 96, DOTY96] </ref>. The efficiency of these tools has been improved along many dimensions, of which we mention two.
Reference: [CE81] <author> E.M. Clarke and E.A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <booktitle> In Workshop on Logic of Programs, Lecture Notes in Computer Science 131, </booktitle> <pages> pages 52-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: We leave it to the reader to formally define the initial condition and the next-state condition of an arbitrary guarded-command program. Bibliographic remarks. The state-transition paradigm originated with state machines and has become a standard model for reactive systems (see, for example, the Kripke-Structure approach of Clarke and Emerson <ref> [CE81] </ref>, the Fair-Transition-System approach of Manna and Pnueli [MP92], and the Tla approach of Lamport [Lam94]).
Reference: [CGL94] <author> E.M. Clarke, O. Grumberg, and D.E. </author> <title> Long. Verification tools for finite-state concurrent systems. In A Decade of Concurrency: Reflections and Perspectives, </title> <booktitle> Lecture Notes in Computer Science 803. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: An alternative, more limited but more automated, approach employs algorithms for establishing properties of real-time systems. The algorithmic approach, often referred to as model checking, has proved successful for the analysis of large-scale untimed systems <ref> [CGL94] </ref>, and has recently been extended to real-time systems. Here we only attempt to direct the reader to some of the relevant literature. 43 System specification: timed automata and rectangular automata Our definition of real-time system is too general to permit automatic analysis, and two restrictions are necessary.
Reference: [CM88] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1988. </year>
Reference-contexts: Guarded commands were introduced by Dijkstra [Dij75]; our guarded-command language is inspired by the Unity language of Chandy and Misra <ref> [CM88] </ref>. 5 While this is irrelevant for our discussion, the nondeterminism of the program NdUpDown may be due to two internal, concurrent processes that proceed independently|one repeatedly incrementing and decrementing n, and the other updating m once.
Reference: [DB96] <author> P.A. D'Argenio and E. Brinksma. </author> <title> A calculus for timed automata. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> FTRTFT 96: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 1135, </booktitle> <pages> pages 110-129. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: (delay-invariant) condition instead of a fairness (acceptance) condition are sometimes referred to as timed safety automata [HNSY94]. 19 In a noninitialized rectangular automaton, the drift bounds of a clock may vary. 20 In addition to finite automata and temporal logics, also process algebras have been en riched with clock variables <ref> [NS91, LV92, DB96] </ref>. 44 branching-time logic Ctl, we obtain the real-time logic Tctl [ACD93].
Reference: [dBHdRR92] <editor> J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors. </editor> <title> Real Time: </title> <booktitle> Theory in Practice. Lecture Notes in Computer Science 600. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Such rules can be found, for example, in [MP84]. Appendix B: Automatic Analysis of Real-time Systems In Appendix A, we outlined a methodology for establishing properties of real-time systems using mathematical proof. Similar proof methods can be found in <ref> [dBHdRR92, MKP96] </ref> and are supported by deductive verification tools such as STeP [BBC + 96]. An alternative, more limited but more automated, approach employs algorithms for establishing properties of real-time systems.
Reference: [Dij65] <author> E.W. Dijkstra. </author> <title> Solution of a problem in concurrent programming control. </title> <journal> Communications of the ACM, </journal> <volume> 8(9):569, </volume> <year> 1965. </year>
Reference-contexts: The interleaving view of concurrency was first advocated by Dijkstra <ref> [Dij65] </ref>. Parallel composition as intersection (or conjunction) is a salient feature if systems are identified with sets of possible behaviors (see, for example, [AL93]). For untimed systems, receptiveness was first defined by Dill [Dil89b]; for timed systems, by Gawlick, Segala, Sogaard-Andersen, and Lynch [GSSAL94].
Reference: [Dij75] <author> E.W. Dijkstra. </author> <title> Guarded commands, nondeterminacy, and formal derivation of programs. </title> <journal> Communications of the ACM, </journal> <volume> 18(8) </volume> <pages> 453-457, </pages> <year> 1975. </year>
Reference-contexts: Guarded commands were introduced by Dijkstra <ref> [Dij75] </ref>; our guarded-command language is inspired by the Unity language of Chandy and Misra [CM88]. 5 While this is irrelevant for our discussion, the nondeterminism of the program NdUpDown may be due to two internal, concurrent processes that proceed independently|one repeatedly incrementing and decrementing n, and the other updating m once.
Reference: [Dil89a] <author> D.L. Dill. </author> <title> Timing assumptions and verification of finite-state concurrent systems. </title> <editor> In J. Sifakis, editor, </editor> <title> CAV 89: Automatic Verification Methods for Finite-state Systems, </title> <booktitle> Lecture Notes in Computer Science 407, </booktitle> <pages> pages 197-212. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <month> 48 </month>
Reference-contexts: For finitary real-time systems, the involved state predicates contain clock constraints (of the form x y ~ c), and difference-bounds matrices have been the data structure of choice <ref> [Dil89a] </ref> (alternative representations are being investigated, for example, in [ABK + 97]).
Reference: [Dil89b] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-independent Circuits. </title> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: The interleaving view of concurrency was first advocated by Dijkstra [Dij65]. Parallel composition as intersection (or conjunction) is a salient feature if systems are identified with sets of possible behaviors (see, for example, [AL93]). For untimed systems, receptiveness was first defined by Dill <ref> [Dil89b] </ref>; for timed systems, by Gawlick, Segala, Sogaard-Andersen, and Lynch [GSSAL94]. There, it was also shown that receptiveness is closed under parallel composition.
Reference: [DOTY96] <author> C. Daws, A. Olivero, S. Tripakis, and S. Yovine. </author> <title> The tool Kronos. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 208-219. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: These results depend on the finitary bisimilarity relations of finitary real-time systems and on the finitary language-equivalence relations of finitary drifting-clock systems, respectively. Based on the decidability results, several verification algorithms for finitary real-time systems have been implemented <ref> [DW95, AK96, BLL + 96, DOTY96] </ref>. The efficiency of these tools has been improved along many dimensions, of which we mention two.
Reference: [DW95] <author> D.L. Dill and H. Wong-Toi. </author> <title> Verification of real-time systems by successive over- and underapproximation. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 409-422. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: These results depend on the finitary bisimilarity relations of finitary real-time systems and on the finitary language-equivalence relations of finitary drifting-clock systems, respectively. Based on the decidability results, several verification algorithms for finitary real-time systems have been implemented <ref> [DW95, AK96, BLL + 96, DOTY96] </ref>. The efficiency of these tools has been improved along many dimensions, of which we mention two.
Reference: [Eme83] <author> E.A. Emerson. </author> <title> Alternative semantics for temporal logics. </title> <journal> Theoretical Computer Science, </journal> <volume> 26(1) </volume> <pages> 121-130, </pages> <year> 1983. </year>
Reference-contexts: Stutter closure has been advocated by Lam-port [Lam83]; limit closure (safety) was formally defined by Alpern, Demers, and Schneider [ADS86]; the relationship between systems and closure properties was elucidated by Emerson <ref> [Eme83] </ref>; the executability (machine closure) of systems, by Apt, Francez, and Katz [AFK88].
Reference: [GNRR93] <editor> R.L. Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors. </editor> <title> Hybrid Systems I. </title> <booktitle> Lecture Notes in Computer Science 736. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: A detailed presentation of our model for open hybrid systems, complete with uncontrolled continuous variables and a discussion of executable differential constraints, can be found in [AH97]. Recent workshop proceedings provide an excellent overview of applications for hybrid systems <ref> [GNRR93, ANKS95, AHS96] </ref>. The thermostat example is due to Nicollin, Sifakis, and Yovine [NSY93]. 7 Conclusion We illustrated the clock paradigm for specifying timed systems.
Reference: [GSSAL94] <author> R. Gawlick, R. Segala, J.F. Sogaard-Andersen, and N.A. Lynch. </author> <title> Liveness in timed and untimed systems. </title> <editor> In S. Abiteboul and E. Shamir, editors, </editor> <booktitle> ICALP 94: Automata, Languages, and Programming, Lecture Notes in Computer Science 820, </booktitle> <pages> pages 166-177. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Parallel composition as intersection (or conjunction) is a salient feature if systems are identified with sets of possible behaviors (see, for example, [AL93]). For untimed systems, receptiveness was first defined by Dill [Dil89b]; for timed systems, by Gawlick, Segala, Sogaard-Andersen, and Lynch <ref> [GSSAL94] </ref>. There, it was also shown that receptiveness is closed under parallel composition. An "industrial-strength" version of our model for open discrete systems and open real-time systems, complete with capabilities for synchronizing concurrent transitions and for restricting read access to variables, can be found in [AH96, AH97].
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Synchronous Programming of Reactive Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: We leave it to the reader to formally define the initial condition and the next-state condition of an arbitrary clock-constrained program. Bibliographic remarks. The synchrony hypothesis is due to Berry [BG88] (for an introduction to synchronous programming languages, see the monograph by Halbwachs <ref> [Hal93] </ref>). The resulting dichotomy of jump transitions versus delay transitions has been advocated also by various proponents of the interleaving view of concurrency (see, for example, the Timed-Transition-System approach [HMP94] and the Tla approach [AL94]).
Reference: [Hen92] <author> T.A. Henzinger. </author> <title> Sooner is safer than later. </title> <journal> Information Processing Letters, </journal> <volume> 43(3) </volume> <pages> 135-141, </pages> <year> 1992. </year>
Reference-contexts: Clock variables|as we use them|were first introduced in temporal logic [AH94] (in conjunction with so-called "freeze quantifiers") and in finite automata [AD94]. More details on closure under divergent limits (divergence safety) and closure under timed stuttering can be found in <ref> [Hen92, HNSY94] </ref>. 4 Timed Systems 2: Progress 4.1 Delays We have imposed progress on the environment of discrete systems, through the requirement of environment-fairness, and on the environment of clock-constrained systems, through the requirement of time-divergence. <p> Nonzenoness (timed machine closure) was defined independently by several researchers <ref> [Hen92, AL94] </ref>; Abadi and Lamport coined the phrase. An algorithm that turns a finitary (cf. Appendix B) real-time system into a nonzeno real-time system with the same set of possible behaviors can be found in [HNSY94]. <p> Then S is nonzeno iff [[S]] is dense in [S] with respect to the Cantor metric on infinite sequences <ref> [Hen92] </ref>. 14 The real-time system S satisfies the property if [[S]] . The real-time system S pre-satisfies the property if [S] . Clearly, pre-satisfaction is a sufficient but not a necessary condition for satisfaction. <p> Every temporal formula of the form 2, for a state predicate , describes a safety property. By elementary topology, for nonzeno real-time systems, the pre-satisfaction of safety properties coincides with satisfaction <ref> [Hen92] </ref>. Hence, for proving safety properties of nonzeno real-time systems, we can use any calculus for proving safety properties of discrete systems. Consider, for instance, the invariance rule Safe of Manna and Pnueli [MP95], whose translation into our framework is shown in Figure 23. <p> j= I ) ' j= (' ^ (9ffi j ffi 0 : V 0 = V + ffi ^ (8* j 0 * &lt; ffi : T + *))) ) ' 0 S j= 2 Every such time-bounded 3 property is a safety property (this folk theorem is formalized in <ref> [Hen92] </ref>).
Reference: [Hen95] <author> T.A. Henzinger. </author> <title> Hybrid automata with finite bisimulations. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> ICALP 95: Automata, Languages, and Programming, Lecture Notes in Computer Science 944, </booktitle> <pages> pages 324-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The representation of a closed finitary drifting-clock system as a graph annotated with constraints on drifting clocks is called an initialized rectangular automaton [HKPV95]. 19 There are initialized rectangular automata that are not bisimi-lar to any finite-state system <ref> [Hen95] </ref>. However, in [HKPV95] it is shown that for every initialized rectangular automaton we can construct a finite-state system with the same language (over the alphabet of edges of the rectangular automaton). This observation is central to the algorithmic verification of rectangular automata.
Reference: [Hen96] <author> T.A. Henzinger. </author> <title> The theory of hybrid automata. </title> <booktitle> In Proceedings of the 11th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 278-292. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: The use of flow-invariants to model hybrid systems in general [ACH + 95], and drifting clocks in particular [AHH96], was developed in the framework of hybrid automata (see, for example, the survey <ref> [Hen96] </ref>). Open hybrid systems were first discussed by Lynch, Segala, Vaandrager, and Weinberg [LSVW96]. A detailed presentation of our model for open hybrid systems, complete with uncontrolled continuous variables and a discussion of executable differential constraints, can be found in [AH97].
Reference: [HHWT97] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> a model checker for hybrid systems. </title> <editor> In O. Grumberg, editor, </editor> <booktitle> CAV 97: Computer-aided Verification, Lecture Notes in Computer Science 1254, </booktitle> <pages> pages 460-463. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: In particular, symbolic model checkers have been implemented for hybrid systems whose continuous dynamics are approximated by piecewise-linear envelopes <ref> [HHWT97] </ref>. Acknowledgments. The authors thank Rance Cleaveland, Limor Fix, David Karr, Peter Kopke, Fred Schneider, and Bernhard Steffen for helpful comments.
Reference: [HJL93] <author> C.L. Heitmeyer, R.D. Jeffords, and B.G. Labaw. </author> <title> A benchmark for comparing different approaches for specifying and verifying real-time systems. </title> <booktitle> In Proceedings of the Tenth International Workshop on Real-time Operating Systems and Software, </booktitle> <year> 1993. </year> <month> 49 </month>
Reference-contexts: The latter reference also contains an algorithm that checks whether a finitary (cf. Appendix B) open real-time system is receptive. Schedulers and railroad-gate controllers pervade the real-time literature as examples <ref> [HJL93, HMP94] </ref>. 33 program Priority : local i : task; prev interrupt : bool; external interrupt : bool; done : array of bool; loop prev interrupt := interrupt; i := MaxPriorityTask; ResumeTask (i); if prev interrupt then await :interrupt _ done [i] else await interrupt _ done [i] fi; if :done
Reference: [HK94] <author> T.A. Henzinger and P.W. Kopke. </author> <title> Verification methods for the divergent runs of clock systems. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 351-372. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: We write S j= # if the real-time system S satisfies the property that is described by the temporal formula #. Based on <ref> [HK94] </ref>, we present a deductive method for proving assertions of the form S j= #. The method is interesting, because it relies on considerable technology transfer from the discrete case.
Reference: [HK97] <author> T.A. Henzinger and P.W. Kopke. </author> <title> Discrete-time control for rectangular hybrid automata. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> ICALP 97: Automata, Languages, and Programming, Lecture Notes in Computer Science 1256, </booktitle> <pages> pages 582-593. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: undecidability results have led researchers to consider several special cases: in [AFH94, RS97] the use of specification clocks is restricted to refer only to immediately preceding or succeeding occurrences of events; in [AFH96] the use of specification clocks is restricted to refer only to the approximate times of events; in <ref> [AH94, HK97] </ref> the durations of all delays are restricted to be (observed as) integers. The verification problem for finitary drifting-clock systems can be solved under any of these restrictions.
Reference: [HKPV95] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? In Proceedings of the 27th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 373-382. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: If the clocks of a finitary real-time system are permitted to drift with constant, rational drift bounds, we obtain a finitary drifting-clock system. The representation of a closed finitary drifting-clock system as a graph annotated with constraints on drifting clocks is called an initialized rectangular automaton <ref> [HKPV95] </ref>. 19 There are initialized rectangular automata that are not bisimi-lar to any finite-state system [Hen95]. However, in [HKPV95] it is shown that for every initialized rectangular automaton we can construct a finite-state system with the same language (over the alphabet of edges of the rectangular automaton). <p> The representation of a closed finitary drifting-clock system as a graph annotated with constraints on drifting clocks is called an initialized rectangular automaton <ref> [HKPV95] </ref>. 19 There are initialized rectangular automata that are not bisimi-lar to any finite-state system [Hen95]. However, in [HKPV95] it is shown that for every initialized rectangular automaton we can construct a finite-state system with the same language (over the alphabet of edges of the rectangular automaton). This observation is central to the algorithmic verification of rectangular automata. <p> Verification algorithms We have two fundamental decidability results for the verification of timed and hybrid systems: for finitary real-time systems, Tctl specifications can be checked [ACD93]; for finitary drifting-clock systems, Ta specifications without specification clocks and Tptl specifications without specification clocks can be checked <ref> [HKPV95] </ref>. These results depend on the finitary bisimilarity relations of finitary real-time systems and on the finitary language-equivalence relations of finitary drifting-clock systems, respectively. Based on the decidability results, several verification algorithms for finitary real-time systems have been implemented [DW95, AK96, BLL + 96, DOTY96]. <p> Ta and Tptl specifications with specification clocks, the validity problem (which is equal to the verification problem over the system with all possible behaviors) is undecidable [AD94, AH94]; for several generalizations of finitary real-time and drifting-clock systems, such as timed automata with a single stopwatch, simple reachability questions are undecidable <ref> [HKPV95] </ref>.
Reference: [HKWT95] <author> T.A. Henzinger, P.W. Kopke, and H. Wong-Toi. </author> <title> The expressive power of clocks. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> ICALP 95: Automata, Languages, and Programming, Lecture Notes in Computer Science 944, </booktitle> <pages> pages 417-428. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 13 : until x 12; while ` 14 : n &gt; 0 do ` 15 : n := n 1; ` 16 : z := 0; repeat ` 17 : wait watching z 5 ` 18 : until z 1 od; loop ` 19 : wait end: was studied in <ref> [HKWT95] </ref>. Nonzenoness (timed machine closure) was defined independently by several researchers [Hen92, AL94]; Abadi and Lamport coined the phrase. An algorithm that turns a finitary (cf. Appendix B) real-time system into a nonzeno real-time system with the same set of possible behaviors can be found in [HNSY94].
Reference: [HMP94] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Temporal proof methodologies for timed transition systems. </title> <journal> Information and Computation, </journal> <volume> 112(2) </volume> <pages> 273-337, </pages> <year> 1994. </year>
Reference-contexts: The synchrony hypothesis is due to Berry [BG88] (for an introduction to synchronous programming languages, see the monograph by Halbwachs [Hal93]). The resulting dichotomy of jump transitions versus delay transitions has been advocated also by various proponents of the interleaving view of concurrency (see, for example, the Timed-Transition-System approach <ref> [HMP94] </ref> and the Tla approach [AL94]). Clock variables|as we use them|were first introduced in temporal logic [AH94] (in conjunction with so-called "freeze quantifiers") and in finite automata [AD94]. <p> An algorithm that turns a finitary (cf. Appendix B) real-time system into a nonzeno real-time system with the same set of possible behaviors can be found in [HNSY94]. The real-time program RtUpDown1 is derived from an example, due to Pnueli <ref> [HMP94] </ref>, that illustrates that an increase in the lower bound on the duration of a delay may lead to a decrease in the running time of a program (to see this, replace the lower bounds of 1 on the clock y by 2; then the maximal possible value of n is <p> The latter reference also contains an algorithm that checks whether a finitary (cf. Appendix B) open real-time system is receptive. Schedulers and railroad-gate controllers pervade the real-time literature as examples <ref> [HJL93, HMP94] </ref>. 33 program Priority : local i : task; prev interrupt : bool; external interrupt : bool; done : array of bool; loop prev interrupt := interrupt; i := MaxPriorityTask; ResumeTask (i); if prev interrupt then await :interrupt _ done [i] else await interrupt _ done [i] fi; if :done
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: Clock variables|as we use them|were first introduced in temporal logic [AH94] (in conjunction with so-called "freeze quantifiers") and in finite automata [AD94]. More details on closure under divergent limits (divergence safety) and closure under timed stuttering can be found in <ref> [Hen92, HNSY94] </ref>. 4 Timed Systems 2: Progress 4.1 Delays We have imposed progress on the environment of discrete systems, through the requirement of environment-fairness, and on the environment of clock-constrained systems, through the requirement of time-divergence. <p> Delay-invariants as a means for ensuring the progress of a timed system were first proposed in <ref> [HNSY94] </ref>; their expressive power 6 The possible behaviors of RtUpDown3 would be identical to the possible behaviors of RtUpDown2 if we allow hiding of the program counter, and merging of consecutive tests and assignments into initial states and into atomic jumps (for instance, the two consecutive assignments n := n +1; <p> Nonzenoness (timed machine closure) was defined independently by several researchers [Hen92, AL94]; Abadi and Lamport coined the phrase. An algorithm that turns a finitary (cf. Appendix B) real-time system into a nonzeno real-time system with the same set of possible behaviors can be found in <ref> [HNSY94] </ref>. <p> clocks to finite automata, we obtain the timed automata (Ta) discussed above [AD94]; from propositional linear temporal logic, we obtain the real-time logic Tptl [AH94]; from the propositional 18 Timed automata with a time-progress (delay-invariant) condition instead of a fairness (acceptance) condition are sometimes referred to as timed safety automata <ref> [HNSY94] </ref>. 19 In a noninitialized rectangular automaton, the drift bounds of a clock may vary. 20 In addition to finite automata and temporal logics, also process algebras have been en riched with clock variables [NS91, LV92, DB96]. 44 branching-time logic Ctl, we obtain the real-time logic Tctl [ACD93]. <p> Second, a symbolic approach avoids the expensive construction of the bisimilarity quotient (the so-called "region graph") of a finitary real-time system <ref> [HNSY94] </ref>. Suppose, for instance, that we wish to prove a system invariant. For this purpose, we need to compute the set of all states that appear along possible behaviors of the system.
Reference: [HW95] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The verification problem for finitary drifting-clock systems can be solved under any of these restrictions. Perhaps most encouraging is the observation that even the verification problem for general hybrid systems, while undecidable, can be solved in many instances of practical interest using the symbolic approach (see, for example, <ref> [HW95, HWT96] </ref>). In particular, symbolic model checkers have been implemented for hybrid systems whose continuous dynamics are approximated by piecewise-linear envelopes [HHWT97]. Acknowledgments. The authors thank Rance Cleaveland, Limor Fix, David Karr, Peter Kopke, Fred Schneider, and Bernhard Steffen for helpful comments.
Reference: [HWT96] <author> T.A. Henzinger and H. Wong-Toi. </author> <title> Using HyTech to synthesize control parameters for a steam boiler. </title> <editor> In J.-R. Abrial, E. Borger, and H. Lang-maack, editors, </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <booktitle> Lecture Notes in Computer Science 1165, </booktitle> <pages> pages 265-282. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The verification problem for finitary drifting-clock systems can be solved under any of these restrictions. Perhaps most encouraging is the observation that even the verification problem for general hybrid systems, while undecidable, can be solved in many instances of practical interest using the symbolic approach (see, for example, <ref> [HW95, HWT96] </ref>). In particular, symbolic model checkers have been implemented for hybrid systems whose continuous dynamics are approximated by piecewise-linear envelopes [HHWT97]. Acknowledgments. The authors thank Rance Cleaveland, Limor Fix, David Karr, Peter Kopke, Fred Schneider, and Bernhard Steffen for helpful comments.
Reference: [Lam83] <author> L. Lamport. </author> <title> What good is temporal logic? In R.E.A. </title> <editor> Mason, editor, </editor> <booktitle> Information Processing 83: Proceedings of the Ninth IFIP World Computer Congress, </booktitle> <pages> pages 657-668. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1983. </year>
Reference-contexts: The state-transition paradigm originated with state machines and has become a standard model for reactive systems (see, for example, the Kripke-Structure approach of Clarke and Emerson [CE81], the Fair-Transition-System approach of Manna and Pnueli [MP92], and the Tla approach of Lamport [Lam94]). Stutter closure has been advocated by Lam-port <ref> [Lam83] </ref>; limit closure (safety) was formally defined by Alpern, Demers, and Schneider [ADS86]; the relationship between systems and closure properties was elucidated by Emerson [Eme83]; the executability (machine closure) of systems, by Apt, Francez, and Katz [AFK88].
Reference: [Lam94] <author> L. Lamport. </author> <title> The Temporal Logic of Actions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <year> 1994. </year>
Reference-contexts: Bibliographic remarks. The state-transition paradigm originated with state machines and has become a standard model for reactive systems (see, for example, the Kripke-Structure approach of Clarke and Emerson [CE81], the Fair-Transition-System approach of Manna and Pnueli [MP92], and the Tla approach of Lamport <ref> [Lam94] </ref>). Stutter closure has been advocated by Lam-port [Lam83]; limit closure (safety) was formally defined by Alpern, Demers, and Schneider [ADS86]; the relationship between systems and closure properties was elucidated by Emerson [Eme83]; the executability (machine closure) of systems, by Apt, Francez, and Katz [AFK88].
Reference: [LSVW96] <author> N.A. Lynch, R. Segala, F. Vaandrager, and H.B. Weinberg. </author> <title> Hybrid I/O Automata. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 496-510. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 50 </month>
Reference-contexts: The use of flow-invariants to model hybrid systems in general [ACH + 95], and drifting clocks in particular [AHH96], was developed in the framework of hybrid automata (see, for example, the survey [Hen96]). Open hybrid systems were first discussed by Lynch, Segala, Vaandrager, and Weinberg <ref> [LSVW96] </ref>. A detailed presentation of our model for open hybrid systems, complete with uncontrolled continuous variables and a discussion of executable differential constraints, can be found in [AH97]. Recent workshop proceedings provide an excellent overview of applications for hybrid systems [GNRR93, ANKS95, AHS96].
Reference: [LV92] <author> N.A. Lynch and F. Vaandrager. </author> <title> Action transducers and timed automata. </title> <editor> In R.J. Cleaveland, editor, </editor> <booktitle> CONCUR 92: Theories of Concurrency, Lecture Notes in Computer Science 630, </booktitle> <pages> pages 436-455. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: (delay-invariant) condition instead of a fairness (acceptance) condition are sometimes referred to as timed safety automata [HNSY94]. 19 In a noninitialized rectangular automaton, the drift bounds of a clock may vary. 20 In addition to finite automata and temporal logics, also process algebras have been en riched with clock variables <ref> [NS91, LV92, DB96] </ref>. 44 branching-time logic Ctl, we obtain the real-time logic Tctl [ACD93].
Reference: [McM93] <author> K.L. McMillan. </author> <title> Symbolic Model Checking: An Approach to the State-Explosion Problem. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: The efficiency of the computation depends on the representation of state predicates. In the case of finite-state systems, the involved state predicates are boolean expressions, and binary decision diagrams have turned out to provide a cost-effective representation <ref> [McM93] </ref>. For finitary real-time systems, the involved state predicates contain clock constraints (of the form x y ~ c), and difference-bounds matrices have been the data structure of choice [Dil89a] (alternative representations are being investigated, for example, in [ABK + 97]).
Reference: [MKP96] <author> Z. Manna, Y. Kesten, and A. Pnueli. </author> <title> Verifying clocked transition systems. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 13-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Such rules can be found, for example, in [MP84]. Appendix B: Automatic Analysis of Real-time Systems In Appendix A, we outlined a methodology for establishing properties of real-time systems using mathematical proof. Similar proof methods can be found in <ref> [dBHdRR92, MKP96] </ref> and are supported by deductive verification tools such as STeP [BBC + 96]. An alternative, more limited but more automated, approach employs algorithms for establishing properties of real-time systems.
Reference: [MMP92] <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Bibliographic remarks. The bounded-drift assumption underlies the clock synchronization problem for distributed systems (see, for example, the survey by Schneider [Sch87]). The dichotomy of discrete transitions (jumps) versus continuous transitions (flows) was introduced by Manna, Maler, and Pnueli <ref> [MMP92] </ref>. The use of flow-invariants to model hybrid systems in general [ACH + 95], and drifting clocks in particular [AHH96], was developed in the framework of hybrid automata (see, for example, the survey [Hen96]). Open hybrid systems were first discussed by Lynch, Segala, Vaandrager, and Weinberg [LSVW96].
Reference: [MP84] <author> Z. Manna and A. Pnueli. </author> <title> Adequate proof principles for invariance and liveness properties of concurrent programs. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 4(3) </volume> <pages> 257-289, </pages> <year> 1984. </year>
Reference-contexts: The main drawback of this approach is its complexity: to prove a 3 property of a real-time system, we must use a rule for proving 23 properties of discrete systems. Such rules can be found, for example, in <ref> [MP84] </ref>. Appendix B: Automatic Analysis of Real-time Systems In Appendix A, we outlined a methodology for establishing properties of real-time systems using mathematical proof. Similar proof methods can be found in [dBHdRR92, MKP96] and are supported by deductive verification tools such as STeP [BBC + 96].
Reference: [MP92] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Bibliographic remarks. The state-transition paradigm originated with state machines and has become a standard model for reactive systems (see, for example, the Kripke-Structure approach of Clarke and Emerson [CE81], the Fair-Transition-System approach of Manna and Pnueli <ref> [MP92] </ref>, and the Tla approach of Lamport [Lam94]). <p> The wait watching macro is inspired by Esterel [BG88]. The use of control-location labels to define the transitions of a while program is standard practice in state-transition semantics (see, for example, <ref> [MP92] </ref>). 5 Timed Systems 3: Reactivity 5.1 Untimed processes The parallel composition of while programs is called a concurrent program. <p> Such a calculus, therefore, is sound but may not be complete for proving if a real-time system satisfies a property from that class. Properties can be described, for example, by formulas of linear temporal logic <ref> [MP92] </ref>. For a state predicate , the temporal formula 2 describes the set of behaviors that contain (and pass) only states for which is true, and the temporal formula 3 describes the set of behaviors that contain (or pass) some state for which is true.
Reference: [MP95] <author> Z. Manna and A. Pnueli. </author> <title> Temporal Verification of Reactive Systems: Safety. </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: By elementary topology, for nonzeno real-time systems, the pre-satisfaction of safety properties coincides with satisfaction [Hen92]. Hence, for proving safety properties of nonzeno real-time systems, we can use any calculus for proving safety properties of discrete systems. Consider, for instance, the invariance rule Safe of Manna and Pnueli <ref> [MP95] </ref>, whose translation into our framework is shown in Figure 23. The rule Safe is sound and complete for proving assertions of the form S j= 2, for a nonzeno real-time system S = ( I ; N ; T ) and a state predicate .
Reference: [NS91] <author> X. Nicollin and J. Sifakis. </author> <title> An overview and synthesis on timed process algebras. </title> <editor> In K.G. Larsen and A. Skou, editors, </editor> <booktitle> CAV 91: Computer-aided Verification, Lecture Notes in Computer Science 575, </booktitle> <pages> pages 376-398. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: (delay-invariant) condition instead of a fairness (acceptance) condition are sometimes referred to as timed safety automata [HNSY94]. 19 In a noninitialized rectangular automaton, the drift bounds of a clock may vary. 20 In addition to finite automata and temporal logics, also process algebras have been en riched with clock variables <ref> [NS91, LV92, DB96] </ref>. 44 branching-time logic Ctl, we obtain the real-time logic Tctl [ACD93].
Reference: [NSY93] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> From Atp to timed graphs and hybrid systems. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 181-202, </pages> <year> 1993. </year>
Reference-contexts: Recent workshop proceedings provide an excellent overview of applications for hybrid systems [GNRR93, ANKS95, AHS96]. The thermostat example is due to Nicollin, Sifakis, and Yovine <ref> [NSY93] </ref>. 7 Conclusion We illustrated the clock paradigm for specifying timed systems.
Reference: [RS97] <author> J.-F. Raskin and P.-Y. Schobbens. </author> <title> State clock logic: a decidable real-time logic. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 33-47. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: These undecidability results have led researchers to consider several special cases: in <ref> [AFH94, RS97] </ref> the use of specification clocks is restricted to refer only to immediately preceding or succeeding occurrences of events; in [AFH96] the use of specification clocks is restricted to refer only to the approximate times of events; in [AH94, HK97] the durations of all delays are restricted to be (observed
Reference: [Sch87] <author> F.B. Schneider. </author> <title> Understanding protocols for byzantine clock synchronization. </title> <type> Technical Report CSD-TR-87-859, </type> <institution> Cornell University, </institution> <year> 1987. </year> <month> 51 </month>
Reference-contexts: Bibliographic remarks. The bounded-drift assumption underlies the clock synchronization problem for distributed systems (see, for example, the survey by Schneider <ref> [Sch87] </ref>). The dichotomy of discrete transitions (jumps) versus continuous transitions (flows) was introduced by Manna, Maler, and Pnueli [MMP92].
References-found: 64

