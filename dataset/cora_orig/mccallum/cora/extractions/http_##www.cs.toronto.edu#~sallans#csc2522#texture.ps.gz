URL: http://www.cs.toronto.edu/~sallans/csc2522/texture.ps.gz
Refering-URL: http://www.cs.toronto.edu/~sallans/csc2522/index.html
Root-URL: 
Email: Email: sallans@cs.toronto.edu  
Title: Texture Synthesis  
Author: Brian Sallans 
Date: January 6, 1998  
Note: CSC 2522 Final Project  
Abstract: An implementation of De Bonet's texture synthesis technique is discussed. In order to duplicate De Bonet's results, some details of the algorithm were changed, and others were determined by trial and error.
Abstract-found: 1
Intro-found: 1
Reference: [De Bonet, 1997] <author> De Bonet, J. </author> <year> (1997). </year> <title> Multiresolution sampling procedure for analysis and synthesis of texture images. </title> <booktitle> In Computer Graphics. ACM SIGGRAPH'97. </booktitle>
Reference-contexts: 1 Introduction Rendering texture accurately is an essential part of producing realistic computer generated scenes. A recent technique proposed in <ref> [De Bonet, 1997] </ref> attempts to overcome the limitations of previous techniques (most notably [Heeger and Bergen, 1995]) by modeling the correlations between large-scale, low frequency features and and small-scale, high frequency features of textures. For more details about the method itself see [De Bonet, 1997]. <p> A recent technique proposed in <ref> [De Bonet, 1997] </ref> attempts to overcome the limitations of previous techniques (most notably [Heeger and Bergen, 1995]) by modeling the correlations between large-scale, low frequency features and and small-scale, high frequency features of textures. For more details about the method itself see [De Bonet, 1997]. In the following paper I will discuss my implementation of this method, problems encountered during implementation and suggestions for future work. 2 Implementation Details and Problems 2.1 Implementation Language I decided to implement the algorithm in Matlab version 5.1. <p> For the oriented filters, I used 3fi3 filters formed from first and second derivatives of a unit variance Gaussian. When performing convolutions, I used reflection boundary conditions. 2.3 Pixel Substitution The pseudo-code given in <ref> [De Bonet, 1997] </ref> for selecting and substituting pixels is: Loop i from top_level-1 downto 0 Loop (x-,y-) over Pyr_synth [level i] C = 0 Loop (x,y) over Pyr_analysis [level i] C = C U -(x,y)- Loop v from top_level downto i+1 Loop j for each feature if D (Pyr_analysis [v][j](x/2^(v-i),y/2^(v-i)), Pyr_synth <p> As an alternative, I tried setting the normalizing constant to Z = 1. In this case, I found that the appropriate thresholds were larger, typically on the order of T = 1 to T = 10 2 . In <ref> [De Bonet, 1997] </ref>, it was reported that reasonable mixing could be achieved for many textures with thresholds of approximately 0.3. I found that the thresholds required to get reasonable mixing differed greatly between textures. An example is shown in Figure 3. <p> I noticed similar behaviour when I tried De Bonet's on-line texture synthesis demo; some textures required much larger thresholds than others to achieve reasonable results. Unless otherwise indicated, all examples shown in this paper were generated with Z = 1. 2.6 Forming the Analysis Pyramid In <ref> [De Bonet, 1997] </ref>, De Bonet mentions that the oriented filter responses are calculated as: F i (I; x; y) = (G i (I) f j )(x; y) if size of G i (I) f j 0 otherwise This means that only the Laplacian response contributes to the parent structure when synthesizing
Reference: [Heeger and Bergen, 1995] <author> Heeger, D. and Bergen, J. </author> <year> (1995). </year> <title> Pyramid based texture analysis/synthesis. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 229-238. </pages> <publisher> ACM SIGGRAPH'95. </publisher> <pages> 8 </pages>
Reference-contexts: 1 Introduction Rendering texture accurately is an essential part of producing realistic computer generated scenes. A recent technique proposed in [De Bonet, 1997] attempts to overcome the limitations of previous techniques (most notably <ref> [Heeger and Bergen, 1995] </ref>) by modeling the correlations between large-scale, low frequency features and and small-scale, high frequency features of textures. For more details about the method itself see [De Bonet, 1997].
References-found: 2

