URL: http://www.cs.colorado.edu/~sbrandt/papers/RTSSMiddleware97.ps.Z
Refering-URL: http://www.cs.colorado.edu/~sbrandt/personal/Publications.html
Root-URL: http://www.cs.colorado.edu
Title: From 1997 IEEE Workshop on Middleware for Distributed Real-Time Systems and Services 1 The DQM
Author: Marty Humphrey Scott Brandt Gary Nutt Toby Berk 
Address: Boulder Denver, Colorado 80217 Boulder, Colorado 80309  Boulder, Colorado 80309 Miami, Florida 33199  
Affiliation: Computer Science and Engineering Dept. Computer Science Dept., CB 430 University of Colorado at Denver University of Colorado at  Computer Science Dept., CB 430 School of Computer Science University of Colorado at Boulder Florida International University  
Abstract: Multimedia applications often fail to perform as designed, when resources must be timeshared between multiple applications at run-time. To address this problem, a software architecture is investigated in which a centralized Dynamic Quality of Service Manager (DQM) mediates resource usage between the operating system and the applications. Applications are written to be able to execute at a range of operating levels|a level is defined by a certain amount of resource usage and the corresponding application quality. The DQM lowers the operating level of one or more applications when applications are performing poorly. This action immediately reduces overall resource consumption, which subsequently increases the resource availability to those applications performing poorly. Similarly, the DQM raises operating levels in conditions of underload, thus maximizing resource utilization and collective quality. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tarek F. Abdelzaher, Ella M. Atkins, and Kang G. Shin. </author> <title> QoS negotiation in real-time systems and its application to automated flight control. </title> <booktitle> In Proceedings of the Third IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: The developers of the RTPOOL real-time middle-ware service are also investigating the use of QoS levels for applications for Automated Flight Control <ref> [1] </ref>. Their research indicates that levels can be used to express application-level semantics to control how performance is to be degraded under overload or failure conditions.
Reference: [2] <author> Cristina Aurrecoechea, Andrew Campbell, and Linda Hauw. </author> <title> A survey of QoS architectures. </title> <booktitle> In Proceedings of the 4th IFIP International Workshop on Quality of Service, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The current state of operating systems support for distributed QoS is that multimedia applications (and other time-dependent computations) do not play a large enough role in resource management <ref> [2, 8, 13, 14] </ref>. Rather, the operating system decides how much CPU time, physical memory, network bandwidth, etc., each application receives. fl The research of this author has been supported by the National Science Foundation under grant IRI-9307619. <p> Contracts of this kind generally require finer control over resource usage than is possible if the DQM operates as a user process. Other researchers <ref> [2, 14] </ref> indicate that real-time scheduling assistance such as Earliest Deadline First or Rate Monotonic is needed in order to support QoS contracts from the operating system. 4 Experiment To begin to evaluate the proposed software architecture, we performed a series of experiments with a simple DQM and a simple graphics
Reference: [3] <author> Changpeng Fan. </author> <title> Realizing a soft real-time framework for supporting distributed multimedia applications. </title> <booktitle> In Proceedings of the 5th IEEE Workshop on the Future Trends of Distributed Computing Systems, </booktitle> <pages> pages 128-134, </pages> <address> Korea, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Section 6 discusses projects related to this work. Section 7 contains the conclusions of this paper. 2 Operating Levels Previous flexible QoS-based systems have assumed that applications can operate adequately given any degree of resource allocation (possibly within a pre-specified range) <ref> [3, 9] </ref>, and/or depend on real-time QoS facilities within the kernel [5, 9]. The assumption that an application can run adequately given any degree of resource allocation is overly broad and does not generally seem feasible. <p> However, in the VuSystem, under conditions of overload, the user interactively decides which applications should be given more resources (and which applications should be given less). Fan investigates a software architecture in which applications request a continuous range of QoS commitment <ref> [3] </ref>. In that system, it is assumed that any application can be written in such a way as to work reasonably with any resource allocation within a particular range. Nieh and Lam also take this approach in their SMART scheduler [9].
Reference: [4] <author> R. Gopalakrishnan and Guru M. Parulkar. </author> <title> Real-time upcalls: A mechanism to provide real-time processing guarantees. </title> <institution> Department of Computer Science Technical Report WUCS-95-06, Washington University, </institution> <year> 1995. </year>
Reference-contexts: We believe that without a centralized manager, applications will thrash with each other for resource usage. Gopalakrishnan uses a real-time upcall facility to implement periodic activity <ref> [4] </ref>. The real-time upcall is similar to the mechanism in the DQM Architecture in which the DQM communicates with the individual applications.
Reference: [5] <author> Michael B. Jones, Joseph Barbera III, and Al-lessandro Forin. </author> <title> An overview of the Rialto real-time architecture. </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop, </booktitle> <pages> pages 249-256, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: Section 7 contains the conclusions of this paper. 2 Operating Levels Previous flexible QoS-based systems have assumed that applications can operate adequately given any degree of resource allocation (possibly within a pre-specified range) [3, 9], and/or depend on real-time QoS facilities within the kernel <ref> [5, 9] </ref>. The assumption that an application can run adequately given any degree of resource allocation is overly broad and does not generally seem feasible. <p> We believe this assumption is impractical for the majority of real-time applications and that the constraint that an application must specify a set of operating levels to be more feasible. The major difference between the Rialto real-time operating system <ref> [5] </ref> and this work regards system overload. Rialto uses a QoS-based scheduler to dynamically allocate system resources (in particular, the CPU) based on negotiated QoS guarantees. These guarantees are explicitly enforced by the sched-uler.
Reference: [6] <author> Mark J. Kilgard. </author> <title> Programming OpenGL for the X Window System. </title> <publisher> Addison Wesley, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: The application (a Spinning Dinosaur) is derived from a sample application that comes with GLUT, the OpenGL Utility Toolkit <ref> [6] </ref>. This application was chosen because executing multiple copies concurrently results in each copy degrading to an unacceptable quality as perceived by the user. To be able to describe this performance quantitatively, a clock was superimposed on the dinosaur.
Reference: [7] <author> Christopher J. Lindblad and David L. Tennenhouse. </author> <title> The VuSystem: A programming system for compute-intensive multimedia. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 14(7) </volume> <pages> 1298-1313, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: and operating level and varying levels of application importance; to develop appropriate protocols for distributed DQM-to-DQM resource reservations and control policies; to deal with resources other than just the CPU; and to examine the information flow between applications and the DQM. 6 Related Work The goals of the VuSystem project <ref> [7] </ref> project are similar to the goals of this project. Instead of maintaining a fixed quality of service to applications (determined at call admission), both projects propose to allow users to concurrently execute as many programs as desired, even if an overload condition develops.
Reference: [8] <author> Cliff Mercer, Stephan Savage, and Hideyuki Tokuda. </author> <title> Processor capacity reserves: Operating system support for multimedia applications. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 90-99, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The current state of operating systems support for distributed QoS is that multimedia applications (and other time-dependent computations) do not play a large enough role in resource management <ref> [2, 8, 13, 14] </ref>. Rather, the operating system decides how much CPU time, physical memory, network bandwidth, etc., each application receives. fl The research of this author has been supported by the National Science Foundation under grant IRI-9307619. <p> These guarantees are explicitly enforced by the sched-uler. In this sense, Rialto is similar to the work on Processor Capacity Reserves, in which an application can explicitly reserve a portion of the CPU <ref> [8] </ref>. Our work differs from this in two ways.
Reference: [9] <author> Jason Nieh and Monica S. Lam. </author> <title> Integrated processor scheduling for multimedia. </title> <booktitle> In Proceedings of the Fifth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, New Hampshire, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Section 6 discusses projects related to this work. Section 7 contains the conclusions of this paper. 2 Operating Levels Previous flexible QoS-based systems have assumed that applications can operate adequately given any degree of resource allocation (possibly within a pre-specified range) <ref> [3, 9] </ref>, and/or depend on real-time QoS facilities within the kernel [5, 9]. The assumption that an application can run adequately given any degree of resource allocation is overly broad and does not generally seem feasible. <p> Section 7 contains the conclusions of this paper. 2 Operating Levels Previous flexible QoS-based systems have assumed that applications can operate adequately given any degree of resource allocation (possibly within a pre-specified range) [3, 9], and/or depend on real-time QoS facilities within the kernel <ref> [5, 9] </ref>. The assumption that an application can run adequately given any degree of resource allocation is overly broad and does not generally seem feasible. <p> In that system, it is assumed that any application can be written in such a way as to work reasonably with any resource allocation within a particular range. Nieh and Lam also take this approach in their SMART scheduler <ref> [9] </ref>. Tan and Hsu are also investigating this approach for scheduling multimedia applications, utilizing a tighter coupling between the scheduler and the multimedia user applications than our approach [15].
Reference: [10] <author> Brian D. Noble, M. Satyanarayanan, Dushyanth Narayanan, J. Eric Tilton, Jason Flinn, and Kevin R. Walker. </author> <title> Agile application-aware adaptation for mobility. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Saint-Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: The Odyssey project proposes an initial API as a set of extensions to UNIX for application-aware adaptation <ref> [10] </ref>. In Odyssey, there is no centralized manager of resources similar to the DQM; rather, an application registers a user-level procedure to invoke if a condition-such as network bandwidth falling below 10 Mb/s-occurs. We believe that without a centralized manager, applications will thrash with each other for resource usage.
Reference: [11] <author> Gary Nutt, Toby Berk, Scott Brandt, Marty Humphrey, and Sam Siewert. </author> <title> Resource management for a virtual planning room. </title> <booktitle> In Proceedings of the 3rd International Workshop on Multimedia Information Systems, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: These problems are particularly evident in complex real-time and multimedia applications such as the Virtual Planning Room (VPR) <ref> [11] </ref>, which is a mul-tiperson, distributed virtual environment that supports collaboration among human users in a free-form communication environment.
Reference: [12] <author> Gary J. Nutt. </author> <title> Model-based virtual environments for collaboration. </title> <type> Technical Report CU-CS-799-95, </type> <institution> Department of Computer Science, University of Col-orado, Boulder, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: For example, a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination <ref> [12] </ref>. The system hardware provides a limited set of capabilities to the operating system, which are delivered to the VPR. The VPR supports applications by providing real-time audio and video support, which includes the rendering of objects, and assists in applications' use of system resources.
Reference: [13] <author> Shuichi Oikawa and Ragunathan Rajkumar. </author> <title> A resource centric approach to multimedia operating systems. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium Workshop on Resource Allocation Problems in Multimedia Systems. IEEE, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: The current state of operating systems support for distributed QoS is that multimedia applications (and other time-dependent computations) do not play a large enough role in resource management <ref> [2, 8, 13, 14] </ref>. Rather, the operating system decides how much CPU time, physical memory, network bandwidth, etc., each application receives. fl The research of this author has been supported by the National Science Foundation under grant IRI-9307619.
Reference: [14] <author> Ralf Steinmetz. </author> <title> Analyzing the multimedia operating system. </title> <booktitle> IEEE Multimedia, </booktitle> <month> Spring </month> <year> 1995. </year>
Reference-contexts: The current state of operating systems support for distributed QoS is that multimedia applications (and other time-dependent computations) do not play a large enough role in resource management <ref> [2, 8, 13, 14] </ref>. Rather, the operating system decides how much CPU time, physical memory, network bandwidth, etc., each application receives. fl The research of this author has been supported by the National Science Foundation under grant IRI-9307619. <p> Contracts of this kind generally require finer control over resource usage than is possible if the DQM operates as a user process. Other researchers <ref> [2, 14] </ref> indicate that real-time scheduling assistance such as Earliest Deadline First or Rate Monotonic is needed in order to support QoS contracts from the operating system. 4 Experiment To begin to evaluate the proposed software architecture, we performed a series of experiments with a simple DQM and a simple graphics
Reference: [15] <author> Teik Guan Tan and Wynne Hsu. </author> <title> Scheduling multimedia applications under overload and indetermin-stic conditions. </title> <booktitle> In Proceedings of the Third IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Nieh and Lam also take this approach in their SMART scheduler [9]. Tan and Hsu are also investigating this approach for scheduling multimedia applications, utilizing a tighter coupling between the scheduler and the multimedia user applications than our approach <ref> [15] </ref>. We believe this assumption is impractical for the majority of real-time applications and that the constraint that an application must specify a set of operating levels to be more feasible. The major difference between the Rialto real-time operating system [5] and this work regards system overload.
References-found: 15

