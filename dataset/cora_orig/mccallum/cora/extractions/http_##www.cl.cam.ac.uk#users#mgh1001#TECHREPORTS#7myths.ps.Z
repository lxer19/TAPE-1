URL: http://www.cl.cam.ac.uk/users/mgh1001/TECHREPORTS/7myths.ps.Z
Refering-URL: http://www.cs.rice.edu/~kfisler/comp408/relreadings.html
Root-URL: 
Email: Email: Jonathan.Bowen@comlab.ox.ac.uk  Email: Mike.Hinchey@cl.cam.ac.uk  
Title: Seven More Myths of Formal Methods  
Author: Jonathan P. Bowen Michael G. Hinchey p W. W. Sawyer 
Note: Mathematicians first used the  Mathematician's Delight (1943) by  
Web: URL: http://www.comlab.ox.ac.uk/oucl/people/jonathan.bowen.html  URL: http://www.cl.cam.ac.uk/users/mgh1001/  sign  
Address: Wolfson Building, Parks Road, Oxford OX1 3QD, UK.  New Museums Site, Pembroke Street, Cambridge CB2 3QG, UK.  
Affiliation: Oxford University Computing Laboratory Programming Research Group  University of Cambridge Computer Laboratory,  
Abstract: For whatever reason, formal methods remain one of the more contentious techniques in industrial software engineering. Despite great increases in the number of organizations and projects applying formal methods, it is still the case that the vast majority of potential users of formal methods fail to become actual users. A paper by Hall in 1990 examined a number of `myths' concerning formal methods, assumed by some to be valid. This paper considers a few more beliefs held by many and presents some counter examples. 1, without in the least knowing what it could mean, because it shortened work and led to correct results. People naturally tried to find out why this happened and what p 1, really meant. After two hundred years they succeeded. fl This paper will appear in IEEE Software 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Bowen, J.P. & Hinchey, M.G.: </editor> <title> Formal Methods and Safety-Critical Standards. </title> <booktitle> Computer 27(8): </booktitle> <pages> 68-71, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: A number of standards bodies have not only used formal specification languages in making their own standards unambiguous, but have strongly recommended and in the future may mandate the use of formal methods in certain classes of applications <ref> [1, 2] </ref>. The International Electrotechnical Commission specifically mentions a number of formal methods (CCS, CSP, HOL, LOTOS, OBJ, VDM, Z) and temporal logic in the development of safety-critical systems. <p> Whether or not one believes that formal methods are necessary in system development, one cannot deny that they are indeed strongly advisable in certain classes of applications, and are likely to be required in an increasing number of cases in the future <ref> [1] </ref>. Myth 13. Formal Methods are not supported. If media attention is anything to go by, interest in formal methods has grown phenomenally, if from a small base. <p> Making a language more expressive does indeed facilitate briefer and more elegant specifications, but can make reasoning more difficult. LOTOS was standardized in 1989, and draft ISO standards for both Z and VDM have been proposed <ref> [1] </ref>. These standards set forth a number of sound constructs and their associated formal semantics, making it easier to read other people's specifications (assuming, that is, that the relevant users will conform to these standards).
Reference: [2] <author> Bowen, J.P. & Stavridou, V.: </author> <title> Safety-Critical Systems, Formal Methods and Standards. </title> <journal> Software Engineering Journal, </journal> <volume> 8(4) </volume> <pages> 189-209, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Using formal development techniques historical information is likely to be even more scarce, as we have not yet applied formal methods to a sufficient number of projects on which to base trends and observations. Surveys of formal development (see, for example, <ref> [2, 3, 6] </ref>) and a highlighting of successes, failures, hindrances, etc., will eventually provide us with the levels of information we require. Many of the much publicized formal methods projects are in very specialized domains, and domains that are unlikely to be addressed on a very regular basis. <p> A number of standards bodies have not only used formal specification languages in making their own standards unambiguous, but have strongly recommended and in the future may mandate the use of formal methods in certain classes of applications <ref> [1, 2] </ref>. The International Electrotechnical Commission specifically mentions a number of formal methods (CCS, CSP, HOL, LOTOS, OBJ, VDM, Z) and temporal logic in the development of safety-critical systems.
Reference: [3] <author> Gerhart, S., Craigen, D. & Ralston, T.: </author> <title> Experience with Formal Methods in Critical Systems. </title> <journal> IEEE Software, </journal> <volume> 11(1) </volume> <pages> 21-28, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Using formal development techniques historical information is likely to be even more scarce, as we have not yet applied formal methods to a sufficient number of projects on which to base trends and observations. Surveys of formal development (see, for example, <ref> [2, 3, 6] </ref>) and a highlighting of successes, failures, hindrances, etc., will eventually provide us with the levels of information we require. Many of the much publicized formal methods projects are in very specialized domains, and domains that are unlikely to be addressed on a very regular basis. <p> IEEE TSE, Computer and Software ran very successful coordinated special issues on formal methods in 1990 (for example, see [10]. More recently, in January 1994 an IEEE Software special issue on safety-critical systems also devoted a not inconsiderable amount of attention to formal methods (e.g., <ref> [3] </ref>), as has a newly launched journal in this area entitled High Integrity Systems. Formal methods (in particular Z, VDM, CSP and CCS) are taught in most UK undergraduate computer science courses.
Reference: [4] <author> Gibbs, </author> <title> W.W.: Software's Chronic Crisis. </title> <journal> Scientific American, </journal> <volume> 271(3) </volume> <pages> 86-95, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: While formal methods have been employed, to some extent, for over a quarter of a century, there are still very few people who understand exactly what formal methods are, and how they are applied in practice <ref> [4] </ref>. Many people completely misunderstand what constitutes a formal method, and how formal methods have been successfully employed in the development of complex systems.
Reference: [5] <author> Hall, J.A.: </author> <title> Seven Myths of Formal Methods. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 11-19, </pages> <month> September </month> <year> 1990. </year> <month> 11 </month>
Reference-contexts: Of great concern is the fact that we must place many professional system developers and project managers into that latter category. 2 Hall's Original Seven Myths In a seminal article <ref> [5] </ref>, Hall highlights seven popular misconceptions, or `myths' as he calls them, of formal methods, and attempts to dispel these by means of an example. Regretfully, five years later, these and other misconceptions still abound. <p> This is an unrealistic view of software development, and every developer of complex systems has experienced the need to revisit both system requirements and the system specification at much later stages in development. While Hall <ref> [5] </ref> disputes the myths that a high degree of mathematical ability is required to be comfortable with formal methods, and that formal methods are unacceptable to users, more traditional design methods do indeed excel at requirements elicitation and interaction with system procurers. <p> What is perhaps surprising is that many tools to support formal development have not been developed using formal techniques. Formal methods have indeed been applied to the development of a number of support tools for conventional development methods, such as the SSADM CASE tool described by Hall <ref> [5] </ref>. <p> functionality and you want a guarantee that they are going to work with this very high reliability : : : : : : you can't do it! Acknowledgements The authors would like to thank Anthony Hall for the inspiration of his original paper on the Seven Myths of Formal Methods <ref> [5] </ref> which made this paper possible. Jonathan Bowen is funded by the UK Engineering and Physical Sciences Research Council (EP-SRC) on grant no. GR/J15186. Mike Hinchey is funded by ICL.
Reference: [6] <editor> Hinchey, M.G. & Bowen, J.P., editors: </editor> <title> Applications of Formal Methods. </title> <publisher> Prentice Hall Inter--national Series in Computer Science, </publisher> <year> 1995. </year>
Reference-contexts: Claims that formal methods are all about proving programs correct (Myth 2 in Hall's paper) and are only useful in safety-critical systems (Myth 3), while untrue, are not quite so detrimental, and a 1 number of successful applications in non safety-critical domains have helped to clarify these points (see <ref> [6] </ref> for examples). <p> Highly publicized accounts of the application of formal methods to a number of well-known systems, such as the Sizewell-B nuclear power plant in the UK, IBM's CICS system, the Darlington Nuclear Facility in Canada, and the most recent Airbus aircraft (all of which are reported in <ref> [6] </ref>) have helped to bring the industrial application of formal methods to a wider audience. 3 Seven More Myths Many of Hall's myths were, and we believe to a certain extent still are, propagated by the media, and are myths held by the public and the computer science community at large, <p> We hope to dispel many of those myths here, by reference to a number of real-life industrial applications of various formal methods which have proven to be generally successful. Many of the examples cited here are discussed in greater detail in <ref> [6] </ref>. Myth 8. Formal Methods delay the development process. A number of formal methods projects have run notoriously over schedule. The assumption that this is inherent in the nature of formal methods is a rather irrational deduction. <p> Using formal development techniques historical information is likely to be even more scarce, as we have not yet applied formal methods to a sufficient number of projects on which to base trends and observations. Surveys of formal development (see, for example, <ref> [2, 3, 6] </ref>) and a highlighting of successes, failures, hindrances, etc., will eventually provide us with the levels of information we require. Many of the much publicized formal methods projects are in very specialized domains, and domains that are unlikely to be addressed on a very regular basis. <p> Most of the projects discussed in <ref> [6] </ref>, for example, place great emphasis on tool support. This is by no means coincidental, but rather follows a trend, which it is expected will eventually result in integrated workbenches to support formal specification, just as CASE workbenches support system development using more traditional structured methods. <p> not classified in these terms, but where one needs, or wishes, to ensure that the system operates correctly due to the catastrophic consequences of a system failure. (See for example the presentation of the formal specification of an algorithm to determine the result in a single transferable voting system in <ref> [6] </ref>.) There are occasions however where formal methods are not only desirable, but positively required. <p> More real links between industry and academia are required; and well pub 10 licized demonstrations of successful uses of formal methods are needed to disseminate the benefits of their use. A forthcoming collection of papers <ref> [6] </ref> aims to play its part in this by providing a collection of descriptions of the use of formal methods at an industrially useful scale written by the experts involved. More research is of course required to develop the use of formal methods.
Reference: [7] <author> Hoare, </author> <title> C.A.R. </title> & <editor> Gordon, M.J.C., editors: </editor> <title> Mechanized Reasoning and Hardware Design. </title> <publisher> Prentice Hall International Series in Computer Science, </publisher> <year> 1992. </year>
Reference-contexts: More recently, parts of the new T9000 Transputer pipeline architecture have been formalized using CSP and checked for correctness. A collection of invited papers written by experts in the field covers the applications outlined here and others in more detail <ref> [7] </ref>. A more recent approach to the development of hardware is hardware compilation. This allows a high-level program to be compiled directly into a netlist, a list of simple components such as gates and latches together with there interconnections.
Reference: [8] <author> Kronl of, K., </author> <title> editor: Method Integration: Concepts and Case Studies. </title> <editor> John Wiley & Sons, </editor> <booktitle> Series in Software Based Systems, </booktitle> <year> 1993. </year>
Reference-contexts: In the context of system engineering, a method is defined to consist of: (1) an underlying model of development, (2) a language, or languages, (3) defined, ordered steps, and (4) guidance for applying these in a coherent manner. (This definition is modified from <ref> [8] </ref>.) Clearly many so-called formal methods do not address all of these issues.
Reference: [9] <author> Semmens, L.T., France, R.B. & Docker, T.W.G.: </author> <title> Integrating Structured Analysis and Formal Specification Techniques. </title> <journal> The Computer Journal, </journal> <volume> 36(6) </volume> <pages> 600-610, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: On the other hand, there is a very valid argument that taking such an approach is often easier for those unskilled in the techniques of formal specification to follow, and can aid in the management of size and complexity, and provide a means of structuring specifications <ref> [9] </ref>. Approaches to method integration vary from running both structured and formal methods in parallel, to formally specifying transformations from the notations of structured methods to formal specification languages. Much success has been reported using the former technique.
Reference: [10] <author> Wing, J.M.: </author> <title> A Specifier's Introduction to Formal Methods. </title> <journal> Computer, </journal> <volume> 23(9) </volume> <pages> 8-24, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: IEEE TSE, Computer and Software ran very successful coordinated special issues on formal methods in 1990 (for example, see <ref> [10] </ref>. More recently, in January 1994 an IEEE Software special issue on safety-critical systems also devoted a not inconsiderable amount of attention to formal methods (e.g., [3]), as has a newly launched journal in this area entitled High Integrity Systems.
References-found: 10

