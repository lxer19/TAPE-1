URL: http://www.icsi.berkeley.edu/~phlipp/siamWP98.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/~phlipp/phlipp.publ.html
Root-URL: http://www.icsi.berkeley.edu
Title: Parallelizing Large-Scale Geophysical Applications in Java  
Author: M. Karrenbach M. Jacob flfl M. Philippsen flfl 
Note: High-Performance Fortran of only about 1.5-2 has been achieved.  
Abstract: Within Geophysics, seismic methods are an essential tool for petroleum and gas exploration. They produce images of the earth's interior and let explorationists analyze the geological structure of the underground. The memory and time requirements of seismic calculations suggest parallel implementations. In Fortran, however, parallel program code often not only lacks maintainability and reusability, but can be error-prone and looses portability when parallelization is attempted. This study shows that the advantages of Java (portability, parallel language constructs, strict object-orientation) can be used to efficiently implement basic seismic methods with acceptable performance. The performance of parallel High Resolution Velocity Analysis and parallel Imaging implemented in JavaParty is compared to the performance of High-Performance Fortran on IBM SP/2. Thereby a slowdown factor between Java and 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: With these libraries the programmer does not only have to deal with the seismic problem but in addition has to tackle the key problems of parallel programming: load balancing and locality. The Java programming language <ref> [1, 2] </ref> alleviates some of these problems. Java is object-oriented and offers language elements to express thread-based parallelism and synchronization without additional system libraries.
Reference: [2] <author> Siamak Hassanzadeh and Charles C. </author> <title> Mosher. Java: Object-Oriented programming for the cyber age. </title> <journal> The Leading Edge, </journal> <volume> 15(12) </volume> <pages> 1379-1381, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: With these libraries the programmer does not only have to deal with the seismic problem but in addition has to tackle the key problems of parallel programming: load balancing and locality. The Java programming language <ref> [1, 2] </ref> alleviates some of these problems. Java is object-oriented and offers language elements to express thread-based parallelism and synchronization without additional system libraries.
Reference: [3] <author> Siamak Hassanzadeh, Charles C. Mosher, and Calvin L. Joyner. </author> <title> Scalable parallel seismic processing. </title> <journal> The Leading Edge, </journal> <volume> 15(12) </volume> <pages> 1363-1366, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Dr.-Ing. Erich Muller Stiftung, Germany 1 2 Remote Method Invocation (RMI) of Java, data exchange between processors is easy. This allows for parallel processing on the application level, i.e., in the Java environment itself, as <ref> [3] </ref> discusses for geophysics. There is no further need for Message Passing or Shared Memory concepts within the application. Additionally, this parallelism is hardware independent. From the software engineering point of view, Java seems to be a perfect programming language for the parallel implementation of seismic methods.
Reference: [4] <author> IBM. </author> <title> High performance compiler for Java. </title> <address> http://www.alphaWorks.ibm.com. </address>
Reference-contexts: The slowdown factor is acceptable since JavaParty provides easy maintainability of source code, well-suited parallel language constructs, and it circumvents the need of Message Passing Libraries. Prospective implementations of Java compilers on SP/2 producing optimized native code as IBM's High Performance Java Compiler <ref> [4] </ref> will ameliorate performance issues further [4]. We achieved similar results with Velocity Analysis on SGI PowerChallenge. For more detailed information see [5]. 5 Acknowledgments We would like to thank the JavaParty group, especially Matthias Zenger, for their support of the JavaParty environment. <p> The slowdown factor is acceptable since JavaParty provides easy maintainability of source code, well-suited parallel language constructs, and it circumvents the need of Message Passing Libraries. Prospective implementations of Java compilers on SP/2 producing optimized native code as IBM's High Performance Java Compiler <ref> [4] </ref> will ameliorate performance issues further [4]. We achieved similar results with Velocity Analysis on SGI PowerChallenge. For more detailed information see [5]. 5 Acknowledgments We would like to thank the JavaParty group, especially Matthias Zenger, for their support of the JavaParty environment.
Reference: [5] <author> Matthias Jacob, Michael Philippsen, and Martin Karrenbach. </author> <title> Large-Scale Parallel Geophysical Algorithms in Java: A Feasibility Study. </title> <booktitle> In ACM 1998 Workshop on Java for High-Performance Network Computing, </booktitle> <year> 1998. </year>
Reference-contexts: Prospective implementations of Java compilers on SP/2 producing optimized native code as IBM's High Performance Java Compiler [4] will ameliorate performance issues further [4]. We achieved similar results with Velocity Analysis on SGI PowerChallenge. For more detailed information see <ref> [5] </ref>. 5 Acknowledgments We would like to thank the JavaParty group, especially Matthias Zenger, for their support of the JavaParty environment. Matthias Schwab of the Stanford Exploration Project designed and provided the geophysical operator framework JEST.
Reference: [6] <author> JavaParty. </author> <note> http://wwwipd.ira.uka.de/JavaParty. </note>
Reference-contexts: To ease the development and maintainance of parallel Java software, a precompiler called JavaParty has been used that is freely available <ref> [7, 6] </ref>. Software development with JavaParty is almost identical to coding in Java. If a class is marked by the class modifier remote adequate RMI hooks are inserted automatically. 4 Fig. 2. Measurements of parallel Velocity Analysis processing time on the IBM SP/2. Fig. 3.
Reference: [7] <author> Michael Philippsen and Matthias Zenger. </author> <title> JavaParty transparent remote objects in Java. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 9(11) </volume> <pages> 1125-1242, </pages> <month> November </month> <year> 1997. </year>
Reference-contexts: To ease the development and maintainance of parallel Java software, a precompiler called JavaParty has been used that is freely available <ref> [7, 6] </ref>. Software development with JavaParty is almost identical to coding in Java. If a class is marked by the class modifier remote adequate RMI hooks are inserted automatically. 4 Fig. 2. Measurements of parallel Velocity Analysis processing time on the IBM SP/2. Fig. 3.
Reference: [8] <author> Matthias Schwab and Joel Schroeder. </author> <title> Algebraic Java Classes for Numerical Optimization. </title> <booktitle> In ACM 1998 Workshop on Java for High-Performance Network Computing (Poster Presentation), </booktitle> <year> 1998. </year> <note> http://sepwww.stanford.edu/sep/matt/jest. </note>
Reference-contexts: However, in this paper we show that Java can achieve acceptable performance for scientific computing. For this study we pick two basic seismic data processing operators: a velocity analysis and an imaging method. Efforts are underway at the Stanford Exploration Project to produce a seismic operator framework (JEST <ref> [8] </ref>) in Java. Our implementation of a parallel geophysical operator is based on a preliminary version of JEST. 2 Geophysical Applications Geophysical seismic data sets often exhibit a regular data topology, that can be described by n-dimensional hypercubes.
References-found: 8

