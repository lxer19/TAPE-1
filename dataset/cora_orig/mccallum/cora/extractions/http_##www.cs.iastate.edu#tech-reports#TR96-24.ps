URL: http://www.cs.iastate.edu/tech-reports/TR96-24.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Stochastic Analysis of Periodic Timed Data Flow Diagrams with Markovian Transition Times  
Author: Jurgen Symanzik 
Keyword: Statistical Software Engineering, Formalized Data Flow Diagrams, Embedded Markov Process, Embedded Markov Chain, Aggregation Principle, Periodicity.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: TR #96-24 December 1996  c Copyright 1996 by Jurgen Symanzik. All rights reserved.  
Abstract-found: 0
Intro-found: 0
Reference: [AD88] <author> E. Abdurachman and H.T. David. </author> <title> Cesaro Limits of Marked Point Processes on the Line. Communication in Statistics | Stochastic Models, </title> <booktitle> 4(1) </booktitle> <pages> 77-98, </pages> <year> 1988. </year>
Reference: [AHU74] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1974. </year>
Reference-contexts: If the reachability set is finite, we can determine whether the FDFD is irreducible, and if so, what period d it has. First we want to introduce a definition from graph theory (e. g., <ref> [AHU74] </ref>, p. 189): Definition (1.3.2.1): Let G = (V; E) be a directed graph. <p> Let n = number of vertices = j RS (F DF D; fl initial ) j and e = number of edges. We can apply an algorithm that finds the strongly connected components of G. For example, Algorithm 5.4 in <ref> [AHU74] </ref>, p. 193, performs this task in O (M AX (n; e)) time. We stop if G is not strongly connected, i. e., if the FDFD with fl initial is not irreducible. <p> This can be done applying Dijkstra's Algorithm (e. g., Algorithm 5.6 in <ref> [AHU74] </ref>, p. 207, or Section 6.4 in [PS82]) to every fl i in time O (n 2 ). We could also use the Floyd-Warshall Algorithm (e. g., Section 6.5 in [PS82]) that finds the shortest paths between all pairs of nodes in O (n 3 ) time.
Reference: [BB93] <author> J.P. Bansler and K. Btdker. </author> <title> A Reappraisal of Structured Analysis: Design in an Organizational Context. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 11(2) </volume> <pages> 165-193, </pages> <year> 1993. </year>
Reference: [CB94] <author> D.L. Coleman and A.L. Baker. </author> <title> Synthesizing Structured Analysis and Object-Oriented Specifications. </title> <type> Technical Report 94-04, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> March </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], <ref> [CB94] </ref>, [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96]. This cited paper also contains a more detailed explanation of the underlying operational semantics of FDFD's and an extended example.
Reference: [Col91] <author> D.L. Coleman. </author> <title> Formalized Structured Analysis Specifications. </title> <type> PhD Thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1991. </year>
Reference-contexts: Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in <ref> [Col91] </ref>, [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96]. This cited paper also contains a more detailed explanation of the underlying operational semantics of FDFD's and an extended example.
Reference: [DeM78] <author> T. DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1978. </year>
Reference-contexts: The work presented in this paper can not only be applied to periodic M-TDFD's, but it can be directly used for the previously described Petri Nets with alternating enabling and firing time points. However, since our background is in Software Engineering, in particular in "Structured Analysis" (SA) (e. g., <ref> [DeM78] </ref>, [WM85a]) where traditional Data Flow Diagrams (DFD's) are probably the most widely 3 used specification technique in industry today ([BB93]), we wanted to present our results in this context. <p> We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in <ref> [DeM78] </ref>, [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96].
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in [DeM78], [WM85a], [WM85b], <ref> [Har87] </ref>, [TP89], [You89], [Har92], and [Har96]. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96].
Reference: [Har92] <author> D. Harel. </author> <title> Biting the Silver Bullet. </title> <journal> Computer, </journal> <volume> 21(1) </volume> <pages> 8-20, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], <ref> [Har92] </ref>, and [Har96]. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96].
Reference: [Har96] <author> D. Harel. </author> <title> Executable Object Modeling with Statecharts. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 246-257. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and <ref> [Har96] </ref>. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96].
Reference: [Hil90] <author> H.P. Hillion. </author> <title> Timed Petri Nets and Application to Multi-Stage Production Systems. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Lecture Notes in Computer Science Vol. 424: Advances in Petri Nets 1989, </booktitle> <pages> pages 281-305, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1990. </year> <month> 25 </month>
Reference-contexts: Some work has been done to exploit the periodic functioning of Timed Petri Nets. In <ref> [Hil90] </ref> for example, results have been obtained for the performance evaluation of multi-stage production systems where this periodic functioning often occurs. [Yua86] defines process periods for Petri Nets and uses those to describe the system behavior. <p> Examples for these systems are communication protocols (e. g., [MAT + 77], [MB83], [Wal83]) and complex computer systems (e. g., [Zub80]). Another type of system that might work quite well are general Producer/Consumer systems or networks of these, e. g., multistage production systems (e. g., <ref> [Hil90] </ref>). However, many systems modeled through Data Flow Diagrams, e. g., the case study of an elevator system in [You89], the cruise control system, the bottle-filling system, the pocket-sized logic analyser, and the defect inspection system, all in [WM85b], probably would have non-Markovian transition times.
Reference: [HT91] <author> W. Henderson and P.G. Taylor. </author> <title> Embedded Processes in Stochastic Petri Nets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(2) </volume> <pages> 108-116, </pages> <year> 1991. </year>
Reference-contexts: The tokens remain absorbed for the "firing time" after which the transition places tokens in the appropriate output bag. The idea of alternating enabling and firing time points is also built into the work of <ref> [HT91] </ref>. The work presented in this paper can not only be applied to periodic M-TDFD's, but it can be directly used for the previously described Petri Nets with alternating enabling and firing time points.
Reference: [IM76] <author> D.L. Isaacson and R.W. Madsen. </author> <title> Markov Chains, Theory and Applications. </title> <publisher> Wiley, </publisher> <address> New York, London, Sydney, Toronto, </address> <year> 1976. </year>
Reference-contexts: For the initial probability distribution on RS (F DF D; fl initial ), we assume that Pr (system is in state fl initial at time t 0 = 0) = 1. 1.2.2 Periodic Markov Chains In this section we will summarize definitions and theorems on periodic Markov chains given in <ref> [IM76] </ref>, Chapters 2 and 3. It is assumed that the reader is familiar with the basic notations for Markov chains. Definition (1.2.2.1): A subset, C, of the state space, S is called closed if p ik = 0 for all i 2 C and k 62 C.
Reference: [KSK76] <author> J.G. Kemeny, J.L. Snell, and A.W. Knapp. </author> <title> Denumerable Markov Chains (Second Edition). </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: From D d1 the chain returns in the next step to D 0 . Finally, we indicate the following Theorem, introduced as Proposition 6-28 and proved in <ref> [KSK76] </ref>. Theorem (1.2.2.8): The period of a recurrent chain for the state i is a constant independent of the state i. 1.2.3 Periodic Formalized Data Flow Diagrams Similiar to Subsection 1.2.2, we now define related terms for an FDFD with initial state fl initial . <p> : : ; m are the rates of the Exponential distributions related to the transitions (b k ; a k ; j k ); (b 1 ; a 1 ; j 1 ); : : : ; (b m ; a m ; j m ), respectively. 1 The reference <ref> [KSK76] </ref>, p. 164, refers to Exercise 5 on page 164.
Reference: [LWBL96] <author> G.T. Leavens, T. Wahls, A.L. Baker, and K. Lyle. </author> <title> An Operational Semantics of Firing Rules for Structured Analysis Style Data Flow Diagrams. </title> <type> Technical Report 93-28d, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1993, </year> <note> revised, July 1996. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: 1 STOCHASTIC ANALYSIS OF PERIODIC TIMED DATA FLOW DIAGRAMS WITH MARKOVIAN TRANSITION TIMES Abstract Timed (or Stochastic) Data Flow Diagrams (TDFD's or SDFD's) introduced in [SB96b] are an extension of the Formalized Data Flow Diagrams, defined in <ref> [LWBL96] </ref>. This extension allows us to assess the quantitative behavior (e. g., performance, throughput, average load of a bubble, etc.) as well as the qualitative behavior (e. g., deadlock, reachability, termination, finiteness, liveness, etc.), eventually depending on different types of transition times, for the system modeled through the TDFD. <p> aggregation principle of [Sch84], extended for periodic Markov chains by [Woo93], to efficiently determine stationary probabilities, expected waiting times, and limiting process probabilities. 2 1.1 Introduction In [SB96b] we introduced Timed (or Stochastic) Data Flow Diagrams (TDFD's or SDFD's) as an extension of Formalized Data Flow Diagrams (FDFD's), defined in <ref> [LWBL96] </ref>. In SDFD's, time is modeled through the definition of a stochastic time behavior for the consumption of in-flow items as well as a stochastic time behavior for the production of items on the out-flow. <p> Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and <ref> [LWBL96] </ref>. In particular for our examples, we use the notation from [LWBL96]. This cited paper also contains a more detailed explanation of the underlying operational semantics of FDFD's and an extended example. <p> Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and <ref> [LWBL96] </ref>. In particular for our examples, we use the notation from [LWBL96]. This cited paper also contains a more detailed explanation of the underlying operational semantics of FDFD's and an extended example.
Reference: [MAT + 77] <author> M. Mori, T. Araki, K. Taniguchi, N. Tokura, and T. Kasami. </author> <title> Some Decision Problems for Time Petri Nets and Applications to the Verification of Communication Protocols. </title> <journal> Transactions of the Institute of Electronics and Communication Engineers of Japan, Section E (English), </journal> <volume> 60(10) </volume> <pages> 598-599, </pages> <year> 1977. </year>
Reference-contexts: Finally, there exist several types of real systems that are good candidates to be correctly modeled and analyzed through (periodic and irreducible) M-TDFD's, while currently still being modeled and 23 analyzed through Timed Petri Nets. Examples for these systems are communication protocols (e. g., <ref> [MAT + 77] </ref>, [MB83], [Wal83]) and complex computer systems (e. g., [Zub80]). Another type of system that might work quite well are general Producer/Consumer systems or networks of these, e. g., multistage production systems (e. g., [Hil90]).
Reference: [MB83] <author> M. Menasche and B. Berthomieu. </author> <title> Time Petri Nets for Analyzing and Verifying Time Dependent Communication Protocols. </title> <editor> In H. Rudin and C.H. West, editors, </editor> <title> Protocol Specification, Testing, and Verification, </title> <booktitle> III, </booktitle> <pages> pages 161-172. </pages> <publisher> Elsevier (North-Holland), </publisher> <year> 1983. </year>
Reference-contexts: Finally, there exist several types of real systems that are good candidates to be correctly modeled and analyzed through (periodic and irreducible) M-TDFD's, while currently still being modeled and 23 analyzed through Timed Petri Nets. Examples for these systems are communication protocols (e. g., [MAT + 77], <ref> [MB83] </ref>, [Wal83]) and complex computer systems (e. g., [Zub80]). Another type of system that might work quite well are general Producer/Consumer systems or networks of these, e. g., multistage production systems (e. g., [Hil90]).
Reference: [MBB + 85] <author> M.A. Marsan, G. Balbo, A. Bobbio, G. Chiola, G. Conte, and A. Cumani. </author> <title> On Petri Nets with Stochastic Timing. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <month> July </month> <year> 1985, </year> <pages> pages 80-87, </pages> <year> 1985. </year>
Reference-contexts: In SDFD's, time is modeled through the definition of a stochastic time behavior for the consumption of in-flow items as well as a stochastic time behavior for the production of items on the out-flow. We followed the general approach of Stochastic Petri Nets given in <ref> [MBB + 85] </ref> when defining SDFD's. In this paper we consider one particular subclass of TDFD's, i. e., those that are periodic, irreducible, and have Markovian transition times. We call these SDFD's periodic Markovian Timed Data Flow Diagrams (periodic M-TDFD's).
Reference: [Nat96] <institution> National Academy of Sciences. Statistical Software Engineering. National Academy Press, </institution> <address> Washington, D.C., </address> <year> 1996. </year>
Reference-contexts: Moreover, several advantages of TDFD's over Timed Petri Nets make them the more natural selection for software engineers as it has been pointed out in [SB96b]. The work presented in this paper relates to the new interdisciplinary field "Statistical Software Engineering", introduced in <ref> [Nat96] </ref>. We use statistical techniques that allow us to reduce computations when we analyze in the Specifications phase of the spiral software development process model ([Nat96], p. 63) whether quantitative requirements of the software system are fulfilled. In Section 1.2, we will summarize basic definitions required within this paper.
Reference: [Pat64] <author> R.L. Patterson. </author> <title> Markov Processes Occurring in the Theory of Traffic Flow through an N-Stage Stochastic Service System. </title> <journal> Journal of Industrial Engineering, </journal> <volume> 15 </volume> <pages> 188-193, </pages> <year> 1964. </year>
Reference-contexts: This analysis is based on the aggregation principle of [Sch84]. Similarly, [Woo93] (Chapter 2) used this aggregation principle and the periodicity of N -stage stochastic service systems (it appears, as pointed out in [Woo93], that <ref> [Pat64] </ref> first noted this periodicity) to efficiently derive stationary probabilities and limiting process probabilities for 3- and 4-stage Markovian production lines. Some work has been done to exploit the periodic functioning of Timed Petri Nets.
Reference: [PS82] <author> C.H. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1982. </year> <month> 26 </month>
Reference-contexts: This can be done applying Dijkstra's Algorithm (e. g., Algorithm 5.6 in [AHU74], p. 207, or Section 6.4 in <ref> [PS82] </ref>) to every fl i in time O (n 2 ). We could also use the Floyd-Warshall Algorithm (e. g., Section 6.5 in [PS82]) that finds the shortest paths between all pairs of nodes in O (n 3 ) time. <p> This can be done applying Dijkstra's Algorithm (e. g., Algorithm 5.6 in [AHU74], p. 207, or Section 6.4 in <ref> [PS82] </ref>) to every fl i in time O (n 2 ). We could also use the Floyd-Warshall Algorithm (e. g., Section 6.5 in [PS82]) that finds the shortest paths between all pairs of nodes in O (n 3 ) time. Step 4 : Determine the period d According to Corollary (1.2.3.8) the FDFD with fl initial is periodic with period d 2, where d is even.
Reference: [RP84] <author> R.R. Razouk and C.V. Phelps. </author> <title> Performance Analysis using Timed Petri Nets. In R.M. </title> <editor> Keller, editor, </editor> <booktitle> Proceedings of the 1984 International Conference on Parallel Processing, </booktitle> <pages> pages 126-128, </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Silver Spring, Maryland, </address> <year> 1984. </year>
Reference-contexts: The typical two-step firing behavior of FDFD's has been applied to Timed Petri Nets as well. <ref> [RP84] </ref> allocates both an enabling time and a firing time to each transition. After a transition is enabled, it has to wait for a time (called the "enabling time") before it absorbs all tokens from its input bag.
Reference: [SB96a] <author> J. Symanzik and A.L. Baker. </author> <title> Formalized Data Flow Diagrams and Their Relation to Other Computational Models. </title> <type> Technical Report 96-20, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1996. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: necessary criteria it has to fulfill? To answer these questions, we will first demonstrate the unpredictable behavior of FDFD's in Subsection 1.3.1 and indicate how the period d can be determined for FDFD's with finite reachability set in Subsection 1.3.2. 1.3.1 Unpredictable Behavior of FDFD's As we have seen in <ref> [SB96a] </ref>, FDFD's are computationally equivalent to Turing Machines. This implies that all interesting decidability problems such as reachability, termination, deadlock and liveness properties, and finiteness, that are undecidable for Turing Machines are also undecidable for FDFD's.
Reference: [SB96b] <author> J. Symanzik and A.L. Baker. </author> <title> Timed Data Flow Diagrams. </title> <type> Technical Report 96-23, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1996. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: 1 STOCHASTIC ANALYSIS OF PERIODIC TIMED DATA FLOW DIAGRAMS WITH MARKOVIAN TRANSITION TIMES Abstract Timed (or Stochastic) Data Flow Diagrams (TDFD's or SDFD's) introduced in <ref> [SB96b] </ref> are an extension of the Formalized Data Flow Diagrams, defined in [LWBL96]. <p> For these models, we have been able to apply an aggregation principle of [Sch84], extended for periodic Markov chains by [Woo93], to efficiently determine stationary probabilities, expected waiting times, and limiting process probabilities. 2 1.1 Introduction In <ref> [SB96b] </ref> we introduced Timed (or Stochastic) Data Flow Diagrams (TDFD's or SDFD's) as an extension of Formalized Data Flow Diagrams (FDFD's), defined in [LWBL96]. <p> Thus, many known methods and results for the stochastic analysis of Timed Petri Nets can be directly applied to TDFD's. Moreover, several advantages of TDFD's over Timed Petri Nets make them the more natural selection for software engineers as it has been pointed out in <ref> [SB96b] </ref>. The work presented in this paper relates to the new interdisciplinary field "Statistical Software Engineering", introduced in [Nat96]. <p> In particular for our examples, we use the notation from [LWBL96]. This cited paper also contains a more detailed explanation of the underlying operational semantics of FDFD's and an extended example. In addition, we need the following defintions from <ref> [SB96b] </ref>: Definition (1.2.1.1): A firing sequence (computation sequence) of an FDFD is a possibly infinite sequence (b i ; a i ; j i ) 2 B fi fC; P g fi IN; i 0; such that, if transition (b i ; a i ; j i ) is fired in <p> be the set of transitions that are enabled in state fl = (bm ; r; fs), i. e., EN (fl) = fs j s 2 (B fi fC; P g fi IN ) ^ fl [s]g = F S 1 (F DF D; fl): Now, we specialize our definitions from <ref> [SB96b] </ref> with respect to Markovian transition times. <p> Because of the memoryless property of the Exponential distribution, we do not have to distinguish among the possible cases introduced in <ref> [SB96b] </ref> how to deal with the past history Z. We have the same behavior for Resampling, Work Age Memory, and Enabling Age Memory.
Reference: [Sch84] <author> R. Schassberger. </author> <title> An Aggregation Principle for Computing Invariant Probability Vectors in Semi-Markovian Models. </title> <editor> In G. Iazeolla, P.J. Courtois, and A. Hordijk, editors, </editor> <booktitle> Mathematical Computer Performance and Reliability, </booktitle> <pages> pages 259-273, </pages> <publisher> Elsevier (North-Holland), </publisher> <address> Amsterdam, </address> <year> 1984. </year>
Reference-contexts: Moreover, we require the TDFD to be periodic and irreducible and it must have a finite reachability set. For these models, we have been able to apply an aggregation principle of <ref> [Sch84] </ref>, extended for periodic Markov chains by [Woo93], to efficiently determine stationary probabilities, expected waiting times, and limiting process probabilities. 2 1.1 Introduction In [SB96b] we introduced Timed (or Stochastic) Data Flow Diagrams (TDFD's or SDFD's) as an extension of Formalized Data Flow Diagrams (FDFD's), defined in [LWBL96]. <p> The periodicity of the Markov chain, embedded in the Markov process (which is embedded in the given periodic M-TDFD), plays an important role for a computationally efficient analysis of interesting questions. This analysis is based on the aggregation principle of <ref> [Sch84] </ref>. Similarly, [Woo93] (Chapter 2) used this aggregation principle and the periodicity of N -stage stochastic service systems (it appears, as pointed out in [Woo93], that [Pat64] first noted this periodicity) to efficiently derive stationary probabilities and limiting process probabilities for 3- and 4-stage Markovian production lines. <p> However, to our best knowledge, there exists no prior approach to aggregate the state space of periodic Timed Petri Nets or similar computational models in a manner suggested by the aggregation principle of <ref> [Sch84] </ref> and the extension for periodic Markov chains by [Woo93]. The typical two-step firing behavior of FDFD's has been applied to Timed Petri Nets as well. [RP84] allocates both an enabling time and a firing time to each transition. <p> In Section 1.2, we will summarize basic definitions required within this paper. Section 1.3 deals with the characterization of periodic FDFD's. In Section 1.4, we demonstrate how to apply the aggregation principle of <ref> [Sch84] </ref> to periodic and irreducible M-TDFD's with finite reachability set. <p> Moreover, it should be possible to combine Steps 1 to 3 into a more efficient algorithm. However, this goes beyond the scope of this paper. 1.4 Analysis of Periodic M-TDFD's 1.4.1 The Aggregation Principle The idea presented in the following extract from <ref> [Sch84] </ref> is commonly referred to as the aggregation principle: "Let S be a finite or countably infinite set and X = fX n ; n 0g a homogeneous irreducible recurrent Markov chain on S with transition matrix P = (p ij ). <p> The p; p 0 shall be assumed to denote probability vectors in the ergodic case." 1.4.2 Application to Periodic M-TDFD's As pointed out in [Woo93], in the case of a periodic Markov chain, if S 0 is taken as a periodic subset of S, then the constant c in <ref> [Sch84] </ref> (1.4) is simply the period d of the Markov chain. <p> In addition, the definition of P E on page 133 and Lemma 6-6 on page 134 of the same reference are required to understand the reasoning in <ref> [Sch84] </ref>. 17 (iii) Let S 0 be any of the periodic subsets S 1 ; : : : ; S d such that j S 0 jj S j j 8j = 1; : : : ; d. Let S = S S 0 . Derive P 0 according to [Sch84] <p> <ref> [Sch84] </ref>. 17 (iii) Let S 0 be any of the periodic subsets S 1 ; : : : ; S d such that j S 0 jj S j j 8j = 1; : : : ; d. Let S = S S 0 . Derive P 0 according to [Sch84] (1.1). r kj , related to states fl k 2 S; fl j 2 S 0 , can be determined via the products of p ij s related to a firing sequence from state fl k to state fl j that does not reach any other state ffi 2 S <p> Now, solve x 0 = x 0 P 0 where solutions p 0 are strictly positive and can be normalized such that p 0 1 = 1, where 1 represents a vector of all 1's. (iv) From <ref> [Sch84] </ref> (1.4) and by using P , we get the stationary probabilities p: p i = d i 8i : fl i 2 S 0 1 X p 0 (v) The expected waiting times i in the states fl i ; i = 1; : : : ; n, can be <p> we assume that we have identical rates 1 = 2 = 3 = 4 = 1, we get p = 4 1 ; 4 1 ; 2 1 ; 1; 2 1 = 2 = 11 1.5 Future Directions In this paper we have demonstrated how the aggregation principle from <ref> [Sch84] </ref> can be used to analyze periodic and irreducible M-TDFD's with finite reachability sets. Especially for large models, this approach is very helpful to efficiently determine stationary probabilities, expected waiting times, and limiting process probabilities. <p> M-TDFD's representing such systems might be candidates to be analyzed in a manner similiar to the one described in this paper. * Analysis of TDFD's with arbitrary transition times: The main idea in <ref> [Sch84] </ref> was the application of the aggregation principle to queueing systems and networks with arbitrary service and inter arrival times, approximated through mixtures of Erlang distributions.
Reference: [TP89] <author> T.H. Tse and L. Pong. </author> <title> Towards a Formal Foundation for DeMarco Data Flow Diagrams. </title> <journal> The Computer Journal, </journal> <volume> 32(1) </volume> <pages> 1-12, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], <ref> [TP89] </ref>, [You89], [Har92], and [Har96]. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96].
Reference: [Wal83] <author> B. Walter. </author> <title> Timed Petri-Nets for Modelling and Analyzing Protocols with Real-Time Characteristics. </title> <editor> In H. Rudin and C.H. West, editors, </editor> <title> Protocol Specification, Testing, and Verification, </title> <booktitle> III, </booktitle> <pages> pages 161-172. </pages> <publisher> Elsevier (North-Holland), </publisher> <year> 1983. </year>
Reference-contexts: Finally, there exist several types of real systems that are good candidates to be correctly modeled and analyzed through (periodic and irreducible) M-TDFD's, while currently still being modeled and 23 analyzed through Timed Petri Nets. Examples for these systems are communication protocols (e. g., [MAT + 77], [MB83], <ref> [Wal83] </ref>) and complex computer systems (e. g., [Zub80]). Another type of system that might work quite well are general Producer/Consumer systems or networks of these, e. g., multistage production systems (e. g., [Hil90]).
Reference: [WBL93] <author> T. Wahls, A.L. Baker, and G.T. Leavens. </author> <title> An Executable Semantics for a Formalized Data Flow Diagram Specification Language. </title> <type> Technical Report 93-27, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <note> Novem-ber 1993. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], <ref> [WBL93] </ref>, and [LWBL96]. In particular for our examples, we use the notation from [LWBL96]. This cited paper also contains a more detailed explanation of the underlying operational semantics of FDFD's and an extended example.
Reference: [WM85a] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 1: Introduction and Tools. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: However, since our background is in Software Engineering, in particular in "Structured Analysis" (SA) (e. g., [DeM78], <ref> [WM85a] </ref>) where traditional Data Flow Diagrams (DFD's) are probably the most widely 3 used specification technique in industry today ([BB93]), we wanted to present our results in this context. <p> We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in [DeM78], <ref> [WM85a] </ref>, [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96].
Reference: [WM85b] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 2: Essential Modeling Techniques. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year> <month> 27 </month>
Reference-contexts: We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in [DeM78], [WM85a], <ref> [WM85b] </ref>, [Har87], [TP89], [You89], [Har92], and [Har96]. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96]. <p> However, many systems modeled through Data Flow Diagrams, e. g., the case study of an elevator system in [You89], the cruise control system, the bottle-filling system, the pocket-sized logic analyser, and the defect inspection system, all in <ref> [WM85b] </ref>, probably would have non-Markovian transition times. For models like these, an approximation of the real time behavior through mixtures of Erlang distributions might be possible and an analysis based on the aggregation principle should be preferable to results gained from simulation runs based on the TDFD.
Reference: [Woo93] <author> H.-S. Woo. </author> <title> On Deterministic and Markovian Production Systems. </title> <type> PhD Thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1993. </year>
Reference-contexts: Moreover, we require the TDFD to be periodic and irreducible and it must have a finite reachability set. For these models, we have been able to apply an aggregation principle of [Sch84], extended for periodic Markov chains by <ref> [Woo93] </ref>, to efficiently determine stationary probabilities, expected waiting times, and limiting process probabilities. 2 1.1 Introduction In [SB96b] we introduced Timed (or Stochastic) Data Flow Diagrams (TDFD's or SDFD's) as an extension of Formalized Data Flow Diagrams (FDFD's), defined in [LWBL96]. <p> The periodicity of the Markov chain, embedded in the Markov process (which is embedded in the given periodic M-TDFD), plays an important role for a computationally efficient analysis of interesting questions. This analysis is based on the aggregation principle of [Sch84]. Similarly, <ref> [Woo93] </ref> (Chapter 2) used this aggregation principle and the periodicity of N -stage stochastic service systems (it appears, as pointed out in [Woo93], that [Pat64] first noted this periodicity) to efficiently derive stationary probabilities and limiting process probabilities for 3- and 4-stage Markovian production lines. <p> This analysis is based on the aggregation principle of [Sch84]. Similarly, <ref> [Woo93] </ref> (Chapter 2) used this aggregation principle and the periodicity of N -stage stochastic service systems (it appears, as pointed out in [Woo93], that [Pat64] first noted this periodicity) to efficiently derive stationary probabilities and limiting process probabilities for 3- and 4-stage Markovian production lines. Some work has been done to exploit the periodic functioning of Timed Petri Nets. <p> However, to our best knowledge, there exists no prior approach to aggregate the state space of periodic Timed Petri Nets or similar computational models in a manner suggested by the aggregation principle of [Sch84] and the extension for periodic Markov chains by <ref> [Woo93] </ref>. The typical two-step firing behavior of FDFD's has been applied to Timed Petri Nets as well. [RP84] allocates both an enabling time and a firing time to each transition. <p> The p; p 0 shall be assumed to denote probability vectors in the ergodic case." 1.4.2 Application to Periodic M-TDFD's As pointed out in <ref> [Woo93] </ref>, in the case of a periodic Markov chain, if S 0 is taken as a periodic subset of S, then the constant c in [Sch84] (1.4) is simply the period d of the Markov chain. <p> = 1; : : : ; n, can be computed as i = m X l where m =j EN (fl i ) j and 1 ; : : : ; m are the rates of the related Exponential distributions (as in (ii) above). (vi) Based on the specialisation in <ref> [Woo93] </ref> for the general case of ergodic stationary semi Markov processes with countable state space ([AD88]), we can compute the limiting process probabilities i = lim P i (t) of the states fl i ; i = 1; : : : ; n, i. e., the probability that the system is
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Yourdon Press Computing Series. Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: We conclude this paper with an overview of future work in Section 1.5. 1.2 Definitions 1.2.1 Stochastic Data Flow Diagrams Data Flow Diagrams have been formalized at multiple places within the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], <ref> [You89] </ref>, [Har92], and [Har96]. Within this paper, we make use of the definitions of Formalized Data Flow Diagrams (FDFD's) developed by Coleman, Wahls, Baker, and Leavens in [Col91], [CB94], [WBL93], and [LWBL96]. In particular for our examples, we use the notation from [LWBL96]. <p> Another type of system that might work quite well are general Producer/Consumer systems or networks of these, e. g., multistage production systems (e. g., [Hil90]). However, many systems modeled through Data Flow Diagrams, e. g., the case study of an elevator system in <ref> [You89] </ref>, the cruise control system, the bottle-filling system, the pocket-sized logic analyser, and the defect inspection system, all in [WM85b], probably would have non-Markovian transition times.
Reference: [Yua86] <author> C.Y. Yuan. </author> <title> Process Periods and System Reconstruction. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Lecture Notes in Computer Science Vol. 222: Advances in Petri Nets 1985, </booktitle> <pages> pages 122-141, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, </address> <year> 1986. </year>
Reference-contexts: Some work has been done to exploit the periodic functioning of Timed Petri Nets. In [Hil90] for example, results have been obtained for the performance evaluation of multi-stage production systems where this periodic functioning often occurs. <ref> [Yua86] </ref> defines process periods for Petri Nets and uses those to describe the system behavior.
Reference: [Zub80] <author> W.M. Zuberek. </author> <title> Timed Petri Nets and Preliminary Performance Evaluation. </title> <booktitle> In IEEE Proceedings of the 7th Annual Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1980, </year> <title> La Baule, </title> <booktitle> France, </booktitle> <pages> pages 88-96, </pages> <year> 1980. </year>
Reference-contexts: Examples for these systems are communication protocols (e. g., [MAT + 77], [MB83], [Wal83]) and complex computer systems (e. g., <ref> [Zub80] </ref>). Another type of system that might work quite well are general Producer/Consumer systems or networks of these, e. g., multistage production systems (e. g., [Hil90]).
References-found: 33

