URL: ftp://ftp.cs.brown.edu/pub/techreports/94/cs94-18.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-94-18.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Alefeld and J. Herzberger. </author> <title> Introduction to Interval Computations. </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: In addition, interval computations provide an appropriate framework to deal with uncertain data. For general results on interval 2 arithmetic, see for instance <ref> [14, 1] </ref>. Although the theory of interval arithmetic has been developed in a broader context (including intervals of real numbers), our interests are very pragmatic and we consider solely the case of intervals whose bounds are floating point numbers. <p> Definition 1 [Approximation] Let r be a subset of &lt;. The approximation of r, denoted by appx (r); is the smallest (w.r.t. the inclusion) element of U (F ) containing r: This definition generalizes both the notion of "outward rounding" and the approximation of real numbers by "machine intervals" <ref> [1, 14] </ref>, when F-numbers are floating point numbers. In the fol lowing, we denote appx (fag) by ! a for simplicity. <p> We illustrate this on an extremely simple example. Example 14 Let C be the constraint v 2 + v 1 v 2 = 0. &lt; C; 1 &gt; is not hull-consistent with respect to h <ref> [1; 1] </ref>; [0; 1]i. However, it is not possible in general to get hull-consistency without exploring combinations of intervals for v 1 and v 2 . Of course here, simple symbolic manipulation removes the problem but this is not possible in general. <p> We illustrate this on an extremely simple example. Example 14 Let C be the constraint v 2 + v 1 v 2 = 0. &lt; C; 1 &gt; is not hull-consistent with respect to h [1; 1]; <ref> [0; 1] </ref>i. However, it is not possible in general to get hull-consistency without exploring combinations of intervals for v 1 and v 2 . Of course here, simple symbolic manipulation removes the problem but this is not possible in general. This motivates the notion of box-consistency used in Newton. <p> By constraint propagation alone, Newton returns the intervals [0:0; 5:0] and [0:88830577; 1:0] for f 1 and f 2 respectively and concludes that f 3 has no zero. The computing times are a couple of milliseconds. 11 5 10 20 40 80 160 Times <ref> [1; 1] </ref> 1.160 8.810 25.920 61.650 127.750 264.610 Growth [1; 1] 7.59 2.94 2.38 2.07 2.07 Times [10 8 ; 10 8 ] 1.270 10.650 39.900 93.640 201.520 402.230 Growth [10 8 ; 10 8 ] 8.39 3.75 2.35 2.15 2.00 Table 1: Computation Results of Newton on the Broyden Banded <p> The computing times are a couple of milliseconds. 11 5 10 20 40 80 160 Times <ref> [1; 1] </ref> 1.160 8.810 25.920 61.650 127.750 264.610 Growth [1; 1] 7.59 2.94 2.38 2.07 2.07 Times [10 8 ; 10 8 ] 1.270 10.650 39.900 93.640 201.520 402.230 Growth [10 8 ; 10 8 ] 8.39 3.75 2.35 2.15 2.00 Table 1: Computation Results of Newton on the Broyden Banded function 1 2 4 6 8 10 12 CLP <p> The results of Newton are shown in Table 1. In the table, we give computation times for the initial intervals in <ref> [1; 1] </ref> (first line) and [10 8 ; 10 8 ] (third line) as well as the growth of the times (i.e. time (2i)/time (i)). There are three important features of this Newton program. First, it is completely deterministic, i.e. box-consistency alone solves the problem and no splitting is necessary. <p> The initial intervals are <ref> [1; 1] </ref>. [8] mentions that the problem has an analytical solution but remains an interesting benchmark for interval methods. <p> Complex constraints are rewritten into a set of primitive constraints. For instance, the constraints v 1 = v 2 v 2 is rewritten 4 into the set fv 1 = v 2 v 3 ; v 2 = v 3 ; v 3 2 <ref> [1; 1] </ref>g. CLP (BNR) enforces interval-consistency on its primitive constraints and the loss of precision due to the dependency problem only occurs in the fixpoint algorithm. On our simple example, CLP (BNR) does not produce any pruning. The precision of Newton and CLP (BNR) is not directly comparable.
Reference: [2] <author> F. Benhamou and W. </author> <title> Older. Applying Interval Arithmetic to Real, Integer and Boolean Constraints. </title> <journal> Journal of Logic Programming, </journal> <note> 1993. (Submitted). </note>
Reference-contexts: 1 Introduction The introduction of a relational form of interval arithmetic in logic programming has been proposed by Cleary in [3]. These ideas have been developed and made popular by the CLP system BNR-Prolog [18] and generalized to constraint solving over discrete quantities in its successor CLP (BNR) <ref> [17, 2] </ref>. Many other systems (e.g [11, 20]) have been developed on similar principles. <p> For every a; b 2 &lt; [ f1; +1g, the interval [a; b] represents the set fx 2 &lt; j a x bg. For simplicity, only closed intervals are considered in this paper but the results generalize easily to other intervals <ref> [2, 3] </ref>. Given an interval I = [a; b], the left (resp. right) bound of I , denoted by left (I) (resp. right (I)), is a (resp. b). The center of I, denoted by center (I), is a+b 2 .
Reference: [3] <author> J.G. Cleary. </author> <title> Logical Arithmetic. </title> <journal> Future Generation Computing Systems, </journal> <volume> 2(2) </volume> <pages> 125-149, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction The introduction of a relational form of interval arithmetic in logic programming has been proposed by Cleary in <ref> [3] </ref>. These ideas have been developed and made popular by the CLP system BNR-Prolog [18] and generalized to constraint solving over discrete quantities in its successor CLP (BNR) [17, 2]. Many other systems (e.g [11, 20]) have been developed on similar principles. <p> For every a; b 2 &lt; [ f1; +1g, the interval [a; b] represents the set fx 2 &lt; j a x bg. For simplicity, only closed intervals are considered in this paper but the results generalize easily to other intervals <ref> [2, 3] </ref>. Given an interval I = [a; b], the left (resp. right) bound of I , denoted by left (I) (resp. right (I)), is a (resp. b). The center of I, denoted by center (I), is a+b 2 .
Reference: [4] <author> E. Davis. </author> <title> Constraint Propagation with Interval Labels. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 281-331, </pages> <year> 1987. </year>
Reference-contexts: These functions come from a nonlinear integral equation. The variables x i have initial domains <ref> [4; 5] </ref> and the computation results are given in Table 3. Once again, it is interesting to note that, for k 8, box-consistency alone solves the problem. <p> These constraints, as well as non-differentiable functions, can easily be integrated in Newton (since the underlying architecture of the two systems is the same) and are a main priority of our future work. Other Systems There are many other systems based on intervals in other areas <ref> [4, 9] </ref>. Some mention the adequacy of working with specific forms of constraints (e.g. centered forms) but, to our knowledge, no system computes an approximation of arc-consistency using Newton interval method. 9 Conclusion This paper revisited the design and implementation of CLP (Intervals).
Reference: [5] <author> J.E. Dennis and R.B. Schnabel. </author> <title> Numerical Methods for Unconstrained Optimization and Nonlinear Equations. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1983. </year>
Reference-contexts: Computation times are given on a SUN SS-10/20 for results with an accuracy of 8 digits. A Simple Example The first example <ref> [5] </ref> is extremely simple. <p> These functions come from a nonlinear integral equation. The variables x i have initial domains <ref> [4; 5] </ref> and the computation results are given in Table 3. Once again, it is interesting to note that, for k 8, box-consistency alone solves the problem.
Reference: [6] <author> E.R. Hansen and R.I. Greenberg. </author> <title> An Interval Newton Method. </title> <journal> Appl. Math. Comput., </journal> <volume> 12 </volume> <pages> 89-98, </pages> <year> 1983. </year>
Reference-contexts: 3.19 2.39 2.32 2.27 Newton Nodes 1 1 1 1 1 1 1 Newton Operations 2759 18,239 158,400 679,892 1,674,778 3,132,860 4,973,013 Newton Growth 6.61 2.53 2.17 1.47 1.33 1.24 Table 2: Comparison of Newton and traditional CLP (Intervals) Broyden Banded Function This example was used as a benchmark in <ref> [6] </ref> and consists in finding the zeros of the functions f i (x 1 ; : : : ; x n ) = x i (2 + 5x 2 P where J i = fj j j 6= i & max (1; i 5) j min (m; i + 1)g. <p> It is also interesting to look at all constraints as a whole and to compare box-consistency with Krawczyk's method and its successors <ref> [10, 7, 6] </ref>. On the one hand, Krawczyk's methods achieve more pruning since they manipulate all constraints as a whole, allowing a more precise evaluation of the interval functions. On the other hand, box-consistency provides additional pruning by obtaining tight bounds on the intervals.
Reference: [7] <author> E.R. Hansen and S. Sengupta. </author> <title> Bounding Solutions of Systems of Equations Using Interval Analysis. </title> <journal> BIT, </journal> <volume> 21 </volume> <pages> 203-211, </pages> <year> 1981. </year>
Reference-contexts: This idea is in fact mentioned in <ref> [7] </ref>. Practical results however indicates that it behaves rather poorly (i.e. convergence is slow). Newton uses another idea which consists in applying an internal splitting operation focusing on parts of the intervals to locate the leftmost and rightmost quasi-zeros. <p> Newton finds the solution in 454 seconds after 864 splittings. [8] compares the implementations of two methods both implemented in C + + on a Silicon graphics MIPS 4000/4010, a faster machine. The method described in <ref> [7] </ref> takes 2395 seconds and 29,189 splittings. The method of [8] requires 117.10 seconds and 257 splittings. <p> It is also interesting to look at all constraints as a whole and to compare box-consistency with Krawczyk's method and its successors <ref> [10, 7, 6] </ref>. On the one hand, Krawczyk's methods achieve more pruning since they manipulate all constraints as a whole, allowing a more precise evaluation of the interval functions. On the other hand, box-consistency provides additional pruning by obtaining tight bounds on the intervals.
Reference: [8] <author> H. Hong and V. Stahl. </author> <title> Safe Starting Regions by Fixed Points and Tightening. </title> <note> Submitted for Publication, </note> <month> November </month> <year> 1993. </year>
Reference-contexts: there is no splitting either in Krawczyk methods. 12 4 5 6 7 8 Times 0.67 1.74 3.43 6.20 11.60 Growth 2.60 1.97 1.81 1.87 Table 3: Computation Results of Newton on the More-Cosnard Kinematics The last example we mention is the toughest of a recent report on interval methods <ref> [8] </ref>. It comes from robotics and, in particular, from the inverse kinematics of an elbow manipulator. <p> The initial intervals are [1; 1]. <ref> [8] </ref> mentions that the problem has an analytical solution but remains an interesting benchmark for interval methods. Newton finds the solution in 454 seconds after 864 splittings. [8] compares the implementations of two methods both implemented in C + + on a Silicon graphics MIPS 4000/4010, a faster machine. <p> The initial intervals are [1; 1]. <ref> [8] </ref> mentions that the problem has an analytical solution but remains an interesting benchmark for interval methods. Newton finds the solution in 454 seconds after 864 splittings. [8] compares the implementations of two methods both implemented in C + + on a Silicon graphics MIPS 4000/4010, a faster machine. The method described in [7] takes 2395 seconds and 29,189 splittings. The method of [8] requires 117.10 seconds and 257 splittings. <p> Newton finds the solution in 454 seconds after 864 splittings. <ref> [8] </ref> compares the implementations of two methods both implemented in C + + on a Silicon graphics MIPS 4000/4010, a faster machine. The method described in [7] takes 2395 seconds and 29,189 splittings. The method of [8] requires 117.10 seconds and 257 splittings. <p> On the other hand, box-consistency provides additional pruning by obtaining tight bounds on the intervals. Both methods seem complementary and a combination of them should lead to even more efficient algorithms. This is also indicated by recent and independent work in <ref> [8] </ref> which proposes an extension of Krawczyk's method, called tightening operators, which has some similarity with box-consistency. A tightening operator is used to replace a tuple of intervals by a set of tuples obtained by applying a projection constraint on one of the intervals. [8] also proposes a tightening operator which <p> by recent and independent work in <ref> [8] </ref> which proposes an extension of Krawczyk's method, called tightening operators, which has some similarity with box-consistency. A tightening operator is used to replace a tuple of intervals by a set of tuples obtained by applying a projection constraint on one of the intervals. [8] also proposes a tightening operator which uses Newton interval method to find all quasi-zeros of a projection constraint and use them to replace the initial interval. Box-consistency can in fact be viewed as a coarser tightening operator replacing a tuple by another tuple of intervals. <p> Box-consistency can in fact be viewed as a coarser tightening operator replacing a tuple by another tuple of intervals. It is interesting to observe that the work in <ref> [8] </ref> and ours started from very different perspectives to arrive at related solutions. Krawczyk's method generally requires that the Jacobian be diagonally dominant (i.e. the diagonal elements be large compared to other elements) to be effective.
Reference: [9] <author> E. Hyvonen. </author> <title> Constraint Reasoning Based on Interval Arithmetic. </title> . <booktitle> In Proceedings of IJCAI 1989, </booktitle> <pages> 193-198, </pages> <year> 1989. </year>
Reference-contexts: These constraints, as well as non-differentiable functions, can easily be integrated in Newton (since the underlying architecture of the two systems is the same) and are a main priority of our future work. Other Systems There are many other systems based on intervals in other areas <ref> [4, 9] </ref>. Some mention the adequacy of working with specific forms of constraints (e.g. centered forms) but, to our knowledge, no system computes an approximation of arc-consistency using Newton interval method. 9 Conclusion This paper revisited the design and implementation of CLP (Intervals).
Reference: [10] <author> R. Krawczyk. </author> <title> Newton-Algorithmen zur Bestimmung von Nullstellen mit Fehlerschranken. </title> <journal> Computing, </journal> <volume> 4 </volume> <pages> 187-201, </pages> <year> 1985. </year>
Reference-contexts: the National Science Foundation under grant numbers CCR-9357704, a NSF National Young Investigator Award, and European Esprit Basic Research project ACCLAIM no 7195. 2 Arc-consistency itself cannot be computed exactly due to machine limitation. 1 differentiability, and define various pruning operators, many of them extending the seminal work of Krawczyk <ref> [10] </ref>. These algorithms can often be viewed as an iteration of two steps, constraint propagation and splitting, although they are rarely presented this way and it is not always clear what the constraint propagation step computes. <p> It is also interesting to look at all constraints as a whole and to compare box-consistency with Krawczyk's method and its successors <ref> [10, 7, 6] </ref>. On the one hand, Krawczyk's methods achieve more pruning since they manipulate all constraints as a whole, allowing a more precise evaluation of the interval functions. On the other hand, box-consistency provides additional pruning by obtaining tight bounds on the intervals.
Reference: [11] <author> J.H.M. Lee and M.H. van Emden. </author> <title> Interval Computation as Deduction in CHIP. </title> <journal> Journal of Logic Programming, </journal> <volume> 16(3-4):255-276, </volume> <year> 1993. </year>
Reference-contexts: These ideas have been developed and made popular by the CLP system BNR-Prolog [18] and generalized to constraint solving over discrete quantities in its successor CLP (BNR) [17, 2]. Many other systems (e.g <ref> [11, 20] </ref>) have been developed on similar principles.
Reference: [12] <author> A.K. Mackworth. </author> <title> Consistency in Networks of Relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Many other systems (e.g [11, 20]) have been developed on similar principles. The key idea behind CLP (Intervals) languages is to let users state arbitrary constraints over reals and to narrow down the set of possible values for the variables using various approximations of arc-consistency <ref> [12, 13] </ref>, a notion well-known in artificial intelligence 2 . In addition, combining the constraint solver with splitting operations allows these systems to isolate narrow regions which may contain solutions to sets of constraints. <p> 2 &lt; n1 : ha 1 ; : : : ; a n i 2 (C)g: In the following, projection constraints are denoted by the letter P , possibly subscripted. 4.2 Local Consistency CLP (Intervals) languages use projection constraints to approximate the notion of arc-consistency, well established in artificial intelligence <ref> [12, 13] </ref> especially for finite constraint satisfaction problems. In the rest of this section, we assume that constraints are defined over fv 1 ; : : : ; v n g and that hD 1 ; : : : ; D n i is a sequence of domains, i.e. <p> Then, arc-narrow (P ,D) interval-narrow (P ,D) hull-narrow (P ,D) box-narrow (P ,D). 4.6 The Fixpoint Algorithm The fixpoint algorithm used by CLP (Intervals) languages is extremely simple and can be seen as a version of the algorithm AC-3 <ref> [12] </ref>. We assume that all constraints are defined on subsets of fv 1 ; : : : ; v n g.
Reference: [13] <author> U. Montanari. </author> <title> Networks of Constraints : Fundamental Properties and Applications to Picture Processing. </title> <journal> Information Science, </journal> <volume> 7(2) </volume> <year> 95-132,1974. </year>
Reference-contexts: Many other systems (e.g [11, 20]) have been developed on similar principles. The key idea behind CLP (Intervals) languages is to let users state arbitrary constraints over reals and to narrow down the set of possible values for the variables using various approximations of arc-consistency <ref> [12, 13] </ref>, a notion well-known in artificial intelligence 2 . In addition, combining the constraint solver with splitting operations allows these systems to isolate narrow regions which may contain solutions to sets of constraints. <p> 2 &lt; n1 : ha 1 ; : : : ; a n i 2 (C)g: In the following, projection constraints are denoted by the letter P , possibly subscripted. 4.2 Local Consistency CLP (Intervals) languages use projection constraints to approximate the notion of arc-consistency, well established in artificial intelligence <ref> [12, 13] </ref> especially for finite constraint satisfaction problems. In the rest of this section, we assume that constraints are defined over fv 1 ; : : : ; v n g and that hD 1 ; : : : ; D n i is a sequence of domains, i.e.
Reference: [14] <author> R.E. Moore. </author> <title> Interval Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1966. </year> <month> 15 </month>
Reference-contexts: In the following, we note in the same way operation and relation symbols over the reals and their interpretations. 3 Interval Arithmetic The key idea behind interval arithmetic <ref> [14] </ref> is the approximation of real numbers by intervals to quantify the errors introduced by finite precision arithmetic. In addition, interval computations provide an appropriate framework to deal with uncertain data. For general results on interval 2 arithmetic, see for instance [14, 1]. <p> In addition, interval computations provide an appropriate framework to deal with uncertain data. For general results on interval 2 arithmetic, see for instance <ref> [14, 1] </ref>. Although the theory of interval arithmetic has been developed in a broader context (including intervals of real numbers), our interests are very pragmatic and we consider solely the case of intervals whose bounds are floating point numbers. <p> Definition 1 [Approximation] Let r be a subset of &lt;. The approximation of r, denoted by appx (r); is the smallest (w.r.t. the inclusion) element of U (F ) containing r: This definition generalizes both the notion of "outward rounding" and the approximation of real numbers by "machine intervals" <ref> [1, 14] </ref>, when F-numbers are floating point numbers. In the fol lowing, we denote appx (fag) by ! a for simplicity. <p> The fundamental theorem of interval arithmetics <ref> [14] </ref> can be stated as follows. Theorem 5 [Fundamental Theorem of Interval Arithmetics] Let F : I (F ) n ! I (F ) be a monotone interval extension of f : &lt; n ! &lt;.
Reference: [15] <author> J.J. More and M.Y. Cosnard. </author> <title> Numerical Solution of Nonlinear Equations. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 5 </volume> <pages> 64-85, </pages> <year> 1979. </year>
Reference-contexts: It is already 50 times faster for n = 12. The growth of CLP (intervals) is exponential, since it converges towards 2. Newton converges toward 1. Note also the large number of nodes in the traditional CLP (Intervals) implementation. More-Cosnard Example This example comes from <ref> [15] </ref> and is also a standard benchmark for interval methods.
Reference: [16] <author> W. </author> <title> Older. Krawczyk Derivatives. Unpublished Note, </title> <year> 1991. </year>
Reference-contexts: Future work on Newton will aim at including the preconditioning step and the additional precision coming from a global view of the constraints while preserving an elegant operational semantics for the language. Note finally that W. Older mentioned the potential of Krawczyk's method for CLP languages <ref> [16] </ref>. CLP Systems Several CLP (Intervals) systems have been implemented in the past as mentioned in the introduction and CLP (BNR) is probably the most advanced system.
Reference: [17] <editor> W. Older and F. Benhamou. </editor> <booktitle> Programming in CLP(BNR). In PPCP'94, </booktitle> <address> Newport, RI (USA), </address> <year> 1993. </year>
Reference-contexts: 1 Introduction The introduction of a relational form of interval arithmetic in logic programming has been proposed by Cleary in [3]. These ideas have been developed and made popular by the CLP system BNR-Prolog [18] and generalized to constraint solving over discrete quantities in its successor CLP (BNR) <ref> [17, 2] </ref>. Many other systems (e.g [11, 20]) have been developed on similar principles.
Reference: [18] <author> W. Older and A. Vellino. </author> <title> Constraint Arithmetic on Real Intervals. In Constraint Logic Programming: Selected Papers, </title> <editor> F. Benhamou & A. Colmerauer eds., </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction The introduction of a relational form of interval arithmetic in logic programming has been proposed by Cleary in [3]. These ideas have been developed and made popular by the CLP system BNR-Prolog <ref> [18] </ref> and generalized to constraint solving over discrete quantities in its successor CLP (BNR) [17, 2]. Many other systems (e.g [11, 20]) have been developed on similar principles.
Reference: [19] <author> L.B. Rall. </author> <title> Automatic Differentiation: Techniques and Applications. </title> <booktitle> Springer Lectures Notes in Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: Newton also allows to specify the precision (i.e. the number of significant digits) required for the results. Derivatives are not computed symbolically in the current version but are obtained through automatic differentiation during the evaluation of the function <ref> [19] </ref>. This last decision may be reconsidered in a future implementation of the system, since additional accuracy may result from symbolic differentiation. 7 Experimental Results We now describe some experimental results of Newton. The benchmarks were selected from textbooks and research papers on interval methods.
Reference: [20] <author> G. Sidebottom and W. havens. </author> <title> Hierarchical Arc Consistency Applied to Numeric Processing in Constraint Logic Programming. </title> <journal> Computational Intelligence, </journal> <volume> 8(4), </volume> <year> 1992. </year>
Reference-contexts: These ideas have been developed and made popular by the CLP system BNR-Prolog [18] and generalized to constraint solving over discrete quantities in its successor CLP (BNR) [17, 2]. Many other systems (e.g <ref> [11, 20] </ref>) have been developed on similar principles. <p> Real numbers are simply approximated by F-intervals. Interval-consistency is used for instance in the Echidna system <ref> [20] </ref>. The next notion is used in CLP (BNR). Intuitively, the idea is to fill the gaps between the intervals to preserve only one F-interval. This is motivated by the fact that preserving multiple intervals may be computationally too expensive in many applications.
Reference: [21] <author> P. Van Hentenryck, V. Saraswat, and Y. Deville. </author> <title> The Design, Implementation, and Evaluation of the Constraint Language cc(FD). </title> <type> Technical Report, </type> <institution> Brown University, </institution> <month> December </month> <year> 1992. </year> <month> 16 </month>
Reference-contexts: It shares the Prolog and constraint engine (AC-5 in particular) with cc (FD) <ref> [21] </ref>. Interval arithmetics is implemented with double precision IEEE floating point numbers by specifying the rounding direction. Newton also allows to specify the precision (i.e. the number of significant digits) required for the results.
References-found: 21

