URL: http://www.cs.unc.edu/~stuerzl/papers/parrad.ps.gz
Refering-URL: http://www.cs.unc.edu/~stuerzl/publications.html
Root-URL: http://www.cs.unc.edu
Email: e-mail: wrzl@gup.uni-linz.ac.at  
Phone: Tel.: +43(732)2468-884, Fax +43(732)2468-10  
Title: Parallel Visibility Computations for Parallel Radiosity  
Author: by W. Sturzlinger and C. Wild 
Address: Altenbergerstrae 69, A-4040 Linz, Austria, Europe  
Affiliation: Johannes Kepler University of Linz Institute for Computer Science Department for graphical and parallel Processing  
Abstract-found: 0
Intro-found: 1
Reference: [BAUM89] <author> Daniel R. Baum, Holly E. Rushmeier, James M. Winget, </author> <title> "Improving Radiosity Solutions through the Use of Analytically Determined Form-Factors", </title> <booktitle> Computer Graphics (SIGGRAPH '89 Proceedings), </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: A hemicube is placed around the center of a patch and all other patches are projected onto its surfaces. The projected area gives an estimate for the geometric formfactor between the patches. Because this estimate of the formfactors may be inexact even for simple cases <ref> [BAUM89] </ref>, other methods for computing the formfactors were suggested and/or implemented. Baum used a hybrid method involving both numerical and analytic methods [BAUM89] and other methods use raytracing to compute the formfactors [WALL89, SILL89, MALL88, TAMP91]. <p> The projected area gives an estimate for the geometric formfactor between the patches. Because this estimate of the formfactors may be inexact even for simple cases <ref> [BAUM89] </ref>, other methods for computing the formfactors were suggested and/or implemented. Baum used a hybrid method involving both numerical and analytic methods [BAUM89] and other methods use raytracing to compute the formfactors [WALL89, SILL89, MALL88, TAMP91]. Wallace subdivides the shooting patch until an analytic solution to approximate the form-factor of the delta-areas can be used. <p> Feda [FEDA91] presented an implementation on a transputer network, where each processor has local memory. The formfactors were calculated using the hemicube method. Chalmers [CHAL91] also presented an implementation on a transputer network. He improved the accuracy of the formfactor calculation by using the analytical approch described by <ref> [BAUM89] </ref>. The use of the hemicube or the analytical method still suffers from the problem that the formfactors and the visibilities are determined using the "shooting"-patch as projection center. This leads to noticeable artifacts. A better method is to calculate this information directly for each receiver.
Reference: [BAUM90] <author> Daniel R. Baum, James M. Winget, </author> <title> "Real Time Radiosity Through Parllel Processing and Hardware Acceleration", </title> <booktitle> Computer Graphics (SIGGRAPH '90), </booktitle> <month> July </month> <year> 1990. </year>
Reference-contexts: The calculation of the formfactors accounts for most of the computation time of the ra-diosity method. Also the memory requirement is clearly a function of the number of patches. These problems led to the developement of parallel implementations of the progressive refinement radiosity method <ref> [BAUM90, RECK90, FEDA91, CHAL91] </ref>. 1 1.1 Progressive Refinement The radiosity method partitions the surfaces of the scene in small, flat patches and computes the illumination for each of those patches. The radiosity of a patch is determined by the radiosity it emits directly plus all light that is reflected. <p> The iteration then distributes ("shoots") the radiosity of the patch with the maximum unshot radioisity to all other patches in the environment. 2 Parallelization of the Progressive Refinement Method 2.1 Previous Research Parallelization of the Progressive Refinement Method has been atempted in several ways. Baum <ref> [BAUM90] </ref> used a multiprocessor workstation calculating the hemicubes using a hardware z-buffer. Recker [RECK90] used a cluster of workstations. Feda [FEDA91] presented an implementation on a transputer network, where each processor has local memory. The formfactors were calculated using the hemicube method.
Reference: [CHAL91] <author> Alan G. Chalmers, Derek J. Paddon, </author> <title> "Parallel Processing of Progressive Refinement Radiosity Methods", </title> <booktitle> in Proceedings of the Second Eurographics Workshop on Rendering, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: The calculation of the formfactors accounts for most of the computation time of the ra-diosity method. Also the memory requirement is clearly a function of the number of patches. These problems led to the developement of parallel implementations of the progressive refinement radiosity method <ref> [BAUM90, RECK90, FEDA91, CHAL91] </ref>. 1 1.1 Progressive Refinement The radiosity method partitions the surfaces of the scene in small, flat patches and computes the illumination for each of those patches. The radiosity of a patch is determined by the radiosity it emits directly plus all light that is reflected. <p> Baum [BAUM90] used a multiprocessor workstation calculating the hemicubes using a hardware z-buffer. Recker [RECK90] used a cluster of workstations. Feda [FEDA91] presented an implementation on a transputer network, where each processor has local memory. The formfactors were calculated using the hemicube method. Chalmers <ref> [CHAL91] </ref> also presented an implementation on a transputer network. He improved the accuracy of the formfactor calculation by using the analytical approch described by [BAUM89].
Reference: [COHE85] <author> Michael Cohen, Donald P. Greenberg, </author> <title> "The Hemi-Cube: A Radiosity Solution for Complex Environments", </title> <booktitle> Computer Graphics (SIGGRAPH '85 Proceedings), </booktitle> <month> August </month> <year> 1985. </year>
Reference-contexts: Common to all these methods is the representation of the surfaces of the environment by a mesh of quadrilaterals and triangles. These "patches" are used to store the radiosity on the respective part of the surface. The geometric formfactors were first calculated by the use of a hemicube <ref> [COHE85] </ref>. A hemicube is placed around the center of a patch and all other patches are projected onto its surfaces. The projected area gives an estimate for the geometric formfactor between the patches.
Reference: [COHE86] <author> Michael Cohen, Donald P. Greenberg, Dave S. Immel, Phillip J. Brock, </author> <title> "An Efficient Radiosity Approach for Realistic Image Synthesis", </title> <journal> IEEE Computer Graphics and Applications, </journal> <month> March </month> <year> 1986. </year>
Reference-contexts: Also the resulting bit vectors are transfered in identical sized blocks back to the radiosity processor. 4 Patches and Elements The two-level hierarchy of patches proposed by <ref> [COHE86] </ref> can also be used with this method. 4 We subdivide each patch into elements and store these elements locally on the processor. The visibility and formfactor calculations now need to be done for each element, therefore we will have to communicate more frequently with the visibility processors.
Reference: [COHE88] <author> Michael Cohen, Shenchang Eric Chen, John R. Wallace, Donald P. Greenberg, </author> <title> "A Progressive Refinement Approach to Fast Radiosity Image Generation", </title> <booktitle> Computer Graphics (SIGGRAPH '88 Proceedings), </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: It was first introduced to computer graphics by Goral et al. [GORA84]. Further research resulted in the progressive refinement method, which is able to produce good approximations of the final solution very quickly <ref> [COHE88] </ref>. The radiosity method was extended to include specular reflection through the so called two-pass approach. For recent developements see [MALL88, SILL89, SILL91]. Common to all these methods is the representation of the surfaces of the environment by a mesh of quadrilaterals and triangles.
Reference: [FEDA91] <author> Martin Feda, Werner Purgathofer, </author> <title> "Progressive Refinement Radiosity on a Trans-puter Network", </title> <booktitle> in Proceedings of the Second Eurographics Workshop on Rendering, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: The calculation of the formfactors accounts for most of the computation time of the ra-diosity method. Also the memory requirement is clearly a function of the number of patches. These problems led to the developement of parallel implementations of the progressive refinement radiosity method <ref> [BAUM90, RECK90, FEDA91, CHAL91] </ref>. 1 1.1 Progressive Refinement The radiosity method partitions the surfaces of the scene in small, flat patches and computes the illumination for each of those patches. The radiosity of a patch is determined by the radiosity it emits directly plus all light that is reflected. <p> Baum [BAUM90] used a multiprocessor workstation calculating the hemicubes using a hardware z-buffer. Recker [RECK90] used a cluster of workstations. Feda <ref> [FEDA91] </ref> presented an implementation on a transputer network, where each processor has local memory. The formfactors were calculated using the hemicube method. Chalmers [CHAL91] also presented an implementation on a transputer network. He improved the accuracy of the formfactor calculation by using the analytical approch described by [BAUM89]. <p> The load distribution will be quite uneven for this method, as different parts of the picture will "contain" significantly different numbers of patches. This has been reported by Feda <ref> [FEDA91] </ref> but they also propose a scheme which assigns every N -th scanline to a processor thus distributing the load much more evenly. 3 Parallel Visibility Calculation In section 2.2 we presented a parallel progressive radiosity algorithm.
Reference: [GORA84] <author> Cindy M. Goral, Kenneth E. Torrance, Donald P. Greenberg, Bennett Battaile, </author> <title> "Modelling the Interaction of Light Between Diffuse Surfaces", </title> <booktitle> Computer Graphics (SIGGRAPH '84 Proceedings), </booktitle> <month> July </month> <year> 1984. </year>
Reference-contexts: 1 Introduction Radiosity has become a popular method for image synthesis due to its ability to generate images of high realism. It was first introduced to computer graphics by Goral et al. <ref> [GORA84] </ref>. Further research resulted in the progressive refinement method, which is able to produce good approximations of the final solution very quickly [COHE88]. The radiosity method was extended to include specular reflection through the so called two-pass approach. For recent developements see [MALL88, SILL89, SILL91].
Reference: [MALL88] <author> Thomas J.V. Malley, </author> <title> "A Shading Method for Computer Generated Images", </title> <type> Master's Thesis, </type> <institution> University of Utah, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Further research resulted in the progressive refinement method, which is able to produce good approximations of the final solution very quickly [COHE88]. The radiosity method was extended to include specular reflection through the so called two-pass approach. For recent developements see <ref> [MALL88, SILL89, SILL91] </ref>. Common to all these methods is the representation of the surfaces of the environment by a mesh of quadrilaterals and triangles. These "patches" are used to store the radiosity on the respective part of the surface. <p> Because this estimate of the formfactors may be inexact even for simple cases [BAUM89], other methods for computing the formfactors were suggested and/or implemented. Baum used a hybrid method involving both numerical and analytic methods [BAUM89] and other methods use raytracing to compute the formfactors <ref> [WALL89, SILL89, MALL88, TAMP91] </ref>. Wallace subdivides the shooting patch until an analytic solution to approximate the form-factor of the delta-areas can be used. Then the formfactors for all visible delta-areas are summed up giving a good approximation to the formfactor of the shooting patch.
Reference: [RECK90] <author> Rodney J. Recker, David W. George, Donald P. Greenberg, </author> <title> "Acceleration technique for Progressive Refinement Radiosity", </title> <booktitle> Computer Graphics (SIGGRAPH '90), </booktitle> <month> July </month> <year> 1990. </year> <month> 8 </month>
Reference-contexts: The calculation of the formfactors accounts for most of the computation time of the ra-diosity method. Also the memory requirement is clearly a function of the number of patches. These problems led to the developement of parallel implementations of the progressive refinement radiosity method <ref> [BAUM90, RECK90, FEDA91, CHAL91] </ref>. 1 1.1 Progressive Refinement The radiosity method partitions the surfaces of the scene in small, flat patches and computes the illumination for each of those patches. The radiosity of a patch is determined by the radiosity it emits directly plus all light that is reflected. <p> Baum [BAUM90] used a multiprocessor workstation calculating the hemicubes using a hardware z-buffer. Recker <ref> [RECK90] </ref> used a cluster of workstations. Feda [FEDA91] presented an implementation on a transputer network, where each processor has local memory. The formfactors were calculated using the hemicube method. Chalmers [CHAL91] also presented an implementation on a transputer network.
Reference: [SILL89] <author> Francois Sillion, Claude Puech, </author> <title> "A General Two-Pass Method Integrating Spec--ular and Diffuse Reflection", </title> <booktitle> Computer Graphics (SIGGRAPH '89 Proceedings), </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: Further research resulted in the progressive refinement method, which is able to produce good approximations of the final solution very quickly [COHE88]. The radiosity method was extended to include specular reflection through the so called two-pass approach. For recent developements see <ref> [MALL88, SILL89, SILL91] </ref>. Common to all these methods is the representation of the surfaces of the environment by a mesh of quadrilaterals and triangles. These "patches" are used to store the radiosity on the respective part of the surface. <p> Because this estimate of the formfactors may be inexact even for simple cases [BAUM89], other methods for computing the formfactors were suggested and/or implemented. Baum used a hybrid method involving both numerical and analytic methods [BAUM89] and other methods use raytracing to compute the formfactors <ref> [WALL89, SILL89, MALL88, TAMP91] </ref>. Wallace subdivides the shooting patch until an analytic solution to approximate the form-factor of the delta-areas can be used. Then the formfactors for all visible delta-areas are summed up giving a good approximation to the formfactor of the shooting patch.
Reference: [SILL91] <author> Francois X. Sillion, James R. Arvo, Stephen H. Westin, Donald P. Greenberg, </author> <title> "A Global Illumination Solution for General Reflectance Distributions", </title> <booktitle> Computer Graphics (SIGGRAPH '91 Proceedings), </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Further research resulted in the progressive refinement method, which is able to produce good approximations of the final solution very quickly [COHE88]. The radiosity method was extended to include specular reflection through the so called two-pass approach. For recent developements see <ref> [MALL88, SILL89, SILL91] </ref>. Common to all these methods is the representation of the surfaces of the environment by a mesh of quadrilaterals and triangles. These "patches" are used to store the radiosity on the respective part of the surface.
Reference: [TAMP91] <author> F. Tampieri, D. Lischinski, </author> <title> "The Constant Radiosity Assumption Syndrome", </title> <booktitle> in Proceedings of the Second Eurographics Workshop on Rendering, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Because this estimate of the formfactors may be inexact even for simple cases [BAUM89], other methods for computing the formfactors were suggested and/or implemented. Baum used a hybrid method involving both numerical and analytic methods [BAUM89] and other methods use raytracing to compute the formfactors <ref> [WALL89, SILL89, MALL88, TAMP91] </ref>. Wallace subdivides the shooting patch until an analytic solution to approximate the form-factor of the delta-areas can be used. Then the formfactors for all visible delta-areas are summed up giving a good approximation to the formfactor of the shooting patch.
Reference: [WALL89] <author> John R. Wallace, Kells A. Elmquist, Eric A. Haines, </author> <title> "A Ray Tracing Algorithm for Progressive Radiosity", </title> <booktitle> Computer Graphics (SIGGRAPH '89 Proceedings), </booktitle> <month> July </month> <year> 1989. </year> <month> 9 </month>
Reference-contexts: Because this estimate of the formfactors may be inexact even for simple cases [BAUM89], other methods for computing the formfactors were suggested and/or implemented. Baum used a hybrid method involving both numerical and analytic methods [BAUM89] and other methods use raytracing to compute the formfactors <ref> [WALL89, SILL89, MALL88, TAMP91] </ref>. Wallace subdivides the shooting patch until an analytic solution to approximate the form-factor of the delta-areas can be used. Then the formfactors for all visible delta-areas are summed up giving a good approximation to the formfactor of the shooting patch. <p> nCube with 64 nodes with 4 MB memory each, connected by a hypercube topology network, but we emphasize that the algorithm can be ported easiliy to other architectures. 2 2.2 Parallel Progressive Refinement This paper presents an approach based on the calculation of formfactors by raytracing as described by Wallace <ref> [WALL89] </ref>. Raytracing is used to determine the visible parts of the "shooting"-patch as seen from each patch. The formfactor of these visible parts is then calculated using the analytical solution to the contour integtral.
References-found: 14

