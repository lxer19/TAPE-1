URL: http://www.cs.columbia.edu/~ezk/research/ms_thesis/ms_thesis.ps
Refering-URL: http://www.cs.columbia.edu/~ezk/research/index.html
Root-URL: http://www.cs.columbia.edu
Title: Discovery and Hot Replacement of Replicated Read-Only File Systems, with Application to Mobile Computing  
Author: Erez Zadok 
Degree: MS Thesis c fl1994, Erez Zadok All Rights Reserved Thesis Advisor: Daniel Duchamp  
Date: October 19, 1994  
Affiliation: Computer Science Department Columbia University  
Abstract-found: 0
Intro-found: 1
Reference: [Accetta83] <author> M. Accetta. </author> <title> Resource location protocol. Request for comments 887. </title> <booktitle> ARPA Network Working Group, </booktitle> <month> December </month> <year> 1983. </year>
Reference-contexts: The answer is that each file structure contains an f count field | a reference count similar to, but different from, the one in the vnode structure. 2.2 RLP We use the RLP resource location protocol <ref> [Accetta83] </ref> when seeking a replacement file system. RLP is a general-purpose protocol that allows a site to send broadcast or unicast request messages asking either of two questions: 1. Do you (recipient site) provide this service? 2.
Reference: [Bach86] <author> M. J. Bach. </author> <title> The Design of the Unix Operating System. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year> <note> ISBN 0-13-201757-1. </note>
Reference-contexts: That way we could tell the vnode in question is an NFS one. Another problem was the lack of documentation specific to SunOS kernels or even more general about "modern" operating system resembling SunOS. The books available to us at the time were outdated, too broad, or inapplicable <ref> [Bach86, Le*er89, Tanenbaum87] </ref>. 6.1.2 Coding Practices When coding in the kernel, we found many of our assumptions and experiences accumulated over years of user-level programming to be false.
Reference: [Bellovin91] <author> S. M. Bellovin and M. Merritt. </author> <title> Limitations of the Ker-beros Authentication System. </title> <booktitle> USENIX Conference Proceedings (Dal-las, TX), </booktitle> <pages> pages 253-67. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1991. </year> <note> FTP research.att.com:/dist/kerblimit.usenix.ps.Z; local - kerblimit.usenix.ps. </note>
Reference-contexts: grained method than the version 2 of the protocol, in which the only reliable way to determine if a client had access to the server's files was to try the operation and see if it failed. * A new authentication model has been added, using the Kerberos au thentication protocol <ref> [Steiner88, Lunt90, Bellovin91] </ref>. Chapter 6 Experiences 6.1 Experiences in Kernel Development During the time we worked on this system, we have gained considerable experience developing and testing kernel code. It has proven to be a challenging task. <p> The most recent version of Kerberos contains improved support for cross-domain authentication, so another step in the right direction would be to integrate the latest Kerberos with NFS, perhaps as originally sketched in <ref> [Glover93, Steiner88, Lunt90, Bellovin91] </ref>. Another desirable idea is to convert from using a single method of exact file comparison (i.e., checksumd) to per-user, possibly inexact comparison.
Reference: [Bhagwat93] <author> P. Bhagwat and C. E. Perkins. </author> <title> A mobile networking system based on Internet Protocol (IP). </title> <booktitle> Proceedings USENIX Symposium on Mobile & Location-Independent Computing (Cambridge, Mass.), </booktitle> <pages> pages 69-82. </pages> <publisher> USENIX, </publisher> <month> August </month> <year> 1993. </year>
Reference: [Blaze92] <author> M. Blaze and R. Alonso. </author> <title> Issues in massive-scale distributed file systems. </title> <booktitle> Proceedings of the Usenix File Systems Workshop, </booktitle> <pages> pages 135-6, </pages> <month> May </month> <year> 1992. </year>
Reference: [Bushnell94] <author> M. I. Bushnell. </author> <title> The HURD: Towards a New Strategy of OS Design. GNU's Bulletin. Free Software Foundation, </title> <month> January </month> <year> 1994. </year> <note> Copies are available by writing to gnu@prep.ai.mit.edu. </note>
Reference-contexts: The length and difficulty of the edit-compile-reboot-debug cycle, and the primitive debugging tools available for the kernel were truly debilitating. Recent developments in kernel technologies such as layered kernel modules in Solaris 2.x [SMCC92a] and multi-server systems such as the GNU Hurd <ref> [Bushnell94] </ref> or the CMU "US" server would have been tremendous to us. 36 CHAPTER 5. EVALUATION 5.1.2.2 RLP RLP was designed in 1983, when the evils of over-broadcasting were not as deeply appreciated as they are today and when there were few multicast implementations.
Reference: [Callaghan89] <author> B. Callaghan and T. Lyon. </author> <booktitle> The Automounter. USENIX Conference Proceedings (San Diego, </booktitle> <address> CA), </address> <pages> pages 43-51. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1989. </year>
Reference-contexts: The nfsmgrd at the site that originated the search uses the first response it gets; we suppose that the speed with which a server responds to the RLP request gives a hint about its future performance. (The Sun Automounter <ref> [Callaghan89] </ref> makes the same assumption about replicated file servers.) If a read-only replacement file system is available, nfsmgrd instructs Amd to mount it 5 and terminates the out-of-kernel RPC, telling the kernel the names of the replacement server and file system.
Reference: [Carlberg92] <author> K. G. Carlberg. </author> <title> A Routing Architecture that Supports Mobile End Systems. </title> <booktitle> MILCOM Conference Proceedings, </booktitle> <volume> volume 1, </volume> <pages> pages 159-64. </pages> <address> MILCOM, </address> <month> October </month> <year> 1992. </year> <note> 50 BIBLIOGRAPHY 51 </note>
Reference: [Cox91] <author> D. C. Cox. </author> <title> A Radio System Proposal for Widespread Low-power Tetherless Communication. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 39(2) </volume> <pages> 324-35. </pages> <publisher> IEEE, </publisher> <month> February </month> <year> 1991. </year>
Reference-contexts: Introduction The strongest trend in the computer industry today is the miniaturization of workstations into portable "notebook" or "palmtop" computers. Wireless network links <ref> [Cox91] </ref> and new internetworking technology [Ioannidis91] offer the possibility that computing sessions could run without interruption even as computers move, using information services drawn from an infrastructure of (mostly) stationary servers.
Reference: [Dyer88] <author> S. P. Dyer. </author> <title> The Hesiod Name Server. </title> <booktitle> USENIX Conference Proceedings (Dallas, TX), </booktitle> <pages> pages 183-9. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1988. </year>
Reference-contexts: It would also be necessary to send out only minimal information, and then exchange further information on a "need to know" basis, and if asked, with remote resource servers; a hierarchical organization such as that successfully used in <ref> [Dyer88, Mockapetris87a, Mockapetris87b, SMCC93, Noor94] </ref> might be more suitable.
Reference: [Glover93] <author> F. Glover. </author> <title> A Specification of Trusted NFS (TNFS) Protocol Extensions. </title> <type> Technical report. </type> <institution> Internet Engineering Task Force, </institution> <month> 1 March </month> <year> 1993. </year>
Reference-contexts: The most recent version of Kerberos contains improved support for cross-domain authentication, so another step in the right direction would be to integrate the latest Kerberos with NFS, perhaps as originally sketched in <ref> [Glover93, Steiner88, Lunt90, Bellovin91] </ref>. Another desirable idea is to convert from using a single method of exact file comparison (i.e., checksumd) to per-user, possibly inexact comparison.
Reference: [Hitz94] <author> D. Hitz, J. Lau, and M. Malcolm. </author> <title> File System Design for an NFS File Server Appliance. </title> <booktitle> USENIX Conference Proceedings (San Francisco, </booktitle> <address> CA), </address> <pages> pages 235-46. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1994. </year>
Reference: [Honeyman91] <author> P. Honeyman. </author> <title> Taking a LITTLE WORK Along. </title> <type> Technical report. </type> <institution> CITI, University of Michigan, Ann Arbor, MI, U.S., </institution> <year> 1991. </year>
Reference-contexts: Once an identity is confirmed, the server may log that information for future reference or for tracking in case of suspected break-in attempts. The IFS project has also begun to investigate alterations to AFS in support of mobile computers <ref> [Honeyman91] </ref>. Specifically, they are investigating cache pre-loading techniques for disconnected operation and transport protocols that are savvy about the delays caused by "cell handoff" | the time during which a mobile computer moves from one network to another.
Reference: [Howard88] <author> J. H. Howard, Michael L. Kazar, S. G. Menees, D. A. Nichols, M. Satyanarayanan, R. N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: An obvious alternative to our NFS-based effort is to employ a file system designed for wide-area and/or multi-domain operation. Such file systems have the advantages of a cache consistency protocol and a security model that recognizes the existence of many administrative domains. Large scale file systems include AFS <ref> [Howard88] </ref> and its spinoffs, Decorum [Kazar90] and IFS (Institutional File System) [Howe92]. Experiments involving AFS as a "nation-wide" file service have been going on for years [Spector89]. This effort has focused on stitching together distinct administrative domains so 43 44 CHAPTER 7.
Reference: [Howe92] <author> J. Howe. </author> <title> Intermediate File Servers in a Distributed File System Environment. </title> <note> In CITI Report 92-4. CITI, </note> <month> June </month> <year> 1992. </year>
Reference-contexts: Such file systems have the advantages of a cache consistency protocol and a security model that recognizes the existence of many administrative domains. Large scale file systems include AFS [Howard88] and its spinoffs, Decorum [Kazar90] and IFS (Institutional File System) <ref> [Howe92] </ref>. Experiments involving AFS as a "nation-wide" file service have been going on for years [Spector89]. This effort has focused on stitching together distinct administrative domains so 43 44 CHAPTER 7. RELATED WORK as to provide a single unified naming and protection space.
Reference: [Ioannidis91] <author> J. Ioannidis, D. Duchamp, and G. Q. Maguire. </author> <title> IP-based Protocols for Mobile Internetworking. </title> <address> SIGCOMM'91 (Zurich, </address> <publisher> Switzer-land), </publisher> <pages> pages 235-45. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: Introduction The strongest trend in the computer industry today is the miniaturization of workstations into portable "notebook" or "palmtop" computers. Wireless network links [Cox91] and new internetworking technology <ref> [Ioannidis91] </ref> offer the possibility that computing sessions could run without interruption even as computers move, using information services drawn from an infrastructure of (mostly) stationary servers.
Reference: [Ioannidis92] <author> J. Ioannidis, D. Duchamp, S. Deering, and G. Q. Maguire. </author> <title> Protocols for Supporting Mobile IP Hosts. </title> <type> Draft RFC. </type> <institution> IETF Mobile Hosts Working Group, </institution> <month> June </month> <year> 1992. </year>
Reference: [Johns93a] <author> M. St.Johns. </author> <title> Identification Protocol. Requests for Comments 1413. </title> <institution> Network Working Group, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: Such could be made possible by cooperating Identification Servers <ref> [Johns93a, Johns93b] </ref>. For example, a client's RLP request could cause a server receiving it to call the client's identd server to find the identity of the user who initiated the request.
Reference: [Johns93b] <author> M. St.Johns and M. Rose. </author> <title> Identification MIB. Requests for Comments 1414. </title> <institution> Network Working Group, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: Such could be made possible by cooperating Identification Servers <ref> [Johns93a, Johns93b] </ref>. For example, a client's RLP request could cause a server receiving it to call the client's identd server to find the identity of the user who initiated the request.
Reference: [Johnson93] <author> D. Johnson. </author> <title> Ubiquitous Mobile Host Internetworking. </title> <booktitle> 4th Workshop on Workstation Operating Systems (WWOS-IV) (Napa, U.S.), </booktitle> <year> 1993. </year> <note> 52 BIBLIOGRAPHY </note>
Reference: [Juszczak89] <author> C. Juszczak. </author> <title> Improving the Performance and Correctness of an NFS Server. </title> <booktitle> USENIX Conference Proceedings (San Diego, </booktitle> <address> CA), </address> <pages> pages 53-63. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1989. </year>
Reference: [Juszczak94] <author> C. Juszczak. </author> <title> Improving the Write Performance of an NFS Server. </title> <booktitle> USENIX Conference Proceedings (San Francisco, </booktitle> <address> CA), </address> <pages> pages 247-59. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1994. </year>
Reference: [Kazar90] <author> M. L. Kazar, B. W. Leverett, O. T. Anderson, V. Apostolides, B. A. Bottos, S. Chutani, C. F. Everhart, W. A. Mason, S.-T. Tu, and E. R. Zayas. </author> <title> DEcorum File System Architectural Overview. </title> <booktitle> USENIX Conference Proceedings (Anaheim, </booktitle> <address> CA), </address> <pages> pages 151-64. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1990. </year>
Reference-contexts: Such file systems have the advantages of a cache consistency protocol and a security model that recognizes the existence of many administrative domains. Large scale file systems include AFS [Howard88] and its spinoffs, Decorum <ref> [Kazar90] </ref> and IFS (Institutional File System) [Howe92]. Experiments involving AFS as a "nation-wide" file service have been going on for years [Spector89]. This effort has focused on stitching together distinct administrative domains so 43 44 CHAPTER 7. RELATED WORK as to provide a single unified naming and protection space.
Reference: [Keith90] <author> B. E. Keith. </author> <title> Perspectives on NFS File Server Performance Characterization. </title> <booktitle> USENIX Conference Proceedings (Anaheim, </booktitle> <address> CA), </address> <pages> pages 267-78. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1990. </year>
Reference: [Keith93] <author> B. E. Keith and M. Wittle. LADDIS: </author> <title> The Next Generation in NFS File Server Benchmarking. </title> <booktitle> USENIX Conference Proceedings (Cincin-nati, </booktitle> <address> OH), </address> <pages> pages 111-28. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1993. </year>
Reference: [Kistler91] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <booktitle> Proceedings of 13th ACM Symposium on Operating Systems Principles (Asilomar, </booktitle> <address> Pacific Grove, CA), </address> <pages> pages 213-25. </pages> <institution> Association for Computing Machinery SIGOPS, </institution> <month> 13 October </month> <year> 1991. </year>
Reference-contexts: Accordingly, we know of no work other than our own (already cited) on the topic of adaptive, dynamic mounting. The Coda file system [Satyanarayanan90] supposes that mobile computing will take place in the form of "disconnected operation," and describes in <ref> [Kistler91] </ref> a method in which the user specifies how to "stash" (read/write) files before disconnection and then, upon reconnection, have the file service run an algorithm to detect version skew.
Reference: [Kleiman86] <author> S. R. Kleiman. Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX. </title> <booktitle> USENIX Conference Proceedings (Atlanta, </booktitle> <address> GA), </address> <pages> pages 238-47. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1986. </year>
Reference-contexts: Finally, we added fields to three major kernel data structures: vfs and vnode structures and the open file table. Below we show these modified structures and describe their most relevant fields. 2.1.1 struct vfs A vfs is the structure for a Virtual File System <ref> [Kleiman86] </ref>. A singly-linked list of such structures exists in the kernel, the head of which is the global rootvfs | a hand-crafted structure for the root filesystem.
Reference: [Le*er89] <author> S. J. Le*er, M. K. McKusick, M. J. Karels, and J. S. Quar-terman. </author> <title> Design and implementation of the 4.3BSD UNIX operating system. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: That way we could tell the vnode in question is an NFS one. Another problem was the lack of documentation specific to SunOS kernels or even more general about "modern" operating system resembling SunOS. The books available to us at the time were outdated, too broad, or inapplicable <ref> [Bach86, Le*er89, Tanenbaum87] </ref>. 6.1.2 Coding Practices When coding in the kernel, we found many of our assumptions and experiences accumulated over years of user-level programming to be false.
Reference: [Lunt90] <author> S. Lunt. </author> <title> Experiences with Kerberos. </title> <booktitle> Second Security Workshop Program (Portland, </booktitle> <address> OR), </address> <pages> pages 113-20. </pages> <publisher> USENIX, </publisher> <month> 27 August </month> <year> 1990. </year>
Reference-contexts: grained method than the version 2 of the protocol, in which the only reliable way to determine if a client had access to the server's files was to try the operation and see if it failed. * A new authentication model has been added, using the Kerberos au thentication protocol <ref> [Steiner88, Lunt90, Bellovin91] </ref>. Chapter 6 Experiences 6.1 Experiences in Kernel Development During the time we worked on this system, we have gained considerable experience developing and testing kernel code. It has proven to be a challenging task. <p> The most recent version of Kerberos contains improved support for cross-domain authentication, so another step in the right direction would be to integrate the latest Kerberos with NFS, perhaps as originally sketched in <ref> [Glover93, Steiner88, Lunt90, Bellovin91] </ref>. Another desirable idea is to convert from using a single method of exact file comparison (i.e., checksumd) to per-user, possibly inexact comparison.
Reference: [Macklem91] <author> R. Macklem. </author> <title> Lessons Learned Tuning the 4.3BSD Reno Implementation of the NFS Protocol. </title> <booktitle> USENIX Conference Proceedings (Dallas, TX), </booktitle> <pages> pages 53-64. </pages> <publisher> USENIX, </publisher> <month> 21-25 January </month> <year> 1991. </year> <note> BIBLIOGRAPHY 53 </note>
Reference: [Mockapetris87a] <author> P. Mockapetris. </author> <title> Domain names concepts and facilities. Request for comments 1034. </title> <booktitle> ARPA Network Working Group, </booktitle> <month> Novem-ber </month> <year> 1987. </year>
Reference-contexts: It would also be necessary to send out only minimal information, and then exchange further information on a "need to know" basis, and if asked, with remote resource servers; a hierarchical organization such as that successfully used in <ref> [Dyer88, Mockapetris87a, Mockapetris87b, SMCC93, Noor94] </ref> might be more suitable.
Reference: [Mockapetris87b] <author> P. Mockapetris. </author> <title> Domain Names Implementation and Specification. Requests for Comments 1035. </title> <institution> Network Working Group, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: It would also be necessary to send out only minimal information, and then exchange further information on a "need to know" basis, and if asked, with remote resource servers; a hierarchical organization such as that successfully used in <ref> [Dyer88, Mockapetris87a, Mockapetris87b, SMCC93, Noor94] </ref> might be more suitable.
Reference: [Myles93] <author> A. Myles and D. Skellern. </author> <title> Comparison of Mobile Host Protocols for IP. </title> <journal> Journal of Internetworking Research and Experience, </journal> <volume> 4(4) </volume> <pages> 175-94, </pages> <month> December </month> <year> 1993. </year>
Reference: [Myles94] <author> A. Myles, D. B. Johnson, and C. Perkins. </author> <title> A Mobile Host Protocol Supporting Route Optimization and Authentication. </title> <journal> IEEE JSAC. IEEE, </journal> <year> 1994. </year>
Reference: [Nachbar88] <author> D. Nachbar. </author> <title> SPIFF A Program for Making Controlled Approximate Comparisons of Files. </title> <booktitle> USENIX Conference Proceedings (San Francisco), </booktitle> <pages> pages 73-84. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1988. </year>
Reference-contexts: Another example is that data files may be equal except for gratuitous differences in floating-point format (e.g., 1.7 vs. 1.7000 vs. 1.70e01). Source files may be compared ignoring comments and/or white space. Intelligent comparison programs like diff or spiff <ref> [Nachbar88] </ref> know how to discount certain simple differences. Other extensions and improvements to our work include: * Adding an absolute measure of performance to the trigger function. Currently it will only switch if a relative change for the worse had oc-cured, but not if persistent yet bad performance exists.
Reference: [Noor94] <author> A. Noor. </author> <title> Network Information Service+. </title> <booktitle> UNIX Review, </booktitle> <pages> pages 47-54, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: It would also be necessary to send out only minimal information, and then exchange further information on a "need to know" basis, and if asked, with remote resource servers; a hierarchical organization such as that successfully used in <ref> [Dyer88, Mockapetris87a, Mockapetris87b, SMCC93, Noor94] </ref> might be more suitable.
Reference: [Ousterhout85] <author> J. K. Ousterhout, H. Da Costa, D. Harrison, J. A. Kunze, M. Kupfer, and J. G. Thompson. </author> <title> A trace-driven analysis of the UNIX 4.2 BSD file system. </title> <booktitle> Proceedings of 10th ACM Symposium on Operating Systems Principles (Orcas Island, Washington). Published as Operating Systems Review, </booktitle> <volume> 19(5) </volume> <pages> 15-24, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Two such bounding policies that we have investigated are, first, switching only N vnodes per call, and, second, switching only vnodes that have been accessed in the past M time units. Assuming that file access is bursty (a contention supported by statistics <ref> [Ousterhout85, Ruemmler93] </ref>), the latter policy reduces the amount of time wasted switching vnodes that will never be used again. We are currently using this policy of switching only recently used vnodes; this policy makes use of the v last used field that we added to the vnode structure.
Reference: [Pawlowski94] <author> B. Pawlowski, C. Juszczak, P. Staubach, C. Smith, D. Lebel, and D. Hitz. </author> <title> NFS Version 3 Design and Implementation. </title> <booktitle> USENIX Conference Proceedings (Boston, </booktitle> <address> Massachusetts), </address> <pages> pages 137-52. </pages> <publisher> USENIX, </publisher> <month> 6-10 June </month> <year> 1994. </year>
Reference-contexts: Our work was based on version 2 of the NFS protocol. Version 3 <ref> [Pawlowski94, SMCC94] </ref> of the protocol fixes some of the problems of the current version. For example, it allows for use of TCP, dynamically adjusting buffer sizes, and asynchronous writes | which would definitely improve its performance over wide-area networks.
Reference: [Pendry91] <author> J.-S. Pendry and N. Williams. </author> <title> Amd The 4.4 BSD Auto-mounter. User Manual, edition 5.3 alpha. </title> <institution> Imperial College of Science, Technology, and Medicine, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: BACKGROUND as the NFS transport protocol (UDP [rfc0768]), port number (2049) and service-specific information such as the name of the root of the file system. 2.3 Amd Amd <ref> [Pendry91, Stewart93] </ref> is a widely-used automounter daemon. Its most common use is to demand-mount file systems and later unmount them after a period of disuse; however, Amd has many other capabilities. Amd operates by mimicking an NFS server.
Reference: [Perkins93] <author> C. E. Perkins. </author> <title> Providing Continuous Network Access to Mobile Hosts Using TCP/IP. </title> <booktitle> Computer Networks and ISDN Systems 26, </booktitle> <pages> pages 357-69, </pages> <year> 1993. </year> <note> 54 BIBLIOGRAPHY </note>
Reference: [Pike91] <author> R. Pike, D. Presotto, K. Thompson, and H. Trickey. </author> <title> Plan 9, a distributed system. </title> <booktitle> Proceedings of Spring EurOpen Conference, </booktitle> <pages> pages 43-50, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In particular, file systems can be mounted "before" or "after" file systems already mounted at the same point. The before/after concept replaces the notion of a search path. Plan 9 also supports the notion of a "union mount" <ref> [Pike91, Presotto92] </ref>. Several filesystem could be unified into one large one. Whenever files are identical, a client host might get parts of these files from any number of servers used to form the union.
Reference: [Presotto92] <author> D. Presotto. </author> <title> Plan 9, A Distributed System. </title> <booktitle> USENIX Workshop on Micro-Kernels and Other Kernel Architectures (Seattle, WA), </booktitle> <pages> pages 31-8. </pages> <publisher> USENIX, </publisher> <month> 27-28 April </month> <year> 1992. </year>
Reference-contexts: In particular, file systems can be mounted "before" or "after" file systems already mounted at the same point. The before/after concept replaces the notion of a search path. Plan 9 also supports the notion of a "union mount" <ref> [Pike91, Presotto92] </ref>. Several filesystem could be unified into one large one. Whenever files are identical, a client host might get parts of these files from any number of servers used to form the union.
Reference: [rfc0768] <author> J. Postel. </author> <title> User Datagram Protocol. </title> <type> Technical report 768. </type> <institution> Internet Engineering Task Force, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: These semantics exist to support fork/dup/pipe. If a child wants to maintain a different offset into the same file, it must close and reopen it. 10 CHAPTER 2. BACKGROUND as the NFS transport protocol (UDP <ref> [rfc0768] </ref>), port number (2049) and service-specific information such as the name of the root of the file system. 2.3 Amd Amd [Pendry91, Stewart93] is a widely-used automounter daemon.
Reference: [Rivest91] <author> R. L. Rivest. </author> <title> The MD4 message digest algorithm. </title> <booktitle> Advances in Cryptology | Crypto '90 (New York), </booktitle> <pages> pages 303-11. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: USING THE REPLACEMENT 23 file servers, requesting the checksum of the file being compared. Check-sumd, which we have written for this work, computes MD4 file checksums <ref> [Rivest91] </ref> on demand and then stores them for later use; checksums can also be pre-computed and stored. Nfsmgrd collects the two checksums, compares them, and responds to the kernel, telling au lookuppn () which pathname to use, indicating the file on the replacement file system if possible.
Reference: [Rivest92] <author> R. L. Rivest. </author> <title> The MD5 Message-Digest Algorithm. </title> <type> RFC 1321. </type> <institution> Internet Activities Board, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: If we could do that, and find a replacement to the hung fileserver (without of course accessing it again), we could switch the vnodes of these processes to replacement servers as well. 48 CHAPTER 8. CONCLUSION * Using MD5 <ref> [Rivest92] </ref> checksums rather than MD4, because they are slightly more secure. * Finish the implementation of RLP, for the sake of completeness.
Reference: [Rosen86] <author> M. B. Rosen, M. J. Wilde, and B. Fraser-Campbell. </author> <title> NFS Portability. </title> <booktitle> USENIX Conference Proceedings (Atlanta, </booktitle> <address> GA), </address> <pages> pages 299-305. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1986. </year>
Reference: [Rosenthal90] <author> D. S. H. Rosenthal. </author> <title> Evolving the Vnode Interface. </title> <booktitle> USENIX Conference Proceedings (Anaheim, </booktitle> <address> CA), </address> <pages> pages 107-18. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1990. </year>
Reference: [Ruemmler93] <author> C. Ruemmler and J. Wilkes. </author> <title> UNIX Disk Access Patterns. </title> <booktitle> USENIX Technical Conference Proceedings (San Diego, </booktitle> <address> CA), </address> <pages> pages 405-20. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1993. </year>
Reference-contexts: Two such bounding policies that we have investigated are, first, switching only N vnodes per call, and, second, switching only vnodes that have been accessed in the past M time units. Assuming that file access is bursty (a contention supported by statistics <ref> [Ousterhout85, Ruemmler93] </ref>), the latter policy reduces the amount of time wasted switching vnodes that will never be used again. We are currently using this policy of switching only recently used vnodes; this policy makes use of the v last used field that we added to the vnode structure.
Reference: [Sandberg85a] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun Network Filesystem. </title> <booktitle> USENIX Association Summer Conference Proceedings of 1985 (11-14 June 1985, </booktitle> <address> Portland, OR), </address> <pages> pages 119-30. </pages> <publisher> USENIX Association, </publisher> <address> El Cerrito, CA, </address> <year> 1985. </year>
Reference: [Sandberg85b] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> USENIX Conference Proceedings (Portland, </booktitle> <address> OR), </address> <pages> pages 119-30. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1985. </year>
Reference: [Satyanarayanan90] <author> M. Satyanarayanan, J. J. Kistler, P. Kumar, M. E. Okasaki, E. H. Siegel, and D. C. Steere. Coda: </author> <title> a highly available file BIBLIOGRAPHY 55 system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 447-59, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The notion of constantly-networked, portable computers running modern operating systems is relatively new. Accordingly, we know of no work other than our own (already cited) on the topic of adaptive, dynamic mounting. The Coda file system <ref> [Satyanarayanan90] </ref> supposes that mobile computing will take place in the form of "disconnected operation," and describes in [Kistler91] a method in which the user specifies how to "stash" (read/write) files before disconnection and then, upon reconnection, have the file service run an algorithm to detect version skew.
Reference: [Schaps93] <author> G. L. Schaps and P. Bishop. </author> <title> A Practical Approach to NFS Response Time Monitoring. </title> <booktitle> Systems Administration (LISA VII) Conference (Monterey, </booktitle> <address> CA), </address> <pages> pages 165-9. </pages> <publisher> USENIX, </publisher> <month> 1-5 November </month> <year> 1993. </year>
Reference: [Shafer92] <author> S. Shafer and M. R. Thompson. </author> <title> The SUP Software Upgrade Protocol. </title> <booktitle> Unpublished notes. </booktitle> <address> CMU, </address> <year> 1992. </year> <note> Available by ftp from mach.cs.cmu.edu in /mach3/doc/unpublished/sup/sup.doc. </note>
Reference-contexts: for it, we may not be able to release the kernel resources it occupies. 8 That is, they are exported as read-only to some hosts (including our client hosts), although they might be exported as read-write to others. 9 An example of "careful update" is provided by the SUP utility <ref> [Shafer92] </ref>. SUP transfers the new file to a temporary name, renames the target file to another temporary name, renames the newly transferred file to the final name, and then unlinks the old file which was also renamed.
Reference: [SMCC90a] <author> SMCC. flock(2). </author> <title> In SunOS 4.1 Reference Manual, </title> <type> Section 2. </type> <institution> Sun Microsystems, Incorporated, </institution> <month> 21 January </month> <year> 1990. </year>
Reference-contexts: Each file structure contains an f offset field so that each process can maintain a different offset. Each file structure however, will have an f data field that points to the same vnode. The vnode structure contains the flags needed for performing advisory locking <ref> [SMCC90a, SMCC90b] </ref>, and has a reference count of how many processes opened it. Things get more complicated when a process opens a file then forks. The child inherits the same file structure pointer that the parent has.
Reference: [SMCC90b] <author> SMCC. lockf(3). </author> <title> In SunOS 4.1 Reference Manual, </title> <type> Section 3. </type> <institution> Sun Microsystems, Incorporated, </institution> <month> 21 January </month> <year> 1990. </year>
Reference-contexts: Each file structure contains an f offset field so that each process can maintain a different offset. Each file structure however, will have an f data field that points to the same vnode. The vnode structure contains the flags needed for performing advisory locking <ref> [SMCC90a, SMCC90b] </ref>, and has a reference count of how many processes opened it. Things get more complicated when a process opens a file then forks. The child inherits the same file structure pointer that the parent has.
Reference: [SMCC90c] <author> SMCC. share(1M). </author> <title> In SunOS 5.3 Reference Manual, </title> <institution> Section 1M. Sun Microsystems, Incorporated, </institution> <month> 5 July </month> <year> 1990. </year>
Reference-contexts: Note also that it is not necessary that the whole filesystem being switched be exported read-only, only the parts that are requested. That depends on the ability of the system to allow this. For example, Solaris 2.x <ref> [SMCC90c] </ref> allows arbitrary parts of a filesystem to be exported with different permissions, but SunOS 4.x [SMCC90d] only allows sibling subdirectories of a filesystem to be exported with different permissions. 5.1.2 Suitability of Software Base 5.1.2.1 Kernel The vfs and vnode interfaces in the kernel greatly simplified our work.
Reference: [SMCC90d] <author> SMCC. exportfs(8). </author> <title> In SunOS 4.1 Reference Manual, </title> <type> Section 8. </type> <institution> Sun Microsystems, Incorporated, </institution> <month> 7 October </month> <year> 1990. </year>
Reference-contexts: That depends on the ability of the system to allow this. For example, Solaris 2.x [SMCC90c] allows arbitrary parts of a filesystem to be exported with different permissions, but SunOS 4.x <ref> [SMCC90d] </ref> only allows sibling subdirectories of a filesystem to be exported with different permissions. 5.1.2 Suitability of Software Base 5.1.2.1 Kernel The vfs and vnode interfaces in the kernel greatly simplified our work. In particular, hot replacement proved far easier than we had feared, thanks to the vnode interface.
Reference: [SMCC90e] <author> SMCC. syslogd(8). </author> <title> In SunOS 4.1 Reference Manual, </title> <type> Section 8. </type> <institution> Sun Microsystems, Incorporated, </institution> <month> January, </month> <year> 1990. </year>
Reference-contexts: For example, busy sections such as the name resolution function (au lookuppn ()) are bad places to insert them, because the amount of output that will get generated by the kernel | which gets printed on the console and added to a syslog <ref> [SMCC90e] </ref> daemon | is so voluminous that 38 6.1. EXPERIENCES IN KERNEL DEVELOPMENT 39 the machine spends most of its time displaying debugging output, and user processes are pushed down the scheduling priority. 1 However, not even using printf helped us at times.
Reference: [SMCC92a] <author> SMCC. DDI and DDK. </author> <title> In SunOS 5.3 Reference Manual, </title> <type> Section 9. </type> <institution> Sun Microsystems, Incorporated, </institution> <month> April, </month> <year> 1992. </year>
Reference-contexts: The length and difficulty of the edit-compile-reboot-debug cycle, and the primitive debugging tools available for the kernel were truly debilitating. Recent developments in kernel technologies such as layered kernel modules in Solaris 2.x <ref> [SMCC92a] </ref> and multi-server systems such as the GNU Hurd [Bushnell94] or the CMU "US" server would have been tremendous to us. 36 CHAPTER 5.
Reference: [SMCC92b] <author> SMCC. cfsadmin(1M). </author> <title> In SunOS 5.3 Reference Manual, </title> <institution> Section 1M. Sun Microsystems, Incorporated, </institution> <month> August, </month> <year> 1992. </year>
Reference-contexts: Specifically, they are investigating cache pre-loading techniques for disconnected operation and transport protocols that are savvy about the delays caused by "cell handoff" | the time during which a mobile computer moves from one network to another. Solaris 2.3's CacheFS <ref> [SMCC92b] </ref> allows for effective caching and synchronization of data between a client and NFS server. The main benefits of such a caching mechanism is the ability to use smaller, lighter, and less power-consuming disk drives | especially important for mobile computers. <p> This approach also increases the user's responsibility for system administration, which we regard as a poor way to design systems. One possible solution is a caching filesystem such as <ref> [SMCC92b] </ref>. With a caching filesystem, only a small working set of files most frequently used are stored on a smaller local disk, alleviating the need to go to a remote server for file access.
Reference: [SMCC93] <author> SMCC. </author> <title> Overview of NIS+. In SunOS 5.3 Reference Manuals: </title> <booktitle> Administering NIS+ and DNS, </booktitle> <pages> pages 18-25. </pages> <institution> Sun Microsystems, Incorporated, </institution> <year> 1993. </year>
Reference-contexts: It would also be necessary to send out only minimal information, and then exchange further information on a "need to know" basis, and if asked, with remote resource servers; a hierarchical organization such as that successfully used in <ref> [Dyer88, Mockapetris87a, Mockapetris87b, SMCC93, Noor94] </ref> might be more suitable.
Reference: [SMCC94] <author> SMCC. </author> <title> NFS Version 3 Protocol Specification. </title> <type> Technical report. </type> <institution> Sun Microsystems, Incorporated, </institution> <note> 16 Febru-ary 1994. Available via anonymous ftp from ftp.uu.net in /networking/ip/nfs/NFS3.spec.ps.Z. </note>
Reference-contexts: Our work was based on version 2 of the NFS protocol. Version 3 <ref> [Pawlowski94, SMCC94] </ref> of the protocol fixes some of the problems of the current version. For example, it allows for use of TCP, dynamically adjusting buffer sizes, and asynchronous writes | which would definitely improve its performance over wide-area networks.
Reference: [Spector89] <author> A. Z. Spector and M. L. Kazar. </author> <title> Uniting File Systems. </title> <journal> UNIX Review, </journal> <volume> 7(3) </volume> <pages> 61-71. </pages> <publisher> Miller Freeman Publications Company, </publisher> <month> March </month> <year> 1989. </year> <note> 56 BIBLIOGRAPHY </note>
Reference-contexts: Large scale file systems include AFS [Howard88] and its spinoffs, Decorum [Kazar90] and IFS (Institutional File System) [Howe92]. Experiments involving AFS as a "nation-wide" file service have been going on for years <ref> [Spector89] </ref>. This effort has focused on stitching together distinct administrative domains so 43 44 CHAPTER 7. RELATED WORK as to provide a single unified naming and protection space.
Reference: [Srinivasan89] <author> V. Srinivasan and J. C. Mogul. Spritely NFS: </author> <title> implementation and performance of cache-consistency protocols. </title> <type> Research Report 89/5. </type> <institution> Digital Equipment Corporation Western Research Laboratory, </institution> <address> Palo Alto, CA, </address> <month> May </month> <year> 1989. </year>
Reference: [Stallman94] <author> R. M. Stallman and R. H. Pesch. </author> <title> The GNU Source-Level Debugger. In User Manual, Edition 4.12, for GDB version 4.13. Free Software Foundation, </title> <month> January </month> <year> 1994. </year>
Reference-contexts: routines are not called directly, but as a consequence of a macro 1 Console output is considered a high-priority event in SunOS 4.x. 2 Gdb has the ability to debug kernels over the network and/or from processes, but it is only possible for micro-kernel based operating-systems, such as Mach 3.0 <ref> [Stallman94] </ref>. 40 CHAPTER 6. EXPERIENCES expansion on a field of a structure containing opaque data and generic structures full of pointers to functions. One of these functions is dereferenced, and then called on the actual data point it was passed.
Reference: [Stein87] <author> M. Stein. </author> <title> The SUN network file system. </title> <booktitle> Digest of Papers, COM-PCON Spring '87: 32nd IEEE Computer Society International Conference (23-27 February 1987, </booktitle> <address> San Francisco), </address> <pages> pages 6+. </pages> <publisher> IEEE Comput. Society Press, </publisher> <address> Washington, DC, </address> <booktitle> Cat. </booktitle> <volume> No. 87CH2409-1, </volume> <year> 1987. </year> <title> Summary only. </title>
Reference: [Steiner88] <author> J. G. Steiner, C. Neuman, and J. I. Schiller. </author> <title> Kerberos: An Authentication Service for Open Network Systems. </title> <booktitle> USENIX Conference Proceedings (Dallas, TX), </booktitle> <pages> pages 191-202. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1988. </year>
Reference-contexts: grained method than the version 2 of the protocol, in which the only reliable way to determine if a client had access to the server's files was to try the operation and see if it failed. * A new authentication model has been added, using the Kerberos au thentication protocol <ref> [Steiner88, Lunt90, Bellovin91] </ref>. Chapter 6 Experiences 6.1 Experiences in Kernel Development During the time we worked on this system, we have gained considerable experience developing and testing kernel code. It has proven to be a challenging task. <p> The most recent version of Kerberos contains improved support for cross-domain authentication, so another step in the right direction would be to integrate the latest Kerberos with NFS, perhaps as originally sketched in <ref> [Glover93, Steiner88, Lunt90, Bellovin91] </ref>. Another desirable idea is to convert from using a single method of exact file comparison (i.e., checksumd) to per-user, possibly inexact comparison.
Reference: [Stern92] <author> H. L. Stern and B. L. Wong. </author> <title> NFS Performance And Network Loading. Systems Administration (LISA VI) Conference (Long Beach, </title> <publisher> CA), </publisher> <pages> pages 33-8. </pages> <publisher> USENIX, </publisher> <month> October 19-23 </month> <year> 1992. </year>
Reference: [Stevens94] <author> W. R. Stevens. </author> <title> Maximum UDP Datagram Size. In TCP/IP Illustrated, </title> <booktitle> Volume 1: The Protocols, </booktitle> <pages> pages 159-60. </pages> <publisher> Addison-Wesley, </publisher> <month> February </month> <year> 1994. </year>
Reference-contexts: Also, most applications which use UDP avoid exceeding 8KB, because most UDP implementations have been written to match the default buffer sizes of NFS, and hardly ever allow you to reach the protocol limit of 64KB as described in <ref> [Stevens94] </ref>. The information necessary for our attribute-guided search for filesystems could have reached these limits. 1 A better protocol, using TCP for example, will remove these limitations.
Reference: [Stewart93] <author> J. N. Stewart. </author> <title> AMD The Berkeley Automounter, Part 1. ;login:, </title> <booktitle> 18(3):19. USENIX, </booktitle> <month> May/June </month> <year> 1993. </year>
Reference-contexts: BACKGROUND as the NFS transport protocol (UDP [rfc0768]), port number (2049) and service-specific information such as the name of the root of the file system. 2.3 Amd Amd <ref> [Pendry91, Stewart93] </ref> is a widely-used automounter daemon. Its most common use is to demand-mount file systems and later unmount them after a period of disuse; however, Amd has many other capabilities. Amd operates by mimicking an NFS server.
Reference: [Sun85] <institution> Behind the Network File System. Computer Design, 24(6):152, </institution> <month> June </month> <year> 1985. </year>
Reference: [Sun86] <author> Sun Microsystems Incorporated. </author> <title> Network File System: protocol specification, Part number 800-1324-03, revision B, </title> <month> 17 February </month> <year> 1986. </year>
Reference: [Sun89] <author> Sun Microsystems, Incorporated. NFS: </author> <title> Network File System protocol specification, </title> <type> Technical report RFC-1094, </type> <month> March </month> <year> 1989. </year>
Reference: [Tait91a] <author> C. Tait and D. Duchamp. </author> <title> Service Interface and Replica Consistency Algorithm for Mobile File System Clients. </title> <booktitle> 1st International Conference on Parallel and Distributed Information Systems, </booktitle> <year> 1991. </year> <note> BIBLIOGRAPHY 57 </note>
Reference-contexts: This switching mechanism should require no action on the part of administrators (since presumably too many clients will move too often and too quickly for ad 1 Examples of such re-thinking can be found in [Tait91b] and <ref> [Tait91a] </ref>. 1 2 CHAPTER 1. INTRODUCTION ministrators to track conveniently) and should be invisible to users, so that users need not become system administrators or notice when a switch is in progress.
Reference: [Tait91b] <author> C. Tait and D. Duchamp. </author> <title> Detection and Exploitation of File Working Sets. </title> <booktitle> Proceedings of the Eleventh International Conference on Distributed Computing Systems, </booktitle> <pages> pages 2-9. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: This switching mechanism should require no action on the part of administrators (since presumably too many clients will move too often and too quickly for ad 1 Examples of such re-thinking can be found in <ref> [Tait91b] </ref> and [Tait91a]. 1 2 CHAPTER 1. INTRODUCTION ministrators to track conveniently) and should be invisible to users, so that users need not become system administrators or notice when a switch is in progress.
Reference: [Tait92] <author> C. D. Tait and D. Duchamp. </author> <title> An efficient variable-consistency replicated file service. </title> <booktitle> Proceedings of the Usenix File Systems Workshop, </booktitle> <pages> pages 111-26, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: EXPERIENCE 37 cache consistency protocols. However, such protocols are not necessarily a panacea. Too much interaction between client and server can harm performance, especially if these interactions take place over a long distance and/or a low bandwidth connection. See <ref> [Tait92] </ref> for a design that can ensure consistency with relatively little client-server interaction. The primary drawback of using NFS for mobile computing is its limited security model.
Reference: [Tanenbaum87] <author> A. S. Tanenbaum. </author> <title> Operating systems: design and implementation. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: That way we could tell the vnode in question is an NFS one. Another problem was the lack of documentation specific to SunOS kernels or even more general about "modern" operating system resembling SunOS. The books available to us at the time were outdated, too broad, or inapplicable <ref> [Bach86, Le*er89, Tanenbaum87] </ref>. 6.1.2 Coding Practices When coding in the kernel, we found many of our assumptions and experiences accumulated over years of user-level programming to be false.
Reference: [Teraoka90] <author> F. Teraoka, Y. Yokote, and M. Tokoro. </author> <title> Virtual Network: Towards Location Transparent Communiction in Large Distributed Systems. </title> <type> Technical report. </type> <institution> Sony Computer Science Laboratory Incorporated, </institution> <address> Tokyo, Japan, </address> <year> 1990. </year>
Reference: [Teraoka91] <author> F. Teraoka, Y. Yokote, and M. Tokoro. </author> <title> A Network Architecture Providing Host Migration Transparency. </title> <type> Technical report. </type> <institution> Sony Computer Science Laboratory Incorporated, </institution> <address> Tokyo, Japan, </address> <year> 1991. </year>
Reference: [Teraoka92] <author> F. Teraoka. </author> <title> Design Implementation and Evaluation of Virtual Internet Protocol. </title> <booktitle> Proceedings of the 12 th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 170-7, </pages> <month> June </month> <year> 1992. </year>
Reference: [Teraoka93] <author> F. Teraoka and M. Tokoro. </author> <title> Host Migration Transparency in IP Networks: The VIP Approach. </title> <type> Technical report. </type> <institution> Sony Computer Science Laboratory Incorporated, </institution> <address> Tokyo, Japan, </address> <year> 1993. </year>
Reference: [Wada93] <author> H. Wada, T. Yozawa, T. Ohnishi, and Y. Tanaka. </author> <title> Mobile Computing Environment Based on Internet Packet Forwarding. </title> <booktitle> USENIX Technical Conference Proceedings (San Diego, </booktitle> <address> CA), </address> <pages> pages 503-17. </pages> <publisher> USENIX, </publisher> <month> Winter </month> <year> 1993. </year>
Reference: [Walsh85] <author> D. Walsh, B. Lyon, G. Sager, J. M. Chang, D. Goldberg, S. Kleiman, T. Lyon, R. Sandberg, and P. Weiss. </author> <title> Overview of the Sun Network File System. </title> <booktitle> Proceedings of Usenix Association Winter Conference (Dallas, Texas), </booktitle> <pages> pages 117-24. </pages> <publisher> USENIX Association, </publisher> <month> January </month> <year> 19845. </year>
Reference: [Watson92] <author> A. Watson and B. Nelson. LADDIS: </author> <title> A Multi-Vendor and Vendor-Neutral SPEC NFS Benchmark. Systems Administration (LISA VI) Conference (Long Beach, </title> <publisher> CA), </publisher> <pages> pages 17-32. </pages> <publisher> USENIX, </publisher> <month> October 19-23 </month> <year> 1992. </year>
References-found: 84

