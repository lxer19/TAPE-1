URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR93425.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: HeNCE: A Heterogeneous Network Computing Environment  
Author: Adam Beguelin, Jack Dongarra, Al Geist, Robert Manchek, and Keith Moore 
Date: August 1993  
Address: CS-93-205  
Affiliation: Computer Science Department  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. R. Allen, D. Callahan, and K. Kennedy. </author> <title> Automatic decomposition of scientific programs for parallel execition. </title> <booktitle> In Conf. Rec. 14th ACM Sym. Principles of Programming Langues (POPL), </booktitle> <volume> volume 14, </volume> <pages> pages 63-76, </pages> <year> 1987. </year>
Reference-contexts: Arcs between subroutine nodes represent dependencies. It is the user's responsibility to specify these dependencies. There exist tools such as Parascope <ref> [1] </ref> and Forge90 [19] which will take can help the programmer discover parallelism in a sequential code. HeNCE helps the user describe and run a parallel program but it does not find parallelism for the programmer.
Reference: [2] <author> Ozalp Babaoglu, Lorenzo Alvisi, Alessandro Amoroso, and Renzo Davoli. </author> <title> Paralex: An environment for parallel programming in distributed systems. </title> <type> Technical Report UB-LCS-91-01, </type> <institution> University of Bologna, Department of Mathematics, Piazza Porta S. Donato, </institution> <address> 5, 40127 Bologna, Italy, </address> <month> Febuary </month> <year> 1991. </year>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples [3, 15, 7, 12, 22, 13, 10, 16]. Paralex <ref> [2, 3] </ref> is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. There are, however, several major differences between Paralex and HeNCE.
Reference: [3] <author> Ozlap Babaoglu, Lorenzo Alvisi, Alessandro Amoroso, Renzo Davoli, and Luigi Alberto Giachini. Par alex: </author> <title> An environment for parallel programming in distributed systems. </title> <booktitle> In 1992 International Conference on Supercomputing, </booktitle> <pages> pages 178-187. </pages> <publisher> ACM, ACM Press, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples [3, 15, 7, 12, 22, 13, 10, 16]. Paralex <ref> [2, 3] </ref> is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. There are, however, several major differences between Paralex and HeNCE.
Reference: [4] <author> A. Beguelin, J. J. Dongarra, G. A. Geist, R. Manchek, and V. S. Sunderam. </author> <title> Solving computational grand challenges using a network of heterogeneous supercomputers. </title> <editor> In Jack Dongarra, Ken Kennedy, 21 Paul Messina, Danny C. Sorensen, and Robert G. Voigt, editors, </editor> <booktitle> Proceedings of Fifth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 596-601, </pages> <address> Philadelphia, </address> <year> 1991. </year> <note> SIAM. </note>
Reference-contexts: Various statistics recorded during program execution may also be stored and animated post mortem. Debugging support is available. Beyond the post mortem analysis, HeNCE can execute shells and other debugging tools on user specific machines. HeNCE is implemented on top of a system called PVM (Parallel Virtual Machine) <ref> [23, 5, 4] </ref>. PVM is a software package that allows the utilization of a heterogeneous network of parallel and serial computers as a single computational resource. PVM provides facilities for spawning, communication, and synchronization of processes over a network of heterogeneous machines.
Reference: [5] <author> A. Beguelin, J. J. Dongarra, G. A. Geist, R. Manchek, and V. S. Sunderam. </author> <title> A users' guide to PVM parallel virtual machine. </title> <type> Technical Report ORNL/TM-11826, </type> <institution> Oak Ridge National Laboratory, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Various statistics recorded during program execution may also be stored and animated post mortem. Debugging support is available. Beyond the post mortem analysis, HeNCE can execute shells and other debugging tools on user specific machines. HeNCE is implemented on top of a system called PVM (Parallel Virtual Machine) <ref> [23, 5, 4] </ref>. PVM is a software package that allows the utilization of a heterogeneous network of parallel and serial computers as a single computational resource. PVM provides facilities for spawning, communication, and synchronization of processes over a network of heterogeneous machines.
Reference: [6] <author> Adam Beguelin and Gary Nutt. </author> <title> Collected papers on Phred. </title> <type> Technical Report CU-CS-511-91, </type> <institution> University of Colroado, Department of Computer Science, Boulder, </institution> <address> CO 80309-0430, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: However, a HeNCE node that executes on a shared memory machine may take advantage of the available 18 shared memory. If fact, a HeNCE node executing on a shared memory machine could actually utilize the Schedule primitives. Phred <ref> [6, 7, 8] </ref> is also similar to HeNCE. Phred graphs are more complicated than those of HeNCE; they contain separate data and control flow graph constructs. The pipe and fan constructs of HeNCE are based on similar constructs from Phred.
Reference: [7] <author> Adam Beguelin and Gary Nutt. </author> <title> Examples in Phred. </title> <editor> In Jack Dongarra, Ken Kennedy, Paul Messina, Danny C. Sorensen, and Robert G. Voigt, editors, </editor> <booktitle> Proceedings of Fifth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 602-608, </pages> <address> Philadelphia, </address> <year> 1991. </year> <note> SIAM. </note>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> However, a HeNCE node that executes on a shared memory machine may take advantage of the available 18 shared memory. If fact, a HeNCE node executing on a shared memory machine could actually utilize the Schedule primitives. Phred <ref> [6, 7, 8] </ref> is also similar to HeNCE. Phred graphs are more complicated than those of HeNCE; they contain separate data and control flow graph constructs. The pipe and fan constructs of HeNCE are based on similar constructs from Phred.
Reference: [8] <author> Adam Beguelin and Gary Nutt. </author> <title> Visual parallel programming and determinacy: A language specification, an analysis technique, and a programming tool. </title> <type> Technical Report CMU-CS-93-166, </type> <institution> Carnegie Mellon University, </institution> <month> June </month> <year> 1993. </year> <note> To appear in JPDC in 1994. </note>
Reference-contexts: However, a HeNCE node that executes on a shared memory machine may take advantage of the available 18 shared memory. If fact, a HeNCE node executing on a shared memory machine could actually utilize the Schedule primitives. Phred <ref> [6, 7, 8] </ref> is also similar to HeNCE. Phred graphs are more complicated than those of HeNCE; they contain separate data and control flow graph constructs. The pipe and fan constructs of HeNCE are based on similar constructs from Phred.
Reference: [9] <author> Adam L. Beguelin. </author> <title> SCHEDULE: A hypercube implementation. </title> <booktitle> In Proceedings of The Third Conference on Hypercube Concurrent Computers and Applications, </booktitle> <volume> volume 1, </volume> <pages> pages 468-471, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: We are currently exploring the use of Condor with PVM programs. The main challenge here is to provide efficient checkpointing for PVM programs. Schedule <ref> [14, 15, 9] </ref> is similar to HeNCE. Although HeNCE graphs are more complex than those of Schedule, the basic HeNCE dependency graphs are equivalent. Schedule runs on a shared memory multiprocessor, not a heterogeneous network of distributed memory machines.
Reference: [10] <author> Kenneth Birnam and Keith Marzullo. </author> <title> Isis and the META project. </title> <booktitle> Sun Technology, </booktitle> <pages> pages 90-104, </pages> <month> Summer </month> <year> 1989. </year>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> Fault tolerance in Paralex is provided by the user specifying the number of times a node may fail. The current version of HeNCE does not support fault tolerance. The description of future work in Section 5 discusses fault tolerance for HeNCE. Paralex is built on Isis <ref> [10] </ref>. Isis is a parallel programming toolkit for fault tolerant parallel computing over a network of heterogeneous machines. Compared to Isis, HeNCE is a higher level programming tool. HeNCE could be built on Isis rather than PVM. PVM was chosen for several reasons. Isis is a much larger system.
Reference: [11] <author> James C. Brown. </author> <title> Formulation and programming of parallel computers: a unified approach. </title> <booktitle> In Proc. Intl. Conf. Par. Proc., </booktitle> <pages> pages 624-631, </pages> <year> 1985. </year>
Reference-contexts: Research into adding fault tolerance to PVM is currently underway [18]. Code [12, 21] is also a graph based parallel programming system. It allows the users to specify a parallel computation using Unified Computation Graphs <ref> [11] </ref>. Code has more advanced rules for node execution. Code firing rules are akin to guards used in logic programming. Express [16] supports parallel programming approximately at the same level as PVM.
Reference: [12] <author> Jim Browne, Muhammad Azam, and Stephen Sobek. </author> <title> CODE: A unified approach to parallel program ming. </title> <journal> IEEE Software, </journal> <volume> 6(4) </volume> <pages> 10-18, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> The main difference between PVM and Isis is that Isis provides fault tolerance and more complicated process communication and control. Research into adding fault tolerance to PVM is currently underway [18]. Code <ref> [12, 21] </ref> is also a graph based parallel programming system. It allows the users to specify a parallel computation using Unified Computation Graphs [11]. Code has more advanced rules for node execution. Code firing rules are akin to guards used in logic programming.
Reference: [13] <author> Nicholas Carriero and David Gelernter. </author> <title> Linda in context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <year> 1989. </year>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> Similar to Express and PVM the Cosmic environment provides a low level infrastructure for process control and communication. Unlike PVM the cosmic environment is not targeted toward heterogeneous networks of machines. Network Linda is a commercial implementation of the Linda primitives <ref> [13] </ref> which runs over a network of processors. Network Linda does not support the heterogeneous data formats automatically; it will, however, support a Linda tuple space over a network of machines which conform to the same data formats.
Reference: [14] <author> J. J. Dongarra and D. C. Sorensen. </author> <title> A portable environment for developing parallel FORTRAN programs. </title> <booktitle> In Proceedings of the International Conference on Vector and Parallel Computing Issues in Applied Research and Development, </booktitle> <pages> pages 175-186, </pages> <month> July </month> <year> 1987. </year> <note> Published in Parallel Computing, Volume 5, Numbers 1 & 2. </note>
Reference-contexts: We are currently exploring the use of Condor with PVM programs. The main challenge here is to provide efficient checkpointing for PVM programs. Schedule <ref> [14, 15, 9] </ref> is similar to HeNCE. Although HeNCE graphs are more complex than those of Schedule, the basic HeNCE dependency graphs are equivalent. Schedule runs on a shared memory multiprocessor, not a heterogeneous network of distributed memory machines.
Reference: [15] <author> J. J. Dongarra and D. C. Sorensen. </author> <title> SCHEDULE: Tools for Developing and Analyzing Parallel Fortran Programs. </title> <editor> In D. B. Gannon L. H. Jamieson and R. J. Douglass, editors, </editor> <booktitle> The Characteristics of Parallel Algorithms, </booktitle> <pages> pages 363-394. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> We are currently exploring the use of Condor with PVM programs. The main challenge here is to provide efficient checkpointing for PVM programs. Schedule <ref> [14, 15, 9] </ref> is similar to HeNCE. Although HeNCE graphs are more complex than those of Schedule, the basic HeNCE dependency graphs are equivalent. Schedule runs on a shared memory multiprocessor, not a heterogeneous network of distributed memory machines.
Reference: [16] <author> J. Flower, A. Kolawa, and S. Bharadwaj. </author> <title> The express way to distributed processing. </title> <booktitle> Supercomputing Review, </booktitle> <pages> pages 54-55, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> Code [12, 21] is also a graph based parallel programming system. It allows the users to specify a parallel computation using Unified Computation Graphs [11]. Code has more advanced rules for node execution. Code firing rules are akin to guards used in logic programming. Express <ref> [16] </ref> supports parallel programming approximately at the same level as PVM. The programmer writes explicit parallel code which makes calls to the Express libraries for process control and message passing.
Reference: [17] <author> David Gelernter and David Kaminsky. </author> <title> Supercomputing out of recycled garbage: Preliminary experience with Piranha. </title> <booktitle> In 1992 International Conference on Supercomputing, </booktitle> <pages> pages 417-427. </pages> <publisher> ACM, ACM Press, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: This is similar to writing a program at the PVM level where process initialization and communication is explicit. This contrasts to HeNCE where the programmer specifies the high level synchronization and standard parameter list procedure invocation is handled automatically. Piranha <ref> [17] </ref> is a system which is built on top of network Linda. Programming in Piranha is similar to Linda programming except the Piranha tasks migrate around the network. A major goal of Piranha is to consume unused compute cycles without disturbing machines which are in use.
Reference: [18] <author> Juan Leon, Allan L. Fisher, and Peter Steenkiste. </author> <title> Fail-safe pvm: A portable package for distributed programming with transparent recovery. </title> <type> Technical Report CMU-CS-93-124, </type> <institution> Carnegie Mellon University, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: The main difference between PVM and Isis is that Isis provides fault tolerance and more complicated process communication and control. Research into adding fault tolerance to PVM is currently underway <ref> [18] </ref>. Code [12, 21] is also a graph based parallel programming system. It allows the users to specify a parallel computation using Unified Computation Graphs [11]. Code has more advanced rules for node execution. Code firing rules are akin to guards used in logic programming.
Reference: [19] <author> J. M. Levesque. </author> <title> FORGE 90 and High Performance Fortran (HPF). </title> <editor> In J. S. Kowalik and L. Grandinetti, editors, </editor> <booktitle> Software for Parallel Computation, </booktitle> <pages> pages 111-119. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, </address> <year> 1993. </year>
Reference-contexts: Arcs between subroutine nodes represent dependencies. It is the user's responsibility to specify these dependencies. There exist tools such as Parascope [1] and Forge90 <ref> [19] </ref> which will take can help the programmer discover parallelism in a sequential code. HeNCE helps the user describe and run a parallel program but it does not find parallelism for the programmer.
Reference: [20] <author> M. Litzkow, M. Livny, and M. </author> <title> Mutka. Condor | A hunder of idle workstations. </title> <booktitle> In Proceedings of the Eighth Conference on Distributed Computing Sys tems, </booktitle> <address> San Jose, California, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: A major goal of Piranha is to consume unused compute cycles without disturbing machines which are in use. Piranha monitors machine utilization and will migrate tasks off of machines which are being used. Condor <ref> [20] </ref> is similar to Piranha in it's goals. A major difference between Condor and Piranha is that Condor runs single threaded applications and Piranha applications are typically multithreaded. An advantage of Condor is that programs can utilize the system without changing any source.
Reference: [21] <author> Peter Newton and James C. Browne. </author> <title> The code 2.0 graphical parallel programming language. </title> <booktitle> In 1992 International Conference on Supercomputing, </booktitle> <pages> pages 167-177. </pages> <publisher> ACM, ACM Press, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: The main difference between PVM and Isis is that Isis provides fault tolerance and more complicated process communication and control. Research into adding fault tolerance to PVM is currently underway [18]. Code <ref> [12, 21] </ref> is also a graph based parallel programming system. It allows the users to specify a parallel computation using Unified Computation Graphs [11]. Code has more advanced rules for node execution. Code firing rules are akin to guards used in logic programming.
Reference: [22] <author> Charles L. Seitz, Jakov Seizovic, and Wen-King Su. </author> <title> The C programmer's abbreviated guide to mul ticomputer programming. </title> <type> Technical Report Caltech-CS-TR-88-1, </type> <institution> California Institute of Technology, Department of Computer Science, Pasadena, </institution> <address> California 91125, </address> <year> 1988. </year> <month> 23 </month>
Reference-contexts: Paralex, Schedule, Phred, Code, the Cosmic environment, Network Linda, Isis, and Express are a few examples <ref> [3, 15, 7, 12, 22, 13, 10, 16] </ref>. Paralex [2, 3] is probably the most closely related project to HeNCE. In Paralex, the programmer also explicitly specifies dependency graphs where the nodes of the graph are subroutines. Paralex programs also execute on a heterogeneous distributed network of computers. <p> Code firing rules are akin to guards used in logic programming. Express [16] supports parallel programming approximately at the same level as PVM. The programmer writes explicit parallel code which makes calls to the Express libraries for process control and message passing. The Cosmic environment <ref> [22] </ref> is a publicly available programming environment targeted toward tightly coupled homogeneous groups of local memory MIMD machines or multicomputers. The Cosmic environment 17 is a lower level parallel programming tool than HeNCE.
Reference: [23] <author> V. S. Sunderam. </author> <title> PVM : A framework for parallel distributed computing. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year> <month> 24 </month>
Reference-contexts: Various statistics recorded during program execution may also be stored and animated post mortem. Debugging support is available. Beyond the post mortem analysis, HeNCE can execute shells and other debugging tools on user specific machines. HeNCE is implemented on top of a system called PVM (Parallel Virtual Machine) <ref> [23, 5, 4] </ref>. PVM is a software package that allows the utilization of a heterogeneous network of parallel and serial computers as a single computational resource. PVM provides facilities for spawning, communication, and synchronization of processes over a network of heterogeneous machines.
References-found: 23

