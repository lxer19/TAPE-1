URL: http://www.cs.utexas.edu/users/vishy/btp/ps_files/btp_thesis.ps
Refering-URL: http://www.cs.utexas.edu/users/vishy/linx.html
Root-URL: 
Title: Automated Proof Support for Reasoning about Distributed Mobile Programs  under the guidance of  
Author: B Karthikeyan T R Vishwanath Dr Sanjiva Prasad 
Degree: A thesis submitted in partial fulfilment of the requirements for the degree of Bachelor of Technology in Computer Science and Engineering by  
Date: May 1997  
Address: Delhi  
Affiliation: Department of Computer Science Engineering Indian Institute of Technology,  
Abstract-found: 0
Intro-found: 1
Reference: [AGP89] <author> P. Mishra A. Giacalone and S. Prasad. </author> <title> Facile: A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2) </volume> <pages> 121-160, </pages> <year> 1989. </year>
Reference: [Ait95] <author> Otmane Ait-Mohamed. </author> <title> Mechanizing a pi-calculus equivalence in HOL. In Higher Order Logic Theorem Proving and Its Applications: </title> <booktitle> 8th International Workshop, </booktitle> <address> Aspen Grove, Utah, </address> <month> September </month> <year> 1995: </year> <booktitle> Proceedings, volume 971 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-16. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [AP93] <author> Roberto Amadio and Sanjiva Prasad. </author> <title> Localities and Failures. </title> <type> Technical Report ECRC-94-18, </type> <institution> European Computer-Industry Research Centre, Munich, </institution> <year> 1993. </year>
Reference-contexts: S which is reflexive, symmetric and relates the required agent pair: P S Q , (P,Q) = (P + ,P) or Q S P Finally we prove that S is a bisimulation by using the previous result and thus the theorem is proved. 27 Chapter 5 An example proof In <ref> [AP93] </ref>, Sanjiva Prasad and Robert Amadio give an example application in the l calculus, and prove, in the calculus, a fault tolerant property for an optimized version of the translated system.
Reference: [Chu40] <author> A. Church. </author> <title> A formulation of the simple theory of types. </title> <journal> The Journal of Symbolic Logic, </journal> <volume> 5, </volume> <year> 1940. </year>
Reference: [GM93] <author> M. J. C. Gordon and T. F. Melham. </author> <title> Introduction to HOL : A theorem proving environment for higher order logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: The HOL system supports secure theorem proving by representing its logic in the strongly typed language ML. A detailed introduction to HOL is given in <ref> [GM93] </ref>. 3.1 Higher Order Logic The version of Higher Order Logic supported by the HOL theorem prover is based on Church's version of simple type theory ([Chu40]).
Reference: [Har96] <author> John R Harrison. </author> <title> HOL Light : A tutorial introduction. </title> <booktitle> In SLNCS 1166 : Proceedings of FMCAD 96, </booktitle> <address> SLNCS, </address> <year> 1996. </year>
Reference: [Mel94] <author> Tom F. Melham. </author> <title> A mechanized theory of the -calculus in HOL. </title> <journal> Nordic Journal of Computing, </journal> <volume> 1(1) </volume> <pages> 50-76, </pages> <year> 1994. </year>
Reference-contexts: Further, the restriction operator operates on only one channel at a time, and not a list of channels. In the version of the monadic calculus that we consider, which is the same as the one considered by Melham in <ref> [Mel94] </ref>, we do not allow agent definitions. 2.2.1 Syntax x; y; z are names a; b; c are actions P; Q; R are agents a ::= t f The silent action g j x (y) f Inputting the name y on the channel x g j x [y] f Outputting the <p> Higher Order Logic is thus used as the meta-language whose objects are the terms. Meaning is then given to these objects by defining the transition system, bisimulation etc. within the logic. This approach was adopted by Melham in <ref> [Mel94] </ref>, for mechanizing the simply sorted monadic calculus in HOL.
Reference: [MPW92] <author> Robin Milner, Joachim Parrow, and David Walker. </author> <title> A calculus of mobile processes, Parts I and II. </title> <journal> Journal of Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <month> September </month> <year> 1992. </year>
Reference: [Pau91] <author> L. C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference: [PT94] <author> Benjamin C. Pierce and David N. Turner. </author> <title> PICT user manual, </title> <note> 1994. Available electronically. 44 </note>
Reference: [RD92] <author> R.Milner and D.Sangiorgi. </author> <title> Barbed Bisimulation. </title> <booktitle> In SLNCS 623 : Proceedings of ICALP 92, </booktitle> <address> SLNCS. </address> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [Rep91] <author> John Reppy. </author> <title> CML: A higher-order concurrent language. </title> <booktitle> Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1991. </year>
Reference: [R.M89] <author> R.Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference: [Sli] <author> Konrad Slind. </author> <title> The online HOL90 user manual and tutorial. </title> <note> Available electronically. </note>
Reference: [VM94] <author> B. Victor and F. Moller. </author> <title> The Mobility Workbench: A tool for the calculus. </title> <type> Technical Report ECS-LFCS-94-285, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <month> Feb </month> <year> 1994. </year> <month> 45 </month>
References-found: 15

