URL: ftp://ftp.cs.wisc.edu/math-prog/tech-reports/96-02.ps
Refering-URL: http://www.cs.wisc.edu/math-prog/tech-reports/
Root-URL: 
Title: Fast EquiPartitioning of Rectangular Domains using Stripe Decomposition  
Phone: 53706.  
Author: Wayne Martin 
Date: February 5, 1996  
Address: Wisconsin, Madison, Wisconsin  
Affiliation: Computer Sciences Department, University of  
Note: This research was partially supported by the Air Force Office of Scientific Research under grant F49620-94-1-0036, and by the NSF under grant CCR-9306807.  
Abstract: This paper presents a fast algorithm that provides optimal or near optimal solutions to the minimum perimeter problem on a rectangular grid. The minimum perimeter problem is to partition a grid of size M N into P equal area regions while minimizing the total perimeter of the regions. The approach taken here is to divide the grid into stripes that can be filled completely with an integer number of regions . This striping method gives rise to a knapsack integer program that can be efficiently solved by existing codes. The solution of the knapsack problem is then used to generate the grid region assignments. An implementation of the algorithm partitioned a 1000 1000 grid into 1000 regions to a provably optimal solution in less than one second. With sufficient memory to hold the M N grid array, extremely large minimum perimeter problems can be solved easily.
Abstract-found: 1
Intro-found: 1
Reference: [CM95a] <author> I. T. Christou and R. R. Meyer, </author> <title> Optimal equipartition of rectangular domains for parallel computation, </title> <type> Technical report MPTR 95-04, </type> <institution> Univer sity of Wisconsin, Madison, WI, </institution> <month> Feb. </month> <year> 1995. </year> <note> To appear in Journal of Global Optimization. </note>
Reference-contexts: The motivation for the striping approach is twofold. First, in observing the optimal solutions produced by Christou and Meyers PERIX-GA method (<ref> [CM95a] </ref> and [CM95b]), most of the optimal solutions exhibit a striped form. Second, the proofs of lower bound convergence make use of a stripe filling argument [CM95a]. Thus a stripe filling algorithm should be an effective way to solve the MPE problem. The algorithm consists of three phases. First, the possible completely filled stripe heights and corresponding perimeters are determined. The second phase is to solve a knapsack problem. <p> For each x i of the solution vector not zero, x i stripes of height h i are added to the assignment grid. The striping procedure follows that given in <ref> [CM95a] </ref>. <p> The graph of the bound error vers us N is shown in graph 1. For this sequence the average error from lower bound was 0.7%. Of the 996 problems solved 32.6% were provably optimal and 71.4% had an error of less than 1%. As the theory in <ref> [CM95a] </ref> and [CM95b] predicts, the error bound seems to be approaching zero as N increases. 0 2 4 6 0 100 200 300 400 500 600 700 800 900 1000 % r r o o n MPE (N , N , N ) 0.7% average % error 32.6% at lower bound
Reference: [CM95b] <author> I. T. Christou and R. R. Meyer, </author> <title> Optimal and asymptotically optimal equipartition of rectangular domains via stripe decomposition, </title> <type> Technical report MPTR 95-19., </type> <institution> University of Wisconsin, Madison, WI, </institution> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: MPE ( M, N, P) can be formulated as a quadratic assignment problem with MNP binary variables and MN+P constraints. Details of this formulation are given in Christou and Meyer 2 <ref> [CM95b] </ref>. Unfortunately, t he QAP approach quickly becomes unsolvable as the grid size becomes moderately large. The algorithm developed here takes an approach that considers the geometry of the problem. The method breaks the total area into a series of completely filled stripes. <p> The MPE (32,31,32) solution has stripes of height 5 and 6. The motivation for the striping approach is twofold. First, in observing the optimal solutions produced by Christou and Meyers PERIX-GA method ([CM95a] and <ref> [CM95b] </ref>), most of the optimal solutions exhibit a striped form. Second, the proofs of lower bound convergence make use of a stripe filling argument [CM95a]. Thus a stripe filling algorithm should be an effective way to solve the MPE problem. The algorithm consists of three phases. <p> Computational Results This section presents the computational results of the presented algorithm. The program was tested on a Sun S PARCstation-20 workstation. First, table 1 compares the striping algorithm developed here ( MSP) with the genetic algorithm PERIX-GA <ref> [CM95b] </ref> running on a cluster of 33 SPARCserver-20 computers. The times in the table all in seconds and the Error columns are the percent error from the lower bound. The first observation is that the running times for MSP are extremely fast. <p> Both the spectral bisection and the geometric m esh partitioning methods have the restriction that the number of regions be a power of two. The times and error values for these methods were taken from <ref> [CM95b] </ref>. <p> The graph of the bound error vers us N is shown in graph 1. For this sequence the average error from lower bound was 0.7%. Of the 996 problems solved 32.6% were provably optimal and 71.4% had an error of less than 1%. As the theory in [CM95a] and <ref> [CM95b] </ref> predicts, the error bound seems to be approaching zero as N increases. 0 2 4 6 0 100 200 300 400 500 600 700 800 900 1000 % r r o o n MPE (N , N , N ) 0.7% average % error 32.6% at lower bound 71.4% below
Reference: [DT91] <author> R. DeLeone and M. A. Tork-Roth, </author> <title> Massively parallel solution of quadratic programs via successive overrelaxation, </title> <type> Technical report 1041, </type> <institution> University of Wisconsin, Madison, WI, </institution> <year> 1991. </year>
Reference-contexts: The minimum perimeter problem has several applications in parallel computer systems. In solving partial differential equations numerically, a grid is partitioned among the available processors. Using a five point numerical method, each grid element must communicate with its North, East, South, and West neighbors <ref> [DT91] </ref>. In assigning processors to the regions of the grid, one wants to minimize the communication between the processors while equalizing the number of grid elements assigned to each processor. This assignment process is analogous to the minimum perimeter problem.
Reference: [GMT95] <author> J. R. Gil bert, G. L. Miller, and S. H. Teng, </author> <title> Geometric mesh partitioning: Implementation and experiments, </title> <booktitle> Proceedings of the 9th International Symposium on Parallel Processing (1995) 418-427. </booktitle>
Reference-contexts: The Chaco package version 2.0 was used for the spect ral bisection method [HL95]. T he geometric method was implemented in MATLAB as described in Gilbert, Miller, and Teng <ref> [GMT95] </ref>. Both the spectral bisection and the geometric m esh partitioning methods have the restriction that the number of regions be a power of two. The times and error values for these methods were taken from [CM95b].
Reference: [HL95] <author> B. Henderson and R Leland, </author> <note> The Chaco Users Guide Version 2.0 (Sandia National Laboratories, </note> <year> 1995). </year>
Reference-contexts: The Chaco package version 2.0 was used for the spect ral bisection method <ref> [HL95] </ref>. T he geometric method was implemented in MATLAB as described in Gilbert, Miller, and Teng [GMT95]. Both the spectral bisection and the geometric m esh partitioning methods have the restriction that the number of regions be a power of two.
Reference: [MT90] <author> S. Martello and P. Toth, </author> <title> Knapsack Problems: </title> <publisher> Algorithms and Computer Implementations (John Wiley & Sons, </publisher> <year> 1990). </year>
Reference-contexts: It takes the stripe heights and perimeters generated in GEN_STRIPES and solves the knapsack problem using Martello and Toths MTB2 routine <ref> [MT90] </ref>.
Reference: [Sch89] <editor> R. J. Schalkoff., </editor> <publisher> Digital Image Processing and Computer Vision (John Wiley & Sons, </publisher> <year> 1989). </year>
Reference-contexts: This assignment process is analogous to the minimum perimeter problem. Another area of application is in image processing and edge detection in computer vision systems implemented on parallel hardware <ref> [Sch89] </ref>. Here again the rectangular image needs to partitioned among the processors to minimize inter-processor communication.
Reference: [YM92] <author> J. Yackel and R. R. Meyer, </author> <title> Minimum perimeter decomposition, </title> <type> Technical report 1078, </type> <institution> University of Wisconsin, Madison, WI, </institution> <year> 1992. </year>
Reference-contexts: Here again the rectangular image needs to partitioned among the processors to minimize inter-processor communication. In order to calculate a lower bound for the minimum perimeter problem, Yackel and Meyer <ref> [YM92] </ref> have shown that the minimum perimeter of a single region with area A is determined by P* (A). (1) If the entire grid could be tiled with shapes of the optimal perimeter without overlapping then an optimal solution would be found.
References-found: 8

