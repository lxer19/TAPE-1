URL: http://www.cc.gatech.edu/systems/papers/daniela/iceccs.ps
Refering-URL: http://www.cs.gatech.edu/people/home/daniela/cv.html
Root-URL: 
Email: fdaniela,schwang@cc.gatech.edu  
Title: Improving Protocol Performance by Dynamic Control of Communication Resources  
Author: Daniela Ivan-Rosu Karsten Schwan 
Affiliation: Georgia Institute of Technology College of Computing  
Abstract: A problem frequently faced by complex distributed applications is to control the interaction of their communication and computational activities such that they jointly adhere to desired performance and timing requirements. This research concerns communication infrastructures able to cope with the varying processing and QoS 1 requirements imposed on them by application programs. Specifically, we describe and evaluate COMM adapt , a communication infrastructure enabling the on-line adaptation of a protocol's resource usage to currently available resources and application requirements. The key feature of COMM adapt is its dynamic (auto-)configurability, which is its support of on-line configuration transparent to application programs. Such configuration is performed by a heuristic that accommodates changes in a connection's resource requirements by reallocating resources based on its knowledge of actual resource usage by other active connections. The heuristic's design and implementation are based on extensive investigations of the manner in which alternative assignments of protocol tasks to underlying processing resources can influence program-level latency and throughput requirements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Bhatti and R. Schlichting. </author> <title> A system for constructing configurable high-level protocols. </title> <booktitle> Proc. SIGCOMM, </booktitle> <year> 1995. </year>
Reference-contexts: The parallel STREAMS implementation in [4] offers only user-directed stream configuration, and the policy for runtime scheduling of communication related tasks ignores QoS requirements. We consider that dynamic auto-configurability can provide benefits to protocol architectures as HOPS [5], F-CSS [18], or micro-protocols <ref> [1] </ref>, different from the layered protocol model used in COMM adapt . Toward this end, the CI model should enable the estimation of the resource requirements and the actual usage for each specific connection.
Reference: [2] <author> T. Bihari and K. Schwan. </author> <title> Dynamic adaptation of real-time software. </title> <journal> ACM Transactions on Computer Systems, vol.9, no.2, </journal> <pages> pages 143-174, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: do not need them in order to satisfy their traffic requirements. * Runtime usage evaluation, which provides the infor mation for dynamic configuration. * Meta-level control of CI configuration, which serves to adapt the decision mechanism (e.g., algorithms for resource management, decision-making policies) to specific applications or sets of requirements <ref> [2] </ref>. For example, the CI itself may vary the quality and promptness of its decision making (e.g., by adjusting the amount of monitoring or periodicity of status checking). COMM adapt software architecture together with its interfaces to the network and to application programs.
Reference: [3] <author> E. Felten. </author> <title> Protocol compilation: High-performance communication for parallel programs. </title> <type> U. </type> <institution> of Washington, Dept. Computer Science and Eng., TR 93-09-09, </institution> <year> 1993. </year>
Reference-contexts: For instance, the performance of scientific applications may be increased if communicating program components can exploit runtime knowledge of communication delays when scheduling computations and associated communications <ref> [3, 12] </ref>. Similarly, both the per fl Funded in part by DARPA through the Honeywell Technology Center under contract B09332478 1 Quality of Service formance and the predictability of real-time applications may be improved if the communication infrastructure (CI) can guarantee bounds on communication delays.
Reference: [4] <author> A. Garg. </author> <title> Parallel streams: a multi-processor implementation. </title> <booktitle> Proc. USENIX, </booktitle> <pages> pages 163-176, </pages> <month> Winter'90. </month>
Reference-contexts: The ADAPTIVE system [14] enables only application-level adaptation decisions. The framework presented in [18] supports QoS requirements by connection-time configuration decided by the CI. [8] only comment on the necessity of runtime adjustments in the mapping of protocol modules to processors. The parallel STREAMS implementation in <ref> [4] </ref> offers only user-directed stream configuration, and the policy for runtime scheduling of communication related tasks ignores QoS requirements. We consider that dynamic auto-configurability can provide benefits to protocol architectures as HOPS [5], F-CSS [18], or micro-protocols [1], different from the layered protocol model used in COMM adapt .
Reference: [5] <author> Z. Haas. </author> <title> A protocol structure for high-speed communication over broadband isdn. </title> <journal> IEEE Network Magazine, </journal> <pages> pages 64-70, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: The parallel STREAMS implementation in [4] offers only user-directed stream configuration, and the policy for runtime scheduling of communication related tasks ignores QoS requirements. We consider that dynamic auto-configurability can provide benefits to protocol architectures as HOPS <ref> [5] </ref>, F-CSS [18], or micro-protocols [1], different from the layered protocol model used in COMM adapt . Toward this end, the CI model should enable the estimation of the resource requirements and the actual usage for each specific connection.
Reference: [6] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 17(1), </volume> <pages> pages 64-76, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: While previous work in configurable communication systems <ref> [6, 8, 10, 13, 14, 18] </ref> addresses similar application domains, the maintenance of QoS requirements by on-line auto-configuration of protocols pursued in our research constitutes a novel contribution. The remainder of this paper first outlines the COMM adapt software architecture and its prototype (see Section 2). <p> COMM adapt provides mechanisms for configuration at the time of connection establishment, for user-driven reconfiguration at any time during the life of a connection, for specification of connection requirements, and for resource management (see Figure 1). The need for such mechanisms has already been established by previous work <ref> [6, 10, 14, 18] </ref>. In contrast to such work, COMM adapt is addressing the difficulty of accurately estimating the run-time behavior of complex applications with numerous communication streams. <p> COMM adapt differs from previous work in its support for constructing protocols that are auto-configurable at run-time in their functionality and performance. For instance, in the x-Kernel <ref> [6, 9] </ref>, each connection is bound to a specific protocol stack at the time of connection establishment. [10] presents an environment for dynamically configuring protocol stacks, but no details are provided on the runtime configuration mechanisms. The ADAPTIVE system [14] enables only application-level adaptation decisions.
Reference: [7] <author> D. Ivan-Rosu and K. Schwan. </author> <title> Improving protocol performance by dynamic control of communication resources. </title> <institution> Georgia Inst. of Technology, GIT-CC-96-04, </institution> <year> 1996. </year>
Reference-contexts: Details of COMM adapt 's configuration mechanisms and heuristic are presented in Section 4. Finally, COMM adapt 's contributions are reviewed in comparison with related research in Section 5. Details on the COMM adapt prototype and the evaluation of the load assignment heuristic can be found in <ref> [7] </ref>. 2 The COMM adapt Communication Infras tructure 2.1 The Software Architecture adapt architecture The flexibility of a CI strongly influences the set of requirements it can accommodate. <p> The following sections briefly present the heuristic and the configuration procedures, while details including the evaluation in the context of a synthetic applications, appear in <ref> [7] </ref>. 4.1 Connection-Time Configuration The goal of connection-time configuration is to allocate resources to a new connection such that this and all other connections will meet current traffic and QoS requirements. The configuration decision is part of the connection establishment procedure, which is coordinated by the CI Manager (CIM).
Reference: [8] <author> B. Lindgren, B. Krupczak, M. Ammar, and K. Schwan. </author> <title> Parallel and configurable protocols: Experiences with a prototype and an architectural framework. </title> <institution> Georgia Institute of Technology, GIT-CC-93-22, </institution> <year> 1993. </year>
Reference-contexts: While previous work in configurable communication systems <ref> [6, 8, 10, 13, 14, 18] </ref> addresses similar application domains, the maintenance of QoS requirements by on-line auto-configuration of protocols pursued in our research constitutes a novel contribution. The remainder of this paper first outlines the COMM adapt software architecture and its prototype (see Section 2). <p> The ADAPTIVE system [14] enables only application-level adaptation decisions. The framework presented in [18] supports QoS requirements by connection-time configuration decided by the CI. <ref> [8] </ref> only comment on the necessity of runtime adjustments in the mapping of protocol modules to processors. The parallel STREAMS implementation in [4] offers only user-directed stream configuration, and the policy for runtime scheduling of communication related tasks ignores QoS requirements.
Reference: [9] <author> E. Nahum, D. Yates, J. Kurose, and D. Towsley. </author> <title> Performance issues in parallelized network protocols. </title> <booktitle> Proc. 1st Symposium on OSDI, </booktitle> <pages> pages 125-137, </pages> <year> 1994. </year>
Reference-contexts: Connection behavior and requirements do not vary during an experiment. The following factors are varied across experiments, consistent with other studies reported in the literature <ref> [15, 9] </ref>: (1) protocol task assignments (see Figure 4), (2) number of concurrent connections; (3) message size, (4) protocol processing requirements (reliability, checksum, encryption), and (5) transmission rate, either bounded (10Mbits/sec 0.05%) or unbounded. <p> the behavior of different CI configurations, including (1) that pipelined CI configurations on a small number of processors yield performance comparable to message and connectional parallel configurations (in contrast to [14]) and (2) that the NI bottleneck may restrict the performance of highly parallel communication architectures proposed in previous studies <ref> [15, 9] </ref>. COMM adapt differs from previous work in its support for constructing protocols that are auto-configurable at run-time in their functionality and performance. <p> COMM adapt differs from previous work in its support for constructing protocols that are auto-configurable at run-time in their functionality and performance. For instance, in the x-Kernel <ref> [6, 9] </ref>, each connection is bound to a specific protocol stack at the time of connection establishment. [10] presents an environment for dynamically configuring protocol stacks, but no details are provided on the runtime configuration mechanisms. The ADAPTIVE system [14] enables only application-level adaptation decisions.
Reference: [10] <author> T. Plagemann, B. Platter, et al. </author> <title> Modules as building blocks for protocol configuration. </title> <booktitle> Proc. International Conference on Network Protocol, </booktitle> <year> 1993. </year>
Reference-contexts: While previous work in configurable communication systems <ref> [6, 8, 10, 13, 14, 18] </ref> addresses similar application domains, the maintenance of QoS requirements by on-line auto-configuration of protocols pursued in our research constitutes a novel contribution. The remainder of this paper first outlines the COMM adapt software architecture and its prototype (see Section 2). <p> COMM adapt provides mechanisms for configuration at the time of connection establishment, for user-driven reconfiguration at any time during the life of a connection, for specification of connection requirements, and for resource management (see Figure 1). The need for such mechanisms has already been established by previous work <ref> [6, 10, 14, 18] </ref>. In contrast to such work, COMM adapt is addressing the difficulty of accurately estimating the run-time behavior of complex applications with numerous communication streams. <p> COMM adapt differs from previous work in its support for constructing protocols that are auto-configurable at run-time in their functionality and performance. For instance, in the x-Kernel [6, 9], each connection is bound to a specific protocol stack at the time of connection establishment. <ref> [10] </ref> presents an environment for dynamically configuring protocol stacks, but no details are provided on the runtime configuration mechanisms. The ADAPTIVE system [14] enables only application-level adaptation decisions.
Reference: [11] <author> M. Rosu. </author> <title> Processor controlled off-processor i/o. </title> <institution> Cornell University, Dept.Computer Science TR 95-1538, </institution> <year> 1995. </year>
Reference-contexts: The network interface (NI) is a simulated network adapter enabling direct interface to the user space. It is modeled after the high performance ATM interface described in <ref> [11] </ref>.
Reference: [12] <author> J. Saltz, G. Edjlali, et al. </author> <title> Data parallel programming in an adaptive environment. </title> <booktitle> Proc. of the 9th International Parallel Processing Symposium, </booktitle> <pages> pages 812-819, </pages> <year> 1995. </year>
Reference-contexts: For instance, the performance of scientific applications may be increased if communicating program components can exploit runtime knowledge of communication delays when scheduling computations and associated communications <ref> [3, 12] </ref>. Similarly, both the per fl Funded in part by DARPA through the Honeywell Technology Center under contract B09332478 1 Quality of Service formance and the predictability of real-time applications may be improved if the communication infrastructure (CI) can guarantee bounds on communication delays.
Reference: [13] <author> S. Saxena, J. K. Peacock, et al. </author> <title> Pitfalls in multithreading svr4 streams and other weightless processes. </title> <booktitle> Proc. USENIX, </booktitle> <pages> pages 85-96, </pages> <month> Winter'93. </month>
Reference-contexts: While previous work in configurable communication systems <ref> [6, 8, 10, 13, 14, 18] </ref> addresses similar application domains, the maintenance of QoS requirements by on-line auto-configuration of protocols pursued in our research constitutes a novel contribution. The remainder of this paper first outlines the COMM adapt software architecture and its prototype (see Section 2).
Reference: [14] <author> D. Schmidt, D. Box, and T. Suda. </author> <title> Adaptive. a dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Journal of Concurrency: Practice and Experience, Jun.93. </journal>
Reference-contexts: While previous work in configurable communication systems <ref> [6, 8, 10, 13, 14, 18] </ref> addresses similar application domains, the maintenance of QoS requirements by on-line auto-configuration of protocols pursued in our research constitutes a novel contribution. The remainder of this paper first outlines the COMM adapt software architecture and its prototype (see Section 2). <p> COMM adapt provides mechanisms for configuration at the time of connection establishment, for user-driven reconfiguration at any time during the life of a connection, for specification of connection requirements, and for resource management (see Figure 1). The need for such mechanisms has already been established by previous work <ref> [6, 10, 14, 18] </ref>. In contrast to such work, COMM adapt is addressing the difficulty of accurately estimating the run-time behavior of complex applications with numerous communication streams. <p> COMM adapt software library for implementation of configurable protocols, supporting user- and algorithm directed dynamic configuration; * specific insights on the behavior of different CI configurations, including (1) that pipelined CI configurations on a small number of processors yield performance comparable to message and connectional parallel configurations (in contrast to <ref> [14] </ref>) and (2) that the NI bottleneck may restrict the performance of highly parallel communication architectures proposed in previous studies [15, 9]. COMM adapt differs from previous work in its support for constructing protocols that are auto-configurable at run-time in their functionality and performance. <p> For instance, in the x-Kernel [6, 9], each connection is bound to a specific protocol stack at the time of connection establishment. [10] presents an environment for dynamically configuring protocol stacks, but no details are provided on the runtime configuration mechanisms. The ADAPTIVE system <ref> [14] </ref> enables only application-level adaptation decisions. The framework presented in [18] supports QoS requirements by connection-time configuration decided by the CI. [8] only comment on the necessity of runtime adjustments in the mapping of protocol modules to processors.
Reference: [15] <author> D. Schmidt and T. Suda. </author> <title> Measuring the performance of parallel message-basedprocess architectures. </title> <booktitle> IEEE INFOCOM, </booktitle> <year> 1995. </year>
Reference-contexts: Connection behavior and requirements do not vary during an experiment. The following factors are varied across experiments, consistent with other studies reported in the literature <ref> [15, 9] </ref>: (1) protocol task assignments (see Figure 4), (2) number of concurrent connections; (3) message size, (4) protocol processing requirements (reliability, checksum, encryption), and (5) transmission rate, either bounded (10Mbits/sec 0.05%) or unbounded. <p> the behavior of different CI configurations, including (1) that pipelined CI configurations on a small number of processors yield performance comparable to message and connectional parallel configurations (in contrast to [14]) and (2) that the NI bottleneck may restrict the performance of highly parallel communication architectures proposed in previous studies <ref> [15, 9] </ref>. COMM adapt differs from previous work in its support for constructing protocols that are auto-configurable at run-time in their functionality and performance.
Reference: [16] <author> D. Schmidt and T. Suda. </author> <title> Transport system architectures for high-performance communications subsystems. </title> <journal> IEEE Journal on Selected Areas in Comm., </journal> <volume> vol.11,No.4, </volume> <month> May 93. </month>
Reference-contexts: The configurations considered in this study are (see Figure 4): * connectional parallelism (config.c), where each con nection is assigned its own processor <ref> [16] </ref>; * message parallelism (config.m), where a message (in any connection) may be (completely) processed on any processor [16]; and * quasi-pipelined (config.1p, config.2p, config.4p ), where more than one protocol module may be assigned to the same processor, and where messages are shep-herded through all of those modules before a <p> The configurations considered in this study are (see Figure 4): * connectional parallelism (config.c), where each con nection is assigned its own processor <ref> [16] </ref>; * message parallelism (config.m), where a message (in any connection) may be (completely) processed on any processor [16]; and * quasi-pipelined (config.1p, config.2p, config.4p ), where more than one protocol module may be assigned to the same processor, and where messages are shep-herded through all of those modules before a processor is relinquished.
Reference: [17] <author> R. Sharma and S. Kesav. </author> <title> Signaling and operating systems support for native-mode atm applications. </title> <booktitle> Proc. SIGCOMM, </booktitle> <pages> pages 149-157, </pages> <year> 1994. </year>
Reference-contexts: Application-specific protocol stacks can easily be constructed at runtime since all modules have the same input interfaces (i.e., message connection and CI state descriptors). COMM adapt 's protocol stacks are non-multiplexing. This preserves the connection identity at all levels of protocol processing, thereby enabling better support for connection-specific QoS <ref> [17] </ref> and for flexible composition of application-specific protocols. The user interface (UI) is designed for a multi-processor environment.
Reference: [18] <author> M. Zitterbart, B. Stiller, and A. Tantaway. </author> <title> A model for flexible high-performance communication subsystems. </title> <journal> IEEE Journal on Selected Areas in Comm., </journal> <volume> 11(4), </volume> <month> May </month> <year> 1993. </year>
Reference-contexts: While previous work in configurable communication systems <ref> [6, 8, 10, 13, 14, 18] </ref> addresses similar application domains, the maintenance of QoS requirements by on-line auto-configuration of protocols pursued in our research constitutes a novel contribution. The remainder of this paper first outlines the COMM adapt software architecture and its prototype (see Section 2). <p> COMM adapt provides mechanisms for configuration at the time of connection establishment, for user-driven reconfiguration at any time during the life of a connection, for specification of connection requirements, and for resource management (see Figure 1). The need for such mechanisms has already been established by previous work <ref> [6, 10, 14, 18] </ref>. In contrast to such work, COMM adapt is addressing the difficulty of accurately estimating the run-time behavior of complex applications with numerous communication streams. <p> The ADAPTIVE system [14] enables only application-level adaptation decisions. The framework presented in <ref> [18] </ref> supports QoS requirements by connection-time configuration decided by the CI. [8] only comment on the necessity of runtime adjustments in the mapping of protocol modules to processors. <p> The parallel STREAMS implementation in [4] offers only user-directed stream configuration, and the policy for runtime scheduling of communication related tasks ignores QoS requirements. We consider that dynamic auto-configurability can provide benefits to protocol architectures as HOPS [5], F-CSS <ref> [18] </ref>, or micro-protocols [1], different from the layered protocol model used in COMM adapt . Toward this end, the CI model should enable the estimation of the resource requirements and the actual usage for each specific connection.
References-found: 18

