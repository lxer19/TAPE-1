URL: http://www.isi.edu/~johnh/PAPERS/Visweswaraiah97a.ps.gz
Refering-URL: http://www.isi.edu/~johnh/PAPERS/Visweswaraiah97a.html
Root-URL: http://www.isi.edu
Title: Improving Restart of Idle TCP Connections DRAFTcurrently submitted for publication  
Author: Vikram Visweswaraiah John Heidemann 
Date: August 8, 1997  
Abstract: TCP congestion avoidance mechanisms are based on adjustments to the congestion-window size, triggered by the ACK clock. These mechanisms are not well matched to large but intermittent bursts of traffic, such as responses from a HTTP/1.1-based web server. Idle periods between bursts (web page replies) stop the ACK clock and hence disrupt even data flow. When restarting data flow after an idle period, current implementations either enforce slow start (SSR) or use the prior congestion window (NSSR). The former approach, while conservative, leads to low effective throughput in cases like P-HTTP. The latter case optimistically sends a large burst of back-to-back packets, risking router buffer overflow and subsequent packet loss. This paper proposes a third alternative: pacing some packets at a certain rate until the ACK clock can be restarted. We describe the motivation and implementation of this third alternative and present simulation results which show that it achieves the elapsed-time performance comparable to NSSR and loss behavior of SSR. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.S. Ahn, Peter B. Danzig, Z. Liu, and L. Yan. </author> <title> TCP Vegas: Emulation and experiment. </title> <booktitle> In Proceedings of the ACM SIGCOMM '95, </booktitle> <pages> pages 185195, </pages> <address> Cambridge, Massachusetts, </address> <month> August </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: Instead of forcing slow start upon detection of idle time, the behavior is modified 4 to RBP. (Note that RBP is not a substitute for the slow start mechanism; it applies only to the initial phase of data transfer after an idle period.) We use the USC implementation <ref> [1] </ref> of TCP Vegas [4] to estimate transfer rate. Currently a scaling factor of 1 is employed (data is sent at the the full prior rate), since for our current workloads the Vegas algorithms consistently underestimate rate.
Reference: [2] <author> Hari Balakrishnan, Srinivasan Seshan, Mark Stemm, and Randy H. Katz. </author> <title> Analyzing stability in wide-area network performance. </title> <booktitle> In Proceedings of the ACM SIGMETRICS, </booktitle> <address> Seattle WA, USA, </address> <month> June </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: It is possible to estimate bandwidth by measuring data sent in a round-trip interval as in TCP Vegas [4]. Recent work suggests that WAN performance is reasonably stable over terms of several minutes <ref> [2] </ref>, but since network conditions may have changed while the connection was idle, the most recently observed rate may no longer hold. To be conservative, we therefore scale this rate downwards by a constant factor. <p> NETBLT explored a rate-based alternative to TCP [5]. Finally, rate-based pacing assumes that the the prior observed rate has some predictive value for current rates (possibly with a conservative scaling factor). Balakrishnan et al. argue that network conditions are relatively stable for periods of several minutes <ref> [2] </ref>. 6 Future Work Our experiments suggest that rate-based pacing can offer NSSR-like performance and SSR-like loss rates for a range of network conditions.
Reference: [3] <author> R. Braden. </author> <title> Requirements for Internet hosts communication layers. RFC 1122, Internet Request For Comments, </title> <month> October </month> <year> 1989. </year>
Reference-contexts: The minimum number of segments to pace should ensure that the receiver can immediately send an ACK. A host-requirements-compliant receiver must send an acknowledgement after two packets <ref> [3] </ref>, so a lower bound of two segments guarantees an immediate ACK. To avoid being worse than NSSR, the current congestion window forms an upper bound on the number of segments sent.
Reference: [4] <author> L. S. Brakmo, S. W. O'Malley, and L. L. Peterson. </author> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> In Proceedings of the ACM SIG-COMM '93, </booktitle> <address> San Francisco, CA, </address> <month> September </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: It is possible to estimate bandwidth by measuring data sent in a round-trip interval as in TCP Vegas <ref> [4] </ref>. Recent work suggests that WAN performance is reasonably stable over terms of several minutes [2], but since network conditions may have changed while the connection was idle, the most recently observed rate may no longer hold. To be conservative, we therefore scale this rate downwards by a constant factor. <p> forcing slow start upon detection of idle time, the behavior is modified 4 to RBP. (Note that RBP is not a substitute for the slow start mechanism; it applies only to the initial phase of data transfer after an idle period.) We use the USC implementation [1] of TCP Vegas <ref> [4] </ref> to estimate transfer rate. Currently a scaling factor of 1 is employed (data is sent at the the full prior rate), since for our current workloads the Vegas algorithms consistently underestimate rate.
Reference: [5] <author> David D. Clark, Mark L. Lambert, and Lixia Zhang. NETBLT: </author> <title> A high througput transport protocol. </title> <booktitle> In Proceedings of the ACM SIGCOMM '87, </booktitle> <pages> pages 353 359. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1987. </year>
Reference-contexts: Hoe also suggested (independent of our work), pacing as a potential alternative start up mechanism for TCP [9]. Rate-limited algorithms have been widely explored in the literature, beginning with leaky bucket [19]. NETBLT explored a rate-based alternative to TCP <ref> [5] </ref>. Finally, rate-based pacing assumes that the the prior observed rate has some predictive value for current rates (possibly with a conservative scaling factor).
Reference: [6] <author> R. Fielding, J. Gettys, J. Mogul, H. Frystyk, and T. Berners-Lee. </author> <title> Hypertext transfer protocol HTTP/1.1. RFC 2068, Internet Request For Comments, </title> <month> January </month> <year> 1997. </year>
Reference-contexts: One application that has influenced protocol refinements is the World Wide Web, which uses HTTP running over TCP. The wide use of the Web has emphasized the need to enhance HTTP performance. Persistent-connection support, recently standardized in HTTP/1.1 <ref> [6] </ref>, allows HTTP to re-use a single fl This research is supported by the Defense Advanced Research Projects Agency (DARPA) through FBI contract #J-FBI-95-185 entitled Large Scale Active Middleware.
Reference: [7] <author> John Heidemann. </author> <title> Performance interactions between P-HTTP and TCP implementations. </title> <journal> ACM Computer Communication Review, </journal> <volume> 27(2):6573, </volume> <month> April </month> <year> 1997. </year>
Reference-contexts: TCP connection across multiple transactions to the same server [14]. However, the improvements of HTTP/1.1 can interact with surrounding layers. In some cases, we have shown that interactions with TCP can substantially degrade performance <ref> [7] </ref>. One of these interactions is the slow-start restart problem, originally identified by Jacobson and Karels [12]. Slow-start restart occurs when bursty data is periodically sent over a TCP connection. TCP depends on ACK-clocking for flow control [11]. Idle periods in the connection cause this clocking mechanism to break down.
Reference: [8] <author> John Heidemann, Katia Obraczka, and Joe Touch. </author> <title> Modeling the performance of HTTP over several transport protocols. To appear, </title> <journal> IEEE/ACM Transactions on Networking, </journal> <month> November </month> <year> 1996. </year>
Reference-contexts: and 9) and 10KB (Figure 10). symmetric routing while some satellite systems use an asy-metric back-channel.) Larger round-trip delay increases all elapsed times, but this increase is disproportionately large for the SSR case, since there are substantially more stalls than the other algorithms and each stall incurs a round-trip-time penalty <ref> [8] </ref>. Under the conditions of our experiment, we conclude that RBP and NSSR behave similarly as delay changes. NSSR, RBP and Vegas have higher losses than SSR, which has very little loss.
Reference: [9] <author> Janey C. Hoe. </author> <title> Start-up dynamics of TCP's congestion control and avoidance schemes. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Hoe's work is complementary to ours; she improves slow-start behavior while we offer an alternative when more is known about network conditions. Hoe also suggested (independent of our work), pacing as a potential alternative start up mechanism for TCP <ref> [9] </ref>. Rate-limited algorithms have been widely explored in the literature, beginning with leaky bucket [19]. NETBLT explored a rate-based alternative to TCP [5]. Finally, rate-based pacing assumes that the the prior observed rate has some predictive value for current rates (possibly with a conservative scaling factor).
Reference: [10] <author> Janey C. Hoe. </author> <title> Improving the start-up behavior of a congestion control scheme for tcp. </title> <booktitle> In Proceedings of the ACM SIGCOMM '96, </booktitle> <pages> pages 270280, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1996. </year> <note> ACM. </note>
Reference-contexts: Several others have also ob served that less (transmission) is more (throughput) in the context of TCP. Nagle showed that delayed transmission of small packets can be advantageous [15]. More recently, Hoe showed that a limiting slow-start can improve performance <ref> [10] </ref>. Hoe's work is complementary to ours; she improves slow-start behavior while we offer an alternative when more is known about network conditions. Hoe also suggested (independent of our work), pacing as a potential alternative start up mechanism for TCP [9].
Reference: [11] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of the SIGCOMM '88, </booktitle> <pages> pages 314329. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: One of these interactions is the slow-start restart problem, originally identified by Jacobson and Karels [12]. Slow-start restart occurs when bursty data is periodically sent over a TCP connection. TCP depends on ACK-clocking for flow control <ref> [11] </ref>. Idle periods in the connection cause this clocking mechanism to break down. When a burst of data is sent after an idle period, TCP may or may not re-initialize congestion parameters (depending on the TCP implementation) by entering slow-start. <p> It builds directly on Jacobson's description of ACK clocking <ref> [11] </ref> and Jacobson and Karel's proposal of slow-start after an idle period [12]. Several others have also ob served that less (transmission) is more (throughput) in the context of TCP. Nagle showed that delayed transmission of small packets can be advantageous [15].
Reference: [12] <author> Van Jacobson and Mike Karels. </author> <title> Congestion avoidance and control. </title> <journal> ACM Computer Communication Review, </journal> <volume> 18(4):314329, </volume> <month> August </month> <year> 1990. </year> <note> Revised version of his SIGCOMM '88 paper with an additional appendix. </note>
Reference-contexts: However, the improvements of HTTP/1.1 can interact with surrounding layers. In some cases, we have shown that interactions with TCP can substantially degrade performance [7]. One of these interactions is the slow-start restart problem, originally identified by Jacobson and Karels <ref> [12] </ref>. Slow-start restart occurs when bursty data is periodically sent over a TCP connection. TCP depends on ACK-clocking for flow control [11]. Idle periods in the connection cause this clocking mechanism to break down. <p> It builds directly on Jacobson's description of ACK clocking [11] and Jacobson and Karel's proposal of slow-start after an idle period <ref> [12] </ref>. Several others have also ob served that less (transmission) is more (throughput) in the context of TCP. Nagle showed that delayed transmission of small packets can be advantageous [15]. More recently, Hoe showed that a limiting slow-start can improve performance [10].
Reference: [13] <author> Steve McCanne, Sally Floyd, and Kevin Fall. </author> <title> Ucb/lbl network simulator ns. </title> <note> at http://www-mash.cs.berkeley.edu/ns/ns.html, 1996. </note>
Reference-contexts: time to data transfered after an idle period and by counting the number of packets dropped due to queue overruns. 4.1 Methodology We implemented RBP/rate in SunOS, but to easily evaluate RBP over a range of network conditions, this section compares simulations of RBP done in version 2.0b17 of ns <ref> [13] </ref>. We compare Reno TCP with and without slow-start restart (labeled reno-ssr and reno-nssr in the graphs), and Vegas TCP without slow-start restart (labeled vegas-nssr) against RBP/rate. The simulations in this paper employ a simplified topology shown in Figure 5. For our simulations there are 10 clients and 1 server.
Reference: [14] <author> Jeffrey C. </author> <title> Mogul. </title> <booktitle> The case for persistent-connection HTTP. In Proceedings of the SIGCOMM '95, </booktitle> <pages> pages 299313. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Government. The authors can be contacted at 4676 Admiralty Way, Marina del Rey, CA, 90292-6695, or by electronic mail to visweswa@isi.edu or johnh@isi.edu. TCP connection across multiple transactions to the same server <ref> [14] </ref>. However, the improvements of HTTP/1.1 can interact with surrounding layers. In some cases, we have shown that interactions with TCP can substantially degrade performance [7]. One of these interactions is the slow-start restart problem, originally identified by Jacobson and Karels [12]. <p> If slow-start is initiated, the sender is conservative to the network but incurs delay similar to starting up a new connection (although without the three-way handshake), reducing the benefits of P-HTTP <ref> [14] </ref>. If the sender does not slow-start then much more data can be quickly sent, but if this burst of data is too large, it can can overrun queues at intermediate routers, leading to packet loss and possibly lower overall performance.
Reference: [15] <author> J. Nagle. </author> <title> Congestion control in IP/TCP internetworks. RFC 896, Internet Request For Comments, </title> <month> January </month> <year> 1984. </year>
Reference-contexts: Several others have also ob served that less (transmission) is more (throughput) in the context of TCP. Nagle showed that delayed transmission of small packets can be advantageous <ref> [15] </ref>. More recently, Hoe showed that a limiting slow-start can improve performance [10]. Hoe's work is complementary to ours; she improves slow-start behavior while we offer an alternative when more is known about network conditions.
Reference: [16] <author> Vern Paxson. </author> <title> Automated packet trace analysis of tcp implementations. </title> <booktitle> In Proceedings of the ACM SIG-COMM '97. ACM, </booktitle> <year> 1997. </year>
Reference-contexts: When information that the window has been consumed reaches the sender, a full window of data can be sent immediately. Improper TCP receiver implementations can also result in lack of ACK clocking (for example, Solaris 2.5 as described by Paxson <ref> [16] </ref>). Packet loss in the network can also derail ACK clocking. A single segment early in the window may be lost but the full window successfully received. When the single lost segment is retransmitted and received, the window will jump forward.
Reference: [17] <author> W. Richard Stevens. </author> <title> Tcp slow start, congestion avoidance, fast retransmit, and fast recovery algorithms. Work in progress (Internet draft draft-stevens-tcpca-spec-01.txt), </title> <month> March </month> <year> 1996. </year>
Reference-contexts: A single segment early in the window may be lost but the full window successfully received. When the single lost segment is retransmitted and received, the window will jump forward. Fast retransmit is one approach to restart the ACK clock in this case <ref> [17] </ref>; pacing could also be used. TCP-over-satellite is another case where pacing may be useful. Because satellites have a large pipe to fill, slow start is particularly expensive.
Reference: [18] <author> Joe Touch. </author> <title> TCP control block interdependence. RFC 2140, Internet Request For Comments, </title> <month> April </month> <year> 1997. </year>
Reference-contexts: We would like to validate our simulations against our implementation of RBP/rate. Finally, RBP applies old estimates of network bandwidth to current conditions. We are experimenting with more general approaches to caching and sharing network conditions across both time (sequential connections) and space (concurrent connections) <ref> [18] </ref>. 6.2 Deployment issues Several aspects of RBP simplify deployment. RBP requires only sender-side modifications to TCP. This makes it particularly beneficial for HTTP/1.1-based web servers, thus providing motivation for web-server maintainers to incrementally deploy RBP. Our current implementation of RBP/rate makes use of 7 with 10 clients per simulation.
Reference: [19] <author> Jonathan S. Turner. </author> <title> New directions in communications (or which way to the information age?). </title> <journal> IEEE Communications Magazine, </journal> <volume> 24(4):814, </volume> <month> Octo-ber </month> <year> 1986. </year> <title> Acknowledgments We would like to thank Ted Faber and Joe Touch for comments about the paper. Software Availability Our implementation of RBP/rate for SunOS-4.1.3 is currently available at the LSAM web pages at hhttp://www.isi.edu/lsam/i. We plan to make an RBP/cwnd implementation available shortly. Simulated versions of RBP/cwnd and RBP/rate are available in the 2.0b17 release of ns at hhttp://www-mash.cs.berkeley.edu/ns/i. </title> <type> 10 </type>
Reference-contexts: Hoe also suggested (independent of our work), pacing as a potential alternative start up mechanism for TCP [9]. Rate-limited algorithms have been widely explored in the literature, beginning with leaky bucket <ref> [19] </ref>. NETBLT explored a rate-based alternative to TCP [5]. Finally, rate-based pacing assumes that the the prior observed rate has some predictive value for current rates (possibly with a conservative scaling factor).
References-found: 19

