URL: ftp://ftp.fzi.de/pub/OBST/current/gzip/psfiles/OBST-overview.ps.gz
Refering-URL: http://www.fzi.de/divisions/dbs/projects/OBST.html
Root-URL: http://www.fzi.de
Title: STONE A Structured and Open Environment  
Abstract: Title: OBST An Overview Authors: Eduardo Casais, Michael Ranft, Bernhard Schiefer, Dietmar Theobald, Walter Zimmer Date: June 5, 1992 Resultnumber: FZI.039.1 Status: finished Distribution: public Address: Forschungszentrum Informatik (FZI) Haid-und-Neu-Str. 10 - 14 D-7500 Karlsruhe 1 Germany 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Lewerentz, E. Casais, "STONE: </author> <title> A Short Overview," </title> <type> Tech. Rep. </type> <institution> FZI.040.1, Forschungs-zentrum Informatik (FZI), Karlsruhe, Germany, </institution> <month> May </month> <year> 1992. </year>
Reference: [2] <author> R. Gupta, E. Horowitz, ed., </author> <title> Object-Oriented Databases with Applications to CASE, Networks, and VLSI CAD. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Besides documents, coarser and finer grained entities are of course needed for grouping documents or for representing their internal structure. In any case, and as noted for design environments in general, a semantically rich data model is required <ref> [2] </ref>. Software engineering is a cooperative design process. As a consequence, the underlying system should support an appropriate cooperation model, notably by providing flexible concurrency control mechanisms and transaction concepts well-suited to design activities [3].
Reference: [3] <author> N. S. Barghouti, G. E. Kaiser, </author> <title> "Concurrency Control in Advanced Database Applications," </title> <journal> Computing Surveys, </journal> <volume> vol. 23, </volume> <pages> pp. 269-317, </pages> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Software engineering is a cooperative design process. As a consequence, the underlying system should support an appropriate cooperation model, notably by providing flexible concurrency control mechanisms and transaction concepts well-suited to design activities <ref> [3] </ref>. On the other hand, support for elaborate access control mechanisms is not considered a primary issue in the given application domain. Teaching and training software should be flexible enough to make the integration of new ideas, research results or tools written in different programming languages possible without undue effort.
Reference: [4] <author> J. Uhl, D. Theobald, B. Schiefer, E. Sekerinski, S. Rehm, M. Ranft, W. Zimmer, </author> <title> "The Object Management System of STONE OBST Release 3.2," </title> <type> Tech. Rep. </type> <institution> FZI.027.1, Forschungszentrum Informatik (FZI), Karlsruhe, Germany, </institution> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: In OBST, this name clash has to be resolved by redefinition (see Section 2.3) in the derived class. A name conflict does not occur if the method or component stems from a common parent class and in some other special cases as well <ref> [4] </ref>. class Executable : File class TextFile : File -- --- public: public: sosInt execute (); sosString contents; class ShellScript : Executable, TextFile --- public: ShellType type; enum ShellType (SH, CSH, BSH, BASH); Example 2 Class ShellScript inherits simultaneously the properties of classes TextFile and Executable.
Reference: [5] <author> R. Johnson, B. Foote, </author> <title> "Designing Reusable Classes," </title> <journal> Journal of Object-Oriented Programming, </journal> <pages> pp. 22-35, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Schemas serve to group into coherent units related type definitions which are developed or used together such as frameworks in object-oriented applications <ref> [5] </ref>. <p> An auxiliary class sosCursor provides means for scanning aggregations sequentially in forward and backward directions. Cursors are especially useful for bags, sets, lists, and mappings, but they may also be used with arrays; agg is therefore really a framework for dealing with aggregations in a unified way <ref> [5] </ref>. Besides knl and agg, the OBST environment provides a meta schema, mta, which models OBST types and their properties as instances of OBST classes.
Reference: [6] <author> A. Bjornerstedt, S. Britts, "AVANCE: </author> <title> An Object Management System," </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 23, </volume> <pages> pp. 206-221, </pages> <month> Nov. </month> <year> 1988. </year> <booktitle> Proceedings of the OOPSLA'88 Conference, </booktitle> <address> San Diego, CA, </address> <month> 25-30 September </month> <year> 1988. </year>
Reference-contexts: modelling facility, programs may rely on its capabilities to make any instance persistent, to synchronize access to these instances, and to handle recovery. 3.2 Making Objects Persistent All instances from OBST classes are potentially persistent: contrarily to other systems, classes do not need to inherit persistence properties from special-purpose ancestors <ref> [6] </ref>; nor do normally transient objects need to be assigned to persistent variables or to be placed into persistent sets [7], [8]. 10 The class sosContainer is a major component for the management of persistence and it is important for synchronization and recovery purposes as well (see Section 3.4).
Reference: [7] <editor> O. Deux et al., </editor> <title> "The O 2 System," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, </volume> <pages> pp. 34-48, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: to handle recovery. 3.2 Making Objects Persistent All instances from OBST classes are potentially persistent: contrarily to other systems, classes do not need to inherit persistence properties from special-purpose ancestors [6]; nor do normally transient objects need to be assigned to persistent variables or to be placed into persistent sets <ref> [7] </ref>, [8]. 10 The class sosContainer is a major component for the management of persistence and it is important for synchronization and recovery purposes as well (see Section 3.4). All objects in the system are affiliated with exactly one instance of this class, which is determined at object creation time.
Reference: [8] <author> Ch. Lambs, G. Landis, J. Orenstein, D. Weinreb, </author> <title> "The ObjectStore Database System," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, </volume> <pages> pp. 50-63, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: handle recovery. 3.2 Making Objects Persistent All instances from OBST classes are potentially persistent: contrarily to other systems, classes do not need to inherit persistence properties from special-purpose ancestors [6]; nor do normally transient objects need to be assigned to persistent variables or to be placed into persistent sets [7], <ref> [8] </ref>. 10 The class sosContainer is a major component for the management of persistence and it is important for synchronization and recovery purposes as well (see Section 3.4). All objects in the system are affiliated with exactly one instance of this class, which is determined at object creation time. <p> These last two aspects have been omitted in the diagram in order to make the overall system structure more understandable. 5.2 Interfaces to Programming Languages In contrast to several recent developments in the area of persistent object-oriented systems <ref> [8] </ref>, OBST was not implemented as an enhancement to some existing programming language. The embedding into a host language is done by generating appropriate interfaces and code for this language from given OBST schemas.
Reference: [9] <author> J. Banerjee, W. Kim, H.-J. Kim, H. F. Korth, </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases," </title> <booktitle> SIGMOD Record, </booktitle> <volume> vol. 16, </volume> <pages> pp. 311-322, </pages> <month> Dec. </month> <year> 1987. </year> <booktitle> Proceedings of the International Conference on the Management of Data, </booktitle> <address> San Francisco, </address> <month> 27-29 May </month> <year> 1987. </year> <editor> [10]R. G. G. Catell (ed.), </editor> <title> "Special Section on Next-Generation Database Systems," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, </volume> <month> Oct. </month> <year> 1991. </year> <note> [11]M. </note> <author> A. Ellis, B. Stroustrup, </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <note> [12]B. </note> <author> Schiefer, D. Theobald, J. Uhl, </author> <title> "User's Guide OBST Release 3.2," </title> <type> Tech. Rep. </type> <institution> FZI.032.1, Forschungszentrum Informatik (FZI), Karlsruhe, Germany, </institution> <month> Mar. </month> <year> 1992. </year> <month> 24 </month>
Reference-contexts: An interactive tool making use of views for managing schema evolution is also planned; this tool will include functions such as class modifications primitives analogous to those proposed for the ORION system <ref> [9] </ref> Design activities, and software development in particular, depart significantly from traditional database applications in the areas of access control and concurrency. Future 22 releases of OBST will include improved mechanisms for transaction management notably long-lived transactions as well as a triggering mechanism for supporting cooperative work.
References-found: 9

