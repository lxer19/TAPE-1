URL: http://www.ai.mit.edu/projects/transit/transit-notes/tn128.ps.Z
Refering-URL: http://www.ai.mit.edu/projects/transit/dpga_prototype_documents.html
Root-URL: 
Title: Transit Note #128 Entropy, Counting, and Programmable Interconnect  
Author: Andre DeHon 
Date: September, 1995 Last Updated: November 30, 1995  
Note: Original Issue:  Acknowledgments: This research is supported by the Advanced Research Projects Agency of the Department of Defense under Rome Labs contract number F30602-94-C-0252.  
Abstract: Conventional reconfigurable components have substantially more interconnect configuration bits than they strictly need. Using counting arguments we can establish loose bounds on the number of programmable bits actually required to describe an interconnect. We apply these bounds in crude form to some existing devices, demonstrating the large redundancy in their programmable bit streams. In this process we review and demonstrate basic An abbreviated version of this paper appears in Proceedings of the 1996 International Symposium on Field Programmable Gate Arrays. Copyright c fl1996 by the Association for Computing Machinery, Inc. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that new copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request Permissions from Publications Dept, ACM Inc., Fax +1 (212) 869-0481, or &lt;permissions@acm.org&gt;. 
Abstract-found: 1
Intro-found: 1
Reference: [Alt94] <institution> Altera Corporation, </institution> <address> 2610 Orchard Parkway, San Jose, CA 95134-2020. </address> <note> FLEX 8000 Handbook, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: and configuration bits, remains an open issue. 7 Some Conventional Architectures 16 Transit Note #128 November 30, 1995 Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K [Xil94] Xilinx xc5210 324 CLBs 196 IOs 160K [Xil95] Altera EPF81188 1008 LEs 184 IOEs 192K [Alt95] <ref> [Alt94] </ref> Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4 + 2 3 = 40 Altera 8K LE 4 1 1 1 2 4 = 16 Reference
Reference: [Alt95] <institution> Altera Corporation, </institution> <address> 2610 Orchard Parkway, San Jose, CA 95134-2020. </address> <publisher> Data Book, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: switches, and configuration bits, remains an open issue. 7 Some Conventional Architectures 16 Transit Note #128 November 30, 1995 Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K [Xil94] Xilinx xc5210 324 CLBs 196 IOs 160K [Xil95] Altera EPF81188 1008 LEs 184 IOEs 192K <ref> [Alt95] </ref> [Alt94] Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4 + 2 3 = 40 Altera 8K LE 4 1 1 1 2 4 = 16
Reference: [AS93] <author> Peter Athanas and Harvey F. Silverman. </author> <title> Processor Reconfiguration Through Instruction-Set Metamorphosis. </title> <journal> IEEE Computer, </journal> <volume> 26(3) </volume> <pages> 11-18, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: In accordance with our intuition, sharing a programmable device for multiple, independent designs requires less functionality or flexibility out of the interconnect than realizing one large design on the device. For example, a programmable device used 13 Transit Note #128 November 30, 1995 for processor acceleration (e.g. PRISM <ref> [AS93] </ref>, DPGA-coupled processor [DeH94]) may hold several, independent, acceleration functions simultaneously for ready access when needed. Additionally, programmable logic devices often serve as "catch-all" or "glue" logic collecting many necessary functions into a single component package.
Reference: [BCE + 94] <author> Jeremy Brown, Derrick Chen, Ian Eslick, Edward Tau, and Andre De-Hon. </author> <title> A 1 CMOS Dynamically Programmable Gate Array. </title> <type> Transit Note 112, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> November </month> <year> 1994. </year> <note> Anonymous FTP transit.ai.mit.edu:transit-notes/tn112.ps.Z. </note>
Reference-contexts: These tools can be useful for first order analysis of programmable interconnect designs. 10 See Also: : : * Programmable Interconnect Notes [DeH95] * DPGA Prototype [TEC + 95b] <ref> [BCE + 94] </ref> 21 Transit Note #128 November 30, 1995
Reference: [BFRV92] <author> Stephen D. Brown, Robert J. Francis, Jonathan Rose, and Zvonko G. Vranesic. </author> <title> Field-Programmable Gate Arrays. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> 101 Philip Drive, Assinippi Park, Norwell, Massachusetts, 02061 USA, </address> <year> 1992. </year>
Reference-contexts: It is worthwhile to note that interconnect "flexibility" as used here can be applied to any interconnection network or family of graphs. As such it is very different from the interconnect flexibility defined in [RB91] <ref> [BFRV92] </ref> which is used to describe the level of population of switches in a particular interconnect family. Interconnection Patterns It is important that we look at the interconnection patterns as a whole to understand which patterns are functionally identical.
Reference: [DeH94] <author> Andre DeHon. </author> <title> DPGA-Coupled Microprocessors: </title> <booktitle> Commodity ICs for the Early 21st Century. In Proceedings of the IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <year> 1994. </year> <note> Anonymous FTP transit.ai.mit.edu:papers/dpga-proc-fccm94.ps.Z. </note>
Reference-contexts: For example, a programmable device used 13 Transit Note #128 November 30, 1995 for processor acceleration (e.g. PRISM [AS93], DPGA-coupled processor <ref> [DeH94] </ref>) may hold several, independent, acceleration functions simultaneously for ready access when needed. Additionally, programmable logic devices often serve as "catch-all" or "glue" logic collecting many necessary functions into a single component package.
Reference: [DeH95] <author> Andre DeHon. </author> <title> Notes on Programmable Interconnect. </title> <type> Transit Note 121, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> February </month> <year> 1995. </year> <note> Anonymous FTP transit.ai.mit.edu:transit-notes/tn121.ps.Z. </note>
Reference-contexts: We demonstrated simple building blocks and metrics for gauging the flexibility of an interconnect and apprising the level of redundancy in a particular interconnect description. These tools can be useful for first order analysis of programmable interconnect designs. 10 See Also: : : * Programmable Interconnect Notes <ref> [DeH95] </ref> * DPGA Prototype [TEC + 95b] [BCE + 94] 21 Transit Note #128 November 30, 1995
Reference: [GHK + 91] <author> Maya Gokhale, William Holmes, Andrew Kopser, Sara Lucas, Ronald Minnich, Douglas Sweely, and Daniel Lopresti. </author> <title> Building and Using a Highly Programmable Logic Array. </title> <journal> IEEE Computer, </journal> <volume> 24(1) </volume> <pages> 81-89, </pages> <month> Jan-uary </month> <year> 1991. </year>
Reference-contexts: The interconnections required between functions in typical systolic arrays are much smaller than the interconnections within each function block. This match between device limitations and the stylization associated with systolic arrays is one of the reasons for the popularity of systolic designs for FPGAs (e.g. SPLASH <ref> [GHK + 91] </ref>, systolic array review [JHS93]). 6 Placement Freedom Once we identify a level of desired interconnect flexibility, it is not necessary for the physical interconnection network to solely provide that flexibility.
Reference: [GNS + 94] <author> Richard Guo, Hung Nguyen, Adi Srinivasan, Quaid Nasir, Hong Cai, Steve Law, and Amar Mohsen. </author> <title> A Novel Reprogrammable Interconnect Architecture with Decoded RAM Storage. </title> <booktitle> In Proceedings of the IEEE 1994 Custom Integrated Circuits Conference, </booktitle> <pages> pages 193-196. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Since one input may also be used in a control capacity, the reduction is slightly lower for the Altera 8K part. 8 Impact of Configuration Density Area The total, on-chip configuration memory can be one of the major contributors to chip area (e.g. <ref> [GNS + 94] </ref>). As such, redundancy in the configuration space may cost additional die area. The effect, however, is technology and design point dependent. When the design is active silicon area limited, the configuration size can play a large factor in determining design size.
Reference: [JHS93] <author> Kurtis T. Johnson, A. R. Hurson, and Behrooz Shirazi. </author> <title> General-Purpose Systolic Arrays. </title> <journal> IEEE Computer, </journal> <volume> 26(11) </volume> <pages> 20-31, </pages> <month> November </month> <year> 1993. </year> <note> 22 Transit Note #128 November 30, </note> <year> 1995 </year>
Reference-contexts: This match between device limitations and the stylization associated with systolic arrays is one of the reasons for the popularity of systolic designs for FPGAs (e.g. SPLASH [GHK + 91], systolic array review <ref> [JHS93] </ref>). 6 Placement Freedom Once we identify a level of desired interconnect flexibility, it is not necessary for the physical interconnection network to solely provide that flexibility. In programmable devices, we also have freedom in where we place functions and results within the interconnection network.
Reference: [JOSV95] <author> Chris Jones, John Oswald, Brian Schoner, and John Villasenor. </author> <title> Issues in Wireless Video Coding using Run-time-reconfigurable FPGAs. </title> <editor> In Peter Athanas and Ken Pocek, editors, </editor> <booktitle> Proceedings of the IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <address> Los Alamitos, California, April 1995. </address> <publisher> IEEE Computer Society, IEEE Computer Society Press. </publisher>
Reference-contexts: As we have seen in Section 7, contemporary reconfigurable devices have very large configuration bit streams. Due to physical i/o limitations, changing bit streams is an expensive operation. In cases of heavy device reuse this reload time can have a significant effect on system performance (e.g. <ref> [JOSV95] </ref> [WH95]). Of course, the real problem associated with reconfiguration time is the i/o bandwidth limitation. It is certainly not necessary for the bits stored in the configuration memories to be identical to the off-chip interconnect specification or the specification transmitted across the chip boundary.
Reference: [RB91] <author> Jonathan Rose and Stephen Brown. </author> <title> Flexibility of Interconnection Structures for Field-Programmable Gate Arrays. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 26(3) </volume> <pages> 277-282, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: It is worthwhile to note that interconnect "flexibility" as used here can be applied to any interconnection network or family of graphs. As such it is very different from the interconnect flexibility defined in <ref> [RB91] </ref> [BFRV92] which is used to describe the level of population of switches in a particular interconnect family. Interconnection Patterns It is important that we look at the interconnection patterns as a whole to understand which patterns are functionally identical.
Reference: [TEC + 95a] <author> Edward Tau, Ian Eslick, Derrick Chen, Jeremy Brown, and Andre DeHon. </author> <title> A First Generation DPGA Implementation. </title> <booktitle> In Proceedings of the Third Canadian Workshop on Field-Programmable Devices, </booktitle> <pages> pages 138-143, </pages> <month> May </month> <year> 1995. </year> <note> Anonymous FTP transit.ai.mit.edu:papers/dpga-proto-fpd95.ps.Z. </note>
Reference-contexts: We discuss the implications and impact of this redundancy in more detail in Section 8 before concluding in Section 9. 2 Motivational Example Consider a case where we wish to drive any of n sources onto each of m sinks. In our DPGA prototype <ref> [TEC + 95a] </ref>, for example, we needed to drive the 4 inputs to 3 Transit Note #128 November 30, 1995 the 4-LUT from the 15 lines which physically converged upon the LUT cell (m = 4, n = 15, See Figure 1). <p> In these cases the chip needs to hold many configurations worth of memory simultaneously. If one is not careful about the density of the interconnect configuration encoding, the configuration memory stores can dominate chip area. In the aforementioned DPGA Prototype <ref> [TEC + 95a] </ref>, for example, even with four on-chip contexts, wiring and switching accounted for over half of the die area. Net 19 Transit Note #128 November 30, 1995 work configuration memory made up about one fourth of the area.
Reference: [TEC + 95b] <author> Edward Tau, Ian Eslick, Derrick Chen, Jeremy Brown, and Andre De-Hon. </author> <title> A First Generation DPGA Implementation. </title> <type> Transit Note 114, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> January </month> <year> 1995. </year> <note> Anonymous FTP transit.ai.mit.edu:transit-notes/tn114.ps.Z. </note>
Reference-contexts: These tools can be useful for first order analysis of programmable interconnect designs. 10 See Also: : : * Programmable Interconnect Notes [DeH95] * DPGA Prototype <ref> [TEC + 95b] </ref> [BCE + 94] 21 Transit Note #128 November 30, 1995
Reference: [WH95] <author> Michael J. Wirthlin and Brad L. Hutchings. </author> <title> A Dynamic Instruction Set Computer. </title> <editor> In Peter Athanas and Ken Pocek, editors, </editor> <booktitle> Proceedings of the IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <address> Los Alamitos, California, April 1995. </address> <publisher> IEEE Computer Society, IEEE Computer Society Press. </publisher>
Reference-contexts: As we have seen in Section 7, contemporary reconfigurable devices have very large configuration bit streams. Due to physical i/o limitations, changing bit streams is an expensive operation. In cases of heavy device reuse this reload time can have a significant effect on system performance (e.g. [JOSV95] <ref> [WH95] </ref>). Of course, the real problem associated with reconfiguration time is the i/o bandwidth limitation. It is certainly not necessary for the bits stored in the configuration memories to be identical to the off-chip interconnect specification or the specification transmitted across the chip boundary.
Reference: [Xil94] <author> Xilinx, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, CA 95124. </address> <booktitle> The Programmable Logic Data Book, </booktitle> <year> 1994. </year>
Reference-contexts: In general, the extent to which placement can reduce the demand for interconnect resources, including wires, switches, and configuration bits, remains an open issue. 7 Some Conventional Architectures 16 Transit Note #128 November 30, 1995 Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K <ref> [Xil94] </ref> Xilinx xc5210 324 CLBs 196 IOs 160K [Xil95] Altera EPF81188 1008 LEs 184 IOEs 192K [Alt95] [Alt94] Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4
Reference: [Xil95] <author> Xilinx, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, CA 95124. </address> <note> XC5200 Logic Cell array Family Technical Data, preliminary (v1.0) edition, April 1995. 23 Transit Note #128 November 30, </note> <year> 1995 </year>
Reference-contexts: reduce the demand for interconnect resources, including wires, switches, and configuration bits, remains an open issue. 7 Some Conventional Architectures 16 Transit Note #128 November 30, 1995 Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K [Xil94] Xilinx xc5210 324 CLBs 196 IOs 160K <ref> [Xil95] </ref> Altera EPF81188 1008 LEs 184 IOEs 192K [Alt95] [Alt94] Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4 + 2 3 = 40 Altera 8K LE
References-found: 17

