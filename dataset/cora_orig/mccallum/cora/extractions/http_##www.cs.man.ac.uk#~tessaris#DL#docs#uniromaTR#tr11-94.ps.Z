URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/uniromaTR/tr11-94.ps.Z
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: fdegiacom,lenzerinig@assi.dis.uniroma1.it  
Title: Converse, Local Determinism, and Graded Nondeterminism in Propositional Dynamic Logics  
Author: Giuseppe De Giacomo Maurizio Lenzerini Rapporto Tecnico n. - 
Address: via Salaria 113, I-00198 Roma, Italy  
Affiliation: Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza",  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Ben-Ari, Halpern J. Y., and Pnueli A. </author> <title> Deterministic propositional dynamic logic: Finite models, complexity, and completeness. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25 </volume> <pages> 402-417, </pages> <year> 1982. </year>
Reference-contexts: Finally, the construction above can be easily modified/restricted to encode Deterministic PDL formulae in PDL. In fact, the construction used in <ref> [1] </ref> to study satisfiability of Deterministic PDL, is similar in the spirit, though not in the development, to such a restricted version of the our construction. 4 Graded nondeterminism The second extension of L, called L gn , is obtained from L by adding constructs for graded nondeterminism of the form
Reference: [2] <author> G. De Giacomo and M. Lenzerini. </author> <title> Boosting the correspondence between description logics and propositional dynamic logics. </title> <booktitle> Proceedings of the 12th National Conference on Artificial Intelligence (AAAI-94). To appear, </booktitle> <year> 1994. </year>
Reference: [3] <author> G. De Giacomo and M. Lenzerini. </author> <title> Description logics with inverse roles, functional restrictions, and n-ary relations. </title> <booktitle> In Proceedings of the 4th European Workshop on Logics in AI (JELIA-94). To appear, </booktitle> <year> 1994. </year>
Reference-contexts: 2 R r n where s R is a new state and each r i is an atomic program which is deterministic wrt the state s R and assign to such relations functionality/cardinality constraints - e.g., there are at most, say, three tuples whose first component is the same (see <ref> [3] </ref>). Although the full impact of these possibility on reasoning about programs needs still to be investigated, we believe that being able to specify n-ary relations is important at least for the use of these logics in Knowledge Representation.
Reference: [4] <author> M. Fattorosi-Barnaba and F. De Caro. </author> <title> Graded modalities. </title> <journal> Studia Logica, </journal> <volume> 44 </volume> <pages> 197-221, </pages> <year> 1985. </year>
Reference-contexts: Finally it is worth mentioning that our constructs for graded nondeterminism turn out to be strongly related to graded modalities in modal logic, which have been studied in <ref> [5, 4, 15] </ref>. The constructs introduced above can be used to model many interesting properties of actual computations. For example, suppose we want to check/impose some facts about a state s 0 1 preceding the current state s, in a given computation.
Reference: [5] <author> K. </author> <title> Fine. In so many possible worlds. </title> <journal> Notre Dame Journal of Formal Logic, </journal> <volume> 13(4) </volume> <pages> 516-520, </pages> <year> 1972. </year>
Reference-contexts: Finally it is worth mentioning that our constructs for graded nondeterminism turn out to be strongly related to graded modalities in modal logic, which have been studied in <ref> [5, 4, 15] </ref>. The constructs introduced above can be used to model many interesting properties of actual computations. For example, suppose we want to check/impose some facts about a state s 0 1 preceding the current state s, in a given computation.
Reference: [6] <author> N. J. Fisher and R. E. Ladner. </author> <title> Propositional dynamic logic of regular programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18 </volume> <pages> 194-211, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction Propositional Dynamic Logic (PDL) was introduced in <ref> [6] </ref> as a formalism to describe the properties of states reached by programs during their execution, and to model the evolution of the computation process (see [8, 7, 10] for surveys on PDL's, see also [14] for a somewhat different account).
Reference: [7] <author> D. Harel. </author> <title> Dynamic logic. </title> <editor> In D. M. Gabbay and F. Guenthner, editors, </editor> <booktitle> Handbook of Philosophical Logic, </booktitle> <pages> pages 497-603. </pages> <address> D. </address> <publisher> Reidel Publishing Company, Oxford, </publisher> <year> 1984. </year>
Reference-contexts: 1 Introduction Propositional Dynamic Logic (PDL) was introduced in [6] as a formalism to describe the properties of states reached by programs during their execution, and to model the evolution of the computation process (see <ref> [8, 7, 10] </ref> for surveys on PDL's, see also [14] for a somewhat different account).
Reference: [8] <author> D. Kozen and J. Tiuryn. </author> <title> Logics of programs. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 790-840. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Propositional Dynamic Logic (PDL) was introduced in [6] as a formalism to describe the properties of states reached by programs during their execution, and to model the evolution of the computation process (see <ref> [8, 7, 10] </ref> for surveys on PDL's, see also [14] for a somewhat different account).
Reference: [9] <author> R. Parikh. </author> <title> The completeness of propositional dynamic logic. </title> <booktitle> In Proceedings of the 7th Symposium on the Mathematical Foundations of Computer Science, number 64 in Lecture Notes in Computer Science, </booktitle> <pages> pages 403-415. </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: for proving the result is to show that from any formula expressed in the enhanced logics we can obtain in polynomial time a Converse PDL formula that is satisfiable if and only if the original formula is so, thus proving that the well known decision procedures for Converse PDL (e.g. <ref> [11, 12, 9, 16] </ref>) can be used as "reasoning 2 engine" for the enhanced logics. The rest of the paper is organized as follows. In Section 2, we recall the basic notions regarding Converse PDL.
Reference: [10] <author> R. Parikh. </author> <title> Propositional dynamic logic of programs: A survey. </title> <booktitle> In Proceedings of the 1st Workshop on Logic of Programs, number 125 in Lecture Notes in Computer Science, </booktitle> <pages> pages 102-144. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: 1 Introduction Propositional Dynamic Logic (PDL) was introduced in [6] as a formalism to describe the properties of states reached by programs during their execution, and to model the evolution of the computation process (see <ref> [8, 7, 10] </ref> for surveys on PDL's, see also [14] for a somewhat different account). <p> On this simpler logic, we can work with deterministic structures - i.e., all atomic programs are (globally) deterministic instead of non-deterministic ones. In fact it is well-known (see <ref> [10] </ref>) that if we replace each atomic program P in a formula by F P ; (F 0 P ) fl where F P and F 0 P are new atomic programs that are (globally) deterministic, then, calling the resulting formula 0 , we have that is satisfiable iff 0 is
Reference: [11] <author> V. R. Pratt. </author> <title> Models of program logics. </title> <booktitle> In Proceedings of the 20th IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 115-122, </pages> <year> 1979. </year>
Reference-contexts: for proving the result is to show that from any formula expressed in the enhanced logics we can obtain in polynomial time a Converse PDL formula that is satisfiable if and only if the original formula is so, thus proving that the well known decision procedures for Converse PDL (e.g. <ref> [11, 12, 9, 16] </ref>) can be used as "reasoning 2 engine" for the enhanced logics. The rest of the paper is organized as follows. In Section 2, we recall the basic notions regarding Converse PDL.
Reference: [12] <author> V. R. Pratt. </author> <title> A near-optimal method for reasoning about action. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 20 </volume> <pages> 231-255, </pages> <year> 1980. </year>
Reference-contexts: for proving the result is to show that from any formula expressed in the enhanced logics we can obtain in polynomial time a Converse PDL formula that is satisfiable if and only if the original formula is so, thus proving that the well known decision procedures for Converse PDL (e.g. <ref> [11, 12, 9, 16] </ref>) can be used as "reasoning 2 engine" for the enhanced logics. The rest of the paper is organized as follows. In Section 2, we recall the basic notions regarding Converse PDL.
Reference: [13] <author> K. Schild. </author> <title> A correspondence theory for terminological logics: Preliminary report. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 466-471, </pages> <year> 1991. </year> <month> 14 </month>
Reference-contexts: Furthermore, the availability of the proposed constructs is crucial to make PDL's exploitable as the basic reasoning paradigm of certain kind of Knowledge Representation Systems. Let us explain this point in some details. Several recent papers (starting from <ref> [13] </ref>) point out that there is a strong correspondence between Propositional Dynamic Logic and its variants, and a family of Logic-based Knowledge Representation Languages, called Terminological Languages (Description Logics).
Reference: [14] <author> C. Stirling. </author> <title> Modal and temporal logic. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <pages> pages 477-563. </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Propositional Dynamic Logic (PDL) was introduced in [6] as a formalism to describe the properties of states reached by programs during their execution, and to model the evolution of the computation process (see [8, 7, 10] for surveys on PDL's, see also <ref> [14] </ref> for a somewhat different account).
Reference: [15] <author> W. van der Hoek. </author> <title> On the semantics of graded modalities. </title> <journal> Journal of Applied Non-Classical Logics, </journal> <volume> 2(1) </volume> <pages> 81-123, </pages> <year> 1992. </year>
Reference-contexts: Finally it is worth mentioning that our constructs for graded nondeterminism turn out to be strongly related to graded modalities in modal logic, which have been studied in <ref> [5, 4, 15] </ref>. The constructs introduced above can be used to model many interesting properties of actual computations. For example, suppose we want to check/impose some facts about a state s 0 1 preceding the current state s, in a given computation.
Reference: [16] <author> M. Vardi and P. Wolper. </author> <title> Automata-theoretic techniques for modal logics of programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 32 </volume> <pages> 183-221, </pages> <year> 1986. </year> <month> 15 </month>
Reference-contexts: In this paper we concentrate our attention on an extension of PDL, called Converse PDL, obtained from the basic logic by adding the converse program operator, where the converse of a program P is the program whose running is obtained by running P backwards. Converse PDL is studied in <ref> [16] </ref>, in the case where all atomic programs are assumed to be deterministic - i.e., representing partial functions over a set of states. This special case of the logic is denominated Converse Deterministic PDL. <p> This special case of the logic is denominated Converse Deterministic PDL. Note that assuming the atomic programs to be deterministic is not a limitation, but rather an improvement of the logic, because nondeterministic programs can be simulated by composing deterministic programs. In <ref> [16] </ref> a decision procedure for Converse Deterministic PDL is presented running in deterministic exponential time. In this paper, we propose two extensions of Converse Deterministic PDL which allows for more sophisticated notions of determinism, and investigate their decidability and computational complexity. <p> for proving the result is to show that from any formula expressed in the enhanced logics we can obtain in polynomial time a Converse PDL formula that is satisfiable if and only if the original formula is so, thus proving that the well known decision procedures for Converse PDL (e.g. <ref> [11, 12, 9, 16] </ref>) can be used as "reasoning 2 engine" for the enhanced logics. The rest of the paper is organized as follows. In Section 2, we recall the basic notions regarding Converse PDL. <p> It is easy to see that this possibility allows one to impose the so-called global determinism too - i.e., that a given atomic program, or the converse of an atomic program, is (globally) deterministic. Therefore, L ld subsumes the logic studied in <ref> [16] </ref>, called Converse Deterministic PDL, where atomic programs, not their converse, are (globally) deterministic. The decidability and the complexity of satisfiability in L ld are to be established yet. We establish them below by showing an encoding of L ld -formulae in L. <p> This fact gives us procedures to decide satisfiability 4 This formula is a variant of the Converse Deterministic PDL formula A ^ [(P ) fl ] &lt; P &gt; :A (see for example <ref> [16] </ref>). of Converse Deterministic PDL formulae that do not rely on techniques based on automata on infinite structures as those in [16]. Finally, the construction above can be easily modified/restricted to encode Deterministic PDL formulae in PDL. <p> procedures to decide satisfiability 4 This formula is a variant of the Converse Deterministic PDL formula A ^ [(P ) fl ] &lt; P &gt; :A (see for example <ref> [16] </ref>). of Converse Deterministic PDL formulae that do not rely on techniques based on automata on infinite structures as those in [16]. Finally, the construction above can be easily modified/restricted to encode Deterministic PDL formulae in PDL.
References-found: 16

