URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-007.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Anwar. </author> <title> Supporting complex events and rules in an oodbms: A seamless approach. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: This provides great end user extensibility. Snoop is model independent and is intended to be so; we have successfully mapped both the specification and detection of Snoop events onto the relational model in this paper and to an object-oriented data model in <ref> [1, 2] </ref>. The notion of parameter contexts is new. We have clearly distinguished between events and conditions as well as between event expressions, events, and physical events.
Reference: [2] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A new perspective on rule support for object-oriented databases. </title> <type> Technical Report UF-CIS TR-92-042, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> November </month> <year> 1992. </year> <note> (To appear in sigmod 93). </note>
Reference-contexts: However, based on the semantics 27 of the parameter contexts, the storage requirement increases monotonically from recent to chronicle to cumulative to continuous. Additional research is required for analyzing the performance by using the language and the system being developed (Sentinel <ref> [5, 2] </ref>) in real-life applications. 7 Conclusions In this paper, we have defined an event, event modifiers and developed a language that supports several types of events needed to model non-traditional applications. <p> Table 7 compares Snoop with the events supported in various systems 8 . The emphasis in Snoop [20, 6] and Sentinel <ref> [5, 2] </ref> is quite different from that taken in [17] and [21], respectively; Snoop extends the event specification language in a model independent manner and Sentinel integrates active capability into an object-oriented DBMS in a seamless manner and does not take the layered approach. <p> This provides great end user extensibility. Snoop is model independent and is intended to be so; we have successfully mapped both the specification and detection of Snoop events onto the relational model in this paper and to an object-oriented data model in <ref> [1, 2] </ref>. The notion of parameter contexts is new. We have clearly distinguished between events and conditions as well as between event expressions, events, and physical events.
Reference: [3] <author> S. Ceri and J. Widom. </author> <title> Deriving Production Rules for Incremental View Maintenance. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: We have given an algorithm for detecting composite events and computing their parameters in the recent parameter context. Our language subsumes the events supported in the extant active database systems including Ariel [15, 5], Interbase ([18]), Postgres ( [24], [23]), Starburst [25], <ref> [3] </ref>, HiPAC ([4],[8]), ADAM ([9]), Ode [14], and Samos ([12]), OSAM* ([19, 22]). Table 7 compares Snoop with the events supported in various systems 8 .
Reference: [4] <author> S. Chakravarthy et al. HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Final Report. Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Consensus seems to be emerging in the database community about utilizing rules for supporting active functionality. A rule consists primarily of three components: an event, a condition, and an action. A rule consisting of these components is termed an ECA or event-condition-action rule in the literature <ref> [4, 25, 13] </ref>. Once rules are declared, the system continuously monitors occurrences of the events, evaluates the condition when the event is signaled, and executes the action if the condition evaluates to true. A significant amount of research has been conducted on how to incorporate rules into a DBMS. <p> Again, it is desirable that this event be used along with a definite event (as in Any (2, E1, E2) _ end-of-transaction). Note that multiple occurrences of the same event does not count in the above (except for the parameter computation). A closure operator was introduced in HiPAC <ref> [8, 4] </ref> denoted E* where E is an event. Closure, as introduced in HiPAC, essentially specifies zero or more occurrences of the same event. As there is no terminating event, a definite event is recommended to be used with the closure operator. <p> preceded by a label, then an additional time of occurrence attribute (L:t occ ) is inserted in the parameter relation to represent the time of occurrence of that component event. 5.2 Parameter Contexts We introduce the notion of parameter contexts (analogous to the notion of coupling modes introduced in HiPAC <ref> [16, 4] </ref>) for the purpose of capturing application semantics for computing the parameters (of composite events) when they are not unique. The notion of parameter contexts is primarily introduced to both disambiguate the parameter computation and at the same time accommodate a wide range of application requirements.
Reference: [5] <author> S. Chakravarthy, E. Hanson, and S.Y.W. Su. </author> <title> Active Data/Knowledge Base Research at the University of Florida. </title> <journal> in IEEE Quarterly Bulletin on Data Engineering, </journal> <volume> 15(1-4):35-39, </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: However, based on the semantics 27 of the parameter contexts, the storage requirement increases monotonically from recent to chronicle to cumulative to continuous. Additional research is required for analyzing the performance by using the language and the system being developed (Sentinel <ref> [5, 2] </ref>) in real-life applications. 7 Conclusions In this paper, we have defined an event, event modifiers and developed a language that supports several types of events needed to model non-traditional applications. <p> We have given an algorithm for detecting composite events and computing their parameters in the recent parameter context. Our language subsumes the events supported in the extant active database systems including Ariel <ref> [15, 5] </ref>, Interbase ([18]), Postgres ( [24], [23]), Starburst [25], [3], HiPAC ([4],[8]), ADAM ([9]), Ode [14], and Samos ([12]), OSAM* ([19, 22]). Table 7 compares Snoop with the events supported in various systems 8 . <p> Table 7 compares Snoop with the events supported in various systems 8 . The emphasis in Snoop [20, 6] and Sentinel <ref> [5, 2] </ref> is quite different from that taken in [17] and [21], respectively; Snoop extends the event specification language in a model independent manner and Sentinel integrates active capability into an object-oriented DBMS in a seamless manner and does not take the layered approach.
Reference: [6] <author> S. Chakravarthy and D. Mishra. </author> <title> An event specification language (snoop) for active databases and its detection. </title> <type> Technical Report UF-CIS TR-91-23, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Table 7 compares Snoop with the events supported in various systems 8 . The emphasis in Snoop <ref> [20, 6] </ref> and Sentinel [5, 2] is quite different from that taken in [17] and [21], respectively; Snoop extends the event specification language in a model independent manner and Sentinel integrates active capability into an object-oriented DBMS in a seamless manner and does not take the layered approach.
Reference: [7] <author> M. Colton. </author> <title> Replicated data in a distributed environment, January 19931. </title> <booktitle> Presentation at the PDIS-2 Conference, </booktitle> <address> San Diego, CA. </address>
Reference: [8] <author> U. Dayal, A. Buchmann, and D. McCarthy. </author> <title> Rules are Objects Too: A Knowledge Model for an Active, Object-Oriented Database Management System. </title> <booktitle> In Proceedings 2nd International Workshop on Object-Oriented Database Systems, </booktitle> <address> Bad Muenster am Stein, Ebernburg, West Germany, </address> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: Furthermore, the granularity at which coupling modes can be specified (see [16] for details) is restricted when event and conditions are combined as proposed in [14]. For a discussion of motivations for the separation of event and condition specification, see <ref> [8] </ref>; conditions are allowed to reference the parameters generated by the associated event specification. 2.4 Event Modifiers Most of the operations, including database operations such as insert, delete, and as we shall see later some of the complex event expressions, are meaningful over a time interval. <p> Again, it is desirable that this event be used along with a definite event (as in Any (2, E1, E2) _ end-of-transaction). Note that multiple occurrences of the same event does not count in the above (except for the parameter computation). A closure operator was introduced in HiPAC <ref> [8, 4] </ref> denoted E* where E is an event. Closure, as introduced in HiPAC, essentially specifies zero or more occurrences of the same event. As there is no terminating event, a definite event is recommended to be used with the closure operator.
Reference: [9] <author> O. Diaz, N. Paton, and P. Gray. </author> <title> Rule Management in Object-Oriented Databases: A Unified Approach. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference: [10] <author> C. L. Forgy. </author> <title> RETE: A Fast Algorithm for the Many Pattern/Many Object Pattern Matching Problem. </title> <booktitle> Artificial Intelligence 19, </booktitle> <pages> pages 17-37, </pages> <year> 1982. </year>
Reference-contexts: We will use E (upper case alphabets) to represent an event expression as well as an event and e (lower case alphabets) to represent an instance of the event E. 5 In fact, in production rule systems (e.g., OPS5 <ref> [10, 11] </ref>), programs are written by incorporating a lot of control information as part of rules which have a form similar to an ECA rule.
Reference: [11] <author> C. L. Forgy and J. McDermott. </author> <title> Domain-Independent Production System Language. </title> <booktitle> In Proceedings Fifth International Conference on Artificial Intelligence, </booktitle> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: We will use E (upper case alphabets) to represent an event expression as well as an event and e (lower case alphabets) to represent an instance of the event E. 5 In fact, in production rule systems (e.g., OPS5 <ref> [10, 11] </ref>), programs are written by incorporating a lot of control information as part of rules which have a form similar to an ECA rule.
Reference: [12] <author> S. Gatziu and K. R. Dittrich. SAMOS: </author> <title> an Active, Object-Oriented Database System. </title> <journal> in IEEE Quarterly Bulletin on Data Engineering, </journal> <volume> 15(1-4):23-26, </volume> <month> December </month> <year> 1992. </year>
Reference: [13] <author> N. H. Gehani and H. V. Jagadish. </author> <title> Ode as an Active Database: Constraints and Triggers. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 327-336, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Consensus seems to be emerging in the database community about utilizing rules for supporting active functionality. A rule consists primarily of three components: an event, a condition, and an action. A rule consisting of these components is termed an ECA or event-condition-action rule in the literature <ref> [4, 25, 13] </ref>. Once rules are declared, the system continuously monitors occurrences of the events, evaluates the condition when the event is signaled, and executes the action if the condition evaluates to true. A significant amount of research has been conducted on how to incorporate rules into a DBMS.
Reference: [14] <author> N. H. Gehani, H. V. Jagadish, and O. Shmueli. </author> <title> Event Specification in an Object-Oriented Database. </title> <booktitle> In Proceedings International Conference on Management of Data, </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: For example, when one withdraws from an account (event), if the balance minus the amount being withdrawn (a parameter of the event) is below the minimum amount required (condition), then indicate the amount that can be withdrawn (action which may lead to another state). In Ode <ref> [14] </ref> conditions are treated as masks that are associated with event specification. <p> The system, as part of its optimization, can combine events, conditions, and actions in the best possible way for implementing that rule. Furthermore, the granularity at which coupling modes can be specified (see [16] for details) is restricted when event and conditions are combined as proposed in <ref> [14] </ref>. <p> It is difficult to express and detect the non-occurrence of a happening. This can only be done in a well-bounded, finite interval without leading to unsafe expressions (similar to unsafe expressions of relational calculus). In Ode <ref> [14] </ref>, the complement operator (denoted !) is introduced and this is applicable to both primitive and composite events. Unlike [14], we do not have a complement operator specifying the complement of the universe of primitive events. Nor do we use not for specifying the nonoccurrence of a primitive event. <p> This can only be done in a well-bounded, finite interval without leading to unsafe expressions (similar to unsafe expressions of relational calculus). In Ode <ref> [14] </ref>, the complement operator (denoted !) is introduced and this is applicable to both primitive and composite events. Unlike [14], we do not have a complement operator specifying the complement of the universe of primitive events. Nor do we use not for specifying the nonoccurrence of a primitive event. <p> For example, if one wants to specify, in a banking application, the rule "Generate a report on all withdrawals greater than $1000.00 each working day", neither our formulation nor <ref> [14] </ref> can express it. The difficulty is that currently, it is not possible to ignore specific instances (event occurrences corresponding to the weekend) from a pre-defined set. <p> We have given an algorithm for detecting composite events and computing their parameters in the recent parameter context. Our language subsumes the events supported in the extant active database systems including Ariel [15, 5], Interbase ([18]), Postgres ( [24], [23]), Starburst [25], [3], HiPAC ([4],[8]), ADAM ([9]), Ode <ref> [14] </ref>, and Samos ([12]), OSAM* ([19, 22]). Table 7 compares Snoop with the events supported in various systems 8 . <p> Although <ref> [14] </ref> has operators that are similar to the ones in Snoop, there are some fundamental 8 We are aware of related work in office automation, AI, and temporal logic. <p> Future Research This paper represents our initial attempt at defining an expressive language for event specification. Below, we identify a number of issues that were not addressed in this paper but are critical to the area of active databases: * Snoop as well as Ode <ref> [14] </ref> cannot express exceptions that exclude certain events from a set. For example, we cannot express a rule that requires reports to be generated only for working days. That is, we cannot exclude specific events computed by a cumulative event expression.
Reference: [15] <author> Eric N. Hanson. </author> <title> An Initial Report on the Design of Ariel: a DBMS with an integrated production rule system. </title> <journal> ACM SIGMOD RECORD, </journal> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> Sep. </month> <year> 1989. </year>
Reference-contexts: We have given an algorithm for detecting composite events and computing their parameters in the recent parameter context. Our language subsumes the events supported in the extant active database systems including Ariel <ref> [15, 5] </ref>, Interbase ([18]), Postgres ( [24], [23]), Starburst [25], [3], HiPAC ([4],[8]), ADAM ([9]), Ode [14], and Samos ([12]), OSAM* ([19, 22]). Table 7 compares Snoop with the events supported in various systems 8 .
Reference: [16] <author> M. Hsu, R. Ladin, and D. McCarthy. </author> <title> An Execution Model for Active Data Base Management Systems. </title> <booktitle> In Proceedings 3rd International Conference on Data and Knowledge Bases, </booktitle> <month> Jun. </month> <year> 1988. </year>
Reference-contexts: The system, as part of its optimization, can combine events, conditions, and actions in the best possible way for implementing that rule. Furthermore, the granularity at which coupling modes can be specified (see <ref> [16] </ref> for details) is restricted when event and conditions are combined as proposed in [14]. <p> preceded by a label, then an additional time of occurrence attribute (L:t occ ) is inserted in the parameter relation to represent the time of occurrence of that component event. 5.2 Parameter Contexts We introduce the notion of parameter contexts (analogous to the notion of coupling modes introduced in HiPAC <ref> [16, 4] </ref>) for the purpose of capturing application semantics for computing the parameters (of composite events) when they are not unique. The notion of parameter contexts is primarily introduced to both disambiguate the parameter computation and at the same time accommodate a wide range of application requirements.
Reference: [17] <author> R. Hull and D. Jacobs. </author> <title> Language constructs for programming active databases. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 455-468, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Table 7 compares Snoop with the events supported in various systems 8 . The emphasis in Snoop [20, 6] and Sentinel [5, 2] is quite different from that taken in <ref> [17] </ref> and [21], respectively; Snoop extends the event specification language in a model independent manner and Sentinel integrates active capability into an object-oriented DBMS in a seamless manner and does not take the layered approach.
Reference: [18] <institution> InterBase Software Corporation, Bedford, </institution> <address> MA. </address> <note> InterBase DDL Reference Manual, InterBase Version 3.0, </note> <year> 1990. </year>
Reference-contexts: The begin-of event can be similarly 6 defined. The above modifiers can be used to map any operation or interval to two well-defined events. In fact, begin-of and end-of correspond to pre (or before ) and post (or after ), respectively, events provided by systems such as Interbase <ref> [18] </ref>, Rdb/VMS and OSAM* [22]. However, the semantics of an event modifier, in our approach, is user defined including the mapping to a physical event. The implementation can be changed (i.e., the mapping) without affecting the logical event or the rule specification thereby providing encapsulation.
Reference: [19] <author> H. Lam, S.Y.W. Su, and A. M. Alashqur. </author> <title> Integrating the Concepts and Techniques of Semantic Modeling and the Object-Oriented Paradigms. </title> <booktitle> In Proceedings 13th International Computer Software and Applications Conference, </booktitle> <address> Orlando, Florida, </address> <month> Sep. </month> <year> 1989. </year>
Reference: [20] <author> D. Mishra. Snoop: </author> <title> An event specification language for active databases. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Table 7 compares Snoop with the events supported in various systems 8 . The emphasis in Snoop <ref> [20, 6] </ref> and Sentinel [5, 2] is quite different from that taken in [17] and [21], respectively; Snoop extends the event specification language in a model independent manner and Sentinel integrates active capability into an object-oriented DBMS in a seamless manner and does not take the layered approach.
Reference: [21] <author> U. Schreier et al. Alert: </author> <title> An architecture for transforming a passive dbms into an active dbms. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 469-478, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Table 7 compares Snoop with the events supported in various systems 8 . The emphasis in Snoop [20, 6] and Sentinel [5, 2] is quite different from that taken in [17] and <ref> [21] </ref>, respectively; Snoop extends the event specification language in a model independent manner and Sentinel integrates active capability into an object-oriented DBMS in a seamless manner and does not take the layered approach.
Reference: [22] <author> Madhulika Singh. </author> <title> Transaction Oriented Rule Processing in An Object-Oriented Knowledge Base Management System. </title> <type> Master's thesis, </type> <institution> University of Florida, Database Systems R&D Center, Gainesville, </institution> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: The above modifiers can be used to map any operation or interval to two well-defined events. In fact, begin-of and end-of correspond to pre (or before ) and post (or after ), respectively, events provided by systems such as Interbase [18], Rdb/VMS and OSAM* <ref> [22] </ref>. However, the semantics of an event modifier, in our approach, is user defined including the mapping to a physical event. The implementation can be changed (i.e., the mapping) without affecting the logical event or the rule specification thereby providing encapsulation.
Reference: [23] <author> M. Stonebraker et al. </author> <title> On Rules, Procedures, Cashing and Views in Database Systems. </title> <booktitle> In Proceedings of ACM-SIGMOD, </booktitle> <pages> pages 281-290, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: We have given an algorithm for detecting composite events and computing their parameters in the recent parameter context. Our language subsumes the events supported in the extant active database systems including Ariel [15, 5], Interbase ([18]), Postgres ( [24], <ref> [23] </ref>), Starburst [25], [3], HiPAC ([4],[8]), ADAM ([9]), Ode [14], and Samos ([12]), OSAM* ([19, 22]). Table 7 compares Snoop with the events supported in various systems 8 .
Reference: [24] <author> M. Stonebraker and Lawrence Rowe. </author> <title> The Postgres Papers. </title> <type> Technical Report UCB/ERL M86/85, </type> <institution> Dept. of Electrical Engineering and Computer Science, Univ. of California, University of California, Berkeley, CA94720, </institution> <month> Jun. </month> <year> 1987. </year>
Reference-contexts: We have given an algorithm for detecting composite events and computing their parameters in the recent parameter context. Our language subsumes the events supported in the extant active database systems including Ariel [15, 5], Interbase ([18]), Postgres ( <ref> [24] </ref>, [23]), Starburst [25], [3], HiPAC ([4],[8]), ADAM ([9]), Ode [14], and Samos ([12]), OSAM* ([19, 22]). Table 7 compares Snoop with the events supported in various systems 8 .
Reference: [25] <author> J. Widom and S. Finkelstein. </author> <title> Set-Oriented Production Rules in Relational Database Systems. </title> <booktitle> In Proc. of ACM-SIGMOD, </booktitle> <pages> pages 259-270, </pages> <month> May </month> <year> 1990. </year> <month> 32 </month>
Reference-contexts: Consensus seems to be emerging in the database community about utilizing rules for supporting active functionality. A rule consists primarily of three components: an event, a condition, and an action. A rule consisting of these components is termed an ECA or event-condition-action rule in the literature <ref> [4, 25, 13] </ref>. Once rules are declared, the system continuously monitors occurrences of the events, evaluates the condition when the event is signaled, and executes the action if the condition evaluates to true. A significant amount of research has been conducted on how to incorporate rules into a DBMS. <p> We have given an algorithm for detecting composite events and computing their parameters in the recent parameter context. Our language subsumes the events supported in the extant active database systems including Ariel [15, 5], Interbase ([18]), Postgres ( [24], [23]), Starburst <ref> [25] </ref>, [3], HiPAC ([4],[8]), ADAM ([9]), Ode [14], and Samos ([12]), OSAM* ([19, 22]). Table 7 compares Snoop with the events supported in various systems 8 .
References-found: 25

