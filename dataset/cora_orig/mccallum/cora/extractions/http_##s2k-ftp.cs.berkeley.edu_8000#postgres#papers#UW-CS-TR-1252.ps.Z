URL: http://s2k-ftp.cs.berkeley.edu:8000/postgres/papers/UW-CS-TR-1252.ps.Z
Refering-URL: http://gist.cs.berkeley.edu:8000/gist/gist1.html
Root-URL: 
Title: THE RD-TREE: AN INDEX STRUCTURE FOR SETS  
Author: Joseph M. Hellerstein Avi Pfeffer 
Address: Wisconsin, Madison  Berkeley  
Affiliation: University of  University of California,  
Abstract: The implementation of complex types in Object-Relational database systems requires the development of efficient access methods. In this paper we describe the RD-Tree, an index structure for set-valued attributes. The RD-Tree is an adaptation of the R-Tree that exploits a natural analogy between spatial objects and sets. A particular engineering difficulty arises in representing the keys in an RD-Tree. We propose several different representations, and describe the tradeoffs of using each. An implementation and validation of this work is underway in the SHORE object repository. 
Abstract-found: 1
Intro-found: 1
Reference: [BROW94] <author> Eric W. Brown, James P. Callan, and W. Bruce Croft, </author> <title> Fast Incremental Indexing for Full-Te xt Information Retrieval, </title> <booktitle> Proc. 20th Conference on Very Large Databases, </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: The RD-Tree can use signatures to perform individual set comparisons. Inverted files are a popular technique for single-element lookups in a collection of set-valued attributes. See, for example, <ref> [BROW94] </ref>. Inverted files can be extended to search for supersets of a given set S with n elements, by performing a single-element lookup for each element in S and then taking the n-way intersection of the results.
Reference: [BECK90] <author> Norbert Beckmann, Hans-Peter Kriegel, Ralf Schneider, and Bernhard Seeger, </author> <title> Bernhard The R*-tree: An Efficient and Robust Access Method for Points and Rectangles , Proc. </title> <booktitle> ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Atlantic City, N.J., </address> <month> Nay </month> <year> 1990. </year>
Reference-contexts: It is then unclear into which new node the growing entry should be inserted. Rather than attempt to calculate which node to use, we take advantage of a feature of R*-Trees <ref> [BECK90] </ref> which is available in SHORE. R*-Trees allow forced reinserts: that is, any entry can be inserted at any lev el of the tree. The tree chooses which node at that level will be used. 3. REPRESENTATION OF KEYS The keys in an RD-Tree describe the bounding sets of entries.
Reference: [BERT89] <author> E. Bertino and W. Kim, </author> <title> Indexing Techniques for Queries on Nested Objects, </title> <journal> IEEE Trans. on Knowledge and Data Engineering 1(2) </journal> <pages> 196-214, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The join then becomes a series of superset predicates for which an RD-Tree index on STUDENT.passed can be used. 1.2. RELATED WORK There has been a fair amount of work done on access methods for nested attributes. Bertino and Kim <ref> [BERT89] </ref> proposed three indexing mechanisms for complex objects: the nested index, path index and multiindex. However, these access methods are not designed to support efficient evaluation of set predicates. Ishikawa et al. [ISHI93] examined the use of signature file techniques for testing set inclusion.
Reference: [GUTT84] <author> Antonin Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Boston, Mass., </address> <month> June </month> <year> 1984. </year>
Reference-contexts: In this paper we describe the RD-Tree, an index structure for sets. The RD-Tree is a variant of the R-Tree, a popular access method for spatial data <ref> [GUTT84] </ref>. RD stands for "Russian Doll", which describes the transitive containment relation that is fundamental to the tree structure. We discuss the engineering issues involved in representing the keys in an RD-Tree, and propose several representations.
Reference: [HELL93] <author> Joseph M. Hellerstein Rangesets: </author> <title> A Data Representation for Quick Query Processing on Nested Sets , working draft, </title> <institution> University of Wisconsin, Madison, </institution> <month> May </month> <year> 1993 </year>
Reference-contexts: Nevertheless, a small amount of lossiness still exists due to the fact that the combined signature of all elements in a set may also include the signature of other elements. 3.3. RANGESETS An alternative representation of sets that allows efficient processing of set operations is the rangeset <ref> [HELL93] </ref>. A range is an ordered pair of integers ( a, b ) where a b, that represents the set of integers x such that a x b. <p> If the universe consists of objects of some type other than integer, elements in the universe can be mapped to unique integers in the range (1, maxid), where maxid is the cardinality of the universe. A procedure for performing this mapping is described in <ref> [HELL93] </ref>. Once this mapping has been performed, sets in the universe can be represented by rangesets of integers. The lossiness of a rangeset representation depends on the correlation factor of the universe, and on the choice of mapping of base elements to the integers.
Reference: [ISHI93] <author> Yoshiharu Ishikawa, Hiroyuki Kitagaw a, and Nobuo Ohbo, </author> <title> Evaluation of Signature Files as Set Access Facilities in OODBs, </title> <booktitle> Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Bertino and Kim [BERT89] proposed three indexing mechanisms for complex objects: the nested index, path index and multiindex. However, these access methods are not designed to support efficient evaluation of set predicates. Ishikawa et al. <ref> [ISHI93] </ref> examined the use of signature file techniques for testing set inclusion. They provide a probabilistic algorithm that attempts to quickly determine whether one set is a subset of another. <p> Therefore this approach is only effective for queries that search for supersets of fairly large sets. A more sophisticated technique is to use signatures as described in <ref> [ISHI93] </ref>. Every element has a signature, which is a pattern of bits in the bitmap that are set when that element is present. The signature of a set is a bitwise or of the signatures of the elements of the set.

References-found: 6

