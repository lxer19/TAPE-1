URL: http://www.neci.nj.nec.com/homepages/pny/papers/pvl/pvl.ps
Refering-URL: http://www.neci.nj.nec.com/homepages/pny/papers/pvl/main.html
Root-URL: 
Title: Probability Value Library  
Author: Peter N. Yianilos, Eric Sven Ristad, 
Date: October 1994  
Affiliation: NEC Research Institute  Princeton University  
Pubnum: Research Report CS-TR-472-94  
Abstract: Hidden Markov models (HMMs) and other time series models assign probabilities to long sequences of events. Avoiding underflow is arguably the central difficulty in calculating the probability of such sequences. This technical report presents an elegant and efficient C library for representing and manipulating probability values without underflow. Use of the library results in simpler code whose execution time compares favorably with traditional numerical methods. Thus, the library provides a strong foundation on which to build large stochastic modeling systems. Our abstraction also suggests a natural extension of the IEEE 754 floating point standard, to better support statistical computation. Source code for the library is freely available at cs.princeton.edu:/pub/packages/pr.tar.gz via anonymous ftp. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> X. Huang, Y. Ariki, and M. Jack, </author> <title> Hidden Markov Models for Speech Recognition. Information Technology Series, </title> <publisher> Edinburgh: Edinburgh University Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction The pr_t module provides an abstraction for probability values. An object of type pr_t represents a real number in the closed interval <ref> [0; 1] </ref>. The principal benefit of using this abstraction is to avoid underflow in time series modeling. In these settings, one computes and manipulates probabilities of long state sequences. One quickly reaches the exponent range limit of double representation, as this is typically only 300. <p> For example, a straightforward implementation of addition in the logarithmic approach is more than fifty times slower than standard floating point addition. The excessive cost of addition is often avoided by complex table look-up schemes <ref> [1] </ref>. These table lookup schemes have limited precision and they place a significant additional burden on the memory system. In order to achieve comparable precision, the logarithmic representation must be implemented with a large lookup table that is unlikely to fit in primary cache. <p> We have also used the pr_t library to more effectively teach statistical pattern recognition methods to undergraduate computer science students. Using the pr_t library, the students in our undergraduate pattern recognition class were able to implement semi-continuous hidden Markov models with full parameter tying <ref> [1] </ref>. Without the pr_t library, students in the previous year had been limited to only implementing simple discrete hidden Markov models, in large part due to the complexities of implementing and validating scaling. The remainder of our report is organized as follows. <p> pr_t object in the format &lt;sig&gt;b-<exp> to remind the reader that the exponent radix is 2 (ie., binary). hpr operations 3ai+ /* Input/Output */ void pr_fprintf (pr_t px, FILE *stream); void pr_printf (pr_t px); 6 2.4 Data Type In our introduction, we stated that probability values lie in the interval <ref> [0; 1] </ref>. In practice a somewhat larger range is required because accumulated round off error may result in probability values that exceed unity. Therefore, implementations of the pr_t data type must be prepared to deal with values somewhat larger than unity.
Reference: [2] <author> A. Dempster, N. Laird, and D. Rubin, </author> <title> "Maximum likelihood from incom-plete data via the EM algorithm," </title> <journal> J. Royal Statist. Soc. Ser. B (method-ological), </journal> <volume> vol. 39, </volume> <pages> pp. 1-38, </pages> <year> 1977. </year>
Reference-contexts: We have used the pr_t library to implement a wide range of statistical models, including hidden Markov models, finite growth models, and a bevy of statistical language models. Given the difficulty of establishing the correctness of learning algorithms such as expectation maximization (EM) <ref> [2] </ref> and Baum-Welch reestimation [3, 4] in complex settings with many thousands of states, a sparse transition graph, and millions of observations, we were glad to trade a modest amount of performance for demonstrable correctness and a significant reduction in coding complexity.
Reference: [3] <author> L. Baum, T. Petrie, G. Soules, and N. Weiss, </author> <title> "A maximization technique occuring in the statistical analysis of probabilistic functions of Markov chains," </title> <journal> Ann. Math. Stat., </journal> <volume> vol. 41, </volume> <pages> pp. 164-171, </pages> <year> 1970. </year>
Reference-contexts: We have used the pr_t library to implement a wide range of statistical models, including hidden Markov models, finite growth models, and a bevy of statistical language models. Given the difficulty of establishing the correctness of learning algorithms such as expectation maximization (EM) [2] and Baum-Welch reestimation <ref> [3, 4] </ref> in complex settings with many thousands of states, a sparse transition graph, and millions of observations, we were glad to trade a modest amount of performance for demonstrable correctness and a significant reduction in coding complexity.
Reference: [4] <author> A. Poritz, </author> <title> "Hidden Markov models: a guided tour," </title> <booktitle> in Proc. </booktitle> <address> ICASSP-88, (New York), </address> <pages> pp. 7-13, </pages> <year> 1988. </year>
Reference-contexts: We have used the pr_t library to implement a wide range of statistical models, including hidden Markov models, finite growth models, and a bevy of statistical language models. Given the difficulty of establishing the correctness of learning algorithms such as expectation maximization (EM) [2] and Baum-Welch reestimation <ref> [3, 4] </ref> in complex settings with many thousands of states, a sparse transition graph, and millions of observations, we were glad to trade a modest amount of performance for demonstrable correctness and a significant reduction in coding complexity.
Reference: [5] <author> P. Brown, </author> <title> Acoustic-phonetic modeling problem in automatic speech recogni-tion. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Carnegie-Mellon University, Pittsburgh, </institution> <year> 1987. </year>
Reference: [6] <author> IEEE, </author> <title> "IEEE standard for binary floating-point arithmetic," </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 22, no. 2, </volume> <pages> pp. 9-25, </pages> <year> 1985. </year> <note> p.A-12. 10 </note>
Reference-contexts: We also provide execution timings for our current implementation of the pr_t library across a range of modern unix workstations. The appendix contains a user's guide along with all source code. 3.1 Extensions to IEEE Floating Point It is unfortunate that the IEEE 754 floating point standard <ref> [6] </ref> does not address the need for an extended exponent range. The double extended standard provides for 14 bit exponents but falls far short of the requirements imposed by statistical computation. We therefore make the following two concrete proposals to amend the IEEE-754 floating point standard: 1.
References-found: 6

