URL: ftp://ftp.cs.washington.edu/pub/ai/occam-aaai96.ps
Refering-URL: http://www.cs.washington.edu/research/projects/softbots/www/papers.html
Root-URL: 
Email: ctkwok, weld@cs.washington.edu  
Title: Planning to Gather Information  
Author: Chung T. Kwok and Daniel S. Weld 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science Engineering University of Washington  
Note: To appear, AAAI '96  
Abstract: We describe Occam, a query planning algorithm that determines the best way to integrate data from different sources. As input, Occam takes a library of site descriptions and a user query. As output, Occam automatically generates one or more plans that encode alternative ways to gather the requested information. Occam has several important features: (1) it integrates both legacy systems and full relational databases with an efficient, domain-independent, query-planning algorithm, (2) it reasons about the capabilities of different information sources, (3) it handles partial goal satisfaction i.e., gathers as much data as possible when it can't gather exactly all that the user requested, (4) it is both sound and complete, (5) it is efficient. We present empirical results demonstrating Occam's performance on a variety of information gathering tasks. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Arens, Y., Chee, C. Y., Hsu, C.-N., and Knoblock, C. A. </author> <year> 1993. </year> <title> Retrieving and integrating data from multiple information sources. </title> <journal> International Journal on Intelligent and Cooperative Information Systems 2(2) </journal> <pages> 127-158. </pages>
Reference-contexts: Several planning systems were designed specifically for information gathering. For example, the XII planner (Golden, Etzioni, & Weld 1994) guides the Internet Softbot, and the Sage planner (Knoblock 1995) controls the SIMS information system <ref> (Arens et al. 1993) </ref>. Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model.
Reference: <author> Barrett, A., and Weld, D. </author> <year> 1994. </year> <title> Partial order planning: Evaluating possible efficiency gains. </title> <booktitle> Artificial Intelligence 67(1) </booktitle> <pages> 71-112. </pages>
Reference: <author> Chapman, D. </author> <year> 1987. </year> <title> Planning for conjunctive goals. </title> <booktitle> Artificial Intelligence 32(3) </booktitle> <pages> 333-377. </pages>
Reference-contexts: [ fSeq i g Sol Sol [ FindSolutions (Seq i ; Q) Return Sol query plans; input Q is a query, and O is a set of operators; the output is a set of solutions. be elaborated into a solution plan; this is akin to evaluating the modal truth criterion <ref> (Chapman 1987) </ref> as explained below; Occam adds all newly discovered solutions to Sol , but in any case every sequence is kept on Fringe because its children might lead to qualitatively different solutions. The Example, Revisited Suppose Occam is called on the query-for-first-names example. <p> This test is somewhat akin to the Modal Truth Criterion <ref> (Chapman 1987) </ref> which tests a partially ordered (hence incomplely specified) plan to see if any solution exists. In the case of Occam, a totally ordered sequence of operators is underspecified because there could be several (or no) heads which render it a solution.
Reference: <author> Chawathe, S., Garcia-Molina, H., Hammer, J., Ire-land, K., Papakonstantinou, Y., Ullman, J., and Widom, J. </author> <year> 1994. </year> <title> The tsimmis project: Integration of heterogeneous information sources. </title> <booktitle> In Proceedings of IPSJ Conference. </booktitle>
Reference-contexts: This preliminary experiment shows that our search control optimizations provide two orders of magnitude speedup. Related Work Several researchers in database community are concerned with the integration of heterogenous databases. Prominent projects include the Information Manifold (Levy, Srivastava, & Kirk 1995) and the Tsimmis project <ref> (Chawathe et al. 1994) </ref>. From Tsimmis, we adopt the notion of notion of binding templates (Ra-jaraman, Sagiv, & Ullman 1995). However, for the most part, Tsimmis assumes information integration is done manually, while our work focuses on automating the information-integration process.
Reference: <author> Etzioni, O., and Weld, D. </author> <year> 1994. </year> <title> A softbot-based interface to the Internet. </title> <journal> CACM 37(7) </journal> <pages> 72-76. </pages> <note> See http://www.cs.washington.edu/research/softbots. </note>
Reference-contexts: These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources <ref> (Etzioni & Weld 1994) </ref>. These motivations inspire the Occam 1 planning sys-1 William of Occam, 1285-1349, was an English scholastic philosopher best known for "Occam's razor," a rule in tem which we describe in this paper. <p> Given such a specification, one could perform local closed world reasoning <ref> (Etzioni, Golden, & Weld 1994) </ref> to eliminate operators from consideration, but we do not discuss the matter in this paper. Information Gathering Queries Queries are very similar to operators: they also have heads and conjunctive bodies, but the direction of implication is reversed. <p> In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in (Levy, Srivastava, & Kirk 1995) provides a more expressive type hierarchy than that used by Occam. Several planning systems were designed specifically for information gathering. For example, the XII planner <ref> (Golden, Etzioni, & Weld 1994) </ref> guides the Internet Softbot, and the Sage planner (Knoblock 1995) controls the SIMS information system (Arens et al. 1993). Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model. <p> Plan quality is the focus of our continuing efforts. In the future we hope to incorporate local closed world information <ref> (Etzioni, Golden, & Weld 1994) </ref> into our planner so that Occam can reason about situations when it has exhausted all information gathering alternatives. Acknowledgements We thank Paul Beame, Oren Etzioni, Marc Fried-man, Keith Golden, Steve Hanks, Nick Kushmerick, Alon Levy, and Mike Williamson for helpful discussions.
Reference: <author> Etzioni, O., Hanks, S., Weld, D., Draper, D., Lesh, N., and Williamson, M. </author> <year> 1992. </year> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning. </booktitle> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In particular, while Occam operators have no causal preconditions, the bound arguments in an op-erator's head represent a form of knowledge precondition (Moore 1985) that is equivalent to the findout goals of UWL <ref> (Etzioni et al. 1992) </ref>. There are no causal effects, but the body of an operator is similar to a UWL observe effect.
Reference: <author> Etzioni, O., Golden, K., and Weld, D. </author> <year> 1994. </year> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Proc. 4th Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 178-189. </pages> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources <ref> (Etzioni & Weld 1994) </ref>. These motivations inspire the Occam 1 planning sys-1 William of Occam, 1285-1349, was an English scholastic philosopher best known for "Occam's razor," a rule in tem which we describe in this paper. <p> Given such a specification, one could perform local closed world reasoning <ref> (Etzioni, Golden, & Weld 1994) </ref> to eliminate operators from consideration, but we do not discuss the matter in this paper. Information Gathering Queries Queries are very similar to operators: they also have heads and conjunctive bodies, but the direction of implication is reversed. <p> In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in (Levy, Srivastava, & Kirk 1995) provides a more expressive type hierarchy than that used by Occam. Several planning systems were designed specifically for information gathering. For example, the XII planner <ref> (Golden, Etzioni, & Weld 1994) </ref> guides the Internet Softbot, and the Sage planner (Knoblock 1995) controls the SIMS information system (Arens et al. 1993). Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model. <p> Plan quality is the focus of our continuing efforts. In the future we hope to incorporate local closed world information <ref> (Etzioni, Golden, & Weld 1994) </ref> into our planner so that Occam can reason about situations when it has exhausted all information gathering alternatives. Acknowledgements We thank Paul Beame, Oren Etzioni, Marc Fried-man, Keith Golden, Steve Hanks, Nick Kushmerick, Alon Levy, and Mike Williamson for helpful discussions.
Reference: <author> Friedman, M., and Weld, D. </author> <year> 1996. </year> <title> Decision-theoretic execution of information gathering plans. </title> <type> Technical report, </type> <institution> University of Washington, Department of Computer Science and Engineering. </institution>
Reference-contexts: In addition, Occam is efficient as we demonstrated in preliminary empirical tests. In addition to the planner described here, we have implemented an interesting execution system for Occam; see <ref> (Friedman & Weld 1996) </ref> for details. Our preliminary experience is that the time spent planning is negligible compare to the time required for execution.
Reference: <author> Golden, K., Etzioni, O., and Weld, D. </author> <year> 1994. </year> <title> Omnipotence without omniscience: Sensor management in planning. </title> <booktitle> In Proc. 12th Nat. Conf. on AI, </booktitle> <pages> 1048-1054. </pages> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Given such a specification, one could perform local closed world reasoning <ref> (Etzioni, Golden, & Weld 1994) </ref> to eliminate operators from consideration, but we do not discuss the matter in this paper. Information Gathering Queries Queries are very similar to operators: they also have heads and conjunctive bodies, but the direction of implication is reversed. <p> In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in (Levy, Srivastava, & Kirk 1995) provides a more expressive type hierarchy than that used by Occam. Several planning systems were designed specifically for information gathering. For example, the XII planner <ref> (Golden, Etzioni, & Weld 1994) </ref> guides the Internet Softbot, and the Sage planner (Knoblock 1995) controls the SIMS information system (Arens et al. 1993). Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model. <p> Plan quality is the focus of our continuing efforts. In the future we hope to incorporate local closed world information <ref> (Etzioni, Golden, & Weld 1994) </ref> into our planner so that Occam can reason about situations when it has exhausted all information gathering alternatives. Acknowledgements We thank Paul Beame, Oren Etzioni, Marc Fried-man, Keith Golden, Steve Hanks, Nick Kushmerick, Alon Levy, and Mike Williamson for helpful discussions.
Reference: <author> Knoblock, C. </author> <year> 1995. </year> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proc. 15th Int. Joint Conf. on AI, </booktitle> <pages> 1686-1693. </pages>
Reference-contexts: Several planning systems were designed specifically for information gathering. For example, the XII planner (Golden, Etzioni, & Weld 1994) guides the Internet Softbot, and the Sage planner <ref> (Knoblock 1995) </ref> controls the SIMS information system (Arens et al. 1993). Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model.
Reference: <author> Kwok, C., and Weld, D. </author> <year> 1996. </year> <title> Planning to gather information. </title> <type> Technical Report 96-01-04, </type> <institution> University of Washington, Department of Computer Science and Engineering. </institution>
Reference-contexts: Starting from the empy sequence, Occam searches the space of totally ordered sequences of operator instances (i.e. plan bodies). Since there is no bound on the length of useful plans <ref> (Kwok & Weld 1996) </ref>, Occam's search proceeds until all alternatives have been exhausted, or a resource bound is exceeded. At each stage a sequence of operator instances, Seq, is removed from Fringe and is expanded by postpending an instance of each potential operator. <p> By performing this search, FindSolutions considers the possibility of constraining one or more of the variables in the expansion to be equal. Although equality mappings weren't important in the previous example, sometimes they are necessary in order to recognize a solution; see <ref> (Kwok & Weld 1996) </ref> for an example and further discussion. 5 In practice, the use of type information and other optimizations allows a much more efficient algorithm than this brute-force enumeration of containment and equality mappings. See the long version of the paper. <p> Furthermore, recall that Occam keeps all sequences on the Fringe, even when they have produced solutions. Thus it is crucial to discard redundant solutions. Space considerations preclude details, but in <ref> (Kwok & Weld 1996) </ref> we discuss why Occam keeps solution sequences on the Fringe and explain how to filter redundant solutions in time which is polynomial in the length of a plan. Reducing Search We have implemented several domain-independent, completeness-preserving optimizations. <p> Reducing Search We have implemented several domain-independent, completeness-preserving optimizations. First, the use of type information and constraint satisfaction speeds FindSolutions. Second, duplicated operator instance pruning reduces the branching factor by forcing InstantiateOp to check if instances are subsumed by the plan body being extended <ref> (Kwok & Weld 1996) </ref>. Third, shu*ed sequence pruning achieves the efficiency benefits of a partial-order representation (Barrett & Weld 1994; Minton et al. 1992) without the attendant complexity. <p> We demonstrate the performance improvments of these optimizations with 5 problems taken from 4 domains. Although the first three domains are relatively simple <ref> (Kwok & Weld 1996) </ref>, the last two problems are taken from a relatively detailed (e.g., 25 operator) encoding of UNIX commands and Internet information services. <p> Because of this, Occam handles partial goal satisfaction: when no single plan can gather all information, Occam generates alternatives that may be executed in parallel to collect as much information as possible. <ref> (Kwok & Weld 1996) </ref> argues that Occam is both sound and complete. In addition, Occam is efficient as we demonstrated in preliminary empirical tests. In addition to the planner described here, we have implemented an interesting execution system for Occam; see (Friedman & Weld 1996) for details.
Reference: <author> Levy, A. Y., Srivastava, D., and Kirk, T. </author> <year> 1995. </year> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <note> Special Issue on Networked Information Discovery and Retrieval 5 (2). </note>
Reference-contexts: This preliminary experiment shows that our search control optimizations provide two orders of magnitude speedup. Related Work Several researchers in database community are concerned with the integration of heterogenous databases. Prominent projects include the Information Manifold <ref> (Levy, Srivastava, & Kirk 1995) </ref> and the Tsimmis project (Chawathe et al. 1994). From Tsimmis, we adopt the notion of notion of binding templates (Ra-jaraman, Sagiv, & Ullman 1995). However, for the most part, Tsimmis assumes information integration is done manually, while our work focuses on automating the information-integration process. <p> However, for the most part, Tsimmis assumes information integration is done manually, while our work focuses on automating the information-integration process. The rest of our representation language is based on the encodings described in <ref> (Levy, Srivastava, & Kirk 1995) </ref>, but in contrast to this work we provide implemented algorithms for generating query plans when site descriptions include binding annotations. In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in (Levy, Srivastava, & Kirk 1995) provides a <p> based on the encodings described in <ref> (Levy, Srivastava, & Kirk 1995) </ref>, but in contrast to this work we provide implemented algorithms for generating query plans when site descriptions include binding annotations. In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in (Levy, Srivastava, & Kirk 1995) provides a more expressive type hierarchy than that used by Occam. Several planning systems were designed specifically for information gathering.
Reference: <author> Minton, S., Drummond, M., Bresina, J., and Phillips, A. </author> <year> 1992. </year> <title> Total order vs. partial order planning: Factors influencing performance. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning. </booktitle>
Reference: <author> Moore, R. </author> <year> 1985. </year> <title> A Formal Theory of Knowledge and Action. </title> <editor> In Hobbs, J., and Moore, R., eds., </editor> <title> Formal Theories of the Commonsense World. </title> <address> Norwood, NJ: </address> <publisher> Ablex. </publisher>
Reference-contexts: Although our syntax for operators looks very different from traditional STRIPS or ADL (Pednault 1989) planning operators, there are many similarities. In particular, while Occam operators have no causal preconditions, the bound arguments in an op-erator's head represent a form of knowledge precondition <ref> (Moore 1985) </ref> that is equivalent to the findout goals of UWL (Etzioni et al. 1992). There are no causal effects, but the body of an operator is similar to a UWL observe effect.
Reference: <author> Pednault, E. </author> <year> 1989. </year> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proc. 1st Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 324-332. </pages>
Reference-contexts: When a system supports several types of query (but doesn't support full relational operations) it can be described with several operators. Full relational databases are simply described using operators with no bound variables. Although our syntax for operators looks very different from traditional STRIPS or ADL <ref> (Pednault 1989) </ref> planning operators, there are many similarities. In particular, while Occam operators have no causal preconditions, the bound arguments in an op-erator's head represent a form of knowledge precondition (Moore 1985) that is equivalent to the findout goals of UWL (Etzioni et al. 1992).
Reference: <author> Rajaraman, A., Sagiv, Y., and Ullman, J. </author> <year> 1995. </year> <title> Answering queries using templates with binding patterns. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems. </booktitle>
Reference-contexts: Both purposes are achieved with operators which have two parts: 1. A head which consists of a predicate symbol denot ing the name of the operator, and an ordered list of variables called arguments. Each variable is possibly annotated with a binding pattern <ref> (Rajaraman, Sagiv, & Ullman 1995) </ref> that indicates that the argument must be bound in order for the query to be executed (denoted with the annotation $). Variables with no annotation are free. 2. <p> Specifically, if $V is a bound argument of O b then V must be used as a free argument to some other operator instance O a where a &lt; b or else a value for V must be a bound argument in the query head <ref> (Rajaraman, Sagiv, & Ullman 1995) </ref>. 2. All tuples satisfying p (X 1 ; : : : ; X n ) must satisfy query (X 1 ; : : : ; X n ).
Reference: <author> Ullman, J. </author> <year> 1988, 1989. </year> <title> Database and knowledge-base systems. </title> <booktitle> In Database and knowledge-base systems, </booktitle> <volume> volume 1 & 2. </volume> <publisher> Computer Science Press. </publisher>
Reference-contexts: This is the appropriate semantics for operators, since most data sources are incomplete. The SABRE flight database doesn't record 2 The body can also contain numerical constraints (i.e., built-in predicates <ref> (Ullman 1988 1989, vol.1, p101) </ref>), and Occam can generate appropriately constrained plans, but we do not discuss this aspect of Occam in this paper. 3 A brief comment on notation: we follow Prolog conventions, hence symbols beginning with a capital leter denote variables. All free variables are universally quantified. <p> Underlying the operation of FindSolutions is the notion of a containment mapping between two horn clauses <ref> (Ullman 1988 1989, vol.2, p881) </ref>. A containment mapping from query Q to the formula E is a function t mapping symbols in Q to symbols in E.
References-found: 17

