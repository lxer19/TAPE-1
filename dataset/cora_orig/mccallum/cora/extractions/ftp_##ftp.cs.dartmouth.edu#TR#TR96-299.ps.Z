URL: ftp://ftp.cs.dartmouth.edu/TR/TR96-299.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR96-299/
Root-URL: http://www.cs.dartmouth.edu
Title: A Critique of the Telecommunication Description Language (TeD)  
Author: Brian J. Premore, David M. Nicol, Xiaowen Liu 
Affiliation: Department of Computer Science Dartmouth College  
Note: PCS-TR96-299  
Abstract: Dartmouth College Computer Science Technical Report Abstract TeD is an object-oriented description language designed to facilitate the modeling of large scale telecommunication networks, with simulation on parallel and distributed platforms. TeD models are mapped to the Georgia Tech Time Warp engine (GTW) for execution. In this paper we outline the features of TeD, pointing out its strengths and identifying characteristics that gave us trouble as we used TeD to model detailed networks. Our issues are motivated specifically by a model of TCP and a model of multicast resource allocation. Our intention is to illustrate by example what TeD can do, and characteristics that a potential TeD user should be aware of.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Das, K. Panesar, D. Allison, and M. Hybinette. GTW: </author> <title> A Time Warp system for Shared Memory Multiprocessors. </title> <booktitle> In 1994 Winter Simulation Conference Proceedings, </booktitle> <pages> pp. 1332-1339, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: It achieves a rich expressiveness by allowing the incorporation of general C or C++ code that manipulates TeD model constructs. TeD models are run in parallel, automatically, by being transformed into GTW (Georgia Tech Time Warp) models. Programming interfaces for parallel discrete event simulation (GTW <ref> [1, 7] </ref>, U.P.S. [4]) frequently leave low-level details in control of the programmer. While a low-level API can be advantageous in giving the programmer some control over the optimization of a simulation, it can at the same time be burdensome.
Reference: [2] <author> R. Fujimoto. </author> <title> Parallel Discrete-Event Simulation:Will the Field Survive?. </title> <journal> In ORSA Journal on Computing, </journal> <volume> 5(3) </volume> <pages> 213-230, </pages> <year> 1993. </year>
Reference-contexts: Its object-oriented nature and separation of structure from behavior make 9 it a modular system, its components reusable and interchangeable. Though TeD is a step toward Fujimoto's "Holy Grail" <ref> [2] </ref> of a completely transparent interface, our experience is that it currently makes some implementation decisions that negatively impact our ability to model, and that in the special case of load management it takes away control only to handle the problem naively while leaving the modeler helpless.
Reference: [3] <author> D. R. Jefferson, B. Beckman, F. Wieland, L. Blume, M. DiLorento, P. Hontalas, P. Reiher, K. Sturdevant, J. Tupman, J.Wedel, and H. Younger. </author> <title> The Time Warp Operating System. </title> <booktitle> 11th Symposium on Operating Systems Principles 21(5) </booktitle> <pages> 77-93, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Although structures such as classes and structs are not restricted anywhere, they do lose some of their usefulness as a result of the memory allocation/deallocation restriction. Dynamic memory allocation in optimistic parallel simulation was a problem solved by the Time Warp Operating System project <ref> [3] </ref> (TWOS), the solutions developed there ought to be provided in TeD and GTW. One context in which the use of pointers seems simple, however, is in the external variable declarations of an event/message. Allowing pointers in this context would be very useful to the TCP model.
Reference: [4] <author> D. Nicol and P. Heidelberger. </author> <title> On Extending Parallelism to Serial Simulations. </title> <booktitle> Proceedings of the 1995 Workshop on Parallel and Distributed Simulation, </booktitle> <pages> pp. 60-67, </pages> <month> June, </month> <year> 1995. </year>
Reference-contexts: It achieves a rich expressiveness by allowing the incorporation of general C or C++ code that manipulates TeD model constructs. TeD models are run in parallel, automatically, by being transformed into GTW (Georgia Tech Time Warp) models. Programming interfaces for parallel discrete event simulation (GTW [1, 7], U.P.S. <ref> [4] </ref>) frequently leave low-level details in control of the programmer. While a low-level API can be advantageous in giving the programmer some control over the optimization of a simulation, it can at the same time be burdensome.
Reference: [5] <author> K. Perumalla, R. Fujimoto, A. Ogielski. </author> <title> MetaTeD|A Meta Language for Modeling Telecommunication Networks. </title> <institution> College of Computing, Georgia Institute of Technology, and Bell Communications Research, </institution> <year> 1996. </year>
Reference: [6] <author> K. Perumalla, R. Fujimoto. </author> <title> A C++ Instance of TeD. </title> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference: [7] <author> K. Perumalla, R. Fujimoto. </author> <title> GTW++|An Object-oriented Interface in C++ to the Georgia Tech Time Warp System. </title> <institution> GIT-CC-96-09, College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year> <month> 10 </month>
Reference-contexts: It achieves a rich expressiveness by allowing the incorporation of general C or C++ code that manipulates TeD model constructs. TeD models are run in parallel, automatically, by being transformed into GTW (Georgia Tech Time Warp) models. Programming interfaces for parallel discrete event simulation (GTW <ref> [1, 7] </ref>, U.P.S. [4]) frequently leave low-level details in control of the programmer. While a low-level API can be advantageous in giving the programmer some control over the optimization of a simulation, it can at the same time be burdensome.
References-found: 7

