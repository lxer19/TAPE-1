URL: http://www.iscs.nus.edu.sg/~liub/publications/ijcai95.rut.ps
Refering-URL: 
Root-URL: 
Title: Using Knowledge to Isolate Search in Route Finding  
Author: Bing Liu 
Address: Lower Kent Ridge Road, Singapore 0511 Republic of Singapore  
Affiliation: Department of Information Systems and Computer Science National University of Singapore  
Abstract: Traveling is a part of every person's day-to-day life. With the massive and complicated road network of a modern city (or country), finding a good route to travel from one place to another is not a simple task. In Network Theory, this is the shortest path problem. Shortest path algorithms are often used to solve the problem. However, these algorithms are wasteful in terms of computation when applied to the route finding task. They may also produce solutions that are not suitable for human drivers. In this paper, we present an approach that uses knowledge about the road network to substantially reduce the time and space required in computation, and to ensure human oriented solutions. Within this framework, three alternative methods are proposed, which may be used in different situations. A system has also been implemented for route finding in Singapore.
Abstract-found: 1
Intro-found: 1
Reference: [Deo and Pang, 1984] <author> N. Deo and C. Pang. </author> <title> Shortest path algorithms: taxonomy and annotation. </title> <journal> Networks, </journal> <volume> 14 </volume> <pages> 257-323, </pages> <year> 1984. </year>
Reference-contexts: It is estimated that excess travel amounted 83.5 billion miles and 914,000 person-years annually at a total estimated cost of more than 45 billion dollars per year in United States [King and Mast, 1987]. In Network Theory, route finding is a shortest path problem <ref> [Deo and Pang, 1984; Dial et al., 1979] </ref>. Algorithms, such as Dijkstra algorithm [Deo and Pang, 1984] and A* [Pearl, 1988], are often used for solving this problem. However, these algorithms are general algorithms. They are wasteful in terms of computation when applied to the route finding task. <p> In Network Theory, route finding is a shortest path problem [Deo and Pang, 1984; Dial et al., 1979]. Algorithms, such as Dijkstra algorithm <ref> [Deo and Pang, 1984] </ref> and A* [Pearl, 1988], are often used for solving this problem. However, these algorithms are general algorithms. They are wasteful in terms of computation when applied to the route finding task.
Reference: [Dial et al., 1979] <author> R. Dial, F. Glover, D. Karney, and D. Klingman. </author> <title> A computational analysis of alternative algorithms and labeling techniques for finding shortest path trees. </title> <journal> Networks, </journal> <volume> 9 </volume> <pages> 215-25, </pages> <year> 1979. </year>
Reference-contexts: It is estimated that excess travel amounted 83.5 billion miles and 914,000 person-years annually at a total estimated cost of more than 45 billion dollars per year in United States [King and Mast, 1987]. In Network Theory, route finding is a shortest path problem <ref> [Deo and Pang, 1984; Dial et al., 1979] </ref>. Algorithms, such as Dijkstra algorithm [Deo and Pang, 1984] and A* [Pearl, 1988], are often used for solving this problem. However, these algorithms are general algorithms. They are wasteful in terms of computation when applied to the route finding task. <p> This algorithm can solve the problem in O ((|A| + |N|)log|N|) steps by using a binary heap [Sedgewick, 1988] for sparse networks (road networks are sparse networks). In our research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 <ref> [Dial et al., 1979; Gallo, and Pallottino, 1986] </ref>, S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. For road networks, A* is the most efficient algorithm. <p> In our research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 <ref> [Dial et al., 1979; Gallo, and Pallottino, 1986] </ref>, S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. For road networks, A* is the most efficient algorithm. Interested reader, please see their performance comparisons in [Liu and Tay, 1995]. <p> Related Work Shortest path problem has been studied extensively in Network Theory over the past three decades. Many efficient algorithms have been produced <ref> [e.g., Dial et al., 1979; Gallo, and Pallottino, 1986; Pearl, 1988] </ref>. However, limited research has been done in adapting these algorithms for route finding purposes. In AI, a number of studies have also been made.
Reference: [Gallo, and Pallottino, 1986] <author> G. Gallo, and S. Pallottino. </author> <title> Shortest path methods: a unified approach. </title> <journal> Mathematical Programming Study, </journal> <volume> 26 </volume> <pages> 38-64, </pages> <year> 1986. </year>
Reference-contexts: Most of the others are variations of Dijkstra algorithm. This algorithm can solve the problem in O ((|A| + |N|)log|N|) steps by using a binary heap [Sedgewick, 1988] for sparse networks (road networks are sparse networks). In our research, we have implemented many well-known algorithms, including Dijkstra algorithm <ref> [Gallo, and Pallottino, 1986; Sedgewick, 1988] </ref>, S1 [Dial et al., 1979; Gallo, and Pallottino, 1986], S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. <p> This algorithm can solve the problem in O ((|A| + |N|)log|N|) steps by using a binary heap [Sedgewick, 1988] for sparse networks (road networks are sparse networks). In our research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 <ref> [Dial et al., 1979; Gallo, and Pallottino, 1986] </ref>, S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. For road networks, A* is the most efficient algorithm. <p> In our research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 <ref> [Dial et al., 1979; Gallo, and Pallottino, 1986] </ref>, S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. For road networks, A* is the most efficient algorithm. Interested reader, please see their performance comparisons in [Liu and Tay, 1995]. <p> Related Work Shortest path problem has been studied extensively in Network Theory over the past three decades. Many efficient algorithms have been produced <ref> [e.g., Dial et al., 1979; Gallo, and Pallottino, 1986; Pearl, 1988] </ref>. However, limited research has been done in adapting these algorithms for route finding purposes. In AI, a number of studies have also been made.
Reference: [Goel et al., 1991] <author> A.K. Goel, T.J. Callantine, M. Shankar and B. Chandrasekaran. </author> <title> Representation, organization, and use of topographic models of physical spaces for route planning. </title> <booktitle> In Proceedings of the 7th Conference on Artificial Intelligence for Applications (CAIA-91), </booktitle> <pages> pages 308-314, </pages> <year> 1991. </year>
Reference: [Hayes-Roth et al., 1983] <editor> F. Hayes-Roth, D.A. Waterman, and D.B. Lenat (eds), </editor> <title> Building Expert Systems, </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: We believe that one of the reasons is that Dijkstra algorithm, A* and others are already relatively efficient for the task. In the past, knowledge-based approach has been mostly applied for solving problems that do not have efficient algorithmic solutions <ref> [Hayes-Roth et al., 1983; Winston, 1992] </ref>. However, from our experiences, we can say that although Dijkstra algorithm (or A*) is efficient, knowledge-based approach can be successfully incorporated to produce even more efficient solution methods. <p> They may produce solutions unsuitable for human users as they may use too many minor roads, which is against the human preference of traveling on major roads. Knowledge-based problem solving <ref> [Hayes-Roth et al., 1983; Winston, 1992] </ref> emphasizes the use of human problem solving strategies on a computer. This technology has been used in many applications. However, for route finding, using knowledge-based approach alone will not be efficient.
Reference: [Helgason et al., 1993] <author> R.V. Helgason, J. L Kennington and B. D Stewart. </author> <title> The one-to-one shortest-path problems: an empirical analysis with the two-tree Dijkstra algorithm. </title> <journal> Computational Optimization and Applications, </journal> <volume> 1 </volume> <pages> 45-75, </pages> <year> 1993. </year>
Reference-contexts: In our research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 [Dial et al., 1979; Gallo, and Pallottino, 1986], S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 <ref> [Helgason et al., 1993] </ref>, S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. For road networks, A* is the most efficient algorithm. Interested reader, please see their performance comparisons in [Liu and Tay, 1995]. Although these algorithms are relatively efficient, applying them directly to route finding is not appropriate. <p> In our research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 [Dial et al., 1979; Gallo, and Pallottino, 1986], S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 <ref> [Helgason et al., 1993] </ref>, S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. For road networks, A* is the most efficient algorithm. Interested reader, please see their performance comparisons in [Liu and Tay, 1995]. Although these algorithms are relatively efficient, applying them directly to route finding is not appropriate.
Reference: [King and Mast, 1987] <author> G. F King and T. M Mast. </author> <title> Excess travel: causes, extent, and consequences. </title> <journal> Transportation Research Record, </journal> <volume> 1111 </volume> <pages> 126-134, </pages> <year> 1987. </year>
Reference-contexts: It is estimated that excess travel amounted 83.5 billion miles and 914,000 person-years annually at a total estimated cost of more than 45 billion dollars per year in United States <ref> [King and Mast, 1987] </ref>. In Network Theory, route finding is a shortest path problem [Deo and Pang, 1984; Dial et al., 1979]. Algorithms, such as Dijkstra algorithm [Deo and Pang, 1984] and A* [Pearl, 1988], are often used for solving this problem. However, these algorithms are general algorithms.
Reference: [Kuipers, 1978] <author> B. Kuipers, </author> <title> Modeling spatial knowledge. </title> <journal> Cognitive Science, </journal> <volume> 2(2) </volume> <pages> 129-154, </pages> <year> 1978. </year>
Reference: [Levitt, and Lawton, 1990] <author> T Levitt, and D. Lawton. </author> <title> Qualitative navigation for mobile robots. </title> <journal> Artificial Intelligence, </journal> <volume> 44(3) </volume> <pages> 305-360, </pages> <year> 1990. </year>
Reference: [Liu et al., 1994] <author> Bing Liu, et al. </author> <title> Finding the shortest route using cases, knowledge, and Dijkstras algorithm. </title> <journal> IEEE Expert, </journal> <volume> 9(5) </volume> <pages> 7-11, </pages> <year> 1994. </year>
Reference-contexts: Our approach also offers a way to partition the whole network into small subnetworks that can be stored separately. This will be important for large networks. The work reported in this paper is a continuation of our earlier R-Finder system <ref> [Liu et al., 1994] </ref>, which uses Dijkstra algorithm, knowledge-based technique and case--based reasoning for route finding. KB-RFinder has made many improvements over R-Finder. The most important improvement is on the grid formation.
Reference: [Liu and Tay, 1995] <author> Bing Liu and Jimmy Tay. </author> <title> Integrating knowledge-based and algorithmic approaches for route finding. </title> <type> Forthcoming Report, </type> <year> 1995. </year>
Reference-contexts: For road networks, A* is the most efficient algorithm. Interested reader, please see their performance comparisons in <ref> [Liu and Tay, 1995] </ref>. Although these algorithms are relatively efficient, applying them directly to route finding is not appropriate. They are wasteful in terms of computation as in real situations it is not necessary to search through the whole network in order to find the solution. <p> Linking each grid subnetwork to MRN in (2) of Step 1 or Step 2 is only linear to the number of major network nodes that surround the grid. The computation required is very small and negligible. Implementation details of this link-up operation can be found in <ref> [Liu and Tay, 1995] </ref>. Step 4 is also negligible. So, the main computation comes from the shortest path algorithm (e.g., A*). Because the number of nodes and arcs have been substantially reduced, it will run much faster than with the complete network. Method 2 . <p> Out of this, about 1100 nodes are major road junctions forming MRN. The number of grids formed is 958. The system is implemented in C on a 486 PC. Due to the space limitation, we are not able to describe the system in detail. Interested reader, please refer to <ref> [Liu and Tay, 1995] </ref>. Here, we concentrate on the evaluation of the proposed techniques. We have implemented all the three methods. The second method was implemented by storing the grid subnetworks in the hard disk of our PC.
Reference: [McDermott and Davis, 1984] <author> D. McDermott and E. Davis. </author> <title> Planning routes through uncertain territory. </title> <journal> Artificial Intelligence, </journal> <volume> 22 </volume> <pages> 107-156, </pages> <year> 1984 </year>
Reference: [Pearl, 1988] <author> J. Pearl. </author> <title> Heuristics. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year>
Reference-contexts: In Network Theory, route finding is a shortest path problem [Deo and Pang, 1984; Dial et al., 1979]. Algorithms, such as Dijkstra algorithm [Deo and Pang, 1984] and A* <ref> [Pearl, 1988] </ref>, are often used for solving this problem. However, these algorithms are general algorithms. They are wasteful in terms of computation when applied to the route finding task. Most of the routes searched by the algorithms are actually irrelevant as they cannot possibly be part of the solution. <p> In our research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 [Dial et al., 1979; Gallo, and Pallottino, 1986], S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* <ref> [Pearl, 1988] </ref>, S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971]. For road networks, A* is the most efficient algorithm. Interested reader, please see their performance comparisons in [Liu and Tay, 1995]. <p> Related Work Shortest path problem has been studied extensively in Network Theory over the past three decades. Many efficient algorithms have been produced <ref> [e.g., Dial et al., 1979; Gallo, and Pallottino, 1986; Pearl, 1988] </ref>. However, limited research has been done in adapting these algorithms for route finding purposes. In AI, a number of studies have also been made.
Reference: [Pohl, 1971] <author> I. Pohl. </author> <title> Bidirectional search. </title> <booktitle> Machine Intelligence, </booktitle> <editor> B Meltzer and D. Michie (eds), </editor> <volume> 6 </volume> <pages> 127-140, </pages> <year> 1971. </year>
Reference-contexts: research, we have implemented many well-known algorithms, including Dijkstra algorithm [Gallo, and Pallottino, 1986; Sedgewick, 1988], S1 [Dial et al., 1979; Gallo, and Pallottino, 1986], S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* <ref> [Pohl, 1971] </ref>. For road networks, A* is the most efficient algorithm. Interested reader, please see their performance comparisons in [Liu and Tay, 1995]. Although these algorithms are relatively efficient, applying them directly to route finding is not appropriate.
Reference: [Sedgewick, 1988] <author> R. Sedgewick. </author> <title> Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Dijkstra algorithm is the classical algorithm for the problem. Most of the others are variations of Dijkstra algorithm. This algorithm can solve the problem in O ((|A| + |N|)log|N|) steps by using a binary heap <ref> [Sedgewick, 1988] </ref> for sparse networks (road networks are sparse networks). <p> Most of the others are variations of Dijkstra algorithm. This algorithm can solve the problem in O ((|A| + |N|)log|N|) steps by using a binary heap [Sedgewick, 1988] for sparse networks (road networks are sparse networks). In our research, we have implemented many well-known algorithms, including Dijkstra algorithm <ref> [Gallo, and Pallottino, 1986; Sedgewick, 1988] </ref>, S1 [Dial et al., 1979; Gallo, and Pallottino, 1986], S2 [Dial et al., 1979; Gallo, and Pallottino, 1986], and A* [Pearl, 1988], S12 [Helgason et al., 1993], S22 [Helgason et al., 1993], bidirectional A* [Pohl, 1971].
Reference: [Shapiro et al., 1992] <author> J. Shapiro, J. Waxman, and D. </author> <title> Nir. Level graphs and approximate shortest path algorithm. </title> <journal> Networks, </journal> <volume> 22: </volume> <pages> 691-717, </pages> <year> 1992. </year>
Reference-contexts: Their emphasis has been on using topographic and geographic knowledge and reasoning to solve the problem [Kuipers, 1978; Levitt, and Lawton, 1990; McDermott and Davis, 1984; Goel et al., 1991]. The major concerns in AI are spatial knowledge representation and reasoning, rather than efficiency and optimization. <ref> [Shapiro et al., 1992] </ref>, which is the latest work we could find in network theory and its applications, propose a technique to use level structure of the road network to help searching for a path efficiently. Applying their technique to our problem, it will be like this.
Reference: [Winston, 1992] <author> P.H. Winston. </author> <booktitle> Artificial Intelligence, Third Edition. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: We believe that one of the reasons is that Dijkstra algorithm, A* and others are already relatively efficient for the task. In the past, knowledge-based approach has been mostly applied for solving problems that do not have efficient algorithmic solutions <ref> [Hayes-Roth et al., 1983; Winston, 1992] </ref>. However, from our experiences, we can say that although Dijkstra algorithm (or A*) is efficient, knowledge-based approach can be successfully incorporated to produce even more efficient solution methods. <p> They may produce solutions unsuitable for human users as they may use too many minor roads, which is against the human preference of traveling on major roads. Knowledge-based problem solving <ref> [Hayes-Roth et al., 1983; Winston, 1992] </ref> emphasizes the use of human problem solving strategies on a computer. This technology has been used in many applications. However, for route finding, using knowledge-based approach alone will not be efficient.
References-found: 17

