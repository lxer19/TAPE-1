URL: ftp://rtcl.eecs.umich.edu/outgoing/sdawson/csesaw94.ps.gz
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.cs.umich.edu
Email: fsdawson,farnamg@eecs.umich.edu  
Title: Testing and Fault Injection of Distributed Protocols  
Author: Scott Dawson and Farnam Jahanian 
Keyword: distributed systems, protocol testing, fault injection, executable specifications  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Electrical Engineering and Computer Science Department University of Michigan  
Abstract: A growing challenge confronting designers and implementors of safety-critical distributed systems is the evaluation and validation of dependability requirements. This paper address the problem of testing fault-tolerance capabilities of distributed protocols. It introduces a general framework for fault injection and testing of distributed systems and it describes an ongoing development of a tool based on the framework. The tool can be inserted between any two layers of a protocol stack, and it can be used to inject faults into the system by observing and manipulating messages that are exchanged between the two layers. Existing approaches to fault injection often handle memory and CPU faults. Most current approaches for testing distributed protocols do not allow the manipulation of the protocol into specific states since they depend primarily on random testing to obtain certain coverage. This makes testing of distributed protocols difficult because some states in the protocol are hard to reach simply by probabilistically dropping or delaying packets, or by randomly testing execution paths. We are evolving toward a method which will make it easier for the tester to manipulate protocols into hard to reach states during a test. Other features of this tool include the support for both probabilistic and deterministic testing of distributed protocols, user-defined test scripts that can guide the analysis at run-time, and executable specifications that can emulate a participant in a distributed protocol.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Arlat, Y. Crouzet, and J.-C. Laprie, </author> <title> "Fault injection for dependability validation of fault-tolerant computing systems.," </title> <booktitle> in Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pp. 348-355, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Numerous approaches have been proposed in the past for evaluating and validation of system dependability including formal methods, analytical modeling, and experimental methods. Techniques based on fault-injection have been proposed to test fault-tolerance capabilities of system. Hardware fault-injection <ref> [12, 6, 1] </ref> and simulation approaches for injecting hardware failures have received much attention in the past. Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components [9].
Reference: [2] <author> D. Avresky, J. Arlat, J. Laprie, and Y. Crouzet, </author> <title> "Fault injection for the formal testing of fault tolerance," </title> <booktitle> in Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pp. 345-354. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components [9]. However, fault-injection and testing dependability of distributed systems has received very little attention until recently <ref> [5, 4, 2, 7] </ref>. Our work is motivated by several observations: * In testing a distributed system, one may wish to coerce the system into certain states to ensure that specific paths are executed.
Reference: [3] <author> R. Chillarege and N. S. Bowen, </author> <title> "Understanding large system failures | a fault injection experiment," </title> <booktitle> in Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pp. 356-363, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Techniques based on fault-injection have been proposed to test fault-tolerance capabilities of system. Hardware fault-injection [12, 6, 1] and simulation approaches for injecting hardware failures have received much attention in the past. Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors <ref> [3, 11] </ref>. Others have emulated fault-injection into CPU components [9]. However, fault-injection and testing dependability of distributed systems has received very little attention until recently [5, 4, 2, 7].
Reference: [4] <author> K. Echtle and Y. Chen, </author> <title> "Evaluation of deterministic fault injection for fault-tolerant protocol testing," </title> <booktitle> in Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pp. 418-425. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components [9]. However, fault-injection and testing dependability of distributed systems has received very little attention until recently <ref> [5, 4, 2, 7] </ref>. Our work is motivated by several observations: * In testing a distributed system, one may wish to coerce the system into certain states to ensure that specific paths are executed.
Reference: [5] <author> K. Echtle and M. Leu, </author> <title> "The EFA fault injector for fault-tolerant distributed system testing," </title> <booktitle> in Workshop on Fault-Tolerant Parallel and Distributed Systems, </booktitle> <pages> pp. 28-35. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components [9]. However, fault-injection and testing dependability of distributed systems has received very little attention until recently <ref> [5, 4, 2, 7] </ref>. Our work is motivated by several observations: * In testing a distributed system, one may wish to coerce the system into certain states to ensure that specific paths are executed.
Reference: [6] <author> G. Finelli, </author> <title> "Characterization of fault recovery through fault injection on ftmp," </title> <journal> IEEE Trans. Reliability, </journal> <volume> vol. 36, no. 2, </volume> <pages> pp. 164-170, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Numerous approaches have been proposed in the past for evaluating and validation of system dependability including formal methods, analytical modeling, and experimental methods. Techniques based on fault-injection have been proposed to test fault-tolerance capabilities of system. Hardware fault-injection <ref> [12, 6, 1] </ref> and simulation approaches for injecting hardware failures have received much attention in the past. Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components [9].
Reference: [7] <author> S. Han, H. A. Rosenberg, and K. G. Shin, "DOCTOR: </author> <title> An integrateD sOftware fault injeCTOn enviRonment," </title> <type> Technical Report CSE-TR-192-93, </type> <institution> The University of Michigan, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components [9]. However, fault-injection and testing dependability of distributed systems has received very little attention until recently <ref> [5, 4, 2, 7] </ref>. Our work is motivated by several observations: * In testing a distributed system, one may wish to coerce the system into certain states to ensure that specific paths are executed.
Reference: [8] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> "The x-Kernel: An architecture for implementing network protocols," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 17, no. 1, </volume> <pages> pp. 1-13, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: allows testing of a protocol without having to instrument the code of the protocol with test code. 2 Approach We view a distributed protocol as a specification of a communication abstraction through which a collection of participants exchange a set of messages, much in the same spirit as the x-Kernel <ref> [8] </ref>. In this model, we make no distinction between application-level protocols, interprocess communication protocols, network protocols, or device layer protocols. As shown in Figure 1, each protocol is specified as part of a protocol stack. In the figure, both machines are running a set of protocols. <p> What kinds of hooks protocol designers might want to include in their protocols is one of the subjects of this research. 3 Implementation In the current implementation, the driver and fault injection layers are implemented as protocol layers of the x-Kernel <ref> [8] </ref>. x-Kernel was chosen because of the ease of changing the protocol stack to accommodate new layers. The fault injection layer uses Tcl [10] as the interpreter for the scripts which run when messages are pushed/popped into it.
Reference: [9] <author> G. Kanawati, N. Kanawati, and J. Abraham, "FERRARI: </author> <title> A tool for the validation of system dependability properties," </title> <booktitle> in Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pp. 336-344. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: Hardware fault-injection [12, 6, 1] and simulation approaches for injecting hardware failures have received much attention in the past. Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components <ref> [9] </ref>. However, fault-injection and testing dependability of distributed systems has received very little attention until recently [5, 4, 2, 7]. Our work is motivated by several observations: * In testing a distributed system, one may wish to coerce the system into certain states to ensure that specific paths are executed.
Reference: [10] <author> J. K. Ousterhout, </author> <title> "Tcl: An embeddable command language," </title> <booktitle> in Winter USENIX Conference, </booktitle> <pages> pp. 133-146, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: The fault injection layer uses Tcl <ref> [10] </ref> as the interpreter for the scripts which run when messages are pushed/popped into it. Tcl was used because the Tcl interpreter is embeddable in C code and the Tcl language is easy to write scripts in.
Reference: [11] <author> Z. Segall et al., </author> <title> "Fiat fault injection based automated testing environment," </title> <booktitle> in FTCS-18, </booktitle> <pages> pp. 102-107, </pages> <year> 1988. </year>
Reference-contexts: Techniques based on fault-injection have been proposed to test fault-tolerance capabilities of system. Hardware fault-injection [12, 6, 1] and simulation approaches for injecting hardware failures have received much attention in the past. Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors <ref> [3, 11] </ref>. Others have emulated fault-injection into CPU components [9]. However, fault-injection and testing dependability of distributed systems has received very little attention until recently [5, 4, 2, 7].
Reference: [12] <author> K. G. Shin and Y.-C. Chang, </author> <title> "Load sharing in distributed real-time systems with state change braodcasts," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-38, no. 8, </volume> <pages> pp. 1124-1142, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Numerous approaches have been proposed in the past for evaluating and validation of system dependability including formal methods, analytical modeling, and experimental methods. Techniques based on fault-injection have been proposed to test fault-tolerance capabilities of system. Hardware fault-injection <ref> [12, 6, 1] </ref> and simulation approaches for injecting hardware failures have received much attention in the past. Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors [3, 11]. Others have emulated fault-injection into CPU components [9].
References-found: 12

