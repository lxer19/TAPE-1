URL: http://www.robotics.stanford.edu/~murali/papers/new-rects-bsp.ps.gz
Refering-URL: http://www.robotics.stanford.edu/~murali/papers/papers.html
Root-URL: http://www.robotics.stanford.edu
Email: Email: ftmax,pankaj,jsvg@cs.duke.edu  
Title: Constructing Binary Space Partitions for Orthogonal Rectangles in Practice  
Author: T. M. Murali Pankaj K. Agarwal Jeffrey Scott Vitter 
Web: WWW: http://www.cs.duke.edu/~ftmax,pankaj,jsvg  
Address: Box 90129, Durham, NC 27708-0129  
Affiliation: Center for Geometric Computing Department of Computer Science, Duke University  
Abstract: In this paper, we develop a simple technique for constructing a Binary Space Partition (BSP) for a set of orthogonal rectangles in R 3 . Our algorithm has the novel feature that it tunes its performance to the geometric properties of the rectangles, e.g., their aspect ratios. We have implemented our algorithm and tested its performance on real data sets. We have also systematically compared the performance of our algorithm with that of other techniques presented in the literature. Our studies show that our algorithm constructs BSPs of near-linear size and small height in practice, has fast running times, and answers queries efficiently. It is a method of choice for constructing BSPs for orthogonal rectangles. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> P. K. Agarwal, E. F. Grove, T. M. Murali, and J. S. Vitter, </author> <title> Binary space partitions for fat rectangles, </title> <booktitle> Proc. 37th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <month> October </month> <year> 1996, </year> <pages> pp. 482-491. </pages>
Reference-contexts: They show that a BSP of size fi (n 2 ) can be constructed for n disjoint triangles in R 3 [17] and that a BSP of size fi (n p n) can be constructed for n non-intersecting, orthogonal rectangles in R 3 [18]. Agarwal et al. <ref> [1] </ref> consider the problem of constructing BSPs for fat rectangles. A rectangle is said to be fat if its aspect ratio is at most ff, for some constant ff 1; otherwise, it is said to be thin. <p> Our algorithm has the useful property that it tunes its performance to the geometric structure present in the input, e.g., the aspect ratios of the input rectangles. While Agarwal et al. <ref> [1] </ref> use similar ideas, our algorithm is considerably simpler than theirs and is much more easy to implement. Moreover, our 1 For each internal node v, we store the description of the polytope R v . <p> We also show that a slightly modified version of our algorithm constructs a BSP of size n p p log n ) for a set of n m fat and n thin orthogonal rectangles in R 3 , achieving the same bound as the algorithm of Agarwal et al. <ref> [1] </ref>. We have implemented our algorithm to study its performance on "real" data sets. Our experiments show that our algorithm is practical: it constructs a BSP of near-linear size on real data sets (the size varies between 1:5 and 1:8 times the number of input rectangles). <p> We first give some definitions, most of which are borrowed from Agarwal et al. <ref> [1] </ref>. We will often focus on a box B and construct a BSP for the rectangles intersecting it. We use S B to denote the set fs " B j s 2 Sg of rectangles obtained by clipping the rectangles in S within B. <p> class in F B is large, we split B into two boxes B 1 and B 2 such that (B i ) 2 (B)=3, for i = 1; 2. 2 If there is no such line `, we can prove that F B contains at most two classes of rectangles <ref> [1] </ref>. The intuition behind Steps 3-5 is that when B contains more short rectangles than long rectangles, we partition B into boxes that contain roughly half the number of short rectangles as B (but possibly as many long rectangles as B). <p> Furthermore, when m of the rectangles in S are thin, we can further modify our algorithm to construct a BSP of size n p p The analysis is similar to that of Agarwal et al. <ref> [1] </ref>. We believe that the size of the BSP constructed by the simpler algorithm New is also n p p However, we have been unable to prove this claim so far. <p> Rounds: We briefly describe the algorithm of Agarwal et al. <ref> [1] </ref>. Their algorithm proceeds in rounds. Each round partitions a box B using a sequence of cuts in two stages, the separating stage and the dividing stage. <p> A new round is executed recursively in each of these boxes. See Agarwal et al. <ref> [1] </ref> for more details. Below, we refer to their technique as algorithm Rounds. Our implementations of these algorithms are efficient in terms of running time because we exploit the fact that we are constructing BSPs for orthogonal rectangles. <p> Note that we can prove that algorithms New and Rounds construct BSPs whose height is logarithmic in the number of rectangles in S <ref> [1] </ref>. Such guarantees are crucial to extending these BSP-construction algorithms to scenarios when the input rectangles move or are inserted into and deleted from the BSP. Clearly, there is a tradeoff between the amount of time spent on constructing the BSP and the size of the resulting BSP.
Reference: 2. <author> P. K. Agarwal and S. Suri, </author> <title> Surface approximation and geometric partitions, </title> <booktitle> Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 24-33. </pages>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination [3, 21], and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification <ref> [2] </ref>. The BSP has ? A preliminary version of this paper appeared as a communication in the Proceedings of the 13th Annual ACM Symposium on Computational Geometry, 1997, pages 382 384. ?? This author is affiliated with Brown University.
Reference: 3. <author> J. M. Airey, </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic Model-space Subdivision and Potentially Visible Set Calculations, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of North Carolina, Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination <ref> [3, 21] </ref>, and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification [2]. <p> Therefore, several techniques to construct BSPs of small size and height have been developed <ref> [3, 10, 21, 22] </ref>. These techniques may construct a BSP of size (n 3 ) for some instances of n triangles. The first algorithms with non-trivial provable bounds on the size of a BSP were developed by Paterson and Yao. <p> On the other hand, the algorithm of Agarwal et al. is more "global" in nature: to determine how to partition a node v, it uses splitting planes computed at ancestors of v in the BSP. Other "local" algorithms presented in the literature <ref> [3, 21, 22] </ref> can be easily incorporated into the framework of our algorithm but not into the Agarwal et al. algorithm. <p> Our experiments show that our algorithm performs better than not only theoretical algorithms like that of Paterson and Yao [18] but also most other techniques described in the literature <ref> [3, 10, 22] </ref>. The only algorithm that performs better than our algorithm on some data sets is Teller's algorithm [21]; even in these cases, our algorithm has certain advantages in terms of the trade-off between the size of the BSP and query times (see Section 4). <p> Maximize the measure f + f wf . This measure is very similar to the previous one, except that it gives more weight to constructing a balanced BSP. In our experiments, we use w = 8, as suggested by Thibault and Naylor [22]. Airey: Airey <ref> [3] </ref> proposes a measure function that is a linear combination of a plane's occlusion factor, its balance, and its split factor: 0:5ff +0:3fi +0:2oe : Teller: Let 0 o 1 be a real number. Teller [21] chooses the plane with the maximum occlusion factor ff , provided ff o .
Reference: 4. <author> A. T. Campbell, </author> <title> Modeling Global Diffuse Illumination for Image Synthesis, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Sciences, University of Texas, Austin, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) is a hierarchical partitioning of space that was originally proposed by Schumacker et al. [19] and was further refined by Fuchs et al. [10]. The BSP has been widely used in several areas, including computer graphics (global illumination <ref> [4] </ref>, shadow generation [6, 7], visibility determination [3, 21], and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification [2].
Reference: 5. <author> T. Cassen, K. R. Subramanian, and Z. Michalewicz, </author> <title> Near-optimal construction of partitioning trees by evolutionary techniques, </title> <booktitle> Proc. Graphics Interface '95, </booktitle> <year> 1995, </year> <pages> pp. 263-271. </pages>
Reference-contexts: While his idea is different from standard techniques used to construct BSPs, the measure functions he uses to choose cutting planes are very similar to the ones used in the algorithms we have implemented. Cassen et al. <ref> [5] </ref> use genetic algorithms to construct BSPs. We have not compared our algorithms to theirs since they report that their algorithm takes hours to run even for moderately-sized data sets.
Reference: 6. <author> N. Chin and S. Feiner, </author> <title> Near real-time shadow generation using BSP trees, </title> <booktitle> Proc. SIGGRAPH 89, Comput. Graph., </booktitle> <volume> Vol. 23, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1989, </year> <pages> pp. 99-106. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) is a hierarchical partitioning of space that was originally proposed by Schumacker et al. [19] and was further refined by Fuchs et al. [10]. The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation <ref> [6, 7] </ref>, visibility determination [3, 21], and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification [2].
Reference: 7. <author> N. Chin and S. Feiner, </author> <title> Fast object-precision shadow generation for areal light sources using BSP trees, </title> <booktitle> Proc. 1992 Sympos. Interactive 3D Graphics, </booktitle> <year> 1992, </year> <pages> pp. 21-30. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) is a hierarchical partitioning of space that was originally proposed by Schumacker et al. [19] and was further refined by Fuchs et al. [10]. The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation <ref> [6, 7] </ref>, visibility determination [3, 21], and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification [2].
Reference: 8. <author> M. de Berg, </author> <title> Linear size binary space partitions for fat objects, </title> <booktitle> Proc. 3rd Annu. European Sympos. Algorithms, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 979, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 252-263. </pages>
Reference-contexts: If m rectangles are thin and the rest are fat, they present an algorithm that constructs a BSP of size n p p log n ) . A related result of de Berg shows that a BSP of linear size can be constructed for fat polyhedra in R d <ref> [8] </ref>. In this paper, we consider the problem of constructing BSPs for orthogonal rectangles in R 3 . In many applications, common environments like buildings are composed largely of orthogonal rectangles. <p> Cassen et al. [5] use genetic algorithms to construct BSPs. We have not compared our algorithms to theirs since they report that their algorithm takes hours to run even for moderately-sized data sets. Note that de Berg's algorithm for constructing BSPs for fat polyhedra <ref> [8] </ref> cannot be used to solve our problem since rectangles in R 3 are not fat in his model. 4 Experimental Results We have implemented the above algorithms and run them on the following data sets containing orthogonal rectangles: 5 1. the Fifth floor of Soda Hall containing 1677 rectangles, 2.
Reference: 9. <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes, </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Further, it is a common practice (for example, in the BRL-CAD solid modeling system [13, 20]) to approximate non-orthogonal objects by their orthogonal bounding boxes, since such approximations are simple, easy to manipulate, and often serve as very faithful representations of the original objects <ref> [9] </ref>. Our paper makes two important contributions. First, we develop and implement a simple technique for constructing a BSP for orthogonal rectangles in R 3 . <p> Algorithms New and Rounds run 2-4 times faster and construct BSPs with smaller and more uniform height than algorithm Teller. Algorithm Teller is best for applications like painter's algorithm <ref> [9] </ref> in which the entire BSP is traversed. On the other hand, for queries such as ray shooting, it might be advisable to use algorithm New or Rounds since they build BSPs whose sizes are not much more than algorithm Teller's BSPs but have better height and query costs.
Reference: 10. <author> H. Fuchs, Z. M. Kedem, and B. Naylor, </author> <title> On visible surface generation by a priori tree structures, </title> <booktitle> Proc. SIGGRAPH 80, Comput. Graph., </booktitle> <volume> Vol. 14, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1980, </year> <pages> pp. 124-133. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) is a hierarchical partitioning of space that was originally proposed by Schumacker et al. [19] and was further refined by Fuchs et al. <ref> [10] </ref>. The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination [3, 21], and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification [2]. <p> Therefore, several techniques to construct BSPs of small size and height have been developed <ref> [3, 10, 21, 22] </ref>. These techniques may construct a BSP of size (n 3 ) for some instances of n triangles. The first algorithms with non-trivial provable bounds on the size of a BSP were developed by Paterson and Yao. <p> Our experiments show that our algorithm performs better than not only theoretical algorithms like that of Paterson and Yao [18] but also most other techniques described in the literature <ref> [3, 10, 22] </ref>. The only algorithm that performs better than our algorithm on some data sets is Teller's algorithm [21]; even in these cases, our algorithm has certain advantages in terms of the trade-off between the size of the BSP and query times (see Section 4).
Reference: 11. <author> C. Mata and J. S. B. Mitchell, </author> <title> Approximation algorithms for geometric tour and network design problems, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 360-369. </pages>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination [3, 21], and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design <ref> [11] </ref>, and surface simplification [2]. The BSP has ? A preliminary version of this paper appeared as a communication in the Proceedings of the 13th Annual ACM Symposium on Computational Geometry, 1997, pages 382 384. ?? This author is affiliated with Brown University.
Reference: 12. <author> T. M. Murali and T. A. Funkhouser, </author> <title> Consistent solid and boundary representations from arbitrary polygonal data, </title> <booktitle> Proc. 1997 Sympos. Interactive 3D Graphics, </booktitle> <year> 1997, </year> <pages> pp. 155-162. </pages>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination [3, 21], and ray tracing [15]), solid modeling [16, 22], geometric data repair <ref> [12] </ref>, network design [11], and surface simplification [2]. The BSP has ? A preliminary version of this paper appeared as a communication in the Proceedings of the 13th Annual ACM Symposium on Computational Geometry, 1997, pages 382 384. ?? This author is affiliated with Brown University.
Reference: 13. <author> M. J. Muus, </author> <title> Understanding the preparation and analysis of solid models, in: Techniques for Computer Graphics (D. </title> <editor> F. Rogers and R. A. Earnshaw, eds.), </editor> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: In this paper, we consider the problem of constructing BSPs for orthogonal rectangles in R 3 . In many applications, common environments like buildings are composed largely of orthogonal rectangles. Further, it is a common practice (for example, in the BRL-CAD solid modeling system <ref> [13, 20] </ref>) to approximate non-orthogonal objects by their orthogonal bounding boxes, since such approximations are simple, easy to manipulate, and often serve as very faithful representations of the original objects [9]. Our paper makes two important contributions.
Reference: 14. <author> B. Naylor, </author> <title> Constructing good partitioning trees, </title> <booktitle> Proc. Graphics Interface '93, </booktitle> <year> 1993, </year> <pages> pp. 181-191. </pages>
Reference-contexts: Naylor has proposed a technique that controls the construction of the BSP by using estimates of the costs incurred when the BSP is used to answer standard queries <ref> [14] </ref>. While his idea is different from standard techniques used to construct BSPs, the measure functions he uses to choose cutting planes are very similar to the ones used in the algorithms we have implemented. Cassen et al. [5] use genetic algorithms to construct BSPs.
Reference: 15. <author> B. Naylor and W. Thibault, </author> <title> Application of BSP trees to ray-tracing and CSG evaluation, </title> <type> Technical Report GIT-ICS 86/03, </type> <institution> Georgia Institute of Tech., School of Information and Computer Science, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination [3, 21], and ray tracing <ref> [15] </ref>), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification [2].
Reference: 16. <author> B. F. Naylor, J. Amanatides, and W. C. Thibault, </author> <title> Merging BSP trees yields polyhedral set operations, </title> <booktitle> Proc. SIGGRAPH 90, Comput. Graph., </booktitle> <volume> Vol. 24, </volume> <publisher> ACM SIG-GRAPH, </publisher> <year> 1990, </year> <pages> pp. 115-124. </pages>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination [3, 21], and ray tracing [15]), solid modeling <ref> [16, 22] </ref>, geometric data repair [12], network design [11], and surface simplification [2].
Reference: 17. <author> M. S. Paterson and F. F. Yao, </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling, </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> 485-503. </pages>
Reference-contexts: The first algorithms with non-trivial provable bounds on the size of a BSP were developed by Paterson and Yao. They show that a BSP of size fi (n 2 ) can be constructed for n disjoint triangles in R 3 <ref> [17] </ref> and that a BSP of size fi (n p n) can be constructed for n non-intersecting, orthogonal rectangles in R 3 [18]. Agarwal et al. [1] consider the problem of constructing BSPs for fat rectangles.
Reference: 18. <author> M. S. Paterson and F. F. Yao, </author> <title> Optimal binary space partitions for orthogonal objects, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 99-113. </pages>
Reference-contexts: They show that a BSP of size fi (n 2 ) can be constructed for n disjoint triangles in R 3 [17] and that a BSP of size fi (n p n) can be constructed for n non-intersecting, orthogonal rectangles in R 3 <ref> [18] </ref>. Agarwal et al. [1] consider the problem of constructing BSPs for fat rectangles. A rectangle is said to be fat if its aspect ratio is at most ff, for some constant ff 1; otherwise, it is said to be thin. <p> The second contribution of our paper is a methodical study of the empirical performance of a variety of known algorithms for constructing BSPs. Our experiments show that our algorithm performs better than not only theoretical algorithms like that of Paterson and Yao <ref> [18] </ref> but also most other techniques described in the literature [3, 10, 22]. <p> We define the occlusion factor ff to be the 3 Only Paterson and Yao's algorithm <ref> [18] </ref> originally incorporated the notion of free cuts. 4 Only Teller's algorithm [21] picked the medial plane; the other algorithms do not specify how to deal with multiple "best" planes. ratio of the total area of the rectangles in S B lying in to the area of (when is clipped within <p> The intuition behind this algorithm is that planes that are "well-covered" are unlikely to intersect many rectangles and that data sets made up of orthogonal rectangles are likely to contain many coplanar rectangles. PatersonYao: We have implemented a refined version of the algorithm of Paterson and Yao <ref> [18] </ref>. For a box B, let s x (resp., s y ; s z ) denote the number of edges of the rectangles in S B that lie in the interior of B and are parallel to the x-axis (resp., y-axis, z-axis). <p> boxes, each with measure at most (B)=4. (Paterson and Yao prove that given any axis, we can find such a cut perpendicular to that axis.) We can show that this algorithm also constructs produces BSPs of size O (n n) for n rectangles, just like Paterson and Yao's original algorithm <ref> [18] </ref>. Rounds: We briefly describe the algorithm of Agarwal et al. [1]. Their algorithm proceeds in rounds. Each round partitions a box B using a sequence of cuts in two stages, the separating stage and the dividing stage.
Reference: 19. <author> R. A. Schumacker, R. Brand, M. Gilliland, and W. Sharp, </author> <title> Study for applying computer-generated images to visual simulation, </title> <type> Tech. Rep. </type> <institution> AFHRL-TR-69-14, U.S. Air Force Human Resources Laboratory, </institution> <year> 1969. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) is a hierarchical partitioning of space that was originally proposed by Schumacker et al. <ref> [19] </ref> and was further refined by Fuchs et al. [10].
Reference: 20. <author> P. J. Tanenbaum. </author> <title> Applications of computational geometry in army research and development. Invited talk, </title> <booktitle> Second CGC Workshop on Computational Geometry, </booktitle> <year> 1997. </year>
Reference-contexts: In this paper, we consider the problem of constructing BSPs for orthogonal rectangles in R 3 . In many applications, common environments like buildings are composed largely of orthogonal rectangles. Further, it is a common practice (for example, in the BRL-CAD solid modeling system <ref> [13, 20] </ref>) to approximate non-orthogonal objects by their orthogonal bounding boxes, since such approximations are simple, easy to manipulate, and often serve as very faithful representations of the original objects [9]. Our paper makes two important contributions.
Reference: 21. <author> S. J. Teller, </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination <ref> [3, 21] </ref>, and ray tracing [15]), solid modeling [16, 22], geometric data repair [12], network design [11], and surface simplification [2]. <p> Therefore, several techniques to construct BSPs of small size and height have been developed <ref> [3, 10, 21, 22] </ref>. These techniques may construct a BSP of size (n 3 ) for some instances of n triangles. The first algorithms with non-trivial provable bounds on the size of a BSP were developed by Paterson and Yao. <p> On the other hand, the algorithm of Agarwal et al. is more "global" in nature: to determine how to partition a node v, it uses splitting planes computed at ancestors of v in the BSP. Other "local" algorithms presented in the literature <ref> [3, 21, 22] </ref> can be easily incorporated into the framework of our algorithm but not into the Agarwal et al. algorithm. <p> Our experiments show that our algorithm performs better than not only theoretical algorithms like that of Paterson and Yao [18] but also most other techniques described in the literature [3, 10, 22]. The only algorithm that performs better than our algorithm on some data sets is Teller's algorithm <ref> [21] </ref>; even in these cases, our algorithm has certain advantages in terms of the trade-off between the size of the BSP and query times (see Section 4). To compare the different algorithms, we measure the size of the BSP each algorithm constructs and the time spent in answering various queries. <p> We define the occlusion factor ff to be the 3 Only Paterson and Yao's algorithm [18] originally incorporated the notion of free cuts. 4 Only Teller's algorithm <ref> [21] </ref> picked the medial plane; the other algorithms do not specify how to deal with multiple "best" planes. ratio of the total area of the rectangles in S B lying in to the area of (when is clipped within B), the balance fi to be the ratio minff + ; f <p> Airey: Airey [3] proposes a measure function that is a linear combination of a plane's occlusion factor, its balance, and its split factor: 0:5ff +0:3fi +0:2oe : Teller: Let 0 o 1 be a real number. Teller <ref> [21] </ref> chooses the plane with the maximum occlusion factor ff , provided ff o . If there is no such plane, he chooses the plane with the minimum value of f . We use the value o = 0:5 in our implementation, as suggested by Teller.
Reference: 22. <author> W. C. Thibault and B. F. Naylor, </author> <title> Set operations on polyhedra using binary space partitioning trees, </title> <booktitle> Proc. SIGGRAPH 87, Comput. Graph., </booktitle> <volume> Vol. 21, </volume> <publisher> ACM SIG-GRAPH, </publisher> <year> 1987, </year> <pages> pp. 153-162. </pages>
Reference-contexts: The BSP has been widely used in several areas, including computer graphics (global illumination [4], shadow generation [6, 7], visibility determination [3, 21], and ray tracing [15]), solid modeling <ref> [16, 22] </ref>, geometric data repair [12], network design [11], and surface simplification [2]. <p> Therefore, several techniques to construct BSPs of small size and height have been developed <ref> [3, 10, 21, 22] </ref>. These techniques may construct a BSP of size (n 3 ) for some instances of n triangles. The first algorithms with non-trivial provable bounds on the size of a BSP were developed by Paterson and Yao. <p> On the other hand, the algorithm of Agarwal et al. is more "global" in nature: to determine how to partition a node v, it uses splitting planes computed at ancestors of v in the BSP. Other "local" algorithms presented in the literature <ref> [3, 21, 22] </ref> can be easily incorporated into the framework of our algorithm but not into the Agarwal et al. algorithm. <p> Our experiments show that our algorithm performs better than not only theoretical algorithms like that of Paterson and Yao [18] but also most other techniques described in the literature <ref> [3, 10, 22] </ref>. The only algorithm that performs better than our algorithm on some data sets is Teller's algorithm [21]; even in these cases, our algorithm has certain advantages in terms of the trade-off between the size of the BSP and query times (see Section 4). <p> We now discuss how each algorithm measures how good a plane is. ThibaultNaylor: We discuss two of the three heuristics that Thibault and Nay-lor <ref> [22] </ref> present (the third performed poorly in our experiments). Below, w is a positive weight that can be changed to tune the performance of the heuristics. 1. Pick a plane the minimizes the function jf + f j + wf . <p> Maximize the measure f + f wf . This measure is very similar to the previous one, except that it gives more weight to constructing a balanced BSP. In our experiments, we use w = 8, as suggested by Thibault and Naylor <ref> [22] </ref>. Airey: Airey [3] proposes a measure function that is a linear combination of a plane's occlusion factor, its balance, and its split factor: 0:5ff +0:3fi +0:2oe : Teller: Let 0 o 1 be a real number.
References-found: 22

