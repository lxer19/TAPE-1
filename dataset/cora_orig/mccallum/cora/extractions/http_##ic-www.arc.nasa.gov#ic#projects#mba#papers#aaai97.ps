URL: http://ic-www.arc.nasa.gov/ic/projects/mba/papers/aaai97.ps
Refering-URL: http://ic-www.arc.nasa.gov/ic/projects/mba/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fnayak,williamsg@ptolemy.arc.nasa.gov  
Title: Fast Context Switching in Real-time Propositional Reasoning  
Author: P. Pandurang Nayak and Brian C. Williams 
Address: Mail Stop, 269-2 Moffett Field, CA 94035.  
Affiliation: Recom Technologies, NASA Ames Research Center  
Note: Appears in Proceedings of AAAI-97  
Abstract: The trend to increasingly capable and affordable control processors has generated an explosion of embedded real-time gadgets that serve almost every function imaginable. The daunting task of programming these gadgets is greatly alleviated with real-time deductive engines that perform all execution and monitoring functions from a single core model. Fast response times are achieved using an incremental propositional deductive database (an LTMS). Ideally the cost of an LTMS's incremental update should be linear in the number of labels that change between successive contexts. Unfortunately an LTMS can expend a significant percentage of its time working on labels that remain constant between contexts. This is caused by the LTMS's conservative approach: a context switch first removes all consequences of deleted clauses, whether or not those consequences hold in the new context. This paper presents a more aggressive incremental TMS, called the ITMS, that avoids processing a significant number of these consequences that are unchanged. Our empirical evaluation for spacecraft control shows that the overhead of processing unchanged consequences can be reduced by a factor of seven. 
Abstract-found: 1
Intro-found: 1
Reference: <author> de Kleer, J. </author> <year> 1986. </year> <title> An assumption-based TMS. </title> <booktitle> Artificial Intelligence 28(1) </booktitle> <pages> 127-162. </pages> <editor> de Kleer, J. </editor> <year> 1990. </year> <title> Exploiting locality in a TMS. </title> <booktitle> In Procs. of AAAI-90, </booktitle> <pages> 264-271. </pages>
Reference-contexts: The main approach to addressing this problem has been to propose a fundamentally different type of truth maintenance system|the ATMS <ref> (de Kleer 1986) </ref>. The advantage of the ATMS is its ability to switch contexts without any label propagation. However, this comes at the cost of an exponential time and space labeling process, making it inapplicable for embedded, real-time systems.
Reference: <author> Doyle, J. </author> <year> 1979. </year> <title> A truth maintenance system. </title> <booktitle> Artificial Intelligence 12 </booktitle> <pages> 231-272. </pages>
Reference-contexts: Hence the success of Livingstone's model-based execution paradigm hinges critically upon the efficiency of the propositional deductive database. A major time saving can be achieved by adopting an event driven approach, propagating the effects to the database as sensor readings and states change. A truth maintenance system <ref> (Doyle 1979) </ref>, in particular the LTMS (McAllester 1980), offers a natural starting point. The LTMS incrementally maintains the deductive closure of unit propagation on a propositional clausal theory as clauses are added and deleted.
Reference: <author> Dressler, O., and Farquhar, A. </author> <year> 1990. </year> <title> Putting the problem solver back in the driver's seat: Contextual control of the ATMS. In LNAI 515. </title> <publisher> Springer-Verlag. </publisher>
Reference: <author> Everett, J. O., and Forbus, K. D. </author> <year> 1996. </year> <title> Scaling up logic-based truth maintenance systems via fact garbage collection. </title> <booktitle> In Procs. of AAAI-96, </booktitle> <pages> 614-620. </pages>
Reference-contexts: Recent work by de Kleer has focused on making unit propagation complete using prime implicates (de Kleer 1990). This is related to our use of an LTMS as a propositional reasoning engine, but is orthogonal to the topic of this paper. Everett and Forbus <ref> (Everett & Forbus 1996) </ref> develop a technique to scale up an LTMS via fact garbage collection. The technique makes sense in their application since they use the LTMS as a cache, though it does not make sense in ours since we use the LTMS as a real-time propositional reasoning engine.
Reference: <author> Forbus, K. D., and de Kleer, J. </author> <year> 1988. </year> <title> Focusing the ATMS. </title> <booktitle> In Procs. of AAAI-88, </booktitle> <pages> 193-198. </pages>
Reference: <author> McAllester, D. </author> <year> 1980. </year> <title> An outlook on truth maintenance. </title> <type> Memo 551, </type> <institution> MIT AI Laboratory. </institution>
Reference-contexts: A major time saving can be achieved by adopting an event driven approach, propagating the effects to the database as sensor readings and states change. A truth maintenance system (Doyle 1979), in particular the LTMS <ref> (McAllester 1980) </ref>, offers a natural starting point. The LTMS incrementally maintains the deductive closure of unit propagation on a propositional clausal theory as clauses are added and deleted.
Reference: <author> Pell, B.; Bernard, D. E.; Chien, S. A.; Gat, E.; Muscettola, N.; Nayak, P. P.; Wagner, M. D.; and Williams, B. C. </author> <year> 1997. </year> <title> An autonomous spacecraft agent prototype. </title> <booktitle> In Procs. of the First International Conference on Autonomous Agents. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: Example 1 Figure 1 shows part of the theory describing the bus controller of Deep Space One (DS-1), the first of NASA's New Millennium spacecraft <ref> (Pell et al. 1997) </ref>. All commands from the flight computer to the spacecraft's actuators are routed through the bus. The clauses in Figure 1 show part of a typical command.
Reference: <author> Williams, B. C., and Nayak, P. P. </author> <year> 1996. </year> <title> A model-based approach to reactive self-configuring systems. </title> <booktitle> In Procs. of AAAI-96, </booktitle> <pages> 971-978. </pages>
Reference-contexts: Introduction The unending trend towards cheap processing has generated an explosion of embedded real-time gadgets. Developing robust real-time kernels for these gadgets often require codes that provide a variety of system level tasks such as commanding, monitoring, diagnosis, recovery, and safe shutdown. In <ref> (Williams & Nayak 1996) </ref> we introduced an embedded real-time execution kernel, called Livingstone, that performs all these functions automatically using a single model of the underlying hardware. To achieve the stringent demands of realtime performance Livingstone reduces each function to a deductive search problem on a propositional database. <p> The second and third rows specify the number of ratios that fall into each interval for the ITMS and the LTMS, respectively. ingly favorable, and appear to be comparable to the very best focused ATMS-based engines <ref> (Williams & Nayak 1996) </ref>. Recent work by de Kleer has focused on making unit propagation complete using prime implicates (de Kleer 1990). This is related to our use of an LTMS as a propositional reasoning engine, but is orthogonal to the topic of this paper.
References-found: 8

