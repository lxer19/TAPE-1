URL: http://www.eecs.umich.edu/~rmalan/publications/mcpmWiaoowms98.ps.gz
Refering-URL: http://www.eecs.umich.edu/~rmalan/terse.html
Root-URL: http://www.cs.umich.edu
Email: frmalan, jarir, santanug@watson.ibm.com pmasters@lotus.com  
Title: eFlow: A Java-Based Workflow Service  
Author: G. Robert Malan, Jarir Chaar, Santanu Paul Peter Masters 
Address: P.O. Box 704 1 Rogers Street Yorktown Heights, NY 10598 Cambridge, MA 02142  
Affiliation: IBM T.J. Watson Research Center Lotus Development Corporation  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> I. Z. Ben-Shaul and G. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling and its Realization in the OZ Environment. </title> <booktitle> In International Conference on Software Engineering, </booktitle> <address> Sorrento, Italy, </address> <year> 1994. </year>
Reference-contexts: While RainMaker and Arjuna share a belief in the importance of distributed workflow components, our work places greater emphasis on the inter-operability of disparate workflow components, and less emphasis on decentralized coordination. The issue of decentralized process enactment in the domain of software development has been addressed in OZ <ref> [1] </ref>. The premise of decentralized domains is the same in RainMaker; however, the OZ project emphasizes collaborative steps between independent, dispersed processes as a design requirement, and requires that a common process modeling formalism be used across domains.
Reference: [2] <author> Mark Colan. </author> <title> InfoBus 1.1 Specification. </title> <address> http://java.sun.com/beans/infobus/spec, March 1998. </address> <note> [3] eSuite home page. http://www.esuite.lotus.com. </note>
Reference-contexts: The eSuite applets conform to the Java beans object component model [4]. As such, they have been designed to be easily integrated within a single web page to provide aggregate functionality and data sharing. The applets can share data through both direct interfaces or via the Infobus <ref> [2] </ref>. The Infobus is used as a communication mechanism for Java beans residing in the same Java Virtual Machine (JVM). 2 4 eFlow Architecture The goal of the eFlow framework is to enable a whole class of workflow participants by utilizing portable and lightweight client applications.
Reference: [4] <institution> JavaBeans 1.0.1 Specification. </institution> <note> http://java.sun.com/beans/docs/spec.html, July 1997. </note>
Reference-contexts: However, these implementations support minimal functionality the 20% of an application's functionality that is used 80% of the time. The eSuite applets conform to the Java beans object component model <ref> [4] </ref>. As such, they have been designed to be easily integrated within a single web page to provide aggregate functionality and data sharing. The applets can share data through both direct interfaces or via the Infobus [2].
Reference: [5] <institution> Workflow Management Facility Request for Proposal. </institution> <note> OMG Document BO RFP2. </note>
Reference-contexts: More recently, the Object Management Group (OMG) approved an inter-operability standard for workflow systems as part of a larger effort to define a Business Object Facility for the CORBA architecture <ref> [5] </ref>. There is a growing body of research in the area of workflow systems, aside from work occurring in the standards bodies. An interesting model of workflow execution that can decentralize both work-flow coordination and activity execution has been proposed in the context of the Arjuna project [9].
Reference: [6] <author> M. Papazoglou, A. Delis, A. Bouguettaya, and M. Haghjoo. </author> <title> Class library support for workflow environments and applications. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 46(6), </volume> <month> June </month> <year> 1997. </year>
Reference-contexts: The issues of reliable messaging and inter-operability between workflow servers and applications in a client-server framework have been discussed in [10]. Programming workflows as active objects using a class libraries approach within a nested-transactional environment has been explored in <ref> [6] </ref>. All of these systems can be made to conform with the RainMaker interface; thereby allowing the eFlow system to provide a bridge from a large body of workflow systems to a new class of participants.
Reference: [7] <author> Santanu Paul, Edwin Park, and Jarir Chaar. RainMan: </author> <title> A Workflow System for the Internet. </title> <booktitle> In Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> Monterey, California, </address> <month> December </month> <year> 1997. </year>
Reference-contexts: It allows Web-based workflow processes to inter-operate through the use of the Rainmaker interface <ref> [7] </ref>. These web-based workflow processes are exported to users in the form of web pages with embedded Java applets. The applets consist of eSuite components including: spreadsheet, word processor, charting, and presentation applets. eFlow uses email as its notification mechanism, providing a universal inbox for users. <p> This paper describes the eFlow architecture and illustrates its functionality through the use of an example process: a grant proposal workflow process. 2 RainMaker RainMaker provides an object-oriented framework for distributed asynchronous workflow <ref> [7] </ref>.
Reference: [8] <author> Jonathan B. Postel. </author> <title> Simple Mail Transfer Protocol (SMTP). </title> <type> RFC 821, </type> <month> August </month> <year> 1982. </year>
Reference-contexts: Next, after the new task has been created and stored in the SFS space (2), a reference and description of this task is created and sent through the eFlow server's SMTP <ref> [8] </ref> mail object at (3). Next, at (4), the task is invoked by the user in their mail client, which launches a Java client possibly a web browser. The Java client reads the task's applets and data through the SFS interface at (5).
Reference: [9] <author> F. Ranno, S. K. Shrivastava, and S. M. Wheater. </author> <title> A System for Specifing and Coordinating the Execution of Reliable Distributed Applications. </title> <booktitle> In International Working Conference on Distributed Applications and Interoperable Systems (DAIS97), Cottbus, </booktitle> <address> Germany, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: There is a growing body of research in the area of workflow systems, aside from work occurring in the standards bodies. An interesting model of workflow execution that can decentralize both work-flow coordination and activity execution has been proposed in the context of the Arjuna project <ref> [9] </ref>. This execution model decentralizes workflow coordination by installing 'task controller' objects in different domains that coordinate with each other to deliver workflow routing functionality.
Reference: [10] <author> H. Schuster, S. Jablonski, and C. Bussler. Client/server qualities: </author> <title> A basis for reliable distributed workflow management systems. </title> <booktitle> In International Conference on Distributed Computing Systems, </booktitle> <address> Baltimore, Maryland, </address> <year> 1997. </year>
Reference-contexts: The issues of reliable messaging and inter-operability between workflow servers and applications in a client-server framework have been discussed in <ref> [10] </ref>. Programming workflows as active objects using a class libraries approach within a nested-transactional environment has been explored in [6].
Reference: [11] <author> Java Servlets. </author> <note> http://www.javasoft.com/products/java-server/servlets, December 1997. </note>
Reference-contexts: This constraint is due to the applet security model. SFS accommodates these goals by interposing a servlet <ref> [11] </ref> at the web server collocated with the eFlow server. This servlet intercepts the HTTP GET and PUT methods for a subset of the URL reference space.
Reference: [12] <editor> The Workflow Management Coalition. </editor> <title> The Workflow Reference Model. Document No. </title> <journal> TC00-1003 Issue 1.1, </journal> <month> November </month> <year> 1994. </year>
Reference-contexts: WfMC has sought and successfully implemented a set of standards for software terminology, inter-operability, and connectivity between workflow products <ref> [12, 13] </ref>. More recently, the Object Management Group (OMG) approved an inter-operability standard for workflow systems as part of a larger effort to define a Business Object Facility for the CORBA architecture [5].
Reference: [13] <institution> The Workflow Management Coalition. The Workflow Management Coalition Overview. </institution> <address> http://www.aiai.ed.ac.uk/WfMC/overview.html, March 1996. </address>
Reference-contexts: WfMC has sought and successfully implemented a set of standards for software terminology, inter-operability, and connectivity between workflow products <ref> [12, 13] </ref>. More recently, the Object Management Group (OMG) approved an inter-operability standard for workflow systems as part of a larger effort to define a Business Object Facility for the CORBA architecture [5].
Reference: [14] <institution> Extensible Markup Language (XML). </institution> <note> http://www.w3.org/XML, February 1998. 7 </note>
Reference-contexts: The eSuite's word processor and spreadsheet applets store their data as XML documents <ref> [14] </ref>. The eFlow server contains a lightweight XML parser as well as several Java classes that extract named data ranges from these documents, simplifying data distillation and retrieval. 4.2 Servlet File System The Servlet File System (SFS) was developed to support the persistent storage needs of the eFlow framework.
References-found: 13

