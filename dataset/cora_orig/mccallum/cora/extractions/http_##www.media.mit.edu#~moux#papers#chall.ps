URL: http://www.media.mit.edu/~moux/papers/chall.ps
Refering-URL: http://www.media.mit.edu/~moux/research.html
Root-URL: http://www.media.mit.edu
Email: asc moux pattie@media.mit.edu  
Title: Challenger: A Multi-agent System for Distributed Resource Allocation  
Author: Anthony Chavez, Alexandros Moukas and Pattie Maes 
Keyword: resource allocation, multi-agent system  
Address: 20 Ames Street Cambridge, MA 02139-4307  
Affiliation: Autonomous Agents Group MIT Media Laboratory  
Abstract: In this paper we introduce Challenger, a multi-agent system that performs completely distributed resource allocation. Challenger consists of agents which individually manage local resources; these agents communicate with one another to share their resources (in this particular instance, CPU time) in an attempt to more efficiently utilize them. By endowing the agents with relatively simple behaviors which rely on only locally available information, desirable global system objectives can be obtained, such as minimization of mean job flow time. Challenger is similar to other market-based control systems in that the agents act as buyers and sellers in a marketplace, always trying to maximize their own utility. The results of several simulations of Challenger performing CPU load balancing in a network of computers are presented. The main contribution of this research is the addition of learning to the agents, which allows Challenger to perform better under a wider range of conditions than other systems for distributed processor allocation, such as Malone's Enterprise [Mal88]. 
Abstract-found: 1
Intro-found: 1
Reference: [Cle96a] <author> Clearwater, S. </author> <year> 1996. </year> <title> Market-Based Control: A Paradigm for Distributed Resource Allocation. </title> <editor> Ed. Clearwater, S. </editor> <publisher> World Scientific Publishing, Singa-pore. </publisher>
Reference-contexts: One such technique is market-based control. In the words of one of its proponents, "market-based control is a paradigm for controlling complex systems that would otherwise be very difficult to control, maintain, or expand" <ref> [Cle96a] </ref>. <p> To copy otherwise, or to republish, requires a fee and/or specific permission. Agents '97 Conference Proceedings, copyright 1997 ACM. is achieved. The agents trade with one another using a relatively simple mechanism, yet desirable global objectives can often be realized, such as stable prices or efficient resource allocation <ref> [Cle96a] </ref>. The fundamental appeal of the market as a model for managing complex systems is its ability to yield desirable global behavior on the basis of agents acting on only locally available information.
Reference: [Cle96b] <author> Clearwater, S., Costanza, R., Dixon, M, and Schroeder, B. </author> <title> "Saving Energy using Market-Based Control." 1986. In: Market-Based Control: A Paradigm for Distributed Resource Allocation. </title> <editor> Ed. Clearwater, S. </editor> <publisher> World Scientific Publishing, Singa-pore. </publisher>
Reference-contexts: The agent might do this by more equitably and efficiently distributing resources. An example of such a service agent is the system built by Clearwater et al. <ref> [Cle96b] </ref>, which manages air conditioning within a building. Their agent distributes cooled air in a way that is fairer and more efficient (i.e. it conserves energy) than conventional systems.
Reference: [Eag86] <author> Eager, D.L., Lazowska, E.D., and Zahorjan, J. </author> <title> "Adaptive Load Sharing in Homogeneous Distributed Systems." 1986. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. SE-12, </volume> <pages> pp. 662-675. </pages>
Reference-contexts: This allows the system to perform better than Enterprise in the face of agents which are consistently unreliable. 6.2 Eager et al. Eager et al. present an algorithm which is fairly representative of distributed heuristic algorithms for processor allocation <ref> [Eag86] </ref>. The way it works is as follows: A job originates on a machine. If the machine is under-loaded, it runs the job locally. If it is overloaded, it sends out "probes" to other machines in the network, asking if they are under-loaded or overloaded.
Reference: [Fer88] <author> Ferguson, D.F., Yemini, Y., and Nikolaou, C. </author> <title> "Microeconomic Algorithms for Load Balancing in Distributed Computer Systems." </title> <booktitle> 1988. In Proceedings of International Conference on Distributed Systems (ICDCS 88). </booktitle> <address> San Jose, California: </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Other processors would keep sending their jobs to this processor and then wait and wonder why their jobs were taking so long to complete. 6.3 Ferguson et al. Fegurson et al. present a load-balancing economy based on market principles <ref> [Fer88] </ref>. They assume network of processors, each with a fixed performance level. They also assume a set of communication links between every processor, each with a fixed delay. Jobs arrive and purchase services from the processors: running time and transmission over their links.
Reference: [Mae94] <author> Maes, P. </author> <year> 1994. </year> <title> Agents that Reduce Work and Information Overload. </title> <journal> Communication of the ACM. </journal> <volume> Vol. 37, No.7. </volume> <pages> 31-40. </pages>
Reference-contexts: Challenger falls into the latter. User agents assist users with specific tasks and typically interact with them in some way. A good example of a user agent is the Maxims email-prioritization agent developed at the MIT Media Lab <ref> [Mae94] </ref>. Service agents generally run in the background and assist the user, not directly, but implicitly, by making their environment a better place to work. The agent might do this by more equitably and efficiently distributing resources.
Reference: [Mal88] <author> Malone, T.W., Fikes, R.E., Grant, K.R., and Howard, </author> <title> M.T. "Enterprise: A Market-like Task Scheduler for Distributed Computing Environments". 1988. In: The Ecology of Computation. </title> <editor> Ed. Huberman, B.A. </editor> <publisher> Elsevier, Holland. </publisher>
Reference-contexts: Section 5 describes the learning behaviors of the Challenger agents which allow the system to perform better under a wider range of operating conditions and presents results which confirm this. Section 6 discusses other systems that do distributed processor allocation, such as Tom Malone's Enterprise system <ref> [Mal88] </ref>, and compares them to Challenger. Section 7 briefly talks about future work and concludes. 2 Background and Motivation We make the following bold claim: the average workstation or PC is often underutilized. We don't have any hard proof to back this up, just some anecdotal evidence. <p> How priorities are to be assigned is determined by the overall system performance desired. Since we are trying to minimize the mean flow time (MFT), we use the heuristic of giving highest priority to jobs with the shortest estimated processing time <ref> [Mal88] </ref>. <p> Again, all simulations in this paper assume that agents stay alive and accessible. 4 Simulation Results with Base Agent Behavior We have so far described the base agent behavior. It is quite similar to the DSP protocol of Malone's Enterprise system <ref> [Mal88] </ref>. Challenger is perfectly functional with its agents only running the base behavior; we refer to the system then as being in BASE mode. <p> This is shown by the dashed line. The results in Figure 1 conform closely to those of Malone <ref> [Mal88] </ref>. For the remainder of the simulation runs in this paper, the originating agent's job length estimates are assumed to be perfect. 4.3 Effect of adding processors a Challenger network while keeping overall system utilization constant, for three different levels of utilization: 90, 50, and 10 percent. <p> This is a rather significant result, implying that the ideal size for a network of machines for which there will almost always be an equal number of users is around 8 to 10. More machines beyond this doesn't improve performance significantly. These results agree with those that Malone got <ref> [Mal88] </ref>. Of course, if one 5 Explanation of notation for describing network configurations. We pirated Malone's notation for describing these configuration concisely. For example, 41111 denotes a network consisting of 5 machines, 4 of speed 1 (the baseline machine speed), and 1 machine of speed 4. <p> Each type of line represents the network in a different configuration: solid is configuration 41111, dashed is configuration 44, and dashed-dot is configuration 11111111. These configurations were chosen so as to facilitate easy comparison with Malone's Enterprise simulations, which used the same configurations <ref> [Mal88] </ref>. For each network configuration, there are three "setups" the simulations were run in: * Loc: The network was turned off and each job was run on its local machine. <p> What do we make of these results? First, they correspond closely to the results Malone got running Enterprise under conditions of high message delays (not surprising, given the similarity between his system and the BASE mode behavior of Challenger's agents) <ref> [Mal88] </ref>. Second, they are highly undesirable. At the beginning of the paper, we said that we wanted Challenger to be robust and adaptive, and running in BASE mode, it is not. It is not robust because it does not deal with changing operating conditions well. <p> Configuration was 2222, with one of the agents consistently underestimating its bids by a factor of 4. Message delay was zero. 6.1 Malone et al. Malone's Enterprise is the closest system we know of to Challenger <ref> [Mal88] </ref>. Its DSP architecture is very similar to the BASE behaviors of Challenger agents. In fact, we were able to duplicate nearly all of Malone's results by running simulations in BASE mode.
Reference: [Tan92] <author> Tanenbaum, </author> <title> A.S. </title> <booktitle> 1992. Modern Operating Systems. </booktitle> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Challenger is a software agent that does distributed processor allocation. In doing processor allocation, there are different global objectives one can strive for. The three that are usually considered are: minimization of mean flow time, maximization of processor utilization, and minimization of mean response ratio <ref> [Tan92] </ref>. Mean flow time is the average time from when a job is originated to when it is completed. Processor utilization is the percentage of time a processor spends executing jobs.
References-found: 7

