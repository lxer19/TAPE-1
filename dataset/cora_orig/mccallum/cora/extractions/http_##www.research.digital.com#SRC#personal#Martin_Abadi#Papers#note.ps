URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/note.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/allpapers.html
Root-URL: http://www.research.digital.com
Title: Preserving Liveness: Comments on "Safety and Liveness from a Methodological Point of View" they permit
Author: Martin Abadi Bowen Alpern Krzysztof R. Apt Nissim Francez Shmuel Katz Leslie Lamport and Fred B. Schneider 
Affiliation: Watson Research Center C.W.I. Department of Computer Science, The Technion Computer Science Department, Cornell University  
Note: Alpern and Schneider's characterizations are problematic, since  Digital Equipment Corporation, Systems Research Center I.B.M., T. J.  (Supported by Office of Naval Research contract N00014-86-K-0092, National Science Foundation Grant No. CCR-8701103, and DARPA/NSF Grant No. CCR-9014363.)  
Date: January 9, 1991 revised June 26, 1991  
Abstract: Dederichs and Weber [4] define what it means for a property to be a liveness property with respect to a safety property. They argue that a specification should be written in the form P " Q, where Q is a liveness property with respect to the safety property P . They also criticize Alpern and Schneider's general definitions of safety and liveness [2]: Dederichs and Weber's definition is not new. Such a pair P , Q of properties was called machine closed by Abadi and Lamport [1], who explained that one tries to write liveness properties that "[do] not rule out any finite behavior." The same idea was introduced independently by Apt, Francez, and Katz [3], who defined a fairness condition for a programming language to be feasible if it produces machine-closed specifications for all programs. Apt, Francez, and Katz discussed the same anomaly as Dederichs and Weber, pointing out that feasibility is necessary to "prevent a scheduler from `painting itself into a corner' ". 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> Martin Abadi and Leslie Lamport. </author> <title> The existence of refinement mappings. </title> <journal> Theoretical Computer Science, </journal> <volume> 82(2) </volume> <pages> 253-284, </pages> <month> May </month> <year> 1991. </year> <booktitle> A preliminary version appeared in Proceedings of the Third Annual Symposium on Logic In Computer Science, </booktitle> <pages> pages 165-177, </pages> <publisher> IEEE Computer Society, Edinburgh, </publisher> <address> Scotland, </address> <month> July </month> <year> 1988. </year>
Reference: [2] <author> Bowen Alpern and Fred B. Schneider. </author> <title> Defining liveness. </title> <journal> Information Processing Letters, </journal> <volume> 21(4) </volume> <pages> 181-185, </pages> <month> October </month> <year> 1985. </year> <month> 2 </month>
Reference: [3] <author> Krzysztof R. Apt, Nissim Francez, and Shmuel Katz. </author> <title> Appraising fair-ness in languages for distributed programming. </title> <journal> Distributed Computing, </journal> <volume> 2 </volume> <pages> 226-241, </pages> <year> 1988. </year>
Reference: [4] <author> Frank Dederichs and Rainer Weber. </author> <title> Safety and liveness from a methodological point of view. </title> <journal> Information Processing Letters, </journal> <volume> 36(1) </volume> <pages> 25-30, </pages> <month> Oc-tober </month> <year> 1990. </year>
Reference: [5] <author> Leslie Lamport. </author> <title> A simple approach to specifying concurrent systems. </title> <journal> Communications of the ACM, </journal> <volume> 32(1) </volume> <pages> 32-45, </pages> <month> January </month> <year> 1989. </year> <month> 3 </month>
References-found: 5

