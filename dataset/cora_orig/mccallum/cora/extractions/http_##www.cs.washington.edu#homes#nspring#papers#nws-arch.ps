URL: http://www.cs.washington.edu/homes/nspring/papers/nws-arch.ps
Refering-URL: http://www.cs.washington.edu/homes/nspring/
Root-URL: http://www.cs.washington.edu
Title: The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing  
Author: Rich Wolski a; Neil T. Spring b; Jim Hayes b; 
Keyword: Key words: network weather; network monitoring; performance prediction; metacomputing; network-aware; distributed computing  
Address: San Diego  
Affiliation: a University of California, San Diego and University of Tennessee, Knoxville b University of California,  
Abstract: The goal of the Network Weather Service is to provide accurate forecasts of dynamically changing performance characteristics from a distributed set of metacom-puting resources. Providing a ubiquitous service that can both track dynamic performance changes and remain stable in spite of them requires adaptive programming techniques, an architectural design that supports extensibility, and internal abstractions that can be implemented efficiently and portably. In this paper, we describe the current implementation of the NWS for Unix and TCP/IP sockets and provide examples of its performance monitoring and forecasting capabilities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Andresen and T. McCune. </author> <title> Towards a hierarchical scheduling system for distributed www server clusters. </title> <booktitle> In Proc. of the Seventh IEEE International Symp osium on High Performance Distributed Computing(HPDC7) (to appear), </booktitle> <address> Chicago, Illinois, </address> <month> July </month> <year> 1998. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources. Such forecasts have been used successfully to implement dynamic scheduling agents for metacomputing applications [26,3], and to choose between replicated web pages <ref> [1] </ref>. Implementing the NWS to operate in a variety of metacomputing and distributed environments, each with its own dynamically changing performance characteristics, has illuminated the utility of adaptive programming techniques, distributed fault-tolerant control algorithms, and an extensible system architecture.
Reference: [2] <author> F. Berman. </author> <title> Computational Grids: The Future of High-Performance Computing, </title> <editor> C. Kesselman, and I. </editor> <title> Foster, editors. </title> <note> to appear, </note> <year> 1998. </year>
Reference-contexts: The NWS is designed to maximize four possibly conflicting functional characteristics. It must meet these goals despite the highly dynamic execution environment and evolving software infrastructure provided by shared meta computing systems <ref> [2] </ref>. * Predictive Accuracy: The NWS must be able to provide accurate esti mations of future resource performance in a timely manner. * Non-intrusiveness: The system must load the resources it is monitoring as little as possible. * Execution longevity: To be effective, the NWS should be available at any time
Reference: [3] <author> F. Berman, R. Wolski, S. Figueira, J. Schopf, and G. Shao. </author> <title> Application level scheduling on distributed heterogeneous networks. </title> <booktitle> In Proceedings of Supercomputing 1996, </booktitle> <year> 1996. </year>
Reference-contexts: Topology-d [24] is similar to the NWS in that it conducts a series of performance experiments (using both UDP/IP and TCP/IP) and then automatically analyzes the resulting data. One of its goals is to provide resource scheduling mechanisms such as Smart Clients [33], AppLeS <ref> [3] </ref>, and MARS [16] with information depicting the "state" of the network. Important differences, however, concern Topology-d's scalability and periodicity. The performance topology graph it produces is calculated relatively infrequently (once per hour in [24]) using N 2 measurements. The NWS is attempting to capture and forecast higher-frequency dynamics.
Reference: [4] <author> G. Box, G. Jenkins, and G. Reinsel. </author> <title> Time Series Analysis, Forecasting, and Control, 3rd edition. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: In particular, more parametric modeling approaches, each with their own set of abstractions, are certain to yield good forecasts for specific resources. We would like to be able to incorporate other statistical forecasting methodologies such as Semi-Nonparametric Time Series 10 Analysis (SNP) [14], automated Box-Jenkins <ref> [4] </ref> techniques, and wavelet-based models [25]. Since these more sophisticated techniques have larger computational requirements, generating forecasts on-demand according to the requirements of the prediction module interface will not be feasible. We have designed the NWS so that new complete Forecaster processes may be incorporated within the system.
Reference: [5] <author> R. Carter and M. Crovella. </author> <title> Dynamic server selection using bandwidth probing in wide-area networks. </title> <type> Technical Report TR-96-007, </type> <institution> Boston University, </institution> <year> 1996. </year> <note> available from http://cs-www.bu.edu/students/grads/carter/papers.html. </note>
Reference: [6] <author> R. Carter and M. Crovella. </author> <title> Measuring bottleneck link speed in packet-switched networks. </title> <type> Technical Report TR-96-006, </type> <institution> Boston University, </institution> <year> 1996. </year> <note> available from http://cs-www.bu.edu/students/grads/carter/papers.html. </note>
Reference: [7] <author> H. Casanova and J. Dongarra. NetSolve: </author> <title> A network server for solving computational science problems. </title> <booktitle> In Proc. </booktitle> <institution> of Supercomputing'96, Pittsburgh. Department of Computer Science, University of Tennessee, Knoxville, </institution> <year> 1996. </year>
Reference-contexts: Moreover, we wished to extend the monitoring and forecasting capabilities of the system to meet the needs of various performance-oriented distributed software infrastructures such as Globus [12], Legion [18], Condor [27] and Netsolve <ref> [7] </ref>. As such, we hoped to improve the portability, the extensibility, and the reliability of the system over prior implementations. The NWS is designed to maximize four possibly conflicting functional characteristics.
Reference: [8] <author> S. J. Chapin, J. Karpovich, and A. Grimshaw. </author> <title> Resource management in legion. </title> <type> Technical Report CS-98-09, </type> <institution> University of Virginia, Department of Computer Science, </institution> <month> May </month> <year> 1998. </year>
Reference-contexts: We anticipate that state storage and name service functionality will eventually be provided by lower-level metacomputing services, such as the Globus Metacomputing Directory Service [10] and the Legion Resource Directory Service <ref> [8] </ref>. 4 Performance Monitoring The problems associated with gathering accurate performance measurements from active computational and network resources continue to pose significant research challenges [24,21,5,6,20,8,19]. In general, there is a tension between the intrusiveness of a monitoring technique and the measurement accuracy it provides. <p> It maintains both static and dynamically changing information, but it does not, at present, include a forecasting component [9]. Its API for accessing the information, however, is similar to that provided by the Globus MDS [10] and Legion Resource Directory <ref> [8] </ref>, but more focused on network information. It should be possible to integrate NWS forecasting techniques with both Topology-d and ReMoS as the relevant APIs are simple and portable. 9 Conclusions and Future Work The implementation of the NWS relies on adaptivity to enable stability, accuracy, non-intrusiveness, and extensibility.
Reference: [9] <author> T. DeWitt, B. Lowecamp, N. Miller, D. Sutherland, T. Gross, P. Steenkiste, and J. Subhlok. </author> <title> A resource monitoring system for network-aware applications. </title> <type> Technical Report 17 CMU-CS-97-194, </type> <institution> Carnegie-Mellon University, </institution> <month> december </month> <year> 1997. </year> <note> available from http://www.cs.cmu.edu/afs/cs/user/jass/www/index.html. </note>
Reference-contexts: Also, the NWS measures and forecasts the per 15 formance of resources other than the network. ReMoS [21] is a generalizable resource monitoring system for network applications. It maintains both static and dynamically changing information, but it does not, at present, include a forecasting component <ref> [9] </ref>. Its API for accessing the information, however, is similar to that provided by the Globus MDS [10] and Legion Resource Directory [8], but more focused on network information.
Reference: [10] <author> S. Fitzgerald, I. Foster, C. Kesselman, G. von Laszewski, W. Smith, and S. Tuecke. </author> <title> A directory service for configuring high-performance distributed computations. </title> <booktitle> In Proc. 6th IEEE Symp. on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: We are considering the use of the Globus Heartbeat Monitor [13] as an implementation platform for this functionality as part of our future development. We anticipate that state storage and name service functionality will eventually be provided by lower-level metacomputing services, such as the Globus Metacomputing Directory Service <ref> [10] </ref> and the Legion Resource Directory Service [8]. 4 Performance Monitoring The problems associated with gathering accurate performance measurements from active computational and network resources continue to pose significant research challenges [24,21,5,6,20,8,19]. <p> ReMoS [21] is a generalizable resource monitoring system for network applications. It maintains both static and dynamically changing information, but it does not, at present, include a forecasting component [9]. Its API for accessing the information, however, is similar to that provided by the Globus MDS <ref> [10] </ref> and Legion Resource Directory [8], but more focused on network information.
Reference: [11] <author> M. P. I. Forum. </author> <title> Mpi: A message-passing interface standard. </title> <type> Technical Report CS-94-230, </type> <institution> University of Tennessee, Knoxville, </institution> <year> 1994. </year>
Reference-contexts: For infrequent or casual users, the system also provides continuous access to NWS forecasts through the world wide web. 6.1 C API The programming interface provided to applications is intended to be lightweight and easily integrated into applications written for systems such as Legion [18], Globus [12], Condor [27], MPI <ref> [11] </ref>, and PVM [17]. Two functions make up this lightweight interface and separate the two phases of a forecaster connection, InitForecaster () and RequestForecasts (). The InitForecaster () function opens a socket connection to a Forecaster and passes a list of requested forecasts.
Reference: [12] <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <note> 1997. to appear. </note>
Reference-contexts: These implementations did not scale well, however, and lacked the robustness necessary to make the NWS a reliable system service. Moreover, we wished to extend the monitoring and forecasting capabilities of the system to meet the needs of various performance-oriented distributed software infrastructures such as Globus <ref> [12] </ref>, Legion [18], Condor [27] and Netsolve [7]. As such, we hoped to improve the portability, the extensibility, and the reliability of the system over prior implementations. The NWS is designed to maximize four possibly conflicting functional characteristics. <p> Our choice of Unix and TCP/IP sockets as an initial programming platform stems from their nearly exclusive use by extant meta-computing infrastructures such as Globus <ref> [12] </ref> and Condor [27]. The remainder of this paper, therefore, focuses on the implementation of the NWS for Unix and Unix networking via sockets. 3 Naming and State Management To make the system more robust, all NWS processes are stateless. <p> For infrequent or casual users, the system also provides continuous access to NWS forecasts through the world wide web. 6.1 C API The programming interface provided to applications is intended to be lightweight and easily integrated into applications written for systems such as Legion [18], Globus <ref> [12] </ref>, Condor [27], MPI [11], and PVM [17]. Two functions make up this lightweight interface and separate the two phases of a forecaster connection, InitForecaster () and RequestForecasts (). The InitForecaster () function opens a socket connection to a Forecaster and passes a list of requested forecasts.
Reference: [13] <author> I. Foster and C. Kesselman. </author> <title> The globus project: A status report. </title> <booktitle> In IPPS/SPDP '98 Heterogeneous Computing Workshop, </booktitle> <year> 1998. </year>
Reference-contexts: These bindings time out according to a time-to-live specification that must accompany each registration. Active processes, therefore, must register their bindings periodically. This approach provides a simple "heartbeat" that is process specific. We are considering the use of the Globus Heartbeat Monitor <ref> [13] </ref> as an implementation platform for this functionality as part of our future development.
Reference: [14] <author> R. Gallant and G. Tauchen. Snp: </author> <title> A program for nonparametric time series analysis. </title> <note> In http://www.econ.duke.edu/Papers/Abstracts/abstract.95.26.html. </note>
Reference-contexts: In particular, more parametric modeling approaches, each with their own set of abstractions, are certain to yield good forecasts for specific resources. We would like to be able to incorporate other statistical forecasting methodologies such as Semi-Nonparametric Time Series 10 Analysis (SNP) <ref> [14] </ref>, automated Box-Jenkins [4] techniques, and wavelet-based models [25]. Since these more sophisticated techniques have larger computational requirements, generating forecasts on-demand according to the requirements of the prediction module interface will not be feasible. <p> Any series may be presented and, assuming that the suite of models is rich enough, a forecast can be obtained. In [31] we showed a comparison of the forecasting accuracy between sophisticated time series models based on maximum likelihood techniques <ref> [14] </ref> and the forecasting suite we have implemented (described in [30]). The performance of the currently implemented suite is excellent compared to more powerful techniques for a variety of different metacomputing performance measurements. Second, the adaptive method allows new forecasting models to be incorporated easily.
Reference: [15] <author> H. Garcia-Molina. </author> <title> Elections in a distributed computing system. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(1):49-59, </volume> <month> Jan </month> <year> 1982. </year>
Reference-contexts: In particular, the Sensors use adaptive time-out discovery and a distributed leader election protocol <ref> [15] </ref> to remain stable while, at the same time, limiting the load they introduce. The NWS attempts to measure end-to-end network performance between all possible network Sensor pairs.
Reference: [16] <author> J. Gehrinf and A. Reinfeld. </author> <title> Mars a framework for minimizing the job execution time in a metacomputing environment. </title> <booktitle> Proceedings of Future general Computer Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Topology-d [24] is similar to the NWS in that it conducts a series of performance experiments (using both UDP/IP and TCP/IP) and then automatically analyzes the resulting data. One of its goals is to provide resource scheduling mechanisms such as Smart Clients [33], AppLeS [3], and MARS <ref> [16] </ref> with information depicting the "state" of the network. Important differences, however, concern Topology-d's scalability and periodicity. The performance topology graph it produces is calculated relatively infrequently (once per hour in [24]) using N 2 measurements. The NWS is attempting to capture and forecast higher-frequency dynamics.
Reference: [17] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM: Parallel Virtual Machine A Users' Guide and Tutorial for Networked Parallel Computing. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: casual users, the system also provides continuous access to NWS forecasts through the world wide web. 6.1 C API The programming interface provided to applications is intended to be lightweight and easily integrated into applications written for systems such as Legion [18], Globus [12], Condor [27], MPI [11], and PVM <ref> [17] </ref>. Two functions make up this lightweight interface and separate the two phases of a forecaster connection, InitForecaster () and RequestForecasts (). The InitForecaster () function opens a socket connection to a Forecaster and passes a list of requested forecasts.
Reference: [18] <author> A. S. Grimshaw, W. A. Wulf, J. C. French, A. C. Weaver, and P. F. Reynolds. Legion: </author> <title> The next logical step towrd a nationwide virtual computer. </title> <type> Technical Report CS-94-21, </type> <institution> University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: These implementations did not scale well, however, and lacked the robustness necessary to make the NWS a reliable system service. Moreover, we wished to extend the monitoring and forecasting capabilities of the system to meet the needs of various performance-oriented distributed software infrastructures such as Globus [12], Legion <ref> [18] </ref>, Condor [27] and Netsolve [7]. As such, we hoped to improve the portability, the extensibility, and the reliability of the system over prior implementations. The NWS is designed to maximize four possibly conflicting functional characteristics. <p> For infrequent or casual users, the system also provides continuous access to NWS forecasts through the world wide web. 6.1 C API The programming interface provided to applications is intended to be lightweight and easily integrated into applications written for systems such as Legion <ref> [18] </ref>, Globus [12], Condor [27], MPI [11], and PVM [17]. Two functions make up this lightweight interface and separate the two phases of a forecaster connection, InitForecaster () and RequestForecasts (). The InitForecaster () function opens a socket connection to a Forecaster and passes a list of requested forecasts.
Reference: [19] <author> V. Jacobson. </author> <title> A tool to infer characteristics of internet paths. </title> <note> available from ftp://ftp.ee.lbl.gov/pathchar. </note>
Reference-contexts: In this way, each clique adaptively discovers what the appropriate time-out value should be, given the dynamically changing performance characteristics of the underlying system. 8 Related Work Resource performance monitoring and forecasting is an active area of research. Internet performance monitoring and analysis tools such as TReno [22], Pathchar <ref> [19] </ref>, and Carter and Crovella's bprobe/cprobe [5,6] attempt to discern Internet congestion characteristics by actively probing the network between designated hosts. We have attempted to design the NWS Sensor interface so that data from these tools can easily be incorporated for forecasting.
Reference: [20] <author> R. Jones. </author> <title> http://www.cup.hp.com/netperf/netperfpage.html. Netperf: a network performance monitoring tool. </title>
Reference: [21] <author> B. Lowecamp, N. Miller, D. Sutherland, T. Gross, P. Steenkiste, and J. Subhlok. </author> <title> A resource query interface for network-aware applications. </title> <booktitle> In Proc. 7th IEEE Symp. on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1998. </year> <note> available from http://www.cs.cmu.edu/afs/jass/www/papers.html. </note>
Reference-contexts: The clique protocol and clique hierarchy allow measurements to be taken at this frequency with limited intrusiveness while also providing scalability. Also, the NWS measures and forecasts the per 15 formance of resources other than the network. ReMoS <ref> [21] </ref> is a generalizable resource monitoring system for network applications. It maintains both static and dynamically changing information, but it does not, at present, include a forecasting component [9].
Reference: [22] <author> M. Mathis and J. Madhavi. </author> <title> Diagnosing internet congetstion with a transport layer performance tool. </title> <booktitle> In Proceedings of INET '96, </booktitle> <year> 1996. </year>
Reference-contexts: In this way, each clique adaptively discovers what the appropriate time-out value should be, given the dynamically changing performance characteristics of the underlying system. 8 Related Work Resource performance monitoring and forecasting is an active area of research. Internet performance monitoring and analysis tools such as TReno <ref> [22] </ref>, Pathchar [19], and Carter and Crovella's bprobe/cprobe [5,6] attempt to discern Internet congestion characteristics by actively probing the network between designated hosts. We have attempted to design the NWS Sensor interface so that data from these tools can easily be incorporated for forecasting.
Reference: [23] <institution> Network weather service. </institution> <note> http://nws.npaci.edu/. </note>
Reference-contexts: Our experience shows that applications that make frequent requests can receive forecasts in near real time. The forecaster remains available to provide additional forecasts until the application exits. 6.2 CGI Interface Interactive access to Forecasters is provided by a set of CGI programs <ref> [23] </ref>. These programs generate time series graphs of performance measurements and forecasts. Trends recognized and followed by the forecasting system are easily discovered when shown in time series form.
Reference: [24] <author> K. Obraczka and G. Gheorghiu. </author> <title> The performance of a service for network-aware applications. </title> <booktitle> In Proceedings of 2nd SIGMETRICS Conference on Parallel and Distributed Tools, </booktitle> <month> August </month> <year> 1998. </year> <note> to appear. </note>
Reference-contexts: We have attempted to design the NWS Sensor interface so that data from these tools can easily be incorporated for forecasting. Topology-d <ref> [24] </ref> is similar to the NWS in that it conducts a series of performance experiments (using both UDP/IP and TCP/IP) and then automatically analyzes the resulting data. <p> Important differences, however, concern Topology-d's scalability and periodicity. The performance topology graph it produces is calculated relatively infrequently (once per hour in <ref> [24] </ref>) using N 2 measurements. The NWS is attempting to capture and forecast higher-frequency dynamics. Typically, NWS network Sensors make measurements once every 10 to 60 seconds. The clique protocol and clique hierarchy allow measurements to be taken at this frequency with limited intrusiveness while also providing scalability. <p> The clique abstraction implemented by NWS Sensors provides for 16 scalability and stability in the system along with limiting its intrusiveness. Perhaps most important is the flexibility that the cliques support. It is possible, for example, to build star topologies <ref> [24] </ref> or other virtual topologies by defining different sets of overlapping cliques. We plan to use the NWS as a vehicle for our future research in performance monitoring and forecasting.
Reference: [25] <author> R. Ogden. </author> <title> Essential Wavelets for Statistical Applications and Data Analysis. </title> <publisher> Birkhauser, </publisher> <year> 1997. </year>
Reference-contexts: We would like to be able to incorporate other statistical forecasting methodologies such as Semi-Nonparametric Time Series 10 Analysis (SNP) [14], automated Box-Jenkins [4] techniques, and wavelet-based models <ref> [25] </ref>. Since these more sophisticated techniques have larger computational requirements, generating forecasts on-demand according to the requirements of the prediction module interface will not be feasible. We have designed the NWS so that new complete Forecaster processes may be incorporated within the system.
Reference: [26] <author> N. Spring and R. Wolski. </author> <title> Application level scheduling: Gene sequence library comparison. </title> <booktitle> In Proceedings of ACM International Conference on Supercomputing 1998, </booktitle> <month> July </month> <year> 1998. </year>
Reference: [27] <author> T. Tannenbaum and M. Litzkow. </author> <title> The condor distributed processing system. </title> <journal> Dr. Dobbs Journal, </journal> <month> February </month> <year> 1995. </year> <note> [28] vBNS. http://www.vbns.net. 18 </note>
Reference-contexts: Moreover, we wished to extend the monitoring and forecasting capabilities of the system to meet the needs of various performance-oriented distributed software infrastructures such as Globus [12], Legion [18], Condor <ref> [27] </ref> and Netsolve [7]. As such, we hoped to improve the portability, the extensibility, and the reliability of the system over prior implementations. The NWS is designed to maximize four possibly conflicting functional characteristics. <p> Our choice of Unix and TCP/IP sockets as an initial programming platform stems from their nearly exclusive use by extant meta-computing infrastructures such as Globus [12] and Condor <ref> [27] </ref>. The remainder of this paper, therefore, focuses on the implementation of the NWS for Unix and Unix networking via sockets. 3 Naming and State Management To make the system more robust, all NWS processes are stateless. <p> For infrequent or casual users, the system also provides continuous access to NWS forecasts through the world wide web. 6.1 C API The programming interface provided to applications is intended to be lightweight and easily integrated into applications written for systems such as Legion [18], Globus [12], Condor <ref> [27] </ref>, MPI [11], and PVM [17]. Two functions make up this lightweight interface and separate the two phases of a forecaster connection, InitForecaster () and RequestForecasts (). The InitForecaster () function opens a socket connection to a Forecaster and passes a list of requested forecasts.
Reference: [29] <author> R. Wolski. </author> <title> Dynamically forecasting network performance to support dynamic scheduling using the network weather service. </title> <booktitle> In Proc. 6th IEEE Symp. on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1997. </year> <note> to appear. </note>
Reference: [30] <author> R. Wolski. </author> <title> Dynamically forecasting network performance using the network weather service. Cluster Computing, </title> <note> 1998. also available from http://www.cs.ucsd.edu/users/rich/publications.html. </note>
Reference-contexts: This method of dynamically identifying a forecasting model has been shown to yield forecasts that are equivalent to, or slightly better than, the best forecasting model in the set <ref> [30] </ref>. The advantage of this adaptive approach is that it is ultimately non-parametric and, as such, can be applied to any time series presented to the Forecaster. <p> In [31] we showed a comparison of the forecasting accuracy between sophisticated time series models based on maximum likelihood techniques [14] and the forecasting suite we have implemented (described in <ref> [30] </ref>). The performance of the currently implemented suite is excellent compared to more powerful techniques for a variety of different metacomputing performance measurements. Second, the adaptive method allows new forecasting models to be incorporated easily.
Reference: [31] <author> R. Wolski, N. Spring, and C. Peterson. </author> <title> Implementing a performance forecasting system for metacomputing: The network weather service. </title> <booktitle> In Proceedings of Supercomputing 1997, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: From vmstat output, the CPU Sensor uses a combination of idle time, user time, and system time measurements to generate an estimate of the available CPU occupancy fraction <ref> [31] </ref>. Since these utilities generate their reports using internal Unix system variables, invoking the utilities presumably does not generate significant load. That is, they are fairly non-intrusive monitoring utilities. However, both may leave out considerable information that can affect measurement of CPU availability. <p> Even local-area cliques experienced enough variation to make fixed time-outs impractical. Moreover, using periodic local clocks (i.e. each Sensor probes the network according to its own local periodicity) causes Sensor contention that is statistically significant <ref> [31] </ref>. Our implementation of the NWS, therefore, gathers more accurate information as a result of its adaptive behavior. The adaptive forecasting model selection algorithm discussed in Section 5 and [30,29,31] allows the Forecasters to operate in a non-parametric way which promotes extensibility in two ways. <p> First, new and different performance measurement time series may be considered easily. Any series may be presented and, assuming that the suite of models is rich enough, a forecast can be obtained. In <ref> [31] </ref> we showed a comparison of the forecasting accuracy between sophisticated time series models based on maximum likelihood techniques [14] and the forecasting suite we have implemented (described in [30]).
Reference: [32] <author> W. Yeong, T. Howes, and S. Kille". </author> <title> Lightweight directory access protocol, </title> <month> March </month> <year> 1995. </year> <note> RFC 1777. </note>
Reference-contexts: This relationship is purely an engineering expediency, however, as the circular queue management techniques implemented for Persistent State storage are cumbersome to use to implement a directory service. We are, therefore, converting the Name Service to use an implementation of the Lightweight Directory Access Protocol <ref> [32] </ref> (LDAP). The address of the NWS Name Server process is the only well-known address used by the system, allowing both data and services to be distributed 4 . All other NWS processes register their name-location bindings with the Name Server. <p> We plan to continue to enhance the NWS both by adopting new metacom-puting standards as they become available, and by incorporating the fruits of the research that is facilitated by the system itself. We are currently working to implement the Name Server using Lightweight Directory Access Protocol (LDAP) <ref> [32] </ref> as this facility is becoming more commonly available. In addition, we are exploring new forecasting methodologies and new performance monitoring facilities appropriate for different distributed computing environments (e.g. Java).
Reference: [33] <author> C. Yoshikawa, B. Chun, P. Eastham, A. Vahdat, T. Anderson, and D. Culler. </author> <title> Using smart clients to build sclable services. </title> <booktitle> In Proceedings of the USENIX 1997 Technical Conference, </booktitle> <year> 1997. </year> <month> 19 </month>
Reference-contexts: Topology-d [24] is similar to the NWS in that it conducts a series of performance experiments (using both UDP/IP and TCP/IP) and then automatically analyzes the resulting data. One of its goals is to provide resource scheduling mechanisms such as Smart Clients <ref> [33] </ref>, AppLeS [3], and MARS [16] with information depicting the "state" of the network. Important differences, however, concern Topology-d's scalability and periodicity. The performance topology graph it produces is calculated relatively infrequently (once per hour in [24]) using N 2 measurements.
References-found: 32

