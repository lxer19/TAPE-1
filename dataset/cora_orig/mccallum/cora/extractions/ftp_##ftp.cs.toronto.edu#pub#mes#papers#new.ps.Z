URL: ftp://ftp.cs.toronto.edu/pub/mes/papers/new.ps.Z
Refering-URL: http://www.cs.toronto.edu/~mes/papers/printed.html
Root-URL: 
Email: email: mes@cs.toronto.edu  
Title: Transition System Semantics for Deterministic Situation Calculus.  
Author: M.Soutchanski 
Date: January 24, 1996  
Address: King's College Road SF3303  M5S 1A4 Canada,  
Affiliation: 10  Dep. of Computer Science, Univ. Of Toronto,  
Abstract: We define transition system semantics for deterministic situation calculus and study the set of entailments with respect to this semantics from basic theories of actions. These theories include axioms for deterministic complex actions defined by means of constructs while do and if then else. We formulate axioms which inherit the solution of the frame and qualification problems for complex action from Reiter's solution of these problems for primitive actions. We apply the notion of regression to a new setting, and demonstrate how regression can be used to test legality of actions and answer queries about the result of execution of a legal action. Because there are several methods for decomposition of transition systems, we expect that the relationships between situational calculus theories and transition systems will provide some insights on how the planning (or verification) problem can be decomposed into independent sub-problems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T.Costello. </author> <title> Causality is closed under Schema K. In Nonmonotonic Reasoning, Action and Change: </title> <booktitle> Working Notes of the IJCAI'95 Workshop, </booktitle> <pages> pages 22-30, </pages> <address> Montreal, </address> <month> August 20, </month> <year> 1995. </year>
Reference-contexts: D~ung [3] was the first to consider fluents as predicates with object variables and actions as arbitrary terms inside the scope of language A. Costello <ref> [1] </ref> considers an improvement of A which allows specifications with any boolean connectives and quantifiers over situational variables. The main distinctions of the current proposal are the following.
Reference: [2] <author> L. Dissett. </author> <title> Examples of decomposition of situation calculus theories. Final assignment for the CSC2532 Logic and Artificial Intelligence. </title> <institution> Dept. of Computer Science, Univ. of Toronto, </institution> <month> September, </month> <year> 1995. </year>
Reference-contexts: Obviously, we do not need literals from irrelevant story to answer queries which contain only literals from axioms related to monkey and banana, neither we need them to find a plan for the monkey to get the bananas. L.Dissett <ref> [2] </ref> explored how a decomposition can be constructed in this case following E.Ternovskaia's idea 20 that action precondition and successor situation axioms allow us to partition both fluents and actions into disjoint components.
Reference: [3] <author> P.M. D~ung. </author> <title> Representing actions in logic programming and its applications in database updates. </title> <editor> In D.Warren, editor, </editor> <booktitle> Logic Programming: Proceedings of the 10th Int. Conf. on Logic Program., </booktitle> <pages> 222-238, </pages> <year> 1993. </year>
Reference-contexts: This paper is partially devoted to extending the ideas developed in [4, 7, 8] to a more elaborate setting where actions and fluents can be parameterized. D~ung <ref> [3] </ref> was the first to consider fluents as predicates with object variables and actions as arbitrary terms inside the scope of language A. Costello [1] considers an improvement of A which allows specifications with any boolean connectives and quantifiers over situational variables.
Reference: [4] <author> M. Gelfond and V. Lifschitz. </author> <title> Representing Action and Change by Logic Programs. </title> <journal> J. of Logic Programming, </journal> <volume> 17, </volume> <pages> pages 301-322, </pages> <year> 1993 </year>
Reference-contexts: 1 Introduction In the context of reasoning about actions, transition system semantics (TSS) is proposed by Gelfond&Lifschitz <ref> [4] </ref>. Dynamics is described there by means of a special-purpose specification language A. <p> Whereas the formulas of the propositional language A are interrelationships between propositional fluents and atomic actions, in this paper we introduce a first-order language. This paper is partially devoted to extending the ideas developed in <ref> [4, 7, 8] </ref> to a more elaborate setting where actions and fluents can be parameterized. D~ung [3] was the first to consider fluents as predicates with object variables and actions as arbitrary terms inside the scope of language A. <p> Ramification problem, concurrent actions, as well as indeterminate actions and actions with stochastic results left as possible topics for research in future. 2 Advantages of transition system semantics Methodological benefits of TSS are discussed in the seminal papers <ref> [4, 7, 8] </ref> This semantics is intuitively natural and is implicit in the original presentation of the situation calculus by McCarthy&Hayes [13]. Furthemore, using TSS one can demonstrate that dynamic logic is a variant of the situation calculus with only two primitive actions: assignment and test.
Reference: [5] <author> D. Harel. </author> <title> First-Order Dynamic Logic. </title> <booktitle> Lecture Notes in Computer Science, 68, </booktitle> <address> 133p. </address> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Relationships between the TSS and other areas of computer science, facilitates proofs regarding the computational tractability of large classes of queries and new undecidability results (compare <ref> [5, 6, 9] </ref>) of the validity problem for different situation calculus formulas involving complex actions. 3 Language Let L be a sorted first-order language with three disjoint sorts for actions, situations and objects. 1 The vocabulary of L consists of symbols described below. <p> Similar reasoning shows that the formula :F (do (true?; S 0 )) 11 is not TSS-valid; it is sufficient to prove that :F (S 0 ) , :F (do (true?; S 0 )) is the TSS-valid formula. 5 Foundational Axioms Alike first-order dynamic logic <ref> [5, 6] </ref>, our axiomatization will provide the ability to discuss `dynamic' phenomena. In a classical logic we are usually interested in valid consequences of particular first-order theories. Similarly, in the section 6 we will study (application-oriented) theories of actions and the set of their entailments.
Reference: [6] <author> D. Harel. </author> <title> Dynamic Logic. </title> <editor> In D.M.Gabbay and F.Guenthner, eds., </editor> <booktitle> Handbook of Philosophical Logic. II: Extensions of Classical Logic, </booktitle> <pages> 497-604. </pages> <publisher> Reidel, </publisher> <address> Boston, MA, </address> <year> 1984. </year>
Reference-contexts: Relationships between the TSS and other areas of computer science, facilitates proofs regarding the computational tractability of large classes of queries and new undecidability results (compare <ref> [5, 6, 9] </ref>) of the validity problem for different situation calculus formulas involving complex actions. 3 Language Let L be a sorted first-order language with three disjoint sorts for actions, situations and objects. 1 The vocabulary of L consists of symbols described below. <p> Similar reasoning shows that the formula :F (do (true?; S 0 )) 11 is not TSS-valid; it is sufficient to prove that :F (S 0 ) , :F (do (true?; S 0 )) is the TSS-valid formula. 5 Foundational Axioms Alike first-order dynamic logic <ref> [5, 6] </ref>, our axiomatization will provide the ability to discuss `dynamic' phenomena. In a classical logic we are usually interested in valid consequences of particular first-order theories. Similarly, in the section 6 we will study (application-oriented) theories of actions and the set of their entailments.
Reference: [7] <author> G. N. Kartha. </author> <title> Soundness and Completeness Theorems for Three Formalizations of Action. </title> <booktitle> Proc. of the 13th IJCAI, </booktitle> <address> Chambery, France, </address> <pages> pages 724-729, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction In the context of reasoning about actions, transition system semantics (TSS) is proposed by Gelfond&Lifschitz [4]. Dynamics is described there by means of a special-purpose specification language A. Kartha <ref> [7] </ref> proves that under certain conditions action theories specified in A can be translated by entailment-preserving translations to/from other well-known formalisms for reasoning about actions; in the paper [8] by Kartha&Lifschitz, TSS has been 1 extended to deal with non-deterministic actions and the ramification problem. <p> Whereas the formulas of the propositional language A are interrelationships between propositional fluents and atomic actions, in this paper we introduce a first-order language. This paper is partially devoted to extending the ideas developed in <ref> [4, 7, 8] </ref> to a more elaborate setting where actions and fluents can be parameterized. D~ung [3] was the first to consider fluents as predicates with object variables and actions as arbitrary terms inside the scope of language A. <p> Ramification problem, concurrent actions, as well as indeterminate actions and actions with stochastic results left as possible topics for research in future. 2 Advantages of transition system semantics Methodological benefits of TSS are discussed in the seminal papers <ref> [4, 7, 8] </ref> This semantics is intuitively natural and is implicit in the original presentation of the situation calculus by McCarthy&Hayes [13]. Furthemore, using TSS one can demonstrate that dynamic logic is a variant of the situation calculus with only two primitive actions: assignment and test.
Reference: [8] <author> G. N. Kartha and V.Lifschitz. </author> <title> Actions with Indirect Effects. </title> <booktitle> In Principles of Knowledge Representation and Reasoning, Proc. of the 4th Intern. Conf., </booktitle> <address> Bonn (Germany), </address> <pages> pages 341-351, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year> <month> 21 </month>
Reference-contexts: Dynamics is described there by means of a special-purpose specification language A. Kartha [7] proves that under certain conditions action theories specified in A can be translated by entailment-preserving translations to/from other well-known formalisms for reasoning about actions; in the paper <ref> [8] </ref> by Kartha&Lifschitz, TSS has been 1 extended to deal with non-deterministic actions and the ramification problem. These and other results provide a basis for a mathematically precise comparison of different action theories. <p> Whereas the formulas of the propositional language A are interrelationships between propositional fluents and atomic actions, in this paper we introduce a first-order language. This paper is partially devoted to extending the ideas developed in <ref> [4, 7, 8] </ref> to a more elaborate setting where actions and fluents can be parameterized. D~ung [3] was the first to consider fluents as predicates with object variables and actions as arbitrary terms inside the scope of language A. <p> Ramification problem, concurrent actions, as well as indeterminate actions and actions with stochastic results left as possible topics for research in future. 2 Advantages of transition system semantics Methodological benefits of TSS are discussed in the seminal papers <ref> [4, 7, 8] </ref> This semantics is intuitively natural and is implicit in the original presentation of the situation calculus by McCarthy&Hayes [13]. Furthemore, using TSS one can demonstrate that dynamic logic is a variant of the situation calculus with only two primitive actions: assignment and test. <p> Informally, we always understand primitive actions as deterministic ones, i.e., we intentionally do not consider actions like `toss coin' and other aspects of nondeterminism <ref> [8] </ref>.
Reference: [9] <author> D. Kozen and J. Tiuryn. </author> <title> Logics of Programs. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, chapter 14, </booktitle> <pages> pages 791-840, </pages> <publisher> Elsevier Science Publ., </publisher> <year> 1990 </year>
Reference-contexts: Furthemore, using TSS one can demonstrate that dynamic logic is a variant of the situation calculus with only two primitive actions: assignment and test. Thanks to tight connections between TSS and other areas of theoretical computer science <ref> [9] </ref>, this semantics provides further insights toward improvements of the situation calculus. 2 For finite domains, the number of states is finite as is the set of transitions between states. Consequently, we may discover relationships between situation calculus theories and systems of discrete control. <p> Relationships between the TSS and other areas of computer science, facilitates proofs regarding the computational tractability of large classes of queries and new undecidability results (compare <ref> [5, 6, 9] </ref>) of the validity problem for different situation calculus formulas involving complex actions. 3 Language Let L be a sorted first-order language with three disjoint sorts for actions, situations and objects. 1 The vocabulary of L consists of symbols described below. <p> The set of all such terms is denoted CS (a) and is defined by induction (as in <ref> [9] </ref>). <p> This theorem is the consequence of the compactness theorem and Proposition 1. It is instructive to compare the assertion of this theorem with Proposition 24 in <ref> [9] </ref>. The important consequence of Theorem 2 is: Corollary 1 Ground formulas valid wrt TSS are recursively enumerable. Another corollary results from the fact that successor situation axioms completely characterize the evolution of a transition system given that information about the initial state is complete.
Reference: [10] <author> Y. Lesperance and H. Levesque. </author> <title> Indexical Knowledge and Robot Action ALogical Account. </title> <journal> Artificial Intelligence, special issue on Computational Theories of Interaction and Agency, v. </journal> <volume> 73, </volume> <pages> pages 69-115, </pages> <year> 1995. </year>
Reference-contexts: This solution was selected only because we do not consider here knowledge-related actions (to simplify the presentation). However, perceptions and other knowledge producing actions also can be introduced in the context of situation calculus <ref> [10, 18] </ref>. Our solution of the frame and qualification problems for complex actions inherits solution of the frame and qualification problems for primitive actions. Indeed, axioms (9-16) quantify over any actions (including complex actions) and allow a complex action to unfold into its constituents.
Reference: [11] <author> H. Levesque, R. Reiter, Y. Lesperance, F. Lin, R. Scherl. GOLOG: </author> <title> A Logic Programming Language for Dynamic Domains. </title> <note> Submitted to Jornal of Logic Programming, Special issue on Reasoning about Action and Change, 1995. Available as: ftp://ftp.cs.toronto.edu/pub/cogrob/GOLOGlang.ps.Z </note>
Reference-contexts: Our solution of the frame and qualification problems for complex actions inherits solution of the frame and qualification problems for primitive actions. Indeed, axioms (9-16) quantify over any actions (including complex actions) and allow a complex action to unfold into its constituents. Levesque et al. <ref> [11] </ref> have proposed an alternative solution for the frame problem in the case when complex actions can be non-deterministic, and when actions can include recursive procedures. Another difference between two proposals is that in [11] complex actions cannot be quantified over, while in this paper complex actions are introduced as terms. <p> Levesque et al. <ref> [11] </ref> have proposed an alternative solution for the frame problem in the case when complex actions can be non-deterministic, and when actions can include recursive procedures. Another difference between two proposals is that in [11] complex actions cannot be quantified over, while in this paper complex actions are introduced as terms.
Reference: [12] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> J. Logic Comput., </journal> <volume> 4: </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: In papers <ref> [12, 16] </ref>, a similar system of axioms is interpreted over many-sorted universum according to Tarski's semantics. Without the second order axiom of induction discussed in [16], these axioms fail to say that the universe of situations is a tree with root S 0 . <p> Hence, M j= S 1 ~ S 2 . In all other cases, M j= :(S 1 ~ S 2 ). Before proceeding to a study of situation calculus theories and their entailments, we relate our interpretation of to the meaning of foundational axioms presented in <ref> [12, 16] </ref>. 5.1 Tree of situations vs. transitions between states We can label each edge going from the node s to the node do (a; s) by the name of primitive action a. Hence, s could be considered to vary along branches in the tree of situations. <p> Thus, situations can be partitioned into a finite number of states, and transitions between them form a finite automaton. 9 The principle of induction on &lt; is specifically designed for proving sentences of the form (8s):S 0 s (s) and other useful consequences; they can be found in <ref> [12, 16] </ref>. 13 6 Basic theories of actions Reiter [17] has introduced basic theories of action as a collection of the foundational axioms for situations (with second order induction on situations), successor situation axioms and action precondition axioms, and unique names axioms for actions and fluents.
Reference: [13] <institution> J.McCarthy and P.Hayes Some philosophical problems from the standpoint of artificial intelligence. </institution> <note> In: </note> <editor> B.Meltzer and D.Michie, editors, </editor> <booktitle> Machine Intelligence, v. </booktitle> <volume> 4, </volume> <publisher> Edinburgh University Press, </publisher> <year> 1969, </year> <pages> pages 463-502. </pages>
Reference-contexts: Costello [1] considers an improvement of A which allows specifications with any boolean connectives and quantifiers over situational variables. The main distinctions of the current proposal are the following. Our specification language is based upon the classical first-order language of the situational calculus as defined in McCarthy&Hayes <ref> [13] </ref> and Reiter [15] papers. In addition to primitive actions, we consider deterministic complex actions defined by means of constructs while do and if then else. Complex action are introduced as terms. <p> Complex action are introduced as terms. We formulate axioms which inherit the solution of the frame problem for complex action from Reiter's [15] solution of this problem for primitive actions; thus we provide the formal development of the notion strategies proposed in <ref> [13] </ref>. We define TSS for deterministic situation calculus and study the set of entailments wrt TSS from basic theories of actions which formulate dynamical dependencies of an application area. <p> and actions with stochastic results left as possible topics for research in future. 2 Advantages of transition system semantics Methodological benefits of TSS are discussed in the seminal papers [4, 7, 8] This semantics is intuitively natural and is implicit in the original presentation of the situation calculus by McCarthy&Hayes <ref> [13] </ref>. Furthemore, using TSS one can demonstrate that dynamic logic is a variant of the situation calculus with only two primitive actions: assignment and test.
Reference: [14] <author> Z. Manna, R. </author> <title> Waldinger How to clear a block: A theory of plans. </title> <editor> J. </editor> <booktitle> of Automated Reasoning, 3, </booktitle> <address> N 4 (Dec.), p.343-377, </address> <year> 1987. </year>
Reference-contexts: Similarly, tests ? must be performed not in hypothetical or previous situations, but in the current situation because we need `constructive', i.e., directly executable, actions (compare with <ref> [14] </ref>). Our language includes four functional symbols for complex actions. To simplify notation we also introduce two abbreviations while do and if then else in terms of these functional symbols. Three of the symbols fl, `;', and t take only arguments of sort action.
Reference: [15] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In: V. Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: The main distinctions of the current proposal are the following. Our specification language is based upon the classical first-order language of the situational calculus as defined in McCarthy&Hayes [13] and Reiter <ref> [15] </ref> papers. In addition to primitive actions, we consider deterministic complex actions defined by means of constructs while do and if then else. Complex action are introduced as terms. We formulate axioms which inherit the solution of the frame problem for complex action from Reiter's [15] solution of this problem for <p> in McCarthy&Hayes [13] and Reiter <ref> [15] </ref> papers. In addition to primitive actions, we consider deterministic complex actions defined by means of constructs while do and if then else. Complex action are introduced as terms. We formulate axioms which inherit the solution of the frame problem for complex action from Reiter's [15] solution of this problem for primitive actions; thus we provide the formal development of the notion strategies proposed in [13]. We define TSS for deterministic situation calculus and study the set of entailments wrt TSS from basic theories of actions which formulate dynamical dependencies of an application area. <p> We define TSS for deterministic situation calculus and study the set of entailments wrt TSS from basic theories of actions which formulate dynamical dependencies of an application area. We apply the notion of regression <ref> [15, 17] </ref> to a new setting, and demonstrate how regression can be used to test legality of actions and to answer queries about the result of execution of an action, given that this action is legal. <p> Thus, the axiom schema (9) allows us to characterize legal execution of tests ?. The collection of action precondition axioms leads to a solution of the qualification problem (see <ref> [15] </ref>): we ignore all minor qualifications, i.e., facts with negligibly small or implausible influence on the executability of an action. We name the ith conjunct (i 2 1; : : : ; k) in (8) a successor situation axiom (or frame axiom). <p> This is a sentence, where F i is a fluent, and where i F is a simple formula. The collection (8) of successor situation axioms gives solution of the frame problem for primitive actions <ref> [15] </ref>. This solution is obtained under the following assumptions. All primitive actions are deterministic and serial; their effects on the world are axiomatized by a finite number of so called `causal laws'. <p> We introduce the regression operator R following <ref> [15] </ref> with several minor modifications required for the new precondition and successor situation axioms. Let G be arbitrary formula of L. The regression operator R when applied to G is defined recursively. <p> The corresponding notion of legality has been introduced by Reiter <ref> [15, 16] </ref>. A ground action term ff 2 A is legal (wrt some background axiomatization D) iff D j= S 0 do (ff; S 0 ) (here is as defined in the foundational axioms ). <p> From the definition of legality and the theorem 2 follows that if a complex action term ff has occurrences of while-loops and it is legal in D, then all while-loops inside ff correspond to finite computation sequences. Now we will consider the projection problem <ref> [15] </ref>.
Reference: [16] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64: </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: In papers <ref> [12, 16] </ref>, a similar system of axioms is interpreted over many-sorted universum according to Tarski's semantics. Without the second order axiom of induction discussed in [16], these axioms fail to say that the universe of situations is a tree with root S 0 . <p> In papers [12, 16], a similar system of axioms is interpreted over many-sorted universum according to Tarski's semantics. Without the second order axiom of induction discussed in <ref> [16] </ref>, these axioms fail to say that the universe of situations is a tree with root S 0 . Just as the theory with one successor function has non-standard models (disjoint infinite lists), our theory also has non-standard models: disjoint trees. <p> Hence, M j= S 1 ~ S 2 . In all other cases, M j= :(S 1 ~ S 2 ). Before proceeding to a study of situation calculus theories and their entailments, we relate our interpretation of to the meaning of foundational axioms presented in <ref> [12, 16] </ref>. 5.1 Tree of situations vs. transitions between states We can label each edge going from the node s to the node do (a; s) by the name of primitive action a. Hence, s could be considered to vary along branches in the tree of situations. <p> It follows from axioms (4) and (5) that &lt; defines irreflexive and transitive relation. In <ref> [16] </ref>, the axiom system has been equipped also with the second order induction axiom. <p> Thus, situations can be partitioned into a finite number of states, and transitions between them form a finite automaton. 9 The principle of induction on &lt; is specifically designed for proving sentences of the form (8s):S 0 s (s) and other useful consequences; they can be found in <ref> [12, 16] </ref>. 13 6 Basic theories of actions Reiter [17] has introduced basic theories of action as a collection of the foundational axioms for situations (with second order induction on situations), successor situation axioms and action precondition axioms, and unique names axioms for actions and fluents. <p> The corresponding notion of legality has been introduced by Reiter <ref> [15, 16] </ref>. A ground action term ff 2 A is legal (wrt some background axiomatization D) iff D j= S 0 do (ff; S 0 ) (here is as defined in the foundational axioms ).
Reference: [17] <author> R. Reiter. </author> <booktitle> Lecture Notes for the CSC2532 Logic and Artificial Intelligence. </booktitle> <institution> Dept. of Computer Science, Univ. of Toronto, </institution> <year> 1995. </year>
Reference-contexts: We define TSS for deterministic situation calculus and study the set of entailments wrt TSS from basic theories of actions which formulate dynamical dependencies of an application area. We apply the notion of regression <ref> [15, 17] </ref> to a new setting, and demonstrate how regression can be used to test legality of actions and to answer queries about the result of execution of an action, given that this action is legal. <p> finite number of states, and transitions between them form a finite automaton. 9 The principle of induction on &lt; is specifically designed for proving sentences of the form (8s):S 0 s (s) and other useful consequences; they can be found in [12, 16]. 13 6 Basic theories of actions Reiter <ref> [17] </ref> has introduced basic theories of action as a collection of the foundational axioms for situations (with second order induction on situations), successor situation axioms and action precondition axioms, and unique names axioms for actions and fluents.
Reference: [18] <author> R. Scherl and H.J.Levesque. </author> <title> The frame problem and knowledge-producing actions. </title> <booktitle> In Proc. of the 11th National Conference on Artificial Intelligence, </booktitle> <address> Washington, DC, </address> <publisher> AAAI Press/The MIT Press, </publisher> <pages> pages 689-695, </pages> <year> 1993. </year>
Reference-contexts: This solution was selected only because we do not consider here knowledge-related actions (to simplify the presentation). However, perceptions and other knowledge producing actions also can be introduced in the context of situation calculus <ref> [10, 18] </ref>. Our solution of the frame and qualification problems for complex actions inherits solution of the frame and qualification problems for primitive actions. Indeed, axioms (9-16) quantify over any actions (including complex actions) and allow a complex action to unfold into its constituents.
Reference: [19] <author> A.P. Stolboushkin and M.A. Taitslin. </author> <title> The comparison of the expressive power of first-order dynamic logics. </title> <journal> Theoretical Computer Science, </journal> <volume> 27: </volume> <pages> 197-209, </pages> <year> 1983. </year> <month> 22 </month>
Reference-contexts: In this definition the operation `[' over CS () denotes union of sets represented by CS (); a 0 2 A denotes any primitive action; and 2 SF . 5 The paper <ref> [19] </ref> proves that determinism is strict restriction on the expressive power of dynamic logic. 6 CS (a 0 ) = fa 0 g and CS (?) = f?g CS (a 1 t a 2 ) = CS (a 1 ) [ CS (a 2 ); S where a 0 =skip and
References-found: 19

