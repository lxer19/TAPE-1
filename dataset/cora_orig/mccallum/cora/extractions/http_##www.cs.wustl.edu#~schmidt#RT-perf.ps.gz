URL: http://www.cs.wustl.edu/~schmidt/RT-perf.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/tri-dove.html
Root-URL: 
Email: fschmidt,sumedh,sergio,gokhaleg@cs.wustl.edu  
Title: Software Architectures for Reducing Priority Inversion and Non-determinism in Real-time Object Request Brokers  
Author: Douglas C. Schmidt, Sumedh Mungee, Sergio Flores-Gaitan, and Aniruddha Gokhale 
Keyword: Real-time CORBA Object Request Broker, QoS-enabled OO Middleware, Performance Measurements  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: There is increasing demand to extend Object Request Broker (ORB) middleware to support distributed applications with stringent real-time requirements. However, conventional ORB implementations, such as CORBA ORBs, exhibit substantial priority inversion and non-determinism, which makes them unsuitable for applications with deterministic real-time requirements. This paper provides two contributions to the study and design of real-time ORB middleware. First, it illustrates empirically why conventional ORBs do not yet support real-time quality of service. Second, it evaluates connection and concur-rency software architectures to identify strategies that reduce priority inversion and non-determinism in real-time CORBA ORBs. The results presented in this paper demonstrate the feasibility of using standard OO middleware like CORBA to support certain types of real-time applications over the Internet. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Gopalakrishnan and G. Parulkar, </author> <title> Bringing Real-time Scheduling Theory and Practice Closer for Multimedia Computing, </title> <booktitle> in SIGMETRICS Conference, </booktitle> <address> (Philadelphia, PA), </address> <publisher> ACM, </publisher> <month> May </month> <year> 1996. </year>
Reference-contexts: 1 Introduction 1.1 Emerging Trends in Distributed Real-time Systems Next-generation distributed and real-time applications, such as video-on-demand, teleconferencing, and avionics, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency <ref> [1] </ref>, bandwidth, and reliability [2].
Reference: [2] <author> S. Landis and S. Maffeis, </author> <title> Building Reliable Distributed Systems with CORBA, </title> <booktitle> Theory and Practice of Object Systems, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: 1 Introduction 1.1 Emerging Trends in Distributed Real-time Systems Next-generation distributed and real-time applications, such as video-on-demand, teleconferencing, and avionics, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency [1], bandwidth, and reliability <ref> [2] </ref>.
Reference: [3] <author> R. Johnson, </author> <title> Frameworks = Patterns + Components, </title> <journal> Communications of the ACM, </journal> <volume> vol. 40, </volume> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: and integration frameworks: There is a general industry trend away from pro fl This work was supported in part by Boeing, CDI, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and US Sprint. gramming real-time applications from scratch to integrating applications using reusable components based on object-oriented (OO) middleware <ref> [3] </ref>. Increased focus on QoS-enabled components and open systems: There is increasing demand for remote method invocation and messaging technology to simplify the collaboration of open distributed application components [4] that possess stringent QoS requirements.
Reference: [4] <author> Z. Deng and J. W.-S. Liu, </author> <title> Scheduling Real-Time Applications in an Open Environment, </title> <booktitle> in Proceedings of the 18th IEEE Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: Increased focus on QoS-enabled components and open systems: There is increasing demand for remote method invocation and messaging technology to simplify the collaboration of open distributed application components <ref> [4] </ref> that possess stringent QoS requirements. Increased focus on standardizing real-time middleware: Several international efforts are currently addressing QoS for OO middleware. The most prominent is the OMG CORBA standardization effort [5].
Reference: [5] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: Increased focus on standardizing real-time middleware: Several international efforts are currently addressing QoS for OO middleware. The most prominent is the OMG CORBA standardization effort <ref> [5] </ref>. CORBA is OO middleware that allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects [6]. <p> TAO is a highly extensible ORB endsystem written using ACE. It is targeted for applications with deterministic and statistical QoS requirements, as well as best effort requirements. TAO is fully compliant with the latest OMG CORBA specifications <ref> [5] </ref> and is the first standard CORBA ORB endsystem that can support end-to-end QoS guarantees over ATM networks. <p> Likewise, lack of proper I/O subsystem integration yields excessive data copying, fragmentation, reassembly, context switching, synchronization, checksumming, demultiplexing, marshaling, and demarshaling overhead [25]. 3. ORB transport protocol implementations: Inefficient implementations of ORB transport protocols such as the CORBA Internet inter-ORB protocol (IIOP) <ref> [5] </ref> and Simple Flow Protocol (SFP) [26] can cause performance overhead and priority inversion. Specific factors responsible for these inversions include improper connection management strategies, inefficient sharing of endsystem resources, and excessive synchronization overhead in ORB protocol implementations. 4. <p> in Section 4 illustrate that much of the overhead, priority inversion, and non-determinism in ORB endsys-tems does not stem from protocol implementations in the I/O subsystem, but arises instead from the software architecture of the ORB Core. 2.2.2 ORB Core A CORBA ORB Core implements the General Inter-ORB Protocol (GIOP) <ref> [5] </ref>, which defines a standard format for interop-erating between potentially heterogeneous ORBs. The ORB Core establishes connections and implements concurrency architectures that process GIOP requests. The following discussion outlines common sources of priority inversion and non-determinism in conventional ORB Core implementations.
Reference: [6] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: CORBA is OO middleware that allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects <ref> [6] </ref>. There has been recent progress towards standardizing CORBA for real-time [7] and embedded [8] systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications.
Reference: [7] <institution> Object Management Group, Realtime CORBA 1.0 Request for Proposals, OMG Document orbos/97-09-31 ed., </institution> <month> September </month> <year> 1997. </year>
Reference-contexts: There has been recent progress towards standardizing CORBA for real-time <ref> [7] </ref> and embedded [8] systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications. <p> Neither CORBAplus, miniCOOL, nor MT-Orbix provide APIs for preestablishing connections; TAO provides these APIs as extensions to CORBA. We recommend that APIs to control the pre-establishment of connections should be defined as an OMG standard for real time CORBA <ref> [8, 7] </ref>. 19 2. Real-time ORBs should avoid multiplexing requests of different priorities over a shared connection: Sharing connections requires synchronization. Thus, high-priority requests can be blocked until low-priority threads release the shared connection lock.
Reference: [8] <author> Object Management Group, </author> <title> Minimum CORBA Request for Proposal, </title> <editor> OMG Document orbos/97-06-14 ed., </editor> <month> June </month> <year> 1997. </year>
Reference-contexts: There has been recent progress towards standardizing CORBA for real-time [7] and embedded <ref> [8] </ref> systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications. <p> Neither CORBAplus, miniCOOL, nor MT-Orbix provide APIs for preestablishing connections; TAO provides these APIs as extensions to CORBA. We recommend that APIs to control the pre-establishment of connections should be defined as an OMG standard for real time CORBA <ref> [8, 7] </ref>. 19 2. Real-time ORBs should avoid multiplexing requests of different priorities over a shared connection: Sharing connections requires synchronization. Thus, high-priority requests can be blocked until low-priority threads release the shared connection lock.
Reference: [9] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: In particular, conventional CORBA ORBs are not well suited for performance-sensitive, distributed real-time applications due to (1) lack of QoS specification interfaces, (2) lack of QoS enforcement, (3) lack of real-time programming features, and (4) general lack of performance and predictability <ref> [9] </ref>. Although some operating systems, networks, and protocols now support real-time scheduling, they do not provide inte 1 grated end-to-end real-time ORB endsystem solutions [10]. Moreover, relatively little systems research has focused on strategies and tactics for real-time CORBA.
References-found: 9

