URL: http://www.cs.rpi.edu/~blythes/docs/isss95.ps
Refering-URL: http://www.cs.rpi.edu/~blythes/pubs.html
Root-URL: http://www.cs.rpi.edu
Title: An Exact Methodology for Scheduling in a 3D Design Space  
Author: Samit Chaudhuri Stephen A. Blythe Robert A. Walker zy 
Address: Troy, NY 12180  
Affiliation: Rensselaer Polytechnic Institute  
Abstract: This paper describes an exact solution methodology, implemented in Rensselaer's Voyager design space exploration system, for solving the scheduling problem in a 3-dimensional (3D) design space: the usual 2D design space (which trades off area and schedule length), plus a third dimension representing clock length. Unlike design space exploration methodologies which rely on bounds or estimates, this methodology is guaranteed to find the globally optimal solution to the 3D scheduling problem. Furthermore, this methodology efficiently prunes the search space, eliminating provably inferior design points through: (1) a careful selection of candidate clock lengths, and (2) tight bounds on the number of functional units of each type or on the schedule length. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. B. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. Addison-Wesley VLSI systems series. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, USA, </address> <year> 1990. </year>
Reference-contexts: However, determining this clock length requires a detailed analysis of the clock skew, wire delays, glue logic delays, setup and propagation delays of the storage elements, etc. <ref> [1] </ref> quantities largely unknown during high-level synthesis. Fortunately, although such a detailed analysis is necessary later in the design process, it is not needed during high-level synthesis, where only the macroscopic structure of the circuit is determined.
Reference: [2] <author> J. Blazewicz. </author> <title> Simple Algorithms for Multiprocessor Scheduling to Meet Deadlines. </title> <journal> Information Processing Letters, </journal> <volume> 6(5):162 - 164, </volume> <month> Oct. </month> <year> 1977. </year>
Reference-contexts: One early formulation of the schedule length lower-bounding problem in presence of resource constraints is presented in [12]; however, the bounds produced by that approach are very loose. More recent algorithms that produce tighter bounds are those in [21] and [20], based on Jackson's earliest deadline rule (ED-Rule) <ref> [2] </ref>, and those in [22] and [10], based on a theorem originally given by Fernandez and Bussell in [8, Theorem 2].
Reference: [3] <author> V. Chaiyakul, A. C.-H. Wu, and D. D. Gajski. </author> <title> Timing Models for High Level Synthesis. </title> <booktitle> In [25], </booktitle> <pages> pages 60-65. </pages>
Reference-contexts: Fortunately, although such a detailed analysis is necessary later in the design process, it is not needed during high-level synthesis, where only the macroscopic structure of the circuit is determined. One appropriate model of the clock length during high-level synthesis is presented by Chaiyakul and Gajski in <ref> [3] </ref>. Here the clock length is assumed to have 3 components: dat-apath delay, control delay, and wire delay.
Reference: [4] <author> S. Chaudhuri and R. A. Walker. </author> <title> Computing Lower Bounds on Functional Units before Scheduling. </title> <booktitle> In Proc. of the 7th International Symposium on High-Level Synthesis, </booktitle> <pages> pages 36-41, </pages> <address> Niagara-on-the-Lake, Canada, May 18-20 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Second, TRCS is solved as a decision problem, rather than an optimization problem, using a formulation that is well-structured, and requires few, if any, branches in a branch-and-bound search [5]. Finally, the functional unit lower bounds are highly accurate <ref> [4] </ref> (in almost every case they lead immediately to a feasible solution), so in practice the lower bounds seldom have to be increased to solve TRCS again. Thus the TCS-3D problem can be solved quickly, even for medium-sized benchmarks (see Section 7). <p> Ideally, we would like to find the tightest bounds of all possible relaxations, but with an efficient solution methodology. One approach to forming the FU lower-bounding problem from the FU minimization problem is to relax the precedence constraints between operations. Other than our work <ref> [4] </ref>, we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain [12] (and a similar relaxation in [13]), and the tighter relaxations in [22, 18, 10], and [20] based on a method originally proposed by Fernandez and Bussell in [8, Theorem <p> Our work, described more fully in <ref> [4] </ref>, takes a different approach. We start with a formal description of the FU minimization problem, which finds the minimum value m k of the number of functional units of type k 2 K. <p> In practice, we have verified that the bounds produced are exact in most cases. Furthermore, the solution to this functional unit lower-bounding problem can be found by solving at most two LP's (which can be done in polynomial time). Thus we have developed a functional unit lower-bounding methodology <ref> [4] </ref> 4 that is guaranteed to produce the tightest bounds of all pos-sible precedence relaxations and that does so in polynomial time, even though our original formulation was an ILP formulation. 6 Bounding the Length of the Schedule The previous section briefly described Voyager's method to generate tight lower bounds on
Reference: [5] <author> S. Chaudhuri, R. A. Walker, and J. E. Mitchell. </author> <title> Analyzing and Exploiting the Structure of the Constraints in the ILP Approach to the Scheduling Problem. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 2(4) </volume> <pages> 456-471, </pages> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Forced to choose a clock length for the scheduling algorithm to use, the designer would probably choose either a clock length of 48ns or 163ns the execution delay of either addition or multiplication. Given those clock lengths, an optimal scheduler that supports multi-cycle operations (such as the ILP-based scheduler <ref> [5] </ref> in our Voyager design space exploration system) would produce the results shown on the lines labeled 48 and 163 in Table 1. Now consider the other lines of Table 1, which represent other, perhaps less obvious, choices for the clock length. <p> First, the functional unit lower bounds can be computed in polynomial time, by solving at most two Linear Programs (LPs). Second, TRCS is solved as a decision problem, rather than an optimization problem, using a formulation that is well-structured, and requires few, if any, branches in a branch-and-bound search <ref> [5] </ref>. Finally, the functional unit lower bounds are highly accurate [4] (in almost every case they lead immediately to a feasible solution), so in practice the lower bounds seldom have to be increased to solve TRCS again. <p> Finally, a TRCS formulation is used that was carefully designed and is well-structured <ref> [5] </ref>, and therefore usually finds an optimal solution with few branches. 3 Determining Candidate Clock Lengths One of the most important parameters needed by any scheduling algorithm is the length of the system clock. <p> However, those theorems are not presented here due to lack of space. 4 Optimally Solving the Scheduling Problem In high-level synthesis, the basic scheduling problem is the problem of determining the control step in which each operation will execute. After a careful formal analysis of the scheduling problem <ref> [5] </ref>, we were able to develop well-structured Integer Linear Programming (ILP) formulations of the scheduling problems, in particular the TRCS problem. Voyager's formulation of the TRCS problem can be summarized as follows. <p> Further details on Voyager's scheduling ILP formulations can be found in <ref> [5] </ref>. 5 Bounding the Number of Functional Units As discussed earlier in Section 2, it is important to generate tight lower bounds on the number of functional units (FUs) of each type, so that those bounds can be used as resource constraints to convert the TCS problem into an easier-to-solve TRCS
Reference: [6] <author> L.-G. Chen and L.-G. Jeng. </author> <title> Optimal Module Set and Clock Cycle Selection for DSP Synthesis. </title> <booktitle> In Proc. of 1991 IEEE International Symp. on Circuits and Systems., </booktitle> <pages> pages 2200-2203, </pages> <address> Singapore, June 11-14 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: However, the number of candidate clock lengths can be reduced even further, as shown in our Theorem 1 below (a similar observation was made by Chen et al. in <ref> [6] </ref>, but presented without proof).
Reference: [7] <author> M. Corazao, M. Khalaf, L. Guerra, M. Potkonjak, and J. M. Rabaey. </author> <title> Instruction Set Mapping for Performance Optimization . In Proc. </title> <booktitle> of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 518-521, </pages> <address> Santa Clara, California, Nov. 7-11 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Therefore it may seem at first that the globally optimal solution to the 3D scheduling problem cannot be found without optimally solving the scheduling problem for every possible clock length a prohibitively expensive exhaustive search. Fortunately, this exhaustive search is not necessary. In <ref> [7] </ref>, Corazao et al. combined clock length determination with the problem of operation template matching, and made 3 some suggestions to reduce the number of candidate clock lengths.
Reference: [8] <author> E. B. Fernandez and B. Bussell. </author> <title> Bounds on the number of Processors and Time for Multiprocessor Optimal Schedule. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-22(8):745-751, </volume> <month> Aug. </month> <year> 1973. </year>
Reference-contexts: work [4], we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain [12] (and a similar relaxation in [13]), and the tighter relaxations in [22, 18, 10], and [20] based on a method originally proposed by Fernandez and Bussell in <ref> [8, Theorem 1] </ref>. Our work, described more fully in [4], takes a different approach. We start with a formal description of the FU minimization problem, which finds the minimum value m k of the number of functional units of type k 2 K. <p> More recent algorithms that produce tighter bounds are those in [21] and [20], based on Jackson's earliest deadline rule (ED-Rule) [2], and those in [22] and [10], based on a theorem originally given by Fernandez and Bussell in <ref> [8, Theorem 2] </ref>. Furthermore, those algorithms can be applied iteratively (Hu et al. apply Fernandez' Theorem 2 in [9], and Langevin applies ED-Rule in [14]), producing even tighter bounds, although at the cost of increased algorithmic complexity.
Reference: [9] <author> Y. Hu and B. S. Carlson. </author> <title> Improved Lower Bounds for the Scheduling Optimization Problem. </title> <booktitle> In Proc. of 1994 IEEE International Symp. on Circuits and Systems., </booktitle> <pages> pages 295-298, </pages> <address> London, England, May 30-June 2 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Furthermore, those algorithms can be applied iteratively (Hu et al. apply Fernandez' Theorem 2 in <ref> [9] </ref>, and Langevin applies ED-Rule in [14]), producing even tighter bounds, although at the cost of increased algorithmic complexity.
Reference: [10] <author> Y. Hu, A. Ghouse, and B. S. Carlson. </author> <title> Lower Bounds on the Iteration Time and the number of Resources for Functional Pipelined Data Flow Graphs. </title> <booktitle> In [26], </booktitle> <pages> pages 21-24. </pages>
Reference-contexts: Other than our work [4], we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain [12] (and a similar relaxation in [13]), and the tighter relaxations in <ref> [22, 18, 10] </ref>, and [20] based on a method originally proposed by Fernandez and Bussell in [8, Theorem 1]. Our work, described more fully in [4], takes a different approach. <p> More recent algorithms that produce tighter bounds are those in [21] and [20], based on Jackson's earliest deadline rule (ED-Rule) [2], and those in [22] and <ref> [10] </ref>, based on a theorem originally given by Fernandez and Bussell in [8, Theorem 2]. Furthermore, those algorithms can be applied iteratively (Hu et al. apply Fernandez' Theorem 2 in [9], and Langevin applies ED-Rule in [14]), producing even tighter bounds, although at the cost of increased algorithmic complexity.
Reference: [11] <author> R. Jain, A. C. Parker, and N. Park. </author> <title> Module Selection for Pipeline Synthesis. </title> <booktitle> In Proc. of the 25th ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 542-547, </pages> <address> Ana-heim, California, June 12-15 1988. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Unfortunately, the clock determination problem is usually ignored in favor of ad hoc decisions or estimates, which, as demonstrated later, can ignore much of the design space and lead to an inferior design. For example, several previous clock estimation schemes <ref> [19, 11] </ref> use the delay of the slowest functional unit as the estimated clock length.
Reference: [12] <author> R. Jain, A. C. Parker, and N. Park. </author> <title> Predicting System-Level Area and Delay for Pipelined and Nonpipelined Designs. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(8) </volume> <pages> 955-965, </pages> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: One approach to forming the FU lower-bounding problem from the FU minimization problem is to relax the precedence constraints between operations. Other than our work [4], we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain <ref> [12] </ref> (and a similar relaxation in [13]), and the tighter relaxations in [22, 18, 10], and [20] based on a method originally proposed by Fernandez and Bussell in [8, Theorem 1]. Our work, described more fully in [4], takes a different approach. <p> This section presents a similar method to generate a tight lower bound on the schedule length, so that the RCS problem can be solved more efficiently. One early formulation of the schedule length lower-bounding problem in presence of resource constraints is presented in <ref> [12] </ref>; however, the bounds produced by that approach are very loose.
Reference: [13] <author> K. Kuc ukcakar. </author> <title> System-Level Synthesis Techiques with Emphasis on Partitioning and Design Timing. </title> <type> PhD thesis, </type> <institution> Electrical Engineering Systems Department, University of Southern California, </institution> <year> 1991. </year>
Reference-contexts: Other than our work [4], we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain [12] (and a similar relaxation in <ref> [13] </ref>), and the tighter relaxations in [22, 18, 10], and [20] based on a method originally proposed by Fernandez and Bussell in [8, Theorem 1]. Our work, described more fully in [4], takes a different approach.
Reference: [14] <author> M. Langevin and E. Cerny. </author> <title> A Recursive Technique for Computing Lower-Bound Performance of Schedules. </title> <booktitle> In [26], </booktitle> <pages> pages 16-20. </pages>
Reference-contexts: Furthermore, those algorithms can be applied iteratively (Hu et al. apply Fernandez' Theorem 2 in [9], and Langevin applies ED-Rule in <ref> [14] </ref>), producing even tighter bounds, although at the cost of increased algorithmic complexity.
Reference: [15] <author> G. D. </author> <title> Micheli. Synthesis and Optimization of Digital Circuits. </title> <booktitle> McGraw-Hill series in electrical and computer engineering. </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, NY, USA, </address> <year> 1994. </year>
Reference-contexts: In reality, however, this 2D design space is only a small part of a much larger design space. One such larger design space is presented by De Micheli in <ref> [15] </ref>, and is illustrated in Figure 1. Here the design space for high-level synthesis is viewed as a 3-dimensional (3D) space, with axes not only representing schedule length and area, but clock (cycle) length as well.
Reference: [16] <author> S. Narayan and D. D. Gajski. </author> <title> System Clock Estimation based on Clock Slack Minimization. </title> <booktitle> In [25], </booktitle> <pages> pages 66-71. </pages>
Reference-contexts: Assume that the VDP100 module library <ref> [16, 24] </ref> is used, which has a multiplication delay of 163ns, and an addition delay of 48ns. Forced to choose a clock length for the scheduling algorithm to use, the designer would probably choose either a clock length of 48ns or 163ns the execution delay of either addition or multiplication. <p> For example, several previous clock estimation schemes [19, 11] use the delay of the slowest functional unit as the estimated clock length. A more realistic approach is used in <ref> [16] </ref>, in which a contiguous range of integer candidate clock lengths is heuristically evaluated in an attempt to provide some guidance as to the best clock length to choose. However, all of these approaches choose the clock length before, and independent of, scheduling. <p> We used the VDP100 module library from <ref> [16, 24] </ref>, giving a datapath delay of 48ns for addition, 56ns for subtraction, and 163ns for multiplication.
Reference: [17] <author> J. A. Nestor and G. Krishnamoorthy. SALSA: </author> <title> A New Approach to Scheduling with Timing Constraints. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 12(8) </volume> <pages> 1107-1122, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: problems, and is guaranteed to produce the tightest bound of all possible precedence relaxations in polynomial time. 7 Experimental Results To demonstrate the accuracy and performance of Voyager's 3D scheduling methodology, we conducted a series of experiments using the well-known Elliptic Wave Filter (EWF) [23, p.206] and Discrete Cosine Transform <ref> [17] </ref> (DCT) benchmarks. We used the VDP100 module library from [16, 24], giving a datapath delay of 48ns for addition, 56ns for subtraction, and 163ns for multiplication.
Reference: [18] <author> S. Y. Ohm, F. J. Kurdahi, and N. Dutt. </author> <title> Comprehensive Lower Bound Estimation from Behavioral Descriptions. </title> <booktitle> In Proc. of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 182-187, </pages> <address> San Jose, California, Nov. 6-10 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Other than our work [4], we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain [12] (and a similar relaxation in [13]), and the tighter relaxations in <ref> [22, 18, 10] </ref>, and [20] based on a method originally proposed by Fernandez and Bussell in [8, Theorem 1]. Our work, described more fully in [4], takes a different approach.
Reference: [19] <author> N. Park and A. C. Parker. </author> <title> Synthesis of Optimal Clocking Schemes. </title> <booktitle> In Proc. of the 23rd ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 454-460, </pages> <address> Las Vegas, June 1986. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Unfortunately, the clock determination problem is usually ignored in favor of ad hoc decisions or estimates, which, as demonstrated later, can ignore much of the design space and lead to an inferior design. For example, several previous clock estimation schemes <ref> [19, 11] </ref> use the delay of the slowest functional unit as the estimated clock length.
Reference: [20] <author> J. M. Rabaey and M. Potkonjak. </author> <title> Estimating Implementation Bounds for Real Time DSP Application Specific Circuits. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(6) </volume> <pages> 669-683, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Other than our work [4], we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain [12] (and a similar relaxation in [13]), and the tighter relaxations in [22, 18, 10], and <ref> [20] </ref> based on a method originally proposed by Fernandez and Bussell in [8, Theorem 1]. Our work, described more fully in [4], takes a different approach. <p> One early formulation of the schedule length lower-bounding problem in presence of resource constraints is presented in [12]; however, the bounds produced by that approach are very loose. More recent algorithms that produce tighter bounds are those in [21] and <ref> [20] </ref>, based on Jackson's earliest deadline rule (ED-Rule) [2], and those in [22] and [10], based on a theorem originally given by Fernandez and Bussell in [8, Theorem 2].
Reference: [21] <author> M. Rim and R. Jain. </author> <title> Lower-Bound Performance Estimation for the High-Level Synthesis Scheduling Problem. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(4) </volume> <pages> 451-458, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: One early formulation of the schedule length lower-bounding problem in presence of resource constraints is presented in [12]; however, the bounds produced by that approach are very loose. More recent algorithms that produce tighter bounds are those in <ref> [21] </ref> and [20], based on Jackson's earliest deadline rule (ED-Rule) [2], and those in [22] and [10], based on a theorem originally given by Fernandez and Bussell in [8, Theorem 2].
Reference: [22] <author> A. Sharma and R. Jain. </author> <title> Estimating Architectural Resources and Performance for High-Level Synthesis Applications. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 1(2) </volume> <pages> 175-190, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Other than our work [4], we are aware of only two methodologies to compute FU lower bounds in this manner the relaxations considered by Jain [12] (and a similar relaxation in [13]), and the tighter relaxations in <ref> [22, 18, 10] </ref>, and [20] based on a method originally proposed by Fernandez and Bussell in [8, Theorem 1]. Our work, described more fully in [4], takes a different approach. <p> More recent algorithms that produce tighter bounds are those in [21] and [20], based on Jackson's earliest deadline rule (ED-Rule) [2], and those in <ref> [22] </ref> and [10], based on a theorem originally given by Fernandez and Bussell in [8, Theorem 2].
Reference: [23] <author> D. E. Thomas, E. D. Lagnese, R. A. Walker, J. A. Nestor, J. V. Rajan, and R. L. Blackburn. </author> <title> Algorithmic and Register Transfer Level Synthesis: The System Architect's Workbench. </title> <publisher> Kluwer Academic Publishers Group, </publisher> <address> 101 Philip Drive, Assinippi Park, Norwell, MA 02061, </address> <year> 1990. </year>
Reference-contexts: A better schedule may exist for a different clock length, but that better schedule will not be found. To motivate the need to explore this larger design space, consider the problem of scheduling the well-known Elliptic Wave Filter <ref> [23, p.206] </ref> (EWF) benchmark, under a variety fl This material is based upon work supported by the National Science Foundation under Grant No. <p> entire class of schedule length lower-bounding problems, and is guaranteed to produce the tightest bound of all possible precedence relaxations in polynomial time. 7 Experimental Results To demonstrate the accuracy and performance of Voyager's 3D scheduling methodology, we conducted a series of experiments using the well-known Elliptic Wave Filter (EWF) <ref> [23, p.206] </ref> and Discrete Cosine Transform [17] (DCT) benchmarks. We used the VDP100 module library from [16, 24], giving a datapath delay of 48ns for addition, 56ns for subtraction, and 163ns for multiplication.
Reference: [24] <institution> VLSI Technologies Inc. </institution> <address> VDP100 1.5 Micron CMOS Datapath Cell Library, </address> <year> 1988. </year>
Reference-contexts: Assume that the VDP100 module library <ref> [16, 24] </ref> is used, which has a multiplication delay of 163ns, and an addition delay of 48ns. Forced to choose a clock length for the scheduling algorithm to use, the designer would probably choose either a clock length of 48ns or 163ns the execution delay of either addition or multiplication. <p> We used the VDP100 module library from <ref> [16, 24] </ref>, giving a datapath delay of 48ns for addition, 56ns for subtraction, and 163ns for multiplication.
Reference: [25] <editor> Proc. </editor> <booktitle> of the European Design Automation Conference (EuroDAC), </booktitle> <address> Hamburg, Germany, Feb. 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [26] <editor> Proc. </editor> <booktitle> of the IEEE International Conference on Computer Design, </booktitle> <address> Cambridge, Massachusetts, Oct. 3-6 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [27] <editor> Proc. </editor> <booktitle> of the European Design and Test Conference, </booktitle> <address> Paris, France, Feb. 8Mar. 3 1994. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 6 </pages>
References-found: 27

