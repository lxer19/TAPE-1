URL: http://www.cs.wisc.edu/~minos/Papers/vldb97eppv-cam.ps
Refering-URL: 
Root-URL: 
Email: minos@cs.wisc.edu  ozden@research.bell-labs.com  avi@research.bell-labs.com  
Title: Resource Scheduling in Enhanced Pay-Per-View Continuous Media Databases  
Author: Minos N. Garofalakis Banu Ozden Avi Silberschatz 
Note: tion of the proposed schemes are also presented.  
Affiliation: University of Wisconsin-Madison  Bell Laboratories  Bell Laboratories  
Abstract: The enhanced pay-per-view (EPPV) model for providing continuous-media-on-demand (CMOD) services associates with each continuous media clip a display frequency that dependson the clip's popularity. The aim is to increase the number of clients that can be serviced concurrently beyond the capacity limitations of available resources, while guaranteeing a constraint on the response time. This is achieved by sharing periodic continuous media streams among multiple clients. In this paper, we provide a comprehensive study of the resource scheduling problems associated with supporting EPPV for continuous media clips with (possibly) different display rates, frequencies, and lengths. Our main objective is to maximize the amount of disk bandwidth that is effectively scheduled under the given data layout and storage constraints. This formulation gives rise to N P-hard combinatorial optimization problems that fall within the realm of hard real-time scheduling theory. Given the intractability of the problems, we propose novel heuristic solutions with polynomial-time complexity. Preliminary results from an experimental evalua 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Baruah, L. Rosier, I. Tulchinsky, and D. Varvel. </author> <title> The Complexity of Periodic Maintenance. </title> <booktitle> In Proc. of the 1990 Intl. Computer Symp., </booktitle> <address> Taiwan, </address> <year> 1990. </year>
Reference-contexts: Specifically, we demonstrate that the scheduling problems involved in supporting EPPV service under HS are non-trivial generalizations of the Periodic Maintenance Scheduling Problem (PMSP) [22]. Given that PMSP is known to be N P-complete in the strong sense <ref> [1] </ref>, we propose novel heuristic algorithms for scheduling the periodic retrieval of horizontally striped clips. We follow a two-step approach. First, we introduce the novel concept of a scheduling tree structure and demonstrate its use in obtaining collision-free schedules for Periodic Maintenance. <p> We first consider a model of simple periodic real- time tasks and show that deciding the existence of a collision-free schedule is equivalent to Periodic Maintenance <ref> [1, 22] </ref>, a problem known to be intractable. Motivated from this result, we define the novel concept of a scheduling tree and discuss its application in a heuristic algorithm for Periodic Maintenance. <p> We then show how the scheduling tree structure can handle the more complex model of periodic tasks identified in Section 4.2. 5.1 Periodic Maintenance Scheduling The k-server Periodic Maintenance Scheduling Problem (k- PMSP) <ref> [1] </ref> is a special case of the problem of scheduling simple periodic tasks in a hard real-time environment. <p> Baruah et al. <ref> [1] </ref> have shown that for any fixed value k 1, k- PMSP is N P-complete in the strong sense. Consequently, given a collection of simple periodic tasks with periods P , determining the existence of a collision-free schedule is intractable (i.e., it is equivalent to 1-PMSP).
Reference: [2] <author> S. Berson, S. Ghandeharizadeh, R. Muntz, and X. Ju. </author> <title> Staggered Striping in Multimedia Information Systems. </title> <booktitle> In Proc. of the 1994 ACM SIGMOD Intl. Conf., </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Thus, the need for intelligent scheduling mechanisms becomes more pronounced as the scale of the system increases. A number of schemes for organizing CM data on multiple disks has been proposed in the literature <ref> [2, 3, 21, 23] </ref>. However, the applicability of these data layout schemes to EPPV service remains an open problem. The matrix-based scheme was designed to support periodic video retrieval for a given period while minimizing video buffering requirements [10].
Reference: [3] <author> M.-S. Chen, D. D. Kandlur, and P. S. Yu. </author> <title> Optimization of the Grouped Sweeping Scheduling (GSS) with Heterogeneous Multimedia Streams. </title> <booktitle> In Proc. of ACM Multimedia '93, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Thus, the need for intelligent scheduling mechanisms becomes more pronounced as the scale of the system increases. A number of schemes for organizing CM data on multiple disks has been proposed in the literature <ref> [2, 3, 21, 23] </ref>. However, the applicability of these data layout schemes to EPPV service remains an open problem. The matrix-based scheme was designed to support periodic video retrieval for a given period while minimizing video buffering requirements [10].
Reference: [4] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: Thus, it is clearly N P-hard. Given the intractability of the problem, we present a fast heuristic algorithm (termed PACKCLIPS) that combines the value density heuristic rule for the classical knapsack problem <ref> [4] </ref> with a First- Fit packing rule. We define the value density of clip C i as the ratio p i = value (C i ) size (C i ) . Algorithm PACKCLIPS is depicted in Figure 2.
Reference: [5] <author> M. N. Garofalakis, B. Ozden, and A. Silberschatz. </author> <title> Resource Scheduling in Enhanced Pay-Per-View Continuous Media Databases. </title> <type> Tech. </type> <institution> Memorandum BL0112330-970107-01, Bell Laboratories, </institution> <year> 1997. </year>
Reference-contexts: All theoretical results in this paper are stated without proof due to space constraints. The full proofs, as well as some interesting extensions to the ideas and results presented here, can be found in the full version of the paper <ref> [5] </ref>. 2 Notation and System Model Table 2 summarizes the notation used in this paper with a brief description of its semantics. Additional notation will be introduced when necessary. To avoid introducing data layout issues for multiple disks, we assume a single-disk server for the purposes of this section. <p> For C i , this is exactly d i equivalently, l i 1 The scheduling algorithms presented in this paper can also be used with other data layout schemes. The interested reader is referred to the full version of the paper <ref> [5] </ref>. 2 Although some columns may actually contain less data than d i [13], in this paper, we are ignoring possible optimizations for smaller columns. 3 Clustering Clustering views each disk as an autonomous unit entire clips are stored on and retrieved from a single disk and multiple clips can be <p> If the predicate succeeds for all j, then C i is scheduled starting at u i . Otherwise, the algorithm can try another potential starting slot u i . In the full version of the paper <ref> [5] </ref>, we describe a predicate for checking slot availability that can be used in this scheme. A problem with the approach outline above is that even if the number of starting slots tried for C i is restricted to a constant, scheduling each subtask individually yields pseudo-polynomial time complexity. <p> The formal definition of our algorithm is omitted due to space constraints. The full details can be found in <ref> [5] </ref>. 5.3 Handling Slots with Multi-Task Capacities The scheduling tree formulation can easily be extended to handle time slots that can fit more than one subtask (i.e., can allow for some tasks to collide). <p> Us- ing such observations, we can devise more clever packing-based schemes for combining forests <ref> [5] </ref>. 7 Experimental Performance Evaluation 7.1 Experimental Testbed For our experiments, we used two basic workload components, modeling typical scenarios encountered in today's pay-per-view video servers. * Workload #1 consisted of relatively long MPEG-1 compressed videos with a duration between 90 and 120 minutes (e.g., movie features).
Reference: [6] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming (Vol. 2 / Seminumerical Algorithms). </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: Our algorithms need to ensure that whenever multiple retrievals collide during a round, their total bandwidth requirements do not exceed the capacity of the disk. For the simple case of two clips, we can use the Generalized Chi- nese Remainder Theorem <ref> [6] </ref> to prove the following lemma. Lemma 4.1 Consider two clips C 1 and C 2 , and let ff i = minf l n disk m gcd (n 1 ;n 2 ) gcd (n 1 ;n 2 ;n disk ) g, i = 1; 2.
Reference: [7] <author> E. L. Lawler. </author> <title> Fast Approximation Algorithms for Knapsack Problems. </title> <journal> Math. of Operations Research, </journal> <volume> 4(4) </volume> <pages> 339-356, </pages> <year> 1979. </year>
Reference-contexts: This is typically the situation facing large-scale CMOD servers that occasionally need to re-schedule their offerings to adapt to a changing audience, content, and popularity profile [8, 16]. For the clustering scheme, we formulate these optimization problems as generalized variants of the 0/1 knapsack problem <ref> [7, 18] </ref>. Since the problems are clearly N P-hard, we present provably near-optimal heuristics with low polynomial-time complexity. We then present two alternative striping schemes. Vertical Striping (VS) views the entire disk array as a single large disk in a manner similar to fine-grained striping [11]. <p> This problem is a generalization of the traditional 0/1 knapsack optimization problem (which can be seen as a special case with n disk = 1) <ref> [7, 18] </ref>. Thus, it is clearly N P-hard. Given the intractability of the problem, we present a fast heuristic algorithm (termed PACKCLIPS) that combines the value density heuristic rule for the classical knapsack problem [4] with a First- Fit packing rule.
Reference: [8] <author> T.D.C. Little and D. Venkatesh. </author> <title> Popularity-Based Assignment of Movies to Storage Devices in a Video-on-DemandSystem. </title> <journal> ACM Multimedia Systems, </journal> <volume> 2 </volume> <pages> 280-287, </pages> <year> 1995. </year>
Reference-contexts: In each case, our objective is to maximize the amount of disk bandwidth that is effectively scheduled. This is typically the situation facing large-scale CMOD servers that occasionally need to re-schedule their offerings to adapt to a changing audience, content, and popularity profile <ref> [8, 16] </ref>. For the clustering scheme, we formulate these optimization problems as generalized variants of the 0/1 knapsack problem [7, 18]. Since the problems are clearly N P-hard, we present provably near-optimal heuristics with low polynomial-time complexity. We then present two alternative striping schemes.
Reference: [9] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: Two phenomena make this a challenging problem the periodic nature of EPPV service and the relatively high latencies of magnetic disk storage. The periodicity of clip retrievals in EPPV servers generates a host of difficult periodic task scheduling problems that fall within the realm of hard real-time scheduling theory <ref> [9] </ref>. The high disk latencies complicate effective utilization of disk bandwidth and storage with reasonable amounts of buffer space, which is an impor tant cost factor in CMOD server design. The use of multiple disks to handle the high storage volume and bandwidth requirements of CM data exacerbates the problem. <p> Furthermore, to support EPPV service, the transmissions of C i are themselves periodic with a period T i = n i T . Thus, the retrieval of a clip matrix C i from a specific disk in the array can be seen as a collection of periodic real-time tasks <ref> [9] </ref> with period T i (i.e., the clip's transmissions), where each task consists of a collection of subtasks that are n disk T time units apart (i.e., column retrievals within a transmission). Moreover, the computation time of each such subtask is d i r disk + t lat .
Reference: [10] <author> B. Ozden, A. Biliris, R. Rastogi, and A. Silberschatz. </author> <title> A Low-Cost Storage Server for Movie on Demand Databases. </title> <booktitle> In Proc. of the 20th Intl. VLDB Conf., </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Under Random Access service, the maximum number of concurrent clients that can be supported is limited by the available resources. Such levels of concurrency may not be sufficient to provide cost-effective services in environments like Movies-On- Demand, where the client population far exceeds the maximum number of concurrent streams <ref> [10] </ref>. * The Enhanced Pay-Per-View (EPPV) service model aims to increase the number of clients that can be serviced concurrently beyond the limitations of available resources while guaranteeing a constraint on the response time. <p> However, the applicability of these data layout schemes to EPPV service remains an open problem. The matrix-based scheme was designed to support periodic video retrieval for a given period while minimizing video buffering requirements <ref> [10] </ref>. Extensions to the base scheme that deal with the varying transfer rates of commonly used SCSI disks and different video display rates were presented in [12, 13]. However, the issue of videos with different retrieval periods was not addressed in any of these papers. <p> This is a reasonable assumption, since retrieval periods will typically be multiples of minutes or even hours and the length of a round (usually bounded by buffering constraints) will not exceed a few seconds. Matrix- based allocation <ref> [10, 13] </ref>, increases the number of clients that can be serviced under EPPV by laying out data based on the knowledge of retrieval periods 1 .
Reference: [11] <author> B. Ozden, R. Rastogi, and A. Silberschatz. </author> <title> Disk Striping in Video Server Environments. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 18(4) </volume> <pages> 4-16, </pages> <year> 1995. </year>
Reference-contexts: Since the problems are clearly N P-hard, we present provably near-optimal heuristics with low polynomial-time complexity. We then present two alternative striping schemes. Vertical Striping (VS) views the entire disk array as a single large disk in a manner similar to fine-grained striping <ref> [11] </ref>. Despite its conceptual simplicity, VS suffers from increased disk latency overheads that render it impractical, especially for large disk arrays. Horizontal Striping (HS) is based on a round-robin distribution of clip data across the disks and has the potential of offering much better scalability and disk utilization than VS. <p> To ensure that no stream starves during a round, the sum of the total disk transfer time for all data retrieved and the overall latency and seek time overhead cannot exceed the length T of the round <ref> [11, 17] </ref>. <p> This scheme is similar to fine-grained striping <ref> [11] </ref> or RAID-3 data organization [15], since each column of the clip has to be retrieved in parallel from all disks (as a unit). Using the VS layout for clip matrices, implies that each disk is responsible for retrieving 1 n disk of a clip's column in each round.
Reference: [12] <author> B. Ozden, R. Rastogi, and A. Silberschatz. </author> <title> On the Design of a LowCost Video-on-Demand Storage System. </title> <journal> ACM Multimedia Systems, </journal> <volume> 4 </volume> <pages> 40-54, </pages> <year> 1996. </year>
Reference-contexts: The matrix-based scheme was designed to support periodic video retrieval for a given period while minimizing video buffering requirements [10]. Extensions to the base scheme that deal with the varying transfer rates of commonly used SCSI disks and different video display rates were presented in <ref> [12, 13] </ref>. However, the issue of videos with different retrieval periods was not addressed in any of these papers. Only in very recent work, Ozden et al. [14] presented schemes for the periodic retrieval of videos from disk arrays using striping.
Reference: [13] <author> B. Ozden, R. Rastogi, and A. Silberschatz. </author> <title> The Storage and Retrieval of Continuous Media Data. In Multimedia Database Systems: Issues and Research Directions, V.S. </title> <editor> Subrahmanian and S. Jajodia (Eds.). </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The matrix-based scheme was designed to support periodic video retrieval for a given period while minimizing video buffering requirements [10]. Extensions to the base scheme that deal with the varying transfer rates of commonly used SCSI disks and different video display rates were presented in <ref> [12, 13] </ref>. However, the issue of videos with different retrieval periods was not addressed in any of these papers. Only in very recent work, Ozden et al. [14] presented schemes for the periodic retrieval of videos from disk arrays using striping. <p> This is a reasonable assumption, since retrieval periods will typically be multiples of minutes or even hours and the length of a round (usually bounded by buffering constraints) will not exceed a few seconds. Matrix- based allocation <ref> [10, 13] </ref>, increases the number of clients that can be serviced under EPPV by laying out data based on the knowledge of retrieval periods 1 . <p> The interested reader is referred to the full version of the paper [5]. 2 Although some columns may actually contain less data than d i <ref> [13] </ref>, in this paper, we are ignoring possible optimizations for smaller columns. 3 Clustering Clustering views each disk as an autonomous unit entire clips are stored on and retrieved from a single disk and multiple clips can be clustered on each disk.
Reference: [14] <author> B. Ozden, R. Rastogi, and A. Silberschatz. </author> <title> Periodic Retrieval of Videos from Disk Arrays. </title> <booktitle> In Proc. of the 13th Intl. Conf. on Data Engineering, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: However, the issue of videos with different retrieval periods was not addressed in any of these papers. Only in very recent work, Ozden et al. <ref> [14] </ref> presented schemes for the periodic retrieval of videos from disk arrays using striping. Their work, however, addressed only a restricted form of the EPPV resource scheduling problems that assumes all clips to have identical display rates.
Reference: [15] <author> D. A. Patterson, G. A. Gibson, and R. H. Katz. </author> <title> A Case for Redundant Arrays of Inexpensive Disks (RAID). </title> <booktitle> In Proc. of the 1988 ACM SIGMOD Intl. Conf., </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: This scheme is similar to fine-grained striping [11] or RAID-3 data organization <ref> [15] </ref>, since each column of the clip has to be retrieved in parallel from all disks (as a unit). Using the VS layout for clip matrices, implies that each disk is responsible for retrieving 1 n disk of a clip's column in each round.
Reference: [16] <institution> PRECEPT Software, Inc. IP/TV Datasheets. </institution> <note> (http:// www.precept.com/datasheets/html/iptvds1.htm). </note>
Reference-contexts: The EPPV model for continuous media services is becoming more and more popular with the telecom, cable, broadcast, and content companies since it offers the potential to provide scalable, cost-effective CMOD offerings <ref> [16] </ref>. Realizing this potential, however, requires schemes for effectively scheduling the available disk bandwidth and storage capacity so that high levels of concur- rency and system utilization can be sustained. <p> In each case, our objective is to maximize the amount of disk bandwidth that is effectively scheduled. This is typically the situation facing large-scale CMOD servers that occasionally need to re-schedule their offerings to adapt to a changing audience, content, and popularity profile <ref> [8, 16] </ref>. For the clustering scheme, we formulate these optimization problems as generalized variants of the 0/1 knapsack problem [7, 18]. Since the problems are clearly N P-hard, we present provably near-optimal heuristics with low polynomial-time complexity. We then present two alternative striping schemes.
Reference: [17] <author> P. V. Rangan and H. M. Vin. </author> <title> Efficient Storage Techniques for Digital Continuous Multimedia. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 564-573, </pages> <year> 1993. </year>
Reference-contexts: To ensure that no stream starves during a round, the sum of the total disk transfer time for all data retrieved and the overall latency and seek time overhead cannot exceed the length T of the round <ref> [11, 17] </ref>.
Reference: [18] <author> S. Sahni. </author> <title> Approximate Algorithms for the 0/1 Knapsack Problem. </title> <journal> Journal of the ACM, </journal> <volume> 22(1) </volume> <pages> 115-124, </pages> <year> 1975. </year>
Reference-contexts: This is typically the situation facing large-scale CMOD servers that occasionally need to re-schedule their offerings to adapt to a changing audience, content, and popularity profile [8, 16]. For the clustering scheme, we formulate these optimization problems as generalized variants of the 0/1 knapsack problem <ref> [7, 18] </ref>. Since the problems are clearly N P-hard, we present provably near-optimal heuristics with low polynomial-time complexity. We then present two alternative striping schemes. Vertical Striping (VS) views the entire disk array as a single large disk in a manner similar to fine-grained striping [11]. <p> This problem is a generalization of the traditional 0/1 knapsack optimization problem (which can be seen as a special case with n disk = 1) <ref> [7, 18] </ref>. Thus, it is clearly N P-hard. Given the intractability of the problem, we present a fast heuristic algorithm (termed PACKCLIPS) that combines the value density heuristic rule for the classical knapsack problem [4] with a First- Fit packing rule.
Reference: [19] <author> A. Silberschatz and P. Galvin. </author> <title> Operating System Concepts. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: During a round, for streams stream (C 1 ); : : : ; stream (C k ) for which data is to be retrieved from disk, T r 1 ; :::; T r k bits are read using the C-SCAN disk head scheduling algorithm <ref> [19] </ref>. C- SCAN ensures that the disk heads move in a single direction when servicing streams during a round. As a result, random seeks are eliminated and the total seek overhead during a round is bounded by 2 t seek .
Reference: [20] <author> J. A. Stankovic and K. Ramamritham, eds. </author> <title> Advances in Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: The first slot u i in which the corresponding task is scheduled is defined 4 To the best of our knowledge, no similar notion of tree structure for periodic task scheduling has been proposed in the real-time scheduling literature <ref> [20] </ref>. from the scheduling tree structure as follows: u i = ancestor edge 1 (n i ) + l X ancestor edge j (n i ) j2 (n i ): (4) Some intuition for the scheduling tree structure and the above formula is provided in Figure 4.
Reference: [21] <author> F. A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming RAID: </title>
Reference-contexts: Thus, the need for intelligent scheduling mechanisms becomes more pronounced as the scale of the system increases. A number of schemes for organizing CM data on multiple disks has been proposed in the literature <ref> [2, 3, 21, 23] </ref>. However, the applicability of these data layout schemes to EPPV service remains an open problem. The matrix-based scheme was designed to support periodic video retrieval for a given period while minimizing video buffering requirements [10].
References-found: 21

