URL: http://www.cs.unc.edu/~walk/papers/hudson/scg97.ps.gz
Refering-URL: http://www.cs.unc.edu/~cohenj/publications.html
Root-URL: http://www.cs.unc.edu
Email: fhudson,manocha,cohenj,lin,hoff,zhanghg@cs.unc.edu  
Title: Accelerated Occlusion Culling using Shadow Frusta  
Author: T. Hudson D. Manocha J. Cohen M. Lin K. Hoff H. Zhang 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: Many applications in computer graphics and virtual environments need to render datasets with large numbers of primitives and high depth complexity at interactive rates. However, standard techniques like view frustum culling and a hardware z-buffer are unable to display datasets composed of hundred of thousands of polygons at interactive frame rates on current high-end graphics systems. We add a "conservative" visibility culling stage to the rendering pipeline, attempting to identify and avoid processing of occluded polygons. Given a moving viewpoint, the algorithm dynamically chooses a set of occluders. Each occluder is used to compute a shadow frustum, and all primitives contained within this frustum are culled. The algorithm hierarchically traverses the model, culling out parts not visible from the current viewpoint using efficient, robust, and in some cases specialized interference detection algorithms. The algorithm's performance varies with the location of the viewpoint and the depth complexity of the model. In the worst case it is linear in the input size with a small constant. In this paper, we demonstrate its performance on a city model composed of 500; 000 polygons and possessing varying depth complexity. We are able to cull an average of 55% of the polygons that would not be culled by view-frustum culling and obtain a commensurate improvement in frame rate. The overall approach is effective and scalable, is applicable to all polygonal models, and can be easily implemented on top of view-frustum culling. 
Abstract-found: 1
Intro-found: 1
Reference: [ARB90] <author> J. Airey, J. Rohlf, and F. Brooks. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> In Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 41-50, </pages> <year> 1990. </year>
Reference-contexts: Several recent algorithms structure the database into cells or regions, and use a combination of off-line and on-line algorithms for cell-to-cell visibility and the conservative computation of the potentially visible set (PVS) of polygons <ref> [ARB90, TS91, LG95] </ref>. Such approaches have been successfully used in architectural walkthrough systems, where the division of a building into discrete rooms lends itself to a natural division of the database into cells.
Reference: [BCG + 96] <author> G. Barequet, B. Chazelle, L. Guibas, J. Mitchell, and A. Tal. Boxtree: </author> <title> A hierarchical representation of surfaces in 3d. </title> <booktitle> In Proc. of Eurographics'96, </booktitle> <year> 1996. </year>
Reference-contexts: In our case, we reduce the problem to performing overlap tests between convex objects in 2D or 3D. Based on our experience in developing two interference detection systems, I-COLLIDE [CLMP95] and RAPID [GLM96], as well as that of other authors in implementing algorithms for interference detection <ref> [HKM95, BCG + 96] </ref> and intersection computation for solid modeling [For96, HHK89], we have realized robustness is an important issue in the design and implementation of interference detection algorithms. Our goal is to develop algorithms which are relatively simple, efficient, and not prone to geometric degeneracies.
Reference: [BDEG94] <author> M. Bern, D. Dobkin, D. Eppstein, and R. Grossman. </author> <title> Visibility with a moving point of view. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 360-78, </pages> <year> 1994. </year>
Reference-contexts: Many asymptotically efficient algorithms have been proposed for exact visibility and hidden surface removal <ref> [SSS74, Mul89, BDEG94, McK87] </ref>. [Dor94] provides a recent survey of object-space hidden surface removal algorithms. McKenna and Seidel [MS85] have presented an algorithm for computing optimal shadows of a convex polytope.
Reference: [Cha89] <author> B. Chazelle. </author> <title> An optimal algorithm for intersecting three-dimensional convex polyhedra. </title> <booktitle> Proc. 30th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 586-591, </pages> <year> 1989. </year> <title> 0 10 20 30 40 50 Average number of occluders used per frame Percent occlusion as a function of number of occluders of occluders active, along a 2748-frame path through the large city model. This supports the observation that for any given viewpoint a small number of occluders provide most of the occlusion. </title>
Reference-contexts: In the geometry literature, other linear time algorithms have been proposed to compute intersections between convex polytopes <ref> [Cha89] </ref>. Unlike collision detection algorithms, they can unambiguously distinguish the three distinct cases shown in Figure 1. However, not much is known about their performance on real-world models. 5.2 General Algorithm We project the silhouette of the occluder and the occludee onto the image plane.
Reference: [Cla76] <author> J.H. Clark. </author> <title> Hierarchical geometric models for visible surface algorithms. </title> <journal> Communications of the ACM, </journal> 19(10) 547-554, 1976. 
Reference-contexts: In the last few years a number of techniques have been proposed for efficiently computing conservative visibility. These can be classified into two categories, object-space and image-space algorithms. More details on this classification are presented in [SSS74]. In object space, <ref> [Cla76] </ref> proposed view-frustum culling of a hierarchy of bounding volumes. Garlick et al. [GBW90] proposed using octree-based spatial subdivision to render polygons contained in the viewing frustum.
Reference: [Cla88] <author> K. L. Clarkson. </author> <title> Applications of random sampling in computational geometry, II. </title> <booktitle> In Proc. 4th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 1-11, </pages> <year> 1988. </year>
Reference: [CLMP95] <author> J. Cohen, M. Lin, D. Manocha, and M. Ponamgi. I-collide: </author> <title> An interactive and exact collision detection system for large-scale environments. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 189-196, </pages> <year> 1995. </year>
Reference-contexts: The problem of 3D occlusion culling involves the computation of some geometric relationship between two or more objects. In our case, we reduce the problem to performing overlap tests between convex objects in 2D or 3D. Based on our experience in developing two interference detection systems, I-COLLIDE <ref> [CLMP95] </ref> and RAPID [GLM96], as well as that of other authors in implementing algorithms for interference detection [HKM95, BCG + 96] and intersection computation for solid modeling [For96, HHK89], we have realized robustness is an important issue in the design and implementation of interference detection algorithms. <p> Occlusion culling as a field would benefit from further investigation of the tradeoffs in the number of spatial data structures used by algorithms. 6.2 Comparison with Other Algorithms Our specialized shadow frustum/bounding box interference test has been compared against efficient algorithms and implementations for collision detection between convex polytopes <ref> [CLMP95, GJK88] </ref>. Our overlap test is at least two times faster and more robust than efficient implementations of these algorithms. Notice that some of the earlier algorithms for collision detection between convex polytopes utilize temporal and spatial coherence.
Reference: [Cro77] <author> F. C. Crow. </author> <title> Shadow algorithms for computer graphics. </title> <journal> ACM Computer Graphics, </journal> <volume> 11(3) </volume> <pages> 242-248, </pages> <year> 1977. </year>
Reference-contexts: For each occluder the algorithm computes a shadow frustum and uses fast interference detection and a hierarchical representation to find those portions of the model within the shadow frustum. The idea of shadow volumes was first introduced by Crow <ref> [Cro77] </ref> to generate shadows by creating for each object a shadow volume that the object blocks from the light source. Main contribution: We present geometric algorithms for 1. Occluder selection using off-line and on-line techniques 2.
Reference: [CT96] <author> S. Coorg and S. Teller. </author> <title> Temporally coherent conservative visibility. </title> <booktitle> In Proc. of 12th ACM Symposium on Computational Geometry, </booktitle> <year> 1996. </year>
Reference-contexts: The algorithm exploits coherence by performing visibility queries on the Z-buffer. Currently, most graphics systems do not support this capability in hardware, and simulating the hierarchical Z-buffer in software is relatively expensive. The work most directly related to our approach is that of Coorg and Teller <ref> [CT96, CT97] </ref>. Given two convex objects (an occluder and occludee), their early work required the construction and maintenance of a linearized portion of an aspect graph. They use this structure to track the viewpoint and determine whether one convex polytope occludes the other from a given viewpoint. <p> In the worst case, the number of planes used to form a cell of the arrangement can be O (m 2 ), where m is the number of vertices of the convex poly-topes, though dynamic and hierarchical data structures are used in <ref> [CT96] </ref> to speed-up the computation of relevant planes. Each arrangement cell classifies all polytopes as completely, partially, or un- occluded. This approach is similar to earlier shadow computation algorithms which, given a light source and an occluder, decompose space into penumbra and umbra volumes. <p> We assume that any large model viewer will use view-frustum culling; results reported ignoring it are meaningless. In our implementations, we also used the area-angle approximation presented by Coorg and Teller <ref> [CT96] </ref>. This is j ~ Vj 2 where a is the area of the polygon (in object space), ~ N the poly gon's normal vector, and ~ V the vector from the viewpoint to the center of the polygon.
Reference: [CT97] <author> S. Coorg and S. Teller. </author> <title> Real-time occlusion culling for models with large occluders. </title> <booktitle> In Proc. of ACM Symposium on Interactive 3D Graphics, </booktitle> <year> 1997. </year>
Reference-contexts: The algorithm exploits coherence by performing visibility queries on the Z-buffer. Currently, most graphics systems do not support this capability in hardware, and simulating the hierarchical Z-buffer in software is relatively expensive. The work most directly related to our approach is that of Coorg and Teller <ref> [CT96, CT97] </ref>. Given two convex objects (an occluder and occludee), their early work required the construction and maintenance of a linearized portion of an aspect graph. They use this structure to track the viewpoint and determine whether one convex polytope occludes the other from a given viewpoint.
Reference: [Dor94] <author> S. E. Dorward. </author> <title> A survey of object-space hidden surface removal. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 4 </volume> <pages> 325-362, </pages> <year> 1994. </year>
Reference-contexts: Many asymptotically efficient algorithms have been proposed for exact visibility and hidden surface removal [SSS74, Mul89, BDEG94, McK87]. <ref> [Dor94] </ref> provides a recent survey of object-space hidden surface removal algorithms. McKenna and Seidel [MS85] have presented an algorithm for computing optimal shadows of a convex polytope. For static models, it is possible to precompute the visibility from all the viewpoints in space based on aspect graphs [GCS91].
Reference: [FDHF90] <author> J. Foley, A. Van Dam, J. Hughes, and S. </author> <title> Feiner. </title> <booktitle> Computer Graphics: Principles and Practice. </booktitle> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: Based on this projection, we reduce the problem to a 2D overlap test between two convex polygons. To check whether B is totally or partially contained inside A, the algorithm initially checks whether they are overlapping or not. Our algorithm uses a modified Cyrus-Beck clipping algorithm <ref> [FDHF90] </ref>, which quickly determines if two polygons intersect and robustly computes an edge and a common point (call it O) contained in the intersection of two polygons if they are overlapping. There are also other robust implementations available for computing the intersection of two planar polygons.
Reference: [FKN80] <author> H. Fuchs, Z. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <booktitle> Proc. of ACM Siggraph, </booktitle> <volume> 14(3) </volume> <pages> 124-133, </pages> <year> 1980. </year>
Reference-contexts: Other algorithms for densely-occluded but somewhat less-structured models have been proposed by Yagel and Ray [YR96]. They use regular spatial subdivision to partition the model into cells and describe a 2D implementation. Some algorithms are based on binary space partition trees <ref> [FKN80, Nay92] </ref>. The hierarchical Z-buffer algorithm operates in both object-space and image-space [GKM93]. It combines spatial and temporal coherence with hierarchical structures. The algorithm exploits coherence by performing visibility queries on the Z-buffer.
Reference: [For96] <author> S. Fortune. </author> <title> Robustness issues in geometric algorithms. </title> <editor> In M.C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry, </booktitle> <pages> pages 9-14. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Based on our experience in developing two interference detection systems, I-COLLIDE [CLMP95] and RAPID [GLM96], as well as that of other authors in implementing algorithms for interference detection [HKM95, BCG + 96] and intersection computation for solid modeling <ref> [For96, HHK89] </ref>, we have realized robustness is an important issue in the design and implementation of interference detection algorithms. Our goal is to develop algorithms which are relatively simple, efficient, and not prone to geometric degeneracies. In this paper, we present object-space techniques for occlusion culling.
Reference: [GBW90] <author> B. Garlick, D. Baum, and J. Winget. </author> <title> Interactive viewing of large geometric databases using multiprocessor graphics workstations. Siggraph'90 course notes: Parallel Algorithms and Architectures for 3D Image Generation, </title> <year> 1990. </year>
Reference-contexts: These can be classified into two categories, object-space and image-space algorithms. More details on this classification are presented in [SSS74]. In object space, [Cla76] proposed view-frustum culling of a hierarchy of bounding volumes. Garlick et al. <ref> [GBW90] </ref> proposed using octree-based spatial subdivision to render polygons contained in the viewing frustum.
Reference: [GCS91] <author> Z. Gigus, J. Canny, and R. Seidel. </author> <title> Efficiently computing and representing aspect graphs of polyhedral objects. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 13(6) </volume> <pages> 542-551, </pages> <year> 1991. </year>
Reference-contexts: McKenna and Seidel [MS85] have presented an algorithm for computing optimal shadows of a convex polytope. For static models, it is possible to precompute the visibility from all the viewpoints in space based on aspect graphs <ref> [GCS91] </ref>. In the worst case, for input models composed of n polygons, this algorithm can decompose the space into O (n 9 ) regions, making it impractical for large models. The utility of all these algorithms for complex models is currently unclear. <p> However, the computation of such global visibility information is more difficult than hidden surface removal from a particular viewpoint. The fastest known algorithms known for computing the effects on global visibility due to a single polyhedron with m vertices requires O (m 6 log m) time <ref> [GCS91] </ref>. Given the overall complexity of finding good occluders, we propose an approximation algorithm to find good occluders using a combination of online and o*ine techniques. Our algorithms work reasonably well in practice, but are not guaranteed to find good occluders all the time.
Reference: [GJK88] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedure for computing the distance between objects in three-dimensional space. </title> <journal> IEEE J. Robotics and Automation, </journal> <volume> vol RA-4:193-203, </volume> <year> 1988. </year>
Reference-contexts: Consider the case when the occluder is a convex polytope. The shadow frustum must therefore be a convex volume. A number of efficient algorithms have been proposed in geometry and robotics literature for collision detection between convex poly-topes. These are based on Minkowski sums <ref> [GJK88] </ref>, closest features computation based on external Voronoi regions [LC91] and linear programming [Sei90]. All of them have been implemented and work reasonably well in practice. <p> Occlusion culling as a field would benefit from further investigation of the tradeoffs in the number of spatial data structures used by algorithms. 6.2 Comparison with Other Algorithms Our specialized shadow frustum/bounding box interference test has been compared against efficient algorithms and implementations for collision detection between convex polytopes <ref> [CLMP95, GJK88] </ref>. Our overlap test is at least two times faster and more robust than efficient implementations of these algorithms. Notice that some of the earlier algorithms for collision detection between convex polytopes utilize temporal and spatial coherence.
Reference: [GKM93] <author> N. Greene, M. Kass, and G. Miller. </author> <title> Hierarchical z-buffer visibility. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 231-238, </pages> <year> 1993. </year>
Reference-contexts: They use regular spatial subdivision to partition the model into cells and describe a 2D implementation. Some algorithms are based on binary space partition trees [FKN80, Nay92]. The hierarchical Z-buffer algorithm operates in both object-space and image-space <ref> [GKM93] </ref>. It combines spatial and temporal coherence with hierarchical structures. The algorithm exploits coherence by performing visibility queries on the Z-buffer. Currently, most graphics systems do not support this capability in hardware, and simulating the hierarchical Z-buffer in software is relatively expensive.
Reference: [GLM96] <author> S. Gottschalk, M. Lin, and D. Manocha. Obb-tree: </author> <title> A hierarchical structure for rapid interference detection. </title> <booktitle> In Proc. of ACM Siggraph'96, </booktitle> <pages> pages 171-180, </pages> <year> 1996. </year>
Reference-contexts: In our case, we reduce the problem to performing overlap tests between convex objects in 2D or 3D. Based on our experience in developing two interference detection systems, I-COLLIDE [CLMP95] and RAPID <ref> [GLM96] </ref>, as well as that of other authors in implementing algorithms for interference detection [HKM95, BCG + 96] and intersection computation for solid modeling [For96, HHK89], we have realized robustness is an important issue in the design and implementation of interference detection algorithms.
Reference: [Gre94] <author> N. Greene. </author> <title> Detecting intersection of a rectangular solid and a convex polyhedron. </title> <booktitle> In Graphics Gems IV, </booktitle> <pages> pages 74-82. </pages> <publisher> Academic Press, </publisher> <year> 1994. </year>
Reference-contexts: We would like to maintain an exact test while drastically reducing the worst case cost and improving the best case cost. Our approach combines improved box-plane overlap tests and a fast edge-box intersection test using a parallel slabs representation for the bounding volume <ref> [Gre94, KK86] </ref>.
Reference: [HHK89] <author> C. Hoffmann, J. Hopcroft, and M. Karasick. </author> <title> Robust set operations on polyhedral solids. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(6) </volume> <pages> 50-59, </pages> <year> 1989. </year>
Reference-contexts: Based on our experience in developing two interference detection systems, I-COLLIDE [CLMP95] and RAPID [GLM96], as well as that of other authors in implementing algorithms for interference detection [HKM95, BCG + 96] and intersection computation for solid modeling <ref> [For96, HHK89] </ref>, we have realized robustness is an important issue in the design and implementation of interference detection algorithms. Our goal is to develop algorithms which are relatively simple, efficient, and not prone to geometric degeneracies. In this paper, we present object-space techniques for occlusion culling.
Reference: [HKM95] <author> M. Held, J.T. Klosowski, and J.S.B. Mitchell. </author> <title> Evaluation of collision detection methods for virtual reality fly-throughs. </title> <booktitle> In Canadian Conference on Computational Geometry, </booktitle> <year> 1995. </year>
Reference-contexts: In our case, we reduce the problem to performing overlap tests between convex objects in 2D or 3D. Based on our experience in developing two interference detection systems, I-COLLIDE [CLMP95] and RAPID [GLM96], as well as that of other authors in implementing algorithms for interference detection <ref> [HKM95, BCG + 96] </ref> and intersection computation for solid modeling [For96, HHK89], we have realized robustness is an important issue in the design and implementation of interference detection algorithms. Our goal is to develop algorithms which are relatively simple, efficient, and not prone to geometric degeneracies.
Reference: [KK86] <author> T. Kat and J. Kajiya. </author> <title> Ray tracing complex scenes. </title> <journal> Computer Graphics, </journal> <pages> pages 269-278, </pages> <year> 1986. </year>
Reference-contexts: We would like to maintain an exact test while drastically reducing the worst case cost and improving the best case cost. Our approach combines improved box-plane overlap tests and a fast edge-box intersection test using a parallel slabs representation for the bounding volume <ref> [Gre94, KK86] </ref>.
Reference: [LC91] <author> M.C. Lin and John F. Canny. </author> <title> Efficient algorithms for incremental distance computation. </title> <booktitle> In IEEE Conference on Robotics and Automation, </booktitle> <pages> pages 1008-1014, </pages> <year> 1991. </year>
Reference-contexts: The shadow frustum must therefore be a convex volume. A number of efficient algorithms have been proposed in geometry and robotics literature for collision detection between convex poly-topes. These are based on Minkowski sums [GJK88], closest features computation based on external Voronoi regions <ref> [LC91] </ref> and linear programming [Sei90]. All of them have been implemented and work reasonably well in practice. However, these algorithms are not directly applicable to our requirements for two reasons: * Limitation: All these algorithms only check whether or not two objects are overlapping.
Reference: [LG95] <author> D. Luebke and C. Georges. </author> <title> Portals and mirrors: Simple, fast evaluation of potentially visible sets. </title> <booktitle> In ACM Interactive 3D Graphics Conference, </booktitle> <address> Monterey, CA, </address> <year> 1995. </year>
Reference-contexts: Several recent algorithms structure the database into cells or regions, and use a combination of off-line and on-line algorithms for cell-to-cell visibility and the conservative computation of the potentially visible set (PVS) of polygons <ref> [ARB90, TS91, LG95] </ref>. Such approaches have been successfully used in architectural walkthrough systems, where the division of a building into discrete rooms lends itself to a natural division of the database into cells.
Reference: [McK87] <author> M. McKenna. </author> <title> Worst-case optimal hidden-surface removal. </title> <journal> ACM Trans. Graph., </journal> <volume> 6 </volume> <pages> 19-28, </pages> <year> 1987. </year>
Reference-contexts: Many asymptotically efficient algorithms have been proposed for exact visibility and hidden surface removal <ref> [SSS74, Mul89, BDEG94, McK87] </ref>. [Dor94] provides a recent survey of object-space hidden surface removal algorithms. McKenna and Seidel [MS85] have presented an algorithm for computing optimal shadows of a convex polytope.
Reference: [MN95] <author> K. Mehlhorn and S. Naher. LEDA: </author> <title> a platform for combinatorial and geometric computing. </title> <journal> Commun. ACM, </journal> <volume> 38 </volume> <pages> 96-102, </pages> <year> 1995. </year>
Reference-contexts: Many recent papers by Fortune, van Wijk, Clarkson, Boissonnat et al, have demonstrated that clever use of floating point arithmetic can yield very effective and yet correct implementations of geometric primitives. Many libraries like LEDA <ref> [MN95] </ref> have implementations of such algorithms for line segment intersections. As a result, it should be possible to have fast correct implementations of our specialized overlap test.
Reference: [MS85] <author> M. McKenna and R. Seidel. </author> <title> Finding the optimal shadows of a convex polytope. </title> <booktitle> In Proc. 1st Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 24-28, </pages> <year> 1985. </year>
Reference-contexts: Many asymptotically efficient algorithms have been proposed for exact visibility and hidden surface removal [SSS74, Mul89, BDEG94, McK87]. [Dor94] provides a recent survey of object-space hidden surface removal algorithms. McKenna and Seidel <ref> [MS85] </ref> have presented an algorithm for computing optimal shadows of a convex polytope. For static models, it is possible to precompute the visibility from all the viewpoints in space based on aspect graphs [GCS91].
Reference: [Mul89] <author> K. Mulmuley. </author> <title> An efficient algorithm for hidden surface removal. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 379-388, </pages> <year> 1989. </year>
Reference-contexts: Many asymptotically efficient algorithms have been proposed for exact visibility and hidden surface removal <ref> [SSS74, Mul89, BDEG94, McK87] </ref>. [Dor94] provides a recent survey of object-space hidden surface removal algorithms. McKenna and Seidel [MS85] have presented an algorithm for computing optimal shadows of a convex polytope. <p> Some theoretically efficient algorithms of O (n log n + q) complexity, where q is the number of edges in the visibility map, have been proposed by <ref> [Mul89] </ref>. However, not much is known about their practical performance. The other alternative is to preprocess the entire model to determine a set of useful occluders at every viewpoint. However, the computation of such global visibility information is more difficult than hidden surface removal from a particular viewpoint.
Reference: [Nay92] <author> B. Naylor. </author> <title> Interactive solid geometry via partitioning trees. </title> <booktitle> In Proc. of Graphics Interface, </booktitle> <pages> pages 11-18, </pages> <year> 1992. </year>
Reference-contexts: Other algorithms for densely-occluded but somewhat less-structured models have been proposed by Yagel and Ray [YR96]. They use regular spatial subdivision to partition the model into cells and describe a 2D implementation. Some algorithms are based on binary space partition trees <ref> [FKN80, Nay92] </ref>. The hierarchical Z-buffer algorithm operates in both object-space and image-space [GKM93]. It combines spatial and temporal coherence with hierarchical structures. The algorithm exploits coherence by performing visibility queries on the Z-buffer.
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: The shadow frustum must therefore be a convex volume. A number of efficient algorithms have been proposed in geometry and robotics literature for collision detection between convex poly-topes. These are based on Minkowski sums [GJK88], closest features computation based on external Voronoi regions [LC91] and linear programming <ref> [Sei90] </ref>. All of them have been implemented and work reasonably well in practice. However, these algorithms are not directly applicable to our requirements for two reasons: * Limitation: All these algorithms only check whether or not two objects are overlapping.
Reference: [SSS74] <author> I. Sutherland, R. Sproull, and R. Schumaker. </author> <title> A characterization of ten hidden-surface algorithms. </title> <journal> Computing Surveys, </journal> <volume> 6(1) </volume> <pages> 1-55, </pages> <year> 1974. </year>
Reference-contexts: Many asymptotically efficient algorithms have been proposed for exact visibility and hidden surface removal <ref> [SSS74, Mul89, BDEG94, McK87] </ref>. [Dor94] provides a recent survey of object-space hidden surface removal algorithms. McKenna and Seidel [MS85] have presented an algorithm for computing optimal shadows of a convex polytope. <p> The utility of all these algorithms for complex models is currently unclear. In the last few years a number of techniques have been proposed for efficiently computing conservative visibility. These can be classified into two categories, object-space and image-space algorithms. More details on this classification are presented in <ref> [SSS74] </ref>. In object space, [Cla76] proposed view-frustum culling of a hierarchy of bounding volumes. Garlick et al. [GBW90] proposed using octree-based spatial subdivision to render polygons contained in the viewing frustum.
Reference: [TS91] <author> S. Teller and C.H. Sequin. </author> <title> Visibility preprocessing for interactive walkthroughs. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 61-69, </pages> <year> 1991. </year>
Reference-contexts: Several recent algorithms structure the database into cells or regions, and use a combination of off-line and on-line algorithms for cell-to-cell visibility and the conservative computation of the potentially visible set (PVS) of polygons <ref> [ARB90, TS91, LG95] </ref>. Such approaches have been successfully used in architectural walkthrough systems, where the division of a building into discrete rooms lends itself to a natural division of the database into cells.
Reference: [YR96] <author> R. Yagel and W. Ray. </author> <title> Visibility computations for efficient walkthrough of complex environments. </title> <journal> Presence, </journal> <volume> 5(1) </volume> <pages> 1-16, </pages> <year> 1996. </year>
Reference-contexts: It is not apparent that cell-based approaches can be generalized to an arbitrary model, which may come with no structure information. Decomposing an arbitrary polygonal model into appropriate cells is rather difficult. Other algorithms for densely-occluded but somewhat less-structured models have been proposed by Yagel and Ray <ref> [YR96] </ref>. They use regular spatial subdivision to partition the model into cells and describe a 2D implementation. Some algorithms are based on binary space partition trees [FKN80, Nay92]. The hierarchical Z-buffer algorithm operates in both object-space and image-space [GKM93]. It combines spatial and temporal coherence with hierarchical structures.
Reference: [ZMHH97] <author> H. Zhang, D. Manocha, T. Hudson, and K. Hoff. </author> <title> Visibility culling using hierarchical occlusion maps. </title> <type> Technical Report TR97-004, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1997. </year> <note> To Appear in Proc. of ACM Siggraph'97. </note>
Reference-contexts: This is made more difficult to take advantage of in an object-space solution by the fact that the union of several convex occluders is not necessarily convex. We have developed and are implementing extensions to our interference detection algorithms to combine occluders in object space. In <ref> [ZMHH97] </ref>, Zhang et al. have successfully used the graphics pipeline to merge these occluders in the image space and form occlusion maps. Based on that they have proposed a two-pass algorithm.
References-found: 35

