URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/papers/sun_liu.ps
Refering-URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/resources.html
Root-URL: 
Email: jsun@geoworks.com  janeliu@cs.uiuc.edu  
Title: Bounding Completion Times of Jobs with Arbitrary Release Times and Variable Execution Times  
Author: Jun Sun Jane W.S. Liu 
Address: 2001 Center St, Berkeley, CA 94704  Urbana, IL 61801  
Affiliation: Geoworks, Inc.  Department of Computer Science, University of Illinois,  
Note: Appeared in the Proceedings of 17th IEEE Real-Time Systems Symposium, Dec. 1996, Washington, DC  
Abstract: In many real-time systems, the workload can be characterized as a set of jobs with linear precedence constraints among them. Jobs often have variable execution times and arbitrary release times. We describe here three algorithms that can be used to compute upper bounds on completion times of such jobs scheduled on a priority-driven basis. The algorithms have different performance and complexity. Simulation was performed to compare their performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: A great deal of work has been done on timing analysis for periodic tasks <ref> [1, 2, 3, 4, 5] </ref>. A periodic task is an infinite stream of identical jobs that are released periodically. The objective of timing analysis is to bound the response times of all jobs in each task. Lehoczky etc [3] proposed a time-demand analysis method for this purpose. <p> These existing methods either cannot be applied to bound the completion times of dependent jobs that have arbitrary release times (e.g., the methods based on schedulable utilization bounds <ref> [1] </ref>) or yield unsatisfactorily loose bounds (e.g., the time-demand analysis method [3]). A reason for the poor performance of existing methods is that they ignore the exact release times of jobs but work with the worst-case combination of release times. <p> It can be quantized by the density factor, which is the total maximum execution time of all jobs divided by the range of release times of jobs. For example, if the release times of jobs are distributed in the range of <ref> [1; 1000] </ref> and the total maximum execution time of all jobs is equal to 1500, then the density factor is equal to 1.5. Obviously, the smaller the density factor, the sparser the schedule. A configuration is a unique combination of values of the above three factors. <p> We then randomly divide the total maximum execution time among the xy jobs. This is done by first generating an execution factor for each job, which is uniformally distributed in range <ref> [0:001; 1] </ref>. We obtain the normalized execution factor for each job by dividing the execution factor over the sum of execution factors of all jobs. The maximum execution time of each job is then equal to the normalized execution factor times the total maximum execution time. <p> The maximum execution time of each job is then equal to the normalized execution factor times the total maximum execution time. We let the minimum execution time of every job to be 0. Finally, the priority of every job is randomly distributed in range <ref> [1; 1000] </ref>. 6.3. Comparison of Algorithm ERT and Al gorithm CJA In this subsection, by bound ratio we mean the average bound ratio of Algorithm CJA over Algorithm ERT. The simulation results show that bound ratios are not sensitive to the number of job chains in the system.
Reference: [2] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: A great deal of work has been done on timing analysis for periodic tasks <ref> [1, 2, 3, 4, 5] </ref>. A periodic task is an infinite stream of identical jobs that are released periodically. The objective of timing analysis is to bound the response times of all jobs in each task. Lehoczky etc [3] proposed a time-demand analysis method for this purpose.
Reference: [3] <author> J. Lehoczky. </author> <title> Fixed priority scheduling of periodic task sets with arbitrary deadlines. </title> <booktitle> In 11th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 201-209, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: A great deal of work has been done on timing analysis for periodic tasks <ref> [1, 2, 3, 4, 5] </ref>. A periodic task is an infinite stream of identical jobs that are released periodically. The objective of timing analysis is to bound the response times of all jobs in each task. Lehoczky etc [3] proposed a time-demand analysis method for this purpose. <p> A periodic task is an infinite stream of identical jobs that are released periodically. The objective of timing analysis is to bound the response times of all jobs in each task. Lehoczky etc <ref> [3] </ref> proposed a time-demand analysis method for this purpose. Harbour etc. [5] proposed a method to bound the response times of jobs where each periodic task is a chain of subtasks. <p> These existing methods either cannot be applied to bound the completion times of dependent jobs that have arbitrary release times (e.g., the methods based on schedulable utilization bounds [1]) or yield unsatisfactorily loose bounds (e.g., the time-demand analysis method <ref> [3] </ref>). A reason for the poor performance of existing methods is that they ignore the exact release times of jobs but work with the worst-case combination of release times.
Reference: [4] <author> N. Audsley, A. Burns, K. Tindell, M. Richardson, and A. Wellings. </author> <title> Applying new scheduling theory to static priority pre-emptive scheduling. </title> <journal> Software Engineering Journal, </journal> <volume> 8(5) </volume> <pages> 284-292, </pages> <year> 1993. </year>
Reference-contexts: A great deal of work has been done on timing analysis for periodic tasks <ref> [1, 2, 3, 4, 5] </ref>. A periodic task is an infinite stream of identical jobs that are released periodically. The objective of timing analysis is to bound the response times of all jobs in each task. Lehoczky etc [3] proposed a time-demand analysis method for this purpose.
Reference: [5] <author> M. G. Harbour, M. H. Klein, and J. P. Lehoczky. </author> <title> Timing analysis for fixed-priority scheduling of hard real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(1) </volume> <pages> 13-28, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: A great deal of work has been done on timing analysis for periodic tasks <ref> [1, 2, 3, 4, 5] </ref>. A periodic task is an infinite stream of identical jobs that are released periodically. The objective of timing analysis is to bound the response times of all jobs in each task. Lehoczky etc [3] proposed a time-demand analysis method for this purpose. <p> A periodic task is an infinite stream of identical jobs that are released periodically. The objective of timing analysis is to bound the response times of all jobs in each task. Lehoczky etc [3] proposed a time-demand analysis method for this purpose. Harbour etc. <ref> [5] </ref> proposed a method to bound the response times of jobs where each periodic task is a chain of subtasks.
Reference: [6] <author> R. Ha. </author> <title> Validating Timing Constraints in Multiprocessor and Distributed Systems. </title> <type> PhD thesis, </type> <institution> University of Illinois, Urbana-Champaign, Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: The problem solved by our algorithm is also related to the validation problem, that verifies if all timing constraints are satisfied in a real-time system. Both problems deal with a set of jobs with variable execution times. Ha <ref> [6] </ref> has studied the validation problem in multiprocessor or distributed systems. <p> Bounding the completion times of jobs is a reasonable approach to validating the timing constraints for this kind of systems. Our algorithms provide tighter bounds and, thus, more accurate conclusions on the satisfiability of timing constraints than the general bounds provided by algorithms in <ref> [6] </ref>. The rest of the paper is organized as follows. Section 2 formally defines the problem addressed and introduces the notations used in the paper. Section 3, 4, and 5 present Algorithm ERT, CJA and ITR, respectively. <p> According to this schedule, the completion time of J 2;1 is 50. As it turns out, this is the worst-case completion time of J 2;1 . This example shows that systems considered in this paper are in general not predictable <ref> [6] </ref>. To bound the completion times of jobs, we can of course exhaustively simulate the execution of the system and search for the worst-case completion times of jobs.
References-found: 6

