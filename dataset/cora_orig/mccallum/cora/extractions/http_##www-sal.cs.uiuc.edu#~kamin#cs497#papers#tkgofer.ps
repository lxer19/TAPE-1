URL: http://www-sal.cs.uiuc.edu/~kamin/cs497/papers/tkgofer.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/cs497/papers.html
Root-URL: http://www.cs.uiuc.edu
Email: koen@cse.ogi.edu  ton@informatik.uni-ulm.de  erik@cse.ogi.edu  
Title: Structuring Graphical Paradigms in TkGofer  
Author: Koen Claessen Ton Vullinghs Erik Meijer 
Address: Ulm  
Affiliation: OGI and Utrecht University  Universitat  OGI and Utrecht University  
Abstract: In this paper we describe the implementation of several graphical programming paradigms (Model View Controller, Fudgets, and Functional Animations) using the GUI library TkGofer. This library relies on a combination of monads and multiple-parameter type classes to provide an abstract, type safe interface to Tcl/Tk. We show how choosing the right abstractions makes the given implementations surprisingly concise and easy to understand. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Carlsson and Th. Hallgren. </author> <title> Fudgets a graphical user interface in a lazy functional language. </title> <booktitle> In Conference on Functional Programming and Computer Architecture. </booktitle> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: This provides the functional programmer with a powerful tool for performing GUI programming. A criticism of the use of monads is that they lead to an imperative style of programming. A more functional way of coding GUIs without monads is, for example, Fudgets <ref> [1] </ref>. We think, however, that monads are more general and offer more structure. This is shown by giving an elegant implementation of Fudgets and ActiveX Animation [3]. Furthermore, we show that TkGofer is capable of expressing other well known graphical paradigms, such as the Model View Controller [10]. <p> Furthermore, we show that TkGofer is capable of expressing other well known graphical paradigms, such as the Model View Controller [10]. There are also other systems that try to integrate graphical user interaction in functional languages. Examples are Fudgets <ref> [1] </ref>, Haggis [5] and sml tk [11]. We believe that they do not capture the essence of what makes functional GUI programming concise, elegant, and powerful. They lack using monads for imperative actions, combined with type classes for structure. <p> In the next section we will see Fudgets, which are another approach to make the communication between widgets more implicit. 4 Implementing Fudgets In this section we will explain what Fudgets are <ref> [1] </ref>, and discuss how to implement them in TkGofer. 4.1 The GUI Framework The main abstraction used in the Fudgets system is called a Fudget (Functional Widget). A Fudget is an object consist ing of two parts. One is the graphical representation of a Fudget, the other is its functionality.
Reference: [2] <author> K. Claessen. </author> <title> Fudgets Implementation. </title> <note> URL http:// www.cse.ogi.edu/~kcclaess/Fudgets, 1996. </note>
Reference-contexts: We believe that our implementation is very concise, and can, for example, easily be used to experiment with adding nonstandard features to Fudgets. Our full implementation <ref> [2] </ref> implements many other of the basic Fudget functions and runs all the examples from the Fudgets tutorial unchanged. During the writing of this paper we became aware of an unpublished technical report [15], in which an approach similar to ours was used to implement Fudgets [14].
Reference: [3] <author> C. Elliot. </author> <title> A brief introduction to ActiveVRML. </title> <type> Technical Report MSR-TR-96-05, </type> <institution> Microsoft Research, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: A more functional way of coding GUIs without monads is, for example, Fudgets [1]. We think, however, that monads are more general and offer more structure. This is shown by giving an elegant implementation of Fudgets and ActiveX Animation <ref> [3] </ref>. Furthermore, we show that TkGofer is capable of expressing other well known graphical paradigms, such as the Model View Controller [10]. There are also other systems that try to integrate graphical user interaction in functional languages. Examples are Fudgets [1], Haggis [5] and sml tk [11]. <p> This will be done in the context of a functional animation system that is heavily inspired by Conal Elliot's Reactive Behavior Modelling in Haskell [4]. RBMH is an implementation in Hugs of ActiveX Animation <ref> [3] </ref>. 5.1 Behaviors The system's main abstraction is the notion of behavior. A value of type Beh a represents a dynamic value of type a that can change during the animation.
Reference: [4] <author> C. Elliot and P. Hudak. </author> <title> Functional Reactive Animation. </title> <booktitle> In International Conference on Functional Programming. </booktitle> <publisher> ACM Press, </publisher> <month> June </month> <year> 1997. </year>
Reference-contexts: However, they had difficulties with defining SP's and loops. 5 Functional Animations In this section we will discuss a way of expressing and executing animations. This will be done in the context of a functional animation system that is heavily inspired by Conal Elliot's Reactive Behavior Modelling in Haskell <ref> [4] </ref>. RBMH is an implementation in Hugs of ActiveX Animation [3]. 5.1 Behaviors The system's main abstraction is the notion of behavior. A value of type Beh a represents a dynamic value of type a that can change during the animation.
Reference: [5] <editor> S. Finne and S. Peyton Jones. Composing Haggis. </editor> <booktitle> In Proceedings of the Fifth Eurographics Workshop on Programming Paradigms for Computer Graphics. </booktitle> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: Furthermore, we show that TkGofer is capable of expressing other well known graphical paradigms, such as the Model View Controller [10]. There are also other systems that try to integrate graphical user interaction in functional languages. Examples are Fudgets [1], Haggis <ref> [5] </ref> and sml tk [11]. We believe that they do not capture the essence of what makes functional GUI programming concise, elegant, and powerful. They lack using monads for imperative actions, combined with type classes for structure. <p> This is what makes monads so general and powerful. Over the last few years, the integration of graphical I/O and functional languages has become a popular research topic. 6.1 Related Work Haggis <ref> [5] </ref>, like TkGofer, also uses monads to handle GUIs. One of its properties is the use of concurrent processes to manage callbacks, e.g., instead of specifying what a button must do when clicked, a new process is created that waits until the user clicks the button.
Reference: [6] <author> M. Halverton. </author> <title> Microsoft Visual Basic 5 Step by Step. </title> <publisher> Microsoft Press, </publisher> <year> 1997. </year>
Reference-contexts: But we can go further; using higher order functions and algebraic datatypes we can easily roll our own custom widgets. Making such abstractions is hard to do in Tcl/Tk and in most other GUI Libraries. As a concrete example of a composed widget, we build a spin button <ref> [6] </ref>. A spin button is often used to control a value that can be incremented and decremented. The spin button widget actually consists of two other widgets: a `spin-up' button and a `spin-down' button (see Fig. 3).
Reference: [7] <author> J. Hughes. </author> <title> Why Functional Programming Matters. </title> <journal> The Computer Journal, </journal> <volume> 2(2), </volume> <year> 1989. </year>
Reference-contexts: 1 Introduction In his article `Why Functional Programming Matters' <ref> [7] </ref>, John Hughes explains that an important feature of a programming language is the way in which a language provides glue for combining building blocks to form larger structures. The better the glue, the more modular programs can be made.
Reference: [8] <author> M.P. Jones. </author> <title> An introduction to Gofer, 1993. Included as part of the standard Gofer distribution. </title>
Reference-contexts: Recently however, things changed when monads were introduced into functional programming [13, 18]. When using monads it becomes possible to seamlessly introduce imperative features into a purely functional language. This technique is used in TkGofer, a library in Gofer <ref> [8] </ref> that interacts with the imperative graphical toolkit Tk [12]. On top of a few new primitive functions, a system is built that offers the programmer structural access to the widgets of Tk.
Reference: [9] <author> M.P. Jones. </author> <title> Functional Programming with Overloading and Higher-Order Polymorphism. </title> <editor> In J. Jeuring and E. Meijer, editors, </editor> <booktitle> Advanced Functional Programming, volume 925 of Lecture Notes in Computer Science, </booktitle> <pages> pages 97-136. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The better the glue, the more modular programs can be made. He argues that functional languages offer very powerful kinds of glue like higher order functions and lazy evaluation. Further research evolved a new kind of glue: type and constructor classes <ref> [9] </ref>. Unfortunately, there used to be a separation between the imperative world, which had very useful bricks, but no glue, and the functional world, which had powerful glue, but no bricks. Recently however, things changed when monads were introduced into functional programming [13, 18].
Reference: [10] <author> G. Krasner and S. Pope. </author> <title> A Cookbook for using the Model-View-Controller User Interface Paradigm in Smalltalk-80. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <year> 1988. </year>
Reference-contexts: We think, however, that monads are more general and offer more structure. This is shown by giving an elegant implementation of Fudgets and ActiveX Animation [3]. Furthermore, we show that TkGofer is capable of expressing other well known graphical paradigms, such as the Model View Controller <ref> [10] </ref>. There are also other systems that try to integrate graphical user interaction in functional languages. Examples are Fudgets [1], Haggis [5] and sml tk [11]. We believe that they do not capture the essence of what makes functional GUI programming concise, elegant, and powerful. <p> One of these is the Model View Controller paradigm (MVC). The MVC paradigm is one of the oldest object-oriented design paradigms <ref> [10] </ref>. It provides a modular way to represent information (Model), to display information (View) and to control the interactions with the information (Control). The main idea is to support several views of the same data. Changes in one view should be reflected in all the other views.
Reference: [11] <author> C. Luth, S. Westmeier, and B. Wolff. </author> <title> sml tk - Functional Programming for Graphical User Interfaces. </title> <type> Technical Report 8/96, </type> <institution> Universitat Bremen, </institution> <year> 1996. </year>
Reference-contexts: Furthermore, we show that TkGofer is capable of expressing other well known graphical paradigms, such as the Model View Controller [10]. There are also other systems that try to integrate graphical user interaction in functional languages. Examples are Fudgets [1], Haggis [5] and sml tk <ref> [11] </ref>. We believe that they do not capture the essence of what makes functional GUI programming concise, elegant, and powerful. They lack using monads for imperative actions, combined with type classes for structure. As we shall see, constructor classes and multiple-parameter type classes play a critical role in our system. <p> Often the structure of information pasing in a GUI is much more complicated than that. We end up with ad hoc methods for solving these kinds of problems. A system that also uses Tk as its GUI basis is sml tk <ref> [11] </ref>. Though provided with a nice toplevel partition in the concepts application, graphical object and window, the system lacks in certain points the elegance of TkGofer.
Reference: [12] <author> J.K. Ousterhout. </author> <title> Tcl and the Tk toolkit. </title> <publisher> Addison Wes-ley, </publisher> <year> 1994. </year>
Reference-contexts: Recently however, things changed when monads were introduced into functional programming [13, 18]. When using monads it becomes possible to seamlessly introduce imperative features into a purely functional language. This technique is used in TkGofer, a library in Gofer [8] that interacts with the imperative graphical toolkit Tk <ref> [12] </ref>. On top of a few new primitive functions, a system is built that offers the programmer structural access to the widgets of Tk. But, unlike Tk, widgets in TkGofer are typed and type classes are used to group different kinds of properties for widgets.
Reference: [13] <editor> S.L. Peyton Jones and Ph. Wadler. </editor> <title> Imperative Functional Programming. </title> <booktitle> In Proc. 20th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charlotte, North Carolina, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Unfortunately, there used to be a separation between the imperative world, which had very useful bricks, but no glue, and the functional world, which had powerful glue, but no bricks. Recently however, things changed when monads were introduced into functional programming <ref> [13, 18] </ref>. When using monads it becomes possible to seamlessly introduce imperative features into a purely functional language. This technique is used in TkGofer, a library in Gofer [8] that interacts with the imperative graphical toolkit Tk [12].
Reference: [14] <author> A. Reid and S. Singh. </author> <title> Implementing Fudgets with standard Widget Sets. </title> <booktitle> In Glasgow Functional Programming Workshop, </booktitle> <pages> pages 222-235, </pages> <year> 1993. </year>
Reference-contexts: Our full implementation [2] implements many other of the basic Fudget functions and runs all the examples from the Fudgets tutorial unchanged. During the writing of this paper we became aware of an unpublished technical report [15], in which an approach similar to ours was used to implement Fudgets <ref> [14] </ref>. However, they had difficulties with defining SP's and loops. 5 Functional Animations In this section we will discuss a way of expressing and executing animations.
Reference: [15] <author> C.J. Taylor. </author> <title> Embracing Windows. </title> <type> Technical Report TR-96-1, </type> <institution> University of Nottingham, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: Our full implementation [2] implements many other of the basic Fudget functions and runs all the examples from the Fudgets tutorial unchanged. During the writing of this paper we became aware of an unpublished technical report <ref> [15] </ref>, in which an approach similar to ours was used to implement Fudgets [14]. However, they had difficulties with defining SP's and loops. 5 Functional Animations In this section we will discuss a way of expressing and executing animations.
Reference: [16] <author> T. Vullinghs, W. Schulte, and T. Schwinn. </author> <title> An Introduction to TkGofer. </title> <type> Technical Report 96-03, </type> <institution> University of Ulm, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: The last section compares TkGofer to a few other graphical functional systems and discusses our results. 2 TkGofer In this section we give a short introduction to TkGofer. For a more detailed description of TkGofer we refer to other papers <ref> [16, 17] </ref>. 2.1 Creating a GUI How do we write GUIs in TkGofer? To explain this we present a small example. Figure 1 illustrates a picture of a decimal counter and the code that implements it.
Reference: [17] <author> T. Vullinghs, W. Schulte, and T. Schwinn. </author> <title> The Design of a Functional GUI Library Using Constructor Classes. </title> <editor> In D. Bjorner, M. Broy, and I. Pottosin, editors, </editor> <booktitle> Perspectives of System Informatics, volume 1181 of Lecture Notes in Computer Science, </booktitle> <address> Novosibirsk, De-cember 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The last section compares TkGofer to a few other graphical functional systems and discusses our results. 2 TkGofer In this section we give a short introduction to TkGofer. For a more detailed description of TkGofer we refer to other papers <ref> [16, 17] </ref>. 2.1 Creating a GUI How do we write GUIs in TkGofer? To explain this we present a small example. Figure 1 illustrates a picture of a decimal counter and the code that implements it.
Reference: [18] <author> Ph. Wadler. </author> <title> The essence of functional programming. </title> <booktitle> In ACM Principles of Programming Languages, </booktitle> <year> 1992. </year>
Reference-contexts: Unfortunately, there used to be a separation between the imperative world, which had very useful bricks, but no glue, and the functional world, which had powerful glue, but no bricks. Recently however, things changed when monads were introduced into functional programming <ref> [13, 18] </ref>. When using monads it becomes possible to seamlessly introduce imperative features into a purely functional language. This technique is used in TkGofer, a library in Gofer [8] that interacts with the imperative graphical toolkit Tk [12]. <p> Therefore, we let FM be a reader monad in the type Window. type FM a = Window -&gt; GUI a instance Monad FM where ... We make FM an instance of the monad type class. This is done in the standard way <ref> [18] </ref>. The type of a button Fudget is F Bool Click; it sends Clicks and receives Bools. The send function (the parameter of the Fudget) is set as a command of the button. The receive function (the result of the Fudget) modifies the activity status of the button.
References-found: 18

