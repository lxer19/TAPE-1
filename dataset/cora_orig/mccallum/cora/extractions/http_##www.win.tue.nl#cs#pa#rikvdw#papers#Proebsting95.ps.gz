URL: http://www.win.tue.nl/cs/pa/rikvdw/papers/Proebsting95.ps.gz
Refering-URL: http://www.win.tue.nl/cs/pa/rikvdw/bibl.html
Root-URL: http://www.win.tue.nl
Title: Optimizing an ANSI C Interpreter with Superoperators manually chosen), the system builds an efficient implementation
Author: Todd A. Proebsting 
Note: The paper describes the design and implementation of a hybrid translator/interpreter that employs superoperators. From a specification of the superoperators (either automatically inferred or  and currently runs on the MIPS R3000 and the SPARC.  
Affiliation: University of Arizona  
Abstract: This paper introduces superoperators, an optimization technique for bytecoded interpreters. Superoperators are virtual machine operations automatically synthesized from smaller operations to avoid costly per-operation overheads. Superoperators decrease executable size and can double or triple the speed of interpreted programs. The paper describes a simple and effective heuristic for inferring powerful superopera-tors from the usage patterns of simple operators. 
Abstract-found: 1
Intro-found: 1
Reference: [Bel73] <author> James R. Bell. </author> <title> Threaded code. </title> <journal> Communications of the ACM, </journal> <volume> 16(6) </volume> <pages> 370-372, </pages> <month> June </month> <year> 1973. </year>
Reference-contexts: Similarly, Feuer developed a diagnostic C interpreter, si, for debugging and diagnostic output [Feu85]. si's primary design goals were quick translation and flexible diagnostics | time and space efficiency were not reported. Klint compares three ways to encode a program for interpretation [Kli81]. The methods are "Classical," "Direct Threaded" <ref> [Bel73] </ref>, and "Indirect Threaded." Classical | employed by hti and Cint | encodes operators as values such that address of the corresponding interpreter code must be looked up in a table. Direct Threaded encodes operations with the addresses of the corresponding interpreter code.
Reference: [DG87] <author> J. W. Davidson and J. V. Gresch. </author> <month> Cint: </month>
Reference-contexts: His system provided hooks for escaping interpreted code to execute time-critical code in assembly language. Programmers coded directly in both interpreted operations, or assembly. Davidson and Gresch developed a C interpreter, Cint, that, like hti, maintained C calling conventions in order to link with native code routines <ref> [DG87] </ref>. Cint was written entirely in C for easy retargetability. Cint's VM is similar to hti's | it includes a small stack-based operator set. On a set of small benchmarks the interpreted code was 12.4-42.6 times slower than native code on a VAX-11/780, and 20.9-42.5 times slower on a Sun-3/75.
References-found: 2

