URL: ftp://cse.ogi.edu/pub/tech-reports/1998/98-003.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Title: Mx A Package for Rapid Mathematical Prototyping and Algorithm Development with Application to Speech and
Abstract: Sarel van Vuuren March 6, 1998 Technical Report Anthropic Speech Processing Group Department of Electrical and Computer Engineering & Center for Spoken Language Understanging Department of Computer Science and Engineering Oregon Graduate Institute of Science and Technology P.O. Box 91000, Portland, Oregon 97291-1000 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. K. Ousterhout, </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Introduction 1.1 Introduction This document is about a software package called Mx. This package allows rapid mathematical prototyping and algorithm development from within the Tcl shell <ref> [1] </ref>. It provides a programming system with extensive scripting capability for matrix and vector mathematics. All matrices are abstracted memory objects that are referenced through a unique text-string handle. <p> Portability by extending Tcl with a highly portable C-code library. Extendibility by providing a simple developer's API to extend Mx. Table 1.2: Benefits gained using Mx. 6 CHAPTER 1. INTRODUCTION 1.3 Software architecture Mx acts as a package extension of the Tcl script language <ref> [1] </ref>. The extendible scripting language Tcl is used to access Mx functionality within an efficient scripting environment. Currently Mx is bundled with the Center for Spoken Language Understanding programming shell [5] called CSLUsh [6] which is a group of similar package extensions designed specifically as speech recognition tools. <p> The Mx package can of course not be guaranteed bug free. However, all the commands have been tested and checked extensively. Please email comments, suggestions and bugs reports to the author. 1.5 Prerequisites Because Mx extends Tcl, a good working knowledge of Tcl is recommended <ref> [1] </ref>. This document will assume a basic Tcl programming knowledge. In particular it is important to understand how quoting works in Tcl. 8 CHAPTER 1. <p> ELEMENTARY STATISTICS Part IV Appendix 61 Appendix A Availability Mx acts as a package extension of the Tcl script language <ref> [1] </ref>. Currently Mx is bundled with the Center for Spoken Language Understanding shell [6]. Mx is available as part of the CSLU toolkit free of charge for academic and research purposes at http://www.cse.ogi.edu/CSLU/toolkit/.
Reference: [2] <author> S. van Vuuren and H. Hermansky, </author> <title> "Data-driven design of RASTA-like filters," </title> <booktitle> in Proc. </booktitle> <address> EUROSPEECH'97, (Rodos, Greece), </address> <pages> pp. 409-412, </pages> <year> 1997. </year>
Reference-contexts: The Mx package is particularly useful for situations where large matrices need to be manipulated relatively quickly and where rapid prototyping or algorithm development is needed. Examples of such situations include feature processing and modeling of speech <ref> [2, 3, 4] </ref> at both the research and application development stages. Mx allows fast and easy assimilation, partitioning, transformation and inspection of these matrices. <p> Mx is used extensively at the Center for Spoken Language Understanding and in the Anthropic Speech Processing Group at the Oregon Graduate Institute of Science and Technology. It has been used for projects such as speech recognition <ref> [2] </ref> and speaker verification [3, 4]. Mx provides a rich variety of uses. The following examples demonstrates just a few of these uses.
Reference: [3] <author> S. van Vuuren and H. Hermansky, </author> <title> "Oregon Graduate Institute NIST speaker recognition evaluation," in Proceedings of the NIST Speaker Recognition Workshop, </title> <address> (Baltimore), </address> <year> 1997. </year>
Reference-contexts: The Mx package is particularly useful for situations where large matrices need to be manipulated relatively quickly and where rapid prototyping or algorithm development is needed. Examples of such situations include feature processing and modeling of speech <ref> [2, 3, 4] </ref> at both the research and application development stages. Mx allows fast and easy assimilation, partitioning, transformation and inspection of these matrices. <p> Mx is used extensively at the Center for Spoken Language Understanding and in the Anthropic Speech Processing Group at the Oregon Graduate Institute of Science and Technology. It has been used for projects such as speech recognition [2] and speaker verification <ref> [3, 4] </ref>. Mx provides a rich variety of uses. The following examples demonstrates just a few of these uses.
Reference: [4] <author> S. van Vuuren and H. Hermansky, "!MESS: </author> <title> A modular, efficient speaker verification system," in Proc. of Workshop on Speaker Recognition and its Commercial and Forensic Applications (RLA2C), </title> <address> (Avignon, France), </address> <month> April, </month> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: The Mx package is particularly useful for situations where large matrices need to be manipulated relatively quickly and where rapid prototyping or algorithm development is needed. Examples of such situations include feature processing and modeling of speech <ref> [2, 3, 4] </ref> at both the research and application development stages. Mx allows fast and easy assimilation, partitioning, transformation and inspection of these matrices. <p> Mx is used extensively at the Center for Spoken Language Understanding and in the Anthropic Speech Processing Group at the Oregon Graduate Institute of Science and Technology. It has been used for projects such as speech recognition [2] and speaker verification <ref> [3, 4] </ref>. Mx provides a rich variety of uses. The following examples demonstrates just a few of these uses.
Reference: [5] <author> J. Schalkwyk, J. de Villiers, S. van Vuuren, and P. Vermeulen, "CSLUsh: </author> <title> an extendible research environment," </title> <booktitle> in Proc. </booktitle> <address> EUROSPEECH'97, (Rodos, Greece), </address> <pages> pp. 698-701, </pages> <year> 1997. </year>
Reference-contexts: INTRODUCTION 1.3 Software architecture Mx acts as a package extension of the Tcl script language [1]. The extendible scripting language Tcl is used to access Mx functionality within an efficient scripting environment. Currently Mx is bundled with the Center for Spoken Language Understanding programming shell <ref> [5] </ref> called CSLUsh [6] which is a group of similar package extensions designed specifically as speech recognition tools. This bundling allows CSLUsh to make seamlessly use of Mx and vice versa. <p> Individually, each package extends the usability of the other packages by providing specific capabilities such as, for example, distributed computing and object management (using the Rtcl package). In particular, the Rtcl package allows Mx commands to be executed remotely <ref> [5] </ref>. As with Tcl, Mx also provides error messages, command stack tracing and exception handling. All packages can be dynamically loaded as needed. The software architecture of Mx consists of two layers, similar to the software architecture of CSLUsh. <p> In addition to the specific Mx commands, some generic commands for manipulating matrix objects are available by loading an auxiliary package called Rtcl (an acronymn for Remote Tcl <ref> [5] </ref>). The Rtcl package can be loaded with the Mx package.
Reference: [6] <author> J. Schalkwyk and M. Fanty, </author> <title> "The CSLUsh toolkit for automatic speech recognition," </title> <type> Tech. Rep. </type> <institution> CSLU-011-06, Center for Spoken Language Understanding, Oregon Graduate Institute, </institution> <address> Portland, OR, </address> <year> 1996. </year>
Reference-contexts: INTRODUCTION 1.3 Software architecture Mx acts as a package extension of the Tcl script language [1]. The extendible scripting language Tcl is used to access Mx functionality within an efficient scripting environment. Currently Mx is bundled with the Center for Spoken Language Understanding programming shell [5] called CSLUsh <ref> [6] </ref> which is a group of similar package extensions designed specifically as speech recognition tools. This bundling allows CSLUsh to make seamlessly use of Mx and vice versa. <p> ELEMENTARY STATISTICS Part IV Appendix 61 Appendix A Availability Mx acts as a package extension of the Tcl script language [1]. Currently Mx is bundled with the Center for Spoken Language Understanding shell <ref> [6] </ref>. Mx is available as part of the CSLU toolkit free of charge for academic and research purposes at http://www.cse.ogi.edu/CSLU/toolkit/. Before running Mx it is necessary to have the toolkit installed on your system. 63 64 APPENDIX A.
Reference: [7] <author> J. Schalkwyk and M. Fanty, </author> <title> "The CSLU-c toolkit for automatic speech recognition," </title> <type> Tech. Rep. </type> <institution> CSLU-012-06, Center for Spoken Language Understanding, Oregon Graduate Institute, </institution> <address> Portland, OR, </address> <year> 1996. </year>
Reference-contexts: All packages can be dynamically loaded as needed. The software architecture of Mx consists of two layers, similar to the software architecture of CSLUsh. The bottom layer is a set of efficient C libraries called CSLU-C <ref> [7] </ref> containing functions which support basic algorithmic operations and associated utilities. The top layer CSLUsh provides a wrapper for the bottom layer CSLU-C libraries, making them accessible within Tcl. discusses the functional aspects relating to the shaded region in the Figure.
Reference: [8] <author> F. Bimbot and L. Mathan, </author> <title> "Text-free speaker recognition using an arithmetic-harmonic sphericity measure," </title> <booktitle> in Eurospeech, </booktitle> <address> (Berlin), </address> <pages> pp. 169-172, </pages> <year> 1993. </year>
Reference-contexts: ARITHMETIC HARMONIC SPHERICITY MEASURE 67 B.4 Arithmetic Harmonic Sphericity Measure Consider implementing the arithmetic harmonic sphericity measure (AHS) <ref> [8] </ref> log [tr (cov (Y ) fl cov (X) 1 ) fl tr (cov (X) fl cov (Y ) 1 )] 2 fl log (d): Here is a procedure to calculate the AHS measure proc ahs -X Y - mx cov $X Sx mx cholinv $Sx Si set tx [mx value
References-found: 8

