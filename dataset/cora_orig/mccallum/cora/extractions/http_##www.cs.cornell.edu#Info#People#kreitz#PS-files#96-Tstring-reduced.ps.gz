URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/96-Tstring-reduced.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/96-Tstring.html
Root-URL: 
Title: Proving with Analytic Tableaux and Related Methods,  T-String-Unification: Unifying Prefixes in Non-Classical Proof Methods  
Author: P. Miglioli, U. Moscato, D. Mundici, M. Ornaghi Jens Otten Christoph Kreitz 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: Fachgebiet Intellektik, Fachbereich Informatik Technische Hochschule Darmstadt  
Note: eds., 5 th International Workshop on Theorem  LNAI 1071, pp. 244-260, Springer, 1996.  
Abstract: fjeotten,kreitzg@intellektik.informatik.th-darmstadt.de Abstract. For an efficient proof search in non-classical logics, particular in intuitionistic and modal logics, two similar approaches have been established: Wallen's matrix characterization and Ohlbach's resolution calculus. Beside the usual term-unification both methods require a specialized string-unification to unify the so-called prefixes of atomic formulae (in Wallen's notation) or world-paths (in Ohlbach's notation). For this purpose we present an efficient algorithm, called T-String-Unification, which computes a minimal set of most general unifiers. By transforming systems of equations we obtain an elegant unification procedure, which is applicable to the intuitionistic logic J and the modal logic S4. With some modifications we are able to treat the modal logics D, K, D4, K4, S5, and T. We explain our method by an intuitive graphical presentation, prove correctness, completeness, minimality, and termination and investigate its complexity.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> H. Abdulrab and J.-P. Pecuchet. </author> <title> Solving word equations. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Unification, </booktitle> <pages> pages 353-375. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1990. </year>
Reference-contexts: In the case of string unification (the monoid problem or resolution problem for word equations) the only axiom is the associativity of string concatenation. An algorithm for enumerating the most general unifiers of a set of string equations has first been presented by Plotkin [16] whereas Makanin <ref> [9, 10, 1] </ref> showed that it is possible to decide whether a set of string equations has a unifier or not. In general, however, the number of most general unifiers of a set of string equations is infinite. <p> For these logics, however, a characterization for validity and the notion of a prefix still has to be developed. Our algorithm is much simpler and considerably more efficient than other string unification algorithms developed so far. The algorithms described in <ref> [9, 10, 1] </ref> are developed for general string unification and do not take advantage of the special properties of prefix strings. Ohlbach's algorithm [13] does not compute a minimal set of unifiers and thus wastes computation time.
Reference: 2. <author> B. Beckert and J. Posegga. </author> <title> leanT A P : Lean tableau-based theorem proving. </title> <editor> In Alan Bundy, editor, </editor> <booktitle> Proceedings of the 12 th Conference on Automated Deduction, </booktitle> <publisher> LNAI 814, Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method [5, 6, 8, 4], resolution [17, 20], the tableaux calculus <ref> [3, 2] </ref>, and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity.
Reference: 3. <editor> E. W. Beth. </editor> <booktitle> The foundations of mathematics. </booktitle> <publisher> North-Holland, </publisher> <year> 1959. </year>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method [5, 6, 8, 4], resolution [17, 20], the tableaux calculus <ref> [3, 2] </ref>, and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity.
Reference: 4. <author> W. Bibel, S. Br uning, U. Egly, T. </author> <title> Rath. </title> <editor> Komet. In Alan Bundy, editor, </editor> <booktitle> Proceedings of the 12 th Conference on Automated Deduction, LNAI 814, </booktitle> <pages> pages 783-787. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method <ref> [5, 6, 8, 4] </ref>, resolution [17, 20], the tableaux calculus [3, 2], and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity.
Reference: 5. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Jour. of the ACM, </journal> <volume> 28, </volume> <pages> p. 633-645, </pages> <year> 1981. </year>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method <ref> [5, 6, 8, 4] </ref>, resolution [17, 20], the tableaux calculus [3, 2], and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity.
Reference: 6. <author> W. Bibel. </author> <title> Automated Theorem Proving. </title> <publisher> Vieweg Verlag, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method <ref> [5, 6, 8, 4] </ref>, resolution [17, 20], the tableaux calculus [3, 2], and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity.
Reference: 7. <author> J. J. </author> <title> Herbrand. Recherches sur la theorie de la demonstration. </title> <journal> Travaux Soc. Sciences et Lettres Varsovie, Cl. </journal> <volume> 3 (Mathem., </volume> <pages> Phys.), page 128 pp., </pages> <year> 1930. </year> <editor> Engl. transl. in W. D. Goldfarb, ed. J.J. </editor> <title> Herbrand | Logical writings, </title> <publisher> Reidel, </publisher> <year> 1971. </year>
Reference-contexts: This substitution encodes the fact that certain quantified variables occurring in the formula to be proven have to be instantiated by terms in order to complete the proof. It can be computed by well-known algorithms for term-unification such as the algorithm of Herbrand & Robinson <ref> [7, 17] </ref> or Martelli-Montanari [11]. If proof methods like the above shall be extended to non-classical logics such as modal logics or intuitionistic logic it is not sufficient to consider only the terms occurring in atomic formulae.
Reference: 8. <author> R. Letz, J. Schumann, S. Bayerl, W. Bibel. </author> <title> Setheo: A high-performance theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8 </volume> <pages> 183-212, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method <ref> [5, 6, 8, 4] </ref>, resolution [17, 20], the tableaux calculus [3, 2], and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity.
Reference: 9. <author> G. S. Makanin. </author> <title> The problem of solvability of equations in a free semigroup. </title> <journal> Math. Sb., </journal> <volume> 103(145) </volume> <pages> 147-236, </pages> <year> 1977. </year> <title> English translation: </title> <journal> Math. USSR Sb. </journal> <volume> 32. </volume>
Reference-contexts: In the case of string unification (the monoid problem or resolution problem for word equations) the only axiom is the associativity of string concatenation. An algorithm for enumerating the most general unifiers of a set of string equations has first been presented by Plotkin [16] whereas Makanin <ref> [9, 10, 1] </ref> showed that it is possible to decide whether a set of string equations has a unifier or not. In general, however, the number of most general unifiers of a set of string equations is infinite. <p> It is somewhat similar to Makanin's notion of an equation with scheme <ref> [9, 10] </ref>. Example 7. The strings s=aBcDEf and t=aBGhiJ fulfill the T-string property. If we want to unify them (i.e. find a most general T-unifier for fs=tg) we have to look for a mapping which assigns a substring of t to each variable in s and vice versa. <p> For these logics, however, a characterization for validity and the notion of a prefix still has to be developed. Our algorithm is much simpler and considerably more efficient than other string unification algorithms developed so far. The algorithms described in <ref> [9, 10, 1] </ref> are developed for general string unification and do not take advantage of the special properties of prefix strings. Ohlbach's algorithm [13] does not compute a minimal set of unifiers and thus wastes computation time.
Reference: 10. <author> G. S. Makanin. </author> <title> Algorithmic decidability of the rank of constant free equations in a free semigroup. </title> <journal> Dokl. Akad. Nauk, SSSR, </journal> <volume> 243, </volume> <year> 1978. </year>
Reference-contexts: In the case of string unification (the monoid problem or resolution problem for word equations) the only axiom is the associativity of string concatenation. An algorithm for enumerating the most general unifiers of a set of string equations has first been presented by Plotkin [16] whereas Makanin <ref> [9, 10, 1] </ref> showed that it is possible to decide whether a set of string equations has a unifier or not. In general, however, the number of most general unifiers of a set of string equations is infinite. <p> It is somewhat similar to Makanin's notion of an equation with scheme <ref> [9, 10] </ref>. Example 7. The strings s=aBcDEf and t=aBGhiJ fulfill the T-string property. If we want to unify them (i.e. find a most general T-unifier for fs=tg) we have to look for a mapping which assigns a substring of t to each variable in s and vice versa. <p> For these logics, however, a characterization for validity and the notion of a prefix still has to be developed. Our algorithm is much simpler and considerably more efficient than other string unification algorithms developed so far. The algorithms described in <ref> [9, 10, 1] </ref> are developed for general string unification and do not take advantage of the special properties of prefix strings. Ohlbach's algorithm [13] does not compute a minimal set of unifiers and thus wastes computation time.
Reference: 11. <author> A. Martelli and Ugo Montanari. </author> <title> An efficient unification algorithm. </title> <journal> ACM Transactions on Programming Languages and Systems (TOPLAS), </journal> <volume> 4 </volume> <pages> 258-282, </pages> <year> 1982. </year>
Reference-contexts: This substitution encodes the fact that certain quantified variables occurring in the formula to be proven have to be instantiated by terms in order to complete the proof. It can be computed by well-known algorithms for term-unification such as the algorithm of Herbrand & Robinson [7, 17] or Martelli-Montanari <ref> [11] </ref>. If proof methods like the above shall be extended to non-classical logics such as modal logics or intuitionistic logic it is not sufficient to consider only the terms occurring in atomic formulae. <p> The algorithm proceeds by transforming a set of equations in a way similar to the algorithm of Martelli & Montanari <ref> [11] </ref> for term-unification. For this purpose it uses transformation rules which step-wisely convert the set of equations into a set of substitutions which eventually will become the set of most general unifiers.
Reference: 12. <author> H. J. Ohlbach. </author> <title> A resolution calculus for modal logics. </title> <type> Ph.D. Thesis (SEKI Report SR-88-08), </type> <institution> Universitat Kaiserslautern, </institution> <year> 1988. </year>
Reference-contexts: Similarly Ohlbach's resolution calculi for modal logics <ref> [12, 13] </ref> require a unification of world-paths which characterize the modal context of an atom in a formula. <p> In example 4 the substitution is an instance of , since = t (). With the above notions we can now define unifiers and most general unifiers. Our definitions correspond to concepts introduced e.g. in <ref> [19, 12, 18] </ref>. Definition 6 (T-Unifier). <p> Rather than by giving a recursive algorithm we consider the process of unification as a sequence of transformations on systems of equations. This concept is similar to the ideas of Martelli & Montanari ([11], see also <ref> [12, 18] </ref>). To keep our notation simple we divide our system of equations into an unsolved part that initially contains the equations to be solved, and into a solved part which represents a substitution. <p> It can be used to guide the search for a proof in various non-classical logics and plays a fundamental role within efficient proof procedures for these logics. Our method has been described following the terminology of Wallen [19] but it can be applied directly to Ohlbach's world-paths <ref> [12, 13] </ref> as well. Our generic algorithm is based on a small set of transformation rules which encode the peculiarities and restrictions of a particular logic.
Reference: 13. <author> H. J. Ohlbach. </author> <title> A resolution calculus for modal logics. </title> <editor> In E. Lusk and R. Overbeek, editors, </editor> <booktitle> Proceedings of the 9 th Conference on Automated Deduction, </booktitle> <volume> LNCS 310, </volume> <pages> pages 500-515. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Similarly Ohlbach's resolution calculi for modal logics <ref> [12, 13] </ref> require a unification of world-paths which characterize the modal context of an atom in a formula. <p> It can be used to guide the search for a proof in various non-classical logics and plays a fundamental role within efficient proof procedures for these logics. Our method has been described following the terminology of Wallen [19] but it can be applied directly to Ohlbach's world-paths <ref> [12, 13] </ref> as well. Our generic algorithm is based on a small set of transformation rules which encode the peculiarities and restrictions of a particular logic. <p> Our algorithm is much simpler and considerably more efficient than other string unification algorithms developed so far. The algorithms described in [9, 10, 1] are developed for general string unification and do not take advantage of the special properties of prefix strings. Ohlbach's algorithm <ref> [13] </ref> does not compute a minimal set of unifiers and thus wastes computation time. Besides this one of the main advantages of our algorithm is that it generates unifiers step by step instead of computing them all at once.
Reference: 14. <author> J. Otten, C. </author> <title> Kreitz. A connection based proof method for intuitionistic logic. </title> <booktitle> In Proceedings of the 4 th Workshop on Theorem Proving with Analytic Tableaux and Related Methods, LNAI 918, </booktitle> <pages> pp. 122-137, </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: It can be used to unify prefixes in proof methods for the intuitionistic logic J or the modal logic S4 (see <ref> [19, 14] </ref>). 5 The method is general in the sense that there are no restrictions for the computed unifier: variables may be instantiated by arbitrary strings including the empty string. 6 After examining the decidability of T-string-unification we shall give an intuitive graphical explanation of a method for computing T-unifiers. <p> Our unification algorithm has been implemented in Prolog and tested within a prototypical theorem prover for intuitionistic logic (see [15]). In the future we shall integrate it into a general proof procedure for non-classical logics (see e.g. <ref> [14] </ref>) and investigate the practical efficiency of the resulting proof technique. In particular we intend to compare it with a method which first translates these logics into classical logic and then uses one of the existing classical theorem provers. 259
Reference: 15. <author> J. Otten. </author> <title> Ein konnektionenorientiertes Beweisverfahren fur intuitionistische Logik. </title> <type> Master's thesis, </type> <institution> TH Darmstadt, </institution> <year> 1995. </year>
Reference-contexts: Our algorithm will therefore lead to the implementation of a very efficient proof search procedure for non-classical logics. Our unification algorithm has been implemented in Prolog and tested within a prototypical theorem prover for intuitionistic logic (see <ref> [15] </ref>). In the future we shall integrate it into a general proof procedure for non-classical logics (see e.g. [14]) and investigate the practical efficiency of the resulting proof technique.
Reference: 16. <author> G. Plotkin. </author> <title> Building-in Equational Theories. </title> <journal> Machine Intelligence, </journal> <volume> 7 </volume> <pages> 73-90, </pages> <publisher> Edin-burgh University Press, </publisher> <year> 1972. </year>
Reference-contexts: In the case of string unification (the monoid problem or resolution problem for word equations) the only axiom is the associativity of string concatenation. An algorithm for enumerating the most general unifiers of a set of string equations has first been presented by Plotkin <ref> [16] </ref> whereas Makanin [9, 10, 1] showed that it is possible to decide whether a set of string equations has a unifier or not. In general, however, the number of most general unifiers of a set of string equations is infinite.
Reference: 17. <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <month> January </month> <year> 1965. </year>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method [5, 6, 8, 4], resolution <ref> [17, 20] </ref>, the tableaux calculus [3, 2], and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity. <p> This substitution encodes the fact that certain quantified variables occurring in the formula to be proven have to be instantiated by terms in order to complete the proof. It can be computed by well-known algorithms for term-unification such as the algorithm of Herbrand & Robinson <ref> [7, 17] </ref> or Martelli-Montanari [11]. If proof methods like the above shall be extended to non-classical logics such as modal logics or intuitionistic logic it is not sufficient to consider only the terms occurring in atomic formulae.
Reference: 18. <author> M. Schmidt-Schau. </author> <title> Unification in a combination of arbitrary disjoint equational theories. </title> <editor> In E. Lusk and R. Overbeek, editors, </editor> <booktitle> Proceedings of the 9 th Conference on Automated Deduction, </booktitle> <volume> LNCS 310, </volume> <pages> pages 378-392. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In example 4 the substitution is an instance of , since = t (). With the above notions we can now define unifiers and most general unifiers. Our definitions correspond to concepts introduced e.g. in <ref> [19, 12, 18] </ref>. Definition 6 (T-Unifier). <p> Rather than by giving a recursive algorithm we consider the process of unification as a sequence of transformations on systems of equations. This concept is similar to the ideas of Martelli & Montanari ([11], see also <ref> [12, 18] </ref>). To keep our notation simple we divide our system of equations into an unsolved part that initially contains the equations to be solved, and into a solved part which represents a substitution.
Reference: 19. <author> L. Wallen. </author> <title> Automated deduction in nonclassical logic. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: If proof methods like the above shall be extended to non-classical logics such as modal logics or intuitionistic logic it is not sufficient to consider only the terms occurring in atomic formulae. In his matrix characterization of non-classical validity Wallen <ref> [19] </ref> has shown that in addition the prefixes of atomic formulae need to be unified in order to make them complementary where a prefix of an atom essentially describes its position in the formula tree. <p> Two prefix strings s and t can be unified if there is a morphism which assigns a string to each variable such that (s)=(t). In contrast to the usual term substitution Wallen <ref> [19] </ref> calls this morphism a modal or intuitionistic substitution. Consider, for instance, the strings tabU lAR and taST eF uL where capital letters indicate variables and small letters refer to constants. <p> In example 4 the substitution is an instance of , since = t (). With the above notions we can now define unifiers and most general unifiers. Our definitions correspond to concepts introduced e.g. in <ref> [19, 12, 18] </ref>. Definition 6 (T-Unifier). <p> It can be used to unify prefixes in proof methods for the intuitionistic logic J or the modal logic S4 (see <ref> [19, 14] </ref>). 5 The method is general in the sense that there are no restrictions for the computed unifier: variables may be instantiated by arbitrary strings including the empty string. 6 After examining the decidability of T-string-unification we shall give an intuitive graphical explanation of a method for computing T-unifiers. <p> Variables may only be instantiated with exact one single character, i.e. for every T-unifier the following property must hold: j (V )j = 1 for all V 2 V. This restriction (see <ref> [19] </ref>) follows from the fact that the accessibility relation for D and K has no special properties which can be guaranteed. <p> most one most general unifier for every unification problem in the modal logics K and D. 11 4.2 The Modal Logics D4 and K4 In the modal logic D4 and K4 variables may only be instantiated with non-empty strings since the accessibility relation for D4 and K4 is transitive (see <ref> [19] </ref>). Thus for every T-unifier the property j (V )j1 must hold for all V 2 V. The rules R1 to R4 and R7 to R10 are identical with those for intuitionistic logic in table 1. For the rules R5 and R6 we need an additional restriction. <p> An additional criterion has to be fulfilled in these cases (see <ref> [19] </ref>). 257 4.3 The Modal Logics S4 and S5 The modal logic S4, where the accessibility relation is reflexive and transitive, can be treated in the same way as the intuitionistic logic. We can use the general T-string-unification algorithm (see section 3) without any additional restrictions. <p> The modal logic S5 is trivial since the strings we want to unify simply consist of a single character which is either a variable or a constant. This follows from the fact that the accessibility relation for S5 is an equivalence relation (see <ref> [19] </ref>). <p> Table 4. Transformation Rules for the Modal Logic S5 4.4 The Modal Logic T In the modal logic T strings may only be instantiated with at most one character since the accessibility relation for T is reflexive (see <ref> [19] </ref>). Thus for every T-unifier the following property must hold: j (V )j1 for all V 2 V. <p> It can be used to guide the search for a proof in various non-classical logics and plays a fundamental role within efficient proof procedures for these logics. Our method has been described following the terminology of Wallen <ref> [19] </ref> but it can be applied directly to Ohlbach's world-paths [12, 13] as well. Our generic algorithm is based on a small set of transformation rules which encode the peculiarities and restrictions of a particular logic.
Reference: 20. <author> L. Wos et. al. </author> <title> Automated reasoning contributes to mathematics and logic. </title> <booktitle> In Proceedings of the 10 th Conference on Automated Deduction, </booktitle> <volume> LNCS 449, </volume> <pages> pages 485-499. </pages> <editor> Springer Verlag 1990. </editor> <title> This article was processed using the L a T E X macro package with LLNCS style 260 </title>
Reference-contexts: 1 Introduction Unification is one of the key operations which are used to guide an efficient search for a proof of a theorem in classical predicate logic. Within theorem provers based on the connection method [5, 6, 8, 4], resolution <ref> [17, 20] </ref>, the tableaux calculus [3, 2], and others unification is required for making certain atomic formulae complementary . Complementarity is a key concept in the characterization of logical validity.
References-found: 20

