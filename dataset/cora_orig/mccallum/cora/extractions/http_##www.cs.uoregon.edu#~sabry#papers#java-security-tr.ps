URL: http://www.cs.uoregon.edu/~sabry/papers/java-security-tr.ps
Refering-URL: http://www.cs.uoregon.edu/research/qos/publications.html
Root-URL: http://www.cs.uoregon.edu
Title: Java Access Modifiers in Parallel Universes  of Service Dynamic Validation Qualifiers The ASSERT System,  
Author: Amr Sabry Stephen Fickas 
Note: This research was partially sponsored by the Advanced Resarch Projects Agency under the title: Quality  ARPA order number F269, under contract number N66001-97-C-8521. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of the Advanced Research Projects Agency or the U.S. government.  
Address: Eugene, OR 97403  
Affiliation: Department of Computer Science University of Oregon  
Pubnum: Technical Report CIS-TR-98-03  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gosling, J., Joy, B., and Steele, G. </author> <title> The Java Language Specification. The Java Series. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1996. </year>
Reference-contexts: 1 Introduction We assume the reader is familiar with the Java programming language and its security model. For more details about the language, we recommend the Java Language Specification <ref> [1] </ref> and for the latest update on security issues, we recommend http://www.javasoft.- com/security.
Reference: [2] <author> Lindholm, T., and Yellin, F. </author> <title> The Java Virtual Machine Specification. The Java Series. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1997. </year>
Reference-contexts: In our test cases, only the JVM in version 1.2beta3 of the Java Development Kit (JDK) caught the violation by throwing an IllegalAccessError exception. Earlier versions of the JVM erroneously allowed the access. (And strangely enough the JVM specification <ref> [2] </ref> does not appear to require that the instructions getField and putField enforce access control other than for protected variables.) But even when JVM implementations take care to protect the value of a private variable from illegal access, they readily expose the sequence of steps that was used to compute the
Reference: [3] <author> Oaks, S. </author> <title> Java Security. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, California, </address> <year> 1998. </year>
Reference-contexts: This property is not only important for encapsulation but also for security <ref> [3] </ref>.
References-found: 3

