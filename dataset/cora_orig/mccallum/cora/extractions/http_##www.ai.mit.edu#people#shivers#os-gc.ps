URL: http://www.ai.mit.edu/people/shivers/os-gc.ps
Refering-URL: http://www.ai.mit.edu/people/shivers/citations.html
Root-URL: 
Email: shivers@ai.mit.edu  
Title: Automatic management of operating-system resources  
Author: Olin Shivers 
Address: Cambridge, Massachusetts, USA  
Affiliation: MIT AI Lab  
Abstract: One of the attractive features of functional programming languages is that they provide automatic management of the store, in the form of garbage collection. However, the benefits of automatic resource management can be applied to other resources as well. Scsh, a systems-programming dialect of Scheme, provides automatic resource management for operating-systems structures, notably processes, I/O channels, and signal events. This kind of automatic management extends the benefits of garbage collection modularity, robustness, simplicity, and clarityto new sets of objects in programming, and also gives us hints as to how operating systems should be structured from the perspective of functional programming languages. 
Abstract-found: 1
Intro-found: 1
Reference: [R4RS] <editor> J. Rees and W. Clinger (editors). </editor> <title> The revised 4 report on the algorithmic language Scheme. Lisp Pointers IV(3):1-55, </title> <month> JulySeptember </month> <year> 1991. </year>
Reference-contexts: This makes programs simpler and clearer. Finally, GC promotes modularityin systems that require explicit storage management, a module that exports a data structure to clients must also provide some way to tell when client modules no longer require the data structure. Scsh is a dialect of Scheme <ref> [R4RS] </ref> that is designed for systems programming [scsh, scsh-man]. As such, it provides complete interfaces to the operating system. By far the most complex and difficult parts of the design involved providing interfaces to the underlying OS resources that harmoniously integrated the OS functionality with the programming language.
Reference: [scsh] <author> Olin Shivers. </author> <title> A Scheme shell. </title> <note> To appear in the Journal of Lisp and Symbolic Computation. (Also available as technical report TR-635, </note> <institution> Laboratory for Computer Science, MIT; and technical report TR-94-10, Department of Computer Science, University of Hong Kong.) </institution>
Reference-contexts: Finally, GC promotes modularityin systems that require explicit storage management, a module that exports a data structure to clients must also provide some way to tell when client modules no longer require the data structure. Scsh is a dialect of Scheme [R4RS] that is designed for systems programming <ref> [scsh, scsh-man] </ref>. As such, it provides complete interfaces to the operating system. By far the most complex and difficult parts of the design involved providing interfaces to the underlying OS resources that harmoniously integrated the OS functionality with the programming language.
Reference: [scsh-man] <author> Olin Shivers. </author> <title> The scsh manual. </title> <month> November </month> <year> 1995, </year> <note> scsh release 0.4. </note> <institution> MIT Laboratory for Computer Science. </institution> <note> (Also available as URL ftp://www-swiss.ai.mit. edu/pub/su/scsh/scsh-manual.ps.) </note>
Reference-contexts: Finally, GC promotes modularityin systems that require explicit storage management, a module that exports a data structure to clients must also provide some way to tell when client modules no longer require the data structure. Scsh is a dialect of Scheme [R4RS] that is designed for systems programming <ref> [scsh, scsh-man] </ref>. As such, it provides complete interfaces to the operating system. By far the most complex and difficult parts of the design involved providing interfaces to the underlying OS resources that harmoniously integrated the OS functionality with the programming language.
Reference: [SML/NJ] <institution> The Posix API for SML/NJ is currently available only in a pre-release form; its manual also is not available. Interested parties may, however, contact Dr. John Reppy, AT&T Laboratories, jhr@research. att.com. </institution>
Reference-contexts: While other operating-system and language designs have provided interfaces to OS resources from advanced languages, such as the Spin project's use of Modula-3 [Spin], or the Standard ML of New Jersey's interface to Posix <ref> [SML/NJ] </ref>, none of these systems have managed to exploit automatic storage management to manage the operating system's resources in this manner. Although we've considered Scheme and three different Unix resources as our examples, the ideas behind these examples are not specific to Scheme or Unix.
Reference: [Spin] <author> Wilson Hsieh, Marc Fiuczynski, Charles Garrett, Ste-fan Savage, David Becker, and Brian Bershad. </author> <title> Language support for extensible operating systems. </title> <booktitle> In Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year> <note> (Also available as URL http://www. cs.washington.edu/research/projects/spin/ www/papers/WCS/language.ps) </note>
Reference-contexts: The facilities traditionally provided by interrupt handlers in other programming languages are provided by an alternative mechanism which is modular and parallelisable. While other operating-system and language designs have provided interfaces to OS resources from advanced languages, such as the Spin project's use of Modula-3 <ref> [Spin] </ref>, or the Standard ML of New Jersey's interface to Posix [SML/NJ], none of these systems have managed to exploit automatic storage management to manage the operating system's resources in this manner.

References-found: 5

