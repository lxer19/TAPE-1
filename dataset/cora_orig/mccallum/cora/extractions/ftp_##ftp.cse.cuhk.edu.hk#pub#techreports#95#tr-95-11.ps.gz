URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/95/tr-95-11.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: hyhwang@cs.cuhk.hk, lhf@cs.cuhk.hk, adafu@cs.cuhk.hk  
Title: A non-magical set-oriented method for Datalog  
Author: Hoi-Yee Hwang, Ho-Fung Leung and Wai-Chee Fu 
Address: Shatin, Hong Kong  
Affiliation: Department of Computer Science Chinese University of Hong Kong  
Abstract: This paper presents a new algorithm for query evaluation for datalog. The algorithm is set-oriented as it uses sets to constraint the arguments of the related rules and the subgoals generated. The nature of the algorithm is top-down with memorization, which captures the fixed-point idea behind the bottom-up approach. We show that the algorithm is computationally efficient, it generates only relevant facts as in the top-down approach, but always terminates and avoids repeated derivation of the same facts. It achieves equal or better performance than the generalized magic sets method in frequently quoted examples, and typically uses less storage.
Abstract-found: 1
Intro-found: 1
Reference: [BMSU86] <author> F. Bancilhon, D. Maier, Y. Sagiv, and J.D. Ullman, </author> <title> Magic Sets and Other Strange Ways to Implement Logic Programs, </title> <booktitle> in: Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <address> Cambridge, MA, </address> <month> Mar. </month> <year> 1986, </year> <pages> pp. 1-15. </pages>
Reference-contexts: The basic scheme is top-down but it is enhanced by some bottom-up mechanisms. A central idea behind efficient query evaluation is sideway information passing (sip). In top-down approaches, this is carried out by unification. In the magic sets method <ref> [BMSU86, BR87, Ra88] </ref>, which uses ideas of top-down approaches to rewrite rules for bottom-up evaluation, the notion of sideway information passing is utilized in the creation of magic predicates. <p> No more facts of T can be found, so the algorithm ends and TOA containing both the expected answers (1,2) and (1,3) 7 Comparison with the Generalized Magic Sets method The magic sets method has been proposed in <ref> [BMSU86] </ref> and a generalized magic set method is proposed in [BR87, Ra88]. Four difference sets of rules and queries will be considered: 1. GF (X,Y) :- M (X), P (X,Z), P (Z,Y).
Reference: [BNRST87] <author> C. Beeri, S. Naqvi, R. Ramakrishnan, O. Shnueli, S. Tsur, </author> <title> Sets and Negation in a Logic Database Language (LDL1), </title> <booktitle> in: Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1987. </year>
Reference-contexts: A key point is that our algorithm uses a set representation for the arguments in queries, which enables us to make use of the set concepts of intersect and include. In some extensions to datalog, the concepts of set arguments are investigated <ref> [BNRST87, Ku87, DO91, Va91] </ref>. However, such work is focused on extending the expressive power of datalog, so that it can describe facts about sets rather than singletons.
Reference: [BR87] <author> C. Beeri, and R. Ramakrishnan, </author> <title> On the Power of Magic, </title> <booktitle> in: Proceedings of ACM Symposium on Principles of Databas Systems, </booktitle> <address> San Diego, CA, </address> <month> Mar. </month> <year> 1987, </year> <pages> pp. 269-283. </pages>
Reference-contexts: The basic scheme is top-down but it is enhanced by some bottom-up mechanisms. A central idea behind efficient query evaluation is sideway information passing (sip). In top-down approaches, this is carried out by unification. In the magic sets method <ref> [BMSU86, BR87, Ra88] </ref>, which uses ideas of top-down approaches to rewrite rules for bottom-up evaluation, the notion of sideway information passing is utilized in the creation of magic predicates. <p> No more facts of T can be found, so the algorithm ends and TOA containing both the expected answers (1,2) and (1,3) 7 Comparison with the Generalized Magic Sets method The magic sets method has been proposed in [BMSU86] and a generalized magic set method is proposed in <ref> [BR87, Ra88] </ref>. Four difference sets of rules and queries will be considered: 1. GF (X,Y) :- M (X), P (X,Z), P (Z,Y). For the generalized magic sets method, the rule and the query will be rewritten into the following set of rules: magic (d). <p> This clearly follows from Lemma 2. 17 8.3 Completeness of the algorithm First we give some definitions. From <ref> [BR87] </ref>, for each fact that belongs to a virtual predicate in a datalog program, there exists a finite derivation tree, that describes how it can be derived from ground facts using the rules of the program. Let p (c) be a derived fact for a virtual predicate p.
Reference: [Br89] <author> F. Bry. </author> <title> Logic programming as constructivism: A formalization and its application to databases, </title> <booktitle> in: Proceedings of ACM Symposium on Principles of Database Systems, </booktitle> <year> 1989. </year> <month> 22 </month>
Reference-contexts: Many query evaluation methods have been proposed. These evaluation methods can be divided into three categories: top-down approaches, bottom-up approaches, and approaches that have characteristics of both top-down and bottom-up. A discussion of bottom-up versus top-down approaches may be found in <ref> [Br89] </ref>. In this paper, we propose a method that is of the third type. The basic scheme is top-down but it is enhanced by some bottom-up mechanisms. A central idea behind efficient query evaluation is sideway information passing (sip). In top-down approaches, this is carried out by unification.
Reference: [DO91] <author> A. Dovier, E. G. Omodeo, E. Pontelli, G. Rossi. -log-: </author> <title> A Language for Programming in Logic with Finite Sets, </title> <booktitle> in GULP91: Sixth National Conference on Logic Programming, </booktitle> <year> 1991. </year>
Reference-contexts: A key point is that our algorithm uses a set representation for the arguments in queries, which enables us to make use of the set concepts of intersect and include. In some extensions to datalog, the concepts of set arguments are investigated <ref> [BNRST87, Ku87, DO91, Va91] </ref>. However, such work is focused on extending the expressive power of datalog, so that it can describe facts about sets rather than singletons. <p> A set-variable , denoted by X , Y , Z , ..., is a set of values in the domain set D of the Datalog, i.e. each set-variable ranges over 2 D . A similar definition of set-variable can be found in <ref> [DO91] </ref>. Definition 4.1 Let X be an argument in a clause. X is the applicable domain of X if X takes its value from X .
Reference: [GMN84] <editor> H. Gallaire, J. Minker, J. M. Nicolas. </editor> <title> Logic and database : a deductive approach, in: </title> <journal> ACM computing surveys 16(2), </journal> <month> June </month> <year> 1984, </year> <pages> pp. 153-186. </pages>
Reference-contexts: 1 Introduction Deductive databases have been investigated for quite a number of years and general overviews can be found in <ref> [GMN84, RU95] </ref>. One of the major tasks of a deductive database is query answering. Many query evaluation methods have been proposed. These evaluation methods can be divided into three categories: top-down approaches, bottom-up approaches, and approaches that have characteristics of both top-down and bottom-up.
Reference: [KK93] <author> T. Kanamori, T. Kawamura. </author> <title> Abstract interpretation based on OLDT resolution, in: </title> <journal> Journal of Logic Programming, </journal> <volume> vol 15, </volume> <year> 1993, </year> <pages> pp. 1-30. </pages>
Reference-contexts: Top-down evaluation does not have the problems of generating irrelevant facts. However, it has the problems of possible non-termination and repeated derivation of the same facts. 2 In another method that combines top-down and bottom-up ideas called OLDT resolution <ref> [KK93] </ref> the basic algorithm is top-down, but memoization is used to remember solutions to subgoals during execution, so that termination can be determined at fixed-point, and also repeated derivation of the same facts can be avoided.
Reference: [Ku87] <author> G.M. Kuper. </author> <title> Logic Programming With Sets, </title> <booktitle> in: Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1987. </year>
Reference-contexts: A key point is that our algorithm uses a set representation for the arguments in queries, which enables us to make use of the set concepts of intersect and include. In some extensions to datalog, the concepts of set arguments are investigated <ref> [BNRST87, Ku87, DO91, Va91] </ref>. However, such work is focused on extending the expressive power of datalog, so that it can describe facts about sets rather than singletons.
Reference: [Ll87] <author> J. W. </author> <title> Lloyd : Foundations of Logic Programming. 2nd Ed., </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Section 6 gives some examples to illustrate the algorithm. Section 7 compares with the magic sets methods. Section 8 sketches the proofs for soundness, completeness and termination. Section 9 concludes the paper. 2 Terminology We use the terminology in logic programming as in <ref> [Ll87] </ref>. A term is either a variable, a constant or a function of terms.
Reference: [Ne87] <author> W. Nejdl. </author> <title> Recursive strategies for answering recursive queries - the RQA/FQI strategy, </title> <booktitle> in: Proceedings 13th VLDB Conf., </booktitle> <year> 1987, </year> <month> pp.43-50. </month>
Reference-contexts: The term 'subquery' is introduced in this paper. As in our algorithm, QSQR tries to solve the query in a set-oriented way. However, due to the lack of the proper mechanism to detect loop in the search tree, this method is shown to be incomplete in <ref> [Ne87] </ref>. In our algorithm we introduce the concepts of intersection and inclusion for queries for detecting redundancies in query evaluation, and the data structures of LOQ and dependence query list for detecting loops in the search tree and dependencies among queries.
Reference: [Ra88] <author> R. Ramakrishnan, </author> <title> Magic Templates: A spellbinding Approach to Logic Programs, </title> <booktitle> in: Proceedings of the International Conference on Logic Programming, </booktitle> <address> Seattle, WA, </address> <month> Aug, </month> <year> 1988, </year> <pages> pp. 140-159. </pages>
Reference-contexts: The basic scheme is top-down but it is enhanced by some bottom-up mechanisms. A central idea behind efficient query evaluation is sideway information passing (sip). In top-down approaches, this is carried out by unification. In the magic sets method <ref> [BMSU86, BR87, Ra88] </ref>, which uses ideas of top-down approaches to rewrite rules for bottom-up evaluation, the notion of sideway information passing is utilized in the creation of magic predicates. <p> No more facts of T can be found, so the algorithm ends and TOA containing both the expected answers (1,2) and (1,3) 7 Comparison with the Generalized Magic Sets method The magic sets method has been proposed in [BMSU86] and a generalized magic set method is proposed in <ref> [BR87, Ra88] </ref>. Four difference sets of rules and queries will be considered: 1. GF (X,Y) :- M (X), P (X,Z), P (Z,Y). For the generalized magic sets method, the rule and the query will be rewritten into the following set of rules: magic (d).
Reference: [RU95] <author> R. Ramakrishnan, J. D. Ullman. </author> <title> A survey of Deductive Database Systems, in: </title> <journal> Journal of Logic Programming, </journal> <volume> vol 23, </volume> <pages> no.2, </pages> <month> May, </month> <year> 1995, </year> <pages> pp. 126-149. </pages>
Reference-contexts: 1 Introduction Deductive databases have been investigated for quite a number of years and general overviews can be found in <ref> [GMN84, RU95] </ref>. One of the major tasks of a deductive database is query answering. Many query evaluation methods have been proposed. These evaluation methods can be divided into three categories: top-down approaches, bottom-up approaches, and approaches that have characteristics of both top-down and bottom-up.
Reference: [Va91] <author> K. Vadaparty, </author> <title> On the power of rule-based Languages with Sets, </title> <booktitle> in: Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1991. </year>
Reference-contexts: A key point is that our algorithm uses a set representation for the arguments in queries, which enables us to make use of the set concepts of intersect and include. In some extensions to datalog, the concepts of set arguments are investigated <ref> [BNRST87, Ku87, DO91, Va91] </ref>. However, such work is focused on extending the expressive power of datalog, so that it can describe facts about sets rather than singletons.
Reference: [Vi86] <author> L. Vieille. </author> <title> Recursive axioms in deductive databases : the query/subquery approach, </title> <booktitle> in: Proceedings 1st Intl. Conf. on Expert Database Systems, </booktitle> <year> 1986, </year> <month> pp.179-193. </month>
Reference-contexts: Also we are alert to the gains in efficiency when relational database operations such as select, join and project on the relations can be used. This is not captured in the OLDT method. One more method that resembles our method is called QSQR <ref> [Vi86] </ref>. It is a top-down evaluation method for handling recursive axioms in deductive databases. The term 'subquery' is introduced in this paper. As in our algorithm, QSQR tries to solve the query in a set-oriented way.
References-found: 14

