URL: http://www.cs.jhu.edu/~yairamir/phd.ps.Z
Refering-URL: http://www.cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Title: Replication Using Group Communication Over a Partitioned Network  
Author: Yair Amir 
Degree: Thesis submitted for the degree Doctor of Philosophy  Submitted to the Senate of the  
Address: Jerusalem (1995).  
Affiliation: Hebrew University of  
Abstract-found: 0
Intro-found: 1
Reference: [Aga94] <author> D. A. Agarwal. Totem: </author> <title> A Reliable Ordered Delivery Protocol for Interconnected Local-Area Networks. </title> <type> Ph.D. thesis, </type> <institution> Department of Electrical and Computer Engineering, University of California, Santa Barbara, </institution> <year> 1994. </year>
Reference-contexts: Excellent reading about Transis and its membership algorithm is found in [Mal94]. The second reliable multicast protocol in Transis is the Ring protocol, detailed in Section 5.2. The Ring protocol was developed while the author was visiting the Totem project. The Totem system <ref> [Aga94] </ref> provides reliable multicast and membership services across a collection of local-area networks. The Totem system is composed of a hierarchy of two protocols. The bottom layer is the Ring protocol [AMMAC93, AMMAC95] which provides reliable multicast and processor membership services within a broadcast domain. <p> The Totem system is composed of a hierarchy of two protocols. The bottom layer is the Ring protocol [AMMAC93, AMMAC95] which provides reliable multicast and processor membership services within a broadcast domain. The upper layer is the Multiple-Rings protocol <ref> [Aga94] </ref> that provides reliable delivery and ordering across the entire network. Gateways are responsible to forward messages and configuration changes between broadcast domains. Each gateway interconnects two broadcast domains, and participates in the Ring protocol for each of them.
Reference: [AAD93] <author> O. Amir, Y. Amir and D. Dolev. </author> <title> A Highly Available Application in the Transis Environment. </title> <booktitle> In Proceedings of the Workshop on Hardware and Software Architectures for Fault Tolerance, </booktitle> <pages> pages 125-139, </pages> <booktitle> Lecture Notes in Computer Science 774, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: This exchange is called anti-entropy session. When the network partitions and subsequently remerges, servers from different components exchange actions generated at the disconnected component using anti-entropy sessions. A total order on the actions can be placed using a similar method to <ref> [AAD93] </ref>. The anti-entropy technique used to propagate actions is far more efficient compared to the gossip technique of [LLSG90]. In prior research [AAD93], we described an architecture that uses the Transis group communication layer to achieve consistent replication. <p> A total order on the actions can be placed using a similar method to <ref> [AAD93] </ref>. The anti-entropy technique used to propagate actions is far more efficient compared to the gossip technique of [LLSG90]. In prior research [AAD93], we described an architecture that uses the Transis group communication layer to achieve consistent replication. The architecture handles network partitions and remerges, as well as server crashes and recoveries. <p> This technique is more efficient than the anti-entropy technique because instead of using two-way exchange of knowledge and actions, multi-way exchange is used. Moreover, the exchange takes place exactly when it is needed (i.e. after a membership change) rather than periodically. The serious inefficiency of <ref> [AAD93] </ref> is the method of global total ordering, which uses Lamport clock and requires an eventual path from every server to order an action. A valuable work by Keidar [Kei94] uses the architecture of [AAD93] but replaces its global total ordering method. <p> The serious inefficiency of <ref> [AAD93] </ref> is the method of global total ordering, which uses Lamport clock and requires an eventual path from every server to order an action. A valuable work by Keidar [Kei94] uses the architecture of [AAD93] but replaces its global total ordering method. The novel ordering algorithm in [Kei94] always allows a connected majority of the servers to make progress, regardless of past failures. As in [AAD93], it always allows servers to initiate actions (even when they are not part of a 13 connected majority). <p> A valuable work by Keidar [Kei94] uses the architecture of <ref> [AAD93] </ref> but replaces its global total ordering method. The novel ordering algorithm in [Kei94] always allows a connected majority of the servers to make progress, regardless of past failures. As in [AAD93], it always allows servers to initiate actions (even when they are not part of a 13 connected majority). Thus, actions can eventually become totally ordered even if their initiator is never a member of a majority component. Both [Kei94] and [AAD93] use the flow control and multicast properties of group <p> As in <ref> [AAD93] </ref>, it always allows servers to initiate actions (even when they are not part of a 13 connected majority). Thus, actions can eventually become totally ordered even if their initiator is never a member of a majority component. Both [Kei94] and [AAD93] use the flow control and multicast properties of group communication, but both still need an end-to-end acknowledgments between servers on a per-action basis to allow global ordering of a message. This diminishes the performance advantages gained by using group communication. <p> Actions_queue - ordered list of all the red, yellow and green actions. White actions can be discarded and, therefore, in a practical implementation, are not in the 53 Actions_queue. For the sake of easy proofs this thesis does not extract actions from the Actions_queue. Refer to <ref> [AAD93] </ref> for details concerning message discarding. Ongoing_queue - list of actions generated at the local server. Such actions that were delivered and written to disk can be discarded. This queue protects the server from loosing its own actions due to crashes (power failures).
Reference: [ADKM92a] <author> Y. Amir, D. Dolev, S. Kramer and D. Malki. Transis: </author> <title> A Communication Subsystem for High Availability. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Fault Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: All the messages within a block are causally independent. The blocks are totally ordered. The messages in a block are delivered together, in some deterministic order. In this way, Newtop provides totally ordered delivery similar to the wave technique of Psync and the all-ack mechanism of Lansis <ref> [ADKM92a] </ref>, but with much less bookkeeping. Newtop causal delivery is less efficient than Psync or Trans because the causal information represented in causal blocks is not accurate and more pessimistic then needed (though more compact). Moreover, using causal blocks eliminates the ability to use faster algorithms (e.g. <p> Three multicast primitives are provided according to the extended virtual synchrony semantics: Causal multicast, Agreed multicast for total order delivery, and Safe multicast that provides even stronger guarantees. Two different reliable multicast protocols are implemented in Transis. Lansis <ref> [ADKM92a] </ref>, the earlier protocol, uses a direct acyclic graph (DAG) representing the causal relation on messages to provide reliable multicast. The DAG is derived from negative and positive acknowledgments piggybacked on messages.
Reference: [ADKM92b] <author> Y. Amir, D. Dolev, S. Kramer and D. Malki. </author> <title> Membership Algorithms for Multicast Communication Groups. </title> <booktitle> In Proceedings of the 6th International Workshop on Distributed Algorithms, </booktitle> <pages> pages 292-312, </pages> <booktitle> Lecture Notes in Computer Science 647, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Both computes the total order based on the DAG structure without exchange of additional messages. While TOTO is more efficient than the all-ack protocol, it cannot maintain extended virtual synchrony. The membership algorithm of Transis <ref> [ADKM92b] </ref> is a symmetric protocol that was the first to handle network partitions and remerges. Although operational in asynchronous environment, the algorithm ensures termination in a bounded time. The basic idea of this membership algorithm was adopted by Totem and Horus. <p> It was published in [MMA91]. The membership state machine and the algorithm for achieving extended virtual synchrony are original work of the author. The first part of the membership algorithm is based on the Transis membership algorithm <ref> [ADKM92b] </ref>. 34 5.2.1 Message Ordering The main principle of this algorithm is to achieve message ordering by circulating a token around a logical ring imposed on the processors (GC members) participating in the current configuration.
Reference: [ADMM94] <author> Y. Amir, D. Dolev, P. M. Melliar-Smith and L. E. Moser. </author> <title> Robust and Efficient Replication Using Group Communication. </title> <type> Technical Report CS94-20, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <year> 1994. </year>
Reference-contexts: Both [Kei94] and [AAD93] use the flow control and multicast properties of group communication, but both still need an end-to-end acknowledgments between servers on a per-action basis to allow global ordering of a message. This diminishes the performance advantages gained by using group communication. The replication server, described in <ref> [ADMM94] </ref> and detailed in Chapter 6 of this thesis, eliminates the need for an end-to-end acknowledgment at servers level without compromising consistency. End-to-end acknowledgment is still needed just after the membership of the connected server is changed.
Reference: [AMMAC93] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal and P. Ciarfella. </author> <title> Fast Message Ordering and Membership Using a Logical Token-Passing Ring. </title> <booktitle> In Proceedings of the IEEE 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 551-560, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The Ring protocol was developed while the author was visiting the Totem project. The Totem system [Aga94] provides reliable multicast and membership services across a collection of local-area networks. The Totem system is composed of a hierarchy of two protocols. The bottom layer is the Ring protocol <ref> [AMMAC93, AMMAC95] </ref> which provides reliable multicast and processor membership services within a broadcast domain. The upper layer is the Multiple-Rings protocol [Aga94] that provides reliable delivery and ordering across the entire network. Gateways are responsible to forward messages and configuration changes between broadcast domains. <p> Each gateway interconnects two broadcast domains, and participates in the Ring protocol for each of them. Each domain may contain several gateways connecting it to several other domains. Extended virtual synchrony was first implemented in the Totem system <ref> [AMMAC93] </ref>. 9 1.4.2 Group Communication Semantics It is highly important for a group communication service to maintain a well-defined service semantics. The application builder can rely on that semantics when designing correct applications using this group communication service. The semantics must specify both the assumptions taken and the guarantees provided. <p> Next, we present the Ring reliable multicast protocol, one of the two reliable multicast protocols implemented in Transis. Lastly, we present some performance measurements of Transis using the Ring protocol. The Ring reliable multicast protocol <ref> [AMMAC93, AMMAC95] </ref> was developed and implemented by the author while the author visited the Totem project. By presenting a relatively simple, yet highly efficient protocol that meets extended virtual synchrony, we show that extended virtual synchrony is indeed a practical model.
Reference: [AMMAC95] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal and P. Ciarfella. </author> <title> The Totem Single-Ring Ordering and Membership Protocol. </title> <journal> In ACM Transactions on Computer Systems, </journal> <note> to appear. </note>
Reference-contexts: The Ring protocol was developed while the author was visiting the Totem project. The Totem system [Aga94] provides reliable multicast and membership services across a collection of local-area networks. The Totem system is composed of a hierarchy of two protocols. The bottom layer is the Ring protocol <ref> [AMMAC93, AMMAC95] </ref> which provides reliable multicast and processor membership services within a broadcast domain. The upper layer is the Multiple-Rings protocol [Aga94] that provides reliable delivery and ordering across the entire network. Gateways are responsible to forward messages and configuration changes between broadcast domains. <p> Next, we present the Ring reliable multicast protocol, one of the two reliable multicast protocols implemented in Transis. Lastly, we present some performance measurements of Transis using the Ring protocol. The Ring reliable multicast protocol <ref> [AMMAC93, AMMAC95] </ref> was developed and implemented by the author while the author visited the Totem project. By presenting a relatively simple, yet highly efficient protocol that meets extended virtual synchrony, we show that extended virtual synchrony is indeed a practical model.
Reference: [BCJM+90] <author> K. Birman, R. Cooper, T. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck and M. Wood. </author> <title> The ISIS System Manual, </title> <institution> Department of Computer Science, Cornell University, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: We relate our work to three research areas: group communication protocols, group communication semantics, and replication protocols. 1.4.1 Group Communication Protocols The ISIS toolkit <ref> [BJ87, BCJM+90, BvR94] </ref> is one of the first general purpose group communication systems. ISIS provides a group communication session service, where processes can join process groups, multicast messages to groups, and receive messages sent to groups.
Reference: [BHG87] <author> P. A. Bernstein, V. Hadzilacos and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems, </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: If failures cascade, however, a majority can be connected and still remain blocked as is shown in [KD95]. A recent work by [KD95] presents an improved version of three-phase-commit that always allows a connected majority to proceed, regardless of past failures. In the available copy protocols <ref> [BHG87] </ref>, update operations are applied at all of the available servers, while a query accesses any server. Correct execution of these protocols require that the network never partition. Otherwise they block. Voting protocols are based on quorums. The basic quorum scheme uses majority voting [Tho79] or weighted majority voting [Gif79]. <p> For databases that comply with our service model (where the next database state is completely determined by the current state and the performed action), our safety criterion translates to one-copy serializability (see <ref> [BHG87] </ref>). One-copy serializability requires that concurrent execution of actions on a replicated database be equivalent to some serial execution of these actions on a non-replicated database. 16 Liveness.
Reference: [BJ87] <author> K. Birman and T. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems. </title> <booktitle> In Proceedings of the ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 123-138, </pages> <month> November </month> <year> 1987. </year> <month> 86 </month>
Reference-contexts: We relate our work to three research areas: group communication protocols, group communication semantics, and replication protocols. 1.4.1 Group Communication Protocols The ISIS toolkit <ref> [BJ87, BCJM+90, BvR94] </ref> is one of the first general purpose group communication systems. ISIS provides a group communication session service, where processes can join process groups, multicast messages to groups, and receive messages sent to groups. <p> The application builder can rely on that semantics when designing correct applications using this group communication service. The semantics must specify both the assumptions taken and the guarantees provided. The ISIS system defines and maintains the virtual synchrony semantics <ref> [BvR94, BJ87, SS93] </ref>. Virtual synchrony ensures that all the processes belonging to a process group perceive configuration changes as occurring at the same logical time. Moreover, all processes belonging to a configuration deliver the same set of message for that configuration.
Reference: [BvR94] <author> K. Birman and R. van Renesse. </author> <title> Reliable Distributed Computing with the ISIS Toolkit, </title> <publisher> Los Alamitos, </publisher> <address> CA., </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: Together with Danny Dolev, Dalia Malki and Shlomo Kramer, we initiated the Transis system, targeted at building tools for highly available distributed systems. We gave Transis its name to acknowledge the innovation of both the Trans protocol [MMA90] and the ISIS system <ref> [BvR94] </ref>. Transis was aimed at providing group communication services using non-reliable hardware multicast available in most local area networks, tolerating network partitions and merges as well as processor crashes and recoveries. <p> We relate our work to three research areas: group communication protocols, group communication semantics, and replication protocols. 1.4.1 Group Communication Protocols The ISIS toolkit <ref> [BJ87, BCJM+90, BvR94] </ref> is one of the first general purpose group communication systems. ISIS provides a group communication session service, where processes can join process groups, multicast messages to groups, and receive messages sent to groups. <p> The application builder can rely on that semantics when designing correct applications using this group communication service. The semantics must specify both the assumptions taken and the guarantees provided. The ISIS system defines and maintains the virtual synchrony semantics <ref> [BvR94, BJ87, SS93] </ref>. Virtual synchrony ensures that all the processes belonging to a process group perceive configuration changes as occurring at the same logical time. Moreover, all processes belonging to a configuration deliver the same set of message for that configuration. <p> This chapter is based on joint work with Louise Moser, Michael Melliar-Smith and Deb Agarwal [MAMA94] while the author visited the Totem project. Extended virtual synchrony extends the virtual synchrony model of the Isis system <ref> [BvR94] </ref>. Virtual synchrony in Isis is designed to support failures that respect the failstop failure model. In addition, extended virtual synchrony supports crash and recovery failures and network partitions and remerges. <p> Simpler formulations of causality are not appropriate <ref> [Lam78, BvR94] </ref> when a network may partition and remerge or when a process may crash and recover. The causal relationship between messages is expressed in Specification 5 as a precedes relation between the sending of two messages in the same configuration.
Reference: [CM84] <author> J. M. Chang and N. F. Maxemchuk. </author> <title> Reliable Broadcast Protocols, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: It was the first to utilize hardware multicast to implement process group communication. However, only non-reliable, best-effort, unordered delivery service is provided. Similar services for wide area networks are provided by the IP-multicast [Dee89] protocol. The Chang and Maxemchuk reliable broadcast and ordering protocol <ref> [CM84] </ref> uses a token-passing strategy, where the processor holding the token acknowledges messages. All the participating processors can broadcast messages at any time. The protocol also provides membership and token recovery algorithms. Typically, between two and three messages are required to order a message in an optimally loaded system.
Reference: [CS93] <author> D. R. Cheriton and D. Skeen. </author> <title> Understanding the Limitations of Causally and Totally Ordered Communication. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <pages> pages 44-57, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Prior group communication protocols have focused on totally ordering messages at the group communication level. That service, although useful for some applications, is not enough to guarantee complete consistency at the application level without additional end-toend acknowledgments, as has been noted by Cheriton and Skeen <ref> [CS93] </ref>. Extended virtual synchrony specifies the safe delivery service which provides additional level of knowledge within the group communication protocol.
Reference: [CS95] <author> F. Cristian and F. Schmuck. </author> <title> Agreeing on Processor Group Membership in Asynchronous Distributed Systems. </title> <type> Technical Report CSE95-428, </type> <institution> University of California at San Diego. </institution>
Reference-contexts: Moreover, 10 Newtop semantics does not specify the safe delivery property of extended virtual synchrony, whose importance is made clear at Chapter 6 of this thesis. A recent work by Cristian and Schmuck on group membership in an asynchronous environment <ref> [CS95] </ref> defines the timed synchronous system model. In contrast to the theoretical asynchronous model that has no notion of time, the timed synchronous model assumes that processors have local clocks that allow them to measure the passage of time. Local clocks may drift with some (small) bounded rate. <p> The model allows for message omission or performance (delay) faults, processor crashes and recoveries, and network partitions and remerges. The unique aspect of <ref> [CS95] </ref>, lays in bounding the local time up to which certain guarantees of the group membership service will hold at each of the processors. While the membership algorithms developed in Transis and Totem do maintain the requirements presented in [CS95], they are not required to do so by the extended virtual <p> The unique aspect of <ref> [CS95] </ref>, lays in bounding the local time up to which certain guarantees of the group membership service will hold at each of the processors. While the membership algorithms developed in Transis and Totem do maintain the requirements presented in [CS95], they are not required to do so by the extended virtual synchrony model (which leaves local time out of the model).
Reference: [CZ85] <author> D. Cheriton and V. Zwaenepoel. </author> <title> Distributed Process Groups in the V-Kernel, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(2) </volume> <pages> 77-107, </pages> <year> 1985. </year>
Reference-contexts: ISIS protocols are implemented using point-to-point communication. Although much better protocols exist today, and despite the lack of support for network partitions, ISIS is the most mature general purpose system available today. The ISIS system is commercially available from ISIS Distributed Systems LTD. The V system <ref> [CZ85] </ref> provides group communication services at the operating system level. It was the first to utilize hardware multicast to implement process group communication. However, only non-reliable, best-effort, unordered delivery service is provided. Similar services for wide area networks are provided by the IP-multicast [Dee89] protocol.
Reference: [Dee89] <author> S. E. Deering. </author> <title> Host Extensions for IP Multicasting. </title> <type> RFC 1112, </type> <institution> SRI Network Information Center, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: The V system [CZ85] provides group communication services at the operating system level. It was the first to utilize hardware multicast to implement process group communication. However, only non-reliable, best-effort, unordered delivery service is provided. Similar services for wide area networks are provided by the IP-multicast <ref> [Dee89] </ref> protocol. The Chang and Maxemchuk reliable broadcast and ordering protocol [CM84] uses a token-passing strategy, where the processor holding the token acknowledges messages. All the participating processors can broadcast messages at any time. The protocol also provides membership and token recovery algorithms.
Reference: [EGLT76] <author> K. Eswaran, J. Gray, R. Lorie and I. Taiger. </author> <title> The Notions of Consistency and Predicate Locks in a Database System. </title> <journal> Communication of the ACM, </journal> <month> 19(11), </month> <pages> pages 624-633, </pages> <year> 1976. </year>
Reference-contexts: In a one-copy database, the system should ensure serializability. i.e. interleaved execution of user transactions is equivalent to some serial execution of these transactions. Thus, a replicated database is considered correct if it is one-copy serializable ([BHG87]). i.e. it ensures serializability and one-copy equivalence. Two-phase-commit protocols <ref> [EGLT76] </ref> are the main tool for providing serializability in a distributed database system when transactions may span several sites. The same protocols can be used to maintain one-copy serializability in a replicated database.
Reference: [ESC85] <author> A. El Abbadi, D. Skeen and F. Cristian. </author> <title> An Efficient Fault-Tolerant Algorithm for Replicated Data Management. </title> <booktitle> In Proceedings of the 4th ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 215-229, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: The basic quorum scheme uses majority voting [Tho79] or weighted majority voting [Gif79]. Using voting protocols, each site is assigned a number of votes. The database can be updated in a partition only if that partition contains more than half of the votes. The Accessible Copies algorithms <ref> [ESC85, ET86] </ref> maintain an approximate view of the connected servers, called a virtual partition. A data item can be read/written within a virtual partition only if this virtual partition (which is an approximation of the current connected component) contains a majority of its read/write votes.
Reference: [ET86] <author> A. El Abbadi and S. Toueg. </author> <title> Availability in Partitioned Replicated Databases. </title> <booktitle> In Proceedings of the 5th ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 240-251, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: The basic quorum scheme uses majority voting [Tho79] or weighted majority voting [Gif79]. Using voting protocols, each site is assigned a number of votes. The database can be updated in a partition only if that partition contains more than half of the votes. The Accessible Copies algorithms <ref> [ESC85, ET86] </ref> maintain an approximate view of the connected servers, called a virtual partition. A data item can be read/written within a virtual partition only if this virtual partition (which is an approximation of the current connected component) contains a majority of its read/write votes.
Reference: [FLP85] <author> M. Fischer, N. Lynch and M. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> Journal of the ACM, </journal> <volume> 32, </volume> <pages> pages 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In fact, it is well known that reaching agreement in asynchronous environments with a possibility of even one failure is impossible <ref> [FLP85] </ref>. Instead, we rely on the extended virtual synchrony semantics for safe delivery, particularly when a safe message is delivered in a smaller transitional configuration. The lack of complete knowledge is evident when: A server is in the Prim state when a partition occurs. <p> Instead of having to decide on one of two possible values (0 or 1) as in the consensus problem <ref> [FLP85] </ref>, we have three possible values (0, ?, or 1) As Figure 6.3 presents: Case 1 . A safe message is delivered in the regular configuration. Case ? . A safe message is received by the group communication layer just before a partition occurs.
Reference: [Gif79] <author> D. Gifford. </author> <title> Weighted Voting for Replicated Data. </title> <booktitle> In Proceedings of the ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 150-159, </pages> <month> December </month> <year> 1979. </year>
Reference-contexts: Correct execution of these protocols require that the network never partition. Otherwise they block. Voting protocols are based on quorums. The basic quorum scheme uses majority voting [Tho79] or weighted majority voting <ref> [Gif79] </ref>. Using voting protocols, each site is assigned a number of votes. The database can be updated in a partition only if that partition contains more than half of the votes. The Accessible Copies algorithms [ESC85, ET86] maintain an approximate view of the connected servers, called a virtual partition. <p> Hence, we need a mechanism for selecting the primary component that can continue to order actions. Several techniques have been described in the literature <ref> [Gif79, JM90, Tho79] </ref>: Monarchy . The component that contains a designated server becomes the primary component. Majority . The component that contains a (weighted) majority of the servers becomes the primary component. Dynamic Linear Voting .
Reference: [Gol92] <author> R. A. Golding. </author> <title> Weak Consistency Group Communication and Membership. </title> <type> Ph.D. thesis, </type> <institution> Computer and Information Sciences Board, University of California at Santa Cruz, </institution> <year> 1992. </year>
Reference-contexts: Moreover, each needed action is multicast exactly once using our well performing group communication layer. Our concept might be compared with former point-to-point gossip and epidemic replication methods <ref> [LLSG92, Gol92] </ref>. In these methods, each server exchanges information from time to time with some connected server. Although these methods also meet the liveness criterion described in Chapter 2, for the above reasons, our method is more eager and disseminates the knowledge, in principle, immediately when communication resumes, using multicast.
Reference: [Gra78] <author> J. Gray. </author> <booktitle> Notes on Database Operating Systems. In Operating Systems: An Advanced Course, </booktitle> <pages> pages 393-481, </pages> <booktitle> Lecture Notes in Computer Science 60, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: Two-phase-commit protocols [EGLT76] are the main tool for providing serializability in a distributed database system when transactions may span several sites. The same protocols can be used to maintain one-copy serializability in a replicated database. In a typical protocol of this kind <ref> [Gra78] </ref>, one of the servers, the transaction coordinator, sends a request to prepare to commit to all of the participating servers. Each server replies either by a ready to commit or by an abort. If any of the servers votes to abort, all of them abort.
Reference: [JM87] <author> S. Jajodia and D. Mutchler. </author> <title> Dynamic Voting. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference of Management of Data. </booktitle> <pages> pages 227-238, </pages> <year> 1987. </year> <month> 87 </month>
Reference-contexts: Moreover, although view decisions are made only when the membership of connected servers changes, each update requires the full end-to-end acknowledgment from the sub-quorum. Dynamic linear voting <ref> [JM87, JM90] </ref> is a more advanced approach that defines the quorum in an adaptive way. When a network partition (or remerge) occurs, if a majority of the last installed quorum is connected, a new quorum is established and updates can be performed within this partition.
Reference: [JM90] <author> S. Jajodia and D. Mutchler. </author> <title> Dynamic Voting Algorithms for Maintaining the Consistency of Replicated Database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(2) </volume> <pages> 230-280, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Hence, we need to identify at most one component, the primary component, that may continue ordering actions. We employ dynamic linear voting <ref> [JM90] </ref> which is generally accepted as the best technique when certain restrictions hold. We define a new semantics, extended virtual synchrony, for the group communication service. <p> Moreover, although view decisions are made only when the membership of connected servers changes, each update requires the full end-to-end acknowledgment from the sub-quorum. Dynamic linear voting <ref> [JM87, JM90] </ref> is a more advanced approach that defines the quorum in an adaptive way. When a network partition (or remerge) occurs, if a majority of the last installed quorum is connected, a new quorum is established and updates can be performed within this partition. <p> If so, it shifts to the Construct state; otherwise, it shifts to the Non_prim state and forms a non-primary component. We use dynamic linear voting <ref> [JM90] </ref> to determine if the next primary component can be formed. This check is done locally at each server without the need for additional exchange of messages among the servers. Construct state . <p> Hence, we need a mechanism for selecting the primary component that can continue to order actions. Several techniques have been described in the literature <ref> [Gif79, JM90, Tho79] </ref>: Monarchy . The component that contains a designated server becomes the primary component. Majority . The component that contains a (weighted) majority of the servers becomes the primary component. Dynamic Linear Voting .
Reference: [KD95] <author> I. Keidar and D. Dolev. </author> <title> Increasing the Resilience of Atomic Commit, at No Additional Cost. </title> <booktitle> ACM Symposium on Principles of Database Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: In case of server crashes or network partitions, a three-phase-commit protocol allows a majority or a quorum to resolve the transaction. If failures cascade, however, a majority can be connected and still remain blocked as is shown in <ref> [KD95] </ref>. A recent work by [KD95] presents an improved version of three-phase-commit that always allows a connected majority to proceed, regardless of past failures. In the available copy protocols [BHG87], update operations are applied at all of the available servers, while a query accesses any server. <p> In case of server crashes or network partitions, a three-phase-commit protocol allows a majority or a quorum to resolve the transaction. If failures cascade, however, a majority can be connected and still remain blocked as is shown in <ref> [KD95] </ref>. A recent work by [KD95] presents an improved version of three-phase-commit that always allows a connected majority to proceed, regardless of past failures. In the available copy protocols [BHG87], update operations are applied at all of the available servers, while a query accesses any server.
Reference: [Kei94] <author> I. Keidar. </author> <title> A Highly Available Paradigm for Consistent Object Replication. </title> <type> Masters thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: The serious inefficiency of [AAD93] is the method of global total ordering, which uses Lamport clock and requires an eventual path from every server to order an action. A valuable work by Keidar <ref> [Kei94] </ref> uses the architecture of [AAD93] but replaces its global total ordering method. The novel ordering algorithm in [Kei94] always allows a connected majority of the servers to make progress, regardless of past failures. <p> A valuable work by Keidar <ref> [Kei94] </ref> uses the architecture of [AAD93] but replaces its global total ordering method. The novel ordering algorithm in [Kei94] always allows a connected majority of the servers to make progress, regardless of past failures. As in [AAD93], it always allows servers to initiate actions (even when they are not part of a 13 connected majority). <p> As in [AAD93], it always allows servers to initiate actions (even when they are not part of a 13 connected majority). Thus, actions can eventually become totally ordered even if their initiator is never a member of a majority component. Both <ref> [Kei94] </ref> and [AAD93] use the flow control and multicast properties of group communication, but both still need an end-to-end acknowledgments between servers on a per-action basis to allow global ordering of a message. This diminishes the performance advantages gained by using group communication. <p> End-to-end acknowledgment is still needed just after the membership of the connected server is changed. Thus, the performance gain is substantial, and is determined by the performance provided by the group communication. The price to pay (compared to <ref> [Kei94] </ref>) is that there exist rare scenarios in which multiple servers in the primary component crash or become disconnected within a window of time so short that the membership algorithm could not be completed anywhere. <p> End-to-end acknowledgment is still needed after the membership of the connected servers is changed. Thus, the performance gain is substantial compared to all other techniques that use end-to-end acknowledgment at the servers level for each action. However, this unique merit does not come free (compared to <ref> [Kei94] </ref>, for example). There exist two relatively rare scenarios where communication with every server of the last primary component is required before the next primary component can be formed: 1.
Reference: [KvRvST93] <author> F. M. Kaashoek, R. van Renesse, H. van Staveren and A. S. Tanenbaum. </author> <title> FLIP: an Internetwork Protocol for Supporting Distributed Systems. </title> <journal> In ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1993. </year>
Reference-contexts: Delta-4 is more real-time oriented than Transis, and it uses a special hardware for message ordering and failure detection. This seems to be a strong limitation on the projects usability. 7 The Amoeba distributed operating system uses the Flip high performance reliable multicast protocol <ref> [KvRvST93] </ref> to support high level services such as fault-tolerant directory service [KTV93]. In Amoeba, members of the group send point-to-point messages to a distinct member called the sequencer. The sequencer stamps each message with a sequence number and broadcasts it to the group.
Reference: [KTV93] <author> F. M. Kaashoek, A. S. Tanenbaum and K. Verstoep. </author> <title> Using Group Communication to Implement a Fault-Tolerant Directory Service. </title> <booktitle> In Proceedings of the IEEE 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 130-139, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This seems to be a strong limitation on the projects usability. 7 The Amoeba distributed operating system uses the Flip high performance reliable multicast protocol [KvRvST93] to support high level services such as fault-tolerant directory service <ref> [KTV93] </ref>. In Amoeba, members of the group send point-to-point messages to a distinct member called the sequencer. The sequencer stamps each message with a sequence number and broadcasts it to the group. A Member that detects a gap in the message sequences, sends a point-to-point retransmission request to the sequencer. <p> This method can be further optimized to apply the action as soon as all previous actions requested by the creating client are already applied (assuming that clients are not creating causal dependencies outside our system). Similar optimization appears in <ref> [KTV93] </ref>.
Reference: [Lam78] <author> L. Lamport. </author> <title> Time, Clocks, and The Ordering of Events in a Distributed System. </title> <journal> Comm. ACM, </journal> <volume> 21(7), </volume> <pages> pages 558-565. </pages> <year> 1978. </year>
Reference-contexts: ISIS provides a group communication session service, where processes can join process groups, multicast messages to groups, and receive messages sent to groups. Two multicast primitives are provided: The CBCAST service guarantees causally ordered message delivery (see <ref> [Lam78] </ref>) across overlapping groups. CBCAST is implemented using vector timestamps that are piggybacked on each message. The ABCAST service extends the causal order to a total order using a central group coordinator that emits ordering decisions. ISIS also provides membership notifications 6 when the group membership is changed. <p> Simpler formulations of causality are not appropriate <ref> [Lam78, BvR94] </ref> when a network may partition and remerge or when a process may crash and recover. The causal relationship between messages is expressed in Specification 5 as a precedes relation between the sending of two messages in the same configuration.
Reference: [LLSG90] <author> R. Ladin, B. Liskov, L. Shrira and S. Ghemawat. </author> <title> Lazy Replication: Exploiting the Semantics of Distributed Services. </title> <booktitle> In Proceedings of the 9th Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 43-58, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Update transactions are disseminated and are applied to the database when they are totally ordered. The replication protocol presented in Chapter 6 of this thesis complies with the ORDUP model. Optimizations for COMMU and RITU updates models are presented in Chapter 7 of this thesis. Lazy replication <ref> [LLSG90, LLSG92] </ref> is a replication method that overcomes network partitions and remerges. It relaxes the constraints on operation ordering by exploiting the semantics of the services operations. The client application can specify exactly what causal relations should be enforced between operations. <p> A total order on the actions can be placed using a similar method to [AAD93]. The anti-entropy technique used to propagate actions is far more efficient compared to the gossip technique of <ref> [LLSG90] </ref>. In prior research [AAD93], we described an architecture that uses the Transis group communication layer to achieve consistent replication. The architecture handles network partitions and remerges, as well as server crashes and recoveries.
Reference: [LLSG92] <author> R. Ladin, B. Liskov, L. Shrira and S. Ghemawat. </author> <title> Providing Availability Using Lazy Replication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4), </volume> <pages> pages 360-391. </pages>
Reference-contexts: Update transactions are disseminated and are applied to the database when they are totally ordered. The replication protocol presented in Chapter 6 of this thesis complies with the ORDUP model. Optimizations for COMMU and RITU updates models are presented in Chapter 7 of this thesis. Lazy replication <ref> [LLSG90, LLSG92] </ref> is a replication method that overcomes network partitions and remerges. It relaxes the constraints on operation ordering by exploiting the semantics of the services operations. The client application can specify exactly what causal relations should be enforced between operations. <p> Moreover, each needed action is multicast exactly once using our well performing group communication layer. Our concept might be compared with former point-to-point gossip and epidemic replication methods <ref> [LLSG92, Gol92] </ref>. In these methods, each server exchanges information from time to time with some connected server. Although these methods also meet the liveness criterion described in Chapter 2, for the above reasons, our method is more eager and disseminates the knowledge, in principle, immediately when communication resumes, using multicast.
Reference: [Mac94] <author> R. A. Macedo. </author> <title> Fault-Tolerant Group Communication Protocols for Asynchronous Systems. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Newcastle Upon Tyne, </institution> <year> 1994. </year>
Reference-contexts: Based on the causal order provided by Psync, a membership algorithm is constructed [MPS91]. Using this algorithm, processors reach eventual agreement on membership changes. The algorithm handles processor faults and allows a processor to join a preexisting group asymmetrically. Network partitions and remerges are not supported. The Newtop protocol <ref> [MES93, Mac94] </ref> replaces the context graph of Psync by the notion of causal blocks. Each causal block defines a set of messages. All the messages within a block are causally independent. The blocks are totally ordered. The messages in a block are delivered together, in some deterministic order. <p> Nevertheless, the virtual synchrony model emphasized the importance of a rigorous semantics for group communication services. To overcome these drawbacks, we extended the definition of virtual synchrony. This extension, extended virtual synchrony [MAMA94] is detailed in Chapter 4. Valuable work done at the Newtop project <ref> [Mac94] </ref>, separately from the work done in Transis and Totem, defines another group communication semantics which extends virtual synchrony to support partitions. Newtop semantics specifies several properties regarding the delivery of messages and configuration changes.
Reference: [Mal94] <author> D. Malki. </author> <title> Multicast Communication for High Availability. </title> <type> Ph.D. thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: Although operational in asynchronous environment, the algorithm ensures termination in a bounded time. The basic idea of this membership algorithm was adopted by Totem and Horus. Excellent reading about Transis and its membership algorithm is found in <ref> [Mal94] </ref>. The second reliable multicast protocol in Transis is the Ring protocol, detailed in Section 5.2. The Ring protocol was developed while the author was visiting the Totem project. The Totem system [Aga94] provides reliable multicast and membership services across a collection of local-area networks.
Reference: [MAMA94] <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith and D. A. Agarwal. </author> <title> Extended Virtual Synchrony. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 56-65, </pages> <month> June </month> <year> 1994. </year> <note> IEEE. A detailed version appears as ECE Technical Report #93-22, </note> <institution> University of California, Santa Barbara, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Nevertheless, the virtual synchrony model emphasized the importance of a rigorous semantics for group communication services. To overcome these drawbacks, we extended the definition of virtual synchrony. This extension, extended virtual synchrony <ref> [MAMA94] </ref> is detailed in Chapter 4. Valuable work done at the Newtop project [Mac94], separately from the work done in Transis and Totem, defines another group communication semantics which extends virtual synchrony to support partitions. Newtop semantics specifies several properties regarding the delivery of messages and configuration changes. <p> A group communication layer that maintains extended virtual synchrony guarantees to comply with this semantics subject to the failure model described in Chapter 2. This chapter is based on joint work with Louise Moser, Michael Melliar-Smith and Deb Agarwal <ref> [MAMA94] </ref> while the author visited the Totem project. Extended virtual synchrony extends the virtual synchrony model of the Isis system [BvR94]. Virtual synchrony in Isis is designed to support failures that respect the failstop failure model.
Reference: [MES93] <author> R. A. Macedo, P. Ezhilchlvan, S. K. Shrivastava. Newtop: </author> <title> a Total Order Multicast Protocol Using Causal Blocks. BROADCAST project deliverable report, Volume I, </title> <note> October, 1993; available from Dept. </note> <institution> of Computer Science, University of Newcastle upon Tyne, UK. </institution> <month> 88 </month>
Reference-contexts: Based on the causal order provided by Psync, a membership algorithm is constructed [MPS91]. Using this algorithm, processors reach eventual agreement on membership changes. The algorithm handles processor faults and allows a processor to join a preexisting group asymmetrically. Network partitions and remerges are not supported. The Newtop protocol <ref> [MES93, Mac94] </ref> replaces the context graph of Psync by the notion of causal blocks. Each causal block defines a set of messages. All the messages within a block are causally independent. The blocks are totally ordered. The messages in a block are delivered together, in some deterministic order.
Reference: [MM93] <author> P. M. Melliar-Smith and L. E. Moser. </author> <title> Trans: A Reliable Broadcast Protocol. </title> <journal> IEE Transactions on Communications, </journal> <volume> 140(6), </volume> <pages> pages 481-493, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: A Member that detects a gap in the message sequences, sends a point-to-point retransmission request to the sequencer. The Amoeba system is resilient to any predefined number of failed processors, but its performance degrades as the number of allowed failures is increased. The Trans and Total protocols <ref> [MMA90, MMA93, MM93] </ref> provide reliable ordered broadcast delivery in an asynchronous environment. The Trans protocol uses positive and negative acknowledgments piggybacked onto broadcast messages and exploits the transitivity of positive acknowledgments to reduce the number of acknowledgments required.
Reference: [MMA90] <author> P. M. Melliar-Smith, L. E. Moser and V. Agrawala. </author> <title> Broadcast Protocols for Distributed Systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: My Ph.D. research was motivated by this belief. Together with Danny Dolev, Dalia Malki and Shlomo Kramer, we initiated the Transis system, targeted at building tools for highly available distributed systems. We gave Transis its name to acknowledge the innovation of both the Trans protocol <ref> [MMA90] </ref> and the ISIS system [BvR94]. Transis was aimed at providing group communication services using non-reliable hardware multicast available in most local area networks, tolerating network partitions and merges as well as processor crashes and recoveries. <p> A Member that detects a gap in the message sequences, sends a point-to-point retransmission request to the sequencer. The Amoeba system is resilient to any predefined number of failed processors, but its performance degrades as the number of allowed failures is increased. The Trans and Total protocols <ref> [MMA90, MMA93, MM93] </ref> provide reliable ordered broadcast delivery in an asynchronous environment. The Trans protocol uses positive and negative acknowledgments piggybacked onto broadcast messages and exploits the transitivity of positive acknowledgments to reduce the number of acknowledgments required.
Reference: [MMA91] <author> P. M. Melliar-Smith, L. E. Moser and D. A. Agarwal. </author> <title> Ring-based Ordering Protocols. </title> <booktitle> In Proceedings of the International Conference on Information Engineering, </booktitle> <pages> pages 882-891, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: It guarantees delivery of messages sent in the old configuration so that extended virtual synchrony is preserved. The basic idea behind the ordering algorithm is not original work of the author. It was published in <ref> [MMA91] </ref>. The membership state machine and the algorithm for achieving extended virtual synchrony are original work of the author.
Reference: [MMA93] <author> L. E. Moser, P. M. Melliar-Smith and V. Agrawala. </author> <title> Asynchronous Fault-Tolerant Total Ordering Algorithms. </title> <journal> In SIAM Journal of Computing, </journal> <volume> 22(4), </volume> <pages> pages 727-750, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: A Member that detects a gap in the message sequences, sends a point-to-point retransmission request to the sequencer. The Amoeba system is resilient to any predefined number of failed processors, but its performance degrades as the number of allowed failures is increased. The Trans and Total protocols <ref> [MMA90, MMA93, MM93] </ref> provide reliable ordered broadcast delivery in an asynchronous environment. The Trans protocol uses positive and negative acknowledgments piggybacked onto broadcast messages and exploits the transitivity of positive acknowledgments to reduce the number of acknowledgments required.
Reference: [MMA94] <author> L. E. Moser, P. M. Melliar-Smith and V. Agarwala. </author> <title> Processor Membership in Asynchronous Distributed Systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 5(5), </journal> <pages> pages 459-473, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The Trans and Total protocols maintain causality and ensure that operational processors continue to order messages even though other processors have failed, provided that a resiliency constraint is met. A membership protocol <ref> [MMA94] </ref> is implemented on top of Total. If a processor suspects another processor, it sends a fault message for the suspected processor. When that message is ordered, the membership is changed to exclude this processor.
Reference: [MPS91] <author> S. Mishra, L. L. Peterson and R. D. Schlichting. </author> <title> A Membership Protocol Based on Partial Order. </title> <booktitle> In Proceedings of the International Working Conference on Dependable Computing for Critical Applications, </booktitle> <pages> pages 309-331, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: This order can be extended into a total order by determining complete waves of causally concurrent messages and by ordering the messages of a wave using some deterministic order. Based on the causal order provided by Psync, a membership algorithm is constructed <ref> [MPS91] </ref>. Using this algorithm, processors reach eventual agreement on membership changes. The algorithm handles processor faults and allows a processor to join a preexisting group asymmetrically. Network partitions and remerges are not supported. The Newtop protocol [MES93, Mac94] replaces the context graph of Psync by the notion of causal blocks.
Reference: [PBS89] <author> L. L. Peterson, N. C. Buchholz and R. D. Schlichting. </author> <title> Preserving and Using Context Information in Interprocess Communication. </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> 7(3), </volume> <pages> pages 217-246, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: When that message is ordered, the membership is changed to exclude this processor. The limitation of that architecture is that if Total cannot order the membership messages (e.g. because the resiliency constraint is not met), the system is blocked. The Psync protocol <ref> [PBS89] </ref> builds a context graph that represents the causal partial order on messages. This order can be extended into a total order by determining complete waves of causally concurrent messages and by ordering the messages of a wave using some deterministic order.
Reference: [Pow91] <author> D. Powell, </author> <title> editor. Delta-4 - A Generic Architecture for Dependable Distributed Computing. Esprit Research Reports, </title> <publisher> Springer Verlag, </publisher> <month> November </month> <year> 1991. </year>
Reference-contexts: TPM also provides a dynamic membership and token regeneration algorithm. If the network partitions, the component with the majority of the members (if such exists) is allowed to continue. The Delta-4 <ref> [Pow91] </ref> system provides tools for building distributed, fault-tolerant real-time systems. As part of Delta-4, a reliable multicast protocol, xAMp [RV92] and a membership protocol [RVR93] are implemented. The protocols utilize the non-reliable multicast or broadcast primitive of local area networks.
Reference: [PL88] <author> J. F. Paris and D. D. E. </author> <title> Long. Efficient Dynamic Voting Algorithms. </title> <booktitle> In Proceedings of the 4th International Conference on Data Engineering, </booktitle> <pages> pages 268-275, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: When a network partition (or remerge) occurs, if a majority of the last installed quorum is connected, a new quorum is established and updates can be performed within this partition. Dynamic linear voting generally outperforms the static schemes as shown by <ref> [PL88] </ref>. Epsilon serializability [PL91] applies an extension to the serializability correctness criterion. Epsilon serializability introduces a tradeoff between consistency and availability. It allows inconsistent data to be seen, but requires that data will eventually converge to a consistent (one-copy serializability) state. The user can control the degree of inconsistency. <p> Dynamic linear voting is generally accepted as the best technique, when certain reasonable conditions hold <ref> [PL88] </ref>. The choice of the weights and adapting them over time is beyond the scope of this thesis. We employ dynamic linear voting. Any system that employs (weighted) dynamic linear voting can use (weighted) majority, since majority is a special case of dynamic linear voting.
Reference: [PL91] <author> C. Pu and A. Leff. </author> <title> Replica Control in Distributed Systems: An Asynchronous Approach. </title> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: When a network partition (or remerge) occurs, if a majority of the last installed quorum is connected, a new quorum is established and updates can be performed within this partition. Dynamic linear voting generally outperforms the static schemes as shown by [PL88]. Epsilon serializability <ref> [PL91] </ref> applies an extension to the serializability correctness criterion. Epsilon serializability introduces a tradeoff between consistency and availability. It allows inconsistent data to be seen, but requires that data will eventually converge to a consistent (one-copy serializability) state. The user can control the degree of inconsistency. <p> It allows inconsistent data to be seen, but requires that data will eventually converge to a consistent (one-copy serializability) state. The user can control the degree of inconsistency. In the limit, strict one-copy serializability can be enforced. Several replica control protocols are suggested in <ref> [PL91] </ref>. One of these protocols limits the transactional model to commutative operations (COMMU) and another limits it to read-independent 12 timestamped updates (RITU). In contrast, the ordered updates (ORDUP) protocol does not limit the transactional model. ORDUP executes transactions asynchronously, but in the same order at all of the replicas. <p> However, after the network is repaired and the partitioned components merge, the database states converge. The timestamp and the commutative update semantics are simplified versions of the Read-Independent Timestamped Updates (RITU) and Commutative Updates (COMMU) semantics defined in the seminal work of <ref> [PL91] </ref>. 7.5 Discussion In our opinion, whenever an application can be restricted to the timestamps or commutative updates, the above solution should be followed.
Reference: [RM89] <author> B. Rajagopalan and P. K. McKinley. </author> <title> A Token-Based Protocol for Reliable Ordered Multicast Communication. </title> <booktitle> In Proceedings of the 8th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 84-93, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: All the participating processors can broadcast messages at any time. The protocol also provides membership and token recovery algorithms. Typically, between two and three messages are required to order a message in an optimally loaded system. The protocol does not provide a mechanism for flow control. The TPM protocol <ref> [RM89] </ref> uses a token on a logical ring of processors for broadcasting and retransmission of messages. The token is circulated along a known token list in order to serialize message transmission. The token contains the next sequence number to be stamped on new messages.
Reference: [RV92] <author> L. Rodrigues and P. Verissimo. xAMp: </author> <title> a Multi-primitive Group Communication Service. </title> <booktitle> In Proceedings of the 11th Symposium on Reliable Distributed Systems, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: If the network partitions, the component with the majority of the members (if such exists) is allowed to continue. The Delta-4 [Pow91] system provides tools for building distributed, fault-tolerant real-time systems. As part of Delta-4, a reliable multicast protocol, xAMp <ref> [RV92] </ref> and a membership protocol [RVR93] are implemented. The protocols utilize the non-reliable multicast or broadcast primitive of local area networks. The Delta-4 protocols assume fail-stop behavior and as such, do not support network partitions and remerges.
Reference: [RVR93] <author> L. Rodrigues, P. Verissimo and J. Rufino. </author> <title> A Low-level Processor Group Membership Protocol for LANs. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 541-550, </pages> <month> May </month> <year> 1993. </year> <month> 89 </month>
Reference-contexts: If the network partitions, the component with the majority of the members (if such exists) is allowed to continue. The Delta-4 [Pow91] system provides tools for building distributed, fault-tolerant real-time systems. As part of Delta-4, a reliable multicast protocol, xAMp [RV92] and a membership protocol <ref> [RVR93] </ref> are implemented. The protocols utilize the non-reliable multicast or broadcast primitive of local area networks. The Delta-4 protocols assume fail-stop behavior and as such, do not support network partitions and remerges.
Reference: [Ske82] <author> D. Skeen. </author> <title> A Quorum-Based Commit Protocol. </title> <booktitle> In Berkeley Workshop on Distributed Data Management and Computer Network, </booktitle> <volume> number 6, </volume> <pages> pages 69-80, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: Even though blocking preserves consistency, it is highly undesirable because the locks cannot be relinquished, rendering the data inaccessible by other requests at operational servers. Clearly, a protocol of this kind imposes a substantial additional communication cost on each transaction. Three-phase-commit protocols <ref> [Ske82] </ref> try to overcome some of the availability problems of two-phase-commit protocols, paying the price of an additional communication round, and therefore, of additional latency. In case of server crashes or network partitions, a three-phase-commit protocol allows a majority or a quorum to resolve the transaction.
Reference: [SS93] <author> Andre Schiper and Alain Sandoz. </author> <title> Uniform Reliable Multicast in a Virtually Synchronous Environment. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 561-568, </pages> <month> May </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: The application builder can rely on that semantics when designing correct applications using this group communication service. The semantics must specify both the assumptions taken and the guarantees provided. The ISIS system defines and maintains the virtual synchrony semantics <ref> [BvR94, BJ87, SS93] </ref>. Virtual synchrony ensures that all the processes belonging to a process group perceive configuration changes as occurring at the same logical time. Moreover, all processes belonging to a configuration deliver the same set of message for that configuration.
Reference: [Tho79] <author> R. Thomas. </author> <title> A Majority Consensus Approach to Concurrency Control for Multiple Copy Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> 4(2) pages 180-209, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: In the available copy protocols [BHG87], update operations are applied at all of the available servers, while a query accesses any server. Correct execution of these protocols require that the network never partition. Otherwise they block. Voting protocols are based on quorums. The basic quorum scheme uses majority voting <ref> [Tho79] </ref> or weighted majority voting [Gif79]. Using voting protocols, each site is assigned a number of votes. The database can be updated in a partition only if that partition contains more than half of the votes. <p> Hence, we need a mechanism for selecting the primary component that can continue to order actions. Several techniques have been described in the literature <ref> [Gif79, JM90, Tho79] </ref>: Monarchy . The component that contains a designated server becomes the primary component. Majority . The component that contains a (weighted) majority of the servers becomes the primary component. Dynamic Linear Voting .
Reference: [vRBFHK95] <author> R. van Renesse, K. Birman, R. Friedman, M. Hayden and D. Karr. </author> <title> A Framework for Protocol Composition in Horus. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: Newtop implements a membership service that handles processor crashes and network partitions. However, process recoveries and network remerges are not addressed. The most interesting point of Newtop is its service semantics presented in the next section. The Horus project <ref> [vRBFHK95] </ref> implements group communication services, providing unreliable or reliable FIFO, causal, or total multicast services. Horus is extensively layered 8 and highly configurable, allowing applications to only pay for the overhead of services they use. <p> By presenting a relatively simple, yet highly efficient protocol that meets extended virtual synchrony, we show that extended virtual synchrony is indeed a practical model. Other protocols that meet this model exist in the Horus environment <ref> [vRBFHK95] </ref>. In this chapter the term processor is used to refer to an instance of the group communication layer running on a processor. 5.1 The Transis System Transis is a group communication subsystem currently developed at The Hebrew University of Jerusalem.
References-found: 53

