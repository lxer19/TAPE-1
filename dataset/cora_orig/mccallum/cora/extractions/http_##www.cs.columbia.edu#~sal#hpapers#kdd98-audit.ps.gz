URL: http://www.cs.columbia.edu/~sal/hpapers/kdd98-audit.ps.gz
Refering-URL: http://www.cs.columbia.edu:80/~sal/recent-papers.html
Root-URL: 
Email: fwenke,sal,mokg@cs.columbia.edu  
Title: Mining Audit Data to Build Intrusion Detection Models  
Author: Wenke Lee Salvatore J. Stolfo Kui W. Mok 
Keyword: Intrusion detection, audit data, classification, association rules, frequent episodes.  
Note: Contact Author: Wenke Lee, wenke@cs.columbia.edu, (212) 939-7078. This research is supported in part by grants from DARPA (F30602-96-1-0311) and NSF (IRI-96-32225 and CDA-96-25374).  
Address: 500 West 120th Street, New York, NY 10027  
Affiliation: Computer Science Department Columbia University  
Abstract: In this paper we discuss a data mining framework for constructing intrusion detection models. The key ideas are to mine system audit data for consistent and useful patterns of program and user behavior, and use the set of relevant system features presented in the patterns to compute (inductively learned) classifiers that can recognize anomalies and known intrusions. Our past experiments showed that classifiers can be used to detect intrusions, provided that sufficient audit data is available for training and the right set of system features are selected. We propose to use the association rules and frequent episodes computed from audit data as the basis for guiding the audit data gathering and feature selection processes. We modify these two basic algorithms to use axis attribute(s) as a form of item constraints to compute only the relevant (useful) patterns, and an iterative level-wise approximate mining procedure to uncover the low frequency (but important) patterns. We report our experiments in using these algorithms on real-world audit data. 
Abstract-found: 1
Intro-found: 1
Reference: [AIS93] <author> R. Agrawal, T. Imielinski, and A. Swami. </author> <title> Mining association rules between sets of items in large databases. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 207 216, </pages> <year> 1993. </year>
Reference-contexts: We are developing a framework, first described in [LS98], of applying data mining techniques to build intrusion detection models. This framework consists of classification (and meta-classification [CS93]), association rule <ref> [AIS93] </ref> and frequent episode [MTV95] programs, as well as a support environment that enables system builders to interactively and iteratively drive the process of constructing and evaluating detection models. The end product is concise and intuitive classification rules that can detect intrusions. <p> The idea is to first compute the association rules and frequent episodes from audit data, which (intuitively) capture the intra- and (temporal) inter-audit record patterns. These patterns are then utilized, with user participation, to guide the data gathering and feature selection processes. 3.1 The Basic Algorithms From <ref> [AIS93] </ref>, let A be a set of attributes, and I be a set of values on A, called items. Any 2 subset of I is called an itemset. The number of items in an itemset is called its length. Let D be a database with n attributes (columns).
Reference: [AS94] <author> R. Agrawal and R. Srikant. </author> <title> Fast algorithms for mining association rules. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference-contexts: We implemented the association rules algorithm following the ideas of Apriori <ref> [AS94] </ref>. Since we look for correlation among values of different attributes, and the (pre-processed) audit data usually has multiple attributes, each with a large number of possible values, we do not convert the data into a binary database. In our implementation we trade memory for speed.
Reference: [Bel89] <author> S. M. Bellovin. </author> <title> Security problems in the tcp/ip protocol suite. </title> <journal> Computer Communication Review, </journal> <volume> 19(2):3248, </volume> <month> April </month> <year> 1989. </year>
Reference-contexts: Intrusion prevention techniques, such as user authentication (e.g. using passwords or biometrics), are not sufficient because as systems become ever more complex, there are always system design flaws and programming errors that can lead to security holes <ref> [Bel89, GM84] </ref>. Intrusion detection is therefore needed as another wall to protect computer systems. There are mainly two types of intrusion detection techniques. Misuse detection, for example STAT [IKP95], uses patterns of well-known attacks or weak spots of the system to match and identify intrusions.
Reference: [Coh95] <author> W. W. Cohen. </author> <title> Fast effective rule induction. </title> <booktitle> In Machine Learning: the 12th International Conference, </booktitle> <address> Lake Taho, CA, 1995. </address> <publisher> Mor-gan Kaufmann. </publisher>
Reference-contexts: The results on the sendmail system call data showed that we needed to use as much as 80% of the (exhaustively gathered) normal data to learn a classifier (RIPPER <ref> [Coh95] </ref> rules) that can 1 clearly identify normal sendmail executions and intrusions. The results on the tcpdump [JLM89] of network traffic data showed that by the temporal nature of network activities, when added with temporal statistical features, the classification model had a very significant improvement in identifying intrusions.
Reference: [CS93] <author> P. K. Chan and S. J. Stolfo. </author> <title> Toward parallel and distributed learning by meta-learning. </title> <booktitle> In AAAI Workshop in Knowledge Discovery in Databases, </booktitle> <pages> pages 227240, </pages> <year> 1993. </year>
Reference-contexts: We are developing a framework, first described in [LS98], of applying data mining techniques to build intrusion detection models. This framework consists of classification (and meta-classification <ref> [CS93] </ref>), association rule [AIS93] and frequent episode [MTV95] programs, as well as a support environment that enables system builders to interactively and iteratively drive the process of constructing and evaluating detection models. The end product is concise and intuitive classification rules that can detect intrusions.
Reference: [FP96] <author> T. Fawcett and F. Provost. </author> <title> Combining data mining and machine learning for effective user profiling. </title> <booktitle> In Proceedings of the 2nd International Conference on Knowledge Discovery and Data Mining, </booktitle> <pages> pages 813, </pages> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year> <note> AAAI Press. </note>
Reference-contexts: Traditional feature selection techniques, as discussed in the machine learning literature, cannot be directly applied here since they don't consider (across record boundary) sequential correlation of features. In <ref> [FP96] </ref> Fawcett and Provost presented some very interesting ideas on automatic selection of features for a cellular phone fraud detector.
Reference: [GM84] <author> F. T. Grampp and R. H. Morris. </author> <title> Unix system security. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8):16491672, </volume> <month> October </month> <year> 1984. </year>
Reference-contexts: Intrusion prevention techniques, such as user authentication (e.g. using passwords or biometrics), are not sufficient because as systems become ever more complex, there are always system design flaws and programming errors that can lead to security holes <ref> [Bel89, GM84] </ref>. Intrusion detection is therefore needed as another wall to protect computer systems. There are mainly two types of intrusion detection techniques. Misuse detection, for example STAT [IKP95], uses patterns of well-known attacks or weak spots of the system to match and identify intrusions.
Reference: [HF95] <author> J. Han and Y. Fu. </author> <title> Discovery of multiple-level association rules from large databases. </title> <booktitle> In Proceedings of the 21th VLDB Conference, </booktitle> <address> Zurich, Switzerland, </address> <year> 1995. </year>
Reference-contexts: For example, although used infrequently, auth normally co-occurs with other services such as smtp and login. It is therefore imperative to include these high frequency services into the episode rules about auth. Our approach here is different from the algorithms in <ref> [HF95] </ref> since we do not have (and can not assume) multiple concept levels, rather, we deal with multiple frequency levels of a single concept, e.g., the network service. 5 4 Using the Mined Patterns In this section we report our experience in mining the audit data and using the discovered patterns
Reference: [IKP95] <author> K. Ilgun, R. A. Kemmerer, and P. A. Porras. </author> <title> State transition analysis: A rule-based intrusion detection approach. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(3):181199, </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: Intrusion detection is therefore needed as another wall to protect computer systems. There are mainly two types of intrusion detection techniques. Misuse detection, for example STAT <ref> [IKP95] </ref>, uses patterns of well-known attacks or weak spots of the system to match and identify intrusions. Anomaly detection, for example IDES [LTG + 92], tries to determine whether deviation from the established normal usage patterns can be flagged as intrusions.
Reference: [JLM89] <author> V. Jacobson, C. Leres, and S. Mc-Canne. tcpdump. </author> <note> available via anonymous ftp to ftp.ee.lbl.gov, </note> <month> June </month> <year> 1989. </year>
Reference-contexts: The results on the sendmail system call data showed that we needed to use as much as 80% of the (exhaustively gathered) normal data to learn a classifier (RIPPER [Coh95] rules) that can 1 clearly identify normal sendmail executions and intrusions. The results on the tcpdump <ref> [JLM89] </ref> of network traffic data showed that by the temporal nature of network activities, when added with temporal statistical features, the classification model had a very significant improvement in identifying intrusions. These experiments revealed that we need to solve some very challenging problems for the classification models to be effective.
Reference: [KMR + 94] <author> M. Klemettinen, H. Mannila, P. Ronkainen, H. Toivonen, and A. I. Verkamo. </author> <title> Finding interesting rules from large sets of discovered association rules. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management (CIKM'94), </booktitle> <pages> pages 401407, </pages> <address> Gainthersburg, MD, </address> <year> 1994. </year>
Reference-contexts: In <ref> [KMR + 94] </ref> rule templates specifying the allowable attribute values are used to post-process the discovered rules. In [SVA97] boolean expressions 3 over the attribute values are used as item con-straints during rule discovery. A drawback of these approaches is that one has to know what rules/patterns are interesting.
Reference: [LS98] <author> W. Lee and S. J. Stolfo. </author> <title> Data mining approaches for intrusion detection. </title> <booktitle> In Proceedings of the 7th USENIX Security Symposium, </booktitle> <address> San Antonio, TX, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: Anomaly detection is about establishing the normal usage patterns from the audit data, whereas misuse detection is about encoding and matching intrusion patterns using the audit data. We are developing a framework, first described in <ref> [LS98] </ref>, of applying data mining techniques to build intrusion detection models. This framework consists of classification (and meta-classification [CS93]), association rule [AIS93] and frequent episode [MTV95] programs, as well as a support environment that enables system builders to interactively and iteratively drive the process of constructing and evaluating detection models. <p> Section 4 reports our experiments in using the patterns both as a guideline for gathering sufficient training (audit) data, and as the basis for feature selection. Section 5 outlines open problems and our future research plans. 2 The Challenges In <ref> [LS98] </ref> we described in detail our experiments in building classification models to detect intrusions to sendmail and TCP/IP networks. <p> Our experiments showed that when using none of the temporal statistical features, or using just the count features or average features, the classification performance was much worse. In <ref> [LS98] </ref> we reported that as we mined frequent episodes using different window sizes, the number of serial episodes stabilized after the time window reached 30 seconds. We showed that when using 30 seconds as the time interval to calculate the temporal statistical features, we achieved the best classification performance.
Reference: [LSW97] <author> B. Lent, A. Swami, and J. Widom. </author> <title> Clustering association rules. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Data Engineering, </booktitle> <address> Birmingham, UK, </address> <year> 1997. </year>
Reference-contexts: The concept of combining here is similar to clustering in <ref> [LSW97] </ref>. To simplify our discussion, consider combining the LHSs and assume that the LHS of r 1 has just one itemset, (ax 1 = vx 1 ; a 1 = v 1 ). Here ax 1 is an axis attribute.
Reference: [LTG + 92] <author> T. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, P. Neumann, H. Javitz, A. Valdes, and T. Garvey. </author> <title> A real-time intrusion detection 10 expert system (IDES) final tech-nical report. </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, California, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: Intrusion detection is therefore needed as another wall to protect computer systems. There are mainly two types of intrusion detection techniques. Misuse detection, for example STAT [IKP95], uses patterns of well-known attacks or weak spots of the system to match and identify intrusions. Anomaly detection, for example IDES <ref> [LTG + 92] </ref>, tries to determine whether deviation from the established normal usage patterns can be flagged as intrusions. Currently many intrusion detection systems are constructed by manual and ad hoc means.
Reference: [MT96] <author> H. Mannila and H. Toivonen. </author> <title> Discovering generalized episodes using minimal occurences. </title> <booktitle> In Proceedings of the Second International Conference on Knowledge Discovery in Databases and Data Mining, </booktitle> <address> Portland, Oregon, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Since most (pre-processed) audit data files are small enough, this implementation works well in our application domain. The problem of finding frequent episodes based on minimal occurrences was introduced in <ref> [MT96] </ref>. Briefly, given an event database D where each transaction is associated with a timestamp, an interval [t 1 ; t 2 ] is the sequence of transactions that starts from timestamp t 1 and ends at t 2 . <p> Here the width of each of the occurrences must be less than window. A serial episode rule has the additional constraint that X, Y and Z must occur in transactions in partial time order, i.e., Z follows Y and Y follows X. The description here differs from <ref> [MT96] </ref> in that we don't consider a separate window constraint on the LHS (left hand side) of the rule. Our implementation of the frequent episodes algorithm utilized the data structures and library functions of the association rules algorithm.
Reference: [MTV95] <author> H. Mannila, H. Toivonen, and A. I. Verkamo. </author> <title> Discovering frequent episodes in sequences. </title> <booktitle> In Proceedings of the First International Conference on Knowledge Discovery in Databases and Data Mining, </booktitle> <address> Mon-treal, Canada, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: We are developing a framework, first described in [LS98], of applying data mining techniques to build intrusion detection models. This framework consists of classification (and meta-classification [CS93]), association rule [AIS93] and frequent episode <ref> [MTV95] </ref> programs, as well as a support environment that enables system builders to interactively and iteratively drive the process of constructing and evaluating detection models. The end product is concise and intuitive classification rules that can detect intrusions. The rest of the paper is organized as follows.
Reference: [SPT + 97] <author> S. J. Stolfo, A. L. Prodromidis, S. Tselepis, W. Lee, D. W. Fan, and P. K. Chan. </author> <title> JAM: Java agents for meta-learning over distributed databases. </title> <booktitle> In Proceedings of the 3rd International Conference on Knowledge Discovery and Data Mining, </booktitle> <pages> pages 7481, </pages> <address> Newport Beach, CA, </address> <month> August </month> <year> 1997. </year> <note> AAAI Press. </note>
Reference-contexts: We are implementing a support environment that graphically presents the mined patterns along with the list of features and the time windowing information to the user, and allows him/her to (iteratively) formulate a classification task, build and test the model using a classification engine such as JAM <ref> [SPT + 97] </ref>. 6 Acknowledgments Our work has benefited from in-depth discussions with Alexander Tuzhilin of New York Uni versity, and suggestions from Charles Elkan of UC San Diego and Phil Chan of Florida Insti tute of Technology. 9
Reference: [SVA97] <author> R. Srikant, Q. Vu, and R. Agrawal. </author> <title> Mining association rules with item constraints. </title> <booktitle> In Proceedings of the 3rd International Conference on Knowledge Discovery and Data Mining, </booktitle> <pages> pages 6773, </pages> <address> Newport Beach, California, </address> <month> August </month> <year> 1997. </year> <note> AAAI Press. </note>
Reference-contexts: In [KMR + 94] rule templates specifying the allowable attribute values are used to post-process the discovered rules. In <ref> [SVA97] </ref> boolean expressions 3 over the attribute values are used as item con-straints during rule discovery. A drawback of these approaches is that one has to know what rules/patterns are interesting. We cannot assume such strong prior knowledge on all audit data.
Reference: [UBC97] <author> P. E. Utgoff, N. C. Berkman, and J. A. Clouse. </author> <title> Decision tree induction based on efficient tree restructuring. </title> <booktitle> Machine Learning, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: This is because the limited training data may not have covered all the class labels, and on-line algorithms, for example, ITI <ref> [UBC97] </ref>, can't deal with new data with (unseen) class labels. For example in modeling daily network traffic, we use the services, e.g., http, telnet etc., of the connections as the class labels in training models.
References-found: 19

