URL: http://www.cs.concordia.ca/~faculty/manas/papers/toc99.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/manas/research/sel-pubs.html
Root-URL: http://www.cs.concordia.ca
Email: fdikang, richg@cs.umd.edu  manas@cs.concordia.ca  
Title: Parametric Design Synthesis of Distributed Embedded Systems parameters are synthesized, the estimated end-to-end performance metrics
Author: Dong-In Kang, Richard Gerber Manas Saksena 
Note: When all  
Address: College Park, MD 20742  Montreal Quebec H3G 1M8 Canada  
Affiliation: Institute for Advanced Computer Studies Department of Computer Science University of Maryland  Dept. of Computer Science Concordia University  
Abstract: This paper presents a design synthesis method for distributed embedded systems. In such systems, computations can flow through long pipelines of interacting software components, hosted on a variety of resources, each of which is managed by a local scheduler. Our method automatically calibrates the local resource schedulers to achieve the system's global end-to-end performance requirements. A system is modeled as a set of distributed task chains (or pipelines), where each task represents an activity requiring nonzero load from some CPU or network resource. Task load requirements can vary stochastically, due to second-order effects like cache memory behavior, DMA interference, pipeline stalls, bus arbitration delays, transient head-of-line blocking, etc. We aggregate these effects along with a task's per-service load demand and model them via a single random variable, ranging over an arbitrary discrete probability distribution. Load models can be obtained via profiling tasks in isolation, or simply by using an engineer's hypothesis about the system's projected behavior. The end-to-end performance requirements are posited in terms of throughput and delay constraints. Specifically, a pipeline's delay constraint is an upper bound on the total latency a compu-tatation can accumulate, from input to output. The corresponding throughput constraint mandates the pipeline's minimum acceptable output rate counting only outputs which meet their delay constraints. Since per-component loads can be generally distributed, and since resources host stages from multiple pipelines, meeting all of the system's end-to-end constraints is a nontrivial problem. Our approach involves solving two sub-problems in tandem: (A) finding an optimal proportion of load to allocate each task and channel; and (B) deriving the best combination of service intervals over which all load proportions can be guaranteed. The design algorithms use analytic approximations to quickly estimate output rates and propagation delays for candidate solutions. In this paper we demonstrate our technique on an example system, and compare the estimated performance to its simulated on-line behavior. fl This research is supported in part by ONR grant N00014-94-10228, NSF Young Investigator Award CCR-9357850, ARL Cooperative Agreement DAAL01-96-2-0002 and NSERC Operating Grant OGPO170345. A preliminary version of this work was reported in "Performance-Based Design of Distributed Real-Time Systems," at the Proceedings of IEEE Real-Time Technology and Applications Symposium (June 1997). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alan Burns. </author> <title> Preemptive Priority Based Scheduling: An Appropriate Engineering Approach. In Sang Son, editor, </title> <booktitle> Principles of Real-Time Systems. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: Since the analysis is approximate, we validate the generated solution using a simulation model. 2 Related Work Like much of the work in real-time systems, our results extend from preemptive, uniprocessor scheduling analysis. There are many old and new solutions to this problem (e.g., <ref> [1, 15, 20, 21] </ref>); moreover, many of these methods come equipped with o*ine, analysis tests, which determine a priori whether the underlying system is schedulable.
Reference: [2] <author> Wu chun Feng and Jane W.-S. Liu. </author> <title> Algorithms for scheduling real-time tasks with input error and end-to-end deadlines. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 23(2) </volume> <pages> 93-106, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: Rather, we used the system's end-to-end delay and jitter requirements to automatically derive each task's constraints; these, in turn, ensure that the end-to-end requirements will be met on a uniprocessor system. A similar approach for uniprocessor systems was explored in <ref> [2] </ref>, where execution time budgets were automatically derived from the end-to-end delay requirements; the method used an imprecise computation technique as a metric to help gauge the "goodness" of candidate solutions. These concepts were later modified for use in various application contexts.
Reference: [3] <author> R.L. Cruz. </author> <title> A calculus for network delay, part i : Network elements in isloation. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 37(1) </volume> <pages> 114-131, </pages> <year> 1991. </year>
Reference-contexts: Other rate-based disciplines solve this problem by re-distributing service over longer intervals at a cost of occasionally postponing the projected completion times of certain tasks. Most of these disciplines, however, 5 were conceived for inherently regulated workload models, e.g., linear bounded arrival processes <ref> [3] </ref>. In such settings, transient unfairnessis is often smoothed out by simply "re-shaping" the departure process - i.e., by inserting delay stages.
Reference: [4] <author> Alan Demers. </author> <title> Analysis and Simulation of a Fair Queueing Algorithm. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 1-12. </pages> <publisher> ACM Press, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: In such settings, transient unfairnessis is often smoothed out by simply "re-shaping" the departure process - i.e., by inserting delay stages. Many algorithms have been developed to provide proportional-share service in high-speed networks, including the "Virtual Clock Method" [38], "Fair-Share Queuing" <ref> [4] </ref>, "Generalized Processor Sharing" (or GPS) [23], and "Rate Controlled Static Priority Queuing" (or RCSP) [36]. These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in [39]).
Reference: [5] <author> Norival R. Figueira and Joseph Pasquale. Leave-in-Time: </author> <title> A New Service Discipline for Real-Time Communications in a Packet-Switching Network. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 207-218. </pages> <publisher> ACM Press, </publisher> <month> October </month> <year> 1995. </year>
Reference-contexts: These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in [39]). Related results can be found in <ref> [5] </ref> (using a policy like "Virtual Clock" [38]), and in [34] (for FCFS, with a variety of traffic distributions). In [14], statistical service quality objectives are achieved via proportional-share queuing, in conjunction with server-guided backoff, where servers dynamically adjust their rates to help utilize the available bandwidth.
Reference: [6] <author> Lucia Franco. </author> <title> Communication configurator for fieldbus: An algorithm to schedule tran smission of data and messages. </title> <booktitle> In Proceedings of IFAC/IFIP Workshop on Real Time Programming. IFIP, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: Our original approach (from [8, 9]) was also used to produce schedules for real-time traffic over fieldbus networks <ref> [6, 7] </ref>, where the switch priorities are synthesized to ensure end-to-end rate and latency guarantees. A related idea was pursued for radar processing domains [11], where an optimization method produces per-component processing rates and deadlines, based on the system's input pulse rate and its prescribed allowed latency.
Reference: [7] <author> Lucia Franco. </author> <title> Transmission scheduling for fieldbus: A strategy to schedule data and messages on fieldbus with end-to-end constraints. </title> <booktitle> In Proceedings of IEEE International Symposium on Intelligent Systems /Automation and Robotics (IAR). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Decem-ber </month> <year> 1996. </year> <month> 24 </month>
Reference-contexts: Our original approach (from [8, 9]) was also used to produce schedules for real-time traffic over fieldbus networks <ref> [6, 7] </ref>, where the switch priorities are synthesized to ensure end-to-end rate and latency guarantees. A related idea was pursued for radar processing domains [11], where an optimization method produces per-component processing rates and deadlines, based on the system's input pulse rate and its prescribed allowed latency.
Reference: [8] <author> R. Gerber, S. Hong, and M. Saksena. </author> <title> Guaranteeing Real-Time Requirements with Resource--Based Calibration of Periodic Processes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21, </volume> <month> July </month> <year> 1995. </year>
Reference-contexts: But if the nominal time is exceeded, the excess requirement is treated like a sporadic arrival (via a method similar to that used in [19]). In our previous work <ref> [8, 9] </ref> we relaxed the precondition that period and deadline parameters are always known ahead of time. Rather, we used the system's end-to-end delay and jitter requirements to automatically derive each task's constraints; these, in turn, ensure that the end-to-end requirements will be met on a uniprocessor system. <p> Recent results adapted the end-to-end theory to both discrete and continuous control problems (e.g. [18, 27], where real-time constraints were derived from a set of control laws, and where the objectives were to optimize the system's performance index while satisfying schedulability. Our original approach (from <ref> [8, 9] </ref>) was also used to produce schedules for real-time traffic over fieldbus networks [6, 7], where the switch priorities are synthesized to ensure end-to-end rate and latency guarantees. <p> Results presented in [25] address this problem in a deterministic context: they extend our original uniprocessor method from <ref> [8] </ref> to distributed systems, by statically partitioning the end-to-end delays via heuristic optimization metrics [25]. Similar approaches have been proposed for "soft" transactions in distributed systems [17], where each transaction's deadline is partitioned between the system's resources.
Reference: [9] <author> R. Gerber, Dong-In Kang, Seongsoo Hong, and Manas Saksena. </author> <booktitle> End-to-End Design of Real-Time Systems, chapter 10, </booktitle> <pages> pages 237-265. </pages> <publisher> Wiley, </publisher> <year> 1996. </year> <title> In Formal Methods for Real-Time Computing, edited by Constance Heitmeyer and Dino Mandrioli. </title>
Reference-contexts: But if the nominal time is exceeded, the excess requirement is treated like a sporadic arrival (via a method similar to that used in [19]). In our previous work <ref> [8, 9] </ref> we relaxed the precondition that period and deadline parameters are always known ahead of time. Rather, we used the system's end-to-end delay and jitter requirements to automatically derive each task's constraints; these, in turn, ensure that the end-to-end requirements will be met on a uniprocessor system. <p> Recent results adapted the end-to-end theory to both discrete and continuous control problems (e.g. [18, 27], where real-time constraints were derived from a set of control laws, and where the objectives were to optimize the system's performance index while satisfying schedulability. Our original approach (from <ref> [8, 9] </ref>) was also used to produce schedules for real-time traffic over fieldbus networks [6, 7], where the switch priorities are synthesized to ensure end-to-end rate and latency guarantees.
Reference: [10] <author> Ladan Gharai and Richard Gerber. </author> <title> Multi-platform simulation of video playout performance. </title> <booktitle> In Proceedings of SPIE/IS&T Multimedia Computing and Networking (MCMN98), </booktitle> <year> 1998. </year>
Reference-contexts: can often appeal to the method outlined above, a method commonly used in Hardware/Software Co-Design: a task is profiled in isolation, and the resulting histogram gets post-processed into a stationary response-time distribution. (We have experienced good results via this method in our multi-platform simulation work on digital video playout systems <ref> [10] </ref>). A second technique can be used at a more preliminary stage: the designer can coarsely estimate a task's average load, and use it to create a synthetic distribution - e.g., exponential, normal, chi-square, etc.
Reference: [11] <author> S. Goddard and Kevin Jeffay. </author> <title> Analyzing the real-time properties of a dataflow execution paradigm using a synthetic aperture radar application. </title> <booktitle> In Proceedings of IEEE Real-Time Technology and Applications Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1997. </year>
Reference-contexts: Our original approach (from [8, 9]) was also used to produce schedules for real-time traffic over fieldbus networks [6, 7], where the switch priorities are synthesized to ensure end-to-end rate and latency guarantees. A related idea was pursued for radar processing domains <ref> [11] </ref>, where an optimization method produces per-component processing rates and deadlines, based on the system's input pulse rate and its prescribed allowed latency. End-to-end design becomes significantly more difficult in distributed contexts.
Reference: [12] <author> S. J. Golestani. </author> <title> Congestion-free communication in high-speed packet networks. </title> <journal> IEEE Transactions on Commmunication, </journal> <volume> 39(12) </volume> <pages> 1802-1812, </pages> <year> 1991. </year>
Reference-contexts: The question gets trickier for linearly regulated traffic, where each stream has a different arrival rate, with deviations bounded over different interval-sizes, and where each stream has different proportional service guarantees. Fortunately, compositional results do exist, and have been presented for various rate-based disciplines for both deterministic <ref> [12, 24, 35] </ref> and statistical [39, 37] workloads. Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline.
Reference: [13] <author> Pawan Goyal, Xingang Guo, and Harrick M. Vin. </author> <title> A Hierarchical CPU Scheduler for Multimedia Operating Systems. </title> <booktitle> In Proceedings of Symposium on Operating Systems Design and Implementation (OSDI '96), </booktitle> <pages> pages 107-121, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Stoica et al. [29] proposed a related technique, which similarly uses a "virtual time-line" to determine the runtime dispatching order. This concept was also applied for hierarchical scheduling in <ref> [13] </ref>, where multiple classes of tasks (e.g., hard and soft real-time applications) can coexist in the same system. Several schemes have been proposed to guarantee processor capacity shares for the system's real-time tasks, and to simultaneously isolate them from overruns caused by other tasks in the system.
Reference: [14] <author> Pawan Goyal and Harrick M. Vin. </author> <title> Network Algorithms and Protocol for Multimedia Servers. </title> <booktitle> In Proceedings of IEEE INFOCOM. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1993. </year>
Reference-contexts: Related results can be found in [5] (using a policy like "Virtual Clock" [38]), and in [34] (for FCFS, with a variety of traffic distributions). In <ref> [14] </ref>, statistical service quality objectives are achieved via proportional-share queuing, in conjunction with server-guided backoff, where servers dynamically adjust their rates to help utilize the available bandwidth. Recently, many of these rate-based disciplines have sprouted analogues for CPU scheduling.
Reference: [15] <author> M. Harbour, M. Klein, and J. Lehoczky. </author> <title> Fixed Priority Scheduling of Periodic Tasks with Varying Execution Priority. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 116-128, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Since the analysis is approximate, we validate the generated solution using a simulation model. 2 Related Work Like much of the work in real-time systems, our results extend from preemptive, uniprocessor scheduling analysis. There are many old and new solutions to this problem (e.g., <ref> [1, 15, 20, 21] </ref>); moreover, many of these methods come equipped with o*ine, analysis tests, which determine a priori whether the underlying system is schedulable.
Reference: [16] <author> Raj Jain. </author> <title> The Art of Computer Systems Performance Analysis Techniques for Experimental Design, Measurement, Simulation, and Modeling. </title> <publisher> John Wiley & Sons, </publisher> <year> 1991. </year>
Reference-contexts: These problems are well outside the scope of this paper; interested readers should consult <ref> [16] </ref> for a decent introduction to statistical performance modeling. However, while none of these problems is trivial, given sufficient time, patience and statistical competence, one can employ some standard techniques for handling all of them.
Reference: [17] <author> Ben Kao and Hector Garcia-Molina. </author> <title> Deadline Assignment in a Distributed Soft Real-Time System. </title> <booktitle> In Proceedings of International Conference on Distributed Computing systems, </booktitle> <pages> pages 428-437. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: Results presented in [25] address this problem in a deterministic context: they extend our original uniprocessor method from [8] to distributed systems, by statically partitioning the end-to-end delays via heuristic optimization metrics [25]. Similar approaches have been proposed for "soft" transactions in distributed systems <ref> [17] </ref>, where each transaction's deadline is partitioned between the system's resources. To our knowledge, this paper presents the first technique that achieves statistical real-time performance in a distributed system, by using end-to-end requirements to assign both periods and the execution time budgets.
Reference: [18] <author> Namyun Kim, Minsoo Ryu, Seongsoo Hong, Manas Saksena, Chong-Ho Choi, and Heonshik Shin. </author> <title> Visual assessment of a real-time system design : A case study on a cnc controller. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 300-310. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: These concepts were later modified for use in various application contexts. Recent results adapted the end-to-end theory to both discrete and continuous control problems (e.g. <ref> [18, 27] </ref>, where real-time constraints were derived from a set of control laws, and where the objectives were to optimize the system's performance index while satisfying schedulability.
Reference: [19] <author> J. P. Lehoczky and S. Ramos-Thuel. </author> <title> An Optimal Algorithm for Scheduling Soft-Aperiodic Tasks in Fixed-Priority Preemptive Systems. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 110-123. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: But if the nominal time is exceeded, the excess requirement is treated like a sporadic arrival (via a method similar to that used in <ref> [19] </ref>). In our previous work [8, 9] we relaxed the precondition that period and deadline parameters are always known ahead of time.
Reference: [20] <author> J. Leung and M. Merill. </author> <title> A Note on the Preemptive Scheduling of Periodic, Real-Time Tasks. </title> <journal> Information Processing Letters, </journal> <volume> 11(3) </volume> <pages> 115-118, </pages> <month> November </month> <year> 1980. </year>
Reference-contexts: Since the analysis is approximate, we validate the generated solution using a simulation model. 2 Related Work Like much of the work in real-time systems, our results extend from preemptive, uniprocessor scheduling analysis. There are many old and new solutions to this problem (e.g., <ref> [1, 15, 20, 21] </ref>); moreover, many of these methods come equipped with o*ine, analysis tests, which determine a priori whether the underlying system is schedulable.
Reference: [21] <author> C. Liu and J. Layland. </author> <title> Scheduling Algorithm for Multiprogramming in a Hard Real-Time Environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Since the analysis is approximate, we validate the generated solution using a simulation model. 2 Related Work Like much of the work in real-time systems, our results extend from preemptive, uniprocessor scheduling analysis. There are many old and new solutions to this problem (e.g., <ref> [1, 15, 20, 21] </ref>); moreover, many of these methods come equipped with o*ine, analysis tests, which determine a priori whether the underlying system is schedulable.
Reference: [22] <author> Clifford W. Mercer, Stefan Savage, and Hideyuki Tokuda. </author> <title> Processor Capacity Reserves: Operating System Support for Multimedia Applications. </title> <booktitle> In Proceedings of IEEE International Conference on Multimedia Computing and Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Several schemes have been proposed to guarantee processor capacity shares for the system's real-time tasks, and to simultaneously isolate them from overruns caused by other tasks in the system. For example, Mercer et al. <ref> [22] </ref> proposed a processor capacity reservation mechanism to achieve this, a method which enforces each task's reserved share within its reservation period, under micro-kernel control.
Reference: [23] <author> A. K. Parekh and G. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks The Single Node Case. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 915-924. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: In such settings, transient unfairnessis is often smoothed out by simply "re-shaping" the departure process - i.e., by inserting delay stages. Many algorithms have been developed to provide proportional-share service in high-speed networks, including the "Virtual Clock Method" [38], "Fair-Share Queuing" [4], "Generalized Processor Sharing" (or GPS) <ref> [23] </ref>, and "Rate Controlled Static Priority Queuing" (or RCSP) [36]. These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in [39]).
Reference: [24] <author> A. K. Parekh and G. Gallager. </author> <title> A generalized processor sharing approach to flow control in integrated services networks themultiple node case. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 521-530. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1993. </year>
Reference-contexts: The question gets trickier for linearly regulated traffic, where each stream has a different arrival rate, with deviations bounded over different interval-sizes, and where each stream has different proportional service guarantees. Fortunately, compositional results do exist, and have been presented for various rate-based disciplines for both deterministic <ref> [12, 24, 35] </ref> and statistical [39, 37] workloads. Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline. <p> Fortunately, compositional results do exist, and have been presented for various rate-based disciplines for both deterministic [12, 24, 35] and statistical [39, 37] workloads. Deterministic, end-to-end per connection delays were considered in <ref> [24] </ref> for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline. Also, as noted above, statistical treatments have been provided for the PGPS [39] and for RCSP [37].
Reference: [25] <author> M. Saksena and S. Hong. </author> <title> Resource Conscious Design of Real-Time Systems: An End-to-End Approach. </title> <booktitle> In IEEE International Conference of Engineering Complex Computer Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Results presented in <ref> [25] </ref> address this problem in a deterministic context: they extend our original uniprocessor method from [8] to distributed systems, by statically partitioning the end-to-end delays via heuristic optimization metrics [25]. <p> Results presented in <ref> [25] </ref> address this problem in a deterministic context: they extend our original uniprocessor method from [8] to distributed systems, by statically partitioning the end-to-end delays via heuristic optimization metrics [25]. Similar approaches have been proposed for "soft" transactions in distributed systems [17], where each transaction's deadline is partitioned between the system's resources.
Reference: [26] <author> S. Sathaye and J. Strosnider. </author> <title> A Real-Time Scheduling Framework for Packet-Switched Networks. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 182-191. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: The classical model has been generalized to a large degree, and there now exist analogous results for distributed systems, network protocols, etc. For example, the model has been applied to distributed hard real-time systems in the following straightforward manner (e.g., see <ref> [26, 31] </ref>): each network connection is abstracted as a real-time task (sharing a network resource), and the scheduling analysis incorporates worst-case blocking times potentially suffered when high-priority packets have to wait for transmission of lower-priority packets.
Reference: [27] <author> D. Seto, J.P. Lehoczky, L. Sha, and K.G. Shin. </author> <title> On Task Schedulability in Real-Time Control System. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: These concepts were later modified for use in various application contexts. Recent results adapted the end-to-end theory to both discrete and continuous control problems (e.g. <ref> [18, 27] </ref>, where real-time constraints were derived from a set of control laws, and where the objectives were to optimize the system's performance index while satisfying schedulability.
Reference: [28] <author> Kang G. Shin and Yi-Chieh Chang. </author> <title> A Reservation-Based Algorithm for Scheduling Both Periodic and Aperiodic Real-Time Tasks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 44 </volume> <pages> 1405-1419, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: For example, Mercer et al. [22] proposed a processor capacity reservation mechanism to achieve this, a method which enforces each task's reserved share within its reservation period, under micro-kernel control. Also, Shin et al. <ref> [28] </ref> proposed a reservation-based algorithm to guarantee the performance of periodic real-time tasks, and also to improve the schedulability of aperiodic tasks. As noted above, many proportional-share methods have been subjected to response-time studies, for different types of arrival processes.
Reference: [29] <author> Ion Stoica, Hussein Abdel-Wahab, Kevin Jeffay, Sanjoy K. Baruah, Johannes E. Gehrke, and C. Greg Plaxton. </author> <title> A Proportional Resource Allocation Algorithm for Real-Time, Time-Shared Systems. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 288-299. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: The task which would hypothetically finish first under GPS gets the highest priority and is put on the run queue (until the next scheduling round). Stoica et al. <ref> [29] </ref> proposed a related technique, which similarly uses a "virtual time-line" to determine the runtime dispatching order. This concept was also applied for hierarchical scheduling in [13], where multiple classes of tasks (e.g., hard and soft real-time applications) can coexist in the same system.
Reference: [30] <author> T. S. Tia, Z. Deng, M. Shankar, M. Storch, J. Sun, L.-C. Wu, and J. W.-S Liu. </author> <title> Probabilistic Performance Guarantee for Real-Time Tasks with Varying Computation Times. </title> <booktitle> In Proceedings of IEEE Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 164-173. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: Then, to some extent, the resulting global scheduling problem can be solved as a set of interrelated local resource-scheduling problems. In <ref> [30] </ref>, the classical model was extended to consider probabilistic execution times on uniprocessor systems. This is done by giving a nominal "hard" amount of execution time to each task instance, under the assumption that the task will usually complete within this time.
Reference: [31] <author> K. Tindell, A. Burns, and A. Wellings. </author> <title> Analysis of hard real-time communication. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 9 </volume> <pages> 147-171, </pages> <month> September </month> <year> 1995. </year> <month> 26 </month>
Reference-contexts: The classical model has been generalized to a large degree, and there now exist analogous results for distributed systems, network protocols, etc. For example, the model has been applied to distributed hard real-time systems in the following straightforward manner (e.g., see <ref> [26, 31] </ref>): each network connection is abstracted as a real-time task (sharing a network resource), and the scheduling analysis incorporates worst-case blocking times potentially suffered when high-priority packets have to wait for transmission of lower-priority packets.
Reference: [32] <author> Carl A. Waldspurger and William E. Weihl. </author> <title> Lottery Scheduling: Flexible Proportional-Share Management. </title> <booktitle> In Proceedings of Symposium on Operating Systems Design and Implementation (OSDI '94), </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: In [14], statistical service quality objectives are achieved via proportional-share queuing, in conjunction with server-guided backoff, where servers dynamically adjust their rates to help utilize the available bandwidth. Recently, many of these rate-based disciplines have sprouted analogues for CPU scheduling. For example, Waldspurger et al. <ref> [32] </ref> proposed "Lottery Scheduling," which multiplexes available CPU load based on the relative throughput rates for the system's constituent tasks.
Reference: [33] <author> Carl A. WAldspurger and William E. Weihl. </author> <title> Stride scheduling: Deterministic proportional-share resource management. </title> <type> Technical Report MIT/LCS/TM-528, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: For example, Waldspurger et al. [32] proposed "Lottery Scheduling," which multiplexes available CPU load based on the relative throughput rates for the system's constituent tasks. The same authors also presented a deterministic variant of this, called "Stride Scheduling" <ref> [33] </ref>; this method provides an OS-level server for a method similar to the Weighted-Fair-Queuing (WFQ) discipline used in switches. WFQ also known as "Packetized GPS" (or PGPS) is a discrete, quantized version of the fluid-flow abstraction used in GPS.
Reference: [34] <author> David Yates, James Kurose, Don Towsley, and Michael G. Hluchyj. </author> <title> On Per-session End-to-end Delay Distributions and the Call Admission Problem for Real-time Applications with QOS Requirements. </title> <booktitle> In Proceedings of ACM SIGCOMM. </booktitle> <publisher> ACM Press, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in [39]). Related results can be found in [5] (using a policy like "Virtual Clock" [38]), and in <ref> [34] </ref> (for FCFS, with a variety of traffic distributions). In [14], statistical service quality objectives are achieved via proportional-share queuing, in conjunction with server-guided backoff, where servers dynamically adjust their rates to help utilize the available bandwidth. Recently, many of these rate-based disciplines have sprouted analogues for CPU scheduling.
Reference: [35] <author> H. Zhang. </author> <title> Providing End-to-End Performance Guarantees Using Non-Work-Conserving Disciplines. </title> <journal> Computer Communications: Special Issue on System Support for Multimedia Computing, </journal> <volume> 18, </volume> <month> October </month> <year> 1995. </year>
Reference-contexts: The question gets trickier for linearly regulated traffic, where each stream has a different arrival rate, with deviations bounded over different interval-sizes, and where each stream has different proportional service guarantees. Fortunately, compositional results do exist, and have been presented for various rate-based disciplines for both deterministic <ref> [12, 24, 35] </ref> and statistical [39, 37] workloads. Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline. <p> Fortunately, compositional results do exist, and have been presented for various rate-based disciplines for both deterministic [12, 24, 35] and statistical [39, 37] workloads. Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In <ref> [35] </ref> a similar study was performed using a non-work-conserving service discipline. Also, as noted above, statistical treatments have been provided for the PGPS [39] and for RCSP [37]. In Section 4 we present an analytical approximation for our TDM abstraction perhaps the extreme case of a non-work-conserving discipline.
Reference: [36] <author> Hui Zhang and D. Ferrari. </author> <title> Rate-controlled static-priority queueing. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 227-236. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: Many algorithms have been developed to provide proportional-share service in high-speed networks, including the "Virtual Clock Method" [38], "Fair-Share Queuing" [4], "Generalized Processor Sharing" (or GPS) [23], and "Rate Controlled Static Priority Queuing" (or RCSP) <ref> [36] </ref>. These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in [39]). Related results can be found in [5] (using a policy like "Virtual Clock" [38]), and in [34] (for FCFS, with a variety of traffic distributions).
Reference: [37] <author> Hui Zhang and Edward W. Knightly. </author> <title> Providing End-to-End Statistical Performance Guarantees with Bounding Interval Dependent Stochastic Models. </title> <booktitle> In ACM SIGMETRICS. </booktitle> <publisher> ACM Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in <ref> [37] </ref>) and GPS (in [39]). Related results can be found in [5] (using a policy like "Virtual Clock" [38]), and in [34] (for FCFS, with a variety of traffic distributions). <p> Fortunately, compositional results do exist, and have been presented for various rate-based disciplines for both deterministic [12, 24, 35] and statistical <ref> [39, 37] </ref> workloads. Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline. Also, as noted above, statistical treatments have been provided for the PGPS [39] and for RCSP [37]. <p> Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline. Also, as noted above, statistical treatments have been provided for the PGPS [39] and for RCSP <ref> [37] </ref>. In Section 4 we present an analytical approximation for our TDM abstraction perhaps the extreme case of a non-work-conserving discipline.
Reference: [38] <author> Lixia Zhang. </author> <title> VirtualClock : A New Traffic control Algorithm for Packet Switching Networks. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 19-29. </pages> <publisher> ACM Press, </publisher> <month> September </month> <year> 1990. </year>
Reference-contexts: In such settings, transient unfairnessis is often smoothed out by simply "re-shaping" the departure process - i.e., by inserting delay stages. Many algorithms have been developed to provide proportional-share service in high-speed networks, including the "Virtual Clock Method" <ref> [38] </ref>, "Fair-Share Queuing" [4], "Generalized Processor Sharing" (or GPS) [23], and "Rate Controlled Static Priority Queuing" (or RCSP) [36]. These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in [39]). <p> These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in [39]). Related results can be found in [5] (using a policy like "Virtual Clock" <ref> [38] </ref>), and in [34] (for FCFS, with a variety of traffic distributions). In [14], statistical service quality objectives are achieved via proportional-share queuing, in conjunction with server-guided backoff, where servers dynamically adjust their rates to help utilize the available bandwidth.
Reference: [39] <author> Zhi-Li Zhang, Don Towsley, and Jim Kurose. </author> <title> Statistical Analysis of Generalized Processor Sharing Scheduling Discipline. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 68-77. </pages> <publisher> ACM Press, </publisher> <month> August </month> <year> 1994. </year> <month> 27 </month>
Reference-contexts: These models have also been used to derive statistical delay guarantees; in particular, within the framework of RCSP (in [37]) and GPS (in <ref> [39] </ref>). Related results can be found in [5] (using a policy like "Virtual Clock" [38]), and in [34] (for FCFS, with a variety of traffic distributions). <p> Fortunately, compositional results do exist, and have been presented for various rate-based disciplines for both deterministic [12, 24, 35] and statistical <ref> [39, 37] </ref> workloads. Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline. Also, as noted above, statistical treatments have been provided for the PGPS [39] and for RCSP [37]. <p> Deterministic, end-to-end per connection delays were considered in [24] for leaky-bucket regulated traffic, using the PGPS scheduling technique. In [35] a similar study was performed using a non-work-conserving service discipline. Also, as noted above, statistical treatments have been provided for the PGPS <ref> [39] </ref> and for RCSP [37]. In Section 4 we present an analytical approximation for our TDM abstraction perhaps the extreme case of a non-work-conserving discipline.
References-found: 39

