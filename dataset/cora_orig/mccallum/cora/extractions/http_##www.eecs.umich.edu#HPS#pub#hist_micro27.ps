URL: http://www.eecs.umich.edu/HPS/pub/hist_micro27.ps
Refering-URL: http://www.eecs.umich.edu/HPS/hps_branchpred.html
Root-URL: http://www.eecs.umich.edu
Title: The Effect of Speculatively Updating Branch History on Branch Prediction Accuracy, Revisited  
Author: Eric Hao, Po-Yung Chang, and Yale N. Patt 
Keyword: Two-Level Adaptive Branch Prediction, dynamic branch prediction, speculative execution, superscalar processors, out-of-order execution  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Recent research [6] has suggested that the branch history register need not contain the outcomes of the most recent branches in order for the Two-Level Adaptive Branch Predictor to work well. From this result, it is tempting to conclude that the branch history register need not be speculatively updated. This paper revisits this work and explains when the most recent branch outcomes can be omitted without significantly affecting performance. It also explains why this result does not imply that speculative update is not important. This paper shows that because the number of unresolved branches present in the machine varies during program execution, branch predictors without speculative update perform significantly worse than branch predictors with speculative update. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.-M. W. Hwu and Y. N. Patt, </author> <title> "Checkpoint repair for out-of-order execution machines," </title> <booktitle> in Proceedings of the 14th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 18-26, </pages> <year> 1987. </year>
Reference-contexts: Branches were not resolved until after all the instructions upon which they depended were executed and the branch instruction itself was executed. Upon resolving a mispredicted branch, the machine was able to recover immediately to the correct path via checkpointing <ref> [1] </ref>. The same set of benchmarks used in section 2 was used to measure each predictor's performance. Each benchmark was simulated for 100 million instructions. We considered three variations in which a predictor without speculative update could be modeled: resolved, resolved+issue order, and retired.
Reference: [2] <author> J. K. F. Lee and A. J. Smith, </author> <title> "Branch prediction strategies and branch target buffer design," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 6-22, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: 1 Introduction Very accurate branch prediction is a critical requirement for high performance wide-issue, deeply pipelined processors. To address this need, many different branch prediction algorithms have been developed <ref> [2, 3] </ref>. In this paper, we will be examining the global variation of the Two-Level Adaptive Branch Predictor [7, 8, 4]. Its predictions are based on the outcomes of previously issued branches which are stored in the branch history register.
Reference: [3] <author> S. McFarling and J. Hennessy, </author> <title> "Reducing the cost of branches," </title> <booktitle> in Proceedings of the 13th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 396-403, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Very accurate branch prediction is a critical requirement for high performance wide-issue, deeply pipelined processors. To address this need, many different branch prediction algorithms have been developed <ref> [2, 3] </ref>. In this paper, we will be examining the global variation of the Two-Level Adaptive Branch Predictor [7, 8, 4]. Its predictions are based on the outcomes of previously issued branches which are stored in the branch history register.
Reference: [4] <author> S.-T. Pan, K. So, and J. T. Rahmeh, </author> <title> "Improving the accuracy of dynamic branch prediction using branch correlation," </title> <booktitle> in Proceedings of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pp. 76-84, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Very accurate branch prediction is a critical requirement for high performance wide-issue, deeply pipelined processors. To address this need, many different branch prediction algorithms have been developed [2, 3]. In this paper, we will be examining the global variation of the Two-Level Adaptive Branch Predictor <ref> [7, 8, 4] </ref>. Its predictions are based on the outcomes of previously issued branches which are stored in the branch history register.
Reference: [5] <author> A. R. Talcott, </author> <month> June </month> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: Recent research [6] erroneously reported that the prediction accuracy of speculatively updated predictors dramatically decreased as the number of unresolved branches present in the machine increased. The study's author reports that the incorrect result was due to an error in their simulator <ref> [5] </ref>. The correct result shows that the prediction accuracy is not affected by the number of unresolved branches present.
Reference: [6] <author> A. R. Talcott, W. Yamamoto, M. J. Serrano, R. C. Wood, and M. Nemirovsky, </author> <title> "The impact of unresolved branches on branch prediction scheme performance," </title> <booktitle> in Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 12-21, </pages> <year> 1994. </year>
Reference-contexts: Past research [8] has stated that because the outcomes of the most recent branches are crucial for accurate branch prediction, the predictor should be speculatively updated with their predicted outcomes whether they are resolved or not. 0 Recent research <ref> [6] </ref> has questioned the importance of including such branches in the branch history register. They examined the performance of a version of the Two-Level Adaptive Branch Predictor (the skipped model) which excluded a fixed number of the most recently issued branches from the branch history register. <p> In addition, they showed that in the presence of unresolved branches, speculatively updating the branch history register actually lowers prediction accuracy. In this paper, we revisit the previous study <ref> [6] </ref>. In section 2, we present the results of further experiments that provide an explanation for when excluding the most recent branches from the branch history register does not significantly affect prediction accuracy. In section 3, we reexamine the usefulness of speculatively updating the branch history register. <p> Section 4 provides some concluding remarks. 2 Branch Prediction Based on Older Histories In this section, we revisit the results of the skipped model experiment <ref> [6] </ref>. The skipped model predictor is a speculatively updated predictor that bases its predictions on branch histories that are older than the ones used by the standard predictor. <p> For each predictor configuration, we measured prediction accuracy for five of the six SPEC92 integer benchmarks: espresso, xlisp, eqntott, compress, and gcc 2 . Each benchmark was simulated for 10 million conditional branch instructions. Our results confirmed those of the original experiment <ref> [6] </ref>: prediction accuracy remains fairly constant as the number of skipped branches is increased. The results are omitted from this paper due to space considerations. <p> Furthermore, we show that because this number varies during program execution, the prediction accuracies of predictors without speculative update are significantly lower than those of predictors with speculative update. Recent research <ref> [6] </ref> erroneously reported that the prediction accuracy of speculatively updated predictors dramatically decreased as the number of unresolved branches present in the machine increased. The study's author reports that the incorrect result was due to an error in their simulator [5].
Reference: [7] <author> T.-Y. Yeh and Y. N. Patt, </author> <title> "Two-level adaptive branch prediction," </title> <booktitle> in Proceedings of the 24th Annual ACM/IEEE International Symposium on Computer Microarchitecture, </booktitle> <pages> pp. 51-61, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Very accurate branch prediction is a critical requirement for high performance wide-issue, deeply pipelined processors. To address this need, many different branch prediction algorithms have been developed [2, 3]. In this paper, we will be examining the global variation of the Two-Level Adaptive Branch Predictor <ref> [7, 8, 4] </ref>. Its predictions are based on the outcomes of previously issued branches which are stored in the branch history register.
Reference: [8] <author> T.-Y. Yeh and Y. N. Patt, </author> <title> "Alternative implementations of two-level adaptive branch prediction," </title> <booktitle> in Proceedings of the 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 124-134, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Very accurate branch prediction is a critical requirement for high performance wide-issue, deeply pipelined processors. To address this need, many different branch prediction algorithms have been developed [2, 3]. In this paper, we will be examining the global variation of the Two-Level Adaptive Branch Predictor <ref> [7, 8, 4] </ref>. Its predictions are based on the outcomes of previously issued branches which are stored in the branch history register. <p> Because the processor may be speculatively issuing instructions from a point far ahead of where it is executing in the dynamic instruction stream, the predictor may be basing its predictions on branch outcomes that have yet to be resolved. Past research <ref> [8] </ref> has stated that because the outcomes of the most recent branches are crucial for accurate branch prediction, the predictor should be speculatively updated with their predicted outcomes whether they are resolved or not. 0 Recent research [6] has questioned the importance of including such branches in the branch history register.
Reference: [9] <author> T.-Y. Yeh and Y. N. Patt, </author> <title> "A comprehensive instruction fetch mechanism for a processor supporting speculative execution," </title> <booktitle> in Proceedings of the 25th Annual ACM/IEEE International Symposium on Computer Microarchitecture, </booktitle> <pages> pp. 129-139, </pages> <year> 1992. </year>
Reference-contexts: To resolve this contradiction, we reran the skipped model experiments using the same predictor configurations and recorded the recently issued branch out 1 A real predictor would probably wait until after the branch was retired to update the pattern history tables. A previous study <ref> [9] </ref> has shown that updating the tables immediately provides no appreciable gain in prediction accuracy. 2 Sc was omitted due to problems with the simulator. <p> Because only branch predictions made while the machine is speculatively ex ecuting down the correct path of the program affect the execution time, only those predictions contribute to the calculation of prediction accuracy <ref> [9] </ref>. For such predictions, all the branch outcomes contained in the branch history register are guaranteed to be correct, regardless of whether they are resolved or not. The skipped model experiment showed that omitting a fixed number of branches from the branch history register does not significantly affect prediction accuracy.
References-found: 9

