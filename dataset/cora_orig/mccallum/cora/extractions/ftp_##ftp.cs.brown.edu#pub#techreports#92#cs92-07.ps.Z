URL: ftp://ftp.cs.brown.edu/pub/techreports/92/cs92-07.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-92-07.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and M. Sharir, </author> <title> "Applications of a New Space Partitioning Technique," </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 519, </volume> <pages> 379-391, </pages> <year> 1991. </year>
Reference-contexts: For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest path queries, respectively, in a simple polygon with n vertices. <p> No polylog-time method was previously known to perform such important queries in a dynamic setting. Sublinear-time techniques are known only for ray shooting queries. The known dynamic methods have O ( p n polylog (n)) query/update time <ref> [1, 7] </ref> and support ray-shooting in a set of possibly intersecting segments without taking advantage of the structure of planar maps. A property that appears to greatly facilitate the development of dynamic point-location techniques is monotonicity ([8, 15, 25]).
Reference: [2] <author> H. Baumgarten, H. Jung, and K. Mehlhorn, </author> <title> "Dynamic Point Location in General Subdivisions," </title> <booktitle> Proc. 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992. </year>
Reference-contexts: Baumgarten, Jung, and Mehlhorn are reported to have recently developed a fractional-cascading method with O (log n log log n) query-time and polylog amortized update time <ref> [2] </ref>. In many real-time applications, point-location queries are executed more frequently than updates, so that it is often desirable to achieve optimal O (log n) query time in a dynamic setting.
Reference: [3] <author> S.W. Bent, D.D. Sleator, and R.E. Tarjan, </author> <title> "Biased Search Trees," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 14, </volume> <pages> 545-568, </pages> <year> 1985. </year>
Reference-contexts: In particular, a simple rotation can be viewed as a sequence of four elementary splits and joins. Two special types of balanced binary trees will be used in this paper: biased binary trees <ref> [3] </ref> and BB [ff]-trees [20]. A biased binary tree [3] is a binary search tree whose leaves store weighted items. Let w be the sum of all weights. <p> In particular, a simple rotation can be viewed as a sequence of four elementary splits and joins. Two special types of balanced binary trees will be used in this paper: biased binary trees <ref> [3] </ref> and BB [ff]-trees [20]. A biased binary tree [3] is a binary search tree whose leaves store weighted items. Let w be the sum of all weights. <p> the depth of a leaf with weight w i is at most log (w=w i ) + 2, and each of the following update operations can be done in O (log w) time: change of the weight of an item, insertion/deletion of an item, and split/splice of two biased trees <ref> [3] </ref>.
Reference: [4] <author> G. Bilardi and F. P. Preparata, </author> <title> "Probabilistic Analysis of a New Geometric Searching Technique," </title> <type> unpublished manuscript, </type> <year> 1981. </year>
Reference-contexts: The approach reported in this paper combines the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory <ref> [4, 23] </ref> and practice [11] is well-established. This leads to the adoption of horizontal normalizing diagonals, called lids. The method rests on three major components: 1.
Reference: [5] <author> B. Chazelle and L. J. Guibas, </author> <title> "Visibility and Intersection Problems in Plane Geometry," </title> <booktitle> Discrete and Computational Geometry, </booktitle> <pages> 551-581, </pages> <year> 1989. </year>
Reference-contexts: For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest path queries, respectively, in a simple polygon with n vertices. <p> Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19]. In particular, the linear-space data structures of Chazelle-Guibas <ref> [5] </ref> and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest path queries, respectively, in a simple polygon with n vertices. No polylog-time method was previously known to perform such important queries in a dynamic setting. Sublinear-time techniques are known only for ray shooting queries.
Reference: [6] <author> S.W. Cheng and R. Janardan, </author> <title> "New Results on Dynamic Planar Point Location," </title> <type> Technical Report TR 90-13, </type> <institution> Dept. of Computer Science, Univ. of Minnesota, </institution> <year> 1990. </year> <note> (Prelim. version: 31st FOCS, 96-105, </note> <year> 1990.) </year>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space. <p> Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms [6, 8, 14, 15, 21, 25, 26, 30]. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan <ref> [6] </ref>, with O (log 2 n) query-time, O (log n) update time, and O (n) space. Baumgarten, Jung, and Mehlhorn are reported to have recently developed a fractional-cascading method with O (log n log log n) query-time and polylog amortized update time [2].
Reference: [7] <author> S. W. Cheng and R. Janardan, </author> <title> "Space Efficient Ray Shooting and Intersection Searching: Algorithms, </title> <booktitle> Dynamizations, and applications," 2nd SIAM-ACM Symposium on Discrete Algorithms, </booktitle> <pages> 7-16, </pages> <year> 1991. </year>
Reference-contexts: For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest path queries, respectively, in a simple polygon with n vertices. <p> No polylog-time method was previously known to perform such important queries in a dynamic setting. Sublinear-time techniques are known only for ray shooting queries. The known dynamic methods have O ( p n polylog (n)) query/update time <ref> [1, 7] </ref> and support ray-shooting in a set of possibly intersecting segments without taking advantage of the structure of planar maps. A property that appears to greatly facilitate the development of dynamic point-location techniques is monotonicity ([8, 15, 25]).
Reference: [8] <author> Y.-J. Chiang and R. Tamassia, </author> <title> "Dynamization of the Trapezoid Method for Planar Point Location in Monotone Subdivisions," </title> <booktitle> Proc. 7th ACM Symposium on Computational Geometry, </booktitle> <pages> 61-70, </pages> <year> 1991. </year>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space. <p> In many real-time applications, point-location queries are executed more frequently than updates, so that it is often desirable to achieve optimal O (log n) query time in a dynamic setting. The only previous techniques that support O (log n)-time queries in a dynamic environment are restricted to monotone maps <ref> [8, 15] </ref>. For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19]. <p> If q is on an vertex or edge, then return that vertex or edge. Our dynamic point-location data structure is inspired by the static trapezoid method [23] and its dynamic version for monotone maps <ref> [8] </ref>. It uses the normalization and hull structures as the underpinning of update operations. Queries are instead performed in a location structure, a binary tree called trapezoid tree. The trapezoid tree defines a binary partition of the plane obtained by means of vertical and horizontal cuts. <p> Queries are instead performed in a location structure, a binary tree called trapezoid tree. The trapezoid tree defines a binary partition of the plane obtained by means of vertical and horizontal cuts. It differs in many substantial aspects from the trapezoid trees used in <ref> [8, 23] </ref>, the most striking difference being that it is not balanced. The trapezoid tree T for map M is based on the Y-tree Y (see Section 4) and on the normalization of M as reflected by the normalization structure (see Section 3).
Reference: [9] <author> Y.-J. Chiang and R. Tamassia, </author> <title> "Dynamic Algorithms in Computational Geometry," </title> <type> Technical Report CS 91-24, </type> <institution> Dept. of Computer Science, Brown Univ., </institution> <year> 1991. </year>
Reference-contexts: The only previous techniques that support O (log n)-time queries in a dynamic environment are restricted to monotone maps [8, 15]. For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia <ref> [9] </ref>. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19].
Reference: [10] <author> D. P. Dobkin and R. Lipton, </author> <title> "Multidimensional Searching Problems," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 5, No. 2, </volume> <pages> 181-186, </pages> <year> 1976. </year>
Reference-contexts: First and foremost among these operations is planar point-location, i.e., the identification of the map region containing a given query point; but also shortest-path and ray-shooting queries have been considered very prominently. Starting with the pioneering work in planar point-location of the seventies <ref> [10, 18] </ref>, over the years several techniques have been developed, culminating with asymptotically time- and space-optimal methods [12, 17, 28] that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [11] <author> M. I. Edahiro, I. Kokubo and T. Asano, </author> <title> "A New Point-Location Algorithm and its Practical Efficiency|Comparision with Existing Algorithms," </title> <journal> ACM Transaction on Graphics, </journal> <volume> Vol. 3, No. 2, </volume> <pages> 86-109, </pages> <year> 1984. </year>
Reference-contexts: The approach reported in this paper combines the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory [4, 23] and practice <ref> [11] </ref> is well-established. This leads to the adoption of horizontal normalizing diagonals, called lids. The method rests on three major components: 1.
Reference: [12] <author> H. Edelsbrunner, L.J. Guibas, and J. Stolfi, </author> <title> "Optimal Point Location in a Monotone Subdivision," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 15, </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: Starting with the pioneering work in planar point-location of the seventies [10, 18], over the years several techniques have been developed, culminating with asymptotically time- and space-optimal methods <ref> [12, 17, 28] </ref> that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [13] <author> O. Fries, </author> <title> "Zerlegung einer planaren Unterteilung der Ebene und ihre Anwendungen," M.S. </title> <type> thesis, </type> <institution> Inst. Angew. Math. and Inform., Univ. Saarlandes, Saarbrcken, Germany, </institution> <year> 1985. </year>
Reference-contexts: The same approach, when attempted for the dynamic setting, could lead to onerous updates, such as when the insertion of an edge causes the removal of a very large number of normalizing diagonals. A rather complicated and only partially documented technique due to Fries <ref> [13] </ref>, is reported to assure that only a logarithmic number of normalizing diagonals be involved in any update. The approach reported in this paper combines the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory [4, 23] and practice [11] is well-established.
Reference: [14] <author> O. Fries, K. Mehlhorn, and S. Naeher, </author> <title> "Dynamization of Geometric Data Structures," </title> <booktitle> Proc. (1st) ACM Symp. on Computational Geometry, </booktitle> <pages> 168-176, </pages> <year> 1985. </year>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space.
Reference: [15] <author> M.T. Goodrich and R. Tamassia, </author> <title> "Dynamic Trees and Dynamic Point Location," </title> <booktitle> Proc. 23rd ACM Symp. on Theory of Computing, </booktitle> <pages> 523-533, </pages> <year> 1991. </year>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space. <p> In many real-time applications, point-location queries are executed more frequently than updates, so that it is often desirable to achieve optimal O (log n) query time in a dynamic setting. The only previous techniques that support O (log n)-time queries in a dynamic environment are restricted to monotone maps <ref> [8, 15] </ref>. For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19].
Reference: [16] <author> L. J. Guibas and J. Hershberger, </author> <title> "Optimal Shortest Path Queries in a Simple Polygon," </title> <booktitle> Proc. 3rd ACM Symposium on Computational Geometry, </booktitle> <pages> 50-63, </pages> <year> 1987. </year>
Reference-contexts: For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest path queries, respectively, in a simple polygon with n vertices. <p> Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19]. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger <ref> [16] </ref> support in O (log n) time ray-shooting and shortest path queries, respectively, in a simple polygon with n vertices. No polylog-time method was previously known to perform such important queries in a dynamic setting. Sublinear-time techniques are known only for ray shooting queries. <p> We first review the notion of "hourglass", which is central to our current problem. We adopt the terminology originally proposed by Guibas and Hershberger <ref> [16] </ref>. <p> Let ff be the subchain of r clockwise from a 1 and a 2 , and define fi similarly for b 2 and b 1 . The hourglass has one of the following special structures (as analyzed by <ref> [16] </ref>): Open hourglass: If the convex hulls of ff and fi do not intersect, then path (a 1 ; a 2 ) is the convex hull of the subchain of ff counterclockwise from a 1 to a 2 , and similarly for path (b 1 ; b 2 ). <p> We denote with Q a maximal monotone subpath of a solid path P , as used in Section 3.2, and specify the implementation of ltree (Q) and rtree (Q). We use pruned trees augmented with chain-trees as secondary structures. Our scheme uses ideas from [22] and <ref> [16] </ref>. * Trees ltree (Q) and rtree (Q) are implemented by means of pruned trees with respect to Y. * Let be a node of ltree (Q) (nodes of rtree (Q) are handled identically) and the parent of . Node has a pointer to the corresponding node y of Y.
Reference: [17] <author> D. Kirkpatrick, </author> <title> "Optimal Search in Planar Subdivision," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 12, </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: Starting with the pioneering work in planar point-location of the seventies [10, 18], over the years several techniques have been developed, culminating with asymptotically time- and space-optimal methods <ref> [12, 17, 28] </ref> that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [18] <author> D.T. Lee and F.P. Preparata, </author> <title> "Location of a Point in a Planar Subdivision and its Applications," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 6, </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: First and foremost among these operations is planar point-location, i.e., the identification of the map region containing a given query point; but also shortest-path and ray-shooting queries have been considered very prominently. Starting with the pioneering work in planar point-location of the seventies <ref> [10, 18] </ref>, over the years several techniques have been developed, culminating with asymptotically time- and space-optimal methods [12, 17, 28] that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [19] <author> D. T. Lee and F. P. Preparata, </author> <title> "Euclidean Shortest Paths in the Presence of Rectilinear Barriers," </title> <journal> Networks, </journal> <volume> Vol. 14, </volume> <pages> 393-410, </pages> <year> 1984. </year> <month> 23 </month>
Reference-contexts: For a survey of dynamic point location techniques and other dynamic algorithms in computational geometry, see the paper of Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest path queries, respectively, in a simple polygon with n vertices.
Reference: [20] <author> K. Mehlhorn, </author> <title> Data Structure and Algorithms 1: Sorting and Searching, </title> <type> 189-199, </type> <year> 1984. </year>
Reference-contexts: In particular, a simple rotation can be viewed as a sequence of four elementary splits and joins. Two special types of balanced binary trees will be used in this paper: biased binary trees [3] and BB [ff]-trees <ref> [20] </ref>. A biased binary tree [3] is a binary search tree whose leaves store weighted items. Let w be the sum of all weights. <p> A BB [ff]-tree <ref> [20] </ref> (where ff is a fixed real, with 1 4 &lt; ff 1 2 2 ) is a binary search tree and has the following important properties (among others): * A BB [ff]-tree with n nodes has height O (log n). * Assume that we augment a BB [ff]-tree with secondary
Reference: [21] <author> M. Overmars, </author> <title> "Range Searching in a Set of Line Segments," </title> <booktitle> Proc. (1st) ACM Symp. on Computational Geometry, </booktitle> <pages> 177-185, </pages> <year> 1985. </year>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space.
Reference: [22] <author> M. H. Overmars and J. van Leeuwen, </author> <title> "Maintenance of Configurations in the Plane," </title> <journal> J. Compt. and Syst. Sci., </journal> <volume> Vol. 23, </volume> <pages> 166-204, </pages> <year> 1981. </year>
Reference-contexts: We denote with Q a maximal monotone subpath of a solid path P , as used in Section 3.2, and specify the implementation of ltree (Q) and rtree (Q). We use pruned trees augmented with chain-trees as secondary structures. Our scheme uses ideas from <ref> [22] </ref> and [16]. * Trees ltree (Q) and rtree (Q) are implemented by means of pruned trees with respect to Y. * Let be a node of ltree (Q) (nodes of rtree (Q) are handled identically) and the parent of .
Reference: [23] <author> F.P. Preparata, </author> <title> "A New Approach to Planar Point Location," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 10, </volume> <pages> 473-483, </pages> <year> 1981. </year>
Reference-contexts: The approach reported in this paper combines the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory <ref> [4, 23] </ref> and practice [11] is well-established. This leads to the adoption of horizontal normalizing diagonals, called lids. The method rests on three major components: 1. <p> If q is on an vertex or edge, then return that vertex or edge. Our dynamic point-location data structure is inspired by the static trapezoid method <ref> [23] </ref> and its dynamic version for monotone maps [8]. It uses the normalization and hull structures as the underpinning of update operations. Queries are instead performed in a location structure, a binary tree called trapezoid tree. <p> Queries are instead performed in a location structure, a binary tree called trapezoid tree. The trapezoid tree defines a binary partition of the plane obtained by means of vertical and horizontal cuts. It differs in many substantial aspects from the trapezoid trees used in <ref> [8, 23] </ref>, the most striking difference being that it is not balanced. The trapezoid tree T for map M is based on the Y-tree Y (see Section 4) and on the normalization of M as reflected by the normalization structure (see Section 3).
Reference: [24] <author> F.P. Preparata and M.I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1985. </year>
Reference-contexts: The mechanics of the dynamic maintenance of a normalized map are described in Section 3, while Sections 4, 5, and 6 are respectively devoted to shortest-path, point-location, and ray-shooting queries. 2 2 Review of Background For the geometric terminology used in this paper, see <ref> [24] </ref>. A planar map M is a subdivision of the plane into polygonal regions whose underlying planar graph is connected. Thus, each region r of M, bounded or unbounded, is a simple polygon. In the following, n denotes the number of vertices of the planar map M curently being considered. <p> With this representation, it is possible to find the two tangents from a point to a convex chain and the four common tangents between two convex chains in logarithmic time <ref> [24] </ref>. We now give the details of our representation of hourglasses. An open hourglass is represented by storing its two convex chains into chain trees. A closed hourglass is represented by storing into separate substructures the four convex chains forming the funnels, and the string between the apices.
Reference: [25] <author> F.P. Preparata and R. Tamassia, </author> <title> "Fully Dynamic Point Location in a Monotone Subdivision," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 18, </volume> <pages> 811-830, </pages> <year> 1989. </year>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space.
Reference: [26] <author> F.P. Preparata and R. Tamassia, </author> <title> "Dynamic Planar Point Location with Optimal Query Time," </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 74, </volume> <pages> 95-114, </pages> <year> 1990. </year>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space.
Reference: [27] <author> F.P. Preparata, J. Vitter, and M. Yvinec, </author> <title> "Computation of the Axial View of a Set of Isothetic Parallelepipeds," </title> <journal> ACM Transactions on Graphics, </journal> <volume> Vol. 9, No. 3, </volume> <pages> 278-300, </pages> <year> 1990. </year>
Reference-contexts: In a concrete situation where vertices are a priori restricted to a fixed set of ordinates, tree Y is static; if we then implement the path-trees ltree and rtree by means of contracted binary trees <ref> [27] </ref> of depth &lt; log jY j (whose maintenance requires no rotation), then the update times become O (log 2 n log jY j), in the worst case.
Reference: [28] <author> Sarnak, N. and R.E. Tarjan, </author> <title> "Planar Point Location Using Persistent Search Trees," </title> <journal> Communications ACM, </journal> <volume> Vol. 29, </volume> <pages> 669-679, </pages> <year> 1986. </year>
Reference-contexts: Starting with the pioneering work in planar point-location of the seventies [10, 18], over the years several techniques have been developed, culminating with asymptotically time- and space-optimal methods <ref> [12, 17, 28] </ref> that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [29] <author> D.D. Sleator and R.E. Tarjan, </author> <title> "A Data Structure for Dynamic Trees," </title> <journal> J. Computer Systems Sciences, </journal> <volume> Vol. 24, </volume> <pages> 362-381, </pages> <year> 1983. </year>
Reference-contexts: We refer to a bounded region r; handling of the unbounded region involves trivial adaptations. In the following, we denote by m the current number of vertices in region r. We now imagine to represent ffi (r) as a dynamic tree (r) <ref> [29] </ref> (see Fig. 1). We choose an arbitrary node of ffi (r) as the root, which immediately forces a direction on each edge, referred to as an "arc" and directed toward the root. An arc is usually denoted either by a single letter or by an ordered pair (origin, destination). <p> In the course of some updates, we may change a solid arc to dashed and vice versa and thus violate the weight invariant; so we need the capability to restore such weight invariant. Such actions are effected by 8 the operation expose and conceal introduced in <ref> [29] </ref>. Operation expose (), for some node of (r), transforms the unique path P from node to the root of (r) into a solid path, by changing the dashed arcs in P to solid and the solid arcs incident to P to dashed. <p> So the main issue is how to find the topmost light arc. Before describing its adaptation to the double-thread data structure, we briefly review for the reader's convenience the standard single-path implementation of operation conceal as proposed by 9 Sleator and Tarjan <ref> [29] </ref>. Let solid path P be stored in path tree T (P ) with the root of (r) on the right. <p> Indeed, the leaf reached identifies an edge that is first hit by a horizontal ray through q. Since we did not impose any balance requirement on T the query time could be linear in the worst-case. To speed-up queries, we implement T as a dynamic tree <ref> [29] </ref>, i.e., T is decomposed into solid paths (such solid paths of T should not be confused with the solid paths in the trees of the normalization structure), connected by dashed arcs. Each solid path is associated with a path-tree.
Reference: [30] <author> R. Tamassia, </author> <title> "An Incremental Reconstruction Method for Dynamic Planar Point Location," </title> <journal> Information Processing Letters, </journal> <volume> Vol. 37, </volume> <pages> 79-83, </pages> <year> 1991. </year> <month> 24 </month>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [6, 8, 14, 15, 21, 25, 26, 30] </ref>. The best results to-date for dynamic point-location in an n-vertex map are due to Cheng-Janardan [6], with O (log 2 n) query-time, O (log n) update time, and O (n) space.
References-found: 30

