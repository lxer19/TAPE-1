URL: ftp://cse.ogi.edu/pub/dsrg/HOPE/csc94.ps.Z
Refering-URL: http://www.cse.ogi.edu/~crispin/
Root-URL: http://www.cse.ogi.edu
Email: crispin@csd.uwo.ca  
Title: Enhancing Concurrency Through Optimism: A Reason for HOPE 1  
Author: Crispin Cowan 
Address: Middlesex College  Ontario London, Ontario N6A 5B7  
Affiliation: Computer Science Department  University of Western  
Abstract: Optimism is a powerful technique for increasing con-currency. To date, use of optimism has been restricted to specialized systems due to the difficulty of writing optimistic programs. In this paper, we define optimism as any computation that uses rollback. We justify this definition, and describe how optimism can be used to increase concurrency. We then examine several well-known optimistic algorithms in this context. We conclude by presenting HOPE: our model of optimistic computation built upon these notions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jonathan R. Agre and Divyakant Agrawal. </author> <title> Recovering From Process Failures in the Time Warp Mechanism. </title> <booktitle> In 8th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 53-61, </pages> <address> Seattle, WA, </address> <month> Oc-tober </month> <year> 1989. </year>
Reference-contexts: Optimistically assuming that such a contributing factor does not exist increases available parallelism. Jefferson's Virtual Time [14] is a algorithm for distributed process synchronization that has been widely studied <ref> [1, 13, 15, 18, 21] </ref>.
Reference: [2] <author> G. M. </author> <title> Amdahl. Validity of the Single Processor Approach to Achieving Large Scale Computing Capabilities. </title> <booktitle> In Proc. AFIPS 1967 Spring Joint Computer Conference 30, </booktitle> <pages> pages 483-485, </pages> <month> April </month> <year> 1967. </year>
Reference-contexts: However, it should also be noted that whenever rollback occurs, other rollback-free algorithms would require blocking for an amount of time equal to that spent on wasted computation [14]. Amdahl's Law <ref> [2] </ref> states that the speedup due to an enhancement is: Speedup = 1 (1 fraction converted to enhanced mode)+ fraction converted toenhanced mode speedup of enhanced mode This equation shows that the speedup due to parallelism is limited by the fraction of a program that can actually be parallelized.
Reference: [3] <author> J.S. Auerbach, D.F. Bacon, A.P. Goldberg, G.S. Goldszmidt, M.T. Kennedy, A.R. Lowry, J.R. Russell, W. Silverman, R.E. Strom, D.M. Yellin, and S.A. Yemini. </author> <title> High-Level Language Support for Programming Distributed Systems. </title> <booktitle> In Proceedings of the 1991 CAS Conference, </booktitle> <pages> pages 173-196, </pages> <address> Toronto, Ontario, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: If a violation of this assertion is detected, then the worked GID is aborted because its causality constraints have been violated. Thus only executions consistent with the order S1; S2 are retained. 4.2 Linguistic Assumptions Like Linda [8] and Concert <ref> [3] </ref>, HOPE is not a complete programming language. Rather it is programming model for optimism, embodied as a set of primitives designed to be embedded in some other programming language. There are very few restrictions on the kinds of systems in which HOPE can be embedded. <p> HOPE does dependency tracking by marking communications between processes with references to GIDs, and so inter-process communications must be explicit, as is the case in many concurrent and distributed systems <ref> [28, 3, 7, 26] </ref>.
Reference: [4] <author> David F. Bacon and Robert E. Strom. </author> <title> Optimistic Parallelization of Communicating Sequential Processes. </title> <booktitle> In Third ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: Section 5 describes our future research goals in optimism. 2 Applications of Optimism In this section, we describe the application of optimism to overcoming the latency in network communications <ref> [4] </ref>, transaction processing [16], replication [10, 12, 27], fault tolerance [22], and discrete event simulation [14]. <p> Similarly, as processors get faster, the amount of computing that can be done while waiting for a reply increases. Thus advancing technology is going to increase the imbalance between latency and throughput, increasing the benefits of optimism. Bacon and Strom present <ref> [4] </ref> an optimistic transformation for the parallelization of sequential statements S1; S2 based on ideas in [23].
Reference: [5] <author> R.G. Bubenik. </author> <title> Optimistic Computation. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: The speculative predicate (the wouldbe argument) is evaluated at the end of the speculative if or while block, and the computation is either retained or rolled back at that point. 5 3.2 Bubenik's Optimistic Computa- tion Bubenik's optimistic facility <ref> [5, 6] </ref> is somewhat more dynamic than Strothotte's. Bubenik provides an operating systems facility to execute encapsulations whose outputs are concealed until the computation is mandated. As in Strothotte, the scope of an optimistically executed encapsulation is statically bounded.
Reference: [6] <author> Rick Bubenik and Willy Zwaenepoel. </author> <title> Optimistic Make. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(2) </volume> <pages> 207-217, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: The speculative predicate (the wouldbe argument) is evaluated at the end of the speculative if or while block, and the computation is either retained or rolled back at that point. 5 3.2 Bubenik's Optimistic Computa- tion Bubenik's optimistic facility <ref> [5, 6] </ref> is somewhat more dynamic than Strothotte's. Bubenik provides an operating systems facility to execute encapsulations whose outputs are concealed until the computation is mandated. As in Strothotte, the scope of an optimistically executed encapsulation is statically bounded. <p> Non-optimistic segments of a program cannot benefit from the optimism of an encapsulation if it does not propagate its results until it is mandated. Bubenik and Zwaenepoel argue their granularity is deliberately large for efficiency reasons <ref> [6] </ref>. 3.3 Time Warp Time Warp is specifically designed and marketed as a discrete event simulation system, but it could also be viewed as a general programming environment, and in fact has been examined as a concurrency control mechanism [15].
Reference: [7] <author> F. J. Burkowski, C. L. A. Clarke, S. C. Cowan, and G. J. Vreugdenhil. </author> <title> Architectural Support for Lightweight Tasking in the Sylvan Multiprocessor System. </title> <booktitle> In Symposium on Experience with Distributed and Multiprocessor Systems (SEDMS II), </booktitle> <pages> pages 165-184, </pages> <address> Atlanta, Georgia, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: HOPE does dependency tracking by marking communications between processes with references to GIDs, and so inter-process communications must be explicit, as is the case in many concurrent and distributed systems <ref> [28, 3, 7, 26] </ref>.
Reference: [8] <author> N. Carriero and D. Gelernter. </author> <title> Linda in Context. </title> <journal> Communications of the ACM, </journal> <volume> 31(4) </volume> <pages> 444-458, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: If a violation of this assertion is detected, then the worked GID is aborted because its causality constraints have been violated. Thus only executions consistent with the order S1; S2 are retained. 4.2 Linguistic Assumptions Like Linda <ref> [8] </ref> and Concert [3], HOPE is not a complete programming language. Rather it is programming model for optimism, embodied as a set of primitives designed to be embedded in some other programming language. There are very few restrictions on the kinds of systems in which HOPE can be embedded.
Reference: [9] <author> Crispin Cowan. </author> <title> Language Constructs for Optimism. </title> <type> PhD Thesis Proposal. </type>
Reference-contexts: Prototype Implementation: The HOPE language primitives can be embedded in any language that meets the criteria set out in section 4.2. Algorithms to perform all of the dependency tracking necessary to support the HOPE operations are complete, and detailed in <ref> [9] </ref>. The prototype HOPE implementation will be built on top of a distributed programming system, enhanced by a checkpoint and rollback facility. The HOPE compiler will then perform a source-to-source transformation, emitting conventional distributed programs that only use message passing operations, checkpoint, and rollback operations.
Reference: [10] <author> Crispin Cowan. </author> <title> Optimistic Replication in HOPE. </title> <booktitle> In Proceedings of the 1992 CAS Conference, </booktitle> <pages> pages 269-282, </pages> <address> Toronto, Ontario, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Any kind of assumption can be made, as long as a reliable method exists for checking that the assumption was correct. Optimistic algorithms have been used for fault tolerance [22], replication <ref> [10, 12, 27] </ref>, concurrency control [16, 15], and discrete event simulation [14]. The basis for a transaction is fundamentally optimistic, because it is based on the optimistic assumption that the transaction will complete instead of being rolled back. <p> Section 5 describes our future research goals in optimism. 2 Applications of Optimism In this section, we describe the application of optimism to overcoming the latency in network communications [4], transaction processing [16], replication <ref> [10, 12, 27] </ref>, fault tolerance [22], and discrete event simulation [14].
Reference: [11] <author> D. Gifford. </author> <title> Weighted Voting for Replicated Data. </title> <booktitle> In 7th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 150-162, </pages> <year> 1979. </year>
Reference-contexts: The second assumption is that a lock acquired only at the leader site will be granted by a quorum of other replica sites. Thus Triantafillou et al are using the conventional techniques of a location service and quorum consensus <ref> [11] </ref>, but are enhancing them by using optimism to perform these functions asynchronously. The location-based algorithm proceeds as follows: Clients processing transactions begin by asking the location service for a list of up to date replicas of each object desired (the granularity of objects is not discussed).
Reference: [12] <author> Arthur P. Goldberg. </author> <title> Optimistic Algorithms for Distributed Transparent Process Replication. </title> <type> PhD thesis, </type> <institution> University of California at Los Angeles, </institution> <year> 1991. </year> <note> (UCLA Tech. Report CSD-910050). </note>
Reference-contexts: Any kind of assumption can be made, as long as a reliable method exists for checking that the assumption was correct. Optimistic algorithms have been used for fault tolerance [22], replication <ref> [10, 12, 27] </ref>, concurrency control [16, 15], and discrete event simulation [14]. The basis for a transaction is fundamentally optimistic, because it is based on the optimistic assumption that the transaction will complete instead of being rolled back. <p> Section 5 describes our future research goals in optimism. 2 Applications of Optimism In this section, we describe the application of optimism to overcoming the latency in network communications [4], transaction processing [16], replication <ref> [10, 12, 27] </ref>, fault tolerance [22], and discrete event simulation [14].
Reference: [13] <author> Anurag Gupta, Ian F. Akyildiz, and Richard M. Fujimoto. </author> <title> Performance Analysis of Time Warp with Multiple Homogeneous Processors. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(10) </volume> <pages> 1013-1027, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Optimistically assuming that such a contributing factor does not exist increases available parallelism. Jefferson's Virtual Time [14] is a algorithm for distributed process synchronization that has been widely studied <ref> [1, 13, 15, 18, 21] </ref>.
Reference: [14] <author> D. Jefferson. </author> <title> Virtual Time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(7) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Any kind of assumption can be made, as long as a reliable method exists for checking that the assumption was correct. Optimistic algorithms have been used for fault tolerance [22], replication [10, 12, 27], concurrency control [16, 15], and discrete event simulation <ref> [14] </ref>. The basis for a transaction is fundamentally optimistic, because it is based on the optimistic assumption that the transaction will complete instead of being rolled back. <p> However, it should also be noted that whenever rollback occurs, other rollback-free algorithms would require blocking for an amount of time equal to that spent on wasted computation <ref> [14] </ref>. <p> Section 5 describes our future research goals in optimism. 2 Applications of Optimism In this section, we describe the application of optimism to overcoming the latency in network communications [4], transaction processing [16], replication [10, 12, 27], fault tolerance [22], and discrete event simulation <ref> [14] </ref>. <p> Optimistically assuming that such a contributing factor does not exist increases available parallelism. Jefferson's Virtual Time <ref> [14] </ref> is a algorithm for distributed process synchronization that has been widely studied [1, 13, 15, 18, 21].
Reference: [15] <author> D. Jefferson and A. Motro. </author> <title> The Time Warp Mechanism for Database Concurrency Control. </title> <type> Report Technical Report TR-84-302, </type> <institution> University of Southern California, </institution> <month> January </month> <year> 1984. </year>
Reference-contexts: Any kind of assumption can be made, as long as a reliable method exists for checking that the assumption was correct. Optimistic algorithms have been used for fault tolerance [22], replication [10, 12, 27], concurrency control <ref> [16, 15] </ref>, and discrete event simulation [14]. The basis for a transaction is fundamentally optimistic, because it is based on the optimistic assumption that the transaction will complete instead of being rolled back. <p> Optimistically assuming that such a contributing factor does not exist increases available parallelism. Jefferson's Virtual Time [14] is a algorithm for distributed process synchronization that has been widely studied <ref> [1, 13, 15, 18, 21] </ref>. <p> and Zwaenepoel argue their granularity is deliberately large for efficiency reasons [6]. 3.3 Time Warp Time Warp is specifically designed and marketed as a discrete event simulation system, but it could also be viewed as a general programming environment, and in fact has been examined as a concurrency control mechanism <ref> [15] </ref>. In that it provides concurrent processes and message passing, it is much like a conventional distributed system. In addition, it provides the programmer with global clock to use for synchronization, and then makes optimistic scheduling assumptions about the global clock.
Reference: [16] <author> H.T. Kung and John T. Robinson. </author> <title> On Optimistic Methods for Concurrency Control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2) </volume> <pages> 213-226, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: Any kind of assumption can be made, as long as a reliable method exists for checking that the assumption was correct. Optimistic algorithms have been used for fault tolerance [22], replication [10, 12, 27], concurrency control <ref> [16, 15] </ref>, and discrete event simulation [14]. The basis for a transaction is fundamentally optimistic, because it is based on the optimistic assumption that the transaction will complete instead of being rolled back. <p> Section 5 describes our future research goals in optimism. 2 Applications of Optimism In this section, we describe the application of optimism to overcoming the latency in network communications [4], transaction processing <ref> [16] </ref>, replication [10, 12, 27], fault tolerance [22], and discrete event simulation [14]. <p> A conservative approach to scheduling would be to look at each operation, and try to find a schedule that will not force any of the operations to roll back. However, there are no deadlock-free conservative protocols that always provide high concurrency <ref> [16] </ref>. Thus the problem of finding a schedule forms a serial bottleneck to the concurrent execution of operations on shared data. Kung and Robinson's Optimistic Concurrency Control [16] is an optimistic algorithm for scheduling concurrent transactions. <p> However, there are no deadlock-free conservative protocols that always provide high concurrency <ref> [16] </ref>. Thus the problem of finding a schedule forms a serial bottleneck to the concurrent execution of operations on shared data. Kung and Robinson's Optimistic Concurrency Control [16] is an optimistic algorithm for scheduling concurrent transactions.
Reference: [17] <author> Leslie Lamport. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: Time Warp is a discrete event simulation system based on the Virtual Time concept that provides the illusion of a globally synchronized clock that can be used to preserve a total ordering across the system as defined by Lamport <ref> [17] </ref>, even though processes are actually being executed out of order. Thus the semantics that it guarantees are those of a sequentially executed series of computations.
Reference: [18] <author> Yi-Bing Lin and Edward D. Lazowska. </author> <title> Optimality Considerations of the `Time Warp' Parallel Simulation. </title> <booktitle> In Proceedings of the SCS Multicon-ference on Distributed Simulation, </booktitle> <pages> pages 29-34, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Optimistically assuming that such a contributing factor does not exist increases available parallelism. Jefferson's Virtual Time [14] is a algorithm for distributed process synchronization that has been widely studied <ref> [1, 13, 15, 18, 21] </ref>.
Reference: [19] <author> C. Papadimitriou. </author> <title> The Serializability of Concurrent Updates. </title> <journal> Journal of the ACM, </journal> <volume> 24(4) </volume> <pages> 631-653, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: Such a schedule is called serializable <ref> [19] </ref>. However, it is possible to schedule such operations concurrently, so that non-interfering operations are performed in parallel. A conservative approach to scheduling would be to look at each operation, and try to find a schedule that will not force any of the operations to roll back.
Reference: [20] <author> J. Peterson and A. Silberschatz. </author> <title> Operating System Concepts. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1983. </year> <month> 10 </month>
Reference-contexts: We refer to the time 1 spent in such sequential components of a program as latency. Many techniques have been developed to hide or work around latency. The notion of multiprogramming was first invented to hide the latency of slow I/O devices to get more utilization from expensive CPU's <ref> [20, page 19] </ref>. Multiprogramming is a traditional way to hide latency from a computer by using parallelism.
Reference: [21] <author> Peter Reiher, Richard Fujimoto, Steven Bellenot, and David Jefferson. </author> <title> Cancellation Strategies in Optimistic Execution Systems. </title> <booktitle> In Proceedings of the SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 112-121, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Optimistically assuming that such a contributing factor does not exist increases available parallelism. Jefferson's Virtual Time [14] is a algorithm for distributed process synchronization that has been widely studied <ref> [1, 13, 15, 18, 21] </ref>.
Reference: [22] <author> R.E. Strom and S. Yemini. </author> <title> Optimistic Recovery in Distributed Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Any kind of assumption can be made, as long as a reliable method exists for checking that the assumption was correct. Optimistic algorithms have been used for fault tolerance <ref> [22] </ref>, replication [10, 12, 27], concurrency control [16, 15], and discrete event simulation [14]. The basis for a transaction is fundamentally optimistic, because it is based on the optimistic assumption that the transaction will complete instead of being rolled back. <p> Section 5 describes our future research goals in optimism. 2 Applications of Optimism In this section, we describe the application of optimism to overcoming the latency in network communications [4], transaction processing [16], replication [10, 12, 27], fault tolerance <ref> [22] </ref>, and discrete event simulation [14]. <p> However, waiting for writes to stable storage introduces large amounts of latency because I/O devices are very slow parts of a computing system. Better performance is obtained by performing I/O operations concurrent with subsequent computations. In <ref> [22] </ref> Strom and Yemini present a system for high-performance fault-tolerant distributed computing based on the optimistic notion that computers mostly do not fail.
Reference: [23] <author> Rob Strom and Shaula Yemini. </author> <title> Synthesizing Distributed and Parallel Programs through Optimistic Transformations. </title> <editor> In Y. Yemini, editor, </editor> <booktitle> Current Advances in Distrubuted Computing and Communications, </booktitle> <pages> pages 234-256. </pages> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1987. </year>
Reference-contexts: It should be noted that while optimism always increases concurrency, it does not always improve performance. Whether or not an optimistic assumption improves performance depends on the probability of the assumption being correct, the costs of rolling back computations, and the fixed costs of making rollback of computations possible <ref> [23] </ref>. However, it should also be noted that whenever rollback occurs, other rollback-free algorithms would require blocking for an amount of time equal to that spent on wasted computation [14]. <p> Thus advancing technology is going to increase the imbalance between latency and throughput, increasing the benefits of optimism. Bacon and Strom present [4] an optimistic transformation for the parallelization of sequential statements S1; S2 based on ideas in <ref> [23] </ref>. Such a par-allelization is particularly effective if S1 and S2 are remote procedure calls, in that it transforms a sequence of synchronous RPC operations into a stream of asynchronous messages, thus avoiding the network latency of waiting for confirmation of the remote operation.
Reference: [24] <author> Thomas Strothotte. </author> <title> Temporal Constructs for an Algorithmic Language. </title> <type> PhD thesis, </type> <institution> McGill University, </institution> <year> 1984. </year>
Reference-contexts: In this section, we review several previous efforts to automate parts of optimism. 3.1 Strothotte's Temporal Language Constructs In <ref> [24, 25] </ref> Strothotte describes three classes of programming language constructs for expressing temporal notions in a program: those for the past tense, the future tense, and the the subjunctive tense.
Reference: [25] <author> Thomas Strothotte. </author> <title> Temporal Constructs for an Algorithmic Language. </title> <type> Report SOCS-84.20, </type> <institution> McGill University, </institution> <address> Montreal, Quebec, </address> <month> December </month> <year> 1984. </year>
Reference-contexts: In this section, we review several previous efforts to automate parts of optimism. 3.1 Strothotte's Temporal Language Constructs In <ref> [24, 25] </ref> Strothotte describes three classes of programming language constructs for expressing temporal notions in a program: those for the past tense, the future tense, and the the subjunctive tense.
Reference: [26] <author> V.S. Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <journal> Concurrency: Practice & Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: HOPE does dependency tracking by marking communications between processes with references to GIDs, and so inter-process communications must be explicit, as is the case in many concurrent and distributed systems <ref> [28, 3, 7, 26] </ref>.
Reference: [27] <author> P. Triantafillou and D.J. Taylor. </author> <title> A New Paradigm for High Availability and Efficiency in Replicated and Distributed Databases. </title> <booktitle> In 2nd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 136-143, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Any kind of assumption can be made, as long as a reliable method exists for checking that the assumption was correct. Optimistic algorithms have been used for fault tolerance [22], replication <ref> [10, 12, 27] </ref>, concurrency control [16, 15], and discrete event simulation [14]. The basis for a transaction is fundamentally optimistic, because it is based on the optimistic assumption that the transaction will complete instead of being rolled back. <p> Section 5 describes our future research goals in optimism. 2 Applications of Optimism In this section, we describe the application of optimism to overcoming the latency in network communications [4], transaction processing [16], replication <ref> [10, 12, 27] </ref>, fault tolerance [22], and discrete event simulation [14]. <p> Write operations must engage in a protocol with all of the replicas of an object so that the object stays consistent, i.e. appears the same regardless of which replica is accessed. Thus write operations in a replicated system actually suffer greater latency than in non-replicated systems. In <ref> [27] </ref> Triantafillou presents a sophisticated consistency mechanism for replicated data in transaction-based distributed systems. Like Kung & Robinson, Triantafillou makes the optimistic assumption that write operations do not conflict, and performs the replica consistency check in parallel with the body of the transaction.
Reference: [28] <institution> United States Department of Defence. </institution> <note> Reference Manual for the Ada Programming Language ANSI/MIL-STD-1815A-1983. </note> <institution> United States Department of Defence, </institution> <month> February </month> <year> 1983. </year> <month> 11 </month>
Reference-contexts: HOPE does dependency tracking by marking communications between processes with references to GIDs, and so inter-process communications must be explicit, as is the case in many concurrent and distributed systems <ref> [28, 3, 7, 26] </ref>.
References-found: 28

