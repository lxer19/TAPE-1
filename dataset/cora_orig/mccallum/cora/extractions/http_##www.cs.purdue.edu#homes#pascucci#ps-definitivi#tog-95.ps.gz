URL: http://www.cs.purdue.edu/homes/pascucci/ps-definitivi/tog-95.ps.gz
Refering-URL: 
Root-URL: 
Title: PLASM PLASM Abstract Keywords: Geometric Programming: A Programming Approach to Geometric Design Functional programming, Design
Author: Alberto Paoluzzi Valerio Pascucci Michele Vicentino 
Date: March 7, 1995  
Address: Via Segre 3, 00146 Roma, Italy  Via Buonarroti 12, 00185 Roma, Italy  
Affiliation: Dip. di Disc. Scientifiche: Sez. Informatica, Terza Universita  Dip. di Informatica e Sistemistica, Universita "La Sapienza"  
Note: This work was partially supported from Italian Research Council, with contracts n. 92.02980.64 and n. 93.02528.64, within the "PF Edilizia" Project.  
Abstract: This paper presents a functional programming approach to geometric design with embedded polyhedral complexes. Its main goals are to show the expressive power of the language as well as its usefulness for geometric design. The language, named (the Programming LAnguage for Solid Modeling), introduces a very high level approach to "constructive" or "generative" modeling. Geometrical objects are generated by evaluating some suitable language expressions. Since generating expressions can be easily combined, the language also extends the standard variational geometry approach, by supporting classes of geometric objects with varying topology and shape. The design language can be roughly considered as a geometry-oriented extension of a subset of the functional language FL. The language takes a dimension-independent approach to geometry representation and algorithms. In particular it implements an algebraic calculus over embedded polyhedra of any dimension. The generated objects are always geometrically consistent since the validity of geometry is guaranteed at a syntactical level. Such an approach allows to use a representation scheme which is weaker than those usually adopted in solid modelers, so encompassing a broader geometric domain, which contains solids, surfaces and wire-frames, as well as higher-dimensional objects. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Adobe System Incorporated. </editor> . <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: Quite recently, a novel powerful approach to shape specification, denoted as "generative modeling", was proposed in [40, 41, 42]. Shapes are here described procedurally, in a fashion similar to other procedural methods in computer graphics (see e.g. the language <ref> [1] </ref>). The power of the approach comes from the use of a number of operators able to combine shapes, mainly parametric curves, to generate a great number of different kinds of surfaces and de-formable solid models. <p> The ending node of all arcs is the 0-dimensional zero , represented in homogeneous coordinates as <ref> [ 1 ] </ref>; each arc is associated with a 4 4 translation matrix which is applied to the origin of ( embedded in ) using homogeneous coordinates, i.e. is applied to the vector ( ) = [ 1 0 0 0 ]. (1 2) +1 + d; n n m ~
Reference: [2] <author> Backus, J. </author> <title> "Can Programming Be Liberated from the Von Neumann's Style? A Functional Style and its Algebra of Programs". </title> , (8):613-641, (ACM Turing Award Lecture). 1978. <booktitle> 37 </booktitle> nd Research Topics in Functional Programming CSG'94 Set-Theoretic Solid Modelling Techniques and Applications Algorithms in Combinatorial Geometry Computer Aided Design. Fundamentals and System Architectures Engineering Databases Computer Graphics Principles and Practice Advances in CAD/CAM Functional Programming. Application and Implementation 
Reference-contexts: In this section a brief outline of the FL approach to functional programming is given together with an introduction to the design language . The interested reader is referred to the Backus' Turing lecture <ref> [2] </ref> for motivation of programming at function level, to [47, 3] for a more introductory treatment of the topic, and to [4] for a complete description of FL syntax and semantics.
References-found: 2

