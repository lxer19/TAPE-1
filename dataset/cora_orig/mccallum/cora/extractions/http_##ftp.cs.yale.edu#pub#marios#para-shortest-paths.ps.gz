URL: http://ftp.cs.yale.edu/pub/marios/para-shortest-paths.ps.gz
Refering-URL: http://ftp.cs.yale.edu/pub/marios/
Root-URL: http://www.cs.yale.edu
Title: Implementing Parallel Shortest-Paths Algorithms  
Author: Marios Papaefthymiou and Joseph Rodrigue 
Abstract: We have implemented two parallel versions of the Bellman-Ford-Moore algorithm for the single-source shortest-paths problem. Our software is written in C and runs on the CM-5 parallel supercomputer using CMMD communication primitives. We have compared the performance of our parallel programs with a serial implementation of the Bellman-Ford-Moore algorithm developed by Cherkassky, Goldberg and Radzik. In our experiments we used 50 randomly generated graphs with up to 2 15 vertices and 2 21 edges. Our fastest parallel program always achieved speedups greater than 1 when the average degree of the graphs exceeded 2 5 for the smaller and 2 3 for the larger inputs in our test suite. On dense graphs, we achieved speedups of up to 7.8 on a CM-5 with 32 processors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Bertsekas and J. N. Tsitsiklis, </author> <title> Parallel and Distributed Computation, </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: 1. Introduction The shortest-paths problem is a classic combinatorial optimization problem that arises in a wide spectrum of applications including VLSI design, network routing, and commodity flow. Several serial and parallel algorithms have been proposed for computing shortest paths in graphs <ref> [1, 4, 6, 9] </ref>. The nature of most of these studies is theoretical, however. An empirical study of serial algorithms for shortest paths was only recently presented in [3]. Moreover, the efficient implementation and practical performance of parallel algorithms for computing shortest paths remains a largely unexplored field.
Reference: [2] <author> R. E. Bellman, </author> <title> On a routing problem, </title> <journal> Quart. Appl. Math., </journal> <volume> 16 </volume> <pages> 87-90, </pages> <year> 1958. </year>
Reference-contexts: In the general case, where the edge-weights w (u; v) can assume any real value, the scheme proposed independently by Bellman, Ford, and Moore is the asymptotically fastest strongly-polynomial algorithm for computing shortest paths <ref> [2, 5, 8] </ref>. The operation of this scheme is straightforward. Initially, all labels d (v) are set to 1 for v 6= s, and d (s) is set to 0. Subsequently, the algorithm performs iterative passes over the edge-set jEj.
Reference: [3] <author> B. Cherkassky, A. Goldberg, and T. Radzik, </author> <title> Shortest paths algorithms: theory and experimental evaluation, </title> <type> Technical Report STAN-CS-93-1480, </type> <institution> Stanford, </institution> <year> 1993. </year>
Reference-contexts: Several serial and parallel algorithms have been proposed for computing shortest paths in graphs [1, 4, 6, 9]. The nature of most of these studies is theoretical, however. An empirical study of serial algorithms for shortest paths was only recently presented in <ref> [3] </ref>. Moreover, the efficient implementation and practical performance of parallel algorithms for computing shortest paths remains a largely unexplored field. We recently embarked on an empirical comparison of serial and parallel shortest-paths algorithms. We implemented several parallel versions of the Bellman-Ford-Moore algorithm for single-source shortest paths. <p> We developed our code on the CM-5 parallel supercomputer platform using the C programming language and CMMD communication primitives. In this paper we describe two of our implementations, and we present an empirical comparison of their performance with a serial Bellman-Ford-Moore code due to Cherkassky, Goldberg, and Radzik <ref> [3] </ref> that ran on a Sparc 2. The Cherkassky-Goldberg-Radzik code was the fastest public-domain implementation of the Bellman-Ford-Moore algorithm we were aware of. <p> Our test suite comprised directed graphs with integer edge-weights that were generated using the sprand random graph generator from <ref> [3] </ref>. The size of our graphs ranged between 2 10 and 2 15 vertices and between 2 11 and 2 21 edges. On the sparse inputs, neither of our two parallel programs matched the performance of the serial one. <p> Although these heuristics do not improve the algorithm's asymptotic behavior, they seem to work well in practice. The serial Bellman-Ford-Moore code we experimented with employs a parent-checking heuristic to determine a good order for relaxing the edges in a graph G <ref> [3] </ref>. In this implementation, vertices are maintained in a FIFO queue which initially contains only the source s. For each vertex u pulled off the queue, all outgoing edges (u; v) are relaxed only if u's parent (u) is not currently in the queue. <p> Input graphs and data partitioning In our experiments, we concentrated on cyclic graphs that included edges with negative weights. We generated these graphs using the sprand random network generator of Cherkassky, Goldberg and Radzik <ref> [3] </ref> with the command sprand V E 561 -lm 0 -ll 5 -pm 0 -pl 5. The resulting graphs had edge-weights in the interval [-5, 10] and initially contained one connected cycle of length V . The other edges in the graph were inserted randomly.
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: 1. Introduction The shortest-paths problem is a classic combinatorial optimization problem that arises in a wide spectrum of applications including VLSI design, network routing, and commodity flow. Several serial and parallel algorithms have been proposed for computing shortest paths in graphs <ref> [1, 4, 6, 9] </ref>. The nature of most of these studies is theoretical, however. An empirical study of serial algorithms for shortest paths was only recently presented in [3]. Moreover, the efficient implementation and practical performance of parallel algorithms for computing shortest paths remains a largely unexplored field. <p> An interesting property of the Bellman-Ford-Moore algorithm is that during each iteration the edges in G can be relaxed in any order without affecting correctness. Several heuristics have been proposed that improve the practical running time of the Bellman-Ford-Moore algorithm by relaxing edges in a specific order <ref> [4] </ref>. Although these heuristics do not improve the algorithm's asymptotic behavior, they seem to work well in practice. The serial Bellman-Ford-Moore code we experimented with employs a parent-checking heuristic to determine a good order for relaxing the edges in a graph G [3]. <p> Our fine-grain program makes a good guess in finding one of these vertices by selecting the vertex u with the minimum label d (u) among the candidate vertices. If the graph contains no negative-weight edges, this scheme is identical to the selection scheme in Dijkstra's algorithm <ref> [4] </ref>. If there are edges with negative edge-weights, our scheme is still a reasonable heuristic. Our fine-grain program operates as follows. Each processor maintains a heap of vertices to be relaxed, ordered by their labels d (u).
Reference: [5] <author> L. R. Ford, Jr. and D. R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: In the general case, where the edge-weights w (u; v) can assume any real value, the scheme proposed independently by Bellman, Ford, and Moore is the asymptotically fastest strongly-polynomial algorithm for computing shortest paths <ref> [2, 5, 8] </ref>. The operation of this scheme is straightforward. Initially, all labels d (v) are set to 1 for v 6= s, and d (s) is set to 0. Subsequently, the algorithm performs iterative passes over the edge-set jEj.
Reference: [6] <author> Y. Han, V. Pan, and J. Reif, </author> <title> Efficient parallel algorithms for all-pairs shortest-paths in directed graphs, </title> <booktitle> Proc. 4th ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: 1. Introduction The shortest-paths problem is a classic combinatorial optimization problem that arises in a wide spectrum of applications including VLSI design, network routing, and commodity flow. Several serial and parallel algorithms have been proposed for computing shortest paths in graphs <ref> [1, 4, 6, 9] </ref>. The nature of most of these studies is theoretical, however. An empirical study of serial algorithms for shortest paths was only recently presented in [3]. Moreover, the efficient implementation and practical performance of parallel algorithms for computing shortest paths remains a largely unexplored field.
Reference: [7] <author> R. Harlan, </author> <title> Searching in parallel: case study with single-source shortest-paths algorithms, </title> <journal> ACM SIG CS Education Bulletin, </journal> <volume> 23(1), </volume> <month> March </month> <year> 1991. </year>
Reference: [8] <author> E. F. Moore, </author> <title> The shortest path through a maze, </title> <booktitle> proc. of the Int. Symp. on the Theory of Switching, </booktitle> <pages> pages 285-292, </pages> <publisher> Harvard University Press, </publisher> <year> 1959. </year>
Reference-contexts: In the general case, where the edge-weights w (u; v) can assume any real value, the scheme proposed independently by Bellman, Ford, and Moore is the asymptotically fastest strongly-polynomial algorithm for computing shortest paths <ref> [2, 5, 8] </ref>. The operation of this scheme is straightforward. Initially, all labels d (v) are set to 1 for v 6= s, and d (s) is set to 0. Subsequently, the algorithm performs iterative passes over the edge-set jEj.
Reference: [9] <author> G. Pantziou, P. Spirakis, and C. Zaroliagis, </author> <title> Efficient parallel algorithms for shortest paths in planar digraphs, </title> <journal> BIT, </journal> <volume> 32, </volume> <year> 1992. </year> <institution> Departments of Electrical Engineering and Computer Science, Yale University, New Haven, Connecticut 06520 E-mail address: marios@yale.edu Department of Computer Science, Yale University, New Haven, Connecticut 06520 Current address: IBM Israel, MATAM Adv Tech Ctr, Haifa 31905, Israel E-mail address: jrodrigue@vnet.ibm.com </institution>
Reference-contexts: 1. Introduction The shortest-paths problem is a classic combinatorial optimization problem that arises in a wide spectrum of applications including VLSI design, network routing, and commodity flow. Several serial and parallel algorithms have been proposed for computing shortest paths in graphs <ref> [1, 4, 6, 9] </ref>. The nature of most of these studies is theoretical, however. An empirical study of serial algorithms for shortest paths was only recently presented in [3]. Moreover, the efficient implementation and practical performance of parallel algorithms for computing shortest paths remains a largely unexplored field.
References-found: 9

