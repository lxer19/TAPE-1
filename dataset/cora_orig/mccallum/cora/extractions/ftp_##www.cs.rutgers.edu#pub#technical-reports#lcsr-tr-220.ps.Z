URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-220.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: Net Address: minsky@cs.rutgers.edu  
Phone: Tel: 908-932-2085  
Title: Law-Governed Regularities in Software Systems  
Author: By: Naftaly H. Minsky 
Note: 1 Work supported in part by NSF grant No. CCR-9308773.  
Address: New Brunswick, NJ 08903  
Affiliation: 1 Computer Science Department Rutgers University  
Date: January 1994  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Morris, W. </author> <title> The American Heritage Dictionary of the English Language. </title> <publisher> Houghton Mifflin Company, </publisher> <year> 1981. </year>
Reference-contexts: Token-based Regularities Many useful structures and control mechanisms can be based on the notion of a token -- an item that, by its dictionary definition <ref> [1] </ref>, "tangibly signifies authority and authenticity". One example of a structure which is based on such tokens is the mutual exclusion protocol discussed in 29 the introduction, where a movable token represents the exclusive authority to perform a certain operation.
Reference: [2] <author> Brooks, Frederick P. Jr. </author> <title> No Silver Bullet -- the Essence and Accidents of Software Engineering. </title> <journal> IEEE Computer :10-19, </journal> <month> April, </month> <year> 1987. </year>
Reference: [3] <author> Cardelli, L. Dinahue, J. Glassman, L. Jordan, M. Kalsow, B. and Nelson, G. </author> <type> Modula-3 Report (revised). Technical Report 52, </type> <institution> Digital System Research Center, </institution> <month> November, </month> <year> 1989. </year>
Reference: [4] <author> Chomicki, J. and Minsky, </author> <title> N.H. Towards a Programming Environment for Large Prolog Programs. </title> <booktitle> In Proceedings of the 2nd International Symposium on Logic Programming, </booktitle> <pages> pages 230-241. </pages> <address> Boston, Massachusetts, </address> <month> July, </month> <year> 1985. </year>
Reference: [5] <author> Clocksin, W.F. and Mellish, C.S. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [6] <author> Denning, P.J. </author> <title> Fault tolerant operating systems. </title> <journal> Computing Surveys 8(4) </journal> <pages> 359-389, </pages> <month> December, </month> <year> 1976. </year>
Reference-contexts: One example of a structure which is based on such tokens is the mutual exclusion protocol discussed in 29 the introduction, where a movable token represents the exclusive authority to perform a certain operation. Another example is the well known capability-based access control mechanism <ref> [6] </ref>, under which operations on objects are authorized by tokens called "capabilities". There are also many real-life processes which are regulated by tokens. <p> While some specific token-based regularities have been built into certain computational platforms (like operating system <ref> [6] </ref>), and into some programming languages [29], none of them provides the means for establishing a broad spectrum of such regularities, of the kind described below. <p> In particular, one can introduce the concept of right symbols <ref> [6] </ref>, one can device different kinds of means for the transfer of capabilities (such as proposed in [14], for example), and different mechanisms for the generation of new capabilities. 5.4.
Reference: [7] <author> DeRemer, F. and Kron, H.H. </author> <title> Programming-in-the-Large vs. </title> <journal> Programming-in-the-Small. IEEE Transactions on Software Engineering SE-2(2):80-86, </journal> <month> June, </month> <year> 1976. </year>
Reference: [8] <author> Garlan, D. and Shaw M. </author> <title> An Introductin to Software Architecture. </title> <editor> In V. Ambriola and G. Tortora (editor), </editor> <booktitle> Advances in Software Engineering and Knowledge Engineering. </booktitle> <publisher> World Scientic Publishing, </publisher> <year> 1993. </year>
Reference: [9] <author> Harrison, M. A., Ruzzo, W. L. and Ullman, J. D. </author> <title> Protection in operating systems. </title> <journal> Communications of the ACM 19(8) </journal> <pages> 461-471, </pages> <month> Aug., </month> <year> 1976. </year>
Reference-contexts: The controlled means provided for the creation of tokens, and for their distribution. For example, the ability to move a token from one object to another may be conditioned on the availability of certain other tokens, as proposed in <ref> [9, 14] </ref>. Also, tokens may be allowed to be copied, or just be moved from one place to another. We now introduce two examples of token-based regularities established by laws.
Reference: [10] <author> Leichter, J., Minsky, </author> <title> N.H. Obligations in Law-Governed Distributed Systems. </title> <type> Technical Report, </type> <institution> Rutgers University, LCSR, </institution> <year> 1993. </year> <note> (In preperation). </note>
Reference: [11] <author> Keith Marzullo and Mark D. Wood. </author> <title> Tools for Monitoring and Controlling Distributed Applications. </title> <type> Technical Report TR91-1187, </type> <institution> Cornell University Department of Computer Science, </institution> <month> February, </month> <year> 1991. </year>
Reference: [12] <author> Meyer, B. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: While the resulting flexibility should be highly beneficial for exploratory programming, most object-oriented systems are likely to be built in conventional object-oriented languages, such as C++ or Eiffel, <ref> [12] </ref> which support some fixed concepts of inheritance, and of related structures. In this section we discuss very briefly some of the law-governed regularities which are likely to be useful for systems written in one of these conventional object-oriented languages.
Reference: [13] <author> Minsky, </author> <title> N.H. Locality in Software Systems. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 299-312. </pages> <month> January, </month> <year> 1983. </year> <month> 37 </month>
Reference: [14] <author> Minsky, </author> <title> N.H. Selective and Locally Controlled Transport of Privileges. </title> <journal> ACM Transactions on Programming Languages and Systems (TOPLAS) 6(4) </journal> <pages> 573-602, </pages> <month> October, </month> <year> 1984. </year>
Reference-contexts: The controlled means provided for the creation of tokens, and for their distribution. For example, the ability to move a token from one object to another may be conditioned on the availability of certain other tokens, as proposed in <ref> [9, 14] </ref>. Also, tokens may be allowed to be copied, or just be moved from one place to another. We now introduce two examples of token-based regularities established by laws. <p> In particular, one can introduce the concept of right symbols [6], one can device different kinds of means for the transfer of capabilities (such as proposed in <ref> [14] </ref>, for example), and different mechanisms for the generation of new capabilities. 5.4. Monitoring There are many situations in which one would like to monitor certain messages by notifying a certain object (the "monitor") of their occurrence.
Reference: [15] <author> Minsky, N.H. and Rozenshtein, D. </author> <title> Law-Based Approach to Object-Oriented Programming. </title> <booktitle> In Proceedings of the OOPSLA'87 Conference, </booktitle> <pages> pages 482-493. </pages> <month> October, </month> <year> 1987. </year>
Reference-contexts: Regularities in Object-Oriented Systems In a series of previous papers <ref> [15, 26, 16, 17] </ref> we have shown that most of the fundamental structures of object-oriented programming, including inheritance and delegation, and many variations of these structures, are regularities that can be established under LGA by means of explicit laws.
Reference: [16] <author> Rozenshtein, D. and Minsky, </author> <title> N.H. Law-Governed Object-Oriented System. </title> <journal> Journal of Object-Oriented Programming 1(6) </journal> <pages> 14-29, </pages> <address> March/April, </address> <year> 1989. </year>
Reference-contexts: Regularities in Object-Oriented Systems In a series of previous papers <ref> [15, 26, 16, 17] </ref> we have shown that most of the fundamental structures of object-oriented programming, including inheritance and delegation, and many variations of these structures, are regularities that can be established under LGA by means of explicit laws.
Reference: [17] <author> Minsky, N.H. and Rozenshtein, D. </author> <title> Controllable Delegation: An Exercise in Law-Governed Systems. </title> <booktitle> In Proceedings of the OOPSLA'89 Conference, </booktitle> <pages> pages 371-380. </pages> <month> October, </month> <year> 1989. </year>
Reference-contexts: Regularities in Object-Oriented Systems In a series of previous papers <ref> [15, 26, 16, 17] </ref> we have shown that most of the fundamental structures of object-oriented programming, including inheritance and delegation, and many variations of these structures, are regularities that can be established under LGA by means of explicit laws.
Reference: [18] <author> Minsky, </author> <title> N.H. The Imposition of Protocols Over Open Distributed Systems. </title> <journal> IEEE Transactions on Software Engineering , February, </journal> <year> 1991. </year>
Reference: [19] <author> Minsky, </author> <title> N.H. Law-Governed Systems. </title> <journal> The IEE Software Engineering Journal , September, </journal> <note> 1991. (This is a revision of a similarly entitled 1987 technical report). </note>
Reference: [20] <author> Minsky, </author> <title> N.H. Governing Distributed Systems: From Protocols to Laws. </title> <booktitle> In Proceedings of the Hawaii International Conference on System Sciences. </booktitle> <month> January, </month> <year> 1991. </year>
Reference: [21] <author> Minsky, N.H. and Pal, P. </author> <title> Imposing Regularities over Object-Oriented Systems. </title> <type> Technical Report, </type> <institution> Rutgers University, LCSR, </institution> <year> 1993. </year> <note> (In preparation). </note>
Reference-contexts: In this section we discuss very briefly some of the law-governed regularities which are likely to be useful for systems written in one of these conventional object-oriented languages. For farther discussion of such regularities the reader is referred to <ref> [21] </ref>, which is based on our work with the LGA/Eiffel interface. We first note that all types of regulatory structures discussed so far in this paper are applicable for OO-systems, just as they are for other types of systems; and most of them can be imposed by laws under LGA/Eiffel. <p> In the following sub-section we present a detailed, but informal, example that motivates some of these, and some other regularities in OO-systems. For a formalization of this example in terms of a law see <ref> [21] </ref>. 35 5.5.1. An Example: Creating a Killable Class of Objects Consider a system built in an OO-language such as Eiffel, that provides garbage collection.
Reference: [22] <author> Ossher, H.L. </author> <title> Grids: A New Program Structuring Mechanism Based on Layered Graphs. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 11-22. </pages> <month> January, </month> <year> 1984. </year>
Reference: [23] <author> Harold L. </author> <note> Ossher. </note>
References-found: 23

