URL: http://www.isi.edu/teamcore/tambe/papers/95/AT/resc.ps
Refering-URL: http://www.isi.edu/teamcore/tambe/agent.html
Root-URL: http://www.isi.edu
Email: Email: ftambe, rosenbloomg@isi.edu  
Title: RESC: An Approach for Real-time, Dynamic Agent Tracking  
Author: Milind Tambe and Paul S. Rosenbloom 
Web: WWW: http://www.isi.edu/soar/ftambe,rosenbloomg  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  
Date: 1995 1  
Note: International Joint Conf. on Artificial Intelligence  
Abstract: Agent tracking involves monitoring the observable actions of other agents as well as inferring their unobserved actions, plans, goals and behaviors. In a dynamic, real-time environment, an intelligent agent faces the challenge of tracking other agents' flexible mix of goal-driven and reactive behaviors, and doing so in real-time, despite ambiguities. This paper presents RESC (REal-time Situated Commitments), an approach that enables an intelligent agent to meet this challenge. RESC's situat-edness derives from its constant uninterrupted attention to the current world situation | it always tracks other agents' on-going actions in the context of this situation. Despite ambiguities, RESC quickly commits to a single interpretation of the on-going actions (without an extensive examination of the alternatives), and uses that in service of interpretation of future actions. However, should its commitments lead to inconsistencies in tracking, it uses single-state backtracking to undo some of the commitments and repair the inconsistencies. Together, RESC's situatedness, immediate commitment, and single-state backtracking conspire in providing RESC its real-time character. RESC is implemented in the context of intelligent pilot agents participating in a real-world synthetic air-combat environment. Experimental results illustrating RESC's effectiveness are presented. 1
Abstract-found: 1
Intro-found: 1
Reference: [ Anderson et al., 1990 ] <author> J. R. Anderson, C. F. Boyle, A. T. Corbett, and M. W. Lewis. </author> <title> Cognitive modeling and intelligent tutoring. </title> <journal> Artificial Intelligence, </journal> <volume> 42 </volume> <pages> 7-49, </pages> <year> 1990. </year>
Reference-contexts: beam-right D . (D currently chooses arbitrarily between the execution of operator D and operator DL , as it generates its own actions, while also tracking L's actions.) The above agent tracking process is related to previous work on model tracing in intelligent tutoring systems (ITS) for tracking student actions <ref> [ Anderson et al., 1990; Ward, 1991 ] </ref> . However, that work has primarily focused on static environments. A recently developed ITS, REACT [ Hill and Johnson, 1994 ] , extends model tracing to a more dynamic environment.
Reference: [ Azarewicz et al., 1986 ] <author> J. Azarewicz, G. Fala, R. Fink, and C. Heithecker. </author> <title> Plan recognition for airborne tactical decision making. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 805-811. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1986. </year>
Reference-contexts: Thus, the pilot agents need to continually track their opponents' actions, such as turns, and infer unobserved actions, high-level goals and behaviors, such as the fpole, beam or missile firing behaviors. This agent tracking capability is related to plan-recognition <ref> [ Kautz and Allen, 1986; Azarewicz et al., 1986 ] </ref> . The key difference is that plan-recognition efforts typically focus on tracking a narrower (plan-based) class of agent behaviors, as seen in static, single-agent domains. In particular, they assume that agents rigidly follow plans step-by-step.
Reference: [ Bennett and Dietterich, 1986 ] <author> J. S. Bennett and T. G. Dietterich. </author> <title> The test incorporation hypothesis and the weak methods. </title> <type> Technical Report 86-30-4, </type> <institution> Department of Computer Science, Oregon State University, </institution> <year> 1986. </year>
Reference-contexts: Thus, as seen above, D does not automatically assume detection by L's radar, even though that would be the worst-case assumption. A second passive ambiguity resolution strategy is test incorporation <ref> [ Bennett and Dietterich, 1986 ] </ref> . The key idea is to generate fewer incorrect alternatives in ambiguous situations. In particular, model DL generates alternative operators DL that are tested by matching against L's actual actions.
Reference: [ Calder et al., 1993 ] <author> R. B. Calder, J. E. Smith, A. J. Courtemanche, J. M. F. Mar, and A. Z. Ceranowicz. </author> <title> Modsaf behavior simulation and control. </title> <booktitle> In Proceedings of the Conference on Computer Generated Forces and Behavioral Representation, </booktitle> <year> 1993. </year>
Reference-contexts: In step with this approach, we are investigating agent tracking in the context of our on-going effort to build intelligent pilot agents for a real-world synthetic air-combat environment [ Tambe et al., 1995 ] . This environment is based on a commercially developed simulator called ModSAF <ref> [ Calder et al., 1993 ] </ref> , which has already been used in an operational military exercise involving expert human pilots. <p> With four opponents, it is unable to track the actions of all of the agents in time, and gets shot down (hence fewer operators). This resource contention issue is under active investigation [ Tambe, 1995 ] . Our second set of experiments involved Soar-vs-ModSAF simulated air-combat scenarios. ModSAF-based <ref> [ Calder et al., 1993 ] </ref> pilot agents are controlled by finite state machines combined with arbitrary pieces of code, and do not exhibit high behavioral flexibility.
Reference: [ Hanks et al., 1993 ] <author> S. Hanks, M. E. Pollack, and P. R. Cohen. </author> <title> Benchmarks, test beds, controlled experimentation, and the design of agent architectures. </title> <journal> AI Magazine, </journal> <volume> 14(4) </volume> <pages> 17-42, </pages> <year> 1993. </year>
Reference-contexts: Thus, the approach is one of first building an "interesting" system for a complex environment, and then understanding why it does or does not work (see <ref> [ Hanks et al., 1993 ] </ref> for a related discussion). In step with this approach, we are investigating agent tracking in the context of our on-going effort to build intelligent pilot agents for a real-world synthetic air-combat environment [ Tambe et al., 1995 ] . <p> The second aspect to understanding the effectiveness of TacAir-Soar RESC is some quantitative estimate of the impact of agent tracking on improving D's overall performance. In general, this is a difficult issue to address (see for instance the debate in <ref> [ Hanks et al., 1993 ] </ref> ). Nonetheless, we can at least list some of the types of benefits that D accrues from this capability. First, agent tracking is crucial for D's survival.
Reference: [ Hill and Johnson, 1994 ] <author> R. Hill and W. L. Johnson. </author> <title> Situated plan attribution for intelligent tutoring. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1994. </year>
Reference-contexts: However, that work has primarily focused on static environments. A recently developed ITS, REACT <ref> [ Hill and Johnson, 1994 ] </ref> , extends model tracing to a more dynamic environment. REACT relies upon a plan-driven tracking strategy, and deals with the more dynamic aspects of the domain as special cases. It specifically abstracts away from tracking students' mental states.
Reference: [ Johnson, 1994 ] <author> W. L. Johnson. </author> <title> Agents that learn to explain themselves. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <month> August </month> <year> 1994. </year> <institution> Menlo Park, </institution> <address> Calif.: </address> <publisher> AAAI press. </publisher>
Reference-contexts: Finally, agent tracking helps D in providing a better explanation of its behaviors to human experts. (Such an explanation capability is currently being developed <ref> [ Johnson, 1994 ] </ref> ). If human experts see D as performing its task with an inaccurate understanding of opponents' actions, they will not have sufficient confidence to actually use it in training. 5 Lessons Learned This paper presented an approach called RESC, for agent tracking in real-time dynamic environments.
Reference: [ Kautz and Allen, 1986 ] <author> A. Kautz and J. F. Allen. </author> <title> Generalized plan recognition. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 32-37. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1986. </year>
Reference-contexts: Thus, the pilot agents need to continually track their opponents' actions, such as turns, and infer unobserved actions, high-level goals and behaviors, such as the fpole, beam or missile firing behaviors. This agent tracking capability is related to plan-recognition <ref> [ Kautz and Allen, 1986; Azarewicz et al., 1986 ] </ref> . The key difference is that plan-recognition efforts typically focus on tracking a narrower (plan-based) class of agent behaviors, as seen in static, single-agent domains. In particular, they assume that agents rigidly follow plans step-by-step. <p> Furthermore, parallelism may not be adequate when faced with the expected combinatorics in the number of alternatives. Borrowing ambiguity resolution methods from the plan recognition literature would be yet another possibility; but the computational costs (intractability) of techniques such as automated deduction <ref> [ Kautz and Allen, 1986 ] </ref> are a significant concern. So instead, we propose a new approach called RESC (REal-time Situated Commitments) that addresses the above concerns.
Reference: [ Kuniyoshi et al., 1994 ] <author> Y. Kuniyoshi, S. Rougeaux, M. Ishii, N. Kita, S. Sakane, and M. Kakikura. </author> <title> Cooperation by observation the framework and the basic task pattern. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: One candidate that has been suggested is a real-time multi-robot domain where robots track other robots or humans to collaborate in a task by observation (rather than by communication) <ref> [ Kuniyoshi et al., 1994 ] </ref> . Beyond agent tracking, there is some indication that RESC could apply in other real-time comprehension tasks. For instance, a RESC-type strategy has been previously used in a real-time language comprehension system [ Lewis, 1993 ] .
Reference: [ Lewis, 1993 ] <author> R. L. Lewis. </author> <title> An architecturally-based theory of human sentence comprehension. </title> <booktitle> In Proceedings of the Eleventh Annual Conference of the Cognitive Science Society, </booktitle> <year> 1993. </year>
Reference-contexts: Beyond agent tracking, there is some indication that RESC could apply in other real-time comprehension tasks. For instance, a RESC-type strategy has been previously used in a real-time language comprehension system <ref> [ Lewis, 1993 ] </ref> . This system also commits to a single interpretation of an input sentence despite ambiguity, and attempts to repair the interpretation in real-time when faced with parsing difficulties. We hope that investigating these broader applications will lead to an improved understanding of agent tracking and comprehension.
Reference: [ Newell, 1990 ] <author> A. Newell. </author> <title> Unified Theories of Cognition. </title> <publisher> Harvard Univ. Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: Subsequently, RESC's ambiguity resolution and real-time properties are described in Section 3. These descriptions are provided in concrete terms, using an implementation of the pilot agents in a system called TacAir-Soar [ Tambe et al., 1995 ] , built using the Soar architecture <ref> [ Newell, 1990; Rosenbloom et al., 1991 ] </ref> . We assume some familiarity with Soar's problem-solving model, which involves applying operators to states to reach a desired state. 2 Tracking Flexible Goal-driven and Reactive Behaviors In an environment such as air-combat simulation, agents possess similar behavioral flexibility and reactivity.
Reference: [ Rich and Knight, 1990 ] <author> E. Rich and K. Knight. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1990. </year>
Reference-contexts: plan recognition are both part of a larger family of comprehension capabilities that enable an agent to parse a continuous stream of input from its environment, whether it be in the form of natural language or speech or music or simulated radar input, as is the case here (e.g., see <ref> [ Rich and Knight, 1990, chapter 14 ] </ref> ). Resolving ambiguities in the input stream is a key problem when parsing all of these different types of input. One example of the ambiguity faced in agent tracking can be seen in L's turn in Figure 1-c.
Reference: [ Rosenbloom et al., 1991 ] <author> P. S. Rosenbloom, J. E. Laird, A. Newell, , and R. McCarl. </author> <title> A preliminary analysis of the soar architecture as a basis for general intelligence. </title> <journal> Artificial Intelligence, </journal> <note> 47(1-3):289-325, 1991. </note> [ <author> Tambe and Rosenbloom, 1995 ] M. Tambe and P. S. Rosenbloom. </author> <title> Event tracking in a dynamic multi-agent environment. </title> <journal> Computational Intelligence, </journal> <note> (To appear), 1995. WWW: http: //www.isi.edu/soar/tambe/event.html. [ Tambe et al., 1995 ] M. </note> <author> Tambe, W. L. Johnson, R. Jones, F. Koss, J. E. Laird, P. S. Rosenbloom, and K. Schwamb. </author> <title> Intelligent agents for interactive simulation environments. </title> <journal> AI Magazine, </journal> <volume> 16(1), </volume> <month> Spring </month> <year> 1995. </year>
Reference-contexts: Subsequently, RESC's ambiguity resolution and real-time properties are described in Section 3. These descriptions are provided in concrete terms, using an implementation of the pilot agents in a system called TacAir-Soar [ Tambe et al., 1995 ] , built using the Soar architecture <ref> [ Newell, 1990; Rosenbloom et al., 1991 ] </ref> . We assume some familiarity with Soar's problem-solving model, which involves applying operators to states to reach a desired state. 2 Tracking Flexible Goal-driven and Reactive Behaviors In an environment such as air-combat simulation, agents possess similar behavioral flexibility and reactivity. <p> Soar's architectural features: (i) a decision procedure that supports flexibility by integrating all available knowledge about absolute or relative worth of candidate operators right before deciding to commit to a single operator; (ii) termination conditions for operators that sup port reactivity by terminating operators in response to the given situation <ref> [ Rosenbloom et al., 1991 ] </ref> . The point here is not that these specific architectural features are the only way to yield such behavior, but rather that there are such features, and that they can be reused in tracking other agents' behaviors.
Reference: [ Tambe, 1995 ] <author> M. Tambe. </author> <title> Recursive agent and agent-group tracking in a real-time dynamic environment. </title> <booktitle> In Proceedings of the International Conference on Multi-agent systems (ICMAS), </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: However, as the number of opponents increases, D does face resource contention problems. With four opponents, it is unable to track the actions of all of the agents in time, and gets shot down (hence fewer operators). This resource contention issue is under active investigation <ref> [ Tambe, 1995 ] </ref> . Our second set of experiments involved Soar-vs-ModSAF simulated air-combat scenarios. ModSAF-based [ Calder et al., 1993 ] pilot agents are controlled by finite state machines combined with arbitrary pieces of code, and do not exhibit high behavioral flexibility.
Reference: [ Van Beek and Cohen, 1991 ] <author> P. Van Beek and R. Co-hen. </author> <title> Resolving plan ambiguity for cooperative response generation. </title> <booktitle> In Proceedings of International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 938-944, </pages> <year> 1991. </year>
Reference-contexts: For instance, in already sees L turning to its right, then fpole-left DL can be eliminated, since it would be guaranteed to lead to a match failure. Test incorporation relies on such spatial relationships. A third passive ambiguity resolution strategy is goal incorporation (e.g., see <ref> [ Van Beek and Cohen, 1991 ] </ref> ). The key idea here is to resolve ambiguities only to the extent necessitated by an agent's goals. For example, given the reality of the simulation environment, L's aircraft often unintentionally deviates from its intended heading.
Reference: [ Ward, 1991 ] <author> B. Ward. ET-Soar: </author> <title> Toward an ITS for Theory-Based Representations. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon Univ., </institution> <year> 1991. </year>
Reference-contexts: beam-right D . (D currently chooses arbitrarily between the execution of operator D and operator DL , as it generates its own actions, while also tracking L's actions.) The above agent tracking process is related to previous work on model tracing in intelligent tutoring systems (ITS) for tracking student actions <ref> [ Anderson et al., 1990; Ward, 1991 ] </ref> . However, that work has primarily focused on static environments. A recently developed ITS, REACT [ Hill and Johnson, 1994 ] , extends model tracing to a more dynamic environment. <p> Fortunately, many of these quantities are symmetric and can be reused from corresponding quantities in state D . It is difficult to resolve the above ambiguities using methods that have been previously suggested in the model tracing literature. Ward <ref> [ Ward, 1991 ] </ref> notes that previous model tracing systems have mostly relied on communication with the modeled agent to resolve ambiguities. In air-combat simulation, such communication with enemy pilots is clearly ruled out.
References-found: 16

