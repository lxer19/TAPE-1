URL: http://wwwis.win.tue.nl/~debra/csn94/csn94.ps
Refering-URL: http://wwwis.win.tue.nl/~debra/public.html
Root-URL: http://www.win.tue.nl
Title: A Formal Approach to Analyzing the Browsing Semantics of Hypertext  
Author: Paul De Bra, Geert-Jan Houben Yoram Kornatzky 
Address: PO Box 513, 5600 MB Eindhoven, the Netherlands  6 King's College Road, Toronto, Ontario M58 1A4, Canada  
Affiliation: Dept. of Mathematics and Computing Science, Eindhoven University of Technology,  Computer Systems Research Institute, Univ. of Toronto,  
Abstract: Browsing through a hyperdocument often leads to orientation problems: "you don't know where you are, you are lost in hyperspace. Although some of these problems may be diminished by specific browsing tools, such as fish-eye views and history mechanisms, most problems are embedded in the structure of the hyperdocument. In order to detect and analyze potential problems in the use of a hyperdocument, we reduce different types of browsing actions to a unified and well know formalism : the Petri net. In this paper we use the object-oriented model from [3] to describe hyperdocuments. This model, unlike other reference models [5, 6, 9], describes objects using a number of different description layers: these layers are not fixed by the model, and none of them are excluded from the model. In order to use Petri nets to describe browsing, the operations dealing with the hierarchical structure of objects (composites, towers and cities) are translated into operations that are equivalent to the simple follow-link. Unlike Stotts, Furuta and Ruiz [14] we combine the operations offered by the hypertext system (or presentation layer) with the link structure of the document, in order to characterize the browsing semantics of document and system as a unity. By using existing analysis tools for (different kinds of) Petri nets one can easily detect potential browsing problems like unreachable nodes and links, dead ends, unlimited numbers of simultaneously displayed nodes, infinite loops, etc. and analyze the consequences. Such analysis is most valuable to hypertext authors, whose biggest problem is the creation of the most appropriate links. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> BROWN, P. </author> <title> A hypertext system for unix. </title> <booktitle> Computing Systems 2, 1 (1989), </booktitle> <pages> 37-53. </pages>
Reference-contexts: A typical example in which the source nodes remain accessible is the Unix Guide system <ref> [1] </ref> with in-line (or should we say in window?) replacement of source anchors by the destination of a link. 2 A less typical example is Multicard [11], which generates windows on top of each other, thereby creating the illusion that the source node of a link is removed.
Reference: [2] <author> CAMPBELL, B., AND GOODMAN, J. </author> <title> HAM: a general purpose hypertext abstract machine. </title> <journal> Commun. ACM 31, </journal> <volume> 7 (1988), </volume> <pages> 856-861. </pages>
Reference-contexts: The main shortcoming in the previously quoted approaches is that they use a sometimes oversimplified view of the possible structures in hyperdocuments. Most hypertext models and systems provide richer structures than simple nodes and links, including Contexts <ref> [2] </ref>, Hypergraphs [17] and other forms of composite objects, like the Activity Spaces in Sepia [15, 16]. In [3] we proposed a more general model: the Extensible Data Model for Hyperdocuments, or Tower Model for short.
Reference: [3] <author> DE BRA, P., HOUBEN, G.-J., AND KORNATZKY, Y. </author> <title> An extensible data model for hyperdocuments. </title> <booktitle> In Proc. ACM Conf. on Hypertext'92 (Dec. </booktitle> <year> 1992), </year> <pages> pp. 222-231. </pages>
Reference-contexts: Most hypertext models and systems provide richer structures than simple nodes and links, including Contexts [2], Hypergraphs [17] and other forms of composite objects, like the Activity Spaces in Sepia [15, 16]. In <ref> [3] </ref> we proposed a more general model: the Extensible Data Model for Hyperdocuments, or Tower Model for short. <p> Hence the behavior of hyperdocuments can be analyzed with existing tools. The organization of this paper is as follows : in Section 2 we briefly recall the structural definitions of our Tower Model. We refer to <ref> [3] </ref> for details. In Section 3 we define the state of a hyperdocument, and discuss the possibilities for describing the browsing semantics by means of the possible transitions between states in a hyperdocument. In Section 4 we define the browsing operations (for the Tower Model). <p> We formalize the browsing semantics by means of special Petri nets, for which we then show how to emulate them using normal Petri nets. 2 The Tower Model revisited We briefly recall the basic definitions of the Tower Model from <ref> [3] </ref>. Definition 2.1 A node is described by a couple (i; v), where i is the object's identification and v is the node's value (its contents and/or state). <p> Definition 2.3 A composite value is a 4-tuple (c; n; l; a), where c is a composite constructor, n is a set of nodes, l a set of links and a a set of anchors. A composite constructor can be any kind of constructor <ref> [3] </ref>, including network, set and list constructors, etc., with all possible kinds of additional global information and constraints. So, not just networks. However, we only allow constructors whose behavior can be modeled using the kinds of automata we use for describing browsing, e. g. finite state machines or Petri nets.
Reference: [4] <author> ENGELBART, D. </author> <title> The augmented knowledge workshop. In A History of Personal Workstations (1988), </title> <publisher> Addison-Wesley, </publisher> <pages> pp. 187-236. </pages>
Reference-contexts: This can be an enumerated set or it can be a (possibly infinite) set of views that are calculated from a common object description. Cities are very much like the ViewSpecs defined by Engelbart <ref> [4] </ref>. Figure 2 gives a graphical representation of a city. A typical example of a city value is a mapping from angles to cross sections of a three dimensional object.
Reference: [5] <author> FURUTA, R., AND STOTTS, P. </author> <title> The Trellis hypertext reference model. </title> <booktitle> In Proc. of the Hypertext Standardization Workshop, National Institute of Standards (Jan. </booktitle> <year> 1990). </year>
Reference: [6] <author> HALASZ, F., AND SCHWARTZ, M. </author> <title> The Dexter hypertext reference model. </title> <booktitle> In Proc. of the Hypertext Standardization Workshop, National Institute of Standards (Jan. </booktitle> <year> 1990). </year>
Reference-contexts: Apart from basic and composite nodes and links, the model has a Tower constructor for describing different levels of description of the same object (somewhat similar to the layers in the Dexter model <ref> [6] </ref>), and a City constructor for describing different views of the same object. Hyperdocuments no longer look like simple graphs, and hence they cannot be easily described by automata. Also, the model does not forbid simultaneous access to different nodes, thus making the browsing process multithreaded.
Reference: [7] <author> HAREL, D. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Comp. Programming 8 (June 1988), </booktitle> <pages> 231-274. </pages>
Reference-contexts: In order to analyze the problems with a given hyperdocument one needs a formalism to describe the structure of the document and the potential ways the document can be used. To study the browsing semantics of a hyperdocument Zheng and Pong [19] use the statecharts <ref> [7] </ref> formalism, which is especially useful for modeling the behavior of hyperdocuments which contain composite structures. Stotts, Furuta and Ruiz [14] use automata theory. The set of all possible paths through a hyperdocument can be viewed as the language accepted by an automaton.
Reference: [8] <author> JENSEN, K. </author> <title> Coloured Petri Nets. Basic concepts, analysis methods and practical use. </title> <booktitle> EATCS monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This way it is possible to model multiple browsing sessions at the same time (see Stotts and Furuta [13]) or nodes having specific attributes like expiration dates, access control lists, etc. Petri nets extended with `time' and/or `color' have been investigated by many authors (e.g. <ref> [8, 18] </ref>) and analysis tools for these nets have been built. Some critics of timed and colored Petri nets observe that since these nets can simulate a Turing machine, most interesting problems become undecidable.
Reference: [9] <author> LANGE, D. </author> <title> A formal model of hypertext. </title> <booktitle> In Proc. of the Hypertext Standardization Workshop, National Institute of Standards (Jan. </booktitle> <year> 1990). </year>
Reference: [10] <author> MURATA, T. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE 77 (1989), </booktitle> <pages> 541-580. </pages>
Reference: [11] <author> RIZK, A., AND SAUTER, L. Multicard: </author> <title> An open hypermedia system. </title> <booktitle> In Proc. ACM Conf. on Hypertext'92 (Dec. </booktitle> <year> 1992), </year> <pages> pp. 4-10. </pages>
Reference-contexts: A typical example in which the source nodes remain accessible is the Unix Guide system [1] with in-line (or should we say in window?) replacement of source anchors by the destination of a link. 2 A less typical example is Multicard <ref> [11] </ref>, which generates windows on top of each other, thereby creating the illusion that the source node of a link is removed. By moving windows however the source node can be shown to still be accessible.
Reference: [12] <author> SHNEIDERMAN, B. </author> <title> User interface design for the hyperties electronic encyclopedia. </title> <booktitle> In Proc. ACM Hypertext'87 Conf. </booktitle> <month> (Nov. </month> <year> 1987), </year> <pages> pp. 189-194. </pages>
Reference-contexts: Most systems provide a button to go back to the last node that was displayed, and another button to go back to a start- or index-node. An example is the Hyperties system <ref> [12] </ref>. Also, some systems provide a button to remove old nodes from the screen explicitly. An example of this feature is found in the Trellis system [13]. This button behaves like a link with an empty destination anchor.
Reference: [13] <author> STOTTS, P., AND FURUTA, R. </author> <title> Petri-net-based hypertext: Document structure with browsing semantics. </title> <journal> ACM Trans. on Information Systems 7, </journal> <volume> 1 (1989), </volume> <pages> 3-29. </pages>
Reference-contexts: An example is the Hyperties system [12]. Also, some systems provide a button to remove old nodes from the screen explicitly. An example of this feature is found in the Trellis system <ref> [13] </ref>. This button behaves like a link with an empty destination anchor. We argue that the implicit links provided by these system-dependent features should be taken into account (in Section 4 we will show how concepts like guided tours and history-based navigation can be expressed using such (virtual) links). <p> It is also possible to use a colored Petri net ([8, 18]), i.e. a Petri net where each token has a specific value. This way it is possible to model multiple browsing sessions at the same time (see Stotts and Furuta <ref> [13] </ref>) or nodes having specific attributes like expiration dates, access control lists, etc. Petri nets extended with `time' and/or `color' have been investigated by many authors (e.g. [8, 18]) and analysis tools for these nets have been built.
Reference: [14] <author> STOTTS, P., FURUTA, R., AND RUIZ, J. </author> <title> Hyperdocuments as automata: Trace-based browsing property verification. </title> <booktitle> In Proc. ACM Conf. on Hypertext'92 (Dec. </booktitle> <year> 1992), </year> <pages> pp. 272-281. </pages>
Reference-contexts: To study the browsing semantics of a hyperdocument Zheng and Pong [19] use the statecharts [7] formalism, which is especially useful for modeling the behavior of hyperdocuments which contain composite structures. Stotts, Furuta and Ruiz <ref> [14] </ref> use automata theory. The set of all possible paths through a hyperdocument can be viewed as the language accepted by an automaton. The formalism of languages accepted by automata is very well known, and numerous tools for analyzing automata exist. <p> We call this a loop in the hyperdocument. Of course, since most hyperdocuments have only a finite number of nodes loops and dead-ends cannot both be avoided. In <ref> [14] </ref> Stotts, Furuta and Ruiz investigate the browsing semantics of hyperdocuments by primarily analyzing the documents themselves. They pay less attention to the hypermedia system for which these documents are intended and its associated browser features.
Reference: [15] <author> STREITZ, N., HAAKE, J., HANNEMANN, J., LEMKE, A., SCHULER, W., SCH UTT, H., AND TH URING, M. Sepia: </author> <title> a cooperative hypermedia authoring environment. </title> <booktitle> In Proc. ACM Conf. on Hypertext'92 (Dec. </booktitle> <year> 1992), </year> <pages> pp. 11-22. </pages>
Reference-contexts: Most hypertext models and systems provide richer structures than simple nodes and links, including Contexts [2], Hypergraphs [17] and other forms of composite objects, like the Activity Spaces in Sepia <ref> [15, 16] </ref>. In [3] we proposed a more general model: the Extensible Data Model for Hyperdocuments, or Tower Model for short. <p> The Argumentation Spaces in Sepia <ref> [15] </ref> form an excellent example of composite links. Step 5 (Reduction to standard Petri nets) Let BP N = (P; T ; F ) be the result of steps 1 to 4.
Reference: [16] <author> STREITZ, N., HANNEMANN, J., AND THURING, M. </author> <title> From ideas and arguments to hyperdocuments: Travelling through activity spaces. </title> <booktitle> In Proc. ACM Hypertext'89 Conf. </booktitle> <year> (1989), </year> <pages> pp. 343-364. </pages>
Reference-contexts: Most hypertext models and systems provide richer structures than simple nodes and links, including Contexts [2], Hypergraphs [17] and other forms of composite objects, like the Activity Spaces in Sepia <ref> [15, 16] </ref>. In [3] we proposed a more general model: the Extensible Data Model for Hyperdocuments, or Tower Model for short.
Reference: [17] <author> TOMPA, F. </author> <title> A data model for flexible hypertext database systems. </title> <journal> ACM Trans. on Information Systems 7, </journal> <month> 1 (Jan. </month> <year> 1989), </year> <pages> 85-100. </pages>
Reference-contexts: The main shortcoming in the previously quoted approaches is that they use a sometimes oversimplified view of the possible structures in hyperdocuments. Most hypertext models and systems provide richer structures than simple nodes and links, including Contexts [2], Hypergraphs <ref> [17] </ref> and other forms of composite objects, like the Activity Spaces in Sepia [15, 16]. In [3] we proposed a more general model: the Extensible Data Model for Hyperdocuments, or Tower Model for short. <p> Composites in the Tower Model simply provide a way to superimpose a grouping structure over the link structure. By turning the composites into objects themselves it becomes possible to provide links from basic nodes to composites and vice versa, like in Tompa's Hypergraph Model, <ref> [17] </ref> But, in addition to that model, we also consider composite links, which may for instance represent a series of arguments tying a set of premises to a conclusion. The Argumentation Spaces in Sepia [15] form an excellent example of composite links.
Reference: [18] <author> VAN DER AALST, W. </author> <title> Timed coloured Petri nets and their Application to Logistics. </title> <type> PhD thesis, </type> <institution> Eindhoven Univ. of Technology, </institution> <year> 1992. </year>
Reference-contexts: This can be modeled by adding a timestamp to the tokens in the Petri net (see <ref> [18] </ref>). Such a timed Petri net can be used to describe various aspects of the temporal behavior of the hyperdocument. * The anchors connected to a node may not all be accessible at the same time. Consider for instance an animation in which objects which are anchors appear and disappear. <p> This way it is possible to model multiple browsing sessions at the same time (see Stotts and Furuta [13]) or nodes having specific attributes like expiration dates, access control lists, etc. Petri nets extended with `time' and/or `color' have been investigated by many authors (e.g. <ref> [8, 18] </ref>) and analysis tools for these nets have been built. Some critics of timed and colored Petri nets observe that since these nets can simulate a Turing machine, most interesting problems become undecidable.
Reference: [19] <author> ZHENG, Y., AND PONG, M.-C. </author> <title> Using statecharts to model hypertext. </title> <booktitle> In Proc. ACM Conf. on Hypertext'92 (Dec. </booktitle> <year> 1992), </year> <pages> pp. 242-250. </pages>
Reference-contexts: In order to analyze the problems with a given hyperdocument one needs a formalism to describe the structure of the document and the potential ways the document can be used. To study the browsing semantics of a hyperdocument Zheng and Pong <ref> [19] </ref> use the statecharts [7] formalism, which is especially useful for modeling the behavior of hyperdocuments which contain composite structures. Stotts, Furuta and Ruiz [14] use automata theory. The set of all possible paths through a hyperdocument can be viewed as the language accepted by an automaton.
References-found: 19

