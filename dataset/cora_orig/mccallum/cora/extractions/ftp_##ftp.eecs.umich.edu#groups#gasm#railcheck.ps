URL: ftp://ftp.eecs.umich.edu/groups/gasm/railcheck.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: The Railroad Crossing Problem: Towards Semantics of Timed Algorithms and their Model Checking in High
Author: Daniele Beauquier Anatol Slissenko 
Address: Paris, France  SP IIRAN St-Petersburg, Russia  
Affiliation: Universite Paris-12 and L.I.T.P.,  Universite Paris-12 and L.I.T.P., Paris, France and Laboratory for Theory of Algorithms,  
Abstract: The goal of this paper is to analyse semantics of algorithms with explicit continuous time with further aim to find approaches to automatize model checking in high level, easily understandable languages. We give here a general notion of timed transition system and its formula representation that are sufficient to deal with some known examples of timed algorithms. We prove that the general semantics gives the same executions as direct, more intuitive interpretations of executions of algorithms. In a way, we try to give a general treatment of considerations of Yu.Gurevich and his co-authors concerning concrete Gurevich machines (called evolving algebras in [Gur95]), in particular, related to Railroad Crossing Problem [GH96]. Besides that we formalize specifications of this problem in a high level language which permits to rewrite directly natural language formulations, and to give a formal proof of correctness of the railroad crossing algorithm using rather a small amount of logical means, and this leads to hypotheses how automatize inference search.
Abstract-found: 1
Intro-found: 1
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Workshop on Theory of Hybrid Systems, </booktitle> <year> 1992, </year> <pages> pages 209-229. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year> <title> Lect. </title> <journal> Notes in Comput. Sci, </journal> <volume> vol. 736. </volume> <pages> 11 </pages>
Reference-contexts: As we remarked earlier a standard way of presentation of functioning of an algorithm is this or that notion of abstract automaton. For algorithms with time some of their features can be represented as timed automata [AD94] or various hybrid automata, e. g. <ref> [ACHH93] </ref>, etc. <p> We can effectively treat only finitely represented transition systems. To arrive at such a notion we are to coarse the states into finite number of sets (see e. g. <ref> [ACHH93] </ref>). Rather a general way of such representation is representation in terms of logic formulas. To construct formulas we use variables for elements of S V and S and the notation for projections introduced above.
Reference: [AD94] <author> R. Alur and D. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The profound analysis of treatment of continuous time given in [GH96] was an essential stimulus for our work. Efficient algorithms for model checking are mostly associated with temporal logics [Eme90] as requirement specification languages, and with timed automata <ref> [AD94] </ref> or regular process algebras [Mil90] as algorithms specification languages. Whatever impressive be the achievements of research on temporal logics and their applications to model checking (e. g. [Eme90, Eme96, MP92]), some of their evident shortcomings such as hardness of understanding of temporal logic formulas inhibit their wide practical applications. <p> As we remarked earlier a standard way of presentation of functioning of an algorithm is this or that notion of abstract automaton. For algorithms with time some of their features can be represented as timed automata <ref> [AD94] </ref> or various hybrid automata, e. g. [ACHH93], etc.
Reference: [BS96] <author> D. Beauquier and A. Slissenko. </author> <title> The railroad crossing problem: Towards semantics of timed algorithms and their model checking in high level languages. </title> <institution> TR-96-10, Dept. of Informatics, Univ. Paris-12, 24p., </institution> <year> 1996. </year>
Reference-contexts: On Model Checking Proof. Theorem 1 The Railroad Crossing Algorithm satisfies (Safety) and (Depend ability) properties. The proof of theorem 1 <ref> [BS96] </ref> shows that the only non trivial inference search rule is to take inf when eliminating positive quantifiers.
Reference: [Eme90] <author> A. Emerson. </author> <title> Temporal and model logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science. Vol. B: Formal Models and Semat-ics, </booktitle> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1990. </year>
Reference-contexts: Our analysis of the Railroad Crossing Problem is based on Gurevich-Huggins paper [GH96]. The profound analysis of treatment of continuous time given in [GH96] was an essential stimulus for our work. Efficient algorithms for model checking are mostly associated with temporal logics <ref> [Eme90] </ref> as requirement specification languages, and with timed automata [AD94] or regular process algebras [Mil90] as algorithms specification languages. <p> Efficient algorithms for model checking are mostly associated with temporal logics [Eme90] as requirement specification languages, and with timed automata [AD94] or regular process algebras [Mil90] as algorithms specification languages. Whatever impressive be the achievements of research on temporal logics and their applications to model checking (e. g. <ref> [Eme90, Eme96, MP92] </ref>), some of their evident shortcomings such as hardness of understanding of temporal logic formulas inhibit their wide practical applications.
Reference: [Eme96] <author> A. Emerson. </author> <title> Automated temporal reasoning about reactive systems. </title> <editor> In F. Moller and G. Birtwistle, editors, </editor> <booktitle> Logic for Concurrency. Structure versus Automata, </booktitle> <pages> pages 41-101. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <title> Series: </title> <booktitle> "Lecture notes in Computer Science (Tutorial)", </booktitle> <volume> Vol. </volume> <pages> 1043. </pages>
Reference-contexts: Efficient algorithms for model checking are mostly associated with temporal logics [Eme90] as requirement specification languages, and with timed automata [AD94] or regular process algebras [Mil90] as algorithms specification languages. Whatever impressive be the achievements of research on temporal logics and their applications to model checking (e. g. <ref> [Eme90, Eme96, MP92] </ref>), some of their evident shortcomings such as hardness of understanding of temporal logic formulas inhibit their wide practical applications.
Reference: [GH96] <author> Yu. Gurevich and J. Huggins. </author> <title> The railroad crossing problem: an experiment with instantaneous actions and immediate reactions. </title> <editor> In Buning, H. K., editor, </editor> <booktitle> Computer Science Logics, Selected papers from CSL'95, </booktitle> <pages> pages 266-290. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> Lect. Notes in Comput. Sci, vol. 1092. </note>
Reference-contexts: We hope that some useful algorithmic tools can be developed for classes of problems containg practical ones, and the presented analysis leads to some hypotheses on what features of systems under consideration might assure efficiency. Our analysis of the Railroad Crossing Problem is based on Gurevich-Huggins paper <ref> [GH96] </ref>. The profound analysis of treatment of continuous time given in [GH96] was an essential stimulus for our work. Efficient algorithms for model checking are mostly associated with temporal logics [Eme90] as requirement specification languages, and with timed automata [AD94] or regular process algebras [Mil90] as algorithms specification languages. <p> Our analysis of the Railroad Crossing Problem is based on Gurevich-Huggins paper <ref> [GH96] </ref>. The profound analysis of treatment of continuous time given in [GH96] was an essential stimulus for our work. Efficient algorithms for model checking are mostly associated with temporal logics [Eme90] as requirement specification languages, and with timed automata [AD94] or regular process algebras [Mil90] as algorithms specification languages. <p> The Railroad Crossing Problem appears in various forms in papers on model checking of timed systems, we take a general version from <ref> [GH96] </ref>. An informal description of Railroad Crossing Problem is as follows. A railroad crossing has several parallel train tracks and a common gate. <p> Here we take as time the set of reals T 0 = df R, and, for the purposes of treatment of instantaneous actions, extend it to the set T by non standard numbers and, for technical reasons, by a special symbol 1 to follow <ref> [GH96] </ref>. For basic requirement specifications, that treat user's properties of the system under consideration, we use only T 0 . The treatment of infinitesimals will be semantical, and we will distinguish the two sets, that of standard time T 0 and its extension T by non standards elements. <p> alseg is a predicate which expresses the fact that a train is in the crossing (and, thus, the gate must be closed). * An important technical notion characterizing when the controller may open the gate is Safe To Open that we formulate in a form not equivalent to that of <ref> [GH96] </ref> which is in some sense more precise with respect to intuitive demands 4 of dependability: SafeToOpenSp fl (t)= df 8x (Empty (t; x) _ 8t t (8t 0 2 [t; t] Coming (t 0 ; x) ! t &lt; t + WaitTime). <p> The solution is simular to <ref> [GH96] </ref>, and just makes more precise one detail. This solution is self-explanatory, that is why we do not repeat the basic notions of Gurevich machines that can be found in [GH96] or in more detail in [Gur95]. 3.1 Gurevich Machine Solution of Railroad Crossing Problem. <p> The solution is simular to <ref> [GH96] </ref>, and just makes more precise one detail. This solution is self-explanatory, that is why we do not repeat the basic notions of Gurevich machines that can be found in [GH96] or in more detail in [Gur95]. 3.1 Gurevich Machine Solution of Railroad Crossing Problem. <p> Remark. The corresponding time dependant function for Saf eT oOpen fl (x) will be SafeToOpen fl (t; x), and we are to prove that this function correctly represents SafeToOpenSp fl (t; x) of logical specifications. Intuitive assumption on time durations in <ref> [GH96] </ref> says that Actions of algorithms are performed instantaneously. This thesis needs a precision. Such a precision will be done in subsection 3.2, informal discussion concerning many interesting subtleties can be found in [GH96]. <p> Intuitive assumption on time durations in <ref> [GH96] </ref> says that Actions of algorithms are performed instantaneously. This thesis needs a precision. Such a precision will be done in subsection 3.2, informal discussion concerning many interesting subtleties can be found in [GH96]. An algorithm for the Railroad Crossing Controller in terms of Gurevich machines is given on Fig. 1. 3.2 Semantics of the algorithm. Clear, that functioning of the algorithm for a given input can be represented as a map from time to its states.
Reference: [Gur95] <author> Yu. Gurevich. </author> <title> Evolving algebra 1993: Lipari guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 9-93. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: On the other hand, easily understandable formalisms usually have no efficient algorithmic support even for particular interesting classes of practical problems. As two "high-level" languages for specification we take: Gurevich machines <ref> [Gur95] </ref> for specifying algorithms, and an extension of theory of real addition to specify requirements. <p> The solution is simular to [GH96], and just makes more precise one detail. This solution is self-explanatory, that is why we do not repeat the basic notions of Gurevich machines that can be found in [GH96] or in more detail in <ref> [Gur95] </ref>. 3.1 Gurevich Machine Solution of Railroad Crossing Problem. <p> The algorithm under consideration has a block structure (that is a basic construction of Gurevich machines, see <ref> [Gur95] </ref>) if Cond 1 then M 1 endif if Cond 2 then M 2 endif : : : : : : : : : : : : if Cond k then M k endif where Cond i are conditions expressed by quantifier free formulas and M i are assignments of internal
Reference: [Han94] <author> H. A. Hansson. </author> <title> Time and Probability in Formal Design of Distributed Systems. </title> <publisher> Elsevier, </publisher> <year> 1994. </year> <title> Series: "Real Time Safety Critical System", </title> <journal> vol. </journal> <volume> 1. </volume> <editor> H. Zedan, </editor> <publisher> Series Ed. </publisher>
Reference-contexts: Lack of explicit time is among the shortcomings of temporal logics, and it is not easy to remedy them (see, e. g. <ref> [Han94] </ref>), not speaking that the initial idea of temporal logics was to avoid explicit usage of time. On the other hand, easily understandable formalisms usually have no efficient algorithmic support even for particular interesting classes of practical problems.
Reference: [Mil90] <author> R. Milner. </author> <title> Operational and algebraic semantics of concurrent processes. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science. Vol. B: Formal Models and Sematics, </booktitle> <pages> pages 1201-1242. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1990. </year>
Reference-contexts: The profound analysis of treatment of continuous time given in [GH96] was an essential stimulus for our work. Efficient algorithms for model checking are mostly associated with temporal logics [Eme90] as requirement specification languages, and with timed automata [AD94] or regular process algebras <ref> [Mil90] </ref> as algorithms specification languages. Whatever impressive be the achievements of research on temporal logics and their applications to model checking (e. g. [Eme90, Eme96, MP92]), some of their evident shortcomings such as hardness of understanding of temporal logic formulas inhibit their wide practical applications.
Reference: [MP92] <author> Z. Manna and A. Pnueli. </author> <title> Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer Verlag, </publisher> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style 12 </title>
Reference-contexts: Efficient algorithms for model checking are mostly associated with temporal logics [Eme90] as requirement specification languages, and with timed automata [AD94] or regular process algebras [Mil90] as algorithms specification languages. Whatever impressive be the achievements of research on temporal logics and their applications to model checking (e. g. <ref> [Eme90, Eme96, MP92] </ref>), some of their evident shortcomings such as hardness of understanding of temporal logic formulas inhibit their wide practical applications.
References-found: 10

