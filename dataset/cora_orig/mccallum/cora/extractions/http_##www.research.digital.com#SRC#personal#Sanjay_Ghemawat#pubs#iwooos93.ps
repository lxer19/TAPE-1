URL: http://www.research.digital.com/SRC/personal/Sanjay_Ghemawat/pubs/iwooos93.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Sanjay_Ghemawat/pubs.html
Root-URL: http://www.research.digital.com
Email: Email: sanjay@lcs.mit.edu  
Title: Disk Management for Object-Oriented Databases  
Author: Sanjay Ghemawat 
Affiliation: MIT Laboratory for Computer Science  
Abstract: Object-oriented databases provides persistent storage for a large number of objects. This paper proposes efficient disk management techniques for such databases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Carey et al. </author> <title> The OO7 benchmark. </title> <booktitle> In Proceedings of the 1993 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 12-21, </pages> <year> 1993. </year>
Reference-contexts: I plan to implement the three strategies as part of the Thor object-oriented database [4] and evaluate their performance under the OO7 benchmark <ref> [1] </ref>. Other benchmarks may also be used if necessary. My expectation is that the the log-structured strategy will not perform very well. It has performed well in file-systems because of the mostly sequential access patterns to fairly large files that are seen in those systems.
Reference: [2] <author> R. English and A. Stepanov. Loge: </author> <title> A self-organizing storage device. </title> <booktitle> In Winter Usenix Technical Conference, </booktitle> <year> 1992. </year>
Reference-contexts: It is harder to choose between the hybrid strategy and the in-place strategy. The hybrid strategy may be able to pick a better location for the segment it is writing out to disk. (Some of the techniques described in <ref> [2] </ref> may be applicable.) However, the space reclamation costs for the hybrid strategy may tip the balance in favor of the in-place strategy.
Reference: [3] <author> B. Liskov et al. </author> <title> Replication in the Harp file system. </title> <booktitle> In Proceedings of 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 226-38, </pages> <year> 1991. </year>
Reference-contexts: Commit latencies are reduced even further in Thor by storing the write-ahead log in processor memory instead of on disk using a technique similar to Harp <ref> [3] </ref>. (Stability is guaranteed by replicating the in-memory write-ahead log and using unin-terruptible power supplies to guard against power failures.) 1.4 Log-Structured Storage As the write-ahead log fills up, modifications have to be moved from the log to the database storage on disk.
Reference: [4] <author> B. Liskov et al. </author> <title> Distributed object management in Thor. </title> <editor> In M. T. Ozsu, U. Dayal, and P. Valduriez, editors, </editor> <booktitle> Distributed Object Management. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: File-systems on the other hand are typically accessed via operations that each modify a very small number of files (usually just one). The rest of this section describes some well-known implementation techniques that are being incorporated into the Thor object-oriented database <ref> [4] </ref> to improve the performance of the proposed disk management strategies. 1.1 Caching and Prefetching Objects are cached in volatile memory to reduce the number of disk accesses required to satisfy read requests. <p> I plan to implement the three strategies as part of the Thor object-oriented database <ref> [4] </ref> and evaluate their performance under the OO7 benchmark [1]. Other benchmarks may also be used if necessary. My expectation is that the the log-structured strategy will not perform very well.
Reference: [5] <author> M. Rosenblum and J. K. Ousterhout. </author> <title> The design and implementation of a log-structured file system. </title> <booktitle> In Proceedings of 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 1-15, </pages> <year> 1991. </year>
Reference-contexts: Performance will improve if these modifications are moved to the disk with a few large writes instead of small writes of individual objects. One technique for achieving this is to organize the entire disk as a big log <ref> [5] </ref>. When the in-memory write-ahead log fills up, its contents can be transferred to the on-disk log with big sequential writes. <p> This strategy should provide good read performance. Write performance will be improved by smart scheduling of writes that move modifications from the log to the disk. 2.2 Log-Structured The log-structured strategy organizes all available disk space as a log as described in Section 1.4 and <ref> [5] </ref>. As the in-memory log fills up, its contents are appended to the disk log. This strategy has the potential to perform well on writes because the contents of the memory log can be moved to the disk log with big sequential writes.
Reference: [6] <author> M. Seltzer et al. </author> <title> An implementation of a log-structured file system for UNIX. </title> <booktitle> In Winter Usenix Technical Conference, </booktitle> <pages> pages 201-220, </pages> <year> 1993. </year>
Reference-contexts: In addition, a recent The Log Objects from one segment file-system study has shown that under certain access patterns the overhead of reclaiming disk space in such a strategy can be high enough to completely negate any performance benefits provided by a log-structured disk organization <ref> [6] </ref>. 2.3 Hybrid The hybrid strategy also views the entire disk as a log. However, the hybrid strategy always appends entire segments to the disk log. Therefore the contents of a segment are always stored contiguously on disk. The hybrid strategy will provide good read performance like the in-place strategy.
References-found: 6

