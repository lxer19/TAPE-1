URL: file://ftp.di.unipi.it/pub/Papers/giacobazzi/esop96.ps.gz
Refering-URL: http://www.di.unipi.it/di/groups/lp/papers.html
Root-URL: 
Email: giaco@di.unipi.it  franz@hilbert.math.unipd.it  
Title: Compositional Optimization of Disjunctive Abstract Interpretations  
Author: Roberto Giacobazzi Francesco Ranzato 
Address: Corso Italia 40, 56125 Pisa, Italy  Via Belzoni 7, 35131 Padova, Italy  
Affiliation: Dipartimento di Informatica, Universita di Pisa  Dipartimento di Matematica Pura ed Applicata, Universita di Padova  
Abstract: We define the inverse operation for disjunctive completion, introducing the notion of least disjunctive basis for an abstract domain D: this is the most abstract domain inducing the same disjunctive completion as D. We show that the least disjunctive basis exists in most cases, and study its properties in relation with reduced product of abstract interpretations. The resulting framework is powerful enough to be applied to arbitrary abstract domains for analysis, providing advanced algebraic methods for domain manipulation and optimization. These notions are applied to abstract domains for analysis of functional and logic programming languages.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Armstrong, K. Marriott, P. Schachte, and H. Stndergaard. </author> <title> Boolean functions for dependency analysis: algebraic properties and efficient representation. </title> <booktitle> In Proc. of SAS '94, </booktitle> <volume> LNCS 864, </volume> <pages> pp. 266-280, </pages> <year> 1994. </year> <note> To appear in Sci. of Comp. Programming. </note>
Reference-contexts: Def is a domain of propositional formulae already existing in literature, introduced by Dart in [11] for groundness analysis in deductive databases, and used by Marriott and Stndergaard in [19] for ground-dependency analysis of logic programs. Recently, Armstrong et al. in <ref> [1] </ref> investigated various representations for the formulae in Pos and Def , and they experimentally compared the resulting precision and efficiency of these different static analyses. They showed that analyses using Pos achieve a higher precision than those using Def , although there is an additional cost relatively small. <p> However, this additional cost becomes relevant when lifting Pos and Def to the powerset, due to the combinatorial explosion of the disjunctive completion. In view of the work in <ref> [1] </ref>, the results of this section gain an important and significative practical impact: the disjunctive ground-dependency analysis of logic programs can be always obtained by disjunctive completion of Def , without losing precision and at a lower cost with respect to the disjunctive completion of Pos. <p> Def is the finite lattice of positive Boolean functions on VI whose models are closed under intersection. Formulae in Def are called definite. For more details about Pos and Def see <ref> [1, 19] </ref>. It is well known that Boolean functions can be represented by means of propositional formulae. Thus, in the following, we will use propositional formulae over VI to represent Boolean functions in Pos and Def . <p> , , , , l l l , l l l , l l l x x $ y y true * * * l l l , l l l , , , , l The domains Pos and Def for VI =fx ; y g As observed in <ref> [1] </ref>, Def is a meet-sublattice of Pos. Further, the top Boolean function true is in Def . Hence, Def is a Moore-family of Pos, namely, being (the set of fixpoints of) a closure operator on Pos, it is an abstract interpretation of Pos.
Reference: 2. <author> R. Barbuti, R. Giacobazzi, and G. Levi. </author> <title> A general framework for semantics-based bottom-up abstract interpretation of logic programs. </title> <journal> ACM TOPLAS, </journal> <volume> 15(1) </volume> <pages> 133-181, </pages> <year> 1993. </year>
Reference-contexts: The latter case includes the standard concrete domains for collecting semantics in functional and logic programming (e.g. <ref> [2, 23] </ref>). Complete lattices which are join-continuous and that satisfy the ascending chain condition are also dual-algebraic. Dual-algebraicity plays a fundamental role in Theorem 4.5. In general, if C is not dual-algebraic, then it might exist 2 uco (C ) non-disjunctively optimizable.
Reference: 3. <author> G. Birkhoff. </author> <title> Lattice Theory. </title> <journal> AMS Colloq. Publ., </journal> <volume> vol. XXV, </volume> <editor> 3rd ed., </editor> <year> 1967. </year>
Reference-contexts: This shows that Def , which is strictly less expensive than Pos ([6, 19]), always induces the same disjunctive ground-dependency analysis, i.e., (Pos) = Def . Throughout the paper, we assume familiarity with lattice theory (e.g. see <ref> [3, 14] </ref>), in particular closure operators (see [20, 28]), and abstract interpretation ([7, 8]). 2 Abstract Interpretation and Closure Operators The standard Cousot and Cousot theory of abstract interpretation is based on the notion of Galois connection ([7, 8]).
Reference: 4. <author> G.L. Burn, C.L. Hankin, and S. Abramsky. </author> <title> Strictness analysis of higher-order func tions. </title> <journal> Sci. of Comp. Programming, </journal> <volume> 7 </volume> <pages> 249-278, </pages> <year> 1986. </year>
Reference: 5. <author> A. Cortesi, G. File, R. Giacobazzi, C. Palamidessi, and F. Ranzato. </author> <title> Complementation in abstract interpretation. </title> <booktitle> In Proc. of SAS '95, </booktitle> <volume> LNCS 983, </volume> <pages> pp. 100-117, </pages> <year> 1995. </year>
Reference-contexts: A natural question is: can we invert a process of "domain refinement"? Namely, can we reconstruct the "least basis" which induces a given domain by composition or completion? Recently, <ref> [5] </ref> attacked the problem of inverting reduced product, introducing the notion of complementation in abstract interpretation. Complementation provides an important tool for abstract domain decomposition into attribute independent factors. In this paper, we consider the inverse for the remaining fundamental operation of disjunctive completion, denoted . <p> C and x 2 C , x ^ (_Y ) = _ y2Y (x ^ y)) and C v D then C ~ D always exists, and can be defined as C ~ D = tf 2 uco (C ) j ( D u )(C ) = C g (cf. <ref> [5] </ref>). 3 Disjunctive Completions by Closures In this section, we formulate by closure operators the standard Cousot and Cousot definition of disjunctive completion of an abstract domain ([8]), and introduce some basic properties. Let C be any complete lattice, and consider its lattice of abstract interpretations uco (C ).
Reference: 6. <author> A. Cortesi, G. File, and W. Winsborough. </author> <title> Prop revisited: propositional formula as abstract domain for groundness analysis. </title> <booktitle> In Proc. of LICS '91, </booktitle> <pages> pp. 322-327, </pages> <year> 1991. </year>
Reference-contexts: Hence, Def is a Moore-family of Pos, namely, being (the set of fixpoints of) a closure operator on Pos, it is an abstract interpretation of Pos. The abstraction and concretization maps between Pos, Def and -(Sub) are well known, and can be found, e.g., in <ref> [6, 19] </ref>.
Reference: 7. <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proc. of ACM POPL '77, </booktitle> <pages> pp. 238-252. </pages> <year> 1977. </year>
Reference: 8. <author> P. Cousot and R. Cousot. </author> <title> Systematic design of program analysis frameworks. </title> <booktitle> In Proc. of ACM POPL '79, </booktitle> <pages> pp. 269-282, </pages> <year> 1979. </year>
Reference-contexts: It is evident that the above definition corresponds exactly to the standard definition of disjunctive completion given by means of Galois connections (cf. <ref> [8, 9, 10, 12] </ref>). This notion is also comprehensive for other forms of disjunctive completions: e.g., disjunctive and order-ideal completions (e.g. [17]) are equivalent (see [10]). Moreover, whenever D satisfies the ascending chain condition, disjunctive, Scott-closed ideal and anti-chain completions are equivalent (see [10]).
Reference: 9. <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation and application to logic programs. </title> <journal> J. of Logic Programming, </journal> <volume> 13(2,3):103-179, </volume> <year> 1992. </year>
Reference-contexts: The Cousot and Cousot functional combination by reduced power ([8]), and Nielson's tensor product ([25]) were the first systematic methods to induce relational analyses by combining abstract domains. Cousot and Cousot showed in <ref> [9] </ref> that a relational analysis can be induced by combining reduced product (denoted u) and disjunctive completion (de-noted 0) of abstract domains. If D 1 and D 2 are abstract domains, a corresponding domain for relational analysis can always be defined as 0 (D 1 u D 2 ). <p> It is evident that the above definition corresponds exactly to the standard definition of disjunctive completion given by means of Galois connections (cf. <ref> [8, 9, 10, 12] </ref>). This notion is also comprehensive for other forms of disjunctive completions: e.g., disjunctive and order-ideal completions (e.g. [17]) are equivalent (see [10]). Moreover, whenever D satisfies the ascending chain condition, disjunctive, Scott-closed ideal and anti-chain completions are equivalent (see [10]).
Reference: 10. <author> P. Cousot and R. Cousot. </author> <title> Higher-order abstract interpretation (and application to comportment analysis generalizing strictness, termination, projection and PER analysis of functional languages). </title> <booktitle> In Proc. of IEEE ICCL '94, </booktitle> <pages> pp. 95-112, </pages> <year> 1994. </year>
Reference-contexts: It is evident that the above definition corresponds exactly to the standard definition of disjunctive completion given by means of Galois connections (cf. <ref> [8, 9, 10, 12] </ref>). This notion is also comprehensive for other forms of disjunctive completions: e.g., disjunctive and order-ideal completions (e.g. [17]) are equivalent (see [10]). Moreover, whenever D satisfies the ascending chain condition, disjunctive, Scott-closed ideal and anti-chain completions are equivalent (see [10]). <p> It is evident that the above definition corresponds exactly to the standard definition of disjunctive completion given by means of Galois connections (cf. [8, 9, 10, 12]). This notion is also comprehensive for other forms of disjunctive completions: e.g., disjunctive and order-ideal completions (e.g. [17]) are equivalent (see <ref> [10] </ref>). Moreover, whenever D satisfies the ascending chain condition, disjunctive, Scott-closed ideal and anti-chain completions are equivalent (see [10]). Proposition 3.3 0 C 2 lco (uco (C )). <p> This notion is also comprehensive for other forms of disjunctive completions: e.g., disjunctive and order-ideal completions (e.g. [17]) are equivalent (see <ref> [10] </ref>). Moreover, whenever D satisfies the ascending chain condition, disjunctive, Scott-closed ideal and anti-chain completions are equivalent (see [10]). Proposition 3.3 0 C 2 lco (uco (C )). The meaning of the above proposition is clear: the disjunctive completion is a domain refinement (viz., a monotonic and reductive mapping in uco (C )). <p> basis operator is neither monotonic nor anti-monotonic, since C (D ) and C (E ) are incomparable abstractions of C . 2 6 Functional Programming: Optimizing Comportment Analysis In this section, we apply the theory of the least disjunctive basis to the comportment analysis, designed by Cousot and Cousot in <ref> [10] </ref> to generalize Mycroft's strictness truth fl fi!fi (top) = D fi!fi strictness fl fi!fi (str) = ff j f (?) = ?g totality fl fi!fi (tot) = ff j 8x 2 D fi n f?g: f (x ) 6= ?g identity fl fi!fi (ide) = ff j 8x 2 D <p> The meaning of basic comportments in B C is given in Table 1, in terms of a concretization function fl fi!fi mapping basic comportments into h-(D fi!fi ); i, which is the concrete domain of the collecting semantics. As proved by Cousot and Cousot in <ref> [10] </ref>, more precise comportment properties for higher-order functional languages can be characterized by disjunctive completion of the lattice B C of basic comportment analysis.
Reference: 11. <author> P. </author> <title> Dart. On derived dependencies and connected databases. </title> <journal> J. of Logic Programming, </journal> <volume> 11(2) </volume> <pages> 163-188, </pages> <year> 1991. </year>
Reference-contexts: We show that the least disjunctive basis for the disjunctive completion of Pos is the domain Def , which is a proper abstraction of Pos. Def is a domain of propositional formulae already existing in literature, introduced by Dart in <ref> [11] </ref> for groundness analysis in deductive databases, and used by Marriott and Stndergaard in [19] for ground-dependency analysis of logic programs.
Reference: 12. <author> G. File and F. Ranzato. </author> <title> Improving abstract interpretations by systematic lifting to the powerset. </title> <booktitle> In Proc. of ILPS '94, </booktitle> <pages> pp. 655-669, </pages> <year> 1994. </year>
Reference-contexts: It is evident that the above definition corresponds exactly to the standard definition of disjunctive completion given by means of Galois connections (cf. <ref> [8, 9, 10, 12] </ref>). This notion is also comprehensive for other forms of disjunctive completions: e.g., disjunctive and order-ideal completions (e.g. [17]) are equivalent (see [10]). Moreover, whenever D satisfies the ascending chain condition, disjunctive, Scott-closed ideal and anti-chain completions are equivalent (see [10]). <p> The disjunctive completion of Pos has been recently studied by File and Ranzato in <ref> [12] </ref>, where it has been shown that it is strictly more precise than Pos itself. In a sense, this was a surprising result, since the fact that Pos is closed under logical disjunction should lead to an opposite conclusion. <p> Thus, f 1 ; 2 g fl (x ^ (y $ z )). 5 By a; b; c; : : :, we denote ground terms. The least disjunctive basis of Pos is Def . File and Ranzato showed in <ref> [12] </ref> that 0 -(Sub) (Pos) &lt; Pos, i.e. there is a strict improvement in precision lifting Pos to its disjunctive completion.
Reference: 13. <author> G. File and F. Ranzato. </author> <title> The powerset operator on abstract interpretations. </title> <type> Tech. Rep., </type> <institution> Dip. di Matematica Pura ed Appl., U. di Padova, </institution> <year> 1995. </year>
Reference-contexts: Sets of positive formulae for which logical (i.e., in Pos) and concrete (i.e., in -(Sub)) disjunctions coincide have been characterized as follows (cf. <ref> [13] </ref>). Theorem 7.1 ([13]) If ; 6= Pos then [ffl (f ) j f 2 g = fl (_) , 8g 2 Def : ((g j= _) ) (9f 2 : g j= f )): By Theorem 7.1, the disjunctive completion of Pos (after reduction), for VI = fx ; yg,
Reference: 14. <author> G. Gierz, K.H. Hofmann, K. Keimel, J.D. Lawson, M. Mislove, and D.S. Scott. </author> <title> A Compendium of Continuous Lattices. </title> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: This shows that Def , which is strictly less expensive than Pos ([6, 19]), always induces the same disjunctive ground-dependency analysis, i.e., (Pos) = Def . Throughout the paper, we assume familiarity with lattice theory (e.g. see <ref> [3, 14] </ref>), in particular closure operators (see [20, 28]), and abstract interpretation ([7, 8]). 2 Abstract Interpretation and Closure Operators The standard Cousot and Cousot theory of abstract interpretation is based on the notion of Galois connection ([7, 8]).
Reference: 15. <author> S. Hunt. </author> <title> PERs generalize projections for strictness analysis. </title> <booktitle> In Proc. of the 1990 Glasgow Funct. Progr. Workshop, </booktitle> <pages> pp. 156-168. </pages> <publisher> Springer Workshops in Comp., </publisher> <year> 1990. </year>
Reference: 16. <author> D. Jacobs and A. Langen. </author> <title> Static analysis of logic programs for independent AND parallelism. </title> <journal> J. of Logic Programming, </journal> <volume> 13(2,3):154-165, </volume> <year> 1992. </year>
Reference: 17. <author> T.P. Jensen. </author> <title> Disjunctive strictness analysis. </title> <booktitle> In Proc. of LICS '92, </booktitle> <pages> pp. 174-185. </pages> <year> 1992. </year>
Reference-contexts: It is evident that the above definition corresponds exactly to the standard definition of disjunctive completion given by means of Galois connections (cf. [8, 9, 10, 12]). This notion is also comprehensive for other forms of disjunctive completions: e.g., disjunctive and order-ideal completions (e.g. <ref> [17] </ref>) are equivalent (see [10]). Moreover, whenever D satisfies the ascending chain condition, disjunctive, Scott-closed ideal and anti-chain completions are equivalent (see [10]). Proposition 3.3 0 C 2 lco (uco (C )).
Reference: 18. <editor> N.D. Jones and S.S. Muchnick. </editor> <title> Complexity of flow analysis, inductive assertion synthe sis and a language due to Dijkstra. In Program Flow Analysis: </title> <booktitle> Theory and Applications, </booktitle> <pages> pp. 380-393. </pages> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference: 19. <author> K. Marriott and H. Stndergaard. </author> <title> Precise and efficient groundness analysis for logic programs. </title> <journal> ACM LOPLAS, </journal> <volume> 2(1-4):181-196, </volume> <year> 1993. </year>
Reference-contexts: Def is a domain of propositional formulae already existing in literature, introduced by Dart in [11] for groundness analysis in deductive databases, and used by Marriott and Stndergaard in <ref> [19] </ref> for ground-dependency analysis of logic programs. Recently, Armstrong et al. in [1] investigated various representations for the formulae in Pos and Def , and they experimentally compared the resulting precision and efficiency of these different static analyses. <p> Def is the finite lattice of positive Boolean functions on VI whose models are closed under intersection. Formulae in Def are called definite. For more details about Pos and Def see <ref> [1, 19] </ref>. It is well known that Boolean functions can be represented by means of propositional formulae. Thus, in the following, we will use propositional formulae over VI to represent Boolean functions in Pos and Def . <p> Hence, Def is a Moore-family of Pos, namely, being (the set of fixpoints of) a closure operator on Pos, it is an abstract interpretation of Pos. The abstraction and concretization maps between Pos, Def and -(Sub) are well known, and can be found, e.g., in <ref> [6, 19] </ref>.
Reference: 20. <author> J. Morgado. </author> <title> Some results on the closure operators of partially ordered sets. Port. </title> <journal> Math., </journal> <volume> 19(2) </volume> <pages> 101-139, </pages> <year> 1960. </year>
Reference-contexts: This shows that Def , which is strictly less expensive than Pos ([6, 19]), always induces the same disjunctive ground-dependency analysis, i.e., (Pos) = Def . Throughout the paper, we assume familiarity with lattice theory (e.g. see [3, 14]), in particular closure operators (see <ref> [20, 28] </ref>), and abstract interpretation ([7, 8]). 2 Abstract Interpretation and Closure Operators The standard Cousot and Cousot theory of abstract interpretation is based on the notion of Galois connection ([7, 8]). In this section, we briefly introduce some notation and recall some well known notions.
Reference: 21. <author> A. Mycroft. </author> <title> The theory and practice of transforming call-by-need into call-by-value. </title> <booktitle> In Proc. of the 4th Int. Symp. on Programming, </booktitle> <volume> LNCS 83, </volume> <pages> pp. 270-281, </pages> <year> 1980. </year>
Reference: 22. <author> A. Mycroft. </author> <title> Abstract interpretation and optimizing transformations for applicative pro grams. </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, U. of Edinburgh, CST-15-81, </institution> <year> 1981. </year>
Reference: 23. <author> A. Mycroft and F. Nielson. </author> <title> Strong abstract interpretation using power domains. </title> <booktitle> In Proc. of ICALP '83, </booktitle> <volume> LNCS 154, </volume> <pages> pp. 536-547, </pages> <year> 1983. </year>
Reference-contexts: The latter case includes the standard concrete domains for collecting semantics in functional and logic programming (e.g. <ref> [2, 23] </ref>). Complete lattices which are join-continuous and that satisfy the ascending chain condition are also dual-algebraic. Dual-algebraicity plays a fundamental role in Theorem 4.5. In general, if C is not dual-algebraic, then it might exist 2 uco (C ) non-disjunctively optimizable.
Reference: 24. <author> F. Nielson. </author> <title> Abstract interpretation using domain theory. </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Com puter Science, U. of Edinburgh, CST-31-84, </institution> <year> 1984. </year>
Reference-contexts: However, the use of join-irreducible elements to represent disjunctive properties is definitely not new, in particular in relation with the work of Nielson. Join-irreducible elements were firstly investigated in the context of abstract interpretation in <ref> [24] </ref>, with the aim of giving an alternative (more concise) representation for the relational (Hoare) powerdomain in analysis of typed functional languages. We extend Nielson's idea in the definition of our notion of least disjunctive basis. <p> Least disjunctive bases are more general in this sense, since join-irreducible elements can only represent domains which are already disjunctive. The least disjunctive basis operator is applicable to arbitrary abstract interpretations, provided that the hypotheses of Theorem 4.4 or Theorem 4.5 are satisfied. In <ref> [24] </ref>, Nielson investigates also the situation where the abstraction function maps join-irreducibile elements to join-irreducibile elements, defining the notion of expected form for an abstract interpretation, further studied in [26]. This is a related topic, and provides an interesting application of least disjunctive bases.
Reference: 25. <author> F. Nielson. </author> <title> Tensor products generalize the relational data flow analysis method. </title> <booktitle> In Proc. of the 4th Hung. Computer Science Conf., </booktitle> <pages> pp. 211-225, </pages> <year> 1985. </year>
Reference: 26. <author> F. Nielson. </author> <title> Expected forms of data flow analysis. In Programs as Data Objects, </title> <publisher> LNCS 217, </publisher> <pages> pp. 192-205, </pages> <year> 1986. </year>
Reference-contexts: In [24], Nielson investigates also the situation where the abstraction function maps join-irreducibile elements to join-irreducibile elements, defining the notion of expected form for an abstract interpretation, further studied in <ref> [26] </ref>. This is a related topic, and provides an interesting application of least disjunctive bases. Nielson suggests the use of expected forms in order to simplify the implementation of functionals induced in abstract interpretation of denotational semantics. <p> The aim of expected forms is therefore similar to that of least disjunctive bases, both providing sensible simplifications in abstract interpretation design. In particular, some expected forms defined on collecting semantics, i.e. on some powerset domain, (e.g. for cond in <ref> [26] </ref>) can be viewed as functionals on the least disjunctive basis of the abstract domain. Acknowledgments. We would like to thank Patrick Cousot, Gilberto File and Harald Stndergaard for many stimulating discussions on the subject of this paper.
Reference: 27. <author> P.L. Wadler and R.J.M. Hughes. </author> <title> Projections for strictness analysis. </title> <booktitle> In Proc. of FPCA '87, </booktitle> <volume> LNCS 274, </volume> <pages> pp. 385-407, </pages> <year> 1987. </year>
Reference: 28. <author> M. Ward. </author> <title> The closure operators of a lattice. </title> <journal> Ann. of Math., </journal> <volume> 43(2) </volume> <pages> 191-196, </pages> <year> 1942. </year>
Reference-contexts: This shows that Def , which is strictly less expensive than Pos ([6, 19]), always induces the same disjunctive ground-dependency analysis, i.e., (Pos) = Def . Throughout the paper, we assume familiarity with lattice theory (e.g. see [3, 14]), in particular closure operators (see <ref> [20, 28] </ref>), and abstract interpretation ([7, 8]). 2 Abstract Interpretation and Closure Operators The standard Cousot and Cousot theory of abstract interpretation is based on the notion of Galois connection ([7, 8]). In this section, we briefly introduce some notation and recall some well known notions.
References-found: 28

