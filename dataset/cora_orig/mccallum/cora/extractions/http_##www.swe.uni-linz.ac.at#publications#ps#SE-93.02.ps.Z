URL: http://www.swe.uni-linz.ac.at/publications/ps/SE-93.02.ps.Z
Refering-URL: http://infosoft.soft.uni-linz.ac.at/Info/Publications.html
Root-URL: 
Title: ObjectOriented Process Control Software  
Author: Pirklbauer K., Plsch R., Weinreich R. 
Address: Altenbergerstr. 69, A-4040 Linz, Austria  
Affiliation: C. Doppler Laboratory for Software Engineering Johannes Kepler University of Linz  
Date: May 1994  
Note: published in Journal of ObjectOreinted Programming,  
Abstract: The cycle from one release of a software product to the next is becoming shorter and shorter. Especially for custom software products (nonstandard software), implementation productivity needs to be increased. The reuse of prefabricated software components and the implementation of reusable and extensible software are of great importance. The object-oriented programming paradigm has already proven to fulfill these demands in the area of graphical user interfaces or visualization in general, but its applicability undoubtedly extends beyond user interfaces. Thus we initiated a project with the aim to examine the impact objectoriented programming can have on the design and implementation of automation software. In this paper we present a framework for process automation software which was implemented on SUN SPARC stations using ET++ (a user interface application framework) and C++. In addition to the design of the framework, we describe the implementation of a process control software for a ladle furnace (part of a steel plant) using our framework. 
Abstract-found: 1
Intro-found: 1
Reference: [Gold85] <author> Goldberg A., Robson D.: </author> <title> Smalltalk-80The Language and its Implementation, </title> <publisher> Addison Wesley, </publisher> <year> 1985 </year>
Reference-contexts: Especially the OOP mechanisms like inheritance, polymorphism and dynamic binding enable the development of more flexible, more easily maintainable, and less error-prone software. 2 Demonstrations of the power of this new programming paradigm have already been given in various projects. Most of these projectsfrom the Smalltalk system <ref> [Gold85] </ref> until nowhave been in the area of highly interactive graphical user interfaces. But there is no reason to suppose that OOPs facilitating power should be limited to the implementation of user interfaces.
Reference: [Schmu86] <author> Schmucker K.: </author> <title> ObjectOriented Programming for the Macintosh, </title> <publisher> Hayden Book Company, </publisher> <address> Hasbrouck Heights, N.J., </address> <year> 1986 </year>
Reference-contexts: This objectoriented framework for process control software is named ProcessTalk. Process-Talk is an application framework as defined in <ref> [Schmu86] </ref>. It was implemented in C++ using the application framework ET++ [Wein89] on SUN workstations. As such, ProcessTalk is an extension of the application framework ET++, which was developed for applications with highly interactive graphical user interfaces.
Reference: [Serv90] <author> Servio Corporation: </author> <title> GemStone C++ Interface, </title> <publisher> Servio Corporation, </publisher> <year> 1990 </year>
Reference-contexts: GemStone OServer Process OServer abstract class interface to object manager process interface to oo. database GemStone Object Server The currently implemented interfaces are depicted in Figure 6. The class GemStoneOServer provides an interface to the objectoriented database GemStone <ref> [Serv90] </ref>. The class ProcessOServer is an interface to object managers that we implemented. Object managers are processes managing objects in memory. They are lightweight and provide a higher degree of performance than an objectoriented database. However, the consistency of data is preserved only by a simple locking mechanism.
Reference: [Sun90] <author> Sun Microsystems Inc.: </author> <title> SunOS Reference Manuals, </title> <publisher> Sun Microsystems Inc., </publisher> <year> 1990 </year>
Reference-contexts: The underlying communication model is simple and was tailored to the special requirements of process automation. Nevertheless, it can easily be extended to meet further requirements. In the current implementation, each process may maintain one mailbox, which can be addressed by one UNIX interprocess communication (IPC) service <ref> [Sun90] </ref>. A communication manager, which is implemented as a class, manages the communication relationships among processes. An extension of the communication model, for example, to provide more than one mailbox per process, would require only a minor extension of the communication manager.
Reference: [Wein89] <author> Weinand A., Gamma E., Marty R.: </author> <title> Design and Implementation of ET++, a Seamless ObjectOriented Application Framework, in: </title> <journal> Structured Programming, </journal> <volume> Vol. 10., No. 2, </volume> <publisher> Springer-Verlag, </publisher> <year> 1989 </year>
Reference-contexts: This objectoriented framework for process control software is named ProcessTalk. Process-Talk is an application framework as defined in [Schmu86]. It was implemented in C++ using the application framework ET++ <ref> [Wein89] </ref> on SUN workstations. As such, ProcessTalk is an extension of the application framework ET++, which was developed for applications with highly interactive graphical user interfaces.
References-found: 5

