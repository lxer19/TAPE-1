URL: ftp://ftp.cse.unsw.edu.au/pub/users/andrewt/publications/1995/3.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/publications/1995/SCSE_publications.html
Root-URL: 
Email: adrian@watson.ibm.com  
Title: People Oriented Software Technology, and its Use in Environmental Reporting a task as English syllogisms,
Author: Terry Krueger, George Kurian, Anil Nair, Gustaf Neumann, Ulrich Neumerkel, Stefan Nusser, Peter Reintjes, Andrew Taylor, Daphne Tzoar, and Adrian Walker Adrian Walker 
Note: All correspondence to:  specify  
Abstract: Keywords: People oriented, specification, Syllog, English application authoring, accountability, surety, knowledge interchange, environmental reporting Abstract We describe a software technology that is "people oriented", in the sense that it allows us to: In our approach, English words take their meaning from their context, rather than from a separately maintained dictionary and grammar. This makes it easy to write down knowledge with specialized words and phrases, such as "Environmental Protection Agency Form R", and then to run the knowledge directly. The knowledge in a specification is directly compiled and interpreted according to a formal theory of highly declarative knowledge. This eliminates the troublesome and expensive gap that often arises between a specification of a task and a program that is supposed to do the task, by eliminating the program. It is not necessary to know about the theory in order to write and to run specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [ABW88] <author> Apt, K., H. Blair and A. Walker. </author> <title> Towards a Theory of Declarative Knowledge, In: Foundations of Deductive Databases and Logic Programming, </title> <editor> J. Minker [Ed.], </editor> <publisher> Morgan Kaufman 1988. </publisher>
Reference-contexts: These explanations are automatically hypertexted. Encapsulation and reuse of programming knowledge is done by raising logic programming, see e.g. [WMSW90], to a higher declarative level, based on a theory of declarative knowledge <ref> [ABW88, Wal93] </ref>. (While the theory, and the inference engine based on the theory, are highly technical, it is not necessary to know about them in order to specify tasks for our system.) Support for this approach is built into a generic system called Syllog. (Pronounced as in "syllogism", but with a <p> Some design questions that were raised and solved in successive versions are described in [Wal93], <ref> [ABW88] </ref>, [FRTW88], [WMSW90]. Early versions of Syllog were on an IBM 3090 mainframe, to take advantage of local databases. The current version runs on IBM RS6000 workstation under AIX, IBM's version of the Unix operating system.
Reference: [Bark91] <author> Barkakati, N. </author> <title> "Unix Desktop Guide to X/Motif", </title> <publisher> Hayden, </publisher> <year> 1991. </year>
Reference-contexts: The branching to different DBMSs at the backend of Syllog is mirrored by a branching to different display screens at the front end. The Syllog user interface uses Xwindows and the Athena widget set, and we plan to replace Athena widgets by Motif (See e.g. <ref> [Bark91] </ref>). Since Xwindows/Athena/Motif is virtually platform independent, it is straightforward to display the Syllog user interface not only on Unix screens, but also on Windows, OS/2, and Mac screens. Conceptually, Syllog links business level English, forms, rules, and questions to system-level SQL databases.
Reference: [BCG92] <author> Berners-Lee, T.J, R. Cailliau and J.-F. Groff, </author> <title> The World-Wide Web, </title> <booktitle> Computer Networks and ISDN Systems 25 (1992) 454-459. </booktitle> <address> Noth-Holland. </address>
Reference-contexts: we generically drag and drop answers from the table into slots in the form Form R some-year some-FID some-chem-name entry II.4.1 is some-maximum-code |||||||||||||||||||||||||||||||||||| Form R9page "II.4" : that-FID that-chem-name that-year * writing the blank Form R for display on the screen using a simple extension of hypertext markup language <ref> [BCG92] </ref> * using Syllog screens to couple the knowledge in the specification to the form, for example by dragging some-maximum-code from the sentence Form R some-year some-FID some-chem-name entry II.4.1 is some-maximum-code to the correct slot on in the form. <p> The business forms at the Syllog user interface are written in a form description language that is mapped, via a simple generator, into Hypertext Markup Language <ref> [BCG92] </ref>. The Syllog system consists of TCL code, for the user interface, and of about three times as much Prolog code, for deduction (using a backchain iteration method [Wal91] that is different from Prolog's built in method), for explanations, for menu filling, and for a sophisticated Syllog-to-SQL compiler.
Reference: [DAD93] <author> Date, C. J., and Hugh Darwen. </author> <title> A Guide to the SQL Standard, </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year> <title> [EPA94] "Toxic Chemical Release Inventory Reporting Form R and Instructions, Section 313 of the Emergency Planning and Community Right to Know Act, </title> <institution> EPA EPA 745-K-94-001", U.S. Environmental Protection Agency, </institution> <address> Washington D.C. </address> . 
Reference-contexts: The * familiar items that we picture on the screen are English sentences (some of which are hypertext linked), data tables, and business forms. To 3 * use large databases we automatically generate and execute SQL <ref> [DaD93] </ref> queries over relational databases. We provide a flexible way to specify * inheritance of properties. <p> When the data tables are large, or when a pre-existing relational database is to be used, Syllog automatically generates and executes queries in the SQL language <ref> [DAD93] </ref>.
Reference: [FRTW88] <author> Foo, N., A. Rao, A. Taylor and A. Walker. </author> <title> Deduced Relevant Types and Constructive Negation. </title> <booktitle> Proc. Fifth International Conference Symposium on Logic Programming, </booktitle> <address> Seattle, Washington, </address> <year> 1988, </year> <pages> 126-139. </pages>
Reference-contexts: Some design questions that were raised and solved in successive versions are described in [Wal93], [ABW88], <ref> [FRTW88] </ref>, [WMSW90]. Early versions of Syllog were on an IBM 3090 mainframe, to take advantage of local databases. The current version runs on IBM RS6000 workstation under AIX, IBM's version of the Unix operating system. It automatically generates SQL queries and updates 14 and executes them either locally or remotely.
Reference: [KRO93] <author> Kroha, P. </author> <title> Objects and Databases, </title> <publisher> McGraw-Hill, </publisher> <year> 1993. </year>
Reference-contexts: Section 4 outlines the implementation of the technology, and Section 5 lists our conclusions and directions for further work. 2 Outline of the Technology As in the case of classical Object Orientation (see e.g. <ref> [KRO93] </ref>), some key aspects of our technology are * encapsulation, * reuse, * picturing familiar items on the screen * the use of large databases, and * inheritance of properties. However, we take a different approach.
Reference: [Lel91] <author> Lell, C. </author> <title> Using a Meta-knowlege Method for Developing an Educational Knowledge Based Application. </title> <booktitle> Proc. 2nd Int. Conf. on Database and Expert System Applications - DEXA '91, </booktitle> <address> Berlin, </address> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: An interesting direction for further work is to specify metaknowledge about how to 15 reuse object level specifications, e.g. for reasoning about inheritance with overrides or about time. Some initial work in this direction is in <ref> [Lel91] </ref>. Our people oriented technology is used in environmental reporting, a demanding task for which engineering judgement and expertise are needed.
Reference: [NeN92] <author> Neumann, G. and S.Nusser. </author> <title> Wafe An X Toolkit Based Frontend for Application Programs in Various Programming Languages, </title> <booktitle> USENIX Winter 1993 Technical Conference, </booktitle> <address> San Diego, California, </address> <month> January 25-29, </month> <year> 1993 </year>
Reference-contexts: Architecturally, Syllog links most modern display screens to DBMSs from different software vendors. The sophisticated behavior of the widgets that is needed for the Syllog user interface is programmed in the language TCL [Ous94] for the Wafe <ref> [NeN92] </ref> user interface package. The business forms at the Syllog user interface are written in a form description language that is mapped, via a simple generator, into Hypertext Markup Language [BCG92].
Reference: [Ous94] <author> Ousterhout, J.K. </author> <title> "Tcl and the Tk Toolkit", </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Conceptually, Syllog links business level English, forms, rules, and questions to system-level SQL databases. Architecturally, Syllog links most modern display screens to DBMSs from different software vendors. The sophisticated behavior of the widgets that is needed for the Syllog user interface is programmed in the language TCL <ref> [Ous94] </ref> for the Wafe [NeN92] user interface package. The business forms at the Syllog user interface are written in a form description language that is mapped, via a simple generator, into Hypertext Markup Language [BCG92].
Reference: [Wal91] <institution> Position Statement on The Direction of Object-Oriented Technology in the Marketplace. </institution> <month> In: </month> <title> "Object-Oriented Databases: Analysis, Design and Construction", </title> <editor> Meersman, Kent and Khosla [Eds.], </editor> <publisher> North-Holland, </publisher> <year> 1991. </year>
Reference-contexts: The syllogism says that, if the three premises above the line are true, then so is the conclusion. Our approach provides explanations of the results of inheritance and override <ref> [Wal91] </ref>. Indeed, it provides English explanations of all results, and even of what would be needed to get a result that is not forthcoming. These explanations are automatically hypertexted. <p> The Syllog system consists of TCL code, for the user interface, and of about three times as much Prolog code, for deduction (using a backchain iteration method <ref> [Wal91] </ref> that is different from Prolog's built in method), for explanations, for menu filling, and for a sophisticated Syllog-to-SQL compiler. From another viewpoint, one can say that the system is essentially implemented in C, using some extensions (TCL, Prolog) that are themselves in C.
Reference: [Wal93] <author> Walker, A. </author> <title> Backchain Iteration: Towards a Practical Inference Method that is Simple Enough to be Proved Terminating, Sound and Complete. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11 </volume> <pages> 1-22. </pages> <year> 1993. </year>
Reference-contexts: These explanations are automatically hypertexted. Encapsulation and reuse of programming knowledge is done by raising logic programming, see e.g. [WMSW90], to a higher declarative level, based on a theory of declarative knowledge <ref> [ABW88, Wal93] </ref>. (While the theory, and the inference engine based on the theory, are highly technical, it is not necessary to know about them in order to specify tasks for our system.) Support for this approach is built into a generic system called Syllog. (Pronounced as in "syllogism", but with a <p> Some design questions that were raised and solved in successive versions are described in <ref> [Wal93] </ref>, [ABW88], [FRTW88], [WMSW90]. Early versions of Syllog were on an IBM 3090 mainframe, to take advantage of local databases. The current version runs on IBM RS6000 workstation under AIX, IBM's version of the Unix operating system.
Reference: [WMSW90] <author> Walker, A., M. McCord, J. Sowa and W. Wilson. </author> <title> "Knowledge Systems 17 and Prolog: A Logical Approach to Expert Systems and Natural Language Process--ing", second edition, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <title> 7 Acknowledgements In addition to the people whose work we have cited, many others have contributed to the Syllog system, and to its use in environmental reporting. We would like in particular to thank the users of the Syllog system for their patience when early versions of the system were less than user friendly, and for their many suggestions for improvements. </title> <type> 18 </type>
Reference-contexts: Indeed, it provides English explanations of all results, and even of what would be needed to get a result that is not forthcoming. These explanations are automatically hypertexted. Encapsulation and reuse of programming knowledge is done by raising logic programming, see e.g. <ref> [WMSW90] </ref>, to a higher declarative level, based on a theory of declarative knowledge [ABW88, Wal93]. (While the theory, and the inference engine based on the theory, are highly technical, it is not necessary to know about them in order to specify tasks for our system.) Support for this approach is built <p> Some design questions that were raised and solved in successive versions are described in [Wal93], [ABW88], [FRTW88], <ref> [WMSW90] </ref>. Early versions of Syllog were on an IBM 3090 mainframe, to take advantage of local databases. The current version runs on IBM RS6000 workstation under AIX, IBM's version of the Unix operating system. It automatically generates SQL queries and updates 14 and executes them either locally or remotely.
References-found: 12

