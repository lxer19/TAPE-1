URL: http://www.ai.mit.edu/people/unamay/papers/xo-hybrid.ps
Refering-URL: http://www.ai.mit.edu/people/unamay/papers.html
Root-URL: 
Email: unamay@santafe.edu oppacher@scs.carleton.ca  
Title: Hybridized Crossover-Based Search Techniques for Program Discovery  
Author: Una-May O'Reilly Franz Oppacher 
Affiliation: Santa Fe Institute Carleton University  
Abstract: In this paper we address the problem of program discovery as defined by Genetic Programming [10]. We have two major results: First, by combining a hierarchical crossover operator with two traditional single point search algorithms: Simulated Annealing and Stochastic Iterated Hill Climbing, we have solved some problems with fewer fitness evaluations and a greater probability of a success than Genetic Programming. Second, we have managed to enhance Genetic Programming by hybridizing it with the simple scheme of hill climbing from a few individuals, at a fixed interval of generations. The new hill climbing component has two options for generating candidate solutions: mutation or crossover. When it uses crossover, mates are either randomly created, randomly drawn from the population at large, or drawn from a pool of fittest individuals.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aarts, E., Korst, J., </author> <title> Simulated Annealing and Boltzmann Machines. </title> <publisher> Wiley. </publisher> <year> 1989 </year>
Reference-contexts: We recently [11] designed a mutation operator, HVL-Mutate, that can be used with a variable length hierarchical representation. HVL-Mutate changes a "tree" via shrinking, growth or internal substitution while preserving syntactic correctness. We reported that mutation-based adaptive search with Hill Climbing or Simulated Annealing <ref> [1] </ref>, using HVL-Mutate, can accomplish program discovery tasks. Furthermore, sometimes one of these single point based algorithms required fewer fitness evaluations to find a correct solution or found a solution more reliably (i.e. averaged over an ensemble of runs). <p> If its value is set too low, the search may not find a fitter candidate even though one exists in the neighbourhood. If it is set too high, the search may be trapped in a local optimum. 2.2 XOSA Algorithm The standard version of Simulated Annealing, "SA", <ref> [1] </ref> is based upon search which traverses from one solution point to another.
Reference: [2] <author> Chen, H., Flann, N., </author> <title> Parallel Simulated Annealing and Genetic Algorithms: A Space of Hybrid Methods, Parallel Problem Solving from Nature III, </title> <editor> Davidor, Schwefel, Manner (Eds), </editor> <publisher> Springer Verlag (LNCS), Berlin,1994. </publisher>
Reference-contexts: This strategy might be called "few points, many neighbours". The two strategies could clearly be complementary <ref> [2, 3, 8, 4] </ref> with the GA component serving to "zero in" on regions of high fitness and the hill climbing component serving to thoroughly explore the regions the GA has found.
Reference: [3] <author> Davis, L. (Ed), </author> <title> Genetic Algorithms and Simulated Annealing, </title> <publisher> Morgan Kaufmann, </publisher> <address> CA, </address> <year> 1987. </year> <title> [4] de Souza, </title> <editor> P., Talukdar, S., </editor> <title> Genetic Algorithms in Asynchronous Teams, </title> <booktitle> Proceedings of 4th International Conference on Genetic Algorithms, </booktitle> <editor> R. Belew, L. Booker (Eds), </editor> <publisher> Morgan Kaufmann, </publisher> <address> CA, </address> <year> 1991. </year>
Reference-contexts: This strategy might be called "few points, many neighbours". The two strategies could clearly be complementary <ref> [2, 3, 8, 4] </ref> with the GA component serving to "zero in" on regions of high fitness and the hill climbing component serving to thoroughly explore the regions the GA has found.
Reference: [5] <author> Jones, Terry. </author> <title> Crossover Hillclimbing and the Dual Role of Crossover in Genetic Algorithms, </title> <note> submitted to ICGA-95. </note>
Reference-contexts: While that work sought to bring the program discovery problem into the realm of traditional search, this paper seeks to exploit and explore the nature of the genetic-based crossover operator. Starting from the idea of Crossover Hill Climbing, "XOHC", which Terry Jones <ref> [5, 6, 7] </ref> employed upon the fixed length binary string representation of GAs, it was simple and straightforward to implement a similar XOHC algorithm for hierarchical variable length representation by exchanging GA crossover for GP crossover. We describe this algorithm in Section 2.1 of this paper. <p> is likely to be larger than that resulting from GA crossover because its maximum size is the product of both mates' sizes rather than 2l and because GP Crossover is likely to generate fewer duplicates than GA crossover. 2.1 XOHC Algorithm Crossover hill climbing was first described by Terry Jones <ref> [5, 7] </ref>. Recall that hill climbing is a search algorithm that commences from a single solution point. 2 At each step a candidate solution is generated using a "move operator" of some sort.
Reference: [6] <author> Jones, Terry. </author> <type> PhD. </type> <note> Dissertation in preparation, forthcoming in 1995. </note>
Reference-contexts: While that work sought to bring the program discovery problem into the realm of traditional search, this paper seeks to exploit and explore the nature of the genetic-based crossover operator. Starting from the idea of Crossover Hill Climbing, "XOHC", which Terry Jones <ref> [5, 6, 7] </ref> employed upon the fixed length binary string representation of GAs, it was simple and straightforward to implement a similar XOHC algorithm for hierarchical variable length representation by exchanging GA crossover for GP crossover. We describe this algorithm in Section 2.1 of this paper.
Reference: [7] <author> Jones, Terry. </author> <type> Personal Communication. </type>
Reference-contexts: While that work sought to bring the program discovery problem into the realm of traditional search, this paper seeks to exploit and explore the nature of the genetic-based crossover operator. Starting from the idea of Crossover Hill Climbing, "XOHC", which Terry Jones <ref> [5, 6, 7] </ref> employed upon the fixed length binary string representation of GAs, it was simple and straightforward to implement a similar XOHC algorithm for hierarchical variable length representation by exchanging GA crossover for GP crossover. We describe this algorithm in Section 2.1 of this paper. <p> is likely to be larger than that resulting from GA crossover because its maximum size is the product of both mates' sizes rather than 2l and because GP Crossover is likely to generate fewer duplicates than GA crossover. 2.1 XOHC Algorithm Crossover hill climbing was first described by Terry Jones <ref> [5, 7] </ref>. Recall that hill climbing is a search algorithm that commences from a single solution point. 2 At each step a candidate solution is generated using a "move operator" of some sort.
Reference: [8] <author> Kido, T., Kitano, H., Nakashani, M., </author> <title> A Hybrid Search for Genetic Algorithms: Combining Genetic Algorithms, TABU Search, and Simulated Annealing, </title> <booktitle> Proceedings of 5th International Conference on Genetic Algorithms, </booktitle> <editor> S. Forrest (Ed), </editor> <publisher> Morgan Kaufmann, </publisher> <address> CA, </address> <year> 1993. </year>
Reference-contexts: This strategy might be called "few points, many neighbours". The two strategies could clearly be complementary <ref> [2, 3, 8, 4] </ref> with the GA component serving to "zero in" on regions of high fitness and the hill climbing component serving to thoroughly explore the regions the GA has found.
Reference: [9] <author> Knuth, D.E., </author> <booktitle> The Art of Computer Programming, </booktitle> <publisher> Addison-Wesley, </publisher> <address> MA, </address> <year> 1968. </year>
Reference-contexts: The arrays in the test suite range in size and sorted order. In Sort-A the raw fitness of a program is the sum of the number of elements found in the correct position after running the program. In Sort-B the raw fitness is the summed permutation order <ref> [9] </ref> of each array after each execution. The intention of experimenting with two different fitness functions and the same repertoire of primitives is to isolate the impact of specific fitness functions on a fitness landscape.
Reference: [10] <author> Koza, J. R., </author> <title> Genetic Programming; On the Programming of Computers by Means of Natural Selection. </title> <publisher> Bradford Books, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction An important question to the Genetic Programming (GP) <ref> [10] </ref> community is whether the evolution-based approach to program discovery, as espoused by GP, is generally superior to other adaptive search techniques. <p> We have chosen to use it. solution is, therefore, generated from one "current" solution and a random mate. Our version of GP crossover retains the essential spirit of GP crossover in <ref> [10] </ref> but is a simple two-parent to one-child function rather than a two-parent to two-children version. One parent is the "donor" and the other the "recipient". A randomly chosen subtree is copied from the donor and replaces a subtree randomly removed from the recipient. <p> The test suite consists of 2048 test cases. Block Stacking is well explained in <ref> [10] </ref>. Succinctly, the task is to stack labeled blocks upon a table in correct order according to a given goal list starting from any arbitrary configuration of the stack and remaining blocks on the table. Block Stacking uses 3 "sensors" which are primitives encoded to return state information.
Reference: [11] <author> O'Reilly, U. M. and F. </author> <title> Oppacher (1994). Program Search with a Hierarchical Variable Length Representation: Genetic Programming, Simulated Annealing and Hill Climbing, Parallel Problem Solving from Nature III, </title> <editor> Davidor, Schwefel, Manner (Eds), </editor> <publisher> Springer Verlag (LNCS), Berlin,1994. </publisher>
Reference-contexts: Another obvious goal is to capitalize upon the strategies of other adaptive search methods by incorporating them into an enhanced version of GP that outperforms the canonical GP. We recently <ref> [11] </ref> designed a mutation operator, HVL-Mutate, that can be used with a variable length hierarchical representation. HVL-Mutate changes a "tree" via shrinking, growth or internal substitution while preserving syntactic correctness. We reported that mutation-based adaptive search with Hill Climbing or Simulated Annealing [1], using HVL-Mutate, can accomplish program discovery tasks. <p> The raw fitness of a program is the number of test cases for which the stack is correct. The task of a sorting program is to arrange the elements of an array in ascending order. A description of the primitives used is in <ref> [11] </ref>. A program is run 48 times, each time with a different array bound to the primitive *array*. The arrays in the test suite range in size and sorted order.
Reference: [12] <author> Press, W. H.: </author> <title> Numerical Recipes in C: </title> <booktitle> the art of scientific computing. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
References-found: 11

