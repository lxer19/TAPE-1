URL: http://www.cs.panam.edu/~meng/unix-home/Research/IBC/paraweb.ps
Refering-URL: http://www.cs.panam.edu/~meng/unix-home/Research/IBC/
Root-URL: http://www.cs.panam.edu
Email: fbrecht,hsandhu,shan,talbotg@cs.yorku.ca  
Title: ParaWeb: Towards World-Wide Supercomputing  
Author: Tim Brecht, Harjinder Sandhu, Meijuan Shan, and Jimmy Talbot 
Date: September 19, 1996  
Address: York, Ontario  
Affiliation: Department of Computer Science York University, North  
Abstract: In this paper, we describe the design of a system, called ParaWeb, for utilizing Internet or intra-net computing resources in a seamless fashion. The goal is to allow users to execute serial programs on faster compute servers or parallel programs on a variety of possibly heterogeneous hosts. ParaWeb provides extensions to the Java programming environment (through a parallel class library) and the Java runtime system that allow programmers to develop new Java applications with parallelism in mind, or to execute existing Java applications written using Java's multithreading facilities in parallel. Some experimental results from our prototype implementation are used to demonstrate the potential of this approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Carter, J. Bennett, and W. Zwaenepoel. </author> <title> Implementation and performance of Munin. </title> <booktitle> In 13th Symp. on Operating Systems Principles, </booktitle> <pages> pages 152-164, </pages> <month> October </month> <year> 1991. </year>
Reference: [2] <author> K.M. Chandy, B. Dimitrov, H. Le, J. Mandleson, M. Richardson, A. Rifkin, P.A.G. Sivilotti, W. Tanaka, and L. Weisman. </author> <title> A world-wide distributed system using Java and the internet. </title> <booktitle> In Fifth IEEE International Symposium on High Performance Distributed Computing (HPDC5), </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy it et al <ref> [2] </ref>. Some of the mechanisms that we are building into the Java interpreter in order to provide a distributed shared memory framework may eventually be realized through standard Java components.
Reference: [3] <author> G.C. Fox and W. Furmanski. </author> <title> Towards Web/Java based high performance distributed computing an evolving virtual machine. </title> <booktitle> In Fifth IEEE International Symposium on High Performance Distributed Computing (HPDC5), </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: A recent proposal by Fox et al <ref> [3] </ref>, for instance, proposes a system similar to ParaWeb called WebWork. They propose developing high-performance applications that make use of the Web's wealth of resources, by creating and utilizing compute servers throughout the Internet.
Reference: [4] <author> G. A. Geist and V. S. Sunderam. </author> <title> Network-based concurrent computing on the PVM system. </title> <journal> Concur-rency: Practice and Experience, </journal> <volume> 4(4) </volume> <pages> 293-311, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Similarly, effectively utilizing computing resources within an intra-net is equally challenging for the average user. While load sharing facilities, such as Utopia [11], and parallel programming libraries such as PVM <ref> [4] </ref>, provide some support for running applications on heterogeneous architectures, the user must still compile, debug, and install the application on each platform on which it is to run. As as result, utilizing heterogeneous computing resources is rarely done in practice.
Reference: [5] <author> J. Gosling, B. Joy, and G. Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison Wesley Developers Press, Sunsoft Java Series, </publisher> <year> 1996. </year>
Reference-contexts: Within the ParaWeb framework, users may execute serial programs remotely, on faster compute engines, or they may execute parallel programs on a variety of platforms across the Internet. The mechanisms for ParaWeb are partially available today in the form of the Java programming language <ref> [5] </ref> and Java Virtual Machine (JVM) [7]. Java applications are compiled into an intermediate byte-code that can be executed (interpreted) on any architecture, relieving both the developer and user of concerns related to the heterogeneity of the target platforms.
Reference: [6] <author> P. Keleher, A. Cox, S. Dwarkadas, and W. Zwaenepoel. Treadmarks: </author> <title> Distributed shared memory on standard workstations and operating systems. </title> <booktitle> In Proc. of USENIX, </booktitle> <year> 1994. </year>
Reference: [7] <author> T. Lindholm and F. Yellin. </author> <title> The Java Virutal Machine Specification. Addison Wesley Developers Press, Sunsoft Java Series, </title> <note> in preparation. </note>
Reference-contexts: The mechanisms for ParaWeb are partially available today in the form of the Java programming language [5] and Java Virtual Machine (JVM) <ref> [7] </ref>. Java applications are compiled into an intermediate byte-code that can be executed (interpreted) on any architecture, relieving both the developer and user of concerns related to the heterogeneity of the target platforms.
Reference: [8] <author> R. Riggs, J. Waldo, and A. Wollrath. </author> <title> Pickling state in Java. </title> <booktitle> In 2nd Conference on Object-Oriented Technologies and Systems (COOTS), </booktitle> <pages> pages 241-250, </pages> <address> Toronto, Ontario, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Some of the mechanisms that we are building into the Java interpreter in order to provide a distributed shared memory framework may eventually be realized through standard Java components. For instance, Riggs, Waldo and Wollrath <ref> [8] </ref>, describe a pickling mechanism for Java that allows an object's state to be easily saved and restored.
Reference: [9] <author> M. Stumm and S. Zhou. </author> <title> Algorithms implementing distributed shared memory. </title> <journal> IEEE Computer, </journal> <volume> 23(5), </volume> <month> May </month> <year> 1990. </year>
Reference: [10] <author> A. Wollrath, R. Riggs, and J. Waldo. </author> <title> A distributed object model for Java. </title> <booktitle> In 2nd Conference on Object-Oriented Technologies and Systems (COOTS), </booktitle> <pages> pages 219-231, </pages> <address> Toronto, Ontario, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Wollrath, Riggs, and Waldo, in a separate paper <ref> [10] </ref>, also describe a Remote Method Invocation (RMI) mechanisms for Java based upon the pickling mechanisms.
Reference: [11] <author> S. Zhou, X. Zheng, J. Wang, and P. Delisle. </author> <title> Utopia: a load sharing facility for large, </title> <journal> heterogenous distributed computer systems. Software: Practice And Experience, </journal> <volume> 23(12) </volume> <pages> 1305-1336, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Furthermore any program written for that machine must be ported, recompiled, and debugged prior to execution on another type of machine. Similarly, effectively utilizing computing resources within an intra-net is equally challenging for the average user. While load sharing facilities, such as Utopia <ref> [11] </ref>, and parallel programming libraries such as PVM [4], provide some support for running applications on heterogeneous architectures, the user must still compile, debug, and install the application on each platform on which it is to run. As as result, utilizing heterogeneous computing resources is rarely done in practice.
References-found: 11

