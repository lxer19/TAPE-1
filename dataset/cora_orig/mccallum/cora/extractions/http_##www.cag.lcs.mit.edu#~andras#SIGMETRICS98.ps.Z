URL: http://www.cag.lcs.mit.edu/~andras/SIGMETRICS98.ps.Z
Refering-URL: http://www.cag.lcs.mit.edu/~andras/
Root-URL: 
Email: fandras,mfrankg@lcs.mit.edu  
Title: LoGPC: Modeling Network Contention in Message-Passing Programs  
Author: Csaba Andras Moritz Matthew I. Frank 
Address: Cambridge, Massachusetts 02139  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract: In many real applications, for example those with frequent and irregular communication patterns or those using large messages, network contention and contention for message processing resources can be a significant part of the total execution time. This paper presents a new cost model, called LoGPC, that extends the LogP [9] and LogGP [4] models to account for the impact of network contention and network interface DMA behavior on the performance of message-passing programs. We validate LoGPC by analyzing three applications implemented with Active Messages [11, 18] on the MIT Alewife multiprocessor. Our analysis shows that network contention accounts for up to 50% of the total execution time. In addition, we show that the impact of communication locality on the communication costs is at most a factor of two on Alewife. Finally, we use the model to identify tradeoffs between synchronous and asynchronous message passing styles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agarwal, </author> <title> Limits on Interconnection Network Performance, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> Vol. 2, No. 4, </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: In addition LoGPC uses the features of the LogGP model to account for long message bandwidth. LoGPC extends these models with a simple model of network contention effects. We use Agarwal's open model for k-ary n-cubes <ref> [1] </ref> and close it by including the impact of network contention on the message injection rate. Finally, LoGPC models the pipelining characteristics of DMA engines which allow the overlap of memory and network access times. <p> Our technique uses Agarwal's open model for k-ary n-cubes <ref> [1] </ref> to calculate the network contention from the message injection rate, and then closes the model by feeding the network contention costs back into the calculation for the message injection rate. This section begins by giving a brief overview of Agarwal's model (Equations 3 through 6). <p> The average distance (with randomly chosen message destinations) a message travels in each network dimension is denoted by k d , thus the average distance in an n dimensional network is nk d . The average delay through a switch is derived by Agarwal in <ref> [1] </ref> from a set of equations that result from the M/G/1 queuing system. We assume a minimal routing algorithm, i.e., the message header is routed completely in one dimension before the next. <p> In order to be able to compute the delay due to contention we need to feed back the contention delay into the message rate (as the message rate decreases with contention). This is an extension to the network model presented in <ref> [1] </ref> where the message injection rate was considered constant. The following equation de scribes this situation. 1 = m c : (7) The message rate without contention is 1 T . <p> Claud attempts to incorporate more details about the interconnection network for a more accurate prediction of network latencies, but does not account for contention effects. The network contention model used by LogPC starts with the open queueing model described in <ref> [1] </ref>, but extends and closes the model by relating the terms for message injection rate and message latency. A similar open model of network contention was used by Kruskal and Snir for buffered indirect networks [17]. <p> This paper presented a new cost model, LoGPC, that extends the LogP and LogGP models with a simple model of network contention. The network contention model extends and closes the network model described in <ref> [1] </ref> where message injection rates were considered constant. Although a constant message rate can be used for small messages, it is not applicable for long messages. In addition, LoGPC extends LogGP by modeling network interfaces with DMA support.
Reference: [2] <author> A. Agarwal, R. Bianchini, D. Chaiken, K. L. Johnson, D. Kranz, J. Kubiatowicz, B-H. Lim, K. Mackenzie, and D. Yeung, </author> <title> The MIT Alewife-Machine: Architecture and Performance, </title> <booktitle> Proc. of the 22nd Annual Intl. Symp. on Computer Architecture, </booktitle> <pages> pages 2-13, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Finally, LoGPC models the pipelining characteristics of DMA engines which allow the overlap of memory and network access times. We validate LoGPC by comparing its predictions to the mea sured performance of three applications implemented with Active Messages [11, 18] on the MIT-Alewife <ref> [2] </ref> multiprocessor. The applications used for validation are all-to-all-remap with synchronous and asynchronous messaging, a dynamic programming based DNA chain comparison program called the Diamond DAG, and EM3D a benchmark code that models the propagation of the electromagnetic waves in solids. <p> The MIT-Alewife multiprocessor has a no end-around asymmetric mesh network with bidirectional channels using wormhole routing. Each node has an integrated shared-memory and message-passing interface with 256 byte network input and output queues. The architecture of the communication controller <ref> [2] </ref> for message-passing (we ignore the shared memory support) in each Alewife node is shown in Figure 1. The two DMA engines support efficient message transfer between network queues and memory. The message-passing layer used is interrupt based Active Messages.
Reference: [3] <author> A. Arpaci-Dusseau, D. Culler, K. Schauser and R. Martin, </author> <title> Fast Parallel Sorting Under LogP: </title> <journal> Experience with the CM-5 in IEEE Transactions on Parallel and Distributed Systems, August 1996, </journal> <volume> Volume 7, Number 8, </volume> <pages> pp. 791-805. </pages>
Reference-contexts: Keaton et al [5] quantified the LogP for local area networks. Martin et al [20] studied the impact of communication performance of parallel applications in high performance network of workstations. Using the LogGP parameters they showed that these applications show strong sensitivity to overheads. Finally, Arpaci-Dusseau et al <ref> [3] </ref> developed fast parallel sorting algorithms using LogP. 6 Conclusions Network contention and network interface contention can constitute a large portion of the total run-time of parallel applications.
Reference: [4] <author> A. Alexandrov, M. Jonescu, K. E. Schauser, and C. Scheiman. LogGP: </author> <title> Incorporating Long Messages into the LogP Model Proc. </title> <booktitle> of the SPAA'95, </booktitle> <address> Santa Barbara, CA, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Users of parallel machines need good performance models in order to develop efficient message-passing applications. Several approaches to modeling the communication performance of a mul-ticomputer have been proposed in the literature <ref> [4, 9, 14] </ref>. These models often capture some, but not all of the aspects of the parallel machine. This paper presents a new cost model, LoGPC, that extends the LogP [9] and LogGP [4] models with a model of network contention delay. <p> Several approaches to modeling the communication performance of a mul-ticomputer have been proposed in the literature [4, 9, 14]. These models often capture some, but not all of the aspects of the parallel machine. This paper presents a new cost model, LoGPC, that extends the LogP [9] and LogGP <ref> [4] </ref> models with a model of network contention delay. The LoGPC model leverages the existing features of the LogP model for fixed-size short messages which have been shown to be successful for regular applications with good communication locality and tight synchronization. <p> For short messages, and ignoring contention, LoGPC is equivalent to LogP. In the second part of this section we show how we model the performance of long messages, again without accounting for contention. For long messages LoGPC uses the same parameters as LogGP <ref> [4] </ref> and, in addition, takes DMA pipelining into account. The performance parameters derived here are used in later sections to derive the contention components for different applications. The MIT-Alewife multiprocessor has a no end-around asymmetric mesh network with bidirectional channels using wormhole routing. <p> The LogGP <ref> [4] </ref> model is an extension of LogP for long messages. It accounts for long message support with an additional parameter, G, or Gap per byte, where 1/G is the network bandwidth in bytes per unit time. <p> Bytes subsequent to the first take G cycles to enter the network as also shown in <ref> [4] </ref>. After the first few bytes of the header arrive (shown as a in Figure 2), the network interface generates a proces receiver including the cost of interrupting the receiver. <p> Assuming that on average one message arrives for each message sent then the cost of one iteration is o s + (B 1)G + (B 1 a)G, or approximately 2BG. See <ref> [4] </ref> for a similar approximation. As shown in Section 2, on Alewife G = 0:5 cycles/byte, so the maximum rate is 1 message injection per B cycles. <p> Alexandrov et al defined the LogGP <ref> [4] </ref> model as an extension of LogP to capture the large bandwidth requirements of applications using long message primitives. LoGPC leverages the performance parameters of LogP and LogGP and extend the analysis with a more detailed model of the DMA pipeline and a network contention component.
Reference: [5] <author> C. Andras Moritz, K. Al-Tawil, B. Fraguela Rodriguez, </author> <title> MPI performance comparison on MPP and workstation clusters, </title> <booktitle> appears in Proc. of the 10th Int. Conf. on Parallel and Distributed Computing, </booktitle> <address> New Orleans, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Culler et al [10] used the LogP model to compare the network interfaces of the Intel Paragon, Meiko CS-2, and a cluster of workstations with Myrinet. A. Moritz et al <ref> [5] </ref> compared the communication performance of MPI on CrayT3D, Meiko and network of workstations. Keaton et al [5] quantified the LogP for local area networks. Martin et al [20] studied the impact of communication performance of parallel applications in high performance network of workstations. <p> Culler et al [10] used the LogP model to compare the network interfaces of the Intel Paragon, Meiko CS-2, and a cluster of workstations with Myrinet. A. Moritz et al <ref> [5] </ref> compared the communication performance of MPI on CrayT3D, Meiko and network of workstations. Keaton et al [5] quantified the LogP for local area networks. Martin et al [20] studied the impact of communication performance of parallel applications in high performance network of workstations. Using the LogGP parameters they showed that these applications show strong sensitivity to overheads.
Reference: [6] <author> G. Chochia, C. Boeres, P. Thanisch, </author> <title> Analysis of Multicomputer Schedules in Cost and Latency Model of Communication, </title> <booktitle> Abstract Machine Workshop, </booktitle> <year> 1996. </year>
Reference-contexts: Diamond DAG is a DNA chain comparison program that uses an algorithm based on dynamic programming. This application Diamond DAG has been previously analyzed with the delay model [21] and the CLAUD model <ref> [6] </ref>. Our objective in this section is to show how to derive the performance analytically including the costs of network contention. First we derive the performance for the no contention case. Then, we calculate the message injection rate including network contention effects. <p> In this paper we have focused on modeling applications where network contention accounts for a significant portion of total runtime. The Claud model <ref> [6] </ref> is similar to the LogP model in the sense that it uses a small set of parameters to model the performance of a message-passing computer.
Reference: [7] <author> F. Chong, R. Barua, F. Dahlgren, J. Kubiatowicz and A. Agarwal, </author> <title> The Sensitivity of Communication Mechanisms to Bandwidth and Latency, </title> <booktitle> Proc. of the 4th Int'l Symp. on High Performance Computer Architecture, </booktitle> <address> Las Vegas, NV, </address> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: Our validations are performed against the MIT-Alewife multiprocessor which was parameterized in Section 2. Network bandwidth (and therefore contention) on Alewife is fairly representative of what is found in a variety of current generation commercial and research multiprocessors <ref> [7] </ref>. Because processor speeds are increasing faster than the bandwidth of high-end local area networks (e.g. <p> They used the o performance parameter to model the occupancy of the communication controller. Their study shows that application performance is highly sensitive to the controller occupancy. Finally Chong et al <ref> [7] </ref> examined the effect of network bandwidth on application performance using several different communication schemes. They find that message passing communication primitives are less sensitive to network bandwidth than are shared memory primitives.
Reference: [8] <author> D. Culler, Andrea Dusseau, Seth Copen Goldstein, Arvind Krishna-murthy, Steven Lumetta, Thorsten von Eicken, and Katherine Yelick, </author> <title> Parallel programming in Split C, </title> <booktitle> Supercomputing, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: It models the propagation of electromagnetic waves through three-dimensional objects using algorithms described in [19]. We started with a message passing version ported from a CM-5 bulk transfer implementation <ref> [8] </ref>. EM3D operates on an irregular bipartite graph which consists of E nodes on one side, representing electric values and H nodes on the other, representing magnetic field value at that point. <p> A processor must send a value for each of its edges that ends on a different processor. In our implementation, values are sent in blocks of 10 using Alewife's short-message facility. This technique is also described as ghost nodes or software caching in <ref> [8] </ref>. The idea is to communicate node values along edges and buffer them at the receiving processors before the computation phase begins. The communication phase in the core computation is similar to the asynchronous short message all-to-all remap described earlier.
Reference: [9] <author> D. Culler, R. Karp, D. Patterson, A. Sahay, K. Schauser, E. Santos, R. Subramonian, and T. Eicken, </author> <title> LogP: Towards a Realistic Model of Parallel Computation, </title> <booktitle> Proc. of Fourth ACM SIGPLAN Symp. on Principles and Practices of Parallel Programming, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Users of parallel machines need good performance models in order to develop efficient message-passing applications. Several approaches to modeling the communication performance of a mul-ticomputer have been proposed in the literature <ref> [4, 9, 14] </ref>. These models often capture some, but not all of the aspects of the parallel machine. This paper presents a new cost model, LoGPC, that extends the LogP [9] and LogGP [4] models with a model of network contention delay. <p> Several approaches to modeling the communication performance of a mul-ticomputer have been proposed in the literature [4, 9, 14]. These models often capture some, but not all of the aspects of the parallel machine. This paper presents a new cost model, LoGPC, that extends the LogP <ref> [9] </ref> and LogGP [4] models with a model of network contention delay. The LoGPC model leverages the existing features of the LogP model for fixed-size short messages which have been shown to be successful for regular applications with good communication locality and tight synchronization. <p> In the first part we discuss the LogP <ref> [9] </ref> parameterization of the Alewife machine for short messages. For short messages, and ignoring contention, LoGPC is equivalent to LogP. In the second part of this section we show how we model the performance of long messages, again without accounting for contention. <p> The receive handler has higher priority than the background thread, i.e., a message will interrupt the execution of the running thread on the receiving processor. 2.1 Short message performance For short messages the LoGPC model uses the performance parameters of the LogP <ref> [9] </ref> model. LogP is a simple parallel machine model that reflects the most significant factors affecting the performance of traditional message passing computers. <p> The modified results are labeled improved in Figure 10. The remaining differences between the predicted and measured runtimes are due to further hotspots in both the synchronization and communication phases that we were unable to eliminate. 5 Related Work The LogP model <ref> [9] </ref> is a simple parallel machine model intended to serve as a basis for developing portable parallel algorithms. Alexandrov et al defined the LogGP [4] model as an extension of LogP to capture the large bandwidth requirements of applications using long message primitives.
Reference: [10] <author> D. Culler, L. Liu, R. Martin, and C. Yoshikawa, </author> <title> LogP Performance Assessment of Fast Network Interfaces, </title> <type> Technical Report, </type> <institution> Computer Science Division, university of California, Berkeley, </institution> <month> November </month> <year> 1995, </year> <note> (available on the Web.) </note>
Reference-contexts: They find that message passing communication primitives are less sensitive to network bandwidth than are shared memory primitives. Several studies apply the contention-free LogP and LogGP models to evaluate the communication performance of various parallel computers and network of workstations. Culler et al <ref> [10] </ref> used the LogP model to compare the network interfaces of the Intel Paragon, Meiko CS-2, and a cluster of workstations with Myrinet. A. Moritz et al [5] compared the communication performance of MPI on CrayT3D, Meiko and network of workstations.
Reference: [11] <author> T. von Eicken, D. E. Culler, S. C. Goldstein and K. E. Schauser, </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation, </title> <booktitle> Proc. of the 19th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 256-266', </pages> <address> Gold Coast, Australia, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Finally, LoGPC models the pipelining characteristics of DMA engines which allow the overlap of memory and network access times. We validate LoGPC by comparing its predictions to the mea sured performance of three applications implemented with Active Messages <ref> [11, 18] </ref> on the MIT-Alewife [2] multiprocessor. The applications used for validation are all-to-all-remap with synchronous and asynchronous messaging, a dynamic programming based DNA chain comparison program called the Diamond DAG, and EM3D a benchmark code that models the propagation of the electromagnetic waves in solids.
Reference: [12] <author> A. G. Greenberg, </author> <title> On the Time Complexity of Broadcast Communication Schemes, </title> <booktitle> Proc. of the 14th ACM Symp. on the Theory of Computing, </booktitle> <address> San Francisco, CA, </address> <month> May </month> <year> 1982, </year> <pages> pages 354-364. </pages>
Reference-contexts: A similar open model of network contention was used by Kruskal and Snir for buffered indirect networks [17]. A different approach to the question of communication contention can be seen in studies such as <ref> [12] </ref>. This paper presents a worst case complexity analysis of the non-emptiness problem including the effects of contention.
Reference: [13] <author> C. Holt, M. Heinrich, J. P. Singh, E. Rothberg, and J. Hennesy, </author> <title> The Effects of Latency, Occupancy and Bandwidth on the Performance of Cache-Coherent Multiprocessors. </title> <type> Technical Report CSL-TR-95, </type> <institution> Stanford University, </institution> <month> January </month> <year> 1995. </year> <note> Submitted to ACM Transactions on Computer Systems. </note>
Reference-contexts: A number of researchers have examined application performance in an empirical setting. For example, Karamcheti et al [16] studied the network interface architectures in the CrayT3D and TMC CM-5 and examined several messaging implementations for reducing output contention effects. Holt et al <ref> [13] </ref> studied the performance of cache-coherent distributed shared memory machines using four parameters similar to LogP. They used the o performance parameter to model the occupancy of the communication controller. Their study shows that application performance is highly sensitive to the controller occupancy.
Reference: [14] <author> M. I. Frank, A. Agarwal, M. K. Vernon, </author> <title> LoPC:Modeling Contention in Parallel Algorithms, </title> <booktitle> Proc. of the SIXTH ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <address> Las Vegas, Nevada, </address> <month> June 18, </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Users of parallel machines need good performance models in order to develop efficient message-passing applications. Several approaches to modeling the communication performance of a mul-ticomputer have been proposed in the literature <ref> [4, 9, 14] </ref>. These models often capture some, but not all of the aspects of the parallel machine. This paper presents a new cost model, LoGPC, that extends the LogP [9] and LogGP [4] models with a model of network contention delay. <p> Type LogP LoPC LoGPC C n C r Measured Blocked CMMU access Synchronous 316 453 499 23 137 486 0 Asynchronous 137 137 137 31 - 151 0 Table 4: Cost of one iteration in all-to-all remap with 2 argument short messages (in cycles). LoPC <ref> [14] </ref> is used for estimating processor contention in synchronous messaging. LoGPC includes both costs for network and processor contention. The LogP cost for asynchronous messaging is o s + o r , and for synchronous messaging is 2 (o s + L + o r ). <p> In the synchronous all-to-all remap measured here each processor repeatedly sends a message to a random destination and then waits for a reply message. These communication patterns have been previously examined in <ref> [14] </ref>. That paper introduces an extension to LogP, called LoPC, that uses a multiclass queueing model, based Mean Value Analysis, to predict contention between different threads for processor resources. <p> LoGPC leverages the performance parameters of LogP and LogGP and extend the analysis with a more detailed model of the DMA pipeline and a network contention component. The LoPC model <ref> [14] </ref> also extended the LogP model with a contention model. LoPC, however, focused on contention between different threads for computation resources rather than on network contention. For the communication patterns studied in that paper EM3D. On the X axis the span parameter is varied.
Reference: [15] <author> K. Keeton, T. Anderson, and D. Patterson, </author> <title> LogP Quantified: The Case for Low-Overhead Local Area Networks, Hot Interconnects III: A Symp. on High Performance Interconnects, </title> <institution> Stanford University, Stanford, </institution> <address> CA, </address> <month> Aug. </month> <pages> 10-12, </pages> <year> 1995. </year>
Reference: [16] <author> V. Karamcheti and A. A. Chien, </author> <title> A Comparison of Architectural Support for Messaging in the TMC CM-5 and the Cray T3D, </title> <booktitle> Proc. of the ISCA'95, </booktitle> <address> Santa Margherita Ligure Italy, </address> <year> 1995. </year>
Reference-contexts: A number of researchers have examined application performance in an empirical setting. For example, Karamcheti et al <ref> [16] </ref> studied the network interface architectures in the CrayT3D and TMC CM-5 and examined several messaging implementations for reducing output contention effects. Holt et al [13] studied the performance of cache-coherent distributed shared memory machines using four parameters similar to LogP.
Reference: [17] <author> C. P. Kruskal and M. Snir, </author> <title> The performance of multistage interconnection networks for multiprocessors, </title> <journal> IEEE Trans. Comput., </journal> <volume> Vol. 37, </volume> <pages> pp. 1091-1098, </pages> <month> Dec </month> <year> 1983. </year>
Reference-contexts: A similar open model of network contention was used by Kruskal and Snir for buffered indirect networks <ref> [17] </ref>. A different approach to the question of communication contention can be seen in studies such as [12]. This paper presents a worst case complexity analysis of the non-emptiness problem including the effects of contention.
Reference: [18] <author> K. Mackenzie, J. Kubiatowicz, M. Frank, W. Lee, V. Lee, A. Agarwal, and F. Kaashoek, </author> <title> Exploiting Two-Case Delivery for Fast Protected Messaging, </title> <booktitle> Proc. of 4th Int'l Symposium on High Performance Computer Architecture, </booktitle> <address> Las Vegas, NV, </address> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: Finally, LoGPC models the pipelining characteristics of DMA engines which allow the overlap of memory and network access times. We validate LoGPC by comparing its predictions to the mea sured performance of three applications implemented with Active Messages <ref> [11, 18] </ref> on the MIT-Alewife [2] multiprocessor. The applications used for validation are all-to-all-remap with synchronous and asynchronous messaging, a dynamic programming based DNA chain comparison program called the Diamond DAG, and EM3D a benchmark code that models the propagation of the electromagnetic waves in solids.
Reference: [19] <author> N.K. Madsen. </author> <title> Divergence preserving discrete surface integral methods for Maxwell's curl equations using nonorthogonal unstructured grids, </title> <type> Technical Report 92.04, </type> <institution> RIACS, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: It models the propagation of electromagnetic waves through three-dimensional objects using algorithms described in <ref> [19] </ref>. We started with a message passing version ported from a CM-5 bulk transfer implementation [8]. EM3D operates on an irregular bipartite graph which consists of E nodes on one side, representing electric values and H nodes on the other, representing magnetic field value at that point.
Reference: [20] <author> R. Martin, A. Vahdat, D. Culler, T. Anderson, </author> <title> Effects of Communication Latency, Overhead and Bandwidth in a Cluster Architecture, </title> <booktitle> ISCA 97, </booktitle> <address> Denver, Colorado, </address> <month> June, </month> <year> 1997. </year>
Reference-contexts: Network bandwidth (and therefore contention) on Alewife is fairly representative of what is found in a variety of current generation commercial and research multiprocessors [7]. Because processor speeds are increasing faster than the bandwidth of high-end local area networks (e.g. Myrinet) network contention effects on networks of workstations (e.g. <ref> [20] </ref>) will be somewhat more severe than the contention observed in these results. 4.1 All-to-all remap In this subsection we analyze the performance of all-to-all remap with both asynchronous and synchronous short messages as well as for long messages. <p> A. Moritz et al [5] compared the communication performance of MPI on CrayT3D, Meiko and network of workstations. Keaton et al [5] quantified the LogP for local area networks. Martin et al <ref> [20] </ref> studied the impact of communication performance of parallel applications in high performance network of workstations. Using the LogGP parameters they showed that these applications show strong sensitivity to overheads.
Reference: [21] <author> C.H. Papadimitriou and M. Yannakis, </author> <title> Towards an architecture-independent analysis of parallel algorithms, </title> <journal> SIAM J. Comput, </journal> <volume> 19 </volume> <pages> 322-328, </pages> <year> 1990. </year>
Reference-contexts: Diamond DAG is a DNA chain comparison program that uses an algorithm based on dynamic programming. This application Diamond DAG has been previously analyzed with the delay model <ref> [21] </ref> and the CLAUD model [6]. Our objective in this section is to show how to derive the performance analytically including the costs of network contention. First we derive the performance for the no contention case. Then, we calculate the message injection rate including network contention effects.
References-found: 21

