URL: http://www.cs.wustl.edu/cs/techreports/1992/wucs-92-10.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Hierarchical Correctness Proofs for Recursive Distributed Algorithms using Dynamic Process Creation  
Author: Bala Swaminathan Kenneth J. Goldman 
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Date: Revised April 1993  
Pubnum: WUCS-92-10  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Gul A. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press series in AI, </publisher> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference-contexts: RN ([[j; g]]; v) E: if v 6= ? then s.ret [v] s 0 :ret [v]+1 Internal Actions: * F IN AL ([[; g]]; v) where v 2 f0; 1g P: s 0 :status = `running' s 0 :pending sends = ; s 0 :ret [0] + s 0 :ret <ref> [1] </ref> = s 0 :n v = 1 ) s 0 :ret [1] &gt; s:n=2 E: s:status; s:v final `fixed'; v Output Actions: * CREAT E ([[j; g]]; v; Q; m) P: s 0 :status = `running' (j; v) 2 s 0 :child j 62 s 0 :created m = s <p> s 0 :ret [v]+1 Internal Actions: * F IN AL ([[; g]]; v) where v 2 f0; 1g P: s 0 :status = `running' s 0 :pending sends = ; s 0 :ret [0] + s 0 :ret <ref> [1] </ref> = s 0 :n v = 1 ) s 0 :ret [1] &gt; s:n=2 E: s:status; s:v final `fixed'; v Output Actions: * CREAT E ([[j; g]]; v; Q; m) P: s 0 :status = `running' (j; v) 2 s 0 :child j 62 s 0 :created m = s 0 :t E: s:created s 0 :created [ fjg * SEN D <p> Initially, status is `dormant' and v initial and v final are undefined (?); the values of ret [0] and ret <ref> [1] </ref> are 0. The sets pending sends, child, and created are initially empty. <p> The DISCOVER FAULT ([[; g]]) action inserts the processor name tail () into the local state variable faulty if there exist at least t + 1 F items in each of child [0] and child <ref> [1] </ref>, where F = j " s 0 :faultyj. <p> s:status; s:v final `fixed'; ? else if (i 6= h ^ j 6= h) then s:P; s:n s 0 :P fhg ; s 0 :n 1 * DISCOVER FAULT ([[; g]]) P: s 0 :status = `running' child [0] s 0 :t + 1 j " s 0 :faultyj child <ref> [1] </ref> s 0 :t + 1 j " s 0 :faultyj E: s.faulty s 0 :faulty [ftail ()g setfault (Faulty g ; tail ()) Output Actions: * CREAT E ([[j; g]]; v; Q; m) P: s 0 :status = `running' (j; v) 2 s 0 :child j 62 s 0 :created <p> s:v final `fixed'; ? else if (i 6= h ^ j 6= h) then s:P; s:n s 0 :P fhg ; s 0 :n 1 * DISCOVER FAULT ([[d; ; g]]) P: s 0 :status = `running' child [0] s 0 :t + 1 j " s 0 :faultyj child <ref> [1] </ref> s 0 :t + 1 j " s 0 :faultyj E: s.faulty s 0 :faulty [ftail ()g setfault (Faulty g ; tail ()) Output Actions: * CREAT E ([[d; j; g]]; v; Q; m) P: s 0 :status = `running' (j; v) 2 s 0 :child j 62 s 0
Reference: [2] <author> Pierre America. </author> <title> Issues in the design of a parallel object oriented language. </title> <journal> Formal Aspects of Computing, </journal> <volume> 1(4) </volume> <pages> 366-411, </pages> <year> 1989. </year>
Reference: [3] <author> Pierre America and Frank de Boer. </author> <title> A proof system for process creation. </title> <booktitle> In Programming Concepts and Methods: Proceedings of the IFIP Working Group 2.2/2.3 Working Conference on Programming Concepts and Methods, Sea of Galilee, Israel, </booktitle> <pages> pages 303-332, </pages> <month> April </month> <year> 1990. </year>
Reference: [4] <author> A. Bar-Noy and D. Dolev. </author> <title> Families of consensus algorithms. </title> <booktitle> In Proceedings of the 3rd Aegean Workshop on computing, </booktitle> <pages> pages 380-390, </pages> <month> July </month> <year> 1988. </year>
Reference: [5] <author> A. Bar-Noy, D. Dolev, C. Dwork, and H. R. </author> <title> Strong. Shifting gears: Changing algorithms on the fly to expedite byzantine agreement. </title> <booktitle> In Proceedings of the 6th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 42-57, </pages> <month> August </month> <year> 1987. </year>
Reference: [6] <author> Piotr Berman and Juan A. Garay. </author> <title> Asymptotically optimal distributed consensus. </title> <booktitle> In Proceedings of the 16th Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 80-94, </pages> <month> July </month> <year> 1989. </year> <booktitle> Lecture Notes in Computer Science 372, </booktitle> <publisher> Springer-Verlag. </publisher> <pages> 54 </pages>
Reference: [7] <author> Piotr Berman, Juan A. Garay, and Kenneth J. Perry. </author> <title> Towards optimal distributed consensus. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 410-415, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: However, the extra effort in modeling this additional structure in the simple algorithm pays us back by permitting straightforward and insightful hierarchical proofs of correctness for the more sophisticated 20 algorithms (ESFM and cloture). To describe the algorithm formally, we use a notation similar to that in <ref> [7] </ref>. For an alphabet , let * denote the set of sequences from the set fl without repetitions, and let * k denote the set of sequences from * of length at most k. Let 2 * be the empty sequence. <p> The special action of the root node of processor g are given in Figure 6. Although our description of the algorithm is formulated differently, the ESFM algorithm presented here is essentially the same algorithm as that given by Berman, Garay, and Perry <ref> [7] </ref>. However, there are three differences between our ESFM algorithm and theirs. First, we make explicit that the default value is 0 when the return values from the children are equally split between 0 and 1. <p> The initial value of the first debate is the initial value assigned to that processor by the environment. The initial values of other debates are determined by whether the total number of nodes whose values are yet to be sent exceeds a threshold S = 2n 3 <ref> [7] </ref>. This total is computed by examining the shared data structure T g . Let i th level of a tree T g [k] denote the set of all nodes [[k; ; g]] in T g [k] such that jj = i. <p> Thus, the oracle models the fault detection information propagating back and forth between different debates. By neatly capturing the information (faults detected) contributed by the other debates, the oracle permits reasoning about each debate in isolation. Unlike Berman, Garay, and Perry <ref> [7] </ref>, we describe the algorithm in an asynchronous setting that allows debates to be created at any time, nondeterministically. A problem with this is that processors might prematurely start debate (k) when only less than k faults are detected. <p> Since every child z of y would have been created by a CREATE (z; v z ; Q z ; ?) action, z would return after sending its initial value to its cousin automata. This synchronous execution of the cloture algorithm is similar to that given in <ref> [7] </ref>. Now we will show that the synchronous execution of the cloture system satisfies the cloture conditions.
Reference: [8] <author> Kenneth P. Birman and Thomas A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference: [9] <author> K. Mani Chandy and J. Misra. </author> <title> The drinking philosophers problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(4) </volume> <pages> 632-646, </pages> <month> October </month> <year> 1984. </year>
Reference: [10] <author> Brian A. Coan. </author> <title> A communication-efficient canonical form for fault-tolerant distributed protocol. </title> <booktitle> In Proceedings of the 5th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 63-72, </pages> <month> August </month> <year> 1986. </year>
Reference: [11] <author> Brian A. Coan and Jennifer L. Welch. </author> <title> Modular construction of a byzantine agreement protocol with optimal message bit complexity. </title> <journal> Information and Computation, </journal> <volume> 97(1) </volume> <pages> 61-85, </pages> <month> March </month> <year> 1992. </year>
Reference: [12] <author> Danny Dolev and H R Strong. </author> <title> Polynomial algorithms for multiple processor agreement. </title> <booktitle> In Proceedings 14th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 401-407, </pages> <month> May </month> <year> 1982. </year>
Reference: [13] <author> Alan Fekete, Nancy Lynch, and Liuba Shrira. </author> <title> A modular proof of correctness for a network synchronizer. </title> <booktitle> In The 2nd International Workshop on Distributed Algorithms, </booktitle> <address> July 1987. Am-sterdam, The Netherlands. </address>
Reference: [14] <author> Michael J. Fischer and Nancy A. Lynch. </author> <title> A lower bound for the time to assure interactive consistency. </title> <journal> Information Processing Letters, </journal> <volume> 14(4) </volume> <pages> 183-186, </pages> <year> 1982. </year>
Reference: [15] <author> Michael J. Fischer, Nancy A. Lynch, and M. Merritt. </author> <title> Easy impossibility proofs for distributed consensus problems. </title> <journal> Distributed Computing, </journal> <volume> 1(1) </volume> <pages> 26-39, </pages> <month> January </month> <year> 1986. </year>
Reference: [16] <author> Michael J. Fischer, Nancy A. Lynch, and Michael S. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference: [17] <author> Juan A. Garay and Yoram Moses. </author> <title> Fully polynomial byzantine agreement in t + 1 rounds. </title> <booktitle> In In Proceedings of the 25 th Annual Symposium in Theory of Computing, </booktitle> <address> San Diego, CA, </address> <month> May 16-18, </month> <year> 1993, </year> <month> May </month> <year> 1993. </year> <month> 55 </month>
Reference-contexts: We feel that the use of recursion in distributed algorithms can be powerful. It will be interesting to see how the techniques presented here can be used in understanding or designing other recursive distributed algorithms, including the new Byzantine agreement protocol of Garay and Moses <ref> [17] </ref>. Acknowledgments We would like to thank Brian Coan, Kenneth Cox, Alan Fekete, Rose Gamble, Terry Idol, Paul McCartney, and Catalin Roman for their helpful comments on earlier drafts.
Reference: [18] <author> Kenneth Goldman and Nancy Lynch. </author> <title> Modelling shared state in a shared action model. </title> <booktitle> In Proceedings of the 5th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <month> June </month> <year> 1990. </year>
Reference: [19] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference: [20] <author> Bengt Jonsson. </author> <title> A model and proof system for asynchronous networks. </title> <booktitle> In Proceedings of the 4th ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1985. </year>
Reference: [21] <author> Bengt Jonsson. </author> <title> Compositional specification and verification of distributed systems. </title> <type> Technical Report SICS/R-90/90010, </type> <institution> Swedish Institute of Computer Science, </institution> <month> October </month> <year> 1990. </year>
Reference: [22] <author> Bengt Jonsson. </author> <title> Simulations between specification of distributed systems. </title> <booktitle> In Proceedings of the 2nd International Conference on Concurrency Theory, </booktitle> <volume> LNCS 527, </volume> <pages> pages 346-360. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1991. </year>
Reference: [23] <author> Leslie Lamport, Robert Shostak, and Marshall Pease. </author> <title> The byzantine generals problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference: [24] <author> John Leo. </author> <title> Dynamic process creation in a static model. M.S. </title> <type> Thesis, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> May </month> <year> 1990. </year>
Reference: [25] <author> B. Liskov and R. Scheifler. </author> <title> Guardians and actions: Linguistic support for robust, distributed programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(3) </volume> <pages> 381-404, </pages> <month> July </month> <year> 1983. </year>
Reference: [26] <author> Nancy Lynch, Michael Merritt, William Weihl, and Alan Fekete. </author> <title> Atomic Transactions. </title> <booktitle> In progress. </booktitle>
Reference: [27] <author> Nancy A. Lynch and Mark R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the 6th ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151, </pages> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference: [28] <author> Nancy A. Lynch and Mark R. Tuttle. </author> <title> An introduction to Input/Output Automata. </title> <journal> CWI-Quarterly, </journal> <volume> 2(3), </volume> <year> 1989. </year> <month> 56 </month>
Reference: [29] <author> George Milne and Robin Milner. </author> <title> Concurrent processes and their syntax. </title> <journal> Journal of ACM, </journal> <volume> 26(2) </volume> <pages> 302-321, </pages> <month> April </month> <year> 1979. </year>
Reference: [30] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference: [31] <author> Y. Moses and O. Waarts. </author> <title> Coordinated traversal (t+1)-round byzantine agreement in polynomial time. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 246-255, </pages> <month> October </month> <year> 1988. </year>
Reference: [32] <author> Sergio Rajsbaum and Yossi Malka. </author> <title> Analysis of distributed algorithms based on recurrence relations. </title> <note> preliminary version, </note> <month> October </month> <year> 1991. </year>
Reference: [33] <author> S. Toueg, K. J. Perry, and T. K. Srikanth. </author> <title> Fast distributed agreement. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16 </volume> <pages> 445-458, </pages> <month> June </month> <year> 1987. </year>
Reference: [34] <author> Jennifer Welch, Leslie Lamport, and Nancy Lynch. </author> <title> A lattice-structured proof of a minimum spanning tree algorithm. </title> <booktitle> In Proceedings of the 7th ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 28-43, </pages> <month> August </month> <year> 1988. </year>
Reference: [35] <author> Jennifer L. Welch and Nancy A. Lynch. </author> <title> Synthesis of efficient drinking philosophers algorithms. </title> <type> Technical Report MIT/LCS/TM-417, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> November </month> <year> 1989. </year> <note> Revised version submitted for publication as "A Modular Drinking Philosophers Algorithm". 57 </note>
References-found: 35

