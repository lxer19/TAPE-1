URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/birkedal/pub/kit.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/birkedal/www/papers.html
Root-URL: http://www.cs.cmu.edu
Title: inexhaustive pattern matches and bindings. Modules compiler. There is currently no lambda compiler for the
Date: 112  
Note: APPENDIX B. THE STATE OF THE SYSTEM  Treatment of Match and Bind. Although Match and Bind are defined in the prelude, they are not raised by  These should be converted to use the Edinburgh Library's set operations. The main occurrences are those where ListHacks and LIST HACKS are currently being used.  this annotation.  
Abstract: probably be done for exception and data constructors printed at top-level. Similarly, we could insist that values whose data constructors are completely inaccessible be printed opaquely; this would implement abstype properly. Redefinition of ref. The Kit currently allows redefinition of ref as a data constructor (which is a problem since application of ref must be treated specially) and also as a type constructor (which is a problem since equality admission regards ref specially). Bad functor argument reporting. The declaration "functor F() = struct end" gets turned into a report with what looks like the first line missing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrew W. Appel. </author> <title> A runtime system. </title> <journal> LISP and Symbolic Computation, </journal> <volume> 3 </volume> <pages> 343-380, </pages> <year> 1990. </year>
Reference: [2] <author> Andrew W. Appel. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [3] <author> Andrew W. Appel and David B. MacQueen. </author> <title> A Standard ML compiler. </title> <editor> In Gilles Kahn, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture. ACM, </booktitle> <publisher> Springer-Verlag, </publisher> <month> Sept </month> <year> 1987. </year>
Reference: [4] <author> Andrew W. Appel, James S. Mattson, and David R. Tarditi. </author> <title> A lexical analyzer generator for Standard ML. Online documentation distributed with SML/NJ, </title> <year> 1989. </year>
Reference: [5] <author> Andrew W. Appel and David R. Tarditi. ML-Yacc, </author> <title> version 2.1. documentation for release version. Online documentation distributed with SML/NJ, </title> <month> March </month> <year> 1991. </year>
Reference: [6] <author> Marianne Baudinet and David MacQueen. </author> <title> Tree pattern matching for ML. Extended abstract, </title> <month> December </month> <year> 1985. </year>
Reference: [7] <author> Dave Berry. </author> <title> The edinburgh sml library. </title> <type> Technical Report ECS-LFCS-91-148, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, Edinburgh University, </institution> <month> April </month> <year> 1991. </year>
Reference: [8] <author> L. Damas and R. Milner. </author> <title> Principal type schemes for functional programs. </title> <booktitle> In Proc. 9th Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 207-212, </pages> <month> Jan. </month> <year> 1982. </year>
Reference: [9] <editor> Simon L. Peyton Jones. </editor> <booktitle> The Implementation of Functional Programming Languages. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference: [10] <author> Robin Milner and Mads Tofte. </author> <title> Commentary on Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [11] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>

References-found: 11

