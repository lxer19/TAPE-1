URL: http://www-cad.eecs.berkeley.edu/~orna/publications/spin96.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~orna/pub.html
Root-URL: 
Email: fgerard, okg@research.bell-labs.com  
Title: Not Checking for Closure under Stuttering  
Author: Gerard J. Holzmann and Orna Kupferman 
Address: 600 Mountain Avenue Murray Hill, NJ 07974  
Affiliation: Bell Laboratories  
Abstract: The model checker Spin works better with specifications that are closed under stuttering. Checking such specifications, Spin can use its partial-order reductions. It is hard to check whether a given specification is closed under stuttering and it is pity to give up Spin's partial-order reductions. We suggest an algorithm that, given a program P and a specification N of bad behaviors for P , checks the correctness of P with respect to an extension N 0 of N that is guaranteed to be closed under stuttering. In this check, Spin can use its partial-order reductions. If P is correct with respect to N 0 , we conclude that it is correct also with respect to N . If P is not correct with respect to N 0 , we use the counter-example that Spin provides to determine whether the program is correct with respect to N or that N is not closed under stuttering.
Abstract-found: 1
Intro-found: 1
Reference: [Hol91] <author> G.J. Holzmann, </author> <title> Design and Validation of Computer Protocols. </title> <publisher> Prentice Hall, Software Series, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction To perform verifications with the model checker Spin <ref> [Hol91] </ref>, the user should provide two specifications. The first formalizes the behavior of the system to be verified; the second formalizes all possible violations of the correctness requirements. The first specification is usually given as a set of asynchronous processes, specified in the language of the verifier (Promela).
Reference: [HP94] <author> G.J. Holzmann, D. Peled, </author> <title> An Improvement in Formal Verification, </title> <booktitle> Proc. 7th Int. Conf. on Formal Description Techniques, Berne, </booktitle> <address> Switzerland, </address> <year> 1994, </year> <pages> 177-194. </pages>
Reference-contexts: In particular, this is true for the partial-order reductions used in Spin version 2. These reductions are guaranteed to preserve safety and liveness properties for an automaton N whose language is closed under stuttering <ref> [HP94] </ref>. Given a never-claim automaton N , a naive algorithm would test N for closure under stuttering and, according to the result, decide whether or not partial-order reductions can be applied. Testing N for closure under stuttering, however, is hard.
Reference: [PWW96] <author> D. Peled, T. Wilke, and P. Wolper. </author> <title> An Algorithmic Approach for Checking Closure Properties of !-regular Languages. </title> <booktitle> Proc. 7th Conf. on Con-currency Theory, </booktitle> <address> Pisa, Italy, </address> <year> 1996. </year>
Reference-contexts: Testing N for closure under stuttering, however, is hard. Indeed, the problem of testing Buchi automata for closure under stuttering is PSPACE-complete <ref> [PWW96] </ref>. Ideally, we would like to use a method that avoids the test, but can still apply the partial order reduction algorithm in as many cases as possible.
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> An Automata-Theoretic Approach to Automatic Program Verification. </title> <booktitle> Proc. of the First Symposium on Logic in Computer Science, </booktitle> <pages> 322-331, </pages> <address> Cambridge, </address> <month> June </month> <year> 1986. </year>
Reference-contexts: The second specification is given directly as a Buchi word automaton, in the syntax of Promela. We refer to this automaton as the never-claim N . Verification is now reduced to checking the emptiness of the intersection of the automata P and N <ref> [VW86] </ref>. If the intersection is empty, it is guaranteed that no computation of the system violates the correctness requirement. If the intersection is not empty, Spin generates an infinite word in the intersection, and presents it as a counter-example to the correctness requirement.
References-found: 4

