URL: http://cs-www.bu.edu/techreports/96-017-load-profiling.ps.Z
Refering-URL: http://cs-www.bu.edu/faculty/best/res/Home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (best@cs.bu.edu)  
Title: LOAD PROFILING IN DISTRIBUTED REAL-TIME SYSTEMS "One Size Doesn't Fit All"  
Author: Azer Bestavros 
Keyword: Distributed systems; real-time systems; scheduling; performance evalu ation; load-profiling.  
Note: This work has been partially supported by NSF (grant CCR-9308344).  
Address: 111 Cummington street Boston, MA 02215  
Affiliation: Boston University Computer Science Department  
Abstract: Load balancing is often used to ensure that nodes in a distributed systems are equally loaded. In this paper, we show that for real-time systems, load balancing is not desirable. In particular, we propose a new load-profiling strategy that allows the nodes of a distributed system to be unequally loaded. Using load profiling, the system attempts to distribute the load amongst its nodes so as to maximize the chances of finding a node that would satisfy the computational needs of incoming real-time tasks. To that end, we describe and evaluate a distributed load-profiling protocol for dynamically scheduling time-constrained tasks in a loosely-coupled distributed environment. When a task is submitted to a node, the scheduling software tries to schedule the task locally so as to meet its deadline. If that is not feasible, it tries to locate another node where this could be done with a high probability of success, while attempting to maintain an overall load profile for the system. Nodes in the system inform each other about their state using a combination of multicasting and gossiping. The performance of the proposed protocol is evaluated via simulation, and is contrasted to other dynamic scheduling protocols for real-time distributed systems. Based on our findings, we argue that keeping a diverse availability profile and using passive bidding (through gossiping) are both advantageous to distributed scheduling for real-time systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Azer Bestavros and Dimitrios Spartiotis. </author> <title> Probabilistic Job Scheduling for Distributed Real-time Applications. </title> <booktitle> In Proceedings of the First IEEE Workshop on Real-Time Applications, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Acknowledgments I would like to thank Dimitri Spartiotis for his work on implementing parts of the simulator for the distributed load-profiling algorithm, and Krithi Ramamritham and Jack Stankovic for their valuable remarks on an earlier version of this work <ref> [1] </ref>. 21
Reference: [2] <author> H. Chetto and M. Chetto. </author> <title> Some results of the earliest deadline scheduling algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(10) </volume> <pages> 1261-1269, </pages> <month> October </month> <year> 1989. </year>
Reference: [3] <author> Jen-Yao Chung, Jane Liu, and Kwei-Jay Lin. </author> <title> Scheduling periodic jobs that allow imprecise results. </title> <journal> IEEE Transaction on Computers, </journal> <volume> 19(9) </volume> <pages> 1156-1173, </pages> <month> September </month> <year> 1990. </year>
Reference: [4] <author> R. I. Davis, K. W. Tindell, and A. Burns. </author> <title> Scheduling slack time in fixed priority pre-emptive systems. </title> <booktitle> In Proceedings of the IEEE Real-time Systems Symposium, </booktitle> <pages> pages 222 - 231, </pages> <month> December </month> <year> 1993. </year>
Reference: [5] <author> M.L. Dertouzos and A.K. Mok. </author> <title> Multiprocessor on-line scheduling of hard-real-time tasks. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-15, </volume> <month> December </month> <year> 1989. </year>
Reference: [6] <author> D. L. Eager, E. D. Lazowska, and J. Zahorjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12:662-675, </volume> <month> May </month> <year> 1986. </year>
Reference-contexts: A load-profiled system would tend to distribute this load in such a way that the probability of satisfying the utilization requirements of incoming tasks is maximized. Let S denote the set of nodes in the system. For distributed scheduling purposes, we assume the availability of a location policy <ref> [6] </ref> that allows a scheduler to select a subset of nodes from S that are believed to be be capable of satisfying the utilization requirement u of an incoming sporadic task. We denote this candidate set by C.
Reference: [7] <author> R. L. Graham et al. </author> <title> Optimization and approximation in deterministic sequencing and scheduling: A survey. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference: [8] <author> M. Hailperin. </author> <title> Load Balancing Using Time Series Analysis for Soft Real Time Systems with Statistically Periodic Loads. </title> <type> PhD thesis, </type> <institution> Stanford University, Computer Science Department, </institution> <year> 1994. </year> <note> Also TR: CS-TR-94-1514. </note>
Reference: [9] <author> J. P. Lehoczky, L. Sha, and J. K. Strosnider. </author> <title> Enhanced aperiodic responsiveness in hard real-time environments. </title> <booktitle> In Proceedings of the 8th IEEE Real-time Systems Symposium, </booktitle> <pages> pages 261-270, </pages> <month> December </month> <year> 1987. </year>
Reference: [10] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in hard real-time environments. </title> <journal> Journal of the Assocation of Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference: [11] <author> C. McGeoch and J. Tygar. </author> <title> When are best fit and first fit optimal? In Proceedings of 1988 SIAM Conference of Discrete Mathematics, </title> <year> 1988. </year>
Reference-contexts: Even if such rescheduling is tolerable, achieving a perfect fit is known to be NP-hard. For these reasons, heuristics such as first-fit or best-fit are usually employed for on-line scheduling. Asymptotically, both the first-fit and best-fit heuristics are known to be optimal <ref> [11] </ref>. However, for a small value of N | which is likely to be the case in most distributed systems|best-fit outperforms first-fit. First-fit and best-fit heuristics work well when accurate information about the available utilization at all nodes in the system is available.
Reference: [12] <author> Michael Mitzenmacher. </author> <title> Large Markovian Particle Processes and Some Applications to Load Balancing. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, Berkeley, </institution> <address> CA, </address> <year> 1996. </year>
Reference-contexts: The fact that LPA without reforwarding delivers most of the performance gains achievable using LPA with reforwarding could be thought of as a generalization of the Markovian analysis of Mitzen-macher <ref> [12] </ref>, which considers a dynamic scheduling policy that randomly selects d out of n servers in a distributed system and then chooses one of these d servers based on some performance metric (e.g., queue length). The analysis and simulations in [12] show that a d value of 2 seems to deliver <p> of as a generalization of the Markovian analysis of Mitzen-macher <ref> [12] </ref>, which considers a dynamic scheduling policy that randomly selects d out of n servers in a distributed system and then chooses one of these d servers based on some performance metric (e.g., queue length). The analysis and simulations in [12] show that a d value of 2 seems to deliver most of the possible performance gains. LPA without reforwarding is a scheduling policy that examines exactly 2 servers for possibly executing an incoming sporadic task. <p> LPA with reforwarding could be thought of as a scheduling policy that examines d servers through successive forwarding, where 2 t d n. While the results in <ref> [12] </ref> were only targetted at systems that attempt to balance their load, our simulations illustrated in figure 12 suggest that these results also hold for systems that attempt to profile their load. namely the focused addressing mechanism and the bidding mechanism [25], as well as to load-incognizant algorithms, namely a random
Reference: [13] <author> K. Ramamritham, J. Stankovic, and W. Zhao. </author> <title> Distributed scheduling of tasks with deadlines and resource requirements. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-38, </volume> <month> August </month> <year> 1989. </year>
Reference: [14] <author> Krithi Ramamritham and John Stankovic. </author> <title> Scheduling strategies adopted in spring: An overview. </title> <type> Technical Report COINS-TR-91-45, </type> <institution> University of Massachusetts at Amherst, </institution> <month> December </month> <year> 1991. </year>
Reference: [15] <author> S. Ramos-Thuel and J. K. Strosnider. </author> <title> The transient server approach to scheduling time-critical recovery operations. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 286 - 295, </pages> <month> December </month> <year> 1991. </year>
Reference: [16] <author> L. Sha and J. Goodenough. </author> <title> Real-time scheduling theory and ADA. </title> <booktitle> IEEE Computer, </booktitle> <month> April </month> <year> 1990. </year>
Reference: [17] <author> L. Sha, R. Rajkumar, J. Lehoczky, and K. Ramamritham. </author> <title> Mode change protocols for priority-driven preemptive scheduling. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 1, </volume> <year> 1989. </year> <month> 22 </month>
Reference: [18] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> 9 </month> <year> 1990. </year>
Reference: [19] <author> Lui Sha, R. Rajkumar, Sang Son, and Chun-Hyon Chang. </author> <title> A real-time locking protocol. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference: [20] <author> C. Shen, K. Ramamritham, and J. A. Stankovic. </author> <title> Resource reclaiming in real-time. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 41 - 50, </pages> <month> December </month> <year> 1989. </year>
Reference: [21] <author> Wei-Kuan Shih, Jane Liu, and Jen-Yao Chung. </author> <title> Algorithms for scheduling imprecise computations with timing constraints. </title> <journal> SIAM journal of Computing, </journal> <month> July </month> <year> 1991. </year>
Reference: [22] <author> B. Sprunt, Lui Sha, and John Lehoczky. </author> <title> Aperiodic task scheduling for hard real-time systems. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 1 </volume> <pages> 27-60, </pages> <year> 1989. </year>
Reference: [23] <author> Marco Spuri and Giorgio C. Buttazzo. </author> <title> Efficient aperiodic service under earliest deadline scheduling. </title> <booktitle> In Proceedings of the IEEE Real-time Systems Symposium, </booktitle> <pages> pages 2 - 11, </pages> <month> December </month> <year> 1994. </year>
Reference: [24] <author> John Stankovic. </author> <title> Stability and distributed scheduling algorithms. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1141-1152, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: GossipDelay and MulticastSet are chosen in such a way that the dissemination of major workload changes is guaranteed to propagate fast enough using both MULTICAST and GOSSIP. This is necessary to ensure stability <ref> [24] </ref>.
Reference: [25] <author> John Stankovic and Krithi Ramamritham. </author> <title> The Spring Kernel: A new paradigm for real-time operating systems. </title> <journal> ACM Operating Systems Review, </journal> <volume> 23(3) </volume> <pages> 54-71, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: While the results in [12] were only targetted at systems that attempt to balance their load, our simulations illustrated in figure 12 suggest that these results also hold for systems that attempt to profile their load. namely the focused addressing mechanism and the bidding mechanism <ref> [25] </ref>, as well as to load-incognizant algorithms, namely a random forwarding mechanism and a no-forwarding (local scheduling only) mechanism. The parameters used for these experiments are those of the baseline prameters shown in figure 7. Our LPA protocol performs demonstrably better than all others, especially under moderate and heavy loads.
Reference: [26] <author> John Stankovic, Krithi Ramamritham, and S. Cheng. </author> <title> Evaluation of a flexible task scheduling algorithm for distributed hard real-time systems. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 1130-1143, </pages> <month> December </month> <year> 1985. </year>
Reference: [27] <author> John Stankovic, Krithi Ramamritham, and S. Cheng. </author> <title> The Spring Kernel: A new paradigm for real-time systems. </title> <journal> IEEE Software, </journal> <pages> pages 54-71, </pages> <month> May </month> <year> 1992. </year>
Reference: [28] <author> Jay Strosnider. </author> <title> Highly Responsive real-time token rings. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1988. </year>
Reference: [29] <author> S. R. Thuel and J. P. Lehoczky. </author> <title> Algorithms for scheduling hard aperiodic tasks in fixed-priority systems using slack stealing. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 22 - 33, </pages> <month> December </month> <year> 1994. </year>
Reference: [30] <author> Songnian Zhou. </author> <title> Performance Studies of Dynamic Load Balancing in Distributed Systems. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, Computer Science Department, </institution> <year> 1987. </year> <note> Also TR: CSD-87-376. </note>
References-found: 30

