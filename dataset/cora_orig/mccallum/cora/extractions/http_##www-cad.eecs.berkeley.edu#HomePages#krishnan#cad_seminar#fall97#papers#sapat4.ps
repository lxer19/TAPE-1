URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/papers/sapat4.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/abstract/sapatnekar.html
Root-URL: http://www.cs.berkeley.edu
Title: Efficient Minarea Retiming of Large Level-Clocked Circuits  Category Numbers Row Column  
Date: 04 09  
Note: Affiliation EURO-DAC 97  
Pubnum: 04 04  
Abstract: Retiming is a powerful transformation that improves performance while preserving functionality. Recent research has led to the development of extremely fast algorithms for retiming edge-triggered circuits, and this paper addresses the harder problem of retiming level-clocked circuits. Level-clocked circuits have the potential to operate faster and require less memory elements than edge-triggered circuits. We present an efficient algorithm for minimum area retiming of large circuits (over 55,000 gates) using multi-phase symmetric clock schedules. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Leiserson, F. Rose, and J. B. Saxe, </author> <title> "Optimizing synchronous circuitry by retiming," </title> <booktitle> in Proceedings of the 3rd Caltech Conference on VLSI, </booktitle> <pages> pp. 87-116, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction Timing optimization plays a vital role in the synthesis of VLSI circuits. One method that is of great interest to the design and CAD community is the procedure of retiming, introduced by Leiserson and Saxe <ref> [1, 2] </ref>. Retiming takes an unoptimized circuit and relocates the memory elements to achieve minimum clock period (minperiod retiming) or minimum area (minarea retiming). The memory elements in a circuit may be either edge-triggered (called FF's) or level-sensitive (called latches).
Reference: [2] <author> C. E. Leiserson and J. B. Saxe, </author> <title> "Retiming synchronous circuitry," </title> <journal> Algorithmica, </journal> <volume> vol. 6, </volume> <pages> pp. 5-35, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Timing optimization plays a vital role in the synthesis of VLSI circuits. One method that is of great interest to the design and CAD community is the procedure of retiming, introduced by Leiserson and Saxe <ref> [1, 2] </ref>. Retiming takes an unoptimized circuit and relocates the memory elements to achieve minimum clock period (minperiod retiming) or minimum area (minarea retiming). The memory elements in a circuit may be either edge-triggered (called FF's) or level-sensitive (called latches). <p> The minarea retiming problem for level-clocked circuits can be formulated as a linear program (LP). This LP is dual of a minimum cost network flow (mincost flow) problem and thus can be efficiently solved <ref> [2] </ref>. Due to the transparent nature of the latches the number of constraints in this LP is extremely large: for a circuit with jGj gates the number of period constraint is found to be almost jGj 2 =2. This places heavy time and space requirements on the minarea retiming. <p> Thus for a k phase symmetric clocking scheme = k and = + fl. In this work we consider only symmetric clocking schemes. 2.2 The Circuit Model The graph model used here is identical to the one in <ref> [2] </ref>. A sequential circuit is represented by a directed graph, G (V; E), where each vertex v corresponds to a gate, and a directed edge e uv represents a connection from the output of gate u to the input of gate v, through zero or more latches. <p> To accurately model the number of latches needed in a circuit we take into account maximum latch sharing. To achieve this each gate with multiple fanouts has a mirror gate of zero delay, associated with it; details are given in <ref> [2] </ref>. A retiming is a labeling of the vertices r : V ! Z, where Z is the set of integers. <p> P h P P i subject to r (u) r (v) w (e uv ) 8e uv 2 E r (u) r (v) (u; v) 8u; v 9 p : u ; v The significance of the objective function and the constraints is as follows (the reader is referred to <ref> [2] </ref> for details). * The objective function represents the number of latches added to the retimed circuit in relation to the original circuit taking into account maximal latch sharing at the output of a gate. * The first set of constraints ensures that the weight e uv of each edge (i.e., <p> The bounds on the r value of a mirror vertex m i for the gate i can easily be derived from the bounds on the fanouts of gate i as explained in [11]. To obtain these bounds we utilize (a) the fact from <ref> [2] </ref> that after optimal retiming the weight on at least one of the edges to the mirror gate will be zero, and (b) the non-negativity constraints on the edges to the mirror gate. <p> In calculating this area one FF is counted as two latches. The number of memory elements in each case is obtained after taking into account the maximum register sharing <ref> [2] </ref>. Table 2 shows a closer look at the performance of Minaret on various circuits. The reduction in 14 the number of nodes and constraints over existing methods is shown.
Reference: [3] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Retiming of circuits with single phase transparent latches," </title> <booktitle> in Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pp. 86-89, </pages> <year> 1991. </year>
Reference: [4] <author> A. Ishii, C. E. Leiserson, and M. C. Papaefthymiou, </author> <title> "Optimizing two-phase, </title> <booktitle> level-clocked circuitry," in Advanced Research in VLSI and Parallel Systems: Proceedings of the 1992 Brown/MIT Conference, </booktitle> <pages> pp. 246-264, </pages> <year> 1992. </year>
Reference: [5] <author> B. Lockyear and C. Ebeling, </author> <title> "Optimal retiming of level-clocked circuits using symmetric clock schedules," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pp. 1097-1109, </pages> <month> Sept. </month> <year> 1994. </year> <month> 16 </month>
Reference-contexts: To the best of our knowledge, no published work reduces the size of the LP for minarea retiming of level-clocked circuits. In <ref> [5] </ref> a technique is suggested for reducing the number of constraints in minperiod retiming, at the cost of some loss in accuracy. TIM presents results on circuits with less than 400 gates [6].
Reference: [6] <author> M. C. Papaefthymiou and K. H. Randall, "TIM: </author> <title> a timing package for two-phase, </title> <booktitle> level-clocked circuitry," in Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 497-502, </pages> <year> 1993. </year>
Reference-contexts: In [5] a technique is suggested for reducing the number of constraints in minperiod retiming, at the cost of some loss in accuracy. TIM presents results on circuits with less than 400 gates <ref> [6] </ref>. In this work we show that level-clocked circuit using symmetric clock schedules, with over 56,000 gates can be retimed for minarea in under 1.5 hour. As in all of the references on retiming listed above, this paper assumes the circuit to be composed of gates with constant delays.
Reference: [7] <author> M. C. Papaefthymiou, </author> <title> A Timing Analysis and Optimization System for Level-Clocked Circuitry. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1993. </year>
Reference-contexts: We assume that all gates have a unit delay, although we emphasize that the algorithm is applicable for non-unit delay gates as well. As in <ref> [7] </ref> to obtain level-clocked circuits we replaced each edge-triggered FF in the ISCAS89 circuits by two level-sensitive latches. We select the duty cycle and the phase ratio to be 50%,, although this selection is not required by our algorithm.
Reference: [8] <author> S. S. Sapatnekar and R. Deokar, </author> <title> "Utilizing the retiming skew equivalence in a practical algorithm for retiming large circuits," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 15, </volume> <pages> pp. 1237-1248, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: TIM [6,7] provides one such minarea retiming method for two-phase symmetric clocking schedules. We use the terms "TIM" and "Leiserson-Saxe approach" interchangeably to refer to the Leiserson-Saxe based method to retime level-clocked circuits implemented in TIM. The starting point of this work is the ASTRA algorithm <ref> [8] </ref>, which presented a different approach to retiming of edge-triggered circuits utilizing the retiming-skew equivalence. This equivalence was extended to level-clocked circuits in [9] which presented an algorithm for minperiod retiming of level-clocked circuits under a general multi-phase clock schedule. <p> This set, being dependent on the clock period, is referred to as the period constraint set C p . 2.4 Alternate View of Retiming The ASTRA algorithm in <ref> [8] </ref> utilized the equivalence between retiming and clock skew optimization to present a alternate view of retiming for edge-triggered circuits. The work in [9] presented a similar equivalence for level-clocked circuits and utilized it for retiming large circuits efficiently. We refer to both of these works as ASTRA.
Reference: [9] <author> N. Maheshwari and S. S. Sapatnekar, </author> <title> "A practical algorithm for retiming level-clocked circuits," </title> <booktitle> in Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pp. 440-445, </pages> <year> 1996. </year>
Reference-contexts: The starting point of this work is the ASTRA algorithm [8], which presented a different approach to retiming of edge-triggered circuits utilizing the retiming-skew equivalence. This equivalence was extended to level-clocked circuits in <ref> [9] </ref> which presented an algorithm for minperiod retiming of level-clocked circuits under a general multi-phase clock schedule. Both of these methods are capable of minperiod retiming of large circuits but do not address the harder problem of minarea retiming. <p> The work in <ref> [9] </ref> presented a similar equivalence for level-clocked circuits and utilized it for retiming large circuits efficiently. We refer to both of these works as ASTRA. The details of the ASTRA algorithm are provided in [9]; a brief description is presented here for completeness. <p> The work in <ref> [9] </ref> presented a similar equivalence for level-clocked circuits and utilized it for retiming large circuits efficiently. We refer to both of these works as ASTRA. The details of the ASTRA algorithm are provided in [9]; a brief description is presented here for completeness. The term Global Departure Time (GDT) is defined for each latch as the latest departure time of data signal from that latch, with reference to the arrival time at the primary inputs, in a global time frame. <p> After Phase B, any GDT value that is not in the allowable range is forced to be in the allowable range. This could cause the clock period obtained in Phase A to increase by a small amount; a upper bound on this increase is given in <ref> [9] </ref>. 3 Restricted Mobility In this paper, we reconcile the ASTA approach of solving the retiming problem for level-clocked circuits with the TIM approach. We will now show that reliable bounds on the retiming variables r of the TIM approach, can be obtained utilizing the ASTRA approach. <p> Similarly the ALAP (as-late-as-possible) locations has all latches as close to the primary outputs as possible 1 . We now describe how a modified form of the minperiod ASTRA <ref> [9] </ref> can be used to obtain these ASAP and ALAP locations. At the end of Phase A of ASTRA we get one possible set of GDT's. Note that this is not the only allowable set of GDT's, since slacks [9] in the arcs of the constraint graph can lead to other <p> We now describe how a modified form of the minperiod ASTRA <ref> [9] </ref> can be used to obtain these ASAP and ALAP locations. At the end of Phase A of ASTRA we get one possible set of GDT's. Note that this is not the only allowable set of GDT's, since slacks [9] in the arcs of the constraint graph can lead to other allowable solutions. We call the set of GDT values that provide the ASAP locations at the end of Phase B, the ASAP GDT's. The ALAP GDT's are similarly defined. <p> These ASAP/ALAP GDT's are then translated to the ASAP/ALAP locations in Phase B of ASTRA. As explained in <ref> [9] </ref>, latches that have positive GDT are moved in the direction opposite to the signal flow direction, and latches with negative GDT are relocated in the direction of signal flow. The procedure of relocating latches to find the ASAP and ALAP locations proceeds along the same lines as in [9], with <p> in <ref> [9] </ref>, latches that have positive GDT are moved in the direction opposite to the signal flow direction, and latches with negative GDT are relocated in the direction of signal flow. The procedure of relocating latches to find the ASAP and ALAP locations proceeds along the same lines as in [9], with a few variations described below. The allowable range ( 0 to ) of GDT's gives us some extra flexibility in the execution of Phase B of ASTRA.
Reference: [10] <author> N. Shenoy and R. Rudell, </author> <title> "Efficient implementation of retiming," </title> <booktitle> in Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 226-233, </pages> <year> 1994. </year>
Reference-contexts: This places heavy time and space requirements on the minarea retiming. Thus TIM is not capable of retiming large circuits for minimum area. A efficient method for minarea retiming of edge-triggered circuits was presented in <ref> [10] </ref>. However, the techniques of this work cannot be applied to level-clocked circuits due to the transparent nature of latches. In [11], the concept of bounds on the retiming variables was used to reduce the size of the LP for minarea retiming of edge-triggered circuits.
Reference: [11] <author> N. Maheshwari and S. S. Sapatnekar, </author> <title> "An improved algorithm for minimum-area retiming," </title> <note> submitted for publication, 1997. Manuscript available at http://www.public.iastate.edu/~naresh/dac97.html. </note>
Reference-contexts: Thus TIM is not capable of retiming large circuits for minimum area. A efficient method for minarea retiming of edge-triggered circuits was presented in [10]. However, the techniques of this work cannot be applied to level-clocked circuits due to the transparent nature of latches. In <ref> [11] </ref>, the concept of bounds on the retiming variables was used to reduce the size of the LP for minarea retiming of edge-triggered circuits. In this work a similar concept is used to solve the much harder problem of minarea retiming of level-clocked circuits. <p> The lower bound is similarly obtained while retiming for the ALAP locations. The bounds on the r value of a mirror vertex m i for the gate i can easily be derived from the bounds on the fanouts of gate i as explained in <ref> [11] </ref>. To obtain these bounds we utilize (a) the fact from [2] that after optimal retiming the weight on at least one of the edges to the mirror gate will be zero, and (b) the non-negativity constraints on the edges to the mirror gate. <p> Finally, we note that the concept of using bounds on retiming variables is similar to the one used for minarea retiming of level-clocked circuits in <ref> [11] </ref>. However, for level-clocked circuits the complexity added by the transparent nature of latches substantially changes the algorithms for the computation of these bounds, the generation of the constraints and their pruning.
Reference: [12] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms. </title> <address> New York, New York: </address> <publisher> McGraw-Hill Book Company, </publisher> <year> 1990. </year>
Reference-contexts: The Bellman-Ford algorithm <ref> [12] </ref> may be applied to this graph to find the longest path in the graph. <p> Now when the longest path Bellman-Ford algorithm is applied to the constraint graph for a specified clock, ALAP GDT's are calculated. ASAP GDT's can be obtained by running the Bellman-Ford algorithm on the transpose of this constraint graph <ref> [12] </ref> (i.e., a graph with the same vertex set as the original graph, but with the edge directions reversed). These ASAP/ALAP GDT's are then translated to the ASAP/ALAP locations in Phase B of ASTRA. <p> The redundant constraints can then be dropped to obtain C 0 p . 4.2.1 Computing the ffi Values The ffi values can be obtained by re-weighting each edge e ij to h d (i) i and performing an all-pairs shortest path computation. We use Johnson's algorithm <ref> [12] </ref> which has O (jV j) memory requirement, since O (jV j 2 ) memory is not practical for large circuits with tens of thousand gates. Johnson's algorithm first re-weights all edges to ensure nonnegative edge weights. <p> there are two extremes of chaining: * No information about the ffi values is stored, e.g., repeated single-source shortest paths algo rithms like Johnson's algorithm with O (jV j) memory requirements. * All information about the ffi values is stored, e.g., direct all-pairs shortest path algorithms like Floyd Warshall algorithm <ref> [12] </ref> with O (jV j 2 ) memory requirements. The chaining described above is an intermediate method in which we store ffi values from only one source. Conceptually we can define k-chaining as a method that stores ffi values from k appropriately 11 chosen sources.
Reference: [13] <author> G. D. </author> <title> Micheli, Synthesis and Optimization of Digital Circuits. </title> <address> New York, NY: </address> <publisher> McGraw-Hill, </publisher> <year> 1994. </year>
Reference-contexts: the ASAP and the ALAP locations are given in Figure 2 and locations due to the assumption that primary inputs and outputs behave like falling edge-triggered FF's. 1 The calculation of ASAP and ALAP times is a technique that is routinely used in scheduling in high-level synthesis; see, for example, <ref> [13] </ref>. 7 3.3 Bounds on the Retiming Variables During the procedure of obtaining the ASAP and ALAP locations in Phase B of ASTRA, we can also generate the bounds on the r variables. While moving the latches in Phase B, we count the number of latches that traverse each gate.
Reference: [14] <author> M. S. Bazaraa, J. J. Javis, and H. Sherali, </author> <title> Linear Programming and Network Flows. </title> <address> New York, NY: </address> <publisher> John Wiley, </publisher> <year> 1977. </year>
Reference-contexts: We applied different min-cost flow methods to solve the problem and found that it could be solved very efficiently using the network simplex algorithm from <ref> [14] </ref>. The network simplex method is a graph based adaptation of the LP simplex method which exploits the network structure to achieve very good efficiency. The upper and lower bounds on the r variables provide a initial feasible spanning tree. <p> To prevent cycling we construct the initial basis to be strongly feasible by using the appropriate bound (upper or lower) to connect a node to the root (host node). It is easy to maintain strongly feasible trees during the simplex operations, and details are given in <ref> [14] </ref>. Using the first eligible arc pivot rule with a wraparound arc list from [15] (page 417) gave us significant improvements in the run time. The r variables (duals of the flow variables) are directly available from the mincost flow solution.
Reference: [15] <author> R. K. Ahuja, T. L. Magnanti, and J. B. Orlin, </author> <title> Network Flows Theory, Algorithms and Applications. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <month> 17 </month>
Reference-contexts: It is easy to maintain strongly feasible trees during the simplex operations, and details are given in [14]. Using the first eligible arc pivot rule with a wraparound arc list from <ref> [15] </ref> (page 417) gave us significant improvements in the run time. The r variables (duals of the flow variables) are directly available from the mincost flow solution.
References-found: 15

