URL: http://www.cs.utexas.edu/users/dmcl/papers/ps/MMSJ-Scan.ps
Refering-URL: http://www.cs.utexas.edu/users/dmcl/allpapers.html
Root-URL: 
Title: Efficient Support for Interactive Operations in Multi-resolution Video Servers  
Author: Prashant J. Shenoy and Harrick M. Vin 
Keyword: Multi-resolution video servers, multi-resolution playback, scan operations, fast-forward, rewind, disk arrays, scalable compression  
Address: Taylor Hall 2.124, Austin, Texas 78712-1188  
Affiliation: Distributed Multimedia Computing Laboratory Department of Computer Sciences, University of Texas at Austin  
Email: E-mail: fshenoy,ving@cs.utexas.edu,  
Phone: Phone: (512) 471-9732, Fax: (512) 471-8885  
Web: URL: http://www.cs.utexas.edu/users/dmcl  
Abstract: In this paper, we present a placement algorithm that interleaves multi-resolution video streams on a disk array and enables a video server to efficiently support playback of these streams at different resolution levels. We then combine this placement algorithm with a scalable compression technique to efficiently support interactive scan operations (i.e., fast-forward and rewind). We present an analytical model for evaluating the impact of the scan operations on the performance of disk-array-based servers. Our experiments demonstrate that: (1) employing our placement algorithm substantially reduces seek and rotational latency overhead during playback, and (2) exploiting the characteristics of video streams and human perceptual tolerances enables a server to support interactive scan operations without any additional overhead.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Anderson, Y. Osawa, and R. Govindan. </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of single resolution video streams have been developed <ref> [1, 10, 16, 18, 20] </ref>.
Reference: [2] <author> E. Chang and A. Zakhor. </author> <title> Scalable Video Placement on Parallel Disk Arrays. </title> <booktitle> In Proceedings of IS&T/SPIE International Symposium on Electronic Imaging: Science and Technology, </booktitle> <address> San Jose, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Hence, a key challenge is to design a placement scheme that allows each sub-stream to be independently accessed, without imposing significant seek and rotational latency overheads. Most existing placement schemes have been developed for single resolution video streams <ref> [2, 16] </ref>; placement schemes that support efficient playback of multi-resolution video streams have not been adequately investigated. Several techniques for supporting interactive operations such as fast-forward and rewind (collectively referred to as scan) have been proposed in the literature. <p> Thus, depending on the type of media blocks used by the server, a request for a fixed number of frames in each round will require the server to access a fixed number of variable-size blocks or a variable number of fixed-size blocks <ref> [2, 14, 19] </ref>.
Reference: [3] <author> M. S. Chen and D. D. Kandlur. </author> <title> Downloading and Stream Conversion: Supporting Interactive Playout of Videos in a Client Station. </title> <booktitle> In Proceedings of the International Conference On Multimedia Computing and Systems (ICMCS), </booktitle> <address> Washington D.C., </address> <pages> pages 73-80, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Since rewind is similar to fast-forward, all of the above approaches for fast-forward can be easily extended to support rewind. In addition to these server-based approaches, several client-based approaches that do not require any server intervention during rewind have also been proposed <ref> [3, 8] </ref>. These techniques require a client to cache previously displayed frames for rewind. For instance, a scheme in which the client caches all previously displayed frames on a local disk has been recently proposed [3]. <p> These techniques require a client to cache previously displayed frames for rewind. For instance, a scheme in which the client caches all previously displayed frames on a local disk has been recently proposed <ref> [3] </ref>. In this scheme, frames decoded during normal playback are re-encoded such the stream does not contain any inter-frame dependencies, thereby enabling a client to independently decode every n-th frame during rewind. A limitation of this approach, however, is the additional storage space required at the client to support rewind.
Reference: [4] <author> M. S. Chen, D. D. Kandlur, and P. S. Yu. </author> <title> Support for Fully Interactive Playout in a Disk-Array-Based Video Server. </title> <booktitle> In Proceedings of the Second International Conference on Multimedia, </booktitle> <pages> pages 391-398, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Several techniques for supporting interactive operations such as fast-forward and rewind (collectively referred to as scan) have been proposed in the literature. For instance, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback [7, 8], or (2) skipping frames <ref> [4, 13] </ref>, or (3) using an independently encoded fast-forward stream. In the first scheme, to support fast-forward at n-times the normal playback rate, the server is required to retrieve n-times as many frames (as compared to the normal playback), yielding an n-fold increase in the load. <p> To avoid this problem, a fast-forward scheme in which: (1) video streams are stored on disks in terms of segments that consist of a group of independently decodable frames; and (2) fast-forward at n-times the normal playback is achieved by accessing and displaying every n-th segment has been proposed <ref> [4] </ref>. Such an approach eliminates the problem introduced by inter-frame dependencies. However, since each segment may contain a large number of successive frames (10-15 frames in MPEG), skipping entire segments may result in noticeable discontinuities during fast-forward, and hence, may be unacceptable.
Reference: [5] <author> T. Chiang and D. Anastassiou. </author> <title> Heirarchichal Coding of Digital Television. </title> <journal> IEEE Communications, </journal> <volume> 32(4) </volume> <pages> 38-45, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Since P and B frames exploit temporal redundancies, they achieve much higher compression ratios as compared to I frames. Figure 3 depicts the main steps involved in the MPEG compression algorithm. The MPEG-2 standard extends this algorithm by supporting scalability in the spatial, temporal, and chroma dimensions <ref> [5, 11] </ref>. MPEG-2 also allows hybrid scalabilitya technique in which a combination of these scalable modes may be used.
Reference: [6] <author> T. Chiueh and R. Katz. </author> <title> Multi-Resolution Video Representation for Parallel Disk Arrays. </title> <booktitle> In Proceedings of the ACM Multimedia'93, </booktitle> <address> Anaheim, CA., </address> <pages> pages 401-409, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: was supported in part by an IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems Inc. 1 2 1.1 Relation to Previous Work In general, a multi-resolution video stream consists of multiple sub-streams <ref> [6] </ref>. Whereas all sub-streams must be retrieved to display the video stream at the highest resolution, only a subset of the sub-streams need to be retrieved for playback at a lower resolution.
Reference: [7] <author> J. K. Dey-Sircar, J. D. Salehi, J. F. Kurose, and D. Towsley. </author> <title> Providing VCR Capabilities in Large-Scale Video Servers. </title> <booktitle> In Proceedings of the Second ACM International Conference on Multimedia, </booktitle> <pages> pages 25-32, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Several techniques for supporting interactive operations such as fast-forward and rewind (collectively referred to as scan) have been proposed in the literature. For instance, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback <ref> [7, 8] </ref>, or (2) skipping frames [4, 13], or (3) using an independently encoded fast-forward stream. <p> The additional resources that must be set aside is dependent on the probability of clients requesting a transition from playback to fast-forward, as well as the duration for which a client remains in the fast-forward mode <ref> [7] </ref>. In schemes that skip frames, on the other hand, fast-forward at n-times the playback rate is achieved by displaying every n th frame at the normal playback rate.
Reference: [8] <author> W. Feng, F. Jahanian, and S. Sechrest. </author> <title> Providing VCR Functionality in a Constant Quality Video-On-Demand Transportation Service. </title> <booktitle> In Proceedings of the International Conference On Multimedia Computing and Systems (ICMCS), </booktitle> <address> Hiroshima, Japan, </address> <pages> pages 127-135, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Several techniques for supporting interactive operations such as fast-forward and rewind (collectively referred to as scan) have been proposed in the literature. For instance, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback <ref> [7, 8] </ref>, or (2) skipping frames [4, 13], or (3) using an independently encoded fast-forward stream. <p> Since rewind is similar to fast-forward, all of the above approaches for fast-forward can be easily extended to support rewind. In addition to these server-based approaches, several client-based approaches that do not require any server intervention during rewind have also been proposed <ref> [3, 8] </ref>. These techniques require a client to cache previously displayed frames for rewind. For instance, a scheme in which the client caches all previously displayed frames on a local disk has been recently proposed [3]. <p> A limitation of this approach, however, is the additional storage space required at the client to support rewind. If the storage space available at the client is limited, then the client can cache only a small number of previously displayed frames <ref> [8] </ref>. In such a scenario, the duration of the rewind operation that can be supported without imposing any load on the server is limited by the size of the cache (referred to as a VCR-window).
Reference: [9] <author> D. Le Gall. </author> <title> MPEG: A Video Compression Standard for Multimedia Apllications. </title> <journal> Communications of the ACM, </journal> <volume> 34(4) </volume> <pages> 46-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: However, such frame skipping schemes may not be directly applicable for video streams encoded using compression algorithms that exploit temporal redundancy between successive frames (e.g., the MPEG compression standard <ref> [9] </ref>). This is because, such compression techniques create inter-frame dependencies which may prevent every n th frame to be independently decoded. <p> However, maintaining such a fast-forward stream may incur a substantial storage space overhead. To minimize storage space overhead, the MPEG standard has proposed the creation of a video stream containing D frames, which contain only the DC coefficients of the transform blocks <ref> [9] </ref>. However, this yields a video stream with very poor quality, which is not acceptable for most applications. Since rewind is similar to fast-forward, all of the above approaches for fast-forward can be easily extended to support rewind. <p> In intra-frame compression algorithms (e.g., JPEG [15]), since successive frames are encoded and decoded independently, both pre-compression and post-compression partitioning techniques are logically equivalent. Moreover, for such compression algorithms, temporal partitioning 6 does not have any adverse effects on compression efficiency. In inter-frame compression algorithms (e.g., MPEG <ref> [9] </ref> and MPEG-2 [11]), on the other hand, since the temporal redundancy between successive frames is used to efficiently encode the video stream, the degree of compression is critically dependent on the correlation between successive frames. <p> show how these techniques may be employed to support fast-forward and rewind in the MPEG compression algorithm. 3.2 Supporting Fast-Forward in MPEG 3.2.1 The MPEG Compression Standard The MPEG compression algorithm exploits the temporal and spatial redundancies present within a sequence of images to achieve a high degree of compression <ref> [9] </ref>. A group of pictures (GOP) in an MPEG stream is defined to be the smallest set of consecutive frames that is independently decodable.
Reference: [10] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of Delay Sensitive Multimedia Data Storage and Retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of single resolution video streams have been developed <ref> [1, 10, 16, 18, 20] </ref>.
Reference: [11] <author> International Organisation for Standardisation. </author> <title> Information Technology Generic Coding of Moving Pictures and Associated Audio Systems: Systems, Video and Audio, International Standard (MPEG2), </title> <address> ISO/IEC 13818,, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Moreover, for such compression algorithms, temporal partitioning 6 does not have any adverse effects on compression efficiency. In inter-frame compression algorithms (e.g., MPEG [9] and MPEG-2 <ref> [11] </ref>), on the other hand, since the temporal redundancy between successive frames is used to efficiently encode the video stream, the degree of compression is critically dependent on the correlation between successive frames. <p> Since P and B frames exploit temporal redundancies, they achieve much higher compression ratios as compared to I frames. Figure 3 depicts the main steps involved in the MPEG compression algorithm. The MPEG-2 standard extends this algorithm by supporting scalability in the spatial, temporal, and chroma dimensions <ref> [5, 11] </ref>. MPEG-2 also allows hybrid scalabilitya technique in which a combination of these scalable modes may be used. <p> The bit rate can be reduced by partitioning the base sub-stream into low-resolution and residual components, and utilizing only the low-resolution component for fast-forward. Examples of such chroma partitioning techniques include the SNR scalability and the data partitioning modes of the MPEG-2 standard <ref> [11] </ref>. Whereas the SNR scalability mode creates the low-resolution and residual components by controlling the granularity of quantization, the data partitioning technique achieves a similar effect by explicitly dividing the frequency domain coefficients between the two components.
Reference: [12] <author> E.K. Lee and R.H. Katz. </author> <title> An Analytic Performance Model for Disk Arrays. </title> <booktitle> In Proceedings of the 1993 ACM SIGMETRICS, </booktitle> <pages> pages 98-109, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Having determined the distribution of the number of blocks accessed from the most heavily loaded disk, the service time of the disk can then be computed by using a disk model. We use one such model that has been proposed in the literature <ref> [12, 19] </ref>. <p> spaced across the C cylinders of a disk, we define t s = t seek j b B max , where: t seek (x) = a x 1 + b (x 1) + c otherwise (8) and a, b, and c are constants (determined using physical characteristics of a disk) <ref> [12] </ref>. The average rotational latency, t r , is defined to be half of the maximum rotational latency.
Reference: [13] <author> J. C. S. Lui and K. W. </author> <title> Law. Load Balancing and VCR Functionalities Support via Subband Coding Techniques. </title> <booktitle> In Proceedings of the Sixth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 77-80, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Several techniques for supporting interactive operations such as fast-forward and rewind (collectively referred to as scan) have been proposed in the literature. For instance, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback [7, 8], or (2) skipping frames <ref> [4, 13] </ref>, or (3) using an independently encoded fast-forward stream. In the first scheme, to support fast-forward at n-times the normal playback rate, the server is required to retrieve n-times as many frames (as compared to the normal playback), yielding an n-fold increase in the load.
Reference: [14] <author> S. Paek, P. Bocheck, and S. F. Chang. </author> <title> Scalable MPEG2 Video Servers with Heterogeneous QoS on Parallel Disk Arrays. </title> <booktitle> In Proceedings of the Fifth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Thus, depending on the type of media blocks used by the server, a request for a fixed number of frames in each round will require the server to access a fixed number of variable-size blocks or a variable number of fixed-size blocks <ref> [2, 14, 19] </ref>.
Reference: [15] <author> W. B. Pennebaker and J. L. Mitchell. </author> <title> JPEG Still Image Data Compression Standard. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1993. </year>
Reference-contexts: Observe that, such temporal partitioning can be accomplished either prior-to or after compression (referred to as pre-compression and post-compression partitioning, respectively) (see Figure 2). The effectiveness of these approaches, however, is dependent on the compression algorithm. In intra-frame compression algorithms (e.g., JPEG <ref> [15] </ref>), since successive frames are encoded and decoded independently, both pre-compression and post-compression partitioning techniques are logically equivalent. Moreover, for such compression algorithms, temporal partitioning 6 does not have any adverse effects on compression efficiency.
Reference: [16] <author> F.A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming RAID: A Disk Storage System for Video and Audio Files. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 393-400, </pages> <month> August </month> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of single resolution video streams have been developed <ref> [1, 10, 16, 18, 20] </ref>. <p> Due to the large storage space requirement of multi-resolution video, most video servers employ disk arrays as their underlying storage medium. To effectively utilize the array bandwidth, the server stripes or interleaves each video stream among disks in the array <ref> [16] </ref>. In the simplest case, the server can stripe each sub-stream independently across the array. However, such a scheme can impose significant disk seek and rotational latency overheads while retrieving these sub-streams during playback. <p> Hence, a key challenge is to design a placement scheme that allows each sub-stream to be independently accessed, without imposing significant seek and rotational latency overheads. Most existing placement schemes have been developed for single resolution video streams <ref> [2, 16] </ref>; placement schemes that support efficient playback of multi-resolution video streams have not been adequately investigated. Several techniques for supporting interactive operations such as fast-forward and rewind (collectively referred to as scan) have been proposed in the literature.
Reference: [17] <author> K. S. Trivedi. </author> <title> Probability & Statistics With Reliability, Queuing, </title> <booktitle> And Computer Science Applications. </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: To precisely describe the model, let us assume that a client in the playback mode can switch to the fast-forward mode at any random instant and vice versa, and that such a behavior can be modeled using a two state Markov chain <ref> [17] </ref> (see Figure 6). Let F i denote the probability of switching from playback to fast-forward, and P i denote the probability of switching from fast-forward to playback mode for client i as shown in the figure. <p> That is, X j i 's are independent. Hence, we get: Z (B j ) = i=1 j 12 where Z (B j ) and Z (X j i ) are the z-transforms 2 of the random variables B j and X j i , respectively <ref> [17] </ref>. 3 Then the number of blocks accessed from the most heavily loaded disk is given by B max = max (B 1 ; B 2 ; ; B D ) Note that, sub-stream blocks are interleaved on the array in a round-robin manner and a client can access up to
Reference: [18] <author> H. M. Vin, P. Goyal, A. Goyal, and A. Goyal. </author> <title> A Statistical Admission Control Algorithm for Multimedia Servers. </title> <booktitle> In Proceedings of the ACM Multimedia'94, </booktitle> <address> San Francisco, </address> <pages> pages 33-40, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of single resolution video streams have been developed <ref> [1, 10, 16, 18, 20] </ref>.
Reference: [19] <author> H.M. Vin, S.S. Rao, and P. Goyal. </author> <title> Optimizing the Placement of Multimedia Objects on Disk Arrays. </title> <booktitle> In Proceedings of the Second IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Washington, D.C., </address> <pages> pages 158-165, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Thus, depending on the type of media blocks used by the server, a request for a fixed number of frames in each round will require the server to access a fixed number of variable-size blocks or a variable number of fixed-size blocks <ref> [2, 14, 19] </ref>. <p> Having determined the distribution of the number of blocks accessed from the most heavily loaded disk, the service time of the disk can then be computed by using a disk model. We use one such model that has been proposed in the literature <ref> [12, 19] </ref>.

References-found: 19

