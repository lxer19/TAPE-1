URL: http://hal.cs.vt.edu/~jpv/sbt.ps
Refering-URL: http://hal.cs.vt.edu/~jpv/papers.html
Root-URL: http://www.cs.vt.edu
Email: sguyer,heath,jpv@cs.vt.edu  
Title: SUBSEQUENCE AND RUN HEURISTICS FOR SORTING BY TRANSPOSITIONS (Draft)  
Author: Scott A. Guyer, Lenwood S. Heath, and John Paul C. Vergara 
Address: 24061-0106  
Affiliation: Department of Computer Science Virginia Polytechnic Institute and State University Blacksburg, Virginia  
Abstract: Accepted to The Fourth DIMACS International Algorithm Implementation Challenge. January 21, 1996 Sorting by transpositions is the problem of finding the minimum number of transpositions required to sort a permutation . A transposition involves repositioning a contiguous sequence (block) of elements by inserting it elsewhere in the permutation. The problem has applications in the study of genome rearrangements and phylogeny reconstruction. In this paper, several heuristics based on analyses of subsequences and runs in a permutation are employed. Experimental results are provided. The algorithm based on the longest increasing subsequence in a permutation appears most promising.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Bafna and P. A. Pevzner, </author> <title> Genome rearrangements and sorting by reversals, </title> <booktitle> in Proceedings of the 34th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1993, </year> <pages> pp. </pages> <month> 148-157. </month> <title> [2] , Sorting permutations by transpositions, </title> <booktitle> in Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 614-623. </pages>
Reference-contexts: They show that the problem is NP-complete in general but solvable in polynomial time when only certain operations are allowed. Ke-cecioglu and Sankoff [5, 6] and Bafna and Pevzner <ref> [1] </ref> have results on sorting by reversals. Here, the operation is a reversal, i.e., a fragment of the genome is inverted. <p> Given a permutation and a transposition, we measure the length of the longest increasing subsequence in the resulting permutation. Among all possible transpositions, we select one that yields the longest increasing subsequence. Our remaining heuristics are based on runs. A run (increasing strips in previous literature <ref> [1, 2, 5, 6] </ref>) is defined as a maximal subsequence of consecutive, contiguous elements in the permutation. We employ algorithms that repeatedly select a run and then merge it with other runs using appropriate transpositions. <p> The first method involves randomly selecting numbers from f1; 2; : : : ; ng in sequence to form a permutation of size n. Bafna and Pevzner <ref> [1] </ref> prove that permutations generated this way have an expected reversal distance close to n 1, which is the worst case distance for size-n permutations. We suspect that the same is true for the transposition distance of randomly generated permutations.
Reference: [3] <author> S. Hannenhalli and P. Pevzner, </author> <title> Transforming cabbage into turnip (polynomial algorithm for sorting signed permutations by reversals), </title> <booktitle> in Twenty-Seventh Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1995, </year> <pages> pp. 178-189. </pages>
Reference-contexts: Bafna and Pevzner's algorithm, in particular, has a performance guarantee of 1.75. Heath and Vergara [4] test some conjectures on this problem and provide a mechanism to generate counterexamples. It is not yet known whether this problem is NP-complete or has a polynomial time algorithm. Hannenhalli and Pevzner <ref> [3] </ref> show that a variant of the problem, sorting signed permutations by reversals, is solvable in O (n 4 ) time.
Reference: [4] <author> L. S. Heath and J. P. C. Vergara, </author> <title> Some experiments on the sorting by reversals problem, </title> <type> Tech. Rep. TR 95-16, </type> <institution> Department of Computer Science, Virginia Polytechnic Institute and State University, </institution> <year> 1995. </year>
Reference-contexts: They identify upper and lower bounds for the reversal distance between permutations and devise corresponding approximation algorithms. Bafna and Pevzner's algorithm, in particular, has a performance guarantee of 1.75. Heath and Vergara <ref> [4] </ref> test some conjectures on this problem and provide a mechanism to generate counterexamples. It is not yet known whether this problem is NP-complete or has a polynomial time algorithm.
Reference: [5] <author> J. Kececioglu and D. Sankoff, </author> <title> Exact and approximation algorithms for the inversion distance between two chromosomes, </title> <booktitle> in Fourth Annual Symposium on Combinatorial Pattern Matching, Lecture Notes in Computer Science, </booktitle> <volume> vol. 684, </volume> <year> 1993, </year> <pages> pp. </pages> <month> 87-105. </month> <title> [6] , Efficient bounds for oriented chromosome inversion distance, </title> <booktitle> in Fifth Annual Symposium on Combinatorial Pattern Matching, Lecture Notes in Computer Science, </booktitle> <year> 1994, </year> <pages> pp. 307-325. </pages> <note> 16 GUYER, HEATH, AND VERGARA </note>
Reference-contexts: They show that the problem is NP-complete in general but solvable in polynomial time when only certain operations are allowed. Ke-cecioglu and Sankoff <ref> [5, 6] </ref> and Bafna and Pevzner [1] have results on sorting by reversals. Here, the operation is a reversal, i.e., a fragment of the genome is inverted. <p> Given a permutation and a transposition, we measure the length of the longest increasing subsequence in the resulting permutation. Among all possible transpositions, we select one that yields the longest increasing subsequence. Our remaining heuristics are based on runs. A run (increasing strips in previous literature <ref> [1, 2, 5, 6] </ref>) is defined as a maximal subsequence of consecutive, contiguous elements in the permutation. We employ algorithms that repeatedly select a run and then merge it with other runs using appropriate transpositions. <p> This algorithm is patterned after the branch and bound algorithm for sorting by reversals presented by Kececioglu and Sankoff <ref> [5] </ref>. Notice that the algorithm eliminates from HEURISTICS FOR SORTING BY TRANSPOSITIONS 7 TSBnB () Sorting by transpositions using branch and bound. INPUT: A permutation .
Reference: [7] <author> R. Lowrance and R. A. Wagner, </author> <title> An extension of the string-to-string correction problem, </title> <journal> Journal of the ACM, </journal> <volume> 22 (1975), </volume> <pages> pp. 177-183. </pages>
Reference-contexts: Some algorithmic results on this problem have already been obtained. These results typically involve restricting the operations on a genome to a subset of the operations identified above. Wagner [8] and Lowrance and Wagner <ref> [7] </ref> investigate string-to-string correction, a similar problem on strings involving edit operations such as insertion, deletion, and adjacent swaps of single symbols in the string. They show that the problem is NP-complete in general but solvable in polynomial time when only certain operations are allowed.
Reference: [8] <author> R. A. Wagner, </author> <title> On the complexity of the extended string-to-string correction problem, </title> <booktitle> in Proceedings of the 7th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1975, </year> <pages> pp. 218-222. </pages>
Reference-contexts: Some algorithmic results on this problem have already been obtained. These results typically involve restricting the operations on a genome to a subset of the operations identified above. Wagner <ref> [8] </ref> and Lowrance and Wagner [7] investigate string-to-string correction, a similar problem on strings involving edit operations such as insertion, deletion, and adjacent swaps of single symbols in the string. They show that the problem is NP-complete in general but solvable in polynomial time when only certain operations are allowed.
References-found: 6

