URL: http://www.cs.gatech.edu/people/home/ethane/pdcs97.ps.gz
Refering-URL: http://www.cs.gatech.edu/people/home/ethane/back.html
Root-URL: 
Title: A Disconnected File System for Mobile Linux Nodes  
Author: Ethendranath N. Bommaiah Timothy A. Gonsalves 
Address: Madras, India 600 036. Madras, India 600 036.  
Affiliation: Dept. of Computer Science and Engg. Dept. of Computer Science and Engg. Indian Institute of Technology Indian Institute of Technology  
Abstract: In mobile computing or networks with slow and intermittent dial-up links, disconnected file access becomes essential to provide continuous access to remote files. We have designed a Disconnected File System (DFS) that aims at improving response times by using a combination of whole-file and partial-file caching. Together with an efficient logging scheme, DFS is shown to yield improved response times. Hints from the user are utilized to improve the efficacy of caching. Support is provided for manual reconciliation of conflicts after reconnection. Measurements and analytical techniques show that DFS is comparable to NFS during connected operation. Measurements show that typical UNIX file system usage patterns make hybrid file caching an economical choice over whole-file caching under most conditions. DFS has been implemented on the Linux operating system, which is available on many hardware platforms, including laptops. Keywords: disconnected operation, hybrid file caching, weak consistency, logging, manual conflict resolution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.Demers, K.Petersen, M.Spreitzer, D.Terry, M.Theimer, and B.Welch, </author> <title> "The Bayou architecture: Support for data sharing among mobile users", </title> <booktitle> Workshop on Mobile Comp. Sys. and Ap-pls., </booktitle> <pages> pp. 2-7, </pages> <year> 1994. </year>
Reference-contexts: Little Work [9] is similar to Coda in the above aspects and uses peephole log optimization technique. Logging of non-mutating operations is also done to warn users of any stale data usage. Bayou <ref> [1] </ref> provides replicated, highly available, variable consistency, mobile databases on which collaborative applications can be built. The basic architecture adopted here thus differs from that of DFS.
Reference: [2] <author> A.D.Birrell, A.Hisgen, C.Jerian, T.Mann, and G.Swart, </author> <title> "The Echo Distributed File System", </title> <type> Research Report 111, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <year> 1993. </year>
Reference-contexts: We consider related file systems that use caching strategies and also those that aim at providing disconnected operation. Examples of such systems include Echo, Coda, Little Work, Bayou, Ficus and others. Echo <ref> [2] </ref> is a distributed file system which uses demand caching, where caching is done block by block. However, caching is done in main memory (assumed to be very large) and disconnected operation is not supported. Coda demonstrated the feasibility of disconnected operation by caching on the disk [8].
Reference: [3] <author> R.Bagrodia, W. W.Chu, L.Kleinrock, and G.Popek, </author> <title> "Vision, Issues, and Architecture for Nomadic Computing", </title> <journal> IEEE Personal Commns., </journal> <volume> Vol. 2(6), </volume> <pages> pp. 14-27, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Advancement in microprocessor and networking technologies has resulted in smaller and lighter computers, and alternative means of communication like wireless and dial-up lines are becoming popular. Achieving transparency in a distributed mobile computing environment requires considerable improvement in existing mechanisms <ref> [3] </ref>. NFS is a widely used attempt to achieve file system transparency. However, inaccessibility of the servers due to server or network failures causes the clients to block, often resulting in considerable loss of data and inconvenience to users.
Reference: [4] <author> M.G.Baker, J.H.Hartman, M.D.Kupfer, K.W.Shirriff, and J.K.Ousterhout, </author> <title> "Measurements of a Distributed File System", </title> <booktitle> 13th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pp. 198-212, </pages> <year> 1991. </year>
Reference-contexts: The above two choices have been strongly influenced by the file usage patterns in typical UNIX file systems, where the amount of write-sharing is small <ref> [4] </ref>. This also makes it unsuitable for transaction based or database applications or, even for file systems with considerable write-sharing. In the next section on Implementation, we will discuss how we use hints provided by the users to take precautions to handle potential future conflicts.
Reference: [5] <author> D.Terry, M.Theimer, K.Petersen, A.Demers, M.Spreitzer, and C.Hauser, </author> <title> "Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System", </title> <booktitle> 15th ACM Symp. on Operating Systems Principles, </booktitle> <year> 1995. </year>
Reference-contexts: Ficus [6] is another file system that adopts the peer-to-peer model as against the client-server model in DFS. Bayou <ref> [5] </ref>, Ficus [10] and Coda [11] also support semi-automatic conflict resolution mechanisms, which is not supported in DFS yet.
Reference: [6] <author> J.S.Heidemann, Page, Jr., T.W., R.G.Guy, and G.J.Popek, </author> <title> "Primarily Disconnected Operation: Experiences with Ficus", </title> <booktitle> Proceedings of the 2nd Workshop on Mgmt. of Replicated Data, IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: The basic architecture adopted here thus differs from that of DFS. Bayou allows variable degrees of replication and a flexible client-server architecture is adopted wherein any machine holding a copy of a database should be willing to service read and write requests from other nearby ma-chines. Ficus <ref> [6] </ref> is another file system that adopts the peer-to-peer model as against the client-server model in DFS. Bayou [5], Ficus [10] and Coda [11] also support semi-automatic conflict resolution mechanisms, which is not supported in DFS yet.
Reference: [7] <author> M. Johnson, </author> <title> "The Linux Kernel Hackers' Guide", </title> <address> http://sunsite.unc.edu/mdw. </address>
Reference-contexts: Message queues are used for kernel-Clientd and Clientd-Proxyd communication. Shared memory is used for Pingd-Clientd communication. 3.2 Modifications to the Linux Kernel As the modifications are specific to the Linux kernel internals <ref> [7] </ref>, we briefly describe the general ideas behind the modifications. The modifications include changes to the process table and the file table data structures among others. Filters are inserted in the file system call functions to take necessary action when a remote file is being accessed.
Reference: [8] <author> J.J.Kistler, and M.Satyanarayanan, </author> <title> "Disconnected Operation in the Coda File System", </title> <journal> ACM Trans. on Comp. Systems, </journal> <volume> Vol. 10(1), </volume> <pages> pp. 3-25, </pages> <year> 1992. </year>
Reference-contexts: Hard links cannot be supported as they result in separate cached copies of the same server copy and might result in conflicts due to updates being made to different copies. 2.3 A Hybrid File Caching Approach Whole-file caching, as implemented in the Coda file system <ref> [8] </ref>, involves caching a file in its entirety. On the other hand, partial-file caching involves on-demand caching of the required data blocks of a file. With the latter approach, read or write system calls could fail even after open succeeds. <p> Echo [2] is a distributed file system which uses demand caching, where caching is done block by block. However, caching is done in main memory (assumed to be very large) and disconnected operation is not supported. Coda demonstrated the feasibility of disconnected operation by caching on the disk <ref> [8] </ref>. However, Coda adopts whole-file caching, uses callback mechanisms and optimizes the log of all mutating operations on the cached copies before replaying them on the server, which is not necessary with DFS. Little Work [9] is similar to Coda in the above aspects and uses peephole log optimization technique.
Reference: [9] <author> P.Honeyman, L.B.Huston, J.Rees, and D.Bachmann, </author> <title> "The LITTLE WORK Project", </title> <booktitle> 3rd IEEE Workshop on Workstation Operating Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Coda demonstrated the feasibility of disconnected operation by caching on the disk [8]. However, Coda adopts whole-file caching, uses callback mechanisms and optimizes the log of all mutating operations on the cached copies before replaying them on the server, which is not necessary with DFS. Little Work <ref> [9] </ref> is similar to Coda in the above aspects and uses peephole log optimization technique. Logging of non-mutating operations is also done to warn users of any stale data usage. Bayou [1] provides replicated, highly available, variable consistency, mobile databases on which collaborative applications can be built.
Reference: [10] <author> P.Reiher, J.S.Heidemann, D.Ratner, G.Skinner, and G.J.Popek, </author> <title> "Resolving File Conflicts in the Ficus File System", </title> <booktitle> USENIX Conf. Proceedings, USENIX, </booktitle> <pages> pp. 183-195, </pages> <year> 1994. </year>
Reference-contexts: Ficus [6] is another file system that adopts the peer-to-peer model as against the client-server model in DFS. Bayou [5], Ficus <ref> [10] </ref> and Coda [11] also support semi-automatic conflict resolution mechanisms, which is not supported in DFS yet.
Reference: [11] <author> P.Kumar and M.Satyanarayanan, </author> <title> "Supporting application-specific resolution in an optimistically replicated file system", </title> <booktitle> Fourth Workshop on Workstation Operating Systems, IEEE, </booktitle> <pages> pp. 66-70, </pages> <year> 1993. </year>
Reference-contexts: Ficus [6] is another file system that adopts the peer-to-peer model as against the client-server model in DFS. Bayou [5], Ficus [10] and Coda <ref> [11] </ref> also support semi-automatic conflict resolution mechanisms, which is not supported in DFS yet.
Reference: [12] <author> M.Satyanarayanan, J.J.Kistler, P.Kumar, M.E.Okasaki, E.H.Siegel, and D.C.Steere, </author> <note> "Coda: </note>
Reference-contexts: In addition, by selectively caching the files wholly or partially, we feel that the number of clients supportable by each server is also increased. We do not use callback mechanisms <ref> [12] </ref> to maintain cache consistency. If the server copy is more recent than the cached copy and the cached copy is not dirty, then the cached copy is replaced by the more recent copy from the server.
References-found: 12

