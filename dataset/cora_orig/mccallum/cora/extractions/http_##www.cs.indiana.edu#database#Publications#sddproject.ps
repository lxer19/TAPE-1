URL: http://www.cs.indiana.edu/database/Publications/sddproject.ps
Refering-URL: http://www.cs.indiana.edu/database/Publications/index.html
Root-URL: http://www.cs.indiana.edu
Title: Structured Document Databases  
Author: Arijit Sengupta 
Date: September 4, 1996  
Abstract: This is a summary of research activities so far performed in the Structured Document Database project. The project involves building a database environment for storing, querying and updating structured documents in particular, documents encoded in SGML (Standard Generalized Markup Language) [ISO86]. The project has three major components - (i) designing a query language for querying structured documents, (ii) designing and implementing a query engine capable of performing queries written in this query language, and (iii) designing and implementing an interactive Graphical User Interface capable of expressing queries in this language. This report describes the work done in each of the above areas, and projected plans for the immediate future. 
Abstract-found: 1
Intro-found: 1
Reference: [CDNM94] <author> M. Carey, D. DeWitt, J. Naughton, and M.Solomon. </author> <title> Shoring up persistent applications. </title> <booktitle> ACM Sigmod Conference Proceedings, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Two different versions of the engine have been built however, both are restricted in functionality. The first version is built using Shore <ref> [CDNM94] </ref> an object-oriented data repository, and the second version is built using the Open Text Pat database system. The current version of the user interface is interfaced with the Pat engine, because of its support for most of the required queries. <p> The current version of the user interface is interfaced with the Pat engine, because of its support for most of the required queries. However, the final version is planned to be independent of any commercial database engine. 6.1 Using Shore Shore <ref> [CDNM94] </ref> is an object-oriented persistent data repository. It provides internal data-integrity and locking functionality and lets the programmer specify his/her data format. The version of the query engine built using shore initially works on the data and builds a persistent structure.
Reference: [Cha94] <author> Chadwyck-Healey. </author> <title> The English Poetry Full-Text Database, </title> <note> 1994. The works of more than 1,250 poets from 600 to 1900. </note>
Reference-contexts: The current version of the interface is being used for sending queries to an Open Text [Ope94] database containing the Chadwyck-Healey English Poetry Full-Text database <ref> [Cha94] </ref>. The interface is designed so that the backend can be easily modified to use an alternative engine That can perform tree-traversal type of operations. 6 The current version of the interface has the following features: 1. A three-pane visualization of the query language.
Reference: [ISO86] <author> International Standards Organization. </author> <title> ISO 8879: Information Processing Text and Office Systems Standard Generalized Markup Language (SGML), </title> <booktitle> 1986. </booktitle> <pages> 7 </pages>
Reference: [ISO92] <institution> International Standards Organization. ISO/IEC 10744: Hypermedia/Time-based Structuring Language: HyTime, </institution> <year> 1992. </year>
Reference-contexts: The basic requirements of such a system are the following: 1. Data Format: The database will contain documents in SGML format. It should possibly have support for HyTime <ref> [ISO92] </ref> and DSSSL [ISO94] standards. 2.
Reference: [ISO94] <author> International Standards Organization. </author> <title> ISO/IEC DIS 10179: Document Style Semantics and Specification Language: </title> <address> DSSSL, </address> <year> 1994. </year>
Reference-contexts: The basic requirements of such a system are the following: 1. Data Format: The database will contain documents in SGML format. It should possibly have support for HyTime [ISO92] and DSSSL <ref> [ISO94] </ref> standards. 2.
Reference: [Jav95] <author> Sun Microsystems. </author> <title> The Java T M Language Specification: Version 1.0 Beta, </title> <year> 1995. </year>
Reference-contexts: A prototype interface that implements the projection and selection queries has already been built and tested for usability. A preliminary description of the interface and the motivations for it can be obtained from [SD96]. The interface has been built using the Java T M <ref> [Jav95] </ref>, an object-oriented distributed programming language. In spite of its state of infancy and sub-optimal efficiency, we decided to choose Java over other other graphical interface builders, because of its availability, and the capability of running Java-based programs from a WWW browser.
Reference: [Ope94] <institution> Open Text Corporation. Open Text 5.0, </institution> <year> 1994. </year>
Reference-contexts: At query time, the parse tree is read back from the shore repository. The query is converted to a traversal strategy, and the result is formed using a set of nodes of the parse tree. 6.2 Using Pat Pat, or Open Text 5.0 <ref> [Ope94] </ref> is a document database system that uses a proprietary "Patricia tree" index for fast access to structured data. Although very fast and efficient, the Pat query language is not adequate for first order logic queries. <p> The current version of the interface is being used for sending queries to an Open Text <ref> [Ope94] </ref> database containing the Chadwyck-Healey English Poetry Full-Text database [Cha94]. The interface is designed so that the backend can be easily modified to use an alternative engine That can perform tree-traversal type of operations. 6 The current version of the interface has the following features: 1.
Reference: [SD96] <author> Arijit Sengupta and Andrew Dillon. </author> <title> Extending sgml to accommodate database functions: A methodological overview. </title> <address> JASIS, </address> <year> 1996. </year> <note> To appear in the JASIS special issue on Structured Information/Standards for Document Architectures. </note>
Reference-contexts: We call this type of interface "Query By Template" or QBT. A prototype interface that implements the projection and selection queries has already been built and tested for usability. A preliminary description of the interface and the motivations for it can be obtained from <ref> [SD96] </ref>. The interface has been built using the Java T M [Jav95], an object-oriented distributed programming language.
Reference: [Sen95] <author> Arijit Sengupta. </author> <title> Design and implementation of a database environment for the manipulation of structured documents. </title> <type> Proposal for Ph.D. Thesis, </type> <month> April </month> <year> 1995. </year>
Reference-contexts: A small classification of current work based on these two broad categories can be found in my thesis proposal <ref> [Sen95] </ref>. 4 Overview of Current Work The current work can be broadly classified under the top-down approach category.
Reference: [Sen96a] <author> Arijit Sengupta. </author> <title> Demand more from your SGML database! bringing SQL under the SGML limelight. </title> <journal> &lt;TAG&gt;, </journal> <volume> 9(4) </volume> <pages> 1-7, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Other extensions: Some other small extensions of SQL are necessary to properly access SGML attribute values, to properly use HyTime links, and to express comparison between relative positions. More details on these two extensions and example queries can be obtained from <ref> [Sen96a] </ref>. 5.1 Properties of the query language The proposed query language was designed to perform the basic first-order-logic type of queries with complex selections and path expressions. It still needs to be formally proved whether or not this language is in PTIME.
Reference: [Sen96b] <author> Arijit Sengupta. </author> <title> Standardizing the querying process with SGML: The SQL DTD. </title> <editor> In Tommie Usdin and Debbie Lapeyre, editors, </editor> <booktitle> Proceedings of the SGML'96 Conference. Graphic Communications Association, </booktitle> <month> November </month> <year> 1996. </year> <note> To appear in the Conference Proceedings. </note>
Reference-contexts: Title was immediately followed by projection of the Author nodes, so the result will not contain the temporary root that is introduced. 5.5 An alternative query language An alternative, but equivalent query language, in which SGML itself is used to formulate the query using an SQL DTD, is described in <ref> [Sen96b] </ref>. 6 The Query Engine The work on the query engine is still at its infancy, primarily because of the lack of good low level database support in the chosen platforms. Two different versions of the engine have been built however, both are restricted in functionality.
Reference: [SQL86] <author> ANSI X3.135-1986, </author> <title> Database Language SQL, </title> <year> 1986. </year>
Reference-contexts: the query language may be somewhat restricted compared to the actual query language, but it should be able to pose a significant subset of the class of queries that the query language can pose. 5 The Query Language The proposed query language has its roots in SQL (Structured Query Language) <ref> [SQL86] </ref>. SQL is a natural language implementation of the more formal "Relational Calculus", and can pose a class of queries which are all solvable in polynomial time. The language we propose is an extension to SQL which introduces two main additional features to SQL over the standard: 1.
Reference: [Zlo77] <author> M. M. Zloof. </author> <title> Query by example: A database language. </title> <journal> IBM Systems Journal, </journal> <volume> 16(4), </volume> <year> 1977. </year> <month> 8 </month>
Reference-contexts: However, such strategies can get complex when the regions are combined using different logical operators. In that case, the accumulators have to be merged to one. 7 The Query Interface The proposed visual query interface is analogous to the "Query By Example" method for relational databases <ref> [Zlo77] </ref>. This method uses a visual template for the instances in the database for querying. Users then use a point-and-click method to point to specific regions of the template to specify query strings corresponding to the particular regions. We call this type of interface "Query By Template" or QBT.
References-found: 13

