URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Proceedings.ps/renzel.ps
Refering-URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Workshops.html
Root-URL: http://www.cs.uiuc.edu
Email: email: Klaus.Renzel@sdm.de  email: WofgangWKeller@compuserve.com  
Phone: Phone: +49-89-63812-251  Phone: +43-1-53401-0  
Title: Client/Server Architectures for Business Information Systems Page 1 Client/Server Architectures for Business Information Systems A
Author: Klaus Renzel Wolfgang Keller 
Note: Copyright 1997, Klaus Renzel, Wolfgang Keller Permission granted to copy for PLoP97 Conference. All other rights reserved.  
Web: http://www.sdm.de/g/arcus  
Address: Thomas-Dehler-Str. 27 D-81737 Mnchen, Germany  Reumannplatz 7 A-1100 Vienna, Austria  
Affiliation: sd&m GmbH Co. KG Project ARCUS 1  EA Generali  
Abstract: This paper presents several patterns for distributing business information systems that are structured according to a layered architecture. 2 Each distribution pattern cuts the architecture into different client and server components. All the patterns presented give an answer to the same question: How do I distribute a business information system? However, the consequences of applying the patterns are very different with regards to the forces influencing distributed systems de sign.
Abstract-found: 1
Intro-found: 1
Reference: [ACD+96] <author> Juan M. Andrade, Mark T. Carges, Terence J. Dwyer, Stephen D. Felts: </author> <title> The TUXEDO System, Software for Constructing and Managing Distributed Business Applications; Addison Wesley, </title> <note> 1996; ISBN 0-201-63493-7 </note>
Reference-contexts: Load balancing: Most distributed programming environments offer run time load balancing by replicating application servers at run time. Some distributed transaction environments <ref> [ACD+96] </ref> also offer advanced techniques such as priority queues, data dependent request routing and other scheduling techniques. Manageability: Depending on the middleware used, a Remote User Interface may be the best manageable architecture of all. Distributed transaction processing environments have brought many mainframe administration features to client server networks.
Reference: [BMR+96] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, Michael Stal: </author> <title> Pattern-Oriented Software Architecture - A System of Patterns; John Wiley & Sons Ltd., </title> <address> Chichester, England, 1996; ISBN 0-471-95869-7 </address>
Reference-contexts: Generally, the system must support more than one type of data processing, such as online transaction processing (OLTP), off-line processing or batch processing. Typically, the application architecture of the system is a Three Layer Architecture: Most architectures for information systems derive from a layered architecture <ref> [BMR+96, p. 31, Den91] </ref> as depicted in Figure 1. <p> Software distribution cost: This architecture has higher software distribution costs than a Distributed Presentation Architecture. Often you can parameterize plausibility checking and dialog control using table driven meta systems (Reflection <ref> [BMR+96] </ref>. This will reduce the need for software updates, as tables are easier to distribute than dynamic link libraries and whole software releases. In any case, a Remote User Interface needs a full fledged operating system plus a graphical presentation system plus some communication software to cope with the middleware.
Reference: [CK97] <author> J. Coldewey, I. Krger: </author> <title> Form-Based User Interface - The Architectural Patterns; in Frank Buschmann, </title> <editor> Dirk Riehle (Eds.): </editor> <booktitle> Proceedings of the 1997 European Pattern Languages of Programming Conference, </booktitle> <address> Irsee, Germany, </address> <note> Siemens Technical Report 120/SW1/FB, </note> <year> 1997 </year>
Reference-contexts: Dialog Control Application Kernel Database Presentation Database Access User Interface Business Logic Data Management C o m o n S The user interface handles presentational tasks and controls the dialog (e.g. see <ref> [CK97] </ref>), the application kernel performs the domain specific business tasks and the database access layer Client/Server Architectures for Business Information Systems Page 3 [KC96] connects the application kernel functions to a database. 3 Our distribution view focuses on this coarse-grain component level. <p> For a X-Window System even in 10 Mbit LANs the usage is limited to roughly a hundred X-Terminals. In case of online processing the solution is best suited for form-based user interfaces in opposite to objectoriented user interfaces <ref> [CK97] </ref>. Thus, either the concrete technical infrastructure constrains the design of the user interface or vice versa. Processing style: A Distributed Presentation Architecture facilitates batch and transaction processing, because it does not split data processing and transaction control between different nodes of the systems network. <p> A Distributed Application Kernel provides more flexibility and a more fine-grained level of reuse. 'HVLJQ Choose a dialog paradigm: The architecture works best with a Form-Based User Interface <ref> [CK97] </ref>. Other forms of dialogs, especially direct manipulation may be better for some purposes in advanced applications, but will result in more network traffic. Therefore advanced information systems that cause heavy data transfer between user interface and data are better off with some form of offline architecture.
Reference: [Den91] <editor> Ernst Denert: </editor> <publisher> Software-Engineering - Methodische Projektabwicklung; Springer-Verlag, </publisher> <address> Berlin Heidelberg New York; 1991, ISBN 3-540-53404-0 </address>
Reference-contexts: Generally, the system must support more than one type of data processing, such as online transaction processing (OLTP), off-line processing or batch processing. Typically, the application architecture of the system is a Three Layer Architecture: Most architectures for information systems derive from a layered architecture <ref> [BMR+96, p. 31, Den91] </ref> as depicted in Figure 1.
Reference: [DRDA] <author> IBM: </author> <title> Distributed Relational Database Architecture (DRDA*) - An Open Database Solution; http://www.software.ibm.com/data/drda.html </title>
Reference-contexts: It is more common to use a distributed database in combinations with Remote User Interface or Remote Database to build a three-tier architecture. .QRZQfl8VHV IBMs DRDA <ref> [DRDA] </ref> defines an interaction protocol for the communication between database clients and a database server. Client and Server databases complying to DRDA (e.g. via some gateway) can be combined to a distributed database system.
Reference: [Gam92] <author> Erich Gamma: </author> <title> Objektorientierte Software-Entwicklung am Beispiel von ET++: </title> <address> Design-Muster, Klassenbibliothek, Werkzeuge; Springer-Verlag Berlin Heidelberg New York, 1992; ISBN 3-540-56006-8 </address>
Reference: [Hir96] <editor> Robert Hirschfeld: </editor> <booktitle> Three Tier Distributed Architecture; Proceedings PLoP 96, </booktitle> <address> Allerton Park, IL, </address> <year> 1996. </year>
Reference-contexts: Client/Server Architectures for Business Information Systems Page 7 The patterns are orthogonal to each other. They may therefore be combined within a single design of a distributed information system (e.g. to build a Three Tier Architecture <ref> [Hir96] </ref> as illustrated in Figure 4). 4 3 Description of the Solutions Each solution presents a macro-level architecture for system distribution. These architectures can not resolve every force impacting client/server design.
Reference: [IRIDIUM] <author> IRIDIUM Homepage: </author> <note> http://www.iridium.com/ </note>
Reference-contexts: Hypo Bank in Munich, Germany uses OS/2 department servers, DDCS/2 and a MVS enterprise server together with the DB2 family of RDA products. Client/Server Architectures for Business Information Systems Page 24 The IRIDIUM architecture <ref> [IRIDIUM] </ref>, a very known project for a satellite based mobile phone system uses the following trick, to improve distributed database system performance: business objects are connected via an Object Request Broker bus and not via the distributed database. Internal business object traffic is done using the distributed database.
Reference: [KC96] <author> Wolfgang Keller, Jens Coldewey: </author> <title> Relational Database Access Layers: </title> <booktitle> A Pattern Language; Proceedings PLoP 96, </booktitle> <address> Allerton Park 1996. </address> <note> Actual version can also be downloaded from http://www.sdm.de/g/arcus/cookbook/. Client/Server Architectures for Business Information Systems Page 25 </note>
Reference-contexts: Presentation Database Access User Interface Business Logic Data Management C o m o n S The user interface handles presentational tasks and controls the dialog (e.g. see [CK97]), the application kernel performs the domain specific business tasks and the database access layer Client/Server Architectures for Business Information Systems Page 3 <ref> [KC96] </ref> connects the application kernel functions to a database. 3 Our distribution view focuses on this coarse-grain component level. In developing a distributed system architecture we mainly use the Client/Server Style (see [Wei97] for discussion of this style in pattern form), which defines a model for distributed processing.
Reference: [KMW96] <author> Wolfgang Keller, Christian Mitterbauer, Klaus Wagner: </author> <title> Objektorientierte Datenintegration ber mehrere Technologiegenerationen; Proceedings ONLINE, </title> <booktitle> Kongress VI, </booktitle> <address> Hamburg, </address> <year> 1996 </year>
Reference-contexts: Existing legacy applications: It is very hard to integrate existing legacy applications into a pure RDB architecture. You may couple old and new applications via a common database but this requires custom programming and is hard to do with plain 4GLs (see <ref> [KMW96] </ref> for more information). Manageability: SQL network protocols do not support management of large networks. You have to rely on the common products like SNMP. Ease of creation: Implementing a simple RDB architecture is easy compared to Distributed Presentation Architecture and Distributed Application Kernel.
Reference: [Lam94] <author> Winfried Lamersdorf: </author> <title> Datenbanken in verteilten Systemen: </title> <type> Konzepte, </type> <institution> Lsungen, Standards; Vieweg , Braunschweig, </institution> <note> 1994; ISBN 3-528-05467-0 </note>
Reference-contexts: ORACLEs SQL*Net) are proprietary products that do not support any portability. You may use a standard API, such as ODBC. However, there are several levels of ODBC compliance, also resulting in poor portability. Additionally, any use of stored procedures effects portability due to proprietary protocols and languages. RDA (e.g. <ref> [Lam94] </ref> provides an overview) is a communication protocol for remote database access that has been adopted as an international standard.
Reference: [Moo97] <author> Conor Mooney: </author> <title> A Practical Framework for Distributing Business Objects; Object Expert, </title> <note> Vol 2(2) Jan/Feb 1997. </note>
Reference-contexts: Distributed transaction processing environments have brought many mainframe administration features to client server networks. Client/Server Architectures for Business Information Systems Page 14 .QRZQfl8VHV A lot of all client server architectures implemented today are Remote User Interface architectures with their share rising. The OASIS framework <ref> [Moo97] </ref> implements a Remote User Interface within a Three-Tier-Architecture. 3.3 Pattern: Distributed Application Kernel 6ROXWLRQ Apply a client server cut through the application kernel. The architect may distribute the application kernel freely at her or his whim, following certain rules. <p> Fort even supports automated partitioning at run-time. The OASIS framework <ref> [Moo97] </ref> allows persistent application kernel objects to be loaded on a client. This behavior comes close to Half-Object Assembly [Toe97]. Client/Server Architectures for Business Information Systems Page 17 3.4 Pattern: Remote Database (RDB) 6ROXWLRQ Apply a client server cut below the database access layer.
Reference: [Ren96] <author> Paul E. Renaud: </author> <note> Introduction to Client/Server Systems; Second Edition, Wiley 1996; ISBN 0 471-13333-7 </note>
Reference: [RDA93a] <author> International Organization for Standardization (ISO): </author> <title> Remote Database Access (RDA) - Service and Protocol; International Standard 9579-1, </title> <address> ISO/IEC JTC1/SC21, </address> <year> 1993 </year>
Reference-contexts: Additionally, any use of stored procedures effects portability due to proprietary protocols and languages. RDA (e.g. [Lam94] provides an overview) is a communication protocol for remote database access that has been adopted as an international standard. It consists of two parts: The first part <ref> [RDA93a] </ref> specifies a generic model (services, protocol) for arbitrary database connection whereas the second part [RDA93b] specializes the model for connecting to SQL-databases. The RDA standard does not comprise any specification for an API, so it promotes interoperability but not portability.
Reference: [RDA93b] <author> International Organization for Standardization (ISO): </author> <title> Remote Database Access (RDA) - SQL Specialization; International Standard 9579-2, </title> <address> ISO/IEC JTC1/SC21, </address> <year> 1993 </year>
Reference-contexts: RDA (e.g. [Lam94] provides an overview) is a communication protocol for remote database access that has been adopted as an international standard. It consists of two parts: The first part [RDA93a] specifies a generic model (services, protocol) for arbitrary database connection whereas the second part <ref> [RDA93b] </ref> specializes the model for connecting to SQL-databases. The RDA standard does not comprise any specification for an API, so it promotes interoperability but not portability. Scalability: Most RDBMS offer only pure support for multiple servers.
Reference: [SG86] <author> R. W. Scheifler, J. </author> <title> Gettys: </title> <journal> The X Window System; ACM Transactions on Graphics 5(2), </journal> <pages> pp. 79-109, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: You can tackle these problems with LAN segmentation and high speed LANs. The scalability of the server node depends on the system platform (hardware and system software). .QRZQfl8VHV X-Window Architecture: The most popular implementation of this architecture is the interactive network graphics provided by the X-Window System <ref> [SG86] </ref>. In the X-Window System the presentation protocol is known as the X-Protocol. IBM 3270-Terminal: This may be seen as an early form of the Distributed Presentation Architecture in the world of alpha terminals.
Reference: [Sim95] <author> David Simpson: </author> <title> A UNIX Server Is No Mainframe; Datamation, </title> <month> December 15, </month> <year> 1995. </year>
Reference: [Toe97] <author> Fridtjof Toenniessen: </author> <title> Half-Object Assembly - a Pattern System for Distributed Domain Objects in Business Applications; in Frank Buschmann, </title> <editor> Dirk Riehle (Eds.): </editor> <booktitle> Proceedings of the 1997 European Pattern Languages of Programming Conference, </booktitle> <address> Irsee, Germany, </address> <note> Siemens Technical Report 120/SW1/FB, </note> <year> 1997 </year>
Reference-contexts: Fort even supports automated partitioning at run-time. The OASIS framework [Moo97] allows persistent application kernel objects to be loaded on a client. This behavior comes close to Half-Object Assembly <ref> [Toe97] </ref>. Client/Server Architectures for Business Information Systems Page 17 3.4 Pattern: Remote Database (RDB) 6ROXWLRQ Apply a client server cut below the database access layer. Persistence is provided by a remote (relational) database that is addressed via some remote database access protocol.
Reference: [Wei97] <author> Charles Weir: </author> <title> Architectural Styles for Distribution . Using macro-patterns for system design; in Frank Buschmann, </title> <editor> Dirk Riehle (Eds.): </editor> <booktitle> Proceedings of the 1997 European Pattern Languages of Programming Conference, </booktitle> <address> Irsee, Germany, </address> <note> Siemens Technical Report 120/SW1/FB, </note> <year> 1997 </year>
Reference-contexts: In developing a distributed system architecture we mainly use the Client/Server Style (see <ref> [Wei97] </ref> for discussion of this style in pattern form), which defines a model for distributed processing. Within this model components of a distributed system are classified by two roles: client and server. Clients and servers communicate via a simple request/response protocol. <p> Client/Server Architectures for Business Information Systems Page 11 6HHfl$OVR In context of a mainframe with connected terminals the pattern corresponds to the Host-Terminal Style <ref> [Wei97] </ref>. 7 The X-Window System and HTML-Browsers use the ClientServer Style [Wei97]. 3.2 Pattern: Remote User Interface $OVRfl.QRZQfl$V Thin Client 6ROXWLRQ Apply a client server cut between dialog control and application kernel. <p> Client/Server Architectures for Business Information Systems Page 11 6HHfl$OVR In context of a mainframe with connected terminals the pattern corresponds to the Host-Terminal Style <ref> [Wei97] </ref>. 7 The X-Window System and HTML-Browsers use the ClientServer Style [Wei97]. 3.2 Pattern: Remote User Interface $OVRfl.QRZQfl$V Thin Client 6ROXWLRQ Apply a client server cut between dialog control and application kernel. On the client node the dialog control recognizes domain level actions and issues the necessary commands to the application kernel on a server node to perform these actions.
Reference: [X/O96] <author> X/Open: </author> <title> Distributed TP: Reference Mode; Version 3, </title> <publisher> X/Open Company Ltd., </publisher> <address> 1996; ISBN 1 85912-170-5 </address>
Reference: [zAPP] <institution> Rogue Wave Software Inc.: </institution> <address> zAPP Developers Suite; http://www.roguewave.com/products/ zapp/index.html </address>
References-found: 21

